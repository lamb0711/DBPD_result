YARN-5543. ResourceManager SchedulingMonitor could potentially terminate the preemption checker thread. Contributed by Min Shen.
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.TimeUnit;
+
-  //thread which runs periodically to see the last time since a heartbeat is
-  //received.
-  private Thread checkerThread;
+  // ScheduledExecutorService which schedules the PreemptionChecker to run
+  // periodically.
+  private ScheduledExecutorService ses;
+  private ScheduledFuture<?> handler;
-    checkerThread = new Thread(new PreemptionChecker());
-    checkerThread.setName(getName());
-    checkerThread.start();
+    ses = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {
+      public Thread newThread(Runnable r) {
+        Thread t = new Thread(r);
+        t.setName(getName());
+        return t;
+      }
+    });
+    handler = ses.scheduleAtFixedRate(new PreemptionChecker(),
+        0, monitorInterval, TimeUnit.MILLISECONDS);
-    if (checkerThread != null) {
-      checkerThread.interrupt();
+    if (handler != null) {
+      LOG.info("Stop " + getName());
+      handler.cancel(true);
+      ses.shutdown();
-      while (!stopped && !Thread.currentThread().isInterrupted()) {
-        try {
-          //invoke the preemption policy at a regular pace
-          //the policy will generate preemption or kill events
-          //managed by the dispatcher
-          invokePolicy();
-        } catch (YarnRuntimeException e) {
-          LOG.error("YarnRuntimeException raised while executing preemption"
-              + " checker, skip this run..., exception=", e);
-        }
-
-        // Wait before next run
-        try {
-          Thread.sleep(monitorInterval);
-        } catch (InterruptedException e) {
-          LOG.info(getName() + " thread interrupted");
-          break;
-        }
+      try {
+        //invoke the preemption policy
+        invokePolicy();
+      } catch (YarnRuntimeException e) {
+        LOG.error("YarnRuntimeException raised while executing preemption"
+            + " checker, skip this run..., exception=", e);
