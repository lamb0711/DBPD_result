YARN-4162. CapacityScheduler: Add resource usage by partition and queue capacity by partition to REST API. (Naganarasimha G R via wangda)

-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.QueueCapacities;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.PartitionQueueCapacitiesInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.PartitionResourceUsageInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ResourceInfo;
+    boolean isExclusiveNodeLabel;
-      nodeLabel = nodeLabel.length() == 0
+      String nodeLabelDisplay = nodeLabel.length() == 0
-              + "\' Queue Status for Partition \'" + nodeLabel + "\'");
-      renderQueueCapacityInfo(ri);
+              + "\' Queue Status for Partition \'" + nodeLabelDisplay + "\'");
+      renderQueueCapacityInfo(ri, nodeLabel);
-      renderQueueCapacityInfo(ri);
+      renderQueueCapacityInfo(ri, "");
-    private void renderQueueCapacityInfo(ResponseInfo ri) {
+    private void renderQueueCapacityInfo(ResponseInfo ri, String label) {
+      PartitionQueueCapacitiesInfo capacities =
+          lqinfo.getCapacities().getPartitionQueueCapacitiesInfo(label);
+      PartitionResourceUsageInfo resourceUsages =
+          lqinfo.getResources().getPartitionResourceUsageInfo(label);
-      _("Used Capacity:", percent(lqinfo.getUsedCapacity() / 100)).
-      _("Configured Capacity:", percent(lqinfo.getCapacity() / 100)).
-      _("Configured Max Capacity:", percent(lqinfo.getMaxCapacity() / 100)).
-      _("Absolute Used Capacity:", percent(lqinfo.getAbsoluteUsedCapacity() / 100)).
-      _("Absolute Configured Capacity:", percent(lqinfo.getAbsoluteCapacity() / 100)).
-      _("Absolute Configured Max Capacity:", percent(lqinfo.getAbsoluteMaxCapacity() / 100)).
-      _("Used Resources:", lqinfo.getResourcesUsed().toString());
+      _("Used Capacity:", percent(capacities.getUsedCapacity() / 100)).
+      _("Configured Capacity:", percent(capacities.getCapacity() / 100)).
+      _("Configured Max Capacity:", percent(capacities.getMaxCapacity() / 100)).
+      _("Absolute Used Capacity:", percent(capacities.getAbsoluteUsedCapacity() / 100)).
+      _("Absolute Configured Capacity:", percent(capacities.getAbsoluteCapacity() / 100)).
+      _("Absolute Configured Max Capacity:", percent(capacities.getAbsoluteMaxCapacity() / 100)).
+      _("Used Resources:", resourceUsages.getUsed().toString());
+    private String nodeLabel;
+      nodeLabel = info.label;
+        ResourceInfo resourcesUsed = userInfo.getResourcesUsed();
+        if (nodeLabel != null) {
+          resourcesUsed = userInfo.getResourceUsageInfo()
+              .getPartitionResourceUsageInfo(nodeLabel).getUsed();
+        }
-            .td(userInfo.getResourcesUsed().toString())
+            .td(resourcesUsed.toString())
-      ArrayList<CapacitySchedulerQueueInfo> subQueues =
-          (csqinfo.qinfo == null) ? csqinfo.csinfo.getQueues().getQueueInfoList()
-              : csqinfo.qinfo.getQueues().getQueueInfoList();
+      ArrayList<CapacitySchedulerQueueInfo> subQueues = (csqinfo.qinfo == null)
+          ? csqinfo.csinfo.getQueues().getQueueInfoList()
+          : csqinfo.qinfo.getQueues().getQueueInfoList();
+
+      float used;
+      float absCap;
+      float absMaxCap;
+      float absUsedCap;
-        float used = info.getUsedCapacity() / 100;
-        float absCap = info.getAbsoluteCapacity() / 100;
-        float absMaxCap = info.getAbsoluteMaxCapacity() / 100;
-        float absUsedCap = info.getAbsoluteUsedCapacity() / 100;
+        String nodeLabel = (csqinfo.label == null) ? "" : csqinfo.label;
+        //DEFAULT_NODE_LABEL_PARTITION is accessible to all queues
+        //other exclsiveNodeLabels are accessible only if configured
+        if (!nodeLabel.isEmpty()// i.e. its DEFAULT_NODE_LABEL_PARTITION
+            && csqinfo.isExclusiveNodeLabel
+            && !info.getNodeLabels().contains("*")
+            && !info.getNodeLabels().contains(nodeLabel)) {
+          continue;
+        }
+        PartitionQueueCapacitiesInfo partitionQueueCapsInfo = info
+            .getCapacities().getPartitionQueueCapacitiesInfo(nodeLabel);
+        used = partitionQueueCapsInfo.getUsedCapacity() / 100;
+        absCap = partitionQueueCapsInfo.getAbsoluteCapacity() / 100;
+        absMaxCap = partitionQueueCapsInfo.getAbsoluteMaxCapacity() / 100;
+        absUsedCap = partitionQueueCapsInfo.getAbsoluteUsedCapacity() / 100;
+
-        if (null == nodeLabelsInfo
-            || (nodeLabelsInfo.size() == 1 && nodeLabelsInfo.get(0)
-                .getLabelName().isEmpty())) {
-          CSQueue root = cs.getRootQueue();
-          CapacitySchedulerInfo sinfo =
-              new CapacitySchedulerInfo(root, cs, new RMNodeLabel(
-                  RMNodeLabelsManager.NO_LABEL));
-          csqinfo.csinfo = sinfo;
-          csqinfo.qinfo = null;
+        CSQueue root = cs.getRootQueue();
+        CapacitySchedulerInfo sinfo = new CapacitySchedulerInfo(root, cs);
+        csqinfo.csinfo = sinfo;
+
+        if (null == nodeLabelsInfo || (nodeLabelsInfo.size() == 1
+            && nodeLabelsInfo.get(0).getLabelName().isEmpty())) {
-            CSQueue root = cs.getRootQueue();
-            CapacitySchedulerInfo sinfo =
-                new CapacitySchedulerInfo(root, cs, label);
-            csqinfo.csinfo = sinfo;
-            String nodeLabel = csqinfo.label.length() == 0
+            csqinfo.isExclusiveNodeLabel = label.getIsExclusive();
+            String nodeLabelDisplay = csqinfo.label.length() == 0
-            QueueCapacities queueCapacities = root.getQueueCapacities();
-            used = queueCapacities.getUsedCapacity(label.getLabelName());
+            PartitionQueueCapacitiesInfo capacities = sinfo.getCapacities()
+                .getPartitionQueueCapacitiesInfo(csqinfo.label);
+            used = capacities.getUsedCapacity() / 100;
-                "Partition: " + nodeLabel + " " + label.getResource();
+                "Partition: " + nodeLabelDisplay + " " + label.getResource();
