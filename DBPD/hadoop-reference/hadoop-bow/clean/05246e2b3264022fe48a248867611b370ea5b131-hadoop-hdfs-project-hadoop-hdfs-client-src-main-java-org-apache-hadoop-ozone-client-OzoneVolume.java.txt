HDFS-12060. Ozone: OzoneClient: Add list calls in RpcClient. Contributed by Nandakumar.

+import org.apache.hadoop.conf.Configuration;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+   * The proxy used for connecting to the cluster and perform
+   * client operations.
+   */
+  private final ClientProtocol proxy;
+
+  /**
-  private ClientProtocol proxy;
+  private int listCacheSize;
-   * Constructs OzoneVolume.
+   * Constructs OzoneVolume instance.
+   * @param conf Configuration object.
+   * @param proxy ClientProtocol proxy.
+   * @param name Name of the volume.
+   * @param admin Volume admin.
+   * @param owner Volume owner.
+   * @param quotaInBytes Volume quota in bytes.
+   * @param acls ACLs associated with the volume.
-  public OzoneVolume(String name, String admin, String owner,
-                     long quotaInBytes, List<OzoneAcl> acls) {
+  public OzoneVolume(Configuration conf, ClientProtocol proxy, String name,
+                     String admin, String owner, long quotaInBytes,
+                     List<OzoneAcl> acls) {
+    this.proxy = proxy;
-  }
-
-  public void setClientProxy(ClientProtocol clientProxy) {
-    this.proxy = clientProxy;
+    this.listCacheSize = OzoneClientUtils.getListCacheSize(conf);
-    bucket.setClientProxy(proxy);
+   * Returns Iterator to iterate over all buckets in the volume.
+   * The result can be restricted using bucket prefix, will return all
+   * buckets if bucket prefix is null.
+   *
+   * @param bucketPrefix Bucket prefix to match
+   * @return {@code Iterator<OzoneBucket>}
+   */
+  public Iterator<OzoneBucket> listBuckets(String bucketPrefix) {
+    return new BucketIterator(bucketPrefix);
+  }
+
+  /**
+
+
+  /**
+   * An Iterator to iterate over {@link OzoneBucket} list.
+   */
+  private class BucketIterator implements Iterator<OzoneBucket> {
+
+    private String bucketPrefix = null;
+
+    private Iterator<OzoneBucket> currentIterator;
+    private OzoneBucket currentValue;
+
+
+    /**
+     * Creates an Iterator to iterate over all buckets in the volume,
+     * which matches volume prefix.
+     * @param bucketPrefix
+     */
+    BucketIterator(String bucketPrefix) {
+      this.bucketPrefix = bucketPrefix;
+      this.currentValue = null;
+      this.currentIterator = getNextListOfBuckets(null).iterator();
+    }
+
+    @Override
+    public boolean hasNext() {
+      if(!currentIterator.hasNext()) {
+        currentIterator = getNextListOfBuckets(
+            currentValue.getName()).iterator();
+      }
+      return currentIterator.hasNext();
+    }
+
+    @Override
+    public OzoneBucket next() {
+      if(hasNext()) {
+        currentValue = currentIterator.next();
+        return currentValue;
+      }
+      throw new NoSuchElementException();
+    }
+
+    /**
+     * Gets the next set of bucket list using proxy.
+     * @param prevBucket
+     * @return {@code List<OzoneVolume>}
+     */
+    private List<OzoneBucket> getNextListOfBuckets(String prevBucket) {
+      try {
+        return proxy.listBuckets(name, bucketPrefix, prevBucket, listCacheSize);
+      } catch (IOException e) {
+        throw new RuntimeException(e);
+      }
+    }
+  }
