HDDS-1856. Make required changes for Non-HA to use new HA code in OM. (#1174)


+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;
-import org.apache.hadoop.ozone.audit.AuditLogger;
-import org.apache.hadoop.ozone.om.response.volume.OMVolumeCreateResponse;
-      long transactionLogIndex) {
+      long transactionLogIndex,
+      OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper) {
-    AuditLogger auditLogger = ozoneManager.getAuditLogger();
-    OzoneManagerProtocolProtos.UserInfo userInfo = getOmRequest().getUserInfo();
-
+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();
+    boolean acquiredUserLock = false;
+    boolean acquiredVolumeLock = false;
+    IOException exception = null;
+    String owner = null;
+    OMClientResponse omClientResponse = null;
-    } catch (IOException ex) {
-      LOG.error("Volume deletion failed for volume:{}", volume, ex);
-      omMetrics.incNumVolumeDeleteFails();
-      auditLog(auditLogger, buildAuditMessage(OMAction.DELETE_VOLUME,
-          buildVolumeAuditMap(volume), ex, userInfo));
-      return new OMVolumeCreateResponse(null, null,
-          createErrorOMResponse(omResponse, ex));
-    }
-    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();
+      OmVolumeArgs omVolumeArgs = null;
+      OzoneManagerProtocolProtos.VolumeList newVolumeList = null;
-    OmVolumeArgs omVolumeArgs = null;
-    String owner = null;
-    boolean acquiredUserLock = false;
-    IOException exception = null;
-    OzoneManagerProtocolProtos.VolumeList newVolumeList = null;
-
-    omMetadataManager.getLock().acquireLock(VOLUME_LOCK, volume);
-    try {
+      acquiredVolumeLock = omMetadataManager.getLock().acquireLock(VOLUME_LOCK,
+          volume);
+      omResponse.setDeleteVolumeResponse(
+          DeleteVolumeResponse.newBuilder().build());
+      omClientResponse = new OMVolumeDeleteResponse(volume, owner,
+          newVolumeList, omResponse.build());
+
+      omClientResponse = new OMVolumeDeleteResponse(null, null, null,
+          createErrorOMResponse(omResponse, exception));
+      if (omClientResponse != null) {
+        omClientResponse.setFlushFuture(
+            ozoneManagerDoubleBufferHelper.add(omClientResponse,
+                transactionLogIndex));
+      }
-      omMetadataManager.getLock().releaseLock(VOLUME_LOCK, volume);
+      if (acquiredVolumeLock) {
+        omMetadataManager.getLock().releaseLock(VOLUME_LOCK, volume);
+      }
-    auditLog(auditLogger, buildAuditMessage(OMAction.DELETE_VOLUME,
-        buildVolumeAuditMap(volume), exception, userInfo));
+    auditLog(ozoneManager.getAuditLogger(),
+        buildAuditMessage(OMAction.DELETE_VOLUME, buildVolumeAuditMap(volume),
+            exception, getOmRequest().getUserInfo()));
-      omResponse.setDeleteVolumeResponse(
-          DeleteVolumeResponse.newBuilder().build());
-      return new OMVolumeDeleteResponse(volume, owner, newVolumeList,
-          omResponse.build());
-      return new OMVolumeDeleteResponse(null, null, null,
-          createErrorOMResponse(omResponse, exception));
+    return omClientResponse;
+
