HDDS-576. Move ContainerWithPipeline creation to RPC endpoint.
Contributed by Nanda kumar.

-import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;
+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;
+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;
+import org.apache.hadoop.hdds.scm.pipeline.PipelineNotFoundException;
+  private final PipelineManager pipelineManager;
+   * @param pipelineManager - pipeline manager.
-      final NodeManager nodeManager, final ContainerManager containerManager,
-      EventPublisher eventPublisher)
+      final NodeManager nodeManager, final PipelineManager pipelineManager,
+      final ContainerManager containerManager, EventPublisher eventPublisher)
+    this.pipelineManager = pipelineManager;
-      ReplicationType type, ReplicationFactor factor, String owner)
-      throws IOException {
+      ReplicationType type, ReplicationFactor factor, String owner) {
-      ContainerWithPipeline containerWithPipeline;
+      ContainerInfo containerInfo;
-        containerWithPipeline = containerManager.allocateContainer(
+        containerInfo = containerManager.allocateContainer(
-        if (containerWithPipeline == null) {
+        if (containerInfo == null) {
-    ContainerWithPipeline containerWithPipeline;
+    ContainerInfo containerInfo;
-    containerWithPipeline = containerManager
-        .getMatchingContainerWithPipeline(size, owner, type, factor,
+    containerInfo = containerManager
+        .getMatchingContainer(size, owner, type, factor,
-    if (containerWithPipeline == null) {
+    if (containerInfo == null) {
-          containerWithPipeline = containerManager
-              .getMatchingContainerWithPipeline(size, owner, type, factor,
+          containerInfo = containerManager
+              .getMatchingContainer(size, owner, type, factor,
-        if (containerWithPipeline == null) {
+        if (containerInfo == null) {
-          containerWithPipeline = containerManager
-              .getMatchingContainerWithPipeline(size, owner, type, factor,
+          containerInfo = containerManager
+              .getMatchingContainer(size, owner, type, factor,
-    if (containerWithPipeline != null) {
-      return newBlock(containerWithPipeline, HddsProtos.LifeCycleState.OPEN);
+    if (containerInfo != null) {
+      return newBlock(containerInfo);
-   * @param containerWithPipeline - Container Info.
-   * @param state - Current state of the container.
+   * @param containerInfo - Container Info.
-  private AllocatedBlock newBlock(ContainerWithPipeline containerWithPipeline,
-      HddsProtos.LifeCycleState state) throws IOException {
-    ContainerInfo containerInfo = containerWithPipeline.getContainerInfo();
-    if (containerWithPipeline.getPipeline().getNodes().size() == 0) {
-      LOG.error("Pipeline Machine count is zero.");
+  private AllocatedBlock newBlock(ContainerInfo containerInfo) {
+    try {
+      final Pipeline pipeline = pipelineManager
+          .getPipeline(containerInfo.getPipelineID());
+      // TODO : Revisit this local ID allocation when HA is added.
+      long localID = UniqueId.next();
+      long containerID = containerInfo.getContainerID();
+      AllocatedBlock.Builder abb =  new AllocatedBlock.Builder()
+          .setContainerBlockID(new ContainerBlockID(containerID, localID))
+          .setPipeline(pipeline);
+      LOG.trace("New block allocated : {} Container ID: {}", localID,
+          containerID);
+      return abb.build();
+    } catch (PipelineNotFoundException ex) {
+      LOG.error("Pipeline Machine count is zero.", ex);
-
-    // TODO : Revisit this local ID allocation when HA is added.
-    long localID = UniqueId.next();
-    long containerID = containerInfo.getContainerID();
-
-    AllocatedBlock.Builder abb =
-        new AllocatedBlock.Builder()
-            .setContainerBlockID(new ContainerBlockID(containerID, localID))
-            .setPipeline(containerWithPipeline.getPipeline());
-    LOG.trace("New block allocated : {} Container ID: {}", localID,
-        containerID);
-    return abb.build();
