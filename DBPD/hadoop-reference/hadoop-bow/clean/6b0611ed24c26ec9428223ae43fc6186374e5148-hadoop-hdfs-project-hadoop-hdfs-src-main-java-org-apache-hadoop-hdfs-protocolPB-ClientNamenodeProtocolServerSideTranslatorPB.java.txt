Merging r1539737 through r1539896 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1539898 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.EmptyPathError;
-import org.apache.hadoop.hdfs.protocol.PathBasedCacheDescriptor;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.InvalidIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.NoSuchIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.RemovePermissionDeniedException;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheDescriptorsElementProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheDescriptorsRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheDescriptorsResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheDirectivesElementProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheDirectivesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheDirectivesResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathBasedCacheDirectiveProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ModifyPathBasedCacheDirectiveRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ModifyPathBasedCacheDirectiveResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheDescriptorRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheDescriptorResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheDirectiveRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheDirectiveResponseProto;
-
-      PathBasedCacheDirectiveProto proto = request.getDirective();
-      if (StringUtils.isEmpty(proto.getPath())) {
-        throw new EmptyPathError();
-      }
-      PathBasedCacheDirective directive = new PathBasedCacheDirective.Builder().
-          setPath(new Path(proto.getPath())).
-          setReplication(Shorts.checkedCast(proto.getReplication())).
-          setPool(proto.getPool()).
-          build();
-      PathBasedCacheDescriptor descriptor =
-          server.addPathBasedCacheDirective(directive);
-      AddPathBasedCacheDirectiveResponseProto.Builder builder =
-         AddPathBasedCacheDirectiveResponseProto.newBuilder();
-      builder.setDescriptorId(descriptor.getEntryId());
-      return builder.build();
+      return AddPathBasedCacheDirectiveResponseProto.newBuilder().
+              setId(server.addPathBasedCacheDirective(
+                  PBHelper.convert(request.getInfo()))).build();
-  public RemovePathBasedCacheDescriptorResponseProto removePathBasedCacheDescriptor(
-      RpcController controller,
-      RemovePathBasedCacheDescriptorRequestProto request)
+  public ModifyPathBasedCacheDirectiveResponseProto modifyPathBasedCacheDirective(
+      RpcController controller, ModifyPathBasedCacheDirectiveRequestProto request)
-      server.removePathBasedCacheDescriptor(request.getDescriptorId());
-      RemovePathBasedCacheDescriptorResponseProto.Builder builder =
-         RemovePathBasedCacheDescriptorResponseProto.newBuilder();
-      return builder.build();
+      server.modifyPathBasedCacheDirective(
+          PBHelper.convert(request.getInfo()));
+      return ModifyPathBasedCacheDirectiveResponseProto.newBuilder().build();
-  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(
-      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)
+  public RemovePathBasedCacheDirectiveResponseProto
+      removePathBasedCacheDirective(RpcController controller,
+          RemovePathBasedCacheDirectiveRequestProto request)
+              throws ServiceException {
+    try {
+      server.removePathBasedCacheDirective(request.getId());
+      return RemovePathBasedCacheDirectiveResponseProto.
+          newBuilder().build();
+    } catch (IOException e) {
+      throw new ServiceException(e);
+    }
+  }
+
+  @Override
+  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(
+      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)
-      RemoteIterator<PathBasedCacheDescriptor> iter =
-         server.listPathBasedCacheDescriptors(request.getPrevId(),
-             request.hasPool() ? request.getPool() : null,
-             request.hasPath() ? request.getPath() : null);
-      ListPathBasedCacheDescriptorsResponseProto.Builder builder =
-          ListPathBasedCacheDescriptorsResponseProto.newBuilder();
+      PathBasedCacheDirective filter =
+          PBHelper.convert(request.getFilter());
+      RemoteIterator<PathBasedCacheDirective> iter =
+         server.listPathBasedCacheDirectives(request.getPrevId(), filter);
+      ListPathBasedCacheDirectivesResponseProto.Builder builder =
+          ListPathBasedCacheDirectivesResponseProto.newBuilder();
-        PathBasedCacheDescriptor directive = iter.next();
+        PathBasedCacheDirective directive = iter.next();
-            ListPathBasedCacheDescriptorsElementProto.newBuilder().
-              setId(directive.getEntryId()).
-              setPath(directive.getPath().toUri().getPath()).
-              setReplication(directive.getReplication()).
-              setPool(directive.getPool()));
-        prevId = directive.getEntryId();
+            ListPathBasedCacheDirectivesElementProto.newBuilder().
+                setInfo(PBHelper.convert(directive)));
+        prevId = directive.getId();
-        iter = server.listPathBasedCacheDescriptors(prevId, 
-            request.hasPool() ? request.getPool() : null,
-            request.hasPath() ? request.getPath() : null);
+        iter = server.listPathBasedCacheDirectives(prevId, filter);
