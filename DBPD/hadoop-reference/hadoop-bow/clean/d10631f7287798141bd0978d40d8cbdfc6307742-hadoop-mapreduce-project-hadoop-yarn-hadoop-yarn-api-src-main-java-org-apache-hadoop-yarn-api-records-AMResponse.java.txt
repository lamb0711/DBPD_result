Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.classification.InterfaceAudience.Public;
+import org.apache.hadoop.classification.InterfaceStability.Stable;
+import org.apache.hadoop.classification.InterfaceStability.Unstable;
+import org.apache.hadoop.yarn.api.AMRMProtocol;
+import org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest;
+
+/**
+ * <p>The response sent by the <code>ResourceManager</code> the  
+ * <code>ApplicationMaster</code> during resource negotiation.</p>
+ *
+ * <p>The response includes:
+ *   <ul>
+ *     <li>Response ID to track duplicate responses.</li>
+ *     <li>
+ *       A reboot flag to let the <code>ApplicationMaster</code> that its 
+ *       horribly out of sync and needs to reboot.</li>
+ *     <li>A list of newly allocated {@link Container}.</li>
+ *     <li>A list of completed {@link Container}.</li>
+ *     <li>
+ *       The available headroom for resources in the cluster for the
+ *       application. 
+ *     </li>
+ *   </ul>
+ * </p>
+ * 
+ * @see AMRMProtocol#allocate(AllocateRequest)
+ */
+@Public
+@Unstable
+  /**
+   * Should the <code>ApplicationMaster</code> reboot for being horribly 
+   * out-of-sync with the <code>ResourceManager</code> as deigned by 
+   * {@link #getResponseId()}?
+   * 
+   * @return <code>true</code> if the <code>ApplicationMaster</code> should
+   *         reboot, <code>false</code> otherwise
+   */
+  @Public
+  @Stable
+  
+  @Private
+  @Unstable
+  public void setReboot(boolean reboot);
+
+  /**
+   * Get the <em>last response id</em>.
+   * @return <em>last response id</em>
+   */
+  @Public
+  @Stable
+  @Private
+  @Unstable
+  public void setResponseId(int responseId);
+
+  /**
+   * Get the list of <em>newly allocated</em> <code>Container</code> by the 
+   * <code>ResourceManager</code>.
+   * @return list of <em>newly allocated</em> <code>Container</code>
+   */
+  @Public
+  @Stable
+
+  @Private
+  @Unstable
+
+  @Private
+  @Unstable
-  public void setReboot(boolean reboot);
-  public void setResponseId(int responseId);
-  
+  @Private
+  @Unstable
+
+  @Private
+  @Unstable
+
+  @Private
+  @Unstable
+
+  @Private
+  @Unstable
-  public void setAvailableResources(Resource limit);
+  /**
+   * Get the <em>available headroom</em> for resources in the cluster for the 
+   * application.
+   * @return limit available headroom for resources in the cluster for the 
+   * application
+   */
+  @Public
+  @Stable
+  @Private
+  @Unstable
+  public void setAvailableResources(Resource limit);
+  
+  /**
+   * Get the list of <em>completed containers</em>.
+   * @return the list of <em>completed containers</em>
+   */
+  @Public
+  @Stable
+
+  @Private
+  @Unstable
+
+  @Private
+  @Unstable
+
+  @Private
+  @Unstable
+
+  @Private
+  @Unstable
+
+  @Private
+  @Unstable
+
+  @Private
+  @Unstable
