HDDS-1207. Refactor Container Report Processing logic and plugin new Replication Manager. (#662)



-import com.google.common.base.Preconditions;
-import org.apache.hadoop.hdds.protocol.DatanodeDetails;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.ContainerReplicaProto;
-import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;
-import org.apache.hadoop.hdds.scm.server
-    .SCMDatanodeHeartbeatDispatcher.IncrementalContainerReportFromDatanode;
+import java.io.IOException;
+
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos
+    .ContainerReplicaProto;
+import org.apache.hadoop.hdds.scm.server.SCMDatanodeHeartbeatDispatcher
+    .IncrementalContainerReportFromDatanode;
-import java.io.IOException;
-
-public class IncrementalContainerReportHandler implements
-    EventHandler<IncrementalContainerReportFromDatanode> {
+public class IncrementalContainerReportHandler extends
+    AbstractContainerReportHandler
+    implements EventHandler<IncrementalContainerReportFromDatanode> {
-  private static final Logger LOG =
-      LoggerFactory.getLogger(IncrementalContainerReportHandler.class);
-
-  private final PipelineManager pipelineManager;
-  private final ContainerManager containerManager;
+  private static final Logger LOG = LoggerFactory.getLogger(
+      IncrementalContainerReportHandler.class);
-      final PipelineManager pipelineManager,
-    Preconditions.checkNotNull(pipelineManager);
-    Preconditions.checkNotNull(containerManager);
-    this.pipelineManager = pipelineManager;
-    this.containerManager = containerManager;
+    super(containerManager, LOG);
-  public void onMessage(
-      final IncrementalContainerReportFromDatanode containerReportFromDatanode,
-      final EventPublisher publisher) {
+  public void onMessage(final IncrementalContainerReportFromDatanode report,
+                        final EventPublisher publisher) {
-         containerReportFromDatanode.getReport().getReportList()) {
+        report.getReport().getReportList()) {
-        final DatanodeDetails datanodeDetails = containerReportFromDatanode
-            .getDatanodeDetails();
-        final ContainerID containerID = ContainerID
-            .valueof(replicaProto.getContainerID());
-        ReportHandlerHelper.processContainerReplica(containerManager,
-            containerID, replicaProto, datanodeDetails, publisher, LOG);
+        processContainerReplica(report.getDatanodeDetails(), replicaProto);
