HADOOP-7238. Refactor the cat and text commands to conform to new FsCommand class.  Contributed by Daryn Sharp


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1101199 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.zip.GZIPInputStream;
-import org.apache.hadoop.io.DataInputBuffer;
-import org.apache.hadoop.io.DataOutputBuffer;
-import org.apache.hadoop.io.SequenceFile;
-import org.apache.hadoop.io.Writable;
-import org.apache.hadoop.io.WritableComparable;
-import org.apache.hadoop.io.compress.CompressionCodec;
-import org.apache.hadoop.io.compress.CompressionCodecFactory;
-import org.apache.hadoop.util.ReflectionUtils;
-   * @param argv: arguments
-   * @param pos: Ignore everything before argv[pos]  
-   * @exception: IOException  
+   * @param argv : arguments
+   * @param pos : Ignore everything before argv[pos]  
+   * @throws Exception 
-  void copyToLocal(String[]argv, int pos) throws IOException {
+  void copyToLocal(String[]argv, int pos) throws Exception {
-      cat(srcstr, verifyChecksum);
+      
+      List<String> catArgv = new ArrayList<String>();
+      catArgv.add("-cat");
+      if (cf.getOpt("ignoreCrc")) catArgv.add("-ignoreCrc");
+      catArgv.add(srcstr);      
+      run(catArgv.toArray(new String[0]));
-
-  /**
-   * Fetch all files that match the file pattern <i>srcf</i> and display
-   * their content on stdout. 
-   * @param srcf: a file pattern specifying source files
-   * @exception: IOException
-   * @see org.apache.hadoop.fs.FileSystem.globStatus 
-   */
-  void cat(String src, boolean verifyChecksum) throws IOException {
-    //cat behavior in Linux
-    //  [~/1207]$ ls ?.txt
-    //  x.txt  z.txt
-    //  [~/1207]$ cat x.txt y.txt z.txt
-    //  xxx
-    //  cat: y.txt: No such file or directory
-    //  zzz
-
-    Path srcPattern = new Path(src);
-    new DelayedExceptionThrowing() {
-      @Override
-      void process(Path p, FileSystem srcFs) throws IOException {
-        printToStdout(srcFs.open(p));
-      }
-    }.globAndProcess(srcPattern, getSrcFileSystem(srcPattern, verifyChecksum));
-  }
-
-  private class TextRecordInputStream extends InputStream {
-    SequenceFile.Reader r;
-    WritableComparable<?> key;
-    Writable val;
-
-    DataInputBuffer inbuf;
-    DataOutputBuffer outbuf;
-
-    public TextRecordInputStream(FileStatus f) throws IOException {
-      final Path fpath = f.getPath();
-      final Configuration lconf = getConf();
-      r = new SequenceFile.Reader(lconf, 
-                                  SequenceFile.Reader.file(fpath));
-      key = ReflectionUtils.newInstance(
-          r.getKeyClass().asSubclass(WritableComparable.class), lconf);
-      val = ReflectionUtils.newInstance(
-          r.getValueClass().asSubclass(Writable.class), lconf);
-      inbuf = new DataInputBuffer();
-      outbuf = new DataOutputBuffer();
-    }
-
-    public int read() throws IOException {
-      int ret;
-      if (null == inbuf || -1 == (ret = inbuf.read())) {
-        if (!r.next(key, val)) {
-          return -1;
-        }
-        byte[] tmp = key.toString().getBytes();
-        outbuf.write(tmp, 0, tmp.length);
-        outbuf.write('\t');
-        tmp = val.toString().getBytes();
-        outbuf.write(tmp, 0, tmp.length);
-        outbuf.write('\n');
-        inbuf.reset(outbuf.getData(), outbuf.getLength());
-        outbuf.reset();
-        ret = inbuf.read();
-      }
-      return ret;
-    }
-
-    public void close() throws IOException {
-      r.close();
-      super.close();
-    }
-  }
-
-  private InputStream forMagic(Path p, FileSystem srcFs) throws IOException {
-    FSDataInputStream i = srcFs.open(p);
-
-    // check codecs
-    CompressionCodecFactory cf = new CompressionCodecFactory(getConf());
-    CompressionCodec codec = cf.getCodec(p);
-    if (codec != null) {
-      return codec.createInputStream(i);
-    }
-
-    switch(i.readShort()) {
-      case 0x1f8b: // RFC 1952
-        i.seek(0);
-        return new GZIPInputStream(i);
-      case 0x5345: // 'S' 'E'
-        if (i.readByte() == 'Q') {
-          i.close();
-          return new TextRecordInputStream(srcFs.getFileStatus(p));
-        }
-        break;
-    }
-    i.seek(0);
-    return i;
-  }
-
-  void text(String srcf) throws IOException {
-    Path srcPattern = new Path(srcf);
-    new DelayedExceptionThrowing() {
-      @Override
-      void process(Path p, FileSystem srcFs) throws IOException {
-        if (srcFs.isDirectory(p)) {
-          throw new IOException("Source must be a file.");
-        }
-        printToStdout(forMagic(p, srcFs));
-      }
-    }.globAndProcess(srcPattern, srcPattern.getFileSystem(getConf()));
-  }
-      "[-cat <src>]\n\t" +
-      "[-touchz <path>] [-test -[ezd] <path>] [-stat [format] <path>]\n\t" +
-      "[-text <path>]";
+      "[-touchz <path>] [-test -[ezd] <path>] [-stat [format] <path>]";
-    String cat = "-cat <src>: \tFetch all files that match the file pattern <src> \n" +
-      "\t\tand display their content on stdout.\n";
-
-    
-    String text = "-text <src>: \tTakes a source file and outputs the file in text format.\n" +
-      "\t\tThe allowed formats are zip and TextRecordInputStream.\n";
-         
-    
-    } else if ("cat".equals(cmd)) {
-      System.out.println(cat);
-    } else if ("text".equals(cmd)) {
-      System.out.println(text);
-      System.out.println(cat);
-      System.out.println(text);
-        if ("-cat".equals(cmd)) {
-          cat(argv[i], true);
-        } else if ("-rm".equals(cmd)) {
+        if ("-rm".equals(cmd)) {
-        } else if ("-text".equals(cmd)) {
-          text(argv[i]);
-               "-touchz".equals(cmd) ||
-               "-text".equals(cmd)) {
+               "-touchz".equals(cmd)) {
-    } else if ("-cat".equals(cmd)) {
-      System.err.println("Usage: java FsShell" + 
-                         " [" + cmd + " <src>]");
-      System.err.println("           [-cat <src>]");
-      System.err.println("           [-text <src>]");
-               "-cat".equals(cmd) ||
-               "-touchz".equals(cmd) || "-stat".equals(cmd) ||
-               "-text".equals(cmd)) {
+               "-touchz".equals(cmd) || "-stat".equals(cmd)) {
-      } else if ("-cat".equals(cmd)) {
-        exitCode = doall(cmd, argv, i);
-      } else if ("-text".equals(cmd)) {
-        exitCode = doall(cmd, argv, i);
