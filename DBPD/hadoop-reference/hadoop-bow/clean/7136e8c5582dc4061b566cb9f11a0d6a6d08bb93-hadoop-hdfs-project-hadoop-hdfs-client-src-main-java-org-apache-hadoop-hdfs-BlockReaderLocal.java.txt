HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.

- * <li>The client gets the file descriptors for the metadata file and the data 
+ * <li>The client gets the file descriptors for the metadata file and the data
-  
+
-  
+
-  
+
-   * 
+   *
-   * make it very difficult for the DirectBufferPool to re-use buffers. 
+   * make it very difficult for the DirectBufferPool to re-use buffers.
-    TraceScope scope = tracer.newScope(
-        "BlockReaderLocal#fillBuffer(" + block.getBlockId() + ")");
-    try {
+    try (TraceScope ignored = tracer.newScope(
+        "BlockReaderLocal#fillBuffer(" + block.getBlockId() + ")")) {
-          int checksumsNeeded = (total + bytesPerChecksum - 1) / bytesPerChecksum;
+          int checksumsNeeded = (total + bytesPerChecksum - 1) /
+              bytesPerChecksum;
-                  checksumPos + ", block file position " + startDataPos + " for " +
-                  "block " + block + " of file " + filename);
+                  checksumPos + ", block file position " + startDataPos +
+                  " for block " + block + " of file " + filename);
-    } finally {
-      scope.close();
-    if (verifyChecksum) {
-      if (storageType != null && storageType.isTransient()) {
-        // Checksums are not stored for replicas on transient storage.  We do not
-        // anchor, because we do not intend for client activity to block eviction
-        // from transient storage on the DataNode side.
-        return true;
-      } else {
-        return replica.addNoChecksumAnchor();
-      }
-    } else {
-      return true;
-    }
+    return !verifyChecksum ||
+        // Checksums are not stored for replicas on transient storage.  We do
+        // not anchor, because we do not intend for client activity to block
+        // eviction from transient storage on the DataNode side.
+        (storageType != null && storageType.isTransient()) ||
+        replica.addNoChecksumAnchor();
-   * 
+   *
-   * 
+   *
-      fillBuffer(dataBuf, canSkipChecksum);
+      fillBuffer(dataBuf, true);
-      fillBuffer(dataBuf, canSkipChecksum);
+      fillBuffer(dataBuf, false);
-   * @param buf              The buffer to read into. 
+   * @param buf              The buffer to read into.
-  public int available() throws IOException {
+  public int available() {
-   * 
-   * There are two kinds of ClientMmap objects we could fetch here: one that 
+   *
+   * There are two kinds of ClientMmap objects we could fetch here: one that
-   * 
+   *
-        (opts.contains(ReadOption.SKIP_CHECKSUMS) == false);
+        !opts.contains(ReadOption.SKIP_CHECKSUMS);
-  
+
-  
+
