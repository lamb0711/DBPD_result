HDDS-733. Create container if not exist, as part of chunk write.
Contributed by Lokesh Jain.

-import org.apache.hadoop.hdds.scm.ScmConfigKeys;
-import org.apache.hadoop.ozone.lease.Lease;
-import org.apache.hadoop.ozone.lease.LeaseException;
-import org.apache.hadoop.ozone.lease.LeaseManager;
-import java.util.concurrent.TimeUnit;
-  private final LeaseManager<ContainerInfo> containerLeaseManager;
-    final long containerCreationLeaseTimeout = conf.getTimeDuration(
-        ScmConfigKeys.OZONE_SCM_CONTAINER_CREATION_LEASE_TIMEOUT,
-        ScmConfigKeys.OZONE_SCM_CONTAINER_CREATION_LEASE_TIMEOUT_DEFAULT,
-        TimeUnit.MILLISECONDS);
-    this.containerLeaseManager = new LeaseManager<>("ContainerCreation",
-        containerCreationLeaseTimeout);
-    this.containerLeaseManager.start();
-
-    try {
-      final ContainerInfo info =
-          containerStateManager.getContainer(containerID);
-      switch (event) {
-      case CREATE:
-        // Acquire lease on container
-        Lease<ContainerInfo> containerLease =
-            containerLeaseManager.acquire(info);
-        // Register callback to be executed in case of timeout
-        containerLease.registerCallBack(() -> {
-          updateContainerState(containerID,
-              HddsProtos.LifeCycleEvent.TIMEOUT);
-          return null; });
-        break;
-      case CREATED:
-        // Release the lease on container
-        containerLeaseManager.release(info);
-        break;
-      case FINALIZE:
-        // TODO: we don't need a lease manager here for closing as the
-        // container report will include the container state after HDFS-13008
-        // If a client failed to update the container close state, DN container
-        // report from 3 DNs will be used to close the container eventually.
-        break;
-      case CLOSE:
-        break;
-      case UPDATE:
-        break;
-      case DELETE:
-        break;
-      case TIMEOUT:
-        break;
-      case CLEANUP:
-        break;
-      default:
-        throw new SCMException("Unsupported container LifeCycleEvent.",
-            FAILED_TO_CHANGE_CONTAINER_STATE);
-      }
-      // If the below updateContainerState call fails, we should revert the
-      // changes made in switch case.
-      // Like releasing the lease in case of BEGIN_CREATE.
-      return containerStateManager.updateContainerState(containerID, event);
-    } catch (LeaseException e) {
-      throw new IOException("Lease Exception.", e);
+    switch (event) {
+    case FINALIZE:
+      // TODO: we don't need a lease manager here for closing as the
+      // container report will include the container state after HDFS-13008
+      // If a client failed to update the container close state, DN container
+      // report from 3 DNs will be used to close the container eventually.
+      break;
+    case CLOSE:
+      break;
+    case UPDATE:
+      break;
+    case DELETE:
+      break;
+    case TIMEOUT:
+      break;
+    case CLEANUP:
+      break;
+    default:
+      throw new SCMException("Unsupported container LifeCycleEvent.",
+          FAILED_TO_CHANGE_CONTAINER_STATE);
+    // If the below updateContainerState call fails, we should revert the
+    // changes made in switch case.
+    // Like releasing the lease in case of BEGIN_CREATE.
+    return containerStateManager.updateContainerState(containerID, event);
-    if (containerLeaseManager != null) {
-      containerLeaseManager.shutdown();
-    }
