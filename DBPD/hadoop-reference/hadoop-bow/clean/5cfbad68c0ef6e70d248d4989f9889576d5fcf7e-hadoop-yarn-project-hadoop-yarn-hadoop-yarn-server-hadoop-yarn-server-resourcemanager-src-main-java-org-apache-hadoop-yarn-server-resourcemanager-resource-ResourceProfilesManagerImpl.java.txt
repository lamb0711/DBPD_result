YARN-7237. Cleanup usages of ResourceProfiles. (Wangda Tan)

Change-Id: I959c8531bd48231956068cb7d2312f3235549f9c
(cherry picked from commit 8536db5a7549fa44d9f9e444b41bd5978b5c6ae1)

-import org.apache.hadoop.yarn.api.records.ResourceTypeInfo;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-  private List<ResourceTypeInfo> resourceTypeInfo =
-      new ArrayList<ResourceTypeInfo>();
-
-    // Load resource types, this should be done even if resource profile is
-    // disabled, since we have mandatory resource types like vcores/memory.
-    loadResourceTypes();
-  }
-
-  private void loadResourceTypes() {
-    // Add all resource types
-    try {
-      writeLock.lock();
-      Collection<ResourceInformation> resourcesInfo = ResourceUtils
-          .getResourceTypes().values();
-      for (ResourceInformation resourceInfo : resourcesInfo) {
-        resourceTypeInfo
-            .add(ResourceTypeInfo.newInstance(resourceInfo.getName(),
-                resourceInfo.getUnits(), resourceInfo.getResourceType()));
-      }
-    } finally {
-      writeLock.unlock();
-    }
+
+      if (profileName.equals(MINIMUM_PROFILE) || profileName.equals(
+          MAXIMUM_PROFILE)) {
+        throw new IOException(String.format(
+            "profile={%s, %s} is should not be specified "
+                + "inside %s, they will be loaded from resource-types.xml",
+            MINIMUM_PROFILE, MAXIMUM_PROFILE, sourceFile));
+      }
+
+    // add minimum/maximum profile
+    profiles.put(MINIMUM_PROFILE,
+        ResourceUtils.getResourceTypesMinimumAllocation());
+    profiles.put(MAXIMUM_PROFILE,
+        ResourceUtils.getResourceTypesMaximumAllocation());
+
