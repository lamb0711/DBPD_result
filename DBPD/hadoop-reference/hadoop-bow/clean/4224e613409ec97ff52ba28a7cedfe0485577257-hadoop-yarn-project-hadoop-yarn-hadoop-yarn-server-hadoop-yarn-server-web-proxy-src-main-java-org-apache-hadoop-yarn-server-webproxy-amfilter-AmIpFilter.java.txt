YARN-1811. Fixed AMFilters in YARN to correctly accept requests from either web-app proxy or the RMs when HA is enabled. Contributed by Robert Kanter.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579877 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.hadoop.classification.InterfaceAudience.Public;
+import org.apache.hadoop.yarn.conf.HAUtil;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.util.RMHAUtils;
+@Public
-  
+
+  @Deprecated
+  @Deprecated
+  static final String PROXY_HOSTS = "PROXY_HOSTS";
+  static final String PROXY_HOSTS_DELIMITER = ",";
+  static final String PROXY_URI_BASES = "PROXY_URI_BASES";
+  static final String PROXY_URI_BASES_DELIMITER = ",";
-  
-  private String proxyHost;
+
+  private String[] proxyHosts;
-  private String proxyUriBase;
-  
+  private Map<String, String> proxyUriBases;
+
-    proxyHost = conf.getInitParameter(PROXY_HOST);
-    proxyUriBase = conf.getInitParameter(PROXY_URI_BASE);
+    // Maintain for backwards compatibility
+    if (conf.getInitParameter(PROXY_HOST) != null
+        && conf.getInitParameter(PROXY_URI_BASE) != null) {
+      proxyHosts = new String[]{conf.getInitParameter(PROXY_HOST)};
+      proxyUriBases = new HashMap<String, String>(1);
+      proxyUriBases.put("dummy", conf.getInitParameter(PROXY_URI_BASE));
+    } else {
+      proxyHosts = conf.getInitParameter(PROXY_HOSTS)
+          .split(PROXY_HOSTS_DELIMITER);
+
+      String[] proxyUriBasesArr = conf.getInitParameter(PROXY_URI_BASES)
+          .split(PROXY_URI_BASES_DELIMITER);
+      proxyUriBases = new HashMap<String, String>();
+      for (String proxyUriBase : proxyUriBasesArr) {
+        try {
+          URL url = new URL(proxyUriBase);
+          proxyUriBases.put(url.getHost() + ":" + url.getPort(), proxyUriBase);
+        } catch(MalformedURLException e) {
+          LOG.warn(proxyUriBase + " does not appear to be a valid URL", e);
+        }
+      }
+    }
-  
+
-        try {
-          proxyAddresses = new HashSet<String>();
-          for(InetAddress add : InetAddress.getAllByName(proxyHost)) {
-            if (LOG.isDebugEnabled()) {
-              LOG.debug("proxy address is: " + add.getHostAddress());
+        proxyAddresses = new HashSet<String>();
+        for (String proxyHost : proxyHosts) {
+          try {
+              for(InetAddress add : InetAddress.getAllByName(proxyHost)) {
+                if (LOG.isDebugEnabled()) {
+                  LOG.debug("proxy address is: " + add.getHostAddress());
+                }
+                proxyAddresses.add(add.getHostAddress());
+              }
+              lastUpdate = now;
+            } catch (UnknownHostException e) {
+              LOG.warn("Could not locate " + proxyHost + " - skipping", e);
-            proxyAddresses.add(add.getHostAddress());
-          lastUpdate = now;
-        } catch (UnknownHostException e) {
-          throw new ServletException("Could not locate "+proxyHost, e);
+        if (proxyAddresses.isEmpty()) {
+          throw new ServletException("Could not locate any of the proxy hosts");
-    
+
-      String redirectUrl = httpResp.encodeRedirectURL(proxyUriBase + 
+      String redirectUrl = findRedirectUrl();
+      redirectUrl = httpResp.encodeRedirectURL(redirectUrl +
-    
+
-    
+
-      ServletRequest requestWrapper = new AmIpServletRequestWrapper(httpReq, 
+      ServletRequest requestWrapper = new AmIpServletRequestWrapper(httpReq,
+
+  protected String findRedirectUrl() throws ServletException {
+    String addr;
+    if (proxyUriBases.size() == 1) {  // external proxy or not RM HA
+      addr = proxyUriBases.values().iterator().next();
+    } else {                          // RM HA
+      YarnConfiguration conf = new YarnConfiguration();
+      String activeRMId = RMHAUtils.findActiveRMHAId(conf);
+      String addressPropertyPrefix = YarnConfiguration.useHttps(conf)
+          ? YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS
+          : YarnConfiguration.RM_WEBAPP_ADDRESS;
+      String host = conf.get(
+          HAUtil.addSuffix(addressPropertyPrefix, activeRMId));
+      addr = proxyUriBases.get(host);
+    }
+    if (addr == null) {
+      throw new ServletException(
+          "Could not determine the proxy server for redirection");
+    }
+    return addr;
+  }
