YARN-8449. RM HA for AM web server HTTPS Support. (Contributed by Robert Kanter)

+import java.security.PrivateKey;
+import java.security.cert.X509Certificate;
+  private Path proxyCARoot;
+    proxyCARoot = new Path(rootDirPath, PROXY_CA_ROOT);
+    mkdirsWithRetries(proxyCARoot);
+    // recover ProxyCAManager state
+    loadProxyCAManagerState(rmState);
+  private void loadProxyCAManagerState(RMState rmState) throws Exception {
+    checkAndResumeUpdateOperation(proxyCARoot);
+
+    Path caCertPath = getNodePath(proxyCARoot, PROXY_CA_CERT_NODE);
+    Path caPrivateKeyPath = getNodePath(proxyCARoot, PROXY_CA_PRIVATE_KEY_NODE);
+
+    if (!existsWithRetries(caCertPath)
+        || !existsWithRetries(caPrivateKeyPath)) {
+      LOG.warn("Couldn't find Proxy CA data");
+      return;
+    }
+
+    FileStatus caCertFileStatus = getFileStatus(caCertPath);
+    byte[] caCertData = readFileWithRetries(caCertPath,
+        caCertFileStatus.getLen());
+
+    FileStatus caPrivateKeyFileStatus = getFileStatus(caPrivateKeyPath);
+    byte[] caPrivateKeyData = readFileWithRetries(caPrivateKeyPath,
+        caPrivateKeyFileStatus.getLen());
+
+    rmState.getProxyCAState().setCaCert(caCertData);
+    rmState.getProxyCAState().setCaPrivateKey(caPrivateKeyData);
+  }
+
+  @Override
+  synchronized protected void storeProxyCACertState(
+      X509Certificate caCert, PrivateKey caPrivateKey) throws Exception {
+    byte[] caCertData = caCert.getEncoded();
+    byte[] caPrivateKeyData = caPrivateKey.getEncoded();
+
+    Path caCertPath = getNodePath(proxyCARoot, PROXY_CA_CERT_NODE);
+    Path caPrivateKeyPath = getNodePath(proxyCARoot, PROXY_CA_PRIVATE_KEY_NODE);
+
+    if (existsWithRetries(caCertPath)) {
+      updateFile(caCertPath, caCertData, true);
+    } else {
+      writeFileWithRetries(caCertPath, caCertData, true);
+    }
+
+    if (existsWithRetries(caPrivateKeyPath)) {
+      updateFile(caPrivateKeyPath, caPrivateKeyData, true);
+    } else {
+      writeFileWithRetries(caPrivateKeyPath, caPrivateKeyData, true);
+    }
+  }
+
