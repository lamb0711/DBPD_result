HDFS-12069. Ozone: Create a general abstraction for metadata store. Contributed by Weiwei Yang.

-import org.apache.hadoop.utils.LevelDBStore;
-import org.iq80.leveldb.DBIterator;
-import org.iq80.leveldb.Options;
+import org.apache.hadoop.utils.MetadataStore;
+import org.apache.hadoop.utils.MetadataStoreBuilder;
-  private LevelDBStore nodePoolStore;
+  private MetadataStore nodePoolStore;
-    Options options = new Options();
-    options.cacheSize(cacheSize * OzoneConsts.MB);
-
-    nodePoolStore = new LevelDBStore(nodePoolDBPath, options);
+    nodePoolStore = MetadataStoreBuilder.newBuilder()
+        .setConf(conf)
+        .setDbFile(nodePoolDBPath)
+        .setCacheSize(cacheSize * OzoneConsts.MB)
+        .build();
-    try (DBIterator iter = nodePoolStore.getIterator()) {
-      for (iter.seekToFirst(); iter.hasNext(); iter.next()) {
+    try {
+      nodePoolStore.iterate(null, (key, value) -> {
-          byte[] key = iter.peekNext().getKey();
-
-          byte[] value = iter.peekNext().getValue();
-            LOG.debug("Adding node: {} to node pool: {}", nodeId, poolName);
+            LOG.debug("Adding node: {} to node pool: {}",
+                nodeId, poolName);
-        } catch (Exception ex) {
+        } catch (IOException e) {
-      }
+        return true;
+      });
-  public void addNode(final String pool, final DatanodeID node) {
+  public void addNode(final String pool, final DatanodeID node)
+      throws IOException {
+    } catch (IOException e) {
+      throw new SCMException("Failed to remove node " + node.toString()
+          + " from node pool " + pool, e,
+          SCMException.ResultCodes.IO_EXCEPTION);
-  public String getNodePool(final DatanodeID datanodeID) {
+  public String getNodePool(final DatanodeID datanodeID) throws SCMException {
-    byte[] result = nodePoolStore.get(
-        datanodeID.getProtoBufMessage().toByteArray());
-    if (result == null) {
-      return null;
+    try {
+      byte[]  result = nodePoolStore.get(
+          datanodeID.getProtoBufMessage().toByteArray());
+      return result == null ? null : DFSUtil.bytes2String(result);
+    } catch (IOException e) {
+      throw new SCMException("Failed to get node pool for node "
+          + datanodeID.toString(), e,
+          SCMException.ResultCodes.IO_EXCEPTION);
-    return DFSUtil.bytes2String(result);
