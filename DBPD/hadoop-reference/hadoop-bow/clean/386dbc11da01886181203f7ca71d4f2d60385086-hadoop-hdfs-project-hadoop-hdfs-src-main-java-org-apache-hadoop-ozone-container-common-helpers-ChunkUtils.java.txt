HDFS-11196. Ozone: Improve logging and error handling in the container layer. Contributed by Anu Engineer.

+import org.apache.hadoop.scm.container.common.helpers.StorageContainerException;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
+    .Result.CHECKSUM_MISMATCH;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
+    .Result.CONTAINER_INTERNAL_ERROR;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
+    .Result.CONTAINER_NOT_FOUND;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
+    .Result.INVALID_WRITE_SIZE;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
+    .Result.IO_EXCEPTION;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
+    .Result.OVERWRITE_FLAG_REQUIRED;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
+    .Result.UNABLE_TO_FIND_CHUNK;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
+    .Result.UNABLE_TO_FIND_DATA_DIR;
+
-   * @param data     - container data.
-   * @param info     - chunk info.
+   * @param data - container data.
+   * @param info - chunk info.
-   * @throws IOException
+   * @throws StorageContainerException
-                                   ChunkInfo info) throws IOException {
+      ChunkInfo info) throws StorageContainerException {
-        throw new IOException("Rejecting write chunk request. OverWrite " +
-            "flag required." + info.toString());
+        throw new StorageContainerException("Rejecting write chunk request. " +
+            "OverWrite flag required." + info.toString(),
+            OVERWRITE_FLAG_REQUIRED);
-   * @param data     - Container Data
-   * @param info     - Chunk info
+   * @param data - Container Data
+   * @param info - Chunk info
-   * @throws IOException
+   * @throws StorageContainerException
-                                  ChunkInfo info) throws IOException {
+      ChunkInfo info) throws StorageContainerException {
-      throw new IOException("Unable to find the container Name: " +
-          pipeline.getContainerName());
+      throw new StorageContainerException("Unable to find the container Name:" +
+          " " +
+          pipeline.getContainerName(), CONTAINER_NOT_FOUND);
-      throw new IOException("Unable to find the data directory: " + dataDir);
+      throw new StorageContainerException("Unable to find the data directory:" +
+          " " + dataDir, UNABLE_TO_FIND_DATA_DIR);
-   * @throws IOException
+   * @param data - The data buffer.
+   * @throws StorageContainerException
-                               byte[] data)
-      throws IOException, ExecutionException, InterruptedException,
+      byte[] data) throws
+      StorageContainerException, ExecutionException, InterruptedException,
-      throw new IOException(err);
+      throw new StorageContainerException(err, INVALID_WRITE_SIZE);
-      if(size != data.length) {
-        log.error("Invalid write size found. Size:{}  Expected: {} " , size,
+      if (size != data.length) {
+        log.error("Invalid write size found. Size:{}  Expected: {} ", size,
-        throw new IOException("Invalid write size found. Size: " + size
-            + " Expected: " + data.length);
+        throw new StorageContainerException("Invalid write size found. " +
+            "Size: " + size + " Expected: " + data.length, INVALID_WRITE_SIZE);
+    } catch (IOException e) {
+      throw new StorageContainerException(e, IO_EXCEPTION);
+
-        lock.release();
+        try {
+          lock.release();
+        } catch (IOException e) {
+          log.error("Unable to release lock ??, Fatal Error.");
+          throw new StorageContainerException(e, CONTAINER_INTERNAL_ERROR);
+
+        }
-   * @param data      - data buffer
-   * @param log       - log
+   * @param data - data buffer
+   * @param log - log
-   * @throws IOException
+   * @throws StorageContainerException
-      log) throws NoSuchAlgorithmException, IOException {
+      log) throws NoSuchAlgorithmException, StorageContainerException {
-      throw new IOException("Checksum mismatch. Provided: " +
+      throw new StorageContainerException("Checksum mismatch. Provided: " +
-          DigestUtils.sha256Hex(sha.digest()));
+          DigestUtils.sha256Hex(sha.digest()), CHECKSUM_MISMATCH);
-   * @param data      - chunk definition.
+   * @param data - chunk definition.
+   *
-   * @throws IOException
+   *
+   * @throws StorageContainerException
-      IOException, ExecutionException, InterruptedException,
+      StorageContainerException, ExecutionException, InterruptedException,
-      throw new IOException("Unable to find the chunk file. chunk info " +
-          data.toString());
+      throw new StorageContainerException("Unable to find the chunk file. " +
+          "chunk info " +
+          data.toString(), UNABLE_TO_FIND_CHUNK);
+    } catch (IOException e) {
+      throw new StorageContainerException(e, IO_EXCEPTION);
-        lock.release();
+        try {
+          lock.release();
+        } catch (IOException e) {
+          log.error("I/O error is lock release.");
+        }
+   *
-   * @param data  - Data
-   * @param info  - Info
-   * @return    Response.
+   * @param data - Data
+   * @param info - Info
+   * @return Response.
-                           byte[] data, ChunkInfo info) {
+      byte[] data, ChunkInfo info) {
