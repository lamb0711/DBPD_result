HDDS-917. Expose NodeManagerMXBean as a MetricsSource. Contributed by Siddharth Wagle.

+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeState.DEAD;
+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeState.DECOMMISSIONED;
+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeState.DECOMMISSIONING;
+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeState.HEALTHY;
+import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeState.STALE;
+
+import java.util.Map;
+
+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsInfo;
+import org.apache.hadoop.metrics2.MetricsSource;
+import org.apache.hadoop.metrics2.lib.Interns;
+import org.apache.hadoop.metrics2.lib.MetricsRegistry;
-public final class SCMNodeMetrics {
+public final class SCMNodeMetrics implements MetricsSource {
+  private final MetricsRegistry registry;
+  private final NodeManagerMXBean managerMXBean;
+  private final MetricsInfo recordInfo = Interns.info("SCMNodeManager",
+      "SCM NodeManager metrics");
+
-  private SCMNodeMetrics() { }
+  private SCMNodeMetrics(NodeManagerMXBean managerMXBean) {
+    this.managerMXBean = managerMXBean;
+    this.registry = new MetricsRegistry(recordInfo);
+  }
-  public static SCMNodeMetrics create() {
+  public static SCMNodeMetrics create(NodeManagerMXBean managerMXBean) {
-        new SCMNodeMetrics());
+        new SCMNodeMetrics(managerMXBean));
+  /**
+   * Get aggregated counter and gauage metrics.
+   */
+  @Override
+  @SuppressWarnings("SuspiciousMethodCalls")
+  public void getMetrics(MetricsCollector collector, boolean all) {
+    Map<String, Integer> nodeCount = managerMXBean.getNodeCount();
+    Map<String, Long> nodeInfo = managerMXBean.getNodeInfo();
+
+    registry.snapshot(
+        collector.addRecord(registry.info()) // Add annotated ones first
+            .addGauge(Interns.info(
+                "HealthyNodes",
+                "Number of healthy datanodes"),
+                nodeCount.get(HEALTHY.toString()))
+            .addGauge(Interns.info("StaleNodes",
+                "Number of stale datanodes"),
+                nodeCount.get(STALE.toString()))
+            .addGauge(Interns.info("DeadNodes",
+                "Number of dead datanodes"),
+                nodeCount.get(DEAD.toString()))
+            .addGauge(Interns.info("DecommissioningNodes",
+                "Number of decommissioning datanodes"),
+                nodeCount.get(DECOMMISSIONING.toString()))
+            .addGauge(Interns.info("DecommissionedNodes",
+                "Number of decommissioned datanodes"),
+                nodeCount.get(DECOMMISSIONED.toString()))
+            .addGauge(Interns.info("DiskCapacity",
+                "Total disk capacity"),
+                nodeInfo.get("DISKCapacity"))
+            .addGauge(Interns.info("DiskUsed",
+                "Total disk capacity used"),
+                nodeInfo.get("DISKUsed"))
+            .addGauge(Interns.info("DiskRemaining",
+                "Total disk capacity remaining"),
+                nodeInfo.get("DISKRemaining"))
+            .addGauge(Interns.info("SSDCapacity",
+                "Total ssd capacity"),
+                nodeInfo.get("SSDCapacity"))
+            .addGauge(Interns.info("SSDUsed",
+                "Total ssd capacity used"),
+                nodeInfo.get("SSDUsed"))
+            .addGauge(Interns.info("SSDRemaining",
+                "Total disk capacity remaining"),
+                nodeInfo.get("SSDRemaining")),
+        all);
+  }
