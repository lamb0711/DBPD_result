HDFS-5033. Bad error message for fs -put/copyFromLocal if user doesn't have permissions to read the source (Darrell Taylor via aw)

-   * 
+   *
-  
+
-  
+
-      // try to chmod +rwx the parent folder of the 'dir': 
+      // try to chmod +rwx the parent folder of the 'dir':
-  
+
-  
+
-   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this 
+   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this
-      // we must grant the dir rwx permissions: 
+      // we must grant the dir rwx permissions:
-   * 
+   *
-   * @param dir directory to recursively delete 
+   * @param dir directory to recursively delete
-  public static void fullyDelete(FileSystem fs, Path dir) 
+  public static void fullyDelete(FileSystem fs, Path dir)
-  private static void checkDependencies(FileSystem srcFS, 
-                                        Path src, 
-                                        FileSystem dstFS, 
+  private static void checkDependencies(FileSystem srcFS,
+                                        Path src,
+                                        FileSystem dstFS,
-  public static boolean copy(FileSystem srcFS, Path src, 
-                             FileSystem dstFS, Path dst, 
+  public static boolean copy(FileSystem srcFS, Path src,
+                             FileSystem dstFS, Path dst,
-  public static boolean copy(FileSystem srcFS, Path[] srcs, 
+  public static boolean copy(FileSystem srcFS, Path[] srcs,
-                             boolean deleteSource, 
+                             boolean deleteSource,
-      if (!sdst.isDirectory()) 
+      if (!sdst.isDirectory())
-  public static boolean copy(FileSystem srcFS, Path src, 
-                             FileSystem dstFS, Path dst, 
+  public static boolean copy(FileSystem srcFS, Path src,
+                             FileSystem dstFS, Path dst,
-  
+
-  public static boolean copyMerge(FileSystem srcFS, Path srcDir, 
-                                  FileSystem dstFS, Path dstFile, 
+  public static boolean copyMerge(FileSystem srcFS, Path srcDir,
+                                  FileSystem dstFS, Path dstFile,
-   
+
-    
+
-                
+
-          } 
+          }
-    
+
-  }  
-  
+  }
+
+    } else if (!src.canRead()) {
+      throw new IOException(src.toString() +
+                            ": Permission denied");
+
-      throw new IOException(src.toString() + 
+      throw new IOException(src.toString() +
-  public static boolean copy(FileSystem srcFS, Path src, 
+  public static boolean copy(FileSystem srcFS, Path src,
-  
+
-   * @param makeCanonicalPath 
+   * @param makeCanonicalPath
-  public static String makeShellPath(File file, boolean makeCanonicalPath) 
+  public static String makeShellPath(File file, boolean makeCanonicalPath)
-   * 
+   *
-    
+
-            if (!file.getParentFile().mkdirs()) {           
+            if (!file.getParentFile().mkdirs()) {
-                throw new IOException("Mkdirs failed to create " + 
+                throw new IOException("Mkdirs failed to create " +
-   * 
+   *
-   *  
-   * @param inFile The tar file as input. 
+   *
+   * @param inFile The tar file as input.
-      // Tar is not native to Windows. Use simple Java based implementation for 
+      // Tar is not native to Windows. Use simple Java based implementation for
-      // spawn tar utility to untar archive for full fledged unix behavior such 
+      // spawn tar utility to untar archive for full fledged unix behavior such
-  
+
-    } 
+    }
-    untarCommand.append(FileUtil.makeShellPath(untarDir)); 
+    untarCommand.append(FileUtil.makeShellPath(untarDir));
-      throw new IOException("Error untarring file " + inFile + 
+      throw new IOException("Error untarring file " + inFile +
-  
+
-  
+
-  
+
-  public static class HardLink extends org.apache.hadoop.fs.HardLink { 
+  public static class HardLink extends org.apache.hadoop.fs.HardLink {
-   * @param target the target for symlink 
+   * @param target the target for symlink
-        LOG.debug("Error while changing permission : " + filename 
+        LOG.debug("Error while changing permission : " + filename
-    
+
-    
+
-  private static void checkReturnValue(boolean rv, File p, 
+  private static void checkReturnValue(boolean rv, File p,
-      throw new IOException("Failed to set permissions of path: " + p + 
-                            " to " + 
+      throw new IOException("Failed to set permissions of path: " + p +
+                            " to " +
-  
-  private static void execSetPermission(File f, 
+
+  private static void execSetPermission(File f,
-  
+
-  
+
-   * A wrapper for {@link File#listFiles()}. This java.io API returns null 
+   * A wrapper for {@link File#listFiles()}. This java.io API returns null
-   * to get around this problem. For the majority of cases where we prefer 
+   * to get around this problem. For the majority of cases where we prefer
-  }  
-  
+  }
+
-   * A wrapper for {@link File#list()}. This java.io API returns null 
+   * A wrapper for {@link File#list()}. This java.io API returns null
-   * to get around this problem. For the majority of cases where we prefer 
+   * to get around this problem. For the majority of cases where we prefer
-  }  
-  
+  }
+
-  
+
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
