YARN-3273. Improve scheduler UI to facilitate scheduling analysis and debugging. Contributed Rohith Sharmaks

+import java.util.EnumSet;
+
+import org.apache.hadoop.yarn.proto.YarnServiceProtos.SchedulerResourceTypes;
+import org.apache.hadoop.yarn.server.resourcemanager.ResourceManager;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.fifo.FifoScheduler;
+
+  protected String schedulerName;
+  protected ResourceInfo minAllocResource;
+  protected ResourceInfo maxAllocResource;
+  protected EnumSet<SchedulerResourceTypes> schedulingResourceTypes;
+  public SchedulerInfo(final ResourceManager rm) {
+    ResourceScheduler rs = rm.getResourceScheduler();
+
+    if (rs instanceof CapacityScheduler) {
+      this.schedulerName = "Capacity Scheduler";
+    } else if (rs instanceof FairScheduler) {
+      this.schedulerName = "Fair Scheduler";
+    } else if (rs instanceof FifoScheduler) {
+      this.schedulerName = "Fifo Scheduler";
+    }
+    this.minAllocResource = new ResourceInfo(rs.getMinimumResourceCapability());
+    this.maxAllocResource = new ResourceInfo(rs.getMaximumResourceCapability());
+    this.schedulingResourceTypes = rs.getSchedulingResourceTypes();
+  }
+
+  public String getSchedulerType() {
+    return this.schedulerName;
+  }
+
+  public ResourceInfo getMinAllocation() {
+    return this.minAllocResource;
+  }
+
+  public ResourceInfo getMaxAllocation() {
+    return this.maxAllocResource;
+  }
+
+  public String getSchedulerResourceTypes() {
+    return this.schedulingResourceTypes.toString();
+  }
+
