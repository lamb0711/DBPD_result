HADOOP-9716. Rpc retries should use the same call ID as the original call.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504362 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.base.Preconditions;
+  /** A counter for generating call IDs. */
+  private static final AtomicInteger callIdCounter = new AtomicInteger();
+
+  private static final ThreadLocal<Integer> callId = new ThreadLocal<Integer>();
+
+  /** Set call id for the next call. */
+  public static void setCallId(int cid) {
+    Preconditions.checkArgument(cid != RpcConstants.INVALID_CALL_ID);
+    Preconditions.checkState(callId.get() == null);
+    callId.set(cid);
+  }
+
-  private final AtomicInteger counter = new AtomicInteger(); // call ID sequence
-  
+
+  Call createCall(RPC.RpcKind rpcKind, Writable rpcRequest) {
+    return new Call(rpcKind, rpcRequest);
+  }
+
-  private class Call {
+  static class Call {
-    protected Call(RPC.RpcKind rpcKind, Writable param) {
+    private Call(RPC.RpcKind rpcKind, Writable param) {
-      this.id = nextCallId();
+
+      final Integer id = callId.get();
+      if (id == null) {
+        this.id = nextCallId();
+      } else {
+        callId.set(null);
+        this.id = id;
+      }
-    Call call = new Call(rpcKind, rpcRequest);
+    final Call call = createCall(rpcKind, rpcRequest);
-   * @return int next valid call ID
+   * @return next call ID
-  private int nextCallId() {
-    return counter.getAndIncrement() & 0x7FFFFFFF;
+  public static int nextCallId() {
+    return callIdCounter.getAndIncrement() & 0x7FFFFFFF;
