YARN-7146. Many RM unit tests failing with FairScheduler (rkanter)

-  // How often fair shares are re-calculated (ms)
-  protected long updateInterval;
-  Thread updateThread;
-
-  private final Object updateThreadMonitor = new Object();
-
-  @VisibleForTesting
-  // timeout to join when we stop this service
-  protected final long THREAD_JOIN_TIMEOUT_MS = 1000;
-
-  // Allows UpdateThread to start processing without waiting till updateInterval
-  void triggerUpdate() {
-    synchronized (updateThreadMonitor) {
-      updateThreadMonitor.notify();
-    }
-  }
-
-  /**
-   * Thread which calls {@link FairScheduler#update()} every
-   * <code>updateInterval</code> milliseconds.
-   */
-  private class UpdateThread extends Thread {
-
-    @Override
-    public void run() {
-      while (!Thread.currentThread().isInterrupted()) {
-        try {
-          synchronized (updateThreadMonitor) {
-            updateThreadMonitor.wait(updateInterval);
-          }
-          long start = getClock().getTime();
-          update();
-          long duration = getClock().getTime() - start;
-          fsOpDurations.addUpdateThreadRunDuration(duration);
-        } catch (InterruptedException ie) {
-          LOG.warn("Update thread interrupted. Exiting.");
-          return;
-        } catch (Exception e) {
-          LOG.error("Exception in fair scheduler UpdateThread", e);
-        }
-      }
-    }
-  }
-
+  @Override
+    // Storing start time for fsOpDurations
+    long start = getClock().getTime();
+    fsOpDurations.addUpdateThreadRunDuration(getClock().getTime() - start);
-      updateThread = new UpdateThread();
-      updateThread.setName("FairSchedulerUpdateThread");
-      updateThread.setUncaughtExceptionHandler(
-          new RMCriticalThreadUncaughtExceptionHandler(rmContext));
-      updateThread.setDaemon(true);
-
-      Preconditions.checkNotNull(updateThread, "updateThread is null");
-      updateThread.start();
-      if (updateThread != null) {
-        updateThread.interrupt();
-        updateThread.join(THREAD_JOIN_TIMEOUT_MS);
-      }
