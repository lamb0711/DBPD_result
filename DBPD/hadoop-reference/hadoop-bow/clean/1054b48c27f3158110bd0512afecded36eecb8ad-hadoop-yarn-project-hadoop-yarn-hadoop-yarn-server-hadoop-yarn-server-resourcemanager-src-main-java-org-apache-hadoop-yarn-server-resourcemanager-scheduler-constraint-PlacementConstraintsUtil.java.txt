YARN-7972. Support inter-app placement constraints for allocation tags by application ID. (Weiwei Yang via asuresh)

+import org.apache.hadoop.yarn.api.records.AllocationTagNamespace;
+import org.apache.hadoop.yarn.api.records.AllocationTagNamespaceType;
+import org.apache.hadoop.yarn.api.records.TargetApplications;
+import org.apache.hadoop.yarn.exceptions.InvalidAllocationTagException;
+   * Try to the namespace of the allocation tags from the given target key.
+   *
+   * @param targetKey
+   * @return allocation tag namespace.
+   * @throws InvalidAllocationTagsQueryException
+   * if fail to parse the target key to a valid namespace.
+   */
+  private static AllocationTagNamespace getAllocationTagNamespace(
+      ApplicationId currentAppId, String targetKey, AllocationTagsManager atm)
+      throws InvalidAllocationTagException{
+    // Parse to a valid namespace.
+    AllocationTagNamespace namespace = AllocationTagNamespace.parse(targetKey);
+
+    // TODO remove such check once we support all forms of namespaces
+    if (!namespace.isIntraApp() && !namespace.isSingleInterApp()) {
+      throw new InvalidAllocationTagException(
+          "Only support " + AllocationTagNamespaceType.SELF.toString()
+              + " and "+ AllocationTagNamespaceType.APP_ID + " now,"
+              + namespace.toString() + " is not supported yet!");
+    }
+
+    // Evaluate the namespace according to the given target
+    // before it can be consumed.
+    TargetApplications ta = new TargetApplications(currentAppId,
+        atm.getAllApplicationIds());
+    namespace.evaluate(ta);
+    return namespace;
+  }
+
+  // We return a single app Id now, because at present,
+  // only self and app-id namespace is supported. But moving on,
+  // this will return a set of application IDs.
+  // TODO support other forms of namespaces
+  private static ApplicationId getNamespaceScope(
+      AllocationTagNamespace namespace)
+      throws InvalidAllocationTagException {
+    if (namespace.getNamespaceScope() == null
+        || namespace.getNamespaceScope().size() != 1) {
+      throw new InvalidAllocationTagException(
+          "Invalid allocation tag namespace " + namespace.toString()
+              + ", expecting it is not null and only 1 application"
+              + " ID in the scope.");
+    }
+    return namespace.getNamespaceScope().iterator().next();
+  }
+
+  /**
+    // Parse the allocation tag's namespace from the given target key,
+    // then evaluate the namespace and get its scope,
+    // which is represented by one or more application IDs.
+    ApplicationId effectiveAppID;
+    try {
+      AllocationTagNamespace namespace = getAllocationTagNamespace(
+          targetApplicationId, te.getTargetKey(), tm);
+      effectiveAppID = getNamespaceScope(namespace);
+    } catch (InvalidAllocationTagException e) {
+      throw new InvalidAllocationTagsQueryException(e);
+    }
+
-            targetApplicationId, te.getTargetValues(), Long::max);
+            effectiveAppID, te.getTargetValues(), Long::max);
-            targetApplicationId, te.getTargetValues(), Long::min);
+            effectiveAppID, te.getTargetValues(), Long::min);
-            targetApplicationId, te.getTargetValues(), Long::max);
+            effectiveAppID, te.getTargetValues(), Long::max);
-            targetApplicationId, te.getTargetValues(), Long::min);
+            effectiveAppID, te.getTargetValues(), Long::min);
