HDFS-13395. Ozone: Plugins support in HDSL Datanode Service. Contributed by Nanda Kumar.

+import com.google.common.annotations.VisibleForTesting;
-import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.conf.Configurable;
-import org.apache.hadoop.hdfs.server.datanode.DataNodeServicePlugin;
+import org.apache.hadoop.util.ServicePlugin;
+import org.apache.hadoop.util.StringUtils;
+import java.util.List;
+import static org.apache.hadoop.ozone.OzoneConfigKeys.HDDS_DATANODE_PLUGINS_KEY;
+import static org.apache.hadoop.util.ExitUtil.terminate;
+
-public class HddsDatanodeService implements DataNodeServicePlugin {
+public class HddsDatanodeService implements ServicePlugin {
-  private final boolean isOzoneEnabled;
-
-  public HddsDatanodeService() {
-    try {
-      OzoneConfiguration.activate();
-      this.conf = new OzoneConfiguration();
-      this.isOzoneEnabled = HddsUtils.isHddsEnabled(conf);
-      if (isOzoneEnabled) {
-        this.datanodeDetails = getDatanodeDetails(conf);
-        String hostname = DataNode.getHostName(conf);
-        String ip = InetAddress.getByName(hostname).getHostAddress();
-        this.datanodeDetails.setHostName(hostname);
-        this.datanodeDetails.setIpAddress(ip);
-      }
-    } catch (IOException e) {
-      throw new RuntimeException("Can't start the HDDS datanode plugin", e);
-    }
-  }
+  private List<ServicePlugin> plugins;
-    if (isOzoneEnabled) {
+    OzoneConfiguration.activate();
+    if (service instanceof Configurable) {
+      conf = new OzoneConfiguration(((Configurable) service).getConf());
+    } else {
+      conf = new OzoneConfiguration();
+    }
+    if (HddsUtils.isHddsEnabled(conf)) {
-        DataNode dataNode = (DataNode) service;
-        datanodeDetails.setInfoPort(dataNode.getInfoPort());
-        datanodeDetails.setInfoSecurePort(dataNode.getInfoSecurePort());
+        String hostname = DataNode.getHostName(conf);
+        String ip = InetAddress.getByName(hostname).getHostAddress();
+        datanodeDetails = initializeDatanodeDetails();
+        datanodeDetails.setHostName(hostname);
+        datanodeDetails.setIpAddress(ip);
+
+        //Below block should be removed as part of HDFS-13324
+        if (service != null) {
+          DataNode dataNode = (DataNode) service;
+          datanodeDetails.setInfoPort(dataNode.getInfoPort());
+          datanodeDetails.setInfoSecurePort(dataNode.getInfoSecurePort());
+        }
+        startPlugins();
+        // Starting HDDS Daemons
-   * Returns ContainerNodeIDProto or null in case of Error.
+   * Returns DatanodeDetails or null in case of Error.
-   * @return ContainerNodeIDProto
+   * @return DatanodeDetails
-  private static DatanodeDetails getDatanodeDetails(Configuration conf)
+  private DatanodeDetails initializeDatanodeDetails()
+  private void startPlugins() {
+    try {
+      plugins = conf.getInstances(HDDS_DATANODE_PLUGINS_KEY,
+          ServicePlugin.class);
+    } catch (RuntimeException e) {
+      String pluginsValue = conf.get(HDDS_DATANODE_PLUGINS_KEY);
+      LOG.error("Unable to load HDDS DataNode plugins. " +
+          "Specified list of plugins: {}",
+          pluginsValue, e);
+      throw e;
+    }
+    for (ServicePlugin plugin : plugins) {
+      try {
+        plugin.start(this);
+        LOG.info("Started plug-in {}", plugin);
+      } catch (Throwable t) {
+        LOG.warn("ServicePlugin {} could not be started", plugin, t);
+      }
+    }
+  }
+  public Configuration getConf() {
+    return conf;
+  }
+  @VisibleForTesting
-  @InterfaceAudience.Private
+  @VisibleForTesting
+  public void join() throws InterruptedException {
+    datanodeStateMachine.join();
+  }
+
+    if (plugins != null) {
+      for (ServicePlugin plugin : plugins) {
+        try {
+          plugin.stop();
+          LOG.info("Stopped plug-in {}", plugin);
+        } catch (Throwable t) {
+          LOG.warn("ServicePlugin {} could not be stopped", plugin, t);
+        }
+      }
+    }
+
+  public static HddsDatanodeService createHddsDatanodeService(String args[]) {
+    StringUtils.startupShutdownMessage(HddsDatanodeService.class, args, LOG);
+    return new HddsDatanodeService();
+  }
+
+  public static void main(String args[]) {
+    try {
+      HddsDatanodeService hddsDatanodeService = createHddsDatanodeService(args);
+      hddsDatanodeService.start(null);
+      hddsDatanodeService.join();
+    } catch (Throwable e) {
+      LOG.error("Exception in while starting HddsDatanodeService.", e);
+      terminate(1, e);
+    }
+  }
