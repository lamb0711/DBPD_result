HADOOP-12041. Implement another Reed-Solomon coder in pure Java. Contributed by Kai Zheng.

Change-Id: I35ff2e498d4f988c9a064f74374f7c7258b7a6b7

+import org.apache.hadoop.io.erasurecode.rawcoder.util.CoderUtil;
-import java.util.Arrays;
-    ByteBuffer validInput = findFirstValidInput(inputs);
+    ByteBuffer validInput = CoderUtil.findFirstValidInput(inputs);
-    byte[] validInput = findFirstValidInput(inputs);
+    byte[] validInput = CoderUtil.findFirstValidInput(inputs);
-
-  /**
-   * Get indexes into inputs array for items marked as null, either erased or
-   * not to read.
-   * @return indexes into inputs array
-   */
-  protected <T> int[] getErasedOrNotToReadIndexes(T[] inputs) {
-    int[] invalidIndexes = new int[inputs.length];
-    int idx = 0;
-    for (int i = 0; i < inputs.length; i++) {
-      if (inputs[i] == null) {
-        invalidIndexes[idx++] = i;
-      }
-    }
-
-    return Arrays.copyOf(invalidIndexes, idx);
-  }
-
-  /**
-   * Find the valid input from all the inputs.
-   * @param inputs input buffers to look for valid input
-   * @return the first valid input
-   */
-  protected static <T> T findFirstValidInput(T[] inputs) {
-    for (T input : inputs) {
-      if (input != null) {
-        return input;
-      }
-    }
-
-    throw new HadoopIllegalArgumentException(
-        "Invalid inputs are found, all being null");
-  }
