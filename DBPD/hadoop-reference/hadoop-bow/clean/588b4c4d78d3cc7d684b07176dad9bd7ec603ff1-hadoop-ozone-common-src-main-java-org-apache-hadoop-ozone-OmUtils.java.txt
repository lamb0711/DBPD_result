HDDS-1085. Create an OM API to serve snapshots to Recon server.
Contributed by Aravindan Vijayan.

+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.nio.file.Path;
+import java.util.zip.GZIPOutputStream;
+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
+import org.apache.commons.compress.utils.IOUtils;
+
+  /**
+   * Given a source directory, create a tar.gz file from it.
+   *
+   * @param sourcePath the path to the directory to be archived.
+   * @return tar.gz file
+   * @throws IOException
+   */
+  public static File createTarFile(Path sourcePath) throws IOException {
+    TarArchiveOutputStream tarOs = null;
+    try {
+      String sourceDir = sourcePath.toString();
+      String fileName = sourceDir.concat(".tar.gz");
+      FileOutputStream fileOutputStream = new FileOutputStream(fileName);
+      GZIPOutputStream gzipOutputStream =
+          new GZIPOutputStream(new BufferedOutputStream(fileOutputStream));
+      tarOs = new TarArchiveOutputStream(gzipOutputStream);
+      File folder = new File(sourceDir);
+      File[] filesInDir = folder.listFiles();
+      for (File file : filesInDir) {
+        addFilesToArchive(file.getName(), file, tarOs);
+      }
+      return new File(fileName);
+    } finally {
+      try {
+        org.apache.hadoop.io.IOUtils.closeStream(tarOs);
+      } catch (Exception e) {
+        LOG.error("Exception encountered when closing " +
+            "TAR file output stream: " + e);
+      }
+    }
+  }
+
+  private static void addFilesToArchive(String source, File file,
+                                        TarArchiveOutputStream
+                                            tarFileOutputStream)
+      throws IOException {
+    tarFileOutputStream.putArchiveEntry(new TarArchiveEntry(file, source));
+    if (file.isFile()) {
+      FileInputStream fileInputStream = new FileInputStream(file);
+      BufferedInputStream bufferedInputStream =
+          new BufferedInputStream(fileInputStream);
+      IOUtils.copy(bufferedInputStream, tarFileOutputStream);
+      tarFileOutputStream.closeArchiveEntry();
+      fileInputStream.close();
+    } else if (file.isDirectory()) {
+      tarFileOutputStream.closeArchiveEntry();
+      for (File cFile : file.listFiles()) {
+        addFilesToArchive(cFile.getAbsolutePath(), cFile, tarFileOutputStream);
+      }
+    }
+  }
+
