svn merge -c -1430507 . for reverting HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430662 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.net.Peer;
+import org.apache.hadoop.net.SocketInputWrapper;
-  private final Peer peer;
+  private final Socket s;
+  private final boolean isLocal; //is a local connection?
-  private final InputStream socketIn;
+  private final SocketInputWrapper socketIn;
-  public static DataXceiver create(Peer peer, DataNode dn,
+  public static DataXceiver create(Socket s, DataNode dn,
-    return new DataXceiver(peer, dn, dataXceiverServer);
+    return new DataXceiver(s, dn, dataXceiverServer);
-  private DataXceiver(Peer peer, DataNode datanode,
+  private DataXceiver(Socket s, 
+      DataNode datanode, 
-    this.peer = peer;
+    this.s = s;
-    this.socketIn = peer.getInputStream();
-    this.socketOut = peer.getOutputStream();
+    this.socketIn = NetUtils.getInputStream(s);
+    this.socketOut = NetUtils.getOutputStream(s, dnConf.socketWriteTimeout);
+    this.isLocal = s.getInetAddress().equals(s.getLocalAddress());
-    remoteAddress = peer.getRemoteAddressString();
-    localAddress = peer.getLocalAddressString();
+    remoteAddress = s.getRemoteSocketAddress().toString();
+    localAddress = s.getLocalSocketAddress().toString();
-
-    dataXceiverServer.addPeer(peer);
+    
+    dataXceiverServer.childSockets.add(s);
+    
-      peer.setWriteTimeout(datanode.getDnConf().socketWriteTimeout);
+      
-              "at " + peer.getRemoteAddressString() + ". Perhaps the client " +
-              "is running an older version of Hadoop which does not support " +
-              "encryption");
+              "at " + s.getInetAddress() + ". Perhaps the client is running an " +
+              "older version of Hadoop which does not support encryption");
-            peer.setReadTimeout(dnConf.socketKeepaliveTimeout);
+            socketIn.setTimeout(dnConf.socketKeepaliveTimeout);
-            peer.setReadTimeout(dnConf.socketTimeout);
+            socketIn.setTimeout(dnConf.socketTimeout);
-              LOG.debug("Cached " + peer + " closing after " + opsProcessed + " ops");
+              LOG.debug("Cached " + s.toString() + " closing after " + opsProcessed + " ops");
-          peer.setReadTimeout(dnConf.socketTimeout);
+          s.setSoTimeout(dnConf.socketTimeout);
-      } while (!peer.isClosed() && dnConf.socketKeepaliveTimeout > 0);
+      } while (!s.isClosed() && dnConf.socketKeepaliveTimeout > 0);
-      dataXceiverServer.closePeer(peer);
+      IOUtils.closeSocket(s);
+      dataXceiverServer.childSockets.remove(s);
-            LOG.warn("Client " + peer.getRemoteAddressString() +
-                " did not send a valid status code after reading. " +
-                "Will close connection.");
+            LOG.warn("Client " + s.getInetAddress() + " did not send a valid status " +
+                     "code after reading. Will close connection.");
-    datanode.metrics.incrReadsFromClient(peer.isLocal());
+    datanode.metrics.incrReadsFromClient(isLocal);
-      LOG.debug("writeBlock receive buf size " + peer.getReceiveBufferSize() +
-                " tcp no delay " + peer.getTcpNoDelay());
+      LOG.debug("writeBlock receive buf size " + s.getReceiveBufferSize() +
+                " tcp no delay " + s.getTcpNoDelay());
-            peer.getRemoteAddressString(),
-            peer.getLocalAddressString(),
+            s.getRemoteSocketAddress().toString(),
+            s.getLocalSocketAddress().toString(),
-    datanode.metrics.incrWritesFromClient(peer.isLocal());
+    datanode.metrics.incrWritesFromClient(isLocal);
-    checkAccess(socketOut, true, blk, blockToken,
+    checkAccess(null, true, blk, blockToken,
-      String msg = "Not able to copy block " + block.getBlockId() + " " +
-          "to " + peer.getRemoteAddressString() + " because threads " +
-          "quota is exceeded.";
+      String msg = "Not able to copy block " + block.getBlockId() + " to " 
+      + s.getRemoteSocketAddress() + " because threads quota is exceeded."; 
-      LOG.info("Copied " + block + " to " + peer.getRemoteAddressString());
+      LOG.info("Copied " + block + " to " + s.getRemoteSocketAddress());
-      String msg = "Not able to receive block " + block.getBlockId() +
-          " from " + peer.getRemoteAddressString() + " because threads " +
-          "quota is exceeded.";
+      String msg = "Not able to receive block " + block.getBlockId() + " from " 
+          + s.getRemoteSocketAddress() + " because threads quota is exceeded."; 
-      LOG.info("Moved " + block + " from " + peer.getRemoteAddressString());
+      LOG.info("Moved " + block + " from " + s.getRemoteSocketAddress());
-        LOG.warn("Error writing reply back to " + peer.getRemoteAddressString());
+        LOG.warn("Error writing reply back to " + s.getRemoteSocketAddress());
-  private void checkAccess(OutputStream out, final boolean reply, 
+  private void checkAccess(DataOutputStream out, final boolean reply, 
+            if (out == null) {
+              out = new DataOutputStream(
+                  NetUtils.getOutputStream(s, dnConf.socketWriteTimeout));
+            }
+            
