YARN-4253. Standardize on using PrivilegedOperationExecutor for all invocations of container-executor in LinuxContainerExecutor. Contributed by Sidharta Seethana.

-import org.apache.hadoop.util.Shell.ExitCodeException;
-import org.apache.hadoop.util.Shell.ShellCommandExecutor;
-  private String containerExecutorExe;
-    containerExecutorExe = getContainerExecutorExecutablePath(conf);
-    
+
-            conf.getClass(YarnConfiguration.NM_LINUX_CONTAINER_RESOURCES_HANDLER,
-              DefaultLCEResourcesHandler.class, LCEResourcesHandler.class), conf);
+        conf.getClass(YarnConfiguration.NM_LINUX_CONTAINER_RESOURCES_HANDLER,
+            DefaultLCEResourcesHandler.class, LCEResourcesHandler.class), conf);
-    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) != null) {
-     containerSchedPriorityIsSet = true;
-     containerSchedPriorityAdjustment = conf
-         .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY,
-             YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);
+    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY)
+        != null) {
+      containerSchedPriorityIsSet = true;
+      containerSchedPriorityAdjustment = conf
+          .getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY,
+              YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);
-            YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_USER_PATTERN));        
+            YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_USER_PATTERN));
-      YarnConfiguration.NM_NONSECURE_MODE_LIMIT_USERS,
-      YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LIMIT_USERS);
+        YarnConfiguration.NM_NONSECURE_MODE_LIMIT_USERS,
+        YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LIMIT_USERS);
-        throw new IllegalArgumentException("Invalid user name '" + user + "'," +
-            " it must match '" + nonsecureLocalUserPattern.pattern() + "'");
-      }
+      throw new IllegalArgumentException("Invalid user name '" + user + "'," +
+          " it must match '" + nonsecureLocalUserPattern.pattern() + "'");
+    }
-       !containerLimitUsers) {
+        !containerLimitUsers) {
-      new File(hadoopBin, "container-executor").getAbsolutePath();
+        new File(hadoopBin, "container-executor").getAbsolutePath();
-      ? defaultPath
-      : conf.get(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH, defaultPath);
+        ? defaultPath
+        : conf.get(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH,
+        defaultPath);
-  @Override 
-  public void init() throws IOException {        
-    // Send command to executor which will just start up, 
+  @Override
+  public void init() throws IOException {
+    Configuration conf = super.getConf();
+
+    // Send command to executor which will just start up,
-    List<String> command = new ArrayList<String>(
-        Arrays.asList(containerExecutorExe,
-            "--checksetup"));
-    String[] commandArray = command.toArray(new String[command.size()]);
-    ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("checkLinuxExecutorSetup: " + Arrays.toString(commandArray));
-    }
-      shExec.execute();
-    } catch (ExitCodeException e) {
-      int exitCode = shExec.getExitCode();
+      PrivilegedOperation checkSetupOp = new PrivilegedOperation(
+          PrivilegedOperation.OperationType.CHECK_SETUP, (String) null);
+      PrivilegedOperationExecutor privilegedOperationExecutor =
+          PrivilegedOperationExecutor.getInstance(conf);
+
+      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,
+          false);
+    } catch (PrivilegedOperationException e) {
+      int exitCode = e.getExitCode();
-      logOutput(shExec.getOutput());
+
-    Configuration conf = super.getConf();
-
-      throw new IOException("Failed to bootstrap configured resource subsystems!");
+      throw new IOException(
+          "Failed to bootstrap configured resource subsystems!");
-     throw new IOException("Failed to initialize linux container runtime(s)!");
+      throw new IOException("Failed to initialize linux container runtime(s)!");
-    
+
-    List<String> command = new ArrayList<String>();
-    addSchedPriorityCommand(command);
-    command.addAll(Arrays.asList(containerExecutorExe,
-                   runAsUser,
-                   user, 
-                   Integer.toString(PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER.getValue()),
-                   appId,
-                   nmPrivateContainerTokensPath.toUri().getPath().toString(),
-                   StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,
-                       localDirs),
-                   StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,
-                       logDirs)));
+    PrivilegedOperation initializeContainerOp = new PrivilegedOperation(
+        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER, (String) null);
+    List<String> prefixCommands = new ArrayList<>();
+
+    addSchedPriorityCommand(prefixCommands);
+    initializeContainerOp.appendArgs(
+        runAsUser,
+        user,
+        Integer.toString(
+            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER
+                .getValue()),
+        appId,
+        nmPrivateContainerTokensPath.toUri().getPath().toString(),
+        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,
+            localDirs),
+        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,
+            logDirs));
-      new File(new File(System.getProperty("java.home"), "bin"), "java");
-    command.add(jvm.toString());
-    command.add("-classpath");
-    command.add(System.getProperty("java.class.path"));
+        new File(new File(System.getProperty("java.home"), "bin"), "java");
+    initializeContainerOp.appendArgs(jvm.toString());
+    initializeContainerOp.appendArgs("-classpath");
+    initializeContainerOp.appendArgs(System.getProperty("java.class.path"));
-      command.add("-Djava.library.path=" + javaLibPath);
+      initializeContainerOp.appendArgs("-Djava.library.path=" + javaLibPath);
-    command.addAll(ContainerLocalizer.getJavaOpts(getConf()));
-    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);
-    String[] commandArray = command.toArray(new String[command.size()]);
-    ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("initApplication: " + Arrays.toString(commandArray));
-    }
+
+    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));
+
+    List<String> localizerArgs = new ArrayList<>();
+
+    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);
+    initializeContainerOp.appendArgs(localizerArgs);
+
-      shExec.execute();
-      if (LOG.isDebugEnabled()) {
-        logOutput(shExec.getOutput());
-      }
-    } catch (ExitCodeException e) {
-      int exitCode = shExec.getExitCode();
+      Configuration conf = super.getConf();
+      PrivilegedOperationExecutor privilegedOperationExecutor =
+          PrivilegedOperationExecutor.getInstance(conf);
+
+      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,
+          initializeContainerOp, null, null, false);
+
+    } catch (PrivilegedOperationException e) {
+      int exitCode = e.getExitCode();
-      logOutput(shExec.getOutput());
+
-      		" (exitCode=" + exitCode + ") with output: " + shExec.getOutput(), e);
+          " (exitCode=" + exitCode + ") with output: " + e.getOutput(), e);
-    
+
-          resourceOps.add(new PrivilegedOperation
-              (PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,
+          resourceOps.add(new PrivilegedOperation(
+              PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,
-              case ADD_PID_TO_CGROUP:
-                resourceOps.add(op);
-                break;
-              case TC_MODIFY_STATE:
-                tcCommandFile = op.getArguments().get(0);
-                break;
-              default:
-                LOG.warn("PrivilegedOperation type unsupported in launch: "
-                    + op.getOperationType());
+            case ADD_PID_TO_CGROUP:
+              resourceOps.add(op);
+              break;
+            case TC_MODIFY_STATE:
+              tcCommandFile = op.getArguments().get(0);
+              break;
+            default:
+              LOG.warn("PrivilegedOperation type unsupported in launch: "
+                  + op.getOperationType());
-              throw new ResourceHandlerException("Failed to squash cgroup operations!");
+              throw new ResourceHandlerException(
+                  "Failed to squash cgroup operations!");
-        List<String> prefixCommands= new ArrayList<>();
+        List<String> prefixCommands = new ArrayList<>();
-        LOG.info("Container was marked as inactive. Returning terminated error");
+        LOG.info(
+            "Container was marked as inactive. Returning terminated error");
-            + containerId + " and exit code: " + exitCode , e);
+            + containerId + " and exit code: " + exitCode, e);
-      if (retCode == PrivilegedOperation.ResultCode.INVALID_CONTAINER_PID.getValue()) {
+      if (retCode == PrivilegedOperation.ResultCode.INVALID_CONTAINER_PID
+          .getValue()) {
-    String runAsUser = getRunAsUser(user);
+    String runAsUser = getRunAsUser(user);
-    List<String> command = new ArrayList<String>(
-        Arrays.asList(containerExecutorExe,
-                    runAsUser,
-                    user,
-                    Integer.toString(PrivilegedOperation.
-                        RunAsUserCommand.DELETE_AS_USER.getValue()),
-                    dirString));
+    PrivilegedOperation deleteAsUserOp = new PrivilegedOperation(
+        PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);
+
+    deleteAsUserOp.appendArgs(
+        runAsUser,
+        user,
+        Integer.toString(PrivilegedOperation.
+            RunAsUserCommand.DELETE_AS_USER.getValue()),
+        dirString);
+
-        command.add(baseDir.toUri().getPath());
+        deleteAsUserOp.appendArgs(baseDir.toUri().getPath());
-    String[] commandArray = command.toArray(new String[command.size()]);
-    ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("deleteAsUser: " + Arrays.toString(commandArray));
-    }
+
-      shExec.execute();
-      if (LOG.isDebugEnabled()) {
-        logOutput(shExec.getOutput());
-      }
-    } catch (IOException e) {
-      int exitCode = shExec.getExitCode();
+      Configuration conf = super.getConf();
+      PrivilegedOperationExecutor privilegedOperationExecutor =
+          PrivilegedOperationExecutor.getInstance(conf);
+
+      privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,
+          false);
+    }   catch (PrivilegedOperationException e) {
+      int exitCode = e.getExitCode();
-      LOG.error("Output from LinuxContainerExecutor's deleteAsUser follows:");
-      logOutput(shExec.getOutput());
-  
+
-         throws IOException {
-    List<String> command = new ArrayList<String>(
-            Arrays.asList(containerExecutorExe, "--mount-cgroups", hierarchy));
-    command.addAll(cgroupKVs);
-    
-    String[] commandArray = command.toArray(new String[command.size()]);
-    ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray);
-
-    if (LOG.isDebugEnabled()) {
-        LOG.debug("mountCgroups: " + Arrays.toString(commandArray));
-    }
-
+      throws IOException {
-        shExec.execute();
-    } catch (IOException e) {
-        int ret_code = shExec.getExitCode();
-        LOG.warn("Exception in LinuxContainerExecutor mountCgroups ", e);
-        logOutput(shExec.getOutput());
-        throw new IOException("Problem mounting cgroups " + cgroupKVs + 
-          "; exit code = " + ret_code + " and output: " + shExec.getOutput(), e);
+      PrivilegedOperation mountCGroupsOp = new PrivilegedOperation(
+          PrivilegedOperation.OperationType.MOUNT_CGROUPS, hierarchy);
+      Configuration conf = super.getConf();
+
+      mountCGroupsOp.appendArgs(cgroupKVs);
+      PrivilegedOperationExecutor privilegedOperationExecutor =
+          PrivilegedOperationExecutor.getInstance(conf);
+
+      privilegedOperationExecutor.executePrivilegedOperation(mountCGroupsOp,
+          false);
+    } catch (PrivilegedOperationException e) {
+      int exitCode = e.getExitCode();
+      LOG.warn("Exception in LinuxContainerExecutor mountCgroups ", e);
+
+      throw new IOException("Problem mounting cgroups " + cgroupKVs +
+          "; exit code = " + exitCode + " and output: " + e.getOutput(),
+          e);
-  }  
+  }
