Merging trunk to HDFS-2802 branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1416603 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.namenode.INode;
-import org.apache.hadoop.hdfs.server.namenode.INodeFile;
-import org.apache.hadoop.hdfs.server.namenode.INodeFileUnderConstruction;
-import org.apache.hadoop.hdfs.server.namenode.INodeSymlink;
-import org.apache.hadoop.hdfs.util.ReadOnlyList;
+import org.apache.hadoop.hdfs.server.namenode.INodeDirectory.INodesInPath;
-    final INodeDirectory d = INodeDirectory.valueOf(fsdir.getINode(path), path);
+    final INodesInPath inodesInPath = fsdir.getINodesInPath(path);
+    final INodeDirectory d = INodeDirectory.valueOf(
+        inodesInPath.getINode(0), path);
-    fsdir.replaceINodeDirectory(path, d, s);
+    fsdir.replaceINodeDirectory(path, d, s, inodesInPath.getLatestSnapshot());
+    final INodesInPath inodesInPath = fsdir.getINodesInPath(path);
-        fsdir.getINode(path), path);
+        inodesInPath.getINode(0), path);
-    fsdir.replaceINodeDirectory(path, s, d);
+    fsdir.replaceINodeDirectory(path, s, d, inodesInPath.getLatestSnapshot());
-    final Snapshot s = srcRoot.addSnapshot(snapshotID, snapshotName);
-    new SnapshotCreation().processRecursively(srcRoot, s.getRoot());
-      
+    srcRoot.addSnapshot(snapshotID, snapshotName);
+
-  /**
-   * Create a snapshot of subtrees by recursively coping the directory
-   * structure from the source directory to the snapshot destination directory.
-   * This creation algorithm requires O(N) running time and O(N) memory,
-   * where N = # files + # directories + # symlinks. 
-   */
-  class SnapshotCreation {
-    /** Process snapshot creation recursively. */
-    private void processRecursively(final INodeDirectory srcDir,
-        final INodeDirectory dstDir) throws IOException {
-      final ReadOnlyList<INode> children = srcDir.getChildrenList(null);
-      if (!children.isEmpty()) {
-        final List<INode> inodes = new ArrayList<INode>(children.size());
-        for(final INode c : new ArrayList<INode>(ReadOnlyList.Util.asList(children))) {
-          final INode i;
-          if (c == null) {
-            i = null;
-          } else if (c instanceof INodeDirectory) {
-            //also handle INodeDirectoryWithQuota
-            i = processINodeDirectory((INodeDirectory)c);
-          } else if (c instanceof INodeFileUnderConstruction) {
-            //TODO: support INodeFileUnderConstruction
-            throw new IOException("Not yet supported.");
-          } else if (c instanceof INodeFile) {
-            i = processINodeFile(srcDir, (INodeFile)c);
-          } else if (c instanceof INodeSymlink) {
-            i = new INodeSymlink((INodeSymlink)c);
-          } else {
-            throw new AssertionError("Unknow INode type: " + c.getClass()
-                + ", inode = " + c);
-          }
-          i.setParent(dstDir);
-          inodes.add(i);
-        }
-        dstDir.setChildren(inodes);
-      }
-    }
-    
-    /**
-     * Create destination INodeDirectory and make the recursive call. 
-     * @return destination INodeDirectory.
-     */
-    private INodeDirectory processINodeDirectory(final INodeDirectory srcChild
-        ) throws IOException {
-      final INodeDirectory dstChild = new INodeDirectory(srcChild);
-      dstChild.setChildren(null);
-      processRecursively(srcChild, dstChild);
-      return dstChild;
-    }
-
-    /**
-     * Create destination INodeFileSnapshot and update source INode type.
-     * @return destination INodeFileSnapshot.
-     */
-    private INodeFileSnapshot processINodeFile(final INodeDirectory parent,
-        final INodeFile file) {
-      final INodeFileSnapshot snapshot = new INodeFileSnapshot(
-          file, file.computeFileSize(true)); 
-
-      final INodeFileWithLink srcWithLink;
-      //check source INode type
-      if (file instanceof INodeFileWithLink) {
-        srcWithLink = (INodeFileWithLink)file;
-      } else {
-        //source is an INodeFile, replace the source.
-        srcWithLink = new INodeFileWithLink(file);
-        file.removeNode();
-        parent.addChild(srcWithLink, false);
-
-        //update block map
-        namesystem.getBlockManager().addBlockCollection(srcWithLink);
-      }
-      
-      //insert the snapshot to src's linked list.
-      srcWithLink.insert(snapshot);
-      return snapshot;
-    }
-  }
-
-}
+}
