YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.

+import java.nio.file.Files;
+import java.nio.file.Paths;
-
+import org.apache.commons.io.IOUtils;
-      null);
+      null, null);
-      String nodeId, String jobOwner, List<String> logType)
+      String nodeId, String jobOwner, List<String> logType, String localDir)
-    return dumpAContainersLogsForALogType(appId, containerId, nodeId, jobOwner,
-        logType, true);
+    return dumpAContainersLogsForALogType(appId, containerId, nodeId,
+        jobOwner, logType, true, localDir);
-      boolean outputFailure) throws IOException {
+      boolean outputFailure, String localDir) throws IOException {
+        PrintStream out = createPrintStream(localDir, fileName, containerId);
+          String containerString = "\n\nContainer: " + containerId;
+          out.println(containerString);
+          out.println(StringUtils.repeat("=", containerString.length()));
-            if (dumpAContainerLogs(containerId, reader, System.out,
+            if (dumpAContainerLogs(containerId, reader, out,
-            if (dumpAContainerLogsForALogType(containerId, reader, System.out,
+            if (dumpAContainerLogsForALogType(containerId, reader, out,
+          closePrintStream(out);
-    if (!foundContainerLogs && outputFailure) {
-      containerLogNotFound(containerId);
+    if (!foundContainerLogs) {
+      if (outputFailure) {
+        containerLogNotFound(containerId);
+      }
-      String containerId, String jobOwner, List<String> logType)
-    throws IOException {
+      String containerId, String jobOwner, List<String> logType,
+      String localDir) throws IOException {
+        PrintStream out = System.out;
+          if (getContainerLogsStream(containerId, reader) == null) {
+            continue;
+          }
+          reader =
+              new AggregatedLogFormat.LogReader(getConf(),
+              thisNodeFile.getPath());
+          out = createPrintStream(localDir, thisNodeFile.getPath().getName(),
+              containerId);
+          out.println(containerId);
+          out.println(StringUtils.repeat("=", containerId.length()));
-            if (dumpAContainerLogs(containerId, reader, System.out,
+            if (dumpAContainerLogs(containerId, reader, out,
-            if (dumpAContainerLogsForALogType(containerId, reader, System.out,
+            if (dumpAContainerLogsForALogType(containerId, reader, out,
+          closePrintStream(out);
+
-    DataInputStream valueStream;
-    LogKey key = new LogKey();
-    valueStream = reader.next(key);
-
-    while (valueStream != null && !key.toString().equals(containerIdStr)) {
-      // Next container
-      key = new LogKey();
-      valueStream = reader.next(key);
-    }
+    DataInputStream valueStream = getContainerLogsStream(
+        containerIdStr, reader);
-  @Private
-  public int dumpAContainerLogsForALogType(String containerIdStr,
-      AggregatedLogFormat.LogReader reader, PrintStream out,
-      long logUploadedTime, List<String> logType) throws IOException {
+  private DataInputStream getContainerLogsStream(String containerIdStr,
+      AggregatedLogFormat.LogReader reader) throws IOException {
+    return valueStream;
+  }
+  @Private
+  public int dumpAContainerLogsForALogType(String containerIdStr,
+      AggregatedLogFormat.LogReader reader, PrintStream out,
+      long logUploadedTime, List<String> logType) throws IOException {
+    DataInputStream valueStream = getContainerLogsStream(
+        containerIdStr, reader);
-      PrintStream out) throws IOException {
+      String localDir) throws IOException {
-
-            String containerString =
-                "\n\nContainer: " + key + " on "
-                + thisNodeFile.getPath().getName();
-            out.println(containerString);
-            out.println(StringUtils.repeat("=", containerString.length()));
-            while (true) {
-              try {
-                LogReader.readAContainerLogsForALogType(valueStream, out,
-                    thisNodeFile.getModificationTime());
-                foundAnyLogs = true;
-              } catch (EOFException eof) {
-                break;
+            PrintStream out = createPrintStream(localDir,
+                thisNodeFile.getPath().getName(), key.toString());
+            try {
+              String containerString =
+                  "\n\nContainer: " + key + " on "
+                  + thisNodeFile.getPath().getName();
+              out.println(containerString);
+              out.println(StringUtils.repeat("=", containerString.length()));
+              while (true) {
+                try {
+                  LogReader.readAContainerLogsForALogType(valueStream, out,
+                      thisNodeFile.getModificationTime());
+                  foundAnyLogs = true;
+                } catch (EOFException eof) {
+                  break;
+                }
+            } finally {
+              closePrintStream(out);
+
+  @Private
+  public PrintStream createPrintStream(String localDir, String nodeId,
+      String containerId) throws IOException {
+    PrintStream out = System.out;
+    if(localDir != null && !localDir.isEmpty()) {
+      Path nodePath = new Path(localDir, LogAggregationUtils
+          .getNodeString(nodeId));
+      Files.createDirectories(Paths.get(nodePath.toString()));
+      Path containerLogPath = new Path(nodePath, containerId);
+      out = new PrintStream(containerLogPath.toString(), "UTF-8");
+    }
+    return out;
+  }
+
+  public void closePrintStream(PrintStream out) {
+    if (out != System.out) {
+      IOUtils.closeQuietly(out);
+    }
+  }
