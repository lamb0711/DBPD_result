HDFS-8859. Improve DataNode ReplicaMap memory footprint to save about 45%. (yliu)

+import java.util.AbstractCollection;
+import java.util.Arrays;
+import java.util.Collection;
-import org.apache.hadoop.util.StringUtils;
-  public static interface LinkedElement {
+  public interface LinkedElement {
-    public void setNext(LinkedElement next);
+    void setNext(LinkedElement next);
-    public LinkedElement getNext();
+    LinkedElement getNext();
-  private final LinkedElement[] entries;
+  protected LinkedElement[] entries;
-  private final int hash_mask;
+  protected int hash_mask;
-  private int size = 0;
+  protected int size = 0;
-  private int modification = 0;
+  protected int modification = 0;
+
+  private Collection<E> values;
+
+  protected LightWeightGSet() {
+  }
-  private static int actualArrayLength(int recommended) {
+  protected static int actualArrayLength(int recommended) {
-  private int getIndex(final K key) {
+  protected int getIndex(final K key) {
-  private E convert(final LinkedElement e){
+  protected E convert(final LinkedElement e){
-    //validate element
+    // validate element
-    if (!(element instanceof LinkedElement)) {
+    LinkedElement e = null;
+    try {
+      e = (LinkedElement)element;
+    } catch (ClassCastException ex) {
-    final LinkedElement e = (LinkedElement)element;
-    //find index
+    // find index
-    //remove if it already exists
+    // remove if it already exists
-    //insert the element to the head of the linked list
+    // insert the element to the head of the linked list
-  private E remove(final int index, final K key) {
+  protected E remove(final int index, final K key) {
+  public Collection<E> values() {
+    if (values == null) {
+      values = new Values();
+    }
+    return values;
+  }
+
+  private final class Values extends AbstractCollection<E> {
+
+    @Override
+    public Iterator<E> iterator() {
+      return LightWeightGSet.this.iterator();
+    }
+
+    @Override
+    public int size() {
+      return size;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public boolean contains(Object o) {
+      return LightWeightGSet.this.contains((K)o);
+    }
+
+    @Override
+    public void clear() {
+      LightWeightGSet.this.clear();
+    }
+  }
+
+  @Override
-    for (int i = 0; i < entries.length; i++) {
-      entries[i] = null;
-    }
+    modification++;
+    Arrays.fill(entries, null);
