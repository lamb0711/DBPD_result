HDDS-102. SCM CA: SCM CA server signs certificate for approved CSR. Contributed by Anu Engineer.

+import org.apache.hadoop.hdds.security.x509.certificate.authority.PKIProfiles.DefaultProfile;
+import org.apache.hadoop.hdds.security.x509.certificate.authority.PKIProfiles.PKIProfile;
-import org.apache.hadoop.hdds.security.x509.certificates.utils.CertificateSignRequest;
+import org.bouncycastle.operator.OperatorCreationException;
+import org.bouncycastle.pkcs.PKCS10CertificationRequest;
+import java.security.spec.InvalidKeySpecException;
+import java.util.concurrent.CompletableFuture;
+import static org.apache.hadoop.hdds.security.x509.certificates.utils.CertificateSignRequest.*;
+
+  /**
+   * TODO: We will make these configurable in the future.
+   */
+  private PKIProfile profile;
+  private CertificateApprover approver;
+    // TODO: Make these configurable and load different profiles based on
+    // config.
+    profile = new DefaultProfile();
+    this.approver = new DefaultApprover(profile, this.config);
+
-  public X509CertificateHolder getCACertificate() throws
-      CertificateException, IOException {
+  public X509CertificateHolder getCACertificate() throws IOException {
-    return certificateCodec.readCertificate();
+    try {
+      return certificateCodec.readCertificate();
+    } catch (CertificateException e) {
+      throw new IOException(e);
+    }
+  }
+
+  private KeyPair getCAKeys() throws IOException {
+    KeyCodec keyCodec = new KeyCodec(config, componentName);
+    try {
+      return new KeyPair(keyCodec.readPublicKey(), keyCodec.readPrivateKey());
+    } catch (InvalidKeySpecException | NoSuchAlgorithmException e) {
+      throw new IOException(e);
+    }
-      CertificateSignRequest csr, CertificateApprover approver)
-      throws SCMSecurityException {
-    return null;
+      PKCS10CertificationRequest csr, CertificateApprover.ApprovalType approverType) {
+    LocalDate beginDate = LocalDate.now().atStartOfDay().toLocalDate();
+    LocalDateTime temp = LocalDateTime.of(beginDate, LocalTime.MIDNIGHT);
+    LocalDate endDate =
+        temp.plus(config.getDefaultCertDuration()).toLocalDate();
+
+    CompletableFuture<X509CertificateHolder> xcertHolder =
+        approver.approve(csr);
+
+    if(xcertHolder.isCompletedExceptionally()) {
+      // This means that approver told us there are things which it disagrees
+      // with in this Certificate Request. Since the first set of sanity
+      // checks failed, we just return the future object right here.
+      return xcertHolder;
+    }
+    try {
+      switch (approverType) {
+      case MANUAL:
+        xcertHolder.completeExceptionally(new SCMSecurityException("Manual " +
+            "approval is not yet implemented."));
+        break;
+      case KERBEROS_TRUSTED:
+      case TESTING_AUTOMATIC:
+        X509CertificateHolder xcert = approver.sign(config,
+            getCAKeys().getPrivate(),
+            getCACertificate(), java.sql.Date.valueOf(beginDate),
+            java.sql.Date.valueOf(endDate), csr);
+        xcertHolder.complete(xcert);
+        break;
+      default:
+        return null; // cannot happen, keeping checkstyle happy.
+      }
+    } catch (IOException | OperatorCreationException e) {
+      xcertHolder.completeExceptionally(new SCMSecurityException(e));
+    }
+    return xcertHolder;
+  }
+
+  @Override
+  public Future<X509CertificateHolder> requestCertificate(String csr,
+      CertificateApprover.ApprovalType type) throws IOException {
+    PKCS10CertificationRequest request =
+        getCertificationRequest(csr);
+    return requestCertificate(request, type);
-      CertificateApprover approver) throws SCMSecurityException {
+      CertificateApprover.ApprovalType approverType) throws SCMSecurityException {
-    if (!Files.exists(Paths.get(caKeysPath.toString(),
-        this.config.getPrivateKeyFileName()))) {
-      return false;
-    }
-    return true;
+    return Files.exists(Paths.get(caKeysPath.toString(),
+        this.config.getPrivateKeyFileName()));
-    if (!Files.exists(Paths.get(caRootX509Path.toString(),
-        this.config.getCertificateFileName()))) {
-      return false;
-    }
-    return true;
+    return Files.exists(Paths.get(caRootX509Path.toString(),
+        this.config.getCertificateFileName()));
