MAPREDUCE-7047. Make HAR tool support IndexedLogAggregtionController. (Xuan Gong via wangda)

Change-Id: Ice5ae1c706f2476361997dcbb29f2c33c77d4f0c

-import org.apache.hadoop.yarn.logaggregation.LogAggregationUtils;
+import org.apache.hadoop.yarn.logaggregation.filecontroller.LogAggregationFileController;
+import org.apache.hadoop.yarn.logaggregation.filecontroller.LogAggregationFileControllerFactory;
+  private Set<Path> workingDirs;
+
+    workingDirs = new HashSet<>();
-    Path remoteRootLogDir = new Path(conf.get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String suffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);
-    Path workingDir = new Path(remoteRootLogDir, "archive-logs-work");
-    if (verbose) {
-      LOG.info("Remote Log Dir Root: " + remoteRootLogDir);
-      LOG.info("Log Suffix: " + suffix);
-      LOG.info("Working Dir: " + workingDir);
+
+    LogAggregationFileControllerFactory factory =
+        new LogAggregationFileControllerFactory(conf);
+    List<LogAggregationFileController> fileControllers = factory
+        .getConfiguredLogAggregationFileControllerList();
+    if (fileControllers == null || fileControllers.isEmpty()) {
+      LOG.info("Can not find any valid fileControllers.");
+      if (verbose) {
+        LOG.info("The configurated fileControllers:"
+            + YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS);
+      }
+      return 0;
-      if (prepareWorkingDir(fs, workingDir)) {
-
-        checkFilesAndSeedApps(fs, remoteRootLogDir, suffix);
+      // find eligibleApplications for all the fileControllers
+      int previousTotal = 0;
+      for (LogAggregationFileController fileController : fileControllers) {
+        Path remoteRootLogDir = fileController.getRemoteRootLogDir();
+        String suffix = fileController.getRemoteRootLogDirSuffix();
+        Path workingDir = new Path(remoteRootLogDir, "archive-logs-work");
+        if (verbose) {
+          LOG.info("LogAggregationFileController:" + fileController
+              .getClass().getName());
+          LOG.info("Remote Log Dir Root: " + remoteRootLogDir);
+          LOG.info("Log Suffix: " + suffix);
+          LOG.info("Working Dir: " + workingDir);
+        }
+        checkFilesAndSeedApps(fs, remoteRootLogDir, suffix, workingDir);
-        checkMaxEligible();
-
-        if (eligibleApplications.isEmpty()) {
-          LOG.info("No eligible applications to process");
-          exitCode = 0;
-        } else {
-          StringBuilder sb =
-              new StringBuilder("Will process the following applications:");
-          for (AppInfo app : eligibleApplications) {
-            sb.append("\n\t").append(app.getAppId());
-          }
-          LOG.info(sb.toString());
-
-          File localScript = File.createTempFile("hadoop-archive-logs-", ".sh");
-          generateScript(localScript, workingDir, remoteRootLogDir, suffix);
-
-          exitCode = runDistributedShell(localScript) ? 0 : 1;
+        if (eligibleApplications.size() > previousTotal) {
+          workingDirs.add(workingDir);
+          previousTotal = eligibleApplications.size();
+      checkMaxEligible();
+      if (workingDirs.isEmpty() || eligibleApplications.isEmpty()) {
+        LOG.info("No eligible applications to process");
+        return 0;
+      }
+      for (Path workingDir : workingDirs) {
+        if (!prepareWorkingDir(fs, workingDir)) {
+          LOG.error("Failed to create the workingDir:"
+              + workingDir.toString());
+          return 1;
+        }
+      }
+      StringBuilder sb =
+          new StringBuilder("Will process the following applications:");
+      for (AppInfo app : eligibleApplications) {
+        sb.append("\n\t").append(app.getAppId());
+      }
+      LOG.info(sb.toString());
+      File localScript = File.createTempFile("hadoop-archive-logs-", ".sh");
+      generateScript(localScript);
+
+      exitCode = runDistributedShell(localScript) ? 0 : 1;
-        fs.delete(workingDir, true);
+        for (Path workingDir : workingDirs) {
+          fs.delete(workingDir, true);
+        }
-      for (Iterator<AppInfo> it = eligibleApplications.iterator();
-           it.hasNext();) {
+      for (Iterator<AppInfo> it = eligibleApplications
+          .iterator(); it.hasNext();) {
-       String suffix) throws IOException {
+       String suffix, Path workingDir) throws IOException {
-                eligibleApplications.add(
-                    new AppInfo(appLogPath.getName(), userLogPath.getName()));
+                AppInfo context = new AppInfo();
+                context.setAppId(appLogPath.getName());
+                context.setUser(userLogPath.getName());
+                context.setSuffix(suffix);
+                context.setRemoteRootLogDir(remoteRootLogDir);
+                context.setWorkingDir(workingDir);
+                eligibleApplications.add(context);
-    if (maxEligible > 0 && eligibleApplications.size() > maxEligible) {
+    if (maxEligible > 0 && eligibleApplications.size()
+        > maxEligible) {
-        LOG.info("Too many applications (" + eligibleApplications.size() +
+        LOG.info("Too many applications (" + eligibleApplications
+            .size() +
-      Collections.sort(sortedApplications, new Comparator<AppInfo>() {
+      Collections.sort(sortedApplications, new Comparator<
+          AppInfo>() {
+        workingDir="/tmp/logs/archive-logs-work"
+        remoteRootLogDir="/tmp/logs"
+        suffix="logs"
+        workingDir="/tmp/logs/archive-logs-work"
+        remoteRootLogDir="/tmp/logs"
+        suffix="logs"
-  "$HADOOP_HOME"/bin/hadoop org.apache.hadoop.tools.HadoopArchiveLogsRunner -appId "$appId" -user "$user" -workingDir /tmp/logs/archive-logs-work -remoteRootLogDir /tmp/logs -suffix logs
+  "$HADOOP_HOME"/bin/hadoop org.apache.hadoop.tools.HadoopArchiveLogsRunner -appId "$appId" -user "$user" -workingDir "$workingDir" -remoteRootLogDir "$remoteRootLogDir" -suffix "$suffix"
-  void generateScript(File localScript, Path workingDir,
-        Path remoteRootLogDir, String suffix) throws IOException {
+  void generateScript(File localScript) throws IOException {
-      for (AppInfo app : eligibleApplications) {
+      for (AppInfo context : eligibleApplications) {
-        fw.write(app.getAppId());
+        fw.write(context.getAppId());
-        fw.write(app.getUser());
+        fw.write(context.getUser());
+        fw.write("\"\n\tworkingDir=\"");
+        fw.write(context.getWorkingDir().toString());
+        fw.write("\"\n\tremoteRootLogDir=\"");
+        fw.write(context.getRemoteRootLogDir().toString());
+        fw.write("\"\n\tsuffix=\"");
+        fw.write(context.getSuffix());
-      fw.write(workingDir.toString());
+      fw.write("\"$workingDir\"");
-      fw.write(remoteRootLogDir.toString());
+      fw.write("\"$remoteRootLogDir\"");
-      fw.write(suffix);
+      fw.write("\"$suffix\"");
+    private Path remoteRootLogDir;
+    private String suffix;
+    private Path workingDir;
+    AppInfo() {}
+
-      this.appId = appId;
-      this.user = user;
-      this.finishTime = 0L;
+      this.setAppId(appId);
+      this.setUser(user);
+    public void setAppId(String appId) {
+      this.appId = appId;
+    }
+
+    public Path getRemoteRootLogDir() {
+      return remoteRootLogDir;
+    }
+
+    public void setRemoteRootLogDir(Path remoteRootLogDir) {
+      this.remoteRootLogDir = remoteRootLogDir;
+    }
+
+    public String getSuffix() {
+      return suffix;
+    }
+
+    public void setSuffix(String suffix) {
+      this.suffix = suffix;
+    }
+
+    public Path getWorkingDir() {
+      return workingDir;
+    }
+
+    public void setWorkingDir(Path workingDir) {
+      this.workingDir = workingDir;
+    }
+
+    public void setUser(String user) {
+      this.user = user;
+    }
+
-      return !(user != null
-          ? !user.equals(appInfo.user) : appInfo.user != null);
+
+      if (user != null
+          ? !user.equals(appInfo.user) : appInfo.user != null) {
+        return false;
+      }
+
+      if (suffix != null
+          ? !suffix.equals(appInfo.suffix) : appInfo.suffix != null) {
+        return false;
+      }
+
+      if (workingDir != null ? !workingDir.equals(
+          appInfo.workingDir) : appInfo.workingDir != null) {
+        return false;
+      }
+
+      if (remoteRootLogDir != null ? !remoteRootLogDir.equals(
+          appInfo.remoteRootLogDir) : appInfo.remoteRootLogDir != null) {
+        return false;
+      }
+
+      return Long.compare(finishTime, appInfo.finishTime) == 0;
+      result = 31 * result + (suffix != null ? suffix.hashCode() : 0);
+      result = 31 * result + (workingDir != null ? workingDir.hashCode() : 0);
+      result = 31 * result + (remoteRootLogDir != null ?
+          remoteRootLogDir.hashCode() : 0);
+      result = 31 * result + Long.valueOf(finishTime).hashCode();
