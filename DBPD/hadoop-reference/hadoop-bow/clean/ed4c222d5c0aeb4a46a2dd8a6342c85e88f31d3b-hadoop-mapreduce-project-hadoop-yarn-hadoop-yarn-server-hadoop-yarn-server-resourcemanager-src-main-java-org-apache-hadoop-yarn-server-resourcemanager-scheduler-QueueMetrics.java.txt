MAPREDUCE-3773. Add queue metrics with buckets for job run times. Contributed by Owen O'Malley.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1299100 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsSource;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
-public class QueueMetrics {
+public class QueueMetrics implements MetricsSource {
+  private final MutableGaugeInt[] runningTime;
+  private TimeBucketMetrics<ApplicationId> runBuckets;
+  private final Configuration conf;
-  QueueMetrics(MetricsSystem ms, String queueName, Queue parent, boolean enableUserMetrics) {
+  QueueMetrics(MetricsSystem ms, String queueName, Queue parent, 
+	       boolean enableUserMetrics, Configuration conf) {
+    this.conf = conf;
+    runningTime = buildBuckets(conf);
-                               boolean enableUserMetrics) {
+                               boolean enableUserMetrics,
+			       Configuration conf) {
-                    enableUserMetrics);
+                    enableUserMetrics, conf);
-                                      Queue parent, boolean enableUserMetrics) {
-    QueueMetrics metrics = new QueueMetrics(ms, queueName, parent,
-        enableUserMetrics).tag(QUEUE_INFO, queueName);
+                                      Queue parent, boolean enableUserMetrics,
+				      Configuration conf) {
+    QueueMetrics metrics = 
+      new QueueMetrics(ms, queueName, parent, enableUserMetrics, conf
+		       ).tag(QUEUE_INFO, queueName);
-      metrics = new QueueMetrics(metricsSystem, queueName, null, false);
+      metrics = new QueueMetrics(metricsSystem, queueName, null, false, conf);
+  private ArrayList<Integer> parseInts(String value) {
+    ArrayList<Integer> result = new ArrayList<Integer>();
+    for(String s: value.split(",")) {
+      result.add(Integer.parseInt(s.trim()));
+    }
+    return result;
+  }
+
+  private MutableGaugeInt[] buildBuckets(Configuration conf) {
+    ArrayList<Integer> buckets = 
+      parseInts(conf.get(YarnConfiguration.RM_METRICS_RUNTIME_BUCKETS,
+		        YarnConfiguration.DEFAULT_RM_METRICS_RUNTIME_BUCKETS));
+    MutableGaugeInt[] result = new MutableGaugeInt[buckets.size() + 1];
+    result[0] = registry.newGauge("running_0", "", 0);
+    long[] cuts = new long[buckets.size()];
+    for(int i=0; i < buckets.size(); ++i) {
+      result[i+1] = registry.newGauge("running_" + buckets.get(i), "", 0);
+      cuts[i] = buckets.get(i) * 1000L * 60; // covert from min to ms
+    }
+    this.runBuckets = new TimeBucketMetrics<ApplicationId>(cuts);
+    return result;
+  }
+
+  private void updateRunningTime() {
+    int[] counts = runBuckets.getBucketCounts(System.currentTimeMillis());
+    for(int i=0; i < counts.length; ++i) {
+      runningTime[i].set(counts[i]); 
+    }
+  }
+
+  public void getMetrics(MetricsCollector collector, boolean all) {
+    updateRunningTime();
+    registry.snapshot(collector.addRecord(registry.info()), all);
+  }
+
-  public void incrAppsRunning(String user) {
+  public void incrAppsRunning(AppSchedulingInfo app, String user) {
+    runBuckets.add(app.getApplicationId(), System.currentTimeMillis());
-      userMetrics.incrAppsRunning(user);
+      userMetrics.incrAppsRunning(app, user);
-      parent.incrAppsRunning(user);
+      parent.incrAppsRunning(app, user);
+    runBuckets.remove(app.getApplicationId());
