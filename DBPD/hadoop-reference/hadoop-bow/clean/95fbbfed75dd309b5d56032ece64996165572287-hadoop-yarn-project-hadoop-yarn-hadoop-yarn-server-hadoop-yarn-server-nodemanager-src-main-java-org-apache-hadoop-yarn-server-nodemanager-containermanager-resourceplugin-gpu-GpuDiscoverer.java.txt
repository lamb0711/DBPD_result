YARN-9118. Handle exceptions with parsing user defined GPU devices in GpuDiscoverer. Contributed by Szilard Nemeth.

-import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
-  protected static final String DEFAULT_BINARY_NAME = "nvidia-smi";
+  static final String DEFAULT_BINARY_NAME = "nvidia-smi";
-  GpuDeviceInformation lastDiscoveredGpuInformation = null;
+  private GpuDeviceInformation lastDiscoveredGpuInformation = null;
-  public synchronized GpuDeviceInformation getGpuDeviceInformation()
+  synchronized GpuDeviceInformation getGpuDeviceInformation()
-      GpuDeviceInformation info = parser.parseXml(output);
+      lastDiscoveredGpuInformation = parser.parseXml(output);
-      lastDiscoveredGpuInformation = info;
-      return info;
+      return lastDiscoveredGpuInformation;
-    List<GpuDevice> gpuDevices = new ArrayList<>();
-
-      // Get gpu device information from system.
-      if (null == lastDiscoveredGpuInformation) {
-        String msg = YarnConfiguration.NM_GPU_ALLOWED_DEVICES + " is set to "
-            + YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES
-            + ", however automatically discovering "
-            + "GPU information failed, please check NodeManager log for more"
-            + " details, as an alternative, admin can specify "
-            + YarnConfiguration.NM_GPU_ALLOWED_DEVICES
-            + " manually to enable GPU isolation.";
-        LOG.error(msg);
-        throw new YarnException(msg);
-      }
-
-      if (lastDiscoveredGpuInformation.getGpus() != null) {
-        for (int i = 0; i < lastDiscoveredGpuInformation.getGpus().size();
-             i++) {
-          List<PerGpuDeviceInformation> gpuInfos =
-              lastDiscoveredGpuInformation.getGpus();
-          gpuDevices.add(new GpuDevice(i, gpuInfos.get(i).getMinorNumber()));
-        }
-      }
-    } else{
-      for (String s : allowedDevicesStr.split(",")) {
-        if (s.trim().length() > 0) {
-          String[] kv = s.trim().split(":");
-          if (kv.length != 2) {
-            throw new YarnException(
-                "Illegal format, it should be index:minor_number format, now it="
-                    + s);
-          }
-
-          gpuDevices.add(
-              new GpuDevice(Integer.parseInt(kv[0]), Integer.parseInt(kv[1])));
-        }
-      }
-      LOG.info("Allowed GPU devices:" + gpuDevices);
+      return parseGpuDevicesFromAutoDiscoveredGpuInfo();
+    } else {
+      return parseGpuDevicesFromUserDefinedValues(allowedDevicesStr);
+  }
+
+  private List<GpuDevice> parseGpuDevicesFromAutoDiscoveredGpuInfo()
+          throws YarnException {
+    if (lastDiscoveredGpuInformation == null) {
+      String msg = YarnConfiguration.NM_GPU_ALLOWED_DEVICES + " is set to "
+          + YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES
+          + ", however automatically discovering "
+          + "GPU information failed, please check NodeManager log for more"
+          + " details, as an alternative, admin can specify "
+          + YarnConfiguration.NM_GPU_ALLOWED_DEVICES
+          + " manually to enable GPU isolation.";
+      LOG.error(msg);
+      throw new YarnException(msg);
+    }
+
+    List<GpuDevice> gpuDevices = new ArrayList<>();
+    if (lastDiscoveredGpuInformation.getGpus() != null) {
+      int numberOfGpus = lastDiscoveredGpuInformation.getGpus().size();
+      LOG.debug("Found {} GPU devices", numberOfGpus);
+      for (int i = 0; i < numberOfGpus; i++) {
+        List<PerGpuDeviceInformation> gpuInfos =
+            lastDiscoveredGpuInformation.getGpus();
+        gpuDevices.add(new GpuDevice(i, gpuInfos.get(i).getMinorNumber()));
+      }
+    }
+    return gpuDevices;
+  }
+
+  /**
+   * @param devices allowed devices coming from the config.
+   *                          Individual devices should be separated by commas.
+   *                          <br>The format of individual devices should be:
+   *                           &lt;index:&gt;&lt;minorNumber&gt;
+   * @return List of GpuDevices
+   * @throws YarnException when a GPU device is defined as a duplicate.
+   * The first duplicate GPU device will be added to the exception message.
+   */
+  private List<GpuDevice> parseGpuDevicesFromUserDefinedValues(String devices)
+      throws YarnException {
+    if (devices.trim().isEmpty()) {
+      throw GpuDeviceSpecificationException.createWithEmptyValueSpecified();
+    }
+    List<GpuDevice> gpuDevices = Lists.newArrayList();
+    for (String device : devices.split(",")) {
+      if (device.trim().length() > 0) {
+        String[] splitByColon = device.trim().split(":");
+        if (splitByColon.length != 2) {
+          throw GpuDeviceSpecificationException.
+              createWithWrongValueSpecified(device, devices);
+        }
+
+        GpuDevice gpuDevice = parseGpuDevice(device, splitByColon, devices);
+        if (!gpuDevices.contains(gpuDevice)) {
+          gpuDevices.add(gpuDevice);
+        } else {
+          throw GpuDeviceSpecificationException
+              .createWithDuplicateValueSpecified(device, devices);
+        }
+      }
+    }
+    LOG.info("Allowed GPU devices:" + gpuDevices);
-  public synchronized void initialize(Configuration conf) throws YarnException {
+  private GpuDevice parseGpuDevice(String device, String[] splitByColon,
+      String allowedDevicesStr) throws YarnException {
+    try {
+      int index = Integer.parseInt(splitByColon[0]);
+      int minorNumber = Integer.parseInt(splitByColon[1]);
+      return new GpuDevice(index, minorNumber);
+    } catch (NumberFormatException e) {
+      throw GpuDeviceSpecificationException.
+          createWithWrongValueSpecified(device, allowedDevicesStr, e);
+    }
+  }
+
+  public synchronized void initialize(Configuration conf) {
-    // Validate file existence
-
-  protected Map<String, String> getEnvironmentToRunCommand() {
+  Map<String, String> getEnvironmentToRunCommand() {
-  protected String getPathOfGpuBinary() {
+  String getPathOfGpuBinary() {
