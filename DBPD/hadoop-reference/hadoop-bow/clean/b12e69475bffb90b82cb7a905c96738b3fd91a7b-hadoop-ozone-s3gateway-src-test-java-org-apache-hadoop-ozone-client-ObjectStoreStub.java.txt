HDDS-658. Implement s3 bucket list backend call and use it from rest endpoint. Contributed by Bharat Viswanadham.

-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.*;
+  private Map<String, List<OzoneBucket>> userBuckets = new HashMap<>();
+    String volumeName = "s3" + userName;
-      String volumeName = "s3"+userName;
+
+    if (userBuckets.get(userName) == null) {
+      List<OzoneBucket> ozoneBuckets = new ArrayList<>();
+      ozoneBuckets.add(volumes.get(volumeName).getBucket(s3BucketName));
+      userBuckets.put(userName, ozoneBuckets);
+    } else {
+      userBuckets.get(userName).add(volumes.get(volumeName).getBucket(
+          s3BucketName));
+    }
+  }
+
+  public Iterator<? extends OzoneBucket> listS3Buckets(String userName,
+                                                       String bucketPrefix) {
+    if (userBuckets.get(userName) == null) {
+      return new ArrayList<OzoneBucket>().iterator();
+    } else {
+      return userBuckets.get(userName).parallelStream()
+          .filter(ozoneBucket -> {
+            if (bucketPrefix != null) {
+              return ozoneBucket.getName().startsWith(bucketPrefix);
+            } else {
+              return true;
+            }
+          }).collect(Collectors.toList())
+          .iterator();
+    }
+  }
+
+  public Iterator<? extends OzoneBucket> listS3Buckets(String userName,
+                                                       String bucketPrefix,
+                                                       String prevBucket) {
+
+    if (userBuckets.get(userName) == null) {
+      return new ArrayList<OzoneBucket>().iterator();
+    } else {
+      //Sort buckets lexicographically
+      userBuckets.get(userName).sort(
+          (bucket1, bucket2) -> {
+            int compare = bucket1.getName().compareTo(bucket2.getName());
+            if (compare < 0) {
+              return -1;
+            } else if (compare == 0) {
+              return 0;
+            } else {
+              return 1;
+            }
+          });
+      return userBuckets.get(userName).stream()
+          .filter(ozoneBucket -> {
+            if (prevBucket != null) {
+              return ozoneBucket.getName().compareTo(prevBucket) > 0;
+            } else {
+              return true;
+            }
+          })
+          .filter(ozoneBucket -> {
+            if (bucketPrefix != null) {
+              return ozoneBucket.getName().startsWith(bucketPrefix);
+            } else {
+              return true;
+            }
+          }).collect(Collectors.toList())
+          .iterator();
+    }
