HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520665 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.NoSuchElementException;
+import org.apache.hadoop.hdfs.protocol.AlreadyBeingCreatedException;
+import org.apache.hadoop.hdfs.protocol.PathCacheDirective;
+import org.apache.hadoop.hdfs.protocol.PathCacheEntry;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPoolError;
+import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPoolNameError;
-import org.apache.hadoop.hdfs.protocol.AlreadyBeingCreatedException;
-import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
+import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.InvalidIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.NoSuchIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.RemovePermissionDeniedException;
+import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.UnexpectedRemovePathCacheEntryException;
+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
-import org.apache.hadoop.hdfs.protocol.PathCacheDirective;
-import org.apache.hadoop.hdfs.protocol.PathCacheEntry;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.InvalidIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.NoSuchIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.RemovePermissionDeniedException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.UnexpectedRemovePathCacheEntryException;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathCacheDirectiveProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesElementProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathCacheDirectiveProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathCacheEntryProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemoveCachePoolRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemoveCachePoolRequestProto;
-import org.apache.hadoop.hdfs.server.namenode.CachePool;
-      return new InvalidPoolError(directive);
+      return new InvalidPoolNameError(directive);
-            setPool(PBHelper.convert(new CachePool(directive.getPoolId()))).
+            setPool(directive.getPool()).
-      PathCacheEntryProto entryProto = response.getEntries(i);
-      return PBHelper.convert(entryProto);
+      ListPathCacheEntriesElementProto elementProto =
+        response.getElements(i);
+      return new PathCacheEntry(elementProto.getId(), 
+          new PathCacheDirective(elementProto.getPath(),
+              elementProto.getPool()));
-      return response.getEntriesCount();
+      return response.getElementsCount();
+    }
+    
+    @Override
+    public boolean hasMore() {
+      return response.getHasMore();
-    private final long poolId;
+    private final String pool;
-    public PathCacheEntriesIterator(long prevKey, int maxRepliesPerRequest,
-        long poolId) {
-      super(prevKey, maxRepliesPerRequest);
-      this.poolId = poolId;
+    public PathCacheEntriesIterator(long prevKey, String pool) {
+      super(prevKey);
+      this.pool = pool;
-        Long prevEntryId, int maxRepliesPerRequest) throws IOException {
+        Long nextKey) throws IOException {
-              setPrevEntry(
-                  PBHelper.convert(new PathCacheEntry(prevEntryId, null))).
-              setPool(PBHelper.convert(new CachePool(poolId))).
-              setMaxReplies(maxRepliesPerRequest).
+              setPrevId(nextKey).
+              setPool(pool).
-        if (response.getEntriesCount() == 0) {
+        if (response.getElementsCount() == 0) {
-      long poolId, int repliesPerRequest) throws IOException {
-    return new PathCacheEntriesIterator(prevId, repliesPerRequest, poolId);
+      String pool) throws IOException {
+    return new PathCacheEntriesIterator(prevId, pool);
-  public CachePool addCachePool(CachePoolInfo info) throws IOException {
-    AddCachePoolRequestProto.Builder builder =
+  public void addCachePool(CachePoolInfo info) throws IOException {
+    AddCachePoolRequestProto.Builder builder = 
-    builder.setInfo(PBHelper.convert(info));
+    builder.setPoolName(info.getPoolName());
+    if (info.getOwnerName() != null) {
+      builder.setOwnerName(info.getOwnerName());
+    }
+    if (info.getGroupName() != null) {
+      builder.setGroupName(info.getGroupName());
+    }
+    if (info.getMode() != null) {
+      builder.setMode(info.getMode().toShort());
+    }
+    if (info.getWeight() != null) {
+      builder.setWeight(info.getWeight());
+    }
-      return PBHelper.convert(
-          rpcProxy.addCachePool(null, builder.build()).getPool());
+      rpcProxy.addCachePool(null, builder.build());
-  public void modifyCachePool(long poolId, CachePoolInfo info)
-      throws IOException {
-    ModifyCachePoolRequestProto.Builder builder =
-        ModifyCachePoolRequestProto.newBuilder()
-        .setPool(PBHelper.convert(new CachePool(poolId)))
-        .setInfo(PBHelper.convert(info));
+  public void modifyCachePool(CachePoolInfo req) throws IOException {
+    ModifyCachePoolRequestProto.Builder builder = 
+        ModifyCachePoolRequestProto.newBuilder();
+    builder.setPoolName(req.getPoolName());
+    if (req.getOwnerName() != null) {
+      builder.setOwnerName(req.getOwnerName());
+    }
+    if (req.getGroupName() != null) {
+      builder.setGroupName(req.getGroupName());
+    }
+    if (req.getMode() != null) {
+      builder.setMode(req.getMode().toShort());
+    }
+    if (req.getWeight() != null) {
+      builder.setWeight(req.getWeight());
+    }
-  public void removeCachePool(long poolId) throws IOException {
+  public void removeCachePool(String cachePoolName) throws IOException {
-      rpcProxy.removeCachePool(null,
+      rpcProxy.removeCachePool(null, 
-          setPool(PBHelper.convert(new CachePool(poolId))).
-          build());
+            setPoolName(cachePoolName).build());
-      implements BatchedEntries<CachePool> {
-
+      implements BatchedEntries<CachePoolInfo> {
-
+    
-
+      
-    public CachePool get(int i) {
+    public CachePoolInfo get(int i) {
-      return PBHelper.convert(elem.getPool());
+      return new CachePoolInfo(elem.getPoolName()).
+          setOwnerName(elem.getOwnerName()).
+          setGroupName(elem.getGroupName()).
+          setMode(new FsPermission((short)elem.getMode())).
+          setWeight(elem.getWeight());
+    
+    @Override
+    public boolean hasMore() {
+      return proto.getHasMore();
+    }
+  
+  private class CachePoolIterator 
+      extends BatchedRemoteIterator<String, CachePoolInfo> {
-  private class CachePoolIterator
-      extends BatchedRemoteIterator<Long, CachePool> {
-
-    public CachePoolIterator(Long prevKey, int maxRepliesPerRequest) {
-      super(prevKey, maxRepliesPerRequest);
+    public CachePoolIterator(String prevKey) {
+      super(prevKey);
-    public BatchedEntries<CachePool> makeRequest(Long prevKey,
-        int maxRepliesPerRequest) throws IOException {
+    public BatchedEntries<CachePoolInfo> makeRequest(String prevKey)
+        throws IOException {
-            rpcProxy.listCachePools(null,
+            rpcProxy.listCachePools(null, 
-                setPrevPool(PBHelper.convert(new CachePool(prevKey))).
-                setMaxReplies(maxRepliesPerRequest).
-                build()));
+                setPrevPoolName(prevKey).build()));
-    public Long elementToPrevKey(CachePool element) {
-      return element.getId();
+    public String elementToPrevKey(CachePoolInfo element) {
+      return element.getPoolName();
-  public RemoteIterator<CachePool> listCachePools(long prevPoolId,
-      int maxRepliesPerRequest) throws IOException {
-    return new CachePoolIterator(prevPoolId, maxRepliesPerRequest);
+  public RemoteIterator<CachePoolInfo> listCachePools(String prevKey)
+      throws IOException {
+    return new CachePoolIterator(prevKey);
