HDFS-10301. Interleaving processing of storages from repeated block reports causes false zombie storage detection, removes valid blocks. Contributed by Vinitha Gankidi.
-      //
-      // BlockManager.processReport accumulates information of prior calls
-      // for the same node and storage, so the value returned by the last
-      // call of this loop is the final updated value for noStaleStorage.
-      //
-      final int index = r;
-      noStaleStorages = bm.runBlockOp(new Callable<Boolean>() {
-        @Override
-        public Boolean call() throws IOException {
-          return bm.processReport(nodeReg, reports[index].getStorage(),
-              blocks, context, (index == reports.length - 1));
-        }
-      });
-      metrics.incrStorageBlockReportOps();
+      if (!blocks.isStorageReport()) {
+        //
+        // BlockManager.processReport accumulates information of prior calls
+        // for the same node and storage, so the value returned by the last
+        // call of this loop is the final updated value for noStaleStorage.
+        //
+        final int index = r;
+        noStaleStorages = bm.runBlockOp(new Callable<Boolean>() {
+          @Override
+          public Boolean call()
+              throws IOException {
+            return bm.processReport(nodeReg, reports[index].getStorage(),
+                blocks, context);
+          }
+        });
+        metrics.incrStorageBlockReportOps();
+      }
+        context.getTotalRpcs() == context.getCurRpc() + 1) {
+      Set<String> storageIDsInBlockReport = new HashSet<>();
+      for (StorageBlockReport report : reports) {
+        storageIDsInBlockReport.add(report.getStorage().getStorageID());
+      }
+      bm.removeZombieStorages(nodeReg, context, storageIDsInBlockReport);
+    }
+
+    if (nn.getFSImage().isUpgradeFinalized() &&
