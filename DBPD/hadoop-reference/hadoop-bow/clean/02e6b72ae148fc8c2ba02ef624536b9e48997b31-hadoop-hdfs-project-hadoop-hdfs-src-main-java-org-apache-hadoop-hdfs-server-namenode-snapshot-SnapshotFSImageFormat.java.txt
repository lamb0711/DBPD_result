HDFS-4481. Change fsimage to support snapshot file diffs.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446000 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectoryWithSnapshot.ChildrenDiff;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot.FileDiff;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot.FileDiffList;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectoryWithSnapshot.DirectoryDiffList;
-  public static void saveSnapshotDiffs(INodeDirectoryWithSnapshot sNode,
-      DataOutputStream out) throws IOException {
-    // # of SnapshotDiff
-    List<DirectoryDiff> diffs = sNode.getDiffs().asList();
-    // Record the SnapshotDiff in reversed order, so that we can find the
-    // correct reference for INodes in the created list when loading the
-    // FSImage
-    out.writeInt(diffs.size());
-    for (int i = diffs.size() - 1; i >= 0; i--) {
-      DirectoryDiff sdiff = diffs.get(i);
-      sdiff.write(out);
+  private static <N extends INode, D extends AbstractINodeDiff<N, D>>
+      void saveINodeDiffs(final AbstractINodeDiffList<N, D> diffs,
+      final DataOutputStream out) throws IOException {
+    // Record the diffs in reversed order, so that we can find the correct
+    // reference for INodes in the created list when loading the FSImage
+    if (diffs == null) {
+      out.writeInt(-1); // no diffs
+    } else {
+      final List<D> list = diffs.asList();
+      final int size = list.size();
+      out.writeInt(size);
+      for (int i = size - 1; i >= 0; i--) {
+        list.get(i).write(out);
+      }
+  public static void saveDirectoryDiffList(final INodeDirectory dir,
+      final DataOutputStream out) throws IOException {
+    saveINodeDiffs(dir instanceof INodeDirectoryWithSnapshot?
+        ((INodeDirectoryWithSnapshot)dir).getDiffs(): null, out);
+  }
+  
+  public static void saveFileDiffList(final INodeFile file,
+      final DataOutputStream out) throws IOException {
+    saveINodeDiffs(file instanceof FileWithSnapshot?
+        ((FileWithSnapshot)file).getDiffs(): null, out);
+  }
+
+  public static FileDiffList loadFileDiffList(DataInputStream in,
+      FSImageFormat.Loader loader) throws IOException {
+    final int size = in.readInt();
+    if (size == -1) {
+      return null;
+    } else {
+      final FileDiffList diffs = new FileDiffList();
+      FileDiff posterior = null;
+      for(int i = 0; i < size; i++) {
+        final FileDiff d = loadFileDiff(posterior, in, loader);
+        diffs.addFirst(d);
+        posterior = d;
+      }
+      return diffs;
+    }
+  }
+
+  private static FileDiff loadFileDiff(FileDiff posterior, DataInputStream in,
+      FSImageFormat.Loader loader) throws IOException {
+    // 1. Read the full path of the Snapshot root to identify the Snapshot
+    Snapshot snapshot = findSnapshot(FSImageSerialization.readString(in),
+        loader.getFSDirectoryInLoading());
+
+    // 2. Load file size
+    final long fileSize = in.readLong();
+    
+    // 3. Load snapshotINode 
+    final INodeFile snapshotINode = in.readBoolean()?
+        (INodeFile) loader.loadINodeWithLocalName(true, in): null;
+    
+    return new FileDiff(snapshot, snapshotINode, posterior, fileSize);
+  }
+
-      INode created = findCreated(createdNodeName, postDiff.getChildrenDiff());
-      if (created != null) {
-        return created;
+      INode d = postDiff.getChildrenDiff().searchDeleted(createdNodeName);
+      if (d != null) {
+        return d;
-   * Search the given {@link ChildrenDiff} to find an inode matching the specific name.
-   * @param createdNodeName The name of the node for searching.
-   * @param diff The given {@link ChildrenDiff} where to search the node.
-   * @return The matched inode. Return null if no matched inode can be found.
-   */
-  private static INode findCreated(byte[] createdNodeName, ChildrenDiff diff) {
-    INode c = diff.searchCreated(createdNodeName);
-    INode d = diff.searchDeleted(createdNodeName);
-    if (c == null && d != null) {
-      // if an INode with the same name is only contained in the deleted
-      // list, then the node should be the snapshot copy of a deleted
-      // node, and the node in the created list should be its reference 
-      return d;
-    } else if (c != null && d != null) {
-      // in a posterior SnapshotDiff, if the created/deleted lists both
-      // contains nodes with the same name (c & d), there are two
-      // possibilities:
-      // 
-      // 1) c and d are used to represent a modification, and 
-      // 2) d indicates the deletion of the node, while c was originally
-      // contained in the created list of a later snapshot, but c was
-      // moved here because of the snapshot deletion.
-      // 
-      // For case 1), c and d should be both INodeFile and should share
-      // the same blockInfo list.
-      if (c.isFile() && INodeFile.isOfSameFile((INodeFile) c, (INodeFile) d)) {
-        return c;
-      } else {
-        return d;
-      }
-    }
-    return null;
-  }
-  
-  /**
-   * @param loader The {@link Loader} instance. Used to call the
-   *               {@link Loader#loadINode(DataInputStream)} method.
+   * @param loader The {@link Loader} instance.
-      byte[] deletedNodeName = new byte[in.readShort()];
-      in.readFully(deletedNodeName);
-      INode deleted = loader.loadINode(in);
-      deleted.setLocalName(deletedNodeName);
+      final INode deleted = loader.loadINodeWithLocalName(false, in);
-        int c = Collections.binarySearch(createdList, deletedNodeName);
+        int c = Collections.binarySearch(createdList, deleted.getLocalNameBytes());
-                  + DFSUtil.bytes2String(deletedNodeName)
+                  + deleted.getLocalName()
-    byte[] snapshotName = new byte[in.readShort()];
-    in.readFully(snapshotName);
-    final INodeDirectory rootNode = (INodeDirectory)loader.loadINode(in);
-    return new Snapshot(snapshotId, snapshotName, rootNode, parent);
+    INodeDirectory rootNode = (INodeDirectory)loader.loadINodeWithLocalName(
+        false, in);
+    return new Snapshot(snapshotId, rootNode, parent);
-   * @param snapshottableParent The snapshottable directory for loading.
+   * @param dir The snapshottable directory for loading.
-  public static void loadSnapshotDiffList(
-      INodeDirectoryWithSnapshot parentWithSnapshot, int numSnapshotDiffs,
-      DataInputStream in, FSImageFormat.Loader loader)
-      throws IOException {
-    for (int i = 0; i < numSnapshotDiffs; i++) {
-      DirectoryDiff diff = loadSnapshotDiff(parentWithSnapshot, in, loader);
-      parentWithSnapshot.getDiffs().addFirst(diff);
+  public static void loadDirectoryDiffList(INodeDirectory dir,
+      DataInputStream in, FSImageFormat.Loader loader) throws IOException {
+    final int size = in.readInt();
+    if (size != -1) {
+      INodeDirectoryWithSnapshot withSnapshot = (INodeDirectoryWithSnapshot)dir;
+      DirectoryDiffList diffs = withSnapshot.getDiffs();
+      for (int i = 0; i < size; i++) {
+        diffs.addFirst(loadDirectoryDiff(withSnapshot, in, loader));
+      }
-  private static INodeDirectory loadSnapshotINodeInSnapshotDiff(
+  private static INodeDirectory loadSnapshotINodeInDirectoryDiff(
-      if (in.readBoolean()) {
-        byte[] localName = new byte[in.readShort()];
-        in.readFully(localName);
-        INodeDirectory snapshotINode = (INodeDirectory) loader.loadINode(in);
-        snapshotINode.setLocalName(localName);
-        return snapshotINode;
-      }
+      return in.readBoolean()?
+          (INodeDirectory) loader.loadINodeWithLocalName(true, in): null;
-    return null;
-   * Load {@link SnapshotDiff} from fsimage.
+   * Load {@link DirectoryDiff} from fsimage.
-   * @return A {@link SnapshotDiff}.
+   * @return A {@link DirectoryDiff}.
-  private static DirectoryDiff loadSnapshotDiff(
+  private static DirectoryDiff loadDirectoryDiff(
-    // 1. Load SnapshotDiff#childrenSize
-    int childrenSize = in.readInt();
-    // 2. Read the full path of the Snapshot's Root, identify 
-    //    SnapshotDiff#Snapshot
+    // 1. Read the full path of the Snapshot root to identify the Snapshot
+
+    // 2. Load DirectoryDiff#childrenSize
+    int childrenSize = in.readInt();
-    // 3. Load SnapshotDiff#snapshotINode 
-    INodeDirectory snapshotINode = loadSnapshotINodeInSnapshotDiff(snapshot,
+    // 3. Load DirectoryDiff#snapshotINode 
+    INodeDirectory snapshotINode = loadSnapshotINodeInDirectoryDiff(snapshot,
