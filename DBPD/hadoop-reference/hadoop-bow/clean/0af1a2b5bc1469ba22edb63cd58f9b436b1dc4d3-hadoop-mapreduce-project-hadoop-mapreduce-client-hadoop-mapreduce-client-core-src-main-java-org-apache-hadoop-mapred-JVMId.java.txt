YARN-2312. Deprecated old ContainerId#getId API and updated MapReduce to use ContainerId#getContainerId instead. Contributed by Tsuyoshi OZAWA

-class JVMId extends ID {
+class JVMId {
-  JobID jobId;
+  final JobID jobId;
+  private long jvmId;
+  private static final char SEPARATOR = '_';
-  public JVMId(JobID jobId, boolean isMap, int id) {
-    super(id);
+  public JVMId(JobID jobId, boolean isMap, long id) {
+    this.jvmId = id;
-  public JVMId (String jtIdentifier, int jobId, boolean isMap, int id) {
+  public JVMId (String jtIdentifier, int jobId, boolean isMap, long id) {
+
+  @Override
-    if(o == null)
-      return false;
-    if(o.getClass().equals(this.getClass())) {
-      JVMId that = (JVMId)o;
-      return this.id==that.id
-        && this.isMap == that.isMap
-        && this.jobId.equals(that.jobId);
+    // Generated by IntelliJ IDEA 13.1.
+    if (this == o) {
+      return true;
-    else return false;
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+
+    JVMId jvmId1 = (JVMId) o;
+
+    if (isMap != jvmId1.isMap) {
+      return false;
+    }
+    if (jvmId != jvmId1.jvmId) {
+      return false;
+    }
+    if (!jobId.equals(jvmId1.jobId)) {
+      return false;
+    }
+
+    return true;
-  /**Compare TaskInProgressIds by first jobIds, then by tip numbers. Reduces are 
-   * defined as greater then maps.*/
-  public int compareTo(org.apache.hadoop.mapreduce.ID o) {
-    JVMId that = (JVMId)o;
+  public int hashCode() {
+    // Generated by IntelliJ IDEA 13.1.
+    int result = (isMap ? 1 : 0);
+    result = 31 * result + jobId.hashCode();
+    result = 31 * result + (int) (jvmId ^ (jvmId >>> 32));
+    return result;
+  }
+
+  /**
+   * Compare TaskInProgressIds by first jobIds, then by tip numbers. Reduces are
+   * defined as greater then maps.
+   **/
+  public int compareTo(JVMId that) {
-        return this.id - that.id;
+        return Long.valueOf(this.jvmId).compareTo(that.jvmId);
+   * This method does NOT override org.apache.hadoop.mapred.ID to accept 64-bit
+   * ID to support work-preserving RM restart.
+   * @return 64-bit JVM id.
+   */
+  public long getId() {
+    return jvmId;
+  }
+
+  /**
-                 append(idFormat.format(id));
+                 append(idFormat.format(jvmId));
-  
-  @Override
-  public int hashCode() {
-    return jobId.hashCode() * 11 + id;
-  }
-  
-  @Override
+
-    super.readFields(in);
+    this.jvmId = in.readLong();
-  @Override
-    super.write(out);
+    out.writeLong(jvmId);
