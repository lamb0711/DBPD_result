YARN-4571. Make app id/name available to the yarn authorizer provider for better auditing. (Jian He via wangda)

+import java.util.List;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
-  private final ConcurrentMap<PrivilegedEntity, Map<AccessType, AccessControlList>> allAcls =
-      new ConcurrentHashMap<>();
+  private final ConcurrentMap<PrivilegedEntity, Map<AccessType, AccessControlList>>
+      allAcls = new ConcurrentHashMap<>();
-
+  private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();;
+  private final ReentrantReadWriteLock.ReadLock readLock = lock.readLock();
+  private final ReentrantReadWriteLock.WriteLock writeLock =  lock.writeLock();
-  public void setPermission(PrivilegedEntity target,
-      Map<AccessType, AccessControlList> acls, UserGroupInformation ugi) {
-    allAcls.put(target, acls);
+  public void setPermission(List<Permission> permissions,
+      UserGroupInformation user) {
+    try {
+      writeLock.lock();
+      for (Permission perm : permissions) {
+        allAcls.put(perm.getTarget(), perm.getAcls());
+      }
+    } finally {
+      writeLock.unlock();
+    }
-  @Override
-  public boolean checkPermission(AccessType accessType,
+  private boolean checkPermissionInternal(AccessType accessType,
-      String parentQueueName = queueName.substring(0, queueName.lastIndexOf("."));
-      return checkPermission(accessType, new PrivilegedEntity(target.getType(),
-        parentQueueName), user);
+      String parentQueueName =
+          queueName.substring(0, queueName.lastIndexOf("."));
+      return checkPermissionInternal(accessType,
+          new PrivilegedEntity(target.getType(), parentQueueName), user);
+  public boolean checkPermission(AccessRequest accessRequest) {
+    try {
+      readLock.lock();
+      return checkPermissionInternal(accessRequest.getAccessType(),
+          accessRequest.getEntity(), accessRequest.getUser());
+    } finally {
+      readLock.unlock();
+    }
+  }
+
+  @Override
