YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)

+
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerRequestKey;
+
+
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
+    .TestUtils;
-  
-  final private Map<Priority, Resource> requestSpec = 
-    new TreeMap<Priority, Resource>(
-        new org.apache.hadoop.yarn.server.resourcemanager.resource.Priority.Comparator());
-  
-  final private Map<Priority, Map<String, ResourceRequest>> requests = 
-    new TreeMap<Priority, Map<String, ResourceRequest>>(
-        new org.apache.hadoop.yarn.server.resourcemanager.resource.Priority.Comparator());
-  
-  final Map<Priority, Set<Task>> tasks = 
-    new TreeMap<Priority, Set<Task>>(
-        new org.apache.hadoop.yarn.server.resourcemanager.resource.Priority.Comparator());
-  
-  final private Set<ResourceRequest> ask = 
-    new TreeSet<ResourceRequest>(
-        new org.apache.hadoop.yarn.api.records.ResourceRequest.ResourceRequestComparator());
-  final private Map<String, NodeManager> nodes = 
-    new HashMap<String, NodeManager>();
+  final private Map<SchedulerRequestKey, Resource> requestSpec =
+      new TreeMap<>();
+
+  final private Map<SchedulerRequestKey, Map<String, ResourceRequest>>
+      requests = new TreeMap<>();
+
+  final Map<SchedulerRequestKey, Set<Task>> tasks = new TreeMap<>();
+
+  final private Set<ResourceRequest> ask =
+      new TreeSet<>(
+          new org.apache.hadoop.yarn.api.records.ResourceRequest
+              .ResourceRequestComparator());
+
+  final private Map<String, NodeManager> nodes = new HashMap<>();
-  
+
-    Resource currentSpec = requestSpec.put(priority, capability);
+    addResourceRequestSpec(TestUtils.toSchedulerKey(priority.getPriority()),
+        capability);
+  }
+  public synchronized void addResourceRequestSpec(
+      SchedulerRequestKey schedulerKey, Resource capability) {
+    Resource currentSpec = requestSpec.put(schedulerKey, capability);
-      		"priority " + priority.getPriority() + " - " + currentSpec.getMemorySize());
+          "priority " + schedulerKey.getPriority().getPriority()
+          + " - " + currentSpec.getMemorySize());
-    Priority priority = task.getPriority();
-    Map<String, ResourceRequest> requests = this.requests.get(priority);
+    SchedulerRequestKey schedulerKey = task.getSchedulerKey();
+    Map<String, ResourceRequest> requests = this.requests.get(schedulerKey);
-      this.requests.put(priority, requests);
+      this.requests.put(schedulerKey, requests);
-        LOG.debug("Added priority=" + priority + " application="
-          + applicationId);
+        LOG.debug("Added priority=" + schedulerKey.getPriority()
+            + " application="+ applicationId);
-    final Resource capability = requestSpec.get(priority);
+    final Resource capability = requestSpec.get(schedulerKey);
-    Set<Task> tasks = this.tasks.get(priority);
+    Set<Task> tasks = this.tasks.get(schedulerKey);
-      this.tasks.put(priority, tasks);
+      this.tasks.put(schedulerKey, tasks);
-        applicationId + " at priority " + priority);
+        applicationId + " at priority " + schedulerKey.getPriority());
-      addResourceRequest(priority, requests, host, capability);
+      addResourceRequest(schedulerKey, requests, host, capability);
-      addResourceRequest(priority, requests, rack, capability);
+      addResourceRequest(schedulerKey, requests, rack, capability);
-    addResourceRequest(priority, requests, ResourceRequest.ANY, capability);
+    addResourceRequest(schedulerKey, requests, ResourceRequest.ANY, capability);
-    Set<Task> tasks = this.tasks.get(task.getPriority());
+    Set<Task> tasks = this.tasks.get(task.getSchedulerKey());
-    Resources.subtractFrom(used, requestSpec.get(task.getPriority()));
+    Resources.subtractFrom(used, requestSpec.get(task.getSchedulerKey()));
-      Priority priority, Map<String, ResourceRequest> requests, 
+      SchedulerRequestKey schedulerKey, Map<String, ResourceRequest> requests,
-            priority, resourceName, capability, 1);
+            schedulerKey.getPriority(), resourceName, capability, 1);
-    
-    if(LOG.isDebugEnabled()) {
+
+    if (LOG.isDebugEnabled()) {
-        + " priority=" + priority.getPriority()
-        + " resourceName=" + resourceName + " capability=" + capability
-        + " numContainers=" + request.getNumContainers()
-        + " #asks=" + ask.size());
+          + " priority=" + schedulerKey.getPriority().getPriority()
+          + " resourceName=" + resourceName + " capability=" + capability
+          + " numContainers=" + request.getNumContainers()
+          + " #asks=" + ask.size());
-    for (Priority priority : requests.keySet()) {
-      assign(priority, NodeType.NODE_LOCAL, containers);
-      assign(priority, NodeType.RACK_LOCAL, containers);
-      assign(priority, NodeType.OFF_SWITCH, containers);
+    for (SchedulerRequestKey schedulerKey: requests.keySet()) {
+      assign(schedulerKey, NodeType.NODE_LOCAL, containers);
+      assign(schedulerKey, NodeType.RACK_LOCAL, containers);
+      assign(schedulerKey, NodeType.OFF_SWITCH, containers);
-  private synchronized void assign(Priority priority, NodeType type, 
-      List<Container> containers) throws IOException, YarnException {
+  private synchronized void assign(SchedulerRequestKey schedulerKey,
+      NodeType type, List<Container> containers)
+      throws IOException, YarnException {
-      if (Resources.equals(requestSpec.get(priority), container.getResource())) { 
+      if (Resources.equals(requestSpec.get(schedulerKey),
+          container.getResource())) {
-        for (Iterator<Task> t=tasks.get(priority).iterator(); t.hasNext();) {
+        for (Iterator<Task> t=tasks.get(schedulerKey).iterator();
+             t.hasNext();) {
-            
+
-                " to task " + task.getTaskId() + " at priority " + priority + 
+                " to task " + task.getTaskId() + " at priority " +
+                schedulerKey.getPriority() +
-            updateResourceRequests(requests.get(priority), type, task);
+            updateResourceRequests(requests.get(schedulerKey), type, task);
