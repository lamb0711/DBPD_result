HDFS-4563. Update namespace/diskspace usage after deleting snapshots.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455396 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.NSQuotaExceededException;
+import org.apache.hadoop.hdfs.protocol.QuotaExceededException;
+import org.apache.hadoop.hdfs.server.namenode.Content;
+import org.apache.hadoop.hdfs.server.namenode.Content.CountsMap.Key;
-import org.apache.hadoop.hdfs.server.namenode.INode.Content.CountsMap.Key;
-    private int destroyCreatedList(
+    private void destroyCreatedList(
-      int removedNum = 0;
-        removedNum += c.destroyAndCollectBlocks(collectedBlocks);
-        // if c is also contained in the children list, remove it
+        c.destroyAndCollectBlocks(collectedBlocks);
+        // c should be contained in the children list, remove it
-      return removedNum;
-    private int destroyDeletedList(final BlocksMapUpdateInfo collectedBlocks) {
-      int removedNum  = 0;
+    private Quota.Counts destroyDeletedList(
+        final BlocksMapUpdateInfo collectedBlocks) {
+      Quota.Counts counts = Quota.Counts.newInstance();
-        removedNum += d.destroyAndCollectBlocks(collectedBlocks);
+        d.computeQuotaUsage(counts, false);
+        d.destroyAndCollectBlocks(collectedBlocks);
-      return removedNum;
+      return counts;
-    int combinePosteriorAndCollectBlocks(final INodeDirectory currentDir,
-        final DirectoryDiff posterior, final BlocksMapUpdateInfo collectedBlocks) {
-      return diff.combinePosterior(posterior.diff, new Diff.Processor<INode>() {
+    Quota.Counts combinePosteriorAndCollectBlocks(
+        final INodeDirectory currentDir, final DirectoryDiff posterior,
+        final BlocksMapUpdateInfo collectedBlocks) {
+      final Quota.Counts counts = Quota.Counts.newInstance();
+      diff.combinePosterior(posterior.diff, new Diff.Processor<INode>() {
-        public int process(INode inode) {
+        public void process(INode inode) {
-            return inode.destroyAndCollectBlocks(collectedBlocks);
+            inode.computeQuotaUsage(counts, false);
+            inode.destroyAndCollectBlocks(collectedBlocks);
-          return 0;
+      return counts;
-    int destroyAndCollectBlocks(INodeDirectory currentINode,
+    Quota.Counts destroyDiffAndCollectBlocks(INodeDirectory currentINode,
-      return diff.destroyDeletedList(collectedBlocks);      
+      // this diff has been deleted
+      Quota.Counts counts = Quota.Counts.newInstance();
+      counts.add(diff.destroyDeletedList(collectedBlocks));
+      return counts;
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
-          throws NSQuotaExceededException {
+          throws QuotaExceededException {
-      final INode snapshotCopy) throws NSQuotaExceededException {
+      final INode snapshotCopy) throws QuotaExceededException {
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
-  public int cleanSubtree(final Snapshot snapshot, Snapshot prior,
+  public Quota.Counts cleanSubtree(final Snapshot snapshot, Snapshot prior,
-          throws NSQuotaExceededException {
-    int n = 0;
+      throws QuotaExceededException {
+    Quota.Counts counts = Quota.Counts.newInstance();
-        n += lastDiff.diff.destroyCreatedList(this, collectedBlocks);
+        lastDiff.diff.destroyCreatedList(this, collectedBlocks);
-      n += getDiffs().deleteSnapshotDiff(snapshot, prior, this, 
-          collectedBlocks);
+      counts.add(getDiffs().deleteSnapshotDiff(snapshot, prior, this, 
+          collectedBlocks));
+      if (prior != null) {
+        DirectoryDiff priorDiff = this.getDiffs().getDiff(prior);
+        if (priorDiff != null) {
+          for (INode cNode : priorDiff.getChildrenDiff().getCreatedList()) {
+            counts.add(cNode.cleanSubtree(snapshot, null, collectedBlocks));
+          }
+        }
+      }
+    counts.add(cleanSubtreeRecursively(snapshot, prior, collectedBlocks));
-    n += cleanSubtreeRecursively(snapshot, prior, collectedBlocks);
-    return n;
+    if (isQuotaSet()) {
+      this.addSpaceConsumed2Cache(-counts.get(Quota.NAMESPACE),
+          -counts.get(Quota.DISKSPACE));
+    }
+    return counts;
-  public int destroyAndCollectBlocks(
+  public void destroyAndCollectBlocks(
-    int total = 0;
-      total += diff.destroyAndCollectBlocks(this, collectedBlocks);
+      diff.destroyDiffAndCollectBlocks(this, collectedBlocks);
-    total += diffs.clear();
-    total += super.destroyAndCollectBlocks(collectedBlocks);
-    return total;
+    diffs.clear();
+    super.destroyAndCollectBlocks(collectedBlocks);
