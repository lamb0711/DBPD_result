HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.

-        Long evictionTimeNs = Long.valueOf(0);
+        Long evictionTimeNs = (long) 0;
-          Entry<Long, ShortCircuitReplica> entry = 
+          Entry<Long, ShortCircuitReplica> entry =
-          long evictionTimeMs = 
+          long evictionTimeMs =
-            LOG.trace("CacheCleaner: purging " + replica + ": " + 
-                  StringUtils.getStackTrace(Thread.currentThread()));
+            LOG.trace("CacheCleaner: purging " + replica + ": " +
+                StringUtils.getStackTrace(Thread.currentThread()));
-            + "mmapped replicas; purged {} replicas.",
+                + "mmapped replicas; purged {} replicas.",
-  = new ScheduledThreadPoolExecutor(1, new ThreadFactoryBuilder().
-          setDaemon(true).setNameFormat("ShortCircuitCache_Cleaner").
-          build());
+      = new ScheduledThreadPoolExecutor(1, new ThreadFactoryBuilder().
+      setDaemon(true).setNameFormat("ShortCircuitCache_Cleaner").
+      build());
-          setDaemon(true).setNameFormat("ShortCircuitCache_SlotReleaser").
-          build());
+      setDaemon(true).setNameFormat("ShortCircuitCache_SlotReleaser").
+      build());
-  private final HashMap<ExtendedBlockId, Waitable<ShortCircuitReplicaInfo>> 
-      replicaInfoMap = new HashMap<ExtendedBlockId,
-          Waitable<ShortCircuitReplicaInfo>>();
+  private final HashMap<ExtendedBlockId, Waitable<ShortCircuitReplicaInfo>>
+      replicaInfoMap = new HashMap<>();
-  private final TreeMap<Long, ShortCircuitReplica> evictable =
-      new TreeMap<Long, ShortCircuitReplica>();
+  private final TreeMap<Long, ShortCircuitReplica> evictable = new TreeMap<>();
-      new TreeMap<Long, ShortCircuitReplica>();
+      new TreeMap<>();
-          "Replica %s reached a refCount of 0 without being purged", replica);
+            "Replica %s reached a refCount of 0 without being purged", replica);
-              "but was still evictable (evictableTimeNs = %d)",
-              replica, replica.getEvictableTimeNs());
+                "but was still evictable (evictableTimeNs = %d)",
+            replica, replica.getEvictableTimeNs());
-            " for %s)", replica.refCount, replica);
+                " for %s)", replica.refCount, replica);
-    Long evictionTimeNs = Long.valueOf(0);
+    Long evictionTimeNs = (long) 0;
-      Entry<Long, ShortCircuitReplica> entry = 
+      Entry<Long, ShortCircuitReplica> entry =
-      long evictionTimeMs = 
+      long evictionTimeMs =
-        String rationale = needMoreSpace ? "because we need more space" : 
+        String rationale = needMoreSpace ? "because we need more space" :
-       replica = evictableMmapped.firstEntry().getValue();
+        replica = evictableMmapped.firstEntry().getValue();
-       replica = evictable.firstEntry().getValue();
+        replica = evictable.firstEntry().getValue();
-          StringUtils.getStackTrace(Thread.currentThread()));
+            StringUtils.getStackTrace(Thread.currentThread()));
-            continue;
-      newWaitable = new Waitable<ShortCircuitReplicaInfo>(lock.newCondition());
+      newWaitable = new Waitable<>(lock.newCondition());
-            "exception.", info.getInvalidTokenException());
+          "exception.", info.getInvalidTokenException());
-        // indicating that both this cache and whoever requested the 
+        // indicating that both this cache and whoever requested the
-        replica.mmapData = Long.valueOf(Time.monotonicNow());
+        replica.mmapData = Time.monotonicNow();
-      Map<ExtendedBlockId, ShortCircuitReplica> replicas =
-          new HashMap<ExtendedBlockId, ShortCircuitReplica>();
-      Map<ExtendedBlockId, InvalidToken> failedLoads =
-          new HashMap<ExtendedBlockId, InvalidToken>();
+      Map<ExtendedBlockId, ShortCircuitReplica> replicas = new HashMap<>();
+      Map<ExtendedBlockId, InvalidToken> failedLoads = new HashMap<>();
-            replicaInfoMap.entrySet()) {
+          replicaInfoMap.entrySet()) {
-          + "failedLoads={}, evictable={}, evictableMmapped={}",
+              + "failedLoads={}, evictable={}, evictableMmapped={}",
-            evictable, evictableMmapped);
+          evictable, evictableMmapped);
-   * @param blockId        The block id and block pool id of the block we're 
+   * @param blockId        The block id and block pool id of the block we're
-   * @throws IOException   An exception if there was an error talking to 
+   * @throws IOException   An exception if there was an error talking to
-        DomainPeer peer, MutableBoolean usedPeer,
-        ExtendedBlockId blockId, String clientName) throws IOException {
+      DomainPeer peer, MutableBoolean usedPeer,
+      ExtendedBlockId blockId, String clientName) throws IOException {
-   * 
+   *
-  
+
