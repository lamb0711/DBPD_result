Revert "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang."

This reverts commit 412c4c9a342b73bf1c1a7f43ea91245cbf94d02d.

-  // diffMap maps snapshot diff op type to a list of diff ops.
-  // It's initially created based on the snapshot diff. Then the individual
-  // diff stored there maybe modified instead of copied by the distcp algorithm
-  // afterwards, for better performance.
-  //
-  private boolean isRdiff() {
-    return inputOptions.shouldUseRdiff();
-  }
-
-    final FileSystem srcFs = sourceDir.getFileSystem(conf);
-    final FileSystem tgtFs = targetDir.getFileSystem(conf);
-    final FileSystem snapshotDiffFs = isRdiff() ? tgtFs : srcFs;
-    final Path snapshotDiffDir = isRdiff() ? targetDir : sourceDir;
-
+    final FileSystem sfs = sourceDir.getFileSystem(conf);
+    final FileSystem tfs = targetDir.getFileSystem(conf);
-    if (!(srcFs instanceof DistributedFileSystem) ||
-        !(tgtFs instanceof DistributedFileSystem)) {
+    if (!(sfs instanceof DistributedFileSystem) ||
+        !(tfs instanceof DistributedFileSystem)) {
-
-    final DistributedFileSystem targetFs = (DistributedFileSystem) tgtFs;
+    final DistributedFileSystem targetFs = (DistributedFileSystem) tfs;
-      inputOptions.setSourcePaths(Arrays.asList(getSnapshotPath(sourceDir,
+      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,
-          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, from));
+          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, from));
-          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, to));
+          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, to));
-      if (isRdiff()) {
-        // If fromSnapshot isn't current dir then do a time check
-        if (!from.equals("")
-            && fromSnapshotStat.getModificationTime() < toSnapshotStat
-            .getModificationTime()) {
-          throw new HadoopIllegalArgumentException("Snapshot " + from
-              + " should be newer than " + to);
-        }
-      } else {
-        // If toSnapshot isn't current dir then do a time check
-        if(!to.equals("")
-            && fromSnapshotStat.getModificationTime() > toSnapshotStat
-            .getModificationTime()) {
-          throw new HadoopIllegalArgumentException("Snapshot " + to
-              + " should be newer than " + from);
-        }
+      // If toSnapshot isn't current dir then do a time check
+      if (!to.equals("")
+          && fromSnapshotStat.getModificationTime() > toSnapshotStat
+              .getModificationTime()) {
+        throw new HadoopIllegalArgumentException("Snapshot " + to
+            + " should be newer than " + from);
-      DiffInfo[] renameAndDeleteDiffs =
-          getRenameAndDeleteDiffsForSync(targetDir);
+      DiffInfo[] renameAndDeleteDiffs = getRenameAndDeleteDiffs(targetDir);
-      inputOptions.setSourcePaths(Arrays.asList(getSnapshotPath(sourceDir,
+      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,
-    Path ssDir = isRdiff()?
-        inputOptions.getTargetPath() : inputOptions.getSourcePaths().get(0);
-
+    List<Path> sourcePaths = inputOptions.getSourcePaths();
+    final Path sourceDir = sourcePaths.get(0);
-          (DistributedFileSystem) ssDir.getFileSystem(conf);
+          (DistributedFileSystem) sourceDir.getFileSystem(conf);
-      SnapshotDiffReport report = fs.getSnapshotDiffReport(ssDir,
+      SnapshotDiffReport report = fs.getSnapshotDiffReport(sourceDir,
+
-        SnapshotDiffReport.DiffType dt = entry.getType();
-        List<DiffInfo> list = diffMap.get(dt);
-        if (dt == SnapshotDiffReport.DiffType.MODIFY ||
-            dt == SnapshotDiffReport.DiffType.CREATE ||
-            dt == SnapshotDiffReport.DiffType.DELETE) {
+        List<DiffInfo> list = diffMap.get(entry.getType());
+
+        if (entry.getType() == SnapshotDiffReport.DiffType.MODIFY ||
+            entry.getType() == SnapshotDiffReport.DiffType.CREATE ||
+            entry.getType() == SnapshotDiffReport.DiffType.DELETE) {
-          list.add(new DiffInfo(source, null, dt));
-        } else if (dt == SnapshotDiffReport.DiffType.RENAME) {
+          list.add(new DiffInfo(source, null, entry.getType()));
+        } else if (entry.getType() == SnapshotDiffReport.DiffType.RENAME) {
-          list.add(new DiffInfo(source, target, dt));
+          list.add(new DiffInfo(source, target, entry.getType()));
-      DistCp.LOG.warn("Failed to compute snapshot diff on " + ssDir, e);
+      DistCp.LOG.warn("Failed to compute snapshot diff on " + sourceDir, e);
-  private Path getSnapshotPath(Path inputDir, String snapshotName) {
+  private Path getSourceSnapshotPath(Path sourceDir, String snapshotName) {
-      return inputDir;
+      return sourceDir;
-      return new Path(inputDir,
+      return new Path(sourceDir,
-      final String from = getSnapshotName(inputOptions.getFromSnapshot());
-          fs.getSnapshotDiffReport(path, from, "");
+          fs.getSnapshotDiffReport(path, inputOptions.getFromSnapshot(), "");
-      DistCp.LOG.warn("Failed to compute snapshot diff on " + path
-          + " at snapshot " + inputOptions.getFromSnapshot(), e);
+      DistCp.LOG.warn("Failed to compute snapshot diff on " + path, e);
-      Path tmpTarget = new Path(tmpDir, diff.getSource().getName());
+      Path tmpTarget = new Path(tmpDir, diff.source.getName());
-        tmpTarget = new Path(tmpDir,
-            diff.getSource().getName() + random.nextInt());
+        tmpTarget = new Path(tmpDir, diff.source.getName() + random.nextInt());
-      targetFs.rename(diff.getSource(), tmpTarget);
+      targetFs.rename(diff.source, tmpTarget);
-      if (diff.getTarget() != null) {
-        if (!targetFs.exists(diff.getTarget().getParent())) {
-          targetFs.mkdirs(diff.getTarget().getParent());
+      if (diff.target != null) {
+        if (!targetFs.exists(diff.target.getParent())) {
+          targetFs.mkdirs(diff.target.getParent());
-        targetFs.rename(diff.getTmp(), diff.getTarget());
+        targetFs.rename(diff.getTmp(), diff.target);
-  private DiffInfo[] getRenameAndDeleteDiffsForSync(Path targetDir) {
-    // NOTE: when HDFS-10263 is done, getRenameAndDeleteDiffsRdiff
-    // should be the same as getRenameAndDeleteDiffsFdiff. Specifically,
-    // we should just move the body of getRenameAndDeleteDiffsFdiff
-    // to here and remove both getRenameAndDeleteDiffsFdiff
-    // and getRenameAndDeleteDiffsDdiff.
-    if (isRdiff()) {
-      return getRenameAndDeleteDiffsRdiff(targetDir);
-    } else {
-      return getRenameAndDeleteDiffsFdiff(targetDir);
-    }
-  }
-
-  /**
-   * Get rename and delete diffs and add the targetDir as the prefix of their
-   * source and target paths.
-   */
-  private DiffInfo[] getRenameAndDeleteDiffsRdiff(Path targetDir) {
-    List<DiffInfo> renameDiffsList =
-        diffMap.get(SnapshotDiffReport.DiffType.RENAME);
-
-    // Prepare a renameDiffArray for translating deleted items below.
-    // Do a reversion here due to HDFS-10263.
-    List<DiffInfo> renameDiffsListReversed =
-        new ArrayList<DiffInfo>(renameDiffsList.size());
-    for (DiffInfo diff : renameDiffsList) {
-      renameDiffsListReversed.add(new DiffInfo(diff.getTarget(),
-          diff.getSource(), diff.getType()));
-    }
-    DiffInfo[] renameDiffArray =
-        renameDiffsListReversed.toArray(new DiffInfo[renameDiffsList.size()]);
-
-    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);
-
-    List<DiffInfo> renameAndDeleteDiff = new ArrayList<>();
-    // Traverse DELETE list, which we need to delete them in sync process.
-    // Use the renameDiffArray prepared to translate the path.
-    for (DiffInfo diff : diffMap.get(SnapshotDiffReport.DiffType.DELETE)) {
-      DiffInfo renameItem = getRenameItem(diff, renameDiffArray);
-      Path source;
-      if (renameItem != null) {
-        source = new Path(targetDir,
-            translateRenamedPath(diff.getSource(), renameItem));
-      } else {
-        source = new Path(targetDir, diff.getSource());
-      }
-      renameAndDeleteDiff.add(new DiffInfo(source, null,
-          SnapshotDiffReport.DiffType.DELETE));
-    }
-    for (DiffInfo diff : diffMap.get(SnapshotDiffReport.DiffType.RENAME)) {
-      // swap target and source here for Rdiff
-      Path source = new Path(targetDir, diff.getSource());
-      Path target = new Path(targetDir, diff.getTarget());
-      renameAndDeleteDiff.add(new DiffInfo(source, target, diff.getType()));
-    }
-    return renameAndDeleteDiff.toArray(
-        new DiffInfo[renameAndDeleteDiff.size()]);
-  }
-
-    /**
-   * Get rename and delete diffs and add the targetDir as the prefix of their
-   * source and target paths.
-   */
-  private DiffInfo[] getRenameAndDeleteDiffsFdiff(Path targetDir) {
+  private DiffInfo[] getRenameAndDeleteDiffs(Path targetDir) {
-      Path source = new Path(targetDir, diff.getSource());
-      renameAndDeleteDiff.add(new DiffInfo(source, diff.getTarget(),
+      Path source = new Path(targetDir, diff.source);
+      renameAndDeleteDiff.add(new DiffInfo(source, diff.target,
-      Path source = new Path(targetDir, diff.getSource());
-      Path target = new Path(targetDir, diff.getTarget());
+      Path source = new Path(targetDir, diff.source);
+      Path target = new Path(targetDir, diff.target);
-      if (diff.getSource().equals(renameItem.getSource())) {
+      if (diff.source.equals(renameItem.source)) {
-      } else if (isParentOf(renameItem.getSource(), diff.getSource())) {
+      } else if (isParentOf(renameItem.source, diff.source)) {
-   * For a given sourcePath, get its real path if it or its parent was renamed.
-   *
-   * For example, if we renamed dirX to dirY, and created dirY/fileX,
-   * the initial snapshot diff would be a CREATE snapshot diff that looks like
-   *   + dirX/fileX
-   * The rename snapshot diff looks like
-   *   R dirX dirY
-   *
-   * We convert the soucePath dirX/fileX to dirY/fileX here.
-   *
+   * For a given source path, get its target path based on the rename item.
-  private Path translateRenamedPath(Path sourcePath,
-      DiffInfo renameItem) {
-    if (sourcePath.equals(renameItem.getSource())) {
-      return renameItem.getTarget();
+  private Path getTargetPath(Path sourcePath, DiffInfo renameItem) {
+    if (sourcePath.equals(renameItem.source)) {
+      return renameItem.target;
-    String remain =
-        sb.substring(renameItem.getSource().toString().length() + 1);
-    return new Path(renameItem.getTarget(), remain);
+    String remain = sb.substring(renameItem.source.toString().length() + 1);
+    return new Path(renameItem.target, remain);
-   *
-   * For RDiff usage, the diff.getSource() is what we will use as its target
-   * path.
-   *
-  public ArrayList<DiffInfo> prepareDiffListForCopyListing() {
+  public ArrayList<DiffInfo> prepareDiffList() {
+
+    List<DiffInfo> renameDiffsList =
+        diffMap.get(SnapshotDiffReport.DiffType.RENAME);
+    DiffInfo[] renameDiffArray =
+        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);
+    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);
+
-    if (isRdiff()) {
-      for (DiffInfo diff : modifyAndCreateDiffs) {
-        diff.setTarget(diff.getSource());
-        finalListWithTarget.add(diff);
+    for (DiffInfo diff : modifyAndCreateDiffs) {
+      DiffInfo renameItem = getRenameItem(diff, renameDiffArray);
+      if (renameItem == null) {
+        diff.target = diff.source;
+      } else {
+        diff.target = getTargetPath(diff.source, renameItem);
-    } else {
-      List<DiffInfo> renameDiffsList =
-          diffMap.get(SnapshotDiffReport.DiffType.RENAME);
-      DiffInfo[] renameDiffArray =
-          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);
-      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);
-      for (DiffInfo diff : modifyAndCreateDiffs) {
-        DiffInfo renameItem = getRenameItem(diff, renameDiffArray);
-        if (renameItem == null) {
-          diff.setTarget(diff.getSource());
-        } else {
-          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));
-        }
-        finalListWithTarget.add(diff);
-      }
+      finalListWithTarget.add(diff);
-      if (isParentOf(newDir, diff.getTarget())) {
+      if (isParentOf(newDir, diff.target)) {
-        excludeList.add(new Path(prefix, diff.getTarget()).toUri().getPath());
+        excludeList.add(new Path(prefix, diff.target).toUri().getPath());
