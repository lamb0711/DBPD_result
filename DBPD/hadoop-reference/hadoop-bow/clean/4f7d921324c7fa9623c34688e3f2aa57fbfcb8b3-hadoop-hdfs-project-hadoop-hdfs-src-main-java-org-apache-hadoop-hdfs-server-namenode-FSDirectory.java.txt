HDFS-4446. Support file snapshots with diff lists.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1443825 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot;
-    // Remove the node from the namespace
-    final INode targetNode = removeLastINode(inodesInPath);
+    // check if target node exists
+    INode targetNode = inodesInPath.getLastINode();
-    // set the parent's modification time
-    final INode[] inodes = inodesInPath.getINodes();
-    final Snapshot latestSnapshot = inodesInPath.getLatestSnapshot();
-    final INodeDirectory parent = (INodeDirectory)inodes[inodes.length - 2];
-    parent.updateModificationTime(mtime, latestSnapshot);
-    final INode snapshotCopy = parent.getChild(targetNode.getLocalNameBytes(),
-        latestSnapshot);
-    // if snapshotCopy == targetNode, it means that the file is also stored in
-    // a snapshot so that the block should not be removed.
-    final int filesRemoved = snapshotCopy == targetNode? 0
-        : targetNode.destroySubtreeAndCollectBlocks(null, collectedBlocks);
+    // check latest snapshot
+    final Snapshot latestSnapshot = inodesInPath.getLatestSnapshot();
+    final INode snapshotCopy = ((INodeDirectory)inodesInPath.getINode(-2))
+        .getChild(targetNode.getLocalNameBytes(), latestSnapshot);
+    if (snapshotCopy == targetNode) {
+      // it is also in a snapshot, record modification before delete it
+      targetNode = targetNode.recordModification(latestSnapshot);
+    }
+
+    // Remove the node from the namespace
+    final INode removed = removeLastINode(inodesInPath);
+    Preconditions.checkState(removed == targetNode);
+
+    // set the parent's modification time
+    targetNode.getParent().updateModificationTime(mtime, latestSnapshot);
+
+    final int inodesRemoved = targetNode.destroySubtreeAndCollectBlocks(
+        null, collectedBlocks);
-    return filesRemoved;
+    return inodesRemoved;
-  public void replaceINodeFile(String path, INodeFile oldnode,
+  void replaceINodeFile(String path, INodeFile oldnode,
+  /** Replace an INodeFile and record modification for the latest snapshot. */
-    final INodeDirectory parent = oldnode.getParent();
+    INodeDirectory parent = oldnode.getParent();
-    oldnode.setParent(null);
-    parent.addChild(newnode, true, latest);
+    //cleanup the removed object
+    parent = removed.getParent(); //parent could be replaced.
+    removed.clearReferences();
+    if (removed instanceof FileWithSnapshot) {
+      final FileWithSnapshot withSnapshot = (FileWithSnapshot)removed;
+      if (withSnapshot.isEverythingDeleted()) {
+        withSnapshot.removeSelf();
+      }
+    }
+
+    parent.addChild(newnode, false, latest);
-      final ReadOnlyList<INode> contents = dirInode.getChildrenList(
-          inodesInPath.getPathSnapshot());
+      final ReadOnlyList<INode> contents = dirInode.getChildrenList(snapshot);
-       size = fileNode.computeFileSize(true);
-       replication = fileNode.getFileReplication();
+       size = fileNode.computeFileSize(true, snapshot);
+       replication = fileNode.getFileReplication(snapshot);
-        size = fileNode.computeFileSize(true);
-        replication = fileNode.getFileReplication();
+        size = fileNode.computeFileSize(true, snapshot);
+        replication = fileNode.getFileReplication(snapshot);
-            fileNode.getBlocks(), fileNode.computeFileSize(false),
+            fileNode.getBlocks(), fileNode.computeFileSize(false, snapshot),
