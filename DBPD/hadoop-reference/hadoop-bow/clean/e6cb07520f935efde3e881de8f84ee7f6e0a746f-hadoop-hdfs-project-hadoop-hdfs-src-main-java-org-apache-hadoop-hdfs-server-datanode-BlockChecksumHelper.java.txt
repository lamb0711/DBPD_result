HDFS-10460. Recompute block checksum for a particular range less than file size on the fly by reconstructing missed block. Contributed by Rakesh R

-        if (LOG.isDebugEnabled()) {
-          LOG.debug("block=" + getBlock() + ", bytesPerCRC=" + getBytesPerCRC()
-              + ", crcPerBlock=" + getCrcPerBlock() + ", md5out=" + md5out);
-        }
+        LOG.debug("block={}, bytesPerCRC={}, crcPerBlock={}, md5out={}",
+            getBlock(), getBytesPerCRC(), getCrcPerBlock(), md5out);
+    private final long requestedNumBytes;
-                                         StripedBlockInfo stripedBlockInfo)
+                                         StripedBlockInfo stripedBlockInfo,
+                                         long requestedNumBytes)
+      this.requestedNumBytes = requestedNumBytes;
+      long checksumLen = 0;
+          ExtendedBlock block = getInternalBlock(numDataUnits, idx);
+
-            recalculateChecksum(idx);
+            recalculateChecksum(idx, block.getNumBytes());
-              ExtendedBlock block = StripedBlockUtil.constructInternalBlock(
-                  blockGroup, ecPolicy.getCellSize(), numDataUnits, idx);
-              recalculateChecksum(idx);
+              recalculateChecksum(idx, block.getNumBytes());
+          checksumLen += block.getNumBytes();
+          if (checksumLen >= requestedNumBytes) {
+            break; // done with the computation, simply return.
+          }
+    private ExtendedBlock getInternalBlock(int numDataUnits, int idx) {
+      // Sets requested number of bytes in blockGroup which is required to
+      // construct the internal block for computing checksum.
+      long actualNumBytes = blockGroup.getNumBytes();
+      blockGroup.setNumBytes(requestedNumBytes);
+
+      ExtendedBlock block = StripedBlockUtil.constructInternalBlock(blockGroup,
+          ecPolicy.getCellSize(), numDataUnits, idx);
+
+      // Set back actualNumBytes value in blockGroup.
+      blockGroup.setNumBytes(actualNumBytes);
+      return block;
+    }
+
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("got reply from " + targetDatanode + ": md5=" + md5);
-        }
+        LOG.debug("got reply from datanode:{}, md5={}", targetDatanode, md5);
-     *          error index to be reconstrcuted and recalculate checksum.
+     *          error index to be reconstructed and recalculate checksum.
+     * @param blockLength
+     *          number of bytes in the block to compute checksum.
-    private void recalculateChecksum(int errBlkIndex) throws IOException {
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Recalculate checksum for the missing/failed block index "
-            + errBlkIndex);
-      }
+    private void recalculateChecksum(int errBlkIndex, long blockLength)
+        throws IOException {
+      LOG.debug("Recalculate checksum for the missing/failed block index {}",
+          errBlkIndex);
+
-          blockGroup, ecPolicy, blockIndices, datanodes, errIndices);
+              blockGroup, ecPolicy, blockIndices, datanodes, errIndices);
-          getDatanode().getErasureCodingWorker(), stripedReconInfo,
-          md5writer);
+              getDatanode().getErasureCodingWorker(), stripedReconInfo,
+              md5writer, blockLength);
-      setOrVerifyChecksumProperties(errBlkIndex, checksum.getBytesPerChecksum(),
-          crcPerBlock, checksum.getChecksumType());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Recalculated checksum for the block index " + errBlkIndex
-            + ": md5=" + checksumRecon.getMD5());
-      }
+      setOrVerifyChecksumProperties(errBlkIndex,
+          checksum.getBytesPerChecksum(), crcPerBlock,
+          checksum.getChecksumType());
+      LOG.debug("Recalculated checksum for the block index:{}, md5={}",
+          errBlkIndex, checksumRecon.getMD5());
-      if (LOG.isDebugEnabled()) {
-        if (blockIdx == 0) {
-          LOG.debug("set bytesPerCRC=" + getBytesPerCRC()
-              + ", crcPerBlock=" + getCrcPerBlock());
-        }
+      if (blockIdx == 0) {
+        LOG.debug("set bytesPerCRC={}, crcPerBlock={}", getBytesPerCRC(),
+            getCrcPerBlock());
