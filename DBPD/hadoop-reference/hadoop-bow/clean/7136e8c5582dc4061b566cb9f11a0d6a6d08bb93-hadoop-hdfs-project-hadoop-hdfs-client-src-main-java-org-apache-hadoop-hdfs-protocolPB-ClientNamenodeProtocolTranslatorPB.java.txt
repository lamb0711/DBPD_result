HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.

-import java.io.FileNotFoundException;
-import org.apache.hadoop.fs.FileAlreadyExistsException;
-import org.apache.hadoop.fs.ParentNotDirectoryException;
-import org.apache.hadoop.fs.UnresolvedLinkException;
-import org.apache.hadoop.hdfs.protocol.AlreadyBeingCreatedException;
-import org.apache.hadoop.hdfs.protocol.DSQuotaExceededException;
-import org.apache.hadoop.hdfs.protocol.NSQuotaExceededException;
-import org.apache.hadoop.hdfs.server.namenode.NotReplicatedYetException;
-import org.apache.hadoop.hdfs.server.namenode.SafeModeException;
-import org.apache.hadoop.security.AccessControlException;
-  static final GetServerDefaultsRequestProto VOID_GET_SERVER_DEFAULT_REQUEST = 
-  GetServerDefaultsRequestProto.newBuilder().build();
+  static final GetServerDefaultsRequestProto VOID_GET_SERVER_DEFAULT_REQUEST =
+      GetServerDefaultsRequestProto.newBuilder().build();
-  GetFsStatusRequestProto.newBuilder().build();
+      GetFsStatusRequestProto.newBuilder().build();
-  private final static SaveNamespaceRequestProto VOID_SAVE_NAMESPACE_REQUEST =
-  SaveNamespaceRequestProto.newBuilder().build();
-
-  private final static RollEditsRequestProto VOID_ROLLEDITS_REQUEST = 
-  RollEditsRequestProto.getDefaultInstance();
+  private final static RollEditsRequestProto VOID_ROLLEDITS_REQUEST =
+      RollEditsRequestProto.getDefaultInstance();
-  RefreshNodesRequestProto.newBuilder().build();
+      RefreshNodesRequestProto.newBuilder().build();
-  VOID_FINALIZE_UPGRADE_REQUEST =
+      VOID_FINALIZE_UPGRADE_REQUEST =
-  VOID_GET_DATA_ENCRYPTIONKEY_REQUEST =
+      VOID_GET_DATA_ENCRYPTIONKEY_REQUEST =
-  VOID_GET_STORAGE_POLICIES_REQUEST =
+      VOID_GET_STORAGE_POLICIES_REQUEST =
-  VOID_GET_EC_POLICIES_REQUEST = GetErasureCodingPoliciesRequestProto
+      VOID_GET_EC_POLICIES_REQUEST = GetErasureCodingPoliciesRequestProto
-  
+
-      throws AccessControlException, FileNotFoundException,
-      UnresolvedLinkException, IOException {
+      throws IOException {
-        PBHelperClient.convert(resp.getLocations()) : null;
+          PBHelperClient.convert(resp.getLocations()) : null;
-      boolean createParent, short replication, long blockSize, 
+      boolean createParent, short replication, long blockSize,
-      throws AccessControlException, AlreadyBeingCreatedException,
-      DSQuotaExceededException, FileAlreadyExistsException,
-      FileNotFoundException, NSQuotaExceededException,
-      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,
-      IOException {
+      throws IOException {
-    builder.addAllCryptoProtocolVersion(PBHelperClient.convert(supportedVersions));
+    builder.addAllCryptoProtocolVersion(
+        PBHelperClient.convert(supportedVersions));
-      throws IOException, UnresolvedLinkException {
+      throws IOException {
-      EnumSetWritable<CreateFlag> flag) throws AccessControlException,
-      DSQuotaExceededException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, IOException {
+      EnumSetWritable<CreateFlag> flag) throws IOException {
-        .setClientName(clientName).setFlag(PBHelperClient.convertCreateFlag(flag))
+        .setClientName(clientName).setFlag(
+            PBHelperClient.convertCreateFlag(flag))
-      HdfsFileStatus stat = (res.hasStat()) ? PBHelperClient.convert(res.getStat())
-          : null;
+      HdfsFileStatus stat = (res.hasStat()) ?
+          PBHelperClient.convert(res.getStat()) : null;
-      throws AccessControlException, DSQuotaExceededException,
-      FileNotFoundException, SafeModeException, UnresolvedLinkException,
-      IOException {
+      throws IOException {
-      throws AccessControlException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, IOException {
+      throws IOException {
-      throws AccessControlException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, IOException {
+      throws IOException {
-        req.setUsername(username);
+      req.setUsername(username);
-        req.setGroupname(groupname);
+      req.setGroupname(groupname);
-      String holder) throws AccessControlException, FileNotFoundException,
-        UnresolvedLinkException, IOException {
+      String holder) throws IOException {
-            .setFileId(fileId).build();
+        .setFileId(fileId).build();
-  
+
-      String[] favoredNodes)
-      throws AccessControlException, FileNotFoundException,
-      NotReplicatedYetException, SafeModeException, UnresolvedLinkException,
-      IOException {
+      String[] favoredNodes) throws IOException {
-    if (previous != null) 
+    if (previous != null)
-      DatanodeInfo[] excludes,
-      int numAdditionalNodes, String clientName) throws AccessControlException,
-      FileNotFoundException, SafeModeException, UnresolvedLinkException,
-      IOException {
+      DatanodeInfo[] excludes, int numAdditionalNodes, String clientName)
+      throws IOException {
-                          ExtendedBlock last, long fileId)
-      throws AccessControlException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, IOException {
+      ExtendedBlock last, long fileId) throws IOException {
-        .addAllBlocks(Arrays.asList(PBHelperClient.convertLocatedBlocks(blocks)))
+        .addAllBlocks(Arrays.asList(
+            PBHelperClient.convertLocatedBlocks(blocks)))
-  public boolean rename(String src, String dst) throws UnresolvedLinkException,
-      IOException {
+  public boolean rename(String src, String dst) throws IOException {
-  
+
-      throws AccessControlException, DSQuotaExceededException,
-      FileAlreadyExistsException, FileNotFoundException,
-      NSQuotaExceededException, ParentNotDirectoryException, SafeModeException,
-      UnresolvedLinkException, IOException {
+      throws IOException {
-  public void concat(String trg, String[] srcs) throws IOException,
-      UnresolvedLinkException {
+  public void concat(String trg, String[] srcs) throws IOException {
-  public boolean delete(String src, boolean recursive)
-      throws AccessControlException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, IOException {
-    DeleteRequestProto req = DeleteRequestProto.newBuilder().setSrc(src).setRecursive(recursive).build();
+  public boolean delete(String src, boolean recursive) throws IOException {
+    DeleteRequestProto req = DeleteRequestProto.newBuilder().setSrc(src)
+        .setRecursive(recursive).build();
-      throws AccessControlException, FileAlreadyExistsException,
-      FileNotFoundException, NSQuotaExceededException,
-      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,
-      IOException {
+      throws IOException {
-      boolean needLocation) throws AccessControlException,
-      FileNotFoundException, UnresolvedLinkException, IOException {
+      boolean needLocation) throws IOException {
-      
+
-  public void renewLease(String clientName) throws AccessControlException,
-      IOException {
+  public void renewLease(String clientName) throws IOException {
-    }  
+    }
-  public DatanodeStorageReport[] getDatanodeStorageReport(DatanodeReportType type)
-      throws IOException {
+  public DatanodeStorageReport[] getDatanodeStorageReport(
+      DatanodeReportType type) throws IOException {
-            .setType(PBHelperClient.convert(type)).build();
+        .setType(PBHelperClient.convert(type)).build();
-          rpcProxy.getDatanodeStorageReport(null, req).getDatanodeStorageReportsList());
+          rpcProxy.getDatanodeStorageReport(null, req)
+              .getDatanodeStorageReportsList());
-  public long getPreferredBlockSize(String filename) throws IOException,
-      UnresolvedLinkException {
+  public long getPreferredBlockSize(String filename) throws IOException {
-  public boolean setSafeMode(SafeModeAction action, boolean isChecked) throws IOException {
+  public boolean setSafeMode(SafeModeAction action, boolean isChecked)
+      throws IOException {
-        .setAction(PBHelperClient.convert(action)).setChecked(isChecked).build();
+        .setAction(PBHelperClient.convert(action))
+        .setChecked(isChecked).build();
-  
+
-  public long rollEdits() throws AccessControlException, IOException {
+  public long rollEdits() throws IOException {
-  public boolean restoreFailedStorage(String arg) 
-      throws AccessControlException, IOException{
+  public boolean restoreFailedStorage(String arg) throws IOException{
-  public RollingUpgradeInfo rollingUpgrade(RollingUpgradeAction action) throws IOException {
+  public RollingUpgradeInfo rollingUpgrade(RollingUpgradeAction action)
+      throws IOException {
-      final RollingUpgradeResponseProto proto = rpcProxy.rollingUpgrade(null, r);
+      final RollingUpgradeResponseProto proto =
+          rpcProxy.rollingUpgrade(null, r);
-    ListCorruptFileBlocksRequestProto.Builder req = 
-        ListCorruptFileBlocksRequestProto.newBuilder().setPath(path);   
-    if (cookie != null) 
+    ListCorruptFileBlocksRequestProto.Builder req =
+        ListCorruptFileBlocksRequestProto.newBuilder().setPath(path);
+    if (cookie != null)
-  public HdfsFileStatus getFileInfo(String src) throws AccessControlException,
-      FileNotFoundException, UnresolvedLinkException, IOException {
+  public HdfsFileStatus getFileInfo(String src) throws IOException {
-  public HdfsFileStatus getFileLinkInfo(String src)
-      throws AccessControlException, UnresolvedLinkException, IOException {
+  public HdfsFileStatus getFileLinkInfo(String src) throws IOException {
-      return result.hasFs() ?  
-          PBHelperClient.convert(rpcProxy.getFileLinkInfo(null, req).getFs()) : null;
+      return result.hasFs() ?
+          PBHelperClient.convert(rpcProxy.getFileLinkInfo(null, req).getFs()) :
+          null;
-  public ContentSummary getContentSummary(String path)
-      throws AccessControlException, FileNotFoundException,
-      UnresolvedLinkException, IOException {
+  public ContentSummary getContentSummary(String path) throws IOException {
-                       StorageType type)
-      throws AccessControlException, FileNotFoundException,
-      UnresolvedLinkException, IOException {
+      StorageType type) throws IOException {
-                    long lastBlockLength)
-      throws AccessControlException, FileNotFoundException,
-      UnresolvedLinkException, IOException {
+      long lastBlockLength) throws IOException {
-            .setFileId(fileId).build();
+        .setFileId(fileId).build();
-  public void setTimes(String src, long mtime, long atime)
-      throws AccessControlException, FileNotFoundException,
-      UnresolvedLinkException, IOException {
+  public void setTimes(String src, long mtime, long atime) throws IOException {
-      boolean createParent) throws AccessControlException,
-      FileAlreadyExistsException, FileNotFoundException,
-      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,
-      IOException {
+      boolean createParent) throws IOException {
-  public String getLinkTarget(String path) throws AccessControlException,
-      FileNotFoundException, IOException {
+  public String getLinkTarget(String path) throws IOException {
-      ExtendedBlock newBlock, DatanodeID[] newNodes, String[] storageIDs) throws IOException {
+      ExtendedBlock newBlock, DatanodeID[] newNodes, String[] storageIDs)
+      throws IOException {
-      GetDelegationTokenResponseProto resp = rpcProxy.getDelegationToken(null, req);
-      return resp.hasToken() ? PBHelperClient.convertDelegationToken(resp.getToken())
-          : null;
+      GetDelegationTokenResponseProto resp =
+          rpcProxy.getDelegationToken(null, req);
+      return resp.hasToken() ?
+          PBHelperClient.convertDelegationToken(resp.getToken()) : null;
-    RenewDelegationTokenRequestProto req = RenewDelegationTokenRequestProto.newBuilder().
-        setToken(PBHelperClient.convert(token)).
-        build();
+    RenewDelegationTokenRequestProto req =
+        RenewDelegationTokenRequestProto.newBuilder().
+            setToken(PBHelperClient.convert(token)).
+            build();
-    SetBalancerBandwidthRequestProto req = SetBalancerBandwidthRequestProto.newBuilder()
-        .setBandwidth(bandwidth)
-        .build();
+    SetBalancerBandwidthRequestProto req =
+        SetBalancerBandwidthRequestProto.newBuilder()
+            .setBandwidth(bandwidth)
+            .build();
-  
+
-     return rsp.hasDataEncryptionKey() ? 
+      return rsp.hasDataEncryptionKey() ?
-  
+
-  public boolean isFileClosed(String src) throws AccessControlException,
-      FileNotFoundException, UnresolvedLinkException, IOException {
+  public boolean isFileClosed(String src) throws IOException {
-  
+
-  
+
-    GetSnapshottableDirListingRequestProto req = 
+    GetSnapshottableDirListingRequestProto req =
-      
+
-      GetSnapshotDiffReportResponseProto result = 
+      GetSnapshotDiffReportResponseProto result =
-    
+
-    
+
-  public BatchedEntries<CacheDirectiveEntry>
-      listCacheDirectives(long prevId,
-          CacheDirectiveInfo filter) throws IOException {
+  public BatchedEntries<CacheDirectiveEntry> listCacheDirectives(long prevId,
+      CacheDirectiveInfo filter) throws IOException {
-        rpcProxy.listCacheDirectives(null,
-          ListCacheDirectivesRequestProto.newBuilder().
-            setPrevId(prevId).
-            setFilter(PBHelperClient.convert(filter)).
-            build()));
+          rpcProxy.listCacheDirectives(null,
+              ListCacheDirectivesRequestProto.newBuilder().
+                  setPrevId(prevId).
+                  setFilter(PBHelperClient.convert(filter)).
+                  build()));
-    AddCachePoolRequestProto.Builder builder = 
+    AddCachePoolRequestProto.Builder builder =
-    ModifyCachePoolRequestProto.Builder builder = 
+    ModifyCachePoolRequestProto.Builder builder =
-      rpcProxy.removeCachePool(null, 
+      rpcProxy.removeCachePool(null,
-            setPoolName(cachePoolName).build());
+              setPoolName(cachePoolName).build());
-    implements BatchedEntries<CachePoolEntry> {
-      private final ListCachePoolsResponseProto proto;
-    
+      implements BatchedEntries<CachePoolEntry> {
+    private final ListCachePoolsResponseProto proto;
+
-      
+
-    
+
-        rpcProxy.listCachePools(null,
-          ListCachePoolsRequestProto.newBuilder().
-            setPrevPoolName(prevKey).build()));
+          rpcProxy.listCachePools(null,
+              ListCachePoolsRequestProto.newBuilder().
+                  setPrevPoolName(prevKey).build()));
-    throws IOException {
+      throws IOException {
-      CreateEncryptionZoneRequestProto.newBuilder();
+        CreateEncryptionZoneRequestProto.newBuilder();
-  public EncryptionZone getEZForPath(String src)
-      throws IOException {
+  public EncryptionZone getEZForPath(String src) throws IOException {
-      ListEncryptionZonesRequestProto.newBuilder()
-          .setId(id)
-          .build();
+        ListEncryptionZonesRequestProto.newBuilder()
+            .setId(id)
+            .build();
-      return new BatchedListEntries<EncryptionZone>(elements,
-          response.getHasMore());
+      return new BatchedListEntries<>(elements, response.getHasMore());
-  
+
-  
+
-  public List<XAttr> listXAttrs(String src)
-      throws IOException {
-    ListXAttrsRequestProto.Builder builder = ListXAttrsRequestProto.newBuilder();
+  public List<XAttr> listXAttrs(String src) throws IOException {
+    ListXAttrsRequestProto.Builder builder =
+        ListXAttrsRequestProto.newBuilder();
-      for (ErasureCodingPolicyProto ecPolicyProto : response.getEcPoliciesList()) {
-        ecPolicies[i++] = PBHelperClient.convertErasureCodingPolicy(ecPolicyProto);
+      for (ErasureCodingPolicyProto ecPolicyProto :
+          response.getEcPoliciesList()) {
+        ecPolicies[i++] =
+            PBHelperClient.convertErasureCodingPolicy(ecPolicyProto);
-  public ErasureCodingPolicy getErasureCodingPolicy(String src) throws IOException {
-    GetErasureCodingPolicyRequestProto req = GetErasureCodingPolicyRequestProto.newBuilder()
-        .setSrc(src).build();
+  public ErasureCodingPolicy getErasureCodingPolicy(String src)
+      throws IOException {
+    GetErasureCodingPolicyRequestProto req =
+        GetErasureCodingPolicyRequestProto.newBuilder().setSrc(src).build();
-      GetErasureCodingPolicyResponseProto response = rpcProxy.getErasureCodingPolicy(
-          null, req);
+      GetErasureCodingPolicyResponseProto response =
+          rpcProxy.getErasureCodingPolicy(null, req);
-        return PBHelperClient.convertErasureCodingPolicy(response.getEcPolicy());
+        return PBHelperClient.convertErasureCodingPolicy(
+            response.getEcPolicy());
