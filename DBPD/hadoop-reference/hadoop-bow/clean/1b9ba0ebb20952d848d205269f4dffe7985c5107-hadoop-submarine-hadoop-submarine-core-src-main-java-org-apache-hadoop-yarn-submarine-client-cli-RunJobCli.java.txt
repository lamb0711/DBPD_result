SUBMARINE-47. Provide an implementation to parse configuration values from a YAML file for submarine run CLI. Contributed by Szilard Nemeth.

+import org.apache.commons.io.FileUtils;
+import org.apache.hadoop.yarn.submarine.client.cli.param.ParametersHolder;
+import org.apache.hadoop.yarn.submarine.client.cli.param.RunJobParameters.UnderscoreConverterPropertyUtils;
+import org.apache.hadoop.yarn.submarine.client.cli.param.yaml.YamlConfigFile;
+import org.apache.hadoop.yarn.submarine.client.cli.param.yaml.YamlParseException;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.constructor.Constructor;
+import java.io.File;
+import java.io.FileNotFoundException;
+  private static final String YAML_PARSE_FAILED = "Failed to parse " +
+      "YAML config";
-  public RunJobCli(ClientContext cliContext, JobSubmitter jobSubmitter,
+  RunJobCli(ClientContext cliContext, JobSubmitter jobSubmitter,
-    options = generateOptions();
+    this.options = generateOptions();
+    options.addOption(CliConstants.YAML_CONFIG, true,
+        "Config file (in YAML format)");
-        "Numnber of worker tasks of the job, by default it's 1");
+        "Number of worker tasks of the job, by default it's 1");
-        + "--tensorboard is speciied, quicklink to tensorboard instance will "
+        + "--tensorboard is specified, quicklink to tensorboard instance will "
-        "sepcified, pre-destributed keytab of which path specified by" +
+        "specified, pre-distributed keytab of which path specified by" +
-      parameters.updateParametersByParsedCommandline(cli, options,
-          clientContext);
+      ParametersHolder parametersHolder = createParametersHolder(cli);
+      parameters.updateParameters(parametersHolder, clientContext);
-      LOG.error("Exception in parse:", e.getMessage());
+      LOG.error("Exception in parse: {}", e.getMessage());
+  private ParametersHolder createParametersHolder(CommandLine cli) {
+    String yamlConfigFile =
+        cli.getOptionValue(CliConstants.YAML_CONFIG);
+    if (yamlConfigFile != null) {
+      YamlConfigFile yamlConfig = readYamlConfigFile(yamlConfigFile);
+      if (yamlConfig == null) {
+        throw new YamlParseException(String.format(
+            YAML_PARSE_FAILED + ", file is empty: %s", yamlConfigFile));
+      } else if (yamlConfig.getConfigs() == null) {
+        throw new YamlParseException(String.format(YAML_PARSE_FAILED +
+            ", config section should be defined, but it cannot be found in " +
+            "YAML file '%s'!", yamlConfigFile));
+      }
+      LOG.info("Using YAML configuration!");
+      return ParametersHolder.createWithCmdLineAndYaml(cli, yamlConfig);
+    } else {
+      LOG.info("Using CLI configuration!");
+      return ParametersHolder.createWithCmdLine(cli);
+    }
+  }
+
+  private YamlConfigFile readYamlConfigFile(String filename) {
+    Constructor constructor = new Constructor(YamlConfigFile.class);
+    constructor.setPropertyUtils(new UnderscoreConverterPropertyUtils());
+    try {
+      LOG.info("Reading YAML configuration from file: {}", filename);
+      Yaml yaml = new Yaml(constructor);
+      return yaml.loadAs(FileUtils.openInputStream(new File(filename)),
+          YamlConfigFile.class);
+    } catch (FileNotFoundException e) {
+      logExceptionOfYamlParse(filename, e);
+      throw new YamlParseException(YAML_PARSE_FAILED +
+          ", file does not exist!");
+    } catch (Exception e) {
+      logExceptionOfYamlParse(filename, e);
+      throw new YamlParseException(
+          String.format(YAML_PARSE_FAILED + ", details: %s", e.getMessage()));
+    }
+  }
+
+  private void logExceptionOfYamlParse(String filename, Exception e) {
+    LOG.error(String.format("Exception while parsing YAML file %s", filename),
+        e);
+  }
+
-      throws ParseException, IOException, YarnException, InterruptedException,
-      SubmarineException {
+      throws ParseException, IOException, YarnException, SubmarineException {
