HDDS-738. Removing REST protocol support from OzoneClient.
Contributed by Elek, Marton.

-import com.google.common.base.Preconditions;
+import java.io.IOException;
+import java.lang.reflect.Proxy;
+
-import org.apache.hadoop.ozone.client.rest.RestClient;
+import com.google.common.base.Preconditions;
+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;
-import java.io.IOException;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Proxy;
-
-import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_CLIENT_PROTOCOL;
-import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;
-import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_HTTP_ADDRESS_KEY;
-
- * Factory class to create different types of OzoneClients.
- * Based on <code>ozone.client.protocol</code>, it decides which
- * protocol to use for the communication.
- * Default value is
- * <code>org.apache.hadoop.ozone.client.rpc.RpcClient</code>.<br>
- * OzoneClientFactory constructs a proxy using
- * {@link OzoneClientInvocationHandler}
- * and creates OzoneClient instance with it.
- * {@link OzoneClientInvocationHandler} dispatches the call to
- * underlying {@link ClientProtocol} implementation.
+ * Factory class to create OzoneClients.
-    Class<? extends ClientProtocol> clazz = (Class<? extends ClientProtocol>)
-        config.getClass(OZONE_CLIENT_PROTOCOL, RpcClient.class);
-    return getClient(getClientProtocol(clazz, config), config);
+    return getClient(getClientProtocol(config), config);
-    return getClient(getClientProtocol(RpcClient.class, config),
-        config);
-  }
-
-  /**
-   * Returns an OzoneClient which will use REST protocol.
-   *
-   * @param omHost
-   *        hostname of OzoneManager to connect.
-   *
-   * @return OzoneClient
-   *
-   * @throws IOException
-   */
-  public static OzoneClient getRestClient(String omHost)
-      throws IOException {
-    Configuration config = new OzoneConfiguration();
-    int port = OmUtils.getOmRestPort(config);
-    return getRestClient(omHost, port, config);
-  }
-
-  /**
-   * Returns an OzoneClient which will use REST protocol.
-   *
-   * @param omHost
-   *        hostname of OzoneManager to connect.
-   *
-   * @param omHttpPort
-   *        HTTP port of OzoneManager.
-   *
-   * @return OzoneClient
-   *
-   * @throws IOException
-   */
-  public static OzoneClient getRestClient(String omHost, Integer omHttpPort)
-      throws IOException {
-    return getRestClient(omHost, omHttpPort, new OzoneConfiguration());
-  }
-
-  /**
-   * Returns an OzoneClient which will use REST protocol.
-   *
-   * @param omHost
-   *        hostname of OzoneManager to connect.
-   *
-   * @param omHttpPort
-   *        HTTP port of OzoneManager.
-   *
-   * @param config
-   *        Configuration to be used for OzoneClient creation
-   *
-   * @return OzoneClient
-   *
-   * @throws IOException
-   */
-  public static OzoneClient getRestClient(String omHost, Integer omHttpPort,
-                                          Configuration config)
-      throws IOException {
-    Preconditions.checkNotNull(omHost);
-    Preconditions.checkNotNull(omHttpPort);
-    Preconditions.checkNotNull(config);
-    config.set(OZONE_OM_HTTP_ADDRESS_KEY, omHost + ":" + omHttpPort);
-    return getRestClient(config);
-  }
-
-  /**
-   * Returns an OzoneClient which will use REST protocol.
-   *
-   * @param config
-   *        Configuration to be used for OzoneClient creation
-   *
-   * @return OzoneClient
-   *
-   * @throws IOException
-   */
-  public static OzoneClient getRestClient(Configuration config)
-      throws IOException {
-    Preconditions.checkNotNull(config);
-    return getClient(getClientProtocol(RestClient.class, config),
+    return getClient(getClientProtocol(config),
-   * @param protocolClass
-   *        Class object of the ClientProtocol.
-  private static ClientProtocol getClientProtocol(
-      Class<? extends ClientProtocol> protocolClass, Configuration config)
+  private static ClientProtocol getClientProtocol(Configuration config)
-      LOG.debug("Using {} as client protocol.",
-          protocolClass.getCanonicalName());
-      Constructor<? extends ClientProtocol> ctor =
-          protocolClass.getConstructor(Configuration.class);
-      return ctor.newInstance(config);
+      return new RpcClient(config);
-      final String message = "Couldn't create protocol " + protocolClass;
+      final String message = "Couldn't create RpcClient protocol";
-      } else if (e instanceof InvocationTargetException) {
-        throw new IOException(message,
-            ((InvocationTargetException) e).getTargetException());
