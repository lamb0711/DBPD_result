HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.PathBasedCacheDescriptor;
-  PathBasedCacheDescriptor addPathBasedCacheDirective(
+  long addPathBasedCacheDirective(
-      return (PathBasedCacheDescriptor) cacheEntry.getPayload();
+      return (Long) cacheEntry.getPayload();
-    PathBasedCacheDescriptor result = null;
+    Long result = null;
-      result = cacheManager.addDirective(directive, pc);
-      getEditLog().logAddPathBasedCacheDirective(directive,
+      if (directive.getId() != null) {
+        throw new IOException("addDirective: you cannot specify an ID " +
+            "for this operation.");
+      }
+      PathBasedCacheDirective effectiveDirective = 
+          cacheManager.addDirective(directive, pc);
+      getEditLog().logAddPathBasedCacheDirective(effectiveDirective,
+      result = effectiveDirective.getId();
-  void removePathBasedCacheDescriptor(Long id) throws IOException {
+  void modifyPathBasedCacheDirective(
+      PathBasedCacheDirective directive) throws IOException {
+    checkOperation(OperationCategory.WRITE);
+    final FSPermissionChecker pc = isPermissionEnabled ?
+        getPermissionChecker() : null;
+    boolean success = false;
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return;
+    }
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException(
+            "Cannot add PathBasedCache directive", safeMode);
+      }
+      cacheManager.modifyDirective(directive, pc);
+      getEditLog().logModifyPathBasedCacheDirective(directive,
+          cacheEntry != null);
+      success = true;
+    } finally {
+      writeUnlock();
+      if (success) {
+        getEditLog().logSync();
+      }
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "addPathBasedCacheDirective", null, null, null);
+      }
+      RetryCache.setState(cacheEntry, success);
+    }
+  }
+
+  void removePathBasedCacheDirective(Long id) throws IOException {
-      cacheManager.removeDescriptor(id, pc);
-      getEditLog().logRemovePathBasedCacheDescriptor(id, cacheEntry != null);
+      cacheManager.removeDirective(id, pc);
+      getEditLog().logRemovePathBasedCacheDirective(id, cacheEntry != null);
-        logAuditEvent(success, "removePathBasedCacheDescriptor", null, null,
+        logAuditEvent(success, "removePathBasedCacheDirective", null, null,
-  BatchedListEntries<PathBasedCacheDescriptor> listPathBasedCacheDescriptors(
-      long startId, String pool, String path) throws IOException {
+  BatchedListEntries<PathBasedCacheDirective> listPathBasedCacheDirectives(
+      long startId, PathBasedCacheDirective filter) throws IOException {
-    BatchedListEntries<PathBasedCacheDescriptor> results;
+    BatchedListEntries<PathBasedCacheDirective> results;
-          cacheManager.listPathBasedCacheDescriptors(startId, pool, path, pc);
+          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);
-        logAuditEvent(success, "listPathBasedCacheDescriptors", null, null,
+        logAuditEvent(success, "listPathBasedCacheDirectives", null, null,
