YARN-5264. Store all queue-specific information in FSQueue. (Yufei Gu via kasha)

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+  private static final Log LOG = LogFactory.getLog(FSQueue.class.getName());
-  public ResourceWeights getQueueWeight(String queue) {
+  private ResourceWeights getQueueWeight(String queue) {
-  public void setQueueWeight(String queue, ResourceWeights weight) {
-    queueWeights.put(queue, weight);
-  }
-  
-  public int getQueueMaxApps(String queue) {
+  @VisibleForTesting
+  int getQueueMaxApps(String queue) {
-  
-  public float getQueueMaxAMShare(String queue) {
+
+  @VisibleForTesting
+  float getQueueMaxAMShare(String queue) {
-  public Resource getMinResources(String queue) {
+  @VisibleForTesting
+  Resource getMinResources(String queue) {
-   * Set the maximum resource allocation for the given queue.
-   *
-   * @param queue the target queue
-   * @param maxResource the maximum resource allocation
-   */
-  void setMaxResources(String queue, Resource maxResource) {
-    maxQueueResources.put(queue, maxResource);
-  }
-
-  /**
-  public Resource getMaxResources(String queue) {
+  @VisibleForTesting
+  Resource getMaxResources(String queue) {
-  public Resource getMaxChildResources(String queue) {
+  @VisibleForTesting
+  Resource getMaxChildResources(String queue) {
-  /**
-   * Set the maximum resource allocation for the children of the given queue.
-   * Use of this method is primarily intended for testing purposes.
-   *
-   * @param queue the target queue
-   * @param maxResource the maximum resource allocation
-   */
-  void setMaxChildResources(String queue, Resource maxResource) {
-    maxChildQueueResources.put(queue, maxResource);
-  }
-
-  
-  public SchedulingPolicy getSchedulingPolicy(String queueName) {
+
+  @VisibleForTesting
+  SchedulingPolicy getSchedulingPolicy(String queueName) {
+
+  /**
+   * Initialize a {@link FSQueue} with queue-specific properties and its
+   * metrics.
+   * @param queue the FSQueue needed to be initialized
+   * @param scheduler the scheduler which the queue belonged to
+   */
+  public void initFSQueue(FSQueue queue, FairScheduler scheduler){
+    // Set queue-specific properties.
+    String name = queue.getName();
+    queue.setWeights(getQueueWeight(name));
+    queue.setMinShare(getMinResources(name));
+    queue.setMaxShare(getMaxResources(name));
+    queue.setMaxRunningApps(getQueueMaxApps(name));
+    queue.setMaxAMShare(getQueueMaxAMShare(name));
+    queue.setMaxChildQueueResource(getMaxChildResources(name));
+    try {
+      SchedulingPolicy policy = getSchedulingPolicy(name);
+      policy.initialize(scheduler.getClusterResource());
+      queue.setPolicy(policy);
+    } catch (AllocationConfigurationException ex) {
+      LOG.warn("Failed to set the scheduling policy "
+          + getDefaultSchedulingPolicy(), ex);
+    }
+
+    // Set queue metrics.
+    queue.getMetrics().setMinShare(getMinResources(name));
+    queue.getMetrics().setMaxShare(getMaxResources(name));
+    queue.getMetrics().setMaxApps(getQueueMaxApps(name));
+    queue.getMetrics().setSchedulingPolicy(getSchedulingPolicy(name).getName());
+  }
