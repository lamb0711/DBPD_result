Merge remote-tracking branch 'apache/trunk' into HDFS-7285

+import java.util.ArrayList;
-import java.util.Map;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-  private static final Map<String, String> internedNames = Maps.newHashMap();
+  private static final SerialNumberMap<String> NAME_MAP =
+      new SerialNumberMap<>();
+
+  public static int getNameSerialNumber(String name) {
+    return NAME_MAP.get(name);
+  }
+
+  public static String getName(int n) {
+    return NAME_MAP.get(n);
+  }
-   * Reads the existing extended attributes of an inode. If the 
-   * inode does not have an <code>XAttr</code>, then this method
-   * returns an empty list.
+   * Reads the extended attribute of an inode by name with prefix.
-   * Must be called while holding the FSDirectory read lock.
-   * @return List<XAttr> <code>XAttr</code> list. 
+   * @param prefixedName xAttr name with prefix
+   * @return the xAttr
-  public static List<XAttr> readINodeXAttrs(INode inode, int snapshotId) {
+  public static XAttr readINodeXAttrByPrefixedName(INode inode,
+      int snapshotId, String prefixedName) {
-    return f == null ? ImmutableList.<XAttr> of() : f.getXAttrs();
+    return f == null ? null : f.getXAttr(prefixedName);
-  
+
-    return f == null ? ImmutableList.<XAttr> of() : f.getXAttrs();
+    return f == null ? new ArrayList<XAttr>(0) : f.getXAttrs();
-    if (xAttrs == null || xAttrs.isEmpty()) {
-      if (inode.getXAttrFeature() != null) {
-        inode.removeXAttrFeature(snapshotId);
-      }
-      return;
-    }
-    // Dedupe the xAttr name and save them into a new interned list
-    List<XAttr> internedXAttrs = Lists.newArrayListWithCapacity(xAttrs.size());
-    for (XAttr xAttr : xAttrs) {
-      final String name = xAttr.getName();
-      String internedName = internedNames.get(name);
-      if (internedName == null) {
-        internedName = name;
-        internedNames.put(internedName, internedName);
-      }
-      XAttr internedXAttr = new XAttr.Builder()
-          .setName(internedName)
-          .setNameSpace(xAttr.getNameSpace())
-          .setValue(xAttr.getValue())
-          .build();
-      internedXAttrs.add(internedXAttr);
-    }
-    // Save the list of interned xattrs
-    ImmutableList<XAttr> newXAttrs = ImmutableList.copyOf(internedXAttrs);
-    inode.addXAttrFeature(new XAttrFeature(newXAttrs), snapshotId);
+    if (xAttrs == null || xAttrs.isEmpty()) {
+      return;
+    }
+    inode.addXAttrFeature(new XAttrFeature(xAttrs), snapshotId);
