Revert HADOOP-7227 from r1098792 since it broke HDFS and MR builds.

( svn merge -c -1098792 )


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1098840 13f79535-47bb-0310-9956-ffa450edef68

-  
-  //writableRpcVersion should be updated if there is a change
-  //in format of the rpc messages.
-  public static long writableRpcVersion = 1L;
-    private long clientVersion;
-    private int clientMethodsHash;
-    
-    //This could be different from static writableRpcVersion when received
-    //at server, if client is using a different version.
-    private long rpcVersion;
-      rpcVersion = writableRpcVersion;
-      if (method.getDeclaringClass().equals(VersionedProtocol.class)) {
-        //VersionedProtocol is exempted from version check.
-        clientVersion = 0;
-        clientMethodsHash = 0;
-      } else {
-        try {
-          this.clientVersion = method.getDeclaringClass().getField("versionID")
-              .getLong(method.getDeclaringClass());
-        } catch (NoSuchFieldException ex) {
-          throw new RuntimeException(ex);
-        } catch (IllegalAccessException ex) {
-          throw new RuntimeException(ex);
-        }
-        this.clientMethodsHash = ProtocolSignature.getFingerprint(method
-            .getDeclaringClass().getMethods());
-      }
-    
-    private long getProtocolVersion() {
-      return clientVersion;
-    }
-
-    private int getClientMethodsHash() {
-      return clientMethodsHash;
-    }
-    
-    /**
-     * Returns the rpc version used by the client.
-     * @return rpcVersion
-     */
-    public long getRpcVersion() {
-      return rpcVersion;
-    }
-      rpcVersion = in.readLong();
-      clientVersion = in.readLong();
-      clientMethodsHash = in.readInt();
-      out.writeLong(rpcVersion);
-      out.writeLong(clientVersion);
-      out.writeInt(clientMethodsHash);
-      buffer.append(", rpc version="+rpcVersion);
-      buffer.append(", client version="+clientVersion);
-      buffer.append(", methodsFingerPrint="+clientMethodsHash);
-    T proxy = (T) Proxy.newProxyInstance(protocol.getClassLoader(),
-        new Class[] { protocol }, new Invoker(protocol, addr, ticket, conf,
-            factory, rpcTimeout));
-    return new ProtocolProxy<T>(protocol, proxy, true);
+    T proxy = (T)Proxy.newProxyInstance
+      (protocol.getClassLoader(), new Class[] { protocol },
+       new Invoker(protocol, addr, ticket, conf, factory, rpcTimeout));
+    int[] serverMethods = null;
+    if (proxy instanceof VersionedProtocol) {
+      ProtocolSignature serverInfo = ((VersionedProtocol)proxy)
+        .getProtocolSignature(protocol.getName(), clientVersion,
+            ProtocolSignature.getFingerprint(protocol.getMethods()));
+      long serverVersion = serverInfo.getVersion();
+      if (serverVersion != clientVersion) {
+        throw new RPC.VersionMismatch(protocol.getName(), clientVersion, 
+                                      serverVersion);
+      }
+      serverMethods = serverInfo.getMethods();
+    }
+    return new ProtocolProxy<T>(protocol, proxy, serverMethods);
-        // Verify rpc version
-        if (call.getRpcVersion() != writableRpcVersion) {
-          // Client is using a different version of WritableRpc
-          throw new IOException(
-              "WritableRpc version mismatch, client side version="
-                  + call.getRpcVersion() + ", server side version="
-                  + writableRpcVersion);
-        }
-        
-        //Verify protocol version.
-        //Bypass the version check for VersionedProtocol
-        if (!method.getDeclaringClass().equals(VersionedProtocol.class)) {
-          long clientVersion = call.getProtocolVersion();
-          ProtocolSignature serverInfo = ((VersionedProtocol) instance)
-              .getProtocolSignature(protocol.getCanonicalName(), call
-                  .getProtocolVersion(), call.getClientMethodsHash());
-          long serverVersion = serverInfo.getVersion();
-          if (serverVersion != clientVersion) {
-            LOG.warn("Version mismatch: client version=" + clientVersion
-                + ", server version=" + serverVersion);
-            throw new RPC.VersionMismatch(protocol.getName(), clientVersion,
-                serverVersion);
-          }
-        }
-
