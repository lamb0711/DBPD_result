(recommit) HDFS-3089. Move FSDatasetInterface and the related classes to a package. 


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305603 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.hadoop.hdfs.server.datanode;
+package org.apache.hadoop.hdfs.server.datanode.fsdataset;
-import org.apache.hadoop.hdfs.server.datanode.fsdataset.FsVolumeSpi;
-import org.apache.hadoop.hdfs.server.datanode.fsdataset.LengthInputStream;
-import org.apache.hadoop.hdfs.server.datanode.fsdataset.ReplicaInputStreams;
-import org.apache.hadoop.hdfs.server.datanode.fsdataset.ReplicaOutputStreams;
+import org.apache.hadoop.hdfs.server.datanode.DataNode;
+import org.apache.hadoop.hdfs.server.datanode.DataStorage;
+import org.apache.hadoop.hdfs.server.datanode.FSDataset;
+import org.apache.hadoop.hdfs.server.datanode.Replica;
+import org.apache.hadoop.hdfs.server.datanode.ReplicaInPipelineInterface;
- * This is an interface for the underlying storage that stores blocks for
- * a data node. 
- * Examples are the FSDataset (which stores blocks on dirs)  and 
- * SimulatedFSDataset (which simulates data).
- *
+ * This is a service provider interface for the underlying storage that
+ * stores replicas for a data node.
+ * The default implementation stores replicas on local drives. 
-public interface FSDatasetInterface<V extends FsVolumeSpi>
-    extends FSDatasetMBean {
+public interface FsDatasetSpi<V extends FsVolumeSpi> extends FSDatasetMBean {
-   * A factory for creating FSDatasetInterface objects.
+   * A factory for creating {@link FsDatasetSpi} objects.
-  public abstract class Factory<D extends FSDatasetInterface<?>> {
+  public static abstract class Factory<D extends FsDatasetSpi<?>> {
-    /** Create a FSDatasetInterface object. */
-    public abstract D createFSDatasetInterface(
-        DataNode datanode, DataStorage storage, Configuration conf
-        ) throws IOException;
+    /** Create a new object. */
+    public abstract D newInstance(DataNode datanode, DataStorage storage,
+        Configuration conf) throws IOException;
-  public RollingLogs createRollingLogs(String bpid, String prefix) throws IOException;
+  public RollingLogs createRollingLogs(String bpid, String prefix
+      ) throws IOException;
-     /**
+  /**
-  public ReplicaInPipelineInterface createTemporary(ExtendedBlock b)
-  throws IOException;
+  public ReplicaInPipelineInterface createTemporary(ExtendedBlock b
+      ) throws IOException;
-  public ReplicaInPipelineInterface createRbw(ExtendedBlock b) throws IOException;
+  public ReplicaInPipelineInterface createRbw(ExtendedBlock b
+      ) throws IOException;
-      long newGS, long minBytesRcvd, long maxBytesRcvd)
-  throws IOException;
+      long newGS, long minBytesRcvd, long maxBytesRcvd) throws IOException;
-  public ReplicaInPipelineInterface append(ExtendedBlock b, 
-      long newGS, long expectedBlockLen) throws IOException;
+  public ReplicaInPipelineInterface append(ExtendedBlock b, long newGS,
+      long expectedBlockLen) throws IOException;
-  public ReplicaInPipelineInterface recoverAppend(ExtendedBlock b,
-      long newGS, long expectedBlockLen) throws IOException;
+  public ReplicaInPipelineInterface recoverAppend(ExtendedBlock b, long newGS,
+      long expectedBlockLen) throws IOException;
-  public void recoverClose(ExtendedBlock b,
-      long newGS, long expectedBlockLen) throws IOException;
+  public void recoverClose(ExtendedBlock b, long newGS, long expectedBlockLen
+      ) throws IOException;
-      
+
-   * @param stream The stream for the data file and checksum file
+   * @param outs The streams for the data file and checksum file
-  public void adjustCrcChannelPosition(ExtendedBlock b, ReplicaOutputStreams stream, 
-      int checksumSize) throws IOException;
+  public void adjustCrcChannelPosition(ExtendedBlock b,
+      ReplicaOutputStreams outs, int checksumSize) throws IOException;
-  public ReplicaRecoveryInfo initReplicaRecovery(RecoveringBlock rBlock)
-      throws IOException;
+  public ReplicaRecoveryInfo initReplicaRecovery(RecoveringBlock rBlock
+      ) throws IOException;
-   **/
-  public BlockLocalPathInfo getBlockLocalPathInfo(ExtendedBlock b) throws IOException;
+   */
+  public BlockLocalPathInfo getBlockLocalPathInfo(ExtendedBlock b
+      ) throws IOException;
