MAPREDUCE-6284. Add Task Attempt State API to MapReduce Application Master REST API. Contributed by Ryu Kobayashi.

+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import javax.servlet.ServletException;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.client.methods.HttpRequestBase;
+import org.apache.http.entity.StringEntity;
-        "Accept-Charset"));
-  
+        "Accept-Charset",
+        "Content-Type"));
+
+  /**
+   * HTTP methods.
+   */
+  private enum HTTP { GET, POST, HEAD, PUT, DELETE };
+
+  /**
+   * Empty Hamlet class.
+   */
+   * @param proxyHost the proxy host
+   * @param method the http method
-  private static void proxyLink(HttpServletRequest req, 
-      HttpServletResponse resp, URI link, Cookie c, String proxyHost)
-      throws IOException {
+  private static void proxyLink(final HttpServletRequest req,
+      final HttpServletResponse resp, final URI link, final Cookie c,
+      final String proxyHost, final HTTP method) throws IOException {
-    HttpGet httpGet = new HttpGet(link);
+
+    HttpRequestBase base = null;
+    if (method.equals(HTTP.GET)) {
+      base = new HttpGet(link);
+    } else if (method.equals(HTTP.PUT)) {
+      base = new HttpPut(link);
+
+      StringBuilder sb = new StringBuilder();
+      BufferedReader reader =
+          new BufferedReader(
+              new InputStreamReader(req.getInputStream(), "UTF-8"));
+      String line;
+      while ((line = reader.readLine()) != null) {
+        sb.append(line);
+      }
+
+      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));
+    } else {
+      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
+      return;
+    }
+
-        httpGet.setHeader(name, value);
+        base.setHeader(name, value);
-      httpGet.setHeader("Cookie",
+      base.setHeader("Cookie",
-      HttpResponse httpResp = client.execute(httpGet);
+      HttpResponse httpResp = client.execute(base);
-      httpGet.releaseConnection();
+      base.releaseConnection();
-  protected void doGet(HttpServletRequest req, HttpServletResponse resp) 
-  throws IOException{
+  protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+      throws ServletException, IOException {
+    methodAction(req, resp, HTTP.GET);
+  }
+
+  @Override
+  protected final void doPut(final HttpServletRequest req,
+      final HttpServletResponse resp) throws ServletException, IOException {
+    methodAction(req, resp, HTTP.PUT);
+  }
+
+  /**
+   * The action against the HTTP method.
+   * @param req the HttpServletRequest
+   * @param resp the HttpServletResponse
+   * @param method the HTTP method
+   * @throws ServletException
+   * @throws IOException
+   */
+  private void methodAction(final HttpServletRequest req,
+      final HttpServletResponse resp,
+      final HTTP method) throws ServletException, IOException {
-      proxyLink(req, resp, toFetch, c, getProxyHost());
+      proxyLink(req, resp, toFetch, c, getProxyHost(), method);
