HDFS-11605. Allow user to customize new erasure code policies. Contributed by Huafeng Wang

+import org.apache.hadoop.hdfs.protocol.IllegalECPolicyException;
+import java.util.List;
-
+import java.util.stream.Stream;
+  private static final byte USER_DEFINED_POLICY_START_ID = 32;
+   * All user defined policies sorted by name for fast querying.
+   */
+  private Map<String, ErasureCodingPolicy> userPoliciesByName;
+
+  /**
+   * All user defined policies sorted by ID for fast querying.
+   */
+  private Map<Byte, ErasureCodingPolicy> userPoliciesByID;
+
+  /**
-  private final Map<String, ErasureCodingPolicy> enabledPoliciesByName;
+  private Map<String, ErasureCodingPolicy> enabledPoliciesByName;
-  ErasureCodingPolicyManager(Configuration conf) {
+  private volatile static ErasureCodingPolicyManager instance = null;
+
+  public static ErasureCodingPolicyManager getInstance() {
+    if (instance == null) {
+      instance = new ErasureCodingPolicyManager();
+    }
+    return instance;
+  }
+
+  private ErasureCodingPolicyManager() {}
+
+  public void init(Configuration conf) {
+    this.loadPolicies(conf);
+  }
+
+  private void loadPolicies(Configuration conf) {
+    this.userPoliciesByID = new TreeMap<>();
+    this.userPoliciesByName = new TreeMap<>();
+   * Get all system defined policies and user defined policies.
+   * @return all policies
+   */
+  public List<ErasureCodingPolicy> getPolicies() {
+    return Stream.concat(SystemErasureCodingPolicies.getPolicies().stream(),
+      this.userPoliciesByID.values().stream()).collect(Collectors.toList());
+  }
+
+  /**
+   * Get a policy by policy ID, including system policy and user defined policy.
+   * @return ecPolicy, or null if not found
+   */
+  public ErasureCodingPolicy getByID(byte id) {
+    ErasureCodingPolicy policy = SystemErasureCodingPolicies.getByID(id);
+    if (policy == null) {
+      return this.userPoliciesByID.get(id);
+    }
+    return policy;
+  }
+
+  /**
+   * Get a policy by policy ID, including system policy and user defined policy.
+   * @return ecPolicy, or null if not found
+   */
+  public ErasureCodingPolicy getByName(String name) {
+    ErasureCodingPolicy policy = SystemErasureCodingPolicies.getByName(name);
+    if (policy == null) {
+      return this.userPoliciesByName.get(name);
+    }
+    return policy;
+  }
+
+  /**
+
+  public synchronized void addPolicy(ErasureCodingPolicy policy)
+      throws IllegalECPolicyException {
+    String assignedNewName = ErasureCodingPolicy.composePolicyName(
+        policy.getSchema(), policy.getCellSize());
+    for (ErasureCodingPolicy p : getPolicies()) {
+      if (p.getName().equals(assignedNewName)) {
+        throw new IllegalECPolicyException("The policy name already exists");
+      }
+      if (p.getSchema().equals(policy.getSchema()) &&
+          p.getCellSize() == policy.getCellSize()) {
+        throw new IllegalECPolicyException("A policy with same schema and " +
+            "cell size already exists");
+      }
+    }
+    policy.setName(assignedNewName);
+    policy.setId(getNextAvailablePolicyID());
+    this.userPoliciesByName.put(policy.getName(), policy);
+    this.userPoliciesByID.put(policy.getId(), policy);
+  }
+
+  private byte getNextAvailablePolicyID() {
+    byte currentId = this.userPoliciesByID.keySet().stream()
+        .max(Byte::compareTo).orElse(USER_DEFINED_POLICY_START_ID);
+    return (byte) (currentId + 1);
+  }
