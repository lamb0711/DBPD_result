HDFS-11778. Ozone: KSM: add getBucketInfo. Contributed by Nandakumar Vadivelu.

-import org.apache.hadoop.ksm.helpers.KsmBucketArgs;
+import org.apache.hadoop.ksm.helpers.KsmBucketInfo;
+import org.apache.hadoop.ozone.protocol.proto
+    .KeySpaceManagerProtocolProtos.BucketInfo;
+import java.io.IOException;
+
-   * @param args - KsmBucketArgs.
+   * @param bucketInfo - KsmBucketInfo.
-  public void createBucket(KsmBucketArgs args) throws KSMException {
-    Preconditions.checkNotNull(args);
+  public void createBucket(KsmBucketInfo bucketInfo) throws IOException {
+    Preconditions.checkNotNull(bucketInfo);
-    String volumeName = args.getVolumeName();
-    String bucketName = args.getBucketName();
+    String volumeName = bucketInfo.getVolumeName();
+    String bucketName = bucketInfo.getBucketName();
-      //bucket key: {volume/bucket}
-      metadataManager.put(bucketKey, args.getProtobuf().toByteArray());
+      metadataManager.put(bucketKey, bucketInfo.getProtobuf().toByteArray());
-    } catch (DBException ex) {
+    } catch (IOException | DBException ex) {
-      throw new KSMException(ex.getMessage(),
-          KSMException.ResultCodes.FAILED_INTERNAL_ERROR);
+      throw ex;
-}
+
+  /**
+   * Returns Bucket Information.
+   *
+   * @param volumeName - Name of the Volume.
+   * @param bucketName - Name of the Bucket.
+   */
+  @Override
+  public KsmBucketInfo getBucketInfo(String volumeName, String bucketName)
+      throws IOException {
+    Preconditions.checkNotNull(volumeName);
+    Preconditions.checkNotNull(bucketName);
+    metadataManager.readLock().lock();
+    try {
+      byte[] bucketKey = metadataManager.getBucketKey(volumeName, bucketName);
+      byte[] value = metadataManager.get(bucketKey);
+      if(value == null) {
+        LOG.error("bucket: {} not found in volume: {}.",
+            bucketName, volumeName);
+        throw new KSMException("Bucket not found",
+            KSMException.ResultCodes.FAILED_BUCKET_NOT_FOUND);
+      }
+      return KsmBucketInfo.getFromProtobuf(BucketInfo.parseFrom(value));
+    } catch (IOException | DBException ex) {
+      LOG.error("Exception while getting bucket info for bucket: {}",
+          bucketName, ex);
+      throw ex;
+    } finally {
+      metadataManager.readLock().unlock();
+    }
+  }
+}
