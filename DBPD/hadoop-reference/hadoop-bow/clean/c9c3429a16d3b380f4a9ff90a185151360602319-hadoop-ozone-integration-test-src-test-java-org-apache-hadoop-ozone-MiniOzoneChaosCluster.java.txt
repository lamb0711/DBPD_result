HDDS-1758. Add replication and key deletion tests to MiniOzoneChaosCluster. Contributed by Mukul Kumar Singh. (#1049)


+import org.apache.hadoop.hdds.protocol.DatanodeDetails;
-    NODES
+    NODES_RESTART,
+    NODES_SHUTDOWN
+  // Should the selected node be stopped or started.
+  private boolean shouldStop() {
+    return RandomUtils.nextBoolean();
+  }
+
-  private void failNodes() {
+  private void restartNodes() {
+      String failString = failureMode ? "Fast" : "Slow";
+      DatanodeDetails dn =
+          getHddsDatanodes().get(failedNodeIndex).getDatanodeDetails();
-        LOG.info("Restarting DataNodeIndex {}", failedNodeIndex);
+        LOG.info("{} Restarting DataNode: {}", failString, dn.getUuid());
-        LOG.info("Completed restarting DataNodeIndex {}", failedNodeIndex);
+        LOG.info("{} Completed restarting Datanode: {}", failString,
+            dn.getUuid());
+      } catch (Exception e) {
+
+      }
+    }
+  }
+
+  private void shutdownNodes() {
+    final int numNodesToFail = getNumberOfNodesToFail();
+    LOG.info("Will shutdown {} nodes to simulate failure", numNodesToFail);
+    for (int i = 0; i < numNodesToFail; i++) {
+      boolean shouldStop = shouldStop();
+      int failedNodeIndex = getNodeToFail();
+      String stopString = shouldStop ? "Stopping" : "Starting";
+      DatanodeDetails dn =
+          getHddsDatanodes().get(failedNodeIndex).getDatanodeDetails();
+      try {
+        LOG.info("{} DataNode {}", stopString, dn.getUuid());
+
+        if (shouldStop) {
+          shutdownHddsDatanode(failedNodeIndex);
+        } else {
+          restartHddsDatanode(failedNodeIndex, true);
+        }
+        LOG.info("Completed {} DataNode {}", stopString, dn.getUuid());
+
-    case NODES:
-      failNodes();
+    case NODES_RESTART:
+      restartNodes();
+      break;
+    case NODES_SHUTDOWN:
+      shutdownNodes();
-      conf.setTimeDuration(ScmConfigKeys.OZONE_SCM_STALENODE_INTERVAL, 5,
+      conf.setTimeDuration(ScmConfigKeys.OZONE_SCM_STALENODE_INTERVAL, 10,
+          TimeUnit.SECONDS);
+      conf.setTimeDuration(ScmConfigKeys.OZONE_SCM_DEADNODE_INTERVAL, 20,
+      conf.setInt("hdds.scm.replication.thread.interval", 10 * 1000);
+      conf.setInt("hdds.scm.replication.event.timeout", 20 * 1000);
