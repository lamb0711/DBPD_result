Merge all changes from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1516230 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.util.Tool;
+import org.apache.hadoop.util.ToolRunner;
-public class NNThroughputBenchmark {
+public class NNThroughputBenchmark implements Tool {
+    // Turn off minimum block size verification
+    config.setInt(DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY, 0);
-    // Start the NameNode
-    String[] argv = new String[] {};
-    nameNode = NameNode.createNameNode(argv, config);
-    nameNodeProto = nameNode.getRpcServer();
-    nameNode.stop();
+    if(nameNode != null)
+      nameNode.stop();
+  public static void runBenchmark(Configuration conf, List<String> args)
+      throws Exception {
+    NNThroughputBenchmark bench = null;
+    try {
+      bench = new NNThroughputBenchmark(conf);
+      bench.run(args.toArray(new String[]{}));
+    } finally {
+      if(bench != null)
+        bench.close();
+    }
+  }
+
-  public static void runBenchmark(Configuration conf, List<String> args) throws Exception {
+  @Override // Tool
+  public int run(String[] aArgs) throws Exception {
+    List<String> args = new ArrayList<String>(Arrays.asList(aArgs));
-    NNThroughputBenchmark bench = null;
+    // Start the NameNode
+    String[] argv = new String[] {};
+    nameNode = NameNode.createNameNode(argv, config);
+    nameNodeProto = nameNode.getRpcServer();
+
-      bench = new NNThroughputBenchmark(conf);
-        opStat = bench.new CreateFileStats(args);
+        opStat = new CreateFileStats(args);
-        opStat = bench.new OpenFileStats(args);
+        opStat = new OpenFileStats(args);
-        opStat = bench.new DeleteFileStats(args);
+        opStat = new DeleteFileStats(args);
-        opStat = bench.new FileStatusStats(args);
+        opStat = new FileStatusStats(args);
-        opStat = bench.new RenameFileStats(args);
+        opStat = new RenameFileStats(args);
-        opStat = bench.new BlockReportStats(args);
+        opStat = new BlockReportStats(args);
-        opStat = bench.new ReplicationStats(args);
+        opStat = new ReplicationStats(args);
-        opStat = bench.new CleanAllStats(args);
+        opStat = new CleanAllStats(args);
+    }
+    return 0;
+  }
+
+  public static void main(String[] args) throws Exception {
+    NNThroughputBenchmark bench = null;
+    try {
+      bench = new NNThroughputBenchmark(new HdfsConfiguration());
+      ToolRunner.run(bench, args);
-  public static void main(String[] args) throws Exception {
-    runBenchmark(new HdfsConfiguration(), 
-                  new ArrayList<String>(Arrays.asList(args)));
+  @Override // Configurable
+  public void setConf(Configuration conf) {
+    config = conf;
+  }
+
+  @Override // Configurable
+  public Configuration getConf() {
+    return config;
