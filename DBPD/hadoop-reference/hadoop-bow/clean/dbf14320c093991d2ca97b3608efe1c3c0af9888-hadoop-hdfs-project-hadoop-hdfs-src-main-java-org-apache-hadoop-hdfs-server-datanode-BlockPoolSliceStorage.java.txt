HDFS-6005. Simplify Datanode rollback and downgrade. (Contributed by Suresh Srinivas)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571431 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.Properties;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
+import com.google.common.annotations.VisibleForTesting;
-import com.google.common.annotations.VisibleForTesting;
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.Properties;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
-   * @param sd the block pool storage
+   * @param bpSdir the block pool storage
-          "Unexepcted blockpoolID " + bpid + " . Expected " + blockpoolID);
+          "Unexpected blockpoolID " + bpid + ". Expected " + blockpoolID);
-   * @param dn DataNode to which this storage belongs to
-    } else if (StartupOption.isRollingUpgradeRollback(startOpt)) {
-      File trashRoot = getTrashRootDir(sd);
-      int filesRestored =
-          trashRoot.exists() ? restoreBlockFilesFromTrash(trashRoot) : 0;
-      LOG.info("Restored " + filesRestored + " block files from trash.");
+    } else {
+      // Restore all the files in the trash. The restored files are retained
+      // during rolling upgrade rollback. They are deleted during rolling
+      // upgrade downgrade.
+      int restored = restoreBlockFilesFromTrash(getTrashRootDir(sd));
+      LOG.info("Restored " + restored + " block files from trash.");
-    
-    // 2. Rename <SD>/curernt/<bpid>/current to <SD>/curernt/<bpid>/previous.tmp
+    // 2. Rename <SD>/current/<bpid>/current to
+    //    <SD>/current/<bpid>/previous.tmp
-    // 4.rename <SD>/curernt/<bpid>/previous.tmp to <SD>/curernt/<bpid>/previous
+    // 4.rename <SD>/current/<bpid>/previous.tmp to
+    // <SD>/current/<bpid>/previous
-   *
-   * @param trashRoot
-   * @throws IOException 
-  private int restoreBlockFilesFromTrash(File trashRoot) throws IOException {
+  private int restoreBlockFilesFromTrash(File trashRoot)
+      throws  IOException {
-    File restoreDirectory = null;
+    File[] children = trashRoot.exists() ? trashRoot.listFiles() : null;
+    if (children == null) {
+      return 0;
+    }
-    for (File child : trashRoot.listFiles()) {
+    File restoreDirectory = null;
+    for (File child : children) {
-
+    FileUtil.fullyDelete(trashRoot);
-   * 
-   * @param bpRoot
-   * @return
-   * @param blockFile
-   * @param blockFile
-  public void emptyTrash() {
+  public void restoreTrash() {
-      FileUtil.fullyDelete(getTrashRootDir(sd));
+      File trashRoot = getTrashRootDir(sd);
+      try {
+        restoreBlockFilesFromTrash(trashRoot);
+        FileUtil.fullyDelete(getTrashRootDir(sd));
+      } catch (IOException ioe) {
+        LOG.warn("Restoring trash failed for storage directory " + sd);
+      }
+
+  /** trash is enabled if at least one storage directory contains trash root */
+  @VisibleForTesting
+  public boolean trashEnabled() {
+    for (StorageDirectory sd : storageDirs) {
+      if (getTrashRootDir(sd).exists()) {
+        return true;
+      }
+    }
+    return false;
+  }
