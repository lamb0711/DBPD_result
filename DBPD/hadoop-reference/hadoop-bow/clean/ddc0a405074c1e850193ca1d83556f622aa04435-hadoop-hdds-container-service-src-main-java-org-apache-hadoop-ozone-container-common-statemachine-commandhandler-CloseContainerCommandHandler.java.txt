HDDS-896. Handle over replicated containers in SCM.
Contributed by Nandakumar.

-import com.google.protobuf.InvalidProtocolBufferException;
+import org.apache.hadoop.ozone.protocol.commands.CloseContainerCommand;
+    LOG.debug("Processing Close Container command.");
+    invocationCount++;
+    final long startTime = Time.monotonicNow();
+    final DatanodeDetails datanodeDetails = context.getParent()
+        .getDatanodeDetails();
+    final CloseContainerCommandProto closeCommand =
+        ((CloseContainerCommand)command).getProto();
+    final ContainerController controller = ozoneContainer.getController();
+    final long containerId = closeCommand.getContainerID();
-      LOG.debug("Processing Close Container command.");
-      invocationCount++;
-      final long startTime = Time.monotonicNow();
-      final DatanodeDetails datanodeDetails = context.getParent()
-          .getDatanodeDetails();
-      final CloseContainerCommandProto closeCommand =
-          CloseContainerCommandProto.parseFrom(command.getProtoBufMessage());
-      final ContainerController controller = ozoneContainer.getController();
-      final long containerId = closeCommand.getContainerID();
-      try {
-        final Container container = controller.getContainer(containerId);
+      final Container container = controller.getContainer(containerId);
-        if (container == null) {
-          LOG.error("Container #{} does not exist in datanode. "
-              + "Container close failed.", containerId);
-          return;
-        }
-
-        // Move the container to CLOSING state
-        controller.markContainerForClose(containerId);
-
-        // If the container is part of open pipeline, close it via write channel
-        if (ozoneContainer.getWriteChannel()
-            .isExist(closeCommand.getPipelineID())) {
-          if (closeCommand.getForce()) {
-            LOG.warn("Cannot force close a container when the container is" +
-                " part of an active pipeline.");
-            return;
-          }
-          ContainerCommandRequestProto request =
-              getContainerCommandRequestProto(datanodeDetails,
-                  closeCommand.getContainerID());
-          ozoneContainer.getWriteChannel().submitRequest(
-              request, closeCommand.getPipelineID());
-          return;
-        }
-        // If we reach here, there is no active pipeline for this container.
-        if (!closeCommand.getForce()) {
-          // QUASI_CLOSE the container.
-          controller.quasiCloseContainer(containerId);
-        } else {
-          // SCM told us to force close the container.
-          controller.closeContainer(containerId);
-        }
-      } catch (NotLeaderException e) {
-        LOG.debug("Follower cannot close container #{}.", containerId);
-      } catch (IOException e) {
-        LOG.error("Can't close container #{}", containerId, e);
-      } finally {
-        long endTime = Time.monotonicNow();
-        totalTime += endTime - startTime;
+      if (container == null) {
+        LOG.error("Container #{} does not exist in datanode. "
+            + "Container close failed.", containerId);
+        return;
-    } catch (InvalidProtocolBufferException ex) {
-      LOG.error("Exception while closing container", ex);
+
+      // Move the container to CLOSING state
+      controller.markContainerForClose(containerId);
+
+      // If the container is part of open pipeline, close it via write channel
+      if (ozoneContainer.getWriteChannel()
+          .isExist(closeCommand.getPipelineID())) {
+        if (closeCommand.getForce()) {
+          LOG.warn("Cannot force close a container when the container is" +
+              " part of an active pipeline.");
+          return;
+        }
+        ContainerCommandRequestProto request =
+            getContainerCommandRequestProto(datanodeDetails,
+                closeCommand.getContainerID());
+        ozoneContainer.getWriteChannel().submitRequest(
+            request, closeCommand.getPipelineID());
+        return;
+      }
+      // If we reach here, there is no active pipeline for this container.
+      if (!closeCommand.getForce()) {
+        // QUASI_CLOSE the container.
+        controller.quasiCloseContainer(containerId);
+      } else {
+        // SCM told us to force close the container.
+        controller.closeContainer(containerId);
+      }
+    } catch (NotLeaderException e) {
+      LOG.debug("Follower cannot close container #{}.", containerId);
+    } catch (IOException e) {
+      LOG.error("Can't close container #{}", containerId, e);
+    } finally {
+      long endTime = Time.monotonicNow();
+      totalTime += endTime - startTime;
