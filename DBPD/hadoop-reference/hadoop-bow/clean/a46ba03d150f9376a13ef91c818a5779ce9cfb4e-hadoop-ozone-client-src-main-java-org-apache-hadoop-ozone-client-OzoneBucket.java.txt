HDDS-1913. Fix OzoneBucket and RpcClient APIS for acl. (#1257)


+import org.apache.hadoop.ozone.security.acl.OzoneObj;
+import org.apache.hadoop.ozone.security.acl.OzoneObjInfo;
-  /**
-   * Bucket ACLs.
-   */
-  private List<OzoneAcl> acls;
-  @SuppressWarnings("parameternumber")
-  public OzoneBucket(Configuration conf, ClientProtocol proxy,
-                     String volumeName, String bucketName,
-                     List<OzoneAcl> acls, StorageType storageType,
-                     Boolean versioning, long creationTime,
-                     Map<String, String> metadata,
-                     String encryptionKeyName) {
+  private OzoneObj ozoneObj;
+
+
+  private OzoneBucket(Configuration conf, String volumeName,
+      String bucketName, ReplicationFactor defaultReplication,
+      ReplicationType defaultReplicationType, ClientProtocol proxy) {
-    this.proxy = proxy;
-    this.acls = acls;
+    if (defaultReplication == null) {
+      this.defaultReplication = ReplicationFactor.valueOf(conf.getInt(
+          OzoneConfigKeys.OZONE_REPLICATION,
+          OzoneConfigKeys.OZONE_REPLICATION_DEFAULT));
+    } else {
+      this.defaultReplication = defaultReplication;
+    }
+
+    if (defaultReplicationType == null) {
+      this.defaultReplicationType = ReplicationType.valueOf(conf.get(
+          OzoneConfigKeys.OZONE_REPLICATION_TYPE,
+          OzoneConfigKeys.OZONE_REPLICATION_TYPE_DEFAULT));
+    } else {
+      this.defaultReplicationType = defaultReplicationType;
+    }
+    this.proxy = proxy;
+    this.ozoneObj = OzoneObjInfo.Builder.newBuilder()
+        .setBucketName(bucketName)
+        .setVolumeName(volumeName)
+        .setResType(OzoneObj.ResourceType.BUCKET)
+        .setStoreType(OzoneObj.StoreType.OZONE).build();
+  }
+  @SuppressWarnings("parameternumber")
+  public OzoneBucket(Configuration conf, ClientProtocol proxy,
+      String volumeName, String bucketName, StorageType storageType,
+      Boolean versioning, long creationTime, Map<String, String> metadata,
+      String encryptionKeyName) {
+    this(conf, volumeName, bucketName, null, null, proxy);
-    this.defaultReplication = ReplicationFactor.valueOf(conf.getInt(
-        OzoneConfigKeys.OZONE_REPLICATION,
-        OzoneConfigKeys.OZONE_REPLICATION_DEFAULT));
-    this.defaultReplicationType = ReplicationType.valueOf(conf.get(
-        OzoneConfigKeys.OZONE_REPLICATION_TYPE,
-        OzoneConfigKeys.OZONE_REPLICATION_TYPE_DEFAULT));
-   * @param acls ACLs associated with the bucket.
-                     String volumeName, String bucketName,
-                     List<OzoneAcl> acls, StorageType storageType,
-                     Boolean versioning, long creationTime,
-                     Map<String, String> metadata) {
-    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
-    this.proxy = proxy;
-    this.volumeName = volumeName;
-    this.name = bucketName;
-    this.acls = acls;
+      String volumeName, String bucketName, StorageType storageType,
+      Boolean versioning, long creationTime, Map<String, String> metadata) {
+    this(conf, volumeName, bucketName, null, null, proxy);
-    this.defaultReplication = ReplicationFactor.valueOf(conf.getInt(
-        OzoneConfigKeys.OZONE_REPLICATION,
-        OzoneConfigKeys.OZONE_REPLICATION_DEFAULT));
-    this.defaultReplicationType = ReplicationType.valueOf(conf.get(
-        OzoneConfigKeys.OZONE_REPLICATION_TYPE,
-        OzoneConfigKeys.OZONE_REPLICATION_TYPE_DEFAULT));
-      ReplicationType defaultReplicationType,
-      List<OzoneAcl> acls, StorageType storageType, Boolean versioning,
-      long creationTime) {
+      ReplicationType defaultReplicationType, StorageType storageType,
+      Boolean versioning, long creationTime) {
-    this.acls = acls;
+    this.ozoneObj = OzoneObjInfo.Builder.newBuilder()
+        .setBucketName(name)
+        .setVolumeName(volumeName)
+        .setResType(OzoneObj.ResourceType.BUCKET)
+        .setStoreType(OzoneObj.StoreType.OZONE).build();
+
-  public List<OzoneAcl> getAcls() {
-    return acls;
+  public List<OzoneAcl> getAcls() throws IOException {
+    return proxy.getAcl(ozoneObj);
-   * @param addAcls ACLs to be added
+   * @param addAcl ACL to be added
+   * @return true - if acl is successfully added, false if acl already exists
+   * for the bucket.
-  public void addAcls(List<OzoneAcl> addAcls) throws IOException {
-    proxy.addBucketAcls(volumeName, name, addAcls);
-    addAcls.stream().filter(acl -> !acls.contains(acl)).forEach(
-        acls::add);
+  public boolean addAcls(OzoneAcl addAcl) throws IOException {
+    return proxy.addAcl(ozoneObj, addAcl);
-   * @param removeAcls ACLs to be removed
+   * @return true - if acl is successfully removed, false if acl to be
+   * removed does not exist for the bucket.
-  public void removeAcls(List<OzoneAcl> removeAcls) throws IOException {
-    proxy.removeBucketAcls(volumeName, name, removeAcls);
-    acls.removeAll(removeAcls);
+  public boolean removeAcls(OzoneAcl removeAcl) throws IOException {
+    return proxy.removeAcl(ozoneObj, removeAcl);
