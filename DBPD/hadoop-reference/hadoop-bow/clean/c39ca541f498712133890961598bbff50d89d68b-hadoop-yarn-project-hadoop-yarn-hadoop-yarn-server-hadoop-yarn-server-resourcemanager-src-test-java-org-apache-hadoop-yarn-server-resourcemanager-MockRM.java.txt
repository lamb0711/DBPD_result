YARN-2003. Support for Application priority : Changes in RM and Capacity Scheduler. (Sunil G via wangda)

+import org.apache.hadoop.yarn.api.records.Priority;
+  public RMApp submitApp(int masterMemory, Priority priority) throws Exception {
+    Resource resource = Resource.newInstance(masterMemory, 0);
+    return submitApp(resource, "", UserGroupInformation.getCurrentUser()
+        .getShortUserName(), null, false, null,
+        super.getConfig().getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,
+            YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS), null, null, true,
+        false, false, null, 0, null, true, priority);
+  }
+
-          true, false, false, null, 0, null, true);
+          true, false, false, null, 0, null, true, null);
-        false, null, 0, null, true);
+        false, null, 0, null, true, Priority.newInstance(0));
+    Priority priority = Priority.newInstance(0);
-      false, null, attemptFailuresValidityInterval, null, true);
+      false, null, attemptFailuresValidityInterval, null, true, priority);
+    Priority priority = Priority.newInstance(0);
-      isAppIdProvided, applicationId, 0, null, true);
+      isAppIdProvided, applicationId, 0, null, true, priority);
+    Priority priority = Priority.newInstance(0);
-      false, null, 0, logAggregationContext, true);
+      false, null, 0, logAggregationContext, true, priority);
-      LogAggregationContext logAggregationContext, boolean cancelTokensWhenComplete)
+      LogAggregationContext logAggregationContext,
+      boolean cancelTokensWhenComplete, Priority priority)
-    if(unmanaged) {
+    if (unmanaged) {
+    if (priority != null) {
+      sub.setPriority(priority);
+    }
