HDFS-12069. Ozone: Create a general abstraction for metadata store. Contributed by Weiwei Yang.

-import org.apache.hadoop.utils.LevelDBStore;
-import org.iq80.leveldb.DBIterator;
+import org.apache.hadoop.utils.MetadataStore;
+import org.apache.hadoop.utils.MetadataStoreBuilder;
-import java.util.Map;
+
-    org.iq80.leveldb.Options dbOptions = new org.iq80.leveldb.Options();
-    try (LevelDBStore dbStore = new LevelDBStore(dbFile, dbOptions);
-         Connection conn = connectDB(outPath.toString());
-         DBIterator iter = dbStore.getIterator()) {
+    try (MetadataStore dbStore = MetadataStoreBuilder.newBuilder()
+        .setDbFile(dbFile).build();
+        Connection conn = connectDB(outPath.toString())) {
-      iter.seekToFirst();
-      while (iter.hasNext()) {
-        Map.Entry<byte[], byte[]> entry = iter.next();
-        String containerName = new String(entry.getKey(), encoding);
-        Pipeline pipeline = Pipeline.parseFrom(entry.getValue());
-        insertContainerDB(conn, containerName, pipeline, uuidChecked);
-      }
+      dbStore.iterate(null, (key, value) -> {
+        String containerName = new String(key, encoding);
+        Pipeline pipeline = null;
+        pipeline = Pipeline.parseFrom(value);
+        try {
+          insertContainerDB(conn, containerName, pipeline, uuidChecked);
+          return true;
+        } catch (SQLException e) {
+          throw new IOException(e);
+        }
+      });
-    org.iq80.leveldb.Options dbOptions = new org.iq80.leveldb.Options();
-    try (LevelDBStore dbStore = new LevelDBStore(dbFile, dbOptions);
-         Connection conn = connectDB(outPath.toString());
-         DBIterator iter = dbStore.getIterator()) {
+    try (MetadataStore dbStore = MetadataStoreBuilder.newBuilder()
+        .setDbFile(dbFile).build();
+        Connection conn = connectDB(outPath.toString())) {
-      iter.seekToFirst();
-      while (iter.hasNext()) {
-        Map.Entry<byte[], byte[]> entry = iter.next();
-        String blockKey = DFSUtilClient.bytes2String(entry.getKey());
-        String containerName = DFSUtilClient.bytes2String(entry.getValue());
+      dbStore.iterate(null, (key, value) -> {
+        String blockKey = DFSUtilClient.bytes2String(key);
+        String containerName = DFSUtilClient.bytes2String(value);
-        executeSQL(conn, insertBlockContainer);
-      }
+
+        try {
+          executeSQL(conn, insertBlockContainer);
+          return true;
+        } catch (SQLException e) {
+          throw new IOException(e);
+        }
+      });
-    org.iq80.leveldb.Options dbOptions = new org.iq80.leveldb.Options();
-    try (LevelDBStore dbStore = new LevelDBStore(dbFile, dbOptions);
-         Connection conn = connectDB(outPath.toString());
-         DBIterator iter = dbStore.getIterator()) {
+    try (MetadataStore dbStore = MetadataStoreBuilder.newBuilder()
+        .setDbFile(dbFile).build();
+        Connection conn = connectDB(outPath.toString())) {
-      iter.seekToFirst();
-      while (iter.hasNext()) {
-        Map.Entry<byte[], byte[]> entry = iter.next();
-        DatanodeID nodeId = DatanodeID.getFromProtoBuf(
-            HdfsProtos.DatanodeIDProto.PARSER.parseFrom(entry.getKey()));
-        String blockPool = DFSUtil.bytes2String(entry.getValue());
-        insertNodePoolDB(conn, blockPool, nodeId);
-      }
+      dbStore.iterate(null, (key, value) -> {
+        DatanodeID nodeId = DatanodeID
+            .getFromProtoBuf(HdfsProtos.DatanodeIDProto.PARSER.parseFrom(key));
+        String blockPool = DFSUtil.bytes2String(value);
+        try {
+          insertNodePoolDB(conn, blockPool, nodeId);
+          return true;
+        } catch (SQLException e) {
+          throw new IOException(e);
+        }
+      });
-    org.iq80.leveldb.Options dbOptions = new org.iq80.leveldb.Options();
-    try (LevelDBStore dbStore = new LevelDBStore(dbFile, dbOptions);
-        Connection conn = connectDB(outPath.toString());
-        DBIterator iter = dbStore.getIterator()) {
+    try (MetadataStore dbStore = MetadataStoreBuilder.newBuilder()
+        .setDbFile(dbFile).build();
+        Connection conn = connectDB(outPath.toString())) {
-      iter.seekToFirst();
-      while (iter.hasNext()) {
-        Map.Entry<byte[], byte[]> entry = iter.next();
-        String containerName = DFSUtil.bytes2String(entry.getKey());
-        Long containerUsed = Long.parseLong(
-            DFSUtil.bytes2String(entry.getValue()));
-        String insertOpenContainer = String.format(
-            INSERT_OPEN_CONTAINER, containerName, containerUsed);
-        executeSQL(conn, insertOpenContainer);
-      }
+      dbStore.iterate(null, (key, value) -> {
+        String containerName = DFSUtil.bytes2String(key);
+        Long containerUsed =
+            Long.parseLong(DFSUtil.bytes2String(value));
+        String insertOpenContainer = String
+            .format(INSERT_OPEN_CONTAINER, containerName, containerUsed);
+        try {
+          executeSQL(conn, insertOpenContainer);
+          return true;
+        } catch (SQLException e) {
+          throw new IOException(e);
+        }
+      });
