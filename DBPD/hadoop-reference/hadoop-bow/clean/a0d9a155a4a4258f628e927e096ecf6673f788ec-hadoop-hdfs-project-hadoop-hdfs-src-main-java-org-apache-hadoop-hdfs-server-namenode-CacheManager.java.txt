HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.util.Fallible;
-  private synchronized Fallible<PathBasedCacheDescriptor> addDirective(
-        PathBasedCacheDirective directive, FSPermissionChecker pc) {
+  public synchronized PathBasedCacheDescriptor addDirective(
+      PathBasedCacheDirective directive, FSPermissionChecker pc)
+      throws IOException {
-      return new Fallible<PathBasedCacheDescriptor>(
-          new InvalidPoolNameError(directive));
+      throw new InvalidPoolNameError(directive);
-      return new Fallible<PathBasedCacheDescriptor>(
-          new PoolWritePermissionDeniedError(directive));
+      throw new PoolWritePermissionDeniedError(directive);
-      return new Fallible<PathBasedCacheDescriptor>(ioe);
+      throw ioe;
-      return new Fallible<PathBasedCacheDescriptor>(
-          existing.getDescriptor());
+      return existing.getDescriptor();
-      return new Fallible<PathBasedCacheDescriptor>(
-          new UnexpectedAddPathBasedCacheDirectiveException(directive));
+      throw new UnexpectedAddPathBasedCacheDirectiveException(directive);
-      return new Fallible<PathBasedCacheDescriptor>(ioe);
+      throw ioe;
-    return new Fallible<PathBasedCacheDescriptor>(
-        entry.getDescriptor());
+    return entry.getDescriptor();
-  public synchronized List<Fallible<PathBasedCacheDescriptor>> addDirectives(
-      List<PathBasedCacheDirective> directives, FSPermissionChecker pc) {
-    ArrayList<Fallible<PathBasedCacheDescriptor>> results = 
-        new ArrayList<Fallible<PathBasedCacheDescriptor>>(directives.size());
-    for (PathBasedCacheDirective directive: directives) {
-      results.add(addDirective(directive, pc));
-    }
-    return results;
-  }
-
-  private synchronized Fallible<Long> removeDescriptor(long id,
-        FSPermissionChecker pc) {
+  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)
+      throws IOException {
-      return new Fallible<Long>(new InvalidIdException(id));
+      throw new InvalidIdException(id);
-      return new Fallible<Long>(new NoSuchIdException(id));
+      throw new NoSuchIdException(id);
-      return new Fallible<Long>(
-          new UnexpectedRemovePathBasedCacheDescriptorException(id));
+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);
-      return new Fallible<Long>(
-          new RemovePermissionDeniedException(id));
+      throw new RemovePermissionDeniedException(id);
-      return new Fallible<Long>(
-          new UnexpectedRemovePathBasedCacheDescriptorException(id));
+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);
-      return new Fallible<Long>(e);
+      throw e;
-    return new Fallible<Long>(id);
-  }
-
-  public synchronized List<Fallible<Long>> removeDescriptors(List<Long> ids,
-      FSPermissionChecker pc) {
-    ArrayList<Fallible<Long>> results = 
-        new ArrayList<Fallible<Long>>(ids.size());
-    for (Long id : ids) {
-      results.add(removeDescriptor(id, pc));
-    }
-    return results;
+    CachePoolInfo.validate(info);
-    CachePool.validateName(poolName);
+    CachePoolInfo.validate(info);
-    if (poolName.isEmpty()) {
-      throw new IOException("invalid empty cache pool name");
-    }
+    CachePoolInfo.validateName(poolName);
-      throw new IOException("can't remove nonexistent cache pool " + poolName);
+      throw new IOException("can't remove non-existent cache pool " + poolName);
