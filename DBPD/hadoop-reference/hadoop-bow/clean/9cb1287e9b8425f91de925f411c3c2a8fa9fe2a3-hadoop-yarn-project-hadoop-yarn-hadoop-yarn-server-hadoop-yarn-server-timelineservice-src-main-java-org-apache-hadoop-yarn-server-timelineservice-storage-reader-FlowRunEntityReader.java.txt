YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)

-import java.util.EnumSet;
-import java.util.Map;
-import java.util.Set;
-import org.apache.hadoop.yarn.server.timelineservice.reader.filter.TimelineFilterList;
+import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineDataToRetrieve;
+import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineEntityFilters;
+import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineReaderContext;
-import org.apache.hadoop.yarn.server.timelineservice.storage.TimelineReader;
-  public FlowRunEntityReader(String userId, String clusterId,
-      String flowName, Long flowRunId, String appId, String entityType,
-      Long limit, Long createdTimeBegin, Long createdTimeEnd,
-      Map<String, Set<String>> relatesTo, Map<String, Set<String>> isRelatedTo,
-      Map<String, Object> infoFilters, Map<String, String> configFilters,
-      Set<String> metricFilters, Set<String> eventFilters,
-      TimelineFilterList confsToRetrieve, TimelineFilterList metricsToRetrieve,
-      EnumSet<Field> fieldsToRetrieve) {
-    super(userId, clusterId, flowName, flowRunId, appId, entityType, limit,
-        createdTimeBegin, createdTimeEnd, relatesTo, isRelatedTo, infoFilters,
-        configFilters, metricFilters, eventFilters, null, metricsToRetrieve,
-        fieldsToRetrieve, true);
+  public FlowRunEntityReader(TimelineReaderContext ctxt,
+      TimelineEntityFilters entityFilters, TimelineDataToRetrieve toRetrieve) {
+    super(ctxt, entityFilters, toRetrieve, true);
-  public FlowRunEntityReader(String userId, String clusterId,
-      String flowName, Long flowRunId, String appId, String entityType,
-      String entityId, TimelineFilterList confsToRetrieve,
-      TimelineFilterList metricsToRetrieve, EnumSet<Field> fieldsToRetrieve) {
-    super(userId, clusterId, flowName, flowRunId, appId, entityType, entityId,
-        null, metricsToRetrieve, fieldsToRetrieve);
+  public FlowRunEntityReader(TimelineReaderContext ctxt,
+      TimelineDataToRetrieve toRetrieve) {
+    super(ctxt, toRetrieve);
-    Preconditions.checkNotNull(clusterId, "clusterId shouldn't be null");
-    Preconditions.checkNotNull(userId, "userId shouldn't be null");
-    Preconditions.checkNotNull(flowName, "flowName shouldn't be null");
+    Preconditions.checkNotNull(getContext().getClusterId(),
+        "clusterId shouldn't be null");
+    Preconditions.checkNotNull(getContext().getUserId(),
+        "userId shouldn't be null");
+    Preconditions.checkNotNull(getContext().getFlowName(),
+        "flowName shouldn't be null");
-      Preconditions.checkNotNull(flowRunId, "flowRunId shouldn't be null");
+      Preconditions.checkNotNull(getContext().getFlowRunId(),
+          "flowRunId shouldn't be null");
-    if (!singleEntityRead) {
-      if (fieldsToRetrieve == null) {
-        fieldsToRetrieve = EnumSet.noneOf(Field.class);
-      }
-      if (limit == null || limit < 0) {
-        limit = TimelineReader.DEFAULT_LIMIT;
-      }
-      if (createdTimeBegin == null) {
-        createdTimeBegin = DEFAULT_BEGIN_TIME;
-      }
-      if (createdTimeEnd == null) {
-        createdTimeEnd = DEFAULT_END_TIME;
-      }
-      if (!fieldsToRetrieve.contains(Field.METRICS) &&
-          metricsToRetrieve != null &&
-          !metricsToRetrieve.getFilterList().isEmpty()) {
-        fieldsToRetrieve.add(Field.METRICS);
-      }
-    }
+    getDataToRetrieve().addFieldsBasedOnConfsAndMetricsToRetrieve();
+    TimelineDataToRetrieve dataToRetrieve = getDataToRetrieve();
-    if (!singleEntityRead && !fieldsToRetrieve.contains(Field.METRICS) &&
-        !fieldsToRetrieve.contains(Field.ALL)) {
+    if (!singleEntityRead &&
+        !dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) &&
+        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL)) {
-    if (metricsToRetrieve != null &&
-        !metricsToRetrieve.getFilterList().isEmpty()) {
+    if (dataToRetrieve.getMetricsToRetrieve() != null &&
+        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {
-          FlowRunColumnPrefix.METRIC, metricsToRetrieve));
+          FlowRunColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));
+    TimelineReaderContext context = getContext();
-        FlowRunRowKey.getRowKey(clusterId, userId, flowName, flowRunId);
+        FlowRunRowKey.getRowKey(context.getClusterId(), context.getUserId(),
+            context.getFlowName(), context.getFlowRunId());
+    TimelineReaderContext context = getContext();
-        FlowRunRowKey.getRowKeyPrefix(clusterId, userId, flowName));
+        FlowRunRowKey.getRowKeyPrefix(context.getClusterId(),
+            context.getUserId(), context.getFlowName()));
-    newList.addFilter(new PageFilter(limit));
+    newList.addFilter(new PageFilter(getFilters().getLimit()));
+    TimelineReaderContext context = getContext();
-    flowRun.setUser(userId);
-    flowRun.setName(flowName);
+    flowRun.setUser(context.getUserId());
+    flowRun.setName(context.getFlowName());
-      flowRun.setRunId(flowRunId);
+      flowRun.setRunId(context.getFlowRunId());
-    if (!singleEntityRead && (flowRun.getStartTime() < createdTimeBegin ||
-        flowRun.getStartTime() > createdTimeEnd)) {
+    if (!singleEntityRead &&
+        (flowRun.getStartTime() < getFilters().getCreatedTimeBegin() ||
+        flowRun.getStartTime() > getFilters().getCreatedTimeEnd())) {
-    if (singleEntityRead || fieldsToRetrieve.contains(Field.METRICS)) {
+    if (singleEntityRead ||
+        getDataToRetrieve().getFieldsToRetrieve().contains(Field.METRICS)) {
