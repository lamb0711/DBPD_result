YARN-3967. Fetch the application report from the AHS if the RM does not
know about it. Contributed by Mit Desai

+import org.apache.hadoop.yarn.api.ApplicationHistoryProtocol;
+import org.apache.hadoop.yarn.client.AHSProxy;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.exceptions.ApplicationNotFoundException;
+  private final ApplicationHistoryProtocol historyManager;
-  
+  private boolean isAHSEnabled;
+
-   * Create a new Connection to the RM to fetch Application reports.
+   * Create a new Connection to the RM/Application History Server
+   * to fetch Application reports.
+    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,
+        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {
+      isAHSEnabled = true;
+    }
+      if (isAHSEnabled) {
+        historyManager = getAHSProxy(conf);
+      } else {
+        this.historyManager = null;
+      }
-   * Just call directly into the applicationsManager given instead of creating
-   * a remote connection to it.  This is mostly for when the Proxy is running
-   * as part of the RM already.
+   * Create a direct connection to RM instead of a remote connection when
+   * the proxy is running as part of the RM. Also create a remote connection to
+   * Application History Server if it is enabled.
+    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,
+        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {
+      isAHSEnabled = true;
+    }
+    if (isAHSEnabled) {
+      try {
+        historyManager = getAHSProxy(conf);
+      } catch (IOException e) {
+        throw new YarnRuntimeException(e);
+      }
+    } else {
+      this.historyManager = null;
+    }
-  
+
+  protected ApplicationHistoryProtocol getAHSProxy(Configuration configuration)
+      throws IOException {
+    return AHSProxy.createAHSProxy(configuration,
+      ApplicationHistoryProtocol.class,
+      configuration.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_ADDRESS,
+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS,
+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_PORT));
+  }
+
-   * Get a report for the specified app.
-   * @param appId the id of the application to get. 
-   * @return the ApplicationReport for that app.
+   * Get an application report for the specified application id from the RM and
+   * fall back to the Application History Server if not found in RM.
+   * @param appId id of the application to get.
+   * @return the ApplicationReport for the appId.
-    
-    GetApplicationReportResponse response = applicationsManager
-        .getApplicationReport(request);
+
+    GetApplicationReportResponse response;
+    try {
+      response = applicationsManager.getApplicationReport(request);
+    } catch (YarnException e) {
+      if (!isAHSEnabled) {
+        // Just throw it as usual if historyService is not enabled.
+        throw e;
+      }
+      // Even if history-service is enabled, treat all exceptions still the same
+      // except the following
+      if (!(e.getClass() == ApplicationNotFoundException.class)) {
+        throw e;
+      }
+      response = historyManager.getApplicationReport(request);
+    }
+    if (this.historyManager != null) {
+      RPC.stopProxy(this.historyManager);
+    }
