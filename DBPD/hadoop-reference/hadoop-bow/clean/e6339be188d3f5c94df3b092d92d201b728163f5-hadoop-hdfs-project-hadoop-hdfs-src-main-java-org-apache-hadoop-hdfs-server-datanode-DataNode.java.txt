HDFS-349.  DFS Scalability: Incremental block reports. Contributed by Tomasz Nykiel.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161976 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.protocol.ReceivedDeletedBlockInfo;
+  long deleteReportInterval;
+  long lastDeletedReport = 0;
+    this.deleteReportInterval = 100 * heartBeatInterval;
+  // calls specific to BP
+  protected void notifyNamenodeDeletedBlock(ExtendedBlock block) {
+    BPOfferService bpos = blockPoolManager.get(block.getBlockPoolId());
+    if (bpos != null) {
+      bpos.notifyNamenodeDeletedBlock(block);
+    } else {
+      LOG.warn("Cannot find BPOfferService for reporting block deleted for bpid="
+          + block.getBlockPoolId());
+    }
+  }
+  
-    private final LinkedList<Block> receivedBlockList = new LinkedList<Block>();
-    private final LinkedList<String> delHints = new LinkedList<String>();
+    private final LinkedList<ReceivedDeletedBlockInfo> receivedAndDeletedBlockList 
+      = new LinkedList<ReceivedDeletedBlockInfo>();
+    private volatile int pendingReceivedRequests = 0;
+     * 
-    private void reportReceivedBlocks() throws IOException {
-      //check if there are newly received blocks
-      Block [] blockArray=null;
-      String [] delHintArray=null;
-      synchronized(receivedBlockList) {
-        synchronized(delHints){
-          int numBlocks = receivedBlockList.size();
-          if (numBlocks > 0) {
-            if(numBlocks!=delHints.size()) {
-              LOG.warn("Panic: receiveBlockList and delHints are not of " +
-              "the same length" );
-            }
-            //
-            // Send newly-received blockids to namenode
-            //
-            blockArray = receivedBlockList.toArray(new Block[numBlocks]);
-            delHintArray = delHints.toArray(new String[numBlocks]);
-          }
+    private void reportReceivedDeletedBlocks() throws IOException {
+
+      // check if there are newly received blocks
+      ReceivedDeletedBlockInfo[] receivedAndDeletedBlockArray = null;
+      int currentReceivedRequestsCounter;
+      synchronized (receivedAndDeletedBlockList) {
+        currentReceivedRequestsCounter = pendingReceivedRequests;
+        int numBlocks = receivedAndDeletedBlockList.size();
+        if (numBlocks > 0) {
+          //
+          // Send newly-received and deleted blockids to namenode
+          //
+          receivedAndDeletedBlockArray = receivedAndDeletedBlockList
+              .toArray(new ReceivedDeletedBlockInfo[numBlocks]);
-      if (blockArray != null) {
-        if(delHintArray == null || delHintArray.length != blockArray.length ) {
-          LOG.warn("Panic: block array & delHintArray are not the same" );
-        }
-        bpNamenode.blockReceived(bpRegistration, blockPoolId, blockArray,
-            delHintArray);
-        synchronized(receivedBlockList) {
-          synchronized(delHints){
-            for(int i=0; i<blockArray.length; i++) {
-              receivedBlockList.remove(blockArray[i]);
-              delHints.remove(delHintArray[i]);
-            }
+      if (receivedAndDeletedBlockArray != null) {
+        bpNamenode.blockReceivedAndDeleted(bpRegistration, blockPoolId,
+            receivedAndDeletedBlockArray);
+        synchronized (receivedAndDeletedBlockList) {
+          for (int i = 0; i < receivedAndDeletedBlockArray.length; i++) {
+            receivedAndDeletedBlockList.remove(receivedAndDeletedBlockArray[i]);
+          pendingReceivedRequests -= currentReceivedRequestsCounter;
-      if(block==null || delHint==null) {
-        throw new IllegalArgumentException(
-            block==null?"Block is null":"delHint is null");
+      if (block == null || delHint == null) {
+        throw new IllegalArgumentException(block == null ? "Block is null"
+            : "delHint is null");
-      
+
-        LOG.warn("BlockPool mismatch " + block.getBlockPoolId() + 
-            " vs. " + blockPoolId);
+        LOG.warn("BlockPool mismatch " + block.getBlockPoolId() + " vs. "
+            + blockPoolId);
-      
-      synchronized (receivedBlockList) {
-        synchronized (delHints) {
-          receivedBlockList.add(block.getLocalBlock());
-          delHints.add(delHint);
-          receivedBlockList.notifyAll();
-        }
+
+      synchronized (receivedAndDeletedBlockList) {
+        receivedAndDeletedBlockList.add(new ReceivedDeletedBlockInfo(block
+            .getLocalBlock(), delHint));
+        pendingReceivedRequests++;
+        receivedAndDeletedBlockList.notifyAll();
+      }
+    }
+
+    void notifyNamenodeDeletedBlock(ExtendedBlock block) {
+      if (block == null) {
+        throw new IllegalArgumentException("Block is null");
+      }
+
+      if (!block.getBlockPoolId().equals(blockPoolId)) {
+        LOG.warn("BlockPool mismatch " + block.getBlockPoolId() + " vs. "
+            + blockPoolId);
+        return;
+      }
+
+      synchronized (receivedAndDeletedBlockList) {
+        receivedAndDeletedBlockList.add(new ReceivedDeletedBlockInfo(block
+            .getLocalBlock(), ReceivedDeletedBlockInfo.TODELETE_HINT));
-      LOG.info("For namenode " + nnAddr + " using BLOCKREPORT_INTERVAL of "
+      LOG.info("For namenode " + nnAddr + " using DELETEREPORT_INTERVAL of "
+          + deleteReportInterval + " msec " + " BLOCKREPORT_INTERVAL of "
-
-          reportReceivedBlocks();
+          if (pendingReceivedRequests > 0
+              || (startTime - lastDeletedReport > deleteReportInterval)) {
+            reportReceivedDeletedBlocks();
+            lastDeletedReport = startTime;
+          }
-          synchronized(receivedBlockList) {
-            if (waitTime > 0 && receivedBlockList.size() == 0) {
+          synchronized(receivedAndDeletedBlockList) {
+            if (waitTime > 0 && pendingReceivedRequests == 0) {
-                receivedBlockList.wait(waitTime);
+                receivedAndDeletedBlockList.wait(waitTime);
