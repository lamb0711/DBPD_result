HDDS-1130. Make BenchMarkBlockManager multi-threaded. Contributed by Lokesh Jain.

+import org.apache.hadoop.fs.FileUtil;
+import java.util.concurrent.locks.ReentrantLock;
-  private StorageContainerManager scm;
-  private PipelineManager pipelineManager;
-  private BlockManager blockManager;
+  private static String testDir;
+  private static StorageContainerManager scm;
+  private static PipelineManager pipelineManager;
+  private static BlockManager blockManager;
+  private static ReentrantLock lock = new ReentrantLock();
+
+  @Param({"1", "10", "100", "1000", "10000", "100000"})
+  private static int numPipelines;
+  @Param({"3", "10", "100"})
+  private static int numContainersPerPipeline;
-  public void initialize()
+  public static void initialize()
-    OzoneConfiguration conf = new OzoneConfiguration();
-    conf.set(HddsConfigKeys.OZONE_METADATA_DIRS,
-        GenesisUtil.getTempPath().resolve(RandomStringUtils.randomNumeric(7))
-            .toString());
-    conf.setInt(OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT, 100);
-    final File metaDir = ServerUtils.getScmDbDir(conf);
-    final File pipelineDBPath = new File(metaDir, SCM_PIPELINE_DB);
-    int cacheSize = conf.getInt(OZONE_SCM_DB_CACHE_SIZE_MB,
-        OZONE_SCM_DB_CACHE_SIZE_DEFAULT);
-    MetadataStore pipelineStore =
-        MetadataStoreBuilder.newBuilder()
-            .setCreateIfMissing(true)
-            .setConf(conf)
-            .setDbFile(pipelineDBPath)
-            .setCacheSize(cacheSize * OzoneConsts.MB)
-            .build();
-    addPipelines(100, ReplicationFactor.THREE, pipelineStore);
-    pipelineStore.close();
-    scm = getScm(conf, new SCMConfigurator());
-    pipelineManager = scm.getPipelineManager();
-    for (Pipeline pipeline : pipelineManager
-        .getPipelines(ReplicationType.RATIS, ReplicationFactor.THREE)) {
-      pipelineManager.openPipeline(pipeline.getId());
+    try {
+      lock.lock();
+      if (scm == null) {
+        OzoneConfiguration conf = new OzoneConfiguration();
+        testDir = GenesisUtil.getTempPath()
+            .resolve(RandomStringUtils.randomNumeric(7)).toString();
+        conf.set(HddsConfigKeys.OZONE_METADATA_DIRS, testDir);
+        conf.setInt(OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT,
+            numContainersPerPipeline);
+        final File metaDir = ServerUtils.getScmDbDir(conf);
+        final File pipelineDBPath = new File(metaDir, SCM_PIPELINE_DB);
+        int cacheSize = conf.getInt(OZONE_SCM_DB_CACHE_SIZE_MB,
+            OZONE_SCM_DB_CACHE_SIZE_DEFAULT);
+        MetadataStore pipelineStore =
+            MetadataStoreBuilder.newBuilder().setCreateIfMissing(true)
+                .setConf(conf).setDbFile(pipelineDBPath)
+                .setCacheSize(cacheSize * OzoneConsts.MB).build();
+        addPipelines(ReplicationFactor.THREE,
+            pipelineStore);
+        pipelineStore.close();
+        scm = getScm(conf, new SCMConfigurator());
+        pipelineManager = scm.getPipelineManager();
+        for (Pipeline pipeline : pipelineManager
+            .getPipelines(ReplicationType.RATIS, ReplicationFactor.THREE)) {
+          pipelineManager.openPipeline(pipeline.getId());
+        }
+        blockManager = scm.getScmBlockManager();
+        scm.getEventQueue().fireEvent(SCMEvents.CHILL_MODE_STATUS, false);
+        Thread.sleep(1000);
+      }
+    } finally {
+      lock.unlock();
-    blockManager = scm.getScmBlockManager();
-    scm.getEventQueue().fireEvent(SCMEvents.CHILL_MODE_STATUS, false);
-    Thread.sleep(1000);
-  public void tearDown() {
+  public static void tearDown() {
+      FileUtil.fullyDelete(new File(testDir));
-  private void addPipelines(int numPipelines, ReplicationFactor factor,
+  private static void addPipelines(ReplicationFactor factor,
+  @Threads(4)
