HDFS-4647. Rename should call setLocalName after an inode is removed from snapshots.  Contributed by Arpit Agarwal


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1464795 13f79535-47bb-0310-9956-ffa450edef68

-    final INode srcChild = srcIIP.getLastINode();
+    INode srcChild = srcIIP.getLastINode();
+    final boolean isSrcInSnapshot = srcChild.isInLatestSnapshot(
+        srcIIP.getLatestSnapshot());
+    final boolean srcChildIsReference = srcChild.isReference();
+    
+    // check srcChild for reference
+    final INodeReference.WithCount withCount;
+    if (srcChildIsReference || isSrcInSnapshot) {
+      final INodeReference.WithName withName = srcIIP.getINode(-2).asDirectory()
+          .replaceChild4ReferenceWithName(srcChild); 
+      withCount = (INodeReference.WithCount)withName.getReferredINode();
+      srcChild = withName;
+      srcIIP.setLastINode(srcChild);
+    } else {
+      withCount = null;
+    }
+
-      //TODO: setLocalName breaks created/deleted lists
-      srcChild.setLocalName(dstIIP.getLastLocalName());
+      
+      srcChild = srcIIP.getLastINode();
+      final byte[] dstChildName = dstIIP.getLastLocalName();
+      final INode toDst;
+      if (withCount == null) {
+        srcChild.setLocalName(dstChildName);
+        toDst = srcChild;
+      } else {
+        withCount.getReferredINode().setLocalName(dstChildName);
+        final INodeReference ref = new INodeReference(dstIIP.getINode(-2), withCount);
+        withCount.setParentReference(ref);
+        withCount.incrementReferenceCount();
+        toDst = ref;
+      }
-      added = addLastINodeNoQuotaCheck(dstIIP, srcChild);
+      added = addLastINodeNoQuotaCheck(dstIIP, toDst);
-        if (srcIIP.getLatestSnapshot() != null) {
-          createReferences4Rename(srcChild, srcChildName,
-              (INodeDirectoryWithSnapshot)srcParent.asDirectory(),
-              dstParent.asDirectory());
-        }
-        srcChild.setLocalName(srcChildName);
+        if (withCount == null) {
+          srcChild.setLocalName(srcChildName);
+        } else if (!srcChildIsReference) { // src must be in snapshot
+          final INodeDirectoryWithSnapshot srcParent = 
+              (INodeDirectoryWithSnapshot) srcIIP.getINode(-2).asDirectory();
+          final INode originalChild = withCount.getReferredINode();
+          srcParent.replaceRemovedChild(srcChild, originalChild);
+          srcChild = originalChild;
+        }
+    INode srcChild = srcIIP.getLastINode();
+    final byte[] srcChildName = srcChild.getLocalNameBytes();
+    final boolean isSrcInSnapshot = srcChild.isInLatestSnapshot(
+        srcIIP.getLatestSnapshot());
+    final boolean srcChildIsReference = srcChild.isReference();
+    
+    // check srcChild for reference
+    final INodeReference.WithCount withCount;
+    if (srcChildIsReference || isSrcInSnapshot) {
+      final INodeReference.WithName withName = srcIIP.getINode(-2).asDirectory()
+          .replaceChild4ReferenceWithName(srcChild); 
+      withCount = (INodeReference.WithCount)withName.getReferredINode();
+      srcChild = withName;
+      srcIIP.setLastINode(srcChild);
+    } else {
+      withCount = null;
+    }
+    
-    final INode srcChild = srcIIP.getLastINode();
-    final byte[] srcChildName = srcChild.getLocalNameBytes();
-
+    
-      //TODO: setLocalName breaks created/deleted lists
-      srcChild.setLocalName(dstIIP.getLastLocalName());
+      
+      srcChild = srcIIP.getLastINode();
+
+      final byte[] dstChildName = dstIIP.getLastLocalName();
+      final INode toDst;
+      if (withCount == null) {
+        srcChild.setLocalName(dstChildName);
+        toDst = srcChild;
+      } else {
+        withCount.getReferredINode().setLocalName(dstChildName);
+        final INodeReference ref = new INodeReference(dstIIP.getINode(-2), withCount);
+        withCount.setParentReference(ref);
+        withCount.incrementReferenceCount();
+        toDst = ref;
+      }
-      if (addLastINodeNoQuotaCheck(dstIIP, srcChild)) {
+      if (addLastINodeNoQuotaCheck(dstIIP, toDst)) {
-        if (srcIIP.getLatestSnapshot() != null) {
-          createReferences4Rename(srcChild, srcChildName,
-              (INodeDirectoryWithSnapshot)srcParent.asDirectory(),
-              dstParent.asDirectory());
-        }
-
-        srcChild.setLocalName(srcChildName);
+        srcChild = srcIIP.getLastINode();
+        if (withCount == null) {
+          srcChild.setLocalName(srcChildName);
+        } else if (!srcChildIsReference) { // src must be in snapshot
+          final INodeDirectoryWithSnapshot srcParent
+              = (INodeDirectoryWithSnapshot)srcIIP.getINode(-2).asDirectory();
+          final INode originalChild = withCount.getReferredINode();
+          srcParent.replaceRemovedChild(srcChild, originalChild);
+          srcChild = originalChild;
+        }
-
-  /** The renamed inode is also in a snapshot, create references */
-  private static void createReferences4Rename(final INode srcChild,
-      final byte[] srcChildName, final INodeDirectoryWithSnapshot srcParent,
-      final INodeDirectory dstParent) {
-    final INodeReference.WithCount ref;
-    if (srcChild.isReference()) {
-      ref = (INodeReference.WithCount)srcChild.asReference().getReferredINode();
-    } else {
-      ref = dstParent.asDirectory().replaceChild4Reference(srcChild);
-    }
-    srcParent.replaceRemovedChild4Reference(srcChild, ref, srcChildName);
-  }
+  
