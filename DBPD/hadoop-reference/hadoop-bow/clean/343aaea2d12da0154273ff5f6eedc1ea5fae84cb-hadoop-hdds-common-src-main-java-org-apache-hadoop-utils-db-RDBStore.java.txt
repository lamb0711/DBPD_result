HDDS-864. Use strongly typed codec implementations for the tables of the OmMetadataManager. Contributed by Elek Marton.

-import com.google.common.base.Preconditions;
-import org.apache.hadoop.hdds.HddsUtils;
-import org.apache.hadoop.hdfs.DFSUtil;
-import org.apache.hadoop.metrics2.util.MBeans;
-import org.apache.hadoop.utils.RocksDBStoreMBean;
-import org.apache.ratis.thirdparty.com.google.common.annotations.VisibleForTesting;
-import org.rocksdb.ColumnFamilyDescriptor;
-import org.rocksdb.ColumnFamilyHandle;
-import org.rocksdb.DBOptions;
-import org.rocksdb.RocksDB;
-import org.rocksdb.RocksDBException;
-import org.rocksdb.WriteBatch;
-import org.rocksdb.WriteOptions;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
+import org.apache.hadoop.hdds.HddsUtils;
+import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.metrics2.util.MBeans;
+import org.apache.hadoop.utils.RocksDBStoreMBean;
+
+import com.google.common.base.Preconditions;
+import org.apache.ratis.thirdparty.com.google.common.annotations.VisibleForTesting;
+import org.rocksdb.ColumnFamilyDescriptor;
+import org.rocksdb.ColumnFamilyHandle;
+import org.rocksdb.DBOptions;
+import org.rocksdb.RocksDB;
+import org.rocksdb.RocksDBException;
+import org.rocksdb.WriteOptions;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
-  public RDBStore(File dbFile, DBOptions options, Set<TableConfig> families)
+  @VisibleForTesting
+  public RDBStore(File dbFile, DBOptions options,
+                  Set<TableConfig> families) throws IOException {
+    this(dbFile, options, families, new CodecRegistry());
+  }
+
+  public RDBStore(File dbFile, DBOptions options, Set<TableConfig> families,
+                  CodecRegistry registry)
-    codecRegistry = new CodecRegistry();
+    codecRegistry = registry;
-  public void move(byte[] key, Table source, Table dest) throws IOException {
-    RDBTable sourceTable;
-    RDBTable destTable;
-    if (source instanceof RDBTable) {
-      sourceTable = (RDBTable) source;
-    } else {
-      LOG.error("Unexpected Table type. Expected RocksTable Store for Source.");
-      throw new IOException("Unexpected TableStore Type in source. Expected "
-          + "RocksDBTable.");
-    }
+  public <KEY, VALUE> void move(KEY key, Table<KEY, VALUE> source,
+                                Table<KEY, VALUE> dest) throws IOException {
+    try (BatchOperation batchOperation = initBatchOperation()) {
-    if (dest instanceof RDBTable) {
-      destTable = (RDBTable) dest;
-    } else {
-      LOG.error("Unexpected Table type. Expected RocksTable Store for Dest.");
-      throw new IOException("Unexpected TableStore Type in dest. Expected "
-          + "RocksDBTable.");
-    }
-    try (WriteBatch batch = new WriteBatch()) {
-      byte[] value = sourceTable.get(key);
-      batch.put(destTable.getHandle(), key, value);
-      batch.delete(sourceTable.getHandle(), key);
-      db.write(writeOptions, batch);
-    } catch (RocksDBException rockdbException) {
-      LOG.error("Move of key failed. Key:{}", DFSUtil.bytes2String(key));
-      throw toIOException("Unable to move key: " + DFSUtil.bytes2String(key),
-          rockdbException);
+      VALUE value = source.get(key);
+      dest.putWithBatch(batchOperation, key, value);
+      source.deleteWithBatch(batchOperation, key);
+      commitBatchOperation(batchOperation);
-  public void move(byte[] key, byte[] value, Table source,
-      Table dest) throws IOException {
+  public <KEY, VALUE> void move(KEY key, VALUE value, Table<KEY, VALUE> source,
+                                Table<KEY, VALUE> dest) throws IOException {
-  public void move(byte[] sourceKey, byte[] destKey, byte[] value, Table source,
-      Table dest) throws IOException {
-    RDBTable sourceTable;
-    RDBTable destTable;
-    if (source instanceof RDBTable) {
-      sourceTable = (RDBTable) source;
-    } else {
-      LOG.error("Unexpected Table type. Expected RocksTable Store for Source.");
-      throw new IOException("Unexpected TableStore Type in source. Expected "
-          + "RocksDBTable.");
-    }
-
-    if (dest instanceof RDBTable) {
-      destTable = (RDBTable) dest;
-    } else {
-      LOG.error("Unexpected Table type. Expected RocksTable Store for Dest.");
-      throw new IOException("Unexpected TableStore Type in dest. Expected "
-          + "RocksDBTable.");
-    }
-    try (WriteBatch batch = new WriteBatch()) {
-      batch.put(destTable.getHandle(), destKey, value);
-      batch.delete(sourceTable.getHandle(), sourceKey);
-      db.write(writeOptions, batch);
-    } catch (RocksDBException rockdbException) {
-      LOG.error("Move of key failed. Key:{}", DFSUtil.bytes2String(sourceKey));
-      throw toIOException("Unable to move key: " +
-          DFSUtil.bytes2String(sourceKey), rockdbException);
+  public <KEY, VALUE> void move(KEY sourceKey, KEY destKey, VALUE value,
+                                Table<KEY, VALUE> source,
+                                Table<KEY, VALUE> dest) throws IOException {
+    try (BatchOperation batchOperation = initBatchOperation()) {
+      dest.putWithBatch(batchOperation, destKey, value);
+      source.deleteWithBatch(batchOperation, sourceKey);
+      commitBatchOperation(batchOperation);
