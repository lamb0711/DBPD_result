HDFS-5914. Incorporate ACLs with the changes from HDFS-5698. Contributed by Haohui Mai.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1566991 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.hdfs.protocol.proto.AclProtos.AclEntryProto;
+import org.apache.hadoop.hdfs.server.namenode.FSImageFormatProtobuf.LoaderContext;
+import com.google.common.collect.ImmutableList;
+    public static ImmutableList<AclEntry> loadAclEntries(int id,
+        final ImmutableList<AclEntry>[] aclTable) {
+      return aclTable[id];
+    }
+
-        final String[] stringTable) {
+        LoaderContext state) {
-          stringTable);
+          state.getStringTable());
+
+      if (d.hasAclId()) {
+        dir.addAclFeature(new AclFeature(loadAclEntries(d.getAclId(),
+            state.getExtendedAclTable())));
+      }
-        return loadINodeDirectory(n, parent.getLoaderContext().getStringTable());
+        return loadINodeDirectory(n, parent.getLoaderContext());
+      LoaderContext state = parent.getLoaderContext();
+
+      if (f.hasAclId()) {
+        file.addAclFeature(new AclFeature(loadAclEntries(f.getAclId(),
+            state.getExtendedAclTable())));
+      }
+
-      return new INodeSymlink(n.getId(), n.getName().toByteArray(), permissions,
-          0, 0, s.getTarget().toStringUtf8());
+
+      INodeSymlink sym = new INodeSymlink(n.getId(), n.getName().toByteArray(),
+          permissions, 0, 0, s.getTarget().toStringUtf8());
+
+      return sym;
-      INodeDirectory root = loadINodeDirectory(p, parent.getLoaderContext()
-          .getStringTable());
+      INodeDirectory root = loadINodeDirectory(p, parent.getLoaderContext());
+    /**
+     * Get a unique id for the AclEntry list. Notice that the code does not
+     * deduplicate the list of aclentry yet.
+     */
+    private static int buildAclEntries(AclFeature f,
+        final SaverContext.DeduplicationMap<ImmutableList<AclEntryProto>> map) {
+      return map.getId(ImmutableList.copyOf(PBHelper.convertAclEntryProto(f
+          .getEntries())));
+    }
+
-        INodeFileAttributes file,
-        final SaverContext.DeduplicationMap<String> stringMap) {
+        INodeFileAttributes file, final SaverContext state) {
-          .setPermission(buildPermissionStatus(file, stringMap))
+          .setPermission(buildPermissionStatus(file, state.getStringMap()))
+
+      AclFeature f = file.getAclFeature();
+      if (f != null) {
+        b.setAclId(buildAclEntries(f, state.getExtendedAclMap()));
+      }
-        INodeDirectoryAttributes dir,
-        final SaverContext.DeduplicationMap<String> stringMap) {
+        INodeDirectoryAttributes dir, final SaverContext state) {
-          .setPermission(buildPermissionStatus(dir, stringMap));
+          .setPermission(buildPermissionStatus(dir, state.getStringMap()));
+
+      AclFeature f = dir.getAclFeature();
+      if (f != null) {
+        b.setAclId(buildAclEntries(f, state.getExtendedAclMap()));
+      }
-          parent.getSaverContext().getStringMap());
+          parent.getSaverContext());
-          parent.getSaverContext().getStringMap());
+          parent.getSaverContext());
+      SaverContext state = parent.getSaverContext();
-          .setPermission(buildPermissionStatus(n, parent.getSaverContext().getStringMap()))
+          .setPermission(buildPermissionStatus(n, state.getStringMap()))
+
