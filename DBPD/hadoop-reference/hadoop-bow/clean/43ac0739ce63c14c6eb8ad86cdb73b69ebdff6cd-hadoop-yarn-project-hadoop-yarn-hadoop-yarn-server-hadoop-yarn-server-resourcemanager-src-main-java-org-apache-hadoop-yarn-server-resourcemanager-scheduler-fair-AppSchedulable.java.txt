svn merge -c -1476006 . for reverting the previous trunk merge.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1476008 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.yarn.server.resourcemanager.resource.DefaultResourceCalculator;
-  private static final DefaultResourceCalculator RESOURCE_CALCULATOR
-    = new DefaultResourceCalculator();
-  
-  private void reserve(Priority priority, FSSchedulerNode node,
-      Container container, boolean alreadyReserved) {
+  private void reserve(FSSchedulerApp application, Priority priority,
+      FSSchedulerNode node, Container container, boolean alreadyReserved) {
-      getMetrics().reserveResource(app.getUser(), container.getResource());
-      RMContainer rmContainer = app.reserve(node, priority, null,
+      getMetrics().reserveResource(application.getUser(), container.getResource());
+      RMContainer rmContainer = application.reserve(node, priority, null,
-      node.reserveResource(app, priority, rmContainer);
+      node.reserveResource(application, priority, rmContainer);
-      app.reserve(node, priority, rmContainer, container);
-      node.reserveResource(app, priority, rmContainer);
+      application.reserve(node, priority, rmContainer, container);
+      node.reserveResource(application, priority, rmContainer);
-   * Remove the reservation on {@code node} at the given
+   * Remove the reservation on {@code node} for {@ application} at the given
-  public void unreserve(Priority priority, FSSchedulerNode node) {
+  private void unreserve(FSSchedulerApp application, Priority priority,
+      FSSchedulerNode node) {
-    app.unreserve(node, priority);
-    node.unreserveResource(app);
+    application.unreserve(node, priority);
+    node.unreserveResource(application);
-        app.getUser(), rmContainer.getContainer().getResource());
+        application.getUser(), rmContainer.getContainer().getResource());
-        app.getUser(), rmContainer.getContainer().getResource());
+        application.getUser(), rmContainer.getContainer().getResource());
-      Priority priority, ResourceRequest request, NodeType type,
-      boolean reserved) {
+      FSSchedulerApp application, Priority priority,
+      ResourceRequest request, NodeType type, boolean reserved) {
-      container = createContainer(app, node, capability, priority);
+      container = createContainer(application, node, capability, priority);
-          app.allocate(type, node, priority, request, container);
+          application.allocate(type, node, priority, request, container);
-        if (reserved) {
-          unreserve(priority, node);
-        }
-        unreserve(priority, node);
+        unreserve(application, priority, node);
-      node.allocateContainer(app.getApplicationId(),
+      node.allocateContainer(application.getApplicationId(),
-      reserve(priority, node, container, reserved);
+      reserve(application, priority, node, container, reserved);
-        unreserve(priority, node);
+        unreserve(app, priority, node);
-        if (app.getTotalRequiredResources(priority) <= 0 ||
-            !hasContainerForNode(priority, node)) {
+        if (app.getTotalRequiredResources(priority) <= 0) {
-          return assignContainer(node, priority,
+          return assignContainer(node, app, priority,
-          return assignContainer(node, priority, rackLocalRequest,
+          return assignContainer(node, app, priority, rackLocalRequest,
-          return assignContainer(node, priority, offSwitchRequest,
+          return assignContainer(node, app, priority, offSwitchRequest,
-  
-  /**
-   * Whether this app has containers requests that could be satisfied on the
-   * given node, if the node had full space.
-   */
-  public boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {
-    // TODO: add checks stuff about node specific scheduling here
-    ResourceRequest request = app.getResourceRequest(prio, ResourceRequest.ANY);
-    return request.getNumContainers() > 0 && 
-        Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,
-            request.getCapability(), node.getRMNode().getTotalCapability());
-  }
