HDFS-8559. Erasure Coding: fix non-protobuf fsimage for striped blocks. (Jing Zhao via yliu)

-import org.apache.hadoop.hdfs.protocol.HdfsConstants;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStriped;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStripedUnderConstruction;
-import org.apache.hadoop.io.erasurecode.ECSchema;
-    final boolean isStriped = NameNodeLayoutVersion.supports(
-        NameNodeLayoutVersion.Feature.ERASURE_CODING, imgVersion)
-        && (in.readBoolean());
-
-    // TODO: ECSchema can be restored from persisted file (HDFS-7859).
-    final ECSchema schema = isStriped ?
-        ErasureCodingSchemaManager.getSystemDefaultSchema() : null;
-    final BlockInfoContiguous[] blocksContiguous;
-    BlockInfoStriped[] blocksStriped = null;
-    if (isStriped) {
-      blocksContiguous = new BlockInfoContiguous[0];
-      blocksStriped = new BlockInfoStriped[numBlocks];
-      int i = 0;
-      for (; i < numBlocks - 1; i++) {
-        blocksStriped[i] = new BlockInfoStriped(new Block(), schema);
-        blocksStriped[i].readFields(in);
-      }
-      if (numBlocks > 0) {
-        blocksStriped[i] = new BlockInfoStripedUnderConstruction(new Block(),
-            schema, BlockUCState.UNDER_CONSTRUCTION, null);
-        blocksStriped[i].readFields(in);
-      }
-    } else {
-      blocksContiguous = new BlockInfoContiguous[numBlocks];
-      Block blk = new Block();
-      int i = 0;
-      for (; i < numBlocks-1; i++) {
-        blk.readFields(in);
-        blocksContiguous[i] = new BlockInfoContiguous(blk, blockReplication);
-      }
-      // last block is UNDER_CONSTRUCTION
-      if(numBlocks > 0) {
-        blk.readFields(in);
-        blocksContiguous[i] = new BlockInfoContiguousUnderConstruction(
-                blk, blockReplication, BlockUCState.UNDER_CONSTRUCTION, null);
-      }
+    final BlockInfoContiguous[] blocksContiguous =
+        new BlockInfoContiguous[numBlocks];
+    Block blk = new Block();
+    int i = 0;
+    for (; i < numBlocks - 1; i++) {
+      blk.readFields(in);
+      blocksContiguous[i] = new BlockInfoContiguous(blk, blockReplication);
+    }
+    // last block is UNDER_CONSTRUCTION
+    if(numBlocks > 0) {
+      blk.readFields(in);
+      blocksContiguous[i] = new BlockInfoContiguousUnderConstruction(
+          blk, blockReplication, BlockUCState.UNDER_CONSTRUCTION, null);
-    INodeFile file;
-    if (isStriped) {
-      file = new INodeFile(inodeId, name, perm, modificationTime,
-          modificationTime, blocksContiguous, (short) 0, preferredBlockSize);
-      file.addStripedBlocksFeature();
-      for (int i = 0; i < numBlocks; i++) {
-        file.getStripedBlocksFeature().addBlock(blocksStriped[i]);
-      }
-    } else {
-      file = new INodeFile(inodeId, name, perm, modificationTime,
-          modificationTime, blocksContiguous, blockReplication,
-          preferredBlockSize);
-    }
+    INodeFile file = new INodeFile(inodeId, name, perm, modificationTime,
+        modificationTime, blocksContiguous, blockReplication, preferredBlockSize);
-    // whether the file has striped blocks
-    out.writeBoolean(cons.isStriped());
+
-    // whether the file has striped blocks
-    out.writeBoolean(file.isStriped());
+
-      out.writeInt(((INodeReference.DstReference) ref).getDstSnapshotId());
+      out.writeInt(ref.getDstSnapshotId());
