HDFS-4990. Change BlockPlacementPolicy to choose storages instead of datanodes.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1524444 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.StorageType;
-    // TODO: chooseTarget(..) should be changed to return DatanodeStorageInfo's
-    final DatanodeDescriptor chosenDatanodes[] = getBlockManager().chooseTarget( 
+    final DatanodeStorageInfo targets[] = getBlockManager().chooseTarget( 
-    final DatanodeStorageInfo[] targets = new DatanodeStorageInfo[chosenDatanodes.length];
-    for(int i = 0; i < targets.length; i++) {
-      final DatanodeDescriptor dd = chosenDatanodes[i];
-      targets[i] = dd.getStorageInfos().iterator().next(); 
-    }
-    LocatedBlock lBlk = LocatedBlock.createLocatedBlock(
+    LocatedBlock lBlk = new LocatedBlock(
-      final DatanodeInfo[] existings,  final Set<Node> excludes,
+      final DatanodeInfo[] existings, final String[] storageIDs,
+      final Set<Node> excludes,
-    final List<DatanodeDescriptor> chosen;
+    final List<DatanodeStorageInfo> chosen;
-      //find datanode descriptors
-      chosen = new ArrayList<DatanodeDescriptor>();
-      for(DatanodeInfo d : existings) {
-        final DatanodeDescriptor descriptor = blockManager.getDatanodeManager(
-            ).getDatanode(d);
-        if (descriptor != null) {
-          chosen.add(descriptor);
-        }
-      }
+      //find datanode storages
+      final DatanodeManager dm = blockManager.getDatanodeManager();
+      chosen = Arrays.asList(dm.getDatanodeStorageInfos(existings, storageIDs));
-    final DatanodeInfo[] targets = blockManager.getBlockPlacementPolicy(
+    final DatanodeStorageInfo[] targets = blockManager.getBlockPlacementPolicy(
-        excludes, preferredblocksize);
+            // TODO: get storage type from the file
+        excludes, preferredblocksize, StorageType.DEFAULT);
+        String[] storageIDs = blocks[i].getStorageIDs();
-          //TODO: add "storageID to LocatedBlock
-          blockManager.findAndMarkBlockAsCorrupt(blk, nodes[j], "STORAGE_ID", 
+          blockManager.findAndMarkBlockAsCorrupt(blk, nodes[j], storageIDs[j], 
