YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)

-import org.apache.hadoop.yarn.api.protocolrecords
-    .RegisterApplicationMasterResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterResponse;
+/**
+ * This is the response to registering an Application Master when distributed
+ * scheduling is enabled. Apart from the
+ * {@link RegisterApplicationMasterResponse}, it includes various parameters
+ * to be used during distributed scheduling, such as the min and max resources
+ * that can be requested by containers.
+ */
-public abstract class DistSchedRegisterResponse {
+public abstract class RegisterDistributedSchedulingAMResponse {
-  public static DistSchedRegisterResponse newInstance
+  public static RegisterDistributedSchedulingAMResponse newInstance
-    DistSchedRegisterResponse response =
-        Records.newRecord(DistSchedRegisterResponse.class);
+    RegisterDistributedSchedulingAMResponse response =
+        Records.newRecord(RegisterDistributedSchedulingAMResponse.class);
-  public abstract void setMinAllocatableCapabilty(Resource minResource);
+  public abstract void setMinContainerResource(Resource minResource);
-  public abstract Resource getMinAllocatableCapabilty();
+  public abstract Resource getMinContainerResource();
-  public abstract void setMaxAllocatableCapabilty(Resource maxResource);
+  public abstract void setMaxContainerResource(Resource maxResource);
-  public abstract Resource getMaxAllocatableCapabilty();
+  public abstract Resource getMaxContainerResource();
-  public abstract void setIncrAllocatableCapabilty(Resource maxResource);
+  public abstract void setIncrContainerResource(Resource maxResource);
-  public abstract Resource getIncrAllocatableCapabilty();
+  public abstract Resource getIncrContainerResource();
