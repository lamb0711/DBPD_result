HDDS-643. Parse Authorization header in a separate filter. Contributed by Bharat Viswanadham.

-import javax.ws.rs.core.Context;
-import javax.ws.rs.core.HttpHeaders;
-import org.apache.hadoop.ozone.s3.header.AuthorizationHeaderV2;
-import org.apache.hadoop.ozone.s3.header.AuthorizationHeaderV4;
+import org.apache.hadoop.ozone.s3.header.AuthenticationHeaderParser;
+  @Inject
+  private AuthenticationHeaderParser authenticationHeaderParser;
+
-  /**
-   * Retrieve the username based on the authorization header.
-   *
-   * @param httpHeaders
-   * @return Identified username
-   * @throws OS3Exception
-   */
-  public String parseUsername(
-      @Context HttpHeaders httpHeaders) throws OS3Exception {
-    String auth = httpHeaders.getHeaderString("Authorization");
-    LOG.info("Auth header string {}", auth);
+  public AuthenticationHeaderParser getAuthenticationHeaderParser() {
+    return authenticationHeaderParser;
+  }
-    if (auth == null) {
-      // In this case, adding resource as Authorization, need to revisit in
-      // future if it needs to be changed.
-      throw S3ErrorTable
-          .newError(S3ErrorTable.MALFORMED_HEADER, "Authorization");
-    }
-
-    String userName;
-    if (auth.startsWith("AWS4")) {
-      LOG.info("V4 Header {}", auth);
-      AuthorizationHeaderV4 authorizationHeader = new AuthorizationHeaderV4(
-          auth);
-      userName = authorizationHeader.getAccessKeyID().toLowerCase();
-    } else {
-      LOG.info("V2 Header {}", auth);
-      AuthorizationHeaderV2 authorizationHeader = new AuthorizationHeaderV2(
-          auth);
-      userName = authorizationHeader.getAccessKeyID().toLowerCase();
-    }
-    return userName;
+  @VisibleForTesting
+  public void setAuthenticationHeaderParser(AuthenticationHeaderParser parser) {
+    this.authenticationHeaderParser = parser;
-
