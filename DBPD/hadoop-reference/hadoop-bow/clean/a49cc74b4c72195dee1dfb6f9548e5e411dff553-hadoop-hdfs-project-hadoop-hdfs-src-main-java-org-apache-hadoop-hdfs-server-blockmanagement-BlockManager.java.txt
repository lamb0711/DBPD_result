HDFS-9129. Move the safemode block count into BlockManager. Contributed by Mingliang Liu.

+import org.apache.hadoop.hdfs.server.namenode.INode.BlocksMapUpdateInfo;
+  private final BlockManagerSafeMode bmSafeMode;
+
+    bmSafeMode = new BlockManagerSafeMode(this, namesystem, conf);
+
-  public void activate(Configuration conf) {
+  public void activate(Configuration conf, long blockTotal) {
+    bmSafeMode.activate(blockTotal);
+    bmSafeMode.close();
-    namesystem.adjustSafeModeBlockTotals(0, 1);
+    bmSafeMode.adjustBlockTotals(0, 1);
-    namesystem.incrementSafeBlockCount(
-        Math.min(numNodes, minStorage), curBlock);
+    bmSafeMode.incrementSafeBlockCount(Math.min(numNodes, minStorage),
+        curBlock);
-    namesystem.adjustSafeModeBlockTotals(
+    bmSafeMode.adjustBlockTotals(
-    namesystem.checkSafeMode();
+    checkSafeMode();
+  public void registerDatanode(DatanodeRegistration nodeReg)
+      throws IOException {
+    assert namesystem.hasWriteLock();
+    datanodeManager.registerDatanode(nodeReg);
+    bmSafeMode.checkSafeMode();
+  }
+
+  /**
+   * Set the total number of blocks in the system.
+   * If safe mode is not currently on, this is a no-op.
+   */
+  public void setBlockTotal(long total) {
+    if (bmSafeMode.isInSafeMode()) {
+      bmSafeMode.setBlockTotal(total);
+      bmSafeMode.checkSafeMode();
+    }
+  }
+
+  public boolean isInSafeMode() {
+    return bmSafeMode.isInSafeMode();
+  }
+
+  public String getSafeModeTip() {
+    return bmSafeMode.getSafeModeTip();
+  }
+
+  public void leaveSafeMode(boolean force) {
+    bmSafeMode.leaveSafeMode(force);
+  }
+
+  void checkSafeMode() {
+    bmSafeMode.checkSafeMode();
+  }
+
+  /**
+   * Removes the blocks from blocksmap and updates the safemode blocks total.
+   * @param blocks An instance of {@link BlocksMapUpdateInfo} which contains a
+   *               list of blocks that need to be removed from blocksMap
+   */
+  public void removeBlocksAndUpdateSafemodeTotal(BlocksMapUpdateInfo blocks) {
+    assert namesystem.hasWriteLock();
+    // In the case that we are a Standby tailing edits from the
+    // active while in safe-mode, we need to track the total number
+    // of blocks and safe blocks in the system.
+    boolean trackBlockCounts = bmSafeMode.isSafeModeTrackingBlocks();
+    int numRemovedComplete = 0, numRemovedSafe = 0;
+
+    for (BlockInfo b : blocks.getToDeleteList()) {
+      if (trackBlockCounts) {
+        if (b.isComplete()) {
+          numRemovedComplete++;
+          if (hasMinStorage(b, b.numNodes())) {
+            numRemovedSafe++;
+          }
+        }
+      }
+      removeBlock(b);
+    }
+    if (trackBlockCounts) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Adjusting safe-mode totals for deletion."
+            + "decreasing safeBlocks by " + numRemovedSafe
+            + ", totalBlocks by " + numRemovedComplete);
+      }
+      bmSafeMode.adjustBlockTotals(-numRemovedSafe, -numRemovedComplete);
+    }
+  }
+
-          namesystem.incrementSafeBlockCount(numOfReplicas, storedBlock);
+          bmSafeMode.incrementSafeBlockCount(numOfReplicas, storedBlock);
-      namesystem.incrementSafeBlockCount(numCurrentReplica, storedBlock);
+      bmSafeMode.incrementSafeBlockCount(numCurrentReplica, storedBlock);
-      namesystem.incrementSafeBlockCount(numCurrentReplica, storedBlock);
+      bmSafeMode.incrementSafeBlockCount(numCurrentReplica, storedBlock);
-        namesystem.decrementSafeBlockCount(storedBlock);
+        bmSafeMode.decrementSafeBlockCount(storedBlock);
