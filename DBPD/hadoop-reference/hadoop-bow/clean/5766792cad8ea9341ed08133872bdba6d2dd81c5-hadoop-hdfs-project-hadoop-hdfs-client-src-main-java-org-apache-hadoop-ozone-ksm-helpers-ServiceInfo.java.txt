HDFS-12870. Ozone: Service Discovery: REST endpoint in KSM for getServiceList. Contributed by Nanda kumar.

+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.ObjectReader;
+import com.fasterxml.jackson.databind.ObjectWriter;
+import org.apache.hadoop.ozone.client.rest.response.BucketInfo;
+import java.io.IOException;
+  private static final ObjectReader READER =
+      new ObjectMapper().readerFor(ServiceInfo.class);
+  private static final ObjectWriter WRITER =
+      new ObjectMapper().writerWithDefaultPrettyPrinter();
+
-  private final NodeType nodeType;
+  private NodeType nodeType;
-  private final String hostname;
+  private String hostname;
-  private final Map<ServicePort.Type, ServicePort> portsMap;
+  private Map<ServicePort.Type, Integer> ports;
+
+  /**
+   * Default constructor for JSON deserialization.
+   */
+  public ServiceInfo() {}
-   * @param ports list of ports the service listens to
+   * @param portList list of ports the service listens to
-      NodeType nodeType, String hostname, List<ServicePort> ports) {
+      NodeType nodeType, String hostname, List<ServicePort> portList) {
-    this.portsMap = new HashMap<>();
-    for (ServicePort port : ports) {
-      portsMap.put(port.getType(), port);
+    this.ports = new HashMap<>();
+    for (ServicePort port : portList) {
+      ports.put(port.getType(), port.getValue());
-   * Returns the list of port which the service listens to.
-   * @return List<ServicePort>
+   * Returns ServicePort.Type to port mappings.
+   * @return ports
-  public List<ServicePort> getPorts() {
-    return portsMap.values().parallelStream().collect(Collectors.toList());
+  public Map<ServicePort.Type, Integer> getPorts() {
+    return ports;
+  @JsonIgnore
-    return portsMap.get(type).getValue();
+    return ports.get(type);
+  @JsonIgnore
-        .addAllServicePorts(portsMap.values());
+        .addAllServicePorts(
+            ports.entrySet().stream()
+                .map(
+                    entry ->
+                        ServicePort.newBuilder()
+                            .setType(entry.getKey())
+                            .setValue(entry.getValue()).build())
+                .collect(Collectors.toList()));
+  @JsonIgnore
+  /**
+   * Returns a JSON string of this object.
+   *
+   * @return String - json string
+   * @throws IOException
+   */
+  public String toJsonString() throws IOException {
+    return WRITER.writeValueAsString(this);
+  }
+
+  /**
+   * Parse a JSON string into ServiceInfo Object.
+   *
+   * @param jsonString Json String
+   * @return BucketInfo
+   * @throws IOException
+   */
+  public static BucketInfo parse(String jsonString) throws IOException {
+    return READER.readValue(jsonString);
+  }
-    private List<ServicePort> ports = new ArrayList<>();
+    private List<ServicePort> portList = new ArrayList<>();
-      ports.add(servicePort);
+      portList.add(servicePort);
-      return new ServiceInfo(node, host, ports);
+      return new ServiceInfo(node, host, portList);
