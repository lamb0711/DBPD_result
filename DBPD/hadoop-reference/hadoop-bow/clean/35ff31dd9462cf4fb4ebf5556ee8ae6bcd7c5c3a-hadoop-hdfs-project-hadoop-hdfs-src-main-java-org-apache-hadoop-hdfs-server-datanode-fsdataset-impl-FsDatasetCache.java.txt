HDFS-14355 : Implement HDFS cache on SCM by using pure java mapped byte buffer. Contributed by Feilong He.

+import com.google.common.annotations.VisibleForTesting;
-import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.server.datanode.DNConf;
+import org.apache.hadoop.util.ReflectionUtils;
-  private final MappableBlockLoader mappableBlockLoader;
+  /**
+   * A specific cacheLoader could cache block either to DRAM or
+   * to persistent memory.
+   */
+  private final MappableBlockLoader cacheLoader;
-
-    this.mappableBlockLoader = new MemoryMappableBlockLoader(this);
+
+    Class<? extends MappableBlockLoader> cacheLoaderClass =
+        dataset.datanode.getDnConf().getCacheLoaderClass();
+    this.cacheLoader = ReflectionUtils.newInstance(cacheLoaderClass, null);
+    cacheLoader.initialize(this);
+  }
+
+  /**
+   * Check if pmem cache is enabled.
+   */
+  private boolean isPmemCacheEnabled() {
+    return !cacheLoader.isTransientCache();
+  }
+
+  DNConf getDnConf() {
+    return this.dataset.datanode.getDnConf();
+  }
+
+  MemoryCacheStats getMemCacheStats() {
+    return memCacheStats;
+  }
+
+  /**
+   * Get the cache path if the replica is cached into persistent memory.
+   */
+  String getReplicaCachePath(String bpid, long blockId) {
+    if (cacheLoader.isTransientCache() ||
+        !isCached(bpid, blockId)) {
+      return null;
+    }
+    ExtendedBlockId key = new ExtendedBlockId(blockId, bpid);
+    return cacheLoader.getCachedPath(key);
-      long newUsedBytes = mappableBlockLoader.reserve(length);
+      long newUsedBytes = cacheLoader.reserve(length);
-              DFSConfigKeys.DFS_DATANODE_MAX_LOCKED_MEMORY_KEY +
-              " of " + memCacheStats.getCacheCapacity() + " exceeded.");
+              cacheLoader.getCacheCapacityConfigKey() +
+              " of " + cacheLoader.getCacheCapacity() + " exceeded.");
+
-          mappableBlock = mappableBlockLoader.load(length, blockIn, metaIn,
+          mappableBlock = cacheLoader.load(length, blockIn, metaIn,
+
-            mappableBlockLoader.release(length);
+            cacheLoader.release(length);
-      long newUsedBytes = mappableBlockLoader
-          .release(value.mappableBlock.getLength());
+      long newUsedBytes = cacheLoader.release(value.mappableBlock.getLength());
-   * Get the approximate amount of cache space used.
+   * Get the approximate amount of DRAM cache space used.
-   * Get the maximum amount of bytes we can cache.  This is a constant.
+   * Get the approximate amount of persistent memory cache space used.
+   * TODO: advertise this metric to NameNode by FSDatasetMBean
+   */
+  public long getPmemCacheUsed() {
+    if (isPmemCacheEnabled()) {
+      return cacheLoader.getCacheUsed();
+    }
+    return 0;
+  }
+
+  /**
+   * Get the maximum amount of bytes we can cache on DRAM.  This is a constant.
+  /**
+   * Get cache capacity of persistent memory.
+   * TODO: advertise this metric to NameNode by FSDatasetMBean
+   */
+  public long getPmemCacheCapacity() {
+    if (isPmemCacheEnabled()) {
+      return cacheLoader.getCacheCapacity();
+    }
+    return 0;
+  }
+
+
+  @VisibleForTesting
+  MappableBlockLoader getCacheLoader() {
+    return cacheLoader;
+  }
