YARN-7585. NodeManager should go unhealthy when state store throws DBException. Contributed by Wilfred Spiegelenburg.

+import org.apache.hadoop.yarn.server.nodemanager.NodeStatusUpdater;
+  private boolean isHealthy;
+    // Assume that we're healthy when we start
+    isHealthy = true;
+  /**
+   * If the state store throws an error after recovery has been performed
+   * then we can not trust it any more to reflect the NM state. We need to
+   * mark the store and node unhealthy.
+   * Errors during the recovery will cause a service failure and thus a NM
+   * start failure. Do not need to mark the store unhealthy for those.
+   * @param dbErr Exception
+   */
+  private void markStoreUnHealthy(DBException dbErr) {
+    // Always log the error here, we might not see the error in the caller
+    LOG.error("Statestore exception: ", dbErr);
+    // We have already been marked unhealthy so no need to do it again.
+    if (!isHealthy) {
+      return;
+    }
+    // Mark unhealthy, an out of band heartbeat will be sent and the state
+    // will remain unhealthy (not recoverable).
+    // No need to close the store: does not make any difference at this point.
+    isHealthy = false;
+    // We could get here before the nodeStatusUpdater is set
+    NodeStatusUpdater nsu = getNodeStatusUpdater();
+    if (nsu != null) {
+      nsu.reportException(dbErr);
+    }
+  }
+
+  @VisibleForTesting
+  boolean isHealthy() {
+    return isHealthy;
+  }
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+        markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+      markStoreUnHealthy(e);
+  @VisibleForTesting
+  void setDB(DB testDb) {
+    this.db = testDb;
+  }
+
