Revert "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen."

This reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.

-
-import org.apache.hadoop.fs.BlockLocation;
-import org.apache.hadoop.hdfs.DistributedFileSystem;
-import java.util.LinkedList;
-      DistCpOptions options) {
+                                                                 DistCpOptions options) {
-   * Converts FileStatus to a list of CopyListingFileStatus.
-   * The resulted list contains either one CopyListingFileStatus per chunk of
-   * file-blocks (if file-size exceeds blockSize * blocksPerChunk, and there
-   * are more blocks in the file than blocksperChunk), or a single
-   * CopyListingFileStatus for the entire file (if file-size is too small to
-   * split).
-   * If preserving ACLs, populates the CopyListingFileStatus with the ACLs.
-   * If preserving XAttrs, populates the CopyListingFileStatus with the XAttrs.
-   *
-   * @param fileSystem FileSystem containing the file
-   * @param fileStatus FileStatus of file
-   * @param preserveAcls boolean true if preserving ACLs
-   * @param preserveXAttrs boolean true if preserving XAttrs
-   * @param preserveRawXAttrs boolean true if preserving raw.* XAttrs
-   * @param blocksPerChunk size of chunks when copying chunks in parallel
-   * @return list of CopyListingFileStatus
-   * @throws IOException if there is an I/O error
-   */
-  public static LinkedList<CopyListingFileStatus> toCopyListingFileStatus(
-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,
-      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)
-          throws IOException {
-    LinkedList<CopyListingFileStatus> copyListingFileStatus =
-        new LinkedList<CopyListingFileStatus>();
-
-    final CopyListingFileStatus clfs = toCopyListingFileStatusHelper(
-        fileSystem, fileStatus, preserveAcls,
-        preserveXAttrs, preserveRawXAttrs,
-        0, fileStatus.getLen());
-    final long blockSize = fileStatus.getBlockSize();
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("toCopyListing: " + fileStatus + " chunkSize: "
-          + blocksPerChunk + " isDFS: " +
-          (fileSystem instanceof DistributedFileSystem));
-    }
-    if ((blocksPerChunk > 0) &&
-        !fileStatus.isDirectory() &&
-        (fileStatus.getLen() > blockSize * blocksPerChunk)) {
-      // split only when the file size is larger than the intended chunk size
-      final BlockLocation[] blockLocations;
-      blockLocations = fileSystem.getFileBlockLocations(fileStatus, 0,
-            fileStatus.getLen());
-
-      int numBlocks = blockLocations.length;
-      long curPos = 0;
-      if (numBlocks <= blocksPerChunk) {
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("  add file " + clfs);
-        }
-        copyListingFileStatus.add(clfs);
-      } else {
-        int i = 0;
-        while (i < numBlocks) {
-          long curLength = 0;
-          for (int j = 0; j < blocksPerChunk && i < numBlocks; ++j, ++i) {
-            curLength += blockLocations[i].getLength();
-          }
-          if (curLength > 0) {
-            CopyListingFileStatus clfs1 = new CopyListingFileStatus(clfs);
-            clfs1.setChunkOffset(curPos);
-            clfs1.setChunkLength(curLength);
-            if (LOG.isDebugEnabled()) {
-              LOG.debug("  add file chunk " + clfs1);
-            }
-            copyListingFileStatus.add(clfs1);
-            curPos += curLength;
-          }
-        }
-      }
-    } else {
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("  add file/dir " + clfs);
-      }
-      copyListingFileStatus.add(clfs);
-    }
-
-    return copyListingFileStatus;
-  }
-
-  /**
-   * @param chunkOffset chunk offset in bytes
-   * @param chunkLength chunk length in bytes
-   * @return CopyListingFileStatus
-  public static CopyListingFileStatus toCopyListingFileStatusHelper(
+  public static CopyListingFileStatus toCopyListingFileStatus(
-      boolean preserveXAttrs, boolean preserveRawXAttrs,
-      long chunkOffset, long chunkLength) throws IOException {
+      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {
-        new CopyListingFileStatus(fileStatus, chunkOffset, chunkLength);
+      new CopyListingFileStatus(fileStatus);
-
-  /*
-   * Return the Path for a given chunk.
-   * Used when splitting large file into chunks to copy in parallel.
-   * @param targetFile path to target file
-   * @param srcFileStatus source file status in copy listing
-   * @return path to the chunk specified by the parameters to store
-   * in target cluster temporarily
-   */
-  public static Path getSplitChunkPath(Path targetFile,
-      CopyListingFileStatus srcFileStatus) {
-    return new Path(targetFile.toString()
-        + ".____distcpSplit____" + srcFileStatus.getChunkOffset()
-        + "." + srcFileStatus.getChunkLength());
-  }
