YARN-9562. Add Java changes for the new RuncContainerRuntime. Contributed by Eric Badger

+import org.apache.hadoop.yarn.api.records.LocalResource;
+import java.io.IOException;
+  private RuncContainerRuntime runcContainerRuntime;
+        LinuxContainerRuntimeConstants.RuntimeType.RUNC.name())) {
+      runcContainerRuntime = new RuncContainerRuntime(
+          PrivilegedOperationExecutor.getInstance(conf));
+      runcContainerRuntime.initialize(conf, nmContext);
+    }
+    if (isRuntimeAllowed(
+    } else if (runcContainerRuntime != null &&
+        runcContainerRuntime.isRuntimeRequested(environment)) {
+      runtime = runcContainerRuntime;
+
+
+  @Override
+  public Map<String, LocalResource> getLocalResources(Container container)
+      throws IOException {
+    try {
+      LinuxContainerRuntime runtime = pickContainerRuntime(container);
+      return runtime.getLocalResources(container);
+    } catch (ContainerExecutionException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public void start() {
+    if (isRuntimeAllowed(
+        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {
+      javaSandboxLinuxContainerRuntime.start();
+    }
+    if (isRuntimeAllowed(
+        LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {
+      dockerLinuxContainerRuntime.start();
+    }
+    if (isRuntimeAllowed(
+        LinuxContainerRuntimeConstants.RuntimeType.RUNC.name())) {
+      runcContainerRuntime.start();
+    }
+    if (isRuntimeAllowed(
+        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {
+      defaultLinuxContainerRuntime.start();
+    }
+
+  }
+
+  @Override
+  public void stop() {
+    if (isRuntimeAllowed(
+        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {
+      javaSandboxLinuxContainerRuntime.stop();
+    }
+    if (isRuntimeAllowed(
+        LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {
+      dockerLinuxContainerRuntime.stop();
+    }
+    if (isRuntimeAllowed(
+        LinuxContainerRuntimeConstants.RuntimeType.RUNC.name())) {
+      runcContainerRuntime.stop();
+    }
+    if (isRuntimeAllowed(
+        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {
+      defaultLinuxContainerRuntime.stop();
+    }
+
+  }
+
