HDFS-2265. Remove unnecessary BlockTokenSecretManager fields/methods from BlockManager.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1158743 13f79535-47bb-0310-9956-ffa450edef68

+  private final DatanodeManager datanodeManager;
+  private final HeartbeatManager heartbeatManager;
+  private final BlockTokenSecretManager blockTokenSecretManager;
+
-  private boolean isBlockTokenEnabled;
-  private long blockKeyUpdateInterval;
-  private long blockTokenLifetime;
-  private BlockTokenSecretManager blockTokenSecretManager;
-
-  /** get the BlockTokenSecretManager */
-  public BlockTokenSecretManager getBlockTokenSecretManager() {
-    return blockTokenSecretManager;
-  }
-  private final DatanodeManager datanodeManager;
-  private final HeartbeatManager heartbeatManager;
-
-    this.isBlockTokenEnabled = conf.getBoolean(
-        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, 
-        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT);
-    if (isBlockTokenEnabled) {
-      if (isBlockTokenEnabled) {
-        this.blockKeyUpdateInterval = conf.getLong(
-            DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY, 
-            DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_DEFAULT) * 60 * 1000L; // 10 hrs
-        this.blockTokenLifetime = conf.getLong(
-            DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY, 
-            DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_DEFAULT) * 60 * 1000L; // 10 hrs
-      }
-   
-      blockTokenSecretManager = new BlockTokenSecretManager(true,
-          blockKeyUpdateInterval, blockTokenLifetime);
-    }
-    LOG.info("isBlockTokenEnabled=" + isBlockTokenEnabled
-        + " blockKeyUpdateInterval=" + blockKeyUpdateInterval / (60 * 1000)
-        + " min(s), blockTokenLifetime=" + blockTokenLifetime / (60 * 1000)
-        + " min(s)");
+
+    blockTokenSecretManager = createBlockTokenSecretManager(conf);
+
+  private static BlockTokenSecretManager createBlockTokenSecretManager(
+      final Configuration conf) throws IOException {
+    final boolean isEnabled = conf.getBoolean(
+        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, 
+        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT);
+    LOG.info(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY + "=" + isEnabled);
+
+    if (!isEnabled) {
+      return null;
+    }
+
+    final long updateMin = conf.getLong(
+        DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY, 
+        DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_DEFAULT);
+    final long lifetimeMin = conf.getLong(
+        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY, 
+        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_DEFAULT);
+    LOG.info(DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY
+        + "=" + updateMin + " min(s), "
+        + DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY
+        + "=" + lifetimeMin + " min(s)");
+    return new BlockTokenSecretManager(true,
+        updateMin*60*1000L, lifetimeMin*60*1000L);
+  }
+
+  /** get the BlockTokenSecretManager */
+  BlockTokenSecretManager getBlockTokenSecretManager() {
+    return blockTokenSecretManager;
+  }
+
+  private boolean isBlockTokenEnabled() {
+    return blockTokenSecretManager != null;
+  }
+
+  /** Should the access keys be updated? */
+  boolean shouldUpdateBlockKey(final long updateTime) throws IOException {
+    return isBlockTokenEnabled()? blockTokenSecretManager.updateKeys(updateTime)
+        : false;
+  }
+
-      if (isBlockTokenEnabled && needBlockToken) {
+      if (isBlockTokenEnabled() && needBlockToken) {
-    return isBlockTokenEnabled? blockTokenSecretManager.exportKeys()
+    return isBlockTokenEnabled()? blockTokenSecretManager.exportKeys()
-    if (isBlockTokenEnabled) {
+    if (isBlockTokenEnabled()) {
-    if (isBlockTokenEnabled && nodeinfo.needKeyUpdate) {
+    if (isBlockTokenEnabled() && nodeinfo.needKeyUpdate) {
-
-  /** Should the access keys be updated? */
-  boolean shouldUpdateBlockKey(final long updateTime) throws IOException {
-    final boolean b = isBlockTokenEnabled && blockKeyUpdateInterval < updateTime;
-    if (b) {
-      blockTokenSecretManager.updateKeys();
-    }
-    return b;
-  }
-
