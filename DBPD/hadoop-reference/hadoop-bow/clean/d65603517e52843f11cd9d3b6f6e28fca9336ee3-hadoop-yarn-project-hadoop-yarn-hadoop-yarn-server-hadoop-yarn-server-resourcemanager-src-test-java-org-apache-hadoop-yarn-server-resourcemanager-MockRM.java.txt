YARN-5375. invoke MockRM#drainEvents implicitly in MockRM methods to reduce test failures. Contributed by sandflee.

+import org.apache.hadoop.yarn.event.EventHandler;
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.MemoryRMStateStore;
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.NullRMStateStore;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.SchedulerEvent;
+  private boolean disableDrainEventsImplicitly;
-    if(store != null) {
+    if (store != null) {
+    } else {
+      Class storeClass = getRMContext().getStateStore().getClass();
+      if (storeClass.equals(MemoryRMStateStore.class)) {
+        MockRMMemoryStateStore mockStateStore = new MockRMMemoryStateStore();
+        mockStateStore.init(conf);
+        setRMStateStore(mockStateStore);
+      } else if (storeClass.equals(NullRMStateStore.class)) {
+        MockRMNullStateStore mockStateStore = new MockRMNullStateStore();
+        mockStateStore.init(conf);
+        setRMStateStore(mockStateStore);
+      }
+    disableDrainEventsImplicitly = false;
-  
+
+  public class MockRMMemoryStateStore extends MemoryRMStateStore {
+    @SuppressWarnings("rawtypes")
+    @Override
+    protected EventHandler getRMStateStoreEventHandler() {
+      return rmStateStoreEventHandler;
+    }
+  }
+
+  public class MockRMNullStateStore extends NullRMStateStore {
+    @SuppressWarnings("rawtypes")
+    @Override
+    protected EventHandler getRMStateStoreEventHandler() {
+      return rmStateStoreEventHandler;
+    }
+  }
+
+  @Override
+  protected EventHandler<SchedulerEvent> createSchedulerEventDispatcher() {
+    return new EventHandler<SchedulerEvent>() {
+      @Override
+      public void handle(SchedulerEvent event) {
+        scheduler.handle(event);
+      }
+    };
+  }
+
+    drainEventsImplicitly();
+    drainEventsImplicitly();
+    drainEventsImplicitly();
+    drainEventsImplicitly();
+    drainEventsImplicitly();
+      drainEventsImplicitly();
+      drainEventsImplicitly();
-    drainEvents();
+    drainEventsImplicitly();
-    drainEvents();
+    drainEventsImplicitly();
-    drainEvents();
+    drainEventsImplicitly();
+    drainEventsImplicitly();
+    drainEventsImplicitly();
+    drainEventsImplicitly();
-    return client.forceKillApplication(req);
+    KillApplicationResponse response = client.forceKillApplication(req);
+    drainEventsImplicitly();
+    return response;
-    return client.failApplicationAttempt(req);
+    FailApplicationAttemptResponse response =
+        client.failApplicationAttempt(req);
+    drainEventsImplicitly();
+    return response;
+    drainEventsImplicitly();
+    drainEventsImplicitly();
+    rm.drainEventsImplicitly();
+    rm.drainEventsImplicitly();
+    rm.drainEventsImplicitly();
+    rm.drainEventsImplicitly();
+    rm.drainEventsImplicitly();
+    rm.drainEventsImplicitly();
+    drainEventsImplicitly();
+    drainEventsImplicitly();
+    drainEventsImplicitly();
+  private void drainEventsImplicitly() {
+    if (!disableDrainEventsImplicitly) {
+      drainEvents();
+    }
+  }
+
+  public void disableDrainEventsImplicitly() {
+    disableDrainEventsImplicitly = true;
+  }
+
+  public void enableDrainEventsImplicityly() {
+    disableDrainEventsImplicitly = false;
+  }
+
