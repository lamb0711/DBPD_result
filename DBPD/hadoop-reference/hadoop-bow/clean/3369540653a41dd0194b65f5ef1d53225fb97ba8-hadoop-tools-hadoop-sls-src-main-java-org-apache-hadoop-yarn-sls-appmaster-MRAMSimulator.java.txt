HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.

-import java.text.MessageFormat;
-
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  public final Logger LOG = Logger.getLogger(MRAMSimulator.class);
+  private static final Logger LOG =
+      LoggerFactory.getLogger(MRAMSimulator.class);
-    LOG.info(MessageFormat
-        .format("Added new job with {0} mapper and {1} reducers",
-            allMaps.size(), allReduces.size()));
+    LOG.info("Added new job with {} mapper and {} reducers",
+        allMaps.size(), allReduces.size());
-              LOG.debug(MessageFormat.format("Application {0} has one" +
-                      "mapper finished ({1}).", appId, containerId));
+              LOG.debug("Application {} has one mapper finished ({}).",
+                  appId, containerId);
-              LOG.debug(MessageFormat.format("Application {0} has one" +
-                      "reducer finished ({1}).", appId, containerId));
+              LOG.debug("Application {} has one reducer finished ({}).",
+                  appId, containerId);
-              LOG.info(MessageFormat.format("Application {0} goes to " +
-                      "finish.", appId));
+              LOG.info("Application {} goes to finish.", appId);
-              LOG.debug(MessageFormat.format("Application {0} has one " +
-                      "mapper killed ({1}).", appId, containerId));
+              LOG.debug("Application {} has one mapper killed ({}).",
+                  appId, containerId);
-              LOG.debug(MessageFormat.format("Application {0} has one " +
-                      "reducer killed ({1}).", appId, containerId));
+              LOG.debug("Application {} has one reducer killed ({}).",
+                  appId, containerId);
-              LOG.info(MessageFormat.format("Application {0}'s AM is " +
-                      "going to be killed. Waiting for rescheduling...", appId));
+              LOG.info("Application {}'s AM is " +
+                  "going to be killed. Waiting for rescheduling...", appId);
-        LOG.debug(MessageFormat.format("Application {0} sends out event " +
-                "to clean up its AM container.", appId));
+        LOG.debug("Application {} sends out event to clean up"
+            + " its AM container.", appId);
-          LOG.debug(MessageFormat.format("Application {0} starts a " +
-                  "launch a mapper ({1}).", appId, container.getId()));
+          LOG.debug("Application {} starts to launch a mapper ({}).",
+              appId, container.getId());
-          LOG.debug(MessageFormat.format("Application {0} starts a " +
-                  "launch a reducer ({1}).", appId, container.getId()));
+          LOG.debug("Application {} starts to launch a reducer ({}).",
+              appId, container.getId());
-        LOG.debug(MessageFormat
-            .format("Application {0} sends out " + "request for {1} mappers.",
-                appId, pendingMaps.size()));
+        LOG.debug("Application {} sends out request for {} mappers.",
+            appId, pendingMaps.size());
-        LOG.debug(MessageFormat.format(
-            "Application {0} sends out " + "requests for {1} failed mappers.",
-            appId, pendingFailedMaps.size()));
+        LOG.debug("Application {} sends out requests for {} failed mappers.",
+            appId, pendingFailedMaps.size());
-        LOG.debug(MessageFormat
-            .format("Application {0} sends out " + "requests for {1} reducers.",
-                appId, pendingReduces.size()));
+        LOG.debug("Application {} sends out requests for {} reducers.",
+                appId, pendingReduces.size());
-        LOG.debug(MessageFormat.format(
-            "Application {0} sends out " + "request for {1} failed reducers.",
-            appId, pendingFailedReduces.size()));
+        LOG.debug("Application {} sends out request for {} failed reducers.",
+            appId, pendingFailedReduces.size());
