HDDS-1379. Convert all OM Volume related operations to HA model. (#689)



+import org.apache.hadoop.ozone.om.helpers.OmDeleteVolumeResponse;
+import org.apache.hadoop.ozone.om.helpers.OmVolumeOwnerChangeResponse;
-import org.apache.hadoop.utils.RocksDBStore;
-import org.rocksdb.RocksDBException;
+
+  private final boolean isRatisEnabled;
-      OzoneConfiguration conf) throws IOException {
+      OzoneConfiguration conf) {
+    isRatisEnabled = conf.getBoolean(
+        OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY,
+        OMConfigKeys.OZONE_OM_RATIS_ENABLE_DEFAULT);
-  private void addVolumeToOwnerList(String volume, String owner,
-      BatchOperation batchOperation) throws IOException {
+  private VolumeList addVolumeToOwnerList(String volume, String owner)
+      throws IOException {
-      throw new OMException(ResultCodes.USER_TOO_MANY_VOLUMES);
+      throw new OMException("Too many volumes for user:" + owner,
+          ResultCodes.USER_TOO_MANY_VOLUMES);
-    metadataManager.getUserTable().putWithBatch(batchOperation,
-        dbUserKey, newVolList);
+
+    return newVolList;
-  private void delVolumeFromOwnerList(String volume, String owner,
-      BatchOperation batch) throws RocksDBException, IOException {
+  private VolumeList delVolumeFromOwnerList(String volume, String owner)
+      throws IOException {
-    String dbUserKey = metadataManager.getUserKey(owner);
-    VolumeList volumeList = metadataManager.getUserTable().get(dbUserKey);
+    VolumeList volumeList = metadataManager.getUserTable().get(owner);
-    if (prevVolList.size() == 0) {
-      metadataManager.getUserTable().deleteWithBatch(batch, dbUserKey);
-    } else {
-      VolumeList newVolList = VolumeList.newBuilder()
-          .addAllVolumeNames(prevVolList).build();
-      metadataManager.getUserTable().putWithBatch(batch,
-          dbUserKey, newVolList);
-    }
+    VolumeList newVolList = VolumeList.newBuilder()
+        .addAllVolumeNames(prevVolList).build();
+    return newVolList;
-   * @param args - OmVolumeArgs.
+   * @param omVolumeArgs - OmVolumeArgs.
+   * @return VolumeList
-  public void createVolume(OmVolumeArgs args) throws IOException {
-    Preconditions.checkNotNull(args);
-    metadataManager.getLock().acquireUserLock(args.getOwnerName());
-    metadataManager.getLock().acquireVolumeLock(args.getVolume());
+  public VolumeList createVolume(OmVolumeArgs omVolumeArgs) throws IOException {
+    Preconditions.checkNotNull(omVolumeArgs);
+    metadataManager.getLock().acquireUserLock(omVolumeArgs.getOwnerName());
+    metadataManager.getLock().acquireVolumeLock(omVolumeArgs.getVolume());
-      String dbVolumeKey = metadataManager.getVolumeKey(args.getVolume());
+      String dbVolumeKey = metadataManager.getVolumeKey(
+          omVolumeArgs.getVolume());
+      String dbUserKey = metadataManager.getUserKey(
+          omVolumeArgs.getOwnerName());
-        LOG.debug("volume:{} already exists", args.getVolume());
+        LOG.debug("volume:{} already exists", omVolumeArgs.getVolume());
-      try (BatchOperation batch = metadataManager.getStore()
-          .initBatchOperation()) {
-        // Write the vol info
-        metadataManager.getVolumeTable().putWithBatch(batch,
-            dbVolumeKey, args);
+      VolumeList volumeList = addVolumeToOwnerList(omVolumeArgs.getVolume(),
+          omVolumeArgs.getOwnerName());
-        // Add volume to user list
-        addVolumeToOwnerList(args.getVolume(), args.getOwnerName(), batch);
-        metadataManager.getStore().commitBatchOperation(batch);
+      // Set creation time
+      omVolumeArgs.setCreationTime(System.currentTimeMillis());
+
+      if (!isRatisEnabled) {
+        createVolumeCommitToDB(omVolumeArgs, volumeList, dbVolumeKey,
+            dbUserKey);
-      LOG.debug("created volume:{} user:{}", args.getVolume(),
-          args.getOwnerName());
+      LOG.debug("created volume:{} user:{}", omVolumeArgs.getVolume(),
+          omVolumeArgs.getOwnerName());
+      return volumeList;
-            args.getOwnerName(), args.getVolume(), ex);
-      } else {
-        throw (IOException) ex;
+            omVolumeArgs.getOwnerName(), omVolumeArgs.getVolume(), ex);
+      throw ex;
-      metadataManager.getLock().releaseVolumeLock(args.getVolume());
-      metadataManager.getLock().releaseUserLock(args.getOwnerName());
+      metadataManager.getLock().releaseVolumeLock(omVolumeArgs.getVolume());
+      metadataManager.getLock().releaseUserLock(omVolumeArgs.getOwnerName());
+    }
+  }
+
+
+  @Override
+  public void applyCreateVolume(OmVolumeArgs omVolumeArgs,
+      VolumeList volumeList) throws IOException {
+    // Do we need to hold lock in apply Transactions requests?
+    String dbVolumeKey = metadataManager.getVolumeKey(omVolumeArgs.getVolume());
+    String dbUserKey = metadataManager.getUserKey(omVolumeArgs.getOwnerName());
+    try {
+      createVolumeCommitToDB(omVolumeArgs, volumeList, dbVolumeKey, dbUserKey);
+    } catch (IOException ex) {
+      LOG.error("Volume creation failed for user:{} volume:{}",
+          omVolumeArgs.getOwnerName(), omVolumeArgs.getVolume(), ex);
+      throw ex;
+    }
+  }
+
+  private void createVolumeCommitToDB(OmVolumeArgs omVolumeArgs,
+      VolumeList volumeList, String dbVolumeKey, String dbUserKey)
+      throws IOException {
+    try (BatchOperation batch = metadataManager.getStore()
+        .initBatchOperation()) {
+      // Write the vol info
+      metadataManager.getVolumeTable().putWithBatch(batch, dbVolumeKey,
+          omVolumeArgs);
+      metadataManager.getUserTable().putWithBatch(batch, dbUserKey,
+          volumeList);
+      // Add volume to user list
+      metadataManager.getStore().commitBatchOperation(batch);
+    } catch (IOException ex) {
+      throw ex;
-  public void setOwner(String volume, String owner) throws IOException {
+  public OmVolumeOwnerChangeResponse setOwner(String volume, String owner)
+      throws IOException {
-      try (BatchOperation batch = metadataManager.getStore()
-          .initBatchOperation()) {
-        delVolumeFromOwnerList(volume, volumeArgs.getOwnerName(), batch);
-        addVolumeToOwnerList(volume, owner, batch);
+      String originalOwner =
+          metadataManager.getUserKey(volumeArgs.getOwnerName());
+      VolumeList oldOwnerVolumeList = delVolumeFromOwnerList(volume,
+          originalOwner);
-        OmVolumeArgs newVolumeArgs =
-            OmVolumeArgs.newBuilder().setVolume(volumeArgs.getVolume())
-                .setAdminName(volumeArgs.getAdminName())
-                .setOwnerName(owner)
-                .setQuotaInBytes(volumeArgs.getQuotaInBytes())
-                .setCreationTime(volumeArgs.getCreationTime())
-                .build();
+      String newOwner =  metadataManager.getUserKey(owner);
+      VolumeList newOwnerVolumeList = addVolumeToOwnerList(volume, newOwner);
-        metadataManager.getVolumeTable().putWithBatch(batch,
-            dbVolumeKey, newVolumeArgs);
-        metadataManager.getStore().commitBatchOperation(batch);
+      volumeArgs.setOwnerName(owner);
+      if (!isRatisEnabled) {
+        setOwnerCommitToDB(oldOwnerVolumeList, newOwnerVolumeList,
+            volumeArgs, owner);
-    } catch (RocksDBException | IOException ex) {
+      return new OmVolumeOwnerChangeResponse(oldOwnerVolumeList,
+          newOwnerVolumeList, volumeArgs, originalOwner);
+    } catch (IOException ex) {
-      if(ex instanceof RocksDBException) {
-        throw RocksDBStore.toIOException("Volume creation failed.",
-            (RocksDBException) ex);
-      } else {
-        throw (IOException) ex;
-      }
+      throw ex;
+  @Override
+  public void applySetOwner(String oldOwner, VolumeList oldOwnerVolumeList,
+      VolumeList newOwnerVolumeList, OmVolumeArgs newOwnerVolumeArgs)
+      throws IOException {
+    try {
+      setOwnerCommitToDB(oldOwnerVolumeList, newOwnerVolumeList,
+          newOwnerVolumeArgs, oldOwner);
+    } catch (IOException ex) {
+      LOG.error("Changing volume ownership failed for user:{} volume:{}",
+          newOwnerVolumeArgs.getOwnerName(), newOwnerVolumeArgs.getVolume(),
+          ex);
+      throw ex;
+    }
+  }
+
+
+  private void setOwnerCommitToDB(VolumeList oldOwnerVolumeList,
+      VolumeList newOwnerVolumeList, OmVolumeArgs newOwnerVolumeArgs,
+      String oldOwner) throws IOException {
+    try (BatchOperation batch = metadataManager.getStore()
+        .initBatchOperation()) {
+      if (oldOwnerVolumeList.getVolumeNamesList().size() == 0) {
+        metadataManager.getUserTable().deleteWithBatch(batch, oldOwner);
+      } else {
+        metadataManager.getUserTable().putWithBatch(batch, oldOwner,
+            oldOwnerVolumeList);
+      }
+      metadataManager.getUserTable().putWithBatch(batch,
+          newOwnerVolumeArgs.getOwnerName(),
+          newOwnerVolumeList);
+
+      String dbVolumeKey =
+          metadataManager.getVolumeKey(newOwnerVolumeArgs.getVolume());
+      metadataManager.getVolumeTable().putWithBatch(batch,
+          dbVolumeKey, newOwnerVolumeArgs);
+      metadataManager.getStore().commitBatchOperation(batch);
+    }
+  }
+
+
+   *
+   * @return OmVolumeArgs
-  public void setQuota(String volume, long quota) throws IOException {
+  public OmVolumeArgs setQuota(String volume, long quota) throws IOException {
-      OmVolumeArgs newVolumeArgs =
-          OmVolumeArgs.newBuilder()
-              .setVolume(volumeArgs.getVolume())
-              .setAdminName(volumeArgs.getAdminName())
-              .setOwnerName(volumeArgs.getOwnerName())
-              .setQuotaInBytes(quota)
-              .setCreationTime(volumeArgs.getCreationTime()).build();
-      metadataManager.getVolumeTable().put(dbVolumeKey, newVolumeArgs);
+      volumeArgs.setQuotaInBytes(quota);
+
+      if (!isRatisEnabled) {
+        metadataManager.getVolumeTable().put(dbVolumeKey, volumeArgs);
+      }
+      return volumeArgs;
+  @Override
+  public void applySetQuota(OmVolumeArgs omVolumeArgs) throws IOException {
+    try {
+      String dbVolumeKey = metadataManager.getVolumeKey(
+          omVolumeArgs.getVolume());
+      metadataManager.getVolumeTable().put(dbVolumeKey, omVolumeArgs);
+    } catch (IOException ex) {
+      LOG.error("Changing volume quota failed for volume:{} quota:{}",
+          omVolumeArgs.getVolume(), omVolumeArgs.getQuotaInBytes(), ex);
+      throw ex;
+    }
+  }
+
+   *
+   * @return OmDeleteVolumeResponse
-  public void deleteVolume(String volume) throws IOException {
+  public OmDeleteVolumeResponse deleteVolume(String volume) throws IOException {
-
-      try (BatchOperation batch = metadataManager.getStore()
-          .initBatchOperation()) {
-        delVolumeFromOwnerList(volume, volumeArgs.getOwnerName(), batch);
-        metadataManager.getVolumeTable().deleteWithBatch(batch, dbVolumeKey);
-        metadataManager.getStore().commitBatchOperation(batch);
+      VolumeList newVolumeList = delVolumeFromOwnerList(volume,
+          volumeArgs.getOwnerName());
+
+      if (!isRatisEnabled) {
+        deleteVolumeCommitToDB(newVolumeList,
+            volume, owner);
-    } catch (RocksDBException| IOException ex) {
+      return new OmDeleteVolumeResponse(volume, owner, newVolumeList);
+    } catch (IOException ex) {
-      if(ex instanceof RocksDBException) {
-        throw RocksDBStore.toIOException("Volume creation failed.",
-            (RocksDBException) ex);
-      } else {
-        throw (IOException) ex;
-      }
+      throw ex;
+  @Override
+  public void applyDeleteVolume(String volume, String owner,
+      VolumeList newVolumeList) throws IOException {
+    try {
+      deleteVolumeCommitToDB(newVolumeList, volume, owner);
+    } catch (IOException ex) {
+      LOG.error("Delete volume failed for volume:{}", volume,
+          ex);
+      throw ex;
+    }
+  }
+
+  private void deleteVolumeCommitToDB(VolumeList newVolumeList,
+      String volume, String owner) throws IOException {
+    try (BatchOperation batch = metadataManager.getStore()
+        .initBatchOperation()) {
+      String dbUserKey = metadataManager.getUserKey(owner);
+      if (newVolumeList.getVolumeNamesList().size() == 0) {
+        metadataManager.getUserTable().deleteWithBatch(batch, dbUserKey);
+      } else {
+        metadataManager.getUserTable().putWithBatch(batch, dbUserKey,
+            newVolumeList);
+      }
+      metadataManager.getVolumeTable().deleteWithBatch(batch,
+          metadataManager.getVolumeKey(volume));
+      metadataManager.getStore().commitBatchOperation(batch);
+    }
+  }
+
