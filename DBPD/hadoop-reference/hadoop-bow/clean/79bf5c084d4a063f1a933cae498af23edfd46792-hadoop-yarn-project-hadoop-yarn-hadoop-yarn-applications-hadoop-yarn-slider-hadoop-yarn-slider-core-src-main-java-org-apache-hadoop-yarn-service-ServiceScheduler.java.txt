YARN-7029. Add more UTs in yarn-native-services. Contributed by Jian He

-import org.apache.hadoop.yarn.service.component.Component;
+import org.apache.hadoop.yarn.service.compinstance.ComponentInstanceEvent;
+import org.apache.hadoop.yarn.service.compinstance.ComponentInstanceEventType;
+import org.apache.hadoop.yarn.service.component.Component;
+import org.apache.hadoop.yarn.service.component.ComponentEvent;
+import org.apache.hadoop.yarn.service.component.ComponentEventType;
+import org.apache.hadoop.yarn.service.conf.SliderKeys;
+import org.apache.hadoop.yarn.service.metrics.ServiceMetrics;
+import org.apache.hadoop.yarn.service.provider.ProviderUtils;
+import org.apache.hadoop.yarn.service.timelineservice.ServiceMetricsSink;
+import org.apache.hadoop.yarn.service.timelineservice.ServiceTimelinePublisher;
+import org.apache.hadoop.yarn.service.utils.ServiceApiUtil;
-import org.apache.hadoop.yarn.service.conf.SliderKeys;
-import org.apache.slider.common.tools.SliderUtils;
-import org.apache.hadoop.yarn.service.provider.ProviderUtils;
-import org.apache.hadoop.yarn.service.metrics.ServiceMetrics;
-import org.apache.hadoop.yarn.service.component.ComponentEvent;
-import org.apache.hadoop.yarn.service.component.ComponentEventType;
-import org.apache.hadoop.yarn.service.compinstance.ComponentInstanceEvent;
-import org.apache.hadoop.yarn.service.compinstance.ComponentInstanceEventType;
-import org.apache.hadoop.yarn.service.timelineservice.ServiceTimelinePublisher;
-import org.apache.hadoop.yarn.service.timelineservice.ServiceMetricsSink;
-import org.apache.hadoop.yarn.service.utils.ServiceApiUtil;
+import java.text.MessageFormat;
-import static org.apache.slider.api.ServiceApiConstants.*;
+import static org.apache.slider.api.ServiceApiConstants.*;
-  private final Map<Long, Component> componentsById =
+  protected final Map<Long, Component> componentsById =
+    yarnRegistryOperations =
+        createYarnRegistryOperations(context, registryClient);
-    amRMClient =
-        AMRMClientAsync.createAMRMClientAsync(1000, new AMRMClientCallback());
+    amRMClient = createAMRMClient();
-    nmClient = NMClientAsync.createNMClientAsync(new NMClientCallback());
+    nmClient = createNMClient();
-    yarnRegistryOperations =
-        new YarnRegistryViewForProviders(registryClient,
-            RegistryUtils.currentUser(), SliderKeys.APP_TYPE, app.getName(),
-            context.attemptId);
+  protected YarnRegistryViewForProviders createYarnRegistryOperations(
+      ServiceContext context, RegistryOperations registryClient) {
+    return new YarnRegistryViewForProviders(registryClient,
+        RegistryUtils.currentUser(), SliderKeys.APP_TYPE, app.getName(),
+        context.attemptId);
+  }
+
+  protected NMClientAsync createNMClient() {
+    return NMClientAsync.createNMClientAsync(new NMClientCallback());
+  }
+
+  protected AMRMClientAsync<AMRMClient.ContainerRequest> createAMRMClient() {
+    return AMRMClientAsync
+        .createAMRMClientAsync(1000, new AMRMClientCallback());
+  }
+
-  private void registerServiceInstance(ApplicationAttemptId attemptId,
+  protected void registerServiceInstance(ApplicationAttemptId attemptId,
-        LOG.error("Error in handling event type " + event.getType()
-            + " for component " + event.getName(), t);
+        LOG.error(MessageFormat
+            .format("[COMPONENT {0}]: Error in handling event type {1}",
+                component.getName(), event.getType()), t);
-        LOG.error("Error in handling event type " + event.getType()
-            + " for component instance " + instance.getCompInstanceId(), t);
+        LOG.error(instance.getCompInstanceId() +
+            ": Error in handling event type " + event.getType(), t);
-  private class AMRMClientCallback extends AMRMClientAsync.AbstractCallbackHandler {
+  class AMRMClientCallback extends AMRMClientAsync.AbstractCallbackHandler {
