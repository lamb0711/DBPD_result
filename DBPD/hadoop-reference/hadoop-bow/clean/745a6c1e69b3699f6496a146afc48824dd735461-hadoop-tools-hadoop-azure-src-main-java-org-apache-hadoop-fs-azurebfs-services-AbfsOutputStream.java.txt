Revert "HADOOP-16818. ABFS: Combine append+flush calls for blockblob & appendblob"

This reverts commit 3612317038196ee0cb6d7204056d54b7a7ed8bf7.

Change-Id: Ie0d36f25de0b55a937894f4d9963c495bae0576a

-  private boolean supportAppendWithFlush;
-  private boolean appendBlob;
-      final boolean disableOutputStreamFlush,
-      final boolean supportAppendWithFlush,
-      final boolean appendBlob) {
+      final boolean disableOutputStreamFlush) {
-    this.disableOutputStreamFlush = disableOutputStreamFlush;
-    this.supportAppendWithFlush = supportAppendWithFlush;
-    this.appendBlob = appendBlob;
+
-        writeCurrentBufferToService(false, false);
+        writeCurrentBufferToService();
-    writeAndFlushWrittenBytesToService(isClose);
+    writeCurrentBufferToService();
+    flushWrittenBytesToService(isClose);
-    writeCurrentBufferToService(true, false);
+    writeCurrentBufferToService();
-  private synchronized void writeCurrentBufferToService(final boolean flush, final boolean isClose) throws IOException {
+  private synchronized void writeCurrentBufferToService() throws IOException {
-    if (this.appendBlob) {
-        client.append(path, offset, bytes, 0,
-            bytesLength, flush, isClose);
-        lastTotalAppendOffset += bytesLength;
-        if (flush) {
-          lastFlushOffset = lastTotalAppendOffset;
-        }
-        return;
-    }
-
-          if (flush) {
-            /* Append with Flush enabled should happen
-             * when all the data which was supposed to be
-             * appended has been sent and finished.
-             */
-            while(lastTotalAppendOffset <  lastFlushOffset);
-          }
-              bytesLength, flush, isClose);
+                  bytesLength);
-    writeOperations.add(new WriteOperation(job, offset, bytesLength, flush));
+    writeOperations.add(new WriteOperation(job, offset, bytesLength));
+
-    shrinkWriteOperationQueue();
-  }
-
-  private synchronized void completeExistingTasks() throws IOException {
-    for (WriteOperation writeOperation : writeOperations) {
-      try {
-        writeOperation.task.get();
-      } catch (Exception ex) {
-        if (ex.getCause() instanceof AbfsRestOperationException) {
-          if (((AbfsRestOperationException) ex.getCause()).getStatusCode() == HttpURLConnection.HTTP_NOT_FOUND) {
-            throw new FileNotFoundException(ex.getMessage());
-          }
-        }
-        if (ex.getCause() instanceof AzureBlobFileSystemException) {
-          ex = (AzureBlobFileSystemException) ex.getCause();
-        }
-        lastError = new IOException(ex);
-        throw lastError;
-      }
-    }
-    shrinkWriteOperationQueue();
-  }
-
-  private synchronized void writeAndFlushWrittenBytesToService(boolean isClose) throws IOException {
-    completeExistingTasks();
-    writeCurrentBufferToService(supportAppendWithFlush, isClose);
-    completeExistingTasks();
-    if (this.lastTotalAppendOffset > this.lastFlushOffset) {
-      flushWrittenBytesToServiceInternal(position, false, isClose);
-    }
+    flushWrittenBytesToServiceInternal(position, false, isClose);
-        if (writeOperations.peek().isFlush) {
-          lastFlushOffset = lastTotalAppendOffset;
-        }
-    private final boolean isFlush;
-    WriteOperation(final Future<Void> task, final long startOffset, final long length, final boolean flush) {
+    WriteOperation(final Future<Void> task, final long startOffset, final long length) {
-      this.isFlush = flush;
