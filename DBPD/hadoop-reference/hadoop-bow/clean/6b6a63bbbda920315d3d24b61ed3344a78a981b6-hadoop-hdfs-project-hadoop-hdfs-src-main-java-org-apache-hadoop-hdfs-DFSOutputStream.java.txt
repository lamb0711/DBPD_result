Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  static final Log LOG = LogFactory.getLog(DFSOutputStream.class);
-
+  static final Logger LOG = LoggerFactory.getLogger(DFSOutputStream.class);
-                         getChecksumSize(), lastPacketInBlock);
+        getChecksumSize(), lastPacketInBlock);
-      streamer.getLastException().throwException4Close();
+      getStreamer().getLastException().throwException4Close();
-    if (streamer.streamerClosed()) {
+    if (getStreamer().streamerClosed()) {
-    DatanodeInfo[] currentNodes = streamer.getNodes();
+    DatanodeInfo[] currentNodes = getStreamer().getNodes();
-  /** 
+  /**
- 
+
-    
+
-          throws IOException {
+      throws IOException {
-      streamer.setBytesCurBlock(lastBlock.getBlockSize());
+      getStreamer().setBytesCurBlock(lastBlock.getBlockSize());
-      streamer.setPipelineInConstruction(lastBlock);
+      getStreamer().setPipelineInConstruction(lastBlock);
-      streamer.setAppendChunk(true);
+      getStreamer().setAppendChunk(true);
-	if(stat.getReplication() == 0) {
+    if(stat.getErasureCodingPolicy() != null) {
-      currentPacket = createPacket(packetSize, chunksPerPacket, 
-          streamer.getBytesCurBlock(), streamer.getAndIncCurrentSeqno(), false);
+      currentPacket = createPacket(packetSize, chunksPerPacket, getStreamer()
+          .getBytesCurBlock(), getStreamer().getAndIncCurrentSeqno(), false);
-        DFSClient.LOG.debug("DFSClient writeChunk allocating new packet seqno=" + 
+        DFSClient.LOG.debug("DFSClient writeChunk allocating new packet seqno=" +
-            ", bytesCurBlock=" + streamer.getBytesCurBlock());
+            ", bytesCurBlock=" + getStreamer().getBytesCurBlock());
-    streamer.incBytesCurBlock(len);
+    getStreamer().incBytesCurBlock(len);
-        streamer.getBytesCurBlock() == blockSize) {
+        getStreamer().getBytesCurBlock() == blockSize) {
-    streamer.waitAndQueuePacket(currentPacket);
+    getStreamer().waitAndQueuePacket(currentPacket);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("enqueue full " + currentPacket + ", src=" + src
-          + ", bytesCurBlock=" + streamer.getBytesCurBlock()
-          + ", blockSize=" + blockSize
-          + ", appendChunk=" + streamer.getAppendChunk()
-          + ", " + streamer);
-    }
+    LOG.debug("enqueue full {}, src={}, bytesCurBlock={}, blockSize={},"
+            + " appendChunk={}, {}", currentPacket, src, getStreamer()
+            .getBytesCurBlock(), blockSize, getStreamer().getAppendChunk(),
+        getStreamer());
-  /** create an empty packet to mark the end of the block */
-  void setCurrentPacket2Empty() throws InterruptedIOException {
-    currentPacket = createPacket(0, 0, streamer.getBytesCurBlock(),
-        streamer.getAndIncCurrentSeqno(), true);
+  /** create an empty packet to mark the end of the block. */
+  void setCurrentPacketToEmpty() throws InterruptedIOException {
+    currentPacket = createPacket(0, 0, getStreamer().getBytesCurBlock(),
+        getStreamer().getAndIncCurrentSeqno(), true);
-    if (streamer.getAppendChunk() &&
-        streamer.getBytesCurBlock() % bytesPerChecksum == 0) {
-      streamer.setAppendChunk(false);
+    if (getStreamer().getAppendChunk() &&
+        getStreamer().getBytesCurBlock() % bytesPerChecksum == 0) {
+      getStreamer().setAppendChunk(false);
-    if (!streamer.getAppendChunk()) {
-      int psize = Math.min((int)(blockSize- streamer.getBytesCurBlock()),
+    if (!getStreamer().getAppendChunk()) {
+      int psize = Math.min((int)(blockSize- getStreamer().getBytesCurBlock()),
-    if (streamer.getBytesCurBlock() == blockSize) {
-      setCurrentPacket2Empty();
+    if (getStreamer().getBytesCurBlock() == blockSize) {
+      setCurrentPacketToEmpty();
-      streamer.setBytesCurBlock(0);
+      getStreamer().setBytesCurBlock(0);
-  
+
-  
+
-   * 
+   *
-   * 
+   *
-   * 
+   *
-              + " bytesCurBlock=" + streamer.getBytesCurBlock()
+              + " bytesCurBlock=" + getStreamer().getBytesCurBlock()
-        if (lastFlushOffset != streamer.getBytesCurBlock()) {
-          assert streamer.getBytesCurBlock() > lastFlushOffset;
+        if (lastFlushOffset != getStreamer().getBytesCurBlock()) {
+          assert getStreamer().getBytesCurBlock() > lastFlushOffset;
-          lastFlushOffset = streamer.getBytesCurBlock();
+          lastFlushOffset = getStreamer().getBytesCurBlock();
-                streamer.getBytesCurBlock(), streamer.getAndIncCurrentSeqno(), false);
+                getStreamer().getBytesCurBlock(), getStreamer()
+                    .getAndIncCurrentSeqno(), false);
-          if (isSync && streamer.getBytesCurBlock() > 0 && !endBlock) {
+          if (isSync && getStreamer().getBytesCurBlock() > 0 && !endBlock) {
-            // So send an empty sync packet if we do not end the block right now
+            // So send an empty sync packet if we do not end the block right
+            // now
-                streamer.getBytesCurBlock(), streamer.getAndIncCurrentSeqno(), false);
+                getStreamer().getBytesCurBlock(), getStreamer()
+                    .getAndIncCurrentSeqno(), false);
-        if (endBlock && streamer.getBytesCurBlock() > 0) {
+        if (endBlock && getStreamer().getBytesCurBlock() > 0) {
-          currentPacket = createPacket(0, 0, streamer.getBytesCurBlock(),
-              streamer.getAndIncCurrentSeqno(), true);
+          currentPacket = createPacket(0, 0, getStreamer().getBytesCurBlock(),
+              getStreamer().getAndIncCurrentSeqno(), true);
-          streamer.setBytesCurBlock(0);
+          getStreamer().setBytesCurBlock(0);
-          streamer.setBytesCurBlock(streamer.getBytesCurBlock() - numKept);
+          getStreamer().setBytesCurBlock(
+              getStreamer().getBytesCurBlock() - numKept);
-        toWaitFor = streamer.getLastQueuedSeqno();
+        toWaitFor = getStreamer().getLastQueuedSeqno();
-      streamer.waitForAckedSeqno(toWaitFor);
+      getStreamer().waitForAckedSeqno(toWaitFor);
-      if (updateLength || streamer.getPersistBlocks().get()) {
+      if (updateLength || getStreamer().getPersistBlocks().get()) {
-          if (!streamer.streamerClosed() && streamer.getBlock() != null) {
-            lastBlockLength = streamer.getBlock().getNumBytes();
+          if (!getStreamer().streamerClosed()
+              && getStreamer().getBlock() != null) {
+            lastBlockLength = getStreamer().getBlock().getNumBytes();
-      if (streamer.getPersistBlocks().getAndSet(false) || updateLength) {
+      if (getStreamer().getPersistBlocks().getAndSet(false) || updateLength) {
-        if (!streamer.streamerClosed()) {
-          streamer.setHflush();
+        if (!getStreamer().streamerClosed()) {
+          getStreamer().setHflush();
-          streamer.getLastException().set(e);
+          getStreamer().getLastException().set(e);
-   * 
+   *
-    if (streamer.streamerClosed()) {
+    if (getStreamer().streamerClosed()) {
-    DatanodeInfo[] currentNodes = streamer.getNodes();
+    DatanodeInfo[] currentNodes = getStreamer().getNodes();
-  
+
-      streamer.queuePacket(currentPacket);
+      getStreamer().queuePacket(currentPacket);
-      toWaitFor = streamer.getLastQueuedSeqno();
+      toWaitFor = getStreamer().getLastQueuedSeqno();
-    streamer.waitForAckedSeqno(toWaitFor);
+    getStreamer().waitForAckedSeqno(toWaitFor);
-    streamer.start();
+    getStreamer().start();
-  
+
-    streamer.getLastException().set(new IOException("Lease timeout of "
+    getStreamer().getLastException().set(new IOException("Lease timeout of "
-    return closed || streamer.streamerClosed();
+    return closed || getStreamer().streamerClosed();
-    streamer.release();
+    getStreamer().release();
-      streamer.close(force);
-      streamer.join();
-      streamer.closeSocket();
+      getStreamer().close(force);
+      getStreamer().join();
+      getStreamer().closeSocket();
-      streamer.setSocketToNull();
+      getStreamer().setSocketToNull();
-  
+
-      streamer.getLastException().check(true);
+      getStreamer().getLastException().check(true);
-      if (streamer.getBytesCurBlock() != 0) {
-        setCurrentPacket2Empty();
+      if (getStreamer().getBytesCurBlock() != 0) {
+        setCurrentPacketToEmpty();
-      ExtendedBlock lastBlock = streamer.getBlock();
+      ExtendedBlock lastBlock = getStreamer().getBlock();
-    streamer.setArtificialSlowdown(period);
+    getStreamer().setArtificialSlowdown(period);
-    return streamer.getBlockToken();
+    return getStreamer().getBlockToken();
-                        setDropBehind(dropBehind).build();
+          setDropBehind(dropBehind).build();
-    return streamer.getBlock();
+    return getStreamer().getBlock();
+  /**
+   * Returns the data streamer object.
+   */
+  protected DataStreamer getStreamer() {
+    return streamer;
+  }
+
