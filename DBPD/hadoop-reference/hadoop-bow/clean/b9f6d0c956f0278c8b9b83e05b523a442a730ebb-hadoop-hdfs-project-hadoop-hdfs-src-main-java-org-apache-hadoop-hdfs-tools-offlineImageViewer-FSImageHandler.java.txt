HDFS-7515. Fix new findbugs warnings in hadoop-hdfs. Contributed by Haohui Mai.

-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.List;
-import java.util.Map;
-
+import com.google.common.base.Charsets;
-import static io.netty.handler.codec.http.HttpResponseStatus.*;
-
-import static io.netty.handler.codec.http.HttpVersion.*;
-import org.apache.hadoop.hdfs.web.resources.ExceptionHandler;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import static io.netty.handler.codec.http.HttpHeaders.Names.CONNECTION;
+import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_LENGTH;
+import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TYPE;
+import static io.netty.handler.codec.http.HttpHeaders.Values.CLOSE;
+import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;
+import static io.netty.handler.codec.http.HttpResponseStatus.INTERNAL_SERVER_ERROR;
+import static io.netty.handler.codec.http.HttpResponseStatus.METHOD_NOT_ALLOWED;
+import static io.netty.handler.codec.http.HttpResponseStatus.NOT_FOUND;
+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;
+import static org.apache.hadoop.hdfs.server.datanode.web.webhdfs.WebHdfsHandler.APPLICATION_JSON_UTF8;
+import static org.apache.hadoop.hdfs.server.datanode.web.webhdfs.WebHdfsHandler.WEBHDFS_PREFIX;
+import static org.apache.hadoop.hdfs.server.datanode.web.webhdfs.WebHdfsHandler.WEBHDFS_PREFIX_LENGTH;
-      resp.headers().set("Connection", "close");
+      resp.headers().set(CONNECTION, CLOSE);
-    if ("GETFILESTATUS".equals(op)) {
-      content = image.getFileStatus(path);
-    } else if ("LISTSTATUS".equals(op)) {
-      content = image.listStatus(path);
-    } else if ("GETACLSTATUS".equals(op)) {
-      content = image.getAclStatus(path);
-    } else {
-      throw new IllegalArgumentException("Invalid value for webhdfs parameter" + " \"op\"");
+    switch (op) {
+      case "GETFILESTATUS":
+        content = image.getFileStatus(path);
+        break;
+      case "LISTSTATUS":
+        content = image.listStatus(path);
+        break;
+      case "GETACLSTATUS":
+        content = image.getAclStatus(path);
+        break;
+      default:
+        throw new IllegalArgumentException(
+            "Invalid value for webhdfs parameter" + " \"op\"");
-            Unpooled.wrappedBuffer(content.getBytes()));
-    resp.headers().set("Content-Type", "application/json");
-    resp.headers().set("Content-Length", resp.content().readableBytes());
-    resp.headers().set("Connection", "close");
+            Unpooled.wrappedBuffer(content.getBytes(Charsets.UTF_8)));
+    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON_UTF8);
+    resp.headers().set(CONTENT_LENGTH, resp.content().readableBytes());
+    resp.headers().set(CONNECTION, CLOSE);
-    ByteBuf content = Unpooled.wrappedBuffer(output.getBytes());
+    ByteBuf content = Unpooled.wrappedBuffer(output.getBytes(Charsets.UTF_8));
-    resp.headers().set("Content-Type", "application/json");
+    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON_UTF8);
-    resp.headers().set("Content-Length", resp.content().readableBytes());
-    resp.headers().set("Connection", "close");
+    resp.headers().set(CONTENT_LENGTH, resp.content().readableBytes());
+    resp.headers().set(CONNECTION, CLOSE);
-    if (path.startsWith("/webhdfs/v1/")) {
-      return path.substring(11);
+    if (path.startsWith(WEBHDFS_PREFIX)) {
+      return path.substring(WEBHDFS_PREFIX_LENGTH);
-              "start with \"/webhdfs/v1/\"");
+              "start with " + WEBHDFS_PREFIX);
