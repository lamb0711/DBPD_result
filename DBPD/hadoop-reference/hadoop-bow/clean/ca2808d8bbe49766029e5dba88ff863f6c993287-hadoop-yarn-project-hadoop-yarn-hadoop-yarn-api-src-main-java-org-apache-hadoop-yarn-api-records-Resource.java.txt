YARN-6761. Fix build for YARN-3926 branch. Contributed by Varun Vasudev.

+import java.util.Collections;
+import java.util.HashMap;
+  private static Resource tmpResource = Records.newRecord(Resource.class);
+
+    private Map<String, ResourceInformation> resourceInformationMap;
+
+
+    @Override
+    public Map<String, ResourceInformation> getResources() {
+      if (resourceInformationMap == null) {
+        resourceInformationMap = new HashMap<>();
+        resourceInformationMap.put(ResourceInformation.MEMORY_MB.getName(),
+            ResourceInformation.newInstance(ResourceInformation.MEMORY_MB));
+        resourceInformationMap.put(ResourceInformation.VCORES.getName(),
+            ResourceInformation.newInstance(ResourceInformation.VCORES));
+      }
+      resourceInformationMap.get(ResourceInformation.MEMORY_MB.getName())
+          .setValue(this.memory);
+      resourceInformationMap.get(ResourceInformation.VCORES.getName())
+          .setValue(this.vcores);
+      return Collections.unmodifiableMap(resourceInformationMap);
+    }
+    if (tmpResource.getResources().size() > 2) {
+      Resource ret = Records.newRecord(Resource.class);
+      ret.setMemorySize(memory);
+      ret.setVirtualCores(vCores);
+      return ret;
+    }
+    if (tmpResource.getResources().size() > 2) {
+      Resource ret = Records.newRecord(Resource.class);
+      ret.setMemorySize(memory);
+      ret.setVirtualCores(vCores);
+      return ret;
+    }
-      try {
-        ResourceInformation.copy(entry.getValue(),
-            dest.getResourceInformation(entry.getKey()));
-      } catch (YarnException ye) {
-        dest.setResourceInformation(entry.getKey(),
-            ResourceInformation.newInstance(entry.getValue()));
-      }
+      dest.setResourceInformation(entry.getKey(), entry.getValue());
-  public abstract ResourceInformation getResourceInformation(String resource)
-      throws YarnException;
+  public ResourceInformation getResourceInformation(String resource)
+      throws YarnException {
+    if (getResources().containsKey(resource)) {
+      return getResources().get(resource);
+    }
+    throw new YarnException(
+        "Unknown resource '" + resource + "'. Known resources are "
+            + getResources().keySet());
+  }
-  public abstract Long getResourceValue(String resource) throws YarnException;
+  public Long getResourceValue(String resource) throws YarnException {
+    if (getResources().containsKey(resource)) {
+      return getResources().get(resource).getValue();
+    }
+    throw new YarnException(
+        "Unknown resource '" + resource + "'. Known resources are "
+            + getResources().keySet());
+  }
-  public abstract void setResourceInformation(String resource,
-      ResourceInformation resourceInformation) throws ResourceNotFoundException;
+  public void setResourceInformation(String resource,
+      ResourceInformation resourceInformation) throws ResourceNotFoundException {
+    if (resource.equals(ResourceInformation.MEMORY_MB.getName())) {
+      this.setMemorySize(resourceInformation.getValue());
+      return;
+    }
+    if (resource.equals(ResourceInformation.VCORES.getName())) {
+      this.setVirtualCores((int) resourceInformation.getValue());
+      return;
+    }
+    if (getResources().containsKey(resource)) {
+      ResourceInformation
+          .copy(resourceInformation, getResources().get(resource));
+      return;
+    }
+    throw new ResourceNotFoundException(
+        "Unknown resource '" + resource + "'. Known resources are "
+            + getResources().keySet());
+  }
-  public abstract void setResourceValue(String resource, Long value)
-      throws ResourceNotFoundException;
+  public void setResourceValue(String resource, Long value)
+      throws ResourceNotFoundException {
+    if (resource.equals(ResourceInformation.MEMORY_MB.getName())) {
+      this.setMemorySize(value);
+      return;
+    }
+    if (resource.equals(ResourceInformation.VCORES.getName())) {
+      this.setVirtualCores(value.intValue());
+      return;
+    }
+    if (getResources().containsKey(resource)) {
+      getResources().get(resource).setValue(value);
+      return;
+    }
+    throw new ResourceNotFoundException(
+        "Unknown resource '" + resource + "'. Known resources are "
+            + getResources().keySet());
+  }
-  public int compareTo(Resource other) {
-    long diff = this.getMemorySize() - other.getMemorySize();
-    if (diff == 0) {
-      diff = this.getVirtualCores() - other.getVirtualCores();
-    }
-    return diff == 0 ? 0 : (diff > 0 ? 1 : -1);
-  }
-
-  @Override
