Merge trunk into HDDS-48

-package org.apache.hadoop.ozone.ksm;
+package org.apache.hadoop.ozone.om;
-import org.apache.hadoop.ozone.ksm.helpers.KsmKeyInfo;
-import org.apache.hadoop.ozone.ksm.helpers.KsmBucketInfo;
-import org.apache.hadoop.ozone.ksm.helpers.KsmKeyLocationInfoGroup;
-import org.apache.hadoop.ozone.ksm.helpers.KsmVolumeArgs;
+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;
+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;
+import org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfoGroup;
+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;
-import org.apache.hadoop.ozone.ksm.exceptions.KSMException;
-import org.apache.hadoop.ozone.ksm.exceptions.KSMException.ResultCodes;
-import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos.BucketInfo;
-import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos.KeyInfo;
-import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos.VolumeInfo;
-import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos.VolumeList;
+import org.apache.hadoop.ozone.om.exceptions.OMException;
+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.BucketInfo;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.KeyInfo;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.VolumeInfo;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.VolumeList;
-import static org.apache.hadoop.ozone.OzoneConsts.KSM_DB_NAME;
+import static org.apache.hadoop.ozone.OzoneConsts.OM_DB_NAME;
-import static org.apache.hadoop.ozone.ksm.KSMConfigKeys
-    .OZONE_KSM_DB_CACHE_SIZE_DEFAULT;
-import static org.apache.hadoop.ozone.ksm.KSMConfigKeys
-    .OZONE_KSM_DB_CACHE_SIZE_MB;
+import static org.apache.hadoop.ozone.om.OMConfigKeys
+    .OZONE_OM_DB_CACHE_SIZE_DEFAULT;
+import static org.apache.hadoop.ozone.om.OMConfigKeys
+    .OZONE_OM_DB_CACHE_SIZE_MB;
- * KSM metadata manager interface.
+ * Ozone metadata manager interface.
-public class KSMMetadataManagerImpl implements KSMMetadataManager {
+public class OmMetadataManagerImpl implements OMMetadataManager {
-  public KSMMetadataManagerImpl(OzoneConfiguration conf) throws IOException {
+  public OmMetadataManagerImpl(OzoneConfiguration conf) throws IOException {
-    final int cacheSize = conf.getInt(OZONE_KSM_DB_CACHE_SIZE_MB,
-        OZONE_KSM_DB_CACHE_SIZE_DEFAULT);
-    File ksmDBFile = new File(metaDir.getPath(), KSM_DB_NAME);
+    final int cacheSize = conf.getInt(OZONE_OM_DB_CACHE_SIZE_MB,
+        OZONE_OM_DB_CACHE_SIZE_DEFAULT);
+    File omDBFile = new File(metaDir.getPath(), OM_DB_NAME);
-        .setDbFile(ksmDBFile)
+        .setDbFile(omDBFile)
-    String dbVolumeName = OzoneConsts.KSM_VOLUME_PREFIX + volume;
+    String dbVolumeName = OzoneConsts.OM_VOLUME_PREFIX + volume;
-    String dbUserName = OzoneConsts.KSM_USER_PREFIX + user;
+    String dbUserName = OzoneConsts.OM_USER_PREFIX + user;
-    String bucketKeyString = OzoneConsts.KSM_VOLUME_PREFIX + volume
-        + OzoneConsts.KSM_BUCKET_PREFIX + bucket;
+    String bucketKeyString = OzoneConsts.OM_VOLUME_PREFIX + volume
+        + OzoneConsts.OM_BUCKET_PREFIX + bucket;
-    sb.append(OzoneConsts.KSM_VOLUME_PREFIX)
+    sb.append(OzoneConsts.OM_VOLUME_PREFIX)
-        .append(OzoneConsts.KSM_BUCKET_PREFIX);
+        .append(OzoneConsts.OM_BUCKET_PREFIX);
-    String keyVB = OzoneConsts.KSM_KEY_PREFIX + volume
-        + OzoneConsts.KSM_KEY_PREFIX + bucket
-        + OzoneConsts.KSM_KEY_PREFIX;
+    String keyVB = OzoneConsts.OM_KEY_PREFIX + volume
+        + OzoneConsts.OM_KEY_PREFIX + bucket
+        + OzoneConsts.OM_KEY_PREFIX;
-    String dbVolumeRootName = OzoneConsts.KSM_VOLUME_PREFIX + volume
-        + OzoneConsts.KSM_BUCKET_PREFIX;
+    String dbVolumeRootName = OzoneConsts.OM_VOLUME_PREFIX + volume
+        + OzoneConsts.OM_BUCKET_PREFIX;
-  public List<KsmBucketInfo> listBuckets(final String volumeName,
-      final String startBucket, final String bucketPrefix,
-      final int maxNumOfBuckets) throws IOException {
-    List<KsmBucketInfo> result = new ArrayList<>();
+  public List<OmBucketInfo> listBuckets(final String volumeName,
+                                        final String startBucket, final String bucketPrefix,
+                                        final int maxNumOfBuckets) throws IOException {
+    List<OmBucketInfo> result = new ArrayList<>();
-      throw new KSMException("Volume name is required.",
+      throw new OMException("Volume name is required.",
-      throw new KSMException("Volume " + volumeName + " not found.",
+      throw new OMException("Volume " + volumeName + " not found.",
-      KsmBucketInfo info = KsmBucketInfo.getFromProtobuf(
+      OmBucketInfo info = OmBucketInfo.getFromProtobuf(
-  public List<KsmKeyInfo> listKeys(String volumeName, String bucketName,
-      String startKey, String keyPrefix, int maxKeys) throws IOException {
-    List<KsmKeyInfo> result = new ArrayList<>();
+  public List<OmKeyInfo> listKeys(String volumeName, String bucketName,
+                                  String startKey, String keyPrefix, int maxKeys) throws IOException {
+    List<OmKeyInfo> result = new ArrayList<>();
-      throw new KSMException("Volume name is required.",
+      throw new OMException("Volume name is required.",
-      throw new KSMException("Bucket name is required.",
+      throw new OMException("Bucket name is required.",
-      throw new KSMException("Bucket " + bucketName + " not found.",
+      throw new OMException("Bucket " + bucketName + " not found.",
-      KsmKeyInfo info = KsmKeyInfo.getFromProtobuf(
+      OmKeyInfo info = OmKeyInfo.getFromProtobuf(
-  public List<KsmVolumeArgs> listVolumes(String userName,
-      String prefix, String startKey, int maxKeys) throws IOException {
-    List<KsmVolumeArgs> result = Lists.newArrayList();
+  public List<OmVolumeArgs> listVolumes(String userName,
+                                        String prefix, String startKey, int maxKeys) throws IOException {
+    List<OmVolumeArgs> result = Lists.newArrayList();
-          // this probably means ksm db is corrupted or some entries are
+          // this probably means om db is corrupted or some entries are
-          throw new KSMException("Volume info not found for " + volumeName,
+          throw new OMException("Volume info not found for " + volumeName,
-        KsmVolumeArgs volumeArgs = KsmVolumeArgs.getFromProtobuf(info);
+        OmVolumeArgs volumeArgs = OmVolumeArgs.getFromProtobuf(info);
-      throws KSMException {
+      throws OMException {
-      throws KSMException {
+      throws OMException {
-      throw new KSMException("Unable to get volumes info by the given user, "
+      throw new OMException("Unable to get volumes info by the given user, "
-        new KeyPrefixFilter().addFilter(OzoneConsts.KSM_USER_PREFIX);
+        new KeyPrefixFilter().addFilter(OzoneConsts.OM_USER_PREFIX);
-      KsmKeyInfo info =
-          KsmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(entry.getValue()));
+      OmKeyInfo info =
+          OmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(entry.getValue()));
-      KsmKeyLocationInfoGroup latest = info.getLatestVersionLocations();
+      OmKeyLocationInfoGroup latest = info.getLatestVersionLocations();
-      KsmKeyInfo info =
-          KsmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(entry.getValue()));
+      OmKeyInfo info =
+          OmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(entry.getValue()));
