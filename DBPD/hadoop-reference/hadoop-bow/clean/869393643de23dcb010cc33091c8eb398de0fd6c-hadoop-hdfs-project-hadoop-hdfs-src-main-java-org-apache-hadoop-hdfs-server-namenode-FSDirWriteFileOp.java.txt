HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.

-import org.apache.hadoop.hdfs.protocol.HdfsConstants;
-    src = fsd.resolvePath(pc, src);
-
-    final INode inode;
-    final INodesInPath iip;
-    if (fileId == HdfsConstants.GRANDFATHER_INODE_ID) {
-      // Older clients may not have given us an inode ID to work with.
-      // In this case, we have to try to resolve the path and hope it
-      // hasn't changed or been deleted since the file was opened for write.
-      iip = fsd.getINodesInPath(src, true);
-      inode = iip.getLastINode();
-    } else {
-      inode = fsd.getInode(fileId);
-      iip = INodesInPath.fromINode(inode);
-      if (inode != null) {
-        src = iip.getPath();
-      }
-    }
+    final INodesInPath iip = fsd.resolvePath(pc, src, fileId);
+    src = iip.getPath();
-    final INodeFile file = fsn.checkLease(src, holder, inode, fileId);
+    final INodeFile file = fsn.checkLease(iip, holder, fileId);
-    src = fsn.dir.resolvePath(pc, src);
-    FileState fileState = analyzeFileState(fsn, src, fileId, clientName,
+    INodesInPath iip = fsn.dir.resolvePath(pc, src, fileId);
+    FileState fileState = analyzeFileState(fsn, iip, fileId, clientName,
-    FileState fileState = analyzeFileState(fsn, src, fileId, clientName,
+    INodesInPath iip = fsn.dir.resolvePath(null, src, fileId);
+    FileState fileState = analyzeFileState(fsn, iip, fileId, clientName,
-    src = fsd.resolvePath(pc, src);
-    INodesInPath iip = fsd.getINodesInPath4Write(src);
+    INodesInPath iip = fsd.resolvePathForWrite(pc, src);
+    src = iip.getPath();
-    src = fsd.resolvePath(pc, src);
-    INodesInPath iip = fsd.getINodesInPath4Write(src);
+    INodesInPath iip = fsd.resolvePathForWrite(pc, src);
-      FSNamesystem fsn, String src, long fileId, String clientName,
+      FSNamesystem fsn, INodesInPath iip, long fileId, String clientName,
-
+    String src = iip.getPath();
-    final INode inode;
-    final INodesInPath iip;
-    if (fileId == HdfsConstants.GRANDFATHER_INODE_ID) {
-      // Older clients may not have given us an inode ID to work with.
-      // In this case, we have to try to resolve the path and hope it
-      // hasn't changed or been deleted since the file was opened for write.
-      iip = fsn.dir.getINodesInPath4Write(src);
-      inode = iip.getLastINode();
-    } else {
-      // Newer clients pass the inode ID, so we can just get the inode
-      // directly.
-      inode = fsn.dir.getInode(fileId);
-      iip = INodesInPath.fromINode(inode);
-      if (inode != null) {
-        src = iip.getPath();
-      }
-    }
-    final INodeFile file = fsn.checkLease(src, clientName, inode, fileId);
+    final INodeFile file = fsn.checkLease(iip, clientName, fileId);
-    src = fsn.dir.resolvePath(pc, src);
-    return completeFileInternal(fsn, src, holder,
+    INodesInPath iip = fsn.dir.resolvePath(pc, src, fileId);
+    return completeFileInternal(fsn, iip, holder,
-      FSNamesystem fsn, String src, String holder, Block last, long fileId)
+      FSNamesystem fsn, INodesInPath iip,
+      String holder, Block last, long fileId)
+    final String src = iip.getPath();
-    final INodesInPath iip;
-      if (fileId == HdfsConstants.GRANDFATHER_INODE_ID) {
-        // Older clients may not have given us an inode ID to work with.
-        // In this case, we have to try to resolve the path and hope it
-        // hasn't changed or been deleted since the file was opened for write.
-        iip = fsn.dir.getINodesInPath(src, true);
-        inode = iip.getLastINode();
-      } else {
-        inode = fsn.dir.getInode(fileId);
-        iip = INodesInPath.fromINode(inode);
-        if (inode != null) {
-          src = iip.getPath();
-        }
-      }
-      pendingFile = fsn.checkLease(src, holder, inode, fileId);
+      inode = iip.getLastINode();
+      pendingFile = fsn.checkLease(iip, holder, fileId);
