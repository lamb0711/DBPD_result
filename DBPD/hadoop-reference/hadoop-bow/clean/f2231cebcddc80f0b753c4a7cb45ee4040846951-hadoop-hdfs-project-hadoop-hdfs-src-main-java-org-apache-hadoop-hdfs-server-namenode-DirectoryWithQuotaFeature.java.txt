HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)

-  public static final long DEFAULT_SPACE_QUOTA = HdfsConstants.QUOTA_RESET;
+  public static final long DEFAULT_STORAGE_SPACE_QUOTA = HdfsConstants.QUOTA_RESET;
-      this.quota = new QuotaCounts.Builder().nameCount(DEFAULT_NAMESPACE_QUOTA).
-          spaceCount(DEFAULT_SPACE_QUOTA).typeCounts(DEFAULT_SPACE_QUOTA).build();
-      this.usage = new QuotaCounts.Builder().nameCount(1).build();
+      this.quota = new QuotaCounts.Builder().nameSpace(DEFAULT_NAMESPACE_QUOTA).
+          storageSpace(DEFAULT_STORAGE_SPACE_QUOTA).
+          typeSpaces(DEFAULT_STORAGE_SPACE_QUOTA).build();
+      this.usage = new QuotaCounts.Builder().nameSpace(1).build();
-    public Builder spaceQuota(long spaceQuota) {
-      this.quota.setDiskSpace(spaceQuota);
+    public Builder storageSpaceQuota(long spaceQuota) {
+      this.quota.setStorageSpace(spaceQuota);
-   * @param dsQuota Diskspace quota to be set
-   * @param type Storage type quota to be set
-   * * To set traditional space/namespace quota, type must be null
+   * @param ssQuota Storagespace quota to be set
+   * @param type Storage type of the storage space quota to be set.
+   *             To set storagespace/namespace quota, type must be null.
-  void setQuota(long nsQuota, long dsQuota, StorageType type) {
+  void setQuota(long nsQuota, long ssQuota, StorageType type) {
-      this.quota.setTypeSpace(type, dsQuota);
+      this.quota.setTypeSpace(type, ssQuota);
-      setQuota(nsQuota, dsQuota);
+      setQuota(nsQuota, ssQuota);
-  void setQuota(long nsQuota, long dsQuota) {
+  void setQuota(long nsQuota, long ssQuota) {
-    this.quota.setDiskSpace(dsQuota);
+    this.quota.setStorageSpace(ssQuota);
-  void setQuota(long dsQuota, StorageType type) {
-    this.quota.setTypeSpace(type, dsQuota);
+  void setQuota(long quota, StorageType type) {
+    this.quota.setTypeSpace(type, quota);
-  // Set in a batch only during FSImage load
-  void setQuota(EnumCounters<StorageType> typeQuotas) {
-    this.quota.setTypeSpaces(typeQuotas);
+  /** Set storage type quota in a batch. (Only used by FSImage load)
+   *
+   * @param tsQuotas type space counts for all storage types supporting quota
+   */
+  void setQuota(EnumCounters<StorageType> tsQuotas) {
+    this.quota.setTypeSpaces(tsQuotas);
-  QuotaCounts addNamespaceDiskspace(QuotaCounts counts) {
+  /**
+   * Add current quota usage to counts and return the updated counts
+   * @param counts counts to be added with current quota usage
+   * @return counts that have been added with the current qutoa usage
+   */
+  QuotaCounts AddCurrentSpaceUsage(QuotaCounts counts) {
-      checkDiskspace(dir, summary.getCounts().get(Content.DISKSPACE) - original);
+      checkStoragespace(dir, summary.getCounts().get(Content.DISKSPACE) - original);
-  private void checkDiskspace(final INodeDirectory dir, final long computed) {
-    if (-1 != quota.getDiskSpace() && usage.getDiskSpace() != computed) {
-      NameNode.LOG.error("BUG: Inconsistent diskspace for directory "
-          + dir.getFullPathName() + ". Cached = " + usage.getDiskSpace()
+  private void checkStoragespace(final INodeDirectory dir, final long computed) {
+    if (-1 != quota.getStorageSpace() && usage.getStorageSpace() != computed) {
+      NameNode.LOG.error("BUG: Inconsistent storagespace for directory "
+          + dir.getFullPathName() + ". Cached = " + usage.getStorageSpace()
-   * Sets namespace and diskspace take by the directory rooted 
+   * Sets namespace and storagespace take by the directory rooted
-   * @param diskspace disk space take by all the nodes under this directory
-   * @param typeUsed counters of storage type usage
+   * @param storagespace storage space take by all the nodes under this directory
+   * @param typespaces counters of storage type usage
-  void setSpaceConsumed(long namespace, long diskspace,
-      EnumCounters<StorageType> typeUsed) {
+  void setSpaceConsumed(long namespace, long storagespace,
+      EnumCounters<StorageType> typespaces) {
-    usage.setDiskSpace(diskspace);
-    usage.setTypeSpaces(typeUsed);
+    usage.setStorageSpace(storagespace);
+    usage.setTypeSpaces(typespaces);
-    usage.setDiskSpace(c.getDiskSpace());
+    usage.setStorageSpace(c.getStorageSpace());
-  /** @return the namespace and diskspace consumed. */
+  /** @return the namespace and storagespace and typespace consumed. */
-  /** Verify if the diskspace quota is violated after applying delta. */
-  private void verifyDiskspaceQuota(long delta) throws DSQuotaExceededException {
-    if (Quota.isViolated(quota.getDiskSpace(), usage.getDiskSpace(), delta)) {
-      throw new DSQuotaExceededException(quota.getDiskSpace(),
-          usage.getDiskSpace() + delta);
+  /** Verify if the storagespace quota is violated after applying delta. */
+  private void verifyStoragespaceQuota(long delta) throws DSQuotaExceededException {
+    if (Quota.isViolated(quota.getStorageSpace(), usage.getStorageSpace(), delta)) {
+      throw new DSQuotaExceededException(quota.getStorageSpace(),
+          usage.getStorageSpace() + delta);
-   * @throws QuotaExceededException if namespace, diskspace or storage type quotas
-   * is violated after applying the deltas.
+   * @throws QuotaExceededException if namespace, storagespace or storage type
+   * space quota is violated after applying the deltas.
-    verifyDiskspaceQuota(counts.getDiskSpace());
+    verifyStoragespaceQuota(counts.getStorageSpace());
-    return quota.anyNsSpCountGreaterOrEqual(0) ||
-        quota.anyTypeCountGreaterOrEqual(0);
+    return quota.anyNsSsCountGreaterOrEqual(0) ||
+        quota.anyTypeSpaceCountGreaterOrEqual(0);
-    return quota.anyTypeCountGreaterOrEqual(0);
+    return quota.anyTypeSpaceCountGreaterOrEqual(0);
-  private String diskspaceString() {
-    return "diskspace: " + (quota.getDiskSpace() < 0? "-":
-        usage.getDiskSpace() + "/" + quota.getDiskSpace());
+  private String storagespaceString() {
+    return "storagespace: " + (quota.getStorageSpace() < 0? "-":
+        usage.getStorageSpace() + "/" + quota.getStorageSpace());
-  private String quotaByStorageTypeString() {
+  private String typeSpaceString() {
-    return "Quota[" + namespaceString() + ", " + diskspaceString() +
-        ", " + quotaByStorageTypeString() + "]";
+    return "Quota[" + namespaceString() + ", " + storagespaceString() +
+        ", " + typeSpaceString() + "]";
