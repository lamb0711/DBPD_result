YARN-9781. SchedConfCli to get current stored scheduler configuration. Contributed by Prabhu Joseph

+import org.apache.hadoop.yarn.webapp.dao.ConfInfo;
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.Marshaller;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.stream.StreamResult;
+import javax.xml.transform.stream.StreamSource;
+import java.io.StringReader;
+import java.io.StringWriter;
+  private static final String GET_SCHEDULER_CONF = "getConf";
+  private SSLFactory sslFactory;
+  private Client client;
+
+    opts.addOption("getconf", GET_SCHEDULER_CONF, false,
+        "Get current scheduler configurations");
+    boolean getConf = false;
+      if (parsedCli.hasOption(GET_SCHEDULER_CONF)) {
+        hasOption = true;
+        getConf = true;
+      }
+    } else if (getConf) {
+      return WebAppUtils.execOnActiveRM(conf, this::getSchedulerConf, null);
+  private static void prettyFormatWithIndent(String input, int indent)
+      throws Exception {
+    Source xmlInput = new StreamSource(new StringReader(input));
+    StringWriter sw = new StringWriter();
+    StreamResult xmlOutput = new StreamResult(sw);
+    TransformerFactory transformerFactory = TransformerFactory.newInstance();
+    transformerFactory.setAttribute("indent-number", indent);
+    Transformer transformer = transformerFactory.newTransformer();
+    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+    transformer.transform(xmlInput, xmlOutput);
+    System.out.println(xmlOutput.getWriter().toString());
+  }
+
+  private WebResource initializeWebResource(String webAppAddress) {
+    Configuration conf = getConf();
+    if (YarnConfiguration.useHttps(conf)) {
+      sslFactory = new SSLFactory(SSLFactory.Mode.CLIENT, conf);
+    }
+    client = createWebServiceClient(sslFactory);
+    return client.resource(webAppAddress);
+  }
+
+  private void destroyClient() {
+    if (client != null) {
+      client.destroy();
+    }
+    if (sslFactory != null) {
+      sslFactory.destroy();
+    }
+  }
+
+  @VisibleForTesting
+  int getSchedulerConf(String webAppAddress, WebResource resource)
+      throws Exception {
+    ClientResponse response = null;
+    resource = (resource != null) ? resource :
+        initializeWebResource(webAppAddress);
+    try {
+      Builder builder;
+      if (UserGroupInformation.isSecurityEnabled()) {
+        builder = resource
+            .path("ws").path("v1").path("cluster")
+            .path("scheduler-conf").accept(MediaType.APPLICATION_XML);
+      } else {
+        builder = resource
+            .path("ws").path("v1").path("cluster").path("scheduler-conf")
+            .queryParam("user.name", UserGroupInformation.getCurrentUser()
+            .getShortUserName()).accept(MediaType.APPLICATION_XML);
+      }
+      response = builder.get(ClientResponse.class);
+      if (response != null) {
+        if (response.getStatus() == Status.OK.getStatusCode()) {
+          ConfInfo schedulerConf = response.getEntity(ConfInfo.class);
+          JAXBContext jaxbContext = JAXBContext.newInstance(ConfInfo.class);
+          Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
+          StringWriter sw = new StringWriter();
+          jaxbMarshaller.marshal(schedulerConf, sw);
+          prettyFormatWithIndent(sw.toString(), 2);
+          return 0;
+        } else {
+          System.err.println("Failed to get scheduler configuration: "
+              + response.getEntity(String.class));
+        }
+      } else {
+        System.err.println("Failed to get scheduler configuration: " +
+            "null response");
+      }
+      return -1;
+    } finally {
+      if (response != null) {
+        response.close();
+      }
+      destroyClient();
+    }
+  }
+
-    Configuration conf = getConf();
-    SSLFactory clientSslFactory = null;
-    if (YarnConfiguration.useHttps(conf)) {
-      clientSslFactory = new SSLFactory(SSLFactory.Mode.CLIENT, conf);
-    }
-    Client webServiceClient = createWebServiceClient(clientSslFactory);
-        webServiceClient.resource(webAppAddress);
-
+        initializeWebResource(webAppAddress);
-      Builder builder = null;
+      Builder builder;
-      if (webServiceClient != null) {
-        webServiceClient.destroy();
-      }
-      if (clientSslFactory != null) {
-        clientSslFactory.destroy();
-      }
+      destroyClient();
-    Configuration conf = getConf();
-    SSLFactory clientSslFactory = null;
-    if (YarnConfiguration.useHttps(conf)) {
-      clientSslFactory = new SSLFactory(SSLFactory.Mode.CLIENT, conf);
-    }
-    Client webServiceClient = createWebServiceClient(clientSslFactory);
-    WebResource resource = webServiceClient.resource(webAppAddress);
-
+    WebResource resource = initializeWebResource(webAppAddress);
-      if (webServiceClient != null) {
-        webServiceClient.destroy();
-      }
-      if (clientSslFactory != null) {
-        clientSslFactory.destroy();
-      }
+      destroyClient();
-        + "[-format]\n"
+        + "[-format] "
+        + "[-getconf]\n"
+        + "Example (get scheduler configuration): yarn schedulerconf "
+        + "-getconf\n"
