YARN-6716. Native services support for specifying component start order. Contributed by Billie Rinaldi

-import org.apache.hadoop.conf.Configuration;
+import org.apache.slider.server.appmaster.state.RoleInstance;
-import java.net.InetAddress;
+import java.util.Map;
- * Probe for a port being open
+ * Probe for a port being open.
-  private final String host;
-  public PortProbe(String host, int port, int timeout, String name, Configuration conf)
-      throws IOException {
-    super("Port probe " + name + " " + host + ":" + port + " for " + timeout + "ms",
-          conf);
-    this.host = host;
+  public PortProbe(int port, int timeout) {
+    super("Port probe of " + port + " for " + timeout + "ms", null);
-  public static PortProbe createPortProbe(Configuration conf,
-                                          String hostname,
-                                          int port) throws IOException {
-    PortProbe portProbe = new PortProbe(hostname,
-                                        port,
-                                        conf.getInt(
-                                          PORT_PROBE_CONNECT_TIMEOUT,
-                                          PORT_PROBE_CONNECT_TIMEOUT_DEFAULT),
-                                        "",
-                                        conf);
+  public static PortProbe create(Map<String, String> props)
+      throws IOException {
+    int port = getPropertyInt(props, PORT_PROBE_PORT, null);
-    return portProbe;
-  }
-
-  @Override
-  public void init() throws IOException {
-      throw new IOException("Port is out of range: " + port);
+      throw new IOException(PORT_PROBE_PORT + " " + port + " is out of " +
+          "range");
-    InetAddress target;
-    if (host != null) {
-      log.debug("looking up host " + host);
-      target = InetAddress.getByName(host);
-    } else {
-      log.debug("Host is null, retrieving localhost address");
-      target = InetAddress.getLocalHost();
-    }
-    log.info("Checking " + target + ":" + port);
+
+    int timeout = getPropertyInt(props, PORT_PROBE_CONNECT_TIMEOUT,
+        PORT_PROBE_CONNECT_TIMEOUT_DEFAULT);
+
+    return new PortProbe(port, timeout);
-   * the specified timeout is a failure
-   * @param livePing is the ping live: true for live; false for boot time
+   * the specified timeout is a failure.
+   * @param roleInstance role instance
-  public ProbeStatus ping(boolean livePing) {
+  public ProbeStatus ping(RoleInstance roleInstance) {
-    InetSocketAddress sockAddr = new InetSocketAddress(host, port);
+
+    String ip = roleInstance.ip;
+    if (ip == null) {
+      status.fail(this, new IOException("IP is not available yet"));
+      return status;
+    }
+
+    InetSocketAddress sockAddr = new InetSocketAddress(ip, port);
-        log.debug("Connecting to " + sockAddr.toString() + " connection-timeout=" +
-                  MonitorUtils.millisToHumanTime(timeout));
+        log.debug("Connecting to " + sockAddr.toString() + "timeout=" +
+            MonitorUtils.millisToHumanTime(timeout));
-    } catch (IOException e) {
+    } catch (Throwable e) {
-      status.fail(this,
-                  new IOException(error, e));
+      status.fail(this, new IOException(error, e));
-
