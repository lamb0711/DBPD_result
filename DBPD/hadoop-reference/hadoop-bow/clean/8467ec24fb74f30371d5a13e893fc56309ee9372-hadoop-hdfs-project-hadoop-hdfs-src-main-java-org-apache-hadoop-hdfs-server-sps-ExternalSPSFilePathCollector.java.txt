HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.

-import org.apache.hadoop.hdfs.server.namenode.sps.Context;
-import org.apache.hadoop.hdfs.server.namenode.sps.FileIdCollector;
+import org.apache.hadoop.hdfs.server.namenode.sps.FileCollector;
- * just submit the same file to process.
+ * just submit the same file to process. This will use file string path
+ * representation.
-public class ExternalSPSFileIDCollector implements FileIdCollector {
+public class ExternalSPSFilePathCollector implements FileCollector <String>{
-      LoggerFactory.getLogger(ExternalSPSFileIDCollector.class);
-  private Context cxt;
+      LoggerFactory.getLogger(ExternalSPSFilePathCollector.class);
-  private SPSService service;
+  private SPSService<String> service;
-  public ExternalSPSFileIDCollector(Context cxt, SPSService service) {
-    this.cxt = cxt;
+  public ExternalSPSFilePathCollector(SPSService<String> service) {
-  private long processPath(long startID, String fullPath) {
+  private long processPath(String startID, String childPath) {
-        children = dfs.getClient().listPaths(fullPath, lastReturnedName, false);
+        children = dfs.getClient().listPaths(childPath, lastReturnedName,
+            false);
-        LOG.warn("Failed to list directory " + fullPath
+        LOG.warn("Failed to list directory " + childPath
-          LOG.debug("The scanning start dir/sub dir " + fullPath
+          LOG.debug("The scanning start dir/sub dir " + childPath
+        String childFullPath = child.getFullName(childPath);
-          service.addFileIdToProcess(new ItemInfo(startID, child.getFileId()),
-              false);
+          service.addFileToProcess(
+              new ItemInfo<String>(startID, childFullPath), false);
-          String fullPathStr = child.getFullName(fullPath);
-            if (!fullPathStr.endsWith(Path.SEPARATOR)) {
-              fullPathStr = fullPathStr + Path.SEPARATOR;
+            if (!childFullPath.endsWith(Path.SEPARATOR)) {
+              childFullPath = childFullPath + Path.SEPARATOR;
-            pendingWorkCount += processPath(startID, fullPathStr);
+            pendingWorkCount += processPath(startID, childFullPath);
-  public void scanAndCollectFileIds(Long inodeId) throws IOException {
+  public void scanAndCollectFiles(String path) throws IOException {
-    long pendingSatisfyItemsCount = processPath(inodeId,
-        cxt.getFilePath(inodeId));
+    long pendingSatisfyItemsCount = processPath(path, path);
-          + "inodeId:{}", inodeId);
-      service.addAllFileIdsToProcess(inodeId, new ArrayList<>(), true);
+          + "inodeId:{}", path);
+      service.addAllFilesToProcess(path, new ArrayList<>(), true);
-      service.markScanCompletedForPath(inodeId);
+      service.markScanCompletedForPath(path);
