YARN-5709. Cleanup leader election configs and pluggability. Contribtued by Karthik Kambatla

+/**
+ * Leader election implementation that uses {@link ActiveStandbyElector}.
+ */
-public class EmbeddedElectorService extends AbstractService
-    implements ActiveStandbyElector.ActiveStandbyElectorCallback {
-  private static final Log LOG =
-      LogFactory.getLog(EmbeddedElectorService.class.getName());
+public class ActiveStandbyElectorBasedElectorService extends AbstractService
+    implements EmbeddedElector,
+    ActiveStandbyElector.ActiveStandbyElectorCallback {
+  private static final Log LOG = LogFactory.getLog(
+      ActiveStandbyElectorBasedElectorService.class.getName());
-  EmbeddedElectorService(RMContext rmContext) {
-    super(EmbeddedElectorService.class.getName());
+  ActiveStandbyElectorBasedElectorService(RMContext rmContext) {
+    super(ActiveStandbyElectorBasedElectorService.class.getName());
-    conf = conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);
+    conf = conf instanceof YarnConfiguration
+        ? conf
+        : new YarnConfiguration(conf);
-     throw new YarnRuntimeException("Embedded automatic failover " +
+      throw new YarnRuntimeException("Embedded automatic failover " +
-        new RMFatalEvent(RMFatalEventType.EMBEDDED_ELECTOR_FAILED, errorMessage));
+        new RMFatalEvent(RMFatalEventType.EMBEDDED_ELECTOR_FAILED,
+            errorMessage));
-  public void resetLeaderElection() {
+  // EmbeddedElector methods
+
+  @Override
+  public void rejoinElection() {
-  public String getHAZookeeperConnectionState() {
+  @Override
+  public String getZookeeperConnectionState() {
