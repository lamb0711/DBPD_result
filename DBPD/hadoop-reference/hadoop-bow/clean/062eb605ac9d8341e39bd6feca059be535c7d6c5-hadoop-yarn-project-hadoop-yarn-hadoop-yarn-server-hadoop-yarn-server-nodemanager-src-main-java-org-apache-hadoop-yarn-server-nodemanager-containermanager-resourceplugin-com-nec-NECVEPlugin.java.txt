YARN-9477. Implement VE discovery using libudev. Contributed by Peter Bacsko.

+  private static final String ENV_USE_UDEV = "NEC_USE_UDEV";
+  private boolean useUdev;
+  private VEDeviceDiscoverer discoverer;
-    this(System::getenv, DEFAULT_BINARY_SEARCH_DIRS);
+    this(System::getenv, DEFAULT_BINARY_SEARCH_DIRS, new UdevUtil());
-  NECVEPlugin(Function<String, String> envProvider, String[] scriptPaths)
-      throws ResourceHandlerException {
+  NECVEPlugin(Function<String, String> envProvider, String[] scriptPaths,
+      UdevUtil udev) throws ResourceHandlerException {
+    if (Boolean.parseBoolean(envProvider.apply(ENV_USE_UDEV))) {
+      LOG.info("Using libudev to retrieve syspath & device status");
+      useUdev = true;
+      udev.init();
+      discoverer = new VEDeviceDiscoverer(udev);
+    } else {
+      scriptBasedInit(envProvider, scriptPaths);
+    }
+  }
+
+  private void scriptBasedInit(Function<String, String> envProvider,
+      String[] scriptPaths) throws ResourceHandlerException {
-    CommandExecutor executor =
-        commandExecutorProvider.apply(new String[]{this.binaryPath});
-    try {
-      executor.execute();
-      String output = executor.getOutput();
-      devices = parseOutput(output);
-    } catch (IOException e) {
-      LOG.warn(e.toString());
+    if (useUdev) {
+      try {
+        devices = discoverer.getDevicesFromPath("/dev");
+      } catch (IOException e) {
+        LOG.error("Error during scanning devices", e);
+      }
+    } else {
+      CommandExecutor executor =
+          commandExecutorProvider.apply(new String[]{this.binaryPath});
+      try {
+        executor.execute();
+        String output = executor.getOutput();
+        devices = parseOutput(output);
+      } catch (IOException e) {
+        LOG.error("Error during executing external binary", e);
+      }
+
+    if (devices != null) {
+      LOG.info("Found devices:");
+      devices.forEach(dev -> LOG.info("{}", dev));
+    }
+
+  void setVeDeviceDiscoverer(VEDeviceDiscoverer veDeviceDiscoverer) {
+    this.discoverer = veDeviceDiscoverer;
+  }
+
+  @VisibleForTesting
