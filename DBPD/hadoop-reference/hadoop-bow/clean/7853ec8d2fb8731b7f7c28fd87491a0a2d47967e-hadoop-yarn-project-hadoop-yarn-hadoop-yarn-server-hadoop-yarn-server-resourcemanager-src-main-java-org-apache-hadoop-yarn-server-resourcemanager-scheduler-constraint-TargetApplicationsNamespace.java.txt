YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.

-import static org.apache.hadoop.yarn.api.records.AllocationTagNamespaceType.APP_LABEL;
+import static org.apache.hadoop.yarn.api.records.AllocationTagNamespaceType.APP_TAG;
- * Class to describe the namespace of an allocation tag.
- * Each namespace can be evaluated against a set of applications.
- * After evaluation, the namespace should have an implicit set of
- * applications which defines its scope.
+ * Class to describe the namespace of allocation tags, used by
+ * {@link AllocationTags}. Each namespace can be evaluated against
+ * a target set applications, represented by {@link TargetApplications}.
+ * After evaluation, the namespace is interpreted to be a set of
+ * applications based on the namespace type.
-public abstract class AllocationTagNamespace implements
+public abstract class TargetApplicationsNamespace implements
-  public AllocationTagNamespace(AllocationTagNamespaceType
+  public TargetApplicationsNamespace(AllocationTagNamespaceType
-  public static class Self extends AllocationTagNamespace {
+  public static class Self extends TargetApplicationsNamespace {
-  public static class NotSelf extends AllocationTagNamespace {
+  public static class NotSelf extends TargetApplicationsNamespace {
-  public static class All extends AllocationTagNamespace {
+  public static class All extends TargetApplicationsNamespace {
-   * Namespace to all applications in the cluster.
+   * Namespace to applications that attached with a certain application tag.
-  public static class AppLabel extends AllocationTagNamespace {
+  public static class AppTag extends TargetApplicationsNamespace {
-    public AppLabel() {
-      super(APP_LABEL);
+    private String applicationTag;
+
+    public AppTag(String appTag) {
+      super(APP_TAG);
+      this.applicationTag = appTag;
-      // TODO Implement app-label namespace evaluation
+      setScopeIfNotNull(target.getApplicationIdsByTag(applicationTag));
+    }
+
+    @Override
+    public String toString() {
+      return APP_TAG.toString() + NAMESPACE_DELIMITER + this.applicationTag;
-  public static class AppID extends AllocationTagNamespace {
+  public static class AppID extends TargetApplicationsNamespace {
-   * @return an instance of {@link AllocationTagNamespace}.
+   * @return an instance of {@link TargetApplicationsNamespace}.
-  public static AllocationTagNamespace parse(String namespaceStr)
+  public static TargetApplicationsNamespace parse(String namespaceStr)
-    case APP_LABEL:
-      return new AppLabel();
+    case APP_TAG:
+      if (nsValues.size() != 2) {
+        throw new InvalidAllocationTagsQueryException(
+            "Missing the application tag in the namespace string: "
+                + namespaceStr);
+      }
+      return new AppTag(nsValues.get(1));
-  private static AllocationTagNamespace parseAppID(String appIDStr)
+  private static TargetApplicationsNamespace parseAppID(String appIDStr)
