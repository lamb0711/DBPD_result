HDDS-793. Support custom key/value annotations on volume/bucket/key. Contributed by Elek, Marton.

+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
-public final class OmKeyInfo {
+public final class OmKeyInfo extends WithMetadata {
-  private OmKeyInfo(String volumeName, String bucketName, String keyName,
-                    List<OmKeyLocationInfoGroup> versions, long dataSize,
-                    long creationTime, long modificationTime,
-                    HddsProtos.ReplicationType type,
-                    HddsProtos.ReplicationFactor factor) {
+  OmKeyInfo(String volumeName, String bucketName, String keyName,
+      List<OmKeyLocationInfoGroup> versions, long dataSize,
+      long creationTime, long modificationTime,
+      HddsProtos.ReplicationType type,
+      HddsProtos.ReplicationFactor factor,
+      Map<String, String> metadata) {
+    this.metadata = metadata;
+    private Map<String, String> metadata;
+
+    public Builder() {
+      this.metadata = new HashMap<>();
+      omKeyLocationInfoGroups = new ArrayList<>();
+    }
+    public Builder addMetadata(String key, String value) {
+      metadata.put(key, value);
+      return this;
+    }
+
+    public Builder addAllMetadata(Map<String, String> newMetadata) {
+      metadata.putAll(newMetadata);
+      return this;
+    }
+
-          dataSize, creationTime, modificationTime, type, factor);
+          dataSize, creationTime, modificationTime, type, factor, metadata);
+        .addAllMetadata(KeyValueUtil.toProtobuf(metadata))
-        keyInfo.getFactor());
+        keyInfo.getFactor(),
+        KeyValueUtil.getFromProtobuf(keyInfo.getMetadataList()));
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    OmKeyInfo omKeyInfo = (OmKeyInfo) o;
+    return dataSize == omKeyInfo.dataSize &&
+        creationTime == omKeyInfo.creationTime &&
+        modificationTime == omKeyInfo.modificationTime &&
+        volumeName.equals(omKeyInfo.volumeName) &&
+        bucketName.equals(omKeyInfo.bucketName) &&
+        keyName.equals(omKeyInfo.keyName) &&
+        Objects
+            .equals(keyLocationVersions, omKeyInfo.keyLocationVersions) &&
+        type == omKeyInfo.type &&
+        factor == omKeyInfo.factor &&
+        Objects.equals(metadata, omKeyInfo.metadata);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(volumeName, bucketName, keyName);
+  }
