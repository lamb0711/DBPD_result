Merge r1569890 through r1571508 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571509 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.hadoop.yarn.server.applicationhistoryservice.apptimeline;
+package org.apache.hadoop.yarn.server.applicationhistoryservice.timeline;
-import org.apache.hadoop.yarn.api.records.apptimeline.ATSEntities;
-import org.apache.hadoop.yarn.api.records.apptimeline.ATSEntity;
-import org.apache.hadoop.yarn.api.records.apptimeline.ATSEvent;
-import org.apache.hadoop.yarn.api.records.apptimeline.ATSEvents;
-import org.apache.hadoop.yarn.api.records.apptimeline.ATSEvents.ATSEventsOfOneEntity;
-import org.apache.hadoop.yarn.api.records.apptimeline.ATSPutErrors;
-import org.apache.hadoop.yarn.api.records.apptimeline.ATSPutErrors.ATSPutError;
+import org.apache.hadoop.yarn.api.records.timeline.TimelineEntities;
+import org.apache.hadoop.yarn.api.records.timeline.TimelineEntity;
+import org.apache.hadoop.yarn.api.records.timeline.TimelineEvent;
+import org.apache.hadoop.yarn.api.records.timeline.TimelineEvents;
+import org.apache.hadoop.yarn.api.records.timeline.TimelinePutResponse;
+import org.apache.hadoop.yarn.api.records.timeline.TimelineEvents.EventsOfOneEntity;
+import org.apache.hadoop.yarn.api.records.timeline.TimelinePutResponse.TimelinePutError;
-import static org.apache.hadoop.yarn.server.applicationhistoryservice
-    .apptimeline.GenericObjectMapper.readReverseOrderedLong;
-import static org.apache.hadoop.yarn.server.applicationhistoryservice
-    .apptimeline.GenericObjectMapper.writeReverseOrderedLong;
+import static org.apache.hadoop.yarn.server.applicationhistoryservice.timeline.GenericObjectMapper.readReverseOrderedLong;
+import static org.apache.hadoop.yarn.server.applicationhistoryservice.timeline.GenericObjectMapper.writeReverseOrderedLong;
- * An implementation of an application timeline store backed by leveldb.
+ * An implementation of a timeline store backed by leveldb.
-public class LeveldbApplicationTimelineStore extends AbstractService
-    implements ApplicationTimelineStore {
+public class LeveldbTimelineStore extends AbstractService
+    implements TimelineStore {
-      .getLog(LeveldbApplicationTimelineStore.class);
+      .getLog(LeveldbTimelineStore.class);
-  private static final String FILENAME = "leveldb-apptimeline-store.ldb";
+  private static final String FILENAME = "leveldb-timeline-store.ldb";
-  public LeveldbApplicationTimelineStore() {
-    super(LeveldbApplicationTimelineStore.class.getName());
+  public LeveldbTimelineStore() {
+    super(LeveldbTimelineStore.class.getName());
-    String path = conf.get(YarnConfiguration.ATS_LEVELDB_PATH_PROPERTY);
+    String path = conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH);
-            "application timeline store " + path);
+            "timeline store " + path);
-  public ATSEntity getEntity(String entity, String entityType,
+  public TimelineEntity getEntity(String entityId, String entityType,
-      byte[] revStartTime = getStartTime(entity, entityType, null, null, null);
+      byte[] revStartTime = getStartTime(entityId, entityType, null, null, null);
-          .add(entityType).add(revStartTime).add(entity).getBytesForLookup();
+          .add(entityType).add(revStartTime).add(entityId).getBytesForLookup();
-      return getEntity(entity, entityType,
+      return getEntity(entityId, entityType,
-  private static ATSEntity getEntity(String entity, String entityType,
+  private static TimelineEntity getEntity(String entityId, String entityType,
-    ATSEntity atsEntity = new ATSEntity();
+    TimelineEntity entity = new TimelineEntity();
-      atsEntity.setEvents(new ArrayList<ATSEvent>());
+      entity.setEvents(new ArrayList<TimelineEvent>());
-      atsEntity.setEvents(new ArrayList<ATSEvent>());
+      entity.setEvents(new ArrayList<TimelineEvent>());
-      atsEntity.setEvents(null);
+      entity.setEvents(null);
-      atsEntity.setRelatedEntities(new HashMap<String, List<String>>());
-      atsEntity.setRelatedEntities(null);
+      entity.setRelatedEntities(null);
-      atsEntity.setPrimaryFilters(new HashMap<String, Object>());
-      atsEntity.setPrimaryFilters(null);
+      entity.setPrimaryFilters(null);
-      atsEntity.setOtherInfo(new HashMap<String, Object>());
+      entity.setOtherInfo(new HashMap<String, Object>());
-      atsEntity.setOtherInfo(null);
+      entity.setOtherInfo(null);
-          atsEntity.addPrimaryFilter(parseRemainingKey(key,
-              prefixlen + PRIMARY_FILTER_COLUMN.length),
-              GenericObjectMapper.read(iterator.peekNext().getValue()));
+          addPrimaryFilter(entity, key,
+              prefixlen + PRIMARY_FILTER_COLUMN.length);
-          atsEntity.addOtherInfo(parseRemainingKey(key,
+          entity.addOtherInfo(parseRemainingKey(key,
-          addRelatedEntity(atsEntity, key,
+          addRelatedEntity(entity, key,
-        if (events || (lastEvent && atsEntity.getEvents().size() == 0)) {
-          ATSEvent event = getEntityEvent(null, key, prefixlen +
+        if (events || (lastEvent && entity.getEvents().size() == 0)) {
+          TimelineEvent event = getEntityEvent(null, key, prefixlen +
-            atsEntity.addEvent(event);
+            entity.addEvent(event);
-            "type %s (0x%02x)", entity, entityType, key[prefixlen]));
+            "type %s (0x%02x)", entityId, entityType, key[prefixlen]));
-    atsEntity.setEntityId(entity);
-    atsEntity.setEntityType(entityType);
-    atsEntity.setStartTime(startTime);
+    entity.setEntityId(entityId);
+    entity.setEntityType(entityType);
+    entity.setStartTime(startTime);
-    return atsEntity;
+    return entity;
-  public ATSEvents getEntityTimelines(String entityType,
+  public TimelineEvents getEntityTimelines(String entityType,
-    ATSEvents atsEvents = new ATSEvents();
+    TimelineEvents events = new TimelineEvents();
-      return atsEvents;
+      return events;
-        for (EntityIdentifier entity : entry.getValue()) {
-          ATSEventsOfOneEntity atsEntity = new ATSEventsOfOneEntity();
-          atsEntity.setEntityId(entity.getId());
-          atsEntity.setEntityType(entityType);
-          atsEvents.addEvent(atsEntity);
+        for (EntityIdentifier entityID : entry.getValue()) {
+          EventsOfOneEntity entity = new EventsOfOneEntity();
+          entity.setEntityId(entityID.getId());
+          entity.setEntityType(entityType);
+          events.addEvent(entity);
-              .add(entityType).add(revStartTime).add(entity.getId())
+              .add(entityType).add(revStartTime).add(entityID.getId())
-          for (iterator.seek(first); atsEntity.getEvents().size() < limit &&
+          for (iterator.seek(first); entity.getEvents().size() < limit &&
-            ATSEvent event = getEntityEvent(eventType, key, prefix.length,
+            TimelineEvent event = getEntityEvent(eventType, key, prefix.length,
-              atsEntity.addEvent(event);
+              entity.addEvent(event);
-    return atsEvents;
+    return events;
-  public ATSEntities getEntities(String entityType,
+  public TimelineEntities getEntities(String entityType,
-  private ATSEntities getEntityByTime(byte[] base,
+  private TimelineEntities getEntityByTime(byte[] base,
-      ATSEntities atsEntities = new ATSEntities();
+      TimelineEntities entities = new TimelineEntities();
-      while (atsEntities.getEntities().size() < limit && iterator.hasNext()) {
+      while (entities.getEntities().size() < limit && iterator.hasNext()) {
-        // read the start time and entity from the current key
+        // read the start time and entityId from the current key
-        String entity = kp.getNextString();
+        String entityId = kp.getNextString();
-        ATSEntity atsEntity = getEntity(entity, entityType, startTime,
+        TimelineEntity entity = getEntity(entityId, entityType, startTime,
-        if (atsEntity == null)
+        if (entity == null)
-            Object v = atsEntity.getOtherInfo().get(filter.getName());
-            if (v == null)
-              v = atsEntity.getPrimaryFilters().get(filter.getName());
-            if (v == null || !v.equals(filter.getValue())) {
+            Object v = entity.getOtherInfo().get(filter.getName());
+            if (v == null) {
+              Set<Object> vs = entity.getPrimaryFilters()
+                  .get(filter.getName());
+              if (vs != null && !vs.contains(filter.getValue())) {
+                filterPassed = false;
+                break;
+              }
+            } else if (!v.equals(filter.getValue())) {
-          atsEntities.addEntity(atsEntity);
+          entities.addEntity(entity);
-      return atsEntities;
+      return entities;
-   * Put a single entity.  If there is an error, add a PutError to the given
+   * Put a single entity.  If there is an error, add a TimelinePutError to the given
-  private void put(ATSEntity atsEntity, ATSPutErrors response) {
+  private void put(TimelineEntity entity, TimelinePutResponse response) {
-      List<ATSEvent> events = atsEntity.getEvents();
+      List<TimelineEvent> events = entity.getEvents();
-      byte[] revStartTime = getStartTime(atsEntity.getEntityId(),
-          atsEntity.getEntityType(), atsEntity.getStartTime(), events,
+      byte[] revStartTime = getStartTime(entity.getEntityId(),
+          entity.getEntityType(), entity.getStartTime(), events,
-        ATSPutError error = new ATSPutError();
-        error.setEntityId(atsEntity.getEntityId());
-        error.setEntityType(atsEntity.getEntityType());
-        error.setErrorCode(ATSPutError.NO_START_TIME);
+        TimelinePutError error = new TimelinePutError();
+        error.setEntityId(entity.getEntityId());
+        error.setEntityType(entity.getEntityType());
+        error.setErrorCode(TimelinePutError.NO_START_TIME);
-      Map<String, Object> primaryFilters = atsEntity.getPrimaryFilters();
+      Map<String, Set<Object>> primaryFilters = entity.getPrimaryFilters();
-        for (ATSEvent event : events) {
+        for (TimelineEvent event : events) {
-          byte[] key = createEntityEventKey(atsEntity.getEntityId(),
-              atsEntity.getEntityType(), revStartTime, revts,
+          byte[] key = createEntityEventKey(entity.getEntityId(),
+              entity.getEntityType(), revStartTime, revts,
-      Map<String,List<String>> relatedEntities =
-          atsEntity.getRelatedEntities();
+      Map<String, Set<String>> relatedEntities =
+          entity.getRelatedEntities();
-        for (Entry<String, List<String>> relatedEntityList :
+        for (Entry<String, Set<String>> relatedEntityList :
-                atsEntity.getEntityId(), atsEntity.getEntityType());
+                entity.getEntityId(), entity.getEntityType());
-        for (Entry<String, Object> primaryFilter : primaryFilters.entrySet()) {
-          byte[] key = createPrimaryFilterKey(atsEntity.getEntityId(),
-              atsEntity.getEntityType(), revStartTime, primaryFilter.getKey());
-          byte[] value = GenericObjectMapper.write(primaryFilter.getValue());
-          writeBatch.put(key, value);
-          writePrimaryFilterEntries(writeBatch, primaryFilters, key, value);
+        for (Entry<String, Set<Object>> primaryFilter :
+            primaryFilters.entrySet()) {
+          for (Object primaryFilterValue : primaryFilter.getValue()) {
+            byte[] key = createPrimaryFilterKey(entity.getEntityId(),
+                entity.getEntityType(), revStartTime,
+                primaryFilter.getKey(), primaryFilterValue);
+            writeBatch.put(key, EMPTY_BYTES);
+            writePrimaryFilterEntries(writeBatch, primaryFilters, key,
+                EMPTY_BYTES);
+          }
-      Map<String, Object> otherInfo = atsEntity.getOtherInfo();
+      Map<String, Object> otherInfo = entity.getOtherInfo();
-          byte[] key = createOtherInfoKey(atsEntity.getEntityId(),
-              atsEntity.getEntityType(), revStartTime, i.getKey());
+          byte[] key = createOtherInfoKey(entity.getEntityId(),
+              entity.getEntityType(), revStartTime, i.getKey());
-      LOG.error("Error putting entity " + atsEntity.getEntityId() +
-          " of type " + atsEntity.getEntityType(), e);
-      ATSPutError error = new ATSPutError();
-      error.setEntityId(atsEntity.getEntityId());
-      error.setEntityType(atsEntity.getEntityType());
-      error.setErrorCode(ATSPutError.IO_EXCEPTION);
+      LOG.error("Error putting entity " + entity.getEntityId() +
+          " of type " + entity.getEntityType(), e);
+      TimelinePutError error = new TimelinePutError();
+      error.setEntityId(entity.getEntityId());
+      error.setEntityType(entity.getEntityType());
+      error.setErrorCode(TimelinePutError.IO_EXCEPTION);
-      Map<String, Object> primaryFilters, byte[] key, byte[] value)
+      Map<String, Set<Object>> primaryFilters, byte[] key, byte[] value)
-      for (Entry<String, Object> p : primaryFilters.entrySet()) {
-        writeBatch.put(addPrimaryFilterToKey(p.getKey(), p.getValue(),
-            key), value);
+      for (Entry<String, Set<Object>> pf : primaryFilters.entrySet()) {
+        for (Object pfval : pf.getValue()) {
+          writeBatch.put(addPrimaryFilterToKey(pf.getKey(), pfval,
+              key), value);
+        }
-  public ATSPutErrors put(ATSEntities atsEntities) {
-    ATSPutErrors response = new ATSPutErrors();
-    for (ATSEntity atsEntity : atsEntities.getEntities()) {
-      put(atsEntity, response);
+  public TimelinePutResponse put(TimelineEntities entities) {
+    TimelinePutResponse response = new TimelinePutResponse();
+    for (TimelineEntity entity : entities.getEntities()) {
+      put(entity, response);
-      Long startTime, List<ATSEvent> events, WriteBatch writeBatch)
+      Long startTime, List<TimelineEvent> events, WriteBatch writeBatch)
-          for (ATSEvent e : events)
+          for (TimelineEvent e : events)
-  private static ATSEvent getEntityEvent(Set<String> eventTypes, byte[] key,
+  private static TimelineEvent getEntityEvent(Set<String> eventTypes, byte[] key,
-      ATSEvent event = new ATSEvent();
+      TimelineEvent event = new TimelineEvent();
-   * entitytype + revstarttime + entity + PRIMARY_FILTER_COLUMN + name.
+   * entitytype + revstarttime + entity + PRIMARY_FILTER_COLUMN + name + value.
-      String entitytype, byte[] revStartTime, String name) throws IOException {
+      String entitytype, byte[] revStartTime, String name, Object value)
+      throws IOException {
-        .getBytes();
+        .add(GenericObjectMapper.write(value)).getBytes();
+  }
+
+  /**
+   * Parses the primary filter from the given key at the given offset and
+   * adds it to the given entity.
+   */
+  private static void addPrimaryFilter(TimelineEntity entity, byte[] key,
+      int offset) throws IOException {
+    KeyParser kp = new KeyParser(key, offset);
+    String name = kp.getNextString();
+    Object value = GenericObjectMapper.read(key, kp.getOffset());
+    entity.addPrimaryFilter(name, value);
-  private static void addRelatedEntity(ATSEntity atsEntity, byte[] key,
+  private static void addRelatedEntity(TimelineEntity entity, byte[] key,
-    atsEntity.addRelatedEntity(type, id);
+    entity.addRelatedEntity(type, id);
