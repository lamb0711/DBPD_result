HDFS-5648. Get rid of FsDatasetImpl#perVolumeReplicaMap.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1550357 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.base.Preconditions;
-  // TODO HDFS-2832: Consider removing duplicated block info from these
-  // two maps and move the perVolumeReplicaMap to FsVolumeImpl.
-  // This might require some refactoring.
-  // Map from StorageID to ReplicaMap.
-  final Map<String, ReplicaMap> perVolumeReplicaMap;
-
-
-    perVolumeReplicaMap = new HashMap<String, ReplicaMap>();
-    volumes.initializeReplicaMaps(perVolumeReplicaMap, volumeMap, this);
+    volumes.initializeReplicaMaps(volumeMap);
-    perVolumeReplicaMap.get(v.getStorageID()).add(bpid, newReplicaInfo);
-    perVolumeReplicaMap.get(v.getStorageID()).add(b.getBlockPoolId(), newReplicaInfo);
-    perVolumeReplicaMap.get(v.getStorageID()).add(b.getBlockPoolId(), rbw);
-    perVolumeReplicaMap.get(v.getStorageID()).add(b.getBlockPoolId(), newReplicaInfo);
-    perVolumeReplicaMap.get(newReplicaInfo.getVolume().getStorageID())
-        .add(bpid, newReplicaInfo);
-      perVolumeReplicaMap.get(replicaInfo.getVolume().getStorageID())
-          .remove(b.getBlockPoolId(), b.getLocalBlock());
-  private BlockListAsLongs getBlockReportWithReplicaMap(
-      String bpid, ReplicaMap rMap) {
-    int size =  rMap.size(bpid);
-    ArrayList<ReplicaInfo> finalized = new ArrayList<ReplicaInfo>(size);
-    ArrayList<ReplicaInfo> uc = new ArrayList<ReplicaInfo>();
-    if (size == 0) {
-      return new BlockListAsLongs(finalized, uc);
-    }
-    
-    synchronized(this) {
-      for (ReplicaInfo b : rMap.replicas(bpid)) {
-        switch(b.getState()) {
-        case FINALIZED:
-          finalized.add(b);
-          break;
-        case RBW:
-        case RWR:
-          uc.add(b);
-          break;
-        case RUR:
-          ReplicaUnderRecovery rur = (ReplicaUnderRecovery)b;
-          uc.add(rur.getOriginalReplica());
-          break;
-        case TEMPORARY:
-          break;
-        default:
-          assert false : "Illegal ReplicaInfo state.";
-        }
-      }
-      return new BlockListAsLongs(finalized, uc);
-    }
-  }
-
-    Map<DatanodeStorage, BlockListAsLongs> blockReportMap =
+    Map<DatanodeStorage, BlockListAsLongs> blockReportsMap =
-    for (FsVolumeImpl v : getVolumes()) {
-      ReplicaMap rMap = perVolumeReplicaMap.get(v.getStorageID());
-      BlockListAsLongs blockList = getBlockReportWithReplicaMap(bpid, rMap);
-      blockReportMap.put(v.toDatanodeStorage(), blockList);
+    Map<String, ArrayList<ReplicaInfo>> finalized =
+        new HashMap<String, ArrayList<ReplicaInfo>>();
+    Map<String, ArrayList<ReplicaInfo>> uc =
+        new HashMap<String, ArrayList<ReplicaInfo>>();
+
+    for (FsVolumeSpi v : volumes.volumes) {
+      finalized.put(v.getStorageID(), new ArrayList<ReplicaInfo>());
+      uc.put(v.getStorageID(), new ArrayList<ReplicaInfo>());
-    return blockReportMap;
+    synchronized(this) {
+      for (ReplicaInfo b : volumeMap.replicas(bpid)) {
+        switch(b.getState()) {
+          case FINALIZED:
+            finalized.get(b.getVolume().getStorageID()).add(b);
+            break;
+          case RBW:
+          case RWR:
+            uc.get(b.getVolume().getStorageID()).add(b);
+            break;
+          case RUR:
+            ReplicaUnderRecovery rur = (ReplicaUnderRecovery)b;
+            uc.get(rur.getVolume().getStorageID()).add(rur.getOriginalReplica());
+            break;
+          case TEMPORARY:
+            break;
+          default:
+            assert false : "Illegal ReplicaInfo state.";
+        }
+      }
+    }
+
+    for (FsVolumeImpl v : volumes.volumes) {
+      ArrayList<ReplicaInfo> finalizedList = finalized.get(v.getStorageID());
+      ArrayList<ReplicaInfo> ucList = uc.get(v.getStorageID());
+      blockReportsMap.put(v.toDatanodeStorage(),
+                          new BlockListAsLongs(finalizedList, ucList));
+    }
+
+    return blockReportsMap;
-        perVolumeReplicaMap.get(v.getStorageID()).remove(bpid, invalidBlks[i]);
-              perVolumeReplicaMap.get(fv.getStorageID())
-                  .remove(bpid, b.getBlockId());
-          perVolumeReplicaMap.get(vol.getStorageID()).remove(bpid, blockId);
-        perVolumeReplicaMap.get(vol.getStorageID())
-            .remove(bpid, diskBlockInfo);
-
-    // TODO: Avoid the double scan.
-    for (FsVolumeImpl v : getVolumes()) {
-      ReplicaMap rMap = perVolumeReplicaMap.get(v.getStorageID());
-      rMap.initBlockPool(bpid);
-      volumes.getVolumeMap(bpid, v, rMap);
-    }
