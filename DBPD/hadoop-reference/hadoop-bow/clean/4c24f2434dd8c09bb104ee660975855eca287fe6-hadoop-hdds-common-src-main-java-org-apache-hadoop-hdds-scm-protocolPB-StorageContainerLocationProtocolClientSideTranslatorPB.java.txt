HDDS-2072. Make StorageContainerLocationProtocolService message based
Contributed by Elek, Marton.

-import com.google.common.base.Preconditions;
-import com.google.protobuf.RpcController;
-import com.google.protobuf.ServiceException;
+import java.io.Closeable;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Consumer;
+
+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;
+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.GetScmInfoResponseProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.DeactivatePipelineRequestProto;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ListPipelineRequestProto;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ListPipelineResponseProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ContainerRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ContainerResponseProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.DeactivatePipelineRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.GetContainerRequestProto;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.GetContainerWithPipelineResponseProto;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.InSafeModeResponseProto;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.StartReplicationManagerRequestProto;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.StopReplicationManagerRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ListPipelineRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ListPipelineResponseProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.NodeQueryRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.NodeQueryResponseProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ObjectStageChangeRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.PipelineRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.PipelineResponseProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.SCMDeleteContainerRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.SCMListContainerRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.SCMListContainerResponseProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationRequest;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationRequest.Builder;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationResponse;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.StartReplicationManagerRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.StopReplicationManagerRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.Type;
-import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;
+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;
-import org.apache.hadoop.hdds.protocol.proto.HddsProtos;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.ContainerRequestProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.ContainerResponseProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.GetContainerRequestProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.GetContainerResponseProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.NodeQueryRequestProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.NodeQueryResponseProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.ObjectStageChangeRequestProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.PipelineRequestProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.PipelineResponseProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.SCMDeleteContainerRequestProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.SCMListContainerRequestProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerLocationProtocolProtos.SCMListContainerResponseProto;
-import java.io.Closeable;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
+import com.google.common.base.Preconditions;
+import com.google.protobuf.RpcController;
+import com.google.protobuf.ServiceException;
+   * Helper method to wrap the request and send the message.
+   */
+  private ScmContainerLocationResponse submitRequest(
+      StorageContainerLocationProtocolProtos.Type type,
+      Consumer<Builder> builderConsumer) throws IOException {
+    final ScmContainerLocationResponse response;
+    try {
+
+      Builder builder = ScmContainerLocationRequest.newBuilder()
+          .setCmdType(type)
+          .setTraceID(TracingUtil.exportCurrentSpan());
+      builderConsumer.accept(builder);
+      ScmContainerLocationRequest wrapper = builder.build();
+
+      response = rpcProxy.submitRequest(NULL_RPC_CONTROLLER, wrapper);
+    } catch (ServiceException ex) {
+      throw ProtobufHelper.getRemoteException(ex);
+    }
+    return response;
+  }
+
+  /**
-   * @param type - Replication Type
+   *
+   * @param type   - Replication Type
-   * @return
-   * @throws IOException
-    final ContainerResponseProto response;
-    try {
-      response = rpcProxy.allocateContainer(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    ContainerResponseProto response =
+        submitRequest(Type.AllocateContainer,
+            builder -> builder.setContainerRequest(request))
+            .getContainerResponse();
+    //TODO should be migrated to use the top level status structure.
-    try {
-      GetContainerResponseProto response =
-          rpcProxy.getContainer(NULL_RPC_CONTROLLER, request);
-      return ContainerInfo.fromProtobuf(response.getContainerInfo());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    ScmContainerLocationResponse response =
+        submitRequest(Type.GetContainer,
+            (builder) -> builder.setGetContainerRequest(request));
+    return ContainerInfo
+        .fromProtobuf(response.getGetContainerResponse().getContainerInfo());
+
-    try {
-      GetContainerWithPipelineResponseProto response =
-          rpcProxy.getContainerWithPipeline(NULL_RPC_CONTROLLER, request);
-      return ContainerWithPipeline.fromProtobuf(
-          response.getContainerWithPipeline());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    ScmContainerLocationResponse response =
+        submitRequest(Type.GetContainerWithPipeline,
+            (builder) -> builder.setGetContainerWithPipelineRequest(request));
+
+    return ContainerWithPipeline.fromProtobuf(
+        response.getGetContainerWithPipelineResponse()
+            .getContainerWithPipeline());
+
-    try {
-      SCMListContainerResponseProto response =
-          rpcProxy.listContainer(NULL_RPC_CONTROLLER, request);
-      List<ContainerInfo> containerList = new ArrayList<>();
-      for (HddsProtos.ContainerInfoProto containerInfoProto : response
-          .getContainersList()) {
-        containerList.add(ContainerInfo.fromProtobuf(containerInfoProto));
-      }
-      return containerList;
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
+    SCMListContainerResponseProto response =
+        submitRequest(Type.ListContainer,
+            builder1 -> builder1.setScmListContainerRequest(request))
+            .getScmListContainerResponse();
+    List<ContainerInfo> containerList = new ArrayList<>();
+    for (HddsProtos.ContainerInfoProto containerInfoProto : response
+        .getContainersList()) {
+      containerList.add(ContainerInfo.fromProtobuf(containerInfoProto));
+    return containerList;
+
-   *
-   * @param containerID
-   * @throws IOException
-    try {
-      rpcProxy.deleteContainer(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    submitRequest(Type.DeleteContainer,
+        builder -> builder.setScmDeleteContainerRequest(request));
+
-   *
-   * @param nodeStatuses
-   * @return List of Datanodes.
-    try {
-      NodeQueryResponseProto response =
-          rpcProxy.queryNode(NULL_RPC_CONTROLLER, request);
-      return response.getDatanodesList();
-    } catch (ServiceException e) {
-      throw  ProtobufHelper.getRemoteException(e);
-    }
+    NodeQueryResponseProto response = submitRequest(Type.QueryNode,
+        builder -> builder.setNodeQueryRequest(request)).getNodeQueryResponse();
+    return response.getDatanodesList();
-   * @param type object type
-   * @param id object id
-   * @param op operation type (e.g., create, close, delete)
+   *
+   * @param type  object type
+   * @param id    object id
+   * @param op    operation type (e.g., create, close, delete)
-    try {
-      rpcProxy.notifyObjectStageChange(NULL_RPC_CONTROLLER, request);
-    } catch(ServiceException e){
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    submitRequest(Type.NotifyObjectStageChange,
+        builder -> builder.setObjectStageChangeRequest(request));
+
-   * @param factor - factor 1 or 3
-   * @param nodePool - optional machine list to build a pipeline.
-   * @throws IOException
+   * @param factor          - factor 1 or 3
+   * @param nodePool        - optional machine list to build a pipeline.
-    try {
-      PipelineResponseProto response =
-          rpcProxy.allocatePipeline(NULL_RPC_CONTROLLER, request);
-      if (response.getErrorCode() ==
-          PipelineResponseProto.Error.success) {
-        Preconditions.checkState(response.hasPipeline(), "With success, " +
-            "must come a pipeline");
-        return Pipeline.getFromProtobuf(response.getPipeline());
-      } else {
-        String errorMessage = String.format("create replication pipeline " +
-                "failed. code : %s Message: %s", response.getErrorCode(),
-            response.hasErrorMessage() ? response.getErrorMessage() : "");
-        throw new IOException(errorMessage);
-      }
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
+
+    PipelineResponseProto response =
+        submitRequest(Type.AllocatePipeline,
+            builder -> builder.setPipelineRequest(request))
+            .getPipelineResponse();
+    if (response.getErrorCode() ==
+        PipelineResponseProto.Error.success) {
+      Preconditions.checkState(response.hasPipeline(), "With success, " +
+          "must come a pipeline");
+      return Pipeline.getFromProtobuf(response.getPipeline());
+    } else {
+      String errorMessage = String.format("create replication pipeline " +
+              "failed. code : %s Message: %s", response.getErrorCode(),
+          response.hasErrorMessage() ? response.getErrorMessage() : "");
+      throw new IOException(errorMessage);
+
-    try {
-      ListPipelineRequestProto request = ListPipelineRequestProto
-          .newBuilder().setTraceID(TracingUtil.exportCurrentSpan())
-          .build();
-      ListPipelineResponseProto response = rpcProxy.listPipelines(
-          NULL_RPC_CONTROLLER, request);
-      List<Pipeline> list = new ArrayList<>();
-      for (HddsProtos.Pipeline pipeline : response.getPipelinesList()) {
-        Pipeline fromProtobuf = Pipeline.getFromProtobuf(pipeline);
-        list.add(fromProtobuf);
-      }
-      return list;
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
+    ListPipelineRequestProto request = ListPipelineRequestProto
+        .newBuilder().setTraceID(TracingUtil.exportCurrentSpan())
+        .build();
+
+    ListPipelineResponseProto response = submitRequest(Type.ListPipelines,
+        builder -> builder.setListPipelineRequest(request))
+        .getListPipelineResponse();
+
+    List<Pipeline> list = new ArrayList<>();
+    for (HddsProtos.Pipeline pipeline : response.getPipelinesList()) {
+      Pipeline fromProtobuf = Pipeline.getFromProtobuf(pipeline);
+      list.add(fromProtobuf);
+    return list;
+
-    try {
-      ActivatePipelineRequestProto request =
-          ActivatePipelineRequestProto.newBuilder()
-              .setTraceID(TracingUtil.exportCurrentSpan())
-              .setPipelineID(pipelineID)
-              .build();
-      rpcProxy.activatePipeline(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    ActivatePipelineRequestProto request =
+        ActivatePipelineRequestProto.newBuilder()
+            .setTraceID(TracingUtil.exportCurrentSpan())
+            .setPipelineID(pipelineID)
+            .build();
+    submitRequest(Type.ActivatePipeline,
+        builder -> builder.setActivatePipelineRequest(request));
+
-    try {
-      DeactivatePipelineRequestProto request =
-          DeactivatePipelineRequestProto.newBuilder()
-              .setTraceID(TracingUtil.exportCurrentSpan())
-              .setPipelineID(pipelineID)
-              .build();
-      rpcProxy.deactivatePipeline(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    DeactivatePipelineRequestProto request =
+        DeactivatePipelineRequestProto.newBuilder()
+            .setTraceID(TracingUtil.exportCurrentSpan())
+            .setPipelineID(pipelineID)
+            .build();
+    submitRequest(Type.DeactivatePipeline,
+        builder -> builder.setDeactivatePipelineRequest(request));
-    try {
-      ClosePipelineRequestProto request =
-          ClosePipelineRequestProto.newBuilder()
-              .setTraceID(TracingUtil.exportCurrentSpan())
-              .setPipelineID(pipelineID)
-          .build();
-      rpcProxy.closePipeline(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    ClosePipelineRequestProto request =
+        ClosePipelineRequestProto.newBuilder()
+            .setTraceID(TracingUtil.exportCurrentSpan())
+            .setPipelineID(pipelineID)
+            .build();
+    submitRequest(Type.ClosePipeline,
+        builder -> builder.setClosePipelineRequest(request));
+
-    try {
-      HddsProtos.GetScmInfoResponseProto resp = rpcProxy.getScmInfo(
-          NULL_RPC_CONTROLLER, request);
-      ScmInfo.Builder builder = new ScmInfo.Builder()
-          .setClusterId(resp.getClusterId())
-          .setScmId(resp.getScmId());
-      return builder.build();
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    GetScmInfoResponseProto resp = submitRequest(Type.GetScmInfo,
+        builder -> builder.setGetScmInfoRequest(request))
+        .getGetScmInfoResponse();
+    ScmInfo.Builder builder = new ScmInfo.Builder()
+        .setClusterId(resp.getClusterId())
+        .setScmId(resp.getScmId());
+    return builder.build();
-   * @throws IOException
-    try {
-      InSafeModeResponseProto resp = rpcProxy.inSafeMode(
-          NULL_RPC_CONTROLLER, request);
-      return resp.getInSafeMode();
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    return submitRequest(Type.InSafeMode,
+        builder -> builder.setInSafeModeRequest(request))
+        .getInSafeModeResponse().getInSafeMode();
+
-   * @throws IOException
-    try {
-      ForceExitSafeModeResponseProto resp = rpcProxy
-          .forceExitSafeMode(NULL_RPC_CONTROLLER, request);
-      return resp.getExitedSafeMode();
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    ForceExitSafeModeResponseProto resp =
+        submitRequest(Type.ForceExitSafeMode,
+            builder -> builder.setForceExitSafeModeRequest(request))
+            .getForceExitSafeModeResponse();
+
+    return resp.getExitedSafeMode();
+
-    try {
-      StartReplicationManagerRequestProto request =
-          StartReplicationManagerRequestProto.getDefaultInstance();
-      rpcProxy.startReplicationManager(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    StartReplicationManagerRequestProto request =
+        StartReplicationManagerRequestProto.getDefaultInstance();
+    submitRequest(Type.StartReplicationManager,
+        builder -> builder.setStartReplicationManagerRequest(request));
+
-    try {
-      StopReplicationManagerRequestProto request =
-          StopReplicationManagerRequestProto.getDefaultInstance();
-      rpcProxy.stopReplicationManager(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    StopReplicationManagerRequestProto request =
+        StopReplicationManagerRequestProto.getDefaultInstance();
+    submitRequest(Type.StopReplicationManager,
+        builder -> builder.setStopReplicationManagerRequest(request));
+
-    try {
-      ReplicationManagerStatusRequestProto request =
-          ReplicationManagerStatusRequestProto.getDefaultInstance();
-      ReplicationManagerStatusResponseProto response =
-          rpcProxy.getReplicationManagerStatus(NULL_RPC_CONTROLLER, request);
-      return response.getIsRunning();
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    ReplicationManagerStatusRequestProto request =
+        ReplicationManagerStatusRequestProto.getDefaultInstance();
+    ReplicationManagerStatusResponseProto response =
+        submitRequest(Type.GetReplicationManagerStatus,
+            builder -> builder.setSeplicationManagerStatusRequest(request))
+            .getReplicationManagerStatusResponse();
+    return response.getIsRunning();
+
