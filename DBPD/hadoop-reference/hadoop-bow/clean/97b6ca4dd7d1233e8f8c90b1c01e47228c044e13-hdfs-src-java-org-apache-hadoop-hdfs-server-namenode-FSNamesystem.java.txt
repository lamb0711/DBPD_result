Revert 1140913 and 1140909 for HDFS-2107.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoUnderConstruction;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockManager;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockPlacementPolicy;
-import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor;
-import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor.BlockTargetPair;
-import org.apache.hadoop.hdfs.server.blockmanagement.UnderReplicatedBlocks;
+import org.apache.hadoop.hdfs.server.namenode.DatanodeDescriptor.BlockTargetPair;
+import org.apache.hadoop.hdfs.server.namenode.UnderReplicatedBlocks.BlockIterator;
-  public BlockManager blockManager;
+  BlockManager blockManager;
-   * The HeartbeatMonitor periodically checks for out-dated entries,
+   * The {@link HeartbeatMonitor} periodically checks for outdated entries,
-  public ArrayList<DatanodeDescriptor> heartbeats = new ArrayList<DatanodeDescriptor>();
+  ArrayList<DatanodeDescriptor> heartbeats = new ArrayList<DatanodeDescriptor>();
-  /** datanode network toplogy */
-  public NetworkTopology clusterMap = new NetworkTopology();
+  // datanode networktoplogy
+  NetworkTopology clusterMap = new NetworkTopology();
-  public int blockInvalidateLimit = DFSConfigKeys.DFS_BLOCK_INVALIDATE_LIMIT_DEFAULT;
+  int blockInvalidateLimit = DFSConfigKeys.DFS_BLOCK_INVALIDATE_LIMIT_DEFAULT;
-  public void readLock() {
+  void readLock() {
-  public void readUnlock() {
+  void readUnlock() {
-  public void writeLock() {
+  void writeLock() {
-  public void writeUnlock() {
+  void writeUnlock() {
-  public boolean hasWriteLock() {
+  boolean hasWriteLock() {
-  public LocatedBlock createLocatedBlock(final Block b, final DatanodeInfo[] locations,
+  LocatedBlock createLocatedBlock(final Block b, final DatanodeInfo[] locations,
-  public DatanodeCommand[] handleHeartbeat(DatanodeRegistration nodeReg,
+  DatanodeCommand[] handleHeartbeat(DatanodeRegistration nodeReg,
-  public void chooseExcessReplicates(Collection<DatanodeDescriptor> nonExcess, 
+  void chooseExcessReplicates(Collection<DatanodeDescriptor> nonExcess, 
+   * A immutable object that stores the number of live replicas and
+   * the number of decommissined Replicas.
+   */
+  static class NumberReplicas {
+    private int liveReplicas;
+    int decommissionedReplicas;
+    private int corruptReplicas;
+    private int excessReplicas;
+
+    NumberReplicas() {
+      initialize(0, 0, 0, 0);
+    }
+
+    NumberReplicas(int live, int decommissioned, int corrupt, int excess) {
+      initialize(live, decommissioned, corrupt, excess);
+    }
+
+    void initialize(int live, int decommissioned, int corrupt, int excess) {
+      liveReplicas = live;
+      decommissionedReplicas = decommissioned;
+      corruptReplicas = corrupt;
+      excessReplicas = excess;
+    }
+
+    int liveReplicas() {
+      return liveReplicas;
+    }
+    int decommissionedReplicas() {
+      return decommissionedReplicas;
+    }
+    int corruptReplicas() {
+      return corruptReplicas;
+    }
+    int excessReplicas() {
+      return excessReplicas;
+    }
+  } 
+
+  /**
-  public boolean isInSafeMode() {
+  boolean isInSafeMode() {
-  public boolean isInStartupSafeMode() {
+  boolean isInStartupSafeMode() {
-  public boolean isPopulatingReplQueues() {
+  boolean isPopulatingReplQueues() {
-  public void incrementSafeBlockCount(int replication) {
+  void incrementSafeBlockCount(int replication) {
-  public void decrementSafeBlockCount(Block b) {
+  void decrementSafeBlockCount(Block b) {
-    return blockManager.getPendingReplicationBlocksCount();
+    return blockManager.pendingReplicationBlocksCount;
-    return blockManager.getUnderReplicatedBlocksCount();
+    return blockManager.underReplicatedBlocksCount;
-    return blockManager.getCorruptReplicaBlocksCount();
+    return blockManager.corruptReplicaBlocksCount;
-    return blockManager.getScheduledReplicationBlocksCount();
+    return blockManager.scheduledReplicationBlocksCount;
-    return blockManager.getPendingDeletionBlocksCount();
+    return blockManager.pendingDeletionBlocksCount;
-    return blockManager.getExcessBlocksCount();
+    return blockManager.excessBlocksCount;
-  public DatanodeDescriptor getDatanode(String nodeID) {
+  DatanodeDescriptor getDatanode(String nodeID) {
-      UnderReplicatedBlocks.BlockIterator blkIterator = blockManager.getCorruptReplicaBlockIterator();
+      BlockIterator blkIterator = blockManager.getCorruptReplicaBlockIterator();
