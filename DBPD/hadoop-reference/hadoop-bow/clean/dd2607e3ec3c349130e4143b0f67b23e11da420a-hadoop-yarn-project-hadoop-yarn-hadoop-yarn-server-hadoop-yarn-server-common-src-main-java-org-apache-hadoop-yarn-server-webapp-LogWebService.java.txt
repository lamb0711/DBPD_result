YARN-10026. Pull out common code pieces from ATS v1.5 and v2. Contributed by Adam Antal

-import org.apache.hadoop.yarn.api.records.ApplicationId;
-import org.apache.hadoop.yarn.api.records.ContainerId;
-import org.apache.hadoop.yarn.webapp.BadRequestException;
-import org.apache.hadoop.yarn.webapp.NotFoundException;
-@Singleton @Path("/ws/v2/applicationlog") public class LogWebService {
+@Singleton
+@Path("/ws/v2/applicationlog")
+public class LogWebService implements AppInfoProvider {
+
+  private final LogServlet logServlet;
+  public LogWebService() {
+    this.logServlet = new LogServlet(yarnConf, this);
+  }
+
-  @GET @Path("/containers/{containerid}/logs")
+  @GET
+  @Path("/containers/{containerid}/logs")
-    ContainerId containerId = null;
-    try {
-      containerId = ContainerId.fromString(containerIdStr);
-    } catch (IllegalArgumentException e) {
-      throw new BadRequestException("invalid container id, " + containerIdStr);
-    }
-
-    ApplicationId appId =
-        containerId.getApplicationAttemptId().getApplicationId();
-    AppInfo appInfo;
-    try {
-      appInfo = getApp(req, appId.toString(), clusterId);
-    } catch (Exception ex) {
-      // directly find logs from HDFS.
-      return LogWebServiceUtils
-          .getContainerLogMeta(factory, appId, null, null, containerIdStr,
-              false);
-    }
-    // if the application finishes, directly find logs
-    // from HDFS.
-    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {
-      return LogWebServiceUtils
-          .getContainerLogMeta(factory, appId, null, null, containerIdStr,
-              false);
-    }
-    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {
-      String appOwner = appInfo.getUser();
-      String nodeHttpAddress = null;
-      if (nmId != null && !nmId.isEmpty()) {
-        try {
-          nodeHttpAddress =
-              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);
-        } catch (Exception ex) {
-          LOG.debug("{}", ex);
-        }
-      }
-      if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
-        ContainerInfo containerInfo;
-        try {
-          containerInfo =
-              getContainer(req, appId.toString(), containerId.toString(),
-                  clusterId);
-        } catch (Exception ex) {
-          // return log meta for the aggregated logs if exists.
-          // It will also return empty log meta for the local logs.
-          return LogWebServiceUtils
-              .getContainerLogMeta(factory, appId, appOwner, null,
-                  containerIdStr, true);
-        }
-        nodeHttpAddress = containerInfo.getNodeHttpAddress();
-        // make sure nodeHttpAddress is not null and not empty. Otherwise,
-        // we would only get log meta for aggregated logs instead of
-        // re-directing the request
-        if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()
-            || redirectedFromNode) {
-          // return log meta for the aggregated logs if exists.
-          // It will also return empty log meta for the local logs.
-          // If this is the redirect request from NM, we should not
-          // re-direct the request back. Simply output the aggregated log meta.
-          return LogWebServiceUtils
-              .getContainerLogMeta(factory, appId, appOwner, null,
-                  containerIdStr, true);
-        }
-      }
-      String uri = "/" + containerId.toString() + "/logs";
-      String resURI = JOINER.join(
-          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),
-          NM_DOWNLOAD_URI_STR, uri);
-      String query = req.getQueryString();
-      if (query != null && !query.isEmpty()) {
-        resURI += "?" + query;
-      }
-      Response.ResponseBuilder response =
-          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);
-      response.header("Location", resURI);
-      return response.build();
-    } else {
-      throw new NotFoundException(
-          "The application is not at Running or Finished State.");
-    }
+    return logServlet.getContainerLogsInfo(req, containerIdStr, nmId,
+        redirectedFromNode, clusterId);
-  protected ContainerInfo getContainer(HttpServletRequest req, String appId,
-      String containerId, String clusterId) {
+  @Override
+  public String getNodeHttpAddress(HttpServletRequest req, String appId,
+      String appAttemptId, String containerId, String clusterId) {
-    String nodeHttpAddress = (String) conEntity.getInfo()
+    return (String) conEntity.getInfo()
-
-    ContainerInfo info = new ContainerInfo(nodeHttpAddress);
-    return info;
-  protected AppInfo getApp(HttpServletRequest req, String appId,
+  @Override
+  public BasicAppInfo getApp(HttpServletRequest req, String appId,
-    AppInfo info = new AppInfo(appState, appOwner);
-    return info;
+    return new BasicAppInfo(appState, appOwner);
-  @GET @Path("/containers/{containerid}/logs/{filename}")
-  @Produces({ MediaType.TEXT_PLAIN }) @InterfaceAudience.Public
-  @InterfaceStability.Unstable public Response getContainerLogFile(
+  @GET
+  @Path("/containers/{containerid}/logs/{filename}")
+  @Produces({ MediaType.TEXT_PLAIN })
+  @InterfaceAudience.Public
+  @InterfaceStability.Unstable
+  public Response getContainerLogFile(
-  @GET @Path("/containerlogs/{containerid}/{filename}")
+  @GET
+  @Path("/containerlogs/{containerid}/{filename}")
-  @InterfaceAudience.Public @InterfaceStability.Unstable
+  @InterfaceAudience.Public
+  @InterfaceStability.Unstable
-    ContainerId containerId;
-    try {
-      containerId = ContainerId.fromString(containerIdStr);
-    } catch (IllegalArgumentException ex) {
-      return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,
-          "Invalid ContainerId: " + containerIdStr);
-    }
-
-    final long length = LogWebServiceUtils.parseLongParam(size);
-
-    ApplicationId appId =
-        containerId.getApplicationAttemptId().getApplicationId();
-    AppInfo appInfo;
-    try {
-      appInfo = getApp(req, appId.toString(), clusterId);
-    } catch (Exception ex) {
-      // directly find logs from HDFS.
-      return LogWebServiceUtils
-          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,
-              filename, format, length, false);
-    }
-    String appOwner = appInfo.getUser();
-    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {
-      // directly find logs from HDFS.
-      return LogWebServiceUtils
-          .sendStreamOutputResponse(factory, appId, appOwner, null,
-              containerIdStr, filename, format, length, false);
-    }
-
-    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {
-      String nodeHttpAddress = null;
-      if (nmId != null && !nmId.isEmpty()) {
-        try {
-          nodeHttpAddress =
-              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);
-        } catch (Exception ex) {
-          LOG.debug("{}", ex);
-        }
-      }
-      if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
-        ContainerInfo containerInfo;
-        try {
-          containerInfo =
-              getContainer(req, appId.toString(), containerId.toString(),
-                  clusterId);
-        } catch (Exception ex) {
-          // output the aggregated logs
-          return LogWebServiceUtils
-              .sendStreamOutputResponse(factory, appId, appOwner, null,
-                  containerIdStr, filename, format, length, true);
-        }
-        nodeHttpAddress = containerInfo.getNodeHttpAddress();
-        // make sure nodeHttpAddress is not null and not empty. Otherwise,
-        // we would only get aggregated logs instead of re-directing the
-        // request.
-        // If this is the redirect request from NM, we should not re-direct the
-        // request back. Simply output the aggregated logs.
-        if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()
-            || redirectedFromNode) {
-          // output the aggregated logs
-          return LogWebServiceUtils
-              .sendStreamOutputResponse(factory, appId, appOwner, null,
-                  containerIdStr, filename, format, length, true);
-        }
-      }
-      String uri = "/" + containerId.toString() + "/logs/" + filename;
-      String resURI = JOINER.join(
-          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),
-          NM_DOWNLOAD_URI_STR, uri);
-      String query = req.getQueryString();
-      if (query != null && !query.isEmpty()) {
-        resURI += "?" + query;
-      }
-      Response.ResponseBuilder response =
-          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);
-      response.header("Location", resURI);
-      return response.build();
-    } else {
-      return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,
-          "The application is not at Running or Finished State.");
-    }
-  }
-
-  protected static class AppInfo {
-    private YarnApplicationState appState;
-    private String user;
-
-    AppInfo(YarnApplicationState appState, String user) {
-      this.appState = appState;
-      this.user = user;
-    }
-
-    public YarnApplicationState getAppState() {
-      return this.appState;
-    }
-
-    public String getUser() {
-      return this.user;
-    }
-  }
-
-  protected static class ContainerInfo {
-    private String nodeHttpAddress;
-
-    ContainerInfo(String nodeHttpAddress) {
-      this.nodeHttpAddress = nodeHttpAddress;
-    }
-
-    public String getNodeHttpAddress() {
-      return nodeHttpAddress;
-    }
+    return logServlet.getLogFile(req, containerIdStr, filename, format, size,
+        nmId, redirectedFromNode, clusterId);
