YARN-8836. Add tags and attributes in resource definition. Contributed by Weiwei Yang.

+import com.google.common.collect.ImmutableSet;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Set;
+  private Set<String> tags = new HashSet<>();
+  private Map<String, String> attributes = new HashMap<>();
+   * Get the attributes of the resource.
+   * @return resource attributes
+   */
+  public Map<String, String> getAttributes() {
+    return attributes;
+  }
+
+  /**
+   * Set a map of attributes to the resource.
+   * @param attributes resource attributes
+   */
+  public void setAttributes(Map<String, String> attributes) {
+    if (attributes != null) {
+      this.attributes = attributes;
+    }
+  }
+
+  /**
+   * Get resource tags.
+   * @return resource tags
+   */
+  public Set<String> getTags() {
+    return this.tags;
+  }
+
+  /**
+   * Add tags to the resource.
+   * @param tags resource tags
+   */
+  public void setTags(Set<String> tags) {
+    if (tags != null) {
+      this.tags = tags;
+    }
+  }
+
+  /**
+    return ResourceInformation.newInstance(name, units, value, type,
+        minimumAllocation, maximumAllocation,
+        ImmutableSet.of(), ImmutableMap.of());
+  }
+
+  public static ResourceInformation newInstance(String name, String units,
+      long value, ResourceTypes type, long minimumAllocation,
+      long maximumAllocation,
+      Set<String> tags, Map<String, String> attributes) {
+    ret.setTags(tags);
+    ret.setAttributes(attributes);
+    dst.setTags(src.getTags());
+    dst.setAttributes(src.getAttributes());
-        + minimumAllocation + ", maximum allocation: " + maximumAllocation;
+        + minimumAllocation + ", maximum allocation: " + maximumAllocation
+        + ", tags: " + tags + ", attributes " + attributes;
-        || !this.resourceType.equals(r.getResourceType())) {
+        || !this.resourceType.equals(r.getResourceType())
+        || !this.tags.equals(r.getTags())
+        || !this.attributes.equals(r.getAttributes())) {
+    if (tags != null && !tags.isEmpty()) {
+      result = prime * result + tags.hashCode();
+    }
+    if (attributes != null && !attributes.isEmpty()) {
+      result = prime * result + attributes.hashCode();
+    }
