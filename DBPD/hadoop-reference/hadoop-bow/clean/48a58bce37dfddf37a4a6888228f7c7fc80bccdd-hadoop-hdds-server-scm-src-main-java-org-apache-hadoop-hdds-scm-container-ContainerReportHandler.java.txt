HDDS-1207. Refactor Container Report Processing logic and plugin new Replication Manager. (#662)



-package org.apache.hadoop.hdds.scm.container;
-import java.io.IOException;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.stream.Collectors;
+package org.apache.hadoop.hdds.scm.container;
-import org.apache.hadoop.hdds.scm.container.replication
-    .ReplicationActivityStatus;
-import org.apache.hadoop.hdds.scm.container.replication.ReplicationRequest;
-import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;
-import org.apache.hadoop.hdds.scm.server
-    .SCMDatanodeHeartbeatDispatcher.ContainerReportFromDatanode;
+import org.apache.hadoop.hdds.scm.server.SCMDatanodeHeartbeatDispatcher
+    .ContainerReportFromDatanode;
-
-import com.google.common.base.Preconditions;
+import java.io.IOException;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
-public class ContainerReportHandler implements
-    EventHandler<ContainerReportFromDatanode> {
+public class ContainerReportHandler extends AbstractContainerReportHandler
+    implements EventHandler<ContainerReportFromDatanode> {
-  private final PipelineManager pipelineManager;
-  private final ReplicationActivityStatus replicationStatus;
+  /**
+   * Constructs ContainerReportHandler instance with the
+   * given NodeManager and ContainerManager instance.
+   *
+   * @param nodeManager NodeManager instance
+   * @param containerManager ContainerManager instance
+   */
-      final PipelineManager pipelineManager,
-      final ContainerManager containerManager,
-      final ReplicationActivityStatus replicationActivityStatus) {
-    Preconditions.checkNotNull(nodeManager);
-    Preconditions.checkNotNull(pipelineManager);
-    Preconditions.checkNotNull(containerManager);
-    Preconditions.checkNotNull(replicationActivityStatus);
+                                final ContainerManager containerManager) {
+    super(containerManager, LOG);
-    this.pipelineManager = pipelineManager;
-    this.replicationStatus = replicationActivityStatus;
+  /**
+   * Process the container reports from datanodes.
+   *
+   * @param reportFromDatanode Container Report
+   * @param publisher EventPublisher reference
+   */
-      final EventPublisher publisher) {
+                        final EventPublisher publisher) {
-
+      final List<ContainerReplicaProto> replicas =
+          containerReport.getReportsList();
+      final Set<ContainerID> containersInSCM =
+          nodeManager.getContainers(datanodeDetails);
-      final List<ContainerReplicaProto> replicas = containerReport
-          .getReportsList();
-
-      // ContainerIDs which SCM expects this datanode to have.
-      final Set<ContainerID> expectedContainerIDs = nodeManager
-          .getContainers(datanodeDetails);
-
-      // ContainerIDs that this datanode actually has.
-      final Set<ContainerID> actualContainerIDs = replicas.parallelStream()
+      final Set<ContainerID> containersInDn = replicas.parallelStream()
-      // Container replicas which SCM is not aware of.
-      final  Set<ContainerID> newReplicas =
-          new HashSet<>(actualContainerIDs);
-      newReplicas.removeAll(expectedContainerIDs);
+      final Set<ContainerID> missingReplicas = new HashSet<>(containersInSCM);
+      missingReplicas.removeAll(containersInDn);
-      // Container replicas which are missing from datanode.
-      final Set<ContainerID> missingReplicas =
-          new HashSet<>(expectedContainerIDs);
-      missingReplicas.removeAll(actualContainerIDs);
+      processContainerReplicas(datanodeDetails, replicas);
+      processMissingReplicas(datanodeDetails, missingReplicas);
+      updateDeleteTransaction(datanodeDetails, replicas, publisher);
-      processContainerReplicas(datanodeDetails, replicas, publisher);
-
-      // Remove missing replica from ContainerManager
-      for (ContainerID id : missingReplicas) {
-        try {
-          containerManager.getContainerReplicas(id)
-              .stream()
-              .filter(replica ->
-                  replica.getDatanodeDetails().equals(datanodeDetails))
-              .findFirst()
-              .ifPresent(replica -> {
-                try {
-                  containerManager.removeContainerReplica(id, replica);
-                } catch (ContainerNotFoundException |
-                    ContainerReplicaNotFoundException e) {
-                  // This should not happen, but even if it happens, not an
-                  // issue
-                }
-              });
-        } catch (ContainerNotFoundException e) {
-          LOG.warn("Cannot remove container replica, container {} not found {}",
-              id, e);
-        }
-      }
-
-      // Update the latest set of containers for this datanode in NodeManager.
-      nodeManager.setContainers(datanodeDetails, actualContainerIDs);
-
-      // Replicate if needed.
-      newReplicas.forEach(id -> checkReplicationState(id, publisher));
-      missingReplicas.forEach(id -> checkReplicationState(id, publisher));
+      /*
+       * Update the latest set of containers for this datanode in
+       * NodeManager
+       */
+      nodeManager.setContainers(datanodeDetails, containersInDn);
+  /**
+   * Processes the ContainerReport.
+   *
+   * @param datanodeDetails Datanode from which this report was received
+   * @param replicas list of ContainerReplicaProto
+   */
+      final List<ContainerReplicaProto> replicas) {
+    for (ContainerReplicaProto replicaProto : replicas) {
+      try {
+        processContainerReplica(datanodeDetails, replicaProto);
+      } catch (ContainerNotFoundException e) {
+        LOG.error("Received container report for an unknown container" +
+                " {} from datanode {}.", replicaProto.getContainerID(),
+            datanodeDetails, e);
+      } catch (IOException e) {
+        LOG.error("Exception while processing container report for container" +
+                " {} from datanode {}.", replicaProto.getContainerID(),
+            datanodeDetails, e);
+      }
+    }
+  }
+
+  /**
+   * Process the missing replica on the given datanode.
+   *
+   * @param datanodeDetails DatanodeDetails
+   * @param missingReplicas ContainerID which are missing on the given datanode
+   */
+  private void processMissingReplicas(final DatanodeDetails datanodeDetails,
+                                      final Set<ContainerID> missingReplicas) {
+    for (ContainerID id : missingReplicas) {
+      try {
+        containerManager.getContainerReplicas(id).stream()
+            .filter(replica -> replica.getDatanodeDetails()
+                .equals(datanodeDetails)).findFirst()
+            .ifPresent(replica -> {
+              try {
+                containerManager.removeContainerReplica(id, replica);
+              } catch (ContainerNotFoundException |
+                  ContainerReplicaNotFoundException ignored) {
+                // This should not happen, but even if it happens, not an issue
+              }
+            });
+      } catch (ContainerNotFoundException e) {
+        LOG.warn("Cannot remove container replica, container {} not found.",
+            id, e);
+      }
+    }
+  }
+
+  /**
+   * Updates the Delete Transaction Id for the given datanode.
+   *
+   * @param datanodeDetails DatanodeDetails
+   * @param replicas List of ContainerReplicaProto
+   * @param publisher EventPublisher reference
+   */
+  private void updateDeleteTransaction(final DatanodeDetails datanodeDetails,
-    for (ContainerReplicaProto replicaProto : replicas) {
+    for (ContainerReplicaProto replica : replicas) {
-        final ContainerID containerID = ContainerID.valueof(
-            replicaProto.getContainerID());
-
-        ReportHandlerHelper.processContainerReplica(containerManager,
-            containerID, replicaProto, datanodeDetails, publisher, LOG);
-
-        final ContainerInfo containerInfo = containerManager
-            .getContainer(containerID);
-
+        final ContainerInfo containerInfo = containerManager.getContainer(
+            ContainerID.valueof(replica.getContainerID()));
-            replicaProto.getDeleteTransactionId()) {
-          pendingDeleteStatusList
-              .addPendingDeleteStatus(replicaProto.getDeleteTransactionId(),
-                  containerInfo.getDeleteTransactionId(),
-                  containerInfo.getContainerID());
+            replica.getDeleteTransactionId()) {
+          pendingDeleteStatusList.addPendingDeleteStatus(
+              replica.getDeleteTransactionId(),
+              containerInfo.getDeleteTransactionId(),
+              containerInfo.getContainerID());
-      } catch (ContainerNotFoundException e) {
-        LOG.error("Received container report for an unknown container {} from"
-                + " datanode {} {}", replicaProto.getContainerID(),
-            datanodeDetails, e);
-      } catch (IOException e) {
-        LOG.error("Exception while processing container report for container"
-                + " {} from datanode {} {}", replicaProto.getContainerID(),
-            datanodeDetails, e);
+      } catch (ContainerNotFoundException cnfe) {
+        LOG.warn("Cannot update pending delete transaction for " +
+            "container #{}. Reason: container missing.",
+            replica.getContainerID());
-
-  private void checkReplicationState(ContainerID containerID,
-      EventPublisher publisher) {
-    try {
-      ContainerInfo container = containerManager.getContainer(containerID);
-      replicateIfNeeded(container, publisher);
-    } catch (ContainerNotFoundException ex) {
-      LOG.warn("Container is missing from containerStateManager. Can't request "
-          + "replication. {} {}", containerID, ex);
-    }
-
-  }
-
-  private void replicateIfNeeded(ContainerInfo container,
-      EventPublisher publisher) throws ContainerNotFoundException {
-    if (!container.isOpen() && replicationStatus.isReplicationEnabled()) {
-      final int existingReplicas = containerManager
-          .getContainerReplicas(container.containerID()).size();
-      final int expectedReplicas = container.getReplicationFactor().getNumber();
-      if (existingReplicas != expectedReplicas) {
-        publisher.fireEvent(SCMEvents.REPLICATE_CONTAINER,
-            new ReplicationRequest(container.getContainerID(),
-                existingReplicas, expectedReplicas));
-      }
-    }
-  }
