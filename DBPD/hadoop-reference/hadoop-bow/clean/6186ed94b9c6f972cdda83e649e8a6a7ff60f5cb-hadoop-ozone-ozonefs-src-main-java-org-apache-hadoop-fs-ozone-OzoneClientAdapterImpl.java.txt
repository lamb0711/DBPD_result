HDDS-1300. Optimize non-recursive ozone filesystem apis. Contributed by Lokesh Jain.

-import static org.apache.hadoop.ozone.OzoneConsts.OZONE_URI_DELIMITER;
-import java.util.HashMap;
+import org.apache.hadoop.fs.FileAlreadyExistsException;
-  public InputStream createInputStream(String key) throws IOException {
+  public InputStream readFile(String key) throws IOException {
-    return bucket.readKey(key).getInputStream();
+    try {
+      return bucket.readFile(key).getInputStream();
+    } catch (OMException ex) {
+      if (ex.getResult() == OMException.ResultCodes.FILE_NOT_FOUND
+          || ex.getResult() == OMException.ResultCodes.NOT_A_FILE) {
+        throw new FileNotFoundException(
+            ex.getResult().name() + ": " + ex.getMessage());
+      } else {
+        throw ex;
+      }
+    }
-  public OzoneFSOutputStream createKey(String key) throws IOException {
+  public OzoneFSOutputStream createFile(String key, boolean overWrite,
+      boolean recursive) throws IOException {
-    OzoneOutputStream ozoneOutputStream =
-        bucket.createKey(key, 0, replicationType, replicationFactor,
-            new HashMap<>());
-    return new OzoneFSOutputStream(ozoneOutputStream.getOutputStream());
+    try {
+      OzoneOutputStream ozoneOutputStream = bucket
+          .createFile(key, 0, replicationType, replicationFactor, overWrite,
+              recursive);
+      return new OzoneFSOutputStream(ozoneOutputStream.getOutputStream());
+    } catch (OMException ex) {
+      if (ex.getResult() == OMException.ResultCodes.FILE_ALREADY_EXISTS
+          || ex.getResult() == OMException.ResultCodes.NOT_A_FILE) {
+        throw new FileAlreadyExistsException(
+            ex.getResult().name() + ": " + ex.getMessage());
+      } else {
+        throw ex;
+      }
+    }
-   * Helper method to check if an Ozone key is representing a directory.
-   *
-   * @param key key to be checked as a directory
-   * @return true if key is a directory, false otherwise
-   */
-  @Override
-  public boolean isDirectory(BasicKeyInfo key) {
-    LOG.trace("key name:{} size:{}", key.getName(),
-        key.getDataSize());
-    return key.getName().endsWith(OZONE_URI_DELIMITER)
-        && (key.getDataSize() == 0);
-  }
-
-  /**
-  public boolean createDirectory(String keyName) {
-    try {
-      LOG.trace("creating dir for key:{}", keyName);
-      if (storageStatistics != null) {
-        storageStatistics.incrementCounter(Statistic.OBJECTS_CREATED, 1);
-      }
-      bucket.createKey(keyName, 0, replicationType, replicationFactor,
-          new HashMap<>()).close();
-      return true;
-    } catch (IOException ioe) {
-      LOG.error("create key failed for key:{}", keyName, ioe);
-      return false;
+  public boolean createDirectory(String keyName) throws IOException {
+    LOG.trace("creating dir for key:{}", keyName);
+    if (storageStatistics != null) {
+      storageStatistics.incrementCounter(Statistic.OBJECTS_CREATED, 1);
+    try {
+      bucket.createDirectory(keyName);
+    } catch (OMException e) {
+      if (e.getResult() == OMException.ResultCodes.FILE_ALREADY_EXISTS) {
+        throw new FileAlreadyExistsException(e.getMessage());
+      }
+      throw e;
+    }
+    return true;
