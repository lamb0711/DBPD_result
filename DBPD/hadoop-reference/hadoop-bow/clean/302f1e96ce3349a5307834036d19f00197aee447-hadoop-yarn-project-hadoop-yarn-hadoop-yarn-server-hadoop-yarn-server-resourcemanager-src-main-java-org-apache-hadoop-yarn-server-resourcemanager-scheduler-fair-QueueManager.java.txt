Merge trunk into branch.

Branch will not build after this commit: need to implement new JournalManager
interfaces in QuorumJournalManager in a follow-up.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1371518 13f79535-47bb-0310-9956-ffa450edef68

-
+  
+  // Monitor object for minQueueResources
+  private Object minQueueResourcesMO = new Object();
+  
+  //Monitor object for maxQueueResources
+  private Object maxQueueResourcesMO = new Object();
+  
+  //Monitor object for queueMaxApps
+  private Object queueMaxAppsMO = new Object();
+  
+  //Monitor object for userMaxApps
+  private Object userMaxAppsMO = new Object();
+  
+  //Monitor object for queueWeights
+  private Object queueWeightsMO = new Object();
+  
+  //Monitor object for minSharePreemptionTimeouts
+  private Object minSharePreemptionTimeoutsMO = new Object();
+  
+  //Monitor object for queueAcls
+  private Object queueAclsMO = new Object();
+  
+  //Monitor object for userMaxAppsDefault
+  private Object userMaxAppsDefaultMO = new Object();
+  
+  //Monitor object for queueMaxAppsDefault
+  private Object queueMaxAppsDefaultMO = new Object();
+  
+  //Monitor object for defaultSchedulingMode
+  private Object defaultSchedulingModeMO = new Object();
+  
-  public synchronized FSQueue getQueue(String name) {
-    FSQueue queue = queues.get(name);
-    if (queue == null) {
-      queue = new FSQueue(scheduler, name);
-      queue.setSchedulingMode(defaultSchedulingMode);
-      queues.put(name, queue);
+  public FSQueue getQueue(String name) {
+    synchronized (queues) {
+      FSQueue queue = queues.get(name);
+      if (queue == null) {
+        queue = new FSQueue(scheduler, name);
+        synchronized (defaultSchedulingModeMO){
+          queue.setSchedulingMode(defaultSchedulingMode);
+        }
+        queues.put(name, queue);
+      }
+      return queue;
-    return queue;
-  public synchronized boolean exists(String name) {
-    return queues.containsKey(name);
+  public boolean exists(String name) {
+    synchronized (queues) {
+      return queues.containsKey(name);
+    }
-      this.minQueueResources = minQueueResources;
-      this.maxQueueResources = maxQueueResources;
-      this.queueMaxApps = queueMaxApps;
-      this.userMaxApps = userMaxApps;
-      this.queueWeights = queueWeights;
-      this.userMaxAppsDefault = userMaxAppsDefault;
-      this.queueMaxAppsDefault = queueMaxAppsDefault;
-      this.defaultSchedulingMode = defaultSchedulingMode;
-      this.minSharePreemptionTimeouts = minSharePreemptionTimeouts;
-      this.queueAcls = queueAcls;
+      setMinResources(minQueueResources);
+      setMaxResources(maxQueueResources);
+      setQueueMaxApps(queueMaxApps);
+      setUserMaxApps(userMaxApps);
+      setQueueWeights(queueWeights);
+      setUserMaxAppsDefault(userMaxAppsDefault);
+      setQueueMaxAppsDefault(queueMaxAppsDefault);
+      setDefaultSchedulingMode(defaultSchedulingMode);
+      setMinSharePreemptionTimeouts(minSharePreemptionTimeouts);
+      setQueueAcls(queueAcls);
-    if (minQueueResources.containsKey(queue)) {
-      return minQueueResources.get(queue);
-    } else{
-      return Resources.createResource(0);
+    synchronized(minQueueResourcesMO) {
+      if (minQueueResources.containsKey(queue)) {
+        return minQueueResources.get(queue);
+      } else{
+        return Resources.createResource(0);
+      }
+  private void setMinResources(Map<String, Resource> resources) {
+    synchronized(minQueueResourcesMO) {
+      minQueueResources = resources;
+    }
+  }
-    if (maxQueueResources.containsKey(queueName)) {
-      return maxQueueResources.get(queueName);
-    } else {
-      return Resources.createResource(Integer.MAX_VALUE);
+    synchronized (maxQueueResourcesMO) {
+      if (maxQueueResources.containsKey(queueName)) {
+        return maxQueueResources.get(queueName);
+      } else {
+        return Resources.createResource(Integer.MAX_VALUE);
+      }
+  private void setMaxResources(Map<String, Resource> resources) {
+    synchronized(maxQueueResourcesMO) {
+      maxQueueResources = resources;
+    }
+  }
+  
-  public synchronized Collection<FSQueue> getQueues() {
-    return queues.values();
+  public Collection<FSQueue> getQueues() {
+    synchronized (queues) {
+      return queues.values();
+    }
-
-    if (userMaxApps.containsKey(user)) {
-      return userMaxApps.get(user);
-    } else {
-      return userMaxAppsDefault;
+    synchronized (userMaxAppsMO) {
+      if (userMaxApps.containsKey(user)) {
+        return userMaxApps.get(user);
+      } else {
+        return getUserMaxAppsDefault();
+      }
+  private void setUserMaxApps(Map<String, Integer> userApps) {
+    synchronized (userMaxAppsMO) {
+      userMaxApps = userApps;
+    }
+  }
+  
+  private int getUserMaxAppsDefault() {
+    synchronized (userMaxAppsDefaultMO){
+      return userMaxAppsDefault;
+    }
+  }
+  
+  private void setUserMaxAppsDefault(int userMaxApps) {
+    synchronized (userMaxAppsDefaultMO){
+      userMaxAppsDefault = userMaxApps;
+    }
+  }
+  
-    if (queueMaxApps.containsKey(queue)) {
-      return queueMaxApps.get(queue);
-    } else {
+    synchronized (queueMaxAppsMO) {
+      if (queueMaxApps.containsKey(queue)) {
+        return queueMaxApps.get(queue);
+      } else {
+        return getQueueMaxAppsDefault();
+      }
+    }
+  }
+  
+  private void setQueueMaxApps(Map<String, Integer> queueApps) {
+    synchronized (queueMaxAppsMO) {
+      queueMaxApps = queueApps;
+    }
+  }
+  
+  private int getQueueMaxAppsDefault(){
+    synchronized(queueMaxAppsDefaultMO) {
+  
+  private void setQueueMaxAppsDefault(int queueMaxApps){
+    synchronized(queueMaxAppsDefaultMO) {
+      queueMaxAppsDefault = queueMaxApps;
+    }
+  }
+  
+  private void setDefaultSchedulingMode(SchedulingMode schedulingMode){
+    synchronized(defaultSchedulingModeMO) {
+      defaultSchedulingMode = schedulingMode;
+    }
+  }
-    if (queueWeights.containsKey(queue)) {
-      return queueWeights.get(queue);
-    } else {
-      return 1.0;
+    synchronized (queueWeightsMO) {
+      if (queueWeights.containsKey(queue)) {
+        return queueWeights.get(queue);
+      } else {
+        return 1.0;
+      }
+  private void setQueueWeights(Map<String, Double> weights) {
+    synchronized (queueWeightsMO) {
+      queueWeights = weights;
+    }
+  }
-    if (minSharePreemptionTimeouts.containsKey(queueName)) {
-      return minSharePreemptionTimeouts.get(queueName);
+    synchronized (minSharePreemptionTimeoutsMO) {
+      if (minSharePreemptionTimeouts.containsKey(queueName)) {
+        return minSharePreemptionTimeouts.get(queueName);
+      }
+  
+  private void setMinSharePreemptionTimeouts(
+      Map<String, Long> sharePreemptionTimeouts){
+    synchronized (minSharePreemptionTimeoutsMO) {
+      minSharePreemptionTimeouts = sharePreemptionTimeouts;
+    }
+  }
-
-    if (queueAcls.containsKey(queue)) {
-      out.putAll(queueAcls.get(queue));
+    synchronized (queueAclsMO) {
+      if (queueAcls.containsKey(queue)) {
+        out.putAll(queueAcls.get(queue));
+      }
+  
+  private void setQueueAcls(Map<String, Map<QueueACL, AccessControlList>> queue) {
+    synchronized (queueAclsMO) {
+      queueAcls = queue;
+    }
+  }
