HDDS-1. Remove SCM Block DB. Contributed by Xiaoyu Yao.

-import org.apache.hadoop.hdds.scm.container.common.helpers.Pipeline;
-  private final ConcurrentSkipListMap<String, ContainerStatus>
+  // TODO: consider primitive collection like eclipse-collections
+  // to avoid autoboxing overhead
+  private final ConcurrentSkipListMap<Long, ContainerStatus>
+    long containerID = Long.parseLong(keyName);
-        containerMap.put(keyName, new ContainerStatus(null));
+        containerMap.put(containerID, new ContainerStatus(null));
-        containerMap.put(keyName, new ContainerStatus(null));
+        containerMap.put(containerID, new ContainerStatus(null));
-      containerMap.put(keyName, containerStatus);
+      containerMap.put(containerID, containerStatus);
-      containerMap.put(keyName, new ContainerStatus(null));
+      containerMap.put(containerID, new ContainerStatus(null));
-   * @param pipeline -- Nodes which make up this container.
-  public void createContainer(Pipeline pipeline, ContainerData containerData)
+  public void createContainer(ContainerData containerData)
-      if (containerMap.containsKey(containerData.getName())) {
-        LOG.debug("container already exists. {}", containerData.getName());
+      if (containerMap.containsKey(containerData.getContainerID())) {
+        LOG.debug("container already exists. {}", containerData.getContainerID());
-      String containerName = containerData.getContainerName();
+      String containerName = Long.toString(containerData.getContainerID());
-          containerData.getContainerName(), ex);
+          containerData.getContainerID(), ex);
-   * @param pipeline - nodes that make this container.
-   * @param containerName - name of the container.
+   * @param containerID - ID of the container.
-  public void deleteContainer(Pipeline pipeline, String containerName,
+  public void deleteContainer(long containerID,
-    Preconditions.checkNotNull(containerName, "Container name cannot be null");
-    Preconditions.checkState(containerName.length() > 0,
-        "Container name length cannot be zero.");
+    Preconditions.checkState(containerID >= 0,
+        "Container ID cannot be negative.");
-      if (isOpen(pipeline.getContainerName())) {
+      if (isOpen(containerID)) {
-      ContainerStatus status = containerMap.get(containerName);
+      ContainerStatus status = containerMap.get(containerID);
-        LOG.debug("No such container. Name: {}", containerName);
-        throw new StorageContainerException("No such container. Name : " +
-            containerName, CONTAINER_NOT_FOUND);
+        LOG.debug("No such container. ID: {}", containerID);
+        throw new StorageContainerException("No such container. ID : " +
+            containerID, CONTAINER_NOT_FOUND);
-        LOG.debug("Invalid container data. Name: {}", containerName);
+        LOG.debug("Invalid container data. ID: {}", containerID);
-            containerName, CONTAINER_NOT_FOUND);
+            containerID, CONTAINER_NOT_FOUND);
-      containerMap.remove(containerName);
+      containerMap.remove(containerID);
-      LOG.error("Failed to cleanup container. Name: {}", containerName, e);
-      throw new StorageContainerException(containerName, e, IO_EXCEPTION);
+      String errMsg = String.format("Failed to cleanup container. ID: %d",
+          containerID);
+      LOG.error(errMsg, e);
+      throw new StorageContainerException(errMsg, e, IO_EXCEPTION);
-   * @param prefix -  Return keys that match this prefix.
+   * @param startContainerID -  Return containers with ID >= startContainerID.
-   * @param prevKey - Previous Key Value or empty String.
-  public void listContainer(String prefix, long count, String prevKey,
+  public void listContainer(long startContainerID, long count,
-    // TODO : Support list with Prefix and PrevKey
+    Preconditions.checkState(startContainerID >= 0,
+        "Start container ID cannot be negative");
+    Preconditions.checkState(count > 0,
+        "max number of containers returned " +
+            "must be positive");
+
-      ConcurrentNavigableMap<String, ContainerStatus> map;
-      if (prevKey == null || prevKey.isEmpty()) {
+      ConcurrentNavigableMap<Long, ContainerStatus> map;
+      if (startContainerID == 0) {
-        map = containerMap.tailMap(prevKey, false);
+        map = containerMap.tailMap(startContainerID, false);
-   * @param containerName - Name of the container
+   * @param containerID - ID of the container
-  public ContainerData readContainer(String containerName) throws
-      StorageContainerException {
-    Preconditions.checkNotNull(containerName, "Container name cannot be null");
-    Preconditions.checkState(containerName.length() > 0,
-        "Container name length cannot be zero.");
-    if (!containerMap.containsKey(containerName)) {
-      throw new StorageContainerException("Unable to find the container. Name: "
-          + containerName, CONTAINER_NOT_FOUND);
+  public ContainerData readContainer(long containerID)
+      throws StorageContainerException {
+    Preconditions.checkState(containerID >= 0,
+        "Container ID cannot be negative.");
+    if (!containerMap.containsKey(containerID)) {
+      throw new StorageContainerException("Unable to find the container. ID: "
+          + containerID, CONTAINER_NOT_FOUND);
-    ContainerData cData = containerMap.get(containerName).getContainer();
+    ContainerData cData = containerMap.get(containerID).getContainer();
-      throw new StorageContainerException("Invalid container data. Name: "
-          + containerName, CONTAINER_INTERNAL_ERROR);
+      throw new StorageContainerException("Invalid container data. ID: "
+          + containerID, CONTAINER_INTERNAL_ERROR);
-   * @param containerName - Name of the container.
+   * @param containerID - ID of the container.
-  public void closeContainer(String containerName)
+  public void closeContainer(long containerID)
-    ContainerData containerData = readContainer(containerName);
+    ContainerData containerData = readContainer(containerID);
-    containerMap.put(containerName, status);
+    containerMap.put(containerID, status);
-  public void updateContainer(Pipeline pipeline, String containerName,
-      ContainerData data, boolean forceUpdate)
-      throws StorageContainerException {
-    Preconditions.checkNotNull(pipeline, "Pipeline cannot be null");
-    Preconditions.checkNotNull(containerName, "Container name cannot be null");
+  public void updateContainer(long containerID, ContainerData data,
+      boolean forceUpdate) throws StorageContainerException {
+    Preconditions.checkState(containerID >= 0, "Container ID cannot be negative.");
-    if(!containerMap.containsKey(containerName)) {
+    if(!containerMap.containsKey(containerID)) {
-          + containerName, CONTAINER_NOT_FOUND);
+          + containerID, CONTAINER_NOT_FOUND);
-      ContainerData orgData = containerMap.get(containerName).getContainer();
+      ContainerData orgData = containerMap.get(containerID).getContainer();
-            "Update a closed container is not allowed. Name: " + containerName,
+            "Update a closed container is not allowed. ID: " + containerID,
-              "Container file not exists or corrupted. Name: " + containerName,
+              "Container file not exists or corrupted. ID: " + containerID,
-      containerMap.replace(containerName, newStatus);
+      containerMap.replace(containerID, newStatus);
-              "Failed to restore container data from the backup. Name: "
-                  + containerName, CONTAINER_INTERNAL_ERROR);
+              "Failed to restore container data from the backup. ID: "
+                  + containerID, CONTAINER_INTERNAL_ERROR);
-   * @param containerName - Name of the container.
+   * @param containerID - ID of the container.
-  public boolean isOpen(String containerName) throws StorageContainerException {
-    final ContainerStatus status = containerMap.get(containerName);
+  public boolean isOpen(long containerID) throws StorageContainerException {
+    final ContainerStatus status = containerMap.get(containerID);
-          "Container status not found: " + containerName, CONTAINER_NOT_FOUND);
+          "Container status not found: " + containerID, CONTAINER_NOT_FOUND);
-          "Container not found: " + containerName, CONTAINER_NOT_FOUND);
+          "Container not found: " + containerID, CONTAINER_NOT_FOUND);
-  public ConcurrentSkipListMap<String, ContainerStatus> getContainerMap() {
+  public ConcurrentSkipListMap<Long, ContainerStatus> getContainerMap() {
-      ciBuilder.setContainerName(container.getContainer().getContainerName())
+      ciBuilder.setContainerID(container.getContainer().getContainerID())
-  public void incrPendingDeletionBlocks(int numBlocks, String containerId) {
+  public void incrPendingDeletionBlocks(int numBlocks, long containerId) {
-  public void decrPendingDeletionBlocks(int numBlocks, String containerId) {
+  public void decrPendingDeletionBlocks(int numBlocks, long containerId) {
-   * @param containerName - Name of the container.
+   * @param containerId - ID of the container.
-  public void incrReadCount(String containerName) {
-    ContainerStatus status = containerMap.get(containerName);
+  public void incrReadCount(long containerId) {
+    ContainerStatus status = containerMap.get(containerId);
-  public long getReadCount(String containerName) {
-    ContainerStatus status = containerMap.get(containerName);
+  public long getReadCount(long containerId) {
+    ContainerStatus status = containerMap.get(containerId);
-   * @param containerName - Name of the container.
+   * @param containerId - ID of the container.
-  public void incrReadBytes(String containerName, long readBytes) {
-    ContainerStatus status = containerMap.get(containerName);
+  public void incrReadBytes(long containerId, long readBytes) {
+    ContainerStatus status = containerMap.get(containerId);
-  public long getReadBytes(String containerName) {
+  public long getReadBytes(long containerId) {
-      ContainerStatus status = containerMap.get(containerName);
+      ContainerStatus status = containerMap.get(containerId);
-   * @param containerName - Name of the container.
+   * @param containerId - Name of the container.
-  public void incrWriteCount(String containerName) {
-    ContainerStatus status = containerMap.get(containerName);
+  public void incrWriteCount(long containerId) {
+    ContainerStatus status = containerMap.get(containerId);
-  public long getWriteCount(String containerName) {
-    ContainerStatus status = containerMap.get(containerName);
+  public long getWriteCount(long containerId) {
+    ContainerStatus status = containerMap.get(containerId);
-   * @param containerName - Name of the container.
+   * @param containerId   - ID of the container.
-  public void incrWriteBytes(String containerName, long writeBytes) {
-    ContainerStatus status = containerMap.get(containerName);
+  public void incrWriteBytes(long containerId, long writeBytes) {
+    ContainerStatus status = containerMap.get(containerId);
-  public long getWriteBytes(String containerName) {
-    ContainerStatus status = containerMap.get(containerName);
+  public long getWriteBytes(long containerId) {
+    ContainerStatus status = containerMap.get(containerId);
-   * @param containerName - Name of the container.
+   * @param containerId   - ID of the container.
-  public long incrBytesUsed(String containerName, long used) {
-    ContainerStatus status = containerMap.get(containerName);
+  public long incrBytesUsed(long containerId, long used) {
+    ContainerStatus status = containerMap.get(containerId);
-   * @param containerName - Name of the container.
+   * @param containerId   - ID of the container.
-  public long decrBytesUsed(String containerName, long used) {
-    ContainerStatus status = containerMap.get(containerName);
+  public long decrBytesUsed(long containerId, long used) {
+    ContainerStatus status = containerMap.get(containerId);
-  public long getBytesUsed(String containerName) {
-    ContainerStatus status = containerMap.get(containerName);
+  public long getBytesUsed(long containerId) {
+    ContainerStatus status = containerMap.get(containerId);
-   * @param containerName - Name of the container.
+   * @param containerId - ID of the container.
-  public long getNumKeys(String containerName) {
-    ContainerStatus status = containerMap.get(containerName);
+  public long getNumKeys(long containerId) {
+    ContainerStatus status = containerMap.get(containerId);
