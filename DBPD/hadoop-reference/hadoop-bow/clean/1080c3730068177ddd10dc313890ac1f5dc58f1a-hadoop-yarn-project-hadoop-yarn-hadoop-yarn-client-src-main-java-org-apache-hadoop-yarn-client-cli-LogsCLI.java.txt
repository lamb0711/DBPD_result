Merge remote-tracking branch 'apache/trunk' into HDFS-7285

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Namesystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/DFSTestUtil.java

Change-Id: I8511c4d64b0959e79129febc179845a3892fedcc

+import java.io.StringReader;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import org.w3c.dom.Document;
+import org.w3c.dom.NodeList;
+import org.xml.sax.InputSource;
-      + "to get specified Container log files");
+        + "to get specified container log files. Use \"ALL\" to fetch all the "
+        + "log files for the container.");
-            .println("Can not get AMContainers logs for the application:"
-                + appId);
+            .println(
+                "Can not get AMContainers logs for the application:" + appId);
+        // if user specified "ALL" as the logFiles param, pass null
+        // to logCliHelper so that it fetches all the logs
+        List<String> logs;
+        if (logFiles == null) {
+          logs = null;
+        } else if (fetchAllLogFiles(logFiles)) {
+          logs = null;
+        } else {
+          logs = Arrays.asList(logFiles);
+        }
-            containerIdStr, nodeAddress, appOwner, logFiles == null ? null
-                : Arrays.asList(logFiles));
+            containerIdStr, nodeAddress, appOwner, logs);
+          String [] requestedLogFiles = logFiles;
+          if(fetchAllLogFiles(logFiles)) {
+            requestedLogFiles = null;
+          }
-            nodeId, logFiles, logCliHelper, appOwner);
+            nodeId, requestedLogFiles, logCliHelper, appOwner);
+  private boolean fetchAllLogFiles(String[] logFiles) {
+    if(logFiles != null) {
+      List<String> logs = Arrays.asList(logFiles);
+      if(logs.contains("ALL")) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private String[] getContainerLogFiles(Configuration conf,
+      String containerIdStr, String nodeHttpAddress) throws IOException {
+    List<String> logFiles = new ArrayList<>();
+    Client webServiceClient = Client.create();
+    try {
+      WebResource webResource = webServiceClient
+          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);
+      ClientResponse response =
+          webResource.path("ws").path("v1").path("node").path("containers")
+              .path(containerIdStr).accept(MediaType.APPLICATION_XML)
+              .get(ClientResponse.class);
+      if (response.getClientResponseStatus().equals(ClientResponse.Status.OK)) {
+        try {
+          String xml = response.getEntity(String.class);
+          DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+          DocumentBuilder db = dbf.newDocumentBuilder();
+          InputSource is = new InputSource();
+          is.setCharacterStream(new StringReader(xml));
+          Document dom = db.parse(is);
+          NodeList elements = dom.getElementsByTagName("containerLogFiles");
+          for (int i = 0; i < elements.getLength(); i++) {
+            logFiles.add(elements.item(i).getTextContent());
+          }
+        } catch (Exception e) {
+          System.out.println("Unable to parse xml from webservice. Error:");
+          System.out.println(e.getMessage());
+          throw new IOException(e);
+        }
+      }
+
+    } catch (ClientHandlerException | UniformInterfaceException ex) {
+      System.out.println("Unable to fetch log files list");
+      throw new IOException(ex);
+    }
+    return logFiles.toArray(new String[0]);
+  }
+
+    String [] requestedLogFiles = logFiles;
+    // fetch all the log files for the container
+    if (fetchAllLogFiles(logFiles)) {
+      requestedLogFiles =
+          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);
+    }
-    for (String logFile : logFiles) {
+
+    for (String logFile : requestedLogFiles) {
-      appOwner, Arrays.asList(logFiles));
+      appOwner, Arrays.asList(requestedLogFiles));
+          String [] requestedLogFilesList = null;
+          if(!fetchAllLogFiles(logFiles)) {
+            requestedLogFilesList = logFiles;
+          }
-            logFiles, logCliHelper, appOwner);
+            requestedLogFilesList, logCliHelper, appOwner);
+        String [] requestedLogFiles = logFiles;
+        // fetch all the log files for the AM
+        if (fetchAllLogFiles(logFiles)) {
+          requestedLogFiles =
+              getContainerLogFiles(getConf(), containerId, nodeHttpAddress);
+        }
-          nodeHttpAddress, nodeId, logFiles, logCliHelper, appOwner);
+          nodeHttpAddress, nodeId, requestedLogFiles, logCliHelper, appOwner);
