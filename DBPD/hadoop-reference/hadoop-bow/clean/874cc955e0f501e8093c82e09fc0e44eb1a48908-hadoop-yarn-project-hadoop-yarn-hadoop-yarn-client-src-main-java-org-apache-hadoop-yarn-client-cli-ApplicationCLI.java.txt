YARN-1787. Fixed help messages for applicationattempt and container sub-commands in bin/yarn. Contributed by Zhijie Shen.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575482 13f79535-47bb-0310-9956-ffa450edef68

-
-    opts.addOption(STATUS_CMD, true,
-        "Prints the status of the application.");
-    if (args.length > 0
-        && args[0].compareToIgnoreCase(APPLICATION_ATTEMPT) == 0) {
-      opts.addOption(LIST_CMD, true,
-          "List application attempts for aplication from AHS. ");
-    } else if (args.length > 0 && args[0].compareToIgnoreCase("container") == 0) {
-      opts.addOption(LIST_CMD, true,
-          "List containers for application attempts from AHS. ");
-    } else {
-      opts.addOption(LIST_CMD, false, "List applications from the RM. "
+    String title = null;
+    if (args.length > 0 && args[0].equalsIgnoreCase(APPLICATION)) {
+      title = APPLICATION;
+      opts.addOption(STATUS_CMD, true,
+          "Prints the status of the application.");
+      opts.addOption(LIST_CMD, false, "List applications. "
-          + "and -appStates to filter applications based on application state");
+          + "and -appStates to filter applications based on application state.");
+      opts.addOption(KILL_CMD, true, "Kills the application.");
+      opts.addOption(MOVE_TO_QUEUE_CMD, true, "Moves the application to a "
+          + "different queue.");
+      opts.addOption(QUEUE_CMD, true, "Works with the movetoqueue command to"
+          + " specify which queue to move an application to.");
+      opts.addOption(HELP_CMD, false, "Displays help for all commands.");
+      Option appTypeOpt = new Option(APP_TYPE_CMD, true, "Works with -list to "
+          + "filter applications based on "
+          + "input comma-separated list of application types.");
+      appTypeOpt.setValueSeparator(',');
+      appTypeOpt.setArgs(Option.UNLIMITED_VALUES);
+      appTypeOpt.setArgName("Types");
+      opts.addOption(appTypeOpt);
+      Option appStateOpt = new Option(APP_STATE_CMD, true, "Works with -list "
+          + "to filter applications based on input comma-separated list of "
+          + "application states. " + getAllValidApplicationStates());
+      appStateOpt.setValueSeparator(',');
+      appStateOpt.setArgs(Option.UNLIMITED_VALUES);
+      appStateOpt.setArgName("States");
+      opts.addOption(appStateOpt);
+      opts.getOption(KILL_CMD).setArgName("Application ID");
+      opts.getOption(MOVE_TO_QUEUE_CMD).setArgName("Application ID");
+      opts.getOption(QUEUE_CMD).setArgName("Queue Name");
+      opts.getOption(STATUS_CMD).setArgName("Application ID");
+    } else if (args.length > 0 && args[0].equalsIgnoreCase(APPLICATION_ATTEMPT)) {
+      title = APPLICATION_ATTEMPT;
+      opts.addOption(STATUS_CMD, true,
+          "Prints the status of the application attempt.");
+      opts.addOption(LIST_CMD, true,
+          "List application attempts for aplication.");
+      opts.addOption(HELP_CMD, false, "Displays help for all commands.");
+      opts.getOption(STATUS_CMD).setArgName("Application Attempt ID");
+      opts.getOption(LIST_CMD).setArgName("Application ID");
+    } else if (args.length > 0 && args[0].equalsIgnoreCase(CONTAINER)) {
+      title = CONTAINER;
+      opts.addOption(STATUS_CMD, true,
+          "Prints the status of the container.");
+      opts.addOption(LIST_CMD, true,
+          "List containers for application attempt.");
+      opts.addOption(HELP_CMD, false, "Displays help for all commands.");
+      opts.getOption(STATUS_CMD).setArgName("Container ID");
+      opts.getOption(LIST_CMD).setArgName("Application Attempt ID");
-    opts.addOption(KILL_CMD, true, "Kills the application.");
-    opts.addOption(MOVE_TO_QUEUE_CMD, true, "Moves the application to a "
-        + "different queue.");
-    opts.addOption(QUEUE_CMD, true, "Works with the movetoqueue command to"
-        + " specify which queue to move an application to.");
-    opts.addOption(HELP_CMD, false, "Displays help for all commands.");
-    Option appTypeOpt = new Option(APP_TYPE_CMD, true, "Works with -list to "
-        + "filter applications based on "
-        + "input comma-separated list of application types.");
-    appTypeOpt.setValueSeparator(',');
-    appTypeOpt.setArgs(Option.UNLIMITED_VALUES);
-    appTypeOpt.setArgName("Types");
-    opts.addOption(appTypeOpt);
-    Option appStateOpt = new Option(APP_STATE_CMD, true, "Works with -list "
-        + "to filter applications based on input comma-separated list of "
-        + "application states. " + getAllValidApplicationStates());
-    appStateOpt.setValueSeparator(',');
-    appStateOpt.setArgs(Option.UNLIMITED_VALUES);
-    appStateOpt.setArgName("States");
-    opts.addOption(appStateOpt);
-    opts.getOption(KILL_CMD).setArgName("Application ID");
-    opts.getOption(MOVE_TO_QUEUE_CMD).setArgName("Application ID");
-    opts.getOption(QUEUE_CMD).setArgName("Queue Name");
-    opts.getOption(STATUS_CMD).setArgName("Application ID");
-      printUsage(opts);
+      printUsage(title, opts);
-      if ((args[0].compareToIgnoreCase(APPLICATION) == 0)
-          || (args[0].compareToIgnoreCase(APPLICATION_ATTEMPT) == 0)
-          || (args[0].compareToIgnoreCase(CONTAINER) == 0)) {
-        if (args.length != 3) {
-          printUsage(opts);
-          return exitCode;
-        }
-      } else if (args.length != 2) {
-        printUsage(opts);
+      if (args.length != 3) {
+        printUsage(title, opts);
-      if (args[0].compareToIgnoreCase(APPLICATION_ATTEMPT) == 0) {
-        printApplicationAttemptReport(cliParser.getOptionValue(STATUS_CMD));
-      } else if (args[0].compareToIgnoreCase(CONTAINER) == 0) {
-        printContainerReport(cliParser.getOptionValue(STATUS_CMD));
-      } else {
+      if (args[0].equalsIgnoreCase(APPLICATION)) {
+      } else if (args[0].equalsIgnoreCase(APPLICATION_ATTEMPT)) {
+        printApplicationAttemptReport(cliParser.getOptionValue(STATUS_CMD));
+      } else if (args[0].equalsIgnoreCase(CONTAINER)) {
+        printContainerReport(cliParser.getOptionValue(STATUS_CMD));
-      if (args[0].compareToIgnoreCase(APPLICATION_ATTEMPT) == 0) {
-        if (args.length != 3) {
-          printUsage(opts);
-          return exitCode;
-        }
-        listApplicationAttempts(cliParser.getOptionValue(LIST_CMD));
-      } else if (args[0].compareToIgnoreCase(CONTAINER) == 0) {
-        if (args.length != 3) {
-          printUsage(opts);
-          return exitCode;
-        }
-        listContainers(cliParser.getOptionValue(LIST_CMD));
-      } else {
+      if (args[0].equalsIgnoreCase(APPLICATION)) {
+      } else if (args[0].equalsIgnoreCase(APPLICATION_ATTEMPT)) {
+        if (args.length != 3) {
+          printUsage(title, opts);
+          return exitCode;
+        }
+        listApplicationAttempts(cliParser.getOptionValue(LIST_CMD));
+      } else if (args[0].equalsIgnoreCase(CONTAINER)) {
+        if (args.length != 3) {
+          printUsage(title, opts);
+          return exitCode;
+        }
+        listContainers(cliParser.getOptionValue(LIST_CMD));
-        printUsage(opts);
+        printUsage(title, opts);
-        printUsage(opts);
+        printUsage(title, opts);
-      printUsage(opts);
+      printUsage(title, opts);
-      printUsage(opts);
+      printUsage(title, opts);
-  void printUsage(Options opts) {
-    new HelpFormatter().printHelp("application", opts);
+  void printUsage(String title, Options opts) {
+    new HelpFormatter().printHelp(title, opts);
