HADOOP-15996.  Improved Kerberos username mapping strategy in Hadoop.
               Contributed by Bolke de Bruin

+  /**
+   * Constant that defines auth_to_local legacy hadoop evaluation
+   */
+  public static final String MECHANISM_HADOOP = "hadoop";
+
+  /**
+   * Constant that defines auth_to_local MIT evaluation
+   */
+  public static final String MECHANISM_MIT = "mit";
+
+  /** Constant that defines the default behavior of the rule mechanism */
+  public static final String DEFAULT_MECHANISM = MECHANISM_HADOOP;
+
+  /**
+   * How to evaluate auth_to_local rules
+   */
+  private static String ruleMechanism = null;
+
+     * @param ruleMechanism defines the rule evaluation mechanism
-    String apply(String[] params) throws IOException {
+    String apply(String[] params, String ruleMechanism) throws IOException {
-      if (result != null && nonSimplePattern.matcher(result).find()) {
+      if (result != null
+              && nonSimplePattern.matcher(result).find()
+              && ruleMechanism.equalsIgnoreCase(MECHANISM_HADOOP)) {
+    String ruleMechanism = this.ruleMechanism;
+    if (ruleMechanism == null && rules != null) {
+      LOG.warn("auth_to_local rule mechanism not set."
+      + "Using default of " + DEFAULT_MECHANISM);
+      ruleMechanism = DEFAULT_MECHANISM;
+    }
-      String result = r.apply(params);
+      String result = r.apply(params, ruleMechanism);
-    throw new NoMatchingRule("No rules applied to " + toString());
-  }
-
-  /**
-   * Set the rules.
-   * @param ruleString the rules string.
-   */
-  public static void setRules(String ruleString) {
-    rules = (ruleString != null) ? parseRules(ruleString) : null;
+    if (ruleMechanism.equalsIgnoreCase(MECHANISM_HADOOP)) {
+      throw new NoMatchingRule("No rules applied to " + toString());
+    }
+    return toString();
+  /**
+   * Indicates of the rule mechanism has been set
+   *
+   * @return if the rule mechanism has been set.
+   */
+  public static boolean hasRuleMechanismBeenSet() {
+    return ruleMechanism != null;
+  }
+
+  /**
+   * Set the rules.
+   * @param ruleString the rules string.
+   */
+  public static void setRules(String ruleString) {
+    rules = (ruleString != null) ? parseRules(ruleString) : null;
+  }
+
+  /**
+   *
+   * @param ruleMech the evaluation type: hadoop, mit
+   *                 'hadoop' indicates '@' or '/' are not allowed the result
+   *                 evaluation. 'MIT' indicates that auth_to_local
+   *                 rules follow MIT Kerberos evaluation.
+   */
+  public static void setRuleMechanism(String ruleMech) {
+    if (ruleMech != null
+            && (!ruleMech.equalsIgnoreCase(MECHANISM_HADOOP)
+            && !ruleMech.equalsIgnoreCase(MECHANISM_MIT))) {
+      throw new IllegalArgumentException("Invalid rule mechanism: " + ruleMech);
+    }
+    ruleMechanism = ruleMech;
+  }
+
+  /**
+   * Get the rule evaluation mechanism
+   * @return the rule evaluation mechanism
+   */
+  public static String getRuleMechanism() {
+    return ruleMechanism;
+  }
+
