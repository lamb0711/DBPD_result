Revert "HADOOP-15852. Refactor QuotaUsage. Contributed by Beluga Behr."

This reverts commit fb9deed41d6b9f242474b474a5acde0c858e28f6.

-      this.quota = -1L;
-      this.spaceQuota = -1L;
+      this.quota = -1;
+      this.spaceQuota = -1;
-      Arrays.fill(typeQuota, -1L);
+      for (int i = 0; i < typeQuota.length; i++) {
+        typeQuota[i] = -1;
+      }
-      System.arraycopy(typeConsumed, 0, this.typeConsumed, 0,
-          typeConsumed.length);
+      for (int i = 0; i < typeConsumed.length; i++) {
+        this.typeConsumed[i] = typeConsumed[i];
+      }
-      System.arraycopy(typeQuota, 0, this.typeQuota, 0,
-          typeQuota.length);
+      for (int i = 0; i < typeQuota.length; i++) {
+        this.typeQuota[i] = typeQuota[i];
+      }
-    return (typeQuota != null) ? typeQuota[type.ordinal()] : -1L;
+    return (typeQuota != null) ? typeQuota[type.ordinal()] : -1;
-    return (typeConsumed != null) ? typeConsumed[type.ordinal()] : 0L;
+    return (typeConsumed != null) ? typeConsumed[type.ordinal()] : 0;
+  }
+
+  /** Return storage type quota. */
+  private long[] getTypesQuota() {
+    return typeQuota;
+  }
+
+  /** Return storage type quota. */
+  private long[] getTypesConsumed() {
+    return typeConsumed;
-      if (typeQuota[t.ordinal()] > 0L) {
+      if (typeQuota[t.ordinal()] > 0) {
-      if (typeConsumed[t.ordinal()] > 0L) {
+      if (typeConsumed[t.ordinal()] > 0) {
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result
-        + (int) (fileAndDirectoryCount ^ (fileAndDirectoryCount >>> 32));
-    result = prime * result + (int) (quota ^ (quota >>> 32));
-    result = prime * result + (int) (spaceConsumed ^ (spaceConsumed >>> 32));
-    result = prime * result + (int) (spaceQuota ^ (spaceQuota >>> 32));
-    result = prime * result + Arrays.hashCode(typeConsumed);
-    result = prime * result + Arrays.hashCode(typeQuota);
-    return result;
+  public boolean equals(Object to) {
+    return (this == to || (to instanceof QuotaUsage &&
+        getFileAndDirectoryCount() ==
+        ((QuotaUsage) to).getFileAndDirectoryCount() &&
+        getQuota() == ((QuotaUsage) to).getQuota() &&
+        getSpaceConsumed() == ((QuotaUsage) to).getSpaceConsumed() &&
+        getSpaceQuota() == ((QuotaUsage) to).getSpaceQuota() &&
+        Arrays.equals(getTypesQuota(), ((QuotaUsage) to).getTypesQuota()) &&
+        Arrays.equals(getTypesConsumed(),
+        ((QuotaUsage) to).getTypesConsumed())));
-  public boolean equals(Object obj) {
-    if (this == obj) {
-      return true;
+  public int hashCode() {
+    long result = (getFileAndDirectoryCount() ^ getQuota() ^
+        getSpaceConsumed() ^ getSpaceQuota());
+    if (getTypesQuota() != null) {
+      for (long quota : getTypesQuota()) {
+        result ^= quota;
+      }
-    if (obj == null) {
-      return false;
+    if (getTypesConsumed() != null) {
+      for (long consumed : getTypesConsumed()) {
+        result ^= consumed;
+      }
-    if (getClass() != obj.getClass()) {
-      return false;
-    }
-    QuotaUsage other = (QuotaUsage) obj;
-    if (fileAndDirectoryCount != other.fileAndDirectoryCount) {
-      return false;
-    }
-    if (quota != other.quota) {
-      return false;
-    }
-    if (spaceConsumed != other.spaceConsumed) {
-      return false;
-    }
-    if (spaceQuota != other.spaceQuota) {
-      return false;
-    }
-    if (!Arrays.equals(typeConsumed, other.typeConsumed)) {
-      return false;
-    }
-    if (!Arrays.equals(typeQuota, other.typeQuota)) {
-      return false;
-    }
-    return true;
+    return (int)result;
-    if (quota > 0L) {
+    if (quota > 0) {
-    if (spaceQuota >= 0L) {
+    if (spaceQuota >= 0) {
-    StringBuilder content = new StringBuilder();
+    StringBuffer content = new StringBuffer();
-    StringBuilder header = new StringBuilder();
+    StringBuffer header = new StringBuffer();
+
-      final String storageName = st.toString();
+      String storageName = st.toString();
