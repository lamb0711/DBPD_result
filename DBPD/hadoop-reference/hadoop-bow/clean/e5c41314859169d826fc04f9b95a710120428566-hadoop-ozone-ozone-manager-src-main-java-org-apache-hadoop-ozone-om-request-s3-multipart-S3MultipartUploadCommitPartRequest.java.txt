HDDS-1856. Make required changes for Non-HA to use new HA code in OM. (#1174)


+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+  private static final Logger LOG =
+      LoggerFactory.getLogger(S3MultipartUploadCommitPartRequest.class);
+
-      long transactionLogIndex) {
+      long transactionLogIndex,
+      OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper) {
-    OmMultipartKeyInfo multipartKeyInfo = null;
-    OmKeyInfo omKeyInfo = null;
-    String openKey = null;
-    String multipartKey = null;
-    OzoneManagerProtocolProtos.PartKeyInfo oldPartKeyInfo = null;
+
+    OMResponse.Builder omResponse = OMResponse.newBuilder()
+        .setCmdType(OzoneManagerProtocolProtos.Type.CommitMultiPartUpload)
+        .setStatus(OzoneManagerProtocolProtos.Status.OK)
+        .setSuccess(true);
+    OMClientResponse omClientResponse = null;
+    OzoneManagerProtocolProtos.PartKeyInfo oldPartKeyInfo = null;
+    String openKey = null;
+    OmKeyInfo omKeyInfo = null;
+    String multipartKey = null;
+    OmMultipartKeyInfo multipartKeyInfo = null;
-      multipartKey = omMetadataManager.getMultipartKey(volumeName, bucketName,
-          keyName, uploadID);
+      multipartKey = omMetadataManager.getMultipartKey(volumeName,
+          bucketName, keyName, uploadID);
-      multipartKeyInfo = omMetadataManager
-          .getMultipartInfoTable().get(multipartKey);
+      multipartKeyInfo =
+          omMetadataManager.getMultipartInfoTable().get(multipartKey);
-
+      omResponse.setCommitMultiPartUploadResponse(
+          MultipartCommitUploadPartResponse.newBuilder().setPartName(partName));
+      omClientResponse = new S3MultipartUploadCommitPartResponse(multipartKey,
+        openKey, keyArgs.getModificationTime(), omKeyInfo, multipartKeyInfo,
+          oldPartKeyInfo, omResponse.build());
+
+      omClientResponse = new S3MultipartUploadCommitPartResponse(multipartKey,
+          openKey, keyArgs.getModificationTime(), omKeyInfo, multipartKeyInfo,
+          oldPartKeyInfo, createErrorOMResponse(omResponse, exception));
+      if (omClientResponse != null) {
+        omClientResponse.setFlushFuture(
+            ozoneManagerDoubleBufferHelper.add(omClientResponse,
+                transactionLogIndex));
+      }
-    OMResponse.Builder omResponse = OMResponse.newBuilder()
-        .setCmdType(OzoneManagerProtocolProtos.Type.CommitMultiPartUpload)
-        .setStatus(OzoneManagerProtocolProtos.Status.OK)
-        .setSuccess(true);
-
-      omResponse.setCommitMultiPartUploadResponse(
-          MultipartCommitUploadPartResponse.newBuilder().setPartName(partName));
-      return new S3MultipartUploadCommitPartResponse(multipartKey, openKey,
-          keyArgs.getModificationTime(), omKeyInfo, multipartKeyInfo,
-          oldPartKeyInfo, omResponse.build());
-    } else {
-      ozoneManager.getMetrics().incNumCommitMultipartUploadPartFails();
-      return new S3MultipartUploadCommitPartResponse(multipartKey, openKey,
-          keyArgs.getModificationTime(), omKeyInfo, multipartKeyInfo,
-          oldPartKeyInfo, createErrorOMResponse(omResponse, exception));
+      LOG.debug("MultipartUpload Commit is successfully for Key:{} in " +
+          "Volume/Bucket {}/{}", keyName, volumeName, bucketName);
+    } else {
+      LOG.error("MultipartUpload Commit is failed for Key:{} in " +
+          "Volume/Bucket {}/{}", keyName, volumeName, bucketName, exception);
+      ozoneManager.getMetrics().incNumCommitMultipartUploadPartFails();
+    return omClientResponse;
