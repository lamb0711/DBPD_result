HDFS-14564: Add libhdfs APIs for readFully; add readFully to ByteBufferPositionedReadable (#963) Contributed by Sahil Takiar.

Reviewed-by: Siyao Meng <smeng@cloudera.com>
-      throw new UnsupportedOperationException("This stream does not support " +
-          "positioned read.");
+      throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+          + " does not support positioned read.");
-      throw new UnsupportedOperationException("This stream does not support " +
-          "positioned reads with byte buffers.");
+      throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+          + " does not support positioned reads with byte buffers.");
-  
+
+  /**
+   * Positioned readFully using {@link ByteBuffer}s. This method is thread-safe.
+   */
+  @Override
+  public void readFully(long position, final ByteBuffer buf)
+      throws IOException {
+    checkStream();
+    if (!(in instanceof ByteBufferPositionedReadable)) {
+      throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+          + " does not support positioned reads with byte buffers.");
+    }
+    int bufPos = buf.position();
+    ((ByteBufferPositionedReadable) in).readFully(position, buf);
+    final int n = buf.position() - bufPos;
+    if (n > 0) {
+      // This operation does not change the current offset of the file
+      decrypt(position, buf, n, bufPos);
+    }
+  }
+
-      throw new UnsupportedOperationException("This stream does not support " +
-          "positioned readFully.");
+      throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+          + " does not support positioned readFully.");
-        throw new UnsupportedOperationException("This stream does not " +
-                "support seek.");
+        throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+            + " does not support seek.");
-      throw new UnsupportedOperationException("This stream does not support " +
-          "seekToNewSource.");
+      throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+          + " does not support seekToNewSource.");
-        throw new UnsupportedOperationException("This stream does not " +
-                "support seek.");
+        throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+            + " does not support seek.");
-      throw new UnsupportedOperationException("This stream does not support " +
-          "enhanced byte buffer access.");
+      throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+          + " does not support enhanced byte buffer access.");
-      throw new UnsupportedOperationException("This stream does not support " + 
-          "release buffer.");
+      throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+          + " does not support release buffer.");
-      throw new UnsupportedOperationException("This stream does not support " +
-          "setting the readahead caching strategy.");
+      throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+          + " does not support setting the readahead caching strategy.");
-      throw new UnsupportedOperationException("This stream does not " +
-          "support setting the drop-behind caching setting.");
+      throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+          + " stream does not support setting the drop-behind caching"
+          + " setting.");
-        throw new UnsupportedOperationException("This stream does not expose " +
-          "its stream capabilities.");
+        throw new UnsupportedOperationException(in.getClass().getCanonicalName()
+          + " does not expose its stream capabilities.");
