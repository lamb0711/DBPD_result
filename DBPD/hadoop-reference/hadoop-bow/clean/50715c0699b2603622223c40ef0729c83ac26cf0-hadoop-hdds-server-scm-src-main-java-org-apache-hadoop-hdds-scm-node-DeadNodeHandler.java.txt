HDDS-662. Introduce ContainerReplicaState in StorageContainerManager. Contributed by Nanda kumar.

+import org.apache.hadoop.hdds.scm.container.ContainerException;
-import org.apache.hadoop.hdds.scm.container.ContainerStateManager;
+import org.apache.hadoop.hdds.scm.container.ContainerInfo;
+import org.apache.hadoop.hdds.scm.container.ContainerManager;
+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;
+import org.apache.hadoop.hdds.scm.container.ContainerReplica;
-import org.apache.hadoop.hdds.scm.exceptions.SCMException;
-  private final ContainerStateManager containerStateManager;
+  private final ContainerManager containerManager;
-      ContainerStateManager containerStateManager) {
-    this.containerStateManager = containerStateManager;
+      ContainerManager containerManager) {
+    this.containerManager = containerManager;
-    Set<ContainerID> containers =
+    // TODO: check if there are any pipeline on this node and fire close
+    // pipeline event
+    Set<ContainerID> ids =
-    if (containers == null) {
+    if (ids == null) {
-    LOG.info(
-        "Datanode {}  is dead. Removing replications from the in-memory state.",
-        datanodeDetails.getUuid());
-    for (ContainerID container : containers) {
+    LOG.info("Datanode {}  is dead. Removing replications from the in-memory" +
+            " state.", datanodeDetails.getUuid());
+    for (ContainerID id : ids) {
-        try {
-          containerStateManager.removeContainerReplica(container,
-              datanodeDetails);
-        } catch (SCMException ex) {
-          LOG.info("DataNode {} doesn't have replica for container {}.",
-              datanodeDetails.getUuid(), container.getId());
-        }
-
-        if (!containerStateManager.isOpen(container)) {
-          ReplicationRequest replicationRequest =
-              containerStateManager.checkReplicationState(container);
-
-          if (replicationRequest != null) {
-            publisher.fireEvent(SCMEvents.REPLICATE_CONTAINER,
-                replicationRequest);
+        final ContainerInfo container = containerManager.getContainer(id);
+        if (!container.isOpen()) {
+          final ContainerReplica replica = ContainerReplica.newBuilder()
+              .setContainerID(id)
+              .setDatanodeDetails(datanodeDetails)
+              .build();
+          try {
+            containerManager.removeContainerReplica(id, replica);
+            replicateIfNeeded(container, publisher);
+          } catch (ContainerException ex) {
+            LOG.warn("Exception while removing container replica #{} for " +
+                "container #{}.", replica, container, ex);
-      } catch (SCMException e) {
-        LOG.error("Can't remove container from containerStateMap {}", container
-            .getId(), e);
+      } catch (ContainerNotFoundException cnfe) {
+        LOG.warn("Container Not found!", cnfe);
+   * Compare the existing replication number with the expected one.
+   */
+  private void replicateIfNeeded(ContainerInfo container,
+      EventPublisher publisher) throws ContainerNotFoundException {
+    final int existingReplicas = containerManager
+        .getContainerReplicas(container.containerID()).size();
+    final int expectedReplicas = container.getReplicationFactor().getNumber();
+    if (existingReplicas != expectedReplicas) {
+      publisher.fireEvent(SCMEvents.REPLICATE_CONTAINER,
+          new ReplicationRequest(
+              container.getContainerID(), existingReplicas, expectedReplicas));
+    }
+  }
+
+  /**
+  // TODO: remove this.
