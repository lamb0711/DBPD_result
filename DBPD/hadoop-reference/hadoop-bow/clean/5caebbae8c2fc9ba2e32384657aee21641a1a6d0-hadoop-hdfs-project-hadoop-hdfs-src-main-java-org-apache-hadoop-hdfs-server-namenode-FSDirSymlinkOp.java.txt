HDFS-7484. Make FSDirectory#addINode take existing INodes as its parameter. Contributed by Jing Zhao.

+import java.util.Map;
-  static INodeSymlink unprotectedAddSymlink(
-      FSDirectory fsd, INodesInPath iip, long id, String target, long mtime,
-      long atime, PermissionStatus perm)
+  static INodeSymlink unprotectedAddSymlink(FSDirectory fsd, INodesInPath iip,
+      byte[] localName, long id, String target, long mtime, long atime,
+      PermissionStatus perm)
-    return fsd.addINode(iip, symlink) ? symlink : null;
+    symlink.setLocalName(localName);
+    return fsd.addINode(iip, symlink) != null ? symlink : null;
-  private static INodeSymlink addSymlink(
-      FSDirectory fsd, String path, INodesInPath iip, String target,
-      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)
-      throws IOException {
+  private static INodeSymlink addSymlink(FSDirectory fsd, String path,
+      INodesInPath iip, String target, PermissionStatus dirPerms,
+      boolean createParent, boolean logRetryCache) throws IOException {
+    final byte[] localName = iip.getLastLocalName();
-      INodesInPath parentIIP = iip.getParentINodesInPath();
-      if (parentIIP == null || (parentIIP = FSDirMkdirOp.mkdirsRecursively(
-          fsd,
-          parentIIP, dirPerms, true, mtime)) == null) {
+      Map.Entry<INodesInPath, String> e = FSDirMkdirOp
+          .createAncestorDirectories(fsd, iip, dirPerms);
+      if (e == null) {
-      } else {
-        iip = INodesInPath.append(parentIIP, null, iip.getLastLocalName());
+      iip = INodesInPath.append(e.getKey(), null, localName);
-    INodeSymlink newNode =
-        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);
+    INodeSymlink newNode = unprotectedAddSymlink(fsd, iip.getExistingINodes(),
+        localName, id, target, mtime, mtime, perm);
