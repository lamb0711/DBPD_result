YARN-3521. Support return structured NodeLabel objects in REST API (Sunil G via wangda)

+import org.apache.hadoop.yarn.api.records.NodeLabel;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.NodeLabelInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.NodeToLabelsEntry;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.NodeToLabelsEntryList;
-  public NodeToLabelsInfo getNodeToLabels(@Context HttpServletRequest hsr) 
-    throws IOException {
+  public NodeToLabelsInfo getNodeToLabels(@Context HttpServletRequest hsr)
+      throws IOException {
-    Map<NodeId, Set<String>> nodeIdToLabels =   
-      rm.getRMContext().getNodeLabelManager().getNodeLabels();
-      
+    Map<NodeId, Set<String>> nodeIdToLabels = rm.getRMContext()
+        .getNodeLabelManager().getNodeLabels();
+
-      ntlMap.put(nitle.getKey().toString(), 
-        new NodeLabelsInfo(nitle.getValue()));
+      ntlMap.put(nitle.getKey().toString(),
+          new NodeLabelsInfo(nitle.getValue()));
-    Map<String, NodeIDsInfo> ltsMap = lts.getLabelsToNodes();
+    Map<NodeLabelInfo, NodeIDsInfo> ltsMap = lts.getLabelsToNodes();
-      ltsMap.put(entry.getKey(), new NodeIDsInfo(nodeIdStrList));
+      ltsMap.put(new NodeLabelInfo(entry.getKey()), new NodeIDsInfo(
+          nodeIdStrList));
-  public Response replaceLabelsOnNodes(final NodeToLabelsInfo newNodeToLabels,
+  public Response replaceLabelsOnNodes(final NodeToLabelsEntryList newNodeToLabels,
-    for (Map.Entry<String, NodeLabelsInfo> nitle : newNodeToLabels
-        .getNodeToLabels().entrySet()) {
+    for (NodeToLabelsEntry nitle : newNodeToLabels.getNodeToLabels()) {
-          ConverterUtils.toNodeIdWithDefaultPort(nitle.getKey()),
-          new HashSet<String>(nitle.getValue().getNodeLabels()));
+          ConverterUtils.toNodeIdWithDefaultPort(nitle.getNodeId()),
+          new HashSet<String>(nitle.getNodeLabels()));
-  public Response replaceLabelsOnNode(NodeLabelsInfo newNodeLabelsInfo,
+  public Response replaceLabelsOnNode(
+      @QueryParam("labels") Set<String> newNodeLabelsName,
-        new HashSet<String>(newNodeLabelsInfo.getNodeLabels()));
+        new HashSet<String>(newNodeLabelsName));
-    return replaceLabelsOnNode(newLabelsForNode, hsr, "/nodes/nodeid/replace-labels");
+    return replaceLabelsOnNode(newLabelsForNode, hsr,
+        "/nodes/nodeid/replace-labels");
-    NodeLabelsInfo ret = 
-      new NodeLabelsInfo(rm.getRMContext().getNodeLabelManager()
-        .getClusterNodeLabelNames());
+    List<NodeLabel> nodeLabels = rm.getRMContext().getNodeLabelManager()
+        .getClusterNodeLabels();
+    NodeLabelsInfo ret = new NodeLabelsInfo(nodeLabels);
-        .addToCluserNodeLabelsWithDefaultExclusivity(new HashSet<String>(
-          newNodeLabels.getNodeLabels()));
+        .addToCluserNodeLabels(newNodeLabels.getNodeLabels());
-  public Response removeFromCluserNodeLabels(final NodeLabelsInfo oldNodeLabels,
-      @Context HttpServletRequest hsr)
-      throws Exception {
+  public Response removeFromCluserNodeLabels(
+      @QueryParam("labels") Set<String> oldNodeLabels,
+      @Context HttpServletRequest hsr) throws Exception {
-        + " post to .../remove-node-labels";
+          + " post to .../remove-node-labels";
-        + " for post to .../remove-node-labels ";
+          + " for post to .../remove-node-labels ";
-    
-    rm.getRMContext().getNodeLabelManager()
-        .removeFromClusterNodeLabels(new HashSet<String>(
-          oldNodeLabels.getNodeLabels()));
-            
-    return Response.status(Status.OK).build();
+    rm.getRMContext()
+        .getNodeLabelManager()
+        .removeFromClusterNodeLabels(
+            new HashSet<String>(oldNodeLabels));
+
+    return Response.status(Status.OK).build();
