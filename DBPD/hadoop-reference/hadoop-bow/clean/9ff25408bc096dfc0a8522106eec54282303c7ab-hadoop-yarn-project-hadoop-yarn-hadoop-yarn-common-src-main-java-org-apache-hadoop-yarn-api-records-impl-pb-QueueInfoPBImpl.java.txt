YARN-6164. Expose Queue Configurations per Node Label through YARN client api. Contributed by Benson Qiu.

+import java.util.HashMap;
+import java.util.Map;
+import org.apache.hadoop.yarn.api.records.QueueConfigurations;
+import org.apache.hadoop.yarn.proto.YarnProtos.QueueConfigurationsMapProto;
+import org.apache.hadoop.yarn.proto.YarnProtos.QueueConfigurationsProto;
-  
+  Map<String, QueueConfigurations> queueConfigurations;
+
+  private void addQueueConfigurations() {
+    maybeInitBuilder();
+    builder.clearQueueConfigurationsMap();
+    if (queueConfigurations == null) {
+      return;
+    }
+    Iterable<? extends QueueConfigurationsMapProto> values =
+        new Iterable<QueueConfigurationsMapProto>() {
+
+      @Override
+      public Iterator<QueueConfigurationsMapProto> iterator() {
+        return new Iterator<QueueConfigurationsMapProto>() {
+          private Iterator<String> iterator =
+              queueConfigurations.keySet().iterator();
+
+          @Override
+          public boolean hasNext() {
+            return iterator.hasNext();
+          }
+
+          @Override
+          public QueueConfigurationsMapProto next() {
+            String key = iterator.next();
+            return QueueConfigurationsMapProto.newBuilder()
+                .setPartitionName(key)
+                .setQueueConfigurations(
+                    convertToProtoFormat(queueConfigurations.get(key)))
+                .build();
+          }
+
+          @Override
+          public void remove() {
+            throw new UnsupportedOperationException();
+          }
+        };
+      }
+    };
+    this.builder.addAllQueueConfigurationsMap(values);
+  }
+
+    if (this.queueConfigurations != null) {
+      addQueueConfigurations();
+    }
-  
+
-  
+
+  private QueueConfigurationsPBImpl convertFromProtoFormat(
+      QueueConfigurationsProto q) {
+    return new QueueConfigurationsPBImpl(q);
+  }
+
+  private QueueConfigurationsProto convertToProtoFormat(
+      QueueConfigurations q) {
+    return ((QueueConfigurationsPBImpl)q).getProto();
+  }
+
+
+  private void initQueueConfigurations() {
+    if (queueConfigurations != null) {
+      return;
+    }
+    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;
+    List<QueueConfigurationsMapProto> lists = p.getQueueConfigurationsMapList();
+    queueConfigurations =
+        new HashMap<String, QueueConfigurations>(lists.size());
+    for (QueueConfigurationsMapProto queueConfigurationsProto : lists) {
+      queueConfigurations.put(queueConfigurationsProto.getPartitionName(),
+          convertFromProtoFormat(
+              queueConfigurationsProto.getQueueConfigurations()));
+    }
+  }
+
+  @Override
+  public Map<String, QueueConfigurations> getQueueConfigurations() {
+    initQueueConfigurations();
+    return queueConfigurations;
+  }
+
+  @Override
+  public void setQueueConfigurations(
+      Map<String, QueueConfigurations> queueConfigurations) {
+    if (queueConfigurations == null) {
+      return;
+    }
+    initQueueConfigurations();
+    this.queueConfigurations.clear();
+    this.queueConfigurations.putAll(queueConfigurations);
+  }
+
