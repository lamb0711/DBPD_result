YARN-7839. Modify PlacementAlgorithm to Check node capacity before placing request on node. (Panagiotis Garefalakis via asuresh)

+import java.util.HashMap;
+import java.util.Map;
+import java.util.stream.Collectors;
+import org.apache.hadoop.yarn.api.records.NodeId;
+import org.apache.hadoop.yarn.api.records.Resource;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint.api.SchedulingRequestWithPlacementAttempt;
+import org.apache.hadoop.yarn.util.resource.ResourceCalculator;
+import org.apache.hadoop.yarn.util.resource.Resources;
+  private ResourceCalculator resourceCalculator;
+    this.resourceCalculator = rmContext.getScheduler().getResourceCalculator();
-  public boolean attemptPlacementOnNode(ApplicationId appId,
-      SchedulingRequest schedulingRequest, SchedulerNode schedulerNode)
+  boolean attemptPlacementOnNode(ApplicationId appId,
+      Resource availableResources, SchedulingRequest schedulingRequest,
+      SchedulerNode schedulerNode, boolean ignoreResourceCheck)
-    if (PlacementConstraintsUtil.canSatisfyConstraints(appId,
-        schedulingRequest, schedulerNode, constraintManager, tagsManager)) {
-      return true;
-    }
-    return false;
+    boolean fitsInNode = ignoreResourceCheck ||
+        Resources.fitsIn(resourceCalculator,
+            schedulingRequest.getResourceSizing().getResources(),
+            availableResources);
+    boolean constraintsSatisfied =
+        PlacementConstraintsUtil.canSatisfyConstraints(appId,
+        schedulingRequest, schedulerNode, constraintManager, tagsManager);
+    return fitsInNode && constraintsSatisfied;
+    int placementAttempt = requests.getPlacementAttempt();
+    Map<NodeId, Resource> availResources = new HashMap<>();
-      doPlacement(requests, resp, allNodes, rejectedRequests);
+      doPlacement(requests, resp, allNodes, rejectedRequests, availResources);
-          rejectedRequests);
+          rejectedRequests, availResources);
-    resp.getRejectedRequests().addAll(rejectedRequests);
+    resp.getRejectedRequests().addAll(
+        rejectedRequests.stream().map(
+            x -> new SchedulingRequestWithPlacementAttempt(
+                placementAttempt, x)).collect(Collectors.toList()));
-      List<SchedulingRequest> rejectedRequests) {
+      List<SchedulingRequest> rejectedRequests,
+      Map<NodeId, Resource> availableResources) {
+          Resource unallocatedResource =
+              availableResources.computeIfAbsent(node.getNodeID(),
+                  x -> Resource.newInstance(node.getUnallocatedResource()));
-                  requests.getApplicationId(), schedulingRequest, node)) {
+                  requests.getApplicationId(), unallocatedResource,
+                  schedulingRequest, node, false)) {
+            Resources.addTo(unallocatedResource,
+                schedulingRequest.getResourceSizing().getResources());
+   * @param availableResources
-      List<SchedulingRequest> rejectedRequests) {
+      List<SchedulingRequest> rejectedRequests,
+      Map<NodeId, Resource> availableResources) {
-          if (!attemptPlacementOnNode(
-              applicationId, pReq.getSchedulingRequest(), node)) {
+          Resource availOnNode = availableResources.get(node.getNodeID());
+          if (!attemptPlacementOnNode(applicationId, availOnNode,
+              pReq.getSchedulingRequest(), node, true)) {
+            Resources.subtractFrom(availOnNode,
+                pReq.getSchedulingRequest().getResourceSizing().getResources());
