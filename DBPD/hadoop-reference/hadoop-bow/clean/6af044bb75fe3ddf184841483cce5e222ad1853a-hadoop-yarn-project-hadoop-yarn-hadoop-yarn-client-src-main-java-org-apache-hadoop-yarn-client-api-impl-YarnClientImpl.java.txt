YARN-1389. Made ApplicationClientProtocol and ApplicationHistoryProtocol expose analogous getApplication(s)/Attempt(s)/Container(s) APIs. Contributed by Mayank Bansal.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577052 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptReportRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptReportResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptsRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptsResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainerReportRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainerReportResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainersRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainersResponse;
-
-
-
-    if (historyServiceEnabled) {
+    try {
+      GetApplicationAttemptReportRequest request = Records
+          .newRecord(GetApplicationAttemptReportRequest.class);
+      request.setApplicationAttemptId(appAttemptId);
+      GetApplicationAttemptReportResponse response = rmClient
+          .getApplicationAttemptReport(request);
+      return response.getApplicationAttemptReport();
+    } catch (YarnException e) {
+      if (!historyServiceEnabled) {
+        // Just throw it as usual if historyService is not enabled.
+        throw e;
+      }
+      // Even if history-service is enabled, treat all exceptions still the same
+      // except the following
+      if (e.getClass() != ApplicationNotFoundException.class) {
+        throw e;
+      }
-    throw new YarnException("History service is not enabled.");
-    if (historyServiceEnabled) {
+    try {
+      GetApplicationAttemptsRequest request = Records
+          .newRecord(GetApplicationAttemptsRequest.class);
+      request.setApplicationId(appId);
+      GetApplicationAttemptsResponse response = rmClient
+          .getApplicationAttempts(request);
+      return response.getApplicationAttemptList();
+    } catch (YarnException e) {
+      if (!historyServiceEnabled) {
+        // Just throw it as usual if historyService is not enabled.
+        throw e;
+      }
+      // Even if history-service is enabled, treat all exceptions still the same
+      // except the following
+      if (e.getClass() != ApplicationNotFoundException.class) {
+        throw e;
+      }
-    throw new YarnException("History service is not enabled.");
-    if (historyServiceEnabled) {
+    try {
+      GetContainerReportRequest request = Records
+          .newRecord(GetContainerReportRequest.class);
+      request.setContainerId(containerId);
+      GetContainerReportResponse response = rmClient
+          .getContainerReport(request);
+      return response.getContainerReport();
+    } catch (YarnException e) {
+      if (!historyServiceEnabled) {
+        // Just throw it as usual if historyService is not enabled.
+        throw e;
+      }
+      // Even if history-service is enabled, treat all exceptions still the same
+      // except the following
+      if (e.getClass() != ApplicationNotFoundException.class) {
+        throw e;
+      }
-    throw new YarnException("History service is not enabled.");
-    if (historyServiceEnabled) {
+    try {
+      GetContainersRequest request = Records
+          .newRecord(GetContainersRequest.class);
+      request.setApplicationAttemptId(applicationAttemptId);
+      GetContainersResponse response = rmClient.getContainers(request);
+      return response.getContainerList();
+    } catch (YarnException e) {
+      if (!historyServiceEnabled) {
+        // Just throw it as usual if historyService is not enabled.
+        throw e;
+      }
+      // Even if history-service is enabled, treat all exceptions still the same
+      // except the following
+      if (e.getClass() != ApplicationNotFoundException.class) {
+        throw e;
+      }
-    throw new YarnException("History service is not enabled.");
-  
+
