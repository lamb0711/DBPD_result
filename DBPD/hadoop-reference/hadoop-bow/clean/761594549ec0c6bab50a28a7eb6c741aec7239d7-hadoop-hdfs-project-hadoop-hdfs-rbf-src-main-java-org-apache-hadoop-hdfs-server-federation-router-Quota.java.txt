HDFS-14814. RBF: RouterQuotaUpdateService supports inherited rule. Contributed by Jinglun.

+import java.util.Map.Entry;
+import java.util.TreeMap;
+    setQuotaInternal(path, null, namespaceQuota, storagespaceQuota, type);
+  }
+
+  /**
+   * Set quota for the federation path.
+   * @param path Federation path.
+   * @param locations Locations of the Federation path.
+   * @param namespaceQuota Name space quota.
+   * @param storagespaceQuota Storage space quota.
+   * @param type StorageType that the space quota is intended to be set on.
+   * @throws IOException If the quota system is disabled.
+   */
+  void setQuotaInternal(String path, List<RemoteLocation> locations,
+      long namespaceQuota, long storagespaceQuota, StorageType type)
+      throws IOException {
-    final List<RemoteLocation> locations = getQuotaRemoteLocations(path);
+    if (locations == null) {
+      locations = getQuotaRemoteLocations(path);
+    }
-   * Get quota usage for the federation path.
+   * Get aggregated quota usage for the federation path.
+    return aggregateQuota(getEachQuotaUsage(path));
+  }
+
+  /**
+   * Get quota usage for the federation path.
+   * @param path Federation path.
+   * @return quota usage for each remote location.
+   * @throws IOException If the quota system is disabled.
+   */
+  Map<RemoteLocation, QuotaUsage> getEachQuotaUsage(String path)
+      throws IOException {
-    return aggregateQuota(results);
+    return results;
+  }
+
+  /**
+   * Get global quota for the federation path.
+   * @param path Federation path.
+   * @return global quota for path.
+   * @throws IOException If the quota system is disabled.
+   */
+  QuotaUsage getGlobalQuota(String path) throws IOException {
+    if (!router.isQuotaEnabled()) {
+      throw new IOException("The quota system is disabled in Router.");
+    }
+
+    long nQuota = HdfsConstants.QUOTA_RESET;
+    long sQuota = HdfsConstants.QUOTA_RESET;
+    RouterQuotaManager manager = this.router.getQuotaManager();
+    TreeMap<String, RouterQuotaUsage> pts =
+        manager.getParentsContainingQuota(path);
+    Entry<String, RouterQuotaUsage> entry = pts.lastEntry();
+    while (entry != null && (nQuota == HdfsConstants.QUOTA_RESET
+        || sQuota == HdfsConstants.QUOTA_RESET)) {
+      String ppath = entry.getKey();
+      QuotaUsage quota = entry.getValue();
+      if (nQuota == HdfsConstants.QUOTA_RESET) {
+        nQuota = quota.getQuota();
+      }
+      if (sQuota == HdfsConstants.QUOTA_RESET) {
+        sQuota = quota.getSpaceQuota();
+      }
+      entry = pts.lowerEntry(ppath);
+    }
+    return new QuotaUsage.Builder().quota(nQuota).spaceQuota(sQuota).build();
-  private QuotaUsage aggregateQuota(Map<RemoteLocation, QuotaUsage> results) {
+  QuotaUsage aggregateQuota(Map<RemoteLocation, QuotaUsage> results) {
