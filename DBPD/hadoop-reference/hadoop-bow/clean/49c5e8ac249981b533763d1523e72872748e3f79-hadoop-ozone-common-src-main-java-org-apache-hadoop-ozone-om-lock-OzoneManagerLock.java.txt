HDDS-1672. Improve locking in OzoneManager. (#1016)



-   * For S3_Bucket, VOLUME, BUCKET type resource, same thread acquiring lock
-   * again is allowed.
+   * For S3_BUCKET_LOCK, VOLUME_LOCK, BUCKET_LOCK type resource, same
+   * thread acquiring lock again is allowed.
-   * For USER, PREFIX, S3_SECRET type resource, same thread acquiring lock
-   * again is not allowed.
+   * For USER_LOCK, PREFIX_LOCK, S3_SECRET_LOCK type resource, same thread
+   * acquiring lock again is not allowed.
-   * Special Note for UserLock: Single thread can acquire single user lock/
+   * Special Note for USER_LOCK: Single thread can acquire single user lock/
-   * For Resource type bucket, first param should be volume, second param
+   * For Resource type BUCKET_LOCK, first param should be volume, second param
-  public void acquireLock(Resource resource, String... resources) {
+  public boolean acquireLock(Resource resource, String... resources) {
+      return true;
-    if (resources.length == 1 && resource != Resource.BUCKET) {
+    if (resources.length == 1 && resource != Resource.BUCKET_LOCK) {
-    } else if (resources.length == 2 && resource == Resource.BUCKET) {
+    } else if (resources.length == 2 && resource == Resource.BUCKET_LOCK) {
-  public void acquireMultiUserLock(String firstUser, String secondUser) {
-    Resource resource = Resource.USER;
+  public boolean acquireMultiUserLock(String firstUser, String secondUser) {
+    Resource resource = Resource.USER_LOCK;
+      return true;
-    Resource resource = Resource.USER;
+    Resource resource = Resource.USER_LOCK;
-   * For Resource type bucket, first param should be volume, second param
+   * For Resource type BUCKET_LOCK, first param should be volume, second param
-    S3_BUCKET((byte) 0, "S3_BUCKET"), // = 1
+    S3_BUCKET_LOCK((byte) 0, "S3_BUCKET_LOCK"), // = 1
-    VOLUME((byte) 1, "VOLUME"), // = 2
+    VOLUME_LOCK((byte) 1, "VOLUME_LOCK"), // = 2
-    BUCKET((byte) 2, "BUCKET"), // = 4
+    BUCKET_LOCK((byte) 2, "BUCKET_LOCK"), // = 4
-    USER((byte) 3, "USER"), // 15
+    USER_LOCK((byte) 3, "USER_LOCK"), // 15
-    S3_SECRET((byte) 4, "S3_SECRET"), // 31
-    PREFIX((byte) 5, "PREFIX"); //63
+    S3_SECRET_LOCK((byte) 4, "S3_SECRET_LOCK"), // 31
+    PREFIX_LOCK((byte) 5, "PREFIX_LOCK"); //63
-      // For USER, S3_SECRET and  PREFIX we shall not allow re-acquire locks at
-      // from single thread. 2nd condition is we have acquired one of these
-      // locks, but after that trying to acquire a lock with less than equal of
-      // lockLevel, we should disallow.
-      if (((USER.setMask & lockSetVal) == USER.setMask ||
-          (S3_SECRET.setMask & lockSetVal) == S3_SECRET.setMask ||
-          (PREFIX.setMask & lockSetVal) == PREFIX.setMask)
+      // For USER_LOCK, S3_SECRET_LOCK and  PREFIX_LOCK we shall not allow
+      // re-acquire locks from single thread. 2nd condition is we have
+      // acquired one of these locks, but after that trying to acquire a lock
+      // with less than equal of lockLevel, we should disallow.
+      if (((USER_LOCK.setMask & lockSetVal) == USER_LOCK.setMask ||
+          (S3_SECRET_LOCK.setMask & lockSetVal) == S3_SECRET_LOCK.setMask ||
+          (PREFIX_LOCK.setMask & lockSetVal) == PREFIX_LOCK.setMask)
