Revert "YARN-7677. Docker image cannot set HADOOP_CONF_DIR. Contributed by Jim Brennan"

This reverts commit 8013475d447a8377b5aed858208bf8b91dd32366.

-import java.util.LinkedHashSet;
-import java.util.Set;
-      // Use this to track variables that are added to the environment by nm.
-      LinkedHashSet<String> nmEnvVars = new LinkedHashSet<String>();
-
-      addToEnvMap(environment, nmEnvVars,
+      environment.put(
-            containerLogDirs, localResources, nmPrivateClasspathJarDir,
-            nmEnvVars);
+            containerLogDirs, localResources, nmPrivateClasspathJarDir);
-            containerLogDir, user, nmEnvVars);
+            containerLogDir, user);
-    public abstract void whitelistedEnv(String key, String value)
-        throws IOException;
-
-    public void whitelistedEnv(String key, String value) throws IOException {
-      line("export ", key, "=${", key, ":-", "\"", value, "\"}");
-    }
-
-    @Override
-    public void whitelistedEnv(String key, String value) throws IOException {
-      env(key, value);
-    }
-
-    @Override
-
-  private static void addToEnvMap(
-      Map<String, String> envMap, Set<String> envSet,
-      String envName, String envValue) {
-    envMap.put(envName, envValue);
-    envSet.add(envName);
-  }
-
+  
-      containerLogDirs, Map<Path, List<String>> resources,
-      Path nmPrivateClasspathJarDir,
-      Set<String> nmVars) throws IOException {
+      containerLogDirs,
+      Map<Path, List<String>> resources,
+      Path nmPrivateClasspathJarDir) throws IOException {
-    addToEnvMap(environment, nmVars, Environment.CONTAINER_ID.name(),
-        container.getContainerId().toString());
+    environment.put(Environment.CONTAINER_ID.name(), container
+        .getContainerId().toString());
-    addToEnvMap(environment, nmVars, Environment.NM_PORT.name(),
+    environment.put(Environment.NM_PORT.name(),
-    addToEnvMap(environment, nmVars, Environment.NM_HOST.name(),
-        this.context.getNodeId().getHost());
+    environment.put(Environment.NM_HOST.name(), this.context.getNodeId()
+      .getHost());
-    addToEnvMap(environment, nmVars, Environment.NM_HTTP_PORT.name(),
+    environment.put(Environment.NM_HTTP_PORT.name(),
-    addToEnvMap(environment, nmVars, Environment.LOCAL_DIRS.name(),
+    environment.put(Environment.LOCAL_DIRS.name(),
-    addToEnvMap(environment, nmVars, Environment.LOCAL_USER_DIRS.name(),
-        StringUtils.join(",", userLocalDirs));
+    environment.put(Environment.LOCAL_USER_DIRS.name(), StringUtils.join(",",
+        userLocalDirs));
-    addToEnvMap(environment, nmVars, Environment.LOG_DIRS.name(),
+    environment.put(Environment.LOG_DIRS.name(),
-    addToEnvMap(environment, nmVars, Environment.USER.name(),
-        container.getUser());
+    environment.put(Environment.USER.name(), container.getUser());
+    
+    environment.put(Environment.LOGNAME.name(), container.getUser());
-    addToEnvMap(environment, nmVars, Environment.LOGNAME.name(),
-        container.getUser());
-
-    addToEnvMap(environment, nmVars, Environment.HOME.name(),
+    environment.put(Environment.HOME.name(),
-
-    addToEnvMap(environment, nmVars, Environment.PWD.name(), pwd.toString());
+    
+    environment.put(Environment.PWD.name(), pwd.toString());
+    
+    putEnvIfAbsent(environment, Environment.HADOOP_CONF_DIR.name());
-      addToEnvMap(environment, nmVars, "JVM_PID", "$$");
+      environment.put("JVM_PID", "$$");
-    String nmAdminUserEnv = conf.get(
-        YarnConfiguration.NM_ADMIN_USER_ENV,
-        YarnConfiguration.DEFAULT_NM_ADMIN_USER_ENV);
-    Apps.setEnvFromInputString(environment, nmAdminUserEnv, File.pathSeparator);
-    nmVars.addAll(Apps.getEnvVarsFromInputString(nmAdminUserEnv,
-        File.pathSeparator));
+    Apps.setEnvFromInputString(environment, conf.get(
+      YarnConfiguration.NM_ADMIN_USER_ENV,
+      YarnConfiguration.DEFAULT_NM_ADMIN_USER_ENV), File.pathSeparator);
-      nmVars.add(AuxiliaryServiceHelper.getPrefixServiceName(meta.getKey()));
