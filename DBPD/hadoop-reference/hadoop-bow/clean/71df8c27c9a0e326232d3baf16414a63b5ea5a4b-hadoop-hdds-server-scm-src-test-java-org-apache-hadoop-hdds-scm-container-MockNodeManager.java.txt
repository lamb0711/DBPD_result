HDDS-212. Introduce NodeStateManager to manage the state of Datanodes in SCM. Contributed by Nanda kumar.

-import org.apache.hadoop.hdfs.protocol.UnregisteredNodeException;
+import org.apache.hadoop.hdds.scm.node.states.NodeNotFoundException;
-    .StorageContainerDatanodeProtocolProtos.StorageReportProto;
-import org.apache.hadoop.hdds.protocol.proto
-import org.mockito.Mockito;
-   * @throws UnregisteredNodeException
+   * @throws NodeNotFoundException
-      throws UnregisteredNodeException {
+      throws NodeNotFoundException {
-   * Used for testing.
-   *
-   * @return true if the HB check is done.
-   */
-  @Override
-  public boolean waitForHeartbeatProcessed() {
-    return false;
-  }
-
-  /**
-   * When an object implementing interface <code>Runnable</code> is used to
-   * create a thread, starting the thread causes the object's <code>run</code>
-   * method to be called in that separately executing thread.
-   * <p>
-   * The general contract of the method <code>run</code> is that it may take any
-   * action whatsoever.
-   *
-   * @see Thread#run()
-   */
-  @Override
-  public void run() {
-
-  }
-
-  /**
-   * @param nodeReport - node report.
-  public List<SCMCommand> sendHeartbeat(DatanodeDetails datanodeDetails,
-      NodeReportProto nodeReport) {
-    if ((datanodeDetails != null) && (nodeReport != null) && (nodeReport
-        .getStorageReportCount() > 0)) {
-      SCMNodeStat stat = this.nodeMetricMap.get(datanodeDetails.getUuid());
-
-      long totalCapacity = 0L;
-      long totalRemaining = 0L;
-      long totalScmUsed = 0L;
-      List<StorageReportProto> storageReports = nodeReport
-          .getStorageReportList();
-      for (StorageReportProto report : storageReports) {
-        totalCapacity += report.getCapacity();
-        totalRemaining += report.getRemaining();
-        totalScmUsed += report.getScmUsed();
-      }
-      aggregateStat.subtract(stat);
-      stat.set(totalCapacity, totalScmUsed, totalRemaining);
-      aggregateStat.add(stat);
-      nodeMetricMap.put(datanodeDetails.getUuid(), stat);
-
-    }
+  public List<SCMCommand> processHeartbeat(DatanodeDetails datanodeDetails) {
