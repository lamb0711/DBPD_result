YARN-4206. Add Application timeouts in Application report and CLI. Contributed by Rohith Sharma K S.

+import org.apache.hadoop.yarn.api.records.ApplicationTimeout;
+import org.apache.hadoop.yarn.proto.YarnProtos.ApplicationTimeoutProto;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+  private List<ApplicationTimeout> applicationTimeoutList = null;
+    if (this.applicationTimeoutList != null) {
+      addLocalApplicationTimeoutToProto();
+    }
+
+  @Override
+  public List<ApplicationTimeout> getApplicationTimeouts() {
+    initLocalApplicationsList();
+    return this.applicationTimeoutList;
+  }
+
+  private void initLocalApplicationsList() {
+    if (this.applicationTimeoutList != null) {
+      return;
+    }
+    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;
+    List<ApplicationTimeoutProto> list = p.getApplicationTimeoutsList();
+    this.applicationTimeoutList = new ArrayList<ApplicationTimeout>();
+
+    for (ApplicationTimeoutProto a : list) {
+      this.applicationTimeoutList.add(convertFromProtoFormat(a));
+    }
+  }
+
+  private void addLocalApplicationTimeoutToProto() {
+    maybeInitBuilder();
+    builder.clearApplicationTimeouts();
+    if (applicationTimeoutList == null) {
+      return;
+    }
+    Iterable<ApplicationTimeoutProto> iterable =
+        new Iterable<ApplicationTimeoutProto>() {
+          @Override
+          public Iterator<ApplicationTimeoutProto> iterator() {
+            return new Iterator<ApplicationTimeoutProto>() {
+
+              private Iterator<ApplicationTimeout> iter =
+                  applicationTimeoutList.iterator();
+
+              @Override
+              public boolean hasNext() {
+                return iter.hasNext();
+              }
+
+              @Override
+              public ApplicationTimeoutProto next() {
+                return convertToProtoFormat(iter.next());
+              }
+
+              @Override
+              public void remove() {
+                throw new UnsupportedOperationException();
+
+              }
+            };
+
+          }
+        };
+    builder.addAllApplicationTimeouts(iterable);
+  }
+
+  private ApplicationTimeoutPBImpl convertFromProtoFormat(
+      ApplicationTimeoutProto p) {
+    return new ApplicationTimeoutPBImpl(p);
+  }
+
+  private ApplicationTimeoutProto convertToProtoFormat(ApplicationTimeout t) {
+    return ((ApplicationTimeoutPBImpl) t).getProto();
+  }
+
+  @Override
+  public void setApplicationTimeouts(List<ApplicationTimeout> timeouts) {
+    maybeInitBuilder();
+    if (timeouts == null) {
+      builder.clearApplicationTimeouts();
+    }
+    this.applicationTimeoutList = timeouts;
+  }
