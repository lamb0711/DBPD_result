MAPREDUCE-2766. Fixed NM to set secure permissions for files and directories in distributed-cache. Contributed by Hitesh Shah.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195340 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.records.LocalResourceVisibility;
-  private FsPermission cachePerms = new FsPermission((short) 0755);
+  private static final FsPermission cachePerms = new FsPermission(
+      (short) 0755);
+  static final FsPermission PUBLIC_FILE_PERMS = new FsPermission((short) 0555);
+  static final FsPermission PRIVATE_FILE_PERMS = new FsPermission(
+      (short) 0500);
+  static final FsPermission PUBLIC_DIR_PERMS = new FsPermission((short) 0755);
+  static final FsPermission PRIVATE_DIR_PERMS = new FsPermission((short) 0700);
+      changePermissions(dFinal.getFileSystem(conf), dFinal);
-      cachePerms = null;
+  /**
+   * Recursively change permissions of all files/dirs on path based 
+   * on resource visibility.
+   * Change to 755 or 700 for dirs, 555 or 500 for files.
+   * @param fs FileSystem
+   * @param path Path to modify perms for
+   * @throws IOException
+   * @throws InterruptedException 
+   */
+  private void changePermissions(FileSystem fs, final Path path)
+      throws IOException, InterruptedException {
+    FileStatus fStatus = fs.getFileStatus(path);
+    FsPermission perm = cachePerms;
+    // set public perms as 755 or 555 based on dir or file
+    if (resource.getVisibility() == LocalResourceVisibility.PUBLIC) {
+      perm = fStatus.isDirectory() ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;
+    }
+    // set private perms as 700 or 500
+    else {
+      // PRIVATE:
+      // APPLICATION:
+      perm = fStatus.isDirectory() ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;
+    }
+    LOG.debug("Changing permissions for path " + path
+        + " to perm " + perm);
+    final FsPermission fPerm = perm;
+    if (null == userUgi) {
+      files.setPermission(path, perm);
+    }
+    else {
+      userUgi.doAs(new PrivilegedExceptionAction<Void>() {
+        public Void run() throws Exception {
+          files.setPermission(path, fPerm);
+          return null;
+        }
+      });
+    }
+    if (fStatus.isDirectory()
+        && !fStatus.isSymlink()) {
+      FileStatus[] statuses = fs.listStatus(path);
+      for (FileStatus status : statuses) {
+        changePermissions(fs, status.getPath());
+      }
+    }
+  }
+
