HDFS-14061. Check if the cluster topology supports the EC policy before setting, enabling or adding it. Contributed by Kitti Nanasi.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

-import org.apache.hadoop.hdfs.protocol.ErasureCodingPolicyInfo;
+import org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy;
+import java.util.Arrays;
+import java.util.stream.Collectors;
-   * Verifies whether the cluster setup can support all enabled EC policies.
+   * Verifies whether the cluster setup can support the given EC policies.
-   * @param policies all system and user defined erasure coding policies
+   * @param policies erasure coding policies to verify
-      final DatanodeInfo[] report, final ErasureCodingPolicyInfo[] policies) {
+      final DatanodeInfo[] report, final ErasureCodingPolicy... policies) {
-    return getECTopologyVerifierResult(policies, numOfRacks, report.length);
+    return getECTopologyVerifierResult(numOfRacks, report.length, policies);
-   * @param policies all system and user defined erasure coding policies
+   * @param policies erasure coding policies to verify
-      final ErasureCodingPolicyInfo[] policies, final int numOfRacks,
-      final int numOfDataNodes) {
+      final int numOfRacks, final int numOfDataNodes,
+      final ErasureCodingPolicy... policies) {
-    for (ErasureCodingPolicyInfo policy: policies) {
-      if (policy.isEnabled()) {
-        final int policyDN =
-            policy.getPolicy().getNumDataUnits() + policy.getPolicy()
-                .getNumParityUnits();
-        minDN = Math.max(minDN, policyDN);
-        final int policyRack = (int) Math.ceil(
-            policyDN / (double) policy.getPolicy().getNumParityUnits());
-        minRack = Math.max(minRack, policyRack);
-      }
+    for (ErasureCodingPolicy policy: policies) {
+      final int policyDN =
+          policy.getNumDataUnits() + policy
+              .getNumParityUnits();
+      minDN = Math.max(minDN, policyDN);
+      final int policyRack = (int) Math.ceil(
+          policyDN / (double) policy.getNumParityUnits());
+      minRack = Math.max(minRack, policyRack);
-      String resultMessage = "No erasure coding policy is enabled.";
+      String resultMessage = "No erasure coding policy is given.";
-    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes);
+    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes,
+        getReadablePolicies(policies));
-      final int numOfRacks, final int numOfDataNodes) {
+      final int numOfRacks, final int numOfDataNodes, String readablePolicies) {
-          + minDN + ") for enabled erasure coding policy.";
+          + minDN + ") for the erasure coding policies: " + readablePolicies;
-          + minRack + ") for enabled erasure coding policy.";
+          + minRack + ") for the erasure coding policies: "
+          + readablePolicies;
-        "The cluster setup can support all enabled EC policies");
+        "The cluster setup can support EC policies: "
+            + readablePolicies);
+
+  private static String getReadablePolicies(
+      final ErasureCodingPolicy... policies) {
+    return Arrays.asList(policies)
+            .stream()
+            .map(policyInfo -> policyInfo.getName())
+            .collect(Collectors.joining(", "));
+  }
