HADOOP-14556. S3A to support Delegation Tokens.

Contributed by Steve Loughran.

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import com.google.common.collect.Lists;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+
+@InterfaceAudience.LimitedPrivate("Tests")
+@InterfaceStability.Unstable
+  /**
+   * All bucket list operations, including
+   * {@link #S3_BUCKET_LIST_BUCKET} and
+   * {@link #S3_BUCKET_LIST_MULTIPART_UPLOADS}.
+   */
+  public static final String S3_BUCKET_ALL_LIST = "s3:ListBucket*";
-  public static final String S3_ALL_LIST_OPERATIONS = "s3:List*";
-
-  public static final String S3_ALL_LIST_BUCKET = "s3:ListBucket*";
-
-  public static final String S3_LIST_BUCKET = "s3:ListBucket";
+  /**
+   * List the contents of a bucket.
+   * It applies to a bucket, not to a path in a bucket.
+   */
+  public static final String S3_BUCKET_LIST_BUCKET = "s3:ListBucket";
+   * It applies to a bucket, not to a path in a bucket.
-  public static final String S3_LIST_BUCKET_MULTPART_UPLOADS =
+  public static final String S3_BUCKET_LIST_MULTIPART_UPLOADS =
+   * It applies to a path in a bucket.
-   * abort multipart upload is needed for the S3A Commit protocols.
+   * Abort multipart upload is needed for the S3A Commit protocols.
+   * It applies to a path in a bucket.
-  public static final String[] S3_PATH_READ_OPERATIONS =
+  private static final String[] S3_PATH_READ_OPERATIONS =
-   * excluding SSE-KMS data and S3Guard-ed buckets.
+   * excluding:
+   * <ol>
+   *   <li>bucket-level operations</li>
+   *   <li>SSE-KMS key operations</li>
+   *   <li>DynamoDB operations for S3Guard.</li>
+   * </ol>
+   * As this excludes the bucket list operations, it is not sufficient
+   * to read from a bucket on its own.
-  public static final String[] S3_ROOT_READ_OPERATIONS =
+  private static final String[] S3_ROOT_READ_OPERATIONS =
-          S3_LIST_BUCKET,
-          S3_LIST_BUCKET_MULTPART_UPLOADS,
+  public static final List<String> S3_ROOT_READ_OPERATIONS_LIST =
+      Collections.unmodifiableList(Arrays.asList(S3_ALL_GET));
+
+  /**
+   * Policies which can be applied to bucket resources for read operations.
+   * <ol>
+   *   <li>SSE-KMS key operations</li>
+   *   <li>DynamoDB operations for S3Guard.</li>
+   * </ol>
+   */
+  public static final String[] S3_BUCKET_READ_OPERATIONS =
+      new String[]{
+          S3_ALL_GET,
+          S3_BUCKET_ALL_LIST,
+      };
+
-  public static final String[] S3_PATH_RW_OPERATIONS =
-      new String[]{
+  public static final List<String> S3_PATH_RW_OPERATIONS =
+      Collections.unmodifiableList(Arrays.asList(new String[]{
-          S3_LIST_MULTIPART_UPLOAD_PARTS,
-      };
+      }));
-   * Excludes: SSE-KMS and S3Guard permissions.
+   * Excludes: bucket-ARN, SSE-KMS and S3Guard permissions.
-  public static final String[] S3_PATH_WRITE_OPERATIONS =
-      new String[]{
+  public static final List<String> S3_PATH_WRITE_OPERATIONS =
+      Collections.unmodifiableList(Arrays.asList(new String[]{
-      };
+      }));
-   * Excludes: SSE-KMS and S3Guard permissions.
+   * Excludes: bucket-ARN, SSE-KMS and S3Guard permissions.
-  public static final String[] S3_ROOT_RW_OPERATIONS =
-      new String[]{
-          S3_LIST_BUCKET,
+  public static final List<String> S3_ROOT_RW_OPERATIONS =
+      Collections.unmodifiableList(Arrays.asList(new String[]{
-          S3_LIST_MULTIPART_UPLOAD_PARTS,
-          S3_ALL_LIST_BUCKET,
-      };
+      }));
-  public static final Statement STATEMENT_ALL_DDB = statement(true,
-      ALL_DDB_TABLES, DDB_ALL_OPERATIONS);
+  public static final Statement STATEMENT_ALL_DDB =
+      allowAllDynamoDBOperations(ALL_DDB_TABLES);
-  public static final Statement STATEMENT_S3GUARD_CLIENT = statement(true,
-      ALL_DDB_TABLES,
-      DDB_BATCH_GET_ITEM,
-      DDB_BATCH_WRITE_ITEM,
-      DDB_DELETE_ITEM,
-      DDB_DESCRIBE_TABLE,
-      DDB_GET_ITEM,
-      DDB_PUT_ITEM,
-      DDB_QUERY,
-      DDB_UPDATE_ITEM
-      );
+  public static final Statement STATEMENT_S3GUARD_CLIENT =
+      allowS3GuardClientOperations(ALL_DDB_TABLES);
+   * The s3:GetBucketLocation permission is for all buckets, not for
+   * any named bucket, which complicates permissions.
+   */
+  public static final Statement STATEMENT_ALL_S3_GET_BUCKET_LOCATION =
+      statement(true,
+          S3_ALL_BUCKETS,
+          S3_GET_BUCKET_LOCATION);
+
+  /**
-      STATEMENT_ALLOW_SSE_KMS_RW
+      STATEMENT_ALLOW_SSE_KMS_RW,
+      STATEMENT_ALL_S3_GET_BUCKET_LOCATION
+  public static Statement allowS3GuardClientOperations(String tableArn) {
+    return statement(true,
+        tableArn,
+        DDB_BATCH_GET_ITEM,
+        DDB_BATCH_WRITE_ITEM,
+        DDB_DELETE_ITEM,
+        DDB_DESCRIBE_TABLE,
+        DDB_GET_ITEM,
+        DDB_PUT_ITEM,
+        DDB_QUERY,
+        DDB_UPDATE_ITEM
+    );
+  }
+
+  public static Statement allowAllDynamoDBOperations(String tableArn) {
+    return statement(true,
+        tableArn,
+        DDB_ALL_OPERATIONS);
+  }
+
+  /**
+   * From an S3 bucket name, build an ARN to refer to it.
+   * @param bucket bucket name.
+   * @param write are write permissions required
+   * @return return statement granting access.
+   */
+  public static List<Statement> allowS3Operations(String bucket,
+      boolean write) {
+    // add the bucket operations for the specific bucket ARN
+    ArrayList<Statement> statements =
+        Lists.newArrayList(
+            statement(true,
+                bucketToArn(bucket),
+                S3_GET_BUCKET_LOCATION, S3_BUCKET_ALL_LIST));
+    // then add the statements for objects in the buckets
+    if (write) {
+      statements.add(
+          statement(true,
+              bucketObjectsToArn(bucket),
+              S3_ROOT_RW_OPERATIONS));
+    } else {
+      statements.add(
+          statement(true,
+              bucketObjectsToArn(bucket),
+              S3_ROOT_READ_OPERATIONS_LIST));
+    }
+    return statements;
+  }
+
+  /**
+   * From an S3 bucket name, build an ARN to refer to all objects in
+   * it.
+   * @param bucket bucket name.
+   * @return return the ARN to use in statements.
+   */
+  public static String bucketObjectsToArn(String bucket) {
+    return String.format("arn:aws:s3:::%s/*", bucket);
+  }
+
+
+  /**
+   * From an S3 bucket name, build an ARN to refer to it.
+   * @param bucket bucket name.
+   * @return return the ARN to use in statements.
+   */
+  public static String bucketToArn(String bucket) {
+    return String.format("arn:aws:s3:::%s", bucket);
+  }
+
