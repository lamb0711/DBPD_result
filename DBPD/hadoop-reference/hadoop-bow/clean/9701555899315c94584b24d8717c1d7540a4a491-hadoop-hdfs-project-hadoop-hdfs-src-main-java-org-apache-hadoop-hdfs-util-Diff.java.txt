HDFS-4534. Add INodeReference in order to support rename with snapshots.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1458164 13f79535-47bb-0310-9956-ffa450edef68

+  public static enum ListType {
+    CREATED, DELETED
+  }
+
-  public List<E> getCreatedList() {
-    return created == null? Collections.<E>emptyList(): created;
+  public List<E> getList(final ListType type) {
+    final List<E> list = type == ListType.CREATED? created: deleted;
+    return list == null? Collections.<E>emptyList(): list;
-  /** @return the deleted list, which is never null. */
-  public List<E> getDeletedList() {
-    return deleted == null? Collections.<E>emptyList(): deleted;
-  }
-
-  public int searchCreatedIndex(final K name) {
-    return search(created, name);
+  public int searchIndex(final ListType type, final K name) {
+    return search(getList(type), name);
-   *         otherwise, return the element in the c-list.
+   *         otherwise, return the element in the created/deleted list.
-  public E searchCreated(final K name) {
-    final int c = searchCreatedIndex(name);
-    return c < 0 ? null : created.get(c);
-  }
-  
-  /**
-   * @return null if the element is not found;
-   *         otherwise, return the element in the d-list.
-   */
-  public E searchDeleted(final K name) {
-    final int d = search(deleted, name);
-    return d < 0 ? null : deleted.get(d);
+  public E search(final ListType type, final K name) {
+    final List<E> list = getList(type); 
+    final int c = search(list, name);
+    return c < 0 ? null : list.get(c);
-   * Insert the element to created.
+   * Insert the given element to the created/deleted list.
-  private void insertCreated(final E element, final int i) {
+  private void insert(final ListType type, final E element, final int i) {
+    List<E> list = type == ListType.CREATED? created: deleted; 
-          + ", created=" + created);
+          + ", " + type + "=" + list);
-    if (created == null) {
-      created = new ArrayList<E>(DEFAULT_ARRAY_INITIAL_CAPACITY);
+    if (list == null) {
+      list = new ArrayList<E>(DEFAULT_ARRAY_INITIAL_CAPACITY);
+      if (type == ListType.CREATED) {
+        created = list;
+      } else if (type == ListType.DELETED){
+        deleted = list;
+      }
-    created.add(-i - 1, element);
-  }
-
-  /**
-   * Insert the element to deleted.
-   * @param i the insertion point defined
-   *          in {@link Collections#binarySearch(List, Object)}
-   */
-  private void insertDeleted(final E element, final int i) {
-    if (i >= 0) {
-      throw new AssertionError("Element already exists: element=" + element
-          + ", deleted=" + deleted);
-    }
-    if (deleted == null) {
-      deleted = new ArrayList<E>(DEFAULT_ARRAY_INITIAL_CAPACITY);
-    }
-    deleted.add(-i - 1, element);
+    list.add(-i - 1, element);
-    insertCreated(element, c);
+    insert(ListType.CREATED, element, c);
-      insertDeleted(element, d);
+      insert(ListType.DELETED, element, d);
-        insertCreated(newElement, c);
-        insertDeleted(oldElement, d);
+        insert(ListType.CREATED, newElement, c);
+        insert(ListType.DELETED, oldElement, d);
-    return apply2Previous(previous, getCreatedList(), getDeletedList());
+    return apply2Previous(previous,
+        getList(ListType.CREATED), getList(ListType.DELETED));
-    return apply2Previous(current, getDeletedList(), getCreatedList());
+    return apply2Previous(current,
+        getList(ListType.DELETED), getList(ListType.CREATED));
-    final Iterator<E> createdIterator = posterior.getCreatedList().iterator();
-    final Iterator<E> deletedIterator = posterior.getDeletedList().iterator();
+    final Iterator<E> createdIterator = posterior.getList(ListType.CREATED).iterator();
+    final Iterator<E> deletedIterator = posterior.getList(ListType.DELETED).iterator();
-        +  "{created=" + getCreatedList()
-        + ", deleted=" + getDeletedList() + "}";
+        +  "{created=" + getList(ListType.CREATED)
+        + ", deleted=" + getList(ListType.DELETED) + "}";
