HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.

-import java.util.Arrays;
+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.SASTokenProviderException;
-import org.apache.hadoop.fs.azurebfs.extensions.AbfsAuthorizationException;
-import org.apache.hadoop.fs.azurebfs.extensions.AbfsAuthorizer;
-  private AbfsAuthorizer authorizer;
-    // Initialize ABFS authorizer
-    //
-    this.authorizer = abfsConfiguration.getAbfsAuthorizer();
-    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-      performAbfsAuthCheck(FsAction.READ_WRITE, qualifiedSrcPath, qualifiedDstPath);
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-    Path qualifiedPath = makeQualified(path);
-    performAbfsAuthCheck(FsAction.READ_WRITE, qualifiedPath);
-
-    Path qualifiedPath = makeQualified(path);
-    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
-
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
-    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
+    } else if (exception instanceof SASTokenProviderException) {
+      throw exception;
-  /**
-   * Use ABFS authorizer to check if user is authorized to perform specific
-   * {@link FsAction} on specified {@link Path}s.
-   *
-   * @param action The {@link FsAction} being requested on the provided {@link Path}s.
-   * @param paths The absolute paths of the storage being accessed.
-   * @throws AbfsAuthorizationException on authorization failure.
-   * @throws IOException network problems or similar.
-   * @throws IllegalArgumentException if the required parameters are not provided.
-   */
-  private void performAbfsAuthCheck(FsAction action, Path... paths)
-      throws AbfsAuthorizationException, IOException {
-    if (authorizer == null) {
-      LOG.debug("ABFS authorizer is not initialized. No authorization check will be performed.");
-    } else {
-      Preconditions.checkArgument(paths.length > 0, "no paths supplied for authorization check");
-
-      LOG.debug("Auth check for action: {} on paths: {}", action.toString(), Arrays.toString(paths));
-      if (!authorizer.isAuthorized(action, paths)) {
-        throw new AbfsAuthorizationException(
-            "User is not authorized for action " + action.toString()
-            + " on paths: " + Arrays.toString(paths));
-      }
-    }
-  }
-
