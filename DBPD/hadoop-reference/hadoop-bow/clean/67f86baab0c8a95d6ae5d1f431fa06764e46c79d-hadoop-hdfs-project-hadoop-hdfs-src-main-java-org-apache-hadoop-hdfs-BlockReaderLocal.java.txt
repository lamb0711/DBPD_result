HDFS-4953. Enable HDFS local reads via mmap. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1515906 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdfs.client.ClientMmap;
+import org.apache.hadoop.hdfs.client.ClientMmapManager;
+import org.apache.hadoop.hdfs.protocol.LocatedBlock;
+  private ClientMmap clientMmap;
+  private boolean mmapDisabled;
+    this.clientMmap = null;
+    this.mmapDisabled = false;
+    if (clientMmap != null) {
+      clientMmap.unref();
+      clientMmap = null;
+    }
+
+  @Override
+  public boolean readZeroCopy(HdfsZeroCopyCursor cursor,
+        LocatedBlock curBlock, long blockPos, int toRead,
+        ClientMmapManager mmapManager) {
+    if (clientMmap == null) {
+      if (mmapDisabled) {
+        return false;
+      }
+      try {
+        clientMmap = mmapManager.fetch(datanodeID, block, dataIn);
+        if (clientMmap == null) {
+          mmapDisabled = true;
+          return false;
+        }
+      } catch (InterruptedException e) {
+        LOG.error("Interrupted while setting up mmap for " + filename, e);
+        Thread.currentThread().interrupt();
+        return false;
+      } catch (IOException e) {
+        LOG.error("unable to set up mmap for " + filename, e);
+        mmapDisabled = true;
+        return false;
+      }
+    }
+    long limit = blockPos + toRead;
+    if (limit > Integer.MAX_VALUE) {
+      /*
+       * In Java, ByteBuffers use a 32-bit length, capacity, offset, etc.
+       * This limits our mmap'ed regions to 2 GB in length.
+       * TODO: we can implement zero-copy for larger blocks by doing multiple
+       * mmaps.
+       */
+      mmapDisabled = true;
+      clientMmap.unref();
+      clientMmap = null;
+      return false;
+    }
+    ByteBuffer mmapBuffer = clientMmap.getMappedByteBuffer().duplicate();
+    mmapBuffer.position((int)blockPos);
+    mmapBuffer.limit((int)limit);
+    cursor.setMmap(clientMmap, mmapBuffer);
+    return true;
+  }
