HDFS-10923. Make InstrumentedLock require ReentrantLock.

- * whether a specifc lock is being held for too long and periodically
+ * whether a specific lock is being held for too long and periodically
-public class InstrumentedLock implements Lock {
+public class InstrumentedReentrantLock implements Lock {
-  private final Lock lock;
+  @VisibleForTesting
+  final ReentrantLock lock;
-  public InstrumentedLock(String name, Log logger, long minLoggingGapMs,
+  public InstrumentedReentrantLock(
+      String name, Log logger, long minLoggingGapMs,
-  public InstrumentedLock(String name, Log logger, Lock lock,
+  public InstrumentedReentrantLock(
+      String name, Log logger, ReentrantLock lock,
-  InstrumentedLock(String name, Log logger, Lock lock,
+  InstrumentedReentrantLock(
+      String name, Log logger, ReentrantLock lock,
-    lockAcquireTimestamp = clock.monotonicNow();
+    if (lock.getHoldCount() == 1) {
+      lockAcquireTimestamp = clock.monotonicNow();
+    }
-    lockAcquireTimestamp = clock.monotonicNow();
+    if (lock.getHoldCount() == 1) {
+      lockAcquireTimestamp = clock.monotonicNow();
+    }
-    if (lock.tryLock()) {
+    if (lock.tryLock() && lock.getHoldCount() == 1) {
-    if (lock.tryLock(time, unit)) {
+    if (lock.tryLock(time, unit) && lock.getHoldCount() == 1) {
+    final boolean needReport = (lock.getHoldCount() == 1);
-    check(localLockAcquireTime, localLockReleaseTime);
+    if (needReport) {
+      check(localLockAcquireTime, localLockReleaseTime);
+    }
-
