New parameter of CLI for decommissioning node gracefully in RMAdmin CLI. Contributed by Devaraj K

+import org.apache.hadoop.yarn.api.records.DecommissionType;
+import org.apache.hadoop.yarn.proto.YarnServerResourceManagerServiceProtos.DecommissionTypeProto;
+import org.apache.hadoop.yarn.proto.YarnServerResourceManagerServiceProtos.RefreshNodesRequestProtoOrBuilder;
-  
+  private DecommissionType decommissionType;
+
-  public RefreshNodesRequestProto getProto() {
+  public synchronized RefreshNodesRequestProto getProto() {
+    mergeLocalToProto();
+  private synchronized void mergeLocalToProto() {
+    if (viaProto)
+      maybeInitBuilder();
+    mergeLocalToBuilder();
+    proto = builder.build();
+    viaProto = true;
+  }
+
+  private void mergeLocalToBuilder() {
+    if (this.decommissionType != null) {
+      builder.setDecommissionType(convertToProtoFormat(this.decommissionType));
+    }
+  }
+
+  private synchronized void maybeInitBuilder() {
+    if (viaProto || builder == null) {
+      builder = RefreshNodesRequestProto.newBuilder(proto);
+    }
+    viaProto = false;
+  }
+
+
+  @Override
+  public synchronized void setDecommissionType(
+      DecommissionType decommissionType) {
+    maybeInitBuilder();
+    this.decommissionType = decommissionType;
+    mergeLocalToBuilder();
+  }
+
+  @Override
+  public synchronized DecommissionType getDecommissionType() {
+    RefreshNodesRequestProtoOrBuilder p = viaProto ? proto : builder;
+    return convertFromProtoFormat(p.getDecommissionType());
+  }
+
+  private DecommissionType convertFromProtoFormat(DecommissionTypeProto p) {
+    return DecommissionType.valueOf(p.name());
+  }
+
+  private DecommissionTypeProto convertToProtoFormat(DecommissionType t) {
+    return DecommissionTypeProto.valueOf(t.name());
+  }
