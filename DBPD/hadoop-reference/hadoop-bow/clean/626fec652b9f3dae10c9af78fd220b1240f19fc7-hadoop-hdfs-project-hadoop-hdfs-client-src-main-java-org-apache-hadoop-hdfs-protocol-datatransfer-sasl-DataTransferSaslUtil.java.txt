HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.

+import org.apache.hadoop.hdfs.protocol.proto.DataTransferProtos.HandshakeSecretProto;
+  static class SaslMessageWithHandshake {
+    private final byte[] payload;
+    private final byte[] secret;
+    private final String bpid;
+
+    SaslMessageWithHandshake(byte[] payload, byte[] secret, String bpid) {
+      this.payload = payload;
+      this.secret = secret;
+      this.bpid = bpid;
+    }
+
+    byte[] getPayload() {
+      return payload;
+    }
+
+    byte[] getSecret() {
+      return secret;
+    }
+
+    String getBpid() {
+      return bpid;
+    }
+  }
+
+  public static SaslMessageWithHandshake readSaslMessageWithHandshakeSecret(
+      InputStream in) throws IOException {
+    DataTransferEncryptorMessageProto proto =
+        DataTransferEncryptorMessageProto.parseFrom(vintPrefixed(in));
+    if (proto.getStatus() == DataTransferEncryptorStatus.ERROR_UNKNOWN_KEY) {
+      throw new InvalidEncryptionKeyException(proto.getMessage());
+    } else if (proto.getStatus() == DataTransferEncryptorStatus.ERROR) {
+      throw new IOException(proto.getMessage());
+    } else {
+      byte[] payload = proto.getPayload().toByteArray();
+      byte[] secret = null;
+      String bpid = null;
+      if (proto.hasHandshakeSecret()) {
+        HandshakeSecretProto handshakeSecret = proto.getHandshakeSecret();
+        secret = handshakeSecret.getSecret().toByteArray();
+        bpid = handshakeSecret.getBpid();
+      }
+      return new SaslMessageWithHandshake(payload, secret, bpid);
+    }
+  }
+
+  public static void sendSaslMessageHandshakeSecret(OutputStream out,
+      byte[] payload, byte[] secret, String bpid) throws IOException {
+    sendSaslMessageHandshakeSecret(out, DataTransferEncryptorStatus.SUCCESS,
+        payload, null, secret, bpid);
+  }
+
+    sendSaslMessage(out, status, payload, message, null);
+  }
+
+  public static void sendSaslMessage(OutputStream out,
+      DataTransferEncryptorStatus status, byte[] payload, String message,
+      HandshakeSecretProto handshakeSecret)
+      throws IOException {
+    if (handshakeSecret != null) {
+      builder.setHandshakeSecret(handshakeSecret);
+    }
+  public static void sendSaslMessageHandshakeSecret(OutputStream out,
+      DataTransferEncryptorStatus status, byte[] payload, String message,
+      byte[] secret, String bpid) throws IOException {
+    HandshakeSecretProto.Builder builder =
+        HandshakeSecretProto.newBuilder();
+    builder.setSecret(ByteString.copyFrom(secret));
+    builder.setBpid(bpid);
+    sendSaslMessage(out, status, payload, message, builder.build());
+  }
+
