HDFS-4706. Do not replace root inode for disallowSnapshot.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1469122 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-import java.util.Iterator;
+import com.google.common.base.Preconditions;
+
-  private final AtomicInteger numSnapshottableDirs = new AtomicInteger();
-  private final List<INodeDirectorySnapshottable> snapshottables
-      = new ArrayList<INodeDirectorySnapshottable>();
+  private final Map<Long, INodeDirectorySnapshottable> snapshottables
+      = new HashMap<Long, INodeDirectorySnapshottable>();
+
+    final INodeDirectorySnapshottable s;
-      ((INodeDirectorySnapshottable)d).setSnapshotQuota(
-          INodeDirectorySnapshottable.SNAPSHOT_LIMIT);
-      return;
+      s = (INodeDirectorySnapshottable)d; 
+      s.setSnapshotQuota(INodeDirectorySnapshottable.SNAPSHOT_LIMIT);
+    } else {
+      s = d.replaceSelf4INodeDirectorySnapshottable(iip.getLatestSnapshot());
-
-    final INodeDirectorySnapshottable s
-        = d.replaceSelf4INodeDirectorySnapshottable(iip.getLatestSnapshot());
-    snapshottables.add(s);
-    numSnapshottableDirs.getAndIncrement();
+    addSnapshottable(s);
-  /**
-   * Add a snapshottable dir into {@link #snapshottables}. Called when loading
-   * fsimage.
-   * @param dir The snapshottable dir to be added.
-   */
+  /** Add the given snapshottable directory to {@link #snapshottables}. */
-    snapshottables.add(dir);
+    snapshottables.put(dir.getId(), dir);
+  }
+
+  /** Remove the given snapshottable directory from {@link #snapshottables}. */
+  private void removeSnapshottable(INodeDirectorySnapshottable s) {
+    final INodeDirectorySnapshottable removed = snapshottables.remove(s.getId());
+    Preconditions.checkState(s == removed);
+  }
+  
+  /** Remove snapshottable directories from {@link #snapshottables} */
+  public void removeSnapshottable(List<INodeDirectorySnapshottable> toRemove) {
+    if (toRemove != null) {
+      for (INodeDirectorySnapshottable s : toRemove) {
+        removeSnapshottable(s);
+      }
+    }
-  public void resetSnapshottable(final String path
-      ) throws IOException {
+  public void resetSnapshottable(final String path) throws IOException {
-    s.replaceSelf(iip.getLatestSnapshot());
-    snapshottables.remove(s);
-
-    numSnapshottableDirs.getAndDecrement();
+    if (s == fsdir.getRoot()) {
+      s.setSnapshotQuota(0); 
+    } else {
+      s.replaceSelf(iip.getLatestSnapshot());
+    }
+    removeSnapshottable(s);
-  public long getNumSnapshottableDirs() {
-    return numSnapshottableDirs.get();
+  public int getNumSnapshottableDirs() {
+    return snapshottables.size();
-  public long getNumSnapshots() {
+  public int getNumSnapshots() {
-    out.writeInt(numSnapshottableDirs.get());
-    for(INodeDirectorySnapshottable snapshottableDir : snapshottables) {
+    for(INodeDirectorySnapshottable snapshottableDir : snapshottables.values()) {
-    numSnapshottableDirs.set(in.readInt());
-    for (INodeDirectorySnapshottable dir : snapshottables) {
+    for (INodeDirectorySnapshottable dir : snapshottables.values()) {
-    return statusList.toArray(new SnapshottableDirectoryStatus[statusList
-        .size()]);
-  }
-  
-  /**
-   * Remove snapshottable directories from {@link #snapshottables}
-   * @param toRemoveList A list of INodeDirectorySnapshottable to be removed
-   */
-  public void removeSnapshottableDirs(
-      List<INodeDirectorySnapshottable> toRemoveList) {
-    if (toRemoveList != null) {
-      Iterator<INodeDirectorySnapshottable> iter = snapshottables.iterator();
-      while (iter.hasNext()) {
-        INodeDirectorySnapshottable next = iter.next();
-        for (INodeDirectorySnapshottable toRemove : toRemoveList) {
-          if (next == toRemove) {
-            iter.remove();
-            break;
-          }
-        }
-      }
-      // modify the numSnapshottableDirs metrics
-      numSnapshottableDirs.addAndGet(-toRemoveList.size());
-    }
+    Collections.sort(statusList);
+    return statusList.toArray(
+        new SnapshottableDirectoryStatus[statusList.size()]);
