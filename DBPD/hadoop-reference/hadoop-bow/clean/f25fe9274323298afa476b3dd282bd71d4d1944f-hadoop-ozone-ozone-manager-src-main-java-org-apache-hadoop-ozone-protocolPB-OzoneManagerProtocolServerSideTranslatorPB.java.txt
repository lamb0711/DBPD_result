HDDS-1909. Use new HA code for Non-HA in OM. (#1225)


+import com.google.common.base.Preconditions;
+import org.apache.hadoop.ozone.om.response.OMClientResponse;
+import org.apache.ratis.util.ExitUtils;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicLong;
+  private final AtomicLong transactionIndex = new AtomicLong(0L);
-            if (omClientRequest != null) {
-              request = omClientRequest.preExecute(ozoneManager);
-            }
+            Preconditions.checkState(omClientRequest != null,
+                "Unrecognized write command type request" + request.toString());
+            request = omClientRequest.preExecute(ozoneManager);
-
-    switch (cmdType) {
-    case CreateBucket:
-      OMResponse.Builder omResponse = OMResponse.newBuilder()
-          .setStatus(
-              OzoneManagerRatisUtils.exceptionToResponseStatus(exception))
-          .setCmdType(cmdType)
-          .setSuccess(false);
-      if (exception.getMessage() != null) {
-        omResponse.setMessage(exception.getMessage());
-      }
-      return omResponse.build();
-    case DeleteBucket:
-    case SetBucketProperty:
-      // In these cases, we can return null. As this method is called when
-      // some error occurred in preExecute. For these request types
-      // preExecute is do nothing.
-      return null;
-    default:
-      // We shall never come here.
-      return null;
+    // Added all write command types here, because in future if any of the
+    // preExecute is changed to return IOException, we can return the error
+    // OMResponse to the client.
+    OMResponse.Builder omResponse = OMResponse.newBuilder()
+        .setStatus(
+            OzoneManagerRatisUtils.exceptionToResponseStatus(exception))
+        .setCmdType(cmdType)
+        .setSuccess(false);
+    if (exception.getMessage() != null) {
+      omResponse.setMessage(exception.getMessage());
+    return omResponse.build();
-    return handler.handle(request);
+    OMClientResponse omClientResponse = null;
+    long index = 0L;
+    try {
+      if (OmUtils.isReadOnly(request)) {
+        return handler.handle(request);
+      } else {
+        OMClientRequest omClientRequest =
+            OzoneManagerRatisUtils.createClientRequest(request);
+        Preconditions.checkState(omClientRequest != null,
+            "Unrecognized write command type request" + request.toString());
+        request = omClientRequest.preExecute(ozoneManager);
+        index = transactionIndex.incrementAndGet();
+        omClientRequest = OzoneManagerRatisUtils.createClientRequest(request);
+        omClientResponse = omClientRequest.validateAndUpdateCache(
+            ozoneManager, index, ozoneManagerDoubleBuffer::add);
+      }
+    } catch(IOException ex) {
+      // As some of the preExecute returns error. So handle here.
+      return createErrorResponse(request, ex);
+    }
+    try {
+      omClientResponse.getFlushFuture().get();
+      LOG.trace("Future for {} is completed", request);
+    } catch (ExecutionException | InterruptedException ex) {
+      // terminate OM. As if we are in this stage means, while getting
+      // response from flush future, we got an exception.
+      String errorMessage = "Got error during waiting for flush to be " +
+          "completed for " + "request" + request.toString();
+      ExitUtils.terminate(1, errorMessage, ex, LOG);
+    }
+    return omClientResponse.getOMResponse();
