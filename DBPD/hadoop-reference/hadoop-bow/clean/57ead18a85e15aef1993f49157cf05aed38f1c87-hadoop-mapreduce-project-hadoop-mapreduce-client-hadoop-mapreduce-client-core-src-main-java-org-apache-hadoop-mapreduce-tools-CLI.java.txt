MAPREDUCE-6110. JobHistoryServer CLI throws NullPointerException with job ids that do not exist. (Kai Sasaki via gtcarrera9)

-        listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);
-        exitCode = 0;
+        Job job = getJob(JobID.forName(jobid));
+        if (job == null) {
+          System.out.println("Could not find job " + jobid);
+        } else {
+          listEvents(job, fromEvent, nEvents);
+          exitCode = 0;
+        }
-        displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);
-        exitCode = 0;
+        Job job = getJob(JobID.forName(jobid));
+        if (job == null) {
+          System.out.println("Could not find job " + jobid);
+        } else {
+          displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);
+          exitCode = 0;
+        }
-        try {
-        TaskAttemptID taskAttemptID = TaskAttemptID.forName(taskid);
-        LogParams logParams = cluster.getLogParams(jobID, taskAttemptID);
-        LogCLIHelpers logDumper = new LogCLIHelpers();
-        logDumper.setConf(getConf());
-        exitCode = logDumper.dumpAContainersLogs(logParams.getApplicationId(),
-            logParams.getContainerId(), logParams.getNodeId(),
-            logParams.getOwner());
-        } catch (IOException e) {
-          if (e instanceof RemoteException) {
-            throw e;
-          } 
-          System.out.println(e.getMessage());
+        if (getJob(jobID) == null) {
+          System.out.println("Could not find job " + jobid);
+        } else {
+          try {
+            TaskAttemptID taskAttemptID = TaskAttemptID.forName(taskid);
+            LogParams logParams = cluster.getLogParams(jobID, taskAttemptID);
+            LogCLIHelpers logDumper = new LogCLIHelpers();
+            logDumper.setConf(getConf());
+            exitCode = logDumper.dumpAContainersLogs(
+                    logParams.getApplicationId(), logParams.getContainerId(),
+                    logParams.getNodeId(), logParams.getOwner());
+          } catch (IOException e) {
+            if (e instanceof RemoteException) {
+              throw e;
+            }
+            System.out.println(e.getMessage());
+          }
