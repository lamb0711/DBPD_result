HADOOP-14154 Persist isAuthoritative bit in DynamoDBMetaStore (Contributed by Gabor Bota)

+import java.util.List;
+import java.util.stream.Collectors;
+  static final String IS_AUTHORITATIVE = "is_authoritative";
-   * Converts a DynamoDB item to a {@link PathMetadata}.
+   * Converts a DynamoDB item to a {@link DDBPathMetadata}.
-   * @return {@code item} converted to a {@link PathMetadata}
+   * @return {@code item} converted to a {@link DDBPathMetadata}
-  static PathMetadata itemToPathMetadata(Item item, String username)
+  static DDBPathMetadata itemToPathMetadata(Item item, String username)
+      throws IOException {
+    return itemToPathMetadata(item, username, false);
+  }
+
+  /**
+   * Converts a DynamoDB item to a {@link DDBPathMetadata}.
+   * Can ignore {@code IS_AUTHORITATIVE} flag if {@code ignoreIsAuthFlag} is
+   * true.
+   *
+   * @param item DynamoDB item to convert
+   * @param ignoreIsAuthFlag if true, ignore the authoritative flag on item
+   * @return {@code item} converted to a {@link DDBPathMetadata}
+   */
+  static DDBPathMetadata itemToPathMetadata(Item item, String username,
+      boolean ignoreIsAuthFlag)
+    boolean isAuthoritativeDir = false;
+      if (!ignoreIsAuthFlag) {
+        isAuthoritativeDir = item.hasAttribute(IS_AUTHORITATIVE)
+            && item.getBoolean(IS_AUTHORITATIVE);
+      }
-    return new PathMetadata(fileStatus, Tristate.UNKNOWN, isDeleted);
+    return new DDBPathMetadata(fileStatus, Tristate.UNKNOWN, isDeleted,
+        isAuthoritativeDir);
-   * Converts a {@link PathMetadata} to a DynamoDB item.
+   * Converts a {@link DDBPathMetadata} to a DynamoDB item.
-   * @param meta {@link PathMetadata} to convert
+   * @param meta {@link DDBPathMetadata} to convert
-  static Item pathMetadataToItem(PathMetadata meta) {
+  static Item pathMetadataToItem(DDBPathMetadata meta) {
+    return pathMetadataToItem(meta, false);
+  }
+
+  /**
+   * Converts a {@link DDBPathMetadata} to a DynamoDB item.
+   *
+   * Can ignore {@code IS_AUTHORITATIVE} flag if {@code ignoreIsAuthFlag} is
+   * true.
+   *
+   * @param meta {@link DDBPathMetadata} to convert
+   * @param ignoreIsAuthFlag if true, ignore the authoritative flag on item
+   * @return {@code meta} converted to DynamoDB item
+   */
+  static Item pathMetadataToItem(DDBPathMetadata meta,
+      boolean ignoreIsAuthFlag) {
+      if (!ignoreIsAuthFlag) {
+        item.withBoolean(IS_AUTHORITATIVE, meta.isAuthoritativeDir());
+      }
-   * Converts a collection {@link PathMetadata} to a collection DynamoDB items.
+   * Converts a collection {@link DDBPathMetadata} to a collection DynamoDB
+   * items.
-   * @see #pathMetadataToItem(PathMetadata)
+   * @see #pathMetadataToItem(DDBPathMetadata)
-  static Item[] pathMetadataToItem(Collection<PathMetadata> metas) {
+  static Item[] pathMetadataToItem(Collection<DDBPathMetadata> metas) {
-    for (PathMetadata meta : metas) {
+    for (DDBPathMetadata meta : metas) {
+  static List<DDBPathMetadata> pathMetaToDDBPathMeta(
+      Collection<PathMetadata> pathMetadatas) {
+    return pathMetadatas.stream().map(p -> new DDBPathMetadata(p))
+        .collect(Collectors.toList());
+  }
+
