HDDS-935. Avoid creating an already created container on a datanode in case of disk removal followed by datanode restart. Contributed by Shashikant Banerjee.

+import java.util.Set;
-
+  public void buildMissingContainerSet(Set<Long> createdContainerSet) {
+    containerSet.buildMissingContainerSet(createdContainerSet);
+  }
+
+  @SuppressWarnings("methodlength")
+  @Override
-    Container container = null;
-    ContainerType containerType = null;
+    Container container;
+    ContainerType containerType;
+    container = getContainer(containerID);
+    boolean isWriteStage =
+        (cmdType == ContainerProtos.Type.WriteChunk && dispatcherContext != null
+            && dispatcherContext.getStage()
+            == DispatcherContext.WriteChunkStage.WRITE_DATA);
+    boolean isWriteCommitStage =
+        (cmdType == ContainerProtos.Type.WriteChunk && dispatcherContext != null
+            && dispatcherContext.getStage()
+            == DispatcherContext.WriteChunkStage.COMMIT_DATA);
+
+    // if the command gets executed other than Ratis, the default wroite stage
+    // is WriteChunkStage.COMBINED
+    boolean isCombinedStage =
+        cmdType == ContainerProtos.Type.WriteChunk && (dispatcherContext == null
+            || dispatcherContext.getStage()
+            == DispatcherContext.WriteChunkStage.COMBINED);
+    Set<Long> containerIdSet = null;
+    if (dispatcherContext != null) {
+      containerIdSet = dispatcherContext.getCreateContainerSet();
+    }
+    if (isWriteCommitStage) {
+      //  check if the container Id exist in the loaded snapshot file. if
+      // it does not , it infers that , this is a restart of dn where
+      // the we are reapplying the transaction which was not captured in the
+      // snapshot.
+      // just add it to the list, and remove it from missing container set
+      // as it might have been added in the list during "init".
+      Preconditions.checkNotNull(containerIdSet);
+      if (!containerIdSet.contains(containerID)) {
+        containerIdSet.add(containerID);
+        containerSet.getMissingContainerSet().remove(containerID);
+      }
+    }
+    if (getMissingContainerSet().contains(containerID)) {
+      StorageContainerException sce = new StorageContainerException(
+          "ContainerID " + containerID
+              + " has been lost and and cannot be recreated on this DataNode",
+          ContainerProtos.Result.CONTAINER_MISSING);
+      audit(action, eventType, params, AuditEventStatus.FAILURE, sce);
+      return ContainerUtils.logAndReturnError(LOG, sce, msg);
+    }
-      container = getContainer(containerID);
-
-      if (container == null && (cmdType == ContainerProtos.Type.WriteChunk
+      /**
+       * Create Container should happen only as part of Write_Data phase of
+       * writeChunk.
+       */
+      if (container == null && ((isWriteStage || isCombinedStage)
-
+        Preconditions.checkArgument(isWriteStage && containerIdSet != null
+            || dispatcherContext == null);
+        if (containerIdSet != null) {
+          // adds this container to list of containers created in the pipeline
+          containerIdSet.add(containerID);
+        }
+  @VisibleForTesting
+  public Set<Long> getMissingContainerSet() {
+    return containerSet.getMissingContainerSet();
+  }
+
