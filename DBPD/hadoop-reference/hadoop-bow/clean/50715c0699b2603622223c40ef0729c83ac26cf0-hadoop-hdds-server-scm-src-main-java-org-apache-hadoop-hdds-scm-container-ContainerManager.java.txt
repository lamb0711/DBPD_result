HDDS-662. Introduce ContainerReplicaState in StorageContainerManager. Contributed by Nanda kumar.

-import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerInfo;
+import java.util.Set;
+// TODO: Write extensive java doc.
+// This is the main interface of ContainerManager.
+
+  /**
+   * Returns all the containers managed by ContainerManager.
+   *
+   * @return List of ContainerInfo
+   */
+  List<ContainerInfo> getContainers();
+
+  /**
+   * Returns all the containers which are in the specified state.
+   *
+   * @return List of ContainerInfo
+   */
+  List<ContainerInfo> getContainers(HddsProtos.LifeCycleState state);
+
-  ContainerInfo getContainer(long containerID) throws IOException;
+  ContainerInfo getContainer(ContainerID containerID)
+      throws ContainerNotFoundException;
-  ContainerWithPipeline getContainerWithPipeline(long containerID)
-      throws IOException;
+  ContainerWithPipeline getContainerWithPipeline(ContainerID containerID)
+      throws ContainerNotFoundException;
-  List<ContainerInfo> listContainer(long startContainerID, int count)
-      throws IOException;
+  List<ContainerInfo> listContainer(ContainerID startContainerID, int count);
-  void deleteContainer(long containerID) throws IOException;
+  void deleteContainer(ContainerID containerID) throws IOException;
-  HddsProtos.LifeCycleState updateContainerState(long containerID,
+  HddsProtos.LifeCycleState updateContainerState(ContainerID containerID,
-   * Returns the container State Manager.
-   * @return ContainerStateManager
-   */
-  ContainerStateManager getStateManager();
-
-  /**
-      ContainerReportsProto reports, boolean isRegisterCall)
-      throws IOException;
+      ContainerReportsProto reports) throws IOException;
+
+  /**
+   * Returns the latest list of replicas for given containerId.
+   *
+   * @param containerID Container ID
+   * @return Set of ContainerReplica
+   */
+  Set<ContainerReplica> getContainerReplicas(ContainerID containerID)
+      throws ContainerNotFoundException;
+
+  /**
+   * Adds a container Replica for the given Container.
+   *
+   * @param containerID Container ID
+   * @param replica ContainerReplica
+   */
+  void updateContainerReplica(ContainerID containerID, ContainerReplica replica)
+      throws ContainerNotFoundException;
+
+  /**
+   * Remove a container Replica form a given Container.
+   *
+   * @param containerID Container ID
+   * @param replica ContainerReplica
+   * @return True of dataNode is removed successfully else false.
+   */
+  void removeContainerReplica(ContainerID containerID, ContainerReplica replica)
+      throws ContainerNotFoundException, ContainerReplicaNotFoundException;
