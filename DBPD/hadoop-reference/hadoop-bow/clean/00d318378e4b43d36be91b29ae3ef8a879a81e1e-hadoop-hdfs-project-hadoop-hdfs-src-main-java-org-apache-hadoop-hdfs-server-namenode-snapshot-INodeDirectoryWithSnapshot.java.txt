HDFS-4397. Fix a bug in INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) that it may put the wrong node into the deleted list.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433293 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.INodeFile;
-   *   1.1.3. create i in current and then modify: replace it in c-list  (c, 0)
+   *   1.1.3. create i in current and then modify: replace it in c-list (c', 0)
-   *   2.3.3. modify i in current and then modify: replace it in c-list  (c, d)
+   *   2.3.3. modify i in current and then modify: replace it in c-list (c', d)
-        // Case 1.1.3: inode is already in c-list,
+        // Case 1.1.3 and 2.3.3: inode is already in c-list,
+        
+        //TODO: fix a bug that previous != oldinode.  Set it to oldinode for now
+        previous = oldinode;
-     * @param collectedBlocks Used in case 2.3, 3.1, and 3.3 to collect 
-     *                        information for blocksMap update
+     * @param deletedINodeProcesser Used in case 2.1, 2.3, 3.1, and 3.3
+     *                              to process the deleted inodes.
-    void combinePostDiff(Diff postDiff, BlocksMapUpdateInfo collectedBlocks) {
+    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {
-        INode node = postDiff.created.remove(postDiff.created.size() - 1);
-        int deletedIndex = search(postDiff.deleted, node);
+        final INode c = postDiff.created.remove(postDiff.created.size() - 1);
+        final int deletedIndex = search(postDiff.deleted, c);
-          // for case 1
-          create(node);
+          // case 1
+          create(c);
+          final INode d = postDiff.deleted.remove(deletedIndex);
-          int createdIndex = search(created, node);
-          if (createdIndex < 0) {
-            // 3.4
-            create(node);
-            insertDeleted(node, search(deleted, node));
-          } else {
-            // 3.1 and 3.3
-            created.set(createdIndex, node);
-            // for 3.1 and 3.3, if the node is an INodeFileWithLink, need to
-            // remove d in the posterior diff from the circular list, also do
-            // possible block deletion and blocksMap updating
-            INode dInPost = postDiff.deleted.get(deletedIndex);
-            if (dInPost instanceof INodeFileWithLink) {
-              // dInPost must be an INodeFileWithLink
-              ((INodeFileWithLink) dInPost)
-                  .collectSubtreeBlocksAndClear(collectedBlocks);
-            }
+          final Triple<Integer, INode, Integer> triple = modify(d, c);
+          if (deletedINodeProcesser != null) {
+            deletedINodeProcesser.process(triple.middle);
-          // also remove the inode from the deleted list
-          postDiff.deleted.remove(deletedIndex);
-        // for 2.3, if the node is an INodeFileWithLink, need to remove c' from
-        // the circular list
-        INode cInCurrent = triple.middle;
-        if (cInCurrent instanceof INodeFileWithLink) {
-          ((INodeFileWithLink) cInCurrent)
-              .collectSubtreeBlocksAndClear(collectedBlocks);
+        if (deletedINodeProcesser != null) {
+          deletedINodeProcesser.process(triple.middle);
-            final ReadOnlyList<INode> posterior = posteriorDiff != null?
-                posteriorDiff.getChildrenList()
-                : INodeDirectoryWithSnapshot.this.getChildrenList(null);
-            children = diff.apply2Current(ReadOnlyList.Util.asList(posterior));
+            final Diff combined = new Diff();
+            for(SnapshotDiff d = SnapshotDiff.this; d != null; d = d.posteriorDiff) {
+              combined.combinePostDiff(d.diff, null);
+            }
+            children = combined.apply2Current(ReadOnlyList.Util.asList(
+                INodeDirectoryWithSnapshot.this.getChildrenList(null)));
+  /** An interface for passing a method to process inodes. */
+  static interface Processor {
+    /** Process the given inode. */
+    void process(INode inode);
+  }
+
-      BlocksMapUpdateInfo collectedBlocks) {
+      final BlocksMapUpdateInfo collectedBlocks) {
-        previousDiff.diff.combinePostDiff(diffToRemove.diff, collectedBlocks);
+        previousDiff.diff.combinePostDiff(diffToRemove.diff, new Processor() {
+          /** Collect blocks for deleted files. */
+          @Override
+          public void process(INode inode) {
+            if (inode != null && inode instanceof INodeFile) {
+              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);
+            }
+          }
+        });
+
