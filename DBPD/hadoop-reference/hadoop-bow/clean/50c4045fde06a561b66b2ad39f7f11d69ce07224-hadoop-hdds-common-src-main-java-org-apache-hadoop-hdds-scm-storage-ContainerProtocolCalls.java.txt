HDDS-805. Block token: Client api changes for block token. Contributed by Ajay Kumar.

+import org.apache.hadoop.hdds.security.token.OzoneBlockTokenIdentifier;
+import org.apache.hadoop.hdds.security.token.OzoneBlockTokenSelector;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.token.Token;
-    ContainerCommandRequestProto request = ContainerCommandRequestProto
+    ContainerCommandRequestProto.Builder builder = ContainerCommandRequestProto
-        .setGetBlock(readBlockRequest)
-        .build();
+        .setGetBlock(readBlockRequest);
+    String encodedToken = getEncodedBlockToken(getService(datanodeBlockID));
+    if (encodedToken != null) {
+      builder.setEncodedToken(encodedToken);
+    }
+
+    ContainerCommandRequestProto request = builder.build();
-    ContainerCommandRequestProto request =
+    ContainerCommandRequestProto.Builder builder =
-            .setGetCommittedBlockLength(getBlockLengthRequestBuilder).build();
+            .setGetCommittedBlockLength(getBlockLengthRequestBuilder);
+    String encodedToken = getEncodedBlockToken(new Text(blockID.
+        getContainerBlockID().toString()));
+    if (encodedToken != null) {
+      builder.setEncodedToken(encodedToken);
+    }
+    ContainerCommandRequestProto request = builder.build();
-    ContainerCommandRequestProto request =
+    ContainerCommandRequestProto.Builder builder =
-            .setPutBlock(createBlockRequest).build();
+            .setPutBlock(createBlockRequest);
+    String encodedToken =
+        getEncodedBlockToken(getService(containerBlockData.getBlockID()));
+    if (encodedToken != null) {
+      builder.setEncodedToken(encodedToken);
+    }
+    ContainerCommandRequestProto request = builder.build();
-    ContainerCommandRequestProto request =
+    ContainerCommandRequestProto.Builder builder =
-            .setPutBlock(createBlockRequest).build();
+            .setPutBlock(createBlockRequest);
+    String encodedToken =
+        getEncodedBlockToken(getService(containerBlockData.getBlockID()));
+    if (encodedToken != null) {
+      builder.setEncodedToken(encodedToken);
+    }
+    ContainerCommandRequestProto request = builder.build();
+    xceiverClient.sendCommand(request);
-        ChunkInfo chunk, BlockID blockID, String traceID) throws IOException {
+      ChunkInfo chunk, BlockID blockID, String traceID) throws IOException {
-    ContainerCommandRequestProto request = ContainerCommandRequestProto
+    ContainerCommandRequestProto.Builder builder = ContainerCommandRequestProto
-        .setReadChunk(readChunkRequest)
-        .build();
+        .setReadChunk(readChunkRequest);
+    String encodedToken = getEncodedBlockToken(new Text(blockID.
+        getContainerBlockID().toString()));
+    if (encodedToken != null) {
+      builder.setEncodedToken(encodedToken);
+    }
+    ContainerCommandRequestProto request = builder.build();
-    ContainerCommandRequestProto request = ContainerCommandRequestProto
+    ContainerCommandRequestProto.Builder builder = ContainerCommandRequestProto
-        .setWriteChunk(writeChunkRequest)
-        .build();
+        .setWriteChunk(writeChunkRequest);
+    String encodedToken = getEncodedBlockToken(new Text(blockID.
+        getContainerBlockID().toString()));
+    if (encodedToken != null) {
+      builder.setEncodedToken(encodedToken);
+    }
+    ContainerCommandRequestProto request = builder.build();
-    ContainerCommandRequestProto request =
+    ContainerCommandRequestProto.Builder builder =
-            .setDatanodeUuid(id).setWriteChunk(writeChunkRequest).build();
+            .setDatanodeUuid(id).setWriteChunk(writeChunkRequest);
+    String encodedToken = getEncodedBlockToken(new Text(blockID.
+        getContainerBlockID().toString()));
+    if (encodedToken != null) {
+      builder.setEncodedToken(encodedToken);
+    }
+    ContainerCommandRequestProto request = builder.build();
-      XceiverClientSpi client, BlockID blockID, byte[] data, String traceID)
-      throws IOException {
+      XceiverClientSpi client, BlockID blockID, byte[] data,
+      String traceID) throws IOException {
-    ContainerCommandRequestProto request =
+    ContainerCommandRequestProto.Builder builder =
-            .setPutSmallFile(putSmallFileRequest)
-            .build();
+            .setPutSmallFile(putSmallFileRequest);
+    String encodedToken = getEncodedBlockToken(new Text(blockID.
+        getContainerBlockID().toString()));
+    if (encodedToken != null) {
+      builder.setEncodedToken(encodedToken);
+    }
+    ContainerCommandRequestProto request = builder.build();
+   * @param encodedToken - encodedToken if security is enabled
-      String traceID) throws IOException {
+      String traceID, String encodedToken) throws IOException {
+    if (encodedToken != null) {
+      request.setEncodedToken(encodedToken);
+    }
+   * @param encodedToken - encodedToken if security is enabled
-      boolean force, String traceID) throws IOException {
+      boolean force, String traceID, String encodedToken) throws IOException {
+    if(encodedToken != null) {
+      request.setEncodedToken(encodedToken);
+    }
+   * @param encodedToken - encodedToken if security is enabled
-      long containerID, String traceID) throws IOException {
+      long containerID, String traceID, String encodedToken)
+      throws IOException {
+    if(encodedToken != null) {
+      request.setEncodedToken(encodedToken);
+    }
-   * @param client - client
-   * @param traceID - trace ID
+   * @param client       - client
+   * @param traceID      - trace ID
+   * @param encodedToken - encodedToken if security is enabled
-      String traceID) throws IOException {
+      String traceID, String encodedToken) throws IOException {
+    if(encodedToken != null) {
+      request.setEncodedToken(encodedToken);
+    }
-    ContainerCommandRequestProto request = ContainerCommandRequestProto
+    ContainerCommandRequestProto.Builder builder = ContainerCommandRequestProto
-        .setGetSmallFile(getSmallFileRequest)
-        .build();
+        .setGetSmallFile(getSmallFileRequest);
+    String encodedToken = getEncodedBlockToken(new Text(blockID.
+        getContainerBlockID().toString()));
+    if (encodedToken != null) {
+      builder.setEncodedToken(encodedToken);
+    }
+    ContainerCommandRequestProto request = builder.build();
+
+  /**
+   * Returns a url encoded block token. Service param should match the service
+   * field of token.
+   * @param service
+   *
+   * */
+  private static String getEncodedBlockToken(Text service)
+      throws IOException {
+    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
+    Token<OzoneBlockTokenIdentifier> token =
+        OzoneBlockTokenSelector.selectBlockToken(service, ugi.getTokens());
+    if (token != null) {
+      return token.encodeToUrlString();
+    }
+    return null;
+  }
+
+  private static Text getService(DatanodeBlockID blockId) {
+    return new Text(new StringBuffer()
+        .append("conID: ")
+        .append(blockId.getContainerID())
+        .append(" locID: ")
+        .append(blockId.getLocalID())
+        .toString());
+  }
