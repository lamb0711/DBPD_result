HADOOP-6903 Make AbstractFSileSystem methods and some FileContext methods to be public


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1034480 13f79535-47bb-0310-9956-ffa450edef68

-  protected Statistics getStatistics() {
+  public Statistics getStatistics() {
+  
+  @Override
+  public Path makeQualified(Path path) {
+    return myFs.makeQualified(path);
+  }
-  protected Path getInitialWorkingDirectory() {
+  public Path getInitialWorkingDirectory() {
-  protected Path getHomeDirectory() {
+  public Path getHomeDirectory() {
-  protected FSDataOutputStream createInternal(Path f,
+  public FSDataOutputStream createInternal(Path f,
-  protected boolean delete(Path f, boolean recursive) 
+  public boolean delete(Path f, boolean recursive) 
-  protected BlockLocation[] getFileBlockLocations(Path f, long start, long len)
+  public BlockLocation[] getFileBlockLocations(Path f, long start, long len)
-  protected FileChecksum getFileChecksum(Path f) 
+  public FileChecksum getFileChecksum(Path f) 
-  protected FileStatus getFileStatus(Path f) 
+  public FileStatus getFileStatus(Path f) 
-  protected FileStatus getFileLinkStatus(final Path f) 
+  public FileStatus getFileLinkStatus(final Path f) 
-  protected FsStatus getFsStatus(final Path f) throws AccessControlException,
+  public FsStatus getFsStatus(final Path f) throws AccessControlException,
-  protected FsStatus getFsStatus() throws IOException {
+  public FsStatus getFsStatus() throws IOException {
-  protected FsServerDefaults getServerDefaults() throws IOException {
+  public FsServerDefaults getServerDefaults() throws IOException {
-  protected int getUriDefaultPort() {
+  public int getUriDefaultPort() {
-  protected URI getUri() {
+  public URI getUri() {
-  protected void checkPath(Path path) {
+  public void checkPath(Path path) {
-  protected String getUriPath(final Path p) {
+  public String getUriPath(final Path p) {
-  protected FileStatus[] listStatus(Path f) 
+  public FileStatus[] listStatus(Path f) 
-  protected void mkdir(Path dir, FsPermission permission, boolean createParent)
+  public void mkdir(Path dir, FsPermission permission, boolean createParent)
-  protected FSDataInputStream open(final Path f) throws AccessControlException,
+  public FSDataInputStream open(final Path f) throws AccessControlException,
-  protected FSDataInputStream open(Path f, int bufferSize) 
+  public FSDataInputStream open(Path f, int bufferSize) 
-  protected void renameInternal(Path src, Path dst) 
+  public void renameInternal(Path src, Path dst) 
-  protected void renameInternal(final Path src, final Path dst,
+  public void renameInternal(final Path src, final Path dst,
-  protected void setOwner(Path f, String username, String groupname)
+  public void setOwner(Path f, String username, String groupname)
-  protected void setPermission(Path f, FsPermission permission)
+  public void setPermission(Path f, FsPermission permission)
-  protected boolean setReplication(Path f, short replication)
+  public boolean setReplication(Path f, short replication)
-  protected void setTimes(Path f, long mtime, long atime) 
+  public void setTimes(Path f, long mtime, long atime) 
-  protected void setVerifyChecksum(boolean verifyChecksum) 
+  public void setVerifyChecksum(boolean verifyChecksum) 
-  protected boolean supportsSymlinks() {
+  public boolean supportsSymlinks() {
-  protected void createSymlink(Path target, Path link, boolean createParent) 
+  public void createSymlink(Path target, Path link, boolean createParent) 
-  protected Path getLinkTarget(final Path f) throws IOException {
+  public Path getLinkTarget(final Path f) throws IOException {
