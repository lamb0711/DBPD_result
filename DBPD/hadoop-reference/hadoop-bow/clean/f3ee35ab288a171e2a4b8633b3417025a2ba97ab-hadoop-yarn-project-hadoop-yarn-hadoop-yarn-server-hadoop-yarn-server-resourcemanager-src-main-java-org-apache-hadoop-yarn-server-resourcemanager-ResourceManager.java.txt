Merge r1555021 through r1556550 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1556552 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStoreOperationFailedEvent;
-import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStoreOperationFailedEventType;
+  private Dispatcher rmDispatcher;
-  private Dispatcher rmDispatcher;
+  private AppReportFetcher fetcher = null;
+  private String webAppAddress;
+
+    rmDispatcher = createDispatcher();
+    addIfService(rmDispatcher);
+    rmContext.setDispatcher(rmDispatcher);
+
+    rmDispatcher.register(RMFatalEventType.class,
+        new ResourceManager.RMFatalEventDispatcher(this.rmContext, this));
+
+    webAppAddress = WebAppUtils.getRMWebAppURLWithoutScheme(conf);
+
-  protected RMStateStoreOperationFailedEventDispatcher
-      createRMStateStoreOperationFailedEventDispatcher() {
-    return new RMStateStoreOperationFailedEventDispatcher(rmContext, this);
-  }
-
-      rmDispatcher = createDispatcher();
-      addIfService(rmDispatcher);
-      rmContext.setDispatcher(rmDispatcher);
-
-        rmDispatcher.register(RMStateStoreOperationFailedEventType.class,
-            createRMStateStoreOperationFailedEventDispatcher());
-      startWepApp();
-
-      if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {
-        int port = webApp.port();
-        WebAppUtils.setRMWebAppPort(conf, port);
-      }
-      if (webApp != null) {
-        webApp.stop();
-      }
-
-  public static class RMStateStoreOperationFailedEventDispatcher implements
-      EventHandler<RMStateStoreOperationFailedEvent> {
-
+  public static class RMFatalEventDispatcher
+      implements EventHandler<RMFatalEvent> {
-    public RMStateStoreOperationFailedEventDispatcher(RMContext rmContext,
-        ResourceManager resourceManager) {
+    public RMFatalEventDispatcher(
+        RMContext rmContext, ResourceManager resourceManager) {
-    public void handle(RMStateStoreOperationFailedEvent event) {
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Received a " +
-            RMStateStoreOperationFailedEvent.class.getName() + " of type " +
-            event.getType().name());
-      }
-      if (event.getType() == RMStateStoreOperationFailedEventType.FENCED) {
+    public void handle(RMFatalEvent event) {
+      LOG.fatal("Received a " + RMFatalEvent.class.getName() + " of type " +
+          event.getType().name());
+
+      if (event.getType() == RMFatalEventType.STATE_STORE_FENCED) {
-            LOG.error("Failed to transition RM to Standby mode.");
+            LOG.fatal("Failed to transition RM to Standby mode.");
-      LOG.error("Shutting down RM on receiving a " +
-          RMStateStoreOperationFailedEvent.class.getName() + " of type " +
-          event.getType().name());
-            .at(WebAppUtils.getRMWebAppURLWithoutScheme(conf)); 
+            .at(webAppAddress);
-      AppReportFetcher fetcher = new AppReportFetcher(conf, getClientRMService());
-      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, 
+      if (HAUtil.isHAEnabled(conf)) {
+        fetcher = new AppReportFetcher(conf);
+      } else {
+        fetcher = new AppReportFetcher(conf, getClientRMService());
+      }
+      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,
+    startWepApp();
+    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {
+      int port = webApp.port();
+      WebAppUtils.setRMWebAppPort(conf, port);
+    }
+    if (webApp != null) {
+      webApp.stop();
+    }
+    if (fetcher != null) {
+      fetcher.stop();
+    }
