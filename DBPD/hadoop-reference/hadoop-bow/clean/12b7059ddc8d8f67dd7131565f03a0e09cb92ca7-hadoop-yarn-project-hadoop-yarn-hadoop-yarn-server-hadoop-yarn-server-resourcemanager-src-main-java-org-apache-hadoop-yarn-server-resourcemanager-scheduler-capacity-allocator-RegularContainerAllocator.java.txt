YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.

+import java.util.Optional;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.activities.DiagnosticsCollector;
-import org.apache.hadoop.yarn.api.records.Priority;
-    Priority priority = schedulerKey.getPriority();
-
-          activitiesManager, node, application, priority,
+          activitiesManager, node, application, schedulerKey,
-          activitiesManager, node, application, priority,
+          activitiesManager, node, application, schedulerKey,
-            activitiesManager, node, application, priority,
+            activitiesManager, node, application, schedulerKey,
-    if (!appInfo.precheckNode(schedulerKey, node, schedulingMode)) {
+    Optional<DiagnosticsCollector> dcOpt = activitiesManager == null ?
+        Optional.empty() :
+        activitiesManager.getOptionalDiagnosticsCollector();
+    if (!appInfo.precheckNode(schedulerKey, node, schedulingMode, dcOpt)) {
-          activitiesManager, node, application, priority,
+          activitiesManager, node, application, schedulerKey,
-              PRIORITY_SKIPPED_BECAUSE_NODE_PARTITION_DOES_NOT_MATCH_REQUEST);
+              NODE_DO_NOT_MATCH_PARTITION_OR_PLACEMENT_CONSTRAINTS
+              + ActivitiesManager.getDiagnostics(dcOpt));
-            activitiesManager, node, application, priority,
+            activitiesManager, node, application, schedulerKey,
-          activitiesManager, node, application, priority,
+          activitiesManager, node, application, schedulerKey,
-          activitiesManager, node, application, priority,
+          activitiesManager, node, application, schedulerKey,
-            activitiesManager, node, application, priority,
+            activitiesManager, node, application, schedulerKey,
-    Priority priority = schedulerKey.getPriority();
-
-          activitiesManager, node, application, priority,
+          activitiesManager, node, application, schedulerKey,
-        activitiesManager, node, application, schedulerKey.getPriority(),
+        activitiesManager, node, application, schedulerKey,
-        activitiesManager, node, application, schedulerKey.getPriority(),
+        activitiesManager, node, application, schedulerKey,
-        activitiesManager, node, application, schedulerKey.getPriority(),
+        activitiesManager, node, application, schedulerKey,
-    Priority priority = schedulerKey.getPriority();
-
-            activitiesManager, node, application, priority,
+            activitiesManager, node, application, schedulerKey,
-            activitiesManager, node, application, priority,
+            activitiesManager, node, application, schedulerKey,
-        activitiesManager, node, application, priority,
+        activitiesManager, node, application, schedulerKey,
-    Priority priority = schedulerKey.getPriority();
-    if (!Resources.lessThanOrEqual(rc, clusterResource,
-        capability, totalResource)) {
+    if (!Resources.fitsIn(rc, capability, totalResource)) {
-          activitiesManager, node, application, priority,
-          ActivityDiagnosticConstant.NOT_SUFFICIENT_RESOURCE);
+          activitiesManager, node, application, schedulerKey,
+          ActivityDiagnosticConstant.NOT_SUFFICIENT_RESOURCE
+              + getResourceDiagnostics(capability, totalResource));
+    // available resource for diagnostics collector
+    Resource availableForDC = available;
+      availableForDC = availableAndKillable;
-                activitiesManager, node, application, priority,
-                ActivityDiagnosticConstant.LOCALITY_SKIPPED);
+                activitiesManager, node, application, schedulerKey,
+                ActivityDiagnosticConstant.
+                    NODE_CAN_NOT_FIND_CONTAINER_TO_BE_UNRESERVED_WHEN_NEEDED);
-                activitiesManager, node, application, priority,
-                ActivityDiagnosticConstant.LOCALITY_SKIPPED);
+                activitiesManager, node, application, schedulerKey,
+                ActivityDiagnosticConstant.NOT_SUFFICIENT_RESOURCE
+                    + getResourceDiagnostics(capability, availableForDC));
-          activitiesManager, node, application, priority,
-          ActivityDiagnosticConstant.LOCALITY_SKIPPED);
+          activitiesManager, node, application, schedulerKey,
+          ActivityDiagnosticConstant.NOT_SUFFICIENT_RESOURCE
+              + getResourceDiagnostics(capability, availableForDC));
-          node, application, schedulerKey.getPriority(),
+          node, application, schedulerKey,
-          node, application, schedulerKey.getPriority(),
+          node, application, schedulerKey,
-                  application, schedulerKey.getPriority(),
+                  application, schedulerKey,
+      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(
+          activitiesManager, null, application, schedulerKey,
+          ActivityDiagnosticConstant.
+              APPLICATION_PRIORITY_DO_NOT_NEED_RESOURCE);
-            activitiesManager, node, application, application.getPriority(),
+            activitiesManager, node, application, null,
-      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(
-          activitiesManager, node, application, application.getPriority(),
-          ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);
+
+  private String getResourceDiagnostics(Resource required, Resource available) {
+    if (activitiesManager == null) {
+      return ActivitiesManager.EMPTY_DIAGNOSTICS;
+    }
+    return activitiesManager.getResourceDiagnostics(rc, required, available);
+  }
