HDDS-1775. Make OM KeyDeletingService compatible with HA model (#1063)



+  private OzoneManagerProtocolServerSideTranslatorPB omServerProtocol;
+
+
-    keyManager = new KeyManagerImpl(scmClient, metadataManager,
-        configuration, omStorage.getOmId(), blockTokenMgr, getKmsProvider(),
-        prefixManager);
+    keyManager = new KeyManagerImpl(this, scmClient, configuration,
+        omStorage.getOmId());
+
+
+  public PrefixManager getPrefixManager() {
+    return prefixManager;
+  }
+
+  public OzoneBlockTokenSecretManager getBlockTokenMgr() {
+    return blockTokenMgr;
+  }
+
+  public OzoneManagerProtocolServerSideTranslatorPB getOmServerProtocol() {
+    return omServerProtocol;
+  }
+
-    BlockingService omService = newReflectiveBlockingService(
-        new OzoneManagerProtocolServerSideTranslatorPB(this, omRatisServer,
-            isRatisEnabled));
+    this.omServerProtocol = new OzoneManagerProtocolServerSideTranslatorPB(
+        this, omRatisServer, isRatisEnabled);
+
+    BlockingService omService = newReflectiveBlockingService(omServerProtocol);
+
+
+  /**
+   * Checks the Leader status of OM Ratis Server.
+   * Note that this status has a small window of error. It should not be used
+   * to determine the absolute leader status.
+   * If it is the leader, the role status is cached till Ratis server
+   * notifies of leader change. If it is not leader, the role information is
+   * retrieved through by submitting a GroupInfoRequest to Ratis server.
+   *
+   * If ratis is not enabled, then it always returns true.
+   *
+   * @return Return true if this node is the leader, false otherwsie.
+   */
+  public boolean isLeader() {
+    return isRatisEnabled ? omRatisServer.isLeader() : true;
+  }
+
+  /**
+   * Return if Ratis is enabled or not.
+   * @return
+   */
+  public boolean isRatisEnabled() {
+    return isRatisEnabled;
+  }
