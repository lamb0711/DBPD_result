commit correct version of HDFS-5121

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
+import org.apache.hadoop.hdfs.protocol.PathCacheDirective;
+import org.apache.hadoop.hdfs.protocol.PathCacheEntry;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddCachePoolRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.CachePoolInfoProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.CachePoolProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ModifyCachePoolRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathCacheDirectiveProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathCacheEntryProto;
+import org.apache.hadoop.hdfs.server.namenode.CachePool;
+  public static PathCacheDirective convert(
+      PathCacheDirectiveProto directiveProto) {
+    CachePool pool = convert(directiveProto.getPool());
+    return new PathCacheDirective(directiveProto.getPath(), pool.getId());
+  }
+
+  public static PathCacheDirectiveProto convert(PathCacheDirective directive) {
+    PathCacheDirectiveProto.Builder builder = 
+        PathCacheDirectiveProto.newBuilder()
+        .setPath(directive.getPath())
+        .setPool(PBHelper.convert(new CachePool(directive.getPoolId())));
+    return builder.build();
+  }
+
+  public static PathCacheEntry convert(PathCacheEntryProto entryProto) {
+    long entryId = entryProto.getId();
+    PathCacheDirective directive = convert(entryProto.getDirective());
+    return new PathCacheEntry(entryId, directive);
+  }
+
+  public static PathCacheEntryProto convert(PathCacheEntry entry) {
+    PathCacheEntryProto.Builder builder = PathCacheEntryProto.newBuilder()
+        .setId(entry.getEntryId())
+        .setDirective(PBHelper.convert(entry.getDirective()));
+    return builder.build();
+  }
+
+  public static CachePoolInfo convert(CachePoolInfoProto infoProto) {
+    CachePoolInfo.Builder builder =
+        CachePoolInfo.newBuilder().setPoolName(infoProto.getPoolName());
+    if (infoProto.hasOwnerName()) {
+      builder.setOwnerName(infoProto.getOwnerName());
+    }
+    if (infoProto.hasGroupName()) {
+      builder.setGroupName(infoProto.getGroupName());
+    }
+    if (infoProto.hasMode()) {
+      builder.setMode(new FsPermission((short) infoProto.getMode()));
+    }
+    if (infoProto.hasWeight()) {
+      builder.setWeight(infoProto.getWeight());
+    }
+    return builder.build();
+  }
+
+  public static CachePoolInfoProto convert(CachePoolInfo info) {
+    CachePoolInfoProto.Builder builder = CachePoolInfoProto.newBuilder()
+        .setPoolName(info.getPoolName())
+        .setOwnerName(info.getOwnerName())
+        .setGroupName(info.getGroupName())
+        .setMode(info.getMode().toShort())
+        .setWeight(info.getWeight());
+    return builder.build();
+  }
+
+  public static CachePool convert(CachePoolProto poolProto) {
+    CachePoolInfo info = convert(poolProto.getInfo());
+    CachePool pool = new CachePool(poolProto.getId(), info);
+    return pool;
+  }
+
+  public static CachePoolProto convert(CachePool pool) {
+    CachePoolProto.Builder builder = CachePoolProto.newBuilder()
+        .setId(pool.getId())
+        .setInfo(convert(pool.getInfo()));
+    return builder.build();
+  }
+
