YARN-2644. Fixed CapacityScheduler to return up-to-date headroom when AM allocates. Contributed by Craig Welch

+  private final QueueHeadroomInfo queueHeadroomInfo = new QueueHeadroomInfo();
+  
+  
+  protected Resource getHeadroom(User user, Resource queueMaxCap,
+      Resource clusterResource, FiCaSchedulerApp application, Resource required) {
+    return getHeadroom(user, queueMaxCap, clusterResource,
+	  computeUserLimit(application, clusterResource, required, user));
+  }
+  
+  private Resource getHeadroom(User user, Resource queueMaxCap,
+      Resource clusterResource, Resource userLimit) {
+    Resource headroom = 
+        Resources.subtract(
+            Resources.min(resourceCalculator, clusterResource, 
+                userLimit, queueMaxCap), 
+            user.getConsumedResources());
+    return headroom;
+  }
+    User queueUser = getUser(user);
+    
-        computeUserLimit(application, clusterResource, required);
+        computeUserLimit(application, clusterResource, required, queueUser);
+	
+    synchronized (queueHeadroomInfo) {
+      queueHeadroomInfo.setQueueMaxCap(queueMaxCap);
+      queueHeadroomInfo.setClusterResource(clusterResource);
+    }
-    Resource userConsumed = getUser(user).getConsumedResources(); 
-    Resource headroom = 
-        Resources.subtract(
-            Resources.min(resourceCalculator, clusterResource, 
-                userLimit, queueMaxCap), 
-            userConsumed);
+    Resource headroom = getHeadroom(queueUser, queueMaxCap, clusterResource, userLimit);
-          " consumed=" + userConsumed + 
+          " consumed=" + queueUser.getConsumedResources() + 
-    application.setHeadroom(headroom);
+    CapacityHeadroomProvider headroomProvider = new CapacityHeadroomProvider(
+      queueUser, this, application, required, queueHeadroomInfo);
+    
+    application.setHeadroomProvider(headroomProvider);
+
-      Resource clusterResource, Resource required) {
+      Resource clusterResource, Resource required, User user) {
-          " consumed: " + getUser(userName).getConsumedResources() + 
+          " consumed: " + user.getConsumedResources() + 
-    // Note this is a bit unconventional since it gets the object and modifies it here
-    // rather then using set routine
-    Resources.subtractFrom(application.getHeadroom(), resource); // headroom
+  
+  /*
+   * Holds shared values used by all applications in
+   * the queue to calculate headroom on demand
+   */
+  static class QueueHeadroomInfo {
+    private Resource queueMaxCap;
+    private Resource clusterResource;
+    
+    public void setQueueMaxCap(Resource queueMaxCap) {
+      this.queueMaxCap = queueMaxCap;
+    }
+    
+    public Resource getQueueMaxCap() {
+      return queueMaxCap;
+    }
+    
+    public void setClusterResource(Resource clusterResource) {
+      this.clusterResource = clusterResource;
+    }
+    
+    public Resource getClusterResource() {
+      return clusterResource;
+    }
+  }
