HDFS-13057: [SPS]: Revisit configurations to make SPS service modes internal/external/none. Contributed by Rakesh R.

+import org.apache.hadoop.hdfs.protocol.HdfsConstants.StoragePolicySatisfierMode;
-  private boolean spsEnabled;
-  private final SPSPathIds spsPaths;
+  private StoragePolicySatisfierMode spsMode;
+  private SPSPathIds spsPaths;
-    spsEnabled =
-        conf.getBoolean(
-            DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY,
-            DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_ENABLED_DEFAULT);
-    sps = new StoragePolicySatisfier(conf);
+    String spsModeVal =
+        conf.get(
+            DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,
+            DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_MODE_DEFAULT);
+    spsMode = StoragePolicySatisfierMode.fromString(spsModeVal);
+    sps = new StoragePolicySatisfier(conf);
-    if (!(storagePolicyEnabled && spsEnabled)) {
+    if (!(storagePolicyEnabled && spsMode != StoragePolicySatisfierMode.NONE)) {
-          DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY, spsEnabled);
+          DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_MODE_KEY, spsMode);
-      LOG.info("Storage policy satisfier is already running.");
+      LOG.info("Storage policy satisfier is already running"
+          + " as internal service.");
-    sps.start(false);
+    // starting internal SPS service
+    if (spsMode == StoragePolicySatisfierMode.INTERNAL) {
+      sps.start(false, spsMode);
+    }
-    if (!(storagePolicyEnabled && spsEnabled)) {
+    if (!(storagePolicyEnabled
+        && (spsMode != StoragePolicySatisfierMode.NONE))) {
-      LOG.info("Storage policy satisfier is already stopped.");
+      removeAllSPSPathIds();
+      LOG.info("Storage policy satisfier is not running.");
-  public void enableSPS() {
+  public void enableInternalSPS() {
-    spsEnabled = true;
-      LOG.info("Storage policy satisfier is already running.");
+      LOG.info("Storage policy satisfier is already running as SPS mode:{}.",
+          spsMode);
-    sps.start(true);
+    updateSPSMode(StoragePolicySatisfierMode.INTERNAL);
+    sps.start(true, spsMode);
+  }
+
+  /**
+   * Enable storage policy satisfier by starting its service.
+   */
+  public void enableExternalSPS() {
+    if (!storagePolicyEnabled){
+      LOG.info("Failed to start StoragePolicySatisfier as {} set to {}.",
+          DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY, storagePolicyEnabled);
+      return;
+    }
+    if (spsMode == StoragePolicySatisfierMode.EXTERNAL) {
+      LOG.info("Storage policy satisfier is already enabled as SPS mode:{}.",
+          spsMode);
+      return;
+    }
+    updateSPSMode(StoragePolicySatisfierMode.EXTERNAL);
+    sps.stopGracefully();
+  }
+
+  private void updateSPSMode(StoragePolicySatisfierMode newSpsMode) {
+    LOG.debug("Updating SPS service status, current mode:{}, new mode:{}",
+        spsMode, newSpsMode);
+    spsMode = newSpsMode;
-    spsEnabled = false;
-    if (!sps.isRunning()) {
-      LOG.info("Storage policy satisfier is already stopped.");
-      return;
+    switch (spsMode) {
+    case NONE:
+      break;
+    case INTERNAL:
+    case EXTERNAL:
+      if (!sps.isRunning()) {
+        LOG.info("Storage policy satisfier is already stopped.");
+      } else {
+        LOG.info("Stopping StoragePolicySatisfier mode {}, as admin "
+            + "requested to stop it.", spsMode);
+        sps.disable(true);
+      }
+      removeAllSPSPathIds();
+      break;
+    default:
+      // nothing
+      break;
-
-    LOG.info("Stopping StoragePolicySatisfier, as admin requested to "
-        + "stop it.");
-    sps.disable(true);
+    updateSPSMode(StoragePolicySatisfierMode.NONE);
+    removeAllSPSPathIds();
-   * @return true if sps enabled.
+   * @return true if sps is running as an internal service or external service.
-    return spsEnabled;
+    return spsMode == StoragePolicySatisfierMode.INTERNAL
+        || spsMode == StoragePolicySatisfierMode.EXTERNAL;
+  /**
+   * @return sps service mode.
+   */
+  public StoragePolicySatisfierMode getSPSMode() {
+    return spsMode;
+  }
