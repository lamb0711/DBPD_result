commit correct version of HDFS-5121

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.NoSuchElementException;
-import org.apache.hadoop.hdfs.protocol.AlreadyBeingCreatedException;
-import org.apache.hadoop.hdfs.protocol.PathCacheDirective;
-import org.apache.hadoop.hdfs.protocol.PathCacheEntry;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPoolNameError;
+import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPoolError;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.InvalidIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.NoSuchIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.RemovePermissionDeniedException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.UnexpectedRemovePathCacheEntryException;
+import org.apache.hadoop.hdfs.protocol.AlreadyBeingCreatedException;
+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
-import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
+import org.apache.hadoop.hdfs.protocol.PathCacheDirective;
+import org.apache.hadoop.hdfs.protocol.PathCacheEntry;
+import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.InvalidIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.NoSuchIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.RemovePermissionDeniedException;
+import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.UnexpectedRemovePathCacheEntryException;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathCacheDirectiveProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesElementProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathCacheDirectiveProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathCacheEntryProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemoveCachePoolRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemoveCachePoolRequestProto;
+import org.apache.hadoop.hdfs.server.namenode.CachePool;
-      return new InvalidPoolNameError(directive);
+      return new InvalidPoolError(directive);
-            setPool(directive.getPool()).
+            setPool(PBHelper.convert(new CachePool(directive.getPoolId()))).
-      ListPathCacheEntriesElementProto elementProto =
-        response.getElements(i);
-      return new PathCacheEntry(elementProto.getId(), 
-          new PathCacheDirective(elementProto.getPath(),
-              elementProto.getPool()));
+      PathCacheEntryProto entryProto = response.getEntries(i);
+      return PBHelper.convert(entryProto);
-      return response.getElementsCount();
+      return response.getEntriesCount();
-    private final String pool;
+    private final long poolId;
-        String pool) {
+        long poolId) {
-      this.pool = pool;
+      this.poolId = poolId;
-        Long nextKey, int maxRepliesPerRequest) throws IOException {
+        Long prevEntryId, int maxRepliesPerRequest) throws IOException {
-              setPrevId(nextKey).
-              setPool(pool).
+              setPrevEntry(
+                  PBHelper.convert(new PathCacheEntry(prevEntryId, null))).
+              setPool(PBHelper.convert(new CachePool(poolId))).
-        if (response.getElementsCount() == 0) {
+        if (response.getEntriesCount() == 0) {
-    public Long elementToNextKey(PathCacheEntry element) {
+    public Long elementToPrevKey(PathCacheEntry element) {
-      String pool, int repliesPerRequest) throws IOException {
-    return new PathCacheEntriesIterator(prevId, repliesPerRequest, pool);
+      long poolId, int repliesPerRequest) throws IOException {
+    return new PathCacheEntriesIterator(prevId, repliesPerRequest, poolId);
-  public void addCachePool(CachePoolInfo info) throws IOException {
-    AddCachePoolRequestProto.Builder builder = 
+  public CachePool addCachePool(CachePoolInfo info) throws IOException {
+    AddCachePoolRequestProto.Builder builder =
-    builder.setPoolName(info.getPoolName());
-    if (info.getOwnerName() != null) {
-      builder.setOwnerName(info.getOwnerName());
-    }
-    if (info.getGroupName() != null) {
-      builder.setGroupName(info.getGroupName());
-    }
-    if (info.getMode() != null) {
-      builder.setMode(info.getMode());
-    }
-    if (info.getWeight() != null) {
-      builder.setWeight(info.getWeight());
-    }
+    builder.setInfo(PBHelper.convert(info));
-      rpcProxy.addCachePool(null, builder.build());
+      return PBHelper.convert(
+          rpcProxy.addCachePool(null, builder.build()).getPool());
-  public void modifyCachePool(CachePoolInfo req) throws IOException {
-    ModifyCachePoolRequestProto.Builder builder = 
-        ModifyCachePoolRequestProto.newBuilder();
-    builder.setPoolName(req.getPoolName());
-    if (req.getOwnerName() != null) {
-      builder.setOwnerName(req.getOwnerName());
-    }
-    if (req.getGroupName() != null) {
-      builder.setGroupName(req.getGroupName());
-    }
-    if (req.getMode() != null) {
-      builder.setMode(req.getMode());
-    }
-    if (req.getWeight() != null) {
-      builder.setWeight(req.getWeight());
-    }
+  public void modifyCachePool(long poolId, CachePoolInfo info)
+      throws IOException {
+    ModifyCachePoolRequestProto.Builder builder =
+        ModifyCachePoolRequestProto.newBuilder()
+        .setPool(PBHelper.convert(new CachePool(poolId)))
+        .setInfo(PBHelper.convert(info));
-  public void removeCachePool(String cachePoolName) throws IOException {
+  public void removeCachePool(long poolId) throws IOException {
-      rpcProxy.removeCachePool(null, 
+      rpcProxy.removeCachePool(null,
-            setPoolName(cachePoolName).build());
+          setPool(PBHelper.convert(new CachePool(poolId))).
+          build());
-      implements BatchedEntries<CachePoolInfo> {
+      implements BatchedEntries<CachePool> {
+
-    
+
-      
+
-    public CachePoolInfo get(int i) {
+    public CachePool get(int i) {
-      return new CachePoolInfo(elem.getPoolName()).
-          setOwnerName(elem.getOwnerName()).
-          setGroupName(elem.getGroupName()).
-          setMode(elem.getMode()).
-          setWeight(elem.getWeight());
+      return PBHelper.convert(elem.getPool());
-  
-  private class CachePoolIterator 
-      extends BatchedRemoteIterator<String, CachePoolInfo> {
-    public CachePoolIterator(String prevKey, int maxRepliesPerRequest) {
+  private class CachePoolIterator
+      extends BatchedRemoteIterator<Long, CachePool> {
+
+    public CachePoolIterator(Long prevKey, int maxRepliesPerRequest) {
-    public BatchedEntries<CachePoolInfo> makeRequest(String prevKey,
+    public BatchedEntries<CachePool> makeRequest(Long prevKey,
-            rpcProxy.listCachePools(null, 
+            rpcProxy.listCachePools(null,
-                setPrevPoolName(prevKey).
-                setMaxReplies(maxRepliesPerRequest).build()));
+                setPrevPool(PBHelper.convert(new CachePool(prevKey))).
+                setMaxReplies(maxRepliesPerRequest).
+                build()));
-    public String elementToNextKey(CachePoolInfo element) {
-      return element.getPoolName();
+    public Long elementToPrevKey(CachePool element) {
+      return element.getId();
-  public RemoteIterator<CachePoolInfo> listCachePools(String prevKey,
+  public RemoteIterator<CachePool> listCachePools(long prevPoolId,
-    return new CachePoolIterator(prevKey, maxRepliesPerRequest);
+    return new CachePoolIterator(prevPoolId, maxRepliesPerRequest);
