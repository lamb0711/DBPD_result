HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)

- * Counters for namespace, space and storage type quota and usage.
+ * Counters for namespace, storage space and storage type space quota and usage.
-
-  private EnumCounters<Quota> nsSpCounts;
-  private EnumCounters<StorageType> typeCounts;
+  // Name space and storage space counts (HDFS-7775 refactors the original disk
+  // space count to storage space counts)
+  private EnumCounters<Quota> nsSsCounts;
+  // Storage type space counts
+  private EnumCounters<StorageType> tsCounts;
-    private EnumCounters<Quota> nsSpCounts;
-    private EnumCounters<StorageType> typeCounts;
+    private EnumCounters<Quota> nsSsCounts;
+    private EnumCounters<StorageType> tsCounts;
-      this.nsSpCounts = new EnumCounters<Quota>(Quota.class);
-      this.typeCounts = new EnumCounters<StorageType>(StorageType.class);
+      this.nsSsCounts = new EnumCounters<Quota>(Quota.class);
+      this.tsCounts = new EnumCounters<StorageType>(StorageType.class);
-    public Builder nameCount(long val) {
-      this.nsSpCounts.set(Quota.NAMESPACE, val);
+    public Builder nameSpace(long val) {
+      this.nsSsCounts.set(Quota.NAMESPACE, val);
-    public Builder spaceCount(long val) {
-      this.nsSpCounts.set(Quota.DISKSPACE, val);
+    public Builder storageSpace(long val) {
+      this.nsSsCounts.set(Quota.STORAGESPACE, val);
-    public Builder typeCounts(EnumCounters<StorageType> val) {
+    public Builder typeSpaces(EnumCounters<StorageType> val) {
-        this.typeCounts.set(val);
+        this.tsCounts.set(val);
-    public Builder typeCounts(long val) {
-      this.typeCounts.reset(val);
+    public Builder typeSpaces(long val) {
+      this.tsCounts.reset(val);
-      this.nsSpCounts.set(that.nsSpCounts);
-      this.typeCounts.set(that.typeCounts);
+      this.nsSsCounts.set(that.nsSsCounts);
+      this.tsCounts.set(that.tsCounts);
-    this.nsSpCounts = builder.nsSpCounts;
-    this.typeCounts = builder.typeCounts;
+    this.nsSsCounts = builder.nsSsCounts;
+    this.tsCounts = builder.tsCounts;
-    this.nsSpCounts.add(that.nsSpCounts);
-    this.typeCounts.add(that.typeCounts);
+    this.nsSsCounts.add(that.nsSsCounts);
+    this.tsCounts.add(that.tsCounts);
-    this.nsSpCounts.subtract(that.nsSpCounts);
-    this.typeCounts.subtract(that.typeCounts);
+    this.nsSsCounts.subtract(that.nsSsCounts);
+    this.tsCounts.subtract(that.tsCounts);
-    ret.nsSpCounts.negation();
-    ret.typeCounts.negation();
+    ret.nsSsCounts.negation();
+    ret.tsCounts.negation();
-    return nsSpCounts.get(Quota.NAMESPACE);
+    return nsSsCounts.get(Quota.NAMESPACE);
-    this.nsSpCounts.set(Quota.NAMESPACE, nameSpaceCount);
+    this.nsSsCounts.set(Quota.NAMESPACE, nameSpaceCount);
-    this.nsSpCounts.add(Quota.NAMESPACE, nsDelta);
+    this.nsSsCounts.add(Quota.NAMESPACE, nsDelta);
-  public long getDiskSpace(){
-    return nsSpCounts.get(Quota.DISKSPACE);
+  public long getStorageSpace(){
+    return nsSsCounts.get(Quota.STORAGESPACE);
-  public void setDiskSpace(long spaceCount) {
-    this.nsSpCounts.set(Quota.DISKSPACE, spaceCount);
+  public void setStorageSpace(long spaceCount) {
+    this.nsSsCounts.set(Quota.STORAGESPACE, spaceCount);
-  public void addDiskSpace(long dsDelta) {
-    this.nsSpCounts.add(Quota.DISKSPACE, dsDelta);
+  public void addStorageSpace(long dsDelta) {
+    this.nsSsCounts.add(Quota.STORAGESPACE, dsDelta);
-    ret.set(typeCounts);
+    ret.set(tsCounts);
-      this.typeCounts.set(that);
+      this.tsCounts.set(that);
-    return this.typeCounts.get(type);
+    return this.tsCounts.get(type);
-    this.typeCounts.set(type, spaceCount);
+    this.tsCounts.set(type, spaceCount);
-    this.typeCounts.add(type, delta);
+    this.tsCounts.add(type, delta);
-  public void addTypeSpaces(EnumCounters<StorageType> deltas) {
-    this.typeCounts.add(deltas);
+  public boolean anyNsSsCountGreaterOrEqual(long val) {
+    return nsSsCounts.anyGreaterOrEqual(val);
-  public boolean anyNsSpCountGreaterOrEqual(long val) {
-    return nsSpCounts.anyGreaterOrEqual(val);
-  }
-
-  public boolean anyTypeCountGreaterOrEqual(long val) {
-    return typeCounts.anyGreaterOrEqual(val);
+  public boolean anyTypeSpaceCountGreaterOrEqual(long val) {
+    return tsCounts.anyGreaterOrEqual(val);
-    return this.nsSpCounts.equals(that.nsSpCounts)
-        && this.typeCounts.equals(that.typeCounts);
+    return this.nsSsCounts.equals(that.nsSsCounts)
+        && this.tsCounts.equals(that.tsCounts);
