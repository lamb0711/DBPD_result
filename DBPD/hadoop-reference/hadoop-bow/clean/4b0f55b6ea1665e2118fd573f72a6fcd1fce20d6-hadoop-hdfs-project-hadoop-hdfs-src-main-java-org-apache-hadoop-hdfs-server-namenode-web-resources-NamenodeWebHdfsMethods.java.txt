HDFS-7766. Add a flag to WebHDFS op=CREATE to not respond with a 307 redirect (Ravi Prakash via aw)

-          final CreateFlagParam createFlagParam
+          final CreateFlagParam createFlagParam,
+      @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT)
+          final NoRedirectParam noredirect
-        xattrSetFlag, snapshotName, oldSnapshotName, excludeDatanodes, createFlagParam);
+        xattrSetFlag, snapshotName, oldSnapshotName, excludeDatanodes,
+        createFlagParam, noredirect);
-          final CreateFlagParam createFlagParam
+          final CreateFlagParam createFlagParam,
+      @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT)
+          final NoRedirectParam noredirect
-        oldSnapshotName, excludeDatanodes, createFlagParam);
+        oldSnapshotName, excludeDatanodes, createFlagParam, noredirect);
-              createFlagParam);
+              createFlagParam, noredirect);
-      final CreateFlagParam createFlagParam
+      final CreateFlagParam createFlagParam,
+      final NoRedirectParam noredirectParam
-      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();
-    } 
+      if(!noredirectParam.getValue()) {
+        return Response.temporaryRedirect(uri)
+          .type(MediaType.APPLICATION_OCTET_STREAM).build();
+      } else {
+        final String js = JsonUtil.toJsonString("Location", uri);
+        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+      }
+    }
-          final NewLengthParam newLength
+          final NewLengthParam newLength,
+      @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT)
+          final NoRedirectParam noredirect
-        bufferSize, excludeDatanodes, newLength);
+        bufferSize, excludeDatanodes, newLength, noredirect);
-          final NewLengthParam newLength
+          final NewLengthParam newLength,
+      @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT)
+          final NoRedirectParam noredirect
-              excludeDatanodes, newLength);
+              excludeDatanodes, newLength, noredirect);
-      final NewLengthParam newLength
+      final NewLengthParam newLength,
+      final NoRedirectParam noredirectParam
-      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();
+      if(!noredirectParam.getValue()) {
+        return Response.temporaryRedirect(uri)
+          .type(MediaType.APPLICATION_OCTET_STREAM).build();
+      } else {
+        final String js = JsonUtil.toJsonString("Location", uri);
+        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+      }
-          final TokenServiceParam tokenService
+          final TokenServiceParam tokenService,
+      @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT)
+          final NoRedirectParam noredirect
-        tokenKind, tokenService);
+        tokenKind, tokenService, noredirect);
-          final TokenServiceParam tokenService
+          final TokenServiceParam tokenService,
+      @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT)
+          final NoRedirectParam noredirect
-              tokenService);
+              tokenService, noredirect);
-      final TokenServiceParam tokenService
+      final TokenServiceParam tokenService,
+      final NoRedirectParam noredirectParam
-      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();
+      if(!noredirectParam.getValue()) {
+        return Response.temporaryRedirect(uri)
+          .type(MediaType.APPLICATION_OCTET_STREAM).build();
+      } else {
+        final String js = JsonUtil.toJsonString("Location", uri);
+        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+      }
-      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();
+      if(!noredirectParam.getValue()) {
+        return Response.temporaryRedirect(uri)
+          .type(MediaType.APPLICATION_OCTET_STREAM).build();
+      } else {
+        final String js = JsonUtil.toJsonString("Location", uri);
+        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+      }
