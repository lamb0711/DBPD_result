HDFS-14775. Add Timestamp for longest FSN write/read lock held log. Contributed by Chen Zhang.

-import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
+import org.apache.hadoop.util.Time;
-  private final AtomicReference<ReadLockHeldInfo> longestReadLockHeldInfo =
-      new AtomicReference<>(new ReadLockHeldInfo(0, null));
-
-  /**
-   * The stack trace when longest time of the write lock
-   * was held since the last report.
-   */
-  private volatile String longestWriteLockHeldStackTrace;
+  private final AtomicReference<LockHeldInfo> longestReadLockHeldInfo =
+      new AtomicReference<>(new LockHeldInfo(0, 0, null));
+  private LockHeldInfo longestWriteLockHeldInfo = new LockHeldInfo(0, 0, null);
+    final long currentTimeStampNanos = timer.monotonicNowNanos();
-        timer.monotonicNowNanos() - readLockHeldTimeStampNanos.get();
+        currentTimeStampNanos - readLockHeldTimeStampNanos.get();
+    final long currentTimeMs =
+        TimeUnit.NANOSECONDS.toMillis(currentTimeStampNanos);
-      ReadLockHeldInfo localLockHeldInfo;
+      LockHeldInfo localLockHeldInfo;
-              new ReadLockHeldInfo(readLockIntervalMs,
+              new LockHeldInfo(currentTimeMs, readLockIntervalMs,
-      ReadLockHeldInfo lockHeldInfo = longestReadLockHeldInfo
-          .getAndSet(new ReadLockHeldInfo(0, null));
+      LockHeldInfo lockHeldInfo =
+          longestReadLockHeldInfo.getAndSet(new LockHeldInfo(0, 0, null));
-          "\tNumber of suppressed read-lock reports: {}" +
-          "\n\tLongest read-lock held interval: {}ms via {}",
-          numSuppressedWarnings, lockHeldInfo.getIntervalMs(),
-          lockHeldInfo.getStackTrace());
+          "\tNumber of suppressed read-lock reports: {}"
+              + "\n\tLongest read-lock held at {} for {}ms via {}",
+          numSuppressedWarnings, Time.formatTime(lockHeldInfo.getStartTimeMs()),
+          lockHeldInfo.getIntervalMs(), lockHeldInfo.getStackTrace());
-      SummaryStatistics currentStats =
-          writeLockReportLogger.getCurrentStats("write", 0);
-      double currentMaxTime = currentStats != null ? currentStats.getMax() : 0;
-      if (currentMaxTime < writeLockIntervalMs) {
-        longestWriteLockHeldStackTrace =
-            StringUtils.getStackTrace(Thread.currentThread());
+      if (longestWriteLockHeldInfo.getIntervalMs() < writeLockIntervalMs) {
+        longestWriteLockHeldInfo =
+            new LockHeldInfo(currentTimeMs, writeLockIntervalMs,
+                StringUtils.getStackTrace(Thread.currentThread()));
+    LockHeldInfo lockHeldInfo = longestWriteLockHeldInfo;
+    if (logAction.shouldLog()) {
+      longestWriteLockHeldInfo = new LockHeldInfo(0, 0, null);
+    }
+
-          "\tNumber of suppressed write-lock reports: {}" +
-          "\n\tLongest write-lock held interval: {}ms via {} " +
-          "\n\tTotal suppressed write-lock held time: {}",
-          logAction.getCount() - 1, logAction.getStats(0).getMax(),
-          longestWriteLockHeldStackTrace,
-          logAction.getStats(0).getSum() - writeLockIntervalMs);
+          "\tNumber of suppressed write-lock reports: {}"
+              + "\n\tLongest write-lock held at {} for {}ms via {}"
+              + "\n\tTotal suppressed write-lock held time: {}",
+          logAction.getCount() - 1,
+          Time.formatTime(lockHeldInfo.getStartTimeMs()),
+          lockHeldInfo.getIntervalMs(), lockHeldInfo.getStackTrace(),
+          logAction.getStats(0).getSum() - lockHeldInfo.getIntervalMs());
-  private static class ReadLockHeldInfo {
-    /** Read lock held time. */
+  private static class LockHeldInfo {
+    /** Lock held start time. */
+    private Long startTimeMs;
+    /** Lock held time. */
-    /** The stack trace read lock was held. */
+    /** The stack trace lock was held. */
-    ReadLockHeldInfo(long intervalMs, String stackTrace) {
+    LockHeldInfo(long startTimeMs, long intervalMs, String stackTrace) {
+      this.startTimeMs = startTimeMs;
+    public Long getStartTimeMs() {
+      return this.startTimeMs;
+    }
+
-
-    @Override
-    public int hashCode() {
-      return this.intervalMs.hashCode();
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-      return obj instanceof ReadLockHeldInfo && ((ReadLockHeldInfo) obj)
-          .getIntervalMs().compareTo(intervalMs) == 0;
-    }
