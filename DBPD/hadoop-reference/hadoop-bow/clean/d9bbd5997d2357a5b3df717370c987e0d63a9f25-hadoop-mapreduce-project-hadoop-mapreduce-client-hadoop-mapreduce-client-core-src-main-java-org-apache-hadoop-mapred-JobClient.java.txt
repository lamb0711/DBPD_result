MAPREDUCE-4355. Add JobStatus getJobStatus(JobID) to JobClient. (kkambatl via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1353757 13f79535-47bb-0310-9956-ffa450edef68

+  private JobStatus getJobStatusUsingCluster(final JobID jobId)
+      throws IOException, InterruptedException {
+    return clientUgi.doAs(new PrivilegedExceptionAction<JobStatus>() {
+      public JobStatus run() throws IOException, InterruptedException {
+        return JobStatus.downgrade(cluster.getJobStatus(jobId));
+      }
+    });
+  }
+
+
-   * Get an {@link RunningJob} object to track an ongoing job.  Returns
-   * null if the id does not correspond to any known job.
+   * Get {@link JobStatus} of a job. Returns null if the id does not correspond
+   * to any known job.
-   * @param jobid the jobid of the job.
-   * @return the {@link RunningJob} handle to track the job, null if the 
+   * @param jobid
+   *          the jobid of the job.
+   * @return the {@link JobStatus} object to retrieve the job stats, null if the
-  public RunningJob getJob(final JobID jobid) throws IOException {
+  public JobStatus getJobStatus(JobID jobId) throws IOException {
-      
-      Job job = getJobUsingCluster(jobid);
-      if (job != null) {
-        JobStatus status = JobStatus.downgrade(job.getStatus());
-        if (status != null) {
-          return new NetworkedJob(status, cluster);
-        } 
-      }
+      return getJobStatusUsingCluster(jobId);
+  }
+
+  /**
+   * Get an {@link RunningJob} object to track an ongoing job. Returns null if
+   * the id does not correspond to any known job.
+   * 
+   * @param jobid
+   *          the jobid of the job.
+   * @return the {@link RunningJob} handle to track the job, null if the
+   *         <code>jobid</code> doesn't correspond to any known job.
+   * @throws IOException
+   */
+  public RunningJob getJob(JobID jobId) throws IOException {
+    JobStatus status = getJobStatus(jobId);
+    if (status != null) {
+      return new NetworkedJob(status, cluster);
+    }
