YARN-9558.  Fixed LogAggregation test cases.
            Contributed by Prabhu Joseph

+  public static String guessOwnerWithFileFormat(
+      LogAggregationFileController fileFormat, ApplicationId appId,
+      String bestGuess, Configuration conf) throws IOException {
+
+    boolean scanOldPath = LogAggregationUtils.isOlderPathEnabled(conf);
+    Path remoteRootLogDir = fileFormat.getRemoteRootLogDir();
+    String suffix = fileFormat.getRemoteRootLogDirSuffix();
+    Path fullPath = fileFormat.getRemoteAppLogDir(appId, bestGuess);
+    FileContext fc =
+        FileContext.getFileContext(remoteRootLogDir.toUri(), conf);
+    String pathAccess = fullPath.toString();
+
+    try {
+      if (fc.util().exists(fullPath)) {
+        return bestGuess;
+      }
+
+      if (scanOldPath) {
+        Path olderAppPath = fileFormat.getOlderRemoteAppLogDir(appId,
+            bestGuess);
+        pathAccess = olderAppPath.toString();
+        if (fc.util().exists(olderAppPath)) {
+          return bestGuess;
+        }
+      }
+    } catch (AccessControlException | AccessDeniedException ex) {
+      logDirNoAccessPermission(pathAccess, bestGuess, ex.getMessage());
+      throw ex;
+    }
+
+    try {
+      Path toMatch = fileFormat.getRemoteAppLogDir(appId, null);
+      FileStatus[] matching = fc.util().globStatus(toMatch);
+      if (matching != null && matching.length == 1) {
+        //fetch user from new path /app-logs/user[/suffix]/bucket/app_id
+        Path parent = matching[0].getPath().getParent();
+        //skip the suffix too
+        if (suffix != null && !StringUtils.isEmpty(suffix)) {
+          parent = parent.getParent();
+        }
+        //skip the bucket
+        parent = parent.getParent();
+        return parent.getName();
+      }
+    } catch (IOException e) {
+      // Ignore IOException thrown from wrong file format
+    }
+
+    if (scanOldPath) {
+      try {
+        Path toMatch = fileFormat.getOlderRemoteAppLogDir(appId, null);
+        FileStatus[] matching = fc.util().globStatus(toMatch);
+        if (matching != null && matching.length == 1) {
+          //fetch user from old path /app-logs/user[/suffix]/app_id
+          Path parent = matching[0].getPath().getParent();
+          //skip the suffix too
+          if (suffix != null && !StringUtils.isEmpty(suffix)) {
+            parent = parent.getParent();
+          }
+          return parent.getName();
+        }
+      } catch (IOException e) {
+        // Ignore IOException thrown from wrong file format
+      }
+    }
+
+    return null;
+  }
+
-      Configuration conf) throws IOException {
-    Path remoteRootLogDir = new Path(conf.get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String suffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);
-    Path fullPath = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir,
-        appId, bestGuess, suffix);
+      Configuration conf) {
+    LogAggregationFileControllerFactory factory =
+        new LogAggregationFileControllerFactory(conf);
+    List<LogAggregationFileController> fileControllers = factory
+        .getConfiguredLogAggregationFileControllerList();
-    FileContext fc =
-        FileContext.getFileContext(remoteRootLogDir.toUri(), conf);
-    String pathAccess = fullPath.toString();
-    try {
-      if (fc.util().exists(fullPath)) {
-        return bestGuess;
-      }
-
-      boolean scanOldPath = LogAggregationUtils.isOlderPathEnabled(conf);
-      if (scanOldPath) {
-        Path olderAppPath = LogAggregationUtils.getOlderRemoteAppLogDir(appId,
-            bestGuess, remoteRootLogDir, suffix);
-        if (fc.util().exists(olderAppPath)) {
-          return bestGuess;
-        }
-      }
-
-      Path toMatch = LogAggregationUtils.
-          getRemoteAppLogDir(remoteRootLogDir, appId, "*", suffix);
-
-      pathAccess = toMatch.toString();
-      FileStatus[] matching  = fc.util().globStatus(toMatch);
-      if (matching == null || matching.length != 1) {
-        if (scanOldPath) {
-          toMatch = LogAggregationUtils.getOlderRemoteAppLogDir(appId, "*",
-              remoteRootLogDir, suffix);
-          try {
-            matching = fc.util().globStatus(toMatch);
-            if (matching != null && matching.length == 1) {
-              //fetch the user from the old path /app-logs/user[/suffix]/app_id
-              Path parent = matching[0].getPath().getParent();
-              //skip the suffix too
-              if (suffix != null && !StringUtils.isEmpty(suffix)) {
-                parent = parent.getParent();
-              }
-              return parent.getName();
-            }
-          } catch (IOException e) {
-            // Ignore IOException from accessing older app log dir
+    if (fileControllers != null && !fileControllers.isEmpty()) {
+      String owner = null;
+      for (LogAggregationFileController fileFormat : fileControllers) {
+        try {
+          owner = guessOwnerWithFileFormat(fileFormat, appId, bestGuess, conf);
+          if (owner != null) {
+            return owner;
+        } catch (IOException e) {
+          return null;
-        return null;
-      //fetch the user from the full path /app-logs/user[/suffix]/bucket/app_id
-      Path parent = matching[0].getPath().getParent();
-      //skip the suffix too
-      if (suffix != null && !StringUtils.isEmpty(suffix)) {
-        parent = parent.getParent();
-      }
-      //skip the bucket
-      parent = parent.getParent();
-      return parent.getName();
-    } catch (AccessControlException | AccessDeniedException ex) {
-      logDirNoAccessPermission(pathAccess, bestGuess, ex.getMessage());
-      return null;
+    } else {
+      System.err.println("Can not find any valid fileControllers. " +
+          " The configurated fileControllers: " +
+          YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS);
+
+    return null;
-          conf, options.getAppId(), options.getAppOwner())
+          conf, options.getAppId(), options.getAppOwner(),
+          fc.getRemoteRootLogDir(), fc.getRemoteRootLogDirSuffix())
-      logDirNotExist(LogAggregationUtils.getRemoteAppLogDir(
-          conf, appId, appOwner).toString());
+      logDirNotExist(fileFormat.getRemoteAppLogDir(appId,
+          appOwner).toString());
-      logDirNoAccessPermission(LogAggregationUtils.getRemoteAppLogDir(
-          conf, appId, appOwner).toString(), appOwner,
-          ace.getMessage());
+      logDirNoAccessPermission(fileFormat.getRemoteAppLogDir(appId,
+          appOwner).toString(), appOwner, ace.getMessage());
