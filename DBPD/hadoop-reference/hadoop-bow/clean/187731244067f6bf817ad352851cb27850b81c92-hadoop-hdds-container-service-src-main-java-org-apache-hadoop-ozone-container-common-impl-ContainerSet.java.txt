HDDS-2238. Container Data Scrubber spams log in empty cluster

Signed-off-by: Anu Engineer <aengineer@apache.org>

+import java.util.ArrayList;
-import java.util.stream.Collectors;
-  private final ConcurrentSkipListMap<Long, Container> containerMap = new
+  private final ConcurrentSkipListMap<Long, Container<?>> containerMap = new
-   * @param container
+   * @param container container to be added
-  public boolean addContainer(Container container) throws
+  public boolean addContainer(Container<?> container) throws
-   * @param containerId
+   * @param containerId ID of the container to get
-  public Container getContainer(long containerId) {
+  public Container<?> getContainer(long containerId) {
-   * @param containerId
+   * @param containerId ID of the container to remove
-    Container removed = containerMap.remove(containerId);
+    Container<?> removed = containerMap.remove(containerId);
-   * @return {@literal Iterator<Container>}
+   * @return {@literal Iterator<Container<?>>}
-  public Iterator<Container> getContainerIterator() {
+  public Iterator<Container<?>> getContainerIterator() {
-   * @return {@literal Iterator<Container>}
+   * @return {@literal Iterator<Container<?>>}
-  public Iterator<Container> getContainerIterator(HddsVolume volume) {
+  public Iterator<Container<?>> getContainerIterator(HddsVolume volume) {
-    return containerMap.values()
-                       .stream()
-                       .filter(x -> volumeUuid.equals(
-                               x.getContainerData().getVolume()
-                                       .getStorageID()))
-                       .iterator();
+    return containerMap.values().stream()
+        .filter(x -> volumeUuid.equals(x.getContainerData().getVolume()
+            .getStorageID()))
+        .iterator();
-  public Iterator<Map.Entry<Long, Container>> getContainerMapIterator() {
-    containerMap.keySet().stream().collect(Collectors.toSet());
+  public Iterator<Map.Entry<Long, Container<?>>> getContainerMapIterator() {
-  public Map<Long, Container> getContainerMapCopy() {
+  public Map<Long, Container<?>> getContainerMapCopy() {
-  public Map<Long, Container> getContainerMap() {
+  public Map<Long, Container<?>> getContainerMap() {
-   * @throws StorageContainerException
-    ConcurrentNavigableMap<Long, Container> map;
+    ConcurrentNavigableMap<Long, Container<?>> map;
-    for (Container entry : map.values()) {
+    for (Container<?> entry : map.values()) {
-   * @throws IOException
-    List<Container> containers = containerMap.values().stream().collect(
-        Collectors.toList());
+    List<Container<?>> containers = new ArrayList<>(containerMap.values());
-    for (Container container: containers) {
+    for (Container<?> container: containers) {
-        Container container = containerMap.get(id);
+        Container<?> container = containerMap.get(id);
