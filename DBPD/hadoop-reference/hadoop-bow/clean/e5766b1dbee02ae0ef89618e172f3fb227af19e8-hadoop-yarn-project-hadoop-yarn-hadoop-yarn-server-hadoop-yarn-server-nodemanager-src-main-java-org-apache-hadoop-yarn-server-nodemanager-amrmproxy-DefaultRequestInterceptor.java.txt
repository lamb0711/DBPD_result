YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)

-import org.apache.hadoop.yarn.server.api.DistributedSchedulerProtocol;
+import org.apache.hadoop.yarn.server.api.DistributedSchedulingAMProtocol;
-import org.apache.hadoop.yarn.server.api.protocolrecords
-    .DistSchedAllocateResponse;
-import org.apache.hadoop.yarn.server.api.protocolrecords.DistSchedAllocateRequest;
-import org.apache.hadoop.yarn.server.api.protocolrecords.DistSchedRegisterResponse;
+import org.apache.hadoop.yarn.server.api.protocolrecords.DistributedSchedulingAllocateRequest;
+import org.apache.hadoop.yarn.server.api.protocolrecords.DistributedSchedulingAllocateResponse;
+import org.apache.hadoop.yarn.server.api.protocolrecords.RegisterDistributedSchedulingAMResponse;
-  private DistributedSchedulerProtocol rmClient;
+  private DistributedSchedulingAMProtocol rmClient;
-      rmClient =
-          user.doAs(new PrivilegedExceptionAction<DistributedSchedulerProtocol>() {
+      rmClient = user.doAs(
+          new PrivilegedExceptionAction<DistributedSchedulingAMProtocol>() {
-            public DistributedSchedulerProtocol run() throws Exception {
+            public DistributedSchedulingAMProtocol run() throws Exception {
-                  DistributedSchedulerProtocol.class);
+                  DistributedSchedulingAMProtocol.class);
-  public DistSchedRegisterResponse
+  public RegisterDistributedSchedulingAMResponse
-  public DistSchedAllocateResponse allocateForDistributedScheduling(
-      DistSchedAllocateRequest request) throws YarnException, IOException {
+  public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(
+      DistributedSchedulingAllocateRequest request)
+      throws YarnException, IOException {
-    DistSchedAllocateResponse allocateResponse =
+    DistributedSchedulingAllocateResponse allocateResponse =
-    if (rmClient instanceof DistributedSchedulerProtocol) {
-      this.rmClient = (DistributedSchedulerProtocol)rmClient;
+    if (rmClient instanceof DistributedSchedulingAMProtocol) {
+      this.rmClient = (DistributedSchedulingAMProtocol)rmClient;
-      this.rmClient = new DistributedSchedulerProtocol() {
+      this.rmClient = new DistributedSchedulingAMProtocol() {
-        public DistSchedRegisterResponse
+        public RegisterDistributedSchedulingAMResponse
-        public DistSchedAllocateResponse allocateForDistributedScheduling(
-            DistSchedAllocateRequest request)
+        public DistributedSchedulingAllocateResponse
+            allocateForDistributedScheduling(
+            DistributedSchedulingAllocateRequest request)
