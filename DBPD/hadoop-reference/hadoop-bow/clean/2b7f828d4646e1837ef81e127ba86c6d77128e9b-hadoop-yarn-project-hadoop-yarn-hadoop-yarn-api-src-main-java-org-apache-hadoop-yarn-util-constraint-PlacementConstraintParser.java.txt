YARN-9252. Allocation Tag Namespace support in Distributed Shell. Contributed by Prabhu Joseph.

+import org.apache.hadoop.yarn.api.records.AllocationTagNamespaceType;
+import org.apache.hadoop.yarn.api.resource.PlacementConstraint.TargetExpression;
+import org.apache.hadoop.yarn.api.resource.PlacementConstraints.PlacementTargets;
+import java.util.HashSet;
+  private static final char NAMESPACE_DELIM = '/';
+    TargetExpression parseNameSpace(String targetTag)
+        throws PlacementConstraintParseException {
+      int i = targetTag.lastIndexOf(NAMESPACE_DELIM);
+      if (i != -1) {
+        String namespace = targetTag.substring(0, i);
+        for (AllocationTagNamespaceType type :
+            AllocationTagNamespaceType.values()) {
+          if (type.getTypeKeyword().equals(namespace)) {
+            return PlacementTargets.allocationTagWithNamespace(
+                namespace, targetTag.substring(i+1));
+          }
+        }
+        throw new PlacementConstraintParseException(
+            "Invalid namespace prefix: " + namespace);
+      } else {
+        return PlacementTargets.allocationTag(targetTag);
+      }
+    }
+
-      PlacementConstraint.TargetExpression target = null;
+      TargetExpression target = null;
-        target = PlacementConstraints.PlacementTargets
-            .nodeAttribute(attributeName,
-                constraintEntities
-                    .toArray(new String[constraintEntities.size()]));
+        target = PlacementTargets.nodeAttribute(attributeName,
+            constraintEntities
+            .toArray(new String[constraintEntities.size()]));
-        Set<String> constraintEntities = new TreeSet<>();
+        Set<TargetExpression> targetExpressions = new HashSet<>();
-          constraintEntities.add(tag);
+          TargetExpression t = parseNameSpace(tag);
+          targetExpressions.add(t);
-        PlacementConstraint.TargetExpression target = null;
-        if(!constraintEntities.isEmpty()) {
-          target = PlacementConstraints.PlacementTargets.allocationTag(
-              constraintEntities
-                  .toArray(new String[constraintEntities.size()]));
-        }
+        TargetExpression[] targetArr = targetExpressions.toArray(
+            new TargetExpression[targetExpressions.size()]);
-              .targetIn(scope, target);
+              .targetIn(scope, targetArr);
-              .targetNotIn(scope, target);
+              .targetNotIn(scope, targetArr);
-      ArrayList<String> targetTags = new ArrayList<>();
+      Set<TargetExpression> targetExpressions = new HashSet<>();
-        targetTags.add(resetElements.pop());
+        String tag = resetElements.pop();
+        TargetExpression t = parseNameSpace(tag);
+        targetExpressions.add(t);
+      TargetExpression[] targetArr = targetExpressions.toArray(
+          new TargetExpression[targetExpressions.size()]);
-      return PlacementConstraints.cardinality(scope, min, max,
-          targetTags.toArray(new String[targetTags.size()]));
+      return PlacementConstraints.targetCardinality(scope, min, max, targetArr);
-}
+}
