HDDS-981. Block allocation should involve pipeline selection and then container selection.
Contributed by Lokesh Jain.

+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;
+import org.apache.hadoop.ozone.OzoneConfigKeys;
+import java.util.concurrent.atomic.AtomicBoolean;
+  private static AtomicBoolean isPipelineCreatorRunning =
+      new AtomicBoolean(false);
-   * @param pipeline - Pipeline to be created
+   *
+   * @param pipeline  - Pipeline to be created
+   *
-   * @param pipeline - Pipeline to be destroyed
-   * @param ozoneConf - Ozone configuration
+   * @param pipeline        - Pipeline to be destroyed
+   * @param ozoneConf       - Ozone configuration
+    for (DatanodeDetails dn : pipeline.getNodes()) {
+      try {
+        destroyPipeline(dn, pipeline.getId(), ozoneConf);
+      } catch (IOException e) {
+        LOG.warn("Pipeline destroy failed for pipeline={} dn={}",
+            pipeline.getId(), dn);
+      }
+    }
-    for (DatanodeDetails dn : pipeline.getNodes()) {
-      destroyPipeline(dn, pipeline.getId(), ozoneConf);
-    }
+    triggerPipelineCreation(pipelineManager, ozoneConf, 0);
+   *
-   * @param pipeline - Pipeline to be destroyed
-   * @param ozoneConf - Ozone Configuration
-   * @param onTimeout - if true pipeline is removed and destroyed on datanodes
-   *                  after timeout
+   * @param pipeline        - Pipeline to be destroyed
+   * @param ozoneConf       - Ozone Configuration
+   * @param onTimeout       - if true pipeline is removed and destroyed on
+   *                        datanodes after timeout
-   * @param dn - Datanode on which pipeline needs to be destroyed
+   *
+   * @param dn         - Datanode on which pipeline needs to be destroyed
-   * @param ozoneConf - Ozone configuration
+   * @param ozoneConf  - Ozone configuration
+
+  /**
+   * Schedules a fixed interval job to create pipelines.
+   *
+   * @param pipelineManager - Pipeline manager
+   * @param conf            - Configuration
+   */
+  public static void scheduleFixedIntervalPipelineCreator(
+      PipelineManager pipelineManager, Configuration conf) {
+    long intervalInMillis = conf
+        .getTimeDuration(ScmConfigKeys.OZONE_SCM_PIPELINE_CREATION_INTERVAL,
+            ScmConfigKeys.OZONE_SCM_PIPELINE_CREATION_INTERVAL_DEFAULT,
+            TimeUnit.MILLISECONDS);
+    // TODO: #CLUTIL We can start the job asap
+    TimeDuration timeDuration =
+        TimeDuration.valueOf(intervalInMillis, TimeUnit.MILLISECONDS);
+    timeoutScheduler.onTimeout(timeDuration,
+        () -> fixedIntervalPipelineCreator(pipelineManager, conf,
+            timeDuration), LOG,
+        () -> "FixedIntervalPipelineCreatorJob failed.");
+  }
+
+  private static void fixedIntervalPipelineCreator(
+      PipelineManager pipelineManager, Configuration conf,
+      TimeDuration timeDuration) {
+    timeoutScheduler.onTimeout(timeDuration,
+        () -> fixedIntervalPipelineCreator(pipelineManager, conf,
+            timeDuration), LOG,
+        () -> "FixedIntervalPipelineCreatorJob failed.");
+    triggerPipelineCreation(pipelineManager, conf, 0);
+  }
+
+  /**
+   * Triggers pipeline creation after the specified time.
+   *
+   * @param pipelineManager - Pipeline manager
+   * @param conf            - Configuration
+   * @param afterMillis     - Time after which pipeline creation needs to be
+   *                        triggered
+   */
+  public static void triggerPipelineCreation(PipelineManager pipelineManager,
+      Configuration conf, long afterMillis) {
+    // TODO: #CLUTIL introduce a better mechanism to not have more than one
+    // job of a particular type running, probably via ratis.
+    if (!isPipelineCreatorRunning.compareAndSet(false, true)) {
+      return;
+    }
+    timeoutScheduler
+        .onTimeout(TimeDuration.valueOf(afterMillis, TimeUnit.MILLISECONDS),
+            () -> createPipelines(pipelineManager, conf), LOG,
+            () -> "PipelineCreation failed.");
+  }
+
+  private static void createPipelines(PipelineManager pipelineManager,
+      Configuration conf) {
+    // TODO: #CLUTIL Different replication factor may need to be supported
+    HddsProtos.ReplicationType type = HddsProtos.ReplicationType.valueOf(
+        conf.get(OzoneConfigKeys.OZONE_REPLICATION_TYPE,
+            OzoneConfigKeys.OZONE_REPLICATION_TYPE_DEFAULT));
+
+    for (HddsProtos.ReplicationFactor factor : HddsProtos.ReplicationFactor
+        .values()) {
+      while (true) {
+        try {
+          pipelineManager.createPipeline(type, factor);
+        } catch (IOException ioe) {
+          break;
+        } catch (Throwable t) {
+          LOG.error("Error while creating pipelines {}", t);
+          break;
+        }
+      }
+    }
+    isPipelineCreatorRunning.set(false);
+  }
