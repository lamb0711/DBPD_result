HDFS-11859. Ozone: SCM: Separate BlockLocationProtocol from ContainerLocationProtocol. Contributed by Xiaoyu Yao.

+import org.apache.hadoop.ozone.protocol.proto.ScmBlockLocationProtocolProtos;
+import org.apache.hadoop.ozone.protocolPB
+    .ScmBlockLocationProtocolServerSideTranslatorPB;
+import org.apache.hadoop.scm.protocolPB.ScmBlockLocationProtocolPB;
-    .StorageContainerLocationProtocolProtos.DeleteScmBlockResult.Result;
+    .ScmBlockLocationProtocolProtos.DeleteScmBlockResult.Result;
+    .OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY;
+import static org.apache.hadoop.scm.ScmConfigKeys
+  /** The RPC server that listens to requests from block service clients. */
+  private final RPC.Server blockRpcServer;
+  private final InetSocketAddress blockRpcAddress;
+
+    RPC.setProtocolEngine(conf, ScmBlockLocationProtocolPB.class,
+        ProtobufRpcEngine.class);
+    // SCM Container Service RPC
-                new StorageContainerLocationProtocolServerSideTranslatorPB(
-                    this, this));
+            new StorageContainerLocationProtocolServerSideTranslatorPB(this));
+
+    // SCM Block Service RPC
+    BlockingService blockProtoPbService =
+        ScmBlockLocationProtocolProtos
+            .ScmBlockLocationProtocolService
+            .newReflectiveBlockingService(
+            new ScmBlockLocationProtocolServerSideTranslatorPB(this));
+
+    final InetSocketAddress scmBlockAddress =
+        OzoneClientUtils.getScmBlockClientBindAddress(conf);
+    blockRpcServer = startRpcServer(conf, scmBlockAddress,
+        ScmBlockLocationProtocolPB.class, blockProtoPbService,
+        handlerCount);
+    blockRpcAddress = updateListenAddress(conf,
+        OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY, scmBlockAddress, blockRpcServer);
+
+    LOG.info(buildRpcServerStartMessage(
+        "ScmBlockLocationProtocol RPC server", blockRpcAddress));
+    blockRpcServer.start();
+    LOG.info("Stopping block service RPC server");
+    blockRpcServer.stop();
+      blockRpcServer.join();
