HDFS-5158. Add command-line support for manipulating cache directives

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.NoSuchElementException;
-import org.apache.hadoop.hdfs.protocol.PathCacheDirective;
-import org.apache.hadoop.hdfs.protocol.PathCacheEntry;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.EmptyPathError;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPathNameError;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPoolNameError;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.UnexpectedAddPathCacheDirectiveException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.InvalidIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.NoSuchIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.RemovePermissionDeniedException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.UnexpectedRemovePathCacheEntryException;
+import org.apache.hadoop.hdfs.protocol.PathBasedCacheDirective;
+import org.apache.hadoop.hdfs.protocol.PathBasedCacheEntry;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.EmptyPathError;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.InvalidPathNameError;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.InvalidPoolNameError;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.UnexpectedAddPathBasedCacheDirectiveException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.InvalidIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.NoSuchIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.RemovePermissionDeniedException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.UnexpectedRemovePathBasedCacheEntryException;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathCacheDirectiveProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathCacheDirectiveErrorProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathCacheDirectivesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathCacheDirectivesResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathBasedCacheDirectiveProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathBasedCacheDirectiveErrorProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathBasedCacheDirectivesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathBasedCacheDirectivesResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesElementProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesElementProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathCacheEntriesResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathCacheEntryErrorProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheEntriesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheEntriesResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheEntryErrorProto;
-  private static IOException addPathCacheDirectivesError(long code,
-      PathCacheDirective directive) {
-    if (code == AddPathCacheDirectiveErrorProto.EMPTY_PATH_ERROR_VALUE) {
+  private static IOException addPathBasedCacheDirectivesError(long code,
+      PathBasedCacheDirective directive) {
+    if (code == AddPathBasedCacheDirectiveErrorProto.EMPTY_PATH_ERROR_VALUE) {
-    } else if (code == AddPathCacheDirectiveErrorProto.
+    } else if (code == AddPathBasedCacheDirectiveErrorProto.
-    } else if (code == AddPathCacheDirectiveErrorProto.
+    } else if (code == AddPathBasedCacheDirectiveErrorProto.
-      return new UnexpectedAddPathCacheDirectiveException(directive);
+      return new UnexpectedAddPathBasedCacheDirectiveException(directive);
-  public List<Fallible<PathCacheEntry>> addPathCacheDirectives(
-        List<PathCacheDirective> directives) throws IOException {
+  public List<Fallible<PathBasedCacheEntry>> addPathBasedCacheDirectives(
+        List<PathBasedCacheDirective> directives) throws IOException {
-      AddPathCacheDirectivesRequestProto.Builder builder =
-          AddPathCacheDirectivesRequestProto.newBuilder();
-      for (PathCacheDirective directive : directives) {
-        builder.addElements(PathCacheDirectiveProto.newBuilder().
+      AddPathBasedCacheDirectivesRequestProto.Builder builder =
+          AddPathBasedCacheDirectivesRequestProto.newBuilder();
+      for (PathBasedCacheDirective directive : directives) {
+        builder.addElements(PathBasedCacheDirectiveProto.newBuilder().
-      AddPathCacheDirectivesResponseProto result = 
-          rpcProxy.addPathCacheDirectives(null, builder.build());
+      AddPathBasedCacheDirectivesResponseProto result = 
+          rpcProxy.addPathBasedCacheDirectives(null, builder.build());
-      ArrayList<Fallible<PathCacheEntry>> results = 
-          new ArrayList<Fallible<PathCacheEntry>>(resultsCount);
+      ArrayList<Fallible<PathBasedCacheEntry>> results = 
+          new ArrayList<Fallible<PathBasedCacheEntry>>(resultsCount);
-        PathCacheDirective directive = directives.get(i);
+        PathBasedCacheDirective directive = directives.get(i);
-          results.add(new Fallible<PathCacheEntry>(
-                new PathCacheEntry(code, directive)));
+          results.add(new Fallible<PathBasedCacheEntry>(
+                new PathBasedCacheEntry(code, directive)));
-          results.add(new Fallible<PathCacheEntry>(
-                addPathCacheDirectivesError(code, directive))); 
+          results.add(new Fallible<PathBasedCacheEntry>(
+                addPathBasedCacheDirectivesError(code, directive))); 
-  private static IOException removePathCacheEntriesError(long code, long id) {
-    if (code == RemovePathCacheEntryErrorProto.
+  private static IOException removePathBasedCacheEntriesError(long code, long id) {
+    if (code == RemovePathBasedCacheEntryErrorProto.
-    } else if (code == RemovePathCacheEntryErrorProto.
+    } else if (code == RemovePathBasedCacheEntryErrorProto.
-    } else if (code == RemovePathCacheEntryErrorProto.
+    } else if (code == RemovePathBasedCacheEntryErrorProto.
-      return new UnexpectedRemovePathCacheEntryException(id);
+      return new UnexpectedRemovePathBasedCacheEntryException(id);
-  public List<Fallible<Long>> removePathCacheEntries(List<Long> ids)
+  public List<Fallible<Long>> removePathBasedCacheEntries(List<Long> ids)
-      RemovePathCacheEntriesRequestProto.Builder builder =
-          RemovePathCacheEntriesRequestProto.newBuilder();
+      RemovePathBasedCacheEntriesRequestProto.Builder builder =
+          RemovePathBasedCacheEntriesRequestProto.newBuilder();
-      RemovePathCacheEntriesResponseProto result = 
-          rpcProxy.removePathCacheEntries(null, builder.build());
+      RemovePathBasedCacheEntriesResponseProto result = 
+          rpcProxy.removePathBasedCacheEntries(null, builder.build());
-              removePathCacheEntriesError(code, ids.get(i))));
+              removePathBasedCacheEntriesError(code, ids.get(i))));
-  private static class BatchedPathCacheEntries
-      implements BatchedEntries<PathCacheEntry> {
-    private ListPathCacheEntriesResponseProto response;
+  private static class BatchedPathBasedCacheEntries
+      implements BatchedEntries<PathBasedCacheEntry> {
+    private ListPathBasedCacheEntriesResponseProto response;
-    BatchedPathCacheEntries(ListPathCacheEntriesResponseProto response) {
+    BatchedPathBasedCacheEntries(ListPathBasedCacheEntriesResponseProto response) {
-    public PathCacheEntry get(int i) {
-      ListPathCacheEntriesElementProto elementProto =
+    public PathBasedCacheEntry get(int i) {
+      ListPathBasedCacheEntriesElementProto elementProto =
-      return new PathCacheEntry(elementProto.getId(), 
-          new PathCacheDirective(elementProto.getPath(),
+      return new PathBasedCacheEntry(elementProto.getId(), 
+          new PathBasedCacheDirective(elementProto.getPath(),
-  private class PathCacheEntriesIterator
-      extends BatchedRemoteIterator<Long, PathCacheEntry> {
+  private class PathBasedCacheEntriesIterator
+      extends BatchedRemoteIterator<Long, PathBasedCacheEntry> {
+    private final String path;
-    public PathCacheEntriesIterator(long prevKey, String pool) {
+    public PathBasedCacheEntriesIterator(long prevKey, String pool, String path) {
+      this.path = path;
-    public BatchedEntries<PathCacheEntry> makeRequest(
+    public BatchedEntries<PathBasedCacheEntry> makeRequest(
-      ListPathCacheEntriesResponseProto response;
+      ListPathBasedCacheEntriesResponseProto response;
-        ListPathCacheEntriesRequestProto req =
-            ListPathCacheEntriesRequestProto.newBuilder().
-              setPrevId(nextKey).
-              setPool(pool).
-              build();
-        response = rpcProxy.listPathCacheEntries(null, req);
-        if (response.getElementsCount() == 0) {
-          response = null;
+        ListPathBasedCacheEntriesRequestProto.Builder builder =
+            ListPathBasedCacheEntriesRequestProto.newBuilder().setPrevId(nextKey);
+        if (pool != null) {
+          builder.setPool(pool);
+        if (path != null) {
+          builder.setPath(path);
+        }
+        ListPathBasedCacheEntriesRequestProto req = builder.build();
+        response = rpcProxy.listPathBasedCacheEntries(null, req);
-      return new BatchedPathCacheEntries(response);
+      return new BatchedPathBasedCacheEntries(response);
-    public Long elementToPrevKey(PathCacheEntry element) {
+    public Long elementToPrevKey(PathBasedCacheEntry element) {
-  public RemoteIterator<PathCacheEntry> listPathCacheEntries(long prevId,
-      String pool) throws IOException {
-    return new PathCacheEntriesIterator(prevId, pool);
+  public RemoteIterator<PathBasedCacheEntry> listPathBasedCacheEntries(long prevId,
+      String pool, String path) throws IOException {
+    return new PathBasedCacheEntriesIterator(prevId, pool, path);
