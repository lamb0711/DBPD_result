YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He

+import org.apache.slider.api.resource.Component;
-import org.apache.slider.providers.ProviderRole;
-import org.apache.slider.providers.ProviderService;
-import org.apache.slider.providers.SliderProviderFactory;
-import org.apache.slider.server.appmaster.actions.ActionStartContainer;
+import org.apache.hadoop.yarn.service.provider.ProviderService;
+import org.apache.hadoop.yarn.service.provider.ProviderFactory;
+import org.apache.hadoop.yarn.service.compinstance.ComponentInstance;
-import org.apache.slider.server.appmaster.state.RoleInstance;
-import org.apache.slider.server.appmaster.state.RoleStatus;
+import java.util.HashMap;
-import java.util.concurrent.TimeUnit;
-import static org.apache.slider.common.SliderKeys.KEY_CONTAINER_LAUNCH_DELAY;
+import static org.apache.hadoop.yarn.service.conf.SliderKeys.KEY_CONTAINER_LAUNCH_DELAY;
-  private final QueueAccess actionQueue;
+  private  QueueAccess actionQueue;
-  private final SliderFileSystem fs;
+  private  SliderFileSystem fs;
-  private Map<String, String> envVars;
+  private Map<String, String> envVars = new HashMap<>();
+  public RoleLaunchService(SliderFileSystem fs) {
+    super(ROLE_LAUNCH_SERVICE);
+    this.fs = fs;
+  }
+
+  }
+
+  public void launchComponent(Application application,
+      ComponentInstance instance, Container container) {
-        new RoleLaunchService.RoleLauncher(assignment, application,
-            credentials);
+        new RoleLaunchService.RoleLauncher(application, instance,
+            container);
-
-    private final ContainerAssignment assignment;
-    public final ProviderRole role;
-    private final Credentials credentials;
+    public ComponentInstance instance;
-    public RoleLauncher(ContainerAssignment assignment,
+    public RoleLauncher(
-        Credentials credentials) {
-      this.assignment = assignment;
-      this.credentials = credentials;
-      this.container = assignment.container;
-      RoleStatus roleStatus = assignment.role;
-      ProviderRole providerRole = roleStatus.getProviderRole();
-      this.role = providerRole;
+        ComponentInstance instance, Container container) {
+      this.container = container;
-
-    }
-
-    @Override
-    public String toString() {
-      return "RoleLauncher{" +
-             "container=" + container.getId() +
-             ", containerRole='" + role.name + '\'' +
-             '}';
+      this.instance = instance;
-            new ContainerLauncher(getConfig(), fs, container, credentials);
-        containerLauncher.setupUGI();
+            new ContainerLauncher(null, fs, container, null);
-        RoleInstance failedInstance = role.failedInstances.poll();
-        RoleInstance instance;
-        if (failedInstance != null) {
-          instance = new RoleInstance(container, failedInstance);
-        } else {
-          instance = new RoleInstance(container, role);
-        }
-        String[] envDescription = containerLauncher.dumpEnvToString();
-        String commandsAsString = containerLauncher.getCommandsAsString();
-        log.info("Launching container {} for component instance = {}",
-            container.getId(), instance.getCompInstanceName());
-        log.info("Starting container with command: {}", commandsAsString);
-        instance.command = commandsAsString;
-        instance.role = role.name;
-        instance.roleId = role.id;
-        instance.environment = envDescription;
-
-        ProviderService provider = SliderProviderFactory.getProviderService(
-            role.component.getArtifact());
+        Component compSpec = instance.getCompSpec();
+        ProviderService provider = ProviderFactory.getProviderService(
+            compSpec.getArtifact());
-            container, role, fs, instance);
+            instance, fs);
-        long delay = role.component.getConfiguration()
-            .getPropertyLong(KEY_CONTAINER_LAUNCH_DELAY, 0);
+        long delay = compSpec.getConfiguration()
+                .getPropertyLong(KEY_CONTAINER_LAUNCH_DELAY, 0);
-        log.info("Container launch delay for {} set to {} seconds", role.name,
-            delay);
-        actionQueue.schedule(
-            new ActionStartContainer("starting " + role.name, container,
-                containerLauncher.completeContainerLaunch(), instance, delay,
-                TimeUnit.SECONDS));
+        if (delay > 0) {
+          Thread.sleep(delay * 1000);
+        }
+        instance.getComponent().getScheduler().getNmClient()
+            .startContainerAsync(container,
+                containerLauncher.completeContainerLaunch());
-        log.error("Exception thrown while trying to start " + role.name
+        log.error("Exception thrown while trying to start " + instance
+            .getCompInstanceName()
