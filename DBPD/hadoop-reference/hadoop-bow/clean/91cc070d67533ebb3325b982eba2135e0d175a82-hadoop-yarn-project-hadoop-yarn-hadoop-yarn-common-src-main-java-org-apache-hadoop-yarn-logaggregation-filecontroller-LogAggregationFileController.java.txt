YARN-6877. Create an abstract log reader for extendability. Contributed by Xuan Gong.

+import java.io.OutputStream;
+import java.io.PrintStream;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.Map;
+import org.apache.commons.io.IOUtils;
+import org.apache.hadoop.yarn.api.records.ApplicationAccessType;
+import org.apache.hadoop.yarn.webapp.View.ViewContext;
+import org.apache.hadoop.yarn.webapp.view.HtmlBlock.Block;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogMeta;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogsRequest;
+  protected PrintStream createPrintStream(String localDir, String nodeId,
+      String containerId) throws IOException {
+    PrintStream out = System.out;
+    if(localDir != null && !localDir.isEmpty()) {
+      Path nodePath = new Path(localDir, LogAggregationUtils
+          .getNodeString(nodeId));
+      Files.createDirectories(Paths.get(nodePath.toString()));
+      Path containerLogPath = new Path(nodePath, containerId);
+      out = new PrintStream(containerLogPath.toString(), "UTF-8");
+    }
+    return out;
+  }
+
+  protected void closePrintStream(OutputStream out) {
+    if (out != System.out) {
+      IOUtils.closeQuietly(out);
+    }
+  }
+
+  /**
+   * Output container log.
+   * @param logRequest {@link ContainerLogsRequest}
+   * @param os the output stream
+   * @throws IOException if we can not access the log file.
+   */
+  public abstract boolean readAggregatedLogs(ContainerLogsRequest logRequest,
+      OutputStream os) throws IOException;
+
+  /**
+   * Return a list of {@link ContainerLogMeta} for an application
+   * from Remote FileSystem.
+   *
+   * @param logRequest {@link ContainerLogsRequest}
+   * @return a list of {@link ContainerLogMeta}
+   * @throws IOException if there is no available log file
+   */
+  public abstract List<ContainerLogMeta> readAggregatedLogsMeta(
+      ContainerLogsRequest logRequest) throws IOException;
+
+  /**
+   * Render Aggregated Logs block.
+   * @param html the html
+   * @param context the ViewContext
+   */
+  public abstract void renderAggregatedLogsBlock(Block html,
+      ViewContext context);
+
+  /**
+   * Returns the owner of the application.
+   *
+   * @param the aggregatedLog path.
+   * @return the application owner.
+   * @throws IOException
+   */
+  public abstract String getApplicationOwner(Path aggregatedLogPath)
+      throws IOException;
+
+  /**
+   * Returns ACLs for the application. An empty map is returned if no ACLs are
+   * found.
+   *
+   * @param the aggregatedLog path.
+   * @return a map of the Application ACLs.
+   * @throws IOException
+   */
+  public abstract Map<ApplicationAccessType, String> getApplicationAcls(
+      Path aggregatedLogPath) throws IOException;
+
