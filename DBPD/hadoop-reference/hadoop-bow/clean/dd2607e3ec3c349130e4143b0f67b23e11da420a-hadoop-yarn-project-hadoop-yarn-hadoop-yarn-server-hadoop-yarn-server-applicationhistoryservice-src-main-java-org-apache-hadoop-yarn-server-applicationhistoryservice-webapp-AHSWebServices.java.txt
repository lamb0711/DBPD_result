YARN-10026. Pull out common code pieces from ATS v1.5 and v2. Contributed by Adam Antal

-import javax.ws.rs.core.Response.ResponseBuilder;
-import javax.ws.rs.core.Response.Status;
-import com.sun.jersey.api.client.ClientHandlerException;
-import com.sun.jersey.api.client.UniformInterfaceException;
-import org.apache.hadoop.yarn.api.records.ApplicationId;
-import org.apache.hadoop.yarn.api.records.ContainerId;
-import org.apache.hadoop.yarn.logaggregation.filecontroller.LogAggregationFileControllerFactory;
-import org.apache.hadoop.yarn.server.webapp.LogWebServiceUtils;
+import org.apache.hadoop.yarn.server.webapp.LogServlet;
-import org.apache.hadoop.yarn.webapp.NotFoundException;
-import com.google.common.base.Joiner;
-import org.codehaus.jettison.json.JSONException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-  private static final Logger LOG = LoggerFactory
-      .getLogger(AHSWebServices.class);
-  private static final String NM_DOWNLOAD_URI_STR =
-      "/ws/v1/node/containers";
-  private static final Joiner JOINER = Joiner.on("");
-  private static final Joiner DOT_JOINER = Joiner.on(". ");
-  private final Configuration conf;
-  private final LogAggregationFileControllerFactory factory;
+  private LogServlet logServlet;
-    this.conf = conf;
-    this.factory = new LogAggregationFileControllerFactory(conf);
+    this.logServlet = new LogServlet(conf, this);
-    ContainerId containerId = null;
-    try {
-      containerId = ContainerId.fromString(containerIdStr);
-    } catch (IllegalArgumentException e) {
-      throw new BadRequestException("invalid container id, " + containerIdStr);
-    }
-
-    ApplicationId appId = containerId.getApplicationAttemptId()
-        .getApplicationId();
-    AppInfo appInfo;
-    try {
-      appInfo = super.getApp(req, res, appId.toString());
-    } catch (Exception ex) {
-      // directly find logs from HDFS.
-      return LogWebServiceUtils
-          .getContainerLogMeta(factory, appId, null, null, containerIdStr,
-              false);
-    }
-    // if the application finishes, directly find logs
-    // from HDFS.
-    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {
-      return LogWebServiceUtils
-          .getContainerLogMeta(factory, appId, null, null, containerIdStr,
-              false);
-    }
-    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {
-      String appOwner = appInfo.getUser();
-      String nodeHttpAddress = null;
-      if (nmId != null && !nmId.isEmpty()) {
-        try {
-          nodeHttpAddress = getNMWebAddressFromRM(conf, nmId);
-        } catch (Exception ex) {
-          LOG.debug("{}", ex);
-        }
-      }
-      if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
-        ContainerInfo containerInfo;
-        try {
-          containerInfo = super.getContainer(
-              req, res, appId.toString(),
-              containerId.getApplicationAttemptId().toString(),
-              containerId.toString());
-        } catch (Exception ex) {
-          // return log meta for the aggregated logs if exists.
-          // It will also return empty log meta for the local logs.
-          return LogWebServiceUtils
-              .getContainerLogMeta(factory, appId, appOwner, null,
-                  containerIdStr, true);
-        }
-        nodeHttpAddress = containerInfo.getNodeHttpAddress();
-        // make sure nodeHttpAddress is not null and not empty. Otherwise,
-        // we would only get log meta for aggregated logs instead of
-        // re-directing the request
-        if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()
-            || redirected_from_node) {
-          // return log meta for the aggregated logs if exists.
-          // It will also return empty log meta for the local logs.
-          // If this is the redirect request from NM, we should not
-          // re-direct the request back. Simply output the aggregated log meta.
-          return LogWebServiceUtils
-              .getContainerLogMeta(factory, appId, appOwner, null,
-                  containerIdStr, true);
-        }
-      }
-      String uri = "/" + containerId.toString() + "/logs";
-      String resURI = JOINER.join(
-          LogWebServiceUtils.getAbsoluteNMWebAddress(conf, nodeHttpAddress),
-          NM_DOWNLOAD_URI_STR, uri);
-      String query = req.getQueryString();
-      if (query != null && !query.isEmpty()) {
-        resURI += "?" + query;
-      }
-      ResponseBuilder response = Response.status(
-          HttpServletResponse.SC_TEMPORARY_REDIRECT);
-      response.header("Location", resURI);
-      return response.build();
-    } else {
-      throw new NotFoundException(
-          "The application is not at Running or Finished State.");
-    }
+    return logServlet.getContainerLogsInfo(req, containerIdStr, nmId,
+        redirected_from_node, null);
-    ContainerId containerId;
-    try {
-      containerId = ContainerId.fromString(containerIdStr);
-    } catch (IllegalArgumentException ex) {
-      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,
-          "Invalid ContainerId: " + containerIdStr);
-    }
-
-    final long length = LogWebServiceUtils.parseLongParam(size);
-
-    ApplicationId appId = containerId.getApplicationAttemptId()
-        .getApplicationId();
-    AppInfo appInfo;
-    try {
-      appInfo = super.getApp(req, res, appId.toString());
-    } catch (Exception ex) {
-      // directly find logs from HDFS.
-      return LogWebServiceUtils
-          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,
-              filename, format, length, false);
-    }
-    String appOwner = appInfo.getUser();
-    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {
-      // directly find logs from HDFS.
-      return LogWebServiceUtils
-          .sendStreamOutputResponse(factory, appId, appOwner, null,
-              containerIdStr, filename, format, length, false);
-    }
-
-    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {
-      String nodeHttpAddress = null;
-      if (nmId != null && !nmId.isEmpty()) {
-        try {
-          nodeHttpAddress = getNMWebAddressFromRM(conf, nmId);
-        } catch (Exception ex) {
-          LOG.debug("{}", ex);
-        }
-      }
-      if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
-        ContainerInfo containerInfo;
-        try {
-          containerInfo = super.getContainer(
-              req, res, appId.toString(),
-              containerId.getApplicationAttemptId().toString(),
-              containerId.toString());
-        } catch (Exception ex) {
-          // output the aggregated logs
-          return LogWebServiceUtils
-              .sendStreamOutputResponse(factory, appId, appOwner, null,
-                  containerIdStr, filename, format, length, true);
-        }
-        nodeHttpAddress = containerInfo.getNodeHttpAddress();
-        // make sure nodeHttpAddress is not null and not empty. Otherwise,
-        // we would only get aggregated logs instead of re-directing the
-        // request.
-        // If this is the redirect request from NM, we should not re-direct the
-        // request back. Simply output the aggregated logs.
-        if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()
-            || redirected_from_node) {
-          // output the aggregated logs
-          return LogWebServiceUtils
-              .sendStreamOutputResponse(factory, appId, appOwner, null,
-                  containerIdStr, filename, format, length, true);
-        }
-      }
-      String uri = "/" + containerId.toString() + "/logs/" + filename;
-      String resURI = JOINER.join(
-          LogWebServiceUtils.getAbsoluteNMWebAddress(conf, nodeHttpAddress),
-          NM_DOWNLOAD_URI_STR, uri);
-      String query = req.getQueryString();
-      if (query != null && !query.isEmpty()) {
-        resURI += "?" + query;
-      }
-      ResponseBuilder response = Response.status(
-          HttpServletResponse.SC_TEMPORARY_REDIRECT);
-      response.header("Location", resURI);
-      return response.build();
-    } else {
-      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,
-          "The application is not at Running or Finished State.");
-    }
+    return logServlet.getLogFile(req, containerIdStr, filename, format, size,
+        nmId, redirected_from_node, null);
-  @VisibleForTesting @InterfaceAudience.Private
-  public String getNMWebAddressFromRM(Configuration configuration,
-      String nodeId)
-      throws ClientHandlerException, UniformInterfaceException, JSONException {
-    return LogWebServiceUtils.getNMWebAddressFromRM(configuration, nodeId);
+  @VisibleForTesting
+  @InterfaceAudience.Private
+  LogServlet getLogServlet() {
+    return this.logServlet;
+  }
+
+  @VisibleForTesting
+  @InterfaceAudience.Private
+  void setLogServlet(LogServlet logServlet) {
+    this.logServlet = logServlet;
