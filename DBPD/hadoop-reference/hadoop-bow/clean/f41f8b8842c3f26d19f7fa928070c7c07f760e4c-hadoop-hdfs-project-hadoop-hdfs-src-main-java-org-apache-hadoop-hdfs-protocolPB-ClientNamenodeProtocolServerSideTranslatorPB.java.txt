HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520665 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.permission.FsPermission;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPoolError;
+import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPoolNameError;
+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesElementProto;
+import org.apache.hadoop.hdfs.server.namenode.UnsupportedActionException;
-  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(
-      RpcController controller, AddPathCacheDirectivesRequestProto request)
-          throws ServiceException {
+  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,
+      AddPathCacheDirectivesRequestProto request) throws ServiceException {
-        input.add(new PathCacheDirective(proto.getPath(),
-            proto.getPool().getId()));
+        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));
-      List<Fallible<PathCacheEntry>> output = server
-          .addPathCacheDirectives(input);
+      List<Fallible<PathCacheEntry>> output = server.addPathCacheDirectives(input);
-        } catch (InvalidPoolError ioe) {
+        } catch (InvalidPoolNameError ioe) {
-  public ListPathCacheEntriesResponseProto listPathCacheEntries(
-      RpcController controller, ListPathCacheEntriesRequestProto request)
-      throws ServiceException {
+  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,
+      ListPathCacheEntriesRequestProto request) throws ServiceException {
-      CachePool pool = PBHelper.convert(request.getPool());
-         server.listPathCacheEntries(
-             PBHelper.convert(request.getPrevEntry()).getEntryId(),
-             pool.getId(),
-             request.getMaxReplies());
+         server.listPathCacheEntries(request.getPrevId(), request.getPool());
-        builder.addEntries(PBHelper.convert(entry));
+        builder.addElements(
+            ListPathCacheEntriesElementProto.newBuilder().
+              setId(entry.getEntryId()).
+              setPath(entry.getDirective().getPath()).
+              setPool(entry.getDirective().getPool()));
-      server.addCachePool(PBHelper.convert(request.getInfo()));
+      CachePoolInfo info =
+          new CachePoolInfo(request.getPoolName());
+      if (request.hasOwnerName()) {
+        info.setOwnerName(request.getOwnerName());
+      }
+      if (request.hasGroupName()) {
+        info.setGroupName(request.getGroupName());
+      }
+      if (request.hasMode()) {
+        info.setMode(new FsPermission((short)request.getMode()));
+      }
+      if (request.hasWeight()) {
+        info.setWeight(request.getWeight());
+      }
+      server.addCachePool(info);
-
+  
-      server.modifyCachePool(
-          PBHelper.convert(request.getPool()).getId(),
-          PBHelper.convert(request.getInfo()));
+      CachePoolInfo info =
+          new CachePoolInfo(request.getPoolName());
+      if (request.hasOwnerName()) {
+        info.setOwnerName(request.getOwnerName());
+      }
+      if (request.hasGroupName()) {
+        info.setGroupName(request.getGroupName());
+      }
+      if (request.hasMode()) {
+        info.setMode(new FsPermission((short)request.getMode()));
+      }
+      if (request.hasWeight()) {
+        info.setWeight(request.getWeight());
+      }
+      server.modifyCachePool(info);
-      server.removeCachePool(PBHelper.convert(request.getPool()).getId());
+      server.removeCachePool(request.getPoolName());
-      RemoteIterator<CachePool> iter =
-        server.listCachePools(PBHelper.convert(request.getPrevPool()).getId(),
-            request.getMaxReplies());
+      RemoteIterator<CachePoolInfo> iter =
+        server.listCachePools(request.getPrevPoolName());
-        CachePool pool = iter.next();
-        ListCachePoolsResponseElementProto.Builder elemBuilder =
+        CachePoolInfo pool = iter.next();
+        ListCachePoolsResponseElementProto.Builder elemBuilder = 
-        elemBuilder.setPool(PBHelper.convert(pool));
+        elemBuilder.setPoolName(pool.getPoolName());
+        if (pool.getOwnerName() != null) {
+          elemBuilder.setOwnerName(pool.getOwnerName());
+        }
+        if (pool.getGroupName() != null) {
+          elemBuilder.setGroupName(pool.getGroupName());
+        }
+        if (pool.getMode() != null) {
+          elemBuilder.setMode(pool.getMode().toShort());
+        }
+        if (pool.getWeight() != null) {
+          elemBuilder.setWeight(pool.getWeight());
+        }
