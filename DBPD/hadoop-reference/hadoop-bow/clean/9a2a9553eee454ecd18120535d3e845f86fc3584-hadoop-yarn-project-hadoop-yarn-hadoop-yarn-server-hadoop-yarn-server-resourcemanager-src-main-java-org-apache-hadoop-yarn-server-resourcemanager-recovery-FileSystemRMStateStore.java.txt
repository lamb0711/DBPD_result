Fixing HDFS state-store. Contributed by Arun Suresh.

+import java.util.EnumSet;
+import org.apache.hadoop.fs.XAttrSetFlag;
-  @VisibleForTesting
+  private static final String UNREADABLE_BY_SUPERUSER_XATTRIB =
+          "security.hdfs.unreadable.by.superuser";
+  private boolean isHDFS;
+    isHDFS = fs.getScheme().toLowerCase().contains("hdfs");
+  @VisibleForTesting
+  void setIsHDFS(boolean isHDFS) {
+    this.isHDFS = isHDFS;
+  }
+
-      updateFile(versionNodePath, data);
+      updateFile(versionNodePath, data, false);
-      writeFileWithRetries(versionNodePath, data);
+      writeFileWithRetries(versionNodePath, data, false);
-      updateFile(epochNodePath, storeData);
+      updateFile(epochNodePath, storeData, false);
-      writeFileWithRetries(epochNodePath, storeData);
+      writeFileWithRetries(epochNodePath, storeData, false);
-              childNodeStatus.getLen());
+                  childNodeStatus.getLen());
+          // Set attribute if not already set
+          setUnreadableBySuperuserXattrib(childNodeStatus.getPath());
-          0, newChildNodeName.length() - ".new".length());
+              0, newChildNodeName.length() - ".new".length());
-      writeFileWithRetries(nodeCreatePath, appStateData);
+      writeFileWithRetries(nodeCreatePath, appStateData, true);
-      updateFile(nodeCreatePath, appStateData);
+      updateFile(nodeCreatePath, appStateData, true);
-      writeFileWithRetries(nodeCreatePath, attemptStateData);
+      writeFileWithRetries(nodeCreatePath, attemptStateData, true);
-      updateFile(nodeCreatePath, attemptStateData);
+      updateFile(nodeCreatePath, attemptStateData, true);
-      DELEGATION_TOKEN_PREFIX + identifier.getSequenceNumber());
+            DELEGATION_TOKEN_PREFIX + identifier.getSequenceNumber());
-      updateFile(nodeCreatePath, identifierData.toByteArray());
+      updateFile(nodeCreatePath, identifierData.toByteArray(), true);
-      writeFileWithRetries(nodeCreatePath, identifierData.toByteArray());
+      writeFileWithRetries(nodeCreatePath, identifierData.toByteArray(), true);
-      writeFileWithRetries(nodeCreatePath, os.toByteArray());
+      writeFileWithRetries(nodeCreatePath, os.toByteArray(), true);
+  @VisibleForTesting
+  protected Path getAppDir(ApplicationId appId) {
+    return getAppDir(rmAppRoot, appId);
+  }
+
+  @VisibleForTesting
+  protected Path getAppAttemptDir(ApplicationAttemptId appAttId) {
+    return getNodePath(getAppDir(appAttId.getApplicationId()), appAttId
+            .toString());
+  }
-  private void writeFileWithRetries(final Path outputPath,final byte[] data)
-      throws Exception {
+  private void writeFileWithRetries(final Path outputPath, final byte[] data,
+                                    final boolean makeUnreadableByAdmin)
+          throws Exception {
-        writeFile(outputPath, data);
+        writeFile(outputPath, data, makeUnreadableByAdmin);
-  private void writeFile(Path outputPath, byte[] data) throws Exception {
+  protected void writeFile(Path outputPath, byte[] data, boolean
+          makeUnradableByAdmin) throws Exception {
+      if (makeUnradableByAdmin) {
+        setUnreadableBySuperuserXattrib(tempPath);
+      }
-  protected void updateFile(Path outputPath, byte[] data) throws Exception {
+  protected void updateFile(Path outputPath, byte[] data, boolean
+          makeUnradableByAdmin) throws Exception {
-    writeFileWithRetries(newPath, data);
+    writeFileWithRetries(newPath, data, makeUnradableByAdmin);
-      updateFile(nodeCreatePath, stateData);
+      updateFile(nodeCreatePath, stateData, true);
-      writeFileWithRetries(nodeCreatePath, stateData);
+      writeFileWithRetries(nodeCreatePath, stateData, true);
+
+  private void setUnreadableBySuperuserXattrib(Path p)
+          throws IOException {
+    if (isHDFS &&
+            !fs.getXAttrs(p).containsKey(UNREADABLE_BY_SUPERUSER_XATTRIB)) {
+      fs.setXAttr(p, UNREADABLE_BY_SUPERUSER_XATTRIB, null,
+              EnumSet.of(XAttrSetFlag.CREATE));
+    }
+  }
