HDDS-2170. Add Object IDs and Update ID to Volume Object (#1510)


+  private long objectID;
+  private long updateID;
+
+  /**
+   * Set the Object ID. If this value is already set then this function throws.
+   * There is a reason why we cannot use the final here. The OmVolumeArgs is
+   * deserialized from the protobuf in many places in code. We need to set
+   * this object ID, after it is deserialized.
+   *
+   * @param obId - long
+   */
+  public void setObjectID(long obId) {
+    if(this.objectID != 0) {
+      throw new UnsupportedOperationException("Attempt to modify object ID " +
+          "which is not zero. Current Object ID is " + this.objectID);
+    }
+    this.objectID = obId;
+  }
+
+  /**
+   * Returns a monotonically increasing ID, that denotes the last update.
+   * Each time an update happens, this ID is incremented.
+   * @return long
+   */
+  public long getUpdateID() {
+    return updateID;
+  }
+
+  /**
+   * Sets the update ID. For each modification of this object, we will set
+   * this to a value greater than the current value.
+   * @param updateID  long
+   */
+  public void setUpdateID(long updateID) {
+    this.updateID = updateID;
+  }
+
+  /**
+   * A immutable identity field for this object.
+   * @return  long.
+   */
+  public long getObjectID() {
+    return objectID;
+  }
+   * @param  objectID - ID of this object.
+   * @param updateID - A sequence number that denotes the last update on this
+   * object. This is a monotonically increasing number.
+  @SuppressWarnings({"checkstyle:ParameterNumber", "This is invoked from a " +
+      "builder."})
-                       OmOzoneAclMap aclMap, long creationTime) {
+                       OmOzoneAclMap aclMap, long creationTime, long objectID,
+                      long updateID) {
+    this.objectID = objectID;
+    this.updateID = updateID;
+    auditMap.put(OzoneConsts.OBJECT_ID, String.valueOf(this.getObjectID()));
+    auditMap.put(OzoneConsts.UPDATE_ID, String.valueOf(this.getUpdateID()));
-    return creationTime == that.creationTime &&
-        quotaInBytes == that.quotaInBytes &&
-        Objects.equals(adminName, that.adminName) &&
-        Objects.equals(ownerName, that.ownerName) &&
-        Objects.equals(volume, that.volume);
+    return Objects.equals(this.objectID, that.objectID);
-    return Objects.hash(adminName, ownerName, volume, creationTime,
-        quotaInBytes);
+    return Objects.hash(this.objectID);
+    private long objectID;
+    private long updateID;
+
+    /**
+     * Sets the Object ID for this Object.
+     * Object ID are unique and immutable identifier for each object in the
+     * System.
+     * @param objectID - long
+     */
+    public void setObjectID(long objectID) {
+      this.objectID = objectID;
+    }
+
+    /**
+     * Sets the update ID for this Object. Update IDs are monotonically
+     * increasing values which are updated each time there is an update.
+     * @param updateID - long
+     */
+    public void setUpdateID(long updateID) {
+      this.updateID = updateID;
+    }
+
+
-          metadata, aclMap, creationTime);
+          metadata, aclMap, creationTime, objectID, updateID);
-
-
+        .setObjectID(objectID)
+        .setUpdateID(updateID)
-
-
-        volInfo.getCreationTime());
+        volInfo.getCreationTime(),
+        volInfo.getObjectID(),
+        volInfo.getUpdateID());
