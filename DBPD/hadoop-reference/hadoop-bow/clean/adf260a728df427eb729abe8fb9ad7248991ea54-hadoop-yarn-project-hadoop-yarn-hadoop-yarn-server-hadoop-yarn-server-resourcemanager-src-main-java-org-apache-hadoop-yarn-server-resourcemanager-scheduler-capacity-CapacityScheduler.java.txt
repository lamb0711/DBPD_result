Revert "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)"

This reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.

+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ContainerPreemptEvent;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.ContainerPreemptEvent;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.ContainerRescheduledEvent;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.SchedulerEventType;
-      super.completedContainer(
+      completedContainer(
-      super.completedContainer(
+      completedContainer(
-      super.completedContainer(container, completedContainer,
+      completedContainer(container, completedContainer,
-      killReservedContainer(reservedContainer);
+      dropContainerReservation(reservedContainer);
-      super.completedContainer(getRMContainer(containerId), 
+      completedContainer(getRMContainer(containerId), 
-    case KILL_RESERVED_CONTAINER:
+    case DROP_RESERVATION:
-      ContainerPreemptEvent killReservedContainerEvent =
-          (ContainerPreemptEvent) event;
-      RMContainer container = killReservedContainerEvent.getContainer();
-      killReservedContainer(container);
+      ContainerPreemptEvent dropReservationEvent = (ContainerPreemptEvent)event;
+      RMContainer container = dropReservationEvent.getContainer();
+      dropContainerReservation(container);
-    case KILL_PREEMPTED_CONTAINER:
+    case KILL_CONTAINER:
-      killPreemptedContainer(containerToBeKilled);
+      killContainer(containerToBeKilled);
+    }
+    break;
+    case CONTAINER_RESCHEDULED:
+    {
+      ContainerRescheduledEvent containerRescheduledEvent =
+          (ContainerRescheduledEvent) event;
+      RMContainer container = containerRescheduledEvent.getContainer();
+      recoverResourceRequestForContainer(container);
-      super.completedContainer(container,
+      completedContainer(container, 
-      super.completedContainer(reservedContainer,
+      completedContainer(reservedContainer, 
-  protected synchronized void completedContainerInternal(RMContainer rmContainer,
+  protected synchronized void completedContainer(RMContainer rmContainer,
+    if (rmContainer == null) {
+      LOG.info("Container " + containerStatus.getContainerId() +
+          " completed with event " + event);
+      return;
+    }
-  public void killReservedContainer(RMContainer container) {
+  public void dropContainerReservation(RMContainer container) {
-      LOG.debug(SchedulerEventType.KILL_RESERVED_CONTAINER + ":"
-          + container.toString());
+      LOG.debug("DROP_RESERVATION:" + container.toString());
-    // TODO: What happens if this is no longer a reserved container, for e.g if
-    // the reservation became an allocation.
-    super.completedContainer(container,
+    completedContainer(container,
-      LOG.debug(SchedulerEventType.PREEMPT_CONTAINER + ": appAttempt:"
-          + aid.toString() + " container: " + cont.toString());
+      LOG.debug("PREEMPT_CONTAINER: application:" + aid.toString() +
+          " container: " + cont.toString());
-      app.preemptContainer(cont.getContainerId());
+      app.addPreemptContainer(cont.getContainerId());
-  public void killPreemptedContainer(RMContainer cont) {
+  public void killContainer(RMContainer cont) {
-      LOG.debug(SchedulerEventType.KILL_PREEMPTED_CONTAINER + ": container"
-          + cont.toString());
+      LOG.debug("KILL_CONTAINER: container" + cont.toString());
-    super.completedContainer(cont, SchedulerUtils
-      .createPreemptedContainerStatus(cont.getContainerId(),
-        SchedulerUtils.PREEMPTED_CONTAINER), RMContainerEventType.KILL);
+    completedContainer(cont, SchedulerUtils.createPreemptedContainerStatus(
+      cont.getContainerId(), SchedulerUtils.PREEMPTED_CONTAINER),
+      RMContainerEventType.KILL);
