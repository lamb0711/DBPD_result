HDFS-14837. Review of Block.java. Contributed by David Mollitor.

-import java.io.*;
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.File;
+import java.io.IOException;
-import org.apache.hadoop.classification.InterfaceAudience;
-import org.apache.hadoop.classification.InterfaceStability;
-import org.apache.hadoop.io.*;
-
-/**************************************************
- * A Block is a Hadoop FS primitive, identified by a
- * long.
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+import org.apache.hadoop.io.Writable;
+import org.apache.hadoop.io.WritableFactories;
+import org.apache.hadoop.io.WritableFactory;
+
+/**
+ * A Block is a Hadoop FS primitive, identified by its block ID (a long). A
+ * block also has an accompanying generation stamp. A generation stamp is a
+ * monotonically increasing 8-byte number for each block that is maintained
+ * persistently by the NameNode. However, for the purposes of this class, two
+ * Blocks are considered equal iff they have the same block ID.
- **************************************************/
+ * @see Block#equals(Object)
+ * @see Block#hashCode()
+ * @see Block#compareTo(Block)
+ */
-  /**
-   */
+
+   * Get the block name. The format of the name is in the format:
+   * <p>
+   * blk_1, blk_2, blk_3, etc.
+   * </p>
+   *
+   * @return the block name
-    return new StringBuilder().append(BLOCK_FILE_PREFIX)
-        .append(blockId).toString();
+    return BLOCK_FILE_PREFIX + blockId;
-  /**
-   */
+
-    StringBuilder sb = new StringBuilder();
-    sb.append(BLOCK_FILE_PREFIX).
-       append(b.blockId).append("_").
-       append(b.generationStamp);
-    return sb.toString();
+    return new StringBuilder(BLOCK_FILE_PREFIX)
+        .append(b.blockId)
+        .append('_')
+        .append(b.generationStamp)
+        .toString();
+   * Get the block name. The format of the name is in the format:
+   * <p>
+   * blk_block-id_generation, blk_1_1, blk_1_2, blk_2_1, etc.
+   * </p>
+   *
+   * @return the full block name
-    return toString(this);
+    return Block.toString(this);
-      .append("_")
+      .append('_')
-
-  @Override // Comparable
+  /**
+   * Compares this Block with the specified Block for order. Returns a negative
+   * integer, zero, or a positive integer as this Block is less than, equal to,
+   * or greater than the specified Block. Blocks are ordered based on their
+   * block ID.
+   *
+   * @param b the Block to be compared
+   * @return a negative integer, zero, or a positive integer as this Block is
+   *         less than, equal to, or greater than the specified Block.
+   */
+  @Override
-    return blockId < b.blockId ? -1 :
-        blockId > b.blockId ? 1 : 0;
-  }
-
-  @Override // Object
-  public boolean equals(Object o) {
-    return this == o || o instanceof Block && compareTo((Block) o) == 0;
+    return Long.compare(blockId, b.blockId);
-   * @return true if the two blocks have the same block ID and the same
-   * generation stamp, or if both blocks are null.
+   * Indicates whether some Block is "equal to" this one. Two blocks are
+   * considered equal if they have the same block ID.
+   *
+   * @param obj the reference object with which to compare.
+   * @return true if this Block is the same as the argument; false otherwise.
-  public static boolean matchingIdAndGenStamp(Block a, Block b) {
-    if (a == b) return true; // same block, or both null
-    // only one null
-    return !(a == null || b == null) &&
-        a.blockId == b.blockId &&
-        a.generationStamp == b.generationStamp;
+  @Override
+  public boolean equals(Object obj) {
+    if (this == obj) {
+      return true;
+    }
+    if (!(obj instanceof Block)) {
+      return false;
+    }
+    Block other = (Block) obj;
+    return (blockId == other.blockId);
-  @Override // Object
+  /**
+   * Returns a hash code value for the Block. The hash code adheres to the
+   * general contract of hashCode. If two Blocks are equal according to the
+   * equals(Object) method, then calling the hashCode method on each of the two
+   * blocks produce the same integer result.
+   *
+   * @return a hash code value for this block
+   * @see Block#equals(Object)
+   */
+  @Override
-    //GenerationStamp is IRRELEVANT and should not be used here
-    return (int)(blockId^(blockId>>>32));
+    return Long.hashCode(blockId);
+  }
+
+  /**
+   * A helper function to determine if two blocks are equal, based on the block
+   * ID and the generation stamp. This is a different equalities check than the
+   * default behavior of the Block class. Two blocks are considered equal by
+   * this function iff the two blocks have the same block ID and the same
+   * generation stamp, or if both blocks are null.
+   *
+   * @param a an object
+   * @param b an object to be compared with {@code a} for equality
+   * @return {@code true} if the blocks are deeply equal to each other and
+   *         {@code false} otherwise
+   * @see Block
+   */
+  public static boolean matchingIdAndGenStamp(Block a, Block b) {
+    if (a == b) {
+      return true;
+    } else if (a == null || b == null) {
+      return false;
+    } else {
+      return a.blockId == b.blockId && a.generationStamp == b.generationStamp;
+    }
