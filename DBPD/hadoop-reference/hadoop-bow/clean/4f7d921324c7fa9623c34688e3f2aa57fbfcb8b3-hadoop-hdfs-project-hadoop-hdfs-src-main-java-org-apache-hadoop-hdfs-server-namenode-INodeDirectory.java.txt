HDFS-4446. Support file snapshots with diff lists.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1443825 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileUnderConstructionWithSnapshot;
-      final INodeDirectoryWithSnapshot dir = replaceSelf4INodeDirectoryWithSnapshot(latest);
-      return dir.removeChild(child, latest);
+      return recordModification(latest).removeChild(child, latest);
-      final INodeDirectoryWithSnapshot s
-          = INodeDirectoryWithSnapshot.newInstance(this, null);
+      final INodeDirectoryWithSnapshot s = new INodeDirectoryWithSnapshot(this);
-      replaceSelf(s);
-      s.saveSelf2Snapshot(latest, this);
-      return s;
+      return replaceSelf(s).saveSelf2Snapshot(latest, this);
+    Preconditions.checkState(!(this instanceof INodeDirectorySnapshottable),
+        "this is already an INodeDirectorySnapshottable, this=%s", this);
-    replaceSelf(s);
-    s.saveSelf2Snapshot(latest, this);
+    replaceSelf(s).saveSelf2Snapshot(latest, this);
-  public INodeDirectoryWithSnapshot replaceSelf4INodeDirectoryWithSnapshot(
-      Snapshot latest) {
+  public INodeDirectoryWithSnapshot replaceSelf4INodeDirectoryWithSnapshot() {
-
-    final INodeDirectoryWithSnapshot withSnapshot
-        = INodeDirectoryWithSnapshot.newInstance(this, latest);
-    replaceSelf(withSnapshot);
-    return withSnapshot;
+    return replaceSelf(new INodeDirectoryWithSnapshot(this));
-
-    final INodeDirectory newNode = new INodeDirectory(this, true);
-    replaceSelf(newNode);
-    return newNode;
+    return replaceSelf(new INodeDirectory(this, true));
-  private final void replaceSelf(INodeDirectory newDir) {
+  private final <N extends INodeDirectory> N replaceSelf(final N newDir) {
+    return parent.replaceChild(newDir);
+  }
-    final int i = parent.searchChildrenForExistingINode(newDir);
-    final INode oldDir = parent.children.set(i, newDir);
-    oldDir.setParent(null);
+  private final <N extends INode> N replaceChild(final N newChild) {
+    assertChildrenNonNull();
+    final int i = searchChildrenForExistingINode(newChild);
+    final INode oldChild = children.set(i, newChild);
+    oldChild.clearReferences();
+    return newChild;
-  INodeFileWithSnapshot replaceChild4INodeFileWithSnapshot(final INodeFile child) {
-    assertChildrenNonNull();
+  INodeFileWithSnapshot replaceChild4INodeFileWithSnapshot(
+      final INodeFile child) {
-        "Child file is already an INodeFileWithLink, child=" + child);
+        "Child file is already an INodeFileWithSnapshot, child=" + child);
+    return replaceChild(new INodeFileWithSnapshot(child, null));
+  }
-    final INodeFileWithSnapshot newChild = new INodeFileWithSnapshot(child);
-    final int i = searchChildrenForExistingINode(newChild);
-    children.set(i, newChild);
-    return newChild;
+  /** Replace a child {@link INodeFile} with an {@link INodeFileUnderConstructionWithSnapshot}. */
+  INodeFileUnderConstructionWithSnapshot replaceChild4INodeFileUcWithSnapshot(
+      final INodeFileUnderConstruction child) {
+    Preconditions.checkArgument(!(child instanceof INodeFileUnderConstructionWithSnapshot),
+        "Child file is already an INodeFileUnderConstructionWithSnapshot, child=" + child);
+    return replaceChild(new INodeFileUnderConstructionWithSnapshot(child));
-    if (latest == null) {
-      return this;
-    }
-    final INodeDirectoryWithSnapshot withSnapshot
-        = replaceSelf4INodeDirectoryWithSnapshot(latest);
-    withSnapshot.saveSelf2Snapshot(latest, this);
-    return withSnapshot;
+    return latest == null? this
+        : replaceSelf4INodeDirectoryWithSnapshot().recordModification(latest);
-  public INode saveChild2Snapshot(INode child, Snapshot latest) {
+  public INode saveChild2Snapshot(final INode child, final Snapshot latest,
+      final INode snapshotCopy) {
-    return replaceSelf4INodeDirectoryWithSnapshot(latest)
-        .saveChild2Snapshot(child, latest);
+    return replaceSelf4INodeDirectoryWithSnapshot()
+        .saveChild2Snapshot(child, latest, snapshotCopy);
-      final INodeDirectoryWithSnapshot dir = replaceSelf4INodeDirectoryWithSnapshot(latest);
-      return dir.addChild(node, setModTime, latest);
+      return recordModification(latest).addChild(node, setModTime, latest);
-  public int destroySubtreeAndCollectBlocks(final Snapshot snapshot,
+  public void clearReferences() {
+    super.clearReferences();
+    setChildren(null);
+  }
+
+  public int destroySubtreeAndCollectBlocksRecursively(final Snapshot snapshot,
+    return total;
+  }
+
+  @Override
+  public int destroySubtreeAndCollectBlocks(final Snapshot snapshot,
+      final BlocksMapUpdateInfo collectedBlocks) {
+    int total = destroySubtreeAndCollectBlocksRecursively(
+        snapshot, collectedBlocks);
-      parent = null;
-      children = null;
+      total++; //count this dir only if this object is destroyed  
+      clearReferences();
-    /** @return the i-th inode. */
+    /**
+     * @return the i-th inode if i >= 0;
+     *         otherwise, i < 0, return the (length + i)-th inode.
+     */
-      return inodes[i];
+      return inodes[i >= 0? i: inodes.length + i];
