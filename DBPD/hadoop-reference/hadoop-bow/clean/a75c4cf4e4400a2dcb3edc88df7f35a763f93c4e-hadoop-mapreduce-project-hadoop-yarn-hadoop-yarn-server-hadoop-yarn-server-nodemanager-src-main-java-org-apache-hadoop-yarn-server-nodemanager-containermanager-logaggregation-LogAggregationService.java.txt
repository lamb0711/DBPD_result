MAPREDUCE-2696. Fixed NodeManager to cleanup logs in a thread when logs' aggregation is not enabled. Contributed by Siddharth Seth.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195383 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.yarn.event.EventHandler;
-import org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation.event.LogAggregatorAppFinishedEvent;
-import org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation.event.LogAggregatorAppStartedEvent;
-import org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation.event.LogAggregatorContainerFinishedEvent;
-import org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation.event.LogAggregatorEvent;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.loghandler.LogHandler;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.loghandler.event.LogHandlerAppFinishedEvent;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.loghandler.event.LogHandlerAppStartedEvent;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.loghandler.event.LogHandlerContainerFinishedEvent;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.loghandler.event.LogHandlerEvent;
-    EventHandler<LogAggregatorEvent> {
+    LogHandler {
-  private boolean isLogAggregationEnabled = false;
-    this.isLogAggregationEnabled =
-        conf.getBoolean(YarnConfiguration.NM_LOG_AGGREGATION_ENABLED, false);
-  public void handle(LogAggregatorEvent event) {
-    if (this.isLogAggregationEnabled) {
-      switch (event.getType()) {
-        case APPLICATION_STARTED:
-          LogAggregatorAppStartedEvent appStartEvent =
-              (LogAggregatorAppStartedEvent) event;
-          initApp(appStartEvent.getApplicationId(), appStartEvent.getUser(),
-              appStartEvent.getCredentials(),
-              appStartEvent.getLogRetentionPolicy(),
-              appStartEvent.getApplicationAcls());
-          break;
-        case CONTAINER_FINISHED:
-          LogAggregatorContainerFinishedEvent containerFinishEvent =
-              (LogAggregatorContainerFinishedEvent) event;
-          stopContainer(containerFinishEvent.getContainerId(),
-              containerFinishEvent.getExitCode());
-          break;
-        case APPLICATION_FINISHED:
-          LogAggregatorAppFinishedEvent appFinishedEvent =
-              (LogAggregatorAppFinishedEvent) event;
-          stopApp(appFinishedEvent.getApplicationId());
-          break;
-        default:
-          ; // Ignore
-      }
+  public void handle(LogHandlerEvent event) {
+    switch (event.getType()) {
+      case APPLICATION_STARTED:
+        LogHandlerAppStartedEvent appStartEvent =
+            (LogHandlerAppStartedEvent) event;
+        initApp(appStartEvent.getApplicationId(), appStartEvent.getUser(),
+            appStartEvent.getCredentials(),
+            appStartEvent.getLogRetentionPolicy(),
+            appStartEvent.getApplicationAcls());
+        break;
+      case CONTAINER_FINISHED:
+        LogHandlerContainerFinishedEvent containerFinishEvent =
+            (LogHandlerContainerFinishedEvent) event;
+        stopContainer(containerFinishEvent.getContainerId(),
+            containerFinishEvent.getExitCode());
+        break;
+      case APPLICATION_FINISHED:
+        LogHandlerAppFinishedEvent appFinishedEvent =
+            (LogHandlerAppFinishedEvent) event;
+        stopApp(appFinishedEvent.getApplicationId());
+        break;
+      default:
+        ; // Ignore
+
