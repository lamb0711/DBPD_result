HADOOP-16068. ABFS Authentication and Delegation Token plugins to optionally be bound to specific URI of the store.

Contributed by Steve Loughran.

+import org.apache.hadoop.fs.azurebfs.services.AbfsIoUtils;
-    private int httpErrorCode;
-    private String requestId;
+    private final int httpErrorCode;
+    private final String requestId;
+
+    private final String url;
+
+    private final String contentType;
+
+    private final String body;
-    HttpException(int httpErrorCode, String requestId, String message) {
+    HttpException(
+        final int httpErrorCode,
+        final String requestId,
+        final String message,
+        final String url,
+        final String contentType,
+        final String body) {
+      this.url = url;
+      this.contentType = contentType;
+      this.body = body;
+
+    public String getUrl() {
+      return url;
+    }
+
+    public String getContentType() {
+      return contentType;
+    }
+
+    public String getBody() {
+      return body;
+    }
+
+    @Override
+    public String getMessage() {
+      final StringBuilder sb = new StringBuilder();
+      sb.append("HTTP Error ");
+      sb.append(httpErrorCode);
+      sb.append("; url='").append(url).append('\'');
+      sb.append(' ');
+      sb.append(super.getMessage());
+      sb.append("; requestId='").append(requestId).append('\'');
+      sb.append("; contentType='").append(contentType).append('\'');
+      sb.append("; response '").append(body).append('\'');
+      return sb.toString();
+    }
+  }
+
+  /**
+   * An unexpected HTTP response was raised, such as text coming back
+   * from what should be an OAuth endpoint.
+   */
+  public static class UnexpectedResponseException extends HttpException {
+
+    public UnexpectedResponseException(final int httpErrorCode,
+        final String requestId,
+        final String message,
+        final String url,
+        final String contentType,
+        final String body) {
+      super(httpErrorCode, requestId, message, url, contentType, body);
+    }
+
+      LOG.debug("Requesting an OAuth token by {} to {}",
+          httpMethod, authEndpoint);
-
+      AbfsIoUtils.dumpHeadersToDebugLog("Request Headers",
+          conn.getRequestProperties());
+      LOG.debug("Response {}", httpResponseCode);
+      AbfsIoUtils.dumpHeadersToDebugLog("Response Headers",
+          conn.getHeaderFields());
+
-        String responseBody = consumeInputStream(conn.getErrorStream(), 1024);
+        InputStream stream = conn.getErrorStream();
+        if (stream == null) {
+          // no error stream, try the original input stream
+          stream = conn.getInputStream();
+        }
+        String responseBody = consumeInputStream(stream, 1024);
-        String logMessage =
-                "AADToken: HTTP connection failed for getting token from AzureAD. Http response: "
-                        + httpResponseCode + " " + conn.getResponseMessage()
-                        + "\nContent-Type: " + responseContentType
-                        + " Content-Length: " + responseContentLength
-                        + " Request ID: " + requestId.toString()
+        String operation = "AADToken: HTTP connection to " + authEndpoint
+            + " failed for getting token from AzureAD.";
+        String logMessage = operation
+                        + " HTTP response: " + httpResponseCode
+                        + " " + conn.getResponseMessage()
-                        + "\nFirst 1K of Body: " + responseBody;
+                        + (responseBody.isEmpty()
+                          ? ""
+                          : ("\nFirst 1K of Body: " + responseBody));
-        throw new HttpException(httpResponseCode, requestId, logMessage);
+        if (httpResponseCode == HttpURLConnection.HTTP_OK) {
+          // 200 is returned by some of the sign-on pages, but can also
+          // come from proxies, utterly wrong URLs, etc.
+          throw new UnexpectedResponseException(httpResponseCode,
+              requestId,
+              operation
+                  + " Unexpected response."
+                  + " Check configuration, URLs and proxy settings."
+                  + " proxies=" + proxies,
+              authEndpoint,
+              responseContentType,
+              responseBody);
+        } else {
+          // general HTTP error
+          throw new HttpException(httpResponseCode,
+              requestId,
+              operation,
+              authEndpoint,
+              responseContentType,
+              responseBody);
+        }
+    if (inStream == null) {
+      // the HTTP request returned an empty body
+      return "";
+    }
