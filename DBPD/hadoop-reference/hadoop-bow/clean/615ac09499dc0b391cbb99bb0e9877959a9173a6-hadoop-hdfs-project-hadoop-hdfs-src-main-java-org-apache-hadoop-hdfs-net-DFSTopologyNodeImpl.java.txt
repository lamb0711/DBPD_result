HDFS-11419. DFSTopologyNodeImpl#chooseRandom optimizations. Contributed by Chen Liang.

-import java.util.Map;
+  /**
+   * This map stores storage type counts of the subtree. We can always get this
+   * info by iterate over the childrenStorageInfo variable. But for optimization
+   * purpose, we store this info directly to avoid the iteration.
+   */
+  private final EnumMap<StorageType, Integer> storageTypeCounts;
+
+    storageTypeCounts = new EnumMap<>(StorageType.class);
+    storageTypeCounts = new EnumMap<>(StorageType.class);
-    int res = 0;
-    for (Map.Entry<String, EnumMap<StorageType, Integer>> entry :
-        childrenStorageInfo.entrySet()) {
-      if (entry.getValue().containsKey(type)) {
-        res += entry.getValue().get(type);
-      }
+    if (storageTypeCounts.containsKey(type)) {
+      return storageTypeCounts.get(type);
+    } else {
+      return 0;
-    return res;
+  private void incStorageTypeCount(StorageType type) {
+    // no locking because the caller is synchronized already
+    if (storageTypeCounts.containsKey(type)) {
+      storageTypeCounts.put(type, storageTypeCounts.get(type)+1);
+    } else {
+      storageTypeCounts.put(type, 1);
+    }
+  }
+
+  private void decStorageTypeCount(StorageType type) {
+    // no locking because the caller is synchronized already
+    int current = storageTypeCounts.get(type);
+    current -= 1;
+    if (current == 0) {
+      storageTypeCounts.remove(type);
+    } else {
+      storageTypeCounts.put(type, current);
+    }
+  }
+
-      synchronized (childrenStorageInfo) {
-        if (!childrenStorageInfo.containsKey(dnDescriptor.getName())) {
-          childrenStorageInfo.put(
-              dnDescriptor.getName(), new EnumMap<>(StorageType.class));
-        }
-        for (StorageType st : dnDescriptor.getStorageTypes()) {
-          childrenStorageInfo.get(dnDescriptor.getName()).put(st, 1);
-        }
+      if (!childrenStorageInfo.containsKey(dnDescriptor.getName())) {
+        childrenStorageInfo.put(
+            dnDescriptor.getName(), new EnumMap<>(StorageType.class));
+      }
+      for (StorageType st : dnDescriptor.getStorageTypes()) {
+        childrenStorageInfo.get(dnDescriptor.getName()).put(st, 1);
+        incStorageTypeCount(st);
-        synchronized (childrenStorageInfo) {
-          if (!childrenStorageInfo.containsKey(parentNode.getName())) {
-            childrenStorageInfo.put(
-                parentNode.getName(), new EnumMap<>(StorageType.class));
-            for (StorageType st : dnDescriptor.getStorageTypes()) {
-              childrenStorageInfo.get(parentNode.getName()).put(st, 1);
-            }
-          } else {
-            EnumMap<StorageType, Integer> currentCount =
-                childrenStorageInfo.get(parentNode.getName());
-            for (StorageType st : dnDescriptor.getStorageTypes()) {
-              if (currentCount.containsKey(st)) {
-                currentCount.put(st, currentCount.get(st) + 1);
-              } else {
-                currentCount.put(st, 1);
-              }
+        if (!childrenStorageInfo.containsKey(parentNode.getName())) {
+          childrenStorageInfo.put(
+              parentNode.getName(), new EnumMap<>(StorageType.class));
+          for (StorageType st : dnDescriptor.getStorageTypes()) {
+            childrenStorageInfo.get(parentNode.getName()).put(st, 1);
+          }
+        } else {
+          EnumMap<StorageType, Integer> currentCount =
+              childrenStorageInfo.get(parentNode.getName());
+          for (StorageType st : dnDescriptor.getStorageTypes()) {
+            if (currentCount.containsKey(st)) {
+              currentCount.put(st, currentCount.get(st) + 1);
+            } else {
+              currentCount.put(st, 1);
+        for (StorageType st : dnDescriptor.getStorageTypes()) {
+          incStorageTypeCount(st);
+        }
-            synchronized (childrenStorageInfo) {
-              childrenStorageInfo.remove(dnDescriptor.getName());
+            childrenStorageInfo.remove(dnDescriptor.getName());
+            for (StorageType st : dnDescriptor.getStorageTypes()) {
+              decStorageTypeCount(st);
-        synchronized (childrenStorageInfo) {
-          EnumMap<StorageType, Integer> currentCount =
-              childrenStorageInfo.get(parentNode.getName());
-          EnumSet<StorageType> toRemove = EnumSet.noneOf(StorageType.class);
-          for (StorageType st : dnDescriptor.getStorageTypes()) {
-            int newCount = currentCount.get(st) - 1;
-            if (newCount == 0) {
-              toRemove.add(st);
-            }
-            currentCount.put(st, newCount);
+        EnumMap<StorageType, Integer> currentCount =
+            childrenStorageInfo.get(parentNode.getName());
+        EnumSet<StorageType> toRemove = EnumSet.noneOf(StorageType.class);
+        for (StorageType st : dnDescriptor.getStorageTypes()) {
+          int newCount = currentCount.get(st) - 1;
+          if (newCount == 0) {
+            toRemove.add(st);
-          for (StorageType st : toRemove) {
-            currentCount.remove(st);
-          }
+          currentCount.put(st, newCount);
+        }
+        for (StorageType st : toRemove) {
+          currentCount.remove(st);
+        }
+        for (StorageType st : dnDescriptor.getStorageTypes()) {
+          decStorageTypeCount(st);
