HDDS-1106. Introduce queryMap in PipelineManager. Contributed by Lokesh Jain.

+import org.apache.commons.lang3.builder.HashCodeBuilder;
+import java.util.concurrent.CopyOnWriteArrayList;
+  private final Map<PipelineQuery, List<Pipeline>> query2OpenPipelines;
-    this.pipelineMap = new HashMap<>();
-    this.pipeline2container = new HashMap<>();
+    pipelineMap = new HashMap<>();
+    pipeline2container = new HashMap<>();
+    query2OpenPipelines = new HashMap<>();
+    initializeQueryMap();
+  private void initializeQueryMap() {
+    for (ReplicationType type : ReplicationType.values()) {
+      for (ReplicationFactor factor : ReplicationFactor.values()) {
+        query2OpenPipelines
+            .put(new PipelineQuery(type, factor), new CopyOnWriteArrayList<>());
+      }
+    }
+  }
+
+    if (pipeline.getPipelineState() == PipelineState.OPEN) {
+      query2OpenPipelines.get(new PipelineQuery(pipeline)).add(pipeline);
+    }
+    if (state == PipelineState.OPEN) {
+      return Collections.unmodifiableList(
+          query2OpenPipelines.get(new PipelineQuery(type, factor)));
+    }
-    return pipelineMap.compute(pipelineID,
+    Pipeline updatedPipeline = pipelineMap.compute(pipelineID,
+    PipelineQuery query = new PipelineQuery(pipeline);
+    if (updatedPipeline.getPipelineState() == PipelineState.OPEN) {
+      // for transition to OPEN state add pipeline to query2OpenPipelines
+      query2OpenPipelines.get(query).add(updatedPipeline);
+    } else if (updatedPipeline.getPipelineState() == PipelineState.CLOSED) {
+      // for transition from OPEN to CLOSED state remove pipeline from
+      // query2OpenPipelines
+      query2OpenPipelines.get(query).remove(pipeline);
+    }
+    return updatedPipeline;
+  }
+
+  private class PipelineQuery {
+    private ReplicationType type;
+    private ReplicationFactor factor;
+
+    PipelineQuery(ReplicationType type, ReplicationFactor factor) {
+      this.type = type;
+      this.factor = factor;
+    }
+
+    PipelineQuery(Pipeline pipeline) {
+      type = pipeline.getType();
+      factor = pipeline.getFactor();
+    }
+
+    @Override
+    public boolean equals(Object other) {
+      if (this == other) {
+        return true;
+      }
+      if (!this.getClass().equals(other.getClass())) {
+        return false;
+      }
+      PipelineQuery otherQuery = (PipelineQuery) other;
+      return type == otherQuery.type && factor == otherQuery.factor;
+    }
+
+    @Override
+    public int hashCode() {
+      return new HashCodeBuilder()
+          .append(type)
+          .append(factor)
+          .toHashCode();
+    }
