MAPREDUCE-2775. Fixed ResourceManager and NodeManager to force a decommissioned node to shutdown. Contributed by Devaraj K.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190467 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
-import org.apache.hadoop.yarn.ipc.RPCUtil;
+import org.apache.hadoop.yarn.server.api.records.NodeAction;
+  private static final NodeHeartbeatResponse shutDown = recordFactory
+  .newRecordInstance(NodeHeartbeatResponse.class);
+  
-    rebootResp.setReboot(true);
+    rebootResp.setNodeAction(NodeAction.REBOOT);
+    
+    HeartbeatResponse decommissionedResp = recordFactory
+        .newRecordInstance(HeartbeatResponse.class);
+    decommissionedResp.setNodeAction(NodeAction.SHUTDOWN);
+    shutDown.setHeartbeatResponse(decommissionedResp);
+  @SuppressWarnings("unchecked")
-    try {
-      // Check if this node is a 'valid' node
-      if (!this.nodesListManager.isValidNode(host)) {
-        LOG.info("Disallowed NodeManager from  " + host);
-        throw new IOException("Disallowed NodeManager from  " + host); 
-      }
+    RegisterNodeManagerResponse response = recordFactory
+        .newRecordInstance(RegisterNodeManagerResponse.class);
+    RegistrationResponse regResponse = recordFactory
+        .newRecordInstance(RegistrationResponse.class);
+    SecretKey secretKey = this.containerTokenSecretManager
+        .createAndGetSecretKey(nodeId.toString());
+    regResponse.setSecretKey(ByteBuffer.wrap(secretKey.getEncoded()));
-      RMNode rmNode = new RMNodeImpl(nodeId, rmContext, host, cmPort,
-          httpPort, resolve(host), capability);
-
-      if (this.rmContext.getRMNodes().putIfAbsent(nodeId, rmNode) != null) {
-        throw new IOException("Duplicate registration from the node!");
-      }
-
-      this.nmLivelinessMonitor.register(nodeId);
-
-      LOG.info("NodeManager from node " + host + 
-          "(cmPort: " + cmPort + " httpPort: " + httpPort + ") "
-          + "registered with capability: " + capability.getMemory()
-          + ", assigned nodeId " + nodeId);
-
-      RegistrationResponse regResponse = recordFactory.newRecordInstance(
-          RegistrationResponse.class);
-      SecretKey secretKey = this.containerTokenSecretManager
-          .createAndGetSecretKey(nodeId.toString());
-      regResponse.setSecretKey(ByteBuffer.wrap(secretKey.getEncoded()));
-
-      RegisterNodeManagerResponse response = recordFactory
-          .newRecordInstance(RegisterNodeManagerResponse.class);
+    // Check if this node is a 'valid' node
+    if (!this.nodesListManager.isValidNode(host)) {
+      LOG.info("Disallowed NodeManager from  " + host
+          + ", Sending SHUTDOWN signal to the NodeManager.");
+      regResponse.setNodeAction(NodeAction.SHUTDOWN);
-    } catch (IOException ioe) {
-      LOG.info("Exception in node registration from " + nodeId.getHost(), ioe);
-      throw RPCUtil.getRemoteException(ioe);
+
+    RMNode rmNode = new RMNodeImpl(nodeId, rmContext, host, cmPort, httpPort,
+        resolve(host), capability);
+
+    if (this.rmContext.getRMNodes().putIfAbsent(nodeId, rmNode) != null) {
+      LOG.info("Duplicate registration from the node at: " + host
+          + ", Sending SHUTDOWN Signal to the NodeManager");
+      regResponse.setNodeAction(NodeAction.SHUTDOWN);
+      response.setRegistrationResponse(regResponse);
+      return response;
+    }
+
+    this.rmContext.getDispatcher().getEventHandler().handle(
+        new RMNodeEvent(nodeId, RMNodeEventType.STARTED));
+
+    this.nmLivelinessMonitor.register(nodeId);
+
+    LOG.info("NodeManager from node " + host + "(cmPort: " + cmPort
+        + " httpPort: " + httpPort + ") " + "registered with capability: "
+        + capability.getMemory() + ", assigned nodeId " + nodeId);
+
+    regResponse.setNodeAction(NodeAction.NORMAL);
+    response.setRegistrationResponse(regResponse);
+    return response;
+  @SuppressWarnings("unchecked")
-    try {
-      /**
-       * Here is the node heartbeat sequence...
-       * 1. Check if it's a registered node
-       * 2. Check if it's a valid (i.e. not excluded) node
-       * 3. Check if it's a 'fresh' heartbeat i.e. not duplicate heartbeat
-       * 4. Send healthStatus to RMNode
-       */
+    /**
+     * Here is the node heartbeat sequence...
+     * 1. Check if it's a registered node
+     * 2. Check if it's a valid (i.e. not excluded) node 
+     * 3. Check if it's a 'fresh' heartbeat i.e. not duplicate heartbeat 
+     * 4. Send healthStatus to RMNode
+     */
+
+    NodeId nodeId = remoteNodeStatus.getNodeId();
+
+    // 1. Check if it's a registered node
+    RMNode rmNode = this.rmContext.getRMNodes().get(nodeId);
+    if (rmNode == null) {
+      /* node does not exist */
+      LOG.info("Node not found rebooting " + remoteNodeStatus.getNodeId());
-      NodeId nodeId = remoteNodeStatus.getNodeId();
-      
-      // 1. Check if it's a registered node
-      RMNode rmNode = this.rmContext.getRMNodes().get(nodeId);
-      if (rmNode == null) {
-        /* node does not exist */
-        LOG.info("Node not found rebooting " + remoteNodeStatus.getNodeId());
-        return reboot;
-      }
-
-      // Send ping
-      this.nmLivelinessMonitor.receivedPing(nodeId);
-
-      // 2. Check if it's a valid (i.e. not excluded) node
-      if (!this.nodesListManager.isValidNode(rmNode.getHostName())) {
-        LOG.info("Disallowed NodeManager nodeId: " + nodeId +  
-            " hostname: " + rmNode.getNodeAddress());
-        throw new IOException("Disallowed NodeManager nodeId: " + 
-            remoteNodeStatus.getNodeId());
-      }
-
-      NodeHeartbeatResponse nodeHeartBeatResponse = recordFactory
-          .newRecordInstance(NodeHeartbeatResponse.class);
-
-      // 3. Check if it's a 'fresh' heartbeat i.e. not duplicate heartbeat
-      HeartbeatResponse lastHeartbeatResponse = rmNode
-          .getLastHeartBeatResponse();
-      if (remoteNodeStatus.getResponseId() + 1 == lastHeartbeatResponse
-           .getResponseId()) {
-        LOG.info("Received duplicate heartbeat from node " + 
-            rmNode.getNodeAddress());
-        nodeHeartBeatResponse.setHeartbeatResponse(lastHeartbeatResponse);
-        return nodeHeartBeatResponse;
-      } else if (remoteNodeStatus.getResponseId() + 1 < lastHeartbeatResponse
-          .getResponseId()) {
-        LOG.info("Too far behind rm response id:" +
-            lastHeartbeatResponse.getResponseId() + " nm response id:"
-            + remoteNodeStatus.getResponseId());
-        // TODO: Just sending reboot is not enough. Think more.
-        this.rmContext.getDispatcher().getEventHandler().handle(
-            new RMNodeEvent(nodeId, RMNodeEventType.REBOOTING));
-        return reboot;
-      }
-
-      // Heartbeat response
-      HeartbeatResponse latestResponse = recordFactory
-          .newRecordInstance(HeartbeatResponse.class);
-      latestResponse
-          .setResponseId(lastHeartbeatResponse.getResponseId() + 1);
-      latestResponse.addAllContainersToCleanup(rmNode.pullContainersToCleanUp());
-      latestResponse.addAllApplicationsToCleanup(rmNode.pullAppsToCleanup());
-
-      // 4. Send status to RMNode, saving the latest response.
-      this.rmContext.getDispatcher().getEventHandler().handle(
-          new RMNodeStatusEvent(nodeId, remoteNodeStatus.getNodeHealthStatus(),
-              remoteNodeStatus.getContainersStatuses(), latestResponse));
-
-      nodeHeartBeatResponse.setHeartbeatResponse(latestResponse);
-      return nodeHeartBeatResponse;
-    } catch (IOException ioe) {
-      LOG.info("Exception in heartbeat from node " + 
-          request.getNodeStatus().getNodeId(), ioe);
-      throw RPCUtil.getRemoteException(ioe);
+      // Updating the metrics directly as reboot event cannot be 
+      // triggered on a null rmNode
+      ClusterMetrics.getMetrics().incrNumRebootedNMs();
+      return reboot;
+
+    // Send ping
+    this.nmLivelinessMonitor.receivedPing(nodeId);
+
+    // 2. Check if it's a valid (i.e. not excluded) node
+    if (!this.nodesListManager.isValidNode(rmNode.getHostName())) {
+      LOG.info("Disallowed NodeManager nodeId: " + nodeId + " hostname: "
+          + rmNode.getNodeAddress());
+      this.rmContext.getDispatcher().getEventHandler().handle(
+          new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION));
+      return shutDown;
+    }
+
+    NodeHeartbeatResponse nodeHeartBeatResponse = recordFactory
+        .newRecordInstance(NodeHeartbeatResponse.class);
+
+    // 3. Check if it's a 'fresh' heartbeat i.e. not duplicate heartbeat
+    HeartbeatResponse lastHeartbeatResponse = rmNode.getLastHeartBeatResponse();
+    if (remoteNodeStatus.getResponseId() + 1 == lastHeartbeatResponse
+        .getResponseId()) {
+      LOG.info("Received duplicate heartbeat from node "
+          + rmNode.getNodeAddress());
+      nodeHeartBeatResponse.setHeartbeatResponse(lastHeartbeatResponse);
+      return nodeHeartBeatResponse;
+    } else if (remoteNodeStatus.getResponseId() + 1 < lastHeartbeatResponse
+        .getResponseId()) {
+      LOG.info("Too far behind rm response id:"
+          + lastHeartbeatResponse.getResponseId() + " nm response id:"
+          + remoteNodeStatus.getResponseId());
+      // TODO: Just sending reboot is not enough. Think more.
+      this.rmContext.getDispatcher().getEventHandler().handle(
+          new RMNodeEvent(nodeId, RMNodeEventType.REBOOTING));
+      return reboot;
+    }
+
+    // Heartbeat response
+    HeartbeatResponse latestResponse = recordFactory
+        .newRecordInstance(HeartbeatResponse.class);
+    latestResponse.setResponseId(lastHeartbeatResponse.getResponseId() + 1);
+    latestResponse.addAllContainersToCleanup(rmNode.pullContainersToCleanUp());
+    latestResponse.addAllApplicationsToCleanup(rmNode.pullAppsToCleanup());
+    latestResponse.setNodeAction(NodeAction.NORMAL);
+
+    // 4. Send status to RMNode, saving the latest response.
+    this.rmContext.getDispatcher().getEventHandler().handle(
+        new RMNodeStatusEvent(nodeId, remoteNodeStatus.getNodeHealthStatus(),
+            remoteNodeStatus.getContainersStatuses(), latestResponse));
+
+    nodeHeartBeatResponse.setHeartbeatResponse(latestResponse);
+    return nodeHeartBeatResponse;
