YARN-4957. Add getNewReservation in ApplicationClientProtocol (Sean Po via curino)

+import org.apache.hadoop.yarn.api.protocolrecords.GetNewReservationRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetNewReservationResponse;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.NewReservation;
-import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationSubmissionResponseInfo;
+   * Generates a new ReservationId which is then sent to the client.
+   *
+   * @param hsr the servlet request
+   * @return Response containing the app id and the maximum resource
+   *         capabilities
+   * @throws AuthorizationException if the user is not authorized
+   *         to invoke this method.
+   * @throws IOException if creation fails.
+   * @throws InterruptedException if interrupted.
+   */
+  @POST
+  @Path("/reservation/new-reservation")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response createNewReservation(@Context HttpServletRequest hsr)
+    throws AuthorizationException, IOException, InterruptedException {
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    if (callerUGI == null) {
+      throw new AuthorizationException("Unable to obtain user name, "
+        + "user not authenticated");
+    }
+    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
+      String msg = "The default static user cannot carry out this operation.";
+      return Response.status(Status.FORBIDDEN).entity(msg).build();
+    }
+
+    NewReservation reservationId = createNewReservation();
+    return Response.status(Status.OK).entity(reservationId).build();
+
+  }
+
+  /**
+   * Function that actually creates the {@link ReservationId} by calling the
+   * ClientRMService.
+   *
+   * @return returns structure containing the {@link ReservationId}
+   * @throws IOException if creation fails.
+   */
+  private NewReservation createNewReservation() throws IOException {
+    GetNewReservationRequest req =
+        recordFactory.newRecordInstance(GetNewReservationRequest.class);
+    GetNewReservationResponse resp;
+    try {
+      resp = rm.getClientRMService().getNewReservation(req);
+    } catch (YarnException e) {
+      String msg = "Unable to create new reservation from RM web service";
+      LOG.error(msg, e);
+      throw new YarnRuntimeException(msg, e);
+    }
+    NewReservation reservationId =
+        new NewReservation(resp.getReservationId().toString());
+    return reservationId;
+  }
+
+  /**
-    ReservationSubmissionResponseInfo resRespInfo;
-      resRespInfo =
-          callerUGI.doAs(
-           new PrivilegedExceptionAction<ReservationSubmissionResponseInfo>() {
-                @Override
-                public ReservationSubmissionResponseInfo run()
-                    throws IOException, YarnException {
-                  ReservationSubmissionResponse tempRes =
-                      rm.getClientRMService().submitReservation(reservation);
-                  return new ReservationSubmissionResponseInfo(tempRes);
-                }
-              });
+      callerUGI
+          .doAs(new PrivilegedExceptionAction<ReservationSubmissionResponse>() {
+              @Override
+              public ReservationSubmissionResponse run() throws IOException,
+                  YarnException {
+                return rm.getClientRMService().submitReservation(reservation);
+              }
+          });
-    return Response.status(Status.OK).entity(resRespInfo).build();
+    return Response.status(Status.ACCEPTED).build();
-      ReservationSubmissionRequestInfo resContext) {
+      ReservationSubmissionRequestInfo resContext) throws IOException {
+
+    ReservationId reservationId = ReservationId.parseReservationId(resContext
+        .getReservationId());
-        ReservationSubmissionRequest.newInstance(rDef, resContext.getQueue());
+        ReservationSubmissionRequest.newInstance(rDef, resContext.getQueue(),
+          reservationId);
-   * @throws AuthorizationException
-   * @throws IOException
-   * @throws InterruptedException
+   * @throws AuthorizationException when the user group information cannot be
+   *           retrieved.
+   * @throws IOException when a {@link ReservationDeleteRequest} cannot be
+   *           created from the {@link ReservationDeleteRequestInfo}. This
+   *           exception is also thrown on
+   *           {@code ClientRMService.deleteReservation} invokation failure.
+   * @throws InterruptedException if doAs action throws an InterruptedException.
