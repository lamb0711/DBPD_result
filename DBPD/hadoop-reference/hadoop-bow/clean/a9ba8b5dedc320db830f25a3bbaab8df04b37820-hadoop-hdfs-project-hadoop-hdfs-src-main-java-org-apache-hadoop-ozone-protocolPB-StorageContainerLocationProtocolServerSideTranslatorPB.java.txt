HDFS-11504. Ozone: SCM: Add Block APIs. Contributed by Xiaoyu Yao.

+import org.apache.hadoop.scm.container.common.helpers.AllocatedBlock;
+import org.apache.hadoop.scm.protocol.ScmBlockLocationProtocol;
+    .StorageContainerLocationProtocolProtos
+    .ScmLocatedBlockProto;
+import org.apache.hadoop.ozone.protocol.proto
-
+import org.apache.hadoop.ozone.protocol.proto
+    .StorageContainerLocationProtocolProtos.AllocateScmBlockRequestProto;
+import org.apache.hadoop.ozone.protocol.proto
+    .StorageContainerLocationProtocolProtos.AllocateScmBlockResponseProto;
+import org.apache.hadoop.ozone.protocol.proto
+    .StorageContainerLocationProtocolProtos.GetScmBlockLocationsRequestProto;
+import org.apache.hadoop.ozone.protocol.proto
+    .StorageContainerLocationProtocolProtos.GetScmBlockLocationsResponseProto;
+  private final ScmBlockLocationProtocol blockImpl;
-      StorageContainerLocationProtocol impl) {
+      StorageContainerLocationProtocol impl,
+      ScmBlockLocationProtocol blockImpl) throws IOException {
+    this.blockImpl = blockImpl;
+
+  @Override
+  public GetScmBlockLocationsResponseProto getScmBlockLocations(
+      RpcController controller, GetScmBlockLocationsRequestProto req)
+      throws ServiceException {
+    Set<String> keys = Sets.newLinkedHashSetWithExpectedSize(
+        req.getKeysCount());
+    for (String key : req.getKeysList()) {
+      keys.add(key);
+    }
+    final Set<AllocatedBlock> blocks;
+    try {
+      blocks = blockImpl.getBlockLocations(keys);
+    } catch (IOException ex) {
+      throw new ServiceException(ex);
+    }
+    GetScmBlockLocationsResponseProto.Builder resp =
+        GetScmBlockLocationsResponseProto.newBuilder();
+    for (AllocatedBlock block: blocks) {
+      ScmLocatedBlockProto.Builder locatedBlock =
+          ScmLocatedBlockProto.newBuilder()
+              .setKey(block.getKey())
+              .setPipeline(block.getPipeline().getProtobufMessage());
+      resp.addLocatedBlocks(locatedBlock.build());
+    }
+    return resp.build();
+  }
+
+  @Override
+  public AllocateScmBlockResponseProto allocateScmBlock(
+      RpcController controller, AllocateScmBlockRequestProto request)
+      throws ServiceException {
+    try {
+      AllocatedBlock allocatedBlock =
+          blockImpl.allocateBlock(request.getSize());
+      if (allocatedBlock != null) {
+        return StorageContainerLocationProtocolProtos
+            .AllocateScmBlockResponseProto.newBuilder()
+            .setKey(allocatedBlock.getKey())
+            .setPipeline(allocatedBlock.getPipeline().getProtobufMessage())
+            .setCreateContainer(allocatedBlock.getCreateContainer())
+            .setErrorCode(AllocateScmBlockResponseProto.Error.success)
+            .build();
+      } else {
+        return StorageContainerLocationProtocolProtos
+            .AllocateScmBlockResponseProto.newBuilder()
+            .setErrorCode(AllocateScmBlockResponseProto.Error.unknownFailure)
+            .build();
+      }
+    } catch (IOException e) {
+      throw new ServiceException(e);
+    }
+  }
