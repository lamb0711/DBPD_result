YARN-9268. General improvements in FpgaDevice. Contributed by Peter Bacsko.

+import com.google.common.base.Preconditions;
-  //key is requetor, aka. container ID
+  //key is requestor, aka. container ID
-  public static class FpgaDevice implements Comparable<FpgaDevice>, Serializable {
+  /** A class that represents an FPGA card. */
+  public static class FpgaDevice implements Serializable {
+    private static final long serialVersionUID = -4678487141824092751L;
+    private final String type;
+    private final int major;
+    private final int minor;
-    private static final long serialVersionUID = 1L;
-
-    private String type;
-    private Integer major;
-    private Integer minor;
-    // IP file identifier. matrix multiplication for instance
-    private String IPID;
-    // SHA-256 hash of the uploaded aocx file
-    private String aocxHash;
-    // the device name under /dev
-    private String devName;
-    private String aliasDevName;
-    // lspci output's bus number: 02:00.00 (bus:slot.func)
-    private String busNum;
-    private String temperature;
-    private String cardPowerUsage;
+    private final String aliasDevName;
+
+    // IP file identifier. matrix multiplication for instance (mutable)
+    private String IPID;
+    // SHA-256 hash of the uploaded aocx file (mutable)
+    private String aocxHash;
+
+    // cached hash value
+    private Integer hashCode;
-    public Integer getMajor() {
+    public int getMajor() {
-    public Integer getMinor() {
+    public int getMinor() {
-    public String getDevName() {
-      return devName;
-    }
-
-    public void setDevName(String devName) {
-      this.devName = devName;
-    }
-
-    public void setAliasDevName(String aliasDevName) {
-      this.aliasDevName = aliasDevName;
-    }
-
-    public String getBusNum() {
-      return busNum;
-    }
-
-    public void setBusNum(String busNum) {
-      this.busNum = busNum;
-    }
-
-    public String getTemperature() {
-      return temperature;
-    }
-
-    public String getCardPowerUsage() {
-      return cardPowerUsage;
-    }
-
-    public FpgaDevice(String type, Integer major, Integer minor, String IPID) {
-      this.type = type;
+    public FpgaDevice(String type, int major, int minor, String aliasDevName) {
+      this.type = Preconditions.checkNotNull(type, "type must not be null");
-      this.IPID = IPID;
-    }
-
-    public FpgaDevice(String type, Integer major,
-      Integer minor, String IPID, String devName,
-        String aliasDevName, String busNum, String temperature, String cardPowerUsage) {
-      this.type = type;
-      this.major = major;
-      this.minor = minor;
-      this.IPID = IPID;
-      this.devName = devName;
-      this.aliasDevName = aliasDevName;
-      this.busNum = busNum;
-      this.temperature = temperature;
-      this.cardPowerUsage = cardPowerUsage;
+      this.aliasDevName = Preconditions.checkNotNull(aliasDevName,
+          "aliasDevName must not be null");
-      if (!(obj instanceof FpgaDevice)) {
+      if (getClass() != obj.getClass()) {
-      if (other.getType().equals(this.type) &&
-          other.getMajor().equals(this.major) &&
-          other.getMinor().equals(this.minor)) {
-        return true;
+      if (aliasDevName == null) {
+        if (other.aliasDevName != null) {
+          return false;
+        }
+      } else if (!aliasDevName.equals(other.aliasDevName)) {
+        return false;
-      return false;
+      if (major != other.major) {
+        return false;
+      }
+      if (minor != other.minor) {
+        return false;
+      }
+      if (type == null) {
+        if (other.type != null) {
+          return false;
+        }
+      } else if (!type.equals(other.type)) {
+        return false;
+      }
+      return true;
-      final int prime = 31;
-      int result = 1;
-      result = prime * result + ((type == null) ? 0 : type.hashCode());
-      result = prime * result + ((major == null) ? 0 : major.hashCode());
-      result = prime * result + ((minor == null) ? 0 : minor.hashCode());
-      return result;
-    }
+      if (hashCode == null) {
+        final int prime = 31;
+        int result = 1;
-    @Override
-    public int compareTo(FpgaDevice o) {
-      return 0;
+        result = prime * result + major;
+        result = prime * result + type.hashCode();
+        result = prime * result + minor;
+        result = prime * result + aliasDevName.hashCode();
+
+        hashCode = result;
+      }
+
+      return hashCode;
