HDFS-6710. Change BlockPlacementPolicy to consider block storage policy in replica deletion.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1612265 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-    final List<StorageType> storageTypes = chooseStorageTypes(storagePolicy,
-        (short)totalReplicasExpected, results); 
+    final List<StorageType> storageTypes = storagePolicy.chooseStorageTypes(
+        (short)totalReplicasExpected, DatanodeStorageInfo.toStorageTypes(results));
-  
-  private static List<StorageType> chooseStorageTypes(
-      final BlockStoragePolicy storagePolicy, final short replication,
-      final Iterable<DatanodeStorageInfo> chosen) {
-    return storagePolicy.chooseStorageTypes(
-        replication, new Iterable<StorageType>() {
-          @Override
-          public Iterator<StorageType> iterator() {
-            return new Iterator<StorageType>() {
-              final Iterator<DatanodeStorageInfo> i = chosen.iterator();
-              @Override
-              public boolean hasNext() {return i.hasNext();}
-              @Override
-              public StorageType next() {return i.next().getStorageType();}
-              @Override
-              public void remove() {
-                throw new UnsupportedOperationException();
-              }
-            };
-          }
-        });
-  }
-      Collection<DatanodeStorageInfo> second) {
+      Collection<DatanodeStorageInfo> second,
+      final List<StorageType> excessTypes) {
+      if (!excessTypes.contains(storage.getStorageType())) {
+        continue;
+      }
+
-
-    return oldestHeartbeatStorage != null? oldestHeartbeatStorage
-        : minSpaceStorage;
+    final DatanodeStorageInfo storage = oldestHeartbeatStorage != null?
+        oldestHeartbeatStorage : minSpaceStorage;
+    excessTypes.remove(storage.getStorageType());
+    return storage;
