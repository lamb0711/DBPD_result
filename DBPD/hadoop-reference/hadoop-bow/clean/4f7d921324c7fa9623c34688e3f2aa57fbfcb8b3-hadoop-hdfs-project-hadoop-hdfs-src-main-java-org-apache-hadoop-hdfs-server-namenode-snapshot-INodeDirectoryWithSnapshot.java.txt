HDFS-4446. Support file snapshots with diff lists.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1443825 13f79535-47bb-0310-9956-ffa450edef68

-  class DirectoryDiff extends AbstractINodeDiff<INodeDirectory, DirectoryDiff> {
+  static class DirectoryDiff extends AbstractINodeDiff<INodeDirectory, DirectoryDiff> {
-    INodeDirectory getCurrentINode() {
-      return INodeDirectoryWithSnapshot.this;
+    INodeDirectory createSnapshotCopyOfCurrentINode(INodeDirectory currentDir) {
+      final INodeDirectory copy = currentDir instanceof INodeDirectoryWithQuota?
+          new INodeDirectoryWithQuota(currentDir, false,
+              currentDir.getNsQuota(), currentDir.getDsQuota())
+        : new INodeDirectory(currentDir, false);
+      copy.setChildren(null);
+      return copy;
-    void combinePosteriorAndCollectBlocks(final DirectoryDiff posterior,
-        final BlocksMapUpdateInfo collectedBlocks) {
+    void combinePosteriorAndCollectBlocks(final INodeDirectory currentDir,
+        final DirectoryDiff posterior, final BlocksMapUpdateInfo collectedBlocks) {
-    ReadOnlyList<INode> getChildrenList() {
+    ReadOnlyList<INode> getChildrenList(final INodeDirectory currentDir) {
-                getCurrentINode().getChildrenList(null)));
+                currentDir.getChildrenList(null)));
-    INode getChild(byte[] name, boolean checkPosterior) {
+    INode getChild(byte[] name, boolean checkPosterior, INodeDirectory currentDir) {
-          return getCurrentINode().getChild(name, null);
+          return currentDir.getChild(name, null);
-      final DirectoryDiff posterior = getPosterior();
-      return "\n  " + snapshot + " (-> "
-          + (posterior == null? null: posterior.snapshot)
-          + ") childrenSize=" + childrenSize + ", " + diff;
+      return super.toString() + " childrenSize=" + childrenSize + ", " + diff;
+    DirectoryDiffList(List<DirectoryDiff> diffs) {
+      super(diffs);
+    }
+
-    DirectoryDiff addSnapshotDiff(Snapshot snapshot, INodeDirectory dir,
-        boolean isSnapshotCreation) {
-      final DirectoryDiff d = new DirectoryDiff(snapshot, dir); 
-      if (isSnapshotCreation) {
-        //for snapshot creation, snapshotINode is the same as the snapshot root
-        d.snapshotINode = snapshot.getRoot();
-      }
-      return append(d);
+    DirectoryDiff addSnapshotDiff(Snapshot snapshot) {
+      return addLast(new DirectoryDiff(snapshot, getCurrentINode()));
-  /** Create an {@link INodeDirectoryWithSnapshot} with the given snapshot.*/
-  public static INodeDirectoryWithSnapshot newInstance(INodeDirectory dir,
-      Snapshot latest) {
-    final INodeDirectoryWithSnapshot withSnapshot
-        = new INodeDirectoryWithSnapshot(dir, true, null);
-    if (latest != null) {
-      // add a diff for the latest snapshot
-      withSnapshot.diffs.addSnapshotDiff(latest, dir, false);
-    }
-    return withSnapshot;
-  }
-  
+  public INodeDirectoryWithSnapshot(INodeDirectory that) {
+    this(that, true, that instanceof INodeDirectoryWithSnapshot?
+        ((INodeDirectoryWithSnapshot)that).getDiffs(): null);
+  }
+
-    this.diffs = diffs != null? diffs: new DirectoryDiffList();
+    this.diffs = new DirectoryDiffList(diffs == null? null: diffs.asList());
-  public Pair<INodeDirectoryWithSnapshot, INodeDirectory> createSnapshotCopy() {
-    return new Pair<INodeDirectoryWithSnapshot, INodeDirectory>(this,
-        new INodeDirectory(this, false));
-  }
-
-  @Override
-    saveSelf2Snapshot(latest, null);
-    return this;
+    return saveSelf2Snapshot(latest, null);
-  public void saveSelf2Snapshot(Snapshot latest, INodeDirectory snapshotCopy) {
-    if (latest != null) {
-      diffs.checkAndAddLatestSnapshotDiff(latest).checkAndInitINode(snapshotCopy);
-    }
+  public INodeDirectoryWithSnapshot saveSelf2Snapshot(
+      final Snapshot latest, final INodeDirectory snapshotCopy) {
+    diffs.saveSelf2Snapshot(latest, snapshotCopy);
+    return this;
-  public INode saveChild2Snapshot(INode child, Snapshot latest) {
+  public INode saveChild2Snapshot(final INode child, final Snapshot latest,
+      final INode snapshotCopy) {
-    if (diff.getChild(child.getLocalNameBytes(), false) != null) {
+    if (diff.getChild(child.getLocalNameBytes(), false, this) != null) {
-    final Pair<? extends INode, ? extends INode> p = child.createSnapshotCopy();
-    if (p.left != p.right) {
-      final UndoInfo<INode> undoIndo = diff.diff.modify(p.right, p.left);
-      if (undoIndo.getTrashedElement() != null && p.left instanceof FileWithSnapshot) {
-        // also should remove oldinode from the circular list
-        FileWithSnapshot newNodeWithLink = (FileWithSnapshot) p.left;
-        FileWithSnapshot oldNodeWithLink = (FileWithSnapshot) p.right;
-        newNodeWithLink.setNext(oldNodeWithLink.getNext());
-        oldNodeWithLink.setNext(null);
-      }
-    }
-    return p.left;
+    diff.diff.modify(snapshotCopy, child);
+    return child;
-    return diff != null? diff.getChildrenList(): super.getChildrenList(null);
+    return diff != null? diff.getChildrenList(this): super.getChildrenList(null);
-    return diff != null? diff.getChild(name, true): super.getChild(name, null);
+    return diff != null? diff.getChild(name, true, this): super.getChild(name, null);
-    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    return diff != null? diff.getSnapshotINode().getUserName()
-        : super.getUserName(null);
+    final INodeDirectory inode = diffs.getSnapshotINode(snapshot);
+    return inode != null? inode.getUserName(): super.getUserName(null);
-    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    return diff != null? diff.getSnapshotINode().getGroupName()
-        : super.getGroupName(null);
+    final INodeDirectory inode = diffs.getSnapshotINode(snapshot);
+    return inode != null? inode.getGroupName(): super.getGroupName(null);
-    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    return diff != null? diff.getSnapshotINode().getFsPermission()
-        : super.getFsPermission(null);
+    final INodeDirectory inode = diffs.getSnapshotINode(snapshot);
+    return inode != null? inode.getFsPermission(): super.getFsPermission(null);
-    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    return diff != null? diff.getSnapshotINode().getAccessTime()
-        : super.getAccessTime(null);
+    final INodeDirectory inode = diffs.getSnapshotINode(snapshot);
+    return inode != null? inode.getAccessTime(): super.getAccessTime(null);
-    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    return diff != null? diff.getSnapshotINode().getModificationTime()
+    final INodeDirectory inode = diffs.getSnapshotINode(snapshot);
+    return inode != null? inode.getModificationTime()
-  
+
-  public String toString() {
-    return super.toString() + ", " + diffs;
+  public String toDetailString() {
+    return super.toDetailString() + ", " + diffs;
-    final int n = super.destroySubtreeAndCollectBlocks(snapshot, collectedBlocks);
+    int n = destroySubtreeAndCollectBlocksRecursively(
+        snapshot, collectedBlocks);
-      getDiffs().deleteSnapshotDiff(snapshot, collectedBlocks);
+      final DirectoryDiff removed = getDiffs().deleteSnapshotDiff(snapshot,
+          collectedBlocks);
+      if (removed != null) {
+        n++; //count this dir only if a snapshot diff is removed.
+      }
