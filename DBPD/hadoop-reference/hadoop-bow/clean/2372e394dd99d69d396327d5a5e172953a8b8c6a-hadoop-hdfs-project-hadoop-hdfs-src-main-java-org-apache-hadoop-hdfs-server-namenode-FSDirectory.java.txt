HDFS-4189. Renames the getMutableXxx methods to getXxx4Write and fix a bug that some getExistingPathINodes calls should be getINodesInPath4Write.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1441193 13f79535-47bb-0310-9956-ffa450edef68

-      final INode[] inodes = inodesInPath.getINodes();
-          INodeFileUnderConstruction.valueOf(inodes[inodes.length-1], path);
+          INodeFileUnderConstruction.valueOf(inodesInPath.getLastINode(), path);
-      updateCount(inodesInPath, inodes.length-1, 0,
+      updateCount(inodesInPath, 0,
-    final INodesInPath inodesInPath = rootDir.getExistingPathINodes(path, true);
-    final INode[] inodes = inodesInPath.getINodes();
-    updateCount(inodesInPath, inodes.length-1, 0,
+    final INodesInPath iip = rootDir.getINodesInPath4Write(path, true);
+    updateCount(iip, 0,
-    INodesInPath srcInodesInPath = rootDir.getMutableINodesInPath(src, false);
+    INodesInPath srcInodesInPath = rootDir.getINodesInPath4Write(src, false);
-    final INodesInPath srcInodesInPath = rootDir.getMutableINodesInPath(src,
+    final INodesInPath srcInodesInPath = rootDir.getINodesInPath4Write(src,
-    final byte[][] dstComponents = INode.getPathComponents(dst);
-    final INodesInPath dstInodesInPath = rootDir.getMutableINodesInPath(
-        dstComponents, false);
+    final INodesInPath dstInodesInPath = rootDir.getINodesInPath4Write(
+        dst, false);
-      removedSrc.setLocalName(dstComponents[dstInodes.length - 1]);
+      removedSrc.setLocalName(dstInodesInPath.getLastLocalName());
-    final INodesInPath inodesInPath = rootDir.getMutableINodesInPath(src, true);
+    final INodesInPath inodesInPath = rootDir.getINodesInPath4Write(src, true);
-    updateCount(inodesInPath, inodes.length-1, 0, dsDelta, true);
+    updateCount(inodesInPath, 0, dsDelta, true);
-
-  boolean existsMutable(String src) throws UnresolvedLinkException,
-      SnapshotAccessControlException {
-    src = normalizePath(src);
-    readLock();
-    try {
-      INode inode = rootDir.getMutableNode(src, false);
-      if (inode == null) {
-         return false;
-      }
-      return inode.isDirectory() || inode.isSymlink() 
-        ? true 
-        : ((INodeFile)inode).getBlocks() != null;
-    } finally {
-      readUnlock();
-    }
-  }
-    final INodesInPath inodesInPath = rootDir.getMutableINodesInPath(src, true);
+    final INodesInPath inodesInPath = rootDir.getINodesInPath4Write(src, true);
-    final INodesInPath inodesInPath = rootDir.getMutableINodesInPath(src, true);
+    final INodesInPath inodesInPath = rootDir.getINodesInPath4Write(src, true);
-      throws UnresolvedLinkException {
+      throws UnresolvedLinkException, SnapshotAccessControlException {
-      throws UnresolvedLinkException {
+      throws UnresolvedLinkException, SnapshotAccessControlException {
-    final INodesInPath trgINodesInPath = rootDir.getExistingPathINodes(target, true);
+    final INodesInPath trgINodesInPath = rootDir.getINodesInPath4Write(target, true);
-      final INodesInPath inodesInPath = rootDir.getMutableINodesInPath(
+      final INodesInPath inodesInPath = rootDir.getINodesInPath4Write(
-      final INodesInPath inodesInPath = rootDir.getINodesInPath(path, false);
+      final INodesInPath inodesInPath = rootDir.getLastINodeInPath(path, false);
-    final INodesInPath inodesInPath = rootDir.getMutableINodesInPath(
+    final INodesInPath inodesInPath = rootDir.getINodesInPath4Write(
-      final INodesInPath inodesInPath = rootDir.getINodesInPath(srcs, true);
+      final INodesInPath inodesInPath = rootDir.getLastINodeInPath(srcs, true);
-      final INodesInPath inodesInPath = rootDir.getINodesInPath(srcs, resolveLink);
+      final INodesInPath inodesInPath = rootDir.getLastINodeInPath(srcs, resolveLink);
-    return getINodesInPath(src).getINode(0);
+    return getLastINodeInPath(src).getINode(0);
-  public INodesInPath getINodesInPath(String src) throws UnresolvedLinkException {
+  public INodesInPath getLastINodeInPath(String src)
+       throws UnresolvedLinkException {
-      return rootDir.getINodesInPath(src, true);
+      return rootDir.getLastINodeInPath(src, true);
-  public INodesInPath getMutableINodesInPath(String src
+  public INodesInPath getINodesInPath4Write(String src
-      return rootDir.getMutableINodesInPath(src, true);
+      return rootDir.getINodesInPath4Write(src, true);
-  public INode getMutableINode(String src) throws UnresolvedLinkException,
+  public INode getINode4Write(String src) throws UnresolvedLinkException,
-      return rootDir.getMutableNode(src, true);
+      return rootDir.getINode4Write(src, true);
-          && rootDir.getMutableNode(srcs, false) == null) {
+          && rootDir.getINode4Write(srcs, false) == null) {
-      INode node = rootDir.getMutableNode(src, false);
+      INode node = rootDir.getINode4Write(src, false);
-      throws QuotaExceededException, FileNotFoundException, UnresolvedLinkException {
+      throws QuotaExceededException, FileNotFoundException,
+          UnresolvedLinkException, SnapshotAccessControlException {
-      final INodesInPath inodesInPath = rootDir.getExistingPathINodes(path, false);
-      final INode[] inodes = inodesInPath.getINodes();
-      int len = inodes.length;
-      if (inodes[len - 1] == null) {
+      final INodesInPath iip = rootDir.getINodesInPath4Write(path, false);
+      if (iip.getLastINode() == null) {
-      updateCount(inodesInPath, len-1, nsDelta, dsDelta, true);
+      updateCount(iip, nsDelta, dsDelta, true);
+  private void updateCount(INodesInPath iip, long nsDelta, long dsDelta,
+      boolean checkQuota) throws QuotaExceededException {
+    updateCount(iip, iip.getINodes().length - 1, nsDelta, dsDelta, checkQuota);
+  }
+
-    final INodesInPath iip = rootDir.getMutableINodesInPath(srcs, true);
+    final INodesInPath iip = rootDir.getINodesInPath4Write(srcs, true);
-    final INodesInPath i = getINodesInPath(src); 
+    final INodesInPath i = getLastINodeInPath(src); 
