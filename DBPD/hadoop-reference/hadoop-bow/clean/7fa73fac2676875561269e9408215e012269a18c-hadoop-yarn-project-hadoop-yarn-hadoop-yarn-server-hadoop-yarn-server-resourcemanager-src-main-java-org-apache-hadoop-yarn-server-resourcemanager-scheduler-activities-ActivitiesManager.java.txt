YARN-9439. Support asynchronized scheduling mode and multi-node lookup mechanism for app activities. Contributed by Tao Yang.

+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMApp;
+import java.util.concurrent.ConcurrentLinkedQueue;
-  private ConcurrentMap<ApplicationId, AppAllocation> appsAllocation;
-  private ConcurrentMap<ApplicationId, List<AppAllocation>>
-      completedAppAllocations;
+  private ThreadLocal<Map<ApplicationId, AppAllocation>>
+      appsAllocation;
+  @VisibleForTesting
+  ConcurrentMap<ApplicationId, Queue<AppAllocation>> completedAppAllocations;
-    appsAllocation = new ConcurrentHashMap<>();
+    appsAllocation = ThreadLocal.withInitial(() -> new HashMap());
-    if (rmContext.getRMApps().get(applicationId).getFinalApplicationStatus()
+    RMApp app = rmContext.getRMApps().get(applicationId);
+    if (app != null && app.getFinalApplicationStatus()
-      List<AppAllocation> allocations = completedAppAllocations.get(
-          applicationId);
-
+      Queue<AppAllocation> curAllocations =
+          completedAppAllocations.get(applicationId);
+      List<AppAllocation> allocations = null;
+      if (curAllocations != null) {
+        allocations = new ArrayList(curAllocations);
+      }
-          Iterator<Map.Entry<ApplicationId, List<AppAllocation>>> iteApp =
+          Iterator<Map.Entry<ApplicationId, Queue<AppAllocation>>> iteApp =
-            Map.Entry<ApplicationId, List<AppAllocation>> appAllocation =
+            Map.Entry<ApplicationId, Queue<AppAllocation>> appAllocation =
-            if (rmContext.getRMApps().get(appAllocation.getKey())
-                .getFinalApplicationStatus()
+            RMApp rmApp = rmContext.getRMApps().get(appAllocation.getKey());
+            if (rmApp == null || rmApp.getFinalApplicationStatus()
-    if (recordingAppActivitiesUntilSpecifiedTime.containsKey(applicationId)
-        && recordingAppActivitiesUntilSpecifiedTime.get(applicationId)
-        > currTS) {
-      appsAllocation.put(applicationId,
-          new AppAllocation(application.getPriority(), nodeID,
-              application.getQueueName()));
-    }
-
-    if (recordingAppActivitiesUntilSpecifiedTime.containsKey(applicationId)
-        && recordingAppActivitiesUntilSpecifiedTime.get(applicationId)
-        <= currTS) {
-      turnOffActivityMonitoringForApp(applicationId);
+    Long turnOffTimestamp =
+        recordingAppActivitiesUntilSpecifiedTime.get(applicationId);
+    if (turnOffTimestamp != null) {
+      if (turnOffTimestamp > currTS) {
+        appsAllocation.get().put(applicationId,
+            new AppAllocation(application.getPriority(), nodeID,
+                application.getQueueName()));
+      } else {
+        turnOffActivityMonitoringForApp(applicationId);
+      }
-      AppAllocation appAllocation = appsAllocation.get(applicationId);
+      AppAllocation appAllocation = appsAllocation.get().get(applicationId);
-      AppAllocation appAllocation = appsAllocation.remove(applicationId);
+      AppAllocation appAllocation = appsAllocation.get().remove(applicationId);
-      List<AppAllocation> appAllocations;
-      if (completedAppAllocations.containsKey(applicationId)) {
-        appAllocations = completedAppAllocations.get(applicationId);
-      } else {
-        appAllocations = new ArrayList<>();
-        completedAppAllocations.put(applicationId, appAllocations);
+      Queue<AppAllocation> appAllocations =
+          completedAppAllocations.get(applicationId);
+      if (appAllocations == null) {
+        appAllocations = new ConcurrentLinkedQueue<>();
+        Queue<AppAllocation> curAppAllocations =
+            completedAppAllocations.putIfAbsent(applicationId, appAllocations);
+        if (curAppAllocations != null) {
+          appAllocations = curAppAllocations;
+        }
-        appAllocations.remove(0);
+        appAllocations.poll();
-
-      if (recordingAppActivitiesUntilSpecifiedTime.get(applicationId)
-          <= currTS) {
+      Long stopTime =
+          recordingAppActivitiesUntilSpecifiedTime.get(applicationId);
+      if (stopTime != null && stopTime <= currTS) {
+    if (recordingAppActivitiesUntilSpecifiedTime.isEmpty()
+        || appsAllocation.get().isEmpty()) {
+      return false;
+    }
-        && appsAllocation.containsKey(applicationId);
+        && appsAllocation.get().containsKey(applicationId);
