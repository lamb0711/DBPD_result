YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori

+import javax.ws.rs.core.StreamingOutput;
+import java.nio.charset.Charset;
+import java.util.Collections;
+
-      boolean redirectedFromNode) {
+      boolean redirectedFromNode, boolean manualRedirection) {
-        redirectedFromNode, null);
+        redirectedFromNode, null, manualRedirection);
+
+   * @param manualRedirection whether to return a response with a Location
+   *                          instead of an automatic redirection
-      String clusterId) {
+      String clusterId, boolean manualRedirection) {
+      if (manualRedirection) {
+        return createLocationResponse(resURI, createEmptyLogsInfo());
+      }
+
+  /**
+   * Creates a response with empty payload and a location header to preserve
+   * API compatibility.
+   *
+   * @param uri redirection url
+   * @param emptyPayload a payload that is discarded
+   * @return a response with empty payload
+   */
+  private static <T> Response createLocationResponse(
+      String uri, T emptyPayload) {
+    Response.ResponseBuilder response = Response.status(
+        HttpServletResponse.SC_OK).entity(emptyPayload);
+    response.header("Location", uri);
+    response.header("Access-Control-Expose-Headers", "Location");
+    return response.build();
+  }
+
+  private static GenericEntity<List<ContainerLogsInfo>> createEmptyLogsInfo() {
+    return new GenericEntity<List<ContainerLogsInfo>>(
+        Collections.EMPTY_LIST, List.class);
+  }
+
+  private static StreamingOutput createEmptyStream() {
+    return outputStream -> outputStream.write(
+        "".getBytes(Charset.defaultCharset()));
+  }
+   * @param manualRedirection whether to return a response with a Location
+   *                          instead of an automatic redirection
-      boolean redirectedFromNode, String clusterId) {
+      boolean redirectedFromNode, String clusterId, boolean manualRedirection) {
+
+
+      if (manualRedirection) {
+        return createLocationResponse(resURI, createEmptyStream());
+      }
+
