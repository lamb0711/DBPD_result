Merge trunk into HA branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1292838 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.mapreduce.JobStatus;
- * Single thread Collector tries to collec the stats.
- * Each of thread poll updates certain datastructure(Currently ClusterStats).
- * Components interested in these datastructure, need to register.
- * StatsCollector notifies each of the listeners.
+ * Single thread collector tries to collect the stats (currently cluster stats)
+ * and caches it internally.
+ * Components interested in these stats need to register themselves and will get
+ * notified either on every job completion event or some fixed time interval.
-public class Statistics implements Component<Job> {
+public class Statistics implements Component<Statistics.JobStats> {
-  //List of jobids and noofMaps for each job
-  private static final Map<Integer, JobStats> jobMaps =
-    new ConcurrentHashMap<Integer,JobStats>();
+  // A map of job-sequence-id to job-stats of submitted jobs
+  private static final Map<Integer, JobStats> submittedJobsMap =
+    new ConcurrentHashMap<Integer, JobStats>();
+  
+  // total number of map tasks submitted
+  private static volatile int numMapsSubmitted = 0;
+  // total number of reduce tasks submitted
+  private static volatile int numReducesSubmitted = 0;
+  
-  public void addJobStats(Job job, JobStory jobdesc) {
+  /**
+   * Generates a job stats.
+   */
+  public static JobStats generateJobStats(Job job, JobStory jobdesc) {
-    if (seq < 0) {
-      LOG.info("Not tracking job " + job.getJobName()
-               + " as seq id is less than zero: " + seq);
-      return;
+    // bail out if job description is missing for a job to be simulated
+    if (seq >= 0 && jobdesc == null) {
+      throw new IllegalArgumentException("JobStory not available for job " 
+                                         + job.getJobID());
-    int maps = 0;
-    int reds = 0;
-    if (jobdesc == null) {
-      throw new IllegalArgumentException(
-        " JobStory not available for job " + job.getJobName());
-    } else {
+    int maps = -1;
+    int reds = -1;
+    if (jobdesc != null) {
+      // Note that the ZombieJob will return a >= 0 value
-    JobStats stats = new JobStats(maps, reds, job);
-    jobMaps.put(seq,stats);
+    return new JobStats(maps, reds, job);
+  }
+  
+  /**
+   * Add a submitted job for monitoring.
+   */
+  public void addJobStats(JobStats stats) {
+    int seq = GridmixJob.getJobSeqId(stats.getJob());
+    if (seq < 0) {
+      LOG.info("Not tracking job " + stats.getJob().getJobName()
+               + " as seq id is less than zero: " + seq);
+      return;
+    }
+    submittedJobsMap.put(seq, stats);
+    numMapsSubmitted += stats.getNoOfMaps();
+    numReducesSubmitted += stats.getNoOfReds();
-  public void add(Job job) {
-    //This thread will be notified initially by jobmonitor incase of
+  public void add(Statistics.JobStats job) {
+    //This thread will be notified initially by job-monitor incase of
-    JobStats stat = jobMaps.remove(GridmixJob.getJobSeqId(job));
-
-    if (stat == null) return;
+    JobStats stat = submittedJobsMap.remove(GridmixJob.getJobSeqId(job.getJob()));
+    
+    // stat cannot be null
+    if (stat == null) {
+      LOG.error("[Statistics] Missing entry for job " 
+                + job.getJob().getJobID());
+      return;
+    }
+    
+    // update the total number of submitted map/reduce task count
+    numMapsSubmitted -= stat.getNoOfMaps();
+    numReducesSubmitted -= stat.getNoOfReds();
-    jobMaps.clear();
+    submittedJobsMap.clear();
-    jobMaps.clear();
+    submittedJobsMap.clear();
-    private int noOfMaps;
-    private int noOfReds;
-    private Job job;
+    private final int noOfMaps;
+    private final int noOfReds;
+    private JobStatus currentStatus;
+    private final Job job;
+    
+    /**
+     * Update the job statistics.
+     */
+    public synchronized void updateJobStatus(JobStatus status) {
+      this.currentStatus = status;
+    }
+    
+    /**
+     * Get the current job status.
+     */
+    public synchronized JobStatus getJobStatus() {
+      return currentStatus;
+    }
-      return jobMaps.size();
+      return submittedJobsMap.size();
-      return jobMaps.values();
+      return submittedJobsMap.values();
+    /**
+     * Returns the total number of submitted map tasks
+     */
+    static int getSubmittedMapTasks() {
+      return numMapsSubmitted;
+    }
+    
+    /**
+     * Returns the total number of submitted reduce tasks
+     */
+    static int getSubmittedReduceTasks() {
+      return numReducesSubmitted;
+    }
