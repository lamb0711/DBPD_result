YARN-8248. Job hangs when a job requests a resource that its queue does not have. (Szilard Nemeth via Haibo Chen)

+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import org.apache.hadoop.yarn.exceptions
+        .SchedulerInvalidResoureRequestException;
+  /**
+   * This class contains invalid resource information along with its
+   * resource request.
+   */
+  public static class MaxResourceValidationResult {
+    private ResourceRequest resourceRequest;
+    private List<ResourceInformation> invalidResources;
+
+    MaxResourceValidationResult(ResourceRequest resourceRequest,
+        List<ResourceInformation> invalidResources) {
+      this.resourceRequest = resourceRequest;
+      this.invalidResources = invalidResources;
+    }
+
+    public boolean isValid() {
+      return invalidResources.isEmpty();
+    }
+
+    @Override
+    public String toString() {
+      return "MaxResourceValidationResult{" + "resourceRequest="
+          + resourceRequest + ", invalidResources=" + invalidResources + '}';
+    }
+  }
+
-  private static final RecordFactory recordFactory = 
+  private static final RecordFactory recordFactory =
-  public static final String RELEASED_CONTAINER = 
+  public static final String RELEASED_CONTAINER =
+  private static Map<String, ResourceInformation> getZeroResources(
+      Resource resource) {
+    Map<String, ResourceInformation> resourceInformations = Maps.newHashMap();
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
+
+    for (int i = 0; i < maxLength; i++) {
+      ResourceInformation resourceInformation =
+          resource.getResourceInformation(i);
+      if (resourceInformation.getValue() == 0L) {
+        resourceInformations.put(resourceInformation.getName(),
+            resourceInformation);
+      }
+    }
+    return resourceInformations;
+  }
+
-      final ResourceInformation availableRI =
-          availableResource.getResourceInformation(reqResourceName);
-
-      long requestedResourceValue = requestedRI.getValue();
-      long availableResourceValue = availableRI.getValue();
-      int unitsRelation = UnitsConversionUtil
-          .compareUnits(requestedRI.getUnits(), availableRI.getUnits());
-
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Requested resource information: " + requestedRI);
-        LOG.debug("Available resource information: " + availableRI);
-        LOG.debug("Relation of units: " + unitsRelation);
-      }
-
-      // requested resource unit is less than available resource unit
-      // e.g. requestedUnit: "m", availableUnit: "K")
-      if (unitsRelation < 0) {
-        availableResourceValue =
-            UnitsConversionUtil.convert(availableRI.getUnits(),
-                requestedRI.getUnits(), availableRI.getValue());
-
-        // requested resource unit is greater than available resource unit
-        // e.g. requestedUnit: "G", availableUnit: "M")
-      } else if (unitsRelation > 0) {
-        requestedResourceValue =
-            UnitsConversionUtil.convert(requestedRI.getUnits(),
-                availableRI.getUnits(), requestedRI.getValue());
-      }
-
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Requested resource value after conversion: " +
-                requestedResourceValue);
-        LOG.info("Available resource value after conversion: " +
-                availableResourceValue);
-      }
-
-      if (requestedResourceValue > availableResourceValue) {
+      boolean valid = checkResource(requestedRI, availableResource);
+      if (!valid) {
+  public static MaxResourceValidationResult
+      validateResourceRequestsAgainstQueueMaxResource(
+      ResourceRequest resReq, Resource availableResource)
+      throws SchedulerInvalidResoureRequestException {
+    final Resource reqResource = resReq.getCapability();
+    Map<String, ResourceInformation> resourcesWithZeroAmount =
+        getZeroResources(availableResource);
+
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("Resources with zero amount: "
+          + Arrays.toString(resourcesWithZeroAmount.entrySet().toArray()));
+    }
+
+    List<ResourceInformation> invalidResources = Lists.newArrayList();
+    for (int i = 0; i < ResourceUtils.getNumberOfKnownResourceTypes(); i++) {
+      final ResourceInformation requestedRI =
+          reqResource.getResourceInformation(i);
+      final String reqResourceName = requestedRI.getName();
+
+      if (resourcesWithZeroAmount.containsKey(reqResourceName)
+          && requestedRI.getValue() > 0) {
+        invalidResources.add(requestedRI);
+      }
+    }
+    return new MaxResourceValidationResult(resReq, invalidResources);
+  }
+
+  /**
+   * Checks requested ResouceInformation against available Resource.
+   * @param requestedRI
+   * @param availableResource
+   * @return true if request is valid, false otherwise.
+   */
+  private static boolean checkResource(
+      ResourceInformation requestedRI, Resource availableResource) {
+    final ResourceInformation availableRI =
+        availableResource.getResourceInformation(requestedRI.getName());
+
+    long requestedResourceValue = requestedRI.getValue();
+    long availableResourceValue = availableRI.getValue();
+    int unitsRelation = UnitsConversionUtil.compareUnits(requestedRI.getUnits(),
+        availableRI.getUnits());
+
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Requested resource information: " + requestedRI);
+      LOG.debug("Available resource information: " + availableRI);
+      LOG.debug("Relation of units: " + unitsRelation);
+    }
+
+    // requested resource unit is less than available resource unit
+    // e.g. requestedUnit: "m", availableUnit: "K")
+    if (unitsRelation < 0) {
+      availableResourceValue =
+          UnitsConversionUtil.convert(availableRI.getUnits(),
+              requestedRI.getUnits(), availableRI.getValue());
+
+      // requested resource unit is greater than available resource unit
+      // e.g. requestedUnit: "G", availableUnit: "M")
+    } else if (unitsRelation > 0) {
+      requestedResourceValue =
+          UnitsConversionUtil.convert(requestedRI.getUnits(),
+              availableRI.getUnits(), requestedRI.getValue());
+    }
+
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Requested resource value after conversion: "
+          + requestedResourceValue);
+      LOG.info("Available resource value after conversion: "
+          + availableResourceValue);
+    }
+
+    return requestedResourceValue <= availableResourceValue;
+  }
+
