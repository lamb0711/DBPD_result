HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.

-import org.apache.hadoop.yarn.util.ConverterUtils;
-import org.apache.hadoop.yarn.webapp.hamlet.Hamlet;
-import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.PRE;
+import org.apache.hadoop.yarn.webapp.hamlet2.Hamlet;
+import org.apache.hadoop.yarn.webapp.hamlet2.Hamlet.PRE;
-          ._("Aggregation is not enabled. Try the nodemanager at " + nodeId)
-          ._();
+          .__("Aggregation is not enabled. Try the nodemanager at " + nodeId)
+          .__();
-            ._("Or see application log at " + nmApplicationLogUrl)
-            ._();
+            .__("Or see application log at " + nmApplicationLogUrl)
+            .__();
-          ._("Logs not available for " + logEntity
+          .__("Logs not available for " + logEntity
-              + "Check back later or try the nodemanager at " + nodeId)._();
+              + "Check back later or try the nodemanager at " + nodeId).__();
-            ._("Or see application log at " + nmApplicationLogUrl)
-            ._();
+            .__("Or see application log at " + nmApplicationLogUrl)
+            .__();
-          ._("Error getting logs at " + nodeId)._();
+          .__("Error getting logs at " + nodeId).__();
-                ._("User [" + remoteUser
+                .__("User [" + remoteUser
-                    + " in log file [" + thisNodeFile.getPath().getName() + "]")._();
+                    + " in log file [" + thisNodeFile.getPath().getName() + "]").__();
-          if (reader != null)
+          if (reader != null) {
+          }
-      html.h1()._("Error getting logs for " + logEntity)._();
+      html.h1().__("Error getting logs for " + logEntity).__();
-          html.pre()._("\n\n")._();
+          html.pre().__("\n\n").__();
-        html.p()._("Log Type: " + logType)._();
-        html.p()._("Log Upload Time: " + Times.format(logUpLoadTime))._();
-        html.p()._("Log Length: " + Long.toString(logLength))._();
+        html.p().__("Log Type: " + logType).__();
+        html.p().__("Log Upload Time: " + Times.format(logUpLoadTime)).__();
+        html.p().__("Log Length: " + Long.toString(logLength)).__();
-            html.p()._("Showing " + toRead + " bytes of " + logLength
+            html.p().__("Showing " + toRead + " bytes of " + logLength
-                    _(" for the full log.")._();
+                __(" for the full log.").__();
-          pre._(new String(cbuf, 0, len));
+          pre.__(new String(cbuf, 0, len));
-        pre._();
+        pre.__();
-      html.h1()._("Cannot get container logs without a ContainerId")._();
+      html.h1().__("Cannot get container logs without a ContainerId").__();
-          ._("Cannot get container logs for invalid containerId: "
-              + containerIdStr)._();
+          .__("Cannot get container logs for invalid containerId: "
+              + containerIdStr).__();
-      html.h1()._("Cannot get container logs without a NodeId")._();
+      html.h1().__("Cannot get container logs without a NodeId").__();
-      html.h1()._("Cannot get container logs. Invalid nodeId: " + nodeIdStr)
-          ._();
+      html.h1().__("Cannot get container logs. Invalid nodeId: " + nodeIdStr)
+          .__();
-      html.h1()._("Cannot get container logs without an app owner")._();
+      html.h1().__("Cannot get container logs without an app owner").__();
-        html.h1()._("Invalid log start value: " + startStr)._();
+        html.h1().__("Invalid log start value: " + startStr).__();
-        html.h1()._("Invalid log end value: " + endStr)._();
+        html.h1().__("Invalid log end value: " + endStr).__();
