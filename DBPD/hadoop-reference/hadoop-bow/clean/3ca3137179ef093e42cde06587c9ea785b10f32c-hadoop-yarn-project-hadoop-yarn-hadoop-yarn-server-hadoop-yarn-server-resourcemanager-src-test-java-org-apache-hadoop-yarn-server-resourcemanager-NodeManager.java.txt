YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.
MAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.yarn.api.protocolrecords.GetContainerStatusRequest;
-import org.apache.hadoop.yarn.api.protocolrecords.GetContainerStatusResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainerStatusesRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainerStatusesResponse;
-import org.apache.hadoop.yarn.api.protocolrecords.StartContainerResponse;
-import org.apache.hadoop.yarn.api.protocolrecords.StopContainerRequest;
-import org.apache.hadoop.yarn.api.protocolrecords.StopContainerResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.StartContainersRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.StartContainersResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.StopContainersRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.StopContainersResponse;
-  synchronized public StartContainerResponse startContainer(
-      StartContainerRequest request) 
+  synchronized public StartContainersResponse startContainers(
+      StartContainersRequest requests) 
-    Token containerToken = request.getContainerToken();
-    ContainerTokenIdentifier tokenId = null;
+    for (StartContainerRequest request : requests.getStartContainerRequests()) {
+      Token containerToken = request.getContainerToken();
+      ContainerTokenIdentifier tokenId = null;
-    try {
-      tokenId = BuilderUtils.newContainerTokenIdentifier(containerToken);
-    } catch (IOException e) {
-      throw RPCUtil.getRemoteException(e);
-    }
-
-    ContainerId containerID = tokenId.getContainerID();
-    ApplicationId applicationId =
-        containerID.getApplicationAttemptId().getApplicationId();
-
-    List<Container> applicationContainers = containers.get(applicationId);
-    if (applicationContainers == null) {
-      applicationContainers = new ArrayList<Container>();
-      containers.put(applicationId, applicationContainers);
-    }
-    
-    // Sanity check
-    for (Container container : applicationContainers) {
-      if (container.getId().compareTo(containerID)
-          == 0) {
-        throw new IllegalStateException(
-            "Container " + containerID +
-            " already setup on node " + containerManagerAddress);
+      try {
+        tokenId = BuilderUtils.newContainerTokenIdentifier(containerToken);
+      } catch (IOException e) {
+        throw RPCUtil.getRemoteException(e);
-    }
-    Container container =
-        BuilderUtils.newContainer(containerID,
-            this.nodeId, nodeHttpAddress,
-            tokenId.getResource(),
-            null, null                                 // DKDC - Doesn't matter
+      ContainerId containerID = tokenId.getContainerID();
+      ApplicationId applicationId =
+          containerID.getApplicationAttemptId().getApplicationId();
+
+      List<Container> applicationContainers = containers.get(applicationId);
+      if (applicationContainers == null) {
+        applicationContainers = new ArrayList<Container>();
+        containers.put(applicationId, applicationContainers);
+      }
+
+      // Sanity check
+      for (Container container : applicationContainers) {
+        if (container.getId().compareTo(containerID) == 0) {
+          throw new IllegalStateException("Container " + containerID
+              + " already setup on node " + containerManagerAddress);
+        }
+      }
+
+      Container container =
+          BuilderUtils.newContainer(containerID, this.nodeId, nodeHttpAddress,
+            tokenId.getResource(), null, null // DKDC - Doesn't matter
-    ContainerStatus containerStatus =
-        BuilderUtils.newContainerStatus(container.getId(), ContainerState.NEW,
-            "", -1000);
-    applicationContainers.add(container);
-    containerStatusMap.put(container, containerStatus);
-    Resources.subtractFrom(available, tokenId.getResource());
-    Resources.addTo(used, tokenId.getResource());
-    
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("startContainer:" + " node=" + containerManagerAddress
-        + " application=" + applicationId + " container=" + container
-        + " available=" + available + " used=" + used);
-    }
+      ContainerStatus containerStatus =
+          BuilderUtils.newContainerStatus(container.getId(),
+            ContainerState.NEW, "", -1000);
+      applicationContainers.add(container);
+      containerStatusMap.put(container, containerStatus);
+      Resources.subtractFrom(available, tokenId.getResource());
+      Resources.addTo(used, tokenId.getResource());
-    StartContainerResponse response = recordFactory.newRecordInstance(StartContainerResponse.class);
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("startContainer:" + " node=" + containerManagerAddress
+            + " application=" + applicationId + " container=" + container
+            + " available=" + available + " used=" + used);
+      }
+
+    }
+    StartContainersResponse response =
+        StartContainersResponse.newInstance(null, null, null);
-  synchronized public StopContainerResponse stopContainer(StopContainerRequest request) 
+  synchronized public StopContainersResponse stopContainers(StopContainersRequest request) 
-    ContainerId containerID = request.getContainerId();
-    String applicationId = String.valueOf(
-        containerID.getApplicationAttemptId().getApplicationId().getId());
-    
-    // Mark the container as COMPLETE
-    List<Container> applicationContainers = containers.get(applicationId);
-    for (Container c : applicationContainers) {
-      if (c.getId().compareTo(containerID) == 0) {
-        ContainerStatus containerStatus = containerStatusMap.get(c);
-        containerStatus.setState(ContainerState.COMPLETE);
-        containerStatusMap.put(c, containerStatus);
+    for (ContainerId containerID : request.getContainerIds()) {
+      String applicationId =
+          String.valueOf(containerID.getApplicationAttemptId()
+            .getApplicationId().getId());
+
+      // Mark the container as COMPLETE
+      List<Container> applicationContainers = containers.get(applicationId);
+      for (Container c : applicationContainers) {
+        if (c.getId().compareTo(containerID) == 0) {
+          ContainerStatus containerStatus = containerStatusMap.get(c);
+          containerStatus.setState(ContainerState.COMPLETE);
+          containerStatusMap.put(c, containerStatus);
+        }
+      }
+
+      // Send a heartbeat
+      try {
+        heartbeat();
+      } catch (IOException ioe) {
+        throw RPCUtil.getRemoteException(ioe);
+      }
+
+      // Remove container and update status
+      int ctr = 0;
+      Container container = null;
+      for (Iterator<Container> i = applicationContainers.iterator(); i
+        .hasNext();) {
+        container = i.next();
+        if (container.getId().compareTo(containerID) == 0) {
+          i.remove();
+          ++ctr;
+        }
+      }
+
+      if (ctr != 1) {
+        throw new IllegalStateException("Container " + containerID
+            + " stopped " + ctr + " times!");
+      }
+
+      Resources.addTo(available, container.getResource());
+      Resources.subtractFrom(used, container.getResource());
+
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("stopContainer:" + " node=" + containerManagerAddress
+            + " application=" + applicationId + " container=" + containerID
+            + " available=" + available + " used=" + used);
-    
-    // Send a heartbeat
-    try {
-      heartbeat();
-    } catch (IOException ioe) {
-      throw RPCUtil.getRemoteException(ioe);
-    }
-    
-    // Remove container and update status
-    int ctr = 0;
-    Container container = null;
-    for (Iterator<Container> i=applicationContainers.iterator(); i.hasNext();) {
-      container = i.next();
-      if (container.getId().compareTo(containerID) == 0) {
-        i.remove();
-        ++ctr;
-      }
-    }
-    
-    if (ctr != 1) {
-      throw new IllegalStateException("Container " + containerID + 
-          " stopped " + ctr + " times!");
-    }
-    
-    Resources.addTo(available, container.getResource());
-    Resources.subtractFrom(used, container.getResource());
-
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("stopContainer:" + " node=" + containerManagerAddress
-        + " application=" + applicationId + " container=" + containerID
-        + " available=" + available + " used=" + used);
-    }
-
-    StopContainerResponse response = recordFactory.newRecordInstance(StopContainerResponse.class);
-    return response;
+    return StopContainersResponse.newInstance(null,null);
-  synchronized public GetContainerStatusResponse getContainerStatus(GetContainerStatusRequest request) throws YarnException {
-    ContainerId containerId = request.getContainerId();
-    List<Container> appContainers = 
-        containers.get(
-            containerId.getApplicationAttemptId().getApplicationId());
-    Container container = null;
-    for (Container c : appContainers) {
-      if (c.getId().equals(containerId)) {
-        container = c;
+  synchronized public GetContainerStatusesResponse getContainerStatuses(
+      GetContainerStatusesRequest request) throws YarnException {
+    List<ContainerStatus> statuses = new ArrayList<ContainerStatus>();
+    for (ContainerId containerId : request.getContainerIds()) {
+      List<Container> appContainers =
+          containers.get(containerId.getApplicationAttemptId()
+            .getApplicationId());
+      Container container = null;
+      for (Container c : appContainers) {
+        if (c.getId().equals(containerId)) {
+          container = c;
+        }
+      }
+      if (container != null
+          && containerStatusMap.get(container).getState() != null) {
+        statuses.add(containerStatusMap.get(container));
-    GetContainerStatusResponse response = 
-        recordFactory.newRecordInstance(GetContainerStatusResponse.class);
-    if (container != null && containerStatusMap.get(container).getState() != null) {
-      response.setStatus(containerStatusMap.get(container));
-    }
-    return response;
+    return GetContainerStatusesResponse.newInstance(statuses, null);
