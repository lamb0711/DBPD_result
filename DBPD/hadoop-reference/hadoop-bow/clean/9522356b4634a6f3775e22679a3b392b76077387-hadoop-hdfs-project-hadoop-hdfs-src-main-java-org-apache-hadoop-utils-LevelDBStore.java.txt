HDFS-12069. Ozone: Create a general abstraction for metadata store. Contributed by Weiwei Yang.

-import org.apache.hadoop.utils.LevelDBKeyFilters.LevelDBKeyFilter;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.hadoop.utils.MetadataKeyFilters.MetadataKeyFilter;
-import java.io.Closeable;
-public class LevelDBStore implements Closeable {
+public class LevelDBStore implements MetadataStore {
-  /**
-   * Opens a DB file.
-   *
-   * @param dbPath          - DB File path
-   * @param createIfMissing - Create if missing
-   * @throws IOException
-   */
-  public LevelDBStore(File dbPath, boolean createIfMissing) throws
-      IOException {
+  public LevelDBStore(File dbPath, boolean createIfMissing)
+      throws IOException {
-    db = JniDBFactory.factory.open(dbPath, dbOptions);
-    if (db == null) {
-      throw new IOException("Db is null");
-    }
+    openDB(dbPath, dbOptions);
-    db = JniDBFactory.factory.open(dbPath, options);
-    if (db == null) {
-      throw new IOException("Db is null");
-    }
+    openDB(dbPath, dbOptions);
+  private void openDB(File dbPath, Options options) throws IOException {
+    db = JniDBFactory.factory.open(dbPath, options);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("LevelDB successfully opened");
+      LOG.debug("[Option] cacheSize = " + options.cacheSize());
+      LOG.debug("[Option] createIfMissing = " + options.createIfMissing());
+      LOG.debug("[Option] blockSize = " + options.blockSize());
+      LOG.debug("[Option] compressionType= " + options.compressionType());
+      LOG.debug("[Option] maxOpenFiles= " + options.maxOpenFiles());
+      LOG.debug("[Option] writeBufferSize= "+ options.writeBufferSize());
+    }
+  }
+  @Override
+  @Override
+  @Override
+  @Override
-    DBIterator iter = db.iterator();
-    try {
+    try (DBIterator iter = db.iterator()) {
-      return !iter.hasNext();
-    } finally {
-      iter.close();
+      boolean hasNext = !iter.hasNext();
+      return hasNext;
-   * Returns Java File Object that points to the DB.
-   * @return File
-   */
-  public File getDbFile() {
-    return dbFile;
-  }
-
-  /**
+  @Override
-  /**
-   * Returns a write batch for write multiple key-value pairs atomically.
-   * @return write batch that can be commit atomically.
-   */
-  public WriteBatch createWriteBatch() {
-    return db.createWriteBatch();
+  @Override
+  public ImmutablePair<byte[], byte[]> peekAround(int offset,
+      byte[] from) throws IOException, IllegalArgumentException {
+    try (DBIterator it = db.iterator()) {
+      if (from == null) {
+        it.seekToFirst();
+      } else {
+        it.seek(from);
+      }
+      if (!it.hasNext()) {
+        throw new IOException("Key not found");
+      }
+      switch (offset) {
+      case 0:
+        Entry<byte[], byte[]> current = it.next();
+        return new ImmutablePair<>(current.getKey(), current.getValue());
+      case 1:
+        if (it.next() != null && it.hasNext()) {
+          Entry<byte[], byte[]> next = it.peekNext();
+          return new ImmutablePair<>(next.getKey(), next.getValue());
+        }
+        break;
+      case -1:
+        if (it.hasPrev()) {
+          Entry<byte[], byte[]> prev = it.peekPrev();
+          return new ImmutablePair<>(prev.getKey(), prev.getValue());
+        }
+        break;
+      default:
+        throw new IllegalArgumentException(
+            "Position can only be -1, 0 " + "or 1, but found " + offset);
+      }
+    }
+    return null;
-  /**
-   * Commit multiple writes of key-value pairs atomically.
-   * @param wb
-   */
-  public void commitWriteBatch(WriteBatch wb) {
-    db.write(wb, writeOptions);
-  }
-
-  /**
-   * Close a write batch of multiple writes to key-value pairs.
-   * @param wb - write batch.
-   * @throws IOException
-   */
-  public void closeWriteBatch(WriteBatch wb) throws IOException {
-    wb.close();
+  @Override
+  public void iterate(byte[] from, EntryConsumer consumer)
+      throws IOException {
+    try (DBIterator iter = db.iterator()) {
+      if (from != null) {
+        iter.seek(from);
+      } else {
+        iter.seekToFirst();
+      }
+      while (iter.hasNext()) {
+        Entry<byte[], byte[]> current = iter.next();
+        if (!consumer.consume(current.getKey(),
+            current.getValue())) {
+          break;
+        }
+      }
+    }
+  @Override
-  /**
-   * Returns a certain range of key value pairs as a list based on a startKey
-   * or count.
-   *
-   * @param keyPrefix start key.
-   * @param count number of entries to return.
-   * @return a range of entries or an empty list if nothing found.
-   * @throws IOException
-   *
-   * @see #getRangeKVs(byte[], int, LevelDBKeyFilter...)
-   */
-  public List<Entry<byte[], byte[]>> getRangeKVs(byte[] keyPrefix, int count)
-      throws IOException {
-    LevelDBKeyFilter emptyFilter = (preKey, currentKey, nextKey) -> true;
-    return getRangeKVs(keyPrefix, count, emptyFilter);
+  @Override
+  public void writeBatch(BatchOperation operation) throws IOException {
+    List<BatchOperation.SingleOperation> operations =
+        operation.getOperations();
+    if (!operations.isEmpty()) {
+      try (WriteBatch writeBatch = db.createWriteBatch()) {
+        for (BatchOperation.SingleOperation opt : operations) {
+          switch (opt.getOpt()) {
+          case DELETE:
+            writeBatch.delete(opt.getKey());
+            break;
+          case PUT:
+            writeBatch.put(opt.getKey(), opt.getValue());
+            break;
+          default:
+            throw new IllegalArgumentException("Invalid operation "
+                + opt.getOpt());
+          }
+        }
+        db.write(writeBatch);
+      }
+    }
-   * startKey or count. Further a {@link LevelDBKeyFilter} can be added to
+   * startKey or count. Further a {@link MetadataKeyFilter} can be added to
-   * This method allows to specify one or more {@link LevelDBKeyFilter}
+   * This method allows to specify one or more {@link MetadataKeyFilter}
-   * @param filters customized one or more {@link LevelDBKeyFilter}.
+   * @param filters customized one or more {@link MetadataKeyFilter}.
+  @Override
-      int count, LevelDBKeyFilter... filters) throws IOException {
+      int count, MetadataKeyFilter... filters) throws IOException {
-                + " result length is {}.",
-            timeConsumed, result.size());
+                + " result length is {}.", timeConsumed, result.size());
