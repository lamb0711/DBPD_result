HADOOP-6900. Make the iterator returned by FileSystem#listLocatedStatus to throw IOException rather than RuntimeException when there is an IO error fetching the next file. Contributed by Hairong Kuang. 



git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@984301 13f79535-47bb-0310-9956-ffa450edef68

-        Iterator<FileStatus> list = listStatusIterator(dst);
+        RemoteIterator<FileStatus> list = listStatusIterator(dst);
-  protected Iterator<FileStatus> listStatusIterator(final Path f)
+  protected RemoteIterator<FileStatus> listStatusIterator(final Path f)
-    return new Iterator<FileStatus>() {
+    return new RemoteIterator<FileStatus>() {
-      
-      @Override
-      public void remove() {
-        throw new UnsupportedOperationException("Remove is not supported");
-      }
-  protected Iterator<LocatedFileStatus> listLocatedStatus(final Path f)
+  protected RemoteIterator<LocatedFileStatus> listLocatedStatus(final Path f)
-    return new Iterator<LocatedFileStatus>() {
-      private Iterator<FileStatus> itor = listStatusIterator(f);
+    return new RemoteIterator<LocatedFileStatus>() {
+      private RemoteIterator<FileStatus> itor = listStatusIterator(f);
-      /**
-       *  {@inheritDoc}
-       *  @return {@inheritDog} 
-       *  @throws Runtimeexception if any IOException occurs during traversal;
-       *  the IOException is set as the cause of the RuntimeException
-       */
-      public boolean hasNext() {
+      public boolean hasNext() throws IOException {
-      /**
-       *  {@inheritDoc}
-       *  @return {@inheritDoc} 
-       *  @throws Runtimeexception if any IOException occurs during traversal;
-       *  the IOException is set as the cause of the RuntimeException
-       *  @exception {@inheritDoc}
-       */
-      public LocatedFileStatus next() {
+      public LocatedFileStatus next() throws IOException {
-        try {
-          
-          BlockLocation[] locs = null;
-          if (result.isFile()) {
-            locs = getFileBlockLocations(
+        BlockLocation[] locs = null;
+        if (result.isFile()) {
+          locs = getFileBlockLocations(
-          }
-          return new LocatedFileStatus(result, locs);
-        } catch (IOException ioe) {
-          throw (RuntimeException)new RuntimeException().initCause(ioe);
-      }
-      
-      @Override
-      public void remove() {
-        throw new UnsupportedOperationException("Remove is not supported");
+        return new LocatedFileStatus(result, locs);
