Revert 1140913 and 1140909 for HDFS-2107.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.hadoop.hdfs.server.blockmanagement;
+package org.apache.hadoop.hdfs.server.namenode;
-import org.apache.hadoop.hdfs.server.blockmanagement.UnderReplicatedBlocks.BlockIterator;
-import org.apache.hadoop.hdfs.server.namenode.FSNamesystem;
-import org.apache.hadoop.hdfs.server.namenode.INode;
-import org.apache.hadoop.hdfs.server.namenode.INodeFile;
-import org.apache.hadoop.hdfs.server.namenode.INodeFileUnderConstruction;
-import org.apache.hadoop.hdfs.server.namenode.NameNode;
+import org.apache.hadoop.hdfs.server.namenode.FSNamesystem.NumberReplicas;
+import org.apache.hadoop.hdfs.server.namenode.UnderReplicatedBlocks;
-  private volatile long pendingReplicationBlocksCount = 0L;
-  private volatile long corruptReplicaBlocksCount = 0L;
-  private volatile long underReplicatedBlocksCount = 0L;
-  public volatile long scheduledReplicationBlocksCount = 0L;
-  private volatile long excessBlocksCount = 0L;
-  private volatile long pendingDeletionBlocksCount = 0L;
+  volatile long pendingReplicationBlocksCount = 0L;
+  volatile long corruptReplicaBlocksCount = 0L;
+  volatile long underReplicatedBlocksCount = 0L;
+  volatile long scheduledReplicationBlocksCount = 0L;
+  volatile long excessBlocksCount = 0L;
+  volatile long pendingDeletionBlocksCount = 0L;
-  /** Used by metrics */
-  public long getPendingReplicationBlocksCount() {
-    return pendingReplicationBlocksCount;
-  }
-  /** Used by metrics */
-  public long getUnderReplicatedBlocksCount() {
-    return underReplicatedBlocksCount;
-  }
-  /** Used by metrics */
-  public long getCorruptReplicaBlocksCount() {
-    return corruptReplicaBlocksCount;
-  }
-  /** Used by metrics */
-  public long getScheduledReplicationBlocksCount() {
-    return scheduledReplicationBlocksCount;
-  }
-  /** Used by metrics */
-  public long getPendingDeletionBlocksCount() {
-    return pendingDeletionBlocksCount;
-  }
-  /** Used by metrics */
-  public long getExcessBlocksCount() {
-    return excessBlocksCount;
-  }
-
-  /**
-   * Mapping: Block -> { INode, datanodes, self ref }
-   * Updated only in response to client-sent information.
-   */
-  public final BlocksMap blocksMap;
+  //
+  // Mapping: Block -> { INode, datanodes, self ref }
+  // Updated only in response to client-sent information.
+  //
+  final BlocksMap blocksMap;
-  public final Map<String, Collection<Block>> excessReplicateMap =
+  Map<String, Collection<Block>> excessReplicateMap =
-  public UnderReplicatedBlocks neededReplications = new UnderReplicatedBlocks();
+  UnderReplicatedBlocks neededReplications = new UnderReplicatedBlocks();
-  public int maxReplication;
+  int maxReplication;
-  public int maxReplicationStreams;
+  int maxReplicationStreams;
-  public int minReplication;
+  int minReplication;
-  public int defaultReplication;
+  int defaultReplication;
-  public BlockPlacementPolicy replicator;
+  BlockPlacementPolicy replicator;
-  public BlockManager(FSNamesystem fsn, Configuration conf) throws IOException {
+  BlockManager(FSNamesystem fsn, Configuration conf) throws IOException {
-  public void activate() {
+  void activate() {
-  public void close() {
+  void close() {
-  public void metaSave(PrintWriter out) {
+  void metaSave(PrintWriter out) {
-  public boolean checkMinReplication(Block block) {
+  boolean checkMinReplication(Block block) {
-  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, 
+  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, 
-  public LocatedBlock convertLastBlockToUnderConstruction(
+  LocatedBlock convertLastBlockToUnderConstruction(
-  public ArrayList<String> getValidLocations(Block block) {
+  ArrayList<String> getValidLocations(Block block) {
-  public List<LocatedBlock> getBlockLocations(BlockInfo[] blocks, long offset,
+  List<LocatedBlock> getBlockLocations(BlockInfo[] blocks, long offset,
-  /** @return a LocatedBlock for the given block */
-  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos
+  /** @param needBlockToken 
+   * @return a LocatedBlock for the given block */
+  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos
-    if (blk instanceof BlockInfoUnderConstruction) {
-      if (blk.isComplete()) {
-        throw new IOException(
-            "blk instanceof BlockInfoUnderConstruction && blk.isComplete()"
-            + ", blk=" + blk);
-      }
+    if (!blk.isComplete()) {
-   public void verifyReplication(String src,
+   void verifyReplication(String src,
-  public void addToInvalidates(Block b, DatanodeInfo dn) {
+  void addToInvalidates(Block b, DatanodeInfo dn) {
-  public void findAndMarkBlockAsCorrupt(Block blk,
+  void findAndMarkBlockAsCorrupt(Block blk,
-  public void updateState() {
+  void updateState() {
-  public int getUnderReplicatedNotMissingBlocks() {
+  int getUnderReplicatedNotMissingBlocks() {
-  public int computeInvalidateWork(int nodesToProcess) {
+  int computeInvalidateWork(int nodesToProcess) {
-  public int computeReplicationWork(int blocksToProcess) throws IOException {
+  int computeReplicationWork(int blocksToProcess) throws IOException {
-  public void processPendingReplications() {
+  void processPendingReplications() {
-          num.decommissionedReplicas(), fileReplication);
+          num.decommissionedReplicas, fileReplication);
-  public void processMisReplicatedBlocks() {
+  void processMisReplicatedBlocks() {
-  public void processOverReplicatedBlock(Block block, short replication,
+  void processOverReplicatedBlock(Block block, short replication,
-  public void addToExcessReplicate(DatanodeInfo dn, Block block) {
+  void addToExcessReplicate(DatanodeInfo dn, Block block) {
-  public void removeStoredBlock(Block block, DatanodeDescriptor node) {
+  void removeStoredBlock(Block block, DatanodeDescriptor node) {
-  public void addBlock(DatanodeDescriptor node, Block block, String delHint)
+  void addBlock(DatanodeDescriptor node, Block block, String delHint)
-  public NumberReplicas countNodes(Block b) {
+  NumberReplicas countNodes(Block b) {
-  public boolean isReplicationInProgress(DatanodeDescriptor srcNode) {
+  boolean isReplicationInProgress(DatanodeDescriptor srcNode) {
-  public int getActiveBlockCount() {
+  int getActiveBlockCount() {
-  public DatanodeDescriptor[] getNodes(BlockInfo block) {
+  DatanodeDescriptor[] getNodes(BlockInfo block) {
-  public int getTotalBlocks() {
+  int getTotalBlocks() {
-  public void removeBlock(Block block) {
+  void removeBlock(Block block) {
-  public BlockInfo getStoredBlock(Block block) {
+  BlockInfo getStoredBlock(Block block) {
-  public void updateNeededReplications(Block block, int curReplicasDelta,
+  void updateNeededReplications(Block block, int curReplicasDelta,
-  public void checkReplication(Block block, int numExpectedReplicas) {
+  void checkReplication(Block block, int numExpectedReplicas) {
-                             number.decommissionedReplicas(),
+                             number.decommissionedReplicas,
-  /** Remove a datanode from the invalidatesSet */
-  public void removeFromInvalidates(String storageID) {
+  /**
+   * Remove a datanode from the invalidatesSet
+   * @param n datanode
+   */
+  void removeFromInvalidates(String storageID) {
-  public int getNumberOfRacks(Block b) {
+  int getNumberOfRacks(Block b) {
-  public long getMissingBlocksCount() {
+  long getMissingBlocksCount() {
-  public BlockInfo addINode(BlockInfo block, INodeFile iNode) {
+  BlockInfo addINode(BlockInfo block, INodeFile iNode) {
-  public INodeFile getINode(Block b) {
+  INodeFile getINode(Block b) {
-  public void removeFromCorruptReplicasMap(Block block) {
+  void removeFromCorruptReplicasMap(Block block) {
-  public int numCorruptReplicas(Block block) {
+  int numCorruptReplicas(Block block) {
-  public void removeBlockFromMap(Block block) {
+  void removeBlockFromMap(Block block) {
-  public int getCapacity() {
+  int getCapacity() {
-  public long[] getCorruptReplicaBlockIds(int numExpectedBlocks,
+  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,
-  public BlockIterator getCorruptReplicaBlockIterator() {
+  UnderReplicatedBlocks.BlockIterator getCorruptReplicaBlockIterator() {
