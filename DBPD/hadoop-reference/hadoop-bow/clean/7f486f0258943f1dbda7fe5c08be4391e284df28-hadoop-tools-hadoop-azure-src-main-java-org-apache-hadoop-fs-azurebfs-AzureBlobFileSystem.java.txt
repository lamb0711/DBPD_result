HADOOP-17016. Adding Common Counters in ABFS (#1991).

Contributed by: Mehakmeet Singh.

Change-Id: Ib84e7a42f28e064df4c6204fcce33e573360bf42

+import java.util.Map;
+import org.apache.hadoop.fs.azurebfs.services.AbfsCounters;
+import static org.apache.hadoop.fs.azurebfs.AbfsStatistic.*;
+  private AbfsCounters instrumentation;
-
+    instrumentation = new AbfsInstrumentation(uri);
+    if (instrumentation != null) {
+      sb.append(", Statistics: {").append(instrumentation.formString("{", "=",
+          "}", true));
+      sb.append("}");
+    }
-
+    statIncrement(CALL_OPEN);
+    statIncrement(CALL_CREATE);
+      statIncrement(FILES_CREATED);
+    statIncrement(CALL_CREATE_NON_RECURSIVE);
-
+    statIncrement(CALL_APPEND);
-
+    statIncrement(CALL_RENAME);
-
+    statIncrement(CALL_DELETE);
-
+    statIncrement(CALL_LIST_STATUS);
+   * Increment of an Abfs statistic.
+   *
+   * @param statistic AbfsStatistic that needs increment.
+   */
+  private void statIncrement(AbfsStatistic statistic) {
+    incrementStatistic(statistic);
+  }
+
+  /**
+   * Method for incrementing AbfsStatistic by a long value.
+   *
+   * @param statistic the Statistic to be incremented.
+   */
+  private void incrementStatistic(AbfsStatistic statistic) {
+    instrumentation.incrementCounter(statistic, 1);
+  }
+
+  /**
-
+    statIncrement(CALL_MKDIRS);
+      statIncrement(DIRECTORIES_CREATED);
+    LOG.debug("Closing Abfs: " + toString());
-
+    statIncrement(CALL_GET_FILE_STATUS);
+            if (fs.isDirectory()) {
+              statIncrement(DIRECTORIES_DELETED);
+            } else {
+              statIncrement(FILES_DELETED);
+            }
+  /**
+   * Incrementing exists() calls from superclass for statistic collection.
+   *
+   * @param f source path.
+   * @return true if the path exists.
+   * @throws IOException
+   */
+  @Override
+  public boolean exists(Path f) throws IOException {
+    statIncrement(CALL_EXIST);
+    return super.exists(f);
+  }
+
+      statIncrement(ERROR_IGNORED);
+        statIncrement(ERROR_IGNORED);
+    statIncrement(CALL_GET_DELEGATION_TOKEN);
+  @VisibleForTesting
+  Map<String, Long> getInstrumentationMap() {
+    return instrumentation.toMap();
+  }
+
