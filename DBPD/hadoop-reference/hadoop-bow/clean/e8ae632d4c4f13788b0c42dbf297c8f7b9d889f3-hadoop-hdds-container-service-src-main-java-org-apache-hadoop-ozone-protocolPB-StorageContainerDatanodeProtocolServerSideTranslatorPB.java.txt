HDDS-2068. Make StorageContainerDatanodeProtocolService message based

Signed-off-by: Anu Engineer <aengineer@apache.org>

-import com.google.protobuf.RpcController;
-import com.google.protobuf.ServiceException;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.PipelineReportsProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.NodeReportProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.SCMRegisterRequestProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.SCMRegisteredResponseProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.SCMVersionRequestProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.SCMVersionResponseProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.ContainerReportsProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.SCMHeartbeatRequestProto;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.SCMHeartbeatResponseProto;
+import java.io.IOException;
+
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.ContainerReportsProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.NodeReportProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.PipelineReportsProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.SCMDatanodeRequest;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.SCMDatanodeResponse;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.SCMRegisterRequestProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.SCMRegisteredResponseProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.Status;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.Type;
+import org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher;
-import java.io.IOException;
+import com.google.protobuf.RpcController;
+import com.google.protobuf.ServiceException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+  private static final Logger LOG = LoggerFactory
+      .getLogger(StorageContainerDatanodeProtocolServerSideTranslatorPB.class);
+
+  private final OzoneProtocolMessageDispatcher<SCMDatanodeRequest,
+      SCMDatanodeResponse> dispatcher;
-      StorageContainerDatanodeProtocol impl) {
+      StorageContainerDatanodeProtocol impl,
+      ProtocolMessageMetrics protocolMessageMetrics) {
+    dispatcher =
+        new OzoneProtocolMessageDispatcher<>("SCMDatanodeProtocol",
+            protocolMessageMetrics,
+            LOG);
+  }
+
+  public SCMRegisteredResponseProto register(
+      SCMRegisterRequestProto request) throws IOException {
+    ContainerReportsProto containerRequestProto = request
+        .getContainerReport();
+    NodeReportProto dnNodeReport = request.getNodeReport();
+    PipelineReportsProto pipelineReport = request.getPipelineReports();
+    return impl.register(request.getDatanodeDetails(), dnNodeReport,
+        containerRequestProto, pipelineReport);
+
-  public SCMVersionResponseProto getVersion(RpcController controller,
-      SCMVersionRequestProto request)
+  public SCMDatanodeResponse submitRequest(RpcController controller,
+      SCMDatanodeRequest request) throws ServiceException {
+    return dispatcher.processRequest(request, this::processMessage,
+        request.getCmdType(), request.getTraceID());
+  }
+
+  public SCMDatanodeResponse processMessage(SCMDatanodeRequest request)
-      return impl.getVersion(request);
+      Type cmdType = request.getCmdType();
+      switch (cmdType) {
+      case GetVersion:
+        return SCMDatanodeResponse.newBuilder()
+            .setCmdType(cmdType)
+            .setStatus(Status.OK)
+            .setGetVersionResponse(
+                impl.getVersion(request.getGetVersionRequest()))
+            .build();
+      case SendHeartbeat:
+        return SCMDatanodeResponse.newBuilder()
+            .setCmdType(cmdType)
+            .setStatus(Status.OK)
+            .setSendHeartbeatResponse(
+                impl.sendHeartbeat(request.getSendHeartbeatRequest()))
+            .build();
+      case Register:
+        return SCMDatanodeResponse.newBuilder()
+            .setCmdType(cmdType)
+            .setStatus(Status.OK)
+            .setRegisterResponse(register(request.getRegisterRequest()))
+            .build();
+      default:
+        throw new ServiceException("Unknown command type: " + cmdType);
+      }
-
-  @Override
-  public SCMRegisteredResponseProto register(RpcController controller,
-      SCMRegisterRequestProto request) throws ServiceException {
-    try {
-      ContainerReportsProto containerRequestProto = request
-          .getContainerReport();
-      NodeReportProto dnNodeReport = request.getNodeReport();
-      PipelineReportsProto pipelineReport = request.getPipelineReports();
-      return impl.register(request.getDatanodeDetails(), dnNodeReport,
-          containerRequestProto, pipelineReport);
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
-  }
-
-  @Override
-  public SCMHeartbeatResponseProto sendHeartbeat(RpcController controller,
-      SCMHeartbeatRequestProto request) throws ServiceException {
-    try {
-      return impl.sendHeartbeat(request);
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
-  }
-
