YARN-3632. Ordering policy should be allowed to reorder an application when demand changes. Contributed by Craig Welch

+  protected Map<String, S> entitiesToReorder = new HashMap<String, S>();
+    reorderScheduleEntities();
+    reorderScheduleEntities();
+  protected void reorderScheduleEntities() {
+    synchronized (entitiesToReorder) {
+      for (Map.Entry<String, S> entry :
+          entitiesToReorder.entrySet()) {
+        reorderSchedulableEntity(entry.getValue());
+      }
+      entitiesToReorder.clear();
+    }
+  }
+
+  protected void entityRequiresReordering(S schedulableEntity) {
+    synchronized (entitiesToReorder) {
+      entitiesToReorder.put(schedulableEntity.getId(), schedulableEntity);
+    }
+  }
+
+    synchronized (entitiesToReorder) {
+      entitiesToReorder.remove(s.getId());
+    }
+  public abstract void demandUpdated(S schedulableEntity);
+
+  @Override
