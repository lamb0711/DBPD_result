HDDS-1600. Add userName and IPAddress as part of OMRequest. (#857)



+import java.net.InetAddress;
+
+import org.apache.hadoop.ipc.ProtobufRpcEngine;
+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos
+    .OMResponse;
+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;
+import org.apache.hadoop.ozone.security.acl.OzoneObj;
+import org.apache.hadoop.security.UserGroupInformation;
-  public abstract OMRequest preExecute(OzoneManager ozoneManager)
-      throws IOException;
+  public OMRequest preExecute(OzoneManager ozoneManager)
+      throws IOException {
+    return getOmRequest().toBuilder().setUserInfo(getUserInfo()).build();
+  }
+  /**
+   * Get User information from the OMRequest.
+   * @return User Info.
+   */
+  public OzoneManagerProtocolProtos.UserInfo getUserInfo() {
+    UserGroupInformation user = ProtobufRpcEngine.Server.getRemoteUser();
+    InetAddress remoteAddress = ProtobufRpcEngine.Server.getRemoteIp();
+    OzoneManagerProtocolProtos.UserInfo.Builder userInfo =
+        OzoneManagerProtocolProtos.UserInfo.newBuilder();
+
+    // Added not null checks, as in UT's these values might be null.
+    if (user != null) {
+      userInfo.setUserName(user.getUserName());
+    }
+
+    if (remoteAddress != null) {
+      userInfo.setRemoteAddress(remoteAddress.getHostAddress()).build();
+    }
+
+    return userInfo.build();
+  }
+
+  /**
+   * Check Acls of ozone object.
+   * @param ozoneManager
+   * @param resType
+   * @param storeType
+   * @param aclType
+   * @param vol
+   * @param bucket
+   * @param key
+   * @throws IOException
+   */
+  public void checkAcls(OzoneManager ozoneManager,
+      OzoneObj.ResourceType resType,
+      OzoneObj.StoreType storeType, IAccessAuthorizer.ACLType aclType,
+      String vol, String bucket, String key) throws IOException {
+    ozoneManager.checkAcls(resType, storeType, aclType, vol, bucket, key,
+        createUGI(), getRemoteAddress());
+  }
+
+  /**
+   * Return UGI object created from OMRequest userInfo. If userInfo is not
+   * set, returns null.
+   * @return UserGroupInformation.
+   */
+  @VisibleForTesting
+  public UserGroupInformation createUGI() {
+    if (omRequest.hasUserInfo()) {
+      return UserGroupInformation.createRemoteUser(
+          omRequest.getUserInfo().getUserName());
+    } else {
+      // This will never happen, as for every OM request preExecute, we
+      // should add userInfo.
+      return null;
+    }
+  }
+
+  /**
+   * Return InetAddress created from OMRequest userInfo. If userInfo is not
+   * set, returns null.
+   * @return InetAddress
+   * @throws IOException
+   */
+  @VisibleForTesting
+  public InetAddress getRemoteAddress() throws IOException {
+    if (omRequest.hasUserInfo()) {
+      return InetAddress.getByName(omRequest.getUserInfo()
+          .getRemoteAddress());
+    } else {
+      return null;
+    }
+  }
+
+  /**
+   * Set parameters needed for return error response to client.
+   * @param omResponse
+   * @param ex - IOException
+   * @return error response need to be returned to client - OMResponse.
+   */
+  protected OMResponse createErrorOMResponse(OMResponse.Builder omResponse,
+      IOException ex) {
+
+    omResponse.setSuccess(false);
+    if (ex.getMessage() != null) {
+      omResponse.setMessage(ex.getMessage());
+    }
+    omResponse.setStatus(OzoneManagerRatisUtils.exceptionToResponseStatus(ex));
+    return omResponse.build();
+  }
+
