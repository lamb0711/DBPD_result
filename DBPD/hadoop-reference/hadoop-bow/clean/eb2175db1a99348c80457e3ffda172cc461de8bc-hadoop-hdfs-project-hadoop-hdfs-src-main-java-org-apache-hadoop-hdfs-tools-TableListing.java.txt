HDFS-5190. Move cache pool related CLI commands to CacheAdmin. (Contributed by Andrew Wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1529334 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import org.apache.commons.lang.WordUtils;
+ * 
+ * Example:
+ * 
+ * NAME   OWNER   GROUP   MODE       WEIGHT
+ * pool1  andrew  andrew  rwxr-xr-x  100
+ * pool2  andrew  andrew  rwxr-xr-x  100
+ * pool3  andrew  andrew  rwxr-xr-x  100
+ * 
-    private final LinkedList<String> rows;
+    private final ArrayList<String> rows;
-    private int maxLength;
+    private final boolean wrap;
-    Column(String title, Justification justification) {
-      this.rows = new LinkedList<String>();
+    private int wrapWidth = Integer.MAX_VALUE;
+    private int maxWidth;
+
+    Column(String title, Justification justification, boolean wrap) {
+      this.rows = new ArrayList<String>();
-      this.maxLength = 0;
+      this.wrap = wrap;
+      this.maxWidth = 0;
-      if ((val.length() + 1) > maxLength) {
-        maxLength = val.length() + 1;
+      if ((val.length() + 1) > maxWidth) {
+        maxWidth = val.length() + 1;
+      }
+      // Ceiling at wrapWidth, because it'll get wrapped
+      if (maxWidth > wrapWidth) {
+        maxWidth = wrapWidth;
-    String getRow(int i) {
-      String raw = rows.get(i);
-      int paddingLength = maxLength - raw.length();
-      String padding = (paddingLength <= 0) ? "" :
-        StringUtils.repeat(" ", paddingLength);
-      if (justification == Justification.LEFT) {
-        return raw + padding;
-      } else {
-        return padding + raw;
+    private int getMaxWidth() {
+      return maxWidth;
+    }
+
+    private void setWrapWidth(int width) {
+      wrapWidth = width;
+      // Ceiling the maxLength at wrapWidth
+      if (maxWidth > wrapWidth) {
+        maxWidth = wrapWidth;
+      // Else we need to traverse through and find the real maxWidth
+      else {
+        maxWidth = 0;
+        for (int i=0; i<rows.size(); i++) {
+          int length = rows.get(i).length();
+          if (length > maxWidth) {
+            maxWidth = length;
+          }
+        }
+      }
+    }
+
+    /**
+     * Return the ith row of the column as a set of wrapped strings, each at
+     * most wrapWidth in length.
+     */
+    String[] getRow(int idx) {
+      String raw = rows.get(idx);
+      // Line-wrap if it's too long
+      String[] lines = new String[] {raw};
+      if (wrap) {
+        lines = WordUtils.wrap(lines[0], wrapWidth, "\n", true).split("\n");
+      }
+      for (int i=0; i<lines.length; i++) {
+        if (justification == Justification.LEFT) {
+          lines[i] = StringUtils.rightPad(lines[i], maxWidth);
+        } else if (justification == Justification.RIGHT) {
+          lines[i] = StringUtils.leftPad(lines[i], maxWidth);
+        }
+      }
+      return lines;
+    private boolean showHeader = true;
+    private int wrapWidth = Integer.MAX_VALUE;
-     * Add a new field to the Table under construction.
-     *
-     * @param title          Field title.
-     * @param leftJustified  Whether or not the field is left justified.
-     * @return               this.
+     * See {@link #addField(String, Justification, boolean)
+     */
+    public Builder addField(String title) {
+      return addField(title, Justification.LEFT, false);
+    }
+
+    /**
+     * See {@link #addField(String, Justification, boolean)
-      columns.add(new Column(title, justification));
+      return addField(title, justification, false);
+    }
+
+    /**
+     * See {@link #addField(String, Justification, boolean)
+     */
+    public Builder addField(String title, boolean wrap) {
+      return addField(title, Justification.LEFT, wrap);
+    }
+
+    /**
+     * Add a new field to the Table under construction.
+     * 
+     * @param title Field title.
+     * @param justification Right or left justification. Defaults to left.
+     * @Param wrapWidth Width at which to auto-wrap the content of the cell.
+     *        Defaults to Integer.MAX_VALUE.
+     * @return This Builder object
+     */
+    public Builder addField(String title, Justification justification, 
+        boolean wrap) {
+      columns.add(new Column(title, justification, wrap));
+      return this;
+    }
+
+    /**
+     * Whether to hide column headers in table output
+     */
+    public Builder hideHeaders() {
+      this.showHeader = false;
+      return this;
+    }
+
+    /**
+     * Whether to show column headers in table output. This is the default.
+     */
+    public Builder showHeaders() {
+      this.showHeader = true;
+      return this;
+    }
+
+    /**
+     * Set the maximum width of a row in the TableListing. Must have one or
+     * more wrappable fields for this to take effect.
+     */
+    public Builder wrapWidth(int width) {
+      this.wrapWidth = width;
-      return new TableListing(columns.toArray(new Column[0]));
+      return new TableListing(columns.toArray(new Column[0]), showHeader,
+          wrapWidth);
+  private boolean showHeader;
+  private int wrapWidth;
-  TableListing(Column columns[]) {
+  TableListing(Column columns[], boolean showHeader, int wrapWidth) {
+    this.showHeader = showHeader;
+    this.wrapWidth = wrapWidth;
-  public void addRow(String row[]) {
+  public void addRow(String... row) {
-  /**
-   * Convert the table to a string.
-   */
-  public String build() {
+  @Override
+  public String toString() {
-    for (int i = 0; i < numRows + 1; i++) {
-      String prefix = "";
-      for (int j = 0; j < columns.length; j++) {
-        builder.append(prefix);
-        prefix = " ";
-        builder.append(columns[j].getRow(i));
+    // Calculate the widths of each column based on their maxWidths and
+    // the wrapWidth for the entire table
+    int width = (columns.length-1)*2; // inter-column padding
+    for (int i=0; i<columns.length; i++) {
+      width += columns[i].maxWidth;
+    }
+    // Decrease the column size of wrappable columns until the goal width
+    // is reached, or we can't decrease anymore
+    while (width > wrapWidth) {
+      boolean modified = false;
+      for (int i=0; i<columns.length; i++) {
+        Column column = columns[i];
+        if (column.wrap) {
+          int maxWidth = column.getMaxWidth();
+          if (maxWidth > 4) {
+            column.setWrapWidth(maxWidth-1);
+            modified = true;
+            width -= 1;
+            if (width <= wrapWidth) {
+              break;
+            }
+          }
+        }
-      builder.append("\n");
+      if (!modified) {
+        break;
+      }
+    }
+
+    int startrow = 0;
+    if (!showHeader) {
+      startrow = 1;
+    }
+    String[][] columnLines = new String[columns.length][];
+    for (int i = startrow; i < numRows + 1; i++) {
+      int maxColumnLines = 0;
+      for (int j = 0; j < columns.length; j++) {
+        columnLines[j] = columns[j].getRow(i);
+        if (columnLines[j].length > maxColumnLines) {
+          maxColumnLines = columnLines[j].length;
+        }
+      }
+
+      for (int c = 0; c < maxColumnLines; c++) {
+        // First column gets no left-padding
+        String prefix = "";
+        for (int j = 0; j < columns.length; j++) {
+          // Prepend padding
+          builder.append(prefix);
+          prefix = " ";
+          if (columnLines[j].length > c) {
+            builder.append(columnLines[j][c]);
+          } else {
+            builder.append(StringUtils.repeat(" ", columns[j].maxWidth));
+          }
+        }
+        builder.append("\n");
+      }
