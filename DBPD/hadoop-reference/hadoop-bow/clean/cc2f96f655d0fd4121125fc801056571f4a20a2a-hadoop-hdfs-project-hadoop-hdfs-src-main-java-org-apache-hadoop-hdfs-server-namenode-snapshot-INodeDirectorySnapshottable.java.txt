HDFS-4612. Not to use INode.getParent() when generating snapshot diff report.  Contributed by Jing Zhao


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1460590 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.SortedMap;
+import java.util.TreeMap;
-     * The list recording modified INodeFile and INodeDirectory. Sorted based on
-     * their names.
+     * A map recording modified INodeFile and INodeDirectory and their relative
+     * path corresponding to the snapshot root. Sorted based on their names.
-    private final List<INode> diffList = new ArrayList<INode>();;
+    private final SortedMap<INode, byte[][]> diffMap = 
+        new TreeMap<INode, byte[][]>(INODE_COMPARATOR);
-    private final Map<INodeDirectoryWithSnapshot, ChildrenDiff> diffMap = 
+    private final Map<INodeDirectoryWithSnapshot, ChildrenDiff> dirDiffMap = 
-    private void addDirDiff(INodeDirectoryWithSnapshot dir, ChildrenDiff diff) {
-      diffMap.put(dir, diff);
-      int i = Collections.binarySearch(diffList, dir, INODE_COMPARATOR);
-      if (i < 0) {
-        diffList.add(-i - 1, dir);
-      }
+    private void addDirDiff(INodeDirectoryWithSnapshot dir,
+        byte[][] relativePath, ChildrenDiff diff) {
+      dirDiffMap.put(dir, diff);
+      diffMap.put(dir, relativePath);
-    private void addFileDiff(INodeFile file) {
-      int i = Collections.binarySearch(diffList, file, INODE_COMPARATOR);
-      if (i < 0) {
-        diffList.add(-i - 1, file);
-      }
+    private void addFileDiff(INodeFile file, byte[][] relativePath) {
+      diffMap.put(file, relativePath);
-      for (INode node : diffList) {
-        diffReportList.add(new DiffReportEntry(DiffType.MODIFY, node
-            .getRelativePathNameBytes(snapshotRoot)));
+      for (INode node : diffMap.keySet()) {
+        diffReportList.add(new DiffReportEntry(DiffType.MODIFY, diffMap
+            .get(node)));
-          ChildrenDiff dirDiff = diffMap.get(node);
-          List<DiffReportEntry> subList = dirDiff.generateReport(snapshotRoot,
-              (INodeDirectoryWithSnapshot) node, isFromEarlier());
+          ChildrenDiff dirDiff = dirDiffMap.get(node);
+          List<DiffReportEntry> subList = dirDiff.generateReport(
+              diffMap.get(node), (INodeDirectoryWithSnapshot) node,
+              isFromEarlier());
-    computeDiffRecursively(this, diffs);
+    computeDiffRecursively(this, new ArrayList<byte[]>(), diffs);
-   * @param node The directory/file under which the diff is computed.
+   * @param node The directory/file under which the diff is computed. 
+   * @param parentPath Relative path (corresponding to the snapshot root) of 
+   *                   the node's parent.
-  private void computeDiffRecursively(INode node, 
+  private void computeDiffRecursively(INode node, List<byte[]> parentPath,
+    byte[][] relativePath = parentPath.toArray(new byte[parentPath.size()][]);
-          diffReport.addDirDiff(sdir, diff);
+          diffReport.addDirDiff(sdir, relativePath, diff);
-          computeDiffRecursively(child, diffReport);
+          parentPath.add(name);
+          computeDiffRecursively(child, parentPath, diffReport);
+          parentPath.remove(parentPath.size() - 1);
-        diffReport.addFileDiff(file.asINodeFile());
+        diffReport.addFileDiff(file.asINodeFile(), relativePath);
