Merge remote-tracking branch 'apache-commit/trunk' into HDDS-48

+import com.google.protobuf.GeneratedMessage;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.NodeReportProto;
+import java.util.ArrayList;
+import java.util.List;
+  private final Queue<GeneratedMessage> reports;
-  private NodeReportProto dnReport;
+    reports = new LinkedList<>();
-    dnReport = NodeReportProto.getDefaultInstance();
-   * Returns the node report of the datanode state context.
-   * @return the node report.
+   * Adds the report to report queue.
+   *
+   * @param report report to be added
-  public NodeReportProto getNodeReport() {
-    return dnReport;
+  public void addReport(GeneratedMessage report) {
+    synchronized (reports) {
+      reports.add(report);
+    }
-   * Sets the storage location report of the datanode state context.
-   * @param nodeReport node report
+   * Returns the next report, or null if the report queue is empty.
+   *
+   * @return report
-  public void setNodeReport(NodeReportProto nodeReport) {
-    this.dnReport = nodeReport;
+  public GeneratedMessage getNextReport() {
+    synchronized (reports) {
+      return reports.poll();
+    }
+  }
+
+  /**
+   * Returns all the available reports from the report queue, or empty list if
+   * the queue is empty.
+   *
+   * @return List<reports>
+   */
+  public List<GeneratedMessage> getAllAvailableReports() {
+    return getReports(Integer.MAX_VALUE);
+  }
+
+  /**
+   * Returns available reports from the report queue with a max limit on
+   * list size, or empty list if the queue is empty.
+   *
+   * @return List<reports>
+   */
+  public List<GeneratedMessage> getReports(int maxLimit) {
+    List<GeneratedMessage> results = new ArrayList<>();
+    synchronized (reports) {
+      GeneratedMessage report = reports.poll();
+      while(results.size() < maxLimit && report != null) {
+        results.add(report);
+        report = reports.poll();
+      }
+    }
+    return results;
