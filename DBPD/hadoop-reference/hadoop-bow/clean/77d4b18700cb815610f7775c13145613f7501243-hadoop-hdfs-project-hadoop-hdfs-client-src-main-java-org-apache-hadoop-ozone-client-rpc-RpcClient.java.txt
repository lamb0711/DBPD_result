HDFS-12385. Ozone: OzoneClient: Refactoring OzoneClient API. Contributed by Nadakumar.

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with this
- * work for additional information regarding copyright ownership.  The ASF
- * licenses this file to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p>
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import org.apache.hadoop.ozone.OzoneConsts;
+import org.apache.hadoop.ozone.client.BucketArgs;
+import org.apache.hadoop.ozone.client.OzoneBucket;
+import org.apache.hadoop.ozone.client.OzoneKey;
+import org.apache.hadoop.ozone.client.OzoneQuota;
+import org.apache.hadoop.ozone.client.OzoneVolume;
+import org.apache.hadoop.ozone.client.VolumeArgs;
+import org.apache.hadoop.ozone.client.io.ChunkGroupInputStream;
+import org.apache.hadoop.ozone.client.io.ChunkGroupOutputStream;
+import org.apache.hadoop.ozone.client.io.OzoneInputStream;
+import org.apache.hadoop.ozone.client.io.OzoneOutputStream;
+import org.apache.hadoop.ozone.client.protocol.ClientProtocol;
-import org.apache.hadoop.ozone.OzoneConfiguration;
-import org.apache.hadoop.ozone.OzoneConsts;
-import org.apache.hadoop.ozone.client.OzoneBucket;
-import org.apache.hadoop.ozone.client.OzoneClient;
-import org.apache.hadoop.ozone.client.OzoneKey;
-import org.apache.hadoop.ozone.client.OzoneVolume;
-import org.apache.hadoop.ozone.client.io.ChunkGroupInputStream;
-import org.apache.hadoop.ozone.client.io.OzoneInputStream;
-import org.apache.hadoop.ozone.client.io.OzoneOutputStream;
-import org.apache.hadoop.ozone.OzoneConsts.Versioning;
-import org.apache.hadoop.ozone.client.io.ChunkGroupOutputStream;
-import org.apache.hadoop.util.Time;
-import java.io.Closeable;
-public class OzoneRpcClient implements OzoneClient, Closeable {
+public class RpcClient implements ClientProtocol {
-      LoggerFactory.getLogger(OzoneRpcClient.class);
+      LoggerFactory.getLogger(RpcClient.class);
-  /**
-   * Creates OzoneRpcClient instance with new OzoneConfiguration.
-   *
-   * @throws IOException
-   */
-  public OzoneRpcClient() throws IOException {
-    this(new OzoneConfiguration());
-  }
-
-    * Creates OzoneRpcClient instance with the given configuration.
-    *
+    * Creates RpcClient instance with the given configuration.
-    *
-  public OzoneRpcClient(Configuration conf) throws IOException {
+  public RpcClient(Configuration conf) throws IOException {
-  public void createVolume(String volumeName)
-      throws IOException {
-    createVolume(volumeName, ugi.getUserName());
+  public void createVolume(String volumeName) throws IOException {
+    createVolume(volumeName, VolumeArgs.newBuilder().build());
-  public void createVolume(String volumeName, String owner)
-      throws IOException {
-
-    createVolume(volumeName, owner, OzoneConsts.MAX_QUOTA_IN_BYTES,
-        (OzoneAcl[])null);
-  }
-
-  @Override
-  public void createVolume(String volumeName, String owner,
-                           OzoneAcl... acls)
-      throws IOException {
-    createVolume(volumeName, owner, OzoneConsts.MAX_QUOTA_IN_BYTES, acls);
-  }
-
-  @Override
-  public void createVolume(String volumeName, String owner,
-                           long quota)
-      throws IOException {
-    createVolume(volumeName, owner, quota, (OzoneAcl[])null);
-  }
-
-  @Override
-  public void createVolume(String volumeName, String owner,
-                           long quota, OzoneAcl... acls)
+  public void createVolume(String volumeName, VolumeArgs volArgs)
-    Preconditions.checkNotNull(owner);
-    Preconditions.checkNotNull(quota);
-    Preconditions.checkState(quota >= 0);
-    OzoneAcl userAcl =
-        new OzoneAcl(OzoneAcl.OzoneACLType.USER,
-            owner, userRights);
-    KsmVolumeArgs.Builder builder = KsmVolumeArgs.newBuilder();
-    builder.setAdminName(ugi.getUserName())
-        .setOwnerName(owner)
-        .setVolume(volumeName)
-        .setQuotaInBytes(quota)
-        .setCreationTime(Time.now())
-        .addOzoneAcls(KSMPBHelper.convertOzoneAcl(userAcl));
+    Preconditions.checkNotNull(volArgs);
+    String admin = volArgs.getAdmin() == null ?
+        ugi.getUserName() : volArgs.getAdmin();
+    String owner = volArgs.getOwner() == null ?
+        ugi.getUserName() : volArgs.getOwner();
+    long quota = volArgs.getQuota() == null ?
+        OzoneConsts.MAX_QUOTA_IN_BYTES :
+        OzoneQuota.parseQuota(volArgs.getQuota()).sizeInBytes();
-
+    //User ACL
+    listOfAcls.add(new OzoneAcl(OzoneAcl.OzoneACLType.USER,
+            owner, userRights));
-
-    //ACLs passed as argument
-    if(acls != null) {
-      listOfAcls.addAll(Arrays.asList(acls));
+    //ACLs from VolumeArgs
+    if(volArgs.getAcls() != null) {
+      listOfAcls.addAll(volArgs.getAcls());
-    //Remove duplicates and set
+    KsmVolumeArgs.Builder builder = KsmVolumeArgs.newBuilder();
+    builder.setVolume(volumeName);
+    builder.setAdminName(admin);
+    builder.setOwnerName(owner);
+    builder.setQuotaInBytes(quota);
+
+    //Remove duplicates and add ACLs
-  public void setVolumeQuota(String volumeName, long quota)
+  public void setVolumeQuota(String volumeName, OzoneQuota quota)
-    Preconditions.checkState(quota >= 0);
-    keySpaceManagerClient.setQuota(volumeName, quota);
+    long quotaInBytes = quota.sizeInBytes();
+    keySpaceManagerClient.setQuota(volumeName, quotaInBytes);
-    KsmVolumeArgs volumeArgs =
-        keySpaceManagerClient.getVolumeInfo(volumeName);
-    return new OzoneVolume(volumeArgs);
+    KsmVolumeArgs volume = keySpaceManagerClient.getVolumeInfo(volumeName);
+    return new OzoneVolume(volume.getVolume(), volume.getAdminName(),
+        volume.getOwnerName(), volume.getQuotaInBytes(),
+        volume.getAclMap().ozoneAclGetProtobuf().stream().
+        map(KSMPBHelper::convertOzoneAcl).collect(Collectors.toList()));
-    Preconditions.checkNotNull(volumeName);
-    return keySpaceManagerClient.checkVolumeAccess(volumeName,
-        KSMPBHelper.convertOzoneAcl(acl));
+    throw new UnsupportedOperationException("Not yet implemented.");
-  public void deleteVolume(String volumeName)
-      throws IOException {
+  public void deleteVolume(String volumeName) throws IOException {
-  public Iterator<OzoneVolume> listVolumes(String volumePrefix,
-                                             String user)
+  public Iterator<OzoneVolume> listVolumes(String volumePrefix, String user)
-    createBucket(volumeName, bucketName, Versioning.NOT_DEFINED,
-        StorageType.DEFAULT, (OzoneAcl[])null);
+    createBucket(volumeName, bucketName, BucketArgs.newBuilder().build());
-  public void createBucket(String volumeName, String bucketName,
-                           Versioning versioning)
-      throws IOException {
-    createBucket(volumeName, bucketName, versioning,
-        StorageType.DEFAULT, (OzoneAcl[])null);
-  }
-
-  @Override
-  public void createBucket(String volumeName, String bucketName,
-                           StorageType storageType)
-      throws IOException {
-    createBucket(volumeName, bucketName, Versioning.NOT_DEFINED,
-        storageType, (OzoneAcl[])null);
-  }
-
-  @Override
-  public void createBucket(String volumeName, String bucketName,
-                           OzoneAcl... acls)
-      throws IOException {
-    createBucket(volumeName, bucketName, Versioning.NOT_DEFINED,
-        StorageType.DEFAULT, acls);
-  }
-
-  @Override
-  public void createBucket(String volumeName, String bucketName,
-                           Versioning versioning, StorageType storageType,
-                           OzoneAcl... acls)
+  public void createBucket(
+      String volumeName, String bucketName, BucketArgs bucketArgs)
-    Preconditions.checkNotNull(versioning);
-    Preconditions.checkNotNull(storageType);
+    Preconditions.checkNotNull(bucketArgs);
+
+    Boolean isVersionEnabled = bucketArgs.isVersionEnabled() == null ?
+        false : bucketArgs.isVersionEnabled();
+    StorageType storageType = bucketArgs.getStorageType() == null ?
+        StorageType.DEFAULT : bucketArgs.getStorageType();
+    List<OzoneAcl> listOfAcls = new ArrayList<>();
+    //User ACL
+    listOfAcls.add(new OzoneAcl(OzoneAcl.OzoneACLType.USER,
+        ugi.getUserName(), userRights));
+    //Group ACLs of the User
+    List<String> userGroups = Arrays.asList(UserGroupInformation
+        .createRemoteUser(ugi.getUserName()).getGroupNames());
+    userGroups.stream().forEach((group) -> listOfAcls.add(
+        new OzoneAcl(OzoneAcl.OzoneACLType.GROUP, group, groupRights)));
+    //ACLs from BucketArgs
+    if(bucketArgs.getAcls() != null) {
+      listOfAcls.addAll(bucketArgs.getAcls());
+    }
+        .setIsVersionEnabled(isVersionEnabled)
-        .setIsVersionEnabled(getBucketVersioningProtobuf(
-        versioning));
+        .setAcls(listOfAcls.stream().distinct().collect(Collectors.toList()));
-    String owner = ugi.getUserName();
-    final List<OzoneAcl> listOfAcls = new ArrayList<>();
-
-    //User ACL
-    OzoneAcl userAcl =
-        new OzoneAcl(OzoneAcl.OzoneACLType.USER,
-            owner, userRights);
-    listOfAcls.add(userAcl);
-
-    //Group ACLs of the User
-    List<String> userGroups = Arrays.asList(UserGroupInformation
-        .createRemoteUser(owner).getGroupNames());
-    userGroups.stream().forEach((group) -> listOfAcls.add(
-        new OzoneAcl(OzoneAcl.OzoneACLType.GROUP, group, groupRights)));
-
-    //ACLs passed as argument
-    if(acls != null) {
-      Arrays.stream(acls).forEach((acl) -> listOfAcls.add(acl));
-    }
-
-    //Remove duplicates and set
-    builder.setAcls(listOfAcls.stream().distinct()
-        .collect(Collectors.toList()));
-        "Storage Type set to {}", volumeName, bucketName, versioning,
-        storageType);
+            "Storage Type set to {}", volumeName, bucketName, isVersionEnabled,
+            storageType);
-  /**
-   * Converts OzoneConts.Versioning enum to boolean.
-   *
-   * @param version
-   * @return corresponding boolean value
-   */
-  private boolean getBucketVersioningProtobuf(
-      Versioning version) {
-    if(version != null) {
-      switch(version) {
-      case ENABLED:
-        return true;
-      case NOT_DEFINED:
-      case DISABLED:
-      default:
-        return false;
-      }
-    }
-    return false;
-  }
-
-  public void addBucketAcls(String volumeName, String bucketName,
-                            List<OzoneAcl> addAcls)
+  public void addBucketAcls(
+      String volumeName, String bucketName, List<OzoneAcl> addAcls)
-  public void removeBucketAcls(String volumeName, String bucketName,
-                               List<OzoneAcl> removeAcls)
+  public void removeBucketAcls(
+      String volumeName, String bucketName, List<OzoneAcl> removeAcls)
-  public void setBucketVersioning(String volumeName, String bucketName,
-                                  Versioning versioning)
+  public void setBucketVersioning(
+      String volumeName, String bucketName, Boolean versioning)
-        .setIsVersionEnabled(getBucketVersioningFlag(
-            versioning));
+        .setIsVersionEnabled(versioning);
-  public void setBucketStorageType(String volumeName, String bucketName,
-                                   StorageType storageType)
+  public void setBucketStorageType(
+      String volumeName, String bucketName, StorageType storageType)
-  public void deleteBucket(String volumeName, String bucketName)
-      throws IOException {
+  public void deleteBucket(
+      String volumeName, String bucketName) throws IOException {
-  public void checkBucketAccess(String volumeName, String bucketName)
-      throws IOException {
-    throw new UnsupportedOperationException("Not yet implemented.");
+  public void checkBucketAccess(
+      String volumeName, String bucketName) throws IOException {
+
-  public OzoneBucket getBucketDetails(String volumeName,
-                                      String bucketName)
-      throws IOException {
+  public OzoneBucket getBucketDetails(
+      String volumeName, String bucketName) throws IOException {
-    KsmBucketInfo bucketInfo =
+    KsmBucketInfo bucketArgs =
-    return new OzoneBucket(bucketInfo);
+    return new OzoneBucket(bucketArgs.getVolumeName(),
+                           bucketArgs.getBucketName(),
+                           bucketArgs.getAcls(),
+                           bucketArgs.getStorageType(),
+                           bucketArgs.getIsVersionEnabled());
-  public Iterator<OzoneBucket> listBuckets(String volumeName,
-                                            String bucketPrefix)
-      throws IOException {
+  public Iterator<OzoneBucket> listBuckets(
+      String volumeName, String bucketPrefix) throws IOException {
-  public OzoneOutputStream createKey(String volumeName, String bucketName,
-                                     String keyName, long size)
+  public OzoneOutputStream createKey(
+      String volumeName, String bucketName, String keyName, long size)
-    ChunkGroupOutputStream  groupOutputStream =
+    ChunkGroupOutputStream groupOutputStream =
-        storageContainerLocationClient, chunkSize, requestId);
+            storageContainerLocationClient, chunkSize, requestId);
-  public OzoneInputStream getKey(String volumeName, String bucketName,
-                                 String keyName)
+  public OzoneInputStream getKey(
+      String volumeName, String bucketName, String keyName)
-        keyInfo, xceiverClientManager, storageContainerLocationClient,
-        requestId);
+            keyInfo, xceiverClientManager, storageContainerLocationClient,
+            requestId);
-  public void deleteKey(String volumeName, String bucketName,
-                        String keyName)
+  public void deleteKey(
+      String volumeName, String bucketName, String keyName)
-  public List<OzoneKey> listKeys(String volumeName, String bucketName,
-                                 String keyPrefix)
+  public Iterator<OzoneKey> listKeys(
+      String volumeName, String bucketName, String keyPrefix)
-  public OzoneKey getKeyDetails(String volumeName, String bucketName,
-                                  String keyName)
+  public OzoneKey getKeyDetails(
+      String volumeName, String bucketName, String keyName)
-    KsmKeyInfo keyInfo =
-        keySpaceManagerClient.lookupKey(keyArgs);
-    return new OzoneKey(keyInfo);
-  }
-
-  /**
-   * Converts Versioning to boolean.
-   *
-   * @param version
-   * @return corresponding boolean value
-   */
-  private boolean getBucketVersioningFlag(
-      Versioning version) {
-    if(version != null) {
-      switch(version) {
-      case ENABLED:
-        return true;
-      case DISABLED:
-      case NOT_DEFINED:
-      default:
-        return false;
-      }
-    }
-    return false;
+    KsmKeyInfo keyInfo = keySpaceManagerClient.lookupKey(keyArgs);
+    return new OzoneKey(keyInfo.getVolumeName(),
+                        keyInfo.getBucketName(),
+                        keyInfo.getKeyName(),
+                        keyInfo.getDataSize());
