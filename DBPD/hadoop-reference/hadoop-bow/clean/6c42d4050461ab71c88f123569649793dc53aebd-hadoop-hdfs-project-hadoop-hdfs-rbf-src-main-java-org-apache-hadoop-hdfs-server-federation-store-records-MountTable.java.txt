HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.

+import org.apache.commons.lang3.builder.EqualsBuilder;
+  private static final String ERROR_MSG_FAULT_TOLERANT_MULTI_DEST =
+      "Invalid entry, fault tolerance requires multiple destinations ";
+  private static final String ERROR_MSG_FAULT_TOLERANT_ALL =
+      "Invalid entry, fault tolerance only supported for ALL order ";
+   * Check if the mount point supports a failed destination.
+   *
+   * @return If it supports failures.
+   */
+  public abstract boolean isFaultTolerant();
+
+  /**
+   * Set if the mount point supports failed destinations.
+   *
+   * @param faultTolerant If it supports failures.
+   */
+  public abstract void setFaultTolerant(boolean faultTolerant);
+
+  /**
-      sb.append("[" + this.getDestOrder() + "]");
+      sb.append("[").append(this.getDestOrder()).append("]");
+    if (this.isFaultTolerant()) {
+      sb.append("[FT]");
+    }
+    if (isFaultTolerant()) {
+      if (getDestinations().size() < 2) {
+        throw new IllegalArgumentException(
+            ERROR_MSG_FAULT_TOLERANT_MULTI_DEST + this);
+      }
+      if (!isAll()) {
+        throw new IllegalArgumentException(
+            ERROR_MSG_FAULT_TOLERANT_ALL + this);
+      }
+    }
+        .append(this.isFaultTolerant())
-      if (!this.getSourcePath().equals(other.getSourcePath())) {
-        return false;
-      } else if (!this.getDestinations().equals(other.getDestinations())) {
-        return false;
-      } else if (this.isReadOnly() != other.isReadOnly()) {
-        return false;
-      } else if (!this.getDestOrder().equals(other.getDestOrder())) {
-        return false;
-      }
-      return true;
+      return new EqualsBuilder()
+          .append(this.getSourcePath(), other.getSourcePath())
+          .append(this.getDestinations(), other.getDestinations())
+          .append(this.isReadOnly(), other.isReadOnly())
+          .append(this.getDestOrder(), other.getDestOrder())
+          .append(this.isFaultTolerant(), other.isFaultTolerant())
+          .isEquals();
-    return order == DestinationOrder.HASH_ALL ||
-        order == DestinationOrder.RANDOM ||
-        order == DestinationOrder.SPACE;
+    return DestinationOrder.FOLDER_ALL.contains(order);
