HDFS-6155. Fix Boxing/unboxing to parse a primitive findbugs warnings. Contributed by Suresh Srinivas.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1582068 13f79535-47bb-0310-9956-ffa450edef68

-        Integer.valueOf(st.getValue("RPC_CALLID"))
+        Integer.parseInt(st.getValue("RPC_CALLID"))
-        Integer.valueOf(callId).toString());
+        Integer.toString(callId));
-          Integer.valueOf(length).toString());
+          Integer.toString(length));
-          Long.valueOf(inodeId).toString());
+          Long.toString(inodeId));
-          Long.valueOf(mtime).toString());
+          Long.toString(mtime));
-          Long.valueOf(atime).toString());
+          Long.toString(atime));
-          Long.valueOf(blockSize).toString());
+          Long.toString(blockSize));
-      this.length = Integer.valueOf(st.getValue("LENGTH"));
-      this.inodeId = Long.valueOf(st.getValue("INODEID"));
+      this.length = Integer.parseInt(st.getValue("LENGTH"));
+      this.inodeId = Long.parseLong(st.getValue("INODEID"));
-      this.mtime = Long.valueOf(st.getValue("MTIME"));
-      this.atime = Long.valueOf(st.getValue("ATIME"));
-      this.blockSize = Long.valueOf(st.getValue("BLOCKSIZE"));
+      this.mtime = Long.parseLong(st.getValue("MTIME"));
+      this.atime = Long.parseLong(st.getValue("ATIME"));
+      this.blockSize = Long.parseLong(st.getValue("BLOCKSIZE"));
-          Integer.valueOf(length).toString());
+          Integer.toString(length));
-          Long.valueOf(timestamp).toString());
+          Long.toString(timestamp));
-      this.length = Integer.valueOf(st.getValue("LENGTH"));
+      this.length = Integer.parseInt(st.getValue("LENGTH"));
-      this.timestamp = Long.valueOf(st.getValue("TIMESTAMP"));
+      this.timestamp = Long.parseLong(st.getValue("TIMESTAMP"));
-          Integer.valueOf(length).toString());
+          Integer.toString(length));
-          Long.valueOf(timestamp).toString());
+          Long.toString(timestamp));
-      this.length = Integer.valueOf(st.getValue("LENGTH"));
+      this.length = Integer.parseInt(st.getValue("LENGTH"));
-      this.timestamp = Long.valueOf(st.getValue("TIMESTAMP"));
+      this.timestamp = Long.parseLong(st.getValue("TIMESTAMP"));
-          Integer.valueOf(length).toString());
+          Integer.toString(length));
-          Long.valueOf(timestamp).toString());
+          Long.toString(timestamp));
-      this.length = Integer.valueOf(st.getValue("LENGTH"));
+      this.length = Integer.parseInt(st.getValue("LENGTH"));
-      this.timestamp = Long.valueOf(st.getValue("TIMESTAMP"));
+      this.timestamp = Long.parseLong(st.getValue("TIMESTAMP"));
-          Integer.valueOf(length).toString());
+          Integer.toString(length));
-          Long.valueOf(inodeId).toString());
+          Long.toString(inodeId));
-          Long.valueOf(timestamp).toString());
+          Long.toString(timestamp));
-      this.length = Integer.valueOf(st.getValue("LENGTH"));
-      this.inodeId = Long.valueOf(st.getValue("INODEID"));
+      this.length = Integer.parseInt(st.getValue("LENGTH"));
+      this.inodeId = Long.parseLong(st.getValue("INODEID"));
-      this.timestamp = Long.valueOf(st.getValue("TIMESTAMP"));
+      this.timestamp = Long.parseLong(st.getValue("TIMESTAMP"));
-                            Long.valueOf(genStampV1).toString());
+                            Long.toString(genStampV1));
-      this.genStampV1 = Long.valueOf(st.getValue("GENSTAMP"));
+      this.genStampV1 = Long.parseLong(st.getValue("GENSTAMP"));
-                            Long.valueOf(genStampV2).toString());
+                            Long.toString(genStampV2));
-      this.genStampV2 = Long.valueOf(st.getValue("GENSTAMPV2"));
+      this.genStampV2 = Long.parseLong(st.getValue("GENSTAMPV2"));
-                            Long.valueOf(blockId).toString());
+                            Long.toString(blockId));
-      this.blockId = Long.valueOf(st.getValue("BLOCK_ID"));
+      this.blockId = Long.parseLong(st.getValue("BLOCK_ID"));
-          Long.valueOf(nsQuota).toString());
+          Long.toString(nsQuota));
-      this.nsQuota = Long.valueOf(st.getValue("NSQUOTA"));
+      this.nsQuota = Long.parseLong(st.getValue("NSQUOTA"));
-          Long.valueOf(nsQuota).toString());
+          Long.toString(nsQuota));
-          Long.valueOf(dsQuota).toString());
+          Long.toString(dsQuota));
-      this.nsQuota = Long.valueOf(st.getValue("NSQUOTA"));
-      this.dsQuota = Long.valueOf(st.getValue("DSQUOTA"));
+      this.nsQuota = Long.parseLong(st.getValue("NSQUOTA"));
+      this.dsQuota = Long.parseLong(st.getValue("DSQUOTA"));
-          Integer.valueOf(length).toString());
+          Integer.toString(length));
-          Long.valueOf(mtime).toString());
+          Long.toString(mtime));
-          Long.valueOf(atime).toString());
+          Long.toString(atime));
-      this.length = Integer.valueOf(st.getValue("LENGTH"));
+      this.length = Integer.parseInt(st.getValue("LENGTH"));
-      this.mtime = Long.valueOf(st.getValue("MTIME"));
-      this.atime = Long.valueOf(st.getValue("ATIME"));
+      this.mtime = Long.parseLong(st.getValue("MTIME"));
+      this.atime = Long.parseLong(st.getValue("ATIME"));
-          Integer.valueOf(length).toString());
+          Integer.toString(length));
-          Long.valueOf(inodeId).toString());
+          Long.toString(inodeId));
-          Long.valueOf(mtime).toString());
+          Long.toString(mtime));
-          Long.valueOf(atime).toString());
+          Long.toString(atime));
-      this.length = Integer.valueOf(st.getValue("LENGTH"));
-      this.inodeId = Long.valueOf(st.getValue("INODEID"));
+      this.length = Integer.parseInt(st.getValue("LENGTH"));
+      this.inodeId = Long.parseLong(st.getValue("INODEID"));
-      this.mtime = Long.valueOf(st.getValue("MTIME"));
-      this.atime = Long.valueOf(st.getValue("ATIME"));
+      this.mtime = Long.parseLong(st.getValue("MTIME"));
+      this.atime = Long.parseLong(st.getValue("ATIME"));
-          Integer.valueOf(length).toString());
+          Integer.toString(length));
-          Long.valueOf(timestamp).toString());
+          Long.toString(timestamp));
-      this.length = Integer.valueOf(st.getValue("LENGTH"));
+      this.length = Integer.parseInt(st.getValue("LENGTH"));
-      this.timestamp = Long.valueOf(st.getValue("TIMESTAMP"));
+      this.timestamp = Long.parseLong(st.getValue("TIMESTAMP"));
-          Long.valueOf(expiryTime).toString());
+          Long.toString(expiryTime));
-      this.expiryTime = Long.valueOf(st.getValue("EXPIRY_TIME"));
+      this.expiryTime = Long.parseLong(st.getValue("EXPIRY_TIME"));
-          Long.valueOf(expiryTime).toString());
+          Long.toString(expiryTime));
-      this.expiryTime = Long.valueOf(st.getValue("EXPIRY_TIME"));
+      this.expiryTime = Long.parseLong(st.getValue("EXPIRY_TIME"));
-          Long.valueOf(time).toString());
+          Long.toString(time));
-      this.time = Long.valueOf(st.getValue(name + "TIME"));
+      this.time = Long.parseLong(st.getValue(name + "TIME"));
-    this.txid = Long.valueOf(st.getValue("TXID"));
+    this.txid = Long.parseLong(st.getValue("TXID"));
-        Long.valueOf(block.getBlockId()).toString());
+        Long.toString(block.getBlockId()));
-        Long.valueOf(block.getNumBytes()).toString());
+        Long.toString(block.getNumBytes()));
-        Long.valueOf(block.getGenerationStamp()).toString());
+        Long.toString(block.getGenerationStamp()));
-    long blockId = Long.valueOf(st.getValue("BLOCK_ID"));
-    long numBytes = Long.valueOf(st.getValue("NUM_BYTES"));
-    long generationStamp = Long.valueOf(st.getValue("GENSTAMP"));
+    long blockId = Long.parseLong(st.getValue("BLOCK_ID"));
+    long numBytes = Long.parseLong(st.getValue("NUM_BYTES"));
+    long generationStamp = Long.parseLong(st.getValue("GENSTAMP"));
-        Integer.valueOf(token.getSequenceNumber()).toString());
+        Integer.toString(token.getSequenceNumber()));
-        Long.valueOf(token.getIssueDate()).toString());
+        Long.toString(token.getIssueDate()));
-        Long.valueOf(token.getMaxDate()).toString());
+        Long.toString(token.getMaxDate()));
-        Integer.valueOf(token.getMasterKeyId()).toString());
+        Integer.toString(token.getMasterKeyId()));
-    int seqNum = Integer.valueOf(st.getValue("SEQUENCE_NUMBER"));
+    int seqNum = Integer.parseInt(st.getValue("SEQUENCE_NUMBER"));
-    long issueDate = Long.valueOf(st.getValue("ISSUE_DATE"));
-    long maxDate = Long.valueOf(st.getValue("MAX_DATE"));
-    int masterKeyId = Integer.valueOf(st.getValue("MASTER_KEY_ID"));
+    long issueDate = Long.parseLong(st.getValue("ISSUE_DATE"));
+    long maxDate = Long.parseLong(st.getValue("MAX_DATE"));
+    int masterKeyId = Integer.parseInt(st.getValue("MASTER_KEY_ID"));
-        Integer.valueOf(key.getKeyId()).toString());
+        Integer.toString(key.getKeyId()));
-        Long.valueOf(key.getExpiryDate()).toString());
+        Long.toString(key.getExpiryDate()));
-    int keyId = Integer.valueOf(st.getValue("KEY_ID"));
-    long expiryDate = Long.valueOf(st.getValue("EXPIRY_DATE"));
+    int keyId = Integer.parseInt(st.getValue("KEY_ID"));
+    long expiryDate = Long.parseLong(st.getValue("EXPIRY_DATE"));
