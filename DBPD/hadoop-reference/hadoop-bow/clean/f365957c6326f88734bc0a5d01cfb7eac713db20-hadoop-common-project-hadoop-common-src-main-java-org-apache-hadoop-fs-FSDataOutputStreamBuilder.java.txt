HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();
S3A to implement S3 Select through this API.

The new openFile() API is asynchronous, and implemented across FileSystem and FileContext.

The MapReduce V2 inputs are moved to this API, and you can actually set must/may
options to pass in.

This is more useful for setting things like s3a seek policy than for S3 select,
as the existing input format/record readers can't handle S3 select output where
the stream is shorter than the file length, and splitting plain text is suboptimal.
Future work is needed there.

In the meantime, any/all filesystem connectors are now free to add their own filesystem-specific
configuration parameters which can be set in jobs and used to set filesystem input stream
options (seek policy, retry, encryption secrets, etc).

Contributed by Steve Loughran

-import com.google.common.annotations.VisibleForTesting;
-import com.google.common.base.Preconditions;
-import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.impl.AbstractFSBuilderImpl;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
+import static com.google.common.base.Preconditions.checkNotNull;
-    <S extends FSDataOutputStream, B extends FSDataOutputStreamBuilder<S, B>> {
+    <S extends FSDataOutputStream, B extends FSDataOutputStreamBuilder<S, B>>
+    extends AbstractFSBuilderImpl<S, B> {
-  private final Path path;
-   * Contains optional and mandatory parameters.
-   *
-   * It does not load default configurations from default files.
-   */
-  private final Configuration options = new Configuration(false);
-
-  /** Keep track of the keys for mandatory options. */
-  private final Set<String> mandatoryKeys = new HashSet<>();
-
-  /**
-  protected abstract B getThisBuilder();
+  public abstract B getThisBuilder();
-   * @throws IOException
+   * @throws IOException failure
-    Preconditions.checkNotNull(fc);
-    Preconditions.checkNotNull(p);
+    super(checkNotNull(p));
+    checkNotNull(fc);
-    this.path = p;
-    Preconditions.checkNotNull(fileSystem);
-    Preconditions.checkNotNull(p);
+    super(checkNotNull(p));
+    checkNotNull(fileSystem);
-    path = p;
-    replication = fs.getDefaultReplication(path);
+    replication = fs.getDefaultReplication(p);
-    Preconditions.checkNotNull(fs);
+    checkNotNull(fs);
-  protected Path getPath() {
-    return path;
-  }
-
-    Preconditions.checkNotNull(perm);
+    checkNotNull(perm);
-    Preconditions.checkNotNull(prog);
+    checkNotNull(prog);
-    Preconditions.checkNotNull(chksumOpt);
+    checkNotNull(chksumOpt);
-   * Set optional Builder parameter.
-   */
-  public B opt(@Nonnull final String key, @Nonnull final String value) {
-    mandatoryKeys.remove(key);
-    options.set(key, value);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set optional boolean parameter for the Builder.
-   *
-   * @see #opt(String, String)
-   */
-  public B opt(@Nonnull final String key, boolean value) {
-    mandatoryKeys.remove(key);
-    options.setBoolean(key, value);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set optional int parameter for the Builder.
-   *
-   * @see #opt(String, String)
-   */
-  public B opt(@Nonnull final String key, int value) {
-    mandatoryKeys.remove(key);
-    options.setInt(key, value);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set optional float parameter for the Builder.
-   *
-   * @see #opt(String, String)
-   */
-  public B opt(@Nonnull final String key, float value) {
-    mandatoryKeys.remove(key);
-    options.setFloat(key, value);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set optional double parameter for the Builder.
-   *
-   * @see #opt(String, String)
-   */
-  public B opt(@Nonnull final String key, double value) {
-    mandatoryKeys.remove(key);
-    options.setDouble(key, value);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set an array of string values as optional parameter for the Builder.
-   *
-   * @see #opt(String, String)
-   */
-  public B opt(@Nonnull final String key, @Nonnull final String... values) {
-    mandatoryKeys.remove(key);
-    options.setStrings(key, values);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set mandatory option to the Builder.
-   *
-   * If the option is not supported or unavailable on the {@link FileSystem},
-   * the client should expect {@link #build()} throws IllegalArgumentException.
-   */
-  public B must(@Nonnull final String key, @Nonnull final String value) {
-    mandatoryKeys.add(key);
-    options.set(key, value);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set mandatory boolean option.
-   *
-   * @see #must(String, String)
-   */
-  public B must(@Nonnull final String key, boolean value) {
-    mandatoryKeys.add(key);
-    options.setBoolean(key, value);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set mandatory int option.
-   *
-   * @see #must(String, String)
-   */
-  public B must(@Nonnull final String key, int value) {
-    mandatoryKeys.add(key);
-    options.setInt(key, value);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set mandatory float option.
-   *
-   * @see #must(String, String)
-   */
-  public B must(@Nonnull final String key, float value) {
-    mandatoryKeys.add(key);
-    options.setFloat(key, value);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set mandatory double option.
-   *
-   * @see #must(String, String)
-   */
-  public B must(@Nonnull final String key, double value) {
-    mandatoryKeys.add(key);
-    options.setDouble(key, value);
-    return getThisBuilder();
-  }
-
-  /**
-   * Set a string array as mandatory option.
-   *
-   * @see #must(String, String)
-   */
-  public B must(@Nonnull final String key, @Nonnull final String... values) {
-    mandatoryKeys.add(key);
-    options.setStrings(key, values);
-    return getThisBuilder();
-  }
-
-  protected Configuration getOptions() {
-    return options;
-  }
-
-  /**
-   * Get all the keys that are set as mandatory keys.
-   */
-  @VisibleForTesting
-  protected Set<String> getMandatoryKeys() {
-    return Collections.unmodifiableSet(mandatoryKeys);
-  }
-
-  /**
