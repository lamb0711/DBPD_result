HDFS-9869. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-2]. Contributed by Rakesh R.

- * PendingReplicationBlocks does the bookkeeping of all
- * blocks that are getting replicated.
+ * PendingReconstructionBlocks does the bookkeeping of all
+ * blocks that gains stronger redundancy.
- * 1)  record blocks that are getting replicated at this instant.
- * 2)  a coarse grain timer to track age of replication request
- * 3)  a thread that periodically identifies replication-requests
+ * 1)  record blocks that gains stronger redundancy at this instant.
+ * 2)  a coarse grain timer to track age of reconstruction request
+ * 3)  a thread that periodically identifies reconstruction-requests
-class PendingReplicationBlocks {
+class PendingReconstructionBlocks {
-  private final Map<BlockInfo, PendingBlockInfo> pendingReplications;
+  private final Map<BlockInfo, PendingBlockInfo> pendingReconstructions;
-  PendingReplicationBlocks(long timeoutPeriod) {
+  PendingReconstructionBlocks(long timeoutPeriod) {
-    pendingReplications = new HashMap<>();
+    pendingReconstructions = new HashMap<>();
-    timerThread = new Daemon(new PendingReplicationMonitor());
+    timerThread = new Daemon(new PendingReconstructionMonitor());
-   * Add a block to the list of pending Replications
+   * Add a block to the list of pending reconstructions
-    synchronized (pendingReplications) {
-      PendingBlockInfo found = pendingReplications.get(block);
+    synchronized (pendingReconstructions) {
+      PendingBlockInfo found = pendingReconstructions.get(block);
-        pendingReplications.put(block, new PendingBlockInfo(targets));
+        pendingReconstructions.put(block, new PendingBlockInfo(targets));
-   * One replication request for this block has finished.
-   * Decrement the number of pending replication requests
+   * One reconstruction request for this block has finished.
+   * Decrement the number of pending reconstruction requests
-   * 
-   * @param dn The DataNode that finishes the replication
+   *
+   * @param dn The DataNode that finishes the reconstruction
-    synchronized (pendingReplications) {
-      PendingBlockInfo found = pendingReplications.get(block);
+    synchronized (pendingReconstructions) {
+      PendingBlockInfo found = pendingReconstructions.get(block);
-        if(LOG.isDebugEnabled()) {
-          LOG.debug("Removing pending replication for " + block);
-        }
+        LOG.debug("Removing pending reconstruction for {}", block);
-          pendingReplications.remove(block);
+          pendingReconstructions.remove(block);
-   * Remove the record about the given block from pendingReplications.
-   * @param block The given block whose pending replication requests need to be
-   *              removed
+   * Remove the record about the given block from pending reconstructions.
+   *
+   * @param block
+   *          The given block whose pending reconstruction requests need to be
+   *          removed
-    synchronized (pendingReplications) {
-      pendingReplications.remove(block);
+    synchronized (pendingReconstructions) {
+      pendingReconstructions.remove(block);
-    synchronized (pendingReplications) {
-      pendingReplications.clear();
+    synchronized (pendingReconstructions) {
+      pendingReconstructions.clear();
-   * The total number of blocks that are undergoing replication
+   * The total number of blocks that are undergoing reconstruction.
-    return pendingReplications.size();
-  } 
+    return pendingReconstructions.size();
+  }
-   * How many copies of this block is pending replication?
+   * How many copies of this block is pending reconstruction?.
-    synchronized (pendingReplications) {
-      PendingBlockInfo found = pendingReplications.get(block);
+    synchronized (pendingReconstructions) {
+      PendingBlockInfo found = pendingReconstructions.get(block);
-   * Returns a list of blocks that have timed out their 
-   * replication requests. Returns null if no blocks have
+   * Returns a list of blocks that have timed out their
+   * reconstruction requests. Returns null if no blocks have
-   * An object that contains information about a block that 
-   * is being replicated. It records the timestamp when the 
-   * system started replicating the most recent copy of this
-   * block. It also records the list of Datanodes where the 
-   * replication requests are in progress.
+   * An object that contains information about a block that
+   * is being reconstructed. It records the timestamp when the
+   * system started reconstructing the most recent copy of this
+   * block. It also records the list of Datanodes where the
+   * reconstruction requests are in progress.
-   * their replication request.
+   * their reconstruction request.
-  class PendingReplicationMonitor implements Runnable {
+  class PendingReconstructionMonitor implements Runnable {
-          pendingReplicationCheck();
+          pendingReconstructionCheck();
-          if(LOG.isDebugEnabled()) {
-            LOG.debug("PendingReplicationMonitor thread is interrupted.", ie);
-          }
+          LOG.debug("PendingReconstructionMonitor thread is interrupted.", ie);
-    void pendingReplicationCheck() {
-      synchronized (pendingReplications) {
+    void pendingReconstructionCheck() {
+      synchronized (pendingReconstructions) {
-                                    pendingReplications.entrySet().iterator();
+            pendingReconstructions.entrySet().iterator();
-        if(LOG.isDebugEnabled()) {
-          LOG.debug("PendingReplicationMonitor checking Q");
-        }
+        LOG.debug("PendingReconstructionMonitor checking Q");
-            LOG.warn("PendingReplicationMonitor timed out " + block);
+            LOG.warn("PendingReconstructionMonitor timed out " + block);
-   * Shuts down the pending replication monitor thread.
+   * Shuts down the pending reconstruction monitor thread.
-    synchronized (pendingReplications) {
-      out.println("Metasave: Blocks being replicated: " +
-                  pendingReplications.size());
+    synchronized (pendingReconstructions) {
+      out.println("Metasave: Blocks being reconstructed: " +
+                  pendingReconstructions.size());
-          pendingReplications.entrySet()) {
+          pendingReconstructions.entrySet()) {
-            " NumReplicaInProgress: " +
+            " NumReconstructInProgress: " +
