YARN-7291. Better input parsing for resource in allocation file. Contributed by Zoltan Siegl

+import java.util.List;
+import com.google.common.collect.Lists;
+  private static final String RESOURCE_PERCENTAGE_PATTERN =
+      "^(-?(\\d+)(\\.\\d*)?)\\s*%\\s*";
+  private static final String RESOURCE_VALUE_PATTERN =
+      "^(-?\\d+)(\\.\\d*)?\\s*";
+  /**
+   * For resources separated by spaces instead of a comma.
+   */
+  private static final String RESOURCES_WITH_SPACES_PATTERN =
+      "-?\\d+(?:\\.\\d*)?\\s*[a-z]+\\s*";
-              resourceValue);
+              resourceName, resourceValue);
-      String value, String resourceValue)
+      String value, String resource, String resourceValue)
-      return findPercentage(resourceValue, "");
+      return findPercentage(resourceValue, resource);
-  private static ConfigurableResource parseOldStyleResource(String value)
+  private static ConfigurableResource parseOldStyleResource(String input)
-    final String lCaseValue = StringUtils.toLowerCase(value);
-    final int memory = parseOldStyleResourceMemory(lCaseValue);
-    final int vcores = parseOldStyleResourceVcores(lCaseValue);
+    final String lowerCaseInput = StringUtils.toLowerCase(input);
+    String[] resources = lowerCaseInput.split(",");
+
+    if (resources.length != 2) {
+      resources = findOldStyleResourcesInSpaceSeparatedInput(lowerCaseInput);
+      if (resources.length != 2) {
+        throw new AllocationConfigurationException(
+            "Cannot parse resource values from input: " + input);
+      }
+    }
+    final int memory = parseOldStyleResourceMemory(resources);
+    final int vcores = parseOldStyleResourceVcores(resources);
-  private static int parseOldStyleResourceMemory(String lCaseValue)
+  private static String[] findOldStyleResourcesInSpaceSeparatedInput(
+      String input) {
+    final Pattern pattern = Pattern.compile(RESOURCES_WITH_SPACES_PATTERN);
+    final Matcher matcher = pattern.matcher(input);
+
+    List<String> resources = Lists.newArrayList();
+    while (matcher.find()) {
+      resources.add(matcher.group(0));
+    }
+    return resources.toArray(new String[0]);
+  }
+
+  private static int parseOldStyleResourceMemory(String[] resources)
-    final int memory = findResource(lCaseValue, "mb");
+    final int memory = findResource(resources, "mb");
-  private static int parseOldStyleResourceVcores(String lCaseValue)
+  private static int parseOldStyleResourceVcores(String[] resources)
-    final int vcores = findResource(lCaseValue, "vcores");
+    final int vcores = findResource(resources, "vcores");
-  private static double[] getResourcePercentage(
-      String val) throws AllocationConfigurationException {
+  private static double[] getResourcePercentage(String val)
+      throws AllocationConfigurationException {
-    String[] strings = val.split(",");
+    String[] values = val.split(",");
-    if (strings.length == 1) {
-      double percentage = findPercentage(strings[0], "");
+    if (values.length == 1) {
+      double percentage = findPercentage(values, "");
-      resourcePercentage[0] = findPercentage(val, "memory");
-      resourcePercentage[1] = findPercentage(val, "cpu");
+      resourcePercentage[0] = findPercentage(values, "memory");
+      resourcePercentage[1] = findPercentage(values, "cpu");
-  private static double findPercentage(String val, String units)
+  private static double findPercentage(String resourceValue, String resource)
-    final Pattern pattern =
-        Pattern.compile("(-?(\\d+)(\\.\\d*)?)\\s*%\\s*" + units);
-    Matcher matcher = pattern.matcher(val);
-    if (!matcher.find()) {
-      if (units.equals("")) {
+    return findPercentageInternal(resource, resourceValue, false);
+  }
+
+  private static double findPercentage(String[] resourceValues, String resource)
+      throws AllocationConfigurationException {
+    String resourceValue = findResourceFromValues(resourceValues, resource);
+    return findPercentageInternal(resource, resourceValue, true);
+  }
+
+  private static double findPercentageInternal(String resource,
+      String resourceValue, boolean includeResourceInPattern)
+      throws AllocationConfigurationException {
+    final Pattern pattern;
+    if (includeResourceInPattern) {
+      pattern = Pattern.compile(RESOURCE_PERCENTAGE_PATTERN + resource);
+    } else {
+      pattern = Pattern.compile(RESOURCE_PERCENTAGE_PATTERN);
+    }
+
+    Matcher matcher = pattern.matcher(resourceValue);
+    if (!matcher.matches()) {
+      if (resource.equals("")) {
-            val);
+            resourceValue);
-        throw new AllocationConfigurationException("Missing resource: " +
-            units);
+        throw new AllocationConfigurationException("Invalid percentage of " +
+            resource + ": " + resourceValue);
-          val + ", percentage should not be negative!");
+          resourceValue + ", percentage should not be negative!");
-  private static int findResource(String val, String units)
+  private static int findResource(String[] resourceValues, String resource)
-    final Pattern pattern = Pattern.compile("(-?\\d+)(\\.\\d*)?\\s*" + units);
-    Matcher matcher = pattern.matcher(val);
+    String resourceValue = findResourceFromValues(resourceValues, resource);
+    final Pattern pattern = Pattern.compile(RESOURCE_VALUE_PATTERN +
+        resource);
+    Matcher matcher = pattern.matcher(resourceValue);
-      throw new AllocationConfigurationException("Missing resource: " + units);
+      throw new AllocationConfigurationException("Invalid value of " +
+          (resource.equals("mb") ? "memory" : resource) + ": " + resourceValue);
+
+  private static String findResourceFromValues(String[] resourceValues,
+      String resource) throws AllocationConfigurationException {
+    for (String resourceValue : resourceValues) {
+      if (resourceValue.contains(resource)) {
+        return resourceValue.trim();
+      }
+    }
+    throw new AllocationConfigurationException("Missing resource: " + resource);
+  }
