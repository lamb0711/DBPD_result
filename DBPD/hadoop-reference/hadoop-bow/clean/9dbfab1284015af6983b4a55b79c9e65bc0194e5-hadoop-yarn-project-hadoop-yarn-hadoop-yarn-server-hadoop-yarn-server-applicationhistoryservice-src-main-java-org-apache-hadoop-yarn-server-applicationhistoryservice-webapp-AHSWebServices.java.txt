YARN-6108. Improve AHS webservice to accept NM address as a parameter to get container logs. Contributed by Xuan Gong.

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.yarn.server.webapp.YarnWebServiceParams;
+import org.apache.hadoop.yarn.webapp.util.YarnWebServiceUtils;
+import org.codehaus.jettison.json.JSONException;
+import org.codehaus.jettison.json.JSONObject;
+import com.sun.jersey.api.client.ClientHandlerException;
+import com.sun.jersey.api.client.UniformInterfaceException;
+  private static final Log LOG = LogFactory.getLog(AHSWebServices.class);
+   * @param nmId
+   *    The Node Manager NodeId
-      @PathParam("containerid") String containerIdStr) {
+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,
+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {
-      ContainerInfo containerInfo;
-      try {
-        containerInfo = super.getContainer(
-            req, res, appId.toString(),
-            containerId.getApplicationAttemptId().toString(),
-            containerId.toString());
-      } catch (Exception ex) {
-        // return log meta for the aggregated logs if exists.
-        // It will also return empty log meta for the local logs.
-        return getContainerLogMeta(appId, appOwner, null,
-            containerIdStr, true);
+      String nodeHttpAddress = null;
+      if (nmId != null && !nmId.isEmpty()) {
+        try {
+          nodeHttpAddress = getNMWebAddressFromRM(conf, nmId);
+        } catch (Exception ex) {
+          if (LOG.isDebugEnabled()) {
+            LOG.debug(ex.getMessage());
+          }
+        }
-      String nodeHttpAddress = containerInfo.getNodeHttpAddress();
+      if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
+        ContainerInfo containerInfo;
+        try {
+          containerInfo = super.getContainer(
+              req, res, appId.toString(),
+              containerId.getApplicationAttemptId().toString(),
+              containerId.toString());
+        } catch (Exception ex) {
+          // return log meta for the aggregated logs if exists.
+          // It will also return empty log meta for the local logs.
+          return getContainerLogMeta(appId, appOwner, null,
+              containerIdStr, true);
+        }
+        nodeHttpAddress = containerInfo.getNodeHttpAddress();
+        // make sure nodeHttpAddress is not null and not empty. Otherwise,
+        // we would only get log meta for aggregated logs instead of
+        // re-directing the request
+        if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
+          // return log meta for the aggregated logs if exists.
+          // It will also return empty log meta for the local logs.
+          return getContainerLogMeta(appId, appOwner, null,
+              containerIdStr, true);
+        }
+      }
-      String resURI = JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);
+      String resURI = JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),
+          NM_DOWNLOAD_URI_STR, uri);
+   * @param nmId
+   *    The Node Manager NodeId
-      @PathParam("containerid") String containerIdStr,
-      @PathParam("filename") String filename,
-      @QueryParam("format") String format,
-      @QueryParam("size") String size) {
-    return getLogs(req, res, containerIdStr, filename, format, size);
+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,
+      @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,
+      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,
+      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,
+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {
+    return getLogs(req, res, containerIdStr, filename, format,
+        size, nmId);
-      @PathParam("containerid") String containerIdStr,
-      @PathParam("filename") String filename,
-      @QueryParam("format") String format,
-      @QueryParam("size") String size) {
+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,
+      @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,
+      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,
+      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,
+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {
-      ContainerInfo containerInfo;
-      try {
-        containerInfo = super.getContainer(
-            req, res, appId.toString(),
-            containerId.getApplicationAttemptId().toString(),
-            containerId.toString());
-      } catch (Exception ex) {
-        // output the aggregated logs
-        return sendStreamOutputResponse(appId, appOwner, null, containerIdStr,
-            filename, format, length, true);
+      String nodeHttpAddress = null;
+      if (nmId != null && !nmId.isEmpty()) {
+        try {
+          nodeHttpAddress = getNMWebAddressFromRM(conf, nmId);
+        } catch (Exception ex) {
+          if (LOG.isDebugEnabled()) {
+            LOG.debug(ex.getMessage());
+          }
+        }
-      String nodeHttpAddress = containerInfo.getNodeHttpAddress();
+      if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
+        ContainerInfo containerInfo;
+        try {
+          containerInfo = super.getContainer(
+              req, res, appId.toString(),
+              containerId.getApplicationAttemptId().toString(),
+              containerId.toString());
+        } catch (Exception ex) {
+          // output the aggregated logs
+          return sendStreamOutputResponse(appId, appOwner, null,
+              containerIdStr, filename, format, length, true);
+        }
+        nodeHttpAddress = containerInfo.getNodeHttpAddress();
+        // make sure nodeHttpAddress is not null and not empty. Otherwise,
+        // we would only get aggregated logs instead of re-directing the
+        // request
+        if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
+          // output the aggregated logs
+          return sendStreamOutputResponse(appId, appOwner, null,
+              containerIdStr, filename, format, length, true);
+        }
+      }
-      String resURI = JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);
+      String resURI = JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),
+          NM_DOWNLOAD_URI_STR, uri);
-        return createBadResponse(Status.INTERNAL_SERVER_ERROR,
+        throw new NotFoundException(
+
+  private String getAbsoluteNMWebAddress(String nmWebAddress) {
+    if (nmWebAddress.contains(WebAppUtils.HTTP_PREFIX) ||
+        nmWebAddress.contains(WebAppUtils.HTTPS_PREFIX)) {
+      return nmWebAddress;
+    }
+    return WebAppUtils.getHttpSchemePrefix(conf) + nmWebAddress;
+  }
+
+  @VisibleForTesting
+  @Private
+  public String getNMWebAddressFromRM(Configuration configuration,
+      String nodeId) throws ClientHandlerException,
+      UniformInterfaceException, JSONException {
+    JSONObject nodeInfo = YarnWebServiceUtils.getNodeInfoFromRMWebService(
+        configuration, nodeId).getJSONObject("node");
+    return nodeInfo.has("nodeHTTPAddress") ?
+        nodeInfo.getString("nodeHTTPAddress") : null;
+  }
