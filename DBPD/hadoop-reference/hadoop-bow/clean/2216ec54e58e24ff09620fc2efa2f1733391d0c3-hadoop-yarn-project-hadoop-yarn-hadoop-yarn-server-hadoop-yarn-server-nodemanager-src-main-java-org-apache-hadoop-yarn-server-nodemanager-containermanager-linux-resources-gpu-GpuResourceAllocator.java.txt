YARN-9100. Add tests for GpuResourceAllocator and do minor code cleanup. Contributed by Peter Bacsko

+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
-import java.util.HashMap;
-import java.util.Iterator;
+import java.util.stream.Collectors;
- * Allocate GPU resources according to requirements
+ * Allocate GPU resources according to requirements.
+
+  private final int waitPeriodForResource;
+    // Wait for a maximum of 120 seconds if no available GPU are there which
+    // are yet to be released.
+    this.waitPeriodForResource = 120 * WAIT_MS_PER_LOOP;
+  }
+
+  @VisibleForTesting
+  GpuResourceAllocator(Context ctx, int waitPeriodForResource) {
+    this.nmContext = ctx;
+    this.waitPeriodForResource = waitPeriodForResource;
-   * Contains allowed and denied devices
+   * Contains allowed and denied devices.
-   * Add GPU to allowed list
+   * Add GPU to the allowed list of GPUs.
-  private String getResourceHandlerExceptionMessage(int numRequestedGpuDevices,
-      ContainerId containerId) {
-    return "Failed to find enough GPUs, requestor=" + containerId
-        + ", #RequestedGPUs=" + numRequestedGpuDevices + ", #availableGpus="
-        + getAvailableGpus();
-  }
-
-    if (null == c) {
+    if (c == null) {
-          "This shouldn't happen, cannot find container with id="
-              + containerId);
+          "Cannot find container with id=" + containerId +
+              ", this should not occur under normal circumstances!");
-                + " is not GpuDevice, this shouldn't happen");
+                + " is not an instance of " + GpuDevice.class.getName()
+                + ", this should not occur under normal circumstances!");
-                + " however it is not in allowed device list:" + StringUtils
-                .join(",", allowedGpuDevices));
+                + " however it is not in the allowed device list:" +
+                StringUtils.join(",", allowedGpuDevices));
-   * Assign GPU to requestor
+   * Assign GPU to the specified container.
-    // Wait for a maximum of 120 seconds if no available GPU are there which
-    // are yet to be released.
-    final int timeoutMsecs = 120 * WAIT_MS_PER_LOOP;
+    // Wait for a maximum of waitPeriodForResource seconds if no
+    // available GPU are there which are yet to be released.
-      if (timeWaiting >= timeoutMsecs) {
+      if (timeWaiting >= waitPeriodForResource) {
+        Thread.currentThread().interrupt();
+        LOG.warn("Interrupted while waiting for available GPU");
-    // Assign Gpus to container if requested some.
+
+    // Assign GPUs to container if requested some.
+      if (LOG.isDebugEnabled()) {
+        LOG.debug(String.format("Trying to assign %d GPUs to container: %s" +
+            ", #AvailableGPUs=%d, #ReleasingGPUs=%d",
+            numRequestedGpuDevices, containerId,
+            getAvailableGpus(), getReleasingGpus()));
+      }
-            getResourceHandlerExceptionMessage(numRequestedGpuDevices,
-                containerId));
+            "Failed to find enough GPUs, requestor=" + containerId +
+                ", #RequestedGPUs=" + numRequestedGpuDevices +
+                ", #AvailableGPUs=" + getAvailableGpus());
-          cleanupAssignGpus(containerId);
+          unassignGpus(containerId);
-   * Clean up all Gpus assigned to containerId
+   * Clean up all GPUs assigned to containerId.
-  public synchronized void cleanupAssignGpus(ContainerId containerId) {
-    Iterator<Map.Entry<GpuDevice, ContainerId>> iter =
-        usedDevices.entrySet().iterator();
-    while (iter.hasNext()) {
-      if (iter.next().getValue().equals(containerId)) {
-        iter.remove();
-      }
+  public synchronized void unassignGpus(ContainerId containerId) {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Trying to unassign GPU device from container " + containerId);
+    usedDevices.entrySet().removeIf(entry ->
+        entry.getValue().equals(containerId));
-  public synchronized Map<GpuDevice, ContainerId> getDeviceAllocationMappingCopy() {
-    return new HashMap<>(usedDevices);
+  public synchronized Map<GpuDevice, ContainerId> getDeviceAllocationMapping() {
+    return ImmutableMap.copyOf(usedDevices);
-  public synchronized List<GpuDevice> getAllowedGpusCopy() {
-    return new ArrayList<>(allowedGpuDevices);
+  public synchronized List<GpuDevice> getAllowedGpus() {
+    return ImmutableList.copyOf(allowedGpuDevices);
-  public synchronized List<AssignedGpuDevice> getAssignedGpusCopy() {
-    List<AssignedGpuDevice> assigns = new ArrayList<>();
-    for (Map.Entry<GpuDevice, ContainerId> entry : usedDevices.entrySet()) {
-      assigns.add(new AssignedGpuDevice(entry.getKey().getIndex(),
-          entry.getKey().getMinorNumber(), entry.getValue()));
-    }
-    return assigns;
+  public synchronized List<AssignedGpuDevice> getAssignedGpus() {
+    return usedDevices.entrySet().stream()
+        .map(e -> {
+          final GpuDevice gpu = e.getKey();
+          ContainerId containerId = e.getValue();
+          return new AssignedGpuDevice(gpu.getIndex(), gpu.getMinorNumber(),
+              containerId);
+        }).collect(Collectors.toList());
