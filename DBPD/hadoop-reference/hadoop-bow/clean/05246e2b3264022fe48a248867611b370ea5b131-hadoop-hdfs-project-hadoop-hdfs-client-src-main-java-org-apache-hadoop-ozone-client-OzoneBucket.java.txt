HDFS-12060. Ozone: OzoneClient: Add list calls in RpcClient. Contributed by Nandakumar.

+import org.apache.hadoop.conf.Configuration;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+   * The proxy used for connecting to the cluster and perform
+   * client operations.
+   */
+  private final ClientProtocol proxy;
+  /**
-   * The proxy used for connecting to the cluster and perform
-   * client operations.
+   * Cache size to be used for listKey calls.
-  private ClientProtocol proxy;
+  private int listCacheSize;
+   * @param conf Configuration object.
+   * @param proxy ClientProtocol proxy.
-  public OzoneBucket(String volumeName, String bucketName,
+  public OzoneBucket(Configuration conf, ClientProtocol proxy,
+                     String volumeName, String bucketName,
+    this.proxy = proxy;
-  }
-
-  /**
-   * Sets the proxy using which client operations are performed.
-   * @param clientProxy
-   */
-  public void setClientProxy(ClientProtocol clientProxy) {
-    this.proxy = clientProxy;
+    this.listCacheSize = OzoneClientUtils.getListCacheSize(conf);
+   * Returns Iterator to iterate over all keys in the bucket.
+   * The result can be restricted using key prefix, will return all
+   * keys if key prefix is null.
+   *
+   * @param keyPrefix Bucket prefix to match
+   * @return {@code Iterator<OzoneKey>}
+   */
+  public Iterator<OzoneKey> listKeys(String keyPrefix) {
+    return new KeyIterator(keyPrefix);
+  }
+
+  /**
+
+  /**
+   * An Iterator to iterate over {@link OzoneKey} list.
+   */
+  private class KeyIterator implements Iterator<OzoneKey> {
+
+    private String keyPrefix = null;
+
+    private Iterator<OzoneKey> currentIterator;
+    private OzoneKey currentValue;
+
+
+    /**
+     * Creates an Iterator to iterate over all keys in the bucket,
+     * which matches volume prefix.
+     * @param keyPrefix
+     */
+    KeyIterator(String keyPrefix) {
+      this.keyPrefix = keyPrefix;
+      this.currentValue = null;
+      this.currentIterator = getNextListOfKeys(null).iterator();
+    }
+
+    @Override
+    public boolean hasNext() {
+      if(!currentIterator.hasNext()) {
+        currentIterator = getNextListOfKeys(
+            currentValue.getName()).iterator();
+      }
+      return currentIterator.hasNext();
+    }
+
+    @Override
+    public OzoneKey next() {
+      if(hasNext()) {
+        currentValue = currentIterator.next();
+        return currentValue;
+      }
+      throw new NoSuchElementException();
+    }
+
+    /**
+     * Gets the next set of key list using proxy.
+     * @param prevKey
+     * @return {@code List<OzoneVolume>}
+     */
+    private List<OzoneKey> getNextListOfKeys(String prevKey) {
+      try {
+        return proxy.listKeys(volumeName, name, keyPrefix, prevKey,
+            listCacheSize);
+      } catch (IOException e) {
+        throw new RuntimeException(e);
+      }
+    }
+  }
