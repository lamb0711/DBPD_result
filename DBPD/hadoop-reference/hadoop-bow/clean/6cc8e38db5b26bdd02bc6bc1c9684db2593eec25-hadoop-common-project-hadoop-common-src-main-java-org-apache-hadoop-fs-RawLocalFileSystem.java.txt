HADOOP-12258. Need translate java.nio.file.NoSuchFileException to FileNotFoundException to avoid regression. Contributed by Zhihai Xu.

+import java.nio.file.NoSuchFileException;
-    
+
+    private static long getLastAccessTime(File f) throws IOException {
+      long accessTime;
+      try {
+        accessTime = Files.readAttributes(f.toPath(),
+            BasicFileAttributes.class).lastAccessTime().toMillis();
+      } catch (NoSuchFileException e) {
+        throw new FileNotFoundException("File " + f + " does not exist");
+      }
+      return accessTime;
+    }
+
-          f.lastModified(),
-          Files.readAttributes(f.toPath(),
-            BasicFileAttributes.class).lastAccessTime().toMillis(),
+          f.lastModified(), getLastAccessTime(f),
-   * @param mtime the modification time to set (only if greater than zero).
-   * @param atime the access time to set (only if greater than zero).
+   * @param mtime the modification time to set (only if no less than zero).
+   * @param atime the access time to set (only if no less than zero).
-    BasicFileAttributeView view = Files.getFileAttributeView(
-        pathToFile(p).toPath(), BasicFileAttributeView.class);
-    FileTime fmtime = (mtime >= 0) ? FileTime.fromMillis(mtime) : null;
-    FileTime fatime = (atime >= 0) ? FileTime.fromMillis(atime) : null;
-    view.setTimes(fmtime, fatime, null);
+    try {
+      BasicFileAttributeView view = Files.getFileAttributeView(
+          pathToFile(p).toPath(), BasicFileAttributeView.class);
+      FileTime fmtime = (mtime >= 0) ? FileTime.fromMillis(mtime) : null;
+      FileTime fatime = (atime >= 0) ? FileTime.fromMillis(atime) : null;
+      view.setTimes(fmtime, fatime, null);
+    } catch (NoSuchFileException e) {
+      throw new FileNotFoundException("File " + p + " does not exist");
+    }
