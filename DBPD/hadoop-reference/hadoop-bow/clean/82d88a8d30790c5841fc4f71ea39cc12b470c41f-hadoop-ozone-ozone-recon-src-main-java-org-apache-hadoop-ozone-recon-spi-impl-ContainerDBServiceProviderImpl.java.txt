HDDS-1705. Recon: Add estimatedTotalCount to the response of containers and containers/{id} endpoints. Contributed by Vivek Ratnavel Subramanian.



+import static org.apache.hadoop.ozone.recon.ReconConstants.CONTAINER_COUNT_KEY;
+import static org.apache.hadoop.ozone.recon.ReconConstants.CONTAINER_KEY_COUNT_TABLE;
+import static org.jooq.impl.DSL.currentTimestamp;
+import static org.jooq.impl.DSL.select;
+import static org.jooq.impl.DSL.using;
+import java.sql.Timestamp;
+import org.hadoop.ozone.recon.schema.tables.daos.GlobalStatsDao;
+import org.hadoop.ozone.recon.schema.tables.pojos.GlobalStats;
+import org.jooq.Configuration;
+  private Table<Long, Long> containerKeyCountTable;
+  private GlobalStatsDao globalStatsDao;
-  public ContainerDBServiceProviderImpl(DBStore dbStore) {
+  private Configuration sqlConfiguration;
+
+  @Inject
+  public ContainerDBServiceProviderImpl(DBStore dbStore,
+                                        Configuration sqlConfiguration) {
+    globalStatsDao = new GlobalStatsDao(sqlConfiguration);
+      this.containerKeyCountTable = dbStore.getTable(CONTAINER_KEY_COUNT_TABLE,
+          Long.class, Long.class);
-      LOG.error("Unable to create Container Key Table. " + e);
+      LOG.error("Unable to create Container Key tables." + e);
-   * DB instance.
-   * @param containerKeyPrefixCounts Map of containerId, key-prefix tuple to
+   * DB instance. Also, truncate or reset the SQL tables as required.
+   * @param containerKeyPrefixCounts Map of container key-prefix to
+   *                                 number of keys with the prefix.
-    for (Map.Entry<ContainerKeyPrefix, Integer> entry :
-        containerKeyPrefixCounts.entrySet()) {
-      containerKeyTable.put(entry.getKey(), entry.getValue());
+
+    if (containerKeyPrefixCounts != null) {
+      for (Map.Entry<ContainerKeyPrefix, Integer> entry :
+          containerKeyPrefixCounts.entrySet()) {
+        containerKeyTable.put(entry.getKey(), entry.getValue());
+      }
+
+    // reset total count of containers to zero
+    storeContainerCount(0L);
-   * Concatenate the containerId and Key Prefix using a delimiter and store the
+   * Concatenate the containerID and Key Prefix using a delimiter and store the
-   * @param containerKeyPrefix the containerId, key-prefix tuple.
+   * @param containerKeyPrefix the containerID, key-prefix tuple.
-   * Put together the key from the passed in object and get the count from
-   * the container DB store.
+   * Store the containerID -> no. of keys count into the container DB store.
-   * @param containerKeyPrefix the containerId, key-prefix tuple.
-   * @return count of keys matching the containerId, key-prefix.
+   * @param containerID the containerID.
+   * @param count count of the keys within the given containerID.
-  public Integer getCountForForContainerKeyPrefix(
+  public void storeContainerKeyCount(Long containerID, Long count)
+      throws IOException {
+    containerKeyCountTable.put(containerID, count);
+  }
+
+  /**
+   * Get the total count of keys within the given containerID.
+   *
+   * @param containerID the given containerID.
+   * @return count of keys within the given containerID.
+   * @throws IOException
+   */
+  @Override
+  public long getKeyCountForContainer(Long containerID) throws IOException {
+    Long keyCount = containerKeyCountTable.get(containerID);
+    return keyCount == null ? 0L : keyCount;
+  }
+
+  /**
+   * Get if a containerID exists or not.
+   *
+   * @param containerID the given containerID.
+   * @return if the given ContainerID exists or not.
+   * @throws IOException
+   */
+  @Override
+  public boolean doesContainerExists(Long containerID) throws IOException {
+    return containerKeyCountTable.get(containerID) != null;
+  }
+
+  /**
+   * Put together the key from the passed in object and get the count from
+   * the container DB store.
+   *
+   * @param containerKeyPrefix the containerID, key-prefix tuple.
+   * @return count of keys matching the containerID, key-prefix.
+   * @throws IOException
+   */
+  @Override
+  public Integer getCountForContainerKeyPrefix(
-   * @param containerId the given containerId.
+   * @param containerId the given containerID.
+  /**
+   * Get total count of containers.
+   *
+   * @return total count of containers.
+   */
+  @Override
+  public long getCountForContainers() {
+    GlobalStats containerCountRecord =
+        globalStatsDao.fetchOneByKey(CONTAINER_COUNT_KEY);
+
+    return (containerCountRecord == null) ? 0L :
+        containerCountRecord.getValue();
+  }
+
+
+  /**
+   * Store the total count of containers into the container DB store.
+   *
+   * @param count count of the containers present in the system.
+   */
+  @Override
+  public void storeContainerCount(Long count) {
+    // Get the current timestamp
+    Timestamp now =
+        using(sqlConfiguration).fetchValue(select(currentTimestamp()));
+    GlobalStats containerCountRecord =
+        globalStatsDao.fetchOneByKey(CONTAINER_COUNT_KEY);
+    GlobalStats globalStatsRecord =
+        new GlobalStats(CONTAINER_COUNT_KEY, count, now);
+
+    // Insert a new record for CONTAINER_COUNT_KEY if it does not exist
+    if (containerCountRecord == null) {
+      globalStatsDao.insert(globalStatsRecord);
+    } else {
+      globalStatsDao.update(globalStatsRecord);
+    }
+  }
+
+  /**
+   * Increment the total count for containers in the system by the given count.
+   *
+   * @param count no. of new containers to add to containers total count.
+   */
+  @Override
+  public void incrementContainerCountBy(long count) {
+    long containersCount = getCountForContainers();
+    storeContainerCount(containersCount + count);
+  }
