HDDS-1. Remove SCM Block DB. Contributed by Xiaoyu Yao.

+import org.apache.commons.lang3.RandomUtils;
+import org.apache.hadoop.hdds.client.BlockID;
+import org.apache.hadoop.util.Time;
+import java.util.ArrayList;
+  final int initContainers = 100;
+  final int initKeys = 50;
+  final int initChunks = 100;
+
+  List<Long> containers;
+  List<Long> keys;
+  List<String> chunks;
+
+    containers = new ArrayList<>();
+    keys = new ArrayList<>();
+    chunks = new ArrayList<>();
+
-    for (int x = 0; x < 100; x++) {
-      String containerName = "container-" + containerCount.getAndIncrement();
-      dispatcher.dispatch(getCreateContainerCommand(containerName));
+    for (int x = 0; x < initContainers; x++) {
+      long containerID = Time.getUtcTime() + x;
+      ContainerCommandRequestProto req = getCreateContainerCommand(containerID);
+      dispatcher.dispatch(req);
+      containers.add(containerID);
+      containerCount.getAndIncrement();
+
+    for (int x = 0; x < initKeys; x++) {
+      keys.add(Time.getUtcTime()+x);
+    }
+
+    for (int x = 0; x < initChunks; x++) {
+      chunks.add("chunk-" + x);
+    }
+
-    for (int x = 0; x < 50; x++) {
-      String chunkName = "chunk-" + chunkCount.getAndIncrement();
-      String keyName = "key-" + keyCount.getAndIncrement();
-      for (int y = 0; y < 100; y++) {
-        String containerName = "container-" + y;
-        dispatcher.dispatch(getWriteChunkCommand(containerName, chunkName));
+    for (int x = 0; x < initKeys; x++) {
+      String chunkName = chunks.get(x);
+      chunkCount.getAndIncrement();
+      long key = keys.get(x);
+      keyCount.getAndIncrement();
+      for (int y = 0; y < initContainers; y++) {
+        long containerID = containers.get(y);
+        BlockID  blockID = new BlockID(containerID, key);
-            .dispatch(getPutKeyCommand(containerName, chunkName, keyName));
+            .dispatch(getPutKeyCommand(blockID, chunkName));
+        dispatcher.dispatch(getWriteChunkCommand(blockID, chunkName));
-  private ContainerCommandRequestProto getCreateContainerCommand(
-      String containerName) {
+  private ContainerCommandRequestProto getCreateContainerCommand(long containerID) {
-        new Pipeline(containerName, pipelineChannel).getProtobufMessage());
+        new Pipeline(pipelineChannel).getProtobufMessage());
-        ContainerData.newBuilder().setName(containerName).build());
+        ContainerData.newBuilder().setContainerID(
+            containerID).build());
-    request.setTraceID(containerName + "-trace");
+    request.setTraceID(containerID + "-trace");
-      String containerName, String key) {
-
+      BlockID blockID, String chunkName) {
-        .setPipeline(
-            new Pipeline(containerName, pipelineChannel).getProtobufMessage())
-        .setKeyName(key)
-        .setChunkData(getChunkInfo(containerName, key))
+        .setBlockID(blockID.getProtobuf())
+        .setChunkData(getChunkInfo(blockID, chunkName))
-        .setTraceID(containerName + "-" + key +"-trace")
+        .setTraceID(getBlockTraceID(blockID))
-      String containerName, String key) {
+      BlockID blockID, String chunkName) {
-        .setPipeline(
-            new Pipeline(containerName, pipelineChannel).getProtobufMessage())
-        .setKeyName(key)
-        .setChunkData(getChunkInfo(containerName, key));
+        .setBlockID(blockID.getProtobuf())
+        .setChunkData(getChunkInfo(blockID, chunkName));
-        .setTraceID(containerName + "-" + key +"-trace")
+        .setTraceID(getBlockTraceID(blockID))
-      String containerName, String key) {
+      BlockID blockID, String chunkName) {
-                DigestUtils.md5Hex(key) + "_stream_" + containerName + "_chunk_"
-                    + key)
+                DigestUtils.md5Hex(chunkName)
+                    + "_stream_" + blockID.getContainerID() + "_block_"
+                    + blockID.getLocalID())
-      String containerName, String chunkKey, String key) {
+      BlockID blockID, String chunkKey) {
-        .setPipeline(
-            new Pipeline(containerName, pipelineChannel).getProtobufMessage())
-        .setKeyData(getKeyData(containerName, chunkKey, key));
+        .setKeyData(getKeyData(blockID, chunkKey));
-        .setTraceID(containerName + "-" + key +"-trace")
+        .setTraceID(getBlockTraceID(blockID))
-      String containerName, String chunkKey, String key) {
+      BlockID blockID, String chunkKey) {
-        .setPipeline(
-            new Pipeline(containerName, pipelineChannel).getProtobufMessage())
-        .setKeyData(getKeyData(containerName, chunkKey, key));
+        .setKeyData(getKeyData(blockID, chunkKey));
-        .setTraceID(containerName + "-" + key +"-trace")
+        .setTraceID(getBlockTraceID(blockID))
-      String containerName, String chunkKey, String key) {
+      BlockID blockID, String chunkKey) {
-        .setContainerName(containerName)
-        .setName(key)
-        .addChunks(getChunkInfo(containerName, chunkKey));
+        .setBlockID(blockID.getProtobuf())
+        .addChunks(getChunkInfo(blockID, chunkKey));
-    bmdd.dispatcher.dispatch(getCreateContainerCommand(
-        "container-" + containerCount.getAndIncrement()));
+    long containerID = RandomUtils.nextLong();
+    ContainerCommandRequestProto req = getCreateContainerCommand(containerID);
+    bmdd.dispatcher.dispatch(req);
+    bmdd.containers.add(containerID);
+    bmdd.containerCount.getAndIncrement();
-    String containerName = "container-" + random.nextInt(containerCount.get());
-        containerName, "chunk-" + chunkCount.getAndIncrement()));
+        getRandomBlockID(), getNewChunkToWrite()));
-    String containerName = "container-" + random.nextInt(containerCount.get());
-    String chunkKey = "chunk-" + random.nextInt(chunkCount.get());
-    bmdd.dispatcher.dispatch(getReadChunkCommand(containerName, chunkKey));
+    BlockID blockID = getRandomBlockID();
+    String chunkKey = getRandomChunkToRead();
+    bmdd.dispatcher.dispatch(getReadChunkCommand(blockID, chunkKey));
-    String containerName = "container-" + random.nextInt(containerCount.get());
-    String chunkKey = "chunk-" + random.nextInt(chunkCount.get());
-    bmdd.dispatcher.dispatch(getPutKeyCommand(
-        containerName, chunkKey, "key-" + keyCount.getAndIncrement()));
+    BlockID blockID = getRandomBlockID();
+    String chunkKey = getNewChunkToWrite();
+    bmdd.dispatcher.dispatch(getPutKeyCommand(blockID, chunkKey));
-    String containerName = "container-" + random.nextInt(containerCount.get());
-    String chunkKey = "chunk-" + random.nextInt(chunkCount.get());
-    String key = "key-" + random.nextInt(keyCount.get());
-    bmdd.dispatcher.dispatch(getGetKeyCommand(containerName, chunkKey, key));
+    BlockID blockID = getRandomBlockID();
+    String chunkKey = getNewChunkToWrite();
+    bmdd.dispatcher.dispatch(getGetKeyCommand(blockID, chunkKey));
+  }
+
+  // Chunks writes from benchmark only reaches certain containers
+  // Use initChunks instead of updated counters to guarantee
+  // key/chunks are readable.
+
+  private BlockID getRandomBlockID() {
+    return new BlockID(getRandomContainerID(), getRandomKeyID());
+  }
+
+  private long getRandomContainerID() {
+    return containers.get(random.nextInt(initContainers));
+  }
+
+  private long getRandomKeyID() {
+    return keys.get(random.nextInt(initKeys));
+  }
+
+  private String getRandomChunkToRead() {
+    return chunks.get(random.nextInt(initChunks));
+  }
+
+  private String getNewChunkToWrite() {
+    return "chunk-" + chunkCount.getAndIncrement();
+  }
+
+  private String getBlockTraceID(BlockID blockID) {
+    return blockID.getContainerID() + "-" + blockID.getLocalID() +"-trace";
