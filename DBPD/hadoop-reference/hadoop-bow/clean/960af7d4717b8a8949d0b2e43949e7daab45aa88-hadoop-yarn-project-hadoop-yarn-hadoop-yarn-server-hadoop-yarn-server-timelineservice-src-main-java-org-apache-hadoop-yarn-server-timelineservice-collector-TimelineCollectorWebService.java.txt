YARN-4409. Fix javadoc and checkstyle issues in timelineservice code (Varun Saxena via sjlee)

+  /**
+   * Gives information about timeline collector.
+   */
-    public AboutInfo(String about) {
-      this.about = about;
+    public AboutInfo(String abt) {
+      this.about = abt;
-    public void setAbout(String about) {
-      this.about = about;
+    public void setAbout(String abt) {
+      this.about = abt;
+   *
+   * @param req Servlet request.
+   * @param res Servlet response.
+   * @return description of timeline web service.
+   *
+   * @param req Servlet request.
+   * @param res Servlet response.
+   * @param async flag indicating whether its an async put or not. "true"
+   *     indicates, its an async call. If null, its considered false.
+   * @param appId Application Id to which the entities to be put belong to. If
+   *     appId is not there or it cannot be parsed, HTTP 400 will be sent back.
+   * @param entities timeline entities to be put.
+   * @return a Response with appropriate HTTP status.
-          case YARN_CLUSTER:
-            entitiesToReturn.addEntity(new ClusterEntity(entity));
-            break;
-          case YARN_FLOW_RUN:
-            entitiesToReturn.addEntity(new FlowRunEntity(entity));
-            break;
-          case YARN_APPLICATION:
-            entitiesToReturn.addEntity(new ApplicationEntity(entity));
-            break;
-          case YARN_APPLICATION_ATTEMPT:
-            entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));
-            break;
-          case YARN_CONTAINER:
-            entitiesToReturn.addEntity(new ContainerEntity(entity));
-            break;
-          case YARN_QUEUE:
-            entitiesToReturn.addEntity(new QueueEntity(entity));
-            break;
-          case YARN_USER:
-            entitiesToReturn.addEntity(new UserEntity(entity));
-            break;
-          default:
-            break;
+        case YARN_CLUSTER:
+          entitiesToReturn.addEntity(new ClusterEntity(entity));
+          break;
+        case YARN_FLOW_RUN:
+          entitiesToReturn.addEntity(new FlowRunEntity(entity));
+          break;
+        case YARN_APPLICATION:
+          entitiesToReturn.addEntity(new ApplicationEntity(entity));
+          break;
+        case YARN_APPLICATION_ATTEMPT:
+          entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));
+          break;
+        case YARN_CONTAINER:
+          entitiesToReturn.addEntity(new ContainerEntity(entity));
+          break;
+        case YARN_QUEUE:
+          entitiesToReturn.addEntity(new QueueEntity(entity));
+          break;
+        case YARN_USER:
+          entitiesToReturn.addEntity(new UserEntity(entity));
+          break;
+        default:
+          break;
