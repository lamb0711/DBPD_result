HDDS-1. Remove SCM Block DB. Contributed by Xiaoyu Yao.

+import org.apache.hadoop.hdds.client.BlockID;
-        .setPipeline(xceiverClient.getPipeline().getProtobufMessage())
-        .setPipeline(xceiverClient.getPipeline().getProtobufMessage())
-   * @param key the key name
+   * @param blockID ID of the block
-      ChunkInfo chunk, String key, String traceID)
-      throws IOException {
+        ChunkInfo chunk, BlockID blockID, String traceID) throws IOException {
-        .setPipeline(xceiverClient.getPipeline().getProtobufMessage())
-        .setKeyName(key)
+        .setBlockID(blockID.getProtobuf())
-   * @param key the key name
+   * @param blockID ID of the block
-      String key, ByteString data, String traceID)
+      BlockID blockID, ByteString data, String traceID)
-        .setPipeline(xceiverClient.getPipeline().getProtobufMessage())
-        .setKeyName(key)
+        .setBlockID(blockID.getProtobuf())
-   * @param containerName - Name of the container
-   * @param key - Name of the Key
+   * @param blockID - ID of the block
-      String containerName, String key, byte[] data, String traceID)
+      BlockID blockID, byte[] data, String traceID)
-        KeyData.newBuilder().setContainerName(containerName).setName(key)
+        KeyData.newBuilder().setBlockID(blockID.getProtobuf())
-            .setPipeline(client.getPipeline().getProtobufMessage())
-        ChunkInfo.newBuilder().setChunkName(key + "_chunk").setOffset(0)
-            .setLen(data.length).addMetadata(keyValue).build();
+        ChunkInfo.newBuilder().setChunkName(blockID.getLocalID()
+            + "_chunk").setOffset(0).setLen(data.length).
+            addMetadata(keyValue).build();
+   * @param containerID - ID of container
-  public static void createContainer(XceiverClientSpi client, String traceID)
-      throws IOException {
+  public static void createContainer(XceiverClientSpi client, long containerID,
+      String traceID) throws IOException {
-    containerData.setName(client.getPipeline().getContainerName());
+    containerData.setContainerID(containerID);
-  public static void deleteContainer(XceiverClientSpi client,
+  public static void deleteContainer(XceiverClientSpi client, long containerID,
-    deleteRequest.setName(client.getPipeline().getContainerName());
-    deleteRequest.setPipeline(client.getPipeline().getProtobufMessage());
+    deleteRequest.setContainerID(containerID);
+   * @param containerID
-  public static void closeContainer(XceiverClientSpi client, String traceID)
-      throws IOException {
+  public static void closeContainer(XceiverClientSpi client,
+      long containerID, String traceID) throws IOException {
-    closeRequest.setPipeline(client.getPipeline().getProtobufMessage());
+    closeRequest.setContainerID(containerID);
-      XceiverClientSpi client, String containerName,
+      XceiverClientSpi client, long containerID,
-    readRequest.setName(containerName);
+    readRequest.setContainerID(containerID);
-   * Reads the data given the container name and key.
+   * Reads the data given the blockID
-   * @param containerName - name of the container
-   * @param key - key
+   * @param blockID - ID of the block
-      String containerName, String key, String traceID) throws IOException {
+      BlockID blockID, String traceID) throws IOException {
-        .setContainerName(containerName)
-        .setName(key).build();
+        .setBlockID(blockID.getProtobuf())
+        .build();
-        .setPipeline(client.getPipeline().getProtobufMessage())
