YARN-6467. CSQueueMetrics needs to update the current metrics for default partition only. Contributed by Manikandan R.

+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentSkipListSet;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.PendingAsk;
-
-
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.PendingAsk;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentSkipListSet;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-    metrics.incrPendingResources(user,
+    metrics.incrPendingResources(request.getNodeLabelExpression(), user,
-    metrics.decrPendingResources(user,
-        lastRequestContainers, lastRequestCapability);
+
+    if(lastRequest != null) {
+      metrics.decrPendingResources(lastRequest.getNodeLabelExpression(), user,
+          lastRequestContainers, lastRequestCapability);
+    }
-        updateMetricsForAllocatedContainer(type, containerAllocated);
+        updateMetricsForAllocatedContainer(type, node, containerAllocated);
-          oldMetrics.decrPendingResources(user, ask.getCount(),
-              ask.getPerAllocationResource());
-          newMetrics.incrPendingResources(user, ask.getCount(),
-              ask.getPerAllocationResource());
+          oldMetrics.decrPendingResources(
+              ps.getPrimaryRequestedNodePartition(),
+              user, ask.getCount(), ask.getPerAllocationResource());
+          newMetrics.incrPendingResources(
+              ps.getPrimaryRequestedNodePartition(),
+              user, ask.getCount(), ask.getPerAllocationResource());
-          metrics.decrPendingResources(user, ask.getCount(),
-              ask.getPerAllocationResource());
+          metrics.decrPendingResources(ps.getPrimaryRequestedNodePartition(),
+              user, ask.getCount(), ask.getPerAllocationResource());
-      metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),
-          false);
+      metrics.allocateResources(rmContainer.getNodeLabelExpression(),
+          user, 1, rmContainer.getAllocatedResource(), false);
-  private void updateMetricsForAllocatedContainer(
-    NodeType type, Container containerAllocated) {
+  private void updateMetricsForAllocatedContainer(NodeType type,
+      SchedulerNode node, Container containerAllocated) {
-    metrics.allocateResources(user, 1, containerAllocated.getResource(),
-        true);
+    if(node != null) {
+      metrics.allocateResources(node.getPartition(), user, 1,
+          containerAllocated.getResource(), true);
+    }
