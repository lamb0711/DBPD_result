HDDS-662. Introduce ContainerReplicaState in StorageContainerManager. Contributed by Nanda kumar.

-import java.util.HashSet;
-import java.util.Set;
-import org.apache.hadoop.hdds.protocol.DatanodeDetails;
+
-import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerInfo;
+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;
+import org.apache.hadoop.hdds.scm.container.ContainerReplica;
+import org.apache.hadoop.hdds.scm.container.ContainerInfo;
+import org.apache.hadoop.hdds.scm.container.ContainerReplicaNotFoundException;
-import org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes;
+import java.util.HashSet;
+import java.util.Set;
-import static org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes
-    .FAILED_TO_FIND_CONTAINER;
+  private final static NavigableSet<ContainerID> EMPTY_SET  =
+      Collections.unmodifiableNavigableSet(new TreeSet<>());
+
-
-  // Map to hold replicas of given container.
-  private final Map<ContainerID, Set<DatanodeDetails>> contReplicaMap;
-  private final static NavigableSet<ContainerID> EMPTY_SET  =
-      Collections.unmodifiableNavigableSet(new TreeSet<>());
+  private final Map<ContainerID, Set<ContainerReplica>> replicaMap;
-    lifeCycleStateMap = new ContainerAttribute<>();
-    ownerMap = new ContainerAttribute<>();
-    factorMap = new ContainerAttribute<>();
-    typeMap = new ContainerAttribute<>();
-    containerMap = new HashMap<>();
-    lock = new ReentrantReadWriteLock();
-    contReplicaMap = new HashMap<>();
-//        new InstrumentedLock(getClass().getName(), LOG,
-//            new ReentrantLock(),
-//            1000,
-//            300));
-    resultCache = new ConcurrentHashMap<>();
+    this.lifeCycleStateMap = new ContainerAttribute<>();
+    this.ownerMap = new ContainerAttribute<>();
+    this.factorMap = new ContainerAttribute<>();
+    this.typeMap = new ContainerAttribute<>();
+    this.containerMap = new HashMap<>();
+    this.lock = new ReentrantReadWriteLock();
+    this.replicaMap = new HashMap<>();
+    this.resultCache = new ConcurrentHashMap<>();
-  public void addContainer(ContainerInfo info)
+  public void addContainer(final ContainerInfo info)
-      ContainerID id = ContainerID.valueof(info.getContainerID());
+      final ContainerID id = info.containerID();
+      replicaMap.put(id, new HashSet<>());
-   * Returns the latest state of Container from SCM's Container State Map.
+   * Removes a Container Entry from ContainerStateMap.
-   * @param info - ContainerInfo
-   * @return ContainerInfo
+   * @param containerID - ContainerID
+   * @throws SCMException - throws if create failed.
-  public ContainerInfo getContainerInfo(ContainerInfo info) {
-    return getContainerInfo(info.getContainerID());
-  }
-
-  /**
-   * Returns the latest state of Container from SCM's Container State Map.
-   *
-   * @param containerID - int
-   * @return container info, if found.
-   */
-  public ContainerInfo getContainerInfo(long containerID) {
-    return getContainerInfo(ContainerID.valueof(containerID));
+  public void removeContainer(final ContainerID containerID)
+      throws ContainerNotFoundException {
+    Preconditions.checkNotNull(containerID, "ContainerID cannot be null");
+    lock.writeLock().lock();
+    try {
+      checkIfContainerExist(containerID);
+      // Should we revert back to the original state if any of the below
+      // remove operation fails?
+      final ContainerInfo info = containerMap.remove(containerID);
+      lifeCycleStateMap.remove(info.getState(), containerID);
+      ownerMap.remove(info.getOwner(), containerID);
+      factorMap.remove(info.getReplicationFactor(), containerID);
+      typeMap.remove(info.getReplicationType(), containerID);
+      // Flush the cache of this container type.
+      flushCache(info);
+      LOG.trace("Removed container with {} successfully.", containerID);
+    } finally {
+      lock.writeLock().unlock();
+    }
-  public ContainerInfo getContainerInfo(ContainerID containerID) {
+  public ContainerInfo getContainerInfo(final ContainerID containerID)
+      throws ContainerNotFoundException {
+      checkIfContainerExist(containerID);
-  public Set<DatanodeDetails> getContainerReplicas(ContainerID containerID)
-      throws SCMException {
+  public Set<ContainerReplica> getContainerReplicas(
+      final ContainerID containerID) throws ContainerNotFoundException {
-      if (contReplicaMap.containsKey(containerID)) {
-        return Collections
-            .unmodifiableSet(contReplicaMap.get(containerID));
-      }
+      checkIfContainerExist(containerID);
+      return Collections
+          .unmodifiableSet(new HashSet<>(replicaMap.get(containerID)));
-    throw new SCMException(
-        "No entry exist for containerId: " + containerID + " in replica map.",
-        ResultCodes.NO_REPLICA_FOUND);
-   * @param dnList
+   * @param replica
-  public void addContainerReplica(ContainerID containerID,
-      DatanodeDetails... dnList) {
+  public void updateContainerReplica(final ContainerID containerID,
+      final ContainerReplica replica) throws ContainerNotFoundException {
-      for (DatanodeDetails dn : dnList) {
-        Preconditions.checkNotNull(dn);
-        if (contReplicaMap.containsKey(containerID)) {
-          if(!contReplicaMap.get(containerID).add(dn)) {
-            LOG.debug("ReplicaMap already contains entry for container Id: "
-                + "{},DataNode: {}", containerID, dn);
-          }
-        } else {
-          Set<DatanodeDetails> dnSet = new HashSet<>();
-          dnSet.add(dn);
-          contReplicaMap.put(containerID, dnSet);
-        }
-      }
+      checkIfContainerExist(containerID);
+      Set<ContainerReplica> replicas = replicaMap.get(containerID);
+      replicas.remove(replica);
+      replicas.add(replica);
-   * @param dn
+   * @param replica
-  public boolean removeContainerReplica(ContainerID containerID,
-      DatanodeDetails dn) throws SCMException {
+  public void removeContainerReplica(final ContainerID containerID,
+      final ContainerReplica replica)
+      throws ContainerNotFoundException, ContainerReplicaNotFoundException {
-    Preconditions.checkNotNull(dn);
+    Preconditions.checkNotNull(replica);
-      if (contReplicaMap.containsKey(containerID)) {
-        return contReplicaMap.get(containerID).remove(dn);
+      checkIfContainerExist(containerID);
+      if(!replicaMap.get(containerID).remove(replica)) {
+        throw new ContainerReplicaNotFoundException(
+            "Container #"
+                + containerID.getId() + ", replica: " + replica);
-    throw new SCMException(
-        "No entry exist for containerId: " + containerID + " in replica map.",
-        ResultCodes.FAILED_TO_FIND_CONTAINER);
+  // TODO: fix the test case and remove this method!
-   * Returns the full container Map.
-   *
-   * @return - Map
-   */
-  public Map<ContainerID, ContainerInfo> getContainerMap() {
-    lock.readLock().lock();
-    try {
-      return Collections.unmodifiableMap(containerMap);
-    } finally {
-      lock.readLock().unlock();
-    }
-  }
-
-  /**
-  public void updateContainerInfo(ContainerInfo info) throws SCMException {
-    Preconditions.checkNotNull(info);
-    ContainerInfo currentInfo = null;
+  public void updateContainerInfo(final ContainerInfo info)
+      throws ContainerNotFoundException {
-      currentInfo = containerMap.get(
-          ContainerID.valueof(info.getContainerID()));
-
-      if (currentInfo == null) {
-        throw new SCMException("No such container.", FAILED_TO_FIND_CONTAINER);
-      }
+      Preconditions.checkNotNull(info);
+      checkIfContainerExist(info.containerID());
+      final ContainerInfo currentInfo = containerMap.get(info.containerID());
-   * @param info - ContainerInfo
+   * @param containerID - ContainerID
-  public void updateState(ContainerInfo info, LifeCycleState currentState,
-      LifeCycleState newState) throws SCMException {
+  public void updateState(ContainerID containerID, LifeCycleState currentState,
+      LifeCycleState newState) throws SCMException, ContainerNotFoundException {
-
-    ContainerID id = new ContainerID(info.getContainerID());
-    ContainerInfo currentInfo = null;
-
+      checkIfContainerExist(containerID);
+      final ContainerInfo currentInfo = containerMap.get(containerID);
-        // Just flush both old and new data sets from the result cache.
-        ContainerInfo newInfo = new ContainerInfo(info);
+        final ContainerInfo newInfo = new ContainerInfo(currentInfo);
-        flushCache(newInfo, info);
-        currentInfo = containerMap.get(id);
-
-        if (currentInfo == null) {
-          throw new
-              SCMException("No such container.", FAILED_TO_FIND_CONTAINER);
-        }
-        info.setState(newState);
-        containerMap.put(id, info);
-        lifeCycleStateMap.update(currentState, newState, id);
+        containerMap.put(containerID, newInfo);
+        lifeCycleStateMap.update(currentState, newState, containerID);
-            "{}", id, currentState, newState);
+            "{}", containerID, currentState, newState);
+
+        // Just flush both old and new data sets from the result cache.
+        flushCache(currentInfo, newInfo);
-        containerMap.put(id, currentInfo);
+        containerMap.put(containerID, currentInfo);
-        lifeCycleStateMap.update(newState, currentState, id);
+        lifeCycleStateMap.update(newState, currentState, containerID);
+  public Set<ContainerID> getAllContainerIDs() {
+    return containerMap.keySet();
+  }
+
-  NavigableSet<ContainerID> getContainerIDsByOwner(String ownerName) {
+  NavigableSet<ContainerID> getContainerIDsByOwner(final String ownerName) {
-  NavigableSet<ContainerID> getContainerIDsByType(ReplicationType type) {
+  NavigableSet<ContainerID> getContainerIDsByType(final ReplicationType type) {
-  NavigableSet<ContainerID> getContainerIDsByFactor(ReplicationFactor factor) {
+  NavigableSet<ContainerID> getContainerIDsByFactor(
+      final ReplicationFactor factor) {
-      LifeCycleState state) {
+      final LifeCycleState state) {
-      LifeCycleState state, String owner,
-      ReplicationFactor factor, ReplicationType type) {
+      final LifeCycleState state, final String owner,
+      final ReplicationFactor factor, final ReplicationType type) {
-      ContainerQueryKey queryKey =
+      final ContainerQueryKey queryKey =
-      NavigableSet<ContainerID> stateSet =
+      final NavigableSet<ContainerID> stateSet =
-      NavigableSet<ContainerID> ownerSet = ownerMap.getCollection(owner);
+      final NavigableSet<ContainerID> ownerSet =
+          ownerMap.getCollection(owner);
-      NavigableSet<ContainerID> factorSet = factorMap.getCollection(factor);
+      final NavigableSet<ContainerID> factorSet =
+          factorMap.getCollection(factor);
-      NavigableSet<ContainerID> typeSet = typeMap.getCollection(type);
+      final NavigableSet<ContainerID> typeSet =
+          typeMap.getCollection(type);
-      NavigableSet<ContainerID>[] sets = sortBySize(stateSet,
+      final NavigableSet<ContainerID>[] sets = sortBySize(stateSet,
-      NavigableSet<ContainerID> smaller,
-      NavigableSet<ContainerID> bigger) {
+      final NavigableSet<ContainerID> smaller,
+      final NavigableSet<ContainerID> bigger) {
-    NavigableSet<ContainerID> resultSet = new TreeSet<>();
+    final NavigableSet<ContainerID> resultSet = new TreeSet<>();
-      NavigableSet<ContainerID>... sets) {
+      final NavigableSet<ContainerID>... sets) {
-          NavigableSet temp = sets[y];
+          final NavigableSet temp = sets[y];
-  private void flushCache(ContainerInfo... containerInfos) {
+  private void flushCache(final ContainerInfo... containerInfos) {
-      ContainerQueryKey key = new ContainerQueryKey(containerInfo.getState(),
-          containerInfo.getOwner(), containerInfo.getReplicationFactor(),
+      final ContainerQueryKey key = new ContainerQueryKey(
+          containerInfo.getState(),
+          containerInfo.getOwner(),
+          containerInfo.getReplicationFactor(),
+  private void checkIfContainerExist(ContainerID containerID)
+      throws ContainerNotFoundException {
+    if (!containerMap.containsKey(containerID)) {
+      throw new ContainerNotFoundException("#" + containerID.getId());
+    }
+  }
+
