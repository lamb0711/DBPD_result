HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.

-import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetFilePathRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetFilePathResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetNextSPSPathIdRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetNextSPSPathIdResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetNextSPSPathRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetNextSPSPathResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.HasLowRedundancyBlocksRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.HasLowRedundancyBlocksResponseProto;
-  public GetNextSPSPathIdResponseProto getNextSPSPathId(
-      RpcController controller, GetNextSPSPathIdRequestProto request)
+  public GetNextSPSPathResponseProto getNextSPSPath(
+      RpcController controller, GetNextSPSPathRequestProto request)
-      Long nextSPSPathId = impl.getNextSPSPathId();
-      if (nextSPSPathId == null) {
-        return GetNextSPSPathIdResponseProto.newBuilder().build();
+      String nextSPSPath = impl.getNextSPSPath();
+      if (nextSPSPath == null) {
+        return GetNextSPSPathResponseProto.newBuilder().build();
-      return GetNextSPSPathIdResponseProto.newBuilder().setFileId(nextSPSPathId)
+      return GetNextSPSPathResponseProto.newBuilder().setSpsPath(nextSPSPath)
-  public GetFilePathResponseProto getFilePath(RpcController controller,
-      GetFilePathRequestProto request) throws ServiceException {
-    try {
-      return GetFilePathResponseProto.newBuilder()
-          .setSrcPath(impl.getFilePath(request.getFileId())).build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
-  }
-
-  @Override
-
-  @Override
-  public HasLowRedundancyBlocksResponseProto hasLowRedundancyBlocks(
-      RpcController controller, HasLowRedundancyBlocksRequestProto request)
-          throws ServiceException {
-    try {
-      return HasLowRedundancyBlocksResponseProto.newBuilder()
-          .setHasLowRedundancyBlocks(
-              impl.hasLowRedundancyBlocks(request.getInodeId()))
-          .build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
-  }
-
