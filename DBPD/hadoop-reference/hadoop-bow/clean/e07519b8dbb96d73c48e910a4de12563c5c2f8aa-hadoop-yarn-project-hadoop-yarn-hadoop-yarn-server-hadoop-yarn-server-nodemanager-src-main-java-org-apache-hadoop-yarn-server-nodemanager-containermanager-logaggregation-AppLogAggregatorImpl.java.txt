YARN-4766. NM should not aggregate logs older than the retention policy (haibochen via rkanter)

+import org.apache.hadoop.yarn.logaggregation.AggregatedLogFormat;
+
+  /**
+   * The value recovered from state store to determine the age of application
+   * log files if log retention is enabled. Files older than retention policy
+   * will not be uploaded but scheduled for cleaning up. -1 if not recovered.
+   */
+  private final long recoveredLogInitedTime;
+
+    this(dispatcher, deletionService, conf, appId, userUgi, nodeId,
+        dirsHandler, remoteNodeLogFileForApp, appAcls,
+        logAggregationContext, context, lfs, rollingMonitorInterval, -1);
+  }
+
+  public AppLogAggregatorImpl(Dispatcher dispatcher,
+      DeletionService deletionService, Configuration conf,
+      ApplicationId appId, UserGroupInformation userUgi, NodeId nodeId,
+      LocalDirsHandlerService dirsHandler, Path remoteNodeLogFileForApp,
+      Map<ApplicationAccessType, String> appAcls,
+      LogAggregationContext logAggregationContext, Context context,
+      FileContext lfs, long rollingMonitorInterval,
+      long recoveredLogInitedTime) {
+    this.recoveredLogInitedTime = recoveredLogInitedTime;
-        writer =
-            new LogWriter(this.conf, this.remoteNodeTmpLogFileForApp,
-              this.userUgi);
+        writer = createLogWriter();
+  protected LogWriter createLogWriter() throws IOException {
+    return new LogWriter(this.conf, this.remoteNodeTmpLogFileForApp,
+        this.userUgi);
+  }
+
-  private class ContainerLogAggregator {
+  class ContainerLogAggregator {
+    private final AggregatedLogFormat.LogRetentionContext retentionContext;
-    private Set<String> uploadedFileMeta =
-        new HashSet<String>();
-    
+    private Set<String> uploadedFileMeta = new HashSet<String>();
+      this.retentionContext = getRetentionContext();
+    }
+
+    private AggregatedLogFormat.LogRetentionContext getRetentionContext() {
+      final long logRetentionSecs =
+          conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,
+              YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);
+      return new AggregatedLogFormat.LogRetentionContext(
+          recoveredLogInitedTime, logRetentionSecs * 1000);
-            this.uploadedFileMeta, appFinished);
+            this.uploadedFileMeta,  retentionContext, appFinished);
-      return logValue.getCurrentUpLoadedFilesPath();
+
+      // need to return files uploaded or older-than-retention clean up.
+      return Sets.union(logValue.getCurrentUpLoadedFilesPath(),
+          logValue.getObseleteRetentionLogFiles());
+
