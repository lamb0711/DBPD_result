HDFS-12868. Ozone: Service Discovery API. Contributed by Nanda Kumar.

+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.hadoop.net.NetUtils;
-
-import java.io.IOException;
+import org.apache.hadoop.ozone.ksm.helpers.ServiceInfo;
+import org.apache.hadoop.ozone.protocol.proto
+    .KeySpaceManagerProtocolProtos.ServicePort;
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos;
+import java.io.IOException;
+import java.net.InetSocketAddress;
-import java.util.ArrayList;
-import java.util.Random;
+import java.util.stream.Collectors;
-      int port = conf.getInt(OzoneConfigKeys.OZONE_REST_CLIENT_PORT,
-          OzoneConfigKeys.OZONE_REST_CLIENT_PORT_DEFAULT);
-      URIBuilder uriBuilder = new URIBuilder()
-          .setScheme("http")
-          .setHost(getOzoneRestHandlerHost())
-          .setPort(port);
-      this.ozoneRestUri = uriBuilder.build();
+
-          OzoneConfigKeys.OZONE_REST_CLIENT_HTTP_CONNECTION_PER_ROUTE_MAX_DEFAULT
+          OzoneConfigKeys
+              .OZONE_REST_CLIENT_HTTP_CONNECTION_PER_ROUTE_MAX_DEFAULT
+
+      // TODO: Add new configuration parameter to configure RestServerSelector.
+      RestServerSelector defaultSelector = new DefaultRestServerSelector();
+      InetSocketAddress restServer = getOzoneRestServerAddress(defaultSelector);
+      URIBuilder uriBuilder = new URIBuilder()
+          .setScheme("http")
+          .setHost(restServer.getHostName())
+          .setPort(restServer.getPort());
+      this.ozoneRestUri = uriBuilder.build();
+
-  /**
-   * Returns the REST server host to connect to.
-   *
-   * @return hostname of REST server
-   */
-  private String getOzoneRestHandlerHost() {
-    List<String> servers = new ArrayList<>(conf.getTrimmedStringCollection(
-        OzoneConfigKeys.OZONE_REST_SERVERS));
-    if(servers.isEmpty()) {
-      throw new IllegalArgumentException(OzoneConfigKeys.OZONE_REST_SERVERS +
-          " must be defined. See" +
-          " https://wiki.apache.org/hadoop/Ozone#Configuration for" +
-          " details on configuring Ozone.");
+  private InetSocketAddress getOzoneRestServerAddress(
+      RestServerSelector selector) throws IOException {
+    String httpAddress = conf.get(KSMConfigKeys.OZONE_KSM_HTTP_ADDRESS_KEY);
+
+    if (httpAddress == null) {
+      throw new IllegalArgumentException(
+          KSMConfigKeys.OZONE_KSM_HTTP_ADDRESS_KEY + " must be defined. See" +
+              " https://wiki.apache.org/hadoop/Ozone#Configuration for" +
+              " details on configuring Ozone.");
-    return servers.get(new Random().nextInt(servers.size()));
+
+    HttpGet httpGet = new HttpGet("http://" + httpAddress + "/serviceList");
+    HttpEntity entity = executeHttpRequest(httpGet);
+    try {
+      String serviceListJson = EntityUtils.toString(entity);
+
+      ObjectMapper objectMapper = new ObjectMapper();
+      TypeReference<List<ServiceInfo>> serviceInfoReference =
+          new TypeReference<List<ServiceInfo>>() {
+          };
+      List<ServiceInfo> services = objectMapper.readValue(
+          serviceListJson, serviceInfoReference);
+
+      List<ServiceInfo> dataNodeInfos = services.stream().filter(
+          a -> a.getNodeType().equals(OzoneProtos.NodeType.DATANODE))
+          .collect(Collectors.toList());
+
+      ServiceInfo restServer = selector.getRestServer(dataNodeInfos);
+
+      return NetUtils.createSocketAddr(restServer.getHostname() + ":" +
+          restServer.getPort(ServicePort.Type.HTTP));
+    } finally {
+      EntityUtils.consume(entity);
+    }
