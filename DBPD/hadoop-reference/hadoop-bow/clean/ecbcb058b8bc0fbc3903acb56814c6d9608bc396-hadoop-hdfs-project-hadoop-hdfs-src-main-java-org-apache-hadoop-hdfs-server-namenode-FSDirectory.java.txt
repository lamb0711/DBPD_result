HDFS-14731. [FGL] Remove redundant locking on NameNode. Contributed by Konstantin V Shvachko.
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-  // lock to protect the directory and BlockMap
-  private final ReentrantReadWriteLock dirLock;
-
-  // utility methods to acquire and release read lock and write lock
+  /**
+   * The directory lock dirLock provided redundant locking.
+   * It has been used whenever namesystem.fsLock was used.
+   * dirLock is now removed and utility methods to acquire and release dirLock
+   * remain as placeholders only
+   */
-    this.dirLock.readLock().lock();
+    assert namesystem.hasReadLock() : "Should hold namesystem read lock";
-    this.dirLock.readLock().unlock();
+    assert namesystem.hasReadLock() : "Should hold namesystem read lock";
-    this.dirLock.writeLock().lock();
+    assert namesystem.hasWriteLock() : "Should hold namesystem write lock";
-    this.dirLock.writeLock().unlock();
+    assert namesystem.hasWriteLock() : "Should hold namesystem write lock";
-    return this.dirLock.isWriteLockedByCurrentThread();
+    return namesystem.hasWriteLock();
-    return this.dirLock.getReadHoldCount() > 0 || hasWriteLock();
+    return namesystem.hasReadLock();
+  @Deprecated // dirLock is obsolete, use namesystem.fsLock instead
-    return this.dirLock.getReadHoldCount();
+    return namesystem.getReadHoldCount();
+  @Deprecated // dirLock is obsolete, use namesystem.fsLock instead
-    return this.dirLock.getWriteHoldCount();
+    return namesystem.getWriteHoldCount();
-    this.dirLock = new ReentrantReadWriteLock(true); // fair
-    readLock();
-    try {
-      return inodeMap.get(id);
-    } finally {
-      readUnlock();
-    }
+    return inodeMap.get(id);
