HDDS-1539. Implement addAcl,removeAcl,setAcl,getAcl for Volume. Contributed Ajay Kumar. (#847)



+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclRights;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType;
+import java.util.BitSet;
+@JsonIgnoreProperties(value = {"aclBitSet"})
-  private List<ACLType> rights;
+  private BitSet aclBitSet;
-    this.rights = new ArrayList<>();
-    this.rights.add(acl);
+    this.aclBitSet = new BitSet(ACLType.getNoOfAcls());
+    aclBitSet.set(acl.ordinal(), true);
-  public OzoneAcl(ACLIdentityType type, String name, List<ACLType> acls) {
+  public OzoneAcl(ACLIdentityType type, String name, BitSet acls) {
+    Objects.requireNonNull(type);
+    Objects.requireNonNull(acls);
+
+    if(acls.cardinality() > ACLType.getNoOfAcls()) {
+      throw new IllegalArgumentException("Acl bitset passed has unexpected " +
+          "size. bitset size:" + acls.cardinality() + ", bitset:"
+          + acls.toString());
+    }
+
+    this.aclBitSet = (BitSet) acls.clone();
+    acls.stream().forEach(a -> aclBitSet.set(a));
+
-    this.rights = acls;
-    List<ACLType> acls = new ArrayList<>();
+    BitSet acls = new BitSet(ACLType.getNoOfAcls());
+
-      acls.add(ACLType.getACLRight(String.valueOf(ch)));
+      acls.set(ACLType.getACLRight(String.valueOf(ch)).ordinal());
+  public static OzoneAclInfo toProtobuf(OzoneAcl acl) {
+    OzoneAclInfo.Builder builder = OzoneAclInfo.newBuilder()
+        .setName(acl.getName())
+        .setType(OzoneAclType.valueOf(acl.getType().name()));
+    acl.getAclBitSet().stream().forEach(a ->
+        builder.addRights(OzoneAclRights.valueOf(ACLType.values()[a].name())));
+    return builder.build();
+  }
+
+  public static OzoneAcl fromProtobuf(OzoneAclInfo protoAcl) {
+    BitSet aclRights = new BitSet(ACLType.getNoOfAcls());
+    protoAcl.getRightsList().parallelStream().forEach(a ->
+        aclRights.set(a.ordinal()));
+
+    return new OzoneAcl(ACLIdentityType.valueOf(protoAcl.getType().name()),
+        protoAcl.getName(), aclRights);
+  }
+
-    return type + ":" + name + ":" + ACLType.getACLString(rights);
+    return type + ":" + name + ":" + ACLType.getACLString(aclBitSet);
-    return Objects.hash(this.getName(), this.getRights().toString(),
+    return Objects.hash(this.getName(), this.getAclBitSet(),
-  public List<ACLType> getRights() {
-    return rights;
+  public BitSet getAclBitSet() {
+    return aclBitSet;
+  }
+
+  public List<ACLType> getAclList() {
+    List<ACLType> acls = new ArrayList<>(ACLType.getNoOfAcls());
+    if(aclBitSet !=  null) {
+      aclBitSet.stream().forEach(a -> acls.add(ACLType.values()[a]));
+    }
+    return acls;
-    return otherAcl.toString().equals(this.toString());
-  }
-
-  /**
-   * ACL types.
-   */
-  public enum OzoneACLType {
-    USER(OzoneConsts.OZONE_ACL_USER_TYPE),
-    GROUP(OzoneConsts.OZONE_ACL_GROUP_TYPE),
-    WORLD(OzoneConsts.OZONE_ACL_WORLD_TYPE);
-
-    /**
-     * String value for this Enum.
-     */
-    private final String value;
-
-    /**
-     * Init OzoneACLtypes enum.
-     *
-     * @param val String type for this enum.
-     */
-    OzoneACLType(String val) {
-      value = val;
-    }
+    return otherAcl.getName().equals(this.getName()) &&
+        otherAcl.getType().equals(this.getType()) &&
+        otherAcl.getAclBitSet().equals(this.getAclBitSet());
