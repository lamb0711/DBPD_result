HDDS-2164 : om.db.checkpoints is getting filling up fast. (#1536)


-import java.io.File;
-import java.io.FileInputStream;
+import java.nio.file.Path;
-import org.apache.commons.io.FileUtils;
-import org.apache.hadoop.hdfs.server.namenode.TransferFsImage;
-import org.apache.hadoop.io.IOUtils;
-    FileInputStream checkpointFileInputStream = null;
-    File checkPointTarFile = null;
+    DBCheckpoint checkpoint = null;
-      DBCheckpoint checkpoint = omDbStore.getCheckpoint(flush);
-      if (checkpoint == null) {
+      checkpoint = omDbStore.getCheckpoint(flush);
+      if (checkpoint == null || checkpoint.getCheckpointLocation() == null) {
-      Instant start = Instant.now();
-      checkPointTarFile = OmUtils.createTarFile(
-          checkpoint.getCheckpointLocation());
-      Instant end = Instant.now();
-
-      long duration = Duration.between(start, end).toMillis();
-      LOG.debug("Time taken to archive the checkpoint : " + duration +
-          " milliseconds");
-      LOG.info("Checkpoint Tar location = " +
-          checkPointTarFile.getAbsolutePath());
-      omMetrics.setLastCheckpointTarOperationTimeTaken(duration);
-
+      Path file = checkpoint.getCheckpointLocation().getFileName();
+      if (file == null) {
+        return;
+      }
-              checkPointTarFile.getName() + "\"");
+               file.toString() + ".tgz\"");
-      checkpointFileInputStream = new FileInputStream(checkPointTarFile);
-      start = Instant.now();
-      TransferFsImage.copyFileToStream(response.getOutputStream(),
-          checkPointTarFile,
-          checkpointFileInputStream,
-          throttler);
-      end = Instant.now();
+      Instant start = Instant.now();
+      OmUtils.writeOmDBCheckpointToStream(checkpoint,
+          response.getOutputStream());
+      Instant end = Instant.now();
-      duration = Duration.between(start, end).toMillis();
-      LOG.debug("Time taken to write the checkpoint to response output " +
+      long duration = Duration.between(start, end).toMillis();
+      LOG.info("Time taken to write the checkpoint to response output " +
-      checkpoint.cleanupCheckpoint();
-    } catch (IOException e) {
+    } catch (Exception e) {
-      if (checkPointTarFile != null) {
-        FileUtils.deleteQuietly(checkPointTarFile);
+      if (checkpoint != null) {
+        try {
+          checkpoint.cleanupCheckpoint();
+        } catch (IOException e) {
+          LOG.error("Error trying to clean checkpoint at {} .",
+              checkpoint.getCheckpointLocation().toString());
+        }
-      IOUtils.closeStream(checkpointFileInputStream);
