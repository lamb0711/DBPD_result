HDDS-1856. Make required changes for Non-HA to use new HA code in OM. (#1174)


+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;
-import org.apache.hadoop.ozone.om.response.key.OMKeyCreateResponse;
-      long transactionLogIndex) {
+      long transactionLogIndex,
+      OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper) {
+    IOException exception = null;
+    OmKeyInfo omKeyInfo = null;
+    OMClientResponse omClientResponse = null;
+
+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();
-    } catch (IOException ex) {
-      LOG.error("CommitKey failed for Key: {} in volume/bucket:{}/{}",
-          keyName, bucketName, volumeName, ex);
-      omMetrics.incNumKeyCommitFails();
-      auditLog(auditLogger, buildAuditMessage(OMAction.COMMIT_KEY, auditMap,
-          ex, getOmRequest().getUserInfo()));
-      return new OMKeyCreateResponse(null, -1L,
-          createErrorOMResponse(omResponse, ex));
-    }
-    List<OmKeyLocationInfo> locationInfoList = commitKeyArgs
-        .getKeyLocationsList().stream().map(OmKeyLocationInfo::getFromProtobuf)
-        .collect(Collectors.toList());
+      List<OmKeyLocationInfo> locationInfoList = commitKeyArgs
+          .getKeyLocationsList().stream()
+          .map(OmKeyLocationInfo::getFromProtobuf)
+          .collect(Collectors.toList());
-    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();
-    String dbOzoneKey = omMetadataManager.getOzoneKey(volumeName, bucketName,
-        keyName);
-    String dbOpenKey = omMetadataManager.getOpenKey(volumeName, bucketName,
-        keyName, commitKeyRequest.getClientID());
+      String dbOzoneKey = omMetadataManager.getOzoneKey(volumeName, bucketName,
+          keyName);
+      String dbOpenKey = omMetadataManager.getOpenKey(volumeName, bucketName,
+          keyName, commitKeyRequest.getClientID());
-    omMetadataManager.getLock().acquireLock(BUCKET_LOCK, volumeName,
-        bucketName);
+      omMetadataManager.getLock().acquireLock(BUCKET_LOCK, volumeName,
+          bucketName);
-    IOException exception = null;
-    OmKeyInfo omKeyInfo = null;
-    try {
+      omResponse.setCommitKeyResponse(CommitKeyResponse.newBuilder().build());
+      omClientResponse =
+          new OMKeyCommitResponse(omKeyInfo, commitKeyRequest.getClientID(),
+              omResponse.build());
+      omClientResponse = new OMKeyCommitResponse(null, -1L,
+          createErrorOMResponse(omResponse, exception));
+      if (omClientResponse != null) {
+        omClientResponse.setFlushFuture(
+            ozoneManagerDoubleBufferHelper.add(omClientResponse,
+                transactionLogIndex));
+      }
-
-      return new OMKeyCommitResponse(omKeyInfo, commitKeyRequest.getClientID(),
-          omResponse.build());
+      return omClientResponse;
+      LOG.error("CommitKey failed for Key: {} in volume/bucket:{}/{}",
+          keyName, bucketName, volumeName, exception);
-      return new OMKeyCommitResponse(null, -1L,
-          createErrorOMResponse(omResponse, exception));
+      return omClientResponse;
