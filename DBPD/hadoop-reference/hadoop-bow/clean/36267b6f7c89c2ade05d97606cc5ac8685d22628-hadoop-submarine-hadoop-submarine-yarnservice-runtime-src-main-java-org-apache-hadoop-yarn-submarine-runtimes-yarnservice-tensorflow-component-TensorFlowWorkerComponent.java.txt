SUBMARINE-52. [SUBMARINE-14] Generate Service spec + launch script for single-node PyTorch learning job. Contributed by Szilard Nemeth.

-import org.apache.hadoop.yarn.submarine.client.cli.param.RunJobParameters;
-import org.apache.hadoop.yarn.submarine.common.api.TaskType;
+import org.apache.hadoop.yarn.submarine.client.cli.param.runjob.TensorFlowRunJobParameters;
+import org.apache.hadoop.yarn.submarine.common.api.Role;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.command.LaunchCommandFactory;
+import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.command.TensorFlowLaunchCommandFactory;
-import java.util.Objects;
-import static org.apache.hadoop.yarn.service.conf.YarnServiceConstants.CONTAINER_STATE_REPORT_AS_SERVICE_STATE;
-import static org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.TensorFlowCommons.addCommonEnvironments;
-import static org.apache.hadoop.yarn.submarine.utils.DockerUtilities.getDockerArtifact;
-import static org.apache.hadoop.yarn.submarine.utils.SubmarineResourceUtils.convertYarnResourceToServiceResource;
-      RunJobParameters parameters, TaskType taskType,
-      LaunchCommandFactory launchCommandFactory,
+      TensorFlowRunJobParameters parameters, Role role,
+      TensorFlowLaunchCommandFactory launchCommandFactory,
-    super(fsOperations, remoteDirectoryManager, parameters, taskType,
+    super(fsOperations, remoteDirectoryManager, parameters, role,
-    Objects.requireNonNull(parameters.getWorkerResource(),
-        "Worker resource must not be null!");
-    if (parameters.getNumWorkers() < 1) {
-      throw new IllegalArgumentException(
-          "Number of workers should be at least 1!");
-    }
-
-    Component component = new Component();
-    component.setName(taskType.getComponentName());
-
-    if (taskType.equals(TaskType.PRIMARY_WORKER)) {
-      component.setNumberOfContainers(1L);
-      component.getConfiguration().setProperty(
-          CONTAINER_STATE_REPORT_AS_SERVICE_STATE, "true");
-    } else {
-      component.setNumberOfContainers(
-          (long) parameters.getNumWorkers() - 1);
-    }
-
-    if (parameters.getWorkerDockerImage() != null) {
-      component.setArtifact(
-          getDockerArtifact(parameters.getWorkerDockerImage()));
-    }
-
-    component.setResource(convertYarnResourceToServiceResource(
-            parameters.getWorkerResource()));
-    component.setRestartPolicy(Component.RestartPolicyEnum.NEVER);
-
-    addCommonEnvironments(component, taskType);
-    generateLaunchCommand(component);
-
-    return component;
+    return createComponentInternal();
