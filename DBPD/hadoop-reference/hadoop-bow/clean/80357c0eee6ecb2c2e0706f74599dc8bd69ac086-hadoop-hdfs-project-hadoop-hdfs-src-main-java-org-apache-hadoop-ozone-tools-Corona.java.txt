HDFS-12678. Ozone: Corona: Add statistical information to json output. Contributed by Lokesh Jain.

+import com.codahale.metrics.Histogram;
+import com.codahale.metrics.Snapshot;
+import com.codahale.metrics.UniformReservoir;
-import static java.lang.Math.max;
+  enum CoronaOps {
+    VOLUME_CREATE,
+    BUCKET_CREATE,
+    KEY_CREATE,
+    KEY_WRITE
+  }
+
+  private static final int QUANTILES = 10;
+  private int threadPoolSize;
-  private List<Double> threadThroughput;
+  private ArrayList<Histogram> histograms = new ArrayList<>();
+    for (CoronaOps ops : CoronaOps.values()) {
+      histograms.add(ops.ordinal(), new Histogram(new UniformReservoir()));
+    }
-    threadThroughput = Collections.synchronizedList(new ArrayList<Double>());
-
-    processor = Executors.newFixedThreadPool(Integer.parseInt(numOfThreads));
+    threadPoolSize =
+        min(Integer.parseInt(numOfVolumes), Integer.parseInt(numOfThreads));
+    processor = Executors.newFixedThreadPool(threadPoolSize);
-    int threadCount = Integer.parseInt(numOfThreads);
-
-    String prettyTotalVolumeTime = DurationFormatUtils
-        .formatDuration(TimeUnit.NANOSECONDS.toMillis(volumeCreationTime.get()),
-            DURATION_FORMAT);
-    String prettyTotalBucketTime = DurationFormatUtils
-        .formatDuration(TimeUnit.NANOSECONDS.toMillis(bucketCreationTime.get()),
-            DURATION_FORMAT);
-    String prettyTotalKeyCreationTime = DurationFormatUtils
-        .formatDuration(TimeUnit.NANOSECONDS.toMillis(keyCreationTime.get()),
-            DURATION_FORMAT);
-    String prettyTotalKeyWriteTime = DurationFormatUtils
-        .formatDuration(TimeUnit.NANOSECONDS.toMillis(keyWriteTime.get()),
-            DURATION_FORMAT);
-    long volumeTime =
-        TimeUnit.NANOSECONDS.toMillis(volumeCreationTime.get()) / threadCount;
+    long volumeTime = TimeUnit.NANOSECONDS.toMillis(volumeCreationTime.get())
+        / threadPoolSize;
-    long bucketTime =
-        TimeUnit.NANOSECONDS.toMillis(bucketCreationTime.get()) / threadCount;
+    long bucketTime = TimeUnit.NANOSECONDS.toMillis(bucketCreationTime.get())
+        / threadPoolSize;
-        TimeUnit.NANOSECONDS.toMillis(keyCreationTime.get()) / threadCount;
+        TimeUnit.NANOSECONDS.toMillis(keyCreationTime.get())
+            / threadPoolSize;
-        TimeUnit.NANOSECONDS.toMillis(keyWriteTime.get()) / threadCount;
+        TimeUnit.NANOSECONDS.toMillis(keyWriteTime.get()) / threadPoolSize;
-    out.println("Time spent in volume creation: " + prettyTotalVolumeTime);
-    out.println("Time spent in bucket creation: " + prettyTotalBucketTime);
-    out.println("Time spent in key creation: " + prettyTotalKeyCreationTime);
-    out.println("Time spent in key write: " + prettyTotalKeyWriteTime);
-      CoronaJobInfo jobInfo = new CoronaJobInfo()
-          .setExecTime(execTime)
+
+      String[][] quantileTime =
+          new String[CoronaOps.values().length][QUANTILES + 1];
+      String[] deviations = new String[CoronaOps.values().length];
+      String[] means = new String[CoronaOps.values().length];
+      for (CoronaOps ops : CoronaOps.values()) {
+        Snapshot snapshot = histograms.get(ops.ordinal()).getSnapshot();
+        for (int i = 0; i <= QUANTILES; i++) {
+          quantileTime[ops.ordinal()][i] = DurationFormatUtils.formatDuration(
+              TimeUnit.NANOSECONDS
+                  .toMillis((long) snapshot.getValue((1.0 / QUANTILES) * i)),
+              DURATION_FORMAT);
+        }
+        deviations[ops.ordinal()] = DurationFormatUtils.formatDuration(
+            TimeUnit.NANOSECONDS.toMillis((long) snapshot.getStdDev()),
+            DURATION_FORMAT);
+        means[ops.ordinal()] = DurationFormatUtils.formatDuration(
+            TimeUnit.NANOSECONDS.toMillis((long) snapshot.getMean()),
+            DURATION_FORMAT);
+      }
+
+      CoronaJobInfo jobInfo = new CoronaJobInfo().setExecTime(execTime)
-          .setAverageVolumeCreationTime(prettyAverageVolumeTime)
-          .setAverageBucketCreationTime(prettyAverageBucketTime)
-          .setAverageKeyCreationTime(prettyAverageKeyCreationTime)
-          .setAverageKeyWriteTime(prettyAverageKeyWriteTime)
-          .setTotalVolumeCreationTime(prettyTotalVolumeTime)
-          .setTotalBucketCreationTime(prettyTotalBucketTime)
-          .setTotalKeyCreationTime(prettyTotalKeyCreationTime)
-          .setTotalKeyWriteTime(prettyTotalKeyWriteTime);
+          .setMeanVolumeCreateTime(means[CoronaOps.VOLUME_CREATE.ordinal()])
+          .setDeviationVolumeCreateTime(
+              deviations[CoronaOps.VOLUME_CREATE.ordinal()])
+          .setTenQuantileVolumeCreateTime(
+              quantileTime[CoronaOps.VOLUME_CREATE.ordinal()])
+          .setMeanBucketCreateTime(means[CoronaOps.BUCKET_CREATE.ordinal()])
+          .setDeviationBucketCreateTime(
+              deviations[CoronaOps.BUCKET_CREATE.ordinal()])
+          .setTenQuantileBucketCreateTime(
+              quantileTime[CoronaOps.BUCKET_CREATE.ordinal()])
+          .setMeanKeyCreateTime(means[CoronaOps.KEY_CREATE.ordinal()])
+          .setDeviationKeyCreateTime(deviations[CoronaOps.KEY_CREATE.ordinal()])
+          .setTenQuantileKeyCreateTime(
+              quantileTime[CoronaOps.KEY_CREATE.ordinal()])
+          .setMeanKeyWriteTime(means[CoronaOps.KEY_WRITE.ordinal()])
+          .setDeviationKeyWriteTime(deviations[CoronaOps.KEY_WRITE.ordinal()])
+          .setTenQuantileKeyWriteTime(
+              quantileTime[CoronaOps.KEY_WRITE.ordinal()]);
-    private OzoneVolume volume;
+    private String volumeName;
-    OfflineProcessor(String volumeName) throws Exception {
+    OfflineProcessor(String volumeName) {
-      LOG.trace("Creating volume: {}", volumeName);
-      long start = System.nanoTime();
-      objectStore.createVolume(volumeName);
-      volumeCreationTime.getAndAdd(System.nanoTime() - start);
-      numberOfVolumesCreated.getAndIncrement();
-      volume = objectStore.getVolume(volumeName);
+      this.volumeName = volumeName;
+      LOG.trace("Creating volume: {}", volumeName);
+      long start = System.nanoTime();
+      OzoneVolume volume;
+      try {
+        objectStore.createVolume(volumeName);
+        long volumeCreationDuration = System.nanoTime() - start;
+        volumeCreationTime.getAndAdd(volumeCreationDuration);
+        histograms.get(CoronaOps.VOLUME_CREATE.ordinal())
+            .update(volumeCreationDuration);
+        numberOfVolumesCreated.getAndIncrement();
+        volume = objectStore.getVolume(volumeName);
+      } catch (IOException e) {
+        exception = true;
+        LOG.error("Could not create volume", e);
+        return;
+      }
+
-          long start = System.nanoTime();
+          start = System.nanoTime();
-          bucketCreationTime.getAndAdd(System.nanoTime() - start);
+          long bucketCreationDuration = System.nanoTime() - start;
+          histograms.get(CoronaOps.BUCKET_CREATE.ordinal())
+              .update(bucketCreationDuration);
+          bucketCreationTime.getAndAdd(bucketCreationDuration);
-              keyCreationTime.getAndAdd(System.nanoTime() - keyCreateStart);
+              long keyCreationDuration = System.nanoTime() - keyCreateStart;
+              histograms.get(CoronaOps.KEY_CREATE.ordinal())
+                  .update(keyCreationDuration);
+              keyCreationTime.getAndAdd(keyCreationDuration);
-              threadKeyWriteTime += System.nanoTime() - keyWriteStart;
+              long keyWriteDuration = System.nanoTime() - keyWriteStart;
+              threadKeyWriteTime += keyWriteDuration;
+              histograms.get(CoronaOps.KEY_WRITE.ordinal())
+                  .update(keyWriteDuration);
-      boolean success = threadThroughput.add(
-          (totalBuckets * totalKeys * keySize * 1.0) / TimeUnit.NANOSECONDS
-              .toSeconds(threadKeyWriteTime));
-      if (!success) {
-        LOG.warn("Throughput could not be added for thread id: {}",
-            Thread.currentThread().getId());
-      }
-    private String totalBucketCreationTime;
-    private String totalVolumeCreationTime;
-    private String totalKeyCreationTime;
-    private String totalKeyWriteTime;
-    private String averageBucketCreationTime;
-    private String averageVolumeCreationTime;
-    private String averageKeyCreationTime;
-    private String averageKeyWriteTime;
-    private String[] threadThroughputPerSecond;
-    private String minThreadThroughputPerSecond;
-    private String maxThreadThroughputPerSecond;
+    private String meanVolumeCreateTime;
+    private String deviationVolumeCreateTime;
+    private String[] tenQuantileVolumeCreateTime;
+
+    private String meanBucketCreateTime;
+    private String deviationBucketCreateTime;
+    private String[] tenQuantileBucketCreateTime;
+
+    private String meanKeyCreateTime;
+    private String deviationKeyCreateTime;
+    private String[] tenQuantileKeyCreateTime;
+
+    private String meanKeyWriteTime;
+    private String deviationKeyWriteTime;
+    private String[] tenQuantileKeyWriteTime;
+
-
-      threadThroughputPerSecond = new String[Integer.parseInt(numOfThreads)];
-      double minThreadThroughput = Double.MAX_VALUE, maxThreadThroughput = 0.0,
-          totalThroughput = 0.0;
-      int i = 0;
-      for (Double throughput : Corona.this.threadThroughput) {
-        minThreadThroughput = min(throughput, minThreadThroughput);
-        maxThreadThroughput = max(throughput, maxThreadThroughput);
-        totalThroughput += throughput;
-        threadThroughputPerSecond[i++] = getInStorageUnits(throughput);
-      }
-      minThreadThroughputPerSecond = getInStorageUnits(minThreadThroughput);
-      maxThreadThroughputPerSecond = getInStorageUnits(maxThreadThroughput);
-      totalThroughputPerSecond = getInStorageUnits(totalThroughput);
+      this.totalThroughputPerSecond = getInStorageUnits(
+          (totalBytes * 1.0) / TimeUnit.NANOSECONDS
+              .toSeconds(Corona.this.keyWriteTime.get() / threadPoolSize));
-      if ((long) (value / OzoneConsts.KB) == 0) {
-        size = value / OzoneConsts.KB;
-        unit = OzoneQuota.Units.KB;
-      } else if ((long) (value / OzoneConsts.MB) == 0) {
-        size = value / OzoneConsts.MB;
-        unit = OzoneQuota.Units.MB;
-      } else if ((long) (value / OzoneConsts.GB) == 0) {
-        size = value / OzoneConsts.GB;
-        unit = OzoneQuota.Units.GB;
-      } else if ((long) (value / OzoneConsts.TB) == 0) {
+      if ((long) (value / OzoneConsts.TB) != 0) {
+      } else if ((long) (value / OzoneConsts.GB) != 0) {
+        size = value / OzoneConsts.GB;
+        unit = OzoneQuota.Units.GB;
+      } else if ((long) (value / OzoneConsts.MB) != 0) {
+        size = value / OzoneConsts.MB;
+        unit = OzoneQuota.Units.MB;
+      } else if ((long) (value / OzoneConsts.KB) != 0) {
+        size = value / OzoneConsts.KB;
+        unit = OzoneQuota.Units.KB;
-    public CoronaJobInfo setTotalBucketCreationTime(
-        String totalBucketCreationTimeVal) {
-      totalBucketCreationTime = totalBucketCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setTotalVolumeCreationTime(
-        String totalVolumeCreationTimeVal) {
-      totalVolumeCreationTime = totalVolumeCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setTotalKeyCreationTime(
-        String totalKeyCreationTimeVal) {
-      totalKeyCreationTime = totalKeyCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setTotalKeyWriteTime(String totalKeyWriteTimeVal) {
-      totalKeyWriteTime = totalKeyWriteTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setAverageBucketCreationTime(
-        String averageBucketCreationTimeVal) {
-      averageBucketCreationTime = averageBucketCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setAverageVolumeCreationTime(
-        String averageVolumeCreationTimeVal) {
-      averageVolumeCreationTime = averageVolumeCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setAverageKeyCreationTime(
-        String averageKeyCreationTimeVal) {
-      averageKeyCreationTime = averageKeyCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setAverageKeyWriteTime(
-        String averageKeyWriteTimeVal) {
-      averageKeyWriteTime = averageKeyWriteTimeVal;
-      return this;
-    }
-
+    public CoronaJobInfo setMeanKeyWriteTime(String deviationKeyWriteTimeVal) {
+      this.meanKeyWriteTime = deviationKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setDeviationKeyWriteTime(
+        String deviationKeyWriteTimeVal) {
+      this.deviationKeyWriteTime = deviationKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTenQuantileKeyWriteTime(
+        String[] tenQuantileKeyWriteTimeVal) {
+      this.tenQuantileKeyWriteTime = tenQuantileKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setMeanKeyCreateTime(String deviationKeyWriteTimeVal) {
+      this.meanKeyCreateTime = deviationKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setDeviationKeyCreateTime(
+        String deviationKeyCreateTimeVal) {
+      this.deviationKeyCreateTime = deviationKeyCreateTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTenQuantileKeyCreateTime(
+        String[] tenQuantileKeyCreateTimeVal) {
+      this.tenQuantileKeyCreateTime = tenQuantileKeyCreateTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setMeanBucketCreateTime(
+        String deviationKeyWriteTimeVal) {
+      this.meanBucketCreateTime = deviationKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setDeviationBucketCreateTime(
+        String deviationBucketCreateTimeVal) {
+      this.deviationBucketCreateTime = deviationBucketCreateTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTenQuantileBucketCreateTime(
+        String[] tenQuantileBucketCreateTimeVal) {
+      this.tenQuantileBucketCreateTime = tenQuantileBucketCreateTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setMeanVolumeCreateTime(
+        String deviationKeyWriteTimeVal) {
+      this.meanVolumeCreateTime = deviationKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setDeviationVolumeCreateTime(
+        String deviationVolumeCreateTimeVal) {
+      this.deviationVolumeCreateTime = deviationVolumeCreateTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTenQuantileVolumeCreateTime(
+        String[] tenQuantileVolumeCreateTimeVal) {
+      this.tenQuantileVolumeCreateTime = tenQuantileVolumeCreateTimeVal;
+      return this;
+    }
+
-    public String getTotalBucketCreationTime() {
-      return totalBucketCreationTime;
-    }
-
-    public String getTotalVolumeCreationTime() {
-      return totalVolumeCreationTime;
-    }
-
-    public String getTotalKeyCreationTime() {
-      return totalKeyCreationTime;
-    }
-
-    public String getAverageBucketCreationTime() {
-      return averageBucketCreationTime;
-    }
-
-    public String getTotalKeyWriteTime() {
-      return totalKeyWriteTime;
-    }
-
-    public String getAverageKeyWriteTime() {
-      return averageKeyWriteTime;
-    }
-
-    public String getAverageVolumeCreationTime() {
-      return averageVolumeCreationTime;
-    }
-
-    public String getAverageKeyCreationTime() {
-      return averageKeyCreationTime;
-    }
-
-    public String getMinThreadThroughputPerSecond() {
-      return minThreadThroughputPerSecond;
-    }
-
-    public String getMaxThreadThroughputPerSecond() {
-      return maxThreadThroughputPerSecond;
-    }
-
-    public String getTotalThroughput() {
+    public String getTotalThroughputPerSecond() {
+    public String getMeanVolumeCreateTime() {
+      return meanVolumeCreateTime;
+    }
+
+    public String getDeviationVolumeCreateTime() {
+      return deviationVolumeCreateTime;
+    }
+
+    public String[] getTenQuantileVolumeCreateTime() {
+      return tenQuantileVolumeCreateTime;
+    }
+
+    public String getMeanBucketCreateTime() {
+      return meanBucketCreateTime;
+    }
+
+    public String getDeviationBucketCreateTime() {
+      return deviationBucketCreateTime;
+    }
+
+    public String[] getTenQuantileBucketCreateTime() {
+      return tenQuantileBucketCreateTime;
+    }
+
+    public String getMeanKeyCreateTime() {
+      return meanKeyCreateTime;
+    }
+
+    public String getDeviationKeyCreateTime() {
+      return deviationKeyCreateTime;
+    }
+
+    public String[] getTenQuantileKeyCreateTime() {
+      return tenQuantileKeyCreateTime;
+    }
+
+    public String getMeanKeyWriteTime() {
+      return meanKeyWriteTime;
+    }
+
+    public String getDeviationKeyWriteTime() {
+      return deviationKeyWriteTime;
+    }
+
+    public String[] getTenQuantileKeyWriteTime() {
+      return tenQuantileKeyWriteTime;
+    }
