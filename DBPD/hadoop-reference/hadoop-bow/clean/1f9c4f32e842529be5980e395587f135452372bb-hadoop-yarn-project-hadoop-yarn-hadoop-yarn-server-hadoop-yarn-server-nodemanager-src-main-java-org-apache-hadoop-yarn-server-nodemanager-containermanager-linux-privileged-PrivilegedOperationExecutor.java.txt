YARN-8776. Implement Container Exec feature in LinuxContainerExecutor. Contributed by Eric Yang

-import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import java.io.OutputStream;
+import java.io.InputStream;
+  /**
+   *
+   * @param prefixCommands
+   * @param operation
+   * @return stdin and stdout of container exec
+   * @throws PrivilegedOperationException
+   */
+  public IOStreamPair executePrivilegedInteractiveOperation(
+      List<String> prefixCommands, PrivilegedOperation operation)
+      throws PrivilegedOperationException, InterruptedException {
+    String[] fullCommandArray = getPrivilegedOperationExecutionCommand(
+        prefixCommands, operation);
+    ProcessBuilder pb = new ProcessBuilder(fullCommandArray);
+    OutputStream stdin;
+    InputStream stdout;
+    try {
+      pb.redirectErrorStream(true);
+      Process p = pb.start();
+      stdin = p.getOutputStream();
+      stdout = p.getInputStream();
+
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("command array:");
+        LOG.debug(Arrays.toString(fullCommandArray));
+      }
+    } catch (ExitCodeException e) {
+      if (operation.isFailureLoggingEnabled()) {
+        StringBuilder logBuilder = new StringBuilder(
+            "Interactive Shell execution returned exit code: ")
+            .append(e.getExitCode())
+            .append(". Privileged Interactive Operation Stderr: ")
+            .append(System.lineSeparator())
+            .append(e.getMessage())
+            .append(System.lineSeparator());
+        logBuilder.append("Full command array for failed execution: ")
+            .append(System.lineSeparator());
+        logBuilder.append(Arrays.toString(fullCommandArray));
+
+        LOG.warn(logBuilder.toString());
+      }
+
+      //stderr from shell executor seems to be stuffed into the exception
+      //'message' - so, we have to extract it and set it as the error out
+      throw new PrivilegedOperationException(e, e.getExitCode(),
+          pb.redirectError().toString(), e.getMessage());
+    } catch (IOException e) {
+      LOG.warn("IOException executing command: ", e);
+      throw new PrivilegedOperationException(e);
+    }
+
+    return new IOStreamPair(stdout, stdin);
+  }
+
