HDFS-10236. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-3]. Contributed by Rakesh R.

-   * meets the minimum replication requirement
+   * meets the minimum redundancy requirement
-        replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));
+        replicas.decommissionedAndDecommissioning(), getRedundancy(lastBlock));
-    short expectedReplicas =
-        getExpectedReplicaNum(b.getStored());
+    short expectedRedundancies =
+        getExpectedRedundancyNum(b.getStored());
-        expectedReplicas;
+        expectedRedundancies;
-        expectedReplicas;
+        expectedRedundancies;
-    short requiredReplication = getExpectedReplicaNum(block);
+    short requiredRedundancy = getExpectedRedundancyNum(block);
-        requiredReplication)) {
+        requiredRedundancy)) {
-    if (numReplicas.liveReplicas() < requiredReplication) {
-      additionalReplRequired = requiredReplication - numReplicas.liveReplicas()
+    if (numReplicas.liveReplicas() < requiredRedundancy) {
+      additionalReplRequired = requiredRedundancy - numReplicas.liveReplicas()
-    final short requiredReplication = getExpectedReplicaNum(block);
+    final short requiredRedundancy = getExpectedRedundancyNum(block);
-        requiredReplication)) {
+        requiredRedundancy)) {
-    if ( (numReplicas.liveReplicas() >= requiredReplication) &&
+    if ((numReplicas.liveReplicas() >= requiredRedundancy) &&
-    if(numEffectiveReplicas + targets.length >= requiredReplication) {
+    if(numEffectiveReplicas + targets.length >= requiredRedundancy) {
-                getReplication(bi));
+                getRedundancy(bi));
-    short fileReplication = getExpectedReplicaNum(storedBlock);
+    short fileRedundancy = getExpectedRedundancyNum(storedBlock);
-          num.decommissionedAndDecommissioning(), fileReplication);
+          num.decommissionedAndDecommissioning(), fileRedundancy);
-    if (shouldProcessExtraRedundancy(num, fileReplication)) {
-      processExtraRedundancyBlock(storedBlock, fileReplication, node,
+    if (shouldProcessExtraRedundancy(num, fileRedundancy)) {
+      processExtraRedundancyBlock(storedBlock, fileRedundancy, node,
-    if ((corruptReplicasCount > 0) && (numLiveReplicas >= fileReplication)) {
+    if ((corruptReplicasCount > 0) && (numLiveReplicas >= fileRedundancy)) {
-    // calculate current replication
-    short expectedReplication = getExpectedReplicaNum(block);
+    // calculate current redundancy
+    short expectedRedundancy = getExpectedRedundancyNum(block);
-          expectedReplication)) {
+          expectedRedundancy)) {
-    if (shouldProcessExtraRedundancy(num, expectedReplication)) {
+    if (shouldProcessExtraRedundancy(num, expectedRedundancy)) {
-      processExtraRedundancyBlock(block, expectedReplication, null, null);
+      processExtraRedundancyBlock(block, expectedRedundancy, null, null);
-      int expectedReplication = this.getReplication(block);
+      int expectedReplication = this.getRedundancy(block);
-      int curExpectedReplicas = getReplication(block);
+      int curExpectedReplicas = getRedundancy(block);
-  public void checkReplication(BlockCollection bc) {
+  public void checkRedundancy(BlockCollection bc) {
-      short expected = getExpectedReplicaNum(block);
+      short expected = getExpectedRedundancyNum(block);
-  private int getReplication(BlockInfo block) {
-    return getExpectedReplicaNum(block);
+  private int getRedundancy(BlockInfo block) {
+    return getExpectedRedundancyNum(block);
-   * A block needs reconstruction if the number of replicas is less than
+   * A block needs reconstruction if the number of redundancies is less than
-    int expected = getExpectedReplicaNum(storedBlock);
+    int expected = getExpectedRedundancyNum(storedBlock);
-  public short getExpectedReplicaNum(BlockInfo block) {
+  public short getExpectedRedundancyNum(BlockInfo block) {
