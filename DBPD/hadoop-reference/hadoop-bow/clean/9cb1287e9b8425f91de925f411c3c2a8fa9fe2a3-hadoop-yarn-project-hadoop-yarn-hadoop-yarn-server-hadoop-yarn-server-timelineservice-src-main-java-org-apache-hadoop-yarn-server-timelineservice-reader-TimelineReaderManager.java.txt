YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)

-import java.util.EnumSet;
-import java.util.Map;
-import org.apache.hadoop.yarn.server.timelineservice.storage.TimelineReader.Field;
-  public Set<TimelineEntity> getEntities(String userId, String clusterId,
-      String flowName, Long flowRunId, String appId, String entityType,
-      Long limit, Long createdTimeBegin, Long createdTimeEnd,
-      Map<String, Set<String>> relatesTo, Map<String, Set<String>> isRelatedTo,
-      Map<String, Object> infoFilters, Map<String, String> configFilters,
-      Set<String>  metricFilters, Set<String> eventFilters,
-      EnumSet<Field> fieldsToRetrieve) throws IOException {
-    String cluster = getClusterID(clusterId, getConfig());
-    Set<TimelineEntity> entities =
-        reader.getEntities(userId, cluster, flowName, flowRunId, appId,
-        entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,
-        isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,
-        null, null, fieldsToRetrieve);
+  public Set<TimelineEntity> getEntities(TimelineReaderContext context,
+      TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve)
+      throws IOException {
+    context.setClusterId(getClusterID(context.getClusterId(), getConfig()));
+    Set<TimelineEntity> entities = reader.getEntities(
+        new TimelineReaderContext(context), filters, dataToRetrieve);
-      TimelineEntityType type = getTimelineEntityType(entityType);
-      TimelineReaderContext context = new TimelineReaderContext(cluster, userId,
-          flowName, flowRunId, appId, entityType, null);
+      TimelineEntityType type = getTimelineEntityType(context.getEntityType());
-  public TimelineEntity getEntity(String userId, String clusterId,
-      String flowName, Long flowRunId, String appId, String entityType,
-      String entityId, EnumSet<Field> fields) throws IOException {
-    String cluster = getClusterID(clusterId, getConfig());
-    TimelineEntity entity =
-        reader.getEntity(userId, cluster, flowName, flowRunId, appId,
-        entityType, entityId, null, null, fields);
-
+  public TimelineEntity getEntity(TimelineReaderContext context,
+      TimelineDataToRetrieve dataToRetrieve) throws IOException {
+    context.setClusterId(
+        getClusterID(context.getClusterId(), getConfig()));
+    TimelineEntity entity = reader.getEntity(
+        new TimelineReaderContext(context), dataToRetrieve);
-      TimelineEntityType type = getTimelineEntityType(entityType);
-      TimelineReaderContext context = new TimelineReaderContext(cluster, userId,
-          flowName, flowRunId, appId, entityType, null);
+      TimelineEntityType type = getTimelineEntityType(context.getEntityType());
