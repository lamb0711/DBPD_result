HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520665 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.BatchedRemoteIterator.BatchedListEntries;
-    final FSPermissionChecker pc = getPermissionChecker();
+    final FSPermissionChecker pc = isPermissionEnabled ?
+        getPermissionChecker() : null;
+    checkOperation(OperationCategory.WRITE);
-      results = cacheManager.addDirectives(pc, directives);
+      results = cacheManager.addDirectives(directives, pc);
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-  List<Fallible<Long>> removePathCacheEntries(List<Long> ids)
-      throws IOException {
-    final FSPermissionChecker pc = getPermissionChecker();
+  List<Fallible<Long>> removePathCacheEntries(List<Long> ids) throws IOException {
+    CacheEntryWithPayload retryCacheEntry =
+        RetryCache.waitForCompletion(retryCache, null);
+    if (retryCacheEntry != null && retryCacheEntry.isSuccess()) {
+      return (List<Fallible<Long>>) retryCacheEntry.getPayload();
+    }
+    final FSPermissionChecker pc = isPermissionEnabled ?
+        getPermissionChecker() : null;
+    checkOperation(OperationCategory.WRITE);
-            "Cannot add path cache directive", safeMode);
+            "Cannot remove path cache directives", safeMode);
-      results = cacheManager.removeEntries(pc, ids);
+      results = cacheManager.removeEntries(ids, pc);
-      if (success) {
-        getEditLog().logSync();
-      }
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
+      RetryCache.setState(retryCacheEntry, success, results);
+    }
+    getEditLog().logSync();
+    return results;
+  }
+
+  BatchedListEntries<PathCacheEntry> listPathCacheEntries(long startId,
+      String pool) throws IOException {
+    final FSPermissionChecker pc = isPermissionEnabled ?
+        getPermissionChecker() : null;
+    BatchedListEntries<PathCacheEntry> results;
+    checkOperation(OperationCategory.READ);
+    readLock();
+    boolean success = false;
+    try {
+      checkOperation(OperationCategory.READ);
+      results = cacheManager.listPathCacheEntries(startId, pool, pc);
+      success = true;
+    } finally {
+      readUnlock();
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "listPathCacheEntries", null, null, null);
+      }
-  List<PathCacheEntry> listPathCacheEntries(long startId,
-      Long poolId, int maxReplies) throws IOException {
-    LOG.info("listPathCacheEntries with " + startId + " " + poolId);
-    final FSPermissionChecker pc = getPermissionChecker();
-    return cacheManager.listPathCacheEntries(pc, startId, poolId, maxReplies);
-  }
-
-  public CachePool addCachePool(CachePoolInfo req) throws IOException {
-    final FSPermissionChecker pc = getPermissionChecker();
-    CacheEntryWithPayload cacheEntry =
-        RetryCache.waitForCompletion(retryCache, null);
-    if (cacheEntry != null && cacheEntry.isSuccess()) {
-      return (CachePool)cacheEntry.getPayload(); // Return previous response
-    }
-    writeLock();
-    CachePool pool = null;
-    try {
-      checkOperation(OperationCategory.WRITE);
-      if (!pc.isSuperUser()) {
-        throw new AccessControlException("Non-super users cannot " +
-            "add cache pools.");
-      }
-      if (isInSafeMode()) {
-        throw new SafeModeException(
-            "Cannot add cache pool " + req.getPoolName(), safeMode);
-      }
-      pool = cacheManager.addCachePool(req);
-      RetryCache.setState(cacheEntry, true);
-      //getEditLog().logAddCachePool(req); // FIXME: HDFS-5119
-    } finally {
-      writeUnlock();
-    }
-
-    getEditLog().logSync();
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "addCachePool", req.getPoolName(), null, null);
-    }
-    return pool;
-  }
-
-  public void modifyCachePool(long poolId, CachePoolInfo info)
-      throws IOException {
-    final FSPermissionChecker pc = getPermissionChecker();
+  public void addCachePool(CachePoolInfo req) throws IOException {
+    final FSPermissionChecker pc = isPermissionEnabled ?
+        getPermissionChecker() : null;
+    checkOperation(OperationCategory.WRITE);
+    boolean success = false;
-      if (!pc.isSuperUser()) {
-        throw new AccessControlException("Non-super users cannot " +
-            "modify cache pools.");
-      }
-            "Cannot modify cache pool " + info.getPoolName(), safeMode);
+            "Cannot add cache pool " + req.getPoolName(), safeMode);
-      cacheManager.modifyCachePool(poolId, info);
-      RetryCache.setState(cacheEntry, true);
+      if (pc != null) {
+        pc.checkSuperuserPrivilege();
+      }
+      cacheManager.addCachePool(req);
+      //getEditLog().logAddCachePool(req); // FIXME: HDFS-5119
+      success = true;
+    } finally {
+      writeUnlock();
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "addCachePool", req.getPoolName(), null, null);
+      }
+      RetryCache.setState(cacheEntry, success);
+    }
+    
+    getEditLog().logSync();
+  }
+
+  public void modifyCachePool(CachePoolInfo req) throws IOException {
+    final FSPermissionChecker pc =
+        isPermissionEnabled ? getPermissionChecker() : null;
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    checkOperation(OperationCategory.WRITE);
+    writeLock();
+    boolean success = false;
+    try {
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException(
+            "Cannot modify cache pool " + req.getPoolName(), safeMode);
+      }
+      if (pc != null) {
+        pc.checkSuperuserPrivilege();
+      }
+      cacheManager.modifyCachePool(req);
+      success = true;
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "modifyCachePool", req.getPoolName(), null, null);
+      }
+      RetryCache.setState(cacheEntry, success);
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "modifyCachePool", info.getPoolName(), null, null);
-    }
-  public void removeCachePool(long poolId) throws IOException {
-    final FSPermissionChecker pc = getPermissionChecker();
+  public void removeCachePool(String cachePoolName) throws IOException {
+    final FSPermissionChecker pc =
+        isPermissionEnabled ? getPermissionChecker() : null;
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    checkOperation(OperationCategory.WRITE);
-    CachePool pool;
+    boolean success = false;
-      if (!pc.isSuperUser()) {
-        throw new AccessControlException("Non-super users cannot " +
-            "remove cache pools.");
-      }
-      pool = cacheManager.getCachePool(poolId);
-        String identifier;
-        if (pool == null) {
-          identifier = "with id " + Long.toString(poolId);
-        } else {
-          identifier = pool.getInfo().getPoolName();
-        }
-            "Cannot remove cache pool " + identifier, safeMode);
+            "Cannot remove cache pool " + cachePoolName, safeMode);
-      cacheManager.removeCachePool(poolId);
+      if (pc != null) {
+        pc.checkSuperuserPrivilege();
+      }
+      cacheManager.removeCachePool(cachePoolName);
+      success = true;
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "removeCachePool", cachePoolName, null, null);
+      }
+      RetryCache.setState(cacheEntry, success);
-
+    
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "removeCachePool", pool.getInfo().getPoolName(),
-          null, null);
-    }
-  public List<CachePool> listCachePools(long prevKey,
-      int maxRepliesPerRequest) throws IOException {
-    List<CachePool> results;
+  public BatchedListEntries<CachePoolInfo> listCachePools(String prevKey)
+      throws IOException {
+    final FSPermissionChecker pc =
+        isPermissionEnabled ? getPermissionChecker() : null;
+    BatchedListEntries<CachePoolInfo> results;
+    checkOperation(OperationCategory.READ);
+    boolean success = false;
-      results = cacheManager.listCachePools(prevKey, maxRepliesPerRequest);
+      results = cacheManager.listCachePools(pc, prevKey);
+      success = true;
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "listCachePools", null, null, null);
+      }
