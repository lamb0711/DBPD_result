HADOOP-15358. SFTPConnectionPool connections leakage. Contributed by Mikhail Pryakhin.

+import com.google.common.annotations.VisibleForTesting;
-          root.makeQualified(this.getUri(), this.getWorkingDirectory()));
+          root.makeQualified(this.getUri(), this.getWorkingDirectory(client)));
-            this.getUri(), this.getWorkingDirectory()));
+            this.getUri(), this.getWorkingDirectory(channel)));
-
-    FSDataInputStream fis =
-        new FSDataInputStream(new SFTPInputStream(is, channel, statistics));
-    return fis;
+    return new FSDataInputStream(new SFTPInputStream(is, statistics)){
+      @Override
+      public void close() throws IOException {
+        super.close();
+        disconnect(channel);
+      }
+    };
+  /**
+   * Convenience method, so that we don't open a new connection when using this
+   * method from within another method. Otherwise every API invocation incurs
+   * the overhead of opening/closing a TCP connection.
+   */
+  private Path getWorkingDirectory(ChannelSftp client) {
+    // Return home directory always since we do not maintain state.
+    return getHomeDirectory(client);
+  }
+
+  /**
+   * Convenience method, so that we don't open a new connection when using this
+   * method from within another method. Otherwise every API invocation incurs
+   * the overhead of opening/closing a TCP connection.
+   */
+  private Path getHomeDirectory(ChannelSftp channel) {
+    try {
+      return new Path(channel.pwd());
+    } catch (Exception ioe) {
+      return null;
+    }
+  }
+
+
+  @VisibleForTesting
+  SFTPConnectionPool getConnectionPool() {
+    return connectionPool;
+  }
