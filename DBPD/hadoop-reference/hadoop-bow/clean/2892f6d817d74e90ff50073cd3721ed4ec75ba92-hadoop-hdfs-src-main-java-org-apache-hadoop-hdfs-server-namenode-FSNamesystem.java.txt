HDFS-2266.  Add Namesystem and SafeMode interfaces to avoid directly referring to FSNamesystem in BlockManager.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160493 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.util.RwLock;
-public class FSNamesystem implements RwLock, FSClusterStats,
+public class FSNamesystem implements Namesystem, FSClusterStats,
-  /** Is this name system running? */
+  @Override
-        LocatedBlock lb = 
-          blockManager.convertLastBlockToUnderConstruction(cons);
-
-        if (lb != null) {
-          blockManager.setBlockToken(lb, AccessMode.WRITE);
-        }
-        return lb;
+        return blockManager.convertLastBlockToUnderConstruction(cons);
-      blockManager.commitOrCompleteLastBlock(pendingFile, ExtendedBlock
-          .getLocalBlock(previous));
+      commitOrCompleteLastBlock(pendingFile, ExtendedBlock.getLocalBlock(previous));
-    blockManager.commitOrCompleteLastBlock(pendingFile, last);
+    commitOrCompleteLastBlock(pendingFile, last);
-  /** Update disk space consumed. */
-  public void updateDiskSpaceConsumed(final INodeFileUnderConstruction fileINode,
+  private void commitOrCompleteLastBlock(final INodeFileUnderConstruction fileINode,
+    if (!blockManager.commitOrCompleteLastBlock(fileINode, commitBlock)) {
+      return;
+    }
-        blockManager.commitOrCompleteLastBlock(pendingFile, storedBlock);
+        commitOrCompleteLastBlock(pendingFile, storedBlock);
-    SafeModeInfo(Configuration conf) {
+    private SafeModeInfo(Configuration conf) {
-    synchronized boolean isOn() {
+    private synchronized boolean isOn() {
-    synchronized boolean isPopulatingReplQueues() {
+    private synchronized boolean isPopulatingReplQueues() {
-    void enter() {
+    private void enter() {
-    synchronized void leave(boolean checkForUpgrades) {
+    private synchronized void leave(boolean checkForUpgrades) {
-    synchronized void initializeReplQueues() {
+    private synchronized void initializeReplQueues() {
-    synchronized boolean canInitializeReplQueues() {
+    private synchronized boolean canInitializeReplQueues() {
-    synchronized boolean canLeave() {
+    private synchronized boolean canLeave() {
-    boolean needEnter() {
+    private boolean needEnter() {
-    synchronized void setBlockTotal(int total) {
+    private synchronized void setBlockTotal(int total) {
-    synchronized void incrementSafeBlockCount(short replication) {
+    private synchronized void incrementSafeBlockCount(short replication) {
-    synchronized void decrementSafeBlockCount(short replication) {
+    private synchronized void decrementSafeBlockCount(short replication) {
-    boolean isManual() {
+    private boolean isManual() {
-    synchronized void setManual() {
+    private synchronized void setManual() {
-    boolean areResourcesLow() {
+    private boolean areResourcesLow() {
-    void setResourcesLow() {
+    private void setResourcesLow() {
-    /**
-     * Returns printable state of the class.
-     */
+    @Override
-    boolean isConsistent() throws IOException {
+    private boolean isConsistent() throws IOException {
-  /** Check and trigger safe mode. */
+  @Override
-  /**
-   * Check whether the name node is in safe mode.
-   * @return true if safe mode is ON, false otherwise
-   */
+  @Override
-  
-  /**
-   * Check whether the name node is in startup mode.
-   */
+
+  @Override
-  /**
-   * Check whether replication queues are populated.
-   */
+  @Override
-  /**
-   * Increment number of blocks that reached minimal replication.
-   * @param replication current replication 
-   */
+  @Override
-  /**
-   * Decrement number of blocks that reached minimal replication.
-   */
+  @Override
-  public long getTransactionID() {
-    return getEditLog().getSyncTxId();
-  }
-
-  /** Check if the user has superuser privilege. */
+  @Override
-  public int numCorruptReplicas(Block blk) {
-    return blockManager.numCorruptReplicas(blk);
-  }
-
