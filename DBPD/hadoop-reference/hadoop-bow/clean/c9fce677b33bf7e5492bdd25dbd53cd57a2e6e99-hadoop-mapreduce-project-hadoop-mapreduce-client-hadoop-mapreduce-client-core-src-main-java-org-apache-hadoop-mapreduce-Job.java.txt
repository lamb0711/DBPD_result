MAPREDUCE-5304. mapreduce.Job killTask/failTask/getTaskCompletionEvents methods have incompatible signature changes. (kkambatl via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492360 13f79535-47bb-0310-9956-ffa450edef68

-   * @return an array of {@link TaskCompletionEvent}s
+   * @return an array of {@link org.apache.hadoop.mapred.TaskCompletionEvent}s
-  public TaskCompletionEvent[] getTaskCompletionEvents(final int startFrom) 
-      throws IOException {
+  public org.apache.hadoop.mapred.TaskCompletionEvent[]
+    getTaskCompletionEvents(final int startFrom) throws IOException {
-      return getTaskCompletionEvents(startFrom, 10);
+      TaskCompletionEvent[] events = getTaskCompletionEvents(startFrom, 10);
+      org.apache.hadoop.mapred.TaskCompletionEvent[] retEvents =
+          new org.apache.hadoop.mapred.TaskCompletionEvent[events.length];
+      for (int i = 0; i < events.length; i++) {
+        retEvents[i] = org.apache.hadoop.mapred.TaskCompletionEvent.downgrade
+            (events[i]);
+      }
+      return retEvents;
+   * @param taskId the id of the task to kill.
+   * @param shouldFail if <code>true</code> the task is failed and added
+   *                   to failed tasks list, otherwise it is just killed,
+   *                   w/o affecting job failure status.
+   */
+  @Private
+  public boolean killTask(final TaskAttemptID taskId,
+                          final boolean shouldFail) throws IOException {
+    ensureState(JobState.RUNNING);
+    try {
+      return ugi.doAs(new PrivilegedExceptionAction<Boolean>() {
+        public Boolean run() throws IOException, InterruptedException {
+          return cluster.getClient().killTask(taskId, shouldFail);
+        }
+      });
+    }
+    catch (InterruptedException ie) {
+      throw new IOException(ie);
+    }
+  }
+
+  /**
+   * Kill indicated task attempt.
-  public boolean killTask(final TaskAttemptID taskId) 
+  public void killTask(final TaskAttemptID taskId)
-    ensureState(JobState.RUNNING);
-    try {
-      return ugi.doAs(new PrivilegedExceptionAction<Boolean>() {
-        public Boolean run() throws IOException, InterruptedException {
-          return cluster.getClient().killTask(taskId, false);
-        }
-      });
-    }
-    catch (InterruptedException ie) {
-      throw new IOException(ie);
-    }
+    killTask(taskId, false);
-  public boolean failTask(final TaskAttemptID taskId) 
+  public void failTask(final TaskAttemptID taskId)
-    ensureState(JobState.RUNNING);
-    try {
-      return ugi.doAs(new PrivilegedExceptionAction<Boolean>() {
-        @Override
-        public Boolean run() throws IOException, InterruptedException {
-          return cluster.getClient().killTask(taskId, true);
-        }
-      });
-    }
-    catch (InterruptedException ie) {
-      throw new IOException(ie);
-    }
+    killTask(taskId, true);
