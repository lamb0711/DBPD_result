YARN-1314. Fixed DistributedShell to not fail with multiple arguments for a shell command separated by spaces. Contributed by Xuan Gong.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545486 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.cli.Option;
+import org.apache.commons.lang.StringUtils;
-  private String shellArgs = "";
+  private String[] shellArgs = new String[] {};
+  private final String shellArgsPath = "shellArgs";
+  private final String appMasterJarPath = "AppMaster.jar";
-    opts.addOption("shell_args", true, "Command line args for the shell script");
+    opts.addOption("shell_args", true, "Command line args for the shell script." +
+        "Multiple args can be separated by empty space.");
+    opts.getOption("shell_args").setArgs(Option.UNLIMITED_VALUES);
-      shellArgs = cliParser.getOptionValue("shell_args");
+      shellArgs = cliParser.getOptionValues("shell_args");
-    Path src = new Path(appMasterJar);
-    String pathSuffix = appName + "/" + appId.getId() + "/AppMaster.jar";	    
-    Path dst = new Path(fs.getHomeDirectory(), pathSuffix);
-    fs.copyFromLocalFile(false, true, src, dst);
-    FileStatus destStatus = fs.getFileStatus(dst);
-    LocalResource amJarRsrc = Records.newRecord(LocalResource.class);
-
-    // Set the type of resource - file or archive
-    // archives are untarred at destination
-    // we don't need the jar file to be untarred for now
-    amJarRsrc.setType(LocalResourceType.FILE);
-    // Set visibility of the resource 
-    // Setting to most private option
-    amJarRsrc.setVisibility(LocalResourceVisibility.APPLICATION);	   
-    // Set the resource to be copied over
-    amJarRsrc.setResource(ConverterUtils.getYarnUrlFromPath(dst)); 
-    // Set timestamp and length of file so that the framework 
-    // can do basic sanity checks for the local resource 
-    // after it has been copied over to ensure it is the same 
-    // resource the client intended to use with the application
-    amJarRsrc.setTimestamp(destStatus.getModificationTime());
-    amJarRsrc.setSize(destStatus.getLen());
-    localResources.put("AppMaster.jar",  amJarRsrc);
+    addToLocalResources(fs, appMasterJar, appMasterJarPath, appId.getId(),
+        localResources, null);
-      Path log4jSrc = new Path(log4jPropFile);
-      String log4jPathSuffix = appName + "/" + appId.getId() + "/" + log4jPath;
-      Path log4jDst = new Path(fs.getHomeDirectory(), log4jPathSuffix);
-      fs.copyFromLocalFile(false, true, log4jSrc, log4jDst);
-      FileStatus log4jFileStatus = fs.getFileStatus(log4jDst);
-      LocalResource log4jRsrc =
-          LocalResource.newInstance(
-              ConverterUtils.getYarnUrlFromURI(log4jDst.toUri()),
-              LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,
-              log4jFileStatus.getLen(), log4jFileStatus.getModificationTime());
-      localResources.put(log4jPath, log4jRsrc);
+      addToLocalResources(fs, log4jPropFile, log4jPath, appId.getId(),
+          localResources, null);
-      String shellCommandSuffix =
-          appName + "/" + appId.getId() + "/" + shellCommandPath;
-      Path shellCommandDst =
-          new Path(fs.getHomeDirectory(), shellCommandSuffix);
-      FSDataOutputStream ostream = null;
-      try {
-        ostream = FileSystem
-            .create(fs, shellCommandDst, new FsPermission((short) 0710));
-        ostream.writeUTF(shellCommand);
-      } finally {
-        IOUtils.closeQuietly(ostream);
-      }
-      FileStatus scFileStatus = fs.getFileStatus(shellCommandDst);
-      LocalResource scRsrc =
-          LocalResource.newInstance(
-              ConverterUtils.getYarnUrlFromURI(shellCommandDst.toUri()),
-              LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,
-              scFileStatus.getLen(), scFileStatus.getModificationTime());
-      localResources.put(shellCommandPath, scRsrc);
+      addToLocalResources(fs, null, shellCommandPath, appId.getId(),
+          localResources, shellCommand);
+    }
+
+    if (shellArgs.length > 0) {
+      addToLocalResources(fs, null, shellArgsPath, appId.getId(),
+          localResources, StringUtils.join(shellArgs, " "));
-    if (!shellArgs.isEmpty()) {
-      vargs.add("--shell_args " + shellArgs + "");
-    }
+  private void addToLocalResources(FileSystem fs, String fileSrcPath,
+      String fileDstPath, int appId, Map<String, LocalResource> localResources,
+      String resources) throws IOException {
+    String suffix =
+        appName + "/" + appId + "/" + fileDstPath;
+    Path dst =
+        new Path(fs.getHomeDirectory(), suffix);
+    if (fileSrcPath == null) {
+      FSDataOutputStream ostream = null;
+      try {
+        ostream = FileSystem
+            .create(fs, dst, new FsPermission((short) 0710));
+        ostream.writeUTF(resources);
+      } finally {
+        IOUtils.closeQuietly(ostream);
+      }
+    } else {
+      fs.copyFromLocalFile(new Path(fileSrcPath), dst);
+    }
+    FileStatus scFileStatus = fs.getFileStatus(dst);
+    LocalResource scRsrc =
+        LocalResource.newInstance(
+            ConverterUtils.getYarnUrlFromURI(dst.toUri()),
+            LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,
+            scFileStatus.getLen(), scFileStatus.getModificationTime());
+    localResources.put(fileDstPath, scRsrc);
+  }
