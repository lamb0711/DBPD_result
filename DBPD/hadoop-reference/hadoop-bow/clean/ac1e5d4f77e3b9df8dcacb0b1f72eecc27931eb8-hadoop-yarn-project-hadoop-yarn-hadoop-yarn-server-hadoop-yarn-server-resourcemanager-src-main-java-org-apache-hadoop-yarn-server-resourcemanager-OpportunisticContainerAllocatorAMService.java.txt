YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)

-  private List<RemoteNode> cachedNodes;
-  private long lastCacheUpdateTime;
+  private volatile List<RemoteNode> cachedNodes;
+  private volatile long lastCacheUpdateTime;
-  public AllocateResponse allocate(AllocateRequest request) throws
-      YarnException, IOException {
+  protected void allocateInternal(ApplicationAttemptId appAttemptId,
+      AllocateRequest request, AllocateResponse allocateResponse)
+      throws YarnException {
-    request.setAskList(partitionedAsks.getOpportunistic());
-    final ApplicationAttemptId appAttemptId = getAppAttemptId();
-    SchedulerApplicationAttempt appAttempt = ((AbstractYarnScheduler)
-        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);
+    SchedulerApplicationAttempt appAttempt =
+        ((AbstractYarnScheduler)rmContext.getScheduler())
+            .getApplicationAttempt(appAttemptId);
-        oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,
-        ResourceManager.getClusterTimeStamp(), appAttempt.getUser());
+        oppContainerAllocator.allocateContainers(
+            request.getResourceBlacklistRequest(),
+            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,
+            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());
+      addToAllocatedContainers(allocateResponse, oppContainers);
-    AllocateResponse allocateResp = super.allocate(request);
-
-    // Add allocated OPPORTUNISTIC containers to the AllocateResponse.
-    if (!oppContainers.isEmpty()) {
-      allocateResp.getAllocatedContainers().addAll(oppContainers);
-    }
-
-    // Update opportunistic container context with the allocated GUARANTEED
-    // containers.
-    oppCtx.updateCompletedContainers(allocateResp);
-
-    // Add all opportunistic containers
-    return allocateResp;
+    super.allocateInternal(appAttemptId, request, allocateResponse);
-                                   boolean isRemotelyAllocated) {
+      boolean isRemotelyAllocated) {
-        || cachedNodes == null) {
+        || (cachedNodes == null)) {
-      lastCacheUpdateTime = currTime;
+      if (cachedNodes.size() > 0) {
+        lastCacheUpdateTime = currTime;
+      }
