HADOOP-15723. ABFS: Ranger Support.
Contributed by Yuan Gao.

+import java.util.Arrays;
+import org.apache.hadoop.fs.azurebfs.extensions.AbfsAuthorizationException;
+import org.apache.hadoop.fs.azurebfs.extensions.AbfsAuthorizer;
+import org.apache.hadoop.fs.permission.FsAction;
+  private AbfsAuthorizer authorizer;
+
+    // Initialize ABFS authorizer
+    //
+    this.authorizer = abfsConfiguration.getAbfsAuthorizer();
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
+
-      InputStream inputStream = abfsStore.openFileForRead(makeQualified(path), statistics);
+      InputStream inputStream = abfsStore.openFileForRead(qualifiedPath, statistics);
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      OutputStream outputStream = abfsStore.createFile(makeQualified(f), overwrite,
+      OutputStream outputStream = abfsStore.createFile(qualifiedPath, overwrite,
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      OutputStream outputStream = abfsStore.openFileForWrite(makeQualified(f), false);
+      OutputStream outputStream = abfsStore.openFileForWrite(qualifiedPath, false);
-      abfsStore.rename(makeQualified(src), makeQualified(adjustedDst));
+      Path qualifiedSrcPath = makeQualified(src);
+      Path qualifiedDstPath = makeQualified(adjustedDst);
+      performAbfsAuthCheck(FsAction.READ_WRITE, qualifiedSrcPath, qualifiedDstPath);
+
+      abfsStore.rename(qualifiedSrcPath, qualifiedDstPath);
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.delete(makeQualified(f), recursive);
+      abfsStore.delete(qualifiedPath, recursive);
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
+
-      FileStatus[] result = abfsStore.listStatus(makeQualified(f));
+      FileStatus[] result = abfsStore.listStatus(qualifiedPath);
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.createDirectory(makeQualified(f), permission == null ? FsPermission.getDirDefault() : permission,
+      abfsStore.createDirectory(qualifiedPath, permission == null ? FsPermission.getDirDefault() : permission,
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
+
-      return abfsStore.getFileStatus(makeQualified(f));
+      return abfsStore.getFileStatus(qualifiedPath);
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.setOwner(makeQualified(path),
+      abfsStore.setOwner(qualifiedPath,
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.setPermission(makeQualified(path),
+      abfsStore.setPermission(qualifiedPath,
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.modifyAclEntries(makeQualified(path),
+      abfsStore.modifyAclEntries(qualifiedPath,
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.removeAclEntries(makeQualified(path), aclSpec);
+      abfsStore.removeAclEntries(qualifiedPath, aclSpec);
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.removeDefaultAcl(makeQualified(path));
+      abfsStore.removeDefaultAcl(qualifiedPath);
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.removeAcl(makeQualified(path));
+      abfsStore.removeAcl(qualifiedPath);
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.setAcl(makeQualified(path), aclSpec);
+      abfsStore.setAcl(qualifiedPath, aclSpec);
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
+
-      return abfsStore.getAclStatus(makeQualified(path));
+      return abfsStore.getAclStatus(qualifiedPath);
+
+  /**
+   * Use ABFS authorizer to check if user is authorized to perform specific
+   * {@link FsAction} on specified {@link Path}s.
+   *
+   * @param action The {@link FsAction} being requested on the provided {@link Path}s.
+   * @param paths The absolute paths of the storage being accessed.
+   * @throws AbfsAuthorizationException on authorization failure.
+   * @throws IOException network problems or similar.
+   * @throws IllegalArgumentException if the required parameters are not provided.
+   */
+  private void performAbfsAuthCheck(FsAction action, Path... paths)
+      throws AbfsAuthorizationException, IOException {
+    if (authorizer == null) {
+      LOG.debug("ABFS authorizer is not initialized. No authorization check will be performed.");
+    } else {
+      Preconditions.checkArgument(paths.length > 0, "no paths supplied for authorization check");
+
+      LOG.debug("Auth check for action: {} on paths: {}", action.toString(), Arrays.toString(paths));
+      if (!authorizer.isAuthorized(action, paths)) {
+        throw new AbfsAuthorizationException(
+            "User is not authorized for action " + action.toString()
+            + " on paths: " + Arrays.toString(paths));
+      }
+    }
+  }
