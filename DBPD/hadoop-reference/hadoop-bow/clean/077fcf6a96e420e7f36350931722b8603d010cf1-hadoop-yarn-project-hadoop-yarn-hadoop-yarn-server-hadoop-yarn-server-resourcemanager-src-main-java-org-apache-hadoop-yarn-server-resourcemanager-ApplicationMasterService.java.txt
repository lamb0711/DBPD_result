YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)

+import java.util.Collections;
-  private final ApplicationMasterServiceProcessor amsProcessor;
+  private final AMSProcessingChain amsProcessingChain;
-    this.amsProcessor = createProcessor();
-  }
-
-  protected ApplicationMasterServiceProcessor createProcessor() {
-    return new DefaultAMSProcessor(rmContext, rScheduler);
+    this.amsProcessingChain = new AMSProcessingChain(new DefaultAMSProcessor());
+    amsProcessingChain.init(rmContext, null);
+    List<ApplicationMasterServiceProcessor> processors = getProcessorList(conf);
+    if (processors != null) {
+      Collections.reverse(processors);
+      for (ApplicationMasterServiceProcessor p : processors) {
+        this.amsProcessingChain.addProcessor(p);
+      }
+    }
+  }
+
+  protected List<ApplicationMasterServiceProcessor> getProcessorList(
+      Configuration conf) {
+    return conf.getInstances(
+        YarnConfiguration.RM_APPLICATION_MASTER_SERVICE_PROCESSORS,
+        ApplicationMasterServiceProcessor.class);
+  protected AMSProcessingChain getProcessingChain() {
+    return this.amsProcessingChain;
+  }
+
-      return this.amsProcessor.registerApplicationMaster(
-          amrmTokenIdentifier.getApplicationAttemptId(), request);
+      RegisterApplicationMasterResponse response =
+          recordFactory.newRecordInstance(
+              RegisterApplicationMasterResponse.class);
+      this.amsProcessingChain.registerApplicationMaster(
+          amrmTokenIdentifier.getApplicationAttemptId(), request, response);
+      return response;
-      return this.amsProcessor.finishApplicationMaster(
-          applicationAttemptId, request);
+      FinishApplicationMasterResponse response =
+          FinishApplicationMasterResponse.newInstance(false);
+      this.amsProcessingChain.finishApplicationMaster(
+          applicationAttemptId, request, response);
+      return response;
-      AllocateResponse response = this.amsProcessor.allocate(
-          amrmTokenIdentifier.getApplicationAttemptId(), request);
+      AllocateResponse response =
+          recordFactory.newRecordInstance(AllocateResponse.class);
+      this.amsProcessingChain.allocate(
+          amrmTokenIdentifier.getApplicationAttemptId(), request, response);
