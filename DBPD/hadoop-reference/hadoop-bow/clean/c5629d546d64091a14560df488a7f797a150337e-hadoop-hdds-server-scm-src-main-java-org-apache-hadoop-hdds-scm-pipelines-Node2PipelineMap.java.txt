HDDS-382. Remove RatisTestHelper#RatisTestSuite constructor argument and fix checkstyle in ContainerTestHelper, GenericTestUtils
Contributed by Nandakumar.

+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Map;
-import java.util.Map;
-import java.util.HashSet;
-import java.util.Collections;
-
-import static org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes
-    .DUPLICATE_DATANODE;
-
+import static org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes.DUPLICATE_DATANODE;
- * This data structure maintains the list of pipelines which the given datanode
- * is a part of.
- * This information will be added whenever a new pipeline allocation happens.
+ * This data structure maintains the list of pipelines which the given datanode is a part of. This
+ * information will be added whenever a new pipeline allocation happens.
- * TODO: this information needs to be regenerated from pipeline reports on
- * SCM restart
+ * <p>TODO: this information needs to be regenerated from pipeline reports on SCM restart
-  /**
-   * Constructs a Node2PipelineMap Object.
-   */
+  /** Constructs a Node2PipelineMap Object. */
-   * Returns true if this a datanode that is already tracked by
-   * Node2PipelineMap.
+   * Returns true if this a datanode that is already tracked by Node2PipelineMap.
-  private void insertNewDatanode(UUID datanodeID, Set<Pipeline> pipelines)
-      throws SCMException {
+  private void insertNewDatanode(UUID datanodeID, Set<Pipeline> pipelines) throws SCMException {
-    if(dn2PipelineMap.putIfAbsent(datanodeID, pipelines) != null) {
-      throw new SCMException("Node already exists in the map",
-          DUPLICATE_DATANODE);
+    if (dn2PipelineMap.putIfAbsent(datanodeID, pipelines) != null) {
+      throw new SCMException("Node already exists in the map", DUPLICATE_DATANODE);
+   *
-    return dn2PipelineMap.computeIfPresent(datanode, (k, v) ->
-        Collections.unmodifiableSet(v));
+    return dn2PipelineMap.computeIfPresent(datanode, (k, v) -> Collections.unmodifiableSet(v));
+   *
-          .computeIfAbsent(dnId,
-              k -> Collections.synchronizedSet(new HashSet<>()))
+          .computeIfAbsent(dnId, k -> Collections.synchronizedSet(new HashSet<>()))
-      dn2PipelineMap.computeIfPresent(dnId,
-          (k, v) -> {v.remove(pipeline); return v;});
+      dn2PipelineMap.computeIfPresent(
+          dnId,
+          (k, v) -> {
+            v.remove(pipeline);
+            return v;
+          });
