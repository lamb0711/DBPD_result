YARN-6400. Remove some unneeded code after YARN-6255. Contributed by Jian He

-
-import org.apache.slider.api.InternalKeys;
-import org.apache.slider.core.conf.ConfTreeOperations;
-import org.apache.slider.core.conf.MapOperations;
-import org.apache.slider.core.exceptions.ErrorStrings;
-import org.apache.slider.providers.agent.AgentKeys;
-import java.io.FileReader;
-import java.util.Timer;
-  /**
-   * Set the time for an information (human, machine) timestamp pair of fields.
-   * The human time is the time in millis converted via the {@link Date} class.
-   * @param info info fields
-   * @param keyHumanTime name of human time key
-   * @param keyMachineTime name of machine time
-   * @param time timestamp
-   */
-  public static void setInfoTime(Map info,
-      String keyHumanTime,
-      String keyMachineTime,
-      long time) {
-    info.put(keyHumanTime, SliderUtils.toGMTString(time));
-    info.put(keyMachineTime, Long.toString(time));
-  }
-
-  public static Path extractImagePath(CoreFileSystem fs,
-      MapOperations internalOptions) throws
-      SliderException, IOException {
-    Path imagePath;
-    String imagePathOption =
-        internalOptions.get(InternalKeys.INTERNAL_APPLICATION_IMAGE_PATH);
-    String appHomeOption =
-        internalOptions.get(InternalKeys.INTERNAL_APPLICATION_HOME);
-    if (!isUnset(imagePathOption)) {
-      if (!isUnset(appHomeOption)) {
-        throw new BadClusterStateException(
-            ErrorStrings.E_BOTH_IMAGE_AND_HOME_DIR_SPECIFIED);
-      }
-      imagePath = fs.createPathThatMustExist(imagePathOption);
-    } else {
-      imagePath = null;
-      if (isUnset(appHomeOption)) {
-        throw new BadClusterStateException(
-            ErrorStrings.E_NO_IMAGE_OR_HOME_DIR_SPECIFIED);
-      }
-    }
-    return imagePath;
-  }
-
-  /**
-   * trigger a  JVM halt with no clean shutdown at all
-   * @param status status code for exit
-   * @param text text message
-   * @param delay delay in millis
-   * @return the timer (assuming the JVM hasn't halted yet)
-   *
-   */
-  public static Timer haltAM(int status, String text, int delay) {
-
-    Timer timer = new Timer("halt timer", false);
-    timer.schedule(new DelayedHalt(status, text), delay);
-    return timer;
-  }
-
-   * return the HDFS path where the application package has been uploaded
-   * manually or by using slider client (install package command)
-   * 
-   * @param conf configuration
-   * @return
-   */
-  public static String getApplicationDefinitionPath(ConfTreeOperations conf)
-      throws BadConfigException {
-    return getApplicationDefinitionPath(conf, null);
-  }
-
-  /**
-   * return the HDFS path where the application package has been uploaded
-   * manually or by using slider client (install package command)
-   *
-   * @param conf configuration
-   * @param roleGroup name of component
-   * @return
-   */
-  public static String getApplicationDefinitionPath(ConfTreeOperations conf,
-      String roleGroup)
-      throws BadConfigException {
-    String appDefPath = conf.getGlobalOptions().getMandatoryOption(
-        AgentKeys.APP_DEF);
-    if (roleGroup != null) {
-      MapOperations component = conf.getComponent(roleGroup);
-      if (component != null) {
-        appDefPath = component.getOption(AgentKeys.APP_DEF, appDefPath);
-      }
-    }
-    return appDefPath;
-  }
-
-  /**
-   * return a description of whether the current user has created credential
-   * cache files from kerberos servers
-   *
-   * @throws IOException
-   * @throws BadConfigException
-   * @throws SecurityException
-   *             - if a security manager exists and its checkPropertyAccess
-   *             method doesn't allow access to the specified system property.
-   */
-  public static String checkCredentialCacheFile() throws IOException,
-      BadConfigException {
-    String result = null;
-    if (!Shell.WINDOWS) {
-      result = Shell.execCommand("klist");
-    }
-    return result;
-  }
-
-  /**
