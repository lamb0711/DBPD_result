YARN-9030. Log aggregation changes to handle filesystems which do not support setting permissions. (Suma Shivaprasad via wangda)

Change-Id: I80f1e8196b8624e24d74494719fdedfd7061dced

+  protected boolean fsSupportsChmod = true;
+
-    boolean logPermError = true;
-      if (!perms.equals(TLDIR_PERMISSIONS) && logPermError) {
+      if (!perms.equals(TLDIR_PERMISSIONS)) {
-        logPermError = false;
-      } else {
-        logPermError = true;
+
+
+    Path qualified =
+        remoteRootLogDir.makeQualified(remoteFS.getUri(),
+            remoteFS.getWorkingDirectory());
-        Path qualified =
-            remoteRootLogDir.makeQualified(remoteFS.getUri(),
-                remoteFS.getWorkingDirectory());
-        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));
+
+        // Not possible to query FileSystem API to check if it supports
+        // chmod, chown etc. Hence resorting to catching exceptions here.
+        // Remove when FS APi is ready
+        try {
+          remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));
+        } catch ( UnsupportedOperationException use) {
+          LOG.info("Unable to set permissions for configured filesystem since"
+              + " it does not support this", remoteFS.getScheme());
+          fsSupportsChmod = false;
+        }
-          remoteFS.setOwner(qualified,
-              loginUser.getShortUserName(), primaryGroupName);
+          try {
+            remoteFS.setOwner(qualified, loginUser.getShortUserName(),
+                primaryGroupName);
+          } catch (UnsupportedOperationException use) {
+            LOG.info(
+                "File System does not support setting user/group" + remoteFS
+                    .getScheme(), use);
+          }
+    } else{
+      //Check if FS has capability to set/modify permissions
+      try {
+        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));
+      } catch (UnsupportedOperationException use) {
+        LOG.info("Unable to set permissions for configured filesystem since"
+            + " it does not support this", remoteFS.getScheme());
+        fsSupportsChmod = false;
+      } catch (IOException e) {
+        LOG.warn("Failed to check if FileSystem suppports permissions on "
+            + "remoteLogDir [" + remoteRootLogDir + "]", e);
+      }
-    FsPermission dirPerm = new FsPermission(fsPerm);
-    fs.mkdirs(path, dirPerm);
-    FsPermission umask = FsPermission.getUMask(fs.getConf());
-    if (!dirPerm.equals(dirPerm.applyUMask(umask))) {
-      fs.setPermission(path, new FsPermission(fsPerm));
+
+    if (fsSupportsChmod) {
+      FsPermission dirPerm = new FsPermission(fsPerm);
+      fs.mkdirs(path, dirPerm);
+      FsPermission umask = FsPermission.getUMask(fs.getConf());
+      if (!dirPerm.equals(dirPerm.applyUMask(umask))) {
+        fs.setPermission(path, new FsPermission(fsPerm));
+      }
+    } else {
+      fs.mkdirs(path);
-      if (!APP_DIR_PERMISSIONS.equals(appDirStatus.getPermission())) {
-        fs.setPermission(path, APP_DIR_PERMISSIONS);
+      if (fsSupportsChmod) {
+        if (!APP_DIR_PERMISSIONS.equals(appDirStatus.getPermission())) {
+          fs.setPermission(path, APP_DIR_PERMISSIONS);
+        }
+  public boolean isFsSupportsChmod() {
+    return fsSupportsChmod;
+  }
