YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.

-import org.apache.commons.math3.util.Pair;
-      "%20s\t%20s" + System.getProperty("line.separator");
+      "%30s\t%30s\t%30s" + System.getProperty("line.separator");
-      emptyLogDir(getRemoteAppLogDir(appId, appOwner).toString());
+      emptyLogDir(LogAggregationUtils.getRemoteAppLogDir(conf, appId, appOwner)
+          .toString());
-    boolean getAllContainers = (containerIdStr == null);
-    String nodeIdStr = (nodeId == null) ? null
-        : LogAggregationUtils.getNodeString(nodeId);
-    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
-        appId, appOwner);
-    if (nodeFiles == null) {
+    List<ContainerLogMeta> containersLogMeta;
+    try {
+      containersLogMeta = LogToolUtils.getContainerLogMetaFromRemoteFS(
+          conf, appId, containerIdStr, nodeId, appOwner);
+    } catch (Exception ex) {
+      err.println(ex.getMessage());
-    boolean foundAnyLogs = false;
-    while (nodeFiles.hasNext()) {
-      FileStatus thisNodeFile = nodeFiles.next();
-      if (nodeIdStr != null) {
-        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {
-          continue;
-        }
-      }
-      if (!thisNodeFile.getPath().getName()
-          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
-        AggregatedLogFormat.LogReader reader =
-            new AggregatedLogFormat.LogReader(getConf(),
-            thisNodeFile.getPath());
-        try {
-          DataInputStream valueStream;
-          LogKey key = new LogKey();
-          valueStream = reader.next(key);
-          while (valueStream != null) {
-            if (getAllContainers || (key.toString().equals(containerIdStr))) {
-              String containerString = String.format(CONTAINER_ON_NODE_PATTERN,
-                  key, thisNodeFile.getPath().getName());
-              out.println(containerString);
-              out.println("Log Upload Time:"
-                  + thisNodeFile.getModificationTime());
-              out.println(StringUtils.repeat("=", containerString.length()));
-              out.printf(PER_LOG_FILE_INFO_PATTERN, "LogType", "LogLength");
-              out.println(StringUtils.repeat("=", containerString.length()));
-              while (true) {
-                try {
-                  Pair<String, String> logMeta =
-                      LogReader.readContainerMetaDataAndSkipData(
-                          valueStream, out);
-                  out.printf(PER_LOG_FILE_INFO_PATTERN,
-                      logMeta.getFirst(), logMeta.getSecond());
-                } catch (EOFException eof) {
-                  break;
-                }
-              }
-              foundAnyLogs = true;
-              if (!getAllContainers) {
-                break;
-              }
-            }
-            // Next container
-            key = new LogKey();
-            valueStream = reader.next(key);
-          }
-        } finally {
-          reader.close();
-        }
-      }
-    }
-    if (!foundAnyLogs) {
+    if (containersLogMeta.isEmpty()) {
+
+    for (ContainerLogMeta containerLogMeta : containersLogMeta) {
+      String containerString = String.format(CONTAINER_ON_NODE_PATTERN,
+          containerLogMeta.getContainerId(), containerLogMeta.getNodeId());
+      out.println(containerString);
+      out.println(StringUtils.repeat("=", containerString.length()));
+      out.printf(PER_LOG_FILE_INFO_PATTERN, "LogFile", "LogLength",
+          "LastModificationTime");
+      out.println(StringUtils.repeat("=", containerString.length()));
+      for (PerContainerLogFileInfo logMeta : containerLogMeta
+          .getContainerLogMeta()) {
+        out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(),
+            logMeta.getFileSize(), logMeta.getLastModifiedTime());
+      }
+    }
-    Path remoteAppLogDir = getRemoteAppLogDir(appId, appOwner);
-      Path qualifiedLogDir =
-          FileContext.getFileContext(getConf()).makeQualified(remoteAppLogDir);
-      nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(),
-          getConf()).listStatus(remoteAppLogDir);
+      nodeFiles = LogAggregationUtils.getRemoteNodeFileDir(
+          conf, appId, appOwner);
-      logDirNotExist(remoteAppLogDir.toString());
+      logDirNotExist(LogAggregationUtils.getRemoteAppLogDir(
+          conf, appId, appOwner).toString());
-      logDirNoAccessPermission(remoteAppLogDir.toString(), appOwner,
-        ace.getMessage());
+      logDirNoAccessPermission(LogAggregationUtils.getRemoteAppLogDir(
+          conf, appId, appOwner).toString(), appOwner,
+          ace.getMessage());
-      logDirIOError(remoteAppLogDir.toString(), ioe.getMessage());
+      logDirIOError(LogAggregationUtils.getRemoteAppLogDir(
+          conf, appId, appOwner).toString(), ioe.getMessage());
-  private Path getRemoteAppLogDir(ApplicationId appId, String appOwner) {
-    Path remoteRootLogDir = new Path(getConf().get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String user = appOwner;
-    String logDirSuffix = LogAggregationUtils
-        .getRemoteNodeLogDirSuffix(getConf());
-    // TODO Change this to get a list of files from the LAS.
-    return LogAggregationUtils.getRemoteAppLogDir(
-        remoteRootLogDir, appId, user, logDirSuffix);
-  }
-
-                      valueStream, null).getFirst();
+                      valueStream).getFirst();
