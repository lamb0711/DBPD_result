Merge trunk into HA branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1228339 13f79535-47bb-0310-9956-ffa450edef68

+import javax.xml.bind.annotation.XmlSeeAlso;
-import org.apache.hadoop.yarn.api.records.QueueState;
+@XmlSeeAlso({CapacitySchedulerLeafQueueInfo.class})
-  protected String queuePath;
-  @XmlTransient
-  protected Boolean isParent = false;
+  static final float EPSILON = 1e-8f;
-  // bit odd to store this but makes html easier for now
-  protected CSQueue queue;
+  protected String queuePath;
+  protected float absoluteCapacity;
+  protected float absoluteMaxCapacity;
+  protected float utilization;
+  protected int numApplications;
+  protected String usedResources;
-  protected QueueState state;
+  protected String state;
-  CapacitySchedulerQueueInfo(float cap, float used, float max, String name,
-      QueueState state, String path) {
-    this.capacity = cap;
-    this.usedCapacity = used;
-    this.maxCapacity = max;
-    this.queueName = name;
-    this.state = state;
-    this.queuePath = path;
-  }
+  CapacitySchedulerQueueInfo(CSQueue q) {
+    queuePath = q.getQueuePath();
+    capacity = q.getCapacity() * 100;
+    usedCapacity = q.getUsedCapacity() * 100;
-  public Boolean isParent() {
-    return this.isParent;
-  }
+    maxCapacity = q.getMaximumCapacity();
+    if (maxCapacity < EPSILON || maxCapacity > 1f)
+      maxCapacity = 1f;
+    maxCapacity *= 100;
-  public CSQueue getQueue() {
-    return this.queue;
+    absoluteCapacity = cap(q.getAbsoluteCapacity(), 0f, 1f) * 100;
+    absoluteMaxCapacity = cap(q.getAbsoluteMaximumCapacity(), 0f, 1f) * 100;
+    utilization = q.getUtilization() * 100;
+    numApplications = q.getNumApplications();
+    usedResources = q.getUsedResources().toString();
+    queueName = q.getQueueName();
+    state = q.getState().toString();
+  public float getAbsoluteCapacity() {
+    return absoluteCapacity;
+  }
+
+  public float getAbsoluteMaxCapacity() {
+    return absoluteMaxCapacity;
+  }
+
+  public float getUtilization() {
+    return utilization;
+  }
+
+  public int getNumApplications() {
+    return numApplications;
+  }
+
+  public String getUsedResources() {
+    return usedResources;
+  }
+
-    return this.state.toString();
+    return this.state;
+  /**
+   * Limit a value to a specified range.
+   * @param val the value to be capped
+   * @param low the lower bound of the range (inclusive)
+   * @param hi the upper bound of the range (inclusive)
+   * @return the capped value
+   */
+  static float cap(float val, float low, float hi) {
+    return Math.min(Math.max(val, low), hi);
+  }
