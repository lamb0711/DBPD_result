YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.

+import java.util.function.Supplier;
+
-// FIXME: make sure CandidateNodeSet works with this class
-        String diagnostic) {
+        String diagnostic, ActivityLevel level) {
-          requestKey, diagnostic, ActivityState.SKIPPED);
+          requestKey, diagnostic, ActivityState.SKIPPED, level);
-            ActivityState.REJECTED, diagnostic, "app");
+            ActivityState.REJECTED, diagnostic, ActivityLevel.APP);
-        String diagnostic, ActivityState appState) {
+        String diagnostic, ActivityState appState, ActivityLevel level) {
-        if (schedulerKey != null) {
-          String allocationRequestId =
-              String.valueOf(schedulerKey.getAllocationRequestId());
-          String priorityStr = getPriorityStr(schedulerKey);
-          String requestName = getRequestName(priorityStr, allocationRequestId);
-          String type = "container";
-          // Add application-container activity into specific node allocation.
-          activitiesManager.addSchedulingActivityForNode(nodeId,
-              requestName, null,
-              priorityStr, appState, diagnostic, type,
-              null);
-          type = "request";
-          // Add application-container activity into specific node allocation.
-          activitiesManager.addSchedulingActivityForNode(nodeId,
-              application.getApplicationId().toString(), requestName,
-              priorityStr, appState,
-              ActivityDiagnosticConstant.EMPTY, type, allocationRequestId);
+        String requestName = null;
+        Integer priority = null;
+        Long allocationRequestId = null;
+        if (level == ActivityLevel.NODE || level == ActivityLevel.REQUEST) {
+          if (schedulerKey == null) {
+            LOG.warn("Request key should not be null at " + level + " level.");
+            return;
+          }
+          priority = getPriority(schedulerKey);
+          allocationRequestId = schedulerKey.getAllocationRequestId();
+          requestName = getRequestName(priority, allocationRequestId);
-        // Add queue-application activity into specific node allocation.
-        activitiesManager.addSchedulingActivityForNode(nodeId,
-            application.getQueueName(),
-            application.getApplicationId().toString(),
-            application.getPriority().toString(), appState,
-            schedulerKey != null ? ActivityDiagnosticConstant.EMPTY :
-                diagnostic, "app", null);
+        switch (level) {
+        case NODE:
+          recordSchedulerActivityAtNodeLevel(activitiesManager, application,
+              requestName, priority, allocationRequestId, null, nodeId,
+              appState, diagnostic);
+          break;
+        case REQUEST:
+          recordSchedulerActivityAtRequestLevel(activitiesManager, application,
+              requestName, priority, allocationRequestId, nodeId, appState,
+              diagnostic);
+          break;
+        case APP:
+          recordSchedulerActivityAtAppLevel(activitiesManager, application,
+              nodeId, appState, diagnostic);
+          break;
+        default:
+          LOG.warn("Doesn't handle app activities at " + level + " level.");
+          break;
+        }
-        String type = "container";
-            getPriorityStr(schedulerKey), appState,
-            diagnostic, type, nodeId,
+            getPriority(schedulerKey), appState,
+            diagnostic, level, nodeId,
-                null : String.valueOf(schedulerKey.getAllocationRequestId()));
+                null : schedulerKey.getAllocationRequestId());
-        String containerPriorityStr =
-            updatedContainer.getContainer().getPriority().toString();
-        String allocationRequestId = String
-            .valueOf(updatedContainer.getContainer().getAllocationRequestId());
+        Integer containerPriority =
+            updatedContainer.getContainer().getPriority().getPriority();
+        Long allocationRequestId =
+            updatedContainer.getContainer().getAllocationRequestId();
-            getRequestName(containerPriorityStr, allocationRequestId);
-        String type = "container";
-
-        // Add application-container activity into specific node allocation.
-        activitiesManager.addSchedulingActivityForNode(nodeId,
-            requestName,
-            updatedContainer.getContainer().toString(),
-            containerPriorityStr,
-            activityState, ActivityDiagnosticConstant.EMPTY, type, null);
-        type = "request";
-        // Add application-container activity into specific node allocation.
-        activitiesManager.addSchedulingActivityForNode(nodeId,
-            application.getApplicationId().toString(),
-            requestName, containerPriorityStr,
-            activityState, ActivityDiagnosticConstant.EMPTY, type,
-            allocationRequestId);
-        type = "app";
-        // Add queue-application activity into specific node allocation.
-        activitiesManager.addSchedulingActivityForNode(nodeId,
-            application.getQueueName(),
-            application.getApplicationId().toString(),
-            application.getPriority().toString(), ActivityState.ACCEPTED,
-            ActivityDiagnosticConstant.EMPTY, type, null);
+            getRequestName(containerPriority, allocationRequestId);
+        // Add node,request,app level activities into scheduler activities.
+        recordSchedulerActivityAtNodeLevel(activitiesManager, application,
+            requestName, containerPriority, allocationRequestId,
+            updatedContainer.getContainer().toString(), nodeId, activityState,
+            ActivityDiagnosticConstant.EMPTY);
-        String type = "container";
-            updatedContainer.getContainer().getPriority().toString(),
-            activityState, ActivityDiagnosticConstant.EMPTY, type, nodeId,
-            String.valueOf(
-                updatedContainer.getContainer().getAllocationRequestId()));
+            updatedContainer.getContainer().getPriority().getPriority(),
+            activityState, ActivityDiagnosticConstant.EMPTY,
+            ActivityLevel.NODE, nodeId,
+            updatedContainer.getContainer().getAllocationRequestId());
+    @SuppressWarnings("parameternumber")
+    private static void recordSchedulerActivityAtNodeLevel(
+        ActivitiesManager activitiesManager, SchedulerApplicationAttempt app,
+        String requestName, Integer priority, Long allocationRequestId,
+        String containerId, NodeId nodeId, ActivityState state,
+        String diagnostic) {
+      activitiesManager
+          .addSchedulingActivityForNode(nodeId, requestName, containerId, null,
+              state, diagnostic, ActivityLevel.NODE, null);
+      // Record request level activity additionally.
+      recordSchedulerActivityAtRequestLevel(activitiesManager, app, requestName,
+          priority, allocationRequestId, nodeId, state,
+          ActivityDiagnosticConstant.EMPTY);
+    }
+
+    @SuppressWarnings("parameternumber")
+    private static void recordSchedulerActivityAtRequestLevel(
+        ActivitiesManager activitiesManager, SchedulerApplicationAttempt app,
+        String requestName, Integer priority, Long allocationRequestId,
+        NodeId nodeId, ActivityState state, String diagnostic) {
+      activitiesManager.addSchedulingActivityForNode(nodeId,
+          app.getApplicationId().toString(), requestName, priority,
+          state, diagnostic, ActivityLevel.REQUEST,
+          allocationRequestId);
+      // Record app level activity additionally.
+      recordSchedulerActivityAtAppLevel(activitiesManager, app, nodeId, state,
+          ActivityDiagnosticConstant.EMPTY);
+    }
+
+    private static void recordSchedulerActivityAtAppLevel(
+        ActivitiesManager activitiesManager, SchedulerApplicationAttempt app,
+        NodeId nodeId, ActivityState state, String diagnostic) {
+      activitiesManager.addSchedulingActivityForNode(nodeId, app.getQueueName(),
+          app.getApplicationId().toString(), app.getPriority().getPriority(),
+          state, diagnostic, ActivityLevel.APP, null);
+    }
+
+      recordQueueActivity(activitiesManager, node, parentQueueName, queueName,
+          state, () -> diagnostic);
+    }
+
+    public static void recordQueueActivity(ActivitiesManager activitiesManager,
+        SchedulerNode node, String parentQueueName, String queueName,
+        ActivityState state, Supplier<String> diagnosticSupplier) {
-            null, state, diagnostic, null);
+            null, state, diagnosticSupplier.get(), ActivityLevel.QUEUE);
-        ActivitiesManager activitiesManager, NodeId nodeID) {
+        ActivitiesManager activitiesManager, NodeId nodeID, String partition) {
-      activitiesManager.finishNodeUpdateRecording(nodeID);
+      activitiesManager.finishNodeUpdateRecording(nodeID, partition);
-      NodeId nodeId, String parentName, String childName,
-      Priority priority, ActivityState state, String diagnostic, String type) {
+      NodeId nodeId, String parentName, String childName, Priority priority,
+      ActivityState state, String diagnostic, ActivityLevel level) {
-        childName, priority != null ? priority.toString() : null, state,
-        diagnostic, type, null);
+        childName, priority != null ? priority.getPriority() : null, state,
+        diagnostic, level, null);
-  private static String getRequestName(String priority,
-      String allocationRequestId) {
+  private static String getRequestName(Integer priority,
+      Long allocationRequestId) {
-  private static String getPriorityStr(SchedulerRequestKey schedulerKey) {
+  private static Integer getPriority(SchedulerRequestKey schedulerKey) {
-    return priority == null ? null : priority.toString();
+    return priority == null ? null : priority.getPriority();
