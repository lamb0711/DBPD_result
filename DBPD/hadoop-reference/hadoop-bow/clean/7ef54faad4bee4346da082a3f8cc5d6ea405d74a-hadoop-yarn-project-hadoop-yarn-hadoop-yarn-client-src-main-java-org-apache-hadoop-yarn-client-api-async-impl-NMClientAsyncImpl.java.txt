YARN-834. Fixed annotations for yarn-client module, reorganized packages and clearly differentiated *Async apis. Contributed by Arun C Murthy and Zhijie Shen.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494017 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.hadoop.yarn.client;
+package org.apache.hadoop.yarn.client.api.async.impl;
-import org.apache.hadoop.classification.InterfaceStability.Evolving;
-import org.apache.hadoop.service.AbstractService;
-import org.apache.hadoop.yarn.api.records.Token;
+import org.apache.hadoop.yarn.api.records.Token;
+import org.apache.hadoop.yarn.client.api.NMClient;
+import org.apache.hadoop.yarn.client.api.async.NMClientAsync;
+import org.apache.hadoop.yarn.client.api.impl.NMClientImpl;
-/**
- * <code>NMClientAsync</code> handles communication with all the NodeManagers
- * and provides asynchronous updates on getting responses from them. It
- * maintains a thread pool to communicate with individual NMs where a number of
- * worker threads process requests to NMs by using {@link NMClientImpl}. The max
- * size of the thread pool is configurable through
- * {@link YarnConfiguration#NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE}.
- *
- * It should be used in conjunction with a CallbackHandler. For example
- *
- * <pre>
- * {@code
- * class MyCallbackHandler implements NMClientAsync.CallbackHandler {
- *   public void onContainerStarted(ContainerId containerId,
- *       Map<String, ByteBuffer> allServiceResponse) {
- *     [post process after the container is started, process the response]
- *   }
- *
- *   public void onContainerStatusReceived(ContainerId containerId,
- *       ContainerStatus containerStatus) {
- *     [make use of the status of the container]
- *   }
- *
- *   public void onContainerStopped(ContainerId containerId) {
- *     [post process after the container is stopped]
- *   }
- *
- *   public void onStartContainerError(
- *       ContainerId containerId, Throwable t) {
- *     [handle the raised exception]
- *   }
- *
- *   public void onGetContainerStatusError(
- *       ContainerId containerId, Throwable t) {
- *     [handle the raised exception]
- *   }
- *
- *   public void onStopContainerError(
- *       ContainerId containerId, Throwable t) {
- *     [handle the raised exception]
- *   }
- * }
- * }
- * </pre>
- *
- * The client's life-cycle should be managed like the following:
- *
- * <pre>
- * {@code
- * NMClientAsync asyncClient = new NMClientAsync(new MyCallbackhandler());
- * asyncClient.init(conf);
- * asyncClient.start();
- * asyncClient.startContainer(container, containerLaunchContext);
- * [... wait for container being started]
- * asyncClient.getContainerStatus(container.getId(), container.getNodeId(),
- *     container.getContainerToken());
- * [... handle the status in the callback instance]
- * asyncClient.stopContainer(container.getId(), container.getNodeId(),
- *     container.getContainerToken());
- * [... wait for container being stopped]
- * asyncClient.stop();
- * }
- * </pre>
- */
+@Private
-@Evolving
-public class NMClientAsync extends AbstractService {
+public class NMClientAsyncImpl extends NMClientAsync {
-  private static final Log LOG = LogFactory.getLog(NMClientAsync.class);
+  private static final Log LOG = LogFactory.getLog(NMClientAsyncImpl.class);
-  protected NMClient client;
-  protected CallbackHandler callbackHandler;
-
-  public NMClientAsync(CallbackHandler callbackHandler) {
-    this (NMClientAsync.class.getName(), callbackHandler);
+  public NMClientAsyncImpl(CallbackHandler callbackHandler) {
+    this (NMClientAsyncImpl.class.getName(), callbackHandler);
-  public NMClientAsync(String name, CallbackHandler callbackHandler) {
+  public NMClientAsyncImpl(String name, CallbackHandler callbackHandler) {
-  protected NMClientAsync(String name, NMClient client,
+  protected NMClientAsyncImpl(String name, NMClient client,
-    super(name);
+    super(name, client, callbackHandler);
-          ((NMClientImpl) client).cleanupRunningContainers.get()) {
+          ((NMClientImpl) client).getCleanupRunningContainers().get()) {
-  public void startContainer(
+  public void startContainerAsync(
-  public void stopContainer(ContainerId containerId, NodeId nodeId,
+  public void stopContainerAsync(ContainerId containerId, NodeId nodeId,
-  public void getContainerStatus(ContainerId containerId, NodeId nodeId,
+  public void getContainerStatusAsync(ContainerId containerId, NodeId nodeId,
-              container.nmClientAsync.client.startContainer(
+              container.nmClientAsync.getClient().startContainer(
-            container.nmClientAsync.callbackHandler.onContainerStarted(
+            container.nmClientAsync.getCallbackHandler().onContainerStarted(
-          container.nmClientAsync.callbackHandler.onStartContainerError(
+          container.nmClientAsync.getCallbackHandler().onStartContainerError(
-          container.nmClientAsync.client.stopContainer(
+          container.nmClientAsync.getClient().stopContainer(
-            container.nmClientAsync.callbackHandler.onContainerStopped(
+            container.nmClientAsync.getCallbackHandler().onContainerStopped(
-          container.nmClientAsync.callbackHandler.onStopContainerError(
+          container.nmClientAsync.getCallbackHandler().onStopContainerError(
-          container.nmClientAsync.callbackHandler.onStartContainerError(
+          container.nmClientAsync.getCallbackHandler().onStartContainerError(
-  /**
-   * <p>
-   * The callback interface needs to be implemented by {@link NMClientAsync}
-   * users. The APIs are called when responses from <code>NodeManager</code> are
-   * available.
-   * </p>
-   *
-   * <p>
-   * Once a callback happens, the users can chose to act on it in blocking or
-   * non-blocking manner. If the action on callback is done in a blocking
-   * manner, some of the threads performing requests on NodeManagers may get
-   * blocked depending on how many threads in the pool are busy.
-   * </p>
-   *
-   * <p>
-   * The implementation of the callback function should not throw the
-   * unexpected exception. Otherwise, {@link NMClientAsync} will just
-   * catch, log and then ignore it.
-   * </p>
-   */
-  public static interface CallbackHandler {
-    /**
-     * The API is called when <code>NodeManager</code> responds to indicate its
-     * acceptance of the starting container request
-     * @param containerId the Id of the container
-     * @param allServiceResponse a Map between the auxiliary service names and
-     *                           their outputs
-     */
-    void onContainerStarted(ContainerId containerId,
-        Map<String, ByteBuffer> allServiceResponse);
-
-    /**
-     * The API is called when <code>NodeManager</code> responds with the status
-     * of the container
-     * @param containerId the Id of the container
-     * @param containerStatus the status of the container
-     */
-    void onContainerStatusReceived(ContainerId containerId,
-        ContainerStatus containerStatus);
-
-    /**
-     * The API is called when <code>NodeManager</code> responds to indicate the
-     * container is stopped.
-     * @param containerId the Id of the container
-     */
-    void onContainerStopped(ContainerId containerId);
-
-    /**
-     * The API is called when an exception is raised in the process of
-     * starting a container
-     *
-     * @param containerId the Id of the container
-     * @param t the raised exception
-     */
-    void onStartContainerError(ContainerId containerId, Throwable t);
-
-    /**
-     * The API is called when an exception is raised in the process of
-     * querying the status of a container
-     *
-     * @param containerId the Id of the container
-     * @param t the raised exception
-     */
-    void onGetContainerStatusError(ContainerId containerId, Throwable t);
-
-    /**
-     * The API is called when an exception is raised in the process of
-     * stopping a container
-     *
-     * @param containerId the Id of the container
-     * @param t the raised exception
-     */
-    void onStopContainerError(ContainerId containerId, Throwable t);
-
-  }
-
