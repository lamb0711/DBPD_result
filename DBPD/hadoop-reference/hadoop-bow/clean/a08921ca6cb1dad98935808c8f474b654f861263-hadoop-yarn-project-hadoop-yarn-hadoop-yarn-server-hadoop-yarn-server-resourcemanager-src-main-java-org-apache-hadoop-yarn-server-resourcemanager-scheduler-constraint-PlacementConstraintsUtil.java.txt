YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)

Change-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700

-import org.apache.hadoop.yarn.api.records.AllocationTagNamespace;
-import org.apache.hadoop.yarn.api.records.TargetApplications;
-import org.apache.hadoop.yarn.exceptions.InvalidAllocationTagException;
-      throws InvalidAllocationTagException{
+      throws InvalidAllocationTagsQueryException {
-    // TODO remove such check once we support all forms of namespaces
-    if (!namespace.isIntraApp() && !namespace.isSingleInterApp()) {
-      throw new InvalidAllocationTagException(
-          "Only support " + AllocationTagNamespaceType.SELF.toString()
-              + " and "+ AllocationTagNamespaceType.APP_ID + " now,"
-              + namespace.toString() + " is not supported yet!");
+    // TODO Complete remove this check once we support app-label.
+    if (AllocationTagNamespaceType.APP_LABEL
+        .equals(namespace.getNamespaceType())) {
+      throw new InvalidAllocationTagsQueryException(
+          namespace.toString() + " is not supported yet!");
-    TargetApplications ta = new TargetApplications(currentAppId,
-        atm.getAllApplicationIds());
+    TargetApplications ta =
+        new TargetApplications(currentAppId, atm.getAllApplicationIds());
-  // We return a single app Id now, because at present,
-  // only self and app-id namespace is supported. But moving on,
-  // this will return a set of application IDs.
-  // TODO support other forms of namespaces
-  private static ApplicationId getNamespaceScope(
-      AllocationTagNamespace namespace)
-      throws InvalidAllocationTagException {
-    if (namespace.getNamespaceScope() == null
-        || namespace.getNamespaceScope().size() != 1) {
-      throw new InvalidAllocationTagException(
-          "Invalid allocation tag namespace " + namespace.toString()
-              + ", expecting it is not null and only 1 application"
-              + " ID in the scope.");
-    }
-    return namespace.getNamespaceScope().iterator().next();
-  }
-
-    ApplicationId effectiveAppID;
-    try {
-      AllocationTagNamespace namespace = getAllocationTagNamespace(
+    AllocationTagNamespace namespace = getAllocationTagNamespace(
-      effectiveAppID = getNamespaceScope(namespace);
-    } catch (InvalidAllocationTagException e) {
-      throw new InvalidAllocationTagsQueryException(e);
-    }
+    AllocationTags allocationTags = AllocationTags
+        .newAllocationTags(namespace, te.getTargetValues());
-            effectiveAppID, te.getTargetValues(), Long::max);
+            allocationTags, Long::max);
-            effectiveAppID, te.getTargetValues(), Long::min);
+            allocationTags, Long::min);
-            effectiveAppID, te.getTargetValues(), Long::max);
+            allocationTags, Long::max);
-            effectiveAppID, te.getTargetValues(), Long::min);
+            allocationTags, Long::min);
