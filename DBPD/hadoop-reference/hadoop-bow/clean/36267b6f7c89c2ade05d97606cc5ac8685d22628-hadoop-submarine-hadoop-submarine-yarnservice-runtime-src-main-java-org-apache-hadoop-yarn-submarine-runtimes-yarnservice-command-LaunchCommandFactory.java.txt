SUBMARINE-52. [SUBMARINE-14] Generate Service spec + launch script for single-node PyTorch learning job. Contributed by Szilard Nemeth.

-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.yarn.submarine.client.cli.param.RunJobParameters;
-import org.apache.hadoop.yarn.submarine.common.api.TaskType;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.HadoopEnvironmentSetup;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.command.TensorBoardLaunchCommand;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.command.TensorFlowPsLaunchCommand;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.command.TensorFlowWorkerLaunchCommand;
+import org.apache.hadoop.yarn.submarine.common.api.Role;
-import java.util.Objects;
- * Simple factory to create instances of {@link AbstractLaunchCommand}
- * based on the {@link TaskType}.
- * All dependencies are passed to this factory that could be required
- * by any implementor of {@link AbstractLaunchCommand}.
+ * Interface for creating launch commands.
-public class LaunchCommandFactory {
-  private final HadoopEnvironmentSetup hadoopEnvSetup;
-  private final RunJobParameters parameters;
-  private final Configuration yarnConfig;
-
-  public LaunchCommandFactory(HadoopEnvironmentSetup hadoopEnvSetup,
-      RunJobParameters parameters, Configuration yarnConfig) {
-    this.hadoopEnvSetup = hadoopEnvSetup;
-    this.parameters = parameters;
-    this.yarnConfig = yarnConfig;
-  }
-
-  public AbstractLaunchCommand createLaunchCommand(TaskType taskType,
-      Component component) throws IOException {
-    Objects.requireNonNull(taskType, "TaskType must not be null!");
-
-    if (taskType == TaskType.WORKER || taskType == TaskType.PRIMARY_WORKER) {
-      return new TensorFlowWorkerLaunchCommand(hadoopEnvSetup, taskType,
-          component, parameters, yarnConfig);
-
-    } else if (taskType == TaskType.PS) {
-      return new TensorFlowPsLaunchCommand(hadoopEnvSetup, taskType, component,
-          parameters, yarnConfig);
-
-    } else if (taskType == TaskType.TENSORBOARD) {
-      return new TensorBoardLaunchCommand(hadoopEnvSetup, taskType, component,
-          parameters);
-    }
-    throw new IllegalStateException("Unknown task type: " + taskType);
-  }
+public interface LaunchCommandFactory {
+  AbstractLaunchCommand createLaunchCommand(Role role, Component component)
+      throws IOException;
