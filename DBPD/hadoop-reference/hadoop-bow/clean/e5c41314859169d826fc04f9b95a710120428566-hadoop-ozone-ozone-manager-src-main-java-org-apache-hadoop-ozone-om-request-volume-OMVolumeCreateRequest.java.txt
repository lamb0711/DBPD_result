HDDS-1856. Make required changes for Non-HA to use new HA code in OM. (#1174)


+import java.util.HashMap;
+import java.util.Map;
+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;
-import org.apache.hadoop.ozone.audit.AuditLogger;
-      long transactionLogIndex) {
+      long transactionLogIndex,
+      OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper) {
-    OmVolumeArgs omVolumeArgs = null;
-
-    AuditLogger auditLogger = ozoneManager.getAuditLogger();
-    OzoneManagerProtocolProtos.UserInfo userInfo = getOmRequest().getUserInfo();
-
+    boolean acquiredVolumeLock = false;
+    boolean acquiredUserLock = false;
+    IOException exception = null;
+    OMClientResponse omClientResponse = null;
+    OmVolumeArgs omVolumeArgs = null;
+    Map<String, String> auditMap = new HashMap<>();
+      auditMap = omVolumeArgs.toAuditMap();
-    } catch (IOException ex) {
-      omMetrics.incNumVolumeCreateFails();
-      auditLog(auditLogger, buildAuditMessage(OMAction.CREATE_VOLUME,
-          buildVolumeAuditMap(volume), ex, userInfo));
-      LOG.error("Volume creation failed for user:{} volume:{}", owner, volume,
-          ex);
-      return new OMVolumeCreateResponse(omVolumeArgs, null,
-          createErrorOMResponse(omResponse, ex));
-    }
-    VolumeList volumeList = null;
-    boolean acquiredUserLock = false;
-    IOException exception = null;
+      VolumeList volumeList = null;
-    // acquire lock.
-    omMetadataManager.getLock().acquireLock(VOLUME_LOCK, volume);
-    try {
+      // acquire lock.
+      acquiredVolumeLock = omMetadataManager.getLock().acquireLock(VOLUME_LOCK,
+          volume);
+
+
-              dbUserKey, transactionLogIndex);
+            dbUserKey, transactionLogIndex);
+
+        omResponse.setCreateVolumeResponse(CreateVolumeResponse.newBuilder()
+            .build());
+        omClientResponse = new OMVolumeCreateResponse(omVolumeArgs, volumeList,
+            omResponse.build());
+      omClientResponse = new OMVolumeCreateResponse(null, null,
+          createErrorOMResponse(omResponse, exception));
+      if (omClientResponse != null) {
+        omClientResponse.setFlushFuture(
+            ozoneManagerDoubleBufferHelper.add(omClientResponse,
+                transactionLogIndex));
+      }
-      omMetadataManager.getLock().releaseLock(VOLUME_LOCK, volume);
+      if (acquiredVolumeLock) {
+        omMetadataManager.getLock().releaseLock(VOLUME_LOCK, volume);
+      }
-    auditLog(auditLogger, buildAuditMessage(OMAction.CREATE_VOLUME,
-        omVolumeArgs.toAuditMap(), exception, userInfo));
+    auditLog(ozoneManager.getAuditLogger(),
+        buildAuditMessage(OMAction.CREATE_VOLUME, auditMap, exception,
+            getOmRequest().getUserInfo()));
-      LOG.debug("created volume:{} for user:{}", omVolumeArgs.getVolume(),
-          owner);
+      LOG.debug("created volume:{} for user:{}", volume, owner);
-      omResponse.setCreateVolumeResponse(CreateVolumeResponse.newBuilder()
-          .build());
-      return new OMVolumeCreateResponse(omVolumeArgs, volumeList,
-          omResponse.build());
-          volumeInfo.getVolume(), exception);
+          volume, exception);
-      return new OMVolumeCreateResponse(omVolumeArgs, volumeList,
-          createErrorOMResponse(omResponse, exception));
+    return omClientResponse;
-
-
+
+
