YARN-6716. Native services support for specifying component start order. Contributed by Billie Rinaldi

+import org.apache.slider.util.ServiceApiUtil;
-    //build the initial component list
+    // build the initial component list
+    Collection<Component> sortedComponents = ServiceApiUtil
+        .sortByDependencies(app.getComponents());
-    for (Component component : app.getComponents()) {
+    for (Component component : sortedComponents) {
-      createComponent(name, name, component, priority++);
+      createComponent(name, component, priority++);
-  public ProviderRole createComponent(String name, String group,
-      Component component, int priority) throws BadConfigException {
+  public ProviderRole createComponent(String name, Component component,
+      int priority) throws BadConfigException {
-        new ProviderRole(name, group, priority, (int)placementPolicy, threshold,
+        new ProviderRole(name, priority, (int)placementPolicy, threshold,
-      if (!roleStatus.isExcludeFromFlexing()) {
+      if (!roleStatus.isExcludeFromFlexing() &&
+          areDependenciesReady(roleStatus)) {
+  @VisibleForTesting
+  public boolean areDependenciesReady(RoleStatus roleStatus) {
+    List<String> dependencies = roleStatus.getProviderRole().component
+        .getDependencies();
+    if (SliderUtils.isEmpty(dependencies)) {
+      return true;
+    }
+    for (String dependency : dependencies) {
+      ProviderRole providerRole = roles.get(dependency);
+      if (providerRole == null) {
+        log.error("Couldn't find dependency {} for {} (should never happen)",
+            dependency, roleStatus.getName());
+        continue;
+      }
+      RoleStatus other = getRoleStatusMap().get(providerRole.id);
+      if (other.getRunning() < other.getDesired()) {
+        log.info("Dependency {} not satisfied for {}, only {} of {} instances" +
+            " running", dependency, roleStatus.getName(), other.getRunning(),
+            other.getDesired());
+        return false;
+      }
+      if (providerRole.probe == null) {
+        continue;
+      }
+      List<RoleInstance> dependencyInstances = enumLiveNodesInRole(
+          providerRole.name);
+      if (dependencyInstances.size() < other.getDesired()) {
+        log.info("Dependency {} not satisfied for {}, only {} of {} instances" +
+                " live", dependency, roleStatus.getName(),
+            dependencyInstances.size(), other.getDesired());
+        return false;
+      }
+      for (RoleInstance instance : dependencyInstances) {
+        if (instance.state != STATE_READY) {
+          return false;
+        }
+      }
+    }
+    return true;
+  }
+
+  public synchronized boolean monitorComponentInstances() {
+    boolean hasChanged = false;
+    for (RoleInstance instance : getLiveContainers().values()) {
+      if (instance.providerRole.probe == null) {
+        continue;
+      }
+      boolean ready = instance.providerRole.probe.ping(instance).isSuccess();
+      if (ready) {
+        if (instance.state != STATE_READY) {
+          instance.state = STATE_READY;
+          hasChanged = true;
+          log.info("State of {} changed to ready", instance.role);
+        }
+      } else {
+        if (instance.state == STATE_READY) {
+          instance.state = STATE_NOT_READY;
+          hasChanged = true;
+          log.info("State of {} changed from ready to not ready", instance
+              .role);
+        }
+      }
+    }
+    return hasChanged;
+  }
+
