YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He

-package org.apache.slider.providers;
+package org.apache.hadoop.yarn.service.provider;
-import org.apache.hadoop.registry.client.binding.RegistryPathUtils;
-import org.apache.hadoop.registry.client.types.ServiceRecord;
-import org.apache.hadoop.registry.client.types.yarn.PersistencePolicies;
-import org.apache.hadoop.registry.client.types.yarn.YarnRegistryAttributes;
-import org.apache.slider.common.SliderKeys;
-import org.apache.slider.common.SliderXmlConfKeys;
+import org.apache.hadoop.yarn.service.conf.SliderKeys;
+import org.apache.hadoop.yarn.service.conf.SliderXmlConfKeys;
-import org.apache.slider.core.exceptions.NoSuchNodeException;
+import org.apache.slider.core.launch.AbstractLauncher;
-import org.apache.slider.server.appmaster.state.RoleInstance;
+import org.apache.hadoop.yarn.service.compinstance.ComponentInstance;
+import org.apache.hadoop.yarn.service.ServiceContext;
-import org.apache.slider.server.services.yarnregistry.YarnRegistryViewForProviders;
+import org.slf4j.LoggerFactory;
-import static org.apache.slider.util.ServiceApiUtil.$;
+import static org.apache.hadoop.yarn.service.utils.ServiceApiUtil.$;
-  protected final Logger log;
+  protected static final Logger log =
+      LoggerFactory.getLogger(ProviderUtils.class);
-  /**
-   * Create an instance
-   * @param log log directory to use -usually the provider
-   */
-  
-  public ProviderUtils(Logger log) {
-    this.log = log;
-  }
-  public void substituteMapWithTokens(Map<String, String> configs,
+  public static void substituteMapWithTokens(Map<String, String> configs,
-  public synchronized void createConfigFileAndAddLocalResource(
-      ContainerLauncher launcher, SliderFileSystem fs, Component component,
-      Map<String, String> tokensForSubstitution, RoleInstance roleInstance,
-      StateAccessForProviders appState) throws IOException {
+  public static synchronized void createConfigFileAndAddLocalResource(
+      AbstractLauncher launcher, SliderFileSystem fs, Component component,
+      Map<String, String> tokensForSubstitution, ComponentInstance instance,
+      ServiceContext context) throws IOException {
-        new Path(compDir, roleInstance.getCompInstanceName());
+        new Path(compDir, instance.getCompInstanceName());
+      log.info(instance.getCompInstanceId() + ": Creating dir on hdfs: " + compInstanceDir);
-      roleInstance.compInstanceDir = compInstanceDir;
-      log.info("Creating component instance dir: " + compInstanceDir);
+      instance.setCompInstanceDir(compInstanceDir);
-    log.info("Tokens substitution for component: " + roleInstance
-        .getCompInstanceName() + System.lineSeparator()
-        + tokensForSubstitution);
+    if (log.isDebugEnabled()) {
+      log.debug("Tokens substitution for component instance: " + instance
+          .getCompInstanceName() + System.lineSeparator()
+          + tokensForSubstitution);
+    }
-        log.info("Saving config file on hdfs for component " + roleInstance
+        log.info("Saving config file on hdfs for component " + instance
-                tokensForSubstitution, configFile, remoteFile, appState);
+                tokensForSubstitution, configFile, remoteFile, context);
-                tokensForSubstitution, configFile, remoteFile, appState);
+                tokensForSubstitution, configFile, remoteFile, context);
-              roleInstance, configFile, fileName, remoteFile);
+              instance, configFile, fileName, remoteFile);
-  private void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,
-      Map<String, String> tokensForSubstitution, RoleInstance roleInstance,
+  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,
+      Map<String, String> tokensForSubstitution, ComponentInstance instance,
-      log.info("Component instance = " + roleInstance.getCompInstanceName()
+      log.info("Component instance = " + instance.getCompInstanceName()
-  private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,
+  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,
-      Path remoteFile, StateAccessForProviders appState) throws IOException {
+      Path remoteFile, ServiceContext context) throws IOException {
-      conf = (Map<String, String>) appState.getConfigFileCache()
-          .get(configFile);
+      conf = (Map<String, String>) context.configCache.get(configFile);
-  private void resolvePlainTemplateAndSaveOnHdfs(FileSystem fs,
+  private static void resolvePlainTemplateAndSaveOnHdfs(FileSystem fs,
-      Path remoteFile, StateAccessForProviders appState) {
+      Path remoteFile, ServiceContext context) {
-      content = (String) appState.getConfigFileCache().get(configFile);
+      content = (String) context.configCache.get(configFile);
-   * @param roleInstance role instance
-  public Map<String, String> initCompTokensForSubstitute(
-      RoleInstance roleInstance) {
+  public static Map<String, String> initCompTokensForSubstitute(
+      ComponentInstance instance) {
-    tokens.put(COMPONENT_NAME, roleInstance.role);
-    tokens.put(COMPONENT_NAME_LC, roleInstance.role.toLowerCase());
-    tokens.put(COMPONENT_INSTANCE_NAME, roleInstance.getCompInstanceName());
-    tokens.put(CONTAINER_ID, roleInstance.getContainerId().toString());
-    tokens.put(COMPONENT_ID, String.valueOf(roleInstance.componentId));
+    tokens.put(COMPONENT_NAME, instance.getCompSpec().getName());
+    tokens
+        .put(COMPONENT_NAME_LC, instance.getCompSpec().getName().toLowerCase());
+    tokens.put(COMPONENT_INSTANCE_NAME, instance.getCompInstanceName());
+    tokens.put(CONTAINER_ID, instance.getContainer().getId().toString());
+    tokens.put(COMPONENT_ID,
+        String.valueOf(instance.getCompInstanceId().getId()));
-  public void addComponentHostTokens(Map<String, String> tokens,
+  public static void addComponentHostTokens(Map<String, String> tokens,
-  public Iterable<String> getHostsList(Collection<ClusterNode> values,
+  public static Iterable<String> getHostsList(Collection<ClusterNode> values,
-
-  /**
-   * Update ServiceRecord in Registry with IP and hostname.
-   * @param amState access to AM state
-   * @param yarnRegistry acces to YARN registry
-   * @param containerId container ID
-   * @param roleName component name
-   * @param ip list of IPs
-   * @param hostname hostname
-   */
-  public void updateServiceRecord(StateAccessForProviders amState,
-      YarnRegistryViewForProviders yarnRegistry,
-      String containerId, String roleName, List<String> ip, String hostname)
-      throws IOException {
-    try {
-      RoleInstance role = null;
-      if(ip != null && !ip.isEmpty()){
-        role = amState.getOwnedContainer(containerId);
-        role.ip = ip.get(0);
-      }
-      if(hostname != null && !hostname.isEmpty()){
-        role = amState.getOwnedContainer(containerId);
-        role.hostname = hostname;
-      }
-      if (role != null) {
-        // create and publish updated service record (including hostname & ip)
-        ServiceRecord record = new ServiceRecord();
-        record.set(YarnRegistryAttributes.YARN_ID, containerId);
-        record.description = role.getCompInstanceName();
-        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,
-            PersistencePolicies.CONTAINER);
-        // TODO: use constants from YarnRegistryAttributes
-        if (role.ip != null) {
-          record.set("yarn:ip", role.ip);
-        }
-        if (role.hostname != null) {
-          record.set("yarn:hostname", role.hostname);
-        }
-        yarnRegistry.putComponent(
-            RegistryPathUtils.encodeYarnID(containerId), record);
-      }
-    } catch (NoSuchNodeException e) {
-      // ignore - there is nothing to do if we don't find a container
-      log.warn("Owned container {} not found - {}", containerId, e);
-    }
-  }
