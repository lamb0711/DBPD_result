HADOOP-17099. Replace Guava Predicate with Java8+ Predicate

Signed-off-by: Jonathan Eagles <jeagles@gmail.com>

-import com.google.common.collect.Iterables;
-import com.google.common.collect.Collections2;
+import java.util.stream.Collectors;
-import com.google.common.base.Predicate;
+
-      return emptyInServiceNodeLists || Iterables.any(
-          allDNs.get(address.getAddress()),
-          new Predicate<DatanodeAdminProperties>() {
-            public boolean apply(DatanodeAdminProperties input) {
-              return input.getPort() == 0 ||
-                  input.getPort() == address.getPort();
-            }
-          });
+      return emptyInServiceNodeLists || allDNs.get(address.getAddress())
+          .stream().anyMatch(
+              input -> input.getPort() == 0 ||
+                  input.getPort() == address.getPort());
-      return Iterables.any(allDNs.get(address.getAddress()),
-          new Predicate<DatanodeAdminProperties>() {
-            public boolean apply(DatanodeAdminProperties input) {
-              return input.getAdminState().equals(
-                  AdminStates.DECOMMISSIONED) &&
-                  (input.getPort() == 0 ||
-                      input.getPort() == address.getPort());
-            }
-          });
+      return allDNs.get(address.getAddress()).stream().anyMatch(
+          input -> input.getAdminState().equals(
+              AdminStates.DECOMMISSIONED) &&
+              (input.getPort() == 0 ||
+                  input.getPort() == address.getPort()));
-      Iterable<DatanodeAdminProperties> datanode = Iterables.filter(
-          allDNs.get(address.getAddress()),
-          new Predicate<DatanodeAdminProperties>() {
-            public boolean apply(DatanodeAdminProperties input) {
-              return (input.getPort() == 0 ||
-                  input.getPort() == address.getPort());
-            }
-          });
+      Iterable<DatanodeAdminProperties> datanode =
+          allDNs.get(address.getAddress()).stream().filter(
+              input -> (input.getPort() == 0 ||
+                  input.getPort() == address.getPort())).collect(
+              Collectors.toList());
-      return new Iterable<InetSocketAddress>() {
-        @Override
-        public Iterator<InetSocketAddress> iterator() {
-          return new HostIterator(
-              Collections2.filter(allDNs.entries(),
-                  new Predicate<java.util.Map.Entry<InetAddress,
-                      DatanodeAdminProperties>>() {
-                    public boolean apply(java.util.Map.Entry<InetAddress,
-                        DatanodeAdminProperties> entry) {
-                      return entry.getValue().getAdminState().equals(
-                          AdminStates.DECOMMISSIONED);
-                    }
-                  }
-              ));
-        }
-      };
+      return () -> new HostIterator(
+          allDNs.entries().stream().filter(
+              entry -> entry.getValue().getAdminState().equals(
+                  AdminStates.DECOMMISSIONED)).collect(
+              Collectors.toList()));
-      Iterable<DatanodeAdminProperties> datanode = Iterables.filter(
-          allDNs.get(address.getAddress()),
-          new Predicate<DatanodeAdminProperties>() {
-            public boolean apply(DatanodeAdminProperties input) {
-              return input.getAdminState().equals(
+      Iterable<DatanodeAdminProperties> datanode =
+          allDNs.get(address.getAddress()).stream().filter(
+              input -> input.getAdminState().equals(
-                  input.getPort() == address.getPort());
-            }
-          });
+                      input.getPort() == address.getPort())).collect(
+              Collectors.toList());
