YARN-7276. Federation Router Web Service fixes. Contributed by Inigo Goiri.

+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;
+import static javax.servlet.http.HttpServletResponse.SC_OK;
+
+import javax.ws.rs.core.HttpHeaders;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-  protected static <T> T genericForward(String webApp, HttpServletRequest hsr,
-      final Class<T> returnType, HTTPMethods method, String targetPath,
-      Object formParam, Map<String, String[]> additionalParam) {
+  protected static <T> T genericForward(
+      final String webApp, final HttpServletRequest hsr,
+      final Class<T> returnType, final HTTPMethods method,
+      final String targetPath, final Object formParam,
+      final Map<String, String[]> additionalParam) {
-              (hsr == null) ? null : hsr.getPathInfo(), paramMap, formParam);
+              (hsr == null) ? null : hsr.getPathInfo(), paramMap, formParam,
+              getMediaTypeFromHttpServletRequest(hsr, returnType));
-          if (response.getStatus() == 200) {
+          if (response.getStatus() == SC_OK) {
+          if (response.getStatus() == SC_NO_CONTENT) {
+            try {
+              return returnType.getConstructor().newInstance();
+            } catch (RuntimeException | ReflectiveOperationException e) {
+              LOG.error("Cannot create empty entity for {}", returnType, e);
+            }
+          }
-      Map<String, String[]> queryParams, Object formParam) {
+      Map<String, String[]> queryParams, Object formParam, String mediaType) {
-    // I can forward the call in JSON or XML since the Router will convert it
-    // again in Object before send it back to the client
-      builder = webResource.entity(formParam, MediaType.APPLICATION_XML);
-      builder = builder.accept(MediaType.APPLICATION_XML);
+      builder = webResource.entity(formParam, mediaType);
+      builder = builder.accept(mediaType);
-      builder = webResource.accept(MediaType.APPLICATION_XML);
+      builder = webResource.accept(mediaType);
+  /**
+   * Extract from HttpServletRequest the MediaType in output.
+   */
+  protected static <T> String getMediaTypeFromHttpServletRequest(
+      HttpServletRequest request, final Class<T> returnType) {
+    if (request == null) {
+      // By default we return XML for REST call without HttpServletRequest
+      return MediaType.APPLICATION_XML;
+    }
+    // TODO
+    if (!returnType.equals(Response.class)) {
+      return MediaType.APPLICATION_XML;
+    }
+    String header = request.getHeader(HttpHeaders.ACCEPT);
+    if (header == null || header.equals("*")) {
+      // By default we return JSON
+      return MediaType.APPLICATION_JSON;
+    }
+    return header;
+  }
+
