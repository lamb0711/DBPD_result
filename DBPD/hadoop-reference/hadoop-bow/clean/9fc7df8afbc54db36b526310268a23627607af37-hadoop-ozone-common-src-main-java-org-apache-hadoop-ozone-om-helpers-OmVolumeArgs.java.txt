HDDS-793. Support custom key/value annotations on volume/bucket/key. Contributed by Elek, Marton.

-import com.google.common.base.Preconditions;
-import org.apache.hadoop.ozone.OzoneConsts;
-import org.apache.hadoop.ozone.audit.Auditable;
-import org.apache.hadoop.ozone.protocol.proto
-    .OzoneManagerProtocolProtos.OzoneAclInfo;
-import org.apache.hadoop.ozone.protocol.proto
-    .OzoneManagerProtocolProtos.VolumeInfo;
-import org.apache.hadoop.hdds.protocol.proto.HddsProtos.KeyValue;
-
-import java.util.LinkedList;
-import java.util.stream.Collectors;
+
+import org.apache.hadoop.ozone.OzoneConsts;
+import org.apache.hadoop.ozone.audit.Auditable;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.VolumeInfo;
+
+import com.google.common.base.Preconditions;
-public final class OmVolumeArgs implements Auditable{
+public final class OmVolumeArgs extends WithMetadata implements Auditable {
-  private final Map<String, String> keyValueMap;
-   * @param keyValueMap - keyValue map.
+   * @param metadata - metadata map for custom key/value data.
-                       long quotaInBytes, Map<String, String> keyValueMap,
+                       long quotaInBytes, Map<String, String> metadata,
-    this.keyValueMap = keyValueMap;
+    this.metadata = metadata;
-  public Map<String, String> getKeyValueMap() {
-    return keyValueMap;
-  }
-
-    private Map<String, String> keyValueMap;
+    private Map<String, String> metadata;
-      keyValueMap = new HashMap<>();
+      metadata = new HashMap<>();
-      keyValueMap.put(key, value); // overwrite if present.
+      metadata.put(key, value); // overwrite if present.
+      return this;
+    }
+
+    public Builder addAllMetadata(Map<String, String> additionalMetaData) {
+      if (additionalMetaData != null) {
+        metadata.putAll(additionalMetaData);
+      }
-          keyValueMap, aclMap, creationTime);
+          metadata, aclMap, creationTime);
+
-    List<KeyValue> metadataList = new LinkedList<>();
-    for (Map.Entry<String, String> entry : keyValueMap.entrySet()) {
-      metadataList.add(KeyValue.newBuilder().setKey(entry.getKey()).
-          setValue(entry.getValue()).build());
-    }
+
-        .addAllMetadata(metadataList)
+        .addAllMetadata(KeyValueUtil.toProtobuf(metadata))
-    Map<String, String> kvMap = volInfo.getMetadataList().stream()
-        .collect(Collectors.toMap(KeyValue::getKey,
-            KeyValue::getValue));
+
-    return new OmVolumeArgs(volInfo.getAdminName(), volInfo.getOwnerName(),
-        volInfo.getVolume(), volInfo.getQuotaInBytes(), kvMap, aclMap,
+    return new OmVolumeArgs(
+        volInfo.getAdminName(),
+        volInfo.getOwnerName(),
+        volInfo.getVolume(),
+        volInfo.getQuotaInBytes(),
+        KeyValueUtil.getFromProtobuf(volInfo.getMetadataList()),
+        aclMap,
