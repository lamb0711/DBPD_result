HDFS-4177. Add a snapshot parameter to INodeDirectory.getChildrenList() for selecting particular snapshot children list views.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1408923 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
+import org.apache.hadoop.hdfs.util.ReadOnlyList;
-      List<INode> children = dstInode.isDirectory() ? 
-          ((INodeDirectory) dstInode).getChildren() : null;
-      if (children != null && children.size() != 0) {
-        error = "rename cannot overwrite non empty destination directory "
-            + dst;
-        NameNode.stateChangeLog.warn("DIR* FSDirectory.unprotectedRenameTo: "
-            + error);
-        throw new IOException(error);
+      if (dstInode.isDirectory()) {
+        final ReadOnlyList<INode> children = ((INodeDirectory) dstInode
+            ).getChildrenList(dstInodesInPath.getPathSnapshot());
+        if (!children.isEmpty()) {
+          error = "rename destination directory is not empty: " + dst;
+          NameNode.stateChangeLog.warn(
+              "DIR* FSDirectory.unprotectedRenameTo: " + error);
+          throw new IOException(error);
+        }
-      final INode inode = rootDir.getNode(path, false);
+      final INodesInPath inodesInPath = rootDir.getINodesInPath(path, false);
+      final INode inode = inodesInPath.getINode(0);
-      return ((INodeDirectory)inode).getChildrenList().size() != 0;
+      final Snapshot s = inodesInPath.getPathSnapshot();
+      return !((INodeDirectory)inode).getChildrenList(s).isEmpty();
-      List<INode> children = targetDir.getChildren();
-      if (children != null) {
-        for (INode child : children) {
-          INode snapshotDir = hasSnapshot(child);
-          if (snapshotDir != null) {
-            return snapshotDir;
-          }
+      for (INode child : targetDir.getChildrenList(null)) {
+        INode snapshotDir = hasSnapshot(child);
+        if (snapshotDir != null) {
+          return snapshotDir;
-      for(INode i : newnode.getChildrenList()) {
+      for(INode i : newnode.getChildrenList(null)) {
-      INode targetNode = rootDir.getNode(srcs, true);
+      final INodesInPath inodesInPath = rootDir.getINodesInPath(srcs, true);
+      final INode targetNode = inodesInPath.getINode(0);
+
-      List<INode> contents = dirInode.getChildrenList();
+      final ReadOnlyList<INode> contents = dirInode.getChildrenList(
+          inodesInPath.getPathSnapshot());
-        int count = parent.getChildrenList().size();
+        int count = parent.getChildrenList(null).size();
-    for (INode child : dir.getChildrenList()) {
+    for (INode child : dir.getChildrenList(null)) {
