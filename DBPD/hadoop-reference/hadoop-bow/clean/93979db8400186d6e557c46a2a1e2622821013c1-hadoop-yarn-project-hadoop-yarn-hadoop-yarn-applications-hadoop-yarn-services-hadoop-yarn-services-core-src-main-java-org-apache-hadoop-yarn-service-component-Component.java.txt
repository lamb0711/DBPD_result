YARN-8122.  Added component health monitoring for YARN service.
            Contributed by Gour Saha

+import org.apache.hadoop.yarn.service.monitor.ComponentHealthThresholdMonitor;
+import java.util.concurrent.TimeUnit;
-import static org.apache.hadoop.yarn.service.conf.YarnServiceConf.CONTAINER_FAILURE_THRESHOLD;
-import static org.apache.hadoop.yarn.service.conf.YarnServiceConf.DEFAULT_CONTAINER_FAILURE_THRESHOLD;
-import static org.apache.hadoop.yarn.service.conf.YarnServiceConf.DEFAULT_READINESS_CHECK_ENABLED;
-import static org.apache.hadoop.yarn.service.conf.YarnServiceConf.DEFAULT_READINESS_CHECK_ENABLED_DEFAULT;
+import static org.apache.hadoop.yarn.service.conf.YarnServiceConf.*;
+  private boolean healthThresholdMonitorEnabled = false;
+    checkAndScheduleHealthThresholdMonitor();
+  private void checkAndScheduleHealthThresholdMonitor() {
+    // Determine health threshold percent
+    int healthThresholdPercent = YarnServiceConf.getInt(
+        CONTAINER_HEALTH_THRESHOLD_PERCENT,
+        DEFAULT_CONTAINER_HEALTH_THRESHOLD_PERCENT,
+        componentSpec.getConfiguration(), scheduler.getConfig());
+    // Validations
+    if (healthThresholdPercent == CONTAINER_HEALTH_THRESHOLD_PERCENT_DISABLED) {
+      LOG.info("No health threshold monitor enabled for component {}",
+          componentSpec.getName());
+      return;
+    }
+    // If threshold is set to outside acceptable range then don't enable monitor
+    if (healthThresholdPercent <= 0 || healthThresholdPercent > 100) {
+      LOG.error(
+          "Invalid health threshold percent {}% for component {}. Monitor not "
+              + "enabled.",
+          healthThresholdPercent, componentSpec.getName());
+      return;
+    }
+    // Determine the threshold properties
+    long window = YarnServiceConf.getLong(CONTAINER_HEALTH_THRESHOLD_WINDOW_SEC,
+        DEFAULT_CONTAINER_HEALTH_THRESHOLD_WINDOW_SEC,
+        componentSpec.getConfiguration(), scheduler.getConfig());
+    long initDelay = YarnServiceConf.getLong(
+        CONTAINER_HEALTH_THRESHOLD_INIT_DELAY_SEC,
+        DEFAULT_CONTAINER_HEALTH_THRESHOLD_INIT_DELAY_SEC,
+        componentSpec.getConfiguration(), scheduler.getConfig());
+    long pollFrequency = YarnServiceConf.getLong(
+        CONTAINER_HEALTH_THRESHOLD_POLL_FREQUENCY_SEC,
+        DEFAULT_CONTAINER_HEALTH_THRESHOLD_POLL_FREQUENCY_SEC,
+        componentSpec.getConfiguration(), scheduler.getConfig());
+    // Validations
+    if (window <= 0) {
+      LOG.error(
+          "Invalid health monitor window {} secs for component {}. Monitor not "
+              + "enabled.",
+          window, componentSpec.getName());
+      return;
+    }
+    if (initDelay < 0) {
+      LOG.error("Invalid health monitor init delay {} secs for component {}. "
+          + "Monitor not enabled.", initDelay, componentSpec.getName());
+      return;
+    }
+    if (pollFrequency <= 0) {
+      LOG.error(
+          "Invalid health monitor poll frequency {} secs for component {}. "
+              + "Monitor not enabled.",
+          pollFrequency, componentSpec.getName());
+      return;
+    }
+    LOG.info(
+        "Scheduling the health threshold monitor for component {} with percent "
+            + "= {}%, window = {} secs, poll freq = {} secs, init-delay = {} "
+            + "secs",
+        componentSpec.getName(), healthThresholdPercent, window, pollFrequency,
+        initDelay);
+    // Add 3 extra seconds to initial delay to account for the time taken to
+    // request containers before the monitor starts calculating health.
+    this.scheduler.executorService.scheduleAtFixedRate(
+        new ComponentHealthThresholdMonitor(this, healthThresholdPercent,
+            window),
+        initDelay + 3, pollFrequency, TimeUnit.SECONDS);
+    setHealthThresholdMonitorEnabled(true);
+  }
+
+
+  public boolean isHealthThresholdMonitorEnabled() {
+    return healthThresholdMonitorEnabled;
+  }
+
+  public void setHealthThresholdMonitorEnabled(
+      boolean healthThresholdMonitorEnabled) {
+    this.healthThresholdMonitorEnabled = healthThresholdMonitorEnabled;
+  }
