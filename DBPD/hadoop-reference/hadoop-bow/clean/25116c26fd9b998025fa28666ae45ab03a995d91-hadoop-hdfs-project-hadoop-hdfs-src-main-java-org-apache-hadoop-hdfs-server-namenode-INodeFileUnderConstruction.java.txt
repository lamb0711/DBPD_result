HDFS-4098. Add FileWithLink, INodeFileUnderConstructionWithLink and INodeFileUnderConstructionSnapshot in order to support append to snapshotted files.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1432788 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileUnderConstructionWithLink;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileWithLink;
+
+import com.google.common.base.Preconditions;
+  /** Convert the given file to an {@link INodeFileUnderConstruction}. */
+  public static INodeFileUnderConstruction toINodeFileUnderConstruction(
+      INodeFile file,
+      String clientName,
+      String clientMachine,
+      DatanodeDescriptor clientNode) {
+    Preconditions.checkArgument(!(file instanceof INodeFileUnderConstruction),
+        "file is already an INodeFileUnderConstruction");
+    final INodeFileUnderConstruction uc = new INodeFileUnderConstruction(
+        file.getLocalNameBytes(),
+        file.getFileReplication(),
+        file.getModificationTime(),
+        file.getPreferredBlockSize(),
+        file.getBlocks(),
+        file.getPermissionStatus(),
+        clientName,
+        clientMachine,
+        clientNode);
+    return file instanceof INodeFileWithLink?
+        new INodeFileUnderConstructionWithLink(uc): uc;
+  }
+
-    super(permissions.applyUMask(UMASK), BlockInfo.EMPTY_ARRAY, replication,
-        modTime, modTime, preferredBlockSize);
-    this.clientName = clientName;
-    this.clientMachine = clientMachine;
-    this.clientNode = clientNode;
+    this(null, replication, modTime, preferredBlockSize, BlockInfo.EMPTY_ARRAY,
+        permissions.applyUMask(UMASK), clientName, clientMachine, clientNode);
+ 
+  protected INodeFileUnderConstruction(INodeFileUnderConstruction that) {
+    super(that);
+    this.clientName = that.clientName;
+    this.clientMachine = that.clientMachine;
+    this.clientNode = that.clientNode;
+  }
-  //
-  // converts a INodeFileUnderConstruction into a INodeFile
-  // use the modification time as the access time
-  //
-  INodeFile convertToInodeFile(long mtime) {
-    assert allBlocksComplete() : "Can't finalize inode " + this
-      + " since it contains non-complete blocks! Blocks are "
-      + Arrays.asList(getBlocks());
-    //TODO SNAPSHOT: may convert to INodeFileWithLink
+  /**
+   * Converts an INodeFileUnderConstruction to an INodeFile.
+   * The original modification time is used as the access time.
+   * The new modification is the specified mtime.
+   */
+  protected INodeFile toINodeFile(long mtime) {
+    assertAllBlocksComplete();
-  /**
-   * @return true if all of the blocks in this file are marked as completed.
-   */
-  private boolean allBlocksComplete() {
-    for (BlockInfo b : getBlocks()) {
-      if (!b.isComplete()) {
-        return false;
-      }
+  /** Assert all blocks are complete. */
+  protected void assertAllBlocksComplete() {
+    final BlockInfo[] blocks = getBlocks();
+    for (int i = 0; i < blocks.length; i++) {
+      Preconditions.checkState(blocks[i].isComplete(), "Failed to finalize"
+          + " %s %s since blocks[%s] is non-complete, where blocks=%s.",
+          getClass().getSimpleName(), this, i, Arrays.asList(getBlocks()));
-    return true;
