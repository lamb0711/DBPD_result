svn merge -c -1430507 . for reverting HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430662 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.Socket;
-import org.apache.hadoop.hdfs.net.Peer;
-import org.apache.hadoop.hdfs.protocol.DatanodeID;
+import org.apache.hadoop.hdfs.protocol.datatransfer.DataTransferEncryptor;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import org.apache.hadoop.hdfs.security.token.block.DataEncryptionKey;
+import org.apache.hadoop.net.NetUtils;
-import com.google.common.base.Preconditions;
-
-    /**
-     * The peer that this BlockReader will be connected to.
-     * You must set this.
-     */
-    private Peer peer = null;
-    
-    /**
-     * The file name that this BlockReader pertains to.
-     * This is optional and only used for display and logging purposes.
-     */
+    private Socket socket = null;
-
-    /**
-     * The block that this BlockReader is reading.
-     * You must set this.
-     */
-    
-    /**
-     * The BlockTokenIdentifier to use, or null to use none.
-     */
-
-    /**
-     * The offset in the block to start reading at.
-     */
-    
-    /**
-     * The total number of bytes we might want to read, or -1 to assume no
-     * limit.
-     */
-    
-    /**
-     * The buffer size to use.
-     *
-     * If this is not set, we will use the default from the Conf.
-     */
-    
-    /**
-     * Whether or not we should verify the checksum.
-     *
-     * This is used instead of conf.verifyChecksum, because there are some
-     * cases when we may want to explicitly turn off checksum verification,
-     * such as when the caller has explicitly asked for a file to be opened
-     * without checksum verification.
-     */
-
-    /**
-     * Whether or not we should try to use short circuit local reads.
-     */
-
-    /**
-     * The name of the client using this BlockReader, for logging and
-     * debugging purposes.
-     */
-    
-    /**
-     * The DataNode on which this Block resides.
-     * You must set this.
-     */
-    private DatanodeID datanodeID = null;
+    private DataEncryptionKey encryptionKey = null;
+    private IOStreamPair ioStreamPair = null;
-    public Peer getPeer() {
-      return peer;
+    public Socket getSocket() {
+      return socket;
-    public Params setPeer(Peer peer) {
-      this.peer = peer;
+    public Params setSocket(Socket socket) {
+      this.socket = socket;
-    public Params setDatanodeID(DatanodeID datanodeID) {
-      this.datanodeID = datanodeID;
+    public Params setEncryptionKey(DataEncryptionKey encryptionKey) {
+      this.encryptionKey = encryptionKey;
-    public DatanodeID getDatanodeID() {
-      return datanodeID;
+    public DataEncryptionKey getEncryptionKey() {
+      return encryptionKey;
+    }
+    public IOStreamPair getIoStreamPair() {
+      return ioStreamPair;
+    }
+    public Params setIoStreamPair(IOStreamPair ioStreamPair) {
+      this.ioStreamPair = ioStreamPair;
+      return this;
-    Preconditions.checkNotNull(params.getPeer());
-    Preconditions.checkNotNull(params.getBlock());
-    Preconditions.checkNotNull(params.getDatanodeID());
-    // First, let's set the read and write timeouts appropriately.
-    // This will keep us from blocking forever if something goes wrong during
-    // network communication.
-    Peer peer = params.getPeer();
-    peer.setReadTimeout(params.getConf().socketTimeout);
-    peer.setWriteTimeout(HdfsServerConstants.WRITE_TIMEOUT);
-
-      // The legacy BlockReader doesn't require that the Peers it uses
-      // have associated ReadableByteChannels.  This makes it easier to use 
-      // with some older Socket classes like, say, SocksSocketImpl.
-      //
-      // TODO: create a wrapper class that makes channel-less sockets look like
-      // they have a channel, so that we can finally remove the legacy
-      // RemoteBlockReader.  See HDFS-2534.
+      if (params.getEncryptionKey() != null) {
+        throw new RuntimeException("Encryption is not supported with the legacy block reader.");
+      }
-      // The usual block reader.
+      Socket sock = params.getSocket();
+      if (params.getIoStreamPair() == null) {
+        params.setIoStreamPair(new IOStreamPair(NetUtils.getInputStream(sock),
+            NetUtils.getOutputStream(sock, HdfsServerConstants.WRITE_TIMEOUT)));
+        if (params.getEncryptionKey() != null) {
+          IOStreamPair encryptedStreams =
+              DataTransferEncryptor.getEncryptedStreams(
+                  params.getIoStreamPair().out, params.getIoStreamPair().in, 
+                  params.getEncryptionKey());
+          params.setIoStreamPair(encryptedStreams);
+        }
+      }
-}
+}
