YARN-3413. Changed Nodelabel attributes (like exclusivity) to be settable only via addToClusterNodeLabels but not changeable at runtime. (Wangda Tan via vinodkv)

+import java.util.ArrayList;
-import org.apache.hadoop.yarn.exceptions.YarnException;
-import org.apache.hadoop.yarn.nodelabels.event.StoreUpdateNodeLabelsEvent;
-      case UPDATE_NODE_LABELS:
-        StoreUpdateNodeLabelsEvent
-          storeSetNodeLabelsEventEvent =
-            (StoreUpdateNodeLabelsEvent) event;
-        store.updateNodeLabels(storeSetNodeLabelsEventEvent
-            .getUpdatedNodeLabels());
-        break;
-  /**
-   * Add multiple node labels to repository
-   * 
-   * @param labels
-   *          new node labels added
-   */
-  public void addToCluserNodeLabels(Set<String> labels) throws IOException {
+  public void addToCluserNodeLabels(Collection<NodeLabel> labels)
+      throws IOException {
-    Set<String> newLabels = new HashSet<String>();
-    labels = normalizeLabels(labels);
+    List<NodeLabel> newLabels = new ArrayList<NodeLabel>();
+    normalizeNodeLabels(labels);
-    for (String label : labels) {
-      checkAndThrowLabelName(label);
+    for (NodeLabel label : labels) {
+      checkAndThrowLabelName(label.getName());
-    for (String label : labels) {
+    for (NodeLabel label : labels) {
-      if (this.labelCollections.get(label) == null) {
-        this.labelCollections.put(label, new RMNodeLabel(label));
+      if (this.labelCollections.get(label.getName()) == null) {
+        this.labelCollections.put(label.getName(), new RMNodeLabel(label));
+
+  /**
+   * Add multiple node labels to repository
+   *
+   * @param labels
+   *          new node labels added
+   */
+  @VisibleForTesting
+  public void addToCluserNodeLabelsWithDefaultExclusivity(Set<String> labels)
+      throws IOException {
+    Set<NodeLabel> nodeLabels = new HashSet<NodeLabel>();
+    for (String label : labels) {
+      nodeLabels.add(NodeLabel.newInstance(label));
+    }
+    addToCluserNodeLabels(nodeLabels);
+  }
-  public Set<String> getClusterNodeLabels() {
+  public Set<String> getClusterNodeLabelNames() {
-  private void checkUpdateNodeLabels(
-      List<NodeLabel> updatedNodeLabels) throws YarnException {
-    // pre-check
-    for (NodeLabel label : updatedNodeLabels) {
-      if (!labelCollections.containsKey(label.getNodeLabel())) {
-        String message =
-          String.format(
-            "Trying to update a non-existing node-label=%s",
-            label.getNodeLabel());
-        LOG.error(message);
-        throw new YarnException(message);
-      }
-    }
-  }
-
-  @SuppressWarnings("unchecked")
-  public void updateNodeLabels(
-      List<NodeLabel> updatedNodeLabels) throws YarnException {
+  public List<NodeLabel> getClusterNodeLabels() {
-      writeLock.lock();
-      checkUpdateNodeLabels(updatedNodeLabels);
-
-      for (NodeLabel label : updatedNodeLabels) {
-        RMNodeLabel rmLabel = labelCollections.get(label.getNodeLabel());
-        rmLabel.setIsExclusive(label.getIsExclusive());
+      readLock.lock();
+      List<NodeLabel> nodeLabels = new ArrayList<>();
+      for (RMNodeLabel label : labelCollections.values()) {
+        nodeLabels.add(NodeLabel.newInstance(label.getLabelName(),
+            label.getIsExclusive()));
-
-      if (null != dispatcher && !updatedNodeLabels.isEmpty()) {
-        dispatcher.getEventHandler().handle(
-          new StoreUpdateNodeLabelsEvent(updatedNodeLabels));
-      }
+      return nodeLabels;
-      writeLock.unlock();
+      readLock.unlock();
+  private void normalizeNodeLabels(Collection<NodeLabel> labels) {
+    for (NodeLabel label : labels) {
+      label.setName(normalizeLabel(label.getName()));
+    }
+  }
+
