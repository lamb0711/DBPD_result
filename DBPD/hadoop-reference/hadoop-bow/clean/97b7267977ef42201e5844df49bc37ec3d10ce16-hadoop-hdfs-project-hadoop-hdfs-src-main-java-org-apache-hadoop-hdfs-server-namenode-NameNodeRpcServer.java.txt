HDFS-5121.  Add RPCs for creating and manipulating cache pools.  (Contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1519841 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.BatchedRemoteIterator;
+import org.apache.hadoop.fs.BatchedRemoteIterator.BatchedEntries;
+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
-  private class PathCacheEntriesIterator
-      implements RemoteIterator<PathCacheEntry> {
-    private long prevId;
+  private class ServerSidePathCacheEntriesIterator
+      extends BatchedRemoteIterator<Long, PathCacheEntry> {
+
-    private final int repliesPerRequest;
-    private List<PathCacheEntry> entries;
-    private int idx;
-    public PathCacheEntriesIterator(long prevId, String pool,
-        int repliesPerRequest) {
-      this.prevId = prevId;
+    public ServerSidePathCacheEntriesIterator(Long firstKey,
+        int maxRepliesPerRequest, String pool) {
+      super(firstKey, maxRepliesPerRequest);
-      this.repliesPerRequest = repliesPerRequest;
-      this.entries = null;
-      this.idx = -1;
-    }
-
-    private void makeRequest() throws IOException {
-      idx = 0;
-      entries = null;
-      entries = namesystem.listPathCacheEntries(prevId, pool,
-          repliesPerRequest);
-      if (entries.isEmpty()) {
-        entries = null;
-      }
-    }
-
-    private void makeRequestIfNeeded() throws IOException {
-      if (idx == -1) {
-        makeRequest();
-      } else if ((entries != null) && (idx >= entries.size())) {
-        if (entries.size() < repliesPerRequest) {
-          // Last time, we got fewer entries than requested.
-          // So we should be at the end.
-          entries = null;
-        } else {
-          makeRequest();
-        }
-      }
-    public boolean hasNext() throws IOException {
-      makeRequestIfNeeded();
-      return (entries != null);
+    public BatchedEntries<PathCacheEntry> makeRequest(
+        Long nextKey, int maxRepliesPerRequest) throws IOException {
+      return new BatchedListEntries<PathCacheEntry>(
+          namesystem.listPathCacheEntries(nextKey, pool,
+              maxRepliesPerRequest));
-    public PathCacheEntry next() throws IOException {
-      makeRequestIfNeeded();
-      if (entries == null) {
-        throw new NoSuchElementException();
-      }
-      PathCacheEntry entry = entries.get(idx++);
-      prevId = entry.getEntryId();
-      return entry;
+    public Long elementToNextKey(PathCacheEntry entry) {
+      return entry.getEntryId();
-    return new PathCacheEntriesIterator(prevId, pool, maxReplies);
+    return new ServerSidePathCacheEntriesIterator(prevId, maxReplies, pool);
+  }
+
+  @Override
+  public void addCachePool(CachePoolInfo info) throws IOException {
+    namesystem.addCachePool(info);
+  }
+
+  @Override
+  public void modifyCachePool(CachePoolInfo info) throws IOException {
+    namesystem.modifyCachePool(info);
+  }
+
+  @Override
+  public void removeCachePool(String cachePoolName) throws IOException {
+    namesystem.removeCachePool(cachePoolName);
+  }
+
+  private class ServerSideCachePoolIterator 
+      extends BatchedRemoteIterator<String, CachePoolInfo> {
+
+    public ServerSideCachePoolIterator(String prevKey, int maxRepliesPerRequest) {
+      super(prevKey, maxRepliesPerRequest);
+    }
+
+    @Override
+    public BatchedEntries<CachePoolInfo> makeRequest(String prevKey,
+        int maxRepliesPerRequest) throws IOException {
+      return new BatchedListEntries<CachePoolInfo>(
+          namesystem.listCachePools(prevKey, maxRepliesPerRequest));
+    }
+
+    @Override
+    public String elementToNextKey(CachePoolInfo element) {
+      return element.getPoolName();
+    }
+  }
+
+  @Override
+  public RemoteIterator<CachePoolInfo> listCachePools(String prevKey,
+      int maxRepliesPerRequest) throws IOException {
+    return new ServerSideCachePoolIterator(prevKey, maxRepliesPerRequest);
