HDDS-915. Submit client request to OM Ratis server.
Contributed by Hanisha Koneru.

+import java.net.InetAddress;
+import java.util.concurrent.atomic.AtomicLong;
+import org.apache.ratis.protocol.RaftGroup;
+import org.apache.ratis.protocol.RaftPeer;
+  private final InetSocketAddress omRatisAddress;
+  private final RaftGroupId raftGroupId;
+  private final RaftGroup raftGroup;
+  private final RaftPeerId raftPeerId;
-  private OzoneManagerRatisServer(String omId, int port, Configuration conf)
-      throws IOException {
+  private static final AtomicLong CALL_ID_COUNTER = new AtomicLong();
+
+  private static long nextCallId() {
+    return CALL_ID_COUNTER.getAndIncrement() & Long.MAX_VALUE;
+  }
+
+  private OzoneManagerRatisServer(String omId, InetAddress addr, int port,
+      Configuration conf) throws IOException {
+    this.omRatisAddress = new InetSocketAddress(addr.getHostAddress(), port);
+    // TODO: When implementing replicated OM ratis servers, RaftGroupID
+    // should be the same across all the OMs. Add all the OM servers as Raft
+    // Peers.
+    this.raftGroupId = RaftGroupId.randomId();
+    this.raftPeerId = RaftPeerId.getRaftPeerId(omId);
+
+    RaftPeer raftPeer = new RaftPeer(raftPeerId, omRatisAddress);
+    this.raftGroup = RaftGroup.valueOf(raftGroupId, raftPeer);
-        .setServerId(RaftPeerId.valueOf(omId))
+        .setServerId(this.raftPeerId)
+        .setGroup(this.raftGroup)
-        .setStateMachineRegistry(this::getStateMachine)
+        .setStateMachine(getStateMachine(this.raftGroupId))
-      Configuration ozoneConf) throws IOException {
+      InetAddress omAddress, Configuration ozoneConf) throws IOException {
-    return new OzoneManagerRatisServer(omId, localPort, ozoneConf);
+    return new OzoneManagerRatisServer(omId, omAddress, localPort, ozoneConf);
+  }
+
+  public RaftGroup getRaftGroup() {
+    return this.raftGroup;
-    return new BaseStateMachine();
+    return  new OzoneManagerStateMachine(null);
-    RaftServerConfigKeys.Log.Appender
-        .setBufferElementLimit(properties, logAppenderQueueNumElements);
+    RaftServerConfigKeys.Log.Appender.setBufferElementLimit(properties,
+        logAppenderQueueNumElements);
-    RaftServerConfigKeys.RetryCache
-        .setExpiryTime(properties, retryCacheTimeout);
+    RaftServerConfigKeys.RetryCache.setExpiryTime(properties,
+        retryCacheTimeout);
-    TimeUnit clientRequestTimeoutUnit =
-        OMConfigKeys.OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DEFAULT.getUnit();
+    TimeUnit clientRequestTimeoutUnit = OMConfigKeys
+        .OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DURATION_DEFAULT .getUnit();
-        OMConfigKeys.OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_KEY,
-        OMConfigKeys.OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DEFAULT
+        OMConfigKeys.OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DURATION_KEY,
+        OMConfigKeys.OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DURATION_DEFAULT
-     * 1. leader election timeout
-     * 2. node failure timeout
-     * 3.
+     * 1. node failure timeout
+    // Set the ratis leader election timeout
+    TimeUnit leaderElectionMinTimeoutUnit =
+        OMConfigKeys.OZONE_OM_LEADER_ELECTION_MINIMUM_TIMEOUT_DURATION_DEFAULT
+            .getUnit();
+    long leaderElectionMinTimeoutduration = conf.getTimeDuration(
+        OMConfigKeys.OZONE_OM_LEADER_ELECTION_MINIMUM_TIMEOUT_DURATION_KEY,
+        OMConfigKeys.OZONE_OM_LEADER_ELECTION_MINIMUM_TIMEOUT_DURATION_DEFAULT
+            .getDuration(), leaderElectionMinTimeoutUnit);
+    final TimeDuration leaderElectionMinTimeout = TimeDuration.valueOf(
+        leaderElectionMinTimeoutduration, leaderElectionMinTimeoutUnit);
+    RaftServerConfigKeys.Rpc.setTimeoutMin(properties,
+        leaderElectionMinTimeout);
+    long leaderElectionMaxTimeout = leaderElectionMinTimeout.toLong(
+        TimeUnit.MILLISECONDS) + 200;
+    RaftServerConfigKeys.Rpc.setTimeoutMax(properties,
+        TimeDuration.valueOf(leaderElectionMaxTimeout, TimeUnit.MILLISECONDS));
-
