YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee

-package org.apache.hadoop.yarn.server.timelineservice.aggregator;
+package org.apache.hadoop.yarn.server.timelineservice.collector;
- * The top-level server for the per-node timeline aggregator collection. Currently
+ * The top-level server for the per-node timeline collector manager. Currently
-public class PerNodeTimelineAggregatorsAuxService extends AuxiliaryService {
+public class PerNodeTimelineCollectorsAuxService extends AuxiliaryService {
-      LogFactory.getLog(PerNodeTimelineAggregatorsAuxService.class);
+      LogFactory.getLog(PerNodeTimelineCollectorsAuxService.class);
-  private final TimelineAggregatorsCollection aggregatorCollection;
+  private final TimelineCollectorManager collectorManager;
-  public PerNodeTimelineAggregatorsAuxService() {
+  public PerNodeTimelineCollectorsAuxService() {
-    this(TimelineAggregatorsCollection.getInstance());
+    this(TimelineCollectorManager.getInstance());
-  @VisibleForTesting PerNodeTimelineAggregatorsAuxService(
-      TimelineAggregatorsCollection aggregatorCollection) {
-    super("timeline_aggregator");
-    this.aggregatorCollection = aggregatorCollection;
+  @VisibleForTesting PerNodeTimelineCollectorsAuxService(
+      TimelineCollectorManager collectorsManager) {
+    super("timeline_collector");
+    this.collectorManager = collectorsManager;
-    aggregatorCollection.init(conf);
+    collectorManager.init(conf);
-    aggregatorCollection.start();
+    collectorManager.start();
-    aggregatorCollection.stop();
+    collectorManager.stop();
-  // per-node aggregator runs separate from the node manager
+  // per-node collector runs separate from the node manager
-   * Creates and adds an app level aggregator for the specified application id.
-   * The aggregator is also initialized and started. If the service already
+   * Creates and adds an app level collector for the specified application id.
+   * The collector is also initialized and started. If the service already
-    AppLevelTimelineAggregator aggregator =
-        new AppLevelTimelineAggregator(appId.toString());
-    return (aggregatorCollection.putIfAbsent(appId, aggregator)
-        == aggregator);
+    AppLevelTimelineCollector collector =
+        new AppLevelTimelineCollector(appId.toString());
+    return (collectorManager.putIfAbsent(appId, collector)
+        == collector);
-   * Removes the app level aggregator for the specified application id. The
-   * aggregator is also stopped as a result. If the aggregator does not exist, no
+   * Removes the app level collector for the specified application id. The
+   * collector is also stopped as a result. If the collector does not exist, no
-    return aggregatorCollection.remove(appIdString);
+    return collectorManager.remove(appIdString);
-   * Creates and adds an app level aggregator for the specified application id.
-   * The aggregator is also initialized and started. If the aggregator already
-   * exists, no new aggregator is created.
+   * Creates and adds an app level collector for the specified application id.
+   * The collector is also initialized and started. If the collector already
+   * exists, no new collector is created.
-    // app level aggregator service
+    // app level collector service
-   * Removes the app level aggregator for the specified application id. The
-   * aggregator is also stopped as a result. If the aggregator does not exist, no
+   * Removes the app level collector for the specified application id. The
+   * collector is also stopped as a result. If the collector does not exist, no
-    // level aggregator service
+    // level collector service
-    return aggregatorCollection.containsKey(appId);
+    return collectorManager.containsKey(appId);
-  public static PerNodeTimelineAggregatorsAuxService launchServer(String[] args) {
+  public static PerNodeTimelineCollectorsAuxService
+      launchServer(String[] args, TimelineCollectorManager collectorManager) {
-    StringUtils.startupShutdownMessage(PerNodeTimelineAggregatorsAuxService.class, args,
-        LOG);
-    PerNodeTimelineAggregatorsAuxService auxService = null;
+    StringUtils.startupShutdownMessage(
+        PerNodeTimelineCollectorsAuxService.class, args, LOG);
+    PerNodeTimelineCollectorsAuxService auxService = null;
-      auxService = new PerNodeTimelineAggregatorsAuxService();
+      auxService = collectorManager == null ?
+          new PerNodeTimelineCollectorsAuxService() :
+          new PerNodeTimelineCollectorsAuxService(collectorManager);
-      LOG.fatal("Error starting PerNodeAggregatorServer", t);
-      ExitUtil.terminate(-1, "Error starting PerNodeAggregatorServer");
+      LOG.fatal("Error starting PerNodeTimelineCollectorServer", t);
+      ExitUtil.terminate(-1, "Error starting PerNodeTimelineCollectorServer");
-    private final PerNodeTimelineAggregatorsAuxService auxService;
+    private final PerNodeTimelineCollectorsAuxService auxService;
-    public ShutdownHook(PerNodeTimelineAggregatorsAuxService auxService) {
+    public ShutdownHook(PerNodeTimelineCollectorsAuxService auxService) {
-    launchServer(args);
+    launchServer(args, null);
