HDFS-3906. QJM: quorum timeout on failover with large log segment. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1383251 13f79535-47bb-0310-9956-ffa450edef68

-  private static final int NEWEPOCH_TIMEOUT_MS = 10000;
-  
-  /**
-   * Fence any previous writers, and obtain a unique epoch number
-   * for write-access to the journal nodes.
-   *
-   * @param nsInfo the expected namespace information. If the remote
-   * node does not match with this namespace, the request will be rejected.
-   * @return the new, unique epoch number
-   * @throws IOException
-   */
-  Map<AsyncLogger, NewEpochResponseProto> createNewUniqueEpoch(
-      NamespaceInfo nsInfo) throws IOException {
-    Preconditions.checkState(myEpoch == -1,
-        "epoch already created: epoch=" + myEpoch);
-    
-    Map<AsyncLogger, GetJournalStateResponseProto> lastPromises =
-      waitForWriteQuorum(getJournalState(), NEWEPOCH_TIMEOUT_MS);
-    
-    long maxPromised = Long.MIN_VALUE;
-    for (GetJournalStateResponseProto resp : lastPromises.values()) {
-      maxPromised = Math.max(maxPromised, resp.getLastPromisedEpoch());
-    }
-    assert maxPromised >= 0;
-    
-    long myEpoch = maxPromised + 1;
-    Map<AsyncLogger, NewEpochResponseProto> resps =
-        waitForWriteQuorum(newEpoch(nsInfo, myEpoch), NEWEPOCH_TIMEOUT_MS);
-    this.myEpoch = myEpoch;
-    setEpoch(myEpoch);
-    return resps;
-  }
-  
-  private void setEpoch(long e) {
+  void setEpoch(long e) {
+    Preconditions.checkState(!isEpochEstablished(),
+        "Epoch already established: epoch=%s", myEpoch);
+    myEpoch = e;
-
+   * @return true if an epoch has been established.
+   */
+  boolean isEpochEstablished() {
+    return myEpoch != INVALID_EPOCH;
+  }
+  
+  /**
+   * @param operationName textual description of the operation, for logging
-      int timeoutMs) throws IOException {
+      int timeoutMs, String operationName) throws IOException {
-          timeoutMs);
+          timeoutMs, operationName);
-  private QuorumCall<AsyncLogger, GetJournalStateResponseProto> getJournalState() {
+  public QuorumCall<AsyncLogger, GetJournalStateResponseProto> getJournalState() {
-  private QuorumCall<AsyncLogger,NewEpochResponseProto> newEpoch(
+  public QuorumCall<AsyncLogger,NewEpochResponseProto> newEpoch(
