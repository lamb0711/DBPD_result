YARN-7317. Fix overallocation resulted from ceiling in LocalityMulticastAMRMProxyPolicy. (contributed by Botong Huang via curino)

+import org.apache.hadoop.yarn.server.federation.policies.FederationPolicyUtils;
+import org.apache.hadoop.yarn.server.federation.policies.exceptions.FederationPolicyException;
+import com.google.common.annotations.VisibleForTesting;
-      AllocationBookkeeper allocationBookkeeper) {
+      AllocationBookkeeper allocationBookkeeper) throws YarnException {
+    int numContainer = originalResourceRequest.getNumContainers();
-    for (SubClusterId targetId : targetSubclusters) {
-      float numContainer = originalResourceRequest.getNumContainers();
-
-      // If the ANY request has 0 containers to begin with we must forward it to
-      // any RM we have previously contacted (this might be the user way
-      // to cancel a previous request).
-      if (numContainer == 0 && headroom.containsKey(targetId)) {
-        allocationBookkeeper.addAnyRR(targetId, originalResourceRequest);
+    // If the ANY request has 0 containers to begin with we must forward it to
+    // any RM we have previously contacted (this might be the user way
+    // to cancel a previous request).
+    if (numContainer == 0) {
+      for (SubClusterId targetId : targetSubclusters) {
+        if (headroom.containsKey(targetId)) {
+          allocationBookkeeper.addAnyRR(targetId, originalResourceRequest);
+        }
+      return;
+    }
+    // List preserves iteration order
+    List<SubClusterId> targetSCs = new ArrayList<>(targetSubclusters);
+
+    // Compute the distribution weights
+    ArrayList<Float> weightsList = new ArrayList<>();
+    for (SubClusterId targetId : targetSCs) {
-        float localityBasedWeight = getLocalityBasedWeighting(allocationId,
-            targetId, allocationBookkeeper);
-        numContainer = numContainer * localityBasedWeight;
+        weightsList.add(getLocalityBasedWeighting(allocationId, targetId,
+            allocationBookkeeper));
-        numContainer = numContainer
-            * (hrAlpha * headroomWeighting + (1 - hrAlpha) * policyWeighting);
+        weightsList
+            .add(hrAlpha * headroomWeighting + (1 - hrAlpha) * policyWeighting);
+    }
+    // Compute the integer container counts for each sub-cluster
+    ArrayList<Integer> containerNums =
+        computeIntegerAssignment(numContainer, weightsList);
+    int i = 0;
+    for (SubClusterId targetId : targetSCs) {
-      if (numContainer > 0) {
+      if (containerNums.get(i) > 0) {
-        out.setNumContainers((int) Math.ceil(numContainer));
+        out.setNumContainers(containerNums.get(i));
+      i++;
+   * Split the integer into bins according to the weights.
+   *
+   * @param totalNum total number of containers to split
+   * @param weightsList the weights for each subcluster
+   * @return the container allocation after split
+   * @throws YarnException if fails
+   */
+  @VisibleForTesting
+  protected ArrayList<Integer> computeIntegerAssignment(int totalNum,
+      ArrayList<Float> weightsList) throws YarnException {
+    int i, residue;
+    ArrayList<Integer> ret = new ArrayList<>();
+    float totalWeight = 0, totalNumFloat = totalNum;
+
+    if (weightsList.size() == 0) {
+      return ret;
+    }
+    for (i = 0; i < weightsList.size(); i++) {
+      ret.add(0);
+      if (weightsList.get(i) > 0) {
+        totalWeight += weightsList.get(i);
+      }
+    }
+    if (totalWeight == 0) {
+      StringBuilder sb = new StringBuilder();
+      for (Float weight : weightsList) {
+        sb.append(weight + ", ");
+      }
+      throw new FederationPolicyException(
+          "No positive value found in weight array " + sb.toString());
+    }
+
+    // First pass, do flooring for all bins
+    residue = totalNum;
+    for (i = 0; i < weightsList.size(); i++) {
+      if (weightsList.get(i) > 0) {
+        int base = (int) (totalNumFloat * weightsList.get(i) / totalWeight);
+        ret.set(i, ret.get(i) + base);
+        residue -= base;
+      }
+    }
+
+    // By now residue < weights.length, assign one a time
+    for (i = 0; i < residue; i++) {
+      int index = FederationPolicyUtils.getWeightedRandom(weightsList);
+      ret.set(index, ret.get(index) + 1);
+    }
+    return ret;
+  }
+
+  /**
