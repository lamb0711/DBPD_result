Revert "HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao."

This reverts commit aeecfa24f4fb6af289920cbf8830c394e66bd78e.

+import java.io.FileDescriptor;
-import org.apache.hadoop.hdfs.server.datanode.fsdataset.ReplicaInputStreams;
+import org.apache.hadoop.io.nativeio.NativeIO;
-
-  /** InputStreams and file descriptors to read block/checksum. */
-  private ReplicaInputStreams ris;
+  /** Stream to read block data from */
+  private InputStream blockIn;
+  /** Stream to read checksum */
+  private DataInputStream checksumIn;
+  
+  /** The file descriptor of the block being sent */
+  private FileDescriptor blockInFd;
+  /** The reference to the volume where the block is located */
+  private FsVolumeReference volumeRef;
-    InputStream blockIn = null;
-    DataInputStream checksumIn = null;
-    FsVolumeReference volumeRef = null;
-      volumeRef = datanode.data.getVolume(block).obtainReference();
+      this.volumeRef = datanode.data.getVolume(block).obtainReference();
-      ris = new ReplicaInputStreams(blockIn, checksumIn, volumeRef);
+      if (blockIn instanceof FileInputStream) {
+        blockInFd = ((FileInputStream)blockIn).getFD();
+      } else {
+        blockInFd = null;
+      }
+      IOUtils.closeStream(blockIn);
-    if (ris.getDataInFd() != null &&
+    if (blockInFd != null &&
-        ris.dropCacheBehindReads(block.getBlockName(), lastCacheDropOffset,
+        NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(
+            block.getBlockName(), blockInFd, lastCacheDropOffset,
-
-    try {
-      ris.closeStreams();
-    } finally {
-      IOUtils.closeStream(ris);
-      ris = null;
+    
+    IOException ioe = null;
+    if(checksumIn!=null) {
+      try {
+        checksumIn.close(); // close checksum file
+      } catch (IOException e) {
+        ioe = e;
+      }
+      checksumIn = null;
+    }   
+    if(blockIn!=null) {
+      try {
+        blockIn.close(); // close data file
+      } catch (IOException e) {
+        ioe = e;
+      }
+      blockIn = null;
+      blockInFd = null;
+    }
+    if (volumeRef != null) {
+      IOUtils.cleanup(null, volumeRef);
+      volumeRef = null;
+    }
+    // throw IOException if there is any
+    if(ioe!= null) {
+      throw ioe;
-    if (checksumSize > 0 && ris.getChecksumIn() != null) {
+    if (checksumSize > 0 && checksumIn != null) {
-      ris.readDataFully(buf, dataOff, dataLen);
+      IOUtils.readFully(blockIn, buf, dataOff, dataLen);
-
+        
-        FileChannel fileCh = ((FileInputStream)ris.getDataIn()).getChannel();
+        FileChannel fileCh = ((FileInputStream)blockIn).getChannel();
-        sockOut.transferToFully(fileCh, blockInPosition, dataLen,
+        sockOut.transferToFully(fileCh, blockInPosition, dataLen, 
-              ris.getVolumeRef().getVolume().getStorageID(),
+              volumeRef.getVolume().getStorageID(),
-    if (checksumSize <= 0 && ris.getChecksumIn() == null) {
+    if (checksumSize <= 0 && checksumIn == null) {
-      ris.readChecksumFully(buf, checksumOffset, checksumLen);
+      checksumIn.readFully(buf, checksumOffset, checksumLen);
-      ris.closeChecksumStream();
+      IOUtils.closeStream(checksumIn);
+      checksumIn = null;
-    if (isLongRead() && ris.getDataInFd() != null) {
+    if (isLongRead() && blockInFd != null) {
-      ris.dropCacheBehindReads(block.getBlockName(), 0, 0,
-          POSIX_FADV_SEQUENTIAL);
+      NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(
+          block.getBlockName(), blockInFd, 0, 0, POSIX_FADV_SEQUENTIAL);
-          && ris.getDataIn() instanceof FileInputStream;
+          && blockIn instanceof FileInputStream;
-        FileChannel fileChannel =
-            ((FileInputStream)ris.getDataIn()).getChannel();
+        FileChannel fileChannel = ((FileInputStream)blockIn).getChannel();
-    if (ris.getDataInFd() == null) {
-      return;
-    }
+    if (blockInFd == null) return;
-          clientTraceFmt, ris.getDataInFd(), offset, readaheadLength,
-          Long.MAX_VALUE, curReadahead);
+          clientTraceFmt, blockInFd, offset, readaheadLength, Long.MAX_VALUE,
+          curReadahead);
-        ris.dropCacheBehindReads(block.getBlockName(), lastCacheDropOffset,
+        NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(
+            block.getBlockName(), blockInFd, lastCacheDropOffset,
