HDFS-14454. RBF: getContentSummary() should allow non-existing folders. Contributed by Inigo Goiri.

-    Map<RemoteLocation, DirectoryListing> listings =
-        rpcClient.invokeConcurrent(locations, method,
-            !this.allowPartialList, false, DirectoryListing.class);
+    final List<RemoteResult<RemoteLocation, DirectoryListing>> listings =
+        rpcClient.invokeConcurrent(
+            locations, method, false, -1, DirectoryListing.class);
-      for (Map.Entry<RemoteLocation, DirectoryListing> entry :
-          listings.entrySet()) {
-        RemoteLocation location = entry.getKey();
-        DirectoryListing listing = entry.getValue();
-        if (listing == null) {
-          LOG.debug("Cannot get listing from {}", location);
-        } else {
+      for (RemoteResult<RemoteLocation, DirectoryListing> result : listings) {
+        if (result.hasException()) {
+          IOException ioe = result.getException();
+          if (ioe instanceof FileNotFoundException) {
+            RemoteLocation location = result.getLocation();
+            LOG.debug("Cannot get listing from {}", location);
+          } else if (!allowPartialList) {
+            throw ioe;
+          }
+        } else if (result.getResult() != null) {
+          DirectoryListing listing = result.getResult();
-      for (Object value : listings.values()) {
-        DirectoryListing listing = (DirectoryListing) value;
+      for (RemoteResult<RemoteLocation, DirectoryListing> result : listings) {
+        DirectoryListing listing = result.getResult();
-            if (totalRemainingEntries > 0 && filename.compareTo(lastName) > 0) {
+            if (totalRemainingEntries > 0 &&
+                filename.compareTo(lastName) > 0) {
-    Collection<ContentSummary> summaries = new LinkedList<>();
+    final Collection<ContentSummary> summaries = new ArrayList<>();
+    final List<RemoteLocation> locations =
+        rpcServer.getLocationsForPath(path, false);
+    final RemoteMethod method = new RemoteMethod("getContentSummary",
+        new Class<?>[] {String.class}, new RemoteParam());
+    final List<RemoteResult<RemoteLocation, ContentSummary>> results =
+        rpcClient.invokeConcurrent(locations, method,
+            false, -1, ContentSummary.class);
-    try {
-      final List<RemoteLocation> locations =
-          rpcServer.getLocationsForPath(path, false);
-      RemoteMethod method = new RemoteMethod("getContentSummary",
-          new Class<?>[] {String.class}, new RemoteParam());
-      Map<RemoteLocation, ContentSummary> results =
-          rpcClient.invokeConcurrent(locations, method,
-              !this.allowPartialList, false, ContentSummary.class);
-      summaries.addAll(results.values());
-    } catch (FileNotFoundException e) {
-      notFoundException = e;
+    for (RemoteResult<RemoteLocation, ContentSummary> result : results) {
+      if (result.hasException()) {
+        IOException ioe = result.getException();
+        if (ioe instanceof FileNotFoundException) {
+          notFoundException = (FileNotFoundException)ioe;
+        } else if (!allowPartialList) {
+          throw ioe;
+        }
+      } else if (result.getResult() != null) {
+        summaries.add(result.getResult());
+      }
-          ContentSummary mountSummary = getContentSummary(childPath.toString());
+          ContentSummary mountSummary = getContentSummary(
+              childPath.toString());
