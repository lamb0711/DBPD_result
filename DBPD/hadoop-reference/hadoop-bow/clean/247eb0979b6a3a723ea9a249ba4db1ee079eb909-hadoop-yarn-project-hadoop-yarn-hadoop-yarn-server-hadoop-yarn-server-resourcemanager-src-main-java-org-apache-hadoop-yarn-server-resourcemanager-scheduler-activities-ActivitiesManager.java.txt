YARN-10319. Record Last N Scheduler Activities from ActivitiesManager

Reviewed by Tao Yang and Adam Antal.

+import org.apache.commons.lang3.tuple.Pair;
+import java.util.concurrent.ConcurrentLinkedDeque;
+import java.util.concurrent.atomic.AtomicInteger;
-  private boolean recordNextAvailableNode = false;
+  private AtomicInteger recordCount = new AtomicInteger(0);
+  private volatile ConcurrentLinkedDeque<Pair<NodeId, List<NodeAllocation>>>
+      lastNActivities;
+    lastNActivities = new ConcurrentLinkedDeque<>();
+
+  public List<ActivitiesInfo> recordAndGetBulkActivitiesInfo(
+      int activitiesCount, RMWSConsts.ActivitiesGroupBy groupBy)
+      throws InterruptedException {
+    recordCount.set(activitiesCount);
+    while (recordCount.get() > 0) {
+      Thread.sleep(1);
+    }
+    Iterator<Pair<NodeId, List<NodeAllocation>>> ite =
+        lastNActivities.iterator();
+    List<ActivitiesInfo> outList = new ArrayList<>();
+    while (ite.hasNext()) {
+      Pair<NodeId, List<NodeAllocation>> pair = ite.next();
+      outList.add(new ActivitiesInfo(pair.getRight(),
+          pair.getLeft().toString(), groupBy));
+    }
+    // reset with new activities
+    lastNActivities = new ConcurrentLinkedDeque<>();
+    return outList;
+  }
+
-      recordNextAvailableNode = true;
+      recordCount.compareAndSet(0, 1);
-    if (recordNextAvailableNode) {
+    if (recordCount.get() > 0) {
-        if (recordNextAvailableNode) {
-          recordNextAvailableNode = false;
+        if (recordCount.get() > 0) {
+          recordCount.getAndDecrement();
+        if (recordCount.get() >= 0) {
+          lastNActivities.add(Pair.of(nodeID, value));
+        }
