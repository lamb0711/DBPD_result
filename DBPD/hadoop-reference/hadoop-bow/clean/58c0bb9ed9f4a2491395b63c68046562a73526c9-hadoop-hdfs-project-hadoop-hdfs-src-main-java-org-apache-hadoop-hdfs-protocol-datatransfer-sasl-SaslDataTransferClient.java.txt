HDFS-6606. Optimize HDFS Encrypted Transport performance. (yliu)

-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATA_TRANSFER_PROTECTION_KEY;
+import java.util.List;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.crypto.CipherOption;
+import org.apache.hadoop.crypto.CipherSuite;
+import com.google.common.collect.Lists;
+  private final Configuration conf;
+   * @param conf the configuration
-  public SaslDataTransferClient(SaslPropertiesResolver saslPropsResolver,
+  public SaslDataTransferClient(Configuration conf, 
+      SaslPropertiesResolver saslPropsResolver,
-    this(saslPropsResolver, trustedChannelResolver, null);
+    this(conf, saslPropsResolver, trustedChannelResolver, null);
+   * @param conf the configuration
-  public SaslDataTransferClient(SaslPropertiesResolver saslPropsResolver,
+  public SaslDataTransferClient(Configuration conf, 
+      SaslPropertiesResolver saslPropsResolver,
+    this.conf = conf;
-      performSaslStep1(out, in, sasl);
-
-      // step 2 (client-side only)
+      List<CipherOption> cipherOptions = null;
+      if (requestedQopContainsPrivacy(saslProps)) {
+        // Negotiation cipher options
+        CipherOption option = new CipherOption(CipherSuite.AES_CTR_NOPADDING);
+        cipherOptions = Lists.newArrayListWithCapacity(1);
+        cipherOptions.add(option);
+      }
+      sendSaslMessageAndNegotiationCipherOptions(out, localResponse, 
+          cipherOptions);
+
+      // step 2 (client-side only)
+      SaslResponseWithNegotiatedCipherOption response = 
+          readSaslMessageAndNegotiatedCipherOption(in);
+      localResponse = sasl.evaluateChallengeOrResponse(response.payload);
-      return sasl.createStreamPair(out, in);
+      CipherOption cipherOption = null;
+      if (sasl.isNegotiatedQopPrivacy()) {
+        // Unwrap the negotiated cipher option
+        cipherOption = unwrap(response.cipherOption, sasl);
+      }
+
+      // If negotiated cipher option is not null, we will use it to create 
+      // stream pair.
+      return cipherOption != null ? createStreamPair(
+          conf, cipherOption, underlyingOut, underlyingIn, false) : 
+            sasl.createStreamPair(out, in);
