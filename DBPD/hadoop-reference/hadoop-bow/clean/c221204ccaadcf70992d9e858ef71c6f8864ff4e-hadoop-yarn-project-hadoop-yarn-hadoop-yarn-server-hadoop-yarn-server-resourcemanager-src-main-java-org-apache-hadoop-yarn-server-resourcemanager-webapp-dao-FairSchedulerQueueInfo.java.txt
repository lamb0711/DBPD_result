YARN-883. Expose Fair Scheduler-specific queue metrics. (sandyr via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1497884 13f79535-47bb-0310-9956-ffa450edef68

-  private int fairShare;
-  private int minShare;
-  private int maxShare;
-  private int clusterMaxMem;
-  
-  private float fractionUsed;
-  private float fractionFairShare;
-  private float fractionMinShare;
+  private float fractionMemUsed;
+  private float fractionMemFairShare;
+  private float fractionMemMinShare;
+  private float fractionMemMaxShare;
+  private Resource fairResources;
+  private Resource clusterResources;
-    Resource clusterMax = scheduler.getClusterCapacity();
-    clusterMaxMem = clusterMax.getMemory();
+    clusterResources = scheduler.getClusterCapacity();
-    fractionUsed = (float)usedResources.getMemory() / clusterMaxMem;
+    fractionMemUsed = (float)usedResources.getMemory() /
+        clusterResources.getMemory();
-    fairShare = queue.getFairShare().getMemory();
+    fairResources = queue.getFairShare();
-    minShare = minResources.getMemory();
-    maxResources = scheduler.getQueueManager().getMaxResources(queueName);
-    if (maxResources.getMemory() > clusterMaxMem) {
-      maxResources = Resources.createResource(clusterMaxMem);
-    }
-    maxShare = maxResources.getMemory();
+    maxResources = queue.getMaxShare();
+    maxResources = Resources.componentwiseMin(maxResources, clusterResources);
-    fractionFairShare = (float)fairShare / clusterMaxMem;
-    fractionMinShare = (float)minShare / clusterMaxMem;
+    fractionMemFairShare = (float)fairResources.getMemory() / clusterResources.getMemory();
+    fractionMemMinShare = (float)minResources.getMemory() / clusterResources.getMemory();
+    fractionMemMaxShare = (float)maxResources.getMemory() / clusterResources.getMemory();
-  public float getFairShareFraction() {
-    return fractionFairShare;
+  public float getFairShareMemoryFraction() {
+    return fractionMemFairShare;
-  public int getFairShare() {
-    return fairShare;
+  public Resource getFairShare() {
+    return fairResources;
-  public float getMinShareFraction() {
-    return fractionMinShare;
+  public float getMinShareMemoryFraction() {
+    return fractionMemMinShare;
-  public float getUsedFraction() {
-    return fractionUsed;
+  public float getUsedMemoryFraction() {
+    return fractionMemUsed;
-    return (float)maxShare / clusterMaxMem;
+    return fractionMemMaxShare;
