YARN-4718. Rename variables in SchedulerNode to reduce ambiguity post YARN-1011. (Inigo Goiri via kasha)

-  private Resource availableResource = Resource.newInstance(0, 0);
-  private Resource usedResource = Resource.newInstance(0, 0);
-  private Resource totalResourceCapability;
+  private Resource unallocatedResource = Resource.newInstance(0, 0);
+  private Resource allocatedResource = Resource.newInstance(0, 0);
+  private Resource totalResource;
-  /* set of containers that are allocated containers */
+  /** Set of containers that are allocated containers. */
-      new HashMap<ContainerId, RMContainer>();
+      new HashMap<>();
-  
+
-  
+
-    this.availableResource = Resources.clone(node.getTotalCapability());
-    this.totalResourceCapability = Resources.clone(node.getTotalCapability());
+    this.unallocatedResource = Resources.clone(node.getTotalCapability());
+    this.totalResource = Resources.clone(node.getTotalCapability());
-   * @param resource total resources on the node.
+   * @param resource Total resources on the node.
-    this.totalResourceCapability = resource;
-    this.availableResource = Resources.subtract(totalResourceCapability,
-      this.usedResource);
+    this.totalResource = resource;
+    this.unallocatedResource = Resources.subtract(totalResource,
+      this.allocatedResource);
-   * 
-   * @return the ID of the node
+   * @return The ID of the node.
+  /**
+   * Get HTTP address for the node.
+   * @return HTTP address for the node.
+   */
-   * 
-   * @return name of the node for scheduling matching decisions.
+   * @return Name of the node for scheduling matching decisions.
-   * 
-   * 
-   * @param rmContainer
-   *          allocated container
+   * @param rmContainer Allocated container
-    deductAvailableResource(container.getResource());
+    deductUnallocatedResource(container.getResource());
-        + getUsedResource() + " used and " + getAvailableResource()
+        + getAllocatedResource() + " used and " + getUnallocatedResource()
-  
+
+  /**
+   * Change the resources allocated for a container.
+   * @param containerId Identifier of the container to change.
+   * @param deltaResource Change in the resource allocation.
+   * @param increase True if the change is an increase of allocation.
+   */
-      deductAvailableResource(deltaResource);
+      deductUnallocatedResource(deltaResource);
-      addAvailableResource(deltaResource);
+      addUnallocatedResource(deltaResource);
-        + " containers, " + getUsedResource() + " used and "
-        + getAvailableResource() + " available after allocation");
+        + " containers, " + getAllocatedResource() + " used and "
+        + getUnallocatedResource() + " available after allocation");
-   * The Scheduler increased container
+   * Increase the resources allocated to a container.
+   * @param containerId Identifier of the container to change.
+   * @param deltaResource Increase of resource allocation.
-   * The Scheduler decreased container
+   * Decrease the resources allocated to a container.
+   * @param containerId Identifier of the container to change.
+   * @param deltaResource Decrease of resource allocation.
-   * Get available resources on the node.
-   * 
-   * @return available resources on the node
+   * Get unallocated resources on the node.
+   * @return Unallocated resources on the node
-  public synchronized Resource getAvailableResource() {
-    return this.availableResource;
+  public synchronized Resource getUnallocatedResource() {
+    return this.unallocatedResource;
-   * Get used resources on the node.
-   * 
-   * @return used resources on the node
+   * Get allocated resources on the node.
+   * @return Allocated resources on the node
-  public synchronized Resource getUsedResource() {
-    return this.usedResource;
+  public synchronized Resource getAllocatedResource() {
+    return this.allocatedResource;
-   * 
-   * @return total resources on the node.
+   * @return Total resources on the node.
-    return this.totalResourceCapability;
+    return this.totalResource;
+  /**
+   * Check if a container is launched by this node.
+   * @return If the container is launched by the node.
+   */
+  /**
+   * Update the resources of the node when allocating a new container.
+   * @param container Container to allocate.
+   */
-    addAvailableResource(container.getResource());
+    addUnallocatedResource(container.getResource());
-   * 
-   * @param container
-   *          container to be released
+   * @param container Container to be released.
-    /* remove the containers from the nodemanger */
+    // Remove the containers from the nodemanger
-        + getUsedResource() + " used and " + getAvailableResource()
+        + getAllocatedResource() + " used and " + getUnallocatedResource()
-  private synchronized void addAvailableResource(Resource resource) {
+  /**
+   * Add unallocated resources to the node. This is used when unallocating a
+   * container.
+   * @param resource Resources to add.
+   */
+  private synchronized void addUnallocatedResource(Resource resource) {
-    Resources.addTo(availableResource, resource);
-    Resources.subtractFrom(usedResource, resource);
+    Resources.addTo(unallocatedResource, resource);
+    Resources.subtractFrom(allocatedResource, resource);
-  private synchronized void deductAvailableResource(Resource resource) {
+  /**
+   * Deduct unallocated resources from the node. This is used when allocating a
+   * container.
+   * @param resource Resources to deduct.
+   */
+  private synchronized void deductUnallocatedResource(Resource resource) {
-    Resources.subtractFrom(availableResource, resource);
-    Resources.addTo(usedResource, resource);
+    Resources.subtractFrom(unallocatedResource, resource);
+    Resources.addTo(allocatedResource, resource);
+   * @param attempt Application attempt asking for the reservation.
+   * @param priority Priority of the reservation.
+   * @param container Container reserving resources for.
+   * @param attempt Application attempt that had done the reservation.
-        + getNumContainers() + " available=" + getAvailableResource()
-        + " used=" + getUsedResource();
+        + getNumContainers() + " available=" + getUnallocatedResource()
+        + " used=" + getAllocatedResource();
-   * 
-   * @return number of active containers on the node
+   * @return Number of active containers on the node.
+  /**
+   * Get the running containers in the node.
+   * @return List of running containers in the node.
+   */
+  /**
+   * Get the reserved container in the node.
+   * @return Reserved container in the node.
+   */
+  /**
+   * Set the reserved container in the node.
+   * @param reservedContainer Reserved container in the node.
+   */
+  /**
+   * Recover a container.
+   * @param rmContainer Container to recover.
+   */
-  
+
+  /**
+   * Get the labels for the node.
+   * @return Set of labels for the node.
+   */
-  
+
+  /**
+   * Update the labels for the node.
+   * @param labels Set of labels for the node.
+   */
+   * @return Partition for the node.
