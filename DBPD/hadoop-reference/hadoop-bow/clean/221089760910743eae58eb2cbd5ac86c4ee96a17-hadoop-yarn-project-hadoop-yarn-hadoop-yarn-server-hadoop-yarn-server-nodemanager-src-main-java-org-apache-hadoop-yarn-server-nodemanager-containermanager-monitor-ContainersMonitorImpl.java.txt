YARN-9592. Use Logger format in ContainersMonitorImpl. Contributed by Inigo Goiri.

-    LOG.info(" Using ResourceCalculatorPlugin : "
-        + this.resourceCalculatorPlugin);
+    LOG.info("Using ResourceCalculatorPlugin: {}",
+        this.resourceCalculatorPlugin);
-    LOG.info(" Using ResourceCalculatorProcessTree : "
-        + this.processTreeClass);
+    LOG.info("Using ResourceCalculatorProcessTree: {}", this.processTreeClass);
-    LOG.info("Physical memory check enabled: " + pmemCheckEnabled);
-    LOG.info("Virtual memory check enabled: " + vmemCheckEnabled);
-    LOG.info("Elastic memory control enabled: " + elasticMemoryEnforcement);
-    LOG.info("Strict memory control enabled: " + strictMemoryEnforcement);
+    LOG.info("Physical memory check enabled: {}", pmemCheckEnabled);
+    LOG.info("Virtual memory check enabled: {}", vmemCheckEnabled);
+    LOG.info("Elastic memory control enabled: {}", elasticMemoryEnforcement);
+    LOG.info("Strict memory control enabled: {}", strictMemoryEnforcement);
-    LOG.info("ContainersMonitor enabled: " + containersMonitorEnabled);
+    LOG.info("ContainersMonitor enabled: {}", containersMonitorEnabled);
-              + "Setting it to " + UNKNOWN_MEMORY_LIMIT);
+              + "Setting it to {}", UNKNOWN_MEMORY_LIMIT);
-        LOG.warn("NodeManager configured with "
-            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,
-                "", 1)
-            + " physical memory allocated to containers, which is more than "
-            + "80% of the total physical memory available ("
-            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, "",
-                1) + "). Thrashing might happen.");
+        LOG.warn(
+            "NodeManager configured with {} physical memory allocated to " +
+            "containers, which is more than 80% of the total physical memory " +
+            "available ({}). Thrashing might happen.",
+            TraditionalBinaryPrefix.long2String(
+                maxPmemAllottedForContainers, "B", 1),
+            TraditionalBinaryPrefix.long2String(
+                totalPhysicalMemoryOnNM, "B", 1));
-      LOG.info("ResourceCalculatorPlugin is unavailable on this system. " + this
-          .getClass().getName() + " is disabled.");
+      LOG.info("ResourceCalculatorPlugin is unavailable on this system. "
+          + "{} is disabled.", this.getClass().getName());
-          + this.getClass().getName() + " is disabled.");
+          + "{} is disabled.", this.getClass().getName());
-      LOG.warn("Process tree for container: " + containerId
-          + " running over twice " + "the configured limit. Limit=" + memLimit
-          + ", current usage = " + currentMemUsage);
+      LOG.warn("Process tree for container: {} running over twice "
+          + "the configured limit. Limit={}, current usage = {}",
+          containerId, memLimit, currentMemUsage);
-      LOG.warn("Process tree for container: " + containerId
-          + " has processes older than 1 "
-          + "iteration running over the configured limit. Limit=" + memLimit
-          + ", current usage = " + curMemUsageOfAgedProcesses);
+      LOG.warn("Process tree for container: {} has processes older than 1 "
+          + "iteration running over the configured limit. "
+          + "Limit={}, current usage = {}",
+          containerId, memLimit, curMemUsageOfAgedProcesses);
-          LOG.debug("Current ProcessTree list : {}",
-              tmp.substring(0, tmp.length()) + "]");
+          tmp.append("]");
+          LOG.debug("Current ProcessTree list : {}", tmp);
-            LOG.debug("Constructing ProcessTree for : PID = {}"
-                +" ContainerId = {}", pId, containerId);
+            LOG.debug(
+                "Constructing ProcessTree for : PID = {} ContainerId = {}",
+                pId, containerId);
-              LOG.info("Skipping monitoring container " + containerId
-                  + " since CPU usage is not yet available.");
+              LOG.info("Skipping monitoring container {} since "
+                  + "CPU usage is not yet available.", containerId);
-          LOG.warn(ContainersMonitorImpl.class.getName()
-              + " is interrupted. Exiting.");
+          LOG.warn("{} is interrupted. Exiting.",
+              ContainersMonitorImpl.class.getName());
-              LOG.info(containerId + "'s ip = " + ipAndHost[0]
-                  + ", and hostname = " + ipAndHost[1]);
+              LOG.info("{}'s ip = {}, and hostname = {}",
+                  containerId, ipAndHost[0], ipAndHost[1]);
-              LOG.info("Can not get both ip and hostname: "
-                  + Arrays.toString(ipAndHost));
+              LOG.info("Can not get both ip and hostname: {}",
+                  Arrays.toString(ipAndHost));
-            LOG.info(containerId + " is missing. Not setting ip and hostname");
+            LOG.info("{} is missing. Not setting ip and hostname", containerId);
-        AUDITLOG.debug(String.format(
-            "Resource usage of ProcessTree %s for container-id %s:" +
-                " %s CPU:%f CPU/core:%f",
-            pId, containerId.toString(),
+        AUDITLOG.debug(
+            "Resource usage of ProcessTree {} for container-id {}:" +
+            " {} CPU:{} CPU/core:{}",
+            pId, containerId,
-            cpuUsageTotalCoresPercentage));
+            cpuUsageTotalCoresPercentage);
-          LOG.error("Killed container process with PID " + pId
-                  + " but it is not a process group leader.");
+          LOG.error("Killed container process with PID {} "
+              + "but it is not a process group leader.", pId);
-        LOG.info("Removed ProcessTree with root " + pId);
+        LOG.info("Removed ProcessTree with root {}", pId);
-        LOG.info(containerId + " does not exist to report");
+        LOG.info("{} does not exist to report", containerId);
-        LOG.warn("Failed to track container "
-            + containerId.toString()
-            + ". It may have already completed.");
+        LOG.warn("Failed to track container {}. It may have already completed.",
+            containerId);
-      LOG.info("Changing resource-monitoring for " + containerId);
+      LOG.info("Changing resource-monitoring for {}", containerId);
-    LOG.info("Stopping resource-monitoring for " + containerId);
+    LOG.info("Stopping resource-monitoring for {}", containerId);
-    LOG.info("Starting resource-monitoring for " + containerId);
+    LOG.info("Starting resource-monitoring for {}", containerId);
