HDDS-1068. Improve the error propagation for ozone sh.
Contributed by Elek, Marton.

-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.CommitKeyResponse;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.CreateVolumeResponse;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.DeleteBucketResponse;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.DeleteKeyResponse;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.MultipartUploadAbortResponse;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.RenameKeyResponse;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.S3CreateBucketResponse;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.S3DeleteBucketResponse;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.SetVolumePropertyResponse;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Status;
-import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.UNKNOWN;
+
-    CreateVolumeResponse resp = submitRequest(omRequest)
-        .getCreateVolumeResponse();
-
-    if (resp.getStatus() != OK) {
-      throw new
-          IOException("Volume creation failed, error:" + resp.getStatus());
-    }
+    OMResponse omResponse = submitRequest(omRequest);
+    handleError(omResponse);
-    SetVolumePropertyResponse resp = submitRequest(omRequest)
-        .getSetVolumePropertyResponse();
-
-    if (resp.getStatus() != OK) {
-      throw new
-          IOException("Volume owner change failed, error:" + resp.getStatus());
-    }
+    OMResponse omResponse = submitRequest(omRequest);
+    handleError(omResponse);
-    SetVolumePropertyResponse resp = submitRequest(omRequest)
-        .getSetVolumePropertyResponse();
-
-    if (resp.getStatus() != OK) {
-      throw new
-          IOException("Volume quota change failed, error:" + resp.getStatus());
-    }
+    OMResponse omResponse = submitRequest(omRequest);
+    handleError(omResponse);
-    CheckVolumeAccessResponse resp = submitRequest(omRequest)
+    OMResponse omResponse = submitRequest(omRequest);
+    CheckVolumeAccessResponse resp = omResponse
-    if (resp.getStatus() == ACCESS_DENIED) {
+    if (omResponse.getStatus() == ACCESS_DENIED) {
-    } else if (resp.getStatus() == OK) {
+    } else if (omResponse.getStatus() == OK) {
-      throw new
-          IOException("Check Volume Access failed, error:" + resp.getStatus());
+      handleError(omResponse);
+      return false;
-    InfoVolumeResponse resp = submitRequest(omRequest).getInfoVolumeResponse();
+    InfoVolumeResponse resp =
+        handleError(submitRequest(omRequest)).getInfoVolumeResponse();
-    if (resp.getStatus() != OK) {
-      throw new
-          IOException("Info Volume failed, error:" + resp.getStatus());
-    }
+
-    DeleteVolumeResponse resp = submitRequest(omRequest)
+    DeleteVolumeResponse resp = handleError(submitRequest(omRequest))
-    if (resp.getStatus() != OK) {
-      throw new
-          IOException("Delete Volume failed, error:" + resp.getStatus());
-    }
-    ListVolumeResponse resp = submitRequest(omRequest).getListVolumeResponse();
+    ListVolumeResponse resp =
+        handleError(submitRequest(omRequest)).getListVolumeResponse();
-    if (resp.getStatus() != OK) {
-      throw new IOException("List volume failed, error: "
-          + resp.getStatus());
-    }
+
-    CreateBucketResponse resp = submitRequest(omRequest)
+    CreateBucketResponse resp = handleError(submitRequest(omRequest))
-    if (resp.getStatus() != OK) {
-      throw new IOException("Bucket creation failed, error: "
-          + resp.getStatus());
-    }
-    InfoBucketResponse resp = submitRequest(omRequest).getInfoBucketResponse();
+    InfoBucketResponse resp =
+        handleError(submitRequest(omRequest)).getInfoBucketResponse();
-    if (resp.getStatus() == OK) {
-      return OmBucketInfo.getFromProtobuf(resp.getBucketInfo());
-    } else {
-      throw new IOException("Info Bucket failed, error: "
-          + resp.getStatus());
-    }
+    return OmBucketInfo.getFromProtobuf(resp.getBucketInfo());
-    SetBucketPropertyResponse resp = submitRequest(omRequest)
+    SetBucketPropertyResponse resp = handleError(submitRequest(omRequest))
-    if (resp.getStatus() != OK) {
-      throw new IOException("Setting bucket property failed, error: "
-          + resp.getStatus());
-    }
-    ListBucketsResponse resp = submitRequest(omRequest)
+    ListBucketsResponse resp = handleError(submitRequest(omRequest))
-    if (resp.getStatus() == OK) {
-      buckets.addAll(
+    buckets.addAll(
-      return buckets;
-    } else {
-      throw new IOException("List Buckets failed, error: "
-          + resp.getStatus());
-    }
+    return buckets;
+
-    CreateKeyResponse resp = submitRequest(omRequest).getCreateKeyResponse();
+    CreateKeyResponse keyResponse =
+        handleError(submitRequest(omRequest)).getCreateKeyResponse();
+    return new OpenKeySession(keyResponse.getID(),
+        OmKeyInfo.getFromProtobuf(keyResponse.getKeyInfo()),
+        keyResponse.getOpenVersion());
+  }
+  private OMResponse handleError(OMResponse resp) throws OMException {
-      throw new IOException("Create key failed, error:" + resp.getStatus());
+      throw new OMException(resp.getMessage(),
+          ResultCodes.values()[resp.getStatus().ordinal()]);
-    return new OpenKeySession(resp.getID(),
-        OmKeyInfo.getFromProtobuf(resp.getKeyInfo()), resp.getOpenVersion());
+    return resp;
-    AllocateBlockResponse resp = submitRequest(omRequest)
+    AllocateBlockResponse resp = handleError(submitRequest(omRequest))
-
-    if (resp.getStatus() != OK) {
-      throw new IOException("Allocate block failed, error:" +
-          resp.getStatus());
-    }
-    CommitKeyResponse resp = submitRequest(omRequest).getCommitKeyResponse();
+    handleError(submitRequest(omRequest));
-    if (resp.getStatus() != OK) {
-      throw new IOException("Commit key failed, error:" +
-          resp.getStatus());
-    }
+
-    LookupKeyResponse resp = submitRequest(omRequest).getLookupKeyResponse();
+    LookupKeyResponse resp =
+        handleError(submitRequest(omRequest)).getLookupKeyResponse();
-    if (resp.getStatus() != OK) {
-      throw new IOException("Lookup key failed, error:" +
-          resp.getStatus());
-    }
-    RenameKeyResponse resp = submitRequest(omRequest).getRenameKeyResponse();
-
-    if (resp.getStatus() != OK) {
-      throw new IOException("Rename key failed, error:" +
-          resp.getStatus());
-    }
+    handleError(submitRequest(omRequest));
-    DeleteKeyResponse resp = submitRequest(omRequest).getDeleteKeyResponse();
+    handleError(submitRequest(omRequest));
-    if (resp.getStatus() != OK) {
-      throw new IOException("Delete key failed, error:" +
-          resp.getStatus());
-    }
-    DeleteBucketResponse resp = submitRequest(omRequest)
-        .getDeleteBucketResponse();
+    handleError(submitRequest(omRequest));
-    if (resp.getStatus() != OK) {
-      throw new
-          IOException("Delete Bucket failed, error:" + resp.getStatus());
-    }
-    ListKeysResponse resp = submitRequest(omRequest).getListKeysResponse();
+    ListKeysResponse resp =
+        handleError(submitRequest(omRequest)).getListKeysResponse();
+    keys.addAll(
+        resp.getKeyInfoList().stream()
+            .map(OmKeyInfo::getFromProtobuf)
+            .collect(Collectors.toList()));
+    return keys;
-    if (resp.getStatus() == OK) {
-      keys.addAll(
-          resp.getKeyInfoList().stream()
-              .map(OmKeyInfo::getFromProtobuf)
-              .collect(Collectors.toList()));
-      return keys;
-    } else {
-      throw new IOException("List Keys failed, error: "
-          + resp.getStatus());
-    }
-    S3CreateBucketResponse resp = submitRequest(omRequest)
-        .getCreateS3BucketResponse();
-
-    if(resp.getStatus() != OK) {
-      throw new IOException("Creating S3 bucket failed, error: "
-          + resp.getStatus());
-    }
+    handleError(submitRequest(omRequest));
-    S3DeleteBucketResponse resp = submitRequest(omRequest)
-        .getDeleteS3BucketResponse();
-
-    if(resp.getStatus() != OK) {
-      throw new IOException("Creating S3 bucket failed, error: "
-          + resp.getStatus());
-    }
+    handleError(submitRequest(omRequest));
-    S3BucketInfoResponse resp = submitRequest(omRequest)
+    S3BucketInfoResponse resp = handleError(submitRequest(omRequest))
-
-    if(resp.getStatus() != OK) {
-      throw new IOException("GetOzoneBucketMapping failed, error:" + resp
-          .getStatus());
-    }
-    S3ListBucketsResponse resp = submitRequest(omRequest)
+    S3ListBucketsResponse resp = handleError(submitRequest(omRequest))
-    if (resp.getStatus() == OK) {
-      buckets.addAll(
-          resp.getBucketInfoList().stream()
-              .map(OmBucketInfo::getFromProtobuf)
-              .collect(Collectors.toList()));
-      return buckets;
-    } else {
-      throw new IOException("List S3 Buckets failed, error: "
-          + resp.getStatus());
-    }
+    buckets.addAll(
+        resp.getBucketInfoList().stream()
+            .map(OmBucketInfo::getFromProtobuf)
+            .collect(Collectors.toList()));
+    return buckets;
+
-    final GetS3SecretResponse resp = submitRequest(omRequest)
+    final GetS3SecretResponse resp = handleError(submitRequest(omRequest))
-    if(resp.getStatus() != OK) {
-      throw new IOException("Fetch S3 Secret failed, error: " +
-          resp.getStatus());
-    } else {
-      return S3SecretValue.fromProtobuf(resp.getS3Secret());
-    }
+    return S3SecretValue.fromProtobuf(resp.getS3Secret());
+
-    MultipartInfoInitiateResponse resp = submitRequest(omRequest)
+    MultipartInfoInitiateResponse resp = handleError(submitRequest(omRequest))
-    if (resp.getStatus() != OK) {
-      throw new IOException("Initiate Multipart upload failed, error:" + resp
-          .getStatus());
-    }
-    MultipartCommitUploadPartResponse response = submitRequest(omRequest)
+    MultipartCommitUploadPartResponse response =
+        handleError(submitRequest(omRequest))
-    if (response.getStatus() != OK) {
-      throw new IOException("Commit multipart upload part key failed, error:"
-          + response.getStatus());
-    }
-
-    MultipartUploadCompleteResponse response = submitRequest(omRequest)
+    MultipartUploadCompleteResponse response =
+        handleError(submitRequest(omRequest))
-    if (response.getStatus() != OK) {
-      throw new IOException("Complete multipart upload failed, error:" +
-          response.getStatus());
-    }
-
-    MultipartUploadAbortResponse response =
-        submitRequest(omRequest).getAbortMultiPartUploadResponse();
-
-    if (response.getStatus() != OK) {
-      throw new IOException("Abort multipart upload failed, error:" +
-          response.getStatus());
-    }
+    handleError(submitRequest(omRequest));
-        submitRequest(omRequest).getListMultipartUploadPartsResponse();
+        handleError(submitRequest(omRequest))
+            .getListMultipartUploadPartsResponse();
-    if (response.getStatus() != Status.OK) {
-      throw new IOException("List Multipart upload parts failed, error: " +
-          response.getStatus());
-    }
-    final ServiceListResponse resp = submitRequest(omRequest)
+    final ServiceListResponse resp = handleError(submitRequest(omRequest))
-    if (resp.getStatus() == OK) {
-      return resp.getServiceInfoList().stream()
+    return resp.getServiceInfoList().stream()
-    } else {
-      throw new IOException("Getting service list failed, error: "
-          + resp.getStatus());
-    }
+
-      resp = submitRequest(omRequest).getGetDelegationTokenResponse();
-
-      if (resp.getStatus() == OK) {
-        return resp.getResponse().hasToken() ?
-            OMPBHelper.convertToDelegationToken(resp.getResponse().getToken())
-            : null;
-      }
-      throw new OMException("Get delegation token failed with response:"
-          + resp.getStatus(), toResultStatus(resp.getStatus()));
+      resp =
+          handleError(submitRequest(omRequest)).getGetDelegationTokenResponse();
+      return resp.getResponse().hasToken() ?
+          OMPBHelper.convertToDelegationToken(resp.getResponse().getToken())
+          : null;
-      resp = submitRequest(omRequest)
+      resp = handleError(submitRequest(omRequest))
-      if (resp.getStatus() == OK) {
-        return resp.getResponse().getNewExpiryTime();
-      }
-      throw new OMException("Renew delegation token failed with response:"
-          + resp.getStatus(), toResultStatus(resp.getStatus()));
+      return resp.getResponse().getNewExpiryTime();
-      resp = submitRequest(omRequest).getCancelDelegationTokenResponse();
-      if (resp.getStatus() == OK) {
-        return;
-      }
-      throw new OMException("Cancel delegation token failed with response:"
-          + resp.getStatus(), toResultStatus(resp.getStatus()));
+      resp = handleError(submitRequest(omRequest))
+          .getCancelDelegationTokenResponse();
+      return;
-  /**
-   * Converts proto status to OMException result code.
-   *
-   * @param status Proto status received from rpc call.
-   */
-  public ResultCodes toResultStatus(Status status) {
-    switch (status) {
-    case INVALID_AUTH_METHOD:
-      return ResultCodes.INVALID_AUTH_METHOD;
-    case INVALID_TOKEN:
-      return ResultCodes.INVALID_TOKEN;
-    case TOKEN_EXPIRED:
-      return ResultCodes.TOKEN_EXPIRED;
-    case TOKEN_ERROR_OTHER:
-      return TOKEN_ERROR_OTHER;
-    default:
-      return UNKNOWN;
-    }
-  }
