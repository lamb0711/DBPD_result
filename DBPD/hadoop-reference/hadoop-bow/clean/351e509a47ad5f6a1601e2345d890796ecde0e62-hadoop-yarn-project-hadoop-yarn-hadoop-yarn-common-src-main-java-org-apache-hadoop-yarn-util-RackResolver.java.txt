YARN-8169. Cleanup RackResolver.java

Signed-off-by: Akira Ajisaka <aajisaka@apache.org>

-import java.util.ArrayList;
+import java.util.Collections;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-public class RackResolver {
+public final class RackResolver {
-  private static final Log LOG = LogFactory.getLog(RackResolver.class);
+  private static final Logger LOG = LoggerFactory.getLogger(RackResolver.class);
+
+  /**
+   * Hide the default constructor for utility class.
+   */
+  private RackResolver() {
+  }
-    } else {
-      initCalled = true;
+    initCalled = true;
-      conf.getClass(
-        CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, 
+        conf.getClass(
+        CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,
-  
+
-   * network topology. This method initializes the class with the 
+   * network topology. This method initializes the class with the
-  
+
-    List <String> tmpList = new ArrayList<String>(1);
-    tmpList.add(hostName);
+    List <String> tmpList = Collections.singletonList(hostName);
-    String rName = null;
+    String rName = NetworkTopology.DEFAULT_RACK;
-      rName = NetworkTopology.DEFAULT_RACK;
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Couldn't resolve " + hostName + ". Falling back to "
-            + NetworkTopology.DEFAULT_RACK);
-      }
+      LOG.debug("Could not resolve {}. Falling back to {}", hostName,
+            NetworkTopology.DEFAULT_RACK);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Resolved " + hostName + " to " + rName);
-      }
+      LOG.debug("Resolved {} to {}", hostName, rName);
-   * Only used by tests
+   * Only used by tests.
-  static DNSToSwitchMapping getDnsToSwitchMapping(){
+  static DNSToSwitchMapping getDnsToSwitchMapping() {
