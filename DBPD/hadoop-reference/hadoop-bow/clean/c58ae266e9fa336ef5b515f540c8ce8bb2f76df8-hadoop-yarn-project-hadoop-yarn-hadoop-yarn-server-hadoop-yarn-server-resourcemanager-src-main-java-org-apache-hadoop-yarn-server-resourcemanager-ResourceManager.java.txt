YARN-1318. Promoted AdminService to an Always-On service and merged it into RMHAProtocolService. Contributed by Karthik Kambatla.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547212 13f79535-47bb-0310-9956-ffa450edef68

-  protected RMHAProtocolService haService;
+  protected RMContextImpl rmContext;
+  @VisibleForTesting
+  protected AdminService adminService;
-  protected ClientToAMTokenSecretManagerInRM clientToAMSecretManager =
-      new ClientToAMTokenSecretManagerInRM();
+  protected ClientToAMTokenSecretManagerInRM clientToAMSecretManager;
-  private AdminService adminService;
-  protected RMContext rmContext;
-  public RMHAProtocolService getHAService() {
-    return this.haService;
-  }
-  
+    this.rmContext = new RMContextImpl();
-    haService = createRMHAProtocolService();
-    addService(haService);
+    adminService = createAdminService();
+    addService(adminService);
+    rmContext.setRMAdminService(adminService);
+
-    ((RMContextImpl) rmContext).setStateStore(rmStore);
-  }
-
-  protected RMHAProtocolService createRMHAProtocolService() {
-    return new RMHAProtocolService(this);
+    rmContext.setStateStore(rmStore);
-    return new RMStateStoreOperationFailedEventDispatcher(haService);
+    return new RMStateStoreOperationFailedEventDispatcher(
+        rmContext.getRMAdminService());
+      rmContext.setDispatcher(rmDispatcher);
+
+      clientToAMSecretManager = new ClientToAMTokenSecretManagerInRM();
+      rmContext.setClientToAMTokenSecretManager(clientToAMSecretManager);
+      rmContext.setAMRMTokenSecretManager(amRmTokenSecretManager);
+      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);
+      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);
+      rmContext.setAMFinishingMonitor(amFinishingMonitor);
+      rmContext.setContainerTokenSecretManager(containerTokenSecretManager);
+
+      rmContext.setNMTokenSecretManager(nmTokenSecretManager);
+      rmContext.setStateStore(rmStore);
+        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);
-      rmContext = new RMContextImpl(
-          rmDispatcher, rmStore, containerAllocationExpirer, amLivelinessMonitor,
-          amFinishingMonitor, delegationTokenRenewer, amRmTokenSecretManager,
-          containerTokenSecretManager, nmTokenSecretManager,
-          clientToAMSecretManager);
-
+      rmContext.setNodesListManager(nodesListManager);
+      rmContext.setScheduler(scheduler);
+
+      rmContext.setResourceTrackerService(resourceTracker);
+      rmContext.setApplicationMasterService(masterService);
+
-
-      adminService = createAdminService(clientRM, masterService, resourceTracker);
-      addService(adminService);
+      rmContext.setClientRMService(clientRM);
-    private final RMHAProtocolService haService;
+    private final AdminService adminService;
-        RMHAProtocolService haService) {
-      this.haService = haService;
+        AdminService adminService) {
+      this.adminService = adminService;
-        synchronized(haService) {
-          if (haService.haEnabled) {
+        synchronized(adminService) {
+          if (adminService.haEnabled) {
-              haService.transitionToStandby(true);
+              adminService.transitionToStandby(true);
+      rmContext.getRMNodes().clear();
+      rmContext.getInactiveRMNodes().clear();
+      rmContext.getRMApps().clear();
-  protected AdminService createAdminService(
-      ClientRMService clientRMService, 
-      ApplicationMasterService applicationMasterService,
-      ResourceTrackerService resourceTrackerService) {
-    return new AdminService(this.conf, scheduler, rmContext,
-        this.nodesListManager, clientRMService, applicationMasterService,
-        resourceTrackerService);
+  protected AdminService createAdminService() {
+    return new AdminService(this, rmContext);
