HDFS-8517. Fix a decoding issue in stripped block recovering in client side. Contributed by Kai Zheng.

-import org.apache.hadoop.io.erasurecode.rawcoder.RSRawDecoder;
-        alignedStripe.chunks[i] = new StripingChunk(decodeInputs[i]);
+        final int decodeIndex = convertIndex4Decode(i, dataBlkNum, parityBlkNum);
+        alignedStripe.chunks[i] = new StripingChunk(decodeInputs[decodeIndex]);
-      AlignedStripe alignedStripe) {
+      int dataBlkNum, int parityBlkNum, AlignedStripe alignedStripe) {
-      StripingChunk chunk = alignedStripe.chunks[i];
+      final StripingChunk chunk = alignedStripe.chunks[i];
+      final int decodeIndex = convertIndex4Decode(i, dataBlkNum, parityBlkNum);
-              decodeInputs[i], posInBuf, chunk.lengthsInBuf.get(j));
+              decodeInputs[decodeIndex], posInBuf, chunk.lengthsInBuf.get(j));
-        Arrays.fill(decodeInputs[i], (byte)0);
+        Arrays.fill(decodeInputs[decodeIndex], (byte) 0);
-        decodeInputs[i] = null;
+        decodeInputs[decodeIndex] = null;
+
+  /**
+   * Currently decoding requires parity chunks are before data chunks.
+   * The indices are opposite to what we store in NN. In future we may
+   * improve the decoding to make the indices order the same as in NN.
+   *
+   * @param index The index to convert
+   * @param dataBlkNum The number of data blocks
+   * @param parityBlkNum The number of parity blocks
+   * @return converted index
+   */
+  public static int convertIndex4Decode(int index, int dataBlkNum,
+      int parityBlkNum) {
+    return index < dataBlkNum ? index + parityBlkNum : index - dataBlkNum;
+  }
+
+  public static int convertDecodeIndexBack(int index, int dataBlkNum,
+      int parityBlkNum) {
+    return index < parityBlkNum ? index + dataBlkNum : index - parityBlkNum;
+  }
+
-      byte[] buf, AlignedStripe alignedStripe, int parityBlkNum,
+      byte[] buf, AlignedStripe alignedStripe, int dataBlkNum, int parityBlkNum,
-        decodeIndices[pos++] = i;
+        decodeIndices[pos++] = convertIndex4Decode(i, dataBlkNum, parityBlkNum);
-      int missingBlkIdx = decodeIndices[i];
+      int missingBlkIdx = convertDecodeIndexBack(decodeIndices[i],
+          dataBlkNum, parityBlkNum);
-          System.arraycopy(decodeOutputs[i], srcPos, buf, chunk.offsetsInBuf.get(j),
-              chunk.lengthsInBuf.get(j));
+          System.arraycopy(decodeOutputs[i], srcPos, buf,
+              chunk.offsetsInBuf.get(j), chunk.lengthsInBuf.get(j));
-   *                 of data / parity blocks, as well as cell size
+   *                 of data / parity blocks
-    // TODO: change ECSchema naming to use cell size instead of chunk size
-    calcualteChunkPositionsInBuf(ecSchema, cellSize, stripes, cells, buf,
-        offsetInBuf);
+    calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf, offsetInBuf);
-  private static void calcualteChunkPositionsInBuf(ECSchema ecSchema,
-      int cellSize, AlignedStripe[] stripes, StripingCell[] cells, byte[] buf,
+  private static void calcualteChunkPositionsInBuf(int cellSize,
+      AlignedStripe[] stripes, StripingCell[] cells, byte[] buf,
