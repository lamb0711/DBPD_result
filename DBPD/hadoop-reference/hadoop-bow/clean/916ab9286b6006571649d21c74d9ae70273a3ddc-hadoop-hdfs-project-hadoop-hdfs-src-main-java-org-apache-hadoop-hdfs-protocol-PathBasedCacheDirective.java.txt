HDFS-5451. Add byte and file statistics to PathBasedCacheEntry. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543958 13f79535-47bb-0310-9956-ffa450edef68

+    private Long bytesNeeded;
+    private Long bytesCached;
+    private Long filesAffected;
-      return new PathBasedCacheDirective(id, path, replication, pool);
+      return new PathBasedCacheDirective(id, path, replication, pool,
+                    bytesNeeded, bytesCached, filesAffected);
+      this.bytesNeeded = directive.bytesNeeded;
+      this.bytesCached = directive.bytesCached;
+      this.filesAffected = directive.filesAffected;
+     * Sets the bytes needed by this directive.
+     * 
+     * @param bytesNeeded The bytes needed.
+     * @return This builder, for call chaining.
+     */
+    public Builder setBytesNeeded(Long bytesNeeded) {
+      this.bytesNeeded = bytesNeeded;
+      return this;
+    }
+
+    /**
+     * Sets the bytes cached by this directive.
+     * 
+     * @param bytesCached The bytes cached.
+     * @return This builder, for call chaining.
+     */
+    public Builder setBytesCached(Long bytesCached) {
+      this.bytesCached = bytesCached;
+      return this;
+    }
+
+    /**
+     * Sets the files affected by this directive.
+     * 
+     * @param filesAffected The files affected.
+     * @return This builder, for call chaining.
+     */
+    public Builder setFilesAffected(Long filesAffected) {
+      this.filesAffected = filesAffected;
+      return this;
+    }
+    
+    /**
+  private final Long bytesNeeded;
+  private final Long bytesCached;
+  private final Long filesAffected;
-  PathBasedCacheDirective(Long id, Path path, Short replication, String pool) {
+  PathBasedCacheDirective(Long id, Path path, Short replication, String pool,
+      Long bytesNeeded, Long bytesCached, Long filesAffected) {
+    this.bytesNeeded = bytesNeeded;
+    this.bytesCached = bytesCached;
+    this.filesAffected = filesAffected;
+  
+  /**
+   * @return The bytes needed.
+   */
+  public Long getBytesNeeded() {
+    return bytesNeeded;
+  }
+
+  /**
+   * @return The bytes cached.
+   */
+  public Long getBytesCached() {
+    return bytesCached;
+  }
+
+  /**
+   * @return The files affected.
+   */
+  public Long getFilesAffected() {
+    return filesAffected;
+  }
+    if (bytesNeeded != null) {
+      builder.append(prefix).append("bytesNeeded: ").append(bytesNeeded);
+      prefix = ",";
+    }
+    if (bytesCached != null) {
+      builder.append(prefix).append("bytesCached: ").append(bytesCached);
+      prefix = ",";
+    }
+    if (filesAffected != null) {
+      builder.append(prefix).append("filesAffected: ").append(filesAffected);
+      prefix = ",";
+    }
