HDDS-167. Rename KeySpaceManager to OzoneManager. Contributed by Arpit Agarwal.

-package org.apache.hadoop.ozone.ksm;
+package org.apache.hadoop.ozone.om;
-import org.apache.hadoop.ozone.ksm.helpers.KsmKeyArgs;
+import org.apache.hadoop.ozone.om.helpers.OmKeyArgs;
-import org.apache.hadoop.ozone.ksm.helpers.KsmKeyInfo;
-import org.apache.hadoop.ozone.ksm.helpers.KsmKeyLocationInfo;
+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;
+import org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfo;
-import org.apache.hadoop.ozone.ksm.exceptions.KSMException;
-import org.apache.hadoop.ozone.ksm.exceptions.KSMException.ResultCodes;
-import org.apache.hadoop.ozone.ksm.helpers.KsmKeyLocationInfoGroup;
-import org.apache.hadoop.ozone.ksm.helpers.OpenKeySession;
+import org.apache.hadoop.ozone.om.exceptions.OMException;
+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;
+import org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfoGroup;
+import org.apache.hadoop.ozone.om.helpers.OpenKeySession;
-    .KeySpaceManagerProtocolProtos.KeyInfo;
+    .OzoneManagerProtocolProtos.KeyInfo;
-  private final KSMMetadataManager metadataManager;
+  private final OMMetadataManager metadataManager;
-  private final String ksmId;
+  private final String omId;
-      KSMMetadataManager metadataManager, OzoneConfiguration conf,
-      String ksmId) {
+                        OMMetadataManager metadataManager, OzoneConfiguration conf,
+                        String omId) {
-    this.ksmId = ksmId;
+    this.omId = omId;
-      throw new KSMException("Volume not found",
-          KSMException.ResultCodes.FAILED_VOLUME_NOT_FOUND);
+      throw new OMException("Volume not found",
+          OMException.ResultCodes.FAILED_VOLUME_NOT_FOUND);
-      throw new KSMException("Bucket not found",
-          KSMException.ResultCodes.FAILED_BUCKET_NOT_FOUND);
+      throw new OMException("Bucket not found",
+          OMException.ResultCodes.FAILED_BUCKET_NOT_FOUND);
-  public KsmKeyLocationInfo allocateBlock(KsmKeyArgs args, int clientID)
+  public OmKeyLocationInfo allocateBlock(OmKeyArgs args, int clientID)
-        throw new KSMException("Open Key not found",
-            KSMException.ResultCodes.FAILED_KEY_NOT_FOUND);
+        throw new OMException("Open Key not found",
+            OMException.ResultCodes.FAILED_KEY_NOT_FOUND);
-      KsmKeyInfo keyInfo =
-          KsmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(keyData));
+      OmKeyInfo keyInfo =
+          OmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(keyData));
-              keyInfo.getFactor(), ksmId);
-      KsmKeyLocationInfo info = new KsmKeyLocationInfo.Builder()
+              keyInfo.getFactor(), omId);
+      OmKeyLocationInfo info = new OmKeyLocationInfo.Builder()
-  public OpenKeySession openKey(KsmKeyArgs args) throws IOException {
+  public OpenKeySession openKey(OmKeyArgs args) throws IOException {
-    // replication factor, KSM will use defaults.
+    // replication factor, OM will use defaults.
-      List<KsmKeyLocationInfo> locations = new ArrayList<>();
+      List<OmKeyLocationInfo> locations = new ArrayList<>();
-      // allocateBlock. But if requested size is not 0, KSM will preallocate
+      // allocateBlock. But if requested size is not 0, OM will preallocate
-            scmBlockClient.allocateBlock(allocateSize, type, factor, ksmId);
-        KsmKeyLocationInfo subKeyInfo = new KsmKeyLocationInfo.Builder()
+            scmBlockClient.allocateBlock(allocateSize, type, factor, omId);
+        OmKeyLocationInfo subKeyInfo = new OmKeyLocationInfo.Builder()
-      KsmKeyInfo keyInfo;
+      OmKeyInfo keyInfo;
-        keyInfo = KsmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(value));
+        keyInfo = OmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(value));
-        keyInfo = new KsmKeyInfo.Builder()
+        keyInfo = new OmKeyInfo.Builder()
-            .setKsmKeyLocationInfos(Collections.singletonList(
-                new KsmKeyLocationInfoGroup(0, locations)))
+            .setOmKeyLocationInfos(Collections.singletonList(
+                new OmKeyLocationInfoGroup(0, locations)))
-    } catch (KSMException e) {
+    } catch (OMException e) {
-      if (!(ex instanceof KSMException)) {
+      if (!(ex instanceof OMException)) {
-      throw new KSMException(ex.getMessage(),
-          KSMException.ResultCodes.FAILED_KEY_ALLOCATION);
+      throw new OMException(ex.getMessage(),
+          OMException.ResultCodes.FAILED_KEY_ALLOCATION);
-  public void commitKey(KsmKeyArgs args, int clientID) throws IOException {
+  public void commitKey(OmKeyArgs args, int clientID) throws IOException {
-        throw new KSMException("Commit a key without corresponding entry " +
+        throw new OMException("Commit a key without corresponding entry " +
-      KsmKeyInfo keyInfo =
-          KsmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(openKeyData));
+      OmKeyInfo keyInfo =
+          OmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(openKeyData));
-    } catch (KSMException e) {
+    } catch (OMException e) {
-      throw new KSMException(ex.getMessage(),
-          KSMException.ResultCodes.FAILED_KEY_ALLOCATION);
+      throw new OMException(ex.getMessage(),
+          OMException.ResultCodes.FAILED_KEY_ALLOCATION);
-  public KsmKeyInfo lookupKey(KsmKeyArgs args) throws IOException {
+  public OmKeyInfo lookupKey(OmKeyArgs args) throws IOException {
-        throw new KSMException("Key not found",
-            KSMException.ResultCodes.FAILED_KEY_NOT_FOUND);
+        throw new OMException("Key not found",
+            OMException.ResultCodes.FAILED_KEY_NOT_FOUND);
-      return KsmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(value));
+      return OmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(value));
-      throw new KSMException(ex.getMessage(),
-          KSMException.ResultCodes.FAILED_KEY_NOT_FOUND);
+      throw new OMException(ex.getMessage(),
+          OMException.ResultCodes.FAILED_KEY_NOT_FOUND);
-  public void renameKey(KsmKeyArgs args, String toKeyName) throws IOException {
+  public void renameKey(OmKeyArgs args, String toKeyName) throws IOException {
-      throw new KSMException("Key name is empty",
+      throw new OMException("Key name is empty",
-        throw new KSMException("Key not found",
-            KSMException.ResultCodes.FAILED_KEY_NOT_FOUND);
+        throw new OMException("Key not found",
+            OMException.ResultCodes.FAILED_KEY_NOT_FOUND);
-        throw new KSMException("Key not found",
-            KSMException.ResultCodes.FAILED_KEY_ALREADY_EXISTS);
+        throw new OMException("Key not found",
+            OMException.ResultCodes.FAILED_KEY_ALREADY_EXISTS);
-      KsmKeyInfo newKeyInfo =
-          KsmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(fromKeyValue));
+      OmKeyInfo newKeyInfo =
+          OmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(fromKeyValue));
-      throw new KSMException(ex.getMessage(),
+      throw new OMException(ex.getMessage(),
-  public void deleteKey(KsmKeyArgs args) throws IOException {
+  public void deleteKey(OmKeyArgs args) throws IOException {
-        throw new KSMException("Key not found",
-            KSMException.ResultCodes.FAILED_KEY_NOT_FOUND);
+        throw new OMException("Key not found",
+            OMException.ResultCodes.FAILED_KEY_NOT_FOUND);
-      throw new KSMException(ex.getMessage(), ex,
+      throw new OMException(ex.getMessage(), ex,
-  public List<KsmKeyInfo> listKeys(String volumeName, String bucketName,
-      String startKey, String keyPrefix, int maxKeys) throws IOException {
+  public List<OmKeyInfo> listKeys(String volumeName, String bucketName,
+                                  String startKey, String keyPrefix, int maxKeys) throws IOException {
-    // Simply removes the entry from KSM DB.
+    // Simply removes the entry from OM DB.
-    // Simply removes the entry from KSM DB.
+    // Simply removes the entry from OM DB.
