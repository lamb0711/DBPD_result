HDFS-9439. Support reconfiguring fs.protected.directories without NN restart. (Contributed by Xiaobing Zhou)

+import org.apache.hadoop.util.StringUtils;
+
+import com.google.common.base.Joiner;
-  private final SortedSet<String> protectedDirectories;
+  private volatile SortedSet<String> protectedDirectories;
+    return parseProtectedDirectories(conf
+        .getTrimmedStringCollection(FS_PROTECTED_DIRECTORIES));
+  }
+
+  /**
+   * Parse configuration setting dfs.namenode.protected.directories to retrieve
+   * the set of protected directories.
+   *
+   * @param protectedDirsString
+   *          a comma separated String representing a bunch of paths.
+   * @return a TreeSet
+   */
+  @VisibleForTesting
+  static SortedSet<String> parseProtectedDirectories(
+      final String protectedDirsString) {
+    return parseProtectedDirectories(StringUtils
+        .getTrimmedStringCollection(protectedDirsString));
+  }
+
+  private static SortedSet<String> parseProtectedDirectories(
+      final Collection<String> protectedDirs) {
-    return new TreeSet<>(normalizePaths(
-        conf.getTrimmedStringCollection(FS_PROTECTED_DIRECTORIES),
-        FS_PROTECTED_DIRECTORIES));
+    return new TreeSet<>(
+        normalizePaths(protectedDirs, FS_PROTECTED_DIRECTORIES));
+  /**
+   * Set directories that cannot be removed unless empty, even by an
+   * administrator.
+   *
+   * @param protectedDirsString
+   *          comma separated list of protected directories
+   */
+  String setProtectedDirectories(String protectedDirsString) {
+    if (protectedDirsString == null) {
+      protectedDirectories = new TreeSet<>();
+    } else {
+      protectedDirectories = parseProtectedDirectories(protectedDirsString);
+    }
+
+    return Joiner.on(",").skipNulls().join(protectedDirectories);
+  }
+
