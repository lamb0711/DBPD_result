HADOOP-7227. Remove protocol version check at proxy creation in Hadoop RPC. Contributed by jitendra.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099284 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.Field;
+  final private boolean supportServerMethodCheck;
+  private boolean serverMethodsFetched = false;
-   * @param serverMethods a list of hash codes of the methods that it supports
-   * @throws ClassNotFoundException 
+   * @param supportServerMethodCheck If false proxy will never fetch server
+   *        methods and isMethodSupported will always return true. If true,
+   *        server methods will be fetched for the first call to 
+   *        isMethodSupported. 
-  public ProtocolProxy(Class<T> protocol, T proxy, int[] serverMethods) {
+  public ProtocolProxy(Class<T> protocol, T proxy,
+      boolean supportServerMethodCheck) {
-    if (serverMethods != null) {
-      this.serverMethods = new HashSet<Integer>(serverMethods.length);
-      for (int method : serverMethods) {
-        this.serverMethods.add(Integer.valueOf(method));
+    this.supportServerMethodCheck = supportServerMethodCheck;
+  }
+  
+  private void fetchServerMethods(Method method) throws IOException {
+    long clientVersion;
+    try {
+      Field versionField = method.getDeclaringClass().getField("versionID");
+      versionField.setAccessible(true);
+      clientVersion = versionField.getLong(method.getDeclaringClass());
+    } catch (NoSuchFieldException ex) {
+      throw new RuntimeException(ex);
+    } catch (IllegalAccessException ex) {
+      throw new RuntimeException(ex);
+    }
+    int clientMethodsHash = ProtocolSignature.getFingerprint(method
+        .getDeclaringClass().getMethods());
+    ProtocolSignature serverInfo = ((VersionedProtocol) proxy)
+        .getProtocolSignature(protocol.getName(), clientVersion,
+            clientMethodsHash);
+    long serverVersion = serverInfo.getVersion();
+    if (serverVersion != clientVersion) {
+      throw new RPC.VersionMismatch(protocol.getName(), clientVersion,
+          serverVersion);
+    }
+    int[] serverMethodsCodes = serverInfo.getMethods();
+    if (serverMethodsCodes != null) {
+      serverMethods = new HashSet<Integer>(serverMethodsCodes.length);
+      for (int m : serverMethodsCodes) {
+        this.serverMethods.add(Integer.valueOf(m));
+    serverMethodsFetched = true;
-  public boolean isMethodSupported(String methodName,
+  public synchronized boolean isMethodSupported(String methodName,
-    if (serverMethods == null) { // client & server have the same protocol
+    if (!supportServerMethodCheck) {
+    if (!serverMethodsFetched) {
+      fetchServerMethods(method);
+    }
+    if (serverMethods == null) { // client & server have the same protocol
+      return true;
+    }
