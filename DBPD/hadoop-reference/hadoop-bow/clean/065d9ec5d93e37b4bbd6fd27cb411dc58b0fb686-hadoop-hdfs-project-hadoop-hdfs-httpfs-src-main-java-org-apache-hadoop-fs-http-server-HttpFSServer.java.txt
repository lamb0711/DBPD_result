HDFS-6849. Replace HttpFS custom proxyuser handling with common implementation. (tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617831 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.fs.http.server.HttpFSParametersProvider.DoAsParam;
-import org.apache.hadoop.lib.service.ProxyUser;
-import org.apache.hadoop.lib.servlet.HostnameFilter;
-import org.apache.hadoop.security.authentication.server.AuthenticationToken;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.token.delegation.web.HttpUserGroupInformation;
-import java.security.Principal;
-   * Resolves the effective user that will be used to request a FileSystemAccess filesystem.
-   * <p/>
-   * If the doAs-user is NULL or the same as the user, it returns the user.
-   * <p/>
-   * Otherwise it uses proxyuser rules (see {@link ProxyUser} to determine if the
-   * current user can impersonate the doAs-user.
-   * <p/>
-   * If the current user cannot impersonate the doAs-user an
-   * <code>AccessControlException</code> will be thrown.
-   *
-   * @param user principal for whom the filesystem instance is.
-   * @param doAs do-as user, if any.
-   *
-   * @return the effective user.
-   *
-   * @throws IOException thrown if an IO error occurrs.
-   * @throws AccessControlException thrown if the current user cannot impersonate
-   * the doAs-user.
-   */
-  private String getEffectiveUser(Principal user, String doAs) throws IOException {
-    String effectiveUser = user.getName();
-    if (doAs != null && !doAs.equals(user.getName())) {
-      ProxyUser proxyUser = HttpFSServerWebApp.get().get(ProxyUser.class);
-      String proxyUserName;
-      if (user instanceof AuthenticationToken) {
-        proxyUserName = ((AuthenticationToken)user).getUserName();
-      } else {
-        proxyUserName = user.getName();
-      }
-      proxyUser.validate(proxyUserName, HostnameFilter.get(), doAs);
-      effectiveUser = doAs;
-      AUDIT_LOG.info("Proxy user [{}] DoAs user [{}]", proxyUserName, doAs);
-    }
-    return effectiveUser;
-  }
-
-  /**
-   * @param user principal making the request.
-   * @param doAs do-as user, if any.
+   * @param ugi user making the request.
-  private <T> T fsExecute(Principal user, String doAs, FileSystemAccess.FileSystemExecutor<T> executor)
+  private <T> T fsExecute(UserGroupInformation ugi, FileSystemAccess.FileSystemExecutor<T> executor)
-    String hadoopUser = getEffectiveUser(user, doAs);
-    return fsAccess.execute(hadoopUser, conf, executor);
+    return fsAccess.execute(ugi.getShortUserName(), conf, executor);
-   * @param user principal for whom the filesystem instance is.
-   * @param doAs do-as user, if any.
+   * @param ugi principal for whom the filesystem instance is.
-  private FileSystem createFileSystem(Principal user, String doAs) throws IOException, FileSystemAccessException {
-    String hadoopUser = getEffectiveUser(user, doAs);
+  private FileSystem createFileSystem(UserGroupInformation ugi)
+      throws IOException, FileSystemAccessException {
+    String hadoopUser = ugi.getShortUserName();
-   * @param user the principal of the user making the request.
-  public Response getRoot(@Context Principal user,
-                          @QueryParam(OperationParam.NAME) OperationParam op,
+  public Response getRoot(@QueryParam(OperationParam.NAME) OperationParam op,
-    return get(user, "", op, params);
+    return get("", op, params);
-   * @param user the principal of the user making the request.
-  public Response get(@Context Principal user,
-                      @PathParam("path") String path,
+  public Response get(@PathParam("path") String path,
+    UserGroupInformation user = HttpUserGroupInformation.get();
-    String doAs = params.get(DoAsParam.NAME, DoAsParam.class);
-        FileSystem fs = createFileSystem(user, doAs);
+        FileSystem fs = createFileSystem(user);
-        Map json = fsExecute(user, doAs, command);
+        Map json = fsExecute(user, command);
-        Map json = fsExecute(user, doAs, command);
+        Map json = fsExecute(user, command);
-        JSONObject json = fsExecute(user, doAs, command);
+        JSONObject json = fsExecute(user, command);
-        List<String> userGroups = groups.getGroups(user.getName());
+        List<String> userGroups = groups.getGroups(user.getShortUserName());
-        Map json = fsExecute(user, doAs, command);
+        Map json = fsExecute(user, command);
-        Map json = fsExecute(user, doAs, command);
+        Map json = fsExecute(user, command);
-        Map json = fsExecute(user, doAs, command);
+        Map json = fsExecute(user, command);
-        Map json = fsExecute(user, doAs, command);
+        Map json = fsExecute(user, command);
-        Map json = fsExecute(user, doAs, command);
+        Map json = fsExecute(user, command);
-   * @param user the principal of the user making the request.
-  public Response delete(@Context Principal user,
-                      @PathParam("path") String path,
-                      @QueryParam(OperationParam.NAME) OperationParam op,
-                      @Context Parameters params)
+  public Response delete(@PathParam("path") String path,
+                         @QueryParam(OperationParam.NAME) OperationParam op,
+                         @Context Parameters params)
+    UserGroupInformation user = HttpUserGroupInformation.get();
-    String doAs = params.get(DoAsParam.NAME, DoAsParam.class);
-        JSONObject json = fsExecute(user, doAs, command);
+        JSONObject json = fsExecute(user, command);
-   * @param user the principal of the user making the request.
-                       @Context Principal user,
+    UserGroupInformation user = HttpUserGroupInformation.get();
-        String doAs = params.get(DoAsParam.NAME, DoAsParam.class);
-          fsExecute(user, doAs, command);
+          fsExecute(user, command);
-        fsExecute(user, null, command);
+        fsExecute(user, command);
-   * @param user the principal of the user making the request.
-                       @Context Principal user,
+    UserGroupInformation user = HttpUserGroupInformation.get();
-    String doAs = params.get(DoAsParam.NAME, DoAsParam.class);
-          fsExecute(user, doAs, command);
+          fsExecute(user, command);
-        fsExecute(user, doAs, command);
+        fsExecute(user, command);
-        fsExecute(user, doAs, command);
+        fsExecute(user, command);
-        JSONObject json = fsExecute(user, doAs, command);
+        JSONObject json = fsExecute(user, command);
-        JSONObject json = fsExecute(user, doAs, command);
+        JSONObject json = fsExecute(user, command);
-        fsExecute(user, doAs, command);
+        fsExecute(user, command);
-        fsExecute(user, doAs, command);
+        fsExecute(user, command);
-        JSONObject json = fsExecute(user, doAs, command);
+        JSONObject json = fsExecute(user, command);
-        fsExecute(user, doAs, command);
+        fsExecute(user, command);
-        fsExecute(user, doAs, command);
+        fsExecute(user, command);
-        fsExecute(user, doAs, command);
+        fsExecute(user, command);
-        fsExecute(user, doAs, command);
+        fsExecute(user, command);
-        fsExecute(user, doAs, command);
+        fsExecute(user, command);
-        fsExecute(user, doAs, command);
+        fsExecute(user, command);
