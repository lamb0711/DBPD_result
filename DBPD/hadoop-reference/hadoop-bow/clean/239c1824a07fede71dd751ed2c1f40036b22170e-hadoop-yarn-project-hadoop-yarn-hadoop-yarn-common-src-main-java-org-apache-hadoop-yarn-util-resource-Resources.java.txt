YARN-5586. Update the Resources class to consider all resource types. Contributed by Varun Vasudev.

+import org.apache.hadoop.yarn.util.UnitsConversionUtil;
+      // this is a fix for getVirtualCores returning an int
+      if (resourceValue > Integer.MAX_VALUE) {
+        tmp.get(ResourceInformation.VCORES.getName())
+            .setValue((long) Integer.MAX_VALUE);
+      }
-    return createResource(res.getMemorySize(), res.getVirtualCores());
+    Resource ret = Resource.newInstance(0, 0);
+    for (Map.Entry<String, ResourceInformation> entry : res.getResources()
+        .entrySet()) {
+      ret.setResourceInformation(entry.getKey(),
+          ResourceInformation.newInstance(entry.getValue()));
+    }
+    return ret;
-    lhs.setMemorySize(lhs.getMemorySize() + rhs.getMemorySize());
-    lhs.setVirtualCores(lhs.getVirtualCores() + rhs.getVirtualCores());
+    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
+        .entrySet()) {
+      String name = entry.getKey();
+      try {
+        ResourceInformation rhsValue = rhs.getResourceInformation(name);
+        ResourceInformation lhsValue = entry.getValue();
+        Long convertedRhs = UnitsConversionUtil
+            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
+                rhsValue.getValue());
+        lhs.setResourceValue(name, lhsValue.getValue() + convertedRhs);
+      } catch (YarnException ye) {
+        continue;
+      }
+    }
-    lhs.setMemorySize(lhs.getMemorySize() - rhs.getMemorySize());
-    lhs.setVirtualCores(lhs.getVirtualCores() - rhs.getVirtualCores());
+    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
+        .entrySet()) {
+      String name = entry.getKey();
+      try {
+        ResourceInformation rhsValue = rhs.getResourceInformation(name);
+        ResourceInformation lhsValue = entry.getValue();
+        Long convertedRhs = UnitsConversionUtil
+            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
+                rhsValue.getValue());
+        lhs.setResourceValue(name, lhsValue.getValue() - convertedRhs);
+      } catch (YarnException ye) {
+        continue;
+      }
+    }
-    lhs.setMemorySize((long)(lhs.getMemorySize() * by));
-    lhs.setVirtualCores((int)(lhs.getVirtualCores() * by));
+    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
+        .entrySet()) {
+      String name = entry.getKey();
+      ResourceInformation lhsValue = entry.getValue();
+      lhs.setResourceValue(name, (long) (lhsValue.getValue() * by));
+    }
-    lhs.setMemorySize(lhs.getMemorySize() + (long)(rhs.getMemorySize() * by));
-    lhs.setVirtualCores(lhs.getVirtualCores()
-        + (int)(rhs.getVirtualCores() * by));
+    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
+        .entrySet()) {
+      String name = entry.getKey();
+      try {
+        ResourceInformation rhsValue = rhs.getResourceInformation(name);
+        ResourceInformation lhsValue = entry.getValue();
+        Long convertedRhs = (long) (UnitsConversionUtil
+            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
+                rhsValue.getValue()) * by);
+        lhs.setResourceValue(name, lhsValue.getValue() + convertedRhs);
+      } catch (YarnException ye) {
+        continue;
+      }
+    }
-    out.setMemorySize((long)(lhs.getMemorySize() * by));
-    out.setVirtualCores((int)(lhs.getVirtualCores() * by));
+    for (Map.Entry<String, ResourceInformation> entry : out.getResources()
+        .entrySet()) {
+      String name = entry.getKey();
+      ResourceInformation lhsValue = entry.getValue();
+      out.setResourceValue(name, (long) (lhsValue.getValue() * by));
+    }
-    return smaller.getMemorySize() <= bigger.getMemorySize() &&
-        smaller.getVirtualCores() <= bigger.getVirtualCores();
+    for (Map.Entry<String, ResourceInformation> entry : smaller.getResources()
+        .entrySet()) {
+      String name = entry.getKey();
+      try {
+        ResourceInformation rhsValue = bigger.getResourceInformation(name);
+        ResourceInformation lhsValue = entry.getValue();
+        Long convertedRhs = UnitsConversionUtil
+            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
+                rhsValue.getValue());
+        if(lhsValue.getValue() > convertedRhs) {
+          return false;
+        }
+      } catch (YarnException ye) {
+        return false;
+      }
+    }
+    return true;
-    return createResource(Math.min(lhs.getMemorySize(), rhs.getMemorySize()),
-        Math.min(lhs.getVirtualCores(), rhs.getVirtualCores()));
+    Resource ret = createResource(0);
+    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
+        .entrySet()) {
+      String name = entry.getKey();
+      try {
+        ResourceInformation rhsValue = rhs.getResourceInformation(name);
+        ResourceInformation lhsValue = entry.getValue();
+        Long convertedRhs = UnitsConversionUtil
+            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
+                rhsValue.getValue());
+        ResourceInformation outInfo =
+            lhsValue.getValue() < convertedRhs ? lhsValue : rhsValue;
+        ret.setResourceInformation(name, outInfo);
+      } catch (YarnException ye) {
+        continue;
+      }
+    }
+    return ret;
-    return createResource(Math.max(lhs.getMemorySize(), rhs.getMemorySize()),
-        Math.max(lhs.getVirtualCores(), rhs.getVirtualCores()));
+    Resource ret = createResource(0);
+    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
+        .entrySet()) {
+      String name = entry.getKey();
+      try {
+        ResourceInformation rhsValue = rhs.getResourceInformation(name);
+        ResourceInformation lhsValue = entry.getValue();
+        Long convertedRhs = UnitsConversionUtil
+            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
+                rhsValue.getValue());
+        ResourceInformation outInfo =
+            lhsValue.getValue() > convertedRhs ? lhsValue : rhsValue;
+        ret.setResourceInformation(name, outInfo);
+      } catch (YarnException ye) {
+        continue;
+      }
+    }
+    return ret;
