HDDS-372. There are three buffer copies in BlockOutputStream. Contributed by Shashikant Banerjee.

+
+import java.nio.ByteBuffer;
-   * @param byteString input data in the form of ByteString.
+   * @param byteBuffer input data in the form of ByteString.
-  public ChecksumData computeChecksum(ByteString byteString)
+  public ChecksumData computeChecksum(ByteBuffer byteBuffer)
-    return computeChecksum(byteString.toByteArray());
+    return computeChecksum(byteBuffer.array(), byteBuffer.position(),
+        byteBuffer.limit());
+    return computeChecksum(data, 0, data.length);
+  }
+
+  /**
+   * Computes checksum for give data.
+   * @param data input data in the form of byte array.
+   * @return ChecksumData computed for input data.
+   */
+  public ChecksumData computeChecksum(byte[] data, int offset, int len)
+      throws OzoneChecksumException {
-    int dataSize = data.length;
+    int dataSize = len - offset;
-      checksumList.add(computeChecksumAtIndex(data, index));
+      checksumList.add(computeChecksumAtIndex(data, index, offset, len));
+   * @param start start pos of the array where the computation has to start
+   * @length length of array till which checksum needs to be computed
-  private ByteString computeChecksumAtIndex(byte[] data, int index)
+  private ByteString computeChecksumAtIndex(byte[] data, int index, int start,
+      int length)
-    int offset = index * bytesPerChecksum;
+    int offset = start + index * bytesPerChecksum;
+    int dataLength = length - start;
-    if ((offset + len) > data.length) {
-      len = data.length - offset;
+    if ((offset + len) > dataLength) {
+      len = dataLength - offset;
-    ChecksumData computedChecksumData = checksum.computeChecksum(data);
+    ChecksumData computedChecksumData =
+        checksum.computeChecksum(data, 0, data.length);
