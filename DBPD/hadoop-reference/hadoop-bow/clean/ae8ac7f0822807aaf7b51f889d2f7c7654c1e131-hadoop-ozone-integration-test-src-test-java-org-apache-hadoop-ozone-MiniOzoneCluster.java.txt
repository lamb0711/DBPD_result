HDFS-13424. Ozone: Refactor MiniOzoneClassicCluster. Contributed by Nanda Kumar.

+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdds.conf.OzoneConfiguration;
-import org.apache.hadoop.ozone.client.rest.OzoneException;
+import org.apache.hadoop.ozone.client.OzoneClient;
-import org.apache.hadoop.ozone.web.client.OzoneRestClient;
+import org.apache.hadoop.test.GenericTestUtils;
-import java.io.Closeable;
+import java.util.List;
+import java.util.Optional;
+import java.util.UUID;
-public interface MiniOzoneCluster extends AutoCloseable, Closeable {
-  void close();
+public interface MiniOzoneCluster {
-  boolean restartDataNode(int i) throws IOException;
+  /**
+   * Returns the configuration object associated with the MiniOzoneCluster.
+   *
+   * @return Configuration
+   */
+  Configuration getConf();
-  boolean restartDataNode(int i, boolean keepPort) throws IOException;
+  /**
+   * Waits for the cluster to be ready, this call blocks till all the
+   * configured {@link HddsDatanodeService} registers with
+   * {@link StorageContainerManager}.
+   *
+   * @throws TimeoutException In case of timeout
+   * @throws InterruptedException In case of interrupt while waiting
+   */
+  void waitForClusterToBeReady() throws TimeoutException, InterruptedException;
-  void shutdown();
+  /**
+   * Waits/blocks till the cluster is out of chill mode.
+   *
+   * @throws TimeoutException TimeoutException In case of timeout
+   * @throws InterruptedException In case of interrupt while waiting
+   */
+  void waitTobeOutOfChillMode() throws TimeoutException, InterruptedException;
+  /**
+   * Returns {@link StorageContainerManager} associated with this
+   * {@link MiniOzoneCluster} instance.
+   *
+   * @return {@link StorageContainerManager} instance
+   */
+  /**
+   * Returns {@link KeySpaceManager} associated with this
+   * {@link MiniOzoneCluster} instance.
+   *
+   * @return {@link KeySpaceManager} instance
+   */
-  OzoneRestClient createOzoneRestClient() throws OzoneException;
+  /**
+   * Returns the list of {@link HddsDatanodeService} which are part of this
+   * {@link MiniOzoneCluster} instance.
+   *
+   * @return List of {@link HddsDatanodeService}
+   */
+  List<HddsDatanodeService> getHddsDatanodes();
+  /**
+   * Returns an {@link OzoneClient} to access the {@link MiniOzoneCluster}.
+   *
+   * @return {@link OzoneClient}
+   * @throws IOException
+   */
+  OzoneClient getClient() throws IOException;
+
+  /**
+   * Returns an RPC based {@link OzoneClient} to access the
+   * {@link MiniOzoneCluster}.
+   *
+   * @return {@link OzoneClient}
+   * @throws IOException
+   */
+  OzoneClient getRpcClient() throws IOException;
+
+  /**
+   * Returns an REST based {@link OzoneClient} to access the
+   * {@link MiniOzoneCluster}.
+   *
+   * @return {@link OzoneClient}
+   * @throws IOException
+   */
+  OzoneClient getRestClient() throws IOException;
+
+  /**
+   * Returns StorageContainerLocationClient to communicate with
+   * {@link StorageContainerManager} associated with the MiniOzoneCluster.
+   *
+   * @return StorageContainerLocation Client
+   * @throws IOException
+   */
-  createStorageContainerLocationClient() throws IOException;
+  getStorageContainerLocationClient()  throws IOException;
-  void waitOzoneReady() throws TimeoutException, InterruptedException;
+  /**
+   * Restarts StorageContainerManager instance.
+   *
+   * @throws IOException
+   */
+  void restartStorageContainerManager() throws IOException;
-  void waitDatanodeOzoneReady(int dnIndex)
-      throws TimeoutException, InterruptedException;
+  /**
+   * Restarts KeySpaceManager instance.
+   *
+   * @throws IOException
+   */
+  void restartKeySpaceManager() throws IOException;
-  void waitTobeOutOfChillMode() throws TimeoutException,
-      InterruptedException;
+  /**
+   * Restart a particular HddsDatanode.
+   *
+   * @param i index of HddsDatanode in the MiniOzoneCluster
+   */
+  void restartHddsDatanode(int i);
-  void waitForHeartbeatProcessed() throws TimeoutException,
-      InterruptedException;
+  /**
+   * Shutdown a particular HddsDatanode.
+   *
+   * @param i index of HddsDatanode in the MiniOzoneCluster
+   */
+  void shutdownHddsDatanode(int i);
+
+  /**
+   * Shutdown the MiniOzoneCluster.
+   */
+  void shutdown();
+
+  /**
+   * Returns the Builder to construct MiniOzoneCluster.
+   *
+   * @param conf OzoneConfiguration
+   *
+   * @return MiniOzoneCluster builder
+   */
+  static Builder newBuilder(OzoneConfiguration conf) {
+    return new MiniOzoneClusterImpl.Builder(conf);
+  }
+
+  abstract class Builder {
+
+    protected static final int DEFAULT_HB_INTERVAL_MS = 1000;
+    protected static final int DEFAULT_HB_PROCESSOR_INTERVAL_MS = 100;
+
+    protected final OzoneConfiguration conf;
+    protected final String path;
+
+    protected String clusterId;
+
+    protected Optional<Boolean> enableTrace = Optional.of(false);
+    protected Optional<Integer> hbInterval = Optional.empty();
+    protected Optional<Integer> hbProcessorInterval = Optional.empty();
+    protected Optional<String> scmId = Optional.empty();
+    protected Optional<String> ksmId = Optional.empty();
+
+    protected Boolean ozoneEnabled = true;
+    protected Boolean randomContainerPort = true;
+
+    // Use relative smaller number of handlers for testing
+    protected int numOfKsmHandlers = 20;
+    protected int numOfScmHandlers = 20;
+    protected int numOfDatanodes = 1;
+
+    protected Builder(OzoneConfiguration conf) {
+      this.conf = conf;
+      this.clusterId = UUID.randomUUID().toString();
+      this.path = GenericTestUtils.getTempPath(
+          MiniOzoneClusterImpl.class.getSimpleName() + "-" + clusterId);
+    }
+
+    /**
+     * Sets the cluster Id.
+     *
+     * @param id cluster Id
+     *
+     * @return MiniOzoneCluster.Builder
+     */
+    public Builder setClusterId(String id) {
+      clusterId = id;
+      return this;
+    }
+
+    /**
+     * Sets the SCM id.
+     *
+     * @param id SCM Id
+     *
+     * @return MiniOzoneCluster.Builder
+     */
+    public Builder setScmId(String id) {
+      scmId = Optional.of(id);
+      return this;
+    }
+
+    /**
+     * Sets the KSM id.
+     *
+     * @param id KSM Id
+     *
+     * @return MiniOzoneCluster.Builder
+     */
+    public Builder setKsmId(String id) {
+      ksmId = Optional.of(id);
+      return this;
+    }
+
+    /**
+     * If set to true container service will be started in a random port.
+     *
+     * @param randomPort enable random port
+     *
+     * @return MiniOzoneCluster.Builder
+     */
+    public Builder setRandomContainerPort(boolean randomPort) {
+      randomContainerPort = randomPort;
+      return this;
+    }
+
+    /**
+     * Sets the number of HddsDatanodes to be started as part of
+     * MiniOzoneCluster.
+     *
+     * @param val number of datanodes
+     *
+     * @return MiniOzoneCluster.Builder
+     */
+    public Builder setNumDatanodes(int val) {
+      numOfDatanodes = val;
+      return this;
+    }
+
+
+    /**
+     * Sets the number of HeartBeat Interval of Datanodes, the value should be
+     * in MilliSeconds.
+     *
+     * @param val HeartBeat interval in milliseconds
+     *
+     * @return MiniOzoneCluster.Builder
+     */
+    public Builder setHbInterval(int val) {
+      hbInterval = Optional.of(val);
+      return this;
+    }
+
+    /**
+     * Sets the number of HeartBeat Processor Interval of Datanodes,
+     * the value should be in MilliSeconds.
+     *
+     * @param val HeartBeat Processor interval in milliseconds
+     *
+     * @return MiniOzoneCluster.Builder
+     */
+    public Builder setHbProcessorInterval (int val) {
+      hbProcessorInterval = Optional.of(val);
+      return this;
+    }
+
+    /**
+     * When set to true, enables trace level logging.
+     *
+     * @param trace true or false
+     *
+     * @return MiniOzoneCluster.Builder
+     */
+    public Builder setTrace(Boolean trace) {
+      enableTrace = Optional.of(trace);
+      return this;
+    }
+
+    /**
+     * Modifies the configuration such that Ozone will be disabled.
+     *
+     * @return MiniOzoneCluster.Builder
+     */
+    public Builder disableOzone() {
+      ozoneEnabled = false;
+      return this;
+    }
+
+    /**
+     * Constructs and returns MiniOzoneCluster.
+     *
+     * @return {@link MiniOzoneCluster}
+     *
+     * @throws IOException
+     */
+    public abstract MiniOzoneCluster build() throws IOException;
+  }
