YARN-922. Change FileSystemRMStateStore to use directories (Jian He via bikas)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504261 13f79535-47bb-0310-9956-ffa450edef68

-      FileStatus[] childNodes = fs.listStatus(rmAppRoot);
-                                      new ArrayList<ApplicationAttemptState>();
-      for(FileStatus childNodeStatus : childNodes) {
-        assert childNodeStatus.isFile();
-        String childNodeName = childNodeStatus.getPath().getName();
-        Path childNodePath = getNodePath(rmAppRoot, childNodeName);
-        byte[] childData = readFile(childNodePath, childNodeStatus.getLen());
-        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){
-          // application
-          LOG.info("Loading application from node: " + childNodeName);
-          ApplicationId appId = ConverterUtils.toApplicationId(childNodeName);
-          ApplicationStateDataPBImpl appStateData =
-              new ApplicationStateDataPBImpl(
-                                ApplicationStateDataProto.parseFrom(childData));
-          ApplicationState appState = new ApplicationState(
-                               appStateData.getSubmitTime(),
-                               appStateData.getApplicationSubmissionContext(),
-                               appStateData.getUser());
-          // assert child node name is same as actual applicationId
-          assert appId.equals(appState.context.getApplicationId());
-          rmState.appState.put(appId, appState);
-        } else if(childNodeName.startsWith(
-                                ApplicationAttemptId.appAttemptIdStrPrefix)) {
-          // attempt
-          LOG.info("Loading application attempt from node: " + childNodeName);
-          ApplicationAttemptId attemptId =
-                          ConverterUtils.toApplicationAttemptId(childNodeName);
-          ApplicationAttemptStateDataPBImpl attemptStateData =
-              new ApplicationAttemptStateDataPBImpl(
-                  ApplicationAttemptStateDataProto.parseFrom(childData));
-          Credentials credentials = null;
-          if(attemptStateData.getAppAttemptTokens() != null){
-            credentials = new Credentials();
-            DataInputByteBuffer dibb = new DataInputByteBuffer();
-            dibb.reset(attemptStateData.getAppAttemptTokens());
-            credentials.readTokenStorageStream(dibb);
-          }
-          ApplicationAttemptState attemptState =
-              new ApplicationAttemptState(attemptId,
-                attemptStateData.getMasterContainer(), credentials);
+          new ArrayList<ApplicationAttemptState>();
-          // assert child node name is same as application attempt id
-          assert attemptId.equals(attemptState.getAttemptId());
-          attempts.add(attemptState);
-        } else {
-          LOG.info("Unknown child node with name: " + childNodeName);
+      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {
+        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {
+          assert childNodeStatus.isFile();
+          String childNodeName = childNodeStatus.getPath().getName();
+          byte[] childData =
+              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());
+          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {
+            // application
+            LOG.info("Loading application from node: " + childNodeName);
+            ApplicationId appId = ConverterUtils.toApplicationId(childNodeName);
+            ApplicationStateDataPBImpl appStateData =
+                new ApplicationStateDataPBImpl(
+                  ApplicationStateDataProto.parseFrom(childData));
+            ApplicationState appState =
+                new ApplicationState(appStateData.getSubmitTime(),
+                  appStateData.getApplicationSubmissionContext(),
+                  appStateData.getUser());
+            // assert child node name is same as actual applicationId
+            assert appId.equals(appState.context.getApplicationId());
+            rmState.appState.put(appId, appState);
+          } else if (childNodeName
+            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {
+            // attempt
+            LOG.info("Loading application attempt from node: " + childNodeName);
+            ApplicationAttemptId attemptId =
+                ConverterUtils.toApplicationAttemptId(childNodeName);
+            ApplicationAttemptStateDataPBImpl attemptStateData =
+                new ApplicationAttemptStateDataPBImpl(
+                  ApplicationAttemptStateDataProto.parseFrom(childData));
+            Credentials credentials = null;
+            if (attemptStateData.getAppAttemptTokens() != null) {
+              credentials = new Credentials();
+              DataInputByteBuffer dibb = new DataInputByteBuffer();
+              dibb.reset(attemptStateData.getAppAttemptTokens());
+              credentials.readTokenStorageStream(dibb);
+            }
+            ApplicationAttemptState attemptState =
+                new ApplicationAttemptState(attemptId,
+                  attemptStateData.getMasterContainer(), credentials);
+
+            // assert child node name is same as application attempt id
+            assert attemptId.equals(attemptState.getAttemptId());
+            attempts.add(attemptState);
+          } else {
+            LOG.info("Unknown child node with name: " + childNodeName);
+          }
-      // go through all attempts and add them to their apps
-      for(ApplicationAttemptState attemptState : attempts) {
+      // go through all attempts and add them to their apps, Ideally, each
+      // attempt node must have a corresponding app node, because remove
+      // directory operation remove both at the same time
+      for (ApplicationAttemptState attemptState : attempts) {
-        if(appState != null) {
-          appState.attempts.put(attemptState.getAttemptId(), attemptState);
-        } else {
-          // the application node may have been removed when the application
-          // completed but the RM might have stopped before it could remove the
-          // application attempt nodes
-          LOG.info("Application node not found for attempt: "
-                    + attemptState.getAttemptId());
-          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));
-        }
+        assert appState != null;
+        appState.attempts.put(attemptState.getAttemptId(), attemptState);
+      if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {
+        rmState.rmSecretManagerState.dtSequenceNumber =
+            Integer.parseInt(childNodeName.split("_")[1]);
+        continue;
+      }
+
-      } else if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {
-        rmState.rmSecretManagerState.dtSequenceNumber =
-            Integer.parseInt(childNodeName.split("_")[1]);
-      }else {
+      } else {
-    Path nodeCreatePath = getNodePath(rmAppRoot, appId);
+    Path appDirPath = getAppDir(rmAppRoot, appId);
+    fs.mkdirs(appDirPath);
+    Path nodeCreatePath = getNodePath(appDirPath, appId);
-    Path nodeCreatePath = getNodePath(rmAppRoot, attemptId);
+    ApplicationAttemptId appAttemptId =
+        ConverterUtils.toApplicationAttemptId(attemptId);
+    Path appDirPath =
+        getAppDir(rmAppRoot, appAttemptId.getApplicationId().toString());
+    Path nodeCreatePath = getNodePath(appDirPath, attemptId);
-    Path nodeRemovePath = getNodePath(rmAppRoot, appId);
+    Path nodeRemovePath = getAppDir(rmAppRoot, appId);
-    for(ApplicationAttemptId attemptId : appState.attempts.keySet()) {
-      removeApplicationAttemptState(attemptId.toString());
-    }
-  }
-
-  public synchronized void removeApplicationAttemptState(String attemptId)
-      throws Exception {
-    Path nodeRemovePath = getNodePath(rmAppRoot, attemptId);
-    LOG.info("Removing info for attempt: " + attemptId
-             + " at: " + nodeRemovePath);
-    deleteFile(nodeRemovePath);
+  private Path getAppDir(Path root, String appId) {
+    return getNodePath(root, appId);
+  }
+
