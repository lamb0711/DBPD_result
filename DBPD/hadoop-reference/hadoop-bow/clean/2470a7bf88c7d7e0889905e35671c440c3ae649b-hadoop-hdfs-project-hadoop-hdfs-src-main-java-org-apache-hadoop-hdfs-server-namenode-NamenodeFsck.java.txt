HDFS-8563. Erasure Coding: fsck handles file smaller than a full stripe. Contributed by Walter Su.

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStriped;
-import org.apache.hadoop.io.erasurecode.ECSchema;
-      BlockInfo blockInfo = namenode.getNamesystem().getStoredBlock(block);
+      BlockInfo blockInfo = bm.getStoredBlock(block);
+      final int minReplication = bm.getMinStorageNum(storedBlock);
-      if(file.getReplication() == 0) {
-        final FSNamesystem fsn = namenode.getNamesystem();
-        final ECSchema ecSchema;
-        fsn.readLock();
-        try {
-          INode inode = namenode.getNamesystem().getFSDirectory()
-              .getINode(path);
-          INodesInPath iip = INodesInPath.fromINode(inode);
-          ecSchema = FSDirErasureCodingOp.getErasureCodingSchema(fsn, iip);
-        } finally {
-          fsn.readUnlock();
-        }
-        targetFileReplication = (short) (ecSchema.getNumDataUnits() + ecSchema.getNumParityUnits());
+      if (file.getECSchema() != null) {
+        assert storedBlock instanceof BlockInfoStriped;
+        targetFileReplication = ((BlockInfoStriped) storedBlock)
+            .getRealTotalBlockNum();
-      if(totalReplicasPerBlock < res.minReplication){
+      if(totalReplicasPerBlock < minReplication){
-      if (totalReplicasPerBlock >= res.minReplication)
+      if (totalReplicasPerBlock >= minReplication)
-    final int minReplication;
-
-    Result(int minReplication) {
-      this.minReplication = minReplication;
-    }
-
+    final short minReplication;
-      super(conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY,
-                        DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_DEFAULT));
+      this.minReplication = (short)conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY,
+                                            DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_DEFAULT);
-    final String ecSchema;
+    final String defaultSchema;
-      this(ErasureCodingSchemaManager.getSystemDefaultSchema());
-    }
-
-    ErasureCodingResult(ECSchema ecSchema) {
-      super(ecSchema.getNumDataUnits());
-      this.ecSchema = ecSchema.getSchemaName();
+      defaultSchema = ErasureCodingSchemaManager.getSystemDefaultSchema()
+          .getSchemaName();
-          res.append("\n  ").append("MIN REQUIRED EC BLOCK:\t")
-              .append(minReplication);
-      res.append("\n Unsatisfactory placement block groups:\t\t")
+      res.append("\n Unsatisfactory placement block groups:\t")
-      res.append("\n Default schema:\t").append(ecSchema)
+      res.append("\n Default schema:\t\t").append(defaultSchema)
-          corruptBlocks).append("\n Missing ec-blocks:\t\t").append(
+          corruptBlocks).append("\n Missing internal blocks:\t").append(
-        res.append("\n Decommissioned ec-blocks:\t").append(
+        res.append("\n Decommissioned internal blocks:\t").append(
-        res.append("\n Decommissioning ec-blocks:\t").append(
+        res.append("\n Decommissioning internal blocks:\t").append(
