HDFS-13075. [SPS]: Provide External Context implementation. Contributed by Uma Maheswara Rao G.

+import org.apache.hadoop.fs.StorageType;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.CheckDNSpaceRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetFilePathRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetNextSPSPathIdRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetNextSPSPathIdResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.HasLowRedundancyBlocksRequestProto;
+
+  @Override
+  public Long getNextSPSPathId() throws IOException {
+    GetNextSPSPathIdRequestProto req =
+        GetNextSPSPathIdRequestProto.newBuilder().build();
+    try {
+      GetNextSPSPathIdResponseProto nextSPSPathId =
+          rpcProxy.getNextSPSPathId(NULL_CONTROLLER, req);
+      return nextSPSPathId.hasFileId() ? nextSPSPathId.getFileId() : null;
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+  @Override
+  public String getFilePath(Long inodeId) throws IOException {
+    GetFilePathRequestProto req =
+        GetFilePathRequestProto.newBuilder().setFileId(inodeId).build();
+    try {
+      return rpcProxy.getFilePath(NULL_CONTROLLER, req).getSrcPath();
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+  @Override
+  public boolean checkDNSpaceForScheduling(DatanodeInfo dn, StorageType type,
+      long estimatedSize) throws IOException {
+    CheckDNSpaceRequestProto req = CheckDNSpaceRequestProto.newBuilder()
+        .setDnInfo(PBHelperClient.convert(dn))
+        .setStorageType(PBHelperClient.convertStorageType(type))
+        .setEstimatedSize(estimatedSize).build();
+    try {
+      return rpcProxy.checkDNSpaceForScheduling(NULL_CONTROLLER, req)
+          .getIsGoodDatanodeWithSpace();
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+  @Override
+  public boolean hasLowRedundancyBlocks(long inodeId) throws IOException {
+    HasLowRedundancyBlocksRequestProto req = HasLowRedundancyBlocksRequestProto
+        .newBuilder().setInodeId(inodeId).build();
+    try {
+      return rpcProxy.hasLowRedundancyBlocks(NULL_CONTROLLER, req)
+          .getHasLowRedundancyBlocks();
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
