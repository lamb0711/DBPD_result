HDFS-5614. NameNode: implement handling of ACLs in combination with snapshots. Contributed by Chris Nauroth.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1563304 13f79535-47bb-0310-9956-ffa450edef68

-   * not have an ACL, then this method returns an empty list.
+   * not have an ACL, then this method returns an empty list.  This method
+   * supports querying by snapshot ID.
-   * @param inode INodeWithAdditionalFields to read
-   * @param snapshotId int latest snapshot ID of inode
+   * @param inode INode to read
+   * @param snapshotId int ID of snapshot to read
-  public static List<AclEntry> readINodeAcl(INodeWithAdditionalFields inode,
-      int snapshotId) {
-    FsPermission perm = inode.getPermissionStatus(snapshotId).getPermission();
+  public static List<AclEntry> readINodeAcl(INode inode, int snapshotId) {
+    FsPermission perm = inode.getFsPermission(snapshotId);
-      return inode.getAclFeature().getEntries();
+      return inode.getAclFeature(snapshotId).getEntries();
+   * This method always reads the inode's current state and does not support
+   * querying by snapshot ID.  This is because the method is intended to support
+   * ACL modification APIs, which always apply a delta on top of current state.
-   * @param inode INodeWithAdditionalFields to read
-   * @param snapshotId int latest snapshot ID of inode
+   * @param inode INode to read
-  public static List<AclEntry> readINodeLogicalAcl(
-      INodeWithAdditionalFields inode, int snapshotId) {
+  public static List<AclEntry> readINodeLogicalAcl(INode inode) {
-    FsPermission perm = inode.getPermissionStatus(snapshotId).getPermission();
+    FsPermission perm = inode.getFsPermission();
-   * @param inode INodeWithAdditionalFields to update
+   * @param inode INode to update
-  public static void removeINodeAcl(INodeWithAdditionalFields inode,
-      int snapshotId) throws QuotaExceededException {
-    FsPermission perm = inode.getPermissionStatus(snapshotId).getPermission();
+  public static void removeINodeAcl(INode inode, int snapshotId)
+      throws QuotaExceededException {
+    FsPermission perm = inode.getFsPermission();
-      inode.removeAclFeature();
+      inode.removeAclFeature(snapshotId);
-   * @param inode INodeWithAdditionalFields to update
+   * @param inode INode to update
-  public static void updateINodeAcl(INodeWithAdditionalFields inode,
-      List<AclEntry> newAcl, int snapshotId) throws AclException,
-      QuotaExceededException {
+  public static void updateINodeAcl(INode inode, List<AclEntry> newAcl,
+      int snapshotId) throws AclException, QuotaExceededException {
-    FsPermission perm = inode.getPermissionStatus(snapshotId).getPermission();
+    FsPermission perm = inode.getFsPermission();
-      // Attach entries to the feature, creating a new feature if needed.
-      AclFeature aclFeature = inode.getAclFeature();
-      if (aclFeature == null) {
-        aclFeature = new AclFeature();
-        inode.addAclFeature(aclFeature);
+      // Attach entries to the feature.
+      if (perm.getAclBit()) {
+        inode.removeAclFeature(snapshotId);
-      aclFeature.setEntries(featureEntries);
+      inode.addAclFeature(new AclFeature(featureEntries), snapshotId);
-        inode.removeAclFeature();
+        inode.removeAclFeature(snapshotId);
