HDFS-12792. RBF: Test Router-based federation using HDFSContract. Contributed by Inigo Goiri.

+import static org.apache.hadoop.hdfs.server.federation.router.RBFConfigKeys.DFS_ROUTER_SAFEMODE_ENABLE;
+import org.apache.hadoop.hdfs.server.federation.resolver.FederationNamespaceInfo;
-public class RouterDFSCluster {
+public class MiniRouterDFSCluster {
-      LoggerFactory.getLogger(RouterDFSCluster.class);
+      LoggerFactory.getLogger(MiniRouterDFSCluster.class);
+  private static final Random RND = new Random();
-  public RouterDFSCluster(boolean ha, int numNameservices, int numNamenodes,
+  public MiniRouterDFSCluster(
+      boolean ha, int numNameservices, int numNamenodes,
-  public RouterDFSCluster(boolean ha, int numNameservices) {
+  public MiniRouterDFSCluster(boolean ha, int numNameservices) {
-  public RouterDFSCluster(boolean ha, int numNameservices, int numNamenodes) {
+  public MiniRouterDFSCluster(
+      boolean ha, int numNameservices, int numNamenodes) {
+    // Disable safemode on startup
+    conf.setBoolean(DFS_ROUTER_SAFEMODE_ENABLE, false);
+
-    Random r = new Random();
-    int randIndex = r.nextInt(nameservices.size());
+    int randIndex = RND.nextInt(nameservices.size());
+   * Wait for name spaces to be active.
+   * @throws Exception If we cannot check the status or we timeout.
+   */
+  public void waitActiveNamespaces() throws Exception {
+    for (RouterContext r : this.routers) {
+      Router router = r.router;
+      final ActiveNamenodeResolver resolver = router.getNamenodeResolver();
+      for (FederationNamespaceInfo ns : resolver.getNamespaces()) {
+        final String nsId = ns.getNameserviceId();
+        waitNamenodeRegistered(
+            resolver, nsId, FederationNamenodeServiceState.ACTIVE);
+      }
+    }
+  }
+
+  /**
