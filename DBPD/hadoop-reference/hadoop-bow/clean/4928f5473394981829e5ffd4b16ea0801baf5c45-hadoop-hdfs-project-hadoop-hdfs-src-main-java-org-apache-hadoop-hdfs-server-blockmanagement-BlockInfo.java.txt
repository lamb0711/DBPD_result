HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.

- * the {@link BlockCollection} it is part of and datanodes where the replicas of 
+ * the {@link BlockCollection} it is part of and datanodes where the replicas of
-public class BlockInfoContiguous extends Block
+public class BlockInfo extends Block
-  public static final BlockInfoContiguous[] EMPTY_ARRAY = {};
+  public static final BlockInfo[] EMPTY_ARRAY = {};
-   * 
+   *
-  public BlockInfoContiguous(short replication) {
+  public BlockInfo(short replication) {
-  
-  public BlockInfoContiguous(Block blk, short replication) {
+
+  public BlockInfo(Block blk, short replication) {
-  protected BlockInfoContiguous(BlockInfoContiguous from) {
+  protected BlockInfo(BlockInfo from) {
-  private BlockInfoContiguous getPrevious(int index) {
+  private BlockInfo getPrevious(int index) {
-    BlockInfoContiguous info = (BlockInfoContiguous)triplets[index*3+1];
-    assert info == null || 
-        info.getClass().getName().startsWith(BlockInfoContiguous.class.getName()) :
+    BlockInfo info = (BlockInfo)triplets[index*3+1];
+    assert info == null ||
+        info.getClass().getName().startsWith(BlockInfo.class.getName()) :
-  BlockInfoContiguous getNext(int index) {
+  BlockInfo getNext(int index) {
-    BlockInfoContiguous info = (BlockInfoContiguous)triplets[index*3+2];
+    BlockInfo info = (BlockInfo)triplets[index*3+2];
-        BlockInfoContiguous.class.getName()) :
+        BlockInfo.class.getName()) :
-  private BlockInfoContiguous setPrevious(int index, BlockInfoContiguous to) {
+  private BlockInfo setPrevious(int index, BlockInfo to) {
-    BlockInfoContiguous info = (BlockInfoContiguous)triplets[index*3+1];
+    BlockInfo info = (BlockInfo)triplets[index*3+1];
-  private BlockInfoContiguous setNext(int index, BlockInfoContiguous to) {
+  private BlockInfo setNext(int index, BlockInfo to) {
-    BlockInfoContiguous info = (BlockInfoContiguous)triplets[index*3+2];
+    BlockInfo info = (BlockInfo)triplets[index*3+2];
-    /* Not enough space left. Create a new array. Should normally 
+    /* Not enough space left. Create a new array. Should normally
-    assert getPrevious(dnIndex) == null && getNext(dnIndex) == null : 
+    assert getPrevious(dnIndex) == null && getNext(dnIndex) == null :
-    int lastNode = numNodes()-1; 
-    // replace current node triplet by the lastNode one 
+    int lastNode = numNodes()-1;
+    // replace current node triplet by the lastNode one
-    setNext(dnIndex, getNext(lastNode)); 
-    setPrevious(dnIndex, getPrevious(lastNode)); 
+    setNext(dnIndex, getNext(lastNode));
+    setPrevious(dnIndex, getPrevious(lastNode));
-    setNext(lastNode, null); 
-    setPrevious(lastNode, null); 
+    setNext(lastNode, null);
+    setPrevious(lastNode, null);
-  
+
-   * Insert this block into the head of the list of blocks 
+   * Insert this block into the head of the list of blocks
-  BlockInfoContiguous listInsert(BlockInfoContiguous head,
+  BlockInfo listInsert(BlockInfo head,
-    assert getPrevious(dnIndex) == null && getNext(dnIndex) == null : 
+    assert getPrevious(dnIndex) == null && getNext(dnIndex) == null :
-   * Remove this block from the list of blocks 
+   * Remove this block from the list of blocks
-   * If this block is the head of the list then return the next block as 
+   * If this block is the head of the list then return the next block as
-  BlockInfoContiguous listRemove(BlockInfoContiguous head,
+  BlockInfo listRemove(BlockInfo head,
-    BlockInfoContiguous next = this.getNext(dnIndex);
-    BlockInfoContiguous prev = this.getPrevious(dnIndex);
+    BlockInfo next = this.getNext(dnIndex);
+    BlockInfo prev = this.getPrevious(dnIndex);
-  public BlockInfoContiguous moveBlockToHead(BlockInfoContiguous head,
+  public BlockInfo moveBlockToHead(BlockInfo head,
-    BlockInfoContiguous next = this.setNext(curIndex, head);
-    BlockInfoContiguous prev = this.setPrevious(curIndex, null);
+    BlockInfo next = this.setNext(curIndex, head);
+    BlockInfo prev = this.setPrevious(curIndex, null);
-   * 
+   *
