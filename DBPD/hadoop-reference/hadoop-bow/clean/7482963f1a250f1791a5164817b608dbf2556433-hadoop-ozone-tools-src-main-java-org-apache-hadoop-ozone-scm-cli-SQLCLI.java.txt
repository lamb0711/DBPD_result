HDDS-30. Fix TestContainerSQLCli. Contributed by Shashikant Banerjee.

+import com.google.common.primitives.Longs;
+import com.google.protobuf.ByteString;
-          "containerName TEXT PRIMARY KEY NOT NULL, " +
+          "containerID LONG PRIMARY KEY NOT NULL, " +
-      "INSERT INTO containerInfo (containerName, leaderUUID) " +
-          "VALUES (\"%s\", \"%s\")";
+      "INSERT INTO containerInfo (containerID, leaderUUID) " +
+          "VALUES (\"%d\", \"%s\")";
-  // for block.db
-  private static final String CREATE_BLOCK_CONTAINER =
-      "CREATE TABLE blockContainer (" +
-          "blockKey TEXT PRIMARY KEY NOT NULL, " +
-          "containerName TEXT NOT NULL)";
-  private static final String INSERT_BLOCK_CONTAINER =
-      "INSERT INTO blockContainer (blockKey, containerName) " +
-          "VALUES (\"%s\", \"%s\")";
-    } else if (dbName.toString().equals(BLOCK_DB)) {
-      LOG.info("Converting block DB");
-      convertBlockDB(dbPath, outPath);
-    } else if (dbName.toString().equals(NODEPOOL_DB)) {
+    }  else if (dbName.toString().equals(NODEPOOL_DB)) {
-        String containerName = new String(key, encoding);
+        long containerID = Longs.fromByteArray(key);
-          insertContainerDB(conn, containerName,
+          insertContainerDB(conn, containerID,
-   * @param containerName the name of the container.
+   * @param containerID the id of the container.
-  private void insertContainerDB(Connection conn, String containerName,
+  private void insertContainerDB(Connection conn, long containerID,
-    LOG.info("Insert to sql container db, for container {}", containerName);
+    LOG.info("Insert to sql container db, for container {}", containerID);
-        INSERT_CONTAINER_INFO, containerName,
+        INSERT_CONTAINER_INFO, containerID,
-          INSERT_CONTAINER_MEMBERS, containerName, uuid);
+          INSERT_CONTAINER_MEMBERS, containerID, uuid);
-
-  /**
-   * Converts block.db to sqlite. This is rather simple db, the schema has only
-   * one table:
-   *
-   * blockContainer
-   * --------------------------
-   * blockKey*  | containerName
-   * --------------------------
-   *
-   * @param dbPath path to container db.
-   * @param outPath path to output sqlite
-   * @throws IOException throws exception.
-   */
-  private void convertBlockDB(Path dbPath, Path outPath) throws Exception {
-    LOG.info("Create tables for sql block db.");
-    File dbFile = dbPath.toFile();
-    try (MetadataStore dbStore = MetadataStoreBuilder.newBuilder()
-        .setConf(conf).setDbFile(dbFile).build();
-        Connection conn = connectDB(outPath.toString())) {
-      executeSQL(conn, CREATE_BLOCK_CONTAINER);
-
-      dbStore.iterate(null, (key, value) -> {
-        String blockKey = DFSUtilClient.bytes2String(key);
-        String containerName = DFSUtilClient.bytes2String(value);
-        String insertBlockContainer = String.format(
-            INSERT_BLOCK_CONTAINER, blockKey, containerName);
-
-        try {
-          executeSQL(conn, insertBlockContainer);
-          return true;
-        } catch (SQLException e) {
-          throw new IOException(e);
-        }
-      });
-    }
-  }
-
