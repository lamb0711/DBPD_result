HDFS-12069. Ozone: Create a general abstraction for metadata store. Contributed by Weiwei Yang.

-import org.apache.hadoop.utils.LevelDBStore;
-import org.iq80.leveldb.DBIterator;
-import org.iq80.leveldb.Options;
-import org.iq80.leveldb.WriteBatch;
+import org.apache.hadoop.utils.BatchOperation;
+import org.apache.hadoop.utils.MetadataStore;
+import org.apache.hadoop.utils.MetadataStoreBuilder;
-  private final LevelDBStore blockStore;
+  private final MetadataStore blockStore;
-  private final LevelDBStore openContainerStore;
+  private final MetadataStore openContainerStore;
-    Options options = new Options();
-    options.cacheSize(this.cacheSize * OzoneConsts.MB);
-    blockStore = new LevelDBStore(blockContainerDbPath, options);
+    blockStore = MetadataStoreBuilder.newBuilder()
+        .setConf(conf)
+        .setDbFile(blockContainerDbPath)
+        .setCacheSize(this.cacheSize * OzoneConsts.MB)
+        .build();
-    openContainerStore = new LevelDBStore(openContainsDbPath, options);
+    openContainerStore = MetadataStoreBuilder.newBuilder()
+        .setConf(conf)
+        .setDbFile(openContainsDbPath)
+        .setCacheSize(this.cacheSize * OzoneConsts.MB)
+        .build();
+
-    try (DBIterator iter = openContainerStore.getIterator()) {
-      for (iter.seekToFirst(); iter.hasNext(); iter.next()) {
+    try {
+      openContainerStore.iterate(null, (key, value) -> {
-          byte[] key = iter.peekNext().getKey();
-          byte[] value = iter.peekNext().getValue();
-        } catch (Exception ex) {
+        } catch (Exception e) {
-      }
+        return true;
+      });
-      try (WriteBatch wb = blockStore.createWriteBatch()) {
-        containerManager.getContainer(
-            DFSUtil.bytes2String(containerBytes));
-        String deletedKeyName = getDeletedKeyName(key);
-        // Add a tombstone for the deleted key
-        wb.put(DFSUtil.string2Bytes(deletedKeyName), containerBytes);
-        // Delete the block key
-        wb.delete(DFSUtil.string2Bytes(key));
-        blockStore.commitWriteBatch(wb);
-        // TODO: Add async tombstone clean thread to send delete command to
-        // datanodes in the pipeline to clean up the blocks from containers.
-        // TODO: Container report handling of the deleted blocks:
-        // Remove tombstone and update open container usage.
-        // We will revisit this when the closed container replication is done.
-      }
+      BatchOperation batch = new BatchOperation();
+      containerManager.getContainer(DFSUtil.bytes2String(containerBytes));
+      String deletedKeyName = getDeletedKeyName(key);
+      // Add a tombstone for the deleted key
+      batch.put(DFSUtil.string2Bytes(deletedKeyName), containerBytes);
+      // Delete the block key
+      batch.delete(DFSUtil.string2Bytes(key));
+      blockStore.writeBatch(batch);
+      // TODO: Add async tombstone clean thread to send delete command to
+      // datanodes in the pipeline to clean up the blocks from containers.
+      // TODO: Container report handling of the deleted blocks:
+      // Remove tombstone and update open container usage.
+      // We will revisit this when the closed container replication is done.
-}
+}
