YARN-5325. Stateless ARMRMProxy policies implementation. (Carlo Curino via Subru).

(cherry picked from commit 11c5336522d3504598fb94eee288d54df73418c6)

-/**
+/*
-package org.apache.hadoop.yarn.server.federation.policies.router;
+package org.apache.hadoop.yarn.server.federation.policies;
+
+import java.util.Map;
-import org.apache.hadoop.yarn.server.federation.policies.FederationPolicyInitializationContext;
-import org.apache.hadoop.yarn.server.federation.policies.FederationPolicyInitializationContextValidator;
-import org.apache.hadoop.yarn.server.federation.store.records.SubClusterIdInfo;
-import java.util.Map;
-
- * Abstract class provides common validation of reinitialize(), for all
- * policies that are "weight-based".
+ * Base abstract class for a weighted {@link ConfigurableFederationPolicy}.
-public abstract class BaseWeightedRouterPolicy
-    implements FederationRouterPolicy {
+public abstract class AbstractConfigurableFederationPolicy
+    implements ConfigurableFederationPolicy {
+  private boolean isDirty;
-  public BaseWeightedRouterPolicy() {
+  public AbstractConfigurableFederationPolicy() {
-  public void reinitialize(FederationPolicyInitializationContext
-      federationPolicyContext)
+  public void reinitialize(
+      FederationPolicyInitializationContext initializationContext)
+    isDirty = true;
-        .validate(federationPolicyContext, this.getClass().getCanonicalName());
+        .validate(initializationContext, this.getClass().getCanonicalName());
-    WeightedPolicyInfo newPolicyInfo = WeightedPolicyInfo
-        .fromByteBuffer(
-            federationPolicyContext.getSubClusterPolicyConfiguration()
-                .getParams());
+    WeightedPolicyInfo newPolicyInfo = WeightedPolicyInfo.fromByteBuffer(
+        initializationContext.getSubClusterPolicyConfiguration().getParams());
+    // and signal to childs that the reinit is free via isDirty var.
+      isDirty = false;
-    this.policyContext = federationPolicyContext;
+    this.policyContext = initializationContext;
+   *
-   * @throws FederationPolicyInitializationException if the configuration is
-   * not valid.
+   *
+   * @throws FederationPolicyInitializationException if the configuration is not
+   *           valid.
-  public void validate(WeightedPolicyInfo newPolicyInfo) throws
-      FederationPolicyInitializationException {
+  public void validate(WeightedPolicyInfo newPolicyInfo)
+      throws FederationPolicyInitializationException {
-      throw new FederationPolicyInitializationException("The policy to "
-          + "validate should not be null.");
-    }
-    Map<SubClusterIdInfo, Float> newWeights =
-        newPolicyInfo.getRouterPolicyWeights();
-    if (newWeights == null || newWeights.size() < 1) {
-          "Weight vector cannot be null/empty.");
+          "The policy to " + "validate should not be null.");
+  /**
+   * Returns true whether the last reinitialization requires actual changes, or
+   * was "free" as the weights have not changed. This is used by subclasses
+   * overriding reinitialize and calling super.reinitialize() to know wheter to
+   * quit early.
+   *
+   * @return whether more work is needed to initialize.
+   */
+  public boolean getIsDirty() {
+    return isDirty;
+  }
-   * configuration.
+   *         configuration.
-   *                   configuration.
+   *          configuration.
-  public void setPolicyInfo(
-      WeightedPolicyInfo policyInfo) {
+  public void setPolicyInfo(WeightedPolicyInfo policyInfo) {
+   *
+   *
+   *
-    Map<SubClusterId, SubClusterInfo> activeSubclusters = getPolicyContext()
-        .getFederationStateStoreFacade().getSubClusters(true);
+    Map<SubClusterId, SubClusterInfo> activeSubclusters =
+        getPolicyContext().getFederationStateStoreFacade().getSubClusters(true);
-
-
