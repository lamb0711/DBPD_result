YARN-5556. CapacityScheduler: Support deleting queues without requiring a RM restart. (Naganarasimha G R via wangda)

-import com.google.common.annotations.VisibleForTesting;
+
+import org.apache.hadoop.yarn.api.records.QueueState;
+import com.google.common.annotations.VisibleForTesting;
+
-    // Ensure all existing queues are still present
-    validateExistingQueues(queues, newQueues);
+    // Ensure queue hiearchy in the new XML file is proper.
+    validateQueueHierarchy(queues, newQueues);
-    // Add new queues
-    addNewQueues(queues, newQueues);
+    // Add new queues and delete OldQeueus only after validation.
+    updateQueues(queues, newQueues);
-   * Ensure all existing queues are present. Queues cannot be deleted
+   * Ensure all existing queues are present. Queues cannot be deleted if its not
+   * in Stopped state, Queue's cannot be moved from one hierarchy to other also.
+   *
-  private void validateExistingQueues(
-      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)
-      throws IOException {
+  private void validateQueueHierarchy(Map<String, CSQueue> queues,
+      Map<String, CSQueue> newQueues) throws IOException {
-          throw new IOException(queueName + " cannot be found during refresh!");
+          // old queue doesn't exist in the new XML
+          if (oldQueue.getState() == QueueState.STOPPED) {
+            LOG.info("Deleting Queue " + queueName + ", as it is not"
+                + " present in the modified capacity configuration xml");
+          } else {
+            throw new IOException(oldQueue.getQueuePath() + " is deleted from"
+                + " the new capacity scheduler configuration, but the"
+                + " queue is not yet in stopped state. "
+                + "Current State : " + oldQueue.getState());
+          }
+          //Queue's cannot be moved from one hierarchy to other
-   * Add the new queues (only) to our list of queues...
-   * ... be careful, do not overwrite existing queues.
-   * @param queues the existing queues
-   * @param newQueues the new queues
+   * Updates to our list of queues: Adds the new queues and deletes the removed
+   * ones... be careful, do not overwrite existing queues.
+   *
+   * @param existingQueues, the existing queues
+   * @param newQueues the new queues based on new XML
-  private void addNewQueues(
-      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues) {
+  private void updateQueues(Map<String, CSQueue> existingQueues,
+      Map<String, CSQueue> newQueues) {
-      if (!queues.containsKey(queueName)) {
-        queues.put(queueName, queue);
+      if (!existingQueues.containsKey(queueName)) {
+        existingQueues.put(queueName, queue);
+      }
+    }
+    for (Map.Entry<String, CSQueue> e : existingQueues.entrySet()) {
+      String queueName = e.getKey();
+      if (!newQueues.containsKey(queueName)) {
+        existingQueues.remove(queueName);
