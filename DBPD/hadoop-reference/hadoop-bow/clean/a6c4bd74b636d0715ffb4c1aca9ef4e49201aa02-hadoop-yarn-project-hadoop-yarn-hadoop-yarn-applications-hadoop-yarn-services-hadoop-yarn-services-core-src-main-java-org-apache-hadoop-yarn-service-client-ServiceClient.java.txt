YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He

-import org.apache.hadoop.yarn.api.records.ApplicationId;
-import org.apache.hadoop.yarn.api.records.ApplicationReport;
-import org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext;
-import org.apache.hadoop.yarn.api.records.ApplicationTimeout;
-import org.apache.hadoop.yarn.api.records.ApplicationTimeoutType;
-import org.apache.hadoop.yarn.api.records.ContainerLaunchContext;
-import org.apache.hadoop.yarn.api.records.FinalApplicationStatus;
-import org.apache.hadoop.yarn.api.records.LocalResource;
-import org.apache.hadoop.yarn.api.records.LocalResourceType;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.api.records.YarnApplicationState;
+
+import org.apache.hadoop.yarn.api.records.*;
-import static org.apache.hadoop.yarn.service.conf.YarnServiceConf.YARN_QUEUE;
+import static org.apache.hadoop.yarn.service.conf.YarnServiceConf.*;
-    submissionContext.setMaxAppAttempts(conf.getInt(
-        YarnServiceConf.AM_RESTART_MAX, 2));
+    submissionContext.setMaxAppAttempts(YarnServiceConf
+        .getInt(YarnServiceConf.AM_RESTART_MAX, 20, app.getConfiguration(),
+            conf));
+
+    setLogAggregationContext(app, conf, submissionContext);
-    Map<String, String> env = addAMEnv(conf);
+    Map<String, String> env = addAMEnv();
-    String cmdStr =
-        buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);
+    String cmdStr = buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);
-        .getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,
-            app.getConfiguration(), conf), 1));
+        .getLong(YarnServiceConf.AM_RESOURCE_MEM,
+            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),
+            conf), 1));
+  private void setLogAggregationContext(Service app, Configuration conf,
+      ApplicationSubmissionContext submissionContext) {
+    LogAggregationContext context = Records.newRecord(LogAggregationContext
+        .class);
+    String finalLogInclude = YarnServiceConf.get
+        (FINAL_LOG_INCLUSION_PATTERN, null, app.getConfiguration(), conf);
+    if (!StringUtils.isEmpty(finalLogInclude)) {
+      context.setIncludePattern(finalLogInclude);
+    }
+    String finalLogExclude = YarnServiceConf.get
+        (FINAL_LOG_EXCLUSION_PATTERN, null, app.getConfiguration(), conf);
+    if (!StringUtils.isEmpty(finalLogExclude)) {
+      context.setExcludePattern(finalLogExclude);
+    }
+    String rollingLogInclude = YarnServiceConf.get
+        (ROLLING_LOG_INCLUSION_PATTERN, null, app.getConfiguration(), conf);
+    if (!StringUtils.isEmpty(rollingLogInclude)) {
+      context.setRolledLogsIncludePattern(rollingLogInclude);
+    }
+    String rollingLogExclude = YarnServiceConf.get
+        (ROLLING_LOG_EXCLUSION_PATTERN, null, app.getConfiguration(), conf);
+    if (!StringUtils.isEmpty(rollingLogExclude)) {
+      context.setRolledLogsExcludePattern(rollingLogExclude);
+    }
+    submissionContext.setLogAggregationContext(context);
+  }
+
-  private Map<String, String> addAMEnv(Configuration conf) throws IOException {
+  private Map<String, String> addAMEnv() throws IOException {
