HDDS-1975. Implement default acls for bucket/volume/key for OM HA code. (#1315)


+import org.apache.hadoop.ozone.OzoneAcl;
+import org.apache.hadoop.ozone.om.PrefixManager;
+import org.apache.hadoop.ozone.om.helpers.OmPrefixInfo;
+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;
+import org.apache.hadoop.ozone.security.acl.OzoneObj;
+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_URI_DELIMITER;
-      @Nonnull OzoneManager ozoneManager, @Nonnull OMAction omAction) {
+      @Nonnull OzoneManager ozoneManager, @Nonnull OMAction omAction,
+      @Nonnull PrefixManager prefixManager,
+      @Nullable OmBucketInfo omBucketInfo) {
-            encryptionInfo);
+            encryptionInfo, prefixManager, omBucketInfo);
+  @SuppressWarnings("parameterNumber")
-      @Nullable FileEncryptionInfo encInfo) {
-    OmKeyInfo.Builder builder = new OmKeyInfo.Builder()
+      @Nullable FileEncryptionInfo encInfo,
+      @Nonnull PrefixManager prefixManager,
+      @Nullable OmBucketInfo omBucketInfo) {
+    return new OmKeyInfo.Builder()
-        .setFileEncryptionInfo(encInfo);
+        .setFileEncryptionInfo(encInfo)
+        .setAcls(getAclsForKey(keyArgs, omBucketInfo, prefixManager)).build();
+  }
+
+  private List< OzoneAcl > getAclsForKey(KeyArgs keyArgs,
+      OmBucketInfo bucketInfo, PrefixManager prefixManager) {
+    List<OzoneAcl> acls = new ArrayList<>();
+
-      builder.setAcls(OzoneAclUtil.fromProtobuf(keyArgs.getAclsList()));
+      acls.addAll(OzoneAclUtil.fromProtobuf(keyArgs.getAclsList()));
-    return builder.build();
+
+    // Inherit DEFAULT acls from prefix.
+    if(prefixManager != null) {
+      List< OmPrefixInfo > prefixList = prefixManager.getLongestPrefixPath(
+          OZONE_URI_DELIMITER +
+              keyArgs.getVolumeName() + OZONE_URI_DELIMITER +
+              keyArgs.getBucketName() + OZONE_URI_DELIMITER +
+              keyArgs.getKeyName());
+
+      if(prefixList.size() > 0) {
+        // Add all acls from direct parent to key.
+        OmPrefixInfo prefixInfo = prefixList.get(prefixList.size() - 1);
+        if(prefixInfo  != null) {
+          if (OzoneAclUtil.inheritDefaultAcls(acls, prefixInfo.getAcls())) {
+            return acls;
+          }
+        }
+      }
+    }
+
+    // Inherit DEFAULT acls from bucket only if DEFAULT acls for
+    // prefix are not set.
+    if (bucketInfo != null) {
+      if (OzoneAclUtil.inheritDefaultAcls(acls, bucketInfo.getAcls())) {
+        return acls;
+      }
+    }
+
+    return acls;
+  @SuppressWarnings("parameternumber")
-      @Nullable FileEncryptionInfo encInfo)
+      @Nullable FileEncryptionInfo encInfo,
+      @Nonnull PrefixManager prefixManager, @Nullable OmBucketInfo omBucketInfo)
-          locations, encInfo);
+          locations, encInfo, prefixManager, omBucketInfo);
-      FileEncryptionInfo encInfo) throws IOException {
+      FileEncryptionInfo encInfo,  @Nonnull PrefixManager prefixManager,
+      @Nullable OmBucketInfo omBucketInfo) throws IOException {
-    return createKeyInfo(args, locations, factor, type, size, encInfo);
+    return createKeyInfo(args, locations, factor, type, size, encInfo,
+        prefixManager, omBucketInfo);
+  /**
+   * Check Acls for the ozone bucket.
+   * @param ozoneManager
+   * @param volume
+   * @param bucket
+   * @param key
+   * @throws IOException
+   */
+  protected void checkBucketAcls(OzoneManager ozoneManager, String volume,
+      String bucket, String key) throws IOException {
+    if (ozoneManager.getAclsEnabled()) {
+      checkAcls(ozoneManager, OzoneObj.ResourceType.KEY,
+          OzoneObj.StoreType.OZONE, IAccessAuthorizer.ACLType.WRITE,
+          volume, bucket, key);
+    }
+  }
+
+
+  /**
+   * Check Acls for the ozone key.
+   * @param ozoneManager
+   * @param volume
+   * @param bucket
+   * @param key
+   * @throws IOException
+   */
+  protected void checkKeyAcls(OzoneManager ozoneManager, String volume,
+      String bucket, String key) throws IOException {
+    if (ozoneManager.getAclsEnabled()) {
+      checkAcls(ozoneManager, OzoneObj.ResourceType.KEY,
+          OzoneObj.StoreType.OZONE, IAccessAuthorizer.ACLType.WRITE,
+          volume, bucket, key);
+    }
+  }
+
