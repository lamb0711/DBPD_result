HDDS-2072. Make StorageContainerLocationProtocolService message based
Contributed by Elek, Marton.

-
- *
+ * <p>
- *
+ * <p>
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.NodeQueryResponseProto;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.PipelineRequestProto;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.PipelineResponseProto;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationRequest;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationResponse;
+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationResponse.Status;
-import org.apache.hadoop.hdds.tracing.TracingUtil;
+import org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher;
+import org.apache.hadoop.ozone.protocolPB.ProtocolMessageMetrics;
-import io.opentracing.Scope;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+  private static final Logger LOG =
+      LoggerFactory.getLogger(
+          StorageContainerLocationProtocolServerSideTranslatorPB.class);
+
+  private OzoneProtocolMessageDispatcher<ScmContainerLocationRequest,
+      ScmContainerLocationResponse>
+      dispatcher;
+
-   * @param impl {@link StorageContainerLocationProtocol} server implementation
+   * @param impl            {@link StorageContainerLocationProtocol} server
+   *                        implementation
+   * @param protocolMetrics
-      StorageContainerLocationProtocol impl) throws IOException {
+      StorageContainerLocationProtocol impl,
+      ProtocolMessageMetrics protocolMetrics) throws IOException {
+    this.dispatcher =
+        new OzoneProtocolMessageDispatcher<>("ScmContainerLocation",
+            protocolMetrics, LOG);
-  public ContainerResponseProto allocateContainer(RpcController unused,
-      ContainerRequestProto request) throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("allocateContainer", request.getTraceID())) {
-      ContainerWithPipeline containerWithPipeline = impl
-          .allocateContainer(request.getReplicationType(),
-              request.getReplicationFactor(), request.getOwner());
-      return ContainerResponseProto.newBuilder()
-          .setContainerWithPipeline(containerWithPipeline.getProtobuf())
-          .setErrorCode(ContainerResponseProto.Error.success)
-          .build();
+  public ScmContainerLocationResponse submitRequest(RpcController controller,
+      ScmContainerLocationRequest request) throws ServiceException {
+    return dispatcher
+        .processRequest(request, this::processRequest, request.getCmdType(),
+            request.getTraceID());
+  }
+
+  public ScmContainerLocationResponse processRequest(
+      ScmContainerLocationRequest request) throws ServiceException {
+    try {
+      switch (request.getCmdType()) {
+      case AllocateContainer:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setContainerResponse(
+                allocateContainer(request.getContainerRequest()))
+            .build();
+      case GetContainer:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setGetContainerResponse(
+                getContainer(request.getGetContainerRequest()))
+            .build();
+      case GetContainerWithPipeline:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setGetContainerWithPipelineResponse(getContainerWithPipeline(
+                request.getGetContainerWithPipelineRequest()))
+            .build();
+      case ListContainer:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setScmListContainerResponse(listContainer(
+                request.getScmListContainerRequest()))
+            .build();
+      case QueryNode:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setNodeQueryResponse(queryNode(request.getNodeQueryRequest()))
+            .build();
+      case NotifyObjectStageChange:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setObjectStageChangeResponse(notifyObjectStageChange(
+                request.getObjectStageChangeRequest()))
+            .build();
+      case ListPipelines:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setListPipelineResponse(listPipelines(
+                request.getListPipelineRequest()))
+            .build();
+      case ActivatePipeline:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setActivatePipelineResponse(activatePipeline(
+                request.getActivatePipelineRequest()))
+            .build();
+      case GetScmInfo:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setGetScmInfoResponse(getScmInfo(
+                request.getGetScmInfoRequest()))
+            .build();
+      case InSafeMode:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setInSafeModeResponse(inSafeMode(
+                request.getInSafeModeRequest()))
+            .build();
+      case ForceExitSafeMode:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setForceExitSafeModeResponse(forceExitSafeMode(
+                request.getForceExitSafeModeRequest()))
+            .build();
+      case StartReplicationManager:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setStartReplicationManagerResponse(startReplicationManager(
+                request.getStartReplicationManagerRequest()))
+            .build();
+      case StopReplicationManager:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setStopReplicationManagerResponse(stopReplicationManager(
+                request.getStopReplicationManagerRequest()))
+            .build();
+      case GetReplicationManagerStatus:
+        return ScmContainerLocationResponse.newBuilder()
+            .setCmdType(request.getCmdType())
+            .setStatus(Status.OK)
+            .setReplicationManagerStatusResponse(getReplicationManagerStatus(
+                request.getSeplicationManagerStatusRequest()))
+            .build();
+      default:
+        throw new IllegalArgumentException(
+            "Unknown command type: " + request.getCmdType());
+      }
-  @Override
+  public ContainerResponseProto allocateContainer(ContainerRequestProto request)
+      throws IOException {
+    ContainerWithPipeline containerWithPipeline = impl
+        .allocateContainer(request.getReplicationType(),
+            request.getReplicationFactor(), request.getOwner());
+    return ContainerResponseProto.newBuilder()
+        .setContainerWithPipeline(containerWithPipeline.getProtobuf())
+        .setErrorCode(ContainerResponseProto.Error.success)
+        .build();
+
+  }
+
-      RpcController controller, GetContainerRequestProto request)
-      throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("getContainer", request.getTraceID())) {
-      ContainerInfo container = impl.getContainer(request.getContainerID());
-      return GetContainerResponseProto.newBuilder()
-          .setContainerInfo(container.getProtobuf())
-          .build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
+      GetContainerRequestProto request) throws IOException {
+    ContainerInfo container = impl.getContainer(request.getContainerID());
+    return GetContainerResponseProto.newBuilder()
+        .setContainerInfo(container.getProtobuf())
+        .build();
-  @Override
-      RpcController controller, GetContainerWithPipelineRequestProto request)
-      throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("getContainerWithPipeline",
-            request.getTraceID())) {
-      ContainerWithPipeline container = impl
-          .getContainerWithPipeline(request.getContainerID());
-      return GetContainerWithPipelineResponseProto.newBuilder()
-          .setContainerWithPipeline(container.getProtobuf())
-          .build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
+      GetContainerWithPipelineRequestProto request)
+      throws IOException {
+    ContainerWithPipeline container = impl
+        .getContainerWithPipeline(request.getContainerID());
+    return GetContainerWithPipelineResponseProto.newBuilder()
+        .setContainerWithPipeline(container.getProtobuf())
+        .build();
-  @Override
-  public SCMListContainerResponseProto listContainer(RpcController controller,
-      SCMListContainerRequestProto request) throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("listContainer", request.getTraceID())) {
-      long startContainerID = 0;
-      int count = -1;
+  public SCMListContainerResponseProto listContainer(
+      SCMListContainerRequestProto request) throws IOException {
-      // Arguments check.
-      if (request.hasStartContainerID()) {
-        // End container name is given.
-        startContainerID = request.getStartContainerID();
-      }
-      count = request.getCount();
-      List<ContainerInfo> containerList =
-          impl.listContainer(startContainerID, count);
-      SCMListContainerResponseProto.Builder builder =
-          SCMListContainerResponseProto.newBuilder();
-      for (ContainerInfo container : containerList) {
-        builder.addContainers(container.getProtobuf());
-      }
-      return builder.build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
+    long startContainerID = 0;
+    int count = -1;
+
+    // Arguments check.
+    if (request.hasStartContainerID()) {
+      // End container name is given.
+      startContainerID = request.getStartContainerID();
+    count = request.getCount();
+    List<ContainerInfo> containerList =
+        impl.listContainer(startContainerID, count);
+    SCMListContainerResponseProto.Builder builder =
+        SCMListContainerResponseProto.newBuilder();
+    for (ContainerInfo container : containerList) {
+      builder.addContainers(container.getProtobuf());
+    }
+    return builder.build();
-  @Override
-      RpcController controller, SCMDeleteContainerRequestProto request)
-      throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("deleteContainer", request.getTraceID())) {
-      impl.deleteContainer(request.getContainerID());
-      return SCMDeleteContainerResponseProto.newBuilder().build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
+      SCMDeleteContainerRequestProto request)
+      throws IOException {
+    impl.deleteContainer(request.getContainerID());
+    return SCMDeleteContainerResponseProto.newBuilder().build();
+
-  @Override
-  public StorageContainerLocationProtocolProtos.NodeQueryResponseProto
-      queryNode(RpcController controller,
+  public NodeQueryResponseProto queryNode(
-      throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("queryNode", request.getTraceID())) {
-      HddsProtos.NodeState nodeState = request.getState();
-      List<HddsProtos.Node> datanodes = impl.queryNode(nodeState,
-          request.getScope(), request.getPoolName());
-      return StorageContainerLocationProtocolProtos
-          .NodeQueryResponseProto.newBuilder()
-          .addAllDatanodes(datanodes)
-          .build();
-    } catch (Exception e) {
-      throw new ServiceException(e);
-    }
+      throws IOException {
+
+    HddsProtos.NodeState nodeState = request.getState();
+    List<HddsProtos.Node> datanodes = impl.queryNode(nodeState,
+        request.getScope(), request.getPoolName());
+    return NodeQueryResponseProto.newBuilder()
+        .addAllDatanodes(datanodes)
+        .build();
+
-  @Override
-      RpcController controller, ObjectStageChangeRequestProto request)
-      throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("notifyObjectStageChange",
-            request.getTraceID())) {
-      impl.notifyObjectStageChange(request.getType(), request.getId(),
-          request.getOp(), request.getStage());
-      return ObjectStageChangeResponseProto.newBuilder().build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
+      ObjectStageChangeRequestProto request)
+      throws IOException {
+    impl.notifyObjectStageChange(request.getType(), request.getId(),
+        request.getOp(), request.getStage());
+    return ObjectStageChangeResponseProto.newBuilder().build();
-  @Override
-  public PipelineResponseProto allocatePipeline(
-      RpcController controller, PipelineRequestProto request)
-      throws ServiceException {
-    // TODO : Wiring this up requires one more patch.
-    return null;
-  }
-
-  @Override
-      RpcController controller, ListPipelineRequestProto request)
-      throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("listPipelines", request.getTraceID())) {
-      ListPipelineResponseProto.Builder builder = ListPipelineResponseProto
-          .newBuilder();
-      List<Pipeline> pipelines = impl.listPipelines();
-      for (Pipeline pipeline : pipelines) {
-        HddsProtos.Pipeline protobufMessage = pipeline.getProtobufMessage();
-        builder.addPipelines(protobufMessage);
-      }
-      return builder.build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
+      ListPipelineRequestProto request)
+      throws IOException {
+    ListPipelineResponseProto.Builder builder = ListPipelineResponseProto
+        .newBuilder();
+    List<Pipeline> pipelines = impl.listPipelines();
+    for (Pipeline pipeline : pipelines) {
+      HddsProtos.Pipeline protobufMessage = pipeline.getProtobufMessage();
+      builder.addPipelines(protobufMessage);
+    return builder.build();
-  @Override
-      RpcController controller, ActivatePipelineRequestProto request)
-      throws ServiceException {
-    try (Scope ignored = TracingUtil
-        .importAndCreateScope("activatePipeline", request.getTraceID())) {
-      impl.activatePipeline(request.getPipelineID());
-      return ActivatePipelineResponseProto.newBuilder().build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
+      ActivatePipelineRequestProto request)
+      throws IOException {
+    impl.activatePipeline(request.getPipelineID());
+    return ActivatePipelineResponseProto.newBuilder().build();
-  @Override
-      RpcController controller, DeactivatePipelineRequestProto request)
-      throws ServiceException {
-    try (Scope ignored = TracingUtil
-        .importAndCreateScope("deactivatePipeline", request.getTraceID())) {
-      impl.deactivatePipeline(request.getPipelineID());
-      return DeactivatePipelineResponseProto.newBuilder().build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
+      DeactivatePipelineRequestProto request)
+      throws IOException {
+    impl.deactivatePipeline(request.getPipelineID());
+    return DeactivatePipelineResponseProto.newBuilder().build();
-  @Override
-      throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("closePipeline", request.getTraceID())) {
-      impl.closePipeline(request.getPipelineID());
-      return ClosePipelineResponseProto.newBuilder().build();
-    } catch (IOException e) {
-      throw new ServiceException(e);
-    }
+      throws IOException {
+
+    impl.closePipeline(request.getPipelineID());
+    return ClosePipelineResponseProto.newBuilder().build();
+
-  @Override
-      RpcController controller, HddsProtos.GetScmInfoRequestProto req)
-      throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("getScmInfo", req.getTraceID())) {
-      ScmInfo scmInfo = impl.getScmInfo();
-      return HddsProtos.GetScmInfoResponseProto.newBuilder()
-          .setClusterId(scmInfo.getClusterId())
-          .setScmId(scmInfo.getScmId())
-          .build();
-    } catch (IOException ex) {
-      throw new ServiceException(ex);
-    }
+      HddsProtos.GetScmInfoRequestProto req)
+      throws IOException {
+    ScmInfo scmInfo = impl.getScmInfo();
+    return HddsProtos.GetScmInfoResponseProto.newBuilder()
+        .setClusterId(scmInfo.getClusterId())
+        .setScmId(scmInfo.getScmId())
+        .build();
-  @Override
-      RpcController controller,
-      InSafeModeRequestProto request) throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("inSafeMode", request.getTraceID())) {
-      return InSafeModeResponseProto.newBuilder()
-          .setInSafeMode(impl.inSafeMode()).build();
-    } catch (IOException ex) {
-      throw new ServiceException(ex);
-    }
+      InSafeModeRequestProto request) throws IOException {
+
+    return InSafeModeResponseProto.newBuilder()
+        .setInSafeMode(impl.inSafeMode()).build();
+
-  @Override
-      RpcController controller, ForceExitSafeModeRequestProto request)
-      throws ServiceException {
-    try (Scope scope = TracingUtil
-        .importAndCreateScope("forceExitSafeMode", request.getTraceID())) {
-      return ForceExitSafeModeResponseProto.newBuilder()
-          .setExitedSafeMode(impl.forceExitSafeMode()).build();
-    } catch (IOException ex) {
-      throw new ServiceException(ex);
-    }
+      ForceExitSafeModeRequestProto request)
+      throws IOException {
+    return ForceExitSafeModeResponseProto.newBuilder()
+        .setExitedSafeMode(impl.forceExitSafeMode()).build();
+
-  @Override
-      RpcController controller, StartReplicationManagerRequestProto request)
-      throws ServiceException {
-    try (Scope ignored = TracingUtil.importAndCreateScope(
-        "startReplicationManager", request.getTraceID())) {
-      impl.startReplicationManager();
-      return StartReplicationManagerResponseProto.newBuilder().build();
-    } catch (IOException ex) {
-      throw new ServiceException(ex);
-    }
+      StartReplicationManagerRequestProto request)
+      throws IOException {
+    impl.startReplicationManager();
+    return StartReplicationManagerResponseProto.newBuilder().build();
-  @Override
-      RpcController controller, StopReplicationManagerRequestProto request)
-      throws ServiceException {
-    try (Scope ignored = TracingUtil.importAndCreateScope(
-        "stopReplicationManager", request.getTraceID())) {
-      impl.stopReplicationManager();
-      return StopReplicationManagerResponseProto.newBuilder().build();
-    } catch (IOException ex) {
-      throw new ServiceException(ex);
-    }
+      StopReplicationManagerRequestProto request)
+      throws IOException {
+    impl.stopReplicationManager();
+    return StopReplicationManagerResponseProto.newBuilder().build();
+
-  @Override
-      RpcController controller, ReplicationManagerStatusRequestProto request)
-      throws ServiceException {
-    try (Scope ignored = TracingUtil.importAndCreateScope(
-        "getReplicationManagerStatus", request.getTraceID())) {
-      return ReplicationManagerStatusResponseProto.newBuilder()
-          .setIsRunning(impl.getReplicationManagerStatus()).build();
-    } catch (IOException ex) {
-      throw new ServiceException(ex);
-    }
+      ReplicationManagerStatusRequestProto request)
+      throws IOException {
+    return ReplicationManagerStatusResponseProto.newBuilder()
+        .setIsRunning(impl.getReplicationManagerStatus()).build();
