HADOOP-13112. Change CredentialShell to use CommandShell base class (Matthew Paduano via aw)

-import java.io.PrintStream;
+
+import org.apache.commons.lang.StringUtils;
+
-import org.apache.hadoop.conf.Configured;
-import org.apache.hadoop.util.Tool;
+import org.apache.hadoop.tools.CommandShell;
- * This program is the CLI utility for the CredentialProvider facilities in 
+ * This program is the CLI utility for the CredentialProvider facilities in
-public class CredentialShell extends Configured implements Tool {
+public class CredentialShell extends CommandShell {
-  private Command command = null;
-  /** Allows stdout to be captured if necessary. */
-  @VisibleForTesting
-  public PrintStream out = System.out;
-  /** Allows stderr to be captured if necessary. */
-  @VisibleForTesting
-  public PrintStream err = System.err;
-
-  private boolean isHelp = false;
-
-  @Override
-  public int run(String[] args) throws Exception {
-    int exitCode = 0;
-    try {
-      exitCode = init(args);
-      if (exitCode != 0) {
-        return exitCode;
-      }
-      if (!isHelp) {
-        if (command.validate()) {
-          command.execute();
-        } else {
-          exitCode = 1;
-        }
-      }
-    } catch (Exception e) {
-      e.printStackTrace(err);
-      return 1;
-    }
-    return exitCode;
-  }
+  @Override
-      printCredShellUsage();
-      ToolRunner.printGenericCommandUsage(System.err);
+      ToolRunner.printGenericCommandUsage(getErr());
-          printCredShellUsage();
-        String alias = args[++i];
-        command = new CreateCommand(alias);
-        if (alias.equals("-help")) {
-          printCredShellUsage();
-          return 0;
-        }
+        setSubCommand(new CreateCommand(args[++i]));
-          printCredShellUsage();
-        String alias = args[++i];
-        command = new DeleteCommand(alias);
-        if (alias.equals("-help")) {
-          printCredShellUsage();
-          return 0;
-        }
+        setSubCommand(new DeleteCommand(args[++i]));
-        command = new ListCommand();
+        setSubCommand(new ListCommand());
-          printCredShellUsage();
-        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, 
+        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,
-        printCredShellUsage();
+        printShellUsage();
-        printCredShellUsage();
-        ToolRunner.printGenericCommandUsage(System.err);
+        ToolRunner.printGenericCommandUsage(getErr());
-  private void printCredShellUsage() {
-    isHelp = true;
-    out.println(USAGE_PREFIX + COMMANDS);
-    if (command != null) {
-      out.println(command.getUsage());
-    } else {
-      out.println("=========================================================" +
-          "======");
-      out.println(CreateCommand.USAGE + ":\n\n" + CreateCommand.DESC);
-      out.println("=========================================================" +
-          "======");
-      out.println(DeleteCommand.USAGE + ":\n\n" + DeleteCommand.DESC);
-      out.println("=========================================================" +
-          "======");
-      out.println(ListCommand.USAGE + ":\n\n" + ListCommand.DESC);
-    }
+  @Override
+  public String getCommandUsage() {
+    StringBuffer sbuf = new StringBuffer(USAGE_PREFIX + COMMANDS);
+    String banner = StringUtils.repeat("=", 66);
+    sbuf.append(banner + "\n");
+    sbuf.append(CreateCommand.USAGE + ":\n\n" + CreateCommand.DESC + "\n");
+    sbuf.append(banner + "\n");
+    sbuf.append(DeleteCommand.USAGE + ":\n\n" + DeleteCommand.DESC + "\n");
+    sbuf.append(banner + "\n");
+    sbuf.append(ListCommand.USAGE + ":\n\n" + ListCommand.DESC + "\n");
+    return sbuf.toString();
-  private abstract class Command {
+  private abstract class Command extends SubCommand {
-    public boolean validate() {
-      return true;
-    }
-
-        e.printStackTrace(err);
+        e.printStackTrace(getErr());
-        out.println(NO_VALID_PROVIDERS);
+        getOut().println(NO_VALID_PROVIDERS);
-      out.println("Provider " + provider.toString() + " has been updated.");
+      getOut().println("Provider " + provider.toString() + " was updated.");
-        out.println("WARNING: you are modifying a transient provider.");
+        getOut().println("WARNING: you are modifying a transient provider.");
+    protected void doHelp() {
+      getOut().println(USAGE_PREFIX + COMMANDS);
+      printShellUsage();
+    }
+
-        out.println("Listing aliases for CredentialProvider: " +
+        getOut().println("Listing aliases for CredentialProvider: " +
-          out.println(alias);
+          getOut().println(alias);
-        out.println("Cannot list aliases for CredentialProvider: " +
+        getOut().println("Cannot list aliases for CredentialProvider: " +
-      provider = getCredentialProvider();
-      if (provider == null) {
+      if (alias == null) {
+        getOut().println("There is no alias specified. Please provide the" +
+            "mandatory <alias>. See the usage description with -help.");
-      if (alias == null) {
-        out.println("There is no alias specified. Please provide the" +
-            "mandatory <alias>. See the usage description with -help.");
+      if (alias.equals("-help")) {
+        return true;
+      }
+      provider = getCredentialProvider();
+      if (provider == null) {
-            out.println("Nothing has been deleted.");
+            getOut().println("Nothing has been deleted.");
-          out.println(alias + " will not be deleted.");
-          e.printStackTrace(err);
+          getOut().println(alias + " will not be deleted.");
+          e.printStackTrace(getErr());
+      if (alias.equals("-help")) {
+        doHelp();
+        return;
+      }
-      out.println("Deleting credential: " + alias +
+      getOut().println("Deleting credential: " + alias +
-          out.println("Credential " + alias +
+          getOut().println("Credential " + alias +
-          out.println("Credential " + alias + " has NOT been deleted.");
+          getOut().println("Credential " + alias + " has NOT been deleted.");
-      boolean rc = true;
+      if (alias == null) {
+        getOut().println("There is no alias specified. Please provide the" +
+            "mandatory <alias>. See the usage description with -help.");
+        return false;
+      }
+      if (alias.equals("-help")) {
+        return true;
+      }
-          rc = false;
+          return false;
-            out.println(provider.noPasswordError());
-            rc = false;
+            getOut().println(provider.noPasswordError());
+            return false;
-            out.println(provider.noPasswordWarning());
+            getOut().println(provider.noPasswordWarning());
-        e.printStackTrace(err);
+        e.printStackTrace(getErr());
-      if (alias == null) {
-        out.println("There is no alias specified. Please provide the" +
-            "mandatory <alias>. See the usage description with -help.");
-        rc = false;
-      }
-      return rc;
+      return true;
+      if (alias.equals("-help")) {
+        doHelp();
+        return;
+      }
-        out.println(alias + " has been successfully created.");
+        getOut().println(alias + " has been successfully created.");
-        out.println("Credential " + alias + " has NOT been created. " +
+        getOut().println("Credential " + alias + " has NOT been created. " +
-        out.println("Credential " + alias + " has NOT been created. " +
+        getOut().println("Credential " + alias + " has NOT been created. " +
-  
+
-    
+
-  
+
-  
+
-  
+
-  
-  
+
+
