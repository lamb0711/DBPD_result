HDFS-13025. [SPS]: Implement a mechanism to scan the files for external SPS. Contributed by Uma Maheswara Rao G.

-   * Add the itemInfo to tracking list for which storage movement
-   * expected if necessary.
+   * Add the itemInfo list to tracking list for which storage movement expected
+   * if necessary.
+   *
-   *            - start id
+   *          - start id
-   *            - List of child in the directory
+   *          - List of child in the directory
+   * @param scanCompleted
+   *          -Indicates whether the start id directory has no more elements to
+   *          scan.
-  public synchronized void addAll(long startId,
-      List<ItemInfo> itemInfoList, boolean scanCompleted) {
+  public synchronized void addAll(long startId, List<ItemInfo> itemInfoList,
+      boolean scanCompleted) {
+    updatePendingDirScanStats(startId, itemInfoList.size(), scanCompleted);
+  }
+
+  /**
+   * Add the itemInfo to tracking list for which storage movement expected if
+   * necessary.
+   *
+   * @param itemInfoList
+   *          - List of child in the directory
+   * @param scanCompleted
+   *          -Indicates whether the ItemInfo start id directory has no more
+   *          elements to scan.
+   */
+  @VisibleForTesting
+  public synchronized void add(ItemInfo itemInfo, boolean scanCompleted) {
+    storageMovementNeeded.add(itemInfo);
+    // This represents sps start id is file, so no need to update pending dir
+    // stats.
+    if (itemInfo.getStartId() == itemInfo.getFileId()) {
+      return;
+    }
+    updatePendingDirScanStats(itemInfo.getStartId(), 1, scanCompleted);
+  }
+
+  private void updatePendingDirScanStats(long startId, int numScannedFiles,
+      boolean scanCompleted) {
-    pendingWork.addPendingWorkCount(itemInfoList.size());
+    pendingWork.addPendingWorkCount(numScannedFiles);
-      LOG.info("Starting FileInodeIdCollector!.");
+      LOG.info("Starting SPSPathIdProcessor!.");
+      Long startINodeId = null;
-        LOG.info("Running FileInodeIdCollector!.");
-            Long startINodeId = ctxt.getNextSPSPathId();
+            if (startINodeId == null) {
+              startINodeId = ctxt.getNextSPSPathId();
+            } // else same id will be retried
+            startINodeId = null; // Current inode id successfully scanned.
-          LOG.warn("Exception while loading inodes to satisfy the policy", t);
+          String reClass = t.getClass().getName();
+          if (InterruptedException.class.getName().equals(reClass)) {
+            LOG.info("SPSPathIdProcessor thread is interrupted. Stopping..");
+            Thread.currentThread().interrupt();
+            break;
+          }
+          LOG.warn("Exception while scanning file inodes to satisfy the policy",
+              t);
+          // TODO: may be we should retry the current inode id?
+
+  public void markScanCompletedForDir(Long inodeId) {
+    DirPendingWorkInfo pendingWork = pendingWorkForDirectory.get(inodeId);
+    if (pendingWork != null) {
+      pendingWork.markScanCompleted();
+    }
+  }
