HDDS-901. MultipartUpload: S3 API for Initiate multipart upload. Contributed by Bharat Viswanadham.

+import javax.ws.rs.POST;
+import javax.ws.rs.Produces;
+import javax.ws.rs.QueryParam;
+import javax.ws.rs.core.MediaType;
+import org.apache.hadoop.ozone.om.helpers.OmMultipartInfo;
+  @POST
+  @Produces(MediaType.APPLICATION_XML)
+  public Response initiateMultipartUpload(
+      @PathParam("bucket") String bucket,
+      @PathParam("path") String key,
+      @QueryParam("uploads") String uploads) throws IOException, OS3Exception {
+    try {
+      OzoneBucket ozoneBucket = getBucket(bucket);
+      String storageType = headers.getHeaderString(STORAGE_CLASS_HEADER);
+
+      ReplicationType replicationType;
+      ReplicationFactor replicationFactor;
+      if (storageType == null || storageType.equals("")) {
+        replicationType = S3StorageType.getDefault().getType();
+        replicationFactor = S3StorageType.getDefault().getFactor();
+      } else {
+        try {
+          replicationType = S3StorageType.valueOf(storageType).getType();
+          replicationFactor = S3StorageType.valueOf(storageType).getFactor();
+        } catch (IllegalArgumentException ex) {
+          throw S3ErrorTable.newError(S3ErrorTable.INVALID_ARGUMENT,
+              storageType);
+        }
+      }
+
+      OmMultipartInfo multipartInfo = ozoneBucket
+          .initiateMultipartUpload(key, replicationType, replicationFactor);
+
+      MultipartUploadInitiateResponse multipartUploadInitiateResponse = new
+          MultipartUploadInitiateResponse();
+
+      multipartUploadInitiateResponse.setBucket(bucket);
+      multipartUploadInitiateResponse.setKey(key);
+      multipartUploadInitiateResponse.setUploadID(multipartInfo.getUploadID());
+
+
+      return Response.status(Status.OK).entity(
+          multipartUploadInitiateResponse).build();
+
+    } catch (IOException ex) {
+      throw ex;
+    }
+
+  }
+
