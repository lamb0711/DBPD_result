YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He

+import org.apache.hadoop.yarn.service.provider.ProviderService;
+import org.apache.hadoop.yarn.service.provider.ProviderFactory;
-import org.apache.slider.common.SliderExitCodes;
-import org.apache.slider.common.SliderKeys;
-import org.apache.slider.common.params.AbstractActionArgs;
-import org.apache.slider.common.params.SliderAMArgs;
-import org.apache.slider.common.params.SliderAMCreateAction;
-import org.apache.slider.common.params.SliderActions;
+import org.apache.hadoop.yarn.service.conf.SliderExitCodes;
+import org.apache.hadoop.yarn.service.conf.SliderKeys;
+import org.apache.hadoop.yarn.service.client.params.AbstractActionArgs;
+import org.apache.hadoop.yarn.service.client.params.SliderAMArgs;
+import org.apache.hadoop.yarn.service.client.params.SliderAMCreateAction;
+import org.apache.hadoop.yarn.service.client.params.SliderActions;
-import org.apache.slider.providers.ProviderService;
-import org.apache.slider.providers.SliderProviderFactory;
-import org.apache.slider.server.appmaster.timelineservice.ServiceTimelinePublisher;
-import org.apache.slider.server.appmaster.timelineservice.SliderMetricsSink;
+import org.apache.hadoop.yarn.service.timelineservice.ServiceTimelinePublisher;
+import org.apache.hadoop.yarn.service.timelineservice.ServiceMetricsSink;
-import org.apache.slider.util.ServiceApiUtil;
+import org.apache.hadoop.yarn.service.utils.ServiceApiUtil;
-    Path appDir = new Path((serviceArgs.getAppDefDir()));
+    Path appDir = new Path((serviceArgs.getAppDefPath()));
-      SliderProviderFactory factory = SliderProviderFactory
+      ProviderFactory factory = ProviderFactory
-      initAndAddService(providerService);
+//      initAndAddService(providerService);
-          providerService.setServiceTimelinePublisher(serviceTimelinePublisher);
-        DefaultMetricsSystem.instance().register("SliderMetricsSink",
+        DefaultMetricsSystem.instance().register("ServiceMetricsSink",
-            new SliderMetricsSink(serviceTimelinePublisher));
-        log.info("SliderMetricsSink registered.");
+            new ServiceMetricsSink(serviceTimelinePublisher));
+        log.info("ServiceMetricsSink registered.");
-      binding.serviceConfig = serviceConf;
+      binding.serviceConfig = null;
-      providerService.setAMState(stateForProviders);
+//      providerService.setAMState(stateForProviders);
-      providerService.bindToYarnRegistry(yarnRegistryOperations);
+//      providerService.bindToYarnRegistry(yarnRegistryOperations);
-      serviceTimelinePublisher.serviceAttemptRegistered(appState);
+      serviceTimelinePublisher.serviceAttemptRegistered(application);
-    container.setState(org.apache.slider.api.resource.ContainerState.INIT);
+    container.setState(org.apache.slider.api.resource.ContainerState.RUNNING_BUT_UNREADY);
-      serviceTimelinePublisher.componentInstanceStarted(container,
-          instance.providerRole.component.getName());
+      serviceTimelinePublisher.componentInstanceStarted(container, null);
-    try {
-      yarnRegistryOperations.deleteComponent(cid);
-    } catch (IOException e) {
-      log.warn("Failed to delete container {} : {}", containerId, e, e);
-    }
+//    try {
+//      yarnRegistryOperations.deleteComponent(cid);
+//    } catch (IOException e) {
+//      log.warn("Failed to delete container {} : {}", containerId, e, e);
+//    }
-      providerService.start();
+//      providerService.start();
-  /**
-   * report container loss. If this isn't already known about, react
-   *
-   * @param containerId       id of the container which has failed
-   * @throws SliderException
-   */
-  public synchronized void providerLostContainer(
-      ContainerId containerId)
-      throws SliderException {
-    log.info("containerLostContactWithProvider: container {} lost",
-        containerId);
-    RoleInstance activeContainer = appState.getOwnedContainer(containerId);
-    if (activeContainer != null) {
-      execute(appState.releaseContainer(containerId));
-      // ask for more containers if needed
-      log.info("Container released; triggering review");
-      reviewRequestAndReleaseNodes("Loss of container");
-    } else {
-      log.info("Container not in active set - ignoring");
-    }
-  }
-    ProviderService providerService = SliderProviderFactory
+    ProviderService providerService = ProviderFactory
-    if (providerService.processContainerStatus(containerId, containerStatus)) {
-      try {
-        Thread.sleep(1000);
-      } catch (InterruptedException e) {
-      }
-      LOG_YARN.info("Re-requesting status for role {}, {}",
-          cinfo.role, containerId);
-      //trigger another async container status
-      nmClientAsync.getContainerStatusAsync(containerId,
-          cinfo.container.getNodeId());
-    } else if (timelineServiceEnabled) {
-      RoleInstance instance = appState.getOwnedContainer(containerId);
-      if (instance != null) {
-        org.apache.slider.api.resource.Container container =
-            instance.providerRole.component
-                .getContainer(containerId.toString());
-        if (container != null) {
-          serviceTimelinePublisher.componentInstanceUpdated(container,
-              instance.providerRole.component.getName());
-        }
-      }
-    }
+//    if (providerService.processContainerStatus(containerId, containerStatus)) {
+//      try {
+//        Thread.sleep(1000);
+//      } catch (InterruptedException e) {
+//      }
+//      LOG_YARN.info("Re-requesting status for role {}, {}",
+//          cinfo.role, containerId);
+//      //trigger another async container status
+//      nmClientAsync.getContainerStatusAsync(containerId,
+//          cinfo.container.getNodeId());
+//    } else if (timelineServiceEnabled) {
+//      RoleInstance instance = appState.getOwnedContainer(containerId);
+//      if (instance != null) {
+//        org.apache.slider.api.resource.Container container =
+//            instance.providerRole.component
+//                .getContainer(containerId.toString());
+//        if (container != null) {
+//          serviceTimelinePublisher.componentInstanceUpdated(container);
+//        }
+//      }
+//    }
