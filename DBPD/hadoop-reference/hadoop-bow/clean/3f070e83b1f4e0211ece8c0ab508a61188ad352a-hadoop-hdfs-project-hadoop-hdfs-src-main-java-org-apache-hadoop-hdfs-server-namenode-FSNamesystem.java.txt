HDFS-5009. Include storage information in the LocatedBlock.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1519691 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeStorageInfo;
-    final DatanodeDescriptor targets[] = getBlockManager().chooseTarget( 
+    // TODO: chooseTarget(..) should be changed to return DatanodeStorageInfo's
+    final DatanodeDescriptor chosenDatanodes[] = getBlockManager().chooseTarget( 
+    final DatanodeStorageInfo[] targets = new DatanodeStorageInfo[chosenDatanodes.length];
+    for(int i = 0; i < targets.length; i++) {
+      final DatanodeDescriptor dd = chosenDatanodes[i];
+      targets[i] = dd.getStorageInfos().iterator().next(); 
+    }
-            ((BlockInfoUnderConstruction)lastBlockInFile).getExpectedLocations(),
+            ((BlockInfoUnderConstruction)lastBlockInFile).getExpectedStorageLocations(),
-  LocatedBlock makeLocatedBlock(Block blk,
-                                        DatanodeInfo[] locs,
+  LocatedBlock makeLocatedBlock(Block blk, DatanodeStorageInfo[] locs,
-    LocatedBlock lBlk = new LocatedBlock(
-        getExtendedBlock(blk), locs, offset);
+    LocatedBlock lBlk = LocatedBlock.createLocatedBlock(
+        getExtendedBlock(blk), locs, offset, false);
-      Block newBlock, DatanodeDescriptor targets[]) throws IOException {
+      Block newBlock, DatanodeStorageInfo[] targets)
+          throws IOException {
-    for (DatanodeDescriptor dn : targets) {
-      dn.incBlocksScheduled();
+    for (DatanodeStorageInfo storage : targets) {
+      storage.getDatanodeDescriptor().incBlocksScheduled();
-        uc.setExpectedLocations(blockManager.getNodes(lastBlock));
+        uc.setExpectedLocations(blockManager.getStorages(lastBlock));
-        DatanodeDescriptor[] descriptors = null;
-        if (newtargets.length > 0) {
-          descriptors = new DatanodeDescriptor[newtargets.length];
-          for(int i = 0; i < newtargets.length; i++) {
-            descriptors[i] = blockManager.getDatanodeManager().getDatanode(
-                newtargets[i]);
-          }
-        }
-        if ((closeFile) && (descriptors != null)) {
+        final DatanodeStorageInfo[] storages = blockManager.getDatanodeManager()
+            .getDatanodeStorageInfos(newtargets, newtargetstorages);
+        if (closeFile && storages != null) {
-          for (int i = 0; i < descriptors.length; i++) {
-            descriptors[i].addBlock(newtargetstorages[i], storedBlock);
+          for (int i = 0; i < storages.length; i++) {
+            storages[i].addBlock(storedBlock);
-        pendingFile.setLastBlock(storedBlock, descriptors);
+        pendingFile.setLastBlock(storedBlock, storages);
-      ExtendedBlock newBlock, DatanodeID[] newNodes)
+      ExtendedBlock newBlock, DatanodeID[] newNodes, String[] newStorageIDs)
-          cacheEntry != null);
+          newStorageIDs, cacheEntry != null);
-      ExtendedBlock newBlock, DatanodeID[] newNodes, boolean logRetryCache)
+      ExtendedBlock newBlock, DatanodeID[] newNodes, String[] newStorageIDs,
+      boolean logRetryCache)
-    final DatanodeManager dm = getBlockManager().getDatanodeManager();
-    DatanodeDescriptor[] descriptors = null;
-    if (newNodes.length > 0) {
-      descriptors = new DatanodeDescriptor[newNodes.length];
-      for(int i = 0; i < newNodes.length; i++) {
-        descriptors[i] = dm.getDatanode(newNodes[i]);
-      }
-    }
-    blockinfo.setExpectedLocations(descriptors);
+    final DatanodeStorageInfo[] storages = blockManager.getDatanodeManager()
+        .getDatanodeStorageInfos(newNodes, newStorageIDs);
+    blockinfo.setExpectedLocations(storages);
