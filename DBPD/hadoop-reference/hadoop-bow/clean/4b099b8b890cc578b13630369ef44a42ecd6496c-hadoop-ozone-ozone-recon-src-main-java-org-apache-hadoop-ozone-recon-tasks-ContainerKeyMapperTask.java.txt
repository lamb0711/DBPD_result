 HDDS-1501 : Create a Recon task interface to update internal DB on updates from OM. (#819)


+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.Pair;
-import org.apache.hadoop.ozone.recon.spi.OzoneManagerServiceProvider;
-public class ContainerKeyMapperTask implements Runnable {
+public class ContainerKeyMapperTask extends ReconDBUpdateTask {
-  private OzoneManagerServiceProvider ozoneManagerServiceProvider;
+  private Collection<String> tables = new ArrayList<>();
-  public ContainerKeyMapperTask(
-      OzoneManagerServiceProvider ozoneManagerServiceProvider,
-      ContainerDBServiceProvider containerDBServiceProvider) {
-    this.ozoneManagerServiceProvider = ozoneManagerServiceProvider;
+  public ContainerKeyMapperTask(ContainerDBServiceProvider
+                                    containerDBServiceProvider,
+                                OMMetadataManager omMetadataManager) {
+    super("ContainerKeyMapperTask");
+    try {
+      tables.add(omMetadataManager.getKeyTable().getName());
+    } catch (IOException ioEx) {
+      LOG.error("Unable to listen on Key Table updates ", ioEx);
+    }
-  public void run() {
+  public Pair<String, Boolean> reprocess(OMMetadataManager omMetadataManager) {
-    int containerCount = 0;
-      LOG.info("Starting a run of ContainerKeyMapperTask.");
+      LOG.info("Starting a 'reprocess' run of ContainerKeyMapperTask.");
-      //Update OM DB Snapshot.
-      ozoneManagerServiceProvider.updateReconOmDBWithNewSnapshot();
-
-      OMMetadataManager omMetadataManager = ozoneManagerServiceProvider
-          .getOMMetadataManagerInstance();
-          StringBuilder key = new StringBuilder(kv.getKey());
-          for (OmKeyLocationInfoGroup omKeyLocationInfoGroup : omKeyInfo
-              .getKeyLocationVersions()) {
-            long keyVersion = omKeyLocationInfoGroup.getVersion();
-            for (OmKeyLocationInfo omKeyLocationInfo : omKeyLocationInfoGroup
-                .getLocationList()) {
-              long containerId = omKeyLocationInfo.getContainerID();
-              ContainerKeyPrefix containerKeyPrefix = new ContainerKeyPrefix(
-                  containerId, key.toString(), keyVersion);
-              if (containerDBServiceProvider.getCountForForContainerKeyPrefix(
-                  containerKeyPrefix) == 0) {
-                // Save on writes. No need to save same container-key prefix
-                // mapping again.
-                containerDBServiceProvider.storeContainerKeyMapping(
-                    containerKeyPrefix, 1);
-              }
-              containerCount++;
-            }
-          }
+          writeOMKeyToContainerDB(kv.getKey(), omKeyInfo);
-      LOG.info("Completed the run of ContainerKeyMapperTask.");
+      LOG.info("Completed 'reprocess' of ContainerKeyMapperTask.");
-      LOG.info("It took me " + (double)duration / 1000.0 + " seconds to " +
-          "process " + omKeyCount + " keys and " + containerCount + " " +
-          "containers.");
+      LOG.info("It took me " + (double) duration / 1000.0 + " seconds to " +
+          "process " + omKeyCount + " keys.");
+      return new ImmutablePair<>(getTaskName(), false);
+    }
+    return new ImmutablePair<>(getTaskName(), true);
+  }
+
+
+  @Override
+  protected Collection<String> getTaskTables() {
+    return tables;
+  }
+
+  @Override
+  Pair<String, Boolean> process(OMUpdateEventBatch events) {
+    Iterator<OMDBUpdateEvent> eventIterator = events.getIterator();
+    while (eventIterator.hasNext()) {
+      OMDBUpdateEvent<String, OmKeyInfo> omdbUpdateEvent = eventIterator.next();
+      String updatedKey = omdbUpdateEvent.getKey();
+      OmKeyInfo updatedKeyValue = omdbUpdateEvent.getValue();
+      try {
+        switch (omdbUpdateEvent.getAction()) {
+        case PUT:
+          writeOMKeyToContainerDB(updatedKey, updatedKeyValue);
+          break;
+
+        case DELETE:
+          deleteOMKeyFromContainerDB(updatedKey);
+          break;
+
+        default: LOG.debug("Skipping DB update event : " + omdbUpdateEvent
+            .getAction());
+        }
+      } catch (IOException e) {
+        LOG.error("Unexpected exception while updating key data : {} ", e);
+        return new ImmutablePair<>(getTaskName(), false);
+      }
+    }
+    return new ImmutablePair<>(getTaskName(), true);
+  }
+
+  /**
+   * Delete an OM Key from Container DB.
+   * @param key key String.
+   * @throws IOException If Unable to write to container DB.
+   */
+  private void  deleteOMKeyFromContainerDB(String key)
+      throws IOException {
+
+    TableIterator<ContainerKeyPrefix, ? extends
+        Table.KeyValue<ContainerKeyPrefix, Integer>> containerIterator =
+        containerDBServiceProvider.getContainerTableIterator();
+
+    Set<ContainerKeyPrefix> keysToDeDeleted = new HashSet<>();
+
+    while (containerIterator.hasNext()) {
+      Table.KeyValue<ContainerKeyPrefix, Integer> keyValue =
+          containerIterator.next();
+      String keyPrefix = keyValue.getKey().getKeyPrefix();
+      if (keyPrefix.equals(key)) {
+        keysToDeDeleted.add(keyValue.getKey());
+      }
+    }
+
+    for (ContainerKeyPrefix containerKeyPrefix : keysToDeDeleted) {
+      containerDBServiceProvider.deleteContainerMapping(containerKeyPrefix);
+
+  /**
+   * Write an OM key to container DB.
+   * @param key key String
+   * @param omKeyInfo omKeyInfo value
+   * @throws IOException if unable to write to recon DB.
+   */
+  private void  writeOMKeyToContainerDB(String key, OmKeyInfo omKeyInfo)
+      throws IOException {
+    for (OmKeyLocationInfoGroup omKeyLocationInfoGroup : omKeyInfo
+        .getKeyLocationVersions()) {
+      long keyVersion = omKeyLocationInfoGroup.getVersion();
+      for (OmKeyLocationInfo omKeyLocationInfo : omKeyLocationInfoGroup
+          .getLocationList()) {
+        long containerId = omKeyLocationInfo.getContainerID();
+        ContainerKeyPrefix containerKeyPrefix = new ContainerKeyPrefix(
+            containerId, key, keyVersion);
+        if (containerDBServiceProvider.getCountForForContainerKeyPrefix(
+            containerKeyPrefix) == 0) {
+          // Save on writes. No need to save same container-key prefix
+          // mapping again.
+          containerDBServiceProvider.storeContainerKeyMapping(
+              containerKeyPrefix, 1);
+        }
+      }
+    }
+  }
+
