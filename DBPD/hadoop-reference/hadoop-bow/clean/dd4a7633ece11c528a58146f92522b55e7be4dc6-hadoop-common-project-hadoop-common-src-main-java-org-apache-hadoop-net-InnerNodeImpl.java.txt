HADOOP-16156. [Clean-up] Remove NULL check before instanceof and fix checkstyle in InnerNodeImpl. Contributed by Shweta Yakkali.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

-  /** Construct an InnerNode from a path-like string */
+  /** Construct an InnerNode from a path-like string. */
-   * from its name, its network location, its parent, and its level */
-  protected InnerNodeImpl(String name, String location, InnerNode parent, int level) {
+   * from its name, its network location, its parent, and its level. */
+  protected InnerNodeImpl(String name, String location,
+      InnerNode parent, int level) {
-  public List<Node> getChildren() {return children;}
+  public List<Node> getChildren() {
+    return children;
+  }
-  /** @return the number of children this node has */
+  /** @return the number of children this node has. */
-  /** Judge if this node represents a rack
+  /** Judge if this node represents a rack.
-  /** Judge if this node is an ancestor of node <i>n</i>
+  /** Judge if this node is an ancestor of node <i>n</i>.
-  /** Judge if this node is the parent of node <i>n</i>
+  /** Judge if this node is the parent of node <i>n</i>.
-    if (index !=-1)
+    if (index != -1) {
+    }
-    return new InnerNodeImpl(parentName, getPath(this), this, this.getLevel()+1);
+    return new InnerNodeImpl(parentName,
+        getPath(this), this, this.getLevel() + 1);
-    if (loc == null || loc.length() == 0) return this;
+    if (loc == null || loc.length() == 0) {
+      return this;
+    }
-    Node childnode = childrenMap.get(path[0]);
-    if (childnode == null) return null; // non-existing node
-    if (path.length == 1) return childnode;
-    if (childnode instanceof InnerNode) {
-      return ((InnerNode)childnode).getLoc(path[1]);
+    Node childNode = childrenMap.get(path[0]);
+    if (childNode == null || path.length == 1) {
+      return childNode;
+    } else if (childNode instanceof InnerNode) {
+      return ((InnerNode)childNode).getLoc(path[1]);
-    boolean isLeaf =
-      excludedNode == null || !(excludedNode instanceof InnerNode);
+    boolean isLeaf = !(excludedNode instanceof InnerNode);
-      isLeaf ? 1 : ((InnerNode)excludedNode).getNumOfLeaves();
+        isLeaf ? 1 : ((InnerNode)excludedNode).getNumOfLeaves();
