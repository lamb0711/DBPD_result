YARN-5967. Fix slider core module findbugs warnings. Contributed by Jian He

-import org.apache.hadoop.io.IOUtils;
-    if (urlEnumeration == null) {
-      throw new IOException("Unable to find resources for class " + my_class);
-    }
-
-    String containerf = "  %-28s  %30s  %45s  %s\n";
+    String containerf = "  %-28s  %30s  %45s  %s%n";
-    builder.append("Containers:\n");
-    builder.append(String.format("  %-28s  %30s  %45s  %s\n", "Component Name",
+    builder.append("Containers:%n");
+    builder.append(String.format("  %-28s  %30s  %45s  %s%n", "Component Name",
-      String... prefixes) {
+      List<String> prefixes) {
-            ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            while (true) {
-              int byteRead = zis.read();
-              if (byteRead == -1) {
-                break;
+            try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
+              while (true) {
+                int byteRead = zis.read();
+                if (byteRead == -1) {
+                  break;
+                }
+                baos.write(byteRead);
-              baos.write(byteRead);
+              is = new ByteArrayInputStream(baos.toByteArray());
-            is = new ByteArrayInputStream(baos.toByteArray());
-   * Look for the windows executable and check it has the right headers.
-   * <code>File.canRead()</code> doesn't work on windows, so the reading
-   * is mandatory.
-   *
-   * @param program program name for errors
-   * @param exe executable
-   * @throws IOException IOE
-   */
-  public static void verifyWindowsExe(String program, File exe)
-      throws IOException {
-    verifyIsFile(program, exe);
-
-    verifyFileSize(program, exe, 0x100);
-
-    // now read two bytes and verify the header.
-    try(FileReader reader = new FileReader(exe)) {
-      int[] header = new int[2];
-      header[0] = reader.read();
-      header[1] = reader.read();
-      if ((header[0] != 'M' || header[1] != 'Z')) {
-        throw new FileNotFoundException(program
-                                        + " at " + exe
-                                        + " is not a windows executable file");
-      }
-    }
-  }
-
-  /**
-   * Verify that a Unix exe works
-   * @param program program name for errors
-   * @param exe executable
-   * @throws IOException IOE
-
-   */
-  public static void verifyUnixExe(String program, File exe)
-      throws IOException {
-    verifyIsFile(program, exe);
-
-    // read flag
-    if (!exe.canRead()) {
-      throw new IOException("Cannot read " + program + " at " + exe);
-    }
-    // exe flag
-    if (!exe.canExecute()) {
-      throw new IOException("Cannot execute " + program + " at " + exe);
-    }
-  }
-
-  /**
-   * Validate an executable
-   * @param program program name for errors
-   * @param exe program to look at
-   * @throws IOException
-   */
-  public static void validateExe(String program, File exe) throws IOException {
-    if (!Shell.WINDOWS) {
-      verifyWindowsExe(program, exe);
-    } else {
-      verifyUnixExe(program, exe);
-    }
-  }
-
-  /**
-   * @param createParent flag to indicate that the parent dir should
-   * be created
-  public static void write(File outfile, byte[] data, boolean createParent)
+  public static void write(File outfile, byte[] data)
-    if (createParent) {
-      parentDir.mkdirs();
+    if (!parentDir.exists()) {
+      if(!parentDir.mkdirs()) {
+        throw new IOException("Failed to create parent directory " + parentDir);
+      }
-
