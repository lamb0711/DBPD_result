YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.

+
+  private final boolean fullPathQueueNamingPolicy = false;
-  
+
+  public String getQueueShortName() {
+    return queueName;
+  }
+
+  @Override
+    if (fullPathQueueNamingPolicy) {
+      return queuePath;
+    }
-      CSQueueUtils.checkMaxCapacity(getQueueName(),
+      CSQueueUtils.checkMaxCapacity(getQueuePath(),
-      CSQueueUtils.checkAbsoluteCapacity(getQueueName(),
+      CSQueueUtils.checkAbsoluteCapacity(getQueuePath(),
-      CSQueueUtils.checkMaxCapacity(getQueueName(),
+      CSQueueUtils.checkMaxCapacity(getQueuePath(),
-      CSQueueUtils.checkAbsoluteCapacity(getQueueName(),
+      CSQueueUtils.checkAbsoluteCapacity(getQueuePath(),
-    String queue = getQueuePath();
+    String myQueuePath = getQueuePath();
-    Resource queueMax = csConf.getQueueMaximumAllocation(queue);
+    Resource queueMax = csConf.getQueueMaximumAllocation(myQueuePath);
-            + " for queue " + queue
+            + " for queue " + myQueuePath
-      long queueMemory = csConf.getQueueMaximumAllocationMb(queue);
-      int queueVcores = csConf.getQueueMaximumAllocationVcores(queue);
+      long queueMemory = csConf.getQueueMaximumAllocationMb(myQueuePath);
+      int queueVcores = csConf.getQueueMaximumAllocationVcores(myQueuePath);
-          capacityConfigType, getQueueName());
+          capacityConfigType, getQueuePath());
-            capacityConfigType, getQueueName());
+            capacityConfigType, getQueuePath());
-            + " in queue:" + getQueueName());
+            + " in queue:" + getQueuePath());
-                + parentMaxRes + " in queue:" + getQueueName());
+                + parentMaxRes + " in queue:" + getQueuePath());
-          + " minResource={} and maxResource={}", getQueueName(), minResource,
+          + " minResource={} and maxResource={}", getQueuePath(), minResource,
-    if (!queueName.equals("root")
+    if (!queuePath.equals("root")
-      throw new IllegalArgumentException("Queue '" + getQueueName()
+      throw new IllegalArgumentException("Queue '" + getQueuePath()
-              "The parent queue:" + parent.getQueueName()
-              + " cannot be STOPPED as the child queue:" + queueName
+              "The parent queue:" + parent.getQueuePath()
+              + " cannot be STOPPED as the child queue:" + queuePath
-              LOG.debug("try to use reserved: " + getQueueName()
+              LOG.debug("try to use reserved: " + getQueuePath()
-          LOG.debug("Failed to assign to queue: " + getQueueName()
+          LOG.debug("Failed to assign to queue: " + getQueuePath()
-        LOG.debug("Check assign to queue: " + getQueueName()
+        LOG.debug("Check assign to queue: " + getQueuePath()
-    return csContext.getPreemptionManager().getKillableResource(queueName,
+    return csContext.getPreemptionManager().getKillableResource(getQueuePath(),
-    return csContext.getPreemptionManager().getKillableContainers(queueName,
+    return csContext.getPreemptionManager().getKillableContainers(
+        getQueuePath(),
-        LOG.info("The specified queue:" + queueName
+        LOG.info("The specified queue:" + getQueuePath()
-            "The queue:" + queueName + " is in the Stopping process. "
+            "The queue:" + getQueuePath() + " is in the Stopping process. "
-          throw new YarnException("The parent Queue:" + parent.getQueueName()
+          throw new YarnException("The parent Queue:" + parent.getQueuePath()
