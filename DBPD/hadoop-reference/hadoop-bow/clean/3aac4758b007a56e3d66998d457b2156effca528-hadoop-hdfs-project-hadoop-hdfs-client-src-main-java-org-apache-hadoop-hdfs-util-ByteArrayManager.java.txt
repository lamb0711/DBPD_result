HDFS-8803. Move DfsClientConf to hdfs-client. Contributed by Mingliang Liu.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
- * Manage byte array creation and release. 
+ * Manage byte array creation and release.
-  static final Log LOG = LogFactory.getLog(ByteArrayManager.class);
-  private static final ThreadLocal<StringBuilder> debugMessage = new ThreadLocal<StringBuilder>() {
+  static final Logger LOG = LoggerFactory.getLogger(ByteArrayManager.class);
+  private static final ThreadLocal<StringBuilder> DEBUG_MESSAGE =
+      new ThreadLocal<StringBuilder>() {
-    final StringBuilder b = debugMessage.get();
-    LOG.debug(b);
+    final StringBuilder b = DEBUG_MESSAGE.get();
+    LOG.debug(b.toString());
-     * for acertain time period.
+     * for a certain time period.
-  static class CounterMap {
+  static final class CounterMap {
-    private final Map<Integer, Counter> map = new HashMap<Integer, Counter>();
+    private final Map<Integer, Counter> map = new HashMap<>();
-    synchronized Counter get(final Integer key, final boolean createIfNotExist) {
+    synchronized Counter get(final Integer key, final boolean
+        createIfNotExist) {
-
-    synchronized void clear() {
-      map.clear();
-    }
-    private final Queue<byte[]> freeQueue = new LinkedList<byte[]>();
+    private final Queue<byte[]> freeQueue = new LinkedList<>();
-     * 
+     *
-        debugMessage.get().append(", ").append(this);
+        DEBUG_MESSAGE.get().append(", ").append(this);
-          debugMessage.get().append(": wait ...");
+          DEBUG_MESSAGE.get().append(": wait ...");
-          debugMessage.get().append("wake up: ").append(this);
+          DEBUG_MESSAGE.get().append("wake up: ").append(this);
-        debugMessage.get().append(", recycled? ").append(array != null);
+        DEBUG_MESSAGE.get().append(", recycled? ").append(array != null);
-        debugMessage.get().append(", ").append(this);
+        DEBUG_MESSAGE.get().append(", ").append(this);
-          debugMessage.get().append(", freeQueue.offer");
+          DEBUG_MESSAGE.get().append(", freeQueue.offer");
-    private final Map<Integer, FixedLengthManager> map = new HashMap<Integer, FixedLengthManager>();
+    private final Map<Integer, FixedLengthManager> map = new HashMap<>();
-
-    synchronized void clear() {
-      map.clear();
-    }
+  /**
+   * Configuration for ByteArrayManager.
+   */
-    public Conf(int countThreshold, int countLimit, long countResetTimePeriodMs) {
+    public Conf(int countThreshold, int countLimit, long
+        countResetTimePeriodMs) {
-   * 
+   *
-  
+
-   * 
+   *
-   * 
+   *
-    
+
-  
+
-  
+
-  
+
-     * In such case, the returned array length is equal to {@link #MIN_ARRAY_LENGTH}.
+     * In such case, the returned array length is equal to {@link
+     * #MIN_ARRAY_LENGTH}.
-     * 
+     *
-     * @return a byte array with length larger than or equal to the given length.
+     * @return a byte array with length larger than or equal to the given
+     * length.
-    public byte[] newByteArray(final int arrayLength) throws InterruptedException {
+    public byte[] newByteArray(final int arrayLength)
+        throws InterruptedException {
-        debugMessage.get().append("allocate(").append(arrayLength).append(")");
+        DEBUG_MESSAGE.get().append("allocate(").append(arrayLength).append(")");
-  
+
-        final FixedLengthManager manager = managers.get(powerOfTwo, aboveThreshold);
-  
+        final FixedLengthManager manager =
+            managers.get(powerOfTwo, aboveThreshold);
+
-          debugMessage.get().append(": count=").append(count)
+          DEBUG_MESSAGE.get().append(": count=").append(count)
-  
+
-        debugMessage.get().append(", return byte[").append(array.length).append("]");
+        DEBUG_MESSAGE.get().append(", return byte[")
+            .append(array.length).append("]");
-  
+
-     * 
+     *
-     * 
+     *
-        debugMessage.get().append("recycle: array.length=").append(array.length);
+        DEBUG_MESSAGE.get()
+            .append("recycle: array.length=").append(array.length);
-  
+
-  
+
-        debugMessage.get().append(", freeQueueSize=").append(freeQueueSize);
+        DEBUG_MESSAGE.get().append(", freeQueueSize=").append(freeQueueSize);
-  
+
-  
+
