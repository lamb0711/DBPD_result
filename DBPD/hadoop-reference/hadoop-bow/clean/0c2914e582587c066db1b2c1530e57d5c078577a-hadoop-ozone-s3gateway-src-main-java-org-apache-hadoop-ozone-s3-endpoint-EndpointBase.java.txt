HDDS-657. Remove {volume} path segments from all the remaining rest endpoints. Contributed by Elek, Marton.

-package org.apache.hadoop.ozone.s3;
+package org.apache.hadoop.ozone.s3.endpoint;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.HttpHeaders;
+import org.apache.hadoop.ozone.s3.header.AuthorizationHeaderV2;
+import org.apache.hadoop.ozone.s3.header.AuthorizationHeaderV4;
+
+  protected OzoneBucket getBucket(String bucketName)
+      throws OS3Exception, IOException {
+    OzoneBucket bucket;
+    try {
+      OzoneVolume volume = getVolume(getOzoneVolumeName(bucketName));
+      bucket = volume.getBucket(bucketName);
+    } catch (IOException ex) {
+      LOG.error("Error occurred is {}", ex);
+      if (ex.getMessage().contains("NOT_FOUND")) {
+        OS3Exception oex =
+            S3ErrorTable.newError(S3ErrorTable.NO_SUCH_BUCKET, Resource.BUCKET);
+        throw oex;
+      } else {
+        throw ex;
+      }
+    }
+    return bucket;
+  }
+
+  /**
+   * Retrieve the username based on the authorization header.
+   *
+   * @param httpHeaders
+   * @return Identified username
+   * @throws OS3Exception
+   */
+  public String parseUsername(
+      @Context HttpHeaders httpHeaders) throws OS3Exception {
+    String auth = httpHeaders.getHeaderString("Authorization");
+    LOG.info("Auth header string {}", auth);
+
+    if (auth == null) {
+      throw S3ErrorTable
+          .newError(S3ErrorTable.MALFORMED_HEADER, Resource.HEADER);
+    }
+
+    String userName;
+    if (auth.startsWith("AWS4")) {
+      LOG.info("V4 Header {}", auth);
+      AuthorizationHeaderV4 authorizationHeader = new AuthorizationHeaderV4(
+          auth);
+      userName = authorizationHeader.getAccessKeyID().toLowerCase();
+    } else {
+      LOG.info("V2 Header {}", auth);
+      AuthorizationHeaderV2 authorizationHeader = new AuthorizationHeaderV2(
+          auth);
+      userName = authorizationHeader.getAccessKeyID().toLowerCase();
+    }
+    return userName;
+  }
