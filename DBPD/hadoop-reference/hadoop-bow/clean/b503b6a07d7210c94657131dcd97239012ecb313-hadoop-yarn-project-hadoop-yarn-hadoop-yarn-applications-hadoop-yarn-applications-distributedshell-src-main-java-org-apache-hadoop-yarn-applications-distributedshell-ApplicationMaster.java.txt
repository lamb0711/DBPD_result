YARN-639. Modified Distributed Shell application to start using the new NMClient library. Contributed by Zhijie Shen.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493280 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.InetSocketAddress;
-import java.security.PrivilegedAction;
+import java.nio.ByteBuffer;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
-import org.apache.hadoop.net.NetUtils;
-import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.yarn.client.NMClientAsync;
-import org.apache.hadoop.yarn.ipc.YarnRPC;
-import org.apache.hadoop.yarn.security.ContainerTokenIdentifier;
-import org.apache.hadoop.yarn.util.ProtoUtils;
-  // YARN RPC to communicate with the Resource Manager or Node Manager
-  private YarnRPC rpc;
-  private AMRMClientAsync<ContainerRequest> resourceManager;
+  @SuppressWarnings("rawtypes")
+  private AMRMClientAsync resourceManager;
+
+  // Handle to communicate with the Node Manager
+  private NMClientAsync nmClientAsync;
+  // Listen to process the response from the Node Manager
+  private NMCallbackHandler containerListener;
-    rpc = YarnRPC.create(conf);
+  @SuppressWarnings({ "rawtypes", "unchecked" })
-    
-    resourceManager = new AMRMClientAsync<ContainerRequest>(appAttemptID, 
-                                                            1000, 
-                                                            allocListener);
+    resourceManager = new AMRMClientAsync(appAttemptID, 1000, allocListener);
+    containerListener = new NMCallbackHandler();
+    nmClientAsync = new NMClientAsync(containerListener);
+    nmClientAsync.init(conf);
+    nmClientAsync.start();
+
+    // When the application completes, it should stop all running containers
+    LOG.info("Application completed. Stopping running containers");
+    nmClientAsync.stop();
+
+    @SuppressWarnings("unchecked")
-        LaunchContainerRunnable runnableLaunchContainer = new LaunchContainerRunnable(
-            allocatedContainer);
+        LaunchContainerRunnable runnableLaunchContainer =
+            new LaunchContainerRunnable(allocatedContainer, containerListener);
+  private class NMCallbackHandler implements NMClientAsync.CallbackHandler {
+
+    private ConcurrentMap<ContainerId, Container> containers =
+        new ConcurrentHashMap<ContainerId, Container>();
+
+    public void addContainer(ContainerId containerId, Container container) {
+      containers.putIfAbsent(containerId, container);
+    }
+
+    @Override
+    public void onContainerStopped(ContainerId containerId) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Succeeded to stop Container " + containerId);
+      }
+      containers.remove(containerId);
+    }
+
+    @Override
+    public void onContainerStatusReceived(ContainerId containerId,
+        ContainerStatus containerStatus) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Container Status: id=" + containerId + ", status=" +
+            containerStatus);
+      }
+    }
+
+    @Override
+    public void onContainerStarted(ContainerId containerId,
+        Map<String, ByteBuffer> allServiceResponse) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Succeeded to start Container " + containerId);
+      }
+      Container container = containers.get(containerId);
+      if (container != null) {
+        nmClientAsync.getContainerStatus(containerId, container.getNodeId(),
+            container.getContainerToken());
+      }
+    }
+
+    @Override
+    public void onStartContainerError(ContainerId containerId, Throwable t) {
+      LOG.error("Failed to start Container " + containerId);
+      containers.remove(containerId);
+    }
+
+    @Override
+    public void onGetContainerStatusError(
+        ContainerId containerId, Throwable t) {
+      LOG.error("Failed to query the status of Container " + containerId);
+    }
+
+    @Override
+    public void onStopContainerError(ContainerId containerId, Throwable t) {
+      LOG.error("Failed to stop Container " + containerId);
+      containers.remove(containerId);
+    }
+  }
+
-    // Handle to communicate with ContainerManager
-    ContainerManager cm;
+
+    NMCallbackHandler containerListener;
+     * @param containerListener Callback handler of the container
-    public LaunchContainerRunnable(Container lcontainer) {
+    public LaunchContainerRunnable(
+        Container lcontainer, NMCallbackHandler containerListener) {
-    }
-
-    /**
-     * Helper function to connect to CM
-     */
-    private void connectToCM() {
-      LOG.debug("Connecting to ContainerManager for containerid="
-          + container.getId());
-      String cmIpPortStr = container.getNodeId().getHost() + ":"
-          + container.getNodeId().getPort();
-      final InetSocketAddress cmAddress =
-          NetUtils.createSocketAddr(cmIpPortStr);
-      LOG.info("Connecting to ContainerManager at " + cmIpPortStr);
-      UserGroupInformation ugi =
-          UserGroupInformation.createRemoteUser(container.getId().toString());
-      Token<ContainerTokenIdentifier> token =
-          ProtoUtils.convertFromProtoFormat(container.getContainerToken(),
-            cmAddress);
-      ugi.addToken(token);
-      this.cm = ugi.doAs(new PrivilegedAction<ContainerManager>() {
-        @Override
-        public ContainerManager run() {
-          return ((ContainerManager) rpc.getProxy(ContainerManager.class,
-            cmAddress, conf));
-        }
-      });
+      this.containerListener = containerListener;
-      // Connect to ContainerManager
-      connectToCM();
-
-      StartContainerRequest startReq = Records
-          .newRecord(StartContainerRequest.class);
-      startReq.setContainerLaunchContext(ctx);
-      startReq.setContainerToken(container.getContainerToken());
-      try {
-        cm.startContainer(startReq);
-      } catch (YarnException e) {
-        LOG.info("Start container failed for :" + ", containerId="
-            + container.getId());
-        e.printStackTrace();
-        // TODO do we need to release this container?
-      } catch (IOException e) {
-        LOG.info("Start container failed for :" + ", containerId="
-            + container.getId());
-        e.printStackTrace();
-      }
-
-      // Get container status?
-      // Left commented out as the shell scripts are short lived
-      // and we are relying on the status for completed containers
-      // from RM to detect status
-
-      // GetContainerStatusRequest statusReq =
-      // Records.newRecord(GetContainerStatusRequest.class);
-      // statusReq.setContainerId(container.getId());
-      // GetContainerStatusResponse statusResp;
-      // try {
-      // statusResp = cm.getContainerStatus(statusReq);
-      // LOG.info("Container Status"
-      // + ", id=" + container.getId()
-      // + ", status=" +statusResp.getStatus());
-      // } catch (YarnException e) {
-      // e.printStackTrace();
-      // }
+      containerListener.addContainer(container.getId(), container);
+      nmClientAsync.startContainer(container, ctx);
