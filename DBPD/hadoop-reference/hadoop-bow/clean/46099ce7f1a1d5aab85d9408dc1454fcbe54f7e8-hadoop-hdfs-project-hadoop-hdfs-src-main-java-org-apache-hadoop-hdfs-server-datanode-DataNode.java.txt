HDFS-4988. Datanode must support all the volumes as individual storages.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1526969 13f79535-47bb-0310-9956-ffa450edef68

-               reason);
+                   reason);
-        getDatanodeUuid(), getXferPort(), getInfoPort(), getIpcPort());
+        storage.getDatanodeUuid(), getXferPort(), getInfoPort(), getIpcPort());
-    if (storage.getStorageID().equals("")) {
-      // This is a fresh datanode, persist the NN-provided storage ID
-      storage.setStorageID(bpRegistration.getDatanodeUuid());
+    if (storage.getDatanodeUuid() == null) {
+      // This is a fresh datanode, persist the NN-provided Datanode ID
+      storage.setDatanodeUuid(bpRegistration.getDatanodeUuid());
-      LOG.info("New storage id " + bpRegistration.getDatanodeUuid()
-          + " is assigned to data-node " + bpRegistration);
-    } else if(!storage.getStorageID().equals(bpRegistration.getDatanodeUuid())) {
-      throw new IOException("Inconsistent storage IDs. Name-node returned "
+      LOG.info("Datanode ID " + bpRegistration.getDatanodeUuid()
+          + " is assigned to new storage " + bpRegistration);
+    } else if(!storage.getDatanodeUuid().equals(bpRegistration.getDatanodeUuid())) {
+      throw new IOException("Inconsistent Datanode IDs. Name-node returned "
-          + ". Expecting " + storage.getStorageID());
+          + ". Expecting " + storage.getDatanodeUuid());
-  String getDatanodeUuid() {
-    return storage.getStorageID();
-  }
-
-  public static void setNewStorageID(DatanodeID dnId) {
-    LOG.info("Datanode is " + dnId);
-    dnId.setDatanodeUuid(DatanodeStorage.newStorageID());
-  }
-  
-        + "', storageID='" + getDatanodeUuid() + "', xmitsInProgress="
+        + "', datanodeUuid='" + storage.getDatanodeUuid() + "', xmitsInProgress="
-   * This method is used for testing. 
+  public String getDatanodeUuid() {
+    return id == null ? null : id.getDatanodeUuid();
+  }
+
