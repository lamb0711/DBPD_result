YARN-3684. Changed ContainerExecutor's primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.

-import java.net.InetSocketAddress;
+import org.apache.hadoop.yarn.server.nodemanager.executor.ContainerLivenessContext;
+import org.apache.hadoop.yarn.server.nodemanager.executor.ContainerReacquisitionContext;
+import org.apache.hadoop.yarn.server.nodemanager.executor.ContainerSignalContext;
+import org.apache.hadoop.yarn.server.nodemanager.executor.ContainerStartContext;
+import org.apache.hadoop.yarn.server.nodemanager.executor.DeletionAsUserContext;
+import org.apache.hadoop.yarn.server.nodemanager.executor.LocalizerStartContext;
-   * @param user user name of application owner
-   * @param appId id of the application
-   * @param nmPrivateContainerTokens path to localized credentials, rsrc by NM
-   * @param nmAddr RPC address to contact NM
-   * @param dirsHandler NM local dirs service, for nm-local-dirs and nm-log-dirs
+   * @param ctx LocalizerStartContext that encapsulates necessary information
+   *            for starting a localizer.
-  public abstract void startLocalizer(Path nmPrivateContainerTokens,
-      InetSocketAddress nmAddr, String user, String appId, String locId,
-      LocalDirsHandlerService dirsHandler)
+  public abstract void startLocalizer(LocalizerStartContext ctx)
-   * @param container the container to be launched
-   * @param nmPrivateContainerScriptPath the path for launch script
-   * @param nmPrivateTokensPath the path for tokens for the container
-   * @param user the user of the container
-   * @param appId the appId of the container
-   * @param containerWorkDir the work dir for the container
-   * @param localDirs nm-local-dirs to be used for this container
-   * @param logDirs nm-log-dirs to be used for this container
+   * @param ctx Encapsulates information necessary for launching containers.
-  public abstract int launchContainer(Container container,
-      Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath,
-      String user, String appId, Path containerWorkDir, 
-      List<String> localDirs, List<String> logDirs) throws IOException;
+  public abstract int launchContainer(ContainerStartContext ctx) throws
+      IOException;
-  public abstract boolean signalContainer(String user, String pid,
-      Signal signal)
+  /**
+   * Signal container with the specified signal.
+   * @param ctx Encapsulates information necessary for signaling containers.
+   * @return returns true if the operation succeeded
+   * @throws IOException
+   */
+  public abstract boolean signalContainer(ContainerSignalContext ctx)
-  public abstract void deleteAsUser(String user, Path subDir, Path... basedirs)
+  /**
+   * Delete specified directories as a given user.
+   * @param ctx Encapsulates information necessary for deletion.
+   * @throws IOException
+   * @throws InterruptedException
+   */
+  public abstract void deleteAsUser(DeletionAsUserContext ctx)
-  public abstract boolean isContainerProcessAlive(String user, String pid)
+  /**
+   * Check if a container is alive.
+   * @param ctx Encapsulates information necessary for container liveness check.
+   * @return true if container is still alive
+   * @throws IOException
+   */
+  public abstract boolean isContainerProcessAlive(ContainerLivenessContext ctx)
-   * @param user the user of the container
-   * @param containerId The ID of the container to reacquire
+   * @param ctx encapsulates information necessary to reacquire container
-  public int reacquireContainer(String user, ContainerId containerId)
+  public int reacquireContainer(ContainerReacquisitionContext ctx)
+    String user = ctx.getUser();
+    ContainerId containerId = ctx.getContainerId();
+
+
-    while(isContainerProcessAlive(user, pid)) {
+    ContainerLivenessContext livenessContext = new ContainerLivenessContext
+        .Builder()
+        .setUser(user)
+        .setPid(pid)
+        .build();
+    while(isContainerProcessAlive(livenessContext)) {
-        containerExecutor.signalContainer(user, pid, signal);
+        containerExecutor.signalContainer(new ContainerSignalContext.Builder()
+            .setUser(user)
+            .setPid(pid)
+            .setSignal(signal)
+            .build());
