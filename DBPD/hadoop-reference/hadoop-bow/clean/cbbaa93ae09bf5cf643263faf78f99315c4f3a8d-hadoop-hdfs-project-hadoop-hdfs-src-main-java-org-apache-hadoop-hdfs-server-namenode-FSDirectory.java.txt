HDFS-4317. Change INode and its subclasses to support HDFS-4103.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1422748 13f79535-47bb-0310-9956-ffa450edef68

-      file.setModificationTimeForce(now);
+      file.setModificationTime(now);
-        srcInodes[srcInodes.length-2].setModificationTime(timestamp);
-        dstInodes[dstInodes.length-2].setModificationTime(timestamp);
+        srcInodes[srcInodes.length-2].updateModificationTime(timestamp);
+        dstInodes[dstInodes.length-2].updateModificationTime(timestamp);
-        srcInodes[srcInodes.length - 2].setModificationTime(timestamp);
-        dstInodes[dstInodes.length - 2].setModificationTime(timestamp);
+        srcInodes[srcInodes.length - 2].updateModificationTime(timestamp);
+        dstInodes[dstInodes.length - 2].updateModificationTime(timestamp);
-    trgInode.setModificationTimeForce(timestamp);
-    trgParent.setModificationTime(timestamp);
+    trgInode.setModificationTime(timestamp);
+    trgParent.updateModificationTime(timestamp);
-    inodes[inodes.length - 2].setModificationTime(mtime);
+    inodes[inodes.length - 2].updateModificationTime(mtime);
-   * Replaces the specified INode.
-   */
-  private void replaceINodeUnsynced(String path, INode oldnode, INode newnode
-      ) throws IOException {    
-    //remove the old node from the namespace 
-    if (!oldnode.removeNode()) {
-      final String mess = "FSDirectory.replaceINodeUnsynced: failed to remove "
-          + path;
-      NameNode.stateChangeLog.warn("DIR* " + mess);
-      throw new IOException(mess);
-    } 
-    
-    //add the new node
-    rootDir.addINode(path, newnode); 
-  }
-
-  /**
-      replaceINodeUnsynced(path, oldnode, newnode);
-
-      //update children's parent directory
-      for(INode i : newnode.getChildrenList(null)) {
-        i.parent = newnode;
-      }
+      unprotectedReplaceINode(path, oldnode, newnode);
+      // Note that the parent of the children of the oldnode is already updated
-  public void replaceNode(String path, INodeFile oldnode, INodeFile newnode
-      ) throws IOException {    
+  public void replaceINodeFile(String path, INodeFile oldnode,
+      INodeFile newnode) throws IOException {    
-      unprotectedReplaceNode(path, oldnode, newnode);
+      unprotectedReplaceINodeFile(path, oldnode, newnode);
-  
-  void unprotectedReplaceNode(String path, INodeFile oldnode, INodeFile newnode)
-      throws IOException, UnresolvedLinkException {
-    assert hasWriteLock();
-    INodeDirectory parent = oldnode.parent;
+
+  private void unprotectedReplaceINode(String path, INode oldnode,
+      INode newnode) throws IOException {    
+    Preconditions.checkState(hasWriteLock());
+
+    INodeDirectory parent = oldnode.getParent();
-    if (!oldnode.removeNode()) {
-      NameNode.stateChangeLog.warn("DIR* FSDirectory.replaceNode: " +
-                                   "failed to remove " + path);
-      throw new IOException("FSDirectory.replaceNode: " +
-                            "failed to remove " + path);
-    } 
+    if (parent == null) {
+      final String mess
+          = "FSDirectory.unprotectedReplaceINode: failed to remove " + path;
+      NameNode.stateChangeLog.warn("DIR* " + mess);
+      throw new IOException(mess);
+    }
-    // Parent should be non-null, otherwise oldnode.removeNode() will return
-    // false
-    newnode.setLocalName(oldnode.getLocalNameBytes());
+    final INode removed = parent.removeChild(oldnode);
+    Preconditions.checkState(removed == oldnode,
+        "removed != oldnode=%s, removed=%s", oldnode, removed);
+
+    parent = oldnode.getParent();
+    oldnode.setParent(null);
+
+  }
+
+  void unprotectedReplaceINodeFile(String path, INodeFile oldnode,
+      INodeFile newnode)
+      throws IOException, UnresolvedLinkException {
+    unprotectedReplaceINode(path, oldnode, newnode);
+    newnode.setLocalName(oldnode.getLocalNameBytes());
+    return getINodesInPath(src).getINode(0);
+  }
+
+  /**
+   * Get {@link INode} associated with the file / directory.
+   */
+  public INodesInPath getINodesInPath(String src) throws UnresolvedLinkException {
-      return rootDir.getNode(src, true);
+      return rootDir.getINodesInPath(src, true);
+   */
+  public INodesInPath getMutableINodesInPath(String src
+      ) throws UnresolvedLinkException, SnapshotAccessControlException {
+    readLock();
+    try {
+      return rootDir.getMutableINodesInPath(src, true);
+    } finally {
+      readUnlock();
+    }
+  }
+
+  /**
+   * Get {@link INode} associated with the file / directory.
-        INodeDirectoryWithQuota newNode = 
-          new INodeDirectoryWithQuota(nsQuota, dsQuota, dirNode);
+        final INodeDirectoryWithQuota newNode = new INodeDirectoryWithQuota(
+            dirNode, true, nsQuota, dsQuota);
-      inode.setModificationTimeForce(mtime);
+      inode.setModificationTime(mtime);
