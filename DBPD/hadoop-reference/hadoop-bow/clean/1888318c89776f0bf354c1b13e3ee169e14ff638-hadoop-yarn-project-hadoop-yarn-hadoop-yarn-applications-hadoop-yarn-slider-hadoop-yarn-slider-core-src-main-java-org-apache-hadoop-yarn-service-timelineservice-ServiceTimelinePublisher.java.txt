YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He

-package org.apache.slider.server.appmaster.timelineservice;
-
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
+package org.apache.hadoop.yarn.service.timelineservice;
+import org.apache.hadoop.yarn.api.records.ContainerState;
+import org.apache.hadoop.yarn.api.records.ContainerStatus;
+import org.apache.hadoop.yarn.api.records.FinalApplicationStatus;
+import org.apache.hadoop.yarn.service.compinstance.ComponentInstance;
+import org.apache.hadoop.yarn.service.ServiceContext;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+
+  protected void serviceInit(org.apache.hadoop.conf.Configuration configuration)
+      throws Exception {
+    addService(timelineClient);
+  }
+
+
+  @Override
+    super.serviceStop();
-  public void serviceAttemptRegistered(AppState appState) {
-    Application application = appState.getClusterStatus();
+  public void serviceAttemptRegistered(Application application) {
-    entityInfos.put(SliderTimelineMetricsConstants.NAME, application.getName());
-    entityInfos.put(SliderTimelineMetricsConstants.STATE,
+    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());
+    entityInfos.put(ServiceTimelineMetricsConstants.STATE,
-    entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_TIME,
+    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,
+    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,
+        application.getQuicklinks());
-    startEvent.setId(SliderTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());
+    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());
-        SliderTimelineEntityType.SERVICE_ATTEMPT.toString(), true);
+        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString(), true);
-    entity.addInfo(SliderTimelineMetricsConstants.QUICK_LINKS,
+    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,
+  public void serviceAttemptUnregistered(ServiceContext context) {
+    TimelineEntity entity = createServiceAttemptEntity(
+        context.attemptId.getApplicationId().toString());
+    Map<String, Object> entityInfos = new HashMap<String, Object>();
+    entityInfos.put(ServiceTimelineMetricsConstants.STATE,
+        FinalApplicationStatus.FAILED);
+    entity.addInfo(entityInfos);
+
+    // add an event
+    TimelineEvent finishEvent = new TimelineEvent();
+    finishEvent
+        .setId(ServiceTimelineEvent.SERVICE_ATTEMPT_UNREGISTERED.toString());
+    finishEvent.setTimestamp(System.currentTimeMillis());
+    entity.addEvent(finishEvent);
+
+    putEntity(entity);
+  }
+
-    entityInfos.put(SliderTimelineMetricsConstants.EXIT_STATUS_CODE,
+    entityInfos.put(ServiceTimelineMetricsConstants.EXIT_STATUS_CODE,
-    entityInfos.put(SliderTimelineMetricsConstants.STATE,
+    entityInfos.put(ServiceTimelineMetricsConstants.STATE,
-      entityInfos.put(SliderTimelineMetricsConstants.EXIT_REASON,
+      entityInfos.put(ServiceTimelineMetricsConstants.EXIT_REASON,
-      entityInfos.put(SliderTimelineMetricsConstants.DIAGNOSTICS_INFO,
+      entityInfos.put(ServiceTimelineMetricsConstants.DIAGNOSTICS_INFO,
-        .setId(SliderTimelineEvent.SERVICE_ATTEMPT_UNREGISTERED.toString());
+        .setId(ServiceTimelineEvent.SERVICE_ATTEMPT_UNREGISTERED.toString());
-      String componentName) {
+      ComponentInstance instance) {
-    entityInfos.put(SliderTimelineMetricsConstants.BARE_HOST,
+    entityInfos.put(ServiceTimelineMetricsConstants.BARE_HOST,
-    entityInfos.put(SliderTimelineMetricsConstants.STATE,
+    entityInfos.put(ServiceTimelineMetricsConstants.STATE,
-    entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_TIME,
+    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,
-    entityInfos.put(SliderTimelineMetricsConstants.COMPONENT_NAME,
-        componentName);
+    entityInfos.put(ServiceTimelineMetricsConstants.COMPONENT_NAME,
+        instance.getCompName());
+    entityInfos.put(ServiceTimelineMetricsConstants.COMPONENT_INSTANCE_NAME,
+        instance.getCompInstanceName());
-        .setId(SliderTimelineEvent.COMPONENT_INSTANCE_REGISTERED.toString());
+        .setId(ServiceTimelineEvent.COMPONENT_INSTANCE_REGISTERED.toString());
-    entityInfos.put(SliderTimelineMetricsConstants.EXIT_STATUS_CODE,
+    entityInfos.put(ServiceTimelineMetricsConstants.EXIT_STATUS_CODE,
-    entityInfos.put(SliderTimelineMetricsConstants.DIAGNOSTICS_INFO,
+    entityInfos.put(ServiceTimelineMetricsConstants.DIAGNOSTICS_INFO,
-    entityInfos.put(SliderTimelineMetricsConstants.STATE, "FINISHED");
+    entityInfos.put(ServiceTimelineMetricsConstants.STATE, "FINISHED");
-        .setId(SliderTimelineEvent.COMPONENT_INSTANCE_UNREGISTERED.toString());
+        .setId(ServiceTimelineEvent.COMPONENT_INSTANCE_UNREGISTERED.toString());
-  public void componentInstanceUpdated(Container container,
-      String componentName) {
+  public void componentInstanceFinished(ComponentInstance instance,
+      int exitCode, ContainerState state, String diagnostics) {
+    TimelineEntity entity = createComponentInstanceEntity(
+        instance.getContainer().getId().toString());
+
+    // create info keys
+    Map<String, Object> entityInfos = new HashMap<String, Object>();
+    entityInfos.put(ServiceTimelineMetricsConstants.EXIT_STATUS_CODE,
+        exitCode);
+    entityInfos.put(ServiceTimelineMetricsConstants.DIAGNOSTICS_INFO, diagnostics);
+    entityInfos.put(ServiceTimelineMetricsConstants.STATE, state);
+    entity.addInfo(entityInfos);
+
+    // add an event
+    TimelineEvent startEvent = new TimelineEvent();
+    startEvent
+        .setId(ServiceTimelineEvent.COMPONENT_INSTANCE_UNREGISTERED.toString());
+    startEvent.setTimestamp(System.currentTimeMillis());
+    entity.addEvent(startEvent);
+
+    putEntity(entity);
+  }
+
+  public void componentInstanceUpdated(Container container) {
-    entityInfos.put(SliderTimelineMetricsConstants.IP, container.getIp());
-    entityInfos.put(SliderTimelineMetricsConstants.HOSTNAME,
+    entityInfos.put(ServiceTimelineMetricsConstants.IP, container.getIp());
+    entityInfos.put(ServiceTimelineMetricsConstants.HOSTNAME,
-    entityInfos.put(SliderTimelineMetricsConstants.STATE,
+    entityInfos.put(ServiceTimelineMetricsConstants.STATE,
-        .setId(SliderTimelineEvent.COMPONENT_INSTANCE_UPDATED.toString());
+        .setId(ServiceTimelineEvent.COMPONENT_INSTANCE_UPDATED.toString());
-      entityInfos.put(SliderTimelineMetricsConstants.ARTIFACT_ID,
+      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,
-      entityInfos.put(SliderTimelineMetricsConstants.ARTIFACT_TYPE,
+      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,
-        entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_PROFILE,
+        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,
-      entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_CPU,
+      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,
-      entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_MEMORY,
+      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,
-        entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_COMMAND,
+        entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,
-      entityInfos.put(SliderTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,
+      entityInfos.put(ServiceTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,
-      entityInfos.put(SliderTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,
+      entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,
-        entityInfos.put(SliderTimelineMetricsConstants.PLACEMENT_POLICY,
+        entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,
-          SliderTimelineEntityType.COMPONENT.toString(), false);
+          ServiceTimelineEntityType.COMPONENT.toString(), false);
-   * Called from SliderMetricsSink at regular interval of time.
+   * Called from ServiceMetricsSink at regular interval of time.
-        SliderTimelineEntityType.SERVICE_ATTEMPT.toString());
+        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());
-        SliderTimelineEntityType.COMPONENT_INSTANCE.toString());
+        ServiceTimelineEntityType.COMPONENT_INSTANCE.toString());
-        SliderTimelineEntityType.COMPONENT.toString());
+        ServiceTimelineEntityType.COMPONENT.toString());
