HDFS-12159. Ozone: SCM: Add create replication pipeline RPC. Contributed by Anu Engineer.

-
-import org.apache.hadoop.hdfs.protocol.DatanodeID;
-import org.apache.hadoop.ozone.scm.container.placement.algorithms.ContainerPlacementPolicy;
-import org.apache.hadoop.ozone.scm.container.placement.algorithms.SCMContainerPlacementRandom;
+import org.apache.hadoop.ozone.scm.pipelines.PipelineSelector;
-import org.apache.hadoop.scm.ScmConfigKeys;
-import org.apache.hadoop.scm.client.ScmClient;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-  private final ContainerPlacementPolicy placementPolicy;
-  private final long containerSize;
+  private final PipelineSelector pipelineSelector;
-
-    this.containerSize = OzoneConsts.GB * conf.getInt(
-        ScmConfigKeys.OZONE_SCM_CONTAINER_SIZE_GB,
-        ScmConfigKeys.OZONE_SCM_CONTAINER_SIZE_DEFAULT);
-    this.placementPolicy = createContainerPlacementPolicy(nodeManager, conf);
+    this.pipelineSelector = new PipelineSelector(nodeManager, conf);
-  /**
-   * Create pluggable container placement policy implementation instance.
-   *
-   * @param nodeManager - SCM node manager.
-   * @param conf - configuration.
-   * @return SCM container placement policy implementation instance.
-   */
-  @SuppressWarnings("unchecked")
-  private static ContainerPlacementPolicy createContainerPlacementPolicy(
-      final NodeManager nodeManager, final Configuration conf) {
-    Class<? extends ContainerPlacementPolicy> implClass =
-        (Class<? extends ContainerPlacementPolicy>) conf.getClass(
-            ScmConfigKeys.OZONE_SCM_CONTAINER_PLACEMENT_IMPL_KEY,
-            SCMContainerPlacementRandom.class);
-    try {
-      Constructor<? extends ContainerPlacementPolicy> ctor =
-          implClass.getDeclaredConstructor(NodeManager.class,
-              Configuration.class);
-      return ctor.newInstance(nodeManager, conf);
-    } catch (RuntimeException e) {
-      throw e;
-    } catch (InvocationTargetException e) {
-      throw new RuntimeException(implClass.getName()
-          + " could not be constructed.", e.getCause());
-    } catch (Exception e) {
-      LOG.error("Unhandled exception occured, Placement policy will not be " +
-          "functional.");
-      throw new IllegalArgumentException("Unable to load " +
-          "ContainerPlacementPolicy", e);
-    }
-  }
-
-  /**
-   * Translates a list of nodes, ordered such that the first is the leader, into
-   * a corresponding {@link Pipeline} object.
-   * @param nodes - list of datanodes on which we will allocate the container.
-   * The first of the list will be the leader node.
-   * @param containerName container name
-   * @return pipeline corresponding to nodes
-   */
-  private static Pipeline newPipelineFromNodes(final List<DatanodeID> nodes,
-      final String containerName) {
-    Preconditions.checkNotNull(nodes);
-    Preconditions.checkArgument(nodes.size() > 0);
-    String leaderId = nodes.get(0).getDatanodeUuid();
-    Pipeline pipeline = new Pipeline(leaderId);
-    for (DatanodeID node : nodes) {
-      pipeline.addMember(node);
-    }
-    pipeline.setContainerName(containerName);
-    return pipeline;
-  }
-      if(containerStore.isEmpty()) {
+      if (containerStore.isEmpty()) {
-   * @return - Pipeline that makes up this container.
-   * @throws IOException
-   */
-  @Override
-  public Pipeline allocateContainer(final String containerName)
-      throws IOException {
-    return allocateContainer(containerName, ScmClient.ReplicationFactor.ONE);
-  }
-
-  /**
-   * Allocates a new container.
-   *
-   * @param containerName - Name of the container.
-   * @throws IOException
+   * @throws IOException - Exception
-  public Pipeline allocateContainer(final String containerName,
-      final ScmClient.ReplicationFactor replicationFactor) throws IOException {
+  public Pipeline allocateContainer(OzoneProtos.ReplicationType type,
+      OzoneProtos.ReplicationFactor replicationFactor,
+      final String containerName) throws IOException {
-      List<DatanodeID> datanodes = placementPolicy.chooseDatanodes(
-          replicationFactor.getValue(), containerSize);
-      // TODO: handle under replicated container
-      if (datanodes != null && datanodes.size() > 0) {
-        pipeline = newPipelineFromNodes(datanodes, containerName);
-        containerStore.put(containerName.getBytes(encoding),
-            pipeline.getProtobufMessage().toByteArray());
-      } else {
-        LOG.debug("Unable to find enough datanodes for new container. " +
-            "Required {} found {}", replicationFactor,
-            datanodes != null ? datanodes.size(): 0);
-      }
+      pipeline = pipelineSelector.getReplicationPipeline(type,
+          replicationFactor, containerName);
+      containerStore.put(containerName.getBytes(encoding),
+          pipeline.getProtobufMessage().toByteArray());
-   * @throws IOException
-   *   if container doesn't exist
-   *   or container store failed to delete the specified key.
+   * @throws IOException if container doesn't exist or container store failed to
+   *                     delete the specified key.
-      if(pipelineBytes == null) {
+      if (pipelineBytes == null) {
