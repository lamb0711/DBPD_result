HDDS-1856. Make required changes for Non-HA to use new HA code in OM. (#1174)


+import java.util.concurrent.CompletableFuture;
+
+  // future objects which hold the future returned by add method.
+  private volatile Queue<CompletableFuture<Void>> currentFutureQueue;
+
+  // Once we have an entry in current buffer, we swap the currentFutureQueue
+  // with readyFutureQueue. After flush is completed in flushTransaction
+  // daemon thread, we complete the futures in readyFutureQueue and clear them.
+  private volatile Queue<CompletableFuture<Void>> readyFutureQueue;
+
+  private final boolean isRatisEnabled;
+
+    this(omMetadataManager, ozoneManagerRatisSnapShot, true);
+  }
+
+  public OzoneManagerDoubleBuffer(OMMetadataManager omMetadataManager,
+      OzoneManagerRatisSnapshot ozoneManagerRatisSnapShot,
+      boolean isRatisEnabled) {
+
+    this.isRatisEnabled = isRatisEnabled;
+
+    if (!isRatisEnabled) {
+      this.currentFutureQueue = new ConcurrentLinkedQueue<>();
+      this.readyFutureQueue = new ConcurrentLinkedQueue<>();
+    } else {
+      this.currentFutureQueue = null;
+      this.readyFutureQueue = null;
+    }
+
+
+
+
+
+          if (!isRatisEnabled) {
+            // Once all entries are flushed, we can complete their future.
+            readyFutureQueue.iterator().forEachRemaining((entry) -> {
+              entry.complete(null);
+            });
+
+            readyFutureQueue.clear();
+          }
-  public synchronized void add(OMClientResponse response,
+  public synchronized CompletableFuture<Void> add(OMClientResponse response,
+
+    if (!isRatisEnabled) {
+      CompletableFuture<Void> future = new CompletableFuture<>();
+      currentFutureQueue.add(future);
+      return future;
+    } else {
+      // In Non-HA case we don't need future to be returned, and this return
+      // status is not used.
+      return null;
+    }
+
+    if (!isRatisEnabled) {
+      // Swap future queue.
+      Queue<CompletableFuture<Void>> tempFuture = currentFutureQueue;
+      currentFutureQueue = readyFutureQueue;
+      readyFutureQueue = tempFuture;
+    }
