HDFS-5222. Move block schedule information from DatanodeDescriptor to DatanodeStorageInfo.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1526215 13f79535-47bb-0310-9956-ffa450edef68

+
+
+  /* Variables for maintaining number of blocks scheduled to be written to
+   * this storage. This count is approximate and might be slightly bigger
+   * in case of errors (e.g. datanode does not report if an error occurs
+   * while writing the block).
+   */
+  private int currApproxBlocksScheduled = 0;
+  private int prevApproxBlocksScheduled = 0;
+  private long lastBlocksScheduledRollTime = 0;
+  private static final int BLOCKS_SCHEDULED_ROLL_INTERVAL = 600*1000; //10min
+
-  public boolean areBlockContentsStale() {
+  boolean areBlockContentsStale() {
-  public void markStaleAfterFailover() {
+  void markStaleAfterFailover() {
-  public void receivedHeartbeat() {
+  void receivedHeartbeat(final long lastUpdate) {
+    rollBlocksScheduled(lastUpdate);
-  public void receivedBlockReport() {
+  void receivedBlockReport() {
-  public void setUtilization(long capacity, long dfsUsed, long remaining) {
+  void setUtilization(long capacity, long dfsUsed, long remaining) {
+
+  /**
+   * @return Approximate number of blocks currently scheduled to be written
+   *         to this storage.
+   */
+  int getBlocksScheduled() {
+    return currApproxBlocksScheduled + prevApproxBlocksScheduled;
+  }
+
+  /** Increment the number of blocks scheduled for each given storage */ 
+  public static void incrementBlocksScheduled(DatanodeStorageInfo... storages) {
+    for (DatanodeStorageInfo s : storages) {
+      s.incrementBlocksScheduled();
+    }
+  }
+
+  /** Increment the number of blocks scheduled. */
+  private void incrementBlocksScheduled() {
+    currApproxBlocksScheduled++;
+  }
+  /** Decrement the number of blocks scheduled. */
+  void decrementBlocksScheduled() {
+    if (prevApproxBlocksScheduled > 0) {
+      prevApproxBlocksScheduled--;
+    } else if (currApproxBlocksScheduled > 0) {
+      currApproxBlocksScheduled--;
+    } 
+    // its ok if both counters are zero.
+  }
+  
+  /** Adjusts curr and prev number of blocks scheduled every few minutes. */
+  private void rollBlocksScheduled(long now) {
+    if (now - lastBlocksScheduledRollTime > BLOCKS_SCHEDULED_ROLL_INTERVAL) {
+      prevApproxBlocksScheduled = currApproxBlocksScheduled;
+      currApproxBlocksScheduled = 0;
+      lastBlocksScheduledRollTime = now;
+    }
+  }
+
