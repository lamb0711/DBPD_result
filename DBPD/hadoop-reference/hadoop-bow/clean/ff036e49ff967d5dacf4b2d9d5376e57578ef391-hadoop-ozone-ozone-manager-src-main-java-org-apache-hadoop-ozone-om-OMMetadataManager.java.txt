HDDS-357. Use DBStore and TableStore for OzoneManager non-background service.
Contributed by Nandakumar.

-import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;
+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;
-import org.apache.hadoop.utils.BatchOperation;
-import org.apache.hadoop.utils.MetadataStore;
+import org.apache.hadoop.utils.db.DBStore;
+import org.apache.hadoop.utils.db.Table;
-  void stop() throws IOException;
+  void stop() throws Exception;
+   *
-  MetadataStore getStore();
+  DBStore getStore();
+   *
+   *
-   * Returns the value associated with this key.
-   * @param key - key
-   * @return value
-   */
-  byte[] get(byte[] key) throws IOException;
-
-  /**
-   * Puts a Key into Metadata DB.
-   * @param key   - key
-   * @param value - value
-   */
-  void put(byte[] key, byte[] value) throws IOException;
-
-  /**
-   * Deletes a Key from Metadata DB.
-   * @param key   - key
-   */
-  void delete(byte[] key) throws IOException;
-
-  /**
-   * Atomic write a batch of operations.
-   * @param batch
-   * @throws IOException
-   */
-  void writeBatch(BatchOperation batch) throws IOException;
-
-  /**
+   *
+   *
+   *
+   *
-  byte[] getDBKeyBytes(String volume, String bucket, String key);
+  byte[] getOzoneKeyBytes(String volume, String bucket, String key);
-   * Returns the DB key name of a deleted key in OM metadata store.
-   * The name for a deleted key has prefix #deleting# followed by
-   * the actual key name.
-   * @param keyName - key name
-   * @return bytes of DB key.
-   */
-  byte[] getDeletedKeyName(byte[] keyName);
-
-  /**
-   * Returns the DB key name of a open key in OM metadata store.
-   * Should be #open# prefix followed by actual key name.
-   * @param keyName - key name
+   * Returns the DB key name of a open key in OM metadata store. Should be
+   * #open# prefix followed by actual key name.
+   *
+   * @param volume - volume name
+   * @param bucket - bucket name
+   * @param key - key name
-  byte[] getOpenKeyNameBytes(String keyName, int id);
+  byte[] getOpenKeyBytes(String volume, String bucket, String key, long id);
-   * Returns the full name of a key given volume name, bucket name and key name.
-   * Generally done by padding certain delimiters.
+   * Given a volume, check if it is empty, i.e there are no buckets inside it.
-   * @param volumeName - volume name
-   * @param bucketName - bucket name
-   * @param keyName - key name
-   * @return the full key name.
-   */
-  String getKeyWithDBPrefix(String volumeName, String bucketName,
-      String keyName);
-
-  /**
-   * Given a volume, check if it is empty,
-   * i.e there are no buckets inside it.
-   * Given a volume/bucket, check if it is empty,
-   * i.e there are no keys inside it.
+   * Given a volume/bucket, check if it is empty, i.e there are no keys inside
+   * it.
+   *
-   * @param  bucket - Bucket name
+   * @param bucket - Bucket name
-   * Returns a list of buckets represented by {@link OmBucketInfo}
-   * in the given volume.
+   * Returns a list of buckets represented by {@link OmBucketInfo} in the given
+   * volume.
-   * @param volumeName
-   *   the name of the volume. This argument is required,
-   *   this method returns buckets in this given volume.
-   * @param startBucket
-   *   the start bucket name. Only the buckets whose name is
-   *   after this value will be included in the result.
-   *   This key is excluded from the result.
-   * @param bucketPrefix
-   *   bucket name prefix. Only the buckets whose name has
-   *   this prefix will be included in the result.
-   * @param maxNumOfBuckets
-   *   the maximum number of buckets to return. It ensures
-   *   the size of the result will not exceed this limit.
+   * @param volumeName the name of the volume. This argument is required, this
+   * method returns buckets in this given volume.
+   * @param startBucket the start bucket name. Only the buckets whose name is
+   * after this value will be included in the result. This key is excluded from
+   * the result.
+   * @param bucketPrefix bucket name prefix. Only the buckets whose name has
+   * this prefix will be included in the result.
+   * @param maxNumOfBuckets the maximum number of buckets to return. It ensures
+   * the size of the result will not exceed this limit.
-                                 String bucketPrefix, int maxNumOfBuckets) throws IOException;
+      String bucketPrefix, int maxNumOfBuckets)
+      throws IOException;
-   * Returns a list of keys represented by {@link OmKeyInfo}
-   * in the given bucket.
+   * Returns a list of keys represented by {@link OmKeyInfo} in the given
+   * bucket.
-   * @param volumeName
-   *   the name of the volume.
-   * @param bucketName
-   *   the name of the bucket.
-   * @param startKey
-   *   the start key name, only the keys whose name is
-   *   after this value will be included in the result.
-   *   This key is excluded from the result.
-   * @param keyPrefix
-   *   key name prefix, only the keys whose name has
-   *   this prefix will be included in the result.
-   * @param maxKeys
-   *   the maximum number of keys to return. It ensures
-   *   the size of the result will not exceed this limit.
+   * @param volumeName the name of the volume.
+   * @param bucketName the name of the bucket.
+   * @param startKey the start key name, only the keys whose name is after this
+   * value will be included in the result. This key is excluded from the
+   * result.
+   * @param keyPrefix key name prefix, only the keys whose name has this prefix
+   * will be included in the result.
+   * @param maxKeys the maximum number of keys to return. It ensures the size of
+   * the result will not exceed this limit.
-                           String bucketName, String startKey, String keyPrefix, int maxKeys)
+      String bucketName, String startKey, String keyPrefix, int maxKeys)
-   * Returns a list of volumes owned by a given user; if user is null,
-   * returns all volumes.
+   * Returns a list of volumes owned by a given user; if user is null, returns
+   * all volumes.
-   * @param userName
-   *   volume owner
-   * @param prefix
-   *   the volume prefix used to filter the listing result.
-   * @param startKey
-   *   the start volume name determines where to start listing from,
-   *   this key is excluded from the result.
-   * @param maxKeys
-   *   the maximum number of volumes to return.
+   * @param userName volume owner
+   * @param prefix the volume prefix used to filter the listing result.
+   * @param startKey the start volume name determines where to start listing
+   * from, this key is excluded from the result.
+   * @param maxKeys the maximum number of volumes to return.
-                                 String startKey, int maxKeys) throws IOException;
+      String startKey, int maxKeys) throws IOException;
-   * Each entry is a {@link BlockGroup}, which contains the info about the
-   * key name and all its associated block IDs. A pending deletion key is
-   * stored with #deleting# prefix in OM DB.
+   * Each entry is a {@link BlockGroup}, which contains the info about the key
+   * name and all its associated block IDs. A pending deletion key is stored
+   * with #deleting# prefix in OM DB.
+
+  /**
+   * Returns the user Table.
+   *
+   * @return UserTable.
+   */
+  Table getUserTable();
+
+  /**
+   * Returns the Volume Table.
+   *
+   * @return VolumeTable.
+   */
+  Table getVolumeTable();
+
+  /**
+   * Returns the BucketTable.
+   *
+   * @return BucketTable.
+   */
+  Table getBucketTable();
+
+  /**
+   * Returns the KeyTable.
+   *
+   * @return KeyTable.
+   */
+  Table getKeyTable();
+
+  /**
+   * Get Deleted Table.
+   *
+   * @return Deleted Table.
+   */
+  Table getDeletedTable();
+
+  /**
+   * Gets the OpenKeyTable.
+   *
+   * @return Table.
+   */
+  Table getOpenKeyTable();
+
