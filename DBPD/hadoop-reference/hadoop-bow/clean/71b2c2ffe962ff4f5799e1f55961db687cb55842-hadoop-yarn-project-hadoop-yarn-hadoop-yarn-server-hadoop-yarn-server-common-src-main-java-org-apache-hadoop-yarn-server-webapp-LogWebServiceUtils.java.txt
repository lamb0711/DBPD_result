YARN-10101. Support listing of aggregated logs for containers belonging to an application attempt. Contributed by Adam Antal

-import org.apache.hadoop.yarn.logaggregation.ContainerLogMeta;
-import org.apache.hadoop.yarn.server.webapp.dao.ContainerLogsInfo;
-import org.apache.hadoop.yarn.webapp.NotFoundException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-import javax.ws.rs.core.GenericEntity;
-import java.util.ArrayList;
-import java.util.List;
+  private static final Logger LOG =
+      LoggerFactory.getLogger(LogWebServiceUtils.class);
-  public static Response getContainerLogMeta(
-      LogAggregationFileControllerFactory factory, ApplicationId appId,
-      String appOwner, final String nodeId, final String containerIdStr,
-      boolean emptyLocalContainerLogMeta) {
-    try {
-      ContainerLogsRequest request = new ContainerLogsRequest();
-      request.setAppId(appId);
-      request.setAppOwner(appOwner);
-      request.setContainerId(containerIdStr);
-      request.setNodeId(nodeId);
-      List<ContainerLogMeta> containerLogMeta =
-          factory.getFileControllerForRead(appId, appOwner)
-              .readAggregatedLogsMeta(request);
-      if (containerLogMeta.isEmpty()) {
-        throw new NotFoundException(
-            "Can not get log meta for container: " + containerIdStr);
-      }
-      List<ContainerLogsInfo> containersLogsInfo = new ArrayList<>();
-      for (ContainerLogMeta meta : containerLogMeta) {
-        ContainerLogsInfo logInfo =
-            new ContainerLogsInfo(meta, ContainerLogAggregationType.AGGREGATED);
-        containersLogsInfo.add(logInfo);
-      }
-      if (emptyLocalContainerLogMeta) {
-        ContainerLogMeta emptyMeta =
-            new ContainerLogMeta(containerIdStr, "N/A");
-        ContainerLogsInfo empty =
-            new ContainerLogsInfo(emptyMeta, ContainerLogAggregationType.LOCAL);
-        containersLogsInfo.add(empty);
-      }
-      GenericEntity<List<ContainerLogsInfo>> meta =
-          new GenericEntity<List<ContainerLogsInfo>>(containersLogsInfo) {
-          };
-      Response.ResponseBuilder response = Response.ok(meta);
-      // Sending the X-Content-Type-Options response header with the value
-      // nosniff will prevent Internet Explorer from MIME-sniffing a response
-      // away from the declared content-type.
-      response.header("X-Content-Type-Options", "nosniff");
-      return response.build();
-    } catch (Exception ex) {
-      throw new WebApplicationException(ex);
-    }
-  }
-
+      LOG.debug("Exception", ex);
