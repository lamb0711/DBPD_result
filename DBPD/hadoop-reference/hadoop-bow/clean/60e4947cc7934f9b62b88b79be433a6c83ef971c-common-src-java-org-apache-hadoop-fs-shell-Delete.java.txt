HADOOP-6385. dfs should support -rmdir (was HDFS-639). Contributed by Daryn Sharp.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1150987 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.shell.PathExceptions.PathIsNotDirectoryException;
+import org.apache.hadoop.fs.shell.PathExceptions.PathIsNotEmptyDirectoryException;
-class Delete extends FsCommand {
+class Delete {
+    factory.addClass(Rmdir.class, "-rmdir");
-    public static final String USAGE = "[-r|-R] [-skipTrash] <src> ...";
+    public static final String USAGE = "[-f] [-r|-R] [-skipTrash] <src> ...";
+      "  -f     If the file does not exist, do not display a diagnostic\n" +
+      "         message or modify the exit status to reflect an error.\n" +
+    private boolean ignoreFNF = false;
-          1, Integer.MAX_VALUE, "r", "R", "skipTrash");
+          1, Integer.MAX_VALUE, "f", "r", "R", "skipTrash");
+      ignoreFNF = cf.getOpt("f");
-    
+
+    @Override
+    protected void processNonexistentPath(PathData item) throws IOException {
+      if (!ignoreFNF) super.processNonexistentPath(item);
+    }
+
-  
+
+  /** remove only empty directories */
+  static class Rmdir extends FsCommand {
+    public static final String NAME = "rmdir";
+    public static final String USAGE =
+      "[--ignore-fail-on-non-empty] <dir> ...";
+    public static final String DESCRIPTION =
+      "Removes the directory entry specified by each directory argument,\n" +
+      "provided it is empty.\n"; 
+    
+    private boolean ignoreNonEmpty = false;
+    
+    protected void processOptions(LinkedList<String> args) throws IOException {
+      CommandFormat cf = new CommandFormat(
+          1, Integer.MAX_VALUE, "-ignore-fail-on-non-empty");
+      cf.parse(args);
+      ignoreNonEmpty = cf.getOpt("-ignore-fail-on-non-empty");
+    }
+
+    @Override
+    protected void processPath(PathData item) throws IOException {
+      if (!item.stat.isDirectory()) {
+        throw new PathIsNotDirectoryException(item.toString());
+      }      
+      if (item.fs.listStatus(item.path).length == 0) {
+        if (!item.fs.delete(item.path, false)) {
+          throw new PathIOException(item.toString());
+        }
+      } else if (!ignoreNonEmpty) {
+        throw new PathIsNotEmptyDirectoryException(item.toString());
+      }
+    }
+  }
+
