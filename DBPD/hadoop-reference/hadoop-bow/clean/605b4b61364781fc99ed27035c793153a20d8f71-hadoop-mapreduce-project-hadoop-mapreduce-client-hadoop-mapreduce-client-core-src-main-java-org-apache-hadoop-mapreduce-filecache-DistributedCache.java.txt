MAPREDUCE-6719. The list of -libjars archives should be replaced with a wildcard in the distributed cache to reduce the application footprint in the state store (Daniel Templeton via sjlee)

+ * @see org.apache.hadoop.mapreduce.Job
+  public static final String WILDCARD = "*";
+   * @see Job#setCacheArchives(URI[])
+   * @see Job#setCacheFiles(URI[])
+   * @see JobContext#getCacheArchives()
+   * @see JobContext#getCacheFiles()
+   * @see JobContext#getLocalCacheArchives()
+   * @see JobContext#getLocalCacheFiles()
+   * @see JobContext#getArchiveTimestamps()
+   * @see JobContext#getFileTimestamps()
+   * @see Job#addCacheArchive(URI)
-   * Add a file to be localized to the conf.  Intended
-   * to be used by user code.
+   * Add a file to be localized to the conf.  The localized file will be
+   * downloaded to the execution node(s), and a link will created to the
+   * file from the job's working directory. If the last part of URI's path name
+   * is "*", then the entire parent directory will be localized and links
+   * will be created from the job's working directory to each file in the
+   * parent directory.
+   *
+   * The access permissions of the file will determine whether the localized
+   * file will be shared across jobs.  If the file is not readable by other or
+   * if any of its parent directories is not executable by other, then the
+   * file will not be shared.  In the case of a path that ends in "/*",
+   * sharing of the localized files will be determined solely from the
+   * access permissions of the parent directories.  The access permissions of
+   * the individual files will be ignored.
+   *
+   * Intended to be used by user code.
+   *
+   * @see Job#addCacheFile(URI)
-   * Add an file path to the current set of classpath entries It adds the file
-   * to cache as well.  Intended to be used by user code.
+   * Add a file path to the current set of classpath entries.  The file will
+   * also be added to the cache.  Intended to be used by user code.
+   * @see #addCacheFile(URI, Configuration)
+   * @see Job#addFileToClassPath(Path)
-   * Add a file path to the current set of classpath entries. It adds the file
-   * to cache as well.  Intended to be used by user code.
+   * Add a file path to the current set of classpath entries. The file will
+   * also be added to the cache.  Intended to be used by user code.
+   * @see #addCacheFile(URI, Configuration)
-  public static void addFileToClassPath
-           (Path file, Configuration conf, FileSystem fs)
-        throws IOException {
+  public static void addFileToClassPath(Path file, Configuration conf,
+      FileSystem fs) {
+    addFileToClassPath(file, conf, fs, true);
+  }
+
+  /**
+   * Add a file path to the current set of classpath entries. The file will
+   * also be added to the cache if {@code addToCache} is true.  Used by
+   * internal DistributedCache code.
+   *
+   * @param file Path of the file to be added
+   * @param conf Configuration that contains the classpath setting
+   * @param fs FileSystem with respect to which {@code archivefile} should
+   *              be interpreted.
+   * @param addToCache whether the file should also be added to the cache list
+   * @see #addCacheFile(URI, Configuration)
+   */
+  public static void addFileToClassPath(Path file, Configuration conf,
+      FileSystem fs, boolean addToCache) {
-    URI uri = fs.makeQualified(file).toUri();
-    addCacheFile(uri, conf);
+
+    if (addToCache) {
+      URI uri = fs.makeQualified(file).toUri();
+      addCacheFile(uri, conf);
+    }
-   * @deprecated Use {@link JobContext#getFileClassPaths()} instead 
+   * @deprecated Use {@link JobContext#getFileClassPaths()} instead
+   * @see JobContext#getFileClassPaths()
+   * @see Job#addArchiveToClassPath(Path)
+   * @see JobContext#getArchiveClassPaths()
