YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He

- * One or more components of the application. If the application is HBase say,
+ * One or more components of the service. If the service is HBase say,
- * application is a complex business webapp then a component can be other
- * applications say Kafka or Storm. Thereby it opens up the support for complex
- * and nested applications.
+ * service is a complex business webapp then a component can be other
+ * services say Kafka or Storm. Thereby it opens up the support for complex
+ * and nested services.
-@ApiModel(description = "One or more components of the application. If the application is HBase say, then the component can be a simple role like master or regionserver. If the application is a complex business webapp then a component can be other applications say Kafka or Storm. Thereby it opens up the support for complex and nested applications.")
+@ApiModel(description = "One or more components of the service. If the service is HBase say, then the component can be a simple role like master or regionserver. If the service is a complex business webapp then a component can be other services say Kafka or Storm. Thereby it opens up the support for complex and nested services.")
-   * Name of the application component (mandatory).
+   * Name of the service component (mandatory).
-  @ApiModelProperty(example = "null", required = true, value = "Name of the application component (mandatory).")
+  @ApiModelProperty(example = "null", required = true, value = "Name of the service component (mandatory).")
-   * An array of application components which should be in READY state (as
+   * An array of service components which should be in READY state (as
-   * dependencies across all components of an application should be represented
+   * dependencies across all components of a service should be represented
-  @ApiModelProperty(example = "null", value = "An array of application components which should be in READY state (as defined by readiness check), before this component can be started. The dependencies across all components of an application should be represented as a DAG.")
+  @ApiModelProperty(example = "null", value = "An array of service components which should be in READY state (as defined by readiness check), before this component can be started. The dependencies across all components of an service should be represented as a DAG.")
-   * Readiness check for this app-component.
+   * Readiness check for this component.
-  @ApiModelProperty(example = "null", value = "Readiness check for this app-component.")
+  @ApiModelProperty(example = "null", value = "Readiness check for this component.")
-   * Artifact of the component (optional). If not specified, the application
+   * Artifact of the component (optional). If not specified, the service
-  @ApiModelProperty(example = "null", value = "Artifact of the component (optional). If not specified, the application level global artifact takes effect.")
+  @ApiModelProperty(example = "null", value = "Artifact of the component (optional). If not specified, the service level global artifact takes effect.")
-   * Resource of this component (optional). If not specified, the application
+   * Resource of this component (optional). If not specified, the service
-  @ApiModelProperty(example = "null", value = "Resource of this component (optional). If not specified, the application level global resource takes effect.")
+  @ApiModelProperty(example = "null", value = "Resource of this component (optional). If not specified, the service level global resource takes effect.")
-   * Number of containers for this app-component (optional). If not specified,
-   * the application level global number_of_containers takes effect.
+   * Number of containers for this component (optional). If not specified,
+   * the service level global number_of_containers takes effect.
-  @ApiModelProperty(example = "null", value = "Number of containers for this app-component (optional). If not specified, the application level global number_of_containers takes effect.")
+  @ApiModelProperty(example = "null", value = "Number of containers for this component (optional). If not specified, the service level global number_of_containers takes effect.")
-  @ApiModelProperty(example = "null", value = "Containers of a started component. Specifying a value for this attribute for the POST payload raises a validation error. This blob is available only in the GET response of a started application.")
+  @ApiModelProperty(example = "null", value = "Containers of a started component. Specifying a value for this attribute for the POST payload raises a validation error. This blob is available only in the GET response of a started service.")
-   * component (optional). If not specified, the app level placement_policy
+   * component (optional). If not specified, the service level placement_policy
-  @ApiModelProperty(example = "null", value = "Advanced scheduling and placement policies for all containers of this component (optional). If not specified, the app level placement_policy takes effect. Refer to the description at the global level for more details.")
+  @ApiModelProperty(example = "null", value = "Advanced scheduling and placement policies for all containers of this component (optional). If not specified, the service level placement_policy takes effect. Refer to the description at the global level for more details.")
-   * Config properties for this app-component.
+   * Config properties for this component.
-  @ApiModelProperty(example = "null", value = "Config properties for this app-component.")
+  @ApiModelProperty(example = "null", value = "Config properties for this component.")
-   * A list of quicklink keys defined at the application level, and to be
+   * A list of quicklink keys defined at the service level, and to be
-  @ApiModelProperty(example = "null", value = "A list of quicklink keys defined at the application level, and to be resolved by this component.")
+  @ApiModelProperty(example = "null", value = "A list of quicklink keys defined at the service level, and to be resolved by this component.")
