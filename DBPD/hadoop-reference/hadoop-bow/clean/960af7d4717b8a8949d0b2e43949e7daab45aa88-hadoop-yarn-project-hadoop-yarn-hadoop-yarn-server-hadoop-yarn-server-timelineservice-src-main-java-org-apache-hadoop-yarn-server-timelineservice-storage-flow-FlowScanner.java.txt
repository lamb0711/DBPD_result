YARN-4409. Fix javadoc and checkstyle issues in timelineservice code (Varun Saxena via sjlee)

-  public boolean nextRaw(List<Cell> cells, int limit) throws IOException {
-    return nextInternal(cells, limit);
+  public boolean nextRaw(List<Cell> cells, int cellLimit) throws IOException {
+    return nextInternal(cells, cellLimit);
-  public boolean next(List<Cell> cells, int limit) throws IOException {
-    return nextInternal(cells, limit);
+  public boolean next(List<Cell> cells, int cellLimit) throws IOException {
+    return nextInternal(cells, cellLimit);
-   * @param limit
+   * @param cellLimit
-  private boolean nextInternal(List<Cell> cells, int limit) throws IOException {
+  private boolean nextInternal(List<Cell> cells, int cellLimit)
+      throws IOException {
-    while (((cell = peekAtNextCell(limit)) != null)
-        && (limit <= 0 || addedCnt < limit)) {
+    while (((cell = peekAtNextCell(cellLimit)) != null)
+        && (cellLimit <= 0 || addedCnt < cellLimit)) {
-        nextCell(limit);
+        nextCell(cellLimit);
-      nextCell(limit);
+      nextCell(cellLimit);
-   * resets the parameters to an intialized state for next loop iteration
+   * resets the parameters to an intialized state for next loop iteration.
-      if (alreadySeenAggDim.contains(aggDim)) {
-        // if this agg dimension has already been seen,
-        // since they show up in sorted order
-        // we drop the rest which are older
-        // in other words, this cell is older than previously seen cells
-        // for that agg dim
-      } else {
-        // not seen this agg dim, hence consider this cell in our working set
+
+      // If this agg dimension has already been seen, since they show up in
+      // sorted order, we drop the rest which are older. In other words, this
+      // cell is older than previously seen cells for that agg dim.
+      if (!alreadySeenAggDim.contains(aggDim)) {
+        // Not seen this agg dim, hence consider this cell in our working set
+   *
+   * @return true, if there are more cells to return, false otherwise.
-   * @param limit
+   * @param cellLimit
-   * @throws IOException
+   * @throws IOException if any problem is encountered while grabbing the next
+   *     cell.
-  public Cell nextCell(int limit) throws IOException {
-    Cell cell = peekAtNextCell(limit);
+  public Cell nextCell(int cellLimit) throws IOException {
+    Cell cell = peekAtNextCell(cellLimit);
-   * @param limit
+   * @param cellLimit
-   * @throws IOException
+   * @throws IOException if any problem is encountered while grabbing the next
+   *     cell.
-  public Cell peekAtNextCell(int limit) throws IOException {
+  public Cell peekAtNextCell(int cellLimit) throws IOException {
-      hasMore = flowRunScanner.next(availableCells, limit);
+      hasMore = flowRunScanner.next(availableCells, cellLimit);
