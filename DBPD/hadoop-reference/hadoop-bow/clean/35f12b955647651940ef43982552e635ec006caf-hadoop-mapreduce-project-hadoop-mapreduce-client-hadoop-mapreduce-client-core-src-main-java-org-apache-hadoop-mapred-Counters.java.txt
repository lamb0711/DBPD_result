MAPREDUCE-3697. Support binary compatibility for Counters after MAPREDUCE-901.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241319 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Iterator;
+import org.apache.commons.collections.IteratorUtils;
+import org.apache.hadoop.mapreduce.util.CountersStrings;
+
+import com.google.common.collect.Iterators;
-
+  
+  public static int MAX_COUNTER_LIMIT = Limits.COUNTERS_MAX;
+  
+  public synchronized Group getGroup(String groupName) {
+    return super.getGroup(groupName);
+  }
+
+  @SuppressWarnings("unchecked")
+  public synchronized Collection<String> getGroupNames() {
+    return IteratorUtils.toList(super.getGroupNames().iterator());
+  }
+
+  public synchronized String makeCompactString() {
+    return CountersStrings.toEscapedCompactString(this);
+  }
+  
-  public interface Counter extends org.apache.hadoop.mapreduce.Counter {
+  public static class Counter implements org.apache.hadoop.mapreduce.Counter {
+    org.apache.hadoop.mapreduce.Counter realCounter;
+
+    Counter(org.apache.hadoop.mapreduce.Counter counter) {
+      this.realCounter = counter;
+    }
+
+    public Counter() {
+      this(new GenericCounter());
+    }
+
+    @SuppressWarnings("deprecation")
+    @Override
+    public void setDisplayName(String displayName) {
+      realCounter.setDisplayName(displayName);
+    }
+
+    @Override
+    public String getName() {
+      return realCounter.getName();
+    }
+
+    @Override
+    public String getDisplayName() {
+      return realCounter.getDisplayName();
+    }
+
+    @Override
+    public long getValue() {
+      return realCounter.getValue();
+    }
+
+    @Override
+    public void setValue(long value) {
+      realCounter.setValue(value);
+    }
+
+    @Override
+    public void increment(long incr) {
+      realCounter.increment(incr);
+    }
+
+    @Override
+    public void write(DataOutput out) throws IOException {
+      realCounter.write(out);
+    }
+
+    @Override
+    public void readFields(DataInput in) throws IOException {
+      realCounter.readFields(in);
+    }
-    String makeEscapedCompactString();
+    public String makeEscapedCompactString() {
+      return toEscapedCompactString(realCounter);
+    }
-    boolean contentEquals(Counter counter);
+    public boolean contentEquals(Counter counter) {
+      return realCounter.equals(counter.getUnderlyingCounter());
+    }
-    long getCounter();
-  }
-
-  static class OldCounterImpl extends GenericCounter implements Counter {
-
-    OldCounterImpl() {
-    }
-
-    OldCounterImpl(String name, String displayName, long value) {
-      super(name, displayName, value);
-    }
-
-    @Override
-    public synchronized String makeEscapedCompactString() {
-      return toEscapedCompactString(this);
-    }
-
-    @Override @Deprecated
-    public boolean contentEquals(Counter counter) {
-      return equals(counter);
-    }
-
-    @Override
-      return getValue();
+      return realCounter.getValue();
+    }
+
+    @Override
+    public org.apache.hadoop.mapreduce.Counter getUnderlyingCounter() {
+      return realCounter;
+    }
+    
+    @Override
+    public synchronized boolean equals(Object genericRight) {
+      if (genericRight instanceof Counter) {
+        synchronized (genericRight) {
+          Counter right = (Counter) genericRight;
+          return getName().equals(right.getName()) &&
+                 getDisplayName().equals(right.getDisplayName()) &&
+                 getValue() == right.getValue();
+        }
+      }
+      return false;
+    }
+    
+    @Override
+    public int hashCode() {
+      return realCounter.hashCode();
+
-  public static interface Group extends CounterGroupBase<Counter> {
-
+  public static class Group implements CounterGroupBase<Counter> {
+    private CounterGroupBase<Counter> realGroup;
+    
+    Group(GenericGroup group) {
+      this.realGroup = group;
+    }
+    Group(FSGroupImpl group) {
+      this.realGroup = group;
+    }
+    
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    Group(FrameworkGroupImpl group) {
+      this.realGroup = group;
+    }
+    
-    long getCounter(String counterName);
+    public long getCounter(String counterName)  {
+      return getCounterValue(realGroup, counterName);
+    }
-    String makeEscapedCompactString();
+    public String makeEscapedCompactString() {
+      return toEscapedCompactString(realGroup);
+    }
-    Counter getCounter(int id, String name);
+    public Counter getCounter(int id, String name) {
+      return findCounter(name);
+    }
-    Counter getCounterForName(String name);
+    public Counter getCounterForName(String name) {
+      return findCounter(name);
+    }
+
+    @Override
+    public void write(DataOutput out) throws IOException {
+     realGroup.write(out); 
+    }
+
+    @Override
+    public void readFields(DataInput in) throws IOException {
+      realGroup.readFields(in);
+    }
+
+    @Override
+    public Iterator<Counter> iterator() {
+      return realGroup.iterator();
+    }
+
+    @Override
+    public String getName() {
+      return realGroup.getName();
+    }
+
+    @Override
+    public String getDisplayName() {
+      return realGroup.getDisplayName();
+    }
+
+    @Override
+    public void setDisplayName(String displayName) {
+      realGroup.setDisplayName(displayName);
+    }
+
+    @Override
+    public void addCounter(Counter counter) {
+      realGroup.addCounter(counter);
+    }
+
+    @Override
+    public Counter addCounter(String name, String displayName, long value) {
+      return realGroup.addCounter(name, displayName, value);
+    }
+
+    @Override
+    public Counter findCounter(String counterName, String displayName) {
+      return realGroup.findCounter(counterName, displayName);
+    }
+
+    @Override
+    public Counter findCounter(String counterName, boolean create) {
+      return realGroup.findCounter(counterName, create);
+    }
+
+    @Override
+    public Counter findCounter(String counterName) {
+      return realGroup.findCounter(counterName);
+    }
+
+    @Override
+    public int size() {
+      return realGroup.size();
+    }
+
+    @Override
+    public void incrAllCounters(CounterGroupBase<Counter> rightGroup) {
+      realGroup.incrAllCounters(rightGroup);
+    }
+    
+    @Override
+    public CounterGroupBase<Counter> getUnderlyingGroup() {
+      return realGroup;
+    }
+
+    @Override
+    public synchronized boolean equals(Object genericRight) {
+      if (genericRight instanceof CounterGroupBase<?>) {
+        @SuppressWarnings("unchecked")
+        CounterGroupBase<Counter> right = ((CounterGroupBase<Counter>) 
+        genericRight).getUnderlyingGroup();
+        return Iterators.elementsEqual(iterator(), right.iterator());
+      }
+      return false;
+    }
+
+    @Override
+    public int hashCode() {
+      return realGroup.hashCode();
+    }
-  static long getCounterValue(Group group, String counterName) {
+  static long getCounterValue(CounterGroupBase<Counter> group, String counterName) {
-  private static class GenericGroup extends AbstractCounterGroup<Counter>
-                                    implements Group {
+  private static class GenericGroup extends AbstractCounterGroup<Counter> {
-    public long getCounter(String counterName) {
-      return getCounterValue(this, counterName);
-    }
-
-    @Override
-    public String makeEscapedCompactString() {
-      return toEscapedCompactString(this);
-    }
-
-    @Override
-    public Counter getCounter(int id, String name) {
-      return findCounter(name);
-    }
-
-    @Override
-    public Counter getCounterForName(String name) {
-      return findCounter(name);
-    }
-
-    @Override
-      return new OldCounterImpl(counterName, displayName, value);
+      return new Counter(new GenericCounter(counterName, displayName, value));
-      return new OldCounterImpl();
+      return new Counter();
+    }
+    
+    @Override
+    public CounterGroupBase<Counter> getUnderlyingGroup() {
+     return this;
-      extends FrameworkCounterGroup<T, Counter> implements Group {
+      extends FrameworkCounterGroup<T, Counter> {
-    // Mix the framework counter implmementation into the Counter interface
-    class FrameworkCounterImpl extends FrameworkCounter implements Counter {
-
+    // Mix the framework counter implementation into the Counter interface
+    class FrameworkCounterImpl extends FrameworkCounter {
-      @Override
-      public String makeEscapedCompactString() {
-        return toEscapedCompactString(this);
-      }
-
-      @Override
-      public boolean contentEquals(Counter counter) {
-        return equals(counter);
-      }
-
-      @Override
-      public long getCounter() {
-        return getValue();
-      }
-    public long getCounter(String counterName) {
-      return getCounterValue(this, counterName);
-    }
-
-    @Override
-    public String makeEscapedCompactString() {
-      return toEscapedCompactString(this);
-    }
-
-    @Override @Deprecated
-    public Counter getCounter(int id, String name) {
-      return findCounter(name);
-    }
-
-    @Override
-    public Counter getCounterForName(String name) {
-      return findCounter(name);
-    }
-
-    @Override
-      return new FrameworkCounterImpl(key);
+      return new Counter(new FrameworkCounterImpl(key));
+    }
+
+    @Override
+    public CounterGroupBase<Counter> getUnderlyingGroup() {
+      return this;
-  private static class FSGroupImpl extends FileSystemCounterGroup<Counter>
-                                   implements Group {
+  private static class FSGroupImpl extends FileSystemCounterGroup<Counter> {
-    private class FSCounterImpl extends FSCounter implements Counter {
+    private class FSCounterImpl extends FSCounter {
-      @Override
-      public String makeEscapedCompactString() {
-        return toEscapedCompactString(this);
-      }
-
-      @Override @Deprecated
-      public boolean contentEquals(Counter counter) {
-        throw new UnsupportedOperationException("Not supported yet.");
-      }
-
-      @Override
-      public long getCounter() {
-        return getValue();
-      }
-
-      return new FSCounterImpl(scheme, key);
+      return new Counter(new FSCounterImpl(scheme, key));
-    public long getCounter(String counterName) {
-      return getCounterValue(this, counterName);
+    public CounterGroupBase<Counter> getUnderlyingGroup() {
+      return this;
-
-    @Override
-    public String makeEscapedCompactString() {
-      return toEscapedCompactString(this);
-    }
-
-    @Override @Deprecated
-    public Counter getCounter(int id, String name) {
-      return findCounter(name);
-    }
-
-    @Override
-    public Counter getCounterForName(String name) {
-      return findCounter(name);
-    }
-
-          return new FrameworkGroupImpl<T>(cls); // impl in this package
+          return new Group(new FrameworkGroupImpl<T>(cls)); // impl in this package
-      return new GenericGroup(name, displayName, limits);
+      return new Group(new GenericGroup(name, displayName, limits));
-      return new FSGroupImpl();
+      return new Group(new FSGroupImpl());
