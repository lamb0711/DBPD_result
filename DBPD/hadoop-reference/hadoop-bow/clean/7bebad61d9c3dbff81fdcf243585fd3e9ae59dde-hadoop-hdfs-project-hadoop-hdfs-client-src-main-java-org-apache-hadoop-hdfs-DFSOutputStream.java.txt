HDFS-14706. Checksums are not checked if block meta file is less than 7 bytes. Contributed by Stephen O'Donnell.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

+import java.util.Random;
+  private boolean leaseRecovered = false;
+  private boolean exceptionInClose = false; //for unit test
+  @VisibleForTesting
+  public void setExceptionInClose(boolean enable) {
+    exceptionInClose = enable;
+  }
+
+  private class EmulateExceptionInClose {
+    private Random rand = null;
+    private int kickedNum;
+
+    EmulateExceptionInClose(int callNum) {
+      if (exceptionInClose) {
+        rand = new Random();
+      }
+      kickedNum = callNum;
+    }
+
+    void kickRandomException() throws IOException {
+      if (exceptionInClose) {
+        if (kickedNum > 0) {
+          if (rand.nextInt(kickedNum) == 1) {
+            throw new IOException("Emulated random IOException in close");
+          }
+        }
+      }
+    }
+
+    void kickException() throws IOException {
+      if (exceptionInClose) {
+        throw new IOException("Emulated IOException in close");
+      }
+    }
+  }
+
+    boolean recoverOnCloseException = dfsClient.getConfiguration().getBoolean(
+        HdfsClientConfigKeys.Write.RECOVER_ON_CLOSE_EXCEPTION_KEY,
+        HdfsClientConfigKeys.Write.RECOVER_ON_CLOSE_EXCEPTION_DEFAULT);
+      if (recoverOnCloseException && !leaseRecovered) {
+        try {
+          dfsClient.endFileLease(fileId);
+          dfsClient.recoverLease(src);
+          leaseRecovered = true;
+        } catch (Exception e) {
+          LOG.warn("Fail to recover lease for {}", src, e);
+        }
+      }
+
+    EmulateExceptionInClose eei = new EmulateExceptionInClose(5);
-      flushBuffer();       // flush from all upper layers
+      flushBuffer(); // flush from all upper layers
+      // for test
+      eei.kickRandomException();
-        flushInternal();             // flush all data to Datanodes
+        flushInternal(); // flush all data to Datanodes
+      // for test
+      eei.kickRandomException();
+      // for test
+      eei.kickException();
+    } catch (IOException ioe) {
+      if (recoverOnCloseException) {
+        try {
+          dfsClient.endFileLease(fileId);
+          dfsClient.recoverLease(src);
+          leaseRecovered = true;
+        } catch (Exception e) {
+          // Ignore exception rendered by recoverLease. Throw original
+          // exception
+        }
+      }
+      throw ioe;
