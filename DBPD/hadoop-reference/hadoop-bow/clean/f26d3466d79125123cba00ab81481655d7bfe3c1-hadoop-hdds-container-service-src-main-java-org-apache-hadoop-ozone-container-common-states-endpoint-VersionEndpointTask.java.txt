Create Version File in Datanode. Contributed by Bharat Viswanadham.

+import com.google.common.base.Preconditions;
+import org.apache.commons.lang.StringUtils;
+import org.apache.hadoop.hdfs.server.datanode.StorageLocation;
+import org.apache.hadoop.ozone.OzoneConsts;
+import org.apache.hadoop.ozone.common.InconsistentStorageStateException;
+import org.apache.hadoop.ozone.common.Storage;
+import org.apache.hadoop.ozone.container.common.DataNodeLayoutVersion;
+import org.apache.hadoop.ozone.container.common.helpers.DatanodeVersionFile;
+import org.apache.hadoop.ozone.container.ozoneimpl.OzoneContainer;
+import org.apache.hadoop.util.Time;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.File;
+import java.util.List;
+import java.util.Properties;
+  private final OzoneContainer datanodeContainerManager;
+  static final Logger LOG =
+      LoggerFactory.getLogger(VersionEndpointTask.class);
-      Configuration conf) {
+                             Configuration conf, OzoneContainer container) {
+    this.datanodeContainerManager = container;
-    try{
+    try {
-      rpcEndPoint.setVersion(VersionResponse.getFromProtobuf(versionResponse));
+      VersionResponse response = VersionResponse.getFromProtobuf(
+          versionResponse);
+      String scmUuid = response.getValue(OzoneConsts.SCM_ID);
+      Preconditions.checkState(!StringUtils.isBlank(scmUuid),
+          "Invalid SCM UuiD in the response.");
-      EndpointStateMachine.EndPointStates nextState =
-          rpcEndPoint.getState().getNextState();
+      rpcEndPoint.setVersion(response);
+      LOG.debug("scmUuid is {}", scmUuid);
+
+      List<StorageLocation> locations = datanodeContainerManager.getLocations();
+
+      for (StorageLocation location : locations) {
+        String path = location.getUri().getPath();
+        File parentPath = new File(path + File.separator + Storage
+            .STORAGE_DIR_HDDS + File.separator + scmUuid + File.separator +
+            Storage.STORAGE_DIR_CURRENT);
+        File versionFile = DatanodeVersionFile.getVersionFile(location,
+            scmUuid);
+        if (!parentPath.exists() && !parentPath.mkdirs()) {
+          LOG.error("Directory doesn't exist and cannot be created. Path: {}",
+              parentPath.toString());
+          rpcEndPoint.setState(EndpointStateMachine.EndPointStates.SHUTDOWN);
+          throw new IllegalArgumentException("Directory doesn't exist and " +
+              "cannot be created. " + parentPath.toString());
+        } else {
+          if (versionFile.exists()) {
+            Properties properties = DatanodeVersionFile.readFrom(versionFile);
+            DatanodeVersionFile.verifyScmUuid(properties.getProperty(
+                OzoneConsts.SCM_ID), scmUuid);
+            DatanodeVersionFile.verifyCreationTime(properties.getProperty(
+                OzoneConsts.CTIME));
+            DatanodeVersionFile.verifyLayOutVersion(properties.getProperty(
+                OzoneConsts.LAYOUTVERSION));
+          } else {
+            DatanodeVersionFile dnVersionFile = new DatanodeVersionFile(scmUuid,
+                Time.now(), DataNodeLayoutVersion.getLatestVersion()
+                .getVersion());
+            dnVersionFile.createVersionFile(versionFile);
+          }
+        }
+      }
+      EndpointStateMachine.EndPointStates nextState = rpcEndPoint.getState().
+          getNextState();
+    } catch (InconsistentStorageStateException ex) {
+      throw ex;
