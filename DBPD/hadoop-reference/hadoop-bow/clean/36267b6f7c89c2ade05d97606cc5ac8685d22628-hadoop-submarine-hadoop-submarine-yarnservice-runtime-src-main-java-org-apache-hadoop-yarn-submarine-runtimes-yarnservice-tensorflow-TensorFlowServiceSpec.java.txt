SUBMARINE-52. [SUBMARINE-14] Generate Service spec + launch script for single-node PyTorch learning job. Contributed by Szilard Nemeth.

-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.yarn.service.api.records.Component;
-import org.apache.hadoop.yarn.service.api.records.KerberosPrincipal;
-import org.apache.hadoop.yarn.submarine.client.cli.param.Quicklink;
-import org.apache.hadoop.yarn.submarine.client.cli.param.RunJobParameters;
+import org.apache.hadoop.yarn.submarine.client.cli.param.runjob.RunJobParameters;
+import org.apache.hadoop.yarn.submarine.client.cli.param.runjob.TensorFlowRunJobParameters;
+import org.apache.hadoop.yarn.submarine.client.cli.runjob.Framework;
-import org.apache.hadoop.yarn.submarine.common.api.TaskType;
-import org.apache.hadoop.yarn.submarine.common.conf.SubmarineLogs;
-import org.apache.hadoop.yarn.submarine.common.fs.RemoteDirectoryManager;
+import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.AbstractServiceSpec;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.ServiceSpec;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.YarnServiceUtils;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.command.LaunchCommandFactory;
+import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.command.TensorFlowLaunchCommandFactory;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.component.TensorFlowWorkerComponent;
-import org.apache.hadoop.yarn.submarine.utils.KerberosPrincipalFactory;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import static org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.TensorFlowCommons.getDNSDomain;
-import static org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.TensorFlowCommons.getUserName;
-import static org.apache.hadoop.yarn.submarine.utils.DockerUtilities.getDockerArtifact;
-import static org.apache.hadoop.yarn.submarine.utils.EnvironmentUtilities.handleServiceEnvs;
-public class TensorFlowServiceSpec implements ServiceSpec {
+public class TensorFlowServiceSpec extends AbstractServiceSpec {
+  private final TensorFlowRunJobParameters tensorFlowParameters;
-  private final RemoteDirectoryManager remoteDirectoryManager;
-
-  private final RunJobParameters parameters;
-  private final Configuration yarnConfig;
-  private final FileSystemOperations fsOperations;
-  private final LaunchCommandFactory launchCommandFactory;
-  private final Localizer localizer;
-
-  public TensorFlowServiceSpec(RunJobParameters parameters,
+  public TensorFlowServiceSpec(TensorFlowRunJobParameters parameters,
-      LaunchCommandFactory launchCommandFactory, Localizer localizer) {
-    this.parameters = parameters;
-    this.remoteDirectoryManager = clientContext.getRemoteDirectoryManager();
-    this.yarnConfig = clientContext.getYarnConfig();
-    this.fsOperations = fsOperations;
-    this.launchCommandFactory = launchCommandFactory;
-    this.localizer = localizer;
+      TensorFlowLaunchCommandFactory launchCommandFactory,
+      Localizer localizer) {
+    super(parameters, clientContext, fsOperations, launchCommandFactory,
+        localizer);
+    this.tensorFlowParameters = parameters;
+    LOG.info("Creating TensorFlow service spec");
-    if (parameters.getNumWorkers() > 0) {
-      addWorkerComponents(serviceWrapper);
+    if (tensorFlowParameters.getNumWorkers() > 0) {
+      addWorkerComponents(serviceWrapper, Framework.TENSORFLOW);
-    if (parameters.getNumPS() > 0) {
+    if (tensorFlowParameters.getNumPS() > 0) {
-    if (parameters.isTensorboardEnabled()) {
+    if (tensorFlowParameters.isTensorboardEnabled()) {
-  private ServiceWrapper createServiceSpecWrapper() throws IOException {
-    Service serviceSpec = new Service();
-    serviceSpec.setName(parameters.getName());
-    serviceSpec.setVersion(String.valueOf(System.currentTimeMillis()));
-    serviceSpec.setArtifact(getDockerArtifact(parameters.getDockerImageName()));
-
-    KerberosPrincipal kerberosPrincipal = KerberosPrincipalFactory
-        .create(fsOperations, remoteDirectoryManager, parameters);
-    if (kerberosPrincipal != null) {
-      serviceSpec.setKerberosPrincipal(kerberosPrincipal);
-    }
-
-    handleServiceEnvs(serviceSpec, yarnConfig, parameters.getEnvars());
-    localizer.handleLocalizations(serviceSpec);
-    return new ServiceWrapper(serviceSpec);
-  }
-
-        remoteDirectoryManager, parameters, launchCommandFactory, yarnConfig);
+        remoteDirectoryManager, parameters,
+        (TensorFlowLaunchCommandFactory) launchCommandFactory, yarnConfig);
-  private static void addQuicklink(Service serviceSpec, String label,
-      String link) {
-    Map<String, String> quicklinks = serviceSpec.getQuicklinks();
-    if (quicklinks == null) {
-      quicklinks = new HashMap<>();
-      serviceSpec.setQuicklinks(quicklinks);
-    }
-
-    if (SubmarineLogs.isVerbose()) {
-      LOG.info("Added quicklink, " + label + "=" + link);
-    }
-
-    quicklinks.put(label, link);
-  }
-
-  private void handleQuicklinks(Service serviceSpec)
-      throws IOException {
-    List<Quicklink> quicklinks = parameters.getQuicklinks();
-    if (quicklinks != null && !quicklinks.isEmpty()) {
-      for (Quicklink ql : quicklinks) {
-        // Make sure it is a valid instance name
-        String instanceName = ql.getComponentInstanceName();
-        boolean found = false;
-
-        for (Component comp : serviceSpec.getComponents()) {
-          for (int i = 0; i < comp.getNumberOfContainers(); i++) {
-            String possibleInstanceName = comp.getName() + "-" + i;
-            if (possibleInstanceName.equals(instanceName)) {
-              found = true;
-              break;
-            }
-          }
-        }
-
-        if (!found) {
-          throw new IOException(
-              "Couldn't find a component instance = " + instanceName
-                  + " while adding quicklink");
-        }
-
-        String link = ql.getProtocol()
-            + YarnServiceUtils.getDNSName(serviceSpec.getName(), instanceName,
-                getUserName(), getDNSDomain(yarnConfig), ql.getPort());
-        addQuicklink(serviceSpec, ql.getLabel(), link);
-      }
-    }
-  }
-
-  // Handle worker and primary_worker.
-
-  private void addWorkerComponents(ServiceWrapper serviceWrapper)
-      throws IOException {
-    addWorkerComponent(serviceWrapper, parameters, TaskType.PRIMARY_WORKER);
-
-    if (parameters.getNumWorkers() > 1) {
-      addWorkerComponent(serviceWrapper, parameters, TaskType.WORKER);
-    }
-  }
-  private void addWorkerComponent(ServiceWrapper serviceWrapper,
-      RunJobParameters parameters, TaskType taskType) throws IOException {
-    serviceWrapper.addComponent(
-        new TensorFlowWorkerComponent(fsOperations, remoteDirectoryManager,
-        parameters, taskType, launchCommandFactory, yarnConfig));
-  }
-
-            launchCommandFactory, parameters, yarnConfig));
+            (TensorFlowLaunchCommandFactory) launchCommandFactory,
+            parameters, yarnConfig));
