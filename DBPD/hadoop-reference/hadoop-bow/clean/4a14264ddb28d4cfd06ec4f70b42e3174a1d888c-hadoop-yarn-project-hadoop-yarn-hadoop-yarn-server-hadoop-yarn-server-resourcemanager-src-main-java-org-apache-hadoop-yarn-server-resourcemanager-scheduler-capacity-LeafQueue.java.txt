YARN-398. Make it possible to specify hard locality constraints in resource requests for CapacityScheduler. Contributed by Arun C. Murthy.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489087 13f79535-47bb-0310-9956-ffa450edef68

+  private static final CSAssignment SKIP_ASSIGNMENT = new CSAssignment(true);
+  
+          // Did the application skip this node?
+          if (assignment.getSkipped()) {
+            // Don't count 'skipped nodes' as a scheduling opportunity!
+            application.subtractSchedulingOpportunity(priority);
+            continue;
+          }
+          
-    assigned = 
-        assignNodeLocalContainers(clusterResource, node, application, priority,
-            reservedContainer); 
-    if (Resources.greaterThan(resourceCalculator, clusterResource, 
-            assigned, Resources.none())) {
-      return new CSAssignment(assigned, NodeType.NODE_LOCAL);
+    ResourceRequest nodeLocalResourceRequest =
+        application.getResourceRequest(priority, node.getHostName());
+    if (nodeLocalResourceRequest != null) {
+      assigned = 
+          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, 
+              node, application, priority, reservedContainer); 
+      if (Resources.greaterThan(resourceCalculator, clusterResource, 
+          assigned, Resources.none())) {
+        return new CSAssignment(assigned, NodeType.NODE_LOCAL);
+      }
-    assigned = 
-        assignRackLocalContainers(clusterResource, node, application, priority, 
-            reservedContainer);
-    if (Resources.greaterThan(resourceCalculator, clusterResource, 
-            assigned, Resources.none())) {
-      return new CSAssignment(assigned, NodeType.RACK_LOCAL);
+    ResourceRequest rackLocalResourceRequest =
+        application.getResourceRequest(priority, node.getRackName());
+    if (rackLocalResourceRequest != null) {
+      if (!rackLocalResourceRequest.getRelaxLocality()) {
+        return SKIP_ASSIGNMENT;
+      }
+      
+      assigned = 
+          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, 
+              node, application, priority, reservedContainer);
+      if (Resources.greaterThan(resourceCalculator, clusterResource, 
+          assigned, Resources.none())) {
+        return new CSAssignment(assigned, NodeType.RACK_LOCAL);
+      }
-    return new CSAssignment(
-        assignOffSwitchContainers(clusterResource, node, application, 
-            priority, reservedContainer), 
-        NodeType.OFF_SWITCH);
+    ResourceRequest offSwitchResourceRequest =
+        application.getResourceRequest(priority, ResourceRequest.ANY);
+    if (offSwitchResourceRequest != null) {
+      if (!offSwitchResourceRequest.getRelaxLocality()) {
+        return SKIP_ASSIGNMENT;
+      }
+
+      return new CSAssignment(
+          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,
+              node, application, priority, reservedContainer), 
+              NodeType.OFF_SWITCH);
+    }
+    
+    return SKIP_ASSIGNMENT;
-  private Resource assignNodeLocalContainers(Resource clusterResource, 
+  private Resource assignNodeLocalContainers(
+      Resource clusterResource, ResourceRequest nodeLocalResourceRequest, 
-    ResourceRequest request = 
-        application.getResourceRequest(priority, node.getHostName());
-    if (request != null) {
-      if (canAssign(application, priority, node, NodeType.NODE_LOCAL, 
-          reservedContainer)) {
-        return assignContainer(clusterResource, node, application, priority, 
-            request, NodeType.NODE_LOCAL, reservedContainer);
-      }
+    if (canAssign(application, priority, node, NodeType.NODE_LOCAL, 
+        reservedContainer)) {
+      return assignContainer(clusterResource, node, application, priority, 
+          nodeLocalResourceRequest, NodeType.NODE_LOCAL, reservedContainer);
-  private Resource assignRackLocalContainers(Resource clusterResource,  
+  private Resource assignRackLocalContainers(
+      Resource clusterResource, ResourceRequest rackLocalResourceRequest,  
-    ResourceRequest request = 
-      application.getResourceRequest(priority, node.getRackName());
-    if (request != null) {
-      if (canAssign(application, priority, node, NodeType.RACK_LOCAL, 
-          reservedContainer)) {
-        return assignContainer(clusterResource, node, application, priority, request, 
-            NodeType.RACK_LOCAL, reservedContainer);
-      } 
+    if (canAssign(application, priority, node, NodeType.RACK_LOCAL, 
+        reservedContainer)) {
+      return assignContainer(clusterResource, node, application, priority, 
+          rackLocalResourceRequest, NodeType.RACK_LOCAL, reservedContainer);
+    
-  private Resource assignOffSwitchContainers(Resource clusterResource, FiCaSchedulerNode node, 
-      FiCaSchedulerApp application, Priority priority, 
+  private Resource assignOffSwitchContainers(
+      Resource clusterResource, ResourceRequest offSwitchResourceRequest,
+      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority, 
-    ResourceRequest request = 
-      application.getResourceRequest(priority, ResourceRequest.ANY);
-    if (request != null) {
-      if (canAssign(application, priority, node, NodeType.OFF_SWITCH, 
-          reservedContainer)) {
-        return assignContainer(clusterResource, node, application, priority, request, 
-            NodeType.OFF_SWITCH, reservedContainer);
-      }
+    if (canAssign(application, priority, node, NodeType.OFF_SWITCH, 
+        reservedContainer)) {
+      return assignContainer(clusterResource, node, application, priority, 
+          offSwitchResourceRequest, NodeType.OFF_SWITCH, reservedContainer);
+    
