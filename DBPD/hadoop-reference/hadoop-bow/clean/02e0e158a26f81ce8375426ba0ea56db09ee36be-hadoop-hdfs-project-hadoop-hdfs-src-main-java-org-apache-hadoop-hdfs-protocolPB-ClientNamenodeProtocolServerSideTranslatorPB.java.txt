HDFS-5158. Add command-line support for manipulating cache directives

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.EmptyPathError;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPathNameError;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPoolNameError;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.EmptyPathError;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.InvalidPathNameError;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.InvalidPoolNameError;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.PoolWritePermissionDeniedError;
-import org.apache.hadoop.hdfs.protocol.PathCacheDirective;
-import org.apache.hadoop.hdfs.protocol.PathCacheEntry;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.InvalidIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.NoSuchIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.RemovePermissionDeniedException;
+import org.apache.hadoop.hdfs.protocol.PathBasedCacheDirective;
+import org.apache.hadoop.hdfs.protocol.PathBasedCacheEntry;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.InvalidIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.NoSuchIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.RemovePermissionDeniedException;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathCacheDirectiveErrorProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathCacheDirectivesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathCacheDirectivesResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathBasedCacheDirectiveErrorProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathBasedCacheDirectivesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddPathBasedCacheDirectivesResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesElementProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathCacheEntriesResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesElementProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathCacheDirectiveProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.PathBasedCacheDirectiveProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathCacheEntriesResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathCacheEntryErrorProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheEntriesRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheEntriesResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheEntryErrorProto;
-import org.apache.hadoop.hdfs.server.namenode.UnsupportedActionException;
-  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,
-      AddPathCacheDirectivesRequestProto request) throws ServiceException {
+  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,
+      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {
-      ArrayList<PathCacheDirective> input =
-          new ArrayList<PathCacheDirective>(request.getElementsCount());
+      ArrayList<PathBasedCacheDirective> input =
+          new ArrayList<PathBasedCacheDirective>(request.getElementsCount());
-        PathCacheDirectiveProto proto = request.getElements(i);
-        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));
+        PathBasedCacheDirectiveProto proto = request.getElements(i);
+        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));
-      List<Fallible<PathCacheEntry>> output = server.addPathCacheDirectives(input);
-      AddPathCacheDirectivesResponseProto.Builder builder =
-         AddPathCacheDirectivesResponseProto.newBuilder();
+      List<Fallible<PathBasedCacheEntry>> output = server.addPathBasedCacheDirectives(input);
+      AddPathBasedCacheDirectivesResponseProto.Builder builder =
+         AddPathBasedCacheDirectivesResponseProto.newBuilder();
-          PathCacheEntry entry = output.get(idx).get();
+          PathBasedCacheEntry entry = output.get(idx).get();
-        } catch (EmptyPathError ioe) {
-          builder.addResults(AddPathCacheDirectiveErrorProto.
-              EMPTY_PATH_ERROR_VALUE);
-        } catch (InvalidPathNameError ioe) {
-          builder.addResults(AddPathCacheDirectiveErrorProto.
-              INVALID_PATH_NAME_ERROR_VALUE);
-        } catch (InvalidPoolNameError ioe) {
-          builder.addResults(AddPathCacheDirectiveErrorProto.
-              INVALID_POOL_NAME_ERROR_VALUE);
-          builder.addResults(AddPathCacheDirectiveErrorProto.
-              UNEXPECTED_ADD_ERROR_VALUE);
+          if (ioe.getCause() instanceof EmptyPathError) {
+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.
+                EMPTY_PATH_ERROR_VALUE);
+          } else if (ioe.getCause() instanceof InvalidPathNameError) {
+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.
+                INVALID_PATH_NAME_ERROR_VALUE);
+          } else if (ioe.getCause() instanceof InvalidPoolNameError) {
+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.
+                INVALID_POOL_NAME_ERROR_VALUE);
+          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {
+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.
+                ADD_PERMISSION_DENIED_ERROR_VALUE);
+          } else {
+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.
+                UNEXPECTED_ADD_ERROR_VALUE);
+          }
-  public RemovePathCacheEntriesResponseProto removePathCacheEntries(
-      RpcController controller, RemovePathCacheEntriesRequestProto request)
+  public RemovePathBasedCacheEntriesResponseProto removePathBasedCacheEntries(
+      RpcController controller, RemovePathBasedCacheEntriesRequestProto request)
-         server.removePathCacheEntries(request.getElementsList());
-      RemovePathCacheEntriesResponseProto.Builder builder =
-         RemovePathCacheEntriesResponseProto.newBuilder();
+         server.removePathBasedCacheEntries(request.getElementsList());
+      RemovePathBasedCacheEntriesResponseProto.Builder builder =
+         RemovePathBasedCacheEntriesResponseProto.newBuilder();
-          builder.addResults(RemovePathCacheEntryErrorProto.
+          builder.addResults(RemovePathBasedCacheEntryErrorProto.
-          builder.addResults(RemovePathCacheEntryErrorProto.
+          builder.addResults(RemovePathBasedCacheEntryErrorProto.
-          builder.addResults(RemovePathCacheEntryErrorProto.
+          builder.addResults(RemovePathBasedCacheEntryErrorProto.
-          builder.addResults(RemovePathCacheEntryErrorProto.
+          builder.addResults(RemovePathBasedCacheEntryErrorProto.
-  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,
-      ListPathCacheEntriesRequestProto request) throws ServiceException {
+  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(
+      RpcController controller, ListPathBasedCacheEntriesRequestProto request)
+          throws ServiceException {
-      RemoteIterator<PathCacheEntry> iter =
-         server.listPathCacheEntries(request.getPrevId(), request.getPool());
-      ListPathCacheEntriesResponseProto.Builder builder =
-          ListPathCacheEntriesResponseProto.newBuilder();
+      RemoteIterator<PathBasedCacheEntry> iter =
+         server.listPathBasedCacheEntries(request.getPrevId(),
+             request.hasPool() ? request.getPool() : null,
+             request.hasPath() ? request.getPath() : null);
+      ListPathBasedCacheEntriesResponseProto.Builder builder =
+          ListPathBasedCacheEntriesResponseProto.newBuilder();
+      long prevId = 0;
-        PathCacheEntry entry = iter.next();
+        PathBasedCacheEntry entry = iter.next();
-            ListPathCacheEntriesElementProto.newBuilder().
+            ListPathBasedCacheEntriesElementProto.newBuilder().
+        prevId = entry.getEntryId();
+      }
+      if (prevId == 0) {
+        builder.setHasMore(false);
+      } else {
+        iter = server.listPathBasedCacheEntries(prevId, request.getPool(),
+            request.getPath());
+        builder.setHasMore(iter.hasNext());
+      String prevPoolName = null;
+        prevPoolName = pool.getPoolName();
+      }
+      // fill in hasNext
+      if (prevPoolName == null) {
+        responseBuilder.setHasMore(false);
+      } else {
+        iter = server.listCachePools(prevPoolName);
+        responseBuilder.setHasMore(iter.hasNext());
