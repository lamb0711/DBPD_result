HDDS-82. Merge ContainerData and ContainerStatus classes. Contributed by Bharat Viswanadham.

-import org.apache.hadoop.fs.StorageType;
+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos
+    .ContainerLifeCycleState;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.StorageTypeProto;
-  private final ConcurrentSkipListMap<Long, ContainerStatus>
+  private final ConcurrentSkipListMap<Long, ContainerData>
-        containerMap.put(containerID, new ContainerStatus(null));
+        ContainerData cData = new ContainerData(containerID, conf,
+            ContainerLifeCycleState.INVALID);
+        containerMap.put(containerID, cData);
-      ContainerStatus containerStatus = new ContainerStatus(containerData);
-      containerStatus.incrPendingDeletionBlocks(underDeletionBlocks.size());
+      containerData.incrPendingDeletionBlocks(underDeletionBlocks.size());
-      containerStatus.setBytesUsed(bytesUsed);
+      containerData.setBytesUsed(bytesUsed);
-      containerMap.put(containerID, containerStatus);
+      containerMap.put(containerID, containerData);
-      containerMap.put(containerID, new ContainerStatus(null));
+      ContainerData cData = new ContainerData(containerID, conf,
+          ContainerLifeCycleState.INVALID);
+      containerMap.put(containerID, cData);
-      ContainerStatus status = containerMap.get(containerID);
-      if (status == null) {
+      ContainerData containerData = containerMap.get(containerID);
+      if (containerData == null) {
-      if (status.getContainer() == null) {
+
+      if(!containerData.isValid()) {
-      ContainerUtils.removeContainer(status.getContainer(), conf, forceDelete);
+      ContainerUtils.removeContainer(containerData, conf, forceDelete);
-      ConcurrentNavigableMap<Long, ContainerStatus> map;
+      ConcurrentNavigableMap<Long, ContainerData> map;
-      for (ContainerStatus entry : map.values()) {
+      for (ContainerData entry : map.values()) {
-          data.add(entry.getContainer());
+          data.add(entry);
-    ContainerData cData = containerMap.get(containerID).getContainer();
+    ContainerData cData = containerMap.get(containerID);
-    ContainerStatus status = new ContainerStatus(containerData);
-    containerMap.put(containerID, status);
+    containerMap.put(containerID, containerData);
-      ContainerData orgData = containerMap.get(containerID).getContainer();
+      ContainerData orgData = containerMap.get(containerID);
-      ContainerStatus newStatus = new ContainerStatus(data);
-      containerMap.replace(containerID, newStatus);
+      containerMap.replace(containerID, data);
-    final ContainerStatus status = containerMap.get(containerID);
-    if (status == null) {
-      throw new StorageContainerException(
-          "Container status not found: " + containerID, CONTAINER_NOT_FOUND);
-    }
-    final ContainerData cData = status.getContainer();
-    if (cData == null) {
+    final ContainerData containerData = containerMap.get(containerID);
+    if (containerData == null) {
-    return cData.isOpen();
+    return containerData.isOpen();
-  public ConcurrentSkipListMap<Long, ContainerStatus> getContainerMap() {
+  public ConcurrentSkipListMap<Long, ContainerData> getContainerMap() {
-        .filter(containerStatus ->
-            !containerStatus.getValue().getContainer().isOpen())
-        .map(containerStatus -> containerStatus.getValue().getContainer())
+        .filter(containerData ->
+            !containerData.getValue().isOpen())
+        .map(containerData -> containerData.getValue())
-    List<ContainerStatus> containers = containerMap.values().stream()
+    List<ContainerData> containers = containerMap.values().stream()
-    for (ContainerStatus container: containers) {
+    for (ContainerData container: containers) {
-      ciBuilder.setContainerID(container.getContainer().getContainerID())
-          .setSize(container.getContainer().getMaxSize())
-          .setUsed(container.getContainer().getBytesUsed())
-          .setKeyCount(container.getContainer().getKeyCount())
+      ciBuilder.setContainerID(container.getContainerID())
+          .setSize(container.getMaxSize())
+          .setUsed(container.getBytesUsed())
+          .setKeyCount(container.getKeyCount())
-          .setWriteBytes(container.getWriteBytes())
-          .setContainerID(container.getContainer().getContainerID());
+          .setWriteBytes(container.getWriteBytes());
-      ContainerStatus status = containerMap.get(containerId);
-      status.incrPendingDeletionBlocks(numBlocks);
+      ContainerData cData = containerMap.get(containerId);
+      cData.incrPendingDeletionBlocks(numBlocks);
-      ContainerStatus status = containerMap.get(containerId);
-      status.decrPendingDeletionBlocks(numBlocks);
+      ContainerData cData = containerMap.get(containerId);
+      cData.decrPendingDeletionBlocks(numBlocks);
-    ContainerStatus status = containerMap.get(containerId);
-    status.incrReadCount();
+    ContainerData cData = containerMap.get(containerId);
+    cData.incrReadCount();
-    ContainerStatus status = containerMap.get(containerId);
-    return status.getReadCount();
+    ContainerData cData = containerMap.get(containerId);
+    return cData.getReadCount();
-   * Increse the read counter for bytes read from the container.
+   * Increase the read counter for bytes read from the container.
-    ContainerStatus status = containerMap.get(containerId);
-    status.incrReadBytes(readBytes);
+    ContainerData cData = containerMap.get(containerId);
+    cData.incrReadBytes(readBytes);
+  /**
+   * Returns number of bytes read from the container.
+   * @param containerId
+   * @return
+   */
-      ContainerStatus status = containerMap.get(containerId);
-      return status.getReadBytes();
+      ContainerData cData = containerMap.get(containerId);
+      return cData.getReadBytes();
-    ContainerStatus status = containerMap.get(containerId);
-    status.incrWriteCount();
+    ContainerData cData = containerMap.get(containerId);
+    cData.incrWriteCount();
-    ContainerStatus status = containerMap.get(containerId);
-    return status.getWriteCount();
+    ContainerData cData = containerMap.get(containerId);
+    return cData.getWriteCount();
-    ContainerStatus status = containerMap.get(containerId);
-    status.incrWriteBytes(writeBytes);
+    ContainerData cData = containerMap.get(containerId);
+    cData.incrWriteBytes(writeBytes);
-    ContainerStatus status = containerMap.get(containerId);
-    return status.getWriteBytes();
+    ContainerData cData = containerMap.get(containerId);
+    return cData.getWriteBytes();
-    ContainerStatus status = containerMap.get(containerId);
-    return status.incrBytesUsed(used);
+    ContainerData cData = containerMap.get(containerId);
+    return cData.incrBytesUsed(used);
-    ContainerStatus status = containerMap.get(containerId);
-    return status.decrBytesUsed(used);
+    ContainerData cData = containerMap.get(containerId);
+    return cData.decrBytesUsed(used);
-    ContainerStatus status = containerMap.get(containerId);
-    return status.getBytesUsed();
+    ContainerData cData = containerMap.get(containerId);
+    return cData.getBytesUsed();
-    ContainerStatus status = containerMap.get(containerId);
-    return status.getNumKeys();  }
+    ContainerData cData = containerMap.get(containerId);
+    return cData.getKeyCount();  }
