HDFS-4563. Update namespace/diskspace usage after deleting snapshots.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455396 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.NSQuotaExceededException;
-import org.apache.hadoop.hdfs.server.namenode.INode.Content.CountsMap.Key;
+import org.apache.hadoop.hdfs.protocol.QuotaExceededException;
+import org.apache.hadoop.hdfs.server.namenode.Content.CountsMap.Key;
+//import org.apache.hadoop.hdfs.util.EnumCounters;
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
-      throws NSQuotaExceededException;
+      throws QuotaExceededException;
-   * @return the number of deleted inodes in the subtree.
+   * @return quota usage delta when deleting a snapshot
-  public abstract int cleanSubtree(final Snapshot snapshot, Snapshot prior,
-      BlocksMapUpdateInfo collectedBlocks) throws NSQuotaExceededException;
+  public abstract Quota.Counts cleanSubtree(final Snapshot snapshot,
+      Snapshot prior, BlocksMapUpdateInfo collectedBlocks)
+      throws QuotaExceededException;
-   * @return the number of deleted inodes in the subtree.
-  public abstract int destroyAndCollectBlocks(
+  public abstract void destroyAndCollectBlocks(
-  /**
-   * The content types such as file, directory and symlink to be computed
-   * in {@link INode#computeContentSummary(CountsMap)}.
-   */
-  public enum Content {
-    /** The number of files. */
-    FILE,
-    /** The number of directories. */
-    DIRECTORY,
-    /** The number of symlinks. */
-    SYMLINK,
-
-    /** The total of file length in bytes. */
-    LENGTH,
-    /** The total of disk space usage in bytes including replication. */
-    DISKSPACE,
-
-    /** The number of snapshots. */
-    SNAPSHOT,
-    /** The number of snapshottable directories. */
-    SNAPSHOTTABLE_DIRECTORY;
-
-    /** Content counts. */
-    public static class Counts extends EnumCounters<Content> {
-      private Counts() {
-        super(Content.values());
-      }
-    }
-
-    private static final EnumCounters.Factory<Content, Counts> FACTORY
-        = new EnumCounters.Factory<Content, Counts>() {
-      @Override
-      public Counts newInstance() {
-        return new Counts();
-      }
-    };
-
-    /** A map of counters for the current state and the snapshots. */
-    public static class CountsMap
-        extends EnumCounters.Map<CountsMap.Key, Content, Counts> {
-      /** The key type of the map. */
-      public static enum Key { CURRENT, SNAPSHOT }
-
-      private CountsMap() {
-        super(FACTORY);
-      }
-    }
-  }
-
-   * Check and add namespace consumed to itself and the ancestors.
-   * @throws NSQuotaExceededException if quote is violated.
+   * Check and add namespace/diskspace consumed to itself and the ancestors.
+   * @throws QuotaExceededException if quote is violated.
-  public void addNamespaceConsumed(int delta) throws NSQuotaExceededException {
+  public void addSpaceConsumed(long nsDelta, long dsDelta)
+      throws QuotaExceededException {
-      parent.addNamespaceConsumed(delta);
+      parent.addSpaceConsumed(nsDelta, dsDelta);
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
