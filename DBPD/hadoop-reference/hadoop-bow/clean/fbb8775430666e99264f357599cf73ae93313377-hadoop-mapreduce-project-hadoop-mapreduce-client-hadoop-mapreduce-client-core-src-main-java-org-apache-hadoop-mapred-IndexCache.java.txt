Revert "MAPREDUCE-7277. IndexCache totalMemoryUsed differs from cache contents. Contributed by Jon Eagles (jeagles)."

This reverts commit e2322e1117a2a3435aabecd49de0ad3c8d2f64b9.

-            Thread.currentThread().interrupt();
-      LOG.debug("IndexCache HIT: MapId {} found", mapId);
+      LOG.debug("IndexCache HIT: MapId " + mapId + " found");
-            Thread.currentThread().interrupt();
-      LOG.debug("IndexCache HIT: MapId {} found", mapId);
+      LOG.debug("IndexCache HIT: MapId " + mapId + " found");
-    LOG.debug("IndexCache MISS: MapId {} not found", mapId);
+    LOG.debug("IndexCache MISS: MapId " + mapId + " not found") ;
-    boolean success = false;
-      success = true;
-    } catch (Throwable e) {
+    } catch (Throwable e) { 
-      if (e instanceof InterruptedException) {
-        Thread.currentThread().interrupt();
-      }
-    } finally {
-      synchronized (newInd) {
+    } finally { 
+      synchronized (newInd) { 
-        if (success) {
-          // Only add mapId to the queue for successful read and after added to
-          // the cache. Once in the queue, it is now eligible for removal once
-          // construction is finished.
-          queue.add(mapId);
-          if (totalMemoryUsed.addAndGet(newInd.getSize()) > totalMemoryAllowed) {
-            freeIndexInformation();
-          }
-        }
-
+    queue.add(mapId);
+    
+    if (totalMemoryUsed.addAndGet(newInd.getSize()) > totalMemoryAllowed) {
+      freeIndexInformation();
+    }
-   * This method removes the map from the cache if it is present in the queue.
+   * This method removes the map from the cache if index information for this
+   * map is loaded(size>0), index information entry in cache will not be 
+   * removed if it is in the loading phrase(size=0), this prevents corruption  
+   * of totalMemoryUsed. It should be called when a map output on this tracker 
+   * is discarded.
-  public void removeMap(String mapId) throws IOException {
-    // Successfully removing the mapId from the queue enters into a contract
-    // that this thread will remove the corresponding mapId from the cache.
-    if (!queue.remove(mapId)) {
-      LOG.debug("Map ID {} not found in queue", mapId);
+  public void removeMap(String mapId) {
+    IndexInformation info = cache.get(mapId);
+    if (info == null || isUnderConstruction(info)) {
-    removeMapInternal(mapId);
-  }
-
-  /** This method should only be called upon successful removal of mapId from
-   * the queue. The mapId will be removed from the cache and totalUsedMemory
-   * will be decremented.
-   * @param mapId the cache item to be removed
-   * @throws IOException
-   */
-  private void removeMapInternal(String mapId) throws IOException {
-    IndexInformation info = cache.remove(mapId);
-    if (info == null) {
-      // Inconsistent state as presence in queue implies presence in cache
-      LOG.warn("Map ID " + mapId + " not found in cache");
-      return;
-    }
-    try {
-      synchronized(info) {
-        while (isUnderConstruction(info)) {
-          info.wait();
-        }
-        totalMemoryUsed.getAndAdd(-info.getSize());
+    info = cache.remove(mapId);
+    if (info != null) {
+      totalMemoryUsed.addAndGet(-info.getSize());
+      if (!queue.remove(mapId)) {
+        LOG.warn("Map ID" + mapId + " not found in queue!!");
-    } catch (InterruptedException e) {
-      totalMemoryUsed.getAndAdd(-info.getSize());
-      Thread.currentThread().interrupt();
-      throw new IOException("Interrupted waiting for construction", e);
+    } else {
+      LOG.info("Map ID " + mapId + " not found in cache");
-   * This method checks if cache and totalMemoryUsed is consistent.
+   * This method checks if cache and totolMemoryUsed is consistent.
-   * @return True if cache and totalMemoryUsed is consistent
+   * @return True if cache and totolMemoryUsed is consistent
-  private synchronized void freeIndexInformation() throws IOException {
+  private synchronized void freeIndexInformation() {
-      if(queue.isEmpty()) {
-        break;
+      String s = queue.remove();
+      IndexInformation info = cache.remove(s);
+      if (info != null) {
+        totalMemoryUsed.addAndGet(-info.getSize());
-      String mapId = queue.remove();
-      removeMapInternal(mapId);
