YARN-2352. FairScheduler: Collect metrics on duration of critical methods that affect performance. (kasha)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616769 13f79535-47bb-0310-9956-ffa450edef68

+  FSOpDurations fsOpDurations;
+          long start = getClock().getTime();
+          long duration = getClock().getTime() - start;
+          fsOpDurations.addUpdateThreadRunDuration(duration);
+    long start = getClock().getTime();
+
+    long duration = getClock().getTime() - start;
+    fsOpDurations.addUpdateCallDuration(duration);
-    long now = clock.getTime();
+    long now = getClock().getTime();
-    Resource desiredFairShare = Resources.min(RESOURCE_CALCULATOR, clusterResource,
+    Resource desiredFairShare = Resources.min(RESOURCE_CALCULATOR,
+        clusterResource,
-    long curTime = clock.getTime();
+    long curTime = getClock().getTime();
+    long start = getClock().getTime();
+
+    long duration = getClock().getTime() - start;
+    fsOpDurations.addPreemptCallDuration(duration);
-      if (time + waitTimeBeforeKill < clock.getTime()) {
+      if (time + waitTimeBeforeKill < getClock().getTime()) {
-            (clock.getTime() - time) + "ms)");
+            (getClock().getTime() - time) + "ms)");
-      app.addPreemption(container, clock.getTime());
+      app.addPreemption(container, getClock().getTime());
-        .getCurrentAppAttempt());
+          .getCurrentAppAttempt());
+    long start = getClock().getTime();
+
+    long duration = getClock().getTime() - start;
+    fsOpDurations.addNodeUpdateDuration(duration);
+    long start = getClock().getTime();
+
+    long duration = getClock().getTime() - start;
+    fsOpDurations.addContinuousSchedulingRunDuration(duration);
+    fsOpDurations = FSOpDurations.getInstance(true);
+
