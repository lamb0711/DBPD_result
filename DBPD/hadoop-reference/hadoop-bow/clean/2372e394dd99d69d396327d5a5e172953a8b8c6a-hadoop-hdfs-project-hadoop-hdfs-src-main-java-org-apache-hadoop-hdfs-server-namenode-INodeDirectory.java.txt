HDFS-4189. Renames the getMutableXxx methods to getXxx4Write and fix a bug that some getExistingPathINodes calls should be getINodesInPath4Write.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1441193 13f79535-47bb-0310-9956-ffa450edef68

-  
-  protected INode getExistingChild(int i) {
-    return children.get(i);
-  }
-  INodesInPath getINodesInPath(String path, boolean resolveLink
+  INodesInPath getLastINodeInPath(String path, boolean resolveLink
+  /** @return the {@link INodesInPath} containing all inodes in the path. */
+  INodesInPath getINodesInPath(String path, boolean resolveLink
+      ) throws UnresolvedLinkException {
+    final byte[][] components = getPathComponents(path);
+    return getExistingPathINodes(components, components.length, resolveLink);
+  }
+
-    return getINodesInPath(path, resolveLink).getINode(0);
+    return getLastINodeInPath(path, resolveLink).getINode(0);
-  INode getMutableNode(String src, boolean resolveLink)
+  INode getINode4Write(String src, boolean resolveLink)
-    INode[] inodes = getMutableINodesInPath(src, resolveLink).getINodes();
-    return inodes[inodes.length - 1];
+    return getINodesInPath4Write(src, resolveLink).getLastINode();
-  INodesInPath getMutableINodesInPath(String src, boolean resolveLink)
+  INodesInPath getINodesInPath4Write(String src, boolean resolveLink)
-    return getMutableINodesInPath(INode.getPathComponents(src), resolveLink);
-  }
-  
-  /**
-   * @return the INodesInPath of the components in src
-   * @throws UnresolvedLinkException if symlink can't be resolved
-   * @throws SnapshotAccessControlException if path is in RO snapshot
-   */
-  INodesInPath getMutableINodesInPath(byte[][] components, boolean resolveLink)
-      throws UnresolvedLinkException, SnapshotAccessControlException {
+    final byte[][] components = INode.getPathComponents(src);
-          "Modification on RO snapshot is disallowed");
+          "Modification on a read-only snapshot is disallowed");
-  
-  /**
-   * Retrieve the existing INodes along the given path. The first INode
-   * always exist and is this INode.
-   * 
-   * @param path the path to explore
-   * @param resolveLink indicates whether UnresolvedLinkException should 
-   *        be thrown when the path refers to a symbolic link.
-   * @return INodes array containing the existing INodes in the order they
-   *         appear when following the path from the root INode to the
-   *         deepest INodes. The array size will be the number of expected
-   *         components in the path, and non existing components will be
-   *         filled with null
-   *         
-   * @see #getExistingPathINodes(byte[][], int, boolean)
-   */
-  INodesInPath getExistingPathINodes(String path, boolean resolveLink) 
-    throws UnresolvedLinkException {
-    byte[][] components = getPathComponents(path);
-    return getExistingPathINodes(components, components.length, resolveLink);
-  }
+
+    byte[] getLastLocalName() {
+      return path[path.length - 1];
+    }
