New parameter of CLI for decommissioning node gracefully in RMAdmin CLI. Contributed by Devaraj K

+import java.util.HashSet;
+import java.util.Map.Entry;
+import org.apache.hadoop.yarn.api.records.NodeState;
+    refreshHostsReader(yarnConf);
+
+    for (NodeId nodeId: rmContext.getRMNodes().keySet()) {
+      if (!isValidNode(nodeId.getHost())) {
+        this.rmContext.getDispatcher().getEventHandler().handle(
+            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION));
+      }
+    }
+  }
+
+  private void refreshHostsReader(Configuration yarnConf) throws IOException,
+      YarnException {
-
-    for (NodeId nodeId: rmContext.getRMNodes().keySet()) {
-      if (!isValidNode(nodeId.getHost())) {
-        this.rmContext.getDispatcher().getEventHandler().handle(
-            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION));
-      }
-    }
-}
+
+  /**
+   * Refresh the nodes gracefully
+   *
+   * @param conf
+   * @throws IOException
+   * @throws YarnException
+   */
+  public void refreshNodesGracefully(Configuration conf) throws IOException,
+      YarnException {
+    refreshHostsReader(conf);
+    for (Entry<NodeId, RMNode> entry:rmContext.getRMNodes().entrySet()) {
+      NodeId nodeId = entry.getKey();
+      if (!isValidNode(nodeId.getHost())) {
+        this.rmContext.getDispatcher().getEventHandler().handle(
+            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION_WITH_TIMEOUT));
+      } else {
+        // Recommissioning the nodes
+        if (entry.getValue().getState() == NodeState.DECOMMISSIONING
+            || entry.getValue().getState() == NodeState.DECOMMISSIONED) {
+          this.rmContext.getDispatcher().getEventHandler()
+              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));
+        }
+      }
+    }
+  }
+
+  /**
+   * It checks for any nodes in decommissioning state
+   *
+   * @return decommissioning nodes
+   */
+  public Set<NodeId> checkForDecommissioningNodes() {
+    Set<NodeId> decommissioningNodes = new HashSet<NodeId>();
+    for (Entry<NodeId, RMNode> entry : rmContext.getRMNodes().entrySet()) {
+      if (entry.getValue().getState() == NodeState.DECOMMISSIONING) {
+        decommissioningNodes.add(entry.getKey());
+      }
+    }
+    return decommissioningNodes;
+  }
+
+  /**
+   * Forcefully decommission the nodes if they are in DECOMMISSIONING state
+   */
+  public void refreshNodesForcefully() {
+    for (Entry<NodeId, RMNode> entry : rmContext.getRMNodes().entrySet()) {
+      if (entry.getValue().getState() == NodeState.DECOMMISSIONING) {
+        this.rmContext.getDispatcher().getEventHandler().handle(
+            new RMNodeEvent(entry.getKey(), RMNodeEventType.DECOMMISSION));
+      }
+    }
+  }
+}
