Merge trunk into QJM branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1380990 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.web.resources.NamenodeWebHdfsMethods;
+   * Clear all loaded data
+   */
+  void clear() {
+    dir.reset();
+    dtSecretManager.reset();
+    generationStamp.setStamp(GenerationStamp.FIRST_VALID_STAMP);
+    leaseManager.removeAllLeases();
+  }
+
+  @VisibleForTesting
+  LeaseManager getLeaseManager() {
+    return leaseManager;
+  }
+  
+  /**
+
+  /**
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                        Server.getRemoteIp(),
+                        getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-      logAuditEvent(UserGroupInformation.getCurrentUser(), Server.getRemoteIp(),
+      logAuditEvent(UserGroupInformation.getCurrentUser(), getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-           StandbyException {
+           StandbyException, IOException {
+    HdfsFileStatus stat = null;
+
+
-      return dir.getFileInfo(src, resolveLink);
+      stat = dir.getFileInfo(src, resolveLink);
+    } catch (AccessControlException e) {
+      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
+                      getRemoteIp(),
+                      "getfileinfo", src, null, null);
+      }
+      throw e;
+    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      logAuditEvent(UserGroupInformation.getCurrentUser(),
+                    getRemoteIp(),
+                    "getfileinfo", src, null, null);
+    }
+    return stat;
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
+      checkSuperuserPrivilege();
-    return Server.isRpcInvocation();
+    return Server.isRpcInvocation() || NamenodeWebHdfsMethods.isWebHdfsInvocation();
+  }
+
+  private static InetAddress getRemoteIp() {
+    InetAddress ip = Server.getRemoteIp();
+    if (ip != null) {
+      return ip;
+    }
+    return NamenodeWebHdfsMethods.getRemoteIp();
