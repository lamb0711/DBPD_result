HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.lang.builder.EqualsBuilder;
-import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hdfs.server.namenode.CachePool;
- * An entry in the NameNode's PathBasedCache.
+ * Represents an entry in the PathBasedCache on the NameNode.
+ *
+ * This is an implementation class, not part of the public API.
+@InterfaceAudience.Private
-  private final PathBasedCacheDirective directive;
+  private final String path;
+  private final CachePool pool;
-  public PathBasedCacheEntry(long entryId, PathBasedCacheDirective directive) {
+  public PathBasedCacheEntry(long entryId, String path, CachePool pool) {
-    this.directive = directive;
+    Preconditions.checkNotNull(path);
+    this.path = path;
+    Preconditions.checkNotNull(pool);
+    this.pool = pool;
-  public PathBasedCacheDirective getDirective() {
-    return directive;
+  public String getPath() {
+    return path;
-  @Override
-  public boolean equals(Object o) {
-    try {
-      PathBasedCacheEntry other = (PathBasedCacheEntry)o;
-      return new EqualsBuilder().
-          append(this.entryId, other.entryId).
-          append(this.directive, other.directive).
-          isEquals();
-    } catch (ClassCastException e) {
-      return false;
-    }
-  }
-
-  @Override
-  public int hashCode() {
-    return new HashCodeBuilder().
-        append(entryId).
-        append(directive).
-        hashCode();
+  public CachePool getPool() {
+    return pool;
-        append(", directive:").append(directive.toString()).
-        append(" }");
+      append(", path:").append(path).
+      append(", pool:").append(pool).
+      append(" }");
+
+  public PathBasedCacheDescriptor getDescriptor() {
+    return new PathBasedCacheDescriptor(entryId, path, pool.getName());
+  }
