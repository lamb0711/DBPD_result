YARN-8761. Service AM support for decommissioning component instances.
           Contributed by Billie Rinaldi

+import org.apache.hadoop.yarn.service.utils.ServiceApiUtil;
+          // instance decommissioned
+          .addTransition(INIT, INIT, DECOMMISSION_INSTANCE,
+              new DecommissionInstanceTransition())
+          // instance decommissioned
+          .addTransition(FLEXING, FLEXING, DECOMMISSION_INSTANCE,
+              new DecommissionInstanceTransition())
+          // instance decommissioned
+          .addTransition(STABLE, STABLE, DECOMMISSION_INSTANCE,
+              new DecommissionInstanceTransition())
+          // upgrade component
+          // instance decommissioned
+          .addTransition(UPGRADING, UPGRADING, DECOMMISSION_INSTANCE,
+              new DecommissionInstanceTransition())
-
+          // instance decommissioned
+          .addTransition(CANCEL_UPGRADING, CANCEL_UPGRADING,
+              DECOMMISSION_INSTANCE, new DecommissionInstanceTransition())
+    while (componentSpec.getDecommissionedInstances().contains(id
+        .getCompInstanceName())) {
+      id = new ComponentInstanceId(instanceIdCounter.getAndIncrement(),
+          componentSpec.getName());
+    }
+  private static class DecommissionInstanceTransition extends BaseTransition {
+    @Override
+    public void transition(Component component, ComponentEvent event) {
+      String instanceName = event.getInstanceName();
+      String hostnameSuffix = component.getHostnameSuffix();
+      if (instanceName.endsWith(hostnameSuffix)) {
+        instanceName = instanceName.substring(0,
+            instanceName.length() - hostnameSuffix.length());
+      }
+      if (component.getComponentSpec().getDecommissionedInstances()
+          .contains(instanceName)) {
+        LOG.info("Instance {} already decommissioned", instanceName);
+        return;
+      }
+      component.getComponentSpec().addDecommissionedInstance(instanceName);
+      ComponentInstance instance = component.getComponentInstance(instanceName);
+      if (instance == null) {
+        LOG.info("Instance was null for decommissioned instance {}",
+            instanceName);
+        return;
+      }
+      // remove the instance
+      component.compInstances.remove(instance.getCompInstanceName());
+      component.pendingInstances.remove(instance);
+      component.scheduler.getServiceMetrics().containersDesired.decr();
+      component.componentMetrics.containersDesired.decr();
+      component.getComponentSpec().setNumberOfContainers(component
+          .getComponentSpec().getNumberOfContainers() - 1);
+      instance.destroy();
+    }
+  }
+
-    if (delta > 0) {
+    if (delta != 0) {
-    } else {
-      scheduler.getServiceMetrics().containersDesired.decr(delta);
+
+  public String getHostnameSuffix() {
+    return ServiceApiUtil.getHostnameSuffix(context.service.getName(),
+        scheduler.getConfig());
+  }
