commit correct version of HDFS-5121

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68

-import javax.annotation.Nonnull;
-
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.hadoop.fs.permission.FsPermission;
+import org.apache.hadoop.hdfs.protocol.CachePoolInfo.Builder;
- * The NameNode uses CachePools to manage cache resources on the DataNodes.
+ * A CachePool describes a set of cache resources being managed by the NameNode.
+ * User caching requests are billed to the cache pool specified in the request.
+ *
+ * CachePools are uniquely identified by a numeric id as well as the
+ * {@link CachePoolInfo} pool name. Mutable metadata is contained in
+ * CachePoolInfo, including pool name, owner, group, and permissions.
+ * See this class for more details.
-  @Nonnull
-  private final String poolName;
+  private final long id;
-  @Nonnull
-  private String ownerName;
+  private CachePoolInfo info;
-  @Nonnull
-  private String groupName;
-  
-  private int mode;
-  
-  private int weight;
-  
-  public static String getCurrentUserPrimaryGroupName() throws IOException {
-    UserGroupInformation ugi= NameNode.getRemoteUser();
-    String[] groups = ugi.getGroupNames();
-    if (groups.length == 0) {
-      throw new IOException("failed to get group names from UGI " + ugi);
+  public CachePool(long id) {
+    this.id = id;
+    this.info = null;
+  }
+
+  CachePool(long id, String poolName, String ownerName, String groupName,
+      FsPermission mode, Integer weight) throws IOException {
+    this.id = id;
+    // Set CachePoolInfo default fields if null
+    if (poolName == null || poolName.isEmpty()) {
+      throw new IOException("invalid empty cache pool name");
-    return groups[0];
-  }
-  
-  public CachePool(String poolName, String ownerName, String groupName,
-      Integer mode, Integer weight) throws IOException {
-    this.poolName = poolName;
-    this.ownerName = ownerName != null ? ownerName :
-      NameNode.getRemoteUser().getShortUserName();
-    this.groupName = groupName != null ? groupName :
-      getCurrentUserPrimaryGroupName();
-    this.mode = mode != null ? mode : 0644;
-    this.weight = weight != null ? weight : 100;
+    UserGroupInformation ugi = null;
+    if (ownerName == null) {
+      ugi = NameNode.getRemoteUser();
+      ownerName = ugi.getShortUserName();
+    }
+    if (groupName == null) {
+      if (ugi == null) {
+        ugi = NameNode.getRemoteUser();
+      }
+      String[] groups = ugi.getGroupNames();
+      if (groups.length == 0) {
+        throw new IOException("failed to get group names from UGI " + ugi);
+      }
+      groupName = groups[0];
+    }
+    if (mode == null) {
+      mode = FsPermission.getDirDefault();
+    }
+    if (weight == null) {
+      weight = 100;
+    }
+    CachePoolInfo.Builder builder = CachePoolInfo.newBuilder();
+    builder.setPoolName(poolName).setOwnerName(ownerName)
+        .setGroupName(groupName).setMode(mode).setWeight(weight);
+    this.info = builder.build();
-  public String getName() {
-    return poolName;
+  public CachePool(long id, CachePoolInfo info) {
+    this.id = id;
+    this.info = info;
-  public String getOwnerName() {
-    return ownerName;
+  /**
+   * @return id of the pool
+   */
+  public long getId() {
+    return id;
-  public CachePool setOwnerName(String ownerName) {
-    this.ownerName = ownerName;
-    return this;
-  }
-
-  public String getGroupName() {
-    return groupName;
-  }
-
-  public CachePool setGroupName(String groupName) {
-    this.groupName = groupName;
-    return this;
-  }
-
-  public int getMode() {
-    return mode;
-  }
-
-  public CachePool setMode(int mode) {
-    this.mode = mode;
-    return this;
-  }
-  
-  public int getWeight() {
-    return weight;
-  }
-
-  public CachePool setWeight(int weight) {
-    this.weight = weight;
-    return this;
-  }
-  
-   * @param fullInfo
-   *          If true, only the name will be returned (i.e., what you 
-   *          would get if you didn't have read permission for this pool.)
-  public CachePoolInfo getInfo(boolean fullInfo) {
-    CachePoolInfo info = new CachePoolInfo(poolName);
-    if (!fullInfo) {
-      return info;
-    }
-    return info.setOwnerName(ownerName).
-        setGroupName(groupName).
-        setMode(mode).
-        setWeight(weight);
+  public CachePoolInfo getInfo() {
+    return info;
-  public CachePoolInfo getInfo(FSPermissionChecker pc) {
-    return getInfo(pc.checkReadPermission(ownerName, groupName, mode));
+  void setInfo(CachePoolInfo info) {
+    this.info = info;
-        append("{ ").append("poolName:").append(poolName).
-        append(", ownerName:").append(ownerName).
-        append(", groupName:").append(groupName).
-        append(", mode:").append(String.format("%3o", mode)).
-        append(", weight:").append(weight).
+        append("{ ").append("id:").append(id).
+        append(", info:").append(info.toString()).
+
+  @Override
+  public int hashCode() {
+    return new HashCodeBuilder().append(id).append(info).hashCode();
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (obj == null) { return false; }
+    if (obj == this) { return true; }
+    if (obj.getClass() != getClass()) {
+      return false;
+    }
+    CachePool rhs = (CachePool)obj;
+    return new EqualsBuilder()
+      .append(id, rhs.id)
+      .append(info, rhs.info)
+      .isEquals();
+  }
