HADOOP-16961. ABFS: Adding metrics to AbfsInputStream (#2076)


Contributed by Mehakmeet Singh.
+  /** Stream statistics. */
+  private final AbfsInputStreamStatistics streamStatistics;
+
+    this.streamStatistics = abfsInputStreamContext.getStreamStatistics();
+    // check if buffer is null before logging the length
+    if (b != null) {
+      LOG.debug("read requested b.length = {} offset = {} len = {}", b.length,
+          off, len);
+    } else {
+      LOG.debug("read requested b = null offset = {} len = {}", off, len);
+    }
+
+    if (streamStatistics != null) {
+      streamStatistics.readOperationStarted(off, len);
+    }
+    LOG.debug("read one block requested b.length = {} off {} len {}", b.length,
+        off, len);
+        LOG.debug("created new buffer size {}", bufferSize);
+    if (streamStatistics != null) {
+      // Bytes read from the local buffer.
+      streamStatistics.bytesReadFromBuffer(bytesToRead);
+      streamStatistics.bytesRead(bytesToRead);
+    }
+      LOG.debug("read ahead enabled issuing readheads num = {}", numReadAheads);
+        LOG.debug("issuing read ahead requestedOffset = {} requested size {}",
+            nextOffset, nextSize);
+        LOG.debug("Received data from read ahead, not doing remote read");
+      LOG.debug("read ahead disabled, reading remote");
+      if (streamStatistics != null) {
+        streamStatistics.remoteReadOperation();
+      }
+      LOG.debug("issuing HTTP GET request params position = {} b.length = {} "
+          + "offset = {} length = {}", position, b.length, offset, length);
+    LOG.debug("HTTP request read bytes = {}", bytesRead);
+    LOG.debug("requested seek to position {}", n);
+    if (streamStatistics != null) {
+      streamStatistics.seek(n, fCursor);
+    }
+
+      if (streamStatistics != null) {
+        streamStatistics.seekInBuffer();
+      }
+    LOG.debug("set fCursor to {}", fCursor);
+    LOG.debug("Closing {}", this);
+  /**
+   * Getter for AbfsInputStreamStatistics.
+   *
+   * @return an instance of AbfsInputStreamStatistics.
+   */
+  @VisibleForTesting
+  public AbfsInputStreamStatistics getStreamStatistics() {
+    return streamStatistics;
+  }
+
+  /**
+   * Get the statistics of the stream.
+   * @return a string value.
+   */
+  @Override
+  public String toString() {
+    final StringBuilder sb = new StringBuilder(super.toString());
+    if (streamStatistics != null) {
+      sb.append("AbfsInputStream@(").append(this.hashCode()).append("){");
+      sb.append(streamStatistics.toString());
+      sb.append("}");
+    }
+    return sb.toString();
+  }
