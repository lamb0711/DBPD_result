MAPREDUCE-2738. Added the missing cluster level statisticss on the RM web UI. Contributed by Robert Joseph Evans.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179229 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.yarn.server.resourcemanager.webapp.RMWebApp.NODE_STATE;
+import org.apache.hadoop.util.StringUtils;
+import org.apache.hadoop.yarn.api.records.NodeId;
+import org.apache.hadoop.yarn.server.resourcemanager.ResourceManager;
+import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNodeState;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNodeReport;
+    private static final long BYTES_IN_MB = 1024 * 1024;
+    final ResourceManager rm;
-    NodesBlock(RMContext context, ViewContext ctx) {
+    NodesBlock(RMContext context, ResourceManager rm, ViewContext ctx) {
+      this.rm = rm;
+      html._(MetricsOverviewTable.class);
+      
+      ResourceScheduler sched = rm.getResourceScheduler();
+      String type = $(NODE_STATE);
+          th(".state", "Node State").
-//          th(".mem", "Mem Used (MB)").
-//          th(".mem", "Mem Avail (MB)").
+          th(".mem", "Mem Used").
+          th(".mem", "Mem Avail").
+      RMNodeState stateFilter = null;
+      if(type != null && !type.isEmpty()) {
+        stateFilter = RMNodeState.valueOf(type.toUpperCase());
+      }
+        if(stateFilter != null) {
+          RMNodeState state = ni.getState();
+          if(!stateFilter.equals(state)) {
+            continue;
+          }
+        }
+        NodeId id = ni.getNodeID();
+        SchedulerNodeReport report = sched.getNodeReport(id);
+        int numContainers = 0;
+        int usedMemory = 0;
+        int availableMemory = 0;
+        if(report != null) {
+          numContainers = report.getNumContainers();
+          usedMemory = report.getUsedResource().getMemory();
+          availableMemory = report.getAvailableResource().getMemory();
+        }
+
+            td(String.valueOf(ni.getState())).
-            // TODO: acm: refactor2 FIXME
-            //td(String.valueOf(ni.getNumContainers())).
-            // TODO: FIXME Vinodkv
-//            td(String.valueOf(ni.getUsedResource().getMemory())).
-//            td(String.valueOf(ni.getAvailableResource().getMemory())).
-            td("n/a")._();
+            td(String.valueOf(numContainers)).
+            td().br().$title(String.valueOf(usedMemory))._().
+              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().
+            td().br().$title(String.valueOf(usedMemory))._().
+              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().
+            _();
-    setTitle("Nodes of the cluster");
+    String type = $(NODE_STATE);
+    String title = "Nodes of the cluster";
+    if(type != null && !type.isEmpty()) {
+      title = title+" ("+type+")";
+    }
+    setTitle(title);
-    return tableInit().
-        // rack, nodeid, host, healthStatus, health update ts, health report,
-        // containers, memused, memavail
-        append(", aoColumns:[null, null, null, null, null, null, ").
-        append("{sType:'title-numeric', bSearchable:false}]}").
-        toString();
+    StringBuilder b = tableInit().append(",aoColumnDefs:[");
+    b.append("{'bSearchable':false, 'aTargets': [7]} ,");
+    b.append("{'sType':'title-numeric', 'bSearchable':false, " +
+    		"'aTargets': [ 8, 9] }]}");
+    return b.toString();
