Revert "YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)"

This reverts commit 4d53ef7eefb14661d824924e503a910de1ae997f.

-    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils
-        .getRemoteNodeFileDir(conf, appId, logRequest.getAppOwner(),
+    List<FileStatus> nodeFiles = LogAggregationUtils
+        .getRemoteNodeFileList(conf, appId, logRequest.getAppOwner(),
-    if (!nodeFiles.hasNext()) {
+    if (nodeFiles.isEmpty()) {
-    List<FileStatus> allFiles = getAllNodeFiles(nodeFiles, appId);
-    if (allFiles.isEmpty()) {
-      throw new IOException("There is no available log fils for "
-          + "application:" + appId);
-    }
-    Map<String, Long> checkSumFiles = parseCheckSumFiles(allFiles);
+    Map<String, Long> checkSumFiles = parseCheckSumFiles(nodeFiles);
-        allFiles, nodeIdStr, appId);
+        nodeFiles, nodeIdStr, appId);
-    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils
-        .getRemoteNodeFileDir(conf, appId, appOwner, this.remoteRootLogDir,
+    List<FileStatus> nodeFiles = LogAggregationUtils
+        .getRemoteNodeFileList(conf, appId, appOwner, this.remoteRootLogDir,
-    if (!nodeFiles.hasNext()) {
+    if (nodeFiles.isEmpty()) {
-    List<FileStatus> allFiles = getAllNodeFiles(nodeFiles, appId);
-    if (allFiles.isEmpty()) {
-      throw new IOException("There is no available log fils for "
-          + "application:" + appId);
-    }
-    Map<String, Long> checkSumFiles = parseCheckSumFiles(allFiles);
+    Map<String, Long> checkSumFiles = parseCheckSumFiles(nodeFiles);
-        allFiles, nodeIdStr, appId);
+        nodeFiles, nodeIdStr, appId);
-    for (FileStatus thisNodeFile : nodeFiles) {
-      String nodeName = thisNodeFile.getPath().getName();
+    List<FileStatus> files = new ArrayList<>(nodeFiles);
+    for (FileStatus file : files) {
+      String nodeName = file.getPath().getName();
-        listOfFiles.add(thisNodeFile);
+        if (nodeName.equals(appId + ".har")) {
+          Path p = new Path("har:///" + file.getPath().toUri().getRawPath());
+          files = Arrays.asList(HarFs.get(p.toUri(), conf).listStatus(p));
+          continue;
+        }
+        listOfFiles.add(file);
-  private List<FileStatus> getAllNodeFiles(
-      RemoteIterator<FileStatus> nodeFiles, ApplicationId appId)
-      throws IOException {
-    List<FileStatus> listOfFiles = new ArrayList<>();
-    while (nodeFiles != null && nodeFiles.hasNext()) {
-      FileStatus thisNodeFile = nodeFiles.next();
-      String nodeName = thisNodeFile.getPath().getName();
-      if (nodeName.equals(appId + ".har")) {
-        Path p = new Path("har:///"
-            + thisNodeFile.getPath().toUri().getRawPath());
-        nodeFiles = HarFs.get(p.toUri(), conf).listStatusIterator(p);
-        continue;
-      }
-      listOfFiles.add(thisNodeFile);
-    }
-    return listOfFiles;
-  }
-
