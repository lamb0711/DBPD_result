HADOOP-6323. Add comparators to the serialization API.  Contributed by Aaron Kimball.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@889877 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
+
+import org.apache.hadoop.io.RawComparator;
-public class JavaSerialization implements Serialization<Serializable> {
-  
+public class JavaSerialization extends SerializationBase<Serializable> {
+
-    implements Deserializer<T> {
+    extends DeserializerBase<T> {
-  
-  static class JavaSerializationSerializer
-    implements Serializer<Serializable> {
+
+  static class JavaSerializationSerializer<T extends Serializable>
+      extends SerializerBase<T> {
+    private Map<String, String> metadata;
+
+    public JavaSerializationSerializer(Map<String, String> metadata) {
+      this.metadata = metadata;
+    }
-    public void serialize(Serializable object) throws IOException {
+    public void serialize(T object) throws IOException {
+    @Override
+    public Map<String, String> getMetadata() throws IOException {
+      return metadata;
+    }
-  public boolean accept(Class<?> c) {
+  public boolean accept(Map<String, String> metadata) {
+    String intendedSerializer = metadata.get(SERIALIZATION_KEY);
+    if (intendedSerializer != null &&
+        !getClass().getName().equals(intendedSerializer)) {
+      return false;
+    }
+
+    Class<?> c = getClassFromMetadata(metadata);
-  public Deserializer<Serializable> getDeserializer(Class<Serializable> c) {
+  public DeserializerBase<Serializable> getDeserializer(
+      Map<String, String> metadata) {
-  public Serializer<Serializable> getSerializer(Class<Serializable> c) {
-    return new JavaSerializationSerializer();
+  public SerializerBase<Serializable> getSerializer(
+      Map<String, String> metadata) {
+    return new JavaSerializationSerializer<Serializable>(metadata);
+  @SuppressWarnings("unchecked")
+  @Override
+  public RawComparator<Serializable> getRawComparator(
+      Map<String, String> metadata) {
+    Class<?> klazz = getClassFromMetadata(metadata);
+    if (null == klazz) {
+      throw new IllegalArgumentException(
+          "Cannot get comparator without " + SerializationBase.CLASS_KEY
+          + " set in metadata");
+    }
+
+    if (Serializable.class.isAssignableFrom(klazz)) {
+      try {
+        return (RawComparator<Serializable>) new JavaSerializationComparator();
+      } catch (IOException ioe) {
+        throw new IllegalArgumentException(
+            "Could not instantiate JavaSerializationComparator for type "
+            + klazz.getName(), ioe);
+      }
+    } else {
+      throw new IllegalArgumentException("Class " + klazz.getName()
+          + " is incompatible with JavaSerialization");
+    }
+  }
