YARN-569. Add support for requesting and enforcing preemption requests via
a capacity monitor. Contributed by Carlo Curino, Chris Douglas


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68

-  private void unreserve(FiCaSchedulerApp application, Priority priority, 
+  private boolean unreserve(FiCaSchedulerApp application, Priority priority,
-    application.unreserve(node, priority);
-    node.unreserveResource(application);
-      
-      // Update reserved metrics
-    getMetrics().unreserveResource(
-        application.getUser(), rmContainer.getContainer().getResource());
-  }
+    if (application.unreserve(node, priority)) {
+      node.unreserveResource(application);
+      // Update reserved metrics
+      getMetrics().unreserveResource(
+          application.getUser(), rmContainer.getContainer().getResource());
+      return true;
+    }
+    return false;
+  }
-        
+
+        boolean removed = false;
-          unreserve(application, rmContainer.getReservedPriority(), 
+          removed = unreserve(application, rmContainer.getReservedPriority(),
-          application.containerCompleted(rmContainer, containerStatus, event);
+          removed =
+            application.containerCompleted(rmContainer, containerStatus, event);
-
-        releaseResource(clusterResource, 
-            application, container.getResource());
-
-        LOG.info("completedContainer" +
-            " container=" + container +
-            " resource=" + container.getResource() +
-        		" queue=" + this + 
-            " usedCapacity=" + getUsedCapacity() +
-            " absoluteUsedCapacity=" + getAbsoluteUsedCapacity() +
-            " used=" + usedResources + 
-            " cluster=" + clusterResource);
+        if (removed) {
+          releaseResource(clusterResource,
+              application, container.getResource());
+          LOG.info("completedContainer" +
+              " container=" + container +
+              " resource=" + container.getResource() +
+              " queue=" + this +
+              " usedCapacity=" + getUsedCapacity() +
+              " absoluteUsedCapacity=" + getAbsoluteUsedCapacity() +
+              " used=" + usedResources +
+              " cluster=" + clusterResource);
+          // Inform the parent queue
+          getParent().completedContainer(clusterResource, application,
+              node, rmContainer, null, event);
+        }
-      // Inform the parent queue
-      getParent().completedContainer(clusterResource, application, 
-          node, rmContainer, null, event);
+
-  
+
+  // need to access the list of apps from the preemption monitor
+  public Set<FiCaSchedulerApp> getApplications() {
+    return Collections.unmodifiableSet(activeApplications);
+  }
+
+  // return a single Resource capturing the overal amount of pending resources
+  public Resource getTotalResourcePending() {
+    Resource ret = BuilderUtils.newResource(0, 0);
+    for (FiCaSchedulerApp f : activeApplications) {
+      Resources.addTo(ret, f.getTotalPendingRequests());
+    }
+    return ret;
+  }
+
