YARN-9899. Migration tool that help to generate CS config based on FS config [Phase 2]. Contributed by Peter Bacsko

-import org.apache.commons.cli.MissingArgumentException;
+import org.apache.commons.cli.HelpFormatter;
+import org.apache.commons.cli.ParseException;
-        "Path to a valid yarn-site.xml config file", true, true),
+        "Path to a valid yarn-site.xml config file", true),
-        "Path to a valid fair-scheduler.xml config file", false, true),
+        "Path to a valid fair-scheduler.xml config file", true),
-            "conversion rules file (property format).", false, true),
+            "conversion rules file (property format).", true),
-            "only be emitted to the console.", false, false),
+            "only be emitted to the console.", false),
-            false, true),
+              true),
-            true, true);
+            true),
+    HELP("help", "h", "help", "Displays the list of options", false);
-    private final boolean required;
-        String description, boolean required, boolean hasArg) {
+        String description, boolean hasArg) {
-      this.required = required;
-      option.setRequired(required);
-
-    public String getAsArgumentString() {
-      return shortSwitch + "|" + longSwitch + ": " + description;
-    }
-  public int parseAndConvert(String[] args) throws Exception {
+  int parseAndConvert(String[] args) throws Exception {
+      if (args.length == 0) {
+        LOG.info("Missing command line arguments");
+        printHelp(opts);
+        return 0;
+      }
+
+
+      if (cliParser.hasOption(CliOption.HELP.shortSwitch)) {
+        printHelp(opts);
+        return 0;
+      }
+
-      checkOptionPresent(cliParser, CliOption.OUTPUT_DIR);
+      checkOutputDefined(cliParser);
-    } catch (MissingArgumentException e) {
-      String msg = "Missing argument for options" + e.getMessage();
+    } catch (ParseException e) {
+      String msg = "Options parsing failed: " + e.getMessage();
+      printHelp(opts);
-    LOG.error(msg, e);
+    LOG.debug("Stack trace", e);
+    LOG.error(msg);
+  private void printHelp(Options opts) {
+    HelpFormatter formatter = new HelpFormatter();
+    formatter.printHelp("General options are: ", opts);
+  }
+
+  private static void checkOutputDefined(CommandLine cliParser) {
+    boolean hasOutputDir =
+        cliParser.hasOption(CliOption.OUTPUT_DIR.shortSwitch);
+
+    boolean console =
+        cliParser.hasOption(CliOption.CONSOLE_MODE.shortSwitch);
+
+    if (!console && !hasOutputDir) {
+      throw new PreconditionException(
+         "Output directory or console mode was not defined. Please" +
+          " use -h or --help to see command line switches");
+    }
+  }
+
