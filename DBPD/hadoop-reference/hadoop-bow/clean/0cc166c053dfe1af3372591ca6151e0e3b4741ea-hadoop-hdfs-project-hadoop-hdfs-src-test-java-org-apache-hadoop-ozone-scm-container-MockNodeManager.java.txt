HDFS-12115. Ozone: SCM: Add queryNode RPC Call. Contributed by Anu Engineer.

- *
+ * <p>
- *
+ * <p>
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos;
+import static org.apache.hadoop.ozone.protocol.proto.OzoneProtos.NodeState.DEAD;
+import static org.apache.hadoop.ozone.protocol.proto.OzoneProtos.NodeState
+    .HEALTHY;
+import static org.apache.hadoop.ozone.protocol.proto.OzoneProtos.NodeState
+    .STALE;
+
-  private static final int HEALTHY_NODE_COUNT = 10;
-      new NodeData(10L * OzoneConsts.TB,  OzoneConsts.GB),
+      new NodeData(10L * OzoneConsts.TB, OzoneConsts.GB),
+      new NodeData(OzoneConsts.TB, 900 * OzoneConsts.GB, NodeData.STALE),
+      new NodeData(OzoneConsts.TB, 200L * OzoneConsts.GB, NodeData.STALE),
+      new NodeData(OzoneConsts.TB, 200L * OzoneConsts.GB, NodeData.DEAD)
+  private final List<DatanodeID> staleNodes;
+  private final List<DatanodeID> deadNodes;
+    this.staleNodes = new LinkedList<>();
+    this.deadNodes = new LinkedList<>();
-        healthyNodes.add(id);
+
+    if (NODES[x % NODES.length].getCurrentState() == NodeData.HEALTHY) {
+      healthyNodes.add(datanodeID);
+    }
+
+    if (NODES[x % NODES.length].getCurrentState() == NodeData.STALE) {
+      staleNodes.add(datanodeID);
+    }
+
+    if (NODES[x % NODES.length].getCurrentState() == NodeData.DEAD) {
+      deadNodes.add(datanodeID);
+    }
+
-  public List<DatanodeID> getNodes(NODESTATE nodestate) {
-    if (nodestate == NODESTATE.HEALTHY) {
+  public List<DatanodeID> getNodes(OzoneProtos.NodeState nodestate) {
+    if (nodestate == HEALTHY) {
+
+    if (nodestate == STALE) {
+      return staleNodes;
+    }
+
+    if (nodestate == DEAD) {
+      return deadNodes;
+    }
+
-  public int getNodeCount(NODESTATE nodestate) {
-    if (nodestate == NODESTATE.HEALTHY) {
-      return HEALTHY_NODE_COUNT;
+  public int getNodeCount(OzoneProtos.NodeState nodestate) {
+    List<DatanodeID> nodes = getNodes(nodestate);
+    if (nodes != null) {
+      return nodes.size();
-  public NODESTATE getNodeState(DatanodeID id) {
+  public OzoneProtos.NodeState getNodeState(DatanodeID id) {
-        totalRemaining +=report.getRemaining();
+        totalRemaining += report.getRemaining();
-    for (NodeManager.NODESTATE state : NodeManager.NODESTATE.values()) {
+    for (OzoneProtos.NodeState state : OzoneProtos.NodeState.values()) {
-    private long capacity, used;
+    public static final long HEALTHY = 1;
+    public static final long STALE = 2;
+    public static final long DEAD = 3;
+
+    private long capacity;
+    private long used;
+
+    private long currentState;
+
+    /**
+     * By default nodes are healthy.
+     * @param capacity
+     * @param used
+     */
+    NodeData(long capacity, long used) {
+      this(capacity, used, HEALTHY);
+    }
+     * @param currentState - Healthy, Stale and DEAD nodes.
-    NodeData(long capacity, long used) {
+    NodeData(long capacity, long used, long currentState) {
+      this.currentState = currentState;
+
+    public long getCurrentState() {
+      return currentState;
+    }
+
+    public void setCurrentState(long currentState) {
+      this.currentState = currentState;
+    }
+
