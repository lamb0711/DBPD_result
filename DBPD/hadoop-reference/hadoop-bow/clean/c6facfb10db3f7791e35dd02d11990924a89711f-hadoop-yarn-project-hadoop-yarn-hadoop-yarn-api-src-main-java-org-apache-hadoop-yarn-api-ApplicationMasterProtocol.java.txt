YARN-912. Move client facing exceptions to yarn-api module. Contributed by Mayank Bansal.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504032 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.yarn.exceptions.YarnException;
+import org.apache.hadoop.yarn.exceptions.InvalidApplicationMasterRequestException;
+import org.apache.hadoop.yarn.exceptions.InvalidResourceBlacklistRequestException;
+import org.apache.hadoop.yarn.exceptions.InvalidResourceRequestException;
+import org.apache.hadoop.yarn.exceptions.YarnException;
-  
+
-   * <p>The interface used by a new <code>ApplicationMaster</code> to register 
-   * with the <code>ResourceManager</code>.</p> 
+   * <p>
+   * The interface used by a new <code>ApplicationMaster</code> to register with
+   * the <code>ResourceManager</code>.
+   * </p>
-   * <p>The <code>ApplicationMaster</code> needs to provide details such
-   * as RPC Port, HTTP tracking url etc. as specified in 
-   * {@link RegisterApplicationMasterRequest}.</p>
+   * <p>
+   * The <code>ApplicationMaster</code> needs to provide details such as RPC
+   * Port, HTTP tracking url etc. as specified in
+   * {@link RegisterApplicationMasterRequest}.
+   * </p>
-   * <p>The <code>ResourceManager</code> responds with critical details such 
-   * as maximum resource capabilities in the cluster as specified in
-   * {@link RegisterApplicationMasterResponse}.</p>
-   *  
-   * @param request registration request
+   * <p>
+   * The <code>ResourceManager</code> responds with critical details such as
+   * maximum resource capabilities in the cluster as specified in
+   * {@link RegisterApplicationMasterResponse}.
+   * </p>
+   * 
+   * @param request
+   *          registration request
+   * @throws InvalidApplicationMasterRequestException
+   *           The exception is thrown when an ApplicationMaster tries to
+   *           register more then once.
-  
+
-   * <p>The main interface between an <code>ApplicationMaster</code> 
-   * and the <code>ResourceManager</code>.</p>
+   * <p>
+   * The main interface between an <code>ApplicationMaster</code> and the
+   * <code>ResourceManager</code>.
+   * </p>
-   * <p>The <code>ApplicationMaster</code> uses this interface to provide a list  
-   * of {@link ResourceRequest} and returns unused {@link Container} allocated 
-   * to it via {@link AllocateRequest}. Optionally, the 
-   * <code>ApplicationMaster</code> can also <em>blacklist</em> resources
-   * which it doesn't want to use.</p>
+   * <p>
+   * The <code>ApplicationMaster</code> uses this interface to provide a list of
+   * {@link ResourceRequest} and returns unused {@link Container} allocated to
+   * it via {@link AllocateRequest}. Optionally, the
+   * <code>ApplicationMaster</code> can also <em>blacklist</em> resources which
+   * it doesn't want to use.
+   * </p>
-   * <p>This also doubles up as a <em>heartbeat</em> to let the 
+   * <p>
+   * This also doubles up as a <em>heartbeat</em> to let the
-   * alive. The frequency depends on 
+   * alive. The frequency depends on
-   * {@link YarnConfiguration#DEFAULT_RM_AM_EXPIRY_INTERVAL_MS}.</p>
+   * {@link YarnConfiguration#DEFAULT_RM_AM_EXPIRY_INTERVAL_MS}.
+   * </p>
-   * <p>The <code>ResourceManager</code> responds with list of allocated 
-   * {@link Container}, status of completed containers and headroom information 
-   * for the application.</p> 
+   * <p>
+   * The <code>ResourceManager</code> responds with list of allocated
+   * {@link Container}, status of completed containers and headroom information
+   * for the application.
+   * </p>
-   * <p>The <code>ApplicationMaster</code> can use the available headroom 
-   * (resources) to decide how to utilized allocated resources and make 
-   * informed decisions about future resource requests.</p>
+   * <p>
+   * The <code>ApplicationMaster</code> can use the available headroom
+   * (resources) to decide how to utilized allocated resources and make informed
+   * decisions about future resource requests.
+   * </p>
-   * @param request allocation request
+   * @param request
+   *          allocation request
+   * @throws InvalidApplicationMasterRequestException
+   *           This exception is thrown when an ApplicationMaster calls allocate
+   *           without registering first.
+   * @throws InvalidResourceBlacklistRequestException
+   *           This exception is thrown when an application provides an invalid
+   *           specification for blacklist of resources.
+   * @throws InvalidResourceRequestException
+   *           This exception is thrown when a {@link ResourceRequest} is out of
+   *           the range of the configured lower and upper limits on the
+   *           resources.
