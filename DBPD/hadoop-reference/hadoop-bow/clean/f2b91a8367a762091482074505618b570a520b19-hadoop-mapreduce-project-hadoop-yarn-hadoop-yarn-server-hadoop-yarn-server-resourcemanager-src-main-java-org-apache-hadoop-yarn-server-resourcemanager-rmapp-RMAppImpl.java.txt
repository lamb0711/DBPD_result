 MAPREDUCE-2807. Fix AM restart and client redirection. Contributed by Sharad Agarwal.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161408 13f79535-47bb-0310-9956-ffa450edef68

-        EnumSet.of(RMAppState.ACCEPTED, RMAppState.FAILED),
+        EnumSet.of(RMAppState.SUBMITTED, RMAppState.FAILED),
-        new AttemptFailedTransition(RMAppState.ACCEPTED))
+        new AttemptFailedTransition(RMAppState.SUBMITTED))
-        EnumSet.of(RMAppState.RUNNING, RMAppState.FAILED),
+        EnumSet.of(RMAppState.SUBMITTED, RMAppState.FAILED),
-        new AttemptFailedTransition(RMAppState.RUNNING))
+        new AttemptFailedTransition(RMAppState.SUBMITTED))
-     // Transitions from RESTARTING state
-     // TODO - no way to get to RESTARTING state right now
-    .addTransition(RMAppState.RESTARTING, RMAppState.RUNNING,
-        RMAppEventType.ATTEMPT_REGISTERED)
-    .addTransition(RMAppState.RESTARTING,
-        EnumSet.of(RMAppState.RESTARTING, RMAppState.FAILED),
-        RMAppEventType.ATTEMPT_FAILED,
-        new AttemptFailedTransition(RMAppState.RESTARTING))
-    .addTransition(RMAppState.RESTARTING, RMAppState.KILLED,
-        RMAppEventType.KILL, new AppKilledTransition())
-
-    case RESTARTING:
-      return ApplicationState.RESTARTING;
+  private void createNewAttempt() {
+    ApplicationAttemptId appAttemptId = Records
+        .newRecord(ApplicationAttemptId.class);
+    appAttemptId.setApplicationId(applicationId);
+    appAttemptId.setAttemptId(attempts.size() + 1);
+
+    RMAppAttempt attempt = new RMAppAttemptImpl(appAttemptId,
+        clientTokenStr, rmContext, scheduler, masterService,
+        submissionContext);
+    attempts.put(appAttemptId, attempt);
+    currentAttempt = attempt;
+    dispatcher.getEventHandler().handle(
+        new RMAppAttemptEvent(appAttemptId, RMAppAttemptEventType.START));
+  }
+
-
-      ApplicationAttemptId appAttemptId = Records
-          .newRecord(ApplicationAttemptId.class);
-      appAttemptId.setApplicationId(app.applicationId);
-      appAttemptId.setAttemptId(app.attempts.size() + 1);
-
-      RMAppAttempt attempt = new RMAppAttemptImpl(appAttemptId,
-          app.clientTokenStr, app.rmContext, app.scheduler,
-          app.masterService, app.submissionContext);
-      app.attempts.put(appAttemptId, attempt);
-      app.currentAttempt = attempt;
-      app.dispatcher.getEventHandler().handle(
-          new RMAppAttemptEvent(appAttemptId, RMAppAttemptEventType.START));
+      app.createNewAttempt();
-        app.diagnostics.append("Application " + app.getApplicationId()
-            + " failed " + app.maxRetries
-            + " times. Failing the application.");
+        String msg = "Application " + app.getApplicationId()
+        + " failed " + app.maxRetries
+        + " times. Failing the application.";
+        LOG.info(msg);
+        app.diagnostics.append(msg);
-      ApplicationAttemptId appAttemptId = Records
-          .newRecord(ApplicationAttemptId.class);
-      appAttemptId.setApplicationId(app.applicationId);
-      appAttemptId.setAttemptId(app.attempts.size() + 1);
-
-      // Create a new attempt.
-      RMAppAttempt attempt = new RMAppAttemptImpl(appAttemptId,
-          app.clientTokenStr, app.rmContext, app.scheduler,
-          app.masterService, app.submissionContext);
-      app.attempts.put(appAttemptId, attempt);
-      app.currentAttempt = attempt;
-      app.dispatcher.getEventHandler().handle(
-          new RMAppAttemptEvent(appAttemptId, RMAppAttemptEventType.START));
+      app.createNewAttempt();     
