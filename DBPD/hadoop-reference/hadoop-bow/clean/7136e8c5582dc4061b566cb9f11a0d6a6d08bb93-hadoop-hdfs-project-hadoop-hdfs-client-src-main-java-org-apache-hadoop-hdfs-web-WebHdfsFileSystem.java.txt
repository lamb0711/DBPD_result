HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.

-    implements DelegationTokenRenewer.Renewable, TokenAspect.TokenManagementDelegator {
+    implements DelegationTokenRenewer.Renewable,
+    TokenAspect.TokenManagementDelegator {
-  public static final String PATH_PREFIX = "/" + WebHdfsConstants.WEBHDFS_SCHEME + "/v" + VERSION;
+  public static final String PATH_PREFIX = "/" + WebHdfsConstants.WEBHDFS_SCHEME
+      + "/v" + VERSION;
-  /** Default connection factory may be overridden in tests to use smaller timeout values */
+  /**
+   * Default connection factory may be overridden in tests to use smaller
+   * timeout values
+   */
-      ) throws IOException {
+  ) throws IOException {
-    this.workingDir = makeQualified(new Path(getHomeDirectoryString(ugi)));
+    this.workingDir = makeQualified(getHomeDirectory());
-                                         result);
+          result);
-  static Map<?, ?> jsonParse(final HttpURLConnection c, final boolean useErrorStream
-      ) throws IOException {
+  static Map<?, ?> jsonParse(final HttpURLConnection c,
+      final boolean useErrorStream) throws IOException {
-    final InputStream in = useErrorStream? c.getErrorStream(): c.getInputStream();
+    final InputStream in = useErrorStream ?
+        c.getErrorStream() : c.getInputStream();
-      throw new IOException("The " + (useErrorStream? "error": "input") + " stream is null.");
+      throw new IOException("The " + (useErrorStream? "error": "input") +
+          " stream is null.");
-      final HttpURLConnection conn, boolean unwrapException) throws IOException {
+      final HttpURLConnection conn, boolean unwrapException)
+      throws IOException {
-          nnAddr.getPort(), path + '?' + query);
+        nnAddr.getPort(), path + '?' + query);
-    protected ExcludeDatanodesParam excludeDatanodes = new ExcludeDatanodesParam("");
+    protected ExcludeDatanodesParam excludeDatanodes =
+        new ExcludeDatanodesParam("");
-     * Step 2) Submit another Http request with the URL from the Location header with data.
+     * Step 2) Submit another Http request with the URL from the Location header
+     * with data.
-        // if not sending a message body for a POST or PUT operation, need
-        // to ensure the server/proxy knows this
-        case POST:
-        case PUT: {
-          conn.setDoOutput(true);
-          if (!doOutput) {
-            // explicitly setting content-length to 0 won't do spnego!!
-            // opening and closing the stream will send "Content-Length: 0"
-            conn.getOutputStream().close();
-          } else {
-            conn.setRequestProperty("Content-Type",
-                MediaType.APPLICATION_OCTET_STREAM);
-            conn.setChunkedStreamingMode(32 << 10); //32kB-chunk
-          }
-          break;
+      // if not sending a message body for a POST or PUT operation, need
+      // to ensure the server/proxy knows this
+      case POST:
+      case PUT: {
+        conn.setDoOutput(true);
+        if (!doOutput) {
+          // explicitly setting content-length to 0 won't do spnego!!
+          // opening and closing the stream will send "Content-Length: 0"
+          conn.getOutputStream().close();
+        } else {
+          conn.setRequestProperty("Content-Type",
+              MediaType.APPLICATION_OCTET_STREAM);
+          conn.setChunkedStreamingMode(32 << 10); //32kB-chunk
-        default: {
-          conn.setDoOutput(doOutput);
-          break;
-        }
+        break;
+      }
+      default:
+        conn.setDoOutput(doOutput);
+        break;
-        ) throws IOException {
+    ) throws IOException {
-          boolean isRetry = a.action == RetryPolicy.RetryAction.RetryDecision.RETRY;
+          boolean isRetry =
+              a.action == RetryPolicy.RetryAction.RetryDecision.RETRY;
-                + " time(s); retry policy is {}, delay {}ms.", nnAddr, retry,
-                retryPolicy, a.delayMillis);
+                    + " time(s); retry policy is {}, delay {}ms.",
+                nnAddr, retry, retryPolicy, a.delayMillis);
-  class FsPathOutputStreamRunner extends AbstractFsPathRunner<FSDataOutputStream> {
+  class FsPathOutputStreamRunner
+      extends AbstractFsPathRunner<FSDataOutputStream> {
-    protected URLRunner(final HttpOpParam.Op op, final URL url, boolean redirected) {
+    protected URLRunner(final HttpOpParam.Op op, final URL url,
+        boolean redirected) {
-      ) throws IOException {
+  ) throws IOException {
-      ) throws IOException {
+  ) throws IOException {
-      ) throws IOException {
+  ) throws IOException {
-    Path spath = new FsPathResponseRunner<Path>(op, path,
+    return new FsPathResponseRunner<Path>(op, path,
-    return spath;
-     ) throws IOException {
+  ) throws IOException {
-      ) throws IOException {
+  ) throws IOException {
-      ) throws IOException {
+  ) throws IOException {
-        ) throws MalformedURLException {
+    ) throws MalformedURLException {
-        final Map<?, ?> rootmap = (Map<?, ?>)json.get(FileStatus.class.getSimpleName() + "es");
+        final Map<?, ?> rootmap =
+            (Map<?, ?>)json.get(FileStatus.class.getSimpleName() + "es");
-                                                     FileStatus.class.getSimpleName());
+            FileStatus.class.getSimpleName());
+        assert array != null;
-          statuses[i++] = makeQualified(JsonUtilClient.toFileStatus(m, false), f);
+          statuses[i++] = makeQualified(JsonUtilClient.toFileStatus(m, false),
+              f);
-      @Override
-      Token<DelegationTokenIdentifier> decodeResponse(Map<?,?> json)
-          throws IOException {
-        return JsonUtilClient.toDelegationToken(json);
-      }
-    }.run();
+          @Override
+          Token<DelegationTokenIdentifier> decodeResponse(Map<?,?> json)
+              throws IOException {
+            return JsonUtilClient.toDelegationToken(json);
+          }
+        }.run();
-      ) throws IOException {
+  ) throws IOException {
-      ) throws IOException {
+  ) throws IOException {
-      ) throws IOException {
+  ) throws IOException {
-  private InetSocketAddress[] resolveNNAddr() throws IOException {
+  private InetSocketAddress[] resolveNNAddr() {
-    ArrayList<InetSocketAddress> ret = new ArrayList<InetSocketAddress>();
+    ArrayList<InetSocketAddress> ret = new ArrayList<>();
