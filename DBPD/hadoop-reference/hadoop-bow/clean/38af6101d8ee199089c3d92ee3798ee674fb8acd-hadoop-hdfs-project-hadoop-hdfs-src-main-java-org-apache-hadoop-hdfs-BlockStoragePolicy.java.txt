HDFS-6671. Change BlockPlacementPolicy to consider block storage policy in replicaiton.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1611334 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import java.util.List;
+  /** A block storage policy suite. */
+  public static class Suite {
+    private final byte defaultPolicyID;
+    private final BlockStoragePolicy[] policies;
+    
+    private Suite(byte defaultPolicyID, BlockStoragePolicy[] policies) {
+      this.defaultPolicyID = defaultPolicyID;
+      this.policies = policies;
+    }
+    
+    /** @return the corresponding policy. */
+    public BlockStoragePolicy getPolicy(byte id) {
+      // id == 0 means policy not specified. 
+      return id == 0? getDefaultPolicy(): policies[id];
+    }
+
+    /** @return the default policy. */
+    public BlockStoragePolicy getDefaultPolicy() {
+      return getPolicy(defaultPolicyID);
+    }
+  }
+
-  StorageType[] getStoragteTypes(short replication) {
-    final StorageType[] types = new StorageType[replication];
+  public List<StorageType> chooseStorageTypes(final short replication) {
+    final List<StorageType> types = new LinkedList<StorageType>();
-    for(; i < types.length && i < storageTypes.length; i++) {
-      types[i] = storageTypes[i];
+    for(; i < replication && i < storageTypes.length; i++) {
+      types.add(storageTypes[i]);
-    for(; i < types.length; i++) {
-      types[i] = last;
+    for(; i < replication; i++) {
+      types.add(last);
+    }
+    return types;
+  }
+
+  /**
+   * Choose the storage types for storing the remaining replicas, given the
+   * replication number and the storage types of the chosen replicas.
+   *
+   * @param replication the replication number.
+   * @param chosen the storage types of the chosen replicas.
+   * @return a list of {@link StorageType}s for storing the replicas of a block.
+   */
+  public List<StorageType> chooseStorageTypes(final short replication,
+      final Iterable<StorageType> chosen) {
+    final List<StorageType> types = chooseStorageTypes(replication);
+
+    //remove the chosen storage types
+    for(StorageType c : chosen) {
+      final int i = types.indexOf(c);
+      if (i >= 0) {
+        types.remove(i);
+      }
-  StorageType getCreationFallback(EnumSet<StorageType> unavailables) {
+  public StorageType getCreationFallback(EnumSet<StorageType> unavailables) {
-  StorageType getReplicationFallback(EnumSet<StorageType> unavailables) {
+  public StorageType getReplicationFallback(EnumSet<StorageType> unavailables) {
-  private static byte parseID(String string) {
-    final byte id = Byte.parseByte(string);
-    if (id < 1) {
-      throw new IllegalArgumentException(
-          "Invalid block storage policy ID: id = " + id + " < 1");
+  private static byte parseID(String idString, String element, Configuration conf) {
+    Byte id = null;
+    try {
+      id = Byte.parseByte(idString);
+    } catch(NumberFormatException nfe) {
+      throwIllegalArgumentException("Failed to parse policy ID \"" + idString
+          + "\" to a " + ID_BIT_LENGTH + "-bit integer", conf);
-    if (id > 15) {
-      throw new IllegalArgumentException(
-          "Invalid block storage policy ID: id = " + id + " > MAX = " + ID_MAX);
+    if (id < 0) {
+      throwIllegalArgumentException("Invalid policy ID: id = " + id
+          + " < 1 in \"" + element + "\"", conf);
+    } else if (id == 0) {
+      throw new IllegalArgumentException("Policy ID 0 is reserved: " + element);
+    } else if (id > ID_MAX) {
+      throwIllegalArgumentException("Invalid policy ID: id = " + id
+          + " > MAX = " + ID_MAX + " in \"" + element + "\"", conf);
-    if (strings == null) {
+    if (strings == null || strings.length == 0) {
-    final String[] values = conf.getStrings(keyPrefix + id);
-    return parseStorageTypes(values);
+    final String key = keyPrefix + id;
+    final String[] values = conf.getStrings(key);
+    try {
+      return parseStorageTypes(values);
+    } catch(Exception e) {
+      throw new IllegalArgumentException("Failed to parse " + key
+          + " \"" + conf.get(key), e);
+    }
-  public static BlockStoragePolicy readBlockStoragePolicy(byte id, String name,
+  private static BlockStoragePolicy readBlockStoragePolicy(byte id, String name,
+    if (storageTypes.length == 0) {
+      throw new IllegalArgumentException(
+          DFS_BLOCK_STORAGE_POLICY_KEY_PREFIX + id + " is missing or is empty.");
+    }
-  public static BlockStoragePolicy[] readBlockStoragePolicies(
-      Configuration conf) {
-    final BlockStoragePolicy[] policies = new BlockStoragePolicy[ID_MAX + 1];
+  /** Read {@link Suite} from conf. */
+  public static Suite readBlockStorageSuite(Configuration conf) {
+    final BlockStoragePolicy[] policies = new BlockStoragePolicy[1 << ID_BIT_LENGTH];
+    byte firstID = -1;
-      final String name = v.substring(0, i);
-      final byte id = parseID(v.substring(i + 1));
+      if (i < 0) {
+        throwIllegalArgumentException("Failed to parse element \"" + v
+            + "\" (expected format is NAME:ID)", conf);
+      } else if (i == 0) {
+        throwIllegalArgumentException("Policy name is missing in \"" + v + "\"", conf);
+      } else if (i == v.length() - 1) {
+        throwIllegalArgumentException("Policy ID is missing in \"" + v + "\"", conf);
+      }
+      final String name = v.substring(0, i).trim();
+      for(int j = 1; j < policies.length; j++) {
+        if (policies[j] != null && policies[j].name.equals(name)) {
+          throwIllegalArgumentException("Policy name duplication: \""
+              + name + "\" appears more than once", conf);
+        }
+      }
+      
+      final byte id = parseID(v.substring(i + 1).trim(), v, conf);
-        throw new IllegalArgumentException(
-            "Policy duplication: ID " + id + " appears more than once in "
-            + DFS_BLOCK_STORAGE_POLICIES_KEY);
+        throwIllegalArgumentException("Policy duplication: ID " + id
+            + " appears more than once", conf);
-      LOG.info(policies[id]);
+      String prefix = "";
+      if (firstID == -1) {
+        firstID = id;
+        prefix = "(default) ";
+      }
+      LOG.info(prefix + policies[id]);
-    return policies;
+    if (firstID == -1) {
+      throwIllegalArgumentException("Empty list is not allowed", conf);
+    }
+    return new Suite(firstID, policies);
+
+  private static void throwIllegalArgumentException(String message,
+      Configuration conf) {
+    throw new IllegalArgumentException(message + " in "
+        + DFS_BLOCK_STORAGE_POLICIES_KEY + " \""
+        + conf.get(DFS_BLOCK_STORAGE_POLICIES_KEY) + "\".");
+ }
