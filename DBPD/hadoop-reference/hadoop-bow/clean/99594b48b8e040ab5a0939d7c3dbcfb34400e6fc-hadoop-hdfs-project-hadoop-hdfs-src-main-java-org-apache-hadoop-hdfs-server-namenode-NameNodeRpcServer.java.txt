HDFS-13075. [SPS]: Provide External Context implementation. Contributed by Uma Maheswara Rao G.

+    String operationName = "isStoragePolicySatisfierRunning";
+    namesystem.checkSuperuserPrivilege(operationName);
-    return namesystem.getBlockManager().isStoragePolicySatisfierRunning();
+    boolean isSPSRunning =
+        namesystem.getBlockManager().isStoragePolicySatisfierRunning();
+    namesystem.logAuditEvent(true, operationName, null);
+    return isSPSRunning;
+
+  @Override
+  public String getFilePath(Long inodeId) throws IOException {
+    checkNNStartup();
+    String operationName = "getFilePath";
+    namesystem.checkSuperuserPrivilege(operationName);
+    if (nn.isStandbyState()) {
+      throw new StandbyException("Not supported by Standby Namenode.");
+    }
+    return namesystem.getFilePath(inodeId);
+  }
+
+  @Override
+  public Long getNextSPSPathId() throws IOException {
+    checkNNStartup();
+    String operationName = "getNextSPSPathId";
+    namesystem.checkSuperuserPrivilege(operationName);
+    if (nn.isStandbyState()) {
+      throw new StandbyException("Not supported by Standby Namenode.");
+    }
+    return namesystem.getBlockManager().getNextSPSPathId();
+  }
+
+  @Override
+  public boolean checkDNSpaceForScheduling(DatanodeInfo dn,
+      StorageType type, long estimatedSize) throws IOException {
+    checkNNStartup();
+    String operationName = "checkDNSpaceForScheduling";
+    namesystem.checkSuperuserPrivilege(operationName);
+    if (nn.isStandbyState()) {
+      throw new StandbyException("Not supported by Standby Namenode.");
+    }
+    return namesystem.getBlockManager().getDatanodeManager()
+        .verifyTargetDatanodeHasSpaceForScheduling(dn, type, estimatedSize);
+  }
+
+  @Override
+  public boolean hasLowRedundancyBlocks(long inodeId) throws IOException {
+    checkNNStartup();
+    String operationName = "hasLowRedundancyBlocks";
+    namesystem.checkSuperuserPrivilege(operationName);
+    if (nn.isStandbyState()) {
+      throw new StandbyException("Not supported by Standby Namenode.");
+    }
+    return namesystem.getBlockManager().hasLowRedundancyBlocks(inodeId);
+  }
