HDFS-10391. Always enable NameNode service RPC port. Contributed by Gergely Novak.

-    if (serviceRpcAddr != null) {
-      String bindHost = nn.getServiceRpcServerBindHost(conf);
-      if (bindHost == null) {
-        bindHost = serviceRpcAddr.getHostName();
-      }
-      LOG.info("Service RPC server is binding to " + bindHost + ":" +
-          serviceRpcAddr.getPort());
-
-      int serviceHandlerCount =
-        conf.getInt(DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY,
-                    DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT);
-      serviceRpcServer = new RPC.Builder(conf)
-          .setProtocol(
-              org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB.class)
-          .setInstance(clientNNPbService)
-          .setBindAddress(bindHost)
-          .setPort(serviceRpcAddr.getPort())
-          .setNumHandlers(serviceHandlerCount)
-          .setVerbose(false)
-          .setSecretManager(namesystem.getDelegationTokenSecretManager())
-          .build();
-
-      // Add all the RPC protocols that the namenode implements
-      DFSUtil.addPBProtocol(conf, HAServiceProtocolPB.class, haPbService,
-          serviceRpcServer);
-      DFSUtil.addPBProtocol(conf, ReconfigurationProtocolPB.class,
-          reconfigurationPbService, serviceRpcServer);
-      DFSUtil.addPBProtocol(conf, NamenodeProtocolPB.class, NNPbService,
-          serviceRpcServer);
-      DFSUtil.addPBProtocol(conf, DatanodeProtocolPB.class, dnProtoPbService,
-          serviceRpcServer);
-      DFSUtil.addPBProtocol(conf, RefreshAuthorizationPolicyProtocolPB.class,
-          refreshAuthService, serviceRpcServer);
-      DFSUtil.addPBProtocol(conf, RefreshUserMappingsProtocolPB.class, 
-          refreshUserMappingService, serviceRpcServer);
-      // We support Refreshing call queue here in case the client RPC queue is full
-      DFSUtil.addPBProtocol(conf, RefreshCallQueueProtocolPB.class,
-          refreshCallQueueService, serviceRpcServer);
-      DFSUtil.addPBProtocol(conf, GenericRefreshProtocolPB.class,
-          genericRefreshService, serviceRpcServer);
-      DFSUtil.addPBProtocol(conf, GetUserMappingsProtocolPB.class, 
-          getUserMappingService, serviceRpcServer);
-      DFSUtil.addPBProtocol(conf, TraceAdminProtocolPB.class,
-          traceAdminService, serviceRpcServer);
-
-      // Update the address with the correct port
-      InetSocketAddress listenAddr = serviceRpcServer.getListenerAddress();
-      serviceRPCAddress = new InetSocketAddress(
-            serviceRpcAddr.getHostName(), listenAddr.getPort());
-      nn.setRpcServiceServerAddress(conf, serviceRPCAddress);
-    } else {
-      serviceRpcServer = null;
-      serviceRPCAddress = null;
+    String bindHost = nn.getServiceRpcServerBindHost(conf);
+    if (bindHost == null) {
+      bindHost = serviceRpcAddr.getHostName();
+    LOG.info("Service RPC server is binding to " + bindHost + ":" +
+        serviceRpcAddr.getPort());
+
+    int serviceHandlerCount = conf.getInt(
+        DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY,
+        DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT);
+    serviceRpcServer = new RPC.Builder(conf)
+        .setProtocol(
+            org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB.class)
+        .setInstance(clientNNPbService)
+        .setBindAddress(bindHost)
+        .setPort(serviceRpcAddr.getPort())
+        .setNumHandlers(serviceHandlerCount)
+        .setVerbose(false)
+        .setSecretManager(namesystem.getDelegationTokenSecretManager())
+        .build();
+
+    // Add all the RPC protocols that the namenode implements
+    DFSUtil.addPBProtocol(conf, HAServiceProtocolPB.class, haPbService,
+        serviceRpcServer);
+    DFSUtil.addPBProtocol(conf, ReconfigurationProtocolPB.class,
+        reconfigurationPbService, serviceRpcServer);
+    DFSUtil.addPBProtocol(conf, NamenodeProtocolPB.class, NNPbService,
+        serviceRpcServer);
+    DFSUtil.addPBProtocol(conf, DatanodeProtocolPB.class, dnProtoPbService,
+        serviceRpcServer);
+    DFSUtil.addPBProtocol(conf, RefreshAuthorizationPolicyProtocolPB.class,
+        refreshAuthService, serviceRpcServer);
+    DFSUtil.addPBProtocol(conf, RefreshUserMappingsProtocolPB.class,
+        refreshUserMappingService, serviceRpcServer);
+    // We support Refreshing call queue here in case the client RPC queue
+    // is full.
+    DFSUtil.addPBProtocol(conf, RefreshCallQueueProtocolPB.class,
+        refreshCallQueueService, serviceRpcServer);
+    DFSUtil.addPBProtocol(conf, GenericRefreshProtocolPB.class,
+        genericRefreshService, serviceRpcServer);
+    DFSUtil.addPBProtocol(conf, GetUserMappingsProtocolPB.class,
+        getUserMappingService, serviceRpcServer);
+    DFSUtil.addPBProtocol(conf, TraceAdminProtocolPB.class,
+        traceAdminService, serviceRpcServer);
+
+    // Update the address with the correct port.
+    InetSocketAddress listenAddr = serviceRpcServer.getListenerAddress();
+    serviceRPCAddress = new InetSocketAddress(
+          serviceRpcAddr.getHostName(), listenAddr.getPort());
+    nn.setRpcServiceServerAddress(conf, serviceRPCAddress);
+
-      String bindHost = nn.getLifelineRpcServerBindHost(conf);
+      bindHost = nn.getLifelineRpcServerBindHost(conf);
-      InetSocketAddress listenAddr = lifelineRpcServer.getListenerAddress();
+      listenAddr = lifelineRpcServer.getListenerAddress();
-    String bindHost = nn.getRpcServerBindHost(conf);
+    bindHost = nn.getRpcServerBindHost(conf);
-      if (serviceRpcServer != null) {
-        serviceRpcServer.refreshServiceAcl(conf, new HDFSPolicyProvider());
-      }
+      serviceRpcServer.refreshServiceAcl(conf, new HDFSPolicyProvider());
-    InetSocketAddress listenAddr = clientRpcServer.getListenerAddress();
+    listenAddr = clientRpcServer.getListenerAddress();
-    if (serviceRpcServer != null) {
-      serviceRpcServer.setTracer(nn.tracer);
-    }
+    serviceRpcServer.setTracer(nn.tracer);
-    if (serviceRpcServer != null) {
-      serviceRpcServer.start();      
-    }
+    serviceRpcServer.start();
-    if (serviceRpcServer != null) {
-      serviceRpcServer.join();      
-    }
+    serviceRpcServer.join();
-    if (serviceRpcServer != null) {
-      serviceRpcServer.stop();
-    }
+    serviceRpcServer.stop();
