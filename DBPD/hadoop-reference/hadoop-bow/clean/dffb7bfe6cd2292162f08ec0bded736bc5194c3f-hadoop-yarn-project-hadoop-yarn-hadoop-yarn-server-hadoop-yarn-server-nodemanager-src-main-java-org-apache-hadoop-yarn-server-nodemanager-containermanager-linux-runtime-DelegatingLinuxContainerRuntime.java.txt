YARN-8638. Allow linux container runtimes to be pluggable. Contributed by Craig Condit

+import org.apache.hadoop.util.ReflectionUtils;
-import java.util.EnumSet;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
- * {@link DockerLinuxContainerRuntime} instance, or a
- * {@link JavaSandboxLinuxContainerRuntime} instance depending on whether
- * each instance believes the operation to be within its scope.
+ * {@link DockerLinuxContainerRuntime} instance, a
+ * {@link JavaSandboxLinuxContainerRuntime} instance, or a custom instance
+ * depending on whether each instance believes the operation to be within its
+ * scope.
- * @see DockerLinuxContainerRuntime#isDockerContainerRequested
+ * @see LinuxContainerRuntime#isRuntimeRequested
-       LoggerFactory.getLogger(DelegatingLinuxContainerRuntime.class);
+      LoggerFactory.getLogger(DelegatingLinuxContainerRuntime.class);
-  private EnumSet<LinuxContainerRuntimeConstants.RuntimeType> allowedRuntimes =
-      EnumSet.noneOf(LinuxContainerRuntimeConstants.RuntimeType.class);
+  private Set<String> allowedRuntimes = new HashSet<>();
+  private List<LinuxContainerRuntime> pluggableRuntimes = new ArrayList<>();
-      try {
-        allowedRuntimes.add(
-            LinuxContainerRuntimeConstants.RuntimeType.valueOf(
-                configuredRuntime.toUpperCase()));
-      } catch (IllegalArgumentException e) {
-        throw new ContainerExecutionException("Invalid runtime set in "
-            + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + " : "
-            + configuredRuntime);
+      String normRuntime = configuredRuntime.toUpperCase();
+      allowedRuntimes.add(normRuntime);
+      if (isPluggableRuntime(normRuntime)) {
+        LinuxContainerRuntime runtime = createPluggableRuntime(conf,
+            configuredRuntime);
+        runtime.initialize(conf, nmContext);
+        pluggableRuntimes.add(runtime);
-        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX)) {
+        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {
-        LinuxContainerRuntimeConstants.RuntimeType.DOCKER)) {
+        LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {
-        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT)) {
+        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {
+  @Override
+  public boolean isRuntimeRequested(Map<String, String> env) {
+    return true;
+  }
+
-        javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){
+        javaSandboxLinuxContainerRuntime.isRuntimeRequested(environment)){
-        DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){
+        dockerLinuxContainerRuntime.isRuntimeRequested(environment)) {
-    } else if (defaultLinuxContainerRuntime != null &&
-        !DockerLinuxContainerRuntime.isDockerContainerRequested(environment)) {
-      runtime = defaultLinuxContainerRuntime;
-      throw new ContainerExecutionException("Requested runtime not allowed.");
+      LinuxContainerRuntime pluggableRuntime = pickPluggableRuntime(
+          environment);
+      if (pluggableRuntime != null) {
+        runtime = pluggableRuntime;
+      } else if (defaultLinuxContainerRuntime != null &&
+          defaultLinuxContainerRuntime.isRuntimeRequested(environment)) {
+        runtime = defaultLinuxContainerRuntime;
+      } else {
+        throw new ContainerExecutionException("Requested runtime not allowed.");
+      }
+  private LinuxContainerRuntime pickPluggableRuntime(
+      Map<String, String> environment) {
+    for (LinuxContainerRuntime runtime : pluggableRuntimes) {
+      if (runtime.isRuntimeRequested(environment)) {
+        return runtime;
+      }
+    }
+    return null;
+  }
+
+  private boolean isPluggableRuntime(String runtimeType) {
+    for (LinuxContainerRuntimeConstants.RuntimeType type :
+        LinuxContainerRuntimeConstants.RuntimeType.values()) {
+      if (type.name().equalsIgnoreCase(runtimeType)) {
+        return false;
+      }
+    }
+    return true;
+  }
+
+  private LinuxContainerRuntime createPluggableRuntime(Configuration conf,
+      String runtimeType) throws ContainerExecutionException {
+    String confKey = String.format(
+        YarnConfiguration.LINUX_CONTAINER_RUNTIME_CLASS_FMT, runtimeType);
+    Class<? extends LinuxContainerRuntime> clazz = conf.getClass(
+        confKey, null, LinuxContainerRuntime.class);
+    if (clazz == null) {
+      throw new ContainerExecutionException("Invalid runtime set in "
+          + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + " : "
+          + runtimeType + " : Missing configuration " + confKey);
+    }
+    return ReflectionUtils.newInstance(clazz, conf);
+  }
+
-  boolean isRuntimeAllowed(
-      LinuxContainerRuntimeConstants.RuntimeType runtimeType) {
-    return allowedRuntimes.contains(runtimeType);
+  boolean isRuntimeAllowed(String runtimeType) {
+    return runtimeType != null && allowedRuntimes.contains(
+        runtimeType.toUpperCase());
