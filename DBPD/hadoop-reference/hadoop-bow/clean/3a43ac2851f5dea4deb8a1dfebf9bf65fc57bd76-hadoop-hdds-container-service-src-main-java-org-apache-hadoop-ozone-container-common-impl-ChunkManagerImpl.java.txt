HDDS-1. Remove SCM Block DB. Contributed by Xiaoyu Yao.

-import org.apache.hadoop.hdds.scm.container.common.helpers.Pipeline;
+import org.apache.hadoop.hdds.client.BlockID;
-   * @param pipeline - Name and the set of machines that make this container.
-   * @param keyName - Name of the Key.
+   * @param blockID - ID of the block.
-  public void writeChunk(Pipeline pipeline, String keyName, ChunkInfo info,
+  public void writeChunk(BlockID blockID, ChunkInfo info,
-      Preconditions.checkNotNull(pipeline, "Pipeline cannot be null");
-      String containerName = pipeline.getContainerName();
-      Preconditions.checkNotNull(containerName,
-          "Container name cannot be null");
+      Preconditions.checkNotNull(blockID, "Block ID cannot be null.");
+      long containerID = blockID.getContainerID();
+      Preconditions.checkState(containerID >= 0,
+          "Container ID cannot be negative");
-          containerManager.readContainer(containerName);
-      File chunkFile = ChunkUtils.validateChunk(pipeline, container, info);
+          containerManager.readContainer(containerID);
+      File chunkFile = ChunkUtils.validateChunk(container, info);
-        commitChunk(tmpChunkFile, chunkFile, containerName, info.getLen());
+        commitChunk(tmpChunkFile, chunkFile, containerID, info.getLen());
-        containerManager.incrBytesUsed(containerName, newSize - oldSize);
-        containerManager.incrWriteCount(containerName);
-        containerManager.incrWriteBytes(containerName, info.getLen());
+        containerManager.incrBytesUsed(containerID, newSize - oldSize);
+        containerManager.incrWriteCount(containerID);
+        containerManager.incrWriteBytes(containerID, info.getLen());
-      String containerName, long chunkLen) throws IOException {
+      long containerID, long chunkLen) throws IOException {
-    containerManager.incrBytesUsed(containerName, sizeDiff);
-    containerManager.incrWriteCount(containerName);
-    containerManager.incrWriteBytes(containerName, chunkLen);
+    containerManager.incrBytesUsed(containerID, sizeDiff);
+    containerManager.incrWriteCount(containerID);
+    containerManager.incrWriteBytes(containerID, chunkLen);
-   * @param pipeline - container pipeline.
-   * @param keyName - Name of the Key
+   * @param blockID - ID of the block.
-  public byte[] readChunk(Pipeline pipeline, String keyName, ChunkInfo info)
+  public byte[] readChunk(BlockID blockID, ChunkInfo info)
-      Preconditions.checkNotNull(pipeline, "Pipeline cannot be null");
-      String containerName = pipeline.getContainerName();
-      Preconditions.checkNotNull(containerName,
-          "Container name cannot be null");
+      Preconditions.checkNotNull(blockID, "Block ID cannot be null.");
+      long containerID = blockID.getContainerID();
+      Preconditions.checkState(containerID >= 0,
+          "Container ID cannot be negative");
-          containerManager.readContainer(containerName);
-      File chunkFile = ChunkUtils.getChunkFile(pipeline, container, info);
+          containerManager.readContainer(containerID);
+      File chunkFile = ChunkUtils.getChunkFile(container, info);
-      containerManager.incrReadCount(containerName);
-      containerManager.incrReadBytes(containerName, chunkFile.length());
+      containerManager.incrReadCount(containerID);
+      containerManager.incrReadBytes(containerID, chunkFile.length());
-   * @param pipeline - Pipeline.
-   * @param keyName - Key Name
+   * @param blockID - ID of the block.
-  public void deleteChunk(Pipeline pipeline, String keyName, ChunkInfo info)
+  public void deleteChunk(BlockID blockID, ChunkInfo info)
-      Preconditions.checkNotNull(pipeline, "Pipeline cannot be null");
-      String containerName = pipeline.getContainerName();
-      Preconditions.checkNotNull(containerName,
-          "Container name cannot be null");
-      File chunkFile = ChunkUtils.getChunkFile(pipeline, containerManager
-          .readContainer(containerName), info);
+      Preconditions.checkNotNull(blockID, "Block ID cannot be null.");
+      long containerID = blockID.getContainerID();
+      Preconditions.checkState(containerID >= 0,
+          "Container ID cannot be negative");
+
+      File chunkFile = ChunkUtils.getChunkFile(containerManager
+          .readContainer(containerID), info);
-        containerManager.decrBytesUsed(containerName, chunkFile.length());
+        containerManager.decrBytesUsed(containerID, chunkFile.length());
