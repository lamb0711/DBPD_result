YARN-5200. Enhanced "yarn logs" to be able to get a list of containers whose logs are aggregated via a "show_container_log_info" option. Contributed by Xuan Gong.

-  private static final String SHOW_META_INFO = "show_meta_info";
+  private static final String SHOW_APPLICATION_LOG_INFO
+      = "show_application_log_info";
+  private static final String SHOW_CONTAINER_LOG_INFO
+      = "show_container_log_info";
+  private PrintStream outStream = System.out;
+  private YarnClient yarnClient = null;
+    try {
+      yarnClient = createYarnClient();
+      return runCommand(args);
+    } finally {
+      if (yarnClient != null) {
+        yarnClient.close();
+      }
+    }
+  }
+
+  private int runCommand(String[] args) throws Exception {
-    boolean showMetaInfo = false;
+    boolean showApplicationLogInfo = false;
+    boolean showContainerLogInfo = false;
-      showMetaInfo = commandLine.hasOption(SHOW_META_INFO);
+      showApplicationLogInfo = commandLine.hasOption(
+          SHOW_APPLICATION_LOG_INFO);
+      showContainerLogInfo = commandLine.hasOption(SHOW_CONTAINER_LOG_INFO);
+    if (showApplicationLogInfo && showContainerLogInfo) {
+      System.err.println("Invalid options. Can only accept one of "
+          + "show_application_log_info/show_container_log_info.");
+      return -1;
+    }
+
-    if (showMetaInfo) {
-      return showMetaInfo(request, logCliHelper);
+    if (showContainerLogInfo) {
+      return showContainerLogInfo(request, logCliHelper);
+    if (showApplicationLogInfo) {
+      return showApplicationLogInfo(request, logCliHelper);
+    }
-    YarnClient yarnClient = createYarnClient();
-
-    try {
-      return yarnClient.getApplicationReport(appId);
-    } finally {
-      yarnClient.close();
-    }
+    return yarnClient.getApplicationReport(appId);
-    YarnClient yarnClient = YarnClient.createYarnClient();
-    yarnClient.init(getConf());
-    yarnClient.start();
-    return yarnClient;
+    YarnClient client = YarnClient.createYarnClient();
+    client.init(getConf());
+    client.start();
+    return client;
-    System.out.println("Retrieve logs for completed YARN applications.");
+    outStream.println("Retrieve logs for YARN applications.");
-  private List<String> getContainerLogFiles(Configuration conf,
+  private List<PerLogFileInfo> getContainerLogFiles(Configuration conf,
-    List<String> logFiles = new ArrayList<>();
+    List<PerLogFileInfo> logFileInfos = new ArrayList<>();
-            logFiles.add(array.getJSONObject(i).getString("fileName"));
+            String fileName = array.getJSONObject(i).getString("fileName");
+            String fileSize = array.getJSONObject(i).getString("fileSize");
+            logFileInfos.add(new PerLogFileInfo(fileName, fileSize));
-    return logFiles;
+    return logFileInfos;
+    if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
+      System.err.println("Can not get the logs for the container: "
+          + containerIdStr);
+      System.err.println("The node http address is required to get container "
+          + "logs for the Running application.");
+      return -1;
+    }
-      List<String> allLogs=
+      List<PerLogFileInfo> allLogFileInfos=
-      List<String> matchedFiles = getMatchedLogFiles(request, allLogs);
+      List<String> fileNames = new ArrayList<String>();
+      for (PerLogFileInfo fileInfo : allLogFileInfos) {
+        fileNames.add(fileInfo.getFileName());
+      }
+      List<String> matchedFiles = getMatchedLogFiles(request, fileNames);
-      String containerString = "\n\nContainer: " + containerIdStr + " on "
-          + nodeId;
+      String containerString = String.format(
+          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);
-    YarnClient yarnClient = createYarnClient();
-    try {
-      return yarnClient.getContainerReport(
-          ContainerId.fromString(containerIdStr));
-    } finally {
-      yarnClient.close();
-    }
+    return yarnClient.getContainerReport(
+        ContainerId.fromString(containerIdStr));
-          amRequest.setNodeHttpAddress(
-              amContainer.getString("nodeHttpAddress"));
+          String httpAddress = amContainer.getString("nodeHttpAddress");
+          if (httpAddress != null && !httpAddress.isEmpty()) {
+            amRequest.setNodeHttpAddress(httpAddress);
+          }
-      System.out.println();      
-      System.out.println("Specified ALL for -am option. "
+      outStream.println();
+      outStream.println("Specified ALL for -am option. "
-  private int showMetaInfo(ContainerLogsRequest request,
-      LogCLIHelpers logCliHelper) throws IOException {
+  private int showContainerLogInfo(ContainerLogsRequest request,
+      LogCLIHelpers logCliHelper) throws IOException, YarnException {
-      System.err.println("The -show_meta_info command can be only used "
-          + "with finished applications");
-      return -1;
+      return printContainerInfoFromRunningApplication(request);
-      logCliHelper.printLogMetadata(request, System.out, System.err);
-      return 0;
+      return logCliHelper.printAContainerLogMetadata(
+          request, System.out, System.err);
+  private int showApplicationLogInfo(ContainerLogsRequest request,
+      LogCLIHelpers logCliHelper) throws IOException, YarnException {
+    String appState = "Application State: "
+        + (request.isAppFinished() ? "Completed." : "Running.");
+    if (!request.isAppFinished()) {
+      List<ContainerReport> reports =
+          getContainerReportsFromRunningApplication(request);
+      List<ContainerReport> filterReports = filterContainersInfo(
+          request, reports);
+      if (filterReports.isEmpty()) {
+        System.err.println("Can not find any containers for the application:"
+            + request.getAppId() + ".");
+        return -1;
+      }
+      outStream.println(appState);
+      for (ContainerReport report : filterReports) {
+        outStream.println(String.format(LogCLIHelpers.CONTAINER_ON_NODE_PATTERN,
+            report.getContainerId(), report.getAssignedNode()));
+      }
+      return 0;
+    } else {
+      outStream.println(appState);
+      logCliHelper.printContainersList(request, System.out, System.err);
+      return 0;
+    }
+  }
+
-    opts.addOption(SHOW_META_INFO, false, "Show the log metadata, "
+    opts.addOption(SHOW_CONTAINER_LOG_INFO, false,
+        "Show the container log metadata, "
-        + "for all the containers on the specific NodeManager. "
-        + "Currently, this option can only be used for finished "
-        + "applications.");
+        + "for all the containers on the specific NodeManager.");
+    opts.addOption(SHOW_APPLICATION_LOG_INFO, false, "Show the "
+        + "containerIds which belong to the specific Application. "
+        + "You can combine this with --nodeAddress to get containerIds "
+        + "for all the containers on the specific NodeManager.");
-    printOpts.addOption(commandOpts.getOption(SHOW_META_INFO));
+    printOpts.addOption(commandOpts.getOption(SHOW_APPLICATION_LOG_INFO));
+    printOpts.addOption(commandOpts.getOption(SHOW_CONTAINER_LOG_INFO));
-      nodeHttpAddress =
-          report.getNodeHttpAddress().replaceFirst(
-            WebAppUtils.getHttpSchemePrefix(getConf()), "");
+      nodeHttpAddress = report.getNodeHttpAddress();
+      if (nodeHttpAddress != null && !nodeHttpAddress.isEmpty()) {
+        nodeHttpAddress = nodeHttpAddress.replaceFirst(
+                WebAppUtils.getHttpSchemePrefix(getConf()), "");
+        request.setNodeHttpAddress(nodeHttpAddress);
+      }
-      request.setNodeHttpAddress(nodeHttpAddress);
-    YarnClient yarnClient = createYarnClient();
-    try {
-      List<ApplicationAttemptReport> attempts =
-          yarnClient.getApplicationAttempts(options.getAppId());
-      for (ApplicationAttemptReport attempt : attempts) {
-        List<ContainerReport> containers = yarnClient.getContainers(
-            attempt.getApplicationAttemptId());
-        for (ContainerReport container : containers) {
-          ContainerLogsRequest newOptions = new ContainerLogsRequest(options);
-          newOptions.setContainerId(container.getContainerId().toString());
-          newOptions.setNodeId(container.getAssignedNode().toString());
-          newOptions.setNodeHttpAddress(container.getNodeHttpAddress()
-              .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), ""));
-          // if we do not specify the value for CONTAINER_LOG_FILES option,
-          // we will only output syslog
-          List<String> logFiles = newOptions.getLogTypes();
-          if (logFiles == null || logFiles.isEmpty()) {
-            logFiles = Arrays.asList("syslog");
-            newOptions.setLogTypes(logFiles);
+    List<ContainerReport> reports =
+        getContainerReportsFromRunningApplication(options);
+    for (ContainerReport container : reports) {
+      ContainerLogsRequest newOptions = new ContainerLogsRequest(options);
+      newOptions.setContainerId(container.getContainerId().toString());
+      newOptions.setNodeId(container.getAssignedNode().toString());
+      String httpAddress = container.getNodeHttpAddress();
+      if (httpAddress != null && !httpAddress.isEmpty()) {
+        newOptions.setNodeHttpAddress(httpAddress
+            .replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), ""));
+      }
+      // if we do not specify the value for CONTAINER_LOG_FILES option,
+      // we will only output syslog
+      List<String> logFiles = newOptions.getLogTypes();
+      if (logFiles == null || logFiles.isEmpty()) {
+        logFiles = Arrays.asList("syslog");
+        newOptions.setLogTypes(logFiles);
+      }
+      newOptionsList.add(newOptions);
+    }
+    return newOptionsList;
+  }
+
+  private List<ContainerReport> getContainerReportsFromRunningApplication(
+      ContainerLogsRequest options) throws YarnException, IOException {
+    List<ContainerReport> reports = new ArrayList<ContainerReport>();
+    List<ApplicationAttemptReport> attempts =
+        yarnClient.getApplicationAttempts(options.getAppId());
+    for (ApplicationAttemptReport attempt : attempts) {
+      List<ContainerReport> containers = yarnClient.getContainers(
+          attempt.getApplicationAttemptId());
+      reports.addAll(containers);
+    }
+    return reports;
+  }
+
+  // filter the containerReports based on the nodeId and ContainerId
+  private List<ContainerReport> filterContainersInfo(
+      ContainerLogsRequest options, List<ContainerReport> containers) {
+    List<ContainerReport> filterReports = new ArrayList<ContainerReport>(
+        containers);
+    String nodeId = options.getNodeId();
+    boolean filterBasedOnNodeId = (nodeId != null && !nodeId.isEmpty());
+    String containerId = options.getContainerId();
+    boolean filterBasedOnContainerId = (containerId != null
+        && !containerId.isEmpty());
+
+    if (filterBasedOnNodeId || filterBasedOnContainerId) {
+    // filter the reports based on the containerId and.or nodeId
+      for(ContainerReport report : containers) {
+        if (filterBasedOnContainerId) {
+          if (!report.getContainerId().toString()
+              .equalsIgnoreCase(containerId)) {
+            filterReports.remove(report);
-          newOptionsList.add(newOptions);
+        }
+
+        if (filterBasedOnNodeId) {
+          if (!report.getAssignedNode().toString().equalsIgnoreCase(nodeId)) {
+            filterReports.remove(report);
+          }
-      return newOptionsList;
-    } finally {
-      yarnClient.close();
+    }
+    return filterReports;
+  }
+
+  private int printContainerInfoFromRunningApplication(
+      ContainerLogsRequest options) throws YarnException, IOException {
+    String containerIdStr = options.getContainerId();
+    String nodeIdStr = options.getNodeId();
+    List<ContainerReport> reports =
+        getContainerReportsFromRunningApplication(options);
+    List<ContainerReport> filteredReports = filterContainersInfo(
+        options, reports);
+    if (filteredReports.isEmpty()) {
+      StringBuilder sb = new StringBuilder();
+      if (containerIdStr != null && !containerIdStr.isEmpty()) {
+        sb.append("Trying to get container with ContainerId: "
+            + containerIdStr + "\n");
+      }
+      if (nodeIdStr != null && !nodeIdStr.isEmpty()) {
+        sb.append("Trying to get container from NodeManager: "
+            + nodeIdStr + "\n");
+      }
+      sb.append("Can not find any matched containers for the application: "
+          + options.getAppId());
+      System.err.println(sb.toString());
+      return -1;
+    }
+    for (ContainerReport report : filteredReports) {
+      String nodeId = report.getAssignedNode().toString();
+      String nodeHttpAddress = report.getNodeHttpAddress().replaceFirst(
+          WebAppUtils.getHttpSchemePrefix(getConf()), "");
+      String containerId = report.getContainerId().toString();
+      String containerString = String.format(
+          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);
+      outStream.println(containerString);
+      outStream.println(StringUtils.repeat("=", containerString.length()));
+      outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,
+          "LogType", "LogLength");
+      outStream.println(StringUtils.repeat("=", containerString.length()));
+      List<PerLogFileInfo> infos = getContainerLogFiles(
+          getConf(), containerId, nodeHttpAddress);
+      for (PerLogFileInfo info : infos) {
+        outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,
+            info.getFileName(), info.getFileLength());
+      }
+    }
+    return 0;
+  }
+
+  private static class PerLogFileInfo {
+    private String fileName;
+    private String fileLength;
+    public PerLogFileInfo(String fileName, String fileLength) {
+      setFileName(fileName);
+      setFileLength(fileLength);
+    }
+
+    public String getFileName() {
+      return fileName;
+    }
+
+    public void setFileName(String fileName) {
+      this.fileName = fileName;
+    }
+
+    public String getFileLength() {
+      return fileLength;
+    }
+
+    public void setFileLength(String fileLength) {
+      this.fileLength = fileLength;
