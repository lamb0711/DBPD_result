HDDS-75. Support for CopyContainer. Contributed by Elek, Marton.

+import java.io.FileInputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.ozone.container.common.impl.ContainerData;
+import org.apache.hadoop.ozone.container.common.impl.ContainerDataYaml;
+import org.apache.hadoop.ozone.container.common.impl.ContainerSet;
+import org.apache.hadoop.ozone.container.common.interfaces.Container;
+import org.apache.hadoop.ozone.container.common.interfaces.ContainerDispatcher;
+import org.apache.hadoop.ozone.container.common.interfaces.Handler;
+import org.apache.hadoop.ozone.container.keyvalue.TarContainerPacker;
+import org.apache.hadoop.ozone.container.replication.ContainerDownloader;
+import org.apache.hadoop.ozone.container.replication.SimpleContainerDownloader;
+import org.apache.hadoop.ozone.protocol.commands.ReplicateContainerCommand;
+
+  private ContainerDispatcher containerDispatcher;
+
-  private boolean cmdExecuted;
+
+  private ContainerDownloader downloader;
+
+  private Configuration conf;
+
+  private TarContainerPacker packer = new TarContainerPacker();
+
+  private ContainerSet containerSet;
+
+  private Lock lock = new ReentrantLock();
+
+  public ReplicateContainerCommandHandler(
+      Configuration conf,
+      ContainerSet containerSet,
+      ContainerDispatcher containerDispatcher,
+      ContainerDownloader downloader) {
+    this.conf = conf;
+    this.containerSet = containerSet;
+    this.downloader = downloader;
+    this.containerDispatcher = containerDispatcher;
+  }
+
+  public ReplicateContainerCommandHandler(
+      Configuration conf,
+      ContainerSet containerSet,
+      ContainerDispatcher containerDispatcher) {
+    this(conf, containerSet, containerDispatcher,
+        new SimpleContainerDownloader(conf));
+  }
-    LOG.warn("Replicate command is not yet handled");
+
+    ReplicateContainerCommand replicateCommand =
+        (ReplicateContainerCommand) command;
-      cmdExecuted = true;
+
+      long containerID = replicateCommand.getContainerID();
+      LOG.info("Starting replication of container {} from {}", containerID,
+          replicateCommand.getSourceDatanodes());
+      CompletableFuture<Path> tempTarFile = downloader
+          .getContainerDataFromReplicas(containerID,
+              replicateCommand.getSourceDatanodes());
+
+      CompletableFuture<Void> result =
+          tempTarFile.thenAccept(path -> {
+            LOG.info("Container {} is downloaded, starting to import.",
+                containerID);
+            importContainer(containerID, path);
+          });
+
+      result.whenComplete((aVoid, throwable) -> {
+        if (throwable != null) {
+          LOG.error("Container replication was unsuccessful .", throwable);
+        } else {
+          LOG.info("Container {} is replicated successfully", containerID);
+        }
+      });
-      updateCommandStatus(context, command, cmdExecuted, LOG);
+      updateCommandStatus(context, command, true, LOG);
+
+    }
+  }
+
+  protected void importContainer(long containerID, Path tarFilePath) {
+    lock.lock();
+    try {
+      ContainerData originalContainerData;
+      try (FileInputStream tempContainerTarStream = new FileInputStream(
+          tarFilePath.toFile())) {
+        byte[] containerDescriptorYaml =
+            packer.unpackContainerDescriptor(tempContainerTarStream);
+        originalContainerData = ContainerDataYaml.readContainer(
+            containerDescriptorYaml);
+      }
+
+      try (FileInputStream tempContainerTarStream = new FileInputStream(
+          tarFilePath.toFile())) {
+
+        Handler handler = containerDispatcher.getHandler(
+            originalContainerData.getContainerType());
+
+        Container container = handler.importContainer(containerID,
+            originalContainerData.getMaxSize(),
+            tempContainerTarStream,
+            packer);
+
+        containerSet.addContainer(container);
+      }
+
+    } catch (Exception e) {
+      LOG.error(
+          "Can't import the downloaded container data id=" + containerID,
+          e);
+      try {
+        Files.delete(tarFilePath);
+      } catch (Exception ex) {
+        LOG.error(
+            "Container import is failed and the downloaded file can't be "
+                + "deleted: "
+                + tarFilePath.toAbsolutePath().toString());
+      }
+    } finally {
+      lock.unlock();
