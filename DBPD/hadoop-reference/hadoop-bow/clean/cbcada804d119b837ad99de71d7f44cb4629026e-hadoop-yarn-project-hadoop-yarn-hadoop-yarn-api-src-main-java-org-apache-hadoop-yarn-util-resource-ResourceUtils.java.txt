YARN-9124. Resolve contradiction in ResourceUtils: addMandatoryResources / checkMandatoryResources work differently (#1121)


-  private static void checkMandatoryResources(
+  /**
+   * Ensures that historical resource types (like {@link
+   * ResourceInformation#MEMORY_URI}, {@link ResourceInformation#VCORES_URI})
+   * are not getting overridden in the resourceInformationMap.
+   *
+   * Also checks whether {@link ResourceInformation#SPECIAL_RESOURCES} are not
+   * configured poorly: having their proper units and types.
+   *
+   * @param resourceInformationMap Map object having keys as resources names
+   *                               and {@link ResourceInformation} objects as
+   *                               values
+   * @throws YarnRuntimeException if either of the two above
+   * conditions do not hold
+   */
+  private static void checkSpecialResources(
-     * Supporting 'memory', 'memory-mb', 'vcores' also as invalid resource names, in addition to
-     * 'MEMORY' for historical reasons
+     * Supporting 'memory', 'memory-mb', 'vcores' also as invalid resource
+     * names, in addition to 'MEMORY' for historical reasons
-    String keys[] = { "memory", ResourceInformation.MEMORY_URI,
+    String[] keys = { "memory", ResourceInformation.MEMORY_URI,
-        ResourceInformation.MANDATORY_RESOURCES.entrySet()) {
+        ResourceInformation.SPECIAL_RESOURCES.entrySet()) {
+  /**
+   * Ensures that {@link ResourceUtils#MEMORY} and {@link ResourceUtils#VCORES}
+   * resources are contained in the map received as parameter.
+   *
+   * @param res Map object having keys as resources names
+   *            and {@link ResourceInformation} objects as values
+   */
-    checkMandatoryResources(resourceInformationMap);
+    checkSpecialResources(resourceInformationMap);
-          checkMandatoryResources(nodeResources);
+          checkSpecialResources(nodeResources);
