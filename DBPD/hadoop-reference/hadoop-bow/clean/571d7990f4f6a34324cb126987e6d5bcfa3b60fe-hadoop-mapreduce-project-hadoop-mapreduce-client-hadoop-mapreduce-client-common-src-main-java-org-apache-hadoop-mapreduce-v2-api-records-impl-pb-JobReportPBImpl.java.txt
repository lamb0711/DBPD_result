Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.hadoop.mapreduce.v2.api.records.AMInfo;
+import org.apache.hadoop.mapreduce.v2.proto.MRProtos.AMInfoProto;
-public class JobReportPBImpl extends ProtoBase<JobReportProto> implements JobReport {
+public class JobReportPBImpl extends ProtoBase<JobReportProto> implements
+    JobReport {
+  private List<AMInfo> amInfos = null;
-  public JobReportProto getProto() {
+  public synchronized JobReportProto getProto() {
-  private void mergeLocalToBuilder() {
+  private synchronized void mergeLocalToBuilder() {
+    if (this.amInfos != null) {
+      addAMInfosToProto();
+    }
-  private void mergeLocalToProto() {
+  private synchronized void mergeLocalToProto() {
-  private void maybeInitBuilder() {
+  private synchronized void maybeInitBuilder() {
-  public JobId getJobId() {
+  public synchronized JobId getJobId() {
-  public void setJobId(JobId jobId) {
+  public synchronized void setJobId(JobId jobId) {
-  public JobState getJobState() {
+  public synchronized JobState getJobState() {
-  public void setJobState(JobState jobState) {
+  public synchronized void setJobState(JobState jobState) {
-  public float getMapProgress() {
+  public synchronized float getMapProgress() {
-  public void setMapProgress(float mapProgress) {
+  public synchronized void setMapProgress(float mapProgress) {
-  public float getReduceProgress() {
+  public synchronized float getReduceProgress() {
-  public void setReduceProgress(float reduceProgress) {
+  public synchronized void setReduceProgress(float reduceProgress) {
-  public float getCleanupProgress() {
+  public synchronized float getCleanupProgress() {
-  public void setCleanupProgress(float cleanupProgress) {
+  public synchronized void setCleanupProgress(float cleanupProgress) {
-  public float getSetupProgress() {
+  public synchronized float getSetupProgress() {
-  public void setSetupProgress(float setupProgress) {
+  public synchronized void setSetupProgress(float setupProgress) {
+
-  public long getStartTime() {
+  public synchronized long getSubmitTime() {
+    JobReportProtoOrBuilder p = viaProto ? proto : builder;
+    return (p.getSubmitTime());
+  }
+
+  @Override
+  public synchronized void setSubmitTime(long submitTime) {
+    maybeInitBuilder();
+    builder.setSubmitTime((submitTime));
+  }
+
+  @Override
+  public synchronized long getStartTime() {
-  public void setStartTime(long startTime) {
+  public synchronized void setStartTime(long startTime) {
-  public long getFinishTime() {
+  public synchronized long getFinishTime() {
-  public void setFinishTime(long finishTime) {
+  public synchronized void setFinishTime(long finishTime) {
-  public String getUser() {
+  public synchronized String getUser() {
-  public void setUser(String user) {
+  public synchronized void setUser(String user) {
-  public String getJobName() {
+  public synchronized String getJobName() {
-  public void setJobName(String jobName) {
+  public synchronized void setJobName(String jobName) {
-  public String getTrackingUrl() {
+  public synchronized String getTrackingUrl() {
-  public void setTrackingUrl(String trackingUrl) {
+  public synchronized void setTrackingUrl(String trackingUrl) {
-  public String getDiagnostics() {
+  public synchronized String getDiagnostics() {
-  public void setDiagnostics(String diagnostics) {
+  public synchronized void setDiagnostics(String diagnostics) {
-  public String getJobFile() {
+  public synchronized String getJobFile() {
-  public void setJobFile(String jobFile) {
+  public synchronized void setJobFile(String jobFile) {
+  @Override
+  public synchronized List<AMInfo> getAMInfos() {
+    initAMInfos();
+    return this.amInfos;
+  }
+  
+  @Override
+  public synchronized void setAMInfos(List<AMInfo> amInfos) {
+    maybeInitBuilder();
+    if (amInfos == null) {
+      this.builder.clearAmInfos();
+      this.amInfos = null;
+      return;
+    }
+    initAMInfos();
+    this.amInfos.clear();
+    this.amInfos.addAll(amInfos);
+  }
+  
+  
+  private synchronized void initAMInfos() {
+    if (this.amInfos != null) {
+      return;
+    }
+    JobReportProtoOrBuilder p = viaProto ? proto : builder;
+    List<AMInfoProto> list = p.getAmInfosList();
+    
+    this.amInfos = new ArrayList<AMInfo>();
+
+    for (AMInfoProto amInfoProto : list) {
+      this.amInfos.add(convertFromProtoFormat(amInfoProto));
+    }
+  }
+
+  private synchronized void addAMInfosToProto() {
+    maybeInitBuilder();
+    builder.clearAmInfos();
+    if (this.amInfos == null)
+      return;
+    for (AMInfo amInfo : this.amInfos) {
+      builder.addAmInfos(convertToProtoFormat(amInfo));
+    }
+  }
+
+  private AMInfoPBImpl convertFromProtoFormat(AMInfoProto p) {
+    return new AMInfoPBImpl(p);
+  }
+
+  private AMInfoProto convertToProtoFormat(AMInfo t) {
+    return ((AMInfoPBImpl)t).getProto();
+  }
+
-
-
-
