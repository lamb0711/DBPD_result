YARN-10067. Add dry-run feature to FS-CS converter tool. Contributed by Peter Bacsko

+import java.io.File;
+import java.util.function.Supplier;
+
-import java.io.File;
+import com.google.common.annotations.VisibleForTesting;
-  private final FSConfigToCSConfigConverter converter;
-  public FSConfigToCSConfigArgumentHandler(FSConfigToCSConfigConverter
-      converter) {
-    this.converter = converter;
+  private FSConfigToCSConfigRuleHandler ruleHandler;
+  private FSConfigToCSConfigConverterParams converterParams;
+  private ConversionOptions conversionOptions;
+
+  private Supplier<FSConfigToCSConfigConverter>
+      converterFunc = this::getConverter;
+
+  public FSConfigToCSConfigArgumentHandler() {
+    this.conversionOptions = new ConversionOptions(new DryRunResultHolder(),
+        false);
+  }
+
+  @VisibleForTesting
+  FSConfigToCSConfigArgumentHandler(ConversionOptions conversionOptions) {
+    this.conversionOptions = conversionOptions;
+    DRY_RUN("dry run", "d", "dry-run", "Performs a dry-run of the conversion." +
+            "Outputs whether the conversion is possible or not.", false),
+    int retVal = 0;
-      checkOptionPresent(cliParser, CliOption.YARN_SITE);
-      checkOutputDefined(cliParser);
+      FSConfigToCSConfigConverter converter =
+          prepareAndGetConverter(cliParser);
-      FSConfigToCSConfigConverterParams params = validateInputFiles(cliParser);
-      converter.convert(params);
+      converter.convert(converterParams);
-      return -1;
+      retVal = -1;
-      logAndStdErr(e, msg);
-      return -1;
+      handleException(e, msg);
+      retVal = -1;
-      logAndStdErr(e, msg);
-      return -1;
+      handleException(e, msg);
+      retVal = -1;
-      logAndStdErr(e, msg);
-      return -1;
+      handleException(e, msg);
+      retVal = -1;
-    return 0;
+    conversionOptions.handleParsingFinished();
+
+    return retVal;
-  private void logAndStdErr(Exception e, String msg) {
+  private void handleException(Exception e, String msg) {
+    conversionOptions.handleGenericException(e, msg);
+  }
+
+  static void logAndStdErr(Exception e, String msg) {
+  private FSConfigToCSConfigConverter prepareAndGetConverter(
+      CommandLine cliParser) {
+    conversionOptions.setDryRun(
+        cliParser.hasOption(CliOption.DRY_RUN.shortSwitch));
+
+    checkOptionPresent(cliParser, CliOption.YARN_SITE);
+    checkOutputDefined(cliParser);
+
+    converterParams = validateInputFiles(cliParser);
+    ruleHandler = new FSConfigToCSConfigRuleHandler(conversionOptions);
+
+    return converterFunc.get();
+  }
+
+
+  private FSConfigToCSConfigConverter getConverter() {
+    return new FSConfigToCSConfigConverter(ruleHandler, conversionOptions);
+  }
+
+  @VisibleForTesting
+  void setConverterSupplier(Supplier<FSConfigToCSConfigConverter>
+      supplier) {
+    this.converterFunc = supplier;
+  }
