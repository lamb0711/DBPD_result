HDDS-455. Ozone genconf tool must use picocli. Contributed by Dinesh Chitlangia.

+import org.apache.hadoop.hdds.cli.GenericCli;
+import org.apache.hadoop.hdds.cli.HddsVersionProvider;
+import picocli.CommandLine.Command;
+import picocli.CommandLine.Parameters;
+import picocli.CommandLine.PicocliException;
-
- * <li>ozone genconf -output <Path to output file></li>
- * <li>ozone genconf -help</li>
+ * <li>ozone genconf <Path to output file></li>
+ * <li>ozone genconf --help</li>
+ * <li>ozone genconf -h</li>
-public final class GenerateOzoneRequiredConfigurations {
+@Command(
+    name = "ozone genconf",
+    description = "Tool to generate template ozone-site.xml",
+    versionProvider = HddsVersionProvider.class,
+    mixinStandardHelpOptions = true)
+public final class GenerateOzoneRequiredConfigurations extends GenericCli {
-  private static final String OUTPUT = "-output";
-  private static final String HELP = "-help";
-  private static final String USAGE = "Usage: \nozone genconf "
-      + OUTPUT + " <Path to output file> \n"
-      + "ozone genconf "
-      + HELP;
-  private static final int SUCCESS = 0;
-  private static final int FAILURE = 1;
+  @Parameters(arity = "1..1",
+      description = "Directory path where ozone-site file should be generated.")
+  private String path;
-  private GenerateOzoneRequiredConfigurations() {
-
-  }
-   * @throws JAXBException
+   *
-  public static void main(String[] args) {
-
-    try {
-      if (args.length == 0) {
-        System.out.println(USAGE);
-        System.exit(1);
-      }
-
-      switch (args[0]) {
-      case OUTPUT:
-        if (args.length > 1) {
-          int result = generateConfigurations(args[1]);
-        } else {
-          System.out.println("Path to output file is mandatory");
-          System.out.println(USAGE);
-          System.exit(1);
-        }
-        break;
-
-      case HELP:
-        System.out.println(USAGE);
-        System.exit(0);
-        break;
-
-      default:
-        System.out.println(USAGE);
-        System.exit(1);
-      }
-
-    } catch (Exception e) {
-      e.printStackTrace();
-    }
+  public static void main(String[] args) throws Exception {
+    new GenerateOzoneRequiredConfigurations().run(args);
-  /**
-   * Check if the path is valid directory.
-   *
-   * @param path
-   * @return true, if path is valid directory, else return false
-   */
-  public static boolean isValidPath(String path) {
-    try {
-      return Files.isDirectory(Paths.get(path));
-    } catch (InvalidPathException | NullPointerException ex) {
-      return false;
-    }
-  }
-
-  /**
-   * Check if user has permission to write in the specified path.
-   *
-   * @param path
-   * @return true, if the user has permission to write, else returns false
-   */
-  public static boolean canWrite(String path) {
-    File file = new File(path);
-    return file.canWrite();
+  @Override
+  public Void call() throws Exception {
+    generateConfigurations(path);
+    return null;
-   *
-   * @return SUCCESS(0) if file can be generated, else returns FAILURE(1)
+   * @throws PicocliException
-  public static int generateConfigurations(String path) throws JAXBException {
+  public static void generateConfigurations(String path) throws
+      PicocliException, JAXBException {
-      System.out.println("Invalid directory path.");
-      return FAILURE;
+      throw new PicocliException("Invalid directory path.");
-      System.out.println("Insufficient permission.");
-      return FAILURE;
+      throw new PicocliException("Insufficient permission.");
+  }
-    return SUCCESS;
+  /**
+   * Check if the path is valid directory.
+   *
+   * @param path
+   * @return true, if path is valid directory, else return false
+   */
+  public static boolean isValidPath(String path) {
+    try {
+      return Files.isDirectory(Paths.get(path));
+    } catch (InvalidPathException | NullPointerException ex) {
+      return Boolean.FALSE;
+    }
+  }
+
+  /**
+   * Check if user has permission to write in the specified path.
+   *
+   * @param path
+   * @return true, if the user has permission to write, else returns false
+   */
+  public static boolean canWrite(String path) {
+    File file = new File(path);
+    return file.canWrite();
