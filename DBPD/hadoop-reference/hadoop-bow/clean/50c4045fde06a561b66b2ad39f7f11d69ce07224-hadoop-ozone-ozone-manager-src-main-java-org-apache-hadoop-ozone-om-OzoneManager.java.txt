HDDS-805. Block token: Client api changes for block token. Contributed by Ajay Kumar.

+import java.util.Objects;
+import org.apache.hadoop.hdds.HddsConfigKeys;
+import org.apache.hadoop.hdds.security.x509.SecurityConfig;
+import org.apache.hadoop.ozone.security.OzoneBlockTokenSecretManager;
-      secretManager;
+      delegationTokenMgr;
+  private OzoneBlockTokenSecretManager blockTokenMgr;
+  private final Text omRpcAddressTxt;
+  private final SecurityConfig secConfig;
-    if (!testSecureOmFlag) {
+    if (!testSecureOmFlag || !isOzoneSecurityEnabled()) {
-    secretManager = createSecretManager(configuration);
+    omRpcAddressTxt = new Text(OmUtils.getOmRpcAddress(configuration));
+    secConfig = new SecurityConfig(configuration);
+    if (secConfig.isGrpcBlockTokenEnabled()) {
+      blockTokenMgr = createBlockTokenSecretManager(configuration);
+    }
+    if(secConfig.isSecurityEnabled()){
+      delegationTokenMgr = createDelegationTokenSecretManager(configuration);
+    }
-    keyManager =
-        new KeyManagerImpl(scmBlockClient, metadataManager, configuration,
-            omStorage.getOmId());
+    keyManager = new KeyManagerImpl(scmBlockClient, metadataManager,
+        configuration, omStorage.getOmId(), blockTokenMgr);
-  private OzoneDelegationTokenSecretManager createSecretManager(
+  private OzoneDelegationTokenSecretManager createDelegationTokenSecretManager(
-  private void stopSecretManager() throws IOException {
-    if (secretManager != null) {
-      LOG.info("Stopping OM secret manager");
-      secretManager.stop();
+  private OzoneBlockTokenSecretManager createBlockTokenSecretManager(
+      OzoneConfiguration conf) {
+
+    long expiryTime = conf.getTimeDuration(
+        HddsConfigKeys.HDDS_BLOCK_TOKEN_EXPIRY_TIME,
+        HddsConfigKeys.HDDS_BLOCK_TOKEN_EXPIRY_TIME_DEFAULT,
+        TimeUnit.MILLISECONDS);
+    // TODO: Pass OM cert serial ID.
+    if (testSecureOmFlag) {
+      return new OzoneBlockTokenSecretManager(secConfig, expiryTime, "1");
+    }
+    Objects.nonNull(certClient);
+    return new OzoneBlockTokenSecretManager(secConfig, expiryTime,
+        certClient.getCertificate(OM_DAEMON).getSerialNumber().toString());
+  }
+
+  private void stopSecretManager() {
+    if (blockTokenMgr != null) {
+      LOG.info("Stopping OM block token manager.");
+      try {
+        blockTokenMgr.stop();
+      } catch (IOException e) {
+        LOG.error("Failed to stop block token manager", e);
+      }
+    }
+
+    if (delegationTokenMgr != null) {
+      LOG.info("Stopping OM delegation token secret manager.");
+      try {
+        delegationTokenMgr.stop();
+      } catch (IOException e) {
+        LOG.error("Failed to stop delegation token manager", e);
+      }
-  private void startSecretManager() {
-    if (secretManager != null) {
+  @VisibleForTesting
+  public void startSecretManager() {
+    try {
+      readKeyPair();
+    } catch (OzoneSecurityException e) {
+      LOG.error("Unable to read key pair for OM.", e);
+      throw new RuntimeException(e);
+    }
+    if (secConfig.isGrpcBlockTokenEnabled() && blockTokenMgr != null) {
-        readKeyPair();
-        LOG.info("Starting OM secret manager");
-        secretManager.start(keyPair);
+        LOG.info("Starting OM block token secret manager");
+        blockTokenMgr.start(keyPair);
-        // Inability to start secret manager
-        // can't be recovered from.
-        LOG.error("Error starting secret manager.", e);
+        // Unable to start secret manager.
+        LOG.error("Error starting block token secret manager.", e);
+        throw new RuntimeException(e);
+      }
+    }
+
+    if (delegationTokenMgr != null) {
+      try {
+        LOG.info("Starting OM delegation token secret manager");
+        delegationTokenMgr.start(keyPair);
+      } catch (IOException e) {
+        // Unable to start secret manager.
+        LOG.error("Error starting delegation token secret manager.", e);
+  /**
+   * For testing purpose only.
+   * */
-    // TODO: Initialize it in contructor with implementation for certClient.
+    // TODO: Initialize it in constructor with implementation for certClient.
-        .setSecretManager(secretManager)
+        .setSecretManager(delegationTokenMgr)
-    boolean shouldRun = shouldUseDelegationTokens() && isOzoneSecurityEnabled();
-    boolean running = secretManager.isRunning();
-    if (shouldRun && !running) {
-      startSecretManager();
+    boolean shouldRun = isOzoneSecurityEnabled();
+    if (shouldRun) {
+      boolean running = delegationTokenMgr.isRunning()
+          && blockTokenMgr.isRunning();
+      if(!running){
+        startSecretManager();
+      }
-    if (secretManager == null || !secretManager.isRunning()) {
+    if (delegationTokenMgr == null || !delegationTokenMgr.isRunning()) {
-    token = secretManager.createToken(owner, renewer, realUser);
+    token = delegationTokenMgr.createToken(owner, renewer, realUser);
-      expiryTime = secretManager.renewToken(token, renewer);
+      expiryTime = delegationTokenMgr.renewToken(token, renewer);
-      id = secretManager.cancelToken(token, canceller);
+      id = delegationTokenMgr.cancelToken(token, canceller);
