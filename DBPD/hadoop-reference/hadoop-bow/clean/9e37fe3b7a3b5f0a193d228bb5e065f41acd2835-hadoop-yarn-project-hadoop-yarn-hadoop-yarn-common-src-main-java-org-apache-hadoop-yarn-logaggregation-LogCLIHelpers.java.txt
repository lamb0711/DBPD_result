YARN-4905. Improved "yarn logs" command-line to optionally show log metadata also. Contributed by Xuan Gong.

-    Path remoteRootLogDir = new Path(getConf().get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String suffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf());
-    Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(
-        remoteRootLogDir, applicationId, jobOwner,
-        suffix);
-    RemoteIterator<FileStatus> nodeFiles;
-    try {
-      Path qualifiedLogDir =
-          FileContext.getFileContext(getConf()).makeQualified(
-            remoteAppLogDir);
-      nodeFiles =
-          FileContext.getFileContext(qualifiedLogDir.toUri(), getConf())
-            .listStatus(remoteAppLogDir);
-    } catch (FileNotFoundException fnf) {
-      logDirNotExist(remoteAppLogDir.toString());
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        applicationId, jobOwner);
+    if (nodeFiles == null) {
-    Path remoteRootLogDir = new Path(getConf().get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String user = jobOwner;
-    String logDirSuffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(
-        getConf());
-    Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(
-        remoteRootLogDir, applicationId, user, logDirSuffix);
-    RemoteIterator<FileStatus> nodeFiles;
-    try {
-      Path qualifiedLogDir =
-          FileContext.getFileContext(getConf()).makeQualified(remoteAppLogDir);
-      nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(),
-          getConf()).listStatus(remoteAppLogDir);
-    } catch (FileNotFoundException fnf) {
-      logDirNotExist(remoteAppLogDir.toString());
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        applicationId, jobOwner);
+    if (nodeFiles == null) {
-    Path remoteRootLogDir = new Path(getConf().get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String user = appOwner;
-    String logDirSuffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf());
-    // TODO Change this to get a list of files from the LAS.
-    Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(
-        remoteRootLogDir, appId, user, logDirSuffix);
-    RemoteIterator<FileStatus> nodeFiles;
-    try {
-      Path qualifiedLogDir =
-          FileContext.getFileContext(getConf()).makeQualified(remoteAppLogDir);
-      nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(),
-          getConf()).listStatus(remoteAppLogDir);
-    } catch (FileNotFoundException fnf) {
-      logDirNotExist(remoteAppLogDir.toString());
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        appId, appOwner);
+    if (nodeFiles == null) {
-      emptyLogDir(remoteAppLogDir.toString());
+      emptyLogDir(getRemoteAppLogDir(appId, appOwner).toString());
+  @Private
+  public void printLogMetadata(ApplicationId appId,
+      String containerIdStr, String nodeId, String appOwner,
+      PrintStream out, PrintStream err)
+      throws IOException {
+    boolean getAllContainers = (containerIdStr == null);
+    String nodeIdStr = (nodeId == null) ? null
+        : LogAggregationUtils.getNodeString(nodeId);
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        appId, appOwner);
+    if (nodeFiles == null) {
+      return;
+    }
+    boolean foundAnyLogs = false;
+    while (nodeFiles.hasNext()) {
+      FileStatus thisNodeFile = nodeFiles.next();
+      if (nodeIdStr != null) {
+        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {
+          continue;
+        }
+      }
+      if (!thisNodeFile.getPath().getName()
+          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
+        AggregatedLogFormat.LogReader reader =
+            new AggregatedLogFormat.LogReader(getConf(),
+            thisNodeFile.getPath());
+        try {
+          DataInputStream valueStream;
+          LogKey key = new LogKey();
+          valueStream = reader.next(key);
+          while (valueStream != null) {
+            if (getAllContainers || (key.toString().equals(containerIdStr))) {
+              String containerString =
+                  "\n\nContainer: " + key + " on "
+                  + thisNodeFile.getPath().getName();
+              out.println(containerString);
+              out.println("Log Upload Time:"
+                  + thisNodeFile.getModificationTime());
+              out.println(StringUtils.repeat("=", containerString.length()));
+              while (true) {
+                try {
+                  LogReader.readContainerMetaDataAndSkipData(valueStream, out);
+                } catch (EOFException eof) {
+                  break;
+                }
+              }
+              foundAnyLogs = true;
+              if (!getAllContainers) {
+                break;
+              }
+            }
+            // Next container
+            key = new LogKey();
+            valueStream = reader.next(key);
+          }
+        } finally {
+          reader.close();
+        }
+      }
+    }
+    if (!foundAnyLogs) {
+      if (containerIdStr != null && nodeId != null) {
+        err.println("The container " + containerIdStr + " couldn't be found "
+            + "on the node specified: " + nodeId);
+      } else if (nodeId != null) {
+        err.println("Can not find log metadata for any containers on "
+            + nodeId);
+      } else if (containerIdStr != null) {
+        err.println("Can not find log metadata for container: "
+            + containerIdStr);
+      }
+    }
+  }
+
+  @Private
+  public void printNodesList(ApplicationId appId, String appOwner,
+      PrintStream out, PrintStream err) throws IOException {
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        appId, appOwner);
+    if (nodeFiles == null) {
+      return;
+    }
+    boolean foundNode = false;
+    StringBuilder sb = new StringBuilder();
+    while (nodeFiles.hasNext()) {
+      FileStatus thisNodeFile = nodeFiles.next();
+      sb.append(thisNodeFile.getPath().getName() + "\n");
+      foundNode = true;
+    }
+    if (!foundNode) {
+      err.println("No nodes found that aggregated logs for "
+          + "the application: " + appId);
+    } else {
+      out.println(sb.toString());
+    }
+  }
+
+  private RemoteIterator<FileStatus> getRemoteNodeFileDir(ApplicationId appId,
+      String appOwner) throws IOException {
+    Path remoteAppLogDir = getRemoteAppLogDir(appId, appOwner);
+    RemoteIterator<FileStatus> nodeFiles = null;
+    try {
+      Path qualifiedLogDir =
+          FileContext.getFileContext(getConf()).makeQualified(remoteAppLogDir);
+      nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(),
+          getConf()).listStatus(remoteAppLogDir);
+    } catch (FileNotFoundException fnf) {
+      logDirNotExist(remoteAppLogDir.toString());
+    }
+    return nodeFiles;
+  }
+
+  private Path getRemoteAppLogDir(ApplicationId appId, String appOwner) {
+    Path remoteRootLogDir = new Path(getConf().get(
+        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
+        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
+    String user = appOwner;
+    String logDirSuffix = LogAggregationUtils
+        .getRemoteNodeLogDirSuffix(getConf());
+    // TODO Change this to get a list of files from the LAS.
+    return LogAggregationUtils.getRemoteAppLogDir(
+        remoteRootLogDir, appId, user, logDirSuffix);
+  }
+
-    System.out.println("Logs for container " + containerId
+    System.err.println("Logs for container " + containerId
-    System.out.println(remoteAppLogDir + " does not exist.");
-    System.out.println("Log aggregation has not completed or is not enabled.");
+    System.err.println(remoteAppLogDir + " does not exist.");
+    System.err.println("Log aggregation has not completed or is not enabled.");
-    System.out.println(remoteAppLogDir + " does not have any log files.");
+    System.err.println(remoteAppLogDir + " does not have any log files.");
