HDDS-1. Remove SCM Block DB. Contributed by Xiaoyu Yao.

+import com.google.common.primitives.Longs;
-import org.apache.hadoop.hdds.scm.container.common.helpers.Pipeline;
-import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.hdds.client.BlockID;
-import org.apache.hadoop.utils.MetadataKeyFilters.KeyPrefixFilter;
-import org.apache.hadoop.utils.MetadataKeyFilters.MetadataKeyFilter;
-  public void putKey(Pipeline pipeline, KeyData data) throws IOException {
+  public void putKey(KeyData data) throws IOException {
+    Preconditions.checkNotNull(data, "KeyData cannot be null for put operation.");
+    Preconditions.checkState(data.getContainerID() >= 0, "Container ID cannot be negative");
-      Preconditions.checkNotNull(pipeline, "Pipeline cannot be null");
-      String containerName = pipeline.getContainerName();
-      Preconditions.checkNotNull(containerName,
-          "Container name cannot be null");
-      ContainerData cData = containerManager.readContainer(containerName);
+      ContainerData cData = containerManager.readContainer(
+          data.getContainerID());
-      db.put(data.getKeyName().getBytes(KeyUtils.ENCODING), data
+      db.put(Longs.toByteArray(data.getLocalID()), data
-      Preconditions.checkNotNull(data.getContainerName(),
+      Preconditions.checkNotNull(data.getContainerID(),
-          .getContainerName());
+          .getContainerID());
-      byte[] kData = db.get(data.getKeyName().getBytes(KeyUtils.ENCODING));
+      byte[] kData = db.get(Longs.toByteArray(data.getLocalID()));
-  public void deleteKey(Pipeline pipeline, String keyName)
+  public void deleteKey(BlockID blockID)
+    Preconditions.checkNotNull(blockID, "block ID cannot be null.");
+    Preconditions.checkState(blockID.getContainerID() >= 0,
+        "Container ID cannot be negative.");
+    Preconditions.checkState(blockID.getLocalID() >= 0,
+        "Local ID cannot be negative.");
+
-      Preconditions.checkNotNull(pipeline, "Pipeline cannot be null");
-      String containerName = pipeline.getContainerName();
-      Preconditions.checkNotNull(containerName,
-          "Container name cannot be null");
-      ContainerData cData = containerManager.readContainer(containerName);
+
+      ContainerData cData = containerManager
+          .readContainer(blockID.getContainerID());
-      byte[] kData = db.get(keyName.getBytes(KeyUtils.ENCODING));
+      byte[] kKey = Longs.toByteArray(blockID.getLocalID());
+      byte[] kData = db.get(kKey);
-      db.delete(keyName.getBytes(KeyUtils.ENCODING));
+      db.delete(kKey);
-      Pipeline pipeline, String prefix, String startKey, int count)
+      long containerID, long startLocalID, int count)
-    Preconditions.checkNotNull(pipeline,
-        "Pipeline cannot be null.");
+    Preconditions.checkState(containerID >= 0, "Container ID cannot be negative");
+    Preconditions.checkState(startLocalID >= 0, "startLocal ID cannot be negative");
-    ContainerData cData = containerManager.readContainer(pipeline
-        .getContainerName());
+    ContainerData cData = containerManager.readContainer(containerID);
-    List<KeyData> result = new ArrayList<KeyData>();
-    byte[] startKeyInBytes = startKey == null ? null :
-        DFSUtil.string2Bytes(startKey);
-    MetadataKeyFilter prefixFilter = new KeyPrefixFilter(prefix);
+    List<KeyData> result = new ArrayList<>();
+    byte[] startKeyInBytes = Longs.toByteArray(startLocalID);
-        db.getSequentialRangeKVs(startKeyInBytes, count, prefixFilter);
+        db.getSequentialRangeKVs(startKeyInBytes, count, null);
-      String keyName = KeyUtils.getKeyName(entry.getKey());
-      KeyData data = new KeyData(value.getContainerName(), keyName);
+      KeyData data = new KeyData(value.getBlockID());
