Reverting the previous trunk merge since it added other unintended changes in addition


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1177127 13f79535-47bb-0310-9956-ffa450edef68

-* Licensed to the Apache Software Foundation (ASF) under one
-* or more contributor license agreements.  See the NOTICE file
-* distributed with this work for additional information
-* regarding copyright ownership.  The ASF licenses this file
-* to you under the Apache License, Version 2.0 (the
-* "License"); you may not use this file except in compliance
-* with the License.  You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-public class InlineDispatcher extends AsyncDispatcher {
-  private static final Log LOG = LogFactory.getLog(InlineDispatcher.class);
-
-  private class TestEventHandler implements EventHandler {
+class InlineDispatcher extends AsyncDispatcher {
+  private class InlineEventHandler implements EventHandler {
+    private final InlineDispatcher dispatcher;
+    public InlineEventHandler(InlineDispatcher dispatcher) {
+      this.dispatcher = dispatcher;
+    }
-      dispatch(event);
+      this.dispatcher.dispatch(event);
-  @Override
-  protected void dispatch(Event event) {
-      LOG.info("Dispatching the event " + event.getClass().getName() + "."
-        + event.toString());
-
-    Class<? extends Enum> type = event.getType().getDeclaringClass();
-    if (eventDispatchers.get(type) != null) {
-      eventDispatchers.get(type).handle(event);
-    }
+  public void dispatch(Event event) {
+    super.dispatch(event);
-    return new TestEventHandler();
+    return new InlineEventHandler(this);
-  
+
-      //do nothing      
-    }    
+      ; // ignore
+    }
