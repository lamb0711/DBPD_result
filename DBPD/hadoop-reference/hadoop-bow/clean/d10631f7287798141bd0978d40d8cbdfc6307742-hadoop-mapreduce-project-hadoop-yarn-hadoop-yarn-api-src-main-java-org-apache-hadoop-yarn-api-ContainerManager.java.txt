Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.classification.InterfaceAudience.Public;
+import org.apache.hadoop.classification.InterfaceStability.Stable;
+import org.apache.hadoop.yarn.api.records.Container;
+import org.apache.hadoop.yarn.api.records.ContainerId;
+import org.apache.hadoop.yarn.api.records.ContainerLaunchContext;
+import org.apache.hadoop.yarn.api.records.ContainerStatus;
+/**
+ * <p>The protocol between an <code>ApplicationMaster</code> and a 
+ * <code>NodeManager</code> to start/stop containers and to get status
+ * of running containers.</p>
+ * 
+ * <p>If security is enabled the <code>NodeManager</code> verifies that the
+ * <code>ApplicationMaster</code> has truly been allocated the container
+ * by the <code>ResourceManager</code> and also verifies all interactions such 
+ * as stopping the container or obtaining status information for the container.
+ * </p>
+ */
+@Public
+@Stable
+  /**
+   * <p>The <code>ApplicationMaster</code> requests a <code>NodeManager</code>
+   * to <em>start</em> a {@link Container} allocated to it using this interface.
+   * </p>
+   * 
+   * <p>The <code>ApplicationMaster</code> has to provide details such as
+   * allocated resource capability, security tokens (if enabled), command
+   * to be executed to start the container, environment for the process, 
+   * necessary binaries/jar/shared-objects etc. via the 
+   * {@link ContainerLaunchContext} in the {@link StartContainerRequest}.</p>
+   * 
+   * <p>Currently the <code>NodeManager</code> sends an immediate, empty 
+   * response via {@link StartContainerResponse} to signify acceptance of the
+   * request and throws an exception in case of errors. The 
+   * <code>ApplicationMaster</code> can use 
+   * {@link #getContainerStatus(GetContainerStatusRequest)} to get updated 
+   * status of the to-be-launched or launched container.</p>
+   * 
+   * @param request request to start a container
+   * @return empty response to indicate acceptance of the request 
+   *         or an exception
+   * @throws YarnRemoteException
+   */
+  @Public
+  @Stable
+  /**
+   * <p>The <code>ApplicationMaster</code> requests a <code>NodeManager</code>
+   * to <em>stop</em> a {@link Container} allocated to it using this interface.
+   * </p>
+   * 
+   * <p>The <code>ApplicationMaster</code></p> sends a 
+   * {@link StopContainerRequest} which includes the {@link ContainerId} of the
+   * container to be stopped.</p>
+   * 
+   * <p>Currently the <code>NodeManager</code> sends an immediate, empty 
+   * response via {@link StopContainerResponse} to signify acceptance of the
+   * request and throws an exception in case of errors. The 
+   * <code>ApplicationMaster</code> can use 
+   * {@link #getContainerStatus(GetContainerStatusRequest)} to get updated 
+   * status of the container.</p>
+   * 
+   * @param request request to stop a container
+   * @return empty response to indicate acceptance of the request 
+   *         or an exception
+   * @throws YarnRemoteException
+   */
+  @Public
+  @Stable
+  /**
+   * <p>The api used by the <code>ApplicationMaster</code> to request for 
+   * current status of a <code>Container</code> from the 
+   * <code>NodeManager</code>.</p>
+   * 
+   * <p>The <code>ApplicationMaster</code></p> sends a 
+   * {@link GetContainerStatusRequest} which includes the {@link ContainerId} of 
+   * the container whose status is needed.</p>
+   *
+   *<p>The <code>NodeManager</code> responds with 
+   *{@link GetContainerStatusResponse} which includes the 
+   *{@link ContainerStatus} of the container.</p>
+   *
+   * @param request request to get <code>ContainerStatus</code> of a container
+   *                with the specified <code>ContainerId</code>
+   * @return <code>ContainerStatus</code> of the container
+   * @throws YarnRemoteException
+   */
+  @Public
+  @Stable
