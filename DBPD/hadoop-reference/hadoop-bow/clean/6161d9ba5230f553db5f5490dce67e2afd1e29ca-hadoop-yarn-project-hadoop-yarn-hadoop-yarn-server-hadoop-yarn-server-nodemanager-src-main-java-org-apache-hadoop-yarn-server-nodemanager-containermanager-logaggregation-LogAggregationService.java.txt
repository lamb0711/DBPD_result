YARN-5112. Excessive log warnings for directory permission issue on NM recovery. Contributed by Jian He.
(cherry picked from commit 867cd2f5a2e5966d6a7c5f5accb2fce78f9e7778)

-  private static final Log LOG = LogFactory
-      .getLog(LogAggregationService.class);
+  private static final Log LOG = LogFactory.getLog(LogAggregationService.class);
+  private static final long MIN_LOG_ROLLING_INTERVAL = 3600;
+  // This configuration is for debug and test purpose. By setting
+  // this configuration as true. We can break the lower bound of
+  // NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS.
+  private static final String NM_LOG_AGGREGATION_DEBUG_ENABLED
+      = YarnConfiguration.NM_PREFIX + "log-aggregation.debug-enabled";
+  private long rollingMonitorInterval;
+  private boolean logPermError = true;
+
+    rollingMonitorInterval = conf.getLong(
+        YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,
+        YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);
+
+    boolean logAggregationDebugMode =
+        conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);
+
+    if (rollingMonitorInterval > 0
+        && rollingMonitorInterval < MIN_LOG_ROLLING_INTERVAL) {
+      if (logAggregationDebugMode) {
+        LOG.info("Log aggregation debug mode enabled. rollingMonitorInterval = "
+            + rollingMonitorInterval);
+      } else {
+        LOG.warn("rollingMonitorIntervall should be more than or equal to "
+            + MIN_LOG_ROLLING_INTERVAL + " seconds. Using "
+            + MIN_LOG_ROLLING_INTERVAL + " seconds instead.");
+        this.rollingMonitorInterval = MIN_LOG_ROLLING_INTERVAL;
+      }
+    } else if (rollingMonitorInterval <= 0) {
+      LOG.info("rollingMonitorInterval is set as " + rollingMonitorInterval
+          + ". The log rolling monitoring interval is disabled. "
+          + "The logs will be aggregated after this application is finished.");
+    } else {
+      LOG.info("rollingMonitorInterval is set as " + rollingMonitorInterval
+          + ". The logs will be aggregated every " + rollingMonitorInterval
+          + " seconds");
+    }
+
-      if (!perms.equals(TLDIR_PERMISSIONS)) {
+      if (!perms.equals(TLDIR_PERMISSIONS) && logPermError) {
+        logPermError = false;
+      } else {
+        logPermError = true;
-            getLocalFileContext(getConfig()));
+            getLocalFileContext(getConfig()), this.rollingMonitorInterval);
