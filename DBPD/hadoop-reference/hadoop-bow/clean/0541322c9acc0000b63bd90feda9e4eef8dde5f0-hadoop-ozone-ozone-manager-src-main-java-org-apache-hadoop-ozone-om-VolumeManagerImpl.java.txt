HDDS-1675. Cleanup Volume Request 2 phase old code. (#964)



-import org.apache.hadoop.ozone.om.helpers.OmDeleteVolumeResponse;
-import org.apache.hadoop.ozone.om.helpers.OmVolumeOwnerChangeResponse;
-  private final boolean isRatisEnabled;
+
-    isRatisEnabled = conf.getBoolean(
-        OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY,
-        OMConfigKeys.OZONE_OM_RATIS_ENABLE_DEFAULT);
-   * @return VolumeList
-  public VolumeList createVolume(OmVolumeArgs omVolumeArgs) throws IOException {
+  public void createVolume(OmVolumeArgs omVolumeArgs) throws IOException {
-      if (!isRatisEnabled) {
-        createVolumeCommitToDB(omVolumeArgs, volumeList, dbVolumeKey,
+
+      createVolumeCommitToDB(omVolumeArgs, volumeList, dbVolumeKey,
-      }
+
-      return volumeList;
-
-  @Override
-  public void applyCreateVolume(OmVolumeArgs omVolumeArgs,
-      VolumeList volumeList) throws IOException {
-    // Do we need to hold lock in apply Transactions requests?
-    String dbVolumeKey = metadataManager.getVolumeKey(omVolumeArgs.getVolume());
-    String dbUserKey = metadataManager.getUserKey(omVolumeArgs.getOwnerName());
-    try {
-      createVolumeCommitToDB(omVolumeArgs, volumeList, dbVolumeKey, dbUserKey);
-    } catch (IOException ex) {
-      LOG.error("Volume creation failed for user:{} volume:{}",
-          omVolumeArgs.getOwnerName(), omVolumeArgs.getVolume(), ex);
-      throw ex;
-    }
-  }
-
-  public OmVolumeOwnerChangeResponse setOwner(String volume, String owner)
+  public void setOwner(String volume, String owner)
-      if (!isRatisEnabled) {
-        setOwnerCommitToDB(oldOwnerVolumeList, newOwnerVolumeList,
-            volumeArgs, owner);
-      }
-      return new OmVolumeOwnerChangeResponse(oldOwnerVolumeList,
-          newOwnerVolumeList, volumeArgs, originalOwner);
+      setOwnerCommitToDB(oldOwnerVolumeList, newOwnerVolumeList,
+          volumeArgs, owner);
-  @Override
-  public void applySetOwner(String oldOwner, VolumeList oldOwnerVolumeList,
-      VolumeList newOwnerVolumeList, OmVolumeArgs newOwnerVolumeArgs)
-      throws IOException {
-    try {
-      setOwnerCommitToDB(oldOwnerVolumeList, newOwnerVolumeList,
-          newOwnerVolumeArgs, oldOwner);
-    } catch (IOException ex) {
-      LOG.error("Changing volume ownership failed for user:{} volume:{}",
-          newOwnerVolumeArgs.getOwnerName(), newOwnerVolumeArgs.getVolume(),
-          ex);
-      throw ex;
-    }
-  }
-
-   * @return OmVolumeArgs
-  public OmVolumeArgs setQuota(String volume, long quota) throws IOException {
+  public void setQuota(String volume, long quota) throws IOException {
-
-      if (!isRatisEnabled) {
-        metadataManager.getVolumeTable().put(dbVolumeKey, volumeArgs);
-      }
-      return volumeArgs;
+      metadataManager.getVolumeTable().put(dbVolumeKey, volumeArgs);
-  @Override
-  public void applySetQuota(OmVolumeArgs omVolumeArgs) throws IOException {
-    try {
-      String dbVolumeKey = metadataManager.getVolumeKey(
-          omVolumeArgs.getVolume());
-      metadataManager.getVolumeTable().put(dbVolumeKey, omVolumeArgs);
-    } catch (IOException ex) {
-      LOG.error("Changing volume quota failed for volume:{} quota:{}",
-          omVolumeArgs.getVolume(), omVolumeArgs.getQuotaInBytes(), ex);
-      throw ex;
-    }
-  }
-
-   *
-   * @return OmDeleteVolumeResponse
-  public OmDeleteVolumeResponse deleteVolume(String volume) throws IOException {
+  public void deleteVolume(String volume) throws IOException {
-      if (!isRatisEnabled) {
-        deleteVolumeCommitToDB(newVolumeList,
-            volume, owner);
-      }
-      return new OmDeleteVolumeResponse(volume, owner, newVolumeList);
+
+      deleteVolumeCommitToDB(newVolumeList, volume, owner);
-  @Override
-  public void applyDeleteVolume(String volume, String owner,
-      VolumeList newVolumeList) throws IOException {
-    try {
-      deleteVolumeCommitToDB(newVolumeList, volume, owner);
-    } catch (IOException ex) {
-      LOG.error("Delete volume failed for volume:{}", volume,
-          ex);
-      throw ex;
-    }
-  }
