YARN-8160.  Support upgrade of service that use docker containers.
            Contributed by Chandni Singh

-import org.apache.hadoop.yarn.service.api.records.Component;
+  @Override
-      Service service) throws IOException{
+      Service service, ContainerLaunchService.ComponentLaunchContext
+      compLaunchCtx) throws IOException{
-    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());
-    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()
+    launcher.setDockerImage(compLaunchCtx.getArtifact().getId());
+    launcher.setDockerNetwork(compLaunchCtx.getConfiguration()
-        compInstance.getCompSpec().getRunPrivilegedContainer());
+        compLaunchCtx.isRunPrivilegedContainer());
-   * @param component - YARN Service component
+   * @param compLaunchContext - launch context for the component.
-  private boolean checkUseEntryPoint(Component component) {
+  private boolean checkUseEntryPoint(
+      ContainerLaunchService.ComponentLaunchContext compLaunchContext) {
-    String overrideDisableValue = (component
-        .getConfiguration().getEnv(overrideDisableKey) != null) ?
-            component.getConfiguration().getEnv(overrideDisableKey) :
-                System.getenv(overrideDisableKey);
+    String overrideDisableValue = (
+        compLaunchContext.getConfiguration().getEnv(overrideDisableKey)
+            != null) ?
+            compLaunchContext.getConfiguration().getEnv(
+                overrideDisableKey) : System.getenv(overrideDisableKey);
-    Component component = instance.getComponent().getComponentSpec();
-    boolean useEntryPoint = checkUseEntryPoint(component);
+    boolean useEntryPoint = checkUseEntryPoint(compLaunchContext);
-      String launchCommand = component.getLaunchCommand();
+      String launchCommand = compLaunchContext.getLaunchCommand();
