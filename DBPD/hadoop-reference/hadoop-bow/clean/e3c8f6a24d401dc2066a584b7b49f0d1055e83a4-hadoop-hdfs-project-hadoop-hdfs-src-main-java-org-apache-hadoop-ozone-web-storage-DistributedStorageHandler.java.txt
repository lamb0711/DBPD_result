HDFS-11780. Ozone: KSM: Add putKey. Contributed by Chen Liang.

+import org.apache.hadoop.ksm.helpers.KsmKeyArgs;
+import org.apache.hadoop.ksm.helpers.KsmKeyInfo;
+import org.apache.hadoop.scm.storage.ContainerProtocolCalls;
+    KsmKeyArgs keyArgs = new KsmKeyArgs.Builder()
+        .setVolumeName(args.getVolumeName())
+        .setBucketName(args.getBucketName())
+        .setKeyName(args.getKeyName())
+        .setDataSize(args.getSize())
+        .build();
+    // contact KSM to allocate a block for key.
-    KeyInfo key = new KeyInfo();
-    key.setKeyName(args.getKeyName());
-    key.setCreatedOn(dateToString(new Date()));
-    XceiverClientSpi xceiverClient = acquireXceiverClient(containerKey);
-    return new ChunkOutputStream(containerKey, key.getKeyName(),
-        xceiverClientManager, xceiverClient, args.getRequestID(),
-        chunkSize);
+    KsmKeyInfo keyInfo = keySpaceManagerClient.allocateKey(keyArgs);
+    // TODO the following createContainer and key writes may fail, in which
+    // case we should revert the above allocateKey to KSM.
+    String containerName = keyInfo.getContainerName();
+    XceiverClientSpi xceiverClient = getContainer(containerName);
+    if (keyInfo.getShouldCreateContainer()) {
+      LOG.debug("Need to create container {} for key: {}/{}/{}", containerName,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+      ContainerProtocolCalls.createContainer(
+          xceiverClient, args.getRequestID());
+    }
+    // establish a connection to the container to write the key
+    return new ChunkOutputStream(containerKey, args.getKeyName(),
+        xceiverClientManager, xceiverClient, args.getRequestID(), chunkSize);
+  private XceiverClientSpi getContainer(String containerName)
+      throws IOException {
+    Pipeline pipeline =
+        storageContainerLocationClient.getContainer(containerName);
+    return xceiverClientManager.acquireClient(pipeline);
+  }
+
