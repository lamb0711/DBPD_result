YARN-6909. Use LightWeightedResource when number of resource types more than two. (Sunil G via wangda)

Change-Id: I90e021c5dea7abd9ec6bd73b2287c8adebe14595

-
-      pb = (ResourcePBImpl)r;
+      pb = (ResourcePBImpl) r;
+      for(ResourceInformation res : r.getResources()) {
+        pb.setResourceInformation(res.getName(), res);
+      }
-    getResourceInformation(ResourceInformation.MEMORY_URI).setValue(memory);
+    resources[MEMORY_INDEX].setValue(memory);
-    getResourceInformation(ResourceInformation.VCORES_URI).setValue(vCores);
+    resources[VCORES_INDEX].setValue(vCores);
-    initResourcesMap();
+    ResourceInformation[] types = ResourceUtils.getResourceTypesArray();
-    for (ResourceInformationProto entry : p.getResourceValueMapList()) {
-      ResourceTypes type =
-          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :
-              ResourceTypes.COUNTABLE;
+    resources = new ResourceInformation[types.length];
-      // When unit not specified in proto, use the default unit.
-      String units =
-          entry.hasUnits() ? entry.getUnits() : ResourceUtils.getDefaultUnit(
-              entry.getKey());
-      long value = entry.hasValue() ? entry.getValue() : 0L;
-      ResourceInformation ri = ResourceInformation
-          .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);
+    for (ResourceInformationProto entry : p.getResourceValueMapList()) {
-        LOG.warn("Got unknown resource type: " + ri.getName() + "; skipping");
+        LOG.warn("Got unknown resource type: " + entry.getKey() + "; skipping");
-        resources[index].setResourceType(ri.getResourceType());
-        resources[index].setUnits(ri.getUnits());
-        resources[index].setValue(value);
+        resources[index] = newDefaultInformation(types[index], entry);
+
+    resources[MEMORY_INDEX] = ResourceInformation
+        .newInstance(ResourceInformation.MEMORY_MB);
+    resources[VCORES_INDEX] = ResourceInformation
+        .newInstance(ResourceInformation.VCORES);
+
+    // Update missing resource information on respective index.
+    updateResourceInformationMap(types);
+  }
+
+  private void updateResourceInformationMap(ResourceInformation[] types) {
+    for (int i = 0; i < types.length; i++) {
+      if (resources[i] == null) {
+        resources[i] = ResourceInformation.newInstance(types[i]);
+      }
+    }
+  }
+
+  private static ResourceInformation newDefaultInformation(
+      ResourceInformation resourceInformation, ResourceInformationProto entry) {
+    ResourceInformation ri = new ResourceInformation();
+    ri.setName(resourceInformation.getName());
+    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());
+    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());
+    ri.setResourceType(entry.hasType()
+        ? ProtoUtils.convertFromProtoFormat(entry.getType())
+        : ResourceTypes.COUNTABLE);
+    ri.setUnits(
+        entry.hasUnits() ? entry.getUnits() : resourceInformation.getUnits());
+    ri.setValue(entry.hasValue() ? entry.getValue() : 0L);
+    return ri;
-    if (!resource.equals(resourceInformation.getName())) {
-      resourceInformation.setName(resource);
-    }
-    ResourceInformation storedResourceInfo = getResourceInformation(resource);
+    ResourceInformation storedResourceInfo = super.getResourceInformation(
+        resource);
-  private void initResourcesMap() {
-    if (resources == null) {
-      ResourceInformation[] types = ResourceUtils.getResourceTypesArray();
-      if (types == null) {
-        throw new YarnRuntimeException(
-            "Got null return value from ResourceUtils.getResourceTypes()");
-      }
-
-      resources = new ResourceInformation[types.length];
-      for (ResourceInformation entry : types) {
-        int index = ResourceUtils.getResourceTypeIndex().get(entry.getName());
-        resources[index] = ResourceInformation.newInstance(entry);
-      }
-    }
-  }
-
-    if(resources != null && resources.length != 0) {
+    if (resources != null && resources.length != 0) {
-}  
+}
