HADOOP-6323. Add comparators to the serialization API.  Contributed by Aaron Kimball.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@889877 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.io.RawComparator;
+import org.apache.hadoop.io.WritableComparable;
+import org.apache.hadoop.io.WritableComparator;
+import org.apache.hadoop.util.StringUtils;
-  
+    private Class<?> serializedClass;
-    public WritableSerializer(Map<String, String> metadata) {
+    public WritableSerializer(Configuration conf,
+        Map<String, String> metadata) {
+
+      // If this metadata specifies a serialized class, memoize the
+      // class object for this.
+      String className = this.metadata.get(CLASS_KEY);
+      if (null != className) {
+        try {
+          this.serializedClass = conf.getClassByName(className);
+        } catch (ClassNotFoundException cnfe) {
+          throw new RuntimeException(cnfe);
+        }
+      } else {
+        throw new UnsupportedOperationException("the "
+            + CLASS_KEY + " metadata is missing, but is required.");
+      }
+      if (serializedClass != w.getClass()) {
+        throw new IOException("Type mismatch in serialization: expected "
+            + serializedClass + "; received " + w.getClass());
+      }
-    if (getClass().getName().equals(metadata.get(SERIALIZATION_KEY))) {
-      return true;
+    String intendedSerializer = metadata.get(SERIALIZATION_KEY);
+    if (intendedSerializer != null &&
+        !getClass().getName().equals(intendedSerializer)) {
+      return false;
-    return new WritableSerializer(metadata);
+    return new WritableSerializer(getConf(), metadata);
+  @Override
+  @SuppressWarnings("unchecked")
+  public RawComparator<Writable> getRawComparator(Map<String, String> metadata) {
+    Class<?> klazz = getClassFromMetadata(metadata);
+    if (null == klazz) {
+      throw new IllegalArgumentException(
+          "Cannot get comparator without " + SerializationBase.CLASS_KEY
+          + " set in metadata");
+    }
+
+    return (RawComparator) WritableComparator.get(
+        (Class<WritableComparable>)klazz);
+  }
