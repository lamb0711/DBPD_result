HDFS-13075. [SPS]: Provide External Context implementation. Contributed by Uma Maheswara Rao G.

+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.CheckDNSpaceRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.CheckDNSpaceResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetFilePathRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetFilePathResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetNextSPSPathIdRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetNextSPSPathIdResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.HasLowRedundancyBlocksRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.HasLowRedundancyBlocksResponseProto;
+
+  @Override
+  public GetNextSPSPathIdResponseProto getNextSPSPathId(
+      RpcController controller, GetNextSPSPathIdRequestProto request)
+          throws ServiceException {
+    try {
+      Long nextSPSPathId = impl.getNextSPSPathId();
+      if (nextSPSPathId == null) {
+        return GetNextSPSPathIdResponseProto.newBuilder().build();
+      }
+      return GetNextSPSPathIdResponseProto.newBuilder().setFileId(nextSPSPathId)
+          .build();
+    } catch (IOException e) {
+      throw new ServiceException(e);
+    }
+  }
+
+  @Override
+  public GetFilePathResponseProto getFilePath(RpcController controller,
+      GetFilePathRequestProto request) throws ServiceException {
+    try {
+      return GetFilePathResponseProto.newBuilder()
+          .setSrcPath(impl.getFilePath(request.getFileId())).build();
+    } catch (IOException e) {
+      throw new ServiceException(e);
+    }
+  }
+
+  @Override
+  public CheckDNSpaceResponseProto checkDNSpaceForScheduling(
+      RpcController controller, CheckDNSpaceRequestProto request)
+          throws ServiceException {
+    try {
+      CheckDNSpaceResponseProto build = CheckDNSpaceResponseProto.newBuilder()
+          .setIsGoodDatanodeWithSpace(impl.checkDNSpaceForScheduling(
+              PBHelperClient.convert(request.getDnInfo()),
+              PBHelperClient.convertStorageType(request.getStorageType()),
+              request.getEstimatedSize()))
+          .build();
+      return build;
+    } catch (IOException e) {
+      throw new ServiceException(e);
+    }
+  }
+
+  @Override
+  public HasLowRedundancyBlocksResponseProto hasLowRedundancyBlocks(
+      RpcController controller, HasLowRedundancyBlocksRequestProto request)
+          throws ServiceException {
+    try {
+      return HasLowRedundancyBlocksResponseProto.newBuilder()
+          .setHasLowRedundancyBlocks(
+              impl.hasLowRedundancyBlocks(request.getInodeId()))
+          .build();
+    } catch (IOException e) {
+      throw new ServiceException(e);
+    }
+  }
+
