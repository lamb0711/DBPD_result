HDFS-10363. Ozone: Introduce new config keys for SCM service endpoints. Contributed by Arpit Agarwal.

-import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_HANDLER_COUNT_DEFAULT;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_HANDLER_COUNT_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_RPC_BIND_HOST_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY;
-import static org.apache.hadoop.ozone.OzoneConfigKeys.DFS_CONTAINER_HANDLER_COUNT_DEFAULT;
-import static org.apache.hadoop.ozone.OzoneConfigKeys.DFS_CONTAINER_LOCATION_HANDLER_COUNT_KEY;
-import static org.apache.hadoop.ozone.OzoneConfigKeys.DFS_CONTAINER_LOCATION_RPC_ADDRESS_DEFAULT;
-import static org.apache.hadoop.ozone.OzoneConfigKeys.DFS_CONTAINER_LOCATION_RPC_ADDRESS_KEY;
-import static org.apache.hadoop.ozone.OzoneConfigKeys.DFS_CONTAINER_LOCATION_RPC_BIND_HOST_KEY;
+import static org.apache.hadoop.ozone.OzoneConfigKeys.*;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.hadoop.classification.InterfaceAudience;
-import org.apache.hadoop.ha.HAServiceProtocol;
-import org.apache.hadoop.hdfs.DFSUtil;
-import org.apache.hadoop.hdfs.DFSUtilClient;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.ha.HAServiceProtocol;
+import org.apache.hadoop.hdfs.DFSUtil;
+
-import org.apache.hadoop.hdfs.server.namenode.NameNode;
-import org.apache.hadoop.net.NetUtils;
+import org.apache.hadoop.ozone.OzoneClientUtils;
-  private final RPC.Server serviceRpcServer;
-  private final InetSocketAddress serviceRpcAddress;
+  private final RPC.Server datanodeRpcServer;
+  private final InetSocketAddress datanodeRpcAddress;
-  /** The RPC server that listens to requests from nodes to find containers. */
-  private final RPC.Server storageRpcServer;
-  private final InetSocketAddress storageRpcAddress;
-
-    int maxDataLength = conf.getInt(IPC_MAXIMUM_DATA_LENGTH,
+    final int handlerCount = conf.getInt(
+        OZONE_SCM_HANDLER_COUNT_KEY, OZONE_SCM_HANDLER_COUNT_DEFAULT);
+    final int maxDataLength = conf.getInt(IPC_MAXIMUM_DATA_LENGTH,
-    BlockingService dnProtoPbService =
-        DatanodeProtocolProtos
-        .DatanodeProtocolService
-        .newReflectiveBlockingService(
+    BlockingService dnProtoPbService = DatanodeProtocolProtos.
+        DatanodeProtocolService.newReflectiveBlockingService(
-    InetSocketAddress serviceRpcAddr = NameNode.getServiceAddress(conf, false);
-    serviceRpcServer = startRpcServer(conf, serviceRpcAddr,
-        DatanodeProtocolPB.class, dnProtoPbService,
-        DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY,
-        DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY,
-        DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT);
-    serviceRpcAddress = updateListenAddress(conf,
-        DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, serviceRpcAddr, serviceRpcServer);
+    final InetSocketAddress datanodeRpcAddr =
+        OzoneClientUtils.getScmDataNodeBindAddress(conf);
+    datanodeRpcServer = startRpcServer(conf, datanodeRpcAddr,
+        DatanodeProtocolPB.class, dnProtoPbService, handlerCount);
+    datanodeRpcAddress = updateListenAddress(conf,
+        OZONE_SCM_DATANODE_ADDRESS_KEY, datanodeRpcAddr, datanodeRpcServer);
-        serviceRpcAddress));
-
-    InetSocketAddress rpcAddr = DFSUtilClient.getNNAddress(conf);
-    clientRpcServer = startRpcServer(conf, rpcAddr,
-        DatanodeProtocolPB.class, dnProtoPbService,
-        DFS_NAMENODE_RPC_BIND_HOST_KEY,
-        DFS_NAMENODE_HANDLER_COUNT_KEY,
-        DFS_NAMENODE_HANDLER_COUNT_DEFAULT);
-    clientRpcAddress = updateListenAddress(conf,
-        DFS_NAMENODE_RPC_ADDRESS_KEY, rpcAddr, clientRpcServer);
-    conf.set(FS_DEFAULT_NAME_KEY, DFSUtilClient.getNNUri(clientRpcAddress)
-        .toString());
-    LOG.info(buildRpcServerStartMessage("RPC server", clientRpcAddress));
+        datanodeRpcAddress));
-        .StorageContainerLocationProtocolService
-        .newReflectiveBlockingService(
-            new StorageContainerLocationProtocolServerSideTranslatorPB(this));
+          .StorageContainerLocationProtocolService
+          .newReflectiveBlockingService(
+              new StorageContainerLocationProtocolServerSideTranslatorPB(this));
-    InetSocketAddress storageRpcAddr = NetUtils.createSocketAddr(
-        conf.getTrimmed(DFS_CONTAINER_LOCATION_RPC_ADDRESS_KEY,
-            DFS_CONTAINER_LOCATION_RPC_ADDRESS_DEFAULT),
-        -1, DFS_CONTAINER_LOCATION_RPC_ADDRESS_KEY);
-
-    storageRpcServer = startRpcServer(conf, storageRpcAddr,
+    final InetSocketAddress clientRpcAddr =
+        OzoneClientUtils.getScmClientBindAddress(conf);
+    clientRpcServer = startRpcServer(conf, clientRpcAddr,
-        DFS_CONTAINER_LOCATION_RPC_BIND_HOST_KEY,
-        DFS_CONTAINER_LOCATION_HANDLER_COUNT_KEY,
-        DFS_CONTAINER_HANDLER_COUNT_DEFAULT);
-    storageRpcAddress = updateListenAddress(conf,
-        DFS_CONTAINER_LOCATION_RPC_ADDRESS_KEY,
-        storageRpcAddr, storageRpcServer);
+        handlerCount);
+    clientRpcAddress = updateListenAddress(conf,
+        OZONE_SCM_CLIENT_ADDRESS_KEY, clientRpcAddr, clientRpcServer);
-        "StorageContainerLocationProtocol RPC server", storageRpcAddress));
+        "StorageContainerLocationProtocol RPC server", clientRpcAddress));
-    List<DatanodeDescriptor> liveNodes = new ArrayList<DatanodeDescriptor>();
+    List<DatanodeDescriptor> liveNodes = new ArrayList<>();
-   * Returns listen address of StorageContainerLocation RPC server.
+   * Returns listen address of client RPC server.
-   * @return listen address of StorageContainerLocation RPC server
+   * @return listen address of client RPC server
-  public InetSocketAddress getStorageContainerLocationRpcAddress() {
-    return storageRpcAddress;
+  public InetSocketAddress getClientRpcAddress() {
+    return clientRpcAddress;
-    if (serviceRpcServer != null) {
-      serviceRpcServer.start();
-    }
-    storageRpcServer.start();
+    datanodeRpcServer.start();
-    if (serviceRpcServer != null) {
-      serviceRpcServer.stop();
-    }
-    if (storageRpcServer != null) {
-      storageRpcServer.stop();
+    if (datanodeRpcServer != null) {
+      datanodeRpcServer.stop();
-      if (serviceRpcServer != null) {
-        serviceRpcServer.join();
-      }
-      storageRpcServer.join();
+      datanodeRpcServer.join();
-        description, NetUtils.getHostPortString(addr)) :
+        description, addr.getHostString() + ":" + addr.getPort()) :
-   * @param bindHostKey configuration key for setting explicit bind host.  If
-   *     the property is not configured, then the bind host is taken from addr.
-   * @param handlerCountKey configuration key for RPC server handler count
-   * @param handlerCountDefault default RPC server handler count if unconfigured
-   * @return RPC server, or null if addr is null
+   * @param handlerCount RPC server handler count
+   *
+   * @return RPC server
-      String bindHostKey, String handlerCountKey, int handlerCountDefault)
+      int handlerCount)
-    if (addr == null) {
-      return null;
-    }
-    String bindHost = conf.getTrimmed(bindHostKey);
-    if (bindHost == null || bindHost.isEmpty()) {
-      bindHost = addr.getHostName();
-    }
-    int numHandlers = conf.getInt(handlerCountKey, handlerCountDefault);
-        .setBindAddress(bindHost)
+        .setBindAddress(addr.getHostString())
-        .setNumHandlers(numHandlers)
+        .setNumHandlers(handlerCount)
+
-   * listening address of that server.  The listening address may be different
+   * listening address of that server. The listening address may be different
-   * @param rpcServer started RPC server.  If null, then the server was not
-   *     started, and this method is a no-op.
+   * @param rpcServer started RPC server.
-    if (rpcServer == null) {
-      return null;
-    }
-        addr.getHostName(), listenAddr.getPort());
-    conf.set(rpcAddressKey, NetUtils.getHostPortString(updatedAddr));
+        addr.getHostString(), listenAddr.getPort());
+    conf.set(rpcAddressKey,
+        addr.getHostString() + ":" + listenAddr.getPort());
