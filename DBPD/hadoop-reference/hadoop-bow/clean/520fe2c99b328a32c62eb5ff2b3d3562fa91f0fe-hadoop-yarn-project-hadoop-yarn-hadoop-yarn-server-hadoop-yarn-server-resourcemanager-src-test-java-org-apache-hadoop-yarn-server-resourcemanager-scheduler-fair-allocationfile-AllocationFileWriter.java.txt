YARN-5106. Provide a builder interface for FairScheduler allocations for use in tests. Contributed by Adam Antal

-import java.io.FileWriter;
-import java.util.function.Supplier;
+  private static final String DRF = "drf";
+  private static final String FAIR = "fair";
+  private static final String FIFO = "fifo";
+
+  private boolean useLegacyTagNameForQueues = false;
+  private String reservationAgent;
+  private String reservationPolicy;
+  private AllocationFileQueuePlacementPolicy queuePlacementPolicy;
-  public AllocationFileSimpleQueueBuilder queue(String queueName) {
-    return new AllocationFileSimpleQueueBuilder(this, queueName);
+  public AllocationFileWriter addQueue(AllocationFileQueue queue) {
+    queues.add(queue);
+    return this;
+  public AllocationFileWriter disableQueueMaxAMShareDefault() {
+    this.queueMaxAMShareDefault = -1.0d;
+    return this;
+  }
+
-  public AllocationFileWriter defaultQueueSchedulingPolicy(String value) {
-    this.defaultQueueSchedulingPolicy = value;
+  public AllocationFileWriter drfDefaultQueueSchedulingPolicy() {
+    this.defaultQueueSchedulingPolicy = DRF;
-  public UserSettings.Builder userSettings(String username) {
-    return new UserSettings.Builder(this, username);
+  public AllocationFileWriter fairDefaultQueueSchedulingPolicy() {
+    this.defaultQueueSchedulingPolicy = FAIR;
+    return this;
-  void addQueue(AllocationFileQueue queue) {
-    this.queues.add(queue);
+  public AllocationFileWriter fifoDefaultQueueSchedulingPolicy() {
+    this.defaultQueueSchedulingPolicy = FIFO;
+    return this;
-  void setUserSettings(UserSettings userSettings) {
-    this.userSettings = userSettings;
+  public AllocationFileWriter useLegacyTagNameForQueues() {
+    this.useLegacyTagNameForQueues = true;
+    return this;
-  static void printQueues(PrintWriter pw, List<AllocationFileQueue> queues) {
+  public AllocationFileWriter reservationAgent(String value) {
+    this.reservationAgent = value;
+    return this;
+  }
+
+  public AllocationFileWriter reservationPolicy(String value) {
+    this.reservationPolicy = value;
+    return this;
+  }
+
+  public AllocationFileWriter userSettings(UserSettings settings) {
+    this.userSettings = settings;
+    return this;
+  }
+
+  public AllocationFileWriter queuePlacementPolicy(
+      AllocationFileQueuePlacementPolicy policy) {
+    this.queuePlacementPolicy = policy;
+    return this;
+  }
+
+  static void printQueues(PrintWriter pw, List<AllocationFileQueue> queues,
+      boolean useLegacyTagName) {
-      pw.println(queue.render());
+      final String queueStr;
+      if (useLegacyTagName) {
+        queueStr = queue.renderWithLegacyTag();
+      } else {
+        queueStr = queue.render();
+      }
+      pw.println(queueStr);
-  static void addIfPresent(PrintWriter pw, String tag,
-      Supplier<String> supplier) {
-    if (supplier.get() != null) {
-      pw.println("<" + tag + ">" + supplier.get() + "</" + tag + ">");
-    }
+  private void printQueuePlacementPolicy(PrintWriter pw) {
+    pw.println(queuePlacementPolicy.render());
-  static String createNumberSupplier(Object number) {
-    if (number != null) {
-      return number.toString();
+  static void addIfPresent(PrintWriter pw, String tag, Object obj) {
+    if (obj != null) {
+      pw.println("<" + tag + ">" + obj.toString() + "</" + tag + ">");
-    return null;
-    pw.println("<?xml version=\"1.0\"?>");
+    pw.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-      pw = new PrintWriter(new FileWriter(filename));
+      pw = new PrintWriter(filename, "UTF-8");
-      printQueues(pw, queues);
+      printQueues(pw, queues, useLegacyTagNameForQueues);
-    addIfPresent(pw, "queueMaxAppsDefault",
-        () -> createNumberSupplier(queueMaxAppsDefault));
-    addIfPresent(pw, "queueMaxResourcesDefault",
-        () -> queueMaxResourcesDefault);
-    addIfPresent(pw, "userMaxAppsDefault",
-        () -> createNumberSupplier(userMaxAppsDefault));
-    addIfPresent(pw, "queueMaxAMShareDefault",
-        () -> createNumberSupplier(queueMaxAMShareDefault));
+    if (queuePlacementPolicy != null) {
+      printQueuePlacementPolicy(pw);
+    }
+
+    addIfPresent(pw, "queueMaxAppsDefault", queueMaxAppsDefault);
+    addIfPresent(pw, "queueMaxResourcesDefault", queueMaxResourcesDefault);
+    addIfPresent(pw, "userMaxAppsDefault", userMaxAppsDefault);
+    addIfPresent(pw, "queueMaxAMShareDefault", queueMaxAMShareDefault);
-        () -> createNumberSupplier(defaultMinSharePreemptionTimeout));
+        defaultMinSharePreemptionTimeout);
-        () -> createNumberSupplier(defaultFairSharePreemptionTimeout));
+        defaultFairSharePreemptionTimeout);
-        () -> createNumberSupplier(defaultFairSharePreemptionThreshold));
+        defaultFairSharePreemptionThreshold);
-        () -> defaultQueueSchedulingPolicy);
+        defaultQueueSchedulingPolicy);
+    addIfPresent(pw, "reservation-agent", reservationAgent);
+    addIfPresent(pw, "reservation-policy", reservationPolicy);
+
