HDDS-140. Add DU usage to VolumeInfo.

-import java.util.Iterator;
+
-   * {@link VolumeSet#volumeList} maintains a list of active volumes in the
+   * {@link VolumeSet#volumeMap} maintains a map of all active volumes in the
-  private List<VolumeInfo> volumeList;
-  /**
-   * {@link VolumeSet#failedVolumeList} maintains a list of volumes which have
-   * failed. This list is mutually exclusive to {@link VolumeSet#volumeList}.
-   */
-  private List<VolumeInfo> failedVolumeList;
-  /**
-   * {@link VolumeSet#volumeMap} maintains a map of all volumes in the
-   * DataNode irrespective of their state.
-   */
-   * {@link VolumeSet#volumeStateMap} maintains a list of volumes per
+   * {@link VolumeSet#failedVolumeMap} maintains a map of volumes which have
+   * failed. The keys in this map and {@link VolumeSet#volumeMap} are
+   * mutually exclusive.
+   */
+  private Map<Path, VolumeInfo> failedVolumeMap;
+  /**
+   * {@link VolumeSet#volumeStateMap} maintains a list of active volumes per
-   * {@link VolumeSet#volumeList}, {@link VolumeSet#failedVolumeList},
-   * {@link VolumeSet#volumeMap} or {@link VolumeSet#volumeStateMap} should
-   * be done after acquiring this lock.
+   * {@link VolumeSet#volumeMap}, {@link VolumeSet#failedVolumeMap}, or
+   * {@link VolumeSet#volumeStateMap} should be done after acquiring this lock.
-    volumeList = new ArrayList<>();
-    failedVolumeList = new ArrayList<>();
+    failedVolumeMap = new ConcurrentHashMap<>();
-        volumeList.add(volumeInfo);
-    if (volumeList.size() == 0) {
+    if (volumeMap.size() == 0) {
-    VolumeInfo.Builder volumeBuilder = new VolumeInfo.Builder(rootDir);
+    VolumeInfo.Builder volumeBuilder = new VolumeInfo.Builder(rootDir, conf);
-        VolumeInfo volumeInfo = volumeMap.get(dirPath);
-        if (volumeInfo.isFailed()) {
-          volumeInfo.setState(VolumeState.NORMAL);
-          failedVolumeList.remove(volumeInfo);
-          volumeList.add(volumeInfo);
-        } else {
-          LOG.warn("Volume : " + volumeInfo.getRootDir() + " already " +
-              "exists in VolumeMap");
-        }
+        LOG.warn("Volume : {} already exists in VolumeMap", dataDir);
-        VolumeInfo volumeInfo = getVolumeInfo(dataDir);
+        if (failedVolumeMap.containsKey(dirPath)) {
+          failedVolumeMap.remove(dirPath);
+        }
-        volumeList.add(volumeInfo);
-        volumeMap.put(volumeInfo.getRootDir(), volumeInfo);
+        VolumeInfo volumeInfo = getVolumeInfo(dirPath.toString());
+        volumeMap.put(dirPath, volumeInfo);
+
+        LOG.debug("Added Volume : {} to VolumeSet", dataDir);
-        if (!volumeInfo.isFailed()) {
-          volumeInfo.setState(VolumeState.FAILED);
-          volumeList.remove(volumeInfo);
-          failedVolumeList.add(volumeInfo);
-        }
+        volumeInfo.failVolume();
+
+        volumeMap.remove(dirPath);
+        volumeStateMap.get(volumeInfo.getStorageType()).remove(volumeInfo);
+        failedVolumeMap.put(dirPath, volumeInfo);
+
+        LOG.debug("Moving Volume : {} to failed Volumes", dataDir);
+      } else if (failedVolumeMap.containsKey(dirPath)) {
+        LOG.debug("Volume : {} is not active", dataDir);
-        LOG.warn("Volume : " + dataDir + " does not exist in VolumeMap");
+        LOG.warn("Volume : {} does not exist in VolumeSet", dataDir);
-        if (!volumeInfo.isFailed()) {
-          volumeList.remove(volumeInfo);
-        } else {
-          failedVolumeList.remove(volumeInfo);
-        }
+        volumeInfo.shutdown();
+
+
+        LOG.debug("Removed Volume : {} from VolumeSet", dataDir);
+      } else if (failedVolumeMap.containsKey(dirPath)) {
+        VolumeInfo volumeInfo = failedVolumeMap.get(dirPath);
+        volumeInfo.setState(VolumeState.NON_EXISTENT);
+
+        failedVolumeMap.remove(dirPath);
+        LOG.debug("Removed Volume : {} from failed VolumeSet", dataDir);
-        LOG.warn("Volume: " + dataDir + " does not exist in " + "volumeMap.");
+        LOG.warn("Volume : {} does not exist in VolumeSet", dataDir);
-  /**
-   * Return an iterator over {@link VolumeSet#volumeList}.
-   */
-  public Iterator<VolumeInfo> getIterator() {
-    return volumeList.iterator();
-  }
-
-    return choosingPolicy.chooseVolume(volumeList, containerSize);
+    return choosingPolicy.chooseVolume(getVolumesList(), containerSize);
+  }
+
+  public void shutdown() {
+    for (VolumeInfo volumeInfo : volumeMap.values()) {
+      try {
+        volumeInfo.shutdown();
+      } catch (Exception e) {
+        LOG.error("Failed to shutdown volume : " + volumeInfo.getRootDir(), e);
+      }
+    }
-    return ImmutableList.copyOf(volumeList);
+    return ImmutableList.copyOf(volumeMap.values());
-    return ImmutableList.copyOf(failedVolumeList);
+    return ImmutableList.copyOf(failedVolumeMap.values());
