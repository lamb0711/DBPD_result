HDFS-4480. Eliminate the file snapshot circular linked list.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1444280 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileWithSnapshot.FileDiffList;
-  private FileWithSnapshot next;
-      final DatanodeDescriptor clientNode,
-      final FileDiffList diffs) {
+      final DatanodeDescriptor clientNode) {
-    this.diffs = new FileUcDiffList(this, diffs == null? null: diffs.asList());
-    setNext(this);
+    this.diffs = new FileUcDiffList(this, f instanceof FileWithSnapshot?
+        ((FileWithSnapshot)f).getFileDiffList().asList(): null);
-    this(f, f.getClientName(), f.getClientMachine(), f.getClientNode(), null);
+    this(f, f.getClientName(), f.getClientMachine(), f.getClientNode());
-    final INodeFileWithSnapshot f = new INodeFileWithSnapshot(this, diffs);
+    final INodeFileWithSnapshot f = new INodeFileWithSnapshot(this);
-    // link f with this
-    this.insertBefore(f);
-  public boolean isEverythingDeleted() {
-    return isCurrentFileDeleted() && diffs.asList().isEmpty();
-  }
-
-  @Override
-  public FileWithSnapshot getNext() {
-    return next;
-  }
-
-  @Override
-  public void setNext(FileWithSnapshot next) {
-    this.next = next;
-  }
-
-  @Override
-  public void insertAfter(FileWithSnapshot inode) {
-    inode.setNext(this.getNext());
-    this.setNext(inode);
-  }
-  
-  @Override
-  public void insertBefore(FileWithSnapshot inode) {
-    inode.setNext(this);
-    if (this.next == null || this.next == this) {
-      this.next = inode;
-      return;
-    }
-    FileWithSnapshot previous = Util.getPrevious(this);
-    previous.setNext(inode);
-  }
-
-  @Override
-  public void removeSelf() {
-    if (this.next != null && this.next != this) {
-      FileWithSnapshot previous = Util.getPrevious(this);
-      previous.setNext(next);
-    }
-    this.next = null;
+  public FileDiffList getFileDiffList() {
+    return diffs;
-  public short getMaxFileReplication() {
-    final short max = isCurrentFileDeleted()? 0: getFileReplication();
-    return Util.getMaxFileReplication(max, diffs);
-  }
-
-  @Override
-  public long computeMaxFileSize() {
-    if (isCurrentFileDeleted()) {
-      final FileDiff last = diffs.getLast();
-      return last == null? 0: last.fileSize;
-    } else { 
-      return super.computeFileSize(true, null);
-    }
-  }
-
-  @Override
