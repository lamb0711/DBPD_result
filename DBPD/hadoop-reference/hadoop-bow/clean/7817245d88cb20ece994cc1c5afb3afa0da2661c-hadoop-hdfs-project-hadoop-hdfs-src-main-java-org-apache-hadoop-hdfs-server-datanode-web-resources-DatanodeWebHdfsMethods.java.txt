HDFS-6100. DataNodeWebHdfsMethods does not failover in HA mode. Contributed by Haohui Mai.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579301 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.InetSocketAddress;
+import javax.servlet.http.HttpServletRequest;
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdfs.HAUtil;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
-import org.apache.hadoop.hdfs.server.namenode.NameNode;
+import org.apache.hadoop.hdfs.web.SWebHdfsFileSystem;
-import org.apache.hadoop.hdfs.web.resources.NamenodeRpcAddressParam;
+import org.apache.hadoop.hdfs.web.resources.NamenodeAddressParam;
+import org.apache.hadoop.io.Text;
+  private @Context HttpServletRequest request;
-      final DelegationParam delegation, final InetSocketAddress nnRpcAddr,
+      final DelegationParam delegation, final String nnId,
-    if (nnRpcAddr == null) {
-      throw new IllegalArgumentException(NamenodeRpcAddressParam.NAME
+    if (nnId == null) {
+      throw new IllegalArgumentException(NamenodeAddressParam.NAME
-      final Token<DelegationTokenIdentifier> token = 
-          new Token<DelegationTokenIdentifier>();
-      token.decodeFromUrlString(delegation.getValue());
-      SecurityUtil.setTokenService(token, nnRpcAddr);
-      token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);
+      final Token<DelegationTokenIdentifier> token = deserializeToken
+              (delegation.getValue(), nnId);
+  @VisibleForTesting
+  Token<DelegationTokenIdentifier> deserializeToken
+          (String delegation,String nnId) throws IOException {
+    final DataNode datanode = (DataNode) context.getAttribute("datanode");
+    final Configuration conf = datanode.getConf();
+    final Token<DelegationTokenIdentifier> token = new
+            Token<DelegationTokenIdentifier>();
+    token.decodeFromUrlString(delegation);
+    URI nnUri = URI.create(HdfsConstants.HDFS_URI_SCHEME +
+            "://" + nnId);
+    boolean isHA = HAUtil.isLogicalUri(conf, nnUri);
+    if (isHA) {
+      token.setService(HAUtil.buildTokenServiceForLogicalUri(nnUri));
+    } else {
+      token.setService(SecurityUtil.buildTokenService(nnUri));
+    }
+    token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);
+    return token;
+  }
+
-      @QueryParam(NamenodeRpcAddressParam.NAME) 
-      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
-          final NamenodeRpcAddressParam namenodeRpcAddress,
+      @QueryParam(NamenodeAddressParam.NAME)
+      @DefaultValue(NamenodeAddressParam.DEFAULT)
+          final NamenodeAddressParam namenode,
-    return put(in, ugi, delegation, namenodeRpcAddress, ROOT, op, permission,
-        overwrite, bufferSize, replication, blockSize);
+    return put(in, ugi, delegation, namenode, ROOT, op, permission,
+            overwrite, bufferSize, replication, blockSize);
-      @QueryParam(NamenodeRpcAddressParam.NAME)
-      @DefaultValue(NamenodeRpcAddressParam.DEFAULT)
-          final NamenodeRpcAddressParam namenodeRpcAddress,
+      @QueryParam(NamenodeAddressParam.NAME)
+      @DefaultValue(NamenodeAddressParam.DEFAULT)
+          final NamenodeAddressParam namenode,
-    final InetSocketAddress nnRpcAddr = namenodeRpcAddress.getValue();
-    init(ugi, delegation, nnRpcAddr, path, op, permission,
+    final String nnId = namenode.getValue();
+    init(ugi, delegation, nnId, path, op, permission,
-        return put(in, ugi, delegation, nnRpcAddr, path.getAbsolutePath(), op,
-            permission, overwrite, bufferSize, replication, blockSize);
+        return put(in, nnId, path.getAbsolutePath(), op,
+                permission, overwrite, bufferSize, replication, blockSize);
-      final UserGroupInformation ugi,
-      final DelegationParam delegation,
-      final InetSocketAddress nnRpcAddr,
+      final String nnId,
-      DFSClient dfsclient = new DFSClient(nnRpcAddr, conf);
+      DFSClient dfsclient = newDfsClient(nnId, conf);
-      final InetSocketAddress nnHttpAddr = NameNode.getHttpAddress(conf);
-      final URI uri = new URI(WebHdfsFileSystem.SCHEME, null,
-          nnHttpAddr.getHostName(), nnHttpAddr.getPort(), fullpath, null, null);
+      final String scheme = "http".equals(request.getScheme()) ?
+      WebHdfsFileSystem.SCHEME : SWebHdfsFileSystem.SCHEME;
+      final URI uri = URI.create(String.format("%s://%s/%s", scheme,
+              nnId, fullpath));
-      @QueryParam(NamenodeRpcAddressParam.NAME)
-      @DefaultValue(NamenodeRpcAddressParam.DEFAULT)
-          final NamenodeRpcAddressParam namenodeRpcAddress,
+      @QueryParam(NamenodeAddressParam.NAME)
+      @DefaultValue(NamenodeAddressParam.DEFAULT)
+          final NamenodeAddressParam namenode,
-    return post(in, ugi, delegation, namenodeRpcAddress, ROOT, op, bufferSize);
+    return post(in, ugi, delegation, namenode, ROOT, op, bufferSize);
-      @QueryParam(NamenodeRpcAddressParam.NAME)
-      @DefaultValue(NamenodeRpcAddressParam.DEFAULT)
-          final NamenodeRpcAddressParam namenodeRpcAddress,
+      @QueryParam(NamenodeAddressParam.NAME)
+      @DefaultValue(NamenodeAddressParam.DEFAULT)
+          final NamenodeAddressParam namenode,
-    final InetSocketAddress nnRpcAddr = namenodeRpcAddress.getValue();
-    init(ugi, delegation, nnRpcAddr, path, op, bufferSize);
+    final String nnId = namenode.getValue();
+    init(ugi, delegation, nnId, path, op, bufferSize);
-        return post(in, ugi, delegation, nnRpcAddr, path.getAbsolutePath(), op,
-            bufferSize);
+        return post(in, nnId, path.getAbsolutePath(), op,
+                bufferSize);
-      final UserGroupInformation ugi,
-      final DelegationParam delegation,
-      final InetSocketAddress nnRpcAddr,
+      final String nnId,
-      DFSClient dfsclient = new DFSClient(nnRpcAddr, conf);
+      DFSClient dfsclient = newDfsClient(nnId, conf);
-      @QueryParam(NamenodeRpcAddressParam.NAME)
-      @DefaultValue(NamenodeRpcAddressParam.DEFAULT)
-          final NamenodeRpcAddressParam namenodeRpcAddress,
+      @QueryParam(NamenodeAddressParam.NAME)
+      @DefaultValue(NamenodeAddressParam.DEFAULT)
+          final NamenodeAddressParam namenode,
-    return get(ugi, delegation, namenodeRpcAddress, ROOT, op, offset, length,
+    return get(ugi, delegation, namenode, ROOT, op, offset, length,
-      @QueryParam(NamenodeRpcAddressParam.NAME)
-      @DefaultValue(NamenodeRpcAddressParam.DEFAULT)
-          final NamenodeRpcAddressParam namenodeRpcAddress,
+      @QueryParam(NamenodeAddressParam.NAME)
+      @DefaultValue(NamenodeAddressParam.DEFAULT)
+          final NamenodeAddressParam namenode,
-    final InetSocketAddress nnRpcAddr = namenodeRpcAddress.getValue();
-    init(ugi, delegation, nnRpcAddr, path, op, offset, length, bufferSize);
+    final String nnId = namenode.getValue();
+    init(ugi, delegation, nnId, path, op, offset, length, bufferSize);
-        return get(ugi, delegation, nnRpcAddr, path.getAbsolutePath(), op,
-            offset, length, bufferSize);
+        return get(nnId, path.getAbsolutePath(), op, offset,
+                length, bufferSize);
-      final UserGroupInformation ugi,
-      final DelegationParam delegation,
-      final InetSocketAddress nnRpcAddr,
+      final String nnId,
-      final DFSClient dfsclient = new DFSClient(nnRpcAddr, conf);
+      final DFSClient dfsclient = newDfsClient(nnId, conf);
-      DFSClient dfsclient = new DFSClient(nnRpcAddr, conf);
+      DFSClient dfsclient = newDfsClient(nnId, conf);
+
+  private static DFSClient newDfsClient(String nnId,
+                                        Configuration conf) throws IOException {
+    URI uri = URI.create(HdfsConstants.HDFS_URI_SCHEME + "://" + nnId);
+    return new DFSClient(uri, conf);
+  }
