YARN-9086. [CSI] Run csi-driver-adaptor as aux service. Contributed by Weiwei Yang.

-import com.google.common.annotations.VisibleForTesting;
-import csi.v0.Csi;
+import org.apache.hadoop.service.AbstractService;
+import org.apache.hadoop.yarn.api.CsiAdaptorPlugin;
-import org.apache.hadoop.yarn.csi.client.CsiClient;
-import org.apache.hadoop.yarn.csi.client.CsiClientImpl;
-import org.apache.hadoop.yarn.csi.translator.ProtoTranslatorFactory;
-import org.apache.hadoop.yarn.server.api.ApplicationInitializationContext;
-import org.apache.hadoop.yarn.server.api.ApplicationTerminationContext;
-import org.apache.hadoop.yarn.server.api.AuxiliaryService;
-import java.nio.ByteBuffer;
-public class CsiAdaptorProtocolService extends AuxiliaryService
+public class CsiAdaptorProtocolService extends AbstractService
-  private CsiClient csiClient;
-  private String csiDriverName;
+  private CsiAdaptorPlugin serverImpl;
-  public CsiAdaptorProtocolService() {
+  public CsiAdaptorProtocolService(CsiAdaptorPlugin adaptorImpl) {
-    // TODO read this from configuration
-    this.csiDriverName =  "ch.ctrox.csi.s3-driver";
-  }
-
-  public CsiAdaptorProtocolService(String driverName,
-      String domainSocketPath) {
-    super(CsiAdaptorProtocolService.class.getName());
-    this.csiClient = new CsiClientImpl(domainSocketPath);
-    this.csiDriverName = driverName;
-  }
-
-  @VisibleForTesting
-  public void setCsiClient(CsiClient client) {
-    this.csiClient = client;
+    this.serverImpl = adaptorImpl;
-
-    String driverEndpoint = CsiConfigUtils
-        .getCsiDriverEndpoint(csiDriverName, conf);
-    this.csiClient = new CsiClientImpl(driverEndpoint);
-        .getCsiAdaptorAddressForDriver(csiDriverName, conf);
+        .getCsiAdaptorAddressForDriver(serverImpl.getDriverName(), conf);
-        this, adaptorServiceAddress, conf, null, 1);
+        serverImpl, adaptorServiceAddress, conf, null, 1);
-    Csi.GetPluginInfoResponse response = csiClient.getPluginInfo();
-    return ProtoTranslatorFactory.getTranslator(
-        GetPluginInfoResponse.class, Csi.GetPluginInfoResponse.class)
-        .convertFrom(response);
+    return serverImpl.getPluginInfo(request);
-    Csi.ValidateVolumeCapabilitiesRequest req = ProtoTranslatorFactory
-        .getTranslator(ValidateVolumeCapabilitiesRequest.class,
-            Csi.ValidateVolumeCapabilitiesRequest.class)
-        .convertTo(request);
-    Csi.ValidateVolumeCapabilitiesResponse response =
-        csiClient.validateVolumeCapabilities(req);
-    return ProtoTranslatorFactory.getTranslator(
-        ValidateVolumeCapabilitiesResponse.class,
-        Csi.ValidateVolumeCapabilitiesResponse.class)
-        .convertFrom(response);
+    return serverImpl.validateVolumeCapacity(request);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Received nodePublishVolume call, request: {}",
-          request.toString());
-    }
-    Csi.NodePublishVolumeRequest req = ProtoTranslatorFactory
-        .getTranslator(NodePublishVolumeRequest.class,
-            Csi.NodePublishVolumeRequest.class).convertTo(request);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Translate to CSI proto message: {}", req.toString());
-    }
-    csiClient.nodePublishVolume(req);
-    return NodePublishVolumeResponse.newInstance();
+    return serverImpl.nodePublishVolume(request);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Received nodeUnpublishVolume call, request: {}",
-          request.toString());
-    }
-    Csi.NodeUnpublishVolumeRequest req = ProtoTranslatorFactory
-        .getTranslator(NodeUnpublishVolumeRequest.class,
-            Csi.NodeUnpublishVolumeRequest.class).convertTo(request);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Translate to CSI proto message: {}", req.toString());
-    }
-    csiClient.nodeUnpublishVolume(req);
-    return NodeUnpublishVolumeResponse.newInstance();
-  }
-
-  @Override
-  public void initializeApplication(
-      ApplicationInitializationContext initAppContext) {
-    // do nothing
-  }
-
-  @Override
-  public void stopApplication(
-      ApplicationTerminationContext stopAppContext) {
-    // do nothing
-  }
-
-  @Override
-  public ByteBuffer getMetaData() {
-    return ByteBuffer.allocate(0);
+    return serverImpl.nodeUnpublishVolume(request);
