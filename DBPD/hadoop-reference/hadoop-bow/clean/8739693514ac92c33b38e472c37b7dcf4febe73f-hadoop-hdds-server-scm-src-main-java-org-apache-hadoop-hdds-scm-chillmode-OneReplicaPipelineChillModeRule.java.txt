HDDS-1217. Refactor ChillMode rules and chillmode manager. (#558)



+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdds.scm.events.SCMEvents;
-import org.apache.hadoop.hdds.server.events.EventHandler;
-import org.apache.hadoop.hdds.server.events.EventPublisher;
+import org.apache.hadoop.hdds.server.events.EventQueue;
+import org.apache.hadoop.hdds.server.events.TypedEvent;
- * This rule covers whether we have atleast one datanode is reported for each
+ * This rule covers whether we have at least one datanode is reported for each
-public class OneReplicaPipelineChillModeRule implements
-    ChillModeExitRule<PipelineReportFromDatanode>,
-    EventHandler<PipelineReportFromDatanode> {
+public class OneReplicaPipelineChillModeRule extends
+    ChillModeExitRule<PipelineReportFromDatanode> {
-  private final SCMChillModeManager chillModeManager;
+  private int currentReportedPipelineCount = 0;
-  public OneReplicaPipelineChillModeRule(PipelineManager pipelineManager,
-      SCMChillModeManager chillModeManager,
-      Configuration configuration) {
-    this.chillModeManager = chillModeManager;
+
+  public OneReplicaPipelineChillModeRule(String ruleName, EventQueue eventQueue,
+      PipelineManager pipelineManager,
+      SCMChillModeManager chillModeManager, Configuration configuration) {
+    super(chillModeManager, ruleName, eventQueue);
+    Preconditions.checkArgument((percent >= 0.0 && percent <= 1.0),
+        HddsConfigKeys.
+            HDDS_SCM_CHILLMODE_ONE_NODE_REPORTED_PIPELINE_PCT  +
+            " value should be >= 0.0 and <= 1.0");
+
+
-  public boolean validate() {
-    if (reportedPipelineIDSet.size() >= thresholdCount) {
+  protected TypedEvent<PipelineReportFromDatanode> getEventType() {
+    return SCMEvents.PROCESSED_PIPELINE_REPORT;
+  }
+
+  @Override
+  protected boolean validate() {
+    if (currentReportedPipelineCount >= thresholdCount) {
-  public void process(PipelineReportFromDatanode pipelineReportFromDatanode) {
+  protected void process(PipelineReportFromDatanode
+      pipelineReportFromDatanode) {
-  }
-  @Override
-  public void cleanup() {
-    reportedPipelineIDSet.clear();
-  }
+    currentReportedPipelineCount = reportedPipelineIDSet.size();
-  @Override
-  public void onMessage(PipelineReportFromDatanode pipelineReportFromDatanode,
-      EventPublisher publisher) {
-
-    if (validate()) {
-      chillModeManager.validateChillModeExitRules(publisher);
-      return;
-    }
-
-    // Process pipeline report from datanode
-    process(pipelineReportFromDatanode);
-
-    if (chillModeManager.getInChillMode()) {
+    if (scmInChillMode()) {
-          reportedPipelineIDSet.size(), thresholdCount);
+          currentReportedPipelineCount, thresholdCount);
-    if (validate()) {
-      chillModeManager.validateChillModeExitRules(publisher);
-    }
+
+  @Override
+  protected void cleanup() {
+    reportedPipelineIDSet.clear();
+  }
+
+  @VisibleForTesting
+  public int getThresholdCount() {
+    return thresholdCount;
+  }
+
+  @VisibleForTesting
+  public int getCurrentReportedPipelineCount() {
+    return currentReportedPipelineCount;
+  }
+
