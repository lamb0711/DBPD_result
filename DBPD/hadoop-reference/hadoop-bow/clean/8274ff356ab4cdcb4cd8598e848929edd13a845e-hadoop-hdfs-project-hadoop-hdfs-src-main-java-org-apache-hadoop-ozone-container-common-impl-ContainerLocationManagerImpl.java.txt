HDFS-11103. Ozone: Cleanup some dependencies. Contributed by Anu Engineer.

-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.hdfs.server.datanode.fsdataset.FsDatasetSpi;
-import org.apache.hadoop.hdfs.server.datanode.fsdataset.FsVolumeSpi;
+import org.apache.hadoop.hdfs.server.datanode.StorageLocation;
-import org.apache.hadoop.ozone.container.common.interfaces.ContainerLocationManager;
-
-
+import org.apache.hadoop.ozone.container.common.interfaces
+    .ContainerLocationManager;
-import java.nio.file.Paths;
-import java.util.LinkedList;
- * locations and data locations.
+ * metadataLocations and data metadataLocations.
-
-  private final Configuration conf;
-  private final FsDatasetSpi<? extends FsVolumeSpi> dataset;
-  private final Path[] volumePaths;
+  private final List<StorageLocation> dataLocations;
-  private final List<Path> locations;
-
+  private final List<StorageLocation> metadataLocations;
-   * @param conf - Configuration.
+   * @param metadataLocations  - Refers to the metadataLocations
+   * where we store the container metadata.
+   * @param dataDirs - metadataLocations where we store the actual
+   * data or chunk files.
+   * @throws IOException
-  public ContainerLocationManagerImpl(
-      Configuration conf, List<Path> locations,
-      FsDatasetSpi<? extends FsVolumeSpi> dataset) throws IOException {
-    this.conf = conf;
-    this.dataset = dataset;
-    List<Path> pathList = new LinkedList<>();
-    FsDatasetSpi.FsVolumeReferences references;
-    try {
-      synchronized (this.dataset) {
-        references = this.dataset.getFsVolumeReferences();
-        for (int ndx = 0; ndx < references.size(); ndx++) {
-          FsVolumeSpi vol = references.get(ndx);
-          pathList.add(Paths.get(vol.getBaseURI().getPath()));
-        }
-        references.close();
-        volumePaths = pathList.toArray(new Path[pathList.size()]);
-        this.locations = locations;
-      }
-    } catch (IOException ex) {
-      LOG.error("Unable to get volume paths.", ex);
-      throw new IOException("Internal error", ex);
-    }
-
+  public ContainerLocationManagerImpl(List<StorageLocation> metadataLocations,
+      List<StorageLocation> dataDirs)
+      throws IOException {
+    dataLocations = dataDirs;
+    this.metadataLocations = metadataLocations;
-
-   * locations.
+   * metadataLocations.
-    Preconditions.checkState(locations.size() > 0);
-    int index = currentIndex % locations.size();
-    return locations.get(index).resolve(OzoneConsts.CONTAINER_ROOT_PREFIX);
+    Preconditions.checkState(metadataLocations.size() > 0);
+    int index = currentIndex % metadataLocations.size();
+    Path path = metadataLocations.get(index).getFile().toPath();
+    return path.resolve(OzoneConsts.CONTAINER_ROOT_PREFIX);
-    Path currentPath = volumePaths[currentIndex++ % volumePaths.length];
+    Path currentPath = dataLocations.get(currentIndex++ % dataLocations.size())
+        .getFile().toPath();
