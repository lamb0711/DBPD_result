YARN-7900. [AMRMProxy] AMRMClientRelayer for stateful FederationInterceptor. (Botong Huang via asuresh)

-import java.util.Queue;
-import java.util.concurrent.ConcurrentHashMap;
+import org.apache.hadoop.yarn.client.AMRMClientUtils;
-  private Queue<Collection<SchedulingRequest>> batchedSchedulingRequests =
-      new LinkedList<>();
-  private Map<Set<String>, List<SchedulingRequest>> outstandingSchedRequests =
-      new ConcurrentHashMap<>();
-  
+
+  private List<SchedulingRequest> schedulingRequests = new ArrayList<>();
+  private Map<Set<String>, List<SchedulingRequest>> outstandingSchedRequests =
+      new HashMap<>();
+
-      removeFromOutstandingSchedulingRequests(prevContainers);
-      recreateSchedulingRequestBatch();
+      AMRMClientUtils.removeFromOutstandingSchedulingRequests(prevContainers,
+          this.outstandingSchedRequests);
-  public void addSchedulingRequests(
-      Collection<SchedulingRequest> schedulingRequests) {
-    synchronized (this.batchedSchedulingRequests) {
-      this.batchedSchedulingRequests.add(schedulingRequests);
-    }
+  public synchronized void addSchedulingRequests(
+      Collection<SchedulingRequest> newSchedulingRequests) {
+    this.schedulingRequests.addAll(newSchedulingRequests);
+    AMRMClientUtils.addToOutstandingSchedulingRequests(newSchedulingRequests,
+        this.outstandingSchedRequests);
+    List<SchedulingRequest> schedulingRequestList = new LinkedList<>();
+
+        schedulingRequestList = new ArrayList<>(schedulingRequests);
+
+        schedulingRequests.clear();
-            .releaseList(releaseList).updateRequests(updateList).build();
-        populateSchedulingRequests(allocateRequest);
+            .releaseList(releaseList).updateRequests(updateList)
+            .schedulingRequests(schedulingRequestList).build();
+
-        removeFromOutstandingSchedulingRequests(
-            allocateResponse.getAllocatedContainers());
-        removeFromOutstandingSchedulingRequests(
-            allocateResponse.getContainersFromPreviousAttempts());
+          for (List<SchedulingRequest> schedReqs :
+              this.outstandingSchedRequests.values()) {
+            this.schedulingRequests.addAll(schedReqs);
+          }
+        AMRMClientUtils.removeFromOutstandingSchedulingRequests(
+            allocateResponse.getAllocatedContainers(),
+            this.outstandingSchedRequests);
+        AMRMClientUtils.removeFromOutstandingSchedulingRequests(
+            allocateResponse.getContainersFromPreviousAttempts(),
+            this.outstandingSchedRequests);
+
+          schedulingRequests.addAll(schedulingRequestList);
-  private void populateSchedulingRequests(AllocateRequest allocateRequest) {
-    synchronized (this.batchedSchedulingRequests) {
-      if (!this.batchedSchedulingRequests.isEmpty()) {
-        List<SchedulingRequest> newReqs = new LinkedList<>();
-        Iterator<Collection<SchedulingRequest>> iter =
-            this.batchedSchedulingRequests.iterator();
-        while (iter.hasNext()) {
-          Collection<SchedulingRequest> requests = iter.next();
-          newReqs.addAll(requests);
-          addToOutstandingSchedulingRequests(requests);
-          iter.remove();
-        }
-        allocateRequest.setSchedulingRequests(newReqs);
-      }
-    }
-  }
-
-  private void recreateSchedulingRequestBatch() {
-    List<SchedulingRequest> batched = new ArrayList<>();
-    synchronized (this.outstandingSchedRequests) {
-      for (List<SchedulingRequest> schedReqs :
-          this.outstandingSchedRequests.values()) {
-        batched.addAll(schedReqs);
-      }
-    }
-    synchronized (this.batchedSchedulingRequests) {
-      this.batchedSchedulingRequests.add(batched);
-    }
-  }
-
-  private void addToOutstandingSchedulingRequests(
-      Collection<SchedulingRequest> requests) {
-    for (SchedulingRequest req : requests) {
-      List<SchedulingRequest> schedulingRequests =
-          this.outstandingSchedRequests.computeIfAbsent(
-              req.getAllocationTags(), x -> new LinkedList<>());
-      SchedulingRequest matchingReq = null;
-      synchronized (schedulingRequests) {
-        for (SchedulingRequest schedReq : schedulingRequests) {
-          if (isMatching(req, schedReq)) {
-            matchingReq = schedReq;
-            break;
-          }
-        }
-        if (matchingReq != null) {
-          matchingReq.getResourceSizing().setNumAllocations(
-              req.getResourceSizing().getNumAllocations());
-        } else {
-          schedulingRequests.add(req);
-        }
-      }
-    }
-  }
-
-  private boolean isMatching(SchedulingRequest schedReq1,
-      SchedulingRequest schedReq2) {
-    return schedReq1.getPriority().equals(schedReq2.getPriority()) &&
-        schedReq1.getExecutionType().getExecutionType().equals(
-            schedReq1.getExecutionType().getExecutionType()) &&
-        schedReq1.getAllocationRequestId() ==
-            schedReq2.getAllocationRequestId();
-  }
-
-  private void removeFromOutstandingSchedulingRequests(
-      Collection<Container> containers) {
-    if (containers == null || containers.isEmpty()) {
-      return;
-    }
-    for (Container container : containers) {
-      if (container.getAllocationTags() != null &&
-          !container.getAllocationTags().isEmpty()) {
-        List<SchedulingRequest> schedReqs =
-            this.outstandingSchedRequests.get(container.getAllocationTags());
-        if (schedReqs != null && !schedReqs.isEmpty()) {
-          synchronized (schedReqs) {
-            Iterator<SchedulingRequest> iter = schedReqs.iterator();
-            while (iter.hasNext()) {
-              SchedulingRequest schedReq = iter.next();
-              if (schedReq.getPriority().equals(container.getPriority()) &&
-                  schedReq.getAllocationRequestId() ==
-                      container.getAllocationRequestId()) {
-                int numAllocations =
-                    schedReq.getResourceSizing().getNumAllocations();
-                numAllocations--;
-                if (numAllocations == 0) {
-                  iter.remove();
-                } else {
-                  schedReq.getResourceSizing()
-                      .setNumAllocations(numAllocations);
-                }
-              }
-            }
-          }
-        }
-      }
-    }
-  }
-
