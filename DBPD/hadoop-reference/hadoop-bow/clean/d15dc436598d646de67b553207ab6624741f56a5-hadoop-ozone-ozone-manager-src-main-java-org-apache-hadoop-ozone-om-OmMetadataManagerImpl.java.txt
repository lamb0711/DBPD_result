HDDS-748. Use strongly typed metadata Table implementation. Contributed by Elek Marton.

-import com.google.common.annotations.VisibleForTesting;
-import com.google.common.base.Strings;
-import com.google.common.collect.Lists;
-import org.apache.commons.lang3.StringUtils;
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+import org.apache.hadoop.utils.db.Table.KeyValue;
-import org.eclipse.jetty.util.StringUtil;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import java.io.File;
-import java.io.IOException;
-import java.nio.file.Paths;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.stream.Collectors;
-
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Strings;
+import com.google.common.collect.Lists;
+import org.apache.commons.lang3.StringUtils;
+import org.eclipse.jetty.util.StringUtil;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  public Table getUserTable() {
+  public Table<byte[], byte[]> getUserTable() {
-  public Table getVolumeTable() {
+  public Table<byte[], byte[]> getVolumeTable() {
-  public Table getBucketTable() {
+  public Table<byte[], byte[]> getBucketTable() {
-  public Table getKeyTable() {
+  public Table<byte[], byte[]> getKeyTable() {
-  public Table getDeletedTable() {
+  public Table<byte[], byte[]> getDeletedTable() {
-  public Table getOpenKeyTable() {
+  public Table<byte[], byte[]> getOpenKeyTable() {
-  public Table getS3Table() {
+  public Table<byte[], byte[]> getS3Table() {
-    try (TableIterator<Table.KeyValue> bucketIter = bucketTable.iterator()) {
-      Table.KeyValue kv = bucketIter.seek(volumePrefix);
+    try (TableIterator<byte[], Table.KeyValue> bucketIter = bucketTable
+        .iterator()) {
+      Table.KeyValue<byte[], byte[]> kv = bucketIter.seek(volumePrefix);
-    try (TableIterator<Table.KeyValue> keyIter = keyTable.iterator()) {
-      Table.KeyValue kv = keyIter.seek(keyPrefix);
+    try (TableIterator<byte[], Table.KeyValue> keyIter = keyTable.iterator()) {
+      Table.KeyValue<byte[], byte[]> kv = keyIter.seek(keyPrefix);
-    try (TableIterator<Table.KeyValue> bucketIter = bucketTable.iterator()) {
-      Table.KeyValue kv = bucketIter.seek(startKey);
+    try (TableIterator<byte[], Table.KeyValue> bucketIter = bucketTable
+        .iterator()) {
+      Table.KeyValue<byte[], byte[]> kv = bucketIter.seek(startKey);
-    try (TableIterator<Table.KeyValue> keyIter = getKeyTable().iterator()) {
-      Table.KeyValue kv = keyIter.seek(seekKey);
+    try (TableIterator<byte[], ? extends KeyValue<byte[], byte[]>> keyIter =
+        getKeyTable()
+            .iterator()) {
+      Table.KeyValue<byte[], byte[]> kv = keyIter.seek(seekKey);
-    try (TableIterator<Table.KeyValue> keyIter = getDeletedTable().iterator()) {
+    try (TableIterator<byte[], ? extends KeyValue<byte[], byte[]>> keyIter =
+        getDeletedTable()
+            .iterator()) {
-        Table.KeyValue kv = keyIter.next();
+        KeyValue<byte[], byte[]> kv = keyIter.next();
-  public long countRowsInTable(Table table) throws IOException {
+  public <KEY, VALUE> long countRowsInTable(Table<KEY, VALUE> table)
+      throws IOException {
-      try (TableIterator<Table.KeyValue> keyValueTableIterator =
-               table.iterator()) {
+      try (TableIterator<KEY, ? extends KeyValue<KEY, VALUE>>
+          keyValueTableIterator = table.iterator()) {
