HDFS-4177. Add a snapshot parameter to INodeDirectory.getChildrenList() for selecting particular snapshot children list views.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1408923 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.util.ReadOnlyList;
-  private List<INode> children;
+  private List<INode> children = null;
-    this.children = null;
-    this.children = null;
-    this.children = other.getChildren();
+    this.children = other.children;
-  
-  INode getChild(String name) {
-    return getChildINode(DFSUtil.string2Bytes(name));
+
+  private INode getChild(byte[] name, Snapshot snapshot) {
+    final ReadOnlyList<INode> c = getChildrenList(snapshot);
+    final int i = ReadOnlyList.Util.binarySearch(c, name);
+    return i < 0? null: c.get(i);
-  private INode getChildINode(byte[] name) {
-    if (children == null) {
-      return null;
-    }
-    int low = Collections.binarySearch(children, name);
-    if (low >= 0) {
-      return children.get(low);
-    }
-    return null;
-  }
-
-  /**
-   * @return the INode of the last component in components, or null if the last
-   * component does not exist.
-   */
-  private INode getNode(byte[][] components, boolean resolveLink
+  /** @return the {@link INodesInPath} containing only the last inode. */
+  INodesInPath getINodesInPath(String path, boolean resolveLink
-    INodesInPath inodesInPath = getExistingPathINodes(components, 1,
-        resolveLink);
-    return inodesInPath.inodes[0];
+    return getExistingPathINodes(getPathComponents(path), 1, resolveLink);
-  /**
-   * This is the external interface
-   */
+  /** @return the last inode in the path. */
-    return getNode(getPathComponents(path), resolveLink);
+    return getINodesInPath(path, resolveLink).getINode(0);
-        curNode = parentDir.getChildINode(components[count + 1]);
+        curNode = parentDir.getChild(components[count + 1],
+            existing.getPathSnapshot());
-   * @return an empty list if the children list is null;
-   *         otherwise, return the children list.
-   *         The returned list should not be modified.
+   * @return the current children list if the specified snapshot is null;
+   *         otherwise, return the children list corresponding to the snapshot.
+   *         Note that the returned list is never null.
-  public List<INode> getChildrenList() {
-    return children==null ? EMPTY_LIST : children;
-  }
-  /** @return the children list which is possibly null. */
-  public List<INode> getChildren() {
-    return children;
+  public ReadOnlyList<INode> getChildrenList(final Snapshot snapshot) {
+    //TODO: use snapshot to select children list
+    return children == null ? EMPTY_READ_ONLY_LIST
+        : ReadOnlyList.Util.asReadOnlyList(children);
-     * @return the snapshot associated to the path.
-     * @see #snapshot
+     * For non-snapshot paths, return the latest snapshot found in the path.
+     * For snapshot paths, return null.
-    public Snapshot getSnapshot() {
-      return snapshot;
+    public Snapshot getLatestSnapshot() {
+      return isSnapshot? null: snapshot;
+    }
+    
+    /**
+     * For snapshot paths, return the snapshot specified in the path.
+     * For non-snapshot paths, return null.
+     */
+    public Snapshot getPathSnapshot() {
+      return isSnapshot? snapshot: null;
+    /** @return the i-th inode. */
+    INode getINode(int i) {
+      return inodes[i];
+    }
+    
-        b.append("]");
+        b.append("], length=").append(inodes.length);
