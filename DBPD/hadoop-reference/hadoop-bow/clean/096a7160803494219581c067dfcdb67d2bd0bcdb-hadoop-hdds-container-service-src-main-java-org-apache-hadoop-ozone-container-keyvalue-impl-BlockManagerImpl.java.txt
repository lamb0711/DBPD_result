HDDS-394. Rename *Key Apis in DatanodeContainerProtocol to *Block apis.
Contributed Dinesh Chitlangia.

+import org.apache.hadoop.ozone.container.common.helpers.BlockData;
-import org.apache.hadoop.ozone.container.keyvalue.helpers.KeyUtils;
-import org.apache.hadoop.ozone.container.common.helpers.KeyData;
+import org.apache.hadoop.ozone.container.keyvalue.helpers.BlockUtils;
-import org.apache.hadoop.ozone.container.keyvalue.interfaces.KeyManager;
+import org.apache.hadoop.ozone.container.keyvalue.interfaces.BlockManager;
-import static org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.Result.NO_SUCH_KEY;
+import static org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.Result.NO_SUCH_BLOCK;
- * This class is for performing key related operations on the KeyValue
+ * This class is for performing block related operations on the KeyValue
-public class KeyManagerImpl implements KeyManager {
+public class BlockManagerImpl implements BlockManager {
-  static final Logger LOG = LoggerFactory.getLogger(KeyManagerImpl.class);
+  static final Logger LOG = LoggerFactory.getLogger(BlockManagerImpl.class);
-   * Constructs a key Manager.
+   * Constructs a Block Manager.
-  public KeyManagerImpl(Configuration conf) {
+  public BlockManagerImpl(Configuration conf) {
-   * Puts or overwrites a key.
+   * Puts or overwrites a block.
-   * @param container - Container for which key need to be added.
-   * @param data     - Key Data.
-   * @return length of the key.
+   * @param container - Container for which block need to be added.
+   * @param data     - BlockData.
+   * @return length of the block.
-  public long putKey(Container container, KeyData data) throws IOException {
-    Preconditions.checkNotNull(data, "KeyData cannot be null for put " +
+  public long putBlock(Container container, BlockData data) throws IOException {
+    Preconditions.checkNotNull(data, "BlockData cannot be null for put " +
-    MetadataStore db = KeyUtils.getDB((KeyValueContainerData) container
+    MetadataStore db = BlockUtils.getDB((KeyValueContainerData) container
-   * Gets an existing key.
+   * Gets an existing block.
-   * @param container - Container from which key need to be get.
-   * @param blockID - BlockID of the key.
+   * @param container - Container from which block need to be fetched.
+   * @param blockID - BlockID of the block.
-  public KeyData getKey(Container container, BlockID blockID)
+  public BlockData getBlock(Container container, BlockID blockID)
-        "BlockID cannot be null in GetKet request");
+        "BlockID cannot be null in GetBlock request");
-    MetadataStore db = KeyUtils.getDB(containerData, config);
+    MetadataStore db = BlockUtils.getDB(containerData, config);
-      throw new StorageContainerException("Unable to find the key.",
-          NO_SUCH_KEY);
+      throw new StorageContainerException("Unable to find the block.",
+          NO_SUCH_BLOCK);
-    ContainerProtos.KeyData keyData = ContainerProtos.KeyData.parseFrom(kData);
-    return KeyData.getFromProtoBuf(keyData);
+    ContainerProtos.BlockData blockData =
+        ContainerProtos.BlockData.parseFrom(kData);
+    return BlockData.getFromProtoBuf(blockData);
-   * @param container - Container from which key need to be get.
-   * @param blockID - BlockID of the key.
+   * @param container - Container from which block need to be fetched.
+   * @param blockID - BlockID of the block.
-    MetadataStore db = KeyUtils.getDB(containerData, config);
+    MetadataStore db = BlockUtils.getDB(containerData, config);
-      throw new StorageContainerException("Unable to find the key.",
-          NO_SUCH_KEY);
+      throw new StorageContainerException("Unable to find the block.",
+          NO_SUCH_BLOCK);
-    ContainerProtos.KeyData keyData = ContainerProtos.KeyData.parseFrom(kData);
-    return keyData.getSize();
+    ContainerProtos.BlockData blockData =
+        ContainerProtos.BlockData.parseFrom(kData);
+    return blockData.getSize();
-   * Deletes an existing Key.
+   * Deletes an existing block.
-   * @param container - Container from which key need to be deleted.
+   * @param container - Container from which block need to be deleted.
-  public void deleteKey(Container container, BlockID blockID) throws
+  public void deleteBlock(Container container, BlockID blockID) throws
-    MetadataStore db = KeyUtils.getDB(cData, config);
+    MetadataStore db = BlockUtils.getDB(cData, config);
-    // to delete a key which might have just gotten inserted after
+    // to delete a Block which might have just gotten inserted after
-      throw new StorageContainerException("Unable to find the key.",
-          NO_SUCH_KEY);
+      throw new StorageContainerException("Unable to find the block.",
+          NO_SUCH_BLOCK);
-    // Decrement keycount here
+    // Decrement blockcount here
-   * List keys in a container.
+   * List blocks in a container.
-   * @param container - Container from which keys need to be listed.
+   * @param container - Container from which blocks need to be listed.
-   * @param count    - Number of keys to return.
-   * @return List of Keys that match the criteria.
+   * @param count    - Number of blocks to return.
+   * @return List of Blocks that match the criteria.
-  public List<KeyData> listKey(Container container, long startLocalID, int
+  public List<BlockData> listBlock(Container container, long startLocalID, int
-    List<KeyData> result = null;
+    List<BlockData> result = null;
-    MetadataStore db = KeyUtils.getDB(cData, config);
+    MetadataStore db = BlockUtils.getDB(cData, config);
-      KeyData value = KeyUtils.getKeyData(entry.getValue());
-      KeyData data = new KeyData(value.getBlockID());
+      BlockData value = BlockUtils.getBlockData(entry.getValue());
+      BlockData data = new BlockData(value.getBlockID());
-    KeyUtils.shutdownCache(ContainerCache.getInstance(config));
+    BlockUtils.shutdownCache(ContainerCache.getInstance(config));
