HADOOP-16850. Support getting thread info from thread group for JvmMetrics to improve the performance. Contributed by Tao Yang.

+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.CommonConfigurationKeys;
-  final ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
+  private ThreadMXBean threadMXBean;
-  JvmMetrics(String processName, String sessionId) {
+  JvmMetrics(String processName, String sessionId, boolean useThreadMXBean) {
+    if (useThreadMXBean) {
+      this.threadMXBean = ManagementFactory.getThreadMXBean();
+    }
+    // Reloading conf instead of getting from outside since it's redundant in
+    // code level to update all the callers across lots of modules,
+    // this method is called at most once for components (NN/DN/RM/NM/...)
+    // so that the overall cost is not expensive.
+    boolean useThreadMXBean = new Configuration().getBoolean(
+        CommonConfigurationKeys.HADOOP_METRICS_JVM_USE_THREAD_MXBEAN,
+        CommonConfigurationKeys.HADOOP_METRICS_JVM_USE_THREAD_MXBEAN_DEFAULT);
-                       new JvmMetrics(processName, sessionId));
+                       new JvmMetrics(processName, sessionId, useThreadMXBean));
-    getThreadUsage(rb);
+    if (threadMXBean != null) {
+      getThreadUsage(rb);
+    } else {
+      getThreadUsageFromGroup(rb);
+    }
+  private void getThreadUsageFromGroup(MetricsRecordBuilder rb) {
+    int threadsNew = 0;
+    int threadsRunnable = 0;
+    int threadsBlocked = 0;
+    int threadsWaiting = 0;
+    int threadsTimedWaiting = 0;
+    int threadsTerminated = 0;
+    ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();
+    Thread[] threads = new Thread[threadGroup.activeCount()];
+    threadGroup.enumerate(threads);
+    for (Thread thread : threads) {
+      if (thread == null) {
+        // race protection
+        continue;
+      }
+      switch (thread.getState()) {
+      case NEW:           threadsNew++;           break;
+      case RUNNABLE:      threadsRunnable++;      break;
+      case BLOCKED:       threadsBlocked++;       break;
+      case WAITING:       threadsWaiting++;       break;
+      case TIMED_WAITING: threadsTimedWaiting++;  break;
+      case TERMINATED:    threadsTerminated++;    break;
+      default:
+      }
+    }
+    rb.addGauge(ThreadsNew, threadsNew)
+        .addGauge(ThreadsRunnable, threadsRunnable)
+        .addGauge(ThreadsBlocked, threadsBlocked)
+        .addGauge(ThreadsWaiting, threadsWaiting)
+        .addGauge(ThreadsTimedWaiting, threadsTimedWaiting)
+        .addGauge(ThreadsTerminated, threadsTerminated);
+  }
+
