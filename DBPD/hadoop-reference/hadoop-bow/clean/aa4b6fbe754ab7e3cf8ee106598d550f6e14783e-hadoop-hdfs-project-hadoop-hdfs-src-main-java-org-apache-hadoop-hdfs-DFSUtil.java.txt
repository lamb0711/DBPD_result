HDFS-10391. Always enable NameNode service RPC port. Contributed by Gergely Novak.

+import static org.apache.hadoop.hdfs.client.HdfsClientConfigKeys.DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT;
-   * Returns list of InetSocketAddresses corresponding to namenodes from the
-   * configuration.
-   * 
-   * Returns namenode address specifically configured for datanodes (using
-   * service ports), if found. If not, regular RPC address configured for other
-   * clients is returned.
-   * 
-   * @param conf configuration
-   * @return list of InetSocketAddress
-   * @throws IOException on error
-   */
-  public static Map<String, Map<String, InetSocketAddress>> getNNServiceRpcAddresses(
-      Configuration conf) throws IOException {
-    // Use default address as fall back
-    String defaultAddress;
-    try {
-      defaultAddress = NetUtils.getHostPortString(
-          DFSUtilClient.getNNAddress(conf));
-    } catch (IllegalArgumentException e) {
-      defaultAddress = null;
-    }
-    
-    Map<String, Map<String, InetSocketAddress>> addressList =
-      DFSUtilClient.getAddresses(conf, defaultAddress,
-                                 DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,
-                                 DFS_NAMENODE_RPC_ADDRESS_KEY);
-    if (addressList.isEmpty()) {
-      throw new IOException("Incorrect configuration: namenode address "
-          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + " or "  
-          + DFS_NAMENODE_RPC_ADDRESS_KEY
-          + " is not configured.");
-    }
-    return addressList;
-  }
-
-  /**
-   * Returns namenode address specifically configured for datanodes (using
-   * service ports), if found. If not, regular RPC address configured for other
-   * clients is returned.
+   * Returns namenode address specifically configured for datanodes
-    getNNServiceRpcAddressesForCluster(Configuration conf) throws IOException {
+      getNNServiceRpcAddresses(Configuration conf) throws IOException {
-      defaultAddress = NetUtils.getHostPortString(
-          DFSUtilClient.getNNAddress(conf));
+      InetSocketAddress rpcAddress = DFSUtilClient.getNNAddress(conf);
+      InetSocketAddress serviceAddress = InetSocketAddress.createUnresolved(
+          rpcAddress.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);
+      defaultAddress = NetUtils.getHostPortString(serviceAddress);
+    // If true, then replace the port numbers in the final address list
+    // with the default service RPC port.
+    boolean replacePortNumbers = false;
+
+    // First try to lookup using the service RPC address keys.
-            DFSUtilClient.getAddressesForNsIds(conf, parentNameServices,
-                                               defaultAddress,
-                                               DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,
-                                               DFS_NAMENODE_RPC_ADDRESS_KEY);
+            DFSUtilClient.getAddressesForNsIds(
+                conf, parentNameServices, null,
+                DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY);
+
+    // Next try to lookup using the RPC address key.
+    if (addressList.isEmpty()) {
+      replacePortNumbers = true;
+      addressList = DFSUtilClient.getAddressesForNsIds(
+          conf, parentNameServices, null, DFS_NAMENODE_RPC_ADDRESS_KEY);
+    }
+
+    // Finally, fallback to the default address.
+    // This will not yield the correct address in a federated/HA setup.
+    if (addressList.isEmpty()) {
+      addressList = DFSUtilClient.getAddressesForNsIds(
+          conf, parentNameServices, defaultAddress);
+    }
+
-              + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + " or "
-              + DFS_NAMENODE_RPC_ADDRESS_KEY
-              + " is not configured.");
+          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + " or "
+          + DFS_NAMENODE_RPC_ADDRESS_KEY
+          + " is not configured.");
+    }
+
+    if (replacePortNumbers) {
+      // Replace the RPC port(s) with the default service RPC port(s)
+      addressList.forEach((nsId, addresses) -> {
+        addresses.forEach((nnId, address) -> {
+          InetSocketAddress serviceAddress = InetSocketAddress.createUnresolved(
+              address.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);
+          addresses.put(nnId, serviceAddress);
+        });
+      });
-    String addrKey = DFSUtilClient.concatSuffixes(
-        DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY, nsId, nnId);
-
-      serviceRpcAddr = conf.get(addrKey);
+      String addrKey = DFSUtilClient.concatSuffixes(
+          DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY, nsId, nnId);
+      String rpcAddress = conf.get(addrKey);
+      if (rpcAddress != null) {
+        InetSocketAddress rpcAddr = NetUtils.createSocketAddr(rpcAddress);
+        InetSocketAddress serviceAddr = InetSocketAddress.createUnresolved(
+            rpcAddr.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);
+        serviceRpcAddr = NetUtils.getHostPortString(serviceAddr);
+      }
