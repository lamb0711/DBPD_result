YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)

-import org.apache.hadoop.yarn.server.timelineservice.reader.filter.TimelineFilterList;
+import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineDataToRetrieve;
+import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineEntityFilters;
+import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineReaderContext;
-      Long limit, Long createdTimeBegin, Long createdTimeEnd,
-      Map<String, Set<String>> relatesTo, Map<String, Set<String>> isRelatedTo,
-      Map<String, Object> infoFilters, Map<String, String> configFilters,
-      Set<String> metricFilters, Set<String> eventFilters,
-      TimelineFilterList confsToRetrieve, TimelineFilterList metricsToRetrieve,
-      EnumSet<Field> fieldsToRetrieve) throws IOException {
-    if (limit == null || limit <= 0) {
-      limit = DEFAULT_LIMIT;
-    }
-    if (createdTimeBegin == null || createdTimeBegin <= 0) {
-      createdTimeBegin = 0L;
-    }
-    if (createdTimeEnd == null || createdTimeEnd <= 0) {
-      createdTimeEnd = Long.MAX_VALUE;
-    }
-
+      TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve)
+      throws IOException {
-        if (!isTimeInRange(entity.getCreatedTime(), createdTimeBegin,
-            createdTimeEnd)) {
+        if (!isTimeInRange(entity.getCreatedTime(),
+            filters.getCreatedTimeBegin(), filters.getCreatedTimeEnd())) {
-        if (relatesTo != null && !relatesTo.isEmpty() &&
-            !TimelineStorageUtils
-                .matchRelations(entity.getRelatesToEntities(), relatesTo)) {
+        if (filters.getRelatesTo() != null &&
+            !filters.getRelatesTo().isEmpty() &&
+            !TimelineStorageUtils.matchRelations(
+            entity.getRelatesToEntities(), filters.getRelatesTo())) {
-        if (isRelatedTo != null && !isRelatedTo.isEmpty() &&
-            !TimelineStorageUtils
-                .matchRelations(entity.getIsRelatedToEntities(), isRelatedTo)) {
+        if (filters.getIsRelatedTo()  != null &&
+            !filters.getIsRelatedTo().isEmpty() &&
+            !TimelineStorageUtils.matchRelations(
+            entity.getIsRelatedToEntities(), filters.getIsRelatedTo())) {
-        if (infoFilters != null && !infoFilters.isEmpty() &&
-            !TimelineStorageUtils.matchFilters(entity.getInfo(), infoFilters)) {
-          continue;
-        }
-        if (configFilters != null && !configFilters.isEmpty() &&
+        if (filters.getInfoFilters() != null &&
+            !filters.getInfoFilters().isEmpty() &&
-                entity.getConfigs(), configFilters)) {
+            entity.getInfo(), filters.getInfoFilters())) {
-        if (metricFilters != null && !metricFilters.isEmpty() &&
+        if (filters.getConfigFilters() != null &&
+            !filters.getConfigFilters().isEmpty() &&
+            !TimelineStorageUtils.matchFilters(
+            entity.getConfigs(), filters.getConfigFilters())) {
+          continue;
+        }
+        if (filters.getMetricFilters() != null &&
+            !filters.getMetricFilters().isEmpty() &&
-                entity.getMetrics(), metricFilters)) {
+            entity.getMetrics(), filters.getMetricFilters())) {
-        if (eventFilters != null && !eventFilters.isEmpty() &&
+        if (filters.getEventFilters() != null &&
+            !filters.getEventFilters().isEmpty() &&
-                entity.getEvents(), eventFilters)) {
+            entity.getEvents(), filters.getEventFilters())) {
-        TimelineEntity entityToBeReturned =
-            createEntityToBeReturned(entity, fieldsToRetrieve);
+        TimelineEntity entityToBeReturned = createEntityToBeReturned(
+            entity, dataToRetrieve.getFieldsToRetrieve());
-        if (entitiesAdded >= limit) {
+        if (entitiesAdded >= filters.getLimit()) {
-  public TimelineEntity getEntity(String userId, String clusterId,
-      String flowName, Long flowRunId, String appId, String entityType,
-      String entityId, TimelineFilterList confsToRetrieve,
-      TimelineFilterList metricsToRetrieve, EnumSet<Field> fieldsToRetrieve)
-      throws IOException {
-    String flowRunPath = getFlowRunPath(userId, clusterId, flowName,
-        flowRunId, appId);
+  public TimelineEntity getEntity(TimelineReaderContext context,
+      TimelineDataToRetrieve dataToRetrieve) throws IOException {
+    String flowRunPath = getFlowRunPath(context.getUserId(),
+        context.getClusterId(), context.getFlowName(), context.getFlowRunId(),
+        context.getAppId());
-        clusterId + "/" + flowRunPath + "/" + appId + "/" + entityType);
-    File entityFile =
-        new File(dir, entityId + TIMELINE_SERVICE_STORAGE_EXTENSION);
+        context.getClusterId() + "/" + flowRunPath + "/" + context.getAppId() +
+        "/" + context.getEntityType());
+    File entityFile = new File(
+        dir, context.getEntityId() + TIMELINE_SERVICE_STORAGE_EXTENSION);
-      return createEntityToBeReturned(entity, fieldsToRetrieve);
+      return createEntityToBeReturned(
+          entity, dataToRetrieve.getFieldsToRetrieve());
-      LOG.info("Cannot find entity {id:" + entityId + " , type:" + entityType +
-          "}. Will send HTTP 404 in response.");
+      LOG.info("Cannot find entity {id:" + context.getEntityId() + " , type:" +
+          context.getEntityType() + "}. Will send HTTP 404 in response.");
-  public Set<TimelineEntity> getEntities(String userId, String clusterId,
-      String flowName, Long flowRunId, String appId, String entityType,
-      Long limit, Long createdTimeBegin, Long createdTimeEnd,
-      Map<String, Set<String>> relatesTo, Map<String, Set<String>> isRelatedTo,
-      Map<String, Object> infoFilters, Map<String, String> configFilters,
-      Set<String> metricFilters, Set<String> eventFilters,
-      TimelineFilterList confsToRetrieve, TimelineFilterList metricsToRetrieve,
-      EnumSet<Field> fieldsToRetrieve) throws IOException {
-    String flowRunPath =
-        getFlowRunPath(userId, clusterId, flowName, flowRunId, appId);
+  public Set<TimelineEntity> getEntities(TimelineReaderContext context,
+      TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve)
+      throws IOException {
+    String flowRunPath = getFlowRunPath(context.getUserId(),
+        context.getClusterId(), context.getFlowName(), context.getFlowRunId(),
+        context.getAppId());
-            clusterId + "/" + flowRunPath + "/" + appId + "/" + entityType);
-    return getEntities(dir, entityType, limit, createdTimeBegin, createdTimeEnd,
-        relatesTo, isRelatedTo, infoFilters, configFilters, metricFilters,
-        eventFilters, confsToRetrieve, metricsToRetrieve, fieldsToRetrieve);
+            context.getClusterId() + "/" + flowRunPath + "/" +
+            context.getAppId() + "/" + context.getEntityType());
+    return getEntities(dir, context.getEntityType(), filters, dataToRetrieve);
