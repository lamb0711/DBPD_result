HDFS-6911. Archival Storage: check if a block is already scheduled in Mover. Contributed by Tsz Wo Nicholas Sze.

-    private PendingMove() {
-    }
-
-    public PendingMove(DBlock block, Source source, StorageGroup target) {
-      this.block = block;
+    private PendingMove(Source source, StorageGroup target) {
+      // source and target must have the same storage type
+      final StorageType t = source.getStorageType();
-        if (markMovedIfGoodBlock(i.next())) {
+        if (markMovedIfGoodBlock(i.next(), t)) {
-    private boolean markMovedIfGoodBlock(DBlock block) {
+    private boolean markMovedIfGoodBlock(DBlock block, StorageType targetStorageType) {
-          if (isGoodBlockCandidate(source, target, block)) {
+          if (isGoodBlockCandidate(source, target, targetStorageType, block)) {
-    public boolean chooseProxySource() {
+    private boolean chooseProxySource() {
+      private PendingMove addPendingMove(DBlock block, final PendingMove pm) {
+        if (getDDatanode().addPendingBlock(pm)) {
+          if (pm.markMovedIfGoodBlock(block, getStorageType())) {
+            incScheduledSize(pm.block.getNumBytes());
+            return pm;
+          } else {
+            getDDatanode().removePendingBlock(pm);
+          }
+        }
+        return null;
+      }
+
+      // source and target must have the same storage type
+      final StorageType sourceStorageType = getStorageType();
-        if (Dispatcher.this.isGoodBlockCandidate(this, t.target, block)) {
+        if (Dispatcher.this.isGoodBlockCandidate(this, t.target,
+            sourceStorageType, block)) {
-        PendingMove pendingBlock = new PendingMove();
+        final PendingMove pendingBlock = new PendingMove(this, task.target);
-          pendingBlock.source = this;
-          pendingBlock.target = task.target;
+    
+    /** Add a pending move */
+    public PendingMove addPendingMove(DBlock block, StorageGroup target) {
+      return target.addPendingMove(block, new PendingMove(this, target));
+    }
-  private boolean isGoodBlockCandidate(StorageGroup source, StorageGroup target,
-      DBlock block) {
-    // match source and target storage type
-    return isGoodBlockCandidate(source, target, source.getStorageType(), block);
-  }
-
-  public boolean isGoodBlockCandidate(StorageGroup source, StorageGroup target,
+  private boolean isGoodBlockCandidate(StorageGroup source, StorageGroup target,
