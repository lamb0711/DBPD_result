YARN-9865. Capacity scheduler: add support for combined %user + %secondary_group mapping. Contributed by Manikandan R

+  private String getSecondaryGroup(String user) throws IOException {
+    List<String> groupsList = groups.getGroups(user);
+    String secondaryGroup = null;
+    // Traverse all secondary groups (as there could be more than one
+    // and position is not guaranteed) and ensure there is queue with
+    // the same name
+    for (int i = 1; i < groupsList.size(); i++) {
+      if (this.queueManager.getQueue(groupsList.get(i)) != null) {
+        secondaryGroup = groupsList.get(i);
+        break;
+      }
+    }
+    return secondaryGroup;
+  }
+
+          } else if (mapping.getParentQueue() != null
+              && mapping.getParentQueue().equals(SECONDARY_GROUP_MAPPING)
+              && mapping.getQueue().equals(CURRENT_USER_MAPPING)) {
+            String secondaryGroup = getSecondaryGroup(user);
+            if (secondaryGroup != null) {
+              return getPlacementContext(new QueueMapping(mapping.getType(),
+                  mapping.getSource(), CURRENT_USER_MAPPING, secondaryGroup),
+                  user);
+            } else {
+              if (LOG.isDebugEnabled()) {
+                LOG.debug("User {} is not associated with any Secondary Group. "
+                    + "Hence it may use the 'default' queue", user);
+              }
+              return null;
+            }
-            List<String> groupsList = groups.getGroups(user);
-            String secondaryGroup = null;
-            // Traverse all secondary groups (as there could be more than one
-            // and position is not guaranteed) and ensure there is queue with
-            // the same name
-            for (int i = 1; i < groupsList.size(); i++) {
-              if (this.queueManager.getQueue(groupsList.get(i)) != null) {
-                secondaryGroup = groupsList.get(i);
-                break;
-              }
-            }
+            String secondaryGroup = getSecondaryGroup(user);
-        && queuePath.getParentQueue().equals(PRIMARY_GROUP_MAPPING)) {
+        && (queuePath.getParentQueue().equals(PRIMARY_GROUP_MAPPING)
+            || queuePath.getParentQueue().equals(SECONDARY_GROUP_MAPPING))) {
