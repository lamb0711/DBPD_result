HDFS-11461. DataNode Disk Outlier Detection. Contributed by Hanisha Koneru.

- * A utility class to help detect nodes whose aggregate latency
- * is an outlier within a given set.
+ * A utility class to help detect resources (nodes/ disks) whose aggregate
+ * latency is an outlier within a given set.
- *  2. Never flag nodes whose aggregate latency is below a low threshold.
- *  3. Never flag nodes whose aggregate latency is less than a small
+ *  2. Never flag resources whose aggregate latency is below a low threshold.
+ *  3. Never flag resources whose aggregate latency is less than a small
-public class SlowNodeDetector {
+public class OutlierDetector {
-      LoggerFactory.getLogger(SlowNodeDetector.class);
+      LoggerFactory.getLogger(OutlierDetector.class);
-   * Minimum number of peers to run outlier detection.
+   * Minimum number of resources to run outlier detection.
-  private static long minOutlierDetectionPeers = 10;
+  private final long minNumResources;
-   * Threshold in milliseconds below which a DataNode is definitely not slow.
+   * Threshold in milliseconds below which a node/ disk is definitely not slow.
-  public SlowNodeDetector(long lowThresholdMs) {
+  public OutlierDetector(long minNumResources, long lowThresholdMs) {
+    this.minNumResources = minNumResources;
-   * Return a set of DataNodes whose latency is much higher than
-   * their peers. The input is a map of (node -> aggregate latency)
+   * Return a set of nodes/ disks whose latency is much higher than
+   * their counterparts. The input is a map of (resource -> aggregate latency)
-    if (stats.size() < minOutlierDetectionPeers) {
+    if (stats.size() < minNumResources) {
-              "latency data for enough peers. Have {}, need at least {}",
-          stats.size(), minOutlierDetectionPeers);
+              "latency data for enough resources. Have {}, need at least {}",
+          stats.size(), minNumResources);
-    final Map<String, Double> slowNodes = new HashMap<>();
+    final Map<String, Double> slowResources = new HashMap<>();
-    // Find nodes whose latency exceeds the threshold.
+    // Find resources whose latency exceeds the threshold.
-        slowNodes.put(entry.getKey(), entry.getValue());
+        slowResources.put(entry.getKey(), entry.getValue());
-    return slowNodes;
+    return slowResources;
-
-  /**
-   * This method *must not* be used outside of unit tests.
-   */
-  @VisibleForTesting
-  static void setMinOutlierDetectionPeers(long minOutlierDetectionPeers) {
-    SlowNodeDetector.minOutlierDetectionPeers = minOutlierDetectionPeers;
-  }
-
-  @VisibleForTesting
-  static long getMinOutlierDetectionPeers() {
-    return minOutlierDetectionPeers;
-  }
