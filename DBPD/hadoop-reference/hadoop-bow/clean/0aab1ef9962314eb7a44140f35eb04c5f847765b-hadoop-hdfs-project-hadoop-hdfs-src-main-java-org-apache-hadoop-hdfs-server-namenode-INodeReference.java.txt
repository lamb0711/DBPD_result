HDFS-4800. Fix INodeDirectoryWithSnapshot#cleanDeletedINode.  Contributed by Jing Zhao


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479707 13f79535-47bb-0310-9956-ffa450edef68

-    public Quota.Counts cleanSubtree(Snapshot snapshot, Snapshot prior,
+    public Quota.Counts cleanSubtree(final Snapshot snapshot, Snapshot prior,
-      // if prior is null, or if prior's id is <= dstSnapshotId, we will call
-      // destroyAndCollectBlocks method
-      Preconditions.checkArgument(prior != null);
+      // if prior is null, we need to check snapshot belonging to the previous
+      // WithName instance
+      if (prior == null) {
+        prior = getPriorSnapshot(this);
+      }
+
+      Snapshot snapshot = getSelfSnapshot();
-        Snapshot snapshot = getSelfSnapshot();
-          Preconditions.checkState(prior == null || 
-              snapshot.getId() > prior.getId());
+          if (prior != null && snapshot.getId() <= prior.getId()) {
+            // the snapshot to be deleted has been deleted while traversing 
+            // the src tree of the previous rename operation. This usually 
+            // happens when rename's src and dst are under the same 
+            // snapshottable directory. E.g., the following operation sequence:
+            // 1. create snapshot s1 on /test
+            // 2. rename /test/foo/bar to /test/foo2/bar
+            // 3. create snapshot s2 on /test
+            // 4. delete snapshot s2
+            return;
+          }
+        // if prior is null, we need to check snapshot belonging to the previous
+        // WithName instance
+        if (prior == null) {
+          prior = getPriorSnapshot(this);
+        }
+        if (snapshot != null && snapshot.equals(prior)) {
+          return Quota.Counts.newInstance();
+        }
