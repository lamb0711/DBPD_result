HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.

+import java.util.ArrayList;
+import com.microsoft.windowsazure.storage.blob.CloudBlob;
+import com.microsoft.windowsazure.storage.blob.CloudPageBlob;
+import com.microsoft.windowsazure.storage.blob.PageRange;
+      } else if (unwrapped instanceof CloudPageBlob) {
+        return new CloudPageBlobWrapperImpl((CloudPageBlob) unwrapped);
-    public CloudBlockBlobWrapper getBlockBlobReference(String relativePath)
+    public CloudBlobWrapper getBlockBlobReference(String relativePath)
-      return new CloudBlockBlobWrapperImpl(
-          container.getBlockBlobReference(relativePath));
+      return new CloudBlockBlobWrapperImpl(container.getBlockBlobReference(relativePath));
-  }
+    
+    @Override
+    public CloudBlobWrapper getPageBlobReference(String relativePath)
+        throws URISyntaxException, StorageException {
+      return new CloudPageBlobWrapperImpl(
+          container.getPageBlobReference(relativePath));
+    }
-  //
-  // CloudBlockBlobWrapperImpl
-  //
-  @InterfaceAudience.Private
-  static class CloudBlockBlobWrapperImpl extends CloudBlockBlobWrapper {
-    private final CloudBlockBlob blob;
+  }
+  
+  abstract static class CloudBlobWrapperImpl implements CloudBlobWrapper {
+    private final CloudBlob blob;
+
+    @Override
+    public CloudBlob getBlob() {
+      return blob;
+    }
-      return blob.getUri();
+      return getBlob().getUri();
-    public CloudBlockBlobWrapperImpl(CloudBlockBlob blob) {
+    protected CloudBlobWrapperImpl(CloudBlob blob) {
-      return blob.getMetadata();
+      return getBlob().getMetadata();
-    public void startCopyFromBlob(CloudBlockBlobWrapper sourceBlob,
-        OperationContext opContext) throws StorageException, URISyntaxException {
-
-      blob.startCopyFromBlob(((CloudBlockBlobWrapperImpl) sourceBlob).blob,
-          null, null, null, opContext);
-
-    }
-
-    @Override
-    public void delete(OperationContext opContext) throws StorageException {
-      blob.delete(DeleteSnapshotsOption.NONE, null, null, opContext);
-    }
-
-    @Override
-    public boolean exists(OperationContext opContext) throws StorageException {
-      return blob.exists(null, null, opContext);
-    }
-
-    @Override
-    public void downloadAttributes(OperationContext opContext)
+    public void delete(OperationContext opContext, SelfRenewingLease lease)
-      blob.downloadAttributes(null, null, opContext);
+      getBlob().delete(DeleteSnapshotsOption.NONE, getLeaseCondition(lease),
+          null, opContext);
+    }
+
+    /**
+     * Return and access condition for this lease, or else null if
+     * there's no lease.
+     */
+    private AccessCondition getLeaseCondition(SelfRenewingLease lease) {
+      AccessCondition leaseCondition = null;
+      if (lease != null) {
+        leaseCondition = AccessCondition.generateLeaseCondition(lease.getLeaseID());
+      }
+      return leaseCondition;
+    }
+
+    @Override
+    public boolean exists(OperationContext opContext)
+        throws StorageException {
+      return getBlob().exists(null, null, opContext);
+    }
+
+    @Override
+    public void downloadAttributes(
+        OperationContext opContext) throws StorageException {
+      getBlob().downloadAttributes(null, null, opContext);
-      return blob.getProperties();
+      return getBlob().getProperties();
-      blob.setMetadata(metadata);
+      getBlob().setMetadata(metadata);
-    public InputStream openInputStream(BlobRequestOptions options,
+    public InputStream openInputStream(
+        BlobRequestOptions options,
-      return blob.openInputStream(null, options, opContext);
+      return getBlob().openInputStream(null, options, opContext);
-    @Override
-    public OutputStream openOutputStream(BlobRequestOptions options,
+    public OutputStream openOutputStream(
+        BlobRequestOptions options,
-      return blob.openOutputStream(null, options, opContext);
+      return ((CloudBlockBlob) getBlob()).openOutputStream(null, options, opContext);
-    @Override
-      blob.upload(sourceStream, 0, null, null, opContext);
+      getBlob().upload(sourceStream, 0, null, null, opContext);
-      return blob.getContainer();
+      return getBlob().getContainer();
-      return blob.getParent();
+      return getBlob().getParent();
-      blob.uploadMetadata(null, null, opContext);
+      getBlob().uploadMetadata(null, null, opContext);
-    @Override
-    public void uploadProperties(OperationContext opContext)
+    public void uploadProperties(OperationContext opContext, SelfRenewingLease lease)
-      blob.uploadProperties(null, null, opContext);
+
+      // Include lease in request if lease not null.
+      getBlob().uploadProperties(getLeaseCondition(lease), null, opContext);
-      blob.setStreamMinimumReadSizeInBytes(minimumReadSizeBytes);
+      getBlob().setStreamMinimumReadSizeInBytes(minimumReadSizeBytes);
-      blob.setStreamWriteSizeInBytes(writeBlockSizeBytes);
+      getBlob().setStreamWriteSizeInBytes(writeBlockSizeBytes);
-      return blob.getStorageUri();
+      return getBlob().getStorageUri();
-      return blob.getCopyState();
+      return getBlob().getCopyState();
+    }
+
+    @Override
+    public void startCopyFromBlob(URI source,
+        OperationContext opContext)
+            throws StorageException, URISyntaxException {
+      getBlob().startCopyFromBlob(source,
+          null, null, null, opContext);
+    }
+
+    @Override
+    public void downloadRange(long offset, long length, OutputStream outStream,
+        BlobRequestOptions options, OperationContext opContext)
+            throws StorageException, IOException {
+
+      getBlob().downloadRange(offset, length, outStream, null, options, opContext);
+    }
+
+    @Override
+    public SelfRenewingLease acquireLease() throws StorageException {
+      return new SelfRenewingLease(this);
+    }
+  }
+  
+
+  //
+  // CloudBlockBlobWrapperImpl
+  //
+
+  static class CloudBlockBlobWrapperImpl extends CloudBlobWrapperImpl implements CloudBlockBlobWrapper {
+    public CloudBlockBlobWrapperImpl(CloudBlockBlob blob) {
+      super(blob);
+    }
+
+    public OutputStream openOutputStream(
+        BlobRequestOptions options,
+        OperationContext opContext) throws StorageException {
+      return ((CloudBlockBlob) getBlob()).openOutputStream(null, options, opContext);
+    }
+
+    public void upload(InputStream sourceStream, OperationContext opContext)
+        throws StorageException, IOException {
+      getBlob().upload(sourceStream, 0, null, null, opContext);
+    }
+
+    public void uploadProperties(OperationContext opContext)
+        throws StorageException {
+      getBlob().uploadProperties(null, null, opContext);
+    }
+
+  }
+
+  static class CloudPageBlobWrapperImpl extends CloudBlobWrapperImpl implements CloudPageBlobWrapper {
+    public CloudPageBlobWrapperImpl(CloudPageBlob blob) {
+      super(blob);
+    }
+
+    public void create(final long length, BlobRequestOptions options,
+        OperationContext opContext) throws StorageException {
+      ((CloudPageBlob) getBlob()).create(length, null, options, opContext);
+    }
+
+    public void uploadPages(final InputStream sourceStream, final long offset,
+        final long length, BlobRequestOptions options, OperationContext opContext)
+        throws StorageException, IOException {
+      ((CloudPageBlob) getBlob()).uploadPages(sourceStream, offset, length, null,
+          options, opContext);
+    }
+
+    public ArrayList<PageRange> downloadPageRanges(BlobRequestOptions options,
+        OperationContext opContext) throws StorageException {
+      return ((CloudPageBlob) getBlob()).downloadPageRanges(
+          null, options, opContext);
