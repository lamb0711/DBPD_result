HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.
Contributed by Steve Loughran and Ryan Blue.

-import com.fasterxml.jackson.core.JsonParseException;
-import com.fasterxml.jackson.databind.DeserializationFeature;
-import com.fasterxml.jackson.databind.JsonMappingException;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.SerializationFeature;
-import com.google.common.base.Preconditions;
-import org.apache.hadoop.fs.FSDataInputStream;
-import org.apache.hadoop.fs.FSDataOutputStream;
-import org.apache.hadoop.fs.FileStatus;
-import org.apache.hadoop.fs.FileSystem;
-import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.io.IOUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.hadoop.util.JsonSerialization;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.InputStream;
- * It constructs an object mapper as an instance field.
- * and synchronizes access to those methods
- * which use the mapper
+ * This extends {@link JsonSerialization} with the notion
+ * of a marker field in the JSON file, with
+ * <ol>
+ *   <li>a fail-fast check for it before even trying to parse.</li>
+ *   <li>Specific IOException subclasses for a failure.</li>
+ * </ol>
+ * The rationale for this is not only to support different things in the,
+ * registry, but the fact that all ZK nodes have a size &gt; 0 when examined.
+ *
-@InterfaceAudience.Private()
+@InterfaceAudience.Private
-public class JsonSerDeser<T> {
+public class JsonSerDeser<T> extends JsonSerialization<T> {
-  private static final Logger LOG = LoggerFactory.getLogger(JsonSerDeser.class);
-  private final Class<T> classType;
-  private final ObjectMapper mapper;
-
-    Preconditions.checkArgument(classType != null, "null classType");
-    this.classType = classType;
-    this.mapper = new ObjectMapper();
-    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
-  }
-
-  /**
-   * Get the simple name of the class type to be marshalled
-   * @return the name of the class being marshalled
-   */
-  public String getName() {
-    return classType.getSimpleName();
-  }
-
-  /**
-   * Convert from JSON
-   *
-   * @param json input
-   * @return the parsed JSON
-   * @throws IOException IO problems
-   * @throws JsonParseException If the input is not well-formatted
-   * @throws JsonMappingException failure to map from the JSON to this class
-   */
-  @SuppressWarnings("unchecked")
-  public synchronized T fromJson(String json)
-      throws IOException, JsonParseException, JsonMappingException {
-    try {
-      return mapper.readValue(json, classType);
-    } catch (IOException e) {
-      LOG.error("Exception while parsing json : " + e + "\n" + json, e);
-      throw e;
-    }
-  }
-
-  /**
-   * Convert from a JSON file
-   * @param jsonFile input file
-   * @return the parsed JSON
-   * @throws IOException IO problems
-   * @throws JsonParseException If the input is not well-formatted
-   * @throws JsonMappingException failure to map from the JSON to this class
-   */
-  @SuppressWarnings("unchecked")
-  public synchronized T fromFile(File jsonFile)
-      throws IOException, JsonParseException, JsonMappingException {
-    try {
-      return mapper.readValue(jsonFile, classType);
-    } catch (IOException e) {
-      LOG.error("Exception while parsing json file {}: {}", jsonFile, e);
-      throw e;
-    }
-  }
-
-  /**
-   * Convert from a JSON file
-   * @param resource input file
-   * @return the parsed JSON
-   * @throws IOException IO problems
-   * @throws JsonParseException If the input is not well-formatted
-   * @throws JsonMappingException failure to map from the JSON to this class
-   */
-  @SuppressWarnings({"IOResourceOpenedButNotSafelyClosed"})
-  public synchronized T fromResource(String resource)
-      throws IOException, JsonParseException, JsonMappingException {
-    InputStream resStream = null;
-    try {
-      resStream = this.getClass().getResourceAsStream(resource);
-      if (resStream == null) {
-        throw new FileNotFoundException(resource);
-      }
-      return mapper.readValue(resStream, classType);
-    } catch (IOException e) {
-      LOG.error("Exception while parsing json resource {}: {}", resource, e);
-      throw e;
-    } finally {
-      IOUtils.closeStream(resStream);
-    }
-  }
-
-  /**
-   * clone by converting to JSON and back again.
-   * This is much less efficient than any Java clone process.
-   * @param instance instance to duplicate
-   * @return a new instance
-   * @throws IOException problems.
-   */
-  public T fromInstance(T instance) throws IOException {
-    return fromJson(toJson(instance));
-  }
-
-  /**
-   * Load from a Hadoop filesystem
-   * @param fs filesystem
-   * @param path path
-   * @return a loaded CD
-   * @throws IOException IO problems
-   * @throws EOFException if not enough bytes were read in
-   * @throws JsonParseException parse problems
-   * @throws JsonMappingException O/J mapping problems
-   */
-  public T load(FileSystem fs, Path path)
-      throws IOException, JsonParseException, JsonMappingException {
-    FileStatus status = fs.getFileStatus(path);
-    long len = status.getLen();
-    byte[] b = new byte[(int) len];
-    FSDataInputStream dataInputStream = fs.open(path);
-    int count = dataInputStream.read(b);
-    if (count != len) {
-      throw new EOFException(path.toString() + ": read finished prematurely");
-    }
-    return fromBytes(path.toString(), b);
-  }
-
-  /**
-   * Save a cluster description to a hadoop filesystem
-   * @param fs filesystem
-   * @param path path
-   * @param overwrite should any existing file be overwritten
-   * @throws IOException IO exception
-   */
-  public void save(FileSystem fs, Path path, T instance,
-      boolean overwrite) throws
-      IOException {
-    FSDataOutputStream dataOutputStream = fs.create(path, overwrite);
-    writeJsonAsBytes(instance, dataOutputStream);
-  }
-
-  /**
-   * Write the json as bytes -then close the file
-   * @param dataOutputStream an outout stream that will always be closed
-   * @throws IOException on any failure
-   */
-  private void writeJsonAsBytes(T instance,
-      DataOutputStream dataOutputStream) throws IOException {
-    try {
-      byte[] b = toBytes(instance);
-      dataOutputStream.write(b);
-    } finally {
-      dataOutputStream.close();
-    }
-  }
-
-  /**
-   * Convert JSON To bytes
-   * @param instance instance to convert
-   * @return a byte array
-   * @throws IOException
-   */
-  public byte[] toBytes(T instance) throws IOException {
-    String json = toJson(instance);
-    return json.getBytes(UTF_8);
+    super(classType, false, false);
+   * @throws NoRecordException if the data is not considered a record: either
+   * it is too short or it did not contain the marker string.
-  public T fromBytes(String path, byte[] bytes) throws IOException,
-      InvalidRecordException {
+  public T fromBytes(String path, byte[] bytes) throws IOException {
-      throws IOException, NoRecordException, InvalidRecordException {
+      throws IOException {
-  /**
-   * Convert an instance to a JSON string
-   * @param instance instance to convert
-   * @return a JSON string description
-   * @throws JsonProcessingException Json generation problems
-   */
-  public synchronized String toJson(T instance) throws JsonProcessingException {
-    mapper.configure(SerializationFeature.INDENT_OUTPUT, true);
-    return mapper.writeValueAsString(instance);
-  }
-
-  /**
-   * Convert an instance to a string form for output. This is a robust
-   * operation which will convert any JSON-generating exceptions into
-   * error text.
-   * @param instance non-null instance
-   * @return a JSON string
-   */
-  public String toString(T instance) {
-    Preconditions.checkArgument(instance != null, "Null instance argument");
-    try {
-      return toJson(instance);
-    } catch (JsonProcessingException e) {
-      return "Failed to convert to a string: " + e;
-    }
-  }
