HADOOP-16266. Add more fine-grained processing time metrics to the RPC layer. Contributed by Christopher Gregorian.

+import java.util.concurrent.TimeUnit;
+
-import org.apache.hadoop.metrics2.lib.MutableCounterInt;
+  /** The time unit used when storing/accessing time durations. */
+  public final static TimeUnit TIMEUNIT = TimeUnit.MILLISECONDS;
-      rpcQueueTimeMillisQuantiles =
+      rpcQueueTimeQuantiles =
-      rpcProcessingTimeMillisQuantiles =
+      rpcLockWaitTimeQuantiles =
-      deferredRpcProcessingTimeMillisQuantiles =
+      rpcProcessingTimeQuantiles =
+          new MutableQuantiles[intervals.length];
+      deferredRpcProcessingTimeQuantiles =
-        rpcQueueTimeMillisQuantiles[i] = registry.newQuantiles("rpcQueueTime"
-            + interval + "s", "rpc queue time in milli second", "ops",
+        rpcQueueTimeQuantiles[i] = registry.newQuantiles("rpcQueueTime"
+            + interval + "s", "rpc queue time in " + TIMEUNIT, "ops",
-        rpcProcessingTimeMillisQuantiles[i] = registry.newQuantiles(
+        rpcLockWaitTimeQuantiles[i] = registry.newQuantiles(
+            "rpcLockWaitTime" + interval + "s",
+            "rpc lock wait time in " + TIMEUNIT, "ops",
+            "latency", interval);
+        rpcProcessingTimeQuantiles[i] = registry.newQuantiles(
-            "rpc processing time in milli second", "ops", "latency", interval);
-        deferredRpcProcessingTimeMillisQuantiles[i] = registry
-            .newQuantiles("deferredRpcProcessingTime" + interval + "s",
-                "deferred rpc processing time in milli seconds", "ops",
-                "latency", interval);
+            "rpc processing time in " + TIMEUNIT, "ops",
+            "latency", interval);
+        deferredRpcProcessingTimeQuantiles[i] = registry.newQuantiles(
+            "deferredRpcProcessingTime" + interval + "s",
+            "deferred rpc processing time in " + TIMEUNIT, "ops",
+            "latency", interval);
-  MutableQuantiles[] rpcQueueTimeMillisQuantiles;
+  MutableQuantiles[] rpcQueueTimeQuantiles;
+  @Metric("Lock wait time") MutableRate rpcLockWaitTime;
+  MutableQuantiles[] rpcLockWaitTimeQuantiles;
-  MutableQuantiles[] rpcProcessingTimeMillisQuantiles;
+  MutableQuantiles[] rpcProcessingTimeQuantiles;
-  MutableQuantiles[] deferredRpcProcessingTimeMillisQuantiles;
+  MutableQuantiles[] deferredRpcProcessingTimeQuantiles;
-  //@Override
-  public void addRpcQueueTime(int qTime) {
+  public void addRpcQueueTime(long qTime) {
-      for (MutableQuantiles q : rpcQueueTimeMillisQuantiles) {
+      for (MutableQuantiles q : rpcQueueTimeQuantiles) {
+  public void addRpcLockWaitTime(long waitTime) {
+    rpcLockWaitTime.add(waitTime);
+    if (rpcQuantileEnable) {
+      for (MutableQuantiles q : rpcLockWaitTimeQuantiles) {
+        q.add(waitTime);
+      }
+    }
+  }
+
-  //@Override
-  public void addRpcProcessingTime(int processingTime) {
+  public void addRpcProcessingTime(long processingTime) {
-      for (MutableQuantiles q : rpcProcessingTimeMillisQuantiles) {
+      for (MutableQuantiles q : rpcProcessingTimeQuantiles) {
-      for (MutableQuantiles q : deferredRpcProcessingTimeMillisQuantiles) {
+      for (MutableQuantiles q : deferredRpcProcessingTimeQuantiles) {
