   HADOOP-6537 Declare more detailed exceptions in FileContext and AbstractFileSystem
   (Suresh Srinivas via Sanjay Radia)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@918309 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.HadoopIllegalArgumentException;
+import org.apache.hadoop.fs.Options.Rename;
+import org.apache.hadoop.ipc.RpcClientException;
+import org.apache.hadoop.ipc.RpcServerException;
+import org.apache.hadoop.ipc.UnexpectedServerException;
+import org.apache.hadoop.fs.InvalidPathException;
+import org.apache.hadoop.security.AccessControlException;
- * using the Hadoop filesystem.
+ * using the Hadoop file system.
- * The Hadoop filesystem supports a URI name space and URI names.
- * It offers a a forest of filesystems that can be referenced using fully
+ * The Hadoop file system supports a URI name space and URI names.
+ * It offers a forest of file systems that can be referenced using fully
- * Two common Hadoop filesystems implementations are
+ * Two common Hadoop file systems implementations are
- * <li> the local filesystem: file:///path
- * <li> the hdfs filesystem hdfs://nnAddress:nnPort/path
- * </ul>  
+ * <li> the local file system: file:///path
+ * <li> the hdfs file system hdfs://nnAddress:nnPort/path
+ * </ul>
+ * 
- *  <p>
- * To facilitate this, Hadoop supports a notion of a default filesystem.
- * The user can set his default filesystem, although this is
+ * <p>
+ * 
+ * To facilitate this, Hadoop supports a notion of a default file system.
+ * The user can set his default file system, although this is
- * A default filesystem implies a default scheme and authority; slash-relative
+ * A default file system implies a default scheme and authority; slash-relative
- *  <li> fully qualified URI:  scheme://authority/path
- *  <li> slash relative names: /path    - relative to the default filesystem
- *  <li> wd-relative names:    path        - relative to the working dir
+ *  <li> fully qualified URI: scheme://authority/path
+ *  <li> slash relative names: /path relative to the default file system
+ *  <li> wd-relative names: path  relative to the working dir
+ *  
- *   in general, are obtained from the default configuration file
+ *  in general, are obtained from the default configuration file
+ *  
- *  far as the file context layer is concerned. All filesystem instances
- *  (i.e. deployments of filesystems) have default properties; we call these
+ *  far as the file context layer is concerned. All file system instances
+ *  (i.e. deployments of file systems) have default properties; we call these
- *  The filesystem related SS defaults are
+ *  The file system related SS defaults are
-
-
-   * @throws IllegalArgumentException if of type scheme:foo/bar
-      throw new IllegalArgumentException(
+      throw new HadoopIllegalArgumentException(
-  
+
-   * Get the filesystem of supplied path.
+   * Get the file system of supplied path.
+   * 
-   * @return the filesystem of the path
-   * @throws IOException
+   * @return the file system of the path
+   * 
+   * @throws UnsupportedFileSystemException If the file system for
+   *           <code>absOrFqPath</code> is not supported.
-    throws IOException {
+      throws UnsupportedFileSystemException {
-      throw new IllegalArgumentException(
+      throw new HadoopIllegalArgumentException(
-  
+
-   * Create a FileContext with specified FS as default 
-   * using the specified config.
+   * Create a FileContext with specified FS as default using the specified
+   * config.
-   * @throws IOException if the filesystem with specified cannot be created
-                    final Configuration aConf) throws IOException {
+                    final Configuration aConf) {
-   * Create a FileContext for specified filesystem using the default config.
+   * Create a FileContext for specified file system using the default config.
-   * @throws IOException if the filesystem with specified cannot be created
-    final AbstractFileSystem defaultFS) throws IOException {
+    final AbstractFileSystem defaultFS) {
-   
+
-   * $HADOOP_CONFIG/core.xml,
-   * Unspecified key-values for config are defaulted from core-defaults.xml
-   * in the release jar.
+   * $HADOOP_CONFIG/core.xml, Unspecified key-values for config are defaulted
+   * from core-defaults.xml in the release jar.
-   * @throws IOException if default filesystem in the config  cannot be created
+   * @throws UnsupportedFileSystemException If the file system from the default
+   *           configuration is not supported
-  public static FileContext getFileContext() throws IOException {
+  public static FileContext getFileContext()
+      throws UnsupportedFileSystemException {
-  } 
-  
+  }
+
-   * 
-   * @return a FileContext for the local filesystem using the default config.
-   * @throws IOException 
+   * @return a FileContext for the local file system using the default config.
+   * @throws UnsupportedFileSystemException If the file system for
+   *           {@link FsConstants#LOCAL_FS_URI} is not supported.
-  public static FileContext getLocalFSFileContext() throws IOException {
+  public static FileContext getLocalFSFileContext()
+      throws UnsupportedFileSystemException {
-  
-   * @throws IOException if the filesysem with specified cannot be created
+   * 
+   * @throws UnsupportedFileSystemException If the file system for
+   *           <code>defaultFsUri</code> is not supported
-    throws IOException {
+      throws UnsupportedFileSystemException {
-  
+
-   * @throws IOException if the filesysem with specified cannot be created
+   * @throws UnsupportedFileSystemException If the file system with specified is
+   *           not supported
-                    final Configuration aConf) throws IOException {
+      final Configuration aConf) throws UnsupportedFileSystemException {
-   * Create a FileContext using the passed config.
-   * Generally it is better to use {@link #getFileContext(URI, Configuration)}
-   * instead of this one.
+   * Create a FileContext using the passed config. Generally it is better to use
+   * {@link #getFileContext(URI, Configuration)} instead of this one.
-   * @throws IOException  if default filesystem in the config  cannot be created
+   * @throws UnsupportedFileSystemException If file system in the config
+   *           is not supported
-    throws IOException {
+      throws UnsupportedFileSystemException {
-  
-  
+
-   * @return a FileContext for the local filesystem using the specified config.
-   * @throws IOException 
+   * @return a FileContext for the local file system using the specified config.
+   * 
+   * @throws UnsupportedFileSystemException If default file system in the config
+   *           is not supported
+   * 
-    throws IOException {
+      throws UnsupportedFileSystemException {
-   * Use the default filesystem and working dir in this FileContext to qualify.
+   * Use the default file system and working dir in this FileContext to qualify.
-  } 
+  }
-  
-   * Create or overwrite file on indicated path and returns an output stream
-   * for writing into the file.
-   * @param f the file name to open
-   * @param createFlag gives the semantics  of create: overwrite, append etc.
-   * @param opts  - varargs of CreateOpt:
-   * <ul>
-   * <li>   Progress - to report progress on the operation - default null
-   * <li>   Permission - umask is applied against permisssion:
-   *                  default is FsPermissions:getDefault()
-
-   * <li>   CreateParent - create missing parent path; default is to not
-   *                   create parents
-   * <li> The defaults for the following are  SS defaults of the
-   *      file server implementing the target path. 
-   *      Not all parameters make sense for all kinds of filesystem
-   *                - eg. localFS ignores Blocksize, replication, checksum
-   * <ul>
-   * <li>  BufferSize - buffersize used in FSDataOutputStream
-   * <li>  Blocksize - block size for file blocks
-   * <li>  ReplicationFactor - replication for blocks
-   * <li>  BytesPerChecksum - bytes per checksum
-   * </ul>
-   * </ul>
-   *                       
-   * @throws IOException
+   * Create or overwrite file on indicated path and returns an output stream for
+   * writing into the file.
-   * @see #setPermission(Path, FsPermission)
+   * @param f the file name to open
+   * @param createFlag gives the semantics of create: overwrite, append etc.
+   * @param opts file creation options; see {@link Options.CreateOpts}.
+   *          <ul>
+   *          <li>Progress - to report progress on the operation - default null
+   *          <li>Permission - umask is applied against permisssion: default is
+   *          FsPermissions:getDefault()
+   * 
+   *          <li>CreateParent - create missing parent path; default is to not
+   *          to create parents
+   *          <li>The defaults for the following are SS defaults of the file
+   *          server implementing the target path. Not all parameters make sense
+   *          for all kinds of file system - eg. localFS ignores Blocksize,
+   *          replication, checksum
+   *          <ul>
+   *          <li>BufferSize - buffersize used in FSDataOutputStream
+   *          <li>Blocksize - block size for file blocks
+   *          <li>ReplicationFactor - replication for blocks
+   *          <li>BytesPerChecksum - bytes per checksum
+   *          </ul>
+   *          </ul>
+   * 
+   * @return {@link FSDataOutputStream} for created file
+   * 
+   * @throws AccessControlException If access is denied
+   * @throws FileAlreadyExistsException If file <code>f</code> already exists
+   * @throws FileNotFoundException If parent of <code>f</code> does not exist
+   *           and <code>createParent</code> is false
+   * @throws ParentNotDirectoryException If parent of <code>f</code> is not a
+   *           directory.
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws
+   *           undeclared exception to RPC server
+   * 
+   * RuntimeExceptions:
+   * @throws InvalidPathException If path <code>f</code> is not valid
-                                   final EnumSet<CreateFlag> createFlag,
-                                   Options.CreateOpts... opts)
-    throws IOException {
+      final EnumSet<CreateFlag> createFlag, Options.CreateOpts... opts)
+      throws AccessControlException, FileAlreadyExistsException,
+      FileNotFoundException, ParentNotDirectoryException,
+      UnsupportedFileSystemException, UnresolvedLinkException, IOException {
-  
+
-   * Make the given file and all non-existent parents into
-   * directories.
+   * Make(create) a directory and all the non-existent parents.
-   * @param createParent - if true then missing parent dirs are created
-   *                       if false then parent must exist
-   * @throws IOException when operation fails not authorized or 
-   *   if parent does not exist and createParent is false.
+   * @param createParent - if true then missing parent dirs are created if false
+   *          then parent must exist
+   * 
+   * @throws AccessControlException If access is denied
+   * @throws FileAlreadyExistsException If directory <code>dir</code> already
+   *           exists
+   * @throws FileNotFoundException If parent of <code>dir</code> does not exist
+   *           and <code>createParent</code> is false
+   * @throws ParentNotDirectoryException If parent of <code>dir</code> is not a
+   *           directory
+   * @throws UnresolvedLinkException If symbolic link <code>dir</code> could not
+   *           be resolved
+   * @throws UnsupportedFileSystemException If file system for <code>dir</code>
+   *         is not supported
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
+   * 
+   * RuntimeExceptions:
+   * @throws InvalidPathException If path <code>dir</code> is not valid
-      final boolean createParent)
-    throws IOException {
+      final boolean createParent) throws AccessControlException,
+      FileAlreadyExistsException, FileNotFoundException,
+      ParentNotDirectoryException, UnresolvedLinkException,
+      UnsupportedFileSystemException, IOException {
-   * case of a file the recursive can be set to either true or false. 
-   * @return  true if delete is successful else false. 
-   * @throws IOException
+   * case of a file the recursive can be set to either true or false.
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
+   * 
+   * RuntimeExceptions:
+   * @throws InvalidPathException If path <code>f</code> is invalid
-  public boolean delete(final Path f, final boolean recursive) 
-    throws IOException {
+  public boolean delete(final Path f, final boolean recursive)
+      throws AccessControlException, FileNotFoundException,
+      UnsupportedFileSystemException, UnresolvedLinkException, IOException {
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If file <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code>
+   *         is not supported
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-  public FSDataInputStream open(final Path f) throws IOException {
+  public FSDataInputStream open(final Path f) throws AccessControlException,
+      FileNotFoundException, UnsupportedFileSystemException,
+      UnresolvedLinkException, IOException {
+   * 
+   * 
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If file <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-    throws IOException {
+      throws AccessControlException, FileNotFoundException,
+      UnsupportedFileSystemException, UnresolvedLinkException, IOException {
- /**
-  * Set replication for an existing file.
-  * 
-  * @param f file name
-  * @param replication new replication
-  * @throws IOException
-  * @return true if successful;
-  *         false if file does not exist or is a directory
-  */
+  /**
+   * Set replication for an existing file.
+   * 
+   * @param f file name
+   * @param replication new replication
+   *
+   * @return true if successful
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If file <code>f</code> does not exist
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
+   */
-    throws IOException {
+      throws AccessControlException, FileNotFoundException,
+      UnresolvedLinkException, IOException {
-   * If OVERWRITE option is not passed as an argument, rename fails
-   * if the dst already exists.
+   * If OVERWRITE option is not passed as an argument, rename fails if the dst
+   * already exists.
-   * If OVERWRITE option is passed as an argument, rename overwrites
-   * the dst if it is a file or an empty directory. Rename fails if dst is
-   * a non-empty directory.
+   * If OVERWRITE option is passed as an argument, rename overwrites the dst if
+   * it is a file or an empty directory. Rename fails if dst is a non-empty
+   * directory.
-   * implementation. Please refer to the file system documentation for
-   * details
+   * implementation. Please refer to the file system documentation for details
-   * @throws IOException on failure
+   * 
+   * @throws AccessControlException If access is denied
+   * @throws FileAlreadyExistsException If <code>dst</code> already exists and
+   *           <code>options</options> has {@link Rename#OVERWRITE} option
+   *           false.
+   * @throws FileNotFoundException If <code>src</code> does not exist
+   * @throws ParentNotDirectoryException If parent of <code>dst</code> is not a
+   *           directory
+   * @throws UnsupportedFileSystemException If file system for <code>src</code>
+   *           and <code>dst</code> is not supported
+   * @throws UnresolvedLinkException If symbolic link <code>src</code> or
+   *           <code>dst</code> could not be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws
+   *           undeclared exception to RPC server
-
-      final Options.Rename... options) throws IOException {
+      final Options.Rename... options) throws AccessControlException,
+      FileAlreadyExistsException, FileNotFoundException,
+      ParentNotDirectoryException, UnsupportedFileSystemException,
+      UnresolvedLinkException, IOException {
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code>
+   *         is not supported
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-    throws IOException {
+      throws AccessControlException, FileNotFoundException,
+      UnsupportedFileSystemException, UnresolvedLinkException, IOException {
-   * Set owner of a path (i.e. a file or a directory).
-   * The parameters username and groupname cannot both be null.
+   * Set owner of a path (i.e. a file or a directory). The parameters username
+   * and groupname cannot both be null.
+   * 
+   * 
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
+   * 
+   * RuntimeExceptions:
+   * @throws HadoopIllegalArgumentException If <code>username</code> or
+   *           <code>groupname</code> is invalid.
-                       final String groupname) throws IOException {
+      final String groupname) throws AccessControlException,
+      UnsupportedFileSystemException, FileNotFoundException,
+      UnresolvedLinkException, IOException {
-      throw new IllegalArgumentException(
+      throw new HadoopIllegalArgumentException(
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-    throws IOException {
+      throws AccessControlException, FileNotFoundException,
+      UnsupportedFileSystemException, UnresolvedLinkException, IOException {
-   * @param f The file path
+   * @param f file path
+   *
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-  public FileChecksum getFileChecksum(final Path f) throws IOException {
+  public FileChecksum getFileChecksum(final Path f)
+      throws AccessControlException, FileNotFoundException,
+      UnresolvedLinkException, IOException {
-   * Set the verify checksum flag for the  filesystem denoted by the path.
+   * Set the verify checksum flag for the  file system denoted by the path.
-   * @param f - set the verifyChecksum for the Filesystem containing this path
-   * @throws IOException 
+   * @param f set the verifyChecksum for the Filesystem containing this path
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-
-    throws IOException {
+      throws AccessControlException, FileNotFoundException,
+      UnsupportedFileSystemException, IOException {
+   *
-   * @throws FileNotFoundException when the path does not exist;
-   *         IOException see specific implementation
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-  public FileStatus getFileStatus(final Path f) throws IOException {
+  public FileStatus getFileStatus(final Path f) throws AccessControlException,
+      FileNotFoundException, UnsupportedFileSystemException,
+      UnresolvedLinkException, IOException {
-   * @throws FileNotFoundException when the path does not exist;
-   *         IOException see specific implementation.
+   * 
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws IOException If an I/O error occurred
-  public FileStatus getFileLinkStatus(final Path f) throws IOException {
+  public FileStatus getFileLinkStatus(final Path f)
+      throws AccessControlException, FileNotFoundException,
+      UnsupportedFileSystemException, IOException {
-   * @throws FileNotFoundException when the path does not exist;
-   *         IOException if the last path component of f is not a symlink.
+   * 
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If path <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws IOException If an I/O error occurred
-  public Path getLinkTarget(final Path f) throws IOException {
+  public Path getLinkTarget(final Path f) throws AccessControlException,
+      FileNotFoundException, UnsupportedFileSystemException, IOException {
-   * @param p - get blocklocations of this file
+   * @param f - get blocklocations of this file
+   *
-   * @throws IOException
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
+   * 
+   * RuntimeExceptions:
+   * @throws InvalidPathException If path <code>f</code> is invalid
-  
-  public BlockLocation[] getFileBlockLocations(final Path p, 
-    final long start, final long len) throws IOException {
-    final Path absF = fixRelativePart(p);
+  public BlockLocation[] getFileBlockLocations(final Path f, final long start,
+      final long len) throws AccessControlException, FileNotFoundException,
+      UnsupportedFileSystemException, UnresolvedLinkException, IOException {
+    final Path absF = fixRelativePart(f);
-   * filesystem denoted by the Path argument p.
-   * If the filesystem has multiple partitions, the
+   * file system denoted by the Parh argument p.
+   * If the file system has multiple partitions, the
-   * root partition of the default filesystem. 
+   * root partition of the default file system. 
+   *
-   * @throws IOException
-   *           see specific implementation
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-  public FsStatus getFsStatus(final Path f) throws IOException {
+  public FsStatus getFsStatus(final Path f) throws AccessControlException,
+      FileNotFoundException, UnsupportedFileSystemException,
+      UnresolvedLinkException, IOException {
-   * @throws IOException
+   *
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileAlreadyExistsException If file <code>linkcode> already exists
+   * @throws FileNotFoundException If <code>target</code> does not exist
+   * @throws ParentNotDirectoryException If parent of <code>link</code> is not a
+   *           directory.
+   * @throws UnresolvedLinkException If symbolic link <code>target</code> could not
+   *           be resolved
+   * @throws UnsupportedFileSystemException If file system for 
+   *           <code>target</code> or <code>link</code> is not supported
+   * @throws IOException If an I/O error occurred
-  public void createSymlink(final Path target, final Path link, 
-    final boolean createParent) throws IOException { 
+  public void createSymlink(final Path target, final Path link,
+      final boolean createParent) throws AccessControlException,
+      FileAlreadyExistsException, FileNotFoundException,
+      ParentNotDirectoryException, UnresolvedLinkException,
+      UnsupportedFileSystemException, IOException { 
+   *
+   * @throws AccessControlException If access is denied
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-  public boolean exists(final Path f) throws IOException {
+  public boolean exists(final Path f) throws AccessControlException,
+      IOException {
+    } catch (UnsupportedFileSystemException e) {
+      return false;
+    } catch (UnresolvedLinkException e) {
+      return false;
+   *
-   * @throws IOException
+   *
+   * @throws AccessControlException If access is denied
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-  public boolean isDirectory(final Path f) throws IOException {
+  public boolean isDirectory(final Path f) throws AccessControlException,
+      UnsupportedFileSystemException, IOException {
-      return false;               // f does not exist
+      return false;
-   * Instead reuse the FileStatus 
-   * returned by getFileStatus() or listStatus() methods.
+   * Instead reuse the FileStatus returned by getFileStatus() or listStatus()
+   * methods.
+   *
+   * @param f Path to evaluate
+   *
+   * @throws AccessControlException If access is denied
+   * @throws UnsupportedFileSystemException If file system for <code>f</code>
+   *         is not supported
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-  public boolean isFile(final Path f) throws IOException {
+  public boolean isFile(final Path f) throws AccessControlException,
+      UnsupportedFileSystemException, IOException {
+   *
-   * @throws IOException
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+   *           be resolved
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-  public FileStatus[] listStatus(final Path f) throws IOException {
+  public FileStatus[] listStatus(final Path f) throws AccessControlException,
+      FileNotFoundException, UnsupportedFileSystemException,
+      UnresolvedLinkException, IOException {
+   *
-   * @throws IOException
+   *
+   * @throws AccessControlException If access is denied
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
-  public boolean deleteOnExit(Path f) throws IOException {
+  public boolean deleteOnExit(Path f) throws AccessControlException,
+      IOException {
-     * @param paths are the list of paths we want information from
+     * @param paths list of paths we want information from
+     *
-     * @throws IOException
+     *
+     * @throws AccessControlException If access is denied
+     * @throws IOException If an I/O error occurred
+     * 
+     * Exceptions applicable to file systems accessed over RPC:
+     * @throws RpcClientException If an exception occurred in the RPC client
+     * @throws RpcServerException If an exception occurred in the RPC server
+     * @throws UnexpectedServerException If server implementation throws 
+     *           undeclared exception to RPC server
-    private FileStatus[] getFileStatus(Path[] paths) throws IOException {
+    private FileStatus[] getFileStatus(Path[] paths)
+        throws AccessControlException, IOException {
-     * @param f
+     * @param f path
+     *
-     * @throws IOException
+     *
+     * @throws AccessControlException If access is denied
+     * @throws FileNotFoundException If <code>f</code> does not exist
+     * @throws UnsupportedFileSystemException If file system for 
+     *         <code>f</code> is not supported
+     * @throws UnresolvedLinkException If symbolic link <code>f</code> could not
+     *           be resolved
+     * @throws IOException If an I/O error occurred
+     * 
+     * Exceptions applicable to file systems accessed over RPC:
+     * @throws RpcClientException If an exception occurred in the RPC client
+     * @throws RpcServerException If an exception occurred in the RPC server
+     * @throws UnexpectedServerException If server implementation throws 
+     *           undeclared exception to RPC server
-    public ContentSummary getContentSummary(Path f) throws IOException {
+    public ContentSummary getContentSummary(Path f)
+        throws AccessControlException, FileNotFoundException,
+        UnsupportedFileSystemException, UnresolvedLinkException, IOException {
-     * Filter files/directories in the given list of paths using default
-     * path filter.
-     * 
-     * @param files is the list of paths
-     * @return a list of statuses for the files under the given paths after
-     *         applying the filter default Path filter
-     * @exception IOException
+     * See {@link #listStatus(Path[], PathFilter)}
-    public FileStatus[] listStatus(Path[] files) throws IOException {
+    public FileStatus[] listStatus(Path[] files) throws AccessControlException,
+        FileNotFoundException, IOException {
+     *
-     * @throws IOException
-     *           if encounter any problem while fetching the status
+     *
+     * @throws AccessControlException If access is denied
+     * @throws FileNotFoundException If <code>f</code> does not exist
+     * @throws UnsupportedFileSystemException If file system for 
+     *         <code>pathPattern</code> is not supported
+     * @throws IOException If an I/O error occurred
+     * 
+     * Exceptions applicable to file systems accessed over RPC:
+     * @throws RpcClientException If an exception occurred in the RPC client
+     * @throws RpcServerException If an exception occurred in the RPC server
+     * @throws UnexpectedServerException If server implementation throws 
+     *           undeclared exception to RPC server
-      throws IOException {
+        throws AccessControlException, FileNotFoundException,
+        UnsupportedFileSystemException, IOException {
+     *
-     * @exception IOException
+     *
+     * @throws AccessControlException If access is denied
+     * @throws FileNotFoundException If a file in <code>files</code> does not 
+     *           exist
+     * @throws IOException If an I/O error occurred
+     * 
+     * Exceptions applicable to file systems accessed over RPC:
+     * @throws RpcClientException If an exception occurred in the RPC client
+     * @throws RpcServerException If an exception occurred in the RPC server
+     * @throws UnexpectedServerException If server implementation throws 
+     *           undeclared exception to RPC server
-      throws IOException {
+        throws AccessControlException, FileNotFoundException, IOException {
-        PathFilter filter) throws IOException {
+        PathFilter filter) throws AccessControlException,
+        FileNotFoundException, IOException {
-  
+
-
+     *
-     * @throws IOException
+     *
+     * @throws AccessControlException If access is denied
+     * @throws UnsupportedFileSystemException If file system for 
+     *         <code>pathPattern</code> is not supported
+     * @throws IOException If an I/O error occurred
+     * 
+     * Exceptions applicable to file systems accessed over RPC:
+     * @throws RpcClientException If an exception occurred in the RPC client
+     * @throws RpcServerException If an exception occurred in the RPC server
+     * @throws UnexpectedServerException If server implementation throws 
+     *           undeclared exception to RPC server
-    public FileStatus[] globStatus(Path pathPattern) throws IOException {
+    public FileStatus[] globStatus(Path pathPattern)
+        throws AccessControlException, UnsupportedFileSystemException,
+        IOException {
-     * @param pathPattern
-     *          a regular expression specifying the path pattern
-     * @param filter
-     *          a user-supplied path filter
+     * @param pathPattern regular expression specifying the path pattern
+     * @param filter user-supplied path filter
+     *
-     * @throws IOException if any I/O error occurs when fetching file status
+     *
+     * @throws AccessControlException If access is denied
+     * @throws UnsupportedFileSystemException If file system for 
+     *         <code>pathPattern</code> is not supported
+     * @throws IOException If an I/O error occurred
+     * 
+     * Exceptions applicable to file systems accessed over RPC:
+     * @throws RpcClientException If an exception occurred in the RPC client
+     * @throws RpcServerException If an exception occurred in the RPC server
+     * @throws UnexpectedServerException If server implementation throws 
+     *           undeclared exception to RPC server
-        final PathFilter filter) throws IOException {
+        final PathFilter filter) throws AccessControlException,
+        UnsupportedFileSystemException, IOException {
-     * @return
-     * @throws IOException
+     *
+     * @return an array of FileStatus objects
+     *
+     * @throws AccessControlException If access is denied
+     * @throws IOException If an I/O error occurred
-    private FileStatus[] globStatusInternal(
-        final URI uri, final Path inPathPattern, final PathFilter filter)
-      throws IOException {
+    private FileStatus[] globStatusInternal(final URI uri,
+        final Path inPathPattern, final PathFilter filter)
+        throws AccessControlException, IOException
+      {
-        int level, boolean[] hasGlob) throws IOException {
+        int level, boolean[] hasGlob) throws AccessControlException,
+        FileNotFoundException, IOException {
-     * Copy file from src to dest.
-     * @param src
-     * @param dst
-     * @return true if copy is successful
-     * @throws IOException
+     * Copy file from src to dest. See
+     * {@link #copy(Path, Path, boolean, boolean)}
-    public boolean copy(final Path src, final Path dst)  throws IOException {
+    public boolean copy(final Path src, final Path dst)
+        throws AccessControlException, FileAlreadyExistsException,
+        FileNotFoundException, ParentNotDirectoryException,
+        UnresolvedLinkException, UnsupportedFileSystemException, IOException {
+     *
-     * @throws IOException
+     *
+     * @throws AccessControlException If access is denied
+     * @throws FileAlreadyExistsException If <code>dst</code> already exists
+     * @throws FileNotFoundException If <code>src</code> does not exist
+     * @throws ParentNotDirectoryException If parent of <code>dst</code> is not
+     *           a directory
+     * @throws UnresolvedLinkException If symbolic link <code>src</code> could 
+     *           not be resolved
+     * @throws UnsupportedFileSystemException If file system for 
+     *         <code>src</code> or <code>dst</code> is not supported
+     * @throws IOException If an I/O error occurred
+     * 
+     * Exceptions applicable to file systems accessed over RPC:
+     * @throws RpcClientException If an exception occurred in the RPC client
+     * @throws RpcServerException If an exception occurred in the RPC server
+     * @throws UnexpectedServerException If server implementation throws 
+     *           undeclared exception to RPC server
+     * 
+     * RuntimeExceptions:
+     * @throws InvalidPathException If path <code>dst</code> is invalid
-    public boolean copy(final Path src,  final Path dst,
-        boolean deleteSource, boolean overwrite)
-      throws IOException {
+    public boolean copy(final Path src, final Path dst, boolean deleteSource,
+        boolean overwrite) throws AccessControlException,
+        FileAlreadyExistsException, FileNotFoundException,
+        ParentNotDirectoryException, UnresolvedLinkException,
+        UnsupportedFileSystemException, IOException {
-
-    GlobFilter(final String filePattern) throws IOException {
+    GlobFilter(final String filePattern) {
-    GlobFilter(final String filePattern, final PathFilter filter)
-      throws IOException {
+    GlobFilter(final String filePattern, final PathFilter filter) {
-    void setRegex(String filePattern) throws IOException {
+    void setRegex(String filePattern) {
-    private void error(final String s, final String pattern, final int pos)
-      throws IOException {
-      throw new IOException("Illegal file pattern: "
-                            +s+ " for glob "+ pattern + " at " + pos);
+    private void error(final String s, final String pattern, final int pos) {
+      throw new HadoopIllegalArgumentException("Illegal file pattern: " + s
+          + " for glob " + pattern + " at " + pos);
-    throws IOException {
+      throws AccessControlException, IOException {
-     * @throws IOException on error.
-     * @throws UnresolvedLinkException when a symlink is encountered.
+     * @throws UnresolvedLinkException If symbolic link <code>path</code> could 
+     *           not be resolved
+     * @throws IOException an I/O error occured
-}
+}
