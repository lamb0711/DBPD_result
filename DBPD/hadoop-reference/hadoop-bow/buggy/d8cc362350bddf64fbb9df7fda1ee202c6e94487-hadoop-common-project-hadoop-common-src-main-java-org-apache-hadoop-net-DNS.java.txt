HADOOP-8154. DNS#getIPs shouldn't silently return the local host IP for bogus interface names. Contributed by Eli Collins


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1298696 13f79535-47bb-0310-9956-ffa450edef68

+   *            or the string "default"
-   *         interface
+   *         interface. The local host IP is returned if the interface
+   *         name "default" is specified or there is an I/O error looking
+   *         for the given interface.
-   *             If an UnknownHostException is encountered in querying the
-   *             default interface
+   *             If the given interface is invalid
-    try {
-      NetworkInterface netIF = NetworkInterface.getByName(strInterface);
-      if (netIF == null) {
-        return new String[] { cachedHostAddress };
-      } else {
-        Vector<String> ips = new Vector<String>();
-        Enumeration e = netIF.getInetAddresses();
-        while (e.hasMoreElements()) {
-          ips.add(((InetAddress) e.nextElement()).getHostAddress());
-        }
-        return ips.toArray(new String[] {});
-      }
-    } catch (SocketException e) {
-      return new String[]  { cachedHostAddress };
+    if ("default".equals(strInterface)) {
+      return new String[] { cachedHostAddress };
+    NetworkInterface netIF;
+    try {
+      netIF = NetworkInterface.getByName(strInterface);
+    } catch (SocketException e) {
+      LOG.warn("I/O error finding interface " + strInterface +
+          ": " + e.getMessage());
+      return new String[] { cachedHostAddress };
+    }
+    if (netIF == null) {
+      throw new UnknownHostException("No such interface " + strInterface);
+    }
+    Vector<String> ips = new Vector<String>();
+    Enumeration<InetAddress> e = netIF.getInetAddresses();
+    while (e.hasMoreElements()) {
+      ips.add(e.nextElement().getHostAddress());
+    }
+    return ips.toArray(new String[] {});
-    /**
+  /**
-   * network interface
+   * network interface or the local host IP if "default" is given.
-   * @return The IP address in text form
+   *            or the string "default"
+   * @return The IP address in text form, the local host IP is returned
+   *         if the interface name "default" is specified
-   *             If one is encountered in querying the default interface
+   *             If the given interface is invalid
-   * @throws UnknownHostException if the hostname cannot be determined
+   * @throws UnknownHostException if the given interface is invalid
-    for (int ctr = 0; ctr < ips.length; ctr++)
+    for (int ctr = 0; ctr < ips.length; ctr++) {
-
+    }
+      LOG.warn("Unable to determine hostname for interface " + strInterface);
-      LOG.info("Unable to determine local hostname "
-              + "-falling back to \"" + LOCALHOST + "\"", e);
+      LOG.warn("Unable to determine local hostname "
+          + "-falling back to \"" + LOCALHOST + "\"", e);
-        LOG.info("Unable to determine address of the host"
+        LOG.warn("Unable to determine address of the host"
