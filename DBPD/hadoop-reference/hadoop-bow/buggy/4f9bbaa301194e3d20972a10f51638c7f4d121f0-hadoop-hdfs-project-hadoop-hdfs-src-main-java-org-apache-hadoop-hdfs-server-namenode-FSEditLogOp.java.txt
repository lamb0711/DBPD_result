HDFS-5889. When starting rolling upgrade, create a fs image for rollback so that the standby namenode can create checkpoints during upgrade.  Contributed by szetszwo & jing9


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1567861 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_ROLLING_UPGRADE_FINALIZE;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_ROLLING_UPGRADE_START;
-import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_UPGRADE_MARKER;
-      inst.put(OP_UPGRADE_MARKER, new UpgradeMarkerOp());
+      inst.put(OP_ROLLING_UPGRADE_START, new RollingUpgradeOp(
+          OP_ROLLING_UPGRADE_START, "start"));
+      inst.put(OP_ROLLING_UPGRADE_FINALIZE, new RollingUpgradeOp(
+          OP_ROLLING_UPGRADE_FINALIZE, "finalize"));
-  static class UpgradeMarkerOp extends FSEditLogOp { // @Idempotent
-    private long startTime;
+  static class RollingUpgradeOp extends FSEditLogOp { // @Idempotent
+    private final String name;
+    private long time;
-    public UpgradeMarkerOp() {
-      super(OP_UPGRADE_MARKER);
+    public RollingUpgradeOp(FSEditLogOpCodes code, String name) {
+      super(code);
+      this.name = name.toUpperCase();
-    static UpgradeMarkerOp getInstance(OpInstanceCache cache) {
-      return (UpgradeMarkerOp) cache.get(OP_UPGRADE_MARKER);
+    static RollingUpgradeOp getStartInstance(OpInstanceCache cache) {
+      return (RollingUpgradeOp) cache.get(OP_ROLLING_UPGRADE_START);
-    long getStartTime() {
-      return startTime;
+    static RollingUpgradeOp getFinalizeInstance(OpInstanceCache cache) {
+      return (RollingUpgradeOp) cache.get(OP_ROLLING_UPGRADE_FINALIZE);
-    void setStartTime(long startTime) {
-      this.startTime = startTime;
+    long getTime() {
+      return time;
+    }
+
+    void setTime(long time) {
+      this.time = time;
-      startTime = in.readLong();
+      time = in.readLong();
-      FSImageSerialization.writeLong(startTime, out);
+      FSImageSerialization.writeLong(time, out);
-      XMLUtils.addSaxString(contentHandler, "STARTTIME",
-          Long.valueOf(startTime).toString());
+      XMLUtils.addSaxString(contentHandler, name + "TIME",
+          Long.valueOf(time).toString());
-      this.startTime = Long.valueOf(st.getValue("STARTTIME"));
+      this.time = Long.valueOf(st.getValue(name + "TIME"));
-      StringBuilder builder = new StringBuilder();
-      builder.append("UpgradeMarkerOp");
-      return builder.toString();
+      return new StringBuilder().append("RollingUpgradeOp [").append(name)
+          .append(", time=").append(time).append("]").toString();
-    static class UpgradeMarkerException extends IOException {
+    static class RollbackException extends IOException {
