HADOOP-8193. Refactor FailoverController/HAAdmin code to add an abstract class for "target" services. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305195 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.InetSocketAddress;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB;
-import org.apache.hadoop.net.NetUtils;
+  private static final Log LOG = LogFactory.getLog(HAAdmin.class);
+  protected abstract HAServiceTarget resolveTarget(String string);
+
-    HAServiceProtocol proto = getProtocol(argv[1]);
+    HAServiceProtocol proto = resolveTarget(argv[1]).getProxy();
-    HAServiceProtocol proto = getProtocol(argv[1]);
+    HAServiceProtocol proto = resolveTarget(argv[1]).getProxy();
-    Configuration conf = getConf();
-    NodeFencer fencer;
+    HAServiceTarget fromNode = resolveTarget(args[0]);
+    HAServiceTarget toNode = resolveTarget(args[1]);
+    
-      fencer = NodeFencer.create(conf);
-    } catch (BadFencingConfigurationException bfce) {
-      errOut.println("failover: incorrect fencing configuration: " + 
-          bfce.getLocalizedMessage());
-      return -1;
-    }
-    if (fencer == null) {
-      errOut.println("failover: no fencer configured");
-      return -1;
-    }
-
-    InetSocketAddress addr1 = 
-      NetUtils.createSocketAddr(getServiceAddr(args[0]));
-    InetSocketAddress addr2 = 
-      NetUtils.createSocketAddr(getServiceAddr(args[1]));
-    HAServiceProtocol proto1 = getProtocol(args[0]);
-    HAServiceProtocol proto2 = getProtocol(args[1]);
-
-    try {
-      FailoverController.failover(proto1, addr1, proto2, addr2,
-          fencer, forceFence, forceActive); 
+      FailoverController.failover(fromNode, toNode,
+          forceFence, forceActive); 
-    HAServiceProtocol proto = getProtocol(argv[1]);
+    HAServiceProtocol proto = resolveTarget(argv[1]).getProxy();
-    HAServiceProtocol proto = getProtocol(argv[1]);
+    HAServiceProtocol proto = resolveTarget(argv[1]).getProxy();
-  /**
-   * Return a proxy to the specified target service.
-   */
-  protected HAServiceProtocol getProtocol(String serviceId)
-      throws IOException {
-    String serviceAddr = getServiceAddr(serviceId);
-    InetSocketAddress addr = NetUtils.createSocketAddr(serviceAddr);
-    return new HAServiceProtocolClientSideTranslatorPB(addr, getConf());
-  }
-
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Operation failed", ioe);
+      }
