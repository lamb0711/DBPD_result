HADOOP-6674. Makes use of the SASL authentication options in the SASL RPC. Contributed by Jitendra Pandey.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@951624 13f79535-47bb-0310-9956-ffa450edef68

+    private boolean useWrap = false;
+    
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("SASL server context established. Negotiated QoP is "
-                + saslServer.getNegotiatedProperty(Sasl.QOP));
-          }
+          LOG.info("SASL server context established. Negotiated QoP is "
+              + saslServer.getNegotiatedProperty(Sasl.QOP));
+          String qop = (String) saslServer.getNegotiatedProperty(Sasl.QOP);
+          useWrap = qop != null && !"auth".equalsIgnoreCase(qop);
-        byte[] plaintextData = saslServer
-            .unwrap(saslToken, 0, saslToken.length);
-        processUnwrappedData(plaintextData);
+        
+        if (!useWrap) {
+          processOneRpc(saslToken);
+        } else {
+          byte[] plaintextData = saslServer.unwrap(saslToken, 0,
+              saslToken.length);
+          processUnwrappedData(plaintextData);
+        }
-          if (!useSasl && dataLength == Client.PING_CALL_ID) {
+          if ((dataLength == Client.PING_CALL_ID) && (!useWrap)) {
+            // covers the !useSasl too
-            return 0;  //ping message
+            return 0; // ping message
+          }
+          
+          if (dataLength < 0) {
+            LOG.warn("Unexpected data length " + dataLength + "!! from " + 
+                getHostAddress());
-
+    
+    if (isSecurityEnabled) {
+      SaslRpcServer.init(conf);
+    }
-    wrapWithSasl(response, call);
+    if (call.connection.useWrap) {
+      wrapWithSasl(response, call);
+    }
