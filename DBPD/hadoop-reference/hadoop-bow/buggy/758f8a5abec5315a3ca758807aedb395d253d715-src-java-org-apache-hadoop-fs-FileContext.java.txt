HADOOP-6270. Support deleteOnExit in FileContext.  Contributed by Suresh Srinivas


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816751 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.IdentityHashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.Map.Entry;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+import org.apache.hadoop.classification.InterfaceAudience.LimitedPrivate.Project;
-import org.apache.hadoop.classification.*;
-import org.apache.hadoop.classification.InterfaceAudience.LimitedPrivate.*;
+  public static final Log LOG = LogFactory.getLog(FileContext.class);
+  
+  /**
+   * List of files that should be deleted on JVM shutdown
+   */
+  final static Map<FileContext, Set<Path>> deleteOnExit = 
+    new IdentityHashMap<FileContext, Set<Path>>();
+
+  /** JVM shutdown hook thread */
+  final static FileContextFinalizer finalizer = 
+    new FileContextFinalizer();
+  
+   * Delete all the paths that were marked as delete-on-exit.
+   */
+  static void processDeleteOnExit() {
+    synchronized (deleteOnExit) {
+      Set<Entry<FileContext, Set<Path>>> set = deleteOnExit.entrySet();
+      for (Entry<FileContext, Set<Path>> entry : set) {
+        FileContext fc = entry.getKey();
+        Set<Path> paths = entry.getValue();
+        for (Path path : paths) {
+          try {
+            fc.delete(path, true);
+          }
+          catch (IOException e) {
+            LOG.warn("Ignoring failure to deleteOnExit for path " + path);
+          }
+        }
+      }
+      deleteOnExit.clear();
+    }
+  }
+  
+  /**
+  /**
+   * Mark a path to be deleted on JVM shutdown.
+   * 
+   * @param f the existing path to delete.
+   * @return  true if deleteOnExit is successful, otherwise false.
+   * @throws IOException
+   */
+  public boolean deleteOnExit(Path f) throws IOException {
+    if (!exists(f)) {
+      return false;
+    }
+    synchronized (deleteOnExit) {
+      if (deleteOnExit.isEmpty() && !finalizer.isAlive()) {
+        Runtime.getRuntime().addShutdownHook(finalizer);
+      }
+      
+      Set<Path> set = deleteOnExit.get(this);
+      if (set == null) {
+        set = new TreeSet<Path>();
+        deleteOnExit.put(this, set);
+      }
+      set.add(f);
+    }
+    return true;
+  }
+  
-}
+  
+  /**
+   * Deletes all the paths in deleteOnExit on JVM shutdown
+   */
+  static class FileContextFinalizer extends Thread {
+    public synchronized void run() {
+      processDeleteOnExit();
+    }
+  }
+}
