HDFS-2582. Scope dfs.ha.namenodes config by nameservice. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1207738 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Map;
-import org.apache.hadoop.ipc.RPC;
+import com.google.common.base.Joiner;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
-   * @return collection of nameservice Ids
+   * @return collection of nameservice Ids, or null if not specified
-    return conf.getStringCollection(DFS_FEDERATION_NAMESERVICES);
+    return conf.getTrimmedStringCollection(DFS_FEDERATION_NAMESERVICES);
+  }
+
+  /**
+   * @return <code>coll</code> if it is non-null and non-empty. Otherwise,
+   * returns a list with a single null value.
+   */
+  private static Collection<String> emptyAsSingletonNull(Collection<String> coll) {
+    if (coll == null || coll.isEmpty()) {
+      return Collections.singletonList(null);
+    } else {
+      return coll;
+    }
+   * @param nsId the nameservice ID to look at, or null for non-federated 
-  public static Collection<String> getNameNodeIds(Configuration conf) {
-    return conf.getStringCollection(DFS_HA_NAMENODES_KEY);
+  static Collection<String> getNameNodeIds(Configuration conf, String nsId) {
+    String key = addSuffix(DFS_HA_NAMENODES_KEY, nsId);
+    return conf.getTrimmedStringCollection(key);
-
+  
-    if (suffix == null || suffix.length() == 0) {
+    if (suffix == null || suffix.isEmpty()) {
-    if (!suffix.startsWith(".")) {
-      key += ".";
-    }
-    return key += suffix;
+    assert !suffix.startsWith(".") :
+      "suffix '" + suffix + "' should not already have '.' prepended.";
+    return key + "." + suffix;
-    String ret = "";
-    for (int i = 0; i < suffixes.length - 1; i++) {
-      ret = addSuffix(ret, suffixes[i]);
-    }
-    return addSuffix(ret, suffixes[suffixes.length - 1]);
+    return Joiner.on(".").skipNulls().join(suffixes);
-   * Returns list of InetSocketAddress for a given set of keys.
+   * Returns the configured address for all NameNodes in the cluster.
-   * @param defaultAddress default address to return in case key is not found
+   * @param defaultAddress default address to return in case key is not found.
-   * @return list of InetSocketAddress corresponding to the key
+   * @return a map(nameserviceId to map(namenodeId to InetSocketAddress))
-  private static List<InetSocketAddress> getAddresses(Configuration conf,
+  private static Map<String, Map<String, InetSocketAddress>>
+    getAddresses(Configuration conf,
-    Collection<String> namenodeIds = getNameNodeIds(conf);
-    List<InetSocketAddress> isas = new ArrayList<InetSocketAddress>();
+    
+    // Look for configurations of the form <key>[.<nameserviceId>][.<namenodeId>]
+    // across all of the configured nameservices and namenodes.
+    Map<String, Map<String, InetSocketAddress>> ret = Maps.newHashMap();
+    for (String nsId : emptyAsSingletonNull(nameserviceIds)) {
+      Map<String, InetSocketAddress> isas =
+        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);
+      if (!isas.isEmpty()) {
+        ret.put(nsId, isas);
+      }
+    }
+    return ret;
+  }
-    final boolean federationEnabled = nameserviceIds != null
-        && !nameserviceIds.isEmpty();
-    final boolean haEnabled = namenodeIds != null
-        && !namenodeIds.isEmpty();
-    
-    // Configuration with no federation and ha, return default address
-    if (!federationEnabled && !haEnabled) {
-      String address = getConfValue(defaultAddress, null, conf, keys);
-      if (address == null) {
-        return null;
-      }
-      isas.add(NetUtils.createSocketAddr(address));
-      return isas;
-    }
-    
-    if (!federationEnabled) {
-      nameserviceIds = new ArrayList<String>();
-      nameserviceIds.add(null);
-    }
-    if (!haEnabled) {
-      namenodeIds = new ArrayList<String>();
-      namenodeIds.add(null);
-    }
-    
-    // Get configuration suffixed with nameserviceId and/or namenodeId
-    if (federationEnabled && haEnabled) {
-      for (String nameserviceId : nameserviceIds) {
-        for (String nnId : namenodeIds) {
-          String keySuffix = concatSuffixes(nameserviceId, nnId);
-          String address = getConfValue(null, keySuffix, conf, keys);
-          if (address != null) {
-            isas.add(NetUtils.createSocketAddr(address));
-          }
-        }
-      }
-    } else if (!federationEnabled && haEnabled) {
-      for (String nnId : namenodeIds) {
-        String address = getConfValue(null, nnId, conf, keys);
-        if (address != null) {
-          isas.add(NetUtils.createSocketAddr(address));
-        }
-      }
-    } else if (federationEnabled && !haEnabled) {
-      for (String nameserviceId : nameserviceIds) {
-          String address = getConfValue(null, nameserviceId, conf, keys);
-          if (address != null) {
-            isas.add(NetUtils.createSocketAddr(address));
-          }
+  private static Map<String, InetSocketAddress> getAddressesForNameserviceId(
+      Configuration conf, String nsId, String defaultValue,
+      String[] keys) {
+    Collection<String> nnIds = getNameNodeIds(conf, nsId);
+    Map<String, InetSocketAddress> ret = Maps.newHashMap();
+    for (String nnId : emptyAsSingletonNull(nnIds)) {
+      String suffix = concatSuffixes(nsId, nnId);
+      String address = getConfValue(defaultValue, suffix, conf, keys);
+      if (address != null) {
+        InetSocketAddress isa = NetUtils.createSocketAddr(address);
+        ret.put(nnId, isa);
-    return isas;
+    return ret;
-  public static List<InetSocketAddress> getHaNnRpcAddresses(
-      Configuration conf) throws IOException {
-    List<InetSocketAddress> addressList = getAddresses(conf, null,
-        DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY);
-    if (addressList == null) {
-      throw new IOException("Incorrect configuration: HA name node addresses "
-          + DFS_NAMENODE_RPC_ADDRESS_KEY + " is not configured.");
-    }
-    return addressList;
+  public static Map<String, Map<String, InetSocketAddress>> getHaNnRpcAddresses(
+      Configuration conf) {
+    return getAddresses(conf, null, DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY);
-  public static List<InetSocketAddress> getBackupNodeAddresses(
+  public static Map<String, Map<String, InetSocketAddress>> getBackupNodeAddresses(
-    List<InetSocketAddress> addressList = getAddresses(conf,
+    Map<String, Map<String, InetSocketAddress>> addressList = getAddresses(conf,
-    if (addressList == null) {
+    if (addressList.isEmpty()) {
-  public static List<InetSocketAddress> getSecondaryNameNodeAddresses(
+  public static Map<String, Map<String, InetSocketAddress>> getSecondaryNameNodeAddresses(
-    List<InetSocketAddress> addressList = getAddresses(conf, null,
+    Map<String, Map<String, InetSocketAddress>> addressList = getAddresses(conf, null,
-    if (addressList == null) {
+    if (addressList.isEmpty()) {
-  public static List<InetSocketAddress> getNNServiceRpcAddresses(
+  public static Map<String, Map<String, InetSocketAddress>> getNNServiceRpcAddresses(
-    List<InetSocketAddress> addressList = getAddresses(conf, defaultAddress,
+    Map<String, Map<String, InetSocketAddress>> addressList =
+      getAddresses(conf, defaultAddress,
-    if (addressList == null) {
+    if (addressList.isEmpty()) {
+   * Flatten the given map, as returned by other functions in this class,
+   * into a flat list of {@link ConfiguredNNAddress} instances.
+   */
+  public static List<ConfiguredNNAddress> flattenAddressMap(
+      Map<String, Map<String, InetSocketAddress>> map) {
+    List<ConfiguredNNAddress> ret = Lists.newArrayList();
+    
+    for (Map.Entry<String, Map<String, InetSocketAddress>> entry :
+      map.entrySet()) {
+      String nsId = entry.getKey();
+      Map<String, InetSocketAddress> nnMap = entry.getValue();
+      for (Map.Entry<String, InetSocketAddress> e2 : nnMap.entrySet()) {
+        String nnId = e2.getKey();
+        InetSocketAddress addr = e2.getValue();
+        
+        ret.add(new ConfiguredNNAddress(nsId, nnId, addr));
+      }
+    }
+    return ret;
+  }
+
+  /**
+   * Format the given map, as returned by other functions in this class,
+   * into a string suitable for debugging display. The format of this string
+   * should not be considered an interface, and is liable to change.
+   */
+  public static String addressMapToString(
+      Map<String, Map<String, InetSocketAddress>> map) {
+    StringBuilder b = new StringBuilder();
+    for (Map.Entry<String, Map<String, InetSocketAddress>> entry :
+         map.entrySet()) {
+      String nsId = entry.getKey();
+      Map<String, InetSocketAddress> nnMap = entry.getValue();
+      b.append("Nameservice <").append(nsId).append(">:").append("\n");
+      for (Map.Entry<String, InetSocketAddress> e2 : nnMap.entrySet()) {
+        b.append("  NN ID ").append(e2.getKey())
+          .append(" => ").append(e2.getValue()).append("\n");
+      }
+    }
+    return b.toString();
+  }
+
+  /**
+   * Represent one of the NameNodes configured in the cluster.
+   */
+  public static class ConfiguredNNAddress {
+    private final String nameserviceId;
+    private final String namenodeId;
+    private final InetSocketAddress addr;
+
+    private ConfiguredNNAddress(String nameserviceId, String namenodeId,
+        InetSocketAddress addr) {
+      this.nameserviceId = nameserviceId;
+      this.namenodeId = namenodeId;
+      this.addr = addr;
+    }
+
+    public String getNameserviceId() {
+      return nameserviceId;
+    }
+
+    public String getNamenodeId() {
+      return namenodeId;
+    }
+
+    public InetSocketAddress getAddress() {
+      return addr;
+    }
+  }
+
+  /**
-    if (!isFederationEnabled(conf)) {
-      return null;
-    }    
-    return (ids != null && ids.length > 0) ? ids[0] : null;
+    return (ids != null) ? ids[0] : null;
-
-  /**
-   * Returns true if federation configuration is enabled
-   */
-  public static boolean isFederationEnabled(Configuration conf) {
-    Collection<String> collection = getNameServiceIds(conf);
-    return collection != null && collection.size() != 0;
-  }
-    if (!isFederationEnabled(conf)) {
-      return null;
-    }
-    nameserviceId = getSuffixIDs(conf, addressKey, LOCAL_ADDRESS_MATCHER)[0];
-    if (nameserviceId == null) {
-      String msg = "Configuration " + addressKey + " must be suffixed with" +
-      		" nameserviceId for federation configuration.";
-      throw new HadoopIllegalArgumentException(msg);
-    }
-    return nameserviceId;
+    String nnId = conf.get(DFS_HA_NAMENODE_ID_KEY);
+    
+    return getSuffixIDs(conf, addressKey, null, nnId, LOCAL_ADDRESS_MATCHER)[0];
+   * @param knownNsId only look at configs for the given nameservice, if not-null
+   * @param knownNNId only look at configs for the given namenode, if not null
+      String knownNsId, String knownNNId,
-    Collection<String> nsIds = getNameServiceIds(conf);
-    boolean federationEnabled = true;
-    if (nsIds == null || nsIds.size() == 0) {
-      federationEnabled = false; // federation not configured
-      nsIds = new ArrayList<String>();
-      nsIds.add(null);
-    }
-    
-    boolean haEnabled = true;
-    Collection<String> nnIds = getNameNodeIds(conf);
-    if (nnIds == null || nnIds.size() == 0) {
-      haEnabled = false; // HA not configured
-      nnIds = new ArrayList<String>();
-      nnIds.add(null);
-    }
-    
-    // Match the address from addressKey.nsId.nnId based on the given matcher
-    for (String nsId : nsIds) {
-      for (String nnId : nnIds) {
+    
+    Collection<String> nsIds = getNameServiceIds(conf);
+    for (String nsId : emptyAsSingletonNull(nsIds)) {
+      if (knownNsId != null && !knownNsId.equals(nsId)) {
+        continue;
+      }
+      
+      Collection<String> nnIds = getNameNodeIds(conf, nsId);
+      for (String nnId : emptyAsSingletonNull(nnIds)) {
+        if (knownNNId != null && !knownNNId.equals(nnId)) {
+          continue;
+        }
-          + (federationEnabled ? DFS_FEDERATION_NAMESERVICE_ID : "")
-          + (haEnabled ? (" and " + DFS_HA_NAMENODE_ID_KEY) : "");
+          + DFS_FEDERATION_NAMESERVICE_ID + " and "
+          + DFS_HA_NAMENODE_ID_KEY;
-      String[] ids = getSuffixIDs(conf, key, matcher);
+      String[] ids = getSuffixIDs(conf, key, null, null, matcher);
