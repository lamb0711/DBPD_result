HADOOP-7285. Refactor the test command to conform to new FsCommand class. Contributed by Daryn Sharp.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1102861 13f79535-47bb-0310-9956-ffa450edef68

-   * Check file types.
-   */
-  int test(String argv[], int i) throws IOException {
-    if (!argv[i].startsWith("-") || argv[i].length() > 2)
-      throw new IOException("Not a flag: " + argv[i]);
-    char flag = argv[i].toCharArray()[1];
-    PathData item = new PathData(argv[++i], getConf());
-    
-    if ((flag != 'e') && !item.exists) { 
-      // TODO: it's backwards compat, but why is this throwing an exception?
-      // it's not like the shell test cmd
-      throw new PathNotFoundException(item.toString());
-    }
-    switch(flag) {
-      case 'e':
-        return item.exists ? 0 : 1;
-      case 'z':
-        return (item.stat.getLen() == 0) ? 0 : 1;
-      case 'd':
-        return item.stat.isDirectory() ? 0 : 1;
-      default:
-        throw new IOException("Unknown flag: " + flag);
-    }
-  }
-
-  /**
-      "[-report]\n\t" +
-      "[-test -[ezd] <path>]";
+      "[-report]";
-    String test = "-test -[ezd] <path>: If file { exists, has zero length, is a directory\n" +
-      "\t\tthen return 0, else return 1.\n";
-
-    } else if ("test".equals(cmd)) {
-      System.out.println(test);
-      System.out.println(test);
-    } else if ("-test".equals(cmd)) {
-      System.err.println("Usage: java FsShell" +
-                         " [-test -[ezd] <path>]");
-      System.err.println("           [-test -[ezd] <path>]");
-    if ("-put".equals(cmd) || "-test".equals(cmd) ||
+    if ("-put".equals(cmd) ||
-      } else if ("-test".equals(cmd)) {
-        exitCode = test(argv, i);
-
-  /**
-   * Accumulate exceptions if there is any.  Throw them at last.
-   */
-  private abstract class DelayedExceptionThrowing {
-    abstract void process(Path p, FileSystem srcFs) throws IOException;
-
-    final void globAndProcess(Path srcPattern, FileSystem srcFs
-        ) throws IOException {
-      List<IOException> exceptions = new ArrayList<IOException>();
-      for(Path p : FileUtil.stat2Paths(srcFs.globStatus(srcPattern), 
-                                       srcPattern))
-        try { process(p, srcFs); } 
-        catch(IOException ioe) { exceptions.add(ioe); }
-    
-      if (!exceptions.isEmpty())
-        if (exceptions.size() == 1)
-          throw exceptions.get(0);
-        else 
-          throw new IOException("Multiple IOExceptions: " + exceptions);
-    }
-  }
-
-
+  
