Revert "HADOOP-14556. S3A to support Delegation Tokens."

This reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.

-import java.util.Collections;
-import com.google.common.collect.Lists;
-import org.apache.hadoop.fs.s3a.auth.RoleModel;
-import org.apache.hadoop.fs.s3a.auth.delegation.AWSPolicyProvider;
-import static org.apache.hadoop.fs.s3a.auth.RolePolicies.allowAllDynamoDBOperations;
-import static org.apache.hadoop.fs.s3a.auth.RolePolicies.allowS3GuardClientOperations;
-public class DynamoDBMetadataStore implements MetadataStore,
-    AWSPolicyProvider {
+public class DynamoDBMetadataStore implements MetadataStore {
-  private String tableArn;
-    // there's no URI here, which complicates life: you cannot
-    // create AWS providers here which require one.
-        + ", tableArn=" + tableArn
-   * The administrative policy includes all DDB table operations;
-   * application access is restricted to those operations S3Guard operations
-   * require when working with data in a guarded bucket.
-   * @param access access level desired.
-   * @return a possibly empty list of statements.
-   */
-  @Override
-  public List<RoleModel.Statement> listAWSPolicyRules(
-      final Set<AccessLevel> access) {
-    Preconditions.checkState(tableArn != null, "TableARN not known");
-    if (access.isEmpty()) {
-      return Collections.emptyList();
-    }
-    RoleModel.Statement stat;
-    if (access.contains(AccessLevel.ADMIN)) {
-      stat = allowAllDynamoDBOperations(tableArn);
-    } else {
-      stat = allowS3GuardClientOperations(tableArn);
-    }
-    return Lists.newArrayList(stat);
-  }
-
-  /**
-        tableArn = description.getTableArn();
