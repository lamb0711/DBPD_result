HADOOP-7271. Standardize shell command error messages.  Contributed by Daryn Sharp


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1101653 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import org.apache.hadoop.fs.shell.PathData;
+import org.apache.hadoop.fs.shell.PathExceptions.PathNotFoundException;
-	throw new IOException(srcpath + ": No such file or directory");
+        throw new PathNotFoundException(srcstr);
-      throw new FileNotFoundException("Cannot access "+srcPath.toString());
+      throw new PathNotFoundException(path);
-        throw new FileNotFoundException("Cannot access " + src
-                                        + ": No such file or directory.");
+        throw new PathNotFoundException(src);
-    Path f = new Path(argv[++i]);
-    FileSystem srcFs = f.getFileSystem(getConf());
+    PathData item = new PathData(argv[++i], getConf());
+    
+    if ((flag != 'e') && !item.exists) { 
+      // TODO: it's backwards compat, but why is this throwing an exception?
+      // it's not like the shell test cmd
+      throw new PathNotFoundException(item.toString());
+    }
-        return srcFs.exists(f) ? 0 : 1;
+        return item.exists ? 0 : 1;
-        return srcFs.getFileStatus(f).getLen() == 0 ? 0 : 1;
+        return (item.stat.getLen() == 0) ? 0 : 1;
-        return srcFs.getFileStatus(f).isDirectory() ? 0 : 1;
+        return item.stat.isDirectory() ? 0 : 1;
-      throw new IOException("cannot stat `" + src + "': No such file or directory");
+      throw new PathNotFoundException(src);
-          throw new FileNotFoundException(srcs[i] + 
-          ": No such file or directory");
+          throw new PathNotFoundException(srcs[i].toString());
-        //
+        // 
-        System.err.println(cmd.substring(1) + ": " +
-                           e.getLocalizedMessage());
+        displayError(cmd, e);
-      } catch (RemoteException e) {
-        LOG.debug("Error copying " + argv[i], e);
-        //
-        // This is a error returned by hadoop server. Print
-        // out the first line of the error mesage.
-        //
-        exitCode = -1;
-        try {
-          String[] content;
-          content = e.getLocalizedMessage().split("\n");
-          System.err.println(cmd.substring(1) + ": " +
-                             content[0]);
-        } catch (Exception ex) {
-          System.err.println(cmd.substring(1) + ": " +
-                             ex.getLocalizedMessage());
-        }
-        //
-        // IO exception encountered locally.
-        //
-        System.err.println(cmd.substring(1) + ": " +
-                           e.getLocalizedMessage());
+        displayError(cmd, e);
-      throw new FileNotFoundException("cannot remove "
-          + src + ": No such file or directory.");
+      throw new PathNotFoundException(src.toString());
-      } catch (RemoteException e) {
-        LOG.debug("Error", e);
-        //
-        // This is a error returned by hadoop server. Print
-        // out the first line of the error message.
-        //
-        exitCode = -1;
-        try {
-          String[] content;
-          content = e.getLocalizedMessage().split("\n");
-          System.err.println(cmd.substring(1) + ": " +
-                             content[0]);
-        } catch (Exception ex) {
-          System.err.println(cmd.substring(1) + ": " +
-                             ex.getLocalizedMessage());
-        }
-        //
-        // IO exception encountered locally.
-        //
-        String content = e.getLocalizedMessage();
-        if (content != null) {
-          content = content.split("\n")[0];
-        }
-        System.err.println(cmd.substring(1) + ": " +
-                          content);
+        displayError(cmd, e);
-    } catch (RemoteException e) {
-      LOG.debug("Error", e);
-      //
-      // This is a error returned by hadoop server. Print
-      // out the first line of the error mesage, ignore the stack trace.
-      exitCode = -1;
-      try {
-        String[] content;
-        content = e.getLocalizedMessage().split("\n");
-        System.err.println(cmd.substring(1) + ": " + 
-                           content[0]);
-      } catch (Exception ex) {
-        System.err.println(cmd.substring(1) + ": " + 
-                           ex.getLocalizedMessage());  
-      }
-    } catch (IOException e) {
-      LOG.debug("Error", e);
-      //
-      // IO exception encountered locally.
-      // 
-      exitCode = -1;
-      System.err.println(cmd.substring(1) + ": " + 
-                         e.getLocalizedMessage());  
-      System.err.println(cmd.substring(1) + ": " + re.getLocalizedMessage());  
+      displayError(cmd, re);
+  // TODO: this is a quick workaround to accelerate the integration of
+  // redesigned commands.  this will be removed this once all commands are
+  // converted.  this change will avoid having to change the hdfs tests
+  // every time a command is converted to use path-based exceptions
+  private static Pattern[] fnfPatterns = {
+    Pattern.compile("File (.*) does not exist\\."),
+    Pattern.compile("File does not exist: (.*)"),
+    Pattern.compile("`(.*)': specified destination directory doest not exist")
+  };
+  private void displayError(String cmd, Exception e) {
+    String message = e.getLocalizedMessage().split("\n")[0];
+    for (Pattern pattern : fnfPatterns) {
+      Matcher matcher = pattern.matcher(message);
+      if (matcher.matches()) {
+        message = new PathNotFoundException(matcher.group(1)).getMessage();
+        break;
+      }
+    }
+    System.err.println(cmd.substring(1) + ": " + message);  
+  }
+  
