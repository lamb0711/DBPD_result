Revert "HADOOP-14556. S3A to support Delegation Tokens."

This reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.

-import java.util.Collection;
+import java.util.Arrays;
+import static com.google.common.base.Preconditions.checkNotNull;
-import static java.util.Objects.requireNonNull;
-   * @param allow allow or deny
-   * @param scope scope
-   * @param actions actions
-   * @return the formatted json statement
-   */
-  public static Statement statement(boolean allow,
-      String scope,
-      Collection<String> actions) {
-    return new Statement(RoleModel.effect(allow))
-        .addActions(actions)
-        .addResources(scope);
-  }
-
-  /**
-   * Create a statement.
-   * Create a statement.
-   * If {@code isDirectory} is true, a "/" is added to the path.
-   * This is critical when adding wildcard permissions under
-   * a directory, and also needed when locking down dir-as-file
-   * and dir-as-directory-marker access.
-   * @param allow allow or deny
-   * @param path path
-   * @param isDirectory is this a directory?
-   * @param actions action
-   * @return the formatted json statement
-   */
-  public static Statement statement(
-      final boolean allow,
-      final Path path,
-      final boolean isDirectory,
-      final boolean wildcards,
-      final Collection<String> actions) {
-    return new Statement(RoleModel.effect(allow))
-        .addActions(actions)
-        .addResources(resource(path, isDirectory, wildcards));
-  }
-
-  /**
-      requireNonNull(sid, "Sid");
-      requireNonNull(effect, "Effect");
+      checkNotNull(sid, "Sid");
+      checkNotNull(effect, "Effect");
-    public Statement addActions(Collection<String> actions) {
-      action.addAll(actions);
-      return this;
-    }
-
-    /**
-     * Add a list of resources.
-     * @param resources resource list
-     * @return this statement.
-     */
-    public Statement addResources(Collection<String> resources) {
-      resource.addAll(resources);
-      return this;
-    }
-    /**
-     * Empty constructor: initializes the statements to an empty list.
-     */
-    public Policy() {
-      statement = new ArrayList<>();
-    }
-
-      statement = new ArrayList<>(statements.length);
-      Collections.addAll(statement, statements);
+      statement = Arrays.asList(statements);
-      requireNonNull(statement, "Statement");
+      checkNotNull(statement, "Statement");
-    /**
-     * Add the statements of another policy to this one.
-     * @param other other policy.
-     */
-    public void add(Policy other) {
-      add(other.statement);
-    }
-
-    /**
-     * Add a collection of statements.
-     * @param statements statements to add.
-     */
-    public void add(Collection<Statement> statements) {
-      statement.addAll(statements);
-    }
-
-    /**
-     * Add a single statement.
-     * @param stat new statement.
-     */
-    public void add(Statement stat) {
-      statement.add(stat);
-    }
