Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68

-    public static BufferSize bufferSize(short bs) { 
+    public static BufferSize bufferSize(int bs) { 
-    static class BlockSize extends CreateOpts {
+    public static class BlockSize extends CreateOpts {
-      long getValue() { return blockSize; }
+      public long getValue() { return blockSize; }
-    static class ReplicationFactor extends CreateOpts {
+    public static class ReplicationFactor extends CreateOpts {
-      short getValue() { return replication; }
+      public short getValue() { return replication; }
-    static class BufferSize extends CreateOpts {
+    public static class BufferSize extends CreateOpts {
-      protected BufferSize(short bs) {
+      protected BufferSize(int bs) {
-      int getValue() { return bufferSize; }
+      public int getValue() { return bufferSize; }
-    static class BytesPerChecksum extends CreateOpts {
+    public static class BytesPerChecksum extends CreateOpts {
-      int getValue() { return bytesPerChecksum; }
+      public int getValue() { return bytesPerChecksum; }
-    static class Perms extends CreateOpts {
+    public static class Perms extends CreateOpts {
-      FsPermission getValue() { return permissions; }
+      public FsPermission getValue() { return permissions; }
-    static class Progress extends CreateOpts {
+    public static class Progress extends CreateOpts {
-      Progressable getValue() { return progress; }
+      public Progressable getValue() { return progress; }
-    static class CreateParent extends CreateOpts {
-      private final Boolean createParent;
+    public static class CreateParent extends CreateOpts {
+      private final boolean createParent;
-      Boolean getValue() { return createParent; }
+      public boolean getValue() { return createParent; }
+    }
+
+    
+    /**
+     * Get an option of desired type
+     * @param theClass is the desired class of the opt
+     * @param opts - not null - at least one opt must be passed
+     * @return an opt from one of the opts of type theClass.
+     *   returns null if there isn't any
+     */
+    protected static CreateOpts getOpt(Class<? extends CreateOpts> theClass,  CreateOpts ...opts) {
+      if (opts == null) {
+        throw new IllegalArgumentException("Null opt");
+      }
+      CreateOpts result = null;
+      for (int i = 0; i < opts.length; ++i) {
+        if (opts[i].getClass() == theClass) {
+          if (result != null) 
+            throw new IllegalArgumentException("multiple blocksize varargs");
+          result = opts[i];
+        }
+      }
+      return result;
+    }
+    /**
+     * set an option
+     * @param newValue  the option to be set
+     * @param opts  - the option is set into this array of opts
+     * @return updated CreateOpts[] == opts + newValue
+     */
+    protected static <T extends CreateOpts> CreateOpts[] setOpt(T newValue,
+        CreateOpts ...opts) {
+      boolean alreadyInOpts = false;
+      if (opts != null) {
+        for (int i = 0; i < opts.length; ++i) {
+          if (opts[i].getClass() == newValue.getClass()) {
+            if (alreadyInOpts) 
+              throw new IllegalArgumentException("multiple opts varargs");
+            alreadyInOpts = true;
+            opts[i] = newValue;
+          }
+        }
+      }
+      CreateOpts[] resultOpt = opts;
+      if (!alreadyInOpts) { // no newValue in opt
+        CreateOpts[] newOpts = new CreateOpts[opts.length + 1];
+        System.arraycopy(opts, 0, newOpts, 0, opts.length);
+        newOpts[opts.length] = newValue;
+        resultOpt = newOpts;
+      }
+      return resultOpt;
