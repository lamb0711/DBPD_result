HDFS-1073. Redesign the NameNode's storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.common.InconsistentFSStateException;
-    /** The image version of the loaded file */
-    private int imgVersion;
-    /** The namespace ID of the loaded file */
-    private int imgNamespaceID;
+    /** The transaction ID of the last edit represented by the loaded file */
+    private long imgTxId;
-     * Return the version number of the image that has been loaded.
-     * @throws IllegalStateException if load() has not yet been called.
-     */
-    int getLoadedImageVersion() {
-      checkLoaded();
-      return imgVersion;
-    }
-    
-    /**
-    /**
-     * Return the namespace ID of the image that has been loaded.
-     * @throws IllegalStateException if load() has not yet been called.
-     */
-    int getLoadedNamespaceID() {
+    long getLoadedImageTxId() {
-      return imgNamespaceID;
+      return imgTxId;
-        imgVersion = in.readInt();
+        int imgVersion = in.readInt();
+        if(getLayoutVersion() != imgVersion)
+          throw new InconsistentFSStateException(curFile, 
+              "imgVersion " + imgVersion +
+              " expected to be " + getLayoutVersion());
-        imgNamespaceID = in.readInt();
+        in.readInt();
+        
+        // read the transaction ID of the last edit represented by
+        // this image
+        if (LayoutVersion.supports(Feature.STORED_TXIDS, imgVersion)) {
+          imgTxId = in.readLong();
+        } else {
+          imgTxId = 0;
+        }
+        
-         imgVersion);
+         getLayoutVersion());
-  throws IOException {
+      throws IOException {
+    int imgVersion = getLayoutVersion();
-    private void loadDatanodes(DataInputStream in) throws IOException {
+    private void loadDatanodes(DataInputStream in)
+        throws IOException {
+      int imgVersion = getLayoutVersion();
+
+      int imgVersion = getLayoutVersion();
-    private void loadSecretManagerState(DataInputStream in) throws IOException {
+    private void loadSecretManagerState(DataInputStream in)
+        throws IOException {
+      int imgVersion = getLayoutVersion();
+
+    private int getLayoutVersion() {
+      return namesystem.getFSImage().getStorage().getLayoutVersion();
+    }
-    private long readNumFiles(DataInputStream in) throws IOException {
+    private long readNumFiles(DataInputStream in)
+        throws IOException {
+      int imgVersion = getLayoutVersion();
+
+              long txid,
-        out.writeInt(sourceNamesystem.getFSImage().getStorage().getNamespaceID()); // TODO bad dependency
+        out.writeInt(sourceNamesystem.getFSImage()
+                     .getStorage().getNamespaceID()); // TODO bad dependency
+        out.writeLong(txid);
