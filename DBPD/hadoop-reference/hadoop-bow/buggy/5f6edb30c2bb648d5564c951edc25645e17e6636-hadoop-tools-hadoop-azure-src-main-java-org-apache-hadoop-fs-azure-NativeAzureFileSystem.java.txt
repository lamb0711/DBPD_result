HADOOP-12350. WASB Logging: Improve WASB Logging around deletes, reads and writes. Contributed by Dushyanth.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.io.IOUtils;
-
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-        LOG.error("Deleting corruped rename pending file "
-            + redoFile + "\n" + contents);
+        LOG.error("Deleting corruped rename pending file {} \n {}",
+            redoFile, contents);
-      if (LOG.isDebugEnabled()){
-        LOG.debug("Preparing to write atomic rename state to " + path.toString());
-      }
+      LOG.debug("Preparing to write atomic rename state to {}", path.toString());
-        IOUtils.cleanup(LOG, output);
+        NativeAzureFileSystem.cleanup(LOG, output);
-          LOG.error("Internal error: Exceeded maximum rename pending file size of "
-              + MAX_RENAME_PENDING_FILE_SIZE + " bytes.");
+          LOG.error("Internal error: Exceeded maximum rename pending file size of {} bytes.",
+              MAX_RENAME_PENDING_FILE_SIZE);
-  public static final Log LOG = LogFactory.getLog(NativeAzureFileSystem.class);
+  public static final Logger LOG = LoggerFactory.getLogger(NativeAzureFileSystem.class);
-      int result = 0;
-      result = in.read();
-      if (result != -1) {
-        pos++;
-        if (statistics != null) {
-          statistics.incrementBytesRead(1);
+      try {
+        int result = 0;
+        result = in.read();
+        if (result != -1) {
+          pos++;
+          if (statistics != null) {
+            statistics.incrementBytesRead(1);
+          }
-      }
-
-      return result;
+        return result;
+      } catch(IOException e) {
+        if (e.getCause() instanceof StorageException) {
+          StorageException storageExcp  = (StorageException) e.getCause();
+          LOG.error("Encountered Storage Exception for read on Blob : {}"
+              + " Exception details: {} Error Code : {}",
+              key, e.getMessage(), storageExcp.getErrorCode());
+        }
+        throw e;
+      }
-      int result = 0;
-      result = in.read(b, off, len);
-      if (result > 0) {
-        pos += result;
-      }
+      try {
+        int result = 0;
+        result = in.read(b, off, len);
+        if (result > 0) {
+          pos += result;
+        }
-      if (null != statistics) {
-        statistics.incrementBytesRead(result);
-      }
+        if (null != statistics) {
+          statistics.incrementBytesRead(result);
+        }
-      // Return to the caller with the result.
-      return result;
+        // Return to the caller with the result.
+        return result;
+      } catch(IOException e) {
+        if (e.getCause() instanceof StorageException) {
+          StorageException storageExcp  = (StorageException) e.getCause();
+          LOG.error("Encountered Storage Exception for read on Blob : {}"
+              + " Exception details: {} Error Code : {}",
+              key, e.getMessage(), storageExcp.getErrorCode());
+        }
+        throw e;
+      }
-     if (LOG.isDebugEnabled()) {
-       LOG.debug(String.format("Seek to position %d. Bytes skipped %d", pos,
-         this.pos));
-     }
+     LOG.debug("Seek to position {}. Bytes skipped {}", pos,
+         this.pos);
-      out.write(b);
+      try {
+        out.write(b);
+      } catch(IOException e) {
+        if (e.getCause() instanceof StorageException) {
+          StorageException storageExcp  = (StorageException) e.getCause();
+          LOG.error("Encountered Storage Exception for write on Blob : {}"
+              + " Exception details: {} Error Code : {}",
+              key, e.getMessage(), storageExcp.getErrorCode());
+        }
+        throw e;
+      }
-      out.write(b);
+      try {
+        out.write(b);
+      } catch(IOException e) {
+        if (e.getCause() instanceof StorageException) {
+          StorageException storageExcp  = (StorageException) e.getCause();
+          LOG.error("Encountered Storage Exception for write on Blob : {}"
+              + " Exception details: {} Error Code : {}",
+              key, e.getMessage(), storageExcp.getErrorCode());
+        }
+        throw e;
+      }
-      out.write(b, off, len);
+      try {
+        out.write(b, off, len);
+      } catch(IOException e) {
+        if (e.getCause() instanceof StorageException) {
+          StorageException storageExcp  = (StorageException) e.getCause();
+          LOG.error("Encountered Storage Exception for write on Blob : {}"
+              + " Exception details: {} Error Code : {}",
+              key, e.getMessage(), storageExcp.getErrorCode());
+        }
+        throw e;
+      }
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("NativeAzureFileSystem. Initializing.");
-      LOG.debug("  blockSize  = "
-          + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));
-    }
+
+    LOG.debug("NativeAzureFileSystem. Initializing.");
+    LOG.debug("  blockSize  = {}",
+        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));
+
-        LOG.warn("Got unexpected exception trying to get lease on "
-          + pathToKey(parent) + ". " + e.getMessage());
+        LOG.warn("Got unexpected exception trying to get lease on {} . {}",
+          pathToKey(parent), e.getMessage());
-        LOG.warn("Unable to free lease because: " + e.getMessage());
+        LOG.warn("Unable to free lease because: {}", e.getMessage());
-        IOUtils.cleanup(LOG, out);
+        NativeAzureFileSystem.cleanup(LOG, out);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Creating file: " + f.toString());
-    }
+    LOG.debug("Creating file: {}", f.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Deleting file: " + f.toString());
-    }
+    LOG.debug("Deleting file: {}", f.toString());
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("Found an implicit parent directory while trying to"
-                + " delete the file " + f + ". Creating the directory blob for"
-                + " it in " + parentKey + ".");
-          }
+          LOG.debug("Found an implicit parent directory while trying to"
+              + " delete the file {}. Creating the directory blob for"
+              + " it in {}.", f, parentKey);
+
+      LOG.debug("Directory Delete encountered: {}", f.toString());
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("Found an implicit parent directory while trying to"
-                + " delete the directory " + f
-                + ". Creating the directory blob for" + " it in " + parentKey
-                + ".");
-          }
+          LOG.debug("Found an implicit parent directory while trying to"
+              + " delete the directory {}. Creating the directory blob for"
+              + " it in {}. ", f, parentKey);
+
+    LOG.debug("Delete Successful for : {}", f.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Getting the file status for " + f.toString());
-    }
+    LOG.debug("Getting the file status for {}", f.toString());
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Path " + f.toString() + "is a folder.");
-        }
+
+        LOG.debug("Path {} is a folder.", f.toString());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Found the path: " + f.toString() + " as a file.");
-      }
+      LOG.debug("Found the path: {} as a file.", f.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Listing status for " + f.toString());
-    }
+    LOG.debug("Listing status for {}", f.toString());
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Found path as a file");
-        }
+
+        LOG.debug("Found path as a file");
+
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Found path as a directory with " + status.size()
-            + " files in it.");
-      }
+
+      LOG.debug("Found path as a directory with {}"
+          + " files in it.", status.size());
+
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Did not find any metadata for path: " + key);
-      }
+      LOG.debug("Did not find any metadata for path: {}", key);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Creating directory: " + f.toString());
-    }
+
+
+    LOG.debug("Creating directory: {}", f.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Opening file: " + f.toString());
-    }
+
+    LOG.debug("Opening file: {}", f.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Moving " + src + " to " + dst);
-    }
+    LOG.debug("Moving {} to {}", src, dst);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Destination " + dst
-            + " is a directory, adjusted the destination to be " + dstKey);
-      }
+      LOG.debug("Destination {} "
+          + " is a directory, adjusted the destination to be {}", dst, dstKey);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Destination " + dst
-            + " is an already existing file, failing the rename.");
-      }
+      LOG.debug("Destination {}"
+          + " is an already existing file, failing the rename.", dst);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Parent of the destination " + dst
-              + " doesn't exist, failing the rename.");
-        }
+        LOG.debug("Parent of the destination {}"
+            + " doesn't exist, failing the rename.", dst);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Parent of the destination " + dst
-              + " is a file, failing the rename.");
-        }
+        LOG.debug("Parent of the destination {}"
+            + " is a file, failing the rename.", dst);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Source " + src + " doesn't exist, failing the rename.");
-      }
+      LOG.debug("Source {} doesn't exist, failing the rename.", src);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Source " + src + " found as a file, renaming.");
-      }
+      LOG.debug("Source {} found as a file, renaming.", src);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Renamed " + src + " to " + dst + " successfully.");
-      }
+
+      LOG.debug("Renamed {} to {} successfully.", src, dst);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Renamed " + src + " to " + dst + " successfully.");
-    }
+    LOG.debug("Renamed {} to {} successfully.", src, dst);
-            LOG.warn("Got unexpected exception trying to get lease on "
-                + parentKey + ". " + e.getMessage());
+            LOG.warn("Got unexpected exception trying to get lease on {}. {}",
+                parentKey, e.getMessage());
-              LOG.error("Unable to free lease on " + parentKey, e);
+              LOG.error("Unable to free lease on {}", parentKey, e);
-    if (LOG.isDebugEnabled()) {
-        LOG.debug("Submitting metrics when file system closed took "
-                + (System.currentTimeMillis() - startTime) + " ms.");
-    }
+    LOG.debug("Submitting metrics when file system closed took {} ms.",
+        (System.currentTimeMillis() - startTime));
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Deleting dangling file " + file.getKey());
-      }
+
+      LOG.debug("Deleting dangling file {}", file.getKey());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Recovering " + file.getKey());
-      }
+
+      LOG.debug("Recovering {}", file.getKey());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Recovering files with dangling temp data in " + root);
-    }
+
+    LOG.debug("Recovering files with dangling temp data in {}", root);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Deleting files with dangling temp data in " + root);
-    }
+
+    LOG.debug("Deleting files with dangling temp data in {}", root);
-}
+
+  private static void cleanup(Logger log, java.io.Closeable closeable) {
+    if (closeable != null) {
+      try {
+        closeable.close();
+      } catch(IOException e) {
+        if (log != null) {
+          log.debug("Exception in closing {}", closeable, e);
+        }
+      }
+    }
+  }
+}
