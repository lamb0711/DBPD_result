HADOOP-6889. Make RPC to have an option to timeout. Contributed by Hairong Kuang.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@982681 13f79535-47bb-0310-9956-ffa450edef68

+    private int rpcTimeout;
-      
+      this.rpcTimeout = remoteId.getRpcTimeout();
-       * if the connection is not going to be closed, send a ping.
+       * if the connection is not going to be closed or 
+       * is not configured to have a RPC timeout, send a ping.
+       * (if rpcTimeout is not set to be 0, then RPC should timeout.
-        if (shouldCloseConnection.get() || !running.get()) {
+        if (shouldCloseConnection.get() || !running.get() || rpcTimeout > 0) {
+          if (rpcTimeout > 0) {
+            pingInterval = rpcTimeout;  // rpcTimeout overwrites pingInterval
+          }
-    return call(param, addr, null, ticket);
+    return call(param, addr, null, ticket, 0);
-                       Class<?> protocol, UserGroupInformation ticket)  
+                       Class<?> protocol, UserGroupInformation ticket,
+                       int rpcTimeout)  
-    Connection connection = getConnection(addr, protocol, ticket, call);
+    Connection connection = getConnection(
+        addr, protocol, ticket, rpcTimeout, call);
-            getConnection(addresses[i], protocol, ticket, call);
+            getConnection(addresses[i], protocol, ticket, 0, call);
+                                   int rpcTimeout,
-    ConnectionId remoteId = new ConnectionId(addr, protocol, ticket);
+    ConnectionId remoteId = new ConnectionId(
+        addr, protocol, ticket, rpcTimeout);
+    private int rpcTimeout;
-                 UserGroupInformation ticket) {
+                 UserGroupInformation ticket, int rpcTimeout) {
+      this.rpcTimeout = rpcTimeout;
+    private int getRpcTimeout() {
+      return rpcTimeout;
+    }
-               (ticket == id.ticket));
+               (ticket == id.ticket)) && rpcTimeout == id.rpcTimeout;
-    @Override
+    @Override  // simply use the default Object#hashcode() ?
-      return (address.hashCode() + PRIME * System.identityHashCode(protocol)) ^ 
-             (ticket == null ? 0 : ticket.hashCode());
+      return (address.hashCode() + PRIME * (
+                PRIME * (
+                  PRIME * System.identityHashCode(protocol) ^
+                  System.identityHashCode(ticket)
+                ) ^ System.identityHashCode(rpcTimeout)
+              ));
