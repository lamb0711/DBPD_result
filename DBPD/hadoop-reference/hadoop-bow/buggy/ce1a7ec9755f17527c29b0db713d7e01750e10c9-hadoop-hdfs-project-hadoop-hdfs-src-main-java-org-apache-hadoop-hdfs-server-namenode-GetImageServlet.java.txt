HDFS-2941. Add an administrative command to download a copy of the fsimage from the NN. Contributed by Aaron T. Myers.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305447 13f79535-47bb-0310-9956-ffa450edef68

+  public final static String CONTENT_DISPOSITION = "Content-Disposition";
+  public final static String HADOOP_IMAGE_EDITS_HEADER = "X-Image-Edits-Name";
+  
+  private static final String LATEST_FSIMAGE_VALUE = "latest";
-            File imageFile = nnImage.getStorage().getFsImageName(txid);
-            if (imageFile == null) {
-              throw new IOException("Could not find image with txid " + txid);
+            File imageFile = null;
+            String errorMessage = "Could not find image";
+            if (parsedParams.shouldFetchLatest()) {
+              imageFile = nnImage.getStorage().getHighestFsImageName();
+            } else {
+              errorMessage += " with txid " + txid;
+              imageFile = nnImage.getStorage().getFsImageName(txid);
+            if (imageFile == null) {
+              throw new IOException(errorMessage);
+            }
+            setFileNameHeaders(response, imageFile);
+            setFileNameHeaders(response, editFile);
+  private static void setFileNameHeaders(HttpServletResponse response,
+      File file) {
+    response.setHeader(CONTENT_DISPOSITION, "attachment; filename=" +
+        file.getName());
+    response.setHeader(HADOOP_IMAGE_EDITS_HEADER, file.getName());
+  }
+  
-  @SuppressWarnings("deprecation")
+  
+  static String getParamStringForMostRecentImage() {
+    return "getimage=1&" + TXID_PARAM + "=" + LATEST_FSIMAGE_VALUE;
+  }
-    
+    private boolean fetchLatest;
-      isGetImage = isGetEdit = isPutImage = false;
+      isGetImage = isGetEdit = isPutImage = fetchLatest = false;
-          txId = parseLongParam(request, TXID_PARAM);
+          try {
+            txId = parseLongParam(request, TXID_PARAM);
+          } catch (NumberFormatException nfe) {
+            if (request.getParameter(TXID_PARAM).equals(LATEST_FSIMAGE_VALUE)) {
+              fetchLatest = true;
+            } else {
+              throw nfe;
+            }
+          }
+    boolean shouldFetchLatest() {
+      return fetchLatest;
+    }
+    
