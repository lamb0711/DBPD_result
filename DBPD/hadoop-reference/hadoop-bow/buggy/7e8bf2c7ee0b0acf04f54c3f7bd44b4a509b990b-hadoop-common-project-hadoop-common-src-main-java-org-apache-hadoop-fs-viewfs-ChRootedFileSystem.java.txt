HADOOP-8015  ChRootFileSystem should extend FilterFileSystem (Daryn Sharp via bobby)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239924 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
+import org.apache.hadoop.fs.FilterFileSystem;
-import org.apache.hadoop.security.token.Token;
-class ChRootedFileSystem extends FileSystem {
-  private final FileSystem myFs; // the base file system whose root is changed
+class ChRootedFileSystem extends FilterFileSystem {
-    return myFs;
+    return getRawFileSystem();
-    myFs = fs;
-    myFs.makeQualified(theRoot); //check that root is a valid path for fs
+    super(fs);
+    makeQualified(theRoot); //check that root is a valid path for fs
-    myUri = new URI(myFs.getUri().toString() + 
-        (myFs.getUri().getAuthority() == null ? "" :  Path.SEPARATOR) +
+    myUri = new URI(fs.getUri().toString() + 
+        (fs.getUri().getAuthority() == null ? "" :  Path.SEPARATOR) +
-    myFs.initialize(name, conf);
-  @Override
-  public Path makeQualified(final Path path) {
-    return myFs.makeQualified(path);
-    // NOT myFs.makeQualified(fullPath(path));
-  }
- 
-    return myFs.makeQualified(
+    return makeQualified(
-    return myFs.create(fullPath(f), permission, overwrite, bufferSize,
+    return super.create(fullPath(f), permission, overwrite, bufferSize,
-    return myFs.delete(fullPath(f), recursive);
+    return super.delete(fullPath(f), recursive);
-    return myFs.getFileBlockLocations(
+    return super.getFileBlockLocations(
-    return myFs.getFileChecksum(fullPath(f));
+    return super.getFileChecksum(fullPath(f));
-    return myFs.getFileStatus(fullPath(f));
+    return super.getFileStatus(fullPath(f));
-    return myFs.getStatus(fullPath(p));
+    return super.getStatus(fullPath(p));
-    return myFs.getServerDefaults();
+    return super.getServerDefaults();
-    return myFs.listStatus(fullPath(f));
+    return super.listStatus(fullPath(f));
-    return myFs.mkdirs(fullPath(f), permission);
+    return super.mkdirs(fullPath(f), permission);
-    return myFs.open(fullPath(f), bufferSize);
+    return super.open(fullPath(f), bufferSize);
-    return myFs.append(fullPath(f), bufferSize, progress);
+    return super.append(fullPath(f), bufferSize, progress);
-    return myFs.rename(fullPath(src), fullPath(dst)); 
+    return super.rename(fullPath(src), fullPath(dst)); 
-    myFs.setOwner(fullPath(f), username, groupname);
+    super.setOwner(fullPath(f), username, groupname);
-    myFs.setPermission(fullPath(f), permission);
+    super.setPermission(fullPath(f), permission);
-    return myFs.setReplication(fullPath(f), replication);
+    return super.setReplication(fullPath(f), replication);
-    myFs.setTimes(fullPath(f), mtime, atime);
-  }
-
-  @Override
-  public void setVerifyChecksum(final boolean verifyChecksum)  {
-    myFs.setVerifyChecksum(verifyChecksum);
+    super.setTimes(fullPath(f), mtime, atime);
-  public List<Token<?>> getDelegationTokens(String renewer) throws IOException {
-    return myFs.getDelegationTokens(renewer);
+  public Path resolvePath(final Path p) throws IOException {
+    return super.resolvePath(fullPath(p));
