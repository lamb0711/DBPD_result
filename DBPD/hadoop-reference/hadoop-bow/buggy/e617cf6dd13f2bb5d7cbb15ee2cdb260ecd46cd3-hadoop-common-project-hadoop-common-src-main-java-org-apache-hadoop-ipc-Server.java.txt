HADOOP-10300. Allowed deferred sending of call responses. (Daryn Sharp via yliu)

+    private AtomicInteger responseWaitCount = new AtomicInteger(1);
+    public void setResponse(Throwable t) throws IOException {
+      setupResponse(new ByteArrayOutputStream(), this,
+          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,
+          null, t.getClass().getName(), StringUtils.stringifyException(t));
+    }
+
+    /**
+     * Allow a IPC response to be postponed instead of sent immediately
+     * after the handler returns from the proxy method.  The intended use
+     * case is freeing up the handler thread when the response is known,
+     * but an expensive pre-condition must be satisfied before it's sent
+     * to the client.
+     */
+    @InterfaceStability.Unstable
+    @InterfaceAudience.LimitedPrivate({"HDFS"})
+    public void postponeResponse() {
+      int count = responseWaitCount.incrementAndGet();
+      assert count > 0 : "response has already been sent";
+    }
+
+    @InterfaceStability.Unstable
+    @InterfaceAudience.LimitedPrivate({"HDFS"})
+    public void sendResponse() throws IOException {
+      int count = responseWaitCount.decrementAndGet();
+      assert count >= 0 : "response has already been sent";
+      if (count == 0) {
+        if (rpcResponse == null) {
+          // needed by postponed operations to indicate an exception has
+          // occurred.  it's too late to re-encode the response so just
+          // drop the connection.
+          connection.close();
+        } else {
+          connection.sendResponse(this);
+        }
+      }
+    }
+
-    private final Call saslCall = new Call(AuthProtocol.SASL.callId,
-        RpcConstants.INVALID_RETRY_COUNT, null, this);
-    private final ByteArrayOutputStream saslResponse = new ByteArrayOutputStream();
-    
-    
+
+      final Call saslCall = new Call(AuthProtocol.SASL.callId,
+          RpcConstants.INVALID_RETRY_COUNT, null, this);
+      final ByteArrayOutputStream saslResponse = new ByteArrayOutputStream();
-      responder.doRespond(saslCall);
+      saslCall.sendResponse();
-    
+
-      responder.doRespond(authFailedCall);
+      authFailedCall.sendResponse();
-    
+
-        responder.doRespond(fakeCall);
+        fakeCall.sendResponse();
-        responder.doRespond(fakeCall);
+        fakeCall.sendResponse();
-        
-        responder.doRespond(fakeCall);
+        fakeCall.sendResponse();
-      responder.doRespond(fakeCall);
+      fakeCall.sendResponse();
-        responder.doRespond(call);
+        call.sendResponse();
+    private void sendResponse(Call call) throws IOException {
+      responder.doRespond(call);
+    }
+
-            responder.doRespond(call);
+            call.sendResponse();
-  private void setupResponse(ByteArrayOutputStream responseBuf,
+  private static void setupResponse(ByteArrayOutputStream responseBuf,
-  private void wrapWithSasl(ByteArrayOutputStream response, Call call)
+  private static void wrapWithSasl(ByteArrayOutputStream response, Call call)
