HADOOP-1381. The distance between sync blocks in SequenceFiles should be configurable rather than hard coded to 2000 bytes. Contributed by Harsh J.

+import com.google.common.annotations.VisibleForTesting;
- * A sync-marker every few <code>100</code> bytes or so.
+ * A sync-marker every few <code>100</code> kilobytes or so.
- * A sync-marker every few <code>100</code> bytes or so.
+ * A sync-marker every few <code>100</code> kilobytes or so.
-  /** The number of bytes between sync points.*/
-  public static final int SYNC_INTERVAL = 100*SYNC_SIZE; 
+  /**
+   * The number of bytes between sync points. 100 KB, default.
+   * Computed as 5 KB * 20 = 100 KB
+   */
+  public static final int SYNC_INTERVAL = 5 * 1024 * SYNC_SIZE; // 5KB*(16+4)
+    @VisibleForTesting
+    int syncInterval;
+
-    
+
+    private static class SyncIntervalOption extends Options.IntegerOption
+        implements Option {
+      SyncIntervalOption(int val) {
+        // If a negative sync interval is provided,
+        // fall back to the default sync interval.
+        super(val < 0 ? SYNC_INTERVAL : val);
+      }
+    }
+
-    
+
+    public static Option syncInterval(int value) {
+      return new SyncIntervalOption(value);
+    }
+
-     * @param options the options used when creating the writer
+     * @param opts the options used when creating the writer
+      SyncIntervalOption syncIntervalOption =
+          Options.getOption(SyncIntervalOption.class, opts);
-      init(conf, out, ownStream, keyClass, valueClass, codec, metadata);
+      this.syncInterval = (syncIntervalOption == null) ?
+          SYNC_INTERVAL :
+          syncIntervalOption.getValue();
+      init(
+          conf, out, ownStream, keyClass, valueClass,
+          codec, metadata, syncInterval);
-           new Metadata());
+           new Metadata(), SYNC_INTERVAL);
-           null, metadata);
+           null, metadata, SYNC_INTERVAL);
-           true, keyClass, valClass, null, metadata);
+           true, keyClass, valClass, null, metadata, SYNC_INTERVAL);
-    void init(Configuration conf, FSDataOutputStream out, boolean ownStream,
-              Class keyClass, Class valClass,
-              CompressionCodec codec, Metadata metadata) 
+    void init(Configuration config, FSDataOutputStream outStream,
+              boolean ownStream, Class key, Class val,
+              CompressionCodec compCodec, Metadata meta,
+              int syncIntervalVal)
-      this.conf = conf;
-      this.out = out;
+      this.conf = config;
+      this.out = outStream;
-      this.keyClass = keyClass;
-      this.valClass = valClass;
-      this.codec = codec;
-      this.metadata = metadata;
-      SerializationFactory serializationFactory = new SerializationFactory(conf);
+      this.keyClass = key;
+      this.valClass = val;
+      this.codec = compCodec;
+      this.metadata = meta;
+      this.syncInterval = syncIntervalVal;
+      SerializationFactory serializationFactory =
+          new SerializationFactory(config);
-          out.getPos() >= lastSyncPos+SYNC_INTERVAL) { // time to emit sync
+          out.getPos() >= lastSyncPos+this.syncInterval) { // time to emit sync

INS26 INS40 INS23 INS55 INS31 UPD66 UPD66 INS78 INS39 INS59 INS83 INS83 INS42 INS43 INS43 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS44 UPD66 INS66 INS34 UPD34 INS42 INS42 INS40 INS42 INS42 INS44 INS8 INS42 INS39 INS42 INS41 INS60 INS21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS39 INS42 INS21 INS39 INS42 INS46 INS14 UPD42 INS43 INS59 INS7 INS7 MOV43 INS16 INS43 INS42 INS42 INS42 INS32 INS22 INS16 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS22 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS52 INS42 INS36 INS42 INS32 INS52 INS42 MOV43 UPD42 INS42 INS34 INS43 INS27 INS42 INS42 INS22 INS42 INS42 INS33 INS52 INS42 DEL42