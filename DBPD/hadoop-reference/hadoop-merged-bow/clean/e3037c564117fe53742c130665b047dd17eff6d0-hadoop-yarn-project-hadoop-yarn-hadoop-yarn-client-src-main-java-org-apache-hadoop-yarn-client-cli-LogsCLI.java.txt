YARN-5523. Yarn running container log fetching causes OutOfMemoryError (Xuan Gong via Varun Saxena)

+import java.io.InputStream;
+import org.apache.commons.io.IOUtils;
-      // fetch all the log files for the container
-      // filter the log files based on the given -log_files pattern
-      List<PerLogFileInfo> allLogFileInfos=
-          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);
-      List<String> fileNames = new ArrayList<String>();
-      for (PerLogFileInfo fileInfo : allLogFileInfos) {
-        fileNames.add(fileInfo.getFileName());
-      }
-      Set<String> matchedFiles = getMatchedLogFiles(request, fileNames,
+      Set<String> matchedFiles = getMatchedContainerLogFiles(request,
+      byte[] buffer = new byte[65536];
+        InputStream is = null;
-          WebResource webResource =
-              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)
-                  + nodeHttpAddress);
-          ClientResponse response =
-              webResource.path("ws").path("v1").path("node")
-                .path("containers").path(containerIdStr).path("logs")
-                .path(logFile)
-                .queryParam("size", Long.toString(request.getBytes()))
-                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
-          out.println(response.getEntity(String.class));
+          ClientResponse response = getResponeFromNMWebService(conf,
+              webServiceClient, request, logFile);
+          if (response != null && response.getStatusInfo().getStatusCode() ==
+              ClientResponse.Status.OK.getStatusCode()) {
+            is = response.getEntityInputStream();
+            int len = 0;
+            while((len = is.read(buffer)) != -1) {
+              out.write(buffer, 0, len);
+            }
+            out.println();
+          } else {
+            out.println("Can not get any logs for the log file: " + logFile);
+            String msg = "Response from the NodeManager:" + nodeId +
+                " WebService is " + ((response == null) ? "null":
+                "not successful," + " HTTP error code: " +
+                response.getStatus() + ", Server response:\n" +
+                response.getEntity(String.class));
+            out.println(msg);
+          }
+        } finally {
+          IOUtils.closeQuietly(is);
+
+  @VisibleForTesting
+  public Set<String> getMatchedContainerLogFiles(ContainerLogsRequest request,
+      boolean useRegex) throws IOException {
+    // fetch all the log files for the container
+    // filter the log files based on the given -log_files pattern
+    List<PerLogFileInfo> allLogFileInfos=
+        getContainerLogFiles(getConf(), request.getContainerId(),
+            request.getNodeHttpAddress());
+    List<String> fileNames = new ArrayList<String>();
+    for (PerLogFileInfo fileInfo : allLogFileInfos) {
+      fileNames.add(fileInfo.getFileName());
+    }
+    return getMatchedLogFiles(request, fileNames,
+        useRegex);
+  }
+
+  @VisibleForTesting
+  public ClientResponse getResponeFromNMWebService(Configuration conf,
+      Client webServiceClient, ContainerLogsRequest request, String logFile) {
+    WebResource webResource =
+        webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)
+        + request.getNodeHttpAddress());
+    return webResource.path("ws").path("v1").path("node")
+        .path("containers").path(request.getContainerId()).path("logs")
+        .path(logFile)
+        .queryParam("size", Long.toString(request.getBytes()))
+        .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS78 INS83 MOV74 INS42 INS44 INS44 INS43 INS8 INS78 INS83 MOV43 INS42 INS44 INS44 INS44 INS44 MOV8 INS42 INS43 INS42 INS39 INS42 INS42 MOV60 MOV60 MOV70 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS42 MOV32 INS42 INS42 INS42 INS42 MOV32 INS60 INS74 INS5 INS59 INS32 INS32 INS43 INS43 INS32 INS39 INS85 INS42 INS3 INS60 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS5 INS34 INS43 INS59 INS8 INS8 INS42 INS42 INS39 INS85 INS42 INS42 INS33 INS60 INS25 MOV60 MOV21 MOV25 MOV21 MOV21 MOV21 INS21 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS42 INS42 INS32 INS27 INS27 INS21 INS60 INS61 INS21 INS21 INS60 INS21 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS7 INS39 INS59 INS27 INS8 INS32 INS32 INS43 INS59 INS32 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS34 INS36 INS38 INS21 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS34 INS32 INS45 INS42 INS45 INS42 INS45 INS36 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS16 INS42 INS42 INS42 INS36 INS45 INS27 INS27 INS27 INS32 INS45 MOV32 INS42 INS33 INS45 INS45 INS42 INS42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21