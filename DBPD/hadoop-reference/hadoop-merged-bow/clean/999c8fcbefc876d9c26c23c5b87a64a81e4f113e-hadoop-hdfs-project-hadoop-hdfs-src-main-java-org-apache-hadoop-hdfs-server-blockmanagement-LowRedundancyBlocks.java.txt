HDFS-10999. Introduce separate stats for Replicated and Erasure Coded Blocks apart from the current Aggregated stats. (Manoj Govindassamy via lei)

+import java.util.concurrent.atomic.LongAdder;
-  private int corruptReplOneBlocks = 0;
+
+  private final LongAdder lowRedundancyBlocks = new LongAdder();
+  private final LongAdder corruptBlocks = new LongAdder();
+  private final LongAdder corruptReplicationOneBlocks = new LongAdder();
+  private final LongAdder lowRedundancyECBlockGroups = new LongAdder();
+  private final LongAdder corruptECBlockGroups = new LongAdder();
-    corruptReplOneBlocks = 0;
+    lowRedundancyBlocks.reset();
+    corruptBlocks.reset();
+    corruptReplicationOneBlocks.reset();
+    lowRedundancyECBlockGroups.reset();
+    corruptECBlockGroups.reset();
-  synchronized int getCorruptReplOneBlockSize() {
-    return corruptReplOneBlocks;
+  long getCorruptReplicationOneBlockSize() {
+    return getCorruptReplicationOneBlocksStat();
+  }
+
+  /**
+   * Return under replicated block count excluding corrupt replicas.
+   */
+  long getLowRedundancyBlocksStat() {
+    return lowRedundancyBlocks.longValue() - getCorruptBlocksStat();
+  }
+
+  long getCorruptBlocksStat() {
+    return corruptBlocks.longValue();
+  }
+
+  long getCorruptReplicationOneBlocksStat() {
+    return corruptReplicationOneBlocks.longValue();
+  }
+
+  /**
+   *  Return low redundancy striped blocks excluding corrupt blocks.
+   */
+  long getLowRedundancyECBlockGroupsStat() {
+    return lowRedundancyECBlockGroups.longValue() -
+        getCorruptECBlockGroupsStat();
+  }
+
+  long getCorruptECBlockGroupsStat() {
+    return corruptECBlockGroups.longValue();
-    if(priorityQueues.get(priLevel).add(block)) {
-      if (priLevel == QUEUE_WITH_CORRUPT_BLOCKS &&
-          expectedReplicas == 1) {
-        corruptReplOneBlocks++;
-      }
+    if(add(block, priLevel, expectedReplicas)) {
+  private boolean add(BlockInfo blockInfo, int priLevel, int expectedReplicas) {
+    if (priorityQueues.get(priLevel).add(blockInfo)) {
+      incrementBlockStat(blockInfo, priLevel, expectedReplicas);
+      return true;
+    }
+    return false;
+  }
+
+  private void incrementBlockStat(BlockInfo blockInfo, int priLevel,
+      int expectedReplicas) {
+    if (blockInfo.isStriped()) {
+      lowRedundancyECBlockGroups.increment();
+      if (priLevel == QUEUE_WITH_CORRUPT_BLOCKS) {
+        corruptECBlockGroups.increment();
+      }
+    } else {
+      lowRedundancyBlocks.increment();
+      if (priLevel == QUEUE_WITH_CORRUPT_BLOCKS) {
+        corruptBlocks.increment();
+        if (expectedReplicas == 1) {
+          corruptReplicationOneBlocks.increment();
+        }
+      }
+    }
+  }
+
-    boolean removedBlock = remove(block, priLevel);
+    boolean removedBlock = remove(block, priLevel, oldExpectedReplicas);
-      corruptReplOneBlocks--;
-      assert corruptReplOneBlocks >= 0 :
+      assert corruptReplicationOneBlocks.longValue() >= 0 :
+    return remove(block, priLevel, block.getReplication());
+  }
+
+  boolean remove(BlockInfo block, int priLevel, int oldExpectedReplicas) {
+      decrementBlockStat(block, priLevel, oldExpectedReplicas);
+          decrementBlockStat(block, priLevel, oldExpectedReplicas);
+  private void decrementBlockStat(BlockInfo blockInfo, int priLevel,
+      int oldExpectedReplicas) {
+    if (blockInfo.isStriped()) {
+      lowRedundancyECBlockGroups.decrement();
+      if (priLevel == QUEUE_WITH_CORRUPT_BLOCKS) {
+        corruptECBlockGroups.decrement();
+      }
+    } else {
+      lowRedundancyBlocks.decrement();
+      if (priLevel == QUEUE_WITH_CORRUPT_BLOCKS) {
+        corruptBlocks.decrement();
+        if (oldExpectedReplicas == 1) {
+          corruptReplicationOneBlocks.decrement();
+          assert corruptReplicationOneBlocks.longValue() >= 0 :
+              "Number of corrupt blocks with replication factor 1 " +
+                  "should be non-negative";
+        }
+      }
+    }
+  }
+
-    remove(block, oldPri);
-    if(priorityQueues.get(curPri).add(block)) {
+    remove(block, oldPri, oldExpectedReplicas);
+    if(add(block, curPri, curExpectedReplicas)) {
-    if (oldPri != curPri || expectedReplicasDelta != 0) {
-      // corruptReplOneBlocks could possibly change
-      if (curPri == QUEUE_WITH_CORRUPT_BLOCKS &&
-          curExpectedReplicas == 1) {
-        // add a new corrupt block with replication factor 1
-        corruptReplOneBlocks++;
-      } else if (oldPri == QUEUE_WITH_CORRUPT_BLOCKS &&
-          curExpectedReplicas - expectedReplicasDelta == 1) {
-        // remove an existing corrupt block with replication factor 1
-        corruptReplOneBlocks--;
-      }
-    }

INS26 MOV31 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV29 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 MOV29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 UPD83 INS39 INS42 INS44 INS44 INS44 INS8 MOV29 INS39 INS42 INS44 INS44 INS8 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS14 INS42 UPD42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS21 INS21 INS21 INS21 INS41 INS65 INS41 INS41 INS41 INS65 INS41 INS41 INS43 INS42 INS39 INS42 INS39 INS42 INS25 INS41 INS43 INS42 INS39 INS42 INS39 INS42 INS25 INS43 INS42 INS39 INS42 INS41 INS39 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS25 INS43 INS43 INS43 INS43 INS43 INS32 INS32 INS32 INS32 INS32 INS32 INS66 INS27 INS32 INS32 INS66 INS27 INS32 INS32 INS42 MOV32 INS8 INS9 INS42 INS32 INS8 INS8 INS42 INS32 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS21 INS41 INS42 INS42 INS21 INS25 INS21 INS25 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS21 INS25 INS21 INS25 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS32 INS27 INS8 INS32 MOV27 INS8 INS42 INS42 INS42 INS32 INS32 INS27 INS8 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS21 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS21 INS25 INS32 INS32 MOV27 INS8 INS42 INS42 INS32 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS34 INS21 INS6 INS32 INS32 INS32 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS45 INS45 INS42 INS42 DEL39 DEL34 DEL42 DEL34 DEL7 DEL27 DEL42 DEL37 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL41 DEL8 DEL42 DEL37 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL42 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL37 DEL21 DEL8 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL34 DEL27 DEL27 DEL42 DEL37 DEL21 DEL8 DEL25 DEL25 DEL8 DEL25