Merge trunk into HA branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1210547 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
-    this.status = cluster.getClient().getJobStatus(status.getJobID());
+    this.status = ugi.doAs(new PrivilegedExceptionAction<JobStatus>() {
+      @Override
+      public JobStatus run() throws IOException, InterruptedException {
+        return cluster.getClient().getJobStatus(status.getJobID());
+      }
+    });
+  
+  @Private
+  public Cluster getCluster() {
+    return cluster;
+  }
-    for (TaskCompletionEvent event : cluster.getClient().getTaskCompletionEvents(
-        status.getJobID(), 0, 10)) {
+    TaskCompletionEvent[] events = ugi.doAs(new 
+        PrivilegedExceptionAction<TaskCompletionEvent[]>() {
+          @Override
+          public TaskCompletionEvent[] run() throws IOException,
+          InterruptedException {
+            return cluster.getClient().getTaskCompletionEvents(
+                status.getJobID(), 0, 10);
+          }
+        });
+    for (TaskCompletionEvent event : events) {
-    return cluster.getClient().getTaskReports(getJobID(), type);
+    final TaskType tmpType = type;
+    return ugi.doAs(new PrivilegedExceptionAction<TaskReport[]>() {
+      public TaskReport[] run() throws IOException, InterruptedException {
+        return cluster.getClient().getTaskReports(getJobID(), tmpType);
+      }
+    });
-      cluster.getClient().setJobPriority(getJobID(), priority.toString());
+      final JobPriority tmpPriority = priority;
+      ugi.doAs(new PrivilegedExceptionAction<Object>() {
+        @Override
+        public Object run() throws IOException, InterruptedException {
+          cluster.getClient().setJobPriority(getJobID(), tmpPriority.toString());
+          return null;
+        }
+      });
-  public TaskCompletionEvent[] getTaskCompletionEvents(int startFrom,
-      int numEvents) throws IOException, InterruptedException {
+  public TaskCompletionEvent[] getTaskCompletionEvents(final int startFrom,
+      final int numEvents) throws IOException, InterruptedException {
-    return cluster.getClient().getTaskCompletionEvents(getJobID(),
-      startFrom, numEvents); 
-  }
+    return ugi.doAs(new PrivilegedExceptionAction<TaskCompletionEvent[]>() {
+      @Override
+      public TaskCompletionEvent[] run() throws IOException, InterruptedException {
+        return cluster.getClient().getTaskCompletionEvents(getJobID(),
+            startFrom, numEvents); 
+      }
+    });
+    }
-  public boolean killTask(TaskAttemptID taskId) 
+  public boolean killTask(final TaskAttemptID taskId) 
-    return cluster.getClient().killTask(taskId, false);
+    return ugi.doAs(new PrivilegedExceptionAction<Boolean>() {
+      public Boolean run() throws IOException, InterruptedException {
+        return cluster.getClient().killTask(taskId, false);
+      }
+    });
-  public boolean failTask(TaskAttemptID taskId) 
+  public boolean failTask(final TaskAttemptID taskId) 
-    return cluster.getClient().killTask(taskId, true);
+    return ugi.doAs(new PrivilegedExceptionAction<Boolean>() {
+      @Override
+      public Boolean run() throws IOException, InterruptedException {
+        return cluster.getClient().killTask(taskId, true);
+      }
+    });
-    return cluster.getClient().getJobCounters(getJobID());
+    return ugi.doAs(new PrivilegedExceptionAction<Counters>() {
+      @Override
+      public Counters run() throws IOException, InterruptedException {
+        return cluster.getClient().getJobCounters(getJobID());
+      }
+    });
-  public String[] getTaskDiagnostics(TaskAttemptID taskid) 
+  public String[] getTaskDiagnostics(final TaskAttemptID taskid) 
-    return cluster.getClient().getTaskDiagnostics(taskid);
+    return ugi.doAs(new PrivilegedExceptionAction<String[]>() {
+      @Override
+      public String[] run() throws IOException, InterruptedException {
+        return cluster.getClient().getTaskDiagnostics(taskid);
+      }
+    });

INS26 INS40 INS31 INS78 INS83 INS43 INS42 INS8 INS8 INS8 INS44 INS8 INS8 INS8 MOV44 INS8 INS42 INS42 INS41 INS60 MOV21 INS60 INS41 INS83 INS83 MOV21 INS41 INS83 MOV43 INS42 MOV21 INS41 INS83 MOV21 INS41 MOV21 INS41 INS83 UPD42 MOV21 INS41 INS42 INS5 INS59 INS42 INS83 INS43 INS59 INS32 INS8 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 MOV21 INS60 INS21 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS74 INS1 INS83 INS43 INS59 INS32 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS43 INS5 INS31 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS5 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS5 INS31 INS43 INS43 INS31 INS43 INS5 INS31 INS42 INS43 INS85 INS83 INS5 INS42 INS43 INS43 MOV8 INS74 INS1 INS42 INS43 INS85 INS78 INS83 INS5 INS42 INS43 INS43 MOV8 INS42 INS42 INS83 INS43 INS42 INS43 INS43 MOV8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 MOV8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 MOV8 UPD42 MOV42 INS43 INS85 INS78 INS83 INS5 INS42 INS43 INS43 MOV8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS43 INS85 INS78 INS83 INS5 INS42 INS43 INS43 INS8 INS42 INS43 INS85 INS42 INS42 INS43 INS43 INS31 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS43 INS85 INS42 INS42 INS41 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 MOV8 INS42 INS42 MOV32 INS42 MOV32 UPD42 INS42 INS42 INS42 INS42 INS41 INS33 UPD42 DEL42 DEL44