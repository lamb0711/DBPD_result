HADOOP-9387. Fix DF so that it won't execute a shell command on Windows to compute the file system/mount point.  Contributed by Ivan Mitic


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1459642 13f79535-47bb-0310-9956-ffa450edef68

-  enum OSType {
-    OS_TYPE_UNIX("UNIX"),
-    OS_TYPE_WIN("Windows"),
-    OS_TYPE_SOLARIS("SunOS"),
-    OS_TYPE_MAC("Mac"),
-    OS_TYPE_AIX("AIX");
-
-    private String id;
-    OSType(String id) {
-      this.id = id;
-    }
-    public boolean match(String osStr) {
-      return osStr != null && osStr.indexOf(id) >= 0;
-    }
-    String getId() {
-      return id;
-    }
-  }
-
-  private static final String OS_NAME = System.getProperty("os.name");
-  private static final OSType OS_TYPE = getOSType(OS_NAME);
-
-  protected static OSType getOSType(String osName) {
-    for (OSType ost : EnumSet.allOf(OSType.class)) {
-      if (ost.match(osName)) {
-        return ost;
-      }
-    }
-    return OSType.OS_TYPE_UNIX;
-  }
-
-  protected OSType getOSType() {
-    return OS_TYPE;
-  }
-  
-    run();
-    return filesystem;
+    if (Shell.WINDOWS) {
+      this.filesystem = dirFile.getCanonicalPath().substring(0, 2);
+      return this.filesystem;
+    } else {
+      run();
+      return filesystem;
+    }
-    run();
-    // Skip parsing if df was not successful
-    if (getExitCode() != 0) {
-      StringBuffer sb = new StringBuffer("df could not be run successfully: ");
-      for (String line: output) {
-        sb.append(line);
+
+    if (Shell.WINDOWS) {
+      // Assume a drive letter for a mount point
+      this.mount = dirFile.getCanonicalPath().substring(0, 2);
+    } else {
+      run();
+      // Skip parsing if df was not successful
+      if (getExitCode() != 0) {
+        StringBuffer sb = new StringBuffer("df could not be run successfully: ");
+        for (String line: output) {
+          sb.append(line);
+        }
+        throw new IOException(sb.toString());
-      throw new IOException(sb.toString());
+      parseOutput();
-    parseOutput();
+
-  protected void run() throws IOException {
-    if (WINDOWS) {
-      try {
-        this.mount = dirFile.getCanonicalPath().substring(0,2);
-      } catch (IOException e) {
-      }
-      return;
-    }
-    super.run();
-  }
-
-  @Override
-    return (WINDOWS)? new String[]{"cmd", "/c", "df -k " + dirPath + " 2>nul"}:
-        new String[] {"bash","-c","exec 'df' '-k' '-P' '" + dirPath 
+    if (Shell.WINDOWS){
+      throw new AssertionError(
+          "DF.getExecString() should never be called on Windows");
+    } else {
+      return new String[] {"bash","-c","exec 'df' '-k' '-P' '" + dirPath 
+    }

INS8 INS8 INS25 INS25 INS25 INS40 INS8 MOV8 INS40 MOV8 INS8 INS40 INS8 MOV8 INS21 INS41 MOV21 MOV25 MOV21 INS53 INS7 INS22 INS14 MOV3 INS22 INS32 INS52 INS42 INS43 INS45 INS52 INS42 INS32 INS42 INS34 INS34 INS42 INS42 INS42 DEL42 DEL42 DEL45 DEL72 DEL42 DEL45 DEL72 DEL42 DEL45 DEL72 DEL42 DEL45 DEL72 DEL42 DEL45 DEL72 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL71 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL41 DEL8 DEL25 DEL8 DEL70 DEL40 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL41 DEL8 DEL25 DEL42 DEL48 DEL21 DEL8 DEL31 DEL42 DEL36 DEL42 DEL43 DEL85 DEL5 DEL45 DEL45 DEL45 DEL42 DEL45 DEL27 DEL4 DEL3 DEL16