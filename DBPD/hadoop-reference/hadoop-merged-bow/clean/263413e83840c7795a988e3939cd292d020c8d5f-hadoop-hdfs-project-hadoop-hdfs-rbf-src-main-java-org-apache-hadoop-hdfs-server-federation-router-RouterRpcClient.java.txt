HDFS-15112. RBF: Do not return FileNotFoundException when a subcluster is unavailable.

+import java.io.EOFException;
-        } else if (ioe instanceof ConnectException ||
-            ioe instanceof ConnectTimeoutException) {
+        } else if (isUnavailableException(ioe)) {
-      } else if (ioe instanceof ConnectException ||
-          ioe instanceof ConnectTimeoutException) {
+      } else if (isUnavailableException(ioe)) {
-          } else if (ioe instanceof ConnectException ||
-              ioe instanceof ConnectTimeoutException) {
+          } else if (isUnavailableException(ioe)) {
+   * Check if the exception comes from an unavailable subcluster.
+   * @param ioe IOException to check.
+   * @return If the exception comes from an unavailable subcluster.
+   */
+  public static boolean isUnavailableException(IOException ioe) {
+    if (ioe instanceof ConnectException ||
+        ioe instanceof ConnectTimeoutException ||
+        ioe instanceof EOFException ||
+        ioe instanceof StandbyException) {
+      return true;
+    }
+    if (ioe instanceof RetriableException) {
+      Throwable cause = ioe.getCause();
+      if (cause instanceof NoNamenodesAvailableException) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
-    IOException firstThrownException = null;
-    IOException lastThrownException = null;
+    List<IOException> thrownExceptions = new ArrayList<>();
-        lastThrownException =  ioe;
-        if (firstThrownException == null) {
-          firstThrownException = lastThrownException;
-        }
+        thrownExceptions.add(ioe);
-        lastThrownException = new IOException(
+        IOException ioe = new IOException(
-        if (firstThrownException == null) {
-          firstThrownException = lastThrownException;
-        }
+        thrownExceptions.add(ioe);
-    if (firstThrownException != null) {
-      // re-throw the last exception thrown for compatibility
-      throw firstThrownException;
+    if (!thrownExceptions.isEmpty()) {
+      // An unavailable subcluster may be the actual cause
+      // We cannot surface other exceptions (e.g., FileNotFoundException)
+      for (int i = 0; i < thrownExceptions.size(); i++) {
+        IOException ioe = thrownExceptions.get(i);
+        if (isUnavailableException(ioe)) {
+          throw ioe;
+        }
+      }
+
+      // re-throw the first exception thrown for compatibility
+      throw thrownExceptions.get(0);
-    // Return the last result, whether it is the value we are looking for or a
+    // Return the first result, whether it is the value or not

INS26 INS40 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS43 INS42 INS25 INS25 INS41 INS25 INS66 INS42 INS66 INS66 INS42 MOV27 INS8 INS62 INS8 INS9 INS74 INS38 INS8 INS62 INS62 INS41 INS42 INS43 INS60 INS25 INS43 INS43 UPD42 INS14 INS32 INS24 INS53 INS42 INS43 INS42 INS43 INS9 INS42 INS43 INS59 INS62 INS8 INS42 INS42 INS74 INS42 INS42 INS58 INS27 INS37 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS41 INS43 INS39 INS59 INS42 INS32 INS42 MOV60 MOV25 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS60 INS21 INS42 INS34 INS42 INS42 MOV43 INS32 INS32 MOV43 INS59 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL33 DEL42 DEL42 DEL7 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL42 DEL33 DEL27