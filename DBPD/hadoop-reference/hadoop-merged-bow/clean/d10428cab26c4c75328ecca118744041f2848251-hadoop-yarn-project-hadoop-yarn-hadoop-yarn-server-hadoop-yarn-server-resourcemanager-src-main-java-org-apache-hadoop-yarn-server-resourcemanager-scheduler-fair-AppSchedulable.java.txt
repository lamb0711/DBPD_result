YARN-289. Fair scheduler allows reservations that won't fit on node. Contributed by Sandy Ryza.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1475681 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.server.resourcemanager.resource.DefaultResourceCalculator;
+  private static final DefaultResourceCalculator RESOURCE_CALCULATOR
+    = new DefaultResourceCalculator();
+  
-  private void reserve(FSSchedulerApp application, Priority priority,
-      FSSchedulerNode node, Container container, boolean alreadyReserved) {
+  private void reserve(Priority priority, FSSchedulerNode node,
+      Container container, boolean alreadyReserved) {
-      getMetrics().reserveResource(application.getUser(), container.getResource());
-      RMContainer rmContainer = application.reserve(node, priority, null,
+      getMetrics().reserveResource(app.getUser(), container.getResource());
+      RMContainer rmContainer = app.reserve(node, priority, null,
-      node.reserveResource(application, priority, rmContainer);
+      node.reserveResource(app, priority, rmContainer);
-      application.reserve(node, priority, rmContainer, container);
-      node.reserveResource(application, priority, rmContainer);
+      app.reserve(node, priority, rmContainer, container);
+      node.reserveResource(app, priority, rmContainer);
-   * Remove the reservation on {@code node} for {@ application} at the given
+   * Remove the reservation on {@code node} at the given
-  private void unreserve(FSSchedulerApp application, Priority priority,
-      FSSchedulerNode node) {
+  public void unreserve(Priority priority, FSSchedulerNode node) {
-    application.unreserve(node, priority);
-    node.unreserveResource(application);
+    app.unreserve(node, priority);
+    node.unreserveResource(app);
-        application.getUser(), rmContainer.getContainer().getResource());
+        app.getUser(), rmContainer.getContainer().getResource());
-        application.getUser(), rmContainer.getContainer().getResource());
+        app.getUser(), rmContainer.getContainer().getResource());
-      FSSchedulerApp application, Priority priority,
-      ResourceRequest request, NodeType type, boolean reserved) {
+      Priority priority, ResourceRequest request, NodeType type,
+      boolean reserved) {
-      container = createContainer(application, node, capability, priority);
+      container = createContainer(app, node, capability, priority);
-          application.allocate(type, node, priority, request, container);
+          app.allocate(type, node, priority, request, container);
+        if (reserved) {
+          unreserve(priority, node);
+        }
-        unreserve(application, priority, node);
+        unreserve(priority, node);
-      node.allocateContainer(application.getApplicationId(),
+      node.allocateContainer(app.getApplicationId(),
-      reserve(application, priority, node, container, reserved);
+      reserve(priority, node, container, reserved);
-        unreserve(app, priority, node);
+        unreserve(priority, node);
-        if (app.getTotalRequiredResources(priority) <= 0) {
+        if (app.getTotalRequiredResources(priority) <= 0 ||
+            !hasContainerForNode(priority, node)) {
-          return assignContainer(node, app, priority,
+          return assignContainer(node, priority,
-          return assignContainer(node, app, priority, rackLocalRequest,
+          return assignContainer(node, priority, rackLocalRequest,
-          return assignContainer(node, app, priority, offSwitchRequest,
+          return assignContainer(node, priority, offSwitchRequest,
+  
+  /**
+   * Whether this app has containers requests that could be satisfied on the
+   * given node, if the node had full space.
+   */
+  public boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {
+    // TODO: add checks stuff about node specific scheduling here
+    ResourceRequest request = app.getResourceRequest(prio, ResourceRequest.ANY);
+    return request.getNumContainers() > 0 && 
+        Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,
+            request.getCapability(), node.getRMNode().getTotalCapability());
+  }

INS26 INS40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 UPD83 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS14 INS65 INS43 INS42 INS43 INS42 INS60 INS41 INS43 INS66 INS66 INS42 INS42 INS43 INS59 INS27 INS42 UPD42 UPD42 INS42 INS42 INS32 INS27 INS32 UPD42 UPD42 INS42 INS42 INS42 INS40 INS32 INS34 INS42 INS42 INS42 INS33 INS32 INS32 UPD42 UPD42 UPD42 INS25 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS8 UPD42 INS27 INS42 INS42 INS21 MOV27 INS38 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL44 DEL66 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42