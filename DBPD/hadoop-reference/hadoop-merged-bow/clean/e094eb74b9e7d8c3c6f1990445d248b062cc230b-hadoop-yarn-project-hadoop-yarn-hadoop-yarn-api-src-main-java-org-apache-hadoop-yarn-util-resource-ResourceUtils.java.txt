YARN-6953. Clean up ResourceUtils.setMinimumAllocationForMandatoryResources() and setMaximumAllocationForMandatoryResources()
(Contributed by Manikandan R via Daniel Templeton)

-  private static void setMinimumAllocationForMandatoryResources(
+  private static void setAllocationForMandatoryResources(
-    String[][] resourceTypesKeys = {
-        {ResourceInformation.MEMORY_MB.getName(),
-            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,
-            String.valueOf(
-                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),
-            ResourceInformation.MEMORY_MB.getName()},
-        {ResourceInformation.VCORES.getName(),
-            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,
-            String.valueOf(
-                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),
-            ResourceInformation.VCORES.getName()}};
-    for (String[] arr : resourceTypesKeys) {
-      String resourceTypesKey =
-          YarnConfiguration.RESOURCE_TYPES + "." + arr[0] + MINIMUM_ALLOCATION;
-      long minimumResourceTypes = conf.getLong(resourceTypesKey, -1);
-      long minimumConf = conf.getLong(arr[1], -1);
-      long minimum;
-      if (minimumResourceTypes != -1) {
-        minimum = minimumResourceTypes;
-        if (minimumConf != -1) {
-          LOG.warn("Using minimum allocation for memory specified in "
-              + "resource-types config file with key "
-              + minimumResourceTypes + ", ignoring minimum specified using "
-              + arr[1]);
-        }
-      } else {
-        minimum = conf.getLong(arr[1], Long.parseLong(arr[2]));
-      }
-      ResourceInformation ri = res.get(arr[3]);
-      ri.setMinimumAllocation(minimum);
-    }
+    ResourceInformation mem = res.get(ResourceInformation.MEMORY_MB.getName());
+    mem.setMinimumAllocation(getAllocation(conf,
+        YarnConfiguration.RESOURCE_TYPES + "." +
+            mem.getName() + MINIMUM_ALLOCATION,
+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,
+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));
+    mem.setMaximumAllocation(getAllocation(conf,
+        YarnConfiguration.RESOURCE_TYPES + "." +
+            mem.getName() + MAXIMUM_ALLOCATION,
+        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,
+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));
+
+    ResourceInformation cpu = res.get(ResourceInformation.VCORES.getName());
+
+    cpu.setMinimumAllocation(getAllocation(conf,
+        YarnConfiguration.RESOURCE_TYPES + "." +
+            cpu.getName() + MINIMUM_ALLOCATION,
+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,
+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES));
+    cpu.setMaximumAllocation(getAllocation(conf,
+        YarnConfiguration.RESOURCE_TYPES + "." +
+        cpu.getName() + MAXIMUM_ALLOCATION,
+        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,
+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES));
-  private static void setMaximumAllocationForMandatoryResources(
-      Map<String, ResourceInformation> res, Configuration conf) {
-    String[][] resourceTypesKeys = {
-        {ResourceInformation.MEMORY_MB.getName(),
-            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,
-            String.valueOf(
-                YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB),
-            ResourceInformation.MEMORY_MB.getName()},
-        {ResourceInformation.VCORES.getName(),
-            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,
-            String.valueOf(
-                YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES),
-            ResourceInformation.VCORES.getName()}};
-    for (String[] arr : resourceTypesKeys) {
-      String resourceTypesKey =
-          YarnConfiguration.RESOURCE_TYPES + "." + arr[0] + MAXIMUM_ALLOCATION;
-      long maximumResourceTypes = conf.getLong(resourceTypesKey, -1);
-      long maximumConf = conf.getLong(arr[1], -1);
-      long maximum;
-      if (maximumResourceTypes != -1) {
-        maximum = maximumResourceTypes;
-        if (maximumConf != -1) {
-          LOG.warn("Using maximum allocation for memory specified in "
-              + "resource-types config file with key "
-              + maximumResourceTypes + ", ignoring maximum specified using "
-              + arr[1]);
-        }
-      } else {
-        maximum = conf.getLong(arr[1], Long.parseLong(arr[2]));
-      }
-      ResourceInformation ri = res.get(arr[3]);
-      ri.setMaximumAllocation(maximum);
+  private static long getAllocation(Configuration conf,
+      String resourceTypesKey, String schedulerKey, long schedulerDefault) {
+    long value = conf.getLong(resourceTypesKey, -1L);
+    if (value == -1) {
+      LOG.debug("Mandatory Resource '" + resourceTypesKey + "' is not "
+          + "configured in resource-types config file. Setting allocation "
+          + "specified using '" + schedulerKey + "'");
+      value = conf.getLong(schedulerKey, schedulerDefault);
+    return value;
-    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);
-    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);
+    setAllocationForMandatoryResources(resourceInformationMap, conf);
-          setMinimumAllocationForMandatoryResources(nodeResources, conf);
-          setMaximumAllocationForMandatoryResources(nodeResources, conf);
+          setAllocationForMandatoryResources(nodeResources, conf);

INS31 INS31 MOV83 MOV83 MOV39 UPD42 MOV42 MOV44 MOV44 INS8 INS83 INS83 INS39 INS42 MOV44 INS44 INS44 INS44 INS8 MOV60 INS21 INS21 MOV60 INS21 INS21 MOV43 INS42 MOV43 INS42 INS39 INS42 MOV60 MOV25 INS41 MOV43 INS32 INS32 INS32 INS32 UPD27 MOV27 INS8 INS42 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 INS42 INS32 UPD42 UPD42 MOV21 MOV21 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS27 INS40 INS40 UPD42 MOV42 UPD42 MOV42 MOV27 INS40 INS40 MOV32 INS42 UPD42 MOV42 INS27 INS40 UPD40 MOV40 INS42 INS42 INS27 INS40 INS40 INS42 MOV40 MOV45 INS32 MOV42 INS40 UPD45 MOV45 INS32 INS42 INS40 INS45 INS32 INS42 MOV40 MOV45 INS32 MOV42 UPD34 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 UPD45 MOV45 UPD42 INS45 INS45 UPD45 INS42 INS45 INS42 UPD42 MOV42 UPD42 DEL42 DEL43 DEL85 DEL85 DEL5 DEL40 DEL42 DEL32 DEL40 DEL40 DEL32 DEL4 DEL40 DEL42 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL4 DEL4 DEL45 DEL27 DEL42 DEL45 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL45 DEL27 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL42 DEL34 DEL2 DEL32 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL34 DEL38 DEL27 DEL8 DEL25 DEL8 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL42 DEL34 DEL2 DEL27 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL34 DEL38 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL34 DEL38 DEL32 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL7 DEL21 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL85 DEL85 DEL5 DEL42 DEL40 DEL42 DEL32 DEL40 DEL42 DEL40 DEL32 DEL40 DEL32 DEL4 DEL40 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL40 DEL32 DEL4 DEL4 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL34 DEL2 DEL27 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL34 DEL38 DEL32 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21