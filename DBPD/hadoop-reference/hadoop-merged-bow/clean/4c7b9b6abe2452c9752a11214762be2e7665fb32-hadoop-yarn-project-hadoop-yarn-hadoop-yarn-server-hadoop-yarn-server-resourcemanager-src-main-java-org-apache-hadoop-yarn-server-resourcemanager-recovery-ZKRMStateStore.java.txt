YARN-3385. Fixed a race-condition in ResourceManager's ZooKeeper based state-store to avoid crashing on duplicate deletes. Contributed by Zhihai Xu.

-    doMultiWithRetries(opList);
+    doDeleteMultiWithRetries(opList);
-    doMultiWithRetries(opList);
+    doStoreMultiWithRetries(opList);
-    ArrayList<Op> opList = new ArrayList<Op>();
+      ArrayList<Op> opList = new ArrayList<Op>();
+      doDeleteMultiWithRetries(opList);
-    doMultiWithRetries(opList);
-    doMultiWithRetries(opList);
+    doStoreMultiWithRetries(opList);
-      doMultiWithRetries(Op.delete(nodeRemovePath, -1));
+      doDeleteMultiWithRetries(Op.delete(nodeRemovePath, -1));
-  private synchronized void doMultiWithRetries(
+  private synchronized void doStoreMultiWithRetries(
-  private void doMultiWithRetries(final Op op) throws Exception {
-    doMultiWithRetries(Collections.singletonList(op));
+  private void doStoreMultiWithRetries(final Op op) throws Exception {
+    doStoreMultiWithRetries(Collections.singletonList(op));
+  }
+
+  /**
+   * Helper method that creates fencing node, executes the passed
+   * delete related operations and deletes the fencing node.
+   */
+  private synchronized void doDeleteMultiWithRetries(
+      final List<Op> opList) throws Exception {
+    final List<Op> execOpList = new ArrayList<Op>(opList.size() + 2);
+    execOpList.add(createFencingNodePathOp);
+    execOpList.addAll(opList);
+    execOpList.add(deleteFencingNodePathOp);
+    new ZKAction<Void>() {
+      @Override
+      public Void run() throws KeeperException, InterruptedException {
+        setHasDeleteNodeOp(true);
+        zkClient.multi(execOpList);
+        return null;
+      }
+    }.runWithRetries();
+  }
+
+  private void doDeleteMultiWithRetries(final Op op) throws Exception {
+    doDeleteMultiWithRetries(Collections.singletonList(op));
-    doMultiWithRetries(Op.create(path, data, acl, mode));
+    doStoreMultiWithRetries(Op.create(path, data, acl, mode));
-    doMultiWithRetries(Op.setData(path, data, version));
+    doStoreMultiWithRetries(Op.setData(path, data, version));
-    zkClient.delete(path, -1);
+
+    try {
+      zkClient.delete(path, -1);
+    } catch (KeeperException.NoNodeException nne) {
+      LOG.info("Node " + path + " doesn't exist to delete");
+    }
-          doMultiWithRetries(emptyOpList);
+          doStoreMultiWithRetries(emptyOpList);
+    private boolean hasDeleteNodeOp = false;
+    void setHasDeleteNodeOp(boolean hasDeleteOp) {
+      this.hasDeleteNodeOp = hasDeleteOp;
+    }
+          if (hasDeleteNodeOp && ke.code() == Code.NONODE) {
+            LOG.info("znode has already been deleted!");
+            return null;
+          }
+

INS31 INS31 UPD42 UPD42 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS23 INS31 INS65 INS83 INS74 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS83 INS43 INS42 INS42 INS21 INS54 INS83 INS39 INS59 INS39 INS42 INS44 INS8 INS66 INS66 INS43 INS43 INS83 INS74 INS59 INS32 INS32 INS32 INS32 INS42 INS32 INS8 INS12 INS42 INS9 INS39 INS42 INS21 UPD42 UPD42 MOV60 INS21 UPD42 UPD42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 UPD42 UPD42 MOV21 INS44 INS8 INS7 INS32 INS42 INS42 INS74 INS27 INS74 INS1 INS42 INS42 INS42 INS43 INS42 INS21 INS22 INS42 INS42 INS42 UPD42 INS43 INS43 INS32 INS34 INS43 INS43 INS31 INS40 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS21 INS21 INS41 INS45 INS42 INS45 INS25 INS32 INS32 INS33 UPD42 INS27 INS8 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS21 INS41 INS32 INS40 INS32 INS33 INS42 INS42 INS42 INS42 INS45 DEL42 DEL42 DEL32 DEL21