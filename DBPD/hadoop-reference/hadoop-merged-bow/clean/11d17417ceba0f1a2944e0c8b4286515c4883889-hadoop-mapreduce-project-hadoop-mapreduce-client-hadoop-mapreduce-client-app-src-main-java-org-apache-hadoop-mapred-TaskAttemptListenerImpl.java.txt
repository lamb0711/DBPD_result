MAPREDUCE-7272. TaskAttemptListenerImpl excessive log messages. Contributed by Ahmed Hussein (ahussein)

+import org.apache.hadoop.mapreduce.util.MRJobConfUtil;
+import org.apache.hadoop.util.Time;
+  /**
+   * A Map to keep track of the history of logging each task attempt.
+   */
+  private ConcurrentHashMap<TaskAttemptID, TaskProgressLogPair>
+      taskAttemptLogProgressStamps = new ConcurrentHashMap<>();
+
-   registerHeartbeatHandler(conf);
-   commitWindowMs = conf.getLong(MRJobConfig.MR_AM_COMMIT_WINDOW_MS,
-       MRJobConfig.DEFAULT_MR_AM_COMMIT_WINDOW_MS);
-   super.serviceInit(conf);
+    registerHeartbeatHandler(conf);
+    commitWindowMs = conf.getLong(MRJobConfig.MR_AM_COMMIT_WINDOW_MS,
+        MRJobConfig.DEFAULT_MR_AM_COMMIT_WINDOW_MS);
+    // initialize the delta threshold for logging the task progress.
+    MRJobConfUtil.setTaskLogProgressDeltaThresholds(conf);
+    super.serviceInit(conf);
-    LOG.info("Progress of TaskAttempt " + taskAttemptID + " is : "
-        + taskStatus.getProgress());
+    // log the new progress
+    taskAttemptLogProgressStamps.computeIfAbsent(taskAttemptID,
+        k -> new TaskProgressLogPair(taskAttemptID))
+        .update(taskStatus.getProgress());
+
+  /**
+   * Entity to keep track of the taskAttempt, last time it was logged,
+   * and the
+   * progress that has been logged.
+   */
+  class TaskProgressLogPair {
+
+    /**
+     * The taskAttemptId of that history record.
+     */
+    private final TaskAttemptID taskAttemptID;
+    /**
+     * Timestamp of last time the progress was logged.
+     */
+    private volatile long logTimeStamp;
+    /**
+     * Snapshot of the last logged progress.
+     */
+    private volatile double prevProgress;
+
+    TaskProgressLogPair(final TaskAttemptID attemptID) {
+      taskAttemptID = attemptID;
+      prevProgress = 0.0;
+      logTimeStamp = 0;
+    }
+
+    private void resetLog(final boolean doLog,
+        final float progress, final double processedProgress,
+        final long timestamp) {
+      if (doLog) {
+        prevProgress = processedProgress;
+        logTimeStamp = timestamp;
+        LOG.info("Progress of TaskAttempt " + taskAttemptID + " is : "
+            + progress);
+      } else {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Progress of TaskAttempt " + taskAttemptID + " is : "
+              + progress);
+        }
+      }
+    }
+
+    public void update(final float progress) {
+      final double processedProgress =
+          MRJobConfUtil.convertTaskProgressToFactor(progress);
+      final double diffProgress = processedProgress - prevProgress;
+      final long currentTime = Time.monotonicNow();
+      boolean result =
+          (Double.compare(diffProgress,
+              MRJobConfUtil.getTaskProgressMinDeltaThreshold()) >= 0);
+      if (!result) {
+        // check if time has expired.
+        result = ((currentTime - logTimeStamp)
+            >= MRJobConfUtil.getTaskProgressWaitDeltaTimeThreshold());
+      }
+      // It is helpful to log the progress when it reaches 1.0F.
+      if (Float.compare(progress, 1.0f) == 0) {
+        result = true;
+        taskAttemptLogProgressStamps.remove(taskAttemptID);
+      }
+      resetLog(result, progress, processedProgress, currentTime);
+    }
+  }

INS26 INS26 INS40 INS40 INS23 INS55 INS29 INS83 INS74 INS59 INS29 INS42 INS23 INS23 INS23 INS31 INS31 INS31 INS65 INS43 INS43 INS43 INS42 INS14 INS21 INS65 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS59 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS66 INS42 INS42 INS42 INS74 INS32 INS32 INS66 INS66 INS66 INS65 INS42 INS42 INS65 INS42 INS65 INS42 INS83 INS43 INS42 INS21 INS21 INS21 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS25 INS83 INS39 INS42 INS60 INS60 INS60 INS60 INS25 INS25 INS21 INS43 INS42 INS42 INS42 INS32 INS42 MOV32 INS66 INS66 INS66 INS42 INS7 INS7 INS7 INS42 INS8 INS8 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS39 INS59 INS38 INS8 INS27 INS8 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS86 INS42 INS42 INS42 INS34 INS42 INS34 INS21 INS21 INS21 INS25 INS42 INS32 INS42 INS27 INS42 INS32 INS42 INS36 INS42 INS21 INS32 INS34 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS59 INS14 INS7 INS7 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS7 INS42 INS42 INS42 INS34 INS7 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS21 INS32 INS34 INS42 INS36 INS42 INS9 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS27 INS42 INS42 INS36 INS32 INS45 INS42 INS45 INS42 INS27 INS42 INS42 INS42 INS42 DEL45 DEL42 DEL45 DEL27 DEL32