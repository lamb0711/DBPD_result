YARN-999. In case of long running tasks, reduce node resource should balloon out resource quickly by calling preemption API and suspending running task. Contributed by Inigo Goiri.

+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.ContainerPreemptEvent;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.SchedulerEventType;
+import org.apache.hadoop.yarn.util.resource.ResourceCalculator;
+  private static final Resource ZERO_RESOURCE = Resource.newInstance(0, 0);
+
+      final int timeout = resourceOption.getOverCommitTimeout();
-        LOG.info("Update resource on node: " + node.getNodeName() + " from: "
-            + oldResource + ", to: " + newResource);
+        LOG.info("Update resource on node: {} from: {}, to: {} in {} ms",
+            node.getNodeName(), oldResource, newResource, timeout);
+        node.setOvercommitTimeOut(timeout);
+        signalContainersIfOvercommitted(node, timeout == 0);
+    if (schedulerNode != null) {
+      signalContainersIfOvercommitted(schedulerNode, true);
+    }
+
+  /**
+   * Check if the node is overcommitted and needs to remove containers. If
+   * it is overcommitted, it will kill or preempt (notify the AM to stop them)
+   * containers. It also takes into account the overcommit timeout. It only
+   * notifies the application to preempt a container if the timeout hasn't
+   * passed. If the timeout has passed, it tries to kill the containers. If
+   * there is no timeout, it doesn't do anything and just prevents new
+   * allocations.
+   *
+   * This action is taken when the change of resources happens (to preempt
+   * containers or killing them if specified) or when the node heart beats
+   * (for killing only).
+   *
+   * @param schedulerNode The node to check whether is overcommitted.
+   * @param kill If the container should be killed or just notify the AM.
+   */
+  private void signalContainersIfOvercommitted(
+      SchedulerNode schedulerNode, boolean kill) {
+
+    // If there is no time out, we don't do anything
+    if (!schedulerNode.isOvercommitTimeOutSet()) {
+      return;
+    }
+
+    SchedulerEventType eventType =
+        SchedulerEventType.MARK_CONTAINER_FOR_PREEMPTION;
+    if (kill) {
+      eventType = SchedulerEventType.MARK_CONTAINER_FOR_KILLABLE;
+
+      // If it hasn't timed out yet, don't kill
+      if (!schedulerNode.isOvercommitTimedOut()) {
+        return;
+      }
+    }
+
+    // Check if the node is overcommitted (negative resources)
+    ResourceCalculator rc = getResourceCalculator();
+    Resource unallocated = Resource.newInstance(
+        schedulerNode.getUnallocatedResource());
+    if (Resources.fitsIn(rc, ZERO_RESOURCE, unallocated)) {
+      return;
+    }
+
+    LOG.info("{} is overcommitted ({}), preempt/kill containers",
+        schedulerNode.getNodeID(), unallocated);
+    for (RMContainer container : schedulerNode.getContainersToKill()) {
+      LOG.info("Send {} to {} to free up {}", eventType,
+          container.getContainerId(), container.getAllocatedResource());
+      ApplicationAttemptId appId = container.getApplicationAttemptId();
+      ContainerPreemptEvent event =
+          new ContainerPreemptEvent(appId, container, eventType);
+      this.rmContext.getDispatcher().getEventHandler().handle(event);
+      Resources.addTo(unallocated, container.getAllocatedResource());
+
+      if (Resources.fitsIn(rc, ZERO_RESOURCE, unallocated)) {
+        LOG.debug("Enough unallocated resources {}", unallocated);
+        break;
+      }
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS32 INS25 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS25 INS60 INS25 INS60 INS60 INS25 INS21 INS70 INS42 INS42 INS34 INS34 INS27 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS38 INS8 INS43 INS59 INS42 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS44 INS32 INS8 INS60 INS42 INS33 INS21 INS32 INS41 INS42 INS42 INS40 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS45 INS32 INS42 INS43 INS42 INS42 INS42 INS21 INS60 INS60 INS21 INS21 INS25 INS83 INS39 INS59 INS32 INS42 INS42 INS7 INS38 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS8 INS42 INS32 INS21 INS21 INS42 INS42 INS9 INS42 INS40 INS32 INS41 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS10 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS45 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS22 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS52 INS42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27