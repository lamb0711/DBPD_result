YARN-6335. Port slider's groovy unit tests to yarn native services. Contributed by Billie Rinaldi

-import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
-import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
-import org.apache.commons.io.output.ByteArrayOutputStream;
-import org.apache.hadoop.fs.FSDataInputStream;
+import org.apache.slider.api.resource.Application;
+import org.apache.slider.api.resource.Component;
-import java.io.ByteArrayInputStream;
+   * Extract the first line of a multi-line string. This is typically used to
+   * prune the stack trace appended to the end of exception messages returned by
+   * YARN in AMRMClientAsync callbacks.
+   *
+   * @param msg
+   *          message string (most likely multi-lines)
+   * @return the first line of a multi-line string or the original string if it
+   *         is a null, empty or single-line
+   */
+  public static String extractFirstLine(String msg) {
+    if (StringUtils.isNotBlank(msg)) {
+      int newlineIndex = msg.indexOf(System.lineSeparator());
+      if (newlineIndex != -1) {
+        msg = msg.substring(0, newlineIndex);
+      }
+    }
+    return msg;
+  }
+
+  /**
-  public static InputStream getApplicationResourceInputStream(FileSystem fs,
-      Path appPath,
-      String entry)
-      throws IOException {
-    InputStream is = null;
-    try(FSDataInputStream appStream = fs.open(appPath)) {
-      ZipArchiveInputStream zis = new ZipArchiveInputStream(appStream);
-      ZipArchiveEntry zipEntry;
-      boolean done = false;
-      while (!done && (zipEntry = zis.getNextZipEntry()) != null) {
-        if (entry.equals(zipEntry.getName())) {
-          int size = (int) zipEntry.getSize();
-          if (size != -1) {
-            log.info("Reading {} of size {}", zipEntry.getName(),
-                zipEntry.getSize());
-            byte[] content = new byte[size];
-            int offset = 0;
-            while (offset < size) {
-              offset += zis.read(content, offset, size - offset);
-            }
-            is = new ByteArrayInputStream(content);
-          } else {
-            log.debug("Size unknown. Reading {}", zipEntry.getName());
-            try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
-              while (true) {
-                int byteRead = zis.read();
-                if (byteRead == -1) {
-                  break;
-                }
-                baos.write(byteRead);
-              }
-              is = new ByteArrayInputStream(baos.toByteArray());
-            }
-          }
-          done = true;
-        }
-      }
-    }
-
-    return is;
-  }
-
+
+  public static final String DAYS = ".days";
+  public static final String HOURS = ".hours";
+  public static final String MINUTES = ".minutes";
+  public static final String SECONDS = ".seconds";
+
+  /**
+   * Get the time range of a set of keys.
+   * @param conf configuration to read properties from
+   * @param basekey base key to which suffix gets applied
+   * @param defDays
+   * @param defHours
+   * @param defMins
+   * @param defSecs
+   * @return the aggregate time range in seconds
+   */
+  public static long getTimeRange(org.apache.slider.api.resource
+      .Configuration conf,
+      String basekey,
+      long defDays,
+      long defHours,
+      long defMins,
+      long defSecs) {
+    Preconditions.checkArgument(basekey != null);
+    long days = conf.getPropertyLong(basekey + DAYS, defDays);
+    long hours = conf.getPropertyLong(basekey + HOURS, defHours);
+
+    long minutes = conf.getPropertyLong(basekey + MINUTES, defMins);
+    long seconds = conf.getPropertyLong(basekey + SECONDS, defSecs);
+    // range check
+    Preconditions.checkState(days >= 0 && hours >= 0 && minutes >= 0
+            && seconds >= 0,
+        "Time range for %s has negative time component %s:%s:%s:%s",
+        basekey, days, hours, minutes, seconds);
+
+    // calculate total time, schedule the reset if expected
+    long totalMinutes = days * 24 * 60 + hours * 24 + minutes;
+    return totalMinutes * 60 + seconds;
+  }
+
+  public static void resolve(Application application) {
+    org.apache.slider.api.resource.Configuration global = application
+        .getConfiguration();
+    for (Component component : application.getComponents()) {
+      mergeMapsIgnoreDuplicateKeys(component.getConfiguration().getProperties(),
+          global.getProperties());
+    }
+    // TODO merge other information to components
+  }

MOV26 MOV26 UPD40 UPD40 INS31 INS23 INS23 INS23 INS23 INS31 INS31 INS29 MOV83 MOV83 UPD43 MOV43 UPD42 MOV42 MOV44 INS8 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS42 INS44 MOV44 INS44 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 UPD42 UPD43 UPD42 INS25 INS41 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS45 INS42 UPD42 MOV42 INS45 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 UPD42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS60 MOV60 INS60 INS60 INS21 MOV60 INS41 INS43 INS42 INS60 INS70 INS66 INS66 INS66 INS42 INS66 INS66 INS66 UPD42 INS32 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS66 INS40 INS32 INS39 INS59 INS39 UPD39 MOV39 INS59 INS39 INS59 INS32 UPD39 INS27 INS42 INS43 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS60 INS25 UPD42 MOV42 INS42 INS27 INS42 INS32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS32 INS42 INS42 INS27 UPD45 MOV45 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS27 INS27 INS42 INS40 INS42 INS32 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS21 INS39 INS59 MOV27 INS8 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 UPD42 MOV42 UPD42 MOV42 UPD27 MOV27 INS42 INS27 INS27 INS27 INS42 UPD42 MOV42 INS34 INS42 INS42 UPD42 MOV42 INS32 INS42 INS32 UPD42 INS21 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS27 INS27 INS42 INS34 INS27 INS27 INS42 INS32 INS32 INS42 INS42 INS32 INS7 INS27 INS27 INS42 INS34 INS42 INS34 INS34 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS34 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS34 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL58 DEL43 DEL43 DEL42 DEL14 DEL59 DEL60 DEL43 DEL59 DEL60 DEL39 DEL9 DEL59 DEL60 DEL42 DEL38 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL39 DEL42 DEL39 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL34 DEL59 DEL60 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL58 DEL9 DEL34 DEL38 DEL27 DEL10 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL32 DEL14 DEL7 DEL21 DEL8 DEL54 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL54 DEL42 DEL41 DEL8 DEL31 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL42 DEL42 DEL32