HDFS-14034. Support getQuotaUsage API in WebHDFS. Contributed by Chao Sun.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

+import org.apache.hadoop.fs.QuotaUsage;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+import java.util.TreeMap;
-    json.put(HttpFSFileSystem.CONTENT_SUMMARY_DIRECTORY_COUNT_JSON, contentSummary.getDirectoryCount());
-    json.put(HttpFSFileSystem.CONTENT_SUMMARY_FILE_COUNT_JSON, contentSummary.getFileCount());
-    json.put(HttpFSFileSystem.CONTENT_SUMMARY_LENGTH_JSON, contentSummary.getLength());
-    json.put(HttpFSFileSystem.CONTENT_SUMMARY_QUOTA_JSON, contentSummary.getQuota());
-    json.put(HttpFSFileSystem.CONTENT_SUMMARY_SPACE_CONSUMED_JSON, contentSummary.getSpaceConsumed());
-    json.put(HttpFSFileSystem.CONTENT_SUMMARY_SPACE_QUOTA_JSON, contentSummary.getSpaceQuota());
+    json.put(HttpFSFileSystem.CONTENT_SUMMARY_DIRECTORY_COUNT_JSON,
+        contentSummary.getDirectoryCount());
+    json.put(HttpFSFileSystem.CONTENT_SUMMARY_FILE_COUNT_JSON,
+        contentSummary.getFileCount());
+    json.put(HttpFSFileSystem.CONTENT_SUMMARY_LENGTH_JSON,
+        contentSummary.getLength());
+    Map<String, Object> quotaUsageMap = quotaUsageToMap(contentSummary);
+    for (Map.Entry<String, Object> e : quotaUsageMap.entrySet()) {
+      // For ContentSummary we don't need this since we already have
+      // separate count for file and directory.
+      if (!e.getKey().equals(
+          HttpFSFileSystem.QUOTA_USAGE_FILE_AND_DIRECTORY_COUNT_JSON)) {
+        json.put(e.getKey(), e.getValue());
+      }
+    }
+   * Converts a <code>QuotaUsage</code> object into a JSON array
+   * object.
+   */
+  @SuppressWarnings({"unchecked"})
+  private static Map quotaUsageToJSON(QuotaUsage quotaUsage) {
+    Map response = new LinkedHashMap();
+    Map quotaUsageMap = quotaUsageToMap(quotaUsage);
+    response.put(HttpFSFileSystem.QUOTA_USAGE_JSON, quotaUsageMap);
+    return response;
+  }
+
+  private static Map<String, Object> quotaUsageToMap(QuotaUsage quotaUsage) {
+    Map<String, Object> result = new LinkedHashMap<>();
+    result.put(HttpFSFileSystem.QUOTA_USAGE_FILE_AND_DIRECTORY_COUNT_JSON,
+        quotaUsage.getFileAndDirectoryCount());
+    result.put(HttpFSFileSystem.QUOTA_USAGE_QUOTA_JSON, quotaUsage.getQuota());
+    result.put(HttpFSFileSystem.QUOTA_USAGE_SPACE_CONSUMED_JSON,
+        quotaUsage.getSpaceConsumed());
+    result.put(HttpFSFileSystem.QUOTA_USAGE_SPACE_QUOTA_JSON,
+        quotaUsage.getSpaceQuota());
+    Map<String, Map<String, Long>> typeQuota = new TreeMap<>();
+    for (StorageType t : StorageType.getTypesSupportingQuota()) {
+      long tQuota = quotaUsage.getTypeQuota(t);
+      if (tQuota != HdfsConstants.QUOTA_RESET) {
+        Map<String, Long> type = typeQuota.get(t.toString());
+        if (type == null) {
+          type = new TreeMap<>();
+          typeQuota.put(t.toString(), type);
+        }
+        type.put(HttpFSFileSystem.QUOTA_USAGE_QUOTA_JSON,
+            quotaUsage.getTypeQuota(t));
+        type.put(HttpFSFileSystem.QUOTA_USAGE_CONSUMED_JSON,
+            quotaUsage.getTypeConsumed(t));
+      }
+    }
+    result.put(HttpFSFileSystem.QUOTA_USAGE_TYPE_QUOTA_JSON, typeQuota);
+    return result;
+  }
+
+  /**
+   * Executor that performs a quota-usage FileSystemAccess files system
+   * operation.
+   */
+  @InterfaceAudience.Private
+  public static class FSQuotaUsage
+      implements FileSystemAccess.FileSystemExecutor<Map> {
+    private Path path;
+
+    public FSQuotaUsage(String path) {
+      this.path = new Path(path);
+    }
+
+    @Override
+    public Map execute(FileSystem fs) throws IOException {
+      QuotaUsage quotaUsage = fs.getQuotaUsage(path);
+      return quotaUsageToJSON(quotaUsage);
+    }
+  }
+
+  /**

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS55 INS29 INS79 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS29 INS78 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS60 INS70 INS65 INS42 INS4 INS42 INS43 INS42 INS60 INS60 INS21 INS41 INS43 INS43 INS43 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS60 INS70 INS21 INS41 INS65 INS40 INS43 INS43 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS74 INS59 INS44 INS32 INS8 INS66 INS66 INS45 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS32 INS32 INS32 INS74 INS59 INS44 INS32 INS8 INS32 INS42 INS66 INS66 INS40 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS43 INS42 INS42 INS60 INS41 INS43 INS43 INS43 INS42 INS32 INS74 INS42 UPD42 MOV42 UPD42 MOV42 INS25 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS43 INS43 INS74 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS40 INS42 INS42 INS7 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS38 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS39 INS59 INS27 INS8 INS22 INS14 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 MOV21 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS40 INS60 INS25 INS21 INS21 INS52 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 UPD40 MOV40 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS32 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS74 INS42 INS42 INS43 INS42 DEL40 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21