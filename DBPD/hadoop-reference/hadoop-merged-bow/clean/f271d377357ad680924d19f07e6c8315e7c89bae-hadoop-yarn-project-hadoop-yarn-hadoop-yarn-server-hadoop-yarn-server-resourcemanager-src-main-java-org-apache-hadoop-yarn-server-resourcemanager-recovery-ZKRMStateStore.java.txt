YARN-3736. Add RMStateStore apis to store and load accepted reservations for failover (adhoot via asuresh)

+import java.util.HashMap;
+import org.apache.hadoop.yarn.api.records.ReservationId;
+import org.apache.hadoop.yarn.proto.YarnServerResourceManagerRecoveryProtos.ReservationAllocationStateProto;
+ * |-- RESERVATION_SYSTEM_ROOT
+ *        |------PLAN_1
+ *        |      |------ RESERVATION_1
+ *        |      |------ RESERVATION_2
+ *        |      ....
+ *        |------PLAN_2
+ *        ....
+ *
+ * Changes from 1.2 to 1.3, Addition of ReservationSystem state.
-      .newInstance(1, 2);
+      .newInstance(1, 3);
+  private String reservationRoot;
+    reservationRoot = getNodePath(zkRootNodePath, RESERVATION_SYSTEM_ROOT);
+    create(reservationRoot);
+    // recover reservation state
+    loadReservationSystemState(rmState);
+  private void loadReservationSystemState(RMState rmState) throws Exception {
+    List<String> planNodes = getChildren(reservationRoot);
+    for (String planName : planNodes) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Loading plan from znode: " + planName);
+      }
+      String planNodePath = getNodePath(reservationRoot, planName);
+
+      List<String> reservationNodes = getChildren(planNodePath);
+      for (String reservationNodeName : reservationNodes) {
+        String reservationNodePath = getNodePath(planNodePath,
+            reservationNodeName);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Loading reservation from znode: " + reservationNodePath);
+        }
+        byte[] reservationData = getData(reservationNodePath);
+        ReservationAllocationStateProto allocationState =
+            ReservationAllocationStateProto.parseFrom(reservationData);
+        if (!rmState.getReservationState().containsKey(planName)) {
+          rmState.getReservationState().put(planName,
+              new HashMap<ReservationId, ReservationAllocationStateProto>());
+        }
+        ReservationId reservationId =
+            ReservationId.parseReservationId(reservationNodeName);
+        rmState.getReservationState().get(planName).put(reservationId,
+            allocationState);
+      }
+    }
+  }
+
+  @Override
+  protected synchronized void removeReservationState(String planName,
+      String reservationIdName)
+      throws Exception {
+    String planNodePath =
+        getNodePath(reservationRoot, planName);
+    String reservationPath = getNodePath(planNodePath,
+        reservationIdName);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Removing reservationallocation " + reservationIdName + " for" +
+          " plan " + planName);
+    }
+    safeDelete(reservationPath);
+
+    List<String> reservationNodes = getChildren(planNodePath);
+    if (reservationNodes.isEmpty()) {
+      safeDelete(planNodePath);
+    }
+  }
+
+  @Override
+  protected synchronized void storeReservationState(
+      ReservationAllocationStateProto reservationAllocation, String planName,
+      String reservationIdName)
+      throws Exception {
+    SafeTransaction trx = new SafeTransaction();
+    addOrUpdateReservationState(
+        reservationAllocation, planName, reservationIdName, trx, false);
+    trx.commit();
+  }
+
+  @Override
+  protected synchronized void updateReservationState(
+      ReservationAllocationStateProto reservationAllocation, String planName,
+      String reservationIdName)
+      throws Exception {
+    SafeTransaction trx = new SafeTransaction();
+    addOrUpdateReservationState(
+        reservationAllocation, planName, reservationIdName, trx, true);
+    trx.commit();
+  }
+
+  private void addOrUpdateReservationState(
+      ReservationAllocationStateProto reservationAllocation, String planName,
+      String reservationIdName, SafeTransaction trx, boolean isUpdate)
+      throws Exception {
+    String planCreatePath =
+        getNodePath(reservationRoot, planName);
+    String reservationPath = getNodePath(planCreatePath,
+        reservationIdName);
+    byte[] reservationData = reservationAllocation.toByteArray();
+
+    if (!exists(planCreatePath)) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Creating plan node: " + planName + " at: " + planCreatePath);
+      }
+      trx.create(planCreatePath, null, zkAcl, CreateMode.PERSISTENT);
+    }
+
+    if (isUpdate) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Updating reservation: " + reservationIdName + " in plan:"
+            + planName + " at: " + reservationPath);
+      }
+      trx.setData(reservationPath, reservationData, -1);
+    } else {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Storing reservation: " + reservationIdName + " in plan:"
+            + planName + " at: " + reservationPath);
+      }
+      trx.create(reservationPath, reservationData, zkAcl,
+          CreateMode.PERSISTENT);
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS21 INS21 INS21 INS43 INS42 INS42 INS60 INS70 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS21 INS60 INS25 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS60 INS25 INS25 UPD34 INS7 INS32 INS32 INS42 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS74 INS59 INS32 INS8 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS5 INS59 INS38 INS8 INS42 INS8 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS60 INS60 INS70 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS32 INS25 INS21 INS25 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS32 INS8 INS32 INS32 INS8 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS60 INS60 INS25 INS60 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS33 INS42 INS40 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS5 INS59 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS45 INS42 INS45 INS45 INS42 INS32 INS32 INS34 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS21 INS39 INS85 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS42 INS42 INS42