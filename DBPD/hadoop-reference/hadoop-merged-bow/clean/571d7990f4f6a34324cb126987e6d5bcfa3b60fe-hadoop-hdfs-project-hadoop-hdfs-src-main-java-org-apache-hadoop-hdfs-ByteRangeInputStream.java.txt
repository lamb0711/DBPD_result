Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import java.net.MalformedURLException;
+import java.util.StringTokenizer;
+import org.apache.hadoop.hdfs.web.resources.OffsetParam;
-   * This class wraps a URL to allow easy mocking when testing. The URL class
-   * cannot be easily mocked because it is public.
+   * This class wraps a URL and provides method to open connection.
+   * It can be overridden to change how a connection is opened.
-  static class URLOpener {
+  public static class URLOpener {
+    /** The url with offset parameter */
+    protected URL offsetUrl;
-  
-    public HttpURLConnection openConnection() throws IOException {
-      return (HttpURLConnection)url.openConnection();
+
+    protected HttpURLConnection openConnection() throws IOException {
+      return (HttpURLConnection)offsetUrl.openConnection();
+    }
+
+    private HttpURLConnection openConnection(final long offset) throws IOException {
+      offsetUrl = offset == 0L? url: new URL(url + "&" + new OffsetParam(offset));
+      final HttpURLConnection conn = openConnection();
+      conn.setRequestMethod("GET");
+      if (offset != 0L) {
+        conn.setRequestProperty("Range", "bytes=" + offset + "-");
+      }
+      return conn;
+  static private final String OFFSET_PARAM_PREFIX = OffsetParam.NAME + "=";
+
+  /** Remove offset parameter, if there is any, from the url */
+  static URL removeOffsetParam(final URL url) throws MalformedURLException {
+    String query = url.getQuery();
+    if (query == null) {
+      return url;
+    }
+    final String lower = query.toLowerCase();
+    if (!lower.startsWith(OFFSET_PARAM_PREFIX)
+        && !lower.contains("&" + OFFSET_PARAM_PREFIX)) {
+      return url;
+    }
+
+    //rebuild query
+    StringBuilder b = null;
+    for(final StringTokenizer st = new StringTokenizer(query, "&");
+        st.hasMoreTokens();) {
+      final String token = st.nextToken();
+      if (!token.toLowerCase().startsWith(OFFSET_PARAM_PREFIX)) {
+        if (b == null) {
+          b = new StringBuilder("?").append(token);
+        } else {
+          b.append('&').append(token);
+        }
+      }
+    }
+    query = b == null? "": b.toString();
+
+    final String urlStr = url.toString();
+    return new URL(urlStr.substring(0, urlStr.indexOf('?')) + query);
+  }
+
-  ByteRangeInputStream(URLOpener o, URLOpener r) {
+  /**
+   * Create with the specified URLOpeners. Original url is used to open the 
+   * stream for the first time. Resolved url is used in subsequent requests.
+   * @param o Original url
+   * @param r Resolved url
+   */
+  public ByteRangeInputStream(URLOpener o, URLOpener r) {
-      final HttpURLConnection connection = opener.openConnection();
+      final HttpURLConnection connection = opener.openConnection(startPos);
-        connection.setRequestMethod("GET");
-        if (startPos != 0) {
-          connection.setRequestProperty("Range", "bytes="+startPos+"-");
-        }
+      } catch (FileNotFoundException fnfe) {
+        throw fnfe;
-      resolvedURL.setURL(connection.getURL());
+      resolvedURL.setURL(removeOffsetParam(connection.getURL()));

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS29 INS83 INS43 INS59 UPD83 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS27 INS65 INS42 INS83 INS43 INS42 INS42 INS60 INS25 INS60 INS25 INS60 INS24 INS21 INS60 INS41 INS65 INS65 INS65 UPD66 UPD66 INS65 INS42 INS42 INS42 INS83 INS39 INS42 INS42 INS21 INS60 INS21 INS25 INS41 INS40 INS45 INS66 INS42 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS27 INS8 INS43 INS59 INS58 INS32 INS8 INS7 INS83 INS43 INS59 INS14 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS7 INS83 INS43 INS59 INS32 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS38 INS38 INS41 INS42 INS42 INS33 INS83 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS16 INS42 INS42 INS32 INS43 INS27 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS34 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS14 INS83 INS43 INS59 INS38 INS8 INS27 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS12 INS32 UPD42 INS27 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS45 INS42 INS42 INS32 INS32 INS25 INS42 INS33 INS42 INS42 INS42 INS42 INS34 INS32 INS44 INS8 INS42 INS42 MOV32 INS42 INS34 INS43 INS27 INS42 INS42 INS45 INS27 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS13 INS42 INS43 INS42 INS53 UPD42 INS42 INS42 INS45 INS14 INS45 INS42 INS45 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS43 INS42 INS7 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS13 INS43 INS45 INS42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42