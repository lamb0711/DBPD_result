Merge trunk to branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1608603 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
+import org.apache.hadoop.fs.XAttrCodec;
+import org.apache.hadoop.fs.XAttrSetFlag;
+import org.apache.hadoop.lib.wsrs.EnumSetParam;
+import org.json.simple.parser.JSONParser;
+import org.json.simple.parser.ParseException;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+  public static final String XATTR_NAME_PARAM = "xattr.name";
+  public static final String XATTR_VALUE_PARAM = "xattr.value";
+  public static final String XATTR_SET_FLAG_PARAM = "flag";
+  public static final String XATTR_ENCODING_PARAM = "encoding";
+  public static final String XATTRS_JSON = "XAttrs";
+  public static final String XATTR_NAME_JSON = "name";
+  public static final String XATTR_VALUE_JSON = "value";
+  public static final String XATTRNAMES_JSON = "XAttrNames";
-    DELETE(HTTP_DELETE);
+    DELETE(HTTP_DELETE), SETXATTR(HTTP_PUT), GETXATTRS(HTTP_GET),
+    REMOVEXATTR(HTTP_PUT), LISTXATTRS(HTTP_GET);
+    return getConnection(method, params, null, path, makeQualified);
+  }
+
+  /**
+   * Convenience method that creates a <code>HttpURLConnection</code> for the
+   * HttpFSServer file system operations.
+   * <p/>
+   * This methods performs and injects any needed authentication credentials
+   * via the {@link #getConnection(URL, String)} method
+   *
+   * @param method the HTTP method.
+   * @param params the query string parameters.
+   * @param multiValuedParams multi valued parameters of the query string
+   * @param path the file path
+   * @param makeQualified if the path should be 'makeQualified'
+   *
+   * @return HttpURLConnection a <code>HttpURLConnection</code> for the
+   *         HttpFSServer server, authenticated and ready to use for the
+   *         specified path and file system operation.
+   *
+   * @throws IOException thrown if an IO error occurrs.
+   */
+  private HttpURLConnection getConnection(final String method,
+      Map<String, String> params, Map<String, List<String>> multiValuedParams,
+      Path path, boolean makeQualified) throws IOException {
-    final URL url = HttpFSUtils.createURL(path, params);
+    final URL url = HttpFSUtils.createURL(path, params, multiValuedParams);
-  @SuppressWarnings({"deprecation"})
+  @Override
+  public void setXAttr(Path f, String name, byte[] value,
+      EnumSet<XAttrSetFlag> flag) throws IOException {
+    Map<String, String> params = new HashMap<String, String>();
+    params.put(OP_PARAM, Operation.SETXATTR.toString());
+    params.put(XATTR_NAME_PARAM, name);
+    if (value != null) {
+      params.put(XATTR_VALUE_PARAM, 
+          XAttrCodec.encodeValue(value, XAttrCodec.HEX));
+    }
+    params.put(XATTR_SET_FLAG_PARAM, EnumSetParam.toString(flag));
+    HttpURLConnection conn = getConnection(Operation.SETXATTR.getMethod(),
+        params, f, true);
+    HttpFSUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);
+  }
+
+  @Override
+  public byte[] getXAttr(Path f, String name) throws IOException {
+    Map<String, String> params = new HashMap<String, String>();
+    params.put(OP_PARAM, Operation.GETXATTRS.toString());
+    params.put(XATTR_NAME_PARAM, name);
+    HttpURLConnection conn = getConnection(Operation.GETXATTRS.getMethod(),
+        params, f, true);
+    HttpFSUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);
+    JSONObject json = (JSONObject) HttpFSUtils.jsonParse(conn);
+    Map<String, byte[]> xAttrs = createXAttrMap(
+        (JSONArray) json.get(XATTRS_JSON));
+    return xAttrs != null ? xAttrs.get(name) : null;
+  }
+
+  /** Convert xAttrs json to xAttrs map */
+  private Map<String, byte[]> createXAttrMap(JSONArray jsonArray) 
+      throws IOException {
+    Map<String, byte[]> xAttrs = Maps.newHashMap();
+    for (Object obj : jsonArray) {
+      JSONObject jsonObj = (JSONObject) obj;
+      final String name = (String)jsonObj.get(XATTR_NAME_JSON);
+      final byte[] value = XAttrCodec.decodeValue(
+          (String)jsonObj.get(XATTR_VALUE_JSON));
+      xAttrs.put(name, value);
+    }
+
+    return xAttrs;
+  }
+
+  /** Convert xAttr names json to names list */
+  private List<String> createXAttrNames(String xattrNamesStr) throws IOException {
+    JSONParser parser = new JSONParser();
+    JSONArray jsonArray;
+    try {
+      jsonArray = (JSONArray)parser.parse(xattrNamesStr);
+      List<String> names = Lists.newArrayListWithCapacity(jsonArray.size());
+      for (Object name : jsonArray) {
+        names.add((String) name);
+      }
+      return names;
+    } catch (ParseException e) {
+      throw new IOException("JSON parser error, " + e.getMessage(), e);
+    }
+  }
+
+  @Override
+  public Map<String, byte[]> getXAttrs(Path f) throws IOException {
+    Map<String, String> params = new HashMap<String, String>();
+    params.put(OP_PARAM, Operation.GETXATTRS.toString());
+    HttpURLConnection conn = getConnection(Operation.GETXATTRS.getMethod(),
+        params, f, true);
+    HttpFSUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);
+    JSONObject json = (JSONObject) HttpFSUtils.jsonParse(conn);
+    return createXAttrMap((JSONArray) json.get(XATTRS_JSON));
+  }
+
+  @Override
+  public Map<String, byte[]> getXAttrs(Path f, List<String> names)
+      throws IOException {
+    Preconditions.checkArgument(names != null && !names.isEmpty(), 
+        "XAttr names cannot be null or empty.");
+    Map<String, String> params = new HashMap<String, String>();
+    params.put(OP_PARAM, Operation.GETXATTRS.toString());
+    Map<String, List<String>> multiValuedParams = Maps.newHashMap();
+    multiValuedParams.put(XATTR_NAME_PARAM, names);
+    HttpURLConnection conn = getConnection(Operation.GETXATTRS.getMethod(),
+        params, multiValuedParams, f, true);
+    HttpFSUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);
+    JSONObject json = (JSONObject) HttpFSUtils.jsonParse(conn);
+    return createXAttrMap((JSONArray) json.get(XATTRS_JSON));
+  }
+
+  @Override
+  public List<String> listXAttrs(Path f) throws IOException {
+    Map<String, String> params = new HashMap<String, String>();
+    params.put(OP_PARAM, Operation.LISTXATTRS.toString());
+    HttpURLConnection conn = getConnection(Operation.LISTXATTRS.getMethod(),
+        params, f, true);
+    HttpFSUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);
+    JSONObject json = (JSONObject) HttpFSUtils.jsonParse(conn);
+    return createXAttrNames((String) json.get(XATTRNAMES_JSON));
+  }
+
+  @Override
+  public void removeXAttr(Path f, String name) throws IOException {
+    Map<String, String> params = new HashMap<String, String>();
+    params.put(OP_PARAM, Operation.REMOVEXATTR.toString());
+    params.put(XATTR_NAME_PARAM, name);
+    HttpURLConnection conn = getConnection(Operation.REMOVEXATTR.getMethod(),
+        params, f, true);
+    HttpFSUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS72 INS72 INS72 INS72 MOV29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS44 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS43 INS8 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS74 INS42 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS74 INS42 INS42 INS60 INS21 INS21 INS25 INS21 INS60 INS21 INS42 INS39 INS85 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS60 INS21 INS60 INS60 INS41 INS65 INS43 INS43 INS5 INS43 INS42 INS42 INS60 INS70 INS41 INS65 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS54 INS42 INS43 INS43 INS5 INS43 INS42 INS42 INS60 INS21 INS60 INS21 INS60 INS41 INS42 INS43 INS43 INS5 INS43 INS42 INS74 INS42 INS42 INS21 INS60 INS21 INS60 INS21 INS60 INS21 INS60 INS41 INS42 INS43 INS43 INS43 INS42 INS42 INS60 INS21 INS60 INS21 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS60 INS21 INS42 INS43 INS43 INS43 INS42 INS32 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS43 INS43 INS74 INS42 INS42 INS39 INS85 INS43 INS43 INS74 INS59 INS32 INS32 INS27 INS8 INS32 INS43 INS59 INS32 INS42 INS42 INS74 INS59 INS32 INS32 INS43 INS59 INS32 INS43 INS59 INS74 INS59 INS16 INS66 INS42 INS42 INS39 INS85 INS42 INS74 INS59 INS44 INS42 INS8 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS42 INS39 INS85 INS42 INS74 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS42 INS39 INS85 INS42 INS43 INS43 INS32 INS74 INS59 INS32 INS74 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS74 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS42 INS74 INS59 INS32 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS68 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS11 INS43 INS43 INS5 INS42 INS32 INS27 INS32 INS33 INS43 INS43 INS5 INS42 INS32 INS43 INS42 INS60 INS60 INS60 INS21 INS42 INS42 INS14 INS42 INS42 INS21 INS60 INS70 INS41 INS44 INS8 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS11 INS42 INS11 INS42 INS42 INS42 INS42 INS27 INS45 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS11 INS42 INS11 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS11 INS42 INS11 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS69 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS74 INS40 INS42 INS42 INS32 INS42 INS42 INS9 INS43 INS32 INS42 INS42 INS39 INS85 INS42 INS11 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS43 INS59 INS83 INS43 INS59 INS83 INS5 INS59 INS32 INS43 INS7 INS74 INS59 INS44 INS42 INS8 INS42 INS43 INS42 INS53 INS42 INS42 INS42 INS74 INS40 INS42 INS42 INS32 INS42 INS42 INS9 INS43 INS32 INS43 INS32 INS27 INS38 INS42 INS42 INS42 INS74 INS40 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS74 INS40 INS42 INS42 INS32 INS42 INS42 INS9 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS74 INS40 INS42 INS42 INS32 INS42 INS42 INS9 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS40 INS42 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS11 INS42 INS42 INS11 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS14 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS43 INS43 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS11 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL42 DEL45 DEL4 DEL79