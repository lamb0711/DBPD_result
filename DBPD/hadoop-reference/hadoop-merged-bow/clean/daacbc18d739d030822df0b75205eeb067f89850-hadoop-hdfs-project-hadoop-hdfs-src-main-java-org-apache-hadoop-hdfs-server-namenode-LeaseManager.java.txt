HDFS-4882. Prevent the Namenode's LeaseManager from looping forever in checkLeases (Ravi Prakash via Colin P. McCabe)

+import java.util.NavigableSet;
+import java.util.NoSuchElementException;
-import java.util.SortedSet;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo;
-  private final SortedSet<Lease> sortedLeases = new TreeSet<Lease>();
+  private final NavigableSet<Lease> sortedLeases = new TreeSet<Lease>();
-  
-  SortedSet<Lease> getSortedLeases() {return sortedLeases;}
+
+  @VisibleForTesting
+  int getNumSortedLeases() {return sortedLeases.size();}
+
+  /**
+   * This method iterates through all the leases and counts the number of blocks
+   * which are not COMPLETE. The FSNamesystem read lock MUST be held before
+   * calling this method.
+   * @return
+   */
+  synchronized long getNumUnderConstructionBlocks() {
+    assert this.fsnamesystem.hasReadLock() : "The FSNamesystem read lock wasn't"
+      + "acquired before counting under construction blocks";
+    long numUCBlocks = 0;
+    for (Lease lease : sortedLeases) {
+      for (String path : lease.getPaths()) {
+        final INodeFile cons;
+        try {
+          cons = this.fsnamesystem.getFSDirectory().getINode(path).asFile();
+            Preconditions.checkState(cons.isUnderConstruction());
+        } catch (UnresolvedLinkException e) {
+          throw new AssertionError("Lease files should reside on this FS");
+        }
+        BlockInfo[] blocks = cons.getBlocks();
+        if(blocks == null)
+          continue;
+        for(BlockInfo b : blocks) {
+          if(!b.isComplete())
+            numUCBlocks++;
+        }
+      }
+    }
+    LOG.info("Number of blocks under construction: " + numUCBlocks);
+    return numUCBlocks;
+  }
-  private synchronized boolean checkLeases() {
+  @VisibleForTesting
+  synchronized boolean checkLeases() {
-    for(; sortedLeases.size() > 0; ) {
-      final Lease oldest = sortedLeases.first();
-      if (!oldest.expiredHardLimit()) {
-        return needSync;
+    Lease leaseToCheck = null;
+    try {
+      leaseToCheck = sortedLeases.first();
+    } catch(NoSuchElementException e) {}
+
+    while(leaseToCheck != null) {
+      if (!leaseToCheck.expiredHardLimit()) {
+        break;
-      LOG.info(oldest + " has expired hard limit");
+      LOG.info(leaseToCheck + " has expired hard limit");
-      // need to create a copy of the oldest lease paths, becuase 
+      // need to create a copy of the oldest lease paths, because 
-      String[] leasePaths = new String[oldest.getPaths().size()];
-      oldest.getPaths().toArray(leasePaths);
+      String[] leasePaths = new String[leaseToCheck.getPaths().size()];
+      leaseToCheck.getPaths().toArray(leasePaths);
-          boolean completed = fsnamesystem.internalReleaseLease(oldest, p,
+          boolean completed = fsnamesystem.internalReleaseLease(leaseToCheck, p,
-              LOG.debug("Started block recovery " + p + " lease " + oldest);
+              LOG.debug("Started block recovery " + p + " lease " + leaseToCheck);
-              + oldest, e);
+              + leaseToCheck, e);
-        removeLease(oldest, p);
+        removeLease(leaseToCheck, p);
+      leaseToCheck = sortedLeases.higher(leaseToCheck);
+
+    try {
+      if(leaseToCheck != sortedLeases.first()) {
+        LOG.warn("Unable to release hard-limit expired lease: "
+          + sortedLeases.first());
+      }
+    } catch(NoSuchElementException e) {}

MOV26 INS26 INS26 UPD40 INS40 INS40 INS31 UPD74 INS78 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS78 UPD43 INS42 INS41 INS65 INS65 INS6 INS60 INS70 INS21 INS41 INS42 INS60 INS54 INS61 INS54 UPD42 MOV32 INS66 INS66 INS66 INS32 INS27 INS39 INS59 INS44 INS42 INS8 INS32 INS42 MOV43 INS59 INS8 INS12 INS27 MOV8 INS8 INS12 INS22 INS42 INS45 INS45 INS42 INS34 MOV43 INS42 INS70 INS42 INS42 INS27 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS21 INS25 INS44 INS8 INS52 INS42 INS44 INS32 INS8 INS45 INS42 INS7 INS43 INS42 MOV5 INS7 INS27 INS8 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS54 INS60 INS25 INS70 INS42 MOV32 INS42 INS10 INS42 INS32 INS42 INS32 INS21 INS42 UPD42 MOV42 INS83 INS43 INS59 INS8 INS12 INS5 INS59 INS27 INS18 INS44 INS42 INS8 UPD42 UPD42 MOV5 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS44 INS8 INS43 INS85 INS42 INS32 INS42 INS33 INS43 INS42 INS25 UPD42 INS42 INS42 INS27 INS7 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS38 INS21 UPD42 INS45 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS32 INS37 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS42 UPD42 INS22 INS42 INS52 INS42 UPD42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL83 DEL83 DEL42 DEL59 DEL60 DEL42 DEL41 DEL34 DEL27 DEL24