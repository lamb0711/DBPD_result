HDFS-5042. Completed files lost after power failure. Contributed by Vinayakumar B.

+import java.nio.file.StandardOpenOption;
-import org.apache.hadoop.util.ChunkedArrayList;
+import org.apache.hadoop.util.Shell;
+
+  /**
+   * Ensure that any writes to the given file is written to the storage device
+   * that contains it. This method opens channel on given File and closes it
+   * once the sync is done.<br>
+   * Borrowed from Uwe Schindler in LUCENE-5588
+   * @param fileToSync the file to fsync
+   */
+  public static void fsync(File fileToSync) throws IOException {
+    if (!fileToSync.exists()) {
+      throw new FileNotFoundException(
+          "File/Directory " + fileToSync.getAbsolutePath() + " does not exist");
+    }
+    boolean isDir = fileToSync.isDirectory();
+    // If the file is a directory we have to open read-only, for regular files
+    // we must open r/w for the fsync to have an effect. See
+    // http://blog.httrack.com/blog/2013/11/15/
+    // everything-you-always-wanted-to-know-about-fsync/
+    try(FileChannel channel = FileChannel.open(fileToSync.toPath(),
+        isDir ? StandardOpenOption.READ : StandardOpenOption.WRITE)){
+      fsync(channel, isDir);
+    }
+  }
+
+  /**
+   * Ensure that any writes to the given file is written to the storage device
+   * that contains it. This method opens channel on given File and closes it
+   * once the sync is done.
+   * Borrowed from Uwe Schindler in LUCENE-5588
+   * @param channel Channel to sync
+   * @param isDir if true, the given file is a directory (Channel should be
+   *          opened for read and ignore IOExceptions, because not all file
+   *          systems and operating systems allow to fsync on a directory)
+   * @throws IOException
+   */
+  public static void fsync(FileChannel channel, boolean isDir)
+      throws IOException {
+    try {
+      channel.force(true);
+    } catch (IOException ioe) {
+      if (isDir) {
+        assert !(Shell.LINUX
+            || Shell.MAC) : "On Linux and MacOSX fsyncing a directory"
+                + " should not throw IOException, we just don't want to rely"
+                + " on that in production (undocumented)" + ". Got: " + ioe;
+        // Ignore exception if it is a directory
+        return;
+      }
+      // Throw original exception
+      throw ioe;
+    }
+  }

INS26 INS40 UPD40 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS43 INS42 INS42 INS25 INS60 INS54 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS42 INS54 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS38 INS8 INS39 INS59 INS58 INS8 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS8 INS12 INS32 INS53 INS42 INS32 INS43 INS59 INS21 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS25 INS53 INS43 INS27 INS42 INS42 INS32 INS16 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS8 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS40 INS40 INS6 INS41 INS42 INS42 INS38 INS27 INS36 INS45 INS45 INS45 INS45 INS42 INS27 INS40 INS40