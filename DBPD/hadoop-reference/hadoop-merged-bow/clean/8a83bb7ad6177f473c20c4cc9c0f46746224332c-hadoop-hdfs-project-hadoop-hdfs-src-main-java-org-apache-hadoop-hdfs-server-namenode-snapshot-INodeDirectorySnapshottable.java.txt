HDFS-4667. Capture renamed files/directories in snapshot diff report. Contributed by Jing Zhao and Binglin Chang.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604488 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import org.apache.hadoop.hdfs.server.namenode.INodeReference;
+import org.apache.hadoop.hdfs.server.namenode.INodeReference.WithCount;
+import org.apache.hadoop.hdfs.server.namenode.INodeReference.WithName;
+import com.google.common.collect.Lists;
-    
+
+    static class RenameEntry {
+      private byte[][] sourcePath;
+      private byte[][] targetPath;
+
+      void setSource(INode source, byte[][] sourceParentPath) {
+        Preconditions.checkState(sourcePath == null);
+        sourcePath = new byte[sourceParentPath.length + 1][];
+        System.arraycopy(sourceParentPath, 0, sourcePath, 0,
+            sourceParentPath.length);
+        sourcePath[sourcePath.length - 1] = source.getLocalNameBytes();
+      }
+
+      void setTarget(INode target, byte[][] targetParentPath) {
+        targetPath = new byte[targetParentPath.length + 1][];
+        System.arraycopy(targetParentPath, 0, targetPath, 0,
+            targetParentPath.length);
+        targetPath[targetPath.length - 1] = target.getLocalNameBytes();
+      }
+
+      void setTarget(byte[][] targetPath) {
+        this.targetPath = targetPath;
+      }
+
+      boolean isRename() {
+        return sourcePath != null && targetPath != null;
+      }
+
+      byte[][] getSourcePath() {
+        return sourcePath;
+      }
+
+      byte[][] getTargetPath() {
+        return targetPath;
+      }
+    }
+
-    private final SortedMap<INode, byte[][]> diffMap = 
+    private final SortedMap<INode, byte[][]> diffMap =
-    
+
+    private final Map<Long, RenameEntry> renameMap =
+        new HashMap<Long, RenameEntry>();
+
+      // detect rename
+      for (INode created : diff.getList(ListType.CREATED)) {
+        if (created.isReference()) {
+          RenameEntry entry = getEntry(created.getId());
+          if (entry.getTargetPath() == null) {
+            entry.setTarget(created, relativePath);
+          }
+        }
+      }
+      for (INode deleted : diff.getList(ListType.DELETED)) {
+        if (deleted instanceof INodeReference.WithName) {
+          RenameEntry entry = getEntry(deleted.getId());
+          entry.setSource(deleted, relativePath);
+        }
+      }
-    
+
+    private RenameEntry getEntry(long inodeId) {
+      RenameEntry entry = renameMap.get(inodeId);
+      if (entry == null) {
+        entry = new RenameEntry();
+        renameMap.put(inodeId, entry);
+      }
+      return entry;
+    }
+
+    private void setRenameTarget(long inodeId, byte[][] path) {
+      getEntry(inodeId).setTarget(path);
+    }
+
-            .get(node)));
+            .get(node), null));
-              diffMap.get(node), isFromEarlier());
+              diffMap.get(node), isFromEarlier(), renameMap);
-    ChildrenDiff diff = new ChildrenDiff();
+    final Snapshot earlierSnapshot = diffReport.isFromEarlier() ?
+        diffReport.from : diffReport.to;
+    final Snapshot laterSnapshot = diffReport.isFromEarlier() ?
+        diffReport.to : diffReport.from;
+      final ChildrenDiff diff = new ChildrenDiff();
-        boolean change = sf.computeDiffBetweenSnapshots(diffReport.from,
-            diffReport.to, diff, dir);
+        boolean change = sf.computeDiffBetweenSnapshots(earlierSnapshot,
+            laterSnapshot, diff, dir);
-      ReadOnlyList<INode> children = dir.getChildrenList(
-          diffReport.isFromEarlier() ? Snapshot.getSnapshotId(diffReport.to) : 
-            Snapshot.getSnapshotId(diffReport.from));
+      ReadOnlyList<INode> children = dir.getChildrenList(earlierSnapshot
+          .getId());
-        if (diff.searchIndex(ListType.CREATED, name) < 0
-            && diff.searchIndex(ListType.DELETED, name) < 0) {
+        boolean toProcess = diff.searchIndex(ListType.DELETED, name) < 0;
+        if (!toProcess && child instanceof INodeReference.WithName) {
+          byte[][] renameTargetPath = findRenameTargetPath((WithName) child,
+              laterSnapshot == null ? Snapshot.CURRENT_STATE_ID : 
+                                      laterSnapshot.getId());
+          if (renameTargetPath != null) {
+            toProcess = true;
+            diffReport.setRenameTarget(child.getId(), renameTargetPath);
+          }
+        }
+        if (toProcess) {
-      Snapshot earlierSnapshot = diffReport.isFromEarlier() ? diffReport.from
-          : diffReport.to;
-      Snapshot laterSnapshot = diffReport.isFromEarlier() ? diffReport.to
-          : diffReport.from;
-      boolean change = file.getDiffs().changedBetweenSnapshots(earlierSnapshot,
-          laterSnapshot);
+      boolean change = file.getFileWithSnapshotFeature()
+          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);
-  
+
+  /**
+   * We just found a deleted WithName node as the source of a rename operation.
+   * However, we should include it in our snapshot diff report as rename only
+   * if the rename target is also under the same snapshottable directory.
+   */
+  private byte[][] findRenameTargetPath(INodeReference.WithName wn,
+      final int snapshotId) {
+    INode inode = wn.getReferredINode();
+    final LinkedList<byte[]> ancestors = Lists.newLinkedList();
+    while (inode != null) {
+      if (inode == this) {
+        return ancestors.toArray(new byte[ancestors.size()][]);
+      }
+      if (inode instanceof INodeReference.WithCount) {
+        inode = ((WithCount) inode).getParentRef(snapshotId);
+      } else {
+        INode parent = inode.getParentReference() != null ? inode
+            .getParentReference() : inode.getParent();
+        if (parent != null && parent instanceof INodeDirectory) {
+          int sid = parent.asDirectory().searchChild(inode);
+          if (sid < snapshotId) {
+            return null;
+          }
+        }
+        if (!(parent instanceof WithCount)) {
+          ancestors.addFirst(inode.getLocalNameBytes());
+        }
+        inode = parent;
+      }
+    }
+    return null;
+  }
+
-}
+}

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS55 INS23 INS31 INS31 INS29 INS83 INS5 INS42 INS44 INS44 INS8 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 MOV60 MOV60 INS65 INS39 INS85 INS85 INS43 INS42 INS83 INS39 INS42 INS60 INS60 INS61 INS41 INS83 INS5 INS59 INS83 INS5 INS59 INS39 INS42 INS44 INS44 INS8 INS39 INS42 INS44 INS44 INS8 INS39 INS42 INS44 INS8 INS39 INS42 INS8 INS5 INS42 INS8 INS5 INS42 INS8 INS43 INS43 INS43 INS42 INS14 MOV21 MOV21 INS70 INS70 INS42 INS39 INS42 INS60 INS25 INS41 INS39 INS42 INS5 INS42 INS21 INS83 INS83 INS66 INS66 INS66 INS40 INS43 INS59 INS83 INS74 INS59 INS27 INS8 INS33 INS39 INS85 INS85 INS42 INS39 INS85 INS85 INS42 INS43 INS42 INS5 INS42 INS21 INS21 INS21 INS21 INS43 INS42 INS5 INS42 INS21 INS21 INS21 INS5 INS42 INS21 INS41 INS39 INS85 INS85 INS41 INS39 INS85 INS85 INS41 INS42 INS42 INS42 INS74 INS44 INS32 INS8 INS44 INS32 INS8 INS43 INS59 INS27 INS8 INS42 INS39 INS85 INS85 INS32 MOV60 INS42 INS42 INS32 INS43 INS5 INS42 INS32 INS42 INS33 INS25 INS25 INS42 INS39 INS85 INS85 INS32 INS7 INS32 INS7 INS42 INS39 INS85 INS85 INS7 INS32 INS7 INS39 INS85 INS85 INS7 INS27 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS40 INS25 INS43 INS42 INS42 INS42 INS40 INS25 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS32 INS42 INS42 INS83 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS27 INS8 INS62 INS8 INS8 INS42 INS42 INS27 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS2 INS32 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS2 INS32 INS22 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS62 INS8 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS60 INS25 INS42 INS52 INS41 INS42 INS43 INS21 INS60 INS25 INS25 INS21 INS42 INS33 INS5 INS27 INS42 INS27 INS42 INS42 INS5 INS27 INS42 INS27 INS42 INS42 INS52 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS60 INS25 INS42 INS43 INS60 INS21 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS27 INS8 INS42 INS32 INS40 INS7 INS43 INS59 INS27 INS8 INS38 INS8 INS7 INS39 INS85 INS85 INS40 INS34 INS40 INS34 INS39 INS85 INS85 INS40 INS34 INS40 INS34 INS43 INS59 INS27 INS8 INS40 INS43 INS59 INS32 INS43 INS33 UPD42 MOV42 UPD42 MOV42 INS42 MOV27 INS38 INS62 INS60 INS25 INS42 INS42 INS42 INS3 INS42 INS32 INS42 INS42 INS16 INS27 INS62 INS60 INS25 INS36 INS21 INS42 INS42 INS42 INS42 INS32 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS5 INS59 INS27 INS8 UPD42 INS5 INS32 INS36 INS42 INS42 INS27 INS32 INS32 INS42 INS33 INS42 INS43 INS39 INS59 INS27 INS8 INS62 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS39 INS85 INS85 INS42 INS32 INS42 INS33 INS21 INS21 INS39 INS85 INS85 INS42 INS42 INS11 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS16 INS7 INS32 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS43 INS42 INS27 INS40 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 DEL8 DEL40 DEL40 DEL42 DEL42 DEL32 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL16 DEL42 DEL42 DEL40 DEL42 DEL32 DEL34 DEL27 DEL27