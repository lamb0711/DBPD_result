YARN-7622. Allow fair-scheduler configuration on HDFS (gphillips via rkanter)

-import java.io.File;
-import java.io.IOException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.UnsupportedFileSystemException;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.policies.FifoPolicy;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.policies.FifoPolicy;
-import com.google.common.annotations.VisibleForTesting;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.IOException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+  //Permitted allocation file filesystems (case insensitive)
+  private static final String SUPPORTED_FS_REGEX =
+      "(?i)(hdfs)|(file)|(s3a)|(viewfs)";
-  private long lastSuccessfulReload; // Last time we successfully reloaded queues
-  private boolean lastReloadAttemptFailed = false;
-  
-  // Path to XML file containing allocations. 
-  private File allocFile;
-  
+  // Last time we successfully reloaded queues
+  private volatile long lastSuccessfulReload;
+  private volatile boolean lastReloadAttemptFailed = false;
+
+  // Path to XML file containing allocations.
+  private Path allocFile;
+  private FileSystem fs;
+
-    
-    if (allocFile != null) {
-      reloadThread = new Thread() {
-        @Override
-        public void run() {
-          while (running) {
+    if(this.allocFile != null) {
+      this.fs = allocFile.getFileSystem(conf);
+      reloadThread = new Thread(() -> {
+        while (running) {
+          try {
-            long lastModified = allocFile.lastModified();
+            long lastModified =
+                fs.getFileStatus(allocFile).getModificationTime();
-                    + allocFile.exists());
+                    + fs.exists(allocFile));
-            try {
-              Thread.sleep(reloadIntervalMs);
-            } catch (InterruptedException ex) {
-              LOG.info(
-                  "Interrupted while waiting to reload alloc configuration");
-            }
+          } catch (IOException e) {
+            LOG.info("Exception while loading allocation file: " + e);
+          }
+          try {
+            Thread.sleep(reloadIntervalMs);
+          } catch (InterruptedException ex) {
+            LOG.info(
+                "Interrupted while waiting to reload alloc configuration");
-      };
+      });
-  public File getAllocationFile(Configuration conf) {
+  public Path getAllocationFile(Configuration conf)
+      throws UnsupportedFileSystemException {
-    File allocFile = new File(allocFilePath);
-    if (!allocFile.isAbsolute()) {
+    Path allocPath = new Path(allocFilePath);
+    String allocPathScheme = allocPath.toUri().getScheme();
+    if(allocPathScheme != null && !allocPathScheme.matches(SUPPORTED_FS_REGEX)){
+      throw new UnsupportedFileSystemException("Allocation file "
+          + allocFilePath + " uses an unsupported filesystem");
+    } else if (!allocPath.isAbsolute()) {
-        allocFile = null;
+        allocPath = null;
-        allocFile = new File(url.getPath());
+        allocPath = new Path(url.getProtocol(), null, url.getPath());
+    } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){
+      allocPath = new Path("file", null, allocFilePath);
-    return allocFile;
+    return allocPath;
-    Document doc = builder.parse(allocFile);
+    Document doc = builder.parse(fs.open(allocFile));
-    
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 UPD40 INS40 INS40 INS23 INS23 MOV31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 UPD43 INS83 INS43 INS59 MOV78 INS42 MOV44 MOV43 INS8 UPD43 INS43 INS42 INS42 INS45 UPD42 INS42 INS42 MOV21 INS25 MOV21 UPD42 INS42 INS60 INS25 INS27 INS8 UPD43 INS43 INS59 INS27 INS8 MOV25 UPD42 INS22 INS33 INS21 INS21 MOV21 MOV21 UPD42 UPD42 INS42 INS42 INS32 INS27 INS38 INS53 INS25 INS52 INS42 INS7 INS7 UPD43 INS32 INS42 INS42 INS33 INS32 INS14 INS32 INS8 INS32 INS22 INS32 INS42 INS14 UPD42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 UPD42 INS42 INS42 INS21 INS42 INS42 MOV42 INS52 INS42 INS42 INS42 INS42 MOV43 INS86 INS42 INS45 INS42 INS45 INS7 MOV8 INS42 INS14 UPD42 INS43 INS45 INS33 INS42 UPD42 INS42 INS54 UPD43 INS32 INS33 INS8 INS12 UPD42 INS42 INS42 MOV60 MOV60 MOV25 INS44 INS8 INS43 INS42 INS21 INS42 INS32 INS32 UPD42 INS42 INS42 INS27 INS42 INS42 MOV42 INS45 INS42 UPD42 INS42 DEL42 DEL78 DEL42 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL1 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31