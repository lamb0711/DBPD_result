YARN-8081.  Add support to upgrade a component.
            Contributed by Chandni Singh

+import com.google.common.base.Joiner;
+import com.google.common.collect.Sets;
+import org.apache.hadoop.yarn.service.api.records.ComponentState;
+import java.util.HashSet;
+import java.util.Set;
+  @Path(COMPONENTS_PATH)
+  @Consumes({MediaType.APPLICATION_JSON})
+  @Produces({RestApiConstants.MEDIA_TYPE_JSON_UTF8, MediaType.TEXT_PLAIN})
+  public Response updateComponents(@Context HttpServletRequest request,
+      @PathParam(SERVICE_NAME) String serviceName,
+      List<Component> requestComponents) {
+
+    try {
+      if (requestComponents == null || requestComponents.isEmpty()) {
+        throw new YarnException("No components provided.");
+      }
+      UserGroupInformation ugi = getProxyUser(request);
+      Set<String> compNamesToUpgrade = new HashSet<>();
+      requestComponents.forEach(reqComp -> {
+        if (reqComp.getState() != null &&
+            reqComp.getState().equals(ComponentState.UPGRADING)) {
+          compNamesToUpgrade.add(reqComp.getName());
+        }
+      });
+      LOG.info("PUT: upgrade components {} for service {} " +
+          "user = {}", compNamesToUpgrade, serviceName, ugi);
+      return processComponentsUpgrade(ugi, serviceName, compNamesToUpgrade);
+    } catch (AccessControlException e) {
+      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());
+    } catch (YarnException e) {
+      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());
+    } catch (IOException | InterruptedException e) {
+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,
+          e.getMessage());
+    } catch (UndeclaredThrowableException e) {
+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,
+          e.getCause().getMessage());
+    }
+  }
+
+  @PUT
+      UserGroupInformation ugi = getProxyUser(request);
+      if (component.getState() != null &&
+          component.getState().equals(ComponentState.UPGRADING)) {
+        LOG.info("PUT: upgrade component {} for service {} " +
+            "user = {}", component.getName(), appName, ugi);
+        return processComponentsUpgrade(ugi, appName,
+            Sets.newHashSet(componentName));
+      }
+
-      UserGroupInformation ugi = getProxyUser(request);
-        return processContainerUpgrade(ugi, service,
+        return processContainersUpgrade(ugi, service,
-        return processContainerUpgrade(ugi, service, liveContainers);
+        return processContainersUpgrade(ugi, service, liveContainers);
-  private Response processContainerUpgrade(UserGroupInformation ugi,
+  private Response processComponentsUpgrade(UserGroupInformation ugi,
+      String serviceName, Set<String> compNames) throws YarnException,
+      IOException, InterruptedException {
+    Service service = getServiceFromClient(ugi, serviceName);
+    if (service.getState() != ServiceState.UPGRADING) {
+      throw new YarnException(
+          String.format("The upgrade of service %s has not been initiated.",
+              service.getName()));
+    }
+    List<Container> containersToUpgrade = ServiceApiUtil
+        .validateAndResolveCompsUpgrade(service, compNames);
+    Integer result = invokeContainersUpgrade(ugi, service, containersToUpgrade);
+    if (result == EXIT_SUCCESS) {
+      ServiceStatus status = new ServiceStatus();
+      status.setDiagnostics(
+          "Upgrading components " + Joiner.on(',').join(compNames) + ".");
+      return formatResponse(Response.Status.ACCEPTED, status);
+    }
+    // If result is not a success, consider it a no-op
+    return Response.status(Response.Status.NO_CONTENT).build();
+  }
+
+  private Response processContainersUpgrade(UserGroupInformation ugi,
-    for (Container liveContainer : containers) {
-      if (liveContainer.getState() != ContainerState.NEEDS_UPGRADE) {
-        // Nothing to upgrade
-        throw new YarnException(String.format(
-            "The component instance (%s) does not need an upgrade.",
-            liveContainer.getComponentInstanceName()));
-      }
-    }
-
-    Integer result = ugi.doAs((PrivilegedExceptionAction<Integer>) () -> {
-      int result1;
-      ServiceClient sc = getServiceClient();
-      sc.init(YARN_CONFIG);
-      sc.start();
-      result1 = sc.actionUpgrade(service, containers);
-      sc.close();
-      return result1;
-    });
-
+    ServiceApiUtil.validateInstancesUpgrade(containers);
+    Integer result = invokeContainersUpgrade(ugi, service, containers);
+  private int invokeContainersUpgrade(UserGroupInformation ugi,
+      Service service, List<Container> containers) throws IOException,
+      InterruptedException {
+    return ugi.doAs((PrivilegedExceptionAction<Integer>) () -> {
+      int result1;
+      ServiceClient sc = getServiceClient();
+      sc.init(YARN_CONFIG);
+      sc.start();
+      result1 = sc.actionUpgrade(service, containers);
+      sc.close();
+      return result1;
+    });
+  }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS83 MOV43 INS42 INS44 INS44 INS44 MOV43 INS43 INS43 MOV8 INS39 UPD42 INS8 INS42 INS42 INS42 INS42 INS4 INS42 INS4 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS74 INS42 INS54 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS21 INS60 INS41 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS8 INS12 INS12 INS12 INS12 MOV60 INS42 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS74 INS59 MOV43 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS43 INS32 INS43 INS59 MOV32 INS42 INS42 INS25 INS60 INS60 INS21 INS21 INS41 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS25 INS42 INS42 INS42 INS42 INS32 INS32 INS40 INS53 INS43 MOV43 INS42 INS32 INS42 INS32 INS42 INS42 INS60 INS21 INS41 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS43 INS59 INS74 INS59 INS32 INS32 INS32 INS43 INS42 INS41 INS43 INS42 INS41 INS84 INS42 INS41 INS43 INS42 INS41 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS32 INS53 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS86 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS32 INS42 INS32 INS27 INS32 INS21 INS41 INS43 INS32 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS74 INS59 INS8 INS45 INS45 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS40 INS32 INS32 INS33 INS32 INS42 INS40 INS32 INS32 INS42 INS42 INS42 INS45 INS32 INS43 INS45 INS32 INS45 MOV43 INS45 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS27 INS32 INS21 INS32 INS33 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL40 DEL27 DEL45 DEL32 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL70 DEL42 DEL59 DEL60