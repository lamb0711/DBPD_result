YARN-1389. Made ApplicationClientProtocol and ApplicationHistoryProtocol expose analogous getApplication(s)/Attempt(s)/Container(s) APIs. Contributed by Mayank Bansal.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577052 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptReportRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptReportResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptsRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptsResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainerReportRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainerReportResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainersRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainersResponse;
+import org.apache.hadoop.yarn.api.records.ApplicationAttemptReport;
+import org.apache.hadoop.yarn.api.records.ContainerId;
+import org.apache.hadoop.yarn.api.records.ContainerReport;
+import org.apache.hadoop.yarn.exceptions.ApplicationAttemptNotFoundException;
+import org.apache.hadoop.yarn.exceptions.ContainerNotFoundException;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.RMAppAttempt;
+import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerAppReport;
+  public GetApplicationAttemptReportResponse getApplicationAttemptReport(
+      GetApplicationAttemptReportRequest request) throws YarnException,
+      IOException {
+    ApplicationAttemptId appAttemptId = request.getApplicationAttemptId();
+    UserGroupInformation callerUGI;
+    try {
+      callerUGI = UserGroupInformation.getCurrentUser();
+    } catch (IOException ie) {
+      LOG.info("Error getting UGI ", ie);
+      throw RPCUtil.getRemoteException(ie);
+    }
+    RMApp application = this.rmContext.getRMApps().get(
+        appAttemptId.getApplicationId());
+    if (application == null) {
+      // If the RM doesn't have the application, throw
+      // ApplicationNotFoundException and let client to handle.
+      throw new ApplicationNotFoundException("Application with id '"
+          + request.getApplicationAttemptId().getApplicationId()
+          + "' doesn't exist in RM.");
+    }
+
+    boolean allowAccess = checkAccess(callerUGI, application.getUser(),
+        ApplicationAccessType.VIEW_APP, application);
+    GetApplicationAttemptReportResponse response = null;
+    if (allowAccess) {
+      RMAppAttempt appAttempt = application.getAppAttempts().get(appAttemptId);
+      if (appAttempt == null) {
+        throw new ApplicationAttemptNotFoundException("ApplicationAttempt "
+            + appAttemptId + " Not Found in RM");
+      }
+      ApplicationAttemptReport attemptReport = appAttempt
+          .createApplicationAttemptReport();
+      response = GetApplicationAttemptReportResponse.newInstance(attemptReport);
+    }else{
+      throw new YarnException("User " + callerUGI.getShortUserName()
+          + " does not have privilage to see this attempt " + appAttemptId);
+    }
+    return response;
+  }
+  
+  @Override
+  public GetApplicationAttemptsResponse getApplicationAttempts(
+      GetApplicationAttemptsRequest request) throws YarnException, IOException {
+    ApplicationId appId = request.getApplicationId();
+    UserGroupInformation callerUGI;
+    try {
+      callerUGI = UserGroupInformation.getCurrentUser();
+    } catch (IOException ie) {
+      LOG.info("Error getting UGI ", ie);
+      throw RPCUtil.getRemoteException(ie);
+    }
+    RMApp application = this.rmContext.getRMApps().get(appId);
+    if (application == null) {
+      // If the RM doesn't have the application, throw
+      // ApplicationNotFoundException and let client to handle.
+      throw new ApplicationNotFoundException("Application with id '" + appId
+          + "' doesn't exist in RM.");
+    }
+    boolean allowAccess = checkAccess(callerUGI, application.getUser(),
+        ApplicationAccessType.VIEW_APP, application);
+    GetApplicationAttemptsResponse response = null;
+    if (allowAccess) {
+      Map<ApplicationAttemptId, RMAppAttempt> attempts = application
+          .getAppAttempts();
+      List<ApplicationAttemptReport> listAttempts = 
+        new ArrayList<ApplicationAttemptReport>();
+      Iterator<Map.Entry<ApplicationAttemptId, RMAppAttempt>> iter = attempts
+          .entrySet().iterator();
+      while (iter.hasNext()) {
+        listAttempts.add(iter.next().getValue()
+            .createApplicationAttemptReport());
+      }
+      response = GetApplicationAttemptsResponse.newInstance(listAttempts);
+    } else {
+      throw new YarnException("User " + callerUGI.getShortUserName()
+          + " does not have privilage to see this aplication " + appId);
+    }
+    return response;
+  }
+  
+  /*
+   * (non-Javadoc)
+   * 
+   * we're going to fix the issue of showing non-running containers of the
+   * running application in YARN-1794
+   */
+  @Override
+  public GetContainerReportResponse getContainerReport(
+      GetContainerReportRequest request) throws YarnException, IOException {
+    ContainerId containerId = request.getContainerId();
+    ApplicationAttemptId appAttemptId = containerId.getApplicationAttemptId();
+    ApplicationId appId = appAttemptId.getApplicationId();
+    UserGroupInformation callerUGI;
+    try {
+      callerUGI = UserGroupInformation.getCurrentUser();
+    } catch (IOException ie) {
+      LOG.info("Error getting UGI ", ie);
+      throw RPCUtil.getRemoteException(ie);
+    }
+    RMApp application = this.rmContext.getRMApps().get(appId);
+    if (application == null) {
+      // If the RM doesn't have the application, throw
+      // ApplicationNotFoundException and let client to handle.
+      throw new ApplicationNotFoundException("Application with id '" + appId
+          + "' doesn't exist in RM.");
+    }
+    boolean allowAccess = checkAccess(callerUGI, application.getUser(),
+        ApplicationAccessType.VIEW_APP, application);
+    GetContainerReportResponse response = null;
+    if (allowAccess) {
+      RMAppAttempt appAttempt = application.getAppAttempts().get(appAttemptId);
+      if (appAttempt == null) {
+        throw new ApplicationAttemptNotFoundException("ApplicationAttempt "
+            + appAttemptId + " Not Found in RM");
+      }
+      RMContainer rmConatiner = this.rmContext.getScheduler().getRMContainer(
+          containerId);
+      if (rmConatiner == null) {
+        throw new ContainerNotFoundException("Container with id " + containerId
+            + " not found");
+      }
+      response = GetContainerReportResponse.newInstance(rmConatiner
+          .createContainerReport());
+    } else {
+      throw new YarnException("User " + callerUGI.getShortUserName()
+          + " does not have privilage to see this aplication " + appId);
+    }
+    return response;
+  }
+  
+  /*
+   * (non-Javadoc)
+   * 
+   * we're going to fix the issue of showing non-running containers of the
+   * running application in YARN-1794"
+   */
+  @Override
+  public GetContainersResponse getContainers(GetContainersRequest request)
+      throws YarnException, IOException {
+    ApplicationAttemptId appAttemptId = request.getApplicationAttemptId();
+    ApplicationId appId = appAttemptId.getApplicationId();
+    UserGroupInformation callerUGI;
+    try {
+      callerUGI = UserGroupInformation.getCurrentUser();
+    } catch (IOException ie) {
+      LOG.info("Error getting UGI ", ie);
+      throw RPCUtil.getRemoteException(ie);
+    }
+    RMApp application = this.rmContext.getRMApps().get(appId);
+    if (application == null) {
+      // If the RM doesn't have the application, throw
+      // ApplicationNotFoundException and let client to handle.
+      throw new ApplicationNotFoundException("Application with id '" + appId
+          + "' doesn't exist in RM.");
+    }
+    boolean allowAccess = checkAccess(callerUGI, application.getUser(),
+        ApplicationAccessType.VIEW_APP, application);
+    GetContainersResponse response = null;
+    if (allowAccess) {
+      RMAppAttempt appAttempt = application.getAppAttempts().get(appAttemptId);
+      if (appAttempt == null) {
+        throw new ApplicationAttemptNotFoundException("ApplicationAttempt "
+            + appAttemptId + " Not Found in RM");
+      }
+      Collection<RMContainer> rmContainers = Collections.emptyList();
+      SchedulerAppReport schedulerAppReport =
+          this.rmContext.getScheduler().getSchedulerAppInfo(appAttemptId);
+      if (schedulerAppReport != null) {
+        rmContainers = schedulerAppReport.getLiveContainers();
+      }
+      List<ContainerReport> listContainers = new ArrayList<ContainerReport>();
+      for (RMContainer rmContainer : rmContainers) {
+        listContainers.add(rmContainer.createContainerReport());
+      }
+      response = GetContainersResponse.newInstance(listContainers);
+    } else {
+      throw new YarnException("User " + callerUGI.getShortUserName()
+          + " does not have privilage to see this aplication " + appId);
+    }
+    return response;
+  }
+
+  @Override

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS54 INS60 INS25 INS60 INS60 INS25 INS41 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS54 INS60 INS25 INS60 INS60 INS25 INS41 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS54 INS60 INS25 INS60 INS60 INS25 INS41 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS54 INS60 INS25 INS60 INS60 INS25 INS41 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS42 INS8 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS42 INS8 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS42 INS8 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS42 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS42 INS42 INS33 INS60 INS25 INS60 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS42 INS42 INS33 INS60 INS60 INS60 INS61 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS42 INS42 INS33 INS60 INS25 INS60 INS25 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS42 INS42 INS33 INS60 INS25 INS60 INS60 INS25 INS60 INS70 INS21 INS53 INS42 INS42 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS32 INS14 INS42 INS42 INS32 INS40 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS7 INS14 INS42 INS42 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS40 INS42 INS74 INS59 INS74 INS59 INS74 INS59 INS32 INS8 INS7 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS40 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS7 INS14 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS40 INS42 INS43 INS59 INS27 INS8 INS74 INS59 INS43 INS59 INS27 INS8 INS74 INS59 INS44 INS42 INS8 INS7 INS14 INS42 INS32 INS42 INS32 INS32 INS22 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS32 INS43 INS27 INS42 INS32 INS42 INS32 INS32 INS22 INS42 INS43 INS27 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS74 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS43 INS27 INS42 INS32 INS42 INS32 INS32 INS22 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS43 INS27 INS42 INS32 INS42 INS32 INS32 INS22 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS43 INS43 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS22 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS22 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS45 INS52 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42