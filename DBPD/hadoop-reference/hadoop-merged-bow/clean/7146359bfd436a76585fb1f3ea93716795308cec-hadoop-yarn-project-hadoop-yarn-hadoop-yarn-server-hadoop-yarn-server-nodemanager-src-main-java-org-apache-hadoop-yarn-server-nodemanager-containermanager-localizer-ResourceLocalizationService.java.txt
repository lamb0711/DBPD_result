YARN-5027. NM should clean up app log dirs after NM restart. Contributed by sandflee

+        cleanupLogDirs(lfs, delService);
-  private void initializeLogDir(FileContext lfs, String logDir) {
+  private void initializeLogDir(FileContext fs, String logDir) {
-      lfs.mkdir(new Path(logDir), null, true);
+      fs.mkdir(new Path(logDir), null, true);
+  private void cleanupLogDirs(FileContext fs, DeletionService del) {
+    for (String logDir : dirsHandler.getLogDirsForCleanup()) {
+      try {
+        cleanupLogDir(fs, del, logDir);
+      } catch (IOException e) {
+        LOG.warn("failed to cleanup app log dir " + logDir, e);
+      }
+    }
+  }
+
+  private void cleanupLogDir(FileContext fs, DeletionService del,
+      String logDir) throws IOException {
+    if (!fs.util().exists(new Path(logDir))){
+      return;
+    }
+    renameAppLogDir(logDir);
+    deleteAppLogDir(fs, del, logDir);
+  }
+
+  private void renameAppLogDir(String logDir) throws IOException {
+    long currentTimeStamp = System.currentTimeMillis();
+    RemoteIterator<FileStatus> fileStatuses =
+        lfs.listStatus(new Path(logDir));
+    if (fileStatuses != null) {
+      while (fileStatuses.hasNext()) {
+        FileStatus fileStatus = fileStatuses.next();
+        String appName = fileStatus.getPath().getName();
+        if (appName.matches("^application_\\d+_\\d+$")) {
+          lfs.rename(new Path(logDir, appName),
+              new Path(logDir, appName + "_DEL_" + currentTimeStamp));
+        }
+      }
+    }
+  }
+
+  private void deleteAppLogDir(FileContext fs, DeletionService del,
+      String logDir) throws IOException {
+    RemoteIterator<FileStatus> fileStatuses =
+        fs.listStatus(new Path(logDir));
+    if (fileStatuses != null) {
+      while (fileStatuses.hasNext()) {
+        FileStatus fileStatus = fileStatuses.next();
+        String appName = fileStatus.getPath().getName();
+        if (appName.matches("^application_\\d+_\\d+_DEL_\\d+$")) {
+          LOG.info("delete app log dir," + appName);
+          del.delete(null, fileStatus.getPath());
+        }
+      }
+    }
+  }
+

INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 UPD42 INS43 INS42 INS43 INS42 INS70 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS21 INS21 INS43 INS42 INS42 INS60 INS60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS42 INS42 INS44 INS32 INS8 INS42 INS42 INS42 INS38 INS8 INS32 INS32 INS42 INS39 INS59 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS43 INS42 INS42 INS42 INS54 INS32 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS61 INS43 INS43 INS42 INS32 INS42 INS33 INS61 INS42 INS8 INS12 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS8 INS42 INS42 INS42 INS42 INS14 INS32 INS8 INS21 UPD42 INS21 INS44 INS8 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS25 INS43 INS42 INS42 INS42 INS60 INS60 INS25 INS32 INS32 INS43 INS42 INS21 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS33 INS32 INS43 INS42 INS42 INS43 INS42 INS27 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42