HDFS-6875. Archival Storage: support migration for a list of specified paths. Contributed by Jing Zhao.

+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import org.apache.commons.cli.*;
+import java.io.BufferedReader;
+import java.io.FileReader;
+  private final List<Path> targetPaths;
+    this.targetPaths = nnc.getTargetPaths();
-        hasRemaining = processDirRecursively("", dfs.getFileInfo("/"));
+        for (Path target : targetPaths) {
+          hasRemaining = processDirRecursively("", dfs.getFileInfo(target
+              .toUri().getPath()));
+        }
-  static int run(Collection<URI> namenodes, Configuration conf)
+  static int run(Map<URI, List<Path>> namenodes, Configuration conf)
-    
+
-        + Mover.class.getSimpleName();
+        + Mover.class.getSimpleName()
+        + " [-p <space separated files/dirs> specify a list of files/dirs to migrate]"
+        + " [-f <local file name>            specify a local file containing files/dirs to migrate]";
+
+    private static Options buildCliOptions() {
+      Options opts = new Options();
+      Option file = OptionBuilder.withArgName("pathsFile").hasArg()
+          .withDescription("a local file containing files/dirs to migrate")
+          .create("f");
+      Option paths = OptionBuilder.withArgName("paths").hasArgs()
+          .withDescription("specify space separated files/dirs to migrate")
+          .create("p");
+      OptionGroup group = new OptionGroup();
+      group.addOption(file);
+      group.addOption(paths);
+      opts.addOptionGroup(group);
+      return opts;
+    }
+
+    private static String[] readPathFile(String file) throws IOException {
+      List<String> list = Lists.newArrayList();
+      BufferedReader reader = new BufferedReader(new FileReader(file));
+      try {
+        String line;
+        while ((line = reader.readLine()) != null) {
+          if (!line.trim().isEmpty()) {
+            list.add(line);
+          }
+        }
+      } finally {
+        IOUtils.cleanup(LOG, reader);
+      }
+      return list.toArray(new String[list.size()]);
+    }
+
+    private static Map<URI, List<Path>> getNameNodePaths(CommandLine line,
+        Configuration conf) throws Exception {
+      Map<URI, List<Path>> map = Maps.newHashMap();
+      String[] paths = null;
+      if (line.hasOption("f")) {
+        paths = readPathFile(line.getOptionValue("f"));
+      } else if (line.hasOption("p")) {
+        paths = line.getOptionValues("p");
+      }
+      Collection<URI> namenodes = DFSUtil.getNsServiceRpcUris(conf);
+      if (paths == null || paths.length == 0) {
+        for (URI namenode : namenodes) {
+          map.put(namenode, null);
+        }
+        return map;
+      }
+      final URI singleNs = namenodes.size() == 1 ?
+          namenodes.iterator().next() : null;
+      for (String path : paths) {
+        Path target = new Path(path);
+        if (!target.isUriPathAbsolute()) {
+          throw new IllegalArgumentException("The path " + target
+              + " is not absolute");
+        }
+        URI targetUri = target.toUri();
+        if ((targetUri.getAuthority() == null || targetUri.getScheme() ==
+            null) && singleNs == null) {
+          // each path must contains both scheme and authority information
+          // unless there is only one name service specified in the
+          // configuration
+          throw new IllegalArgumentException("The path " + target
+              + " does not contain scheme and authority thus cannot identify"
+              + " its name service");
+        }
+        URI key = singleNs;
+        if (singleNs == null) {
+          key = new URI(targetUri.getScheme(), targetUri.getAuthority(),
+              null, null, null);
+          if (!namenodes.contains(key)) {
+            throw new IllegalArgumentException("Cannot resolve the path " +
+                target + ". The namenode services specified in the " +
+                "configuration: " + namenodes);
+          }
+        }
+        List<Path> targets = map.get(key);
+        if (targets == null) {
+          targets = Lists.newArrayList();
+          map.put(key, targets);
+        }
+        targets.add(Path.getPathWithoutSchemeAndAuthority(target));
+      }
+      return map;
+    }
+
+    @VisibleForTesting
+    static Map<URI, List<Path>> getNameNodePathsToMove(Configuration conf,
+        String... args) throws Exception {
+      final Options opts = buildCliOptions();
+      CommandLineParser parser = new GnuParser();
+      CommandLine commandLine = parser.parse(opts, args, true);
+      return getNameNodePaths(commandLine, conf);
+    }
-        final Collection<URI> namenodes = DFSUtil.getNsServiceRpcUris(conf);
-        return Mover.run(namenodes, conf);
+        final Map<URI, List<Path>> map = getNameNodePathsToMove(conf, args);
+        return Mover.run(map, conf);
+      } catch (ParseException e) {
+        System.out.println(e + ".  Exiting ...");
+        return ExitStatus.ILLEGAL_ARGUMENTS.getExitCode();
+      } catch (IllegalArgumentException e) {
+        System.out.println(e + ".  Exiting ...");
+        return ExitStatus.ILLEGAL_ARGUMENTS.getExitCode();

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS83 INS83 INS74 INS59 INS31 INS31 INS31 INS31 INS43 INS43 INS42 INS21 UPD74 INS83 INS83 INS43 INS42 INS8 INS83 INS83 INS5 INS42 INS44 INS43 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS7 UPD43 INS74 INS42 INS60 INS60 INS60 INS60 INS21 INS21 INS21 INS41 INS43 INS85 INS43 INS42 INS42 INS60 INS60 INS54 INS41 INS43 INS43 INS74 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 MOV60 INS25 INS60 INS70 INS41 INS42 INS43 INS43 INS74 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS41 INS22 INS32 INS8 UPD42 INS43 INS43 INS45 INS45 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS8 INS8 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS74 INS59 INS5 INS59 INS32 INS8 INS25 INS27 INS8 INS83 INS43 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS12 INS12 INS52 INS42 INS42 INS42 INS70 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS60 INS61 INS21 INS42 INS42 INS3 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS43 INS85 INS42 INS33 INS42 INS42 INS45 INS21 INS32 INS8 INS27 INS27 INS70 INS41 INS42 INS42 INS16 INS43 INS42 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS44 INS8 INS44 INS8 INS44 INS42 INS8 INS43 INS32 INS42 INS45 INS32 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS43 INS14 INS43 INS59 INS27 INS8 INS32 INS5 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS7 INS42 INS42 INS45 INS21 INS42 INS33 INS40 INS34 INS44 INS42 INS8 INS42 INS27 INS32 INS33 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS74 INS59 INS27 INS8 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS9 INS83 INS74 INS59 INS43 INS42 INS21 INS41 INS43 INS42 INS21 INS41 INS43 INS42 MOV21 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS36 INS33 INS25 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS43 INS42 INS21 INS32 INS34 INS32 INS42 INS42 INS42 INS14 INS32 INS53 INS42 INS42 INS32 INS36 INS27 INS53 INS42 INS42 INS42 INS42 INS33 INS21 INS25 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS43 INS43 INS74 INS42 INS32 UPD42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS7 INS38 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS33 INS14 INS7 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS40 INS42 INS27 INS40 INS42 INS40 INS42 INS27 INS40 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS32 INS21 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS33 INS42 INS43 INS27 INS27 INS27 INS43 INS27 INS42 INS14 INS32 INS53 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS45 INS32 INS33 INS32 INS33 INS42 INS45 INS42 INS45 INS45 INS43 INS32 INS32 INS33 INS33 INS33 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS32 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 DEL45 DEL8 DEL83