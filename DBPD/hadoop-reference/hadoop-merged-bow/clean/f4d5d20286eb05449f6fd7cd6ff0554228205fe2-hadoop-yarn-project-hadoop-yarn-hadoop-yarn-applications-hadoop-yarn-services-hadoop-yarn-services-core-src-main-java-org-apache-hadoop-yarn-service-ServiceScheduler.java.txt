YARN-7486. Race condition in service AM that can cause NPE. Contributed by Jian He

-  AsyncDispatcher compInstanceDispatcher;
-    // register metrics
+    // register metrics,
+    dispatcher.register(ComponentInstanceEventType.class,
+        new ComponentInstanceEventHandler());
-    compInstanceDispatcher =
-        new AsyncDispatcher("CompInstance dispatcher");
-    compInstanceDispatcher.register(ComponentInstanceEventType.class,
-        new ComponentInstanceEventHandler());
-    addIfService(compInstanceDispatcher);
-    List<Container> recoveredContainers = response
+    List<Container> containersFromPrevAttempt = response
-        recoveredContainers.size());
+        containersFromPrevAttempt.size());
-    for (Container container : recoveredContainers) {
-      LOG.info("Handling container {} from previous attempt",
-          container.getId());
+    for (Container container : containersFromPrevAttempt) {
+      LOG.info("Handling {} from previous attempt", container.getId());
-        Collection<AMRMClient.ContainerRequest> requests = amRMClient
-            .getMatchingRequests(container.getAllocationRequestId());
-        LOG.info("[COMPONENT {}]: {} outstanding container requests.",
-            comp.getName(), requests.size());
-        // remove the corresponding request
-        if (requests.iterator().hasNext()) {
-          LOG.info("[COMPONENT {}]: removing one container request.", comp
-              .getName());
-          AMRMClient.ContainerRequest request = requests.iterator().next();
-          amRMClient.removeContainerRequest(request);
+        try {
+          Collection<AMRMClient.ContainerRequest> requests = amRMClient
+              .getMatchingRequests(container.getAllocationRequestId());
+          LOG.info("[COMPONENT {}]: remove {} outstanding container requests " +
+                  "for allocateId " + container.getAllocationRequestId(),
+              comp.getName(), requests.size());
+          // remove the corresponding request
+          if (requests.iterator().hasNext()) {
+            AMRMClient.ContainerRequest request = requests.iterator().next();
+            amRMClient.removeContainerRequest(request);
+          }
+        } catch(Exception e) {
+          //TODO Due to YARN-7490, exception may be thrown, catch and ignore for
+          //now.
+          LOG.error("Exception when removing the matching requests. ", e);
-              .setInstance(instance);
+              .setInstance(instance).setContainerId(containerId);
-  public AsyncDispatcher getCompInstanceDispatcher() {
-    return compInstanceDispatcher;
-  }
-

MOV21 UPD42 UPD42 UPD42 UPD42 INS54 INS32 UPD45 INS8 INS12 MOV32 INS42 INS42 MOV60 MOV21 MOV25 INS44 INS8 INS43 INS42 INS21 INS27 INS42 INS32 INS45 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL45 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL45 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31