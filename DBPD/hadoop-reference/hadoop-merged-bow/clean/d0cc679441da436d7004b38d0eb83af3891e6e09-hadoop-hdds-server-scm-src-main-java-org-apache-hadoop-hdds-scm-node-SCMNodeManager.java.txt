HDDS-817. Create SCM metrics for disk from node report. Contributed by Bharat Viswanadham.

+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos;
+import java.util.ArrayList;
+
+      // Updating the storage report for the datanode.
+      // I dont think we will get NotFound exception, as we are taking
+      // nodeInfo from nodeStateMap, as I see it is not being removed from
+      // the map, just we change the states. And during first time
+      // registration we call this, after adding to nodeStateMap. And also
+      // from eventhandler it is called only if it has node Report.
+      DatanodeInfo datanodeInfo = nodeStateManager.getNode(dnId);
+      datanodeInfo.updateStorageReports(nodeReport.getStorageReportList());
+
+  @Override
+  public Map<String, Long> getNodeInfo() {
+    long diskCapacity = 0L;
+    long diskUsed = 0L;
+    long diskRemaning = 0L;
+
+    long ssdCapacity = 0L;
+    long ssdUsed = 0L;
+    long ssdRemaining = 0L;
+
+    List<DatanodeDetails> healthyNodes =  getNodes(NodeState.HEALTHY);
+    List<DatanodeDetails> staleNodes = getNodes(NodeState.STALE);
+
+    List<DatanodeDetails> datanodes = new ArrayList<>(healthyNodes);
+    datanodes.addAll(staleNodes);
+
+    for (DatanodeDetails datanodeDetails : datanodes) {
+      DatanodeInfo dnInfo = (DatanodeInfo) datanodeDetails;
+      List<StorageReportProto> storageReportProtos = dnInfo.getStorageReports();
+      for (StorageReportProto reportProto : storageReportProtos) {
+        if (reportProto.getStorageType() ==
+            StorageContainerDatanodeProtocolProtos.StorageTypeProto.DISK) {
+          diskCapacity += reportProto.getCapacity();
+          diskRemaning += reportProto.getRemaining();
+          diskUsed += reportProto.getScmUsed();
+        } else if (reportProto.getStorageType() ==
+            StorageContainerDatanodeProtocolProtos.StorageTypeProto.SSD) {
+          ssdCapacity += reportProto.getCapacity();
+          ssdRemaining += reportProto.getRemaining();
+          ssdUsed += reportProto.getScmUsed();
+        }
+      }
+    }
+
+    Map<String, Long> nodeInfo = new HashMap<>();
+    nodeInfo.put("DISKCapacity", diskCapacity);
+    nodeInfo.put("DISKUsed", diskUsed);
+    nodeInfo.put("DISKRemaining", diskRemaning);
+
+    nodeInfo.put("SSDCapacity", ssdCapacity);
+    nodeInfo.put("SSDUsed", ssdUsed);
+    nodeInfo.put("SSDRemaining", ssdRemaining);
+    return nodeInfo;
+  }
+
+
+
+

INS26 INS26 INS40 INS40 INS31 INS78 INS83 INS74 INS42 INS8 INS42 INS43 INS43 INS43 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS70 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS74 INS59 INS32 INS44 INS42 INS8 INS74 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS60 INS21 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS60 INS60 INS70 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS74 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS74 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS11 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS25 INS42 INS42 INS32 INS40 INS21 INS21 INS21 INS27 INS8 INS42 INS42 INS7 INS7 INS7 INS32 INS40 INS21 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42