HADOOP-14935. Azure: POSIX permissions are taking effect in access() method even when authorization is enabled.
Contributed by Santhosh G Nayak

+import org.apache.hadoop.fs.permission.FsAction;
+import org.apache.hadoop.security.AccessControlException;
-
-    // Capture the absolute path and the path to key.
-    Path absolutePath = makeAbsolute(f);
-
-    if (!isRenamePendingFile(absolutePath)) {
-      Path ancestor = getAncestor(absolutePath);
-      if (ancestor.equals(absolutePath) && !ancestor.equals(new Path("/"))) {
-        performAuthCheck(ancestor.getParent(), WasbAuthorizationOperations.READ,
-            "getFileStatus", absolutePath);
-      }
-      else {
-        performAuthCheck(ancestor, WasbAuthorizationOperations.READ,
-            "getFileStatus", absolutePath);
-      }
-    }
-
-  protected FileStatus getFileStatusInternal(Path f) throws FileNotFoundException, IOException {
+  /**
+   * Inner implementation of {@link #getFileStatus(Path)}.
+   * Return a file status object that represents the path.
+   * @param f The path we want information from
+   * @return a FileStatus object
+   * @throws FileNotFoundException when the path does not exist
+   * @throws IOException Other failure
+   */
+  private FileStatus getFileStatusInternal(Path f) throws FileNotFoundException, IOException {
+  @Override
+  public void access(Path path, FsAction mode) throws IOException {
+    if (azureAuthorization && authorizer != null) {
+      try {
+        // Required to check the existence of the path.
+        getFileStatus(path);
+        switch (mode) {
+        case READ:
+        case READ_EXECUTE:
+          performAuthCheck(path, WasbAuthorizationOperations.READ, "access", path);
+          break;
+        case WRITE:
+        case WRITE_EXECUTE:
+          performAuthCheck(path, WasbAuthorizationOperations.WRITE, "access",
+              path);
+          break;
+        case READ_WRITE:
+        case ALL:
+          performAuthCheck(path, WasbAuthorizationOperations.READ, "access", path);
+          performAuthCheck(path, WasbAuthorizationOperations.WRITE, "access",
+              path);
+          break;
+        case EXECUTE:
+        case NONE:
+        default:
+          break;
+        }
+      } catch (WasbAuthorizationException wae){
+        throw new AccessControlException(wae);
+      }
+    } else {
+      super.access(path, mode);
+    }
+  }
+

INS26 INS26 MOV31 INS40 INS40 INS31 MOV78 INS83 MOV43 INS42 MOV44 MOV43 MOV43 INS8 INS29 UPD83 INS78 INS39 UPD42 INS44 INS44 INS43 INS8 MOV21 MOV41 INS65 INS65 INS65 INS65 INS65 INS42 MOV43 INS42 INS43 INS42 INS42 MOV25 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS8 INS68 INS42 INS27 INS54 INS21 INS42 INS69 INS42 INS33 INS8 INS12 INS48 MOV43 INS21 INS50 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS49 INS49 INS21 INS10 INS49 INS49 INS21 INS10 INS49 INS49 INS21 INS21 INS10 INS49 INS49 INS49 INS10 INS43 INS42 INS53 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV32 MOV32 INS42 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS40 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS45 INS42 UPD42 MOV42 UPD45 UPD42 UPD42 UPD40 UPD45 UPD42 INS43 INS42 INS42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL59 DEL60 DEL32 DEL45 DEL14 DEL32 DEL38 DEL27 DEL21 DEL8 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8