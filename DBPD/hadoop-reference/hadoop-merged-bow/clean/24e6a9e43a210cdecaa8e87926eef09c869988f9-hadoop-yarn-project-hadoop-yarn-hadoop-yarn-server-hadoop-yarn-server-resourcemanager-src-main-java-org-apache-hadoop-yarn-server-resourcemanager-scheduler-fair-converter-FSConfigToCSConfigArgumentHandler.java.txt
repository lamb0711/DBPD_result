YARN-10067. Add dry-run feature to FS-CS converter tool. Contributed by Peter Bacsko

+import java.io.File;
+import java.util.function.Supplier;
+
-import java.io.File;
+import com.google.common.annotations.VisibleForTesting;
-  private final FSConfigToCSConfigConverter converter;
-  public FSConfigToCSConfigArgumentHandler(FSConfigToCSConfigConverter
-      converter) {
-    this.converter = converter;
+  private FSConfigToCSConfigRuleHandler ruleHandler;
+  private FSConfigToCSConfigConverterParams converterParams;
+  private ConversionOptions conversionOptions;
+
+  private Supplier<FSConfigToCSConfigConverter>
+      converterFunc = this::getConverter;
+
+  public FSConfigToCSConfigArgumentHandler() {
+    this.conversionOptions = new ConversionOptions(new DryRunResultHolder(),
+        false);
+  }
+
+  @VisibleForTesting
+  FSConfigToCSConfigArgumentHandler(ConversionOptions conversionOptions) {
+    this.conversionOptions = conversionOptions;
+    DRY_RUN("dry run", "d", "dry-run", "Performs a dry-run of the conversion." +
+            "Outputs whether the conversion is possible or not.", false),
+    int retVal = 0;
-      checkOptionPresent(cliParser, CliOption.YARN_SITE);
-      checkOutputDefined(cliParser);
+      FSConfigToCSConfigConverter converter =
+          prepareAndGetConverter(cliParser);
-      FSConfigToCSConfigConverterParams params = validateInputFiles(cliParser);
-      converter.convert(params);
+      converter.convert(converterParams);
-      return -1;
+      retVal = -1;
-      logAndStdErr(e, msg);
-      return -1;
+      handleException(e, msg);
+      retVal = -1;
-      logAndStdErr(e, msg);
-      return -1;
+      handleException(e, msg);
+      retVal = -1;
-      logAndStdErr(e, msg);
-      return -1;
+      handleException(e, msg);
+      retVal = -1;
-    return 0;
+    conversionOptions.handleParsingFinished();
+
+    return retVal;
-  private void logAndStdErr(Exception e, String msg) {
+  private void handleException(Exception e, String msg) {
+    conversionOptions.handleGenericException(e, msg);
+  }
+
+  static void logAndStdErr(Exception e, String msg) {
+  private FSConfigToCSConfigConverter prepareAndGetConverter(
+      CommandLine cliParser) {
+    conversionOptions.setDryRun(
+        cliParser.hasOption(CliOption.DRY_RUN.shortSwitch));
+
+    checkOptionPresent(cliParser, CliOption.YARN_SITE);
+    checkOutputDefined(cliParser);
+
+    converterParams = validateInputFiles(cliParser);
+    ruleHandler = new FSConfigToCSConfigRuleHandler(conversionOptions);
+
+    return converterFunc.get();
+  }
+
+
+  private FSConfigToCSConfigConverter getConverter() {
+    return new FSConfigToCSConfigConverter(ruleHandler, conversionOptions);
+  }
+
+  @VisibleForTesting
+  void setConverterSupplier(Supplier<FSConfigToCSConfigConverter>
+      supplier) {
+    this.converterFunc = supplier;
+  }

MOV26 INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 MOV83 INS43 INS59 UPD83 MOV83 MOV43 INS59 INS83 INS43 INS59 INS83 INS74 MOV59 MOV83 MOV42 INS8 INS78 INS42 MOV44 INS8 INS72 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 MOV8 INS42 INS42 INS42 INS42 INS42 INS43 MOV43 UPD42 INS90 INS21 INS42 INS43 UPD42 INS21 INS42 INS45 INS45 INS45 INS27 INS9 INS60 INS21 INS41 INS43 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS21 MOV21 MOV21 INS21 INS21 INS41 INS42 INS41 INS42 INS74 INS42 INS42 INS52 INS42 INS7 INS42 INS7 INS45 INS45 INS39 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS7 INS7 INS32 INS14 INS43 INS43 INS22 INS14 INS22 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV32 INS42 INS14 INS42 INS42 INS43 INS42 INS42 INS42 INS42 UPD42 INS52 INS42 INS43 INS14 INS9 INS52 INS42 MOV43 INS21 INS21 INS21 INS21 INS42 INS42 INS40 INS43 INS42 INS42 UPD42 INS42 INS43 INS42 INS32 UPD42 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 MOV38 UPD42 INS42 MOV38 UPD42 INS42 MOV38 UPD42 INS42 MOV38 DEL23 DEL31 DEL42 DEL41 DEL41 DEL41 DEL41 DEL34 DEL41