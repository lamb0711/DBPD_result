YARN-1864. Fair Scheduler Dynamic Hierarchical User Queues (Ashwin Shankar via Sandy Ryza)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593190 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Collection;
+import java.util.Set;
+import org.w3c.dom.NodeList;
+
+import com.google.common.annotations.VisibleForTesting;
-      Groups groups, Collection<String> configuredQueues) throws IOException {
-    String queue = getQueueForApp(requestedQueue, user, groups, configuredQueues);
-    if (create || configuredQueues.contains(queue)) {
+      Groups groups, Map<FSQueueType, Set<String>> configuredQueues)
+      throws IOException {
+   String queue = getQueueForApp(requestedQueue, user, groups,
+        configuredQueues);
+    if (create || configuredQueues.get(FSQueueType.LEAF).contains(queue)
+        || configuredQueues.get(FSQueueType.PARENT).contains(queue)) {
-  public void initializeFromXml(Element el) {
+  public void initializeFromXml(Element el)
+      throws AllocationConfigurationException {
-      Groups groups, Collection<String> configuredQueues) throws IOException;
+      Groups groups, Map<FSQueueType, Set<String>> configuredQueues)
+      throws IOException;
-    protected String getQueueForApp(String requestedQueue,
-        String user, Groups groups, Collection<String> configuredQueues) {
+    protected String getQueueForApp(String requestedQueue, String user,
+        Groups groups, Map<FSQueueType, Set<String>> configuredQueues) {
-    protected String getQueueForApp(String requestedQueue,
-        String user, Groups groups, 
-        Collection<String> configuredQueues) throws IOException {
+    protected String getQueueForApp(String requestedQueue, String user,
+        Groups groups, Map<FSQueueType, Set<String>> configuredQueues)
+        throws IOException {
-    protected String getQueueForApp(String requestedQueue,
-        String user, Groups groups, 
-        Collection<String> configuredQueues) throws IOException {
+    protected String getQueueForApp(String requestedQueue, String user,
+        Groups groups, Map<FSQueueType, Set<String>> configuredQueues)
+        throws IOException {
-        if (configuredQueues.contains("root." + groupNames.get(i))) {
+        String group = groupNames.get(i);
+        if (configuredQueues.get(FSQueueType.LEAF).contains("root." + group)
+            || configuredQueues.get(FSQueueType.PARENT).contains(
+                "root." + group)) {
+   * Places apps in queues with name of the submitter under the queue
+   * returned by the nested rule.
+   */
+  public static class NestedUserQueue extends QueuePlacementRule {
+    @VisibleForTesting
+    QueuePlacementRule nestedRule;
+
+    /**
+     * Parse xml and instantiate the nested rule 
+     */
+    @Override
+    public void initializeFromXml(Element el)
+        throws AllocationConfigurationException {
+      NodeList elements = el.getChildNodes();
+
+      for (int i = 0; i < elements.getLength(); i++) {
+        Node node = elements.item(i);
+        if (node instanceof Element) {
+          Element element = (Element) node;
+          if ("rule".equals(element.getTagName())) {
+            QueuePlacementRule rule = QueuePlacementPolicy
+                .createAndInitializeRule(node);
+            if (rule == null) {
+              throw new AllocationConfigurationException(
+                  "Unable to create nested rule in nestedUserQueue rule");
+            }
+            this.nestedRule = rule;
+            break;
+          } else {
+            continue;
+          }
+        }
+      }
+
+      if (this.nestedRule == null) {
+        throw new AllocationConfigurationException(
+            "No nested rule specified in <nestedUserQueue> rule");
+      }
+      super.initializeFromXml(el);
+    }
+    
+    @Override
+    protected String getQueueForApp(String requestedQueue, String user,
+        Groups groups, Map<FSQueueType, Set<String>> configuredQueues)
+        throws IOException {
+      // Apply the nested rule
+      String queueName = nestedRule.assignAppToQueue(requestedQueue, user,
+          groups, configuredQueues);
+      
+      if (queueName != null && queueName != "") {
+        if (!queueName.startsWith("root.")) {
+          queueName = "root." + queueName;
+        }
+        
+        // Verify if the queue returned by the nested rule is an configured leaf queue,
+        // if yes then skip to next rule in the queue placement policy
+        if (configuredQueues.get(FSQueueType.LEAF).contains(queueName)) {
+          return "";
+        }
+        return queueName + "." + user;
+      }
+      return queueName;
+    }
+
+    @Override
+    public boolean isTerminal() {
+      return false;
+    }
+  }
+  
+  /**
-    protected String getQueueForApp(String requestedQueue,
-        String user, Groups groups, Collection<String> configuredQueues) {
+    protected String getQueueForApp(String requestedQueue, String user,
+        Groups groups, Map<FSQueueType, Set<String>> configuredQueues) {
-        Groups groups, Collection<String> configuredQueues) {
+        Groups groups, Map<FSQueueType, Set<String>> configuredQueues) {
-        Groups groups, Collection<String> configuredQueues) {
+        Groups groups, Map<FSQueueType, Set<String>> configuredQueues) {
-        Groups groups, Collection<String> configuredQueues) {
+        Groups groups, Map<FSQueueType, Set<String>> configuredQueues) {

MOV26 INS26 INS26 UPD40 INS40 INS40 INS55 INS43 INS44 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS74 INS42 INS74 INS42 INS65 INS42 INS78 INS43 INS59 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 MOV44 INS43 INS8 INS78 INS83 INS39 INS42 INS8 MOV44 INS44 INS43 INS43 UPD74 MOV74 INS43 INS43 INS74 INS74 INS74 INS74 INS66 INS66 INS42 INS42 INS42 INS65 INS42 INS43 INS42 INS42 INS60 INS24 INS25 INS21 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS25 INS41 INS42 INS41 INS74 INS74 INS74 INS74 INS42 INS42 INS42 UPD43 INS32 INS42 INS42 INS43 INS43 INS43 INS43 INS74 INS43 INS43 INS74 INS43 INS43 INS74 INS66 INS42 INS43 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS48 INS42 INS42 INS42 INS43 INS43 UPD74 MOV74 INS43 INS59 INS27 INS8 INS42 INS9 INS43 INS43 INS74 INS43 INS43 UPD74 MOV74 INS43 INS43 UPD74 MOV74 INS43 INS43 INS74 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 MOV43 MOV43 INS42 INS42 UPD43 MOV43 MOV43 INS42 INS42 UPD43 MOV43 MOV43 INS60 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS22 INS33 INS53 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 INS32 INS27 INS27 INS25 INS25 INS41 INS42 INS42 UPD43 MOV43 MOV43 INS42 INS42 UPD43 INS42 INS42 UPD43 INS42 INS42 INS43 INS43 MOV42 INS42 INS40 INS42 INS42 INS40 UPD42 UPD42 UPD42 INS43 INS59 INS27 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS62 INS8 INS52 INS42 INS14 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS45 INS38 INS8 INS32 INS8 INS27 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 MOV32 INS32 INS32 INS42 INS42 INS32 INS42 INS43 INS60 INS25 INS43 INS45 INS32 INS21 INS32 INS42 INS42 INS41 INS42 INS45 INS42 INS32 MOV42 MOV27 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS45 INS7 INS42 INS42 INS40 INS45 MOV42 INS42 INS40 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS11 INS45 INS42 INS32 INS60 INS25 INS21 INS10 INS18 INS42 INS27 INS43 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS7 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS22 INS42 INS42 INS42 INS42 INS14 INS52 INS42 INS43 INS45 INS42 DEL74 DEL74 DEL74 DEL32 DEL74 DEL42 DEL43 DEL74 DEL42 DEL44