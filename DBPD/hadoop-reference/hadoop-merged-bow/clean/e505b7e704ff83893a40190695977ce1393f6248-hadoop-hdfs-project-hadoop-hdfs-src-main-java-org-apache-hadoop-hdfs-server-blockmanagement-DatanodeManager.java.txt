HDFS-3208. Bogus entries in hosts files are incorrectly displayed in the report. Contributed by Eli Collins


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1310138 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.net.InetAddresses;
+
-      // get the node's IP address
-      // get the node's host name
-      String hostName = node.getHostName();
-      int colon = hostName.indexOf(":");
-      hostName = (colon==-1)?hostName:hostName.substring(0,colon);
-      names.add(hostName);
+      names.add(node.getHostName());
+  /**
+   * Parse a DatanodeID from a hosts file entry
+   * @param hostLine of form [hostname|ip][:port]?
+   * @return DatanodeID constructed from the given string
+   */
+  private DatanodeID parseDNFromHostsEntry(String hostLine) {
+    DatanodeID dnId;
+    String hostStr;
+    int port;
+    int idx = hostLine.indexOf(':');
+
+    if (-1 == idx) {
+      hostStr = hostLine;
+      port = DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;
+    } else {
+      hostStr = hostLine.substring(0, idx);
+      port = Integer.valueOf(hostLine.substring(idx));
+    }
+
+    if (InetAddresses.isInetAddress(hostStr)) {
+      // The IP:port is sufficient for listing in a report
+      dnId = new DatanodeID(hostStr, "", port);
+    } else {
+      String ipAddr = "";
+      try {
+        ipAddr = InetAddress.getByName(hostStr).getHostAddress();
+      } catch (UnknownHostException e) {
+        LOG.warn("Invalid hostname " + hostStr + " in hosts file");
+      }
+      dnId = new DatanodeID(ipAddr, hostStr, port);
+    }
+    return dnId;
+  }
+
-      //first load all the nodes listed in include and exclude files.
+      // Put all nodes referenced in the hosts files in the map
-        //Remove any form of the this datanode in include/exclude lists.
+        // Remove any nodes we know about from the map
-        } catch ( UnknownHostException e ) {
+        } catch (UnknownHostException e) {
-        DatanodeDescriptor dn = 
-            new DatanodeDescriptor(new DatanodeID(it.next()));
-        dn.setLastUpdate(0);
+        // The remaining nodes are ones that are referenced by the hosts
+        // files but that we do not know about, ie that we have never
+        // head from. Eg. a host that is no longer part of the cluster
+        // or a bogus entry was given in the hosts files
+        DatanodeID dnId = parseDNFromHostsEntry(it.next());
+        DatanodeDescriptor dn = new DatanodeDescriptor(dnId); 
+        dn.setLastUpdate(0); // Consider this node dead for reporting

INS26 INS40 INS31 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS42 MOV43 INS42 INS60 INS60 INS60 INS60 INS25 INS25 INS41 INS66 INS42 INS66 INS66 INS43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 MOV27 MOV42 INS8 INS8 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS21 INS60 INS54 INS21 INS42 INS42 INS13 INS7 INS7 INS7 INS7 INS7 INS43 INS59 INS8 INS12 INS7 MOV32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS45 INS21 INS44 INS8 INS42 INS14 INS60 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS43 INS42 INS45 INS42 INS7 INS43 INS42 INS21 INS43 INS42 INS42 INS42 MOV43 INS59 MOV43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS14 INS32 INS42 INS42 INS42 INS27 INS42 MOV32 MOV43 INS42 INS42 INS42 INS42 INS45 INS42 INS45 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL36 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL16 DEL7 DEL21 DEL42 DEL14 DEL14