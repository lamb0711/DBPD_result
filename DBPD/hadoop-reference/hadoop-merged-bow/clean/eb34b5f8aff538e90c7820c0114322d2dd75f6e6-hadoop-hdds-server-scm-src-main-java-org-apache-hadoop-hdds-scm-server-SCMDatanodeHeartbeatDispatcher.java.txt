HDDS-601. On restart, SCM throws 'No such datanode' exception.

+import org.apache.hadoop.ozone.protocol.commands.ReregisterCommand;
+import org.apache.hadoop.ozone.protocol.commands.SCMCommand;
-import org.apache.hadoop.ozone.protocol.commands.SCMCommand;
+import java.util.UUID;
-    // should we dispatch heartbeat through eventPublisher?
-    List<SCMCommand> commands = nodeManager.processHeartbeat(datanodeDetails);
-    if (heartbeat.hasNodeReport()) {
-      LOG.debug("Dispatching Node Report.");
-      eventPublisher.fireEvent(NODE_REPORT,
-          new NodeReportFromDatanode(datanodeDetails,
-              heartbeat.getNodeReport()));
-    }
+    List<SCMCommand> commands;
-    if (heartbeat.hasContainerReport()) {
-      LOG.debug("Dispatching Container Report.");
-      eventPublisher.fireEvent(CONTAINER_REPORT,
-          new ContainerReportFromDatanode(datanodeDetails,
-              heartbeat.getContainerReport()));
+    // If node is not registered, ask the node to re-register. Do not process
+    // Heartbeat for unregistered nodes.
+    if (!nodeManager.isNodeRegistered(datanodeDetails)) {
+      LOG.info("SCM received heartbeat from an unregistered datanode {}. " +
+          "Asking datanode to re-register.", datanodeDetails);
+      UUID dnID = datanodeDetails.getUuid();
+      nodeManager.addDatanodeCommand(dnID, new ReregisterCommand());
-    }
+      commands = nodeManager.getCommandQueue(dnID);
-    if (heartbeat.hasContainerActions()) {
-      LOG.debug("Dispatching Container Actions.");
-      eventPublisher.fireEvent(CONTAINER_ACTIONS,
-          new ContainerActionsFromDatanode(datanodeDetails,
-              heartbeat.getContainerActions()));
-    }
+    } else {
-    if (heartbeat.hasPipelineReports()) {
-      LOG.debug("Dispatching Pipeline Report.");
-      eventPublisher.fireEvent(PIPELINE_REPORT,
-              new PipelineReportFromDatanode(datanodeDetails,
-                      heartbeat.getPipelineReports()));
+      // should we dispatch heartbeat through eventPublisher?
+      commands = nodeManager.processHeartbeat(datanodeDetails);
+      if (heartbeat.hasNodeReport()) {
+        LOG.debug("Dispatching Node Report.");
+        eventPublisher.fireEvent(
+            NODE_REPORT,
+            new NodeReportFromDatanode(
+                datanodeDetails,
+                heartbeat.getNodeReport()));
+      }
-    }
+      if (heartbeat.hasContainerReport()) {
+        LOG.debug("Dispatching Container Report.");
+        eventPublisher.fireEvent(
+            CONTAINER_REPORT,
+            new ContainerReportFromDatanode(
+                datanodeDetails,
+                heartbeat.getContainerReport()));
-    if (heartbeat.hasPipelineActions()) {
-      LOG.debug("Dispatching Pipeline Actions.");
-      eventPublisher.fireEvent(PIPELINE_ACTIONS,
-          new PipelineActionsFromDatanode(datanodeDetails,
-              heartbeat.getPipelineActions()));
-    }
+      }
-    if (heartbeat.getCommandStatusReportsCount() != 0) {
-      for (CommandStatusReportsProto commandStatusReport : heartbeat
-          .getCommandStatusReportsList()) {
-        eventPublisher.fireEvent(CMD_STATUS_REPORT,
-            new CommandStatusReportFromDatanode(datanodeDetails,
-                commandStatusReport));
+      if (heartbeat.hasContainerActions()) {
+        LOG.debug("Dispatching Container Actions.");
+        eventPublisher.fireEvent(
+            CONTAINER_ACTIONS,
+            new ContainerActionsFromDatanode(
+                datanodeDetails,
+                heartbeat.getContainerActions()));
+      }
+
+      if (heartbeat.hasPipelineReports()) {
+        LOG.debug("Dispatching Pipeline Report.");
+        eventPublisher.fireEvent(
+            PIPELINE_REPORT,
+            new PipelineReportFromDatanode(
+                datanodeDetails,
+                heartbeat.getPipelineReports()));
+
+      }
+
+      if (heartbeat.hasPipelineActions()) {
+        LOG.debug("Dispatching Pipeline Actions.");
+        eventPublisher.fireEvent(
+            PIPELINE_ACTIONS,
+            new PipelineActionsFromDatanode(
+                datanodeDetails,
+                heartbeat.getPipelineActions()));
+      }
+
+      if (heartbeat.getCommandStatusReportsCount() != 0) {
+        for (CommandStatusReportsProto commandStatusReport : heartbeat
+            .getCommandStatusReportsList()) {
+          eventPublisher.fireEvent(
+              CMD_STATUS_REPORT,
+              new CommandStatusReportFromDatanode(
+                  datanodeDetails,
+                  commandStatusReport));
+        }

MOV26 INS26 INS26 INS40 INS40 INS8 MOV60 MOV60 INS25 MOV41 INS38 INS8 MOV8 INS32 INS21 INS60 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS7 INS7 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS32 INS42 MOV32 INS45 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS42