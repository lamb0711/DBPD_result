HDFS-10390. Implement asynchronous setAcl/getAclStatus for DistributedFileSystem.  Contributed by Xiaobing Zhou

+import java.util.List;
+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclStatus;
+import org.apache.hadoop.hdfs.DFSOpsCountStatistics.OpType;
+    dfs.getDFSOpsCountStatistics().incrementOpCounter(OpType.RENAME);
+    dfs.getDFSOpsCountStatistics().incrementOpCounter(OpType.SET_PERMISSION);
+    dfs.getDFSOpsCountStatistics().incrementOpCounter(OpType.SET_OWNER);
+
+  /**
+   * Fully replaces ACL of files and directories, discarding all existing
+   * entries.
+   *
+   * @param p
+   *          Path to modify
+   * @param aclSpec
+   *          List<AclEntry> describing modifications, must include entries for
+   *          user, group, and others for compatibility with permission bits.
+   * @throws IOException
+   *           if an ACL could not be modified
+   * @return an instance of Future, #get of which is invoked to wait for
+   *         asynchronous call being finished.
+   */
+  public Future<Void> setAcl(Path p, final List<AclEntry> aclSpec)
+      throws IOException {
+    dfs.getFsStatistics().incrementWriteOps(1);
+    dfs.getDFSOpsCountStatistics().incrementOpCounter(OpType.SET_ACL);
+    final Path absPath = dfs.fixRelativePart(p);
+    final boolean isAsync = Client.isAsynchronousMode();
+    Client.setAsynchronousMode(true);
+    try {
+      dfs.getClient().setAcl(dfs.getPathName(absPath), aclSpec);
+      return getReturnValue();
+    } finally {
+      Client.setAsynchronousMode(isAsync);
+    }
+  }
+
+  /**
+   * Gets the ACL of a file or directory.
+   *
+   * @param p
+   *          Path to get
+   * @return AclStatus describing the ACL of the file or directory
+   * @throws IOException
+   *           if an ACL could not be read
+   * @return an instance of Future, #get of which is invoked to wait for
+   *         asynchronous call being finished.
+   */
+  public Future<AclStatus> getAclStatus(Path p) throws IOException {
+    final Path absPath = dfs.fixRelativePart(p);
+    final boolean isAsync = Client.isAsynchronousMode();
+    Client.setAsynchronousMode(true);
+    try {
+      dfs.getClient().getAclStatus(dfs.getPathName(absPath));
+      return getReturnValue();
+    } finally {
+      Client.setAsynchronousMode(isAsync);
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS43 INS8 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS83 INS74 INS42 INS42 INS21 INS21 INS60 INS60 INS21 INS54 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS21 INS54 INS32 INS32 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS43 INS32 INS32 INS83 INS43 INS59 INS83 INS39 INS59 INS32 INS8 INS8 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS83 INS43 INS59 INS83 INS39 INS59 INS32 INS8 INS8 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS34 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS9 INS21 INS41 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS9 INS21 INS41 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42