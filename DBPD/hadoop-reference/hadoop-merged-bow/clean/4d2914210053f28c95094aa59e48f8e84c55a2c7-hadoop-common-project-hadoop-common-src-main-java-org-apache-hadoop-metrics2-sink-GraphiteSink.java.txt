HADOOP-11400. GraphiteSink does not reconnect to Graphite after 'broken pipe'
(Kamil Gorlo via raviprak)

-import java.io.IOException;
-import java.io.OutputStreamWriter;
-import java.io.Writer;
-import java.io.Closeable;
-import java.net.Socket;
-
-import org.apache.hadoop.io.IOUtils;
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
+import java.net.Socket;
+
-    private Writer writer = null;
-    private Socket socket = null;
+    private Graphite graphite = null;
-        String serverHost = conf.getString(SERVER_HOST_KEY);
-        Integer serverPort = Integer.parseInt(conf.getString(SERVER_PORT_KEY));
+        final String serverHost = conf.getString(SERVER_HOST_KEY);
+        final int serverPort = Integer.parseInt(conf.getString(SERVER_PORT_KEY));
-        try {
-            // Open an connection to Graphite server.
-            socket = new Socket(serverHost, serverPort);
-            writer = new OutputStreamWriter(
-                socket.getOutputStream(), Charsets.UTF_8);
-        } catch (Exception e) {
-            throw new MetricsException("Error creating connection, "
-                    + serverHost + ":" + serverPort, e);
-        }
+        graphite = new Graphite(serverHost, serverPort);
+        graphite.connect();
-            if(writer != null){
-              writer.write(lines.toString());
-            } else {
-              throw new MetricsException("Writer in GraphiteSink is null!");
-            }
+          graphite.write(lines.toString());
-            throw new MetricsException("Error sending metrics", e);
+          LOG.warn("Error sending metrics to Graphite", e);
+          try {
+            graphite.close();
+          } catch (Exception e1) {
+            throw new MetricsException("Error closing connection to Graphite", e1);
+          }
+      try {
+        graphite.flush();
+      } catch (Exception e) {
+        LOG.warn("Error flushing metrics to Graphite", e);
-            writer.flush();
-        } catch (Exception e) {
-            throw new MetricsException("Error flushing metrics", e);
+          graphite.close();
+        } catch (Exception e1) {
+          throw new MetricsException("Error closing connection to Graphite", e1);
+      }
-      try {
-        IOUtils.closeStream(writer);
-        writer = null;
-        LOG.info("writer in GraphiteSink is closed!");
-      } catch (Throwable e){
-        throw new MetricsException("Error closing writer", e);
-      } finally {
-        if (socket != null && !socket.isClosed()) {
-          socket.close();
-          socket = null;
-          LOG.info("socket in GraphiteSink is closed!");
+      graphite.close();
+    }
+
+    public static class Graphite {
+      private final static int MAX_CONNECTION_FAILURES = 5;
+
+      private String serverHost;
+      private int serverPort;
+      private Writer writer = null;
+      private Socket socket = null;
+      private int connectionFailures = 0;
+
+      public Graphite(String serverHost, int serverPort) {
+        this.serverHost = serverHost;
+        this.serverPort = serverPort;
+      }
+
+      public void connect() {
+        if (isConnected()) {
+          throw new MetricsException("Already connected to Graphite");
+        }
+        if (tooManyConnectionFailures()) {
+          // return silently (there was ERROR in logs when we reached limit for the first time)
+          return;
+        }
+        try {
+          // Open a connection to Graphite server.
+          socket = new Socket(serverHost, serverPort);
+          writer = new OutputStreamWriter(socket.getOutputStream(), Charsets.UTF_8);
+        } catch (Exception e) {
+          connectionFailures++;
+          if (tooManyConnectionFailures()) {
+            // first time when connection limit reached, report to logs
+            LOG.error("Too many connection failures, would not try to connect again.");
+          }
+          throw new MetricsException("Error creating connection, "
+              + serverHost + ":" + serverPort, e);
+
+      public void write(String msg) throws IOException {
+        if (!isConnected()) {
+          connect();
+        }
+        if (isConnected()) {
+          writer.write(msg);
+        }
+      }
+
+      public void flush() throws IOException {
+        if (isConnected()) {
+          writer.flush();
+        }
+      }
+
+      public boolean isConnected() {
+        return socket != null && socket.isConnected() && !socket.isClosed();
+      }
+
+      public void close() throws IOException {
+        try {
+          if (writer != null) {
+            writer.close();
+          }
+        } catch (IOException ex) {
+          if (socket != null) {
+            socket.close();
+          }
+        } finally {
+          socket = null;
+          writer = null;
+        }
+      }
+
+      private boolean tooManyConnectionFailures() {
+        return connectionFailures > MAX_CONNECTION_FAILURES;
+      }
+
+

MOV26 MOV26 MOV26 MOV26 MOV26 INS23 INS31 INS55 INS83 INS43 INS59 INS8 MOV78 MOV83 MOV39 MOV42 INS43 INS8 INS83 INS83 INS42 INS23 INS23 INS23 MOV23 MOV23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS33 INS21 INS21 INS54 INS42 INS21 INS83 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 MOV43 INS8 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS7 INS32 MOV8 INS8 INS12 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS39 INS42 INS21 INS21 INS25 INS25 MOV54 INS43 INS42 INS42 INS25 INS25 INS42 INS25 INS41 INS54 INS41 INS42 INS14 INS42 INS42 INS44 INS8 INS21 MOV44 MOV8 INS42 INS42 INS42 INS7 INS7 INS32 MOV8 INS32 INS8 INS42 INS38 INS8 INS32 INS8 INS32 MOV8 MOV27 INS8 INS12 INS8 INS27 INS43 INS42 INS42 INS43 INS42 INS21 INS54 INS32 INS21 INS22 INS42 INS22 INS42 INS42 INS42 INS41 INS32 INS21 INS42 MOV21 INS42 INS27 INS25 MOV44 INS8 MOV21 MOV21 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS32 INS8 INS12 INS42 INS42 INS32 INS8 INS52 INS42 INS52 INS42 INS21 INS25 INS42 INS32 MOV27 INS32 MOV27 INS8 UPD43 UPD42 MOV25 INS42 INS42 INS45 INS42 INS21 INS44 MOV8 INS42 INS42 INS45 INS42 INS21 UPD45 INS37 INS32 INS8 INS42 UPD42 UPD42 UPD42 INS42 INS42 MOV21 UPD42 INS27 INS32 INS43 INS42 INS32 UPD42 INS42 INS42 INS21 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD45 INS42 UPD45 UPD42 INS42 INS42 INS45 DEL40 DEL26 DEL42 DEL43 DEL25 DEL8 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL42 DEL45 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL12 DEL8 DEL54 DEL8 DEL31