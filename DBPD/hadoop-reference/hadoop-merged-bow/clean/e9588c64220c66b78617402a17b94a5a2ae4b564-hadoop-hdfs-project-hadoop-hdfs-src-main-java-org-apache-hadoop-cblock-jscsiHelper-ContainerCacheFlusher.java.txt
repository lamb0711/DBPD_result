HDFS-11627. Block Storage: Cblock cache should register with flusher to upload blocks to containers. Contributed by Mukul Kumar Singh.

+import org.apache.hadoop.ozone.OzoneConsts;
-import static org.apache.hadoop.cblock.CBlockConfigKeys.DFS_CBLOCK_DISK_CACHE_PATH_DEFAULT;
-import static org.apache.hadoop.cblock.CBlockConfigKeys.DFS_CBLOCK_DISK_CACHE_PATH_KEY;
+import static org.apache.hadoop.cblock.CBlockConfigKeys
+    .DFS_CBLOCK_CACHE_LEVELDB_CACHE_SIZE_MB_KEY;
+import static org.apache.hadoop.cblock.CBlockConfigKeys
+    .DFS_CBLOCK_CACHE_LEVELDB_CACHE_SIZE_MB_DEFAULT;
+  private final long levelDBCacheSize;
+    levelDBCacheSize = config.getInt(DFS_CBLOCK_CACHE_LEVELDB_CACHE_SIZE_MB_KEY,
+        DFS_CBLOCK_CACHE_LEVELDB_CACHE_SIZE_MB_DEFAULT) * OzoneConsts.MB;
-    checkExisitingDirtyLog(config);
-  private void checkExisitingDirtyLog(Configuration config) {
-    File dbPath = Paths.get(config.get(DFS_CBLOCK_DISK_CACHE_PATH_KEY,
-        DFS_CBLOCK_DISK_CACHE_PATH_DEFAULT)).toFile();
+  private void checkExistingDirtyLog(File dbPath) {
-      LOG.info("No existing dirty log found at {}", dbPath);
+      LOG.debug("No existing dirty log found at {}", dbPath);
-    LOG.info("Need to check and requeue existing dirty log {}", dbPath);
+    LOG.debug("Need to check and requeue existing dirty log {}", dbPath);
-   * @param cacheSize - cacheSize
-  public synchronized LevelDBStore openDB(String dbPath, int cacheSize)
+  public synchronized LevelDBStore openDB(String dbPath)
-      options.cacheSize(cacheSize * (1024L * 1024L));
+      options.cacheSize(levelDBCacheSize);
-   * Updates the contianer map. This data never changes so we will update this
+   * Updates the container map. This data never changes so we will update this
+   * Once a CBlockLocalCache cache is registered, requeue dirty/retry log files
+   * for the volume
+   *
-   * @param containerList - Contianer List.
+   * @param containerList - Container List.
+    File dbFile = Paths.get(dbPath).toFile();
+    checkExistingDirtyLog(dbFile);
-                message.getFileName()));
+                message.getFileName(), this));
+    private final ContainerCacheFlusher flusher;
-        String dirtyLogPath) {
+        String dirtyLogPath, ContainerCacheFlusher flusher) throws IOException {
+      this.flusher = flusher;
+      this.flusher.openDB(dbPath);
+          flusher.closeDB(dbPath);
-        } catch (IOException e) {
-          LOG.error(
-              "Error deleting dirty log file {} {}", filePath, e.toString());
+        } catch (Exception e) {
+          LOG.error("Error deleting dirty log file:" + filePath, e);

INS26 INS40 UPD40 UPD40 INS23 INS83 INS83 INS39 INS59 MOV21 UPD42 INS23 INS42 MOV43 INS42 INS60 INS21 INS83 INS83 INS43 INS59 INS44 INS43 INS7 UPD66 INS66 INS66 UPD66 INS43 INS59 INS32 INS42 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS27 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS32 INS32 INS40 INS32 INS42 INS22 INS42 INS22 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS21 INS32 UPD43 INS52 INS42 INS42 INS42 UPD42 INS27 MOV42 INS45 INS42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL34 DEL34 DEL27 DEL36 DEL27 DEL45 DEL42 DEL42 DEL32