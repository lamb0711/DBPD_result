YARN-5701. Fix issues in yarn native services apps-of-apps. Contributed by Billie Rinaldi

+import org.apache.slider.providers.MonitorDetail;
+import java.util.regex.Pattern;
+
+import static org.apache.slider.api.RoleKeys.ROLE_PREFIX;
-    launcher.putEnv(SliderUtils.buildEnvMap(appComponent,
-        providerUtils.getStandardTokenMap(getAmState().getAppConfSnapshot(),
-            getAmState().getInternalsSnapshot(), roleName, roleGroup,
-            getClusterName())));
+    Map<String, String> standardTokens = providerUtils.getStandardTokenMap(
+        getAmState().getAppConfSnapshot(), getAmState().getInternalsSnapshot(),
+        roleName, roleGroup, container.getId().toString(), getClusterName());
+    Map<String, String> replaceTokens = providerUtils.filterSiteOptions(
+            appConf.getComponent(roleGroup).options, standardTokens);
+    replaceTokens.putAll(standardTokens);
+    launcher.putEnv(SliderUtils.buildEnvMap(appComponent, replaceTokens));
-              container.getId().toString(), roleName, roleGroup,
-              getAmState());
+              container.getId().toString(), getClusterName(),
+              roleName, roleGroup, getAmState());
-            .getInternalsSnapshot(), null, clientName, clientName,
-            getAmState());
+            .getInternalsSnapshot(), null, getClusterName(), clientName,
+            clientName, getAmState());
+    String hostNameKeyFormat = "${%s_HOSTNAME}";
+    String ipKeyFormat = "${%s_IP}";
-    Map<String, String> replaceTokens =
-        providerUtils.filterSiteOptions(
-            appConf.getComponent(roleGroup).options,
-            providerUtils.getStandardTokenMap(appConf, internalsConf, roleName,
-                roleGroup, containerId, getClusterName()));
+    Map<String, String> standardTokens = providerUtils.getStandardTokenMap(
+        appConf, internalsConf, roleName, roleGroup, containerId,
+        getClusterName());
+    Map<String, String> replaceTokens = providerUtils.filterSiteOptions(
+            appConf.getComponent(roleGroup).options, standardTokens);
+    replaceTokens.putAll(standardTokens);
+
+    String rolePrefix = appConf.getComponentOpt(roleGroup, ROLE_PREFIX, "");
-      String hostName = providerUtils.getHostsList(
+      String otherRolePrefix = appConf.getComponentOpt(entry.getKey(),
+          ROLE_PREFIX, "");
+      if (!otherRolePrefix.equals(rolePrefix)) {
+        // hostname replacements are only made within role prefix groups
+        continue;
+      }
+      String key = entry.getKey();
+      if (!rolePrefix.isEmpty()) {
+        if (!key.startsWith(rolePrefix)) {
+          log.warn("Something went wrong, {} doesn't start with {}", key,
+              rolePrefix);
+          continue;
+        }
+        key = key.substring(rolePrefix.length());
+      }
+      key = key.toUpperCase(Locale.ENGLISH);
+      String host = providerUtils.getHostsList(
-      replaceTokens.put(String.format(hostKeyFormat,
-          entry.getKey().toUpperCase(Locale.ENGLISH)), hostName);
+      replaceTokens.put(String.format(hostKeyFormat, key), host);
+      String hostName = providerUtils.getHostNamesList(
+          entry.getValue().values()).iterator().next();
+      replaceTokens.put(String.format(hostNameKeyFormat, key), hostName);
+      String ip = providerUtils.getIPsList(
+          entry.getValue().values()).iterator().next();
+      replaceTokens.put(String.format(ipKeyFormat, key), ip);
-          value = value.replace(token, replaceTokens.get(token));
+          value = value.replaceAll(Pattern.quote(token), replaceTokens.get(token));
-    providerUtils.publishExportGroup(entries, getAmState(), EXPORT_GROUP);
+    if (!entries.isEmpty()) {
+      providerUtils.publishExportGroup(entries, getAmState(), EXPORT_GROUP);
+    }
+  }
+
+  @Override
+  public Map<String, MonitorDetail> buildMonitorDetails(ClusterDescription clusterDesc) {
+    Map<String, MonitorDetail> details = super.buildMonitorDetails(clusterDesc);
+    buildRoleHostDetails(details);
+    return details;
+  }
+
+  private void buildRoleHostDetails(Map<String, MonitorDetail> details) {
+    for (Map.Entry<String, Map<String, ClusterNode>> entry :
+        getAmState().getRoleClusterNodeMapping().entrySet()) {
+      details.put(entry.getKey() + " Host(s)/Container(s)",
+          new MonitorDetail(providerUtils.getHostsList(
+              entry.getValue().values(), false).toString(), false));
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS78 INS83 INS74 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS60 INS60 INS21 INS60 INS60 INS60 INS21 INS60 INS25 INS42 INS43 INS43 INS43 INS43 INS42 INS60 INS21 INS41 INS74 INS42 INS70 INS74 INS59 INS74 INS59 INS32 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS42 INS43 INS43 INS43 INS44 INS32 INS8 INS43 INS43 INS43 INS42 MOV32 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 UPD42 MOV32 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS25 INS60 INS25 INS21 INS21 INS60 INS60 INS21 INS32 MOV21 INS43 INS43 INS43 INS42 INS48 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV22 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS59 INS38 INS8 INS43 INS59 INS38 INS8 INS7 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS18 INS42 INS42 INS32 INS32 INS25 INS21 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS27 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS7 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS45 INS43 INS32 INS9 INS42 INS42 INS42 INS32 INS21 INS18 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS42 INS42 MOV42 DEL42 DEL42 DEL32 DEL40 DEL32