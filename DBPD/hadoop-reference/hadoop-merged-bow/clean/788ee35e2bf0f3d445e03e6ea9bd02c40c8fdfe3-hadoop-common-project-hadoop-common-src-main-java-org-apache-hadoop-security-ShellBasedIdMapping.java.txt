HDFS-7564. NFS gateway dynamically reload UID/GID mapping file /etc/nfs.map. Contributed by Yongjun Zhang

+  // Last time the static map was modified, measured time difference in
+  // milliseconds since midnight, January 1, 1970 UTC
+  private long lastModificationTimeStaticMap = 0;
+  
-
-
+    updateStaticMapping();
-  private synchronized void initStaticMapping() throws IOException {
-    staticMapping = new StaticMapping(
-        new HashMap<Integer, Integer>(), new HashMap<Integer, Integer>());
+  private synchronized void updateStaticMapping() throws IOException {
+    final boolean init = (staticMapping == null);
+    //
+    // if the static mapping file
+    //   - was modified after last update, load the map again;
+    //   - did not exist but was added since last update, load the map;
+    //   - existed before but deleted since last update, clear the map
+    //
-      LOG.info("Using '" + staticMappingFile + "' for static UID/GID mapping...");
-      staticMapping = parseStaticMap(staticMappingFile);
+      // check modification time, reload the file if the last modification
+      // time changed since prior load.
+      long lmTime = staticMappingFile.lastModified();
+      if (lmTime != lastModificationTimeStaticMap) {
+        LOG.info(init? "Using " : "Reloading " + "'" + staticMappingFile
+            + "' for static UID/GID mapping...");
+        lastModificationTimeStaticMap = lmTime;
+        staticMapping = parseStaticMap(staticMappingFile);        
+      }
-      LOG.info("Not doing static UID/GID mapping because '" + staticMappingFile
-          + "' does not exist.");
+      if (init) {
+        staticMapping = new StaticMapping(new HashMap<Integer, Integer>(),
+            new HashMap<Integer, Integer>());
+      }
+      if (lastModificationTimeStaticMap != 0 || init) {
+        // print the following log at initialization or when the static
+        // mapping file was deleted after prior load
+        LOG.info("Not doing static UID/GID mapping because '"
+            + staticMappingFile + "' does not exist.");
+      }
+      lastModificationTimeStaticMap = 0;
+      staticMapping.clear();
-  }  
+  }
-   * Reset the maps to empty.
+   * Refresh static map, and reset the other maps to empty.
+      // set constructFullMapAtInit to false to allow testing code to
+      // do incremental update to maps after initial construction
+      constructFullMapAtInit = false;
+      updateStaticMapping();
-    if (staticMapping == null) {
-      initStaticMapping();
-    }
-    if (staticMapping == null) {
-      initStaticMapping();
-    }
-    initStaticMapping();
-    if (staticMapping == null) {
-      initStaticMapping();
-    }
+    updateStaticMapping();
-    if (staticMapping == null) {
-      initStaticMapping();
-    }
+    updateStaticMapping();
+
+    public void clear() {
+      uidMapping.clear();
+      gidMapping.clear();
+    }
+
+    public boolean isNonEmpty() {
+      return uidMapping.size() > 0 || gidMapping.size() > 0;
+    }

INS23 INS83 INS39 INS59 INS42 INS8 INS31 INS31 INS42 INS34 INS21 INS60 INS25 MOV21 MOV21 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS32 INS83 INS39 INS59 MOV32 INS8 MOV8 INS21 INS21 INS41 INS42 INS42 INS36 INS60 INS25 INS25 INS25 INS21 INS21 INS21 INS21 UPD42 UPD42 INS32 INS32 INS27 MOV27 INS39 INS59 INS27 INS8 INS42 INS8 INS27 MOV8 INS7 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS32 INS42 INS42 INS21 INS21 MOV21 MOV21 INS27 INS42 INS42 INS34 INS42 INS42 INS42 INS9 INS42 INS32 INS34 INS32 INS34 INS42 INS42 INS32 INS7 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS45 INS27 INS27 INS42 INS45 INS45 INS45 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25