merge trunk to branch HDFS-4949

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532952 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.DirectoryListingStartAfterNotFoundException;
-import org.apache.hadoop.hdfs.server.blockmanagement.*;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockCollection;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoUnderConstruction;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockManager;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeManager;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeStatistics;
+import org.apache.hadoop.hdfs.server.blockmanagement.OutOfV1GenerationStampsException;
-import org.apache.hadoop.hdfs.server.namenode.startupprogress.Phase;
-import org.apache.hadoop.hdfs.server.namenode.startupprogress.StartupProgress;
-import org.apache.hadoop.hdfs.server.namenode.startupprogress.StartupProgress.Counter;
-import org.apache.hadoop.hdfs.server.namenode.startupprogress.Status;
-import org.apache.hadoop.hdfs.server.namenode.startupprogress.Step;
-import org.apache.hadoop.hdfs.server.namenode.startupprogress.StepType;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.Phase;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.StartupProgress;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.StartupProgress.Counter;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.Status;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.Step;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.StepType;
+import org.apache.hadoop.ipc.RetriableException;
+import com.google.common.collect.ImmutableMap;
-  private ReentrantReadWriteLock fsLock = new ReentrantReadWriteLock(true);
+  private ReentrantReadWriteLock fsLock;
+  
+  /**
+   * Whether the namenode is in the middle of starting the active service
+   */
+  private volatile boolean startingActiveService = false;
+    boolean fair = conf.getBoolean("dfs.namenode.fslock.fair", true);
+    LOG.info("fsLock is fair:" + fair);
+    fsLock = new ReentrantReadWriteLock(fair);
+    startingActiveService = true;
+      startingActiveService = false;
+  
+  /**
+   * @return Whether the namenode is transitioning to active state and is in the
+   *         middle of the {@link #startActiveServices()}
+   */
+  public boolean inTransitionToActive() {
+    return haEnabled && haContext != null
+        && haContext.getState().getServiceState() == HAServiceState.ACTIVE
+        && startingActiveService;
+  }
+  /**
+   * @throws RetriableException
+   *           If 1) The NameNode is in SafeMode, 2) HA is enabled, and 3)
+   *           NameNode is in active state
+   * @throws SafeModeException
+   *           Otherwise if NameNode is in SafeMode.
+   */
+  private void checkNameNodeSafeMode(String errorMsg)
+      throws RetriableException, SafeModeException {
+    if (isInSafeMode()) {
+      SafeModeException se = new SafeModeException(errorMsg, safeMode);
+      if (haEnabled && haContext != null
+          && haContext.getState().getServiceState() == HAServiceState.ACTIVE) {
+        throw new RetriableException(se);
+      } else {
+        throw se;
+      }
+    }
+  }
+  
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot set permission for " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot set permission for " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot set owner for " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot set owner for " + src);
-          throw new SafeModeException("Zero blocklocations for " + src,
-              safeMode);
+          SafeModeException se = new SafeModeException(
+              "Zero blocklocations for " + src, safeMode);
+          if (haEnabled && haContext != null && 
+              haContext.getState().getServiceState() == HAServiceState.ACTIVE) {
+            throw new RetriableException(se);
+          } else {
+            throw se;
+          }
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot concat " + target, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot concat " + target);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot set times " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot set times " + src);
-    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
-    if (cacheEntry != null && cacheEntry.isSuccess()) {
-      return; // Return previous response
-    }
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot create symlink " + link, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot create symlink " + link);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot set replication for " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot set replication for " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot create file" + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot create file" + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException(
-            "Cannot recover the lease of " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot recover the lease of " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot append to file" + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot append to file" + src);
-      ExtendedBlock previous, HashMap<Node, Node> excludedNodes, 
+      ExtendedBlock previous, Set<Node> excludedNodes, 
-    if (isInSafeMode()) {
-      throw new SafeModeException("Cannot add block to " + src, safeMode);
-    }
+    checkNameNodeSafeMode("Cannot add block to " + src);
-      final DatanodeInfo[] existings,  final HashMap<Node, Node> excludes,
+      final DatanodeInfo[] existings,  final Set<Node> excludes,
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot add datanode; src=" + src
-            + ", blk=" + blk, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot add datanode; src=" + src + ", blk=" + blk);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot abandon block " + b +
-                                    " for fle" + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot abandon block " + b + " for fle" + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot complete file " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot complete file " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot rename " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot rename " + src);
-    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
-    if (cacheEntry != null && cacheEntry.isSuccess()) {
-      return; // Return previous response
-    }
-    FSPermissionChecker pc = getPermissionChecker();
+    final FSPermissionChecker pc = getPermissionChecker();
+    
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot rename " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot rename " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot delete " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot delete " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot create directory " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot create directory " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot set quota on " + path, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot set quota on " + path);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot fsync file " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot fsync file " + src);
+  
+  @Override
+  public boolean isInSnapshot(BlockInfoUnderConstruction blockUC) {
+    assert hasReadOrWriteLock();
+    final BlockCollection bc = blockUC.getBlockCollection();
+    if (bc == null || !(bc instanceof INodeFileUnderConstruction)) {
+      return false;
+    }
+
+    INodeFileUnderConstruction inodeUC = (INodeFileUnderConstruction) blockUC
+        .getBlockCollection();
+    String fullName = inodeUC.getName();
+    try {
+      if (fullName != null && fullName.startsWith(Path.SEPARATOR)
+          && dir.getINode(fullName) == inodeUC) {
+        // If file exists in normal path then no need to look in snapshot
+        return false;
+      }
+    } catch (UnresolvedLinkException e) {
+      LOG.error("Error while resolving the link : " + fullName, e);
+      return false;
+    }
+    /*
+     * 1. if bc is an instance of INodeFileUnderConstructionWithSnapshot, and
+     * bc is not in the current fsdirectory tree, bc must represent a snapshot
+     * file. 
+     * 2. if fullName is not an absolute path, bc cannot be existent in the 
+     * current fsdirectory tree. 
+     * 3. if bc is not the current node associated with fullName, bc must be a
+     * snapshot inode.
+     */
+    return true;
+  }
-      if (isInSafeMode()) {
-        throw new SafeModeException(
-          "Cannot commitBlockSynchronization while in safe mode",
-          safeMode);
-      }
+      checkNameNodeSafeMode(
+          "Cannot commitBlockSynchronization while in safe mode");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot renew lease for " + holder, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot renew lease for " + holder);
+    String startAfterString = new String(startAfter);
+      // Get file name when startAfter is an INodePath
+      if (FSDirectory.isReservedName(startAfterString)) {
+        byte[][] startAfterComponents = FSDirectory
+            .getPathComponentsForReservedPath(startAfterString);
+        try {
+          String tmp = FSDirectory.resolvePath(src, startAfterComponents, dir);
+          byte[][] regularPath = INode.getPathComponents(tmp);
+          startAfter = regularPath[regularPath.length - 1];
+        } catch (IOException e) {
+          // Possibly the inode is deleted
+          throw new DirectoryListingStartAfterNotFoundException(
+              "Can't find startAfter " + startAfterString);
+        }
+      }
+      
+  @Override
+  public String getSnapshotStats() {
+    Map<String, Object> info = new HashMap<String, Object>();
+    info.put("SnapshottableDirectories", this.getNumSnapshottableDirs());
+    info.put("Snapshots", this.getNumSnapshots());
+    return JSON.toString(info);
+  }
+
+    checkOperation(OperationCategory.UNCHECKED);
+    checkSuperuserPrivilege();
+    
-    checkSuperuserPrivilege();
-    checkOperation(OperationCategory.UNCHECKED);
-        throw new IOException("Safe mode should be turned ON " +
-                              "in order to create namespace image.");
+        throw new IOException("Safe mode should be turned ON "
+            + "in order to create namespace image.");
-   * {@link #threshold} it starts the {@link SafeModeMonitor} daemon in order
+   * {@link #threshold} it starts the SafeModeMonitor daemon in order
-   * @see ClientProtocol#setSafeMode(HdfsConstants.SafeModeAction)
-   * @see SafeModeMonitor
+   * @see ClientProtocol#setSafeMode(HdfsConstants.SafeModeAction, boolean)
-  class SafeModeInfo {
+  public class SafeModeInfo {
-        (getNumLiveDataNodes() < datanodeThreshold) ||
+        (datanodeThreshold != 0 && getNumLiveDataNodes() < datanodeThreshold) ||
-      if (isInSafeMode()) {
-        throw new SafeModeException("Log not rolled", safeMode);
-      }
+      checkNameNodeSafeMode("Log not rolled");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Checkpoint not started", safeMode);
-      }
+      checkNameNodeSafeMode("Checkpoint not started");
+    checkOperation(OperationCategory.CHECKPOINT);
-    checkOperation(OperationCategory.CHECKPOINT);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Checkpoint not ended", safeMode);
-      }
+      checkNameNodeSafeMode("Checkpoint not ended");
-  long getMaxObjects() {
+  @Override // FSNamesystemMBean
+  public long getMaxObjects() {
-    getBlockManager().getDatanodeManager().fetchDatanodes(dead, null, true);
+    getBlockManager().getDatanodeManager().fetchDatanodes(null, dead, true);
+  public int getNumDecommissioningDataNodes() {
+    return getBlockManager().getDatanodeManager().getDecommissioningNodes()
+        .size();
+  }
+
+  @Override // FSNamesystemMBean
-    if (isInSafeMode()) {
-      throw new SafeModeException(
-          "Cannot get next generation stamp", safeMode);
-    }
+    checkNameNodeSafeMode("Cannot get next generation stamp");
-  private long nextBlockId() throws SafeModeException {
+  private long nextBlockId() throws IOException {
-    if (isInSafeMode()) {
-      throw new SafeModeException(
-          "Cannot get next block ID", safeMode);
-    }
+    checkNameNodeSafeMode("Cannot get next block ID");
-    if (isInSafeMode()) {
-      throw new SafeModeException("Cannot get a new generation stamp and an " +
-                                "access token for block " + block, safeMode);
-    }
+    checkNameNodeSafeMode("Cannot get a new generation stamp and an "
+        + "access token for block " + block);
+    checkOperation(OperationCategory.WRITE);
-    checkOperation(OperationCategory.WRITE);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Pipeline not updated", safeMode);
-      }
+      checkNameNodeSafeMode("Pipeline not updated");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot issue delegation token", safeMode);
-      }
+      checkNameNodeSafeMode("Cannot issue delegation token");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot renew delegation token", safeMode);
-      }
+      checkNameNodeSafeMode("Cannot renew delegation token");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot cancel delegation token", safeMode);
-      }
+      checkNameNodeSafeMode("Cannot cancel delegation token");
-      final Map<String, Object> innerinfo = new HashMap<String, Object>();
-      innerinfo.put("lastContact", getLastContact(node));
-      innerinfo.put("usedSpace", getDfsUsed(node));
-      innerinfo.put("adminState", node.getAdminState().toString());
-      innerinfo.put("nonDfsUsedSpace", node.getNonDfsUsed());
-      innerinfo.put("capacity", node.getCapacity());
-      innerinfo.put("numBlocks", node.numBlocks());
-      innerinfo.put("version", node.getSoftwareVersion());
+      Map<String, Object> innerinfo = ImmutableMap.<String, Object>builder()
+          .put("infoAddr", node.getInfoAddr())
+          .put("infoSecureAddr", node.getInfoSecureAddr())
+          .put("xferaddr", node.getXferAddr())
+          .put("lastContact", getLastContact(node))
+          .put("usedSpace", getDfsUsed(node))
+          .put("adminState", node.getAdminState().toString())
+          .put("nonDfsUsedSpace", node.getNonDfsUsed())
+          .put("capacity", node.getCapacity())
+          .put("numBlocks", node.numBlocks())
+          .put("version", node.getSoftwareVersion())
+          .put("used", node.getDfsUsed())
+          .put("remaining", node.getRemaining())
+          .put("blockScheduled", node.getBlocksScheduled())
+          .put("blockPoolUsed", node.getBlockPoolUsed())
+          .put("blockPoolUsedPercent", node.getBlockPoolUsedPercent())
+          .put("volfails", node.getVolumeFailures())
+          .build();
+
-      final Map<String, Object> innerinfo = new HashMap<String, Object>();
-      innerinfo.put("lastContact", getLastContact(node));
-      innerinfo.put("decommissioned", node.isDecommissioned());
+      Map<String, Object> innerinfo = ImmutableMap.<String, Object>builder()
+          .put("lastContact", getLastContact(node))
+          .put("decommissioned", node.isDecommissioned())
+          .put("xferaddr", node.getXferAddr())
+          .build();
-      final Map<String, Object> innerinfo = new HashMap<String, Object>();
-      innerinfo.put("underReplicatedBlocks", node.decommissioningStatus
-          .getUnderReplicatedBlocks());
-      innerinfo.put("decommissionOnlyReplicas", node.decommissioningStatus
-          .getDecommissionOnlyReplicas());
-      innerinfo.put("underReplicateInOpenFiles", node.decommissioningStatus
-          .getUnderReplicatedInOpenFiles());
+      Map<String, Object> innerinfo = ImmutableMap
+          .<String, Object> builder()
+          .put("xferaddr", node.getXferAddr())
+          .put("underReplicatedBlocks",
+              node.decommissioningStatus.getUnderReplicatedBlocks())
+          .put("decommissionOnlyReplicas",
+              node.decommissioningStatus.getDecommissionOnlyReplicas())
+          .put("underReplicateInOpenFiles",
+              node.decommissioningStatus.getUnderReplicatedInOpenFiles())
+          .build();
-   * @throws InvalidToken
-      byte[] password) throws InvalidToken {
-    getDelegationTokenSecretManager().verifyToken(identifier, password);
+      byte[] password) throws InvalidToken, RetriableException {
+    try {
+      getDelegationTokenSecretManager().verifyToken(identifier, password);
+    } catch (InvalidToken it) {
+      if (inTransitionToActive()) {
+        throw new RetriableException(it);
+      }
+      throw it;
+    }
+  public void setEditLogTailerForTests(EditLogTailer tailer) {
+    this.editLogTailer = tailer;
+  }
+  
+  @VisibleForTesting
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot allow snapshot for " + path,
-            safeMode);
-      }
+      checkNameNodeSafeMode("Cannot allow snapshot for " + path);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot disallow snapshot for " + path,
-            safeMode);
-      }
+      checkNameNodeSafeMode("Cannot disallow snapshot for " + path);
+    checkOperation(OperationCategory.WRITE);
+    final FSPermissionChecker pc = getPermissionChecker();
-    final FSPermissionChecker pc = getPermissionChecker();
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot create snapshot for "
-            + snapshotRoot, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot create snapshot for " + snapshotRoot);
+    checkOperation(OperationCategory.WRITE);
+    final FSPermissionChecker pc = getPermissionChecker();
-    final FSPermissionChecker pc = getPermissionChecker();
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot rename snapshot for " + path,
-            safeMode);
-      }
+      checkNameNodeSafeMode("Cannot rename snapshot for " + path);
+    final FSPermissionChecker checker = getPermissionChecker();
-      FSPermissionChecker checker = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
+    
-    checkOperation(OperationCategory.WRITE);
-      if (isInSafeMode()) {
-        throw new SafeModeException(
-            "Cannot delete snapshot for " + snapshotRoot, safeMode);
+      checkNameNodeSafeMode("Cannot delete snapshot for " + snapshotRoot);
+      if (isPermissionEnabled) {
+        checkOwner(pc, snapshotRoot);
-      checkOwner(pc, snapshotRoot);
-        auditLog.info(sb);
+        logAuditMessage(sb.toString());
+    public void logAuditMessage(String message) {
+      auditLog.info(message);
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS43 MOV43 INS8 MOV60 MOV25 MOV60 MOV25 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 MOV21 MOV21 INS83 MOV21 INS78 INS83 INS78 INS83 INS39 INS42 INS8 INS43 MOV21 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS8 MOV60 MOV60 MOV21 INS31 INS65 INS42 INS9 INS60 INS21 INS21 INS21 INS65 INS41 INS65 INS65 INS43 INS42 INS42 INS25 UPD74 INS21 UPD74 INS42 INS43 INS42 INS6 INS60 INS25 INS60 INS60 INS54 INS41 INS60 INS42 INS42 MOV60 INS21 INS21 INS41 INS42 INS42 INS41 INS21 INS42 INS21 INS21 INS42 INS54 INS42 INS43 INS42 INS21 INS21 INS21 MOV60 INS83 INS39 INS42 INS44 INS8 INS66 INS39 INS59 INS32 INS7 INS7 INS66 INS66 INS65 INS27 INS42 INS66 INS66 INS42 INS66 INS42 MOV32 INS8 UPD43 INS32 UPD43 INS83 INS42 INS32 INS83 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS9 INS43 INS59 INS74 INS32 INS32 INS32 UPD66 INS32 INS32 INS32 INS32 MOV8 INS12 INS42 INS7 INS32 INS32 INS83 INS43 INS42 INS21 INS42 INS32 INS42 INS42 INS27 INS42 MOV14 INS42 INS9 INS21 INS68 INS27 INS42 INS60 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 UPD42 UPD42 MOV42 MOV27 UPD42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS27 INS38 INS41 INS42 INS42 INS11 INS42 INS42 INS32 INS25 INS44 INS8 INS21 INS21 INS42 INS42 INS14 INS25 INS43 INS43 INS43 UPD42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS69 INS21 INS21 INS21 INS33 INS32 INS42 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 MOV27 INS21 INS21 INS21 INS21 INS60 INS60 INS60 INS44 INS8 INS22 INS42 INS21 INS21 INS42 INS40 INS21 INS42 INS40 INS21 INS21 INS25 INS42 INS32 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS7 INS42 INS27 INS27 MOV43 INS59 INS27 INS8 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS33 INS36 INS9 INS43 INS32 INS42 INS42 INS27 INS8 INS43 INS42 INS21 INS41 INS32 INS32 INS43 INS42 INS32 INS8 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS39 INS32 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS74 INS59 MOV74 INS59 MOV74 INS59 INS43 INS42 INS25 INS53 INS52 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS8 INS42 INS42 INS42 INS42 INS9 INS42 INS27 INS32 INS40 INS42 INS14 INS27 INS27 INS53 INS53 INS42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 INS62 INS42 INS42 INS42 INS27 INS27 INS41 INS42 INS32 INS9 UPD42 MOV42 INS45 UPD42 MOV42 MOV27 INS42 INS42 INS42 INS42 INS60 INS54 INS27 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 INS45 INS32 INS42 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 INS45 INS43 INS43 INS43 INS42 INS32 MOV43 MOV42 INS32 INS42 INS32 INS42 INS32 INS8 INS42 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 MOV21 INS42 INS33 INS32 INS42 MOV43 INS42 INS42 INS42 INS27 INS32 INS40 INS14 INS42 INS8 INS42 INS43 INS27 INS32 INS32 INS42 INS9 INS42 INS42 INS27 INS42 INS5 INS59 INS8 INS12 INS27 MOV27 INS42 INS42 INS42 INS42 INS32 INS42 MOV42 MOV42 INS32 UPD42 MOV42 INS32 INS42 INS42 INS53 UPD42 INS32 INS42 INS42 INS42 INS33 INS32 INS42 INS43 INS42 INS60 INS25 INS42 INS42 INS33 INS42 INS42 INS40 INS42 INS42 INS42 INS45 INS42 INS39 INS85 INS85 INS42 INS32 INS60 INS60 INS21 INS44 INS8 INS42 INS34 INS32 INS42 UPD45 MOV45 INS32 INS32 INS42 INS45 INS32 INS32 MOV42 MOV45 MOV32 INS14 MOV42 INS42 INS42 INS42 INS42 MOV43 INS59 INS27 MOV8 INS8 INS42 INS42 INS42 INS43 INS59 INS5 INS59 INS7 INS43 INS42 INS53 INS32 MOV42 INS45 INS32 INS42 INS42 INS32 UPD42 MOV42 INS45 MOV32 MOV42 UPD42 MOV42 INS32 MOV42 MOV45 MOV32 INS43 INS42 INS42 MOV14 INS27 INS27 INS53 INS42 INS42 INS32 INS39 INS85 INS85 INS42 INS32 INS42 INS2 INS42 INS14 INS32 INS42 UPD45 MOV45 INS32 INS42 INS42 INS32 MOV42 MOV45 MOV32 INS32 MOV42 MOV45 MOV32 INS42 INS42 INS27 INS32 INS40 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS27 INS32 INS42 INS45 INS32 UPD42 MOV42 INS42 INS42 INS43 INS43 UPD42 MOV42 INS32 INS42 INS45 INS32 INS42 INS33 INS32 INS42 INS43 INS42 INS40 INS34 INS42 INS45 INS42 INS32 MOV42 INS45 INS32 INS42 INS42 MOV42 MOV42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV42 UPD45 MOV45 INS32 INS42 INS42 MOV42 MOV42 INS32 UPD42 MOV42 INS45 MOV32 UPD42 MOV42 INS42 INS32 MOV42 UPD45 MOV45 MOV32 INS32 UPD42 MOV42 INS45 MOV32 INS32 MOV42 UPD45 MOV45 MOV32 INS32 UPD42 MOV42 INS45 MOV32 INS32 MOV42 MOV45 MOV32 INS32 INS42 MOV45 MOV32 INS32 INS42 INS45 INS32 UPD42 MOV42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS32 MOV42 INS45 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 DEL9 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL83 DEL66 DEL42 DEL65 DEL42 DEL65 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL33 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL32 DEL21 DEL32 DEL21 DEL32 DEL21 DEL32 DEL21 DEL32 DEL21 DEL32 DEL21 DEL83 DEL42 DEL43 DEL43 DEL43 DEL74 DEL14 DEL59 DEL60 DEL32 DEL21 DEL45 DEL32 DEL21 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL65 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42