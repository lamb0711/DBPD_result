YARN-6924. Metrics for Federation AMRMProxy. Contributed by Young Chen

+import org.apache.hadoop.yarn.util.Clock;
+import org.apache.hadoop.yarn.util.MonotonicClock;
+  private final Clock clock = new MonotonicClock();
+  private AMRMProxyMetrics metrics;
+
+    metrics = AMRMProxyMetrics.getMetrics();
+        this.metrics.incrFailedAppRecoveryCount();
-    LOG.info("Registering application master." + " Host:"
-        + request.getHost() + " Port:" + request.getRpcPort()
-        + " Tracking Url:" + request.getTrackingUrl());
-    RequestInterceptorChainWrapper pipeline =
-        authorizeAndGetInterceptorChain();
-    return pipeline.getRootInterceptor()
-        .registerApplicationMaster(request);
+    long startTime = clock.getTime();
+    try {
+      RequestInterceptorChainWrapper pipeline =
+          authorizeAndGetInterceptorChain();
+      LOG.info("Registering application master." + " Host:" + request.getHost()
+          + " Port:" + request.getRpcPort() + " Tracking Url:" + request
+          .getTrackingUrl() + " for application " + pipeline
+          .getApplicationAttemptId());
+      RegisterApplicationMasterResponse response =
+          pipeline.getRootInterceptor().registerApplicationMaster(request);
+
+      long endTime = clock.getTime();
+      this.metrics.succeededRegisterAMRequests(endTime - startTime);
+      LOG.info("RegisterAM processing finished in {} ms for application {}",
+          endTime - startTime, pipeline.getApplicationAttemptId());
+      return response;
+    } catch (Throwable t) {
+      this.metrics.incrFailedRegisterAMRequests();
+      throw t;
+    }
-    LOG.info("Finishing application master. Tracking Url:"
-        + request.getTrackingUrl());
-    RequestInterceptorChainWrapper pipeline =
-        authorizeAndGetInterceptorChain();
-    return pipeline.getRootInterceptor().finishApplicationMaster(request);
+    long startTime = clock.getTime();
+    try {
+      RequestInterceptorChainWrapper pipeline =
+          authorizeAndGetInterceptorChain();
+      LOG.info("Finishing application master for {}. Tracking Url: {}",
+          pipeline.getApplicationAttemptId(), request.getTrackingUrl());
+      FinishApplicationMasterResponse response =
+          pipeline.getRootInterceptor().finishApplicationMaster(request);
+
+      long endTime = clock.getTime();
+      this.metrics.succeededFinishAMRequests(endTime - startTime);
+      LOG.info("FinishAM finished with isUnregistered = {} in {} ms for {}",
+          response.getIsUnregistered(), endTime - startTime,
+          pipeline.getApplicationAttemptId());
+      return response;
+    } catch (Throwable t) {
+      this.metrics.incrFailedFinishAMRequests();
+      throw t;
+    }
-    AMRMTokenIdentifier amrmTokenIdentifier =
-        YarnServerSecurityUtils.authorizeRequest();
-    RequestInterceptorChainWrapper pipeline =
-        getInterceptorChain(amrmTokenIdentifier);
-    AllocateResponse allocateResponse =
-        pipeline.getRootInterceptor().allocate(request);
+    long startTime = clock.getTime();
+    try {
+      AMRMTokenIdentifier amrmTokenIdentifier =
+          YarnServerSecurityUtils.authorizeRequest();
+      RequestInterceptorChainWrapper pipeline =
+          getInterceptorChain(amrmTokenIdentifier);
+      AllocateResponse allocateResponse =
+          pipeline.getRootInterceptor().allocate(request);
-    updateAMRMTokens(amrmTokenIdentifier, pipeline, allocateResponse);
+      updateAMRMTokens(amrmTokenIdentifier, pipeline, allocateResponse);
-    return allocateResponse;
+      long endTime = clock.getTime();
+      this.metrics.succeededAllocateRequests(endTime - startTime);
+      LOG.info("Allocate processing finished in {} ms for application {}",
+          endTime - startTime, pipeline.getApplicationAttemptId());
+      return allocateResponse;
+    } catch (Throwable t) {
+      this.metrics.incrFailedAllocateRequests();
+      throw t;
+    }
-    LOG.info("Callback received for initializing request "
-        + "processing pipeline for an AM");
-    ContainerTokenIdentifier containerTokenIdentifierForKey =
-        BuilderUtils.newContainerTokenIdentifier(request
-            .getContainerToken());
-    ApplicationAttemptId appAttemptId =
-        containerTokenIdentifierForKey.getContainerID()
-            .getApplicationAttemptId();
-    Credentials credentials =
-        YarnServerSecurityUtils.parseCredentials(request
-            .getContainerLaunchContext());
+    long startTime = clock.getTime();
+    try {
+      LOG.info("Callback received for initializing request "
+          + "processing pipeline for an AM");
+      ContainerTokenIdentifier containerTokenIdentifierForKey =
+          BuilderUtils.newContainerTokenIdentifier(request.getContainerToken());
+      ApplicationAttemptId appAttemptId =
+          containerTokenIdentifierForKey.getContainerID()
+              .getApplicationAttemptId();
+      Credentials credentials = YarnServerSecurityUtils
+          .parseCredentials(request.getContainerLaunchContext());
-    Token<AMRMTokenIdentifier> amrmToken =
-        getFirstAMRMToken(credentials.getAllTokens());
-    if (amrmToken == null) {
-      throw new YarnRuntimeException(
-          "AMRMToken not found in the start container request for application:"
-              + appAttemptId.toString());
+      Token<AMRMTokenIdentifier> amrmToken =
+          getFirstAMRMToken(credentials.getAllTokens());
+      if (amrmToken == null) {
+        throw new YarnRuntimeException(
+            "AMRMToken not found in the start container request for "
+                + "application:" + appAttemptId.toString());
+      }
+
+      // Substitute the existing AMRM Token with a local one. Keep the rest of
+      // the tokens in the credentials intact.
+      Token<AMRMTokenIdentifier> localToken =
+          this.secretManager.createAndGetAMRMToken(appAttemptId);
+      credentials.addToken(localToken.getService(), localToken);
+
+      DataOutputBuffer dob = new DataOutputBuffer();
+      credentials.writeTokenStorageToStream(dob);
+      request.getContainerLaunchContext()
+          .setTokens(ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));
+
+      initializePipeline(appAttemptId,
+          containerTokenIdentifierForKey.getApplicationSubmitter(), amrmToken,
+          localToken, null, false, credentials);
+
+      long endTime = clock.getTime();
+      this.metrics.succeededAppStartRequests(endTime - startTime);
+    } catch (Throwable t) {
+      this.metrics.incrFailedAppStartRequests();
+      throw t;
-
-    // Substitute the existing AMRM Token with a local one. Keep the rest of the
-    // tokens in the credentials intact.
-    Token<AMRMTokenIdentifier> localToken =
-        this.secretManager.createAndGetAMRMToken(appAttemptId);
-    credentials.addToken(localToken.getService(), localToken);
-
-    DataOutputBuffer dob = new DataOutputBuffer();
-    credentials.writeTokenStorageToStream(dob);
-    request.getContainerLaunchContext().setTokens(
-        ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));
-
-    initializePipeline(appAttemptId,
-        containerTokenIdentifierForKey.getApplicationSubmitter(), amrmToken,
-        localToken, null, false, credentials);

INS26 INS26 INS40 INS40 INS23 INS23 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS8 INS8 INS8 INS8 INS42 INS42 INS14 INS42 INS42 INS21 INS60 INS54 INS60 INS54 INS60 INS54 INS60 INS54 INS43 INS7 INS39 INS59 MOV8 MOV21 INS12 INS39 INS59 INS8 INS12 INS39 INS59 MOV8 INS12 INS39 INS59 MOV8 INS12 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS21 INS21 INS44 INS8 INS42 INS32 MOV60 MOV21 INS60 INS60 INS21 INS21 MOV41 INS44 INS8 INS42 INS32 INS60 INS21 INS21 INS44 INS8 INS42 INS32 INS60 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS39 INS59 INS32 INS32 INS42 INS43 INS42 INS21 INS53 INS42 INS42 INS43 INS59 INS39 INS59 INS32 INS32 INS42 INS43 INS42 INS21 INS53 INS42 INS42 INS39 INS59 INS32 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS39 INS59 INS32 INS43 INS42 INS21 INS53 INS42 INS42 MOV32 INS42 INS32 INS22 INS42 INS27 INS42 INS42 INS45 INS27 INS32 INS42 INS32 INS42 INS45 INS32 MOV32 INS42 INS42 MOV32 INS42 INS32 INS22 INS42 INS27 INS42 INS42 INS45 INS32 INS27 INS32 INS42 INS32 INS42 INS42 INS32 INS22 INS42 INS27 INS42 INS42 INS45 INS27 INS32 INS42 INS32 INS42 INS42 INS32 INS22 INS42 INS27 INS42 INS32 INS42 INS21 INS45 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS22 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS42 UPD45 INS45 INS52 INS42 DEL45 DEL27 DEL8