HDDS-2223. Support ReadWrite lock in LockManager. (#1564)



-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
-  private Lock lock;
+  private ReadWriteLock lock;
-    this.lock = new ReentrantLock();
+    this.lock = new ReentrantReadWriteLock();
-   * Acquires the lock.
+   * Acquires read lock.
-   * <p>If the lock is not available then the current thread becomes
-   * disabled for thread scheduling purposes and lies dormant until the
-   * lock has been acquired.
+   * <p>Acquires the read lock if the write lock is not held by
+   * another thread and returns immediately.
+   *
+   * <p>If the write lock is held by another thread then
+   * the current thread becomes disabled for thread scheduling
+   * purposes and lies dormant until the read lock has been acquired.
-  public void lock() {
-    lock.lock();
+  void readLock() {
+    lock.readLock().lock();
-   * Releases the lock.
+   * Attempts to release the read lock.
+   *
+   * <p>If the number of readers is now zero then the lock
+   * is made available for write lock attempts.
-  public void unlock() {
-    lock.unlock();
+  void readUnlock() {
+    lock.readLock().unlock();
+  }
+
+  /**
+   * Acquires write lock.
+   *
+   * <p>Acquires the write lock if neither the read nor write lock
+   * are held by another thread
+   * and returns immediately, setting the write lock hold count to
+   * one.
+   *
+   * <p>If the current thread already holds the write lock then the
+   * hold count is incremented by one and the method returns
+   * immediately.
+   *
+   * <p>If the lock is held by another thread then the current
+   * thread becomes disabled for thread scheduling purposes and
+   * lies dormant until the write lock has been acquired.
+   */
+  void writeLock() {
+    lock.writeLock().lock();
+  }
+
+  /**
+   * Attempts to release the write lock.
+   *
+   * <p>If the current thread is the holder of this lock then
+   * the hold count is decremented. If the hold count is now
+   * zero then the lock is released.
+   */
+  void writeUnlock() {
+    lock.writeLock().unlock();

UPD40 UPD40 INS31 INS31 UPD43 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 UPD42 UPD42 UPD42 INS65 INS21 INS65 INS21 INS66 INS66 INS66 INS66 INS66 INS66 INS32 INS66 INS66 INS66 INS32 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS32 INS42 INS32 INS42 INS32 INS32 UPD43 INS42 INS42 INS42 INS42 MOV42 INS42 MOV42 INS42 UPD42 DEL83 DEL83