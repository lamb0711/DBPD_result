HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.

+import com.google.common.annotations.VisibleForTesting;
+import java.util.Arrays;
+import javax.crypto.SecretKey;
+import javax.security.sasl.Sasl;
+import org.apache.hadoop.hdfs.security.token.block.BlockKey;
+import org.apache.hadoop.security.SaslRpcServer;
+import org.apache.hadoop.security.token.SecretManager;
+  // Store the most recent successfully negotiated QOP,
+  // for testing purpose only
+  private String negotiatedQOP;
+
+  private String examineSecret(byte[] secret, String bpid) {
+    BlockKey blockKey = blockPoolTokenSecretManager.get(bpid).getCurrentKey();
+    SecretKey secretKey = blockKey.getKey();
+    for (SaslRpcServer.QualityOfProtection qop :
+        SaslRpcServer.QualityOfProtection.values()) {
+      String qopString = qop.getSaslQop();
+      byte[] data = qopString.getBytes(Charsets.UTF_8);
+      byte[] encryptedData = SecretManager.createPassword(data, secretKey);
+      if (Arrays.equals(encryptedData, secret)) {
+        return qopString;
+      }
+    }
+    return null;
+  }
+
+  @VisibleForTesting
+  public String getNegotiatedQOP() {
+    return negotiatedQOP;
+  }
+
-    SaslParticipant sasl = SaslParticipant.createServerSaslParticipant(saslProps,
-      callbackHandler);
-
-      byte[] remoteResponse = readSaslMessage(in);
+      SaslMessageWithHandshake message = readSaslMessageWithHandshakeSecret(in);
+      byte[] secret = message.getSecret();
+      String bpid = message.getBpid();
+      if (secret != null || bpid != null) {
+        // sanity check, if one is null, the other must also not be null
+        assert(secret != null && bpid != null);
+        String qop = examineSecret(secret, bpid);
+        if (qop != null) {
+          saslProps.put(Sasl.QOP, qop);
+        } else {
+          LOG.error("Unable to match secret to a QOP!");
+        }
+      }
+      SaslParticipant sasl = SaslParticipant.createServerSaslParticipant(
+          saslProps, callbackHandler);
+
+      byte[] remoteResponse = message.getPayload();
+      negotiatedQOP = sasl.getNegotiatedQop();

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS5 INS42 INS43 INS42 INS60 INS60 INS70 INS41 INS42 INS42 INS41 INS39 INS85 INS42 INS43 INS59 INS43 INS59 INS44 INS32 INS8 INS33 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS40 INS42 INS60 INS60 INS60 INS25 INS60 INS60 INS25 MOV60 INS60 INS21 INS32 INS42 INS42 INS42 INS40 INS43 INS59 INS5 INS59 MOV5 INS59 INS32 INS8 INS43 INS5 INS59 INS43 INS59 INS27 INS8 INS5 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS41 INS42 UPD42 INS39 INS85 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS6 INS60 INS25 INS39 INS85 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS36 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS27 INS27 INS42 INS42 INS42 INS32 INS32 INS42 INS33 INS42 INS33 INS42 INS42 INS40 INS42 INS42 INS42 INS45