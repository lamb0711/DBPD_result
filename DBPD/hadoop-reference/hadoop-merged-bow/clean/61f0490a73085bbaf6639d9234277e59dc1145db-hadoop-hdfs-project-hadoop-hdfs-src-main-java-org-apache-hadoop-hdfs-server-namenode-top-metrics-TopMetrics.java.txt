HDFS-10984. Expose nntop output as metrics. Contributed by Siddharth Wagle.

-import java.net.InetAddress;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-
+import org.apache.commons.lang.StringUtils;
+import org.apache.hadoop.hdfs.server.namenode.top.window.RollingWindowManager.Op;
+import org.apache.hadoop.hdfs.server.namenode.top.window.RollingWindowManager.User;
+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsInfo;
+import org.apache.hadoop.metrics2.MetricsRecordBuilder;
+import org.apache.hadoop.metrics2.MetricsSource;
+import org.apache.hadoop.metrics2.lib.Interns;
+import java.net.InetAddress;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
-public class TopMetrics {
+public class TopMetrics implements MetricsSource {
+  public static final String TOPMETRICS_METRICS_SOURCE_NAME =
+      "NNTopUserOpCounts";
+  private final boolean isMetricsSourceEnabled;
+    isMetricsSourceEnabled = conf.getBoolean(DFSConfigKeys.NNTOP_ENABLED_KEY,
+        DFSConfigKeys.NNTOP_ENABLED_DEFAULT);
+
+  /**
+   * Flatten out the top window metrics into
+   * {@link org.apache.hadoop.metrics2.MetricsRecord}s for consumption by
+   * external metrics systems. Each metrics record added corresponds to the
+   * reporting period a.k.a window length of the configured rolling windows.
+   */
+  @Override
+  public void getMetrics(MetricsCollector collector, boolean all) {
+    if (!isMetricsSourceEnabled) {
+      return;
+    }
+
+    for (final TopWindow window : getTopWindows()) {
+      MetricsRecordBuilder rb = collector.addRecord(buildOpRecordName(window))
+          .setContext("dfs");
+      for (final Op op: window.getOps()) {
+        rb.addCounter(buildOpTotalCountMetricsInfo(op), op.getTotalCount());
+        for (User user : op.getTopUsers()) {
+          rb.addCounter(buildOpRecordMetricsInfo(op, user), user.getCount());
+        }
+      }
+    }
+  }
+
+  private String buildOpRecordName(TopWindow window) {
+    return TOPMETRICS_METRICS_SOURCE_NAME + ".windowMs="
+      + window.getWindowLenMs();
+  }
+
+  private MetricsInfo buildOpTotalCountMetricsInfo(Op op) {
+    return Interns.info("op=" + StringUtils.deleteWhitespace(op.getOpType())
+      + ".TotalCount", "Total operation count");
+  }
+
+  private MetricsInfo buildOpRecordMetricsInfo(Op op, User user) {
+    return Interns.info("op=" + StringUtils.deleteWhitespace(op.getOpType())
+      + ".user=" + user.getUser()
+      + ".count", "Total operations performed by user");
+  }

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS45 INS42 INS21 INS65 INS42 INS43 INS42 INS39 INS42 INS25 INS70 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS7 INS66 INS65 INS66 INS66 INS66 INS42 INS38 INS8 INS44 INS32 INS8 INS42 INS27 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS40 INS42 INS41 INS83 INS43 INS42 INS42 INS60 INS70 INS42 INS45 INS32 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS40 INS40 INS42 INS43 INS59 INS44 INS32 INS8 INS42 INS42 INS45 INS32 INS45 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS32 INS83 INS43 INS42 INS42 INS42 INS21 INS70 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS32 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42