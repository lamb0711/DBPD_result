YARN-2495. Allow admin specify labels from each NM (Distributed configuration for node label). (Naganarasimha G R via wangda)

+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import org.apache.hadoop.util.StringUtils;
+  private boolean isDistributesNodeLabelsConf;
+
+    String nodeLabelConfigurationType =
+        conf.get(YarnConfiguration.NODELABEL_CONFIGURATION_TYPE,
+            YarnConfiguration.DEFAULT_NODELABEL_CONFIGURATION_TYPE);
+
+    isDistributesNodeLabelsConf =
+        YarnConfiguration.DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE
+            .equals(nodeLabelConfigurationType);
+
-    String message =
-        "NodeManager from node " + host + "(cmPort: " + cmPort + " httpPort: "
-            + httpPort + ") " + "registered with capability: " + capability
-            + ", assigned nodeId " + nodeId;
-    LOG.info(message);
+    // Update node's labels to RM's NodeLabelManager.
+    Set<String> nodeLabels = request.getNodeLabels();
+    if (isDistributesNodeLabelsConf && nodeLabels != null) {
+      try {
+        updateNodeLabelsFromNMReport(nodeLabels, nodeId);
+        response.setAreNodeLabelsAcceptedByRM(true);
+      } catch (IOException ex) {
+        // Ensure the exception is captured in the response
+        response.setDiagnosticsMessage(ex.getMessage());
+        response.setAreNodeLabelsAcceptedByRM(false);
+      }
+    }
+
+    StringBuilder message = new StringBuilder();
+    message.append("NodeManager from node ").append(host).append("(cmPort: ")
+        .append(cmPort).append(" httpPort: ");
+    message.append(httpPort).append(") ")
+        .append("registered with capability: ").append(capability);
+    message.append(", assigned nodeId ").append(nodeId);
+    if (response.getAreNodeLabelsAcceptedByRM()) {
+      message.append(", node labels { ").append(
+          StringUtils.join(",", nodeLabels) + " } ");
+    }
+
+    LOG.info(message.toString());
+     * 5. Update node's labels if distributed Node Labels configuration is enabled
+    // 5. Update node's labels to RM's NodeLabelManager.
+    if (isDistributesNodeLabelsConf && request.getNodeLabels() != null) {
+      try {
+        updateNodeLabelsFromNMReport(request.getNodeLabels(), nodeId);
+        nodeHeartBeatResponse.setAreNodeLabelsAcceptedByRM(true);
+      } catch (IOException ex) {
+        //ensure the error message is captured and sent across in response
+        nodeHeartBeatResponse.setDiagnosticsMessage(ex.getMessage());
+        nodeHeartBeatResponse.setAreNodeLabelsAcceptedByRM(false);
+      }
+    }
+
+  private void updateNodeLabelsFromNMReport(Set<String> nodeLabels,
+      NodeId nodeId) throws IOException {
+    try {
+      Map<NodeId, Set<String>> labelsUpdate =
+          new HashMap<NodeId, Set<String>>();
+      labelsUpdate.put(nodeId, nodeLabels);
+      this.rmContext.getNodeLabelManager().replaceLabelsOnNode(labelsUpdate);
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Node Labels {" + StringUtils.join(",", nodeLabels)
+            + "} from Node " + nodeId + " were Accepted from RM");
+      }
+    } catch (IOException ex) {
+      StringBuilder errorMessage = new StringBuilder();
+      errorMessage.append("Node Labels {")
+          .append(StringUtils.join(",", nodeLabels))
+          .append("} reported from NM with ID ").append(nodeId)
+          .append(" was rejected from RM with exception message as : ")
+          .append(ex.getMessage());
+      LOG.error(errorMessage, ex);
+      throw new IOException(errorMessage.toString(), ex);
+    }
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS60 INS21 INS60 INS25 INS60 INS21 INS21 INS21 INS25 INS25 INS74 INS42 INS43 INS42 INS42 INS54 MOV43 INS59 INS7 INS74 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS8 INS27 INS8 INS43 INS43 INS42 INS8 INS12 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS27 INS54 INS42 MOV42 INS14 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS32 INS42 INS27 INS54 INS42 INS42 INS60 INS21 INS21 INS25 INS44 INS8 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS33 INS8 INS12 INS43 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS45 INS32 MOV42 INS42 INS32 INS33 INS8 INS12 INS74 INS59 INS32 INS32 INS32 INS8 INS43 INS42 INS60 INS21 INS21 INS53 INS21 INS21 INS44 INS8 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS27 INS42 INS42 INS21 INS21 INS44 INS8 INS43 INS43 INS74 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS42 INS43 INS59 INS32 INS32 INS14 INS32 INS32 INS43 INS42 INS21 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS32 INS43 INS42 INS21 INS21 INS42 INS42 INS43 INS43 INS74 INS22 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS42 INS32 INS32 INS42 INS42 INS43 INS43 INS74 INS52 INS42 INS42 INS42 INS27 INS43 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS43 INS43 INS45 INS32 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60