MAPREDUCE-3398. Fixed log aggregation to work correctly in secure mode. Contributed by Siddharth Seth.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1214429 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Random;
+
+  private boolean tokenKeepAliveEnabled;
+  private long tokenRemovalDelayMs;
+  /** Keeps track of when the next keep alive request should be sent for an app*/
+  private Map<ApplicationId, Long> appTokenKeepAliveMap =
+      new HashMap<ApplicationId, Long>();
+  private Random keepAliveDelayRandom = new Random();
+    this.tokenKeepAliveEnabled =
+        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,
+            YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)
+            && isSecurityEnabled();
+    this.tokenRemovalDelayMs =
+        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,
+            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);
+  protected boolean isSecurityEnabled() {
+    return UserGroupInformation.isSecurityEnabled();
+  }
+
+  private List<ApplicationId> createKeepAliveApplicationList() {
+    if (!tokenKeepAliveEnabled) {
+      return Collections.emptyList();
+    }
+
+    List<ApplicationId> appList = new ArrayList<ApplicationId>();
+    for (Iterator<Entry<ApplicationId, Long>> i =
+        this.appTokenKeepAliveMap.entrySet().iterator(); i.hasNext();) {
+      Entry<ApplicationId, Long> e = i.next();
+      ApplicationId appId = e.getKey();
+      Long nextKeepAlive = e.getValue();
+      if (!this.context.getApplications().containsKey(appId)) {
+        // Remove if the application has finished.
+        i.remove();
+      } else if (System.currentTimeMillis() > nextKeepAlive) {
+        // KeepAlive list for the next hearbeat.
+        appList.add(appId);
+        trackAppForKeepAlive(appId);
+      }
+    }
+    return appList;
+  }
+
+    List<ApplicationId> keepAliveAppIds = createKeepAliveApplicationList();
+    nodeStatus.setKeepAliveApplications(keepAliveAppIds);
+    
+  private void trackAppsForKeepAlive(List<ApplicationId> appIds) {
+    if (tokenKeepAliveEnabled && appIds != null && appIds.size() > 0) {
+      for (ApplicationId appId : appIds) {
+        trackAppForKeepAlive(appId);
+      }
+    }
+  }
+
+  private void trackAppForKeepAlive(ApplicationId appId) {
+    // Next keepAlive request for app between 0.7 & 0.9 of when the token will
+    // likely expire.
+    long nextTime = System.currentTimeMillis()
+    + (long) (0.7 * tokenRemovalDelayMs + (0.2 * tokenRemovalDelayMs
+        * keepAliveDelayRandom.nextInt(100))/100);
+    appTokenKeepAliveMap.put(appId, nextTime);
+  }
+
+      @SuppressWarnings("unchecked")
+            //Only start tracking for keepAlive on FINISH_APP
+            trackAppsForKeepAlive(appsToCleanup);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS29 INS83 INS74 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS65 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS21 INS21 INS41 INS43 INS43 INS25 INS60 INS24 INS41 INS60 INS21 INS74 INS42 INS25 INS43 INS42 INS60 INS21 INS66 INS42 INS42 INS42 INS74 INS43 INS7 INS7 INS32 INS42 INS42 INS38 INS8 INS74 INS59 INS58 INS32 INS8 INS42 INS74 INS59 INS32 INS43 INS43 INS27 INS8 INS42 INS39 INS59 INS32 INS43 INS43 INS43 INS42 INS22 INS27 INS22 INS32 INS42 INS42 INS42 INS41 INS43 INS43 INS42 INS14 INS74 INS59 INS42 INS42 INS60 INS60 INS60 INS25 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS70 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS32 INS52 INS42 INS42 INS42 INS40 INS40 INS32 INS42 INS42 INS74 INS43 INS74 INS42 INS32 INS74 INS59 INS43 INS59 INS43 INS59 INS38 INS8 INS25 INS42 INS42 INS42 INS42 INS27 INS32 INS34 INS44 INS42 INS8 INS32 INS11 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS43 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS27 INS8 INS42 INS33 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS39 INS36 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS21 INS21 INS42 INS32 INS27 INS79 INS52 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS27 INS42 INS45 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS36 INS34 INS27 INS34 INS42 INS32 INS42 INS42 INS34 INS21 INS32 INS42 INS42