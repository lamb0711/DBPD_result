HDFS-11782. Ozone: KSM: Add listKey. Contributed by Yiqun Lin.

+import org.apache.hadoop.ksm.helpers.KsmKeyInfo;
+import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos.KeyInfo;
+  private String getKeyKeyPrefix(String volume, String bucket, String key) {
+    String keyStr = getBucketKeyPrefix(volume, bucket);
+    keyStr = Strings.isNullOrEmpty(key) ? keyStr + OzoneConsts.KSM_KEY_PREFIX
+        : keyStr + OzoneConsts.KSM_KEY_PREFIX + key;
+    return keyStr;
+  }
+
+
+  @Override
+  public List<KsmKeyInfo> listKeys(String volumeName, String bucketName,
+      String startKey, String keyPrefix, int maxKeys) throws IOException {
+    List<KsmKeyInfo> result = new ArrayList<>();
+    if (Strings.isNullOrEmpty(volumeName)) {
+      throw new KSMException("Volume name is required.",
+          ResultCodes.FAILED_VOLUME_NOT_FOUND);
+    }
+
+    if (Strings.isNullOrEmpty(bucketName)) {
+      throw new KSMException("Bucket name is required.",
+          ResultCodes.FAILED_BUCKET_NOT_FOUND);
+    }
+
+    byte[] bucketNameBytes = getBucketKey(volumeName, bucketName);
+    if (store.get(bucketNameBytes) == null) {
+      throw new KSMException("Bucket " + bucketName + " not found.",
+          ResultCodes.FAILED_BUCKET_NOT_FOUND);
+    }
+
+    byte[] startKeyBytes = null;
+    if (!Strings.isNullOrEmpty(startKey)) {
+      startKeyBytes = getDBKeyForKey(volumeName, bucketName, startKey);
+    }
+    LevelDBKeyFilter filter =
+        new KeyPrefixFilter(getKeyKeyPrefix(volumeName, bucketName, keyPrefix));
+    List<Map.Entry<byte[], byte[]>> rangeResult =
+        store.getRangeKVs(startKeyBytes, maxKeys, filter);
+    for (Map.Entry<byte[], byte[]> entry : rangeResult) {
+      KsmKeyInfo info = KsmKeyInfo.getFromProtobuf(
+          KeyInfo.parseFrom(entry.getValue()));
+      result.add(info);
+    }
+    return result;
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS41 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS25 INS25 INS60 INS25 INS60 INS25 INS60 INS60 INS70 INS41 INS42 INS42 INS42 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS8 INS32 INS8 INS5 INS59 INS27 INS8 INS5 INS59 INS38 INS8 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS32 INS42 INS16 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS53 INS39 INS85 INS42 INS32 INS32 INS33 INS53 INS39 INS85 INS42 INS33 INS32 INS21 INS42 INS42 INS14 INS43 INS74 INS42 INS32 INS74 INS42 INS60 INS21 INS42 INS42 INS42 INS32 INS27 INS27 INS42 INS42 INS74 INS14 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS7 INS43 INS32 INS42 INS43 INS5 INS5 INS42 INS42 INS42 INS42 INS42 INS43 INS5 INS5 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS43 INS43 INS45 INS40 INS43 INS45 INS40 INS43 INS27 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS39 INS85 INS39 INS85 INS40 INS39 INS85 INS39 INS85 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42