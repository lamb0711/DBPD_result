Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
-import org.apache.hadoop.hdfs.protocol.FSConstants;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
-import org.apache.hadoop.hdfs.server.common.HdfsConstants.NamenodeRole;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.NamenodeRole;
+import org.apache.hadoop.hdfs.server.namenode.JournalManager.CorruptionException;
+import org.apache.hadoop.io.IOUtils;
-  private long curSegmentTxId = FSConstants.INVALID_TXID;
+  private long curSegmentTxId = HdfsConstants.INVALID_TXID;
-      assert curSegmentTxId == FSConstants.INVALID_TXID || // on format this is no-op
+      assert curSegmentTxId == HdfsConstants.INVALID_TXID || // on format this is no-op
+   * Find the best editlog input stream to read from txid. In this case
+   * best means the editlog which has the largest continuous range of 
+   * transactions starting from the transaction id, fromTxId.
+   *
+   * If a journal throws an CorruptionException while reading from a txn id,
+   * it means that it has more transactions, but can't find any from fromTxId. 
+   * If this is the case and no other journal has transactions, we should throw
+   * an exception as it means more transactions exist, we just can't load them.
+   *
+   * @param fromTxId Transaction id to start from.
+   * @return a edit log input stream with tranactions fromTxId 
+   *         or null if no more exist
+   */
+  private EditLogInputStream selectStream(long fromTxId) 
+      throws IOException {
+    JournalManager bestjm = null;
+    long bestjmNumTxns = 0;
+    CorruptionException corruption = null;
+
+    for (JournalAndStream jas : journals) {
+      JournalManager candidate = jas.getManager();
+      long candidateNumTxns = 0;
+      try {
+        candidateNumTxns = candidate.getNumberOfTransactions(fromTxId);
+      } catch (CorruptionException ce) {
+        corruption = ce;
+      } catch (IOException ioe) {
+        LOG.warn("Error reading number of transactions from " + candidate);
+        continue; // error reading disk, just skip
+      }
+      
+      if (candidateNumTxns > bestjmNumTxns) {
+        bestjm = candidate;
+        bestjmNumTxns = candidateNumTxns;
+      }
+    }
+    
+    
+    if (bestjm == null) {
+      /**
+       * If all candidates either threw a CorruptionException or
+       * found 0 transactions, then a gap exists. 
+       */
+      if (corruption != null) {
+        throw new IOException("Gap exists in logs from " 
+                              + fromTxId, corruption);
+      } else {
+        return null;
+      }
+    }
+
+    return bestjm.getInputStream(fromTxId);
+  }
+
+  /**
+   * Run recovery on all journals to recover any unclosed segments
+   */
+  void recoverUnclosedStreams() {
+    mapJournalsAndReportErrors(new JournalClosure() {
+        @Override
+        public void apply(JournalAndStream jas) throws IOException {
+          jas.manager.recoverUnfinalizedSegments();
+        }
+      }, "recovering unclosed streams");
+  }
+
+  /**
+   * Select a list of input streams to load.
+   * @param fromTxId first transaction in the selected streams
+   * @param toAtLeast the selected streams must contain this transaction
+   */
+  Collection<EditLogInputStream> selectInputStreams(long fromTxId, long toAtLeastTxId) 
+      throws IOException {
+    List<EditLogInputStream> streams = Lists.newArrayList();
+    
+    boolean gapFound = false;
+    EditLogInputStream stream = selectStream(fromTxId);
+    while (stream != null) {
+      fromTxId = stream.getLastTxId() + 1;
+      streams.add(stream);
+      try {
+        stream = selectStream(fromTxId);
+      } catch (IOException ioe) {
+        gapFound = true;
+        break;
+      }
+    }
+    if (fromTxId <= toAtLeastTxId || gapFound) {
+      closeAllStreams(streams);
+      throw new IOException("No non-corrupt logs for txid " 
+                            + fromTxId);
+    }
+    return streams;
+  }
+
+  /** 
+   * Close all the streams in a collection
+   * @param streams The list of streams to close
+   */
+  static void closeAllStreams(Iterable<EditLogInputStream> streams) {
+    for (EditLogInputStream s : streams) {
+      IOUtils.closeStream(s);
+    }
+  }
+
+  /**
-    private long segmentStartsAtTxId = FSConstants.INVALID_TXID;
+    private long segmentStartsAtTxId = HdfsConstants.INVALID_TXID;
-      segmentStartsAtTxId = FSConstants.INVALID_TXID;
+      segmentStartsAtTxId = HdfsConstants.INVALID_TXID;
-
-    private EditLogInputStream getInProgressInputStream() throws IOException {
-      return manager.getInProgressInputStream(segmentStartsAtTxId);
-    }
-  }
-
-  /**
-   * @return an EditLogInputStream that reads from the same log that
-   * the edit log is currently writing. This is used from the BackupNode
-   * during edits synchronization.
-   * @throws IOException if no valid logs are available.
-   */
-  synchronized EditLogInputStream getInProgressFileInputStream()
-      throws IOException {
-    for (JournalAndStream jas : journals) {
-      if (!jas.isActive()) continue;
-      try {
-        EditLogInputStream in = jas.getInProgressInputStream();
-        if (in != null) return in;
-      } catch (IOException ioe) {
-        LOG.warn("Unable to get the in-progress input stream from " + jas,
-            ioe);
-      }
-    }
-    throw new IOException("No in-progress stream provided edits");

INS26 INS26 INS26 MOV55 INS40 UPD40 UPD40 INS40 INS40 INS31 INS31 INS31 UPD83 UPD42 INS44 INS43 INS29 INS39 INS42 INS8 INS29 INS74 INS42 INS44 INS44 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 UPD40 UPD65 UPD65 INS65 INS39 INS42 INS42 INS60 INS60 INS60 INS25 INS41 INS65 INS21 INS65 INS65 INS65 INS43 INS43 INS39 INS42 INS39 INS42 INS60 INS60 INS60 INS61 INS25 INS41 INS65 INS65 INS74 INS42 INS70 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 UPD42 UPD66 INS66 INS66 INS43 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS32 INS66 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS74 INS59 INS39 INS59 MOV43 INS59 INS27 INS8 INS27 INS8 INS42 INS66 INS42 INS66 INS43 INS43 INS44 INS42 INS8 UPD40 INS42 INS42 INS33 INS42 INS34 INS42 INS42 INS33 INS60 INS60 INS25 INS42 INS33 INS25 INS42 INS42 INS42 INS42 INS14 INS45 INS43 MOV43 INS42 INS32 INS42 INS9 INS42 INS32 INS42 INS33 INS21 INS21 INS54 INS27 INS42 INS21 MOV53 INS42 INS42 INS43 INS42 INS21 INS43 INS59 INS39 INS59 INS8 INS12 INS27 INS8 INS27 INS8 INS8 INS43 INS1 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS8 INS12 INS42 INS42 INS32 INS42 INS32 UPD40 INS42 INS42 INS32 INS42 INS34 INS21 INS44 INS8 INS44 INS42 INS42 INS21 INS21 INS42 INS33 INS53 INS41 INS42 INS31 INS42 INS27 INS42 INS42 INS42 INS21 MOV44 INS8 INS42 INS42 INS27 INS42 INS42 INS42 UPD40 MOV42 UPD42 MOV42 INS7 INS43 INS42 INS21 INS43 INS42 INS18 INS7 INS7 INS14 INS33 INS78 INS83 INS39 INS42 INS44 MOV43 INS8 INS32 INS34 INS7 INS21 INS10 INS45 INS42 INS42 INS32 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS32 INS7 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS9 UPD45 UPD42 INS40 INS42 DEL32 DEL38 DEL18 DEL25 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL25 DEL8 DEL42 DEL45 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31