YARN-10189. Code cleanup in LeveldbRMStateStore. Contributed by Benjamin Teke

-import java.util.Timer;
-import java.util.TimerTask;
+import org.apache.hadoop.yarn.server.resourcemanager.DBManager;
-import org.apache.hadoop.util.Time;
-import org.apache.hadoop.yarn.proto.YarnServerCommonProtos.VersionProto;
-import org.apache.hadoop.yarn.server.records.impl.pb.VersionPBImpl;
-import org.fusesource.leveldbjni.JniDBFactory;
-import org.fusesource.leveldbjni.internal.NativeDB;
-  private Timer compactionTimer;
+  private DBManager dbManager = new DBManager();
-  protected void initInternal(Configuration conf) throws Exception {
+  protected void initInternal(Configuration conf) {
-    db = openDatabase();
-    startCompactionTimer();
-  }
-
-  protected DB openDatabase() throws Exception {
-    try {
-      db = JniDBFactory.factory.open(dbfile, options);
-    } catch (NativeDB.DBException e) {
-      if (e.isNotFound() || e.getMessage().contains(" does not exist ")) {
-        LOG.info("Creating state database at " + dbfile);
-        options.createIfMissing(true);
-        try {
-          db = JniDBFactory.factory.open(dbfile, options);
-          // store version
-          storeVersion();
-        } catch (DBException dbErr) {
-          throw new IOException(dbErr.getMessage(), dbErr);
-        }
-      } else {
-        throw e;
-      }
-    }
-    return db;
-  }
-
-  private void startCompactionTimer() {
-    if (compactionIntervalMsec > 0) {
-      compactionTimer = new Timer(
-          this.getClass().getSimpleName() + " compaction timer", true);
-      compactionTimer.schedule(new CompactionTimerTask(),
-          compactionIntervalMsec, compactionIntervalMsec);
-    }
+    db = dbManager.initDatabase(dbfile, options, (database) ->
+        storeVersion(CURRENT_VERSION_INFO));
+    dbManager.startCompactionTimer(compactionIntervalMsec,
+        this.getClass().getSimpleName());
-    if (compactionTimer != null) {
-      compactionTimer.cancel();
-      compactionTimer = null;
-    }
-    if (db != null) {
-      db.close();
-      db = null;
-    }
+    dbManager.close();
-    Version version = null;
-    try {
-      byte[] data = db.get(bytes(VERSION_NODE));
-      if (data != null) {
-        version = new VersionPBImpl(VersionProto.parseFrom(data));
-      }
-    } catch (DBException e) {
-      throw new IOException(e);
-    }
-    return version;
+    return dbManager.loadVersion(VERSION_NODE);
-    dbStoreVersion(CURRENT_VERSION_INFO);
-  }
-
-  void dbStoreVersion(Version state) throws IOException {
-    String key = VERSION_NODE;
-    byte[] data = ((VersionPBImpl) state).getProto().toByteArray();
-      db.put(bytes(key), data);
+      storeVersion(CURRENT_VERSION_INFO);
+  protected void storeVersion(Version version) {
+    dbManager.storeVersion(VERSION_NODE, version);
+  }
+
-    LeveldbIterator iter = null;
-    try {
-      iter = new LeveldbIterator(db);
+    try (LeveldbIterator iter = new LeveldbIterator(db)) {
-    } finally {
-      if (iter != null) {
-        iter.close();
-      }
-    LeveldbIterator iter = null;
-    try {
-      iter = new LeveldbIterator(db);
+    try (LeveldbIterator iter = new LeveldbIterator(db)) {
-    } finally {
-      if (iter != null) {
-        iter.close();
-      }
-    LeveldbIterator iter = null;
-    try {
-      iter = new LeveldbIterator(db);
+    try (LeveldbIterator iter = new LeveldbIterator(db)) {
-    } finally {
-      if (iter != null) {
-        iter.close();
-      }
-    RMDelegationTokenIdentifierData tokenData = null;
+    RMDelegationTokenIdentifierData tokenData;
-    byte[] data = null;
+    byte[] data;
-    LeveldbIterator iter = null;
-    try {
-      iter = new LeveldbIterator(db);
+    try (LeveldbIterator iter = new LeveldbIterator(db)) {
-    } finally {
-      if (iter != null) {
-        iter.close();
-      }
-    byte[] data = null;
+    byte[] data;
-    byte[] data = null;
+    byte[] data;
-      WriteBatch batch = db.createWriteBatch();
-      try {
+      try (WriteBatch batch = db.createWriteBatch()) {
-      } finally {
-        batch.close();
-      WriteBatch batch = db.createWriteBatch();
-      try {
+      try (WriteBatch batch = db.createWriteBatch()) {
-      } finally {
-        batch.close();
-      WriteBatch batch = db.createWriteBatch();
-      try {
+      try (WriteBatch batch = db.createWriteBatch()) {
-      } finally {
-        batch.close();
-      WriteBatch batch = db.createWriteBatch();
-      try {
+      try (WriteBatch batch = db.createWriteBatch()) {
-        if(!isUpdate) {
+        if (!isUpdate) {
-      } finally {
-        batch.close();
-    DataOutputStream out = new DataOutputStream(os);
-    try {
+    try (DataOutputStream out = new DataOutputStream(os)) {
-    } finally {
-      out.close();
-      WriteBatch batch = db.createWriteBatch();
-      try {
+      try (WriteBatch batch = db.createWriteBatch()) {
-      } finally {
-        batch.close();
-    LeveldbIterator iter = null;
-    try {
-      iter = new LeveldbIterator(db);
+    try (LeveldbIterator iter = new LeveldbIterator(db)) {
-    } finally {
-      if (iter != null) {
-        iter.close();
-      }
-  private class CompactionTimerTask extends TimerTask {
-    @Override
-    public void run() {
-      long start = Time.monotonicNow();
-      LOG.info("Starting full compaction cycle");
-      try {
-        db.compactRange(null, null);
-      } catch (DBException e) {
-        LOG.error("Error compacting database", e);
-      }
-      long duration = Time.monotonicNow() - start;
-      LOG.info("Full compaction cycle completed in " + duration + " msec");
-    }
+  @VisibleForTesting
+  protected void setDbManager(DBManager dbManager) {
+    this.dbManager = dbManager;

MOV26 UPD40 INS31 MOV31 UPD43 MOV78 MOV83 MOV39 MOV42 MOV43 INS8 MOV78 MOV43 INS8 INS8 MOV78 MOV43 INS8 INS83 UPD42 INS8 UPD83 INS42 INS44 INS8 UPD42 UPD42 INS14 MOV60 MOV60 MOV21 MOV21 MOV60 INS21 MOV21 MOV21 INS41 INS54 MOV43 INS42 MOV21 INS60 MOV60 MOV60 UPD42 UPD43 MOV43 UPD42 MOV42 MOV21 INS43 INS7 INS32 INS8 MOV12 INS58 INS58 INS58 MOV5 INS59 INS58 INS58 INS58 UPD42 INS7 INS42 MOV42 INS32 UPD42 INS42 MOV32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV21 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 MOV43 INS59 MOV43 INS59 INS42 MOV43 INS59 MOV43 MOV59 MOV43 INS59 INS22 INS42 UPD42 MOV42 INS42 MOV42 MOV42 INS86 INS42 MOV14 INS42 MOV14 INS42 MOV14 INS42 MOV14 INS58 INS58 INS58 INS58 INS58 INS42 MOV14 INS52 INS42 INS59 INS32 UPD42 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL7 DEL21 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL32 DEL7 DEL21 DEL8 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL53 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL43 DEL45 DEL27 DEL9 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL54 DEL42 DEL41 DEL8 DEL42 DEL43 DEL8 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL33 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL33 DEL33 DEL39 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL60 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL33 DEL33 DEL32 DEL21 DEL8 DEL44 DEL8 DEL12 DEL54 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL83 DEL42 DEL42 DEL43 DEL55