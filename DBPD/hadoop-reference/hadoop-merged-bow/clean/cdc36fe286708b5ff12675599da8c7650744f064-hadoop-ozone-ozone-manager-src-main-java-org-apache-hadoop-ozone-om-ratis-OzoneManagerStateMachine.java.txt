HDDS-1649. On installSnapshot notification from OM leader, download checkpoint and reload OM state (#948)


+import org.apache.hadoop.ozone.om.exceptions.OMException;
+import org.apache.ratis.protocol.RaftPeerId;
+import org.apache.ratis.server.protocol.TermIndex;
+import org.apache.ratis.util.LifeCycle;
-  private final OzoneManagerDoubleBuffer ozoneManagerDoubleBuffer;
+  private OzoneManagerDoubleBuffer ozoneManagerDoubleBuffer;
+  private final ExecutorService installSnapshotExecutor;
+    this.installSnapshotExecutor = HadoopExecutors.newSingleThreadExecutor();
-   * TODO: Load the latest snapshot from the file system.
-  public void initialize(
-      RaftServer server, RaftGroupId id, RaftStorage raftStorage)
-      throws IOException {
-    super.initialize(server, id, raftStorage);
-    this.raftGroupId = id;
-    storage.init(raftStorage);
+  public void initialize(RaftServer server, RaftGroupId id,
+      RaftStorage raftStorage) throws IOException {
+    lifeCycle.startAndTransition(() -> {
+      super.initialize(server, id, raftStorage);
+      this.raftGroupId = id;
+      storage.init(raftStorage);
+    });
+  @Override
+  public void pause() {
+    lifeCycle.transition(LifeCycle.State.PAUSING);
+    lifeCycle.transition(LifeCycle.State.PAUSED);
+    ozoneManagerDoubleBuffer.stop();
+  }
+
+  /**
+   * Unpause the StateMachine, re-initialize the DoubleBuffer and update the
+   * lastAppliedIndex. This should be done after uploading new state to the
+   * StateMachine.
+   */
+  public void unpause(long newLastAppliedSnaphsotIndex) {
+    lifeCycle.startAndTransition(() -> {
+      this.ozoneManagerDoubleBuffer =
+          new OzoneManagerDoubleBuffer(ozoneManager.getMetadataManager(),
+              this::updateLastAppliedIndex);
+      this.updateLastAppliedIndex(newLastAppliedSnaphsotIndex);
+    });
+  }
+
-      return ozoneManager.saveRatisSnapshot();
+      return ozoneManager.saveRatisSnapshot(true);
+   * Leader OM has purged entries from its log. To catch up, OM must download
+   * the latest checkpoint from the leader OM and install it.
+   * @param roleInfoProto the leader node information
+   * @param firstTermIndexInLog TermIndex of the first append entry available
+   *                           in the Leader's log.
+   * @return the last term index included in the installed snapshot.
+   */
+  @Override
+  public CompletableFuture<TermIndex> notifyInstallSnapshotFromLeader(
+      RaftProtos.RoleInfoProto roleInfoProto, TermIndex firstTermIndexInLog) {
+
+    String leaderNodeId = RaftPeerId.valueOf(roleInfoProto.getSelf().getId())
+        .toString();
+
+    LOG.info("Received install snapshot notificaiton form OM leader: {} with " +
+            "term index: {}", leaderNodeId, firstTermIndexInLog);
+
+    if (!roleInfoProto.getRole().equals(RaftProtos.RaftPeerRole.LEADER)) {
+      // A non-leader Ratis server should not send this notification.
+      LOG.error("Received Install Snapshot notification from non-leader OM " +
+          "node: {}. Ignoring the notification.", leaderNodeId);
+      return completeExceptionally(new OMException("Received notification to " +
+          "install snaphost from non-leader OM node",
+          OMException.ResultCodes.RATIS_ERROR));
+    }
+
+    CompletableFuture<TermIndex> future = CompletableFuture.supplyAsync(
+        () -> ozoneManager.installSnapshot(leaderNodeId),
+        installSnapshotExecutor);
+    return future;
+  }
+
+  /**
-
+    HadoopExecutors.shutdown(installSnapshotExecutor, LOG, 5, TimeUnit.SECONDS);
-

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS8 INS78 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS74 INS42 INS44 INS44 INS8 INS42 INS42 INS21 INS21 INS42 INS21 INS21 INS21 INS65 INS39 INS42 INS21 INS65 INS65 INS65 INS65 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS60 INS21 INS25 INS60 INS41 INS21 INS7 INS32 INS32 INS32 INS32 INS66 INS66 INS66 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS40 INS42 INS43 INS59 INS32 INS38 INS8 INS74 INS59 INS42 INS32 INS22 INS32 INS42 INS42 INS86 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS21 INS41 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS40 INS52 INS42 INS42 INS42 MOV8 INS8 INS32 INS42 INS45 INS45 INS32 INS42 INS40 INS32 INS32 INS42 INS42 INS42 INS42 INS86 INS42 INS21 INS21 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS14 INS32 INS7 INS32 INS32 INS42 INS45 INS45 INS43 INS27 INS40 INS42 INS42 INS42 INS22 INS14 INS52 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS52 INS42 INS43 INS32 INS90 INS42 INS42 INS42 INS52 INS42 DEL83 DEL66