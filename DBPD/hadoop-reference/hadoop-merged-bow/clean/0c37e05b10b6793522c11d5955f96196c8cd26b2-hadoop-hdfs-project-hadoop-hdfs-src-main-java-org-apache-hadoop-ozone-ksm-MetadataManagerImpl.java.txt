HDFS-11779. Ozone: KSM: add listBuckets. Contributed by Weiwei Yang.

+import com.google.common.base.Strings;
+import org.apache.hadoop.ksm.helpers.KsmBucketInfo;
+import org.apache.hadoop.ozone.ksm.exceptions.KSMException;
+import org.apache.hadoop.ozone.ksm.exceptions.KSMException.ResultCodes;
+import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos.BucketInfo;
+import org.apache.hadoop.utils.LevelDBKeyFilters.KeyPrefixFilter;
+import org.apache.hadoop.utils.LevelDBKeyFilters.LevelDBKeyFilter;
+import java.util.ArrayList;
+  private String getBucketKeyPrefix(String volume, String bucket) {
+    StringBuffer sb = new StringBuffer();
+    sb.append(OzoneConsts.KSM_VOLUME_PREFIX)
+        .append(volume)
+        .append(OzoneConsts.KSM_BUCKET_PREFIX);
+    if (!Strings.isNullOrEmpty(bucket)) {
+      sb.append(bucket);
+    }
+    return sb.toString();
+  }
+
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public List<KsmBucketInfo> listBuckets(final String volumeName,
+      final String startBucket, final String bucketPrefix,
+      final int maxNumOfBuckets) throws IOException {
+    List<KsmBucketInfo> result = new ArrayList<>();
+    if (Strings.isNullOrEmpty(volumeName)) {
+      throw new KSMException("Volume name is required.",
+          ResultCodes.FAILED_VOLUME_NOT_FOUND);
+    }
+
+    byte[] volumeNameBytes = getVolumeKey(volumeName);
+    if (store.get(volumeNameBytes) == null) {
+      throw new KSMException("Volume " + volumeName + " not found.",
+          ResultCodes.FAILED_VOLUME_NOT_FOUND);
+    }
+
+    byte[] startKeyBytes = null;
+    if (!Strings.isNullOrEmpty(startBucket)) {
+      startKeyBytes = getBucketKey(volumeName, startBucket);
+    }
+    LevelDBKeyFilter filter =
+        new KeyPrefixFilter(getBucketKeyPrefix(volumeName, bucketPrefix));
+    List<Map.Entry<byte[], byte[]>> rangeResult =
+        store.getRangeKVs(startKeyBytes, maxNumOfBuckets, filter);
+    for (Map.Entry<byte[], byte[]> entry : rangeResult) {
+      KsmBucketInfo info = KsmBucketInfo.getFromProtobuf(
+          BucketInfo.parseFrom(entry.getValue()));
+      result.add(info);
+    }
+    return result;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS78 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS25 INS41 INS65 INS42 INS43 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS60 INS70 INS41 INS42 INS42 INS43 INS59 INS32 INS38 INS8 INS32 INS65 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS8 INS5 INS59 INS27 INS8 INS5 INS59 INS38 INS8 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS14 INS32 INS42 INS40 INS32 INS21 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS53 INS39 INS85 INS42 INS32 INS32 INS33 INS53 INS39 INS85 INS42 INS33 INS32 INS21 INS42 INS42 INS14 INS43 INS74 INS42 INS32 INS74 INS42 INS60 INS21 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS7 INS43 INS32 INS42 INS43 INS5 INS5 INS42 INS42 INS42 INS42 INS42 INS43 INS5 INS5 INS43 INS59 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS43 INS45 INS40 INS43 INS27 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS39 INS85 INS39 INS85 INS40 INS39 INS85 INS39 INS85 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42