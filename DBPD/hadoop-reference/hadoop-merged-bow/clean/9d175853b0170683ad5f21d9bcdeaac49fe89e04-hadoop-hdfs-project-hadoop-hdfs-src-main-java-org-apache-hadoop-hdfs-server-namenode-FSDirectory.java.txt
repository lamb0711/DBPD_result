HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.

+import org.apache.hadoop.fs.InvalidPathException;
+import org.apache.hadoop.hdfs.protocol.UnresolvedPathException;
+  // used to specify path resolution type. *_LINK will return symlinks instead
+  // of throwing an unresolved exception
+  public enum DirOp {
+    READ,
+    READ_LINK,
+    WRITE,  // disallows snapshot paths.
+    WRITE_LINK,
+    CREATE, // like write, but also blocks invalid path names.
+    CREATE_LINK;
+  };
+
-   * This is a wrapper for resolvePath(). If the path passed
-   * is prefixed with /.reserved/raw, then it checks to ensure that the caller
-   * has super user privileges.
+   * Resolves a given path into an INodesInPath.  All ancestor inodes that
+   * exist are validated as traversable directories.  Symlinks in the ancestry
+   * will generate an UnresolvedLinkException.  The returned IIP will be an
+   * accessible path that also passed additional sanity checks based on how
+   * the path will be used as specified by the DirOp.
+   *   READ:   Expands reserved paths and performs permission checks
+   *           during traversal.  Raw paths are only accessible by a superuser.
+   *   WRITE:  In addition to READ checks, ensures the path is not a
+   *           snapshot path.
+   *   CREATE: In addition to WRITE checks, ensures path does not contain
+   *           illegal character sequences.
-   * @param pc The permission checker used when resolving path.
-   * @param path The path to resolve.
+   * @param pc  A permission checker for traversal checks.  Pass null for
+   *            no permission checks.
+   * @param src The path to resolve.
+   * @param dirOp The {@link DirOp} that controls additional checks.
+   * @param resolveLink If false, only ancestor symlinks will be checked.  If
+   *         true, the last inode will also be checked.
+   * @throws ParentNotDirectoryException
+   * @throws UnresolvedLinkException
-  public INodesInPath resolvePath(FSPermissionChecker pc, String src)
-      throws UnresolvedLinkException, FileNotFoundException,
-      AccessControlException {
-    return resolvePath(pc, src, true);
-  }
-
-  @VisibleForTesting
-      boolean resolveLink) throws UnresolvedLinkException,
-  FileNotFoundException, AccessControlException {
+      DirOp dirOp) throws UnresolvedLinkException, FileNotFoundException,
+      AccessControlException, ParentNotDirectoryException {
+    boolean isCreate = (dirOp == DirOp.CREATE || dirOp == DirOp.CREATE_LINK);
+    // prevent creation of new invalid paths
+    if (isCreate && !DFSUtil.isValidName(src)) {
+      throw new InvalidPathException("Invalid file name: " + src);
+    }
+
-    return INodesInPath.resolve(rootDir, components, isRaw, resolveLink);
-  }
-
-  INodesInPath resolvePathForWrite(FSPermissionChecker pc, String src)
-      throws UnresolvedLinkException, FileNotFoundException,
-      AccessControlException {
-    return resolvePathForWrite(pc, src, true);
-  }
-
-  INodesInPath resolvePathForWrite(FSPermissionChecker pc, String src,
-      boolean resolveLink) throws UnresolvedLinkException,
-  FileNotFoundException, AccessControlException {
-    INodesInPath iip = resolvePath(pc, src, resolveLink);
-    if (iip.isSnapshot()) {
-      throw new SnapshotAccessControlException(
-          "Modification on a read-only snapshot is disallowed");
+    INodesInPath iip = INodesInPath.resolve(rootDir, components, isRaw);
+    // verify all ancestors are dirs and traversable.  note that only
+    // methods that create new namespace items have the signature to throw
+    // PNDE
+    try {
+      checkTraverse(pc, iip, dirOp);
+    } catch (ParentNotDirectoryException pnde) {
+      if (!isCreate) {
+        throw new AccessControlException(pnde.getMessage());
+      }
+      throw pnde;
-      AccessControlException {
+      AccessControlException, ParentNotDirectoryException {
-      iip = resolvePath(pc, src);
+      iip = resolvePath(pc, src, DirOp.WRITE);
-  INodesInPath getExistingPathINodes(byte[][] components)
-      throws UnresolvedLinkException {
-    return INodesInPath.resolve(rootDir, components, false);
+  /**
+   * Resolves the given path into inodes.  Reserved paths are not handled and
+   * permissions are not verified.  Client supplied paths should be
+   * resolved via {@link #resolvePath(FSPermissionChecker, String, DirOp)}.
+   * This method should only be used by internal methods.
+   * @return the {@link INodesInPath} containing all inodes in the path.
+   * @throws UnresolvedLinkException
+   * @throws ParentNotDirectoryException
+   * @throws AccessControlException
+   */
+  public INodesInPath getINodesInPath(String src, DirOp dirOp)
+      throws UnresolvedLinkException, AccessControlException,
+      ParentNotDirectoryException {
+    return getINodesInPath(INode.getPathComponents(src), dirOp);
+  }
+
+  public INodesInPath getINodesInPath(byte[][] components, DirOp dirOp)
+      throws UnresolvedLinkException, AccessControlException,
+      ParentNotDirectoryException {
+    INodesInPath iip = INodesInPath.resolve(rootDir, components);
+    checkTraverse(null, iip, dirOp);
+    return iip;
+   * See {@link #getINode(String, DirOp)}
-  public INodesInPath getINodesInPath4Write(String src)
-      throws UnresolvedLinkException, SnapshotAccessControlException {
-    return getINodesInPath4Write(src, true);
+  @VisibleForTesting // should be removed after a lot of tests are updated
+  public INode getINode(String src) throws UnresolvedLinkException,
+      AccessControlException, ParentNotDirectoryException {
+    return getINode(src, DirOp.READ);
-   * @throws SnapshotAccessControlException if path is in RO snapshot
+   * See {@link #getINode(String, DirOp)}
+  @VisibleForTesting // should be removed after a lot of tests are updated
-      SnapshotAccessControlException {
-    return getINodesInPath4Write(src, true).getLastINode();
-  }
-
-  /** @return the {@link INodesInPath} containing all inodes in the path. */
-  public INodesInPath getINodesInPath(String path, boolean resolveLink)
-      throws UnresolvedLinkException {
-    final byte[][] components = INode.getPathComponents(path);
-    return INodesInPath.resolve(rootDir, components, resolveLink);
-  }
-
-  /** @return the last inode in the path. */
-  INode getINode(String path, boolean resolveLink)
-      throws UnresolvedLinkException {
-    return getINodesInPath(path, resolveLink).getLastINode();
+      AccessControlException, FileNotFoundException,
+      ParentNotDirectoryException {
+    return getINode(src, DirOp.WRITE);
-  public INode getINode(String src) throws UnresolvedLinkException {
-    return getINode(src, true);
-  }
-
-  /**
-   * @return the INodesInPath of the components in src
-   * @throws UnresolvedLinkException if symlink can't be resolved
-   * @throws SnapshotAccessControlException if path is in RO snapshot
-   */
-  INodesInPath getINodesInPath4Write(String src, boolean resolveLink)
-          throws UnresolvedLinkException, SnapshotAccessControlException {
-    final byte[][] components = INode.getPathComponents(src);
-    INodesInPath inodesInPath = INodesInPath.resolve(rootDir, components,
-        resolveLink);
-    if (inodesInPath.isSnapshot()) {
-      throw new SnapshotAccessControlException(
-              "Modification on a read-only snapshot is disallowed");
-    }
-    return inodesInPath;
+  public INode getINode(String src, DirOp dirOp) throws UnresolvedLinkException,
+      AccessControlException, ParentNotDirectoryException {
+    return getINodesInPath(src, dirOp).getLastINode();
-  void checkTraverse(FSPermissionChecker pc, INodesInPath iip)
-      throws AccessControlException {
-    checkPermission(pc, iip, false, null, null, null, null);
+  void checkTraverse(FSPermissionChecker pc, INodesInPath iip,
+      boolean resolveLink) throws AccessControlException,
+        UnresolvedPathException, ParentNotDirectoryException {
+    FSPermissionChecker.checkTraverse(
+        isPermissionEnabled ? pc : null, iip, resolveLink);
+  }
+
+  void checkTraverse(FSPermissionChecker pc, INodesInPath iip,
+      DirOp dirOp) throws AccessControlException, UnresolvedPathException,
+          ParentNotDirectoryException {
+    final boolean resolveLink;
+    switch (dirOp) {
+      case READ_LINK:
+      case WRITE_LINK:
+      case CREATE_LINK:
+        resolveLink = false;
+        break;
+      default:
+        resolveLink = true;
+        break;
+    }
+    checkTraverse(pc, iip, resolveLink);
+    boolean allowSnapshot = (dirOp == DirOp.READ || dirOp == DirOp.READ_LINK);
+    if (!allowSnapshot && iip.isSnapshot()) {
+      throw new SnapshotAccessControlException(
+          "Modification on a read-only snapshot is disallowed");
+    }

INS26 INS26 MOV31 INS40 INS40 INS71 INS31 INS31 INS31 INS83 INS42 INS72 INS72 INS72 INS72 INS72 INS72 INS29 INS43 INS43 INS29 INS83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 UPD43 MOV43 MOV8 INS83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 UPD43 MOV43 INS8 MOV78 MOV43 UPD42 MOV43 UPD43 UPD43 INS78 MOV43 UPD43 MOV43 UPD43 MOV29 MOV43 INS42 MOV44 INS44 MOV43 INS43 INS43 INS39 UPD42 MOV44 MOV44 MOV44 MOV43 INS43 INS43 INS39 UPD42 MOV42 MOV44 INS44 INS44 MOV43 INS43 UPD43 MOV43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS65 MOV65 MOV65 MOV65 INS65 INS65 INS43 INS42 INS42 INS60 INS25 INS60 INS54 INS41 INS42 INS65 MOV65 INS65 INS65 INS65 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 MOV60 INS21 MOV41 UPD42 UPD42 INS65 INS42 UPD42 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS42 UPD42 MOV60 INS50 INS21 INS60 MOV25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS39 INS59 INS27 INS8 MOV43 INS59 INS8 INS12 INS42 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS65 INS66 INS66 UPD66 INS42 INS42 INS42 UPD42 UPD42 MOV43 INS32 MOV65 INS66 INS66 MOV66 INS65 MOV66 INS66 INS65 INS32 UPD42 MOV42 INS32 INS42 INS42 INS39 INS42 INS49 INS49 INS49 INS21 INS10 INS49 INS21 INS10 INS32 INS39 INS59 INS27 INS42 INS42 INS36 INS42 INS38 INS53 INS42 INS32 INS21 INS44 INS8 INS68 UPD42 MOV32 UPD42 UPD42 MOV42 INS33 UPD42 MOV42 UPD42 MOV42 INS68 UPD42 INS40 INS42 INS68 UPD42 MOV42 MOV42 INS40 INS32 UPD42 UPD42 MOV42 INS42 INS16 INS42 MOV42 UPD42 INS42 INS42 INS42 INS7 INS7 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS36 INS38 MOV32 INS27 INS32 INS14 INS42 MOV42 MOV42 MOV42 MOV42 INS32 INS43 INS42 INS25 INS53 INS42 INS69 INS69 INS69 UPD42 UPD42 UPD42 UPD42 INS42 INS69 INS69 INS42 INS69 INS69 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS33 INS42 INS9 INS42 INS9 INS27 INS42 INS27 INS27 INS42 INS42 INS42 INS43 INS27 UPD42 MOV42 INS42 INS42 INS42 INS42 INS38 INS8 INS42 INS43 MOV43 INS43 MOV43 INS43 INS43 INS43 INS27 INS27 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS42 INS53 INS40 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS14 INS43 INS32 INS42 INS42 INS42 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL42 DEL9 DEL42 DEL43 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL42 DEL66 DEL42 DEL43 DEL9 DEL65 DEL42 DEL66 DEL65 DEL9 DEL32 DEL42 DEL32 DEL29 DEL43 DEL42 DEL42 DEL44 DEL39 DEL42 DEL44 DEL83 DEL39 DEL85 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL83 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL32 DEL42 DEL32 DEL41 DEL39 DEL85 DEL85 DEL5 DEL39 DEL42 DEL42 DEL42 DEL42 DEL9 DEL33 DEL33 DEL33 DEL33 DEL32 DEL21 DEL8 DEL31