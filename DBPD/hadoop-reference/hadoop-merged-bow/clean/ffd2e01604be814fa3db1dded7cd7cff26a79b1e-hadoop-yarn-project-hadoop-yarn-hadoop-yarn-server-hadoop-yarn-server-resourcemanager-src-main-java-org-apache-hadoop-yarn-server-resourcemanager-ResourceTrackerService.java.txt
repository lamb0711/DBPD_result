YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68

-import java.nio.ByteBuffer;
-
-import javax.crypto.SecretKey;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.yarn.server.api.records.MasterKey;
+import org.apache.hadoop.yarn.server.resourcemanager.security.RMContainerTokenSecretManager;
-import org.apache.hadoop.yarn.server.security.ContainerTokenSecretManager;
-  private final ContainerTokenSecretManager containerTokenSecretManager;
+  private final RMContainerTokenSecretManager containerTokenSecretManager;
-      ContainerTokenSecretManager containerTokenSecretManager) {
+      RMContainerTokenSecretManager containerTokenSecretManager) {
-    SecretKey secretKey = this.containerTokenSecretManager
-        .createAndGetSecretKey(nodeId.toString());
-    regResponse.setSecretKey(ByteBuffer.wrap(secretKey.getEncoded()));
+    MasterKey nextMasterKeyForNode = null;
+    if (isSecurityEnabled()) {
+      nextMasterKeyForNode = this.containerTokenSecretManager.getCurrentKey();
+      regResponse.setMasterKey(nextMasterKeyForNode);
+    }
+
-        resolve(host), capability);
+        resolve(host), capability, nextMasterKeyForNode);
-
+    
+    MasterKey nextMasterKeyForNode = null;
+
+    // Check if node's masterKey needs to be updated and if the currentKey has
+    // roller over, send it across
+    if (isSecurityEnabled()) {
+      boolean shouldSendMasterKey = false;
+      MasterKey nodeKnownMasterKey = rmNode.getCurrentMasterKey();
+      nextMasterKeyForNode = this.containerTokenSecretManager.getNextKey();
+      if (nextMasterKeyForNode != null) {
+        // nextMasterKeyForNode can be null if there is no outstanding key that
+        // is in the activation period.
+        if (nodeKnownMasterKey.getKeyId() != nextMasterKeyForNode.getKeyId()) {
+          shouldSendMasterKey = true;
+        }
+      }
+      if (shouldSendMasterKey) {
+        latestResponse.setMasterKey(nextMasterKeyForNode);
+      }
+    }
+
-            remoteNodeStatus.getKeepAliveApplications(), latestResponse));
+            remoteNodeStatus.getKeepAliveApplications(), latestResponse,
+            nextMasterKeyForNode));
-  
+
+  protected boolean isSecurityEnabled() {
+    return UserGroupInformation.isSecurityEnabled();
+  }

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 INS31 UPD43 MOV60 INS83 INS39 INS42 INS8 UPD42 UPD43 INS25 INS60 INS25 INS41 UPD42 UPD43 INS32 INS8 INS43 INS59 INS32 INS8 INS32 UPD42 UPD42 INS33 UPD42 MOV42 INS21 INS21 INS42 INS42 INS33 INS42 INS60 INS60 INS21 INS25 INS25 INS42 INS42 INS7 INS32 INS42 INS39 INS59 INS43 INS59 INS7 INS27 INS8 INS42 INS8 INS42 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS25 INS21 UPD42 INS42 INS42 INS22 INS42 INS27 INS8 INS32 INS52 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS9 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32