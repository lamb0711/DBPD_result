HDFS-2430. The number of failed or low-resource volumes the NN can tolerate should be configurable. Contributed by Aaron T. Myers


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1211650 13f79535-47bb-0310-9956-ffa450edef68

-   * 
-   * This should be used outside JournalSet only for testing.
-  @VisibleForTesting
-  static class JournalAndStream {
+  static class JournalAndStream implements CheckableNameNodeResource {
+    private boolean required = false;
-    public JournalAndStream(JournalManager manager) {
+    public JournalAndStream(JournalManager manager, boolean required) {
+      this.required = required;
+    
+    @Override
+    public boolean isResourceAvailable() {
+      return !isDisabled();
+    }
+    
+    @Override
+    public boolean isRequired() {
+      return required;
+    }
+  final int minimumRedundantJournals;
+  
+  JournalSet(int minimumRedundantResources) {
+    this.minimumRedundantJournals = minimumRedundantResources;
+  }
-   * Returns true if there are no journals or all are disabled.
-   * @return True if no journals or all are disabled.
+   * Returns true if there are no journals, all redundant journals are disabled,
+   * or any required journals are disabled.
+   * 
+   * @return True if there no journals, all redundant journals are disabled,
+   * or any required journals are disabled.
-    for (JournalAndStream jas : journals) {
-      if (!jas.isDisabled()) {
-        return false;
-      }
-    }
-    return true;
+    return !NameNodeResourcePolicy.areResourcesAvailable(journals,
+        minimumRedundantJournals);
-    if (badJAS.size() >= journals.size()) {
-      LOG.error("Error: "+status+" failed for all journals");
-      throw new IOException(status+" failed on all the journals");
+    if (!NameNodeResourcePolicy.areResourcesAvailable(journals,
+        minimumRedundantJournals)) {
+      String message = status + " failed for too many journals";
+      LOG.error("Error: " + message);
+      throw new IOException(message);
-  void add(JournalManager j) {
-    journals.add(new JournalAndStream(j));
+  void add(JournalManager j, boolean required) {
+    JournalAndStream jas = new JournalAndStream(j, required);
+    journals.add(jas);

INS23 INS31 INS83 INS42 INS43 INS23 INS31 INS31 INS83 INS39 INS59 INS42 INS44 INS8 INS8 INS44 INS42 INS83 INS39 INS59 INS44 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS39 INS42 INS21 INS41 INS39 INS42 INS60 INS42 INS9 INS39 INS42 INS21 UPD42 MOV42 INS41 INS42 INS41 INS7 UPD66 INS66 UPD66 INS66 INS38 INS38 MOV43 INS59 INS7 INS38 INS42 INS22 INS42 MOV32 INS32 INS60 INS42 INS14 INS42 INS22 INS42 INS32 INS52 INS42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS43 INS59 MOV43 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 UPD42 DEL66 DEL78 DEL83 DEL42 DEL42 DEL44 DEL42 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL70 DEL9 DEL41 DEL8 DEL32 DEL32 DEL27 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14