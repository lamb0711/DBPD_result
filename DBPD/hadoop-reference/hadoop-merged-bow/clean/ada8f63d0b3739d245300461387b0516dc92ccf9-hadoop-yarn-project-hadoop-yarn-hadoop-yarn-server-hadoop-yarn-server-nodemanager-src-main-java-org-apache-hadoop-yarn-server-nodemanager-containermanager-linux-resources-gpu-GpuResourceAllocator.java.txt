YARN-8423. GPU does not get released even though the application gets killed. (Sunil G via wangda)

Change-Id: I570db7d60f8c6c21762dd618a9207d1107c486a0

+import org.apache.hadoop.yarn.api.records.ResourceInformation;
-import java.util.Collection;
-import java.util.HashSet;
+  private static final int WAIT_MS_PER_LOOP = 1000;
-  public synchronized GpuAllocation assignGpus(Container container)
+  public GpuAllocation assignGpus(Container container)
+      throws ResourceHandlerException {
+    GpuAllocation allocation = internalAssignGpus(container);
+
+    // Wait for a maximum of 120 seconds if no available GPU are there which
+    // are yet to be released.
+    final int timeoutMsecs = 120 * WAIT_MS_PER_LOOP;
+    int timeWaiting = 0;
+    while (allocation == null) {
+      if (timeWaiting >= timeoutMsecs) {
+        break;
+      }
+
+      // Sleep for 1 sec to ensure there are some free GPU devices which are
+      // getting released.
+      try {
+        LOG.info("Container : " + container.getContainerId()
+            + " is waiting for free GPU devices.");
+        Thread.sleep(WAIT_MS_PER_LOOP);
+        timeWaiting += WAIT_MS_PER_LOOP;
+        allocation = internalAssignGpus(container);
+      } catch (InterruptedException e) {
+        // On any interrupt, break the loop and continue execution.
+        break;
+      }
+    }
+
+    if(allocation == null) {
+      String message = "Could not get valid GPU device for container '" +
+          container.getContainerId()
+          + "' as some other containers might not releasing GPUs.";
+      LOG.warn(message);
+      throw new ResourceHandlerException(message);
+    }
+    return allocation;
+  }
+
+  private synchronized GpuAllocation internalAssignGpus(Container container)
+        // If there are some devices which are getting released, wait for few
+        // seconds to get it.
+        if (numRequestedGpuDevices <= getReleasingGpus() + getAvailableGpus()) {
+          return null;
+        }
+      }
+
+      if (numRequestedGpuDevices > getAvailableGpus()) {
+  private synchronized long getReleasingGpus() {
+    long releasingGpus = 0;
+    Iterator<Map.Entry<GpuDevice, ContainerId>> iter = usedDevices.entrySet()
+        .iterator();
+    while (iter.hasNext()) {
+      ContainerId containerId = iter.next().getValue();
+      Container container;
+      if ((container = nmContext.getContainers().get(containerId)) != null) {
+        if (container.isContainerInFinalStates()) {
+          releasingGpus = releasingGpus + container.getResource()
+              .getResourceInformation(ResourceInformation.GPU_URI).getValue();
+        }
+      }
+    }
+    return releasingGpus;
+  }
+

MOV26 UPD40 INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 MOV29 INS83 INS43 INS42 INS44 INS43 INS8 UPD83 UPD42 INS83 INS83 INS39 INS42 INS8 INS42 INS34 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS61 INS25 INS41 INS60 INS60 INS61 INS41 INS42 INS43 INS59 INS83 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS42 INS39 INS59 INS74 INS59 INS32 INS8 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS34 INS42 INS33 INS25 INS54 INS42 INS33 INS60 INS21 INS53 INS25 INS42 INS34 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS34 INS42 INS27 INS8 INS8 INS12 INS43 INS59 INS32 INS14 INS27 INS8 INS42 INS43 INS43 INS43 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS10 INS21 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS25 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS36 INS33 INS25 INS32 INS32 INS7 INS7 INS43 INS42 INS10 INS45 INS32 INS45 INS42 INS42 INS27 INS8 INS32 INS42 INS7 INS32 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS45 INS32 INS45 INS42 INS42 INS32 INS32 INS33 INS32 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS32 INS42 INS32 INS42 INS40 INS42 INS42 DEL40 DEL26