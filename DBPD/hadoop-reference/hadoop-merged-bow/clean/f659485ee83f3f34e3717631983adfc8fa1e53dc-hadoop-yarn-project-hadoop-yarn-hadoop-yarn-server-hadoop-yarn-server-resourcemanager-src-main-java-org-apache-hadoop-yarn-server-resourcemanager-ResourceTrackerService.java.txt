YARN-8925. Updating distributed node attributes only when necessary. Contributed by Tao Yang.

+import org.apache.hadoop.yarn.nodelabels.NodeLabelUtil;
+    // Update node's attributes to RM's NodeAttributesManager.
+    if (request.getNodeAttributes() != null) {
+      try {
+        // update node attributes if necessary then update heartbeat response
+        updateNodeAttributesIfNecessary(nodeId, request.getNodeAttributes());
+        response.setAreNodeAttributesAcceptedByRM(true);
+      } catch (IOException ex) {
+        //ensure the error message is captured and sent across in response
+        String errorMsg = response.getDiagnosticsMessage() == null ?
+            ex.getMessage() :
+            response.getDiagnosticsMessage() + "\n" + ex.getMessage();
+        response.setDiagnosticsMessage(errorMsg);
+        response.setAreNodeAttributesAcceptedByRM(false);
+      }
+    }
+
+    if (response.getAreNodeAttributesAcceptedByRM()) {
+      message.append(", node attributes { ")
+          .append(request.getNodeAttributes() + " } ");
+    }
-    Set<NodeAttribute> nodeAttributes = request.getNodeAttributes();
-    if (nodeAttributes != null && !nodeAttributes.isEmpty()) {
-      nodeAttributes.forEach(nodeAttribute ->
-          LOG.debug(nodeId.toString() + " ATTRIBUTE : "
-              + nodeAttribute.toString()));
-
-      // Validate attributes
-      if (!nodeAttributes.stream().allMatch(
-          nodeAttribute -> NodeAttribute.PREFIX_DISTRIBUTED
-              .equals(nodeAttribute.getAttributeKey().getAttributePrefix()))) {
-        // All attributes must be in same prefix: nm.yarn.io.
-        // Since we have the checks in NM to make sure attributes reported
-        // in HB are with correct prefix, so it should not reach here.
-        LOG.warn("Reject invalid node attributes from host: "
-            + nodeId.toString() + ", attributes in HB must have prefix "
-            + NodeAttribute.PREFIX_DISTRIBUTED);
-      } else {
-        // Replace all distributed node attributes associated with this host
-        // with the new reported attributes in node attribute manager.
-        this.rmContext.getNodeAttributesManager()
-            .replaceNodeAttributes(NodeAttribute.PREFIX_DISTRIBUTED,
-                ImmutableMap.of(nodeId.getHost(), nodeAttributes));
+    if (request.getNodeAttributes() != null) {
+      try {
+        // update node attributes if necessary then update heartbeat response
+        updateNodeAttributesIfNecessary(nodeId, request.getNodeAttributes());
+        nodeHeartBeatResponse.setAreNodeAttributesAcceptedByRM(true);
+      } catch (IOException ex) {
+        //ensure the error message is captured and sent across in response
+        String errorMsg =
+            nodeHeartBeatResponse.getDiagnosticsMessage() == null ?
+                ex.getMessage() :
+                nodeHeartBeatResponse.getDiagnosticsMessage() + "\n" + ex
+                    .getMessage();
+        nodeHeartBeatResponse.setDiagnosticsMessage(errorMsg);
+        nodeHeartBeatResponse.setAreNodeAttributesAcceptedByRM(false);
+  /**
+   * Update node attributes if necessary.
+   * @param nodeId - node id
+   * @param nodeAttributes - node attributes
+   * @return true if updated
+   * @throws IOException if prefix type is not distributed
+   */
+  private void updateNodeAttributesIfNecessary(NodeId nodeId,
+      Set<NodeAttribute> nodeAttributes) throws IOException {
+    if (LOG.isDebugEnabled()) {
+      nodeAttributes.forEach(nodeAttribute -> LOG.debug(
+          nodeId.toString() + " ATTRIBUTE : " + nodeAttribute.toString()));
+    }
+
+    // Validate attributes
+    if (!nodeAttributes.stream().allMatch(
+        nodeAttribute -> NodeAttribute.PREFIX_DISTRIBUTED
+            .equals(nodeAttribute.getAttributeKey().getAttributePrefix()))) {
+      // All attributes must be in same prefix: nm.yarn.io.
+      // Since we have the checks in NM to make sure attributes reported
+      // in HB are with correct prefix, so it should not reach here.
+      throw new IOException("Reject invalid node attributes from host: "
+          + nodeId.toString() + ", attributes in HB must have prefix "
+          + NodeAttribute.PREFIX_DISTRIBUTED);
+    }
+    // Replace all distributed node attributes associated with this host
+    // with the new reported attributes in node attribute manager.
+    Set<NodeAttribute> currentNodeAttributes =
+        this.rmContext.getNodeAttributesManager()
+            .getAttributesForNode(nodeId.getHost()).keySet();
+    if (!currentNodeAttributes.isEmpty()) {
+      currentNodeAttributes = NodeLabelUtil
+          .filterAttributesByPrefix(currentNodeAttributes,
+              NodeAttribute.PREFIX_DISTRIBUTED);
+    }
+    if (!NodeLabelUtil
+        .isNodeAttributesEquals(nodeAttributes, currentNodeAttributes)) {
+      this.rmContext.getNodeAttributesManager()
+          .replaceNodeAttributes(NodeAttribute.PREFIX_DISTRIBUTED,
+              ImmutableMap.of(nodeId.getHost(), nodeAttributes));
+    } else if (LOG.isDebugEnabled()) {
+      LOG.debug("Skip updating node attributes since there is no change for "
+          + nodeId + " : " + nodeAttributes);
+    }
+  }
+

INS26 INS40 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 MOV8 INS25 INS25 INS65 INS65 INS65 INS65 INS65 INS43 INS42 MOV74 INS42 INS42 INS25 INS60 INS25 INS25 INS27 INS8 INS32 INS8 INS27 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS8 INS74 INS59 INS38 INS8 INS38 MOV8 INS25 INS32 INS33 INS54 INS42 INS42 INS21 INS32 MOV33 INS54 INS42 INS42 MOV21 INS53 INS43 INS43 INS42 INS32 INS32 INS21 INS32 INS32 INS8 INS42 INS42 INS8 INS12 INS32 INS42 INS42 INS8 INS12 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS44 INS8 INS32 INS42 INS27 INS21 INS21 INS44 INS8 INS43 MOV27 INS32 INS42 INS32 INS42 INS32 INS32 INS32 INS32 INS43 INS42 INS60 INS21 INS21 INS42 INS42 INS45 INS32 INS45 INS32 INS32 INS43 INS42 INS60 INS21 INS21 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS43 INS59 INS32 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS9 INS42 INS43 INS59 INS32 INS32 INS52 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS9 INS27 INS32 INS27 INS27 INS32 INS27 INS32 INS33 INS42 INS42 INS32 INS45 INS32 INS32 INS33 INS42 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL27 DEL32 DEL38 DEL27 DEL42 DEL42 DEL32 DEL21