HDFS-7782. Erasure coding: pread from files in striped layout. Contributed by Zhe Zhang and Jing Zhao

+  private static volatile ThreadPoolExecutor STRIPED_READ_THREAD_POOL;
+    numThreads = conf.getInt(
+        DFSConfigKeys.DFS_CLIENT_STRIPED_READ_THREADPOOL_MAX_SIZE,
+        DFSConfigKeys.DFS_CLIENT_STRIPED_READ_THREADPOOL_MAX_DEFAULT_SIZE);
+    if (numThreads <= 0) {
+      LOG.warn("The value of "
+          + DFSConfigKeys.DFS_CLIENT_STRIPED_READ_THREADPOOL_MAX_SIZE
+          + " must be greater than 0. The current setting is " + numThreads
+          + ". Reset it to the default value "
+          + DFSConfigKeys.DFS_CLIENT_STRIPED_READ_THREADPOOL_MAX_DEFAULT_SIZE);
+      numThreads =
+          DFSConfigKeys.DFS_CLIENT_STRIPED_READ_THREADPOOL_MAX_DEFAULT_SIZE;
+    }
+    this.initThreadsNumForStripedReads(numThreads);
+  
+  /**
+   * Create thread pool for parallel reading in striped layout,
+   * STRIPED_READ_THREAD_POOL, if it does not already exist.
+   * @param num Number of threads for striped reads thread pool.
+   */
+  private void initThreadsNumForStripedReads(int num) {
+    assert num > 0;
+    if (STRIPED_READ_THREAD_POOL != null) {
+      return;
+    }
+    synchronized (DFSClient.class) {
+      if (STRIPED_READ_THREAD_POOL == null) {
+        STRIPED_READ_THREAD_POOL = new ThreadPoolExecutor(1, num, 60,
+            TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
+            new Daemon.DaemonFactory() {
+          private final AtomicInteger threadIndex = new AtomicInteger(0);
+
+          @Override
+          public Thread newThread(Runnable r) {
+            Thread t = super.newThread(r);
+            t.setName("stripedRead-" + threadIndex.getAndIncrement());
+            return t;
+          }
+        }, new ThreadPoolExecutor.CallerRunsPolicy() {
+          @Override
+          public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {
+            LOG.info("Execution for striped reading rejected, "
+                + "Executing in current thread");
+            // will run in the current thread
+            super.rejectedExecution(runnable, e);
+          }
+        });
+        STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);
+      }
+    }
+  }
+  ThreadPoolExecutor getStripedReadsThreadPool() {
+    return STRIPED_READ_THREAD_POOL;
+  }
+

INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS8 INS42 INS42 INS21 INS25 INS21 INS65 INS65 INS39 INS42 INS6 INS25 INS51 INS42 INS41 INS7 INS27 INS8 INS32 INS66 INS66 INS42 INS66 INS27 INS27 INS8 INS57 INS8 INS42 INS42 INS32 INS42 INS34 INS21 INS21 INS52 INS42 INS42 INS42 INS34 INS42 INS33 INS41 INS43 INS25 INS42 INS42 INS40 INS40 INS32 INS7 INS42 INS27 INS8 INS42 INS42 INS27 INS42 INS40 INS42 INS33 INS21 INS21 INS45 INS40 INS45 INS42 INS45 INS40 INS7 INS32 INS42 INS14 INS42 INS42 INS9 INS43 INS34 INS42 INS34 INS40 INS14 INS14 INS14 INS42 INS74 INS43 INS1 INS43 INS1 INS43 INS43 INS40 INS23 INS31 INS40 INS31 INS42 INS42 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS43 INS42 INS60 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS43 INS34 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS48 INS42 INS42 INS42 INS48 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS45 INS42 INS42