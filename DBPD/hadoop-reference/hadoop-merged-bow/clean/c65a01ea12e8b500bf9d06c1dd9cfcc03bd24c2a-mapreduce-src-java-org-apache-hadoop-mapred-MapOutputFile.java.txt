Merge trunk into HDFS-1623 branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1158072 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.fs.LocalDirAllocator;
+import org.apache.hadoop.conf.Configurable;
-import org.apache.hadoop.mapreduce.MRConfig;
-public class MapOutputFile {
+public abstract class MapOutputFile implements Configurable {
-  private JobConf conf;
+  private Configuration conf;
+  static final String MAP_OUTPUT_FILENAME_STRING = "file.out";
+  static final String MAP_OUTPUT_INDEX_SUFFIX_STRING = ".index";
-  private LocalDirAllocator lDirAlloc = 
-    new LocalDirAllocator(MRConfig.LOCAL_DIR);
-  
-   * 
+   *
-  public Path getOutputFile()
-      throws IOException {
-    return lDirAlloc.getLocalPathToRead(TaskTracker.OUTPUT + Path.SEPARATOR
-        + "file.out", conf);
-  }
+  public abstract Path getOutputFile() throws IOException;
-   * 
+   *
-  public Path getOutputFileForWrite(long size)
-      throws IOException {
-    return lDirAlloc.getLocalPathForWrite(TaskTracker.OUTPUT + Path.SEPARATOR
-        + "file.out", size, conf);
-  }
+  public abstract Path getOutputFileForWrite(long size) throws IOException;
+
+  /**
+   * Create a local map output file name on the same volume.
+   */
+  public abstract Path getOutputFileForWriteInVolume(Path existing);
-   * 
+   *
-  public Path getOutputIndexFile()
-      throws IOException {
-    return lDirAlloc.getLocalPathToRead(TaskTracker.OUTPUT + Path.SEPARATOR
-        + "file.out.index", conf);
-  }
+  public abstract Path getOutputIndexFile() throws IOException;
-   * 
+   *
-  public Path getOutputIndexFileForWrite(long size)
-      throws IOException {
-    return lDirAlloc.getLocalPathForWrite(TaskTracker.OUTPUT + Path.SEPARATOR
-        + "file.out.index", size, conf);
-  }
+  public abstract Path getOutputIndexFileForWrite(long size) throws IOException;
+
+  /**
+   * Create a local map output index file name on the same volume.
+   */
+  public abstract Path getOutputIndexFileForWriteInVolume(Path existing);
-   * 
+   *
-  public Path getSpillFile(int spillNumber)
-      throws IOException {
-    return lDirAlloc.getLocalPathToRead(TaskTracker.OUTPUT + "/spill"
-        + spillNumber + ".out", conf);
-  }
+  public abstract Path getSpillFile(int spillNumber) throws IOException;
-   * 
+   *
-  public Path getSpillFileForWrite(int spillNumber, long size)
-      throws IOException {
-    return lDirAlloc.getLocalPathForWrite(TaskTracker.OUTPUT + "/spill"
-        + spillNumber + ".out", size, conf);
-  }
+  public abstract Path getSpillFileForWrite(int spillNumber, long size)
+      throws IOException;
-   * 
+   *
-  public Path getSpillIndexFile(int spillNumber)
-      throws IOException {
-    return lDirAlloc.getLocalPathToRead(TaskTracker.OUTPUT + "/spill"
-        + spillNumber + ".out.index", conf);
-  }
+  public abstract Path getSpillIndexFile(int spillNumber) throws IOException;
-   * 
+   *
-  public Path getSpillIndexFileForWrite(int spillNumber, long size)
-      throws IOException {
-    return lDirAlloc.getLocalPathForWrite(TaskTracker.OUTPUT + "/spill"
-        + spillNumber + ".out.index", size, conf);
-  }
+  public abstract Path getSpillIndexFileForWrite(int spillNumber, long size)
+      throws IOException;
-   * 
+   *
-   * @throws IOException 
+   * @throws IOException
-  public Path getInputFile(int mapId)
-      throws IOException {
-    return lDirAlloc.getLocalPathToRead(String.format(
-        REDUCE_INPUT_FILE_FORMAT_STRING, TaskTracker.OUTPUT, Integer
-            .valueOf(mapId)), conf);
-  }
+  public abstract Path getInputFile(int mapId) throws IOException;
-   * 
+   *
-  public Path getInputFileForWrite(org.apache.hadoop.mapreduce.TaskID mapId, 
-                                   long size)
-      throws IOException {
-    return lDirAlloc.getLocalPathForWrite(String.format(
-        REDUCE_INPUT_FILE_FORMAT_STRING, TaskTracker.OUTPUT, mapId.getId()),
-        size, conf);
-  }
+  public abstract Path getInputFileForWrite(
+      org.apache.hadoop.mapreduce.TaskID mapId, long size) throws IOException;
-  public void removeAll()
-      throws IOException {
-    conf.deleteLocalFiles(TaskTracker.OUTPUT);
+  public abstract void removeAll() throws IOException;
+
+  @Override
+  public void setConf(Configuration conf) {
+    this.conf = conf;
-  public void setConf(Configuration conf) {
-    if (conf instanceof JobConf) {
-      this.conf = (JobConf) conf;
-    } else {
-      this.conf = new JobConf(conf);
-    }
+  @Override
+  public Configuration getConf() {
+    return conf;
-  
+

MOV26 UPD40 INS83 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 UPD43 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS29 INS83 INS83 INS43 INS42 INS44 INS83 INS83 INS29 MOV83 INS83 INS43 INS42 INS44 INS83 INS83 INS83 INS83 INS83 INS83 MOV29 INS83 INS83 MOV39 MOV42 MOV43 INS78 MOV83 MOV39 MOV42 MOV44 MOV8 INS78 INS83 INS43 INS42 INS8 UPD42 INS42 INS42 INS45 INS42 INS42 INS45 INS65 UPD42 MOV42 INS43 INS42 INS65 INS42 INS43 INS42 INS42 INS42 UPD42 MOV42 INS41 INS66 UPD42 MOV42 INS66 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL43 DEL42 DEL43 DEL40 DEL14 DEL59 DEL23 DEL42 DEL42 DEL40 DEL40 DEL45 DEL27 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL40 DEL40 DEL45 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL40 DEL40 DEL45 DEL27 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL40 DEL40 DEL45 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL27 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL27 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL66 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL62 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31