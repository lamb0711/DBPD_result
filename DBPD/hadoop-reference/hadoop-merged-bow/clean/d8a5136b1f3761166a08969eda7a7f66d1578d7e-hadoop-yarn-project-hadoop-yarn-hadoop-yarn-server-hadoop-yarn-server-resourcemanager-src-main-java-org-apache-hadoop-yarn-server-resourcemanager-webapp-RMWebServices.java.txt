YARN-5952. Create REST API for changing YARN scheduler configurations. (Jonathan Hung via wangda)

-
+import com.google.common.base.Joiner;
+import org.apache.commons.codec.binary.Base64;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.MutableConfScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.activities.ActivitiesManager;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacitySchedulerConfiguration;
+
+  @PUT
+  @Path("/queues")
+  @Produces({ MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,
+      MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8 })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response updateSchedulerConfiguration(QueueConfigsUpdateInfo
+      mutationInfo, @Context HttpServletRequest hsr)
+      throws AuthorizationException, InterruptedException {
+    init();
+
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    ApplicationACLsManager aclsManager = rm.getApplicationACLsManager();
+    if (aclsManager.areACLsEnabled()) {
+      if (callerUGI == null || !aclsManager.isAdmin(callerUGI)) {
+        String msg = "Only admins can carry out this operation.";
+        throw new ForbiddenException(msg);
+      }
+    }
+
+    ResourceScheduler scheduler = rm.getResourceScheduler();
+    if (scheduler instanceof MutableConfScheduler) {
+      try {
+        callerUGI.doAs(new PrivilegedExceptionAction<Void>() {
+          @Override
+          public Void run() throws IOException, YarnException {
+            Map<String, String> confUpdate =
+                constructKeyValueConfUpdate(mutationInfo);
+            ((CapacityScheduler) scheduler).updateConfiguration(callerUGI,
+                confUpdate);
+            return null;
+          }
+        });
+      } catch (IOException e) {
+        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())
+            .build();
+      }
+      return Response.status(Status.OK).entity("Configuration change " +
+          "successfully applied.").build();
+    } else {
+      return Response.status(Status.BAD_REQUEST)
+          .entity("Configuration change only supported by CapacityScheduler.")
+          .build();
+    }
+  }
+
+  private Map<String, String> constructKeyValueConfUpdate(
+      QueueConfigsUpdateInfo mutationInfo) throws IOException {
+    CapacitySchedulerConfiguration currentConf =
+        ((CapacityScheduler) rm.getResourceScheduler()).getConfiguration();
+    CapacitySchedulerConfiguration proposedConf =
+        new CapacitySchedulerConfiguration(currentConf, false);
+    Map<String, String> confUpdate = new HashMap<>();
+    for (String queueToRemove : mutationInfo.getRemoveQueueInfo()) {
+      removeQueue(queueToRemove, proposedConf, confUpdate);
+    }
+    for (QueueConfigInfo addQueueInfo : mutationInfo.getAddQueueInfo()) {
+      addQueue(addQueueInfo, proposedConf, confUpdate);
+    }
+    for (QueueConfigInfo updateQueueInfo : mutationInfo.getUpdateQueueInfo()) {
+      updateQueue(updateQueueInfo, proposedConf, confUpdate);
+    }
+    return confUpdate;
+  }
+
+  private void removeQueue(
+      String queueToRemove, CapacitySchedulerConfiguration proposedConf,
+      Map<String, String> confUpdate) throws IOException {
+    if (queueToRemove == null) {
+      return;
+    } else {
+      CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler();
+      String queueName = queueToRemove.substring(
+          queueToRemove.lastIndexOf('.') + 1);
+      CSQueue queue = cs.getQueue(queueName);
+      if (queue == null ||
+          !queue.getQueuePath().equals(queueToRemove)) {
+        throw new IOException("Queue " + queueToRemove + " not found");
+      } else if (queueToRemove.lastIndexOf('.') == -1) {
+        throw new IOException("Can't remove queue " + queueToRemove);
+      }
+      String parentQueuePath = queueToRemove.substring(0, queueToRemove
+          .lastIndexOf('.'));
+      String[] siblingQueues = proposedConf.getQueues(parentQueuePath);
+      List<String> newSiblingQueues = new ArrayList<>();
+      for (String siblingQueue : siblingQueues) {
+        if (!siblingQueue.equals(queueName)) {
+          newSiblingQueues.add(siblingQueue);
+        }
+      }
+      proposedConf.setQueues(parentQueuePath, newSiblingQueues
+          .toArray(new String[0]));
+      String queuesConfig = CapacitySchedulerConfiguration.PREFIX +
+          parentQueuePath + CapacitySchedulerConfiguration.DOT +
+          CapacitySchedulerConfiguration.QUEUES;
+      if (newSiblingQueues.size() == 0) {
+        confUpdate.put(queuesConfig, null);
+      } else {
+        confUpdate.put(queuesConfig, Joiner.on(',').join(newSiblingQueues));
+      }
+      for (Map.Entry<String, String> confRemove : proposedConf.getValByRegex(
+          ".*" + queueToRemove.replaceAll("\\.", "\\.") + "\\..*")
+          .entrySet()) {
+        proposedConf.unset(confRemove.getKey());
+        confUpdate.put(confRemove.getKey(), null);
+      }
+    }
+  }
+
+  private void addQueue(
+      QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,
+      Map<String, String> confUpdate) throws IOException {
+    if (addInfo == null) {
+      return;
+    } else {
+      CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler();
+      String queuePath = addInfo.getQueue();
+      String queueName = queuePath.substring(queuePath.lastIndexOf('.') + 1);
+      if (cs.getQueue(queueName) != null) {
+        throw new IOException("Can't add existing queue " + queuePath);
+      } else if (queuePath.lastIndexOf('.') == -1) {
+        throw new IOException("Can't add invalid queue " + queuePath);
+      }
+      String parentQueue = queuePath.substring(0, queuePath.lastIndexOf('.'));
+      String[] siblings = proposedConf.getQueues(parentQueue);
+      List<String> siblingQueues = siblings == null ? new ArrayList<>() :
+          new ArrayList<>(Arrays.<String>asList(siblings));
+      siblingQueues.add(queuePath.substring(queuePath.lastIndexOf('.') + 1));
+      proposedConf.setQueues(parentQueue,
+          siblingQueues.toArray(new String[0]));
+      confUpdate.put(CapacitySchedulerConfiguration.PREFIX +
+          parentQueue + CapacitySchedulerConfiguration.DOT +
+          CapacitySchedulerConfiguration.QUEUES,
+          Joiner.on(',').join(siblingQueues));
+      String keyPrefix = CapacitySchedulerConfiguration.PREFIX +
+          queuePath + CapacitySchedulerConfiguration.DOT;
+      for (Map.Entry<String, String> kv : addInfo.getParams().entrySet()) {
+        if (kv.getValue() == null) {
+          proposedConf.unset(keyPrefix + kv.getKey());
+        } else {
+          proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());
+        }
+        confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());
+      }
+    }
+  }
+
+  private void updateQueue(QueueConfigInfo updateInfo,
+      CapacitySchedulerConfiguration proposedConf,
+      Map<String, String> confUpdate) {
+    if (updateInfo == null) {
+      return;
+    } else {
+      String queuePath = updateInfo.getQueue();
+      String keyPrefix = CapacitySchedulerConfiguration.PREFIX +
+          queuePath + CapacitySchedulerConfiguration.DOT;
+      for (Map.Entry<String, String> kv : updateInfo.getParams().entrySet()) {
+        if (kv.getValue() == null) {
+          proposedConf.unset(keyPrefix + kv.getKey());
+        } else {
+          proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());
+        }
+        confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());
+      }
+    }
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS74 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS43 INS42 INS78 INS43 INS42 INS42 INS42 INS21 INS60 INS60 INS25 INS60 INS25 INS43 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS60 INS70 INS70 INS70 INS41 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS74 INS42 INS25 INS27 INS27 INS40 INS40 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS74 INS59 INS44 INS32 INS8 INS44 INS32 INS8 INS44 INS32 INS8 INS42 INS42 INS42 INS43 INS43 INS43 INS27 INS8 INS8 INS42 INS42 INS43 INS43 INS43 INS27 INS8 INS8 INS42 INS42 INS43 INS43 INS43 INS27 INS8 INS8 INS40 INS45 INS40 INS40 INS45 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS25 INS42 INS42 INS32 INS42 INS43 INS54 INS41 INS41 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS33 INS41 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS70 INS21 INS60 INS25 INS70 INS42 INS42 INS42 INS42 INS33 INS41 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS21 INS21 INS21 INS60 INS70 INS42 INS42 INS42 INS42 INS33 INS41 INS60 INS60 INS70 INS42 INS42 INS9 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS8 INS12 INS32 INS32 INS36 INS42 INS43 INS42 INS9 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS43 INS59 INS5 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS43 INS59 INS27 INS8 INS8 INS44 INS32 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS43 INS59 INS5 INS59 INS74 INS59 INS32 INS32 INS32 INS43 INS59 INS44 INS32 INS8 INS43 INS59 INS43 INS59 INS44 INS32 INS8 INS27 INS38 INS60 INS53 INS21 INS44 INS8 INS32 INS42 INS32 INS42 INS11 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS38 INS53 INS27 INS8 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS34 INS21 INS21 INS74 INS42 INS32 INS42 INS21 INS21 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS53 INS27 INS8 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS27 INS74 INS42 INS32 INS42 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS27 INS74 INS42 INS32 INS42 INS25 INS21 INS42 INS33 INS32 INS43 INS59 INS14 INS32 INS43 INS42 INS41 INS32 INS42 INS27 INS32 INS42 INS45 INS43 INS32 INS42 INS43 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS33 INS32 INS14 INS32 INS38 INS53 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS38 INS8 INS42 INS42 INS3 INS40 INS42 INS40 INS40 INS42 INS42 INS32 INS32 INS43 INS43 INS43 INS42 INS42 INS27 INS32 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS14 INS32 INS38 INS53 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS14 INS14 INS42 INS42 INS27 INS42 INS42 INS3 INS40 INS42 INS40 INS40 INS32 INS42 INS42 INS40 INS42 INS40 INS43 INS43 INS43 INS42 INS42 INS27 INS8 INS8 INS32 INS42 INS42 INS40 INS42 INS40 INS43 INS43 INS43 INS42 INS42 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS40 INS45 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS42 INS42 INS43 INS27 INS42 INS42 INS13 INS34 INS14 INS42 INS42 INS13 INS43 INS32 INS21 INS5 INS34 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS32 INS34 INS43 INS27 INS42 INS42 INS13 INS34 INS14 INS42 INS42 INS13 INS42 INS33 INS74 INS74 INS32 INS32 INS34 INS5 INS34 INS42 INS42 INS13 INS40 INS42 INS42 INS32 INS33 INS21 INS21 INS42 INS42 INS27 INS32 INS40 INS42 INS42 INS32 INS33 INS21 INS21 INS42 INS42 INS27 INS32 INS42 INS74 INS1 INS32 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS45 INS42 INS45 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS45 INS42 INS43 INS27 INS43 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS13 INS43 INS85 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS43 INS43 INS31 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS33 INS43 INS43 INS43 INS42 INS32 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS42 INS42