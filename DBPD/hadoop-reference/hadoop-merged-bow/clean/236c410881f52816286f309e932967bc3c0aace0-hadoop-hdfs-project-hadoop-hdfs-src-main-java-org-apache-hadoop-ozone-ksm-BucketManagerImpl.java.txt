HDFS-11776. Ozone: KSM: add SetBucketProperty. Contributed by Nandakumar Vadivelu.

+import org.apache.hadoop.hdfs.protocol.proto
+    .HdfsProtos.StorageTypeProto;
+import org.apache.hadoop.ksm.helpers.KsmBucketArgs;
+    .KeySpaceManagerProtocolProtos.OzoneAclInfo;
+import org.apache.hadoop.ozone.protocol.proto
+import org.apache.hadoop.ozone.protocolPB.KSMPBHelper;
+import org.apache.hadoop.ozone.web.request.OzoneAcl;
+import java.util.List;
+import java.util.stream.Collectors;
+
+  /**
+   * Sets bucket property from args.
+   * @param args - BucketArgs.
+   * @throws IOException
+   */
+  @Override
+  public void setBucketProperty(KsmBucketArgs args) throws IOException {
+    Preconditions.checkNotNull(args);
+    metadataManager.writeLock().lock();
+    String volumeName = args.getVolumeName();
+    String bucketName = args.getBucketName();
+    try {
+      byte[] bucketKey = metadataManager.getBucketKey(volumeName, bucketName);
+      //Check if volume exists
+      if(metadataManager.get(metadataManager.getVolumeKey(volumeName)) ==
+          null) {
+        LOG.error("volume: {} not found ", volumeName);
+        throw new KSMException("Volume doesn't exist",
+            KSMException.ResultCodes.FAILED_VOLUME_NOT_FOUND);
+      }
+      byte[] value = metadataManager.get(bucketKey);
+      //Check if bucket exist
+      if(value == null) {
+        LOG.error("bucket: {} not found ", bucketName);
+        throw new KSMException("Bucket doesn't exist",
+            KSMException.ResultCodes.FAILED_BUCKET_NOT_FOUND);
+      }
+      KsmBucketInfo oldBucketInfo = KsmBucketInfo.getFromProtobuf(
+          BucketInfo.parseFrom(value));
+      KsmBucketInfo.Builder bucketInfoBuilder = KsmBucketInfo.newBuilder();
+      bucketInfoBuilder.setVolumeName(oldBucketInfo.getVolumeName())
+          .setBucketName(oldBucketInfo.getBucketName());
+
+      //Check ACLs to update
+      if(args.getAddAcls() != null || args.getRemoveAcls() != null) {
+        List<OzoneAcl> acls = getUpdatedAclList(oldBucketInfo.getAcls(),
+            args.getRemoveAcls(), args.getAddAcls());
+        bucketInfoBuilder.setAcls(acls.stream().map(
+            KSMPBHelper::convertOzoneAcl).collect(Collectors.toList()));
+        LOG.debug("Updating ACLs for bucket: {} in volume: {}",
+            bucketName, volumeName);
+      } else {
+        bucketInfoBuilder.setAcls(oldBucketInfo.getAcls());
+      }
+
+      //Check StorageType to update
+      StorageTypeProto storageTypeProto = args.getStorageType();
+      if(storageTypeProto != null) {
+        bucketInfoBuilder.setStorageType(storageTypeProto);
+        LOG.debug("Updating bucket storage type for bucket: {} in volume: {}",
+            bucketName, volumeName);
+      } else {
+        bucketInfoBuilder.setStorageType(oldBucketInfo.getStorageType());
+      }
+
+      //Check Versioning to update
+      Boolean versioning = args.getIsVersionEnabled();
+      if(versioning != null) {
+        bucketInfoBuilder.setIsVersionEnabled(versioning);
+        LOG.debug("Updating bucket versioning for bucket: {} in volume: {}",
+            bucketName, volumeName);
+      } else {
+        bucketInfoBuilder.setIsVersionEnabled(
+            oldBucketInfo.getIsVersionEnabled());
+      }
+
+      metadataManager.put(bucketKey, bucketInfoBuilder.build()
+          .getProtobuf().toByteArray());
+    } catch (IOException | DBException ex) {
+      LOG.error("Setting bucket property failed for bucket:{} in volume:{}",
+          bucketName, volumeName, ex);
+      throw ex;
+    } finally {
+      metadataManager.writeLock().unlock();
+    }
+  }
+
+  /**
+   * Updates the existing ACL list with remove and add ACLs that are passed.
+   * Remove is done before Add.
+   *
+   * @param existingAcls - old ACL list.
+   * @param removeAclInfos - ACLs to be removed.
+   * @param addAclInfos - ACLs to be added.
+   * @return updated ACL list.
+   */
+  private List<OzoneAcl> getUpdatedAclList(List<OzoneAclInfo> existingAcls,
+      List<OzoneAclInfo> removeAclInfos, List<OzoneAclInfo> addAclInfos) {
+    List<OzoneAcl> acls = existingAcls.stream().map(
+        KSMPBHelper::convertOzoneAcl).collect(Collectors.toList());
+    if(removeAclInfos != null && !removeAclInfos.isEmpty()) {
+      List<OzoneAcl> removeAcls = removeAclInfos.stream().map(
+          KSMPBHelper::convertOzoneAcl).collect(Collectors.toList());
+      acls.removeAll(removeAcls);
+    }
+    if(addAclInfos != null && !addAclInfos.isEmpty()) {
+      List<OzoneAcl> addAcls = addAclInfos.stream().map(
+          KSMPBHelper::convertOzoneAcl).collect(Collectors.toList());
+      addAcls.stream().filter(acl -> !acls.contains(acl)).forEach(
+          acls::add);
+    }
+    return acls;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS21 INS21 INS60 INS60 INS54 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS74 INS42 INS74 INS42 INS60 INS25 INS25 INS41 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS74 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS25 INS60 INS25 INS60 INS60 INS21 INS25 INS60 INS25 INS60 INS25 INS21 INS44 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS27 INS38 INS60 INS21 INS27 INS38 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS59 INS27 INS8 INS5 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS8 INS32 INS84 INS42 INS21 INS53 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS32 INS74 INS59 INS32 INS42 INS33 INS32 INS74 INS59 INS32 INS39 INS85 INS42 INS32 INS32 INS33 INS21 INS53 INS39 INS85 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS32 INS40 INS42 INS32 INS32 INS42 INS32 INS27 INS27 INS60 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS43 INS43 INS32 INS42 INS32 INS42 INS32 INS42 INS90 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS42 INS90 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS14 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS33 INS32 INS33 INS74 INS59 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS45 INS40 INS42 INS42 INS45 INS42 INS43 INS45 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS90 INS42 INS42 INS32 INS42 INS90 INS42 INS42 INS42 INS42 INS59 INS38 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS90 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42