Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.server.resourcemanager.RMAuditLogger;
+import org.apache.hadoop.yarn.server.resourcemanager.RMAuditLogger.AuditConstants;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMApp;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.RMAppAttempt;
+import org.apache.hadoop.util.StringUtils;
+  /**
+   *  This class is for logging the application summary.
+   */
+  static class ApplicationSummary {
+    static final Log LOG = LogFactory.getLog(ApplicationSummary.class);
+
+    // Escape sequences 
+    static final char EQUALS = '=';
+    static final char[] charsToEscape =
+      {StringUtils.COMMA, EQUALS, StringUtils.ESCAPE_CHAR};
+
+    static class SummaryBuilder {
+      final StringBuilder buffer = new StringBuilder();
+
+      // A little optimization for a very common case
+      SummaryBuilder add(String key, long value) {
+        return _add(key, Long.toString(value));
+      }
+
+      <T> SummaryBuilder add(String key, T value) {
+        return _add(key, StringUtils.escapeString(String.valueOf(value),
+                    StringUtils.ESCAPE_CHAR, charsToEscape));
+      }
+
+      SummaryBuilder add(SummaryBuilder summary) {
+        if (buffer.length() > 0) buffer.append(StringUtils.COMMA);
+        buffer.append(summary.buffer);
+        return this;
+      }
+
+      SummaryBuilder _add(String key, String value) {
+        if (buffer.length() > 0) buffer.append(StringUtils.COMMA);
+        buffer.append(key).append(EQUALS).append(value);
+        return this;
+      }
+
+      @Override public String toString() {
+        return buffer.toString();
+      }
+    }
+
+    /**
+     * create a summary of the application's runtime.
+     * 
+     * @param app {@link RMApp} whose summary is to be created, cannot
+     *            be <code>null</code>.
+     */
+    public static SummaryBuilder createAppSummary(RMApp app) {
+      String trackingUrl = "N/A";
+      String host = "N/A";
+      RMAppAttempt attempt = app.getCurrentAppAttempt();
+      if (attempt != null) {
+        trackingUrl = attempt.getTrackingUrl();
+        host = attempt.getHost();
+      }
+      SummaryBuilder summary = new SummaryBuilder()
+          .add("appId", app.getApplicationId())
+          .add("name", app.getName())
+          .add("user", app.getUser())
+          .add("queue", app.getQueue())
+          .add("state", app.getState())
+          .add("trackingUrl", trackingUrl)
+          .add("appMasterHost", host)
+          .add("startTime", app.getStartTime())
+          .add("finishTime", app.getFinishTime());
+      return summary;
+    }
+
+    /**
+     * Log a summary of the application's runtime.
+     * 
+     * @param app {@link RMApp} whose summary is to be logged
+     */
+    public static void logAppSummary(RMApp app) {
+      if (app != null) {
+        LOG.info(createAppSummary(app));
+      }
+    }
+  }
+
+      writeAuditLog(appId);
-  };
+  }
+
+  protected void writeAuditLog(ApplicationId appId) {
+    RMApp app = rmContext.getRMApps().get(appId);
+    String operation = "UNKONWN";
+    boolean success = false;
+    switch (app.getState()) {
+      case FAILED: 
+        operation = AuditConstants.FINISH_FAILED_APP;
+        break;
+      case FINISHED:
+        operation = AuditConstants.FINISH_SUCCESS_APP;
+        success = true;
+        break;
+      case KILLED: 
+        operation = AuditConstants.FINISH_KILLED_APP;
+        success = true;
+        break;
+      default:
+    }
+    
+    if (success) {
+      RMAuditLogger.logSuccess(app.getUser(), operation,
+          "RMAppManager", app.getApplicationId());
+    } else {
+      StringBuilder diag = app.getDiagnostics(); 
+      String msg = diag == null ? null : diag.toString();
+      RMAuditLogger.logFailure(app.getUser(), operation, msg, "RMAppManager",
+          "App failed with state: " + app.getState(), appId);
+    }
+  }
+        ApplicationSummary.logAppSummary(rmContext.getRMApps().get(appID));

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS55 INS31 INS29 INS83 INS42 INS23 INS23 INS23 INS55 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS65 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS5 INS59 INS83 INS42 INS23 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS60 INS60 INS60 INS50 INS25 INS66 INS42 INS42 INS32 INS42 INS13 INS39 INS85 INS42 INS4 INS83 INS43 INS59 INS43 INS42 INS44 INS44 INS8 INS73 INS43 INS42 INS44 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS60 INS41 INS65 INS65 INS43 INS42 INS25 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS49 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS42 INS8 INS8 INS42 INS42 INS57 INS40 INS42 INS40 INS42 INS42 INS14 INS42 INS43 INS42 INS39 INS42 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS25 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS25 INS21 INS41 INS42 INS42 INS41 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS27 INS8 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS9 INS42 INS42 INS42 INS7 INS42 INS7 INS7 INS42 INS7 INS7 INS21 INS60 INS60 INS21 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS27 INS21 INS32 INS52 INS42 INS42 INS27 INS21 INS32 INS52 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS9 INS42 INS40 INS42 INS9 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS34 INS32 INS42 INS42 INS40 INS32 INS34 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS32 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS45 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS33 INS32 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS32 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS14 INS42 INS45 INS32 INS42 INS42 INS43 INS42 INS42 INS42