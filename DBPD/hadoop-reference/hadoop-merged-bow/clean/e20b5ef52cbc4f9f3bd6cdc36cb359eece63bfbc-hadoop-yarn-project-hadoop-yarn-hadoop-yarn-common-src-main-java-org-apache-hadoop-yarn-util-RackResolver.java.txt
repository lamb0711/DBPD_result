YARN-9332. RackResolver tool should accept multiple hosts. Contributed by Lantao Jin.

+import java.util.ArrayList;
+import com.google.common.base.Strings;
+   * Utility method for getting a list of hostname resolved to a list of node
+   *  in the network topology. This method initializes the class with the
+   * right resolver implementation.
+   * @param conf
+   * @param hostNames
+   * @return nodes {@link Node} after resolving the hostnames
+   */
+  public static List<Node> resolve(
+      Configuration conf, List<String> hostNames) {
+    init(conf);
+    return coreResolve(hostNames);
+  }
+
+  /**
+  /**
+   * Utility method for getting a list of hostname resolved to a list of node
+   *  in the network topology. This method doesn't initialize the class.
+   * Call {@link #init(Configuration)} explicitly.
+   * @param hostNames
+   * @return nodes {@link Node} after resolving the hostnames
+   */
+  public static List<Node> resolve(List<String> hostNames) {
+    if (!initCalled) {
+      throw new IllegalStateException("RackResolver class " +
+          "not yet initialized");
+    }
+    return coreResolve(hostNames);
+  }
+
-    List <String> rNameList = dnsToSwitchMapping.resolve(tmpList);
-    String rName = NetworkTopology.DEFAULT_RACK;
-    if (rNameList == null || rNameList.get(0) == null) {
-      LOG.debug("Could not resolve {}. Falling back to {}", hostName,
-            NetworkTopology.DEFAULT_RACK);
+    return coreResolve(tmpList).get(0);
+  }
+
+  private static List<Node> coreResolve(List<String> hostNames) {
+    List<Node> nodes = new ArrayList<Node>(hostNames.size());
+    List<String> rNameList = dnsToSwitchMapping.resolve(hostNames);
+    if (rNameList == null || rNameList.isEmpty()) {
+      for (String hostName : hostNames) {
+        nodes.add(new NodeBase(hostName, NetworkTopology.DEFAULT_RACK));
+      }
+      LOG.info("Got an error when resolve hostNames. Falling back to "
+          + NetworkTopology.DEFAULT_RACK + " for all.");
-      rName = rNameList.get(0);
-      LOG.debug("Resolved {} to {}", hostName, rName);
+      for (int i = 0; i < hostNames.size(); i++) {
+        if (Strings.isNullOrEmpty(rNameList.get(i))) {
+          // fallback to use default rack
+          nodes.add(new NodeBase(hostNames.get(i),
+              NetworkTopology.DEFAULT_RACK));
+          LOG.debug("Could not resolve {}. Falling back to {}",
+              hostNames.get(i), NetworkTopology.DEFAULT_RACK);
+        } else {
+          nodes.add(new NodeBase(hostNames.get(i), rNameList.get(i)));
+          LOG.debug("Resolved {} to {}", hostNames.get(i), rNameList.get(i));
+        }
+      }
-    return new NodeBase(hostName, rName);
+    return nodes;
+
+  /**
+   * Only used by tests.
+   */
+  @Private
+  @VisibleForTesting
+  static void reset() {
+    initCalled = false;
+    dnsToSwitchMapping = null;
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 MOV43 INS42 MOV44 INS8 INS74 INS44 INS29 INS78 INS78 INS83 INS39 INS42 INS8 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 MOV74 INS42 INS21 INS41 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS25 INS41 MOV60 INS41 INS43 INS43 INS74 INS42 INS60 INS25 INS65 INS42 INS42 INS21 INS21 INS66 INS66 INS66 INS42 INS42 INS66 INS65 INS66 INS42 INS42 INS42 INS32 INS32 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS42 INS43 INS43 INS38 INS8 INS32 INS32 INS42 INS42 INS43 INS43 INS74 INS59 INS74 INS27 INS8 INS8 INS42 INS66 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS68 INS42 INS42 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 MOV27 INS32 INS70 INS21 INS24 INS42 INS9 INS42 INS33 INS42 INS69 INS14 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 UPD42 INS42 INS42 INS44 INS42 INS8 INS32 INS58 INS27 INS37 INS8 INS43 INS43 INS27 INS43 INS43 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS27 INS39 INS59 INS42 INS32 INS42 MOV25 INS42 INS42 INS45 INS45 INS42 INS42 MOV42 INS32 INS45 INS40 INS45 INS42 INS34 INS42 INS42 INS32 INS42 INS42 MOV14 INS42 INS42 INS32 INS21 INS40 MOV42 MOV42 INS42 INS32 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS14 INS32 INS32 INS43 INS32 INS40 UPD42 MOV42 INS42 INS42 INS43 INS32 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 DEL42 DEL34 DEL32 DEL33 DEL27 DEL27 DEL42 DEL34 DEL32 DEL7 DEL43 DEL42 DEL40 DEL59 DEL60