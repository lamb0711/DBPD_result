HDFS-15119. Allow expiration of cached locations in DFSInputStream.
Contributed by Ahmed Hussein.

+import org.apache.hadoop.util.Time;
+  // refresh locatedBlocks periodically
+  private final long refreshReadBlockIntervals;
+  /** timeStamp of the last time a block location was refreshed. */
+  private long locatedBlocksTimeStamp;
+  private boolean isPeriodicRefreshEnabled() {
+    return (refreshReadBlockIntervals > 0L);
+  }
+
-  /* XXX Use of CocurrentHashMap is temp fix. Need to fix
+  /* XXX Use of ConcurrentHashMap is temp fix. Need to fix
+    this.refreshReadBlockIntervals =
+        this.dfsClient.getRefreshReadBlkLocationsInterval();
+    setLocatedBlocksTimeStamp();
-  public long getlastBlockBeingWrittenLengthForTesting() {
+  long getlastBlockBeingWrittenLengthForTesting() {
+  @VisibleForTesting
+  boolean deadNodesContain(DatanodeInfo nodeInfo) {
+    return deadNodes.containsKey(nodeInfo);
+  }
+
+  @VisibleForTesting
+  void setReadTimeStampsForTesting(long timeStamp) {
+    setLocatedBlocksTimeStamp(timeStamp);
+  }
+
+  private void setLocatedBlocksTimeStamp() {
+    setLocatedBlocksTimeStamp(Time.monotonicNow());
+  }
+
+  private void setLocatedBlocksTimeStamp(long timeStamp) {
+    this.locatedBlocksTimeStamp = timeStamp;
+  }
+
+  /**
+   * Checks whether the block locations timestamps have expired.
+   * In the case of expired timestamp:
+   *    - clear list of deadNodes
+   *    - call openInfo(true) which will re-fetch locatedblocks
+   *    - update locatedBlocksTimeStamp
+   * @return true when the expiration feature is enabled and locatedblocks
+   *         timestamp has expired.
+   * @throws IOException
+   */
+  private boolean isLocatedBlocksExpired() {
+    if (!isPeriodicRefreshEnabled()) {
+      return false;
+    }
+    long now = Time.monotonicNow();
+    long elapsed = now - locatedBlocksTimeStamp;
+    if (elapsed < refreshReadBlockIntervals) {
+      return false;
+    }
+    return true;
+  }
+
+  /**
+   * Update the block locations timestamps if they have expired.
+   * In the case of expired timestamp:
+   *    - clear list of deadNodes
+   *    - call openInfo(true) which will re-fetch locatedblocks
+   *    - update locatedBlocksTimeStamp
+   * @return true when the locatedblocks list is re-fetched from the namenode.
+   * @throws IOException
+   */
+  private boolean updateBlockLocationsStamp() throws IOException {
+    if (!isLocatedBlocksExpired()) {
+      return false;
+    }
+    // clear dead nodes
+    deadNodes.clear();
+    openInfo(true);
+    setLocatedBlocksTimeStamp();
+    return true;
+  }
+
-      Iterator<LocatedBlock> oldIter = locatedBlocks.getLocatedBlocks().iterator();
+      Iterator<LocatedBlock> oldIter =
+          locatedBlocks.getLocatedBlocks().iterator();
+      updateBlockLocationsStamp();
-
+      // Re-fetch the locatedBlocks from NN if the timestamp has expired.
+      updateBlockLocationsStamp();
+
+
-          if (pos > blockEnd || currentNode == null) {
+          // currentNode needs to be updated if the blockLocations timestamp has
+          // expired.
+          if (pos > blockEnd || currentNode == null
+              || updateBlockLocationsStamp()) {
-                                                 throws IOException {
+      throws IOException {

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS78 INS39 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS42 INS65 INS42 INS41 INS21 INS21 INS42 INS43 INS42 INS41 INS42 INS39 INS42 INS21 INS21 INS39 INS42 INS21 INS65 INS65 INS65 INS25 INS60 INS60 INS25 INS41 INS65 INS65 INS65 INS42 INS25 INS21 INS21 INS21 INS41 INS66 INS36 INS7 INS32 INS42 INS32 INS32 INS32 INS7 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS38 INS8 INS39 INS59 INS39 INS59 INS27 INS8 INS9 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS38 INS8 INS32 INS32 INS32 INS9 INS27 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS22 INS42 INS32 INS41 INS42 INS32 INS42 INS27 INS42 INS42 INS41 INS32 INS41 INS42 INS42 INS42 INS9 INS42 INS21 INS21 INS42 INS34 INS52 INS42 INS22 INS42 INS42 INS42 INS52 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS42 INS9 INS32 INS32 INS52 INS42 INS42 INS42 INS27 MOV27 INS32 INS42 DEL83