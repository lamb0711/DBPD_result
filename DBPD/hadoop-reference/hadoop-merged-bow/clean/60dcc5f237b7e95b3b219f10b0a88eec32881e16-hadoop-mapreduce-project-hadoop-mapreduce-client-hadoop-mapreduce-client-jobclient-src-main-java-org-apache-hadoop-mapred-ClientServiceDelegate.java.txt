Merging trunk to HDFS-1623 branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1179484 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.InetSocketAddress;
+import org.apache.commons.lang.StringUtils;
-import org.apache.hadoop.yarn.api.records.ApplicationState;
+import org.apache.hadoop.yarn.api.records.YarnApplicationState;
+  private String trackingUrl;
-  public ClientServiceDelegate(Configuration conf, ResourceMgrDelegate rm, 
+  public ClientServiceDelegate(Configuration conf, ResourceMgrDelegate rm,
-  private NotRunningJob getNotRunningJob(ApplicationReport applicationReport, 
+  private NotRunningJob getNotRunningJob(ApplicationReport applicationReport,
-      String user = 
-          (applicationReport == null) ? 
+      String user =
+          (applicationReport == null) ?
+    if (application != null) {
+      trackingUrl = application.getTrackingUrl();
+    }
-    while (application == null || ApplicationState.RUNNING.equals(application.getState())) {
+    while (application == null || YarnApplicationState.RUNNING.equals(application.getYarnApplicationState())) {
-   
-          LOG.debug("Application state is " + application.getState());
+
+          LOG.debug("Application state is " + application.getYarnApplicationState());
-          clientToken.setService(new Text(application.getHost() + ":"
-              + application.getRpcPort()));
+          // RPC layer client expects ip:port as service for tokens
+          InetSocketAddress addr = NetUtils.createSocketAddr(application
+              .getHost(), application.getRpcPort());
+          clientToken.setService(new Text(addr.getAddress().getHostAddress()
+              + ":" + addr.getPort()));
-        LOG.info("Could not connect to " + serviceAddr + 
+        LOG.info("Could not connect to " + serviceAddr +
-     * block on it. This is to be able to return job status 
+     * block on it. This is to be able to return job status
-    
+
-    if (application.getState() == ApplicationState.NEW ||
-        application.getState() == ApplicationState.SUBMITTED) {
+    if (application.getYarnApplicationState() == YarnApplicationState.NEW ||
+        application.getYarnApplicationState() == YarnApplicationState.SUBMITTED) {
-    
-    if (application.getState() == ApplicationState.FAILED) {
+
+    if (application.getYarnApplicationState() == YarnApplicationState.FAILED) {
-    
-    if (application.getState() == ApplicationState.KILLED) {
+
+    if (application.getYarnApplicationState() == YarnApplicationState.KILLED) {
-    
-    //History server can serve a job only if application 
+
+    //History server can serve a job only if application
-    if (application.getState() == ApplicationState.SUCCEEDED) {
-      LOG.info("Application state is completed. " +
-          "Redirecting to job history server");
+    if (application.getYarnApplicationState() == YarnApplicationState.FINISHED) {
+      LOG.info("Application state is completed. FinalApplicationStatus="
+          + application.getFinalApplicationStatus().toString()
+          + ". Redirecting to job history server");
-        Configuration myConf = new Configuration(conf);
-        myConf.setClass(
-            YarnConfiguration.YARN_SECURITY_INFO,
-            SchedulerSecurityInfo.class, SecurityInfo.class); 
-        YarnRPC rpc = YarnRPC.create(myConf);
+        YarnRPC rpc = YarnRPC.create(conf);
-            NetUtils.createSocketAddr(serviceAddr), myConf);
+            NetUtils.createSocketAddr(serviceAddr), conf);
-  private synchronized Object invoke(String method, Class argClass, 
+  private synchronized Object invoke(String method, Class argClass,
-      Counters cnt = ((GetCountersResponse) 
+      Counters cnt = ((GetCountersResponse)
-      
+
-    List<org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptCompletionEvent> list = 
+    List<org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptCompletionEvent> list =
-    org.apache.hadoop.mapreduce.v2.api.records.JobId jobId = 
+    org.apache.hadoop.mapreduce.v2.api.records.JobId jobId =
-    GetJobReportRequest request = 
+    GetJobReportRequest request =
-    JobReport report = ((GetJobReportResponse) invoke("getJobReport", 
+    JobReport report = ((GetJobReportResponse) invoke("getJobReport",
-    String jobFile = MRApps.getJobFile(conf, report.getUser(), oldJobID); 
-
-    return TypeConverter.fromYarn(report, jobFile);
+    if (StringUtils.isEmpty(report.getJobFile())) {
+      String jobFile = MRApps.getJobFile(conf, report.getUser(), oldJobID);
+      report.setJobFile(jobFile);
+    }
+    String historyTrackingUrl = report.getTrackingUrl();
+    return TypeConverter.fromYarn(report, "http://"
+        + (StringUtils.isNotEmpty(historyTrackingUrl) ? historyTrackingUrl
+            : trackingUrl));
-    org.apache.hadoop.mapreduce.v2.api.records.JobId jobId = 
+    org.apache.hadoop.mapreduce.v2.api.records.JobId jobId =
-    GetTaskReportsRequest request = 
+    GetTaskReportsRequest request =
-    
-    List<org.apache.hadoop.mapreduce.v2.api.records.TaskReport> taskReports = 
-      ((GetTaskReportsResponse) invoke("getTaskReports", GetTaskReportsRequest.class, 
+
+    List<org.apache.hadoop.mapreduce.v2.api.records.TaskReport> taskReports =
+      ((GetTaskReportsResponse) invoke("getTaskReports", GetTaskReportsRequest.class,
-    
+
-    org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId attemptID 
+    org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId attemptID
-  
+
-    org.apache.hadoop.mapreduce.v2.api.records.JobId jobId 
+    org.apache.hadoop.mapreduce.v2.api.records.JobId jobId
-    
+

INS26 INS26 INS40 INS40 UPD40 INS23 INS83 INS43 INS59 INS42 INS42 INS25 INS25 INS60 INS27 INS8 INS32 INS8 INS43 INS59 INS42 INS33 INS21 UPD40 UPD40 UPD40 INS42 INS42 INS32 MOV60 INS21 INS42 INS42 INS32 INS27 INS7 UPD40 UPD40 UPD40 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS45 INS36 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS16 INS42 INS42 UPD45 INS32 UPD45 INS32 INS42 INS42 INS60 INS32 INS42 UPD42 MOV42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS14 UPD42 UPD42 MOV32 MOV32 MOV43 INS27 UPD42 INS32 INS45 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 DEL45 DEL27 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL43 DEL57 DEL42 DEL43 DEL57 DEL32 DEL21