Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

-import java.io.FileNotFoundException;
-import org.apache.hadoop.fs.FileAlreadyExistsException;
-import org.apache.hadoop.fs.InvalidPathException;
-import org.apache.hadoop.fs.Options.Rename;
-import org.apache.hadoop.fs.ParentNotDirectoryException;
-import org.apache.hadoop.fs.UnresolvedLinkException;
-import org.apache.hadoop.hdfs.DFSConfigKeys;
-import org.apache.hadoop.hdfs.server.namenode.NotReplicatedYetException;
-import org.apache.hadoop.hdfs.server.namenode.SafeModeException;
-import org.apache.hadoop.security.AccessControlException;
+import static org.apache.hadoop.hdfs.client.HdfsClientConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY;
+
- * ClientProtocol is used by user code via 
- * {@link org.apache.hadoop.hdfs.DistributedFileSystem} class to communicate 
- * with the NameNode.  User code can manipulate the directory namespace, 
- * as well as open/close file streams, etc.
+ * ClientProtocol is used by user code via the DistributedFileSystem class to
+ * communicate with the NameNode.  User code can manipulate the directory
+ * namespace, as well as open/close file streams, etc.
-    serverPrincipal = DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY)
+    serverPrincipal = DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY)
-   * the client interface to the NN AND the RPC protocol used to 
+   * the client interface to the NN AND the RPC protocol used to
-   * 
-   * This class is used by both the DFSClient and the 
+   *
+   * This class is used by both the DFSClient and the
-   * 
-   * If you are adding/changing this interface then you need to 
+   *
+   * If you are adding/changing this interface then you need to
-   * 
-   * For more details on protocol buffer wire protocol, please see 
+   *
+   * For more details on protocol buffer wire protocol, please see
-   * 
+   *
-   * 
+   *
-   *  serialization. DO not update this version any further. 
+   *  serialization. DO not update this version any further.
-  public static final long versionID = 69L;
-  
+  long versionID = 69L;
+
-   * Get locations of the blocks of the specified file within the specified range.
+   * Get locations of the blocks of the specified file
+   * within the specified range.
-   * The client will then have to contact 
+   * The client will then have to contact
-   * 
+   *
-   * @throws AccessControlException If access is denied
-   * @throws FileNotFoundException If file <code>src</code> does not exist
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws java.io.FileNotFoundException If file <code>src</code> does not
+   *           exist
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public LocatedBlocks getBlockLocations(String src,
-                                         long offset,
-                                         long length) 
-      throws AccessControlException, FileNotFoundException,
-      UnresolvedLinkException, IOException;
+  LocatedBlocks getBlockLocations(String src, long offset, long length)
+      throws IOException;
-  public FsServerDefaults getServerDefaults() throws IOException;
+  FsServerDefaults getServerDefaults() throws IOException;
-   * Although, other clients cannot {@link #delete(String, boolean)}, re-create or 
-   * {@link #rename(String, String)} it until the file is completed
+   * Although, other clients cannot {@link #delete(String, boolean)}, re-create
+   * or {@link #rename(String, String)} it until the file is completed
-   * multi-block files must also use 
+   * multi-block files must also use
-   * @param flag indicates whether the file should be 
+   * @param flag indicates whether the file should be
-   * 
+   *
-   * @throws AccessControlException If access is denied
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
-   * @throws DSQuotaExceededException If file creation violates disk space 
+   * @throws DSQuotaExceededException If file creation violates disk space
-   * @throws FileAlreadyExistsException If file <code>src</code> already exists
-   * @throws FileNotFoundException If parent of <code>src</code> does not exist
-   *           and <code>createParent</code> is false
-   * @throws ParentNotDirectoryException If parent of <code>src</code> is not a
-   *           directory.
-   * @throws NSQuotaExceededException If file creation violates name space 
+   * @throws org.apache.hadoop.fs.FileAlreadyExistsException If file
+   *           <code>src</code> already exists
+   * @throws java.io.FileNotFoundException If parent of <code>src</code> does
+   *           not exist and <code>createParent</code> is false
+   * @throws org.apache.hadoop.fs.ParentNotDirectoryException If parent of
+   *           <code>src</code> is not a directory.
+   * @throws NSQuotaExceededException If file creation violates name space
-   * @throws SafeModeException create not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException create not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-   * @throws InvalidPathException Path <code>src</code> is invalid
+   * @throws org.apache.hadoop.fs.InvalidPathException Path <code>src</code> is
+   *           invalid
-  public HdfsFileStatus create(String src, FsPermission masked,
+  HdfsFileStatus create(String src, FsPermission masked,
-      boolean createParent, short replication, long blockSize, 
+      boolean createParent, short replication, long blockSize,
-      throws AccessControlException, AlreadyBeingCreatedException,
-      DSQuotaExceededException, FileAlreadyExistsException,
-      FileNotFoundException, NSQuotaExceededException,
-      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,
-      SnapshotAccessControlException, IOException;
+      throws IOException;
-   * Append to the end of the file. 
+   * Append to the end of the file.
-   * @throws AccessControlException if permission to append file is 
-   * denied by the system. As usually on the client side the exception will 
-   * be wrapped into {@link org.apache.hadoop.ipc.RemoteException}.
+   * @throws org.apache.hadoop.security.AccessControlException if permission to
+   * append file is denied by the system. As usually on the client side the
+   * exception will be wrapped into
+   * {@link org.apache.hadoop.ipc.RemoteException}.
-   * 
-   * @throws AccessControlException If permission to append to file is denied
-   * @throws FileNotFoundException If file <code>src</code> is not found
-   * @throws DSQuotaExceededException If append violates disk space quota 
+   *
+   * @throws org.apache.hadoop.security.AccessControlException If permission to
+   *           append to file is denied
+   * @throws java.io.FileNotFoundException If file <code>src</code> is not found
+   * @throws DSQuotaExceededException If append violates disk space quota
-   * @throws SafeModeException append not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException append not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public LastBlockWithStatus append(String src, String clientName,
-      EnumSetWritable<CreateFlag> flag) throws AccessControlException,
-      DSQuotaExceededException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, SnapshotAccessControlException, IOException;
+  LastBlockWithStatus append(String src, String clientName,
+      EnumSetWritable<CreateFlag> flag) throws IOException;
-   * The actual block replication is not expected to be performed during  
-   * this method call. The blocks will be populated or removed in the 
+   * The actual block replication is not expected to be performed during
+   * this method call. The blocks will be populated or removed in the
-   * 
+   *
-   * 
+   *
-   * @throws AccessControlException If access is denied
-   * @throws DSQuotaExceededException If replication violates disk space 
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws DSQuotaExceededException If replication violates disk space
-   * @throws FileNotFoundException If file <code>src</code> is not found
-   * @throws SafeModeException not allowed in safemode
-   * @throws UnresolvedLinkException if <code>src</code> contains a symlink
+   * @throws java.io.FileNotFoundException If file <code>src</code> is not found
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if <code>src</code>
+   *           contains a symlink
-  public boolean setReplication(String src, short replication)
-      throws AccessControlException, DSQuotaExceededException,
-      FileNotFoundException, SafeModeException, UnresolvedLinkException,
-      SnapshotAccessControlException, IOException;
+  boolean setReplication(String src, short replication)
+      throws IOException;
-  public BlockStoragePolicy[] getStoragePolicies() throws IOException;
+  BlockStoragePolicy[] getStoragePolicies() throws IOException;
-   * Set the storage policy for a file/directory
-   * @param src Path of an existing file/directory. 
+   * Set the storage policy for a file/directory.
+   * @param src Path of an existing file/directory.
-   * @throws UnresolvedLinkException if <code>src</code> contains a symlink
-   * @throws FileNotFoundException If file/dir <code>src</code> is not found
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if <code>src</code>
+   *           contains a symlink
+   * @throws java.io.FileNotFoundException If file/dir <code>src</code> is not
+   *           found
-  public void setStoragePolicy(String src, String policyName)
-      throws SnapshotAccessControlException, UnresolvedLinkException,
-      FileNotFoundException, QuotaExceededException, IOException;
+  void setStoragePolicy(String src, String policyName)
+      throws IOException;
+
+  /**
+   * Get the storage policy for a file/directory.
+   * @param path
+   *          Path of an existing file/directory.
+   * @throws AccessControlException
+   *           If access is denied
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException
+   *           if <code>src</code> contains a symlink
+   * @throws java.io.FileNotFoundException
+   *           If file/dir <code>src</code> is not found
+   */
+  @Idempotent
+  BlockStoragePolicy getStoragePolicy(String path) throws IOException;
-   * 
-   * @throws AccessControlException If access is denied
-   * @throws FileNotFoundException If file <code>src</code> is not found
-   * @throws SafeModeException not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   *
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws java.io.FileNotFoundException If file <code>src</code> is not found
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public void setPermission(String src, FsPermission permission)
-      throws AccessControlException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, SnapshotAccessControlException, IOException;
+  void setPermission(String src, FsPermission permission)
+      throws IOException;
-   * @throws AccessControlException If access is denied
-   * @throws FileNotFoundException If file <code>src</code> is not found
-   * @throws SafeModeException not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws java.io.FileNotFoundException If file <code>src</code> is not found
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public void setOwner(String src, String username, String groupname)
-      throws AccessControlException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, SnapshotAccessControlException, IOException;
+  void setOwner(String src, String username, String groupname)
+      throws IOException;
-   * The client can then either obtain a new block, or complete or abandon the 
+   * The client can then either obtain a new block, or complete or abandon the
-   * 
+   *
-   * @throws AccessControlException If access is denied
-   * @throws FileNotFoundException file <code>src</code> is not found
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws java.io.FileNotFoundException file <code>src</code> is not found
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public void abandonBlock(ExtendedBlock b, long fileId,
+  void abandonBlock(ExtendedBlock b, long fileId,
-      throws AccessControlException, FileNotFoundException,
-      UnresolvedLinkException, IOException;
+      throws IOException;
-   * A client that wants to write an additional block to the 
+   * A client that wants to write an additional block to the
-   * should call addBlock().  
+   * should call addBlock().
-   * 
+   *
-   * @throws AccessControlException If access is denied
-   * @throws FileNotFoundException If file <code>src</code> is not found
-   * @throws NotReplicatedYetException previous blocks of the file are not
-   *           replicated yet. Blocks cannot be added until replication
-   *           completes.
-   * @throws SafeModeException create not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws java.io.FileNotFoundException If file <code>src</code> is not found
+   * @throws org.apache.hadoop.hdfs.server.namenode.NotReplicatedYetException
+   *           previous blocks of the file are not replicated yet.
+   *           Blocks cannot be added until replication completes.
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException create not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public LocatedBlock addBlock(String src, String clientName,
-      ExtendedBlock previous, DatanodeInfo[] excludeNodes, long fileId, 
+  LocatedBlock addBlock(String src, String clientName,
+      ExtendedBlock previous, DatanodeInfo[] excludeNodes, long fileId,
-      throws AccessControlException, FileNotFoundException,
-      NotReplicatedYetException, SafeModeException, UnresolvedLinkException,
-      IOException;
+      throws IOException;
-  /** 
+  /**
-   * 
+   *
-   * 
+   *
-   * 
-   * @throws AccessControlException If access is denied
-   * @throws FileNotFoundException If file <code>src</code> is not found
-   * @throws SafeModeException create not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   *
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws java.io.FileNotFoundException If file <code>src</code> is not found
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException create not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public LocatedBlock getAdditionalDatanode(final String src,
+  LocatedBlock getAdditionalDatanode(final String src,
-      ) throws AccessControlException, FileNotFoundException,
-          SafeModeException, UnresolvedLinkException, IOException;
+      ) throws IOException;
-   * The client is done writing data to the given filename, and would 
-   * like to complete it.  
+   * The client is done writing data to the given filename, and would
+   * like to complete it.
-   * 
+   *
-   * @throws AccessControlException If access is denied
-   * @throws FileNotFoundException If file <code>src</code> is not found
-   * @throws SafeModeException create not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink 
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws java.io.FileNotFoundException If file <code>src</code> is not found
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException create not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public boolean complete(String src, String clientName,
+  boolean complete(String src, String clientName,
-      throws AccessControlException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, IOException;
+      throws IOException;
-  public void reportBadBlocks(LocatedBlock[] blocks) throws IOException;
+  void reportBadBlocks(LocatedBlock[] blocks) throws IOException;
-   * 
+   *
-   * @throws IOException an I/O error occurred 
+   * @throws IOException an I/O error occurred
-  public boolean rename(String src, String dst) 
-      throws UnresolvedLinkException, SnapshotAccessControlException, IOException;
+  boolean rename(String src, String dst)
+      throws IOException;
-   * Moves blocks from srcs to trg and delete srcs
-   * 
+   * Moves blocks from srcs to trg and delete srcs.
+   *
-   * @throws UnresolvedLinkException if <code>trg</code> or <code>srcs</code>
-   *           contains a symlink
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if <code>trg</code> or
+   *           <code>srcs</code> contains a symlink
-  public void concat(String trg, String[] srcs) 
-      throws IOException, UnresolvedLinkException, SnapshotAccessControlException;
+  void concat(String trg, String[] srcs)
+      throws IOException;
-   * With OVERWRITE option, rename overwrites the dst, if it is a file 
+   * With OVERWRITE option, rename overwrites the dst, if it is a file
-   * 
-   * @throws AccessControlException If access is denied
-   * @throws DSQuotaExceededException If rename violates disk space 
+   *
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws DSQuotaExceededException If rename violates disk space
-   * @throws FileAlreadyExistsException If <code>dst</code> already exists and
-   *           <code>options</options> has {@link Rename#OVERWRITE} option
+   * @throws org.apache.hadoop.fs.FileAlreadyExistsException If <code>dst</code>
+   *           already exists and <code>options</code> has
+   *           {@link org.apache.hadoop.fs.Options.Rename#OVERWRITE} option
-   * @throws FileNotFoundException If <code>src</code> does not exist
-   * @throws NSQuotaExceededException If rename violates namespace 
+   * @throws java.io.FileNotFoundException If <code>src</code> does not exist
+   * @throws NSQuotaExceededException If rename violates namespace
-   * @throws ParentNotDirectoryException If parent of <code>dst</code> 
-   *           is not a directory
-   * @throws SafeModeException rename not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> or
+   * @throws org.apache.hadoop.fs.ParentNotDirectoryException If parent of
+   *           <code>dst</code> is not a directory
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException rename not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code> or
-  public void rename2(String src, String dst, Options.Rename... options)
-      throws AccessControlException, DSQuotaExceededException,
-      FileAlreadyExistsException, FileNotFoundException,
-      NSQuotaExceededException, ParentNotDirectoryException, SafeModeException,
-      UnresolvedLinkException, SnapshotAccessControlException, IOException;
+  void rename2(String src, String dst, Options.Rename... options)
+      throws IOException;
-   * @throws AccessControlException If access is denied
-   * @throws FileNotFoundException If file <code>src</code> is not found
-   * @throws SafeModeException truncate not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws java.io.FileNotFoundException If file <code>src</code> is not found
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException truncate
+   *           not allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public boolean truncate(String src, long newLength, String clientName)
-      throws AccessControlException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, SnapshotAccessControlException, IOException;
+  boolean truncate(String src, long newLength, String clientName)
+      throws IOException;
-   * same as delete but provides a way to avoid accidentally 
-   * deleting non empty directories programmatically. 
+   * same as delete but provides a way to avoid accidentally
+   * deleting non empty directories programmatically.
-   * @return true only if the existing file or directory was actually removed 
+   * @return true only if the existing file or directory was actually removed
-   * 
-   * @throws AccessControlException If access is denied
-   * @throws FileNotFoundException If file <code>src</code> is not found
-   * @throws SafeModeException create not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   *
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws java.io.FileNotFoundException If file <code>src</code> is not found
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException create not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public boolean delete(String src, boolean recursive)
-      throws AccessControlException, FileNotFoundException, SafeModeException,
-      UnresolvedLinkException, SnapshotAccessControlException, IOException;
-  
+  boolean delete(String src, boolean recursive)
+      throws IOException;
+
-   * @throws AccessControlException If access is denied
-   * @throws FileAlreadyExistsException If <code>src</code> already exists
-   * @throws FileNotFoundException If parent of <code>src</code> does not exist
-   *           and <code>createParent</code> is false
-   * @throws NSQuotaExceededException If file creation violates quota restriction
-   * @throws ParentNotDirectoryException If parent of <code>src</code> 
-   *           is not a directory
-   * @throws SafeModeException create not allowed in safemode
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   * @throws org.apache.hadoop.security.AccessControlException If access is
+   *           denied
+   * @throws org.apache.hadoop.fs.FileAlreadyExistsException If <code>src</code>
+   *           already exists
+   * @throws java.io.FileNotFoundException If parent of <code>src</code> does
+   *           not exist and <code>createParent</code> is false
+   * @throws NSQuotaExceededException If file creation violates quota
+   *           restriction
+   * @throws org.apache.hadoop.fs.ParentNotDirectoryException If parent of
+   *           <code>src</code> is not a directory
+   * @throws org.apache.hadoop.hdfs.server.namenode.SafeModeException create not
+   *           allowed in safemode
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-   * @throws InvalidPathException If <code>src</code> is invalid
+   * @throws org.apache.hadoop.fs.InvalidPathException If <code>src</code> is
+   *           invalid
-  public boolean mkdirs(String src, FsPermission masked, boolean createParent)
-      throws AccessControlException, FileAlreadyExistsException,
-      FileNotFoundException, NSQuotaExceededException,
-      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,
-      SnapshotAccessControlException, IOException;
+  boolean mkdirs(String src, FsPermission masked, boolean createParent)
+      throws IOException;
-   * Get a partial listing of the indicated directory
+   * Get a partial listing of the indicated directory.
-   * @throws AccessControlException permission denied
-   * @throws FileNotFoundException file <code>src</code> is not found
-   * @throws UnresolvedLinkException If <code>src</code> contains a symlink
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
+   * @throws java.io.FileNotFoundException file <code>src</code> is not found
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException If <code>src</code>
+   *           contains a symlink
-  public DirectoryListing getListing(String src,
-                                     byte[] startAfter,
-                                     boolean needLocation)
-      throws AccessControlException, FileNotFoundException,
-      UnresolvedLinkException, IOException;
-  
+  DirectoryListing getListing(String src, byte[] startAfter,
+      boolean needLocation) throws IOException;
+
-   * Get listing of all the snapshottable directories
-   * 
+   * Get listing of all the snapshottable directories.
+   *
-  public SnapshottableDirectoryStatus[] getSnapshottableDirListing()
+  SnapshottableDirectoryStatus[] getSnapshottableDirListing()
-   * that affect other clients.  A client may obtain a file and 
+   * that affect other clients.  A client may obtain a file and
-   * @throws AccessControlException permission denied
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
-  public void renewLease(String clientName) throws AccessControlException,
-      IOException;
+  void renewLease(String clientName) throws IOException;
-   * 
+   *
-  public boolean recoverLease(String src, String clientName) throws IOException;
+  boolean recoverLease(String src, String clientName) throws IOException;
-  public int GET_STATS_CAPACITY_IDX = 0;
-  public int GET_STATS_USED_IDX = 1;
-  public int GET_STATS_REMAINING_IDX = 2;
-  public int GET_STATS_UNDER_REPLICATED_IDX = 3;
-  public int GET_STATS_CORRUPT_BLOCKS_IDX = 4;
-  public int GET_STATS_MISSING_BLOCKS_IDX = 5;
-  public int GET_STATS_MISSING_REPL_ONE_BLOCKS_IDX = 6;
-  
+  int GET_STATS_CAPACITY_IDX = 0;
+  int GET_STATS_USED_IDX = 1;
+  int GET_STATS_REMAINING_IDX = 2;
+  int GET_STATS_UNDER_REPLICATED_IDX = 3;
+  int GET_STATS_CORRUPT_BLOCKS_IDX = 4;
+  int GET_STATS_MISSING_BLOCKS_IDX = 5;
+  int GET_STATS_MISSING_REPL_ONE_BLOCKS_IDX = 6;
+
-   * Use public constants like {@link #GET_STATS_CAPACITY_IDX} in place of 
+   * Use public constants like {@link #GET_STATS_CAPACITY_IDX} in place of
-  public long[] getStats() throws IOException;
+  long[] getStats() throws IOException;
-  public DatanodeInfo[] getDatanodeReport(HdfsConstants.DatanodeReportType type)
+  DatanodeInfo[] getDatanodeReport(HdfsConstants.DatanodeReportType type)
-  public DatanodeStorageReport[] getDatanodeStorageReport(
+  DatanodeStorageReport[] getDatanodeStorageReport(
-   * @throws UnresolvedLinkException if the path contains a symlink. 
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if the path contains
+   *           a symlink.
-  public long getPreferredBlockSize(String filename) 
-      throws IOException, UnresolvedLinkException;
+  long getPreferredBlockSize(String filename)
+      throws IOException;
-   * 
+   *
-   * {@link #setSafeMode(HdfsConstants.SafeModeAction,boolean) setSafeMode(SafeModeAction.SAFEMODE_ENTER,false)}.
+   * {@link #setSafeMode(HdfsConstants.SafeModeAction,boolean)
+   * setSafeMode(SafeModeAction.SAFEMODE_ENTER,false)}.
-   * percentage called threshold of blocks, which satisfy the minimal 
+   * percentage called threshold of blocks, which satisfy the minimal
-   * {@link #setSafeMode(HdfsConstants.SafeModeAction,boolean) setSafeMode(SafeModeAction.SAFEMODE_ENTER,false)}
+   * {@link #setSafeMode(HdfsConstants.SafeModeAction,boolean)
+   * setSafeMode(SafeModeAction.SAFEMODE_ENTER,false)}
-   * using {@link #setSafeMode(HdfsConstants.SafeModeAction,boolean) setSafeMode(SafeModeAction.SAFEMODE_LEAVE,false)}.
+   * using {@link #setSafeMode(HdfsConstants.SafeModeAction,boolean)
+   * setSafeMode(SafeModeAction.SAFEMODE_LEAVE,false)}.
-   * {@link #setSafeMode(HdfsConstants.SafeModeAction,boolean) setSafeMode(SafeModeAction.SAFEMODE_GET,false)}
+   * {@link #setSafeMode(HdfsConstants.SafeModeAction,boolean)
+   * setSafeMode(SafeModeAction.SAFEMODE_GET,false)}
-   * 
+   *
-   * The name node does not enter safe mode at startup if the threshold is 
+   * The name node does not enter safe mode at startup if the threshold is
-   * If the threshold is set to 1 then all blocks need to have at least 
+   * If the threshold is set to 1 then all blocks need to have at least
-   * If the threshold value is greater than 1 then the name node will not be 
+   * If the threshold value is greater than 1 then the name node will not be
-   * 
+   *
-   * 
-   * @return <ul><li>0 if the safe mode is OFF or</li> 
+   *
+   * @return <ul><li>0 if the safe mode is OFF or</li>
-   *                   
+   *
-  public boolean setSafeMode(HdfsConstants.SafeModeAction action, boolean isChecked) 
+  boolean setSafeMode(HdfsConstants.SafeModeAction action, boolean isChecked)
-  public boolean saveNamespace(long timeWindow, long txGap) throws IOException;
+  boolean saveNamespace(long timeWindow, long txGap) throws IOException;
-  
-   * 
-   * @throws AccessControlException if the superuser privilege is violated
+   *
+   * @throws org.apache.hadoop.security.AccessControlException if the superuser
+   *           privilege is violated
-  public long rollEdits() throws AccessControlException, IOException;
+  long rollEdits() throws IOException;
-   * 
-   * @throws AccessControlException if the superuser privilege is violated.
+   *
+   * @throws org.apache.hadoop.security.AccessControlException if the superuser
+   *           privilege is violated.
-  public boolean restoreFailedStorage(String arg) 
-      throws AccessControlException, IOException;
+  boolean restoreFailedStorage(String arg) throws IOException;
-   * Tells the namenode to reread the hosts and exclude files. 
+   * Tells the namenode to reread the hosts and exclude files.
-  public void refreshNodes() throws IOException;
+  void refreshNodes() throws IOException;
-   * 
+   *
-  public void finalizeUpgrade() throws IOException;
+  void finalizeUpgrade() throws IOException;
-   * @return rolling upgrade information.
+   * @return rolling upgrade information. On query, if no upgrade is in
+   * progress, returns null.
-  public RollingUpgradeInfo rollingUpgrade(RollingUpgradeAction action)
+  RollingUpgradeInfo rollingUpgrade(RollingUpgradeAction action)
-  public CorruptFileBlocks listCorruptFileBlocks(String path, String cookie)
+  CorruptFileBlocks listCorruptFileBlocks(String path, String cookie)
-  
+
-  public void metaSave(String filename) throws IOException;
+  void metaSave(String filename) throws IOException;
-  public void setBalancerBandwidth(long bandwidth) throws IOException;
-  
+  void setBalancerBandwidth(long bandwidth) throws IOException;
+
-   * @throws AccessControlException permission denied
-   * @throws FileNotFoundException file <code>src</code> is not found
-   * @throws UnresolvedLinkException if the path contains a symlink. 
-   * @throws IOException If an I/O error occurred        
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
+   * @throws java.io.FileNotFoundException file <code>src</code> is not found
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if the path contains
+   *           a symlink.
+   * @throws IOException If an I/O error occurred
-  public HdfsFileStatus getFileInfo(String src) throws AccessControlException,
-      FileNotFoundException, UnresolvedLinkException, IOException;
-  
+  HdfsFileStatus getFileInfo(String src) throws IOException;
+
-   * Get the close status of a file
+   * Get the close status of a file.
-   * @throws AccessControlException permission denied
-   * @throws FileNotFoundException file <code>src</code> is not found
-   * @throws UnresolvedLinkException if the path contains a symlink.
-   * @throws IOException If an I/O error occurred     
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
+   * @throws java.io.FileNotFoundException file <code>src</code> is not found
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if the path contains
+   *           a symlink.
+   * @throws IOException If an I/O error occurred
-  public boolean isFileClosed(String src) throws AccessControlException,
-      FileNotFoundException, UnresolvedLinkException, IOException;
-  
+  boolean isFileClosed(String src) throws IOException;
+
-   * Get the file info for a specific file or directory. If the path 
+   * Get the file info for a specific file or directory. If the path
-   * @throws AccessControlException permission denied
-   * @throws UnresolvedLinkException if <code>src</code> contains a symlink
-   * @throws IOException If an I/O error occurred        
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if <code>src</code>
+   *           contains a symlink
+   * @throws IOException If an I/O error occurred
-  public HdfsFileStatus getFileLinkInfo(String src)
-      throws AccessControlException, UnresolvedLinkException, IOException;
-  
+  HdfsFileStatus getFileLinkInfo(String src) throws IOException;
+
-   * @throws AccessControlException permission denied
-   * @throws FileNotFoundException file <code>path</code> is not found
-   * @throws UnresolvedLinkException if <code>path</code> contains a symlink. 
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
+   * @throws java.io.FileNotFoundException file <code>path</code> is not found
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if <code>path</code>
+   *           contains a symlink.
-  public ContentSummary getContentSummary(String path)
-      throws AccessControlException, FileNotFoundException,
-      UnresolvedLinkException, IOException;
+  ContentSummary getContentSummary(String path) throws IOException;
-   * @param namespaceQuota Limit on the number of names in the tree rooted 
+   * @param namespaceQuota Limit on the number of names in the tree rooted
-   * @param storagespaceQuota Limit on storage space occupied all the files under
-   *                       this directory.
+   * @param storagespaceQuota Limit on storage space occupied all the files
+   *                       under this directory.
-   *             It may be null when called by traditional space/namespace quota.
-   *             When type is is not null, the storagespaceQuota parameter is for
-   *             type specified and namespaceQuota must be
+   *             It may be null when called by traditional space/namespace
+   *             quota. When type is is not null, the storagespaceQuota
+   *             parameter is for type specified and namespaceQuota must be
-   *                       
-   * The quota can have three types of values : (1) 0 or more will set 
+   *
+   * The quota can have three types of values : (1) 0 or more will set
-   * 
-   * @throws AccessControlException permission denied
-   * @throws FileNotFoundException file <code>path</code> is not found
-   * @throws QuotaExceededException if the directory size 
+   *
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
+   * @throws java.io.FileNotFoundException file <code>path</code> is not found
+   * @throws QuotaExceededException if the directory size
-   * @throws UnresolvedLinkException if the <code>path</code> contains a symlink. 
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if the
+   *           <code>path</code> contains a symlink.
-  public void setQuota(String path, long namespaceQuota, long storagespaceQuota,
-      StorageType type) throws AccessControlException, FileNotFoundException,
-      UnresolvedLinkException, SnapshotAccessControlException, IOException;
+  void setQuota(String path, long namespaceQuota, long storagespaceQuota,
+      StorageType type) throws IOException;
-   * @param lastBlockLength The length of the last block (under construction) 
-   *                        to be reported to NameNode 
-   * @throws AccessControlException permission denied
-   * @throws FileNotFoundException file <code>src</code> is not found
-   * @throws UnresolvedLinkException if <code>src</code> contains a symlink. 
+   * @param lastBlockLength The length of the last block (under construction)
+   *                        to be reported to NameNode
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
+   * @throws java.io.FileNotFoundException file <code>src</code> is not found
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if <code>src</code>
+   *           contains a symlink.
-  public void fsync(String src, long inodeId, String client,
-                    long lastBlockLength)
-      throws AccessControlException, FileNotFoundException, 
-      UnresolvedLinkException, IOException;
+  void fsync(String src, long inodeId, String client, long lastBlockLength)
+      throws IOException;
-   *              Setting mtime to -1 means that modification time should not be set
-   *              by this call.
+   *              Setting mtime to -1 means that modification time should not
+   *              be set by this call.
-   *              
-   * @throws AccessControlException permission denied
-   * @throws FileNotFoundException file <code>src</code> is not found
-   * @throws UnresolvedLinkException if <code>src</code> contains a symlink. 
+   *
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
+   * @throws java.io.FileNotFoundException file <code>src</code> is not found
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if <code>src</code>
+   *           contains a symlink.
-  public void setTimes(String src, long mtime, long atime)
-      throws AccessControlException, FileNotFoundException, 
-      UnresolvedLinkException, SnapshotAccessControlException, IOException;
+  void setTimes(String src, long mtime, long atime) throws IOException;
-   * @throws AccessControlException permission denied
-   * @throws FileAlreadyExistsException If file <code>link</code> already exists
-   * @throws FileNotFoundException If parent of <code>link</code> does not exist
-   *           and <code>createParent</code> is false
-   * @throws ParentNotDirectoryException If parent of <code>link</code> is not a
-   *           directory.
-   * @throws UnresolvedLinkException if <code>link</target> contains a symlink. 
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
+   * @throws org.apache.hadoop.fs.FileAlreadyExistsException If file
+   *           <code>link</code> already exists
+   * @throws java.io.FileNotFoundException If parent of <code>link</code> does
+   *           not exist and <code>createParent</code> is false
+   * @throws org.apache.hadoop.fs.ParentNotDirectoryException If parent of
+   *           <code>link</code> is not a directory.
+   * @throws org.apache.hadoop.fs.UnresolvedLinkException if <code>link</code>
+   *           contains a symlink.
-  public void createSymlink(String target, String link, FsPermission dirPerm,
-      boolean createParent) throws AccessControlException,
-      FileAlreadyExistsException, FileNotFoundException,
-      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,
-      SnapshotAccessControlException, IOException;
+  void createSymlink(String target, String link, FsPermission dirPerm,
+      boolean createParent) throws IOException;
-   * @throws AccessControlException permission denied
-   * @throws FileNotFoundException If <code>path</code> does not exist
+   * @throws org.apache.hadoop.security.AccessControlException permission denied
+   * @throws java.io.FileNotFoundException If <code>path</code> does not exist
-  public String getLinkTarget(String path) throws AccessControlException,
-      FileNotFoundException, IOException; 
-  
+  String getLinkTarget(String path) throws IOException;
+
-   * Get a new generation stamp together with an access token for 
+   * Get a new generation stamp together with an access token for
-   * 
+   *
-   * 
+   *
-  public LocatedBlock updateBlockForPipeline(ExtendedBlock block,
+  LocatedBlock updateBlockForPipeline(ExtendedBlock block,
-   * Update a pipeline for a block under construction
-   * 
+   * Update a pipeline for a block under construction.
+   *
-  public void updatePipeline(String clientName, ExtendedBlock oldBlock, 
+  void updatePipeline(String clientName, ExtendedBlock oldBlock,
-   * 
+   *
-  public Token<DelegationTokenIdentifier> getDelegationToken(Text renewer) 
+  Token<DelegationTokenIdentifier> getDelegationToken(Text renewer)
-   * 
+   *
-  public long renewDelegationToken(Token<DelegationTokenIdentifier> token)
+  long renewDelegationToken(Token<DelegationTokenIdentifier> token)
-  
+
-   * 
+   *
-  public void cancelDelegationToken(Token<DelegationTokenIdentifier> token)
+  void cancelDelegationToken(Token<DelegationTokenIdentifier> token)
-  
+
-  public DataEncryptionKey getDataEncryptionKey() throws IOException;
-  
+  DataEncryptionKey getDataEncryptionKey() throws IOException;
+
-   * Create a snapshot
+   * Create a snapshot.
-  public String createSnapshot(String snapshotRoot, String snapshotName)
+  String createSnapshot(String snapshotRoot, String snapshotName)
-   * Delete a specific snapshot of a snapshottable directory
+   * Delete a specific snapshot of a snapshottable directory.
-  public void deleteSnapshot(String snapshotRoot, String snapshotName)
+  void deleteSnapshot(String snapshotRoot, String snapshotName)
-  
+
-   * Rename a snapshot
-   * @param snapshotRoot the directory path where the snapshot was taken 
+   * Rename a snapshot.
+   * @param snapshotRoot the directory path where the snapshot was taken
-  public void renameSnapshot(String snapshotRoot, String snapshotOldName,
+  void renameSnapshot(String snapshotRoot, String snapshotOldName,
-  
+
-  public void allowSnapshot(String snapshotRoot)
+  void allowSnapshot(String snapshotRoot)
-    
+
-  public void disallowSnapshot(String snapshotRoot)
+  void disallowSnapshot(String snapshotRoot)
-  
+
-   * 
+   *
-  public SnapshotDiffReport getSnapshotDiffReport(String snapshotRoot,
+  SnapshotDiffReport getSnapshotDiffReport(String snapshotRoot,
-   * 
+   *
-  public long addCacheDirective(CacheDirectiveInfo directive,
+  long addCacheDirective(CacheDirectiveInfo directive,
-   * 
+   *
-  public void modifyCacheDirective(CacheDirectiveInfo directive,
+  void modifyCacheDirective(CacheDirectiveInfo directive,
-   * 
+   *
-  public void removeCacheDirective(long id) throws IOException;
+  void removeCacheDirective(long id) throws IOException;
-   * 
+   *
-   * @param filter Parameters to use to filter the list results, 
+   * @param filter Parameters to use to filter the list results,
-  public BatchedEntries<CacheDirectiveEntry> listCacheDirectives(
+  BatchedEntries<CacheDirectiveEntry> listCacheDirectives(
-   * 
+   *
-  public void addCachePool(CachePoolInfo info) throws IOException;
+  void addCachePool(CachePoolInfo info) throws IOException;
-   * @throws IOException 
+   * @throws IOException
-  public void modifyCachePool(CachePoolInfo req) throws IOException;
-  
+  void modifyCachePool(CachePoolInfo req) throws IOException;
+
-   * 
+   *
-  public void removeCachePool(String pool) throws IOException;
+  void removeCachePool(String pool) throws IOException;
-   * 
-   * @param prevPool name of the last pool listed, or the empty string if this is
-   *          the first invocation of listCachePools
+   *
+   * @param prevPool name of the last pool listed, or the empty string if this
+   *          is the first invocation of listCachePools
-  public BatchedEntries<CachePoolEntry> listCachePools(String prevPool)
+  BatchedEntries<CachePoolEntry> listCachePools(String prevPool)
-  public void modifyAclEntries(String src, List<AclEntry> aclSpec)
+  void modifyAclEntries(String src, List<AclEntry> aclSpec)
-  public void removeAclEntries(String src, List<AclEntry> aclSpec)
+  void removeAclEntries(String src, List<AclEntry> aclSpec)
-  public void removeDefaultAcl(String src) throws IOException;
+  void removeDefaultAcl(String src) throws IOException;
-  public void removeAcl(String src) throws IOException;
+  void removeAcl(String src) throws IOException;
-  public void setAcl(String src, List<AclEntry> aclSpec) throws IOException;
+  void setAcl(String src, List<AclEntry> aclSpec) throws IOException;
-  public AclStatus getAclStatus(String src) throws IOException;
-  
+  AclStatus getAclStatus(String src) throws IOException;
+
-   * Create an encryption zone
+   * Create an encryption zone.
-  public void createEncryptionZone(String src, String keyName)
+  void createEncryptionZone(String src, String keyName)
-  public EncryptionZone getEZForPath(String src)
+  EncryptionZone getEZForPath(String src)
-  public BatchedEntries<EncryptionZone> listEncryptionZones(
+  BatchedEntries<EncryptionZone> listEncryptionZones(
-  public void setXAttr(String src, XAttr xAttr, EnumSet<XAttrSetFlag> flag) 
+  void setXAttr(String src, XAttr xAttr, EnumSet<XAttrSetFlag> flag)
-  
+
-   * @return List<XAttr> <code>XAttr</code> list 
+   * @return List<XAttr> <code>XAttr</code> list
-  public List<XAttr> getXAttrs(String src, List<XAttr> xAttrs) 
+  List<XAttr> getXAttrs(String src, List<XAttr> xAttrs)
-  public List<XAttr> listXAttrs(String src)
+  List<XAttr> listXAttrs(String src)
-  
+
-  public void removeXAttr(String src, XAttr xAttr) throws IOException;
+  void removeXAttr(String src, XAttr xAttr) throws IOException;
-   * {@link AccessControlException}.
+   * {@link org.apache.hadoop.security.AccessControlException}.
-   * @throws AccessControlException if access is denied
-   * @throws FileNotFoundException if the path does not exist
+   * @throws org.apache.hadoop.security.AccessControlException if access is
+   *           denied
+   * @throws java.io.FileNotFoundException if the path does not exist
-  public void checkAccess(String path, FsAction mode) throws IOException;
+  void checkAccess(String path, FsAction mode) throws IOException;
-  public long getCurrentEditLogTxid() throws IOException;
+  long getCurrentEditLogTxid() throws IOException;
-  public EventBatchList getEditsFromTxid(long txid) throws IOException;
+  EventBatchList getEditsFromTxid(long txid) throws IOException;
-  public void createErasureCodingZone(String src, ErasureCodingPolicy ecPolicy)
+  void createErasureCodingZone(String src, ErasureCodingPolicy ecPolicy)
-  public ErasureCodingPolicy[] getErasureCodingPolicies() throws IOException;
+  ErasureCodingPolicy[] getErasureCodingPolicies() throws IOException;
-  public ErasureCodingZone getErasureCodingZone(String src) throws IOException;
+  ErasureCodingZone getErasureCodingZone(String src) throws IOException;

MOV26 UPD40 INS31 INS31 MOV29 MOV78 MOV39 MOV42 MOV44 MOV44 MOV43 INS29 INS78 UPD43 MOV43 INS42 INS44 MOV43 MOV43 MOV43 MOV78 INS43 MOV43 MOV78 UPD66 UPD66 UPD66 INS42 INS65 INS65 INS65 INS65 INS65 INS42 UPD42 INS43 INS42 MOV65 MOV65 MOV65 MOV65 INS42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS40 UPD66 INS66 INS40 UPD66 INS66 INS40 UPD66 INS66 UPD66 INS66 UPD66 UPD66 INS40 UPD66 INS66 UPD66 INS40 INS66 UPD66 INS40 UPD66 UPD66 INS40 UPD66 UPD66 UPD66 INS40 INS66 UPD66 INS40 UPD66 INS66 INS40 UPD66 INS66 UPD66 INS40 UPD66 UPD66 UPD66 INS40 INS66 UPD66 INS40 UPD66 INS40 INS66 UPD66 INS40 UPD66 INS66 UPD66 UPD66 INS40 UPD66 INS66 UPD66 INS40 INS40 INS66 UPD66 INS40 UPD66 INS66 UPD66 UPD66 INS40 UPD66 INS66 INS40 UPD66 INS66 INS66 INS42 INS66 INS42 INS66 INS40 INS66 INS40 INS66 UPD42 MOV42 INS40 UPD66 INS66 INS40 INS40 INS66 UPD66 INS40 UPD66 INS66 INS40 UPD66 INS66 INS40 INS40 INS66 UPD66 INS40 UPD66 INS66 UPD66 INS40 UPD66 INS66 INS40 INS40 UPD66 INS66 UPD66 UPD66 INS40 UPD66 INS66 INS40 INS40 UPD66 UPD66 INS40 INS66 UPD66 INS40 UPD66 INS66 INS40 UPD66 INS66 INS40 INS40 INS66 UPD66 INS40 UPD66 INS66 UPD66 UPD66 INS40 UPD66 INS66 INS40 INS40 INS66 UPD66 INS40 UPD66 INS66 UPD66 UPD66 INS40 UPD66 UPD66 UPD66 INS40 UPD66 INS66 UPD66 INS40 UPD66 UPD66 INS40 UPD66 INS40 UPD66 UPD66 INS40 INS66 UPD66 INS40 INS40 UPD66 INS66 INS40 INS40 INS66 UPD66 INS40 UPD66 INS66 UPD66 UPD66 UPD66 INS40 UPD66 INS66 INS40 INS40 INS66 UPD66 INS40 UPD66 INS66 INS40 UPD66 INS66 INS40 UPD66 INS66 INS40 UPD66 UPD66 UPD66 INS66 INS40 UPD66 UPD66 INS40 INS66 UPD66 INS40 UPD66 INS66 INS40 UPD66 INS66 UPD66 INS40 INS40 INS40 UPD66 INS66 UPD66 UPD66 INS40 UPD66 INS40 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 INS40 INS66 UPD66 INS40 INS66 UPD66 UPD66 UPD66 INS66 INS40 INS40 INS40 UPD66 INS66 UPD66 UPD66 INS40 INS40 INS40 UPD66 INS66 UPD66 UPD66 INS40 INS40 UPD66 INS66 UPD66 INS40 INS40 INS40 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS40 INS40 UPD66 INS40 INS66 UPD66 UPD66 UPD66 INS40 INS40 INS40 UPD66 INS66 UPD66 UPD66 INS40 INS40 INS40 UPD66 INS66 INS40 INS40 INS66 UPD66 INS40 UPD66 UPD66 INS40 UPD66 UPD66 INS40 INS66 UPD66 INS40 INS40 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS40 UPD66 INS66 INS40 UPD66 UPD66 UPD66 UPD66 INS40 INS40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL65 DEL66 DEL40 DEL83 DEL83 DEL83 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL43 DEL42 DEL43 DEL31 DEL83 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL66 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL83 DEL42 DEL43 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL83 DEL42 DEL43 DEL83 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL66 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL42 DEL42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83