YARN-6255. Refactor yarn-native-services framework. Contributed by Jian He

-import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.registry.client.types.ServiceRecord;
+import org.apache.hadoop.service.AbstractService;
+import org.apache.hadoop.util.StringUtils;
-import org.apache.hadoop.yarn.api.records.LocalResource;
-import org.apache.hadoop.yarn.api.records.LocalResourceType;
-import org.apache.slider.api.ClusterDescription;
-import org.apache.slider.api.ClusterNode;
-import org.apache.slider.api.OptionKeys;
+import org.apache.slider.api.resource.Application;
+import org.apache.slider.api.resource.Component;
+import org.apache.slider.api.resource.ContainerState;
-import org.apache.slider.core.conf.AggregateConf;
-import org.apache.slider.core.conf.ConfTreeOperations;
-import org.apache.slider.core.conf.MapOperations;
-import org.apache.slider.core.registry.docstore.ConfigFormat;
-import org.apache.slider.core.registry.docstore.ConfigUtils;
-import org.apache.slider.core.registry.docstore.ExportEntry;
-import org.apache.slider.providers.AbstractProviderService;
-import org.apache.slider.providers.MonitorDetail;
-import org.apache.slider.providers.ProviderCore;
+import org.apache.slider.core.registry.docstore.PublishedConfiguration;
+import org.apache.slider.providers.ProviderService;
+import org.apache.slider.server.appmaster.state.StateAccessForProviders;
+import org.apache.slider.server.services.yarnregistry.YarnRegistryViewForProviders;
-import java.io.File;
-import java.net.URL;
-import java.util.Collections;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Scanner;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.regex.Pattern;
-public class DockerProviderService extends AbstractProviderService implements
-    ProviderCore,
-    DockerKeys,
-    SliderKeys {
+public class DockerProviderService extends AbstractService
+    implements ProviderService, DockerKeys, SliderKeys {
-  private static final String EXPORT_GROUP = "quicklinks";
-  private static final String APPLICATION_TAG = "application";
-  private static final String HOST_KEY_FORMAT = "${%s_HOST}";
-  private static final String IP_KEY_FORMAT = "${%s_IP}";
-  private static final String VARIABLE_INDICATOR = "${";
-
-  private String clusterName = null;
-  private SliderFileSystem fileSystem = null;
-
-  private final Map<String, Set<ExportEntry>> exportMap =
-      new ConcurrentHashMap<>();
+  private static final String QUICK_LINKS = "quicklinks";
+  protected StateAccessForProviders amState;
+  protected YarnRegistryViewForProviders yarnRegistry;
-  public List<ProviderRole> getRoles() {
-    return Collections.emptyList();
+  public void setAMState(StateAccessForProviders stateAccessor) {
+    this.amState = stateAccessor;
-  public boolean isSupportedRole(String role) {
-    return true;
+  public void bindToYarnRegistry(YarnRegistryViewForProviders yarnRegistry) {
+    this.yarnRegistry = yarnRegistry;
-  @Override
-  public void validateInstanceDefinition(AggregateConf instanceDefinition)
-      throws SliderException {
-  }
-
-  private String getClusterName() {
-    if (SliderUtils.isUnset(clusterName)) {
-      clusterName = getAmState().getInternalsSnapshot().get(OptionKeys.APPLICATION_NAME);
-    }
-    return clusterName;
-  }
-
-  @Override
-      AggregateConf instanceDefinition, Container container,
-      ProviderRole providerRole, SliderFileSystem fileSystem,
-      Path generatedConfPath, MapOperations resourceComponent,
-      MapOperations appComponent, Path containerTmpDirPath)
+      Application application, Container container, ProviderRole providerRole,
+      SliderFileSystem fileSystem)
-    log.info("Build launch context for Docker");
-    log.debug(instanceDefinition.toString());
-
-    ConfTreeOperations appConf = instanceDefinition.getAppConfOperations();
+    Component component = providerRole.component;
-    launcher.setDockerImage(appConf.getComponentOpt(roleGroup, DOCKER_IMAGE,
-        null));
-    launcher.setDockerNetwork(appConf.getComponentOpt(roleGroup, DOCKER_NETWORK,
-        DEFAULT_DOCKER_NETWORK));
-    launcher.setRunPrivilegedContainer(appConf.getComponentOptBool(roleGroup,
-        DOCKER_USE_PRIVILEGED, DEFAULT_DOCKER_USE_PRIVILEGED));
+    launcher.setDockerImage(component.getArtifact().getId());
+    launcher.setDockerNetwork(component.getConfiguration()
+        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));
+    launcher.setRunPrivilegedContainer(component.getRunPrivilegedContainer());
-    // Set the environment
-    Map<String, String> standardTokens = providerUtils.getStandardTokenMap(
-        getAmState().getAppConfSnapshot(), getAmState().getInternalsSnapshot(),
-        roleName, roleGroup, container.getId().toString(), getClusterName());
-    Map<String, String> replaceTokens = providerUtils.filterSiteOptions(
-            appConf.getComponent(roleGroup).options, standardTokens);
-    replaceTokens.putAll(standardTokens);
-    launcher.putEnv(SliderUtils.buildEnvMap(appComponent, replaceTokens));
+    // Generate tokens (key-value pair) for config substitution.
+    Map<String, String> standardTokens = providerUtils
+        .getStandardTokenMap(application.getConfiguration(),
+            component.getConfiguration(), roleName, roleGroup,
+            container.getId().toString(), application.getName());
+    Map<String, String> tokensForSubstitution = providerUtils.substituteConfigs(
+            component.getConfiguration().getProperties(), standardTokens);
-    String workDir = ApplicationConstants.Environment.PWD.$();
-    launcher.setEnv("WORK_DIR", workDir);
-    log.info("WORK_DIR set to {}", workDir);
-    String logDir = ApplicationConstants.LOG_DIR_EXPANSION_VAR;
-    launcher.setEnv("LOG_DIR", logDir);
-    log.info("LOG_DIR set to {}", logDir);
+    tokensForSubstitution.putAll(standardTokens);
+
+    // Set the environment variables
+    launcher.putEnv(SliderUtils
+        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));
+    launcher.setEnv("WORK_DIR", ApplicationConstants.Environment.PWD.$());
+    launcher.setEnv("LOG_DIR", ApplicationConstants.LOG_DIR_EXPANSION_VAR);
-    //add english env
-    //local resources
-    providerUtils.localizePackages(launcher, fileSystem, appConf, roleGroup,
-        getClusterName());
+    for (Entry<String, String> entry : launcher.getEnv().entrySet()) {
+      tokensForSubstitution.put("${" + entry.getKey() + "}", entry.getValue());
+    }
+
+    providerUtils.addRoleHostTokens(tokensForSubstitution, amState);
+
+    log.info("Token for substitution: " + tokensForSubstitution);
-      providerUtils.localizeServiceKeytabs(launcher, instanceDefinition,
-          fileSystem, getClusterName());
+      //TODO localize key tabs, WHY is this code needed ? WHY DOES CONTAINER REQUIRE AM KEYTAB??
+      providerUtils.localizeServiceKeytabs(launcher, fileSystem, application);
-    if (appComponent.getOptionBool(AM_CONFIG_GENERATION, false)) {
-      // build and localize configuration files
-      Map<String, Map<String, String>> configurations =
-          providerUtils.buildConfigurations(
-              instanceDefinition.getAppConfOperations(),
-              instanceDefinition.getInternalOperations(),
-              container.getId().toString(), getClusterName(),
-              roleName, roleGroup, getAmState());
-      providerUtils.localizeConfigFiles(launcher, roleName, roleGroup,
-          appConf, configurations, launcher.getEnv(), fileSystem,
-          getClusterName());
-    }
-
-    //add the configuration resources
-    launcher.addLocalResources(fileSystem.submitDirectory(
-        generatedConfPath,
-        PROPAGATED_CONF_DIR_NAME));
+    // create config file on hdfs and add local resource
+    providerUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,
+        component, tokensForSubstitution, amState);
-    operation.add(appConf.getComponentOpt(roleGroup, DOCKER_START_COMMAND,
-        "/bin/bash"));
-
+    operation.add(component.getLaunchCommand());
-
-    // Additional files to localize
-    String appResourcesString = instanceDefinition.getAppConfOperations()
-        .getGlobalOptions().getOption(APP_RESOURCES, null);
-    log.info("Configuration value for extra resources to localize: {}", appResourcesString);
-    if (null != appResourcesString) {
-      try (Scanner scanner = new Scanner(appResourcesString).useDelimiter(",")) {
-        while (scanner.hasNext()) {
-          String resource = scanner.next();
-          Path resourcePath = new Path(resource);
-          LocalResource extraResource = fileSystem.createAmResource(
-              fileSystem.getFileSystem().resolvePath(resourcePath),
-              LocalResourceType.FILE);
-          String destination = APP_RESOURCES_DIR + "/" + resourcePath.getName();
-          log.info("Localizing {} to {}", resourcePath, destination);
-          // TODO Can we try harder to avoid collisions?
-          launcher.addLocalResource(destination, extraResource);
-        }
-      }
-    }
+    // publish exports
+    // TODO move this to app level, no need to do this for every container launch
+    providerUtils
+        .substituteConfigs(application.getQuicklinks(), tokensForSubstitution);
+    PublishedConfiguration pubconf = new PublishedConfiguration(QUICK_LINKS,
+        application.getQuicklinks().entrySet());
+    amState.getPublishedSliderConfigurations().put(QUICK_LINKS, pubconf);
-  @Override
-  public void initializeApplicationConfiguration(
-      AggregateConf instanceDefinition, SliderFileSystem fileSystem,
-      String roleGroup)
-      throws IOException, SliderException {
-        this.fileSystem = fileSystem;
-  }
-
-  @Override
-  public void applyInitialRegistryDefinitions(URL amWebURI,
-      ServiceRecord serviceRecord)
-      throws IOException {
-    super.applyInitialRegistryDefinitions(amWebURI, serviceRecord);
-
-    // identify client component
-    String clientName = null;
-    ConfTreeOperations appConf = getAmState().getAppConfSnapshot();
-    for (String component : appConf.getComponentNames()) {
-      if (COMPONENT_TYPE_CLIENT.equals(appConf.getComponentOpt(component,
-          COMPONENT_TYPE_KEY, null))) {
-        clientName = component;
-        break;
-      }
-    }
-    if (clientName == null) {
-      log.info("No client component specified, not publishing client configs");
-      return;
-    }
-
-    // register AM-generated client configs
-    // appConf should already be resolved!
-    MapOperations clientOperations = appConf.getComponent(clientName);
-    if (!clientOperations.getOptionBool(AM_CONFIG_GENERATION, false)) {
-      log.info("AM config generation is false, not publishing client configs");
-      return;
-    }
-
-    // build and localize configuration files
-    Map<String, Map<String, String>> configurations =
-        providerUtils.buildConfigurations(appConf, getAmState()
-            .getInternalsSnapshot(), null, getClusterName(), clientName,
-            clientName, getAmState());
-
-    for (Map.Entry<String, Map<String, String>>  entry : configurations.entrySet()) {
-      String configFileDN = entry.getKey();
-      String configFileName = appConf.getComponentOpt(clientName,
-          OptionKeys.CONF_FILE_PREFIX + configFileDN + OptionKeys
-              .NAME_SUFFIX, null);
-      String configFileType = appConf.getComponentOpt(clientName,
-          OptionKeys.CONF_FILE_PREFIX + configFileDN + OptionKeys
-              .TYPE_SUFFIX, null);
-      if (configFileName == null || configFileType == null) {
-        continue;
-      }
-      ConfigFormat configFormat = ConfigFormat.resolve(configFileType);
-
-      Map<String, String> config = entry.getValue();
-      ConfigUtils.prepConfigForTemplateOutputter(configFormat, config,
-          fileSystem, getClusterName(),
-          new File(configFileName).getName());
-      providerUtils.publishApplicationInstanceData(configFileDN, configFileDN,
-          config.entrySet(), getAmState());
-    }
-  }
-
-  @Override
-  public void notifyContainerCompleted(ContainerId containerId) {
-    if (containerId != null) {
-      String containerIdStr = containerId.toString();
-      log.info("Removing container exports for {}", containerIdStr);
-      for (Set<ExportEntry> exportEntries : exportMap.values()) {
-        for (Iterator<ExportEntry> iter = exportEntries.iterator();
-            iter.hasNext();) {
-          ExportEntry entry = iter.next();
-          if (containerIdStr.equals(entry.getContainerId())) {
-            iter.remove();
-          }
-        }
-      }
-    }
-  }
-
-  @Override
-    RoleInstance instance = getAmState().getOwnedContainer(containerId);
+    RoleInstance instance = amState.getOwnedContainer(containerId);
-    String roleName = instance.role;
-    String roleGroup = instance.group;
-    String containerIdStr = containerId.toString();
-
-    providerUtils.updateServiceRecord(getAmState(), yarnRegistry,
-        containerIdStr, roleName, status.getIPs(), status.getHost());
-
-    publishExportGroups(containerIdStr, roleName, roleGroup,
-        status.getHost(), status.getIPs());
+    providerUtils.updateServiceRecord(amState, yarnRegistry,
+        containerId.toString(), instance.role, status.getIPs(), status.getHost());
+    // TODO publish ip and host
+    org.apache.slider.api.resource.Container container =
+        instance.providerRole.component.getContainer(containerId.toString());
+    if (container != null) {
+      container.setIp(StringUtils.join(",", status.getIPs()));
+      container.setHostname(status.getHost());
+      container.setState(ContainerState.READY);
+    } else {
+      log.warn(containerId + " not found in Application!");
+    }
-
-  /**
-   * This method looks for configuration properties of the form
-   * export.key,value and publishes the key,value pair. Standard tokens are
-   * substituted into the value, and COMPONENTNAME_HOST and THIS_HOST tokens
-   * are substituted with the actual hostnames of the containers.
-   */
-  protected void publishExportGroups(String containerId,
-      String roleName, String roleGroup, String thisHost, List<String> ips) {
-    ConfTreeOperations appConf = getAmState().getAppConfSnapshot();
-    ConfTreeOperations internalsConf = getAmState().getInternalsSnapshot();
-
-    Map<String, String> exports = providerUtils.getExports(
-        getAmState().getAppConfSnapshot(), roleGroup);
-
-    // publish export groups if any
-    Map<String, String> standardTokens = providerUtils.getStandardTokenMap(
-        appConf, internalsConf, roleName, roleGroup, containerId,
-        getClusterName());
-    Map<String, String> replaceTokens = providerUtils.filterSiteOptions(
-            appConf.getComponent(roleGroup).options, standardTokens);
-    replaceTokens.putAll(standardTokens);
-
-    String roleNameKey = providerUtils.getNameKey(roleName, roleGroup,
-        appConf);
-    String roleNameIPKey = null;
-    if (roleNameKey != null) {
-      replaceTokens.put(String.format(HOST_KEY_FORMAT, roleNameKey), thisHost);
-      roleNameIPKey = Pattern.quote(String.format(IP_KEY_FORMAT, roleNameKey));
-    } else {
-      // should not happen, but log if it does
-      log.info("Not replacing HOST or IP tokens because key was null for {}",
-          roleName);
-    }
-    String roleGroupKey = providerUtils.getGroupKey(roleGroup, appConf);
-    String roleGroupIPKey = null;
-    if (roleGroupKey != null) {
-      if (roleNameKey == null || !roleGroupKey.equals(roleNameKey)) {
-        replaceTokens.put(String.format(HOST_KEY_FORMAT, roleGroupKey),
-            thisHost);
-        roleGroupIPKey = Pattern.quote(String.format(IP_KEY_FORMAT,
-            roleGroupKey));
-      }
-    } else {
-      // should not happen, but log if it does
-      log.info("Not replacing HOST or IP tokens because key was null for {}",
-          roleGroup);
-    }
-    replaceTokens.put("${THIS_HOST}", thisHost);
-
-    for (Entry<String, String> export : exports.entrySet()) {
-      String value = export.getValue();
-      // replace host names and site properties
-      for (Map.Entry<String, String>  entry : replaceTokens.entrySet()) {
-        String token = entry.getKey();
-        if (value.contains(token)) {
-          value = value.replaceAll(Pattern.quote(token), entry.getValue());
-        }
-      }
-      Set<String> values = new HashSet<>();
-      for (String ip : ips) {
-        values.add(substituteIP(roleNameIPKey, roleGroupIPKey, ip, value));
-      }
-      for (String exportValue : values) {
-        if (exportValue.contains(VARIABLE_INDICATOR)) {
-          // not all variables have been substituted, so do not export
-          continue;
-        }
-        ExportEntry entry = new ExportEntry();
-        entry.setContainerId(containerId);
-        entry.setLevel(APPLICATION_TAG);
-        entry.setValue(exportValue);
-        entry.setUpdatedTime(new Date().toString());
-        Set<ExportEntry> exportEntries = getExportEntries(export.getKey());
-        exportEntries.add(entry);
-        log.info("Preparing to publish for {}. Key {} and Value {}",
-            roleName, export.getKey(), entry);
-      }
-    }
-    if (!exportMap.isEmpty()) {
-      providerUtils.publishExportGroup(exportMap, getAmState(), EXPORT_GROUP);
-    }
-  }
-
-  protected String substituteIP(String roleNameIPKey, String roleGroupIPKey,
-      String ip, String value) {
-    if (roleNameIPKey != null) {
-      value = value.replaceAll(roleNameIPKey, ip);
-    }
-    if (roleGroupIPKey != null) {
-      value = value.replaceAll(roleGroupIPKey, ip);
-    }
-    return value;
-  }
-
-  protected Set<ExportEntry> getExportEntries(String key) {
-    if (!this.exportMap.containsKey(key)) {
-      synchronized (this.exportMap) {
-        if (!this.exportMap.containsKey(key)) {
-          this.exportMap.put(key, Collections.newSetFromMap(
-              new ConcurrentHashMap<>()));
-        }
-      }
-    }
-
-    return this.exportMap.get(key);
-  }
-
-  @Override
-  public Map<String, MonitorDetail> buildMonitorDetails(ClusterDescription clusterDesc) {
-    Map<String, MonitorDetail> details = super.buildMonitorDetails(clusterDesc);
-    buildRoleHostDetails(details);
-    return details;
-  }
-
-  private void buildRoleHostDetails(Map<String, MonitorDetail> details) {
-    for (Map.Entry<String, Map<String, ClusterNode>> entry :
-        getAmState().getRoleClusterNodeMapping().entrySet()) {
-      details.put(entry.getKey() + " Host(s)/Container(s)",
-          new MonitorDetail(providerUtils.getHostsList(
-              entry.getValue().values(), false).toString(), false));
-    }
-  }

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 INS31 INS31 UPD42 UPD42 UPD83 UPD43 UPD83 UPD43 MOV78 INS39 INS42 INS44 MOV78 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 MOV43 INS8 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS42 INS21 UPD43 UPD42 MOV21 UPD43 UPD42 MOV60 MOV60 MOV60 MOV21 MOV21 MOV21 MOV21 MOV60 MOV60 MOV21 MOV21 MOV21 MOV21 MOV25 MOV21 MOV21 MOV21 INS70 MOV21 MOV21 MOV25 MOV21 MOV60 MOV21 MOV21 MOV21 MOV21 INS60 MOV21 INS21 MOV60 INS25 UPD42 MOV42 INS7 UPD42 UPD42 UPD43 MOV74 MOV74 MOV44 INS32 INS8 MOV32 INS43 INS59 INS32 UPD43 INS27 INS8 INS8 INS22 INS42 INS22 INS42 UPD42 UPD42 INS40 UPD42 UPD42 MOV32 INS40 UPD42 MOV32 UPD42 MOV42 INS21 UPD42 UPD42 UPD42 MOV42 INS27 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS14 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV32 INS40 MOV32 MOV32 INS40 UPD42 INS32 INS42 INS33 INS21 INS21 INS21 MOV21 INS52 INS42 INS52 INS42 INS32 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 INS32 INS32 UPD42 INS32 INS45 INS42 UPD42 UPD42 UPD42 UPD42 INS43 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 MOV32 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 INS42 UPD42 INS32 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS27 MOV32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 INS42 INS42 INS32 INS42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 UPD42 INS27 UPD42 MOV42 UPD42 MOV42 INS45 MOV32 UPD45 MOV45 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS45 MOV32 INS42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL33 DEL33 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL41 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL33 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL45 DEL42 DEL42 DEL33 DEL27 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL32 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL9 DEL32 DEL42 DEL32 DEL9 DEL14 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL33 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL45 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL54 DEL8 DEL25 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL48 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL32 DEL42 DEL42 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL9 DEL32 DEL38 DEL42 DEL42 DEL45 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL40 DEL27 DEL33 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL40 DEL27 DEL33 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31 DEL42 DEL78 DEL32 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL32 DEL42 DEL32 DEL21 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL14 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL38 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL38 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL74 DEL14 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL48 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL32 DEL8 DEL70 DEL8 DEL31