HDFS-8540.  Mover should exit with NO_MOVE_BLOCK if no block can be moved.  Contributed by surendra singh lilhore

-import org.apache.hadoop.fs.BlockStoragePolicySpi;
-      boolean hasRemaining = new Processor().processNamespace();
-      return hasRemaining ? ExitStatus.IN_PROGRESS : ExitStatus.SUCCESS;
+      return new Processor().processNamespace().getExitStatus();
-    private boolean processNamespace() throws IOException {
+    private Result processNamespace() throws IOException {
-      boolean hasRemaining = false;
+      Result result = new Result();
-        hasRemaining |= processPath(target.toUri().getPath());
+        processPath(target.toUri().getPath(), result);
-      hasRemaining |= hasFailed;
-      return hasRemaining;
+      result.updateHasRemaining(hasFailed);
+      return result;
-    private boolean processPath(String fullPath) {
-      boolean hasRemaining = false;
+    private void processPath(String fullPath, Result result) {
-          return hasRemaining;
+          return;
-          return hasRemaining;
+          return;
-          hasRemaining |= processRecursively(fullPath, child);
+          processRecursively(fullPath, child, result);
-          return hasRemaining;
+          return;
-    private boolean processRecursively(String parent, HdfsFileStatus status) {
+    private void processRecursively(String parent, HdfsFileStatus status,
+        Result result) {
-      boolean hasRemaining = false;
-        hasRemaining = processPath(fullPath);
+        processPath(fullPath, result);
-          hasRemaining |= processPath(dirSnapshot);
+          processPath(dirSnapshot, result);
-            hasRemaining = processFile(fullPath, (HdfsLocatedFileStatus)status);
+            processFile(fullPath, (HdfsLocatedFileStatus) status, result);
-          return false;
-      return hasRemaining;
-    private boolean processFile(String fullPath, HdfsLocatedFileStatus status) {
+    private void processFile(String fullPath, HdfsLocatedFileStatus status,
+        Result result) {
-        return false;
+        return;
-        return false;
+        return;
-      boolean hasRemaining = false;
-      for(int i = 0; i < lbs.size(); i++) {
+      for (int i = 0; i < lbs.size(); i++) {
-            hasRemaining |= (diff.existing.size() > 1 &&
-                diff.expected.size() > 1);
+            result.updateHasRemaining(diff.existing.size() > 1
+                && diff.expected.size() > 1);
+            // One block scheduled successfully, set noBlockMoved to false
+            result.setNoBlockMoved(false);
+          } else {
+            result.updateHasRemaining(true);
-      return hasRemaining;
+  private static class Result {
+
+    private boolean hasRemaining;
+    private boolean noBlockMoved;
+
+    Result() {
+      hasRemaining = false;
+      noBlockMoved = true;
+    }
+
+    boolean isHasRemaining() {
+      return hasRemaining;
+    }
+
+    boolean isNoBlockMoved() {
+      return noBlockMoved;
+    }
+
+    void updateHasRemaining(boolean hasRemaining) {
+      this.hasRemaining |= hasRemaining;
+    }
+
+    void setNoBlockMoved(boolean noBlockMoved) {
+      this.noBlockMoved = noBlockMoved;
+    }
+
+    /**
+     * @return SUCCESS if all moves are success and there is no remaining move.
+     *         Return NO_MOVE_BLOCK if there moves available but all the moves
+     *         cannot be scheduled. Otherwise, return IN_PROGRESS since there
+     *         must be some remaining moves.
+     */
+    ExitStatus getExitStatus() {
+      return !isHasRemaining() ? ExitStatus.SUCCESS
+          : isNoBlockMoved() ? ExitStatus.NO_MOVE_BLOCK
+              : ExitStatus.IN_PROGRESS;
+    }
+
+  }

MOV26 INS55 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS43 UPD39 INS44 UPD39 INS44 UPD39 INS44 INS83 INS39 INS59 INS83 INS39 INS59 INS42 INS8 INS39 INS42 MOV8 INS39 INS42 INS8 INS39 INS42 INS44 INS8 INS39 INS42 INS44 INS8 INS29 INS43 INS42 INS8 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS21 INS41 INS39 INS42 INS21 INS39 INS42 INS21 INS65 INS42 INS41 INS43 INS32 UPD42 INS42 INS42 INS42 INS7 INS7 INS42 INS7 INS7 INS66 INS66 INS66 INS66 INS16 INS32 INS42 UPD42 INS14 INS42 INS42 INS42 INS42 INS9 INS42 INS9 INS22 INS42 INS22 INS42 INS38 INS40 INS16 MOV32 INS42 INS43 MOV32 INS8 INS32 INS52 INS42 INS52 INS42 INS32 INS32 INS40 INS40 INS42 INS42 INS41 MOV42 MOV42 INS42 INS42 INS42 INS32 INS32 INS8 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 INS42 INS21 INS21 INS32 INS32 INS32 MOV32 INS42 INS42 MOV27 INS42 INS42 INS9 INS42 INS42 INS9 INS42 DEL40 DEL26 DEL39 DEL42 DEL59 DEL60 DEL42 DEL40 DEL40 DEL16 DEL39 DEL39 DEL9 DEL42 DEL7 DEL42 DEL42 DEL7 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL32 DEL7 DEL42 DEL32 DEL7 DEL42 DEL7 DEL9 DEL41 DEL42 DEL41 DEL9 DEL9 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL36 DEL7 DEL42 DEL41