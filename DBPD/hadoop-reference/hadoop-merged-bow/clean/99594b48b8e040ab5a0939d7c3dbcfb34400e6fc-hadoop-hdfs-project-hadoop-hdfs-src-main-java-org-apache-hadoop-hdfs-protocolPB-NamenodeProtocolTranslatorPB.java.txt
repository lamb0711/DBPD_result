HDFS-13075. [SPS]: Provide External Context implementation. Contributed by Uma Maheswara Rao G.

+import org.apache.hadoop.fs.StorageType;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.CheckDNSpaceRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetFilePathRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetNextSPSPathIdRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.GetNextSPSPathIdResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.NamenodeProtocolProtos.HasLowRedundancyBlocksRequestProto;
+
+  @Override
+  public Long getNextSPSPathId() throws IOException {
+    GetNextSPSPathIdRequestProto req =
+        GetNextSPSPathIdRequestProto.newBuilder().build();
+    try {
+      GetNextSPSPathIdResponseProto nextSPSPathId =
+          rpcProxy.getNextSPSPathId(NULL_CONTROLLER, req);
+      return nextSPSPathId.hasFileId() ? nextSPSPathId.getFileId() : null;
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+  @Override
+  public String getFilePath(Long inodeId) throws IOException {
+    GetFilePathRequestProto req =
+        GetFilePathRequestProto.newBuilder().setFileId(inodeId).build();
+    try {
+      return rpcProxy.getFilePath(NULL_CONTROLLER, req).getSrcPath();
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+  @Override
+  public boolean checkDNSpaceForScheduling(DatanodeInfo dn, StorageType type,
+      long estimatedSize) throws IOException {
+    CheckDNSpaceRequestProto req = CheckDNSpaceRequestProto.newBuilder()
+        .setDnInfo(PBHelperClient.convert(dn))
+        .setStorageType(PBHelperClient.convertStorageType(type))
+        .setEstimatedSize(estimatedSize).build();
+    try {
+      return rpcProxy.checkDNSpaceForScheduling(NULL_CONTROLLER, req)
+          .getIsGoodDatanodeWithSpace();
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+  @Override
+  public boolean hasLowRedundancyBlocks(long inodeId) throws IOException {
+    HasLowRedundancyBlocksRequestProto req = HasLowRedundancyBlocksRequestProto
+        .newBuilder().setInodeId(inodeId).build();
+    try {
+      return rpcProxy.hasLowRedundancyBlocks(NULL_CONTROLLER, req)
+          .getHasLowRedundancyBlocks();
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS42 INS60 INS54 INS42 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS54 INS42 INS39 INS42 INS42 INS60 INS54 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS8 INS12 INS42 INS42 INS43 INS59 INS8 INS12 INS43 INS59 INS8 INS12 INS42 INS42 INS32 INS60 INS41 INS44 INS8 INS42 INS42 INS32 INS41 INS44 INS8 INS42 INS42 INS32 INS41 INS44 INS8 INS42 INS42 INS32 INS41 INS44 INS8 INS32 INS42 INS43 INS59 INS16 INS43 INS42 INS53 INS32 INS42 INS32 INS43 INS42 INS53 INS32 INS42 INS32 INS43 INS42 INS53 INS32 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS33 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42