YARN-1897. CLI and core support for signal container functionality. Contributed by Ming Ma

+import org.apache.hadoop.yarn.api.records.SignalContainerCommand;
+   * Send a signal to the container.
+   *
+   *
+   * @throws IOException
+   */
+  @SuppressWarnings("unchecked") // dispatcher not typed
+  public void signalContainer(SignalContainerCommand command)
+      throws IOException {
+    ContainerId containerId =
+        container.getContainerTokenIdentifier().getContainerID();
+    String containerIdStr = ConverterUtils.toString(containerId);
+    String user = container.getUser();
+    Signal signal = translateCommandToSignal(command);
+    if (signal.equals(Signal.NULL)) {
+      LOG.info("ignore signal command " + command);
+      return;
+    }
+
+    LOG.info("Sending signal " + command + " to container " + containerIdStr);
+
+    boolean alreadyLaunched = !shouldLaunchContainer.compareAndSet(false, true);
+    if (!alreadyLaunched) {
+      LOG.info("Container " + containerIdStr + " not launched."
+          + " Not sending the signal");
+      return;
+    }
+
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Getting pid for container " + containerIdStr
+          + " to send signal to from pid file "
+          + (pidFilePath != null ? pidFilePath.toString() : "null"));
+    }
+
+    try {
+      // get process id from pid file if available
+      // else if shell is still active, get it from the shell
+      String processId = null;
+      if (pidFilePath != null) {
+        processId = getContainerPid(pidFilePath);
+      }
+
+      if (processId != null) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Sending signal to pid " + processId
+              + " as user " + user
+              + " for container " + containerIdStr);
+        }
+
+        boolean result = exec.signalContainer(
+            new ContainerSignalContext.Builder()
+                .setContainer(container)
+                .setUser(user)
+                .setPid(processId)
+                .setSignal(signal)
+                .build());
+
+        String diagnostics = "Sent signal " + command
+            + " (" + signal + ") to pid " + processId
+            + " as user " + user
+            + " for container " + containerIdStr
+            + ", result=" + (result ? "success" : "failed");
+        LOG.info(diagnostics);
+
+        dispatcher.getEventHandler().handle(
+            new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));
+      }
+    } catch (Exception e) {
+      String message =
+          "Exception when sending signal to container " + containerIdStr
+              + ": " + StringUtils.stringifyException(e);
+      LOG.warn(message);
+    }
+  }
+
+  @VisibleForTesting
+  public static Signal translateCommandToSignal(
+      SignalContainerCommand command) {
+    Signal signal = Signal.NULL;
+    switch (command) {
+      case OUTPUT_THREAD_DUMP:
+        // TODO for windows support.
+        signal = Shell.WINDOWS ? Signal.NULL: Signal.QUIT;
+        break;
+      case GRACEFUL_SHUTDOWN:
+        signal = Signal.TERM;
+        break;
+      case FORCEFUL_SHUTDOWN:
+        signal = Signal.KILL;
+        break;
+    }
+    return signal;
+  }
+
+  /**

INS26 INS40 INS31 INS31 INS29 INS79 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS42 INS45 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS21 INS60 INS25 INS25 INS54 INS42 INS42 INS43 INS42 INS60 INS50 INS41 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS39 INS59 INS38 INS8 INS32 INS8 INS8 INS12 INS42 INS43 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS21 INS41 INS42 INS42 INS27 INS42 INS38 INS42 INS21 INS41 INS42 INS42 INS21 INS60 INS25 INS25 INS44 INS8 INS42 INS42 INS40 INS42 INS7 INS42 INS7 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS42 INS60 INS21 INS42 INS16 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS9 INS9 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS33 INS25 INS60 INS60 INS21 INS21 INS42 INS43 INS59 INS32 INS40 INS40 INS40 INS45 INS42 INS45 INS42 INS45 INS45 INS45 INS42 INS45 INS36 INS7 INS32 INS8 INS39 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS16 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS14 INS45 INS42 INS45 INS32 INS27 INS32 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS36 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS16 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS43 INS40