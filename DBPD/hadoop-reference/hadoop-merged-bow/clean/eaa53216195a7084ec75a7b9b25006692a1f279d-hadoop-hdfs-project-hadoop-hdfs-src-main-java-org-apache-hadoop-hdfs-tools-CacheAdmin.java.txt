Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1553226 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo.Expiration;
-import org.apache.hadoop.hdfs.server.namenode.CachePool;
-import org.apache.hadoop.ipc.RemoteException;
-import org.apache.hadoop.security.UserGroupInformation;
+  /**
+   * Parses a time-to-live value from a string
+   * @return The ttl in milliseconds
+   * @throws IOException if it could not be parsed
+   */
+  private static Long parseTtlString(String maxTtlString) throws IOException {
+    Long maxTtl = null;
+    if (maxTtlString != null) {
+      if (maxTtlString.equalsIgnoreCase("never")) {
+        maxTtl = CachePoolInfo.RELATIVE_EXPIRY_NEVER;
+      } else {
+        maxTtl = DFSUtil.parseRelativeTime(maxTtlString);
+      }
+    }
+    return maxTtl;
+  }
+
-          "valid. Can be specified in minutes, hours, and days via e.g. " +
+          "valid. Can be specified in minutes, hours, and days, e.g. " +
-          "valid. Can be specified in minutes, hours, and days via e.g. " +
+          "valid. Can be specified in minutes, hours, and days, e.g. " +
-      DistributedFileSystem dfs = getDFS(conf);
-      RemoteIterator<CacheDirectiveEntry> iter =
-          dfs.listCacheDirectives(
-              new CacheDirectiveInfo.Builder().
-                  setPath(new Path(path)).build());
-      while (iter.hasNext()) {
-        CacheDirectiveEntry entry = iter.next();
-        try {
-          dfs.removeCacheDirective(entry.getInfo().getId());
-          System.out.println("Removed cache directive " +
-              entry.getInfo().getId());
-        } catch (IOException e) {
-          System.err.println(prettifyException(e));
-          exitCode = 2;
+      try {
+        DistributedFileSystem dfs = getDFS(conf);
+        RemoteIterator<CacheDirectiveEntry> iter =
+            dfs.listCacheDirectives(
+                new CacheDirectiveInfo.Builder().
+                    setPath(new Path(path)).build());
+        while (iter.hasNext()) {
+          CacheDirectiveEntry entry = iter.next();
+          try {
+            dfs.removeCacheDirective(entry.getInfo().getId());
+            System.out.println("Removed cache directive " +
+                entry.getInfo().getId());
+          } catch (IOException e) {
+            System.err.println(prettifyException(e));
+            exitCode = 2;
+          }
+      } catch (IOException e) {
+        System.err.println(prettifyException(e));
+        exitCode = 2;
-
-      DistributedFileSystem dfs = getDFS(conf);
-      RemoteIterator<CacheDirectiveEntry> iter =
-          dfs.listCacheDirectives(builder.build());
-      int numEntries = 0;
-      while (iter.hasNext()) {
-        CacheDirectiveEntry entry = iter.next();
-        CacheDirectiveInfo directive = entry.getInfo();
-        CacheDirectiveStats stats = entry.getStats();
-        List<String> row = new LinkedList<String>();
-        row.add("" + directive.getId());
-        row.add(directive.getPool());
-        row.add("" + directive.getReplication());
-        String expiry;
-        if (directive.getExpiration().getMillis() ==
-            CacheDirectiveInfo.Expiration.EXPIRY_NEVER) {
-          expiry = "never";
-        } else {
-          expiry = directive.getExpiration().toString();
+      try {
+        DistributedFileSystem dfs = getDFS(conf);
+        RemoteIterator<CacheDirectiveEntry> iter =
+            dfs.listCacheDirectives(builder.build());
+        int numEntries = 0;
+        while (iter.hasNext()) {
+          CacheDirectiveEntry entry = iter.next();
+          CacheDirectiveInfo directive = entry.getInfo();
+          CacheDirectiveStats stats = entry.getStats();
+          List<String> row = new LinkedList<String>();
+          row.add("" + directive.getId());
+          row.add(directive.getPool());
+          row.add("" + directive.getReplication());
+          String expiry;
+          // This is effectively never, round for nice printing
+          if (directive.getExpiration().getMillis() >
+              Expiration.MAX_RELATIVE_EXPIRY_MS / 2) {
+            expiry = "never";
+          } else {
+            expiry = directive.getExpiration().toString();
+          }
+          row.add(expiry);
+          row.add(directive.getPath().toUri().getPath());
+          if (printStats) {
+            row.add("" + stats.getBytesNeeded());
+            row.add("" + stats.getBytesCached());
+            row.add("" + stats.getFilesNeeded());
+            row.add("" + stats.getFilesCached());
+          }
+          tableListing.addRow(row.toArray(new String[0]));
+          numEntries++;
-        row.add(expiry);
-        row.add(directive.getPath().toUri().getPath());
-        if (printStats) {
-          row.add("" + stats.getBytesNeeded());
-          row.add("" + stats.getBytesCached());
-          row.add("" + stats.getFilesNeeded());
-          row.add("" + stats.getFilesCached());
+        System.out.print(String.format("Found %d entr%s\n",
+            numEntries, numEntries == 1 ? "y" : "ies"));
+        if (numEntries > 0) {
+          System.out.print(tableListing);
-        tableListing.addRow(row.toArray(new String[0]));
-        numEntries++;
-      }
-      System.out.print(String.format("Found %d entr%s\n",
-          numEntries, numEntries == 1 ? "y" : "ies"));
-      if (numEntries > 0) {
-        System.out.print(tableListing);
+      } catch (IOException e) {
+        System.err.println(prettifyException(e));
+        return 2;
-          "[-group <group>] [-mode <mode>] [-limit <limit>]]\n";
+          "[-group <group>] [-mode <mode>] [-limit <limit>] " +
+          "[-maxttl <maxTtl>]\n";
-
+      listing.addRow("<maxTtl>", "The maximum allowed time-to-live for " +
+          "directives being added to the pool. This can be specified in " +
+          "seconds, minutes, hours, and days, e.g. 120s, 30m, 4h, 2d. " +
+          "Valid units are [smhd]. By default, no maximum is set. " +
+          "This can also be manually specified by \"never\".");
+      String maxTtlString = StringUtils.popOptionWithArgument("-maxTtl", args);
+      try {
+        Long maxTtl = parseTtlString(maxTtlString);
+        if (maxTtl != null) {
+          info.setMaxRelativeExpiryMs(maxTtl);
+        }
+      } catch (IOException e) {
+        System.err.println(
+            "Error while parsing maxTtl value: " + e.getMessage());
+        return 1;
+      }
+
-        throw new RemoteException(e.getClass().getName(), e.getMessage());
+        System.err.println(prettifyException(e));
+        return 2;
-          "[-group <group>] [-mode <mode>] [-limit <limit>]]\n";
+          "[-group <group>] [-mode <mode>] [-limit <limit>] " +
+          "[-maxTtl <maxTtl>]]\n";
+      listing.addRow("<maxTtl>", "The maximum allowed time-to-live for " +
+          "directives being added to the pool.");
+      String maxTtlString = StringUtils.popOptionWithArgument("-maxTtl", args);
+      Long maxTtl = null;
+      try {
+        maxTtl = parseTtlString(maxTtlString);
+      } catch (IOException e) {
+        System.err.println(
+            "Error while parsing maxTtl value: " + e.getMessage());
+        return 1;
+      }
+      if (maxTtl != null) {
+        info.setMaxRelativeExpiryMs(maxTtl);
+        changed = true;
+      }
-        throw new RemoteException(e.getClass().getName(), e.getMessage());
+        System.err.println(prettifyException(e));
+        return 2;
+      if (maxTtl != null) {
+        System.out.print(prefix + "max time-to-live " + maxTtlString);
+      }
-        throw new RemoteException(e.getClass().getName(), e.getMessage());
+        System.err.println(prettifyException(e));
+        return 2;
-          addField("LIMIT", Justification.RIGHT);
+          addField("LIMIT", Justification.RIGHT).
+          addField("MAXTTL", Justification.RIGHT);
-            if (limit != null && limit.equals(CachePool.DEFAULT_LIMIT)) {
+            if (limit != null && limit.equals(CachePoolInfo.LIMIT_UNLIMITED)) {
+            Long maxTtl = info.getMaxRelativeExpiryMs();
+            String maxTtlString = null;
+
+            if (maxTtl != null) {
+              if (maxTtl.longValue() == CachePoolInfo.RELATIVE_EXPIRY_NEVER) {
+                maxTtlString  = "never";
+              } else {
+                maxTtlString = DFSUtil.durationToString(maxTtl);
+              }
+            }
+            row.add(maxTtlString);
-        throw new RemoteException(e.getClass().getName(), e.getMessage());
+        System.err.println(prettifyException(e));
+        return 2;

MOV26 UPD40 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS42 INS54 INS54 INS21 INS60 INS54 INS21 INS60 INS60 INS54 INS25 INS25 INS42 INS42 INS33 INS42 INS33 INS25 INS8 INS12 INS8 INS12 INS32 INS43 INS59 INS8 INS12 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS27 INS8 INS27 INS8 INS32 INS8 INS8 MOV60 MOV60 MOV61 INS44 INS8 MOV60 MOV60 MOV60 MOV61 MOV21 MOV25 INS44 INS8 UPD45 INS45 INS42 INS42 INS45 INS27 INS42 INS42 INS32 INS60 INS25 MOV44 INS8 INS44 INS8 UPD45 INS45 INS42 INS42 INS45 INS27 INS42 INS42 INS32 INS42 INS42 INS33 INS21 MOV44 INS8 INS42 INS33 INS21 INS21 INS44 INS8 INS42 INS33 INS21 INS32 INS42 INS42 INS45 INS21 INS21 UPD45 UPD45 INS43 INS42 INS21 INS21 INS43 INS42 INS21 INS41 INS45 INS45 INS45 INS45 INS45 INS42 INS42 INS45 INS42 INS43 INS59 INS27 INS8 INS21 INS41 INS43 INS42 INS21 INS41 INS45 INS45 INS42 INS42 INS45 INS42 INS7 INS21 INS41 INS32 INS7 INS43 INS42 INS21 INS41 INS32 INS21 INS41 MOV32 INS42 INS45 INS40 INS21 INS41 INS7 INS7 INS42 INS32 INS7 INS42 INS32 INS34 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS34 UPD42 MOV42 INS32 INS34 INS42 INS32 INS32 INS34 INS42 INS42 INS42 INS42 INS9 UPD42 MOV42 INS32 INS34 INS40 INS42 INS27 INS32 INS34 INS32 INS34 INS42 INS40 INS42 INS32 INS40 INS42 INS32 INS42 INS34 UPD27 INS40 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS27 INS40 UPD42 MOV42 INS32 INS42 INS42 INS40 INS42 INS27 INS40 UPD42 MOV42 INS32 INS42 INS45 INS42 INS40 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 MOV32 INS42 UPD42 MOV42 INS45 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS60 INS60 INS25 INS21 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 INS34 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS25 INS42 INS42 INS42 UPD40 INS42 INS42 INS27 INS8 INS8 INS32 INS40 INS21 INS21 INS42 INS42 INS7 INS7 INS42 INS45 INS42 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL43 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL43 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL14 DEL53 DEL42 DEL43 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL14 DEL53