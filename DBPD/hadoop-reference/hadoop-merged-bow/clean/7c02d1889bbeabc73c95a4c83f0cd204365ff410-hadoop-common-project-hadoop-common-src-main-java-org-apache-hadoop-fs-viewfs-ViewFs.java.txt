HDFS-15427. Merged ListStatus with Fallback target filesystem and InternalDirViewFS. Contributed by Uma Maheswara Rao G.


+import org.apache.hadoop.fs.FileContext;
-        return new InternalDirOfViewFs(dir, creationTime, ugi, getUri());
+        return new InternalDirOfViewFs(dir, creationTime, ugi, getUri(), this,
+            config);
+   * Note: listStatus considers listing from fallbackLink if available. If the
+   * same directory path is present in configured mount path as well as in
+   * fallback fs, then only the fallback path will be listed in the returned
+   * result except for link.
+   *
-    
+    private InodeTree<AbstractFileSystem> fsState;
+    private Configuration conf;
+
-        final long cTime, final UserGroupInformation ugi, final URI uri)
+        final long cTime, final UserGroupInformation ugi, final URI uri,
+        InodeTree fsState, Configuration conf)
+      this.fsState = fsState;
+      this.conf = conf;
-      FileStatus[] result = new FileStatus[theInternalDir.getChildren().size()];
+      Set<FileStatus> linkStatuses = new HashSet<>();
+      Set<FileStatus> internalDirStatuses = new HashSet<>();
-            result[i++] =
+            linkStatuses.add(
-                    ugi.getPrimaryGroupName(), link.getTargetLink(),
-                    path);
+                    ugi.getPrimaryGroupName(), link.getTargetLink(), path));
-            result[i++] = new FileStatus(status.getLen(), status.isDirectory(),
-                status.getReplication(), status.getBlockSize(),
-                status.getModificationTime(), status.getAccessTime(),
-                status.getPermission(), status.getOwner(), status.getGroup(),
-                null, path);
+            linkStatuses.add(
+                new FileStatus(status.getLen(), status.isDirectory(),
+                    status.getReplication(), status.getBlockSize(),
+                    status.getModificationTime(), status.getAccessTime(),
+                    status.getPermission(), status.getOwner(),
+                    status.getGroup(), null, path));
-          result[i++] =
+          internalDirStatuses.add(
-                  ugi.getGroupNames()[0], path);
+                  ugi.getPrimaryGroupName(), path));
+
+      FileStatus[] internalDirStatusesMergedWithFallBack = internalDirStatuses
+          .toArray(new FileStatus[internalDirStatuses.size()]);
-        return consolidateFileStatuses(fallbackStatuses, result);
-      } else {
-        return result;
+        internalDirStatusesMergedWithFallBack =
+            merge(fallbackStatuses, internalDirStatusesMergedWithFallBack);
+
+      // Links will always have precedence than internalDir or fallback paths.
+      return merge(linkStatuses.toArray(new FileStatus[linkStatuses.size()]),
+          internalDirStatusesMergedWithFallBack);
-    private FileStatus[] consolidateFileStatuses(FileStatus[] fallbackStatuses,
-        FileStatus[] mountPointStatuses) {
+    private FileStatus[] merge(FileStatus[] toStatuses,
+        FileStatus[] fromStatuses) {
-      for (FileStatus status : mountPointStatuses) {
+      for (FileStatus status : toStatuses) {
-      for (FileStatus status : fallbackStatuses) {
+      for (FileStatus status : fromStatuses) {
-      return result.toArray(new FileStatus[0]);
+      return result.toArray(new FileStatus[result.size()]);
-      if (theInternalDir.isRoot() &&
-          theInternalDir.getFallbackLink() != null) {
-        AbstractFileSystem linkedFs =
-            theInternalDir.getFallbackLink().getTargetFileSystem();
-        // Fallback link is only applicable for root
-        FileStatus[] statuses = linkedFs.listStatus(new Path("/"));
-        for (FileStatus status : statuses) {
-          // Fix the path back to viewfs scheme
-          status.setPath(
-              new Path(myUri.toString(), status.getPath().getName()));
+      if (fsState.getRootFallbackLink() != null) {
+        AbstractFileSystem linkedFallbackFs =
+            fsState.getRootFallbackLink().getTargetFileSystem();
+        Path p = Path.getPathWithoutSchemeAndAuthority(
+            new Path(theInternalDir.fullPath));
+        if (theInternalDir.isRoot() || FileContext
+            .getFileContext(linkedFallbackFs, conf).util().exists(p)) {
+          // Fallback link is only applicable for root
+          FileStatus[] statuses = linkedFallbackFs.listStatus(p);
+          for (FileStatus status : statuses) {
+            // Fix the path back to viewfs scheme
+            Path pathFromConfiguredFallbackRoot =
+                new Path(p, status.getPath().getName());
+            status.setPath(
+                new Path(myUri.toString(), pathFromConfiguredFallbackRoot));
+          }
+          return statuses;
-        return statuses;
-      } else {
-        return new FileStatus[0];
+      return new FileStatus[0];

INS26 INS40 INS23 INS23 INS83 INS74 INS59 INS83 INS43 INS59 INS44 INS44 UPD42 INS66 INS66 INS66 INS66 INS43 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS60 INS60 INS25 MOV41 MOV5 UPD42 MOV5 UPD42 INS25 MOV41 INS42 INS42 INS42 INS42 INS7 INS7 INS74 INS74 INS59 MOV5 INS59 MOV27 MOV8 INS32 UPD42 UPD42 INS27 INS8 INS22 INS42 INS22 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS32 INS21 INS42 INS32 INS42 INS32 INS33 INS60 INS60 MOV25 INS52 INS42 INS52 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS3 INS7 INS42 INS42 MOV3 INS5 INS32 INS42 INS42 MOV43 INS59 MOV43 INS59 INS27 INS43 INS43 MOV5 INS32 INS42 INS32 INS43 INS85 INS42 INS42 INS42 INS32 INS42 INS32 MOV32 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS40 INS32 INS42 INS60 INS52 INS42 INS32 INS32 MOV43 MOV34 MOV9 MOV34 MOV34 MOV42 MOV42 MOV42 MOV32 INS32 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 INS42 INS43 INS59 INS42 INS42 MOV14 INS42 INS42 MOV14 MOV42 UPD42 MOV42 INS42 INS42 MOV14 INS14 INS42 INS43 MOV32 INS42 INS42 DEL42 DEL42 DEL42 DEL37 DEL2 DEL7 DEL42 DEL42 DEL37 DEL2 DEL7 DEL42 DEL42 DEL37 DEL2 DEL32 DEL34 DEL2 DEL14 DEL7 DEL32 DEL41 DEL42 DEL32 DEL42 DEL8 DEL25 DEL34 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL45 DEL14 DEL8