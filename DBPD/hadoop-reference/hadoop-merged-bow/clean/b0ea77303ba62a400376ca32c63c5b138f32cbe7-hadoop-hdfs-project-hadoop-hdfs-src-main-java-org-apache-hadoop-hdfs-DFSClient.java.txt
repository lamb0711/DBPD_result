HADOOP-8240. Add a new API to allow users to specify a checksum type on FileSystem.create(..).  Contributed by Kihwal Lee


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374696 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.Options.ChecksumOpt;
-    final DataChecksum.Type checksumType;
-    final int bytesPerChecksum;
+    final ChecksumOpt defaultChecksumOpt;
-      checksumType = getChecksumType(conf);
-      bytesPerChecksum = conf.getInt(DFS_BYTES_PER_CHECKSUM_KEY,
-          DFS_BYTES_PER_CHECKSUM_DEFAULT);
+      defaultChecksumOpt = getChecksumOptFromConf(conf);
-    private DataChecksum createChecksum() {
-      return DataChecksum.newDataChecksum(
-          checksumType, bytesPerChecksum);
+    // Construct a checksum option from conf
+    private ChecksumOpt getChecksumOptFromConf(Configuration conf) {
+      DataChecksum.Type type = getChecksumType(conf);
+      int bytesPerChecksum = conf.getInt(DFS_BYTES_PER_CHECKSUM_KEY,
+          DFS_BYTES_PER_CHECKSUM_DEFAULT);
+      return new ChecksumOpt(type, bytesPerChecksum);
+    }
+
+    // create a DataChecksum with the default option.
+    private DataChecksum createChecksum() throws IOException {
+      return createChecksum(null);
+    }
+
+    private DataChecksum createChecksum(ChecksumOpt userOpt) 
+        throws IOException {
+      // Fill in any missing field with the default.
+      ChecksumOpt myOpt = ChecksumOpt.processChecksumOpt(
+          defaultChecksumOpt, userOpt);
+      DataChecksum dataChecksum = DataChecksum.newDataChecksum(
+          myOpt.getChecksumType(),
+          myOpt.getBytesPerChecksum());
+      if (dataChecksum == null) {
+        throw new IOException("Invalid checksum type specified: "
+            + myOpt.getChecksumType().name());
+      }
+      return dataChecksum;
-        buffersize);
+        buffersize, null);
-   * long, Progressable, int)} with <code>createParent</code> set to true.
+   * long, Progressable, int, ChecksumOpt)} with <code>createParent</code>
+   *  set to true.
-                             int buffersize)
+                             int buffersize,
+                             ChecksumOpt checksumOpt)
-        replication, blockSize, progress, buffersize);
+        replication, blockSize, progress, buffersize, checksumOpt);
+   * @param checksumOpts checksum options
-                             int buffersize)
-    throws IOException {
+                             int buffersize,
+                             ChecksumOpt checksumOpt) throws IOException {
-        buffersize, dfsClientConf.createChecksum());
+        buffersize, dfsClientConf.createChecksum(checksumOpt));
-                             int bytesPerChecksum)
+                             ChecksumOpt checksumOpt)
-      DataChecksum checksum = DataChecksum.newDataChecksum(
-          dfsClientConf.checksumType,
-          bytesPerChecksum);
+      DataChecksum checksum = dfsClientConf.createChecksum(checksumOpt);

INS26 INS40 INS31 INS31 INS44 INS44 INS43 INS83 INS43 INS42 INS44 INS8 INS83 MOV43 INS42 INS43 INS8 INS43 INS44 INS43 INS43 INS42 INS65 INS43 INS42 INS43 INS42 INS42 UPD42 INS42 INS43 INS42 INS60 INS60 INS41 INS42 INS41 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 UPD66 INS66 INS42 INS42 INS66 INS42 INS42 INS42 MOV43 INS59 INS39 INS59 INS14 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS33 INS42 UPD42 INS32 INS42 MOV32 MOV42 MOV32 INS43 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 INS32 INS32 INS14 INS43 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS43 INS27 INS42 UPD42 UPD42 UPD42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 DEL83 DEL39 DEL59 DEL23 DEL42 DEL7 DEL21 DEL32 DEL41 DEL39 DEL42 DEL40