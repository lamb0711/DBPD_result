Revert "Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem."

This reverts commit 7996eca7dcfaa1bdf970e32022274f2699bef8a1.

-import com.google.common.annotations.VisibleForTesting;
-
-public interface ReservationAllocation
-    extends Comparable<ReservationAllocation> {
+public interface ReservationAllocation extends
+    Comparable<ReservationAllocation> {
-  ReservationId getReservationId();
+  public ReservationId getReservationId();
-  ReservationDefinition getReservationDefinition();
+  public ReservationDefinition getReservationDefinition();
-  long getStartTime();
+  public long getStartTime();
-  long getEndTime();
+  public long getEndTime();
-  Map<ReservationInterval, Resource> getAllocationRequests();
+  public Map<ReservationInterval, Resource> getAllocationRequests();
-  String getPlanName();
+  public String getPlanName();
-  String getUser();
+  public String getUser();
-  boolean containsGangs();
+  public boolean containsGangs();
-  void setAcceptanceTimestamp(long acceptedAt);
+  public void setAcceptanceTimestamp(long acceptedAt);
-  long getAcceptanceTime();
+  public long getAcceptanceTime();
-  Resource getResourcesAtTime(long tick);
+  public Resource getResourcesAtTime(long tick);
-   *
-  RLESparseResourceAllocation getResourcesOverTime();
-
-
-  /**
-   * Return a RLE representation of used resources.
-   *
-   * @param start start of the time interval.
-   * @param end end of the time interval.
-   * @return a RLE encoding of resources allocated over time.
-   */
-  RLESparseResourceAllocation getResourcesOverTime(long start, long end);
-
-  /**
-   * Get the periodicity of this reservation representing the time period of the
-   * periodic job. Period is represented in milliseconds for periodic jobs.
-   * Period is 0 for non-periodic jobs.
-   *
-   * @return periodicity of this reservation
-   */
-  long getPeriodicity();
-
-  /**
-   * Set the periodicity of this reservation representing the time period of the
-   * periodic job. Period is represented in milliseconds for periodic jobs.
-   * Period is 0 for non-periodic jobs.
-   *
-   * @param period periodicity of this reservation
-   */
-  @VisibleForTesting
-  void setPeriodicity(long period);
+  public RLESparseResourceAllocation getResourcesOverTime();

INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 DEL40 DEL26 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL31 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL42 DEL31 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL78 DEL39 DEL42 DEL39 DEL42 DEL44 DEL31