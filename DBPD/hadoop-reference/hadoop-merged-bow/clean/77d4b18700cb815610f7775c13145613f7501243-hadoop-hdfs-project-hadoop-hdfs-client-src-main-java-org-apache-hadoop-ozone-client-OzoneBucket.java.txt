HDFS-12385. Ozone: OzoneClient: Refactoring OzoneClient API. Contributed by Nadakumar.

-/*
+/**
- *  with the License.  You may obtain a copy of the License at
+ * with the License.  You may obtain a copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.google.common.base.Preconditions;
-import org.apache.hadoop.ozone.ksm.helpers.KsmBucketInfo;
+import org.apache.hadoop.ozone.client.io.OzoneInputStream;
+import org.apache.hadoop.ozone.client.io.OzoneOutputStream;
+import org.apache.hadoop.ozone.client.protocol.ClientProtocol;
-import org.apache.hadoop.ozone.OzoneConsts.Versioning;
+import java.io.IOException;
-  private final String bucketName;
+  private final String name;
-  private final List<OzoneAcl> acls;
+  private List<OzoneAcl> acls;
-  private final StorageType storageType;
+  private StorageType storageType;
-  private final Versioning versioning;
-
+  private Boolean versioning;
-   * Constructs OzoneBucket from KsmBucketInfo.
-   *
-   * @param ksmBucketInfo
+   * The proxy used for connecting to the cluster and perform
+   * client operations.
-  public OzoneBucket(KsmBucketInfo ksmBucketInfo) {
-    this.volumeName = ksmBucketInfo.getVolumeName();
-    this.bucketName = ksmBucketInfo.getBucketName();
-    this.acls = ksmBucketInfo.getAcls();
-    this.storageType = ksmBucketInfo.getStorageType();
-    this.versioning = ksmBucketInfo.getIsVersionEnabled() ?
-        Versioning.ENABLED : Versioning.DISABLED;
+  private ClientProtocol proxy;
+
+  /**
+   * Constructs OzoneBucket instance.
+   * @param volumeName Name of the volume the bucket belongs to.
+   * @param bucketName Name of the bucket.
+   * @param acls ACLs associated with the bucket.
+   * @param storageType StorageType of the bucket.
+   * @param versioning versioning status of the bucket.
+   */
+  public OzoneBucket(String volumeName, String bucketName,
+                     List<OzoneAcl> acls, StorageType storageType,
+                     Boolean versioning) {
+    this.volumeName = volumeName;
+    this.name = bucketName;
+    this.acls = acls;
+    this.storageType = storageType;
+    this.versioning = versioning;
+  }
+
+  /**
+   * Sets the proxy using which client operations are performed.
+   * @param clientProxy
+   */
+  public void setClientProxy(ClientProtocol clientProxy) {
+    this.proxy = clientProxy;
-  public String getBucketName() {
-    return bucketName;
+  public String getName() {
+    return name;
-  public Versioning getVersioning() {
+  public Boolean getVersioning() {
+  /**
+   * Adds ACLs to the Bucket.
+   * @param addAcls ACLs to be added
+   * @throws IOException
+   */
+  public void addAcls(List<OzoneAcl> addAcls) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(addAcls);
+    proxy.addBucketAcls(volumeName, name, addAcls);
+    addAcls.stream().filter(acl -> !acls.contains(acl)).forEach(
+        acls::add);
+  }
+
+  /**
+   * Removes ACLs from the bucket.
+   * @param removeAcls ACLs to be removed
+   * @throws IOException
+   */
+  public void removeAcls(List<OzoneAcl> removeAcls) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(removeAcls);
+    proxy.removeBucketAcls(volumeName, name, removeAcls);
+    acls.removeAll(removeAcls);
+  }
+
+  /**
+   * Sets/Changes the storage type of the bucket.
+   * @param newStorageType Storage type to be set
+   * @throws IOException
+   */
+  public void setStorageType(StorageType newStorageType) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(newStorageType);
+    proxy.setBucketStorageType(volumeName, name, newStorageType);
+    storageType = newStorageType;
+  }
+
+  /**
+   * Enable/Disable versioning of the bucket.
+   * @param newVersioning
+   * @throws IOException
+   */
+  public void setVersioning(Boolean newVersioning) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(newVersioning);
+    proxy.setBucketVersioning(volumeName, name, newVersioning);
+    versioning = newVersioning;
+  }
+
+  /**
+   * Creates a new key in the bucket.
+   * @param key Name of the key to be created.
+   * @param size Size of the data the key will point to.
+   * @return OzoneOutputStream to which the data has to be written.
+   * @throws IOException
+   */
+  public OzoneOutputStream createKey(String key, long size)throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(key);
+    return proxy.createKey(volumeName, name, key, size);
+  }
+
+  /**
+   * Reads an existing key from the bucket.
+   * @param key Name of the key to be read.
+   * @return OzoneInputStream the stream using which the data can be read.
+   * @throws IOException
+   */
+  public OzoneInputStream readKey(String key) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(key);
+    return proxy.getKey(volumeName, name, key);
+  }
+
+  /**
+   * Returns information about the key.
+   * @param key Name of the key.
+   * @return OzoneKey Information about the key.
+   * @throws IOException
+   */
+  public OzoneKey getKey(String key) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(key);
+    return proxy.getKeyDetails(volumeName, name, key);
+  }
+
+  /**
+   * Deletes key from the bucket.
+   * @param key Name of the key to be deleted.
+   * @throws IOException
+   */
+  public void deleteKey(String key) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(key);
+    proxy.deleteKey(volumeName, name, key);
+  }

MOV26 INS26 INS26 INS26 INS29 INS40 UPD40 UPD40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 UPD43 INS29 INS83 INS43 INS59 INS44 INS44 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS8 UPD42 UPD43 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD42 UPD42 INS65 INS42 INS42 INS65 INS65 INS65 INS65 INS43 INS42 UPD43 UPD42 INS74 INS42 INS43 INS42 INS43 INS42 INS65 INS65 INS43 INS42 INS21 UPD42 INS65 INS65 INS65 INS74 INS42 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS74 INS42 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS21 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS21 INS21 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS21 INS21 INS41 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS21 INS21 INS66 INS66 UPD66 INS42 INS66 UPD42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 UPD42 INS43 INS43 INS42 INS42 INS66 INS42 INS42 INS7 UPD42 INS66 INS42 INS66 INS42 INS43 INS43 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS43 INS43 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS32 INS7 INS66 INS42 INS42 INS42 INS32 INS32 INS32 INS7 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS32 INS32 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS32 INS32 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS90 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS52 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS59 INS38 INS42 INS32 INS42 INS42 INS42 DEL83 DEL83 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL40 DEL16