Merge from trunk to fs-encryption branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1596873 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.XAttr;
+import org.apache.hadoop.hdfs.server.namenode.FsImageProto.INodeSection.XAttrCompactProto;
+import org.apache.hadoop.hdfs.server.namenode.FsImageProto.INodeSection.XAttrFeatureProto;
+import org.apache.hadoop.hdfs.server.namenode.XAttrFeature;
+  
+  private static final int XATTR_NAMESPACE_MASK = 3;
+  private static final int XATTR_NAMESPACE_OFFSET = 30;
+  private static final int XATTR_NAME_MASK = (1 << 24) - 1;
+  private static final int XATTR_NAME_OFFSET = 6;
+  private static final XAttr.NameSpace[] XATTR_NAMESPACE_VALUES = 
+      XAttr.NameSpace.values();
+  
+    
+    public static ImmutableList<XAttr> loadXAttrs(
+        XAttrFeatureProto proto, final String[] stringTable) {
+      ImmutableList.Builder<XAttr> b = ImmutableList.builder();
+      for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {
+        int v = xAttrCompactProto.getName();
+        int nid = (v >> XATTR_NAME_OFFSET) & XATTR_NAME_MASK;
+        int ns = (v >> XATTR_NAMESPACE_OFFSET) & XATTR_NAMESPACE_MASK;
+        String name = stringTable[nid];
+        byte[] value = null;
+        if (xAttrCompactProto.getValue() != null) {
+          value = xAttrCompactProto.getValue().toByteArray();
+        }
+        b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])
+            .setName(name).setValue(value).build());
+      }
+      
+      return b.build();
+    }
+      if (d.hasXAttrs()) {
+        dir.addXAttrFeature(new XAttrFeature(
+            loadXAttrs(d.getXAttrs(), state.getStringTable())));
+      }
+      
+      if (f.hasXAttrs()) {
+        file.addXAttrFeature(new XAttrFeature(
+            loadXAttrs(f.getXAttrs(), state.getStringTable())));
+      }
+      // root dir supports having extended attributes according to POSIX
+      final XAttrFeature f = root.getXAttrFeature();
+      if (f != null) {
+        dir.rootDir.addXAttrFeature(f);
+      }
+    
+    private static XAttrFeatureProto.Builder buildXAttrs(XAttrFeature f,
+        final SaverContext.DeduplicationMap<String> stringMap) {
+      XAttrFeatureProto.Builder b = XAttrFeatureProto.newBuilder();
+      for (XAttr a : f.getXAttrs()) {
+        XAttrCompactProto.Builder xAttrCompactBuilder = XAttrCompactProto.
+            newBuilder();
+        int v = ((a.getNameSpace().ordinal() & XATTR_NAMESPACE_MASK) << 
+            XATTR_NAMESPACE_OFFSET) 
+            | ((stringMap.getId(a.getName()) & XATTR_NAME_MASK) << 
+                XATTR_NAME_OFFSET);
+        xAttrCompactBuilder.setName(v);
+        if (a.getValue() != null) {
+          xAttrCompactBuilder.setValue(PBHelper.getByteString(a.getValue()));
+        }
+        b.addXAttrs(xAttrCompactBuilder.build());
+      }
+      
+      return b;
+    }
+      XAttrFeature xAttrFeature = file.getXAttrFeature();
+      if (xAttrFeature != null) {
+        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));
+      }
+      XAttrFeature xAttrFeature = dir.getXAttrFeature();
+      if (xAttrFeature != null) {
+        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));
+      }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS5 INS59 INS31 INS31 INS42 INS34 INS42 INS34 INS42 INS27 INS42 INS34 INS43 INS85 INS42 INS32 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS36 INS34 INS40 INS40 INS42 INS43 INS43 INS43 INS42 INS83 INS5 INS42 INS60 INS70 INS41 INS25 INS25 INS60 INS25 INS40 INS43 INS42 INS83 INS74 INS42 INS60 INS70 INS41 INS60 INS25 INS60 INS25 INS27 INS42 INS42 INS42 INS43 INS85 INS74 INS59 INS44 INS32 INS8 INS32 INS32 INS8 INS32 INS8 INS83 INS43 INS59 INS27 INS8 INS42 INS43 INS43 INS43 INS59 INS44 INS32 INS8 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS34 INS34 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS40 INS42 INS40 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS60 INS21 INS25 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS40 INS42 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS5 INS59 INS27 INS8 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS39 INS59 INS32 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS27 INS42 INS42 INS2 INS39 INS85 INS42 INS33 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS36 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS36 INS36 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS27 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS2 INS27 INS27 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42