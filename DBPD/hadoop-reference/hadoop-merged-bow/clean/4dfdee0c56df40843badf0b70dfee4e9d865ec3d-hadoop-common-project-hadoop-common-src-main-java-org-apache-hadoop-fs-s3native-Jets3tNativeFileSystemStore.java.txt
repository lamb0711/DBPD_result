HADOOP-9454. Support multipart uploads for s3native. Contributed by Jordan Mendelson and Akira AJISAKA.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1572235 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import org.jets3t.service.model.MultipartPart;
+import org.jets3t.service.model.MultipartUpload;
+import org.jets3t.service.utils.MultipartUtils;
+
+  private long multipartBlockSize;
+  private boolean multipartEnabled;
+  private long multipartCopyBlockSize;
+  static final long MAX_PART_SIZE = (long)5 * 1024 * 1024 * 1024;
+  
+    multipartEnabled =
+        conf.getBoolean("fs.s3n.multipart.uploads.enabled", false);
+    multipartBlockSize = Math.min(
+        conf.getLong("fs.s3n.multipart.uploads.block.size", 64 * 1024 * 1024),
+        MAX_PART_SIZE);
+    multipartCopyBlockSize = Math.min(
+        conf.getLong("fs.s3n.multipart.copy.block.size", MAX_PART_SIZE),
+        MAX_PART_SIZE);
+
-    
+
+    if (multipartEnabled && file.length() >= multipartBlockSize) {
+      storeLargeFile(key, file, md5Hash);
+      return;
+    }
+
+  public void storeLargeFile(String key, File file, byte[] md5Hash)
+      throws IOException {
+    S3Object object = new S3Object(key);
+    object.setDataInputFile(file);
+    object.setContentType("binary/octet-stream");
+    object.setContentLength(file.length());
+    if (md5Hash != null) {
+      object.setMd5Hash(md5Hash);
+    }
+
+    List<StorageObject> objectsToUploadAsMultipart =
+        new ArrayList<StorageObject>();
+    objectsToUploadAsMultipart.add(object);
+    MultipartUtils mpUtils = new MultipartUtils(multipartBlockSize);
+
+    try {
+      mpUtils.uploadObjects(bucket.getName(), s3Service,
+                            objectsToUploadAsMultipart, null);
+    } catch (ServiceException e) {
+      handleServiceException(e);
+    } catch (Exception e) {
+      throw new S3Exception(e);
+    }
+  }
+  
-    } catch (S3ServiceException e) {
-      handleS3ServiceException(key, e);
-      return null; //never returned - keep compiler happy
-      handleServiceException(e);
+      handleServiceException(key, e);
-    } catch (S3ServiceException e) {
-      handleS3ServiceException(key, e);
-      return null; //never returned - keep compiler happy
-      handleServiceException(e);
+      handleServiceException(key, e);
-    } catch (S3ServiceException e) {
-      handleS3ServiceException(key, e);
+    } catch (ServiceException e) {
+      handleServiceException(key, e);
+    }
+  }
+
+  public void rename(String srcKey, String dstKey) throws IOException {
+    try {
+      s3Service.renameObject(bucket.getName(), srcKey, new S3Object(dstKey));
+    } catch (ServiceException e) {
+      handleServiceException(e);
+      if (multipartEnabled) {
+        S3Object object = s3Service.getObjectDetails(bucket, srcKey, null,
+                                                     null, null, null);
+        if (multipartCopyBlockSize > 0 &&
+            object.getContentLength() > multipartCopyBlockSize) {
+          copyLargeFile(object, dstKey);
+          return;
+        }
+      }
-    } catch (S3ServiceException e) {
-      handleS3ServiceException(srcKey, e);
+    } catch (ServiceException e) {
+      handleServiceException(srcKey, e);
+    }
+  }
+
+  public void copyLargeFile(S3Object srcObject, String dstKey) throws IOException {
+    try {
+      long partCount = srcObject.getContentLength() / multipartCopyBlockSize +
+          (srcObject.getContentLength() % multipartCopyBlockSize > 0 ? 1 : 0);
+
+      MultipartUpload multipartUpload = s3Service.multipartStartUpload
+          (bucket.getName(), dstKey, srcObject.getMetadataMap());
+
+      List<MultipartPart> listedParts = new ArrayList<MultipartPart>();
+      for (int i = 0; i < partCount; i++) {
+        long byteRangeStart = i * multipartCopyBlockSize;
+        long byteLength;
+        if (i < partCount - 1) {
+          byteLength = multipartCopyBlockSize;
+        } else {
+          byteLength = srcObject.getContentLength() % multipartCopyBlockSize;
+          if (byteLength == 0) {
+            byteLength = multipartCopyBlockSize;
+          }
+        }
+
+        MultipartPart copiedPart = s3Service.multipartUploadPartCopy
+            (multipartUpload, i + 1, bucket.getName(), srcObject.getKey(),
+             null, null, null, null, byteRangeStart,
+             byteRangeStart + byteLength - 1, null);
+        listedParts.add(copiedPart);
+      }
+      
+      Collections.reverse(listedParts);
+      s3Service.multipartCompleteUpload(multipartUpload, listedParts);
-  private void handleS3ServiceException(String key, S3ServiceException e) throws IOException {
-    if ("NoSuchKey".equals(e.getS3ErrorCode())) {
+  private void handleServiceException(String key, ServiceException e) throws IOException {
+    if ("NoSuchKey".equals(e.getErrorCode())) {
-      handleS3ServiceException(e);
+      handleServiceException(e);

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 UPD42 INS42 INS42 INS42 INS42 INS27 INS21 INS21 INS21 INS25 INS43 INS42 INS43 INS42 INS5 INS42 INS42 INS60 INS21 INS21 INS21 INS25 INS60 INS21 INS60 INS54 INS43 INS42 INS43 INS42 INS42 INS54 INS43 INS42 INS43 INS42 INS42 INS54 UPD43 INS11 INS34 INS34 INS34 INS7 INS7 INS7 INS27 INS8 INS42 INS42 INS39 INS85 INS43 INS59 INS32 INS32 INS32 INS27 INS8 INS74 INS59 INS32 INS43 INS59 INS8 INS12 INS12 INS42 INS42 INS8 MOV12 INS42 INS42 INS8 INS12 UPD42 MOV8 INS39 INS34 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS27 INS21 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS21 INS44 INS8 INS44 INS8 MOV44 MOV44 INS21 INS25 INS60 INS60 INS60 INS24 INS21 INS21 INS44 INS8 INS42 INS42 INS45 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS43 INS42 INS32 INS43 INS42 INS21 INS43 INS42 INS53 MOV41 UPD43 INS32 INS42 INS8 UPD43 INS39 INS59 INS43 INS59 INS74 INS59 INS58 INS27 INS37 INS8 INS32 INS32 INS43 INS42 INS21 UPD42 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS32 INS42 INS14 UPD42 MOV42 MOV33 UPD42 INS42 INS42 INS32 INS42 INS14 INS60 INS25 UPD42 INS42 INS27 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS25 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS43 INS42 INS43 INS59 INS27 INS8 UPD42 INS27 INS36 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS74 INS42 INS34 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS21 INS41 INS32 INS42 INS16 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS27 INS42 INS42 INS27 INS21 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS33 INS33 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS27 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS34 INS7 INS7 INS27 INS8 INS42 INS42 INS42 INS27 INS32 INS32 INS33 INS33 INS33 INS33 INS42 INS27 INS33 INS42 INS42 INS42 INS42 INS42 INS27 INS34 INS42 INS42 INS42 INS27 INS42 INS34 INS21 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS34 INS32 INS42 INS32 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL21 DEL33 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8