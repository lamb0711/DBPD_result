YARN-78. Changed UnManagedAM application to use YarnClient. Contributed by Bikas Saha.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1383705 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.InetSocketAddress;
-import org.apache.hadoop.yarn.api.ClientRMProtocol;
-import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationReportRequest;
-import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationReportResponse;
-import org.apache.hadoop.yarn.api.protocolrecords.GetNewApplicationRequest;
-import org.apache.hadoop.yarn.api.protocolrecords.SubmitApplicationRequest;
+import org.apache.hadoop.yarn.client.YarnClientImpl;
-import org.apache.hadoop.yarn.ipc.YarnRPC;
-  // RPC to communicate to RM
-  private YarnRPC rpc;
-
-  private ClientRMProtocol rmClient;
+  private YarnClientImpl rmClient;
-    rpc = YarnRPC.create(conf);
-    return true;
-  }
-
-  private void connectToRM() throws IOException {
-    InetSocketAddress rmAddress = yarnConf.getSocketAddr(
-        YarnConfiguration.RM_ADDRESS, YarnConfiguration.DEFAULT_RM_ADDRESS,
-        YarnConfiguration.DEFAULT_RM_PORT);
-    LOG.info("Connecting to ResourceManager at " + rmAddress);
-    rmClient = ((ClientRMProtocol) rpc.getProxy(ClientRMProtocol.class,
-        rmAddress, conf));
-  }
+    rmClient = new YarnClientImpl();
+    rmClient.init(yarnConf);
-  private GetNewApplicationResponse getApplication() throws YarnRemoteException {
-    GetNewApplicationRequest request = Records
-        .newRecord(GetNewApplicationRequest.class);
-    GetNewApplicationResponse response = rmClient.getNewApplication(request);
-    LOG.info("Got new application id=" + response.getApplicationId());
-    return response;
+    return true;
-
+  
-
+    
-    connectToRM();
-    assert (rmClient != null);
-
-    // Get a new application id
-    GetNewApplicationResponse newApp = getApplication();
-    ApplicationId appId = newApp.getApplicationId();
-
-    // Create launch context for app master
-    LOG.info("Setting up application submission context for ASM");
-    ApplicationSubmissionContext appContext = Records
-        .newRecord(ApplicationSubmissionContext.class);
-
-    // set the application id
-    appContext.setApplicationId(appId);
-    // set the application name
-    appContext.setApplicationName(appName);
-
-    // Set the priority for the application master
-    Priority pri = Records.newRecord(Priority.class);
-    pri.setPriority(amPriority);
-    appContext.setPriority(pri);
-
-    // Set the queue to which this application is to be submitted in the RM
-    appContext.setQueue(amQueue);
-
-    // Set up the container launch context for the application master
-    ContainerLaunchContext amContainer = Records
-        .newRecord(ContainerLaunchContext.class);
-    appContext.setAMContainerSpec(amContainer);
-
-    // unmanaged AM
-    appContext.setUnmanagedAM(true);
-    LOG.info("Setting unmanaged AM");
-
-    // Create the request to send to the applications manager
-    SubmitApplicationRequest appRequest = Records
-        .newRecord(SubmitApplicationRequest.class);
-    appRequest.setApplicationSubmissionContext(appContext);
-
-    // Submit the application to the applications manager
-    LOG.info("Submitting application to ASM");
-    rmClient.submitApplication(appRequest);
-
-    // Monitor the application to wait for launch state
-    ApplicationReport appReport = monitorApplication(appId,
-        EnumSet.of(YarnApplicationState.ACCEPTED));
-    ApplicationAttemptId attemptId = appReport.getCurrentApplicationAttemptId();
-    LOG.info("Launching application with id: " + attemptId);
-
-    // launch AM
-    launchAM(attemptId);
-
-    // Monitor the application for end state
-    appReport = monitorApplication(appId, EnumSet.of(
-        YarnApplicationState.KILLED, YarnApplicationState.FAILED,
-        YarnApplicationState.FINISHED));
-    YarnApplicationState appState = appReport.getYarnApplicationState();
-    FinalApplicationStatus appStatus = appReport.getFinalApplicationStatus();
-
-    LOG.info("App ended with state: " + appReport.getYarnApplicationState()
-        + " and status: " + appStatus);
-    if (YarnApplicationState.FINISHED == appState
-        && FinalApplicationStatus.SUCCEEDED == appStatus) {
-      LOG.info("Application has completed successfully.");
-      return true;
-    } else {
-      LOG.info("Application did finished unsuccessfully." + " YarnState="
-          + appState.toString() + ", FinalStatus=" + appStatus.toString());
-      return false;
+    rmClient.start();
+    try {  
+      // Get a new application id
+      GetNewApplicationResponse newApp = rmClient.getNewApplication();
+      ApplicationId appId = newApp.getApplicationId();
+  
+      // Create launch context for app master
+      LOG.info("Setting up application submission context for ASM");
+      ApplicationSubmissionContext appContext = Records
+          .newRecord(ApplicationSubmissionContext.class);
+  
+      // set the application id
+      appContext.setApplicationId(appId);
+      // set the application name
+      appContext.setApplicationName(appName);
+  
+      // Set the priority for the application master
+      Priority pri = Records.newRecord(Priority.class);
+      pri.setPriority(amPriority);
+      appContext.setPriority(pri);
+  
+      // Set the queue to which this application is to be submitted in the RM
+      appContext.setQueue(amQueue);
+  
+      // Set up the container launch context for the application master
+      ContainerLaunchContext amContainer = Records
+          .newRecord(ContainerLaunchContext.class);
+      appContext.setAMContainerSpec(amContainer);
+  
+      // unmanaged AM
+      appContext.setUnmanagedAM(true);
+      LOG.info("Setting unmanaged AM");
+  
+      // Submit the application to the applications manager
+      LOG.info("Submitting application to ASM");
+      rmClient.submitApplication(appContext);
+  
+      // Monitor the application to wait for launch state
+      ApplicationReport appReport = monitorApplication(appId,
+          EnumSet.of(YarnApplicationState.ACCEPTED));
+      ApplicationAttemptId attemptId = appReport.getCurrentApplicationAttemptId();
+      LOG.info("Launching application with id: " + attemptId);
+  
+      // launch AM
+      launchAM(attemptId);
+  
+      // Monitor the application for end state
+      appReport = monitorApplication(appId, EnumSet.of(
+          YarnApplicationState.KILLED, YarnApplicationState.FAILED,
+          YarnApplicationState.FINISHED));
+      YarnApplicationState appState = appReport.getYarnApplicationState();
+      FinalApplicationStatus appStatus = appReport.getFinalApplicationStatus();
+  
+      LOG.info("App ended with state: " + appReport.getYarnApplicationState()
+          + " and status: " + appStatus);
+      
+      boolean success;
+      if (YarnApplicationState.FINISHED == appState
+          && FinalApplicationStatus.SUCCEEDED == appStatus) {
+        LOG.info("Application has completed successfully.");
+        success = true;
+      } else {
+        LOG.info("Application did finished unsuccessfully." + " YarnState="
+            + appState.toString() + ", FinalStatus=" + appStatus.toString());
+        success = false;
+      }
+      
+      return success;
+    } finally {
+      rmClient.stop();
-      GetApplicationReportRequest reportRequest = Records
-          .newRecord(GetApplicationReportRequest.class);
-      reportRequest.setApplicationId(appId);
-      GetApplicationReportResponse reportResponse = rmClient
-          .getApplicationReport(reportRequest);
-      ApplicationReport report = reportResponse.getApplicationReport();
+      ApplicationReport report = rmClient.getApplicationReport(appId);

MOV26 UPD40 UPD43 MOV59 INS8 UPD42 MOV60 INS21 INS21 MOV21 INS21 INS54 INS7 INS32 INS32 MOV8 MOV21 INS8 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS60 INS41 INS21 INS43 INS39 INS59 INS42 INS32 MOV43 INS42 UPD42 UPD42 INS42 INS21 INS21 INS42 INS42 UPD42 INS42 UPD42 INS7 INS7 UPD42 INS42 INS9 INS42 INS9 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL59 DEL83 DEL42 DEL43 DEL23 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL11 DEL36 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL36 DEL6 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL9 DEL41 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60