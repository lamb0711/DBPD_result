YARN-8474. Fixed ApiServiceClient kerberos negotiation.
           Contributed by Billie Rinaldi

+import java.net.URI;
+import java.nio.charset.StandardCharsets;
+import java.security.PrivilegedExceptionAction;
+import javax.ws.rs.core.HttpHeaders;
+
+import org.apache.commons.codec.binary.Base64;
-import org.apache.hadoop.security.authentication.client.AuthenticatedURL;
+import org.apache.hadoop.security.authentication.client.AuthenticationException;
+import org.apache.hadoop.security.authentication.util.KerberosUtil;
+import org.ietf.jgss.GSSContext;
+import org.ietf.jgss.GSSException;
+import org.ietf.jgss.GSSManager;
+import org.ietf.jgss.GSSName;
+import org.ietf.jgss.Oid;
+  private static final Base64 BASE_64_CODEC = new Base64(0);
+   * Generate SPNEGO challenge request token.
+   *
+   * @param server - hostname to contact
+   * @throws IOException
+   * @throws InterruptedException
+   */
+  String generateToken(String server) throws IOException, InterruptedException {
+    UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();
+    LOG.debug("The user credential is {}", currentUser);
+    String challenge = currentUser
+        .doAs(new PrivilegedExceptionAction<String>() {
+          @Override
+          public String run() throws Exception {
+            try {
+              // This Oid for Kerberos GSS-API mechanism.
+              Oid mechOid = KerberosUtil.getOidInstance("GSS_KRB5_MECH_OID");
+              GSSManager manager = GSSManager.getInstance();
+              // GSS name for server
+              GSSName serverName = manager.createName("HTTP@" + server,
+                  GSSName.NT_HOSTBASED_SERVICE);
+              // Create a GSSContext for authentication with the service.
+              // We're passing client credentials as null since we want them to
+              // be read from the Subject.
+              GSSContext gssContext = manager.createContext(
+                  serverName.canonicalize(mechOid), mechOid, null,
+                  GSSContext.DEFAULT_LIFETIME);
+              gssContext.requestMutualAuth(true);
+              gssContext.requestCredDeleg(true);
+              // Establish context
+              byte[] inToken = new byte[0];
+              byte[] outToken = gssContext.initSecContext(inToken, 0,
+                  inToken.length);
+              gssContext.dispose();
+              // Base64 encoded and stringified token for server
+              LOG.debug("Got valid challenge for host {}", serverName);
+              return new String(BASE_64_CODEC.encode(outToken),
+                  StandardCharsets.US_ASCII);
+            } catch (GSSException | IllegalAccessException
+                | NoSuchFieldException | ClassNotFoundException e) {
+              LOG.error("Error: {}", e);
+              throw new AuthenticationException(e);
+            }
+          }
+        });
+    return challenge;
+  }
+
+  /**
+        client.setFollowRedirects(false);
-          AuthenticatedURL.Token token = new AuthenticatedURL.Token();
-          webResource.header("WWW-Authenticate", token);
+          String[] server = host.split(":");
+          String challenge = generateToken(server[0]);
+          webResource.header(HttpHeaders.AUTHORIZATION, "Negotiate " +
+              challenge);
+          LOG.debug("Authorization: Negotiate {}", challenge);
-        LOG.debug("Fail to connect to: "+host, e);
+        LOG.info("Fail to connect to: "+host);
+        LOG.debug("Root cause: {}", e);
-      AuthenticatedURL.Token token = new AuthenticatedURL.Token();
-      builder.header("WWW-Authenticate", token);
+      try {
+        URI url = new URI(requestPath);
+        String challenge = generateToken(url.getHost());
+        builder.header(HttpHeaders.AUTHORIZATION, "Negotiate " + challenge);
+      } catch (Exception e) {
+        throw new IOException(e);
+      }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS43 INS42 INS44 INS43 INS43 INS8 INS42 INS42 INS14 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 INS60 INS21 INS60 INS41 INS43 INS34 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS42 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS54 INS42 INS42 INS42 INS42 INS14 INS8 INS12 INS74 INS1 INS21 MOV60 INS60 MOV21 INS44 INS8 INS43 INS43 INS31 INS32 INS21 UPD43 INS43 INS59 INS43 INS42 INS53 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS9 INS60 INS21 INS32 INS42 UPD42 INS42 INS42 INS32 INS40 INS27 INS42 INS14 INS42 INS42 INS42 INS54 INS5 INS59 UPD43 INS32 UPD42 INS42 INS42 INS45 INS42 UPD43 INS42 INS42 INS32 INS45 INS42 INS43 INS42 INS8 INS12 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS40 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS21 INS21 INS60 INS60 INS21 INS21 INS41 INS44 INS8 INS42 INS42 INS42 INS45 INS42 INS2 INS45 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS5 INS59 INS5 INS59 INS32 INS32 INS14 INS84 INS42 INS21 INS53 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS9 INS39 INS85 INS42 INS3 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS32 INS40 INS43 INS43 INS43 INS43 INS32 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS40 INS42 INS42 INS32 INS42 INS33 INS40 INS5 INS34 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS45 INS42 INS42 INS42 INS42 INS39 INS85 INS42 DEL40 DEL42 DEL40 DEL43 DEL14 DEL45 DEL42 DEL42 DEL40 DEL40 DEL45 DEL42 DEL8