YARN-1639. Modified RM HA configuration handling to have a way of not requiring separate configuration files for each RM. Contributed by Xuan Gong.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564032 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.HadoopIllegalArgumentException;
+import org.apache.hadoop.net.NetUtils;
+import java.net.InetSocketAddress;
-            errmsg = getInvalidValueMessage(YarnConfiguration.RM_HA_ID,
-              getRMHAId(conf));
+            errmsg = getInvalidValueMessage(YarnConfiguration.RM_HA_ID, id);
-    String rmId = conf.getTrimmed(YarnConfiguration.RM_HA_ID);
+    String rmId = getRMHAId(conf);
-      throwBadConfigurationException(
-        getNeedToSetValueMessage(YarnConfiguration.RM_HA_ID));
+      StringBuilder msg = new StringBuilder();
+      msg.append("Can not find valid RM_HA_ID. None of ");
+      for (String id : conf
+          .getTrimmedStringCollection(YarnConfiguration.RM_HA_IDS)) {
+        msg.append(addSuffix(YarnConfiguration.RM_ADDRESS, id) + " ");
+      }
+      msg.append(" are matching" +
+          " the local address OR " + YarnConfiguration.RM_HA_ID + " is not" +
+          " specified in HA Configuration");
+      throwBadConfigurationException(msg.toString());
-    return conf.get(YarnConfiguration.RM_HA_ID);
+    int found = 0;
+    String currentRMId = conf.getTrimmed(YarnConfiguration.RM_HA_ID);
+    if(currentRMId == null) {
+      for(String rmId : getRMHAIds(conf)) {
+        String key = addSuffix(YarnConfiguration.RM_ADDRESS, rmId);
+        String addr = conf.get(key);
+        if (addr == null) {
+          continue;
+        }
+        InetSocketAddress s;
+        try {
+          s = NetUtils.createSocketAddr(addr);
+        } catch (Exception e) {
+          LOG.warn("Exception in creating socket address " + addr, e);
+          continue;
+        }
+        if (!s.isUnresolved() && NetUtils.isLocalAddress(s.getAddress())) {
+          currentRMId = rmId.trim();
+          found++;
+        }
+      }
+    }
+    if (found > 1) { // Only one address must match the local address
+      String msg = "The HA Configuration has multiple addresses that match "
+          + "local node's address.";
+      throw new HadoopIllegalArgumentException(msg);
+    }
+    return currentRMId;

INS26 INS26 INS26 INS40 INS40 INS40 INS8 INS60 INS60 MOV60 INS25 INS25 INS41 INS43 INS59 INS8 INS39 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS42 MOV32 INS60 INS21 INS70 INS21 INS21 INS42 INS34 UPD42 INS42 INS33 INS70 INS42 INS34 INS60 INS53 INS43 INS59 INS32 INS44 INS32 INS8 INS32 INS32 INS44 INS32 INS8 INS43 INS59 INS14 INS42 INS42 INS14 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS40 MOV21 INS42 INS42 INS27 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS60 INS25 INS60 INS54 INS25 INS42 INS42 INS27 INS43 INS42 INS43 INS42 INS27 INS40 INS45 INS45 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS45 INS45 INS42 INS42 UPD42 INS42 INS27 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS18 INS42 INS42 INS21 INS44 INS8 INS38 INS32 INS21 INS21 INS32 INS45 INS42 INS40 INS42 MOV42 MOV42 INS42 INS7 INS43 INS42 INS21 INS18 INS32 INS42 INS42 INS32 INS7 INS37 UPD42 MOV42 UPD40 MOV40 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS42 DEL32 DEL8 DEL40 DEL32 DEL41 DEL8