HDFS-12387. Ozone: Support Ratis as a first class replication mechanism. Contributed by Anu Engineer.

-import org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
-    .ContainerCommandRequestProto;
-import org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
-    .ContainerCommandResponseProto;
+import org.apache.hadoop.hdfs.protocol.DatanodeID;
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos;
+import org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.ContainerCommandRequestProto;
+import org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.ContainerCommandResponseProto;
+import org.apache.ratis.protocol.RaftPeer;
+import java.util.List;
+  /**
+   *  {@inheritDoc}
+   */
+  public void createPipeline(String clusterId, List<DatanodeID> datanodes)
+      throws IOException {
+    final RaftPeer[] newPeers = datanodes.stream().map(RatisHelper::toRaftPeer)
+        .toArray(RaftPeer[]::new);
+    reinitialize(datanodes, newPeers);
+  }
+
+  /**
+   * Returns Ratis as pipeline Type.
+   * @return - Ratis
+   */
+  @Override
+  public OzoneProtos.ReplicationType getPipelineType() {
+    return OzoneProtos.ReplicationType.RATIS;
+  }
+
+  private void reinitialize(List<DatanodeID> datanodes, RaftPeer[] newPeers)
+      throws IOException {
+    if (datanodes.isEmpty()) {
+      return;
+    }
+
+    IOException exception = null;
+    for (DatanodeID d : datanodes) {
+      try {
+        reinitialize(d, newPeers);
+      } catch (IOException ioe) {
+        if (exception == null) {
+          exception = new IOException(
+              "Failed to reinitialize some of the RaftPeer(s)", ioe);
+        } else {
+          exception.addSuppressed(ioe);
+        }
+      }
+    }
+    if (exception != null) {
+      throw exception;
+    }
+  }
+
+  /**
+   * Adds a new peers to the Ratis Ring.
+   * @param datanode - new datanode
+   * @param newPeers - Raft machines
+   * @throws IOException - on Failure.
+   */
+  private void reinitialize(DatanodeID datanode, RaftPeer[] newPeers)
+      throws IOException {
+    final RaftPeer p = RatisHelper.toRaftPeer(datanode);
+    try (RaftClient client = RatisHelper.newRaftClient(rpcType, p)) {
+      client.reinitialize(newPeers, p.getId());
+    } catch (IOException ioe) {
+      LOG.error("Failed to reinitialize RaftPeer:{} datanode: {}  ",
+          p, datanode, ioe);
+      throw new IOException("Failed to reinitialize RaftPeer " + p
+          + "(datanode=" + datanode + ")", ioe);
+    }
+  }
+
+
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS43 INS42 INS74 INS42 INS42 INS60 INS21 INS65 INS65 INS42 INS40 INS41 INS74 INS42 INS5 INS42 INS42 INS25 INS60 INS70 INS25 INS65 INS65 INS65 INS65 INS43 INS42 INS5 INS42 INS42 INS60 INS54 INS65 INS42 INS43 INS43 INS83 INS5 INS59 INS32 INS66 INS66 INS40 INS43 INS43 INS43 INS85 INS32 INS8 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS85 INS83 INS43 INS59 INS58 INS8 INS12 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS33 INS43 INS42 INS54 INS42 INS33 INS53 INS42 INS42 INS42 INS32 INS43 INS59 INS21 INS44 INS8 INS42 INS32 INS42 INS89 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS21 INS53 INS32 INS42 INS90 INS5 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS33 INS21 INS21 INS7 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS45 INS42 INS42