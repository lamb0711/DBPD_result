HDFS-6727. Refresh data volumes on DataNode based on configuration changes (Lei Xu via Colin Patrick McCabe)

+import java.util.Collections;
+import java.util.Iterator;
+import com.google.common.collect.Lists;
-import org.apache.hadoop.conf.Configured;
+import org.apache.hadoop.conf.ReconfigurableBase;
+import org.apache.hadoop.conf.ReconfigurationException;
+import org.apache.hadoop.hdfs.server.common.Storage;
-public class DataNode extends Configured 
+public class DataNode extends ReconfigurableBase
+  // dataDirs must be accessed while holding the DataNode lock.
+  @Override
+  public void reconfigurePropertyImpl(String property, String newVal)
+      throws ReconfigurationException {
+    if (property.equals(DFS_DATANODE_DATA_DIR_KEY)) {
+      try {
+        LOG.info("Reconfiguring " + property + " to " + newVal);
+        this.refreshVolumes(newVal);
+      } catch (Exception e) {
+        throw new ReconfigurationException(property, newVal,
+            getConf().get(property), e);
+      }
+    } else {
+      throw new ReconfigurationException(
+          property, newVal, getConf().get(property));
+    }
+  }
+
+  /**
+   * Get a list of the keys of the re-configurable properties in configuration.
+   */
+  @Override
+  public Collection<String> getReconfigurableProperties() {
+    List<String> reconfigurable =
+        Collections.unmodifiableList(Arrays.asList(DFS_DATANODE_DATA_DIR_KEY));
+    return reconfigurable;
+  }
+
+  /**
+   * Contains the StorageLocations for changed data volumes.
+   */
+  @VisibleForTesting
+  static class ChangedVolumes {
+    List<StorageLocation> newLocations = Lists.newArrayList();
+    List<StorageLocation> deactivateLocations = Lists.newArrayList();
+  }
+
+  /**
+   * Parse the new DFS_DATANODE_DATA_DIR value in the configuration to detect
+   * changed volumes.
+   * @return changed volumes.
+   * @throws IOException if none of the directories are specified in the
+   * configuration.
+   */
+  @VisibleForTesting
+  ChangedVolumes parseChangedVolumes() throws IOException {
+    List<StorageLocation> locations = getStorageLocations(getConf());
+
+    if (locations.isEmpty()) {
+      throw new IOException("No directory is specified.");
+    }
+
+    ChangedVolumes results = new ChangedVolumes();
+    results.newLocations.addAll(locations);
+
+    for (Iterator<Storage.StorageDirectory> it = storage.dirIterator();
+         it.hasNext(); ) {
+      Storage.StorageDirectory dir = it.next();
+      boolean found = false;
+      for (Iterator<StorageLocation> sl = results.newLocations.iterator();
+           sl.hasNext(); ) {
+        if (sl.next().getFile().getCanonicalPath().equals(
+            dir.getRoot().getCanonicalPath())) {
+          sl.remove();
+          found = true;
+          break;
+        }
+      }
+
+      if (!found) {
+        results.deactivateLocations.add(
+            StorageLocation.parse(dir.getRoot().toString()));
+      }
+    }
+
+    return results;
+  }
+
+  /**
+   * Attempts to reload data volumes with new configuration.
+   * @param newVolumes a comma separated string that specifies the data volumes.
+   * @throws Exception
+   */
+  private synchronized void refreshVolumes(String newVolumes) throws Exception {
+    Configuration conf = getConf();
+    String oldVolumes = conf.get(DFS_DATANODE_DATA_DIR_KEY);
+    conf.set(DFS_DATANODE_DATA_DIR_KEY, newVolumes);
+    List<StorageLocation> locations = getStorageLocations(conf);
+
+    final int numOldDataDirs = dataDirs.size();
+    dataDirs = locations;
+    ChangedVolumes changedVolumes = parseChangedVolumes();
+
+    try {
+      if (numOldDataDirs + changedVolumes.newLocations.size() -
+          changedVolumes.deactivateLocations.size() <= 0) {
+        throw new IOException("Attempt to remove all volumes.");
+      }
+      if (!changedVolumes.newLocations.isEmpty()) {
+        LOG.info("Adding new volumes: " +
+            Joiner.on(",").join(changedVolumes.newLocations));
+
+        // Add volumes for each Namespace
+        for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {
+          NamespaceInfo nsInfo = bpos.getNamespaceInfo();
+          LOG.info("Loading volumes for namesapce: " + nsInfo.getNamespaceID());
+          storage.addStorageLocations(
+              this, nsInfo, changedVolumes.newLocations, StartupOption.HOTSWAP);
+        }
+        List<String> bpids = Lists.newArrayList();
+        for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {
+          bpids.add(bpos.getBlockPoolId());
+        }
+        List<StorageLocation> succeedVolumes =
+            data.addVolumes(changedVolumes.newLocations, bpids);
+
+        if (succeedVolumes.size() < changedVolumes.newLocations.size()) {
+          List<StorageLocation> failedVolumes = Lists.newArrayList();
+          // Clean all failed volumes.
+          for (StorageLocation location : changedVolumes.newLocations) {
+            if (!succeedVolumes.contains(location)) {
+              failedVolumes.add(location);
+            }
+          }
+          storage.removeVolumes(failedVolumes);
+          data.removeVolumes(failedVolumes);
+        }
+      }
+
+      if (!changedVolumes.deactivateLocations.isEmpty()) {
+        LOG.info("Deactivating volumes: " +
+            Joiner.on(",").join(changedVolumes.deactivateLocations));
+
+        data.removeVolumes(changedVolumes.deactivateLocations);
+        storage.removeVolumes(changedVolumes.deactivateLocations);
+      }
+    } catch (IOException e) {
+      LOG.warn("There is IOException when refreshing volumes! "
+          + "Recover configurations: " + DFS_DATANODE_DATA_DIR_KEY
+          + " = " + oldVolumes, e);
+      throw e;
+    }
+  }
+
-    this.dataDirs = dataDirs;
+    synchronized (this) {
+      this.dataDirs = dataDirs;
+    }
-      storage.recoverTransitionRead(this, bpid, nsInfo, dataDirs, startOpt);
+      synchronized (this) {
+        storage.recoverTransitionRead(this, bpid, nsInfo, dataDirs, startOpt);
+      }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 INS43 INS31 INS31 INS55 INS31 INS31 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS74 INS42 INS8 INS29 INS78 INS83 INS42 INS23 INS23 INS29 INS78 INS43 INS42 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS65 INS42 INS43 INS43 INS60 INS41 INS65 INS42 INS74 INS59 INS74 INS59 INS65 INS65 INS65 INS42 INS42 INS42 INS60 INS25 INS60 INS21 INS24 INS41 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS60 INS21 INS60 INS60 INS21 INS60 INS54 INS51 INS42 INS42 INS32 INS8 INS8 INS66 INS42 INS42 INS74 INS59 INS42 INS66 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS66 INS74 INS59 INS32 INS8 INS43 INS59 INS32 INS58 INS32 INS8 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS74 INS59 INS83 INS39 INS59 INS7 INS43 INS59 INS8 INS12 INS52 INS8 INS42 INS42 INS42 INS54 INS53 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS53 INS42 INS42 INS14 INS40 INS42 INS42 INS74 INS59 INS42 INS42 INS60 INS60 INS24 INS25 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS25 INS25 INS25 INS44 INS8 MOV21 INS51 INS8 INS12 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS14 INS43 INS43 INS43 INS42 INS32 INS43 INS59 INS39 INS59 INS58 INS32 INS8 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS38 INS8 INS38 INS8 INS43 INS42 INS21 INS53 INS52 INS8 INS21 INS21 INS44 INS8 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS9 INS74 INS59 INS42 INS42 INS25 INS42 INS21 INS27 INS34 INS53 INS32 INS21 INS70 INS60 INS70 INS60 INS25 INS32 INS21 INS21 INS21 INS42 INS32 INS42 MOV21 INS32 INS32 INS43 INS42 INS53 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS8 INS32 INS27 INS32 INS14 INS40 INS42 INS32 INS44 INS32 INS8 INS74 INS59 INS44 INS32 INS8 INS74 INS59 INS27 INS8 INS40 INS42 INS32 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS52 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS21 INS21 INS10 INS40 INS42 INS32 INS42 INS32 INS40 INS42 INS43 INS45 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS60 INS21 INS21 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS21 INS43 INS43 INS42 INS32 INS32 INS32 INS60 INS70 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS40 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS7 INS42 INS42 INS32 INS40 INS42 INS42 INS45 INS32 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS74 INS59 INS44 INS40 INS8 INS32 INS32 INS45 INS32 INS45 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS52 INS42 INS40 INS40 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS42 INS42 INS45 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL43