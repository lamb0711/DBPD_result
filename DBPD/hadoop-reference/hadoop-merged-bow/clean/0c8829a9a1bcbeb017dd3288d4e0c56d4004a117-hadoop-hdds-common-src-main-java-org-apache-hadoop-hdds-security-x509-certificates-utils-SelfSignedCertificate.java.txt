HDDS-696. Bootstrap genesis SCM(CA) with self-signed certificate.
Contributed by Anu Engineer.

- *  with the License.  You may obtain a copy of the License at
+ * with the License.  You may obtain a copy of the License at
-package org.apache.hadoop.hdds.security.x509.certificates;
+package org.apache.hadoop.hdds.security.x509.certificates.utils;
+import org.bouncycastle.asn1.DEROctetString;
+import org.bouncycastle.asn1.x509.KeyUsage;
+import java.io.IOException;
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.time.ZoneOffset;
- * A Self Signed Certificate with CA basic constraint can be used to boot-strap
- * a certificate infra-structure, if no external certificate is provided.
+ * A Self Signed Certificate with CertificateServer basic constraint can be used
+ * to bootstrap a certificate infrastructure, if no external certificate is
+ * provided.
-  private Date beginDate;
-  private Date endDate;
+  private LocalDate beginDate;
+  private LocalDate endDate;
-  private boolean isCA;
+   *
-   * @param ca - isCA?
-      Date beginDate, Date endDate, SecurityConfig configuration,
-      KeyPair keyPair, boolean ca) {
+      LocalDate beginDate, LocalDate endDate, SecurityConfig configuration,
+      KeyPair keyPair) {
-    this.isCA = ca;
-  private X509CertificateHolder generateCertificate()
-      throws OperatorCreationException, CertIOException {
+  private X509CertificateHolder generateCertificate(boolean isCA)
+      throws OperatorCreationException, IOException {
+    ZoneOffset zoneOffset =
+        beginDate.atStartOfDay(ZoneOffset.systemDefault()).getOffset();
+
+    // Valid from the Start of the day when we generate this Certificate.
+    Date validFrom =
+        Date.from(beginDate.atTime(LocalTime.MIN).toInstant(zoneOffset));
+
+    // Valid till end day finishes.
+    Date validTill =
+        Date.from(endDate.atTime(LocalTime.MAX).toInstant(zoneOffset));
+
-        serial, beginDate, endDate, name, publicKeyInfo);
+        serial, validFrom, validTill, name, publicKeyInfo);
+      int keyUsageFlag = KeyUsage.keyCertSign | KeyUsage.cRLSign;
+      KeyUsage keyUsage = new KeyUsage(keyUsageFlag);
+      builder.addExtension(Extension.keyUsage, false,
+          new DEROctetString(keyUsage));
-    private Date beginDate;
-    private Date endDate;
+    private LocalDate beginDate;
+    private LocalDate endDate;
-    public Builder setBeginDate(Date date) {
-      this.beginDate = new Date(date.toInstant().toEpochMilli());
+    public Builder setBeginDate(LocalDate date) {
+      this.beginDate = date;
-    public Builder setEndDate(Date date) {
-      this.endDate = new Date(date.toInstant().toEpochMilli());
+    public Builder setEndDate(LocalDate date) {
+      this.endDate = date;
-    public X509CertificateHolder build() throws SCMSecurityException {
+    public X509CertificateHolder build()
+        throws SCMSecurityException, IOException {
-      Preconditions.checkArgument(beginDate.before(endDate), "Certificate " +
+      Preconditions.checkArgument(beginDate.isBefore(endDate), "Certificate " +
-      Duration certDuration = Duration.between(beginDate.toInstant(),
-          endDate.toInstant());
-      Preconditions.checkArgument(
-          certDuration.compareTo(config.getMaxCertificateDuration()) < 0,
-          "Certificate life time cannot be greater than max configured value.");
-
+      // We just read the beginDate and EndDate as Start of the Day and
+      // confirm that we do not violate the maxDuration Config.
+      Duration certDuration = Duration.between(beginDate.atStartOfDay(),
+          endDate.atStartOfDay());
+      Duration maxDuration = config.getMaxCertificateDuration();
+      if (certDuration.compareTo(maxDuration) > 0) {
+        throw new SCMSecurityException("The cert duration violates the " +
+            "maximum configured value. Please check the hdds.x509.max" +
+            ".duration config key. Current Value: " + certDuration +
+            " config: " + maxDuration);
+      }
-          this.scmID, this.clusterID, this.beginDate, this.endDate,
-          this.config, key, isCA);
+              this.scmID, this.clusterID, this.beginDate, this.endDate,
+              this.config, key);
-        return rootCertificate.generateCertificate();
+        return rootCertificate.generateCertificate(isCA);

INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 UPD43 UPD43 INS44 UPD43 UPD66 UPD66 INS66 UPD42 UPD42 UPD43 UPD43 INS39 INS42 UPD42 INS60 INS60 INS60 UPD43 UPD43 MOV43 MOV43 INS43 UPD42 UPD42 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 UPD42 UPD42 UPD43 MOV41 UPD43 MOV41 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS60 INS60 INS21 UPD42 UPD42 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 MOV43 UPD42 UPD42 INS39 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 MOV32 MOV32 MOV34 INS53 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS40 INS9 INS14 UPD42 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS40 INS40 INS43 INS42 INS43 INS42 UPD42 UPD42 INS43 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS45 INS45 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL42 DEL42 DEL27 DEL45 DEL32 DEL21 DEL42