Merge changes from trunk

+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+import org.apache.hadoop.util.DataChecksum;
+
-import org.apache.hadoop.classification.InterfaceAudience;
-import org.apache.hadoop.classification.InterfaceStability;
-
-  private Checksum sum;
+  private final DataChecksum sum;
-  protected FSOutputSummer(Checksum sum, int maxChunkSize, int checksumSize) {
+  // We want this value to be a multiple of 3 because the native code checksums
+  // 3 chunks simultaneously. The chosen value of 9 strikes a balance between
+  // limiting the number of JNI calls and flushing to the underlying stream
+  // relatively frequently.
+  private static final int BUFFER_NUM_CHUNKS = 9;
+  
+  protected FSOutputSummer(DataChecksum sum) {
-    this.buf = new byte[maxChunkSize];
-    this.checksum = new byte[checksumSize];
+    this.buf = new byte[sum.getBytesPerChecksum() * BUFFER_NUM_CHUNKS];
+    this.checksum = new byte[sum.getChecksumSize() * BUFFER_NUM_CHUNKS];
-   * a length of <code>len</code>, and its checksum
+   * a length of <code>len > 0</code>, and its checksum
-  protected abstract void writeChunk(byte[] b, int offset, int len, byte[] checksum)
-  throws IOException;
+  protected abstract void writeChunk(byte[] b, int bOffset, int bLen,
+      byte[] checksum, int checksumOffset, int checksumLen) throws IOException;
-    sum.update(b);
-      // local buffer is empty and user data has one chunk
-      // checksum and output data
+      // local buffer is empty and user buffer size >= local buffer size, so
+      // simply checksum the user buffer and send it directly to the underlying
+      // stream
-      sum.update(b, off, length);
-      writeChecksumChunk(b, off, length, false);
+      writeChecksumChunks(b, off, length);
-    sum.update(b, off, bytesToCopy);
-    flushBuffer(false);
+    flushBuffer(false, true);
-  /* Forces any buffered output bytes to be checksumed and written out to
-   * the underlying output stream.  If keep is true, then the state of 
-   * this object remains intact.
+  /* Forces buffered output bytes to be checksummed and written out to
+   * the underlying output stream. If there is a trailing partial chunk in the
+   * buffer,
+   * 1) flushPartial tells us whether to flush that chunk
+   * 2) if flushPartial is true, keep tells us whether to keep that chunk in the
+   * buffer (if flushPartial is false, it is always kept in the buffer)
+   *
+   * Returns the number of bytes that were flushed but are still left in the
+   * buffer (can only be non-zero if keep is true).
-  protected synchronized void flushBuffer(boolean keep) throws IOException {
-    if (count != 0) {
-      int chunkLen = count;
+  protected synchronized int flushBuffer(boolean keep,
+      boolean flushPartial) throws IOException {
+    int bufLen = count;
+    int partialLen = bufLen % sum.getBytesPerChecksum();
+    int lenToFlush = flushPartial ? bufLen : bufLen - partialLen;
+    if (lenToFlush != 0) {
+      writeChecksumChunks(buf, 0, lenToFlush);
+      if (!flushPartial || keep) {
+        count = partialLen;
+        System.arraycopy(buf, bufLen - count, buf, 0, count);
+      } else {
-      writeChecksumChunk(buf, 0, chunkLen, keep);
-      if (keep) {
-        count = chunkLen;
+
+    // total bytes left minus unflushed bytes left
+    return count - (bufLen - lenToFlush);
+  }
+
+  /**
+   * Checksums all complete data chunks and flushes them to the underlying
+   * stream. If there is a trailing partial chunk, it is not flushed and is
+   * maintained in the buffer.
+   */
+  public void flush() throws IOException {
+    flushBuffer(false, false);
-  /** Generate checksum for the data chunk and output data chunk & checksum
-   * to the underlying output stream. If keep is true then keep the
-   * current checksum intact, do not reset it.
+  /** Generate checksums for the given data chunks and output chunks & checksums
+   * to the underlying output stream.
-  private void writeChecksumChunk(byte b[], int off, int len, boolean keep)
+  private void writeChecksumChunks(byte b[], int off, int len)
-    int tempChecksum = (int)sum.getValue();
-    if (!keep) {
-      sum.reset();
+    sum.calculateChunkedSums(b, off, len, checksum, 0);
+    for (int i = 0; i < len; i += sum.getBytesPerChecksum()) {
+      int chunkLen = Math.min(sum.getBytesPerChecksum(), len - i);
+      int ckOffset = i / sum.getBytesPerChecksum() * sum.getChecksumSize();
+      writeChunk(b, off + i, chunkLen, checksum, ckOffset,
+          sum.getChecksumSize());
-    int2byte(tempChecksum, checksum);
-    writeChunk(b, off, len, checksum);
-  protected synchronized void resetChecksumChunk(int size) {
-    sum.reset();
+  protected synchronized void setChecksumBufSize(int size) {
+    this.checksum = new byte[((size - 1) / sum.getBytesPerChecksum() + 1) *
+        sum.getChecksumSize()];
+
+  protected synchronized void resetChecksumBufSize() {
+    setChecksumBufSize(sum.getBytesPerChecksum() * BUFFER_NUM_CHUNKS);
+  }

MOV26 MOV26 INS26 INS40 INS23 INS31 INS31 INS83 UPD43 INS83 INS83 INS83 INS39 INS59 INS44 INS44 UPD39 INS44 INS8 INS29 INS83 INS39 INS42 INS43 INS8 UPD42 INS8 UPD42 MOV21 INS83 INS83 INS39 INS42 INS8 UPD42 INS42 INS34 UPD43 UPD42 UPD42 INS39 INS42 INS39 INS42 INS39 INS42 MOV60 INS60 INS60 INS25 INS41 INS65 INS42 INS21 INS21 INS24 INS21 UPD42 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS66 INS66 INS66 INS32 UPD66 UPD66 INS32 INS58 INS27 INS7 INS8 INS7 INS32 INS9 UPD42 INS42 INS27 INS42 INS16 INS42 INS34 MOV21 MOV25 INS42 INS36 INS42 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS39 INS59 INS42 INS42 INS42 INS32 MOV60 INS60 MOV21 INS22 INS3 INS42 INS27 INS27 INS27 INS42 INS32 INS42 INS42 INS27 INS27 INS8 INS27 INS42 INS34 INS42 INS42 INS39 INS59 INS52 INS42 INS5 INS27 INS32 INS42 INS32 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS38 INS42 INS21 MOV21 INS42 INS42 UPD42 INS32 INS42 INS27 INS27 UPD42 INS42 INS32 INS39 INS85 INS36 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 UPD42 INS42 INS42 INS42 INS27 INS42 INS34 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS27 INS34 INS42 INS42 MOV42 UPD42 MOV42 INS36 INS32 INS27 MOV42 UPD42 MOV42 INS42 INS34 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL27 DEL8 DEL25 DEL8 DEL66 DEL39 DEL42 DEL44 DEL39 DEL32 DEL11 DEL42 DEL42 DEL38 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL32