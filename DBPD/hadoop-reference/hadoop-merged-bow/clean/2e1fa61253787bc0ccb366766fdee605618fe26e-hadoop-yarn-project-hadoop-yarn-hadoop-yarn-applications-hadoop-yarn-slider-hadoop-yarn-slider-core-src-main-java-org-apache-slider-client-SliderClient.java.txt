YARN-5740. Add a new field in Slider status output - lifetime (remaining). Contributed by Jian He

+import org.apache.hadoop.yarn.api.records.ApplicationTimeout;
+import java.io.ByteArrayOutputStream;
+import java.io.OutputStreamWriter;
-    Set<String> appInstances = getApplicationList(clustername, args);
-    // getApplicationList never returns null
-    return !appInstances.isEmpty() ? EXIT_SUCCESS
-        : ((appInstances.isEmpty() && isUnset(clustername)) ? EXIT_SUCCESS
-               : EXIT_FALSE);
+    Set<ApplicationReport> appInstances = getApplicationList(clustername, args);
+    if (!appInstances.isEmpty()) {
+      return EXIT_SUCCESS;
+    } else {
+      return EXIT_FALSE;
+    }
-  public Set<String> getApplicationList(String clustername) throws IOException,
-      YarnException {
+  public Set<ApplicationReport> getApplicationList(String clustername)
+      throws IOException, YarnException {
-  public Set<String> getApplicationList(String clustername, ActionListArgs args)
-      throws IOException, YarnException {
+  public Set<ApplicationReport> getApplicationList(String clustername,
+      ActionListArgs args) throws IOException, YarnException {
-    Set<String> listedInstances = new HashSet<String>();
+    Set<ApplicationReport> listedInstances = new HashSet<ApplicationReport>();
-        listedInstances.add(name);
+        listedInstances.add(report);
-  private ApplicationReport findInstance(String appname)
+  public ApplicationReport findInstance(String appname)
+    if (statusArgs.lifetime) {
+      queryAndPrintLifetime(clustername);
+      return EXIT_SUCCESS;
+    }
+
+  private void queryAndPrintLifetime(String appName)
+      throws YarnException, IOException {
+    ApplicationReport appReport = findInstance(appName);
+    if (appReport == null) {
+      throw new YarnException("No application found for " + appName);
+    }
+    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    PrintWriter timeoutStr =
+        new PrintWriter(new OutputStreamWriter(baos, Charset.forName("UTF-8")));
+    try {
+      ApplicationTimeout lifetime = appReport.getApplicationTimeouts()
+          .get(ApplicationTimeoutType.LIFETIME);
+      if (lifetime.getRemainingTime() == -1L) {
+        timeoutStr.append(appName + " has no lifetime configured.");
+      } else {
+        timeoutStr.append("\t" + ApplicationTimeoutType.LIFETIME);
+        timeoutStr.print(" expires at : " + lifetime.getExpiryTime());
+        timeoutStr.println(
+            ".\tRemaining Time : " + lifetime.getRemainingTime() + " seconds");
+      }
+      System.out.println(baos.toString("UTF-8"));
+    } finally {
+      timeoutStr.close();
+    }
+  }
+
-  public List<ApplicationReport> getApplications() throws YarnException, IOException {
+  public List<ApplicationReport> getApplications()
+      throws YarnException, IOException {

INS26 INS26 INS26 INS40 INS40 INS40 INS31 UPD74 UPD74 UPD83 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS25 UPD43 UPD43 INS25 MOV43 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS54 UPD74 MOV38 INS8 INS8 UPD42 UPD42 UPD74 INS40 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS8 UPD43 INS41 INS41 UPD43 INS21 INS41 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS14 INS42 INS42 INS14 INS60 INS25 INS21 INS21 UPD42 INS42 INS42 UPD42 UPD74 INS32 INS42 INS42 INS42 INS14 INS43 INS43 INS14 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS43 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS32 INS32 INS38 INS21 INS21 INS21 INS21 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS40 INS42 INS42 INS34 INS32 INS32 INS32 INS32 INS42 INS42 INS45 UPD42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS45 INS45 INS40 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL36 DEL42 DEL42 DEL16 DEL36 DEL16 DEL41