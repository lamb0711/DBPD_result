HDFS-8818. Changes the global moveExecutor to per datanode executors and changes MAX_SIZE_TO_MOVE to be configurable.

-  private final ExecutorService moveExecutor;
+  private final Allocator moverThreadAllocator;
+
+  static class Allocator {
+    private final int max;
+    private int count = 0;
+
+    Allocator(int max) {
+      this.max = max;
+    }
+
+    synchronized int allocate(int n) {
+      final int remaining = max - count;
+      if (remaining <= 0) {
+        return 0;
+      } else {
+        final int allocated = remaining < n? remaining: n;
+        count += allocated;
+        return allocated;
+      }
+    }
+
+    synchronized void reset() {
+      count = 0;
+    }
+  }
+
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Start moving " + this);
-      }
+      LOG.info("Start moving " + this);
-    private final int maxConcurrentMoves;
+    private ExecutorService moveExecutor;
-      this.maxConcurrentMoves = maxConcurrentMoves;
+    synchronized ExecutorService initMoveExecutor(int poolSize) {
+      return moveExecutor = Executors.newFixedThreadPool(poolSize);
+    }
+
+    synchronized ExecutorService getMoveExecutor() {
+      return moveExecutor;
+    }
+
+    synchronized void shutdownMoveExecutor() {
+      if (moveExecutor != null) {
+        moveExecutor.shutdown();
+        moveExecutor = null;
+      }
+    }
+
+      LOG.info(this + " activateDelay " + delta/1000.0 + " seconds");
-    /** Check if the node can schedule more blocks to move */
-    synchronized boolean isPendingQNotFull() {
-      return pendings.size() < maxConcurrentMoves;
-    }
-
-      if (!isDelayActive() && isPendingQNotFull()) {
+      if (!isDelayActive()) {
+      if (LOG.isTraceEnabled()) {
+        LOG.trace("getBlocks(" + getDatanodeInfo() + ", "
+            + StringUtils.TraditionalBinaryPrefix.long2String(size, "B", 2)
+            + ") returns " + newBlocks.getBlocks().length + " blocks.");
+      }
-            // filter bad candidates
+            if (LOG.isTraceEnabled()) {
+              LOG.trace("Add " + block + " to " + this);
+            }
-    private static final int SOURCE_BLOCKS_MIN_SIZE = 5;
-
-      return srcBlocks.size() < SOURCE_BLOCKS_MIN_SIZE && blocksToReceive > 0;
+      return blocksToReceive > 0;
+        if (LOG.isTraceEnabled()) {
+          LOG.trace(this + " blocksToReceive=" + blocksToReceive
+              + ", scheduledSize=" + getScheduledSize()
+              + ", srcBlocks#=" + srcBlocks.size());
+        }
+            LOG.info("Failed to find a pending move "  + noPendingMoveIteration
+                + " times.  Skipping " + this);
+          LOG.info("Time up (max time=" + MAX_ITERATION_TIME/1000
+              + " seconds).  Skipping " + this);
-    this.moveExecutor = Executors.newFixedThreadPool(moverThreads);
+    this.moverThreadAllocator = new Allocator(moverThreads);
+
+    final DDatanode targetDn = p.target.getDDatanode();
+    ExecutorService moveExecutor = targetDn.getMoveExecutor();
+    if (moveExecutor == null) {
+      final int nThreads = moverThreadAllocator.allocate(maxConcurrentMovesPerNode);
+      if (nThreads > 0) {
+        moveExecutor = targetDn.initMoveExecutor(nThreads);
+      }
+    }
+    if (moveExecutor == null) {
+      LOG.warn("No mover threads available: skip moving " + p);
+      return;
+    }
+
+
+    moverThreadAllocator.reset();
+    for(StorageGroup t : targets) {
+      t.getDDatanode().shutdownMoveExecutor();
+    }
-    moveExecutor.shutdownNow();

INS23 INS55 MOV31 INS83 INS83 INS43 INS59 INS83 INS42 INS23 INS23 INS31 INS31 INS31 MOV23 INS31 INS31 MOV21 INS8 INS42 INS42 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 UPD39 UPD42 INS8 INS60 INS60 INS25 INS25 MOV21 INS21 INS70 INS42 INS42 INS34 INS39 INS42 INS21 INS39 INS42 INS60 INS25 INS21 MOV21 INS42 INS39 INS42 INS41 INS42 INS41 INS25 INS21 INS25 INS83 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS44 INS42 INS8 INS7 INS83 INS39 INS59 INS27 INS8 INS8 INS7 INS7 INS42 INS27 INS8 INS32 MOV38 INS32 INS8 MOV27 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS33 INS21 INS41 INS42 INS42 INS43 INS42 INS21 INS22 INS42 INS42 INS27 INS42 INS34 INS41 INS60 INS21 INS41 INS42 INS34 UPD42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS21 INS25 UPD42 INS43 INS42 INS40 INS42 INS42 INS42 INS83 INS39 INS59 INS27 INS8 INS32 INS42 INS32 INS52 INS42 INS42 INS42 INS34 INS83 INS39 INS59 INS7 INS42 INS42 INS42 INS42 INS32 INS7 INS27 INS45 INS32 INS32 INS8 INS42 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS27 INS32 INS42 INS42 INS16 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS52 INS45 INS27 INS42 INS42 INS27 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS7 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS34 INS45 INS32 INS45 INS32 INS45 INS22 INS45 INS8 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS45 INS34 INS32 INS42 INS25 MOV21 INS42 INS42 INS27 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 MOV8 INS52 INS45 INS42 INS45 INS32 INS45 MOV32 INS32 INS27 INS52 INS42 INS42 INS21 INS42 INS42 INS42 INS27 INS27 INS45 INS32 INS45 INS42 INS45 INS52 INS45 INS27 INS42 INS42 INS27 INS42 INS34 INS45 INS42 INS45 INS52 DEL42 DEL42 DEL32 DEL8 DEL25 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL66 DEL65 DEL29 DEL32 DEL42 DEL27 DEL41 DEL8 DEL42 DEL32 DEL27 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL8 DEL42 DEL42 DEL32 DEL21