YARN-2162. Add ability in Fair Scheduler to optionally configure maxResources in terms of percentage. (Yufei Gu)

+import org.apache.hadoop.yarn.server.resourcemanager.resource.ResourceType;
-  public static Resource parseResourceConfigValue(String val)
+  public static ConfigurableResource parseResourceConfigValue(String val)
+    ConfigurableResource configurableResource;
-      int memory = findResource(val, "mb");
-      int vcores = findResource(val, "vcores");
-      return BuilderUtils.newResource(memory, vcores);
+      if (val.contains("%")) {
+        configurableResource = new ConfigurableResource(
+            getResourcePercentage(val));
+      } else {
+        int memory = findResource(val, "mb");
+        int vcores = findResource(val, "vcores");
+        configurableResource = new ConfigurableResource(
+            BuilderUtils.newResource(memory, vcores));
+      }
+    return configurableResource;
+  }
+
+  private static double[] getResourcePercentage(
+      String val) throws AllocationConfigurationException {
+    double[] resourcePercentage = new double[ResourceType.values().length];
+    String[] strings = val.split(",");
+    if (strings.length == 1) {
+      double percentage = findPercentage(strings[0], "");
+      for (int i = 0; i < ResourceType.values().length; i++) {
+        resourcePercentage[i] = percentage/100;
+      }
+    } else {
+      resourcePercentage[0] = findPercentage(val, "memory")/100;
+      resourcePercentage[1] = findPercentage(val, "cpu")/100;
+    }
+    return resourcePercentage;
+  }
+
+  private static double findPercentage(String val, String units)
+    throws AllocationConfigurationException {
+    final Pattern pattern =
+        Pattern.compile("((\\d+)(\\.\\d*)?)\\s*%\\s*" + units);
+    Matcher matcher = pattern.matcher(val);
+    if (!matcher.find()) {
+      if (units.equals("")) {
+        throw new AllocationConfigurationException("Invalid percentage: " +
+            val);
+      } else {
+        throw new AllocationConfigurationException("Missing resource: " +
+            units);
+      }
+    }
+    return Double.parseDouble(matcher.group(1));
-    throws AllocationConfigurationException {
-    Pattern pattern = Pattern.compile("(\\d+)(\\.\\d*)?\\s*" + units);
+      throws AllocationConfigurationException {
+    final Pattern pattern = Pattern.compile("(\\d+)(\\.\\d*)?\\s*" + units);

INS26 INS40 INS31 INS31 UPD43 INS83 INS83 INS5 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 UPD42 INS60 INS41 INS39 INS85 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS43 INS59 INS8 INS42 INS42 INS5 INS59 INS5 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS83 INS43 INS59 INS43 INS59 INS38 INS8 INS32 INS83 INS42 INS42 MOV21 INS25 INS39 INS85 INS42 INS3 INS43 INS85 INS42 INS32 INS40 INS34 INS60 INS24 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS25 INS42 INS42 INS32 INS32 INS8 MOV8 INS5 INS22 INS42 INS42 INS42 INS45 INS39 INS59 INS58 INS27 INS37 INS8 INS7 INS7 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS34 INS42 INS42 INS45 INS21 INS21 INS39 INS85 INS32 INS42 INS42 INS32 INS39 INS59 INS42 INS22 INS42 INS21 INS2 INS27 INS2 INS27 INS45 INS42 INS42 INS42 INS45 INS53 INS53 INS7 INS7 INS42 INS42 INS42 INS2 INS45 INS42 INS34 INS32 INS42 INS7 INS42 INS34 INS32 INS34 INS42 INS34 INS32 INS34 INS14 INS14 INS42 INS14 INS42 INS14 INS42 INS34 INS42 INS42 INS2 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS27 INS43 INS27 INS43 INS32 INS43 MOV32 INS42 INS42 INS42 INS34 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 DEL41