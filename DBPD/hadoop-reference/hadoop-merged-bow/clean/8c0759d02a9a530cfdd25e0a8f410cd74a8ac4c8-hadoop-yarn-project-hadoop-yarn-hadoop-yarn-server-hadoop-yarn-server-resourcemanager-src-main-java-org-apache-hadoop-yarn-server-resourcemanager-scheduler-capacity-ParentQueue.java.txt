YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.

-          ActivityDiagnosticConstant.NOT_ABLE_TO_ACCESS_PARTITION
-              + candidates.getPartition());
+          ActivityDiagnosticConstant.QUEUE_NOT_ABLE_TO_ACCESS_PARTITION);
-            getParentName(), getQueueName(), ActivityState.SKIPPED,
-            ActivityDiagnosticConstant.QUEUE_MAX_CAPACITY_LIMIT);
+            getParentName(), getQueueName(), ActivityState.REJECTED,
+            ActivityDiagnosticConstant.QUEUE_HIT_MAX_CAPACITY_LIMIT);
-        if (node != null && !isReserved) {
-          if (rootQueue) {
-            ActivitiesLogger.NODE.finishAllocatedNodeAllocation(
-                activitiesManager, node,
-                assignedToChild.getAssignmentInformation()
-                    .getFirstAllocatedOrReservedContainerId(),
-                AllocationState.ALLOCATED);
-          }
-        } else{
-          if (rootQueue) {
-            ActivitiesLogger.NODE.finishAllocatedNodeAllocation(
-                activitiesManager, node,
-                assignedToChild.getAssignmentInformation()
-                    .getFirstAllocatedOrReservedContainerId(),
-                AllocationState.RESERVED);
-          }
+        if (rootQueue) {
+          ActivitiesLogger.NODE.finishAllocatedNodeAllocation(
+              activitiesManager, node,
+              assignedToChild.getAssignmentInformation()
+                  .getFirstAllocatedOrReservedContainerId(),
+              isReserved ?
+                  AllocationState.RESERVED : AllocationState.ALLOCATED);
-    return node.getReservedContainer() == null && Resources.greaterThanOrEqual(
-        resourceCalculator, clusterResource, Resources
+    boolean accept = node.getReservedContainer() == null && Resources
+        .greaterThanOrEqual(resourceCalculator, clusterResource, Resources
+    if (!accept) {
+      ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, node,
+          getParentName(), getQueueName(), ActivityState.REJECTED,
+          () -> node.getReservedContainer() != null ?
+              ActivityDiagnosticConstant.
+                  QUEUE_SKIPPED_BECAUSE_SINGLE_NODE_RESERVED :
+              ActivityDiagnosticConstant.
+                  QUEUE_SKIPPED_BECAUSE_SINGLE_NODE_RESOURCE_INSUFFICIENT);
+      if (rootQueue) {
+        ActivitiesLogger.NODE.finishSkippedNodeAllocation(activitiesManager,
+            node);
+      }
+    }
+    return accept;

INS60 INS25 INS39 INS59 INS38 INS8 INS42 INS42 MOV27 INS42 INS21 INS25 INS32 INS42 INS8 INS40 MOV25 INS40 INS42 INS42 INS42 INS32 INS32 INS40 INS86 INS21 INS42 INS42 INS16 INS32 UPD40 UPD40 INS27 INS40 INS40 INS40 INS42 INS42 INS42 INS32 INS33 MOV32 INS16 INS42 INS42 INS42 INS40 INS40 DEL40 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL42 DEL33 DEL27 DEL42 DEL38 DEL27 DEL42 DEL40 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL8 DEL25