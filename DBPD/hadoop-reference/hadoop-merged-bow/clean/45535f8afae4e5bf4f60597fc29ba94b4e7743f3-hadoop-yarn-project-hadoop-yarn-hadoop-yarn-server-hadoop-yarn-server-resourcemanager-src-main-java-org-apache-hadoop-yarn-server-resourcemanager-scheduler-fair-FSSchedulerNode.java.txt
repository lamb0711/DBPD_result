YARN-6895. [FairScheduler] Preemption reservation may cause regular reservation leaks. (Miklos Szegedi via Yufei Gu)

+import com.google.common.collect.Lists;
-import java.util.Iterator;
+import java.util.LinkedList;
+/**
+ * Fair Scheduler specific node features.
+ */
-        getReservedContainer().getContainer().getId().getApplicationAttemptId(); 
+        getReservedContainer().getContainer().getId()
+            .getApplicationAttemptId();
+   * Returns whether a preemption is tracked on the node for the specified app.
+   * @return if preempted containers are reserved for the app
+   */
+  synchronized boolean isPreemptedForApp(FSAppAttempt app){
+    return resourcesPreemptedForApp.containsKey(app);
+  }
+
+  /**
-  private synchronized void cleanupPreemptionList() {
-    Iterator<Map.Entry<FSAppAttempt, Resource>> iterator =
-        resourcesPreemptedForApp.entrySet().iterator();
-    while(iterator.hasNext()) {
-      FSAppAttempt app = iterator.next().getKey();
-      if (app.isStopped() || !app.isStarved()) {
+  private void cleanupPreemptionList() {
+    // Synchronize separately to avoid potential deadlocks
+    // This may cause delayed deletion of reservations
+    LinkedList<FSAppAttempt> candidates;
+    synchronized (this) {
+      candidates = Lists.newLinkedList(resourcesPreemptedForApp.keySet());
+    }
+    for (FSAppAttempt app : candidates) {
+      if (app.isStopped() || !app.isStarved() ||
+          (Resources.isNone(app.getFairshareStarvation()) &&
+           Resources.isNone(app.getMinshareStarvation()))) {
-        Resources.subtractFrom(totalResourcesPreempted,
-            resourcesPreemptedForApp.get(app));
-        appIdToAppMap.remove(app.getApplicationAttemptId());
-        iterator.remove();
+        synchronized (this) {
+          Resource removed = resourcesPreemptedForApp.remove(app);
+          if (removed != null) {
+            Resources.subtractFrom(totalResourcesPreempted,
+                removed);
+            appIdToAppMap.remove(app.getApplicationAttemptId());
+          }
+        }
-    appIdToAppMap.putIfAbsent(app.getApplicationAttemptId(), app);
-    resourcesPreemptedForApp.putIfAbsent(app, Resource.newInstance(0, 0));
-    Resource appReserved = resourcesPreemptedForApp.get(app);
+    Resource appReserved = Resources.createResource(0);
-      containersForPreemption.add(container);
-      Resources.addTo(appReserved, container.getAllocatedResource());
-      Resources.addTo(totalResourcesPreempted,
-          container.getAllocatedResource());
+      if(containersForPreemption.add(container)) {
+        Resources.addTo(appReserved, container.getAllocatedResource());
+      }
+    }
+
+    synchronized (this) {
+      if (!Resources.isNone(appReserved)) {
+        Resources.addTo(totalResourcesPreempted,
+            appReserved);
+        appIdToAppMap.putIfAbsent(app.getApplicationAttemptId(), app);
+        resourcesPreemptedForApp.
+            putIfAbsent(app, Resource.newInstance(0, 0));
+        Resources.addTo(resourcesPreemptedForApp.get(app), appReserved);
+      }

MOV26 INS26 INS40 UPD40 INS29 INS31 INS65 INS29 INS83 INS39 INS42 INS44 INS8 INS66 INS65 INS65 INS43 INS42 INS41 INS60 INS51 INS70 INS51 INS66 INS66 INS42 INS32 UPD74 MOV74 INS59 INS52 INS8 INS44 INS42 INS8 INS52 INS8 INS42 INS42 INS42 UPD43 MOV43 UPD42 MOV42 INS21 INS43 INS42 INS25 INS32 INS25 INS25 UPD42 INS7 MOV42 MOV27 INS8 INS42 INS42 INS34 MOV32 INS8 INS38 INS8 INS42 INS32 INS36 INS51 MOV21 INS32 INS21 MOV21 MOV21 INS21 UPD42 MOV42 UPD42 MOV42 INS32 INS27 INS52 INS8 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS60 MOV25 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 MOV43 INS59 INS27 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS33 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 DEL83 DEL40 DEL43 DEL74 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL32 DEL59 DEL60 DEL32 DEL43 DEL42 DEL59 DEL60 DEL8 DEL61 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21