HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.

+import java.io.IOException;
-   * In order to start modifying the block, the BlockInfo should be converted
-   * to {@link BlockInfoContiguousUnderConstruction}.
+   * In order to start modifying the block, the BlockInfo should be converted to
+   * {@link BlockInfoContiguousUnderConstruction} or
+   * {@link BlockInfoStripedUnderConstruction}.
+
+  static BlockInfo convertToCompleteBlock(BlockInfo blk) throws IOException {
+    if (blk instanceof BlockInfoContiguousUnderConstruction) {
+      return ((BlockInfoContiguousUnderConstruction) blk)
+          .convertToCompleteBlock();
+    } else if (blk instanceof BlockInfoStripedUnderConstruction) {
+      return ((BlockInfoStripedUnderConstruction) blk).convertToCompleteBlock();
+    } else {
+      return blk;
+    }
+  }
+
+  static void commitBlock(BlockInfo blockInfo, Block reported)
+      throws IOException {
+    if (blockInfo instanceof BlockInfoContiguousUnderConstruction) {
+      ((BlockInfoContiguousUnderConstruction) blockInfo).commitBlock(reported);
+    } else if (blockInfo instanceof BlockInfoStripedUnderConstruction) {
+      ((BlockInfoStripedUnderConstruction) blockInfo).commitBlock(reported);
+    }
+  }
+
+  static void addReplica(BlockInfo ucBlock, DatanodeStorageInfo storageInfo,
+      Block reportedBlock, HdfsServerConstants.ReplicaState reportedState) {
+    assert ucBlock instanceof BlockInfoContiguousUnderConstruction ||
+        ucBlock instanceof BlockInfoStripedUnderConstruction;
+    if (ucBlock instanceof BlockInfoContiguousUnderConstruction) {
+      ((BlockInfoContiguousUnderConstruction) ucBlock).addReplicaIfNotPresent(
+          storageInfo, reportedBlock, reportedState);
+    } else { // StripedUC
+      ((BlockInfoStripedUnderConstruction) ucBlock).addReplicaIfNotPresent(
+          storageInfo, reportedBlock, reportedState);
+    }
+  }
+
+  static int getNumExpectedLocations(BlockInfo ucBlock) {
+    assert ucBlock instanceof BlockInfoContiguousUnderConstruction ||
+        ucBlock instanceof BlockInfoStripedUnderConstruction;
+    if (ucBlock instanceof BlockInfoContiguousUnderConstruction) {
+      return ((BlockInfoContiguousUnderConstruction) ucBlock)
+          .getNumExpectedLocations();
+    } else { // StripedUC
+      return ((BlockInfoStripedUnderConstruction) ucBlock)
+          .getNumExpectedLocations();
+    }
+  }
+
+  public static DatanodeStorageInfo[] getExpectedStorageLocations(
+      BlockInfo ucBlock) {
+    assert ucBlock instanceof BlockInfoContiguousUnderConstruction ||
+        ucBlock instanceof BlockInfoStripedUnderConstruction;
+    if (ucBlock instanceof BlockInfoContiguousUnderConstruction) {
+      return ((BlockInfoContiguousUnderConstruction) ucBlock)
+          .getExpectedStorageLocations();
+    } else { // StripedUC
+      return ((BlockInfoStripedUnderConstruction) ucBlock)
+          .getExpectedStorageLocations();
+    }
+  }
+
+  public static void setExpectedLocations(BlockInfo ucBlock,
+      DatanodeStorageInfo[] targets) {
+    assert ucBlock instanceof BlockInfoContiguousUnderConstruction ||
+        ucBlock instanceof BlockInfoStripedUnderConstruction;
+    if (ucBlock instanceof BlockInfoContiguousUnderConstruction) {
+      ((BlockInfoContiguousUnderConstruction) ucBlock)
+          .setExpectedLocations(targets);
+    } else { // StripedUC
+      ((BlockInfoStripedUnderConstruction) ucBlock)
+          .setExpectedLocations(targets);
+    }
+  }
+
+  public static long getBlockRecoveryId(BlockInfo ucBlock) {
+    assert ucBlock instanceof BlockInfoContiguousUnderConstruction ||
+        ucBlock instanceof BlockInfoStripedUnderConstruction;
+    if (ucBlock instanceof BlockInfoContiguousUnderConstruction) {
+      return ((BlockInfoContiguousUnderConstruction) ucBlock)
+          .getBlockRecoveryId();
+    } else { // StripedUC
+      return ((BlockInfoStripedUnderConstruction) ucBlock).getBlockRecoveryId();
+    }
+  }

INS26 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS5 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 MOV66 INS42 INS43 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS6 INS25 INS43 INS42 INS6 INS25 INS43 INS85 INS43 INS42 INS6 INS25 INS43 INS42 INS5 INS42 INS6 INS25 INS43 INS42 INS6 INS25 UPD66 UPD66 INS65 INS42 INS62 INS8 INS25 INS42 INS42 INS62 INS8 INS25 INS42 INS42 INS42 INS40 INS27 INS62 INS8 INS8 INS42 INS27 INS62 INS8 INS8 INS42 INS42 INS27 INS62 INS8 INS8 INS42 INS43 INS85 INS27 INS62 INS8 INS8 INS42 INS27 INS62 INS8 INS8 INS42 INS42 INS43 INS41 INS62 INS8 INS8 INS42 INS43 INS21 INS62 INS8 INS62 INS62 INS42 INS43 INS21 INS21 INS62 INS62 INS42 INS43 INS41 INS41 INS62 INS62 INS42 INS43 INS41 INS41 INS42 INS62 INS62 INS42 INS43 INS21 INS21 INS62 INS62 INS42 INS43 INS41 INS41 INS42 INS32 INS42 INS43 INS41 INS41 INS42 INS32 INS42 INS43 INS21 INS42 INS43 INS42 INS43 INS42 INS32 INS32 INS42 INS43 INS42 INS43 INS42 INS32 INS32 INS42 INS43 INS42 INS43 INS42 INS32 INS32 INS42 INS43 INS42 INS43 INS42 INS32 INS32 INS42 INS43 INS42 INS43 INS42 INS32 INS32 INS36 INS42 INS42 INS32 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS36 INS42 INS42 INS42 INS36 INS42 INS36 INS42 INS42 INS42 INS36 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS36 INS42 INS36 INS42 INS11 INS36 INS42 INS11 INS36 INS42 INS42 INS11 INS11 INS11 INS11 INS11 INS11 INS11 INS11 INS11 INS11 INS43 INS42 INS11 INS43 INS42 INS11 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42