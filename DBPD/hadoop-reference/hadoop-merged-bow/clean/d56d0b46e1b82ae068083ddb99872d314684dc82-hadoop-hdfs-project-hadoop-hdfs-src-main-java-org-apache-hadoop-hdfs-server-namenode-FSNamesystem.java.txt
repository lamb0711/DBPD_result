commit correct version of HDFS-5121

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68

-    checkOperation(OperationCategory.WRITE);
+  @SuppressWarnings("unchecked")
-    checkOperation(OperationCategory.WRITE);
-      results = cacheManager.addDirectives(directives, pc);
+      results = cacheManager.addDirectives(pc, directives);
-      if (isAuditEnabled() && isExternalInvocation()) {
+      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-  List<Fallible<Long>> removePathCacheEntries(List<Long> ids) throws IOException {
-    CacheEntryWithPayload retryCacheEntry =
-        RetryCache.waitForCompletion(retryCache, null);
-    if (retryCacheEntry != null && retryCacheEntry.isSuccess()) {
-      return (List<Fallible<Long>>) retryCacheEntry.getPayload();
-    }
+  @SuppressWarnings("unchecked")
+  List<Fallible<Long>> removePathCacheEntries(List<Long> ids)
+      throws IOException {
-    checkOperation(OperationCategory.WRITE);
-            "Cannot remove path cache directives", safeMode);
+            "Cannot add path cache directive", safeMode);
-      results = cacheManager.removeEntries(ids, pc);
+      results = cacheManager.removeEntries(pc, ids);
-      if (isAuditEnabled() && isExternalInvocation()) {
+      if (success) {
+        getEditLog().logSync();
+      }
+      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      RetryCache.setState(retryCacheEntry, success, results);
-    getEditLog().logSync();
-  List<PathCacheEntry> listPathCacheEntries(long startId, String pool,
-      int maxReplies) throws IOException {
-    checkOperation(OperationCategory.READ);
-    readLock();
-    try {
-      checkOperation(OperationCategory.READ);
-      return cacheManager.listPathCacheEntries(startId, pool, maxReplies);
-    } finally {
-      readUnlock();
-    }
+  List<PathCacheEntry> listPathCacheEntries(long startId,
+      Long poolId, int maxReplies) throws IOException {
+    LOG.info("listPathCacheEntries with " + startId + " " + poolId);
+    final FSPermissionChecker pc = getPermissionChecker();
+    return cacheManager.listPathCacheEntries(pc, startId, poolId, maxReplies);
-  public void addCachePool(CachePoolInfo req) throws IOException {
+  public CachePool addCachePool(CachePoolInfo req) throws IOException {
-    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    CacheEntryWithPayload cacheEntry =
+        RetryCache.waitForCompletion(retryCache, null);
-      return; // Return previous response
+      return (CachePool)cacheEntry.getPayload(); // Return previous response
-    checkOperation(OperationCategory.WRITE);
-    boolean success = false;
+    CachePool pool = null;
-      cacheManager.addCachePool(req);
+      pool = cacheManager.addCachePool(req);
+      RetryCache.setState(cacheEntry, true);
-      success = true;
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(success, "addCachePool", req.getPoolName(), null, null);
-      }
-      RetryCache.setState(cacheEntry, success);
-    
+
+    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      logAuditEvent(true, "addCachePool", req.getPoolName(), null, null);
+    }
+    return pool;
-  public void modifyCachePool(CachePoolInfo req) throws IOException {
+  public void modifyCachePool(long poolId, CachePoolInfo info)
+      throws IOException {
-    checkOperation(OperationCategory.WRITE);
-    boolean success = false;
-            "Cannot modify cache pool " + req.getPoolName(), safeMode);
+            "Cannot modify cache pool " + info.getPoolName(), safeMode);
-      cacheManager.modifyCachePool(req);
+      cacheManager.modifyCachePool(poolId, info);
+      RetryCache.setState(cacheEntry, true);
-      success = true;
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(success, "modifyCachePool", req.getPoolName(), null, null);
-      }
-      RetryCache.setState(cacheEntry, success);
+    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      logAuditEvent(true, "modifyCachePool", info.getPoolName(), null, null);
+    }
-  public void removeCachePool(String cachePoolName) throws IOException {
+  public void removeCachePool(long poolId) throws IOException {
-    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
-    if (cacheEntry != null && cacheEntry.isSuccess()) {
-      return; // Return previous response
-    }
-    checkOperation(OperationCategory.WRITE);
-    boolean success = false;
+    CachePool pool;
+      pool = cacheManager.getCachePool(poolId);
+        String identifier;
+        if (pool == null) {
+          identifier = "with id " + Long.toString(poolId);
+        } else {
+          identifier = pool.getInfo().getPoolName();
+        }
-            "Cannot remove cache pool " + cachePoolName, safeMode);
+            "Cannot remove cache pool " + identifier, safeMode);
-      cacheManager.removeCachePool(cachePoolName);
+      cacheManager.removeCachePool(poolId);
-      success = true;
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(success, "removeCachePool", cachePoolName, null, null);
-      }
-      RetryCache.setState(cacheEntry, success);
-    
+
+    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      logAuditEvent(true, "removeCachePool", pool.getInfo().getPoolName(),
+          null, null);
+    }
-  public List<CachePoolInfo> listCachePools(String prevKey,
+  public List<CachePool> listCachePools(long prevKey,
-    final FSPermissionChecker pc = getPermissionChecker();
-    List<CachePoolInfo> results;
-    checkOperation(OperationCategory.READ);
+    List<CachePool> results;
-      results = cacheManager.listCachePools(pc, prevKey, maxRepliesPerRequest);
+      results = cacheManager.listCachePools(prevKey, maxRepliesPerRequest);

INS79 INS79 INS8 INS43 INS44 UPD74 MOV74 INS42 INS45 INS42 INS45 UPD43 UPD42 MOV21 MOV60 MOV41 INS42 INS60 INS25 INS41 INS39 INS42 UPD42 INS25 INS39 UPD42 INS60 INS54 MOV25 UPD43 INS39 MOV21 UPD42 UPD43 INS43 INS59 INS8 INS27 INS8 INS42 INS8 INS27 INS8 UPD43 MOV43 INS59 INS8 INS8 UPD42 UPD74 MOV74 INS25 UPD42 INS42 INS27 INS42 UPD42 UPD42 INS42 INS42 INS33 MOV21 INS32 MOV32 INS21 MOV21 INS32 MOV32 INS21 UPD42 UPD42 MOV42 MOV21 MOV25 INS21 INS25 MOV21 MOV21 UPD43 INS42 INS8 INS45 INS42 INS45 INS42 INS33 INS11 INS7 INS32 UPD42 MOV42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS32 INS7 MOV32 INS8 INS42 UPD42 UPD42 MOV21 INS43 INS32 INS42 MOV32 INS42 INS42 INS42 INS9 INS42 INS9 INS45 MOV32 INS33 INS33 UPD42 INS42 INS42 INS42 INS42 INS9 INS42 INS9 INS45 INS32 INS33 INS33 INS42 INS32 INS60 INS25 MOV53 UPD42 INS9 INS32 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 INS27 INS8 INS8 INS32 UPD42 MOV42 UPD45 INS32 UPD42 INS42 UPD42 MOV42 MOV33 INS21 MOV21 INS42 INS42 UPD42 MOV42 INS7 INS7 UPD42 UPD42 INS42 INS27 INS42 INS32 INS45 MOV32 INS32 INS42 UPD42 UPD42 INS42 UPD42 MOV42 INS42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL25 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL40 DEL42 DEL40 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL39 DEL40 DEL32 DEL21 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL33 DEL33 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL40 DEL32 DEL21 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL33 DEL33 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL32 DEL59 DEL60 DEL27 DEL27 DEL41 DEL8 DEL25 DEL40 DEL32 DEL39 DEL42 DEL9 DEL59 DEL60 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL43 DEL42 DEL40 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42