HADOOP-12047. Indicate preference not to affect input buffers during coding in erasure coder. (Contributed by Kai Zheng)

+import java.util.HashMap;
+import java.util.Map;
+  private final Map<CoderOption, Object> coderOptions;
+    this.coderOptions = new HashMap<>(3);
+
+    coderOptions.put(CoderOption.PREFER_DIRECT_BUFFER, preferDirectBuffer());
+    coderOptions.put(CoderOption.ALLOW_CHANGE_INPUTS, false);
+    coderOptions.put(CoderOption.ALLOW_VERBOSE_DUMP, false);
+  }
+
+  @Override
+  public Object getCoderOption(CoderOption option) {
+    if (option == null) {
+      throw new HadoopIllegalArgumentException("Invalid option");
+    }
+    return coderOptions.get(option);
+  }
+
+  @Override
+  public void setCoderOption(CoderOption option, Object value) {
+    if (option == null || value == null) {
+      throw new HadoopIllegalArgumentException(
+          "Invalid option or option value");
+    }
+    if (option.isReadOnly()) {
+      throw new HadoopIllegalArgumentException(
+          "The option is read-only: " + option.name());
+    }
+
+    coderOptions.put(option, value);
-  public boolean preferDirectBuffer() {
+  public void release() {
+    // Nothing to do by default
+  }
+
+  /**
+   * Tell if direct buffer is preferred or not. It's for callers to
+   * decide how to allocate coding chunk buffers, using DirectByteBuffer or
+   * bytes array. It will return false by default.
+   * @return true if native buffer is preferred for performance consideration,
+   * otherwise false.
+   */
+  protected boolean preferDirectBuffer() {
-  @Override
-  public void release() {
-    // Nothing to do by default
+  protected boolean isAllowingChangeInputs() {
+    Object value = getCoderOption(CoderOption.ALLOW_CHANGE_INPUTS);
+    if (value != null && value instanceof Boolean) {
+      return (boolean) value;
+    }
+    return false;
+  }
+
+  protected boolean isAllowingVerboseDump() {
+    Object value = getCoderOption(CoderOption.ALLOW_VERBOSE_DUMP);
+    if (value != null && value instanceof Boolean) {
+      return (boolean) value;
+    }
+    return false;

INS26 INS26 MOV31 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS78 INS83 INS43 INS42 INS44 INS8 MOV78 INS83 INS39 INS42 INS44 INS44 INS8 INS29 UPD83 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS43 INS43 INS43 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS43 INS42 INS25 INS41 INS43 INS42 INS43 INS42 INS25 INS25 INS21 INS65 INS65 INS60 INS25 INS41 INS60 INS25 INS41 INS42 INS42 INS42 INS7 INS32 INS32 INS32 INS42 INS27 INS8 INS32 INS42 INS42 INS27 INS8 INS32 INS8 INS32 INS66 INS66 INS66 INS66 INS66 INS43 INS59 INS27 INS8 INS9 INS43 INS59 INS27 INS8 INS9 INS22 INS14 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS9 INS42 INS42 INS40 INS9 INS42 INS33 INS53 INS42 INS42 INS42 INS27 INS27 INS53 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS62 INS41 INS42 INS42 INS32 INS27 INS62 INS41 INS52 INS42 INS74 INS34 INS42 INS14 INS42 INS33 INS42 INS33 INS14 INS14 INS42 INS40 INS42 INS33 INS42 INS43 INS11 INS42 INS40 INS42 INS33 INS42 INS43 INS11 INS43 INS43 INS45 INS43 INS45 INS43 INS27 INS42 INS39 INS42 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42