HDFS-5203. Concurrent clients that add a cache directive on the same path may prematurely uncache each other.  (Chris Nauroth via Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1533651 13f79535-47bb-0310-9956-ffa450edef68

-      listing.addRow("<id>", "The id of the cache directive to remove. " + 
+      listing.addRow("<id>", "The id of the cache directive to remove.  " + 
-        "of PathBasedCache directive IDs, use the -list command.");
+        "of PathBasedCache directive IDs, use the -listDirectives command.");
+  private static class RemovePathBasedCacheDirectivesCommand implements Command {
+    @Override
+    public String getName() {
+      return "-removeDirectives";
+    }
+
+    @Override
+    public String getShortUsage() {
+      return "[" + getName() + " <path>]\n";
+    }
+
+    @Override
+    public String getLongUsage() {
+      TableListing listing = getOptionDescriptionListing();
+      listing.addRow("<path>", "The path of the cache directives to remove.  " +
+        "You must have write permission on the pool of the directive in order " +
+        "to remove it.  To see a list of cache directives, use the " +
+        "-listDirectives command.");
+      return getShortUsage() + "\n" +
+        "Remove every cache directive with the specified path.\n\n" +
+        listing.toString();
+    }
+
+    @Override
+    public int run(Configuration conf, List<String> args) throws IOException {
+      String path = StringUtils.popOptionWithArgument("-path", args);
+      if (path == null) {
+        System.err.println("You must specify a path with -path.");
+        return 1;
+      }
+      if (!args.isEmpty()) {
+        System.err.println("Can't understand argument: " + args.get(0));
+        System.err.println("Usage is " + getShortUsage());
+        return 1;
+      }
+      DistributedFileSystem dfs = getDFS(conf);
+      RemoteIterator<PathBasedCacheDescriptor> iter =
+          dfs.listPathBasedCacheDescriptors(null, new Path(path));
+      int exitCode = 0;
+      while (iter.hasNext()) {
+        PathBasedCacheDescriptor entry = iter.next();
+        try {
+          dfs.removePathBasedCacheDescriptor(entry);
+          System.out.println("Removed PathBasedCache directive " +
+              entry.getEntryId());
+        } catch (RemovePathBasedCacheDescriptorException e) {
+          System.err.println(prettifyException(e));
+          exitCode = 2;
+        }
+      }
+      if (exitCode == 0) {
+        System.out.println("Removed every PathBasedCache directive with path " +
+            path);
+      }
+      return exitCode;
+    }
+  }
+
+    new RemovePathBasedCacheDirectivesCommand(),

INS55 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS42 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS60 INS21 INS41 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS25 INS60 INS60 INS60 INS61 INS25 INS41 INS14 INS45 INS27 INS43 INS59 INS32 INS27 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS38 INS8 INS43 INS59 INS74 INS59 INS39 INS59 INS32 INS8 INS27 INS8 INS42 INS43 INS45 INS32 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS27 INS32 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS32 INS21 INS21 INS41 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS34 INS42 INS42 INS60 INS54 INS42 INS34 INS21 INS42 UPD45 UPD45 INS42 INS42 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS34 INS42 INS42 INS32 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS14 INS43 INS59 INS8 INS12 INS32 INS40 INS42 INS45 INS40 INS42 INS27 INS40 INS42 INS27 INS43 INS42 INS42 INS42 INS32 INS21 INS21 INS44 INS8 INS40 INS42 INS27 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS45 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS7 INS45 INS32 INS40 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS42