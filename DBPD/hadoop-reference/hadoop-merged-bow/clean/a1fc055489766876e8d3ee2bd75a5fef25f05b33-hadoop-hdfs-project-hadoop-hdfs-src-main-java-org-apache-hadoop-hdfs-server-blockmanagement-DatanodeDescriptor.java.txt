HDFS-1623. High Availability Framework for HDFS NN. Contributed by Todd Lipcon, Aaron T. Myers, Eli Collins, Uma Maheswara Rao G, Bikas Saha, Suresh Srinivas, Jitendra Nath Pandey, Hari Mankude, Brandon Li, Sanjay Radia, Mingjie Lai, and Gregory Chanan


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296534 13f79535-47bb-0310-9956-ffa450edef68

+
+    synchronized void clear() {
+      blockq.clear();
+    }
+  /**
+   * Set to false on any NN failover, and reset to true
+   * whenever a block report is received.
+   */
+  private boolean heartbeatedSinceFailover = false;
+  
+  /**
+   * At startup or at any failover, the DNs in the cluster may
+   * have pending block deletions from a previous incarnation
+   * of the NameNode. Thus, we consider their block contents
+   * stale until we have received a block report. When a DN
+   * is considered stale, any replicas on it are transitively
+   * considered stale. If any block has at least one stale replica,
+   * then no invalidations will be processed for this block.
+   * See HDFS-1972.
+   */
+  private boolean blockContentsStale = true;
+  
+  
+  /** Set to false after processing first block report */
+  private boolean firstBlockReport = true;
+  
+  
+  public void clearBlockQueues() {
+    synchronized (invalidateBlocks) {
+      this.invalidateBlocks.clear();
+      this.recoverBlocks.clear();
+      this.replicateBlocks.clear();
+    }
+  }
+    this.heartbeatedSinceFailover = true;
+  public boolean areBlockContentsStale() {
+    return blockContentsStale;
+  }
+  public void markStaleAfterFailover() {
+    heartbeatedSinceFailover = false;
+    blockContentsStale = true;
+  }
+
+  public void receivedBlockReport() {
+    if (heartbeatedSinceFailover) {
+      blockContentsStale = false;
+    }
+    firstBlockReport = false;
+  }
+  
+  boolean isFirstBlockReport() {
+    return firstBlockReport;
+  }
+
+  @Override
+  public String dumpDatanode() {
+    StringBuilder sb = new StringBuilder(super.dumpDatanode());
+    int repl = replicateBlocks.size();
+    if (repl > 0) {
+      sb.append(" ").append(repl).append(" blocks to be replicated;");
+    }
+    int inval = invalidateBlocks.size();
+    if (inval > 0) {
+      sb.append(" ").append(inval).append(" blocks to be invalidated;");      
+    }
+    int recover = recoverBlocks.size();
+    if (recover > 0) {
+      sb.append(" ").append(recover).append(" blocks to be recovered;");
+    }
+    return sb.toString();
+  }

INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS65 INS42 INS9 INS65 INS42 INS9 INS65 INS42 INS9 INS51 INS21 INS41 INS21 INS21 INS25 INS21 INS41 INS42 INS42 INS60 INS60 INS25 INS60 INS25 INS60 INS25 INS41 INS21 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS8 INS7 INS42 INS7 INS7 INS42 INS8 INS7 INS42 INS43 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS32 INS32 INS21 INS21 INS21 INS22 INS9 INS42 INS9 INS42 INS9 INS21 INS42 INS9 INS42 INS42 INS14 INS42 INS32 INS42 INS34 INS21 INS42 INS32 INS42 INS34 INS21 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS52 INS42 INS7 INS43 INS48 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45