Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

+import java.util.ArrayList;
+import org.apache.hadoop.http.lib.StaticUserWebFilter;
+import org.apache.hadoop.security.AuthenticationFilterInitializer;
+import org.apache.hadoop.security.authentication.server.KerberosAuthenticationHandler;
+import org.apache.hadoop.yarn.server.resourcemanager.security.RMAuthenticationHandler;
+import org.apache.hadoop.yarn.server.security.http.RMAuthenticationFilter;
+import org.apache.hadoop.yarn.server.security.http.RMAuthenticationFilterInitializer;
-  private String webAppAddress;
+  @VisibleForTesting
+  protected String webAppAddress;
-    webAppAddress = WebAppUtils.getRMWebAppURLWithoutScheme(this.conf);
+    webAppAddress = WebAppUtils.getWebAppBindURL(this.conf,
+                      YarnConfiguration.RM_BIND_HOST,
+                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));
-      rmContext.setClientRMService(clientRM);
+
+    // Use the customized yarn filter instead of the standard kerberos filter to
+    // allow users to authenticate using delegation tokens
+    // 4 conditions need to be satisfied -
+    // 1. security is enabled
+    // 2. http auth type is set to kerberos
+    // 3. "yarn.resourcemanager.webapp.use-yarn-filter" override is set to true
+    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer
+
+    Configuration conf = getConfig();
+    boolean useYarnAuthenticationFilter =
+        conf.getBoolean(
+          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,
+          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);
+    String authPrefix = "hadoop.http.authentication.";
+    String authTypeKey = authPrefix + "type";
+    String filterInitializerConfKey = "hadoop.http.filter.initializers";
+    String actualInitializers = "";
+    Class<?>[] initializersClasses =
+        conf.getClasses(filterInitializerConfKey);
+
+    boolean hasHadoopAuthFilterInitializer = false;
+    boolean hasRMAuthFilterInitializer = false;
+    if (initializersClasses != null) {
+      for (Class<?> initializer : initializersClasses) {
+        if (initializer.getName().equals(
+          AuthenticationFilterInitializer.class.getName())) {
+          hasHadoopAuthFilterInitializer = true;
+        }
+        if (initializer.getName().equals(
+          RMAuthenticationFilterInitializer.class.getName())) {
+          hasRMAuthFilterInitializer = true;
+        }
+      }
+      if (UserGroupInformation.isSecurityEnabled()
+          && useYarnAuthenticationFilter
+          && hasHadoopAuthFilterInitializer
+          && conf.get(authTypeKey, "").equals(
+            KerberosAuthenticationHandler.TYPE)) {
+        ArrayList<String> target = new ArrayList<String>();
+        for (Class<?> filterInitializer : initializersClasses) {
+          if (filterInitializer.getName().equals(
+            AuthenticationFilterInitializer.class.getName())) {
+            if (hasRMAuthFilterInitializer == false) {
+              target.add(RMAuthenticationFilterInitializer.class.getName());
+            }
+            continue;
+          }
+          target.add(filterInitializer.getName());
+        }
+        actualInitializers = StringUtils.join(",", target);
+
+        LOG.info("Using RM authentication filter(kerberos/delegation-token)"
+            + " for RM webapp authentication");
+        RMAuthenticationHandler
+          .setSecretManager(getClientRMService().rmDTSecretManager);
+        String yarnAuthKey =
+            authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;
+        conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());
+        conf.set(filterInitializerConfKey, actualInitializers);
+      }
+    }
+
+    // if security is not enabled and the default filter initializer has not 
+    // been set, set the initializer to include the
+    // RMAuthenticationFilterInitializer which in turn will set up the simple
+    // auth filter.
+
+    String initializers = conf.get(filterInitializerConfKey);
+    if (!UserGroupInformation.isSecurityEnabled()) {
+      if (initializersClasses == null || initializersClasses.length == 0) {
+        conf.set(filterInitializerConfKey,
+          RMAuthenticationFilterInitializer.class.getName());
+        conf.set(authTypeKey, "simple");
+      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {
+        conf.set(filterInitializerConfKey,
+          RMAuthenticationFilterInitializer.class.getName() + ","
+              + initializers);
+        conf.set(authTypeKey, "simple");
+      }
+    }
+
+    // recover AMRMTokenSecretManager
+    rmContext.getAMRMTokenSecretManager().recover(state);
+
+    // Need to stop previous rmDispatcher before assigning new dispatcher
+    // otherwise causes "AsyncDispatcher event handler" thread leak
+    ((Service) rmDispatcher).stop();

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS78 UPD83 INS8 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS60 INS25 MOV60 MOV60 MOV25 MOV21 INS21 INS21 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS5 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS43 INS59 INS38 INS8 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS74 INS85 INS42 INS32 INS42 INS9 INS42 INS9 INS42 INS33 INS70 INS25 INS42 INS42 INS32 INS32 INS25 INS32 INS42 INS42 INS36 INS42 INS42 INS42 INS22 INS40 MOV32 INS42 INS42 INS42 INS40 INS40 INS42 INS45 INS43 INS76 INS42 INS42 INS42 INS44 INS42 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS25 INS42 INS42 INS11 INS52 INS42 INS42 INS74 INS42 INS25 INS25 INS32 INS42 INS42 INS32 INS60 INS70 INS21 INS21 INS21 INS60 INS21 INS21 INS27 INS27 INS21 INS21 INS32 INS8 INS43 INS42 INS43 INS76 INS32 INS8 INS32 INS8 INS42 INS42 INS32 INS42 INS40 INS74 INS59 INS44 INS42 INS8 INS7 INS32 INS32 INS43 INS59 INS32 INS32 INS42 INS33 INS40 INS34 INS32 INS32 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS32 INS42 INS32 INS21 INS32 INS42 INS32 INS21 INS42 INS42 INS42 INS45 INS43 INS43 INS42 INS14 INS74 INS42 INS25 INS21 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS22 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS57 INS42 INS32 INS32 INS42 INS42 INS57 INS42 INS7 INS42 INS42 INS57 INS42 INS7 INS42 INS42 INS74 INS43 INS76 INS32 INS8 INS32 INS42 INS42 INS45 INS42 INS45 INS45 INS32 INS42 INS42 INS40 INS57 INS42 INS57 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS43 INS42 INS9 INS43 INS42 INS9 INS43 INS43 INS42 INS32 INS42 INS32 INS25 INS18 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS57 INS42 INS43 INS42 INS9 INS21 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS57 INS42 INS43 INS42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8