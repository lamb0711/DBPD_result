HDDS-99. Adding SCM Audit log. Contributed by Dinesh Chitlangia.

+import com.google.common.collect.Maps;
+import org.apache.hadoop.ipc.Server;
+import org.apache.hadoop.ozone.audit.AuditAction;
+import org.apache.hadoop.ozone.audit.AuditEventStatus;
+import org.apache.hadoop.ozone.audit.AuditLogger;
+import org.apache.hadoop.ozone.audit.AuditLoggerType;
+import org.apache.hadoop.ozone.audit.AuditMessage;
+import org.apache.hadoop.ozone.audit.Auditor;
+import org.apache.hadoop.ozone.audit.SCMAction;
+import java.util.Map;
-    StorageContainerDatanodeProtocol {
+    StorageContainerDatanodeProtocol, Auditor {
+  private static final AuditLogger AUDIT =
+      new AuditLogger(AuditLoggerType.SCMLOGGER);
+
-    return scm.getScmNodeManager().getVersion(versionRequest)
-        .getProtobufMessage();
+    boolean auditSuccess = true;
+    try {
+      return scm.getScmNodeManager().getVersion(versionRequest)
+              .getProtobufMessage();
+    } catch (Exception ex) {
+      auditSuccess = false;
+      AUDIT.logReadFailure(
+          buildAuditMessageForFailure(SCMAction.GET_VERSION, null, ex));
+      throw ex;
+    } finally {
+      if(auditSuccess) {
+        AUDIT.logReadSuccess(
+            buildAuditMessageForSuccess(SCMAction.GET_VERSION, null));
+      }
+    }
+    boolean auditSuccess = true;
+    Map<String, String> auditMap = Maps.newHashMap();
+    auditMap.put("datanodeDetails", datanodeDetails.toString());
+
-    return getRegisteredResponse(registeredCommand);
+    try {
+      return getRegisteredResponse(registeredCommand);
+    } catch (Exception ex) {
+      auditSuccess = false;
+      AUDIT.logWriteFailure(
+          buildAuditMessageForFailure(SCMAction.REGISTER, auditMap, ex));
+      throw ex;
+    } finally {
+      if(auditSuccess) {
+        AUDIT.logWriteSuccess(
+            buildAuditMessageForSuccess(SCMAction.REGISTER, auditMap));
+      }
+    }
-    return SCMHeartbeatResponseProto.newBuilder()
-        .setDatanodeUUID(heartbeat.getDatanodeDetails().getUuid())
-        .addAllCommands(cmdResponses).build();
+    boolean auditSuccess = true;
+    Map<String, String> auditMap = Maps.newHashMap();
+    auditMap.put("datanodeUUID", heartbeat.getDatanodeDetails().getUuid());
+    auditMap.put("command", flatten(cmdResponses.toString()));
+    try {
+      return SCMHeartbeatResponseProto.newBuilder()
+          .setDatanodeUUID(heartbeat.getDatanodeDetails().getUuid())
+          .addAllCommands(cmdResponses).build();
+    } catch (Exception ex) {
+      auditSuccess = false;
+      AUDIT.logWriteFailure(
+          buildAuditMessageForFailure(SCMAction.SEND_HEARTBEAT, auditMap, ex)
+      );
+      throw ex;
+    } finally {
+      if(auditSuccess) {
+        AUDIT.logWriteSuccess(
+            buildAuditMessageForSuccess(SCMAction.SEND_HEARTBEAT, auditMap)
+        );
+      }
+    }
+  @Override
+  public AuditMessage buildAuditMessageForSuccess(
+      AuditAction op, Map<String, String> auditMap) {
+    return new AuditMessage.Builder()
+        .setUser((Server.getRemoteUser() == null) ? null :
+            Server.getRemoteUser().getUserName())
+        .atIp((Server.getRemoteIp() == null) ? null :
+            Server.getRemoteIp().getHostAddress())
+        .forOperation(op.getAction())
+        .withParams(auditMap)
+        .withResult(AuditEventStatus.SUCCESS.toString())
+        .withException(null)
+        .build();
+  }
+
+  @Override
+  public AuditMessage buildAuditMessageForFailure(AuditAction op, Map<String,
+      String> auditMap, Throwable throwable) {
+    return new AuditMessage.Builder()
+        .setUser((Server.getRemoteUser() == null) ? null :
+            Server.getRemoteUser().getUserName())
+        .atIp((Server.getRemoteIp() == null) ? null :
+            Server.getRemoteIp().getHostAddress())
+        .forOperation(op.getAction())
+        .withParams(auditMap)
+        .withResult(AuditEventStatus.FAILURE.toString())
+        .withException(throwable)
+        .build();
+  }
+
+  private static String flatten(String input) {
+    return input
+        .replaceAll(System.lineSeparator(), " ")
+        .trim()
+        .replaceAll(" +", " ");
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS42 INS83 INS83 INS83 INS43 INS59 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS14 INS60 INS54 INS60 INS60 INS21 INS54 INS60 INS60 INS21 INS21 INS54 INS42 INS42 INS43 INS42 INS74 INS42 INS41 INS42 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS43 INS40 INS39 INS59 MOV8 INS12 INS8 INS39 INS59 INS74 INS59 INS32 INS8 INS12 INS8 INS39 INS59 INS74 INS59 INS32 INS32 INS8 INS12 INS8 INS42 INS43 INS43 INS43 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS9 INS44 INS8 INS25 INS42 INS9 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS32 MOV41 INS44 INS8 INS25 INS42 INS9 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 MOV41 INS44 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS45 INS43 INS42 INS21 INS21 INS53 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS53 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS21 INS21 INS53 INS42 INS8 INS32 INS42 INS33 INS32 INS42 INS42 INS32 INS42 INS42 INS7 INS32 INS42 INS21 INS42 INS7 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS21 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS45 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS9 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS33 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS40 INS33 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS16 INS42 INS42 INS32 INS42 INS16 INS42 INS42 INS14 INS42 INS16 INS36 INS33 INS32 INS14 INS42 INS16 INS36 INS33 INS32 INS43 INS36 INS33 INS32 INS27 INS32 INS42 INS43 INS36 INS33 INS32 INS27 INS32 INS42 INS40 INS27 INS32 INS42 INS32 INS33 INS42 INS42 INS40 INS27 INS32 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42