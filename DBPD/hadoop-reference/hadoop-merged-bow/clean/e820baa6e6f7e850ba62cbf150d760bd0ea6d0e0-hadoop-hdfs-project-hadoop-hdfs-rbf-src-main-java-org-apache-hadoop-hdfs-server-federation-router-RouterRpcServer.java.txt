HDFS-15417. RBF: Get the datanode report from cache for federation WebHDFS operations (#2080)


+import static org.apache.hadoop.hdfs.server.federation.router.RBFConfigKeys.DN_REPORT_CACHE_EXPIRE;
+import static org.apache.hadoop.hdfs.server.federation.router.RBFConfigKeys.DN_REPORT_CACHE_EXPIRE_MS_DEFAULT;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.TimeUnit;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.util.concurrent.ListenableFuture;
+import com.google.common.util.concurrent.ListeningExecutorService;
+import com.google.common.util.concurrent.MoreExecutors;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+  /** DN type -> full DN report. */
+  private final LoadingCache<DatanodeReportType, DatanodeInfo[]> dnCache;
+
+
+    long dnCacheExpire = conf.getTimeDuration(
+        DN_REPORT_CACHE_EXPIRE,
+        DN_REPORT_CACHE_EXPIRE_MS_DEFAULT, TimeUnit.MILLISECONDS);
+    this.dnCache = CacheBuilder.newBuilder()
+        .build(new DatanodeReportCacheLoader());
+
+    // Actively refresh the dn cache in a configured interval
+    Executors
+        .newSingleThreadScheduledExecutor()
+        .scheduleWithFixedDelay(() -> this.dnCache
+                .asMap()
+                .keySet()
+                .parallelStream()
+                .forEach((key) -> this.dnCache.refresh(key)),
+            0,
+            dnCacheExpire, TimeUnit.MILLISECONDS);
+   * Get the datanode report from cache.
+   *
+   * @param type Type of the datanode.
+   * @return List of datanodes.
+   * @throws IOException If it cannot get the report.
+   */
+  DatanodeInfo[] getCachedDatanodeReport(DatanodeReportType type)
+      throws IOException {
+    try {
+      DatanodeInfo[] dns = this.dnCache.get(type);
+      if (dns == null) {
+        LOG.debug("Get null DN report from cache");
+        dns = getCachedDatanodeReportImpl(type);
+        this.dnCache.put(type, dns);
+      }
+      return dns;
+    } catch (ExecutionException e) {
+      LOG.error("Cannot get the DN report for {}", type, e);
+      Throwable cause = e.getCause();
+      if (cause instanceof IOException) {
+        throw (IOException) cause;
+      } else {
+        throw new IOException(cause);
+      }
+    }
+  }
+
+  private DatanodeInfo[] getCachedDatanodeReportImpl(
+      final DatanodeReportType type) throws IOException {
+    // We need to get the DNs as a privileged user
+    UserGroupInformation loginUser = UserGroupInformation.getLoginUser();
+    RouterRpcServer.setCurrentUser(loginUser);
+
+    try {
+      DatanodeInfo[] dns = clientProto.getDatanodeReport(type);
+      LOG.debug("Refresh cached DN report with {} datanodes", dns.length);
+      return dns;
+    } finally {
+      // Reset ugi to remote user for remaining operations.
+      RouterRpcServer.resetCurrentUser();
+    }
+  }
+
+  /**
-}
+
+  /**
+   * Deals with loading datanode report into the cache and refresh.
+   */
+  private class DatanodeReportCacheLoader
+      extends CacheLoader<DatanodeReportType, DatanodeInfo[]> {
+
+    private ListeningExecutorService executorService;
+
+    DatanodeReportCacheLoader() {
+      ThreadFactory threadFactory = new ThreadFactoryBuilder()
+          .setNameFormat("DatanodeReport-Cache-Reload")
+          .setDaemon(true)
+          .build();
+
+      executorService = MoreExecutors.listeningDecorator(
+          Executors.newSingleThreadExecutor(threadFactory));
+    }
+
+    @Override
+    public DatanodeInfo[] load(DatanodeReportType type) throws Exception {
+      return getCachedDatanodeReportImpl(type);
+    }
+
+    /**
+     * Override the reload method to provide an asynchronous implementation,
+     * so that the query will not be slowed down by the cache refresh. It
+     * will return the old cache value and schedule a background refresh.
+     */
+    @Override
+    public ListenableFuture<DatanodeInfo[]> reload(
+        final DatanodeReportType type, DatanodeInfo[] oldValue)
+        throws Exception {
+      return executorService.submit(new Callable<DatanodeInfo[]>() {
+        @Override
+        public DatanodeInfo[] call() throws Exception {
+          return load(type);
+        }
+      });
+    }
+  }
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS55 INS29 INS83 INS83 INS74 INS59 INS29 INS5 INS42 INS44 INS43 INS8 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS83 INS42 INS74 INS23 INS31 INS31 INS31 INS65 INS43 INS43 INS5 INS42 INS60 INS21 INS21 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS42 INS54 INS43 INS85 INS83 INS43 INS42 INS42 INS60 INS21 INS54 INS65 INS43 INS43 INS5 INS83 INS43 INS59 INS42 INS8 INS78 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS66 INS42 INS42 INS43 INS85 INS39 INS59 INS7 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS8 INS12 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS66 INS42 INS42 INS43 INS85 INS42 INS42 INS60 INS21 INS42 INS43 INS85 INS43 INS42 INS42 INS41 INS65 INS42 INS43 INS5 INS83 INS43 INS42 INS5 INS42 INS42 INS41 INS42 INS42 INS32 INS22 INS32 INS32 INS42 INS86 INS34 INS42 INS40 INS60 INS25 INS41 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS41 INS21 INS42 INS43 INS59 INS7 INS42 INS42 INS32 INS66 INS66 INS66 INS42 INS43 INS85 INS42 INS43 INS85 INS32 INS42 INS42 INS42 INS42 INS40 INS52 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS5 INS59 INS27 INS8 INS42 INS43 INS42 INS21 INS60 INS25 INS42 INS42 INS5 INS59 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS32 INS42 INS86 INS43 INS85 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS32 INS43 INS59 INS62 INS8 INS8 INS43 INS85 INS42 INS32 INS42 INS42 INS45 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS74 INS1 INS42 INS32 INS42 INS59 INS32 INS42 INS22 INS42 INS42 INS32 INS7 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS53 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS43 INS5 INS31 INS32 INS42 INS42 INS22 INS42 INS42 INS52 INS42 INS42 INS42 INS45 INS42 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS14 INS14 INS42 INS45 INS42 INS43 INS85 INS78 INS83 INS5 INS42 INS43 INS8 INS22 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS85 INS42 INS41 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42