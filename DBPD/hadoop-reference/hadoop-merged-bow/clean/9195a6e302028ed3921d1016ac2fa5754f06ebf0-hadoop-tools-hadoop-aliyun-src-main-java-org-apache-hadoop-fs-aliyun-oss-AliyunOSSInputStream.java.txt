HADOOP-15027. AliyunOSS: Support multi-thread pre-read to improve sequential read from Hadoop to Aliyun OSS performance. (Contributed by Jinhu Wu)

-import java.io.InputStream;
+import java.util.ArrayDeque;
+import java.util.Queue;
+import java.util.concurrent.ExecutorService;
+import com.google.common.util.concurrent.MoreExecutors;
-  private InputStream wrappedStream = null;
+  private byte[] buffer;
+  private int maxReadAheadPartNumber;
+  private long expectNextPos;
+  private long lastByteStart;
+
+  private ExecutorService readAheadExecutorService;
+  private Queue<ReadBuffer> readBufferQueue = new ArrayDeque<>();
+      ExecutorService readAheadExecutorService, int maxReadAheadPartNumber,
+    this.readAheadExecutorService =
+        MoreExecutors.listeningDecorator(readAheadExecutorService);
+    this.maxReadAheadPartNumber = maxReadAheadPartNumber;
+
+    this.expectNextPos = 0;
+    this.lastByteStart = -1;
-    if (wrappedStream != null) {
+    if (this.buffer != null) {
-      wrappedStream.close();
+      this.buffer = null;
-    wrappedStream = store.retrieve(key, pos, pos + partSize -1);
-    if (wrappedStream == null) {
+    boolean isRandomIO = true;
+    if (pos == this.expectNextPos) {
+      isRandomIO = false;
+    } else {
+      //new seek, remove cache buffers if its byteStart is not equal to pos
+      while (readBufferQueue.size() != 0) {
+        if (readBufferQueue.element().getByteStart() != pos) {
+          readBufferQueue.poll();
+        } else {
+          break;
+        }
+      }
+    }
+
+    this.expectNextPos = pos + partSize;
+
+    int currentSize = readBufferQueue.size();
+    if (currentSize == 0) {
+      //init lastByteStart to pos - partSize, used by for loop below
+      lastByteStart = pos - partSize;
+    } else {
+      ReadBuffer[] readBuffers = readBufferQueue.toArray(
+          new ReadBuffer[currentSize]);
+      lastByteStart = readBuffers[currentSize - 1].getByteStart();
+    }
+
+    int maxLen = this.maxReadAheadPartNumber - currentSize;
+    for (int i = 0; i < maxLen && i < (currentSize + 1) * 2; i++) {
+      if (lastByteStart + partSize * (i + 1) > contentLength) {
+        break;
+      }
+
+      long byteStart = lastByteStart + partSize * (i + 1);
+      long byteEnd = byteStart + partSize -1;
+      if (byteEnd >= contentLength) {
+        byteEnd = contentLength - 1;
+      }
+
+      ReadBuffer readBuffer = new ReadBuffer(byteStart, byteEnd);
+      if (readBuffer.getBuffer().length == 0) {
+        //EOF
+        readBuffer.setStatus(ReadBuffer.STATUS.SUCCESS);
+      } else {
+        this.readAheadExecutorService.execute(
+            new AliyunOSSFileReaderTask(key, store, readBuffer));
+      }
+      readBufferQueue.add(readBuffer);
+      if (isRandomIO) {
+        break;
+      }
+    }
+
+    ReadBuffer readBuffer = readBufferQueue.poll();
+    readBuffer.lock();
+    try {
+      readBuffer.await(ReadBuffer.STATUS.INIT);
+      if (readBuffer.getStatus() == ReadBuffer.STATUS.ERROR) {
+        this.buffer = null;
+      } else {
+        this.buffer = readBuffer.getBuffer();
+      }
+    } catch (InterruptedException e) {
+      LOG.warn("interrupted when wait a read buffer");
+    } finally {
+      readBuffer.unlock();
+    }
+
+    if (this.buffer == null) {
-    int tries = MAX_RETRIES;
-    boolean retry;
-    do {
-      retry = false;
-      try {
-        byteRead = wrappedStream.read();
-      } catch (Exception e) {
-        handleReadException(e, --tries);
-        retry = true;
-      }
-    } while (retry);
+    if (partRemaining != 0) {
+      byteRead = this.buffer[this.buffer.length - (int)partRemaining] & 0xFF;
+    }
-      int tries = MAX_RETRIES;
-      boolean retry;
-      int bytes = -1;
-      do {
-        retry = false;
-        try {
-          bytes = wrappedStream.read(buf, off + bytesRead, len - bytesRead);
-        } catch (Exception e) {
-          handleReadException(e, --tries);
-          retry = true;
+      int bytes = 0;
+      for (int i = this.buffer.length - (int)partRemaining;
+           i < this.buffer.length; i++) {
+        buf[off + bytesRead] = this.buffer[i];
+        bytes++;
+        bytesRead++;
+        if (off + bytesRead >= len) {
+          break;
-      } while (retry);
+      }
-        bytesRead += bytes;
-    if (wrappedStream != null) {
-      wrappedStream.close();
-    }
+    this.buffer = null;
-      AliyunOSSUtils.skipFully(wrappedStream, len);
-  private void handleReadException(Exception e, int tries) throws IOException{
-    if (tries == 0) {
-      throw new IOException(e);
-    }
-
-    LOG.warn("Some exceptions occurred in oss connection, try to reopen oss" +
-        " connection at position '" + position + "', " + e.getMessage());
-    try {
-      Thread.sleep(100);
-    } catch (InterruptedException e2) {
-      LOG.warn(e2.getMessage());
-    }
-    reopen(position);
+  public long getExpectNextPos() {
+    return this.expectNextPos;

INS26 INS26 INS26 MOV23 INS40 UPD40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS5 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS74 INS44 INS44 MOV29 MOV83 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 INS83 INS39 INS42 INS8 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 UPD42 INS14 INS43 INS42 INS39 INS42 INS21 INS21 INS21 INS21 MOV60 MOV25 MOV25 INS60 INS25 INS21 INS60 INS25 INS60 INS24 INS60 INS21 INS54 MOV25 MOV21 MOV21 INS25 MOV21 INS41 UPD42 MOV42 INS42 INS74 INS42 INS7 INS7 INS7 INS7 INS39 INS59 INS27 INS8 INS8 INS7 INS39 INS59 INS27 INS8 INS8 INS39 INS59 INS58 INS27 INS37 INS8 INS43 INS59 INS32 INS8 MOV12 INS8 INS27 INS8 INS7 INS22 INS43 INS22 INS32 INS22 INS42 INS22 INS34 INS22 MOV38 INS22 INS42 INS9 INS42 INS22 INS21 INS61 INS22 MOV27 INS42 INS32 INS42 INS34 INS21 INS60 MOV21 INS42 INS27 INS39 INS59 INS27 INS27 INS42 INS25 INS60 INS60 INS25 INS60 MOV25 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS21 INS25 MOV21 INS22 INS42 INS34 MOV21 INS24 INS22 INS33 INS52 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS7 INS52 INS42 INS7 INS27 INS8 INS52 INS42 INS42 INS42 INS7 INS5 INS59 INS22 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS27 INS8 INS39 INS59 INS39 INS59 INS27 INS8 INS43 INS59 INS8 INS32 INS42 INS8 INS42 INS42 INS32 INS27 INS8 INS8 UPD42 INS52 INS42 INS58 INS27 INS37 INS8 INS52 INS42 INS22 INS33 INS42 INS9 INS32 INS34 INS25 INS42 INS27 INS43 INS85 INS42 INS32 UPD42 INS52 INS42 INS36 INS34 INS27 INS42 INS10 INS42 INS27 INS42 INS27 INS42 INS42 INS21 UPD42 MOV42 INS42 INS14 INS22 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS10 INS42 INS42 INS40 MOV32 INS40 INS21 MOV21 UPD42 UPD42 INS27 UPD42 INS34 INS39 INS59 INS42 INS22 INS42 MOV21 INS21 INS21 INS25 INS52 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS3 INS2 INS42 INS27 INS42 INS27 INS42 INS27 INS27 INS34 INS7 INS43 INS42 INS42 INS32 INS42 INS32 INS32 UPD42 UPD42 INS7 INS7 INS45 INS2 INS34 UPD42 MOV42 INS27 INS22 INS42 INS37 INS37 INS27 INS8 INS32 INS42 INS21 INS10 INS5 INS42 INS42 INS27 INS42 INS34 INS42 INS36 INS42 INS36 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS40 INS22 INS42 INS14 INS22 INS33 INS22 INS32 INS22 INS27 INS22 INS11 INS52 INS42 INS2 INS2 INS42 INS42 INS27 INS42 INS10 INS32 INS42 INS32 INS43 INS85 INS42 MOV34 INS27 INS27 INS42 INS34 INS52 INS42 UPD43 MOV43 INS42 UPD42 MOV42 INS42 INS52 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS22 INS11 INS22 INS42 INS39 INS42 INS42 MOV27 INS22 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 UPD42 INS22 INS42 INS39 INS42 INS52 INS42 INS52 INS42 INS52 INS42 DEL43 DEL33 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL27 DEL42 DEL14 DEL53 DEL34 DEL32 DEL42 DEL42 DEL32 DEL42 DEL8 DEL31 DEL39 DEL42 DEL42 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL38 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL19 DEL42 DEL42 DEL9 DEL39 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL27 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL38 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL19 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL43 DEL45 DEL45 DEL27 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31