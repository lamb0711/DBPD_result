YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)

Change-Id: Ie16e34039d57df50128c73b37516ad0bc7c9590e

-    List<FileStatus> nodeFiles = LogAggregationUtils
-        .getRemoteNodeFileList(conf, appId, logRequest.getAppOwner(),
+    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils
+        .getRemoteNodeFileDir(conf, appId, logRequest.getAppOwner(),
-    if (nodeFiles.isEmpty()) {
+    if (!nodeFiles.hasNext()) {
-    Map<String, Long> checkSumFiles = parseCheckSumFiles(nodeFiles);
+    List<FileStatus> allFiles = getAllNodeFiles(nodeFiles, appId);
+    if (allFiles.isEmpty()) {
+      throw new IOException("There is no available log fils for "
+          + "application:" + appId);
+    }
+    Map<String, Long> checkSumFiles = parseCheckSumFiles(allFiles);
-        nodeFiles, nodeIdStr, appId);
+        allFiles, nodeIdStr, appId);
-    List<FileStatus> nodeFiles = LogAggregationUtils
-        .getRemoteNodeFileList(conf, appId, appOwner, this.remoteRootLogDir,
+    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils
+        .getRemoteNodeFileDir(conf, appId, appOwner, this.remoteRootLogDir,
-    if (nodeFiles.isEmpty()) {
+    if (!nodeFiles.hasNext()) {
-    Map<String, Long> checkSumFiles = parseCheckSumFiles(nodeFiles);
+    List<FileStatus> allFiles = getAllNodeFiles(nodeFiles, appId);
+    if (allFiles.isEmpty()) {
+      throw new IOException("There is no available log fils for "
+          + "application:" + appId);
+    }
+    Map<String, Long> checkSumFiles = parseCheckSumFiles(allFiles);
-        nodeFiles, nodeIdStr, appId);
+        allFiles, nodeIdStr, appId);
-    List<FileStatus> files = new ArrayList<>(nodeFiles);
-    for (FileStatus file : files) {
-      String nodeName = file.getPath().getName();
+    for (FileStatus thisNodeFile : nodeFiles) {
+      String nodeName = thisNodeFile.getPath().getName();
-        if (nodeName.equals(appId + ".har")) {
-          Path p = new Path("har:///" + file.getPath().toUri().getRawPath());
-          files = Arrays.asList(HarFs.get(p.toUri(), conf).listStatus(p));
-          continue;
-        }
-        listOfFiles.add(file);
+        listOfFiles.add(thisNodeFile);
+  private List<FileStatus> getAllNodeFiles(
+      RemoteIterator<FileStatus> nodeFiles, ApplicationId appId)
+      throws IOException {
+    List<FileStatus> listOfFiles = new ArrayList<>();
+    while (nodeFiles != null && nodeFiles.hasNext()) {
+      FileStatus thisNodeFile = nodeFiles.next();
+      String nodeName = thisNodeFile.getPath().getName();
+      if (nodeName.equals(appId + ".har")) {
+        Path p = new Path("har:///"
+            + thisNodeFile.getPath().toUri().getRawPath());
+        nodeFiles = HarFs.get(p.toUri(), conf).listStatusIterator(p);
+        continue;
+      }
+      listOfFiles.add(thisNodeFile);
+    }
+    return listOfFiles;
+  }
+

INS31 INS83 MOV74 INS42 INS44 INS44 INS43 MOV8 INS60 INS25 INS60 INS25 INS74 INS42 INS43 INS42 INS42 INS60 INS61 INS41 INS74 INS38 MOV74 INS59 INS32 INS8 MOV74 INS74 INS38 MOV74 INS59 INS32 INS8 MOV74 UPD42 INS8 INS43 INS43 INS42 INS74 INS59 INS27 MOV8 INS42 INS43 INS43 INS32 INS42 INS32 INS42 INS42 INS53 INS43 INS43 INS32 INS42 INS32 INS42 INS42 INS53 UPD42 INS60 MOV25 INS42 INS42 INS43 INS43 INS42 INS14 INS27 INS32 INS60 INS60 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS14 UPD42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS14 UPD42 UPD42 MOV43 INS59 INS8 INS42 INS42 INS74 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS43 INS59 INS43 INS27 INS43 INS27 INS42 INS32 INS21 INS43 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 MOV43 UPD42 UPD42 DEL32 DEL32 DEL42 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60