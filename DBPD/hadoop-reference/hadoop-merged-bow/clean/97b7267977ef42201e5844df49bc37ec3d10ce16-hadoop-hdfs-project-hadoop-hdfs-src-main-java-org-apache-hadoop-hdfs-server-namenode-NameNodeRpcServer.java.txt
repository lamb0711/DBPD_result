HDFS-5121.  Add RPCs for creating and manipulating cache pools.  (Contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1519841 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.BatchedRemoteIterator;
+import org.apache.hadoop.fs.BatchedRemoteIterator.BatchedEntries;
+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
-  private class PathCacheEntriesIterator
-      implements RemoteIterator<PathCacheEntry> {
-    private long prevId;
+  private class ServerSidePathCacheEntriesIterator
+      extends BatchedRemoteIterator<Long, PathCacheEntry> {
+
-    private final int repliesPerRequest;
-    private List<PathCacheEntry> entries;
-    private int idx;
-    public PathCacheEntriesIterator(long prevId, String pool,
-        int repliesPerRequest) {
-      this.prevId = prevId;
+    public ServerSidePathCacheEntriesIterator(Long firstKey,
+        int maxRepliesPerRequest, String pool) {
+      super(firstKey, maxRepliesPerRequest);
-      this.repliesPerRequest = repliesPerRequest;
-      this.entries = null;
-      this.idx = -1;
-    }
-
-    private void makeRequest() throws IOException {
-      idx = 0;
-      entries = null;
-      entries = namesystem.listPathCacheEntries(prevId, pool,
-          repliesPerRequest);
-      if (entries.isEmpty()) {
-        entries = null;
-      }
-    }
-
-    private void makeRequestIfNeeded() throws IOException {
-      if (idx == -1) {
-        makeRequest();
-      } else if ((entries != null) && (idx >= entries.size())) {
-        if (entries.size() < repliesPerRequest) {
-          // Last time, we got fewer entries than requested.
-          // So we should be at the end.
-          entries = null;
-        } else {
-          makeRequest();
-        }
-      }
-    public boolean hasNext() throws IOException {
-      makeRequestIfNeeded();
-      return (entries != null);
+    public BatchedEntries<PathCacheEntry> makeRequest(
+        Long nextKey, int maxRepliesPerRequest) throws IOException {
+      return new BatchedListEntries<PathCacheEntry>(
+          namesystem.listPathCacheEntries(nextKey, pool,
+              maxRepliesPerRequest));
-    public PathCacheEntry next() throws IOException {
-      makeRequestIfNeeded();
-      if (entries == null) {
-        throw new NoSuchElementException();
-      }
-      PathCacheEntry entry = entries.get(idx++);
-      prevId = entry.getEntryId();
-      return entry;
+    public Long elementToNextKey(PathCacheEntry entry) {
+      return entry.getEntryId();
-    return new PathCacheEntriesIterator(prevId, pool, maxReplies);
+    return new ServerSidePathCacheEntriesIterator(prevId, maxReplies, pool);
+  }
+
+  @Override
+  public void addCachePool(CachePoolInfo info) throws IOException {
+    namesystem.addCachePool(info);
+  }
+
+  @Override
+  public void modifyCachePool(CachePoolInfo info) throws IOException {
+    namesystem.modifyCachePool(info);
+  }
+
+  @Override
+  public void removeCachePool(String cachePoolName) throws IOException {
+    namesystem.removeCachePool(cachePoolName);
+  }
+
+  private class ServerSideCachePoolIterator 
+      extends BatchedRemoteIterator<String, CachePoolInfo> {
+
+    public ServerSideCachePoolIterator(String prevKey, int maxRepliesPerRequest) {
+      super(prevKey, maxRepliesPerRequest);
+    }
+
+    @Override
+    public BatchedEntries<CachePoolInfo> makeRequest(String prevKey,
+        int maxRepliesPerRequest) throws IOException {
+      return new BatchedListEntries<CachePoolInfo>(
+          namesystem.listCachePools(prevKey, maxRepliesPerRequest));
+    }
+
+    @Override
+    public String elementToNextKey(CachePoolInfo element) {
+      return element.getPoolName();
+    }
+  }
+
+  @Override
+  public RemoteIterator<CachePoolInfo> listCachePools(String prevKey,
+      int maxRepliesPerRequest) throws IOException {
+    return new ServerSideCachePoolIterator(prevKey, maxRepliesPerRequest);

INS26 INS26 INS26 INS40 INS40 INS40 INS55 INS31 INS31 INS31 INS55 MOV31 MOV83 UPD42 MOV42 UPD74 MOV74 MOV23 INS31 MOV31 INS31 INS78 INS83 MOV39 UPD42 MOV42 INS44 MOV43 INS8 INS78 INS83 INS39 INS42 INS44 MOV43 INS8 MOV78 UPD83 MOV83 MOV39 UPD42 MOV42 INS44 MOV43 INS8 INS83 INS42 INS74 INS31 INS31 MOV31 INS78 INS74 INS42 INS44 INS44 INS43 INS8 UPD43 UPD43 MOV43 INS83 INS42 INS44 INS44 MOV44 INS8 INS78 UPD74 MOV74 UPD42 MOV43 MOV78 UPD83 MOV83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 MOV21 INS42 INS43 INS42 MOV21 INS43 INS42 MOV21 INS43 INS43 INS43 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS78 INS43 UPD42 INS44 INS8 INS42 INS43 INS43 INS43 INS42 INS39 INS42 INS42 INS41 UPD42 UPD42 INS43 INS42 INS39 INS42 INS46 MOV21 INS42 UPD43 INS43 INS42 UPD42 INS41 INS42 MOV43 INS42 INS41 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS46 INS42 INS43 INS43 INS43 INS42 INS39 INS42 INS42 INS41 INS42 INS42 INS43 INS42 MOV41 INS42 INS42 UPD42 MOV42 INS14 INS42 INS42 INS42 UPD42 INS42 INS14 MOV32 UPD43 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS43 INS42 INS42 INS74 INS32 UPD42 INS74 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL52 DEL42 DEL22 DEL34 DEL38 DEL7 DEL21 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL34 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL31 DEL42 DEL34 DEL38 DEL27 DEL8 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL32 DEL27 DEL36 DEL27 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL8 DEL31 DEL55 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL33 DEL7 DEL39 DEL42 DEL33 DEL27 DEL36 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL37 DEL32 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL41 DEL8