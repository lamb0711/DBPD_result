HDFS-14203. Refactor OIV Delimited output entry building mechanism. Contributed by Adam Antal.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

-import java.util.Date;
-  private static final String DATE_FORMAT="yyyy-MM-dd HH:mm";
-  private final SimpleDateFormat dateFormatter =
-      new SimpleDateFormat(DATE_FORMAT);
+  private static final String DATE_FORMAT = "yyyy-MM-dd HH:mm";
+
+  static class OutputEntryBuilder {
+    private final SimpleDateFormat dateFormatter =
+        new SimpleDateFormat(DATE_FORMAT);
+
+    private PBImageDelimitedTextWriter writer;
+    private Path path;
+    private int replication = 0;
+    private long modificationTime;
+    private long accessTime = 0;
+    private long preferredBlockSize = 0;
+    private int blocksCount = 0;
+    private long fileSize = 0;
+    private long nsQuota = 0;
+    private long dsQuota = 0;
+
+    private String dirPermission = "-";
+    private PermissionStatus permissionStatus;
+    private String aclPermission = "";
+
+    OutputEntryBuilder(PBImageDelimitedTextWriter writer, INode inode) {
+      this.writer = writer;
+      switch (inode.getType()) {
+      case FILE:
+        INodeFile file = inode.getFile();
+        replication = file.getReplication();
+        modificationTime = file.getModificationTime();
+        accessTime = file.getAccessTime();
+        preferredBlockSize = file.getPreferredBlockSize();
+        blocksCount = file.getBlocksCount();
+        fileSize = FSImageLoader.getFileSize(file);
+        permissionStatus = writer.getPermission(file.getPermission());
+        if (file.hasAcl() && file.getAcl().getEntriesCount() > 0){
+          aclPermission = "+";
+        }
+        break;
+      case DIRECTORY:
+        INodeDirectory dir = inode.getDirectory();
+        modificationTime = dir.getModificationTime();
+        nsQuota = dir.getNsQuota();
+        dsQuota = dir.getDsQuota();
+        dirPermission = "d";
+        permissionStatus = writer.getPermission(dir.getPermission());
+        if (dir.hasAcl() && dir.getAcl().getEntriesCount() > 0){
+          aclPermission = "+";
+        }
+        break;
+      case SYMLINK:
+        INodeSymlink s = inode.getSymlink();
+        modificationTime = s.getModificationTime();
+        accessTime = s.getAccessTime();
+        permissionStatus = writer.getPermission(s.getPermission());
+        break;
+      default:
+        break;
+      }
+    }
+
+    void setPath(Path path) {
+      this.path = path;
+    }
+
+    public String build() {
+      assert permissionStatus != null : "The PermissionStatus is null!";
+      assert permissionStatus.getUserName() != null : "User name is null!";
+      assert permissionStatus.getGroupName() != null : "Group name is null!";
+
+      StringBuffer buffer = new StringBuffer();
+      writer.append(buffer, path.toString());
+      writer.append(buffer, replication);
+      writer.append(buffer, dateFormatter.format(modificationTime));
+      writer.append(buffer, dateFormatter.format(accessTime));
+      writer.append(buffer, preferredBlockSize);
+      writer.append(buffer, blocksCount);
+      writer.append(buffer, fileSize);
+      writer.append(buffer, nsQuota);
+      writer.append(buffer, dsQuota);
+      writer.append(buffer, dirPermission +
+          permissionStatus.getPermission().toString() + aclPermission);
+      writer.append(buffer, permissionStatus.getUserName());
+      writer.append(buffer, permissionStatus.getGroupName());
+      return buffer.substring(1);
+    }
+  }
-  private String formatDate(long date) {
-    return dateFormatter.format(new Date(date));
-  }
-
-    StringBuffer buffer = new StringBuffer();
+    OutputEntryBuilder entryBuilder =
+        new OutputEntryBuilder(this, inode);
+
-    append(buffer, path.toString());
-    PermissionStatus p = null;
-    boolean isDir = false;
-    boolean hasAcl = false;
+    entryBuilder.setPath(path);
-    switch (inode.getType()) {
-    case FILE:
-      INodeFile file = inode.getFile();
-      p = getPermission(file.getPermission());
-      hasAcl = file.hasAcl() && file.getAcl().getEntriesCount() > 0;
-      append(buffer, file.getReplication());
-      append(buffer, formatDate(file.getModificationTime()));
-      append(buffer, formatDate(file.getAccessTime()));
-      append(buffer, file.getPreferredBlockSize());
-      append(buffer, file.getBlocksCount());
-      append(buffer, FSImageLoader.getFileSize(file));
-      append(buffer, 0);  // NS_QUOTA
-      append(buffer, 0);  // DS_QUOTA
-      break;
-    case DIRECTORY:
-      INodeDirectory dir = inode.getDirectory();
-      p = getPermission(dir.getPermission());
-      hasAcl = dir.hasAcl() && dir.getAcl().getEntriesCount() > 0;
-      append(buffer, 0);  // Replication
-      append(buffer, formatDate(dir.getModificationTime()));
-      append(buffer, formatDate(0));  // Access time.
-      append(buffer, 0);  // Block size.
-      append(buffer, 0);  // Num blocks.
-      append(buffer, 0);  // Num bytes.
-      append(buffer, dir.getNsQuota());
-      append(buffer, dir.getDsQuota());
-      isDir = true;
-      break;
-    case SYMLINK:
-      INodeSymlink s = inode.getSymlink();
-      p = getPermission(s.getPermission());
-      append(buffer, 0);  // Replication
-      append(buffer, formatDate(s.getModificationTime()));
-      append(buffer, formatDate(s.getAccessTime()));
-      append(buffer, 0);  // Block size.
-      append(buffer, 0);  // Num blocks.
-      append(buffer, 0);  // Num bytes.
-      append(buffer, 0);  // NS_QUOTA
-      append(buffer, 0);  // DS_QUOTA
-      break;
-    default:
-      break;
-    }
-    assert p != null;
-    String dirString = isDir ? "d" : "-";
-    String aclString = hasAcl ? "+" : "";
-    append(buffer, dirString + p.getPermission().toString() + aclString);
-    append(buffer, p.getUserName());
-    append(buffer, p.getGroupName());
-    return buffer.substring(1);
+    return entryBuilder.build();

INS55 INS31 INS83 INS42 MOV23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 MOV31 INS31 INS31 MOV78 INS83 MOV43 INS42 MOV44 INS44 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 MOV43 INS59 INS83 MOV43 INS59 INS83 MOV43 INS59 UPD42 INS44 MOV50 INS39 INS42 INS44 INS8 INS83 MOV43 INS42 INS8 INS43 INS42 INS60 MOV60 MOV60 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS45 INS42 INS42 INS45 INS43 INS42 MOV21 MOV21 MOV21 MOV21 INS43 INS42 INS21 INS6 INS6 INS6 MOV60 MOV21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV41 INS42 INS43 INS59 INS32 INS32 INS42 INS7 INS25 INS25 INS42 INS7 INS27 INS45 INS27 INS45 INS27 INS45 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS7 INS7 INS7 INS7 INS7 INS7 MOV27 INS8 INS7 INS7 INS7 MOV27 INS8 INS7 INS7 INS22 INS42 INS42 INS33 INS32 INS33 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 UPD43 MOV43 INS52 UPD42 MOV42 INS52 INS42 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 UPD42 INS21 INS42 MOV32 INS42 MOV32 INS42 MOV32 UPD42 INS45 UPD42 INS21 INS42 MOV32 INS42 MOV32 UPD42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 MOV7 INS42 MOV7 INS42 INS32 INS42 UPD42 INS45 UPD42 INS45 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL33 DEL27 DEL6 DEL42 DEL42 DEL45 DEL45 DEL16 DEL59 DEL60 DEL42 DEL42 DEL45 DEL45 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL9 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL83 DEL42 DEL39 DEL42 DEL44 DEL14 DEL32 DEL41 DEL8 DEL31