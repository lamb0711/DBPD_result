YARN-8569. Create an interface to provide cluster information to application. Contributed by Eric Yang

+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
+import org.apache.commons.compress.utils.IOUtils;
+import org.apache.curator.shaded.com.google.common.io.Files;
+import org.apache.hadoop.yarn.service.api.records.ConfigFile;
+import org.apache.hadoop.yarn.service.api.records.ConfigFile.TypeEnum;
+import java.io.BufferedOutputStream;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
+import java.nio.charset.StandardCharsets;
+    // add yarn sysfs to localResources
+    addYarnSysFs(appRootDir, localResources, app);
-            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),
-            conf), 1));
+            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,
+            app.getConfiguration(), conf), 1));
+  /**
+   * Compress (tar) the input files to the output file.
+   *
+   * @param files The files to compress
+   * @param output The resulting output file (should end in .tar.gz)
+   * @param bundleRoot
+   * @throws IOException
+   */
+  public static File compressFiles(Collection<File> files, File output,
+      String bundleRoot) throws IOException {
+    try (FileOutputStream fos = new FileOutputStream(output);
+        TarArchiveOutputStream taos = new TarArchiveOutputStream(
+            new BufferedOutputStream(fos))) {
+      taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
+      for (File f : files) {
+        addFilesToCompression(taos, f, "sysfs", bundleRoot);
+      }
+    }
+    return output;
+  }
+
+  /**
+   * Compile file list for compression and going recursive for
+   * nested directories.
+   *
+   * @param taos The archive
+   * @param file The file to add to the archive
+   * @param dir The directory that should serve as
+   *            the parent directory in the archive
+   * @throws IOException
+   */
+  private static void addFilesToCompression(TarArchiveOutputStream taos,
+      File file, String dir, String bundleRoot) throws IOException {
+    if (!file.isHidden()) {
+      // Create an entry for the file
+      if (!dir.equals(".")) {
+        if (File.separator.equals("\\")) {
+          dir = dir.replaceAll("\\\\", "/");
+        }
+      }
+      taos.putArchiveEntry(
+          new TarArchiveEntry(file, dir + "/" + file.getName()));
+      if (file.isFile()) {
+        // Add the file to the archive
+        try (FileInputStream input = new FileInputStream(file)) {
+          IOUtils.copy(input, taos);
+          taos.closeArchiveEntry();
+        }
+      } else if (file.isDirectory()) {
+        // close the archive entry
+        if (!dir.equals(".")) {
+          taos.closeArchiveEntry();
+        }
+        // go through all the files in the directory and using recursion, add
+        // them to the archive
+        File[] allFiles = file.listFiles();
+        if (allFiles != null) {
+          for (File childFile : allFiles) {
+            addFilesToCompression(taos, childFile,
+                file.getPath().substring(bundleRoot.length()), bundleRoot);
+          }
+        }
+      }
+    }
+  }
+
+  private void addYarnSysFs(Path path,
+      Map<String, LocalResource> localResources, Service app)
+          throws IOException {
+    List<Component> componentsWithYarnSysFS = new ArrayList<Component>();
+    for(Component c : app.getComponents()) {
+      boolean enabled = Boolean.parseBoolean(c.getConfiguration()
+          .getEnv(ApplicationConstants.Environment
+              .YARN_CONTAINER_RUNTIME_YARN_SYSFS_ENABLE.name()));
+      if (enabled) {
+        componentsWithYarnSysFS.add(c);
+      }
+    }
+    if(componentsWithYarnSysFS.size() == 0) {
+      return;
+    }
+    String buffer = ServiceApiUtil.jsonSerDeser.toJson(app);
+    File tmpDir = Files.createTempDir();
+    if (tmpDir.exists()) {
+      String serviceJsonPath = tmpDir.getAbsolutePath() + "/app.json";
+      File localFile = new File(serviceJsonPath);
+      if (localFile.createNewFile()) {
+        try (Writer writer = new OutputStreamWriter(
+            new FileOutputStream(localFile), StandardCharsets.UTF_8)) {
+          writer.write(buffer);
+        }
+      } else {
+        throw new IOException("Fail to write app.json to temp directory");
+      }
+      File destinationFile = new File(tmpDir.getAbsolutePath() + "/sysfs.tar");
+      if (!destinationFile.createNewFile()) {
+        throw new IOException("Fail to localize sysfs.tar.");
+      }
+      List<File> files = new ArrayList<File>();
+      files.add(localFile);
+      compressFiles(files, destinationFile, "sysfs");
+      LocalResource localResource =
+          fs.submitFile(destinationFile, path, ".", "sysfs.tar");
+      Path serviceJson = new Path(path, "sysfs.tar");
+      for (Component c  : componentsWithYarnSysFS) {
+        ConfigFile e = new ConfigFile();
+        e.type(TypeEnum.ARCHIVE);
+        e.srcFile(serviceJson.toString());
+        e.destFile("/hadoop/yarn");
+        if (!c.getConfiguration().getFiles().contains(e)) {
+          c.getConfiguration().getFiles().add(e);
+        }
+      }
+      localResources.put("sysfs", localResource);
+      if (!tmpDir.delete()) {
+        LOG.warn("Failed to delete temp file: " + tmpDir.getAbsolutePath());
+      }
+    } else {
+      throw new IOException("Fail to localize sysfs resource.");
+    }
+  }
+
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS21 INS65 INS65 INS65 INS65 INS65 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS42 INS54 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS70 INS25 INS60 INS60 INS25 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS42 INS42 INS58 INS58 INS8 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS42 INS43 INS43 INS43 INS42 INS74 INS59 INS44 INS32 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS21 INS70 INS32 INS25 INS21 INS25 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS25 INS32 INS34 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS60 INS25 INS60 INS21 INS21 INS60 INS60 INS70 INS21 INS25 INS53 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS44 INS42 INS8 INS42 INS42 INS38 INS8 INS32 INS32 INS8 INS25 INS42 INS42 INS74 INS42 INS39 INS59 INS42 INS8 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS38 INS8 INS74 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS44 INS42 INS8 INS32 INS38 INS8 INS14 INS43 INS42 INS43 INS14 INS42 INS42 INS40 INS43 INS42 INS21 INS32 INS25 INS42 INS42 INS14 INS42 INS42 INS54 INS32 INS8 INS43 INS43 INS42 INS32 INS21 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS54 INS53 INS42 INS42 INS14 INS32 INS53 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS60 INS21 INS21 INS21 INS25 INS42 INS42 INS45 INS42 INS32 INS21 INS43 INS45 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS8 INS43 INS42 INS27 INS58 INS8 INS42 INS42 INS25 INS60 INS25 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS45 INS43 INS42 INS58 INS8 INS14 INS43 INS27 INS42 INS42 INS14 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS45 INS45 INS43 INS42 INS45 INS42 INS43 INS59 INS32 INS32 INS32 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS40 INS42 INS45 INS21 INS42 INS42 INS45 INS32 INS43 INS59 INS21 INS21 INS38 INS8 INS5 INS59 INS27 INS8 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS21 INS43 INS45 INS42 INS32 INS45 INS43 INS45 INS43 INS43 INS42 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS21 INS42 INS42 INS27 INS7 INS42 INS42 INS42 INS42 INS14 INS32 INS32 INS32 INS21 INS43 INS85 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS40 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS45 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS44 INS42 INS8 INS43 INS14 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42