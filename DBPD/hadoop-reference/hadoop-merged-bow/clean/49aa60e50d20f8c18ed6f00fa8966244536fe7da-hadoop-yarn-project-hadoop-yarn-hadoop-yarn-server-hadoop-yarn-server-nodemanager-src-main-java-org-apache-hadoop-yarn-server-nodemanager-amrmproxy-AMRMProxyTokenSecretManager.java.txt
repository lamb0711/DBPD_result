YARN-6127. Add support for work preserving NM restart when AMRMProxy is enabled. (Botong Huang via asuresh).

+import java.io.IOException;
+import org.apache.hadoop.yarn.server.api.records.MasterKey;
+import org.apache.hadoop.yarn.server.nodemanager.recovery.NMStateStoreService;
+import org.apache.hadoop.yarn.server.nodemanager.recovery.NMStateStoreService.RecoveredAMRMProxyState;
-  private final long rollingInterval;
-  private final long activationDelay;
+  private long rollingInterval;
+  private long activationDelay;
+
+  private NMStateStoreService nmStateStore;
+   * @param nmStateStoreService NM state store
-  public AMRMProxyTokenSecretManager(Configuration conf) {
+  public AMRMProxyTokenSecretManager(NMStateStoreService nmStateStoreService) {
+    this.nmStateStore = nmStateStoreService;
+  }
+
+  public void init(Configuration conf) {
+      if (this.nmStateStore != null) {
+        try {
+          this.nmStateStore.storeAMRMProxyCurrentMasterKey(
+              this.currentMasterKey.getMasterKey());
+        } catch (IOException e) {
+          LOG.error("Unable to update current master key in state store", e);
+        }
+      }
+  @VisibleForTesting
+  public void setNMStateStoreService(NMStateStoreService nmStateStoreService) {
+    this.nmStateStore = nmStateStoreService;
+  }
+
-  void rollMasterKey() {
+  @VisibleForTesting
+  public void rollMasterKey() {
+      if (this.nmStateStore != null) {
+        try {
+          this.nmStateStore
+              .storeAMRMProxyNextMasterKey(this.nextMasterKey.getMasterKey());
+        } catch (IOException e) {
+          LOG.error("Unable to update next master key in state store", e);
+        }
+      }
+
+  @Private
+  @VisibleForTesting
+      if (this.nmStateStore != null) {
+        try {
+          this.nmStateStore.storeAMRMProxyCurrentMasterKey(
+              this.currentMasterKey.getMasterKey());
+          this.nmStateStore.storeAMRMProxyNextMasterKey(null);
+        } catch (IOException e) {
+          LOG.error("Unable to update current master key in state store", e);
+        }
+      }
+  public MasterKeyData getCurrentMasterKeyData() {
+    this.readLock.lock();
+    try {
+      return this.currentMasterKey;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  @Private
+  @VisibleForTesting
+
+  /**
+   * Recover secretManager from state store. Called after serviceInit before
+   * serviceStart.
+   *
+   * @param state the state to recover from
+   */
+  public void recover(RecoveredAMRMProxyState state) {
+    if (state != null) {
+      // recover the current master key
+      MasterKey currentKey = state.getCurrentMasterKey();
+      if (currentKey != null) {
+        this.currentMasterKey = new MasterKeyData(currentKey,
+            createSecretKey(currentKey.getBytes().array()));
+      } else {
+        LOG.warn("No current master key recovered from NM StateStore"
+            + " for AMRMProxyTokenSecretManager");
+      }
+
+      // recover the next master key if not null
+      MasterKey nextKey = state.getNextMasterKey();
+      if (nextKey != null) {
+        this.nextMasterKey = new MasterKeyData(nextKey,
+            createSecretKey(nextKey.getBytes().array()));
+        this.timer.schedule(new NextKeyActivator(), this.activationDelay);
+      }
+    }
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS43 INS59 MOV29 INS83 INS42 INS44 INS8 INS39 UPD42 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS78 INS78 INS78 INS78 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS65 INS43 INS42 MOV21 INS21 INS25 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS54 INS65 INS65 INS43 INS42 INS25 INS42 INS66 INS42 INS7 MOV27 INS8 INS42 INS7 INS32 INS8 INS8 INS66 INS66 INS42 INS66 INS42 INS27 INS8 INS22 INS42 MOV21 MOV25 INS22 INS42 INS25 INS25 INS22 INS42 INS41 INS21 INS42 INS33 INS60 INS25 INS60 INS25 INS52 INS42 INS27 INS8 INS52 INS42 INS27 INS8 INS27 INS8 INS52 INS42 INS22 INS32 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS22 INS33 INS54 INS22 INS33 INS54 INS22 INS33 INS54 INS52 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS52 INS42 INS8 INS12 INS52 INS42 INS8 INS12 INS52 INS42 INS8 INS12 INS52 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS7 INS32 INS21 INS44 INS8 INS21 INS44 INS8 INS21 INS21 INS44 INS8 INS22 INS14 INS42 INS42 INS27 INS22 INS14 INS22 INS42 INS14 INS22 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS32 INS32 INS43 INS42 INS21 INS52 INS42 INS43 INS42 INS32 INS45 INS45 INS52 INS42 INS43 INS42 INS32 INS52 INS42 INS43 INS52 INS42 INS22 INS42 INS32 INS42 INS32 INS22 INS42 INS32 INS42 INS32 INS22 INS42 INS32 INS22 INS42 INS33 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS52 INS42 INS22 INS42 INS42 INS42 INS45 INS42 INS52 INS42 INS22 INS42 INS42 INS42 INS45 INS42 INS52 INS42 INS22 INS42 INS52 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL8