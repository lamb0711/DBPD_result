Merging r1536573 through r1536889 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1536890 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.Map;
+import com.google.common.collect.ImmutableMap;
+import org.apache.hadoop.ha.HAAdmin;
+import org.apache.hadoop.ha.HAServiceTarget;
+import org.apache.hadoop.yarn.client.RMHAServiceTarget;
+import org.apache.hadoop.yarn.conf.HAUtil;
+import org.apache.hadoop.yarn.exceptions.YarnRuntimeException;
-public class RMAdminCLI extends Configured implements Tool {
+public class RMAdminCLI extends HAAdmin {
+  protected final static Map<String, UsageInfo> ADMIN_USAGE =
+      ImmutableMap.<String, UsageInfo>builder()
+          .put("-refreshQueues", new UsageInfo("",
+              "Reload the queues' acls, states and scheduler specific " +
+                  "properties. \n\t\tResourceManager will reload the " +
+                  "mapred-queues configuration file."))
+          .put("-refreshNodes", new UsageInfo("",
+              "Refresh the hosts information at the ResourceManager."))
+          .put("-refreshSuperUserGroupsConfiguration", new UsageInfo("",
+              "Refresh superuser proxy groups mappings"))
+          .put("-refreshUserToGroupsMappings", new UsageInfo("",
+              "Refresh user-to-groups mappings"))
+          .put("-refreshAdminAcls", new UsageInfo("",
+              "Refresh acls for administration of ResourceManager"))
+          .put("-refreshServiceAcl", new UsageInfo("",
+              "Reload the service-level authorization policy file. \n\t\t" +
+                  "ResoureceManager will reload the authorization policy file."))
+          .put("-getGroups", new UsageInfo("[username]",
+              "Get the groups which given user belongs to."))
+          .put("-help", new UsageInfo("[cmd]",
+              "Displays help for the given command or all commands if none " +
+                  "is specified."))
+          .build();
+
+  private static void appendHAUsage(final StringBuilder usageBuilder) {
+    for (String cmdKey : USAGE.keySet()) {
+      if (cmdKey.equals("-help")) {
+        continue;
+      }
+      UsageInfo usageInfo = USAGE.get(cmdKey);
+      usageBuilder.append(" [" + cmdKey + " " + usageInfo.args + "]");
+    }
+  }
+
+  private static void buildHelpMsg(String cmd, StringBuilder builder) {
+    UsageInfo usageInfo = ADMIN_USAGE.get(cmd);
+    if (usageInfo == null) {
+      usageInfo = USAGE.get(cmd);
+      if (usageInfo == null) {
+        return;
+      }
+    }
+    String space = (usageInfo.args == "") ? "" : " ";
+    builder.append("   " + cmd + space + usageInfo.args + ": " +
+        usageInfo.help);
+  }
+
+  private static void buildIndividualUsageMsg(String cmd,
+                                              StringBuilder builder ) {
+    UsageInfo usageInfo = ADMIN_USAGE.get(cmd);
+    if (usageInfo == null) {
+      usageInfo = USAGE.get(cmd);
+      if (usageInfo == null) {
+        return;
+      }
+    }
+    String space = (usageInfo.args == "") ? "" : " ";
+    builder.append("Usage: java RMAdmin ["
+        + cmd + space + usageInfo.args
+        + "]\n");
+  }
+
+  private static void buildUsageMsg(StringBuilder builder) {
+    builder.append("Usage: java RMAdmin");
+    for (String cmdKey : ADMIN_USAGE.keySet()) {
+      UsageInfo usageInfo = ADMIN_USAGE.get(cmdKey);
+      builder.append("   " + cmdKey + " " + usageInfo.args + "\n");
+    }
+    for (String cmdKey : USAGE.keySet()) {
+      if (!cmdKey.equals("-help")) {
+        UsageInfo usageInfo = USAGE.get(cmdKey);
+        builder.append("   " + cmdKey + " " + usageInfo.args + "\n");
+      }
+    }
+  }
+
-    String summary = "rmadmin is the command to execute Map-Reduce administrative commands.\n" +
-    "The full syntax is: \n\n" +
-    "hadoop rmadmin" +
+    StringBuilder summary = new StringBuilder();
+    summary.append("rmadmin is the command to execute YARN administrative " +
+        "commands.\n");
+    summary.append("The full syntax is: \n\n" +
+    "yarn rmadmin" +
-      " [-help [cmd]]\n";
+      " [-help [cmd]]");
+    appendHAUsage(summary);
+    summary.append("\n");
-    String refreshQueues =
-      "-refreshQueues: Reload the queues' acls, states and "
-      + "scheduler specific properties.\n"
-      + "\t\tResourceManager will reload the mapred-queues configuration file.\n";
-
-    String refreshNodes = 
-      "-refreshNodes: Refresh the hosts information at the ResourceManager.\n";
-    
-    String refreshUserToGroupsMappings = 
-      "-refreshUserToGroupsMappings: Refresh user-to-groups mappings\n";
-    
-    String refreshSuperUserGroupsConfiguration = 
-      "-refreshSuperUserGroupsConfiguration: Refresh superuser proxy groups mappings\n";
-
-    String refreshAdminAcls =
-      "-refreshAdminAcls: Refresh acls for administration of ResourceManager\n";
-
-    String refreshServiceAcl = 
-      "-refreshServiceAcl: Reload the service-level authorization policy file\n" +
-      "\t\tResoureceManager will reload the authorization policy file.\n";
-    
-    String getGroups = 
-      "-getGroups [username]: Get the groups which given user belongs to\n";
-
-    String help = "-help [cmd]: \tDisplays help for the given command or all commands if none\n" +
-      "\t\tis specified.\n";
-
-    if ("refreshQueues".equals(cmd)) {
-      System.out.println(refreshQueues);
-    }  else if ("refreshNodes".equals(cmd)) {
-      System.out.println(refreshNodes);
-    } else if ("refreshUserToGroupsMappings".equals(cmd)) {
-      System.out.println(refreshUserToGroupsMappings);
-    } else if ("refreshSuperUserGroupsConfiguration".equals(cmd)) {
-      System.out.println(refreshSuperUserGroupsConfiguration);
-    } else if ("refreshAdminAcls".equals(cmd)) {
-      System.out.println(refreshAdminAcls);
-    } else if ("refreshServiceAcl".equals(cmd)) {
-      System.out.println(refreshServiceAcl);
-    } else if ("getGroups".equals(cmd)) {
-      System.out.println(getGroups);
-    } else if ("help".equals(cmd)) {
-      System.out.println(help);
-    } else {
-      System.out.println(summary);
-      System.out.println(refreshQueues);
-      System.out.println(refreshNodes);
-      System.out.println(refreshUserToGroupsMappings);
-      System.out.println(refreshSuperUserGroupsConfiguration);
-      System.out.println(refreshAdminAcls);
-      System.out.println(refreshServiceAcl);
-      System.out.println(getGroups);
-      System.out.println(help);
-      System.out.println();
-      ToolRunner.printGenericCommandUsage(System.out);
+    StringBuilder helpBuilder = new StringBuilder();
+    System.out.println(summary);
+    for (String cmdKey : ADMIN_USAGE.keySet()) {
+      buildHelpMsg(cmdKey, helpBuilder);
+      helpBuilder.append("\n");
+    for (String cmdKey : USAGE.keySet()) {
+      if (!cmdKey.equals("-help")) {
+        buildHelpMsg(cmdKey, helpBuilder);
+        helpBuilder.append("\n");
+      }
+    }
+    System.out.println(helpBuilder);
+    System.out.println();
+    ToolRunner.printGenericCommandUsage(System.out);
-    if ("-refreshQueues".equals(cmd)) {
-      System.err.println("Usage: java RMAdmin" + " [-refreshQueues]");
-    } else if ("-refreshNodes".equals(cmd)){
-      System.err.println("Usage: java RMAdmin" + " [-refreshNodes]");
-    } else if ("-refreshUserToGroupsMappings".equals(cmd)){
-      System.err.println("Usage: java RMAdmin" + " [-refreshUserToGroupsMappings]");
-    } else if ("-refreshSuperUserGroupsConfiguration".equals(cmd)){
-      System.err.println("Usage: java RMAdmin" + " [-refreshSuperUserGroupsConfiguration]");
-    } else if ("-refreshAdminAcls".equals(cmd)){
-      System.err.println("Usage: java RMAdmin" + " [-refreshAdminAcls]");
-    } else if ("-refreshService".equals(cmd)){
-      System.err.println("Usage: java RMAdmin" + " [-refreshServiceAcl]");
-    } else if ("-getGroups".equals(cmd)){
-      System.err.println("Usage: java RMAdmin" + " [-getGroups [username]]");
+    StringBuilder usageBuilder = new StringBuilder();
+    if (ADMIN_USAGE.containsKey(cmd) || USAGE.containsKey(cmd)) {
+      buildIndividualUsageMsg(cmd, usageBuilder);
-      System.err.println("Usage: java RMAdmin");
-      System.err.println("           [-refreshQueues]");
-      System.err.println("           [-refreshNodes]");
-      System.err.println("           [-refreshUserToGroupsMappings]");
-      System.err.println("           [-refreshSuperUserGroupsConfiguration]");
-      System.err.println("           [-refreshAdminAcls]");
-      System.err.println("           [-refreshServiceAcl]");
-      System.err.println("           [-getGroups [username]]");
-      System.err.println("           [-help [cmd]]");
-      System.err.println();
-      ToolRunner.printGenericCommandUsage(System.err);
+      buildUsageMsg(usageBuilder);
+    System.err.println(usageBuilder);
+    ToolRunner.printGenericCommandUsage(System.err);
+
+
+    exitCode = 0;
+    if ("-help".equals(cmd)) {
+      if (i < args.length) {
+        printUsage(args[i]);
+      } else {
+        printHelp("");
+      }
+      return exitCode;
+    }
+
+    if (USAGE.containsKey(cmd)) {
+      return super.run(args);
+    }
+
-    exitCode = 0;
-      } else if ("-help".equals(cmd)) {
-        if (i < args.length) {
-          printUsage(args[i]);
-        } else {
-          printHelp("");
-        }
+  @Override
+  public void setConf(Configuration conf) {
+    if (conf != null) {
+      if (!(conf instanceof YarnConfiguration)) {
+        conf = new YarnConfiguration(conf);
+      }
+    }
+    super.setConf(conf);
+  }
+
+  @Override
+  protected HAServiceTarget resolveTarget(String rmId) {
+    Collection<String> rmIds = HAUtil.getRMHAIds(getConf());
+    if (!rmIds.contains(rmId)) {
+      StringBuilder msg = new StringBuilder();
+      msg.append(rmId + " is not a valid serviceId. It should be one of ");
+      for (String id : rmIds) {
+        msg.append(id + " ");
+      }
+      throw new IllegalArgumentException(msg.toString());
+    }
+    try {
+      YarnConfiguration conf = new YarnConfiguration(getConf());
+      conf.set(YarnConfiguration.RM_HA_ID, rmId);
+      return new RMHAServiceTarget(conf);
+    } catch (IllegalArgumentException iae) {
+      throw new YarnRuntimeException("Could not connect to " + rmId +
+          "; the configuration for it might be missing");
+    } catch (IOException ioe) {
+      throw new YarnRuntimeException(
+          "Could not connect to RM HA Admin for node " + rmId);
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 MOV83 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 MOV29 INS83 INS83 INS39 INS42 MOV44 INS8 MOV25 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS32 INS83 INS43 INS42 INS70 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS21 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS21 INS43 INS42 MOV21 INS70 INS70 INS60 MOV21 MOV21 INS21 MOV21 INS60 MOV21 INS70 INS70 MOV21 MOV21 MOV21 INS60 INS25 MOV21 MOV21 MOV25 INS25 INS42 INS43 INS42 INS25 MOV21 INS42 INS42 MOV43 INS42 INS60 INS25 INS54 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS44 INS32 INS8 INS42 INS42 INS43 INS59 INS27 MOV8 MOV43 INS59 INS32 INS42 INS42 INS43 INS59 INS27 MOV8 MOV43 INS59 INS32 INS42 INS44 INS32 INS8 INS44 INS32 INS8 INS43 INS59 INS32 INS43 INS59 INS44 INS32 INS8 INS44 INS32 INS8 INS43 INS59 INS27 MOV8 INS8 INS32 INS8 INS42 INS27 INS8 INS48 INS74 INS59 INS38 INS8 INS8 INS12 INS12 INS32 INS42 INS45 INS14 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS25 INS60 MOV21 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS16 UPD42 MOV42 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS16 UPD42 MOV42 INS42 INS27 UPD42 UPD42 INS45 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS60 MOV21 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS25 INS42 INS42 INS14 UPD42 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS45 INS42 INS42 INS14 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS21 MOV21 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS25 UPD40 INS42 INS42 INS42 INS14 INS32 INS32 MOV21 INS42 INS41 INS42 INS42 INS42 INS41 INS42 INS33 INS25 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS60 MOV21 INS70 INS53 INS60 MOV21 INS41 INS44 INS8 INS44 INS8 INS32 INS42 INS45 INS14 INS43 INS45 INS27 MOV32 INS8 INS43 INS59 UPD42 MOV42 INS42 MOV42 INS7 INS27 INS8 INS36 INS45 INS45 INS45 INS42 INS42 INS40 INS45 INS40 UPD42 MOV42 INS42 MOV42 INS7 INS27 INS8 INS36 INS45 INS45 INS45 INS42 INS42 INS40 INS45 INS43 INS59 INS38 INS8 INS43 UPD45 UPD45 INS45 UPD45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS43 INS32 INS38 INS8 INS43 UPD42 MOV42 INS42 MOV42 INS42 INS42 INS42 INS42 INS48 INS38 INS8 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS43 INS59 INS44 INS42 INS8 INS14 INS43 INS59 INS14 INS43 INS42 INS53 INS43 INS42 INS53 INS32 INS42 INS45 INS14 INS43 INS45 INS45 INS42 UPD45 MOV45 UPD45 MOV45 INS42 INS45 INS18 INS42 INS42 INS32 UPD42 UPD42 INS27 INS42 INS32 INS42 INS33 INS41 INS27 INS42 INS32 INS42 INS33 INS41 INS27 INS42 INS42 INS32 UPD42 UPD42 INS27 INS32 INS60 MOV21 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS45 INS32 INS21 INS21 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS36 MOV21 UPD42 MOV42 INS42 INS42 INS14 UPD42 INS42 INS27 MOV43 INS42 MOV21 INS43 INS32 INS42 INS42 INS14 INS42 INS42 UPD40 UPD42 INS43 INS42 INS42 INS14 INS42 INS14 INS32 INS42 INS45 INS14 INS43 INS45 INS27 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS45 INS42 INS45 INS40 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS45 INS40 INS45 UPD42 MOV42 UPD42 MOV42 INS45 INS43 INS59 UPD42 MOV42 INS42 INS45 INS32 INS32 INS62 INS7 INS43 INS42 INS45 INS42 INS42 UPD42 MOV42 INS43 INS32 INS42 INS43 INS27 INS43 INS27 INS32 INS42 INS45 INS14 INS43 INS45 INS45 INS42 UPD45 MOV45 UPD45 MOV45 INS42 INS42 INS32 UPD42 UPD42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS14 INS42 UPD42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS45 INS14 INS43 INS45 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS45 INS40 INS45 INS42 INS43 INS42 INS42 INS45 INS32 INS42 INS45 INS14 INS43 INS45 INS45 INS42 INS42 INS32 INS42 INS45 INS14 INS43 INS45 INS45 INS42 MOV8 INS42 INS43 INS43 INS42 INS43 INS45 INS27 INS42 INS42 INS42 INS42 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 DEL42 DEL43 DEL45 DEL42 DEL40 DEL40 DEL32 DEL40 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL45 DEL45 DEL27 DEL40 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL40 DEL45 DEL45 DEL27 DEL40 DEL45 DEL45 DEL83 DEL83 DEL39 DEL42 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL45 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL45 DEL59 DEL60 DEL42 DEL45 DEL59 DEL60 DEL42 DEL45 DEL59 DEL60 DEL42 DEL45 DEL59 DEL60 DEL42 DEL27 DEL59 DEL60 DEL42 DEL45 DEL59 DEL60 DEL42 DEL27 DEL59 DEL60 DEL45 DEL42 DEL32 DEL40 DEL32 DEL21 DEL8 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL45 DEL32 DEL8 DEL45 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL45 DEL32 DEL45 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL45 DEL32 DEL45 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL40 DEL32 DEL21 DEL40 DEL32 DEL21 DEL40 DEL32 DEL21 DEL40 DEL32 DEL21 DEL40 DEL32 DEL21 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL8 DEL31 DEL45 DEL42 DEL42 DEL32 DEL8 DEL45 DEL42 DEL42 DEL32 DEL8 DEL45 DEL32 DEL8 DEL45 DEL32 DEL8 DEL45 DEL32 DEL40 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL45 DEL32 DEL8 DEL45 DEL32 DEL40 DEL45 DEL32 DEL21 DEL40 DEL45 DEL32 DEL21 DEL40 DEL45 DEL32 DEL21 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL8 DEL31 DEL40 DEL42 DEL45 DEL32 DEL40 DEL42 DEL45 DEL32 DEL40 DEL45 DEL40 DEL45