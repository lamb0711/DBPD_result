HDFS-6451. NFS should not return NFS3ERR_IO for AccessControlException. Contributed by Abhiraj Butala

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615702 13f79535-47bb-0310-9956-ffa450edef68

-  
+
-  
+
-  
+
-   
+
-    
+
-    
+
-  
+
-  
+
+  // Checks the type of IOException and maps it to appropriate Nfs3Status code.
+  private int mapErrorStatus(IOException e) {
+    if (e instanceof FileNotFoundException) {
+      return Nfs3Status.NFS3ERR_STALE;
+    } else if (e instanceof AccessControlException) {
+      return Nfs3Status.NFS3ERR_ACCES;
+    } else {
+      return Nfs3Status.NFS3ERR_IO;
+    }
+  }
+
+    return getattr(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  GETATTR3Response getattr(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    
-    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) {
-    
-    SecurityHandler securityHandler = getSecurityHandler(info);
+
-    
+
-      response.setStatus(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      response.setStatus(status);
-    
+
+    return setattr(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  SETATTR3Response setattr(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    SecurityHandler securityHandler = getSecurityHandler(info);
-    
+
-      
+
-      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {
-      if (e instanceof AccessControlException) {
-        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, wccData);
-      } else {
-        return new SETATTR3Response(Nfs3Status.NFS3ERR_IO, wccData);
-      }
+
+      int status = mapErrorStatus(e);
+      return new SETATTR3Response(status, wccData);
+    return lookup(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  LOOKUP3Response lookup(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    
-    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) {
-    
-    SecurityHandler securityHandler = getSecurityHandler(info);
+
-    
+
-      return new LOOKUP3Response(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      return new LOOKUP3Response(status);
-  
+
+    return access(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  ACCESS3Response access(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    
-    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) {
-    
-    SecurityHandler securityHandler = getSecurityHandler(info);
+
-    
+
-    } 
+    }
-      
+
-      return new ACCESS3Response(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      return new ACCESS3Response(status);
+    return readlink(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) {
-    SecurityHandler securityHandler = getSecurityHandler(info);
-      if (e instanceof FileNotFoundException) {
-        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);
-      } else if (e instanceof AccessControlException) {
-        return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);
-      }
-      return new READLINK3Response(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      return new READLINK3Response(status);
-    SecurityHandler securityHandler = getSecurityHandler(info);
-    SocketAddress remoteAddress = info.remoteAddress();
-    return read(xdr, securityHandler, remoteAddress);
+    return read(xdr, getSecurityHandler(info), info.remoteAddress());
-  
+
-    
+
-    
+
-    
+
-    
+
-      return new READ3Response(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      return new READ3Response(status);
-  
+
-    
+
-      
+
-      
+
-      return new WRITE3Response(Nfs3Status.NFS3ERR_IO, fileWcc, 0,
-          request.getStableHow(), Nfs3Constant.WRITE_COMMIT_VERF);
+
+      int status = mapErrorStatus(e);
+      return new WRITE3Response(status, fileWcc, 0, request.getStableHow(),
+          Nfs3Constant.WRITE_COMMIT_VERF);
-    SecurityHandler securityHandler = getSecurityHandler(info);
-    SocketAddress remoteAddress = info.remoteAddress();
-    return create(xdr, securityHandler, remoteAddress);
+    return create(xdr, getSecurityHandler(info), info.remoteAddress());
-  
+
-    
+
-      
+
-          
+
-      
+
-      
+
-      
+
-      
+
-      if (e instanceof AccessControlException) {
-        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,
-            postOpObjAttr, dirWcc);
-      } else {
-        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,
-            postOpObjAttr, dirWcc);
-      }
+
+      int status = mapErrorStatus(e);
+      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);
-    
+
+    return mkdir(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  MKDIR3Response mkdir(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    SecurityHandler securityHandler = getSecurityHandler(info);
-    
+
-      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {
-      
+
-      
+
+
-      if (e instanceof AccessControlException) {
-        return new MKDIR3Response(Nfs3Status.NFS3ERR_PERM, objFileHandle,
-            postOpObjAttr, dirWcc);
-      } else {
-        return new MKDIR3Response(Nfs3Status.NFS3ERR_IO, objFileHandle,
-            postOpObjAttr, dirWcc);
-      }
+      int status = mapErrorStatus(e);
+      return new MKDIR3Response(status, objFileHandle, postOpObjAttr, dirWcc);
-  
+
- 
+
-  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) {
+  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    
+
+
-      if (e instanceof AccessControlException) {
-        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);
-      } else {
-        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);
-      }
+      int status = mapErrorStatus(e);
+      return new REMOVE3Response(status, dirWcc);
+    return rmdir(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  RMDIR3Response rmdir(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    SecurityHandler securityHandler = getSecurityHandler(info);
-    
+
-      
+
-      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {
-      
+
+
-      if (e instanceof AccessControlException) {
-        return new RMDIR3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);
-      } else {
-        return new RMDIR3Response(Nfs3Status.NFS3ERR_IO, dirWcc);
-      }
+      int status = mapErrorStatus(e);
+      return new RMDIR3Response(status, dirWcc);
+    return rename(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  RENAME3Response rename(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    SecurityHandler securityHandler = getSecurityHandler(info);
-    
+
-      
-      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
+
+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {
-      // Try to return correct WccData      
+      // Try to return correct WccData
-      if (e instanceof AccessControlException) {
-        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,
-            toDirWcc);
-      } else {
-        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);
-      }
+
+      int status = mapErrorStatus(e);
+      return new RENAME3Response(status, fromDirWcc, toDirWcc);
+    return symlink(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  SYMLINK3Response symlink(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {
-    SecurityHandler securityHandler = getSecurityHandler(info);
-      response.setStatus(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      response.setStatus(status);
-  
+
-    SecurityHandler securityHandler = getSecurityHandler(info);
-    SocketAddress remoteAddress = info.remoteAddress();
-    return readdir(xdr, securityHandler, remoteAddress);
+    return readdir(xdr, getSecurityHandler(info), info.remoteAddress());
+
-    
+
-    
+
-    
+
-    
+
-      
+
-      return new READDIR3Response(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      return new READDIR3Response(status);
-     * 
+     *
-     * 
+     *
-    
+
-    
+
-    SecurityHandler securityHandler = getSecurityHandler(info);
-    SocketAddress remoteAddress = info.remoteAddress();
-    return readdirplus(xdr, securityHandler, remoteAddress);
+    return readdirplus(xdr, getSecurityHandler(info), info.remoteAddress());
-    
+
-    
+
-    
+
-      
+
-      return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      return new READDIRPLUS3Response(status);
-    
+
-    
+
-      
+
-  
+
+    return fsstat(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  FSSTAT3Response fsstat(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    
-    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) {
-    
-    SecurityHandler securityHandler = getSecurityHandler(info);
+
-    
+
-      
+
-      
+
-      
+
-      return new FSSTAT3Response(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      return new FSSTAT3Response(status);
+    return fsinfo(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  FSINFO3Response fsinfo(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    
-    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) {
-    
-    SecurityHandler securityHandler = getSecurityHandler(info);
+
-    
+
-      
+
-      return new FSINFO3Response(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      return new FSINFO3Response(status);
+    return pathconf(xdr, getSecurityHandler(info), info.remoteAddress());
+  }
+
+  @VisibleForTesting
+  PATHCONF3Response pathconf(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    
-    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) {
-    
-    SecurityHandler securityHandler = getSecurityHandler(info);
+
-    
+
-      return new PATHCONF3Response(Nfs3Status.NFS3ERR_IO);
+      int status = mapErrorStatus(e);
+      return new PATHCONF3Response(status);
-    //Channel channel, int xid,
-    //    SecurityHandler securityHandler, InetAddress client) {
-    COMMIT3Response response = new COMMIT3Response(Nfs3Status.NFS3_OK);
+    RpcCall rpcCall = (RpcCall) info.header();
+    int xid = rpcCall.getXid();
+    SocketAddress remoteAddress = info.remoteAddress();
+    return commit(xdr, info.channel(), xid, securityHandler, remoteAddress);
+  }
+
+  @VisibleForTesting
+  COMMIT3Response commit(XDR xdr, Channel channel, int xid,
+      SecurityHandler securityHandler, SocketAddress remoteAddress) {
+    COMMIT3Response response = new COMMIT3Response(Nfs3Status.NFS3_OK);
-    
+
-      
-      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
+
+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {
-      
+
-      
+
-      RpcCall rpcCall = (RpcCall) info.header();
-      int xid = rpcCall.getXid();
-          info.channel(), xid, preOpAttr);
+          channel, xid, preOpAttr);
+
-      return new COMMIT3Response(Nfs3Status.NFS3ERR_IO, fileWcc,
-          Nfs3Constant.WRITE_COMMIT_VERF);
+      int status = mapErrorStatus(e);
+      return new COMMIT3Response(status, fileWcc,
+        Nfs3Constant.WRITE_COMMIT_VERF);
-  
+
-    
+
-    
+
-      }    
+      }
-    } else if (nfsproc3 == NFSPROC3.MKDIR) {      
+    } else if (nfsproc3 == NFSPROC3.MKDIR) {
-  
+
-    final NFSPROC3 nfsproc3 = NFSPROC3.fromValue(call.getProcedure()); 
+    final NFSPROC3 nfsproc3 = NFSPROC3.fromValue(call.getProcedure());
-  
-  private boolean checkAccessPrivilege(RpcInfo info,
-      final AccessPrivilege expected) {
-    SocketAddress remoteAddress = info.remoteAddress();
-    return checkAccessPrivilege(remoteAddress, expected);
-  }
-  
+

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS8 MOV78 MOV83 INS43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 INS83 MOV43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 INS83 INS43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 INS83 INS43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 MOV83 MOV43 UPD42 MOV42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 INS83 MOV43 INS42 MOV44 MOV44 INS8 MOV78 INS83 MOV43 INS42 MOV44 MOV44 INS8 MOV78 MOV83 MOV43 UPD42 MOV42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 INS83 MOV43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 INS83 MOV43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 MOV83 INS43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 INS83 MOV43 INS42 MOV44 MOV44 INS8 MOV78 INS83 MOV43 INS42 MOV44 MOV44 INS8 MOV78 UPD83 MOV83 INS43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 INS83 INS43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 INS83 INS43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 MOV78 INS83 INS43 INS42 INS44 MOV44 INS8 INS78 INS44 INS44 INS44 INS44 INS43 INS42 INS25 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 MOV41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS41 MOV41 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 MOV41 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS41 MOV41 INS42 UPD43 MOV43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 UPD42 MOV42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 MOV60 MOV60 MOV60 MOV60 MOV41 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS42 MOV62 INS8 INS25 UPD42 MOV42 INS32 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS32 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS32 UPD42 INS32 INS42 INS42 INS12 UPD42 MOV42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 MOV12 INS42 INS42 INS42 INS42 INS41 MOV62 INS8 INS8 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 UPD42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 UPD42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS44 INS8 INS42 INS42 INS32 INS32 MOV44 INS42 INS42 INS32 INS32 UPD42 UPD42 MOV32 UPD42 INS42 INS42 INS40 INS41 INS41 MOV42 MOV42 INS42 INS42 UPD42 INS60 INS42 INS42 INS42 INS42 INS60 MOV41 INS42 INS42 MOV42 MOV42 UPD42 INS60 UPD42 MOV42 INS42 INS42 MOV42 UPD42 INS60 MOV42 MOV42 INS42 INS42 UPD42 INS60 INS42 INS42 MOV42 MOV42 INS60 INS60 UPD42 MOV42 INS42 INS42 MOV42 INS60 MOV41 MOV42 MOV42 INS42 INS42 INS60 MOV41 INS60 MOV41 INS42 INS42 MOV42 MOV42 INS60 MOV41 UPD42 MOV42 INS42 INS42 MOV42 INS60 MOV41 INS42 INS42 INS42 INS42 UPD42 INS60 MOV42 MOV42 INS42 INS42 INS60 UPD42 MOV42 INS42 INS42 MOV42 INS60 INS42 INS42 INS42 INS42 UPD42 INS43 INS42 INS21 INS60 MOV41 INS42 INS42 INS42 INS42 UPD42 MOV42 INS60 INS42 INS42 MOV42 MOV42 UPD42 INS60 INS41 INS60 INS40 INS40 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS42 INS32 INS39 INS59 INS39 INS59 INS39 INS59 INS14 INS42 INS39 INS59 INS42 INS32 INS42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 INS42 INS32 INS42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 MOV42 INS42 INS32 INS42 INS42 INS32 MOV43 INS42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL40 DEL42 DEL14 DEL41 DEL8 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL14 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL40 DEL14 DEL41 DEL8 DEL25 DEL25 DEL40 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL40 DEL40 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL40 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL40 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL43 DEL62 DEL40 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL8 DEL25 DEL40 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL40 DEL42 DEL14 DEL41 DEL8 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL43 DEL62 DEL40 DEL42 DEL14 DEL41 DEL8 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL43 DEL62 DEL40 DEL42 DEL42 DEL14 DEL41 DEL8 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL40 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL40 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL14 DEL41 DEL8 DEL12 DEL83 DEL40 DEL39 DEL42 DEL42 DEL44 DEL83 DEL43 DEL42 DEL44 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31