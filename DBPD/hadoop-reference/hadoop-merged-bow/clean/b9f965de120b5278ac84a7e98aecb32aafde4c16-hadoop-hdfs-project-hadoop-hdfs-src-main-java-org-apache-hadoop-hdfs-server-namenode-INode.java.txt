HDFS-4103. Support O(1) snapshot creation.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1424782 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
+import com.google.common.base.Preconditions;
+  
+  /**
+   * Assert that the snapshot parameter must be null since this class only take
+   * care current state. Subclasses should override the methods for handling the
+   * snapshot states.
+   */
+  static void assertNull(Snapshot snapshot) {
+    if (snapshot != null) {
+      throw new AssertionError("snapshot is not null: " + snapshot);
+    }
+  }
-  protected INodeDirectory parent = null;
-  protected long modificationTime = 0L;
-  protected long accessTime = 0L;
+  INodeDirectory parent = null;
+  private long modificationTime = 0L;
+  private long accessTime = 0L;
-    this(other.getLocalNameBytes(), other.permission, other.getParent(), 
-        other.getModificationTime(), other.getAccessTime());
+    this(other.name, other.permission, other.parent, 
+        other.modificationTime, other.accessTime);
-  public abstract Pair<? extends INode, ? extends INode> createSnapshotCopy();
+  public Pair<? extends INode, ? extends INode> createSnapshotCopy() {
+    throw new UnsupportedOperationException(getClass().getSimpleName()
+        + " does not support createSnapshotCopy().");
+  }
-  public PermissionStatus getPermissionStatus() {
-    return new PermissionStatus(getUserName(),getGroupName(),getFsPermission());
+  public PermissionStatus getPermissionStatus(Snapshot snapshot) {
+    return new PermissionStatus(getUserName(snapshot), getGroupName(snapshot),
+        getFsPermission(snapshot));
-  private void updatePermissionStatus(PermissionStatusFormat f, long n) {
+  /** The same as getPermissionStatus(null). */
+  public PermissionStatus getPermissionStatus() {
+    return getPermissionStatus(null);
+  }
+  private void updatePermissionStatus(PermissionStatusFormat f, long n,
+      Snapshot latest) {
+    recordModification(latest);
-  /** Get user name */
-  public String getUserName() {
+  /**
+   * @param snapshot
+   *          if it is not null, get the result from the given snapshot;
+   *          otherwise, get the result from the current inode.
+   * @return user name
+   */
+  public String getUserName(Snapshot snapshot) {
-  /** Set user */
-  protected void setUser(String user) {
-    int n = SerialNumberManager.INSTANCE.getUserSerialNumber(user);
-    updatePermissionStatus(PermissionStatusFormat.USER, n);
+  /** The same as getUserName(null). */
+  public String getUserName() {
+    return getUserName(null);
-  /** Get group name */
-  public String getGroupName() {
+  /** Set user */
+  protected void setUser(String user, Snapshot latest) {
+    int n = SerialNumberManager.INSTANCE.getUserSerialNumber(user);
+    updatePermissionStatus(PermissionStatusFormat.USER, n, latest);
+  }
+  /**
+   * @param snapshot
+   *          if it is not null, get the result from the given snapshot;
+   *          otherwise, get the result from the current inode.
+   * @return group name
+   */
+  public String getGroupName(Snapshot snapshot) {
-  /** Set group */
-  protected void setGroup(String group) {
-    int n = SerialNumberManager.INSTANCE.getGroupSerialNumber(group);
-    updatePermissionStatus(PermissionStatusFormat.GROUP, n);
+  /** The same as getGroupName(null). */
+  public String getGroupName() {
+    return getGroupName(null);
-  /** Get the {@link FsPermission} */
-  public FsPermission getFsPermission() {
+  /** Set group */
+  protected void setGroup(String group, Snapshot latest) {
+    int n = SerialNumberManager.INSTANCE.getGroupSerialNumber(group);
+    updatePermissionStatus(PermissionStatusFormat.GROUP, n, latest);
+  }
+  /**
+   * @param snapshot
+   *          if it is not null, get the result from the given snapshot;
+   *          otherwise, get the result from the current inode.
+   * @return permission.
+   */
+  public FsPermission getFsPermission(Snapshot snapshot) {
+  /** The same as getFsPermission(null). */
+  public FsPermission getFsPermission() {
+    return getFsPermission(null);
+  }
-  void setPermission(FsPermission permission) {
-    updatePermissionStatus(PermissionStatusFormat.MODE, permission.toShort());
+  void setPermission(FsPermission permission, Snapshot latest) {
+    final short mode = permission.toShort();
+    updatePermissionStatus(PermissionStatusFormat.MODE, mode, latest);
+  }
+
+  /**
+   * This inode is being modified.  The previous version of the inode needs to
+   * be recorded in the latest snapshot.
+   *
+   * @param latest the latest snapshot that has been taken.
+   *        Note that it is null if no snapshots have been taken.
+   * @return see {@link #createSnapshotCopy()}. 
+   */
+  Pair<? extends INode, ? extends INode> recordModification(Snapshot latest) {
+    Preconditions.checkState(!isDirectory(),
+        "this is an INodeDirectory, this=%s", this);
+    return latest == null? null: parent.saveChild2Snapshot(this, latest);
-    this.name = DFSUtil.string2Bytes(name);
+    setLocalName(DFSUtil.string2Bytes(name));
-  void setLocalName(byte[] name) {
+  public void setLocalName(byte[] name) {
-  INodeDirectory getParent() {
+  public INodeDirectory getParent() {
-  /** 
-   * Get last modification time of inode.
-   * @return access time
+  /**
+   * @param snapshot
+   *          if it is not null, get the result from the given snapshot;
+   *          otherwise, get the result from the current inode.
+   * @return modification time.
-  public long getModificationTime() {
+  public long getModificationTime(Snapshot snapshot) {
+  /** The same as getModificationTime(null). */
+  public long getModificationTime() {
+    return getModificationTime(null);
+  }
+
-  public void updateModificationTime(long modtime) {
+  public void updateModificationTime(long mtime, Snapshot latest) {
-    if (this.modificationTime <= modtime) {
-      this.modificationTime = modtime;
+    if (mtime > modificationTime) {
+      setModificationTime(mtime, latest);
-  void setModificationTime(long modtime) {
+  public void setModificationTime(long modtime, Snapshot latest) {
+    recordModification(latest);
-   * Get access time of inode.
+   * @param snapshot
+   *          if it is not null, get the result from the given snapshot;
+   *          otherwise, get the result from the current inode.
-  public long getAccessTime() {
+  public long getAccessTime(Snapshot snapshot) {
+  /** The same as getAccessTime(null). */
+  public long getAccessTime() {
+    return getAccessTime(null);
+  }
+
-  void setAccessTime(long atime) {
+  void setAccessTime(long atime, Snapshot latest) {
+    recordModification(latest);
-  public boolean removeNode() {
-    if (parent == null) {
-      return false;
-    } else {
-      parent.removeChild(this);
-      parent = null;
-      return true;
-    }
-  }
-
-  public StringBuffer dumpTreeRecursively() {
+  public final StringBuffer dumpTreeRecursively() {
-    dumpTreeRecursively(new PrintWriter(out, true), new StringBuilder());
+    dumpTreeRecursively(new PrintWriter(out, true), new StringBuilder(), null);
-  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix) {
+  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix, Snapshot snapshot) {
-    out.println(parent == null? null: parent.getLocalName());
+    out.print(parent == null? null: parent.getLocalName() + "/");
+    if (!this.isDirectory()) {
+      out.println();
+    } else {
+      final INodeDirectory dir = (INodeDirectory)this;
+      out.println(", size=" + dir.getChildrenList(snapshot).size());
+    }

INS26 INS26 MOV31 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS39 UPD42 MOV42 INS44 INS8 UPD83 UPD83 MOV29 INS42 MOV44 INS8 INS8 MOV29 INS83 MOV43 INS42 INS44 INS8 INS29 MOV83 INS43 MOV42 INS8 INS44 INS44 INS29 INS83 INS43 INS42 INS8 INS44 INS44 INS29 INS83 INS43 INS42 INS8 INS44 INS44 INS29 INS83 INS43 INS42 INS8 INS44 INS29 INS74 INS42 INS44 INS8 INS83 INS83 INS44 INS29 INS83 INS39 INS42 INS8 INS44 INS83 INS44 INS44 INS29 UPD39 UPD42 INS8 INS44 INS83 INS44 INS65 INS43 INS42 INS25 INS17 INS53 INS43 INS42 INS41 INS65 INS42 INS41 INS43 INS42 INS21 INS65 UPD65 INS43 INS42 INS65 INS42 INS41 INS43 INS42 INS65 UPD65 INS43 INS42 INS65 INS42 INS41 INS43 INS42 INS65 INS65 INS43 INS42 INS65 INS42 INS41 INS43 INS42 INS60 INS65 INS65 INS65 INS43 INS76 INS76 INS43 INS42 INS21 INS41 UPD65 INS43 INS42 INS65 INS41 UPD42 INS43 INS42 INS43 INS42 INS21 UPD65 INS43 INS42 INS65 INS41 INS43 INS42 INS21 INS43 INS42 INS25 INS66 INS66 INS66 INS42 INS27 INS8 INS40 MOV40 INS40 INS40 INS40 INS14 INS42 INS14 INS66 INS32 INS42 INS32 INS42 INS66 INS66 UPD66 INS42 INS66 INS32 INS42 INS42 INS66 INS66 UPD66 INS42 INS66 INS32 INS42 UPD42 MOV42 INS66 INS66 UPD66 MOV66 INS42 INS66 INS32 INS42 INS83 INS39 INS59 INS66 INS66 INS42 INS66 INS66 INS66 INS65 INS66 INS42 INS43 INS43 INS42 INS32 INS16 INS32 INS42 INS66 UPD66 UPD66 INS42 INS66 INS32 INS42 UPD27 INS42 INS32 INS42 INS66 UPD66 INS42 INS66 INS32 INS42 INS32 INS42 INS38 INS8 INS8 INS42 INS33 INS53 INS43 INS27 MOV43 INS32 INS32 INS32 INS42 INS33 INS42 INS42 MOV42 INS33 INS42 MOV42 INS33 INS42 MOV42 INS33 INS42 MOV32 INS42 INS42 INS68 INS42 INS42 INS42 INS42 INS38 INS45 INS52 INS27 INS33 INS32 INS42 MOV32 INS42 INS33 INS42 UPD42 INS42 INS42 UPD42 MOV42 INS33 INS42 INS42 INS33 UPD42 INS32 INS21 INS60 INS21 INS14 INS42 INS32 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS33 INS42 INS42 INS52 INS42 INS32 INS27 INS52 INS42 INS32 INS83 INS43 INS59 INS32 INS43 INS27 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 INS45 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS43 INS52 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL42 DEL32 DEL32 DEL32 DEL32 DEL17 DEL8 DEL31 DEL83 DEL32 DEL32 DEL32 DEL14 DEL41 DEL8 DEL31 DEL66 DEL65 DEL65 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL7 DEL42 DEL33 DEL27 DEL9 DEL41 DEL8 DEL42 DEL52 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL9 DEL41 DEL8 DEL25 DEL8