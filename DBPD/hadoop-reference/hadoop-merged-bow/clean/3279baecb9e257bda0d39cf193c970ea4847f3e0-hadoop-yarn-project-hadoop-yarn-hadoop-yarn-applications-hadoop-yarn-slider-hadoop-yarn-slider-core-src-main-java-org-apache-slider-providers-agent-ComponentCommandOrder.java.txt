YARN-5538. Apply SLIDER-875 to yarn-native-services. Contributed by Billie Rinaldi

+import org.apache.slider.common.tools.SliderUtils;
+import org.apache.slider.core.conf.ConfTreeOperations;
+import java.util.HashSet;
+import static org.apache.slider.api.RoleKeys.ROLE_PREFIX;
+
+  Map<String, Collection<String>> prefixRoleMap = new HashMap<>();
+  Map<String, String> rolePrefixMap = new HashMap<>();
-  public ComponentCommandOrder(List<CommandOrder> commandOrders) {
+  public ComponentCommandOrder() {}
+
+  public ComponentCommandOrder(List<CommandOrder> commandOrders,
+      ConfTreeOperations resources) {
+    mergeCommandOrders(commandOrders, resources);
+  }
+
+  void mergeCommandOrders(List<CommandOrder> commandOrders,
+      ConfTreeOperations resources) {
+    for (String component : resources.getComponentNames()) {
+      String prefix = SliderUtils.trimPrefix(
+          resources.getComponentOpt(component, ROLE_PREFIX, null));
+      if (prefix != null) {
+        rolePrefixMap.put(component, prefix);
+        if (!prefixRoleMap.containsKey(prefix)) {
+          prefixRoleMap.put(prefix, new HashSet<String>());
+        }
+        prefixRoleMap.get(prefix).add(component);
+      }
+    }
-        ComponentCommand componentCmd = getComponentCommand(commandOrder.getCommand());
+        ComponentCommand componentCmd = getComponentCommand(
+            commandOrder.getCommand(), resources);
-        List<ComponentState> requiredStates = parseRequiredStates(requires);
+        List<ComponentState> requiredStates = parseRequiredStates(requires,
+            resources);
-  private List<ComponentState> parseRequiredStates(String requires) {
+  private List<ComponentState> parseRequiredStates(String requires,
+      ConfTreeOperations resources) {
-      retList.add(getComponentState(componentStateStr));
+      retList.add(getComponentState(componentStateStr, resources));
-  private ComponentCommand getComponentCommand(String compCmdStr) {
+  private ComponentCommand getComponentCommand(String compCmdStr,
+      ConfTreeOperations resources) {
+    if (resources.getComponent(compStr) == null && !prefixRoleMap.containsKey(compStr)) {
+      throw new IllegalArgumentException("Component " + compStr + " specified" +
+          " in command order does not exist");
+    }
+
-  private ComponentState getComponentState(String compStStr) {
+  private ComponentState getComponentState(String compStStr,
+      ConfTreeOperations resources) {
+    if (resources.getComponent(compStr) == null && !prefixRoleMap.containsKey(compStr)) {
+      throw new IllegalArgumentException("Component " + compStr + " specified" +
+          " in command order does not exist");
+    }
+
-    boolean canExecute = true;
-    if (dependencies.containsKey(command) && dependencies.get(command).containsKey(component)) {
-      List<ComponentState> required = dependencies.get(command).get(component);
-      for (ComponentState stateToMatch : required) {
-        for (ComponentInstanceState currState : currentStates) {
-          log.debug("Checking schedule {} {} against dependency {} is {}",
-                    component, command, currState.getComponentName(), currState.getState());
-          if (currState.getComponentName().equals(stateToMatch.componentName)) {
-            if (currState.getState() != stateToMatch.state) {
-              if (stateToMatch.state == State.STARTED) {
+    if (!dependencies.containsKey(command)) {
+      return true;
+    }
+    List<ComponentState> required = new ArrayList<>();
+    if (dependencies.get(command).containsKey(component)) {
+      required.addAll(dependencies.get(command).get(component));
+    }
+    String prefix = rolePrefixMap.get(component);
+    if (prefix != null && dependencies.get(command).containsKey(prefix)) {
+      required.addAll(dependencies.get(command).get(prefix));
+    }
+
+    for (ComponentState stateToMatch : required) {
+      for (ComponentInstanceState currState : currentStates) {
+        log.debug("Checking schedule {} {} against dependency {} is {}",
+            component, command, currState.getComponentName(), currState.getState());
+        if (currState.getComponentName().equals(stateToMatch.componentName) ||
+            (prefixRoleMap.containsKey(stateToMatch.componentName) &&
+                prefixRoleMap.get(stateToMatch.componentName).contains(currState.getComponentName()))) {
+          if (currState.getState() != stateToMatch.state) {
+            if (stateToMatch.state == State.STARTED) {
+              log.info("Cannot schedule {} {} as dependency {} is {}",
+                  component, command, currState.getComponentName(), currState.getState());
+              return false;
+            } else {
+              //state is INSTALLED
+              if (currState.getState() != State.STARTING && currState.getState() != State.STARTED) {
-                         component, command, currState.getComponentName(), currState.getState());
-                canExecute = false;
-              } else {
-                //state is INSTALLED
-                if (currState.getState() != State.STARTING && currState.getState() != State.STARTED) {
-                  log.info("Cannot schedule {} {} as dependency {} is {}",
-                           component, command, currState.getComponentName(), currState.getState());
-                  canExecute = false;
-                }
+                    component, command, currState.getComponentName(), currState.getState());
+                return false;
-          if (!canExecute) {
-            break;
-          }
-        }
-        if (!canExecute) {
-          break;
-
-    return canExecute;
+    return true;

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS74 INS59 INS74 INS59 INS83 INS42 INS8 INS83 INS42 INS44 INS44 INS8 INS39 UPD42 INS44 INS44 INS44 INS44 MOV8 MOV70 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS74 INS42 INS43 INS42 INS21 INS43 INS42 INS70 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS25 INS60 INS25 INS60 INS25 INS41 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS74 INS43 INS43 INS42 INS32 INS42 INS44 INS32 INS8 INS42 INS42 INS27 INS8 INS42 INS27 INS8 MOV74 INS59 MOV32 INS8 INS43 INS59 INS27 INS8 MOV44 UPD42 INS9 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS27 INS38 INS53 INS27 INS38 INS53 MOV32 INS41 INS42 INS14 INS21 INS42 INS42 INS32 INS27 INS32 INS21 INS70 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS33 INS32 INS14 INS32 INS33 INS32 INS14 INS9 INS74 INS32 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS32 MOV44 INS42 MOV8 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS43 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 MOV21 INS42 INS42 INS32 INS32 INS38 INS8 INS32 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS21 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 MOV27 INS42 INS42 INS42 INS14 INS32 INS32 INS74 INS42 INS42 INS40 INS32 INS42 INS32 MOV27 INS8 INS43 INS43 INS42 INS42 INS40 INS42 INS42 INS41 INS25 INS42 INS42 INS9 MOV27 MOV8 INS41 INS9 DEL83 DEL42 DEL10 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL25 DEL42 DEL38 DEL10 DEL8 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL27 DEL42 DEL59 DEL60 DEL42 DEL70 DEL8 DEL25 DEL42 DEL41 DEL8