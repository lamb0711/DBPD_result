HDFS-2318. Provide authentication to webhdfs using SPNEGO and delegation tokens.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171611 13f79535-47bb-0310-9956-ffa450edef68

+import java.security.PrivilegedExceptionAction;
+import javax.servlet.http.HttpServletRequest;
+import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenSecretManager;
+import org.apache.hadoop.hdfs.web.resources.DelegationParam;
+import org.apache.hadoop.hdfs.web.resources.UserParam;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.security.Credentials;
+import org.apache.hadoop.security.SecurityUtil;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.security.token.TokenIdentifier;
+  private @Context HttpServletRequest request;
-  private static URI redirectURI(final NameNode namenode,
+  private Token<? extends TokenIdentifier> generateDelegationToken(
+      final NameNode namenode, final UserGroupInformation ugi,
+      final String renewer) throws IOException {
+    final Credentials c = DelegationTokenSecretManager.createCredentials(
+        namenode, ugi, request.getUserPrincipal().getName());
+    final Token<? extends TokenIdentifier> t = c.getAllTokens().iterator().next();
+    t.setService(new Text(SecurityUtil.buildDTServiceName(
+        NameNode.getUri(namenode.getNameNodeAddress()),
+        NameNode.DEFAULT_PORT)));
+    return t;
+  }
+
+  private URI redirectURI(final NameNode namenode,
+      final UserGroupInformation ugi, final DelegationParam delegation,
-    final String query = op.toQueryString() + Param.toSortedString("&", parameters);
+
+    final String delegationQuery;
+    if (!UserGroupInformation.isSecurityEnabled()) {
+      //security disabled
+      delegationQuery = "";
+    } else if (delegation.getValue() != null) {
+      //client has provided a token
+      delegationQuery = "&" + delegation;
+    } else {
+      //generate a token
+      final Token<? extends TokenIdentifier> t = generateDelegationToken(
+          namenode, ugi, request.getUserPrincipal().getName());
+      delegationQuery = "&" + new DelegationParam(t.encodeToUrlString());
+    }
+    final String query = op.toQueryString()
+        + '&' + new UserParam(ugi) + delegationQuery
+        + Param.toSortedString("&", parameters);
+      @Context final UserGroupInformation ugi,
+      @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
+          final DelegationParam delegation,
-      ) throws IOException, URISyntaxException {
+      ) throws IOException, URISyntaxException, InterruptedException {
-      LOG.trace(op + ": " + path
+      LOG.trace(op + ": " + path + ", ugi=" + ugi
+    return ugi.doAs(new PrivilegedExceptionAction<Response>() {
+      @Override
+      public Response run() throws IOException, URISyntaxException {
+
-      final URI uri = redirectURI(namenode, fullpath, op.getValue(), -1L,
+      final URI uri = redirectURI(namenode, ugi, delegation, fullpath,
+          op.getValue(), -1L,
+      }
+    });
+      @Context final UserGroupInformation ugi,
+      @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
+          final DelegationParam delegation,
-      ) throws IOException, URISyntaxException {
+      ) throws IOException, URISyntaxException, InterruptedException {
-      LOG.trace(op + ": " + path
-            + Param.toSortedString(", ", bufferSize));
+      LOG.trace(op + ": " + path + ", ugi=" + ugi
+          + Param.toSortedString(", ", bufferSize));
+    return ugi.doAs(new PrivilegedExceptionAction<Response>() {
+      @Override
+      public Response run() throws IOException, URISyntaxException {
+
-      final URI uri = redirectURI(namenode, fullpath, op.getValue(), -1L,
-          bufferSize);
+      final URI uri = redirectURI(namenode, ugi, delegation, fullpath,
+          op.getValue(), -1L, bufferSize);
+      }
+    });
+      @Context final UserGroupInformation ugi,
+      @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
+          final DelegationParam delegation,
-      ) throws IOException, URISyntaxException {
-    return get(ROOT, op, offset, length, bufferSize);
+      ) throws IOException, URISyntaxException, InterruptedException {
+    return get(ugi, delegation, ROOT, op, offset, length, bufferSize);
+      @Context final UserGroupInformation ugi,
+      @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
+          final DelegationParam delegation,
-      ) throws IOException, URISyntaxException {
+      ) throws IOException, URISyntaxException, InterruptedException {
-      LOG.trace(op + ", " + path
+      LOG.trace(op + ": " + path + ", ugi=" + ugi
+
+    return ugi.doAs(new PrivilegedExceptionAction<Response>() {
+      @Override
+      public Response run() throws IOException, URISyntaxException {
+
-      final URI uri = redirectURI(namenode, fullpath, op.getValue(),
-          offset.getValue(), offset, length, bufferSize);
+      final URI uri = redirectURI(namenode, ugi, delegation, fullpath,
+          op.getValue(), offset.getValue(), offset, length, bufferSize);
+      }
+    });
+      @Context final UserGroupInformation ugi,
-      ) throws IOException {
+      ) throws IOException, InterruptedException {
-      LOG.trace(op + ", " + path
-        + Param.toSortedString(", ", recursive));
+      LOG.trace(op + ": " + path + ", ugi=" + ugi
+          + Param.toSortedString(", ", recursive));
-    switch(op.getValue()) {
-    case DELETE:
-      final NameNode namenode = (NameNode)context.getAttribute("name.node");
-      final String fullpath = path.getAbsolutePath();
-      final boolean b = namenode.getRpcServer().delete(fullpath, recursive.getValue());
-      final String js = JsonUtil.toJsonString(DeleteOpParam.Op.DELETE, b);
-      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+    return ugi.doAs(new PrivilegedExceptionAction<Response>() {
+      @Override
+      public Response run() throws IOException {
+        final NameNode namenode = (NameNode)context.getAttribute("name.node");
+        final String fullpath = path.getAbsolutePath();
-    default:
-      throw new UnsupportedOperationException(op + " is not supported");
-    }    
+        switch(op.getValue()) {
+        case DELETE:
+        {
+          final boolean b = namenode.getRpcServer().delete(fullpath, recursive.getValue());
+          final String js = JsonUtil.toJsonString(DeleteOpParam.Op.DELETE, b);
+          return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+        }
+        default:
+          throw new UnsupportedOperationException(op + " is not supported");
+        }
+      }
+    });

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS78 INS43 INS59 INS83 INS74 INS42 INS44 INS44 INS44 INS43 INS8 INS44 INS44 INS44 INS44 INS43 INS44 INS44 INS43 INS44 INS44 INS43 INS43 INS44 INS44 INS43 INS8 INS44 INS43 INS8 INS42 INS42 INS42 INS43 INS76 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS60 INS21 INS41 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS25 INS78 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS42 INS41 INS78 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS42 INS41 INS78 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS42 MOV25 INS41 INS78 INS83 INS43 INS42 INS42 MOV25 INS41 INS42 INS43 INS42 INS42 INS42 INS83 INS43 INS59 INS83 INS74 INS59 INS32 INS42 INS42 INS42 INS83 INS43 INS59 INS38 INS8 INS25 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS76 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS21 INS27 INS8 INS8 INS42 INS42 INS14 INS42 UPD42 MOV42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS42 INS7 INS32 INS33 INS21 INS60 INS21 INS13 INS14 INS42 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS45 INS42 INS42 INS7 INS83 INS74 INS59 INS7 INS43 INS42 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS43 INS76 INS42 INS32 INS42 INS27 INS42 INS45 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS45 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 UPD45 INS45 INS42 INS42 INS42 INS78 INS83 MOV43 INS42 INS43 INS43 MOV8 UPD45 INS45 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 MOV8 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS45 INS14 INS42 INS42 INS42 INS42 MOV60 MOV60 MOV60 MOV50 INS42 INS42 INS42 INS42 MOV60 MOV60 INS50 INS42 INS42 INS42 INS42 INS42 INS42 MOV60 MOV60 INS42 INS32 INS42 INS43 INS32 INS8 MOV32 MOV49 MOV8 MOV49 MOV53 INS8 INS42 INS42 INS42 INS42 INS42 INS60 MOV41 MOV60 MOV60 MOV41 INS83 MOV43 INS59 INS42 INS32 MOV32 MOV38 INS42 INS42 INS42 INS42 INS42 MOV32 MOV38 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 DEL83 DEL42 DEL42 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL50