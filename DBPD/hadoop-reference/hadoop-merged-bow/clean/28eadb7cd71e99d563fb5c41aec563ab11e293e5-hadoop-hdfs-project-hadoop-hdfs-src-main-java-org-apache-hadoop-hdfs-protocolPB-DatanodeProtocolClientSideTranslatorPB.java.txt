HDFS-2899. Service protocol changes in DatanodeProtocol to add multiple storages. Contributed by Suresh Srinivas.



git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241519 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.proto.DatanodeProtocolProtos.StorageReportProto;
+import org.apache.hadoop.hdfs.server.protocol.DatanodeStorage;
+import org.apache.hadoop.hdfs.server.protocol.StorageBlockReport;
+import org.apache.hadoop.hdfs.server.protocol.StorageReceivedDeletedBlocks;
+import org.apache.hadoop.hdfs.server.protocol.StorageReport;
-  public DatanodeRegistration registerDatanode(DatanodeRegistration registration)
-      throws IOException {
-    RegisterDatanodeRequestProto req = RegisterDatanodeRequestProto
-        .newBuilder().setRegistration(PBHelper.convert(registration)).build();
+  public DatanodeRegistration registerDatanode(DatanodeRegistration registration,
+      DatanodeStorage[] storages) throws IOException {
+    RegisterDatanodeRequestProto.Builder builder = RegisterDatanodeRequestProto
+        .newBuilder().setRegistration(PBHelper.convert(registration));
+    for (DatanodeStorage s : storages) {
+      builder.addStorages(PBHelper.convert(s));
+    }
+    
-      resp = rpcProxy.registerDatanode(NULL_CONTROLLER, req);
+      resp = rpcProxy.registerDatanode(NULL_CONTROLLER, builder.build());
-      long capacity, long dfsUsed, long remaining, long blockPoolUsed,
-      int xmitsInProgress, int xceiverCount, int failedVolumes)
-      throws IOException {
-    StorageReportProto report = StorageReportProto.newBuilder()
-        .setBlockPoolUsed(blockPoolUsed).setCapacity(capacity)
-        .setDfsUsed(dfsUsed).setRemaining(remaining)
-        .setStorageID(registration.getStorageID()).build();
-    
-    HeartbeatRequestProto req = HeartbeatRequestProto.newBuilder()
-        .setRegistration(PBHelper.convert(registration)).addReports(report)
+      StorageReport[] reports, int xmitsInProgress, int xceiverCount,
+      int failedVolumes) throws IOException {
+    HeartbeatRequestProto.Builder builder = HeartbeatRequestProto.newBuilder()
+        .setRegistration(PBHelper.convert(registration))
-        .setFailedVolumes(failedVolumes)
-        .build();
+        .setFailedVolumes(failedVolumes);
+    for (StorageReport r : reports) {
+      builder.addReports(PBHelper.convert(r));
+    }
+    
-      resp = rpcProxy.sendHeartbeat(NULL_CONTROLLER, req);
+      resp = rpcProxy.sendHeartbeat(NULL_CONTROLLER, builder.build());
-      String poolId, long[] blocks) throws IOException {
-    StorageBlockReportProto.Builder reportBuilder = StorageBlockReportProto
-        .newBuilder().setStorageID(registration.getStorageID());
+      String poolId, StorageBlockReport[] reports) throws IOException {
+    BlockReportRequestProto.Builder builder = BlockReportRequestProto
+        .newBuilder().setRegistration(PBHelper.convert(registration))
+        .setBlockPoolId(poolId);
-    if (blocks != null) {
+    for (StorageBlockReport r : reports) {
+      StorageBlockReportProto.Builder reportBuilder = StorageBlockReportProto
+          .newBuilder().setStorageID(r.getStorageID());
+      long[] blocks = r.getBlocks();
+      builder.addReports(reportBuilder.build());
-    BlockReportRequestProto req = BlockReportRequestProto
-        .newBuilder().setRegistration(PBHelper.convert(registration))
-        .setBlockPoolId(poolId).addReports(reportBuilder.build()).build();
-      resp = rpcProxy.blockReport(NULL_CONTROLLER, req);
+      resp = rpcProxy.blockReport(NULL_CONTROLLER, builder.build());
-  public void blockReceivedAndDeleted(DatanodeRegistration reg,
-      String poolId, ReceivedDeletedBlockInfo[] receivedAndDeletedBlocks)
+  public void blockReceivedAndDeleted(DatanodeRegistration registration,
+      String poolId, StorageReceivedDeletedBlocks[] receivedAndDeletedBlocks)
-    StorageReceivedDeletedBlocksProto.Builder builder = 
-        StorageReceivedDeletedBlocksProto.newBuilder()
-        .setStorageID(reg.getStorageID());
-    if (receivedAndDeletedBlocks != null) {
-      for (int i = 0; i < receivedAndDeletedBlocks.length; i++) {
-        builder.addBlocks(PBHelper.convert(receivedAndDeletedBlocks[i]));
-      }
-    }
-    BlockReceivedAndDeletedRequestProto req = 
+    BlockReceivedAndDeletedRequestProto.Builder builder = 
-        .setRegistration(PBHelper.convert(reg))
-        .setBlockPoolId(poolId).addBlocks(builder.build()).build();
+        .setRegistration(PBHelper.convert(registration))
+        .setBlockPoolId(poolId);
+    for (StorageReceivedDeletedBlocks storageBlock : receivedAndDeletedBlocks) {
+      StorageReceivedDeletedBlocksProto.Builder repBuilder = 
+          StorageReceivedDeletedBlocksProto.newBuilder();
+      repBuilder.setStorageID(storageBlock.getStorageID());
+      for (ReceivedDeletedBlockInfo rdBlock : storageBlock.getBlocks()) {
+        repBuilder.addBlocks(PBHelper.convert(rdBlock));
+      }
+      builder.addBlocks(repBuilder.build());
+    }
-      rpcProxy.blockReceivedAndDeleted(NULL_CONTROLLER, req);
+      rpcProxy.blockReceivedAndDeleted(NULL_CONTROLLER, builder.build());

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS44 INS44 INS44 INS8 INS5 INS42 INS70 INS5 UPD42 MOV42 INS70 INS5 INS42 INS70 UPD42 INS5 INS42 INS60 INS70 MOV54 INS43 INS85 UPD43 INS44 INS42 INS8 INS43 INS85 UPD43 INS44 INS42 INS8 INS43 INS85 UPD43 INS44 INS42 MOV8 INS43 INS85 INS43 INS59 INS44 INS42 INS8 INS42 INS40 INS42 MOV32 INS43 INS42 INS21 INS42 INS40 INS42 MOV32 INS43 INS42 INS21 INS42 INS40 INS42 MOV32 INS43 INS42 INS60 INS60 INS21 INS42 INS40 INS42 INS32 INS43 INS42 MOV60 INS21 INS70 INS21 INS42 INS32 UPD42 UPD42 UPD42 MOV42 INS32 INS42 MOV43 INS59 MOV5 INS59 INS32 INS32 INS42 INS42 UPD42 MOV42 INS32 MOV44 INS32 INS8 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 MOV32 MOV32 UPD42 MOV42 INS32 UPD42 MOV32 INS42 INS42 INS32 MOV43 UPD42 INS42 INS42 INS21 UPD42 MOV42 MOV42 INS32 MOV32 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 MOV32 INS42 INS32 INS42 INS42 INS32 MOV42 MOV42 INS42 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 MOV32 UPD42 DEL42 DEL42 DEL42 DEL32 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL44 DEL39 DEL42 DEL44 DEL43 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL85 DEL5 DEL42 DEL42 DEL33 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL43 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL8