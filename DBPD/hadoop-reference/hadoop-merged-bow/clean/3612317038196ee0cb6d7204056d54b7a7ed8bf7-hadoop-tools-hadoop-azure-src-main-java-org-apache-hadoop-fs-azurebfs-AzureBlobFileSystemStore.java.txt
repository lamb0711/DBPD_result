HADOOP-16818. ABFS: Combine append+flush calls for blockblob & appendblob


Contributed by Ishani Ahuja.
+  /**
+   * The set of directories where we should store files as append blobs.
+   */
+  private Set<String> appendBlobDirSet;
+
+    // Extract the directories that should contain append blobs
+    String appendBlobDirs = abfsConfiguration.getAppendBlobDirs();
+    if (appendBlobDirs.trim().isEmpty()) {
+      this.appendBlobDirSet = new HashSet<String>();
+    } else {
+      this.appendBlobDirSet = new HashSet<>(Arrays.asList(
+          abfsConfiguration.getAppendBlobDirs().split(AbfsHttpConstants.COMMA)));
+    }
+  }
+
+  /**
+   * Checks if the given key in Azure Storage should be stored as a page
+   * blob instead of block blob.
+   */
+  public boolean isAppendBlobKey(String key) {
+    return isKeyForDirectorySet(key, appendBlobDirSet);
-      final AbfsRestOperation op = client.createPath(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), true, overwrite,
-              isNamespaceEnabled ? getOctalNotation(permission) : null,
-              isNamespaceEnabled ? getOctalNotation(umask) : null);
-      perfInfo.registerResult(op.getResult()).registerSuccess(true);
+        boolean appendBlob = false;
+        if (isAppendBlobKey(path.toString())) {
+          appendBlob = true;
+        }
+
+      client.createPath(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), true, overwrite,
+          isNamespaceEnabled ? getOctalNotation(permission) : null,
+          isNamespaceEnabled ? getOctalNotation(umask) : null,
+          appendBlob);
-              client,
-              AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path),
-              0,
-              abfsConfiguration.getWriteBufferSize(),
-              abfsConfiguration.isFlushEnabled(),
-              abfsConfiguration.isOutputStreamFlushDisabled());
+          client,
+          AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path),
+          0,
+          abfsConfiguration.getWriteBufferSize(),
+          abfsConfiguration.isFlushEnabled(),
+          abfsConfiguration.isOutputStreamFlushDisabled(),
+          abfsConfiguration.isAppendWithFlushEnabled(),
+          appendBlob);
-              isNamespaceEnabled ? getOctalNotation(permission) : null,
-              isNamespaceEnabled ? getOctalNotation(umask) : null);
+          isNamespaceEnabled ? getOctalNotation(permission) : null,
+          isNamespaceEnabled ? getOctalNotation(umask) : null, false);
+      boolean appendBlob = false;
+      if (isAppendBlobKey(path.toString())) {
+        appendBlob = true;
+      }
+
-              client,
-              AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path),
-              offset,
-              abfsConfiguration.getWriteBufferSize(),
-              abfsConfiguration.isFlushEnabled(),
-              abfsConfiguration.isOutputStreamFlushDisabled());
+          client,
+          AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path),
+          offset,
+          abfsConfiguration.getWriteBufferSize(),
+          abfsConfiguration.isFlushEnabled(),
+          abfsConfiguration.isOutputStreamFlushDisabled(),
+          abfsConfiguration.isAppendWithFlushEnabled(),
+          appendBlob);
-}
+}

INS23 INS31 INS29 INS83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS43 INS43 INS42 INS60 INS25 INS65 INS43 INS42 INS41 INS66 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS66 INS66 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS21 INS21 INS42 INS42 INS42 INS60 INS25 MOV60 INS60 INS25 INS42 INS42 INS42 INS42 INS7 INS7 INS39 INS59 INS32 INS8 INS39 INS59 INS32 INS8 INS22 INS14 INS22 INS14 INS42 INS9 INS42 INS32 INS21 INS42 INS42 MOV27 INS9 INS42 MOV16 MOV16 UPD42 MOV27 INS32 INS42 MOV42 INS42 INS9 INS42 INS32 INS21 INS32 INS42 INS52 INS42 INS74 INS52 INS42 INS74 INS32 INS42 INS42 INS7 INS42 INS42 INS9 INS9 INS42 INS42 INS7 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 DEL42 DEL32 DEL32 DEL9 DEL42 DEL83 DEL42 DEL42 DEL42 DEL9 DEL9 DEL32 DEL59 DEL60