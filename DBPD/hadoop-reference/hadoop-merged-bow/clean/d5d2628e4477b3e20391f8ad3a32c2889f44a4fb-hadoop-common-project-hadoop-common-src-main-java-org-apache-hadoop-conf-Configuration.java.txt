Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.ref.WeakReference;
+import com.google.common.base.Preconditions;
-  private static final Map<ClassLoader, Map<String, Class<?>>>
-    CACHE_CLASSES = new WeakHashMap<ClassLoader, Map<String, Class<?>>>();
+  private static final Map<ClassLoader, Map<String, WeakReference<Class<?>>>>
+    CACHE_CLASSES = new WeakHashMap<ClassLoader, Map<String, WeakReference<Class<?>>>>();
+   * @throws IllegalArgumentException when the value or name is null.
+    Preconditions.checkArgument(
+        name != null,
+        "Property name must not be null");
+    Preconditions.checkArgument(
+        value != null,
+        "Property value must not be null");
+  
+  /**
+   * Get the value of the <code>name</code> property as a set of comma-delimited
+   * <code>int</code> values.
+   * 
+   * If no such property exists, an empty array is returned.
+   * 
+   * @param name property name
+   * @return property value interpreted as an array of comma-delimited
+   *         <code>int</code> values
+   */
+  public int[] getInts(String name) {
+    String[] strings = getTrimmedStrings(name);
+    int[] ints = new int[strings.length];
+    for (int i = 0; i < strings.length; i++) {
+      ints[i] = Integer.parseInt(strings[i]);
+    }
+    return ints;
+  }
-    if (null == valueString || "".equals(valueString)) {
+    if (null == valueString || valueString.isEmpty()) {
-    if (null == valString || "".equals(valString)) {
+    if (null == valString || valString.isEmpty()) {
-    Map<String, Class<?>> map;
+    Map<String, WeakReference<Class<?>>> map;
-          new WeakHashMap<String, Class<?>>());
+          new WeakHashMap<String, WeakReference<Class<?>>>());
-    Class<?> clazz = map.get(name);
+    Class<?> clazz = null;
+    WeakReference<Class<?>> ref = map.get(name); 
+    if (ref != null) {
+       clazz = ref.get();
+    }
+     
-        map.put(name, NEGATIVE_CACHE_SENTINEL);
+        map.put(name, new WeakReference<Class<?>>(NEGATIVE_CACHE_SENTINEL));
-      map.put(name, clazz);
+      map.put(name, new WeakReference<Class<?>>(clazz));
+  @Override
+  private Document parse(DocumentBuilder builder, URL url)
+      throws IOException, SAXException {
+    if (!quietmode) {
+      LOG.info("parsing URL " + url);
+    }
+    if (url == null) {
+      return null;
+    }
+    return parse(builder, url.openStream(), url.toString());
+  }
+
+  private Document parse(DocumentBuilder builder, InputStream is,
+      String systemId) throws IOException, SAXException {
+    if (!quietmode) {
+      LOG.info("parsing input stream " + is);
+    }
+    if (is == null) {
+      return null;
+    }
+    try {
+      return (systemId == null) ? builder.parse(is) : builder.parse(is,
+          systemId);
+    } finally {
+      is.close();
+    }
+  }
+
-        URL url = (URL)resource;
-        if (url != null) {
-          if (!quiet) {
-            LOG.info("parsing " + url);
-          }
-          doc = builder.parse(url.toString());
-        }
+        doc = parse(builder, (URL)resource);
-        if (url != null) {
-          if (!quiet) {
-            LOG.info("parsing " + url);
-          }
-          doc = builder.parse(url.toString());
-        }
+        doc = parse(builder, url);
-            LOG.info("parsing " + file);
+            LOG.info("parsing File " + file);
-          InputStream in = new BufferedInputStream(new FileInputStream(file));
-          try {
-            doc = builder.parse(in);
-          } finally {
-            in.close();
-          }
+          doc = parse(builder, new BufferedInputStream(
+              new FileInputStream(file)), ((Path)resource).toString());
-        try {
-          doc = builder.parse((InputStream)resource);
-          returnCachedProperties = true;
-        } finally {
-          ((InputStream)resource).close();
-        }
+        doc = parse(builder, (InputStream) resource, null);
+        returnCachedProperties = true;
+  @Override
+    Configuration.addDeprecation("dfs.umaskmode",
+        new String[]{CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY});
-   * for getClassByName. {@see Configuration#getClassByNameOrNull(String)}
+   * for getClassByName. {@link Configuration#getClassByNameOrNull(String)}
+
+  public static void dumpDeprecatedKeys() {
+    for (Map.Entry<String, DeprecatedKeyInfo> entry : deprecatedKeyMap.entrySet()) {
+      StringBuilder newKeys = new StringBuilder();
+      for (String newKey : entry.getValue().newKeys) {
+        newKeys.append(newKey).append("\t");
+      }
+      System.out.println(entry.getKey() + "\t" + newKeys.toString());
+    }
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 UPD74 MOV74 INS29 INS83 INS5 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS8 MOV43 INS74 INS65 INS21 INS21 INS65 INS65 INS65 INS39 INS85 INS43 INS42 INS60 INS60 INS24 INS41 INS60 INS25 INS42 INS42 INS43 INS42 MOV43 INS42 INS42 INS42 INS25 INS25 INS41 INS42 INS43 INS42 MOV43 INS42 INS43 INS42 INS42 INS42 INS25 INS25 INS54 INS42 INS21 INS70 MOV43 MOV43 INS74 UPD74 INS42 INS66 INS32 INS32 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 UPD74 MOV74 MOV74 INS59 INS74 INS27 INS8 INS42 INS38 INS8 INS27 INS8 MOV32 INS42 INS42 INS38 INS8 INS27 INS8 INS8 INS8 INS32 UPD65 INS44 INS32 INS8 INS43 MOV74 UPD74 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS43 INS85 INS42 INS32 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 MOV43 INS74 INS42 INS33 INS43 INS74 UPD42 INS42 INS33 INS21 INS42 INS21 INS42 INS33 INS41 INS42 INS32 INS42 INS21 INS42 INS33 INS41 INS41 INS21 INS42 INS42 INS45 INS3 INS68 INS74 INS42 INS42 INS42 INS60 INS70 INS21 INS42 INS74 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS42 UPD43 MOV43 MOV74 INS42 INS43 INS76 INS7 INS32 INS33 UPD42 MOV42 INS42 INS32 INS33 INS16 INS32 MOV8 INS5 INS4 INS42 INS42 INS69 INS43 INS43 INS43 INS43 INS59 INS44 INS22 INS8 INS32 INS43 MOV74 INS39 INS85 INS2 INS32 UPD42 INS42 INS42 INS32 INS14 INS42 INS42 INS27 INS42 INS42 INS27 INS36 INS32 INS32 INS42 INS42 MOV8 INS43 INS85 INS40 INS43 INS40 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS32 INS42 INS21 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS74 INS42 INS45 INS42 INS45 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV60 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS45 INS32 INS42 INS42 INS43 INS74 INS42 INS33 INS32 MOV8 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS76 INS42 INS42 MOV11 INS42 INS42 INS42 UPD74 MOV74 INS74 INS42 INS42 INS42 MOV42 MOV21 INS43 INS74 INS43 INS74 INS42 INS43 MOV74 INS42 INS43 INS76 INS42 INS33 INS42 INS42 INS42 MOV14 INS32 INS36 UPD42 MOV42 UPD45 INS11 INS43 INS42 INS42 DEL74 DEL45 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL38 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL38 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL42 DEL59 DEL60 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL66