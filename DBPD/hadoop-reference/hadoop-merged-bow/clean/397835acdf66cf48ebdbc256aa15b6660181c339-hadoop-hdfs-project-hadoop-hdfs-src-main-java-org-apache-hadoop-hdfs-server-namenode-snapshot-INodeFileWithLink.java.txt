svn merge -c -1432788 for reverting HDFS-4098. Add FileWithLink, INodeFileUnderConstructionWithLink and INodeFileUnderConstructionSnapshot in order to support append to snapshotted files.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433284 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo;
- * Represent an {@link INodeFile} that is snapshotted.
- * Note that snapshot files are represented by {@link INodeFileSnapshot}.
+ * INodeFile with a link to the next element.
+ * This class is used to represent the original file that is snapshotted.
+ * The snapshot files are represented by {@link INodeFileSnapshot}.
+ * The link of all the snapshot files and the original file form a circular
+ * linked list so that all elements are accessible by any of the elements.
-public class INodeFileWithLink extends INodeFile implements FileWithLink {
-  private FileWithLink next;
+public class INodeFileWithLink extends INodeFile {
+  private INodeFileWithLink next;
-    setNext(this);
+    next = this;
-  @SuppressWarnings("unchecked")
-  @Override
-  public <N extends INodeFile & FileWithLink> N getNext() {
-    return (N)next;
-  }
-
-  @Override
-  public <N extends INodeFile & FileWithLink> void setNext(N next) {
+  void setNext(INodeFileWithLink next) {
-  @Override
-  public <N extends INodeFile & FileWithLink> void insert(N inode) {
+  INodeFileWithLink getNext() {
+    return next;
+  }
+  
+  /** Insert inode to the circular linked list. */
+  void insert(INodeFileWithLink inode) {
+  /**
+   * @return the max file replication of the elements
+   *         in the circular linked list.
+   */
-    return Util.getBlockReplication(this);
+    short max = getFileReplication();
+    // i may be null since next will be set to null when the INode is deleted
+    for(INodeFileWithLink i = next; i != this && i != null; i = i.getNext()) {
+      final short replication = i.getFileReplication();
+      if (replication > max) {
+        max = replication;
+      }
+    }
+    return max;
+  /**
+   * {@inheritDoc}
+   * 
+   * Remove the current inode from the circular linked list.
+   * If some blocks at the end of the block list no longer belongs to
+   * any other inode, collect them and update the block list.
+   */
-    if (next == null || next == this) {
+    if (next == this) {
-      return super.collectSubtreeBlocksAndClear(info);
+      super.collectSubtreeBlocksAndClear(info);
-      return Util.collectSubtreeBlocksAndClear(this, info);
+      // There are other inode(s) using the blocks.
+      // Compute max file size excluding this and find the last inode. 
+      long max = next.computeFileSize(true);
+      short maxReplication = next.getFileReplication();
+      INodeFileWithLink last = next;
+      for(INodeFileWithLink i = next.getNext(); i != this; i = i.getNext()) {
+        final long size = i.computeFileSize(true);
+        if (size > max) {
+          max = size;
+        }
+        final short rep = i.getFileReplication();
+        if (rep > maxReplication) {
+          maxReplication = rep;
+        }
+        last = i;
+      }
+
+      collectBlocksBeyondMaxAndClear(max, info);
+      
+      // remove this from the circular linked list.
+      last.next = this.next;
+      // Set the replication of the current INode to the max of all the other
+      // linked INodes, so that in case the current INode is retrieved from the
+      // blocksMap before it is removed or updated, the correct replication
+      // number can be retrieved.
+      this.setFileReplication(maxReplication, null);
+      this.next = null;
+      // clear parent
+      setParent(null);
+    }
+    return 1;
+  }
+
+  private void collectBlocksBeyondMaxAndClear(final long max,
+      final BlocksMapUpdateInfo info) {
+    final BlockInfo[] oldBlocks = getBlocks();
+    if (oldBlocks != null) {
+      //find the minimum n such that the size of the first n blocks > max
+      int n = 0;
+      for(long size = 0; n < oldBlocks.length && max > size; n++) {
+        size += oldBlocks[n].getNumBytes();
+      }
+
+      // Replace the INode for all the remaining blocks in blocksMap
+      BlocksMapINodeUpdateEntry entry = new BlocksMapINodeUpdateEntry(this,
+          next);
+      if (info != null) {
+        for (int i = 0; i < n; i++) {
+          info.addUpdateBlock(oldBlocks[i], entry);
+        }
+      }
+      
+      // starting from block n, the data is beyond max.
+      if (n < oldBlocks.length) {
+        // resize the array.  
+        final BlockInfo[] newBlocks;
+        if (n == 0) {
+          newBlocks = null;
+        } else {
+          newBlocks = new BlockInfo[n];
+          System.arraycopy(oldBlocks, 0, newBlocks, 0, n);
+        }
+        for(INodeFileWithLink i = next; i != this; i = i.getNext()) {
+          i.setBlocks(newBlocks);
+        }
+
+        // collect the blocks beyond max.  
+        if (info != null) {
+          for(; n < oldBlocks.length; n++) {
+            info.addDeleteBlock(oldBlocks[n]);
+          }
+        }
+      }
+      setBlocks(null);

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS43 MOV59 INS39 INS42 INS44 MOV8 INS43 INS42 INS8 INS29 INS29 MOV78 MOV83 INS39 INS42 INS8 INS29 MOV78 MOV83 INS39 INS42 MOV44 INS8 UPD83 UPD39 UPD42 INS44 INS44 UPD66 UPD66 UPD66 INS66 INS66 UPD42 MOV42 INS43 INS42 INS42 INS41 INS65 UPD43 INS65 INS60 INS24 INS41 INS65 INS25 INS41 INS83 INS39 INS42 INS83 INS43 INS42 INS60 INS7 UPD42 MOV42 INS42 INS66 UPD42 INS66 INS66 INS39 INS59 INS58 INS27 INS7 INS8 INS42 INS65 INS66 INS66 INS66 MOV27 MOV8 INS8 INS34 INS42 INS83 INS5 INS59 INS27 INS8 INS42 INS52 INS42 INS32 INS43 INS59 INS27 INS27 INS42 INS32 INS60 INS25 INS21 INS60 INS60 INS60 INS24 INS21 INS21 INS21 INS21 INS21 INS43 INS85 INS42 INS32 UPD42 MOV42 MOV33 INS60 INS24 INS60 INS25 INS25 INS21 INS42 UPD42 MOV42 INS42 INS42 INS42 INS52 INS42 INS33 INS42 INS42 INS83 INS39 INS59 INS27 INS8 MOV48 INS39 INS59 INS39 INS59 INS43 INS59 INS58 INS27 INS7 INS8 INS32 INS7 INS32 INS7 INS32 INS42 INS42 INS39 INS59 INS58 INS27 INS37 INS8 INS43 INS59 INS27 INS8 INS27 MOV8 INS32 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS42 INS43 INS59 INS42 INS52 INS42 INS32 INS60 INS25 INS60 INS25 INS21 INS42 INS42 INS42 INS40 INS22 INS52 INS42 INS42 INS33 INS22 INS33 INS42 INS33 INS42 INS34 INS39 INS59 INS27 INS27 INS42 INS21 INS42 INS42 INS14 INS42 INS33 INS24 INS42 INS40 INS60 INS25 INS24 INS25 INS42 INS33 INS42 INS42 INS7 INS42 INS42 INS9 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS83 INS39 INS59 INS27 INS8 INS83 INS39 INS59 INS27 INS8 INS7 INS52 INS42 INS52 INS42 INS42 INS34 INS42 INS40 INS42 INS42 INS7 INS43 INS52 INS42 INS58 INS27 INS37 INS8 INS83 INS5 INS59 INS27 INS8 INS8 INS58 INS27 INS7 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS39 INS59 INS42 INS42 INS42 INS21 INS43 INS85 INS42 INS42 INS34 INS21 INS21 INS21 INS43 INS59 INS42 INS52 INS42 INS32 INS21 INS42 INS33 INS24 INS42 INS42 INS9 INS7 INS42 INS42 INS7 INS2 INS42 INS42 INS34 INS32 INS42 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS33 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS21 INS42 INS42 INS5 INS42 INS32 INS43 INS85 INS42 INS42 INS2 INS42 INS42 INS42 DEL42 DEL65 DEL43 DEL83 DEL43 DEL23 DEL42 DEL52 DEL32 DEL42 DEL45 DEL79 DEL42 DEL42 DEL43 DEL43 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL31 DEL42 DEL78 DEL42 DEL43 DEL43 DEL73 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL73 DEL41 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL52 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL52 DEL42 DEL32 DEL41 DEL27 DEL27