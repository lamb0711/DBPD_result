YARN-5340. Fixed a race condition in RollingLevelDBTimelineStore that caused loss of Timeline events. Contributed by Li Lu.

-   * time doesn't exist, set it based on the information provided. Should only
-   * be called when a lock has been obtained on the entity.
+   * time doesn't exist, set it based on the information provided.
-  private Long getAndSetStartTime(String entityId, String entityType,
-      Long startTime, List<TimelineEvent> events) throws IOException {
+  private Long getAndSetStartTime(String entityId,
+      String entityType, Long startTime, List<TimelineEvent> events)
+      throws IOException {
-   * cache if it is found. Should only be called when a lock has been obtained
-   * on the entity.
+   * cache if it is found.
-    // retrieve value for key
-    byte[] v = starttimedb.get(b);
-    if (v == null) {
-      // start time doesn't exist in db
-      if (suggestedStartTime == null) {
-        return null;
-      }
-      startAndInsertTime = suggestedStartTime;
+    synchronized (this) {
+      // retrieve value for key
+      byte[] v = starttimedb.get(b);
+      if (v == null) {
+        // start time doesn't exist in db
+        if (suggestedStartTime == null) {
+          return null;
+        }
+        startAndInsertTime = suggestedStartTime;
-      // write suggested start time
-      starttimedb.put(b, writeReverseOrderedLong(suggestedStartTime));
-    } else {
-      // found start time in db, so ignore suggested start time
-      startAndInsertTime = readReverseOrderedLong(v, 0);
+        // write suggested start time
+        starttimedb.put(b, writeReverseOrderedLong(suggestedStartTime));
+      } else {
+        // found start time in db, so ignore suggested start time
+        startAndInsertTime = readReverseOrderedLong(v, 0);
+      }

INS51 UPD66 UPD66 INS52 INS8 MOV60 MOV25 DEL66 DEL66