YARN-7326. Add recursion support and configure RegistryDNS to lookup upstream. Contributed by Eric Yang

+import org.xbill.DNS.ExtendedResolver;
+import org.xbill.DNS.Lookup;
+import org.xbill.DNS.Resolver;
+import org.xbill.DNS.ResolverConfig;
+import org.xbill.DNS.SimpleResolver;
+import java.net.NetworkInterface;
+import java.net.SocketException;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.List;
+   * Lock to update resolver only once per request.
+   */
+  private final Object resolverUpdateLock = new Object();
+
+  /**
+   * Whether resolver update has been requested.
+   */
+  private boolean resolverUpdateRequested = true;
+
+  /**
+   * Initialize registryDNS to use /etc/resolv.conf values
+   * as default resolvers.
+   */
+  private void updateDNSServer(Configuration conf) {
+    synchronized (resolverUpdateLock) {
+      if (!resolverUpdateRequested) {
+        return;
+      }
+      int port = conf.getInt(KEY_DNS_PORT, DEFAULT_DNS_PORT);
+      resolverUpdateRequested = false;
+      List<InetAddress> list = new ArrayList<InetAddress>();
+      try {
+        // If resolv.conf contains the server's own IP address,
+        // and RegistryDNS handles the lookup.  Local IP address
+        // must be filter out from default resolvers to prevent
+        // self recursive loop.
+        if (port != 53) {
+          // When registryDNS is not running on default port,
+          // registryDNS can utilize local DNS server as upstream lookup.
+          throw new SocketException("Bypass filtering local DNS server.");
+        }
+        Enumeration<NetworkInterface> net =
+            NetworkInterface.getNetworkInterfaces();
+        while(net.hasMoreElements()) {
+          NetworkInterface n = (NetworkInterface) net.nextElement();
+          Enumeration<InetAddress> ee = n.getInetAddresses();
+          while (ee.hasMoreElements()) {
+            InetAddress i = (InetAddress) ee.nextElement();
+            list.add(i);
+          }
+        }
+      } catch (SocketException e) {
+      }
+      ResolverConfig.refresh();
+      ExtendedResolver resolver;
+      try {
+        resolver = new ExtendedResolver();
+      } catch (UnknownHostException e) {
+        LOG.error("Can not resolve DNS servers: ", e);
+        return;
+      }
+      for (Resolver check : resolver.getResolvers()) {
+        if (check instanceof SimpleResolver) {
+          InetAddress address = ((SimpleResolver) check).getAddress()
+              .getAddress();
+          if (list.contains(address)) {
+            resolver.deleteResolver(check);
+            continue;
+          } else {
+            check.setTimeout(30);
+          }
+        } else {
+          LOG.error("Not simple resolver!!!?" + check);
+        }
+      }
+      synchronized (Lookup.class) {
+        Lookup.setDefaultResolver(resolver);
+        Lookup.setDefaultSearchPath(ResolverConfig.getCurrentConfig()
+            .searchPath());
+      }
+      StringBuilder message = new StringBuilder();
+      message.append("DNS servers: ");
+      if (ResolverConfig.getCurrentConfig().servers() != null) {
+        for (String server : ResolverConfig.getCurrentConfig()
+            .servers()) {
+          message.append(server);
+          message.append(" ");
+        }
+      }
+      LOG.info(message.toString());
+    }
+  }
+  /**
+      updateDNSServer(conf);
-    if (rcode == Rcode.SERVFAIL) {
-      response.addRecord(question, Section.QUESTION);
-    }
+    response.addRecord(question, Section.QUESTION);
+      response.getHeader().setFlag(Flags.RA);
-    if (rcode != Rcode.NOERROR && rcode != Rcode.NXDOMAIN) {
-      return errorMessage(query, rcode);
+    if (rcode != Rcode.NOERROR) {
+      rcode = remoteLookup(response, name);
+      response.getHeader().setRcode(rcode);
-
+   * Lookup record from upstream DNS servers.
+   */
+  private byte remoteLookup(Message response, Name name) {
+    // Forward lookup to primary DNS servers
+    Record[] answers = getRecords(name, Type.ANY);
+    try {
+      for (Record r : answers) {
+        if (r.getType() == Type.SOA) {
+          response.addRecord(r, Section.AUTHORITY);
+        } else {
+          response.addRecord(r, Section.ANSWER);
+        }
+      }
+    } catch (NullPointerException e) {
+      return Rcode.NXDOMAIN;
+    } catch (Throwable e) {
+      return Rcode.SERVFAIL;
+    }
+    return Rcode.NOERROR;
+  }
+
+  /**
+   * Requests records for the given resource name.
+   *
+   * @param name - query string
+   * @param type - type of DNS record to lookup
+   * @return DNS records
+   */
+  protected Record[] getRecords(Name name, int type) {
+    try {
+      return new Lookup(name, type).run();
+    } catch (NullPointerException |
+        ExceptionInInitializerError e) {
+      LOG.error("Fail to lookup: " + name, e);
+    }
+    return null;
+  }
+
+  /**
-    LOG.info("found record? {}", sr != null && sr.isSuccessful());
+    LOG.info("found local record? {}", sr != null && sr.isSuccessful());
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS5 INS42 INS44 INS44 INS8 INS65 INS42 INS42 INS14 INS65 INS42 INS9 INS65 INS43 INS42 INS51 MOV21 INS65 INS43 INS42 INS43 INS42 INS60 INS54 INS41 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS39 INS42 INS54 INS41 INS66 INS43 INS66 INS66 INS66 INS42 INS42 INS8 MOV27 INS8 INS66 INS42 INS42 INS5 INS59 INS8 INS12 INS12 INS40 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS8 INS12 INS33 INS42 INS25 INS60 INS21 INS60 INS54 INS21 INS60 INS54 INS70 INS51 INS60 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS43 INS85 INS42 INS32 INS70 INS44 INS8 INS44 INS8 INS41 INS44 INS8 UPD45 INS38 INS8 INS39 INS59 INS7 INS74 INS59 INS8 INS12 INS32 INS43 INS59 INS8 INS12 INS44 INS32 INS8 INS57 INS8 INS43 INS59 INS32 INS27 INS8 INS32 INS32 INS32 INS7 INS32 INS42 INS42 INS42 INS40 INS44 INS42 INS8 INS43 INS42 INS41 INS43 INS42 INS41 INS32 INS84 INS42 INS21 INS42 INS41 INS42 INS32 INS42 INS9 INS43 INS43 INS42 INS14 INS25 INS60 INS61 INS44 INS8 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS43 INS42 INS42 INS42 INS25 INS43 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS45 INS32 INS33 INS70 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS42 INS32 INS32 INS42 MOV42 INS43 INS42 INS25 INS42 INS40 INS42 INS40 INS14 INS42 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS27 INS8 INS74 INS59 INS32 INS8 INS43 INS42 INS7 INS43 INS42 INS21 INS41 INS42 INS62 INS8 INS8 INS42 INS32 INS32 INS43 INS32 INS42 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS8 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS43 INS43 INS42 INS34 INS53 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS60 INS61 INS42 INS42 INS14 INS42 INS32 INS42 INS43 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS21 INS21 INS32 INS40 INS21 INS21 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS32 INS8 INS43 INS42 INS42 INS45 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS43 INS45 INS42 INS42 INS11 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS18 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS32 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS32 INS11 INS42 INS42 INS42 INS43 INS42 INS42 DEL42 DEL40 DEL27 DEL8 DEL25 DEL42 DEL40 DEL27 DEL27 DEL32 DEL41 DEL8