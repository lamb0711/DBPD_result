HDDS-1568 : Add RocksDB metrics to OM. Contributed by Aravindan Vijayan 


+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsRecordBuilder;
+import org.apache.hadoop.metrics2.MetricsSource;
+import org.apache.hadoop.metrics2.MetricsSystem;
+import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;
+import org.apache.hadoop.metrics2.lib.Interns;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-public class RocksDBStoreMBean implements DynamicMBean {
+public class RocksDBStoreMBean implements DynamicMBean, MetricsSource {
-  public RocksDBStoreMBean(Statistics statistics) {
+  private String contextName;
+
+  private static final Logger LOG =
+      LoggerFactory.getLogger(RocksDBStoreMBean.class);
+
+  public final static String ROCKSDB_CONTEXT_PREFIX = "Rocksdb_";
+
+  public RocksDBStoreMBean(Statistics statistics, String dbName) {
+    this.contextName = ROCKSDB_CONTEXT_PREFIX + dbName;
+  public static RocksDBStoreMBean create(Statistics statistics,
+                                         String contextName) {
+
+    RocksDBStoreMBean rocksDBStoreMBean = new RocksDBStoreMBean(
+        statistics, contextName);
+    MetricsSystem ms = DefaultMetricsSystem.instance();
+    MetricsSource metricsSource = ms.getSource(rocksDBStoreMBean.contextName);
+    if (metricsSource != null) {
+      return (RocksDBStoreMBean)metricsSource;
+    } else {
+      return ms.register(rocksDBStoreMBean.contextName,
+          "RocksDB Metrics",
+          rocksDBStoreMBean);
+    }
+  }
+
+
+  @Override
+  public void getMetrics(MetricsCollector metricsCollector, boolean b) {
+    MetricsRecordBuilder rb = metricsCollector.addRecord(contextName);
+    getHistogramData(rb);
+    getTickerTypeData(rb);
+  }
+
+  /**
+   * Collect all histogram metrics from RocksDB statistics.
+   * @param rb Metrics Record Builder.
+   */
+  private void getHistogramData(MetricsRecordBuilder rb) {
+    for (HistogramType histogramType : HistogramType.values()) {
+      HistogramData histogram =
+          statistics.getHistogramData(
+              HistogramType.valueOf(histogramType.name()));
+      for (String histogramAttribute : histogramAttributes) {
+        try {
+          Method method =
+              HistogramData.class.getMethod("get" + histogramAttribute);
+          double metricValue =  (double) method.invoke(histogram);
+          rb.addGauge(Interns.info(histogramType.name() + "_" +
+                  histogramAttribute.toUpperCase(), "RocksDBStat"),
+              metricValue);
+        } catch (Exception e) {
+          LOG.error("Error reading histogram data {} ", e);
+        }
+      }
+    }
+  }
+
+  /**
+   * Collect all Counter metrics from RocksDB statistics.
+   * @param rb Metrics Record Builder.
+   */
+  private void getTickerTypeData(MetricsRecordBuilder rb) {
+    for (TickerType tickerType : TickerType.values()) {
+      rb.addCounter(Interns.info(tickerType.name(), "RocksDBStat"),
+          statistics.getTickerCount(tickerType));
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS44 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS43 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS42 INS43 INS42 INS39 INS42 INS60 INS21 INS21 INS65 INS65 INS43 INS42 INS70 INS65 INS65 INS43 INS42 INS70 INS42 INS42 INS57 INS42 INS7 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS43 INS59 INS32 INS32 INS66 INS42 INS66 INS42 INS44 INS32 INS8 INS66 INS42 INS66 INS42 INS44 INS32 INS8 INS43 INS22 INS27 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS70 INS43 INS42 INS42 INS42 INS21 INS42 INS52 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS11 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS44 INS42 INS8 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS32 INS43 INS42 INS54 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS8 INS12 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS60 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS39 INS59 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS57 INS42 INS27 INS39 INS32 INS42 INS42 INS27 INS45 INS42 INS42 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42