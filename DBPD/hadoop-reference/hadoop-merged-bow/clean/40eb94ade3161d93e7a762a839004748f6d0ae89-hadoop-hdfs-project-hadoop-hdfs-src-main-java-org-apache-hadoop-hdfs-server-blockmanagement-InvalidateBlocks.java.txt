HDFS-5053. NameNode should invoke DataNode APIs to coordinate caching. (Andrew Wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1523145 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.PrintWriter;
-class InvalidateBlocks {
+abstract class InvalidateBlocks {
-  private final DatanodeManager datanodeManager;
-
-  InvalidateBlocks(final DatanodeManager datanodeManager) {
-    this.datanodeManager = datanodeManager;
-  }
-
+  synchronized int numStorages() {
+    return node2blocks.size();
+  }
+
-  /** Print the contents to out. */
-  synchronized void dump(final PrintWriter out) {
-    final int size = node2blocks.values().size();
-    out.println("Metasave: Blocks " + numBlocks 
-        + " waiting deletion from " + size + " datanodes.");
-    if (size == 0) {
-      return;
+  /**
+   * Polls up to <i>limit</i> blocks from the list of to-be-invalidated Blocks
+   * for a storage.
+   */
+  synchronized List<Block> pollNumBlocks(final String storageId, final int limit) {
+    final LightWeightHashSet<Block> set = node2blocks.get(storageId);
+    if (set == null) {
+      return null;
-
-    for(Map.Entry<String,LightWeightHashSet<Block>> entry : node2blocks.entrySet()) {
-      final LightWeightHashSet<Block> blocks = entry.getValue();
-      if (blocks.size() > 0) {
-        out.println(datanodeManager.getDatanode(entry.getKey()));
-        out.println(blocks);
-      }
+    List<Block> polledBlocks = set.pollN(limit);
+    // Remove the storage if the set is now empty
+    if (set.isEmpty()) {
+      remove(storageId);
+    numBlocks -= polledBlocks.size();
+    return polledBlocks;
-  synchronized List<Block> invalidateWork(
-      final String storageId, final DatanodeDescriptor dn) {
-    final LightWeightHashSet<Block> set = node2blocks.get(storageId);
-    if (set == null) {
-      return null;
-    }
-
-    // # blocks that can be sent in one message is limited
-    final int limit = datanodeManager.blockInvalidateLimit;
-    final List<Block> toInvalidate = set.pollN(limit);
-
-    // If we send everything in this message, remove this node entry
-    if (set.isEmpty()) {
-      remove(storageId);
-    }
-
-    dn.addBlocksToBeInvalidated(toInvalidate);
-    numBlocks -= toInvalidate.size();
-    return toInvalidate;
+  /**
+   * Return the set of to-be-invalidated blocks for a storage.
+   */
+  synchronized LightWeightHashSet<Block> getBlocks(String storageId) {
+    return node2blocks.get(storageId);
+
+  /**
+   * Schedules invalidation work associated with a storage at the corresponding
+   * datanode.
+   * @param storageId Storage of blocks to be invalidated
+   * @param dn Datanode where invalidation work will be scheduled
+   * @return List of blocks scheduled for invalidation at the datanode
+   */
+  abstract List<Block> invalidateWork(final String storageId,
+      final DatanodeDescriptor dn);

MOV31 MOV31 INS83 INS42 INS31 INS31 INS83 INS39 INS42 INS29 UPD42 INS44 MOV29 MOV83 MOV74 UPD42 MOV42 MOV44 INS8 INS29 INS83 INS74 INS42 INS44 MOV44 INS41 INS65 INS83 INS39 INS42 MOV43 INS42 INS41 INS65 INS65 INS65 INS65 UPD43 MOV43 MOV43 INS83 INS43 INS42 INS32 INS66 INS66 UPD42 UPD66 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 DEL40 DEL26 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL39 DEL83 DEL39 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL34 DEL27 DEL41 DEL8 DEL25 DEL40 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL83 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL83 DEL39 DEL42 DEL40 DEL59 DEL60 DEL83 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42