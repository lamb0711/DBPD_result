HDFS-9260. Improve the performance and GC friendliness of NameNode startup and full block reports (Staffan Friberg via cmccabe)

+import org.apache.hadoop.hdfs.util.FoldedTreeSet;
-  /**
-   * Iterates over the list of blocks belonging to the data-node.
-   */
-  class BlockIterator implements Iterator<BlockInfo> {
-    private BlockInfo current;
-
-    BlockIterator(BlockInfo head) {
-      this.current = head;
-    }
-
-    public boolean hasNext() {
-      return current != null;
-    }
-
-    public BlockInfo next() {
-      BlockInfo res = current;
-      current = current.getNext(current.findStorageInfo(DatanodeStorageInfo.this));
-      return res;
-    }
-
-    public void remove() {
-      throw new UnsupportedOperationException("Sorry. can't remove.");
-    }
-  }
-
-  private volatile BlockInfo blockList = null;
-  private int numBlocks = 0;
+  private final FoldedTreeSet<BlockInfo> blocks = new FoldedTreeSet<>();
-    return getState() == State.FAILED && numBlocks != 0;
+    return getState() == State.FAILED && !blocks.isEmpty();
+  /**
+   * For use during startup. Expects block to be added in sorted order
+   * to enable fast insert in to the DatanodeStorageInfo
+   *
+   * @param b Block to add to DatanodeStorageInfo
+   * @param reportedBlock The reported replica
+   * @return Enum describing if block was added, replaced or already existed
+   */
+  public AddBlockResult addBlockInitial(BlockInfo b, Block reportedBlock) {
+    // First check whether the block belongs to a different storage
+    // on the same DN.
+    AddBlockResult result = AddBlockResult.ADDED;
+    DatanodeStorageInfo otherStorage =
+        b.findStorageInfo(getDatanodeDescriptor());
+
+    if (otherStorage != null) {
+      if (otherStorage != this) {
+        // The block belongs to a different storage. Remove it first.
+        otherStorage.removeBlock(b);
+        result = AddBlockResult.REPLACED;
+      } else {
+        // The block is already associated with this storage.
+        return AddBlockResult.ALREADY_EXIST;
+      }
+    }
+
+    b.addStorage(this, reportedBlock);
+    blocks.addSortedLast(b);
+    return result;
+  }
-    // add to the head of the data-node list
-    insertToList(b);
+    blocks.add(b);
-  public void insertToList(BlockInfo b) {
-    blockList = b.listInsert(blockList, this);
-    numBlocks++;
-  }
-
-  public boolean removeBlock(BlockInfo b) {
-    blockList = b.listRemove(blockList, this);
-    if (b.removeStorage(this)) {
-      numBlocks--;
-      return true;
-    } else {
-      return false;
-    }
+  boolean removeBlock(BlockInfo b) {
+    blocks.remove(b);
+    return b.removeStorage(this);
-    return numBlocks;
+    return blocks.size();
-    return new BlockIterator(blockList);
-  }
-
-  /**
-   * Move block to the head of the list of blocks belonging to the data-node.
-   * @return the index of the head of the blockList
-   */
-  int moveBlockToHead(BlockInfo b, int curIndex, int headIndex) {
-    blockList = b.moveBlockToHead(blockList, this, curIndex, headIndex);
-    return curIndex;
-  }
-
-  /**
-   * Used for testing only
-   * @return the head of the blockList
-   */
-  @VisibleForTesting
-  BlockInfo getBlockListHeadForTesting(){
-    return blockList;
+    return blocks.iterator();
+  /**
+   * The fill ratio of the underlying TreeSet holding blocks.
+   *
+   * @return the fill ratio of the tree
+   */
+  public double treeSetFillRatio() {
+    return blocks.fillRatio();
+  }
+
+  /**
+   * Compact the underlying TreeSet holding blocks.
+   *
+   * @param timeout Maximum time to spend compacting the tree set in
+   *                milliseconds.
+   *
+   * @return true if compaction completed, false if aborted
+   */
+  public boolean treeSetCompact(long timeout) {
+    return blocks.compact(timeout);
+  }
+

INS26 MOV31 MOV31 INS40 INS23 INS31 INS83 INS83 INS74 INS59 INS29 INS83 INS43 INS42 MOV44 INS44 INS8 INS83 UPD39 INS42 INS83 INS39 INS42 INS44 INS43 MOV43 INS42 INS14 MOV65 INS65 INS65 INS65 UPD42 MOV42 INS43 INS42 INS60 INS60 INS25 INS21 MOV21 INS41 MOV41 INS41 INS65 UPD65 INS39 INS42 INS42 INS74 INS66 UPD66 INS42 INS66 INS42 INS66 INS66 UPD42 MOV42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS32 MOV32 INS32 INS32 UPD66 UPD66 INS32 INS66 INS42 UPD66 INS66 UPD66 INS32 INS43 INS38 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS32 UPD42 MOV42 MOV33 INS25 INS42 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS52 INS21 MOV21 INS41 INS32 INS40 INS42 INS42 INS42 UPD42 INS40 DEL29 DEL42 DEL43 DEL43 DEL74 DEL83 DEL43 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL55 DEL83 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL52 DEL32 DEL32 DEL42 DEL52 DEL32 DEL7 DEL83 DEL39 DEL42 DEL42 DEL37 DEL21 DEL8 DEL31 DEL83 DEL42 DEL52 DEL32 DEL7 DEL9 DEL42 DEL37 DEL21 DEL8 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL52 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL42 DEL78 DEL42 DEL43 DEL42 DEL42