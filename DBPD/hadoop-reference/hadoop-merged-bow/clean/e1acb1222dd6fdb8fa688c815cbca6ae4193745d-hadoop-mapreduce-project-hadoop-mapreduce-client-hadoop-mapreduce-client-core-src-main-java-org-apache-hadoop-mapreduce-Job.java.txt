MAPREDUCE-1788. o.a.h.mapreduce.Job shouldn't make a copy of the JobConf. (Arun Murthy via mahadev)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1172171 13f79535-47bb-0310-9956-ffa450edef68

-import javax.security.auth.login.LoginException;
-
+import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.fs.FileSystem;
-import org.apache.hadoop.fs.permission.FsPermission;
+import org.apache.hadoop.mapred.JobConf;
+import org.apache.hadoop.mapreduce.protocol.ClientProtocol;
-import org.apache.hadoop.security.UserGroupInformation;
-    this(new Cluster(conf), conf);
+    this(new JobConf(conf));
-  Job(Cluster cluster) throws IOException {
-    this(cluster, new Configuration());
-  }
-
-  Job(Cluster cluster, Configuration conf) throws IOException {
+  Job(JobConf conf) throws IOException {
-    this.cluster = cluster;
+    this.cluster = null;
-  Job(Cluster cluster, JobStatus status,
-             Configuration conf) throws IOException {
-    this(cluster, conf);
+  Job(JobStatus status, JobConf conf) throws IOException {
+    this(conf);
-   * Creates a new {@link Job} with no particular {@link Cluster} .
+   * Creates a new {@link Job} with no particular {@link Cluster} and a 
+   * given {@link Configuration}.
+   * 
+   * The <code>Job</code> makes a copy of the <code>Configuration</code> so 
+   * that any necessary internal modifications do not reflect on the incoming 
+   * parameter.
+   * 
-    return new Job(null, conf);
+    JobConf jobConf = new JobConf(conf);
+    return new Job(jobConf);
+   *
+   * The <code>Job</code> makes a copy of the <code>Configuration</code> so 
+   * that any necessary internal modifications do not reflect on the incoming 
+   * parameter.
-    Job result = new Job(null, conf);
+    Job result = getInstance(conf);
-  public static Job getInstance(Cluster cluster) throws IOException {
-     return new Job(cluster);
+  /**
+   * Creates a new {@link Job} with no particular {@link Cluster} and given
+   * {@link Configuration} and {@link JobStatus}.
+   * A Cluster will be created from the conf parameter only when it's needed.
+   * 
+   * The <code>Job</code> makes a copy of the <code>Configuration</code> so 
+   * that any necessary internal modifications do not reflect on the incoming 
+   * parameter.
+   * 
+   * @param status job status
+   * @param conf job configuration
+   * @return the {@link Job} , with no connection to a cluster yet.
+   * @throws IOException
+   */
+  public static Job getInstance(JobStatus status, Configuration conf) 
+  throws IOException {
+    return new Job(status, new JobConf(conf));
+  }
+
+  /**
+   * Creates a new {@link Job} with no particular {@link Cluster}.
+   * A Cluster will be created from the conf parameter only when it's needed.
+   *
+   * The <code>Job</code> makes a copy of the <code>Configuration</code> so 
+   * that any necessary internal modifications do not reflect on the incoming 
+   * parameter.
+   * 
+   * @param ignored
+   * @return the {@link Job} , with no connection to a cluster yet.
+   * @throws IOException
+   * @deprecated Use {@link #getInstance()}
+   */
+  @Deprecated
+  public static Job getInstance(Cluster ignored) throws IOException {
+    return getInstance();
-  public static Job getInstance(Cluster cluster, Configuration conf) 
+  /**
+   * Creates a new {@link Job} with no particular {@link Cluster} and given
+   * {@link Configuration}.
+   * A Cluster will be created from the conf parameter only when it's needed.
+   * 
+   * The <code>Job</code> makes a copy of the <code>Configuration</code> so 
+   * that any necessary internal modifications do not reflect on the incoming 
+   * parameter.
+   * 
+   * @param ignored
+   * @param conf job configuration
+   * @return the {@link Job} , with no connection to a cluster yet.
+   * @throws IOException
+   * @deprecated Use {@link #getInstance(Configuration)}
+   */
+  @Deprecated
+  public static Job getInstance(Cluster ignored, Configuration conf) 
-    return new Job(cluster, conf);
+    return getInstance(conf);
+  /**
+   * Creates a new {@link Job} with no particular {@link Cluster} and given
+   * {@link Configuration} and {@link JobStatus}.
+   * A Cluster will be created from the conf parameter only when it's needed.
+   * 
+   * The <code>Job</code> makes a copy of the <code>Configuration</code> so 
+   * that any necessary internal modifications do not reflect on the incoming 
+   * parameter.
+   * 
+   * @param cluster cluster
+   * @param status job status
+   * @param conf job configuration
+   * @return the {@link Job} , with no connection to a cluster yet.
+   * @throws IOException
+   */
+  @Private
-    return new Job(cluster, status, conf);
+    Job job = getInstance(status, conf);
+    job.setCluster(cluster);
+    return job;
-  
+
+  
+  private void setStatus(JobStatus status) {
+    this.status = status;
+  }
+  /** Only for mocks in unit tests. */
+  @Private
+  private void setCluster(Cluster cluster) {
+    this.cluster = cluster;
+  }
+
+  /** Only for mocking via unit tests. */
+  @Private
+  public JobSubmitter getJobSubmitter(FileSystem fs, 
+      ClientProtocol submitClient) throws IOException {
+    return new JobSubmitter(fs, submitClient);
+  }
-    final JobSubmitter submitter = new JobSubmitter(cluster.getFileSystem(),
-        cluster.getClient());
+    final JobSubmitter submitter = 
+        getJobSubmitter(cluster.getFileSystem(), cluster.getClient());
-    Configuration clientConf = cluster.getConf();
+    Configuration clientConf = getConfiguration();

MOV26 MOV26 MOV26 INS26 MOV31 UPD40 UPD40 UPD40 INS40 MOV44 INS31 INS31 INS31 INS31 MOV43 INS29 MOV83 MOV83 MOV43 MOV42 MOV44 MOV44 MOV43 INS8 INS29 INS78 INS83 INS83 MOV43 INS42 INS44 MOV43 MOV8 INS29 INS78 MOV43 MOV43 INS29 INS78 INS44 MOV44 INS43 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS39 INS42 INS29 INS78 INS83 MOV43 INS42 INS44 INS44 MOV43 INS8 UPD43 UPD42 MOV46 INS21 UPD43 UPD42 INS60 INS65 INS65 INS65 INS65 INS65 INS41 INS65 INS65 INS65 INS65 INS65 INS42 MOV43 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS42 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS21 INS41 INS43 INS42 INS21 INS65 INS42 INS65 INS42 INS43 INS42 INS43 INS42 INS41 INS14 UPD42 INS7 UPD42 INS66 INS66 INS65 UPD66 INS66 INS66 INS66 INS43 INS59 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS14 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS65 INS32 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS32 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS42 MOV43 INS59 INS32 INS42 INS42 INS7 INS66 INS66 INS42 INS42 INS14 MOV43 INS43 INS42 INS22 INS33 INS42 INS42 INS42 INS14 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS14 INS42 INS42 INS42 INS68 INS42 INS42 INS42 INS42 INS42 INS68 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS43 INS42 INS42 INS32 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS69 INS42 INS42 INS42 INS52 INS42 INS42 INS42 MOV32 MOV32 UPD42 INS42 UPD42 MOV42 MOV43 DEL42 DEL14 DEL42 DEL42 DEL14 DEL17 DEL42 DEL33 DEL42 DEL43 DEL33 DEL42 DEL14 DEL42 DEL14 DEL43 DEL42 DEL44 DEL31 DEL42 DEL42 DEL14 DEL42 DEL42 DEL42 DEL14 DEL41 DEL42 DEL42 DEL43 DEL42 DEL44 DEL14 DEL42