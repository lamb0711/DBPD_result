HDDS-1856. Make required changes for Non-HA to use new HA code in OM. (#1174)


+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;
-import org.apache.hadoop.ozone.audit.AuditLogger;
-import org.apache.hadoop.ozone.om.response.volume.OMVolumeCreateResponse;
-      long transactionLogIndex) {
+      long transactionLogIndex,
+      OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper) {
-    AuditLogger auditLogger = ozoneManager.getAuditLogger();
-    OzoneManagerProtocolProtos.UserInfo userInfo = getOmRequest().getUserInfo();
-
+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();
+    boolean acquiredUserLock = false;
+    boolean acquiredVolumeLock = false;
+    IOException exception = null;
+    String owner = null;
+    OMClientResponse omClientResponse = null;
-    } catch (IOException ex) {
-      LOG.error("Volume deletion failed for volume:{}", volume, ex);
-      omMetrics.incNumVolumeDeleteFails();
-      auditLog(auditLogger, buildAuditMessage(OMAction.DELETE_VOLUME,
-          buildVolumeAuditMap(volume), ex, userInfo));
-      return new OMVolumeCreateResponse(null, null,
-          createErrorOMResponse(omResponse, ex));
-    }
-    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();
+      OmVolumeArgs omVolumeArgs = null;
+      OzoneManagerProtocolProtos.VolumeList newVolumeList = null;
-    OmVolumeArgs omVolumeArgs = null;
-    String owner = null;
-    boolean acquiredUserLock = false;
-    IOException exception = null;
-    OzoneManagerProtocolProtos.VolumeList newVolumeList = null;
-
-    omMetadataManager.getLock().acquireLock(VOLUME_LOCK, volume);
-    try {
+      acquiredVolumeLock = omMetadataManager.getLock().acquireLock(VOLUME_LOCK,
+          volume);
+      omResponse.setDeleteVolumeResponse(
+          DeleteVolumeResponse.newBuilder().build());
+      omClientResponse = new OMVolumeDeleteResponse(volume, owner,
+          newVolumeList, omResponse.build());
+
+      omClientResponse = new OMVolumeDeleteResponse(null, null, null,
+          createErrorOMResponse(omResponse, exception));
+      if (omClientResponse != null) {
+        omClientResponse.setFlushFuture(
+            ozoneManagerDoubleBufferHelper.add(omClientResponse,
+                transactionLogIndex));
+      }
-      omMetadataManager.getLock().releaseLock(VOLUME_LOCK, volume);
+      if (acquiredVolumeLock) {
+        omMetadataManager.getLock().releaseLock(VOLUME_LOCK, volume);
+      }
-    auditLog(auditLogger, buildAuditMessage(OMAction.DELETE_VOLUME,
-        buildVolumeAuditMap(volume), exception, userInfo));
+    auditLog(ozoneManager.getAuditLogger(),
+        buildAuditMessage(OMAction.DELETE_VOLUME, buildVolumeAuditMap(volume),
+            exception, getOmRequest().getUserInfo()));
-      omResponse.setDeleteVolumeResponse(
-          DeleteVolumeResponse.newBuilder().build());
-      return new OMVolumeDeleteResponse(volume, owner, newVolumeList,
-          omResponse.build());
-      return new OMVolumeDeleteResponse(null, null, null,
-          createErrorOMResponse(omResponse, exception));
+    return omClientResponse;
+

MOV26 UPD40 INS44 MOV60 MOV60 MOV60 INS43 INS42 MOV21 MOV41 INS42 INS39 UPD43 INS42 UPD42 INS9 INS42 UPD42 INS33 MOV25 MOV60 MOV60 MOV21 MOV21 INS21 INS25 INS25 MOV32 INS7 INS7 INS21 INS27 INS8 INS42 INS8 MOV32 UPD42 MOV32 INS42 MOV32 INS42 MOV14 INS7 INS42 INS33 INS21 MOV21 INS42 MOV14 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL41 DEL41 DEL42 DEL43 DEL33 DEL33 DEL42 DEL42 DEL42 DEL32 DEL14