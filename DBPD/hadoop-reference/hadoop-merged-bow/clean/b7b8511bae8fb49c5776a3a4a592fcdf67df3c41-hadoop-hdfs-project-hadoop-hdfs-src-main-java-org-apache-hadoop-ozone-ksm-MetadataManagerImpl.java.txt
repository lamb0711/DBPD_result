HDFS-11773. Ozone: KSM : add listVolumes. Contributed by Weiwei Yang.

+import com.google.common.collect.Lists;
+import com.google.protobuf.InvalidProtocolBufferException;
+import org.apache.hadoop.ksm.helpers.KsmVolumeArgs;
+import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos.VolumeInfo;
+import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos.VolumeList;
+
+  @Override
+  public List<KsmVolumeArgs> listVolumes(String userName,
+      String prefix, String startKey, int maxKeys) throws IOException {
+    List<KsmVolumeArgs> result = Lists.newArrayList();
+    VolumeList volumes;
+    if (Strings.isNullOrEmpty(userName)) {
+      volumes = getAllVolumes();
+    } else {
+      volumes = getVolumesByUser(userName);
+    }
+
+    if (volumes == null || volumes.getVolumeNamesCount() == 0) {
+      return result;
+    }
+
+    boolean startKeyFound = Strings.isNullOrEmpty(startKey);
+    for (String volumeName : volumes.getVolumeNamesList()) {
+      if (!Strings.isNullOrEmpty(prefix)) {
+        if (!volumeName.startsWith(prefix)) {
+          continue;
+        }
+      }
+
+      if (!startKeyFound && volumeName.equals(startKey)) {
+        startKeyFound = true;
+      }
+      if (startKeyFound && result.size() < maxKeys) {
+        byte[] volumeInfo = store.get(this.getVolumeKey(volumeName));
+        if (volumeInfo == null) {
+          // Could not get volume info by given volume name,
+          // since the volume name is loaded from db,
+          // this probably means ksm db is corrupted or some entries are
+          // accidentally removed.
+          throw new KSMException("Volume info not found for " + volumeName,
+              ResultCodes.FAILED_INTERNAL_ERROR);
+        }
+        VolumeInfo info = VolumeInfo.parseFrom(volumeInfo);
+        KsmVolumeArgs volumeArgs = KsmVolumeArgs.getFromProtobuf(info);
+        result.add(volumeArgs);
+      }
+    }
+
+    return result;
+  }
+
+  private VolumeList getVolumesByUser(String userName)
+      throws KSMException {
+    return getVolumesByUser(getUserKey(userName));
+  }
+
+  private VolumeList getVolumesByUser(byte[] userNameKey)
+      throws KSMException {
+    VolumeList volumes = null;
+    byte[] volumesInBytes = store.get(userNameKey);
+    if (volumesInBytes == null) {
+      // No volume found for this user, return an empty list
+      return VolumeList.newBuilder().build();
+    }
+
+    try {
+      volumes = VolumeList.parseFrom(volumesInBytes);
+    } catch (InvalidProtocolBufferException e) {
+      throw new KSMException("Unable to get volumes info by the given user, "
+          + "metadata might be corrupted",
+          e, ResultCodes.FAILED_INTERNAL_ERROR);
+    }
+    return volumes;
+  }
+
+  private VolumeList getAllVolumes() throws IOException {
+    // Scan all users in database
+    KeyPrefixFilter filter = new KeyPrefixFilter(OzoneConsts.KSM_USER_PREFIX);
+    // We are not expecting a huge number of users per cluster,
+    // it should be fine to scan all users in db and return us a
+    // list of volume names in string per user.
+    List<Map.Entry<byte[], byte[]>> rangeKVs = store
+        .getRangeKVs(null, Integer.MAX_VALUE, filter);
+
+    VolumeList.Builder builder = VolumeList.newBuilder();
+    for (Map.Entry<byte[], byte[]> entry : rangeKVs) {
+      VolumeList volumes = this.getVolumesByUser(entry.getKey());
+      builder.addAllVolumeNames(volumes.getVolumeNamesList());
+    }
+
+    return builder.build();
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS78 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS43 INS8 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS25 INS25 INS60 INS70 INS41 INS42 INS43 INS42 INS42 INS41 INS42 INS5 INS42 INS42 INS60 INS60 INS25 INS54 INS41 INS42 INS42 INS60 INS60 INS60 INS70 INS41 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS32 INS8 INS8 INS27 INS8 INS39 INS59 INS44 INS32 INS8 INS42 INS42 INS32 INS39 INS85 INS43 INS59 INS5 INS59 INS27 INS8 INS8 INS12 INS42 INS43 INS59 INS74 INS59 INS43 INS59 INS44 INS42 INS8 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS27 INS27 INS41 INS42 INS32 INS43 INS42 INS42 INS42 INS25 INS25 INS25 INS42 INS32 INS42 INS42 INS33 INS39 INS85 INS42 INS32 INS42 INS33 INS41 INS21 INS44 INS8 INS42 INS42 INS14 INS43 INS74 INS42 INS32 INS40 INS42 INS32 INS74 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS33 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS43 INS42 INS53 INS43 INS40 INS42 INS43 INS5 INS5 INS42 INS42 INS33 INS40 INS42 INS42 INS42 INS43 INS5 INS5 INS43 INS59 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS25 INS38 INS32 INS21 INS42 INS27 INS60 INS25 INS60 INS60 INS21 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS40 INS39 INS85 INS39 INS85 INS40 INS39 INS85 INS39 INS85 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS5 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS40 INS52 INS42 INS32 INS42 INS42 INS32 INS18 INS42 INS9 INS42 INS42 INS39 INS85 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS43 INS27 INS40 INS42 INS45 INS42