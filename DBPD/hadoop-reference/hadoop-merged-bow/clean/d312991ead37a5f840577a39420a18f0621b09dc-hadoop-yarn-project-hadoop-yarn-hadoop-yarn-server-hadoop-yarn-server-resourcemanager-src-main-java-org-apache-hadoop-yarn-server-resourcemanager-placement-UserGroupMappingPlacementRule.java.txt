YARN-10198. Remove Validation of Queue Exist under Managed Parent Queue

Contributed by Peter Bacsko. Reviewed by Manikandan R.

-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceScheduler;
-  public UserGroupMappingPlacementRule(boolean overrideWithQueueMappings,
+  @VisibleForTesting
+  UserGroupMappingPlacementRule(boolean overrideWithQueueMappings,
+  private String getPrimaryGroup(String user) throws IOException {
+    return groups.getGroups(user).get(0);
+  }
+
-            if (this.queueManager
-                .getQueue(groups.getGroups(user).get(0)) != null) {
-              QueueMapping queueMapping = 
-                                QueueMappingBuilder.create()
-                                    .type(mapping.getType())
-                                    .source(mapping.getSource()).queue(user)
-                                    .parentQueue(groups.getGroups(user).get(0))
-                                    .build();
-              validateQueueMapping(queueMapping);
-              return getPlacementContext(queueMapping, user);
-            } else {
-              return null;
-            }
+            return getContextForGroupParent(user, mapping,
+                getPrimaryGroup(user));
-            String secondaryGroup = getSecondaryGroup(user);
-            if (secondaryGroup != null) {
-              QueueMapping queueMapping = 
-                                QueueMappingBuilder.create()
-                                    .type(mapping.getType())
-                                    .source(mapping.getSource())
-                                    .queue(user)
-                                    .parentQueue(secondaryGroup)
-                                    .build();
-              validateQueueMapping(queueMapping);
-              return getPlacementContext(queueMapping, user);
-            } else {
-              return null;
-            }
+            return getContextForGroupParent(user, mapping,
+                getSecondaryGroup(user));
-            if (this.queueManager
-                .getQueue(groups.getGroups(user).get(0)) != null) {
-              return getPlacementContext(mapping,
-                  groups.getGroups(user).get(0));
-            } else {
-              return null;
-            }
+            return getContextForPrimaryGroup(user, mapping);
-            String secondaryGroup = getSecondaryGroup(user);
-            if (secondaryGroup != null) {
-              return getPlacementContext(mapping, secondaryGroup);
-            } else {
-              return null;
-            }
+            return getContextForSecondaryGroup(user, mapping);
+
-            return getPlacementContext(mapping, groups.getGroups(user).get(0));
+            return getPlacementContext(mapping, getPrimaryGroup(user));
+  // invoked for mappings:
+  //    u:%user:[parent].%primary_group
+  //    u:%user:%primary_group
+  private ApplicationPlacementContext getContextForPrimaryGroup(
+      String user,
+      QueueMapping mapping) throws IOException {
+    String group = getPrimaryGroup(user);
+
+    CSQueue parent = queueManager.getQueue(mapping.getParentQueue());
+
+    if (parent instanceof ManagedParentQueue) {
+      return getPlacementContext(mapping, group);
+    } else {
+      if (this.queueManager.getQueue(group) != null) {
+        return getPlacementContext(mapping, group);
+      } else {
+        return null;
+      }
+    }
+  }
+
+  // invoked for mappings
+  //    u:%user:%secondary_group
+  //    u:%user:[parent].%secondary_group
+  private ApplicationPlacementContext getContextForSecondaryGroup(
+      String user,
+      QueueMapping mapping) throws IOException {
+    String secondaryGroup = getSecondaryGroup(user);
+
+    if (secondaryGroup != null) {
+      if (this.queueManager.getQueue(secondaryGroup) != null) {
+        return getPlacementContext(mapping, secondaryGroup);
+      } else {
+        return null;
+      }
+    } else {
+      return null;
+    }
+  }
+
+  // invoked for mappings:
+  //    u:%user:%primary_group.%user
+  //    u:%user:%secondary_group.%user
+  private ApplicationPlacementContext getContextForGroupParent(
+      String user,
+      QueueMapping mapping,
+      String group) throws IOException {
+
+    if (this.queueManager.getQueue(group) != null) {
+      // replace the group string
+      QueueMapping resolvedGroupMapping =
+                        QueueMappingBuilder.create()
+                            .type(mapping.getType())
+                            .source(mapping.getSource())
+                            .queue(user)
+                            .parentQueue(group)
+                            .build();
+      validateQueueMapping(resolvedGroupMapping);
+      return getPlacementContext(resolvedGroupMapping, user);
+    } else {
+      return null;
+    }
+  }
+

MOV26 INS31 INS31 INS31 INS31 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 MOV8 INS42 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS42 INS43 INS42 INS43 INS42 INS42 MOV60 INS25 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 MOV32 INS42 INS42 INS43 INS59 INS43 INS59 INS62 INS8 INS8 INS42 INS42 MOV27 INS8 MOV8 INS42 INS42 INS42 INS27 INS8 MOV25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS41 INS25 INS25 INS32 INS33 INS41 MOV27 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS27 INS8 MOV8 INS27 INS8 MOV8 INS22 INS42 INS42 INS33 INS25 MOV25 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS41 INS32 INS33 INS41 INS52 INS42 UPD42 UPD42 UPD42 MOV32 INS8 MOV32 INS8 MOV22 INS42 INS42 INS32 MOV22 INS42 INS42 INS32 INS25 MOV25 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV27 INS8 INS25 MOV8 INS41 MOV27 INS8 INS25 INS32 INS41 MOV32 MOV8 INS25 INS42 INS42 INS42 INS32 INS32 MOV32 INS8 INS25 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS41 INS32 INS8 INS8 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL42 DEL34 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL32 DEL33 DEL27 DEL25 DEL8 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL25 DEL8 DEL25 DEL8 DEL25