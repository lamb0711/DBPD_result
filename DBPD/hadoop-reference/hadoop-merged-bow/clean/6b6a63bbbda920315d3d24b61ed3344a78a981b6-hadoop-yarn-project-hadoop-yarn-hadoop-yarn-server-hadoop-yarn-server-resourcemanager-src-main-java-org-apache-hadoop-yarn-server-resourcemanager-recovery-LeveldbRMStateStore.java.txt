Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

+import java.util.HashMap;
+import org.apache.hadoop.yarn.api.records.ReservationId;
+import org.apache.hadoop.yarn.proto.YarnServerResourceManagerRecoveryProtos.ReservationAllocationStateProto;
+/**
+ * Changes from 1.0 to 1.1, Addition of ReservationSystem state.
+ */
+  private static final String RM_RESERVATION_KEY_PREFIX =
+      RESERVATION_SYSTEM_ROOT + SEPARATOR;
-      .newInstance(1, 0);
+      .newInstance(1, 1);
+  private String getReservationNodeKey(String planName,
+      String reservationId) {
+    return RESERVATION_SYSTEM_ROOT + SEPARATOR + planName + SEPARATOR
+        + reservationId;
+  }
+
+    loadReservationState(rmState);
+  private void loadReservationState(RMState rmState) throws IOException {
+    int numReservations = 0;
+    LeveldbIterator iter = null;
+    try {
+      iter = new LeveldbIterator(db);
+      iter.seek(bytes(RM_RESERVATION_KEY_PREFIX));
+      while (iter.hasNext()) {
+        Entry<byte[],byte[]> entry = iter.next();
+        String key = asString(entry.getKey());
+
+        String planReservationString =
+            key.substring(RM_RESERVATION_KEY_PREFIX.length());
+        String[] parts = planReservationString.split(SEPARATOR);
+        if (parts.length != 2) {
+          LOG.warn("Incorrect reservation state key " + key);
+          continue;
+        }
+        String planName = parts[0];
+        String reservationName = parts[1];
+        ReservationAllocationStateProto allocationState =
+            ReservationAllocationStateProto.parseFrom(entry.getValue());
+        if (!rmState.getReservationState().containsKey(planName)) {
+          rmState.getReservationState().put(planName,
+              new HashMap<ReservationId, ReservationAllocationStateProto>());
+        }
+        ReservationId reservationId =
+            ReservationId.parseReservationId(reservationName);
+        rmState.getReservationState().get(planName).put(reservationId,
+            allocationState);
+        numReservations++;
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    } finally {
+      if (iter != null) {
+        iter.close();
+      }
+    }
+    LOG.info("Recovered " + numReservations + " reservations");
+  }
+
-  
+
+  @Override
+  protected void storeReservationState(
+      ReservationAllocationStateProto reservationAllocation, String planName,
+      String reservationIdName) throws Exception {
+    try {
+      WriteBatch batch = db.createWriteBatch();
+      try {
+        String key = getReservationNodeKey(planName, reservationIdName);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Storing state for reservation " + reservationIdName
+              + " plan " + planName + " at " + key);
+        }
+        batch.put(bytes(key), reservationAllocation.toByteArray());
+        db.write(batch);
+      } finally {
+        batch.close();
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  protected void updateReservationState(
+      ReservationAllocationStateProto reservationAllocation, String planName,
+      String reservationIdName) throws Exception {
+    storeReservationState(reservationAllocation, planName,
+        reservationIdName);
+  }
+
+  @Override
+  protected void removeReservationState(String planName,
+      String reservationIdName) throws Exception {
+    try {
+      WriteBatch batch = db.createWriteBatch();
+      try {
+        String reservationKey =
+            getReservationNodeKey(planName, reservationIdName);
+        batch.delete(bytes(reservationKey));
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Removing state for reservation " + reservationIdName
+              + " plan " + planName + " at " + reservationKey);
+        }
+        db.write(batch);
+      } finally {
+        batch.close();
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
-        Entry<byte[],byte[]> entry = iter.next();
+        Entry<byte[], byte[]> entry = iter.next();

INS26 INS26 INS26 INS40 INS40 INS40 INS29 INS23 INS31 INS31 INS31 INS31 INS31 INS65 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS66 INS42 INS42 INS27 INS42 INS43 INS42 INS43 INS42 INS41 INS21 INS43 INS42 INS42 INS60 INS60 INS54 INS21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS54 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS54 INS42 INS42 UPD34 INS42 INS42 INS27 INS32 INS42 INS39 INS59 INS43 INS59 INS8 INS12 INS8 INS32 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS32 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS33 INS21 INS21 INS61 INS44 INS8 INS25 INS42 INS42 INS27 INS60 INS54 INS44 INS8 INS42 INS42 INS42 INS42 INS60 INS54 INS44 INS8 INS7 INS32 INS32 INS8 INS43 INS42 INS53 INS27 INS8 INS45 INS42 INS45 INS43 INS59 INS8 INS8 INS43 INS42 INS53 INS43 INS59 INS8 INS8 INS43 INS42 INS53 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS25 INS60 INS21 INS21 INS42 INS14 INS42 INS33 INS21 INS42 INS42 INS32 INS60 INS25 INS21 INS21 INS21 INS42 INS14 INS42 INS42 INS32 INS60 INS21 INS25 INS21 INS21 INS42 INS14 INS43 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS5 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS37 INS43 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS8 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS8 INS32 INS32 INS43 INS42 INS42 INS43 INS5 INS5 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS40 INS34 INS21 INS18 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS34 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS74 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS43 INS43 INS43 INS42 INS42 INS42