HDFS-8453. Erasure coding: properly handle start offset for internal blocks in a block group. Contributed by Zhe Zhang.

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockIdManager;
-   * | <--------- LocatedStripedBlock (ID = 0) ---------> |
-   * LocatedBlock (0) | LocatedBlock (1) | LocatedBlock (2)
-   *                      ^
-   *                    offset
-   * On a striped file, the super method {@link DFSInputStream#getBlockAt}
-   * treats a striped block group as a single {@link LocatedBlock} object,
-   * which includes target in its range. This method adds the logic of:
-   *   1. Analyzing the index of required block based on offset
-   *   2. Parsing the block group to obtain the block location on that index
+   * The super method {@link DFSInputStream#refreshLocatedBlock} refreshes
+   * cached LocatedBlock by executing {@link DFSInputStream#getBlockAt} again.
+   * This method extends the logic by first remembering the index of the
+   * internal block, and re-parsing the refreshed block group with the same
+   * index.
-  protected LocatedBlock getBlockAt(long blkStartOffset) throws IOException {
-    LocatedBlock lb = getBlockGroupAt(blkStartOffset);
-
-    int idx = (int) ((blkStartOffset - lb.getStartOffset())
-        % (dataBlkNum + parityBlkNum));
+  protected LocatedBlock refreshLocatedBlock(LocatedBlock block)
+      throws IOException {
+    int idx = BlockIdManager.getBlockIndex(block.getBlock().getLocalBlock());
+    LocatedBlock lb = getBlockGroupAt(block.getStartOffset());
-      DFSClient.LOG.debug("getBlockAt for striped blocks, offset="
-          + blkStartOffset + ". Obtained block " + lb + ", idx=" + idx);
+      DFSClient.LOG.debug("refreshLocatedBlock for striped blocks, offset="
+          + block.getStartOffset() + ". Obtained block " + lb + ", idx=" + idx);
-    return StripedBlockUtil.constructInternalBlock(lsb, i, cellSize, dataBlkNum, idx);
+    return StripedBlockUtil.constructInternalBlock(
+        lsb, i, cellSize, dataBlkNum, idx);
-  protected void fetchBlockByteRange(long blockStartOffset, long start,
+  protected void fetchBlockByteRange(LocatedBlock block, long start,
-    LocatedStripedBlock blockGroup = getBlockGroupAt(blockStartOffset);
+    LocatedStripedBlock blockGroup = getBlockGroupAt(block.getStartOffset());
-        block.getStartOffset(), alignedStripe.getOffsetInBlock(),
-        alignedStripe.getOffsetInBlock() + alignedStripe.getSpanInBlock() - 1, chunk.buf,
-        chunk.getOffsets(), chunk.getLengths(),
+        block, alignedStripe.getOffsetInBlock(),
+        alignedStripe.getOffsetInBlock() + alignedStripe.getSpanInBlock() - 1,
+        chunk.buf, chunk.getOffsets(), chunk.getLengths(),
-      final long blockStartOffset, final long start, final long end,
+      final LocatedBlock block, final long start, final long end,
-          actualGetFromOneDataNode(datanode, blockStartOffset, start,
+          actualGetFromOneDataNode(datanode, block, start,

INS26 INS40 UPD42 MOV65 MOV43 UPD42 INS43 UPD42 INS43 UPD42 UPD66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 INS39 INS43 INS42 INS42 INS67 UPD42 INS42 UPD42 INS32 INS42 INS42 INS42 UPD42 INS32 INS42 INS32 MOV32 MOV42 INS32 INS42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD45 INS32 INS42 INS42 UPD42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL39 DEL39 DEL39 DEL42 DEL32 DEL27 DEL36 DEL42 DEL42 DEL27 DEL36 DEL27 DEL36 DEL11 DEL42 DEL39 DEL39