HADOOP-9956. RPC listener inefficiently assigns connections to readers (daryn)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541736 13f79535-47bb-0310-9956-ffa450edef68

+  private int readerPendingConnectionQueue;         // number of connections to queue per read thread
-      private volatile boolean adding = false;
+      final private BlockingQueue<Connection> pendingConnections;
+        this.pendingConnections =
+            new LinkedBlockingQueue<Connection>(readerPendingConnectionQueue);
+            // consume as many connections as currently queued to avoid
+            // unbridled acceptance of connections that starves the select
+            int size = pendingConnections.size();
+            for (int i=size; i>0; i--) {
+              Connection conn = pendingConnections.take();
+              conn.channel.register(readSelector, SelectionKey.OP_READ, conn);
+            }
-            while (adding) {
-              this.wait(1000);
-            }              
-       * This gets reader into the state that waits for the new channel
-       * to be registered with readSelector. If it was waiting in select()
-       * the thread will be woken up, otherwise whenever select() is called
-       * it will return even if there is nothing to read and wait
-       * in while(adding) for finishAdd call
+       * Updating the readSelector while it's being used is not thread-safe,
+       * so the connection must be queued.  The reader will drain the queue
+       * and update its readSelector before performing the next select
-      public void startAdd() {
-        adding = true;
+      public void addConnection(Connection conn) throws InterruptedException {
+        pendingConnections.put(conn);
-      
-      public synchronized SelectionKey registerChannel(SocketChannel channel)
-                                                          throws IOException {
-          return channel.register(readSelector, SelectionKey.OP_READ);
-      }
-
-      public synchronized void finishAdd() {
-        adding = false;
-        this.notify();        
-      }
-          reader.startAdd();
-          SelectionKey readKey = reader.registerChannel(channel);
-          c = new Connection(readKey, channel, Time.now());
-          readKey.attach(c);
+          c = new Connection(channel, Time.now());
+          reader.addConnection(c);
-        } finally {
-          reader.finishAdd(); 
+        } catch (InterruptedException ie) {
+          if (running) {
+            LOG.info(
+                getName() + ": disconnecting client " + c.getHostAddress() +
+                " due to unexpected interrupt");
+          }
+          closeConnection(c);
-    public Connection(SelectionKey key, SocketChannel channel, 
-                      long lastContact) {
+    public Connection(SocketChannel channel, long lastContact) {
+    this.readerPendingConnectionQueue = conf.getInt(
+        CommonConfigurationKeys.IPC_SERVER_RPC_READ_CONNECTION_QUEUE_SIZE_KEY,
+        CommonConfigurationKeys.IPC_SERVER_RPC_READ_CONNECTION_QUEUE_SIZE_DEFAULT);

INS23 INS83 INS39 INS59 INS42 INS31 INS21 UPD83 UPD83 INS74 MOV29 MOV83 MOV39 INS42 MOV44 UPD43 MOV43 MOV8 INS7 INS43 INS43 UPD42 INS21 UPD43 UPD42 UPD42 INS22 INS32 INS42 INS42 INS7 UPD66 UPD66 UPD66 UPD42 INS32 INS52 INS42 INS42 INS42 INS40 INS40 INS22 INS14 INS42 INS42 INS42 MOV21 INS12 INS52 INS42 INS74 INS42 INS44 INS8 INS43 INS43 INS60 INS24 INS43 INS42 INS25 INS21 INS42 INS42 INS39 INS59 INS58 INS27 INS37 INS8 UPD42 UPD42 INS42 INS42 INS8 INS32 INS42 INS32 INS39 INS59 INS42 INS34 INS42 INS60 MOV21 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS32 INS40 UPD42 INS42 INS40 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS45 INS32 INS45 INS42 UPD42 MOV42 UPD42 MOV42 DEL39 DEL9 DEL52 DEL34 DEL42 DEL8 DEL61 DEL66 DEL66 DEL42 DEL9 DEL7 DEL42 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL9 DEL7 DEL21 DEL52 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL8 DEL42 DEL43 DEL42 DEL44