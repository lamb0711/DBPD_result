Merge branch 'trunk' into HADOOP-12756

+import java.util.concurrent.locks.ReentrantReadWriteLock;
-  private boolean pending = true; // whether accepted/allocated by scheduler
+  // whether accepted/allocated by scheduler
+  private volatile boolean pending = true;
+  private final ReentrantReadWriteLock.ReadLock readLock;
+  private final ReentrantReadWriteLock.WriteLock writeLock;
+
+
+    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+    readLock = lock.readLock();
+    writeLock = lock.writeLock();
-  public synchronized String getQueueName() {
-    return queue.getQueueName();
+  public String getQueueName() {
+    try {
+      this.readLock.lock();
+      return queue.getQueueName();
+    } finally {
+      this.readLock.unlock();
+    }
-  public synchronized boolean isPending() {
+  public boolean isPending() {
-  
+
-  private synchronized void clearRequests() {
+  private void clearRequests() {
-  public synchronized boolean hasIncreaseRequest(NodeId nodeId) {
-    Map<SchedulerRequestKey, Map<ContainerId, SchedContainerChangeRequest>>
-        requestsOnNode = containerIncreaseRequestMap.get(nodeId);
-    return requestsOnNode == null ? false : requestsOnNode.size() > 0;
+  public boolean hasIncreaseRequest(NodeId nodeId) {
+    try {
+      this.readLock.lock();
+      Map<SchedulerRequestKey, Map<ContainerId, SchedContainerChangeRequest>>
+          requestsOnNode = containerIncreaseRequestMap.get(nodeId);
+      return requestsOnNode == null ? false : requestsOnNode.size() > 0;
+    } finally {
+      this.readLock.unlock();
+    }
-  public synchronized Map<ContainerId, SchedContainerChangeRequest>
+  public Map<ContainerId, SchedContainerChangeRequest>
-    Map<SchedulerRequestKey, Map<ContainerId, SchedContainerChangeRequest>>
-        requestsOnNode = containerIncreaseRequestMap.get(nodeId);
-    return requestsOnNode == null ? null : requestsOnNode.get(
-        schedulerKey);
+    try {
+      this.readLock.lock();
+      Map<SchedulerRequestKey, Map<ContainerId, SchedContainerChangeRequest>>
+          requestsOnNode = containerIncreaseRequestMap.get(nodeId);
+      return requestsOnNode == null ? null : requestsOnNode.get(
+          schedulerKey);
+    } finally {
+      this.readLock.unlock();
+    }
-  public synchronized boolean updateIncreaseRequests(
+  public boolean updateIncreaseRequests(
-    for (SchedContainerChangeRequest r : increaseRequests) {
-      if (r.getRMContainer().getState() != RMContainerState.RUNNING) {
-        LOG.warn("rmContainer's state is not RUNNING, for increase request with"
-            + " container-id=" + r.getContainerId());
-        continue;
-      }
-      try {
-        RMServerUtils.checkSchedContainerChangeRequest(r, true);
-      } catch (YarnException e) {
-        LOG.warn("Error happens when checking increase request, Ignoring.."
-            + " exception=", e);
-        continue;
-      }
-      NodeId nodeId = r.getRMContainer().getAllocatedNode();
+    try {
+      this.writeLock.lock();
+      for (SchedContainerChangeRequest r : increaseRequests) {
+        if (r.getRMContainer().getState() != RMContainerState.RUNNING) {
+          LOG.warn("rmContainer's state is not RUNNING, for increase request"
+              + " with container-id=" + r.getContainerId());
+          continue;
+        }
+        try {
+          RMServerUtils.checkSchedContainerChangeRequest(r, true);
+        } catch (YarnException e) {
+          LOG.warn("Error happens when checking increase request, Ignoring.."
+              + " exception=", e);
+          continue;
+        }
+        NodeId nodeId = r.getRMContainer().getAllocatedNode();
-      Map<SchedulerRequestKey, Map<ContainerId, SchedContainerChangeRequest>>
-          requestsOnNode = containerIncreaseRequestMap.get(nodeId);
-      if (null == requestsOnNode) {
-        requestsOnNode = new TreeMap<>();
-        containerIncreaseRequestMap.put(nodeId, requestsOnNode);
-      }
+        Map<SchedulerRequestKey, Map<ContainerId, SchedContainerChangeRequest>>
+            requestsOnNode = containerIncreaseRequestMap.get(nodeId);
+        if (null == requestsOnNode) {
+          requestsOnNode = new TreeMap<>();
+          containerIncreaseRequestMap.put(nodeId, requestsOnNode);
+        }
-      SchedContainerChangeRequest prevChangeRequest =
-          getIncreaseRequest(nodeId,
-              r.getRMContainer().getAllocatedSchedulerKey(),
-              r.getContainerId());
-      if (null != prevChangeRequest) {
-        if (Resources.equals(prevChangeRequest.getTargetCapacity(),
-            r.getTargetCapacity())) {
-          // increase request hasn't changed
+        SchedContainerChangeRequest prevChangeRequest =
+            getIncreaseRequest(nodeId,
+                r.getRMContainer().getAllocatedSchedulerKey(),
+                r.getContainerId());
+        if (null != prevChangeRequest) {
+          if (Resources.equals(prevChangeRequest.getTargetCapacity(),
+              r.getTargetCapacity())) {
+            // increase request hasn't changed
+            continue;
+          }
+
+          // remove the old one, as we will use the new one going forward
+          removeIncreaseRequest(nodeId,
+              prevChangeRequest.getRMContainer().getAllocatedSchedulerKey(),
+              prevChangeRequest.getContainerId());
+        }
+
+        if (Resources.equals(r.getTargetCapacity(),
+            r.getRMContainer().getAllocatedResource())) {
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Trying to increase container " + r.getContainerId()
+                + ", target capacity = previous capacity = " + prevChangeRequest
+                + ". Will ignore this increase request.");
+          }
-        // remove the old one, as we will use the new one going forward
-        removeIncreaseRequest(nodeId,
-            prevChangeRequest.getRMContainer().getAllocatedSchedulerKey(),
-            prevChangeRequest.getContainerId());
+        // add the new one
+        resourceUpdated = true;
+        insertIncreaseRequest(r);
-
-      if (Resources.equals(r.getTargetCapacity(),
-          r.getRMContainer().getAllocatedResource())) {
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Trying to increase container " + r.getContainerId()
-              + ", target capacity = previous capacity = " + prevChangeRequest
-              + ". Will ignore this increase request.");
-        }
-        continue;
-      }
-
-      // add the new one
-      resourceUpdated = true;
-      insertIncreaseRequest(r);
+      return resourceUpdated;
+    } finally {
+      this.writeLock.unlock();
-    return resourceUpdated;
-  public synchronized boolean removeIncreaseRequest(NodeId nodeId,
+  public boolean removeIncreaseRequest(NodeId nodeId,
-    Map<SchedulerRequestKey, Map<ContainerId, SchedContainerChangeRequest>>
-        requestsOnNode = containerIncreaseRequestMap.get(nodeId);
-    if (null == requestsOnNode) {
-      return false;
-    }
+    try {
+      this.writeLock.lock();
+      Map<SchedulerRequestKey, Map<ContainerId, SchedContainerChangeRequest>>
+          requestsOnNode = containerIncreaseRequestMap.get(nodeId);
+      if (null == requestsOnNode) {
+        return false;
+      }
-    Map<ContainerId, SchedContainerChangeRequest> requestsOnNodeWithPriority =
-        requestsOnNode.get(schedulerKey);
-    if (null == requestsOnNodeWithPriority) {
-      return false;
-    }
+      Map<ContainerId, SchedContainerChangeRequest> requestsOnNodeWithPriority =
+          requestsOnNode.get(schedulerKey);
+      if (null == requestsOnNodeWithPriority) {
+        return false;
+      }
-    SchedContainerChangeRequest request =
-        requestsOnNodeWithPriority.remove(containerId);
+      SchedContainerChangeRequest request =
+          requestsOnNodeWithPriority.remove(containerId);
-    // remove hierarchies if it becomes empty
-    if (requestsOnNodeWithPriority.isEmpty()) {
-      requestsOnNode.remove(schedulerKey);
-      decrementSchedulerKeyReference(schedulerKey);
-    }
-    if (requestsOnNode.isEmpty()) {
-      containerIncreaseRequestMap.remove(nodeId);
-    }
-    
-    if (request == null) {
-      return false;
-    }
+      // remove hierarchies if it becomes empty
+      if (requestsOnNodeWithPriority.isEmpty()) {
+        requestsOnNode.remove(schedulerKey);
+        decrementSchedulerKeyReference(schedulerKey);
+      }
+      if (requestsOnNode.isEmpty()) {
+        containerIncreaseRequestMap.remove(nodeId);
+      }
-    // update queue's pending resource if request exists
-    String partition = request.getRMContainer().getNodeLabelExpression();
-    Resource delta = request.getDeltaCapacity();
-    appResourceUsage.decPending(partition, delta);
-    queue.decPendingResource(partition, delta);
-    
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("remove increase request:" + request);
+      if (request == null) {
+        return false;
+      }
+
+      // update queue's pending resource if request exists
+      String partition = request.getRMContainer().getNodeLabelExpression();
+      Resource delta = request.getDeltaCapacity();
+      appResourceUsage.decPending(partition, delta);
+      queue.decPendingResource(partition, delta);
+
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("remove increase request:" + request);
+      }
+
+      return true;
+    } finally {
+      this.writeLock.unlock();
-    
-    return true;
-    Map<SchedulerRequestKey, Map<ContainerId, SchedContainerChangeRequest>>
-        requestsOnNode = containerIncreaseRequestMap.get(nodeId);
-    if (null == requestsOnNode) {
-      return null;
-    }
+    try {
+      this.readLock.lock();
+      Map<SchedulerRequestKey, Map<ContainerId, SchedContainerChangeRequest>>
+          requestsOnNode = containerIncreaseRequestMap.get(nodeId);
+      if (null == requestsOnNode) {
+        return null;
+      }
-    Map<ContainerId, SchedContainerChangeRequest> requestsOnNodeWithPriority =
-        requestsOnNode.get(schedulerKey);
-    return requestsOnNodeWithPriority == null ? null
-        : requestsOnNodeWithPriority.get(containerId);
+      Map<ContainerId, SchedContainerChangeRequest> requestsOnNodeWithPriority =
+          requestsOnNode.get(schedulerKey);
+      return requestsOnNodeWithPriority == null ? null
+          : requestsOnNodeWithPriority.get(containerId);
+    } finally {
+      this.readLock.unlock();
+    }
-  public synchronized boolean updateResourceRequests(
-      List<ResourceRequest> requests,
+  public boolean updateResourceRequests(List<ResourceRequest> requests,
-    // Update resource requests
-    for (ResourceRequest request : requests) {
-      SchedulerRequestKey schedulerKey = SchedulerRequestKey.create(request);
-      String resourceName = request.getResourceName();
+    try {
+      this.writeLock.lock();
+      // Update resource requests
+      for (ResourceRequest request : requests) {
+        SchedulerRequestKey schedulerKey = SchedulerRequestKey.create(request);
+        String resourceName = request.getResourceName();
-      // Update node labels if required
-      updateNodeLabels(request);
+        // Update node labels if required
+        updateNodeLabels(request);
-      Map<String, ResourceRequest> asks =
-          this.resourceRequestMap.get(schedulerKey);
-      if (asks == null) {
-        asks = new ConcurrentHashMap<>();
-        this.resourceRequestMap.put(schedulerKey, asks);
+        Map<String, ResourceRequest> asks =
+            this.resourceRequestMap.get(schedulerKey);
+        if (asks == null) {
+          asks = new ConcurrentHashMap<>();
+          this.resourceRequestMap.put(schedulerKey, asks);
+        }
+
+        // Increment number of containers if recovering preempted resources
+        ResourceRequest lastRequest = asks.get(resourceName);
+        if (recoverPreemptedRequestForAContainer && lastRequest != null) {
+          request.setNumContainers(lastRequest.getNumContainers() + 1);
+        }
+
+        // Update asks
+        asks.put(resourceName, request);
+
+        if (resourceName.equals(ResourceRequest.ANY)) {
+          //update the applications requested labels set
+          requestedPartitions.add(request.getNodeLabelExpression() == null
+              ? RMNodeLabelsManager.NO_LABEL :
+                  request.getNodeLabelExpression());
+
+          anyResourcesUpdated = true;
+
+          // Update pendingResources
+          updatePendingResources(lastRequest, request, schedulerKey,
+              queue.getMetrics());
+        }
-
-      // Increment number of containers if recovering preempted resources
-      ResourceRequest lastRequest = asks.get(resourceName);
-      if (recoverPreemptedRequestForAContainer && lastRequest != null) {
-        request.setNumContainers(lastRequest.getNumContainers() + 1);
-      }
-
-      // Update asks
-      asks.put(resourceName, request);
-
-      if (resourceName.equals(ResourceRequest.ANY)) {
-        //update the applications requested labels set
-        requestedPartitions.add(request.getNodeLabelExpression() == null
-            ? RMNodeLabelsManager.NO_LABEL : request.getNodeLabelExpression());
-
-        anyResourcesUpdated = true;
-
-        // Update pendingResources
-        updatePendingResources(lastRequest, request, schedulerKey,
-            queue.getMetrics());
-      }
+      return anyResourcesUpdated;
+    } finally {
+      this.writeLock.unlock();
-    return anyResourcesUpdated;
-  public synchronized Collection<SchedulerRequestKey> getSchedulerKeys() {
+  public Collection<SchedulerRequestKey> getSchedulerKeys() {
-  public synchronized Map<String, ResourceRequest> getResourceRequests(
+  public Map<String, ResourceRequest> getResourceRequests(
-  public synchronized List<ResourceRequest> getAllResourceRequests() {
+  public List<ResourceRequest> getAllResourceRequests() {
-    for (Map<String, ResourceRequest> r : resourceRequestMap.values()) {
-      ret.addAll(r.values());
+    try {
+      this.readLock.lock();
+      for (Map<String, ResourceRequest> r : resourceRequestMap.values()) {
+        ret.addAll(r.values());
+      }
+    } finally {
+      this.readLock.unlock();
-  public synchronized ResourceRequest getResourceRequest(
-      SchedulerRequestKey schedulerKey, String resourceName) {
-    Map<String, ResourceRequest> nodeRequests =
-        resourceRequestMap.get(schedulerKey);
-    return (nodeRequests == null) ? null : nodeRequests.get(resourceName);
+  public ResourceRequest getResourceRequest(SchedulerRequestKey schedulerKey,
+      String resourceName) {
+    try {
+      this.readLock.lock();
+      Map<String, ResourceRequest> nodeRequests =
+          resourceRequestMap.get(schedulerKey);
+      return (nodeRequests == null) ? null : nodeRequests.get(resourceName);
+    } finally {
+      this.readLock.unlock();
+    }
-  public synchronized Resource getResource(SchedulerRequestKey schedulerKey) {
-    ResourceRequest request =
-        getResourceRequest(schedulerKey, ResourceRequest.ANY);
-    return (request == null) ? null : request.getCapability();
+  public Resource getResource(SchedulerRequestKey schedulerKey) {
+    try {
+      this.readLock.lock();
+      ResourceRequest request =
+          getResourceRequest(schedulerKey, ResourceRequest.ANY);
+      return (request == null) ? null : request.getCapability();
+    } finally {
+      this.readLock.unlock();
+    }
-  public synchronized void increaseContainer(
-      SchedContainerChangeRequest increaseRequest) {
+  public void increaseContainer(SchedContainerChangeRequest increaseRequest) {
-    // Set queue metrics
-    queue.getMetrics().allocateResources(user, deltaCapacity);
-    // remove the increase request from pending increase request map
-    removeIncreaseRequest(nodeId, schedulerKey, containerId);
-    // update usage
-    appResourceUsage.incUsed(increaseRequest.getNodePartition(), deltaCapacity);
+    try {
+      this.writeLock.lock();
+      // Set queue metrics
+      queue.getMetrics().allocateResources(user, deltaCapacity);
+      // remove the increase request from pending increase request map
+      removeIncreaseRequest(nodeId, schedulerKey, containerId);
+      // update usage
+      appResourceUsage.incUsed(increaseRequest.getNodePartition(),
+          deltaCapacity);
+    } finally {
+      this.writeLock.unlock();
+    }
-  public synchronized void decreaseContainer(
-      SchedContainerChangeRequest decreaseRequest) {
+  public void decreaseContainer(SchedContainerChangeRequest decreaseRequest) {
-    
-    // Set queue metrics
-    queue.getMetrics().releaseResources(user, absDelta);
-    // update usage
-    appResourceUsage.decUsed(decreaseRequest.getNodePartition(), absDelta);
+    try {
+      this.writeLock.lock();
+      // Set queue metrics
+      queue.getMetrics().releaseResources(user, absDelta);
+
+      // update usage
+      appResourceUsage.decUsed(decreaseRequest.getNodePartition(), absDelta);
+    } finally {
+      this.writeLock.unlock();
+    }
-  public synchronized List<ResourceRequest> allocate(NodeType type,
-      SchedulerNode node, SchedulerRequestKey schedulerKey,
-      ResourceRequest request, Container containerAllocated) {
+  public List<ResourceRequest> allocate(NodeType type, SchedulerNode node,
+      SchedulerRequestKey schedulerKey, ResourceRequest request,
+      Container containerAllocated) {
-    if (type == NodeType.NODE_LOCAL) {
-      allocateNodeLocal(node, schedulerKey, request, resourceRequests);
-    } else if (type == NodeType.RACK_LOCAL) {
-      allocateRackLocal(node, schedulerKey, request, resourceRequests);
-    } else {
-      allocateOffSwitch(request, resourceRequests, schedulerKey);
-    }
-    QueueMetrics metrics = queue.getMetrics();
-    if (pending) {
-      // once an allocation is done we assume the application is
-      // running from scheduler's POV.
-      pending = false;
-      metrics.runAppAttempt(applicationId, user);
-    }
+    try {
+      this.writeLock.lock();
+      if (type == NodeType.NODE_LOCAL) {
+        allocateNodeLocal(node, schedulerKey, request, resourceRequests);
+      } else if (type == NodeType.RACK_LOCAL) {
+        allocateRackLocal(node, schedulerKey, request, resourceRequests);
+      } else {
+        allocateOffSwitch(request, resourceRequests, schedulerKey);
+      }
+      QueueMetrics metrics = queue.getMetrics();
+      if (pending) {
+        // once an allocation is done we assume the application is
+        // running from scheduler's POV.
+        pending = false;
+        metrics.runAppAttempt(applicationId, user);
+      }
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("allocate: applicationId=" + applicationId
-          + " container=" + containerAllocated.getId()
-          + " host=" + containerAllocated.getNodeId().toString()
-          + " user=" + user
-          + " resource=" + request.getCapability()
-          + " type=" + type);
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("allocate: applicationId=" + applicationId
+            + " container=" + containerAllocated.getId()
+            + " host=" + containerAllocated.getNodeId().toString()
+            + " user=" + user
+            + " resource=" + request.getCapability()
+            + " type=" + type);
+      }
+      metrics.allocateResources(user, 1, request.getCapability(), true);
+      metrics.incrNodeTypeAggregations(user, type);
+      return resourceRequests;
+    } finally {
+      this.writeLock.unlock();
-    metrics.allocateResources(user, 1, request.getCapability(), true);
-    metrics.incrNodeTypeAggregations(user, type);
-    return resourceRequests;
-  private synchronized void allocateNodeLocal(SchedulerNode node,
+  private void allocateNodeLocal(SchedulerNode node,
-  private synchronized void allocateRackLocal(SchedulerNode node,
+  private void allocateRackLocal(SchedulerNode node,
-  private synchronized void allocateOffSwitch(
-      ResourceRequest offSwitchRequest, List<ResourceRequest> resourceRequests,
+  private void allocateOffSwitch(ResourceRequest offSwitchRequest,
+      List<ResourceRequest> resourceRequests,
-  private synchronized void decrementOutstanding(
-      ResourceRequest offSwitchRequest, SchedulerRequestKey schedulerKey) {
+  private void decrementOutstanding(ResourceRequest offSwitchRequest,
+      SchedulerRequestKey schedulerKey) {
-  
-  private synchronized void checkForDeactivation() {
+
+  private void checkForDeactivation() {
-  public synchronized void move(Queue newQueue) {
-    QueueMetrics oldMetrics = queue.getMetrics();
-    QueueMetrics newMetrics = newQueue.getMetrics();
-    for (Map<String, ResourceRequest> asks : resourceRequestMap.values()) {
-      ResourceRequest request = asks.get(ResourceRequest.ANY);
-      if (request != null) {
-        oldMetrics.decrPendingResources(user, request.getNumContainers(),
-            request.getCapability());
-        newMetrics.incrPendingResources(user, request.getNumContainers(),
-            request.getCapability());
-        
-        Resource delta = Resources.multiply(request.getCapability(),
-            request.getNumContainers()); 
-        // Update Queue
-        queue.decPendingResource(request.getNodeLabelExpression(), delta);
-        newQueue.incPendingResource(request.getNodeLabelExpression(), delta);
+  public void move(Queue newQueue) {
+    try {
+      this.writeLock.lock();
+      QueueMetrics oldMetrics = queue.getMetrics();
+      QueueMetrics newMetrics = newQueue.getMetrics();
+      for (Map<String, ResourceRequest> asks : resourceRequestMap.values()) {
+        ResourceRequest request = asks.get(ResourceRequest.ANY);
+        if (request != null) {
+          oldMetrics.decrPendingResources(user, request.getNumContainers(),
+              request.getCapability());
+          newMetrics.incrPendingResources(user, request.getNumContainers(),
+              request.getCapability());
+
+          Resource delta = Resources.multiply(request.getCapability(),
+              request.getNumContainers());
+          // Update Queue
+          queue.decPendingResource(request.getNodeLabelExpression(), delta);
+          newQueue.incPendingResource(request.getNodeLabelExpression(), delta);
+        }
+      oldMetrics.moveAppFrom(this);
+      newMetrics.moveAppTo(this);
+      activeUsersManager.deactivateApplication(user, applicationId);
+      activeUsersManager = newQueue.getActiveUsersManager();
+      activeUsersManager.activateApplication(user, applicationId);
+      this.queue = newQueue;
+    } finally {
+      this.writeLock.unlock();
-    oldMetrics.moveAppFrom(this);
-    newMetrics.moveAppTo(this);
-    activeUsersManager.deactivateApplication(user, applicationId);
-    activeUsersManager = newQueue.getActiveUsersManager();
-    activeUsersManager.activateApplication(user, applicationId);
-    this.queue = newQueue;
-  public synchronized void stop() {
+  public void stop() {
-    QueueMetrics metrics = queue.getMetrics();
-    for (Map<String, ResourceRequest> asks : resourceRequestMap.values()) {
-      ResourceRequest request = asks.get(ResourceRequest.ANY);
-      if (request != null) {
-        metrics.decrPendingResources(user, request.getNumContainers(),
-            request.getCapability());
-        
-        // Update Queue
-        queue.decPendingResource(
-            request.getNodeLabelExpression(),
-            Resources.multiply(request.getCapability(),
-                request.getNumContainers()));
+    try {
+      this.writeLock.lock();
+      QueueMetrics metrics = queue.getMetrics();
+      for (Map<String, ResourceRequest> asks : resourceRequestMap.values()) {
+        ResourceRequest request = asks.get(ResourceRequest.ANY);
+        if (request != null) {
+          metrics.decrPendingResources(user, request.getNumContainers(),
+              request.getCapability());
+
+          // Update Queue
+          queue.decPendingResource(
+              request.getNodeLabelExpression(),
+              Resources.multiply(request.getCapability(),
+                  request.getNumContainers()));
+        }
+      metrics.finishAppAttempt(applicationId, pending, user);
+
+      // Clear requests themselves
+      clearRequests();
+    } finally {
+      this.writeLock.unlock();
-    metrics.finishAppAttempt(applicationId, pending, user);
-    
-    // Clear requests themselves
-    clearRequests();
-  public synchronized void setQueue(Queue queue) {
-    this.queue = queue;
+  public void setQueue(Queue queue) {
+    try {
+      this.writeLock.lock();
+      this.queue = queue;
+    } finally {
+      this.writeLock.unlock();
+    }
-  public Set<String> getBlackList() {
+  private Set<String> getBlackList() {
-  public synchronized void transferStateFromPreviousAppSchedulingInfo(
+  public void transferStateFromPreviousAppSchedulingInfo(
-    // This should not require locking the userBlacklist since it will not be
-    // used by this instance until after setCurrentAppAttempt.
+    // This should not require locking the placesBlacklistedByApp since it will
+    // not be used by this instance until after setCurrentAppAttempt.
-  public synchronized void recoverContainer(RMContainer rmContainer) {
-    QueueMetrics metrics = queue.getMetrics();
-    if (pending) {
-      // If there was any container to recover, the application was
-      // running from scheduler's POV.
-      pending = false;
-      metrics.runAppAttempt(applicationId, user);
-    }
+  public void recoverContainer(RMContainer rmContainer) {
+    try {
+      this.writeLock.lock();
+      QueueMetrics metrics = queue.getMetrics();
+      if (pending) {
+        // If there was any container to recover, the application was
+        // running from scheduler's POV.
+        pending = false;
+        metrics.runAppAttempt(applicationId, user);
+      }
-    // Container is completed. Skip recovering resources.
-    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {
-      return;
-    }
+      // Container is completed. Skip recovering resources.
+      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {
+        return;
+      }
-    metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),
-      false);
+      metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),
+          false);
+    } finally {
+      this.writeLock.unlock();
+    }
-  
+

INS26 INS40 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 UPD83 INS8 INS40 INS42 INS40 INS42 INS60 INS21 INS21 INS54 INS54 INS54 MOV60 INS54 INS54 INS54 MOV60 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS43 INS59 INS7 INS7 MOV8 INS8 MOV8 INS8 MOV8 INS8 MOV8 INS8 MOV8 INS8 MOV8 INS8 MOV8 INS8 INS8 INS8 MOV8 INS8 MOV8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 MOV8 INS8 MOV8 INS8 MOV8 INS8 MOV8 INS8 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV70 INS21 INS21 INS21 INS21 INS21 INS21 MOV21 MOV21 MOV21 INS21 INS21 MOV21 MOV21 INS21 INS21 MOV25 MOV60 MOV25 MOV25 MOV21 MOV21 MOV41 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD45 UPD45 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83