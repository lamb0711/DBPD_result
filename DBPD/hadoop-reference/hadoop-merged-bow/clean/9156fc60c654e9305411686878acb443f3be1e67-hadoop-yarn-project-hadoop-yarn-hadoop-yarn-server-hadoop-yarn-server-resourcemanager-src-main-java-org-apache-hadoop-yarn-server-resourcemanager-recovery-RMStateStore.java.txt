YARN-4209. RMStateStore FENCED state doesnâ€™t work due to updateFencedState called by stateMachine.doTransition. (Zhihai Xu via rohithsharmaks)

-import org.apache.hadoop.yarn.state.SingleArcTransition;
+import org.apache.hadoop.yarn.state.MultipleArcTransition;
-  private enum RMStateStoreState {
+  /**
+   * The enum defines state of RMStateStore.
+   */
+  public enum RMStateStoreState {
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
-              RMStateStoreEventType.UPDATE_APP, new UpdateAppTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
+          RMStateStoreEventType.UPDATE_APP, new UpdateAppTransition())
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
-          RMStateStoreEventType.STORE_APP_ATTEMPT, new StoreAppAttemptTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
-          RMStateStoreEventType.UPDATE_APP_ATTEMPT, new UpdateAppAttemptTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
+          RMStateStoreEventType.STORE_APP_ATTEMPT,
+          new StoreAppAttemptTransition())
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
+          RMStateStoreEventType.UPDATE_APP_ATTEMPT,
+          new UpdateAppAttemptTransition())
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-              new StoreRMDTMasterKeyTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          new StoreRMDTMasterKeyTransition())
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-              new RemoveRMDTMasterKeyTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          new RemoveRMDTMasterKeyTransition())
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-              new StoreRMDTTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          new StoreRMDTTransition())
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-              new RemoveRMDTTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          new RemoveRMDTTransition())
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-              new UpdateRMDTTransition())
-       .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
-           RMStateStoreEventType.UPDATE_AMRM_TOKEN,
-           new StoreOrUpdateAMRMTokenTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          new UpdateRMDTTransition())
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
+          RMStateStoreEventType.UPDATE_AMRM_TOKEN,
+          new StoreOrUpdateAMRMTokenTransition())
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.ACTIVE,
+          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-      implements SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      implements MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
-
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
-
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
+          RMStateStoreState> {
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
+    public RMStateStoreState transition(RMStateStore store,
+        RMStateStoreEvent event) {
-        return;
+        return RMStateStoreState.ACTIVE;
+      boolean isFenced = false;
-        store.notifyStoreOperationFailed(e);
+        isFenced = store.notifyStoreOperationFailedInternal(e);
+      return finalState(isFenced);
+  private static RMStateStoreState finalState(boolean isFenced) {
+    return isFenced ? RMStateStoreState.FENCED : RMStateStoreState.ACTIVE;
+  }
+
-  @SuppressWarnings("unchecked")
+    if (isFencedState()) {
+      return;
+    }
+    if (notifyStoreOperationFailedInternal(failureCause)) {
+      updateFencedState();
+    }
+  }
+
+  @SuppressWarnings("unchecked")
+  private boolean notifyStoreOperationFailedInternal(
+      Exception failureCause) {
+    boolean isFenced = false;
-      updateFencedState();
+      isFenced = true;
+    return isFenced;

UPD40 INS31 INS31 INS29 UPD83 INS74 UPD74 UPD74 UPD74 UPD74 UPD74 INS74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 MOV74 UPD74 MOV74 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 UPD83 UPD39 UPD42 INS65 INS43 INS43 INS43 INS43 INS43 UPD43 INS43 INS43 UPD43 INS43 INS43 UPD43 INS43 INS43 UPD43 INS43 INS43 UPD43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 UPD43 INS43 INS43 UPD43 INS43 INS43 UPD43 INS43 INS43 UPD43 MOV43 MOV43 INS43 INS43 UPD43 MOV43 INS43 INS43 UPD43 INS43 INS43 UPD43 INS43 INS43 INS42 INS39 INS42 INS41 INS65 INS65 INS43 INS42 INS25 INS25 INS60 INS41 INS66 INS42 INS42 INS42 INS42 INS42 INS25 INS60 INS41 UPD42 INS42 INS42 INS60 INS41 UPD42 INS42 INS42 INS60 INS41 UPD42 INS42 INS42 INS60 INS41 UPD42 INS42 INS42 INS60 INS41 UPD42 INS42 INS42 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS25 INS60 INS41 UPD42 INS42 INS42 INS60 INS41 UPD42 INS42 INS42 INS60 INS41 UPD42 INS42 INS42 INS60 INS41 UPD42 INS42 INS42 INS60 INS41 UPD42 MOV42 INS42 INS42 INS60 INS41 UPD42 INS42 INS42 MOV25 INS60 INS41 UPD42 INS42 INS42 MOV25 INS60 INS41 INS16 INS66 INS66 INS42 INS66 INS42 INS32 INS8 INS32 INS8 INS39 INS59 INS42 MOV38 INS8 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 MOV38 INS39 INS59 INS32 MOV38 INS8 INS39 INS59 INS32 MOV38 INS39 INS59 INS32 MOV38 INS39 INS59 INS32 MOV38 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 MOV38 INS39 INS59 INS32 INS38 INS39 INS59 INS32 INS42 INS40 INS40 INS42 INS41 INS42 INS42 MOV21 INS42 INS9 INS21 INS32 INS21 INS41 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS21 INS41 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 MOV36 INS42 INS9 INS42 INS42 INS42 INS9 UPD42 MOV42 UPD42 MOV42 INS36 INS42 INS9 UPD42 MOV42 UPD42 MOV42 INS7 INS32 INS42 INS42 MOV40 INS40 INS32 INS40 INS40 INS40 INS40 INS40 INS40 INS32 INS40 INS40 INS40 INS40 INS40 MOV62 MOV32 INS40 INS40 INS62 INS40 INS42 INS9 INS32 INS42 INS42 MOV40 INS40 INS42 INS42 INS27 INS7 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS27 INS7 INS7 INS7 INS7 MOV42 MOV42 MOV27 INS7 MOV42 INS7 INS7 INS42 INS43 INS7 INS32 INS42 INS42 MOV40 INS40 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 MOV32 INS42 INS32 MOV42 MOV45 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 MOV40 INS40 INS42 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS42 MOV40 INS40 INS32 INS42 INS42 MOV40 INS40 INS32 INS42 INS42 MOV40 INS40 INS32 INS42 INS42 MOV40 INS40 INS32 INS42 INS42 MOV40 INS40 INS32 INS42 INS42 MOV40 INS40 INS32 INS42 INS42 MOV40 INS40 INS32 INS42 INS42 MOV40 INS40 INS32 INS42 INS42 MOV40 INS40 INS42 INS42 MOV40 INS40 DEL39 DEL32 DEL39 DEL32 DEL39 DEL32 DEL39 DEL32 DEL39 DEL32 DEL39 DEL32 DEL39 DEL32 DEL39 DEL32 DEL39 DEL32 DEL39 DEL32 DEL39 DEL32 DEL39 DEL32 DEL42 DEL43 DEL74 DEL39 DEL41 DEL8 DEL25 DEL32 DEL42 DEL43 DEL74 DEL39 DEL41 DEL8 DEL25 DEL32