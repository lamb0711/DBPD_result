Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.Closeable;
+import org.apache.hadoop.security.SecurityUtil;
+import org.apache.hadoop.security.token.TokenRenewer;
+  private final InetSocketAddress nnAddress;
-   * Same as this(nameNodeAddr, conf, null);
+   * Same as this(nameNodeUri, conf, null);
-  public DFSClient(URI nameNodeAddr, Configuration conf
+  public DFSClient(URI nameNodeUri, Configuration conf
-    this(nameNodeAddr, conf, null);
+    this(nameNodeUri, conf, null);
-   * Same as this(nameNodeAddr, null, conf, stats);
+   * Same as this(nameNodeUri, null, conf, stats);
-  public DFSClient(URI nameNodeAddr, Configuration conf,
+  public DFSClient(URI nameNodeUri, Configuration conf,
-    this(nameNodeAddr, null, conf, stats);
+    this(nameNodeUri, null, conf, stats);
-   * Create a new DFSClient connected to the given nameNodeAddr or rpcNamenode.
-   * Exactly one of nameNodeAddr or rpcNamenode must be null.
+   * Create a new DFSClient connected to the given nameNodeUri or rpcNamenode.
+   * Exactly one of nameNodeUri or rpcNamenode must be null.
+      nnAddress = null;
+
+      // TODO(HA): This doesn't really apply in the case of HA. Need to get smart
+      // about tokens in an HA setup, generally.
+      nnAddress = NameNode.getAddress(nameNodeUri);
+
+      // TODO(HA): This doesn't really apply in the case of HA. Need to get smart
+      // about tokens in an HA setup, generally.
+      nnAddress = null; 
-          "Expecting exactly one of nameNodeAddr and rpcNamenode being null: "
-          + "nameNodeAddr=" + nameNodeUri + ", rpcNamenode=" + rpcNamenode);
+          "Expecting exactly one of nameNodeUri and rpcNamenode being null: "
+          + "nameNodeUri=" + nameNodeUri + ", rpcNamenode=" + rpcNamenode);
-
+  
+  /**
+   * Close connections the Namenode.
+   * The namenode variable is either a rpcProxy passed by a test or 
+   * created using the protocolTranslator which is closeable.
+   * If closeable then call close, else close using RPC.stopProxy().
+   */
+  void closeConnectionToNamenode() {
+    if (namenode instanceof Closeable) {
+      try {
+        ((Closeable) namenode).close();
+        return;
+      } catch (IOException e) {
+        // fall through - lets try the stopProxy
+        LOG.warn("Exception closing namenode, stopping the proxy");
+      }     
+    }
+    RPC.stopProxy(namenode);
+  }
+  
-    RPC.stopProxy(namenode); // close connections to the namenode
+    closeConnectionToNamenode();
-      RPC.stopProxy(namenode);
+      closeConnectionToNamenode();
+    SecurityUtil.setTokenService(result, nnAddress);
-   * @see ClientProtocol#renewDelegationToken(Token)
+   * Renew a delegation token
+   * @param token the token to renew
+   * @return the new expiration time
+   * @throws InvalidToken
+   * @throws IOException
+   * @deprecated Use Token.renew instead.
-      return namenode.renewDelegationToken(token);
+      return token.renew(conf);
+    } catch (InterruptedException ie) {                                       
+      throw new RuntimeException("caught interrupted", ie);
-   * @see ClientProtocol#cancelDelegationToken(Token)
+   * Cancel a delegation token
+   * @param token the token to cancel
+   * @throws InvalidToken
+   * @throws IOException
+   * @deprecated Use Token.cancel instead.
-      namenode.cancelDelegationToken(token);
+      token.cancel(conf);
+     } catch (InterruptedException ie) {                                       
+      throw new RuntimeException("caught interrupted", ie);
+  @InterfaceAudience.Private
+  public static class Renewer extends TokenRenewer {
+    
+    @Override
+    public boolean handleKind(Text kind) {
+      return DelegationTokenIdentifier.HDFS_DELEGATION_KIND.equals(kind);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public long renew(Token<?> token, Configuration conf) throws IOException {
+      Token<DelegationTokenIdentifier> delToken = 
+          (Token<DelegationTokenIdentifier>) token;
+      LOG.info("Renewing " + 
+               DelegationTokenIdentifier.stringifyToken(delToken));
+      ClientProtocol nn = 
+        DFSUtil.createNamenode
+           (NameNode.getAddress(token.getService().toString()),
+            conf, UserGroupInformation.getCurrentUser());
+      try {
+        return nn.renewDelegationToken(delToken);
+      } catch (RemoteException re) {
+        throw re.unwrapRemoteException(InvalidToken.class, 
+                                       AccessControlException.class);
+      }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void cancel(Token<?> token, Configuration conf) throws IOException {
+      Token<DelegationTokenIdentifier> delToken = 
+          (Token<DelegationTokenIdentifier>) token;
+      LOG.info("Cancelling " + 
+               DelegationTokenIdentifier.stringifyToken(delToken));
+      ClientProtocol nn = DFSUtil.createNamenode(
+          NameNode.getAddress(token.getService().toString()), conf,
+          UserGroupInformation.getCurrentUser());
+      try {
+        nn.cancelDelegationToken(delToken);
+      } catch (RemoteException re) {
+        throw re.unwrapRemoteException(InvalidToken.class,
+            AccessControlException.class);
+      }
+    }
+
+    @Override
+    public boolean isManaged(Token<?> token) throws IOException {
+      return true;
+    }
+    
+  }
+
-    List<LocatedBlock> locatedblocks
-        = callGetBlockLocations(namenode, src, 0, Long.MAX_VALUE).getLocatedBlocks();
+    LocatedBlocks blockLocations = callGetBlockLocations(namenode, src, 0, Long.MAX_VALUE);
+    if (null == blockLocations) {
+      throw new FileNotFoundException("File does not exist: " + src);
+    }
+    List<LocatedBlock> locatedblocks = blockLocations.getLocatedBlocks();
-        locatedblocks = callGetBlockLocations(namenode, src, 0, Long.MAX_VALUE)
-            .getLocatedBlocks();
+        blockLocations = callGetBlockLocations(namenode, src, 0, Long.MAX_VALUE);
+        if (null == blockLocations) {
+          throw new FileNotFoundException("File does not exist: " + src);
+        }
+        locatedblocks = blockLocations.getLocatedBlocks();

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS55 INS83 INS83 INS43 INS59 INS29 INS39 INS42 INS8 INS8 INS8 INS78 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS42 INS42 UPD42 UPD42 INS65 INS25 MOV21 INS21 INS21 INS65 UPD65 INS65 INS65 INS65 INS65 MOV21 INS54 INS65 UPD65 INS65 INS65 INS65 MOV21 INS54 INS40 INS42 INS78 INS83 INS39 INS42 INS44 INS8 INS79 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS79 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS60 INS25 UPD66 UPD42 UPD66 UPD42 UPD66 UPD66 INS66 INS66 INS66 INS66 INS62 INS8 INS32 INS32 INS66 INS42 INS66 INS66 INS42 INS42 INS66 INS8 INS12 INS12 INS66 INS42 INS66 INS42 INS42 INS66 INS8 INS12 INS12 INS42 INS43 INS42 INS41 INS42 INS45 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS21 INS60 MOV54 INS42 INS45 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS21 INS60 MOV54 INS42 INS74 INS42 INS42 INS41 INS43 INS59 INS27 INS8 INS21 INS42 INS43 INS54 INS42 INS42 INS42 INS42 INS42 INS41 INS44 INS8 INS44 INS8 INS21 INS44 INS8 INS44 INS8 INS42 INS32 MOV43 INS76 INS42 INS74 INS59 INS32 INS43 INS59 MOV43 INS76 INS42 INS74 INS59 INS32 INS43 INS59 INS43 INS76 INS9 INS42 INS42 MOV32 INS33 INS42 INS53 INS7 INS21 INS42 INS8 INS12 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS40 INS42 INS42 INS43 INS43 INS42 INS11 INS42 INS42 INS27 INS42 INS42 INS32 INS41 INS43 INS43 INS42 INS11 INS42 INS42 INS27 INS42 INS42 INS32 INS21 INS42 INS14 INS42 INS42 INS33 INS7 INS21 INS21 INS41 INS44 INS8 UPD42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS74 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS74 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS43 INS27 INS21 INS25 INS42 INS32 INS7 INS32 INS43 INS42 INS21 INS43 INS45 INS42 INS42 INS42 INS57 INS57 INS43 INS45 INS42 INS42 INS42 INS57 INS57 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS33 INS36 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS33 INS42 INS53 INS11 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 UPD45 UPD45 INS43 INS42 INS43 INS27 INS42 INS42 INS45 INS42 DEL42 DEL42 DEL42 DEL42 DEL69 DEL68 DEL8 DEL42 DEL42 DEL69 DEL68 DEL8 DEL32 DEL21 DEL32 DEL41