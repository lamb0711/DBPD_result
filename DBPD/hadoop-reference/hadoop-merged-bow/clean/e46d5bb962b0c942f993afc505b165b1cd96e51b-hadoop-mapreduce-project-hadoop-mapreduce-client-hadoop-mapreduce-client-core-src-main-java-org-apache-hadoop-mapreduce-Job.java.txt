MAPREDUCE-5951. Add support for the YARN Shared Cache.

+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import org.apache.hadoop.classification.InterfaceStability.Unstable;
+  /**
+   * Add a file to job config for shared cache processing. If shared cache is
+   * enabled, it will return true, otherwise, return false. We don't check with
+   * SCM here given application might not be able to provide the job id;
+   * ClientSCMProtocol.use requires the application id. Job Submitter will read
+   * the files from job config and take care of things.
+   *
+   * @param resource The resource that Job Submitter will process later using
+   *          shared cache.
+   * @param conf Configuration to add the resource to
+   * @return whether the resource has been added to the configuration
+   */
+  @Unstable
+  public static boolean addFileToSharedCache(URI resource, Configuration conf) {
+    SharedCacheConfig scConfig = new SharedCacheConfig();
+    scConfig.init(conf);
+    if (scConfig.isSharedCacheFilesEnabled()) {
+      String files = conf.get(MRJobConfig.FILES_FOR_SHARED_CACHE);
+      conf.set(
+          MRJobConfig.FILES_FOR_SHARED_CACHE,
+          files == null ? resource.toString() : files + ","
+              + resource.toString());
+      return true;
+    } else {
+      return false;
+    }
+  }
+
+  /**
+   * Add a file to job config for shared cache processing. If shared cache is
+   * enabled, it will return true, otherwise, return false. We don't check with
+   * SCM here given application might not be able to provide the job id;
+   * ClientSCMProtocol.use requires the application id. Job Submitter will read
+   * the files from job config and take care of things. Job Submitter will also
+   * add the file to classpath. Intended to be used by user code.
+   *
+   * @param resource The resource that Job Submitter will process later using
+   *          shared cache.
+   * @param conf Configuration to add the resource to
+   * @return whether the resource has been added to the configuration
+   */
+  @Unstable
+  public static boolean addFileToSharedCacheAndClasspath(URI resource,
+      Configuration conf) {
+    SharedCacheConfig scConfig = new SharedCacheConfig();
+    scConfig.init(conf);
+    if (scConfig.isSharedCacheLibjarsEnabled()) {
+      String files =
+          conf.get(MRJobConfig.FILES_FOR_CLASSPATH_AND_SHARED_CACHE);
+      conf.set(
+          MRJobConfig.FILES_FOR_CLASSPATH_AND_SHARED_CACHE,
+          files == null ? resource.toString() : files + ","
+              + resource.toString());
+      return true;
+    } else {
+      return false;
+    }
+  }
+
+  /**
+   * Add an archive to job config for shared cache processing. If shared cache
+   * is enabled, it will return true, otherwise, return false. We don't check
+   * with SCM here given application might not be able to provide the job id;
+   * ClientSCMProtocol.use requires the application id. Job Submitter will read
+   * the files from job config and take care of things. Intended to be used by
+   * user code.
+   *
+   * @param resource The resource that Job Submitter will process later using
+   *          shared cache.
+   * @param conf Configuration to add the resource to
+   * @return whether the resource has been added to the configuration
+   */
+  @Unstable
+  public static boolean addArchiveToSharedCache(URI resource,
+      Configuration conf) {
+    SharedCacheConfig scConfig = new SharedCacheConfig();
+    scConfig.init(conf);
+    if (scConfig.isSharedCacheArchivesEnabled()) {
+      String files = conf.get(MRJobConfig.ARCHIVES_FOR_SHARED_CACHE);
+      conf.set(
+          MRJobConfig.ARCHIVES_FOR_SHARED_CACHE,
+          files == null ? resource.toString() : files + ","
+              + resource.toString());
+      return true;
+    } else {
+      return false;
+    }
+  }
+
+  /**
+   * This is to set the shared cache upload policies for files. If the parameter
+   * was previously set, this method will replace the old value with the new
+   * provided map.
+   *
+   * @param conf Configuration which stores the shared cache upload policies
+   * @param policies A map containing the shared cache upload policies for a set
+   *          of resources. The key is the url of the resource and the value is
+   *          the upload policy. True if it should be uploaded, false otherwise.
+   */
+  @Unstable
+  public static void setFileSharedCacheUploadPolicies(Configuration conf,
+      Map<String, Boolean> policies) {
+    setSharedCacheUploadPolicies(conf, policies, true);
+  }
+
+  /**
+   * This is to set the shared cache upload policies for archives. If the
+   * parameter was previously set, this method will replace the old value with
+   * the new provided map.
+   *
+   * @param conf Configuration which stores the shared cache upload policies
+   * @param policies A map containing the shared cache upload policies for a set
+   *          of resources. The key is the url of the resource and the value is
+   *          the upload policy. True if it should be uploaded, false otherwise.
+   */
+  @Unstable
+  public static void setArchiveSharedCacheUploadPolicies(Configuration conf,
+      Map<String, Boolean> policies) {
+    setSharedCacheUploadPolicies(conf, policies, false);
+  }
+
+  // We use a double colon because a colon is a reserved character in a URI and
+  // there should not be two colons next to each other.
+  private static final String DELIM = "::";
+
+  /**
+   * Set the shared cache upload policies config parameter. This is done by
+   * serializing the provided map of shared cache upload policies into a config
+   * parameter. If the parameter was previously set, this method will replace
+   * the old value with the new provided map.
+   *
+   * @param conf Configuration which stores the shared cache upload policies
+   * @param policies A map containing the shared cache upload policies for a set
+   *          of resources. The key is the url of the resource and the value is
+   *          the upload policy. True if it should be uploaded, false otherwise.
+   * @param areFiles True if these policies are for files, false if they are for
+   *          archives.
+   */
+  private static void setSharedCacheUploadPolicies(Configuration conf,
+      Map<String, Boolean> policies, boolean areFiles) {
+    if (policies != null) {
+      StringBuilder sb = new StringBuilder();
+      Iterator<Map.Entry<String, Boolean>> it = policies.entrySet().iterator();
+      Map.Entry<String, Boolean> e;
+      if (it.hasNext()) {
+        e = it.next();
+        sb.append(e.getKey() + DELIM + e.getValue());
+      } else {
+        // policies is an empty map, just skip setting the parameter
+        return;
+      }
+      while (it.hasNext()) {
+        e = it.next();
+        sb.append("," + e.getKey() + DELIM + e.getValue());
+      }
+      String confParam =
+          areFiles ? MRJobConfig.CACHE_FILES_SHARED_CACHE_UPLOAD_POLICIES
+              : MRJobConfig.CACHE_ARCHIVES_SHARED_CACHE_UPLOAD_POLICIES;
+      conf.set(confParam, sb.toString());
+    }
+  }
+
+  /**
+   * Deserialize a map of shared cache upload policies from a config parameter.
+   *
+   * @param conf Configuration which stores the shared cache upload policies
+   * @param areFiles True if these policies are for files, false if they are for
+   *          archives.
+   * @return A map containing the shared cache upload policies for a set of
+   *         resources. The key is the url of the resource and the value is the
+   *         upload policy. True if it should be uploaded, false otherwise.
+   */
+  private static Map<String, Boolean> getSharedCacheUploadPolicies(
+      Configuration conf, boolean areFiles) {
+    String confParam =
+        areFiles ? MRJobConfig.CACHE_FILES_SHARED_CACHE_UPLOAD_POLICIES
+            : MRJobConfig.CACHE_ARCHIVES_SHARED_CACHE_UPLOAD_POLICIES;
+    Collection<String> policies = conf.getStringCollection(confParam);
+    String[] policy;
+    Map<String, Boolean> policyMap = new LinkedHashMap<String, Boolean>();
+    for (String s : policies) {
+      policy = s.split(DELIM);
+      if (policy.length != 2) {
+        LOG.error(confParam
+            + " is mis-formatted, returning empty shared cache upload policies."
+            + " Error on [" + s + "]");
+        return new LinkedHashMap<String, Boolean>();
+      }
+      policyMap.put(policy[0], Boolean.parseBoolean(policy[1]));
+    }
+    return policyMap;
+  }
+
+  /**
+   * This is to get the shared cache upload policies for files.
+   *
+   * @param conf Configuration which stores the shared cache upload policies
+   * @return A map containing the shared cache upload policies for a set of
+   *         resources. The key is the url of the resource and the value is the
+   *         upload policy. True if it should be uploaded, false otherwise.
+   */
+  @Unstable
+  public static Map<String, Boolean> getFileSharedCacheUploadPolicies(
+      Configuration conf) {
+    return getSharedCacheUploadPolicies(conf, true);
+  }
+
+  /**
+   * This is to get the shared cache upload policies for archives.
+   *
+   * @param conf Configuration which stores the shared cache upload policies
+   * @return A map containing the shared cache upload policies for a set of
+   *         resources. The key is the url of the resource and the value is the
+   *         upload policy. True if it should be uploaded, false otherwise.
+   */
+  @Unstable
+  public static Map<String, Boolean> getArchiveSharedCacheUploadPolicies(
+      Configuration conf) {
+    return getSharedCacheUploadPolicies(conf, false);
+  }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS23 INS31 INS31 INS31 INS31 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS78 INS83 INS83 INS74 INS42 INS44 INS8 INS29 INS78 INS83 INS83 INS74 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS25 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS25 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS74 INS42 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS74 INS42 INS21 INS42 INS42 INS45 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS39 INS42 INS25 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS43 INS42 INS39 INS42 INS60 INS60 INS60 INS60 INS70 INS41 INS65 INS65 INS65 INS42 INS43 INS43 INS43 INS43 INS42 INS41 INS65 INS65 INS65 INS42 INS43 INS43 INS43 INS43 INS42 INS41 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS32 INS32 INS8 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS32 INS32 INS8 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS32 INS32 INS8 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS43 INS43 INS43 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS43 INS43 INS43 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS43 INS43 INS27 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS5 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS41 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS41 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS33 INS60 INS60 INS60 INS25 INS61 INS60 INS21 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS43 INS85 INS42 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS25 INS21 INS42 INS42 INS9 INS42 INS42 INS9 INS43 INS43 INS59 INS32 INS9 INS9 INS43 INS43 INS59 INS32 INS9 INS9 INS43 INS43 INS59 INS32 INS9 INS9 INS43 INS59 INS74 INS59 INS74 INS59 INS32 INS8 INS8 INS32 INS8 INS43 INS59 INS32 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS7 INS27 INS8 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS16 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS16 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS16 INS42 INS42 INS14 INS43 INS74 INS42 INS32 INS43 INS43 INS43 INS42 INS42 INS42 INS21 INS21 INS41 INS42 INS42 INS21 INS21 INS42 INS42 INS16 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS40 INS34 INS21 INS41 INS42 INS42 INS2 INS32 INS42 INS42 INS40 INS27 INS32 INS27 INS42 INS42 INS40 INS27 INS32 INS27 INS42 INS42 INS40 INS27 INS32 INS27 INS43 INS42 INS43 INS43 INS43 INS32 INS42 INS40 INS42 INS42 INS7 INS32 INS7 INS32 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS34 INS42 INS42 INS2 INS42 INS33 INS42 INS42 INS42 INS45 INS32 INS42 INS33 INS42 INS42 INS42 INS45 INS32 INS42 INS33 INS42 INS42 INS42 INS45 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS74 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS45 INS45 INS42 INS45 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42