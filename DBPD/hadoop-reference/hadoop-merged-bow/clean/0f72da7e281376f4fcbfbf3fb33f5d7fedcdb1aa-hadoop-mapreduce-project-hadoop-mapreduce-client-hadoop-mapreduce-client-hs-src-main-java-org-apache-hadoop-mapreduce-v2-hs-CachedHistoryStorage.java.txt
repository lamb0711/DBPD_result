MAPREDUCE-6622. Add capability to set JHS job cache to a task-based limit (rchiang via rkanter)

-import java.util.Collections;
-import java.util.LinkedHashMap;
+import com.google.common.cache.Cache;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.cache.Weigher;
+import com.google.common.util.concurrent.UncheckedExecutionException;
-  private Map<JobId, Job> loadedJobCache = null;
-  // The number of loaded jobs.
+  private LoadingCache<JobId, Job> loadedJobCache = null;
+  private int loadedTasksCacheSize;
+  private boolean useLoadedTasksCache;
+    // Set property for old "loaded jobs" cache
-    loadedJobCache = Collections.synchronizedMap(new LinkedHashMap<JobId, Job>(
-        loadedJobCacheSize + 1, 0.75f, true) {
-      @Override
-      public boolean removeEldestEntry(final Map.Entry<JobId, Job> eldest) {
-        return super.size() > loadedJobCacheSize;
+    // Check property for new "loaded tasks" cache perform sanity checking
+    useLoadedTasksCache = false;
+    try {
+      String taskSizeString = conf
+          .get(JHAdminConfig.MR_HISTORY_LOADED_TASKS_CACHE_SIZE);
+      if (taskSizeString != null) {
+        loadedTasksCacheSize = Math.max(Integer.parseInt(taskSizeString), 1);
+        useLoadedTasksCache = true;
-    });
+    } catch (NumberFormatException nfe) {
+      LOG.error("The property " +
+          JHAdminConfig.MR_HISTORY_LOADED_TASKS_CACHE_SIZE +
+          " is not an integer value.  Please set it to a positive" +
+          " integer value.");
+    }
+
+    CacheLoader<JobId, Job> loader;
+    loader = new CacheLoader<JobId, Job>() {
+      @Override
+      public Job load(JobId key) throws Exception {
+        return loadJob(key);
+      }
+    };
+
+    if (!useLoadedTasksCache) {
+      loadedJobCache = CacheBuilder.newBuilder()
+          .maximumSize(loadedJobCacheSize)
+          .initialCapacity(loadedJobCacheSize)
+          .concurrencyLevel(1)
+          .build(loader);
+    } else {
+      Weigher<JobId, Job> weightByTasks;
+      weightByTasks = new Weigher<JobId, Job>() {
+        /**
+         * Method for calculating Job weight by total task count.  If
+         * the total task count is greater than the size of the tasks
+         * cache, then cap it at the cache size.  This allows the cache
+         * to always hold one large job.
+         * @param key JobId object
+         * @param value Job object
+         * @return Weight of the job as calculated by total task count
+         */
+        @Override
+        public int weigh(JobId key, Job value) {
+          int taskCount = Math.min(loadedTasksCacheSize,
+              value.getTotalMaps() + value.getTotalReduces());
+          return taskCount;
+        }
+      };
+      // Keep concurrencyLevel at 1.  Otherwise, two problems:
+      // 1) The largest job that can be initially loaded is
+      //    cache size / 4.
+      // 2) Unit tests are not deterministic.
+      loadedJobCache = CacheBuilder.newBuilder()
+          .maximumWeight(loadedTasksCacheSize)
+          .weigher(weightByTasks)
+          .concurrencyLevel(1)
+          .build(loader);
+    }
+
+  private static class HSFileRuntimeException extends RuntimeException {
+    public HSFileRuntimeException(String message) {
+      super(message);
+    }
+  }
-  private Job loadJob(HistoryFileInfo fileInfo) {
-    try {
-      Job job = fileInfo.loadJob();
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Adding " + job.getID() + " to loaded job cache");
-      }
-      // We can clobber results here, but that should be OK, because it only
-      // means that we may have two identical copies of the same job floating
-      // around for a while.
-      loadedJobCache.put(job.getID(), job);
-      return job;
-    } catch (IOException e) {
-      throw new YarnRuntimeException(
-          "Could not find/load job: " + fileInfo.getJobId(), e);
+  private Job loadJob(JobId jobId) throws RuntimeException, IOException {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Looking for Job " + jobId);
+    }
+    HistoryFileInfo fileInfo;
+
+    fileInfo = hsManager.getFileInfo(jobId);
+    if (fileInfo == null) {
+      throw new HSFileRuntimeException("Unable to find job " + jobId);
+    } else if (fileInfo.isDeleted()) {
+      throw new HSFileRuntimeException("Cannot load deleted job " + jobId);
+    } else {
+      return fileInfo.loadJob();
-  Map<JobId, Job> getLoadedJobCache() {
+  Cache<JobId, Job> getLoadedJobCache() {
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Looking for Job " + jobId);
-    }
+    Job retVal = null;
-      HistoryFileInfo fileInfo = hsManager.getFileInfo(jobId);
-      Job result = null;
-      if (fileInfo != null) {
-        result = loadedJobCache.get(jobId);
-        if (result == null) {
-          result = loadJob(fileInfo);
-        } else if(fileInfo.isDeleted()) {
-          loadedJobCache.remove(jobId);
-          result = null;
-        }
+      retVal = loadedJobCache.getUnchecked(jobId);
+    } catch (UncheckedExecutionException e) {
+      if (e.getCause() instanceof HSFileRuntimeException) {
+        LOG.error(e.getCause().getMessage());
+        return null;
-        loadedJobCache.remove(jobId);
+        throw new YarnRuntimeException(e.getCause());
-      return result;
-    } catch (IOException e) {
-      throw new YarnRuntimeException(e);
+    return retVal;
+
+  @VisibleForTesting
+  public boolean getUseLoadedTasksCache() {
+    return useLoadedTasksCache;
+  }
+
+  @VisibleForTesting
+  public int getLoadedTasksCacheSize() {
+    return loadedTasksCacheSize;
+  }

MOV26 MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 UPD40 INS23 INS23 INS31 INS55 INS31 INS31 INS31 INS31 UPD74 INS83 INS39 INS59 INS83 INS39 INS59 MOV79 INS83 MOV39 MOV42 MOV44 INS8 INS83 INS83 INS42 INS43 INS31 INS83 MOV43 INS42 MOV44 INS43 MOV43 INS8 INS74 MOV78 MOV83 INS43 MOV42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 UPD43 INS42 INS42 MOV21 INS21 INS54 INS60 INS21 INS25 INS42 INS83 INS42 INS44 INS8 UPD42 MOV42 MOV25 INS60 INS21 INS25 INS43 INS43 INS43 INS42 INS43 INS42 MOV60 INS54 INS41 INS42 MOV41 INS42 INS41 UPD42 INS7 INS8 INS12 UPD74 MOV74 INS59 INS7 INS38 INS8 INS8 INS43 INS42 INS46 MOV43 INS59 INS7 INS27 INS8 INS25 INS42 INS42 INS42 INS42 MOV43 INS8 INS12 INS42 UPD42 INS42 UPD42 MOV42 INS9 INS60 INS25 INS44 INS8 UPD43 INS42 INS42 INS14 INS42 INS21 INS60 INS21 MOV21 INS42 INS42 INS42 INS42 MOV32 INS42 INS33 INS53 MOV32 INS8 INS8 UPD42 MOV21 INS44 INS8 INS43 INS59 INS27 INS8 INS43 INS42 INS21 INS42 UPD74 MOV74 MOV1 INS7 INS74 MOV59 INS7 INS7 INS14 MOV53 INS41 INS43 INS42 INS25 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS32 UPD43 INS42 INS32 INS43 INS43 INS43 UPD42 INS42 INS14 INS42 INS32 INS43 INS27 MOV32 UPD42 INS42 INS62 MOV8 MOV8 INS42 INS42 INS40 INS7 INS7 INS42 INS42 INS27 UPD42 MOV43 UPD42 INS43 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD74 MOV74 INS1 INS32 UPD42 MOV42 INS42 INS42 INS45 INS42 UPD43 UPD42 INS32 INS43 INS41 INS42 INS32 INS42 INS9 INS45 INS40 INS45 INS45 INS43 INS42 INS42 INS32 INS42 INS34 UPD43 INS31 INS32 UPD42 MOV42 INS34 UPD42 UPD45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS33 INS42 INS42 INS32 INS34 INS42 INS32 INS32 INS42 INS42 UPD42 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS65 INS65 INS65 INS65 INS42 INS43 INS42 MOV43 INS42 INS60 INS41 INS32 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS39 INS59 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV27 INS32 UPD42 UPD42 INS42 INS42 DEL40 DEL39 DEL83 DEL42 DEL42 DEL48 DEL42 DEL27 DEL45 DEL45 DEL32 DEL32 DEL83 DEL42 DEL42 DEL42 DEL34 DEL27 DEL34 DEL9 DEL14 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL60 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL32 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL44 DEL12 DEL54 DEL8 DEL31