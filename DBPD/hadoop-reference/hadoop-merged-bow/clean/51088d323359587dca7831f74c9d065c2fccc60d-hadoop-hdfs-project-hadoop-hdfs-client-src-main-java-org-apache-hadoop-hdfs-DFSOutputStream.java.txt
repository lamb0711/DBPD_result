HDFS-13164. File not closed if streamer fail with DSQuotaExceededException.

-      getStreamer().getLastException().check(true);
+      LOG.debug("Closing an already closed stream. [Stream:{}, streamer:{}]",
+          closed, getStreamer().streamerClosed());
+      try {
+        getStreamer().getLastException().check(true);
+      } catch (IOException ioe) {
+        cleanupAndRethrowIOException(ioe);
+      } finally {
+        if (!closed) {
+          // If stream is not closed but streamer closed, clean up the stream.
+          // Most importantly, end the file lease.
+          closeThreads(true);
+        }
+      }
-      flushInternal();             // flush all data to Datanodes
-      // get last block before destroying the streamer
-      ExtendedBlock lastBlock = getStreamer().getBlock();
-
-      try (TraceScope ignored =
-               dfsClient.getTracer().newScope("completeFile")) {
-        completeFile(lastBlock);
+      try {
+        flushInternal();             // flush all data to Datanodes
+      } catch (IOException ioe) {
+        cleanupAndRethrowIOException(ioe);
+      completeFile();
+  private void completeFile() throws IOException {
+    // get last block before destroying the streamer
+    ExtendedBlock lastBlock = getStreamer().getBlock();
+    try (TraceScope ignored =
+        dfsClient.getTracer().newScope("completeFile")) {
+      completeFile(lastBlock);
+    }
+  }
+
+  /**
+   * Determines whether an IOException thrown needs extra cleanup on the stream.
+   * Space quota exceptions will be thrown when getting new blocks, so the
+   * open HDFS file need to be closed.
+   *
+   * @param ioe the IOException
+   * @return whether the stream needs cleanup for the given IOException
+   */
+  private boolean exceptionNeedsCleanup(IOException ioe) {
+    return ioe instanceof DSQuotaExceededException
+        || ioe instanceof QuotaByStorageTypeExceededException;
+  }
+
+  private void cleanupAndRethrowIOException(IOException ioe)
+      throws IOException {
+    if (exceptionNeedsCleanup(ioe)) {
+      final MultipleIOException.Builder b = new MultipleIOException.Builder();
+      b.add(ioe);
+      try {
+        completeFile();
+      } catch (IOException e) {
+        b.add(e);
+        throw b.build();
+      }
+    }
+    throw ioe;
+  }
+

INS31 INS31 INS31 INS83 INS39 INS42 INS43 MOV8 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS25 INS42 INS65 INS65 INS65 INS43 INS42 INS41 INS43 INS42 INS42 INS25 INS53 MOV32 INS8 INS8 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS27 INS42 INS32 INS8 INS42 INS21 INS54 INS41 MOV21 MOV25 MOV25 INS54 INS21 INS62 INS62 INS42 INS42 INS60 INS21 INS54 INS32 MOV8 INS12 INS8 INS8 INS12 INS32 INS42 INS43 INS42 INS43 INS83 INS43 INS59 INS32 INS8 INS12 INS42 INS42 INS45 INS42 INS32 INS44 INS8 MOV25 MOV21 INS44 INS8 INS42 INS42 INS42 INS40 INS42 INS14 INS42 INS42 INS42 INS21 INS44 INS8 INS32 INS42 INS43 INS42 INS21 INS38 INS8 INS43 INS42 INS21 INS43 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS32 INS42 INS21 INS42 INS32 INS40 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 DEL41