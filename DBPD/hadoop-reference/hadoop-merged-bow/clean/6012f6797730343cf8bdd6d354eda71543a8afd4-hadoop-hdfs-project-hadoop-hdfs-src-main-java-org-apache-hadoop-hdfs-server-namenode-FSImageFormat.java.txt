svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802 for merging HDFS Snapshot feature branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480838 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.DataInput;
+import java.io.FileNotFoundException;
-import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.Map;
+import org.apache.hadoop.fs.PathIsNotDirectoryException;
+import org.apache.hadoop.fs.UnresolvedLinkException;
-import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileDiffList;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectorySnapshottable;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectoryWithSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileUnderConstructionWithSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileWithSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotFSImageFormat;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotFSImageFormat.ReferenceMap;
+import org.apache.hadoop.hdfs.util.ReadOnlyList;
- *   LayoutVersion: int, NamespaceID: int, NumberItemsInFSDirectoryTree: long,
- *   NamesystemGenerationStamp: long, TransactionID: long
+ *   layoutVersion: int, namespaceID: int, numberItemsInFSDirectoryTree: long,
+ *   namesystemGenerationStamp: long, transactionID: long, 
+ *   snapshotCounter: int, numberOfSnapshots: int, numOfSnapshottableDirs: int,
- *   INodeInfo of root, NumberOfChildren of root: int
+ *   INodeInfo of root, numberOfChildren of root: int
- *     LocalName: short + byte[]
+ *     localName: short + byte[]
- *     FullPath: byte[]
+ *     fullPath: byte[]
- *   ReplicationFactor: short, ModificationTime: long,
- *   AccessTime: long, PreferredBlockSize: long,
- *   NumberOfBlocks: int (-1 for INodeDirectory, -2 for INodeSymLink),
+ *   replicationFactor: short, modificationTime: long,
+ *   accessTime: long, preferredBlockSize: long,
+ *   numberOfBlocks: int (-1 for INodeDirectory, -2 for INodeSymLink),
- *     NsQuota: long, DsQuota: long, FsPermission: short, PermissionStatus
+ *     nsQuota: long, dsQuota: long, 
+ *     {
+ *       isINodeSnapshottable: byte,
+ *       isINodeWithSnapshot: byte (if isINodeSnapshottable is false)
+ *     } (when {@link Feature#SNAPSHOT} is supported), 
+ *     fsPermission: short, PermissionStatus
- *     SymlinkString, FsPermission: short, PermissionStatus
+ *     symlinkString, fsPermission: short, PermissionStatus
- *     [list of BlockInfo], FsPermission: short, PermissionStatus
+ *     [list of BlockInfo]
+ *     [list of FileDiff]
+ *     {
+ *       isINodeFileUnderConstructionSnapshot: byte, 
+ *       {clientName: short + byte[], clientMachine: short + byte[]} (when 
+ *       isINodeFileUnderConstructionSnapshot is true),
+ *     } (when {@link Feature#SNAPSHOT} is supported and writing snapshotINode), 
+ *     fsPermission: short, PermissionStatus
- *   FullPath of the directory: short + byte[],
- *   NumberOfChildren: int, [list of INodeInfo of children INode]
- *   [list of INodeDirectoryInfo of the directory children]
+ *   fullPath of the directory: short + byte[],
+ *   numberOfChildren: int, [list of INodeInfo of children INode],
+ *   {
+ *     numberOfSnapshots: int,
+ *     [list of Snapshot] (when NumberOfSnapshots is positive),
+ *     numberOfDirectoryDiffs: int,
+ *     [list of DirectoryDiff] (NumberOfDirectoryDiffs is positive),
+ *     number of children that are directories,
+ *     [list of INodeDirectoryInfo of the directory children] (includes
+ *     snapshot copies of deleted sub-directories)
+ *   } (when {@link Feature#SNAPSHOT} is supported), 
+ * }
+ * 
+ * Snapshot {
+ *   snapshotID: int, root of Snapshot: INodeDirectoryInfo (its local name is 
+ *   the name of the snapshot)
+ * }
+ * 
+ * DirectoryDiff {
+ *   full path of the root of the associated Snapshot: short + byte[], 
+ *   childrenSize: int, 
+ *   isSnapshotRoot: byte, 
+ *   snapshotINodeIsNotNull: byte (when isSnapshotRoot is false),
+ *   snapshotINode: INodeDirectory (when SnapshotINodeIsNotNull is true), Diff 
+ * }
+ * 
+ * Diff {
+ *   createdListSize: int, [Local name of INode in created list],
+ *   deletedListSize: int, [INode in deleted list: INodeInfo]
+ * }
+ *
+ * FileDiff {
+ *   full path of the root of the associated Snapshot: short + byte[], 
+ *   fileSize: long, 
+ *   snapshotINodeIsNotNull: byte,
+ *   snapshotINode: INodeFile (when SnapshotINodeIsNotNull is true), Diff 
-class FSImageFormat {
+public class FSImageFormat {
-  static class Loader {
+  public static class Loader {
+    
+    private Map<Integer, Snapshot> snapshotMap = null;
+    private final ReferenceMap referenceMap = new ReferenceMap();
-    void load(File curFile)
-      throws IOException
-    {
+    void load(File curFile) throws IOException {
+        boolean supportSnapshot = LayoutVersion.supports(Feature.SNAPSHOT,
+            imgVersion);
+        if (supportSnapshot) {
+          snapshotMap = namesystem.getSnapshotManager().read(in, this);
+        }
+
-          loadLocalNameINodes(numFiles, in);
+          if (supportSnapshot) {
+            loadLocalNameINodesWithSnapshot(in);
+          } else {
+            loadLocalNameINodes(numFiles, in);
+          }
-        loadFilesUnderConstruction(in);
+        loadFilesUnderConstruction(in, supportSnapshot);
-  private void updateRootAttr(INode root) {                                                           
+  private void updateRootAttr(INodeWithAdditionalFields root) {                                                           
-    fsDir.rootDir.setModificationTime(root.getModificationTime());
+    fsDir.rootDir.cloneModificationTime(root);
-
+  
+    /**
+     * Load fsimage files when 1) only local names are stored, 
+     * and 2) snapshot is supported.
+     * 
+     * @param in Image input stream
+     */
+    private void loadLocalNameINodesWithSnapshot(DataInput in)
+        throws IOException {
+      assert LayoutVersion.supports(Feature.FSIMAGE_NAME_OPTIMIZATION,
+          getLayoutVersion());
+      assert LayoutVersion.supports(Feature.SNAPSHOT, getLayoutVersion());
+      
+      // load root
+      loadRoot(in);
+      // load rest of the nodes recursively
+      loadDirectoryWithSnapshot(in);
+    }
+    
-   private void loadLocalNameINodes(long numFiles, DataInputStream in)
-        throws IOException {
+   private void loadLocalNameINodes(long numFiles, DataInput in) 
+       throws IOException {
-     if( in.readShort() != 0) {
-       throw new IOException("First node is not root");
-     }   
-     INode root = loadINode(in);
-     // update the root's attributes
-     updateRootAttr(root);
-     numFiles--;
+     loadRoot(in);
+     // have loaded the first file (the root)
+     numFiles--; 
+    /**
+     * Load information about root, and use the information to update the root
+     * directory of NameSystem.
+     * @param in The {@link DataInput} instance to read.
+     */
+    private void loadRoot(DataInput in) throws IOException {
+      // load root
+      if (in.readShort() != 0) {
+        throw new IOException("First node is not root");
+      }
+      final INodeDirectory root = loadINode(null, false, in).asDirectory();
+      // update the root's attributes
+      updateRootAttr(root);
+    }
+   
+    /** Load children nodes for the parent directory. */
+    private int loadChildren(INodeDirectory parent, DataInput in)
+        throws IOException {
+      int numChildren = in.readInt();
+      for (int i = 0; i < numChildren; i++) {
+        // load single inode
+        INode newNode = loadINodeWithLocalName(false, in);
+        addToParent(parent, newNode);
+      }
+      return numChildren;
+    }
+    
+    /**
+     * Load a directory when snapshot is supported.
+     * @param in The {@link DataInput} instance to read.
+     */
+    private void loadDirectoryWithSnapshot(DataInput in)
+        throws IOException {
+      // Step 1. Identify the parent INode
+      long inodeId = in.readLong();
+      final INodeDirectory parent = this.namesystem.dir.getInode(inodeId)
+          .asDirectory();
+      
+      // Check if the whole subtree has been saved (for reference nodes)
+      boolean toLoadSubtree = referenceMap.toProcessSubtree(parent.getId());
+      if (!toLoadSubtree) {
+        return;
+      }
+      
+      // Step 2. Load snapshots if parent is snapshottable
+      int numSnapshots = in.readInt();
+      if (numSnapshots >= 0) {
+        final INodeDirectorySnapshottable snapshottableParent
+            = INodeDirectorySnapshottable.valueOf(parent, parent.getLocalName());
+        if (snapshottableParent.getParent() != null) { // not root
+          this.namesystem.getSnapshotManager().addSnapshottable(
+              snapshottableParent);
+        }
+        // load snapshots and snapshotQuota
+        SnapshotFSImageFormat.loadSnapshotList(snapshottableParent,
+            numSnapshots, in, this);
+      }
+
+      // Step 3. Load children nodes under parent
+      loadChildren(parent, in);
+      
+      // Step 4. load Directory Diff List
+      SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);
+      
+      // Recursively load sub-directories, including snapshot copies of deleted
+      // directories
+      int numSubTree = in.readInt();
+      for (int i = 0; i < numSubTree; i++) {
+        loadDirectoryWithSnapshot(in);
+      }
+    }
+    
-   private int loadDirectory(DataInputStream in) throws IOException {
+   private int loadDirectory(DataInput in) throws IOException {
-     FSDirectory fsDir = namesystem.dir;
-         fsDir.rootDir.getNode(parentPath, true), parentPath);
-
-     int numChildren = in.readInt();
-     for(int i=0; i<numChildren; i++) {
-       // load single inode
-       byte[] localName = new byte[in.readShort()];
-       in.readFully(localName); // read local name
-       INode newNode = loadINode(in); // read rest of inode
-
-       // add to parent
-       newNode.setLocalName(localName);
-       addToParent(parent, newNode);
-     }
-     return numChildren;
+         namesystem.dir.rootDir.getNode(parentPath, true), parentPath);
+     return loadChildren(parent, in);
-      DataInputStream in) throws IOException {
+      DataInput in) throws IOException {
-      INode newNode = loadINode(in);
+      final INode newNode = loadINode(
+          pathComponents[pathComponents.length-1], false, in);
-        updateRootAttr(newNode);
+        updateRootAttr(newNode.asDirectory());
-        parentINode = fsDir.rootDir.getParent(pathComponents);
+        parentINode = getParentINodeDirectory(pathComponents);
-      newNode.setLocalName(pathComponents[pathComponents.length-1]);
+  private INodeDirectory getParentINodeDirectory(byte[][] pathComponents
+      ) throws FileNotFoundException, PathIsNotDirectoryException,
+      UnresolvedLinkException {
+    if (pathComponents.length < 2) { // root
+      return null;
+    }
+    // Gets the parent INode
+    final INodesInPath inodes = namesystem.dir.getExistingPathINodes(
+        pathComponents);
+    return INodeDirectory.valueOf(inodes.getINode(-2), pathComponents);
+  }
+
-  void addToParent(INodeDirectory parent, INode child) {
+  private void addToParent(INodeDirectory parent, INode child) {
-    if (!parent.addChild(child, false)) {
+    if (!parent.addChild(child)) {
-      final INodeFile file = (INodeFile)child;
+      final INodeFile file = child.asFile();
-      final BlockManager bm = namesystem.getBlockManager();
-      for (int i = 0; i < blocks.length; i++) {
-        file.setBlock(i, bm.addBlockCollection(blocks[i], file));
+      if (blocks != null) {
+        final BlockManager bm = namesystem.getBlockManager();
+        for (int i = 0; i < blocks.length; i++) {
+          file.setBlock(i, bm.addBlockCollection(blocks[i], file));
+        } 
+    /** @return The FSDirectory of the namesystem where the fsimage is loaded */
+    public FSDirectory getFSDirectoryInLoading() {
+      return namesystem.dir;
+    }
+
+    public INode loadINodeWithLocalName(boolean isSnapshotINode,
+        DataInput in) throws IOException {
+      final byte[] localName = FSImageSerialization.readLocalName(in);
+      INode inode = loadINode(localName, isSnapshotINode, in);
+      if (LayoutVersion.supports(Feature.ADD_INODE_ID, getLayoutVersion())) {
+        namesystem.dir.addToInodeMap(inode);
+      }
+      return inode;
+    }
+  
-  private INode loadINode(DataInputStream in)
-      throws IOException {
-    long modificationTime = 0;
-    long atime = 0;
-    long blockSize = 0;
-    
-    int imgVersion = getLayoutVersion();
+  INode loadINode(final byte[] localName, boolean isSnapshotINode,
+      DataInput in) throws IOException {
+    final int imgVersion = getLayoutVersion();
+    if (LayoutVersion.supports(Feature.SNAPSHOT, imgVersion)) {
+      namesystem.getFSDirectory().verifyINodeName(localName);
+    }
+
-    short replication = in.readShort();
-    replication = namesystem.getBlockManager().adjustReplication(replication);
-    modificationTime = in.readLong();
+    final short replication = namesystem.getBlockManager().adjustReplication(
+        in.readShort());
+    final long modificationTime = in.readLong();
+    long atime = 0;
-    blockSize = in.readLong();
-    int numBlocks = in.readInt();
-    BlockInfo blocks[] = null;
+    final long blockSize = in.readLong();
+    final int numBlocks = in.readInt();
-      blocks = new BlockInfo[numBlocks];
-      for (int j = 0; j < numBlocks; j++) {
-        blocks[j] = new BlockInfo(replication);
-        blocks[j].readFields(in);
+      // file
+      
+      // read blocks
+      BlockInfo[] blocks = null;
+      if (numBlocks >= 0) {
+        blocks = new BlockInfo[numBlocks];
+        for (int j = 0; j < numBlocks; j++) {
+          blocks[j] = new BlockInfo(replication);
+          blocks[j].readFields(in);
+        }
+      }
+
+      String clientName = "";
+      String clientMachine = "";
+      boolean underConstruction = false;
+      FileDiffList fileDiffs = null;
+      if (LayoutVersion.supports(Feature.SNAPSHOT, imgVersion)) {
+        // read diffs
+        fileDiffs = SnapshotFSImageFormat.loadFileDiffList(in, this);
+
+        if (isSnapshotINode) {
+          underConstruction = in.readBoolean();
+          if (underConstruction) {
+            clientName = FSImageSerialization.readString(in);
+            clientMachine = FSImageSerialization.readString(in);
+          }
+        }
+      }
+
+      final PermissionStatus permissions = PermissionStatus.read(in);
+
+      // return
+      final INodeFile file = new INodeFile(inodeId, localName, permissions,
+          modificationTime, atime, blocks, replication, blockSize);
+      return fileDiffs != null? new INodeFileWithSnapshot(file, fileDiffs)
+          : underConstruction? new INodeFileUnderConstruction(
+              file, clientName, clientMachine, null)
+          : file;
+    } else if (numBlocks == -1) {
+      //directory
+      
+      //read quotas
+      final long nsQuota = in.readLong();
+      long dsQuota = -1L;
+      if (LayoutVersion.supports(Feature.DISKSPACE_QUOTA, imgVersion)) {
+        dsQuota = in.readLong();
+      }
+
+      //read snapshot info
+      boolean snapshottable = false;
+      boolean withSnapshot = false;
+      if (LayoutVersion.supports(Feature.SNAPSHOT, imgVersion)) {
+        snapshottable = in.readBoolean();
+        if (!snapshottable) {
+          withSnapshot = in.readBoolean();
+        }
+      }
+
+      final PermissionStatus permissions = PermissionStatus.read(in);
+
+      //return
+      final INodeDirectory dir = nsQuota >= 0 || dsQuota >= 0?
+          new INodeDirectoryWithQuota(inodeId, localName, permissions,
+              modificationTime, nsQuota, dsQuota)
+          : new INodeDirectory(inodeId, localName, permissions, modificationTime);
+      return snapshottable ? new INodeDirectorySnapshottable(dir)
+          : withSnapshot ? new INodeDirectoryWithSnapshot(dir)
+          : dir;
+    } else if (numBlocks == -2) {
+      //symlink
+
+      final String symlink = Text.readString(in);
+      final PermissionStatus permissions = PermissionStatus.read(in);
+      return new INodeSymlink(inodeId, localName, permissions,
+          modificationTime, atime, symlink);
+    } else if (numBlocks == -3) {
+      //reference
+      
+      final boolean isWithName = in.readBoolean();
+      // lastSnapshotId for WithName node, dstSnapshotId for DstReference node
+      int snapshotId = in.readInt();
+      
+      final INodeReference.WithCount withCount
+          = referenceMap.loadINodeReferenceWithCount(isSnapshotINode, in, this);
+
+      if (isWithName) {
+          return new INodeReference.WithName(null, withCount, localName,
+              snapshotId);
+      } else {
+        final INodeReference ref = new INodeReference.DstReference(null,
+            withCount, snapshotId);
+        return ref;
-    // get quota only when the node is a directory
-    long nsQuota = -1L;
-    if (blocks == null && numBlocks == -1) {
-      nsQuota = in.readLong();
-    }
-    long dsQuota = -1L;
-    if (LayoutVersion.supports(Feature.DISKSPACE_QUOTA, imgVersion)
-        && blocks == null && numBlocks == -1) {
-      dsQuota = in.readLong();
-    }
-
-    // Read the symlink only when the node is a symlink
-    String symlink = "";
-    if (numBlocks == -2) {
-      symlink = Text.readString(in);
-    }
-    
-    PermissionStatus permissions = PermissionStatus.read(in);
-
-    return INode.newINode(inodeId, permissions, blocks, symlink, replication,
-        modificationTime, atime, nsQuota, dsQuota, blockSize);
+    throw new IOException("Unknown inode type: numBlocks=" + numBlocks);
-    private void loadFilesUnderConstruction(DataInputStream in)
-    throws IOException {
+    private void loadFilesUnderConstruction(DataInput in,
+        boolean supportSnapshot) throws IOException {
-        INodeFile oldnode = INodeFile.valueOf(fsDir.getINode(path), path);
-        fsDir.replaceNode(path, oldnode, cons);
+        final INodesInPath iip = fsDir.getLastINodeInPath(path);
+        INodeFile oldnode = INodeFile.valueOf(iip.getINode(0), path);
+        cons.setLocalName(oldnode.getLocalNameBytes());
+        cons.setParent(oldnode.getParent());
+
+        if (oldnode instanceof INodeFileWithSnapshot) {
+          cons = new INodeFileUnderConstructionWithSnapshot(cons,
+              ((INodeFileWithSnapshot)oldnode).getDiffs());
+        }
+
+        fsDir.replaceINodeFile(path, oldnode, cons);
-    private void loadSecretManagerState(DataInputStream in)
+    private void loadSecretManagerState(DataInput in)
+    
+    public Snapshot getSnapshot(DataInput in) throws IOException {
+      return snapshotMap.get(in.readInt());
+    }
-
-    static private final byte[] PATH_SEPARATOR = DFSUtil.string2Bytes(Path.SEPARATOR);
+    private final ReferenceMap referenceMap = new ReferenceMap();
-    void save(File newFile,
-              FSImageCompression compression)
-      throws IOException {
+    void save(File newFile, FSImageCompression compression) throws IOException {
+        sourceNamesystem.getSnapshotManager().write(out);
+        
-
-        byte[] byteStore = new byte[4*HdfsConstants.MAX_PATH_LENGTH];
-        ByteBuffer strbuf = ByteBuffer.wrap(byteStore);
-        FSImageSerialization.saveINode2Image(fsDir.rootDir, out);
+        FSImageSerialization.saveINode2Image(fsDir.rootDir, out, false,
+            referenceMap);
-        saveImage(strbuf, fsDir.rootDir, out);
+        saveImage(fsDir.rootDir, out, true);
-        strbuf = null;
-     * Save file tree image starting from the given root.
-     * This is a recursive procedure, which first saves all children of
-     * a current directory and then moves inside the sub-directories.
+     * Save children INodes.
+     * @param children The list of children INodes
+     * @param out The DataOutputStream to write
+     * @return Number of children that are directory
-    private void saveImage(ByteBuffer currentDirName,
-                                  INodeDirectory current,
-                                  DataOutputStream out) throws IOException {
-      final List<INode> children = current.getChildrenList();
-      if (children.isEmpty())
-        return;
-      // print prefix (parent directory name)
-      int prefixLen = currentDirName.position();
-      if (prefixLen == 0) {  // root
-        out.writeShort(PATH_SEPARATOR.length);
-        out.write(PATH_SEPARATOR);
-      } else {  // non-root directories
-        out.writeShort(prefixLen);
-        out.write(currentDirName.array(), 0, prefixLen);
-      }
+    private int saveChildren(ReadOnlyList<INode> children, DataOutputStream out)
+        throws IOException {
+      // Write normal children INode. 
+      int dirNum = 0;
-        FSImageSerialization.saveINode2Image(child, out);
+        FSImageSerialization.saveINode2Image(child, out, false, referenceMap);
+        if (child.isDirectory()) {
+          dirNum++;
+        }
+      return dirNum;
+    }
+    
+    /**
+     * Save file tree image starting from the given root.
+     * This is a recursive procedure, which first saves all children and 
+     * snapshot diffs of a current directory and then moves inside the 
+     * sub-directories.
+     * 
+     * @param current The current node
+     * @param out The DataoutputStream to write the image
+     * @param snapshot The possible snapshot associated with the current node
+     * @param toSaveSubtree Whether or not to save the subtree to fsimage. For
+     *                      reference node, its subtree may already have been
+     *                      saved before.
+     */
+    private void saveImage(INodeDirectory current, DataOutputStream out,
+        boolean toSaveSubtree) throws IOException {
+      // write the inode id of the directory
+      out.writeLong(current.getId());
+      
+      if (!toSaveSubtree) {
+        return;
+      }
+      
+      final ReadOnlyList<INode> children = current.getChildrenList(null);
+      int dirNum = 0;
+      List<INodeDirectory> snapshotDirs = null;
+      if (current instanceof INodeDirectoryWithSnapshot) {
+        snapshotDirs = new ArrayList<INodeDirectory>();
+        ((INodeDirectoryWithSnapshot) current).getSnapshotDirectory(
+            snapshotDirs);
+        dirNum += snapshotDirs.size();
+      }
+      
+      // 2. Write INodeDirectorySnapshottable#snapshotsByNames to record all
+      // Snapshots
+      if (current instanceof INodeDirectorySnapshottable) {
+        INodeDirectorySnapshottable snapshottableNode = 
+            (INodeDirectorySnapshottable) current;
+        SnapshotFSImageFormat.saveSnapshots(snapshottableNode, out);
+      } else {
+        out.writeInt(-1); // # of snapshots
+      }
+
+      // 3. Write children INode 
+      dirNum += saveChildren(children, out);
+      
+      // 4. Write DirectoryDiff lists, if there is any.
+      SnapshotFSImageFormat.saveDirectoryDiffList(current, out, referenceMap);
+      
+      // Write sub-tree of sub-directories, including possible snapshots of 
+      // deleted sub-directories
+      out.writeInt(dirNum); // the number of sub-directories
-        if(!child.isDirectory())
+        if(!child.isDirectory()) {
-        currentDirName.put(PATH_SEPARATOR).put(child.getLocalNameBytes());
-        saveImage(currentDirName, (INodeDirectory)child, out);
-        currentDirName.position(prefixLen);
+        }
+        // make sure we only save the subtree under a reference node once
+        boolean toSave = child.isReference() ? 
+            referenceMap.toProcessSubtree(child.getId()) : true;
+        saveImage(child.asDirectory(), out, toSave);
+      }
+      if (snapshotDirs != null) {
+        for (INodeDirectory subDir : snapshotDirs) {
+          // make sure we only save the subtree under a reference node once
+          boolean toSave = subDir.getParentReference() != null ? 
+              referenceMap.toProcessSubtree(subDir.getId()) : true;
+          saveImage(subDir, out, toSave);
+        }

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS83 INS83 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS23 INS31 MOV44 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 MOV39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 UPD42 MOV42 MOV44 INS43 INS8 MOV29 INS83 INS39 INS42 INS44 MOV43 INS8 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS8 INS83 INS29 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS44 INS44 MOV60 MOV60 INS44 INS83 INS43 INS42 INS44 INS43 INS8 MOV83 MOV83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 MOV44 MOV43 INS8 INS44 INS43 MOV60 INS67 INS67 INS67 INS43 INS43 INS43 INS42 INS33 INS42 INS42 INS14 INS43 INS65 INS65 INS43 INS42 INS42 INS6 INS6 INS21 INS21 UPD43 INS21 INS65 INS65 INS43 INS42 INS42 MOV25 INS60 MOV21 INS65 INS43 INS42 INS43 INS42 INS42 MOV60 INS24 MOV41 INS65 INS65 UPD43 INS42 INS60 MOV60 INS60 INS25 INS60 INS25 INS21 INS21 INS60 INS24 INS43 INS42 MOV60 MOV60 INS41 UPD43 INS42 INS5 INS42 INS42 INS42 INS42 INS25 INS60 INS41 INS65 INS42 INS41 INS42 INS39 INS42 INS43 INS42 INS42 INS60 MOV60 INS25 INS41 INS83 MOV5 INS42 INS39 INS42 UPD43 INS25 INS60 INS25 INS53 UPD43 INS39 INS42 UPD43 INS42 INS43 INS42 INS42 INS41 INS42 INS42 INS14 INS65 INS65 INS65 INS65 INS74 INS42 MOV21 INS60 MOV60 MOV70 INS41 INS65 INS65 INS65 INS65 UPD43 UPD42 INS39 INS42 INS42 INS21 INS25 INS60 INS25 INS25 INS21 INS21 INS21 INS70 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS32 INS32 INS32 UPD42 INS32 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS83 MOV43 INS59 INS66 INS42 INS42 MOV58 MOV27 MOV37 INS8 INS66 INS42 INS66 INS65 INS66 UPD42 INS39 INS59 INS83 UPD43 INS39 INS59 INS38 MOV8 INS39 INS59 INS27 INS8 INS32 INS32 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS32 UPD42 MOV39 MOV85 INS85 INS27 INS8 INS83 INS43 INS59 INS32 INS8 INS66 INS40 INS42 INS83 MOV5 INS59 INS32 INS8 INS42 UPD42 INS83 INS32 INS8 INS83 INS83 INS83 MOV39 INS59 INS83 INS27 INS8 INS25 INS14 UPD42 UPD42 INS42 INS32 INS43 MOV21 MOV21 INS66 INS42 INS66 INS42 INS66 INS66 INS43 MOV43 INS39 INS59 INS42 UPD66 UPD66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 UPD42 INS32 INS38 INS8 INS83 INS74 INS39 INS59 UPD74 INS62 MOV8 INS62 INS8 INS8 INS7 INS32 INS32 MOV44 INS42 INS8 INS27 INS8 INS42 INS60 INS25 UPD42 MOV42 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS32 INS60 MOV21 INS42 INS42 MOV32 UPD42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS40 INS34 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS41 INS25 MOV39 MOV85 INS42 INS32 UPD42 INS42 INS42 INS40 INS32 MOV21 INS42 INS42 INS40 INS42 INS21 INS32 MOV32 MOV42 MOV32 INS42 INS34 INS60 MOV25 INS60 INS60 INS60 INS60 INS25 MOV60 MOV60 INS41 MOV27 INS8 INS25 INS43 INS27 INS60 INS21 INS21 INS25 INS42 INS42 INS32 INS42 INS21 INS42 INS42 INS34 INS25 INS42 INS42 INS32 INS42 INS41 INS43 INS43 UPD42 INS42 INS34 UPD43 UPD42 INS33 INS42 INS43 INS21 INS42 INS43 INS60 MOV21 MOV21 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV25 INS60 INS21 INS42 INS33 INS70 INS39 INS59 INS42 INS8 INS8 INS42 INS42 INS32 INS42 MOV43 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS34 INS32 INS83 MOV43 INS33 INS40 INS42 INS42 INS42 INS42 INS38 INS27 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 MOV32 INS42 MOV32 INS5 INS59 MOV43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS32 INS8 INS83 INS83 INS43 INS16 MOV60 MOV60 MOV25 INS60 INS60 MOV25 MOV60 INS60 INS41 MOV27 INS8 INS25 INS42 INS45 INS42 INS83 INS43 INS59 MOV43 INS32 INS32 INS62 INS8 INS42 INS42 INS32 INS32 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 INS33 UPD42 INS42 INS7 INS7 INS42 INS43 INS59 INS42 INS42 INS42 INS8 INS39 INS59 INS32 INS44 INS42 INS8 INS42 INS32 INS21 INS25 INS42 INS42 INS33 INS9 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 UPD40 MOV32 MOV42 INS34 INS32 INS42 INS33 MOV60 MOV24 INS40 UPD42 UPD42 INS32 INS42 INS42 INS42 MOV43 INS85 INS42 INS33 INS42 INS45 INS42 INS42 INS45 INS42 INS9 INS42 INS42 INS33 INS42 INS42 INS40 INS42 MOV21 INS25 INS42 INS42 INS14 INS27 INS14 INS16 INS83 MOV32 INS39 INS59 INS39 INS59 INS32 INS8 INS83 INS43 INS83 INS43 INS59 INS16 INS60 INS60 INS41 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS21 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS9 INS42 INS9 INS9 INS42 INS42 INS42 INS21 INS42 INS14 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS11 UPD42 UPD42 UPD42 INS42 UPD42 INS38 INS18 INS42 INS16 MOV42 INS32 INS42 INS42 INS43 INS42 INS60 MOV21 INS42 INS42 INS40 INS42 INS7 INS42 INS8 MOV8 INS42 INS9 INS42 INS22 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS9 UPD42 INS42 INS42 INS42 INS42 INS42 INS8 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS9 INS42 INS9 INS42 INS42 INS40 INS42 INS21 INS25 INS42 UPD42 INS32 INS42 INS42 INS16 INS42 INS14 INS16 INS83 INS43 INS59 INS83 INS43 INS59 INS14 INS42 INS38 INS60 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 UPD42 MOV42 INS37 INS74 INS11 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS34 INS32 INS32 INS9 INS42 INS42 MOV42 INS39 INS59 INS42 INS32 INS21 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS21 INS25 INS42 INS43 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS38 MOV8 INS42 INS42 INS42 INS27 INS14 INS14 INS43 INS42 INS42 INS14 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS83 INS39 INS59 INS39 INS59 INS83 INS43 INS59 INS42 INS8 INS8 UPD42 INS34 INS42 INS14 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS16 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS52 INS32 INS22 INS42 MOV42 INS42 UPD42 UPD42 MOV42 UPD42 UPD42 INS52 INS7 INS42 INS8 INS42 INS42 INS32 INS42 INS27 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS32 INS40 INS42 INS32 INS41 INS60 INS41 INS43 INS42 INS32 INS42 INS42 INS42 UPD42 INS27 INS32 INS9 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS32 MOV21 MOV21 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS14 INS83 INS43 INS59 INS42 INS42 INS36 INS42 INS32 INS33 INS42 INS42 INS32 INS42 INS42 UPD42 INS32 INS43 INS33 INS42 INS42 INS42 INS42 INS42 INS14 INS11 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS32 INS42 INS42 INS40 INS43 INS33 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL83 DEL5 DEL42 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31 DEL42 DEL42 DEL32 DEL40 DEL21 DEL9 DEL42 DEL11 DEL42 DEL83 DEL42 DEL34 DEL59 DEL60 DEL34 DEL42 DEL42 DEL85 DEL33 DEL34 DEL38 DEL42 DEL33 DEL27 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL34 DEL38 DEL27 DEL27 DEL45 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL42 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL23 DEL42 DEL34 DEL40 DEL27 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL33 DEL7 DEL21 DEL32 DEL41 DEL25 DEL39 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL42 DEL18 DEL42 DEL34 DEL27 DEL8 DEL25 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL11 DEL42 DEL32 DEL21 DEL8 DEL70