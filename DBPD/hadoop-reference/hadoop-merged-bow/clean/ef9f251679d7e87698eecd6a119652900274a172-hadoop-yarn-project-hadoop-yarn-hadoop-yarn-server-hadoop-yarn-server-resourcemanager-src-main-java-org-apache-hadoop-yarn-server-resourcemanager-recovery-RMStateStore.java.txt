YARN-514.Delayed store operations should not result in RM unavailability for app submission (Zhijie Shen via bikas)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469059 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppStoredEvent;
-   * Blocking API
+   * Non-Blocking API
-   * This must not be called on the dispatcher thread
+   * This does not block the dispatcher threads
+   * RMAppStoredEvent will be sent on completion to notify the RMApp
-  public synchronized void storeApplication(RMApp app) throws Exception {
+  @SuppressWarnings("unchecked")
+  public synchronized void storeApplication(RMApp app) {
-
-    ApplicationStateDataPBImpl appStateData = new ApplicationStateDataPBImpl();
-    appStateData.setSubmitTime(app.getSubmitTime());
-    appStateData.setApplicationSubmissionContext(context);
-
-    LOG.info("Storing info for app: " + context.getApplicationId());
-    storeApplicationState(app.getApplicationId().toString(), appStateData);
+    ApplicationState appState = new ApplicationState(
+        app.getSubmitTime(), context);
+    dispatcher.getEventHandler().handle(new RMStateStoreAppEvent(appState));
+      case STORE_APP:
+        {
+          ApplicationState apptState =
+              ((RMStateStoreAppEvent) event).getAppState();
+          Exception storedException = null;
+          ApplicationStateDataPBImpl appStateData =
+              new ApplicationStateDataPBImpl();
+          appStateData.setSubmitTime(apptState.getSubmitTime());
+          appStateData.setApplicationSubmissionContext(
+              apptState.getApplicationSubmissionContext());
+          ApplicationId appId =
+              apptState.getApplicationSubmissionContext().getApplicationId();
+
+          LOG.info("Storing info for app: " + appId);
+          try {
+            storeApplicationState(appId.toString(), appStateData);
+          } catch (Exception e) {
+            LOG.error("Error storing app: " + appId, e);
+            storedException = e;
+          } finally {
+            notifyDoneStoringApplication(appId, storedException);
+          }
+        }
+        break;
+
+  @SuppressWarnings("unchecked")
+  /**
+   * In (@link handleStoreEvent}, this method is called to notify the
+   * application about operation completion
+   * @param appId id of the application that has been saved
+   * @param storedException the exception that is thrown when storing the
+   * application
+   */
+  private void notifyDoneStoringApplication(ApplicationId appId,
+                                                  Exception storedException) {
+    rmDispatcher.getEventHandler().handle(
+        new RMAppStoredEvent(appId, storedException));
+  }
-   * In (@link storeApplicationAttempt}, derived class can call this method to
-   * notify the application attempt about operation completion 
+   * In (@link handleStoreEvent}, this method is called to notify the
+   * application attempt about operation completion

INS26 INS40 INS31 INS31 MOV29 INS79 MOV83 MOV83 MOV39 MOV42 MOV44 INS8 INS79 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS45 MOV60 MOV6 INS60 MOV21 MOV10 MOV10 INS42 INS45 INS43 INS42 INS43 INS42 MOV21 UPD66 UPD66 INS66 INS43 INS59 INS49 INS8 INS10 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS14 INS42 INS60 INS60 MOV60 INS21 INS21 INS60 INS21 INS54 MOV32 UPD42 MOV42 INS14 INS43 MOV32 INS42 UPD42 MOV42 INS42 INS43 INS42 INS43 INS59 MOV43 INS59 INS32 INS32 INS43 INS59 INS32 INS8 INS12 INS8 UPD42 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS21 INS44 INS8 INS21 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS32 INS43 INS42 INS21 INS21 INS32 INS11 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL31 DEL42 DEL32 DEL42