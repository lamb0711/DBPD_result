Reverting the previous trunk merge since it added other unintended changes in addition


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1177127 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
-import org.apache.hadoop.mapreduce.v2.api.records.JobReport;
+import org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.AllocateResponse;
+import org.apache.hadoop.yarn.api.records.AMResponse;
+import org.apache.hadoop.yarn.api.records.ContainerId;
+import org.apache.hadoop.yarn.api.records.ResourceRequest;
-public abstract class RMCommunicator extends AbstractService  {
+public class RMCommunicator extends AbstractService  {
-  protected int lastResponseID;
+  private int lastResponseID;
-  /**
-   * Get the appProgress. Can be used only after this component is started.
-   * @return the appProgress.
-   */
-  protected float getApplicationProgress() {
-    // For now just a single job. In future when we have a DAG, we need an
-    // aggregate progress.
-    JobReport report = this.job.getReport();
-    float setupWeight = 0.05f;
-    float cleanupWeight = 0.05f;
-    float mapWeight = 0.0f;
-    float reduceWeight = 0.0f;
-    int numMaps = this.job.getTotalMaps();
-    int numReduces = this.job.getTotalReduces();
-    if (numMaps == 0 && numReduces == 0) {
-    } else if (numMaps == 0) {
-      reduceWeight = 0.9f;
-    } else if (numReduces == 0) {
-      mapWeight = 0.9f;
-    } else {
-      mapWeight = reduceWeight = 0.45f;
-    }
-    return (report.getSetupProgress() * setupWeight
-        + report.getCleanupProgress() * cleanupWeight
-        + report.getMapProgress() * mapWeight + report.getReduceProgress()
-        * reduceWeight);
-  }
-
-  protected abstract void heartbeat() throws Exception;
+  protected synchronized void heartbeat() throws Exception {
+    AllocateRequest allocateRequest =
+        recordFactory.newRecordInstance(AllocateRequest.class);
+    allocateRequest.setApplicationAttemptId(applicationAttemptId);
+    allocateRequest.setResponseId(lastResponseID);
+    allocateRequest.addAllAsks(new ArrayList<ResourceRequest>());
+    allocateRequest.addAllReleases(new ArrayList<ContainerId>());
+    AllocateResponse allocateResponse = scheduler.allocate(allocateRequest);
+    AMResponse response = allocateResponse.getAMResponse();
+    if (response.getReboot()) {
+      LOG.info("Event from RM: shutting down Application Master");
+    }
+  }
+

MOV26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 UPD40 INS40 INS40 UPD83 INS83 UPD39 UPD42 MOV43 INS21 INS21 INS21 INS21 INS60 INS60 INS25 UPD43 INS32 INS32 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS8 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS21 INS42 INS42 INS57 INS74 INS74 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS43 INS43 INS43 INS43 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS42 INS42 INS42 DEL83 DEL66 DEL65 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL52 DEL42 DEL22 DEL32 DEL59 DEL60 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL8 DEL42 DEL34 DEL27 DEL42 DEL34 DEL7 DEL21 DEL8 DEL42 DEL34 DEL27 DEL42 DEL34 DEL7 DEL21 DEL8 DEL42 DEL42 DEL34 DEL7 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL42 DEL32 DEL42 DEL27 DEL32 DEL42 DEL27 DEL27 DEL32 DEL42 DEL27 DEL27 DEL32 DEL42 DEL27 DEL27 DEL36 DEL41 DEL83 DEL83 DEL39 DEL42 DEL31