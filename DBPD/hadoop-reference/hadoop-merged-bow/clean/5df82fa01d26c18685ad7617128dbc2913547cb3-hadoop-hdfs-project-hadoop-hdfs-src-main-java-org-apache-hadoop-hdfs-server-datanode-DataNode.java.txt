HDFS-5907. BlockPoolSliceStorage trash to handle block deletions during rolling upgrade. (Arpit Agarwal)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1568346 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.RollingUpgradeStartupOption;
-  private static final String USAGE = "Usage: java DataNode [-rollback | -regular]";
+  private static final String USAGE =
+      "Usage: java DataNode [-regular | -rollback | -rollingupgrade rollback]\n" +
+      "    -regular                 : Normal DataNode startup (default).\n" +
+      "    -rollback                : Rollback a standard upgrade.\n" +
+      "    -rollingupgrade rollback : Rollback a rolling upgrade operation.\n" +
+      "  Refer to HDFS documentation for the difference between standard\n" +
+      "  and rolling upgrades.";
+
+      LOG.error("Bad command line arguments");
+  @VisibleForTesting
+  @VisibleForTesting
-  private static boolean parseArguments(String args[], 
-                                        Configuration conf) {
-    int argsLen = (args == null) ? 0 : args.length;
+  @VisibleForTesting
+  static boolean parseArguments(String args[], Configuration conf) {
-    for(int i=0; i < argsLen; i++) {
-      String cmd = args[i];
+    int i = 0;
+
+    if (args != null && args.length != 0) {
+      String cmd = args[i++];
-        terminate(1);
-      } else if ("-rollback".equalsIgnoreCase(cmd)) {
-        startOpt = StartupOption.ROLLBACK;
-      } else if ("-regular".equalsIgnoreCase(cmd)) {
-        startOpt = StartupOption.REGULAR;
-      } else
+      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {
+        startOpt = StartupOption.ROLLBACK;
+      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {
+        startOpt = StartupOption.REGULAR;
+      } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {
+        startOpt = StartupOption.ROLLINGUPGRADE;
+
+        if ((i < args.length ) &&
+            (args[i].equalsIgnoreCase(RollingUpgradeStartupOption.ROLLBACK.toString()))) {
+          startOpt.setRollingUpgradeStartupOption(args[i++]);
+        } else {
+          LOG.error("Missing or unrecognized option to " + StartupOption.ROLLINGUPGRADE);
+          return false;
+        }
+
+        LOG.info("Rolling upgrade rollback requested via startup option");
+      } else {
+        return false;
+      }
+
-    return true;
+    return (args == null || i == args.length);    // Fail if more than one cmd specified!
-    return StartupOption.valueOf(conf.get(DFS_DATANODE_STARTUP_KEY,
-                                          StartupOption.REGULAR.toString()));
+    String value = conf.get(DFS_DATANODE_STARTUP_KEY,
+                            StartupOption.REGULAR.toString());
+    return StartupOption.getEnum(value);
+    int errorCode = 0;
-      if (datanode != null)
+      if (datanode != null) {
+      } else {
+        errorCode = 1;
+      }
-      terminate(0);
+      terminate(errorCode);

INS26 INS40 INS78 INS78 INS78 INS27 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS45 INS45 INS45 INS45 INS45 INS45 MOV39 MOV59 INS27 INS8 MOV36 INS43 INS59 INS39 INS59 INS21 INS27 INS27 MOV60 INS25 INS27 INS42 INS42 MOV32 INS42 UPD42 INS42 INS34 INS32 INS42 INS33 INS40 INS34 MOV27 MOV8 INS25 MOV27 INS27 INS8 INS8 INS42 INS42 INS45 INS2 MOV41 INS32 MOV8 MOV25 INS42 INS40 MOV21 INS21 INS42 INS42 MOV37 INS9 INS32 INS42 INS42 MOV8 INS7 INS40 INS42 INS32 INS8 INS8 INS42 INS34 INS40 INS42 INS32 INS21 INS25 INS21 INS41 INS40 INS42 INS7 INS27 INS8 INS8 INS32 INS9 INS42 INS40 INS36 INS36 INS21 INS21 INS41 INS42 INS42 INS45 INS27 INS32 INS32 INS32 MOV9 INS42 INS40 MOV2 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS27 INS40 INS42 INS42 INS37 INS45 INS40 INS42 DEL45 DEL83 DEL42 DEL34 DEL40 DEL16 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL45 DEL45 DEL39 DEL58 DEL42 DEL42 DEL27 DEL25 DEL8 DEL24 DEL9 DEL34