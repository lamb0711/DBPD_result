HDFS-11293: [SPS]: Local DN should be given preference as source node, when target available in same node. Contributed by Yuanbo Liu and Uma Maheswara Rao G

+      // if expected type exists in source node already, local movement would be
+      // possible, so lets find such sources first.
+      Iterator<DatanodeStorageInfo> iterator = existingBlockStorages.iterator();
+      while (iterator.hasNext()) {
+        DatanodeStorageInfo datanodeStorageInfo = iterator.next();
+        if (checkSourceAndTargetTypeExists(
+            datanodeStorageInfo.getDatanodeDescriptor(), existing,
+            expectedStorageTypes)) {
+          sourceWithStorageMap
+              .add(new StorageTypeNodePair(datanodeStorageInfo.getStorageType(),
+                  datanodeStorageInfo.getDatanodeDescriptor()));
+          iterator.remove();
+          existing.remove(datanodeStorageInfo.getStorageType());
+        }
+      }
+
+      // Let's find sources for existing types left.
-        Iterator<DatanodeStorageInfo> iterator =
-            existingBlockStorages.iterator();
+        iterator = existingBlockStorages.iterator();
-          blockMovingInfos, blockInfo, existing, sourceWithStorageMap,
+          blockMovingInfos, blockInfo, sourceWithStorageMap,
-   * @param existing
-   *          - Existing storage types of block
-      List<StorageType> existing,
+        expected.remove(chosenTarget.storageType);
+        expected.remove(chosenTarget.storageType);
-        foundMatchingTargetNodesForBlock = false;
+    if (expected.size() > 0) {
+      foundMatchingTargetNodesForBlock = false;
+    }
+
+  private boolean checkSourceAndTargetTypeExists(DatanodeDescriptor dn,
+      List<StorageType> existing, List<StorageType> expectedStorageTypes) {
+    DatanodeStorageInfo[] allDNStorageInfos = dn.getStorageInfos();
+    boolean isExpectedTypeAvailable = false;
+    boolean isExistingTypeAvailable = false;
+    for (DatanodeStorageInfo dnInfo : allDNStorageInfos) {
+      StorageType storageType = dnInfo.getStorageType();
+      if (existing.contains(storageType)) {
+        isExistingTypeAvailable = true;
+      }
+      if (expectedStorageTypes.contains(storageType)) {
+        isExpectedTypeAvailable = true;
+      }
+    }
+    return isExistingTypeAvailable && isExpectedTypeAvailable;
+  }
+

INS31 INS83 INS39 INS42 INS44 MOV44 INS44 INS8 INS25 INS43 INS42 INS74 INS42 INS60 INS60 INS60 INS70 INS41 INS27 INS8 INS42 INS43 INS43 INS5 INS59 INS39 INS59 INS39 INS59 INS44 INS42 INS8 INS27 MOV60 INS61 INS32 INS34 MOV21 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS9 INS42 INS9 INS43 INS42 INS60 INS25 INS25 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS32 INS8 INS42 INS42 INS60 INS25 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS21 INS43 INS59 INS32 INS8 INS7 INS32 INS32 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL66 DEL65