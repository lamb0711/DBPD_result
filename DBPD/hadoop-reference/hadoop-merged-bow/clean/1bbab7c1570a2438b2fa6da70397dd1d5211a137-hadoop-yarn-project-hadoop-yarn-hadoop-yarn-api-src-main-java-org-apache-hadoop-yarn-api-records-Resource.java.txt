YARN-4081. Add support for multiple resource types in the Resource class. (Varun Vasudev via wangda)

+import org.apache.hadoop.yarn.exceptions.ResourceNotFoundException;
+import org.apache.hadoop.yarn.exceptions.YarnException;
+import org.apache.hadoop.yarn.util.Records;
+import java.util.Map;
- * very coarse.  A complementary axis for CPU requests that represents processing
- * power will likely be added in the future to enable finer-grained resource
- * configuration.</p>
- * 
+ * very coarse.  A complementary axis for CPU requests that represents
+ * processing power will likely be added in the future to enable finer-grained
+ * resource configuration.</p>
+ *
+  @Public
+  @Stable
+  public static Resource newInstance(
+      Map<String, ResourceInformation> resources) {
+    Resource resource = Records.newRecord(Resource.class);
+    resource.setResources(resources);
+    return resource;
+  }
+
-   * Get <em>memory</em> of the resource.
-   * @return <em>memory</em> of the resource
+   * Get <em>memory</em> of the resource. Note - while memory has
+   * never had a unit specified, all YARN configurations have specified memory
+   * in MB. The assumption has been that the daemons and applications are always
+   * using the same units. With the introduction of the ResourceInformation
+   * class we have support for units - so this function will continue to return
+   * memory but in the units of MB
+   *
+   * @return <em>memory</em>(in MB) of the resource
-   * Get <em>memory</em> of the resource.
+   * Get <em>memory</em> of the resource. Note - while memory has
+   * never had a unit specified, all YARN configurations have specified memory
+   * in MB. The assumption has been that the daemons and applications are always
+   * using the same units. With the introduction of the ResourceInformation
+   * class we have support for units - so this function will continue to return
+   * memory but in the units of MB
+   *
-   * Set <em>memory</em> of the resource.
-   * @param memory <em>memory</em> of the resource
+   * Set <em>memory</em> of the resource. Note - while memory has
+   * never had a unit specified, all YARN configurations have specified memory
+   * in MB. The assumption has been that the daemons and applications are always
+   * using the same units. With the introduction of the ResourceInformation
+   * class we have support for units - so this function will continue to set
+   * memory but the assumption is that the value passed is in units of MB.
+   *
+   * @param memory <em>memory</em>(in MB) of the resource
-   * should be configured with virtual cores equal to its number of physical cores.
-   * A container should be requested with the number of cores it can saturate, i.e.
-   * the average number of threads it expects to have runnable at a time.
-   *   
+   * should be configured with virtual cores equal to its number of physical
+   * cores. A container should be requested with the number of cores it can
+   * saturate, i.e. the average number of threads it expects to have runnable
+   * at a time.
+   *
-   * should be configured with virtual cores equal to its number of physical cores.
-   * A container should be requested with the number of cores it can saturate, i.e.
-   * the average number of threads it expects to have runnable at a time.
-   *    
+   * should be configured with virtual cores equal to its number of physical
+   * cores. A container should be requested with the number of cores it can
+   * saturate, i.e. the average number of threads it expects to have runnable
+   * at a time.
+   *
+  /**
+   * Get ResourceInformation for all resources.
+   *
+   * @return Map of resource name to ResourceInformation
+   */
+  @Public
+  @Evolving
+  public abstract Map<String, ResourceInformation> getResources();
+
+  /**
+   * Get ResourceInformation for a specified resource.
+   *
+   * @param resource name of the resource
+   * @return the ResourceInformation object for the resource
+   * @throws YarnException if the resource can't be found
+   */
+  @Public
+  @Evolving
+  public abstract ResourceInformation getResourceInformation(String resource)
+      throws YarnException;
+
+  /**
+   * Get the value for a specified resource. No information about the units is
+   * returned.
+   *
+   * @param resource name of the resource
+   * @return the value for the resource
+   * @throws YarnException if the resource can't be found
+   */
+  @Public
+  @Evolving
+  public abstract Long getResourceValue(String resource) throws YarnException;
+
+  /**
+   * Set the resources to the map specified.
+   *
+   * @param resources Desired resources
+   */
+  @Public
+  @Evolving
+  public abstract void setResources(Map<String, ResourceInformation> resources);
+
+  /**
+   * Set the ResourceInformation object for a particular resource.
+   *
+   * @param resource the resource for which the ResourceInformation is provided
+   * @param resourceInformation ResourceInformation object
+   * @throws ResourceNotFoundException if the resource is not found
+   */
+  @Public
+  @Evolving
+  public abstract void setResourceInformation(String resource,
+      ResourceInformation resourceInformation) throws ResourceNotFoundException;
+
+  /**
+   * Set the value of a resource in the ResourceInformation object. The unit of
+   * the value is assumed to be the one in the ResourceInformation object.
+   *
+   * @param resource the resource for which the value is provided.
+   * @param value    the value to set
+   * @throws ResourceNotFoundException if the resource is not found
+   */
+  @Public
+  @Evolving
+  public abstract void setResourceValue(String resource, Long value)
+      throws ResourceNotFoundException;
+
+    for (Map.Entry<String, ResourceInformation> entry : getResources()
+        .entrySet()) {
+      if (entry.getKey().equals(ResourceInformation.MEMORY.getName()) || entry
+          .getKey().equals(ResourceInformation.VCORES.getName())) {
+        continue;
+      }
+      result = prime * result + entry.getValue().hashCode();
+    }
-    if (this == obj)
+    if (this == obj) {
-    if (obj == null)
-      return false;
-    if (!(obj instanceof Resource))
-      return false;
-    Resource other = (Resource) obj;
-    if (getMemorySize() != other.getMemorySize() ||
-        getVirtualCores() != other.getVirtualCores()) {
+    }
+    if (obj == null) {
-    return true;
+    if (!(obj instanceof Resource)) {
+      return false;
+    }
+    Resource other = (Resource) obj;
+    if (getMemorySize() != other.getMemorySize() || getVirtualCores() != other
+        .getVirtualCores()) {
+      return false;
+    }
+    return this.getResources().equals(other.getResources());
-    return "<memory:" + getMemorySize() + ", vCores:" + getVirtualCores() + ">";
+    StringBuilder sb = new StringBuilder();
+    sb.append("<memory:").append(getMemorySize()).append(", vCores:")
+        .append(getVirtualCores());
+    for (Map.Entry<String, ResourceInformation> entry : getResources()
+        .entrySet()) {
+      if (entry.getKey().equals(ResourceInformation.MEMORY.getName())
+          && entry.getValue().getUnits()
+          .equals(ResourceInformation.MEMORY_MB.getUnits())) {
+        continue;
+      }
+      if (entry.getKey().equals(ResourceInformation.VCORES.getName())
+          && entry.getValue().getUnits().equals("")) {
+        continue;
+      }
+      sb.append(", ").append(entry.getKey()).append(": ")
+          .append(entry.getValue().getValue())
+          .append(entry.getValue().getUnits());
+    }
+    sb.append(">");
+    return sb.toString();
+  }
+
+  @Override
+  public int compareTo(Resource other) {
+    Map<String, ResourceInformation> thisResources, otherResources;
+    thisResources = this.getResources();
+    otherResources = other.getResources();
+    long diff = thisResources.size() - otherResources.size();
+    if (diff == 0) {
+      if (thisResources.keySet().equals(otherResources.keySet())) {
+        diff = this.getMemorySize() - other.getMemorySize();
+        if (diff == 0) {
+          diff = this.getVirtualCores() - other.getVirtualCores();
+        }
+        if (diff == 0) {
+          for (Map.Entry<String, ResourceInformation> entry : thisResources
+              .entrySet()) {
+            diff =
+                entry.getValue().compareTo(otherResources.get(entry.getKey()));
+            if (diff != 0) {
+              break;
+            }
+          }
+        }
+      }
+    }
+    return Long.compare(diff, 0);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS78 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS78 INS78 INS83 INS83 INS74 INS42 INS29 INS78 INS78 INS83 INS83 INS43 INS42 INS44 INS43 INS29 INS78 INS78 INS83 INS83 INS43 INS42 INS44 INS43 INS29 INS78 INS78 INS83 INS83 INS39 INS42 INS44 INS29 INS78 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS29 INS78 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS78 INS83 INS39 INS42 INS44 INS8 UPD66 UPD66 UPD66 INS42 INS42 INS42 INS74 INS42 INS60 INS21 INS41 INS65 INS65 INS42 INS42 INS43 INS43 INS43 INS65 INS65 INS65 INS65 INS42 INS42 INS42 INS43 INS42 INS42 INS65 INS65 INS65 INS65 INS42 INS42 INS42 INS43 INS42 INS42 INS65 INS65 INS42 INS42 INS74 INS42 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS70 INS60 INS21 INS70 INS21 INS41 INS42 INS43 INS42 INS60 INS21 INS21 INS60 INS25 INS41 INS43 INS43 INS43 INS43 INS59 INS32 INS42 UPD66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS42 INS42 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS43 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS44 INS32 INS8 INS8 INS8 INS8 INS32 INS43 INS59 INS32 INS44 INS32 INS8 INS32 INS32 INS42 INS74 INS59 INS59 INS7 INS7 INS39 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS25 INS21 MOV41 MOV41 MOV41 INS32 INS42 INS32 INS42 INS42 INS14 INS32 INS42 MOV32 INS74 INS42 INS32 INS42 INS25 INS25 INS21 INS42 INS42 INS45 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS34 INS25 INS42 INS42 INS42 INS34 INS42 INS42 INS57 INS43 INS43 INS43 INS42 INS27 INS8 INS7 INS52 INS42 INS42 INS42 INS43 INS32 INS42 INS45 INS43 INS43 INS43 INS42 INS27 INS8 INS27 INS8 INS32 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS32 INS32 INS8 INS43 INS40 INS42 INS42 INS32 INS32 INS18 INS42 INS27 INS42 INS32 INS42 MOV32 INS40 INS42 INS42 INS32 INS32 INS18 INS32 INS32 INS18 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS21 INS25 INS25 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS27 INS32 INS42 INS42 INS45 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS45 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS27 INS8 INS27 INS8 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS34 INS21 INS42 INS34 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS7 INS44 INS32 INS8 INS42 INS42 INS45 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS27 INS74 INS42 INS42 INS42 INS21 INS25 INS32 INS32 INS43 INS43 INS43 INS7 INS27 INS8 INS52 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS34 INS10 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL9 DEL45 DEL45 DEL45 DEL27 DEL41