HDFS-8630. WebHDFS : Support get/set/unset StoragePolicy. Contributed by Surendra Singh Lilhore.

+import org.apache.hadoop.hdfs.protocol.BlockStoragePolicy;
+import java.util.Arrays;
+import java.util.Collection;
+  public static Collection<BlockStoragePolicy> getStoragePolicies(
+      Map<?, ?> json) {
+    Map<?, ?> policiesJson = (Map<?, ?>) json.get("BlockStoragePolicies");
+    if (policiesJson != null) {
+      List<?> objs = (List<?>) policiesJson.get(BlockStoragePolicy.class
+          .getSimpleName());
+      if (objs != null) {
+        BlockStoragePolicy[] storagePolicies = new BlockStoragePolicy[objs
+            .size()];
+        for (int i = 0; i < objs.size(); i++) {
+          final Map<?, ?> m = (Map<?, ?>) objs.get(i);
+          BlockStoragePolicy blockStoragePolicy = toBlockStoragePolicy(m);
+          storagePolicies[i] = blockStoragePolicy;
+        }
+        return Arrays.asList(storagePolicies);
+      }
+    }
+    return new ArrayList<BlockStoragePolicy>(0);
+  }
+
+  public static BlockStoragePolicy toBlockStoragePolicy(Map<?, ?> m) {
+    byte id = ((Number) m.get("id")).byteValue();
+    String name = (String) m.get("name");
+    StorageType[] storageTypes = toStorageTypes((List<?>) m
+        .get("storageTypes"));
+    StorageType[] creationFallbacks = toStorageTypes((List<?>) m
+        .get("creationFallbacks"));
+    StorageType[] replicationFallbacks = toStorageTypes((List<?>) m
+        .get("replicationFallbacks"));
+    Boolean copyOnCreateFile = (Boolean) m.get("copyOnCreateFile");
+    return new BlockStoragePolicy(id, name, storageTypes, creationFallbacks,
+        replicationFallbacks, copyOnCreateFile.booleanValue());
+  }
+
+  private static StorageType[] toStorageTypes(List<?> list) {
+    if (list == null) {
+      return null;
+    } else {
+      StorageType[] storageTypes = new StorageType[list.size()];
+      for (int i = 0; i < list.size(); i++) {
+        storageTypes[i] = StorageType.parseStorageType((String) list.get(i));
+      }
+      return storageTypes;
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS5 INS42 INS44 INS8 INS43 INS43 INS74 INS42 INS60 INS25 INS41 INS42 INS74 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS41 INS43 INS85 INS74 INS42 INS25 INS42 INS42 INS43 INS76 INS76 INS74 INS59 INS27 INS8 INS14 INS43 INS76 INS76 INS39 INS59 INS43 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS43 INS59 INS14 INS42 INS43 INS76 INS27 INS8 INS8 INS42 INS43 INS76 INS76 INS42 INS11 INS42 INS33 INS60 INS25 INS74 INS34 INS42 INS42 INS32 INS42 INS42 INS11 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS11 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS41 INS60 INS24 INS41 INS42 INS74 INS32 INS74 INS59 INS27 INS8 INS43 INS43 INS36 INS42 INS43 INS32 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS43 INS32 INS42 INS42 INS42 INS33 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS76 INS76 INS42 INS42 INS45 INS43 INS76 INS42 INS11 INS42 INS33 INS60 INS24 INS41 INS42 INS42 INS11 INS42 INS42 INS42 INS45 INS74 INS32 INS74 INS32 INS74 INS32 INS42 INS42 INS42 INS45 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS32 INS42 INS21 INS42 INS42 INS74 INS32 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS43 INS32 INS43 INS76 INS42 INS42 INS45 INS43 INS76 INS42 INS42 INS45 INS43 INS76 INS42 INS42 INS45 INS42 INS5 INS32 INS42 INS34 INS42 INS42 INS7 INS43 INS76 INS42 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS2 INS32 INS42 INS57 INS42 INS42 INS5 INS32 INS42 INS34 INS42 INS42 INS83 INS74 INS59 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS43 INS85 INS42 INS42 INS43 INS76 INS76 INS42 INS11 INS42 INS42 INS32 INS2 INS42 INS43 INS32 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS76 INS76 INS42 INS42 INS42 INS42