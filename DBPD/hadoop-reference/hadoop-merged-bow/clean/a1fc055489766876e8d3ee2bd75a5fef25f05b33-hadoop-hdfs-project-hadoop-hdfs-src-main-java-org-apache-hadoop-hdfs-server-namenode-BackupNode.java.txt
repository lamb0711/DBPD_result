HDFS-1623. High Availability Framework for HDFS NN. Contributed by Todd Lipcon, Aaron T. Myers, Eli Collins, Uma Maheswara Rao G, Bikas Saha, Suresh Srinivas, Jitendra Nath Pandey, Hari Mankude, Brandon Li, Sanjay Radia, Mingjie Lai, and Gregory Chanan


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296534 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.NameNodeProxies;
-import org.apache.hadoop.hdfs.protocolPB.NamenodeProtocolTranslatorPB;
-import org.apache.hadoop.io.IOUtils;
+import org.apache.hadoop.ipc.StandbyException;
+import org.apache.hadoop.ipc.RPC;
-  NamenodeProtocolTranslatorPB namenode;
+  NamenodeProtocol namenode;
-  protected InetSocketAddress getRpcServerAddress(Configuration conf) throws IOException {
+  protected InetSocketAddress getRpcServerAddress(Configuration conf) {
-  protected InetSocketAddress getServiceRpcServerAddress(Configuration conf) throws IOException {
+  protected InetSocketAddress getServiceRpcServerAddress(Configuration conf) {
+
-      IOUtils.cleanup(LOG, namenode);
+      RPC.stopProxy(namenode);
+
+    // Abort current log segment - otherwise the NN shutdown code
+    // will close it gracefully, which is incorrect.
+    getFSImage().getEditLog().abortCurrentLogSegment();
+
-  
-    /////////////////////////////////////////////////////
-    // NamenodeProtocol implementation for backup node.
-    /////////////////////////////////////////////////////
-    @Override // NamenodeProtocol
-    public BlocksWithLocations getBlocks(DatanodeInfo datanode, long size)
-    throws IOException {
-      throw new UnsupportedActionException("getBlocks");
-    }
-  
-    // Only active name-node can register other nodes.
-    @Override // NamenodeProtocol
-    public NamenodeRegistration register(NamenodeRegistration registration
-    ) throws IOException {
-      throw new UnsupportedActionException("register");
-    }
-  
-    @Override // NamenodeProtocol
-    public NamenodeCommand startCheckpoint(NamenodeRegistration registration)
-    throws IOException {
-      throw new UnsupportedActionException("startCheckpoint");
-    }
-  
-    @Override // NamenodeProtocol
-    public void endCheckpoint(NamenodeRegistration registration,
-                              CheckpointSignature sig) throws IOException {
-      throw new UnsupportedActionException("endCheckpoint");
-    }  
-  
+
-  
+    @Override
+    public void startLogSegment(NamenodeRegistration registration, long txid)
+        throws IOException {
+      namesystem.checkOperation(OperationCategory.JOURNAL);
+      verifyRequest(registration);
+      
+      getBNImage().namenodeStartedLogSegment(txid);
+    }
+    
+      namesystem.checkOperation(OperationCategory.JOURNAL);
-            + nnReg.getAddress() + " expecting " + clientRpcAddress);
+            + nnReg.getAddress() + " expecting " + nnRpcAddress);
-  
-    @Override
-    public void startLogSegment(NamenodeRegistration registration, long txid)
-        throws IOException {
-      verifyRequest(registration);
-    
-      getBNImage().namenodeStartedLogSegment(txid);
-    }
-    
+
-    this.namenode = new NamenodeProtocolTranslatorPB(nnAddress, conf,
-        UserGroupInformation.getCurrentUser());
+    this.namenode = NameNodeProxies.createNonHAProxy(conf, nnAddress,
+        NamenodeProtocol.class, UserGroupInformation.getCurrentUser(),
+        true).getProxy();
+  protected NameNodeHAContext createHAContext() {
+    return new BNHAContext();
+  }
+  
+  private class BNHAContext extends NameNodeHAContext {
+    @Override // NameNode
+    public void checkOperation(OperationCategory op)
+        throws StandbyException {
+      if (op == OperationCategory.UNCHECKED ||
+          op == OperationCategory.CHECKPOINT) {
+        return;
+      }
+      if (OperationCategory.JOURNAL != op &&
+          !(OperationCategory.READ == op && allowStaleStandbyReads)) {
+        String msg = "Operation category " + op
+            + " is not supported at the BackupNode";
+        throw new StandbyException(msg);
+      }
+    }
+  }
+  
+  @Override

MOV26 INS26 UPD40 INS40 UPD40 MOV31 INS31 INS55 UPD43 MOV78 INS83 INS43 INS42 INS8 INS83 INS42 INS43 INS31 UPD42 INS21 INS42 INS41 INS42 MOV78 INS83 INS39 INS42 INS44 INS43 INS8 INS32 INS21 INS21 INS14 INS43 INS42 INS42 INS25 INS25 INS32 INS42 INS32 INS32 INS32 INS43 INS42 INS27 INS8 INS27 INS8 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS42 INS42 INS27 INS27 INS41 INS27 INS38 INS60 INS53 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS57 MOV32 INS9 INS42 INS40 INS42 INS40 INS40 INS42 INS36 INS43 INS59 INS14 UPD42 INS43 INS27 INS42 INS42 INS27 INS43 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS42 INS40 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL14