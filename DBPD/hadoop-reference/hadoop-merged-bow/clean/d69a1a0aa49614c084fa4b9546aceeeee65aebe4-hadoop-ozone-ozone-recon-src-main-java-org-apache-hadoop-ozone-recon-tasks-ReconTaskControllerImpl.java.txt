HDDS-1105 : Add mechanism in Recon to obtain DB snapshot 'delta' updates from Ozone Manager (#1259)


+import java.util.Set;
-import org.apache.hadoop.ozone.recon.recovery.ReconOMMetadataManager;
+import org.apache.hadoop.ozone.om.OMMetadataManager;
-  private final ReconOMMetadataManager omMetadataManager;
-                                 ReconOMMetadataManager omMetadataManager,
-                                 Configuration sqlConfiguration) {
-    this.omMetadataManager = omMetadataManager;
+                                 Configuration sqlConfiguration,
+                                 Set<ReconDBUpdateTask> tasks) {
+    for (ReconDBUpdateTask task : tasks) {
+      registerTask(task);
+    }
-    reconTaskStatusDao.insert(reconTaskStatusRecord);
+    if (!reconTaskStatusDao.existsById(taskName)) {
+      reconTaskStatusDao.insert(reconTaskStatusRecord);
+    }
-  public void consumeOMEvents(OMUpdateEventBatch events)
+  public void consumeOMEvents(OMUpdateEventBatch events,
+                              OMMetadataManager omMetadataManager)
+      throws InterruptedException {
+    taskSemaphore.acquire();
+
+    try {
+      if (!events.isEmpty()) {
+        Collection<Callable<Pair>> tasks = new ArrayList<>();
+        for (Map.Entry<String, ReconDBUpdateTask> taskEntry :
+            reconDBUpdateTasks.entrySet()) {
+          ReconDBUpdateTask task = taskEntry.getValue();
+          Collection<String> tables = task.getTaskTables();
+          tasks.add(() -> task.process(events.filter(tables)));
+        }
+
+        List<Future<Pair>> results = executorService.invokeAll(tasks);
+        List<String> failedTasks = processTaskResults(results, events);
+
+        // Retry
+        List<String> retryFailedTasks = new ArrayList<>();
+        if (!failedTasks.isEmpty()) {
+          tasks.clear();
+          for (String taskName : failedTasks) {
+            ReconDBUpdateTask task = reconDBUpdateTasks.get(taskName);
+            Collection<String> tables = task.getTaskTables();
+            tasks.add(() -> task.process(events.filter(tables)));
+          }
+          results = executorService.invokeAll(tasks);
+          retryFailedTasks = processTaskResults(results, events);
+        }
+
+        // Reprocess the failed tasks.
+        // TODO Move to a separate task queue since reprocess may be a heavy
+        // operation for large OM DB instances
+        if (!retryFailedTasks.isEmpty()) {
+          tasks.clear();
+          for (String taskName : failedTasks) {
+            ReconDBUpdateTask task = reconDBUpdateTasks.get(taskName);
+            tasks.add(() -> task.reprocess(omMetadataManager));
+          }
+          results = executorService.invokeAll(tasks);
+          List<String> reprocessFailedTasks =
+              processTaskResults(results, events);
+          for (String taskName : reprocessFailedTasks) {
+            LOG.info("Reprocess step failed for task : " + taskName);
+            if (taskFailureCounter.get(taskName).incrementAndGet() >
+                TASK_FAILURE_THRESHOLD) {
+              LOG.info("Blacklisting Task since it failed retry and " +
+                  "reprocess more than " + TASK_FAILURE_THRESHOLD + " times.");
+              reconDBUpdateTasks.remove(taskName);
+            }
+          }
+        }
+      }
+    } catch (ExecutionException e) {
+      LOG.error("Unexpected error : ", e);
+    } finally {
+      taskSemaphore.release();
+    }
+  }
+
+  @Override
+  public void reInitializeTasks(OMMetadataManager omMetadataManager)
-        tasks.add(() -> task.process(events));
+        tasks.add(() -> task.reprocess(omMetadataManager));
-      List<String> failedTasks = processTaskResults(results, events);
-
-      //Retry
-      List<String> retryFailedTasks = new ArrayList<>();
-      if (!failedTasks.isEmpty()) {
-        tasks.clear();
-        for (String taskName : failedTasks) {
-          ReconDBUpdateTask task = reconDBUpdateTasks.get(taskName);
-          tasks.add(() -> task.process(events));
-        }
-        results = executorService.invokeAll(tasks);
-        retryFailedTasks = processTaskResults(results, events);
-      }
-
-      //Reprocess
-      //TODO Move to a separate task queue since reprocess may be a heavy
-      //operation for large OM DB instances
-      if (!retryFailedTasks.isEmpty()) {
-        tasks.clear();
-        for (String taskName : failedTasks) {
-          ReconDBUpdateTask task = reconDBUpdateTasks.get(taskName);
-          tasks.add(() -> task.reprocess(omMetadataManager));
-        }
-        results = executorService.invokeAll(tasks);
-        List<String> reprocessFailedTasks = processTaskResults(results, events);
-        for (String taskName : reprocessFailedTasks) {
-          LOG.info("Reprocess step failed for task : " + taskName);
-          if (taskFailureCounter.get(taskName).incrementAndGet() >
-              TASK_FAILURE_THRESHOLD) {
-            LOG.info("Blacklisting Task since it failed retry and " +
-                "reprocess more than " + TASK_FAILURE_THRESHOLD + " times.");
-            reconDBUpdateTasks.remove(taskName);
-          }
+      for (Future<Pair> f : results) {
+        String taskName = f.get().getLeft().toString();
+        if (!(Boolean)f.get().getRight()) {
+          LOG.info("Init failed for task : " + taskName);
-   * @param eventInfo contains the new sequence number and timestamp.
+   * @param lastSequenceNumber contains the new sequence number.
-      String taskName, OMDBUpdateEvent.EventInfo eventInfo) {
+      String taskName, long lastSequenceNumber) {
-        eventInfo.getEventTimestampMillis(), eventInfo.getSequenceNumber());
+        System.currentTimeMillis(), lastSequenceNumber);
+  @Override
+  public ReconTaskStatusDao getReconTaskStatusDao() {
+    return reconTaskStatusDao;
+  }
+
+  @Override
+  public void stop() {
+    this.executorService.shutdownNow();
+  }
+
-        storeLastCompletedTransaction(taskName, events.getLastEventInfo());
+        storeLastCompletedTransaction(taskName, events.getLastSequenceNumber());

INS26 INS40 UPD40 MOV44 INS31 INS31 INS31 INS44 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS74 UPD42 INS70 INS25 INS43 INS42 INS42 INS43 INS42 INS42 INS21 INS54 INS39 UPD42 INS42 INS42 INS41 INS42 INS21 INS43 INS43 INS44 INS42 INS8 INS38 INS8 INS42 INS8 UPD42 MOV42 INS32 INS8 INS12 INS8 UPD42 UPD66 MOV43 INS42 INS32 INS42 UPD42 MOV42 INS43 INS42 MOV21 INS32 MOV21 INS25 INS42 INS42 INS60 INS70 INS60 INS70 INS44 INS8 INS21 INS22 INS42 INS42 INS32 INS42 INS42 INS42 INS38 MOV8 INS74 INS59 INS44 INS32 INS8 INS74 INS59 INS44 INS42 INS8 INS43 INS42 INS21 INS32 MOV43 INS42 INS52 INS42 INS42 INS42 INS32 INS43 INS74 INS42 INS14 INS74 INS42 INS42 INS42 INS60 INS21 INS43 INS74 INS42 INS32 INS74 INS42 INS60 INS25 INS42 INS32 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS43 INS43 INS74 INS43 INS43 INS43 INS43 INS59 INS32 INS42 INS43 INS43 INS42 INS42 INS42 INS43 INS43 INS43 INS59 INS38 INS8 INS42 INS42 INS45 INS42 INS60 INS42 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS11 INS21 INS74 INS59 INS42 INS42 INS42 INS32 INS32 INS42 INS43 INS32 INS32 UPD42 INS43 INS43 INS42 INS32 INS60 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS74 INS59 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS43 INS43 INS42 INS32 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV42 INS42 INS42 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL43 DEL52 DEL42 DEL22 DEL42 DEL7 DEL40 DEL43 DEL42 DEL42 DEL32