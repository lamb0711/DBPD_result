HDFS-12553. Add nameServiceId to QJournalProtocol. Contributed by Bharat Viswanadham

-  public boolean isFormatted(String journalId) throws IOException {
+  public boolean isFormatted(String journalId,
+                             String nameServiceId) throws IOException {
-      IsFormattedRequestProto req = IsFormattedRequestProto.newBuilder()
-          .setJid(convertJournalId(journalId))
-          .build();
+      IsFormattedRequestProto.Builder req = IsFormattedRequestProto.newBuilder()
+          .setJid(convertJournalId(journalId));
+      if (nameServiceId != null) {
+        req.setNameServiceId(nameServiceId);
+      }
+
-          NULL_CONTROLLER, req);
+          NULL_CONTROLLER, req.build());
-  public GetJournalStateResponseProto getJournalState(String jid)
+  public GetJournalStateResponseProto getJournalState(String jid,
+                                                      String nameServiceId)
-      GetJournalStateRequestProto req = GetJournalStateRequestProto.newBuilder()
-          .setJid(convertJournalId(jid))
-          .build();
-      return rpcProxy.getJournalState(NULL_CONTROLLER, req);
+      GetJournalStateRequestProto.Builder req = GetJournalStateRequestProto
+          .newBuilder()
+          .setJid(convertJournalId(jid));
+      if (nameServiceId != null) {
+        req.setNameServiceId(nameServiceId);
+      }
+      return rpcProxy.getJournalState(NULL_CONTROLLER, req.build());
-  public void format(String jid, NamespaceInfo nsInfo) throws IOException {
+  public void format(String jid,
+                     String nameServiceId,
+                     NamespaceInfo nsInfo) throws IOException {
-      FormatRequestProto req = FormatRequestProto.newBuilder()
+      FormatRequestProto.Builder req = FormatRequestProto.newBuilder()
-          .setNsInfo(PBHelper.convert(nsInfo))
-          .build();
-      rpcProxy.format(NULL_CONTROLLER, req);
+          .setNsInfo(PBHelper.convert(nsInfo));
+      if(nameServiceId != null) {
+        req.setNameServiceId(nameServiceId);
+      }
+
+      rpcProxy.format(NULL_CONTROLLER, req.build());
-  public NewEpochResponseProto newEpoch(String jid, NamespaceInfo nsInfo,
-      long epoch) throws IOException {
+  public NewEpochResponseProto newEpoch(String jid,
+                                        String nameServiceId,
+                                        NamespaceInfo nsInfo,
+                                        long epoch) throws IOException {
-      NewEpochRequestProto req = NewEpochRequestProto.newBuilder()
-        .setJid(convertJournalId(jid))
-        .setNsInfo(PBHelper.convert(nsInfo))
-        .setEpoch(epoch)
-        .build();
-      return rpcProxy.newEpoch(NULL_CONTROLLER, req);
+      NewEpochRequestProto.Builder req = NewEpochRequestProto.newBuilder()
+          .setJid(convertJournalId(jid))
+          .setNsInfo(PBHelper.convert(nsInfo))
+          .setEpoch(epoch);
+
+      if(nameServiceId != null) {
+        req.setNameServiceId(nameServiceId);
+      }
+
+      return rpcProxy.newEpoch(NULL_CONTROLLER, req.build());
+    if(reqInfo.getNameServiceId() != null) {
+      builder.setNameServiceId(reqInfo.getNameServiceId());
+    }
-  public GetEditLogManifestResponseProto getEditLogManifest(String jid,
-      long sinceTxId, boolean inProgressOk)
-      throws IOException {
+  public GetEditLogManifestResponseProto getEditLogManifest(
+      String jid, String nameServiceId,
+       long sinceTxId, boolean inProgressOk) throws IOException {
+      GetEditLogManifestRequestProto.Builder req;
+      req = GetEditLogManifestRequestProto.newBuilder()
+          .setJid(convertJournalId(jid))
+          .setSinceTxId(sinceTxId)
+          .setInProgressOk(inProgressOk);
+      if (nameServiceId !=null) {
+        req.setNameServiceId(nameServiceId);
+      }
-          GetEditLogManifestRequestProto.newBuilder()
-            .setJid(convertJournalId(jid))
-            .setSinceTxId(sinceTxId)
-            .setInProgressOk(inProgressOk)
-            .build());
+          req.build()
+          );
-      rpcProxy.doPreUpgrade(NULL_CONTROLLER,
-          DoPreUpgradeRequestProto.newBuilder()
-            .setJid(convertJournalId(jid))
-            .build());
+      DoPreUpgradeRequestProto.Builder req;
+      req = DoPreUpgradeRequestProto.newBuilder()
+          .setJid(convertJournalId(jid));
+      rpcProxy.doPreUpgrade(NULL_CONTROLLER, req.build());
-  public void doFinalize(String jid) throws IOException {
+  public void doFinalize(String jid, String nameServiceId) throws IOException {
-      rpcProxy.doFinalize(NULL_CONTROLLER,
-          DoFinalizeRequestProto.newBuilder()
-            .setJid(convertJournalId(jid))
-            .build());
+      DoFinalizeRequestProto.Builder req = DoFinalizeRequestProto
+          .newBuilder()
+          .setJid(convertJournalId(jid));
+      if (nameServiceId != null) {
+        req.setNameServiceId(nameServiceId);
+      }
+      rpcProxy.doFinalize(NULL_CONTROLLER, req.build());
-  public Boolean canRollBack(String journalId, StorageInfo storage,
-      StorageInfo prevStorage, int targetLayoutVersion) throws IOException {
+  public Boolean canRollBack(String journalId,
+                             String nameServiceId,
+                             StorageInfo storage,
+                             StorageInfo prevStorage,
+                             int targetLayoutVersion) throws IOException {
+      CanRollBackRequestProto.Builder req = CanRollBackRequestProto.newBuilder()
+          .setJid(convertJournalId(journalId))
+          .setStorage(PBHelper.convert(storage))
+          .setPrevStorage(PBHelper.convert(prevStorage))
+          .setTargetLayoutVersion(targetLayoutVersion);
+      if (nameServiceId != null) {
+        req.setNameServiceId(nameServiceId);
+      }
-          NULL_CONTROLLER,
-          CanRollBackRequestProto.newBuilder()
-            .setJid(convertJournalId(journalId))
-            .setStorage(PBHelper.convert(storage))
-            .setPrevStorage(PBHelper.convert(prevStorage))
-            .setTargetLayoutVersion(targetLayoutVersion)
-            .build());
+          NULL_CONTROLLER, req.build());
-  public void doRollback(String journalId) throws IOException {
+  public void doRollback(String journalId,
+                         String nameServiceId) throws IOException {
-      rpcProxy.doRollback(NULL_CONTROLLER,
-          DoRollbackRequestProto.newBuilder()
-            .setJid(convertJournalId(journalId))
-            .build());
+      DoRollbackRequestProto.Builder req = DoRollbackRequestProto.newBuilder()
+          .setJid(convertJournalId(journalId));
+
+      if (nameServiceId != null) {
+        req.setNameserviceId(nameServiceId);
+      }
+      rpcProxy.doRollback(NULL_CONTROLLER, req.build());
-  public void discardSegments(String journalId, long startTxId)
+  public void discardSegments(String journalId,
+                              String nameServiceId,
+                              long startTxId)
-      rpcProxy.discardSegments(NULL_CONTROLLER,
-          DiscardSegmentsRequestProto.newBuilder()
-            .setJid(convertJournalId(journalId)).setStartTxId(startTxId)
-            .build());
+      DiscardSegmentsRequestProto.Builder req = DiscardSegmentsRequestProto
+          .newBuilder()
+          .setJid(convertJournalId(journalId)).setStartTxId(startTxId);
+
+      if (nameServiceId != null) {
+        req.setNameServiceId(nameServiceId);
+      }
+      rpcProxy.discardSegments(NULL_CONTROLLER, req.build());
-  public Long getJournalCTime(String journalId) throws IOException {
+  public Long getJournalCTime(String journalId,
+                              String nameServiceId) throws IOException {
+
+      GetJournalCTimeRequestProto.Builder req = GetJournalCTimeRequestProto
+          .newBuilder()
+          .setJid(convertJournalId(journalId));
+      if(nameServiceId !=null) {
+        req.setNameServiceId(nameServiceId);
+      }
-          NULL_CONTROLLER,
-          GetJournalCTimeRequestProto.newBuilder()
-            .setJid(convertJournalId(journalId))
-            .build());
+          NULL_CONTROLLER, req.build());

INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS25 INS25 INS25 INS32 INS33 INS21 INS60 INS21 INS25 INS60 INS21 INS60 INS25 INS25 INS60 INS60 INS25 INS60 INS25 INS25 INS60 UPD43 INS27 INS8 UPD43 INS27 INS8 UPD43 INS27 INS8 UPD43 INS27 INS8 INS42 INS42 INS32 INS43 INS59 INS7 INS27 INS8 INS43 INS59 INS7 INS32 INS43 INS59 INS27 INS8 INS43 INS27 INS8 MOV43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS27 INS8 MOV43 INS59 INS40 MOV32 INS42 INS33 INS21 INS40 MOV32 INS42 INS33 INS21 INS32 INS40 MOV32 INS42 INS33 INS21 INS32 INS40 MOV32 INS42 INS33 INS21 INS32 INS42 INS42 INS32 INS40 INS42 INS42 MOV32 INS42 INS33 INS21 INS40 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS40 INS42 MOV32 INS42 INS33 INS21 INS40 UPD42 MOV32 INS42 INS33 INS21 INS42 INS32 INS40 INS42 MOV32 INS42 INS33 INS21 INS40 INS42 MOV32 INS42 INS33 INS21 INS40 UPD42 MOV32 INS42 INS33 INS21 INS42 INS32 INS32 INS32 INS32 MOV42 INS42 INS32 MOV42 INS42 INS32 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32