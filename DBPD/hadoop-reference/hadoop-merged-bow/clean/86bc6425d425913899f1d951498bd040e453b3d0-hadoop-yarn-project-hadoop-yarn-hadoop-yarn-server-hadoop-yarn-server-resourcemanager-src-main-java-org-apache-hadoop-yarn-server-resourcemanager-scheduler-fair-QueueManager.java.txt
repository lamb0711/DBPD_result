YARN-8191. Fair scheduler: queue deletion without RM restart. (Gergo Repas via Haibo Chen)

+import java.util.HashSet;
+import java.util.Optional;
+import com.google.common.collect.ImmutableSet;
+
+  private final class IncompatibleQueueRemovalTask {
+
+    private final String queueToCreate;
+    private final FSQueueType queueType;
+
+    private IncompatibleQueueRemovalTask(String queueToCreate,
+        FSQueueType queueType) {
+      this.queueToCreate = queueToCreate;
+      this.queueType = queueType;
+    }
+
+    private void execute() {
+      Boolean removed =
+          removeEmptyIncompatibleQueues(queueToCreate, queueType).orElse(null);
+      if (Boolean.TRUE.equals(removed)) {
+        FSQueue queue = getQueue(queueToCreate, true, queueType, false);
+        if (queue != null &&
+            // if queueToCreate is present in the allocation config, set it
+            // to static
+            scheduler.allocConf.configuredQueues.values().stream()
+            .anyMatch(s -> s.contains(queueToCreate))) {
+          queue.setDynamic(false);
+        }
+      }
+      if (!Boolean.FALSE.equals(removed)) {
+        incompatibleQueuesPendingRemoval.remove(this);
+      }
+    }
+  }
+
+  private Set<IncompatibleQueueRemovalTask> incompatibleQueuesPendingRemoval =
+      new HashSet<>();
+    rootQueue.setDynamic(false);
-    getLeafQueue(YarnConfiguration.DEFAULT_QUEUE_NAME, true);
+    FSLeafQueue defaultQueue =
+        getLeafQueue(YarnConfiguration.DEFAULT_QUEUE_NAME, true);
+    defaultQueue.setDynamic(false);
-    return removeEmptyIncompatibleQueues(name, FSQueueType.PARENT);
+    return !Boolean.FALSE.equals(
+        removeEmptyIncompatibleQueues(name, FSQueueType.PARENT).orElse(null));
-   * @return true if we can create queueToCreate or it already exists.
+   * @return Optional.of(Boolean.TRUE)  if there was an incompatible queue that
+   *                                    has been removed,
+   *         Optional.of(Boolean.FALSE) if there was an incompatible queue that
+   *                                    have not be removed,
+   *         Optional.empty()           if there is no incompatible queue.
-  private boolean removeEmptyIncompatibleQueues(String queueToCreate,
+  private Optional<Boolean> removeEmptyIncompatibleQueues(String queueToCreate,
-      return false;
+      return Optional.empty();
-          // if queue is already a leaf then return true
-          return true;
+          return Optional.empty();
-        return removeQueueIfEmpty(queue);
+        return Optional.of(removeQueueIfEmpty(queue));
-          return true;
+          return Optional.empty();
-        return removeQueueIfEmpty(queue);
+        return Optional.of(removeQueueIfEmpty(queue));
-        return removeQueueIfEmpty(prefixQueue);
+        return Optional.of(removeQueueIfEmpty(prefixQueue));
-    return true;
+    return Optional.empty();
+  }
+
+  /**
+   * Removes all empty dynamic queues (including empty dynamic parent queues).
+   */
+  public void removeEmptyDynamicQueues() {
+    synchronized (queues) {
+      Set<FSParentQueue> parentQueuesToCheck = new HashSet<>();
+      for (FSQueue queue : getQueues()) {
+        if (queue.isDynamic() && queue.getChildQueues().isEmpty()) {
+          boolean removed = removeQueueIfEmpty(queue);
+          if (removed && queue.getParent().isDynamic()) {
+            parentQueuesToCheck.add(queue.getParent());
+          }
+        }
+      }
+      while (!parentQueuesToCheck.isEmpty()) {
+        FSParentQueue queue = parentQueuesToCheck.iterator().next();
+        if (queue.getChildQueues().isEmpty()) {
+          removeQueue(queue);
+          if (queue.getParent().isDynamic()) {
+            parentQueuesToCheck.add(queue.getParent());
+          }
+        }
+        parentQueuesToCheck.remove(queue);
+      }
+    }
+  }
+
+  /**
+   * Re-checking incompatible queues that could not be removed earlier due to
+   * not being empty, and removing those that became empty.
+   */
+  public void removePendingIncompatibleQueues() {
+    synchronized (queues) {
+      for (IncompatibleQueueRemovalTask removalTask :
+          ImmutableSet.copyOf(incompatibleQueuesPendingRemoval)) {
+        removalTask.execute();
+      }
+    }
-          leafQueue.getNumNonRunnableApps() == 0;
+          leafQueue.getNumNonRunnableApps() == 0 &&
+          leafQueue.getNumAssignedApps() == 0;
-      for (String name : queueConf.getConfiguredQueues().get(
-              FSQueueType.LEAF)) {
-        if (removeEmptyIncompatibleQueues(name, FSQueueType.LEAF)) {
-          getLeafQueue(name, true, false);
-        }
-      }
+      ensureQueueExistsAndIsCompatibleAndIsStatic(queueConf, FSQueueType.LEAF);
+
-      for (String name : queueConf.getConfiguredQueues().get(
-          FSQueueType.PARENT)) {
-        if (removeEmptyIncompatibleQueues(name, FSQueueType.PARENT)) {
-          getParentQueue(name, true, false);
-        }
-      }
+      ensureQueueExistsAndIsCompatibleAndIsStatic(queueConf,
+          FSQueueType.PARENT);
+  private void ensureQueueExistsAndIsCompatibleAndIsStatic(
+      AllocationConfiguration queueConf, FSQueueType queueType) {
+    for (String name : queueConf.getConfiguredQueues().get(queueType)) {
+      Boolean removed =
+          removeEmptyIncompatibleQueues(name, queueType).orElse(null);
+      if (Boolean.FALSE.equals(removed)) {
+        incompatibleQueuesPendingRemoval.add(
+            new IncompatibleQueueRemovalTask(name, queueType));
+      } else {
+        FSQueue queue = getQueue(name, true, queueType, false);
+        if (queue != null) {
+          queue.setDynamic(false);
+        }
+      }
+    }
+  }
+
+  /**
+   * Setting a set of queues to dynamic.
+   * @param queueNames The names of the queues to be set to dynamic
+   */
+  protected void setQueuesToDynamic(Set<String> queueNames) {
+    synchronized (queues) {
+      for (String queueName : queueNames) {
+        queues.get(queueName).setDynamic(true);
+      }
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS55 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS83 INS74 INS59 MOV21 INS74 INS29 MOV83 MOV39 UPD42 MOV42 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS14 INS60 INS21 INS43 INS43 INS65 INS51 INS65 INS51 INS51 MOV21 MOV21 INS43 INS42 INS43 INS42 INS70 INS65 INS65 INS74 INS42 INS51 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS60 INS25 INS25 INS42 INS42 INS74 INS32 INS43 INS59 INS32 INS38 UPD66 INS66 INS66 INS66 INS66 INS42 INS42 INS32 INS66 MOV42 INS8 INS66 INS66 INS42 INS8 INS42 INS8 INS42 INS42 MOV44 MOV32 MOV8 INS66 INS42 INS66 INS43 INS43 INS42 INS8 INS42 INS42 INS7 INS7 INS43 INS59 INS32 INS8 INS38 INS8 INS43 INS42 INS42 INS9 INS42 INS42 MOV32 INS42 INS42 INS9 INS32 INS42 INS42 INS60 INS70 INS61 INS70 MOV25 INS21 INS21 INS42 INS60 INS42 INS42 INS70 INS22 INS42 INS22 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS60 INS25 INS32 INS21 INS42 INS40 INS42 INS32 INS32 INS74 INS59 MOV44 INS32 INS8 INS38 INS8 INS44 INS32 INS8 INS27 INS32 INS32 INS43 INS59 INS32 INS8 INS44 INS42 INS8 INS52 INS42 INS52 INS42 INS32 INS42 INS33 INS43 INS59 INS27 INS8 INS40 INS42 INS42 INS32 MOV32 INS42 INS33 INS42 INS42 INS43 INS43 INS42 INS14 UPD43 UPD42 INS42 INS25 INS32 INS60 INS25 INS21 INS43 INS42 INS42 INS42 INS42 INS21 MOV27 INS27 INS42 INS42 MOV40 INS42 INS42 INS40 INS42 INS42 INS32 INS40 INS42 INS42 INS21 INS60 INS25 INS43 INS42 MOV21 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS21 INS42 INS42 INS52 INS32 INS32 INS32 INS42 INS42 INS74 UPD42 INS27 INS8 INS42 INS42 INS43 INS59 INS32 INS8 INS32 INS42 INS32 INS32 INS34 INS32 INS42 INS33 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS9 INS42 INS9 INS42 INS33 INS32 INS42 INS86 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 MOV32 INS43 INS32 INS32 INS60 INS25 INS42 INS42 INS32 INS32 INS42 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS42 INS32 INS42 INS59 INS32 INS42 INS42 INS9 INS32 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS39 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS32 INS32 INS8 INS43 INS42 INS42 UPD42 MOV42 MOV42 MOV9 INS42 MOV9 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 MOV32 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS21 INS42 INS42 INS42 INS9 INS32 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL39 DEL9 DEL9 DEL9 DEL9 DEL40 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL9 DEL32 DEL70 DEL42 DEL42 DEL40 DEL32 DEL8 DEL25 DEL8 DEL70 DEL8 DEL51 DEL8 DEL31