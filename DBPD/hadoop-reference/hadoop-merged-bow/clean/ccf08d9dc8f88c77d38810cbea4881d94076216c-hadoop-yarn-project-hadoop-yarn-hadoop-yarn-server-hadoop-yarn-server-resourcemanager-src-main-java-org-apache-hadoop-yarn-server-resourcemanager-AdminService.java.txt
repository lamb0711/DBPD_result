Merge r1555021 through r1565516 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1565519 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.LocalConfigurationProvider;
+import org.apache.hadoop.yarn.conf.ConfigurationProvider;
+import org.apache.hadoop.yarn.conf.ConfigurationProviderFactory;
+import com.google.common.annotations.VisibleForTesting;
+  private ConfigurationProvider configurationProvider = null;
+
+    this.configurationProvider =
+        ConfigurationProviderFactory.getConfigurationProvider(conf);
+    configurationProvider.init(conf);
+
+    if (this.configurationProvider != null) {
+      configurationProvider.close();
+    }
-    UserGroupInformation user = checkAcls("refreshQueues");
+    String argName = "refreshQueues";
+    UserGroupInformation user = checkAcls(argName);
-      RMAuditLogger.logFailure(user.getShortUserName(), "refreshQueues",
+      RMAuditLogger.logFailure(user.getShortUserName(), argName,
+    RefreshQueuesResponse response =
+        recordFactory.newRecordInstance(RefreshQueuesResponse.class);
-      rmContext.getScheduler().reinitialize(getConfig(), this.rmContext);
-      RMAuditLogger.logSuccess(user.getShortUserName(), "refreshQueues", 
+      Configuration conf =
+          getConfiguration(YarnConfiguration.CS_CONFIGURATION_FILE);
+      rmContext.getScheduler().reinitialize(conf, this.rmContext);
+      RMAuditLogger.logSuccess(user.getShortUserName(), argName,
-      return recordFactory.newRecordInstance(RefreshQueuesResponse.class);
+      return response;
-      RMAuditLogger.logFailure(user.getShortUserName(), "refreshQueues",
+      RMAuditLogger.logFailure(user.getShortUserName(), argName,
-      throws YarnException, StandbyException {
-    UserGroupInformation user = checkAcls("refreshSuperUserGroupsConfiguration");
+      throws YarnException, IOException {
+    String argName = "refreshSuperUserGroupsConfiguration";
+    UserGroupInformation user = checkAcls(argName);
-    // TODO (YARN-1459): Revisit handling super-user-groups on Standby RM
-      RMAuditLogger.logFailure(user.getShortUserName(),
-          "refreshSuperUserGroupsConfiguration",
+      RMAuditLogger.logFailure(user.getShortUserName(), argName,
-    ProxyUsers.refreshSuperUserGroupsConfiguration(new Configuration());
+    Configuration conf =
+        getConfiguration(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);
+    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);
-        "refreshSuperUserGroupsConfiguration", "AdminService");
+        argName, "AdminService");
-      RefreshAdminAclsRequest request) throws YarnException {
-    UserGroupInformation user = checkAcls("refreshAdminAcls");
+      RefreshAdminAclsRequest request) throws YarnException, IOException {
+    String argName = "refreshAdminAcls";
+    UserGroupInformation user = checkAcls(argName);
-    Configuration conf = new Configuration();
+    if (!isRMActive()) {
+      RMAuditLogger.logFailure(user.getShortUserName(), argName,
+          adminAcl.toString(), "AdminService",
+          "ResourceManager is not active. Can not refresh user-groups.");
+      throwStandbyException();
+    }
+    Configuration conf =
+        getConfiguration(YarnConfiguration.YARN_SITE_XML_FILE);
-    RMAuditLogger.logSuccess(user.getShortUserName(), "refreshAdminAcls", 
+    RMAuditLogger.logSuccess(user.getShortUserName(), argName,
-      RefreshServiceAclsRequest request) throws YarnException {
-    Configuration conf = new Configuration();
-    if (!conf.getBoolean(
+      RefreshServiceAclsRequest request) throws YarnException, IOException {
+    if (!getConfig().getBoolean(
-    
-    PolicyProvider policyProvider = new RMPolicyProvider(); 
-    
-    refreshServiceAcls(conf, policyProvider);
-    if (isRMActive()) {
-      rmContext.getClientRMService().refreshServiceAcls(conf, policyProvider);
-      rmContext.getApplicationMasterService().refreshServiceAcls(
-          conf, policyProvider);
-      rmContext.getResourceTrackerService().refreshServiceAcls(
-          conf, policyProvider);
-    } else {
-      LOG.warn("ResourceManager is not active. Not refreshing ACLs for " +
-          "Clients, ApplicationMasters and NodeManagers");
+
+    String argName = "refreshServiceAcls";
+    if (!isRMActive()) {
+      RMAuditLogger.logFailure(UserGroupInformation.getCurrentUser()
+          .getShortUserName(), argName,
+          adminAcl.toString(), "AdminService",
+          "ResourceManager is not active. Can not refresh Service ACLs.");
+      throwStandbyException();
+
+    PolicyProvider policyProvider = new RMPolicyProvider(); 
+    Configuration conf =
+        getConfiguration(YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);
+
+    refreshServiceAcls(conf, policyProvider);
+    rmContext.getClientRMService().refreshServiceAcls(conf, policyProvider);
+    rmContext.getApplicationMasterService().refreshServiceAcls(
+        conf, policyProvider);
+    rmContext.getResourceTrackerService().refreshServiceAcls(
+        conf, policyProvider);
-  void refreshServiceAcls(Configuration configuration, 
+  synchronized void refreshServiceAcls(Configuration configuration,
-    this.server.refreshServiceAcl(configuration, policyProvider);
+    if (this.configurationProvider instanceof LocalConfigurationProvider) {
+      this.server.refreshServiceAcl(configuration, policyProvider);
+    } else {
+      this.server.refreshServiceAclWithConfigration(configuration,
+          policyProvider);
+    }
-  
+
+  private synchronized Configuration getConfiguration(String confFileName)
+      throws YarnException, IOException {
+    return this.configurationProvider.getConfiguration(confFileName);
+  }
+
+  @VisibleForTesting
+  public AccessControlList getAccessControlList() {
+    return this.adminAcl;
+  }
+
+  @VisibleForTesting
+  public Server getServer() {
+    return this.server;
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS43 INS59 UPD43 INS43 INS43 MOV60 MOV25 INS83 INS8 INS83 INS83 MOV43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS33 INS21 INS21 INS25 INS60 INS25 INS60 UPD42 INS60 INS60 INS42 INS60 INS25 INS42 INS60 MOV21 MOV21 MOV21 INS25 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS7 INS32 INS27 INS8 INS43 INS59 MOV38 MOV8 INS43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 INS38 INS8 MOV43 INS43 INS38 MOV43 INS59 INS62 MOV8 INS8 INS42 INS32 INS22 INS22 INS22 INS32 INS42 INS42 INS42 INS22 INS33 INS21 INS42 INS42 INS45 MOV21 INS42 INS42 MOV32 INS60 INS8 INS42 INS42 INS45 INS42 INS32 INS42 MOV32 INS42 INS42 INS42 INS45 INS32 INS21 INS21 INS32 INS32 INS42 INS42 UPD42 INS45 INS32 INS21 INS42 INS32 INS22 INS43 INS21 INS22 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 MOV43 INS59 INS42 MOV21 INS21 MOV53 INS42 INS42 INS40 INS42 INS42 INS32 INS32 INS42 INS40 INS42 INS42 MOV32 MOV42 INS32 INS42 INS40 INS52 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 UPD45 INS42 INS32 INS42 INS42 INS32 MOV32 UPD42 MOV42 INS42 INS42 MOV32 INS42 INS32 INS45 INS45 INS42 UPD42 INS42 INS32 INS42 INS32 INS45 INS45 INS42 INS22 INS42 INS42 INS42 INS42 INS40 INS42 INS42 MOV32 INS42 MOV32 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS52 INS42 INS42 UPD42 MOV42 INS42 DEL45 DEL45 DEL42 DEL42 DEL45 DEL45 DEL45 DEL32 DEL21 DEL8 DEL25 DEL45 DEL45 DEL45 DEL14 DEL45 DEL45 DEL14 DEL45 DEL42 DEL14 DEL32 DEL8 DEL45 DEL45 DEL27