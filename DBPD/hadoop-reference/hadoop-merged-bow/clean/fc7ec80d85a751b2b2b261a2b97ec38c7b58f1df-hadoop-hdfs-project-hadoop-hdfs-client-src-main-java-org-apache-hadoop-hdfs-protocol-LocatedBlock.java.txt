Merge branch 'HDFS-9806' into trunk

+import java.io.Serializable;
+import java.util.Comparator;
+  /**
+   * Comparator that ensures that a PROVIDED storage type is greater than any
+   * other storage type. Any other storage types are considered equal.
+   */
+  private static class ProvidedLastComparator
+      implements Comparator<DatanodeInfoWithStorage>, Serializable {
+
+    private static final long serialVersionUID = 6441720011443190984L;
+
+    @Override
+    public int compare(DatanodeInfoWithStorage dns1,
+        DatanodeInfoWithStorage dns2) {
+      if (StorageType.PROVIDED.equals(dns1.getStorageType())
+          && !StorageType.PROVIDED.equals(dns2.getStorageType())) {
+        return 1;
+      }
+      if (!StorageType.PROVIDED.equals(dns1.getStorageType())
+          && StorageType.PROVIDED.equals(dns2.getStorageType())) {
+        return -1;
+      }
+      // Storage types of dns1 and dns2 are now both provided or not provided;
+      // thus, are essentially equal for the purpose of this comparator.
+      return 0;
+    }
+  }
+
+
+  // use one instance of the Provided comparator as it uses no state.
+  private static ProvidedLastComparator providedLastComparator =
+      new ProvidedLastComparator();
-    this(b, locs, null, null, -1, false, EMPTY_LOCS);
+    this(b, convert(locs, null, null), null, null, -1, false, EMPTY_LOCS);
-    this(b, locs, storageIDs, storageTypes, -1, false, EMPTY_LOCS);
+    this(b, convert(locs, storageIDs, storageTypes),
+         storageIDs, storageTypes, -1, false, EMPTY_LOCS);
-  public LocatedBlock(ExtendedBlock b, DatanodeInfo[] locs, String[] storageIDs,
-      StorageType[] storageTypes, long startOffset,
+  public LocatedBlock(ExtendedBlock b, DatanodeInfo[] locs,
+      String[] storageIDs, StorageType[] storageTypes, long startOffset,
+      boolean corrupt, DatanodeInfo[] cachedLocs) {
+    this(b, convert(locs, storageIDs, storageTypes),
+        storageIDs, storageTypes, startOffset, corrupt,
+        null == cachedLocs || 0 == cachedLocs.length ? EMPTY_LOCS : cachedLocs);
+  }
+
+  public LocatedBlock(ExtendedBlock b, DatanodeInfoWithStorage[] locs,
+      String[] storageIDs, StorageType[] storageTypes, long startOffset,
-    if (locs==null) {
-      this.locs = EMPTY_LOCS;
-    } else {
-      this.locs = new DatanodeInfoWithStorage[locs.length];
-      for(int i = 0; i < locs.length; i++) {
-        DatanodeInfo di = locs[i];
-        DatanodeInfoWithStorage storage = new DatanodeInfoWithStorage(di,
-            storageIDs != null ? storageIDs[i] : null,
-            storageTypes != null ? storageTypes[i] : null);
-        this.locs[i] = storage;
-      }
-    }
+    this.locs = null == locs ? EMPTY_LOCS : locs;
+    this.cachedLocs = null == cachedLocs || 0 == cachedLocs.length
+      ? EMPTY_LOCS
+      : cachedLocs;
+  }
-    if (cachedLocs == null || cachedLocs.length == 0) {
-      this.cachedLocs = EMPTY_LOCS;
-    } else {
-      this.cachedLocs = cachedLocs;
+  private static DatanodeInfoWithStorage[] convert(
+      DatanodeInfo[] infos, String[] storageIDs, StorageType[] storageTypes) {
+    if (null == infos) {
+      return EMPTY_LOCS;
+
+    DatanodeInfoWithStorage[] ret = new DatanodeInfoWithStorage[infos.length];
+    for(int i = 0; i < infos.length; i++) {
+      ret[i] = new DatanodeInfoWithStorage(infos[i],
+          storageIDs   != null ? storageIDs[i]   : null,
+          storageTypes != null ? storageTypes[i] : null);
+    }
+    return ret;
+  /**
+   * Moves all locations that have {@link StorageType}
+   * {@code PROVIDED} to the end of the locations array without
+   * changing the relative ordering of the remaining locations
+   * Only the first {@code activeLen} locations are considered.
+   * The caller must immediately invoke {@link
+   * org.apache.hadoop.hdfs.protocol.LocatedBlock#updateCachedStorageInfo}
+   * to update the cached Storage ID/Type arrays.
+   * @param activeLen
+   */
+  public void moveProvidedToEnd(int activeLen) {
+
+    if (activeLen <= 0) {
+      return;
+    }
+    // as this is a stable sort, for elements that are equal,
+    // the current order of the elements is maintained
+    Arrays.sort(locs, 0, (activeLen < locs.length) ? activeLen : locs.length,
+        providedLastComparator);
+  }
+

INS26 INS26 INS40 INS40 INS55 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS42 INS74 INS43 INS23 INS31 INS83 INS83 INS43 INS59 MOV44 MOV44 MOV44 INS83 INS42 INS44 MOV44 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS8 INS83 INS83 INS5 INS42 INS44 INS44 INS44 MOV8 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS43 INS43 INS42 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS14 INS43 INS42 INS5 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS5 INS42 INS17 MOV5 INS42 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS21 INS43 INS85 INS5 INS42 INS5 INS42 INS5 INS42 INS25 INS60 INS41 INS65 INS65 INS39 INS42 INS25 INS21 INS66 INS66 INS42 INS42 INS42 INS34 INS42 INS43 INS42 MOV43 INS42 INS25 INS25 INS41 INS43 INS32 INS33 INS33 MOV38 INS32 INS42 INS42 MOV38 INS42 INS43 INS85 INS43 INS85 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS16 INS7 INS42 MOV43 INS85 INS43 INS85 INS43 INS85 INS27 INS8 INS5 INS59 INS42 INS66 INS65 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS27 INS8 INS32 INS42 INS27 INS8 INS27 INS8 INS34 INS42 INS42 INS42 INS33 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 MOV22 INS16 MOV22 INS16 INS42 INS42 INS33 INS42 INS41 INS43 INS85 INS42 INS3 UPD40 INS42 INS66 INS66 INS67 INS42 INS34 INS41 INS42 INS42 INS42 INS34 INS16 INS42 INS32 INS38 INS41 INS38 INS32 INS41 INS27 INS27 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS5 UPD40 MOV40 INS40 INS42 INS36 INS42 INS40 INS40 INS42 INS32 INS32 INS34 INS32 INS40 INS42 INS32 INS38 INS33 INS42 INS34 INS40 INS33 INS42 MOV27 MOV27 INS43 INS85 MOV14 INS27 INS42 INS42 INS40 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS34 INS33 INS34 INS42 INS42 INS2 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL33 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL33 DEL34 DEL42 DEL33 DEL27 DEL8 DEL25 DEL27 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL3 DEL7 DEL21 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42