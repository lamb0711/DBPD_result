HDFS-15196. RBF: RouterRpcServer getListing cannot list large dirs correctly. Contributed by Fengnan Li.

+import java.util.Collections;
-    Map<String, HdfsFileStatus> nnListing = new TreeMap<>();
+    TreeMap<String, HdfsFileStatus> nnListing = new TreeMap<>();
+    // Check the subcluster listing with the smallest name to make sure
+    // no file is skipped across subclusters
+    String lastName = null;
-      // Check the subcluster listing with the smallest name
-      String lastName = null;
+    // Sort the list as the entries from subcluster are also sorted
+    if (children != null) {
+      Collections.sort(children);
+    }
-        // This may overwrite existing listing entries with the mount point
-        // TODO don't add if already there?
-        nnListing.put(child, dirStatus);
+        // if there is no subcluster path, always add mount point
+        if (lastName == null) {
+          nnListing.put(child, dirStatus);
+        } else {
+          if (shouldAddMountPoint(child,
+                lastName, startAfter, remainingEntries)) {
+            // This may overwrite existing listing entries with the mount point
+            // TODO don't add if already there?
+            nnListing.put(child, dirStatus);
+          }
+        }
+      }
+      // Update the remaining count to include left mount points
+      if (nnListing.size() > 0) {
+        String lastListing = nnListing.lastKey();
+        for (int i = 0; i < children.size(); i++) {
+          if (children.get(i).compareTo(lastListing) > 0) {
+            remainingEntries += (children.size() - i);
+            break;
+          }
+        }
+   * Check if we should add the mount point into the total listing.
+   * This should be done under either of the two cases:
+   * 1) current mount point is between startAfter and cutoff lastEntry.
+   * 2) there are no remaining entries from subclusters and this mount
+   *    point is bigger than all files from subclusters
+   * This is to make sure that the following batch of
+   * getListing call will use the correct startAfter, which is lastEntry from
+   * subcluster.
+   *
+   * @param mountPoint to be added mount point inside router
+   * @param lastEntry biggest listing from subcluster
+   * @param startAfter starting listing from client, used to define listing
+   *                   start boundary
+   * @param remainingEntries how many entries left from subcluster
+   * @return
+   */
+  private static boolean shouldAddMountPoint(
+      String mountPoint, String lastEntry, byte[] startAfter,
+      int remainingEntries) {
+    if (mountPoint.compareTo(DFSUtil.bytes2String(startAfter)) > 0 &&
+        mountPoint.compareTo(lastEntry) <= 0) {
+      return true;
+    }
+    if (remainingEntries == 0 && mountPoint.compareTo(lastEntry) >= 0) {
+      return true;
+    }
+    return false;
+  }
+
+  /**

INS26 INS40 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 MOV60 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS5 INS42 INS39 INS42 INS25 INS25 INS41 UPD74 INS27 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS39 INS85 INS27 INS8 INS27 INS8 INS9 UPD43 INS42 INS33 INS21 INS25 INS27 INS27 INS41 INS27 INS27 INS41 UPD42 INS32 INS27 INS8 INS32 INS34 INS32 INS34 INS9 INS42 INS34 INS32 INS34 INS9 INS42 INS42 INS42 INS25 INS32 INS34 INS60 INS24 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS33 MOV21 INS25 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS25 INS32 INS8 INS42 INS42 INS42 INS34 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS21 INS32 INS34 INS21 INS10 INS32 INS32 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS27 INS32 INS42 INS42 INS42