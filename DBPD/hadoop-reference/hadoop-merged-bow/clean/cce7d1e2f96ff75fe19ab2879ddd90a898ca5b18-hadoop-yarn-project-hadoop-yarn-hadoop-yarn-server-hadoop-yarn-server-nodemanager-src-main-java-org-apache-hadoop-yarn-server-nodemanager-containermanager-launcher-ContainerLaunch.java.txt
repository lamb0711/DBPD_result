Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

+  private static final String EXIT_CODE_FILE_SUFFIX = ".exitcode";
-  private final Dispatcher dispatcher;
-  private final ContainerExecutor exec;
+  protected final Dispatcher dispatcher;
+  protected final ContainerExecutor exec;
-  private final Container container;
+  protected final Container container;
-  private volatile AtomicBoolean shouldLaunchContainer = new AtomicBoolean(false);
-  private volatile AtomicBoolean completed = new AtomicBoolean(false);
+  protected AtomicBoolean shouldLaunchContainer = new AtomicBoolean(false);
+  protected AtomicBoolean completed = new AtomicBoolean(false);
-  private Path pidFilePath = null;
+  protected Path pidFilePath = null;
-      String pidFileSuffix = String.format(ContainerLaunch.PID_FILE_NAME_FMT,
-          containerIdStr);
+      String pidFileSubpath = getPidFileSubpath(appIdStr, containerIdStr);
-      pidFilePath = dirsHandler.getLocalPathForWrite(
-          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR 
-          + pidFileSuffix);
+      pidFilePath = dirsHandler.getLocalPathForWrite(pidFileSubpath);
+      context.getNMStateStore().storeContainerLaunched(containerID);
+      try {
+        context.getNMStateStore().storeContainerCompleted(containerID, ret);
+      } catch (IOException e) {
+        LOG.error("Unable to set exit code for container " + containerID);
+      }
+
+  protected String getPidFileSubpath(String appIdStr, String containerIdStr) {
+    return getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR
+        + String.format(ContainerLaunch.PID_FILE_NAME_FMT, containerIdStr);
+  }
+    try {
+      context.getNMStateStore().storeContainerKilled(containerId);
+    } catch (IOException e) {
+      LOG.error("Unable to mark container " + containerId
+          + " killed in store", e);
+    }
+
+        lfs.delete(pidFilePath.suffix(EXIT_CODE_FILE_SUFFIX), false);
+  Context getContext() {
+    return context;
+  }
+
+  public static String getExitCodeFile(String pidFile) {
+    return pidFile + EXIT_CODE_FILE_SUFFIX;
+  }

INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 INS83 MOV43 INS42 INS44 INS44 INS8 INS43 INS42 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS45 INS43 INS42 INS43 INS42 INS41 INS54 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS42 INS27 INS8 INS12 INS42 INS42 INS27 INS21 INS54 INS32 INS40 MOV32 INS21 INS44 INS8 INS42 INS42 INS43 INS32 INS8 INS12 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS42 UPD42 INS32 INS32 INS42 INS42 INS21 INS44 INS8 INS32 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 DEL83 DEL83 DEL40 DEL40 DEL42 DEL27