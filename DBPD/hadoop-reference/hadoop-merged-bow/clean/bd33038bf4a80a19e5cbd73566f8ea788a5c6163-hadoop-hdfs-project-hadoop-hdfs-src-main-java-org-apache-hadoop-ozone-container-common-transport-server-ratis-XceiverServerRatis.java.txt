HDFS-12159. Ozone: SCM: Add create replication pipeline RPC. Contributed by Anu Engineer.

+import com.google.common.base.Preconditions;
+import com.google.common.base.Strings;
-import org.apache.hadoop.ozone.container.common.transport.server.XceiverServerSpi;
+import org.apache.hadoop.ozone.container.common.transport.server
+    .XceiverServerSpi;
+
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos;
+import java.io.File;
+import java.net.ServerSocket;
-
-  static RaftProperties newRaftProperties(
-      RpcType rpc, int port, String storageDir) {
-    final RaftProperties properties = new RaftProperties();
-    RaftServerConfigKeys.setStorageDir(properties, storageDir);
-    RaftConfigKeys.Rpc.setType(properties, rpc);
-    if (rpc == SupportedRpcType.GRPC) {
-      GrpcConfigKeys.Server.setPort(properties, port);
-    } else if (rpc == SupportedRpcType.NETTY) {
-      NettyConfigKeys.Server.setPort(properties, port);
-    }
-    return properties;
-  }
-
-  public static XceiverServerRatis newXceiverServerRatis(
-      Configuration ozoneConf, ContainerDispatcher dispatcher)
-      throws IOException {
-    final String id = ozoneConf.get(
-        OzoneConfigKeys.DFS_CONTAINER_RATIS_SERVER_ID);
-    final int port = ozoneConf.getInt(
-        OzoneConfigKeys.DFS_CONTAINER_IPC_PORT,
-        OzoneConfigKeys.DFS_CONTAINER_IPC_PORT_DEFAULT);
-    final String storageDir = ozoneConf.get(
-        OzoneConfigKeys.DFS_CONTAINER_RATIS_DATANODE_STORAGE_DIR);
-    final String rpcType = ozoneConf.get(
-        OzoneConfigKeys.DFS_CONTAINER_RATIS_RPC_TYPE_KEY,
-        OzoneConfigKeys.DFS_CONTAINER_RATIS_RPC_TYPE_DEFAULT);
-    final RpcType rpc = SupportedRpcType.valueOfIgnoreCase(rpcType);
-    return new XceiverServerRatis(id, port, storageDir, dispatcher, rpc);
-  }
-
+  static RaftProperties newRaftProperties(
+      RpcType rpc, int port, String storageDir) {
+    final RaftProperties properties = new RaftProperties();
+    RaftServerConfigKeys.setStorageDir(properties, storageDir);
+    RaftConfigKeys.Rpc.setType(properties, rpc);
+    if (rpc == SupportedRpcType.GRPC) {
+      GrpcConfigKeys.Server.setPort(properties, port);
+    } else {
+      if (rpc == SupportedRpcType.NETTY) {
+        NettyConfigKeys.Server.setPort(properties, port);
+      }
+    }
+    return properties;
+  }
+
+  public static XceiverServerRatis newXceiverServerRatis(String datanodeID,
+      Configuration ozoneConf, ContainerDispatcher dispatcher)
+      throws IOException {
+    final String ratisDir = File.separator + "ratis";
+    int localPort = ozoneConf.getInt(
+        OzoneConfigKeys.DFS_CONTAINER_RATIS_IPC_PORT,
+        OzoneConfigKeys.DFS_CONTAINER_RATIS_IPC_PORT_DEFAULT);
+    String storageDir = ozoneConf.get(
+        OzoneConfigKeys.DFS_CONTAINER_RATIS_DATANODE_STORAGE_DIR);
+
+    if (Strings.isNullOrEmpty(storageDir)) {
+      storageDir = ozoneConf.get(OzoneConfigKeys
+          .OZONE_CONTAINER_METADATA_DIRS);
+      Preconditions.checkNotNull(storageDir, "ozone.container.metadata.dirs " +
+          "cannot be null, Please check your configs.");
+      storageDir = storageDir.concat(ratisDir);
+      LOG.warn("Storage directory for Ratis is not configured. Mapping Ratis " +
+              "storage under {}. It is a good idea to map this to an SSD disk.",
+          storageDir);
+    }
+    final String rpcType = ozoneConf.get(
+        OzoneConfigKeys.DFS_CONTAINER_RATIS_RPC_TYPE_KEY,
+        OzoneConfigKeys.DFS_CONTAINER_RATIS_RPC_TYPE_DEFAULT);
+    final RpcType rpc = SupportedRpcType.valueOfIgnoreCase(rpcType);
+
+    // Get an available port on current node and
+    // use that as the container port
+    if (ozoneConf.getBoolean(OzoneConfigKeys
+            .DFS_CONTAINER_RATIS_IPC_RANDOM_PORT,
+        OzoneConfigKeys.DFS_CONTAINER_RATIS_IPC_RANDOM_PORT_DEFAULT)) {
+      try (ServerSocket socket = new ServerSocket(0)) {
+        socket.setReuseAddress(true);
+        localPort = socket.getLocalPort();
+        LOG.info("Found a free port for the server : {}", localPort);
+        // If we have random local ports configured this means that it
+        // probably running under MiniOzoneCluster. Ratis locks the storage
+        // directories, so we need to pass different local directory for each
+        // local instance. So we map ratis directories under datanode ID.
+        storageDir = storageDir.concat(File.separator + datanodeID);
+      } catch (IOException e) {
+        LOG.error("Unable find a random free port for the server, "
+            + "fallback to use default port {}", localPort, e);
+      }
+    }
+    return new XceiverServerRatis(datanodeID, localPort, storageDir,
+        dispatcher, rpc);
+  }
+
+
+  /**
+   * Returns the Replication type supported by this end-point.
+   *
+   * @return enum -- {Stand_Alone, Ratis, Chained}
+   */
+  @Override
+  public OzoneProtos.ReplicationType getServerType() {
+    return OzoneProtos.ReplicationType.RATIS;
+  }

INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS31 INS44 INS29 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS25 INS25 INS65 INS65 INS42 INS40 INS41 INS8 INS42 INS32 INS8 INS32 INS8 INS66 INS66 INS40 MOV25 UPD42 INS27 UPD42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS40 INS40 INS54 UPD42 UPD42 INS40 INS45 UPD40 UPD40 INS7 INS32 INS7 INS32 INS58 INS8 INS12 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS27 INS42 INS43 INS59 INS21 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS40 INS45 INS45 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS14 INS32 INS7 INS32 INS7 INS43 INS42 INS21 INS43 INS34 INS42 INS42 INS9 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS40 INS42 INS45 INS45 DEL42 DEL42 DEL40 DEL32 DEL83 DEL83