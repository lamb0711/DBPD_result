HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.

+import org.apache.hadoop.HadoopIllegalArgumentException;
-  // Hope to reset coding buffers a little faster using it
-  private byte[] zeroChunkBytes;
-
-
-    zeroChunkBytes = new byte[chunkSize]; // With ZERO by default
-   * Convert an array of heap ByteBuffers to an array of byte array.
-   * @param buffers
-   * @return an array of byte array
+   * Ensure output buffer filled with ZERO bytes fully in chunkSize.
+   * @param buffer a buffer ready to write chunk size bytes
+   * @return the buffer itself, with ZERO bytes written, the position and limit
+   *         are not changed after the call
-  protected static byte[][] toArrays(ByteBuffer[] buffers) {
-    byte[][] bytesArr = new byte[buffers.length][];
-
-    ByteBuffer buffer;
-    for (int i = 0; i < buffers.length; i++) {
-      buffer = buffers[i];
-      if (buffer == null) {
-        bytesArr[i] = null;
-        continue;
-      }
-
-      if (buffer.hasArray()) {
-        bytesArr[i] = buffer.array();
-      } else {
-        throw new IllegalArgumentException("Invalid ByteBuffer passed, " +
-            "expecting heap buffer");
-      }
+  protected ByteBuffer resetOutputBuffer(ByteBuffer buffer) {
+    int pos = buffer.position();
+    for (int i = pos; i < buffer.limit(); ++i) {
+      buffer.put((byte) 0);
-
-    return bytesArr;
-  }
-
-  /**
-   * Ensure the buffer (either input or output) ready to read or write with ZERO
-   * bytes fully in chunkSize.
-   * @param buffer
-   * @return the buffer itself
-   */
-  protected ByteBuffer resetBuffer(ByteBuffer buffer) {
-    buffer.clear();
-    buffer.put(zeroChunkBytes);
-    buffer.position(0);
+    buffer.position(pos);
-  protected byte[] resetBuffer(byte[] buffer) {
-    System.arraycopy(zeroChunkBytes, 0, buffer, 0, buffer.length);
+  protected byte[] resetBuffer(byte[] buffer, int offset, int len) {
+    for (int i = offset; i < len; ++i) {
+      buffer[i] = (byte) 0;
+    }
+
+  /**
+   * Check and ensure the buffers are of the length specified by dataLen.
+   * @param buffers
+   * @param dataLen
+   */
+  protected void ensureLength(ByteBuffer[] buffers, int dataLen) {
+    for (int i = 0; i < buffers.length; ++i) {
+      if (buffers[i].remaining() != dataLen) {
+        throw new HadoopIllegalArgumentException(
+            "Invalid buffer, not of length " + dataLen);
+      }
+    }
+  }
+
+  /**
+   * Check and ensure the buffers are of the length specified by dataLen.
+   * @param buffers
+   * @param dataLen
+   */
+  protected void ensureLength(byte[][] buffers, int dataLen) {
+    for (int i = 0; i < buffers.length; ++i) {
+      if (buffers[i].length != dataLen) {
+        throw new HadoopIllegalArgumentException(
+            "Invalid buffer not of length " + dataLen);
+      }
+    }
+  }

INS26 MOV31 INS40 INS31 INS31 MOV29 MOV83 MOV43 UPD42 MOV42 MOV44 INS8 INS44 INS44 INS29 INS83 INS39 INS42 MOV44 INS44 INS8 INS39 INS42 INS44 INS44 INS65 UPD65 MOV60 INS24 INS21 MOV41 INS39 INS42 INS39 INS42 INS24 INS65 MOV65 INS65 INS39 INS42 INS24 UPD65 MOV5 INS42 INS39 INS42 INS24 INS66 INS42 UPD66 UPD66 INS66 INS39 INS58 INS27 INS38 INS8 INS32 INS58 INS27 INS38 INS8 INS66 INS42 MOV58 MOV27 INS38 INS8 UPD66 UPD42 INS42 INS58 INS27 INS38 INS8 INS42 INS32 INS39 INS59 INS42 INS32 INS42 MOV21 MOV42 UPD42 MOV42 INS42 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS25 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS7 INS27 MOV8 INS42 INS34 INS27 INS8 INS42 INS42 INS11 INS2 INS11 INS32 INS42 INS22 INS42 INS53 INS39 INS34 INS42 INS42 INS39 INS34 MOV2 UPD42 MOV42 INS2 INS42 INS14 UPD43 INS42 INS42 INS43 INS27 UPD42 UPD45 INS42 INS42 INS45 INS42 DEL83 DEL39 DEL85 DEL5 DEL42 DEL59 DEL23 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL7 DEL21 DEL39 DEL85 DEL85 DEL5 DEL42 DEL40 DEL3 DEL42 DEL42 DEL2 DEL33 DEL7 DEL83 DEL39 DEL85 DEL85 DEL5 DEL42 DEL43 DEL59 DEL60 DEL42 DEL37 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL18 DEL8 DEL25 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL45 DEL66 DEL66 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21