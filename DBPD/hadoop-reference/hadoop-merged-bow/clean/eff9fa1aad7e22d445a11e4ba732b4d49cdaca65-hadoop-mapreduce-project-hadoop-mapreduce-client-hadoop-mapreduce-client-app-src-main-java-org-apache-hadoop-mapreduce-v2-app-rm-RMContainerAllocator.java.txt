MAPREDUCE-3921. MR AM should act on node health status changes. Contributed by Bikas Saha.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349065 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
+import org.apache.hadoop.mapreduce.v2.app.job.Job;
+import org.apache.hadoop.mapreduce.v2.app.job.Task;
+import org.apache.hadoop.mapreduce.v2.app.job.TaskAttempt;
+import org.apache.hadoop.mapreduce.v2.app.job.event.JobUpdatedNodesEvent;
+import org.apache.hadoop.mapreduce.v2.app.job.event.TaskAttemptKillEvent;
+import org.apache.hadoop.yarn.api.records.NodeId;
+import org.apache.hadoop.yarn.api.records.NodeReport;
+import org.apache.hadoop.yarn.api.records.NodeState;
-    
+
+    handleUpdatedNodes(response);
+
-      }
+      }      
+  
+  @SuppressWarnings("unchecked")
+  private void handleUpdatedNodes(AMResponse response) {
+    // send event to the job about on updated nodes
+    List<NodeReport> updatedNodes = response.getUpdatedNodes();
+    if (!updatedNodes.isEmpty()) {
+
+      // send event to the job to act upon completed tasks
+      eventHandler.handle(new JobUpdatedNodesEvent(getJob().getID(),
+          updatedNodes));
+
+      // act upon running tasks
+      HashSet<NodeId> unusableNodes = new HashSet<NodeId>();
+      for (NodeReport nr : updatedNodes) {
+        NodeState nodeState = nr.getNodeState();
+        if (nodeState.isUnusable()) {
+          unusableNodes.add(nr.getNodeId());
+        }
+      }
+      for (int i = 0; i < 2; ++i) {
+        HashMap<TaskAttemptId, Container> taskSet = i == 0 ? assignedRequests.maps
+            : assignedRequests.reduces;
+        // kill running containers
+        for (Map.Entry<TaskAttemptId, Container> entry : taskSet.entrySet()) {
+          TaskAttemptId tid = entry.getKey();
+          NodeId taskAttemptNodeId = entry.getValue().getNodeId();
+          if (unusableNodes.contains(taskAttemptNodeId)) {
+            LOG.info("Killing taskAttempt:" + tid
+                + " because it is running on unusable node:"
+                + taskAttemptNodeId);
+            eventHandler.handle(new TaskAttemptKillEvent(tid,
+                "TaskAttempt killed because it ran on unusable node"
+                    + taskAttemptNodeId));
+          }
+        }
+      }
+    }
+  }
-        ContainerId allocatedContainerId = allocated.getId();
-              assignedRequests.add(allocatedContainerId, assigned.attemptID);
+              assignedRequests.add(allocated, assigned.attemptID);
-          release(allocatedContainerId);
+          release(allocated.getId());
-    private final LinkedHashMap<TaskAttemptId, ContainerId> maps = 
-      new LinkedHashMap<TaskAttemptId, ContainerId>();
-    private final LinkedHashMap<TaskAttemptId, ContainerId> reduces = 
-      new LinkedHashMap<TaskAttemptId, ContainerId>();
+    private final LinkedHashMap<TaskAttemptId, Container> maps = 
+      new LinkedHashMap<TaskAttemptId, Container>();
+    private final LinkedHashMap<TaskAttemptId, Container> reduces = 
+      new LinkedHashMap<TaskAttemptId, Container>();
-    void add(ContainerId containerId, TaskAttemptId tId) {
-      LOG.info("Assigned container " + containerId.toString() + " to " + tId);
-      containerToAttemptMap.put(containerId, tId);
+    void add(Container container, TaskAttemptId tId) {
+      LOG.info("Assigned container " + container.getId().toString() + " to " + tId);
+      containerToAttemptMap.put(container.getId(), tId);
-        maps.put(tId, containerId);
+        maps.put(tId, container);
-        reduces.put(tId, containerId);
+        reduces.put(tId, container);
-        containerId = maps.remove(tId);
+        containerId = maps.remove(tId).getId();
-        containerId = reduces.remove(tId);
+        containerId = reduces.remove(tId).getId();
+    
+    NodeId getNodeId(TaskAttemptId tId) {
+      if (tId.getTaskId().getTaskType().equals(TaskType.MAP)) {
+        return maps.get(tId).getNodeId();
+      } else {
+        return reduces.get(tId).getNodeId();
+      }
+    }
-        return maps.get(tId);
+        return maps.get(tId).getId();
-        return reduces.get(tId);
+        return reduces.get(tId).getId();

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 MOV23 INS79 INS83 INS39 INS42 INS44 INS8 INS31 INS21 INS42 INS45 INS43 INS42 INS60 INS25 UPD74 MOV74 UPD74 MOV74 INS43 UPD42 MOV43 INS42 INS44 INS8 INS32 INS42 INS74 INS59 INS38 INS8 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 INS42 INS43 INS42 INS25 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS21 INS60 INS70 INS24 UPD42 UPD74 MOV74 UPD42 UPD74 MOV74 UPD42 MOV32 MOV32 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS74 INS59 INS44 INS42 INS8 INS58 INS27 INS38 INS8 UPD43 UPD43 INS32 INS32 INS42 INS40 INS41 INS41 INS42 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS25 INS39 INS59 INS42 INS34 INS42 INS60 INS70 UPD42 UPD42 UPD42 MOV42 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS43 INS32 INS42 INS42 INS42 INS74 INS42 INS43 INS59 INS32 INS8 INS42 INS34 INS74 INS59 INS44 INS32 INS8 INS32 UPD42 UPD42 INS32 INS32 MOV32 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS21 INS43 INS43 INS43 INS42 INS16 INS74 INS42 INS42 INS42 INS60 INS60 INS25 UPD42 MOV42 INS42 MOV32 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS40 INS40 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS32 INS8 MOV32 INS42 INS42 INS32 INS42 INS34 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS14 INS45 INS42 INS45 INS42 INS43 INS42 INS27 UPD42 INS42 INS45 INS42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42