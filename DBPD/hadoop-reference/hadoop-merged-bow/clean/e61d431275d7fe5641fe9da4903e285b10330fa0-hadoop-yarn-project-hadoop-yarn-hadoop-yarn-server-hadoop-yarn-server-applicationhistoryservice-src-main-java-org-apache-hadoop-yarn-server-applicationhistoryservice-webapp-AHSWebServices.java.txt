YARN-4920. ATS/NM should support a link to dowload/get the logs in text format. Contributed by Xuan Gong.

+import java.io.DataInputStream;
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.nio.charset.Charset;
+import javax.ws.rs.WebApplicationException;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.StreamingOutput;
+import javax.ws.rs.core.Response.ResponseBuilder;
+import javax.ws.rs.core.Response.Status;
+import org.apache.hadoop.classification.InterfaceAudience.Public;
+import org.apache.hadoop.classification.InterfaceStability.Unstable;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.FileContext;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.RemoteIterator;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.api.records.ContainerId;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.logaggregation.AggregatedLogFormat;
+import org.apache.hadoop.yarn.logaggregation.LogAggregationUtils;
+import org.apache.hadoop.yarn.logaggregation.AggregatedLogFormat.LogKey;
+import org.apache.hadoop.yarn.util.Times;
-
+import com.google.common.base.Joiner;
+  private static final String NM_DOWNLOAD_URI_STR =
+      "/ws/v1/node/containerlogs";
+  private static final Joiner JOINER = Joiner.on("");
+  private static final Joiner DOT_JOINER = Joiner.on(". ");
+  private final Configuration conf;
+
-  public AHSWebServices(ApplicationBaseProtocol appBaseProt) {
+  public AHSWebServices(ApplicationBaseProtocol appBaseProt,
+      Configuration conf) {
+    this.conf = conf;
+  @GET
+  @Path("/containerlogs/{containerid}/{filename}")
+  @Produces({ MediaType.TEXT_PLAIN })
+  @Public
+  @Unstable
+  public Response getLogs(@Context HttpServletRequest req,
+      @Context HttpServletResponse res,
+      @PathParam("containerid") String containerIdStr,
+      @PathParam("filename") String filename,
+      @QueryParam("download") String download) {
+    init(res);
+    ContainerId containerId;
+    try {
+      containerId = ContainerId.fromString(containerIdStr);
+    } catch (IllegalArgumentException ex) {
+      return createBadResponse(Status.NOT_FOUND,
+          "Invalid ContainerId: " + containerIdStr);
+    }
+
+    boolean downloadFile = parseBooleanParam(download);
+
+    ApplicationId appId = containerId.getApplicationAttemptId()
+        .getApplicationId();
+    AppInfo appInfo;
+    try {
+      appInfo = super.getApp(req, res, appId.toString());
+    } catch (Exception ex) {
+      // directly find logs from HDFS.
+      return sendStreamOutputResponse(appId, null, null, containerIdStr,
+          filename, downloadFile);
+    }
+    String appOwner = appInfo.getUser();
+
+    ContainerInfo containerInfo;
+    try {
+      containerInfo = super.getContainer(
+          req, res, appId.toString(),
+          containerId.getApplicationAttemptId().toString(),
+          containerId.toString());
+    } catch (Exception ex) {
+      if (isFinishedState(appInfo.getAppState())) {
+        // directly find logs from HDFS.
+        return sendStreamOutputResponse(appId, appOwner, null, containerIdStr,
+            filename, downloadFile);
+      }
+      return createBadResponse(Status.INTERNAL_SERVER_ERROR,
+          "Can not get ContainerInfo for the container: " + containerId);
+    }
+    String nodeId = containerInfo.getNodeId();
+    if (isRunningState(appInfo.getAppState())) {
+      String nodeHttpAddress = containerInfo.getNodeHttpAddress();
+      String uri = "/" + containerId.toString() + "/" + filename;
+      String resURI = JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);
+      String query = req.getQueryString();
+      if (query != null && !query.isEmpty()) {
+        resURI += "?" + query;
+      }
+      ResponseBuilder response = Response.status(
+          HttpServletResponse.SC_TEMPORARY_REDIRECT);
+      response.header("Location", resURI);
+      return response.build();
+    } else if (isFinishedState(appInfo.getAppState())) {
+      return sendStreamOutputResponse(appId, appOwner, nodeId,
+          containerIdStr, filename, downloadFile);
+    } else {
+      return createBadResponse(Status.NOT_FOUND,
+          "The application is not at Running or Finished State.");
+    }
+  }
+
+  // TODO: YARN-5029. RM would send the update event. We could get
+  // the consistent YarnApplicationState.
+  // Will remove YarnApplicationState.ACCEPTED.
+  private boolean isRunningState(YarnApplicationState appState) {
+    return appState == YarnApplicationState.ACCEPTED
+        || appState == YarnApplicationState.RUNNING;
+  }
+
+  private boolean isFinishedState(YarnApplicationState appState) {
+    return appState == YarnApplicationState.FINISHED
+        || appState == YarnApplicationState.FAILED
+        || appState == YarnApplicationState.KILLED;
+  }
+
+  private Response createBadResponse(Status status, String errMessage) {
+    Response response = Response.status(status)
+        .entity(DOT_JOINER.join(status.toString(), errMessage)).build();
+    return response;
+  }
+
+  private boolean parseBooleanParam(String param) {
+    return ("true").equalsIgnoreCase(param);
+  }
+
+  private Response sendStreamOutputResponse(ApplicationId appId,
+      String appOwner, String nodeId, String containerIdStr,
+      String fileName, boolean downloadFile) {
+    StreamingOutput stream = null;
+    try {
+      stream = getStreamingOutput(appId, appOwner, nodeId,
+          containerIdStr, fileName);
+    } catch (Exception ex) {
+      return createBadResponse(Status.INTERNAL_SERVER_ERROR,
+          ex.getMessage());
+    }
+    if (stream == null) {
+      return createBadResponse(Status.INTERNAL_SERVER_ERROR,
+          "Can not get log for container: " + containerIdStr);
+    }
+    ResponseBuilder response = Response.ok(stream);
+    if (downloadFile) {
+      response.header("Content-Type", "application/octet-stream");
+      response.header("Content-Disposition", "attachment; filename="
+          + fileName);
+    }
+    return response.build();
+  }
+
+  private StreamingOutput getStreamingOutput(ApplicationId appId,
+      String appOwner, final String nodeId, final String containerIdStr,
+      final String logFile) throws IOException{
+    String suffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);
+    org.apache.hadoop.fs.Path remoteRootLogDir = new org.apache.hadoop.fs.Path(
+        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
+            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
+    org.apache.hadoop.fs.Path qualifiedRemoteRootLogDir =
+        FileContext.getFileContext(conf).makeQualified(remoteRootLogDir);
+    FileContext fc = FileContext.getFileContext(
+        qualifiedRemoteRootLogDir.toUri(), conf);
+    org.apache.hadoop.fs.Path remoteAppDir = null;
+    if (appOwner == null) {
+      org.apache.hadoop.fs.Path toMatch = LogAggregationUtils
+          .getRemoteAppLogDir(remoteRootLogDir, appId, "*", suffix);
+      FileStatus[] matching  = fc.util().globStatus(toMatch);
+      if (matching == null || matching.length != 1) {
+        return null;
+      }
+      remoteAppDir = matching[0].getPath();
+    } else {
+      remoteAppDir = LogAggregationUtils
+          .getRemoteAppLogDir(remoteRootLogDir, appId, appOwner, suffix);
+    }
+    final RemoteIterator<FileStatus> nodeFiles;
+    nodeFiles = fc.listStatus(remoteAppDir);
+    if (!nodeFiles.hasNext()) {
+      return null;
+    }
+
+    StreamingOutput stream = new StreamingOutput() {
+
+      @Override
+      public void write(OutputStream os) throws IOException,
+          WebApplicationException {
+        byte[] buf = new byte[65535];
+        boolean findLogs = false;
+        while (nodeFiles.hasNext()) {
+          final FileStatus thisNodeFile = nodeFiles.next();
+          String nodeName = thisNodeFile.getPath().getName();
+          if ((nodeId == null || nodeName.contains(LogAggregationUtils
+              .getNodeString(nodeId))) && !nodeName.endsWith(
+              LogAggregationUtils.TMP_FILE_SUFFIX)) {
+            AggregatedLogFormat.LogReader reader =
+                new AggregatedLogFormat.LogReader(conf,
+                    thisNodeFile.getPath());
+            DataInputStream valueStream;
+            LogKey key = new LogKey();
+            valueStream = reader.next(key);
+            while (valueStream != null && !key.toString()
+                .equals(containerIdStr)) {
+              // Next container
+              key = new LogKey();
+              valueStream = reader.next(key);
+            }
+            if (valueStream == null) {
+              continue;
+            }
+            while (true) {
+              try {
+                String fileType = valueStream.readUTF();
+                String fileLengthStr = valueStream.readUTF();
+                long fileLength = Long.parseLong(fileLengthStr);
+                if (fileType.equalsIgnoreCase(logFile)) {
+                  StringBuilder sb = new StringBuilder();
+                  sb.append("LogType:");
+                  sb.append(fileType + "\n");
+                  sb.append("Log Upload Time:");
+                  sb.append(Times.format(System.currentTimeMillis()) + "\n");
+                  sb.append("LogLength:");
+                  sb.append(fileLengthStr + "\n");
+                  sb.append("Log Contents:\n");
+                  byte[] b = sb.toString().getBytes(Charset.forName("UTF-8"));
+                  os.write(b, 0, b.length);
+
+                  long curRead = 0;
+                  long pendingRead = fileLength - curRead;
+                  int toRead = pendingRead > buf.length ? buf.length
+                      : (int) pendingRead;
+                  int len = valueStream.read(buf, 0, toRead);
+                  while (len != -1 && curRead < fileLength) {
+                    os.write(buf, 0, len);
+                    curRead += len;
+
+                    pendingRead = fileLength - curRead;
+                    toRead = pendingRead > buf.length ? buf.length
+                        : (int) pendingRead;
+                    len = valueStream.read(buf, 0, toRead);
+                  }
+                  sb = new StringBuilder();
+                  sb.append("\nEnd of LogType:" + fileType + "\n");
+                  b = sb.toString().getBytes(Charset.forName("UTF-8"));
+                  os.write(b, 0, b.length);
+                  findLogs = true;
+                } else {
+                  long totalSkipped = 0;
+                  long currSkipped = 0;
+                  while (currSkipped != -1 && totalSkipped < fileLength) {
+                    currSkipped = valueStream.skip(fileLength - totalSkipped);
+                    totalSkipped += currSkipped;
+                  }
+                }
+              } catch (EOFException eof) {
+                break;
+              }
+            }
+          }
+        }
+        os.flush();
+        if (!findLogs) {
+          throw new IOException("Can not find logs for container:"
+              + containerIdStr);
+        }
+      }
+    };
+    return stream;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS78 INS79 INS79 INS78 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS45 INS42 INS4 INS42 INS42 INS42 INS78 INS43 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS21 INS60 INS54 INS60 INS60 INS60 INS54 INS60 INS60 INS54 INS60 INS25 INS43 INS42 INS41 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS60 INS41 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS54 INS25 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS25 INS60 INS21 INS25 INS60 INS41 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS7 INS40 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS8 INS12 INS39 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS8 INS25 INS42 INS27 INS42 INS27 INS42 INS42 INS43 INS59 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS27 INS8 INS43 INS59 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS83 INS74 INS59 INS7 INS38 INS8 INS43 INS59 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS60 INS60 INS25 INS60 INS21 INS41 INS32 INS8 INS8 INS27 INS27 INS27 INS27 INS42 INS42 INS32 INS36 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS41 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS14 INS40 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS33 INS42 INS33 INS60 INS60 INS25 INS21 INS21 INS43 INS43 INS42 INS42 INS32 INS32 INS41 INS42 INS42 INS14 INS52 INS42 INS7 INS43 INS42 INS41 INS42 INS42 INS32 INS42 INS7 INS43 INS42 INS41 INS42 INS42 INS7 INS43 INS42 INS25 INS41 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS42 INS32 INS41 INS41 INS42 INS40 INS42 INS40 INS27 INS27 INS42 INS40 INS32 INS42 INS45 INS7 INS43 INS42 INS41 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS5 INS59 INS27 INS8 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS1 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS48 INS42 INS32 INS42 INS48 INS42 INS32 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS40 INS42 INS40 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS40 INS27 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS27 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS43 INS85 INS42 INS32 INS27 INS27 INS41 INS42 INS32 INS42 INS32 INS42 INS31 INS42 INS42 INS42 INS42 INS40 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS32 INS41 INS42 INS40 INS27 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS7 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS40 INS34 INS33 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS61 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS45 INS42 INS42 INS5 INS59 INS39 INS59 INS32 INS8 INS32 INS38 INS8 INS39 INS85 INS42 INS3 INS42 INS9 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS53 INS5 INS34 INS83 INS43 INS59 INS43 INS59 INS27 INS8 INS14 INS39 INS85 INS42 INS42 INS32 INS42 INS42 INS32 INS36 INS38 INS60 INS60 INS60 INS21 INS61 INS25 INS61 INS43 INS27 INS42 INS42 INS32 INS42 INS27 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS7 INS27 INS8 INS27 INS8 INS9 INS8 INS42 INS45 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS40 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS27 INS38 INS21 INS21 INS42 INS33 INS18 INS54 INS42 INS33 INS42 INS42 INS32 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS33 INS32 INS7 INS7 INS8 INS12 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS32 INS60 INS60 INS60 INS25 INS44 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS8 INS8 INS43 INS42 INS10 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS60 INS60 INS60 INS60 INS61 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS61 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS5 INS59 INS32 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS7 INS32 INS7 INS32 INS7 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS45 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS34 INS40 INS42 INS34 INS42 INS27 INS42 INS16 INS42 INS32 INS27 INS27 INS21 INS21 INS21 INS21 INS21 INS42 INS14 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS34 INS40 INS42 INS9 INS42 INS34 INS42 INS34 INS27 INS27 INS21 INS21 INS43 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS27 INS40 INS11 INS42 INS42 INS42 INS34 INS42 INS42 INS38 INS42 INS42 INS32 INS7 INS7 INS7 INS7 INS43 INS45 INS42 INS45 INS32 INS42 INS32 INS42 INS38 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS40 INS39 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS42 INS16 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS40 INS11 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS40 INS39 INS42 INS42 INS42