HADOOP-12211. Collect disk usage on the node. Contributed by Robert Grandl

+import java.util.HashMap;
+  /**
+   * Pattern for parsing /proc/diskstats.
+   */
+  private static final String PROCFS_DISKSFILE = "/proc/diskstats";
+  private static final Pattern PROCFS_DISKSFILE_FORMAT =
+      Pattern.compile("^[ \t]*([0-9]+)[ \t]*([0-9 ]+)" +
+              "(?!([a-zA-Z]+[0-9]+))([a-zA-Z]+)" +
+              "[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)" +
+              "[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)" +
+              "[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)");
+  /**
+   * Pattern for parsing /sys/block/partition_name/queue/hw_sector_size.
+   */
+  private static final Pattern PROCFS_DISKSECTORFILE_FORMAT =
+      Pattern.compile("^([0-9]+)");
+  private String procfsDisksFile;
+  private long numDisksBytesRead = 0L; // aggregated bytes read from disks
+  private long numDisksBytesWritten = 0L; // aggregated bytes written to disks
+  /* map for every disk its sector size */
+  private HashMap<String, Integer> perDiskSectorSize = null;
+
-         PROCFS_NETFILE, JIFFY_LENGTH_IN_MILLIS);
+         PROCFS_NETFILE, PROCFS_DISKSFILE, JIFFY_LENGTH_IN_MILLIS);
+   * @param procfsDisksFile fake file for /proc/diskstats
+                                       String procfsDisksFile,
+    this.procfsDisksFile = procfsDisksFile;
+    this.perDiskSectorSize = new HashMap<String, Integer>();
+  /**
+   * Read /proc/diskstats file, parse and calculate amount
+   * of bytes read and written from/to disks.
+   */
+  private void readProcDisksInfoFile() {
+
+    numDisksBytesRead = 0L;
+    numDisksBytesWritten = 0L;
+
+    // Read "/proc/diskstats" file
+    BufferedReader in;
+    try {
+      in = new BufferedReader(new InputStreamReader(
+            new FileInputStream(procfsDisksFile), Charset.forName("UTF-8")));
+    } catch (FileNotFoundException f) {
+      return;
+    }
+
+    Matcher mat;
+    try {
+      String str = in.readLine();
+      while (str != null) {
+        mat = PROCFS_DISKSFILE_FORMAT.matcher(str);
+        if (mat.find()) {
+          String diskName = mat.group(4);
+          assert diskName != null;
+          // ignore loop or ram partitions
+          if (diskName.contains("loop") || diskName.contains("ram")) {
+            str = in.readLine();
+            continue;
+          }
+
+          Integer sectorSize;
+          synchronized (perDiskSectorSize) {
+            sectorSize = perDiskSectorSize.get(diskName);
+            if (null == sectorSize) {
+              // retrieve sectorSize
+              // if unavailable or error, assume 512
+              sectorSize = readDiskBlockInformation(diskName, 512);
+              perDiskSectorSize.put(diskName, sectorSize);
+            }
+          }
+
+          String sectorsRead = mat.group(7);
+          String sectorsWritten = mat.group(11);
+          if (null == sectorsRead || null == sectorsWritten) {
+            return;
+          }
+          numDisksBytesRead += Long.parseLong(sectorsRead) * sectorSize;
+          numDisksBytesWritten += Long.parseLong(sectorsWritten) * sectorSize;
+        }
+        str = in.readLine();
+      }
+    } catch (IOException e) {
+      LOG.warn("Error reading the stream " + procfsDisksFile, e);
+    } finally {
+      // Close the streams
+      try {
+        in.close();
+      } catch (IOException e) {
+        LOG.warn("Error closing the stream " + procfsDisksFile, e);
+      }
+    }
+  }
+
+  /**
+   * Read /sys/block/diskName/queue/hw_sector_size file, parse and calculate
+   * sector size for a specific disk.
+   * @return sector size of specified disk, or defSector
+   */
+  int readDiskBlockInformation(String diskName, int defSector) {
+
+    assert perDiskSectorSize != null && diskName != null;
+
+    String procfsDiskSectorFile =
+            "/sys/block/" + diskName + "/queue/hw_sector_size";
+
+    BufferedReader in;
+    try {
+      in = new BufferedReader(new InputStreamReader(
+            new FileInputStream(procfsDiskSectorFile),
+              Charset.forName("UTF-8")));
+    } catch (FileNotFoundException f) {
+      return defSector;
+    }
+
+    Matcher mat;
+    try {
+      String str = in.readLine();
+      while (str != null) {
+        mat = PROCFS_DISKSECTORFILE_FORMAT.matcher(str);
+        if (mat.find()) {
+          String secSize = mat.group(1);
+          if (secSize != null) {
+            return Integer.parseInt(secSize);
+          }
+        }
+        str = in.readLine();
+      }
+      return defSector;
+    } catch (IOException|NumberFormatException e) {
+      LOG.warn("Error reading the stream " + procfsDiskSectorFile, e);
+      return defSector;
+    } finally {
+      // Close the streams
+      try {
+        in.close();
+      } catch (IOException e) {
+        LOG.warn("Error closing the stream " + procfsDiskSectorFile, e);
+      }
+    }
+  }
+
+  @Override
+  public long getStorageBytesRead() {
+    readProcDisksInfoFile();
+    return numDisksBytesRead;
+  }
+
+  @Override
+  public long getStorageBytesWritten() {
+    readProcDisksInfoFile();
+    return numDisksBytesWritten;
+  }
+
+    System.out.println("Total storage read (bytes) : "
+            + plugin.getStorageBytesRead());
+    System.out.println("Total storage written (bytes) : "
+            + plugin.getStorageBytesWritten());

INS26 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS74 INS59 INS44 INS29 INS83 INS39 INS42 INS8 INS29 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS65 INS42 INS42 INS45 INS42 INS42 INS32 INS65 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS34 INS43 INS43 INS43 INS42 INS33 INS65 INS43 INS42 INS21 INS21 INS65 INS21 INS21 INS60 INS54 INS60 INS54 INS65 INS65 INS43 INS42 INS39 INS42 INS6 INS60 INS60 INS54 INS60 INS54 INS42 INS21 INS41 INS42 INS21 INS41 INS21 INS21 INS66 INS42 INS42 INS27 INS66 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS66 INS42 INS7 INS7 INS66 INS66 INS7 INS7 INS43 INS59 INS8 INS12 INS43 INS59 INS8 INS12 INS8 INS66 INS66 INS66 INS42 INS27 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS8 INS12 INS8 INS32 INS42 INS32 INS42 INS32 INS32 INS45 INS45 INS45 INS45 INS45 INS22 INS42 INS22 INS14 INS42 INS34 INS42 INS34 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS60 INS61 INS44 INS8 INS54 INS27 INS27 INS42 INS42 INS27 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS60 INS61 INS41 INS44 INS8 INS54 INS42 INS42 INS40 INS42 INS27 INS40 INS42 INS27 INS52 INS42 INS52 INS42 INS74 INS7 INS43 INS42 INS41 INS43 INS59 INS27 INS8 INS43 INS42 INS21 INS8 INS12 INS42 INS33 INS42 INS33 INS45 INS42 INS45 INS7 INS43 INS42 INS41 INS43 INS59 INS27 INS8 INS42 INS84 INS42 INS21 INS41 INS8 INS12 INS45 INS32 INS45 INS32 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS21 INS42 INS32 INS21 INS44 INS8 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS21 INS43 INS43 INS32 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS14 INS42 INS42 INS7 INS32 INS8 INS7 INS42 INS42 INS27 INS42 INS32 INS43 INS42 INS21 INS43 INS14 INS42 INS42 INS7 INS32 INS8 INS7 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS43 INS42 INS21 INS42 INS43 INS14 INS32 INS42 INS32 INS42 INS42 INS60 INS6 INS25 INS60 INS51 INS60 INS60 INS25 INS21 INS21 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS14 INS32 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS59 INS27 INS27 INS8 INS43 INS59 INS42 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS7 INS7 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS32 INS32 INS21 INS18 INS42 INS42 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS41 INS42 INS27 INS42 INS27 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS45 INS42 INS42 INS42 INS34 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS7 INS27 INS8 INS42 INS42 INS34 INS42 INS42 INS34 INS33 INS42 INS33 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS32 INS33 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34