HDFS-13043. RBF: Expose the state of the Routers in the federation. Contributed by Inigo Goiri.

+import org.apache.hadoop.hdfs.server.federation.store.RouterStore;
+import org.apache.hadoop.hdfs.server.federation.store.protocol.GetRouterRegistrationsRequest;
+import org.apache.hadoop.hdfs.server.federation.store.protocol.GetRouterRegistrationsResponse;
+import org.apache.hadoop.hdfs.server.federation.store.records.RouterState;
+import org.apache.hadoop.hdfs.server.federation.store.records.StateStoreVersion;
+import com.google.common.annotations.VisibleForTesting;
+
+  /** Router state store. */
+  private RouterStore routerStore;
+      this.routerStore = stateStore.getRegisteredRecordStore(
+          RouterStore.class);
+  public String getRouters() {
+    final Map<String, Map<String, Object>> info = new LinkedHashMap<>();
+    try {
+      // Get all the routers in order
+      GetRouterRegistrationsRequest request =
+          GetRouterRegistrationsRequest.newInstance();
+      GetRouterRegistrationsResponse response =
+          routerStore.getRouterRegistrations(request);
+      final List<RouterState> routers = response.getRouters();
+      List<RouterState> routersOrder = new ArrayList<>(routers);
+      Collections.sort(routersOrder);
+
+      // Dump router information into JSON
+      for (RouterState record : routersOrder) {
+        Map<String, Object> innerInfo = new HashMap<>();
+        Map<String, Object> map = getJson(record);
+        innerInfo.putAll(map);
+        long dateModified = record.getDateModified();
+        long lastHeartbeat = getSecondsSince(dateModified);
+        innerInfo.put("lastHeartbeat", lastHeartbeat);
+
+        StateStoreVersion stateStoreVersion = record.getStateStoreVersion();
+        if (stateStoreVersion == null) {
+          LOG.error("Cannot get State Store versions");
+        } else {
+          setStateStoreVersions(innerInfo, stateStoreVersion);
+        }
+
+        info.put(record.getPrimaryKey(),
+            Collections.unmodifiableMap(innerInfo));
+      }
+    } catch (IOException e) {
+      LOG.error("Cannot get Routers JSON from the State Store", e);
+      return "{}";
+    }
+    return JSON.toString(info);
+  }
+
+  /**
+   * Populate the map with the State Store versions.
+   *
+   * @param innerInfo Map with the information.
+   * @param version State Store versions.
+   */
+  private static void setStateStoreVersions(
+      Map<String, Object> map, StateStoreVersion version) {
+
+    long membershipVersion = version.getMembershipVersion();
+    String lastMembershipUpdate = getDateString(membershipVersion);
+    map.put("lastMembershipUpdate", lastMembershipUpdate);
+
+    long mountTableVersion = version.getMountTableVersion();
+    String lastMountTableDate = getDateString(mountTableVersion);
+    map.put("lastMountTableUpdate", lastMountTableDate);
+  }
+
+  @Override
-  private static String getDateString(long time) {
+  @VisibleForTesting
+  static String getDateString(long time) {

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS29 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS65 INS42 INS42 INS42 INS42 INS60 INS54 INS41 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS60 INS60 INS21 INS60 INS60 INS21 INS42 INS66 INS83 INS74 INS59 INS8 INS12 INS32 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS43 INS42 INS39 INS59 INS43 INS59 INS32 INS39 INS59 INS43 INS59 INS32 INS21 INS43 INS43 INS74 INS42 INS14 INS60 INS60 INS60 INS60 INS21 INS70 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS7 INS42 INS42 INS43 INS43 INS43 INS74 INS43 INS59 INS43 INS59 INS83 INS74 INS59 INS74 INS59 INS32 INS44 INS42 INS8 INS43 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS60 INS60 INS21 INS60 INS60 INS21 INS60 INS25 INS21 INS42 INS32 INS45 INS52 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS59 INS74 INS59 INS32 INS39 INS59 INS39 INS59 INS32 INS43 INS59 INS27 INS8 INS8 INS32 INS42 INS42 INS45 INS42 INS43 INS43 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 DEL83