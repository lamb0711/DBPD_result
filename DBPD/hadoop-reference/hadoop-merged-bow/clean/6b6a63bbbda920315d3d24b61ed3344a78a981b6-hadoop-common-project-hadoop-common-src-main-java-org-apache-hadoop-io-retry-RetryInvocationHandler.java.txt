Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

+import java.util.LinkedList;
+import java.util.List;
-      } catch (Exception e) {
+      } catch (Exception ex) {
-        RetryAction action = policy.shouldRetry(e, retries++,
-            invocationFailoverCount, isIdempotentOrAtMostOnce);
-        if (action.action == RetryAction.RetryDecision.FAIL) {
-          if (action.reason != null) {
+        List<RetryAction> actions = extractActions(policy, ex, retries++,
+                invocationFailoverCount, isIdempotentOrAtMostOnce);
+        RetryAction failAction = getFailAction(actions);
+        if (failAction != null) {
+          if (failAction.reason != null) {
-                + ". Not retrying because " + action.reason, e);
+                + ". Not retrying because " + failAction.reason, ex);
-          throw e;
+          throw ex;
-          if (action.action == RetryAction.RetryDecision.FAILOVER_AND_RETRY &&
-              worthLogging) {
+          RetryAction failOverAction = getFailOverAction(actions);
+          long delay = getDelayMillis(actions);
+          if (failOverAction != null && worthLogging) {
-            msg += ". Trying to fail over " + formatSleepMessage(action.delayMillis);
-            LOG.info(msg, e);
+            msg += ". Trying to fail over " + formatSleepMessage(delay);
+            LOG.info(msg, ex);
-                  + formatSleepMessage(action.delayMillis), e);
+                  + formatSleepMessage(delay), ex);
-          
-          if (action.delayMillis > 0) {
-            Thread.sleep(action.delayMillis);
+
+          if (delay > 0) {
+            Thread.sleep(delay);
-          if (action.action == RetryAction.RetryDecision.FAILOVER_AND_RETRY) {
+          if (failOverAction != null) {
-  
+
+  /**
+   * Obtain a retry delay from list of RetryActions.
+   */
+  private long getDelayMillis(List<RetryAction> actions) {
+    long retVal = 0;
+    for (RetryAction action : actions) {
+      if (action.action == RetryAction.RetryDecision.FAILOVER_AND_RETRY ||
+              action.action == RetryAction.RetryDecision.RETRY) {
+        if (action.delayMillis > retVal) {
+          retVal = action.delayMillis;
+        }
+      }
+    }
+    return retVal;
+  }
+
+  /**
+   * Return the first FAILOVER_AND_RETRY action.
+   */
+  private RetryAction getFailOverAction(List<RetryAction> actions) {
+    for (RetryAction action : actions) {
+      if (action.action == RetryAction.RetryDecision.FAILOVER_AND_RETRY) {
+        return action;
+      }
+    }
+    return null;
+  }
+
+  /**
+   * Return the last FAIL action.. only if there are no RETRY actions.
+   */
+  private RetryAction getFailAction(List<RetryAction> actions) {
+    RetryAction fAction = null;
+    for (RetryAction action : actions) {
+      if (action.action == RetryAction.RetryDecision.FAIL) {
+        fAction = action;
+      } else {
+        // Atleast 1 RETRY
+        return null;
+      }
+    }
+    return fAction;
+  }
+
+  private List<RetryAction> extractActions(RetryPolicy policy, Exception ex,
+                                           int i, int invocationFailoverCount,
+                                           boolean isIdempotentOrAtMostOnce)
+          throws Exception {
+    List<RetryAction> actions = new LinkedList<>();
+    if (ex instanceof MultiException) {
+      for (Exception th : ((MultiException) ex).getExceptions().values()) {
+        actions.add(policy.shouldRetry(th, i, invocationFailoverCount,
+                isIdempotentOrAtMostOnce));
+      }
+    } else {
+      actions.add(policy.shouldRetry(ex, i,
+              invocationFailoverCount, isIdempotentOrAtMostOnce));
+    }
+    return actions;
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS65 INS74 INS42 INS60 INS70 INS41 INS65 INS42 INS74 INS42 INS70 INS41 INS65 INS42 INS74 INS42 INS60 INS70 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS25 INS41 INS66 INS43 INS43 INS39 INS59 INS44 INS42 INS8 INS42 INS66 INS43 INS43 INS44 INS42 INS8 INS33 INS66 INS43 INS43 INS43 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS25 INS42 INS42 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS33 INS43 INS42 INS25 INS43 INS43 INS42 INS14 INS42 INS43 INS70 INS21 INS42 INS27 INS8 INS42 MOV27 INS8 INS42 MOV27 INS8 INS8 INS42 INS42 INS74 INS42 INS44 INS32 INS8 INS32 MOV27 INS27 INS25 INS41 INS21 INS41 INS43 INS43 INS42 INS32 INS42 INS21 INS42 INS42 INS32 UPD42 INS60 INS40 INS40 INS27 INS8 INS42 INS7 INS33 INS42 INS42 INS36 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 MOV43 INS59 INS27 INS40 INS42 INS21 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS43 UPD42 INS42 INS32 INS42 INS33 INS60 INS60 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 INS43 INS59 INS39 INS59 INS27 INS42 INS40 INS42 UPD40 INS42 INS42 INS32 INS42 INS32 INS27 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 UPD42 UPD42 INS42 UPD40 INS42 UPD42 INS42 DEL40 DEL40 DEL40 DEL40