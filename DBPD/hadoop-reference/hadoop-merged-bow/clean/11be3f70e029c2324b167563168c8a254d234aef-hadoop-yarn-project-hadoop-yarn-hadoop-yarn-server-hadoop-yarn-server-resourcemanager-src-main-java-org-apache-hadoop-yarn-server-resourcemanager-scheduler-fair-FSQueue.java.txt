YARN-4212. FairScheduler: Can't create a DRF queue under a FAIR policy queue. (Yufei Gu via kasha)

+    setPolicy(scheduler.getAllocationConfiguration().getSchedulingPolicy(name));
-   * metrics.
-   * This function is invoked when a new queue is created or reloading the
-   * allocation configuration.
+   * metrics. This method is invoked when creating a new queue or reloading
+   * the allocation file.
+   * This method does not set policies for queues when reloading the allocation
+   * file since we need to either set all new policies or nothing, which is
+   * handled by method {@link #verifyAndSetPolicyFromConf}.
-    allocConf.initFSQueue(this, scheduler);
+    allocConf.initFSQueue(this);
-  protected void throwPolicyDoesnotApplyException(SchedulingPolicy policy)
-      throws AllocationConfigurationException {
-    throw new AllocationConfigurationException("SchedulingPolicy " + policy
-        + " does not apply to queue " + getName());
+  public void setPolicy(SchedulingPolicy policy) {
+    policy.initialize(scheduler.getClusterResource());
+    this.policy = policy;
-  public abstract void setPolicy(SchedulingPolicy policy)
-      throws AllocationConfigurationException;
-
+
+  /**
+   * Recursively check policies for queues in pre-order. Get queue policies
+   * from the allocation file instead of properties of {@link FSQueue} objects.
+   * Set the policy for current queue if there is no policy violation for its
+   * children. This method is invoked while reloading the allocation file.
+   *
+   * @param queueConf allocation configuration
+   * @return true if no policy violation and successfully set polices
+   *         for queues; false otherwise
+   */
+  public boolean verifyAndSetPolicyFromConf(AllocationConfiguration queueConf) {
+    SchedulingPolicy queuePolicy = queueConf.getSchedulingPolicy(getName());
+
+    for (FSQueue child : getChildQueues()) {
+      if (!queuePolicy.isChildPolicyAllowed(
+          queueConf.getSchedulingPolicy(child.getName()))) {
+        return false;
+      }
+      boolean success = child.verifyAndSetPolicyFromConf(queueConf);
+      if (!success) {
+        return false;
+      }
+    }
+
+    // Set the policy if no policy violation for all children
+    setPolicy(queuePolicy);
+    return true;
+  }

MOV31 UPD83 UPD42 INS8 INS29 UPD39 UPD42 INS44 INS8 INS21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS60 INS70 INS21 INS41 INS32 UPD66 INS66 UPD66 INS66 INS66 INS65 UPD66 INS32 INS7 INS66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS43 INS59 INS44 INS32 INS8 INS32 INS9 INS42 INS32 INS67 INS42 INS42 INS32 INS22 INS42 INS42 MOV42 INS42 INS32 INS43 INS42 INS42 INS25 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS38 INS8 INS39 INS59 INS38 INS8 INS42 INS42 INS32 INS41 INS42 INS32 INS42 INS41 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL83 DEL43 DEL42 DEL44 DEL43