HDFS-4545. With snapshots, FSDirectory.unprotectedSetReplication(..) always changes file replication but it may or may not changes block replication.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1452636 13f79535-47bb-0310-9956-ffa450edef68

-  INode unprotectedAddFile( long id,
+  INodeFile unprotectedAddFile( long id,
-    final INode newNode;
+    final INodeFile newNode;
-    INodesInPath srcInodesInPath = rootDir.getINodesInPath4Write(src, false);
-    INode[] srcInodes = srcInodesInPath.getINodes();
-    INode srcInode = srcInodes[srcInodes.length-1];
+    INodesInPath srcIIP = rootDir.getINodesInPath4Write(src, false);
+    final INode srcInode = srcIIP.getLastINode();
-    if (srcInodes.length == 1) {
+    if (srcIIP.getINodes().length == 1) {
-        dst.equals(((INodeSymlink)srcInode).getSymlinkString())) {
+        dst.equals(srcInode.asSymlink().getSymlinkString())) {
-    INodesInPath dstInodesInPath = rootDir.getExistingPathINodes(dstComponents,
-        dstComponents.length, false);
-    if (dstInodesInPath.isSnapshot()) {
+    final INodesInPath dstIIP = getExistingPathINodes(dstComponents);
+    if (dstIIP.isSnapshot()) {
-    INode[] dstInodes = dstInodesInPath.getINodes();
-    if (dstInodes[dstInodes.length-1] != null) {
+    if (dstIIP.getLastINode() != null) {
-    if (dstInodes[dstInodes.length-2] == null) {
+    final INode dstParent = dstIIP.getINode(-2);
+    if (dstParent == null) {
-    verifyQuotaForRename(srcInodes, dstInodes);
+    verifyQuotaForRename(srcIIP.getINodes(), dstIIP.getINodes());
-      srcChild = removeLastINode(srcInodesInPath);
+      srcChild = removeLastINode(srcIIP);
-      srcChild.setLocalName(dstComponents[dstInodes.length-1]);
+      srcChild.setLocalName(dstComponents[dstComponents.length - 1]);
-      added = addLastINodeNoQuotaCheck(dstInodesInPath, srcChild);
+      added = addLastINodeNoQuotaCheck(dstIIP, srcChild);
-        srcInodes[srcInodes.length-2].updateModificationTime(timestamp,
-            srcInodesInPath.getLatestSnapshot());
-        dstInodes[dstInodes.length-2].updateModificationTime(timestamp,
-            dstInodesInPath.getLatestSnapshot());
+        final INode srcParent = srcIIP.getINode(-2);
+        srcParent.updateModificationTime(timestamp, srcIIP.getLatestSnapshot());
+        dstParent.updateModificationTime(timestamp, dstIIP.getLatestSnapshot());
-        addLastINodeNoQuotaCheck(srcInodesInPath, srcChild);
+        addLastINodeNoQuotaCheck(srcIIP, srcChild);
-    final INodesInPath srcInodesInPath = rootDir.getINodesInPath4Write(src,
-        false);
-    final INode[] srcInodes = srcInodesInPath.getINodes();
-    final INode srcInode = srcInodes[srcInodes.length - 1];
+    final INodesInPath srcIIP = rootDir.getINodesInPath4Write(src, false);
+    final INode srcInode = srcIIP.getLastINode();
-    if (srcInodes.length == 1) {
+    if (srcIIP.getINodes().length == 1) {
-        dst.equals(((INodeSymlink)srcInode).getSymlinkString())) {
+        dst.equals(srcInode.asSymlink().getSymlinkString())) {
-    final INodesInPath dstInodesInPath = rootDir.getINodesInPath4Write(
-        dst, false);
-    final INode[] dstInodes = dstInodesInPath.getINodes();
-    INode dstInode = dstInodes[dstInodes.length - 1];
-    if (dstInodes.length == 1) {
+    final INodesInPath dstIIP = rootDir.getINodesInPath4Write(dst, false);
+    if (dstIIP.getINodes().length == 1) {
+
+    final INode dstInode = dstIIP.getLastINode();
-        final ReadOnlyList<INode> children = ((INodeDirectory) dstInode
-            ).getChildrenList(dstInodesInPath.getPathSnapshot());
+        final ReadOnlyList<INode> children = dstInode.asDirectory()
+            .getChildrenList(null);
-    if (dstInodes[dstInodes.length - 2] == null) {
+
+    final INode dstParent = dstIIP.getINode(-2);
+    if (dstParent == null) {
-    if (!dstInodes[dstInodes.length - 2].isDirectory()) {
+    if (!dstParent.isDirectory()) {
-    verifyQuotaForRename(srcInodes, dstInodes);
-    INode removedSrc = removeLastINode(srcInodesInPath);
+    verifyQuotaForRename(srcIIP.getINodes(), dstIIP.getINodes());
+    INode removedSrc = removeLastINode(srcIIP);
-        removedDst = removeLastINode(dstInodesInPath);
+        removedDst = removeLastINode(dstIIP);
-      removedSrc.setLocalName(dstInodesInPath.getLastLocalName());
+      removedSrc.setLocalName(dstIIP.getLastLocalName());
-      if (addLastINodeNoQuotaCheck(dstInodesInPath, removedSrc)) {
+      if (addLastINodeNoQuotaCheck(dstIIP, removedSrc)) {
-        srcInodes[srcInodes.length - 2].updateModificationTime(timestamp,
-            srcInodesInPath.getLatestSnapshot());
-        dstInodes[dstInodes.length - 2].updateModificationTime(timestamp,
-            dstInodesInPath.getLatestSnapshot());
+
+        final INode srcParent = srcIIP.getINode(-2);
+        srcParent.updateModificationTime(timestamp, srcIIP.getLatestSnapshot());
+        dstParent.updateModificationTime(timestamp, dstIIP.getLatestSnapshot());
-              dstInodesInPath.getLatestSnapshot(), collectedBlocks);
+              dstIIP.getLatestSnapshot(), collectedBlocks);
-        addLastINodeNoQuotaCheck(srcInodesInPath, removedSrc);
+        addLastINodeNoQuotaCheck(srcIIP, removedSrc);
-        addLastINodeNoQuotaCheck(dstInodesInPath, removedDst);
+        addLastINodeNoQuotaCheck(dstIIP, removedDst);
-   * @param oldReplication old replication - output parameter
+   * @param blockRepls block replications - output parameter
-  Block[] setReplication(String src, short replication, short[] oldReplication)
+  Block[] setReplication(String src, short replication, short[] blockRepls)
-    Block[] fileBlocks = null;
-      fileBlocks = unprotectedSetReplication(src, replication, oldReplication);
+      final Block[] fileBlocks = unprotectedSetReplication(
+          src, replication, blockRepls);
-      short[] oldReplication) throws QuotaExceededException,
+      short[] blockRepls) throws QuotaExceededException,
-    final INodesInPath inodesInPath = rootDir.getINodesInPath4Write(src, true);
-    final INode[] inodes = inodesInPath.getINodes();
-    INode inode = inodes[inodes.length - 1];
+    final INodesInPath iip = rootDir.getINodesInPath4Write(src, true);
+    final INode inode = iip.getLastINode();
-    INodeFile fileNode = (INodeFile)inode;
-    final short oldRepl = fileNode.getFileReplication();
+    INodeFile file = inode.asFile();
+    final short oldBR = file.getBlockReplication();
-    // check disk quota
-    long dsDelta = (replication - oldRepl) * (fileNode.diskspaceConsumed()/oldRepl);
-    updateCount(inodesInPath, 0, dsDelta, true);
-
-    fileNode = fileNode.setFileReplication(
-        replication, inodesInPath.getLatestSnapshot());
-
-    if (oldReplication != null) {
-      oldReplication[0] = oldRepl;
+    // before setFileReplication, check for increasing block replication.
+    // if replication > oldBR, then newBR == replication.
+    // if replication < oldBR, we don't know newBR yet. 
+    if (replication > oldBR) {
+      long dsDelta = (replication - oldBR)*(file.diskspaceConsumed()/oldBR);
+      updateCount(iip, 0, dsDelta, true);
-    return fileNode.getBlocks();
+
+    file = file.setFileReplication(replication, iip.getLatestSnapshot());
+    
+    final short newBR = file.getBlockReplication(); 
+    // check newBR < oldBR case. 
+    if (newBR < oldBR) {
+      long dsDelta = (newBR - oldBR)*(file.diskspaceConsumed()/newBR);
+      updateCount(iip, 0, dsDelta, true);
+    }
+
+    if (blockRepls != null) {
+      blockRepls[0] = oldBR;
+      blockRepls[1] = newBR;
+    }
+    return file.getBlocks();
-      return !inode.isFile() || ((INodeFile)inode).getBlocks() != null;
+      return !inode.isFile() || inode.asFile().getBlocks() != null;
-  
-  
-   * Must be public because also called from EditLogs
-   * NOTE: - it does not update quota (not needed for concat)
-  public void unprotectedConcat(String target, String [] srcs, long timestamp) 
+  void unprotectedConcat(String target, String [] srcs, long timestamp) 
-    final INodesInPath trgINodesInPath = rootDir.getINodesInPath4Write(target, true);
-    final INode[] trgINodes = trgINodesInPath.getINodes();
-    INodeFile trgInode = (INodeFile) trgINodes[trgINodes.length-1];
-    INodeDirectory trgParent = (INodeDirectory)trgINodes[trgINodes.length-2];
-    final Snapshot trgLatestSnapshot = trgINodesInPath.getLatestSnapshot();
+    final INodesInPath trgIIP = rootDir.getINodesInPath4Write(target, true);
+    final INode[] trgINodes = trgIIP.getINodes();
+    final INodeFile trgInode = trgIIP.getLastINode().asFile();
+    INodeDirectory trgParent = trgINodes[trgINodes.length-2].asDirectory();
+    final Snapshot trgLatestSnapshot = trgIIP.getLatestSnapshot();
-      allSrcInodes[i] = (INodeFile)getINode4Write(srcs[i]);
+      allSrcInodes[i] = getINode4Write(srcs[i]).asFile();
-    unprotectedUpdateCount(trgINodesInPath, trgINodes.length-1, -count, 0);
+    unprotectedUpdateCount(trgIIP, trgINodes.length-1, -count, 0);
-      return !((INodeDirectory)inode).getChildrenList(s).isEmpty();
+      return !inode.asDirectory().getChildrenList(s).isEmpty();
-   * @param inodes the INode array resolved from the path
+   * @param iip the inodes resolved from the path
-  int unprotectedDelete(INodesInPath inodesInPath,
-      BlocksMapUpdateInfo collectedBlocks, long mtime)
-          throws NSQuotaExceededException {
+  int unprotectedDelete(INodesInPath iip, BlocksMapUpdateInfo collectedBlocks,
+      long mtime) throws NSQuotaExceededException {
-    INode targetNode = inodesInPath.getLastINode();
+    INode targetNode = iip.getLastINode();
-    final Snapshot latestSnapshot = inodesInPath.getLatestSnapshot();
+    final Snapshot latestSnapshot = iip.getLatestSnapshot();
-    inodesInPath.setLastINode(targetNode);
+    iip.setLastINode(targetNode);
-    removeLastINode(inodesInPath);
+    removeLastINode(iip);
-    if (target instanceof INodeDirectory) {
-      INodeDirectory targetDir = (INodeDirectory) target;
+    if (target.isDirectory()) {
+      INodeDirectory targetDir = target.asDirectory();
-      INodeDirectory dirInode = (INodeDirectory)targetNode;
+      final INodeDirectory dirInode = targetNode.asDirectory();
-    if (node instanceof INodeDirectorySnapshottable) {
+    if (node.isDirectory()
+        && node.asDirectory() instanceof INodeDirectorySnapshottable) {
-      return i != null && i.isFile()? ((INodeFile)i).getBlocks(): null;
+      return i != null && i.isFile()? i.asFile().getBlocks(): null;
+
+  INodesInPath getExistingPathINodes(byte[][] components)
+      throws UnresolvedLinkException {
+    return rootDir.getExistingPathINodes(components, components.length, false);
+  }
+
-   * @param inodes an array of inodes on a path
+   * @param iip inodes in a path
-  private void updateCount(INodesInPath inodesInPath, int numOfINodes, 
+  private void updateCount(INodesInPath iip, int numOfINodes, 
-    final INode[] inodes = inodesInPath.getINodes();
+    final INode[] inodes = iip.getINodes();
-    unprotectedUpdateCount(inodesInPath, numOfINodes, nsDelta, dsDelta);
+    unprotectedUpdateCount(iip, numOfINodes, nsDelta, dsDelta);
-      INodesInPath inodesInPath = rootDir.getExistingPathINodes(components,
-          components.length, false);
-      if (inodesInPath.isSnapshot()) {
+      INodesInPath iip = getExistingPathINodes(components);
+      if (iip.isSnapshot()) {
-      INode[] inodes = inodesInPath.getINodes();
+      INode[] inodes = iip.getINodes();
-        unprotectedMkdir(namesystem.allocateNewInodeId(), inodesInPath, i,
+        unprotectedMkdir(namesystem.allocateNewInodeId(), iip, i,
-    INodesInPath inodesInPath = rootDir.getExistingPathINodes(components,
-        components.length, false);
-    INode[] inodes = inodesInPath.getINodes();
+    INodesInPath iip = getExistingPathINodes(components);
+    INode[] inodes = iip.getINodes();
-    unprotectedMkdir(inodeId, inodesInPath, pos, components[pos], permissions,
+    unprotectedMkdir(inodeId, iip, pos, components[pos], permissions,
-      INodesInPath inodesInPath = rootDir.getExistingPathINodes(components,
-          components.length, false);
-      return addLastINode(inodesInPath, child, true);
+      return addLastINode(getExistingPathINodes(components), child, true);
-    final INodeDirectory parent = (INodeDirectory)pathComponents[pos-1];
+    final INodeDirectory parent = pathComponents[pos-1].asDirectory();
-  private boolean addChild(INodesInPath inodesInPath, int pos,
+  private boolean addChild(INodesInPath iip, int pos,
-    final INode[] inodes = inodesInPath.getINodes();
+    final INode[] inodes = iip.getINodes();
-    updateCount(inodesInPath, pos,
+    updateCount(iip, pos,
-    final boolean added = ((INodeDirectory)inodes[pos-1]).addChild(child, true,
-        inodesInPath.getLatestSnapshot());
+    final INodeDirectory parent = inodes[pos-1].asDirectory();
+    final boolean added = parent.addChild(child, true, iip.getLatestSnapshot());
-      updateCountNoQuotaCheck(inodesInPath, pos,
+      updateCountNoQuotaCheck(iip, pos,
-    final boolean removed = ((INodeDirectory)inodes[pos-1]).removeChild(
-        inodes[pos], latestSnapshot);
+    final INodeDirectory parent = inodes[pos-1].asDirectory();
+    final boolean removed = parent.removeChild(inodes[pos], latestSnapshot);
-     if (node instanceof INodeFile) {
-       INodeFile fileNode = (INodeFile)node;
+     if (node.isFile()) {
+       final INodeFile fileNode = node.asFile();
-        node.isSymlink() ? ((INodeSymlink)node).getSymlink() : null,
+        node.isSymlink() ? node.asSymlink().getSymlink() : null,
-      if (node instanceof INodeFile) {
-        INodeFile fileNode = (INodeFile)node;
+      if (node.isFile()) {
+        final INodeFile fileNode = node.asFile();
-          node.isSymlink() ? ((INodeSymlink)node).getSymlink() : null,
+          node.isSymlink() ? node.asSymlink().getSymlink() : null,

INS31 MOV43 MOV60 MOV60 MOV60 MOV43 INS42 INS44 INS43 INS8 UPD42 UPD42 INS25 INS60 INS25 UPD42 INS5 INS42 INS42 INS41 UPD42 UPD42 INS60 INS60 MOV43 INS83 MOV43 INS83 INS83 MOV43 MOV43 MOV43 INS43 UPD42 UPD66 MOV43 INS27 INS8 INS83 INS39 INS59 INS27 INS8 INS83 MOV43 MOV43 UPD42 UPD66 INS32 INS27 INS39 INS85 INS85 MOV32 UPD42 UPD66 MOV5 MOV43 MOV5 MOV43 INS83 INS39 INS59 MOV43 INS83 INS39 INS59 INS32 INS32 UPD42 UPD42 INS22 UPD42 UPD42 INS32 UPD42 INS42 INS32 INS32 UPD42 UPD42 INS22 UPD42 INS22 UPD42 INS32 INS42 UPD42 INS42 INS32 INS32 INS60 UPD42 UPD42 UPD42 INS32 UPD42 INS42 INS42 MOV60 MOV21 UPD42 INS42 INS32 INS42 INS42 INS60 INS21 UPD42 INS21 UPD42 UPD42 INS32 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS32 MOV62 UPD42 UPD42 UPD42 INS41 INS32 UPD42 UPD42 INS42 INS32 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS38 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS32 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS38 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 INS83 MOV5 INS59 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS39 INS59 INS32 INS7 UPD42 INS32 INS42 MOV2 INS42 UPD42 UPD42 UPD42 INS83 MOV43 INS42 INS42 INS32 UPD42 UPD42 INS32 MOV2 INS42 UPD42 MOV2 INS42 INS42 INS42 INS42 INS9 INS32 MOV2 UPD42 INS42 INS42 MOV2 INS42 INS83 MOV43 INS83 MOV43 INS42 INS42 INS32 INS34 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS34 UPD42 INS60 INS21 INS42 INS32 UPD42 UPD42 INS42 INS27 INS42 INS42 INS34 INS42 INS9 UPD42 INS2 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS32 UPD42 INS42 INS32 MOV42 MOV9 INS42 INS42 UPD42 INS32 INS32 INS32 INS32 INS42 INS42 UPD42 UPD42 INS83 MOV43 INS59 INS32 INS42 INS42 UPD42 INS83 INS43 INS59 INS32 MOV42 MOV42 MOV42 UPD42 MOV42 INS36 INS36 UPD42 INS42 INS34 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 INS42 INS32 INS42 MOV42 MOV42 MOV32 INS42 UPD42 INS42 INS42 INS32 INS42 MOV42 MOV42 MOV32 INS42 UPD42 UPD42 INS27 INS27 INS32 INS32 INS42 INS42 UPD42 INS42 INS42 INS38 UPD42 UPD42 INS32 UPD42 MOV42 INS33 UPD42 INS42 INS42 INS38 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 UPD42 MOV42 INS34 UPD42 INS42 INS42 UPD42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL59 DEL60 DEL40 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL40 DEL9 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL43 DEL85 DEL5 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL40 DEL34 DEL27 DEL2 DEL32 DEL21 DEL42 DEL40 DEL34 DEL27 DEL2 DEL40 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL59 DEL60 DEL40 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL40 DEL34 DEL27 DEL2 DEL32 DEL21 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL59 DEL60 DEL42 DEL11 DEL42 DEL11 DEL36 DEL66 DEL66 DEL83 DEL42 DEL43 DEL42 DEL40 DEL34 DEL27 DEL2 DEL11 DEL42 DEL43 DEL11 DEL42 DEL43 DEL11 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL62 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL40 DEL9 DEL42 DEL42 DEL40 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL11 DEL42 DEL43 DEL85 DEL5 DEL39 DEL42 DEL43 DEL11 DEL36 DEL42 DEL42 DEL9 DEL42 DEL42 DEL32 DEL39 DEL11 DEL36 DEL42 DEL42 DEL62 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL62 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL36