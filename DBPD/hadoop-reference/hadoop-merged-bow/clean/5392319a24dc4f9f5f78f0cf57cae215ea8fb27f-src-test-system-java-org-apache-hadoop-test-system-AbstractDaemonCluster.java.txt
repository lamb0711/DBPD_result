HADOOP-6772. Utilities for system tests specific. Contributed by Vinay Thota.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@948237 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.io.FileOutputStream;
+import java.util.Enumeration;
+import java.util.Hashtable;
+  private String newConfDir = null;  
+  private static final  String CONF_HADOOP_LOCAL_DIR =
+      "test.system.hdrc.hadoop.local.confdir"; 
+  private final static Object waitLock = new Object();
+  
+  /**
+   * It's a local folder where the config file stores temporarily
+   * while serializing the object.
+   * @return String temporary local folder path for configuration.
+   */
+  private String getHadoopLocalConfDir() {
+    String hadoopLocalConfDir = conf.get(CONF_HADOOP_LOCAL_DIR);
+    if (hadoopLocalConfDir == null || hadoopLocalConfDir.isEmpty()) {
+      LOG.error("No configuration "
+          + "for the CONF_HADOOP_LOCAL_DIR passed");
+      throw new IllegalArgumentException(
+          "No Configuration passed for hadoop conf local directory");
+    }
+    return hadoopLocalConfDir;
+  }
+
+  /**
+   * It uses to restart the cluster with new configuration at runtime.<br/>
+   * @param props attributes for new configuration.
+   * @param configFile configuration file.
+   * @throws IOException if an I/O error occurs.
+   */
+  public void restartClusterWithNewConfig(Hashtable<String,Long> props, 
+      String configFile) throws IOException {
+
+    String mapredConf = null;
+    String localDirPath = null;
+    File localFolderObj = null;
+    File xmlFileObj = null;
+    String confXMLFile = null;
+    Configuration initConf = new Configuration(getConf());
+    Enumeration<String> e = props.keys();
+    while (e.hasMoreElements()) {
+      String propKey = e.nextElement();
+      Long propValue = props.get(propKey);
+      initConf.setLong(propKey,propValue.longValue());
+    }
+
+    localDirPath = getHadoopLocalConfDir();
+    localFolderObj = new File(localDirPath);
+    if (!localFolderObj.exists()) {
+      localFolderObj.mkdir();
+    }
+    confXMLFile = localDirPath + File.separator + configFile;
+    xmlFileObj = new File(confXMLFile);
+    initConf.writeXml(new FileOutputStream(xmlFileObj));
+    newConfDir = clusterManager.pushConfig(localDirPath);
+    stop();
+    waitForClusterToStop();
+    clusterManager.start(newConfDir);
+    waitForClusterToStart();
+    localFolderObj.delete();
+  }
+  
+  /**
+   * It uses to restart the cluster with default configuration.<br/>
+   * @throws IOException if an I/O error occurs.
+   */
+  public void restart() throws 
+      IOException {
+    stop();
+    waitForClusterToStop();
+    start();
+    waitForClusterToStart();
+  }
+  
+  /**
+   * It uses to wait until the cluster is stopped.<br/>
+   * @throws IOException if an I/O error occurs.
+   */
+  public void waitForClusterToStop() throws 
+      IOException {
+    List<Thread> chkDaemonStop = new ArrayList<Thread>();
+    for (List<AbstractDaemonClient> set : daemons.values()) {	  
+      for (AbstractDaemonClient daemon : set) {
+        DaemonStopThread dmStop = new DaemonStopThread(daemon);
+        chkDaemonStop.add(dmStop);
+        dmStop.start();
+      }
+    }
+
+    for (Thread daemonThread : chkDaemonStop){
+      try {
+        daemonThread.join();
+      } catch(InterruptedException intExp) {
+         LOG.warn("Interrupted while thread is joining." + intExp.getMessage());
+      }
+    }
+  }
+ 
+  /**
+   * It uses to wait until the cluster is started.<br/>
+   * @throws IOException if an I/O error occurs.
+   */
+  public void  waitForClusterToStart() throws 
+      IOException {
+    List<Thread> chkDaemonStart = new ArrayList<Thread>();
+    for (List<AbstractDaemonClient> set : daemons.values()) {
+      for (AbstractDaemonClient daemon : set) {
+        DaemonStartThread dmStart = new DaemonStartThread(daemon);
+        chkDaemonStart.add(dmStart);;
+        dmStart.start();
+      }
+    }
+
+    for (Thread daemonThread : chkDaemonStart){
+      try {
+        daemonThread.join();
+      } catch(InterruptedException intExp) {
+        LOG.warn("Interrupted while thread is joining" + intExp.getMessage());
+      }
+    }
+  }
+
+  /**
+   * It waits for specified amount of time.
+   * @param duration time in milliseconds.
+   * @throws InterruptedException if any thread interrupted the current
+   * thread while it is waiting for a notification.
+   */
+  public void waitFor(long duration) {
+    try {
+      synchronized (waitLock) {
+        waitLock.wait(duration);
+      }
+    } catch (InterruptedException intExp) {
+       LOG.warn("Interrrupeted while thread is waiting" + intExp.getMessage());
+    }
+  }
+  
+  class DaemonStartThread extends Thread {
+    private AbstractDaemonClient daemon;
+
+    public DaemonStartThread(AbstractDaemonClient daemon) {
+      this.daemon = daemon;
+    }
+
+    public void run(){
+      LOG.info("Waiting for Daemon " + daemon.getHostName() 
+          + " to come up.....");
+      while (true) { 
+        try {
+          daemon.ping();
+          LOG.info("Daemon is : " + daemon.getHostName() + " pinging...");
+          break;
+        } catch (Exception exp) {
+          LOG.debug(daemon.getHostName() + " is waiting to come up.");
+          waitFor(60000);
+        }
+      }
+    }
+  }
+  
+  class DaemonStopThread extends Thread {
+    private AbstractDaemonClient daemon;
+
+    public DaemonStopThread(AbstractDaemonClient daemon) {
+      this.daemon = daemon;
+    }
+
+    public void run() {
+      LOG.info("Waiting for Daemon " + daemon.getHostName() 
+          + " to stop.....");
+      while (true) {
+        try {
+          daemon.ping();
+          LOG.debug(daemon.getHostName() +" is waiting state to stop.");
+          waitFor(60000);
+        } catch (Exception exp) {
+          LOG.info("Daemon is : " + daemon.getHostName() + " stopped...");
+          break;
+        } 
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS55 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS43 INS23 INS31 INS31 INS42 INS43 INS23 INS31 INS31 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS14 INS65 INS65 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS61 INS21 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS65 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS42 INS60 INS70 INS70 INS65 INS65 INS42 INS60 INS70 INS70 INS65 INS65 INS65 INS39 INS42 INS54 INS42 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS42 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS43 INS66 INS66 INS66 INS43 INS59 INS27 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS43 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS8 INS7 INS7 INS38 INS8 INS7 INS7 INS32 INS7 INS32 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS74 INS59 INS44 INS32 INS8 INS44 INS42 INS8 INS66 INS42 INS66 INS74 INS59 INS44 INS32 INS8 INS44 INS42 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS8 INS12 INS42 INS42 INS43 INS42 INS21 INS21 INS61 INS42 INS42 INS43 INS42 INS21 INS21 INS61 INS42 INS42 INS42 INS32 INS27 INS32 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS42 INS32 INS42 INS14 INS32 INS21 INS42 INS27 INS42 INS14 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS70 INS43 INS42 INS54 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS70 INS43 INS42 INS54 INS51 INS44 INS8 INS42 INS7 INS32 INS9 INS8 INS42 INS7 INS32 INS9 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS14 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS44 INS42 INS8 INS42 INS8 INS12 INS42 INS42 INS74 INS43 INS43 INS44 INS42 INS8 INS42 INS8 INS12 INS42 INS8 INS43 INS42 INS21 INS22 INS42 INS42 INS42 INS27 INS54 INS22 INS42 INS42 INS42 INS27 INS54 INS42 INS42 INS27 INS43 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS44 INS8 INS43 INS43 INS42 INS42 INS43 INS42 INS60 INS21 INS20 INS21 INS21 INS44 INS8 INS21 INS42 INS32 INS52 INS42 INS45 INS32 INS45 INS8 INS12 INS52 INS42 INS45 INS32 INS45 INS8 INS12 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS43 INS42 INS21 INS32 INS42 INS42 INS27 INS42 INS42 INS21 INS21 INS10 INS44 INS8 INS42 INS42 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS32 INS32 INS32 INS43 INS42 INS21 INS10 INS43 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS34 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS27 INS42 INS34 INS32 INS45 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42