HDFS-4914. Use DFSClient.Conf instead of Configuration.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494854 13f79535-47bb-0310-9956-ffa450edef68

+
+  private final Configuration conf;
+  private final Conf dfsClientConf;
-  Configuration conf;
-  final int hdfsTimeout;    // timeout value for a DFS operation.
-  final Conf dfsClientConf;
-  static class Conf {
+  public static class Conf {
+    final int hdfsTimeout;    // timeout value for a DFS operation.
-    final boolean useLegacyBlockReaderLocal;
+
+    final boolean useLegacyBlockReader;
+    final boolean useLegacyBlockReaderLocal;
+    final int shortCircuitStreamsCacheSize;
+    final long shortCircuitStreamsCacheExpiryMs; 
-    Conf(Configuration conf) {
+    public Conf(Configuration conf) {
+      // The hdfsTimeout is currently the same as the ipc timeout 
+      hdfsTimeout = Client.getTimeout(conf);
+
-      timeWindow = conf
-          .getInt(DFS_CLIENT_RETRY_WINDOW_BASE, 3000);
+      timeWindow = conf.getInt(DFS_CLIENT_RETRY_WINDOW_BASE, 3000);
-      nBlockWriteLocateFollowingRetry = conf
-          .getInt(DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_KEY,
-              DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_DEFAULT);
+      nBlockWriteLocateFollowingRetry = conf.getInt(
+          DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_KEY,
+          DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_DEFAULT);
-      useLegacyBlockReaderLocal = conf.getBoolean(
-          DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL,
-          DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL_DEFAULT);
-      domainSocketPath = conf.getTrimmed(DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY,
+
+      useLegacyBlockReader = conf.getBoolean(
+          DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADER,
+          DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADER_DEFAULT);
+      useLegacyBlockReaderLocal = conf.getBoolean(
+          DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL,
+          DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL_DEFAULT);
+      shortCircuitLocalReads = conf.getBoolean(
+          DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY,
+          DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_DEFAULT);
+      domainSocketDataTraffic = conf.getBoolean(
+          DFSConfigKeys.DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC,
+          DFSConfigKeys.DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC_DEFAULT);
+      domainSocketPath = conf.getTrimmed(
+          DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY,
+
+      if (BlockReaderLocal.LOG.isDebugEnabled()) {
+        BlockReaderLocal.LOG.debug(
+            DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL
+            + " = " + useLegacyBlockReaderLocal);
+        BlockReaderLocal.LOG.debug(
+            DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY
+            + " = " + shortCircuitLocalReads);
+        BlockReaderLocal.LOG.debug(
+            DFSConfigKeys.DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
+            + " = " + domainSocketDataTraffic);
+        BlockReaderLocal.LOG.debug(
+            DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY
+            + " = " + domainSocketPath);
+      }
+
-      shortCircuitLocalReads = conf.getBoolean(
-        DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY,
-        DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_DEFAULT);
-      domainSocketDataTraffic = conf.getBoolean(
-        DFSConfigKeys.DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC,
-        DFSConfigKeys.DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC_DEFAULT);
+      shortCircuitStreamsCacheSize = conf.getInt(
+          DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_SIZE_KEY,
+          DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_SIZE_DEFAULT);
+      shortCircuitStreamsCacheExpiryMs = conf.getLong(
+          DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_EXPIRY_MS_KEY,
+          DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_EXPIRY_MS_DEFAULT);
-  Conf getConf() {
+  public Conf getConf() {
+  Configuration getConfiguration() {
+    return conf;
+  }
+  
-    // The hdfsTimeout is currently the same as the ipc timeout 
-    this.hdfsTimeout = Client.getTimeout(conf);
-    return hdfsTimeout;
+    return dfsClientConf.hdfsTimeout;
-  /**
-   * @return whether the client should use hostnames instead of IPs
-   *    when connecting to DataNodes
-   */
-  boolean connectToDnViaHostname() {
-    return dfsClientConf.connectToDnViaHostname;
-  }
-
+  @Deprecated
+  @Deprecated
+  public LocatedBlocks getLocatedBlocks(String src, long start)
+      throws IOException {
+    return getLocatedBlocks(src, start, dfsClientConf.prefetchSize);
+  }
+
-   * @param connectToDnViaHostname {@link #connectToDnViaHostname()}
+   * @param connectToDnViaHostname whether the client should use hostnames instead of IPs
-  static MD5MD5CRC32FileChecksum getFileChecksum(String src,
+  private static MD5MD5CRC32FileChecksum getFileChecksum(String src,

MOV23 MOV23 MOV31 MOV23 INS31 INS83 INS83 INS83 INS83 MOV23 INS23 INS23 INS23 INS83 INS43 INS42 INS8 INS78 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 MOV21 MOV21 MOV21 INS42 INS41 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS25 INS21 INS21 INS42 INS40 INS42 INS32 UPD66 INS7 INS7 INS32 INS8 INS7 INS7 INS42 INS42 INS42 INS40 INS42 MOV32 INS42 INS32 INS40 INS42 INS21 INS21 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS40 INS32 INS32 INS32 INS32 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS42 INS27 INS40 INS42 INS27 INS40 INS42 INS27 INS40 INS42 INS27 INS40 INS45 INS42 INS40 INS45 INS42 INS40 INS45 INS42 INS40 INS45 INS42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL40 DEL42 DEL68 DEL65