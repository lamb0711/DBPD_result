YARN-1402. Update related Web UI and CLI with exposing client API to check log aggregation status. Contributed by Xuan Gong.

+import org.apache.hadoop.yarn.api.records.LogAggregationStatus;
-import org.apache.hadoop.yarn.server.api.records.LogAggregationStatus;
+  private LogAggregationStatus logAggregationStatusForAppReport;
+      LogAggregationStatus logAggregationStatus = null;
+          logAggregationStatus = this.getLogAggregationStatusForAppReport();
-      return BuilderUtils.newApplicationReport(this.applicationId,
-          currentApplicationAttemptId, this.user, this.queue,
-          this.name, host, rpcPort, clientToAMToken,
+      ApplicationReport report = BuilderUtils.newApplicationReport(
+          this.applicationId, currentApplicationAttemptId, this.user,
+          this.queue, this.name, host, rpcPort, clientToAMToken,
+      report.setLogAggregationStatus(logAggregationStatus);
+      return report;
-      app.logAggregationStatus.put(nodeAddedEvent.getNodeId(),
-        LogAggregationReport.newInstance(app.applicationId, nodeAddedEvent
-          .getNodeId(), app.logAggregationEnabled
-            ? LogAggregationStatus.NOT_START : LogAggregationStatus.DISABLED,
-          ""));
+      if (!app.logAggregationStatus.containsKey(nodeAddedEvent.getNodeId())) {
+        app.logAggregationStatus.put(nodeAddedEvent.getNodeId(),
+          LogAggregationReport.newInstance(app.applicationId, nodeAddedEvent
+            .getNodeId(), app.logAggregationEnabled
+              ? LogAggregationStatus.NOT_START : LogAggregationStatus.DISABLED,
+            ""));
+      }
-              .equals(LogAggregationStatus.FINISHED)
+              .equals(LogAggregationStatus.SUCCEEDED)
+            && !output.getValue().getLogAggregationStatus()
+              .equals(LogAggregationStatus.FAILED)
-              LogAggregationStatus.FINISHED)) {
+              LogAggregationStatus.SUCCEEDED)
+                || report.getLogAggregationStatus().equals(
+                  LogAggregationStatus.FAILED)) {
+
+  @Override
+  public LogAggregationStatus getLogAggregationStatusForAppReport() {
+    if (!logAggregationEnabled) {
+      return LogAggregationStatus.DISABLED;
+    }
+    if (this.logAggregationStatusForAppReport == LogAggregationStatus.FAILED
+        || this.logAggregationStatusForAppReport == LogAggregationStatus.SUCCEEDED) {
+      return this.logAggregationStatusForAppReport;
+    }
+    try {
+      this.readLock.lock();
+      Map<NodeId, LogAggregationReport> reports =
+          getLogAggregationReportsForApp();
+      if (reports.size() == 0) {
+        return null;
+      }
+      int logNotStartCount = 0;
+      int logCompletedCount = 0;
+      int logTimeOutCount = 0;
+      int logFailedCount = 0;
+      for (Entry<NodeId, LogAggregationReport> report : reports.entrySet()) {
+        switch (report.getValue().getLogAggregationStatus()) {
+          case NOT_START:
+            logNotStartCount++;
+            break;
+          case SUCCEEDED:
+            logCompletedCount++;
+            break;
+          case FAILED:
+            logFailedCount++;
+            logCompletedCount++;
+            break;
+          case TIME_OUT:
+            logTimeOutCount++;
+            logCompletedCount++;
+            break;
+          default:
+            break;
+        }
+      }
+      if (logNotStartCount == reports.size()) {
+        return LogAggregationStatus.NOT_START;
+      } else if (logCompletedCount == reports.size()) {
+        // We should satisfy two condition in order to return SUCCEEDED or FAILED
+        // 1) make sure the application is in final state
+        // 2) logs status from all NMs are SUCCEEDED/FAILED/TIMEOUT
+        // The SUCCEEDED/FAILED status is the final status which means
+        // the log aggregation is finished. And the log aggregation status will
+        // not be updated anymore.
+        if (logFailedCount > 0 && isAppInFinalState(this)) {
+          this.logAggregationStatusForAppReport = LogAggregationStatus.FAILED;
+          return LogAggregationStatus.FAILED;
+        } else if (logTimeOutCount > 0) {
+          return LogAggregationStatus.TIME_OUT;
+        }
+        if (isAppInFinalState(this)) {
+          this.logAggregationStatusForAppReport = LogAggregationStatus.SUCCEEDED;
+          return LogAggregationStatus.SUCCEEDED;
+        }
+      }
+      return LogAggregationStatus.RUNNING;
+    } finally {
+      this.readLock.unlock();
+    }
+  }

MOV26 UPD40 INS23 INS31 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS25 INS25 INS54 INS25 INS38 INS8 INS27 INS8 INS8 INS8 INS60 INS60 INS21 INS38 INS8 INS42 INS41 INS27 INS27 INS41 INS21 INS60 INS25 INS60 INS60 INS60 INS60 INS70 INS25 INS41 INS21 INS43 INS59 INS43 INS59 INS32 INS42 INS32 MOV21 INS40 INS22 INS40 INS22 INS40 INS22 INS32 INS74 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS44 INS32 INS8 INS27 INS8 INS25 INS40 INS32 INS42 INS42 INS33 INS42 INS42 MOV32 INS42 INS42 INS42 INS40 INS42 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS43 INS43 INS43 INS42 INS32 INS32 INS34 INS41 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS74 INS42 INS42 INS42 INS50 INS42 INS32 INS41 INS27 INS8 INS22 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS43 INS43 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS10 INS42 INS42 INS40 INS42 INS32 INS25 INS25 INS52 INS42 INS21 INS38 INS42 INS42 INS42 INS32 INS42 INS42 INS37 INS42 INS37 INS42 INS37 INS37 INS42 INS37 INS37 INS42 INS42 INS27 INS8 INS25 INS32 INS8 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS21 INS41 INS27 INS8 INS42 INS52 INS21 INS41 INS42 INS32 UPD40 INS32 INS42 INS40 INS42 INS34 INS42 INS52 INS7 INS40 INS42 INS34 INS41 INS7 INS40 INS52 INS42 INS32 INS42 INS27 INS22 INS40 INS40 INS22 INS40 INS42 INS42 MOV32 INS32 INS52 INS42 INS52 INS42 UPD40 INS32 INS42 INS40 INS42 INS42