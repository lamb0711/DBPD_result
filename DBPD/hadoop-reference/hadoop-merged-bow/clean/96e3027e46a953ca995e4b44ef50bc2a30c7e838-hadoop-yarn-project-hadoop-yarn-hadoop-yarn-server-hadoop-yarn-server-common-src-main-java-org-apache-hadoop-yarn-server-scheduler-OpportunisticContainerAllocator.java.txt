YARN-2889. Limit the number of opportunistic container allocated per AM heartbeat. Contributed by Abhishek Modi.

+import com.google.common.annotations.VisibleForTesting;
+  private int maxAllocationsPerAMHeartbeat = -1;
+
+   * Create a new Opportunistic Container Allocator.
+   * @param tokenSecretManager TokenSecretManager
+   * @param maxAllocationsPerAMHeartbeat max number of containers to be
+   *                                     allocated in one AM heartbeat
+   */
+  public OpportunisticContainerAllocator(
+      BaseContainerTokenSecretManager tokenSecretManager,
+      int maxAllocationsPerAMHeartbeat) {
+    this.tokenSecretManager = tokenSecretManager;
+    this.maxAllocationsPerAMHeartbeat = maxAllocationsPerAMHeartbeat;
+  }
+
+  @VisibleForTesting
+  void setMaxAllocationsPerAMHeartbeat(int maxAllocationsPerAMHeartbeat) {
+    this.maxAllocationsPerAMHeartbeat = maxAllocationsPerAMHeartbeat;
+  }
+
+  /**
-
+        int remAllocs = -1;
+        if (maxAllocationsPerAMHeartbeat > 0) {
+          remAllocs =
+              maxAllocationsPerAMHeartbeat - allocatedContainers.size()
+                  - getTotalAllocations(allocations);
+          if (remAllocs <= 0) {
+            LOG.info("Not allocating more containers as we have reached max "
+                    + "allocations per AM heartbeat {}",
+                maxAllocationsPerAMHeartbeat);
+            break;
+          }
+        }
-            appSubmitter, nodeBlackList, allocatedNodes);
+            appSubmitter, nodeBlackList, allocatedNodes, remAllocs);
+  private int getTotalAllocations(
+      List<Map<Resource, List<Allocation>>> allocations) {
+    int totalAllocs = 0;
+    for (Map<Resource, List<Allocation>> allocation : allocations) {
+      for (List<Allocation> allocs : allocation.values()) {
+        totalAllocs += allocs.size();
+      }
+    }
+    return totalAllocs;
+  }
+
-      Set<String> allocatedNodes)
+      Set<String> allocatedNodes, int maxAllocations)
+      int remainingAllocs = -1;
+      if (maxAllocations > 0) {
+        int totalAllocated = 0;
+        for (List<Allocation> allocs : containers.values()) {
+          totalAllocated += allocs.size();
+        }
+        remainingAllocs = maxAllocations - totalAllocated;
+        if (remainingAllocs <= 0) {
+          LOG.info("Not allocating more containers as max allocations per AM "
+                  + "heartbeat {} has reached", maxAllocationsPerAMHeartbeat);
+          break;
+        }
+      }
-          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk);
+          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk,
+          remainingAllocs);
-      EnrichedResourceRequest enrichedAsk)
+      EnrichedResourceRequest enrichedAsk, int maxAllocations)
+    if (maxAllocations >= 0) {
+      toAllocate = Math.min(maxAllocations, toAllocate);
+    }

INS26 INS40 INS23 INS31 INS31 INS31 INS83 INS39 INS59 INS29 INS83 INS42 INS44 INS44 INS8 INS78 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS44 INS44 INS42 INS38 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS21 INS21 INS42 INS39 INS42 INS21 INS74 INS42 INS60 INS70 INS41 INS39 INS42 INS39 INS42 INS25 INS34 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS7 INS7 INS7 INS43 INS74 INS39 INS59 INS44 INS42 INS8 INS42 INS27 INS8 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS43 INS43 INS74 INS42 INS34 INS74 INS42 INS70 INS60 INS25 INS42 INS34 INS21 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS74 INS44 INS32 INS8 INS39 INS59 INS27 INS8 INS7 INS60 INS25 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS21 INS42 INS38 INS42 INS34 INS60 INS70 INS21 INS25 INS42 INS42 INS32 INS39 INS59 INS27 INS8 INS42 INS42 INS43 INS43 INS7 INS34 INS39 INS59 INS44 INS32 INS8 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS38 INS42 INS34 INS21 INS25 INS42 INS42 INS42 INS32 INS42 INS34 INS74 INS42 INS42 INS42 INS21 INS42 INS27 INS42 INS34 INS21 INS10 INS34 INS7 INS27 INS8 INS42 INS42 INS42 INS43 INS43 INS7 INS42 INS42 INS32 INS42 INS27 INS42 INS34 INS21 INS10 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS45