HDFS-8549. Abort the balancer if an upgrade is in progress.

-      + "\tNumber of consecutive idle iterations (-1 for Infinite) before exit.";
-  
+      + "\tNumber of consecutive idle iterations (-1 for Infinite) before "
+      + "exit."
+      + "\n\t[-runDuringUpgrade]"
+      + "\tWhether to run the balancer during an ongoing HDFS upgrade."
+      + "This is usually not desired since it will not affect used space "
+      + "on over-utilized machines.";
+
+  private final NameNodeConnector nnc;
+  private final boolean runDuringUpgrade;
-  
+
+    this.nnc = theblockpool;
+    this.runDuringUpgrade = p.runDuringUpgrade;
-            overLoadedBytes += precentage2bytes(thresholdDiff, capacity);
+            overLoadedBytes += percentage2bytes(thresholdDiff, capacity);
-            underLoadedBytes += precentage2bytes(thresholdDiff, capacity);
+            underLoadedBytes += percentage2bytes(thresholdDiff, capacity);
-    long maxSizeToMove = precentage2bytes(diff, capacity);
+    long maxSizeToMove = percentage2bytes(diff, capacity);
-  private static long precentage2bytes(double precentage, long capacity) {
-    Preconditions.checkArgument(precentage >= 0,
-        "precentage = " + precentage + " < 0");
-    return (long)(precentage * capacity / 100.0);
+  private static long percentage2bytes(double percentage, long capacity) {
+    Preconditions.checkArgument(percentage >= 0, "percentage = %s < 0",
+        percentage);
+    return (long)(percentage * capacity / 100.0);
-      
+
+      // Should not run the balancer during an unfinalized upgrade, since moved
+      // blocks are not deleted on the source datanode.
+      if (!runDuringUpgrade && nnc.isUpgrading()) {
+        return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);
+      }
+
-      
+
-        Collections.<String> emptySet(), Collections.<String> emptySet());
+        Collections.<String> emptySet(), Collections.<String> emptySet(),
+        false);
+    /**
+     * Whether to run the balancer during upgrade.
+     */
+    final boolean runDuringUpgrade;
-        Set<String> nodesToBeExcluded, Set<String> nodesToBeIncluded) {
+        Set<String> nodesToBeExcluded, Set<String> nodesToBeIncluded,
+        boolean runDuringUpgrade) {
+      this.runDuringUpgrade = runDuringUpgrade;
-      return Balancer.class.getSimpleName() + "." + getClass().getSimpleName()
-          + "[" + policy + ", threshold=" + threshold +
-          ", max idle iteration = " + maxIdleIteration +
-          ", number of nodes to be excluded = "+ nodesToBeExcluded.size() +
-          ", number of nodes to be included = "+ nodesToBeIncluded.size() +"]";
+      return String.format("%s.%s [%s,"
+              + " threshold = %s,"
+              + " max idle iteration = %s, "
+              + "number of nodes to be excluded = %s,"
+              + " number of nodes to be included = %s,"
+              + " run during upgrade = %s]",
+          Balancer.class.getSimpleName(), getClass().getSimpleName(),
+          policy, threshold, maxIdleIteration,
+          nodesToBeExcluded.size(), nodesToBeIncluded.size(),
+          runDuringUpgrade);
+      boolean runDuringUpgrade = Parameters.DEFAULT.runDuringUpgrade;
-                  "idleiterations value is missing: args = " + Arrays.toString(args));
+                  "idleiterations value is missing: args = " + Arrays
+                      .toString(args));
+            } else if ("-runDuringUpgrade".equalsIgnoreCase(args[i])) {
+              runDuringUpgrade = true;
+              LOG.info("Will run the balancer even during an ongoing HDFS "
+                  + "upgrade. Most users will not want to run the balancer "
+                  + "during an upgrade since it will not affect used space "
+                  + "on over-utilized machines.");
-      return new Parameters(policy, threshold, maxIdleIteration, nodesTobeExcluded, nodesTobeIncluded);
+      return new Parameters(policy, threshold, maxIdleIteration,
+          nodesTobeExcluded, nodesTobeIncluded, runDuringUpgrade);

INS23 INS23 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 UPD42 INS23 INS42 INS42 INS42 INS21 INS21 UPD42 INS29 INS83 INS39 INS59 INS44 UPD45 INS45 INS45 INS45 INS45 INS45 INS7 INS7 INS65 INS42 INS39 INS42 INS21 INS60 INS22 INS42 INS22 INS40 INS45 INS42 INS25 INS9 INS66 INS7 INS32 INS39 INS59 INS52 INS42 INS52 INS42 UPD42 UPD42 INS27 INS8 INS22 INS42 INS42 INS42 INS27 MOV32 MOV32 INS42 INS42 INS42 MOV32 MOV32 INS42 INS42 INS40 INS42 INS38 INS32 INS41 INS52 INS42 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS38 INS34 UPD42 UPD42 INS25 INS32 INS8 MOV8 INS45 INS42 INS2 INS21 INS21 INS42 INS42 INS7 INS32 INS42 INS9 INS42 INS42 INS27 INS45 INS45 INS45 INS45 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL42 DEL42 DEL27