HDFS-6981. Fix DN upgrade with layout version change. (Arpit Agarwal)

+import com.google.common.base.Preconditions;
+import java.util.List;
+import java.util.Collections;
+import java.util.concurrent.ConcurrentHashMap;
+  /**
+   * A marker file that is created on each root directory if a rolling upgrade
+   * is in progress. The NN does not inform the DN when a rolling upgrade is
+   * finalized. All the DN can infer is whether or not a rolling upgrade is
+   * currently in progress. When the rolling upgrade is not in progress:
+   *   1. If the marker file is present, then a rolling upgrade just completed.
+   *      If a 'previous' directory exists, it can be deleted now.
+   *   2. If the marker file is absent, then a regular upgrade may be in
+   *      progress. Do not delete the 'previous' directory.
+   */
+  static final String ROLLING_UPGRADE_MARKER_FILE = "RollingUpgradeInProgress";
+
+  /**
+   * These maps are used as an optimization to avoid one filesystem operation
+   * per storage on each heartbeat response.
+   */
+  private static Set<String> storagesWithRollingUpgradeMarker;
+  private static Set<String> storagesWithoutRollingUpgradeMarker;
+
+    storagesWithRollingUpgradeMarker = Collections.newSetFromMap(
+        new ConcurrentHashMap<String, Boolean>());
+    storagesWithoutRollingUpgradeMarker = Collections.newSetFromMap(
+        new ConcurrentHashMap<String, Boolean>());
+    storagesWithRollingUpgradeMarker = Collections.newSetFromMap(
+        new ConcurrentHashMap<String, Boolean>());
+    storagesWithoutRollingUpgradeMarker = Collections.newSetFromMap(
+        new ConcurrentHashMap<String, Boolean>());
-      // we will already restore everything in the trash by rolling back to
-      // the previous directory, so we must delete the trash to ensure
-      // that it's not restored by BPOfferService.signalRollingUpgrade()
-      if (!FileUtil.fullyDelete(getTrashRootDir(sd))) {
-        throw new IOException("Unable to delete trash directory prior to " +
-            "restoration of previous directory: " + getTrashRootDir(sd));
-      }
+      Preconditions.checkState(!getTrashRootDir(sd).exists(),
+          sd.getPreviousDir() + " and " + getTrashRootDir(sd) + " should not " +
+          " both be present.");
-      if (!child.renameTo(newChild)) {
+
+      if (newChild.exists() && newChild.length() >= child.length()) {
+        // Failsafe - we should not hit this case but let's make sure
+        // we never overwrite a newer version of a block file with an
+        // older version.
+        LOG.info("Not overwriting " + newChild + " with smaller file from " +
+                     "trash directory. This message can be safely ignored.");
+      } else if (!child.renameTo(newChild)) {
+      } else {
+        ++filesRestored;
-      ++filesRestored;
+   * Determine whether we can use trash for the given blockFile. Trash
+   * is disallowed if a 'previous' directory exists for the
+   * storage directory containing the block.
+   */
+  @VisibleForTesting
+  public boolean isTrashAllowed(File blockFile) {
+    Matcher matcher = BLOCK_POOL_CURRENT_PATH_PATTERN.matcher(blockFile.getParent());
+    String previousDir = matcher.replaceFirst("$1$2" + STORAGE_DIR_PREVIOUS);
+    return !(new File(previousDir)).exists();
+  }
+
+  /**
-    Matcher matcher = BLOCK_POOL_CURRENT_PATH_PATTERN.matcher(blockFile.getParent());
-    String trashDirectory = matcher.replaceFirst("$1$2" + TRASH_ROOT_DIR + "$4");
-    return trashDirectory;
+    if (isTrashAllowed(blockFile)) {
+      Matcher matcher = BLOCK_POOL_CURRENT_PATH_PATTERN.matcher(blockFile.getParent());
+      String trashDirectory = matcher.replaceFirst("$1$2" + TRASH_ROOT_DIR + "$4");
+      return trashDirectory;
+    }
+    return null;
+        Preconditions.checkState(!(trashRoot.exists() && sd.getPreviousDir().exists()));
+
+  /**
+   * Create a rolling upgrade marker file for each BP storage root, if it
+   * does not exist already.
+   */
+  public void setRollingUpgradeMarkers(List<StorageDirectory> dnStorageDirs)
+      throws IOException {
+    for (StorageDirectory sd : dnStorageDirs) {
+      File bpRoot = getBpRoot(blockpoolID, sd.getCurrentDir());
+      File markerFile = new File(bpRoot, ROLLING_UPGRADE_MARKER_FILE);
+      if (!storagesWithRollingUpgradeMarker.contains(bpRoot.toString())) {
+        if (!markerFile.exists() && markerFile.createNewFile()) {
+          LOG.info("Created " + markerFile);
+        } else {
+          LOG.info(markerFile + " already exists.");
+        }
+        storagesWithRollingUpgradeMarker.add(bpRoot.toString());
+        storagesWithoutRollingUpgradeMarker.remove(bpRoot.toString());
+      }
+    }
+  }
+
+  /**
+   * Check whether the rolling upgrade marker file exists for each BP storage
+   * root. If it does exist, then the marker file is cleared and more
+   * importantly the layout upgrade is finalized.
+   */
+  public void clearRollingUpgradeMarkers(List<StorageDirectory> dnStorageDirs)
+      throws IOException {
+    for (StorageDirectory sd : dnStorageDirs) {
+      File bpRoot = getBpRoot(blockpoolID, sd.getCurrentDir());
+      File markerFile = new File(bpRoot, ROLLING_UPGRADE_MARKER_FILE);
+      if (!storagesWithoutRollingUpgradeMarker.contains(bpRoot.toString())) {
+        if (markerFile.exists()) {
+          LOG.info("Deleting " + markerFile);
+          doFinalize(sd.getCurrentDir());
+          if (!markerFile.delete()) {
+            LOG.warn("Failed to delete " + markerFile);
+          }
+        }
+        storagesWithoutRollingUpgradeMarker.add(bpRoot.toString());
+        storagesWithRollingUpgradeMarker.remove(bpRoot.toString());
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS29 INS78 INS83 INS39 INS42 INS44 INS8 INS8 INS29 INS83 INS39 INS42 INS44 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS42 INS42 INS45 INS65 INS43 INS43 INS42 INS43 INS43 INS42 INS21 INS21 INS21 INS21 INS65 INS42 INS43 INS42 INS60 INS60 INS41 INS25 INS41 INS65 INS74 INS42 INS70 INS65 INS74 INS42 INS42 INS70 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS66 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS38 INS32 MOV8 INS33 INS66 INS66 INS43 INS43 INS44 INS42 INS8 INS66 INS66 INS66 INS43 INS43 INS44 INS42 INS8 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS60 INS60 INS25 INS42 INS42 INS43 INS42 INS60 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS27 INS8 MOV25 INS42 INS42 INS32 INS42 INS42 INS27 INS36 INS42 INS42 INS43 INS59 INS43 INS59 INS38 INS8 INS42 INS43 INS59 INS43 INS59 INS38 INS8 INS74 INS74 INS74 INS74 INS42 INS42 MOV38 INS27 INS32 INS27 MOV21 INS8 INS42 INS42 INS45 INS42 INS14 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS25 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS25 INS21 INS21 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 MOV42 INS32 UPD45 MOV45 MOV32 INS45 UPD45 MOV45 INS42 INS42 INS32 INS32 INS32 INS21 INS43 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS8 INS32 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 MOV38 INS42 INS42 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS38 INS32 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS45 INS42 INS45 INS45 INS36 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS38 INS8 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS32 INS32 INS21 INS32 INS32 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25