HDFS-4436. Change INode.recordModification(..) to return only the current inode and remove the updateCircularList parameter from some methods in INodeDirectoryWithSnapshot.Diff.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438203 13f79535-47bb-0310-9956-ffa450edef68

-    Triple<Integer, INode, Integer> delete(final INode inode,
-        boolean updateCircularList) {
+    Triple<Integer, INode, Integer> delete(final INode inode) {
-        if (updateCircularList && previous instanceof FileWithSnapshot) {
-          // also we should remove previous from the circular list
-          ((FileWithSnapshot) previous).removeSelf();
-        }
-        final INode newinode, boolean updateCircularList) {
+        final INode newinode) {
-        if (updateCircularList && newinode instanceof FileWithSnapshot) {
-          // also should remove oldinode from the circular list
-          FileWithSnapshot newNodeWithLink = (FileWithSnapshot) newinode;
-          FileWithSnapshot oldNodeWithLink = (FileWithSnapshot) oldinode;
-          newNodeWithLink.setNext(oldNodeWithLink.getNext());
-          oldNodeWithLink.setNext(null);
-        }
-        
-     * @param updateCircularList Whether to update the circular linked list 
-     *                           while combining the diffs.                             
-    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser,
-        boolean updateCircularList) {
+    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {
-          Triple<Integer, INode, Integer> triple = delete(d, 
-              updateCircularList);
+          Triple<Integer, INode, Integer> triple = delete(d);
-          final Triple<Integer, INode, Integer> triple = modify(d, c,
-              updateCircularList);
+          final Triple<Integer, INode, Integer> triple = modify(d, c);
-    private Pair<INodeDirectory, INodeDirectory> checkAndInitINode(
-        INodeDirectory snapshotCopy) {
-      if (snapshotINode != null) {
-        // already initialized.
-        return null;
+    private void checkAndInitINode(INodeDirectory snapshotCopy) {
+      if (snapshotINode == null) {
+        if (snapshotCopy == null) {
+          snapshotCopy = new INodeDirectory(INodeDirectoryWithSnapshot.this,
+              false);
+        }
+        snapshotINode = snapshotCopy;
-      final INodeDirectoryWithSnapshot dir = INodeDirectoryWithSnapshot.this;
-      if (snapshotCopy == null) {
-        snapshotCopy = new INodeDirectory(dir, false);
-      }
-      snapshotINode = snapshotCopy;
-      return new Pair<INodeDirectory, INodeDirectory>(dir, snapshotCopy);
-              combined.combinePostDiff(d.diff, null, false);
+              combined.combinePostDiff(d.diff, null);
-        }, true);
+        });
-  public Pair<INodeDirectory, INodeDirectory> recordModification(Snapshot latest) {
-    return save2Snapshot(latest, null);
+  public INodeDirectoryWithSnapshot recordModification(Snapshot latest) {
+    saveSelf2Snapshot(latest, null);
+    return this;
-  public Pair<INodeDirectory, INodeDirectory> save2Snapshot(Snapshot latest,
-      INodeDirectory snapshotCopy) {
-    return latest == null? null
-        : checkAndAddLatestSnapshotDiff(latest).checkAndInitINode(snapshotCopy);
+  public void saveSelf2Snapshot(Snapshot latest, INodeDirectory snapshotCopy) {
+    if (latest != null) {
+      checkAndAddLatestSnapshotDiff(latest).checkAndInitINode(snapshotCopy);
+    }
-  public Pair<? extends INode, ? extends INode> saveChild2Snapshot(
-      INode child, Snapshot latest) {
+  public INode saveChild2Snapshot(INode child, Snapshot latest) {
+    if (latest == null) {
+      return child;
+    }
-      return null;
+      return child;
-    diff.diff.modify(p.right, p.left, true);
-    return p;
+    if (p.left != p.right) {
+      final Triple<Integer, INode, Integer> triple = diff.diff.modify(p.right, p.left);
+      if (triple.middle != null && p.left instanceof FileWithSnapshot) {
+        // also should remove oldinode from the circular list
+        FileWithSnapshot newNodeWithLink = (FileWithSnapshot) p.left;
+        FileWithSnapshot oldNodeWithLink = (FileWithSnapshot) p.right;
+        newNodeWithLink.setNext(oldNodeWithLink.getNext());
+        oldNodeWithLink.setNext(null);
+      }
+    }
+    return p.left;
-      undoInfo = diff.delete(child, true);
+      undoInfo = diff.delete(child);
-    if (removed == null && undoInfo != null) {
-      diff.undoDelete(child, undoInfo);
+    if (undoInfo != null) {
+      if (removed == null) {
+        //remove failed, undo
+        diff.undoDelete(child, undoInfo);
+      } else {
+        //clean up the previously created file, if there is any.
+        final INode previous = undoInfo.middle;
+        if (previous != null && previous instanceof FileWithSnapshot) {
+          ((FileWithSnapshot)previous).removeSelf();
+        }
+      }

MOV43 INS39 INS42 INS8 MOV43 INS39 INS21 INS41 INS25 INS25 INS25 INS41 INS25 INS32 INS52 INS27 MOV8 MOV27 INS8 INS27 MOV8 INS40 MOV27 INS8 INS8 INS8 UPD27 MOV27 INS8 UPD42 MOV42 MOV42 MOV33 INS42 INS33 INS21 INS41 INS40 INS40 INS60 INS25 MOV21 MOV21 MOV21 MOV25 MOV21 MOV32 INS42 INS42 INS83 INS74 INS59 MOV60 MOV27 MOV8 MOV8 INS43 INS43 INS43 INS43 INS42 INS32 INS27 INS60 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS40 INS40 INS33 INS40 MOV43 MOV43 INS83 MOV43 INS59 UPD42 UPD42 INS42 INS40 INS27 MOV43 INS40 MOV43 INS40 UPD42 MOV42 INS33 MOV52 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL66 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL41 DEL8 DEL25 DEL83 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL14 DEL41 DEL9 DEL9 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL32 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL16 DEL41 DEL42 DEL43 DEL76 DEL76 DEL74 DEL33 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL40 DEL40 DEL9 DEL32 DEL21 DEL42 DEL41 DEL9 DEL27