Merge r1609845 through r1614231 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1614234 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.records.ContainerId;
+  private static final String CONTAINER_TOKENS_KEY_PREFIX =
+      "ContainerTokens/";
+  private static final String CONTAINER_TOKENS_CURRENT_MASTER_KEY =
+      CONTAINER_TOKENS_KEY_PREFIX + CURRENT_MASTER_KEY_SUFFIX;
+  private static final String CONTAINER_TOKENS_PREV_MASTER_KEY =
+      CONTAINER_TOKENS_KEY_PREFIX + PREV_MASTER_KEY_SUFFIX;
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);
-  public RecoveredNMTokenState loadNMTokenState() throws IOException {
-    RecoveredNMTokenState state = new RecoveredNMTokenState();
+  public RecoveredNMTokensState loadNMTokensState() throws IOException {
+    RecoveredNMTokensState state = new RecoveredNMTokensState();
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);
+    }
+  }
+
+
+  @Override
+  public RecoveredContainerTokensState loadContainerTokensState()
+      throws IOException {
+    RecoveredContainerTokensState state = new RecoveredContainerTokensState();
+    state.activeTokens = new HashMap<ContainerId, Long>();
+    LeveldbIterator iter = null;
+    try {
+      iter = new LeveldbIterator(db);
+      iter.seek(bytes(CONTAINER_TOKENS_KEY_PREFIX));
+      final int containerTokensKeyPrefixLength =
+          CONTAINER_TOKENS_KEY_PREFIX.length();
+      while (iter.hasNext()) {
+        Entry<byte[], byte[]> entry = iter.next();
+        String fullKey = asString(entry.getKey());
+        if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) {
+          break;
+        }
+        String key = fullKey.substring(containerTokensKeyPrefixLength);
+        if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {
+          state.currentMasterKey = parseMasterKey(entry.getValue());
+        } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {
+          state.previousMasterKey = parseMasterKey(entry.getValue());
+        } else if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) {
+          loadContainerToken(state, fullKey, key, entry.getValue());
+        }
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    } finally {
+      if (iter != null) {
+        iter.close();
+      }
+    }
+    return state;
+  }
+
+  private static void loadContainerToken(RecoveredContainerTokensState state,
+      String key, String containerIdStr, byte[] value) throws IOException {
+    ContainerId containerId;
+    Long expTime;
+    try {
+      containerId = ConverterUtils.toContainerId(containerIdStr);
+      expTime = Long.parseLong(asString(value));
+    } catch (IllegalArgumentException e) {
+      throw new IOException("Bad container token state for " + key, e);
+    }
+    state.activeTokens.put(containerId, expTime);
+  }
+
+  @Override
+  public void storeContainerTokenCurrentMasterKey(MasterKey key)
+      throws IOException {
+    storeMasterKey(CONTAINER_TOKENS_CURRENT_MASTER_KEY, key);
+  }
+
+  @Override
+  public void storeContainerTokenPreviousMasterKey(MasterKey key)
+      throws IOException {
+    storeMasterKey(CONTAINER_TOKENS_PREV_MASTER_KEY, key);
+  }
+
+  @Override
+  public void storeContainerToken(ContainerId containerId, Long expTime)
+      throws IOException {
+    String key = CONTAINER_TOKENS_KEY_PREFIX + containerId;
+    try {
+      db.put(bytes(key), bytes(expTime.toString()));
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public void removeContainerToken(ContainerId containerId)
+      throws IOException {
+    String key = CONTAINER_TOKENS_KEY_PREFIX + containerId;
+    try {
+      db.delete(bytes(key));
+    } catch (DBException e) {
+      throw new IOException(e);
-      throw new IOException(e.getMessage(), e);
+      throw new IOException(e);

INS26 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 UPD43 UPD42 INS78 INS83 INS43 INS42 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS27 UPD42 INS42 INS42 INS42 INS60 INS21 INS60 INS54 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS42 INS60 INS60 INS54 INS21 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS42 INS60 MOV54 INS54 INS42 INS42 INS42 INS42 UPD43 INS43 INS59 INS7 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS42 INS42 INS39 INS85 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS8 MOV8 INS12 UPD42 INS42 INS42 INS14 INS40 INS14 INS42 INS42 INS33 INS21 INS21 INS60 INS61 INS44 INS8 INS25 INS42 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS27 INS21 INS44 INS8 UPD43 INS43 INS74 INS7 INS32 INS83 INS39 INS59 INS32 INS8 INS43 INS42 INS53 INS27 INS8 INS7 INS7 INS43 INS42 INS53 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS43 INS42 INS53 UPD42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS60 INS25 INS42 INS14 INS42 INS33 INS21 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS8 INS25 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS5 INS5 INS42 INS32 INS42 INS42 INS32 INS32 INS10 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS21 INS32 INS8 INS42 INS42 INS40 INS32 INS7 INS42 INS42 INS40 INS21 INS42 INS32 INS40 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42