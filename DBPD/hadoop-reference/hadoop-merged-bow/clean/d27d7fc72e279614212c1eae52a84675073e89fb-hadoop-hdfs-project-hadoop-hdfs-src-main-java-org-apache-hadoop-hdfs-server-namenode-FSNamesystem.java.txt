HDFS-9395. Make HDFS audit logging consistant. Contributed by Kuhu Shukla.

+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "concat", Arrays.toString(srcs), target, stat);
+      throw ace;
-      logAuditEvent(success, "concat", Arrays.toString(srcs), target, stat);
+    logAuditEvent(success, "concat", Arrays.toString(srcs), target, stat);
+      logAuditEvent(success, "rename", src, dst, ret.auditStat);
-    logAuditEvent(success, "rename", src, dst,
-        ret == null ? null : ret.auditStat);
+    ContentSummary cs;
-      return FSDirStatAndListingOp.getContentSummary(dir, src);
+      cs = FSDirStatAndListingOp.getContentSummary(dir, src);
+      logAuditEvent(success, "contentSummary", src);
-      logAuditEvent(success, "contentSummary", src);
+    logAuditEvent(success, "contentSummary", src);
+    return cs;
+    QuotaUsage quotaUsage;
-      return FSDirStatAndListingOp.getQuotaUsage(dir, src);
+      quotaUsage = FSDirStatAndListingOp.getQuotaUsage(dir, src);
+      logAuditEvent(success, "quotaUsage", src);
-      logAuditEvent(success, "quotaUsage", src);
+    logAuditEvent(success, "quotaUsage", src);
+    return quotaUsage;
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "setQuota", src);
+      throw ace;
-      logAuditEvent(success, "setQuota", src);
+    logAuditEvent(success, "setQuota", src);
+    boolean success = false;
+      success = true;
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "createSnapshot", snapshotRoot,
+          snapshotPath, null);
+      throw ace;
-    logAuditEvent(snapshotPath != null, "createSnapshot", snapshotRoot,
+    logAuditEvent(success, "createSnapshot", snapshotRoot,
+    String oldSnapshotRoot = Snapshot.getSnapshotPath(path, snapshotOldName);
+    String newSnapshotRoot = Snapshot.getSnapshotPath(path, snapshotNewName);
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "renameSnapshot", oldSnapshotRoot,
+          newSnapshotRoot, null);
+      throw ace;
-    String oldSnapshotRoot = Snapshot.getSnapshotPath(path, snapshotOldName);
-    String newSnapshotRoot = Snapshot.getSnapshotPath(path, snapshotNewName);
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "listSnapshottableDirectory", null, null, null);
+      throw ace;
+    boolean success = false;
+    String fromSnapshotRoot = (fromSnapshot == null || fromSnapshot.isEmpty()) ?
+        path : Snapshot.getSnapshotPath(path, fromSnapshot);
+    String toSnapshotRoot = (toSnapshot == null || toSnapshot.isEmpty()) ?
+        path : Snapshot.getSnapshotPath(path, toSnapshot);
+      success = true;
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "computeSnapshotDiff", fromSnapshotRoot,
+          toSnapshotRoot, null);
+      throw ace;
-    String fromSnapshotRoot = (fromSnapshot == null || fromSnapshot.isEmpty()) ?
-        path : Snapshot.getSnapshotPath(path, fromSnapshot);
-    String toSnapshotRoot = (toSnapshot == null || toSnapshot.isEmpty()) ?
-        path : Snapshot.getSnapshotPath(path, toSnapshot);
-    logAuditEvent(diffs != null, "computeSnapshotDiff", fromSnapshotRoot,
+    logAuditEvent(success, "computeSnapshotDiff", fromSnapshotRoot,
+    String rootPath = null;
-
+      rootPath = Snapshot.getSnapshotPath(snapshotRoot, snapshotName);
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "deleteSnapshot", rootPath, null, null);
+      throw ace;
-
-    String rootPath = Snapshot.getSnapshotPath(snapshotRoot, snapshotName);
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "startRollingUpgrade", null, null, null);
-    }
+    logAuditEvent(true, "startRollingUpgrade", null, null, null);
-
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "finalizeRollingUpgrade", null, null, null);
-    }
+    logAuditEvent(true, "finalizeRollingUpgrade", null, null, null);
+    boolean success = false;
+    String effectiveDirectiveStr;
+      success = true;
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "addCacheDirective", null,
+          null, null);
+      throw ace;
-      boolean success = effectiveDirective != null;
-
-      String effectiveDirectiveStr = effectiveDirective != null ?
-          effectiveDirective.toString() : null;
-      logAuditEvent(success, "addCacheDirective", effectiveDirectiveStr,
-          null, null);
-    return effectiveDirective != null ? effectiveDirective.getId() : 0;
+    effectiveDirectiveStr = effectiveDirective.toString();
+    logAuditEvent(success, "addCacheDirective", effectiveDirectiveStr,
+        null, null);
+    return effectiveDirective.getId();
+    final String idStr = "{id: " + directive.getId() + "}";
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "modifyCacheDirective", idStr,
+          directive.toString(), null);
+      throw ace;
-      final String idStr = "{id: " + directive.getId() + "}";
-      logAuditEvent(success, "modifyCacheDirective", idStr,
-          directive.toString(), null);
+    logAuditEvent(success, "modifyCacheDirective", idStr,
+        directive.toString(), null);
+    String idStr = "{id: " + Long.toString(id) + "}";
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "removeCacheDirective", idStr, null, null);
+      throw ace;
-      String idStr = "{id: " + Long.toString(id) + "}";
-      logAuditEvent(success, "removeCacheDirective", idStr, null,
-          null);
+    logAuditEvent(success, "removeCacheDirective", idStr, null, null);
-    } finally {
-      readUnlock();
+    } catch (AccessControlException ace) {
+      throw ace;
+    } finally {
+      readUnlock();
+    logAuditEvent(success, "listCacheDirectives", filter.toString(), null,
+        null);
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "addCachePool", poolInfoStr, null, null);
+      throw ace;
-      logAuditEvent(success, "addCachePool", poolInfoStr, null, null);
-    
+    logAuditEvent(success, "addCachePool", poolInfoStr, null, null);
+    String poolNameStr = "{poolName: " +
+        (req == null ? null : req.getPoolName()) + "}";
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "modifyCachePool", poolNameStr,
+          req == null ? null : req.toString(), null);
+      throw ace;
-      String poolNameStr = "{poolName: " +
-          (req == null ? null : req.getPoolName()) + "}";
-      logAuditEvent(success, "modifyCachePool", poolNameStr,
-                    req == null ? null : req.toString(), null);
+    logAuditEvent(success, "modifyCachePool", poolNameStr,
+        req == null ? null : req.toString(), null);
+    String poolNameStr = "{poolName: " + cachePoolName + "}";
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "removeCachePool", poolNameStr, null, null);
+      throw ace;
-      String poolNameStr = "{poolName: " + cachePoolName + "}";
-      logAuditEvent(success, "removeCachePool", poolNameStr, null, null);
-    
+    logAuditEvent(success, "removeCachePool", poolNameStr, null, null);
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "listCachePools", null, null, null);
+      throw ace;
-      logAuditEvent(success, "listCachePools", null, null, null);
+    logAuditEvent(success, "listCachePools", null, null, null);
-    boolean success = false;
+    final AclStatus ret;
-      final AclStatus ret = FSDirAclOp.getAclStatus(dir, src);
-      success = true;
-      return ret;
+      ret = FSDirAclOp.getAclStatus(dir, src);
+    } catch(AccessControlException ace) {
+      logAuditEvent(false, "getAclStatus", src);
+      throw ace;
-      logAuditEvent(success, "getAclStatus", src);
+    logAuditEvent(true, "getAclStatus", src);
+    return ret;
+    EncryptionZone encryptionZone;
-      return ezForPath.getKey();
+      encryptionZone = ezForPath.getKey();
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "getEZForPath", srcArg, null, resultingStat);
+      throw ace;
-      logAuditEvent(success, "getEZForPath", srcArg, null, resultingStat);
+    logAuditEvent(success, "getEZForPath", srcArg, null, resultingStat);
+    return encryptionZone;
+    } catch (AccessControlException ace) {
+      logAuditEvent(success, "setErasureCodingPolicy", srcArg, null,
+          resultingStat);
+      throw ace;
-      logAuditEvent(success, "setErasureCodingPolicy", srcArg, null,
-          resultingStat);
+    logAuditEvent(success, "setErasureCodingPolicy", srcArg, null,
+        resultingStat);
+    List<XAttr> fsXattrs;
-      return FSDirXAttrOp.getXAttrs(dir, src, xAttrs);
+      fsXattrs = FSDirXAttrOp.getXAttrs(dir, src, xAttrs);
+    logAuditEvent(true, "getXAttrs", src);
+    return fsXattrs;
+    List<XAttr> fsXattrs;
-      return FSDirXAttrOp.listXAttrs(dir, src);
+      fsXattrs = FSDirXAttrOp.listXAttrs(dir, src);
+    logAuditEvent(true, "listXAttrs", src);
+    return fsXattrs;

MOV60 MOV60 MOV21 MOV54 MOV60 MOV21 INS25 INS60 INS21 INS41 INS60 INS21 INS41 MOV21 INS60 INS60 MOV21 MOV21 MOV60 INS60 INS54 INS21 MOV21 MOV60 MOV21 MOV60 MOV21 INS21 INS21 MOV60 MOV21 MOV60 MOV21 INS21 INS60 INS54 MOV21 MOV41 INS60 INS21 INS41 MOV21 INS60 INS21 INS41 INS60 INS21 INS41 INS12 MOV42 INS8 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS12 INS39 INS59 INS12 INS12 INS12 INS39 INS59 INS12 INS12 MOV43 INS59 MOV8 INS12 INS8 INS7 MOV32 INS12 INS8 INS12 INS12 INS8 INS32 INS12 INS8 INS32 INS12 INS12 INS12 INS8 INS32 INS83 MOV43 INS59 MOV8 INS12 INS8 INS43 INS59 INS12 INS8 INS32 INS42 INS12 INS74 INS59 INS32 INS42 INS74 INS59 INS32 INS42 INS44 INS8 MOV21 MOV21 INS42 INS42 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS21 INS42 INS42 INS45 INS42 INS44 INS8 INS42 INS9 INS21 INS44 INS8 INS42 INS44 INS8 INS44 INS8 INS42 INS9 INS21 INS44 INS8 INS42 INS33 INS21 INS44 INS8 MOV9 MOV42 INS21 INS44 INS8 INS21 MOV25 INS42 MOV32 INS44 INS8 MOV21 MOV25 INS44 INS8 INS44 MOV8 INS21 INS42 INS42 INS45 INS32 INS33 INS33 INS44 MOV8 INS21 INS42 INS42 INS45 INS42 INS33 INS33 INS44 INS8 INS44 INS8 INS44 MOV8 INS21 INS42 INS42 INS45 INS33 INS33 INS33 INS42 INS44 INS8 MOV21 INS9 INS42 INS42 INS21 INS44 MOV8 INS21 INS42 INS42 INS45 INS42 INS33 INS42 INS44 INS8 INS43 INS43 INS42 INS21 INS42 INS9 INS45 INS42 INS43 INS43 INS42 INS21 INS42 INS9 INS45 INS42 INS43 INS42 INS21 INS53 INS7 MOV21 INS7 MOV21 INS53 INS43 INS42 INS21 MOV53 INS7 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS7 INS43 INS42 INS21 INS53 INS7 INS43 INS42 INS21 INS53 INS7 INS43 INS42 INS21 INS53 INS32 INS43 INS42 MOV21 INS53 MOV32 INS43 INS42 INS21 INS53 INS43 INS42 INS53 INS32 INS42 INS42 INS43 INS42 INS53 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS43 INS42 INS53 INS32 INS43 INS42 INS21 INS53 INS7 INS43 INS42 INS53 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS7 INS42 INS42 INS7 INS42 INS32 INS42 INS40 INS42 MOV32 INS42 MOV32 INS42 INS42 INS32 INS42 INS9 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV9 INS42 INS32 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS9 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV32 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 MOV32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS33 INS42 INS42 INS45 INS33 INS33 INS33 INS42 INS42 INS45 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS33 INS33 INS42 INS42 INS45 INS33 INS33 INS33 MOV32 INS42 INS42 INS45 INS42 INS32 INS33 INS42 INS42 INS45 INS42 INS33 INS33 INS42 INS42 INS45 INS42 INS16 INS33 INS42 INS42 INS45 INS42 INS33 INS33 INS42 INS9 INS45 INS42 INS42 INS42 INS45 INS42 INS33 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS27 INS33 INS32 INS42 INS42 INS33 INS42 INS42 DEL42 DEL33 DEL27 DEL33 DEL40 DEL16 DEL8 DEL25 DEL41 DEL41 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL33 DEL16 DEL59 DEL60 DEL8 DEL54 DEL42 DEL33 DEL27 DEL34 DEL16 DEL32 DEL8 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL83 DEL42 DEL59 DEL60 DEL42 DEL8 DEL54 DEL41 DEL42 DEL32 DEL21 DEL41 DEL41