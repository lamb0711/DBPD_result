Revert "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth"

This reverts commit 6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f.

-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.security.PrivilegedExceptionAction;
-import java.util.Iterator;
-import org.apache.commons.lang.Validate;
-import org.apache.hadoop.fs.azure.security.Constants;
-import org.apache.hadoop.fs.azure.security.WasbDelegationTokenIdentifier;
-import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.hadoop.security.authentication.client.AuthenticatedURL;
-import org.apache.hadoop.security.authentication.client.Authenticator;
-import org.apache.hadoop.security.token.Token;
-import org.apache.hadoop.security.token.TokenIdentifier;
-import org.apache.hadoop.security.token.delegation.web.KerberosDelegationTokenAuthenticator;
+  /**
+   * Configuration parameter name expected in the Configuration
+   * object to provide the url of the remote service {@value}
+   */
+  private static final String KEY_CRED_SERVICE_URL =
+      "fs.azure.cred.service.url";
-      "delegation";
+      "delegation_token";
-  private boolean isSecurityEnabled;
-  private boolean isKerberosSupportEnabled;
-  public boolean initialize(Configuration conf) {
+  public boolean initialize(Configuration conf, String delegationToken) {
-    Iterator<Token<? extends TokenIdentifier>> tokenIterator = null;
-    try {
-      tokenIterator = UserGroupInformation.getCurrentUser().getCredentials()
-          .getAllTokens().iterator();
-      while (tokenIterator.hasNext()) {
-        Token<? extends TokenIdentifier> iteratedToken = tokenIterator.next();
-        if (iteratedToken.getKind().equals(WasbDelegationTokenIdentifier.TOKEN_KIND)) {
-          delegationToken = iteratedToken.encodeToUrlString();
-        }
-      }
-    } catch (IOException e) {
-      LOG.error("Error in fetching the WASB delegation token");
-    }
+    credServiceUrl = conf.get(KEY_CRED_SERVICE_URL);
-    try {
-      credServiceUrl = conf.get(Constants.KEY_CRED_SERVICE_URL, String
-          .format("http://%s:%s",
-              InetAddress.getLocalHost().getCanonicalHostName(),
-              Constants.DEFAULT_CRED_SERVICE_PORT));
-    } catch (UnknownHostException e) {
-      LOG.error("Invalid CredService Url, configure it correctly.");
+    if (delegationToken == null || delegationToken.isEmpty()) {
+      LOG.error("Delegation Token not provided for initialization"
+          + " of RemoteSASKeyGenerator");
+    this.delegationToken = delegationToken;
+
-    this.isSecurityEnabled = UserGroupInformation.isSecurityEnabled();
-    this.isKerberosSupportEnabled = conf.getBoolean(
-        Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);
-    LOG.debug("Initialization of RemoteSASKeyGenerator instance successful");
+    LOG.debug("Initialization of RemoteSASKeyGenerator instance successfull");
+
+
-      if (isSecurityEnabled && (delegationToken != null && !delegationToken
-          .isEmpty())) {
-        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,
-            this.delegationToken);
-      }
+      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,
+          this.delegationToken);
-      UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
-      UserGroupInformation connectUgi = ugi.getRealUser();
-      if (connectUgi == null) {
-        connectUgi = ugi;
+      RemoteSASKeyGenerationResponse sasKeyResponse =
+          makeRemoteRequest(uriBuilder.build());
+
+      if (sasKeyResponse == null) {
+        throw new SASKeyGenerationException("RemoteSASKeyGenerationResponse"
+            + " object null from remote call");
+      } else if (sasKeyResponse.getResponseCode()
+          == REMOTE_CALL_SUCCESS_CODE) {
+        return new URI(sasKeyResponse.getSasKey());
-        uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());
+        throw new SASKeyGenerationException("Remote Service encountered error"
+            + " in SAS Key generation : "
+            + sasKeyResponse.getResponseMessage());
-
-      if(isSecurityEnabled && !connectUgi.hasKerberosCredentials()){
-        connectUgi = UserGroupInformation.getLoginUser();
-      }
-      return getSASKey(uriBuilder.build(), connectUgi);
-    } catch (IOException e) {
-      throw new SASKeyGenerationException("Encountered IOException"
-          + " while building the HttpGetRequest to remote service", e);
+
+
-      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME, storageAccount);
-      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME, container);
+      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,
+          storageAccount);
+      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,
+          container);
+      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,
+          this.delegationToken);
-      if (isSecurityEnabled && (delegationToken != null && !delegationToken
-          .isEmpty())) {
-        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,
-            this.delegationToken);
+      RemoteSASKeyGenerationResponse sasKeyResponse =
+          makeRemoteRequest(uriBuilder.build());
+
+      if (sasKeyResponse == null) {
+        throw new SASKeyGenerationException("RemoteSASKeyGenerationResponse"
+            + " object null from remote call");
+      } else if (sasKeyResponse.getResponseCode()
+          == REMOTE_CALL_SUCCESS_CODE) {
+        return new URI(sasKeyResponse.getSasKey());
+      } else {
+        throw new SASKeyGenerationException("Remote Service encountered error"
+            + " in SAS Key generation : "
+            + sasKeyResponse.getResponseMessage());
-
-        UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
-        UserGroupInformation connectUgi = ugi.getRealUser();
-        if (connectUgi == null) {
-          connectUgi = ugi;
-        } else{
-          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());
-        }
-
-      if(isSecurityEnabled && !connectUgi.hasKerberosCredentials()){
-        connectUgi = UserGroupInformation.getLoginUser();
-      }
-      return getSASKey(uriBuilder.build(), connectUgi);
-    } catch (IOException e) {
-      throw new SASKeyGenerationException("Encountered IOException"
-      + " while building the HttpGetRequest to remote service", e);
-    }
-  }
-
-  private URI getSASKey(final URI uri, UserGroupInformation connectUgi)
-      throws URISyntaxException, SASKeyGenerationException {
-    RemoteSASKeyGenerationResponse sasKeyResponse = null;
-    try {
-      connectUgi.checkTGTAndReloginFromKeytab();
-      sasKeyResponse = connectUgi.doAs(new PrivilegedExceptionAction<RemoteSASKeyGenerationResponse>() {
-            @Override
-            public RemoteSASKeyGenerationResponse run() throws Exception {
-              AuthenticatedURL.Token token = null;
-              if (isKerberosSupportEnabled && UserGroupInformation.isSecurityEnabled() && (
-                  delegationToken == null || delegationToken.isEmpty())) {
-                token = new AuthenticatedURL.Token();
-                final Authenticator kerberosAuthenticator = new KerberosDelegationTokenAuthenticator();
-                kerberosAuthenticator.authenticate(uri.toURL(), token);
-                Validate.isTrue(token.isSet(),
-                    "Authenticated Token is NOT present. The request cannot proceed.");
-              }
-              return makeRemoteRequest(uri, (token != null ? token.toString() : null));
-            }
-          });
-    } catch (InterruptedException e) {
-      LOG.error("Error fetching the SAS Key from Remote Service", e);
-    } catch (IOException e) {
-      LOG.error("Error fetching the SAS Key from Remote Service", e);
-    }
-
-    if (sasKeyResponse == null) {
-      throw new SASKeyGenerationException(
-          "RemoteSASKeyGenerationResponse" + " object null from remote call");
-    } else if (sasKeyResponse.getResponseCode() == REMOTE_CALL_SUCCESS_CODE) {
-      return new URI(sasKeyResponse.getSasKey());
-    } else {
-      throw new SASKeyGenerationException("Remote Service encountered error"
-          + " in SAS Key generation : " + sasKeyResponse.getResponseMessage());
-   * @param token - hadoop.auth token for the remote request
-  private RemoteSASKeyGenerationResponse makeRemoteRequest(URI uri, String token)
+  private RemoteSASKeyGenerationResponse makeRemoteRequest(URI uri)
-      HttpGet httpGet = new HttpGet(uri);
-      if(token != null){
-        httpGet.setHeader("Cookie", AuthenticatedURL.AUTH_COOKIE + "=" + token);
-      }
-          remoteCallHelper.makeRemoteGetRequest(httpGet);
+          remoteCallHelper.makeRemoteGetRequest(new HttpGet(uri));

MOV23 INS29 INS83 INS83 INS43 INS44 INS8 INS65 INS42 UPD42 INS45 UPD45 MOV43 INS42 MOV21 MOV21 INS25 MOV21 MOV25 MOV21 MOV21 MOV41 INS66 INS66 INS65 MOV27 INS8 MOV21 MOV41 INS42 UPD45 MOV21 MOV25 MOV21 INS25 UPD42 MOV42 UPD42 MOV43 MOV27 MOV8 UPD43 MOV27 MOV8 INS25 MOV43 INS27 UPD42 MOV42 MOV53 MOV8 UPD42 UPD42 MOV32 UPD42 INS53 INS27 MOV8 INS8 INS42 INS32 INS45 INS45 UPD42 MOV32 MOV53 UPD42 INS14 INS32 UPD42 MOV42 INS41 INS53 INS42 INS42 MOV14 UPD42 MOV42 INS42 INS43 INS27 UPD42 MOV42 UPD42 MOV42 INS14 INS14 INS42 INS45 INS45 INS43 INS32 INS43 INS27 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS45 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL39 DEL83 DEL39 DEL42 DEL59 DEL23 DEL40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL45 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL42 DEL42 DEL40 DEL9 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL36 DEL27 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL25 DEL32 DEL38 DEL27 DEL25 DEL41 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL36 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL27 DEL25 DEL42 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL40 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL36 DEL27 DEL42 DEL40 DEL43 DEL14 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL16 DEL36 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL40 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60