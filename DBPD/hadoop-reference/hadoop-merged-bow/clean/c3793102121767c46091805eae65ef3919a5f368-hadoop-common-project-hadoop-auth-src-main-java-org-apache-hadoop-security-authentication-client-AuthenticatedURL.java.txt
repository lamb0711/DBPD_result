HADOOP-14687. AuthenticatedURL will reuse bad/expired session cookies. Contributed by Daryn Sharp

+import java.net.CookieHandler;
+import java.net.HttpCookie;
+import java.net.URI;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
-  private static final String AUTH_COOKIE_EQ = AUTH_COOKIE + "=";
+  // a lightweight cookie handler that will be attached to url connections.
+  // client code is not required to extract or inject auth cookies.
+  private static class AuthCookieHandler extends CookieHandler {
+    private HttpCookie authCookie;
+    private Map<String, List<String>> cookieHeaders = Collections.emptyMap();
+
+    @Override
+    public synchronized Map<String, List<String>> get(URI uri,
+        Map<String, List<String>> requestHeaders) throws IOException {
+      // call getter so it will reset headers if token is expiring.
+      getAuthCookie();
+      return cookieHeaders;
+    }
+
+    @Override
+    public void put(URI uri, Map<String, List<String>> responseHeaders) {
+      List<String> headers = responseHeaders.get("Set-Cookie");
+      if (headers != null) {
+        for (String header : headers) {
+          List<HttpCookie> cookies;
+          try {
+            cookies = HttpCookie.parse(header);
+          } catch (IllegalArgumentException iae) {
+            // don't care. just skip malformed cookie headers.
+            LOG.debug("Cannot parse cookie header: " + header, iae);
+            continue;
+          }
+          for (HttpCookie cookie : cookies) {
+            if (AUTH_COOKIE.equals(cookie.getName())) {
+              setAuthCookie(cookie);
+            }
+          }
+        }
+      }
+    }
+
+    // return the auth cookie if still valid.
+    private synchronized HttpCookie getAuthCookie() {
+      if (authCookie != null && authCookie.hasExpired()) {
+        setAuthCookie(null);
+      }
+      return authCookie;
+    }
+
+    private synchronized void setAuthCookie(HttpCookie cookie) {
+      final HttpCookie oldCookie = authCookie;
+      // will redefine if new cookie is valid.
+      authCookie = null;
+      cookieHeaders = Collections.emptyMap();
+      boolean valid = cookie != null && !cookie.getValue().isEmpty() &&
+          !cookie.hasExpired();
+      if (valid) {
+        // decrease lifetime to avoid using a cookie soon to expire.
+        // allows authenticators to pre-emptively reauthenticate to
+        // prevent clients unnecessarily receiving a 401.
+        long maxAge = cookie.getMaxAge();
+        if (maxAge != -1) {
+          cookie.setMaxAge(maxAge * 9/10);
+          valid = !cookie.hasExpired();
+        }
+      }
+      if (valid) {
+        // v0 cookies value aren't quoted by default but tomcat demands
+        // quoting.
+        if (cookie.getVersion() == 0) {
+          String value = cookie.getValue();
+          if (!value.startsWith("\"")) {
+            value = "\"" + value + "\"";
+            cookie.setValue(value);
+          }
+        }
+        authCookie = cookie;
+        cookieHeaders = new HashMap<>();
+        cookieHeaders.put("Cookie", Arrays.asList(cookie.toString()));
+      }
+      LOG.trace("Setting token value to {} ({})", authCookie, oldCookie);
+    }
+
+    private void setAuthCookieValue(String value) {
+      HttpCookie c = null;
+      if (value != null) {
+        c = new HttpCookie(AUTH_COOKIE, value);
+      }
+      setAuthCookie(c);
+    }
+  }
-    private String token;
+    private final AuthCookieHandler cookieHandler = new AuthCookieHandler();
-      return token != null;
+      return cookieHandler.getAuthCookie() != null;
-      token = tokenStr;
+      cookieHandler.setAuthCookieValue(tokenStr);
+    }
+
+    /**
+     * Installs a cookie handler for the http request to manage session
+     * cookies.
+     * @param url
+     * @return HttpUrlConnection
+     * @throws IOException
+     */
+    HttpURLConnection openConnection(URL url,
+        ConnectionConfigurator connConfigurator) throws IOException {
+      // the cookie handler is unfortunately a global static.  it's a
+      // synchronized class method so we can safely swap the handler while
+      // instantiating the connection object to prevent it leaking into
+      // other connections.
+      final HttpURLConnection conn;
+      synchronized(CookieHandler.class) {
+        CookieHandler current = CookieHandler.getDefault();
+        CookieHandler.setDefault(cookieHandler);
+        try {
+          conn = (HttpURLConnection)url.openConnection();
+        } finally {
+          CookieHandler.setDefault(current);
+        }
+      }
+      if (connConfigurator != null) {
+        connConfigurator.configure(conn);
+      }
+      return conn;
-      return token;
+      String value = "";
+      HttpCookie authCookie = cookieHandler.getAuthCookie();
+      if (authCookie != null) {
+        value = authCookie.getValue();
+        if (value.startsWith("\"")) { // tests don't want the quotes.
+          value = value.substring(1, value.length()-1);
+        }
+      }
+      return value;
-    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
-    if (connConfigurator != null) {
-      conn = connConfigurator.configure(conn);
-    }
-    injectToken(conn, token);
-    return conn;
+
+    // allow the token to create the connection with a cookie handler for
+    // managing session cookies.
+    return token.openConnection(url, connConfigurator);
-   * Helper method that injects an authentication token to send with a connection.
+   * Helper method that injects an authentication token to send with a
+   * connection. Callers should prefer using
+   * {@link Token#openConnection(URL, ConnectionConfigurator)} which
+   * automatically manages authentication tokens.
-    String t = token.token;
-    if (t != null) {
-      if (!t.startsWith("\"")) {
-        t = "\"" + t + "\"";
-      }
-      conn.addRequestProperty("Cookie", AUTH_COOKIE_EQ + t);
+    HttpCookie authCookie = token.cookieHandler.getAuthCookie();
+    if (authCookie != null) {
+      conn.addRequestProperty("Cookie", authCookie.toString());
-      Map<String, List<String>> headers = conn.getHeaderFields();
-      List<String> cookies = headers.get("Set-Cookie");
-      if (cookies != null) {
-        for (String cookie : cookies) {
-          if (cookie.startsWith(AUTH_COOKIE_EQ)) {
-            String value = cookie.substring(AUTH_COOKIE_EQ.length());
-            int separator = value.indexOf(";");
-            if (separator > -1) {
-              value = value.substring(0, separator);
-            }
-            if (value.length() > 0) {
-              LOG.trace("Setting token value to {} ({}), resp={}", value,
-                  token, respCode);
-              token.set(value);
-            }
-          }
-        }
-      }
+      // cookie handler should have already extracted the token.  try again
+      // for backwards compatibility if this method is called on a connection
+      // not opened via this instance.
+      token.cookieHandler.put(null, conn.getHeaderFields());

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS83 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS42 UPD83 MOV83 INS43 INS59 INS83 INS74 INS59 INS78 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS29 MOV43 INS42 INS44 INS44 INS43 INS8 INS41 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS42 INS43 INS43 INS74 INS43 INS42 INS74 INS42 INS42 INS21 INS41 INS42 INS43 INS42 MOV74 INS42 INS60 INS25 INS42 INS25 INS41 INS43 INS42 INS60 INS21 INS21 INS60 INS25 INS25 INS21 MOV43 INS42 INS60 INS25 INS21 INS42 UPD42 INS14 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS51 MOV25 MOV41 INS60 INS60 INS25 INS32 UPD66 INS66 INS65 INS66 INS66 INS43 MOV8 INS42 MOV42 INS43 INS43 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS74 INS32 INS42 INS42 MOV74 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS83 INS43 INS59 INS7 INS7 INS39 INS59 INS42 INS8 INS42 INS8 INS32 INS43 INS59 INS27 INS8 INS32 INS43 INS32 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS83 INS43 INS59 INS57 INS8 MOV43 INS59 INS43 INS59 INS27 INS8 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS68 INS42 UPD42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS70 INS27 INS32 INS21 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS27 INS60 INS25 INS25 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS21 INS54 INS42 INS45 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS42 INS42 INS69 INS69 INS40 INS42 INS42 INS42 INS42 INS42 INS45 INS44 INS42 INS8 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS27 INS38 INS39 INS59 UPD27 MOV27 INS8 INS27 INS8 INS7 INS7 INS32 INS7 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 MOV32 INS42 INS42 INS7 INS32 INS8 INS43 INS43 INS32 INS40 UPD42 INS33 MOV32 MOV43 INS42 INS60 INS54 INS70 INS42 INS33 INS27 INS38 INS32 INS42 INS32 UPD42 INS21 INS21 INS32 INS34 INS60 INS25 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS32 INS42 INS42 INS45 INS21 INS42 INS42 INS42 INS42 INS74 INS59 INS8 INS12 INS44 INS42 INS8 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS42 MOV43 INS59 INS38 INS8 INS74 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS7 INS43 INS43 INS42 INS21 INS44 INS8 INS43 INS42 INS25 INS32 INS42 INS42 INS42 INS27 INS42 INS38 INS42 INS32 INS32 INS21 INS21 INS43 INS42 INS42 INS42 INS42 MOV11 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS43 INS42 INS21 INS18 INS42 INS32 INS8 INS42 INS42 INS27 INS34 INS32 INS42 INS42 INS42 INS42 INS45 INS7 INS32 INS42 INS42 INS42 INS34 UPD27 MOV27 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS42 INS42 UPD34 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS45 UPD42 MOV42 UPD45 MOV45 INS45 INS42 INS42 INS42 DEL83 DEL83 DEL43 DEL42 DEL27 DEL59 DEL23 DEL42 DEL42 DEL42 DEL7 DEL42 DEL7 DEL42 DEL59 DEL60 DEL32 DEL21 DEL40 DEL42 DEL42 DEL45 DEL32 DEL38 DEL42 DEL45 DEL42 DEL45 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8