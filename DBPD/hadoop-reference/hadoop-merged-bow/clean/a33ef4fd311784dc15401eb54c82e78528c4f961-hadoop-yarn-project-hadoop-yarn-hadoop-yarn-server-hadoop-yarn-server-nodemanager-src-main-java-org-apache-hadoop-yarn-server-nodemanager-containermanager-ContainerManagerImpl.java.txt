YARN-8867. Added resource localization status to YARN service status call.
           Contributed by Chandni Singh

+import org.apache.hadoop.yarn.api.protocolrecords.GetLocalizationStatusesRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetLocalizationStatusesResponse;
+import org.apache.hadoop.yarn.api.records.LocalizationStatus;
+
+  @Override
+  public GetLocalizationStatusesResponse getLocalizationStatuses(
+      GetLocalizationStatusesRequest request) throws YarnException,
+      IOException {
+    Map<ContainerId, List<LocalizationStatus>> allStatuses = new HashMap<>();
+    Map<ContainerId, SerializedException> failedRequests = new HashMap<>();
+
+    UserGroupInformation remoteUgi = getRemoteUgi();
+    NMTokenIdentifier identifier = selectNMTokenIdentifier(remoteUgi);
+    if (identifier == null) {
+      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);
+    }
+    String remoteUser = remoteUgi.getUserName();
+    for (ContainerId id : request.getContainerIds()) {
+      try {
+        List<LocalizationStatus> statuses = getLocalizationStatusesInternal(id,
+            identifier, remoteUser);
+        allStatuses.put(id, statuses);
+      } catch (YarnException e) {
+        failedRequests.put(id, SerializedException.newInstance(e));
+      }
+    }
+    return GetLocalizationStatusesResponse.newInstance(allStatuses,
+        failedRequests);
+  }
+
+  private List<LocalizationStatus> getLocalizationStatusesInternal(
+      ContainerId containerID,
+      NMTokenIdentifier nmTokenIdentifier, String remoteUser)
+      throws YarnException {
+    Container container = this.context.getContainers().get(containerID);
+
+    LOG.info("Getting localization status for {}", containerID);
+    authorizeGetAndStopContainerRequest(containerID, container, false,
+        nmTokenIdentifier, remoteUser);
+
+    String containerIDStr = containerID.toString();
+    if (container == null) {
+      if (nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {
+        throw RPCUtil.getRemoteException("Container " + containerIDStr
+            + " was recently stopped on node manager.");
+      } else {
+        throw RPCUtil.getRemoteException("Container " + containerIDStr
+            + " is not handled by this NodeManager");
+      }
+    }
+    return container.getLocalizationStatuses();
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS60 INS70 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS60 INS25 INS41 INS42 INS74 INS59 INS74 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS44 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS43 INS59 INS27 INS8 INS32 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS8 INS12 INS32 INS42 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS60 INS21 INS44 INS8 INS22 INS42 INS42 INS42 INS42 INS53 INS53 INS42 INS42 INS74 INS59 INS32 INS43 INS42 INS21 INS52 INS42 INS32 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS42 INS42