HDFS-7056. Snapshot support for truncate. Contributed by Konstantin Shvachko and Plamen Jeliazkov.
+import java.util.Collections;
+import java.util.List;
+
+import org.apache.hadoop.hdfs.protocol.QuotaExceededException;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo;
+import org.apache.hadoop.hdfs.server.namenode.INode;
+import org.apache.hadoop.hdfs.server.namenode.INode.BlocksMapUpdateInfo;
+
+  public void destroyAndCollectSnapshotBlocks(
+      BlocksMapUpdateInfo collectedBlocks) {
+    for(FileDiff d : asList())
+      d.destroyAndCollectSnapshotBlocks(collectedBlocks);
+  }
+
+  public void saveSelf2Snapshot(int latestSnapshotId, INodeFile iNodeFile,
+      INodeFileAttributes snapshotCopy, boolean withBlocks)
+          throws QuotaExceededException {
+    final FileDiff diff =
+        super.saveSelf2Snapshot(latestSnapshotId, iNodeFile, snapshotCopy);
+    if(withBlocks)  // Store blocks if this is the first update
+      diff.setBlocks(iNodeFile.getBlocks());
+  }
+
+  public BlockInfo[] findEarlierSnapshotBlocks(int snapshotId) {
+    assert snapshotId != Snapshot.NO_SNAPSHOT_ID : "Wrong snapshot id";
+    if(snapshotId == Snapshot.CURRENT_STATE_ID) {
+      return null;
+    }
+    List<FileDiff> diffs = this.asList();
+    int i = Collections.binarySearch(diffs, snapshotId);
+    BlockInfo[] blocks = null;
+    for(i = i >= 0 ? i : -i; i < diffs.size(); i--) {
+      blocks = diffs.get(i).getBlocks();
+      if(blocks != null) {
+        break;
+      }
+    }
+    return blocks;
+  }
+
+  public BlockInfo[] findLaterSnapshotBlocks(int snapshotId) {
+    assert snapshotId != Snapshot.NO_SNAPSHOT_ID : "Wrong snapshot id";
+    if(snapshotId == Snapshot.CURRENT_STATE_ID) {
+      return null;
+    }
+    List<FileDiff> diffs = this.asList();
+    int i = Collections.binarySearch(diffs, snapshotId);
+    BlockInfo[] blocks = null;
+    for(i = i >= 0 ? i+1 : -i-1; i < diffs.size(); i++) {
+      blocks = diffs.get(i).getBlocks();
+      if(blocks != null) {
+        break;
+      }
+    }
+    return blocks;
+  }
+
+  /**
+   * Copy blocks from the removed snapshot into the previous snapshot
+   * up to the file length of the latter.
+   * Collect unused blocks of the removed snapshot.
+   */
+  void combineAndCollectSnapshotBlocks(INodeFile file,
+                                       FileDiff removed,
+                                       BlocksMapUpdateInfo collectedBlocks,
+                                       List<INode> removedINodes) {
+    BlockInfo[] removedBlocks = removed.getBlocks();
+    if(removedBlocks == null) {
+      FileWithSnapshotFeature sf = file.getFileWithSnapshotFeature();
+      assert sf != null : "FileWithSnapshotFeature is null";
+      if(sf.isCurrentFileDeleted())
+        sf.collectBlocksAndClear(file, collectedBlocks, removedINodes);
+      return;
+    }
+    int p = getPrior(removed.getSnapshotId(), true);
+    FileDiff earlierDiff = p == Snapshot.NO_SNAPSHOT_ID ? null : getDiffById(p);
+    // Copy blocks to the previous snapshot if not set already
+    if(earlierDiff != null)
+      earlierDiff.setBlocks(removedBlocks);
+    BlockInfo[] earlierBlocks =
+        (earlierDiff == null ? new BlockInfo[]{} : earlierDiff.getBlocks());
+    // Find later snapshot (or file itself) with blocks
+    BlockInfo[] laterBlocks = findLaterSnapshotBlocks(removed.getSnapshotId());
+    laterBlocks = (laterBlocks==null) ? file.getBlocks() : laterBlocks;
+    // Skip blocks, which belong to either the earlier or the later lists
+    int i = 0;
+    for(; i < removedBlocks.length; i++) {
+      if(i < earlierBlocks.length && removedBlocks[i] == earlierBlocks[i])
+        continue;
+      if(i < laterBlocks.length && removedBlocks[i] == laterBlocks[i])
+        continue;
+      break;
+    }
+    // Collect the remaining blocks of the file
+    while(i < removedBlocks.length) {
+      collectedBlocks.addDeleteBlock(removedBlocks[i++]);
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS5 INS42 INS44 INS8 INS83 INS5 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS43 INS42 INS70 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS25 INS43 INS85 INS39 INS42 INS6 INS25 INS60 INS60 INS60 INS24 INS41 INS43 INS85 INS39 INS42 INS6 INS25 INS60 INS60 INS60 INS24 INS41 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS25 INS60 INS60 INS25 INS60 INS60 INS21 INS60 INS24 INS61 INS42 INS44 INS32 INS21 INS42 INS42 INS83 INS43 INS59 INS42 INS21 INS42 INS27 INS45 INS27 INS8 INS74 INS59 INS39 INS59 INS5 INS59 INS7 INS27 INS37 INS8 INS42 INS42 INS27 INS45 INS27 INS8 INS74 INS59 INS39 INS59 INS5 INS59 INS7 INS27 INS37 INS8 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS43 INS5 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS27 INS21 INS5 INS59 INS5 INS59 INS7 INS39 INS59 INS27 INS37 INS8 INS27 INS8 INS43 INS42 INS42 INS32 INS42 INS42 INS48 INS32 INS42 INS40 INS42 INS40 INS41 INS43 INS43 INS42 INS32 INS42 INS32 INS43 INS85 INS42 INS33 INS42 INS16 INS42 INS32 INS42 INS21 INS25 INS42 INS40 INS42 INS40 INS41 INS43 INS43 INS42 INS32 INS42 INS32 INS43 INS85 INS42 INS33 INS42 INS16 INS42 INS32 INS42 INS21 INS25 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS33 INS60 INS6 INS25 INS41 INS42 INS32 INS42 INS42 INS16 INS42 INS33 INS32 INS43 INS85 INS42 INS36 INS43 INS85 INS42 INS32 INS42 INS16 INS42 INS34 INS42 INS40 INS42 INS25 INS25 INS10 INS42 INS40 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS38 INS42 INS42 INS7 INS27 INS8 INS33 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS27 INS42 INS42 INS7 INS27 INS8 INS42 INS42 INS42 INS43 INS59 INS27 INS45 INS32 INS21 INS42 INS32 INS9 INS27 INS33 INS32 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS32 INS36 INS32 INS42 INS27 INS18 INS27 INS18 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS33 INS10 INS42 INS34 INS42 INS34 INS38 INS34 INS42 INS32 INS42 INS33 INS10 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS27 INS3 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS27 INS27 INS27 INS42 INS42 INS2 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS5 INS4 INS42 INS42 INS42 INS33 INS42 INS40 INS2 INS2 INS42 INS40 INS2 INS2 INS42 INS37 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42