HDFS-13848. Refactor NameNode failover proxy providers. Contributed by Konstantin Shvachko.
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
+import org.apache.hadoop.hdfs.DFSUtilClient;
+import org.apache.hadoop.hdfs.HAUtilClient;
+import org.apache.hadoop.hdfs.client.HdfsClientConfigKeys;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+  protected static final Logger LOG =
+      LoggerFactory.getLogger(AbstractNNFailoverProxyProvider.class);
-  private AtomicBoolean fallbackToSimpleAuth;
+  protected Configuration conf;
+  protected Class<T> xface;
+  protected HAProxyFactory<T> factory;
+  protected UserGroupInformation ugi;
+  protected AtomicBoolean fallbackToSimpleAuth;
+
+  protected AbstractNNFailoverProxyProvider() {
+  }
+
+  protected AbstractNNFailoverProxyProvider(Configuration conf, URI uri,
+      Class<T> xface, HAProxyFactory<T> factory) {
+    this.conf = new Configuration(conf);
+    this.xface = xface;
+    this.factory = factory;
+    try {
+      this.ugi = UserGroupInformation.getCurrentUser();
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+
+    int maxRetries = this.conf.getInt(
+        HdfsClientConfigKeys.Failover.CONNECTION_RETRIES_KEY,
+        HdfsClientConfigKeys.Failover.CONNECTION_RETRIES_DEFAULT);
+    this.conf.setInt(
+        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,
+        maxRetries);
+
+    int maxRetriesOnSocketTimeouts = this.conf.getInt(
+        HdfsClientConfigKeys
+        .Failover.CONNECTION_RETRIES_ON_SOCKET_TIMEOUTS_KEY,
+        HdfsClientConfigKeys
+        .Failover.CONNECTION_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT);
+    this.conf.setInt(
+        CommonConfigurationKeysPublic
+        .IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,
+        maxRetriesOnSocketTimeouts);
+  }
+
+  /**
+   * ProxyInfo to a NameNode. Includes its address.
+   */
+  public static class NNProxyInfo<T> extends ProxyInfo<T> {
+    private InetSocketAddress address;
+
+    public NNProxyInfo(InetSocketAddress address) {
+      super(null, address.toString());
+      this.address = address;
+    }
+
+    public InetSocketAddress getAddress() {
+      return address;
+    }
+  }
+
+  @Override
+  public Class<T> getInterface() {
+    return xface;
+  }
+
+  /**
+   * Create a proxy if it has not been created yet.
+   */
+  protected NNProxyInfo<T> createProxyIfNeeded(NNProxyInfo<T> pi) {
+    if (pi.proxy == null) {
+      assert pi.getAddress() != null : "Proxy address is null";
+      try {
+        pi.proxy = factory.createProxy(conf,
+            pi.getAddress(), xface, ugi, false, getFallbackToSimpleAuth());
+      } catch (IOException ioe) {
+        LOG.error("{} Failed to create RPC proxy to NameNode",
+            this.getClass().getSimpleName(), ioe);
+        throw new RuntimeException(ioe);
+      }
+    }
+    return pi;
+  }
+
+  /**
+   * Get list of configured NameNode proxy addresses.
+   * Randomize the list if requested.
+   */
+  protected List<NNProxyInfo<T>> getProxyAddresses(URI uri, String addressKey) {
+    final List<NNProxyInfo<T>> proxies = new ArrayList<NNProxyInfo<T>>();
+    Map<String, Map<String, InetSocketAddress>> map =
+        DFSUtilClient.getAddresses(conf, null, addressKey);
+    Map<String, InetSocketAddress> addressesInNN = map.get(uri.getHost());
+
+    if (addressesInNN == null || addressesInNN.size() == 0) {
+      throw new RuntimeException("Could not find any configured addresses " +
+          "for URI " + uri);
+    }
+
+    Collection<InetSocketAddress> addressesOfNns = addressesInNN.values();
+    for (InetSocketAddress address : addressesOfNns) {
+      proxies.add(new NNProxyInfo<T>(address));
+    }
+    // Randomize the list to prevent all clients pointing to the same one
+    boolean randomized = getRandomOrder(conf, uri);
+    if (randomized) {
+      Collections.shuffle(proxies);
+    }
+
+    // The client may have a delegation token set for the logical
+    // URI of the cluster. Clone this token to apply to each of the
+    // underlying IPC addresses so that the IPC code can find it.
+    HAUtilClient.cloneDelegationTokenForLogicalUri(ugi, uri, addressesOfNns);
+    return proxies;
+  }
+
+  /**
+   * Check whether random order is configured for failover proxy provider
+   * for the namenode/nameservice.
+   *
+   * @param conf Configuration
+   * @param nameNodeUri The URI of namenode/nameservice
+   * @return random order configuration
+   */
+  public static boolean getRandomOrder(
+      Configuration conf, URI nameNodeUri) {
+    String host = nameNodeUri.getHost();
+    String configKeyWithHost = HdfsClientConfigKeys.Failover.RANDOM_ORDER
+        + "." + host;
+
+    if (conf.get(configKeyWithHost) != null) {
+      return conf.getBoolean(
+          configKeyWithHost,
+          HdfsClientConfigKeys.Failover.RANDOM_ORDER_DEFAULT);
+    }
+
+    return conf.getBoolean(
+        HdfsClientConfigKeys.Failover.RANDOM_ORDER,
+        HdfsClientConfigKeys.Failover.RANDOM_ORDER_DEFAULT);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS55 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS43 INS59 UPD83 INS83 INS42 INS8 INS83 INS42 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS42 INS73 INS74 INS23 INS31 INS31 INS78 INS83 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS21 INS21 INS21 INS54 INS60 INS21 INS60 INS21 INS65 INS42 INS43 INS43 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS43 INS43 INS41 INS65 INS43 INS43 INS74 INS42 INS25 INS41 INS65 INS43 INS74 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS60 INS70 INS60 INS25 INS21 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS7 INS7 INS7 INS8 INS12 INS39 INS59 INS32 INS39 INS59 INS32 INS66 INS42 INS42 INS42 INS42 INS43 INS42 INS46 INS21 INS42 INS41 INS42 INS42 INS42 INS66 INS42 INS42 INS43 INS43 INS27 INS8 INS42 INS66 INS66 INS42 INS43 INS43 INS42 INS42 INS83 INS74 INS59 INS74 INS59 INS74 INS59 INS27 INS8 INS74 INS59 INS44 INS42 INS8 INS39 INS59 INS42 INS8 INS32 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS43 INS42 INS42 INS42 INS42 INS22 INS14 INS22 INS42 INS22 INS42 INS21 INS44 INS8 INS42 INS32 INS22 INS42 INS40 INS42 INS42 INS32 INS22 INS42 INS40 INS42 INS42 INS33 INS32 INS7 INS42 INS42 INS42 INS40 INS33 INS6 INS54 INS42 INS42 INS43 INS74 INS42 INS14 INS43 INS43 INS74 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS27 INS27 INS53 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS33 INS41 INS42 INS42 INS40 INS40 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS52 INS42 INS7 INS43 INS42 INS53 INS22 INS42 INS40 INS40 INS52 INS42 INS22 INS42 INS40 INS40 INS52 INS42 INS42 INS42 INS22 INS42 INS27 INS45 INS8 INS12 INS42 INS43 INS43 INS74 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS32 INS34 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS22 INS32 INS42 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS33 INS21 INS44 INS8 INS42 INS42 INS43 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS52 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS53 INS42 INS43 INS43 INS42 INS45 INS45 INS42 INS74 INS42 INS42 INS40 INS32 INS42 INS32 INS14 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS32 INS42 INS42 INS45 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42