HDDS-980. Adding getOMCertificate in SCMSecurityProtocol. Contributed by Ajay Kumar.

+import java.util.Objects;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+
+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.OzoneManagerDetailsProto;
+import org.apache.hadoop.hdds.security.x509.SecurityConfig;
+import org.apache.hadoop.hdds.security.x509.certificate.authority.CertificateServer;
+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;
+import org.bouncycastle.cert.X509CertificateHolder;
+import static org.apache.hadoop.hdds.security.x509.certificate.authority.CertificateApprover.ApprovalType.KERBEROS_TRUSTED;
+
-  private final OzoneConfiguration config;
-  private final StorageContainerManager scm;
+  private final SecurityConfig config;
+  private final CertificateServer certificateServer;
-      StorageContainerManager scm) throws IOException {
-    this.config = conf;
-    this.scm = scm;
+      CertificateServer certificateServer) throws IOException {
+    this.config = new SecurityConfig(conf);
+    this.certificateServer = certificateServer;
-   * @param dnDetails   - DataNode Details.
-   * @param certSignReq - Certificate signing request.
-   * @return byte[]         - SCM signed certificate.
+   * @param dnDetails       - DataNode Details.
+   * @param certSignReq     - Certificate signing request.
+   * @return String         - SCM signed pem encoded certificate.
-    // TODO: Call scm to sign the csr.
-    return null;
+    Objects.requireNonNull(dnDetails);
+    Future<X509CertificateHolder> future =
+        certificateServer.requestCertificate(certSignReq,
+            KERBEROS_TRUSTED);
+
+    try {
+      return CertificateCodec.getPEMEncodedString(future.get());
+    } catch (InterruptedException | ExecutionException e) {
+      LOGGER.error("getDataNodeCertificate operation failed. ", e);
+      throw new IOException("getDataNodeCertificate operation failed. ", e);
+    }
+  }
+
+  /**
+   * Get SCM signed certificate for OM.
+   *
+   * @param omDetails       - OzoneManager Details.
+   * @param certSignReq     - Certificate signing request.
+   * @return String         - SCM signed pem encoded certificate.
+   */
+  @Override
+  public String getOMCertificate(OzoneManagerDetailsProto omDetails,
+      String certSignReq) throws IOException {
+    LOGGER.info("Processing CSR for om {}, UUID: {}", omDetails.getHostName(),
+        omDetails.getUuid());
+    Objects.requireNonNull(omDetails);
+    Future<X509CertificateHolder> future =
+        certificateServer.requestCertificate(certSignReq,
+            KERBEROS_TRUSTED);
+
+    try {
+      return CertificateCodec.getPEMEncodedString(future.get());
+    } catch (InterruptedException | ExecutionException e) {
+      LOGGER.error("getOMCertificate operation failed. ", e);
+      throw new IOException("getOMCertificate operation failed. ", e);
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 UPD43 UPD43 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 UPD42 UPD42 UPD42 UPD43 UPD42 MOV21 INS21 INS60 INS54 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS60 INS54 UPD42 UPD66 UPD66 UPD66 INS32 INS74 INS59 INS8 INS12 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS32 INS74 INS59 INS8 INS12 INS14 UPD42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 MOV41 INS44 INS8 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS41 INS44 INS8 INS43 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS84 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS84 INS42 INS21 INS53 INS42 INS42 INS42 INS32 INS43 INS43 INS32 INS14 INS42 INS42 INS32 INS43 INS43 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS45 INS42 INS42 INS42 DEL42 DEL33 DEL8