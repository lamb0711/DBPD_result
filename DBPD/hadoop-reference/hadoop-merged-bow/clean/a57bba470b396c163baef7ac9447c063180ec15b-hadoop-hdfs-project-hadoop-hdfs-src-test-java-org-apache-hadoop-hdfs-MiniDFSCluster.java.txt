Merge branch 'trunk' into HADOOP-12756

+import java.util.Arrays;
+  private List<long[]> storageCap = Lists.newLinkedList();
+
-    
-    if (storageCapacities != null) {
-      for (int i = curDatanodesNum; i < curDatanodesNum+numDataNodes; ++i) {
-        final int index = i - curDatanodesNum;
-        try (FsDatasetSpi.FsVolumeReferences volumes =
-            dns[index].getFSDataset().getFsVolumeReferences()) {
-          assert storageCapacities[index].length == storagesPerDatanode;
-          assert volumes.size() == storagesPerDatanode;
-          int j = 0;
-          for (FsVolumeSpi fvs : volumes) {
-            FsVolumeImpl volume = (FsVolumeImpl) fvs;
-            LOG.info("setCapacityForTesting " + storageCapacities[index][j]
-                + " for [" + volume.getStorageType() + "]" + volume
-                .getStorageID());
-            volume.setCapacityForTesting(storageCapacities[index][j]);
-            j++;
-          }
-        }
+    setDataNodeStorageCapacities(
+        curDatanodesNum,
+        numDataNodes,
+        dns,
+        storageCapacities);
+
+    /* memorize storage capacities */
+    if (storageCapacities != null) {
+      storageCap.addAll(Arrays.asList(storageCapacities));
+    }
+  }
+
+  private synchronized void setDataNodeStorageCapacities(
+      final int curDatanodesNum,
+      final int numDNs,
+      final DataNode[] dns,
+      long[][] storageCapacities) throws IOException {
+    if (storageCapacities != null) {
+      for (int i = curDatanodesNum; i < curDatanodesNum + numDNs; ++i) {
+        final int index = i - curDatanodesNum;
+        setDataNodeStorageCapacities(index, dns[index], storageCapacities);
-  
-  
-  
+
+  private synchronized void setDataNodeStorageCapacities(
+      final int curDnIdx,
+      final DataNode curDn,
+      long[][] storageCapacities) throws IOException {
+
+    if (storageCapacities == null || storageCapacities.length == 0) {
+      return;
+    }
+
+    try {
+      waitDataNodeFullyStarted(curDn);
+    } catch (TimeoutException | InterruptedException e) {
+      throw new IOException(e);
+    }
+
+    try (FsDatasetSpi.FsVolumeReferences volumes = curDn.getFSDataset()
+        .getFsVolumeReferences()) {
+      assert storageCapacities[curDnIdx].length == storagesPerDatanode;
+      assert volumes.size() == storagesPerDatanode;
+
+      int j = 0;
+      for (FsVolumeSpi fvs : volumes) {
+        FsVolumeImpl volume = (FsVolumeImpl) fvs;
+        LOG.info("setCapacityForTesting " + storageCapacities[curDnIdx][j]
+            + " for [" + volume.getStorageType() + "]" + volume.getStorageID());
+        volume.setCapacityForTesting(storageCapacities[curDnIdx][j]);
+        j++;
+      }
+    }
+    DataNodeTestUtils.triggerHeartbeat(curDn);
+  }
+
+  private void waitDataNodeFullyStarted(final DataNode dn)
+      throws TimeoutException, InterruptedException {
+    GenericTestUtils.waitFor(new Supplier<Boolean>() {
+      @Override
+      public Boolean get() {
+        return dn.isDatanodeFullyStarted();
+      }
+    }, 100, 60000);
+  }
+
-    DataNode newDn = DataNode.createDataNode(args, conf, secureResources);
-    dataNodes.add(new DataNodeProperties(
-        newDn, newconf, args, secureResources, newDn.getIpcPort()));
+    final DataNode newDn = DataNode.createDataNode(args, conf, secureResources);
+
+    final DataNodeProperties dnp = new DataNodeProperties(
+        newDn,
+        newconf,
+        args,
+        secureResources,
+        newDn.getIpcPort());
+    dataNodes.add(dnp);
+
+    setDataNodeStorageCapacities(
+        dataNodes.lastIndexOf(dnp),
+        newDn,
+        storageCap.toArray(new long[][]{}));

INS26 INS40 INS23 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 MOV8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS43 INS5 INS42 INS32 INS21 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS5 INS42 INS5 INS42 INS42 INS25 INS83 INS39 INS42 INS83 INS43 INS42 INS5 INS42 INS42 INS25 INS54 INS21 INS83 INS43 INS42 INS42 INS42 INS21 INS60 INS21 INS42 INS39 INS85 INS42 INS42 INS32 INS27 INS43 INS85 INS39 INS85 INS85 MOV27 INS8 INS42 INS39 INS85 INS85 INS27 INS8 INS8 INS12 INS32 INS42 INS32 INS83 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS24 INS27 INS27 INS41 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS14 INS34 INS34 INS42 INS42 MOV14 INS42 INS42 INS32 INS42 INS32 INS32 MOV58 INS27 MOV38 INS8 INS42 INS33 INS40 INS34 INS32 INS84 INS42 INS53 INS74 INS1 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS32 INS42 INS27 MOV60 INS21 INS42 INS42 INS43 INS43 INS14 INS32 INS43 INS43 INS31 INS5 INS4 INS42 INS42 INS42 INS42 INS42 MOV32 MOV2 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS39 INS85 INS85 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS41 INS32 UPD42 INS42 INS42 UPD42 DEL42 DEL42 DEL42 DEL27 DEL27 DEL24