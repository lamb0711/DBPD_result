HADOOP-16269. ABFS: add listFileStatus with StartFrom.

Author:    Da Zhou

+import java.nio.charset.StandardCharsets;
+import com.google.common.base.Strings;
+import org.apache.hadoop.fs.azurebfs.utils.CRC64;
+import static org.apache.hadoop.fs.azurebfs.constants.AbfsHttpConstants.CHAR_EQUALS;
+import static org.apache.hadoop.fs.azurebfs.constants.AbfsHttpConstants.CHAR_FORWARD_SLASH;
+import static org.apache.hadoop.fs.azurebfs.constants.AbfsHttpConstants.CHAR_HYPHEN;
+import static org.apache.hadoop.fs.azurebfs.constants.AbfsHttpConstants.CHAR_PLUS;
+import static org.apache.hadoop.fs.azurebfs.constants.AbfsHttpConstants.CHAR_STAR;
+import static org.apache.hadoop.fs.azurebfs.constants.AbfsHttpConstants.CHAR_UNDERSCORE;
+import static org.apache.hadoop.fs.azurebfs.constants.AbfsHttpConstants.ROOT_PATH;
+import static org.apache.hadoop.fs.azurebfs.constants.AbfsHttpConstants.SINGLE_WHITE_SPACE;
+import static org.apache.hadoop.fs.azurebfs.constants.AbfsHttpConstants.TOKEN_VERSION;
+
+  private static final String TOKEN_DATE_PATTERN = "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'";
+  /**
+   * @param path The list path.
+   * @return the entries in the path.
+   * */
-    LOG.debug("listStatus filesystem: {} path: {}",
+    return listStatus(path, null);
+  }
+
+  /**
+   * @param path Path the list path.
+   * @param startFrom the entry name that list results should start with.
+   *                  For example, if folder "/folder" contains four files: "afile", "bfile", "hfile", "ifile".
+   *                  Then listStatus(Path("/folder"), "hfile") will return "/folder/hfile" and "folder/ifile"
+   *                  Notice that if startFrom is a non-existent entry name, then the list response contains
+   *                  all entries after this non-existent entry in lexical order:
+   *                  listStatus(Path("/folder"), "cfile") will return "/folder/hfile" and "/folder/ifile".
+   *
+   * @return the entries in the path start from  "startFrom" in lexical order.
+   * */
+  @InterfaceStability.Unstable
+  public FileStatus[] listStatus(final Path path, final String startFrom) throws IOException {
+    LOG.debug("listStatus filesystem: {} path: {}, startFrom: {}",
-           path);
+            path,
+            startFrom);
-    String relativePath = path.isRoot() ? AbfsHttpConstants.EMPTY_STRING : getRelativePath(path);
+    final String relativePath = path.isRoot() ? AbfsHttpConstants.EMPTY_STRING : getRelativePath(path);
-    ArrayList<FileStatus> fileStatuses = new ArrayList<>();
+    // generate continuation token if a valid startFrom is provided.
+    if (startFrom != null && !startFrom.isEmpty()) {
+      continuation = getIsNamespaceEnabled()
+              ? generateContinuationTokenForXns(startFrom)
+              : generateContinuationTokenForNonXns(path.isRoot() ? ROOT_PATH : relativePath, startFrom);
+    }
+
+    ArrayList<FileStatus> fileStatuses = new ArrayList<>();
+  // generate continuation token for xns account
+  private String generateContinuationTokenForXns(final String firstEntryName) {
+    Preconditions.checkArgument(!Strings.isNullOrEmpty(firstEntryName)
+            && !firstEntryName.startsWith(AbfsHttpConstants.ROOT_PATH),
+            "startFrom must be a dir/file name and it can not be a full path");
+
+    StringBuilder sb = new StringBuilder();
+    sb.append(firstEntryName).append("#$").append("0");
+
+    CRC64 crc64 = new CRC64();
+    StringBuilder token = new StringBuilder();
+    token.append(crc64.compute(sb.toString().getBytes(StandardCharsets.UTF_8)))
+            .append(SINGLE_WHITE_SPACE)
+            .append("0")
+            .append(SINGLE_WHITE_SPACE)
+            .append(firstEntryName);
+
+    return Base64.encode(token.toString().getBytes(StandardCharsets.UTF_8));
+  }
+
+  // generate continuation token for non-xns account
+  private String generateContinuationTokenForNonXns(final String path, final String firstEntryName) {
+    Preconditions.checkArgument(!Strings.isNullOrEmpty(firstEntryName)
+            && !firstEntryName.startsWith(AbfsHttpConstants.ROOT_PATH),
+            "startFrom must be a dir/file name and it can not be a full path");
+
+    // Notice: non-xns continuation token requires full path (first "/" is not included) for startFrom
+    final String startFrom = (path.isEmpty() || path.equals(ROOT_PATH))
+            ? firstEntryName
+            : path + ROOT_PATH + firstEntryName;
+
+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(TOKEN_DATE_PATTERN, Locale.US);
+    String date = simpleDateFormat.format(new Date());
+    String token = String.format("%06d!%s!%06d!%s!%06d!%s!",
+            path.length(), path, startFrom.length(), startFrom, date.length(), date);
+    String base64EncodedToken = Base64.encode(token.getBytes(StandardCharsets.UTF_8));
+
+    StringBuilder encodedTokenBuilder = new StringBuilder(base64EncodedToken.length() + 5);
+    encodedTokenBuilder.append(String.format("%s!%d!", TOKEN_VERSION, base64EncodedToken.length()));
+
+    for (int i = 0; i < base64EncodedToken.length(); i++) {
+      char current = base64EncodedToken.charAt(i);
+      if (CHAR_FORWARD_SLASH == current) {
+        current = CHAR_UNDERSCORE;
+      } else if (CHAR_PLUS == current) {
+        current = CHAR_STAR;
+      } else if (CHAR_EQUALS == current) {
+        current = CHAR_HYPHEN;
+      }
+      encodedTokenBuilder.append(current);
+    }
+
+    return encodedTokenBuilder.toString();
+  }
+
-      if (!other.equals(this)) {// compare the path
+      if (!this.getPath().equals(other.getPath())) {// compare the path

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS78 INS44 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS45 INS65 INS65 INS43 INS85 INS83 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS40 INS83 INS43 INS42 INS25 INS42 INS83 INS43 INS42 INS21 INS60 INS21 INS60 INS60 INS21 INS41 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS21 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS24 INS41 INS42 INS66 INS66 INS42 INS42 INS32 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS83 INS27 INS8 INS42 INS32 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS32 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS58 INS27 INS37 INS8 INS32 INS42 INS42 INS33 UPD45 INS42 INS27 INS38 INS21 INS42 INS42 INS27 INS45 INS42 INS42 INS14 INS32 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS42 INS16 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS21 INS42 INS42 INS42 INS33 INS32 INS7 INS38 INS38 INS43 INS32 INS42 INS45 INS43 INS43 INS32 INS42 INS42 INS32 INS42 INS40 INS38 INS38 INS36 INS42 INS27 INS43 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS45 INS42 INS32 INS42 INS34 INS42 INS42 INS39 INS59 INS27 INS8 INS25 INS32 INS32 INS42 INS42 INS42 INS16 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS32 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS21 INS27 INS8 INS52 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 DEL52 DEL32