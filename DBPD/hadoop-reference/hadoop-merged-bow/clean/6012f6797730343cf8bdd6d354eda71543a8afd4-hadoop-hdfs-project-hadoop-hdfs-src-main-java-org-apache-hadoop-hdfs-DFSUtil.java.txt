svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802 for merging HDFS Snapshot feature branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480838 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.primitives.SignedBytes;
+  public static final byte[] EMPTY_BYTES = {};
+
+  /** Compare two byte arrays by lexicographical order. */
+  public static int compareBytes(byte[] left, byte[] right) {
+    if (left == null) {
+      left = EMPTY_BYTES;
+    }
+    if (right == null) {
+      right = EMPTY_BYTES;
+    }
+    return SignedBytes.lexicographicalComparator().compare(left, right);
+  }
+
+    return bytes2String(bytes, 0, bytes.length);
+  }
+  
+  /**
+   * Decode a specific range of bytes of the given byte array to a string
+   * using UTF8.
+   * 
+   * @param bytes The bytes to be decoded into characters
+   * @param offset The index of the first byte to decode
+   * @param length The number of bytes to decode
+   * @return The decoded string
+   */
+  public static String bytes2String(byte[] bytes, int offset, int length) {
-      return new String(bytes, "UTF8");
+      return new String(bytes, offset, length, "UTF8");
-    if (pathComponents.length == 0)
+    if (pathComponents.length == 0) {
-    if (pathComponents.length == 1 && pathComponents[0].length == 0) {
+    } else if (pathComponents.length == 1
+        && (pathComponents[0] == null || pathComponents[0].length == 0)) {
+  
+  /**
+   * Given a list of path components returns a byte array
+   */
+  public static byte[] byteArray2bytes(byte[][] pathComponents) {
+    if (pathComponents.length == 0) {
+      return EMPTY_BYTES;
+    } else if (pathComponents.length == 1
+        && (pathComponents[0] == null || pathComponents[0].length == 0)) {
+      return new byte[]{(byte) Path.SEPARATOR_CHAR};
+    }
+    int length = 0;
+    for (int i = 0; i < pathComponents.length; i++) {
+      length += pathComponents[i].length;
+      if (i < pathComponents.length - 1) {
+        length++; // for SEPARATOR
+      }
+    }
+    byte[] path = new byte[length];
+    int index = 0;
+    for (int i = 0; i < pathComponents.length; i++) {
+      System.arraycopy(pathComponents[i], 0, path, index,
+          pathComponents[i].length);
+      index += pathComponents[i].length;
+      if (i < pathComponents.length - 1) {
+        path[index] = (byte) Path.SEPARATOR_CHAR;
+        index++;
+      }
+    }
+    return path;
+  }

INS26 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS5 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 MOV29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS44 INS44 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS39 INS85 INS42 INS4 INS65 INS5 INS42 INS5 INS42 INS25 INS25 INS41 INS42 INS5 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS65 INS39 INS85 INS5 INS42 INS25 INS60 INS24 INS60 INS60 INS24 INS41 INS66 INS39 INS85 INS39 INS85 INS27 INS8 INS27 INS8 INS32 INS39 INS85 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS8 MOV25 INS66 INS39 INS85 INS85 INS27 INS8 INS25 INS39 INS59 INS58 INS27 INS37 INS8 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS33 INS21 INS42 INS33 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS40 MOV41 INS40 INS34 INS41 INS27 INS8 INS42 INS34 INS39 INS59 INS42 INS40 INS42 INS21 INS25 INS39 INS85 INS42 INS3 INS42 INS34 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS25 INS7 INS7 INS42 INS42 INS36 INS42 INS27 INS36 INS41 INS42 INS34 INS7 INS27 INS8 INS5 INS42 INS42 INS34 INS32 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS40 INS34 INS27 INS3 INS42 INS22 INS42 INS27 INS21 INS39 INS85 INS42 INS42 INS2 INS34 INS42 INS42 INS22 INS42 INS22 INS42 INS27 INS21 INS21 INS27 MOV27 INS27 INS27 INS5 INS4 INS2 INS42 INS40 INS34 INS37 INS42 INS42 INS2 INS42 INS2 INS42 INS40 INS34 INS7 INS37 INS2 INS33 INS2 INS33 INS22 INS34 INS39 INS85 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS11 INS42 INS42 INS34 INS42 INS34 INS2 INS42 INS39 INS40 INS42 INS42 INS39 INS40 INS42 INS34