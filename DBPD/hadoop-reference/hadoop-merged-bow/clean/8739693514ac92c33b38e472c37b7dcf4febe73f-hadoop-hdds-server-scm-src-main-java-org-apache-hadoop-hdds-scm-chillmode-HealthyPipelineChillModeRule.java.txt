HDDS-1217. Refactor ChillMode rules and chillmode manager. (#558)



+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdds.scm.events.SCMEvents;
-import org.apache.hadoop.hdds.server.events.EventHandler;
-import org.apache.hadoop.hdds.server.events.EventPublisher;
+
+import org.apache.hadoop.hdds.server.events.EventQueue;
+import org.apache.hadoop.hdds.server.events.TypedEvent;
-    implements ChillModeExitRule<PipelineReportFromDatanode>,
-    EventHandler<PipelineReportFromDatanode> {
+    extends ChillModeExitRule<PipelineReportFromDatanode>{
-  private final SCMChillModeManager chillModeManager;
-  HealthyPipelineChillModeRule(PipelineManager pipelineManager,
+  HealthyPipelineChillModeRule(String ruleName, EventQueue eventQueue,
+      PipelineManager pipelineManager,
+    super(manager, ruleName, eventQueue);
-    this.chillModeManager = manager;
+    Preconditions.checkArgument(
+        (healthyPipelinesPercent >= 0.0 && healthyPipelinesPercent <= 1.0),
+        HddsConfigKeys.
+            HDDS_SCM_CHILLMODE_HEALTHY_PIPELINE_THRESHOLD_PCT
+            + " value should be >= 0.0 and <= 1.0");
+
-  public boolean validate() {
+  protected TypedEvent<PipelineReportFromDatanode> getEventType() {
+    return SCMEvents.PROCESSED_PIPELINE_REPORT;
+  }
+
+  @Override
+  protected boolean validate() {
-  public void process(PipelineReportFromDatanode pipelineReportFromDatanode) {
-    Pipeline pipeline;
-    Preconditions.checkNotNull(pipelineReportFromDatanode);
-    PipelineReportsProto pipelineReport =
-        pipelineReportFromDatanode.getReport();
-
-    for (PipelineReport report : pipelineReport.getPipelineReportList()) {
-      PipelineID pipelineID = PipelineID
-          .getFromProtobuf(report.getPipelineID());
-      try {
-        pipeline = pipelineManager.getPipeline(pipelineID);
-      } catch (PipelineNotFoundException e) {
-        continue;
-      }
-
-      if (pipeline.getFactor() == HddsProtos.ReplicationFactor.THREE &&
-          pipeline.getPipelineState() == Pipeline.PipelineState.OPEN) {
-        // If the pipeline is open state mean, all 3 datanodes are reported
-        // for this pipeline.
-        currentHealthyPipelineCount++;
-      }
-    }
-  }
-
-  @Override
-  public void cleanup() {
-    // No need to deal with
-  }
-
-  @Override
-  public void onMessage(PipelineReportFromDatanode pipelineReportFromDatanode,
-      EventPublisher publisher) {
-    // If we have already reached healthy pipeline threshold, skip processing
-    // pipeline report from datanode.
-
-    if (validate()) {
-      chillModeManager.validateChillModeExitRules(publisher);
-      return;
-    }
-
+  protected void process(PipelineReportFromDatanode
+      pipelineReportFromDatanode) {
+    Preconditions.checkNotNull(pipelineReportFromDatanode);
-      // Process pipeline report from datanode
-      process(pipelineReportFromDatanode);
+      Pipeline pipeline;
+      PipelineReportsProto pipelineReport =
+          pipelineReportFromDatanode.getReport();
-      if (chillModeManager.getInChillMode()) {
+      for (PipelineReport report : pipelineReport.getPipelineReportList()) {
+        PipelineID pipelineID = PipelineID
+            .getFromProtobuf(report.getPipelineID());
+        try {
+          pipeline = pipelineManager.getPipeline(pipelineID);
+        } catch (PipelineNotFoundException e) {
+          continue;
+        }
+
+        if (pipeline.getFactor() == HddsProtos.ReplicationFactor.THREE &&
+            pipeline.getPipelineState() == Pipeline.PipelineState.OPEN) {
+          // If the pipeline is open state mean, all 3 datanodes are reported
+          // for this pipeline.
+          currentHealthyPipelineCount++;
+        }
+      }
+
+      if (scmInChillMode()) {
-    if (validate()) {
-      chillModeManager.validateChillModeExitRules(publisher);
-    }
+  }
+
+  @Override
+  protected void cleanup() {
+    processedDatanodeDetails.clear();
+  }
+
+  @VisibleForTesting
+  public int getCurrentHealthyPipelineCount() {
+    return currentHealthyPipelineCount;
+  }
+
+  @VisibleForTesting
+  public int getHealthyPipelineThresholdCount() {
+    return healthyPipelineThresholdCount;

MOV26 INS26 INS26 MOV31 INS40 INS40 UPD40 UPD40 INS31 INS31 INS31 INS44 INS44 MOV21 UPD83 UPD74 MOV74 UPD42 UPD83 UPD83 INS8 MOV78 UPD83 MOV83 MOV39 UPD42 MOV42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS42 INS43 INS42 INS46 UPD43 INS41 MOV21 MOV60 INS25 MOV21 INS42 INS41 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS40 MOV38 MOV8 INS42 INS42 INS42 INS42 INS36 INS27 INS25 MOV21 UPD42 UPD42 INS27 INS40 INS45 INS32 MOV8 INS27 INS27 INS42 INS42 INS34 INS42 INS34 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL25 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31