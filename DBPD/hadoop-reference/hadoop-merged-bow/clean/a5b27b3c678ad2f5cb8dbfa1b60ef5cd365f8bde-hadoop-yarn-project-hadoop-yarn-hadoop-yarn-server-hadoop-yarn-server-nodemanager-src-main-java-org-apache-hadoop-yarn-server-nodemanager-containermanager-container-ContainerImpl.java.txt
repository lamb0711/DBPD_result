YARN-5015. Support sliding window retry capability for container restart. (Chandni Singh via wangda)

Change-Id: I07addd3e4ba8d98456ee2ff1d5c540a38fe61dea

+
-  // remaining retries to relaunch container if needed
-  private int remainingRetryAttempts;
+  private SlidingWindowRetryPolicy.RetryContext windowRetryContext;
+  private SlidingWindowRetryPolicy retryPolicy;
+
-    this.remainingRetryAttempts = this.containerRetryContext.getMaxRetries();
+    this.windowRetryContext = new SlidingWindowRetryPolicy
+        .RetryContext(containerRetryContext);
+    this.retryPolicy = new SlidingWindowRetryPolicy(clock);
+
-    this.remainingRetryAttempts = rcs.getRemainingRetryAttempts();
+    this.windowRetryContext.setRemainingRetries(
+        rcs.getRemainingRetryAttempts());
+    this.windowRetryContext.setRestartTimes(rcs.getRestartTimes());
-          int n = container.containerRetryContext.getMaxRetries()
-              - container.remainingRetryAttempts;
-          container.addDiagnostics("Diagnostic message from attempt "
-              + n + " : ", "\n");
+          container.addDiagnostics("Diagnostic message from attempt : \n");
-        if (container.remainingRetryAttempts > 0) {
-          container.remainingRetryAttempts--;
-          try {
-            container.stateStore.storeContainerRemainingRetryAttempts(
-                container.getContainerId(), container.remainingRetryAttempts);
-          } catch (IOException e) {
-            LOG.warn(
-                "Unable to update remainingRetryAttempts in state store for "
-                    + container.getContainerId(), e);
-          }
-        }
-        doRelaunch(container, container.remainingRetryAttempts,
+        container.storeRetryContext();
+        doRelaunch(container,
+            container.windowRetryContext.getRemainingRetries(),
-    return shouldRetry(errorCode, containerRetryContext,
-        remainingRetryAttempts);
-  }
-
-  public static boolean shouldRetry(int errorCode,
-      ContainerRetryContext retryContext, int remainingRetryAttempts) {
-
-    ContainerRetryPolicy retryPolicy = retryContext.getRetryPolicy();
-    if (retryPolicy == ContainerRetryPolicy.RETRY_ON_ALL_ERRORS
-        || (retryPolicy == ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES
-        && retryContext.getErrorCodes() != null
-        && retryContext.getErrorCodes().contains(errorCode))) {
-      return remainingRetryAttempts > 0
-          || remainingRetryAttempts == ContainerRetryContext.RETRY_FOREVER;
-    }
-
-    return false;
+    return retryPolicy.shouldRetry(windowRetryContext, errorCode);
+
-      // Reset the retry attempts since its a fresh start
-      container.remainingRetryAttempts =
-          container.containerRetryContext.getMaxRetries();
+      container.windowRetryContext = new SlidingWindowRetryPolicy
+          .RetryContext(container.containerRetryContext);
+      container.retryPolicy = new SlidingWindowRetryPolicy(clock);
+
+  private void storeRetryContext() {
+    if (windowRetryContext.getRestartTimes() != null) {
+      try {
+        stateStore.storeContainerRestartTimes(containerId,
+            windowRetryContext.getRestartTimes());
+      } catch (IOException e) {
+        LOG.warn(
+            "Unable to update finishTimeForRetryAttempts in state store for "
+                + containerId, e);
+      }
+    }
+    try {
+      stateStore.storeContainerRemainingRetryAttempts(containerId,
+          windowRetryContext.getRemainingRetries());
+    } catch (IOException e) {
+      LOG.warn(
+          "Unable to update remainingRetryAttempts in state store for "
+              + containerId, e);
+    }
+  }
+
+  @VisibleForTesting
+  SlidingWindowRetryPolicy getRetryPolicy() {
+    return retryPolicy;
+  }

MOV31 INS23 INS31 INS83 INS43 INS59 INS43 MOV78 UPD83 UPD39 UPD42 INS8 INS78 INS43 INS42 INS8 INS40 INS42 INS42 UPD42 INS21 INS21 INS41 INS25 INS54 INS42 INS42 INS41 INS7 INS32 INS32 INS32 INS21 INS27 INS8 INS8 INS12 INS42 INS22 INS14 INS14 INS22 INS42 MOV32 INS22 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS7 INS32 INS33 INS54 INS21 INS44 INS8 INS52 INS42 INS43 INS42 UPD42 INS43 INS42 MOV52 UPD42 MOV42 INS52 INS42 INS42 INS42 MOV21 UPD40 INS14 INS40 INS14 INS42 INS42 INS8 INS12 INS32 INS43 UPD42 MOV42 INS21 INS40 INS42 INS32 INS43 INS40 INS43 INS42 INS21 MOV44 INS8 INS42 INS42 INS42 INS32 INS42 INS32 MOV42 UPD42 MOV42 INS32 INS40 INS42 INS32 INS21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 MOV42 UPD40 MOV40 INS42 INS42 INS42 INS42 INS32 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS42 DEL39 DEL52 DEL42 DEL22 DEL42 DEL32 DEL22 DEL7 DEL39 DEL42 DEL40 DEL42 DEL32 DEL40 DEL27 DEL59 DEL60 DEL45 DEL42 DEL45 DEL27 DEL45 DEL40 DEL42 DEL32 DEL40 DEL32 DEL40 DEL34 DEL27 DEL40 DEL37 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL36 DEL27 DEL42 DEL34 DEL27 DEL42 DEL40 DEL27 DEL27 DEL41 DEL8 DEL25 DEL9 DEL41 DEL40 DEL42 DEL32 DEL39 DEL44 DEL42 DEL32 DEL41 DEL8