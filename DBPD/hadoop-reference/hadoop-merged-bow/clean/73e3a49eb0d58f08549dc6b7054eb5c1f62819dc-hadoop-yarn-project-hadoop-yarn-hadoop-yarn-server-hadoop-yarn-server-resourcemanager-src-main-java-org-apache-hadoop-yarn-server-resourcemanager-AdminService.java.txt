YARN-313. Add Admin API for supporting node resource configuration in command line. (Contributed by Inigo Goiri, Kenji Kikushima and Junping Du)

+import org.apache.hadoop.yarn.server.api.protocolrecords.RefreshNodesResourcesRequest;
+import org.apache.hadoop.yarn.server.api.protocolrecords.RefreshNodesResourcesResponse;
+import org.apache.hadoop.yarn.server.resourcemanager.resource.DynamicResourceConfiguration;
+  @Override
+  public RefreshNodesResourcesResponse refreshNodesResources(
+      RefreshNodesResourcesRequest request)
+      throws YarnException, StandbyException {
+    String argName = "refreshNodesResources";
+    UserGroupInformation user = checkAcls(argName);
+    final String msg = "refresh nodes.";
+
+    checkRMStatus(user.getShortUserName(), argName, msg);
+
+    RefreshNodesResourcesResponse response =
+        recordFactory.newRecordInstance(RefreshNodesResourcesResponse.class);
+
+    try {
+      Configuration conf = getConfig();
+      Configuration configuration = new Configuration(conf);
+      DynamicResourceConfiguration newconf;
+
+      InputStream DRInputStream =
+        this.rmContext.getConfigurationProvider()
+        .getConfigurationInputStream(configuration,
+          YarnConfiguration.DR_CONFIGURATION_FILE);
+      if (DRInputStream != null) {
+        configuration.addResource(DRInputStream);
+        newconf = new DynamicResourceConfiguration(configuration, false);
+      } else {
+        newconf = new DynamicResourceConfiguration(configuration, true);
+      }
+
+      if (newconf.getNodes().length == 0) {
+        RMAuditLogger.logSuccess(user.getShortUserName(), argName,
+            "AdminService");
+        return response;
+      } else {
+        Map<NodeId, ResourceOption> nodeResourceMap =
+          newconf.getNodeResourceMap();
+
+        UpdateNodeResourceRequest updateRequest =
+          UpdateNodeResourceRequest.newInstance(nodeResourceMap);
+        updateNodeResource(updateRequest);
+        RMAuditLogger.logSuccess(user.getShortUserName(), argName,
+          "AdminService");
+        return response;
+      }
+    } catch (IOException ioe) {
+      throw logAndWrapException(ioe, user.getShortUserName(), argName, msg);
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS21 INS60 INS54 INS42 INS43 INS59 INS43 INS59 INS83 INS43 INS59 INS32 INS43 INS59 INS8 INS12 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS60 INS60 INS60 INS60 INS25 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS8 INS43 INS42 INS53 INS43 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS22 INS34 INS21 INS41 INS60 INS60 INS21 INS21 INS41 INS42 INS32 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS40 INS32 INS7 INS7 INS32 INS42 INS32 INS42 INS74 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS52 INS42 INS43 INS42 INS9 INS43 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42