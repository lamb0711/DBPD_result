YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.

+import org.apache.hadoop.metrics2.lib.MutableGaugeLong;
-  @Metric("Allocated memory in MB") MutableGaugeInt allocatedMB;
-  @Metric("Allocated CPU in virtual cores") MutableGaugeInt allocatedVCores;
+  @Metric("Allocated memory in MB") MutableGaugeLong allocatedMB;
+  @Metric("Allocated CPU in virtual cores") MutableGaugeLong allocatedVCores;
-  @Metric("Available memory in MB") MutableGaugeInt availableMB;
-  @Metric("Available CPU in virtual cores") MutableGaugeInt availableVCores;
-  @Metric("Pending memory allocation in MB") MutableGaugeInt pendingMB;
-  @Metric("Pending CPU allocation in virtual cores") MutableGaugeInt pendingVCores;
+  @Metric("Available memory in MB") MutableGaugeLong availableMB;
+  @Metric("Available CPU in virtual cores") MutableGaugeLong availableVCores;
+  @Metric("Pending memory allocation in MB") MutableGaugeLong pendingMB;
+  @Metric("Pending CPU allocation in virtual cores") MutableGaugeLong pendingVCores;
-  @Metric("# of reserved memory in MB") MutableGaugeInt reservedMB;
-  @Metric("Reserved CPU in virtual cores") MutableGaugeInt reservedVCores;
+  @Metric("# of reserved memory in MB") MutableGaugeLong reservedMB;
+  @Metric("Reserved CPU in virtual cores") MutableGaugeLong reservedVCores;
-    availableMB.set(limit.getMemory());
+    availableMB.set(limit.getMemorySize());
-    pendingMB.incr(res.getMemory() * containers);
-    pendingVCores.incr(res.getVirtualCores() * containers);
+    pendingMB.incr(res.getMemorySize() * containers);
+    pendingVCores.incr(res.getVirtualCoresSize() * containers);
-    pendingMB.decr(res.getMemory() * containers);
-    pendingVCores.decr(res.getVirtualCores() * containers);
+    pendingMB.decr(res.getMemorySize() * containers);
+    pendingVCores.decr(res.getVirtualCoresSize() * containers);
-    allocatedMB.incr(res.getMemory() * containers);
-    allocatedVCores.incr(res.getVirtualCores() * containers);
+    allocatedMB.incr(res.getMemorySize() * containers);
+    allocatedVCores.incr(res.getVirtualCoresSize() * containers);
-    allocatedMB.incr(res.getMemory());
+    allocatedMB.incr(res.getMemorySize());
-    pendingMB.decr(res.getMemory());
+    pendingMB.decr(res.getMemorySize());
-    allocatedMB.decr(res.getMemory() * containers);
-    allocatedVCores.decr(res.getVirtualCores() * containers);
+    allocatedMB.decr(res.getMemorySize() * containers);
+    allocatedVCores.decr(res.getVirtualCoresSize() * containers);
-    allocatedMB.decr(res.getMemory());
+    allocatedMB.decr(res.getMemorySize());
-    reservedMB.incr(res.getMemory());
+    reservedMB.incr(res.getMemorySize());
-    reservedMB.decr(res.getMemory());
+    reservedMB.decr(res.getMemorySize());
-  public int getAllocatedMB() {
+  public long getAllocatedMB() {
-  public int getAllocatedVirtualCores() {
+  public long getAllocatedVirtualCores() {
-  public int getAvailableMB() {
+  public long getAvailableMB() {
-  public int getAvailableVirtualCores() {
+  public long getAvailableVirtualCores() {
-  public int getPendingMB() {
+  public long getPendingMB() {
-  public int getPendingVirtualCores() {
+  public long getPendingVirtualCores() {
-  public int getReservedMB() {
+  public long getReservedMB() {
-  public int getReservedVirtualCores() {
+  public long getReservedVirtualCores() {

INS26 INS40 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD39 UPD39 UPD39 UPD39 UPD39 UPD39 UPD39 UPD39 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42