svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832 for merging Heterogeneous Storage feature branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550363 13f79535-47bb-0310-9956-ffa450edef68

-    private DatanodeDescriptor expectedLocation;
+    private final DatanodeStorageInfo expectedLocation;
-                             DatanodeDescriptor target,
+                             DatanodeStorageInfo target,
-    DatanodeDescriptor getExpectedLocation() {
+    private DatanodeStorageInfo getExpectedStorageLocation() {
-      return expectedLocation.isAlive;
+      return expectedLocation.getDatanodeDescriptor().isAlive;
-                             DatanodeDescriptor[] targets) {
+                             DatanodeStorageInfo[] targets) {
-  public void setExpectedLocations(DatanodeDescriptor[] targets) {
+  public void setExpectedLocations(DatanodeStorageInfo[] targets) {
-  public DatanodeDescriptor[] getExpectedLocations() {
+  public DatanodeStorageInfo[] getExpectedStorageLocations() {
-    DatanodeDescriptor[] locations = new DatanodeDescriptor[numLocations];
+    DatanodeStorageInfo[] storages = new DatanodeStorageInfo[numLocations];
-      locations[i] = replicas.get(i).getExpectedLocation();
-    return locations;
+      storages[i] = replicas.get(i).getExpectedStorageLocation();
+    return storages;
-        r.getExpectedLocation().removeBlock(this);
+        r.getExpectedStorageLocation().removeBlock(this);
-            + "from location: " + r.getExpectedLocation());
+            + "from location: " + r.getExpectedStorageLocation());
-      if (replicas.get(i).getExpectedLocation().getLastUpdate() > mostRecentLastUpdate) {
-        primary = replicas.get(i);
+      final ReplicaUnderConstruction ruc = replicas.get(i);
+      final long lastUpdate = ruc.getExpectedStorageLocation().getDatanodeDescriptor().getLastUpdate(); 
+      if (lastUpdate > mostRecentLastUpdate) {
-        mostRecentLastUpdate = primary.getExpectedLocation().getLastUpdate();
+        primary = ruc;
+        mostRecentLastUpdate = lastUpdate;
-      primary.getExpectedLocation().addBlockToBeRecovered(this);
+      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);
-  void addReplicaIfNotPresent(DatanodeDescriptor dn,
+  void addReplicaIfNotPresent(DatanodeStorageInfo storage,
-    for (ReplicaUnderConstruction r : replicas) {
-      if (r.getExpectedLocation() == dn) {
+    Iterator<ReplicaUnderConstruction> it = replicas.iterator();
+    while (it.hasNext()) {
+      ReplicaUnderConstruction r = it.next();
+      if(r.getExpectedStorageLocation() == storage) {
+      } else if (r.getExpectedStorageLocation().getDatanodeDescriptor() ==
+          storage.getDatanodeDescriptor()) {
+
+        // The Datanode reported that the block is on a different storage
+        // than the one chosen by BlockPlacementPolicy. This can occur as
+        // we allow Datanodes to choose the target storage. Update our
+        // state by removing the stale entry and adding a new one.
+        it.remove();
+        break;
-    replicas.add(new ReplicaUnderConstruction(block, dn, rState));
+    replicas.add(new ReplicaUnderConstruction(block, storage, rState));

UPD5 UPD42 INS83 UPD43 INS83 UPD43 UPD42 UPD5 UPD5 UPD43 UPD43 UPD42 INS60 INS61 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD5 UPD42 UPD42 INS74 INS59 INS32 INS8 UPD42 INS22 UPD42 UPD42 UPD43 UPD42 INS60 INS60 INS25 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS32 INS42 UPD42 UPD5 INS83 INS43 INS59 INS83 INS39 INS59 INS27 MOV8 MOV21 INS42 MOV42 INS42 INS42 MOV43 INS59 INS27 MOV8 INS25 INS43 UPD42 INS42 INS42 UPD43 UPD42 UPD42 INS42 INS42 MOV32 INS42 INS32 INS42 MOV42 INS32 INS42 INS32 INS32 INS42 MOV27 INS8 INS42 UPD42 MOV32 MOV42 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS10 UPD42 INS42 INS42 UPD42 INS32 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL27 DEL25 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL25 DEL8 DEL70