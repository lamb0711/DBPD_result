HDFS-8559. Erasure Coding: fix non-protobuf fsimage for striped blocks. (Jing Zhao via yliu)

-import org.apache.hadoop.hdfs.protocol.HdfsConstants;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStriped;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStripedUnderConstruction;
-import org.apache.hadoop.io.erasurecode.ECSchema;
-    final boolean isStriped = NameNodeLayoutVersion.supports(
-        NameNodeLayoutVersion.Feature.ERASURE_CODING, imgVersion)
-        && (in.readBoolean());
-
-    // TODO: ECSchema can be restored from persisted file (HDFS-7859).
-    final ECSchema schema = isStriped ?
-        ErasureCodingSchemaManager.getSystemDefaultSchema() : null;
-    final BlockInfoContiguous[] blocksContiguous;
-    BlockInfoStriped[] blocksStriped = null;
-    if (isStriped) {
-      blocksContiguous = new BlockInfoContiguous[0];
-      blocksStriped = new BlockInfoStriped[numBlocks];
-      int i = 0;
-      for (; i < numBlocks - 1; i++) {
-        blocksStriped[i] = new BlockInfoStriped(new Block(), schema);
-        blocksStriped[i].readFields(in);
-      }
-      if (numBlocks > 0) {
-        blocksStriped[i] = new BlockInfoStripedUnderConstruction(new Block(),
-            schema, BlockUCState.UNDER_CONSTRUCTION, null);
-        blocksStriped[i].readFields(in);
-      }
-    } else {
-      blocksContiguous = new BlockInfoContiguous[numBlocks];
-      Block blk = new Block();
-      int i = 0;
-      for (; i < numBlocks-1; i++) {
-        blk.readFields(in);
-        blocksContiguous[i] = new BlockInfoContiguous(blk, blockReplication);
-      }
-      // last block is UNDER_CONSTRUCTION
-      if(numBlocks > 0) {
-        blk.readFields(in);
-        blocksContiguous[i] = new BlockInfoContiguousUnderConstruction(
-                blk, blockReplication, BlockUCState.UNDER_CONSTRUCTION, null);
-      }
+    final BlockInfoContiguous[] blocksContiguous =
+        new BlockInfoContiguous[numBlocks];
+    Block blk = new Block();
+    int i = 0;
+    for (; i < numBlocks - 1; i++) {
+      blk.readFields(in);
+      blocksContiguous[i] = new BlockInfoContiguous(blk, blockReplication);
+    }
+    // last block is UNDER_CONSTRUCTION
+    if(numBlocks > 0) {
+      blk.readFields(in);
+      blocksContiguous[i] = new BlockInfoContiguousUnderConstruction(
+          blk, blockReplication, BlockUCState.UNDER_CONSTRUCTION, null);
-    INodeFile file;
-    if (isStriped) {
-      file = new INodeFile(inodeId, name, perm, modificationTime,
-          modificationTime, blocksContiguous, (short) 0, preferredBlockSize);
-      file.addStripedBlocksFeature();
-      for (int i = 0; i < numBlocks; i++) {
-        file.getStripedBlocksFeature().addBlock(blocksStriped[i]);
-      }
-    } else {
-      file = new INodeFile(inodeId, name, perm, modificationTime,
-          modificationTime, blocksContiguous, blockReplication,
-          preferredBlockSize);
-    }
+    INodeFile file = new INodeFile(inodeId, name, perm, modificationTime,
+        modificationTime, blocksContiguous, blockReplication, preferredBlockSize);
-    // whether the file has striped blocks
-    out.writeBoolean(cons.isStriped());
+
-    // whether the file has striped blocks
-    out.writeBoolean(file.isStriped());
+
-      out.writeInt(((INodeReference.DstReference) ref).getDstSnapshotId());
+      out.writeInt(ref.getDstSnapshotId());

MOV8 MOV21 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 INS60 MOV60 MOV60 MOV60 MOV60 MOV6 INS60 MOV41 INS83 MOV5 INS59 MOV43 INS59 MOV32 INS42 MOV3 INS42 MOV14 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL7 DEL83 DEL39 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42 DEL32 DEL36 DEL27 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL16 DEL59 DEL60 DEL83 DEL42 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL7 DEL21 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL43 DEL14 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL34 DEL27 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL43 DEL14 DEL42 DEL40 DEL33 DEL14 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL39 DEL34 DEL11 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL40 DEL43 DEL42 DEL11 DEL36