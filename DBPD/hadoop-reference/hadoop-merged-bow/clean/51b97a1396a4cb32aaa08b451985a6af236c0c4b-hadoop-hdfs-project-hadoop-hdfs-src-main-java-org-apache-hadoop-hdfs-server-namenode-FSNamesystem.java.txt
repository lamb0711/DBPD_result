HDFS-6605.Client server negotiation of cipher suite. (wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1607499 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.crypto.key.KeyProvider.KeyVersion;
+import org.apache.hadoop.hdfs.UnknownCipherSuiteException;
-  
+
+  /**
+   * If the file is within an encryption zone, select the appropriate 
+   * CipherSuite from the list provided by the client. Since the client may 
+   * be newer, need to handle unknown CipherSuites.
+   *
+   * @param src path of the file
+   * @param cipherSuites client-provided list of supported CipherSuites, 
+   *                     in desired order.
+   * @return chosen CipherSuite, or null if file is not in an EncryptionZone
+   * @throws IOException
+   */
+  private CipherSuite chooseCipherSuite(String src, List<CipherSuite> 
+      cipherSuites) throws UnknownCipherSuiteException {
+    EncryptionZone zone = getEncryptionZoneForPath(src);
+    // Not in an EZ
+    if (zone == null) {
+      return null;
+    }
+    CipherSuite chosen = null;
+    for (CipherSuite c : cipherSuites) {
+      if (c.equals(CipherSuite.UNKNOWN)) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Ignoring unknown CipherSuite provided by client: "
+              + c.getUnknownValue());
+        }
+        continue;
+      }
+      for (CipherSuite supported : CipherSuite.values()) {
+        if (supported.equals(c)) {
+          chosen = c;
+          break;
+        }
+      }
+    }
+    if (chosen == null) {
+      throw new UnknownCipherSuiteException(
+          "No cipher suites provided by the client are supported."
+              + " Client provided: " + Arrays.toString(cipherSuites.toArray())
+              + " NameNode supports: " + Arrays.toString(CipherSuite.values()));
+    }
+    return chosen;
+  }
+
-      boolean createParent, short replication, long blockSize)
+      boolean createParent, short replication, long blockSize, 
+      List<CipherSuite> cipherSuites)
-          createParent, replication, blockSize, cacheEntry != null);
+          createParent, replication, blockSize, cipherSuites,
+          cacheEntry != null);
-      boolean logRetryCache) throws AccessControlException, SafeModeException,
+      List<CipherSuite> cipherSuites, boolean logRetryCache)
+      throws AccessControlException, SafeModeException,
-      NameNode.stateChangeLog.debug("DIR* NameSystem.startFile: src=" + src
-          + ", holder=" + holder
-          + ", clientMachine=" + clientMachine
-          + ", createParent=" + createParent
-          + ", replication=" + replication
-          + ", createFlag=" + flag.toString());
+      StringBuilder builder = new StringBuilder();
+      builder.append("DIR* NameSystem.startFile: src=" + src
+              + ", holder=" + holder
+              + ", clientMachine=" + clientMachine
+              + ", createParent=" + createParent
+              + ", replication=" + replication
+              + ", createFlag=" + flag.toString()
+              + ", blockSize=" + blockSize);
+      builder.append(", cipherSuites=");
+      if (cipherSuites != null) {
+        builder.append(Arrays.toString(cipherSuites.toArray()));
+      } else {
+        builder.append("null");
+      }
+      NameNode.stateChangeLog.debug(builder.toString());
-          overwrite, createParent, replication, blockSize, logRetryCache);
+          overwrite, createParent, replication, blockSize, cipherSuites,
+          logRetryCache);
-      short replication, long blockSize, boolean logRetryEntry)
+      short replication, long blockSize, List<CipherSuite> cipherSuites,
+      boolean logRetryEntry)
+
+    FileEncryptionInfo feInfo = null;
+    CipherSuite suite = chooseCipherSuite(src, cipherSuites);
+    if (suite != null) {
+      Preconditions.checkArgument(!suite.equals(CipherSuite.UNKNOWN), 
+          "Chose an UNKNOWN CipherSuite!");
+      // TODO: fill in actual key/iv in HDFS-6474
+      // For now, populate with dummy data
+      byte[] key = new byte[suite.getAlgorithmBlockSize()];
+      for (int i = 0; i < key.length; i++) {
+        key[i] = (byte)i;
+      }
+      byte[] iv = new byte[suite.getAlgorithmBlockSize()];
+      for (int i = 0; i < iv.length; i++) {
+        iv[i] = (byte)(3+i*2);
+      }
+      feInfo = new FileEncryptionInfo(suite, key, iv);
+    }
+
+      // Set encryption attributes if necessary
+      if (feInfo != null) {
+        dir.setFileEncryptionInfo(src, feInfo);
+        newNode = dir.getInode(newNode.getId()).asFile();
+      }
+
-    providerOptions.setBitLength(codec.getAlgorithmBlockSize()*8);
+    providerOptions.setBitLength(codec.getCipherSuite()
+        .getAlgorithmBlockSize()*8);
+    assert hasReadLock();

MOV26 UPD40 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS44 INS44 INS44 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS60 INS70 INS25 INS41 INS74 INS42 INS74 INS42 INS74 INS42 INS60 INS60 INS25 INS6 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS33 INS43 INS42 INS25 INS70 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS60 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS24 INS60 INS24 INS21 INS25 INS42 INS42 INS42 INS33 INS42 INS32 INS8 INS44 INS32 INS8 INS14 INS43 INS59 INS32 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS32 INS5 INS59 INS58 INS27 INS37 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS7 INS27 INS8 INS42 INS42 INS40 INS25 INS18 INS43 INS42 INS42 INS42 INS25 INS43 INS27 INS42 INS42 INS14 UPD42 INS42 INS42 INS42 INS45 INS42 INS33 INS21 INS21 INS40 INS42 INS32 INS42 INS42 INS42 INS38 INS45 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS14 INS42 INS33 INS21 INS21 INS32 INS32 INS8 INS42 INS32 INS8 INS42 INS27 INS32 INS45 INS32 INS42 INS43 INS45 INS42 INS32 INS32 INS42 INS42 INS32 INS5 INS32 INS42 INS34 INS7 INS5 INS32 INS42 INS34 INS7 INS43 INS42 INS42 INS42 INS32 INS7 MOV42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS21 INS10 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS40 INS39 INS85 INS42 INS42 INS2 INS11 INS39 INS85 INS42 INS42 INS2 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS39 INS42 INS42 INS42 INS39 INS36 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS45 INS32 INS34 INS27 INS42 INS42 INS42 INS42 INS42 INS34 DEL40