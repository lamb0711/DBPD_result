HDFS-6720. Remove KeyProvider in EncryptionZoneManager. (wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612632 13f79535-47bb-0310-9956-ffa450edef68

-   * Create an encryption zone on directory src either using keyIdArg if
-   * supplied or generating a keyId if it's null.
+   * Create an encryption zone on directory src. If provided,
+   * will use an existing key, else will generate a new key.
-   * @param keyIdArg an optional keyId of a key in the configured
+   * @param keyNameArg an optional name of a key in the configured
-  void createEncryptionZone(final String src, String keyIdArg)
+  void createEncryptionZone(final String src, String keyNameArg)
-    String keyId = keyIdArg;
+    String keyName = keyNameArg;
-      KeyVersion keyVersion;
-      if (keyId == null || keyId.isEmpty()) {
-        keyId = UUID.randomUUID().toString();
-        keyVersion = createNewKey(keyId, src);
+      if (keyName == null || keyName.isEmpty()) {
+        keyName = UUID.randomUUID().toString();
+        createNewKey(keyName, src);
-        keyVersion = provider.getCurrentKey(keyId);
+        KeyVersion keyVersion = provider.getCurrentKey(keyName);
-          throw new IOException("Key " + keyId + " doesn't exist.");
+          throw new IOException("Key " + keyName + " doesn't exist.");
-      createEncryptionZoneInt(src, keyId, keyVersion, cacheEntry != null);
+      createEncryptionZoneInt(src, keyName, cacheEntry != null);
-        provider.deleteKey(keyId);
+        provider.deleteKey(keyName);
-  private void createEncryptionZoneInt(final String srcArg, String keyId,
-    final KeyVersion keyVersion, final boolean logRetryCache) throws
-      IOException {
+  private void createEncryptionZoneInt(final String srcArg, String keyName,
+      final boolean logRetryCache) throws IOException {
-      final XAttr keyIdXAttr = dir.createEncryptionZone(src, keyId, keyVersion);
+      final XAttr ezXAttr = dir.createEncryptionZone(src, keyName);
-      xAttrs.add(keyIdXAttr);
+      xAttrs.add(ezXAttr);
-   * @param keyIdArg id of the key
+   * @param keyNameArg name of the key
-  private KeyVersion createNewKey(String keyIdArg, String src)
+  private KeyVersion createNewKey(String keyNameArg, String src)
-    Preconditions.checkNotNull(keyIdArg);
+    Preconditions.checkNotNull(keyNameArg);
-    sb.append(keyIdArg);
-    final String keyId = sb.toString();
-    providerOptions.setDescription(keyId);
+    sb.append(keyNameArg);
+    final String keyName = sb.toString();
+    providerOptions.setDescription(keyName);
-      version = provider.createKey(keyIdArg, providerOptions);
+      version = provider.createKey(keyNameArg, providerOptions);

UPD42 UPD42 UPD42 UPD66 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS60 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 MOV43 INS59 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 DEL42 DEL59 DEL60 DEL42 DEL32 DEL7 DEL42 DEL32 DEL7 DEL21 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42