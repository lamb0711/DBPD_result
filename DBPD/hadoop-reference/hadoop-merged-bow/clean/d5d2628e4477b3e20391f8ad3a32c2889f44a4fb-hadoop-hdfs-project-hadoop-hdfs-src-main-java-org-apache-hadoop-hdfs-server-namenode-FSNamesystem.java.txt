Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY;
+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_CHECKSUM_TYPE_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_CHECKSUM_TYPE_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_ENCRYPT_DATA_TRANSFER_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_ENCRYPT_DATA_TRANSFER_DEFAULT;
-import static org.apache.hadoop.hdfs.server.common.Util.now;
+import static org.apache.hadoop.util.Time.now;
-import org.apache.hadoop.hdfs.protocol.HdfsConstants.UpgradeAction;
-import org.apache.hadoop.hdfs.server.common.UpgradeStatusReport;
+import org.apache.hadoop.hdfs.server.namenode.web.resources.NamenodeWebHdfsMethods;
-import org.apache.hadoop.hdfs.server.protocol.UpgradeCommand;
+import org.apache.hadoop.util.DataChecksum;
+import org.apache.hadoop.util.Time;
+      @Override
-  private final DelegationTokenSecretManager dtSecretManager;
+  final DelegationTokenSecretManager dtSecretManager;
+   * Clear all loaded data
+   */
+  void clear() {
+    dir.reset();
+    dtSecretManager.reset();
+    generationStamp.setStamp(GenerationStamp.FIRST_VALID_STAMP);
+    leaseManager.removeAllLeases();
+  }
+
+  @VisibleForTesting
+  LeaseManager getLeaseManager() {
+    return leaseManager;
+  }
+  
+  /**
+
+  /**
-      LOG.warn("Only one " + DFS_NAMENODE_NAME_DIR_KEY
-          + " directory configured , beware data loss!");
+      LOG.warn("Only one image storage directory ("
+          + DFS_NAMENODE_NAME_DIR_KEY + ") configured. Beware of dataloss"
+          + " due to lack of redundant storage directories!");
-      LOG.warn("Only one " + DFS_NAMENODE_EDITS_DIR_KEY
-          + " directory configured , beware data loss!");
+      LOG.warn("Only one namespace edits storage directory ("
+          + DFS_NAMENODE_EDITS_DIR_KEY + ") configured. Beware of dataloss"
+          + " due to lack of redundant storage directories!");
+      // Get the checksum type from config
+      String checksumTypeStr = conf.get(DFS_CHECKSUM_TYPE_KEY, DFS_CHECKSUM_TYPE_DEFAULT);
+      DataChecksum.Type checksumType;
+      try {
+         checksumType = DataChecksum.Type.valueOf(checksumTypeStr);
+      } catch (IllegalArgumentException iae) {
+         throw new IOException("Invalid checksum type in "
+            + DFS_CHECKSUM_TYPE_KEY + ": " + checksumTypeStr);
+      }
+
-          conf.getInt(IO_FILE_BUFFER_SIZE_KEY, IO_FILE_BUFFER_SIZE_DEFAULT));
+          conf.getInt(IO_FILE_BUFFER_SIZE_KEY, IO_FILE_BUFFER_SIZE_DEFAULT),
+          conf.getBoolean(DFS_ENCRYPT_DATA_TRANSFER_KEY, DFS_ENCRYPT_DATA_TRANSFER_DEFAULT),
+          conf.getLong(FS_TRASH_INTERVAL_KEY, FS_TRASH_INTERVAL_DEFAULT),
+          checksumType);
+        blockManager.setPostponeBlocksFromFuture(false);
+    
+    blockManager.setPostponeBlocksFromFuture(true);
+
-        dir.fsImage.getStorage().getCTime(),
-        upgradeManager.getUpgradeVersion());
+        dir.fsImage.getStorage().getCTime());
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
+      
+      LocatedBlock lastBlock = blocks.getLastLocatedBlock();
+      if (lastBlock != null) {
+        ArrayList<LocatedBlock> lastBlockList = new ArrayList<LocatedBlock>();
+        lastBlockList.add(lastBlock);
+        blockManager.getDatanodeManager().sortLocatedBlocks(
+                              clientMachine, lastBlockList);
+      }
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-    short repl = trgInode.getReplication();
+    short repl = trgInode.getBlockReplication();
-      if(repl != srcInode.getReplication()) {
+      if(repl != srcInode.getBlockReplication()) {
-            + repl + " vs. " + srcInode.getReplication());
+            + repl + " vs. " + srcInode.getBlockReplication());
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                        Server.getRemoteIp(),
+                        getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-      recoverLeaseInternal(myFile, src, holder, clientMachine, false);
-
-        } else if (!append) {
-          throw new FileAlreadyExistsException("failed to create file " + src
-              + " on client " + clientMachine
-              + " because the file exists");
+        } else {
+          // Opening an existing file for write - may need to recover lease.
+          recoverLeaseInternal(myFile, src, holder, clientMachine, false);
+
+          if (!append) {
+            throw new FileAlreadyExistsException("failed to create file " + src
+                + " on client " + clientMachine
+                + " because the file exists");
+          }
-                                    file.getReplication(),
+                                    file.getBlockReplication(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
+    blockManager.setBlockPoolId(blockPoolId);
-      replication = pendingFile.getReplication();
+      replication = pendingFile.getBlockReplication();
-    short numExpectedReplicas = file.getReplication();
+    short numExpectedReplicas = file.getBlockReplication();
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-      logAuditEvent(UserGroupInformation.getCurrentUser(), Server.getRemoteIp(),
+      logAuditEvent(UserGroupInformation.getCurrentUser(), getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-           StandbyException {
+           StandbyException, IOException {
+    HdfsFileStatus stat = null;
+
+
-      return dir.getFileInfo(src, resolveLink);
+      stat = dir.getFileInfo(src, resolveLink);
+    } catch (AccessControlException e) {
+      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
+                      getRemoteIp(),
+                      "getfileinfo", src, null, null);
+      }
+      throw e;
+    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      logAuditEvent(UserGroupInformation.getCurrentUser(),
+                    getRemoteIp(),
+                    "getfileinfo", src, null, null);
+    }
+    return stat;
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                    Server.getRemoteIp(),
+                    getRemoteIp(),
-        dir.updateSpaceConsumed(path, 0, -diff * fileINode.getReplication());
+        dir.updateSpaceConsumed(path, 0, -diff * fileINode.getBlockReplication());
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-                      Server.getRemoteIp(),
+                      getRemoteIp(),
-      if (cmds == null || cmds.length == 0) {
-        DatanodeCommand cmd = upgradeManager.getBroadcastCommand();
-        if (cmd != null) {
-          cmds = new DatanodeCommand[] {cmd};
-        }
-      }
-      
+      
+      LOG.info(DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY + " = " + threshold);
+      LOG.info(DFS_NAMENODE_SAFEMODE_MIN_DATANODES_KEY + " = " + datanodeThreshold);
+      LOG.info(DFS_NAMENODE_SAFEMODE_EXTENSION_KEY + "     = " + extension);
+
-     * Switch to manual safe mode if distributed upgrade is required.<br>
-    private synchronized void leave(boolean checkForUpgrades) {
-      if(checkForUpgrades) {
-        // verify whether a distributed upgrade needs to be started
-        boolean needUpgrade = false;
-        try {
-          needUpgrade = upgradeManager.startUpgrade();
-        } catch(IOException e) {
-          FSNamesystem.LOG.error("IOException in startDistributedUpgradeIfNeeded", e);
-        }
-        if(needUpgrade) {
-          // switch to manual safe mode
-          safeMode = new SafeModeInfo(false);
-          return;
-        }
-      }
+    private synchronized void leave() {
-        this.leave(true); // leave safe mode
+        this.leave(); // leave safe mode
-        leaveMsg = "Resources are low on NN. Safe mode must be turned off manually";
+        leaveMsg = "Resources are low on NN. " 
+        	+ "Please add or free up more resources then turn off safe mode manually.  "
+        	+ "NOTE:  If you turn off safe mode before adding resources, "
+        	+ "the NN will immediately return to safe mode.";
-        if(upgradeManager.getUpgradeState())
-          return leaveMsg + " upon completion of " + 
-            "the distributed upgrade: upgrade progress = " + 
-            upgradeManager.getUpgradeStatus() + "%";
+    @Override
-        try {
-          leaveSafeMode(true);
-        } catch(SafeModeException es) { // should never happen
-          String msg = "SafeModeMonitor may not run during distributed upgrade.";
-          assert false : msg;
-          throw new RuntimeException(msg, es);
-        }
+        leaveSafeMode();
-        leaveSafeMode(false);
+        leaveSafeMode();
+  @Override
-  void leaveSafeMode(boolean checkForUpgrades) throws SafeModeException {
+  void leaveSafeMode() {
-      if(upgradeManager.getUpgradeState())
-        throw new SafeModeException("Distributed upgrade is in progress",
-                                    safeMode);
-      safeMode.leave(checkForUpgrades);
+      safeMode.leave();
+      checkSuperuserPrivilege();
-  // Distributed upgrade manager
-  final UpgradeManagerNamenode upgradeManager = new UpgradeManagerNamenode(this);
-
-  UpgradeStatusReport distributedUpgradeProgress(UpgradeAction action 
-                                                 ) throws IOException {
-    return upgradeManager.distributedUpgradeProgress(action);
-  }
-
-  UpgradeCommand processDistributedUpgradeCommand(UpgradeCommand comm) throws IOException {
-    return upgradeManager.processUpgradeCommand(comm);
-  }
-
+  
+  @Override // FSNamesystemMBean
+  @Metric({"StaleDataNodes", 
+    "Number of datanodes marked stale due to delayed heartbeat"})
+  public int getNumStaleDataNodes() {
+    return getBlockManager().getDatanodeManager().getNumStaleNodes();
+  }
+    @Override
-    return Server.isRpcInvocation();
+    return Server.isRpcInvocation() || NamenodeWebHdfsMethods.isWebHdfsInvocation();
+  }
+
+  private static InetAddress getRemoteIp() {
+    InetAddress ip = Server.getRemoteIp();
+    if (ip != null) {
+      return ip;
+    }
+    return NamenodeWebHdfsMethods.getRemoteIp();
-    return (System.currentTimeMillis() - alivenode.getLastUpdate())/1000;
+    return (Time.now() - alivenode.getLastUpdate())/1000;
+  @Override
+
+  @Override
+  public boolean isAvoidingStaleDataNodesForWrite() {
+    return this.blockManager.getDatanodeManager()
+        .isAvoidingStaleDataNodesForWrite();
+  }

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS29 INS39 INS42 INS8 INS78 INS43 INS42 INS8 MOV43 INS78 INS78 INS79 INS83 INS39 INS42 INS8 INS83 INS83 UPD43 UPD42 INS8 INS78 INS78 INS83 INS39 UPD42 INS65 INS21 INS21 INS21 INS21 INS42 INS42 INS41 INS21 INS25 INS21 INS60 INS25 INS41 INS78 INS42 INS42 INS42 INS4 INS41 INS78 UPD42 INS60 INS25 MOV41 INS42 INS42 INS66 INS32 INS32 INS32 INS32 INS42 INS66 INS32 MOV27 INS8 MOV27 MOV27 INS32 INS43 INS59 INS12 INS27 INS8 INS42 INS21 INS21 INS21 INS42 INS45 INS45 INS32 INS42 INS27 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS60 INS60 INS54 INS42 INS42 INS9 MOV44 MOV44 MOV21 INS60 MOV25 MOV32 MOV44 MOV44 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS32 INS32 INS21 INS32 INS32 INS32 INS8 INS21 INS32 INS42 MOV32 INS32 UPD42 MOV42 INS42 MOV32 INS42 INS33 INS41 UPD42 UPD42 INS32 UPD42 INS78 MOV43 INS59 INS43 INS59 INS8 INS12 MOV53 MOV53 INS43 INS59 INS27 MOV42 MOV42 MOV42 UPD42 MOV53 MOV53 UPD42 INS7 INS43 INS42 INS25 INS53 INS42 INS42 INS42 INS32 MOV27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 MOV21 INS32 INS32 INS42 INS42 INS42 INS42 INS22 UPD42 MOV42 INS42 INS42 INS32 INS40 INS42 INS21 INS44 INS8 INS21 INS27 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 MOV27 MOV32 UPD42 MOV27 INS42 MOV32 INS42 INS27 INS8 INS42 INS42 INS32 INS32 INS45 INS42 INS33 INS33 MOV27 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS52 INS42 UPD45 UPD45 INS45 UPD45 UPD45 INS45 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS74 INS59 INS32 INS32 UPD42 INS27 INS8 UPD42 INS32 INS32 INS21 INS42 INS42 INS42 INS27 UPD42 UPD42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 MOV42 MOV21 MOV25 INS42 INS42 INS42 INS32 INS32 INS45 INS45 INS45 INS45 INS40 INS42 INS42 MOV43 INS27 INS32 MOV32 INS42 INS42 INS74 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS9 INS32 INS32 INS45 INS42 INS33 INS33 INS42 INS45 INS42 INS45 INS42 MOV42 UPD42 INS42 INS43 INS43 UPD42 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 MOV42 INS42 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL41 DEL42 DEL42 DEL42 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL66 DEL39 DEL42 DEL44 DEL42 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL44 DEL40 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL43 DEL9 DEL14 DEL7 DEL21 DEL41 DEL8 DEL25 DEL8 DEL25 DEL9 DEL45 DEL42 DEL42 DEL32 DEL42 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL41 DEL25 DEL9 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL59 DEL60 DEL9 DEL42 DEL6 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL9 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL25 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL52 DEL14 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42