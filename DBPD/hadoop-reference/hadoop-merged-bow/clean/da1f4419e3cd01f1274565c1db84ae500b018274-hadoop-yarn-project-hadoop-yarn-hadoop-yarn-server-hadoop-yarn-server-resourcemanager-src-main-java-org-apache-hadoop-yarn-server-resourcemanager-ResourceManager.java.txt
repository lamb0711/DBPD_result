merge the rest of trunk to branch HDFS-4949

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532967 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.http.HttpConfig;
+import org.apache.hadoop.http.HttpConfig.Policy;
+import org.apache.hadoop.yarn.server.resourcemanager.security.QueueACLsManager;
+import org.apache.hadoop.yarn.webapp.util.WebAppUtils;
-  public static final long clusterTimeStamp = System.currentTimeMillis();
+  private static long clusterTimeStamp = System.currentTimeMillis();
+
+  /**
+   * "Always On" services. Services that need to run always irrespective of
+   * the HA state of the RM.
+   */
+  @VisibleForTesting
+  protected RMHAProtocolService haService;
+  protected QueueACLsManager queueACLsManager;
-  
+
+  public static long getClusterTimeStamp() {
+    return clusterTimeStamp;
+  }
+
+  @VisibleForTesting
+  protected static void setClusterTimeStamp(long timestamp) {
+    clusterTimeStamp = timestamp;
+  }
+
-    activeServices = new RMActiveServices();
-    addService(activeServices);
+    haService = new RMHAProtocolService(this);
+    addService(haService);
+  protected QueueACLsManager createQueueACLsManager(ResourceScheduler scheduler,
+      Configuration conf) {
+    return new QueueACLsManager(scheduler, conf);
+  }
+
+      queueACLsManager = createQueueACLsManager(scheduler, conf);
+
-        String hostname = getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,
-            YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);
-        hostname = (hostname.contains(":")) ? hostname.substring(0, hostname.indexOf(":")) : hostname;
-        String resolvedAddress = hostname + ":" + port;
-        conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);
+        WebAppUtils.setRMWebAppPort(conf, port);
+
-            .at(this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,
-        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); 
-    String proxyHostAndPort = YarnConfiguration.getProxyHostAndPort(conf);
-    if(YarnConfiguration.getRMWebAppHostAndPort(conf).
+            .at(WebAppUtils.getRMWebAppURLWithoutScheme(conf)); 
+    String proxyHostAndPort = WebAppUtils.getProxyHostAndPort(conf);
+    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).
+  void setConf(Configuration configuration) {
+    conf = configuration;
+  }
+
+  /**
+   * Helper method to create and init {@link #activeServices}. This creates an
+   * instance of {@link RMActiveServices} and initializes it.
+   * @throws Exception
+   */
+  void createAndInitActiveServices() throws Exception {
+    activeServices = new RMActiveServices();
+    activeServices.init(conf);
+  }
+
+  /**
+   * Helper method to start {@link #activeServices}.
+   * @throws Exception
+   */
+  void startActiveServices() throws Exception {
+    if (activeServices != null) {
+      clusterTimeStamp = System.currentTimeMillis();
+      activeServices.start();
+    }
+  }
+
+  /**
+   * Helper method to stop {@link #activeServices}.
+   * @throws Exception
+   */
+  void stopActiveServices() throws Exception {
+    if (activeServices != null) {
+      activeServices.stop();
+      activeServices = null;
+    }
+  }
+
+  @VisibleForTesting
+  protected boolean areActiveServicesRunning() {
+    return activeServices != null && activeServices.isInState(STATE.STARTED);
+  }
+
-
-        this.applicationACLsManager, this.rmDTSecretManager);
+        this.applicationACLsManager, this.queueACLsManager,
+        this.rmDTSecretManager);
+  public QueueACLsManager getQueueACLsManager() {
+    return this.queueACLsManager;
+  }
+
+  @Private
-  
+
+      setHttpPolicy(conf);
+  
+  private static void setHttpPolicy(Configuration conf) {
+    HttpConfig.setPolicy(Policy.fromString(conf.get(
+      YarnConfiguration.YARN_HTTP_POLICY_KEY,
+      YarnConfiguration.YARN_HTTP_POLICY_DEFAULT)));
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD83 INS29 INS78 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS43 INS8 INS29 INS39 INS42 INS43 INS8 INS29 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS39 INS42 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS41 INS43 INS42 INS21 INS65 INS65 INS42 MOV21 INS21 INS65 INS65 INS42 INS25 INS65 INS65 INS42 INS25 INS42 INS41 INS42 INS42 INS41 INS43 INS42 INS21 INS66 INS66 INS42 INS7 INS7 INS42 INS42 INS14 INS21 INS42 INS7 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS32 INS66 INS65 INS66 INS42 INS27 INS8 INS66 INS65 INS66 INS42 INS27 INS8 INS27 INS22 INS42 INS32 INS42 INS42 INS42 INS14 UPD42 INS43 INS42 INS42 INS7 MOV21 INS42 INS42 INS67 INS42 INS42 INS42 INS42 INS67 INS42 INS33 INS21 INS21 INS67 INS42 INS33 INS21 INS21 INS27 INS32 INS22 INS52 INS42 INS21 INS42 INS42 INS32 INS43 INS52 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS7 INS32 INS42 INS32 INS7 INS42 INS33 INS42 INS42 INS40 INS52 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS40 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL36 DEL34 DEL45 DEL32 DEL32 DEL42 DEL16 DEL7 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL40 DEL40