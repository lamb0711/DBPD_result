HDDS-1217. Refactor ChillMode rules and chillmode manager. (#558)



+import com.google.common.base.Preconditions;
-import org.apache.hadoop.hdds.scm.server.SCMDatanodeProtocolServer.NodeRegistrationContainerReport;
+import org.apache.hadoop.hdds.scm.events.SCMEvents;
+import org.apache.hadoop.hdds.scm.server.SCMDatanodeProtocolServer
+    .NodeRegistrationContainerReport;
-import org.apache.hadoop.hdds.server.events.EventHandler;
-import org.apache.hadoop.hdds.server.events.EventPublisher;
+import org.apache.hadoop.hdds.server.events.EventQueue;
+import org.apache.hadoop.hdds.server.events.TypedEvent;
-public class ContainerChillModeRule implements
-    ChillModeExitRule<NodeRegistrationContainerReport>,
-    EventHandler<NodeRegistrationContainerReport> {
+public class ContainerChillModeRule extends
+    ChillModeExitRule<NodeRegistrationContainerReport>{
-  private final SCMChillModeManager chillModeManager;
-  public ContainerChillModeRule(Configuration conf,
+  public ContainerChillModeRule(String ruleName, EventQueue eventQueue,
+      Configuration conf,
+    super(manager, ruleName, eventQueue);
-    chillModeManager = manager;
+
+    Preconditions.checkArgument(
+        (chillModeCutoff >= 0.0 && chillModeCutoff <= 1.0),
+        HddsConfigKeys.HDDS_SCM_CHILLMODE_THRESHOLD_PCT  +
+            " value should be >= 0.0 and <= 1.0");
+
+
+
-  public boolean validate() {
+  protected TypedEvent<NodeRegistrationContainerReport> getEventType() {
+    return SCMEvents.NODE_REGISTRATION_CONT_REPORT;
+  }
+
+
+  @Override
+  protected boolean validate() {
-  public void process(NodeRegistrationContainerReport reportsProto) {
+  protected void process(NodeRegistrationContainerReport reportsProto) {
-  }
-  @Override
-  public void onMessage(NodeRegistrationContainerReport
-      nodeRegistrationContainerReport, EventPublisher publisher) {
-
-    // TODO: when we have remove handlers, we can remove getInChillmode check
-
-    if (chillModeManager.getInChillMode()) {
-      if (validate()) {
-        return;
-      }
-
-      process(nodeRegistrationContainerReport);
-      if (chillModeManager.getInChillMode()) {
-        SCMChillModeManager.getLogger().info(
-            "SCM in chill mode. {} % containers have at least one"
-                + " reported replica.",
-            (containerWithMinReplicas.get() / maxContainer) * 100);
-      }
-
-      if (validate()) {
-        chillModeManager.validateChillModeExitRules(publisher);
-      }
-
+    if (scmInChillMode()) {
+      SCMChillModeManager.getLogger().info(
+          "SCM in chill mode. {} % containers have at least one"
+              + " reported replica.",
+          (containerWithMinReplicas.doubleValue() / maxContainer) * 100);
-
-  public void cleanup() {
+  protected void cleanup() {

INS26 INS26 MOV31 INS40 INS40 UPD40 UPD40 INS44 INS44 UPD83 UPD74 MOV74 INS42 INS8 UPD83 UPD83 UPD83 INS43 INS42 INS43 INS42 INS46 UPD43 MOV41 INS25 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS40 INS32 INS8 INS42 INS42 INS36 INS27 INS42 INS21 INS27 INS40 INS45 INS32 INS27 INS27 MOV32 INS42 MOV27 INS27 INS42 INS34 INS42 INS34 INS36 INS34 INS27 INS32 INS42 INS42 INS42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL7 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL36 DEL34 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8