Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.CopyOnWriteArrayList;
+import org.apache.hadoop.hdfs.server.protocol.NamespaceInfo;
-    private boolean isDisabled() {
+    boolean isDisabled() {
-  
-  private List<JournalAndStream> journals = Lists.newArrayList();
+ 
+  // COW implementation is necessary since some users (eg the web ui) call
+  // getAllJournalStreams() and then iterate. Since this is rarely
+  // mutated, there is no performance concern.
+  private List<JournalAndStream> journals =
+      new CopyOnWriteArrayList<JournalSet.JournalAndStream>();
+  public void format(NamespaceInfo nsInfo) throws IOException {
+    // The iteration is done by FSEditLog itself
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public boolean hasSomeData() throws IOException {
+    // This is called individually on the underlying journals,
+    // not on the JournalSet.
+    throw new UnsupportedOperationException();
+  }
+
+  
+  @Override
-      jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);
+      try {
+        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);
+      } catch (IOException ioe) {
+        LOG.warn("Unable to determine input streams from " + jas.getManager() +
+            ". Skipping.", ioe);
+      }
+    chainAndMakeRedundantStreams(streams, allStreams, fromTxId, inProgressOk);
+  }
+  
+  public static void chainAndMakeRedundantStreams(
+      Collection<EditLogInputStream> outStreams,
+      PriorityQueue<EditLogInputStream> allStreams,
+      long fromTxId, boolean inProgressOk) {
-          streams.add(new RedundantEditLogInputStream(acc, fromTxId));
+          outStreams.add(new RedundantEditLogInputStream(acc, fromTxId));
-      streams.add(new RedundantEditLogInputStream(acc, fromTxId));
+      outStreams.add(new RedundantEditLogInputStream(acc, fromTxId));
-    protected void flushAndSync() throws IOException {
+    protected void flushAndSync(final boolean durable) throws IOException {
-            jas.getCurrentStream().flushAndSync();
+            jas.getCurrentStream().flushAndSync(durable);
-  @VisibleForTesting

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 MOV29 MOV78 INS83 INS39 INS42 MOV44 INS44 INS44 INS8 INS83 INS42 INS44 INS44 INS14 INS42 INS43 INS42 INS42 INS53 INS42 INS42 INS53 INS39 INS42 INS39 INS42 MOV60 MOV70 INS21 INS74 INS42 INS74 INS42 INS44 INS74 INS42 INS14 INS14 INS32 INS43 INS43 INS43 INS43 MOV8 INS83 INS39 INS42 INS43 INS43 INS43 INS43 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS42 INS40 INS42 INS42 INS8 INS12 MOV21 INS44 INS8 UPD42 INS43 INS42 INS21 INS42 INS32 INS8 INS42 INS42 INS27 INS42 INS21 MOV21 MOV21 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 MOV14 INS42 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL78