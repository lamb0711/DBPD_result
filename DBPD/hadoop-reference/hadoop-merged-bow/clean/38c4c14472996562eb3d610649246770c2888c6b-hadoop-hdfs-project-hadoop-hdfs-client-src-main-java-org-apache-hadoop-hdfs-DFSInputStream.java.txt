HDFS-9574. Reduce client failures during datanode restart. Contributed by Kihwal Lee.

+import java.util.LinkedList;
+import org.apache.hadoop.ipc.RetriableException;
+import org.apache.hadoop.util.StopWatch;
-    for(DatanodeInfo datanode : locatedblock.getLocations()) {
+    final int timeout = conf.getSocketTimeout();
+    LinkedList<DatanodeInfo> nodeList = new LinkedList<DatanodeInfo>(
+        Arrays.asList(locatedblock.getLocations()));
+    LinkedList<DatanodeInfo> retryList = new LinkedList<DatanodeInfo>();
+    boolean isRetry = false;
+    StopWatch sw = new StopWatch();
+    while (nodeList.size() > 0) {
+      DatanodeInfo datanode = nodeList.pop();
-
-            dfsClient.getConfiguration(), conf.getSocketTimeout(),
+            dfsClient.getConfiguration(), timeout,
-      }
-      catch(IOException ioe) {
-        if (ioe instanceof RemoteException &&
-            (((RemoteException) ioe).unwrapRemoteException() instanceof
-                ReplicaNotFoundException)) {
-          // special case : replica might not be on the DN, treat as 0 length
-          replicaNotFoundCount--;
+      } catch (IOException ioe) {
+        if (ioe instanceof RemoteException) {
+          if (((RemoteException) ioe).unwrapRemoteException() instanceof
+              ReplicaNotFoundException) {
+            // replica is not on the DN. We will treat it as 0 length
+            // if no one actually has a replica.
+            replicaNotFoundCount--;
+          } else if (((RemoteException) ioe).unwrapRemoteException() instanceof
+              RetriableException) {
+            // add to the list to be retried if necessary.
+            retryList.add(datanode);
+          }
-
+
+      // Ran out of nodes, but there are retriable nodes.
+      if (nodeList.size() == 0 && retryList.size() > 0) {
+        nodeList.addAll(retryList);
+        retryList.clear();
+        isRetry = true;
+      }
+
+      if (isRetry) {
+        // start the stop watch if not already running.
+        if (!sw.isRunning()) {
+          sw.start();
+        }
+        try {
+          Thread.sleep(500); // delay between retries.
+        } catch (InterruptedException e) {
+          throw new IOException("Interrupted while getting the length.");
+        }
+      }
+
+      // see if we ran out of retry time
+      if (sw.isRunning() && sw.now(TimeUnit.MILLISECONDS) > timeout) {
+        break;
+      }

INS26 INS26 INS26 INS40 INS40 INS40 INS60 INS60 INS60 INS60 INS60 INS61 INS83 INS39 INS59 INS74 INS59 INS74 INS59 INS39 INS59 INS43 INS59 INS27 MOV8 INS42 MOV32 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS9 INS42 INS42 INS14 INS32 INS34 INS60 INS25 INS25 INS25 INS42 INS42 INS74 INS32 INS42 INS42 INS74 INS43 INS42 INS42 MOV43 INS59 INS27 INS8 INS42 INS8 INS27 INS8 INS43 INS43 INS42 INS42 MOV32 INS43 INS43 INS42 INS42 INS32 INS27 INS27 INS21 INS21 INS21 INS25 INS54 INS32 INS27 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS34 INS32 INS32 INS7 INS38 INS8 INS8 INS12 INS42 INS42 INS32 INS42 MOV62 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS21 INS21 INS44 INS8 INS42 INS42 INS40 INS42 INS25 INS42 INS42 INS32 INS32 INS43 INS42 INS53 MOV62 MOV8 INS25 INS42 INS42 INS42 INS42 INS34 INS42 INS14 INS62 INS8 INS43 INS45 INS32 INS43 INS21 INS42 INS36 INS42 INS42 INS32 INS11 INS42 INS42 INS42 INS43 INS42 INS42 DEL36 DEL27 DEL42 DEL44 DEL70