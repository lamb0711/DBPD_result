Merge trunk into HA branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1227775 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.CommonConfigurationKeys;
+  // controls whether buildTokenService will use an ip or host/ip as given
+  // by the user
+  private static boolean useIpForTokenService;
+  
+  static {
+    boolean useIp = new Configuration().getBoolean(
+      CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP,
+      CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP_DEFAULT);
+    setTokenServiceUseIp(useIp);
+  }
+  
+  /**
+   * For use only by tests and initialization
+   */
+  @InterfaceAudience.Private
+  static void setTokenServiceUseIp(boolean flag) {
+    useIpForTokenService = flag;
+    NetUtils.setUseQualifiedHostResolver(!flag);
+  }
+  
+  /**
+   * Intended only for temporary use by NetUtils.  Do not use.
+   * @return whether tokens use an IP address
+   */
+  @InterfaceAudience.Private
+  public static boolean getTokenServiceUseIp() {
+    return useIpForTokenService;
+  }
+  
-   * create service name for Delegation token ip:port
-   * @param uri
-   * @param defPort
-   * @return "ip:port"
+   * create the service name for a Delegation token
+   * @param uri of the service
+   * @param defPort is used if the uri lacks a port
+   * @return the token service, or null if no authority
+   * @see #buildTokenService(InetSocketAddress)
-    int port = uri.getPort();
-    if(port == -1) 
-      port = defPort;
-
-    // build the service name string "/ip:port"
-    // for whatever reason using NetUtils.createSocketAddr(target).toString()
-    // returns "localhost/ip:port"
-    StringBuffer sb = new StringBuffer();
-    String host = uri.getHost();
-    if (host != null) {
-      host = NetUtils.normalizeHostName(host);
-    } else {
-      host = "";
+    String authority = uri.getAuthority();
+    if (authority == null) {
+      return null;
-    sb.append(host).append(":").append(port);
-    return sb.toString();
-  }
+    InetSocketAddress addr = NetUtils.createSocketAddr(authority, defPort);
+    return buildTokenService(addr).toString();
+   }
+   * Decode the given token's service field into an InetAddress
+   * @param token from which to obtain the service
+   * @return InetAddress for the service
+   */
+  public static InetSocketAddress getTokenServiceAddr(Token<?> token) {
+    return NetUtils.createSocketAddr(token.getService().toString());
+  }
+
+  /**
-    token.setService(buildTokenService(addr));
+    Text service = buildTokenService(addr);
+    if (token != null) {
+      token.setService(service);
+      LOG.info("Acquired token "+token);  // Token#toString() prints service
+    } else {
+      LOG.warn("Failed to get token for service "+service);
+    }
-   * @return "ip:port"
+   * @return "ip:port" or "host:port" depending on the value of
+   *          hadoop.security.token.service.use_ip
-    String host = addr.getAddress().getHostAddress();
+    String host = null;
+    if (useIpForTokenService) {
+      if (addr.isUnresolved()) { // host has no ip address
+        throw new IllegalArgumentException(
+            new UnknownHostException(addr.getHostName())
+        );
+      }
+      host = addr.getAddress().getHostAddress();
+    } else {
+      host = addr.getHostName().toLowerCase();
+    }
+
+  /**
+   * Construct the service key for a token
+   * @param uri of remote connection with a token
+   * @return "ip:port" or "host:port" depending on the value of
+   *          hadoop.security.token.service.use_ip
+   */
+  public static Text buildTokenService(URI uri) {
+    return buildTokenService(NetUtils.createSocketAddr(uri.getAuthority()));
+  }

INS26 INS40 INS23 INS28 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS83 INS39 INS42 INS8 MOV29 MOV83 MOV83 MOV43 MOV42 MOV44 MOV44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS60 INS21 INS65 INS40 INS39 INS42 INS21 INS21 INS65 INS65 INS40 INS41 INS65 MOV60 MOV25 MOV60 INS41 INS65 INS65 INS65 INS42 INS74 INS42 INS41 INS60 INS25 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS39 INS59 INS32 INS66 INS7 INS32 INS66 INS66 INS42 UPD66 INS66 INS66 UPD66 INS68 MOV43 INS8 UPD43 INS32 INS66 INS42 INS66 INS66 INS43 INS76 INS32 INS43 INS59 INS27 INS8 INS8 UPD66 INS66 INS42 INS8 INS8 INS66 INS42 INS66 INS66 INS66 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS42 INS69 UPD42 UPD42 INS33 INS41 UPD42 UPD42 INS32 INS32 INS42 INS42 MOV42 INS42 INS32 INS42 INS42 MOV32 INS42 INS33 MOV21 INS21 INS21 INS33 INS25 INS21 INS21 UPD42 MOV42 INS32 INS14 INS42 INS40 INS40 INS42 INS43 UPD42 INS33 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS32 INS32 INS8 INS7 INS7 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS53 INS42 MOV32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS45 INS42 INS14 INS32 INS42 INS43 INS14 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL39 DEL34 DEL38 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL45 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL32 DEL41 DEL8 DEL31 DEL8