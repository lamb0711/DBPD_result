Merge r1406415 through r1407703 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1407706 13f79535-47bb-0310-9956-ffa450edef68

+import javax.security.auth.callback.CallbackHandler;
+import org.apache.hadoop.security.authentication.util.KerberosName;
-    boolean useSasl;
-          if (saslServer == null) {
-            switch (authMethod) {
-            case DIGEST:
-              if (secretManager == null) {
-                throw new AccessControlException(
-                    "Server is not configured to do DIGEST authentication.");
-              }
-              secretManager.checkAvailableForRead();
-              saslServer = Sasl.createSaslServer(AuthMethod.DIGEST
-                  .getMechanismName(), null, SaslRpcServer.SASL_DEFAULT_REALM,
-                  SaslRpcServer.SASL_PROPS, new SaslDigestCallbackHandler(
-                      secretManager, this));
-              break;
-            default:
-              UserGroupInformation current = UserGroupInformation
-                  .getCurrentUser();
-              String fullName = current.getUserName();
-              if (LOG.isDebugEnabled())
-                LOG.debug("Kerberos principal name is " + fullName);
-              final String names[] = SaslRpcServer.splitKerberosName(fullName);
-              if (names.length != 3) {
-                throw new AccessControlException(
-                    "Kerberos principal name does NOT have the expected "
-                        + "hostname part: " + fullName);
-              }
-              current.doAs(new PrivilegedExceptionAction<Object>() {
-                @Override
-                public Object run() throws SaslException {
-                  saslServer = Sasl.createSaslServer(AuthMethod.KERBEROS
-                      .getMechanismName(), names[0], names[1],
-                      SaslRpcServer.SASL_PROPS, new SaslGssCallbackHandler());
-                  return null;
-                }
-              });
-            }
-            if (saslServer == null)
-              throw new AccessControlException(
-                  "Unable to find SASL server implementation for "
-                      + authMethod.getMechanismName());
-            if (LOG.isDebugEnabled())
-              LOG.debug("Created SASL server with mechanism = "
-                  + authMethod.getMechanismName());
-          }
-          }          
+          }
+          boolean useSaslServer = isSecurityEnabled;
-              if (isSecurityEnabled) {
-                AccessControlException ae = new AccessControlException("Authorization ("
-                    + CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION
-                    + ") is enabled but authentication ("
-                    + CommonConfigurationKeys.HADOOP_SECURITY_AUTHENTICATION
-                    + ") is configured as simple. Please configure another method "
-                    + "like kerberos or digest.");
-                setupResponse(authFailedResponse, authFailedCall, RpcStatusProto.FATAL,
-                    null, ae.getClass().getName(), ae.getMessage());
-                responder.doRespond(authFailedCall);
-                throw ae;
-              }
-              useSasl = false; 
-            case DIGEST: {
+            case DIGEST: { // always allow tokens if there's a secret manager
+              useSaslServer |= (secretManager != null);
-              useSasl = (secretManager != null);
-              useSasl = isSecurityEnabled; 
-          }          
-          if (clientUsingSasl && !useSasl) {
+          }
+          if (useSaslServer) {
+            saslServer = createSaslServer(authMethod);
+          } else if (clientUsingSasl) { // security is off
-          if (useSasl) {
+          if (saslServer != null) {
+    private SaslServer createSaslServer(AuthMethod authMethod)
+        throws IOException {
+      try {
+        return createSaslServerInternal(authMethod);
+      } catch (IOException ioe) {
+        final String ioeClass = ioe.getClass().getName();
+        final String ioeMessage  = ioe.getLocalizedMessage();
+        if (authMethod == AuthMethod.SIMPLE) {
+          setupResponse(authFailedResponse, authFailedCall,
+              RpcStatusProto.FATAL, null, ioeClass, ioeMessage);
+          responder.doRespond(authFailedCall);
+        } else {
+          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);
+        }
+        throw ioe;
+      }
+    }
+
+    private SaslServer createSaslServerInternal(AuthMethod authMethod)
+        throws IOException {
+      SaslServer saslServer = null;
+      String hostname = null;
+      String saslProtocol = null;
+      CallbackHandler saslCallback = null;
+      
+      switch (authMethod) {
+        case SIMPLE: {
+          throw new AccessControlException("Authorization ("
+              + CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION
+              + ") is enabled but authentication ("
+              + CommonConfigurationKeys.HADOOP_SECURITY_AUTHENTICATION
+              + ") is configured as simple. Please configure another method "
+              + "like kerberos or digest.");
+        }
+        case DIGEST: {
+          if (secretManager == null) {
+            throw new AccessControlException(
+                "Server is not configured to do DIGEST authentication.");
+          }
+          secretManager.checkAvailableForRead();
+          hostname = SaslRpcServer.SASL_DEFAULT_REALM;
+          saslCallback = new SaslDigestCallbackHandler(secretManager, this);
+          break;
+        }
+        case KERBEROS: {
+          String fullName = UserGroupInformation.getCurrentUser().getUserName();
+          if (LOG.isDebugEnabled())
+            LOG.debug("Kerberos principal name is " + fullName);
+          KerberosName krbName = new KerberosName(fullName);
+          hostname = krbName.getHostName();
+          if (hostname == null) {
+            throw new AccessControlException(
+                "Kerberos principal name does NOT have the expected "
+                    + "hostname part: " + fullName);
+          }
+          saslProtocol = krbName.getServiceName();
+          saslCallback = new SaslGssCallbackHandler();
+          break;
+        }
+        default:
+          throw new AccessControlException(
+              "Server does not support SASL " + authMethod);
+      }
+      
+      String mechanism = authMethod.getMechanismName();
+      saslServer = Sasl.createSaslServer(
+          mechanism, saslProtocol, hostname,
+          SaslRpcServer.SASL_PROPS, saslCallback);
+      if (saslServer == null) {
+        throw new AccessControlException(
+            "Unable to find SASL server implementation for " + mechanism);
+      }
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Created SASL server with mechanism = " + mechanism);
+      }
+      return saslServer;
+    }
+    
-      if (!useSasl) {
+      if (saslServer == null) {
-    if (call.connection.useSasl) {
+    if (call.connection.saslServer != null) {

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS43 INS42 INS42 INS54 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 MOV50 MOV49 INS60 INS21 INS25 INS25 INS41 INS27 INS42 INS8 INS12 INS42 INS43 INS59 MOV43 INS59 INS43 INS59 INS43 INS59 INS8 INS8 INS49 INS8 INS49 INS53 INS43 INS59 INS7 MOV27 INS8 MOV32 INS8 INS42 MOV27 INS40 INS33 INS41 INS44 INS8 INS42 INS42 INS33 INS42 INS33 INS42 UPD42 MOV42 INS33 INS42 INS42 INS33 INS42 INS53 MOV25 MOV21 INS21 MOV21 INS10 INS42 MOV60 MOV25 INS60 INS21 MOV25 INS21 INS21 INS10 INS14 INS42 INS42 MOV32 INS42 INS32 INS53 INS21 INS8 INS32 INS43 INS42 INS60 INS60 INS25 INS53 MOV14 INS7 UPD43 INS43 MOV59 INS7 UPD27 INS7 INS7 MOV43 INS27 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS14 INS32 MOV25 MOV21 INS60 INS25 INS42 INS42 INS42 INS83 MOV43 INS59 INS83 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS40 UPD42 MOV14 UPD42 UPD42 INS32 INS42 UPD42 INS14 INS42 INS32 INS42 INS33 INS42 INS32 INS42 MOV14 UPD42 MOV42 INS45 INS42 MOV43 INS27 INS42 INS42 INS27 INS39 INS59 MOV21 INS42 INS8 MOV25 INS27 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS21 MOV21 INS21 MOV32 INS42 INS43 INS42 UPD42 MOV42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS21 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS32 INS32 INS42 UPD7 INS7 INS42 INS42 INS42 INS42 INS42 INS40 INS33 INS42 INS42 INS42 INS40 INS33 INS42 INS42 UPD42 INS42 INS32 INS42 INS42 DEL39 DEL59 DEL23 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL25 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL33 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL53 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL38 DEL27 DEL42 DEL10 DEL42 DEL42 DEL40 DEL42 DEL32 DEL33 DEL40 DEL40 DEL32 DEL85 DEL42 DEL42 DEL42 DEL32 DEL40 DEL34 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL40 DEL32 DEL7 DEL21 DEL33 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL38 DEL40