YARN-7863. Modify placement constraints to support node attributes. Contributed by Sunil Govindan.

+import org.apache.hadoop.yarn.api.records.NodeAttributeOpCode;
+  public static final char EXPRESSION_VAL_DELIM = ',';
-  private static final char EXPRESSION_VAL_DELIM = ',';
+  private static final String KV_NE_DELIM = "!=";
+   * Constraint parser used to parse a given target expression.
+   */
+  public static class NodeConstraintParser extends ConstraintParser {
+
+    public NodeConstraintParser(String expression) {
+      super(new BaseStringTokenizer(expression,
+          String.valueOf(EXPRESSION_VAL_DELIM)));
+    }
+
+    @Override
+    public AbstractConstraint parse()
+        throws PlacementConstraintParseException {
+      PlacementConstraint.AbstractConstraint placementConstraints = null;
+      String attributeName = "";
+      NodeAttributeOpCode opCode = NodeAttributeOpCode.EQ;
+      String scope = SCOPE_NODE;
+
+      Set<String> constraintEntities = new TreeSet<>();
+      while (hasMoreTokens()) {
+        String currentTag = nextToken();
+        StringTokenizer attributeKV = getAttributeOpCodeTokenizer(currentTag);
+
+        // Usually there will be only one k=v pair. However in case when
+        // multiple values are present for same attribute, it will also be
+        // coming as next token. for example, java=1.8,1.9 or python!=2.
+        if (attributeKV.countTokens() > 1) {
+          opCode = getAttributeOpCode(currentTag);
+          attributeName = attributeKV.nextToken();
+          currentTag = attributeKV.nextToken();
+        }
+        constraintEntities.add(currentTag);
+      }
+
+      if(attributeName.isEmpty()) {
+        throw new PlacementConstraintParseException(
+            "expecting valid expression like k=v or k!=v, but get "
+                + constraintEntities);
+      }
+
+      PlacementConstraint.TargetExpression target = null;
+      if (!constraintEntities.isEmpty()) {
+        target = PlacementConstraints.PlacementTargets
+            .nodeAttribute(attributeName,
+                constraintEntities
+                    .toArray(new String[constraintEntities.size()]));
+      }
+
+      placementConstraints = PlacementConstraints
+          .targetNodeAttribute(scope, opCode, target);
+      return placementConstraints;
+    }
+
+    private StringTokenizer getAttributeOpCodeTokenizer(String currentTag) {
+      StringTokenizer attributeKV = new StringTokenizer(currentTag,
+          KV_NE_DELIM);
+
+      // Try with '!=' delim as well.
+      if (attributeKV.countTokens() < 2) {
+        attributeKV = new StringTokenizer(currentTag,
+            String.valueOf(KV_SPLIT_DELIM));
+      }
+      return attributeKV;
+    }
+
+    /**
+     * Below conditions are validated.
+     * java=8   : OpCode = EQUALS
+     * java!=8  : OpCode = NEQUALS
+     * @param currentTag tag
+     * @return Attribute op code.
+     */
+    private NodeAttributeOpCode getAttributeOpCode(String currentTag)
+        throws PlacementConstraintParseException {
+      if (currentTag.contains(KV_NE_DELIM)) {
+        return NodeAttributeOpCode.NE;
+      } else if (currentTag.contains(String.valueOf(KV_SPLIT_DELIM))) {
+        return NodeAttributeOpCode.EQ;
+      }
+      throw new PlacementConstraintParseException(
+          "expecting valid expression like k=v or k!=v, but get "
+              + currentTag);
+    }
+  }
+
+  /**
-      PlacementConstraint.AbstractConstraint placementConstraints;
+      PlacementConstraint.AbstractConstraint placementConstraints = null;
-        Set<String> allocationTags = new TreeSet<>();
+        Set<String> constraintEntities = new TreeSet<>();
-          allocationTags.add(tag);
+          constraintEntities.add(tag);
-        PlacementConstraint.TargetExpression target =
-            PlacementConstraints.PlacementTargets.allocationTag(
-                allocationTags.toArray(new String[allocationTags.size()]));
+        PlacementConstraint.TargetExpression target = null;
+        if(!constraintEntities.isEmpty()) {
+          target = PlacementConstraints.PlacementTargets.allocationTag(
+              constraintEntities
+                  .toArray(new String[constraintEntities.size()]));
+        }
+        NodeConstraintParser np =
+            new NodeConstraintParser(constraintStr);
+        constraintOptional = Optional.ofNullable(np.tryParse());
+      }
+      if (!constraintOptional.isPresent()) {
+    // Continue handling for application tag based constraint otherwise.
-    while(tokenizer.hasMoreElements()) {
+    while (tokenizer.hasMoreElements()) {

INS26 MOV23 INS40 INS23 INS55 UPD83 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS42 INS42 INS45 INS65 INS42 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS66 INS43 INS42 INS46 INS42 INS42 INS42 INS60 INS60 INS60 INS60 MOV60 INS61 INS25 INS60 INS25 INS21 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS25 INS53 INS42 INS14 MOV43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS8 MOV43 INS59 INS38 INS8 INS7 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS8 INS25 INS14 INS43 INS25 INS43 INS42 INS32 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS42 UPD42 INS42 INS60 INS60 INS25 INS21 INS42 INS42 INS53 INS42 INS33 INS32 INS21 INS42 INS32 INS42 INS42 INS14 INS32 INS34 INS21 INS42 INS42 INS42 INS41 INS32 INS8 INS43 INS27 INS40 INS33 INS60 INS25 INS38 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS14 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS7 INS40 INS42 INS42 INS32 INS41 INS42 INS45 INS42 INS74 INS59 INS43 INS38 INS8 INS32 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS34 INS21 INS21 INS21 INS42 INS42 INS42 INS43 INS27 INS42 MOV32 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS43 INS43 INS42 INS14 INS40 INS33 INS32 INS21 INS42 INS42 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS42 INS45 INS42 INS42 UPD42 INS43 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS7 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS43 UPD42 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS3 INS5 INS32 INS43 INS85 INS42 INS42 INS42