HDFS-14856. Fetch file ACLs while mounting external store. (#1478)


+import org.apache.hadoop.fs.permission.AclStatus;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_PROVIDED_ACLS_IMPORT_ENABLED;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_PROVIDED_ACLS_IMPORT_ENABLED_DEFAULT;
+  public static final Logger LOG =
+      LoggerFactory.getLogger(FSTreeWalk.class);
+
+  private final boolean enableACLs;
+
+    boolean mountACLsEnabled = conf.getBoolean(DFS_PROVIDED_ACLS_IMPORT_ENABLED,
+        DFS_PROVIDED_ACLS_IMPORT_ENABLED_DEFAULT);
+    boolean localACLsEnabled = conf.getBoolean(DFS_NAMENODE_ACLS_ENABLED_KEY,
+        DFS_NAMENODE_ACLS_ENABLED_DEFAULT);
+    if (!localACLsEnabled && mountACLsEnabled) {
+      LOG.warn("Mount ACLs have been enabled but HDFS ACLs are not. " +
+          "Disabling ACLs on the mount {}", root);
+      this.enableACLs = false;
+    } else {
+      this.enableACLs = mountACLsEnabled;
+    }
-        ret.add(new TreePath(s, id, i, fs));
+        AclStatus aclStatus = getAclStatus(fs, s.getPath());
+        ret.add(new TreePath(s, id, i, fs, aclStatus));
-      getPendingQueue().addFirst(
-          new TreePath(p.getFileStatus(), p.getParentId(), this, fs));
+      this(p.getFileStatus(), p.getParentId());
-    FSTreeIterator(Path p) throws IOException {
+    FSTreeIterator(FileStatus fileStatus, long parentId) {
+      Path path = fileStatus.getPath();
+      AclStatus acls;
-        FileStatus s = fs.getFileStatus(root);
-        getPendingQueue().addFirst(new TreePath(s, -1L, this, fs));
-      } catch (FileNotFoundException e) {
-        if (p.equals(root)) {
-          throw e;
-        }
-        throw new ConcurrentModificationException("FS modified");
+        acls = getAclStatus(fs, path);
+      } catch (IOException e) {
+        throw new RuntimeException(e);
+      TreePath treePath = new TreePath(fileStatus, parentId, this, fs, acls);
+      getPendingQueue().addFirst(treePath);
+  private AclStatus getAclStatus(FileSystem fileSystem, Path path)
+      throws IOException {
+    return enableACLs ? fileSystem.getAclStatus(path) : null;
+  }
+
-      return new FSTreeIterator(root);
+      FileStatus s = fs.getFileStatus(root);
+      return new FSTreeIterator(s, -1L);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS8 INS83 INS43 INS42 INS44 INS44 MOV43 INS8 INS42 INS42 INS32 INS42 MOV21 MOV21 INS60 INS60 INS25 INS44 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS57 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS17 INS43 INS42 INS39 UPD42 INS60 INS60 INS54 INS60 INS21 INS42 INS42 INS16 MOV8 INS43 INS42 INS32 INS42 INS32 INS38 INS42 INS21 INS21 INS21 MOV32 MOV32 INS42 MOV43 INS59 INS43 INS59 INS8 INS12 MOV43 INS59 INS32 INS42 INS32 INS33 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS7 INS42 INS32 UPD42 MOV42 INS42 INS21 INS44 INS8 INS42 INS14 MOV32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS22 INS9 INS22 INS42 INS60 INS42 INS42 INS7 INS43 INS42 MOV53 MOV43 INS42 INS42 INS52 INS42 INS42 MOV43 MOV42 MOV38 INS45 INS45 INS52 INS42 INS52 INS42 INS43 INS59 INS42 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD43 INS42 INS42 INS42 INS32 INS43 INS42 UPD42 INS42 INS42 INS42 DEL8 DEL42 DEL32 DEL42 DEL52 DEL42 DEL14 DEL32 DEL21 DEL45 DEL43 DEL42 DEL44 DEL32 DEL42 DEL53 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL52 DEL42 DEL14 DEL32 DEL21 DEL42 DEL14 DEL41 DEL8