HDFS-2110. StreamFile and ByteRangeInputStream cleanup. Contributed by Eli Collins


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140694 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.InputStream;
+import org.apache.hadoop.io.IOUtils;
-        StreamFile.writeTo(in, os, 0L, fileLen);
+        StreamFile.copyFromOffset(in, os, 0L, fileLen);
+  /**
+   * Send a partial content response with the given range. If there are
+   * no satisfiable ranges, or if multiple ranges are requested, which
+   * is unsupported, respond with range not satisfiable.
+   *
+   * @param in stream to read from
+   * @param out stream to write to
+   * @param response http response to use
+   * @param contentLength for the response header
+   * @param ranges to write to respond with
+   * @throws IOException on error sending the response
+   */
-                              OutputStream os,
+                              OutputStream out,
-  throws IOException {
-
+      throws IOException {
-      //  if there are no satisfiable ranges, or if multiple ranges are
-      // requested (we don't support multiple range requests), send 416 response
-      int status = HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE;
-      response.setStatus(status);
-      response.setHeader("Content-Range", 
+      response.setStatus(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);
+      response.setHeader("Content-Range",
-      //  if there is only a single valid range (must be satisfiable 
-      //  since were here now), send that range with a 206 response
-      System.out.println("first: "+singleSatisfiableRange.getFirst(contentLength));
-      System.out.println("singleLength: "+singleLength);
-      
-      StreamFile.writeTo(in,
-                         os,
-                         singleSatisfiableRange.getFirst(contentLength),
-                         singleLength);
+      copyFromOffset(in, out,
+                     singleSatisfiableRange.getFirst(contentLength),
+                     singleLength);
-  
-  static void writeTo(FSInputStream in,
-                      OutputStream os,
-                      long start,
-                      long count) 
-  throws IOException {
-    byte buf[] = new byte[4096];
-    long bytesRemaining = count;
-    int bytesRead;
-    int bytesToRead;
-    in.seek(start);
-
-    while (true) {
-      // number of bytes to read this iteration
-      bytesToRead = (int)(bytesRemaining<buf.length ? 
-                                                      bytesRemaining:
-                                                      buf.length);
-      
-      // number of bytes actually read this iteration
-      bytesRead = in.read(buf, 0, bytesToRead);
-
-      // if we can't read anymore, break
-      if (bytesRead == -1) {
-        break;
-      } 
-      
-      os.write(buf, 0, bytesRead);
-
-      bytesRemaining -= bytesRead;
-
-      // if we don't need to read anymore, break
-      if (bytesRemaining <= 0) {
-        break;
-      }
-
-    } 
+  /* Copy count bytes at the given offset from one stream to another */
+  static void copyFromOffset(FSInputStream in, OutputStream out, long offset,
+      long count) throws IOException {
+    in.seek(offset);
+    IOUtils.copyBytes(in, out, count);

INS26 INS26 INS40 INS40 INS29 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 UPD42 UPD42 UPD42 INS21 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS32 UPD42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 UPD42 UPD42 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL40 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL40 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL39 DEL42 DEL85 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL9 DEL42 DEL39 DEL42 DEL40 DEL27 DEL42 DEL40 DEL16 DEL36 DEL11 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL7 DEL21 DEL42 DEL34 DEL38 DEL27 DEL10 DEL8 DEL25 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL34 DEL27 DEL10 DEL8 DEL25 DEL8 DEL61