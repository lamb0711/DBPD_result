YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi

-import com.google.common.io.Files;
+import org.apache.slider.common.tools.Duration;
-import org.codehaus.jettison.json.JSONException;
-import org.codehaus.jettison.json.JSONObject;
+    ServiceApiUtil.validateAndResolveApplication(application, sliderFileSystem);
+    deployedClusterName = application.getName();
-    ServiceApiUtil.validateApplicationPayload(application,
-        sliderFileSystem.getFileSystem());
+    ServiceApiUtil.validateAndResolveApplication(application, sliderFileSystem);
+  private Path checkAppExistOnHdfs(String appName)
+      throws IOException, SliderException {
+    Path appDir = sliderFileSystem.buildClusterDirPath(appName);
+    sliderFileSystem.verifyPathExists(
+        new Path(appDir, appName + ".json"));
+    return appDir;
+  }
+
-      return doClientInstall(clientInfo);
+      // TODO implement client install
+      throw new UnsupportedOperationException("Client install not yet " +
+          "supported");
-  private int doClientInstall(ActionClientArgs clientInfo)
-      throws IOException, SliderException {
-
-    require(clientInfo.installLocation != null,
-          E_INVALID_INSTALL_LOCATION +"\n"
-          + CommonArgs.usage(serviceArgs, ACTION_CLIENT));
-    require(clientInfo.installLocation.exists(),
-        E_INSTALL_PATH_DOES_NOT_EXIST + ": " + clientInfo.installLocation.getAbsolutePath());
-
-    require(clientInfo.installLocation.isDirectory(),
-        E_INVALID_INSTALL_PATH + ": " + clientInfo.installLocation.getAbsolutePath());
-
-    File pkgFile;
-    File tmpDir = null;
-
-    require(isSet(clientInfo.packageURI) || isSet(clientInfo.name),
-        E_INVALID_APPLICATION_PACKAGE_LOCATION);
-    if (isSet(clientInfo.packageURI)) {
-      pkgFile = new File(clientInfo.packageURI);
-    } else {
-      Path appDirPath = sliderFileSystem.buildAppDefDirPath(clientInfo.name);
-      Path appDefPath = new Path(appDirPath, SliderKeys.DEFAULT_APP_PKG);
-      require(sliderFileSystem.isFile(appDefPath),
-          E_INVALID_APPLICATION_PACKAGE_LOCATION);
-      tmpDir = Files.createTempDir();
-      pkgFile = new File(tmpDir, SliderKeys.DEFAULT_APP_PKG);
-      sliderFileSystem.copyHdfsFileToLocal(appDefPath, pkgFile);
-    }
-    require(pkgFile.isFile(),
-        E_UNABLE_TO_READ_SUPPLIED_PACKAGE_FILE + " at %s", pkgFile.getAbsolutePath());
-
-    JSONObject config = null;
-    if(clientInfo.clientConfig != null) {
-      try {
-        byte[] encoded = Files.toByteArray(clientInfo.clientConfig);
-        config = new JSONObject(new String(encoded, Charset.defaultCharset()));
-      } catch (JSONException jsonEx) {
-        log.error("Unable to read supplied configuration at {}: {}",
-            clientInfo.clientConfig, jsonEx);
-        log.debug("Unable to read supplied configuration at {}: {}",
-            clientInfo.clientConfig, jsonEx, jsonEx);
-        throw new BadConfigException(E_MUST_BE_A_VALID_JSON_FILE, jsonEx);
-      }
-    }
-
-    // TODO handle client install
-    // Only INSTALL is supported
-    //    ClientProvider
-    //        provider = createClientProvider(SliderProviderFactory.DEFAULT_CLUSTER_TYPE);
-    //    provider.processClientOperation(sliderFileSystem,
-    //        getRegistryOperations(),
-    //        getConfig(),
-    //        "INSTALL",
-    //        clientInfo.installLocation,
-    //        pkgFile,
-    //        config,
-    //        clientInfo.name);
-    return EXIT_SUCCESS;
-  }
-
+    Path appDir = checkAppExistOnHdfs(appName);
+    Application application = ServiceApiUtil.loadApplication(sliderFileSystem,
+        appName);
+    ServiceApiUtil.validateAndResolveApplication(application, sliderFileSystem);
-    Path appDir = sliderFileSystem.buildClusterDirPath(appName);
-    Path appJson = new Path(appDir, appName + ".json");
-    Application application =
-        jsonSerDeser.load(sliderFileSystem.getFileSystem(), appJson);
-    submitApp(application);
+    ApplicationId appId = submitApp(application);
+    application.setId(appId.toString());
+    // write app definition on to hdfs
+    persistApp(appDir, application);
-    Path appDir = sliderFileSystem.buildClusterDirPath(appName);
-    Path appJson = new Path(appDir, appName + ".json");
-    Application persistedApp =
-        jsonSerDeser.load(sliderFileSystem.getFileSystem(), appJson);
+    Application persistedApp = ServiceApiUtil.loadApplication(sliderFileSystem,
+        appName);
-        .save(sliderFileSystem.getFileSystem(), appJson, persistedApp, true);
+        .save(sliderFileSystem.getFileSystem(), ServiceApiUtil.getAppJsonPath(
+            sliderFileSystem, appName), persistedApp, true);
+  @VisibleForTesting
+  public ApplicationReport monitorAppToRunning(Duration duration)
+      throws YarnException, IOException {
+    return yarnClient.monitorAppToState(applicationId, YarnApplicationState
+        .RUNNING, duration);
+  }

MOV26 UPD40 INS31 INS31 INS31 MOV21 MOV83 MOV43 UPD42 MOV42 MOV44 MOV43 MOV43 INS8 MOV78 INS83 INS39 INS42 MOV44 MOV44 MOV43 MOV43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS21 INS21 UPD43 UPD42 MOV60 MOV21 INS41 MOV21 MOV60 MOV60 MOV21 MOV21 INS60 MOV21 INS21 MOV41 INS42 UPD42 MOV42 UPD43 MOV43 UPD42 MOV42 UPD42 MOV42 INS42 INS41 INS32 INS7 UPD42 INS42 MOV43 MOV43 INS43 INS59 INS32 MOV43 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 UPD42 MOV42 MOV14 INS53 UPD42 UPD42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 INS42 INS32 UPD42 UPD42 MOV42 INS42 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS42 INS40 UPD42 MOV42 INS42 INS42 INS14 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 INS42 INS42 UPD42 INS43 INS27 INS42 INS45 INS45 DEL40 DEL26 DEL40 DEL26 DEL42 DEL32 DEL40 DEL32 DEL42 DEL45 DEL40 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL41 DEL39 DEL42 DEL40 DEL33 DEL27 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL42 DEL45 DEL40 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL27 DEL42 DEL32 DEL21 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL40 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL40 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL40 DEL33 DEL27 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL14 DEL7 DEL21 DEL8 DEL44 DEL42 DEL42 DEL45 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL40 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL40 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL14 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL27 DEL83 DEL39 DEL42 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL14 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21