HDFS-11968. ViewFS: StoragePolicies commands fail with HDFS federation. Contributed by Mukul Kumar Singh.

+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.BlockStoragePolicySpi;
+import org.apache.hadoop.fs.FileStatus;
-import org.apache.hadoop.hdfs.DistributedFileSystem;
+import java.io.FileNotFoundException;
-      final DistributedFileSystem dfs = AdminHelper.getDFS(conf);
+      final FileSystem fs = FileSystem.get(conf);
-        Collection<BlockStoragePolicy> policies = dfs.getAllStoragePolicies();
+        Collection<? extends BlockStoragePolicySpi> policies =
+            fs.getAllStoragePolicies();
-        for (BlockStoragePolicy policy : policies) {
+        for (BlockStoragePolicySpi policy : policies) {
-      final DistributedFileSystem dfs = AdminHelper.getDFS(p.toUri(), conf);
+      final FileSystem fs = FileSystem.get(conf);
-        HdfsFileStatus status = dfs.getClient().getFileInfo(
-            Path.getPathWithoutSchemeAndAuthority(p).toString());
-        if (status == null) {
+        FileStatus status;
+        try {
+          status = fs.getFileStatus(p);
+        } catch (FileNotFoundException e) {
-        byte storagePolicyId = status.getStoragePolicy();
-        if (storagePolicyId == HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {
-          System.out.println("The storage policy of " + path + " is unspecified");
-          return 0;
-        }
-        Collection<BlockStoragePolicy> policies = dfs.getAllStoragePolicies();
-        for (BlockStoragePolicy policy : policies) {
-          if (policy.getId() == storagePolicyId) {
-            System.out.println("The storage policy of " + path + ":\n" + policy);
+
+        if (status instanceof HdfsFileStatus) {
+          byte storagePolicyId = ((HdfsFileStatus)status).getStoragePolicy();
+          if (storagePolicyId ==
+              HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {
+            System.out.println("The storage policy of " + path
+                + " is unspecified");
+          Collection<? extends BlockStoragePolicySpi> policies =
+              fs.getAllStoragePolicies();
+          for (BlockStoragePolicySpi policy : policies) {
+            if (policy instanceof BlockStoragePolicy) {
+              if (((BlockStoragePolicy)policy).getId() == storagePolicyId) {
+                System.out.println("The storage policy of " + path
+                    + ":\n" + policy);
+                return 0;
+              }
+            }
+          }
+        System.err.println(getName() + " is not supported for filesystem "
+            + fs.getScheme() + " on path " + path);
+        return 2;
-      System.err.println("Cannot identify the storage policy for " + path);
-      return 2;
-      final DistributedFileSystem dfs = AdminHelper.getDFS(p.toUri(), conf);
+      final FileSystem fs = FileSystem.get(conf);
-        dfs.setStoragePolicy(p, policyName);
+        fs.setStoragePolicy(p, policyName);
-      final DistributedFileSystem dfs = AdminHelper.getDFS(p.toUri(), conf);
+      final FileSystem fs = FileSystem.get(conf);
-        dfs.unsetStoragePolicy(p);
+        fs.unsetStoragePolicy(p);

MOV26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD43 UPD43 INS8 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 INS60 INS54 INS25 INS21 MOV41 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD42 UPD42 INS43 INS59 INS8 INS12 INS62 MOV8 INS32 UPD42 UPD42 UPD42 UPD42 INS76 UPD43 INS42 INS42 INS21 INS44 MOV8 INS42 INS43 INS40 INS42 INS27 UPD42 UPD42 INS43 UPD42 UPD42 INS7 INS43 INS42 INS42 UPD74 INS8 INS32 INS45 INS32 INS45 INS42 UPD42 MOV42 INS42 INS32 INS42 INS76 INS43 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS43 UPD42 INS42 INS62 MOV8 INS11 INS42 INS42 MOV43 MOV43 INS42 INS36 INS11 MOV43 INS42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL40 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32