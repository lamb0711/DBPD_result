HADOOP-11231. Remove dead code in ServletUtil. Contributed by Li Lu.

-import org.apache.commons.httpclient.URIException;
-import org.apache.commons.httpclient.util.URIUtil;
-  
-  /**
-   * Generate the percentage graph and returns HTML representation string
-   * of the same.
-   * 
-   * @param perc The percentage value for which graph is to be generated
-   * @param width The width of the display table
-   * @return HTML String representation of the percentage graph
-   * @throws IOException
-   */
-  public static String percentageGraph(int perc, int width) throws IOException {
-    assert perc >= 0; assert perc <= 100;
-
-    StringBuilder builder = new StringBuilder();
-
-    builder.append("<table border=\"1px\" width=\""); builder.append(width);
-    builder.append("px\"><tr>");
-    if(perc > 0) {
-      builder.append("<td cellspacing=\"0\" class=\"perc_filled\" width=\"");
-      builder.append(perc); builder.append("%\"></td>");
-    }if(perc < 100) {
-      builder.append("<td cellspacing=\"0\" class=\"perc_nonfilled\" width=\"");
-      builder.append(100 - perc); builder.append("%\"></td>");
-    }
-    builder.append("</tr></table>");
-    return builder.toString();
-  }
-  
-  /**
-   * Generate the percentage graph and returns HTML representation string
-   * of the same.
-   * @param perc The percentage value for which graph is to be generated
-   * @param width The width of the display table
-   * @return HTML String representation of the percentage graph
-   * @throws IOException
-   */
-  public static String percentageGraph(float perc, int width) throws IOException {
-    return percentageGraph((int)perc, width);
-  }
-
-  /**
-   * Escape and encode a string regarded as within the query component of an URI.
-   * @param value the value to encode
-   * @return encoded query, null if the default charset is not supported
-   */
-  public static String encodeQueryValue(final String value) {
-    try {
-      return URIUtil.encodeWithinQuery(value, "UTF-8");
-    } catch (URIException e) {
-      throw new AssertionError("JVM does not support UTF-8"); // should never happen!
-    }
-  }
-
-  /**
-   * Escape and encode a string regarded as the path component of an URI.
-   * @param path the path component to encode
-   * @return encoded path, null if UTF-8 is not supported
-   */
-  public static String encodePath(final String path) {
-    try {
-      return URIUtil.encodePath(path, "UTF-8");
-    } catch (URIException e) {
-      throw new AssertionError("JVM does not support UTF-8"); // should never happen!
-    }
-  }
-
-  /**
-   * Parse and decode the path component from the given request.
-   * @param request Http request to parse
-   * @param servletName the name of servlet that precedes the path
-   * @return decoded path component, null if UTF-8 is not supported
-   */
-  public static String getDecodedPath(final HttpServletRequest request, String servletName) {
-    try {
-      return URIUtil.decode(getRawPath(request, servletName), "UTF-8");
-    } catch (URIException e) {
-      throw new AssertionError("JVM does not support UTF-8"); // should never happen!
-    }
-  }

DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL34 DEL27 DEL6 DEL42 DEL34 DEL27 DEL6 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL39 DEL42 DEL11 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31