Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

+import org.apache.hadoop.fs.XAttr;
+import org.apache.hadoop.hdfs.XAttrHelper;
+import org.apache.hadoop.hdfs.server.namenode.FsImageProto.INodeSection.INode;
+import org.apache.hadoop.hdfs.web.resources.XAttrEncodingParam;
+   * Return the JSON formatted ContentSummary of the specified path.
+   * @param path a path specifies a file or directory
+   * @return JSON formatted ContentSummary
+   * @throws IOException if failed to serialize ContentSummary to JSON.
+   */
+  String getContentSummary(String path) throws IOException {
+    ObjectMapper mapper = new ObjectMapper();
+    return "{\"ContentSummary\":\n"
+        + mapper.writeValueAsString(getContentSummaryMap(path)) + "\n}\n";
+  }
+
+  private Map<String, Object> getContentSummaryMap(String path)
+      throws IOException {
+    long id = lookup(path);
+    INode inode = fromINodeId(id);
+    long spaceQuota = 0;
+    long nsQuota = 0;
+    long[] data = new long[4];
+    FsImageProto.INodeSection.INodeFile f = inode.getFile();
+    switch (inode.getType()) {
+    case FILE:
+      data[0] = 0;
+      data[1] = 1;
+      data[2] = getFileSize(f);
+      nsQuota = -1;
+      data[3] = data[2] * f.getReplication();
+      spaceQuota = -1;
+      return fillSummaryMap(spaceQuota, nsQuota, data);
+    case DIRECTORY:
+      fillDirSummary(id, data);
+      nsQuota = inode.getDirectory().getNsQuota();
+      spaceQuota = inode.getDirectory().getDsQuota();
+      return fillSummaryMap(spaceQuota, nsQuota, data);
+    case SYMLINK:
+      data[0] = 0;
+      data[1] = 1;
+      data[2] = 0;
+      nsQuota = -1;
+      data[3] = 0;
+      spaceQuota = -1;
+      return fillSummaryMap(spaceQuota, nsQuota, data);
+    default:
+      return null;
+    }
+
+  }
+
+  private Map<String, Object> fillSummaryMap(long spaceQuota,
+      long nsQuota, long[] data) {
+    Map<String, Object> map = Maps.newHashMap();
+    map.put("directoryCount", data[0]);
+    map.put("fileCount", data[1]);
+    map.put("length", data[2]);
+    map.put("quota", nsQuota);
+    map.put("spaceConsumed", data[3]);
+    map.put("spaceQuota", spaceQuota);
+    return map;
+  }
+
+  private void fillDirSummary(long id, long[] data) throws IOException {
+    data[0]++;
+    long[] children = dirmap.get(id);
+    if (children == null) {
+      return;
+    }
+
+    for (long cid : children) {
+      INode node = fromINodeId(cid);
+      switch (node.getType()) {
+      case DIRECTORY:
+        fillDirSummary(cid, data);
+        break;
+      case FILE:
+        FsImageProto.INodeSection.INodeFile f = node.getFile();
+        long curLength = getFileSize(f);
+        data[1]++;
+        data[2] += curLength;
+        data[3] += (curLength) * (f.getReplication());
+        break;
+      case SYMLINK:
+        data[1]++;
+        break;
+      default:
+        break;
+      }
+    }
+  }
+
+  /**
+   * Return the JSON formatted XAttrNames of the specified file.
+   *
+   * @param path
+   *          a path specifies a file
+   * @return JSON formatted XAttrNames
+   * @throws IOException
+   *           if failed to serialize fileStatus to JSON.
+   */
+  String listXAttrs(String path) throws IOException {
+    return JsonUtil.toJsonString(getXAttrList(path));
+  }
+
+  /**
+   * Return the JSON formatted XAttrs of the specified file.
+   *
+   * @param path
+   *          a path specifies a file
+   * @return JSON formatted XAttrs
+   * @throws IOException
+   *           if failed to serialize fileStatus to JSON.
+   */
+  String getXAttrs(String path, List<String> names, String encoder)
+      throws IOException {
+
+    List<XAttr> xAttrs = getXAttrList(path);
+    List<XAttr> filtered;
+    if (names == null || names.size() == 0) {
+      filtered = xAttrs;
+    } else {
+      filtered = Lists.newArrayListWithCapacity(names.size());
+      for (String name : names) {
+        XAttr search = XAttrHelper.buildXAttr(name);
+
+        boolean found = false;
+        for (XAttr aXAttr : xAttrs) {
+          if (aXAttr.getNameSpace() == search.getNameSpace()
+              && aXAttr.getName().equals(search.getName())) {
+
+            filtered.add(aXAttr);
+            found = true;
+            break;
+          }
+        }
+
+        if (!found) {
+          throw new IOException(
+              "At least one of the attributes provided was not found.");
+        }
+      }
+
+    }
+    return JsonUtil.toJsonString(filtered,
+        new XAttrEncodingParam(encoder).getEncoding());
+  }
+
+  private List<XAttr> getXAttrList(String path) throws IOException {
+    long id = lookup(path);
+    FsImageProto.INodeSection.INode inode = fromINodeId(id);
+    switch (inode.getType()) {
+    case FILE:
+      return FSImageFormatPBINode.Loader.loadXAttrs(
+          inode.getFile().getXAttrs(), stringTable);
+    case DIRECTORY:
+      return FSImageFormatPBINode.Loader.loadXAttrs(inode.getDirectory()
+          .getXAttrs(), stringTable);
+    default:
+      return null;
+    }
+  }
+
+  /**

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS43 INS42 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS43 INS42 INS44 INS43 INS8 INS29 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS41 INS43 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS50 INS43 INS43 INS43 INS39 INS42 INS39 INS42 INS5 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS39 INS42 INS5 INS42 INS42 INS21 INS60 INS25 INS70 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS50 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS27 INS42 INS42 INS42 INS42 INS39 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS5 INS59 INS43 INS59 INS32 INS49 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS49 INS21 INS21 INS21 INS41 INS49 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS49 INS41 INS42 INS42 INS42 INS39 INS85 INS74 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS39 INS85 INS37 INS5 INS59 INS27 INS8 INS44 INS42 INS8 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS43 INS42 INS74 INS59 INS74 INS59 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS39 INS59 INS43 INS59 INS32 INS49 INS41 INS49 INS41 INS49 INS41 INS42 INS42 INS14 INS45 INS32 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS42 INS34 INS39 INS85 INS42 INS3 INS40 INS42 INS32 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS32 INS42 INS32 INS7 INS7 INS32 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS32 INS33 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS2 INS42 INS42 INS45 INS2 INS42 INS42 INS45 INS2 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS2 INS42 INS42 INS45 INS42 INS2 INS39 INS85 INS42 INS32 INS42 INS33 INS41 INS39 INS42 INS60 INS50 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS27 INS27 INS21 INS21 INS70 INS42 INS42 INS42 INS32 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS33 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS5 INS34 INS42 INS42 INS2 INS34 INS2 INS34 INS2 INS32 INS42 INS38 INS2 INS27 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS2 INS34 INS2 INS34 INS2 INS34 INS42 INS38 INS2 INS34 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS43 INS59 INS32 INS49 INS21 INS10 INS49 INS60 INS60 INS21 INS21 INS21 INS10 INS49 INS21 INS10 INS49 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS7 INS7 INS44 INS42 INS8 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS34 INS42 INS34 INS2 INS32 INS34 INS32 INS42 INS32 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS34 INS42 INS34 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS39 INS59 INS37 INS7 INS7 INS42 INS37 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS60 INS60 INS70 INS25 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS2 INS2 INS42 INS2 INS27 INS2 INS42 INS42 INS32 INS42 INS43 INS59 INS39 INS59 INS44 INS42 INS8 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS36 INS36 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS43 INS42 INS25 INS42 INS53 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS8 INS14 INS42 INS42 INS27 INS32 INS21 INS21 INS10 INS43 INS45 INS32 INS32 INS32 INS42 INS32 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9