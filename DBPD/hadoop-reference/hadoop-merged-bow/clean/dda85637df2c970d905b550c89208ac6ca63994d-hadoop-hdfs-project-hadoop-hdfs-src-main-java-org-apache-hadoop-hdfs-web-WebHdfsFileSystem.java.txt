Merge trunk to branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1608603 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.security.AccessControlException;
-import org.apache.hadoop.security.authentication.client.AuthenticationException;
+import org.apache.hadoop.security.token.SecretManager.InvalidToken;
+import org.apache.hadoop.security.token.TokenSelector;
+import org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSelector;
-  protected TokenAspect<? extends WebHdfsFileSystem> tokenAspect;
+  private boolean canRefreshDelegationToken;
-  /**
-   * Initialize tokenAspect. This function is intended to
-   * be overridden by SWebHdfsFileSystem.
-   */
-  protected synchronized void initializeTokenAspect() {
-    tokenAspect = new TokenAspect<WebHdfsFileSystem>(this, tokenServiceName,
-        TOKEN_KIND);
+  protected Text getTokenKind() {
+    return TOKEN_KIND;
-    initializeTokenAspect();
-
-    if (UserGroupInformation.isSecurityEnabled()) {
-      tokenAspect.initDelegationToken(ugi);
-    }
+    this.canRefreshDelegationToken = UserGroupInformation.isSecurityEnabled();
+    this.delegationToken = null;
+  TokenSelector<DelegationTokenIdentifier> tokenSelector =
+      new AbstractDelegationTokenSelector<DelegationTokenIdentifier>(getTokenKind()){};
+
+  // the first getAuthParams() for a non-token op will either get the
+  // internal token from the ugi or lazy fetch one
-    tokenAspect.ensureTokenInitialized();
+    if (canRefreshDelegationToken && delegationToken == null) {
+      Token<?> token = tokenSelector.selectToken(
+          new Text(getCanonicalServiceName()), ugi.getTokens());
+      // ugi tokens are usually indicative of a task which can't
+      // refetch tokens.  even if ugi has credentials, don't attempt
+      // to get another token to match hdfs/rpc behavior
+      if (token != null) {
+        LOG.debug("Using UGI token: " + token);
+        canRefreshDelegationToken = false; 
+      } else {
+        token = getDelegationToken(null);
+        if (token != null) {
+          LOG.debug("Fetched new token: " + token);
+        } else { // security is disabled
+          canRefreshDelegationToken = false;
+        }
+      }
+      setDelegationToken(token);
+    }
+  @VisibleForTesting
+  synchronized boolean replaceExpiredDelegationToken() throws IOException {
+    boolean replaced = false;
+    if (canRefreshDelegationToken) {
+      Token<?> token = getDelegationToken(null);
+      LOG.debug("Replaced expired token: " + token);
+      setDelegationToken(token);
+      replaced = (token != null);
+    }
+    return replaced;
+  }
+
-      throw new IOException(
-          new AuthenticationException(conn.getResponseMessage()));
+      // match hdfs/rpc exception
+      throw new AccessControlException(conn.getResponseMessage());
-      final RemoteException re = JsonUtil.toRemoteException(m);
+      IOException re = JsonUtil.toRemoteException(m);
+      // extract UGI-related exceptions and unwrap InvalidToken
+      // the NN mangles these exceptions but the DN does not and may need
+      // to re-fetch a token if either report the token is expired
+      if (re.getMessage().startsWith("Failed to obtain user group information:")) {
+        String[] parts = re.getMessage().split(":\\s+", 3);
+        re = new RemoteException(parts[1], parts[2]);
+        re = ((RemoteException)re).unwrapRemoteException(InvalidToken.class);
+      }
-    delegationToken = null;
-    tokenAspect.reset();
-    if (UserGroupInformation.isSecurityEnabled() && !op.getRequireAuth()) {
+    if (!op.getRequireAuth()) {
-        } catch (IOException ioe) {
-          Throwable cause = ioe.getCause();
-          if (cause != null && cause instanceof AuthenticationException) {
-            throw ioe; // no retries for auth failures
+        } catch (AccessControlException ace) {
+          // no retries for auth failures
+          throw ace;
+        } catch (InvalidToken it) {
+          // try to replace the expired token with a new one.  the attempt
+          // to acquire a new token must be outside this operation's retry
+          // so if it fails after its own retries, this operation fails too.
+          if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {
+            throw it;
+        } catch (IOException ioe) {
+
+  class FsPathConnectionRunner extends AbstractFsPathRunner<HttpURLConnection> {
+    FsPathConnectionRunner(Op op, Path fspath, Param<?,?>... parameters) {
+      super(op, fspath, parameters);
+    }
+    @Override
+    HttpURLConnection getResponse(final HttpURLConnection conn)
+        throws IOException {
+      return conn;
+    }
+  }
-    final URL url = toUrl(op, f, new BufferSizeParam(buffersize));
+    // use a runner so the open can recover from an invalid token
+    FsPathConnectionRunner runner =
+        new FsPathConnectionRunner(op, f, new BufferSizeParam(buffersize));
-        new OffsetUrlOpener(url), new OffsetUrlOpener(null)));
+        new UnresolvedUrlOpener(runner), new OffsetUrlOpener(null)));
-  public void close() throws IOException {
-    super.close();
-    synchronized (this) {
-      tokenAspect.removeRenewAction();
+  public synchronized void close() throws IOException {
+    try {
+      if (canRefreshDelegationToken && delegationToken != null) {
+        cancelDelegationToken(delegationToken);
+      }
+    } catch (IOException ioe) {
+      LOG.debug("Token cancel failed: "+ioe);
+    } finally {
+      super.close();
+    }
+  }
+
+  // use FsPathConnectionRunner to ensure retries for InvalidTokens
+  class UnresolvedUrlOpener extends ByteRangeInputStream.URLOpener {
+    private final FsPathConnectionRunner runner;
+    UnresolvedUrlOpener(FsPathConnectionRunner runner) {
+      super(null);
+      this.runner = runner;
+    }
+
+    @Override
+    protected HttpURLConnection connect(long offset, boolean resolved)
+        throws IOException {
+      assert offset == 0;
+      HttpURLConnection conn = runner.run();
+      setURL(conn.getURL());
+      return conn;
-    OffsetUrlInputStream(OffsetUrlOpener o, OffsetUrlOpener r)
+    OffsetUrlInputStream(UnresolvedUrlOpener o, OffsetUrlOpener r)

MOV26 INS26 INS26 INS26 MOV31 UPD40 INS40 INS40 INS40 INS23 INS31 INS23 INS55 INS55 INS83 INS39 INS59 INS83 INS43 INS42 INS8 MOV21 UPD74 MOV74 MOV59 MOV74 UPD42 MOV43 INS78 INS39 INS42 INS43 INS8 INS42 INS74 INS31 INS31 INS83 INS8 INS42 INS43 INS23 INS31 INS31 INS42 INS42 INS41 MOV21 UPD43 INS43 UPD42 INS14 INS25 MOV41 INS42 INS42 INS60 INS25 INS41 INS43 INS43 INS42 INS44 INS44 INS44 INS8 INS78 INS43 INS42 INS44 INS43 INS8 INS54 INS40 INS83 INS83 INS43 INS59 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS7 INS7 UPD42 UPD42 MOV42 INS74 INS32 INS1 INS27 INS8 INS39 INS59 INS42 INS8 INS42 MOV38 INS42 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS46 INS42 INS42 INS83 INS43 INS42 INS42 INS41 UPD43 INS8 INS12 MOV8 INS42 INS42 INS43 INS42 INS46 INS21 INS42 INS42 INS39 INS42 INS39 INS42 INS42 INS6 INS60 INS21 INS41 UPD43 INS22 MOV32 INS22 INS33 INS43 INS43 INS42 INS42 INS27 INS60 INS25 INS21 INS42 INS9 INS60 INS21 MOV21 INS21 INS25 INS42 INS42 INS43 INS76 INS76 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS14 INS25 INS44 INS8 INS42 INS33 INS7 INS27 INS43 INS59 INS32 INS42 UPD42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS33 INS74 INS59 INS27 INS8 INS8 INS32 INS74 INS59 INS32 INS7 MOV14 MOV43 INS32 INS8 INS42 INS43 INS42 INS42 MOV14 INS27 INS8 INS43 INS42 INS21 INS22 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS32 UPD43 MOV43 INS76 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS25 INS42 INS42 INS43 INS76 INS42 INS32 INS42 INS42 INS27 UPD42 UPD42 INS42 INS36 UPD43 INS32 INS42 INS45 INS60 INS21 INS21 INS12 INS12 INS12 INS42 UPD43 UPD42 INS42 INS27 INS21 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS14 INS32 INS32 INS7 INS7 INS27 INS8 INS8 INS42 INS42 INS33 INS45 INS42 INS27 UPD42 INS42 INS42 INS5 INS59 INS7 INS7 INS44 INS8 INS44 INS8 MOV44 INS8 UPD42 INS42 INS33 INS32 INS42 INS42 INS27 INS43 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS33 INS43 INS85 INS42 INS32 INS42 INS14 INS42 INS32 INS43 INS42 INS53 INS43 INS42 MOV25 MOV21 INS42 INS42 INS45 INS42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS33 INS32 INS7 INS42 INS32 INS42 INS45 INS34 MOV43 INS2 INS2 INS36 INS42 INS57 UPD42 MOV42 INS42 INS42 UPD27 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS34 INS42 INS34 INS11 INS43 INS32 INS38 INS45 INS42 INS43 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 DEL83 DEL23 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL43 DEL76 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL43 DEL74 DEL52 DEL42 DEL42 DEL14 DEL7 DEL21 DEL83 DEL42 DEL8 DEL14 DEL83 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL62 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL12 DEL83 DEL42 DEL42 DEL42 DEL32 DEL52 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51