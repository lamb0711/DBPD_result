HDFS-8563. Erasure Coding: fsck handles file smaller than a full stripe. Contributed by Walter Su.

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStriped;
-import org.apache.hadoop.io.erasurecode.ECSchema;
-      BlockInfo blockInfo = namenode.getNamesystem().getStoredBlock(block);
+      BlockInfo blockInfo = bm.getStoredBlock(block);
+      final int minReplication = bm.getMinStorageNum(storedBlock);
-      if(file.getReplication() == 0) {
-        final FSNamesystem fsn = namenode.getNamesystem();
-        final ECSchema ecSchema;
-        fsn.readLock();
-        try {
-          INode inode = namenode.getNamesystem().getFSDirectory()
-              .getINode(path);
-          INodesInPath iip = INodesInPath.fromINode(inode);
-          ecSchema = FSDirErasureCodingOp.getErasureCodingSchema(fsn, iip);
-        } finally {
-          fsn.readUnlock();
-        }
-        targetFileReplication = (short) (ecSchema.getNumDataUnits() + ecSchema.getNumParityUnits());
+      if (file.getECSchema() != null) {
+        assert storedBlock instanceof BlockInfoStriped;
+        targetFileReplication = ((BlockInfoStriped) storedBlock)
+            .getRealTotalBlockNum();
-      if(totalReplicasPerBlock < res.minReplication){
+      if(totalReplicasPerBlock < minReplication){
-      if (totalReplicasPerBlock >= res.minReplication)
+      if (totalReplicasPerBlock >= minReplication)
-    final int minReplication;
-
-    Result(int minReplication) {
-      this.minReplication = minReplication;
-    }
-
+    final short minReplication;
-      super(conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY,
-                        DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_DEFAULT));
+      this.minReplication = (short)conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY,
+                                            DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_DEFAULT);
-    final String ecSchema;
+    final String defaultSchema;
-      this(ErasureCodingSchemaManager.getSystemDefaultSchema());
-    }
-
-    ErasureCodingResult(ECSchema ecSchema) {
-      super(ecSchema.getNumDataUnits());
-      this.ecSchema = ecSchema.getSchemaName();
+      defaultSchema = ErasureCodingSchemaManager.getSystemDefaultSchema()
+          .getSchemaName();
-          res.append("\n  ").append("MIN REQUIRED EC BLOCK:\t")
-              .append(minReplication);
-      res.append("\n Unsatisfactory placement block groups:\t\t")
+      res.append("\n Unsatisfactory placement block groups:\t")
-      res.append("\n Default schema:\t").append(ecSchema)
+      res.append("\n Default schema:\t\t").append(defaultSchema)
-          corruptBlocks).append("\n Missing ec-blocks:\t\t").append(
+          corruptBlocks).append("\n Missing internal blocks:\t").append(
-        res.append("\n Decommissioned ec-blocks:\t").append(
+        res.append("\n Decommissioned internal blocks:\t").append(
-        res.append("\n Decommissioning ec-blocks:\t").append(
+        res.append("\n Decommissioning internal blocks:\t").append(

MOV26 UPD40 MOV23 UPD39 INS21 UPD42 INS21 MOV60 INS25 INS7 INS7 INS39 INS27 INS8 MOV8 MOV22 INS11 INS42 INS32 UPD42 INS32 INS33 INS6 MOV21 INS42 INS42 INS39 MOV32 MOV32 INS42 UPD45 UPD45 UPD42 MOV42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS62 INS42 INS43 UPD42 UPD45 UPD45 UPD42 MOV42 INS36 UPD42 INS11 INS43 INS42 INS42 UPD42 UPD45 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL39 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL36 DEL11 DEL7 DEL21 DEL8 DEL25 DEL40 DEL40 DEL42 DEL39 DEL42 DEL44 DEL42 DEL7 DEL21 DEL8 DEL31 DEL46 DEL17 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL46 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL45 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21