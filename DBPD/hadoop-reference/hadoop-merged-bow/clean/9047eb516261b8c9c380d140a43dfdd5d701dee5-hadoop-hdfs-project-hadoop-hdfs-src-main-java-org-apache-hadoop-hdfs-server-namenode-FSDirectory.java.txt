HDFS-4209. Clean up the addNode/addChild/addChildNoQuotaCheck methods in FSDirectory and INodeDirectory.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1414447 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.PathIsNotDirectoryException;
-  private static final long UNKNOWN_DISK_SPACE = -1;
+    boolean added = false;
-      newNode = addNode(path, newNode, UNKNOWN_DISK_SPACE);
+      added = addINode(path, newNode);
-    if (newNode == null) {
+    if (!added) {
-    INode newNode;
+    final INode newNode;
-      newNode = addNode(path, newNode, UNKNOWN_DISK_SPACE);
+      if (addINode(path, newNode)) {
+        return newNode;
+      }
-      return null;
-    return newNode;
+    return null;
-    INode dstChild = null;
+    boolean added = false;
-      srcChild = removeChild(srcInodesInPath, srcInodes.length-1);
+      srcChild = removeLastINode(srcInodesInPath);
-      dstChild = addChildNoQuotaCheck(dstInodesInPath, dstInodes.length-1,
-          srcChild, UNKNOWN_DISK_SPACE);
-      if (dstChild != null) {
+      added = addLastINodeNoQuotaCheck(dstInodesInPath, srcChild);
+      if (added) {
-      if (dstChild == null && srcChild != null) {
+      if (!added && srcChild != null) {
-        addChildNoQuotaCheck(srcInodesInPath, srcInodes.length - 1, srcChild, 
-            UNKNOWN_DISK_SPACE);
+        addLastINodeNoQuotaCheck(srcInodesInPath, srcChild);
-    INode removedSrc = removeChild(srcInodesInPath, srcInodes.length - 1);
+    INode removedSrc = removeLastINode(srcInodesInPath);
-        removedDst = removeChild(dstInodesInPath, dstInodes.length - 1);
+        removedDst = removeLastINode(dstInodesInPath);
-      INode dstChild = null;
-      dstChild = addChildNoQuotaCheck(dstInodesInPath, dstInodes.length - 1,
-          removedSrc, UNKNOWN_DISK_SPACE);
-
-      int filesDeleted = 0;
-      if (dstChild != null) {
+      if (addLastINodeNoQuotaCheck(dstInodesInPath, removedSrc)) {
+        int filesDeleted = 0;
-        addChildNoQuotaCheck(srcInodesInPath, srcInodes.length - 1, removedSrc, 
-            UNKNOWN_DISK_SPACE);
+        addLastINodeNoQuotaCheck(srcInodesInPath, removedSrc);
-        addChildNoQuotaCheck(dstInodesInPath, dstInodes.length - 1, removedDst, 
-            UNKNOWN_DISK_SPACE);
+        addLastINodeNoQuotaCheck(dstInodesInPath, removedDst);
-    int pos = inodes.length - 1;
-    targetNode = removeChild(inodesInPath, pos);
+    targetNode = removeLastINode(inodesInPath);
-    inodes[pos-1].setModificationTime(mtime);
+    inodes[inodes.length - 2].setModificationTime(mtime);
-      rootDir.addNode(path, newnode); 
+      rootDir.addINode(path, newnode); 
-  /**
-   * Get the parent node of path.
-   * 
-   * @param path the path to explore
-   * @return its parent node
-   */
-  INodeDirectory getParent(byte[][] path) 
-    throws FileNotFoundException, UnresolvedLinkException {
-    readLock();
-    try {
-      return rootDir.getParent(path);
-    } finally {
-      readUnlock();
-    }
-  }
-   * @throws FileNotFound if path does not exist.
+   * @throws FileNotFoundException if path does not exist.
-                                         throws QuotaExceededException,
-                                                FileNotFoundException,
-                                                UnresolvedLinkException {
+      throws QuotaExceededException, FileNotFoundException, UnresolvedLinkException {
-        throw new FileNotFoundException(path + 
-                                        " does not exist under rootDir.");
+        throw new FileNotFoundException("Path not found: " + path);
-    final INode inode = addChild(inodesInPath, pos, dir, -1, true);
-    inodesInPath.setINode(pos, inode);
+    if (addChild(inodesInPath, pos, dir, true)) {
+      inodesInPath.setINode(pos, dir);
+    }
-  /** Add a node child to the namespace. The full path name of the node is src.
-   * childDiskspace should be -1, if unknown. 
+  /**
+   * Add the given child to the namespace.
+   * @param src The full path name of the child node.
-  private <T extends INode> T addNode(String src, T child, long childDiskspace
+  private boolean addINode(String src, INode child
-      return addChild(inodesInPath, inodesInPath.getINodes().length-1, child,
-          childDiskspace, true);
+      return addLastINode(inodesInPath, child, true);
+  /**
+   * The same as {@link #addChild(INodesInPath, int, INode, boolean)}
+   * with pos = length - 1.
+   */
+  private boolean addLastINode(INodesInPath inodesInPath,
+      INode inode, boolean checkQuota) throws QuotaExceededException {
+    final int pos = inodesInPath.getINodes().length - 1;
+    return addChild(inodesInPath, pos, inode, checkQuota);
+  }
+
-   * @return the added node. 
+   * @return false if the child with this name already exists; 
+   *         otherwise return true;
-  private <T extends INode> T addChild(INodesInPath inodesInPath, int pos,
-      T child, long childDiskspace,
-      boolean checkQuota) throws QuotaExceededException {
+  private boolean addChild(INodesInPath inodesInPath, int pos,
+      INode child, boolean checkQuota) throws QuotaExceededException {
-    if (childDiskspace < 0) {
-      childDiskspace = counts.getDsCount();
-    }
-    updateCount(inodesInPath, pos, counts.getNsCount(), childDiskspace, checkQuota);
+    updateCount(inodesInPath, pos, counts.getNsCount(), counts.getDsCount(), checkQuota);
-    final T addedNode = ((INodeDirectory)inodes[pos-1]).addChild(child, true);
-    if (addedNode == null) {
-      updateCount(inodesInPath, pos, -counts.getNsCount(), -childDiskspace, true);
+    final boolean added = ((INodeDirectory)inodes[pos-1]).addChild(child, true);
+    if (!added) {
+      updateCount(inodesInPath, pos, -counts.getNsCount(), -counts.getDsCount(), true);
-    return addedNode;
+    return added;
-  private <T extends INode> T addChildNoQuotaCheck(INodesInPath inodesInPath,
-      int pos, T child, long childDiskspace) {
-    T inode = null;
+  private boolean addLastINodeNoQuotaCheck(INodesInPath inodesInPath, INode i) {
-      inode = addChild(inodesInPath, pos, child, childDiskspace, false);
+      return addLastINode(inodesInPath, i, false);
-    return inode;
+    return false;
-  /** Remove an inode at index pos from the namespace.
-   * Its ancestors are stored at [0, pos-1].
+  /**
+   * Remove the last inode in the path from the namespace.
-   * Return the removed node; null if the removal fails.
+   * @return the removed node; null if the removal fails.
-  private INode removeChild(final INodesInPath inodesInPath, int pos) {
+  private INode removeLastINode(final INodesInPath inodesInPath) {
+    final int pos = inodes.length - 1;
-   * @throws FileNotFoundException if the path does not exist or is a file
+   * @throws FileNotFoundException if the path does not exist.
+   * @throws PathIsNotDirectoryException if the path is not a directory.
-    throws FileNotFoundException, QuotaExceededException, 
-      UnresolvedLinkException {
+      throws FileNotFoundException, PathIsNotDirectoryException,
+      QuotaExceededException, UnresolvedLinkException {
-    INode targetNode = inodes[inodes.length-1];
-    if (targetNode == null) {
-      throw new FileNotFoundException("Directory does not exist: " + srcs);
-    } else if (!targetNode.isDirectory()) {
-      throw new FileNotFoundException("Cannot set quota on a file: " + srcs);  
-    } else if (targetNode.isRoot() && nsQuota == HdfsConstants.QUOTA_RESET) {
+    INodeDirectory dirNode = INodeDirectory.valueOf(inodes[inodes.length-1], srcs);
+    if (dirNode.isRoot() && nsQuota == HdfsConstants.QUOTA_RESET) {
-      INodeDirectory dirNode = (INodeDirectory)targetNode;
-   * See {@link ClientProtocol#setQuota(String, long, long)} for the 
-   * contract.
+   * See {@link ClientProtocol#setQuota(String, long, long)} for the contract.
-    throws FileNotFoundException, QuotaExceededException,
-    UnresolvedLinkException { 
+      throws FileNotFoundException, PathIsNotDirectoryException,
+      QuotaExceededException, UnresolvedLinkException {
-    return addNode(path, symlink, UNKNOWN_DISK_SPACE);
+    return addINode(path, symlink)? symlink: null;

INS26 MOV31 INS40 INS39 UPD42 INS83 INS39 INS42 INS44 INS44 UPD43 INS39 INS39 INS42 UPD42 INS43 INS43 INS60 MOV41 INS25 INS65 INS65 MOV43 INS65 INS43 INS42 MOV43 INS42 INS39 UPD42 UPD42 INS60 MOV41 MOV43 MOV43 INS42 INS65 INS65 MOV60 INS65 INS42 INS60 MOV25 INS42 INS39 INS59 INS38 INS83 INS39 UPD42 INS32 INS8 UPD66 MOV66 INS42 UPD66 MOV66 UPD66 MOV66 INS65 UPD66 MOV66 UPD42 MOV42 INS83 INS39 INS59 UPD66 INS66 INS39 INS38 UPD42 INS9 UPD66 MOV66 MOV66 UPD66 MOV66 INS83 UPD66 INS42 INS66 MOV43 INS59 UPD66 INS16 INS42 INS9 INS42 INS25 UPD42 INS9 MOV42 MOV42 MOV42 MOV42 MOV9 MOV21 INS68 INS42 MOV27 UPD42 UPD42 UPD42 INS42 INS42 INS32 UPD42 INS42 INS41 INS42 INS32 INS32 INS42 INS33 INS32 INS8 INS42 UPD42 INS32 UPD42 INS42 INS69 INS69 INS69 INS69 UPD42 MOV42 INS42 INS32 INS42 INS42 INS2 INS42 UPD42 UPD42 MOV42 MOV42 MOV42 UPD42 UPD42 MOV42 MOV42 MOV42 MOV41 UPD42 INS38 INS42 INS42 INS42 MOV60 INS40 UPD34 UPD42 UPD42 UPD42 INS43 INS39 MOV43 INS39 UPD42 MOV42 MOV42 UPD42 MOV42 MOV9 MOV42 MOV27 UPD42 UPD42 UPD42 INS42 INS42 MOV32 UPD42 UPD42 UPD42 UPD42 INS45 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL33 DEL40 DEL34 DEL27 DEL40 DEL34 DEL27 DEL42 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL42 DEL40 DEL34 DEL27 DEL40 DEL34 DEL27 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL34 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL42 DEL40 DEL34 DEL27 DEL42 DEL42 DEL42 DEL45 DEL83 DEL42 DEL34 DEL38 DEL32 DEL59 DEL60 DEL65 DEL42 DEL42 DEL43 DEL73 DEL42 DEL43 DEL42 DEL43 DEL39 DEL42 DEL44 DEL42 DEL65 DEL42 DEL66 DEL65 DEL65 DEL43 DEL42 DEL39 DEL85 DEL85 DEL5 DEL42 DEL43 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL73 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL2 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL66 DEL42 DEL32