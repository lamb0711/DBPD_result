HDFS-11727. Block Storage: Retry Blocks should be requeued when cblock is restarted. Contributed by Mukul Kumar Singh.

+import org.apache.hadoop.cblock.CBlockConfigKeys;
+import org.apache.hadoop.cblock.jscsiHelper.cache.impl.AsyncBlockWriter;
+  private final int maxRetryCount;
+    this.maxRetryCount =
+        config.getInt(CBlockConfigKeys.DFS_CBLOCK_CACHE_MAX_RETRY_KEY,
+            CBlockConfigKeys.DFS_CBLOCK_CACHE_MAX_RETRY_DEFAULT);
-  private void checkExistingDirtyLog(File dbPath) {
+  private void checkExistingLog(String prefixFileName, File dbPath) {
-    traverse(dbPath, allFiles);
+    traverse(prefixFileName, dbPath, allFiles);
-        LOG.info("found this {} with {}", parentPath, fileName);
+        LOG.info("found {} {} with prefix {}",
+            parentPath, fileName, prefixFileName);
-  private void traverse(File path, HashMap<String, ArrayList<String>> files) {
+  private void traverse(String prefixFileName, File path,
+                        HashMap<String, ArrayList<String>> files) {
-      if (path.getName().startsWith("DirtyLog")) {
+      if (path.getName().startsWith(prefixFileName)) {
-          traverse(subPath, files);
+          traverse(prefixFileName, subPath, files);
-    checkExistingDirtyLog(dbFile);
+    checkExistingLog(AsyncBlockWriter.DIRTY_LOG_PREFIX, dbFile);
+    checkExistingLog(AsyncBlockWriter.RETRY_LOG_PREFIX, dbFile);
-  LevelDBStore getCacheDB(String dbPath) {
-    return dbMap.get(dbPath).db;
+  public LevelDBStore getCacheDB(String dbPath) throws IOException {
+    return openDB(dbPath);
+  public void releaseCacheDB(String dbPath) {
+    try {
+      closeDB(dbPath);
+    } catch (Exception e) {
+      metrics.incNumFailedReleaseLevelDB();
+      LOG.error("LevelDB close failed, dbPath:" + dbPath, e);
+    }
+  }
-   * Close the DB if we don't have any outstanding refrences.
+   * Close the DB if we don't have any outstanding references.
+        String[] fileNameParts = message.getFileName().split("\\.");
+        Preconditions.checkState(fileNameParts.length > 1);
+        String fileType = fileNameParts[0];
+        boolean isDirtyLogFile =
+            fileType.equalsIgnoreCase(AsyncBlockWriter.DIRTY_LOG_PREFIX);
+        fileChannel.close();
-        getTargetMetrics().incNumBytesDirtyLogRead(bytesRead);
+        if (isDirtyLogFile) {
+          getTargetMetrics().incNumBytesDirtyLogRead(bytesRead);
+        } else {
+          getTargetMetrics().incNumBytesRetryLogRead(bytesRead);
+        }
-        LOG.debug("Remaining blocks count {} and {}", blockIDBuffer.remaining(),
+        LOG.info("Remaining blocks count {} and {}", blockIDBuffer.remaining(),
-          getTargetMetrics().incNumDirtyLogBlockRead();
+          int retryCount = 0;
+          if (isDirtyLogFile) {
+            getTargetMetrics().incNumDirtyLogBlockRead();
+          } else {
+            getTargetMetrics().incNumRetryLogBlockRead();
+            Preconditions.checkState(fileNameParts.length == 4);
+            retryCount = Integer.parseInt(fileNameParts[3]);
+          }
-              message.getDbPath(), message.getFileName());
+              message.getDbPath(), retryCount, message.getFileName(),
+              maxRetryCount);
-      this.flusher.openDB(dbPath);
-          flusher.closeDB(dbPath);

INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS83 INS39 INS59 UPD42 INS44 INS44 INS83 INS43 INS83 INS39 INS42 INS44 INS8 INS42 INS21 INS43 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS54 INS7 INS42 INS42 INS32 INS32 INS42 INS8 INS12 UPD66 INS22 INS32 INS42 UPD42 INS40 INS42 INS40 INS42 UPD42 MOV42 MOV42 INS21 INS44 INS8 INS52 INS42 INS42 INS42 INS40 INS40 INS32 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS32 INS60 INS21 INS60 INS60 INS21 INS25 INS42 INS42 INS42 INS42 INS27 INS42 INS5 INS59 INS32 INS43 INS59 INS39 INS59 INS32 INS42 INS8 INS8 UPD45 INS42 INS45 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS2 INS42 INS32 INS42 INS42 MOV21 INS21 UPD42 INS60 INS25 INS42 INS32 INS42 INS45 INS40 INS34 INS42 INS34 INS42 INS42 INS40 INS32 INS39 INS59 INS42 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS34 MOV21 INS21 INS21 INS21 INS42 INS32 INS32 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS40 INS34 INS42 INS42 INS2 INS42 INS34 DEL45 DEL42 DEL32 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21