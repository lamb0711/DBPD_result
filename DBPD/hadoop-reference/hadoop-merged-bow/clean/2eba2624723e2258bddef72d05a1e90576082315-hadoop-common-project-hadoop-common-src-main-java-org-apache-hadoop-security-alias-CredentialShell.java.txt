HADOOP-16615. Add password check for credential provider,

Contributed by hongdongdong.

Change-Id: Iaac01bc8594860064a80c822a0e47981243ab7e1

-      "   [" + ListCommand.USAGE + "]\n";
+      "   [" + ListCommand.USAGE + "]\n" +
+      "   [" + CheckCommand.USAGE + "]\n";
+   * % hadoop credential check alias [-provider providerPath]
+      } else if (args[i].equals("check")) {
+        if (i == args.length - 1) {
+          return 1;
+        }
+        setSubCommand(new CheckCommand(args[++i]));
+  private class CheckCommand extends Command {
+    public static final String USAGE = "check <alias> [-value alias-value] " +
+        "[-provider provider-path] [-strict]";
+    public static final String DESC =
+        "The check subcommand check a password for the name\n" +
+        "specified as the <alias> argument within the provider indicated\n" +
+        "through the -provider argument. If -strict is supplied, fail\n" +
+        "immediately if the provider requires a password and none is given.\n" +
+        "If -value is provided, use that for the value of the credential\n" +
+        "instead of prompting the user.";
+
+    private String alias = null;
+
+    CheckCommand(String alias) {
+      this.alias = alias;
+    }
+
+    public boolean validate() {
+      if (alias == null) {
+        getOut().println("There is no alias specified. Please provide the" +
+            "mandatory <alias>. See the usage description with -help.");
+        return false;
+      }
+      if (alias.equals("-help")) {
+        return true;
+      }
+      try {
+        provider = getCredentialProvider();
+        if (provider == null) {
+          return false;
+        } else if (provider.needsPassword()) {
+          if (strict) {
+            getOut().println(provider.noPasswordError());
+            return false;
+          } else {
+            getOut().println(provider.noPasswordWarning());
+          }
+        }
+      } catch (IOException e) {
+        e.printStackTrace(getErr());
+      }
+      return true;
+    }
+
+    public void execute() throws IOException, NoSuchAlgorithmException {
+      if (alias.equals("-help")) {
+        doHelp();
+        return;
+      }
+      warnIfTransientProvider();
+      getOut().println("Checking aliases for CredentialProvider: " +
+          provider.toString());
+      try {
+        PasswordReader c = getPasswordReader();
+        if (c == null) {
+          throw new IOException("No console available for checking user.");
+        }
+
+        char[] password = null;
+        if (value != null) {
+          // testing only
+          password = value.toCharArray();
+        } else {
+          password = c.readPassword("Enter alias password: ");
+        }
+        char[] storePassword =
+            provider.getCredentialEntry(alias).getCredential();
+        String beMatch =
+            Arrays.equals(storePassword, password) ? "success" : "failed";
+
+        getOut().println("Password match " + beMatch + " for " +  alias + ".");
+      } catch (IOException e) {
+        getOut().println("Cannot check aliases for CredentialProvider: " +
+            provider.toString()
+            + ": " + e.getMessage());
+        throw e;
+      }
+    }
+
+    @Override
+    public String getUsage() {
+      return USAGE + ":\n\n" + DESC;
+    }
+  }
+

INS55 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS45 INS40 INS45 INS66 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS33 INS43 INS42 INS21 INS25 INS25 INS54 INS41 INS42 INS42 INS25 INS21 INS21 INS54 INS42 INS42 INS41 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 INS7 INS27 INS8 INS32 INS8 INS8 INS12 INS9 INS32 INS8 INS32 INS32 INS8 INS12 INS27 INS25 INS22 INS42 INS42 INS33 INS21 INS41 INS42 INS42 INS45 INS41 INS21 INS25 INS44 INS8 INS42 INS42 INS45 INS21 INS41 INS42 INS32 INS42 INS27 INS60 INS25 INS60 INS25 INS60 INS60 INS21 INS44 INS8 INS42 INS45 INS42 INS32 INS8 MOV25 INS52 INS42 INS32 INS9 INS9 INS7 INS27 INS8 INS25 INS43 INS42 INS21 INS32 INS42 INS45 INS32 INS43 INS59 INS27 INS8 INS5 INS59 INS27 INS8 INS8 INS5 INS59 INS43 INS59 INS32 INS43 INS42 INS21 INS53 INS2 INS42 INS45 INS25 INS21 INS32 INS42 INS27 INS42 INS32 INS42 INS33 INS41 INS32 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS39 INS85 INS42 INS33 INS42 INS33 INS21 INS21 INS39 INS85 INS42 INS32 INS42 INS42 INS16 INS32 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS27 INS8 INS32 INS42 INS45 INS45 INS42 INS9 INS42 INS42 INS25 INS42 INS42 INS32 INS42 INS14 INS7 INS7 INS32 INS42 INS32 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS27 INS42 INS27 INS41 INS42 INS14 INS42 INS8 INS8 INS42 INS43 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS40 INS34 INS34 INS43 INS2 INS21 INS41 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS32 INS9 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42