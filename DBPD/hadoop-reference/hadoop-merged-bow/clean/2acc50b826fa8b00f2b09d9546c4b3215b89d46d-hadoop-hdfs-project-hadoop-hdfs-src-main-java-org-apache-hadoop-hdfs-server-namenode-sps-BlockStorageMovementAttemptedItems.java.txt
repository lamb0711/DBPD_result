HDFS-13165: [SPS]: Collects successfully moved block details via IBR. Contributed by Rakesh R.

-import static org.apache.hadoop.util.Time.monotonicNow;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-
+import static org.apache.hadoop.util.Time.monotonicNow;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+
+import org.apache.hadoop.fs.StorageType;
+import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
+import org.apache.hadoop.hdfs.server.namenode.sps.StoragePolicySatisfier.StorageTypeNodePair;
-  private final List<Block> movementFinishedBlocks;
+  private Map<Block, Set<StorageTypeNodePair>> scheduledBlkLocs;
+  // Maintains separate Queue to keep the movement finished blocks. This Q
+  // is used to update the storageMovementAttemptedItems list asynchronously.
+  private final BlockingQueue<Block> movementFinishedBlocks;
-  private final BlockMovementListener blkMovementListener;
+  private BlockMovementListener blkMovementListener;
-    movementFinishedBlocks = new ArrayList<>();
+    scheduledBlkLocs = new HashMap<>();
+    movementFinishedBlocks = new LinkedBlockingQueue<>();
-  public void add(AttemptedItemInfo<T> itemInfo) {
+  public void add(T startPath, T file, long monotonicNow,
+      Map<Block, Set<StorageTypeNodePair>> assignedBlocks, int retryCount) {
+    AttemptedItemInfo<T> itemInfo = new AttemptedItemInfo<T>(startPath, file,
+        monotonicNow, assignedBlocks.keySet(), retryCount);
+    synchronized (scheduledBlkLocs) {
+      scheduledBlkLocs.putAll(assignedBlocks);
+    }
-   * Add the storage movement attempt finished blocks to
-   * storageMovementFinishedBlocks.
+   * Notify the storage movement attempt finished block.
-   * @param moveAttemptFinishedBlks
-   *          storage movement attempt finished blocks
+   * @param reportedDn
+   *          reported datanode
+   * @param type
+   *          storage type
+   * @param reportedBlock
+   *          reported block
-  public void notifyMovementTriedBlocks(Block[] moveAttemptFinishedBlks) {
-    if (moveAttemptFinishedBlks.length == 0) {
-      return;
+  public void notifyReportedBlock(DatanodeInfo reportedDn, StorageType type,
+      Block reportedBlock) {
+    synchronized (scheduledBlkLocs) {
+      if (scheduledBlkLocs.size() <= 0) {
+        return;
+      }
+      matchesReportedBlock(reportedDn, type, reportedBlock);
-    synchronized (movementFinishedBlocks) {
-      movementFinishedBlocks.addAll(Arrays.asList(moveAttemptFinishedBlks));
+  }
+
+  private void matchesReportedBlock(DatanodeInfo reportedDn, StorageType type,
+      Block reportedBlock) {
+    Set<StorageTypeNodePair> blkLocs = scheduledBlkLocs.get(reportedBlock);
+    if (blkLocs == null) {
+      return; // unknown block, simply skip.
-    // External listener if it is plugged-in
-    if (blkMovementListener != null) {
-      blkMovementListener.notifyMovementTriedBlocks(moveAttemptFinishedBlks);
+
+    for (StorageTypeNodePair dn : blkLocs) {
+      boolean foundDn = dn.getDatanodeInfo().compareTo(reportedDn) == 0 ? true
+          : false;
+      boolean foundType = dn.getStorageType().equals(type);
+      if (foundDn && foundType) {
+        blkLocs.remove(dn);
+        // listener if it is plugged-in
+        if (blkMovementListener != null) {
+          blkMovementListener
+              .notifyMovementTriedBlocks(new Block[] {reportedBlock});
+        }
+        // All the block locations has reported.
+        if (blkLocs.size() <= 0) {
+          movementFinishedBlocks.add(reportedBlock);
+          scheduledBlkLocs.remove(reportedBlock); // clean-up reported block
+        }
+        return; // found
+      }
+    }
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Reported block:{} not found in attempted blocks. Datanode:{}"
+          + ", StorageType:{}", reportedBlock, reportedDn, type);
-          synchronized (movementFinishedBlocks) {
-            ItemInfo<T> candidate = new ItemInfo<T>(itemInfo.getStartPath(),
-                file, itemInfo.getRetryCount() + 1);
-            blockStorageMovementNeeded.add(candidate);
-            iter.remove();
-            LOG.info("TrackID: {} becomes timed out and moved to needed "
-                + "retries queue for next iteration.", file);
-          }
+          ItemInfo<T> candidate = new ItemInfo<T>(itemInfo.getStartPath(), file,
+              itemInfo.getRetryCount() + 1);
+          blockStorageMovementNeeded.add(candidate);
+          iter.remove();
+          LOG.info("TrackID: {} becomes timed out and moved to needed "
+              + "retries queue for next iteration.", file);
-    synchronized (movementFinishedBlocks) {
-      Iterator<Block> finishedBlksIter = movementFinishedBlocks.iterator();
-      while (finishedBlksIter.hasNext()) {
-        Block blk = finishedBlksIter.next();
-        synchronized (storageMovementAttemptedItems) {
-          Iterator<AttemptedItemInfo<T>> iterator =
-              storageMovementAttemptedItems.iterator();
-          while (iterator.hasNext()) {
-            AttemptedItemInfo<T> attemptedItemInfo = iterator.next();
-            attemptedItemInfo.getBlocks().remove(blk);
-            if (attemptedItemInfo.getBlocks().isEmpty()) {
-              // TODO: try add this at front of the Queue, so that this element
-              // gets the chance first and can be cleaned from queue quickly as
-              // all movements already done.
-              blockStorageMovementNeeded.add(new ItemInfo<T>(attemptedItemInfo
-                  .getStartPath(), attemptedItemInfo.getFile(),
-                  attemptedItemInfo.getRetryCount() + 1));
-              iterator.remove();
-            }
+    // Removes all available blocks from this queue and process it.
+    Collection<Block> finishedBlks = new ArrayList<>();
+    movementFinishedBlocks.drainTo(finishedBlks);
+
+    // Update attempted items list
+    for (Block blk : finishedBlks) {
+      synchronized (storageMovementAttemptedItems) {
+        Iterator<AttemptedItemInfo<T>> iterator = storageMovementAttemptedItems
+            .iterator();
+        while (iterator.hasNext()) {
+          AttemptedItemInfo<T> attemptedItemInfo = iterator.next();
+          attemptedItemInfo.getBlocks().remove(blk);
+          if (attemptedItemInfo.getBlocks().isEmpty()) {
+            blockStorageMovementNeeded.add(new ItemInfo<T>(
+                attemptedItemInfo.getStartPath(), attemptedItemInfo.getFile(),
+                attemptedItemInfo.getRetryCount() + 1));
+            iterator.remove();
-        // Remove attempted blocks from movementFinishedBlocks list.
-        finishedBlksIter.remove();
-    return storageMovementAttemptedItems.size();
+    synchronized (storageMovementAttemptedItems) {
+      return storageMovementAttemptedItems.size();
+    }
-    synchronized (movementFinishedBlocks) {
-      movementFinishedBlocks.clear();
-    }
+    movementFinishedBlocks.clear();
+    synchronized (scheduledBlkLocs) {
+      scheduledBlkLocs.clear();
+    }
+  }
+
+  /**
+   * Sets external listener for testing.
+   *
+   * @param blkMoveListener
+   *          block movement listener callback object
+   */
+  @VisibleForTesting
+  void setBlockMovementListener(BlockMovementListener blkMoveListener) {
+    this.blkMovementListener = blkMoveListener;

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS74 INS59 UPD74 INS44 INS44 INS44 INS44 INS44 INS8 MOV29 MOV83 MOV39 UPD42 MOV42 INS44 INS44 MOV44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 MOV8 MOV8 MOV8 INS8 MOV51 INS29 INS78 INS39 INS42 INS44 INS8 INS43 MOV43 INS74 INS42 UPD43 INS43 INS21 INS43 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS39 INS42 INS60 MOV51 INS51 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 UPD42 INS51 INS43 INS42 INS43 INS42 MOV43 INS42 INS60 INS25 INS70 INS21 INS70 INS51 MOV21 INS65 INS65 INS42 INS43 INS42 INS21 INS42 INS43 INS43 UPD42 INS42 INS7 INS42 INS42 INS43 INS43 INS74 MOV74 INS59 INS42 INS8 UPD66 MOV66 INS42 INS66 INS42 UPD66 MOV66 UPD42 UPD66 INS42 INS42 INS42 INS42 INS8 INS42 INS42 INS74 INS59 INS27 INS8 INS44 INS42 INS8 INS32 UPD42 INS8 UPD74 INS32 INS44 INS42 MOV8 INS42 MOV8 UPD42 INS66 INS42 INS66 INS42 INS7 INS42 INS42 INS42 INS14 INS14 INS42 INS42 INS43 INS43 INS42 INS14 INS21 INS25 INS21 INS43 INS43 INS42 INS32 INS42 INS33 INS41 INS43 INS42 INS60 INS60 INS25 INS42 INS42 MOV60 MOV60 INS61 UPD43 UPD42 MOV14 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS42 INS21 INS22 INS42 INS74 INS74 INS42 INS42 INS74 INS42 INS42 INS42 INS32 INS42 INS32 INS27 MOV8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS27 INS8 MOV32 INS8 UPD42 INS42 INS32 INS52 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS32 INS42 INS42 INS21 INS25 INS25 INS41 UPD42 INS42 INS27 UPD42 UPD42 INS42 MOV60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS9 INS9 INS32 INS42 INS42 INS32 MOV27 INS8 INS27 INS8 INS45 INS45 MOV27 MOV8 INS32 MOV34 INS42 INS42 INS42 INS42 INS42 INS21 INS32 INS34 INS21 INS21 MOV60 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS3 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV5 INS4 INS42 DEL83 DEL42 DEL44 DEL8 DEL65 DEL40 DEL27 DEL25 DEL42 DEL32 DEL32 DEL21 DEL8 DEL51 DEL31 DEL42 DEL25 DEL8 DEL61 DEL8 DEL51 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL32 DEL61 DEL42 DEL51 DEL8