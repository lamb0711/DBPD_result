merge from trunk r1598430

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598435 13f79535-47bb-0310-9956-ffa450edef68

+import java.security.MessageDigest;
+import com.google.common.base.Preconditions;
-  
+
+  private MD5Hash calcPartialBlockChecksum(ExtendedBlock block,
+      long requestLength, DataChecksum checksum, DataInputStream checksumIn)
+      throws IOException {
+    final int bytesPerCRC = checksum.getBytesPerChecksum();
+    final int csize = checksum.getChecksumSize();
+    final byte[] buffer = new byte[4*1024];
+    MessageDigest digester = MD5Hash.getDigester();
+
+    long remaining = requestLength / bytesPerCRC * csize;
+    for (int toDigest = 0; remaining > 0; remaining -= toDigest) {
+      toDigest = checksumIn.read(buffer, 0,
+          (int) Math.min(remaining, buffer.length));
+      if (toDigest < 0) {
+        break;
+      }
+      digester.update(buffer, 0, toDigest);
+    }
+    
+    int partialLength = (int) (requestLength % bytesPerCRC);
+    if (partialLength > 0) {
+      byte[] buf = new byte[partialLength];
+      final InputStream blockIn = datanode.data.getBlockInputStream(block,
+          requestLength - partialLength);
+      try {
+        // Get the CRC of the partialLength.
+        IOUtils.readFully(blockIn, buf, 0, partialLength);
+      } finally {
+        IOUtils.closeStream(blockIn);
+      }
+      checksum.update(buf, 0, partialLength);
+      byte[] partialCrc = new byte[csize];
+      checksum.writeValue(partialCrc, 0, true);
+      digester.update(partialCrc);
+    }
+    return new MD5Hash(digester.digest());
+  }
+
-    updateCurrentThreadName("Reading metadata for block " + block);
-    final LengthInputStream metadataIn = 
-      datanode.data.getMetaDataInputStream(block);
-    final DataInputStream checksumIn = new DataInputStream(new BufferedInputStream(
-        metadataIn, HdfsConstants.IO_FILE_BUFFER_SIZE));
+    // client side now can specify a range of the block for checksum
+    long requestLength = block.getNumBytes();
+    Preconditions.checkArgument(requestLength >= 0);
+    long visibleLength = datanode.data.getReplicaVisibleLength(block);
+    boolean partialBlk = requestLength < visibleLength;
+    updateCurrentThreadName("Reading metadata for block " + block);
+    final LengthInputStream metadataIn = datanode.data
+        .getMetaDataInputStream(block);
+    
+    final DataInputStream checksumIn = new DataInputStream(
+        new BufferedInputStream(metadataIn, HdfsConstants.IO_FILE_BUFFER_SIZE));
-      final BlockMetadataHeader header = BlockMetadataHeader.readHeader(checksumIn);
-      final DataChecksum checksum = header.getChecksum(); 
+      final BlockMetadataHeader header = BlockMetadataHeader
+          .readHeader(checksumIn);
+      final DataChecksum checksum = header.getChecksum();
+      final int csize = checksum.getChecksumSize();
-      final long crcPerBlock = checksum.getChecksumSize() > 0 
-              ? (metadataIn.getLength() - BlockMetadataHeader.getHeaderSize())/checksum.getChecksumSize()
-              : 0;
-      
-      //compute block checksum
-      final MD5Hash md5 = MD5Hash.digest(checksumIn);
+      final long crcPerBlock = csize <= 0 ? 0 : 
+        (metadataIn.getLength() - BlockMetadataHeader.getHeaderSize()) / csize;
+      final MD5Hash md5 = partialBlk && crcPerBlock > 0 ? 
+          calcPartialBlockChecksum(block, requestLength, checksum, checksumIn)
+            : MD5Hash.digest(checksumIn);
-          .setCrcType(PBHelper.convert(checksum.getChecksumType()))
-          )
+          .setCrcType(PBHelper.convert(checksum.getChecksumType())))

INS26 INS26 INS40 INS40 INS31 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS24 INS60 INS25 INS41 INS60 INS21 INS60 INS60 INS42 INS42 INS42 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS5 INS59 INS43 INS59 INS39 INS59 INS58 INS27 INS7 INS8 INS39 INS59 INS27 INS8 INS14 INS39 INS59 INS32 INS39 INS59 INS39 INS59 INS42 INS32 INS42 MOV32 INS39 INS85 INS42 INS3 INS42 INS42 INS32 INS42 INS27 INS39 INS59 INS42 INS34 INS42 INS42 INS21 INS25 INS21 INS42 INS11 INS42 INS34 INS60 INS60 INS54 INS21 INS60 INS21 INS21 INS43 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS27 INS60 INS42 INS42 INS5 INS27 INS42 INS42 INS27 INS42 INS42 INS34 INS7 INS27 INS8 INS32 INS39 INS36 INS5 INS59 INS83 INS43 INS59 INS8 INS8 INS32 INS5 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS42 INS42 INS83 INS39 INS59 INS39 INS85 INS34 INS34 INS42 INS42 INS42 INS32 INS42 INS34 INS10 INS42 INS42 INS42 INS34 INS42 INS27 INS39 INS85 INS42 INS3 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS34 INS42 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS34 INS9 INS42 INS42 INS42 INS42 MOV32 MOV27 INS16 INS42 INS42 INS42 INS34 INS11 INS42 INS42 INS5 INS42 INS40 INS42 INS42 INS27 INS32 INS32 INS5 INS42 UPD27 INS27 INS32 MOV32 INS39 INS32 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS34