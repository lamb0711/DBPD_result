YARN-5355: YARN Timeline Service v.2: alpha 2 (varunsaxena)

+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+
-import org.apache.hadoop.hbase.HRegionInfo;
+import org.apache.hadoop.hbase.HBaseConfiguration;
+import org.apache.hadoop.hbase.HConstants;
+import org.apache.hadoop.hbase.client.Query;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
-import org.apache.hadoop.yarn.server.timelineservice.storage.flow.FlowRunTable;
-import java.io.IOException;
-import java.util.List;
-import java.util.Map;
-  public static boolean isFlowRunTable(HRegionInfo hRegionInfo,
-                                       Configuration conf) {
-    String regionTableName = hRegionInfo.getTable().getNameAsString();
-    String flowRunTableName = conf.get(FlowRunTable.TABLE_NAME_CONF_NAME,
-        FlowRunTable.DEFAULT_TABLE_NAME);
-    if (HBaseTimelineStorageUtils.LOG.isDebugEnabled()) {
-      HBaseTimelineStorageUtils.LOG.debug("regionTableName=" + regionTableName);
-    }
-    if (flowRunTableName.equalsIgnoreCase(regionTableName)) {
-      if (HBaseTimelineStorageUtils.LOG.isDebugEnabled()) {
-        HBaseTimelineStorageUtils.LOG.debug(
-            "table is the flow run table!! " + flowRunTableName);
-      }
-      return true;
-    }
-    return false;
-  }
-
+
+  /**
+   * @param conf Yarn configuration. Used to see if there is an explicit config
+   *          pointing to the HBase config file to read. It should not be null
+   *          or a NullPointerException will be thrown.
+   * @return a configuration with the HBase configuration from the classpath,
+   *         optionally overwritten by the timeline service configuration URL if
+   *         specified.
+   * @throws MalformedURLException if a timeline service HBase configuration URL
+   *           is specified but is a malformed URL.
+   */
+  public static Configuration getTimelineServiceHBaseConf(Configuration conf)
+      throws MalformedURLException {
+    if (conf == null) {
+      throw new NullPointerException();
+    }
+
+    Configuration hbaseConf;
+    String timelineServiceHBaseConfFileURL =
+        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);
+    if (timelineServiceHBaseConfFileURL != null
+        && timelineServiceHBaseConfFileURL.length() > 0) {
+      LOG.info("Using hbase configuration at " +
+          timelineServiceHBaseConfFileURL);
+      // create a clone so that we don't mess with out input one
+      hbaseConf = new Configuration(conf);
+      Configuration plainHBaseConf = new Configuration(false);
+      URL hbaseSiteXML = new URL(timelineServiceHBaseConfFileURL);
+      plainHBaseConf.addResource(hbaseSiteXML);
+      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);
+    } else {
+      // default to what is on the classpath
+      hbaseConf = HBaseConfiguration.create(conf);
+    }
+    return hbaseConf;
+  }
+
+  /**
+   * Given a row key prefix stored in a byte array, return a byte array for its
+   * immediate next row key.
+   *
+   * @param rowKeyPrefix The provided row key prefix, represented in an array.
+   * @return the closest next row key of the provided row key.
+   */
+  public static byte[] calculateTheClosestNextRowKeyForPrefix(
+      byte[] rowKeyPrefix) {
+    // Essentially we are treating it like an 'unsigned very very long' and
+    // doing +1 manually.
+    // Search for the place where the trailing 0xFFs start
+    int offset = rowKeyPrefix.length;
+    while (offset > 0) {
+      if (rowKeyPrefix[offset - 1] != (byte) 0xFF) {
+        break;
+      }
+      offset--;
+    }
+
+    if (offset == 0) {
+      // We got an 0xFFFF... (only FFs) stopRow value which is
+      // the last possible prefix before the end of the table.
+      // So set it to stop at the 'end of the table'
+      return HConstants.EMPTY_END_ROW;
+    }
+
+    // Copy the right length of the original
+    byte[] newStopRow = Arrays.copyOfRange(rowKeyPrefix, 0, offset);
+    // And increment the last one
+    newStopRow[newStopRow.length - 1]++;
+    return newStopRow;
+  }
+
+  /**
+   * Checks if passed object is of integral type(Short/Integer/Long).
+   *
+   * @param obj Object to be checked.
+   * @return true if object passed is of type Short or Integer or Long, false
+   * otherwise.
+   */
+  public static boolean isIntegralValue(Object obj) {
+    return (obj instanceof Short) || (obj instanceof Integer) ||
+        (obj instanceof Long);
+  }
+
+  public static void setMetricsTimeRange(Query query, byte[] metricsCf,
+      long tsBegin, long tsEnd) {
+    if (tsBegin != 0 || tsEnd != Long.MAX_VALUE) {
+      query.setColumnFamilyTimeRange(metricsCf,
+          tsBegin, ((tsEnd == Long.MAX_VALUE) ? Long.MAX_VALUE : (tsEnd + 1)));
+    }
+  }

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 INS31 INS31 INS31 INS31 INS29 MOV83 MOV83 INS43 INS42 MOV44 INS43 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS65 INS65 INS65 INS42 UPD42 MOV42 INS25 MOV60 MOV60 MOV25 INS41 INS65 INS65 INS65 INS39 INS85 INS5 INS42 INS60 INS61 INS25 INS60 INS21 INS41 INS65 INS65 INS65 INS43 INS42 INS41 INS43 INS42 INS5 INS42 INS39 INS42 INS39 INS42 MOV25 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS27 INS8 UPD43 INS27 INS8 INS42 INS66 INS66 INS42 INS66 INS66 INS39 INS85 INS39 INS59 INS27 INS8 INS27 INS8 INS5 INS59 INS37 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS27 INS42 INS39 INS85 INS27 INS42 INS33 INS53 UPD42 INS42 UPD42 INS27 INS27 INS21 INS60 INS60 INS21 INS21 INS21 INS42 INS40 INS42 INS34 INS25 INS21 INS42 INS34 INS41 INS39 INS85 INS42 INS32 INS2 INS36 INS36 INS36 INS27 INS27 INS14 UPD40 INS42 INS33 INS32 INS34 INS7 INS43 INS59 INS43 INS59 INS32 INS32 INS7 INS27 INS8 INS37 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS34 INS42 INS42 INS27 INS62 INS62 INS62 INS42 INS34 INS42 INS40 INS43 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS2 INS11 INS10 INS42 INS40 INS34 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS36 INS42 UPD45 UPD42 INS43 INS42 INS43 INS9 INS43 INS42 INS42 INS42 INS42 INS42 INS27 INS39 INS34 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS34 INS36 INS40 INS36 INS27 INS27 INS42 INS40 UPD42 MOV42 INS34 DEL39 DEL42 DEL43 DEL42 DEL44 DEL32 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL40 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL45 DEL27