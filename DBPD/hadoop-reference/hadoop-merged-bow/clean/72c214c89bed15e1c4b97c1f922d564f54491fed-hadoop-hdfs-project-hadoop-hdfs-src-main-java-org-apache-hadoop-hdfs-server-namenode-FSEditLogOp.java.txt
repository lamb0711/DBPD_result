Merge r1555021 through r1569889 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1569890 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SET_ACL;
+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclEntryScope;
+import org.apache.hadoop.fs.permission.AclEntryType;
+import org.apache.hadoop.fs.permission.FsAction;
+import org.apache.hadoop.hdfs.protocol.proto.AclProtos.AclEditLogProto;
+import org.apache.hadoop.hdfs.protocolPB.PBHelper;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+      inst.put(OP_SET_ACL, new SetAclOp());
+  private static ImmutableMap<String, FsAction> fsActionMap() {
+    ImmutableMap.Builder<String, FsAction> b = ImmutableMap.builder();
+    for (FsAction v : FsAction.values())
+      b.put(v.SYMBOL, v);
+    return b.build();
+  }
+
+  private static final ImmutableMap<String, FsAction> FSACTION_SYMBOL_MAP
+    = fsActionMap();
+
-  
+
+  private static final class AclEditLogUtil {
+    private static final int ACL_EDITLOG_ENTRY_HAS_NAME_OFFSET = 6;
+    private static final int ACL_EDITLOG_ENTRY_TYPE_OFFSET = 3;
+    private static final int ACL_EDITLOG_ENTRY_SCOPE_OFFSET = 5;
+    private static final int ACL_EDITLOG_PERM_MASK = 7;
+    private static final int ACL_EDITLOG_ENTRY_TYPE_MASK = 3;
+    private static final int ACL_EDITLOG_ENTRY_SCOPE_MASK = 1;
+
+    private static final FsAction[] FSACTION_VALUES = FsAction.values();
+    private static final AclEntryScope[] ACL_ENTRY_SCOPE_VALUES = AclEntryScope
+        .values();
+    private static final AclEntryType[] ACL_ENTRY_TYPE_VALUES = AclEntryType
+        .values();
+
+    private static List<AclEntry> read(DataInputStream in, int logVersion)
+        throws IOException {
+      if (!LayoutVersion.supports(Feature.EXTENDED_ACL, logVersion)) {
+        return null;
+      }
+
+      int size = in.readInt();
+      if (size == 0) {
+        return null;
+      }
+
+      List<AclEntry> aclEntries = Lists.newArrayListWithCapacity(size);
+      for (int i = 0; i < size; ++i) {
+        int v = in.read();
+        int p = v & ACL_EDITLOG_PERM_MASK;
+        int t = (v >> ACL_EDITLOG_ENTRY_TYPE_OFFSET)
+            & ACL_EDITLOG_ENTRY_TYPE_MASK;
+        int s = (v >> ACL_EDITLOG_ENTRY_SCOPE_OFFSET)
+            & ACL_EDITLOG_ENTRY_SCOPE_MASK;
+        boolean hasName = ((v >> ACL_EDITLOG_ENTRY_HAS_NAME_OFFSET) & 1) == 1;
+        String name = hasName ? FSImageSerialization.readString(in) : null;
+        aclEntries.add(new AclEntry.Builder().setName(name)
+            .setPermission(FSACTION_VALUES[p])
+            .setScope(ACL_ENTRY_SCOPE_VALUES[s])
+            .setType(ACL_ENTRY_TYPE_VALUES[t]).build());
+      }
+
+      return aclEntries;
+    }
+
+    private static void write(List<AclEntry> aclEntries, DataOutputStream out)
+        throws IOException {
+      if (aclEntries == null) {
+        out.writeInt(0);
+        return;
+      }
+
+      out.writeInt(aclEntries.size());
+      for (AclEntry e : aclEntries) {
+        boolean hasName = e.getName() != null;
+        int v = (e.getScope().ordinal() << ACL_EDITLOG_ENTRY_SCOPE_OFFSET)
+            | (e.getType().ordinal() << ACL_EDITLOG_ENTRY_TYPE_OFFSET)
+            | e.getPermission().ordinal();
+
+        if (hasName) {
+          v |= 1 << ACL_EDITLOG_ENTRY_HAS_NAME_OFFSET;
+        }
+        out.write(v);
+        if (hasName) {
+          FSImageSerialization.writeString(e.getName(), out);
+        }
+      }
+    }
+  }
+
+    List<AclEntry> aclEntries;
+    <T extends AddCloseOp> T setAclEntries(List<AclEntry> aclEntries) {
+      this.aclEntries = aclEntries;
+      return (T)this;
+    }
+
+        AclEditLogUtil.write(aclEntries, out);
+        aclEntries = AclEditLogUtil.read(in, logVersion);
+      builder.append(", aclEntries=");
+      builder.append(aclEntries);
+        if (aclEntries != null) {
+          appendAclEntriesToXml(contentHandler, aclEntries);
+        }
+      aclEntries = readAclEntriesFromXml(st);
+    List<AclEntry> aclEntries;
+    MkdirOp setAclEntries(List<AclEntry> aclEntries) {
+      this.aclEntries = aclEntries;
+      return this;
+    }
+
+      AclEditLogUtil.write(aclEntries, out);
+      aclEntries = AclEditLogUtil.read(in, logVersion);
+      builder.append(", aclEntries=");
+      builder.append(aclEntries);
+      if (aclEntries != null) {
+        appendAclEntriesToXml(contentHandler, aclEntries);
+      }
+      aclEntries = readAclEntriesFromXml(st);
+  static class SetAclOp extends FSEditLogOp {
+    List<AclEntry> aclEntries = Lists.newArrayList();
+    String src;
+
+    private SetAclOp() {
+      super(OP_SET_ACL);
+    }
+
+    static SetAclOp getInstance() {
+      return new SetAclOp();
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      AclEditLogProto p = AclEditLogProto.parseDelimitedFrom((DataInputStream)in);
+      src = p.getSrc();
+      aclEntries = PBHelper.convertAclEntry(p.getEntriesList());
+    }
+
+    @Override
+    public void writeFields(DataOutputStream out) throws IOException {
+      AclEditLogProto.Builder b = AclEditLogProto.newBuilder();
+      if (src != null)
+        b.setSrc(src);
+      b.addAllEntries(PBHelper.convertAclEntryProto(aclEntries));
+      b.build().writeDelimitedTo(out);
+    }
+
+    @Override
+    protected void toXml(ContentHandler contentHandler) throws SAXException {
+      XMLUtils.addSaxString(contentHandler, "SRC", src);
+      appendAclEntriesToXml(contentHandler, aclEntries);
+    }
+
+    @Override
+    void fromXml(Stanza st) throws InvalidXmlException {
+      src = st.getValue("SRC");
+      aclEntries = readAclEntriesFromXml(st);
+      if (aclEntries == null) {
+        aclEntries = Lists.newArrayList();
+      }
+    }
+  }
+
+
+  private static void fsActionToXml(ContentHandler contentHandler, FsAction v)
+      throws SAXException {
+    XMLUtils.addSaxString(contentHandler, "PERM", v.SYMBOL);
+  }
+
+  private static FsAction fsActionFromXml(Stanza st) throws InvalidXmlException {
+    FsAction v = FSACTION_SYMBOL_MAP.get(st.getValue("PERM"));
+    if (v == null)
+      throw new InvalidXmlException("Invalid value for FsAction");
+    return v;
+  }
+
+  private static void appendAclEntriesToXml(ContentHandler contentHandler,
+      List<AclEntry> aclEntries) throws SAXException {
+    for (AclEntry e : aclEntries) {
+      contentHandler.startElement("", "", "ENTRY", new AttributesImpl());
+      XMLUtils.addSaxString(contentHandler, "SCOPE", e.getScope().name());
+      XMLUtils.addSaxString(contentHandler, "TYPE", e.getType().name());
+      XMLUtils.addSaxString(contentHandler, "NAME", e.getName());
+      fsActionToXml(contentHandler, e.getPermission());
+      contentHandler.endElement("", "", "ENTRY");
+    }
+  }
+
+  private static List<AclEntry> readAclEntriesFromXml(Stanza st) {
+    List<AclEntry> aclEntries = Lists.newArrayList();
+    if (!st.hasChildren("ENTRY"))
+      return null;
+
+    List<Stanza> stanzas = st.getChildren("ENTRY");
+    for (Stanza s : stanzas) {
+      AclEntry e = new AclEntry.Builder()
+        .setScope(AclEntryScope.valueOf(s.getValue("SCOPE")))
+        .setType(AclEntryType.valueOf(s.getValue("TYPE")))
+        .setName(s.getValue("NAME"))
+        .setPermission(fsActionFromXml(s)).build();
+      aclEntries.add(e);
+    }
+    return aclEntries;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS23 INS55 INS55 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS42 INS8 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS23 INS31 INS23 INS31 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS43 INS60 INS70 INS41 INS43 INS43 INS43 INS42 INS32 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS74 INS59 INS73 INS43 INS42 INS44 INS8 INS74 INS59 INS43 INS42 INS44 INS8 INS42 INS74 INS59 INS43 INS59 INS83 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS42 INS74 INS42 INS42 INS70 INS43 INS43 INS43 INS42 INS60 INS25 INS60 INS70 INS41 INS21 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS43 INS43 INS42 INS39 INS42 INS42 INS25 INS60 INS25 INS60 INS24 INS41 INS74 INS42 INS43 INS42 INS42 INS25 INS21 INS70 INS43 INS43 INS42 INS42 INS43 INS42 INS74 INS42 INS21 INS41 INS21 INS21 INS21 INS43 INS43 INS42 INS42 INS74 INS42 INS21 INS41 INS21 INS21 INS21 INS21 INS25 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS46 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS25 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS53 INS42 INS42 INS43 INS43 INS44 INS42 INS8 INS42 INS42 INS42 INS74 INS59 INS38 INS41 INS74 INS59 INS44 INS42 INS8 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS39 INS59 INS27 INS8 INS74 INS59 INS58 INS27 INS38 INS8 INS42 INS43 INS43 INS42 INS27 INS8 INS32 INS44 INS42 INS8 INS42 INS42 INS42 INS43 INS43 INS7 INS11 INS32 INS32 INS7 INS42 INS42 INS43 INS43 INS7 INS52 INS32 INS7 INS32 INS32 INS27 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS59 INS7 INS7 INS42 INS43 INS59 INS27 INS21 INS32 INS32 INS42 INS32 INS32 INS42 INS7 INS7 INS27 INS8 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS32 INS42 INS33 INS14 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS43 INS43 INS42 INS32 INS32 INS33 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS21 INS42 INS42 INS42 INS14 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS41 INS42 INS32 INS42 INS34 INS41 INS43 INS43 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS42 INS42 INS42 INS33 INS21 INS41 INS42 INS42 INS32 INS43 INS42 INS60 INS60 INS25 INS21 INS25 INS42 INS42 INS22 INS42 INS43 INS52 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS25 INS42 INS32 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS40 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS43 INS45 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS59 INS32 INS43 INS42 INS42 INS40 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS42 INS8 INS32 INS42 INS8 INS52 INS42 INS42 INS32 INS7 INS27 INS8 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS45 INS45 INS14 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS27 INS42 INS27 INS21 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS36 INS42 INS36 INS34 INS42 INS32 INS33 INS32 INS42 INS32 INS33 INS36 INS36 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS27 INS27 INS27 INS42 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS27 INS27 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS34 INS32 INS42 INS2 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS27 INS32 INS42 INS2 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS45 INS43 INS40 INS42 INS42 INS45 INS40