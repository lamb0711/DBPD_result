HDFS-13566. Add configurable additional RPC listener to NameNode. Contributed by Chen Liang.

+   * Returns the SASL qop for the current call, if the current call is
+   * set, and the SASL negotiation is done. Otherwise return null. Note
+   * that CurCall is thread local object. So in fact, different handler
+   * threads will process different CurCall object.
+   *
+   * Also, only return for RPC calls, not supported for other protocols.
+   * @return the QOP of the current connection.
+   */
+  public static String getEstablishedQOP() {
+    Call call = CurCall.get();
+    if (call == null || !(call instanceof RpcCall)) {
+      return null;
+    }
+    RpcCall rpcCall = (RpcCall)call;
+    return rpcCall.connection.getEstablishedQOP();
+  }
+
+  /**
+  // Auxiliary listeners maintained as in a map, to allow
+  // arbitrary number of of auxiliary listeners. A map from
+  // the port to the listener binding to it.
+  private Map<Integer, Listener> auxiliaryListenerMap;
+    private int listenPort; //the port we bind at
-    public Listener() throws IOException {
+    Listener(int port) throws IOException {
-      port = acceptChannel.socket().getLocalPort(); //Could be an ephemeral port
+      //Could be an ephemeral port
+      this.listenPort = acceptChannel.socket().getLocalPort();
+      Thread.currentThread().setName("Listener at " +
+          bindAddress + "/" + this.listenPort);
-        Connection c = connectionManager.register(channel);
+        Connection c = connectionManager.register(channel, this.listenPort);
+    private int ingressPort;
-    public Connection(SocketChannel channel, long lastContact) {
+    public Connection(SocketChannel channel, long lastContact,
+        int ingressPort) {
+      this.ingressPort = ingressPort;
+    public int getIngressPort() {
+      return ingressPort;
+    }
+
+
+    public String getEstablishedQOP() {
+      // In practice, saslServer should not be null when this is
+      // called. If it is null, it must be either some
+      // configuration mistake or it is called from unit test.
+      if (saslServer == null) {
+        LOG.warn("SASL server should not be null!");
+        return null;
+      }
+      return (String)saslServer.getNegotiatedProperty(Sasl.QOP);
+    }
-                  saslPropsResolver.getServerProperties(addr);
+                  saslPropsResolver.getServerProperties(addr, ingressPort);
-      this.setName("IPC Server handler "+ instanceNumber + " on " + port);
+      this.setName("IPC Server handler "+ instanceNumber +
+          " on default port " + port);
+    this.auxiliaryListenerMap = null;
-    listener = new Listener();
-    this.port = listener.getAddress().getPort();    
+    listener = new Listener(port);
+    // set the server port to the default listener port.
+    this.port = listener.getAddress().getPort();
-  
+
+  public synchronized void addAuxiliaryListener(int auxiliaryPort)
+      throws IOException {
+    if (auxiliaryListenerMap == null) {
+      auxiliaryListenerMap = new HashMap<>();
+    }
+    if (auxiliaryListenerMap.containsKey(auxiliaryPort) && auxiliaryPort != 0) {
+      throw new IOException(
+          "There is already a listener binding to: " + auxiliaryPort);
+    }
+    Listener newListener = new Listener(auxiliaryPort);
+    // in the case of port = 0, the listener would be on a != 0 port.
+    LOG.info("Adding a server listener on port " +
+        newListener.getAddress().getPort());
+    auxiliaryListenerMap.put(newListener.getAddress().getPort(), newListener);
+  }
+
+    if (auxiliaryListenerMap != null && auxiliaryListenerMap.size() > 0) {
+      for (Listener newListener : auxiliaryListenerMap.values()) {
+        newListener.start();
+      }
+    }
+
+    if (auxiliaryListenerMap != null && auxiliaryListenerMap.size() > 0) {
+      for (Listener newListener : auxiliaryListenerMap.values()) {
+        newListener.interrupt();
+        newListener.doStop();
+      }
+    }
+
+  /**
+   * Return the set of all the configured auxiliary socket addresses NameNode
+   * RPC is listening on. If there are none, or it is not configured at all, an
+   * empty set is returned.
+   * @return the set of all the auxiliary addresses on which the
+   *         RPC server is listening on.
+   */
+  public synchronized Set<InetSocketAddress> getAuxiliaryListenerAddresses() {
+    Set<InetSocketAddress> allAddrs = new HashSet<>();
+    if (auxiliaryListenerMap != null && auxiliaryListenerMap.size() > 0) {
+      for (Listener auxListener : auxiliaryListenerMap.values()) {
+        allAddrs.add(auxListener.getAddress());
+      }
+    }
+    return allAddrs;
+  }
-    Connection register(SocketChannel channel) {
+    Connection register(SocketChannel channel, int ingressPort) {
-      Connection connection = new Connection(channel, Time.now());
+      Connection connection = new Connection(channel, Time.now(), ingressPort);

INS31 INS23 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS8 INS83 INS74 INS59 INS23 INS23 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS74 INS42 INS8 INS65 INS65 INS42 INS60 INS25 INS60 INS41 INS43 INS43 INS43 INS42 INS83 INS39 INS59 INS44 INS83 INS39 INS59 INS44 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS21 INS39 INS42 INS42 INS25 INS25 INS60 INS21 INS21 INS25 INS25 INS65 INS65 INS43 INS43 INS60 INS25 INS41 INS44 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS39 INS42 INS21 INS42 INS39 INS42 INS21 INS41 INS42 INS25 INS41 INS7 INS27 INS8 INS27 INS8 INS43 INS59 INS32 INS32 INS27 INS8 INS27 INS8 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS74 INS59 INS27 INS8 INS42 INS39 INS42 INS42 INS42 INS32 INS27 INS38 INS41 INS42 INS42 INS11 INS40 INS42 INS32 INS7 INS42 INS27 INS8 INS11 INS22 INS33 INS42 INS33 INS21 INS32 INS27 INS53 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS27 INS27 INS70 INS27 INS27 INS70 INS43 INS43 INS42 INS14 INS27 INS27 INS70 INS42 INS42 INS42 INS33 INS36 INS33 INS43 INS42 INS22 INS32 INS42 INS27 INS22 INS42 INS42 INS33 INS21 INS41 INS43 INS32 INS52 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS34 INS14 INS43 INS42 INS45 INS32 INS32 INS42 INS42 INS33 INS32 INS34 INS44 INS32 INS8 INS42 INS33 INS32 INS34 INS44 INS32 INS8 INS42 INS42 INS74 INS42 INS33 INS32 INS34 INS44 INS32 INS8 INS62 INS42 INS52 INS42 INS42 INS42 INS45 INS42 INS45 INS22 INS52 INS42 INS32 INS33 INS42 INS42 INS42 INS40 INS42 UPD45 INS42 INS14 INS43 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS21 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS43 INS52 INS42 INS42 INS42 INS45 INS74 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS22 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 DEL83 DEL42