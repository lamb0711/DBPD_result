svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832 for merging Heterogeneous Storage feature branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550363 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-import java.util.Random;
+import org.apache.hadoop.hdfs.server.protocol.DatanodeStorage;
+import org.apache.hadoop.hdfs.server.protocol.StorageReport;
-      return new SimulatedFSDataset(datanode, storage, conf);
+      return new SimulatedFSDataset(storage, conf);
+    public String getStorageUuid() {
+      return storage.getStorageUuid();
+    }
+
+    @Override
-    private long capacity;  // in bytes
+    private final String storageUuid = "SimulatedStroage-" + DatanodeStorage.generateUuid();
+
+    private final long capacity;  // in bytes
-    synchronized long getCapacity() {
+    long getCapacity() {
+
+    String getStorageUuid() {
+      return storageUuid;
+    }
+
+    synchronized StorageReport getStorageReport(String bpid) {
+      return new StorageReport(getStorageUuid(), false, getCapacity(),
+          getUsed(), getFree(), map.get(bpid).getUsed());
+    }
-  private final String storageId;
+  private final String datanodeUuid;
-  public SimulatedFSDataset(DataNode datanode, DataStorage storage,
-      Configuration conf) {
+  public SimulatedFSDataset(DataStorage storage, Configuration conf) {
-      storage.createStorageID(datanode.getXferPort());
-      this.storageId = storage.getStorageID();
+      for (int i = 0; i < storage.getNumStorageDirs(); ++i) {
+        storage.createStorageID(storage.getStorageDir(i));
+      }
+      this.datanodeUuid = storage.getDatanodeUuid();
-      this.storageId = "unknownStorageId" + new Random().nextInt();
+      this.datanodeUuid = "SimulatedDatanode-" + DataNode.generateUuid();
-    registerMBean(storageId);
+
+    registerMBean(datanodeUuid);
-  @Override
-  public synchronized BlockListAsLongs getBlockReport(String bpid) {
+  synchronized BlockListAsLongs getBlockReport(String bpid) {
+  @Override
+  public synchronized Map<DatanodeStorage, BlockListAsLongs> getBlockReports(
+      String bpid) {
+    return Collections.singletonMap(new DatanodeStorage(storage.storageUuid), getBlockReport(bpid));
+  }
+
-  public void recoverClose(ExtendedBlock b, long newGS, long expectedBlockLen)
+  public String recoverClose(ExtendedBlock b, long newGS, long expectedBlockLen)
+    return binfo.getStorageUuid();
-    return "Simulated FSDataset-" + storageId;
+    return "Simulated FSDataset-" + datanodeUuid;
-    return storageId;
+    // Caller does not care about the exact Storage UUID returned.
+    return datanodeUuid;
-  public String[] getBlockPoolList() {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public List<Block> getFinalizedBlocks(String bpid) {
+  public StorageReport[] getStorageReports(String bpid) {
+    return new StorageReport[] {storage.getStorageReport(bpid)};
+  }
+
+  @Override
+  public List<FinalizedReplica> getFinalizedBlocks(String bpid) {
+

MOV26 INS26 INS26 MOV31 UPD40 INS40 INS40 INS31 INS31 INS23 INS31 INS31 MOV78 INS83 INS83 INS74 INS42 INS44 INS8 INS43 UPD5 UPD42 INS44 UPD74 INS78 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 UPD42 INS43 INS43 INS43 INS43 INS42 INS41 INS42 INS41 UPD43 INS43 INS42 INS41 UPD43 INS42 INS42 INS41 INS42 INS42 INS27 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 UPD42 INS42 INS3 UPD42 INS32 INS45 INS32 INS42 INS42 INS14 INS24 UPD42 INS42 INS42 INS14 INS32 INS42 INS42 UPD42 INS5 INS4 INS42 INS42 INS42 INS42 INS43 INS32 INS9 INS32 INS32 INS32 INS32 INS58 INS27 INS38 INS8 INS43 INS40 INS42 INS42 INS43 INS85 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS39 INS59 INS42 INS32 INS42 MOV21 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 UPD42 UPD42 UPD42 UPD45 INS42 UPD42 UPD42 UPD42 INS42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL83 DEL39 DEL43 DEL14 DEL53