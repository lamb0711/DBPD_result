Merging r1466653 through r1467712 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1467713 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileInputStream;
+import org.apache.commons.io.IOUtils;
-import org.apache.hadoop.fs.ChecksumException;
+import org.apache.hadoop.fs.ChecksumException;
-import org.apache.hadoop.hdfs.SocketCache.SocketAndStreams;
+import org.apache.hadoop.hdfs.net.DomainPeer;
+import org.apache.hadoop.hdfs.net.Peer;
+import org.apache.hadoop.hdfs.net.TcpPeerServer;
-import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import org.apache.hadoop.net.unix.DomainSocket;
+import com.google.common.annotations.VisibleForTesting;
+
-  private final SocketCache socketCache;
-
+  @VisibleForTesting
+  static boolean tcpReadsDisabledForTesting = false;
+  private final PeerCache peerCache;
-
+  private final FileInputStreamCache fileInputStreamCache;
+
-    this.socketCache = dfsClient.socketCache;
+    this.peerCache = dfsClient.peerCache;
+    this.fileInputStreamCache = new FileInputStreamCache(
+      dfsClient.conf.getInt(DFSConfigKeys.
+        DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_SIZE_KEY,
+        DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_SIZE_DEFAULT),
+      dfsClient.conf.getLong(DFSConfigKeys.
+        DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_EXPIRY_MS_KEY,
+        DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_EXPIRY_MS_DEFAULT));
-  private synchronized boolean blockUnderConstruction() {
+  // Short circuit local reads are forbidden for files that are
+  // under construction.  See HDFS-2757.
+  synchronized boolean shortCircuitForbidden() {
-      closeBlockReader(blockReader);
+      blockReader.close(peerCache, fileInputStreamCache);
-        dfsClient.disableShortCircuit();
+        dfsClient.disableLegacyBlockReaderLocal();
-      closeBlockReader(blockReader);
+      blockReader.close(peerCache, fileInputStreamCache);
+    fileInputStreamCache.close();
-        dfsClient.disableShortCircuit();
+        dfsClient.disableLegacyBlockReaderLocal();
-          closeBlockReader(reader);
+          reader.close(peerCache, fileInputStreamCache);
-  /**
-   * Close the given BlockReader and cache its socket.
-   */
-  private void closeBlockReader(BlockReader reader) throws IOException {
-    if (reader.hasSentStatusCode()) {
-      IOStreamPair ioStreams = reader.getStreams();
-      Socket oldSock = reader.takeSocket();
-      socketCache.put(oldSock, ioStreams);
+  private Peer newTcpPeer(InetSocketAddress addr) throws IOException {
+    Peer peer = null;
+    boolean success = false;
+    Socket sock = null;
+    try {
+      sock = dfsClient.socketFactory.createSocket();
+      NetUtils.connect(sock, addr,
+        dfsClient.getRandomLocalInterfaceAddr(),
+        dfsClient.getConf().socketTimeout);
+      peer = TcpPeerServer.peerFromSocketAndKey(sock, 
+          dfsClient.getDataEncryptionKey());
+      success = true;
+      return peer;
+    } finally {
+      if (!success) {
+        IOUtils.closeQuietly(peer);
+        IOUtils.closeQuietly(sock);
+      }
-    reader.close();
+   * Throwing an IOException from this method is basically equivalent to 
+   * declaring the DataNode bad, so we try to connect a lot of different ways
+   * before doing that.
-    
-    // Can't local read a block under construction, see HDFS-2757
-    if (dfsClient.shouldTryShortCircuitRead(dnAddr) &&
-        !blockUnderConstruction()) {
-      return DFSClient.getLocalBlockReader(dfsClient.ugi, dfsClient.conf,
-          src, block, blockToken, chosenNode, dfsClient.hdfsTimeout,
-          startOffset, dfsClient.connectToDnViaHostname());
+    // Firstly, we check to see if we have cached any file descriptors for
+    // local blocks.  If so, we can just re-use those file descriptors.
+    FileInputStream fis[] = fileInputStreamCache.get(chosenNode, block);
+    if (fis != null) {
+      if (DFSClient.LOG.isDebugEnabled()) {
+        DFSClient.LOG.debug("got FileInputStreams for " + block + " from " +
+            "the FileInputStreamCache.");
+      }
+      return new BlockReaderLocal(dfsClient.conf, file,
+        block, startOffset, len, fis[0], fis[1], chosenNode, verifyChecksum);
-    IOException err = null;
-    boolean fromCache = true;
-
-    // Allow retry since there is no way of knowing whether the cached socket
-    // is good until we actually use it.
-    for (int retries = 0; retries <= nCachedConnRetry && fromCache; ++retries) {
-      SocketAndStreams sockAndStreams = null;
-      // Don't use the cache on the last attempt - it's possible that there
-      // are arbitrarily many unusable sockets in the cache, but we don't
-      // want to fail the read.
-      if (retries < nCachedConnRetry) {
-        sockAndStreams = socketCache.get(dnAddr);
-      }
-      Socket sock;
-      if (sockAndStreams == null) {
-        fromCache = false;
-
-        sock = dfsClient.socketFactory.createSocket();
-        
-        // TCP_NODELAY is crucial here because of bad interactions between
-        // Nagle's Algorithm and Delayed ACKs. With connection keepalive
-        // between the client and DN, the conversation looks like:
-        //   1. Client -> DN: Read block X
-        //   2. DN -> Client: data for block X
-        //   3. Client -> DN: Status OK (successful read)
-        //   4. Client -> DN: Read block Y
-        // The fact that step #3 and #4 are both in the client->DN direction
-        // triggers Nagling. If the DN is using delayed ACKs, this results
-        // in a delay of 40ms or more.
-        //
-        // TCP_NODELAY disables nagling and thus avoids this performance
-        // disaster.
-        sock.setTcpNoDelay(true);
-
-        NetUtils.connect(sock, dnAddr,
-            dfsClient.getRandomLocalInterfaceAddr(),
-            dfsClient.getConf().socketTimeout);
-        sock.setSoTimeout(dfsClient.getConf().socketTimeout);
-      } else {
-        sock = sockAndStreams.sock;
-      }
-
+    // If the legacy local block reader is enabled and we are reading a local
+    // block, try to create a BlockReaderLocalLegacy.  The legacy local block
+    // reader implements local reads in the style first introduced by HDFS-2246.
+    if ((dfsClient.useLegacyBlockReaderLocal()) &&
+        DFSClient.isLocalAddress(dnAddr) &&
+        (!shortCircuitForbidden())) {
-        // The OP_READ_BLOCK request is sent as we make the BlockReader
-        BlockReader reader =
-            BlockReaderFactory.newBlockReader(dfsClient.getConf(),
-                                       sock, file, block,
-                                       blockToken,
-                                       startOffset, len,
-                                       bufferSize, verifyChecksum,
-                                       clientName,
-                                       dfsClient.getDataEncryptionKey(),
-                                       sockAndStreams == null ? null : sockAndStreams.ioStreams);
+        return BlockReaderFactory.getLegacyBlockReaderLocal(dfsClient.ugi,
+            dfsClient.conf, clientName, block, blockToken, chosenNode,
+            dfsClient.hdfsTimeout, startOffset,dfsClient.connectToDnViaHostname());
+      } catch (IOException e) {
+        DFSClient.LOG.warn("error creating legacy BlockReaderLocal.  " +
+            "Disabling legacy local reads.", e);
+        dfsClient.disableLegacyBlockReaderLocal();
+      }
+    }
+
+    // Look for cached domain peers.
+    int cacheTries = 0;
+    DomainSocketFactory dsFactory = dfsClient.getDomainSocketFactory();
+    BlockReader reader = null;
+    for (; cacheTries < nCachedConnRetry; ++cacheTries) {
+      Peer peer = peerCache.get(chosenNode, true);
+      if (peer == null) break;
+      try {
+        boolean allowShortCircuitLocalReads = dfsClient.getConf().
+            shortCircuitLocalReads && (!shortCircuitForbidden());
+        reader = BlockReaderFactory.newBlockReader(
+            dfsClient.conf, file, block, blockToken, startOffset,
+            len, verifyChecksum, clientName, peer, chosenNode, 
+            dsFactory, allowShortCircuitLocalReads);
-        // Our socket is no good.
-        DFSClient.LOG.debug("Error making BlockReader. Closing stale " + sock, ex);
-        if (sockAndStreams != null) {
-          sockAndStreams.close();
-        } else {
-          sock.close();
+        DFSClient.LOG.debug("Error making BlockReader with DomainSocket. " +
+            "Closing stale " + peer, ex);
+      } finally {
+        if (reader == null) {
+          IOUtils.closeQuietly(peer);
-        err = ex;
-    throw err;
+    // Try to create a DomainPeer.
+    DomainSocket domSock = dsFactory.create(dnAddr, this);
+    if (domSock != null) {
+      Peer peer = new DomainPeer(domSock);
+      try {
+        boolean allowShortCircuitLocalReads = dfsClient.getConf().
+            shortCircuitLocalReads && (!shortCircuitForbidden());
+        reader = BlockReaderFactory.newBlockReader(
+            dfsClient.conf, file, block, blockToken, startOffset,
+            len, verifyChecksum, clientName, peer, chosenNode, 
+            dsFactory, allowShortCircuitLocalReads);
+        return reader;
+      } catch (IOException e) {
+        DFSClient.LOG.warn("failed to connect to " + domSock, e);
+      } finally {
+        if (reader == null) {
+         // If the Peer that we got the error from was a DomainPeer,
+         // mark the socket path as bad, so that newDataSocket will not try 
+         // to re-open this socket for a while.
+         dsFactory.disableDomainSocketPath(domSock.getPath());
+         IOUtils.closeQuietly(peer);
+        }
+      }
+    }
+
+    // Look for cached peers.
+    for (; cacheTries < nCachedConnRetry; ++cacheTries) {
+      Peer peer = peerCache.get(chosenNode, false);
+      if (peer == null) break;
+      try {
+        reader = BlockReaderFactory.newBlockReader(
+            dfsClient.conf, file, block, blockToken, startOffset,
+            len, verifyChecksum, clientName, peer, chosenNode, 
+            dsFactory, false);
+        return reader;
+      } catch (IOException ex) {
+        DFSClient.LOG.debug("Error making BlockReader. Closing stale " +
+          peer, ex);
+      } finally {
+        if (reader == null) {
+          IOUtils.closeQuietly(peer);
+        }
+      }
+    }
+    if (tcpReadsDisabledForTesting) {
+      throw new IOException("TCP reads are disabled.");
+    }
+    // Try to create a new remote peer.
+    Peer peer = newTcpPeer(dnAddr);
+    return BlockReaderFactory.newBlockReader(
+        dfsClient.conf, file, block, blockToken, startOffset,
+        len, verifyChecksum, clientName, peer, chosenNode, 
+        dsFactory, false);
-      if (diff <= DFSClient.TCP_WINDOW_SIZE) {
+      if (diff <= blockReader.available()) {

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS23 INS23 INS78 INS83 INS39 INS59 UPD43 INS83 INS83 INS43 INS59 UPD42 INS43 INS42 INS42 INS42 INS9 UPD42 UPD42 INS42 INS42 INS21 INS21 INS42 UPD43 UPD42 MOV60 INS60 MOV60 INS54 INS60 INS25 INS25 INS60 INS60 MOV60 INS24 MOV60 MOV25 INS24 INS25 INS60 INS41 INS7 INS32 UPD42 UPD43 INS39 INS59 MOV8 INS8 INS66 INS66 INS66 INS43 INS59 INS27 INS8 MOV27 INS8 INS39 INS59 INS43 INS59 UPD43 INS27 INS38 INS8 UPD43 UPD27 INS8 INS27 INS38 INS8 INS42 INS8 INS43 INS59 INS32 UPD40 INS22 INS14 INS42 INS42 UPD42 INS42 INS33 INS42 INS9 UPD42 INS33 INS21 INS21 INS41 INS25 INS42 INS42 INS85 INS32 INS42 INS33 INS25 INS41 INS36 INS36 INS54 UPD42 MOV42 MOV34 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 MOV42 INS42 INS60 INS25 INS54 UPD42 UPD42 INS32 UPD42 INS60 INS54 INS42 INS42 INS42 INS60 INS25 INS54 INS53 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 INS52 INS42 INS43 INS32 INS32 INS7 INS7 INS42 INS38 INS8 INS42 INS42 INS42 INS42 INS32 INS8 INS14 INS32 UPD42 UPD42 INS38 INS8 INS12 INS42 INS42 INS43 INS59 INS27 INS10 INS8 INS12 INS8 INS42 INS42 INS42 INS52 INS43 INS59 INS8 INS12 INS8 UPD43 MOV43 INS59 INS27 INS10 INS8 INS12 INS8 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS42 INS40 INS40 INS40 INS42 INS40 INS40 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 MOV42 INS32 INS42 INS9 INS42 MOV21 MOV21 INS40 INS42 INS21 INS43 INS40 INS42 INS42 INS42 INS42 INS2 INS2 INS42 INS42 INS42 INS42 MOV32 MOV41 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS60 MOV21 INS41 MOV44 INS8 INS25 INS42 INS42 INS14 INS60 MOV21 INS41 INS44 INS8 INS25 UPD42 INS42 INS32 INS42 INS33 INS21 MOV41 INS44 INS8 INS25 INS43 INS45 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 MOV32 INS32 INS42 INS42 INS34 INS42 INS34 UPD42 MOV43 INS42 INS21 INS21 INS42 INS42 INS42 INS9 INS39 INS59 INS42 INS21 INS27 INS8 INS43 INS42 INS39 INS59 INS42 INS43 INS42 INS21 INS27 INS8 INS42 INS42 INS42 INS9 INS7 INS43 INS42 MOV21 UPD27 MOV27 MOV8 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS40 INS42 INS27 UPD42 UPD42 UPD42 INS32 INS32 INS42 INS27 UPD42 INS32 INS42 INS33 INS21 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS32 INS42 UPD42 UPD42 UPD42 INS45 INS42 INS45 INS45 INS40 INS42 INS27 INS42 INS42 INS42 INS22 INS36 INS42 INS42 INS40 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS22 INS36 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS32 MOV42 MOV42 INS40 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS9 INS42 UPD42 INS42 UPD42 INS45 INS45 MOV32 INS42 INS38 INS45 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS38 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL83 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL9 DEL7 DEL21 DEL9 DEL32 DEL21 DEL42 DEL32 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL38 DEL42 DEL40 DEL8 DEL8 DEL25 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL27 DEL42 DEL38 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL33 DEL27 DEL33 DEL40 DEL16 DEL32 DEL59 DEL60 DEL8 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL53 DEL40