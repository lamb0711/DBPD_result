YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev

+import java.util.Iterator;
+  private Map<ApplicationAttemptId, MasterKey> applicationMasterKeys;
+  private Map<ContainerId, Long> activeTokens;
-    nmTokenState.applicationMasterKeys =
-        new HashMap<ApplicationAttemptId, MasterKey>();
+    applicationMasterKeys = new HashMap<ApplicationAttemptId, MasterKey>();
-    containerTokenState.activeTokens = new HashMap<ContainerId, Long>();
+    activeTokens = new HashMap<ContainerId, Long>();
+  // Recovery Iterator Implementation.
+  private class NMMemoryRecoveryIterator<T> implements RecoveryIterator<T> {
+
+    private Iterator<T> it;
+
+    NMMemoryRecoveryIterator(Iterator<T> it){
+      this.it = it;
+    }
+
+    @Override
+    public boolean hasNext() {
+      return it.hasNext();
+    }
+
+    @Override
+    public T next() throws IOException {
+      return it.next();
+    }
+
+    @Override
+    public void close() throws IOException {
+
+    }
+  }
-    state.applications = new ArrayList<ContainerManagerApplicationProto>(
-        apps.values());
+    List<ContainerManagerApplicationProto> containerList =
+        new ArrayList<ContainerManagerApplicationProto>(apps.values());
+    state.it = new NMMemoryRecoveryIterator<ContainerManagerApplicationProto>(
+        containerList.iterator());
-  public synchronized List<RecoveredContainerState> loadContainersState()
+  public RecoveryIterator<RecoveredContainerState> getContainerStateIterator()
-      RecoveredContainerState rcsCopy = new RecoveredContainerState();
+      RecoveredContainerState rcsCopy = new RecoveredContainerState(rcs.getContainerId());
-    return result;
+    return new NMMemoryRecoveryIterator<RecoveredContainerState>(
+        result.iterator());
-    RecoveredContainerState rcs = new RecoveredContainerState();
+    RecoveredContainerState rcs = new RecoveredContainerState(containerId);
+    Map<String, RecoveredUserResources> userResources =
+        new HashMap<String, RecoveredUserResources>();
-        RecoveredUserResources rur = result.userResources.get(tk.user);
+        RecoveredUserResources rur = userResources.get(tk.user);
-          result.userResources.put(tk.user, rur);
+          userResources.put(tk.user, rur);
+    result.it = new NMMemoryRecoveryIterator<Map.Entry<String, RecoveredUserResources>>(
+        userResources.entrySet().iterator());
-    result.tasks = new ArrayList<DeletionServiceDeleteTaskProto>(
-        deleteTasks.values());
+    List<DeletionServiceDeleteTaskProto> deleteTaskProtos =
+        new ArrayList<DeletionServiceDeleteTaskProto>(deleteTasks.values());
+    result.it = new NMMemoryRecoveryIterator<DeletionServiceDeleteTaskProto>(
+        deleteTaskProtos.iterator());
-    result.applicationMasterKeys =
-        new HashMap<ApplicationAttemptId, MasterKey>(
-            nmTokenState.applicationMasterKeys);
+    Map<ApplicationAttemptId, MasterKey> masterKeysMap =
+        new HashMap<ApplicationAttemptId, MasterKey>(applicationMasterKeys);
+    result.it = new NMMemoryRecoveryIterator<Map.Entry<ApplicationAttemptId, MasterKey>>(
+        masterKeysMap.entrySet().iterator());
-    nmTokenState.applicationMasterKeys.put(attempt,
+    applicationMasterKeys.put(attempt,
-    nmTokenState.applicationMasterKeys.remove(attempt);
+    applicationMasterKeys.remove(attempt);
-    result.activeTokens =
-        new HashMap<ContainerId, Long>(containerTokenState.activeTokens);
+    Map<ContainerId, Long> containersTokenMap =
+        new HashMap<ContainerId, Long>(activeTokens);
+    result.it = new NMMemoryRecoveryIterator<Map.Entry<ContainerId, Long>>(
+        containersTokenMap.entrySet().iterator());
-    containerTokenState.activeTokens.put(containerId, expirationTime);
+    activeTokens.put(containerId, expirationTime);
-    containerTokenState.activeTokens.remove(containerId);
+    activeTokens.remove(containerId);

INS26 INS40 INS23 INS23 INS55 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS42 INS73 INS74 INS23 INS31 INS31 INS31 INS31 UPD74 UPD42 MOV78 MOV43 MOV78 MOV43 INS43 INS43 INS43 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS43 INS83 INS74 INS59 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS60 UPD43 MOV60 INS60 INS21 INS60 INS60 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS74 INS42 INS21 INS42 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS74 INS59 UPD42 INS14 MOV43 INS74 INS59 INS7 INS74 INS59 INS74 INS59 INS74 INS59 INS42 INS42 INS42 INS42 INS43 INS43 INS7 INS32 INS32 INS43 INS43 INS42 MOV14 UPD40 INS14 INS60 INS74 INS32 UPD42 INS43 INS43 INS43 INS42 INS14 INS40 INS14 INS43 INS43 INS42 MOV14 UPD40 INS14 INS43 INS43 INS43 INS42 MOV14 UPD40 INS14 INS42 INS42 INS43 INS43 INS43 INS42 MOV14 UPD40 INS14 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 MOV43 INS59 INS43 INS43 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS74 INS74 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS74 INS32 INS52 INS42 INS43 INS43 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS43 INS43 INS43 INS74 INS32 INS42 INS43 INS43 INS42 INS42 INS43 INS74 INS32 INS42 INS43 INS74 INS32 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL83 DEL42 DEL42 DEL14 DEL59 DEL60 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40