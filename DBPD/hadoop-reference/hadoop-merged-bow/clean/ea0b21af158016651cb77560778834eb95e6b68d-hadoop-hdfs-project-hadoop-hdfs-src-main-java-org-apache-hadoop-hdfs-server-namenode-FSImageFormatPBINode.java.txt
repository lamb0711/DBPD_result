HDFS-5933. Optimize the FSImage layout for ACLs. Contributed by Haohui Mai.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1567785 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.permission.AclEntryScope;
+import org.apache.hadoop.fs.permission.AclEntryType;
+import org.apache.hadoop.fs.permission.FsAction;
-import org.apache.hadoop.hdfs.protocol.proto.AclProtos.AclEntryProto;
+import org.apache.hadoop.hdfs.server.namenode.FsImageProto.INodeSection.AclFeatureProto;
+
+  private static final int ACL_ENTRY_NAME_MASK = (1 << 24) - 1;
+  private static final int ACL_ENTRY_NAME_OFFSET = 6;
+  private static final int ACL_ENTRY_TYPE_OFFSET = 3;
+  private static final int ACL_ENTRY_SCOPE_OFFSET = 5;
+  private static final int ACL_ENTRY_PERM_MASK = 7;
+  private static final int ACL_ENTRY_TYPE_MASK = 3;
+  private static final int ACL_ENTRY_SCOPE_MASK = 1;
+  private static final FsAction[] FSACTION_VALUES = FsAction.values();
+  private static final AclEntryScope[] ACL_ENTRY_SCOPE_VALUES = AclEntryScope
+      .values();
+  private static final AclEntryType[] ACL_ENTRY_TYPE_VALUES = AclEntryType
+      .values();
+
-    public static ImmutableList<AclEntry> loadAclEntries(int id,
-        final ImmutableList<AclEntry>[] aclTable) {
-      return aclTable[id];
+    public static ImmutableList<AclEntry> loadAclEntries(
+        AclFeatureProto proto, final String[] stringTable) {
+      ImmutableList.Builder<AclEntry> b = ImmutableList.builder();
+      for (int v : proto.getEntriesList()) {
+        int p = v & ACL_ENTRY_PERM_MASK;
+        int t = (v >> ACL_ENTRY_TYPE_OFFSET) & ACL_ENTRY_TYPE_MASK;
+        int s = (v >> ACL_ENTRY_SCOPE_OFFSET) & ACL_ENTRY_SCOPE_MASK;
+        int nid = (v >> ACL_ENTRY_NAME_OFFSET) & ACL_ENTRY_NAME_MASK;
+        String name = stringTable[nid];
+        b.add(new AclEntry.Builder().setName(name)
+            .setPermission(FSACTION_VALUES[p])
+            .setScope(ACL_ENTRY_SCOPE_VALUES[s])
+            .setType(ACL_ENTRY_TYPE_VALUES[t]).build());
+      }
+      return b.build();
-      if (d.hasAclId()) {
-        dir.addAclFeature(new AclFeature(loadAclEntries(d.getAclId(),
-            state.getExtendedAclTable())));
+      if (d.hasAcl()) {
+        dir.addAclFeature(new AclFeature(loadAclEntries(d.getAcl(),
+            state.getStringTable())));
-      if (f.hasAclId()) {
-        file.addAclFeature(new AclFeature(loadAclEntries(f.getAclId(),
-            state.getExtendedAclTable())));
+      if (f.hasAcl()) {
+        file.addAclFeature(new AclFeature(loadAclEntries(f.getAcl(),
+            state.getStringTable())));
-    /**
-     * Get a unique id for the AclEntry list. Notice that the code does not
-     * deduplicate the list of aclentry yet.
-     */
-    private static int buildAclEntries(AclFeature f,
-        final SaverContext.DeduplicationMap<ImmutableList<AclEntryProto>> map) {
-      return map.getId(ImmutableList.copyOf(PBHelper.convertAclEntryProto(f
-          .getEntries())));
+    private static AclFeatureProto.Builder buildAclEntries(AclFeature f,
+        final SaverContext.DeduplicationMap<String> map) {
+      AclFeatureProto.Builder b = AclFeatureProto.newBuilder();
+      for (AclEntry e : f.getEntries()) {
+        int v = ((map.getId(e.getName()) & ACL_ENTRY_NAME_MASK) << ACL_ENTRY_NAME_OFFSET)
+            | (e.getType().ordinal() << ACL_ENTRY_TYPE_OFFSET)
+            | (e.getScope().ordinal() << ACL_ENTRY_SCOPE_OFFSET)
+            | (e.getPermission().ordinal());
+        b.addEntries(v);
+      }
+      return b;
-        b.setAclId(buildAclEntries(f, state.getExtendedAclMap()));
+        b.setAcl(buildAclEntries(f, state.getStringMap()));
-        b.setAclId(buildAclEntries(f, state.getExtendedAclMap()));
+        b.setAcl(buildAclEntries(f, state.getStringMap()));

MOV26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS5 INS59 INS42 INS27 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS44 INS8 INS43 INS8 INS36 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 MOV83 INS5 INS42 INS60 INS70 INS41 INS40 UPD74 INS60 INS70 INS41 INS27 INS42 INS43 INS85 INS74 INS59 INS44 INS32 INS8 INS32 UPD43 MOV43 INS43 INS59 INS44 MOV32 INS8 INS42 MOV27 MOV27 INS34 INS34 INS42 UPD43 MOV43 MOV43 INS42 INS32 INS39 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS21 INS42 INS42 UPD42 UPD42 UPD42 INS40 INS42 INS32 INS43 INS42 INS60 INS21 INS40 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS39 INS59 INS32 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 INS36 INS42 INS36 INS42 INS36 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS36 INS36 INS36 INS36 INS27 INS27 INS27 INS32 INS42 INS2 INS27 INS27 INS27 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS2 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS36 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS2 INS42 INS42 INS27 INS32 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS43 MOV42 MOV42 INS32 INS40 UPD42 MOV42 INS42 DEL39 DEL42 DEL42 DEL74 DEL85 DEL5 DEL42 DEL44 DEL2 DEL41 DEL8 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL43 DEL74 DEL32 DEL32 DEL32 DEL41 DEL8