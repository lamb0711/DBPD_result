MAPREDUCE-4807. Allow MapOutputBuffer to be pluggable. (masokan via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1422345 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.mapreduce.JobContext;
+  public Progress getSortPhase() {
+    return sortPhase;
+  }
+
+  private <KEY, VALUE> MapOutputCollector<KEY, VALUE>
+          createSortingCollector(JobConf job, TaskReporter reporter)
+    throws IOException, ClassNotFoundException {
+    MapOutputCollector<KEY, VALUE> collector
+      = (MapOutputCollector<KEY, VALUE>)
+       ReflectionUtils.newInstance(
+                        job.getClass(JobContext.MAP_OUTPUT_COLLECTOR_CLASS_ATTR,
+                        MapOutputBuffer.class, MapOutputCollector.class), job);
+    LOG.info("Map output collector class = " + collector.getClass().getName());
+    MapOutputCollector.Context context =
+                           new MapOutputCollector.Context(this, job, reporter);
+    collector.init(context);
+    return collector;
+  }
+
+  @SuppressWarnings("unchecked")
-    MapOutputCollector collector = null;
+    MapOutputCollector<OUTKEY, OUTVALUE> collector = null;
-      collector = new MapOutputBuffer(umbilical, job, reporter);
+      collector = createSortingCollector(job, reporter);
-      collector = new DirectMapOutputCollector(umbilical, job, reporter);
+      collector = new DirectMapOutputCollector<OUTKEY, OUTVALUE>();
+       MapOutputCollector.Context context =
+                           new MapOutputCollector.Context(this, job, reporter);
+      collector.init(context);
-      collector = new MapOutputBuffer<K,V>(umbilical, job, reporter);
+      collector = createSortingCollector(job, reporter);
-  interface MapOutputCollector<K, V> {
-
-    public void collect(K key, V value, int partition
-                        ) throws IOException, InterruptedException;
-    public void close() throws IOException, InterruptedException;
-    
-    public void flush() throws IOException, InterruptedException, 
-                               ClassNotFoundException;
-        
-  }
-
-    private final Counters.Counter mapOutputRecordCounter;
-    private final Counters.Counter fileOutputByteCounter;
-    private final List<Statistics> fsStats;
+    private Counters.Counter mapOutputRecordCounter;
+    private Counters.Counter fileOutputByteCounter;
+    private List<Statistics> fsStats;
+
+    public DirectMapOutputCollector() {
+    }
-    public DirectMapOutputCollector(TaskUmbilicalProtocol umbilical,
-        JobConf job, TaskReporter reporter) throws IOException {
-      this.reporter = reporter;
+    public void init(MapOutputCollector.Context context
+                    ) throws IOException, ClassNotFoundException {
+      this.reporter = context.getReporter();
+      JobConf job = context.getJobConf();
-  private class MapOutputBuffer<K extends Object, V extends Object>
+  @InterfaceAudience.LimitedPrivate({"MapReduce"})
+  @InterfaceStability.Unstable
+  public static class MapOutputBuffer<K extends Object, V extends Object>
-    final int partitions;
-    final JobConf job;
-    final TaskReporter reporter;
-    final Class<K> keyClass;
-    final Class<V> valClass;
-    final RawComparator<K> comparator;
-    final SerializationFactory serializationFactory;
-    final Serializer<K> keySerializer;
-    final Serializer<V> valSerializer;
-    final CombinerRunner<K,V> combinerRunner;
-    final CombineOutputCollector<K, V> combineCollector;
+    private int partitions;
+    private JobConf job;
+    private TaskReporter reporter;
+    private Class<K> keyClass;
+    private Class<V> valClass;
+    private RawComparator<K> comparator;
+    private SerializationFactory serializationFactory;
+    private Serializer<K> keySerializer;
+    private Serializer<V> valSerializer;
+    private CombinerRunner<K,V> combinerRunner;
+    private CombineOutputCollector<K, V> combineCollector;
-    final CompressionCodec codec;
+    private CompressionCodec codec;
-    final IntBuffer kvmeta; // metadata overlay on backing store
+    private IntBuffer kvmeta; // metadata overlay on backing store
-    final int maxRec;
-    final int softLimit;
+    private int maxRec;
+    private int softLimit;
-    final int minSpillsForCombine;
-    final IndexedSorter sorter;
+    private int minSpillsForCombine;
+    private IndexedSorter sorter;
-    final FileSystem rfs;
+    private FileSystem rfs;
-    final Counters.Counter mapOutputByteCounter;
-    final Counters.Counter mapOutputRecordCounter;
-    final Counters.Counter fileOutputByteCounter;
+    private Counters.Counter mapOutputByteCounter;
+    private Counters.Counter mapOutputRecordCounter;
+    private Counters.Counter fileOutputByteCounter;
+    private MapTask mapTask;
+    private MapOutputFile mapOutputFile;
+    private Progress sortPhase;
+    private Counters.Counter spilledRecordsCounter;
+
+    public MapOutputBuffer() {
+    }
+
-    public MapOutputBuffer(TaskUmbilicalProtocol umbilical, JobConf job,
-                           TaskReporter reporter
-                           ) throws IOException, ClassNotFoundException {
-      this.job = job;
-      this.reporter = reporter;
+    public void init(MapOutputCollector.Context context
+                    ) throws IOException, ClassNotFoundException {
+      job = context.getJobConf();
+      reporter = context.getReporter();
+      mapTask = context.getMapTask();
+      mapOutputFile = mapTask.getMapOutputFile();
+      sortPhase = mapTask.getSortPhase();
+      spilledRecordsCounter = reporter.getCounter(TaskCounter.SPILLED_RECORDS);
-        combineCollector= new CombineOutputCollector<K,V>(combineOutputCounter, reporter, conf);
+        combineCollector= new CombineOutputCollector<K,V>(combineOutputCounter, reporter, job);
+    private TaskAttemptID getTaskID() {
+      return mapTask.getTaskID();
+    }
+
-          reportFatalError(getTaskID(), lspillException, logMsg);
+          mapTask.reportFatalError(getTaskID(), lspillException, logMsg);

INS26 INS40 INS31 INS31 MOV23 MOV23 INS83 INS43 INS42 INS8 INS79 INS83 INS73 INS73 INS74 INS42 MOV44 MOV44 MOV43 UPD43 MOV43 INS8 INS23 INS31 INS79 INS78 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS31 INS31 INS42 INS41 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS43 UPD42 INS60 INS21 INS60 INS21 INS41 MOV43 MOV83 MOV43 MOV59 INS83 INS42 INS8 INS39 UPD42 MOV43 INS40 INS4 INS40 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 INS83 MOV43 MOV59 INS83 MOV43 MOV59 INS83 INS43 INS59 INS83 INS43 INS59 UPD83 INS43 INS59 UPD83 INS43 INS59 INS83 INS42 INS8 INS39 UPD42 INS83 INS43 INS42 INS8 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS74 INS59 INS32 INS43 INS59 INS32 INS42 INS74 UPD43 UPD42 INS60 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 UPD43 UPD42 INS21 INS21 INS21 INS21 INS42 INS41 INS43 INS43 INS43 INS42 INS11 INS42 INS42 INS27 INS40 INS42 INS14 INS42 INS42 INS42 INS43 INS43 INS43 INS60 INS21 INS40 INS43 INS59 INS40 INS7 INS7 INS7 INS7 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS74 INS32 INS45 INS32 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS32 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS40 INS57 INS57 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS52 INS42 INS42 MOV43 MOV43 MOV43 INS43 INS43 INS40 UPD42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL14 DEL42 DEL73 DEL73 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL31 DEL83 DEL39 DEL42 DEL43 DEL43 DEL31 DEL83 DEL39 DEL42 DEL43 DEL43 DEL31 DEL55 DEL83 DEL83 DEL23 DEL83 DEL42 DEL42 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42