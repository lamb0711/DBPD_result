YARN-9008. Extend YARN distributed shell with file localization feature. (Contributed by Peter Bacsko)

+import java.io.UncheckedIOException;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+  private ApplicationId appId;
+  private String appName;
+
+  private List<String> localizableFiles = new ArrayList<>();
+
+    opts.addOption("appname", true,
+        "Application Name. Default value - DistributedShell");
+    opts.addOption("localized_files", true, "List of localized files");
+    appName = cliParser.getOptionValue("appname", "DistributedShell");
+
+      appId = appAttemptID.getApplicationId();
+    if (cliParser.hasOption("localized_files")) {
+      String localizedFilesArg = cliParser.getOptionValue("localized_files");
+      if (localizedFilesArg.contains(",")) {
+        String[] files = localizedFilesArg.split(",");
+        localizableFiles = Arrays.asList(files);
+      } else {
+        localizableFiles.add(localizedFilesArg);
+      }
+    }
+
+  public static String getRelativePath(String appName,
+      String appId, String fileDstPath) {
+    return appName + "/" + appId + "/" + fileDstPath;
+  }
+
+      // Set up localization for the container which runs the command
+      if (localizableFiles.size() > 0) {
+        FileSystem fs;
+        try {
+          fs = FileSystem.get(conf);
+        } catch (IOException e) {
+          throw new UncheckedIOException("Cannot get FileSystem", e);
+        }
+
+        localizableFiles.stream().forEach(fileName -> {
+          try {
+            String relativePath =
+                getRelativePath(appName, appId.toString(), fileName);
+            Path dst =
+                new Path(fs.getHomeDirectory(), relativePath);
+            FileStatus fileStatus = fs.getFileStatus(dst);
+            LocalResource localRes = LocalResource.newInstance(
+                URL.fromURI(dst.toUri()),
+                LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,
+                fileStatus.getLen(), fileStatus.getModificationTime());
+            LOG.info("Setting up file for localization: " + dst);
+            localResources.put(fileName, localRes);
+          } catch (IOException e) {
+            throw new UncheckedIOException(
+                "Error during localization setup", e);
+          }
+        });
+      }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS21 INS21 INS21 INS25 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS74 INS32 INS32 INS7 INS32 INS8 INS42 INS42 INS42 INS27 INS25 INS43 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS45 INS9 INS45 INS42 INS32 INS21 INS42 INS42 INS45 INS60 INS25 INS42 INS45 INS42 INS45 INS42 INS27 INS8 INS42 INS42 INS42 INS45 INS45 INS7 INS43 INS59 INS32 INS8 INS8 INS32 INS34 INS60 INS54 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS60 INS21 INS21 INS42 INS42 INS43 INS59 INS8 INS12 INS32 INS42 INS42 INS42 INS42 INS45 INS5 INS59 INS7 INS32 INS42 INS42 INS21 INS44 INS8 INS32 INS42 INS86 INS43 INS85 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS42 INS42 INS59 INS8 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS54 INS42 INS42 INS42 INS43 INS45 INS42 INS8 INS12 INS42 INS60 INS60 INS60 INS60 INS21 INS21 INS44 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS40 INS32 INS32 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42