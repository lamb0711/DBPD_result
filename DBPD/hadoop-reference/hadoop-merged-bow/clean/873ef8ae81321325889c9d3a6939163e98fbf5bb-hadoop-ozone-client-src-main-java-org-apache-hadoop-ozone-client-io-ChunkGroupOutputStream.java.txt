HDDS-263. Add retries in Ozone Client to handle BlockNotCommitted Exception. Contributed by Shashikant Banerjee.

+import org.apache.hadoop.io.retry.RetryPolicy;
+import java.io.InterruptedIOException;
-  private static final Logger LOG =
+  public static final Logger LOG =
+  private final RetryPolicy retryPolicy;
+    retryPolicy = null;
-      ReplicationType type) throws IOException {
+      ReplicationType type, RetryPolicy retryPolicy) throws IOException {
+    this.retryPolicy = retryPolicy;
+  private long getCommittedBlockLength(ChunkOutputStreamEntry streamEntry)
+      throws IOException {
+    long blockLength;
+    ContainerProtos.GetCommittedBlockLengthResponseProto responseProto;
+    RetryPolicy.RetryAction action;
+    int numRetries = 0;
+
+    // TODO : At this point of time, we also need to allocate new blocks
+    // from a different container and may need to nullify
+    // all the remaining pre-allocated blocks in case they were
+    // pre-allocated on the same container which got closed now.This needs
+    // caching the closed container list on the client itself.
+    while (true) {
+      try {
+        responseProto = ContainerProtocolCalls
+            .getCommittedBlockLength(streamEntry.xceiverClient,
+                streamEntry.blockID, requestID);
+        blockLength = responseProto.getBlockLength();
+        return blockLength;
+      } catch (StorageContainerException sce) {
+        try {
+          action = retryPolicy.shouldRetry(sce, numRetries, 0, true);
+        } catch (Exception e) {
+          throw e instanceof IOException ? (IOException) e : new IOException(e);
+        }
+        if (action.action == RetryPolicy.RetryAction.RetryDecision.FAIL) {
+          if (action.reason != null) {
+            LOG.error(
+                "GetCommittedBlockLength request failed. " + action.reason,
+                sce);
+          }
+          throw sce;
+        }
+
+        // Throw the exception if the thread is interrupted
+        if (Thread.currentThread().isInterrupted()) {
+          LOG.warn("Interrupted while trying for connection");
+          throw sce;
+        }
+        Preconditions.checkArgument(
+            action.action == RetryPolicy.RetryAction.RetryDecision.RETRY);
+        try {
+          Thread.sleep(action.delayMillis);
+        } catch (InterruptedException e) {
+          throw (IOException) new InterruptedIOException(
+              "Interrupted: action=" + action + ", retry policy=" + retryPolicy)
+              .initCause(e);
+        }
+        numRetries++;
+        LOG.trace("Retrying GetCommittedBlockLength request. Already tried "
+            + numRetries + " time(s); retry policy is " + retryPolicy);
+        continue;
+      }
+    }
+  }
+
-    // TODO : If the block is still not committed and is in the
-    // pending openBlock Map, it will return BLOCK_NOT_COMMITTED
-    // exception. We should handle this by retrying the same operation
-    // n times and update the OzoneManager with the actual block length
-    // written. At this point of time, we also need to allocate new blocks
-    // from a different container and may need to nullify
-    // all the remaining pre-allocated blocks in case they were
-    // pre-allocated on the same container which got closed now.This needs
-    // caching the closed container list on the client itself.
-      ContainerProtos.GetCommittedBlockLengthResponseProto responseProto =
-          ContainerProtocolCalls
-              .getCommittedBlockLength(streamEntry.xceiverClient,
-                  streamEntry.blockID, requestID);
-      committedLength = responseProto.getBlockLength();
+      committedLength = getCommittedBlockLength(streamEntry);
+    private RetryPolicy retryPolicy;
-          omClient, chunkSize, requestID, factor, type);
+          omClient, chunkSize, requestID, factor, type, retryPolicy);
+
+    public Builder setRetryPolicy(RetryPolicy rPolicy) {
+      this.retryPolicy = rPolicy;
+      return this;
+    }
+

INS26 INS26 INS40 INS40 INS23 INS31 UPD83 INS83 INS83 INS43 INS59 INS44 INS83 INS39 INS42 INS44 INS43 INS8 INS23 INS31 INS42 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS61 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS8 INS7 INS42 INS7 INS42 INS39 INS59 MOV43 INS59 INS43 INS59 INS39 INS59 INS9 INS8 INS8 INS42 INS42 INS42 INS43 INS42 INS21 INS41 INS42 INS33 INS22 INS42 INS42 INS42 INS40 INS42 INS42 INS34 INS54 INS21 MOV21 INS42 INS7 INS52 INS52 INS42 MOV8 INS12 INS7 INS42 INS22 INS42 INS21 INS41 INS44 INS8 INS42 INS32 INS52 INS42 INS7 INS42 INS43 INS42 INS54 INS25 INS25 INS21 INS54 INS21 INS21 INS18 INS42 INS42 INS42 MOV32 UPD42 INS42 INS8 INS12 INS27 INS8 INS32 INS8 INS32 INS8 INS12 INS37 INS32 INS21 INS44 INS8 INS40 INS40 INS25 INS53 INS32 INS42 INS21 INS53 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS42 INS27 INS7 INS43 INS42 INS53 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS40 INS40 INS32 INS43 INS42 INS53 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS16 INS40 INS33 INS21 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS11 INS42 INS42 INS42 INS42 INS34 INS9 INS62 INS11 INS14 INS32 INS43 INS32 INS42 INS43 INS43 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS40 INS43 INS27 INS42 INS45 INS42 INS45 INS42 DEL42 DEL59 DEL60