HDFS-7703. Support favouredNodes for the append for new blocks ( Contributed by Vinayakumar B)

+    final DFSOutputStream result = DFSOutputStream.newStreamForCreate(this,
+        src, masked, flag, createParent, replication, blockSize, progress,
+        buffersize, dfsClientConf.createChecksum(checksumOpt),
+        getFavoredNodesStr(favoredNodes));
+    beginFileLease(result.getFileId(), result);
+    return result;
+  }
+
+  private String[] getFavoredNodesStr(InetSocketAddress[] favoredNodes) {
-    final DFSOutputStream result = DFSOutputStream.newStreamForCreate(this,
-        src, masked, flag, createParent, replication, blockSize, progress,
-        buffersize, dfsClientConf.createChecksum(checksumOpt),
-        favoredNodeStrs);
-    beginFileLease(result.getFileId(), result);
-    return result;
+    return favoredNodeStrs;
-      return callAppend(src, buffersize, flag, progress);
+      return callAppend(src, buffersize, flag, progress, null);
-      EnumSet<CreateFlag> flag, Progressable progress) throws IOException {
+      EnumSet<CreateFlag> flag, Progressable progress, String[] favoredNodes)
+      throws IOException {
-          blkWithStatus.getFileStatus(), dfsClientConf.createChecksum());
+          blkWithStatus.getFileStatus(), dfsClientConf.createChecksum(), favoredNodes);
-    final DFSOutputStream out = append(src, buffersize, flag, progress);
+    final DFSOutputStream out = append(src, buffersize, flag, null, progress);
+    return createWrappedOutputStream(out, statistics, out.getInitialLen());
+  }
+
+  /**
+   * Append to an existing HDFS file.
+   * 
+   * @param src file name
+   * @param buffersize buffer size
+   * @param flag indicates whether to append data to a new block instead of the
+   *          last block
+   * @param progress for reporting write-progress; null is acceptable.
+   * @param statistics file system statistics; null is acceptable.
+   * @param favoredNodes FavoredNodes for new blocks
+   * @return an output stream for writing into the file
+   * @see ClientProtocol#append(String, String, EnumSetWritable)
+   */
+  public HdfsDataOutputStream append(final String src, final int buffersize,
+      EnumSet<CreateFlag> flag, final Progressable progress,
+      final FileSystem.Statistics statistics,
+      final InetSocketAddress[] favoredNodes) throws IOException {
+    final DFSOutputStream out = append(src, buffersize, flag,
+        getFavoredNodesStr(favoredNodes), progress);
-      EnumSet<CreateFlag> flag, Progressable progress) throws IOException {
+      EnumSet<CreateFlag> flag, String[] favoredNodes, Progressable progress)
+      throws IOException {
-    final DFSOutputStream result = callAppend(src, buffersize, flag, progress);
+    final DFSOutputStream result = callAppend(src, buffersize, flag, progress,
+        favoredNodes);

INS31 INS31 INS8 INS83 INS5 INS42 INS44 MOV8 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 MOV43 INS42 INS44 MOV21 MOV25 MOV60 MOV25 INS60 MOV21 MOV41 INS43 INS85 INS5 INS42 INS41 INS5 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS74 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS5 INS42 INS42 INS60 INS41 INS5 INS42 INS83 MOV43 INS59 INS42 INS43 INS85 INS42 INS43 INS85 MOV43 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS68 INS42 INS43 INS43 INS42 INS40 INS43 INS85 INS83 MOV43 INS59 INS32 INS43 INS85 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS69 INS69 INS69 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS32 INS33 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL42 DEL42 DEL52 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42