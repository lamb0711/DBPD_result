HDFS-12773. RBF: Improve State Store FS implementation. Contributed by Inigo Goiri.

-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.LinkedList;
+import java.util.List;
-import org.apache.hadoop.hdfs.server.federation.store.StateStoreUtils;
-  /** Synchronization. */
-  private static final ReadWriteLock READ_WRITE_LOCK =
-      new ReentrantReadWriteLock();
-
+  protected boolean rename(String src, String dst) {
+    try {
+      Files.move(new File(src), new File(dst));
+      return true;
+    } catch (IOException e) {
+      LOG.error("Cannot rename {} to {}", src, dst, e);
+      return false;
+    }
+  }
+
+  @Override
+  protected boolean remove(String path) {
+    File file = new File(path);
+    return file.delete();
+  }
+
+  @Override
+        LOG.warn("The root directory is not available, using {}", dir);
-  protected <T extends BaseRecord> void lockRecordWrite(Class<T> recordClass) {
-    // TODO - Synchronize via FS
-    READ_WRITE_LOCK.writeLock().lock();
-  }
-
-  @Override
-  protected <T extends BaseRecord> void unlockRecordWrite(
-      Class<T> recordClass) {
-    // TODO - Synchronize via FS
-    READ_WRITE_LOCK.writeLock().unlock();
-  }
-
-  @Override
-  protected <T extends BaseRecord> void lockRecordRead(Class<T> recordClass) {
-    // TODO - Synchronize via FS
-    READ_WRITE_LOCK.readLock().lock();
-  }
-
-  @Override
-  protected <T extends BaseRecord> void unlockRecordRead(Class<T> recordClass) {
-    // TODO - Synchronize via FS
-    READ_WRITE_LOCK.readLock().unlock();
-  }
-
-  @Override
-  protected <T extends BaseRecord> BufferedReader getReader(
-      Class<T> clazz, String sub) {
-    String filename = StateStoreUtils.getRecordName(clazz);
-    if (sub != null && sub.length() > 0) {
-      filename += "/" + sub;
-    }
-    filename += "/" + getDataFileName();
-
+  protected <T extends BaseRecord> BufferedReader getReader(String filename) {
+    BufferedReader reader = null;
-      File file = new File(getRootDir(), filename);
+      File file = new File(filename);
-      BufferedReader reader = new BufferedReader(isr);
-      return reader;
+      reader = new BufferedReader(isr);
-      LOG.error(
-          "Cannot open read stream for record {}", clazz.getSimpleName(), ex);
-      return null;
+      LOG.error("Cannot open read stream for record {}", filename, ex);
+    return reader;
-  protected <T extends BaseRecord> BufferedWriter getWriter(
-      Class<T> clazz, String sub) {
-    String filename = StateStoreUtils.getRecordName(clazz);
-    if (sub != null && sub.length() > 0) {
-      filename += "/" + sub;
-    }
-    filename += "/" + getDataFileName();
-
+  protected <T extends BaseRecord> BufferedWriter getWriter(String filename) {
+    BufferedWriter writer = null;
-      File file = new File(getRootDir(), filename);
+      LOG.debug("Writing file: {}", filename);
+      File file = new File(filename);
-      BufferedWriter writer = new BufferedWriter(osw);
-      return writer;
-    } catch (IOException ex) {
-      LOG.error(
-          "Cannot open read stream for record {}", clazz.getSimpleName(), ex);
-      return null;
+      writer = new BufferedWriter(osw);
+    } catch (IOException e) {
+      LOG.error("Cannot open write stream for record {}", filename, e);
+    return writer;
+
+  @Override
+  protected List<String> getChildren(String path) {
+    List<String> ret = new LinkedList<>();
+    File dir = new File(path);
+    File[] files = dir.listFiles();
+    if (files != null) {
+      for (File file : files) {
+        String filename = file.getName();
+        ret.add(filename);
+      }
+    }
+    return ret;
+  }

MOV31 UPD40 UPD40 INS31 INS31 MOV78 INS83 INS39 INS42 INS44 INS44 INS8 MOV78 INS39 INS42 INS44 INS8 MOV78 MOV83 INS74 UPD42 MOV42 INS44 INS8 INS43 INS42 INS43 INS42 INS54 INS43 INS42 INS60 INS41 UPD42 MOV41 MOV43 INS42 MOV41 INS43 INS43 MOV43 INS42 INS60 INS60 INS60 INS25 INS41 UPD42 MOV42 UPD42 MOV42 INS8 INS12 UPD42 MOV42 INS43 INS59 INS32 MOV43 MOV43 INS42 UPD42 MOV42 INS74 INS59 INS43 INS59 INS5 INS59 INS27 INS8 INS42 INS21 INS41 INS44 INS8 UPD42 MOV42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 INS33 INS21 UPD42 INS33 INS21 INS21 UPD43 MOV43 UPD43 MOV43 INS42 INS14 INS42 INS42 INS14 MOV43 INS85 INS42 INS32 INS42 INS33 INS70 INS32 INS9 INS43 UPD42 MOV42 MOV21 INS41 INS43 INS42 INS43 INS7 INS32 MOV43 INS7 UPD42 UPD42 UPD42 INS74 INS43 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS14 INS14 UPD42 MOV42 INS9 UPD42 MOV42 INS21 INS42 INS42 MOV14 INS42 INS42 INS45 INS42 INS42 MOV14 INS43 UPD42 MOV42 MOV43 INS42 INS60 MOV21 INS43 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 INS42 INS42 INS32 INS43 UPD42 MOV42 MOV43 UPD45 UPD42 MOV42 UPD42 INS42 MOV43 INS59 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL43 DEL42 DEL43 DEL14 DEL59 DEL23 DEL32 DEL83 DEL42 DEL43 DEL73 DEL39 DEL42 DEL43 DEL43 DEL74 DEL44 DEL8 DEL31 DEL42 DEL43 DEL73 DEL39 DEL42 DEL43 DEL43 DEL74 DEL42 DEL44 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL78 DEL42 DEL43 DEL73 DEL39 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL73 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL45 DEL42 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL45 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL32 DEL33 DEL41 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL45 DEL42 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL45 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL32 DEL33 DEL41 DEL32