HDFS-12282. Ozone: DeleteKey-4: Block delete via HB between SCM and DN. Contributed by Weiwei Yang.

+import org.apache.hadoop.ozone.protocol.commands.DeleteBlocksCommand;
+import org.apache.hadoop.ozone.protocol.proto.StorageContainerDatanodeProtocolProtos.ContainerBlocksDeletionACKProto.DeleteBlockTransactionResult;
+import org.apache.hadoop.ozone.protocol.proto.StorageContainerDatanodeProtocolProtos.ContainerBlocksDeletionACKProto;
+import org.apache.hadoop.ozone.protocol.proto.StorageContainerDatanodeProtocolProtos.ContainerBlocksDeletionACKResponseProto;
+import java.util.Collections;
+import java.util.stream.Collectors;
-  public static SCMCommandResponseProto getCommandResponse(SCMCommand cmd)
-      throws InvalidProtocolBufferException {
+  public SCMCommandResponseProto getCommandResponse(SCMCommand cmd)
+      throws IOException {
+    case deleteBlocksCommand:
+      // Once SCM sends out the deletion message, increment the count.
+      // this is done here instead of when SCM receives the ACK, because
+      // DN might not be able to response the ACK for sometime. In case
+      // it times out, SCM needs to re-send the message some more times.
+      List<Long> txs = ((DeleteBlocksCommand) cmd).blocksTobeDeleted()
+          .stream().map(tx -> tx.getTxID()).collect(Collectors.toList());
+      this.getScmBlockManager().getDeletedBlockLog().incrementCount(txs);
+      return builder.setCmdType(Type.deleteBlocksCommand)
+          .setDeleteBlocksProto(((DeleteBlocksCommand) cmd).getProto())
+          .build();
+    scmBlockManager.start();
+    try {
+      LOG.info("Stopping Block Manager Service.");
+      scmBlockManager.stop();
+    } catch (Exception ex) {
+      LOG.error("SCM block manager service stop failed.", ex);
+    }
+
+   * Handles the block deletion ACKs sent by datanodes. Once ACKs recieved,
+   * SCM considers the blocks are deleted and update the metadata in SCM DB.
+   *
+   * @param acks
+   * @return
+   * @throws IOException
+   */
+  @Override
+  public ContainerBlocksDeletionACKResponseProto sendContainerBlocksDeletionACK(
+      ContainerBlocksDeletionACKProto acks) throws IOException {
+    if (acks.getResultsCount() > 0) {
+      List<DeleteBlockTransactionResult> resultList = acks.getResultsList();
+      for (DeleteBlockTransactionResult result : resultList) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Got block deletion ACK from datanode, TXIDs={}, "
+                  + "success={}", result.getTxID(), result.getSuccess());
+        }
+        if (result.getSuccess()) {
+          LOG.info("Purging TXID={} from block deletion log", result.getTxID());
+          this.getScmBlockManager().getDeletedBlockLog()
+              .commitTransactions(Collections.singletonList(result.getTxID()));
+        } else {
+          LOG.warn("Got failed ACK for TXID={}, prepare to resend the "
+              + "TX in next interval", result.getTxID());
+        }
+      }
+    }
+    return ContainerBlocksDeletionACKResponseProto.newBuilder()
+        .getDefaultInstanceForType();
+  }
+
+  /**
+  @VisibleForTesting
+  public BlockManager getScmBlockManager() {
+    return scmBlockManager;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 UPD43 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 UPD42 INS21 INS54 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS42 INS25 INS41 INS42 INS42 INS41 INS60 INS21 INS41 INS49 INS32 INS8 INS12 INS66 INS66 INS42 INS42 INS42 INS27 INS8 INS32 INS42 INS42 INS74 INS59 INS32 INS32 INS42 INS42 INS21 INS21 INS44 INS8 INS32 INS34 INS60 INS70 INS32 INS42 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS43 INS42 INS21 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS25 INS32 INS42 INS86 INS42 INS42 INS52 INS42 INS42 INS42 INS40 INS36 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS8 INS8 INS32 INS42 INS59 INS32 INS11 INS42 INS42 INS21 INS42 INS42 INS21 INS21 INS21 INS36 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS32 INS32 INS32 INS11 INS42 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS45 INS32 INS32 INS42 INS32 INS42 INS42 INS27 INS32 INS43 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS42 INS52 INS42 INS42 INS42 DEL83