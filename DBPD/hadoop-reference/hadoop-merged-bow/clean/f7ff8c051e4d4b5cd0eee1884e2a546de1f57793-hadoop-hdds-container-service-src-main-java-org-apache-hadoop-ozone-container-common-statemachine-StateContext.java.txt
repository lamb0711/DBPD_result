HDDS-325. Add event watcher for delete blocks command. Contributed by Lokesh Jain.

+    .StorageContainerDatanodeProtocolProtos.SCMCommandProto.Type;
+import org.apache.hadoop.hdds.protocol.proto
+import org.apache.hadoop.ozone.protocol.commands
+    .DeleteBlockCommandStatus.DeleteBlockCommandStatusBuilder;
+import static java.lang.Math.min;
+import java.util.function.Consumer;
-  private final Queue<GeneratedMessage> reports;
+  private final List<GeneratedMessage> reports;
-    synchronized (reports) {
-      reports.add(report);
+    if (report != null) {
+      synchronized (reports) {
+        reports.add(report);
+      }
-   * Returns the next report, or null if the report queue is empty.
+   * Adds the reports which could not be sent by heartbeat back to the
+   * reports list.
-   * @return report
+   * @param reportsToPutBack list of reports which failed to be sent by
+   *                         heartbeat.
-  public GeneratedMessage getNextReport() {
+  public void putBackReports(List<GeneratedMessage> reportsToPutBack) {
-      return reports.poll();
+      reports.addAll(0, reportsToPutBack);
-    List<GeneratedMessage> reportList = new ArrayList<>();
+    List<GeneratedMessage> reportsToReturn = new LinkedList<>();
-      if (!reports.isEmpty()) {
-        int size = reports.size();
-        int limit = size > maxLimit ? maxLimit : size;
-        for (int count = 0; count < limit; count++) {
-          GeneratedMessage report = reports.poll();
-          Preconditions.checkNotNull(report);
-          reportList.add(report);
-        }
-      }
-      return reportList;
+      List<GeneratedMessage> tempList = reports.subList(
+          0, min(reports.size(), maxLimit));
+      reportsToReturn.addAll(tempList);
+      tempList.clear();
+    return reportsToReturn;
+    CommandStatusBuilder statusBuilder;
+    if (cmd.getType() == Type.deleteBlocksCommand) {
+      statusBuilder = new DeleteBlockCommandStatusBuilder();
+    } else {
+      statusBuilder = CommandStatusBuilder.newBuilder();
+    }
-        CommandStatusBuilder.newBuilder()
-            .setCmdId(cmd.getId())
+        statusBuilder.setCmdId(cmd.getId())
-   * @param cmdExecuted SCMCommand
+   * @param cmdStatusUpdater Consumer to update command status.
-  public boolean updateCommandStatus(Long cmdId, boolean cmdExecuted) {
+  public boolean updateCommandStatus(Long cmdId,
+      Consumer<CommandStatus> cmdStatusUpdater) {
-      cmdStatusMap.get(cmdId)
-          .setStatus(cmdExecuted ? Status.EXECUTED : Status.FAILED);
+      cmdStatusUpdater.accept(cmdStatusMap.get(cmdId));

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD74 INS8 INS39 INS42 INS44 UPD43 INS25 UPD65 INS74 INS42 INS51 MOV41 INS60 INS25 INS74 UPD42 UPD42 INS27 MOV8 UPD66 INS66 INS42 UPD66 INS66 INS43 INS43 MOV42 INS8 UPD42 INS43 INS59 INS27 INS8 INS8 UPD42 UPD66 INS43 INS43 INS42 INS33 INS42 MOV42 INS21 UPD42 INS60 MOV21 MOV21 INS42 INS42 INS32 INS40 INS21 INS21 MOV32 INS42 INS42 INS32 UPD74 INS74 MOV59 INS42 INS42 INS7 INS7 MOV32 MOV42 UPD42 MOV42 INS34 INS42 UPD43 INS43 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS14 INS42 MOV32 UPD42 INS42 UPD42 INS42 MOV42 UPD42 INS34 INS32 INS43 INS42 MOV32 INS42 INS42 INS42 MOV32 DEL43 DEL42 DEL32 DEL41 DEL42 DEL42 DEL42 DEL32 DEL38 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL16 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL43 DEL60 DEL8 DEL24 DEL8 DEL25 DEL8 DEL51 DEL39 DEL42 DEL40 DEL40 DEL16