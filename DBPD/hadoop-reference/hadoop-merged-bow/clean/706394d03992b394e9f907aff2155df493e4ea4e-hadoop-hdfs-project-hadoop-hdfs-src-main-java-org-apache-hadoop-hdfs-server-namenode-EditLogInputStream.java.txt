HDFS-3004. Implement Recovery Mode. Contributed by Colin Patrick McCabe


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311394 13f79535-47bb-0310-9956-ffa450edef68

-public abstract class EditLogInputStream implements JournalStream, Closeable {
+public abstract class EditLogInputStream implements Closeable {
+  private FSEditLogOp cachedOp = null; 
+  
+  /** 
+   * @return the name of the EditLogInputStream
+   */
+  public abstract String getName();
+  
-  public abstract FSEditLogOp readOp() throws IOException;
+  public FSEditLogOp readOp() throws IOException {
+    FSEditLogOp ret;
+    if (cachedOp != null) {
+      ret = cachedOp;
+      cachedOp = null;
+      return ret;
+    }
+    return nextOp();
+  }
+   * Position the stream so that a valid operation can be read from it with
+   * readOp().
+   * 
+   * This method can be used to skip over corrupted sections of edit logs.
+   */
+  public void resync() throws IOException {
+    if (cachedOp != null) {
+      return;
+    }
+    cachedOp = nextValidOp();
+  }
+  
+  /** 
+   * Get the next operation from the stream storage.
+   * 
+   * @return an operation from the stream or null if at end of stream
+   * @throws IOException if there is an error reading from the stream
+   */
+  protected abstract FSEditLogOp nextOp() throws IOException;
+  
+  /** 
+   * Get the next valid operation from the stream storage.
+   * 
+   * This is exactly like nextOp, except that we attempt to skip over damaged
+   * parts of the edit log
+   * 
+   * @return an operation from the stream or null if at end of stream
+   */
+  protected FSEditLogOp nextValidOp() {
+    // This is a trivial implementation which just assumes that any errors mean
+    // that there is nothing more of value in the log.  Subclasses that support
+    // error recovery will want to override this.
+    try {
+      return nextOp();
+    } catch (IOException e) {
+      return null;
+    }
+  }
+  
+  /** 
+   * Skip edit log operations up to a given transaction ID, or until the
+   * end of the edit log is reached.
+   *
+   * After this function returns, the next call to readOp will return either
+   * end-of-file (null) or a transaction with a txid equal to or higher than
+   * the one we asked for.
+   *
+   * @param txid    The transaction ID to read up until.
+   * @return        Returns true if we found a transaction ID greater than
+   *                or equal to 'txid' in the log.
+   */
+  public boolean skipUntil(long txid) throws IOException {
+    while (true) {
+      FSEditLogOp op = readOp();
+      if (op == null) {
+        return false;
+      }
+      if (op.getTransactionId() >= txid) {
+        cachedOp = op;
+        return true;
+      }
+    }
+  }
+  
+  /** 

INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 MOV29 MOV83 MOV43 INS42 MOV43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 MOV83 INS43 INS42 INS43 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS33 INS65 UPD42 MOV42 INS60 INS25 INS41 INS65 INS42 INS25 INS21 INS65 INS65 INS65 INS42 INS42 INS65 INS65 INS42 INS54 INS65 INS65 INS65 INS39 INS42 INS42 INS61 INS66 INS43 INS59 INS27 INS8 INS32 INS66 INS66 INS66 INS27 INS8 INS7 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS8 INS12 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS9 INS8 INS42 INS42 INS42 INS33 INS21 INS21 INS41 INS42 INS42 INS33 INS41 INS42 INS32 INS41 INS44 INS8 INS60 INS25 INS25 INS7 INS7 INS42 INS42 INS32 INS43 INS42 INS41 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS41 INS32 INS42 INS21 INS41 INS42 INS9 INS42 INS42 INS7 INS9 INS42 INS42 DEL43 DEL42 DEL31