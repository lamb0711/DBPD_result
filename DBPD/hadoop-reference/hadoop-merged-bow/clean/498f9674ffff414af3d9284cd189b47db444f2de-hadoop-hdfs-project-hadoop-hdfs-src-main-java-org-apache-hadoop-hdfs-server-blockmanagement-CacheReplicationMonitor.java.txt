Merge r1550130 through r1555020 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1555021 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.ReentrantLock;
+import com.google.common.base.Preconditions;
+
-   * True if we should rescan immediately, regardless of how much time
-   * elapsed since the previous scan.
+   * The CacheReplicationMonitor (CRM) lock. Used to synchronize starting and
+   * waiting for rescan operations.
-  private boolean rescanImmediately;
+  private final ReentrantLock lock;
-   * The monotonic time at which the current scan started.
+   * Notifies the scan thread that an immediate rescan is needed.
-  private long scanTimeMs;
+  private final Condition doRescan;
+
+  /**
+   * Notifies waiting threads that a rescan has finished.
+   */
+  private final Condition scanFinished;
+
+  /**
+   * Whether there are pending CacheManager operations that necessitate a
+   * CacheReplicationMonitor rescan. Protected by the CRM lock.
+   */
+  private boolean needsRescan = true;
+
+  /**
+   * Whether we are currently doing a rescan. Protected by the CRM lock.
+   */
+  private boolean isScanning = false;
+
+  /**
+   * The number of rescans completed. Used to wait for scans to finish.
+   * Protected by the CacheReplicationMonitor lock.
+   */
+  private long scanCount = 0;
+
+  /**
+   * True if this monitor should terminate. Protected by the CRM lock.
+   */
+  private boolean shutdown = false;
-   * True if this monitor should terminate.
-   */
-  private boolean shutdown;
-
-  /**
-  
+
-      CacheManager cacheManager, long intervalMs) {
+      CacheManager cacheManager, long intervalMs, ReentrantLock lock) {
+    this.lock = lock;
+    this.doRescan = this.lock.newCondition();
+    this.scanFinished = this.lock.newCondition();
-    shutdown = false;
-    rescanImmediately = true;
-    scanTimeMs = 0;
+    long startTimeMs = 0;
+    Thread.currentThread().setName("CacheReplicationMonitor(" +
+        System.identityHashCode(this) + ")");
-        synchronized(this) {
+        lock.lock();
+        try {
-            if (rescanImmediately) {
-              LOG.info("Rescanning on request");
-              rescanImmediately = false;
+            if (needsRescan) {
+              LOG.info("Rescanning because of pending operations");
-            long delta = (scanTimeMs + intervalMs) - curTimeMs;
+            long delta = (startTimeMs + intervalMs) - curTimeMs;
-              LOG.info("Rescanning after " + (curTimeMs - scanTimeMs) +
+              LOG.info("Rescanning after " + (curTimeMs - startTimeMs) +
-            this.wait(delta);
+            doRescan.await(delta, TimeUnit.MILLISECONDS);
+          isScanning = true;
+          needsRescan = false;
+        } finally {
+          lock.unlock();
-        scanTimeMs = curTimeMs;
+        startTimeMs = curTimeMs;
+        // Update synchronization-related variables.
+        lock.lock();
+        try {
+          isScanning = false;
+          scanCount++;
+          scanFinished.signalAll();
+        } finally {
+          lock.unlock();
+        }
-            scannedBlocks + " block(s) in " + (curTimeMs - scanTimeMs) + " " +
+            scannedBlocks + " block(s) in " + (curTimeMs - startTimeMs) + " " +
+    } catch (InterruptedException e) {
+      LOG.info("Shutting down CacheReplicationMonitor.");
+      return;
-   * Kick the monitor thread.
-   * 
-   * If it is sleeping, it will wake up and start scanning.
-   * If it is currently scanning, it will finish the scan and immediately do 
-   * another one.
+   * Waits for a rescan to complete. This doesn't guarantee consistency with
+   * pending operations, only relative recency, since it will not force a new
+   * rescan if a rescan is already underway.
+   * <p>
+   * Note that this call will release the FSN lock, so operations before and
+   * after are not atomic.
-  public synchronized void kick() {
-    rescanImmediately = true;
-    this.notifyAll();
+  public void waitForRescanIfNeeded() {
+    Preconditions.checkArgument(!namesystem.hasWriteLock(),
+        "Must not hold the FSN write lock when waiting for a rescan.");
+    Preconditions.checkArgument(lock.isHeldByCurrentThread(),
+        "Must hold the CRM lock when waiting for a rescan.");
+    if (!needsRescan) {
+      return;
+    }
+    // If no scan is already ongoing, mark the CRM as dirty and kick
+    if (!isScanning) {
+      doRescan.signal();
+    }
+    // Wait until the scan finishes and the count advances
+    final long startCount = scanCount;
+    while ((!shutdown) && (startCount >= scanCount)) {
+      try {
+        scanFinished.await();
+      } catch (InterruptedException e) {
+        LOG.warn("Interrupted while waiting for CacheReplicationMonitor"
+            + " rescan", e);
+        break;
+      }
+    }
-   * Shut down and join the monitor thread.
+   * Indicates to the CacheReplicationMonitor that there have been CacheManager
+   * changes that require a rescan.
+   */
+  public void setNeedsRescan() {
+    Preconditions.checkArgument(lock.isHeldByCurrentThread(),
+        "Must hold the CRM lock when setting the needsRescan bit.");
+    this.needsRescan = true;
+  }
+
+  /**
+   * Shut down the monitor thread.
-    synchronized(this) {
-      if (shutdown) return;
-      shutdown = true;
-      this.notifyAll();
-    }
+    Preconditions.checkArgument(namesystem.hasWriteLock());
+    lock.lock();
-      if (this.isAlive()) {
-        this.join(60000);
-      }
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
+      if (shutdown) return;
+      // Since we hold both the FSN write lock and the CRM lock here,
+      // we know that the CRM thread cannot be currently modifying
+      // the cache manager state while we're closing it.
+      // Since the CRM thread checks the value of 'shutdown' after waiting
+      // for a lock, we know that the thread will not modify the cache
+      // manager state after this point.
+      shutdown = true;
+      doRescan.signalAll();
+      scanFinished.signalAll();
+    } finally {
+      lock.unlock();
-  private void rescan() {
+  private void rescan() throws InterruptedException {
+      if (shutdown) {
+        throw new InterruptedException("CacheReplicationMonitor was " +
+            "shut down.");
+      }
-      LOG.info("Directive expiry is at " + directive.getExpiryTime());
+      if (LOG.isTraceEnabled()) {
+        LOG.trace("Directive expiry is at " + directive.getExpiryTime());
+      }
-              + " because it has expired (" + directive.getExpiryTime() + ">="
-              + now);
+              + " because it has expired (" + directive.getExpiryTime() + "<="
+              + now + ")");
-    long neededTotal = 0;
-    for (BlockInfo blockInfo : blockInfos) {
-      long neededByBlock = 
-          directive.getReplication() * blockInfo.getNumBytes();
-       neededTotal += neededByBlock;
-    }
+    // We don't cache UC blocks, don't add them to the total here
+    long neededTotal = file.computeFileSizeNotIncludingLastUcBlock() *
+        directive.getReplication();
-    // TODO: Enforce per-pool quotas
+    // The pool's bytesNeeded is incremented as we scan. If the demand
+    // thus far plus the demand of this file would exceed the pool's limit,
+    // do not cache this file.
+    CachePool pool = directive.getPool();
+    if (pool.getBytesNeeded() > pool.getLimit()) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug(String.format("Skipping directive id %d file %s because "
+            + "limit of pool %s would be exceeded (%d > %d)",
+            directive.getId(),
+            file.getFullPathName(),
+            pool.getPoolName(),
+            pool.getBytesNeeded(),
+            pool.getLimit()));
+      }
+      return;
+    }
-        if (mark != ocblock.getMark()) {
-          // Mark hasn't been set in this scan, so update replication and mark.
+        if ((mark != ocblock.getMark()) ||
+            (ocblock.getReplication() < directive.getReplication())) {
+          //
+          // Overwrite the block's replication and mark in two cases:
+          //
+          // 1. If the mark on the CachedBlock is different from the mark for
+          // this scan, that means the block hasn't been updated during this
+          // scan, and we should overwrite whatever is there, since it is no
+          // longer valid.
+          //
+          // 2. If the replication in the CachedBlock is less than what the
+          // directive asks for, we want to increase the block's replication
+          // field to what the directive asks for.
+          //
-        } else {
-          // Mark already set in this scan.  Set replication to highest value in
-          // any CacheDirective that covers this file.
-          ocblock.setReplicationAndMark((short)Math.max(
-              directive.getReplication(), ocblock.getReplication()), mark);
+  private String findReasonForNotCaching(CachedBlock cblock, 
+          BlockInfo blockInfo) {
+    if (blockInfo == null) {
+      // Somehow, a cache report with the block arrived, but the block
+      // reports from the DataNode haven't (yet?) described such a block.
+      // Alternately, the NameNode might have invalidated the block, but the
+      // DataNode hasn't caught up.  In any case, we want to tell the DN
+      // to uncache this.
+      return "not tracked by the BlockManager";
+    } else if (!blockInfo.isComplete()) {
+      // When a cached block changes state from complete to some other state
+      // on the DataNode (perhaps because of append), it will begin the
+      // uncaching process.  However, the uncaching process is not
+      // instantaneous, especially if clients have pinned the block.  So
+      // there may be a period of time when incomplete blocks remain cached
+      // on the DataNodes.
+      return "not complete";
+    }  else if (cblock.getReplication() == 0) {
+      // Since 0 is not a valid value for a cache directive's replication
+      // field, seeing a replication of 0 on a CacheBlock means that it
+      // has never been reached by any sweep.
+      return "not needed by any directives";
+    } else if (cblock.getMark() != mark) { 
+      // Although the block was needed in the past, we didn't reach it during
+      // the current sweep.  Therefore, it doesn't need to be cached any more.
+      return "no longer needed by any directives";
+    }
+    return null;
+  }
+
-      // If the block's mark doesn't match with the mark of this scan, that
-      // means that this block couldn't be reached during this scan.  That means
-      // it doesn't need to be cached any more.
-      int neededCached = (cblock.getMark() != mark) ?
-          0 : cblock.getReplication();
+      BlockInfo blockInfo = blockManager.
+            getStoredBlock(new Block(cblock.getBlockId()));
+      String reason = findReasonForNotCaching(cblock, blockInfo);
+      int neededCached = 0;
+      if (reason != null) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("not caching " + cblock + " because it is " + reason);
+        }
+      } else {
+        neededCached = cblock.getReplication();
+      }
-    if (!cacheManager.isActive()) {
-      return;
-    }
-    if (!cacheManager.isActive()) {
-      return;
-    }
-      LOG.debug("Not caching block " + cachedBlock + " because it " +
-          "was deleted from all DataNodes.");
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Not caching block " + cachedBlock + " because there " +
+            "is no record of it on the NameNode.");
+      }

INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS44 MOV29 MOV83 INS39 INS42 INS8 INS29 INS83 MOV39 UPD42 MOV42 MOV8 INS43 MOV60 INS83 INS43 INS42 INS44 MOV44 INS8 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 UPD42 INS9 INS65 INS42 INS9 UPD42 INS34 INS9 INS43 INS42 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS25 INS25 INS60 INS61 INS65 INS21 INS21 MOV21 INS54 INS42 MOV60 INS25 INS42 INS43 INS42 INS25 INS41 INS25 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS42 INS7 INS7 INS7 INS39 INS59 INS32 INS12 UPD66 UPD66 INS66 INS66 UPD66 UPD66 INS32 INS32 INS38 MOV8 INS38 INS8 INS83 INS39 INS59 INS27 INS8 INS66 INS66 INS32 UPD66 INS32 MOV8 INS8 INS43 INS27 INS8 INS42 MOV27 INS8 INS25 INS33 INS27 INS8 INS22 INS42 INS22 INS32 INS22 INS32 INS42 INS34 MOV32 INS42 INS27 MOV44 INS8 INS42 INS42 INS38 INS45 INS42 INS42 INS32 INS45 INS42 INS42 INS21 INS42 INS42 INS36 INS36 INS54 INS42 INS42 INS32 INS45 INS22 INS42 INS42 INS32 UPD42 INS42 INS21 MOV21 INS25 INS25 UPD42 MOV32 INS42 UPD42 INS32 INS32 INS32 INS25 INS41 INS41 INS38 INS8 INS25 INS60 INS60 INS25 INS42 INS33 INS25 MOV41 INS52 INS42 INS52 INS42 INS22 INS42 INS52 INS42 INS22 INS42 INS45 INS32 INS45 INS21 INS41 INS32 INS42 INS42 INS32 INS38 INS27 INS8 INS12 INS42 INS42 INS52 INS42 UPD42 MOV42 INS42 INS32 INS42 INS8 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS45 INS32 INS41 INS27 INS8 INS25 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS8 INS52 INS42 INS52 INS42 INS42 INS42 INS52 INS21 INS54 INS21 INS54 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 UPD42 INS42 INS42 UPD42 INS42 INS53 INS42 INS42 MOV21 UPD42 UPD42 INS42 INS42 MOV21 INS42 INS42 INS45 INS32 INS34 INS41 MOV27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS34 INS42 INS33 INS25 INS21 UPD42 MOV42 UPD42 MOV42 MOV21 INS32 INS8 INS8 INS32 INS8 INS8 INS42 INS42 INS45 INS32 INS43 INS42 INS21 INS10 INS14 INS32 INS27 INS42 INS42 INS45 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS8 INS7 INS42 INS42 MOV61 INS21 INS21 INS21 UPD42 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS43 INS27 UPD42 INS42 INS42 INS32 INS36 INS36 INS45 INS43 INS32 INS42 INS42 INS21 INS42 MOV32 INS7 INS7 INS32 INS7 INS37 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS45 INS45 INS42 INS42 INS27 INS32 INS32 INS32 INS32 INS32 MOV27 INS27 INS42 INS42 INS42 INS32 UPD45 UPD45 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 MOV32 INS42 INS42 INS27 UPD42 UPD42 UPD45 INS45 INS45 INS42 INS45 INS42 INS42 UPD42 INS40 UPD45 UPD42 UPD42 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL52 DEL52 DEL8 DEL51 DEL42 DEL52 DEL42 DEL32 DEL21 DEL83 DEL31 DEL52 DEL34 DEL52 DEL52 DEL51 DEL52 DEL32 DEL8 DEL25 DEL8 DEL8 DEL12 DEL54 DEL42 DEL8 DEL70 DEL39 DEL34 DEL42 DEL42 DEL7 DEL42 DEL42 DEL39 DEL42 DEL42 DEL32 DEL11 DEL42 DEL32 DEL21 DEL8 DEL36 DEL34 DEL16 DEL42 DEL42 DEL32 DEL38 DEL25 DEL32 DEL38 DEL41 DEL8 DEL25 DEL8 DEL25