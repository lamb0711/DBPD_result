Merge trunk into auto-failover branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1309164 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import java.util.LinkedHashSet;
+import java.util.Set;
+   * @param nif network interface to get addresses for
+   * @return set containing addresses for each subinterface of nif,
+   *    see below for the rationale for using an ordered set
+   */
+  private static LinkedHashSet<InetAddress> getSubinterfaceInetAddrs(
+      NetworkInterface nif) {
+    LinkedHashSet<InetAddress> addrs = new LinkedHashSet<InetAddress>();
+    Enumeration<NetworkInterface> subNifs = nif.getSubInterfaces();
+    while (subNifs.hasMoreElements()) {
+      NetworkInterface subNif = subNifs.nextElement();
+      addrs.addAll(Collections.list(subNif.getInetAddresses()));
+    }
+    return addrs;
+  }
+
+  /**
+   * Like {@link DNS#getIPs(String, boolean), but returns all
+   * IPs associated with the given interface and its subinterfaces.
+   */
+  public static String[] getIPs(String strInterface)
+      throws UnknownHostException {
+    return getIPs(strInterface, true);
+  }
+
+  /**
+   * @param returnSubinterfaces
+   *            Whether to return IPs associated with subinterfaces of
+   *            the given interface
-  public static String[] getIPs(String strInterface)
-    throws UnknownHostException {
+  public static String[] getIPs(String strInterface,
+      boolean returnSubinterfaces) throws UnknownHostException {
-    Vector<String> ips = new Vector<String>();
-    Enumeration<InetAddress> addrs = netIf.getInetAddresses();
-    while (addrs.hasMoreElements()) {
-      ips.add(addrs.nextElement().getHostAddress());
+
+    // NB: Using a LinkedHashSet to preserve the order for callers
+    // that depend on a particular element being 1st in the array.
+    // For example, getDefaultIP always returns the first element.
+    LinkedHashSet<InetAddress> allAddrs = new LinkedHashSet<InetAddress>();
+    allAddrs.addAll(Collections.list(netIf.getInetAddresses()));
+    if (!returnSubinterfaces) {
+      allAddrs.removeAll(getSubinterfaceInetAddrs(netIf));
-    return ips.toArray(new String[] {});
+
+    String ips[] = new String[allAddrs.size()];
+    int i = 0;
+    for (InetAddress addr : allAddrs) {
+      ips[i++] = addr.getHostAddress();
+    }
+    return ips;
-    /**
+  /**

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS43 INS8 INS44 INS65 INS65 INS43 INS43 INS43 INS42 INS60 INS60 INS61 INS41 INS65 INS43 INS85 INS43 INS42 INS42 INS41 INS65 INS39 INS42 INS21 INS25 INS60 INS70 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS74 INS59 UPD74 MOV74 INS59 INS32 INS8 INS42 INS66 INS65 INS42 INS42 INS32 INS42 INS66 INS66 UPD74 INS32 INS38 INS8 MOV43 INS39 INS59 INS44 INS42 INS8 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS32 INS42 INS42 INS60 INS21 INS66 INS66 INS42 INS42 INS9 UPD43 UPD43 UPD42 INS42 INS42 INS32 INS42 INS21 UPD42 INS85 MOV3 INS42 INS34 INS43 INS42 MOV21 INS42 INS42 INS74 INS42 INS42 INS42 INS43 INS59 INS32 UPD42 UPD42 UPD74 INS42 INS42 MOV32 INS32 INS32 INS42 INS7 INS43 MOV43 INS42 INS42 INS32 INS42 INS42 INS32 UPD43 INS43 INS42 INS42 INS32 INS42 INS42 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS37 UPD42 MOV42 MOV42 INS42 INS42 INS42 DEL4 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL42 DEL32