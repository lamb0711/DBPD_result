HDFS-2602. NN should log newly-allocated blocks without losing BlockInfo. Contributed by Aaron T. Myers


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1215036 13f79535-47bb-0310-9956-ffa450edef68

-                            BlockInfo[] blocks, 
-    long diskspace = UNKNOWN_DISK_SPACE;
-    if (blocks == null)
-      newNode = new INodeDirectory(permissions, modificationTime);
-    else {
-      newNode = new INodeFile(permissions, blocks.length, replication,
-                              modificationTime, atime, preferredBlockSize);
-      diskspace = ((INodeFile)newNode).diskspaceConsumed(blocks);
-    }
+    newNode = new INodeFile(permissions, new BlockInfo[0], replication,
+                            modificationTime, atime, preferredBlockSize);
-        newNode = addNode(path, newNode, diskspace);
-        if(newNode != null && blocks != null) {
-          int nrBlocks = blocks.length;
-          // Add file->block mapping
-          INodeFile newF = (INodeFile)newNode;
-          for (int i = 0; i < nrBlocks; i++) {
-            newF.setBlock(i, getBlockManager().addINode(blocks[i], newF));
-          }
-        }
+        newNode = addNode(path, newNode, 0);
-
+  
-   * Remove a block to the file.
+   * Remove a block from the file.
-      // modify file-> block and blocksMap
-      fileNode.removeLastBlock(block);
-      getBlockManager().removeBlockFromMap(block);
-
+      unprotectedRemoveBlock(path, fileNode, block);
-      if(NameNode.stateChangeLog.isDebugEnabled()) {
-        NameNode.stateChangeLog.debug("DIR* FSDirectory.removeBlock: "
-            +path+" with "+block
-            +" block is removed from the file system");
-      }
-
-      // update space consumed
-      INode[] pathINodes = getExistingPathINodes(path);
-      updateCount(pathINodes, pathINodes.length-1, 0,
-          -fileNode.getPreferredBlockSize()*fileNode.getReplication(), true);
+  
+  void unprotectedRemoveBlock(String path,
+      INodeFileUnderConstruction fileNode, Block block) throws IOException {
+    // modify file-> block and blocksMap
+    fileNode.removeLastBlock(block);
+    getBlockManager().removeBlockFromMap(block);
+
+    if(NameNode.stateChangeLog.isDebugEnabled()) {
+      NameNode.stateChangeLog.debug("DIR* FSDirectory.removeBlock: "
+          +path+" with "+block
+          +" block is removed from the file system");
+    }
+
+    // update space consumed
+    INode[] pathINodes = getExistingPathINodes(path);
+    updateCount(pathINodes, pathINodes.length - 1, 0,
+        - fileNode.getPreferredBlockSize()*fileNode.getReplication(), true);
+  }

INS31 INS31 MOV29 MOV43 MOV42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 INS29 INS39 INS42 INS44 INS44 INS44 INS43 INS8 UPD39 UPD42 MOV8 MOV60 MOV6 MOV21 MOV21 INS54 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 MOV21 MOV21 INS54 MOV41 INS8 MOV8 INS66 UPD42 MOV42 UPD42 MOV42 INS42 INS8 MOV8 INS54 MOV41 MOV21 MOV21 INS3 INS8 MOV12 MOV5 INS34 MOV21 UPD42 UPD42 UPD42 MOV42 INS42 INS34 DEL40 DEL42 DEL42 DEL44 DEL39 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL39 DEL42 DEL40 DEL59 DEL60 DEL43 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL25 DEL8 DEL54 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL66 DEL65 DEL29 DEL54 DEL8