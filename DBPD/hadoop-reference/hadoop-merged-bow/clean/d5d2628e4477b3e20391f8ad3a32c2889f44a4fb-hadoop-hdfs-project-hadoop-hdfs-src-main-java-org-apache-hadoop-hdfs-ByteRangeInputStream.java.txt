Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+import java.util.Map;
+import java.util.StringTokenizer;
-import org.apache.hadoop.hdfs.server.namenode.StreamFile;
+import com.google.common.net.HttpHeaders;
-    protected abstract HttpURLConnection openConnection() throws IOException;
-
-    protected abstract HttpURLConnection openConnection(final long offset) throws IOException;
+    /** Connect to server with a data offset. */
+    protected abstract HttpURLConnection connect(final long offset,
+        final boolean resolved) throws IOException;
-  protected long filelength;
+  protected Long fileLength = null;
-  protected abstract void checkResponseCode(final HttpURLConnection connection
-      ) throws IOException;
-  
-    final URLOpener opener =
-      (resolvedURL.getURL() == null) ? originalURL : resolvedURL;
+    final boolean resolved = resolvedURL.getURL() != null; 
+    final URLOpener opener = resolved? resolvedURL: originalURL;
-    final HttpURLConnection connection = opener.openConnection(startPos);
-    connection.connect();
-    checkResponseCode(connection);
-
-    final String cl = connection.getHeaderField(StreamFile.CONTENT_LENGTH);
-    if (cl == null) {
-      throw new IOException(StreamFile.CONTENT_LENGTH+" header is missing");
-    }
-    final long streamlength = Long.parseLong(cl);
-    filelength = startPos + streamlength;
-    // Java has a bug with >2GB request streams.  It won't bounds check
-    // the reads so the transfer blocks until the server times out
-    InputStream is =
-        new BoundedInputStream(connection.getInputStream(), streamlength);
-
+    final HttpURLConnection connection = opener.connect(startPos, resolved);
-    
-    return is;
+
+    InputStream in = connection.getInputStream();
+    final Map<String, List<String>> headers = connection.getHeaderFields();
+    if (isChunkedTransferEncoding(headers)) {
+      // file length is not known
+      fileLength = null;
+    } else {
+      // for non-chunked transfer-encoding, get content-length
+      final String cl = connection.getHeaderField(HttpHeaders.CONTENT_LENGTH);
+      if (cl == null) {
+        throw new IOException(HttpHeaders.CONTENT_LENGTH + " is missing: "
+            + headers);
+      }
+      final long streamlength = Long.parseLong(cl);
+      fileLength = startPos + streamlength;
+
+      // Java has a bug with >2GB request streams.  It won't bounds check
+      // the reads so the transfer blocks until the server times out
+      in = new BoundedInputStream(in, streamlength);
+    }
+
+    return in;
+  private static boolean isChunkedTransferEncoding(
+      final Map<String, List<String>> headers) {
+    return contains(headers, HttpHeaders.TRANSFER_ENCODING, "chunked")
+        || contains(headers, HttpHeaders.TE, "chunked");
+  }
+
+  /** Does the HTTP header map contain the given key, value pair? */
+  private static boolean contains(final Map<String, List<String>> headers,
+      final String key, final String value) {
+    final List<String> values = headers.get(key);
+    if (values != null) {
+      for(String v : values) {
+        for(final StringTokenizer t = new StringTokenizer(v, ",");
+            t.hasMoreTokens(); ) {
+          if (value.equalsIgnoreCase(t.nextToken())) {
+            return true;
+          }
+        }
+      }
+    }
+    return false;
+  }
+
-    } else if (currentPos < filelength) {
+    } else if (fileLength != null && currentPos < fileLength) {
-          + " < filelength = " + filelength);
+          + " < filelength = " + fileLength);

MOV26 INS26 INS26 INS26 MOV31 INS40 INS40 UPD40 INS40 INS31 INS43 MOV60 INS83 INS83 INS39 INS42 INS44 INS8 INS29 UPD83 UPD83 UPD39 UPD42 INS44 INS44 INS8 INS29 UPD42 INS44 INS42 UPD42 INS33 INS60 INS60 INS25 INS83 INS74 INS42 INS41 INS65 INS74 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS25 INS41 INS65 INS83 INS39 INS42 INS39 INS83 MOV43 INS59 INS83 INS74 INS59 INS32 INS8 INS8 UPD42 INS43 INS43 INS74 INS27 INS66 INS43 INS43 INS74 UPD42 MOV42 INS42 INS83 INS74 INS59 INS27 INS8 INS9 INS66 INS42 UPD27 MOV27 INS42 INS16 UPD42 MOV32 INS43 MOV43 INS74 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS21 MOV60 MOV25 MOV60 MOV21 INS21 INS42 INS42 INS43 INS43 INS32 INS32 UPD42 MOV42 INS42 INS43 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS27 INS42 INS42 INS42 UPD42 INS42 INS42 INS43 INS43 MOV42 UPD42 MOV42 INS7 INS43 INS7 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS27 INS27 INS42 INS42 INS42 INS33 INS42 UPD42 INS42 INS14 INS43 INS42 INS24 INS42 INS33 MOV42 UPD42 MOV42 UPD40 MOV43 INS42 INS42 INS42 INS58 INS32 INS8 INS83 INS43 INS59 INS42 INS42 INS25 UPD42 UPD40 UPD45 INS42 INS42 INS42 INS14 INS32 INS8 INS43 INS42 INS45 INS42 INS42 INS32 INS41 INS42 INS42 INS42 INS9 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL31 DEL39 DEL42 DEL36 DEL42 DEL42 DEL16 DEL32 DEL21 DEL32 DEL21 DEL42 DEL14 DEL43 DEL42 DEL43 DEL27