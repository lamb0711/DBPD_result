YARN-355. Fixes a bug where RM app submission could jam under load. Contributed by Daryn Sharp.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1443131 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.net.InetSocketAddress;
+
+import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.ipc.RPC;
+import org.apache.hadoop.net.NetUtils;
+import org.apache.hadoop.security.SecurityUtil;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.security.token.TokenRenewer;
+import org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager;
+import org.apache.hadoop.yarn.api.ClientRMProtocol;
+import org.apache.hadoop.yarn.api.protocolrecords.CancelDelegationTokenRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.RenewDelegationTokenRequest;
+import org.apache.hadoop.yarn.api.records.DelegationToken;
+import org.apache.hadoop.yarn.ipc.YarnRPC;
+import org.apache.hadoop.yarn.util.BuilderUtils;
+import org.apache.hadoop.yarn.util.Records;
+  
+  public static class Renewer extends TokenRenewer {
+
+    @Override
+    public boolean handleKind(Text kind) {
+      return KIND_NAME.equals(kind);
+    }
+
+    @Override
+    public boolean isManaged(Token<?> token) throws IOException {
+      return true;
+    }
+
+    private static
+    AbstractDelegationTokenSecretManager<RMDelegationTokenIdentifier> localSecretManager;
+    private static InetSocketAddress localServiceAddress;
+    
+    @Private
+    public static void setSecretManager(
+        AbstractDelegationTokenSecretManager<RMDelegationTokenIdentifier> secretManager,
+        InetSocketAddress serviceAddress) {
+      localSecretManager = secretManager;
+      localServiceAddress = serviceAddress;
+    }
+    
+    @SuppressWarnings("unchecked")
+    @Override
+    public long renew(Token<?> token, Configuration conf) throws IOException,
+        InterruptedException {
+      final ClientRMProtocol rmClient = getRmClient(token, conf);
+      if (rmClient != null) {
+        try {
+          RenewDelegationTokenRequest request =
+              Records.newRecord(RenewDelegationTokenRequest.class);
+          request.setDelegationToken(convertToProtoToken(token));
+          return rmClient.renewDelegationToken(request).getNextExpirationTime();
+        } finally {
+          RPC.stopProxy(rmClient);
+        }
+      } else {
+        return localSecretManager.renewToken(
+            (Token<RMDelegationTokenIdentifier>)token, getRenewer(token));
+      }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void cancel(Token<?> token, Configuration conf) throws IOException,
+        InterruptedException {
+      final ClientRMProtocol rmClient = getRmClient(token, conf);
+      if (rmClient != null) {
+        try {
+          CancelDelegationTokenRequest request =
+              Records.newRecord(CancelDelegationTokenRequest.class);
+          request.setDelegationToken(convertToProtoToken(token));
+          rmClient.cancelDelegationToken(request);
+        } finally {
+          RPC.stopProxy(rmClient);
+        }
+      } else {
+        localSecretManager.cancelToken(
+            (Token<RMDelegationTokenIdentifier>)token, getRenewer(token));
+      }
+    }
+    
+    private static ClientRMProtocol getRmClient(Token<?> token,
+        Configuration conf) {
+      InetSocketAddress addr = SecurityUtil.getTokenServiceAddr(token);
+      if (localSecretManager != null) {
+        // return null if it's our token
+        if (localServiceAddress.getAddress().isAnyLocalAddress()) {
+            if (NetUtils.isLocalAddress(addr.getAddress()) &&
+                addr.getPort() == localServiceAddress.getPort()) {
+              return null;
+            }
+        } else if (addr.equals(localServiceAddress)) {
+          return null;
+        }
+      }
+      final YarnRPC rpc = YarnRPC.create(conf);
+      return (ClientRMProtocol)rpc.getProxy(ClientRMProtocol.class, addr, conf);        
+    }
+
+    // get renewer so we can always renew our own tokens
+    @SuppressWarnings("unchecked")
+    private static String getRenewer(Token<?> token) throws IOException {
+      return ((Token<RMDelegationTokenIdentifier>)token).decodeIdentifier()
+          .getRenewer().toString();
+    }
+    
+    private static DelegationToken convertToProtoToken(Token<?> token) {
+      return BuilderUtils.newDelegationToken(
+          token.getIdentifier(), token.getKind().toString(),
+          token.getPassword(), token.getService().toString());
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS55 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 MOV29 MOV78 MOV78 INS83 INS42 MOV43 MOV23 MOV31 MOV31 MOV31 INS55 MOV83 INS83 INS42 INS43 INS31 INS31 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS79 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS79 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS79 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS41 INS42 INS74 INS42 INS42 INS41 INS43 INS43 INS42 INS42 INS42 INS42 INS74 INS42 INS43 INS42 INS21 INS21 INS42 INS45 INS42 INS74 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS45 INS42 INS74 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS74 INS42 INS43 INS42 INS60 INS25 INS60 INS41 INS42 INS45 INS42 INS74 INS42 INS42 INS41 INS42 INS74 INS42 INS41 INS42 INS32 INS43 INS76 INS9 INS42 INS42 INS43 INS43 INS42 INS7 INS7 INS43 INS76 INS42 INS83 INS43 INS59 INS27 INS8 INS8 INS43 INS76 INS42 INS83 INS43 INS59 INS27 INS8 INS8 INS43 INS76 INS42 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS11 INS43 INS76 INS32 INS43 INS76 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS54 INS41 INS42 INS42 INS42 INS32 INS42 INS33 INS54 INS21 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS32 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS8 INS8 INS32 INS42 INS42 INS42 INS8 INS8 INS32 INS42 INS42 INS42 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS60 INS21 INS41 INS21 INS42 INS42 INS11 INS32 INS60 INS21 INS21 INS21 INS42 INS42 INS11 INS32 INS32 INS42 INS25 INS32 INS8 INS43 INS36 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS74 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS74 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS41 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS32 INS27 INS41 INS33 INS74 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS33 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL55