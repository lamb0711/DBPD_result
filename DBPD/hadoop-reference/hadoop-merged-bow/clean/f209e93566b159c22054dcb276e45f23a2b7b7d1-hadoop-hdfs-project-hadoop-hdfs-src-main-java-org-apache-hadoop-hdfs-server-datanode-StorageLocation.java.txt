HDFS-10638. Modifications to remove the assumption that StorageLocation is associated with java.io.File in Datanode. (Virajith Jalaparti via lei)

+import java.net.URISyntaxException;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.LocalFileSystem;
+import org.apache.hadoop.fs.permission.FsPermission;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.HdfsConfiguration;
+import org.apache.hadoop.hdfs.server.common.Storage;
+import org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory;
+import org.apache.hadoop.util.DiskChecker;
-  final File file;
-
+  private final URI baseURI;
-
-    if (uri.getScheme() == null ||
-        "file".equalsIgnoreCase(uri.getScheme())) {
-      // drop any (illegal) authority in the URI for backwards compatibility
-      this.file = new File(uri.getPath());
-    } else {
-      throw new IllegalArgumentException("Unsupported URI ecPolicy in " + uri);
+    if (uri.getScheme() == null || uri.getScheme().equals("file")) {
+      // make sure all URIs that point to a file have the same scheme
+      try {
+        File uriFile = new File(uri.getPath());
+        String absPath = uriFile.getAbsolutePath();
+        uri = new URI("file", null, absPath, uri.getQuery(), uri.getFragment());
+      } catch (URISyntaxException e) {
+        throw new IllegalArgumentException(
+            "URI: " + uri + " is not in the expected format");
+      }
+    baseURI = uri;
-  URI getUri() {
-    return file.toURI();
+  public URI getUri() {
+    return baseURI;
-  public File getFile() {
-    return this.file;
+  public URI getNormalizedUri() {
+    return baseURI.normalize();
+  }
+
+  public boolean matchesStorageDirectory(StorageDirectory sd)
+      throws IOException {
+    return this.equals(sd.getStorageLocation());
+  }
+
+  public boolean matchesStorageDirectory(StorageDirectory sd,
+      String bpid) throws IOException {
+    return this.getBpURI(bpid, Storage.STORAGE_DIR_CURRENT).normalize()
+        .equals(sd.getRoot().toURI().normalize());
-
+    //do Path.toURI instead of new URI(location) as this ensures that
+    //"/a/b" and "/a/b/" are represented in a consistent manner
-    return "[" + storageType + "]" + file.toURI();
+    return "[" + storageType + "]" + baseURI.normalize();
-    if (this.getFile() != null && otherStorage.getFile() != null) {
-      return this.getFile().getAbsolutePath().compareTo(
-          otherStorage.getFile().getAbsolutePath());
-    } else if (this.getFile() == null && otherStorage.getFile() == null) {
+    if (this.getNormalizedUri() != null &&
+        otherStorage.getNormalizedUri() != null) {
+      return this.getNormalizedUri().compareTo(
+          otherStorage.getNormalizedUri());
+    } else if (this.getNormalizedUri() == null &&
+        otherStorage.getNormalizedUri() == null) {
-    } else if (this.getFile() == null) {
+    } else if (this.getNormalizedUri() == null) {
+
+  public URI getBpURI(String bpid, String currentStorageDir) {
+    try {
+      File localFile = new File(getUri());
+      return new File(new File(localFile, currentStorageDir), bpid).toURI();
+    } catch (IllegalArgumentException e) {
+      return null;
+    }
+  }
+
+  /**
+   * Create physical directory for block pools on the data node.
+   *
+   * @param blockPoolID
+   *          the block pool id
+   * @param conf
+   *          Configuration instance to use.
+   * @throws IOException on errors
+   */
+  public void makeBlockPoolDir(String blockPoolID,
+      Configuration conf) throws IOException {
+
+    if (conf == null) {
+      conf = new HdfsConfiguration();
+    }
+
+    LocalFileSystem localFS = FileSystem.getLocal(conf);
+    FsPermission permission = new FsPermission(conf.get(
+        DFSConfigKeys.DFS_DATANODE_DATA_DIR_PERMISSION_KEY,
+        DFSConfigKeys.DFS_DATANODE_DATA_DIR_PERMISSION_DEFAULT));
+    File data = new File(getBpURI(blockPoolID, Storage.STORAGE_DIR_CURRENT));
+    try {
+      DiskChecker.checkDir(localFS, new Path(data.toURI()), permission);
+    } catch (IOException e) {
+      DataStorage.LOG.warn("Invalid directory in: " + data.getCanonicalPath() +
+          ": " + e.getMessage());
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS43 INS83 INS43 INS42 INS8 INS83 UPD42 INS83 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS43 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 UPD42 INS21 INS42 INS41 INS43 INS42 INS42 INS41 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS54 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS25 INS60 INS60 INS60 INS54 INS8 INS7 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS8 INS12 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 MOV45 INS54 INS42 INS42 UPD42 UPD42 INS52 INS42 INS32 INS32 INS42 INS32 INS60 INS41 INS44 INS8 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS8 INS12 INS42 INS42 INS32 INS42 INS32 INS42 UPD42 UPD42 MOV43 INS59 INS32 INS43 INS42 INS41 INS7 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS32 INS43 INS42 INS21 INS60 INS60 MOV21 INS44 INS8 INS52 INS42 INS42 INS40 INS32 INS42 UPD42 UPD42 MOV32 MOV32 INS42 INS14 INS14 INS42 INS42 INS33 INS42 INS14 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS14 INS42 INS42 INS32 MOV43 INS59 INS43 INS59 INS43 INS42 MOV53 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS32 INS43 INS14 INS42 INS43 INS43 INS32 INS40 INS42 INS27 INS42 INS42 MOV14 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS43 INS45 INS33 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 INS45 DEL42 DEL52 DEL42 DEL22 DEL8 DEL8 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32