Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

+import org.junit.Assert;
+import org.mockito.internal.matchers.GreaterThan;
-import static org.mockito.AdditionalMatchers.*;
+
+import org.mockito.ArgumentCaptor;
+  private static final double EPSILON = 0.00001;
-    verify(rb).addGauge(eqName(info(name, "")), eq(expected));
+    Assert.assertEquals("Bad value for metric " + name,
+        expected, getIntGauge(name, rb));
+  }
+
+  public static int getIntGauge(String name, MetricsRecordBuilder rb) {
+    ArgumentCaptor<Integer> captor = ArgumentCaptor.forClass(Integer.class);
+    verify(rb, atLeast(0)).addGauge(eqName(info(name, "")), captor.capture());
+    checkCaptured(captor, name);
+    return captor.getValue();
-    verify(rb).addCounter(eqName(info(name, "")), eq(expected));
+    Assert.assertEquals("Bad value for metric " + name,
+        expected, getIntCounter(name, rb));
+  public static int getIntCounter(String name, MetricsRecordBuilder rb) {
+    ArgumentCaptor<Integer> captor = ArgumentCaptor.forClass(
+        Integer.class);
+    verify(rb, atLeast(0)).addCounter(eqName(info(name, "")), captor.capture());
+    checkCaptured(captor, name);
+    return captor.getValue();
+  }
+  
-    verify(rb).addGauge(eqName(info(name, "")), eq(expected));
+    Assert.assertEquals("Bad value for metric " + name,
+        expected, getLongGauge(name, rb));
+  }
+
+  public static long getLongGauge(String name, MetricsRecordBuilder rb) {
+    ArgumentCaptor<Long> captor = ArgumentCaptor.forClass(Long.class);
+    verify(rb, atLeast(0)).addGauge(eqName(info(name, "")), captor.capture());
+    checkCaptured(captor, name);
+    return captor.getValue();
-    verify(rb).addGauge(eqName(info(name, "")), eq(expected));
+    Assert.assertEquals("Bad value for metric " + name,
+        expected, getDoubleGauge(name, rb), EPSILON);
+  }
+
+  public static double getDoubleGauge(String name, MetricsRecordBuilder rb) {
+    ArgumentCaptor<Double> captor = ArgumentCaptor.forClass(Double.class);
+    verify(rb, atLeast(0)).addGauge(eqName(info(name, "")), captor.capture());
+    checkCaptured(captor, name);
+    return captor.getValue();
-    verify(rb).addCounter(eqName(info(name, "")), eq(expected));
+    Assert.assertEquals("Bad value for metric " + name,
+        expected, getLongCounter(name, rb));
+  }
+
+  public static long getLongCounter(String name, MetricsRecordBuilder rb) {
+    ArgumentCaptor<Long> captor = ArgumentCaptor.forClass(Long.class);
+    verify(rb, atLeast(0)).addCounter(eqName(info(name, "")), captor.capture());
+    checkCaptured(captor, name);
+    return captor.getValue();
+  }
+
+  /**
+   * Check that this metric was captured exactly once.
+   */
+  private static void checkCaptured(ArgumentCaptor<?> captor, String name) {
+    Assert.assertEquals("Expected exactly one metric for name " + name,
+        1, captor.getAllValues().size());
-    verify(rb).addCounter(eqName(info(name, "")), gt(greater));
+    Assert.assertThat("Bad value for metric " + name, getLongCounter(name, rb),
+        new GreaterThan<Long>(greater));
-    verify(rb).addGauge(eqName(info(name, "")), gt(greater));
+    Assert.assertThat("Bad value for metric " + name, getDoubleGauge(name, rb),
+        new GreaterThan<Double>(greater));

MOV26 INS26 INS26 INS40 UPD40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS34 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS41 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS41 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS41 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS41 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS41 INS65 INS74 INS42 INS43 INS42 INS21 INS42 INS42 INS74 INS59 INS32 INS32 INS32 INS42 INS42 INS74 INS59 INS32 INS32 INS32 INS42 INS42 INS74 INS59 INS32 INS32 INS32 INS42 INS42 INS74 INS59 INS32 INS32 INS32 INS42 INS42 INS74 INS59 INS32 INS32 INS32 INS66 INS43 INS76 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 MOV42 MOV32 INS43 INS43 INS42 INS32 INS32 INS42 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS43 INS43 INS42 INS32 INS32 INS42 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 MOV42 MOV32 INS43 INS43 INS42 INS32 INS32 INS42 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS42 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS43 INS43 INS42 INS32 INS32 INS42 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS34 INS32 INS42 INS42 INS27 INS14 INS42 INS42 INS27 INS14 INS45 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS32 INS42 INS42 INS45 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS32 INS42 INS42 INS45 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS32 INS42 INS42 INS45 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS32 INS42 INS42 INS45 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS42 UPD42 INS42 INS74 INS42 INS45 INS42 UPD42 INS42 INS74 INS42 INS43 INS42 INS34 INS43 INS42 INS34 INS43 INS42 INS34 INS43 INS42 INS34 INS43 INS42 INS34 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32