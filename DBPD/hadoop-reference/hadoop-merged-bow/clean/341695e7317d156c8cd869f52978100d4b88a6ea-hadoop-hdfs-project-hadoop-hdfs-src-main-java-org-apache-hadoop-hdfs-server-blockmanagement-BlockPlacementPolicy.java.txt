Merge trunk into branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1612742 13f79535-47bb-0310-9956-ffa450edef68

-  abstract public DatanodeDescriptor chooseReplicaToDelete(BlockCollection srcBC,
-                                      Block block, 
-                                      short replicationFactor,
-                                      Collection<DatanodeDescriptor> existingReplicas,
-                                      Collection<DatanodeDescriptor> moreExistingReplicas);
+  abstract public DatanodeStorageInfo chooseReplicaToDelete(
+      BlockCollection srcBC,
+      Block block, 
+      short replicationFactor,
+      Collection<DatanodeStorageInfo> existingReplicas,
+      Collection<DatanodeStorageInfo> moreExistingReplicas);
-  public void adjustSetsWithChosenReplica(final Map<String, 
-      List<DatanodeDescriptor>> rackMap,
-      final List<DatanodeDescriptor> moreThanOne,
-      final List<DatanodeDescriptor> exactlyOne, final DatanodeInfo cur) {
+  public void adjustSetsWithChosenReplica(
+      final Map<String, List<DatanodeStorageInfo>> rackMap,
+      final List<DatanodeStorageInfo> moreThanOne,
+      final List<DatanodeStorageInfo> exactlyOne,
+      final DatanodeStorageInfo cur) {
-    String rack = getRack(cur);
-    final List<DatanodeDescriptor> datanodes = rackMap.get(rack);
-    datanodes.remove(cur);
-    if (datanodes.isEmpty()) {
+    final String rack = getRack(cur.getDatanodeDescriptor());
+    final List<DatanodeStorageInfo> storages = rackMap.get(rack);
+    storages.remove(cur);
+    if (storages.isEmpty()) {
-      if (datanodes.size() == 1) {
-        moreThanOne.remove(datanodes.get(0));
-        exactlyOne.add(datanodes.get(0));
+      if (storages.size() == 1) {
+        final DatanodeStorageInfo remaining = storages.get(0);
+        moreThanOne.remove(remaining);
+        exactlyOne.add(remaining);
-      Collection<DatanodeDescriptor> dataNodes,
-      final Map<String, List<DatanodeDescriptor>> rackMap,
-      final List<DatanodeDescriptor> moreThanOne,
-      final List<DatanodeDescriptor> exactlyOne) {
-    for(DatanodeDescriptor node : dataNodes) {
-      final String rackName = getRack(node);
-      List<DatanodeDescriptor> datanodeList = rackMap.get(rackName);
-      if (datanodeList == null) {
-        datanodeList = new ArrayList<DatanodeDescriptor>();
-        rackMap.put(rackName, datanodeList);
+      final Iterable<DatanodeStorageInfo> storages,
+      final Map<String, List<DatanodeStorageInfo>> rackMap,
+      final List<DatanodeStorageInfo> moreThanOne,
+      final List<DatanodeStorageInfo> exactlyOne) {
+    for(DatanodeStorageInfo s: storages) {
+      final String rackName = getRack(s.getDatanodeDescriptor());
+      List<DatanodeStorageInfo> storageList = rackMap.get(rackName);
+      if (storageList == null) {
+        storageList = new ArrayList<DatanodeStorageInfo>();
+        rackMap.put(rackName, storageList);
-      datanodeList.add(node);
+      storageList.add(s);
-    for(List<DatanodeDescriptor> datanodeList : rackMap.values()) {
-      if (datanodeList.size() == 1) {
+    for(List<DatanodeStorageInfo> storageList : rackMap.values()) {
+      if (storageList.size() == 1) {
-        exactlyOne.add(datanodeList.get(0));
+        exactlyOne.add(storageList.get(0));
-        moreThanOne.addAll(datanodeList);
+        moreThanOne.addAll(storageList);

MOV44 UPD43 UPD42 UPD74 UPD74 UPD74 UPD74 UPD74 UPD43 INS83 UPD74 UPD42 INS74 UPD42 UPD74 UPD42 UPD74 MOV74 UPD42 UPD43 UPD43 UPD74 UPD43 UPD43 UPD42 INS83 UPD74 UPD43 UPD43 MOV43 MOV43 UPD74 MOV74 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD74 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 UPD74 UPD43 MOV42 INS42 INS60 INS21 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS83 INS43 INS59 INS32 INS32 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 MOV34 UPD74 UPD42 UPD43 UPD42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL34 DEL32 DEL74