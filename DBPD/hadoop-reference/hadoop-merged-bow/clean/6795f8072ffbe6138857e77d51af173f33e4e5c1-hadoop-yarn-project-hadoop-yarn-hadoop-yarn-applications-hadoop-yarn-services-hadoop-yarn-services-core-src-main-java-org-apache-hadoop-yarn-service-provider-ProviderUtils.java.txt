YARN-8079. Support static and archive unmodified local resources in service AM. Contributed by Suma Shivaprasad

+import org.apache.hadoop.fs.FileStatus;
+
+      if (isStaticFile(originalFile)) {
+        continue;
+      }
+      /* When source file is not specified, write new configs
+       * to compInstanceDir/fileName
+       * When source file is specified, it reads and performs variable
+       * substitution and merges in new configs, and writes a new file to
+       * compInstanceDir/fileName.
+       */
+
-      File destFile = new File(configFile.getDestFile());
+      Path destFile = new Path(configFile.getDestFile());
-      if (destFile.isAbsolute()) {
-        launcher.addLocalResource(symlink, configResource,
-            configFile.getDestFile());
-        log.info("Add config file for localization: " + symlink + " -> "
-            + configResource.getResource().getFile() + ", dest mount path: "
-            + configFile.getDestFile());
-      } else {
-        launcher.addLocalResource(symlink, configResource);
-        log.info("Add config file for localization: " + symlink + " -> "
-            + configResource.getResource().getFile());
-      }
+      addLocalResource(launcher, symlink, configResource, destFile);
+  public static synchronized void handleStaticFilesForLocalization(
+      AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService
+      .ComponentLaunchContext componentLaunchCtx)
+      throws IOException {
+    for (ConfigFile staticFile :
+        componentLaunchCtx.getConfiguration().getFiles()) {
+      // Only handle static file here.
+      if (!isStaticFile(staticFile)) {
+        continue;
+      }
+
+      if (staticFile.getSrcFile() == null) {
+        // This should not happen, AbstractClientProvider should have checked
+        // this.
+        throw new IOException("srcFile is null, please double check.");
+      }
+      Path sourceFile = new Path(staticFile.getSrcFile());
+
+      // Output properties to sourceFile if not existed
+      if (!fs.getFileSystem().exists(sourceFile)) {
+        throw new IOException(
+            "srcFile=" + sourceFile + " doesn't exist, please double check.");
+      }
+
+      FileStatus fileStatus = fs.getFileSystem().getFileStatus(sourceFile);
+      if (fileStatus.isDirectory()) {
+        throw new IOException("srcFile=" + sourceFile +
+            " is a directory, which is not supported.");
+      }
+
+      // Add resource for localization
+      LocalResource localResource = fs.createAmResource(sourceFile,
+          (staticFile.getType() == ConfigFile.TypeEnum.ARCHIVE ?
+              LocalResourceType.ARCHIVE :
+              LocalResourceType.FILE));
+      Path destFile = new Path(sourceFile.getName());
+      if (staticFile.getDestFile() != null && !staticFile.getDestFile()
+          .isEmpty()) {
+        destFile = new Path(staticFile.getDestFile());
+      }
+
+      String symlink = APP_RESOURCES_DIR + "/" + destFile.getName();
+      addLocalResource(launcher, symlink, localResource, destFile);
+    }
+  }
+
+  private static void addLocalResource(AbstractLauncher launcher,
+      String symlink, LocalResource localResource, Path destFile) {
+    if (destFile.isAbsolute()) {
+      launcher.addLocalResource(symlink, localResource, destFile.toString());
+      log.info("Added file for localization: "+ symlink +" -> " +
+          localResource.getResource().getFile() + ", dest mount path: " +
+          destFile);
+    } else{
+      launcher.addLocalResource(symlink, localResource);
+      log.info("Added file for localization: " + symlink+ " -> " +
+          localResource.getResource().getFile());
+    }
+  }
+
+  // Static file is files uploaded by users before launch the service. Which
+  // should be localized to container local disk without any changes.
+  private static boolean isStaticFile(ConfigFile file) {
+    return file.getType().equals(ConfigFile.TypeEnum.ARCHIVE) || file.getType()
+        .equals(ConfigFile.TypeEnum.STATIC);
+  }
+

INS26 INS40 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS70 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS41 INS42 INS42 INS40 INS44 INS32 INS8 INS42 INS42 INS42 INS42 MOV32 INS8 INS8 INS42 INS27 INS25 MOV21 INS43 INS42 INS32 INS42 INS25 INS25 INS60 INS25 INS60 INS25 INS60 INS60 INS25 INS60 INS21 INS21 INS21 INS21 INS21 INS32 INS32 INS32 INS8 UPD43 INS42 INS42 INS42 INS38 INS8 INS27 INS8 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS40 INS32 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS18 UPD42 UPD42 UPD42 INS42 MOV42 UPD42 MOV42 INS32 INS18 INS32 INS33 INS53 INS42 INS42 INS14 INS32 INS53 INS42 INS42 INS32 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS14 INS27 INS38 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS14 INS43 INS32 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS36 INS43 INS32 INS32 INS33 INS32 INS7 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS32 UPD42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS27 INS16 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS27 INS40 INS40 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 DEL45 DEL42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25