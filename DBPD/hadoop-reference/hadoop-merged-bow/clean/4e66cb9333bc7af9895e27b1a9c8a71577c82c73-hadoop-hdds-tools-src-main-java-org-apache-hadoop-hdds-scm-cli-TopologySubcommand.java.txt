HDDS-1653. Add option to "ozone scmcli printTopology" to order the output acccording to topology layer. Contributed by Xiaoyu Yao.  (#1067)

* HDDS-1653. Add option to "ozone scmcli printTopology" to order the output acccording to topology layer. Contributed by Xiaoyu Yao.

* use ip/hostname instead of network name for -o output and add smoke test

+import org.apache.hadoop.hdds.protocol.DatanodeDetails;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.TreeSet;
+  @CommandLine.Option(names = {"-o", "--order"},
+      description = "Print Topology ordered by network location")
+  private boolean order;
+
-          // format "hostname/ipAddress    networkLocation"
-          nodes.forEach(node -> {
-            System.out.print(node.getNodeID().getHostName() + "/" +
-                node.getNodeID().getIpAddress());
-            System.out.println("    " +
-                (node.getNodeID().getNetworkLocation() != null ?
-                    node.getNodeID().getNetworkLocation() : "NA"));
-          });
+          if (order) {
+            printOrderedByLocation(nodes);
+          } else {
+            printNodesWithLocation(nodes);
+          }
+
+  // Format
+  // Location: rack1
+  //  ipAddress(hostName)
+  private void printOrderedByLocation(List<HddsProtos.Node> nodes) {
+    HashMap<String, TreeSet<DatanodeDetails>> tree =
+        new HashMap<>();
+    for (HddsProtos.Node node : nodes) {
+      String location = node.getNodeID().getNetworkLocation();
+      if (location != null && !tree.containsKey(location)) {
+        tree.put(location, new TreeSet<>());
+      }
+      tree.get(location).add(DatanodeDetails.getFromProtoBuf(node.getNodeID()));
+    }
+    ArrayList<String> locations = new ArrayList<>(tree.keySet());
+    Collections.sort(locations);
+
+    locations.forEach(location -> {
+      System.out.println("Location: " + location);
+      tree.get(location).forEach(node -> {
+        System.out.println(" " + node.getIpAddress() + "(" + node.getHostName()
+            + ")");
+      });
+    });
+  }
+
+
+  // Format "ipAddress(hostName)    networkLocation"
+  private void printNodesWithLocation(Collection<HddsProtos.Node> nodes) {
+    nodes.forEach(node -> {
+      System.out.print(" " + node.getNodeID().getIpAddress() + "(" +
+          node.getNodeID().getHostName() + ")");
+      System.out.println("    " +
+          (node.getNodeID().getNetworkLocation() != null ?
+              node.getNodeID().getNetworkLocation() : "NA"));
+    });
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS77 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 MOV8 INS40 INS80 INS80 INS42 INS74 INS42 INS60 INS70 INS60 INS21 INS21 INS74 INS42 INS42 INS4 INS42 INS45 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS32 INS32 INS43 INS43 INS45 INS45 INS42 INS40 INS43 INS43 INS74 INS42 INS14 INS43 INS42 INS60 INS25 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS86 INS42 INS40 INS42 INS42 INS43 INS43 INS74 INS40 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS74 INS32 INS59 INS8 INS25 INS42 INS42 INS43 INS42 INS42 INS32 INS27 INS38 INS21 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS21 INS21 MOV27 INS8 INS42 INS32 INS42 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 MOV21 MOV25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS27 INS32 INS42 INS86 MOV32 INS42 INS8 INS8 INS74 INS45 INS42 INS42 INS42 INS42 INS59 INS8 UPD45 INS45 INS45 INS21 INS21 INS43 INS42 INS21 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42