HDFS-2112.  Move ReplicationMonitor to block management.  Contributed by Uma Maheswara Rao G


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1149771 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.BlockListAsLongs.BlockReportIterator;
+import org.apache.hadoop.hdfs.protocol.BlockListAsLongs.BlockReportIterator;
+import org.apache.hadoop.util.Daemon;
+  /**replicationRecheckInterval is how often namenode checks for new replication work*/
+  private final long replicationRecheckInterval;
+  
-
+  
+  /** Replication thread. */
+  final Daemon replicationThread = new Daemon(new ReplicationMonitor());
+  
-
+    
+    this.replicationRecheckInterval = 
+      conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_INTERVAL_KEY, 
+                  DFSConfigKeys.DFS_NAMENODE_REPLICATION_INTERVAL_DEFAULT) * 1000L;
+    FSNamesystem.LOG.info("replicationRecheckInterval = " + replicationRecheckInterval);
+    this.replicationThread.start();
+    if (replicationThread != null) replicationThread.interrupt();
+
+  /**
+   * Periodically calls computeReplicationWork().
+   */
+  private class ReplicationMonitor implements Runnable {
+    static final int INVALIDATE_WORK_PCT_PER_ITERATION = 32;
+    static final float REPLICATION_WORK_MULTIPLIER_PER_ITERATION = 2;
+
+    @Override
+    public void run() {
+      while (namesystem.isRunning()) {
+        try {
+          computeDatanodeWork();
+          processPendingReplications();
+          Thread.sleep(replicationRecheckInterval);
+        } catch (InterruptedException ie) {
+          LOG.warn("ReplicationMonitor thread received InterruptedException.", ie);
+          break;
+        } catch (IOException ie) {
+          LOG.warn("ReplicationMonitor thread received exception. " , ie);
+        } catch (Throwable t) {
+          LOG.warn("ReplicationMonitor thread received Runtime exception. ", t);
+          Runtime.getRuntime().exit(-1);
+        }
+      }
+    }
+  }
+
+
+  /**
+   * Compute block replication and block invalidation work that can be scheduled
+   * on data-nodes. The datanode will be informed of this work at the next
+   * heartbeat.
+   * 
+   * @return number of blocks scheduled for replication or removal.
+   * @throws IOException
+   */
+  int computeDatanodeWork() throws IOException {
+    int workFound = 0;
+    int blocksToProcess = 0;
+    int nodesToProcess = 0;
+    // Blocks should not be replicated or removed if in safe mode.
+    // It's OK to check safe mode here w/o holding lock, in the worst
+    // case extra replications will be scheduled, and these will get
+    // fixed up later.
+    if (namesystem.isInSafeMode())
+      return workFound;
+
+    synchronized (namesystem.heartbeats) {
+      blocksToProcess = (int) (namesystem.heartbeats.size() * ReplicationMonitor.REPLICATION_WORK_MULTIPLIER_PER_ITERATION);
+      nodesToProcess = (int) Math.ceil((double) namesystem.heartbeats.size()
+          * ReplicationMonitor.INVALIDATE_WORK_PCT_PER_ITERATION / 100);
+    }
+
+    workFound = this.computeReplicationWork(blocksToProcess);
+
+    // Update FSNamesystemMetrics counters
+    namesystem.writeLock();
+    try {
+      this.updateState();
+      this.scheduledReplicationBlocksCount = workFound;
+    } finally {
+      namesystem.writeUnlock();
+    }
+    workFound += this.computeInvalidateWork(nodesToProcess);
+    return workFound;
+  }
+

MOV26 INS26 INS40 INS23 INS23 INS55 INS31 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS42 INS43 INS23 INS23 INS31 INS29 INS39 INS42 INS43 INS8 INS65 INS42 INS65 INS42 INS42 INS14 INS21 INS21 INS21 INS25 INS65 INS42 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS8 INS65 INS65 INS65 INS42 INS60 INS60 INS60 INS25 INS51 INS21 INS21 INS54 INS21 INS41 INS66 INS66 INS43 INS14 INS7 INS32 INS32 INS27 INS21 INS66 INS42 INS34 INS42 INS34 INS42 INS61 INS66 INS66 INS66 INS66 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS32 INS41 INS40 INS8 INS7 INS32 INS8 INS8 INS7 INS42 INS42 INS43 INS22 INS27 INS40 INS42 INS27 INS22 INS42 INS42 INS33 INS32 INS32 INS8 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS21 INS21 INS42 INS32 INS42 INS42 INS21 INS21 INS21 INS42 INS32 INS42 INS52 INS42 INS32 INS34 INS45 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS54 INS7 INS7 INS52 INS42 INS42 INS32 INS7 INS32 INS52 INS42 INS42 INS42 INS42 INS40 INS40 INS8 INS12 INS12 INS12 INS42 INS11 INS42 INS11 INS52 INS42 INS22 INS42 INS42 INS42 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS39 INS36 INS39 INS32 INS52 INS42 INS32 INS32 INS32 INS43 INS42 INS21 INS10 INS43 INS42 INS21 INS43 INS42 INS21 INS21 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS32 INS40 INS27 INS34 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS38 INS40 INS42 INS11 INS40 INS42 INS42 INS34 INS39 INS32 INS40 INS42