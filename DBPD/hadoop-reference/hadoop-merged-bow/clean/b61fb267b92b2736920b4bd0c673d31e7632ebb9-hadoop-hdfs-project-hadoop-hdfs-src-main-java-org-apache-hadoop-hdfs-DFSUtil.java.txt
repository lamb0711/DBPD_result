HDFS-9390. Block management for maintenance states.

-   * Compartor for sorting DataNodeInfo[] based on decommissioned states.
-   * Decommissioned nodes are moved to the end of the array on sorting with
-   * this compartor.
+   * Comparator for sorting DataNodeInfo[] based on
+   * decommissioned and entering_maintenance states.
-  public static final Comparator<DatanodeInfo> DECOM_COMPARATOR = 
-    new Comparator<DatanodeInfo>() {
-      @Override
-      public int compare(DatanodeInfo a, DatanodeInfo b) {
-        return a.isDecommissioned() == b.isDecommissioned() ? 0 : 
-          a.isDecommissioned() ? 1 : -1;
-      }
-    };
-
-
-  /**
-   * Comparator for sorting DataNodeInfo[] based on decommissioned/stale states.
-   * Decommissioned/stale nodes are moved to the end of the array on sorting
-   * with this comparator.
-   */ 
-  @InterfaceAudience.Private 
-  public static class DecomStaleComparator implements Comparator<DatanodeInfo> {
-    private final long staleInterval;
-
-    /**
-     * Constructor of DecomStaleComparator
-     * 
-     * @param interval
-     *          The time interval for marking datanodes as stale is passed from
-     *          outside, since the interval may be changed dynamically
-     */
-    public DecomStaleComparator(long interval) {
-      this.staleInterval = interval;
-    }
-
+  public static class ServiceComparator implements Comparator<DatanodeInfo> {
+
+      // ENTERING_MAINTENANCE nodes should be after live nodes.
+      if (a.isEnteringMaintenance()) {
+        return b.isEnteringMaintenance() ? 0 : 1;
+      } else if (b.isEnteringMaintenance()) {
+        return -1;
+      } else {
+        return 0;
+      }
+    }
+  }
+
+  /**
+   * Comparator for sorting DataNodeInfo[] based on
+   * stale, decommissioned and entering_maintenance states.
+   * Order: live -> stale -> entering_maintenance -> decommissioned
+   */
+  @InterfaceAudience.Private 
+  public static class ServiceAndStaleComparator extends ServiceComparator {
+    private final long staleInterval;
+
+    /**
+     * Constructor of ServiceAndStaleComparator
+     * 
+     * @param interval
+     *          The time interval for marking datanodes as stale is passed from
+     *          outside, since the interval may be changed dynamically
+     */
+    public ServiceAndStaleComparator(long interval) {
+      this.staleInterval = interval;
+    }
+
+    @Override
+    public int compare(DatanodeInfo a, DatanodeInfo b) {
+      int ret = super.compare(a, b);
+      if (ret != 0) {
+        return ret;
+      }
+

INS55 INS29 INS83 INS83 INS42 MOV74 INS31 UPD42 INS43 MOV65 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV8 INS42 UPD42 UPD66 UPD66 MOV25 INS25 UPD66 UPD66 UPD66 INS60 INS25 INS32 INS8 INS25 UPD66 INS39 INS59 INS27 INS8 MOV42 UPD42 MOV42 INS41 INS32 INS8 INS8 INS42 INS48 INS42 INS34 INS41 INS16 UPD42 MOV42 UPD42 MOV42 INS41 INS41 INS42 INS42 INS42 INS42 INS32 MOV34 INS34 MOV38 INS34 MOV42 UPD42 MOV42 DEL66 DEL32 DEL32 DEL27 DEL32 DEL34 DEL16 DEL16 DEL41 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL31 DEL1 DEL14 DEL59 DEL23