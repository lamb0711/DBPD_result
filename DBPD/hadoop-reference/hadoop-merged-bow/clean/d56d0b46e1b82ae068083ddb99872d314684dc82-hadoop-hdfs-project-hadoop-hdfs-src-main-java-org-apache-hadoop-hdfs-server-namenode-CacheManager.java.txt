commit correct version of HDFS-5121

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import java.util.Map;
-import java.util.Map.Entry;
-import org.apache.hadoop.hdfs.protocol.AlreadyBeingCreatedException;
+import org.apache.hadoop.fs.permission.FsAction;
+import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPoolError;
+import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.PoolWritePermissionDeniedError;
+import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.UnexpectedAddPathCacheDirectiveException;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.InvalidPoolNameError;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.UnexpectedAddPathCacheDirectiveException;
-import org.apache.hadoop.hdfs.protocol.AddPathCacheDirectiveException.PoolWritePermissionDeniedError;
-import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.UnexpectedRemovePathCacheEntryException;
+import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.UnexpectedRemovePathCacheEntryException;
-  private final TreeMap<String, CachePool> cachePools =
+  private final TreeMap<String, CachePool> cachePoolsByName =
+   * Cache pools, sorted by ID
+   */
+  private final TreeMap<Long, CachePool> cachePoolsById =
+      new TreeMap<Long, CachePool>();
+
+  /**
+  /**
+   * The pool ID to use for a new pool.
+   */
+  private long nextPoolId;
+
+    cachePoolsByName.clear();
+    cachePoolsById.clear();
+    nextPoolId = 1;
-      throw new IOException("no more available IDs");
+      throw new IOException("no more available entry IDs");
+  synchronized long getNextPoolId() throws IOException {
+    if (nextPoolId == Long.MAX_VALUE) {
+      throw new IOException("no more available pool IDs");
+    }
+    return nextPoolId++;
+  }
+
-        PathCacheDirective directive, FSPermissionChecker pc) {
-    CachePool pool = cachePools.get(directive.getPool());
+        FSPermissionChecker pc, PathCacheDirective directive) {
+    CachePool pool = cachePoolsById.get(directive.getPoolId());
-          new InvalidPoolNameError(directive));
+          new InvalidPoolError(directive));
-    if (!pc.checkWritePermission(pool.getOwnerName(),
-        pool.getGroupName(), pool.getMode())) {
+    if (!pc.checkPermission(pool, FsAction.WRITE)) {
-      List<PathCacheDirective> directives, FSPermissionChecker pc) {
+      FSPermissionChecker pc, List<PathCacheDirective> directives) {
-      results.add(addDirective(directive, pc));
+      results.add(addDirective(pc, directive));
-  private synchronized Fallible<Long> removeEntry(long entryId,
-        FSPermissionChecker pc) {
+  private synchronized Fallible<Long> removeEntry(FSPermissionChecker pc,
+        long entryId) {
-    CachePool pool = cachePools.get(existing.getDirective().getPool());
+    CachePool pool = cachePoolsById.get(existing.getDirective().getPoolId());
-    if (!pc.isSuperUser()) {
-      if (!pc.checkWritePermission(pool.getOwnerName(),
-          pool.getGroupName(), pool.getMode())) {
-        LOG.info("removeEntry " + entryId + ": write permission denied to " +
-            "pool " + pool + " for entry " + existing);
-        return new Fallible<Long>(
-            new RemovePermissionDeniedException(entryId));
-      }
+    if (!pc.checkPermission(pool, FsAction.WRITE)) {
+      LOG.info("removeEntry " + entryId + ": write permission denied to " +
+          "pool " + pool + " for entry " + existing);
+      return new Fallible<Long>(
+          new RemovePermissionDeniedException(entryId));
-    
+
-  public synchronized List<Fallible<Long>> removeEntries(List<Long> entryIds,
-      FSPermissionChecker pc) {
+  public synchronized List<Fallible<Long>> removeEntries(FSPermissionChecker pc,
+      List<Long> entryIds) {
-      results.add(removeEntry(entryId, pc));
+      results.add(removeEntry(pc, entryId));
-  public synchronized List<PathCacheEntry> listPathCacheEntries(long prevId,
-      String pool, int maxReplies) {
+  public synchronized List<PathCacheEntry> listPathCacheEntries(
+      FSPermissionChecker pc, long prevId, Long poolId, int maxReplies) {
-    ArrayList<PathCacheEntry> replies =
-        new ArrayList<PathCacheEntry>(Math.min(MAX_PRE_ALLOCATED_ENTRIES, maxReplies));
+    ArrayList<PathCacheEntry> replies = new ArrayList<PathCacheEntry>(
+        Math.min(MAX_PRE_ALLOCATED_ENTRIES, maxReplies));
-    for (Entry<Long, PathCacheEntry> cur : tailMap.entrySet()) {
+    for (PathCacheEntry entry : tailMap.values()) {
-      if (pool.isEmpty() || cur.getValue().getDirective().
-            getPool().equals(pool)) {
-        replies.add(cur.getValue());
-        numReplies++;
+      long entryPoolId = entry.getDirective().getPoolId();
+      if (poolId == null || poolId <= 0 || entryPoolId == poolId) {
+        if (pc.checkPermission(
+            cachePoolsById.get(entryPoolId), FsAction.EXECUTE)) {
+          replies.add(entry);
+          numReplies++;
+        }
+  synchronized CachePool getCachePool(long id) {
+    return cachePoolsById.get(id);
+  }
+
+   * @return created CachePool
-  public synchronized void addCachePool(CachePoolInfo info)
+  public synchronized CachePool addCachePool(CachePoolInfo info)
-    if (poolName.isEmpty()) {
+    if (poolName == null || poolName.isEmpty()) {
-    CachePool pool = cachePools.get(poolName);
-    if (pool != null) {
+    if (cachePoolsByName.containsKey(poolName)) {
-    CachePool cachePool = new CachePool(poolName,
+    CachePool cachePool = new CachePool(getNextPoolId(), poolName,
-    cachePools.put(poolName, cachePool);
+    cachePoolsById.put(cachePool.getId(), cachePool);
+    cachePoolsByName.put(poolName, cachePool);
+    return cachePool;
-  public synchronized void modifyCachePool(CachePoolInfo info)
+  public synchronized void modifyCachePool(long poolId, CachePoolInfo info)
-    String poolName = info.getPoolName();
-    if (poolName.isEmpty()) {
-      throw new IOException("invalid empty cache pool name");
+    if (poolId <= 0) {
+      throw new IOException("invalid pool id " + poolId);
-    CachePool pool = cachePools.get(poolName);
-    if (pool == null) {
-      throw new IOException("cache pool " + poolName + " does not exist.");
+    if (!cachePoolsById.containsKey(poolId)) {
+      throw new IOException("cache pool id " + poolId + " does not exist.");
+    CachePool pool = cachePoolsById.get(poolId);
+    // Remove the old CachePoolInfo
+    removeCachePool(poolId);
+    // Build up the new CachePoolInfo
+    CachePoolInfo.Builder newInfo = CachePoolInfo.newBuilder(pool.getInfo());
+    if (info.getPoolName() != null) {
+      newInfo.setPoolName(info.getPoolName());
+      bld.append(prefix).
+      append("set name to ").append(info.getOwnerName());
+      prefix = "; ";
+    }
-      pool.setOwnerName(info.getOwnerName());
+      newInfo.setOwnerName(info.getOwnerName());
-      pool.setGroupName(info.getGroupName());
+      newInfo.setGroupName(info.getGroupName());
-      pool.setMode(info.getMode());
+      newInfo.setMode(info.getMode());
-        append(String.format("set mode to 0%3o", info.getMode()));
+        append(String.format("set mode to ", info.getMode()));
-      pool.setWeight(info.getWeight());
+      newInfo.setWeight(info.getWeight());
+    } else {
+      pool.setInfo(newInfo.build());
-    LOG.info("modified " + poolName + "; " + bld.toString());
+    // Put the newly modified info back in
+    cachePoolsById.put(poolId, pool);
+    cachePoolsByName.put(info.getPoolName(), pool);
+    LOG.info("modified pool id " + pool.getId()
+        + " (" + pool.getInfo().getPoolName() + "); "
+        + bld.toString());
-   * @param poolName
-   *          The name for the cache pool to remove.
+   * @param poolId
+   *          The id of the cache pool to remove.
-  public synchronized void removeCachePool(String poolName)
-      throws IOException {
-    CachePool pool = cachePools.remove(poolName);
-    if (pool == null) {
-      throw new IOException("can't remove nonexistent cache pool " + poolName);
+  public synchronized void removeCachePool(long poolId) throws IOException {
+    if (!cachePoolsById.containsKey(poolId)) {
+      throw new IOException("can't remove nonexistent cache pool id " + poolId);
+    // Remove all the entries associated with the pool
+    Iterator<Map.Entry<Long, PathCacheEntry>> it =
+        entriesById.entrySet().iterator();
+    while (it.hasNext()) {
+      Map.Entry<Long, PathCacheEntry> entry = it.next();
+      if (entry.getValue().getDirective().getPoolId() == poolId) {
+        it.remove();
+        entriesByDirective.remove(entry.getValue().getDirective());
+      }
+    }
+    // Remove the pool
+    CachePool pool = cachePoolsById.remove(poolId);
+    cachePoolsByName.remove(pool.getInfo().getPoolName());
-  public synchronized List<CachePoolInfo>
-      listCachePools(FSPermissionChecker pc, String prevKey,
-          int maxRepliesPerRequest) {
+  public synchronized List<CachePool> listCachePools(Long prevKey,
+      int maxRepliesPerRequest) {
-    ArrayList<CachePoolInfo> results = 
-        new ArrayList<CachePoolInfo>(Math.min(MAX_PREALLOCATED_REPLIES,
+    ArrayList<CachePool> results = 
+        new ArrayList<CachePool>(Math.min(MAX_PREALLOCATED_REPLIES,
-    SortedMap<String, CachePool> tailMap = cachePools.tailMap(prevKey, false);
-    for (Entry<String, CachePool> cur : tailMap.entrySet()) {
-      results.add(cur.getValue().getInfo(pc));
+    SortedMap<Long, CachePool> tailMap =
+        cachePoolsById.tailMap(prevKey, false);
+    for (CachePool pool : tailMap.values()) {
+      results.add(pool);

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 UPD40 UPD40 UPD40 INS23 INS23 INS31 MOV44 MOV44 MOV44 MOV44 INS31 INS31 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS39 INS59 MOV83 UPD39 MOV39 INS42 INS43 INS8 MOV44 INS83 INS43 INS42 INS44 INS8 INS43 INS44 MOV25 MOV29 INS83 INS83 INS39 INS42 INS44 MOV43 INS8 UPD74 UPD42 INS65 INS43 INS43 INS43 INS42 INS14 INS65 INS42 INS21 INS21 INS21 INS42 INS25 INS41 MOV25 UPD43 UPD42 MOV42 INS39 INS42 INS41 INS65 INS42 INS21 INS41 INS39 INS42 INS25 INS21 INS60 INS21 INS21 INS39 INS42 MOV25 INS60 INS61 INS60 INS21 UPD43 UPD43 INS66 INS42 INS42 INS42 INS74 INS66 INS32 INS32 INS7 INS27 INS8 INS37 UPD42 INS32 INS66 INS27 INS32 INS43 INS32 INS42 INS27 INS8 INS38 INS32 INS43 INS59 UPD27 INS8 INS32 INS32 UPD42 UPD66 INS38 INS74 INS59 INS32 INS8 MOV43 INS59 INS32 UPD42 UPD42 UPD74 MOV74 UPD74 INS43 INS43 MOV43 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS40 INS53 INS42 INS43 INS42 UPD42 INS60 INS25 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 INS42 INS34 INS53 INS32 INS42 INS42 INS40 INS42 INS32 INS32 INS21 INS21 MOV21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 UPD74 MOV74 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS32 INS42 INS42 INS32 UPD43 UPD43 MOV43 INS42 UPD42 INS42 INS42 INS14 UPD42 UPD42 MOV42 INS40 UPD42 UPD42 MOV42 INS40 INS42 INS39 INS59 INS27 INS8 INS42 INS33 MOV42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS7 INS32 INS42 INS42 UPD45 INS32 INS45 INS32 UPD45 INS42 INS42 INS42 INS42 UPD43 INS32 INS42 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS42 UPD42 UPD74 MOV74 UPD42 UPD42 UPD45 INS43 INS45 UPD42 UPD42 INS42 INS32 INS27 INS27 INS25 INS42 INS42 INS42 MOV43 INS27 INS27 INS42 INS42 INS42 INS42 INS32 INS32 INS42 MOV32 UPD42 MOV32 UPD42 UPD42 INS32 INS42 INS42 INS45 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS32 INS42 INS21 INS21 INS42 INS42 UPD43 UPD42 MOV42 UPD42 MOV42 UPD43 INS42 INS42 MOV32 UPD42 MOV42 INS27 INS27 INS42 INS42 INS32 MOV8 INS45 INS42 INS45 INS42 INS45 INS42 INS42 MOV32 INS42 INS45 INS42 MOV42 INS42 UPD45 INS42 INS42 INS42 INS42 UPD45 UPD42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 UPD42 UPD42 UPD42 MOV42 INS42 INS33 INS42 INS34 INS42 INS42 INS32 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL27 DEL25 DEL39 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL42 DEL42 DEL33 DEL27 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32