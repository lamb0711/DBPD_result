HDFS-8999. Allow a file to be closed with COMMITTED but not yet COMPLETE blocks.

-  public INodeFile toCompleteFile(long mtime) {
-    Preconditions.checkState(isUnderConstruction(),
-        "file is no longer under construction");
-    FileUnderConstructionFeature uc = getFileUnderConstructionFeature();
-    if (uc != null) {
-      assertAllBlocksComplete();
-      removeFeature(uc);
-      this.setModificationTime(mtime);
-    }
-    return this;
+  void toCompleteFile(long mtime, int numCommittedAllowed, short minReplication) {
+    final FileUnderConstructionFeature uc = getFileUnderConstructionFeature();
+    Preconditions.checkNotNull(uc, "File %s is not under construction", this);
+    assertAllBlocksComplete(numCommittedAllowed, minReplication);
+    removeFeature(uc);
+    setModificationTime(mtime);
-  private void assertAllBlocksComplete() {
+  private void assertAllBlocksComplete(int numCommittedAllowed,
+      short minReplication) {
-      Preconditions.checkState(blocks[i].isComplete(), "Failed to finalize"
-          + " %s %s since blocks[%s] is non-complete, where blocks=%s.",
-          getClass().getSimpleName(), this, i, Arrays.asList(blocks));
+      final String err = checkBlockComplete(blocks, i, numCommittedAllowed,
+          minReplication);
+      Preconditions.checkState(err == null,
+          "Unexpected block state: %s, file=%s (%s), blocks=%s (i=%s)",
+          err, this, getClass().getSimpleName(), Arrays.asList(blocks), i);
+  /**
+   * Check if the i-th block is COMPLETE;
+   * when the i-th block is the last block, it may be allowed to be COMMITTED.
+   *
+   * @return null if the block passes the check;
+   *              otherwise, return an error message.
+   */
+  static String checkBlockComplete(BlockInfo[] blocks, int i,
+      int numCommittedAllowed, short minReplication) {
+    final BlockInfo b = blocks[i];
+    final BlockUCState state = b.getBlockUCState();
+    if (state == BlockUCState.COMPLETE) {
+      return null;
+    }
+    if (b.isStriped() || i < blocks.length - numCommittedAllowed) {
+      return b + " is " + state + " but not COMPLETE";
+    }
+    if (state != BlockUCState.COMMITTED) {
+      return b + " is " + state + " but neither COMPLETE nor COMMITTED";
+    }
+    final int numExpectedLocations
+        = b.getUnderConstructionFeature().getNumExpectedLocations();
+    if (numExpectedLocations <= minReplication) {
+      return b + " is " + state + " but numExpectedLocations = "
+          + numExpectedLocations + " <= minReplication = " + minReplication;
+    }
+    return null;
+  }
+

INS31 INS39 INS42 INS44 INS44 MOV21 INS44 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS39 INS42 INS39 INS42 MOV21 MOV21 MOV21 INS39 INS42 INS39 INS42 INS65 INS65 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS60 INS60 INS25 INS25 INS25 INS60 INS25 INS41 INS83 INS66 INS66 INS66 INS66 INS43 INS85 INS83 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS83 INS39 INS59 INS27 INS8 INS33 UPD42 UPD42 MOV42 UPD45 INS52 INS42 INS42 INS60 INS42 INS42 INS42 MOV2 INS42 INS42 INS32 INS42 INS40 INS41 INS32 INS27 INS41 INS42 INS40 INS41 INS42 INS32 INS42 INS42 INS41 INS83 INS43 INS59 MOV32 MOV42 INS42 INS42 INS33 INS42 INS42 INS42 INS27 INS27 INS27 INS32 INS42 INS27 INS42 INS42 INS32 INS27 INS45 INS42 INS40 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 DEL83 DEL42 DEL43 DEL42 DEL32 DEL52 DEL42 DEL33 DEL27 DEL8 DEL25 DEL52 DEL41 DEL42 DEL32 DEL45 DEL45 DEL27