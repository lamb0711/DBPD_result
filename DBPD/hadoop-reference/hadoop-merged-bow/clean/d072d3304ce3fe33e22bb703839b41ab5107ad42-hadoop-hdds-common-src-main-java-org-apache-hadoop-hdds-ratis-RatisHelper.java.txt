HDDS-2020. Remove mTLS from Ozone GRPC. Contributed by Xiaoyu Yao.

Signed-off-by: Anu Engineer <aengineer@apache.org>

+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+import org.apache.hadoop.hdds.security.exception.SCMSecurityException;
+import org.apache.hadoop.hdds.security.x509.certificate.authority.CertificateServer;
+import org.apache.hadoop.hdds.security.x509.certificate.client.CertificateClient;
+import org.apache.hadoop.hdds.security.x509.certificate.utils.CertificateCodec;
-  static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf) {
-    if (conf.isGrpcTlsEnabled()) {
-      if (conf.isGrpcMutualTlsRequired()) {
-        return new GrpcTlsConfig(conf.getClientPrivateKeyFile(),
-            conf.getClientCertChainFile(), conf.getTrustStoreFile(), true);
-      } else {
-        return new GrpcTlsConfig(
-            null, null, conf.getTrustStoreFile(), false);
+  // For External gRPC client to server with gRPC TLS.
+  // No mTLS for external client as SCM CA does not issued certificates for them
+  static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,
+      X509Certificate caCert) {
+    GrpcTlsConfig tlsConfig = null;
+    if (conf.isSecurityEnabled() && conf.isGrpcTlsEnabled()) {
+      tlsConfig = new GrpcTlsConfig(null, null,
+          caCert, false);
+    }
+    return tlsConfig;
+  }
+
+  // For Internal gRPC client from SCM to DN with gRPC TLS
+  static GrpcTlsConfig createTlsClientConfigForSCM(SecurityConfig conf,
+      CertificateServer certificateServer) throws IOException {
+    if (conf.isSecurityEnabled() && conf.isGrpcTlsEnabled()) {
+      try {
+        X509Certificate caCert =
+            CertificateCodec.getX509Certificate(
+                certificateServer.getCACertificate());
+        return new GrpcTlsConfig(null, null,
+            caCert, false);
+      } catch (CertificateException ex) {
+        throw new SCMSecurityException("Fail to find SCM CA certificate.", ex);
-  static GrpcTlsConfig createTlsServerConfig(SecurityConfig conf) {
-    if (conf.isGrpcTlsEnabled()) {
-      if (conf.isGrpcMutualTlsRequired()) {
-        return new GrpcTlsConfig(
-            conf.getServerPrivateKeyFile(), conf.getServerCertChainFile(), null,
-            false);
-      } else {
-        return new GrpcTlsConfig(conf.getServerPrivateKeyFile(),
-            conf.getServerCertChainFile(), conf.getClientCertChainFile(), true);
-      }
+  // For gRPC server running DN container service with gPRC TLS
+  // No mTLS as the channel is shared for for external client, which
+  // does not have SCM CA issued certificates.
+  // In summary:
+  // authenticate from server to client is via TLS.
+  // authenticate from client to server is via block token (or container token).
+  static GrpcTlsConfig createTlsServerConfigForDN(SecurityConfig conf,
+      CertificateClient caClient)  {
+    if (conf.isSecurityEnabled() && conf.isGrpcTlsEnabled()) {
+      return new GrpcTlsConfig(
+          caClient.getPrivateKey(), caClient.getCertificate(),
+          null, false);

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS83 MOV43 INS42 MOV44 INS44 INS8 MOV43 UPD42 MOV44 INS44 INS43 INS8 INS43 UPD42 INS44 INS44 INS8 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS42 MOV25 MOV41 INS42 INS43 INS42 INS43 INS42 INS25 MOV41 INS42 MOV43 INS59 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS42 INS27 MOV8 INS42 INS33 INS32 MOV32 INS21 INS32 MOV32 INS54 INS32 INS32 INS42 INS42 INS7 MOV42 UPD42 MOV42 INS8 INS12 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS14 INS60 MOV41 INS44 INS8 MOV43 INS33 UPD9 MOV43 INS33 INS33 INS42 INS9 INS43 INS59 INS43 INS42 INS53 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 MOV43 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL9 DEL14 DEL41 DEL8 DEL8 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL33 DEL9 DEL14 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8