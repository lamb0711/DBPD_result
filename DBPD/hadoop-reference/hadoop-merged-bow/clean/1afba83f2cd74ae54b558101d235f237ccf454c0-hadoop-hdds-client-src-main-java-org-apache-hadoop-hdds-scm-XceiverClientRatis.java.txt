HDDS-870. Avoid creating block sized buffer in ChunkGroupOutputStream. Contributed by Shashikant Banerjee.

+import com.google.common.base.Preconditions;
+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;
-import java.util.ArrayList;
-import java.util.Objects;
-import java.util.Collection;
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+  // Map to track commit index at every server
+  private final ConcurrentHashMap<String, Long> commitInfoMap;
+
+  // create a separate RaftClient for watchForCommit API
+  private RaftClient watchClient;
+
+    commitInfoMap = new ConcurrentHashMap<>();
+    watchClient = null;
+  }
+
+  private void updateCommitInfosMap(
+      Collection<RaftProtos.CommitInfoProto> commitInfoProtos) {
+    // if the commitInfo map is empty, just update the commit indexes for each
+    // of the servers
+    if (commitInfoMap.isEmpty()) {
+      commitInfoProtos.forEach(proto -> commitInfoMap
+          .put(proto.getServer().getAddress(), proto.getCommitIndex()));
+      // In case the commit is happening 2 way, just update the commitIndex
+      // for the servers which have been successfully updating the commit
+      // indexes. This is important because getReplicatedMinCommitIndex()
+      // should always return the min commit index out of the nodes which have
+      // been replicating data successfully.
+    } else {
+      commitInfoProtos.forEach(proto -> commitInfoMap
+          .computeIfPresent(proto.getServer().getAddress(),
+              (address, index) -> {
+                index = proto.getCommitIndex();
+                return index;
+              }));
+    }
+    if (watchClient != null) {
+      closeRaftClient(watchClient);
+    }
+  // gets the minimum log index replicated to all servers
-  public void watchForCommit(long index, long timeout)
+  public long getReplicatedMinCommitIndex() {
+    OptionalLong minIndex =
+        commitInfoMap.values().parallelStream().mapToLong(v -> v).min();
+    return minIndex.isPresent() ? minIndex.getAsLong() : 0;
+  }
+
+  private void getFailedServer(
+      Collection<RaftProtos.CommitInfoProto> commitInfos) {
+    for (RaftProtos.CommitInfoProto proto : commitInfos) {
+
+    }
+  }
+
+  @Override
+  public long watchForCommit(long index, long timeout)
+    long commitIndex = getReplicatedMinCommitIndex();
+    if (commitIndex >= index) {
+      // return the min commit index till which the log has been replicated to
+      // all servers
+      return commitIndex;
+    }
-    RaftClient raftClient =
-        RatisHelper.newRaftClient(rpcType, getPipeline(), retryPolicy);
-    CompletableFuture<RaftClientReply> replyFuture = raftClient
+    if (watchClient == null) {
+      watchClient =
+          RatisHelper.newRaftClient(rpcType, getPipeline(), retryPolicy);
+    }
+    CompletableFuture<RaftClientReply> replyFuture = watchClient
+    RaftClientReply reply;
-      replyFuture.get(timeout, TimeUnit.MILLISECONDS);
+      reply = replyFuture.get(timeout, TimeUnit.MILLISECONDS);
-      closeRaftClient(raftClient);
+      closeRaftClient(watchClient);
-      raftClient =
+      watchClient =
-      raftClient
+      reply = watchClient
-      LOG.info("Could not commit " + index + " to all the nodes."
-          + "Committed by majority.");
-    } finally {
-      closeRaftClient(raftClient);
+      Optional<RaftProtos.CommitInfoProto>
+          proto = reply.getCommitInfos().stream().min(Comparator.comparing(
+          RaftProtos.CommitInfoProto :: getCommitIndex));
+      Preconditions.checkState(proto.isPresent());
+      String address = proto.get().getServer().getAddress();
+      // since 3 way commit has failed, the updated map from now on  will
+      // only store entries for those datanodes which have had successful
+      // replication.
+      commitInfoMap.remove(address);
+      LOG.info(
+          "Could not commit " + index + " to all the nodes. Server " + address
+              + " has failed" + "Committed by majority.");
+    return index;
+
-    Collection<XceiverClientAsyncReply.CommitInfo> commitInfos =
-        new ArrayList<>();
-                reply.getCommitInfos().forEach(e -> {
-                  XceiverClientAsyncReply.CommitInfo commitInfo =
-                      new XceiverClientAsyncReply.CommitInfo(
-                          e.getServer().getAddress(), e.getCommitIndex());
-                  commitInfos.add(commitInfo);
-                  asyncReply.setCommitInfos(commitInfos);
+                if (response.getResult() == ContainerProtos.Result.SUCCESS) {
+                  updateCommitInfosMap(reply.getCommitInfos());
-                });
+                }

MOV26 MOV26 INS26 UPD40 INS40 UPD40 UPD40 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 MOV43 INS59 INS83 INS39 INS42 INS44 INS8 INS78 MOV83 INS39 INS42 INS8 INS83 MOV39 INS42 INS44 INS8 MOV78 INS83 INS39 MOV42 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV8 MOV21 INS43 INS43 INS43 INS42 INS42 INS21 INS21 INS74 INS42 INS25 INS25 INS42 INS60 INS41 UPD74 MOV74 INS42 INS70 INS25 INS25 INS60 INS54 INS41 INS42 INS42 INS42 INS7 INS7 INS43 INS43 INS32 INS8 INS8 INS27 INS8 INS43 INS59 INS16 UPD43 INS44 INS42 INS8 INS39 INS27 INS8 INS27 INS8 INS43 INS59 MOV8 MOV12 INS42 INS42 INS14 INS42 INS33 INS42 INS40 INS42 INS42 INS21 INS21 INS42 INS33 INS21 INS42 INS42 INS32 INS32 INS32 INS34 UPD40 INS43 INS42 UPD42 INS32 INS42 INS42 INS41 INS42 INS33 MOV21 INS42 INS42 INS74 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 UPD42 INS7 INS21 INS60 INS21 INS60 INS21 INS43 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS42 INS32 INS42 INS86 UPD42 INS42 MOV32 INS7 INS7 INS74 INS59 INS32 INS43 INS59 INS32 INS42 INS59 INS32 INS59 INS32 INS32 INS42 INS59 INS42 UPD42 INS42 MOV32 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS86 INS42 INS42 INS42 MOV32 MOV42 MOV42 MOV40 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS32 INS42 UPD45 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS59 INS59 INS8 UPD42 MOV32 INS42 INS42 INS42 INS90 INS32 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS40 INS42 INS42 INS42 INS27 INS8 INS7 INS42 INS32 INS40 MOV21 MOV21 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL31 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL59 DEL40 DEL43 DEL42 DEL40 DEL43 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL86 DEL32 DEL21