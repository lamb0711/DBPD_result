HDFS-7484. Make FSDirectory#addINode take existing INodes as its parameter. Contributed by Jing Zhao.

+import com.google.common.base.Preconditions;
-  static boolean unprotectedRenameTo(FSDirectory fsd, String src, String dst,
+  static boolean renameForEditLog(FSDirectory fsd, String src, String dst,
-      final long removedSrc = fsd.removeLastINode(tx.srcIIP);
-      if (removedSrc == -1) {
-        NameNode.stateChangeLog.warn("DIR* FSDirectory.unprotectedRenameTo: "
-            + "failed to rename " + src + " to " + dst + " because the source" +
-            " can not be removed");
+      if (!tx.removeSrc4OldRename()) {
-   * @see #unprotectedRenameTo(FSDirectory, String, String, long,
-   * org.apache.hadoop.fs.Options.Rename...)
+   * @see {@link #unprotectedRenameTo(FSDirectory, String, String, INodesInPath,
+   * INodesInPath, long, BlocksMapUpdateInfo, Options.Rename...)}
-  static boolean unprotectedRenameTo(
+  static boolean renameForEditLog(
+   * @return whether a file/directory gets overwritten in the dst path
-    final long removedSrc = fsd.removeLastINode(tx.srcIIP);
-    if (removedSrc == -1) {
-      error = "Failed to rename " + src + " to " + dst +
-          " because the source can not be removed";
-      NameNode.stateChangeLog.warn("DIR* FSDirectory.unprotectedRenameTo: " +
-          error);
-      throw new IOException(error);
-    }
+    tx.removeSrc();
-    INode removedDst = null;
-      if (dstInode != null) { // dst exists remove it
-        if ((removedNum = fsd.removeLastINode(tx.dstIIP)) != -1) {
-          removedDst = tx.dstIIP.getLastINode();
+      if (dstInode != null) { // dst exists, remove it
+        removedNum = tx.removeDst();
+        if (removedNum != -1) {
-        if (removedDst != null) {
+        if (undoRemoveDst) {
-            List<INode> removedINodes = new ChunkedArrayList<>();
-            if (!removedDst.isInLatestSnapshot(tx.dstIIP.getLatestSnapshotId())) {
-              removedDst.destroyAndCollectBlocks(collectedBlocks,
-                  removedINodes);
-              filesDeleted = true;
-            } else {
-              filesDeleted = removedDst.cleanSubtree(
-                  Snapshot.CURRENT_STATE_ID, tx.dstIIP.getLatestSnapshotId(),
-                  collectedBlocks, removedINodes, true)
-                  .get(Quota.NAMESPACE) >= 0;
-            }
-            fsd.getFSNamesystem().removePathAndBlocks(src, null,
-                removedINodes, false);
+            filesDeleted = tx.cleanDst(collectedBlocks);
-
-      if (undoRemoveDst) {
-        // Rename failed - restore dst
-        if (dstParent.isDirectory() &&
-            dstParent.asDirectory().isWithSnapshot()) {
-          dstParent.asDirectory().undoRename4DstParent(removedDst,
-              dstIIP.getLatestSnapshotId());
-        } else {
-          fsd.addLastINodeNoQuotaCheck(tx.dstIIP, removedDst);
-        }
-        if (removedDst.isReference()) {
-          final INodeReference removedDstRef = removedDst.asReference();
-          final INodeReference.WithCount wc = (INodeReference.WithCount)
-              removedDstRef.getReferredINode().asReference();
-          wc.addReference(removedDstRef);
-        }
+      if (undoRemoveDst) { // Rename failed - restore dst
+        tx.restoreDst();
-    private final INodesInPath srcIIP;
-    private final INodesInPath dstIIP;
+    private INodesInPath srcIIP;
+    private final INodesInPath srcParentIIP;
+    private INodesInPath dstIIP;
+    private final INodesInPath dstParentIIP;
+    private INode oldDstChild;
-      this.dstIIP = dstIIP;
-      srcChild = srcIIP.getLastINode();
+      this.srcIIP = srcIIP;
+      this.dstIIP = dstIIP;
+      this.srcParentIIP = srcIIP.getParentINodesInPath();
+      this.dstParentIIP = dstIIP.getParentINodesInPath();
+
+      srcChild = this.srcIIP.getLastINode();
-      isSrcInSnapshot = srcChild.isInLatestSnapshot(srcIIP.getLatestSnapshotId());
+      final int srcLatestSnapshotId = srcIIP.getLatestSnapshotId();
+      isSrcInSnapshot = srcChild.isInLatestSnapshot(srcLatestSnapshotId);
-      srcParent = srcIIP.getINode(-2).asDirectory();
+      srcParent = this.srcIIP.getINode(-2).asDirectory();
-        srcChild.recordModification(srcIIP.getLatestSnapshotId());
+        srcChild.recordModification(srcLatestSnapshotId);
-        final INodeReference.WithName withName =
-            srcIIP.getINode(-2).asDirectory().replaceChild4ReferenceWithName(
-                srcChild, srcIIP.getLatestSnapshotId());
+        final INodeReference.WithName withName = srcParent
+            .replaceChild4ReferenceWithName(srcChild, srcLatestSnapshotId);
-        srcIIP = INodesInPath.replace(srcIIP, srcIIP.length() - 1, srcChild);
+        this.srcIIP = INodesInPath.replace(srcIIP, srcIIP.length() - 1,
+            srcChild);
-      this.srcIIP = srcIIP;
+    }
+
+    long removeSrc() throws IOException {
+      long removedNum = fsd.removeLastINode(srcIIP);
+      if (removedNum == -1) {
+        String error = "Failed to rename " + src + " to " + dst +
+            " because the source can not be removed";
+        NameNode.stateChangeLog.warn("DIR* FSDirRenameOp.unprotectedRenameTo:" +
+            error);
+        throw new IOException(error);
+      }
+      srcIIP = INodesInPath.replace(srcIIP, srcIIP.length() - 1, null);
+      return removedNum;
+    }
+
+    boolean removeSrc4OldRename() throws IOException {
+      final long removedSrc = fsd.removeLastINode(srcIIP);
+      if (removedSrc == -1) {
+        NameNode.stateChangeLog.warn("DIR* FSDirRenameOp.unprotectedRenameTo: "
+            + "failed to rename " + src + " to " + dst + " because the source" +
+            " can not be removed");
+        return false;
+      } else {
+        srcIIP = INodesInPath.replace(srcIIP, srcIIP.length() - 1, null);
+        return true;
+      }
+    }
+
+    long removeDst() throws IOException {
+      long removedNum = fsd.removeLastINode(dstIIP);
+      if (removedNum != -1) {
+        oldDstChild = dstIIP.getLastINode();
+        dstIIP = INodesInPath.replace(dstIIP, dstIIP.length() - 1, null);
+      }
+      return removedNum;
-      final INode dstParent = dstIIP.getINode(-2);
-      srcChild = srcIIP.getLastINode();
+      final INode dstParent = dstParentIIP.getLastINode();
-        int dstSnapshotId = dstIIP.getLatestSnapshotId();
-            withCount, dstSnapshotId);
+            withCount, dstIIP.getLatestSnapshotId());
-      return fsd.addLastINodeNoQuotaCheck(dstIIP, toDst);
+      return fsd.addLastINodeNoQuotaCheck(dstParentIIP, toDst) != null;
-      final INode dstParent = dstIIP.getINode(-2);
+      final INode dstParent = dstParentIIP.getLastINode();
-        fsd.addLastINodeNoQuotaCheck(srcIIP, srcChild);
+        fsd.addLastINodeNoQuotaCheck(srcParentIIP, srcChild);
+    void restoreDst() throws QuotaExceededException {
+      Preconditions.checkState(oldDstChild != null);
+      final INodeDirectory dstParent = dstParentIIP.getLastINode().asDirectory();
+      if (dstParent.isWithSnapshot()) {
+        dstParent.undoRename4DstParent(oldDstChild, dstIIP.getLatestSnapshotId());
+      } else {
+        fsd.addLastINodeNoQuotaCheck(dstParentIIP, oldDstChild);
+      }
+      if (oldDstChild != null && oldDstChild.isReference()) {
+        final INodeReference removedDstRef = oldDstChild.asReference();
+        final INodeReference.WithCount wc = (INodeReference.WithCount)
+            removedDstRef.getReferredINode().asReference();
+        wc.addReference(removedDstRef);
+      }
+    }
+
+    boolean cleanDst(BlocksMapUpdateInfo collectedBlocks)
+        throws QuotaExceededException {
+      Preconditions.checkState(oldDstChild != null);
+      List<INode> removedINodes = new ChunkedArrayList<>();
+      final boolean filesDeleted;
+      if (!oldDstChild.isInLatestSnapshot(dstIIP.getLatestSnapshotId())) {
+        oldDstChild.destroyAndCollectBlocks(collectedBlocks, removedINodes);
+        filesDeleted = true;
+      } else {
+        filesDeleted = oldDstChild.cleanSubtree(Snapshot.CURRENT_STATE_ID,
+            dstIIP.getLatestSnapshotId(), collectedBlocks, removedINodes,
+            true).get(Quota.NAMESPACE) >= 0;
+      }
+      fsd.getFSNamesystem().removePathAndBlocks(src, null, removedINodes,
+          false);
+      return filesDeleted;
+    }
+

INS26 INS40 UPD42 UPD42 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS65 INS65 INS21 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 MOV43 INS59 MOV21 MOV21 INS39 INS42 INS43 INS8 INS39 INS42 INS43 INS8 INS39 INS42 INS43 INS8 INS39 INS42 INS43 MOV8 INS39 INS42 INS44 INS43 INS8 INS66 UPD65 MOV65 INS66 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS60 INS42 INS60 MOV25 INS21 INS41 INS42 INS60 INS25 INS42 INS60 INS25 INS41 INS42 INS21 INS60 INS25 INS43 INS42 INS42 INS21 MOV60 INS60 INS25 MOV21 INS41 INS25 UPD42 MOV42 UPD42 MOV42 INS7 INS7 INS83 INS39 INS59 INS39 INS59 INS27 INS7 INS42 INS83 INS39 INS59 MOV27 INS8 INS8 INS39 INS59 INS27 INS8 INS42 INS27 INS32 INS83 INS43 INS59 INS32 MOV8 MOV8 INS27 INS42 INS32 INS83 INS39 INS59 INS38 INS8 INS8 INS42 INS38 MOV8 INS69 INS69 INS69 INS8 INS22 INS32 INS22 INS32 INS42 MOV32 INS42 INS32 INS42 INS38 INS60 INS42 INS32 INS42 INS32 INS21 MOV41 INS21 INS41 INS42 INS32 INS42 INS38 INS21 INS21 INS32 INS33 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS32 INS42 MOV42 INS27 INS32 INS42 INS42 INS27 INS42 INS32 INS21 MOV21 INS21 INS32 INS41 INS43 INS43 INS43 UPD43 INS21 INS21 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS42 INS42 INS42 INS27 INS33 INS42 INS42 INS42 INS32 INS7 INS9 INS42 INS42 INS42 INS34 INS7 INS7 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 INS42 INS33 INS32 MOV42 INS42 INS33 UPD42 MOV42 MOV42 INS42 INS33 INS42 INS42 INS32 INS32 INS7 UPD42 MOV42 UPD42 MOV42 INS9 INS42 INS42 INS42 UPD40 INS7 INS42 MOV8 INS32 INS52 INS42 INS22 UPD42 MOV42 INS22 INS42 INS42 MOV27 INS32 INS34 INS40 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 UPD42 MOV42 INS42 MOV42 UPD42 INS32 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 MOV21 INS42 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 UPD45 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS27 INS33 INS42 INS42 INS42 INS42 INS42 INS27 INS33 MOV32 INS42 INS42 UPD42 INS32 INS34 INS42 INS42 MOV27 INS45 INS45 INS32 INS34 INS32 INS34 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS40 MOV32 INS42 INS42 INS9 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 DEL40 DEL42 DEL45 DEL45 DEL27 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL83 DEL39 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL25 DEL83 DEL39 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL36 DEL42 DEL40 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL40 DEL40 DEL42 DEL32 DEL42 DEL9 DEL32 DEL42 DEL40 DEL32 DEL34 DEL27 DEL42 DEL33 DEL27 DEL25 DEL8 DEL83 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL38 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL34 DEL38 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL39 DEL42 DEL59 DEL60 DEL42 DEL32 DEL34 DEL38 DEL42 DEL32 DEL40 DEL32 DEL32 DEL32 DEL27 DEL25 DEL32