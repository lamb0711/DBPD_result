HDFS-13050: [SPS]: Create start/stop script to start external SPS process. Contributed by Surendra Singh Lilhore.

+import org.apache.hadoop.util.StringUtils;
-      LOG.info("Starting StoragePolicySatisfier, as admin requested to "
-          + "start it.");
+      LOG.info("Starting {} StoragePolicySatisfier, as admin requested to "
+          + "start it.", StringUtils.toLowerCase(spsMode.toString()));
-      LOG.info("Starting StoragePolicySatisfier.");
+      LOG.info("Starting {} StoragePolicySatisfier.",
+          StringUtils.toLowerCase(spsMode.toString()));
-    while (ctxt.isRunning()) {
+    while (isRunning) {
+      // Check if dependent service is running
+      if (!ctxt.isRunning()) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Upstream service is down, skipping the sps work.");
+        }
+        continue;
+      }
+                if (LOG.isDebugEnabled()) {
+                  LOG.debug("Block analysis status:{} for the file path:{}."
+                      + " Adding to attempt monitor queue for the storage "
+                      + "movement attempt finished report",
+                      status.status, fileStatus.getPath());
+                }
-                  LOG.debug("Adding trackID " + trackId
-                      + " back to retry queue as none of the blocks"
-                      + " found its eligible targets.");
+                  LOG.debug("Adding trackID:{} for the file path:{} back to"
+                      + " retry queue as none of the blocks found its eligible"
+                      + " targets.", trackId, fileStatus.getPath());
-                  LOG.debug("Adding trackID " + trackId
-                      + " back to retry queue as some of the blocks"
-                      + " are low redundant.");
+                  LOG.debug("Adding trackID:{} for the file path:{} back to "
+                      + "retry queue as some of the blocks are low redundant.",
+                      trackId, fileStatus.getPath());
-                  LOG.debug("Adding trackID " + trackId
-                      + " back to retry queue as some of the blocks"
-                      + " movement failed.");
+                  LOG.debug("Adding trackID:{} for the file path:{} back to "
+                      + "retry queue as some of the blocks movement failed.",
+                      trackId, fileStatus.getPath());
-                LOG.info("Block analysis skipped or blocks already satisfied"
-                    + " with storages. So, Cleaning up the Xattrs.");
+                LOG.info("Block analysis status:{} for the file path:{}."
+                    + " So, Cleaning up the Xattrs.", status.status,
+                    fileStatus.getPath());
-          isRunning = false;
-          // Stopping monitor thread and clearing queues as well
-          this.clearQueues();
-          this.storageMovementsMonitor.stopGracefully();
-          if (!(t instanceof InterruptedException)) {
-            LOG.info("StoragePolicySatisfier received an exception"
-                + " while shutting down.", t);
+          if (t instanceof InterruptedException) {
+            isRunning = false;
+            LOG.info("Stopping StoragePolicySatisfier.");
+            // Stopping monitor thread and clearing queues as well
+            this.clearQueues();
+            this.storageMovementsMonitor.stopGracefully();
+          } else {
+            LOG.error(
+                "StoragePolicySatisfier thread received runtime exception, "
+                    + "ignoring", t);
-          LOG.info("Stopping StoragePolicySatisfier.");
-    LOG.error("StoragePolicySatisfier thread received runtime exception. "
-        + "Stopping Storage policy satisfier work", t);
-      // So, should we add back? or leave it to user
-      LOG.info("BlockCollectionID: {} file is under construction. So, postpone"
-          + " this to the next retry iteration", fileInfo.getFileId());
+      LOG.info("File: {} is under construction. So, postpone"
+          + " this to the next retry iteration", fileInfo.getPath());
-      LOG.info("BlockCollectionID: {} file is not having any blocks."
-          + " So, skipping the analysis.", fileInfo.getFileId());
+      LOG.info("File: {} is not having any blocks."
+          + " So, skipping the analysis.", fileInfo.getPath());
+
+  /**
+   * Join main SPS thread.
+   */
+  public void join() throws InterruptedException {
+    //TODO Add join here on SPS rpc server also
+    storagePolicySatisfierThread.join();
+  }

INS26 INS40 INS31 INS29 INS83 INS39 INS42 INS43 INS8 INS65 INS42 INS21 INS42 INS66 INS32 INS25 INS42 INS42 INS38 INS8 INS8 INS32 UPD45 INS32 MOV32 INS25 INS18 INS25 UPD45 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS8 INS42 MOV8 UPD45 UPD42 UPD45 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS32 MOV62 MOV21 INS8 INS42 INS42 INS45 INS21 INS32 INS42 INS42 INS27 INS42 INS25 INS45 INS45 MOV32 INS8 MOV32 INS32 INS21 INS42 INS42 INS40 INS32 INS32 UPD45 UPD45 INS42 INS42 INS42 INS42 INS27 INS40 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS45 INS45 INS45 INS42 INS42 UPD45 UPD45 UPD45 INS42 INS42 UPD45 UPD45 INS42 INS42 UPD45 UPD45 INS42 INS42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL36 DEL38 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21