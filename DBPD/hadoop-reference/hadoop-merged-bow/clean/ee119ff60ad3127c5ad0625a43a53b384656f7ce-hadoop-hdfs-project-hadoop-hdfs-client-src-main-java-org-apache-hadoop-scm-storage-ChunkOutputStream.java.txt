HDFS-11004. Ozone : move Chunk IO and container protocol calls to hdfs-client. Contributed by Chen Liang.

-package org.apache.hadoop.ozone.web.storage;
+package org.apache.hadoop.scm.storage;
-import static org.apache.hadoop.ozone.OzoneConsts.CHUNK_SIZE;
-import static org.apache.hadoop.ozone.web.storage.ContainerProtocolCalls.*;
-import static org.apache.hadoop.ozone.web.storage.OzoneContainerTranslation.*;
+import static org.apache.hadoop.scm.storage.ContainerProtocolCalls.putKey;
+import static org.apache.hadoop.scm.storage.ContainerProtocolCalls.writeChunk;
+import org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.KeyValue;
+import org.apache.hadoop.scm.ScmConfigKeys;
-import org.apache.hadoop.ozone.web.exceptions.OzoneException;
-import org.apache.hadoop.ozone.web.handlers.UserArgs;
-import org.apache.hadoop.ozone.web.response.KeyInfo;
- * {@link DistributedStorageHandler} to write the value of a key to a sequence
+ * SCMClient to write the value of a key to a sequence
-class ChunkOutputStream extends OutputStream {
+public class ChunkOutputStream extends OutputStream {
-  private final KeyInfo key;
-  private final UserArgs args;
+  private final String key;
+  private final String traceID;
-   * @param args container protocol call args
+   * @param traceID container protocol call args
-  public ChunkOutputStream(String containerKey, KeyInfo key,
+  public ChunkOutputStream(String containerKey, String key,
-      UserArgs args) {
+      String traceID) {
-    this.args = args;
-    this.containerKeyData = fromKeyToContainerKeyDataBuilder(
-        xceiverClient.getPipeline().getContainerName(), containerKey, key);
+    this.traceID = traceID;
+    KeyValue keyValue = KeyValue.newBuilder()
+        .setKey("TYPE").setValue("KEY").build();
+    this.containerKeyData = KeyData.newBuilder()
+        .setContainerName(xceiverClient.getPipeline().getContainerName())
+        .setName(containerKey)
+        .addMetadata(keyValue);
-    this.buffer = ByteBuffer.allocate(CHUNK_SIZE);
+    this.buffer = ByteBuffer.allocate(ScmConfigKeys.CHUNK_SIZE);
-    if (buffer.position() == CHUNK_SIZE) {
+    if (buffer.position() == ScmConfigKeys.CHUNK_SIZE) {
-      int writeLen = Math.min(CHUNK_SIZE - buffer.position(), len);
+      int writeLen = Math.min(
+          ScmConfigKeys.CHUNK_SIZE - buffer.position(), len);
-      if (buffer.position() == CHUNK_SIZE) {
+      if (buffer.position() == ScmConfigKeys.CHUNK_SIZE) {
-        putKey(xceiverClient, containerKeyData.build(), args);
-      } catch (OzoneException e) {
-        throw new IOException("Unexpected OzoneException", e);
+        putKey(xceiverClient, containerKeyData.build(), traceID);
+      } catch (IOException e) {
+        throw new IOException("Unexpected Storage Container Exception", e);
-            key.getKeyName() + "_stream_" + streamId + "_chunk_" + ++chunkIndex)
+            key + "_stream_" + streamId + "_chunk_" + ++chunkIndex)
-      writeChunk(xceiverClient, chunk, key.getKeyName(), data, args);
-    } catch (OzoneException e) {
-      throw new IOException("Unexpected OzoneException", e);
+      writeChunk(xceiverClient, chunk, key, data, traceID);
+    } catch (IOException e) {
+      throw new IOException("Unexpected Storage Container Exception", e);

MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS83 UPD43 UPD43 UPD66 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 INS60 UPD42 UPD42 UPD42 INS43 INS59 UPD42 INS42 INS42 INS32 INS32 INS40 UPD42 INS32 INS42 INS32 INS42 INS42 INS40 MOV43 INS32 INS42 INS45 MOV32 MOV32 INS42 INS42 INS40 MOV42 UPD42 INS32 INS42 INS45 INS32 UPD42 MOV43 INS43 UPD45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 INS42 INS43 UPD45 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL65 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43