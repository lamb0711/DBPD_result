HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.

+import java.io.FileDescriptor;
+import org.apache.hadoop.hdfs.server.datanode.DataNode;
+import org.apache.hadoop.io.nativeio.NativeIO;
+import org.apache.hadoop.io.nativeio.NativeIOException;
+import org.apache.hadoop.util.Time;
+import org.slf4j.Logger;
-  private final OutputStream dataOut;
+  public static final Logger LOG = DataNode.LOG;
+
+  private FileDescriptor outFd = null;
+  /** Stream to block. */
+  private OutputStream dataOut;
+  /** Stream to checksum. */
+  private final long slowLogThresholdMs;
-  public ReplicaOutputStreams(OutputStream dataOut, OutputStream checksumOut,
-      DataChecksum checksum, boolean isTransientStorage) {
+  public ReplicaOutputStreams(OutputStream dataOut,
+      OutputStream checksumOut, DataChecksum checksum,
+      boolean isTransientStorage, long slowLogThresholdMs) {
-    this.checksumOut = checksumOut;
+    this.slowLogThresholdMs = slowLogThresholdMs;
+    this.checksumOut = checksumOut;
+
+    try {
+      if (this.dataOut instanceof FileOutputStream) {
+        this.outFd = ((FileOutputStream)this.dataOut).getFD();
+      } else {
+        LOG.debug("Could not get file descriptor for outputstream of class " +
+            this.dataOut.getClass());
+      }
+    } catch (IOException e) {
+      LOG.warn("Could not get file descriptor for outputstream of class " +
+          this.dataOut.getClass());
+    }
+  }
+
+  public FileDescriptor getOutFd() {
+    return outFd;
+  public void closeDataStream() throws IOException {
+    dataOut.close();
+    dataOut = null;
+  }
+
-      ((FileOutputStream)dataOut).getChannel().force(true);
+      sync((FileOutputStream)dataOut);
-      ((FileOutputStream)checksumOut).getChannel().force(true);
+      sync((FileOutputStream)checksumOut);
+  /**
+   * Flush the data stream if it supports it.
+   */
+  public void flushDataOut() throws IOException {
+    flush(dataOut);
+  }
+
+  /**
+   * Flush the checksum stream if it supports it.
+   */
+  public void flushChecksumOut() throws IOException {
+    flush(checksumOut);
+  }
+
+  private void flush(OutputStream dos) throws IOException {
+    long begin = Time.monotonicNow();
+    dos.flush();
+    long duration = Time.monotonicNow() - begin;
+    LOG.trace("ReplicaOutputStreams#flush takes {} ms.", duration);
+    if (duration > slowLogThresholdMs) {
+      LOG.warn("Slow flush took {} ms (threshold={} ms)", duration,
+          slowLogThresholdMs);
+    }
+  }
+
+  private void sync(FileOutputStream fos) throws IOException {
+    long begin = Time.monotonicNow();
+    fos.getChannel().force(true);
+    long duration = Time.monotonicNow() - begin;
+    LOG.trace("ReplicaOutputStreams#sync takes {} ms.", duration);
+    if (duration > slowLogThresholdMs) {
+      LOG.warn("Slow fsync took {} ms (threshold={} ms)", duration,
+          slowLogThresholdMs);
+    }
+  }
+
+  public long writeToDisk(byte[] b, int off, int len) throws IOException {
+    long begin = Time.monotonicNow();
+    dataOut.write(b, off, len);
+    long duration = Time.monotonicNow() - begin;
+    LOG.trace("DatanodeIO#writeToDisk takes {} ms.", duration);
+    if (duration > slowLogThresholdMs) {
+      LOG.warn("Slow BlockReceiver write data to disk cost: {} ms " +
+          "(threshold={} ms)", duration, slowLogThresholdMs);
+    }
+    return duration;
+  }
+
+  public void syncFileRangeIfPossible(long offset, long nbytes,
+      int flags) throws NativeIOException {
+    assert this.outFd != null : "null outFd!";
+    NativeIO.POSIX.syncFileRangeIfPossible(outFd, offset, nbytes, flags);
+  }
+
+  public void dropCacheBehindWrites(String identifier,
+      long offset, long len, int flags) throws NativeIOException {
+    assert this.outFd != null : "null outFd!";
+    NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(
+        identifier, outFd, offset, len, flags);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS29 INS83 INS83 INS39 INS59 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS40 INS42 INS42 INS33 INS65 INS65 INS42 INS39 INS42 MOV21 MOV21 INS21 MOV21 MOV21 INS54 INS42 INS41 INS42 INS21 INS21 INS65 INS42 INS21 INS65 INS42 INS21 INS43 INS42 INS42 INS60 INS21 INS60 INS21 INS25 INS43 INS42 INS42 INS60 INS21 INS60 INS21 INS25 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS21 INS60 INS21 INS25 INS41 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS6 INS21 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS6 INS21 INS66 INS66 INS7 INS8 INS12 INS42 INS32 INS7 INS66 INS32 INS66 INS32 INS42 INS39 INS59 INS32 INS39 INS59 INS32 INS27 INS8 INS42 INS39 INS59 INS32 INS39 INS59 INS32 INS27 INS8 INS39 INS85 INS39 INS59 INS32 INS39 INS59 INS32 INS27 INS8 INS42 INS27 INS45 INS32 INS42 INS27 INS45 INS32 INS22 INS42 INS25 INS44 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS21 INS42 INS32 INS32 INS42 INS9 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS21 INS22 INS33 INS40 INS42 INS42 INS42 INS42 INS42 INS22 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS62 INS8 INS8 INS43 INS42 INS21 MOV32 MOV32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS52 INS42 INS52 INS42 INS40 INS42 INS22 INS43 INS21 INS21 INS42 INS32 UPD42 MOV11 UPD42 MOV11 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS52 INS42 INS42 INS7 INS32 INS42 INS42 INS27 INS45 INS45 INS22 INS32 INS42 INS42 INS27 INS45 INS32 INS52 INS42 INS36 INS42 INS45 INS32 INS22 INS42 INS11 INS22 INS42 INS52 INS42 INS43 INS22 INS52 INS42 INS42 INS52 INS42 DEL83 DEL8 DEL36 DEL42 DEL9 DEL32 DEL36 DEL42 DEL9 DEL32