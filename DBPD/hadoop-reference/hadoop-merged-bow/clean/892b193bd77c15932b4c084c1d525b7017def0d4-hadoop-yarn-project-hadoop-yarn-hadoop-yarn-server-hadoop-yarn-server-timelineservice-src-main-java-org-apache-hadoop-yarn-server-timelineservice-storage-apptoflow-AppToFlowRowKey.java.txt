YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)

+import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.AppIdKeyConverter;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.KeyConverter;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.Separator;
+
+  private final KeyConverter<AppToFlowRowKey> appToFlowRowKeyConverter =
+      new AppToFlowRowKeyConverter();
-   * @param clusterId Cluster Id.
-   * @param appId Application Id.
-  public static byte[] getRowKey(String clusterId, String appId) {
-    return AppToFlowRowKeyConverter.getInstance().encode(
-        new AppToFlowRowKey(clusterId, appId));
+  public  byte[] getRowKey() {
+    return appToFlowRowKeyConverter.encode(this);
-    return AppToFlowRowKeyConverter.getInstance().decode(rowKey);
+    return new AppToFlowRowKeyConverter().decode(rowKey);
+  }
+
+  /**
+   * Encodes and decodes row key for app_flow table. The row key is of the form
+   * clusterId!appId. clusterId is a string and appId is encoded/decoded using
+   * {@link AppIdKeyConverter}.
+   * <p>
+   */
+  final private static class AppToFlowRowKeyConverter implements
+      KeyConverter<AppToFlowRowKey> {
+
+    private final KeyConverter<String> appIDKeyConverter =
+        new AppIdKeyConverter();
+
+    /**
+     * Intended for use in AppToFlowRowKey only.
+     */
+    private AppToFlowRowKeyConverter() {
+    }
+
+
+    /**
+     * App to flow row key is of the form clusterId!appId with the 2 segments
+     * separated by !. The sizes below indicate sizes of both of these segments
+     * in sequence. clusterId is a string. appId is represented as 12 bytes w.
+     * cluster Timestamp part of appid taking 8 bytes(long) and seq id taking 4
+     * bytes(int). Strings are variable in size (i.e. end whenever separator is
+     * encountered). This is used while decoding and helps in determining where
+     * to split.
+     */
+    private static final int[] SEGMENT_SIZES = {Separator.VARIABLE_SIZE,
+        Bytes.SIZEOF_LONG + Bytes.SIZEOF_INT };
+
+    /*
+     * (non-Javadoc)
+     *
+     * Encodes AppToFlowRowKey object into a byte array with each
+     * component/field in AppToFlowRowKey separated by Separator#QUALIFIERS.
+     * This leads to an app to flow table row key of the form clusterId!appId
+     *
+     * @see
+     * org.apache.hadoop.yarn.server.timelineservice.storage.common
+     * .KeyConverter#encode(java.lang.Object)
+     */
+    @Override
+    public byte[] encode(AppToFlowRowKey rowKey) {
+      byte[] first =
+          Separator.encode(rowKey.getClusterId(), Separator.SPACE,
+              Separator.TAB, Separator.QUALIFIERS);
+      byte[] second = appIDKeyConverter.encode(rowKey.getAppId());
+      return Separator.QUALIFIERS.join(first, second);
+    }
+
+    /*
+     * (non-Javadoc)
+     *
+     * Decodes an app to flow row key of the form clusterId!appId represented
+     * in byte format and converts it into an AppToFlowRowKey object.
+     *
+     * @see
+     * org.apache.hadoop.yarn.server.timelineservice.storage.common
+     * .KeyConverter#decode(byte[])
+     */
+    @Override
+    public AppToFlowRowKey decode(byte[] rowKey) {
+      byte[][] rowKeyComponents =
+          Separator.QUALIFIERS.split(rowKey, SEGMENT_SIZES);
+      if (rowKeyComponents.length != 2) {
+        throw new IllegalArgumentException("the row key is not valid for "
+            + "the app-to-flow table");
+      }
+      String clusterId =
+          Separator.decode(Bytes.toString(rowKeyComponents[0]),
+              Separator.QUALIFIERS, Separator.TAB, Separator.SPACE);
+      String appId = appIDKeyConverter.decode(rowKeyComponents[1]);
+      return new AppToFlowRowKey(clusterId, appId);
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS55 INS83 INS83 INS74 INS59 MOV29 MOV83 MOV5 INS42 INS8 INS29 INS83 INS83 INS83 INS42 INS74 INS23 INS31 INS23 INS31 INS31 INS43 INS43 INS42 INS14 INS41 INS65 INS43 INS43 INS83 INS83 INS74 INS59 INS29 INS83 INS42 INS8 INS29 INS83 INS83 INS83 INS5 INS59 INS78 INS83 INS5 INS42 MOV44 INS8 INS78 INS83 INS43 INS42 MOV44 INS8 INS42 INS42 INS43 INS32 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS43 INS43 INS42 INS14 INS65 INS65 INS39 INS85 INS42 INS4 INS42 INS39 INS85 INS43 INS42 INS60 INS60 INS41 INS42 INS42 INS5 UPD42 INS60 INS25 INS60 INS60 MOV41 INS42 INS42 INS42 INS52 INS14 INS42 INS42 INS42 INS43 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS40 INS27 INS42 INS5 INS59 INS5 INS59 INS32 INS39 INS85 INS5 INS59 INS27 INS8 MOV43 INS59 MOV43 INS59 MOV14 INS43 INS42 INS40 INS40 INS39 INS85 INS42 INS32 INS39 INS85 INS42 INS32 INS40 INS42 INS42 INS42 INS39 INS85 INS85 INS42 INS32 INS40 INS34 INS53 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS40 INS40 INS40 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS40 INS40 INS40 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS2 INS42 INS34 INS42 INS45 INS45 INS42 INS34 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL83 DEL42 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32