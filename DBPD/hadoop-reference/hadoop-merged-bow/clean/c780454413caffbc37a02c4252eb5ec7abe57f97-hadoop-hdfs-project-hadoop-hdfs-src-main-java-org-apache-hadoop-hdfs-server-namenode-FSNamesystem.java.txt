HDFS-5869. When starting rolling upgrade or NN restarts, NN should create a checkpoint right before the upgrade marker.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1565516 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.namenode.ha.HAState;
-  private RollingUpgradeInfo rollingUpgradeInfo;
+  private RollingUpgradeInfo rollingUpgradeInfo = null;
-  public static FSNamesystem loadFromDisk(Configuration conf)
-      throws IOException {
+  static FSNamesystem loadFromDisk(Configuration conf) throws IOException {
-    String nameserviceId = DFSUtil.getNamenodeNameServiceId(conf);
-      namesystem.loadFSImage(startOpt, fsImage,
-        HAUtil.isHAEnabled(conf, nameserviceId));
+      namesystem.loadFSImage(startOpt);
-  void loadFSImage(StartupOption startOpt, FSImage fsImage, boolean haEnabled)
-      throws IOException {
+  private void loadFSImage(StartupOption startOpt) throws IOException {
+    final FSImage fsImage = getFSImage();
+
-      boolean needToSave =
-        fsImage.recoverTransitionRead(startOpt, this, recovery) && !haEnabled;
+      final boolean staleImage
+          = fsImage.recoverTransitionRead(startOpt, this, recovery);
+      final boolean needToSave = staleImage && !haEnabled && !isRollingUpgrade(); 
+      LOG.info("Need to save fs image? " + needToSave
+          + " (staleImage=" + staleImage + ", haEnabled=" + haEnabled
+          + ", isRollingUpgrade=" + isRollingUpgrade() + ")");
+      checkRollingUpgrade("save namespace");
+
-
+      
-      return rollingUpgradeInfo != null? rollingUpgradeInfo
-          : RollingUpgradeInfo.EMPTY_INFO;
+      return rollingUpgradeInfo;
-      final String err = "Failed to start rolling upgrade";
-      checkNameNodeSafeMode(err);
+      final String action = "start rolling upgrade";
+      checkNameNodeSafeMode("Failed to " + action);
+      checkRollingUpgrade(action);
-      if (isRollingUpgrade()) {
-        throw new RollingUpgradeException(err
-            + " since a rolling upgrade is already in progress."
-            + "\nExisting rolling upgrade info: " + rollingUpgradeInfo);
-      }
-      
-      final CheckpointSignature cs = getFSImage().rollEditLog();
-      LOG.info("Successfully rolled edit log for preparing rolling upgrade."
-          + " Checkpoint signature: " + cs);
+      getFSImage().saveNamespace(this);
+      LOG.info("Successfully saved namespace for preparing rolling upgrade.");
+
+  private void checkRollingUpgrade(String action) throws RollingUpgradeException {
+    if (isRollingUpgrade()) {
+      throw new RollingUpgradeException("Failed to " + action
+          + " since a rolling upgrade is already in progress."
+          + " Existing rolling upgrade info:\n" + rollingUpgradeInfo);
+    }
+  }
+  

INS31 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS33 INS60 MOV43 INS42 INS42 INS25 INS83 MOV43 INS59 MOV32 INS8 INS42 INS32 INS60 INS21 INS21 INS21 INS21 INS21 INS53 INS42 INS83 INS83 INS39 INS59 INS32 INS32 INS42 INS32 INS32 INS32 INS14 UPD42 MOV32 INS42 INS27 INS42 INS42 INS27 INS42 INS45 UPD42 UPD45 MOV42 INS27 INS42 INS42 MOV32 UPD42 MOV42 INS52 INS45 MOV43 INS27 INS42 MOV38 INS38 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 UPD45 MOV45 UPD42 MOV42 INS45 INS42 INS45 INS45 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL44 DEL39 DEL42 DEL44 DEL27 DEL42 DEL33 DEL27 DEL42 DEL40 DEL16 DEL42 DEL32 DEL21 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL45 DEL45 DEL42 DEL27