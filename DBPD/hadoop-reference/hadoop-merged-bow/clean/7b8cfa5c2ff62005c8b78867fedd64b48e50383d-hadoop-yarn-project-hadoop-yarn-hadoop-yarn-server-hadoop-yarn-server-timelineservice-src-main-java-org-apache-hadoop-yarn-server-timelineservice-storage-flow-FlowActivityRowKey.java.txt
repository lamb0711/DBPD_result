YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)

-import org.apache.hadoop.hbase.util.Bytes;
-import org.apache.hadoop.yarn.server.timelineservice.storage.common.Separator;
-  private final long dayTs;
+  private final Long dayTs;
-  public FlowActivityRowKey(String clusterId, long dayTs, String userId,
+  public FlowActivityRowKey(String clusterId, Long dayTs, String userId,
-  public long getDayTimestamp() {
+  public Long getDayTimestamp() {
-    return Bytes.toBytes(Separator.QUALIFIERS.joinEncoded(clusterId, ""));
+    return FlowActivityRowKeyConverter.getInstance().encode(
+        new FlowActivityRowKey(clusterId, null, null, null));
-    return Separator.QUALIFIERS.join(
-        Bytes.toBytes(Separator.QUALIFIERS.encode(clusterId)),
-        Bytes.toBytes(TimelineStorageUtils.invertLong(dayTs)), new byte[0]);
+    return FlowActivityRowKeyConverter.getInstance().encode(
+        new FlowActivityRowKey(clusterId, dayTs, null, null));
-
-    return Separator.QUALIFIERS.join(
-        Bytes.toBytes(Separator.QUALIFIERS.encode(clusterId)),
-        Bytes.toBytes(TimelineStorageUtils.invertLong(eventTs)),
-        Bytes.toBytes(Separator.QUALIFIERS.encode(userId)),
-        Bytes.toBytes(Separator.QUALIFIERS.encode(flowName)));
+    return FlowActivityRowKeyConverter.getInstance().encode(
+        new FlowActivityRowKey(clusterId, eventTs, userId, flowName));
-    byte[][] rowKeyComponents = Separator.QUALIFIERS.split(rowKey);
-
-    if (rowKeyComponents.length < 4) {
-      throw new IllegalArgumentException("the row key is not valid for "
-          + "a flow activity");
-    }
-
-    String clusterId = Separator.QUALIFIERS.decode(Bytes
-        .toString(rowKeyComponents[0]));
-    long dayTs =
-        TimelineStorageUtils.invertLong(Bytes.toLong(rowKeyComponents[1]));
-    String userId = Separator.QUALIFIERS.decode(Bytes
-        .toString(rowKeyComponents[2]));
-    String flowName = Separator.QUALIFIERS.decode(Bytes
-        .toString(rowKeyComponents[3]));
-    return new FlowActivityRowKey(clusterId, dayTs, userId, flowName);
+    return FlowActivityRowKeyConverter.getInstance().decode(rowKey);

INS43 INS43 INS42 INS43 INS42 INS41 INS42 INS32 INS32 UPD42 MOV42 INS14 UPD42 MOV42 INS14 UPD42 MOV42 INS14 INS32 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS33 INS33 INS33 UPD42 UPD42 MOV42 INS43 INS42 INS42 INS33 INS33 UPD42 UPD42 MOV42 MOV43 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL39 DEL39 DEL39 DEL40 DEL42 DEL45 DEL32 DEL40 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL39 DEL85 DEL5 DEL34 DEL3 DEL40 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL39 DEL85 DEL85 DEL5 DEL42 DEL40 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL14 DEL41