YARN-2079. Recover NonAggregatingLogHandler state upon nodemanager restart. (Contributed by Jason Lowe)

+import org.apache.hadoop.yarn.proto.YarnServerNodemanagerRecoveryProtos.LogDeleterProto;
+import org.apache.hadoop.yarn.server.nodemanager.recovery.NMStateStoreService;
+import org.apache.hadoop.yarn.server.nodemanager.recovery.NMStateStoreService.RecoveredLogDeleterState;
+  private final NMStateStoreService stateStore;
-      DeletionService delService, LocalDirsHandlerService dirsHandler) {
+      DeletionService delService, LocalDirsHandlerService dirsHandler,
+      NMStateStoreService stateStore) {
+    this.stateStore = stateStore;
+    recover();
+  private void recover() throws IOException {
+    if (stateStore.canRecover()) {
+      RecoveredLogDeleterState state = stateStore.loadLogDeleterState();
+      long now = System.currentTimeMillis();
+      for (Map.Entry<ApplicationId, LogDeleterProto> entry :
+        state.getLogDeleterMap().entrySet()) {
+        ApplicationId appId = entry.getKey();
+        LogDeleterProto proto = entry.getValue();
+        long deleteDelayMsec = proto.getDeletionTime() - now;
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Scheduling deletion of " + appId + " logs in "
+              + deleteDelayMsec + " msec");
+        }
+        LogDeleterRunnable logDeleter =
+            new LogDeleterRunnable(proto.getUser(), appId);
+        try {
+          sched.schedule(logDeleter, deleteDelayMsec, TimeUnit.MILLISECONDS);
+        } catch (RejectedExecutionException e) {
+          // Handling this event in local thread before starting threads
+          // or after calling sched.shutdownNow().
+          logDeleter.run();
+        }
+      }
+    }
+  }
+        ApplicationId appId = appFinishedEvent.getApplicationId();
-            + appFinishedEvent.getApplicationId() + ", with delay of "
+            + appId + ", with delay of "
-        LogDeleterRunnable logDeleter =
-            new LogDeleterRunnable(appOwners.remove(appFinishedEvent
-                  .getApplicationId()), appFinishedEvent.getApplicationId());
+        String user = appOwners.remove(appId);
+        if (user == null) {
+          LOG.error("Unable to locate user for " + appId);
+          break;
+        }
+        LogDeleterRunnable logDeleter = new LogDeleterRunnable(user, appId);
+        long deletionTimestamp = System.currentTimeMillis()
+            + this.deleteDelaySeconds * 1000;
+        LogDeleterProto deleterProto = LogDeleterProto.newBuilder()
+            .setUser(user)
+            .setDeletionTime(deletionTimestamp)
+            .build();
+        try {
+          stateStore.storeLogDeleter(appId, deleterProto);
+        } catch (IOException e) {
+          LOG.error("Unable to record log deleter state", e);
+        }
+      try {
+        NonAggregatingLogHandler.this.stateStore.removeLogDeleter(
+            this.applicationId);
+      } catch (IOException e) {
+        LOG.error("Error removing log deletion state", e);
+      }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS43 INS59 INS44 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS43 INS42 INS21 INS21 INS42 INS25 INS42 INS7 INS32 INS32 INS8 INS60 INS60 INS25 INS60 INS60 INS60 INS54 INS54 INS22 INS42 INS42 INS42 INS42 INS60 INS60 INS70 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS39 INS59 INS43 INS59 INS8 INS12 INS8 INS12 INS52 INS42 INS43 INS59 INS39 INS59 INS44 INS32 INS8 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS32 INS42 INS33 INS21 INS10 INS42 INS42 INS14 INS42 INS27 INS42 INS42 INS32 INS21 INS44 INS8 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS32 INS74 INS42 INS32 INS42 INS60 INS60 INS60 INS25 INS60 INS54 INS42 MOV42 MOV42 INS42 INS32 INS43 INS42 INS42 INS32 INS27 INS32 INS42 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS8 MOV43 INS59 INS8 INS12 UPD42 MOV42 INS42 INS27 INS42 INS42 INS42 INS22 INS34 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS22 INS42 INS22 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS21 INS42 INS14 INS21 INS44 INS8 INS45 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 MOV43 INS32 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS42 DEL42 DEL32 DEL32 DEL32 DEL14 DEL59 DEL60