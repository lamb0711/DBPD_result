HDFS-4985.  Add storage type to the protocol and expose it in block report and block locations

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1516323 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.base.Preconditions;
+import org.apache.hadoop.hdfs.StorageType;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.StorageTypeProto;
+    StorageType[] storageTypes = b.getStorageTypes();
+    if (storageTypes != null) {
+      for (int i = 0; i < storageTypes.length; ++i) {
+        builder.addStorageTypes(PBHelper.convertStorageType(storageTypes[i]));
+      }
+    }
+
+    List<StorageTypeProto> storageTypesList = proto.getStorageTypesList();
+    StorageType[] storageTypes = new StorageType[locs.size()];
+
+
+    // The media should correspond to targets 1:1. If not then
+    // ignore the media information (left as default).
+    if ((storageTypesList != null) &&
+        (storageTypesList.size() == locs.size())) {
+      for (int i = 0; i < storageTypesList.size(); ++i) {
+        storageTypes[i] = PBHelper.convertType(storageTypesList.get(i));
+      }
+    }
+
-        proto.getOffset(), proto.getCorrupt());
+        storageTypes, proto.getOffset(), proto.getCorrupt());
-        .setState(PBHelper.convert(s.getState()))
+        .setState(PBHelper.convertState(s.getState()))
+        .setStorageType(PBHelper.convertStorageType(s.getStorageType()))
-  private static StorageState convert(State state) {
+  private static StorageState convertState(State state) {
-  public static DatanodeStorage convert(DatanodeStorageProto s) {
-    return new DatanodeStorage(s.getStorageID(), PBHelper.convert(s.getState()));
+  private static StorageTypeProto convertStorageType(
+      StorageType type) {
+    switch(type) {
+    case DISK:
+      return StorageTypeProto.DISK;
+    case SSD:
+      return StorageTypeProto.SSD;
+    default:
+      Preconditions.checkState(
+          false,
+          "Failed to update StorageTypeProto with new StorageType " +
+              type.toString());
+      return StorageTypeProto.DISK;
+    }
-  private static State convert(StorageState state) {
+  public static DatanodeStorage convert(DatanodeStorageProto s) {
+    if (s.hasStorageType()) {
+      return new DatanodeStorage(s.getStorageID(),
+                                 PBHelper.convertState(s.getState()),
+                                 PBHelper.convertType(s.getStorageType()));
+    } else {
+      return new DatanodeStorage(s.getStorageID(),
+                                 PBHelper.convertState(s.getState()));
+    }
+  }
+
+  private static State convertState(StorageState state) {
+  private static StorageType convertType(StorageTypeProto type) {
+    switch(type) {
+      case DISK:
+        return StorageType.DISK;
+      case SSD:
+        return StorageType.SSD;
+      default:
+        return StorageType.DEFAULT;
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 UPD42 INS83 INS83 INS43 INS42 INS44 INS8 INS8 UPD42 INS83 INS83 INS43 INS42 INS44 INS8 INS60 INS25 INS60 INS60 INS25 INS42 INS43 INS42 INS50 INS25 INS42 INS43 INS42 INS50 INS5 INS59 INS27 INS8 INS74 INS59 INS5 INS59 INS27 INS8 INS42 INS42 INS49 INS41 INS49 INS41 INS49 INS21 INS41 INS32 INS8 INS8 INS42 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS43 INS85 INS42 INS32 INS42 INS33 INS24 INS43 INS43 INS42 INS32 INS43 INS85 INS42 INS3 INS36 INS36 INS24 INS42 INS40 INS42 INS40 INS32 INS40 INS42 INS42 MOV41 INS41 INS42 INS40 INS42 INS40 INS40 INS42 INS42 INS42 INS58 INS27 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS27 INS27 INS58 INS27 INS38 INS8 INS42 INS32 INS42 INS42 INS9 INS27 INS14 INS39 INS59 INS42 INS40 INS42 INS21 INS43 INS85 INS42 INS42 INS42 INS33 INS32 INS32 INS39 INS59 INS42 INS32 INS42 INS21 MOV32 INS42 INS32 INS45 INS32 MOV32 INS32 INS43 INS32 INS32 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS7 MOV32 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS2 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL8