HDFS-4244. Support snapshot deletion.  Contributed by Jing Zhao


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1430953 13f79535-47bb-0310-9956-ffa450edef68

+   * @param snapshotRoot The directory path where the snapshot is taken
-   * @param path The directory path where the snapshot is taken
-  public void createSnapshot(String snapshotName, String path)
+  public void createSnapshot(String snapshotRoot, String snapshotName)
-        throw new SafeModeException("Cannot create snapshot for " + path,
-            safeMode);
+        throw new SafeModeException("Cannot create snapshot for "
+            + snapshotRoot, safeMode);
-      checkOwner(path);
+      checkOwner(snapshotRoot);
-        snapshotManager.createSnapshot(snapshotName, path);
+        snapshotManager.createSnapshot(snapshotRoot, snapshotName);
-      getEditLog().logCreateSnapshot(snapshotName, path);
+      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName);
-      Path snapshotRoot = new Path(path, HdfsConstants.DOT_SNAPSHOT_DIR + "/"
-          + snapshotName);
+      Path rootPath = new Path(snapshotRoot, HdfsConstants.DOT_SNAPSHOT_DIR
+          + Path.SEPARATOR + snapshotName);
-          "createSnapshot", path, snapshotRoot.toString(), null);
+          "createSnapshot", snapshotRoot, rootPath.toString(), null);
+  
+  /**
+   * Delete a snapshot of a snapshottable directory
+   * @param snapshotRoot The snapshottable directory
+   * @param snapshotName The name of the to-be-deleted snapshot
+   * @throws SafeModeException
+   * @throws IOException
+   */
+  public void deleteSnapshot(String snapshotRoot, String snapshotName)
+      throws SafeModeException, IOException {
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException(
+            "Cannot delete snapshot for " + snapshotRoot, safeMode);
+      }
+      checkOwner(snapshotRoot);
+
+      BlocksMapUpdateInfo collectedBlocks = new BlocksMapUpdateInfo();
+      dir.writeLock();
+      try {
+        snapshotManager.deleteSnapshot(snapshotRoot, snapshotName,
+            collectedBlocks);
+      } finally {
+        dir.writeUnlock();
+      }
+      this.removeBlocks(collectedBlocks);
+      collectedBlocks.clear();
+      getEditLog().logDeleteSnapshot(snapshotRoot, snapshotName);
+    } finally {
+      writeUnlock();
+    }
+    getEditLog().logSync();
+    
+    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      Path rootPath = new Path(snapshotRoot, HdfsConstants.DOT_SNAPSHOT_DIR
+          + Path.SEPARATOR + snapshotName);
+      logAuditEvent(UserGroupInformation.getCurrentUser(), getRemoteIp(),
+          "deleteSnapshot", rootPath.toString(), null, null);
+    }
+  }

MOV44 INS31 MOV65 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 UPD42 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS54 INS21 INS25 UPD42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS32 INS8 INS8 INS32 INS27 INS8 INS42 INS21 INS25 INS21 INS60 INS21 INS54 INS21 INS21 INS21 INS21 INS32 INS42 INS32 INS32 INS60 INS21 INS32 INS32 INS8 INS32 INS43 INS59 INS32 INS8 INS8 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS40 INS42 INS53 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS21 INS21 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS32 INS45 INS32 INS33 INS33 UPD42 UPD42 INS14 INS43 INS32 INS32 INS42 INS43 INS42 INS27 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS40 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 UPD42 INS42 INS45 INS42 DEL45