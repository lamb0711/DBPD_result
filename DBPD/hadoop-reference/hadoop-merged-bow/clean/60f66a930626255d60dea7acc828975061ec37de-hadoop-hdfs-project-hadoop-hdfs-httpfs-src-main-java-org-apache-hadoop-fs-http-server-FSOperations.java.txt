Merge branch 'trunk' into HADOOP-12756

-import org.apache.hadoop.hdfs.protocol.AclException;
-   * This class is used to group a FileStatus and an AclStatus together.
-   * It's needed for the GETFILESTATUS and LISTSTATUS calls, which take
-   * most info from the FileStatus and a wee bit from the AclStatus.
+   * @param fileStatus a FileStatus object
+   * @return JSON map suitable for wire transport
-  private static class StatusPair {
-    private FileStatus fileStatus;
-    private AclStatus aclStatus;
-
-    /**
-     * Simple constructor
-     * @param fileStatus Existing FileStatus object
-     * @param aclStatus Existing AclStatus object
-     */
-    public StatusPair(FileStatus fileStatus, AclStatus aclStatus) {
-      this.fileStatus = fileStatus;
-      this.aclStatus = aclStatus;
-    }
-
-    /**
-     * Create one StatusPair by performing the underlying calls to
-     * fs.getFileStatus and fs.getAclStatus
-     * @param fs The FileSystem where 'path' lives
-     * @param path The file/directory to query
-     * @throws IOException
-     */
-    public StatusPair(FileSystem fs, Path path) throws IOException {
-      fileStatus = fs.getFileStatus(path);
-      aclStatus = null;
-      try {
-        aclStatus = fs.getAclStatus(path);
-      } catch (AclException e) {
-        /*
-         * The cause is almost certainly an "ACLS aren't enabled"
-         * exception, so leave aclStatus at null and carry on.
-         */
-      } catch (UnsupportedOperationException e) {
-        /* Ditto above - this is the case for a local file system */
-      }
-    }
-
-    /**
-     * Return a Map suitable for conversion into JSON format
-     * @return The JSONish Map
-     */
-    public Map<String,Object> toJson() {
-      Map<String,Object> json = new LinkedHashMap<String,Object>();
-      json.put(HttpFSFileSystem.FILE_STATUS_JSON, toJsonInner(true));
-      return json;
-    }
-
-    /**
-     * Return in inner part of the JSON for the status - used by both the
-     * GETFILESTATUS and LISTSTATUS calls.
-     * @param emptyPathSuffix Whether or not to include PATH_SUFFIX_JSON
-     * @return The JSONish Map
-     */
-    public Map<String,Object> toJsonInner(boolean emptyPathSuffix) {
-      Map<String,Object> json = new LinkedHashMap<String,Object>();
-      json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,
-              (emptyPathSuffix) ? "" : fileStatus.getPath().getName());
-      json.put(HttpFSFileSystem.TYPE_JSON,
-              HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());
-      json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());
-      json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());
-      json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());
-      json.put(HttpFSFileSystem.PERMISSION_JSON,
-              HttpFSFileSystem.permissionToString(fileStatus.getPermission()));
-      json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());
-      json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,
-              fileStatus.getModificationTime());
-      json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());
-      json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());
-      if ( (aclStatus != null) && !(aclStatus.getEntries().isEmpty()) ) {
-        json.put(HttpFSFileSystem.ACL_BIT_JSON,true);
-      }
-      return json;
-    }
+  private static Map<String, Object> toJson(FileStatus fileStatus) {
+    Map<String, Object> json = new LinkedHashMap<>();
+    json.put(HttpFSFileSystem.FILE_STATUS_JSON, toJsonInner(fileStatus, true));
+    return json;
-   * Simple class used to contain and operate upon a list of StatusPair
-   * objects.  Used by LISTSTATUS.
+   * @param fileStatuses list of FileStatus objects
+   * @return JSON map suitable for wire transport
-  private static class StatusPairs {
-    private StatusPair[] statusPairs;
-
-    /**
-     * Construct a list of StatusPair objects
-     * @param fs The FileSystem where 'path' lives
-     * @param path The directory to query
-     * @param filter A possible filter for entries in the directory
-     * @throws IOException
-     */
-    public StatusPairs(FileSystem fs, Path path, PathFilter filter)
-            throws IOException {
-      /* Grab all the file statuses at once in an array */
-      FileStatus[] fileStatuses = fs.listStatus(path, filter);
-
-      /* We'll have an array of StatusPairs of the same length */
-      AclStatus aclStatus = null;
-      statusPairs = new StatusPair[fileStatuses.length];
-
-      /*
-       * For each FileStatus, attempt to acquire an AclStatus.  If the
-       * getAclStatus throws an exception, we assume that ACLs are turned
-       * off entirely and abandon the attempt.
-       */
-      boolean useAcls = true;   // Assume ACLs work until proven otherwise
-      for (int i = 0; i < fileStatuses.length; i++) {
-        if (useAcls) {
-          try {
-            aclStatus = fs.getAclStatus(fileStatuses[i].getPath());
-          } catch (AclException e) {
-            /* Almost certainly due to an "ACLs not enabled" exception */
-            aclStatus = null;
-            useAcls = false;
-          } catch (UnsupportedOperationException e) {
-            /* Ditto above - this is the case for a local file system */
-            aclStatus = null;
-            useAcls = false;
-          }
-        }
-        statusPairs[i] = new StatusPair(fileStatuses[i], aclStatus);
-      }
+  @SuppressWarnings({"unchecked"})
+  private static Map<String, Object> toJson(FileStatus[] fileStatuses) {
+    Map<String, Object> json = new LinkedHashMap<>();
+    Map<String, Object> inner = new LinkedHashMap<>();
+    JSONArray statuses = new JSONArray();
+    for (FileStatus f : fileStatuses) {
+      statuses.add(toJsonInner(f, false));
+    inner.put(HttpFSFileSystem.FILE_STATUS_JSON, statuses);
+    json.put(HttpFSFileSystem.FILE_STATUSES_JSON, inner);
+    return json;
+  }
-    /**
-     * Return a Map suitable for conversion into JSON.
-     * @return A JSONish Map
-     */
-    @SuppressWarnings({"unchecked"})
-    public Map<String,Object> toJson() {
-      Map<String,Object> json = new LinkedHashMap<String,Object>();
-      Map<String,Object> inner = new LinkedHashMap<String,Object>();
-      JSONArray statuses = new JSONArray();
-      for (StatusPair s : statusPairs) {
-        statuses.add(s.toJsonInner(false));
-      }
-      inner.put(HttpFSFileSystem.FILE_STATUS_JSON, statuses);
-      json.put(HttpFSFileSystem.FILE_STATUSES_JSON, inner);
-      return json;
+  /**
+   * Not meant to be called directly except by the other toJson functions.
+   */
+  private static Map<String, Object> toJsonInner(FileStatus fileStatus,
+      boolean emptyPathSuffix) {
+    Map<String, Object> json = new LinkedHashMap<String, Object>();
+    json.put(HttpFSFileSystem.PATH_SUFFIX_JSON,
+        (emptyPathSuffix) ? "" : fileStatus.getPath().getName());
+    json.put(HttpFSFileSystem.TYPE_JSON,
+        HttpFSFileSystem.FILE_TYPE.getType(fileStatus).toString());
+    json.put(HttpFSFileSystem.LENGTH_JSON, fileStatus.getLen());
+    json.put(HttpFSFileSystem.OWNER_JSON, fileStatus.getOwner());
+    json.put(HttpFSFileSystem.GROUP_JSON, fileStatus.getGroup());
+    json.put(HttpFSFileSystem.PERMISSION_JSON,
+        HttpFSFileSystem.permissionToString(fileStatus.getPermission()));
+    json.put(HttpFSFileSystem.ACCESS_TIME_JSON, fileStatus.getAccessTime());
+    json.put(HttpFSFileSystem.MODIFICATION_TIME_JSON,
+        fileStatus.getModificationTime());
+    json.put(HttpFSFileSystem.BLOCK_SIZE_JSON, fileStatus.getBlockSize());
+    json.put(HttpFSFileSystem.REPLICATION_JSON, fileStatus.getReplication());
+    if (fileStatus.getPermission().getAclBit()) {
+      json.put(HttpFSFileSystem.ACL_BIT_JSON, true);
+    if (fileStatus.getPermission().getEncryptedBit()) {
+      json.put(HttpFSFileSystem.ENC_BIT_JSON, true);
+    }
+    return json;
-      StatusPair sp = new StatusPair(fs, path);
-      return sp.toJson();
+      FileStatus status = fs.getFileStatus(path);
+      return toJson(status);
-      StatusPairs sp = new StatusPairs(fs, path, filter);
-      return sp.toJson();
+      FileStatus[] fileStatuses = fs.listStatus(path, filter);
+      return toJson(fileStatuses);

INS31 MOV31 MOV31 MOV29 UPD83 MOV83 UPD83 MOV83 MOV74 UPD42 MOV42 MOV44 MOV8 INS83 UPD83 INS44 INS83 UPD83 MOV44 UPD65 UPD43 UPD42 UPD65 INS5 INS42 INS25 INS25 UPD66 UPD66 UPD42 INS42 UPD66 UPD66 MOV43 INS85 UPD42 UPD66 INS32 MOV8 INS32 INS8 MOV60 UPD43 UPD42 INS32 INS42 MOV32 UPD42 MOV42 INS21 UPD43 UPD74 INS42 UPD74 UPD74 UPD42 INS42 INS42 UPD42 UPD42 INS32 UPD42 INS42 MOV32 INS42 INS42 INS42 INS42 INS40 INS9 INS42 DEL40 DEL26 DEL66 DEL65 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL66 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL33 DEL27 DEL36 DEL32 DEL36 DEL38 DEL27 DEL25 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL31 DEL55 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL2 DEL42 DEL14 DEL7 DEL21 DEL8 DEL24 DEL8 DEL31 DEL55 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42