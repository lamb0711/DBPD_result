svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535 back to trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574259 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
-import org.apache.hadoop.hdfs.protocol.LayoutVersion.Feature;
-
-import com.google.common.base.Preconditions;
+import com.google.common.base.Preconditions;
-  enum NameNodeFile {
+  public enum NameNodeFile {
+    IMAGE_ROLLBACK("fsimage_rollback"),
-    String getName() { return fileName; }
+    @VisibleForTesting
+    public String getName() { return fileName; }
-  static enum NameNodeDirType implements StorageDirType {
+  @VisibleForTesting
+  public static enum NameNodeDirType implements StorageDirType {
-   * Return the name of the image file.
-   * @return The name of the first image file.
+   * @return The first image file with the given txid and image type.
-  public File getFsImageName(long txid) {
-    StorageDirectory sd = null;
-    for (Iterator<StorageDirectory> it =
-      dirIterator(NameNodeDirType.IMAGE); it.hasNext();) {
-      sd = it.next();
-      File fsImage = getStorageFile(sd, NameNodeFile.IMAGE, txid);
-      if(FileUtil.canRead(sd.getRoot()) && fsImage.exists())
+  public File getFsImageName(long txid, NameNodeFile nnf) {
+    for (Iterator<StorageDirectory> it = dirIterator(NameNodeDirType.IMAGE);
+        it.hasNext();) {
+      StorageDirectory sd = it.next();
+      File fsImage = getStorageFile(sd, nnf, txid);
+      if (FileUtil.canRead(sd.getRoot()) && fsImage.exists()) {
+      }
-  
+
+  /**
+   * @return The first image file whose txid is the same with the given txid and
+   * image type is one of the given types.
+   */
+  public File getFsImage(long txid, EnumSet<NameNodeFile> nnfs) {
+    for (Iterator<StorageDirectory> it = dirIterator(NameNodeDirType.IMAGE);
+        it.hasNext();) {
+      StorageDirectory sd = it.next();
+      for (NameNodeFile nnf : nnfs) {
+        File fsImage = getStorageFile(sd, nnf, txid);
+        if (FileUtil.canRead(sd.getRoot()) && fsImage.exists()) {
+          return fsImage;
+        }
+      }
+    }
+    return null;
+  }
+
+  public File getFsImageName(long txid) {
+    return getFsImageName(txid, NameNodeFile.IMAGE);
+  }
+
-        nsInfo.getLayoutVersion() == HdfsConstants.LAYOUT_VERSION,
+        nsInfo.getLayoutVersion() == HdfsConstants.NAMENODE_LAYOUT_VERSION,
-    this.layoutVersion = HdfsConstants.LAYOUT_VERSION;
+    this.layoutVersion = HdfsConstants.NAMENODE_LAYOUT_VERSION;
-    if (versionSupportsFederation()) {
+    if (NameNodeLayoutVersion.supports(
+        LayoutVersion.Feature.FEDERATION, getLayoutVersion())) {
-    assert getLayoutVersion() > HdfsConstants.LAYOUT_VERSION :
+    assert getLayoutVersion() > HdfsConstants.NAMENODE_LAYOUT_VERSION :
-    if (versionSupportsFederation()) {
+    if (NameNodeLayoutVersion.supports(
+        LayoutVersion.Feature.FEDERATION, getLayoutVersion())) {
-    return String.format("%s_%019d",
-                         NameNodeFile.IMAGE_NEW.getName(), txid);
+    return getNameNodeFileName(NameNodeFile.IMAGE_NEW, txid);
-    return String.format("%s_%019d",
-                         NameNodeFile.IMAGE.getName(), txid);
+    return getNameNodeFileName(NameNodeFile.IMAGE, txid);
-  
+
+  @VisibleForTesting
+  public static String getRollbackImageFileName(long txid) {
+    return getNameNodeFileName(NameNodeFile.IMAGE_ROLLBACK, txid);
+  }
+
+  private static String getNameNodeFileName(NameNodeFile nnf, long txid) {
+    return String.format("%s_%019d", nnf.getName(), txid);
+  }
+
-    return String.format("%s_%019d", NameNodeFile.EDITS_INPROGRESS.getName(),
-                         startTxId);
+    return getNameNodeFileName(NameNodeFile.EDITS_INPROGRESS, startTxId);
-  
-  static File getImageFile(StorageDirectory sd, long txid) {
-    return new File(sd.getCurrentDir(),
-        getImageFileName(txid));
+
+  static File getImageFile(StorageDirectory sd, NameNodeFile nnf, long txid) {
+    return new File(sd.getCurrentDir(), getNameNodeFileName(nnf, txid));
-  
+
-   * Return the first readable image file for the given txid, or null
-   * if no such image can be found
+   * Return the first readable image file for the given txid and image type, or
+   * null if no such image can be found
-  File findImageFile(long txid) {
+  File findImageFile(NameNodeFile nnf, long txid) {
-        getImageFileName(txid));
+        getNameNodeFileName(nnf, txid));
-      if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {
+      if (!NameNodeLayoutVersion.supports(
+          LayoutVersion.Feature.FEDERATION, layoutVersion)) {
-  FSImageStorageInspector readAndInspectDirs()
+  FSImageStorageInspector readAndInspectDirs(EnumSet<NameNodeFile> fileTypes)
-    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {
-      inspector = new FSImageTransactionalStorageInspector();
+    if (NameNodeLayoutVersion.supports(
+        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {
+      inspector = new FSImageTransactionalStorageInspector(fileTypes);

MOV26 MOV26 UPD40 INS31 INS31 INS31 INS31 INS31 INS83 INS72 INS78 INS83 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 MOV44 INS8 MOV78 MOV43 MOV44 MOV78 MOV83 MOV83 MOV43 MOV42 MOV44 INS8 INS78 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 MOV8 INS44 INS44 INS44 INS44 INS42 INS45 INS78 INS83 INS42 INS43 INS42 INS65 INS42 INS39 INS42 INS74 INS42 INS24 INS41 INS42 INS41 INS41 INS42 INS42 INS39 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS42 UPD66 INS42 INS66 INS66 INS43 INS43 INS58 INS32 INS8 INS33 INS32 INS32 INS32 INS42 INS42 UPD66 UPD66 INS42 INS43 INS43 INS60 INS42 INS42 INS74 INS59 INS42 INS42 INS60 INS70 INS42 INS42 INS40 UPD40 INS42 UPD42 INS40 INS32 UPD40 INS42 UPD42 INS40 INS32 UPD42 MOV40 INS42 INS40 INS42 INS42 INS40 INS42 UPD42 MOV40 INS42 INS42 UPD42 UPD40 MOV43 INS59 INS8 INS43 INS43 INS42 INS32 INS43 INS59 INS44 INS42 INS8 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 MOV32 MOV41 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS43 INS42 INS60 INS25 UPD40 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 UPD42 UPD40 INS42 INS42 INS42 INS32 INS32 INS32 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL40 DEL42 DEL45 DEL42 DEL32 DEL40 DEL31 DEL42 DEL45 DEL42 DEL32