HADOOP-12563. Updated utility (dtutil) to create/modify token files. Contributed by Matthew Paduano

+import com.google.protobuf.ByteString;
+
+import java.io.FileOutputStream;
+import org.apache.hadoop.security.proto.SecurityProtos.CredentialsKVProto;
+import org.apache.hadoop.security.proto.SecurityProtos.CredentialsProto;
- * A class that provides the facilities of reading and writing 
+ * A class that provides the facilities of reading and writing
-  private  Map<Text, Token<? extends TokenIdentifier>> tokenMap = 
-    new HashMap<Text, Token<? extends TokenIdentifier>>(); 
+  private  Map<Text, Token<? extends TokenIdentifier>> tokenMap =
+      new HashMap<Text, Token<? extends TokenIdentifier>>();
-   * Create an empty credentials instance
+   * Create an empty credentials instance.
-  
+
-   * Create a copy of the given credentials
+   * Create a copy of the given credentials.
-  
+
-   * Returns the Token object for the alias
+   * Returns the Token object for the alias.
-  
+
-   * Add a token in the storage (in memory)
+   * Add a token in the storage (in memory).
-  
+
-   * Return all the tokens in the in-memory map
+   * Return all the tokens in the in-memory map.
-  
+
-   * Returns the key bytes for the alias
+   * Returns the key bytes for the alias.
-  
+
-  
+
-   * Set the key for an alias
+   * Set the key for an alias.
-   * Return all the secret key entries in the in-memory map
+   * Return all the secret key entries in the in-memory map.
-   * Convenience method for reading a token storage file, and loading the Tokens
-   * therein in the passed UGI
+   * Convenience method for reading a token storage file and loading its Tokens.
-  public static Credentials readTokenStorageFile(Path filename, Configuration conf)
+  public static Credentials readTokenStorageFile(Path filename,
+                                                 Configuration conf)
-   * Convenience method for reading a token storage file, and loading the Tokens
-   * therein in the passed UGI
+   * Convenience method for reading a token storage file and loading its Tokens.
-  public static Credentials readTokenStorageFile(File filename, Configuration conf)
+  public static Credentials readTokenStorageFile(File filename,
+                                                 Configuration conf)
-  
+
-   * Convenience method for reading a token storage file directly from a 
-   * datainputstream
+   * Convenience method for reading a token from a DataInputStream.
-    if (version != TOKEN_STORAGE_VERSION) {
-      throw new IOException("Unknown version " + version + 
+    if (version != TOKEN_STORAGE_VERSION &&
+        version != OLD_TOKEN_STORAGE_VERSION) {
+      throw new IOException("Unknown version " + version +
-    readFields(in);
-  }
-  
-  private static final byte[] TOKEN_STORAGE_MAGIC =
-      "HDTS".getBytes(Charsets.UTF_8);
-  private static final byte TOKEN_STORAGE_VERSION = 0;
-  
-  public void writeTokenStorageToStream(DataOutputStream os)
-    throws IOException {
-    os.write(TOKEN_STORAGE_MAGIC);
-    os.write(TOKEN_STORAGE_VERSION);
-    write(os);
+    if (version == OLD_TOKEN_STORAGE_VERSION) {
+      readFields(in);
+    } else if (version == TOKEN_STORAGE_VERSION) {
+      readProtos(in);
+    }
-  public void writeTokenStorageFile(Path filename, 
+  private static final byte[] TOKEN_STORAGE_MAGIC =
+      "HDTS".getBytes(Charsets.UTF_8);
+  private static final byte TOKEN_STORAGE_VERSION = 1;
+
+  /**
+   *  For backward compatibility.
+   */
+  private static final byte OLD_TOKEN_STORAGE_VERSION = 0;
+
+
+  public void writeTokenStorageToStream(DataOutputStream os)
+      throws IOException {
+    os.write(TOKEN_STORAGE_MAGIC);
+    os.write(TOKEN_STORAGE_VERSION);
+    writeProto(os);
+  }
+
+  public void writeTokenStorageFile(Path filename,
-   * Stores all the keys to DataOutput
+   *  For backward compatibility.
+   */
+  public void writeLegacyTokenStorageLocalFile(File f) throws IOException {
+    writeLegacyOutputStream(new DataOutputStream(new FileOutputStream(f)));
+  }
+
+  /**
+   *  For backward compatibility.
+   */
+  public void writeLegacyTokenStorageFile(Path filename, Configuration conf)
+      throws IOException {
+    writeLegacyOutputStream(filename.getFileSystem(conf).create(filename));
+  }
+
+  private void writeLegacyOutputStream(DataOutputStream os) throws IOException {
+    os.write(TOKEN_STORAGE_MAGIC);
+    os.write(OLD_TOKEN_STORAGE_VERSION);
+    write(os);
+    os.close();
+  }
+
+  /**
+   * Stores all the keys to DataOutput.
-    for(Map.Entry<Text, 
-        Token<? extends TokenIdentifier>> e: tokenMap.entrySet()) {
+    for(Map.Entry<Text,
+            Token<? extends TokenIdentifier>> e: tokenMap.entrySet()) {
-    
+
-  
+
-   * Loads all the keys
+   * Write contents of this instance as CredentialsProto message to DataOutput.
+   * @param out
+   * @throws IOException
+   */
+  public void writeProto(DataOutput out) throws IOException {
+    CredentialsProto.Builder storage = CredentialsProto.newBuilder();
+    for (Map.Entry<Text, Token<? extends TokenIdentifier>> e :
+                                                         tokenMap.entrySet()) {
+      CredentialsKVProto.Builder kv = CredentialsKVProto.newBuilder().
+          setAliasBytes(ByteString.copyFrom(
+              e.getKey().getBytes(), 0, e.getKey().getLength())).
+          setToken(e.getValue().toTokenProto());
+      storage.addTokens(kv.build());
+    }
+
+    for(Map.Entry<Text, byte[]> e : secretKeysMap.entrySet()) {
+      CredentialsKVProto.Builder kv = CredentialsKVProto.newBuilder().
+          setAliasBytes(ByteString.copyFrom(
+              e.getKey().getBytes(), 0, e.getKey().getLength())).
+          setSecret(ByteString.copyFrom(e.getValue()));
+      storage.addSecrets(kv.build());
+    }
+    storage.build().writeTo((DataOutputStream)out);
+  }
+
+  /**
+   * Populates keys/values from proto buffer storage.
+   * @param in - stream ready to read a serialized proto buffer message
+   */
+  public void readProtos(DataInput in) throws IOException {
+    CredentialsProto storage = CredentialsProto.parseFrom((DataInputStream)in);
+    for (CredentialsKVProto kv : storage.getTokensList()) {
+      addToken(new Text(kv.getAliasBytes().toByteArray()),
+               (Token<? extends TokenIdentifier>) new Token(kv.getToken()));
+    }
+    for (CredentialsKVProto kv : storage.getSecretsList()) {
+      addSecretKey(new Text(kv.getAliasBytes().toByteArray()),
+                   kv.getSecret().toByteArray());
+    }
+  }
+
+  /**
+   * Loads all the keys.
-    
+
-    
+
- 
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS29 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 UPD66 INS25 INS42 INS34 INS65 UPD42 INS21 INS65 INS43 INS42 INS42 INS21 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS43 INS42 INS42 INS21 INS21 MOV21 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS70 INS70 INS21 INS65 INS65 INS43 INS42 INS42 INS60 INS70 INS70 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS27 INS27 INS8 INS25 INS66 INS32 INS66 INS42 INS32 INS66 INS42 INS42 INS32 INS42 INS32 INS32 INS32 UPD66 INS66 INS42 INS42 INS42 INS43 INS59 INS44 INS32 INS8 INS44 INS32 INS8 INS32 INS66 INS42 INS66 INS42 INS43 INS59 INS44 INS32 INS8 INS44 INS32 INS8 UPD66 MOV27 INS27 INS42 INS42 MOV21 INS27 INS8 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS21 INS74 INS42 INS42 INS42 INS60 INS21 INS32 INS42 INS11 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS21 INS43 INS14 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS43 INS59 INS32 INS43 INS43 INS5 INS43 INS59 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS76 INS40 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS39 INS85 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS14 INS11 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS74 INS14 INS43 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS76 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL66