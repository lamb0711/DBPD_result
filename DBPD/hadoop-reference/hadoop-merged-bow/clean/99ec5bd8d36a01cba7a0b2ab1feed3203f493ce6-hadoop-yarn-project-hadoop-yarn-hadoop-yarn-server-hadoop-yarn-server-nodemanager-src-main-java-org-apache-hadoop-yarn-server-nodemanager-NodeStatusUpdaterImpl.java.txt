Merge trunk into QJM branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1380990 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Random;
+import java.util.Random;
+import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.yarn.server.api.records.MasterKey;
-import org.apache.hadoop.yarn.server.security.ContainerTokenSecretManager;
-
-  private ContainerTokenSecretManager containerTokenSecretManager;
-  private byte[] secretKeyBytes = new byte[0];
-      NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics, 
-      ContainerTokenSecretManager containerTokenSecretManager) {
+      NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics) {
-    this.containerTokenSecretManager = containerTokenSecretManager;
-    this.tokenKeepAliveEnabled =
-        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,
-            YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)
-            && isSecurityEnabled();
+    this.tokenKeepAliveEnabled = isTokenKeepAliveEnabled(conf);
-  protected boolean isSecurityEnabled() {
+  private boolean isSecurityEnabled() {
+  @Private
+  protected boolean isTokenKeepAliveEnabled(Configuration conf) {
+    return conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,
+        YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)
+        && isSecurityEnabled();
+  }
+
-    
-    if (UserGroupInformation.isSecurityEnabled()) {
-      this.secretKeyBytes = regResponse.getSecretKey().array();
-    }
-    // do this now so that its set before we start heartbeating to RM
+      MasterKey masterKey = regResponse.getMasterKey();
+      // do this now so that its set before we start heartbeating to RM
-      // RM gives the shared secret in registration during StatusUpdater#start().
-      this.containerTokenSecretManager.setSecretKey(
-          this.nodeId.toString(),
-          this.getRMNMSharedSecret());
+      // RM gives the shared secret in registration during
+      // StatusUpdater#start().
+      if (masterKey != null) {
+        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);
+      }
+
-  @Override
-  public byte[] getRMNMSharedSecret() {
-    return this.secretKeyBytes.clone();
-  }
-
-            request.setNodeStatus(nodeStatus);            
+            request.setNodeStatus(nodeStatus);
+            if (isSecurityEnabled()) {
+              request.setLastKnownMasterKey(NodeStatusUpdaterImpl.this.context
+                .getContainerTokenSecretManager().getCurrentKey());
+            }
+
+            // See if the master-key has rolled over
+            if (isSecurityEnabled()) {
+              MasterKey updatedMasterKey = response.getMasterKey();
+              if (updatedMasterKey != null) {
+                // Will be non-null only on roll-over on RM side
+                context.getContainerTokenSecretManager().setMasterKey(
+                  updatedMasterKey);
+              }
+            }
+

MOV26 MOV26 INS26 MOV31 INS40 UPD40 UPD83 UPD83 INS39 UPD42 INS44 INS8 UPD42 INS43 INS42 INS41 INS25 INS42 MOV27 MOV32 INS8 INS32 INS60 MOV21 INS25 INS42 INS42 INS43 INS59 INS27 MOV8 INS42 INS42 INS32 INS42 INS33 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 MOV22 UPD42 MOV42 UPD42 INS25 INS25 INS32 INS8 INS32 INS8 INS42 INS21 INS42 INS60 INS25 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS42 INS42 INS42 INS32 INS22 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL39 DEL85 DEL5 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL32 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25