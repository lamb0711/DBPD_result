HDFS-9260. Improve the performance and GC friendliness of NameNode startup and full block reports (Staffan Friberg via cmccabe)

-import java.util.LinkedList;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
-  /**
-   * This array contains triplets of references. For each i-th storage, the
-   * block belongs to triplets[3*i] is the reference to the
-   * {@link DatanodeStorageInfo} and triplets[3*i+1] and triplets[3*i+2] are
-   * references to the previous and the next blocks, respectively, in the list
-   * of blocks belonging to this storage.
-   *
-   * Using previous and next in Object triplets is done instead of a
-   * {@link LinkedList} list to efficiently use memory. With LinkedList the cost
-   * per replica is 42 bytes (LinkedList#Entry object per replica) versus 16
-   * bytes using the triplets.
-   */
-  protected Object[] triplets;
+
+  // Storages this block is replicated on
+  protected DatanodeStorageInfo[] storages;
-    this.triplets = new Object[3 * size];
+    this.storages = new DatanodeStorageInfo[size];
-    this.triplets = new Object[3*size];
+    this.storages = new DatanodeStorageInfo[size];
+  public Iterator<DatanodeStorageInfo> getStorageInfos() {
+    return new Iterator<DatanodeStorageInfo>() {
+
+      private int index = 0;
+
+      @Override
+      public boolean hasNext() {
+        while (index < storages.length && storages[index] == null) {
+          index++;
+        }
+        return index < storages.length;
+      }
+
+      @Override
+      public DatanodeStorageInfo next() {
+        if (!hasNext()) {
+          throw new NoSuchElementException();
+        }
+        return storages[index++];
+      }
+
+      @Override
+      public void remove() {
+        throw new UnsupportedOperationException("Sorry. can't remove.");
+      }
+    };
+  }
+
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3 < triplets.length : "Index is out of bound";
-    return (DatanodeStorageInfo)triplets[index*3];
-  }
-
-  BlockInfo getPrevious(int index) {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3+1 < triplets.length : "Index is out of bound";
-    BlockInfo info = (BlockInfo)triplets[index*3+1];
-    assert info == null ||
-        info.getClass().getName().startsWith(BlockInfo.class.getName()) :
-        "BlockInfo is expected at " + index*3;
-    return info;
-  }
-
-  BlockInfo getNext(int index) {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3+2 < triplets.length : "Index is out of bound";
-    BlockInfo info = (BlockInfo)triplets[index*3+2];
-    assert info == null || info.getClass().getName().startsWith(
-        BlockInfo.class.getName()) :
-        "BlockInfo is expected at " + index*3;
-    return info;
+    assert this.storages != null : "BlockInfo is not initialized";
+    return storages[index];
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3 < triplets.length : "Index is out of bound";
-    triplets[index*3] = storage;
-  }
-
-  /**
-   * Return the previous block on the block list for the datanode at
-   * position index. Set the previous block on the list to "to".
-   *
-   * @param index - the datanode index
-   * @param to - block to be set to previous on the list of blocks
-   * @return current previous block on the list of blocks
-   */
-  BlockInfo setPrevious(int index, BlockInfo to) {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3+1 < triplets.length : "Index is out of bound";
-    BlockInfo info = (BlockInfo) triplets[index*3+1];
-    triplets[index*3+1] = to;
-    return info;
-  }
-
-  /**
-   * Return the next block on the block list for the datanode at
-   * position index. Set the next block on the list to "to".
-   *
-   * @param index - the datanode index
-   * @param to - block to be set to next on the list of blocks
-   * @return current next block on the list of blocks
-   */
-  BlockInfo setNext(int index, BlockInfo to) {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3+2 < triplets.length : "Index is out of bound";
-    BlockInfo info = (BlockInfo) triplets[index*3+2];
-    triplets[index*3+2] = to;
-    return info;
+    assert this.storages != null : "BlockInfo is not initialized";
+    this.storages[index] = storage;
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert triplets.length % 3 == 0 : "Malformed BlockInfo";
-    return triplets.length / 3;
+    assert this.storages != null : "BlockInfo is not initialized";
+    return storages.length;
-  /**
-   * Insert this block into the head of the list of blocks
-   * related to the specified DatanodeStorageInfo.
-   * If the head is null then form a new list.
-   * @return current block as the new head of the list.
-   */
-  BlockInfo listInsert(BlockInfo head, DatanodeStorageInfo storage) {
-    int dnIndex = this.findStorageInfo(storage);
-    assert dnIndex >= 0 : "Data node is not found: current";
-    assert getPrevious(dnIndex) == null && getNext(dnIndex) == null :
-        "Block is already in the list and cannot be inserted.";
-    this.setPrevious(dnIndex, null);
-    this.setNext(dnIndex, head);
-    if (head != null) {
-      head.setPrevious(head.findStorageInfo(storage), this);
-    }
-    return this;
-  }
-
-  /**
-   * Remove this block from the list of blocks
-   * related to the specified DatanodeStorageInfo.
-   * If this block is the head of the list then return the next block as
-   * the new head.
-   * @return the new head of the list or null if the list becomes
-   * empy after deletion.
-   */
-  BlockInfo listRemove(BlockInfo head, DatanodeStorageInfo storage) {
-    if (head == null) {
-      return null;
-    }
-    int dnIndex = this.findStorageInfo(storage);
-    if (dnIndex < 0) { // this block is not on the data-node list
-      return head;
-    }
-
-    BlockInfo next = this.getNext(dnIndex);
-    BlockInfo prev = this.getPrevious(dnIndex);
-    this.setNext(dnIndex, null);
-    this.setPrevious(dnIndex, null);
-    if (prev != null) {
-      prev.setNext(prev.findStorageInfo(storage), next);
-    }
-    if (next != null) {
-      next.setPrevious(next.findStorageInfo(storage), prev);
-    }
-    if (this == head) { // removing the head
-      head = next;
-    }
-    return head;
-  }
-
-  /**
-   * Remove this block from the list of blocks related to the specified
-   * DatanodeDescriptor. Insert it into the head of the list of blocks.
-   *
-   * @return the new head of the list.
-   */
-  public BlockInfo moveBlockToHead(BlockInfo head, DatanodeStorageInfo storage,
-      int curIndex, int headIndex) {
-    if (head == this) {
-      return this;
-    }
-    BlockInfo next = this.setNext(curIndex, head);
-    BlockInfo prev = this.setPrevious(curIndex, null);
-
-    head.setPrevious(headIndex, this);
-    prev.setNext(prev.findStorageInfo(storage), next);
-    if (next != null) {
-      next.setPrevious(next.findStorageInfo(storage), prev);
-    }
-    return this;
-  }
-

INS26 UPD40 INS40 INS31 UPD5 INS83 INS74 UPD42 MOV42 INS8 MOV43 INS42 MOV44 INS39 INS42 MOV44 MOV44 UPD43 UPD42 INS43 INS43 INS41 INS41 UPD42 INS42 MOV42 INS14 INS2 INS40 INS74 INS1 UPD42 MOV42 INS42 UPD42 UPD42 UPD5 INS42 UPD42 UPD5 INS42 INS43 INS43 INS23 INS31 INS31 INS31 UPD42 UPD42 INS22 INS42 UPD42 UPD43 UPD43 INS42 INS42 INS83 INS39 INS59 INS78 INS83 INS39 UPD42 MOV42 MOV8 INS78 INS83 UPD43 MOV43 UPD42 MOV42 MOV8 INS78 INS83 MOV39 UPD42 MOV42 MOV8 INS52 INS42 UPD42 UPD42 INS42 INS34 INS42 INS61 INS41 INS42 UPD42 INS25 INS41 INS42 INS53 INS27 INS8 INS27 INS38 INS8 INS2 INS14 MOV27 INS27 INS21 MOV42 INS40 INS32 INS53 UPD42 MOV42 INS37 INS43 INS45 MOV42 UPD40 INS2 MOV33 INS37 INS42 INS14 INS42 INS42 UPD42 MOV42 INS42 INS42 INS43 UPD42 MOV42 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29 DEL34 DEL42 DEL27 DEL34 DEL42 DEL27 DEL34 DEL27 DEL34 DEL27 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL42 DEL34 DEL27 DEL27 DEL45 DEL6 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL34 DEL27 DEL34 DEL27 DEL2 DEL11 DEL59 DEL60 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL32 DEL27 DEL45 DEL34 DEL27 DEL27 DEL6 DEL42 DEL41 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL34 DEL27 DEL40 DEL27 DEL27 DEL45 DEL6 DEL43 DEL42 DEL42 DEL43 DEL42 DEL34 DEL27 DEL34 DEL27 DEL2 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL32 DEL27 DEL45 DEL42 DEL34 DEL27 DEL27 DEL6 DEL42 DEL41 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL40 DEL27 DEL27 DEL45 DEL6 DEL42 DEL42 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL40 DEL27 DEL27 DEL45 DEL6 DEL42 DEL42 DEL34 DEL27 DEL2 DEL11 DEL41 DEL8 DEL31 DEL42 DEL43 DEL31 DEL31 DEL39 DEL42 DEL44 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL34 DEL27 DEL40 DEL27 DEL27 DEL45 DEL6 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL34 DEL27 DEL34 DEL27 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL42 DEL41 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL34 DEL27 DEL40 DEL27 DEL27 DEL45 DEL6 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL34 DEL27 DEL34 DEL27 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL34 DEL27 DEL42 DEL41 DEL40 DEL34 DEL27 DEL34 DEL27 DEL45 DEL6 DEL40 DEL34 DEL27 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL52 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL45 DEL6 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL45 DEL6 DEL52 DEL42 DEL42 DEL33 DEL32 DEL21 DEL52 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL52 DEL32 DEL21 DEL8 DEL25 DEL52 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL39 DEL42 DEL52 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL52 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL52 DEL42 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL42 DEL33 DEL32 DEL21 DEL52 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL52 DEL27 DEL52 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL52 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL52 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL52 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL52 DEL41 DEL8 DEL31