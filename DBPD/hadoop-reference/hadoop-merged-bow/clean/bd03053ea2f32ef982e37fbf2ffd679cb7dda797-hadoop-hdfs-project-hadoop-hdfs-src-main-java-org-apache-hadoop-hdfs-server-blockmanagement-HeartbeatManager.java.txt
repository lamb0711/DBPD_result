HDFS-14968. Add ability to log stale datanodes. Contributed by Ahmed Hussein.

+import java.util.HashSet;
+import java.util.Set;
-
+  private static final String REPORT_DELTA_STALE_DN_HEADER =
+      "StaleNodes Report: [New Stale Nodes]: %d";
+  private static final String REPORT_STALE_DN_LINE_ENTRY = "%n\t %s";
+  private static final String REPORT_STALE_DN_LINE_TAIL = ", %s";
+  private static final String REPORT_REMOVE_DEAD_NODE_ENTRY =
+      "StaleNodes Report: [Remove DeadNode]: %s";
+  private static final String REPORT_REMOVE_STALE_NODE_ENTRY =
+      "StaleNodes Report: [Remove StaleNode]: %s";
+  private static final int REPORT_STALE_NODE_NODES_PER_LINE = 10;
-  /** The time period to check for expired datanodes */
+  /** The time period to check for expired datanodes. */
-  /** Heartbeat monitor thread */
+  /** Heartbeat monitor thread. */
+  /** Enable log for datanode staleness. */
+  private final boolean enableLogStaleNodes;
+
+  /** reports for stale datanodes. */
+  private final Set<DatanodeDescriptor> staleDataNodes = new HashSet<>();
+    enableLogStaleNodes = conf.getBoolean(
+        DFSConfigKeys.DFS_NAMENODE_ENABLE_LOG_STALE_DATANODE_KEY,
+        DFSConfigKeys.DFS_NAMENODE_ENABLE_LOG_STALE_DATANODE_DEFAULT);
+      removeNodeFromStaleList(node);
+   * Remove deadNode from StaleNodeList if it exists.
+   * This method assumes that it is called inside a synchronized block.
+   *
+   * @param d node descriptor to be marked as dead.
+   * @return true if the node was already on the stale list.
+   */
+  private boolean removeNodeFromStaleList(DatanodeDescriptor d) {
+    return removeNodeFromStaleList(d, true);
+  }
+
+  /**
+   * Remove node from StaleNodeList if it exists.
+   * If enabled, the log will show whether the node is removed from list because
+   * it is dead or not.
+   * This method assumes that it is called inside a synchronized block.
+   *
+   * @param d node descriptor to be marked as dead.
+   * @param isDead
+   * @return true if the node was already in the stale list.
+   */
+  private boolean removeNodeFromStaleList(DatanodeDescriptor d,
+      boolean isDead) {
+    boolean result = false;
+    result = staleDataNodes.remove(d);
+    if (enableLogStaleNodes && result) {
+      LOG.info(String.format(isDead ?
+              REPORT_REMOVE_DEAD_NODE_ENTRY : REPORT_REMOVE_STALE_NODE_ENTRY,
+          d));
+    }
+    return result;
+  }
+
+  /**
+   * Dump the new stale data nodes added since last heartbeat check.
+   *
+   * @param staleNodes list of datanodes added in the last heartbeat check.
+   */
+  private void dumpStaleNodes(List<DatanodeDescriptor> staleNodes) {
+    // log nodes detected as stale
+    if (enableLogStaleNodes && (!staleNodes.isEmpty())) {
+      StringBuilder staleLogMSG =
+          new StringBuilder(String.format(REPORT_DELTA_STALE_DN_HEADER,
+              staleNodes.size()));
+      for (int ind = 0; ind < staleNodes.size(); ind++) {
+        String logFormat = (ind % REPORT_STALE_NODE_NODES_PER_LINE == 0) ?
+            REPORT_STALE_DN_LINE_ENTRY : REPORT_STALE_DN_LINE_TAIL;
+        staleLogMSG.append(String.format(logFormat, staleNodes.get(ind)));
+      }
+      LOG.info(staleLogMSG.toString());
+    }
+  }
+
+  /**
-      // check the number of stale nodes
-      int numOfStaleNodes = 0;
+      // check the number of stale storages
+      List<DatanodeDescriptor> staleNodes = new ArrayList<>();
+            // remove the node from stale list to adjust the stale list size
+            // before setting the stale count of the DatanodeManager
+            removeNodeFromStaleList(d);
+          } else {
+            if (d.isStale(dm.getStaleInterval())) {
+              if (staleDataNodes.add(d)) {
+                // the node is n
+                staleNodes.add(d);
+              }
+            } else {
+              // remove the node if it is no longer stale
+              removeNodeFromStaleList(d, false);
+            }
-          if (d.isStale(dm.getStaleInterval())) {
-            LOG.warn(String.format("Stale datanode {}."
-                    + " No heartbeat received since last {} milliseconds"),
-                    d.getName(), dm.getStaleInterval());
-            numOfStaleNodes++;
-          }
+
-
-        dm.setNumStaleNodes(numOfStaleNodes);
+        dm.setNumStaleNodes(staleDataNodes.size());
+      // log nodes detected as stale since last heartBeat
+      dumpStaleNodes(staleNodes);
+
+

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS34 INS65 INS42 INS65 INS43 INS43 INS42 INS14 INS21 INS65 INS65 INS65 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS60 INS21 INS25 INS41 INS65 INS65 INS74 INS42 INS25 UPD66 UPD66 INS66 INS66 INS42 INS42 INS74 INS7 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS39 INS59 INS7 INS27 INS8 INS42 INS66 INS42 INS66 INS43 INS43 INS27 INS8 MOV60 INS43 INS42 INS32 INS21 INS42 INS42 INS9 INS42 INS9 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS36 INS60 INS24 INS21 INS21 INS42 INS42 INS42 INS40 INS40 INS32 INS42 INS42 INS42 INS32 INS38 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS74 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS32 INS42 INS60 INS21 INS42 INS42 INS32 INS43 INS43 UPD42 INS14 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS43 INS32 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS8 UPD42 MOV42 INS42 INS27 INS42 INS42 INS42 INS21 INS25 INS27 INS34 INS32 MOV32 INS8 INS8 INS42 INS42 INS42 INS42 INS25 INS21 INS32 INS8 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS9 INS32 INS42 INS42 INS42 DEL39 DEL34 DEL42 DEL42 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL25