Revert "Merge branch 'trunk' of https://git-wip-us.apache.org/repos/asf/hadoop into trunk"

This reverts commit c163d1797ade0f47d35b4a44381b8ef1dfec5b60, reversing
changes made to 0d9804dcef2eab5ebf84667d9ca49bb035d9a731.

-import org.apache.hadoop.yarn.exceptions.ResourceNotFoundException;
-  private static final String INVALID_RESOURCE_DEFINITION_PREFIX =
-          "Error reading resource config--invalid resource definition: ";
-
-   * Parses a resource config value in one of three forms:
-   * <ol>
-   * <li>Percentage: &quot;50%&quot; or &quot;40% memory, 60% cpu&quot;</li>
-   * <li>New style resources: &quot;vcores=10, memory-mb=1024&quot;
-   * or &quot;vcores=60%, memory-mb=40%&quot;</li>
-   * <li>Old style resources: &quot;1024 mb, 10 vcores&quot;</li>
-   * </ol>
-   * In new style resources, any resource that is not specified will be
-   * set to {@link Long#MAX_VALUE} or 100%, as appropriate. Also, in the new
-   * style resources, units are not allowed. Units are assumed from the resource
-   * manager's settings for the resources when the value isn't a percentage.
-   *
-   * @param value the resource definition to parse
-   * @return a {@link ConfigurableResource} that represents the parsed value
-   * @throws AllocationConfigurationException if the raw value is not a valid
-   * resource definition
+   * Parses a resource config value of a form like "1024", "1024 mb",
+   * or "1024 mb, 3 vcores". If no units are given, megabytes are assumed.
+   * 
+   * @throws AllocationConfigurationException
-  public static ConfigurableResource parseResourceConfigValue(String value)
+  public static ConfigurableResource parseResourceConfigValue(String val)
-    return parseResourceConfigValue(value, Long.MAX_VALUE);
-  }
-
-  /**
-   * Parses a resource config value in one of three forms:
-   * <ol>
-   * <li>Percentage: &quot;50%&quot; or &quot;40% memory, 60% cpu&quot;</li>
-   * <li>New style resources: &quot;vcores=10, memory-mb=1024&quot;
-   * or &quot;vcores=60%, memory-mb=40%&quot;</li>
-   * <li>Old style resources: &quot;1024 mb, 10 vcores&quot;</li>
-   * </ol>
-   * In new style resources, any resource that is not specified will be
-   * set to {@code missing} or 0%, as appropriate. Also, in the new style
-   * resources, units are not allowed. Units are assumed from the resource
-   * manager's settings for the resources when the value isn't a percentage.
-   *
-   * The {@code missing} parameter is only used in the case of new style
-   * resources without percentages. With new style resources with percentages,
-   * any missing resources will be assumed to be 100% because percentages are
-   * only used with maximum resource limits.
-   *
-   * @param value the resource definition to parse
-   * @param missing the value to use for any unspecified resources
-   * @return a {@link ConfigurableResource} that represents the parsed value
-   * @throws AllocationConfigurationException if the raw value is not a valid
-   * resource definition
-   */
-  public static ConfigurableResource parseResourceConfigValue(String value,
-      long missing) throws AllocationConfigurationException {
-
-    if (value.trim().isEmpty()) {
-      throw new AllocationConfigurationException("Error reading resource "
-          + "config--the resource string is empty.");
-    }
-
-      if (value.contains("=")) {
-        configurableResource = parseNewStyleResource(value, missing);
-      } else if (value.contains("%")) {
-        configurableResource = parseOldStyleResourceAsPercentage(value);
+      val = StringUtils.toLowerCase(val);
+      if (val.contains("%")) {
+        configurableResource = new ConfigurableResource(
+            getResourcePercentage(val));
-        configurableResource = parseOldStyleResource(value);
+        int memory = findResource(val, "mb");
+        int vcores = findResource(val, "vcores");
+        configurableResource = new ConfigurableResource(
+            BuilderUtils.newResource(memory, vcores));
-    } catch (RuntimeException ex) {
+    } catch (AllocationConfigurationException ex) {
+      throw ex;
+    } catch (Exception ex) {
-
-  private static ConfigurableResource parseNewStyleResource(String value,
-          long missing) throws AllocationConfigurationException {
-
-    final ConfigurableResource configurableResource;
-    boolean asPercent = value.contains("%");
-    if (asPercent) {
-      configurableResource = new ConfigurableResource();
-    } else {
-      configurableResource = new ConfigurableResource(missing);
-    }
-
-    String[] resources = value.split(",");
-    for (String resource : resources) {
-      String[] parts = resource.split("=");
-
-      if (parts.length != 2) {
-        throw createConfigException(value,
-                        "Every resource must be of the form: name=value.");
-      }
-
-      String resourceName = parts[0].trim();
-      String resourceValue = parts[1].trim();
-      try {
-        if (asPercent) {
-          configurableResource.setPercentage(resourceName,
-              findPercentage(resourceValue, ""));
-        } else {
-          configurableResource.setValue(resourceName,
-              Long.parseLong(resourceValue));
-        }
-      } catch (ResourceNotFoundException ex) {
-        throw createConfigException(value, "The "
-            + "resource name, \"" + resourceName + "\" was not "
-            + "recognized. Please check the value of "
-            + YarnConfiguration.RESOURCE_TYPES + " in the Resource "
-            + "Manager's configuration files.", ex);
-      } catch (NumberFormatException ex) {
-        // This only comes from Long.parseLong()
-        throw createConfigException(value, "The "
-            + "resource values must all be integers. \"" + resourceValue
-            + "\" is not an integer.", ex);
-      } catch (AllocationConfigurationException ex) {
-        // This only comes from findPercentage()
-        throw createConfigException(value, "The "
-            + "resource values must all be percentages. \""
-            + resourceValue + "\" is either not a number or does not "
-            + "include the '%' symbol.", ex);
-      }
-    }
-    return configurableResource;
-  }
-
-  private static ConfigurableResource parseOldStyleResourceAsPercentage(
-          String value) throws AllocationConfigurationException {
-    return new ConfigurableResource(
-            getResourcePercentage(StringUtils.toLowerCase(value)));
-  }
-
-  private static ConfigurableResource parseOldStyleResource(String value)
-          throws AllocationConfigurationException {
-    final String lCaseValue = StringUtils.toLowerCase(value);
-    int memory = findResource(lCaseValue, "mb");
-    int vcores = findResource(lCaseValue, "vcores");
-
-    return new ConfigurableResource(
-            BuilderUtils.newResource(memory, vcores));
-  }
-
-
-        resourcePercentage[i] = percentage;
+        resourcePercentage[i] = percentage/100;
-      resourcePercentage[0] = findPercentage(val, "memory");
-      resourcePercentage[1] = findPercentage(val, "cpu");
+      resourcePercentage[0] = findPercentage(val, "memory")/100;
+      resourcePercentage[1] = findPercentage(val, "cpu")/100;
-
-      throws AllocationConfigurationException {
+    throws AllocationConfigurationException {
-    return Double.parseDouble(matcher.group(1)) / 100.0;
-  }
-
-  private static AllocationConfigurationException createConfigException(
-          String value, String message) {
-    return createConfigException(value, message, null);
-  }
-
-  private static AllocationConfigurationException createConfigException(
-      String value, String message, Throwable t) {
-    String msg = INVALID_RESOURCE_DEFINITION_PREFIX + value + ". " + message;
-    if (t != null) {
-      return new AllocationConfigurationException(msg, t);
-    } else {
-      return new AllocationConfigurationException(msg);
-    }
+    return Double.parseDouble(matcher.group(1));

INS31 MOV29 MOV83 MOV83 MOV43 MOV42 MOV44 MOV43 INS8 UPD42 MOV60 INS54 MOV41 UPD66 UPD66 INS8 INS12 MOV12 MOV32 MOV21 INS25 MOV44 INS8 MOV32 MOV8 INS8 INS53 UPD43 UPD42 UPD42 MOV60 MOV60 INS21 INS42 UPD42 INS27 INS27 UPD42 UPD42 UPD42 INS7 MOV32 INS34 MOV32 INS34 INS42 MOV14 INS27 INS32 UPD42 UPD42 INS42 INS34 INS42 INS42 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL54 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL42 DEL45 DEL32 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL45 DEL45 DEL40 DEL45 DEL45 DEL27 DEL42 DEL32 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL45 DEL27 DEL42 DEL32 DEL53 DEL8 DEL12 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL41 DEL8 DEL31 DEL42 DEL34 DEL27 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL25 DEL8 DEL31