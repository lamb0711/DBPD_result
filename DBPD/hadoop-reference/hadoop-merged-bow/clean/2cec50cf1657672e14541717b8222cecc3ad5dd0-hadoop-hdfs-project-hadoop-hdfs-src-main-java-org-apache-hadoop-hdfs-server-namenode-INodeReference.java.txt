HDFS-15463. Add a tool to validate FsImage. (#2140)


+import java.util.Iterator;
+  /** Assert the relationship this node and the references. */
+  abstract void assertReferences();
+
+  @Override
+  public String toDetailString() {
+    final String s = referred == null? null
+        : referred.getFullPathAndObjectString();
+    return super.toDetailString() + ", ->" + s;
+  }
+
-      out.print(", count=" + ((WithCount)this).getReferenceCount());
+      out.print(", " + ((WithCount)this).getCountDetails());
+      Preconditions.checkArgument(parent == null);
+
+      INodeReferenceValidation.add(this, WithCount.class);
+    }
+
+    private String getCountDetails() {
+      final StringBuilder b = new StringBuilder("[");
+      if (!withNameList.isEmpty()) {
+        final Iterator<WithName> i = withNameList.iterator();
+        b.append(i.next().getFullPathAndObjectString());
+        for(; i.hasNext();) {
+          b.append(", ").append(i.next().getFullPathAndObjectString());
+        }
+      }
+      b.append("]");
+      return ", count=" + getReferenceCount() + ", names=" + b;
+    }
+
+    @Override
+    public String toDetailString() {
+      return super.toDetailString() + getCountDetails();
+    }
+
+    private void assertDstReference(INodeReference parentRef) {
+      if (parentRef instanceof DstReference) {
+        return;
+      }
+      throw new IllegalArgumentException("Unexpected non-DstReference:"
+          + "\n  parentRef: " + parentRef.toDetailString()
+          + "\n  withCount: " + this.toDetailString());
+    }
+
+    private void assertReferredINode(INodeReference ref, String name) {
+      if (ref.getReferredINode() == this) {
+        return;
+      }
+      throw new IllegalStateException("Inconsistent Reference:"
+          + "\n  " + name + ": " + ref.toDetailString()
+          + "\n  withCount: " + this.toDetailString());
+    }
+
+    @Override
+    void assertReferences() {
+      for(WithName withName : withNameList) {
+        assertReferredINode(withName, " withName");
+      }
+
+      final INodeReference parentRef = getParentReference();
+      if (parentRef != null) {
+        assertDstReference(parentRef);
+        assertReferredINode(parentRef, "parentRef");
+      }
+    private int search(WithName ref) {
+      return Collections.binarySearch(withNameList, ref, WITHNAME_COMPARATOR);
+    }
+
-        int i = Collections.binarySearch(withNameList, (WithName) ref,
-            WITHNAME_COMPARATOR);
+        final WithName withName = (WithName) ref;
+        final int i = search(withName);
+          INodeReferenceValidation.remove(withName, WithName.class);
+        INodeReferenceValidation.remove((DstReference) ref, DstReference.class);
+      }
+
+      if (getReferenceCount() == 0) {
+        INodeReferenceValidation.remove(this, WithCount.class);
+
+      INodeReferenceValidation.add(this, WithName.class);
+    }
+
+    @Override
+    void assertReferences() {
+      final INode ref= getReferredINode();
+      final String err;
+      if (ref instanceof WithCount) {
+        final WithCount withCount = (WithCount)ref;
+        final int i = withCount.search(this);
+        if (i >= 0) {
+          if (withCount.withNameList.get(i) == this) {
+            return;
+          } else {
+            err = "OBJECT MISMATCH, withNameList.get(" + i + ") != this";
+          }
+        } else {
+          err = "NOT FOUND in withNameList";
+        }
+      } else {
+        err = "UNEXPECTED CLASS, expecting WithCount";
+      }
+
+      throw new IllegalStateException(err + ":"
+          + "\n  ref: " + (ref == null? null : ref.toDetailString())
+          + "\n this: " + this.toDetailString());
+
+      INodeReferenceValidation.add(this, DstReference.class);
+    }
+
+    @Override
+    void assertReferences() {
+      final INode ref = getReferredINode();
+      final String err;
+      if (ref instanceof WithCount) {
+        if (ref.getParentReference() == this) {
+          return;
+        } else {
+          err = "OBJECT MISMATCH, ref.getParentReference() != this";
+        }
+      } else {
+        err = "UNEXPECTED CLASS, expecting WithCount";
+      }
+
+      throw new IllegalStateException(err + ":"
+          + "\n  ref: " + (ref == null? null : ref.toDetailString())
+          + "\n this: " + this.toDetailString());

INS26 INS40 INS31 INS31 INS29 INS83 INS39 INS42 INS78 INS83 INS43 INS42 INS8 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS42 INS42 INS60 INS41 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS78 INS39 INS42 INS8 INS78 INS39 INS42 INS8 INS66 INS83 INS43 INS59 INS27 INS21 INS21 INS42 INS60 INS25 INS21 INS41 INS42 INS42 INS41 INS43 INS42 INS25 INS53 INS43 INS42 INS43 INS42 INS25 INS53 INS42 INS70 INS60 INS25 INS43 INS42 INS41 INS25 INS21 INS42 INS60 INS60 INS25 INS53 INS21 INS42 INS60 INS60 INS25 INS53 INS42 INS42 INS16 INS48 INS45 INS42 INS32 INS32 INS83 INS43 INS59 INS38 INS8 INS32 INS27 INS27 INS42 INS62 INS8 INS14 INS42 INS42 INS27 INS8 INS14 INS44 INS42 INS8 INS83 INS43 INS59 INS27 INS8 INS42 INS32 INS27 INS8 INS32 INS83 INS43 INS59 INS83 INS43 INS59 INS62 INS8 INS8 INS14 INS32 INS83 INS43 INS59 INS83 INS43 INS59 INS62 INS8 INS8 INS14 INS27 INS33 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS52 INS57 INS42 INS42 INS14 INS32 INS60 INS21 INS24 INS42 INS42 INS45 INS45 INS32 INS45 INS42 INS48 INS32 INS42 INS43 INS41 INS43 INS27 INS32 INS52 INS41 INS43 INS27 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS60 INS32 INS34 INS21 INS42 INS42 INS52 INS57 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS60 INS60 INS25 INS21 INS43 INS27 INS42 INS42 INS52 INS57 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS25 INS21 INS43 INS27 INS42 INS33 INS42 INS42 INS42 INS33 INS43 INS43 INS45 INS42 INS42 INS83 INS74 INS59 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS45 INS32 INS42 INS42 INS42 INS27 INS42 INS45 INS32 INS45 INS32 INS42 INS32 INS42 INS32 INS32 INS83 INS43 INS83 INS39 INS59 INS21 INS42 INS32 INS43 INS42 INS42 INS83 INS43 INS59 INS83 INS39 INS59 INS27 INS8 INS8 INS7 INS42 INS42 INS45 INS45 INS36 INS45 INS32 INS43 INS42 INS42 INS27 INS8 INS8 INS7 INS42 INS42 INS45 INS45 INS36 INS45 INS32 UPD45 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS45 INS45 INS42 INS42 INS52 INS42 INS45 INS45 INS42 INS42 INS52 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 MOV11 INS42 INS32 INS21 INS32 INS42 INS42 INS52 INS57 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS34 INS25 INS21 INS42 INS45 INS16 INS52 INS42 INS42 INS32 INS52 INS41 INS21 INS42 INS45 INS16 INS52 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS11 INS57 INS43 INS43 INS42 INS42 INS42 INS52 INS27 INS8 INS8 INS7 INS27 INS33 INS32 INS42 INS42 INS7 INS27 INS33 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS57 INS43 INS42 INS43 INS42 INS42 INS32 INS52 INS41 INS21 INS42 INS45 INS42 INS33 INS42 INS42 INS42 INS45 INS42 INS33 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS43 INS42 INS42 INS40 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS45 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32