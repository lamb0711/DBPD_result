Merge trunk into HDFS-3077 branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1377092 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.Options.ChecksumOpt;
+import org.apache.hadoop.util.DataChecksum;
+import org.apache.hadoop.fs.MD5MD5CRC32CastagnoliFileChecksum;
+import org.apache.hadoop.fs.MD5MD5CRC32GzipFileChecksum;
+
-    return "MD5-of-" + crcPerBlock + "MD5-of-" + bytesPerCRC + "CRC32";
+    return "MD5-of-" + crcPerBlock + "MD5-of-" + bytesPerCRC +
+        getCrcType().name();
+  }
+
+  public static DataChecksum.Type getCrcTypeFromAlgorithmName(String algorithm)
+      throws IOException {
+    if (algorithm.endsWith(DataChecksum.Type.CRC32.name())) {
+      return DataChecksum.Type.CRC32;
+    } else if (algorithm.endsWith(DataChecksum.Type.CRC32C.name())) {
+      return DataChecksum.Type.CRC32C;
+    }
+
+    throw new IOException("Unknown checksum type in " + algorithm);
+  /** returns the CRC type */
+  public DataChecksum.Type getCrcType() {
+    // default to the one that is understood by all releases.
+    return DataChecksum.Type.CRC32;
+  }
+
+  public ChecksumOpt getChecksumOpt() {
+    return new ChecksumOpt(getCrcType(), bytesPerCRC);
+  }
+
+      xml.attribute("crcType", ""+ that.getCrcType().name());
+    String crcType = attrs.getValue("crcType");
+    DataChecksum.Type finalCrcType;
-      return new MD5MD5CRC32FileChecksum(Integer.valueOf(bytesPerCRC),
-          Integer.valueOf(crcPerBlock), new MD5Hash(md5));
-    } catch(Exception e) {
+      // old versions don't support crcType.
+      if (crcType == null || crcType == "") {
+        finalCrcType = DataChecksum.Type.CRC32;
+      } else {
+        finalCrcType = DataChecksum.Type.valueOf(crcType);
+      }
+
+      switch (finalCrcType) {
+        case CRC32:
+          return new MD5MD5CRC32GzipFileChecksum(
+              Integer.valueOf(bytesPerCRC),
+              Integer.valueOf(crcPerBlock),
+              new MD5Hash(md5));
+        case CRC32C:
+          return new MD5MD5CRC32CastagnoliFileChecksum(
+              Integer.valueOf(bytesPerCRC),
+              Integer.valueOf(crcPerBlock),
+              new MD5Hash(md5));
+        default:
+          // we should never get here since finalCrcType will
+          // hold a valid type or we should have got an exception.
+          return null;
+      }
+    } catch (Exception e) {
-          + ", crcPerBlock=" + crcPerBlock + ", md5=" + md5, e);
+          + ", crcPerBlock=" + crcPerBlock + ", crcType=" + crcType 
+          + ", md5=" + md5, e);
-}
+}

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS40 INS43 INS42 INS42 INS25 INS53 INS65 INS40 INS41 INS42 INS41 INS60 INS60 INS42 INS32 INS8 INS25 INS14 INS66 INS40 INS14 INS43 INS59 INS43 INS59 INS8 INS32 INS42 INS42 INS32 INS41 INS32 INS8 INS43 INS27 INS43 INS32 INS42 INS21 INS42 INS42 INS32 INS40 INS42 INS25 INS50 INS32 INS42 INS40 INS42 INS40 INS42 INS42 INS32 INS41 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS27 INS8 INS8 INS42 INS49 MOV41 INS49 INS41 INS49 INS41 INS42 INS40 INS42 INS40 INS42 INS42 INS45 INS27 INS27 INS27 INS21 INS21 INS42 INS42 INS14 INS33 INS45 INS32 INS42 INS33 INS42 INS45 INS7 INS7 UPD43 INS43 INS32 INS32 INS14 INS32 INS42 INS42 INS40 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS42 DEL45 DEL8