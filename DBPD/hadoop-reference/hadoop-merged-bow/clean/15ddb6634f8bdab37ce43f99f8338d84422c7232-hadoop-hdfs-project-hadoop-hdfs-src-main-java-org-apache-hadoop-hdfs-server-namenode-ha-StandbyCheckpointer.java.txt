HDFS-2800. Fix cancellation of checkpoints in the standby node to be more reliable. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339745 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.util.Canceler;
+
+  private Object cancelLock = new Object();
+  private Canceler canceler;
+    cancelAndPreventCheckpoints("Stopping checkpointer");
+    assert canceler != null;
-      
-      img.saveNamespace(namesystem);
+
+      img.saveNamespace(namesystem, canceler);
-  public void cancelAndPreventCheckpoints() throws ServiceFailedException {
-    try {
-      thread.preventCheckpointsFor(PREVENT_AFTER_CANCEL_MS);
-      // TODO(HA): there is a really narrow race here if we are just
-      // about to start a checkpoint - this won't cancel it!
-      namesystem.getFSImage().cancelSaveNamespace(
-          "About to exit standby state");
-    } catch (InterruptedException e) {
-      throw new ServiceFailedException(
-          "Interrupted while trying to cancel checkpoint");
+  public void cancelAndPreventCheckpoints(String msg) throws ServiceFailedException {
+    thread.preventCheckpointsFor(PREVENT_AFTER_CANCEL_MS);
+    synchronized (cancelLock) {
+      // Before beginning a checkpoint, the checkpointer thread
+      // takes this lock, and creates a canceler object.
+      // If the canceler is non-null, then a checkpoint is in
+      // progress and we need to cancel it. If it's null, then
+      // the operation has not started, meaning that the above
+      // time-based prevention will take effect.
+      if (canceler != null) {
+        canceler.cancel(msg);
+      }
-          if (needCheckpoint && now < preventCheckpointsUntil) {
-            LOG.info("But skipping this checkpoint since we are about to failover!");
-            canceledCount++;
-          } else if (needCheckpoint) {
+          
+          synchronized (cancelLock) {
+            if (now < preventCheckpointsUntil) {
+              LOG.info("But skipping this checkpoint since we are about to failover!");
+              canceledCount++;
+              continue;
+            }
+            assert canceler == null;
+            canceler = new Canceler();
+          }
+          
+          if (needCheckpoint) {
+        } finally {
+          synchronized (cancelLock) {
+            canceler = null;
+          }

INS26 INS40 INS23 INS23 INS83 INS43 INS59 INS83 INS43 INS59 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS21 INS6 INS43 INS42 MOV21 INS51 INS43 INS32 INS27 INS42 INS42 INS8 INS42 INS42 INS45 INS42 INS33 INS25 INS27 INS8 INS42 INS42 INS33 MOV21 INS8 INS51 MOV25 INS51 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS8 INS42 INS8 MOV25 INS6 INS21 INS21 MOV27 INS27 INS7 INS7 INS18 INS42 INS33 INS42 INS14 INS42 INS33 INS43 INS42 DEL32 DEL45 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL27