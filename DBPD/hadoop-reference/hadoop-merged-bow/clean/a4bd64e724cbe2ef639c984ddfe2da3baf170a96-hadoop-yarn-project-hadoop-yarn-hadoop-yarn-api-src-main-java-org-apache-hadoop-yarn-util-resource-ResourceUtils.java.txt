YARN-9116. Capacity Scheduler: implements queue level maximum-allocation inheritance. Contributed by Aihua Xu.

+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+import org.apache.hadoop.yarn.api.records.impl.LightWeightResource;
+import org.apache.hadoop.yarn.exceptions.ResourceNotFoundException;
+  private final static String RES_PATTERN = "^[^=]+=\\d+\\s?\\w*$";
+
+
+  /**
+   * Return a new {@link Resource} instance with all resource values
+   * initialized to {@code value}.
+   * @param value the value to use for all resources
+   * @return a new {@link Resource} instance
+   */
+  @InterfaceAudience.Private
+  @InterfaceStability.Unstable
+  public static Resource createResourceWithSameValue(long value) {
+    LightWeightResource res = new LightWeightResource(value,
+            Long.valueOf(value).intValue());
+    int numberOfResources = getNumberOfKnownResourceTypes();
+    for (int i = 2; i < numberOfResources; i++) {
+      res.setResourceValue(i, value);
+    }
+
+    return res;
+  }
+
+  @InterfaceAudience.Private
+  @InterfaceStability.Unstable
+  public static Resource createResourceFromString(
+          String resourceStr,
+          List<ResourceTypeInfo> resourceTypeInfos) {
+    Map<String, Long> typeToValue = parseResourcesString(resourceStr);
+    validateResourceTypes(typeToValue.keySet(), resourceTypeInfos);
+    Resource resource = Resource.newInstance(0, 0);
+    for (Entry<String, Long> entry : typeToValue.entrySet()) {
+      resource.setResourceValue(entry.getKey(), entry.getValue());
+    }
+    return resource;
+  }
+
+  private static Map<String, Long> parseResourcesString(String resourcesStr) {
+    Map<String, Long> resources = new HashMap<>();
+    String[] pairs = resourcesStr.trim().split(",");
+    for (String resource : pairs) {
+      resource = resource.trim();
+      if (!resource.matches(RES_PATTERN)) {
+        throw new IllegalArgumentException("\"" + resource + "\" is not a "
+                + "valid resource type/amount pair. "
+                + "Please provide key=amount pairs separated by commas.");
+      }
+      String[] splits = resource.split("=");
+      String key = splits[0], value = splits[1];
+      String units = getUnits(value);
+
+      String valueWithoutUnit = value.substring(0,
+              value.length()- units.length()).trim();
+      long resourceValue = Long.parseLong(valueWithoutUnit);
+
+      // Convert commandline unit to standard YARN unit.
+      if (units.equals("M") || units.equals("m")) {
+        units = "Mi";
+      } else if (units.equals("G") || units.equals("g")) {
+        units = "Gi";
+      } else if (units.isEmpty()) {
+        // do nothing;
+      } else {
+        throw new IllegalArgumentException("Acceptable units are M/G or empty");
+      }
+
+      // special handle memory-mb and memory
+      if (key.equals(ResourceInformation.MEMORY_URI)) {
+        if (!units.isEmpty()) {
+          resourceValue = UnitsConversionUtil.convert(units, "Mi",
+                  resourceValue);
+        }
+      }
+
+      if (key.equals("memory")) {
+        key = ResourceInformation.MEMORY_URI;
+        resourceValue = UnitsConversionUtil.convert(units, "Mi",
+                resourceValue);
+      }
+
+      // special handle gpu
+      if (key.equals("gpu")) {
+        key = ResourceInformation.GPU_URI;
+      }
+
+      // special handle fpga
+      if (key.equals("fpga")) {
+        key = ResourceInformation.FPGA_URI;
+      }
+
+      resources.put(key, resourceValue);
+    }
+    return resources;
+  }
+
+  private static void validateResourceTypes(
+          Iterable<String> resourceNames,
+          List<ResourceTypeInfo> resourceTypeInfos)
+          throws ResourceNotFoundException {
+    for (String resourceName : resourceNames) {
+      if (!resourceTypeInfos.stream().anyMatch(
+          e -> e.getName().equals(resourceName))) {
+        throw new ResourceNotFoundException(
+                "Unknown resource: " + resourceName);
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS78 INS83 INS83 INS43 INS42 INS44 INS8 INS78 INS78 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS45 INS65 INS65 INS65 INS40 INS40 INS42 INS39 INS42 INS60 INS60 INS24 INS41 INS40 INS40 INS42 INS43 INS42 INS74 INS42 INS60 INS21 INS60 INS70 INS41 INS43 INS43 INS43 INS43 INS42 INS60 INS60 INS70 INS41 INS74 INS42 INS74 INS42 INS42 INS70 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS65 INS66 INS43 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS43 INS74 INS59 INS32 INS43 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS5 INS59 INS44 INS42 INS8 INS42 INS43 INS43 INS43 INS43 INS44 INS42 INS8 INS42 INS66 INS42 INS42 INS42 INS14 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS43 INS43 INS43 INS42 INS14 INS43 INS85 INS42 INS32 INS43 INS42 INS21 INS25 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS25 INS25 INS25 INS21 INS42 INS42 INS42 INS42 INS43 INS42 INS25 INS43 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS34 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS45 INS42 INS7 INS38 INS8 INS5 INS59 INS43 INS59 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS25 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS42 INS38 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS32 INS32 INS53 INS43 INS85 INS42 INS32 INS42 INS42 INS2 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS21 INS27 INS8 INS25 INS42 INS42 INS40 INS25 INS42 INS42 INS45 INS21 INS21 INS42 INS42 INS45 INS21 INS42 INS42 INS45 INS21 INS42 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS45 INS42 INS34 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS32 INS32 INS21 INS32 INS8 INS8 INS38 INS8 INS7 INS7 INS7 INS7 INS32 INS42 INS86 INS14 INS43 INS27 INS42 INS42 INS34 INS27 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS42 INS42 INS53 INS32 INS21 INS42 INS40 INS42 INS32 INS42 INS40 INS42 INS40 INS42 INS42 INS59 INS32 INS43 INS27 INS42 INS45 INS42 INS45 INS45 INS45 INS32 INS32 INS42 INS45 INS14 INS42 INS42 INS7 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42