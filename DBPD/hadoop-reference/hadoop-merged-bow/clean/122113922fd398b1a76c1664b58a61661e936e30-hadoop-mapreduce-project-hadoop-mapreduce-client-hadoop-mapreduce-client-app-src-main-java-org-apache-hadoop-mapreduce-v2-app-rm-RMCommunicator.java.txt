Merging trunk to HDFS-1623 branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1177117 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
+import org.apache.hadoop.mapreduce.v2.api.records.JobReport;
-import org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest;
-import org.apache.hadoop.yarn.api.protocolrecords.AllocateResponse;
-import org.apache.hadoop.yarn.api.records.AMResponse;
-import org.apache.hadoop.yarn.api.records.ContainerId;
-import org.apache.hadoop.yarn.api.records.ResourceRequest;
-public class RMCommunicator extends AbstractService  {
+public abstract class RMCommunicator extends AbstractService  {
-  private int lastResponseID;
+  protected int lastResponseID;
+  /**
+   * Get the appProgress. Can be used only after this component is started.
+   * @return the appProgress.
+   */
+  protected float getApplicationProgress() {
+    // For now just a single job. In future when we have a DAG, we need an
+    // aggregate progress.
+    JobReport report = this.job.getReport();
+    float setupWeight = 0.05f;
+    float cleanupWeight = 0.05f;
+    float mapWeight = 0.0f;
+    float reduceWeight = 0.0f;
+    int numMaps = this.job.getTotalMaps();
+    int numReduces = this.job.getTotalReduces();
+    if (numMaps == 0 && numReduces == 0) {
+    } else if (numMaps == 0) {
+      reduceWeight = 0.9f;
+    } else if (numReduces == 0) {
+      mapWeight = 0.9f;
+    } else {
+      mapWeight = reduceWeight = 0.45f;
+    }
+    return (report.getSetupProgress() * setupWeight
+        + report.getCleanupProgress() * cleanupWeight
+        + report.getMapProgress() * mapWeight + report.getReduceProgress()
+        * reduceWeight);
+  }
+
-  protected synchronized void heartbeat() throws Exception {
-    AllocateRequest allocateRequest =
-        recordFactory.newRecordInstance(AllocateRequest.class);
-    allocateRequest.setApplicationAttemptId(applicationAttemptId);
-    allocateRequest.setResponseId(lastResponseID);
-    allocateRequest.addAllAsks(new ArrayList<ResourceRequest>());
-    allocateRequest.addAllReleases(new ArrayList<ContainerId>());
-    AllocateResponse allocateResponse = scheduler.allocate(allocateRequest);
-    AMResponse response = allocateResponse.getAMResponse();
-    if (response.getReboot()) {
-      LOG.info("Event from RM: shutting down Application Master");
-    }
-  }
-
+  protected abstract void heartbeat() throws Exception;

MOV26 MOV31 UPD40 INS83 INS31 UPD83 INS29 UPD39 UPD42 INS83 INS83 INS39 INS42 MOV43 INS65 INS65 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS41 INS66 INS66 UPD43 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS25 INS36 UPD42 UPD42 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS32 INS42 INS32 INS27 INS27 INS27 INS8 INS25 INS27 INS22 INS42 INS22 UPD42 MOV42 INS22 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS21 INS27 INS8 INS8 INS27 INS27 INS52 INS42 INS52 INS42 INS52 INS42 INS7 INS42 INS34 INS21 INS21 INS27 INS27 INS32 INS42 INS42 INS34 INS7 INS7 INS27 INS27 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS42 INS7 INS32 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS34 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL32 DEL45 DEL32 DEL21 DEL8 DEL25