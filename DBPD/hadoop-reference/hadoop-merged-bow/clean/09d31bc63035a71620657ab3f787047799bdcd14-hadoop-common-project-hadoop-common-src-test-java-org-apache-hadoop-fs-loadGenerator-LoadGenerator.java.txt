HADOOP-9992. Modify the NN loadGenerator to optionally run as a MapReduce job. Contributed by Akshay Radia

-import java.io.File;
-import java.io.FileReader;
+import java.io.DataInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStreamReader;
+import java.io.PrintStream;
-import org.apache.hadoop.fs.FileStatus;
-import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.UnsupportedFileSystemException;
- * different client loads.
- * It allows the user to generate different mixes of read, write,
+ * different client loads. Note there is a subclass of this clas that lets 
+ * you run a the load generator as a MapReduce job (see LoadGeneratorMR in the 
+ * MapReduce project.
+ * 
+ * The loadGenerator allows the user to generate different mixes of read, write,
+ *
+ * The program can run in one of two forms. As a regular single process command
+ * that runs multiple threads to generate load on the NN or as a Map Reduce
+ * program that runs multiple (multi-threaded) map tasks that generate load
+ * on the NN; the results summary is generated by a single reduce task.
+ * 
- * use for specified durations.
+ * use for specified durations. If no duration is specified the program
+ * runs till killed (duration required if run as MapReduce).
- * Blank lines and lines starting with # (comments) are ignored.
+ * Blank lines and lines starting with # (comments) are ignored. If load
+ * generator is run as a MapReduce program then the script file needs to be
+ * accessible on the the Map task as a HDFS file.
-  private volatile boolean shouldRun = true;
-  private Path root = DataGenerator.DEFAULT_ROOT;
-  private FileContext fc;
-  private int maxDelayBetweenOps = 0;
-  private int numOfThreads = 200;
-  private long [] durations = {0};
-  private double [] readProbs = {0.3333};
-  private double [] writeProbs = {0.3333};
-  private volatile int currentIndex = 0;
-  long totalTime = 0;
-  private long startTime = Time.now()+10000;
+  private volatile static boolean shouldRun = true;
+  protected static Path root = DataGenerator.DEFAULT_ROOT;
+  private static FileContext fc;
+  protected static int maxDelayBetweenOps = 0;
+  protected static int numOfThreads = 200;
+  protected static long [] durations = {0};
+  protected static double [] readProbs = {0.3333};
+  protected static double [] writeProbs = {0.3333};
+  private static volatile int currentIndex = 0;
+  protected static long totalTime = 0;
+  protected static long startTime = Time.now()+10000;
-  private ArrayList<String> files = new ArrayList<String>();  // a table of file names
-  private ArrayList<String> dirs = new ArrayList<String>(); // a table of directory names
-  private Random r = null;
-  final private static String USAGE = "java LoadGenerator\n" +
-  	"-readProbability <read probability>\n" +
-    "-writeProbability <write probability>\n" +
-    "-root <root>\n" +
-    "-maxDelayBetweenOps <maxDelayBetweenOpsInMillis>\n" +
-    "-numOfThreads <numOfThreads>\n" +
-    "-elapsedTime <elapsedTimeInSecs>\n" +
-    "-startTime <startTimeInMillis>\n" +
-    "-scriptFile <filename>";
-  final private String hostname;
+  private static ArrayList<String> files = new ArrayList<String>();  // a table of file names
+  private static ArrayList<String> dirs = new ArrayList<String>(); // a table of directory names
+  protected static Random r = null;
+  protected static long seed = 0;
+  protected static String scriptFile = null;
+  protected static final String FLAGFILE_DEFAULT = "/tmp/flagFile";
+  protected static Path flagFile = new Path(FLAGFILE_DEFAULT);
+  protected String hostname;
+  final private static String USAGE_CMD = "java LoadGenerator\n";
+  final protected static String USAGE_ARGS = 
+	  "-readProbability <read probability>\n" +
+      "-writeProbability <write probability>\n" +
+      "-root <root>\n" +
+      "-maxDelayBetweenOps <maxDelayBetweenOpsInMillis>\n" +
+      "-numOfThreads <numOfThreads>\n" +
+      "-elapsedTime <elapsedTimeInSecs>\n" +
+      "-startTime <startTimeInMillis>\n" +
+      "-scriptFile <filename>\n" +
+      "-flagFile <filename>";
+  final private static String USAGE = USAGE_CMD + USAGE_ARGS;
+  
+
+  
+
+
+  
+  public LoadGenerator(Configuration conf) throws IOException, UnknownHostException {
+    this();
+    setConf(conf);
+  }
-  private final static int OPEN = 0;
-  private final static int LIST = 1;
-  private final static int CREATE = 2;
-  private final static int WRITE_CLOSE = 3;
-  private final static int DELETE = 4;
-  private final static int TOTAL_OP_TYPES =5;
-  private long [] executionTime = new long[TOTAL_OP_TYPES];
-  private long [] totalNumOfOps = new long[TOTAL_OP_TYPES];
+  protected final static int OPEN = 0;
+  protected final static int LIST = 1;
+  protected final static int CREATE = 2;
+  protected final static int WRITE_CLOSE = 3;
+  protected final static int DELETE = 4;
+  protected final static int TOTAL_OP_TYPES =5;
+  protected static long [] executionTime = new long[TOTAL_OP_TYPES];
+  protected static long [] numOfOps = new long[TOTAL_OP_TYPES];
+  protected static long totalOps = 0; // across all of types
-    /** Main loop
+    /** Main loop for each thread
-        totalNumOfOps[CREATE]++;
+        numOfOps[CREATE]++;
-        totalNumOfOps[WRITE_CLOSE]++;
+        numOfOps[WRITE_CLOSE]++;
-  /** Main function:
+  /** Main function called by tool runner.
-   * It then starts the number of DFSClient threads as specified by
-   * the user.
-   * It stops all the threads when the specified elapsed time is passed.
-   * Before exiting, it prints the average execution for 
-   * each operation and operation throughput.
+   * It then calls the loadGenerator
-    int exitCode = init(args);
+    int exitCode = parseArgs(false, args);
+    System.out.println("Running LoadGenerator against fileSystem: " + 
+    FileContext.getFileContext().getDefaultFileSystem().getUri());
+    exitCode = generateLoadOnNN();
+    printResults(System.out);
+    return exitCode;
+  }
+  boolean stopFileCreated() {
+    try {
+      fc.getFileStatus(flagFile);
+    } catch (FileNotFoundException e) {
+      return false;
+    } catch (IOException e) {
+      LOG.error("Got error when checking if file exists:" + flagFile, e);
+    }
+    LOG.info("Flag file was created. Stopping the test.");
+    return true;
+  }
+  
+ /**
+  * This is the main function - run threads to generate load on NN
+  * It starts the number of DFSClient threads as specified by
+  * the user.
+  * It stops all the threads when the specified elapsed time is passed.
+  */
+  protected int generateLoadOnNN() throws InterruptedException {
+    int hostHashCode = hostname.hashCode();
+    if (seed == 0) {
+      r = new Random(System.currentTimeMillis()+hostHashCode);
+    } else {
+      r = new Random(seed+hostHashCode);
+    }
+    try {
+      fc = FileContext.getFileContext(getConf());
+    } catch (IOException ioe) {
+      System.err.println("Can not initialize the file system: " + 
+          ioe.getLocalizedMessage());
+      return -1;
+    }
+    
+    int status = initFileDirTables();
+    if (status != 0) {
+      return status;
+    }
-      while(shouldRun) {
-        Thread.sleep(durations[currentIndex] * 1000);
-        totalTime += durations[currentIndex];
-        
-        // Are we on the final line of the script?
-        if( (currentIndex + 1) == durations.length) {
-          shouldRun = false;
-        } else {
-          if(LOG.isDebugEnabled()) {
-            LOG.debug("Moving to index " + currentIndex + ": r = "
-                + readProbs[currentIndex] + ", w = " + writeProbs
-                + " for duration " + durations[currentIndex]);
+      if (durations.length == 1) {// There is a fixed run time
+        while (shouldRun) {
+          Thread.sleep(2000);
+          totalTime += 2;
+          if (totalTime >= durations[0] || stopFileCreated()) {
+            shouldRun = false;
-          currentIndex++;
+        }
+      } else {
+        // script run
+
+        while (shouldRun) {
+          Thread.sleep(durations[currentIndex] * 1000);
+          totalTime += durations[currentIndex];
+          // Are we on the final line of the script?
+          if ((currentIndex + 1) == durations.length || stopFileCreated()) {
+            shouldRun = false;
+          } else {
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Moving to index " + currentIndex + ": r = "
+                  + readProbs[currentIndex] + ", w = " + writeProbs
+                  + " for duration " + durations[currentIndex]);
+            }
+            currentIndex++;
+          }
-    } 
+    }
-
+    
-        totalNumOfOps[i] += thread.totalNumOfOps[i];
+        numOfOps[i] += thread.totalNumOfOps[i];
-
+    int exitCode = 0;
-    long totalOps = 0;
+    totalOps = 0;
-      totalOps += totalNumOfOps[i];
+      totalOps += numOfOps[i];
-    
-    if (totalNumOfOps[OPEN] != 0) {
-      System.out.println("Average open execution time: " + 
-          (double)executionTime[OPEN]/totalNumOfOps[OPEN] + "ms");
-    }
-    if (totalNumOfOps[LIST] != 0) {
-      System.out.println("Average list execution time: " + 
-          (double)executionTime[LIST]/totalNumOfOps[LIST] + "ms");
-    }
-    if (totalNumOfOps[DELETE] != 0) {
-      System.out.println("Average deletion execution time: " + 
-          (double)executionTime[DELETE]/totalNumOfOps[DELETE] + "ms");
-      System.out.println("Average create execution time: " + 
-          (double)executionTime[CREATE]/totalNumOfOps[CREATE] + "ms");
-      System.out.println("Average write_close execution time: " + 
-          (double)executionTime[WRITE_CLOSE]/totalNumOfOps[WRITE_CLOSE] + "ms");
-    }
-    if (durations[0] != 0) { 
-      System.out.println("Average operations per second: " + 
-          (double)totalOps/totalTime +"ops/s");
-    }
-    System.out.println();
+  
+  protected static void printResults(PrintStream out) throws UnsupportedFileSystemException {
+    out.println("Result of running LoadGenerator against fileSystem: " + 
+    FileContext.getFileContext().getDefaultFileSystem().getUri());
+    if (numOfOps[OPEN] != 0) {
+      out.println("Average open execution time: " + 
+          (double)executionTime[OPEN]/numOfOps[OPEN] + "ms");
+    }
+    if (numOfOps[LIST] != 0) {
+      out.println("Average list execution time: " + 
+          (double)executionTime[LIST]/numOfOps[LIST] + "ms");
+    }
+    if (numOfOps[DELETE] != 0) {
+      out.println("Average deletion execution time: " + 
+          (double)executionTime[DELETE]/numOfOps[DELETE] + "ms");
+      out.println("Average create execution time: " + 
+          (double)executionTime[CREATE]/numOfOps[CREATE] + "ms");
+      out.println("Average write_close execution time: " + 
+          (double)executionTime[WRITE_CLOSE]/numOfOps[WRITE_CLOSE] + "ms");
+    }
+    if (totalTime != 0) { 
+      out.println("Average operations per second: " + 
+          (double)totalOps/totalTime +"ops/s");
+    }
+    out.println();
+  }
+    
-  private int init(String[] args) throws IOException {
-    try {
-      fc = FileContext.getFileContext(getConf());
-    } catch (IOException ioe) {
-      System.err.println("Can not initialize the file system: " + 
-          ioe.getLocalizedMessage());
-      return -1;
-    }
-    int hostHashCode = hostname.hashCode();
-    boolean scriptSpecified = false;
-    
-    try {
+  protected int parseArgs(boolean runAsMapReduce, String[] args) throws IOException {
+   try {
-          if(loadScriptFile(args[++i]) == -1)
+          scriptFile = args[++i];
+          if (durations[0] > 0)  {
+            System.err.println("Can't specify elapsedTime and use script.");
-          scriptSpecified = true;
+          }
-          if(scriptSpecified) {
+          if (scriptFile != null) {
-          if(scriptSpecified) {
+          if (scriptFile != null) {
-          if(scriptSpecified) {
+          if (scriptFile != null) {
-          r = new Random(Long.parseLong(args[++i])+hostHashCode);
-        } else {
+          seed = Long.parseLong(args[++i]);
+          r = new Random(seed);
+        }  else if (args[i].equals("-flagFile")) {
+          LOG.info("got flagFile:" + flagFile);
+          flagFile = new Path(args[++i]);
+        }else { 
+    // Load Script File if not MR; for MR scriptFile is loaded by Mapper
+    if (!runAsMapReduce && scriptFile != null) { 
+      if(loadScriptFile(scriptFile, true) == -1)
+        return -1;
+    }
+    
-    
-    if (r==null) {
-      r = new Random(Time.now()+hostHashCode);
-    }
-    
-    return initFileDirTables();
+    return 0;
-  private int loadScriptFile(String filename) throws IOException  {
-    FileReader fr = new FileReader(new File(filename));
-    BufferedReader br = new BufferedReader(fr);
+  protected static int loadScriptFile(String filename, boolean readLocally) throws IOException {
+    
+    FileContext fc;
+    if (readLocally) { // read locally - program is run without MR
+      fc = FileContext.getLocalFSFileContext();
+    } else {
+      fc = FileContext.getFileContext(); // use default file system
+    }
+    DataInputStream in = null;
+    try {
+      in = fc.open(new Path(filename));
+    } catch (IOException e) {
+      System.err.println("Unable to open scriptFile: " + filename);
+
+      System.exit(-1);
+    } 
+    InputStreamReader inr = new InputStreamReader(in);
+    
+    BufferedReader br = new BufferedReader(inr);
-  private void barrier() {
+  private static void barrier() {
-    int res = ToolRunner.run(new Configuration(),
-        new LoadGenerator(), args);
+    int res = ToolRunner.run(new Configuration(), new LoadGenerator(), args);
-

MOV26 MOV26 MOV26 INS26 INS26 INS26 MOV23 INS40 UPD40 UPD40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS23 INS31 INS31 INS31 INS83 UPD83 INS83 INS83 UPD83 INS83 UPD83 INS83 UPD83 INS83 UPD83 INS83 UPD83 INS83 INS83 INS83 INS83 UPD83 INS83 INS83 INS83 UPD83 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS43 INS59 UPD83 INS83 INS83 INS83 INS43 INS59 UPD83 INS43 INS83 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS43 INS43 INS8 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 INS83 UPD83 INS83 INS83 INS83 INS39 MOV59 INS29 MOV78 INS83 INS39 INS42 MOV44 MOV43 INS8 INS39 INS42 INS8 UPD83 INS42 INS43 INS83 INS83 INS39 INS42 INS44 INS43 INS8 UPD83 UPD42 INS44 UPD83 INS83 INS44 INS83 UPD66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 UPD66 INS66 UPD66 INS66 INS66 INS42 INS34 INS42 INS42 INS33 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS45 INS42 UPD42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS17 INS21 UPD42 INS65 INS60 MOV25 INS21 INS21 INS21 INS41 INS54 INS21 INS41 INS42 INS25 MOV54 INS60 INS25 INS60 INS21 INS43 INS42 INS42 INS21 MOV25 MOV25 MOV25 MOV25 INS21 INS39 INS42 INS25 INS39 INS42 INS60 INS25 INS60 INS54 INS60 INS43 INS42 UPD45 INS45 INS42 INS42 INS42 INS32 INS66 INS66 INS66 INS39 INS59 INS32 INS7 INS32 INS42 INS8 INS12 INS12 INS32 INS9 UPD66 UPD66 MOV59 INS27 INS8 INS8 INS39 INS59 INS27 INS8 INS8 INS39 INS59 INS7 INS42 INS32 INS32 INS27 MOV8 INS34 UPD43 MOV43 INS59 INS42 INS8 INS8 INS43 INS59 INS8 INS12 INS43 INS59 MOV43 INS42 INS42 INS42 UPD66 INS42 INS32 INS40 INS42 INS27 INS42 INS32 INS42 INS40 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS45 UPD42 MOV42 INS42 INS34 INS21 INS21 INS42 MOV32 INS42 INS34 INS41 INS25 INS42 INS34 INS42 INS34 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS38 INS27 INS25 UPD42 UPD42 MOV42 INS21 INS21 UPD42 MOV42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS9 INS42 INS45 INS32 INS42 INS32 INS43 INS42 INS41 INS43 INS42 INS21 UPD42 MOV42 INS7 INS7 MOV21 INS42 INS27 INS8 MOV8 INS45 INS32 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 MOV33 INS27 MOV41 INS7 INS7 INS7 INS43 INS42 INS21 INS21 INS43 INS42 MOV43 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS14 INS42 INS14 MOV32 INS40 INS34 INS61 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 MOV38 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS43 INS27 MOV43 INS27 UPD40 MOV40 INS42 INS8 UPD42 INS32 INS42 UPD42 UPD42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS40 INS42 INS27 INS42 INS42 INS38 UPD42 UPD42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS25 INS42 INS42 MOV25 UPD43 MOV43 MOV42 INS45 INS42 INS34 INS42 INS42 INS32 INS7 INS27 INS8 INS27 UPD42 INS27 INS25 UPD42 INS42 INS42 INS34 INS42 INS34 INS27 INS32 INS21 MOV27 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV2 INS2 INS34 INS27 MOV8 MOV25 INS42 MOV2 INS42 INS7 INS42 INS42 INS34 INS42 INS33 INS27 INS42 INS9 INS42 INS33 INS25 INS25 INS27 INS8 INS21 INS32 INS8 MOV8 INS42 INS33 INS21 INS41 INS7 INS2 INS42 INS45 INS21 INS21 INS32 INS38 UPD42 MOV32 INS42 INS14 INS42 INS42 INS32 INS7 INS40 INS42 INS45 INS34 MOV43 INS42 INS42 INS42 INS27 INS42 INS14 INS45 INS42 INS43 INS2 INS42 INS42 INS38 INS42 DEL83 DEL45 DEL66 DEL66 DEL66 DEL42 DEL39 DEL60 DEL40 DEL40 DEL40 DEL40 DEL40 DEL34 DEL40 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL32 DEL27 DEL25 DEL9 DEL42 DEL42 DEL42 DEL25 DEL42 DEL27 DEL14 DEL42 DEL42 DEL27 DEL14 DEL7 DEL21 DEL27 DEL25 DEL43 DEL14 DEL14 DEL59 DEL60