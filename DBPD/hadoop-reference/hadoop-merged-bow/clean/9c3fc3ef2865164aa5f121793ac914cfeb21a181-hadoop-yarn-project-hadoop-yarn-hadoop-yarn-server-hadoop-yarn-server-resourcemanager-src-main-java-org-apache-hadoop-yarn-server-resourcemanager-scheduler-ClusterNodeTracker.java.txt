YARN-7494. Add muti-node lookup mechanism and pluggable nodes sorting policies to optimize placement decision. Contributed by Sunil Govindan.

+import java.util.Set;
+  private Map<String, List<N>> nodesPerLabel = new HashMap<>();
+      List<N> nodesPerLabels = nodesPerLabel.get(node.getPartition());
+
+      if (nodesPerLabels == null) {
+        nodesPerLabels = new ArrayList<N>();
+      }
+      nodesPerLabels.add(node);
+
+      // Update new set of nodes for given partition.
+      nodesPerLabel.put(node.getPartition(), nodesPerLabels);
+
+      List<N> nodesPerPartition = nodesPerLabel.get(node.getPartition());
+      nodesPerPartition.remove(node);
+
+      // Update new set of nodes for given partition.
+      if (nodesPerPartition.isEmpty()) {
+        nodesPerLabel.remove(node.getPartition());
+      } else {
+        nodesPerLabel.put(node.getPartition(), nodesPerPartition);
+      }
+
+
+  /**
+   * update cached nodes per partition on a node label change event.
+   * @param partition nodeLabel
+   * @param nodeIds List of Node IDs
+   */
+  public void updateNodesPerPartition(String partition, Set<NodeId> nodeIds) {
+    writeLock.lock();
+    try {
+      // Clear all entries.
+      nodesPerLabel.remove(partition);
+
+      List<N> nodesPerPartition = new ArrayList<N>();
+      for (NodeId nodeId : nodeIds) {
+        N n = getNode(nodeId);
+        if (n != null) {
+          nodesPerPartition.add(n);
+        }
+      }
+
+      // Update new set of nodes for given partition.
+      nodesPerLabel.put(partition, nodesPerPartition);
+    } finally {
+      writeLock.unlock();
+    }
+  }
+
+  public List<N> getNodesPerPartition(String partition) {
+    List<N> nodesPerPartition = null;
+    readLock.lock();
+    try {
+      if (nodesPerLabel.containsKey(partition)) {
+        nodesPerPartition = new ArrayList<N>(nodesPerLabel.get(partition));
+      }
+    } finally {
+      readLock.unlock();
+    }
+    return nodesPerPartition;
+  }

INS26 INS40 INS23 INS31 INS31 INS83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS74 INS42 INS14 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS21 INS54 INS43 INS43 INS43 INS42 INS60 INS21 INS54 INS41 INS42 INS42 INS43 INS43 INS74 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS32 INS8 INS8 INS42 INS42 INS42 INS74 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS43 INS60 INS25 INS21 INS21 INS60 INS21 INS25 INS42 INS42 INS42 INS42 INS21 INS60 INS70 INS21 INS21 INS43 INS43 INS42 INS33 INS42 INS42 INS25 INS21 INS42 INS74 INS59 INS27 INS8 INS32 INS32 INS74 INS59 INS32 INS32 INS8 INS8 INS32 INS74 INS59 INS44 INS42 INS8 INS32 INS32 INS42 INS42 INS32 INS8 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS74 INS42 INS43 INS59 INS27 INS8 INS7 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS14 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS74 INS32 INS43 INS43 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42