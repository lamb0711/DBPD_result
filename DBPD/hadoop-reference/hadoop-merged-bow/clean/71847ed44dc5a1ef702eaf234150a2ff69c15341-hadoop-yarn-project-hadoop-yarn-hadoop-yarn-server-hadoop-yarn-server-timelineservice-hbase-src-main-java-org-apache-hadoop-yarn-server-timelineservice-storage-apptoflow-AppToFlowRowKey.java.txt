YARN-5378. Accommodate app-id->cluster mapping (Sangjin Lee via Varun Saxena)

-import org.apache.hadoop.hbase.util.Bytes;
-import org.apache.hadoop.yarn.server.timelineservice.storage.common.Separator;
- * Represents a rowkey for the app_flow table.
+ * Represents a row key for the app_flow table, which is the app id.
-  private final String clusterId;
-  private final KeyConverter<AppToFlowRowKey> appToFlowRowKeyConverter =
-      new AppToFlowRowKeyConverter();
+  private final KeyConverter<String> appIdKeyConverter =
+      new AppIdKeyConverter();
-  public AppToFlowRowKey(String clusterId, String appId) {
-    this.clusterId = clusterId;
+  public AppToFlowRowKey(String appId) {
-  public String getClusterId() {
-    return clusterId;
-  }
-
-   * Constructs a row key prefix for the app_flow table as follows:
-   * {@code clusterId!AppId}.
+   * Constructs a row key prefix for the app_flow table.
-    return appToFlowRowKeyConverter.encode(this);
+    return appIdKeyConverter.encode(appId);
-    return new AppToFlowRowKeyConverter().decode(rowKey);
-  }
-
-  /**
-   * Encodes and decodes row key for app_flow table. The row key is of the form
-   * clusterId!appId. clusterId is a string and appId is encoded/decoded using
-   * {@link AppIdKeyConverter}.
-   * <p>
-   */
-  final private static class AppToFlowRowKeyConverter implements
-      KeyConverter<AppToFlowRowKey> {
-
-    private final KeyConverter<String> appIDKeyConverter =
-        new AppIdKeyConverter();
-
-    /**
-     * Intended for use in AppToFlowRowKey only.
-     */
-    private AppToFlowRowKeyConverter() {
-    }
-
-
-    /**
-     * App to flow row key is of the form clusterId!appId with the 2 segments
-     * separated by !. The sizes below indicate sizes of both of these segments
-     * in sequence. clusterId is a string. appId is represented as 12 bytes w.
-     * cluster Timestamp part of appid taking 8 bytes(long) and seq id taking 4
-     * bytes(int). Strings are variable in size (i.e. end whenever separator is
-     * encountered). This is used while decoding and helps in determining where
-     * to split.
-     */
-    private static final int[] SEGMENT_SIZES = {Separator.VARIABLE_SIZE,
-        Bytes.SIZEOF_LONG + Bytes.SIZEOF_INT };
-
-    /*
-     * (non-Javadoc)
-     *
-     * Encodes AppToFlowRowKey object into a byte array with each
-     * component/field in AppToFlowRowKey separated by Separator#QUALIFIERS.
-     * This leads to an app to flow table row key of the form clusterId!appId
-     *
-     * @see
-     * org.apache.hadoop.yarn.server.timelineservice.storage.common
-     * .KeyConverter#encode(java.lang.Object)
-     */
-    @Override
-    public byte[] encode(AppToFlowRowKey rowKey) {
-      byte[] first =
-          Separator.encode(rowKey.getClusterId(), Separator.SPACE,
-              Separator.TAB, Separator.QUALIFIERS);
-      byte[] second = appIDKeyConverter.encode(rowKey.getAppId());
-      return Separator.QUALIFIERS.join(first, second);
-    }
-
-    /*
-     * (non-Javadoc)
-     *
-     * Decodes an app to flow row key of the form clusterId!appId represented
-     * in byte format and converts it into an AppToFlowRowKey object.
-     *
-     * @see
-     * org.apache.hadoop.yarn.server.timelineservice.storage.common
-     * .KeyConverter#decode(byte[])
-     */
-    @Override
-    public AppToFlowRowKey decode(byte[] rowKey) {
-      byte[][] rowKeyComponents =
-          Separator.QUALIFIERS.split(rowKey, SEGMENT_SIZES);
-      if (rowKeyComponents.length != 2) {
-        throw new IllegalArgumentException("the row key is not valid for "
-            + "the app-to-flow table");
-      }
-      String clusterId =
-          Separator.decode(Bytes.toString(rowKeyComponents[0]),
-              Separator.QUALIFIERS, Separator.TAB, Separator.SPACE);
-      String appId = appIDKeyConverter.decode(rowKeyComponents[1]);
-      return new AppToFlowRowKey(clusterId, appId);
-    }
+    String appId = new AppIdKeyConverter().decode(rowKey);
+    return new AppToFlowRowKey(appId);

MOV23 UPD66 UPD42 INS60 INS41 UPD66 MOV43 INS59 INS14 UPD42 INS42 INS42 INS32 MOV43 INS42 MOV14 MOV42 MOV42 UPD43 UPD42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL52 DEL32 DEL41 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL66 DEL65 DEL29 DEL83 DEL42 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL40 DEL40 DEL40 DEL27 DEL4 DEL59 DEL23 DEL42 DEL78 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL40 DEL40 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL85 DEL5 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL40 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL55