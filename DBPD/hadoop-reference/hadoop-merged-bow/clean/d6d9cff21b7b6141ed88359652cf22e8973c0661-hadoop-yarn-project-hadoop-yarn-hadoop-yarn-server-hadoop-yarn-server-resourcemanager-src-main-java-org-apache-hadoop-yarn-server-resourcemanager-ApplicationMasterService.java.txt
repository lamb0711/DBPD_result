YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)

+import org.apache.hadoop.yarn.api.records.ContainerUpdateType;
+import org.apache.hadoop.yarn.api.records.UpdateContainerError;
+import org.apache.hadoop.yarn.api.records.UpdateContainerRequest;
+import org.apache.hadoop.yarn.api.records.UpdatedContainer;
+
-      try {
-        RMServerUtils.increaseDecreaseRequestSanityCheck(rmContext,
-            request.getIncreaseRequests(), request.getDecreaseRequests(),
-            maximumCapacity);
-      } catch (InvalidResourceRequestException e) {
-        LOG.warn(e);
-        throw e;
-      }
-
-          LOG.warn("Invalid container release by application " + appAttemptId, e);
+          LOG.warn("Invalid container release by application " + appAttemptId,
+              e);
+      // Split Update Resource Requests into increase and decrease.
+      // No Exceptions are thrown here. All update errors are aggregated
+      // and returned to the AM.
+      List<UpdateContainerRequest> increaseResourceReqs = new ArrayList<>();
+      List<UpdateContainerRequest> decreaseResourceReqs = new ArrayList<>();
+      List<UpdateContainerError> updateContainerErrors =
+          RMServerUtils.validateAndSplitUpdateResourceRequests(rmContext,
+              request, maximumCapacity, increaseResourceReqs,
+              decreaseResourceReqs);
+
-                request.getIncreaseRequests(), request.getDecreaseRequests());
+                increaseResourceReqs, decreaseResourceReqs);
+      // Notify the AM of container update errors
+      if (!updateContainerErrors.isEmpty()) {
+        allocateResponse.setUpdateErrors(updateContainerErrors);
+      }
-      allocateResponse.setIncreasedContainers(allocation.getIncreasedContainers());
-      allocateResponse.setDecreasedContainers(allocation.getDecreasedContainers());
+      List<UpdatedContainer> updatedContainers = new ArrayList<>();
+      if (allocation.getIncreasedContainers() != null) {
+        for (Container c : allocation.getIncreasedContainers()) {
+          updatedContainers.add(
+              UpdatedContainer.newInstance(
+                  ContainerUpdateType.INCREASE_RESOURCE, c));
+        }
+      }
+      if (allocation.getDecreasedContainers() != null) {
+        for (Container c : allocation.getDecreasedContainers()) {
+          updatedContainers.add(
+              UpdatedContainer.newInstance(
+                  ContainerUpdateType.DECREASE_RESOURCE, c));
+        }
+      }
+
+      allocateResponse.setUpdatedContainers(updatedContainers);
-  
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS60 INS60 INS60 INS25 INS60 INS25 INS25 INS74 INS59 INS74 INS59 INS74 INS59 INS38 INS8 INS74 INS59 INS27 INS8 INS27 INS8 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS32 INS21 INS43 INS43 INS42 INS14 INS32 INS33 INS70 INS32 INS33 INS70 UPD42 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS44 MOV32 INS8 INS42 INS42 INS44 MOV32 INS8 INS43 INS43 UPD42 MOV42 UPD42 MOV42 INS42 INS43 UPD43 MOV43 UPD42 MOV42 MOV21 INS43 INS42 MOV21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 UPD42 UPD42 INS32 INS42 UPD42 INS32 INS42 UPD42 MOV42 INS40 INS42 UPD42 MOV42 INS42 INS40 INS42 DEL32 DEL32 DEL42 DEL32 DEL21 DEL8 DEL44 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL32 DEL42 DEL32