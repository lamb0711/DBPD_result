HDFS-4990. Change BlockPlacementPolicy to choose storages instead of datanodes.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1524444 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.hdfs.StorageType;
+import org.apache.hadoop.hdfs.server.protocol.DatanodeStorage.State;
-  public DatanodeDescriptor[] chooseTarget(String srcPath,
+  public DatanodeStorageInfo[] chooseTarget(String srcPath,
-                                    List<DatanodeDescriptor> chosenNodes,
+                                    List<DatanodeStorageInfo> chosenNodes,
-                                    long blocksize) {
+                                    long blocksize,
+                                    StorageType storageType) {
-        excludedNodes, blocksize);
+        excludedNodes, blocksize, storageType);
-  DatanodeDescriptor[] chooseTarget(String src,
+  DatanodeStorageInfo[] chooseTarget(String src,
-      List<DatanodeDescriptor> favoredNodes) {
+      List<DatanodeDescriptor> favoredNodes,
+      StorageType storageType) {
-            new ArrayList<DatanodeDescriptor>(numOfReplicas), false, 
-            excludedNodes, blocksize);
+            new ArrayList<DatanodeStorageInfo>(numOfReplicas), false, 
+            excludedNodes, blocksize, storageType);
-      List<DatanodeDescriptor> results = new ArrayList<DatanodeDescriptor>();
+      List<DatanodeStorageInfo> results = new ArrayList<DatanodeStorageInfo>();
-        DatanodeDescriptor target = chooseLocalNode(favoredNode,
+        final DatanodeStorageInfo target = chooseLocalStorage(favoredNode,
-            getMaxNodesPerRack(results, 
-                numOfReplicas)[1], results, avoidStaleNodes);
+            getMaxNodesPerRack(results.size(), numOfReplicas)[1],
+            results, avoidStaleNodes, storageType);
-        favoriteAndExcludedNodes.add(target);
+        favoriteAndExcludedNodes.add(target.getDatanodeDescriptor());
-        DatanodeDescriptor[] remainingTargets = 
+        DatanodeStorageInfo[] remainingTargets = 
-                false, favoriteAndExcludedNodes, blocksize);
+                false, favoriteAndExcludedNodes, blocksize, storageType);
-          results.toArray(new DatanodeDescriptor[results.size()]));
+          results.toArray(new DatanodeStorageInfo[results.size()]));
-          new ArrayList<DatanodeDescriptor>(numOfReplicas), false, 
-          excludedNodes, blocksize);
+          new ArrayList<DatanodeStorageInfo>(numOfReplicas), false, 
+          excludedNodes, blocksize, storageType);
-  private DatanodeDescriptor[] chooseTarget(int numOfReplicas,
+  private DatanodeStorageInfo[] chooseTarget(int numOfReplicas,
-                                    List<DatanodeDescriptor> chosenNodes,
+                                    List<DatanodeStorageInfo> chosenStorage,
-                                    long blocksize) {
+                                    long blocksize,
+                                    StorageType storageType) {
-      return DatanodeDescriptor.EMPTY_ARRAY;
+      return DatanodeStorageInfo.EMPTY_ARRAY;
-    int[] result = getMaxNodesPerRack(chosenNodes, numOfReplicas);
+    int[] result = getMaxNodesPerRack(chosenStorage.size(), numOfReplicas);
-    List<DatanodeDescriptor> results = 
-      new ArrayList<DatanodeDescriptor>(chosenNodes);
-    for (DatanodeDescriptor node:chosenNodes) {
+    final List<DatanodeStorageInfo> results = new ArrayList<DatanodeStorageInfo>(chosenStorage);
+    for (DatanodeStorageInfo storage : chosenStorage) {
-      addToExcludedNodes(node, excludedNodes);
+      addToExcludedNodes(storage.getDatanodeDescriptor(), excludedNodes);
-        excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);
+        excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes, storageType);
-      results.removeAll(chosenNodes);
+      results.removeAll(chosenStorage);
-                       results.toArray(new DatanodeDescriptor[results.size()]));
+                       results.toArray(new DatanodeStorageInfo[results.size()]));
-  private int[] getMaxNodesPerRack(List<DatanodeDescriptor> chosenNodes,
-      int numOfReplicas) {
+  private int[] getMaxNodesPerRack(int numOfChosen, int numOfReplicas) {
-    int totalNumOfReplicas = chosenNodes.size()+numOfReplicas;
+    int totalNumOfReplicas = numOfChosen + numOfReplicas;
-                                          List<DatanodeDescriptor> results,
-                                          final boolean avoidStaleNodes) {
+                                          List<DatanodeStorageInfo> results,
+                                          final boolean avoidStaleNodes,
+                                          StorageType storageType) {
-      writer = results.get(0);
+      writer = results.get(0).getDatanodeDescriptor();
-        writer = chooseLocalNode(writer, excludedNodes, blocksize,
-            maxNodesPerRack, results, avoidStaleNodes);
+        writer = chooseLocalStorage(writer, excludedNodes, blocksize,
+            maxNodesPerRack, results, avoidStaleNodes, storageType)
+                .getDatanodeDescriptor();
+      final DatanodeDescriptor dn0 = results.get(0).getDatanodeDescriptor();
-        chooseRemoteRack(1, results.get(0), excludedNodes, blocksize,
-            maxNodesPerRack, results, avoidStaleNodes);
+        chooseRemoteRack(1, dn0, excludedNodes, blocksize, maxNodesPerRack,
+            results, avoidStaleNodes, storageType);
-        if (clusterMap.isOnSameRack(results.get(0), results.get(1))) {
-          chooseRemoteRack(1, results.get(0), excludedNodes,
-                           blocksize, maxNodesPerRack, 
-                           results, avoidStaleNodes);
+        final DatanodeDescriptor dn1 = results.get(1).getDatanodeDescriptor();
+        if (clusterMap.isOnSameRack(dn0, dn1)) {
+          chooseRemoteRack(1, dn0, excludedNodes, blocksize, maxNodesPerRack,
+              results, avoidStaleNodes, storageType);
-          chooseLocalRack(results.get(1), excludedNodes, blocksize, 
-                          maxNodesPerRack, results, avoidStaleNodes);
+          chooseLocalRack(dn1, excludedNodes, blocksize, maxNodesPerRack,
+              results, avoidStaleNodes, storageType);
-              results, avoidStaleNodes);
+              results, avoidStaleNodes, storageType);
-          maxNodesPerRack, results, avoidStaleNodes);
+          maxNodesPerRack, results, avoidStaleNodes, storageType);
-      LOG.warn("Not able to place enough replicas, still in need of "
-               + (totalReplicasExpected - results.size()) + " to reach "
-               + totalReplicasExpected + "\n"
-               + e.getMessage());
+      final String message = "Failed to place enough replicas, still in need of "
+          + (totalReplicasExpected - results.size()) + " to reach "
+          + totalReplicasExpected + ".";
+      if (LOG.isTraceEnabled()) {
+        LOG.trace(message, e);
+      } else {
+        LOG.warn(message + " " + e.getMessage());
+      }
+
-        for (Node node : results) {
-          oldExcludedNodes.add(node);
+        for (DatanodeStorageInfo resultStorage : results) {
+          oldExcludedNodes.add(resultStorage.getDatanodeDescriptor());
-            maxNodesPerRack, results, false);
+            maxNodesPerRack, results, false, storageType);
-   * @return the chosen node
+   * @return the chosen storage
-  protected DatanodeDescriptor chooseLocalNode(Node localMachine,
+  protected DatanodeStorageInfo chooseLocalStorage(Node localMachine,
-                                             List<DatanodeDescriptor> results,
-                                             boolean avoidStaleNodes)
+                                             List<DatanodeStorageInfo> results,
+                                             boolean avoidStaleNodes,
+                                             StorageType storageType)
-          maxNodesPerRack, results, avoidStaleNodes);
+          maxNodesPerRack, results, avoidStaleNodes, storageType);
-        if (addIfIsGoodTarget(localDatanode, excludedNodes, blocksize,
-            maxNodesPerRack, false, results, avoidStaleNodes) >= 0) {
-          return localDatanode;
+        for(DatanodeStorageInfo localStorage : DFSUtil.shuffle(
+            localDatanode.getStorageInfos())) {
+          if (addIfIsGoodTarget(localStorage, excludedNodes, blocksize,
+              maxNodesPerRack, false, results, avoidStaleNodes, storageType) >= 0) {
+            return localStorage;
+          }
-        maxNodesPerRack, results, avoidStaleNodes);
+        maxNodesPerRack, results, avoidStaleNodes, storageType);
-  protected DatanodeDescriptor chooseLocalRack(Node localMachine,
+  protected DatanodeStorageInfo chooseLocalRack(Node localMachine,
-                                             List<DatanodeDescriptor> results,
-                                             boolean avoidStaleNodes)
+                                             List<DatanodeStorageInfo> results,
+                                             boolean avoidStaleNodes,
+                                             StorageType storageType)
-          maxNodesPerRack, results, avoidStaleNodes);
+          maxNodesPerRack, results, avoidStaleNodes, storageType);
-          blocksize, maxNodesPerRack, results, avoidStaleNodes);
+          blocksize, maxNodesPerRack, results, avoidStaleNodes, storageType);
-      for(DatanodeDescriptor nextNode : results) {
+      for(DatanodeStorageInfo resultStorage : results) {
+        DatanodeDescriptor nextNode = resultStorage.getDatanodeDescriptor();
-              blocksize, maxNodesPerRack, results, avoidStaleNodes);
+              blocksize, maxNodesPerRack, results, avoidStaleNodes, storageType);
-              maxNodesPerRack, results, avoidStaleNodes);
+              maxNodesPerRack, results, avoidStaleNodes, storageType);
-            maxNodesPerRack, results, avoidStaleNodes);
+            maxNodesPerRack, results, avoidStaleNodes, storageType);
-                                List<DatanodeDescriptor> results,
-                                boolean avoidStaleNodes)
+                                List<DatanodeStorageInfo> results,
+                                boolean avoidStaleNodes,
+                                StorageType storageType)
-          avoidStaleNodes);
+          avoidStaleNodes, storageType);
-                   maxReplicasPerRack, results, avoidStaleNodes);
+                   maxReplicasPerRack, results, avoidStaleNodes, storageType);
-   * @return the chosen node, if there is any.
+   * @return the chosen storage, if there is any.
-  protected DatanodeDescriptor chooseRandom(String scope,
+  protected DatanodeStorageInfo chooseRandom(String scope,
-      List<DatanodeDescriptor> results,
-      boolean avoidStaleNodes)
+      List<DatanodeStorageInfo> results,
+      boolean avoidStaleNodes,
+      StorageType storageType)
-        results, avoidStaleNodes);
+        results, avoidStaleNodes, storageType);
-  protected DatanodeDescriptor chooseRandom(int numOfReplicas,
+  protected DatanodeStorageInfo chooseRandom(int numOfReplicas,
-                            List<DatanodeDescriptor> results,
-                            boolean avoidStaleNodes)
+                            List<DatanodeStorageInfo> results,
+                            boolean avoidStaleNodes,
+                            StorageType storageType)
-    boolean badTarget = false;
-    DatanodeDescriptor firstChosen = null;
+    boolean goodTarget = false;
+    DatanodeStorageInfo firstChosen = null;
-        int newExcludedNodes = addIfIsGoodTarget(chosenNode, excludedNodes,
-            blocksize, maxNodesPerRack, considerLoad, results, avoidStaleNodes);
-        if (newExcludedNodes >= 0) {
-          numOfReplicas--;
-          if (firstChosen == null) {
-            firstChosen = chosenNode;
+        final DatanodeStorageInfo[] storages = DFSUtil.shuffle(
+            chosenNode.getStorageInfos());
+        for(int i = 0; i < storages.length && !goodTarget; i++) {
+          final int newExcludedNodes = addIfIsGoodTarget(storages[i],
+              excludedNodes, blocksize, maxNodesPerRack, considerLoad, results,
+              avoidStaleNodes, storageType);
+          goodTarget = newExcludedNodes >= 0;
+          if (goodTarget) {
+            numOfReplicas--;
+            if (firstChosen == null) {
+              firstChosen = storages[i];
+            }
+            numOfAvailableNodes -= newExcludedNodes;
-          numOfAvailableNodes -= newExcludedNodes;
-        } else {
-          badTarget = true;
-        if (badTarget && builder != null) {
+        if (!goodTarget && builder != null) {
-   * If the given node is a good target, add it to the result list and
+   * If the given storage is a good target, add it to the result list and
-  int addIfIsGoodTarget(DatanodeDescriptor node,
+  int addIfIsGoodTarget(DatanodeStorageInfo storage,
-      List<DatanodeDescriptor> results,
-      boolean avoidStaleNodes) {
-    if (isGoodTarget(node, blockSize, maxNodesPerRack, considerLoad,
-        results, avoidStaleNodes)) {
-      results.add(node);
+      List<DatanodeStorageInfo> results,                           
+      boolean avoidStaleNodes,
+      StorageType storageType) {
+    if (isGoodTarget(storage, blockSize, maxNodesPerRack, considerLoad,
+        results, avoidStaleNodes, storageType)) {
+      results.add(storage);
-      return addToExcludedNodes(node, excludedNodes);
+      return addToExcludedNodes(storage.getDatanodeDescriptor(), excludedNodes);
-  private static void logNodeIsNotChosen(DatanodeDescriptor node, String reason) {
+  private static void logNodeIsNotChosen(DatanodeStorageInfo storage, String reason) {
+      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
-          .append("Node ").append(NodeBase.getPath(node))
+          .append("Storage ").append(storage)
+          .append("at node ").append(NodeBase.getPath(node))
-   * Determine if a node is a good target. 
+   * Determine if a storage is a good target. 
-   * @param node The target node
+   * @param storage The target storage
-  private boolean isGoodTarget(DatanodeDescriptor node,
+  private boolean isGoodTarget(DatanodeStorageInfo storage,
-                               List<DatanodeDescriptor> results,                           
-                               boolean avoidStaleNodes) {
-    // check if the node is (being) decommissed
+                               List<DatanodeStorageInfo> results,
+                               boolean avoidStaleNodes,
+                               StorageType storageType) {
+    if (storage.getStorageType() != storageType) {
+      logNodeIsNotChosen(storage,
+          "storage types do not match, where the expected storage type is "
+              + storageType);
+      return false;
+    }
+    if (storage.getState() == State.READ_ONLY) {
+      logNodeIsNotChosen(storage, "storage is read-only");
+      return false;
+    }
+    DatanodeDescriptor node = storage.getDatanodeDescriptor();
+    // check if the node is (being) decommissioned
-      logNodeIsNotChosen(node, "the node is (being) decommissioned ");
+      logNodeIsNotChosen(storage, "the node is (being) decommissioned ");
-        logNodeIsNotChosen(node, "the node is stale ");
+        logNodeIsNotChosen(storage, "the node is stale ");
+    final long requiredSize = blockSize * HdfsConstants.MIN_BLOCKS_FOR_WRITE;
+    if (requiredSize > storage.getRemaining()) {
+      logNodeIsNotChosen(storage, "the storage does not have enough space ");
+      return false;
+    }
+    //TODO: move getBlocksScheduled() to DatanodeStorageInfo. 
-    if (blockSize* HdfsConstants.MIN_BLOCKS_FOR_WRITE>remaining) {
-      logNodeIsNotChosen(node, "the node does not have enough space ");
+    if (requiredSize > remaining) {
+      logNodeIsNotChosen(storage, "the node does not have enough space ");
-        logNodeIsNotChosen(node, "the node is too busy ");
+        logNodeIsNotChosen(storage, "the node is too busy ");
-    for(Node result : results) {
-      if (rackname.equals(result.getNetworkLocation())) {
+    for(DatanodeStorageInfo resultStorage : results) {
+      if (rackname.equals(
+          resultStorage.getDatanodeDescriptor().getNetworkLocation())) {
-      logNodeIsNotChosen(node, "the rack has too many chosen nodes ");
+      logNodeIsNotChosen(storage, "the rack has too many chosen nodes ");
-  private DatanodeDescriptor[] getPipeline(Node writer,
-                                           DatanodeDescriptor[] nodes) {
-    if (nodes.length==0) return nodes;
-      
+  private DatanodeStorageInfo[] getPipeline(Node writer,
+      DatanodeStorageInfo[] storages) {
+    if (storages.length == 0) {
+      return storages;
+    }
+
-        writer = nodes[0];
+        writer = storages[0].getDatanodeDescriptor();
-      for(;index<nodes.length; index++) {
-        DatanodeDescriptor shortestNode = nodes[index];
-        int shortestDistance = clusterMap.getDistance(writer, shortestNode);
+      for(; index < storages.length; index++) {
+        DatanodeStorageInfo shortestStorage = storages[index];
+        int shortestDistance = clusterMap.getDistance(writer,
+            shortestStorage.getDatanodeDescriptor());
-        for(int i=index+1; i<nodes.length; i++) {
-          DatanodeDescriptor currentNode = nodes[i];
-          int currentDistance = clusterMap.getDistance(writer, currentNode);
+        for(int i = index + 1; i < storages.length; i++) {
+          int currentDistance = clusterMap.getDistance(writer,
+              storages[i].getDatanodeDescriptor());
-            shortestNode = currentNode;
+            shortestStorage = storages[i];
-          nodes[shortestIndex] = nodes[index];
-          nodes[index] = shortestNode;
+          storages[shortestIndex] = storages[index];
+          storages[index] = shortestStorage;
-        writer = shortestNode;
+        writer = shortestStorage.getDatanodeDescriptor();
-    return nodes;
+    return storages;

INS26 INS26 INS26 INS40 INS40 INS40 MOV44 UPD5 INS44 UPD5 INS44 UPD5 INS44 INS44 UPD43 UPD42 MOV44 INS44 UPD43 INS44 INS44 INS44 UPD43 INS44 UPD43 INS44 MOV44 MOV44 INS44 UPD5 UPD43 UPD74 INS43 INS42 UPD43 INS43 INS42 UPD43 UPD74 UPD42 INS43 INS42 INS39 UPD42 UPD74 INS43 INS42 UPD42 UPD74 INS43 INS42 UPD42 INS74 INS42 INS43 INS42 UPD74 INS43 INS42 UPD42 UPD74 INS43 INS42 UPD42 UPD74 INS43 INS42 UPD43 UPD42 UPD74 INS43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD74 INS43 INS42 INS25 INS25 INS60 INS60 INS25 UPD43 UPD5 UPD42 UPD42 UPD43 INS42 UPD42 INS42 UPD42 UPD43 INS42 INS83 UPD74 UPD42 INS43 INS42 UPD66 UPD43 INS42 MOV27 INS43 INS43 INS42 MOV27 UPD43 INS42 UPD66 UPD43 INS42 MOV43 UPD43 INS42 UPD43 UPD66 UPD42 UPD43 UPD42 MOV42 UPD42 UPD66 UPD42 UPD66 UPD42 UPD43 INS42 INS27 INS8 INS27 INS8 INS43 INS59 INS83 INS39 INS59 INS27 INS8 UPD42 UPD43 INS8 UPD42 UPD42 INS42 UPD42 UPD43 UPD43 UPD42 INS42 INS60 UPD42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS60 UPD42 INS32 INS42 INS21 MOV41 INS32 INS40 INS21 MOV41 INS42 INS42 INS32 INS41 INS42 MOV27 INS42 INS32 INS21 MOV41 INS42 UPD43 UPD42 INS41 UPD42 UPD40 INS41 UPD74 UPD40 INS32 UPD42 UPD74 UPD42 UPD42 INS42 INS42 INS83 MOV43 INS59 INS60 INS25 INS42 INS8 INS8 INS83 INS43 INS59 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS32 UPD42 INS9 UPD42 MOV42 UPD43 UPD42 MOV42 INS42 UPD43 INS32 UPD42 UPD5 INS32 MOV25 INS42 MOV32 MOV25 INS60 MOV25 INS42 INS83 INS43 INS59 INS32 INS8 INS8 INS70 INS42 INS42 INS42 MOV21 INS60 INS24 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS45 UPD42 INS42 INS42 INS45 UPD42 INS41 UPD42 UPD40 UPD42 UPD74 INS83 UPD43 UPD5 INS42 UPD42 INS42 UPD42 MOV42 UPD43 MOV32 INS42 UPD42 INS83 INS43 INS59 INS32 INS8 INS42 INS42 MOV27 INS42 INS42 INS21 MOV21 INS44 INS32 INS8 INS43 UPD42 INS60 INS42 INS83 INS5 INS59 INS58 INS27 INS37 MOV8 INS42 UPD42 MOV42 INS42 INS42 INS45 INS42 INS9 INS32 UPD43 INS42 UPD43 UPD42 INS32 UPD43 UPD5 UPD74 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS42 MOV32 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS21 UPD45 UPD45 INS32 INS43 INS42 INS42 INS42 INS32 MOV25 INS42 MOV43 INS59 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS38 INS42 INS21 INS38 INS32 INS42 UPD42 UPD42 UPD42 MOV42 INS42 INS32 UPD42 UPD42 UPD40 INS32 UPD74 UPD42 UPD42 INS42 MOV42 INS42 UPD42 INS42 UPD43 UPD43 INS32 INS42 UPD42 INS32 INS42 INS42 INS42 INS42 INS27 UPD43 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS40 INS42 INS83 INS7 INS42 INS42 INS32 INS42 INS45 INS2 INS42 UPD42 INS32 INS42 INS42 UPD43 UPD42 UPD42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 INS42 UPD34 MOV34 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS45 MOV32 UPD42 INS42 INS42 INS42 INS42 INS42 MOV27 MOV32 MOV42 INS42 UPD42 MOV42 MOV34 UPD42 MOV42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 UPD42 INS42 INS2 INS42 UPD45 INS32 UPD42 UPD42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS2 UPD42 MOV42 UPD42 INS2 INS42 INS42 INS42 INS42 INS2 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL34 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL32 DEL32 DEL21 DEL8 DEL8 DEL42 DEL42 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL43 DEL74 DEL41 DEL2 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42