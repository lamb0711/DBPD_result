HDDS-212. Introduce NodeStateManager to manage the state of Datanodes in SCM. Contributed by Nanda kumar.

-import java.util.EnumSet;
+import java.util.ArrayList;
-  public HddsProtos.NodePool queryNode(EnumSet<HddsProtos.NodeState>
-      nodeStatuses, HddsProtos.QueryScope queryScope, String poolName) throws
+  public List<HddsProtos.Node> queryNode(HddsProtos.NodeState state,
+      HddsProtos.QueryScope queryScope, String poolName) throws
-    List<DatanodeDetails> datanodes = queryNode(nodeStatuses);
-    HddsProtos.NodePool.Builder poolBuilder = HddsProtos.NodePool.newBuilder();
+    List<HddsProtos.Node> result = new ArrayList<>();
+    queryNode(state).forEach(node -> result.add(HddsProtos.Node.newBuilder()
+        .setNodeID(node.getProtoBufMessage())
+        .addNodeStates(state)
+        .build()));
-    for (DatanodeDetails datanode : datanodes) {
-      HddsProtos.Node node =
-          HddsProtos.Node.newBuilder()
-              .setNodeID(datanode.getProtoBufMessage())
-              .addAllNodeStates(nodeStatuses)
-              .build();
-      poolBuilder.addNodes(node);
-    }
-
-    return poolBuilder.build();
+    return result;
-   * @param nodeStatuses - A set of NodeStates.
+   * @param state - NodeStates.
-  public List<DatanodeDetails> queryNode(EnumSet<HddsProtos.NodeState>
-      nodeStatuses) {
-    Preconditions.checkNotNull(nodeStatuses, "Node Query set cannot be null");
-    Preconditions.checkState(nodeStatuses.size() > 0, "No valid arguments " +
-        "in the query set");
-    List<DatanodeDetails> resultList = new LinkedList<>();
-    Set<DatanodeDetails> currentSet = new TreeSet<>();
-
-    for (HddsProtos.NodeState nodeState : nodeStatuses) {
-      Set<DatanodeDetails> nextSet = queryNodeState(nodeState);
-      if ((nextSet == null) || (nextSet.size() == 0)) {
-        // Right now we only support AND operation. So intersect with
-        // any empty set is null.
-        return resultList;
-      }
-      // First time we have to add all the elements, next time we have to
-      // do an intersection operation on the set.
-      if (currentSet.size() == 0) {
-        currentSet.addAll(nextSet);
-      } else {
-        currentSet.retainAll(nextSet);
-      }
-    }
-
-    resultList.addAll(currentSet);
-    return resultList;
+  public List<DatanodeDetails> queryNode(HddsProtos.NodeState state) {
+    Preconditions.checkNotNull(state, "Node Query set cannot be null");
+    return new LinkedList<>(queryNodeState(state));
-    if (nodeState == HddsProtos.NodeState.RAFT_MEMBER || nodeState ==
-        HddsProtos.NodeState
-        .FREE_NODE) {
-      throw new IllegalStateException("Not implemented yet");
-    }

UPD40 INS74 INS43 INS43 MOV43 UPD42 INS21 MOV43 UPD42 MOV41 INS42 UPD40 MOV40 UPD74 INS32 INS42 UPD42 UPD66 MOV14 MOV43 UPD42 INS14 INS32 INS42 INS86 UPD42 INS32 INS74 INS42 UPD42 MOV42 INS59 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 MOV32 MOV42 UPD42 UPD42 UPD42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL45 DEL45 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL34 DEL27 DEL36 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25