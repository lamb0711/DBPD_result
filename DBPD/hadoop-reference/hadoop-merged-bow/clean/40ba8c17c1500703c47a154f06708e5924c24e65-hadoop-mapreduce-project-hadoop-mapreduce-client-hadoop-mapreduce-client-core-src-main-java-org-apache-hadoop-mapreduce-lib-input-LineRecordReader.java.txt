MAPREDUCE-5777. Support utf-8 text with Byte Order Marker. (Zhihai Xu via kasha)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600977 13f79535-47bb-0310-9956-ffa450edef68

+  private int skipUtfByteOrderMark() throws IOException {
+    // Strip BOM(Byte Order Mark)
+    // Text only support UTF-8, we only need to check UTF-8 BOM
+    // (0xEF,0xBB,0xBF) at the start of the text stream.
+    int newMaxLineLength = (int) Math.min(3L + (long) maxLineLength,
+        Integer.MAX_VALUE);
+    int newSize = in.readLine(value, newMaxLineLength, maxBytesToConsume(pos));
+    // Even we read 3 extra bytes for the first line,
+    // we won't alter existing behavior (no backwards incompat issue).
+    // Because the newSize is less than maxLineLength and
+    // the number of bytes copied to Text is always no more than newSize.
+    // If the return size from readLine is not less than maxLineLength,
+    // we will discard the current line and read the next line.
+    pos += newSize;
+    int textLength = value.getLength();
+    byte[] textBytes = value.getBytes();
+    if ((textLength >= 3) && (textBytes[0] == (byte)0xEF) &&
+        (textBytes[1] == (byte)0xBB) && (textBytes[2] == (byte)0xBF)) {
+      // find UTF-8 BOM, strip it.
+      LOG.info("Found UTF-8 BOM and skipped it");
+      textLength -= 3;
+      newSize -= 3;
+      if (textLength > 0) {
+        // It may work to use the same buffer and not do the copyBytes
+        textBytes = value.copyBytes();
+        value.set(textBytes, 3, textLength);
+      } else {
+        value.clear();
+      }
+    }
+    return newSize;
+  }
+
-      newSize = in.readLine(value, maxLineLength, maxBytesToConsume(pos));
-      pos += newSize;
-      if (newSize < maxLineLength) {
+      if (pos == 0) {
+        newSize = skipUtfByteOrderMark();
+      } else {
+        newSize = in.readLine(value, maxLineLength, maxBytesToConsume(pos));
+        pos += newSize;
+      }
+
+      if ((newSize == 0) || (newSize < maxLineLength)) {

INS31 INS83 INS39 INS42 INS43 INS8 INS42 INS60 INS60 INS21 INS60 INS60 INS25 INS41 INS39 INS59 INS39 INS59 INS7 INS39 INS59 INS5 INS59 INS27 INS8 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS36 INS36 INS36 INS36 INS21 INS21 INS21 INS25 INS25 INS39 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS27 INS27 INS27 INS32 INS7 INS7 INS27 INS8 INS8 INS27 INS8 INS8 INS27 INS42 INS42 INS27 INS40 INS42 INS42 INS42 INS34 INS2 INS11 INS2 INS11 INS2 INS11 INS42 INS42 INS45 INS42 INS34 INS42 INS34 INS42 INS34 INS21 INS21 INS21 INS42 INS34 INS21 MOV21 MOV21 INS36 INS36 INS34 INS11 INS42 INS34 INS39 INS34 INS42 INS34 INS39 INS34 INS42 INS34 INS39 INS34 INS7 INS32 INS32 INS7 INS27 MOV27 INS39 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS42