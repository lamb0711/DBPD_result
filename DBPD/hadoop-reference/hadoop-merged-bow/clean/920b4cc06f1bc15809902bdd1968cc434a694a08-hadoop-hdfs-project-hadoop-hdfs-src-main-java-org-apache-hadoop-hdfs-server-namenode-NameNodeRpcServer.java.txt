HDFS-5052. Add cacheRequest/uncacheRequest support to NameNode.  (Contributed by Colin Patrick McCabe.)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1516669 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.NoSuchElementException;
+import org.apache.hadoop.fs.RemoteIterator;
+import org.apache.hadoop.hdfs.protocol.PathCacheDirective;
+import org.apache.hadoop.hdfs.protocol.PathCacheEntry;
+import org.apache.hadoop.util.Fallible;
+
+  @Override
+  public List<Fallible<PathCacheEntry>> addPathCacheDirectives(
+      List<PathCacheDirective> paths) throws IOException {
+    return namesystem.addPathCacheDirectives(paths);
+  }
+
+  @Override
+  public List<Fallible<Long>> removePathCacheEntries(List<Long> ids)
+      throws IOException {
+    return namesystem.removePathCacheEntries(ids);
+  }
+
+  private class PathCacheEntriesIterator
+      implements RemoteIterator<PathCacheEntry> {
+    private long prevId;
+    private final String pool;
+    private final int repliesPerRequest;
+    private List<PathCacheEntry> entries;
+    private int idx;
+
+    public PathCacheEntriesIterator(long prevId, String pool,
+        int repliesPerRequest) {
+      this.prevId = prevId;
+      this.pool = pool;
+      this.repliesPerRequest = repliesPerRequest;
+      this.entries = null;
+      this.idx = -1;
+    }
+
+    private void makeRequest() throws IOException {
+      idx = 0;
+      entries = null;
+      entries = namesystem.listPathCacheEntries(prevId, pool,
+          repliesPerRequest);
+      if (entries.isEmpty()) {
+        entries = null;
+      }
+    }
+
+    private void makeRequestIfNeeded() throws IOException {
+      if (idx == -1) {
+        makeRequest();
+      } else if ((entries != null) && (idx >= entries.size())) {
+        if (entries.size() < repliesPerRequest) {
+          // Last time, we got fewer entries than requested.
+          // So we should be at the end.
+          entries = null;
+        } else {
+          makeRequest();
+        }
+      }
+    }
+
+    @Override
+    public boolean hasNext() throws IOException {
+      makeRequestIfNeeded();
+      return (entries != null);
+    }
+
+    @Override
+    public PathCacheEntry next() throws IOException {
+      makeRequestIfNeeded();
+      if (entries == null) {
+        throw new NoSuchElementException();
+      }
+      PathCacheEntry entry = entries.get(idx++);
+      prevId = entry.getEntryId();
+      return entry;
+    }
+  }
+  
+  @Override
+  public RemoteIterator<PathCacheEntry> listPathCacheEntries(long prevId, String pool,
+      int maxReplies) throws IOException {
+    return new PathCacheEntriesIterator(prevId, pool, maxReplies);
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS55 INS31 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS83 INS42 INS74 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS74 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS43 INS74 INS74 INS42 INS42 INS41 INS42 INS43 INS74 INS74 INS42 INS42 INS41 INS43 INS43 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS43 INS43 INS39 INS42 INS43 INS42 INS39 INS42 INS42 INS41 INS42 INS43 INS43 INS43 INS43 INS32 INS42 INS43 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS21 INS21 INS21 INS25 INS42 INS25 INS42 INS42 INS21 INS41 INS42 INS42 INS42 INS21 INS25 INS60 INS21 INS41 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS32 INS8 INS27 INS8 INS25 INS32 INS36 INS32 INS27 INS8 INS43 INS59 INS7 INS42 INS43 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS33 INS22 INS38 INS42 INS34 INS42 INS33 INS42 INS32 INS42 INS42 INS21 INS42 INS38 INS21 INS27 INS8 INS42 INS27 INS42 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS7 INS34 INS32 INS36 INS36 INS25 INS42 INS33 INS14 INS42 INS42 INS37 INS42 INS42 INS42 INS33 INS42 INS27 INS27 INS27 INS8 INS8 INS43 INS42 INS42 INS33 INS42 INS32 INS32 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS33 INS42