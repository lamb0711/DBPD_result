HDDS-88. Create separate message structure to represent ports in DatanodeDetails.
Contributed by Nanda Kumar.

+import java.util.ArrayList;
+import java.util.List;
-  private Integer containerPort;
-  private Integer ratisPort;
-  private Integer ozoneRestPort;
+  private List<Port> ports;
-   * @param containerPort Container Port
-   * @param ratisPort Ratis Port
-   * @param ozoneRestPort Rest Port
+   * @param ports Ports used by the DataNode
-      Integer containerPort, Integer ratisPort, Integer ozoneRestPort) {
+      List<Port> ports) {
-    this.containerPort = containerPort;
-    this.ratisPort = ratisPort;
-    this.ozoneRestPort = ozoneRestPort;
+    this.ports = ports;
-   * Sets the Container Port.
-   * @param port ContainerPort
-   */
-  public void setContainerPort(int port) {
-    containerPort = port;
-  }
-
-  /**
-   * Returns standalone container Port.
+   * Sets a DataNode Port.
-   * @return Container Port
+   * @param port DataNode port
-  public int getContainerPort() {
-    return containerPort;
+  public void setPort(Port port) {
+    // If the port is already in the list remove it first and add the
+    // new/updated port value.
+    ports.remove(port);
+    ports.add(port);
-   * Sets Ratis Port.
-   * @param port RatisPort
+   * Returns all the Ports used by DataNode.
+   *
+   * @return DataNode Ports
-  public void setRatisPort(int port) {
-    ratisPort = port;
-  }
-
-
-  /**
-   * Returns Ratis Port.
-   * @return Ratis Port
-   */
-  public int getRatisPort() {
-    return ratisPort;
-  }
-
-
-  /**
-   * Sets OzoneRestPort.
-   * @param port OzoneRestPort
-   */
-  public void setOzoneRestPort(int port) {
-    ozoneRestPort = port;
+  public List<Port> getPorts() {
+    return ports;
-   * Returns Ozone Rest Port.
-   * @return OzoneRestPort
+   * Given the name returns port number, null if the asked port is not found.
+   *
+   * @param name Name of the port
+   *
+   * @return Port
-  public int getOzoneRestPort() {
-    return ozoneRestPort;
+  public Port getPort(Port.Name name) {
+    for (Port port : ports) {
+      if (port.getName().equals(name)) {
+        return port;
+      }
+    }
+    return null;
-    if (datanodeDetailsProto.hasContainerPort()) {
-      builder.setContainerPort(datanodeDetailsProto.getContainerPort());
-    }
-    if (datanodeDetailsProto.hasRatisPort()) {
-      builder.setRatisPort(datanodeDetailsProto.getRatisPort());
-    }
-    if (datanodeDetailsProto.hasOzoneRestPort()) {
-      builder.setOzoneRestPort(datanodeDetailsProto.getOzoneRestPort());
+    for (HddsProtos.Port port : datanodeDetailsProto.getPortsList()) {
+      builder.addPort(newPort(
+          Port.Name.valueOf(port.getName().toUpperCase()), port.getValue()));
-    if (containerPort != null) {
-      builder.setContainerPort(containerPort);
-    }
-    if (ratisPort != null) {
-      builder.setRatisPort(ratisPort);
-    }
-    if (ozoneRestPort != null) {
-      builder.setOzoneRestPort(ozoneRestPort);
+    for (Port port : ports) {
+      builder.addPorts(HddsProtos.Port.newBuilder()
+          .setName(port.getName().toString())
+          .setValue(port.getValue())
+          .build());
-    private Integer containerPort;
-    private Integer ratisPort;
-    private Integer ozoneRestPort;
+    private List<Port> ports;
+
+    /**
+     * Default private constructor. To create Builder instance use
+     * DatanodeDetails#newBuilder.
+     */
+    private Builder() {
+      ports = new ArrayList<>();
+    }
-    /**
-     * Sets the ContainerPort.
-     *
-     * @param port ContainerPort
-     * @return DatanodeDetails.Builder
-     */
-    public Builder setContainerPort(Integer port) {
-      this.containerPort = port;
-      return this;
-    }
-     * Sets the RatisPort.
+     * Adds a DataNode Port.
-     * @param port RatisPort
+     * @param port DataNode port
+     *
-    public Builder setRatisPort(Integer port) {
-      this.ratisPort = port;
-      return this;
-    }
-
-    /**
-     * Sets the OzoneRestPort.
-     *
-     * @param port OzoneRestPort
-     * @return DatanodeDetails.Builder
-     */
-    public Builder setOzoneRestPort(Integer port) {
-      this.ozoneRestPort = port;
+    public Builder addPort(Port port) {
+      this.ports.add(port);
-      return new DatanodeDetails(id, ipAddress, hostName, containerPort,
-          ratisPort, ozoneRestPort);
+      return new DatanodeDetails(id, ipAddress, hostName, ports);
+  /**
+   * Constructs a new Port with name and value.
+   *
+   * @param name Name of the port
+   * @param value Port number
+   *
+   * @return {@code Port} instance
+   */
+  public static Port newPort(Port.Name name, Integer value) {
+    return new Port(name, value);
+  }
+
+  /**
+   * Container to hold DataNode Port details.
+   */
+  public static class Port {
+
+    /**
+     * Ports that are supported in DataNode.
+     */
+    public enum Name {
+      STANDALONE, RATIS, REST
+    }
+
+    private Name name;
+    private Integer value;
+
+    /**
+     * Private constructor for constructing Port object. Use
+     * DatanodeDetails#newPort to create a new Port object.
+     *
+     * @param name
+     * @param value
+     */
+    private Port(Name name, Integer value) {
+      this.name = name;
+      this.value = value;
+    }
+
+    /**
+     * Returns the name of the port.
+     *
+     * @return Port name
+     */
+    public Name getName() {
+      return name;
+    }
+
+    /**
+     * Returns the port number.
+     *
+     * @return Port number
+     */
+    public Integer getValue() {
+      return value;
+    }
+
+    @Override
+    public int hashCode() {
+      return name.hashCode();
+    }
+
+    /**
+     * Ports are considered equal if they have the same name.
+     *
+     * @param anObject
+     *          The object to compare this {@code Port} against
+     * @return {@code true} if the given object represents a {@code Port}
+               and has the same name, {@code false} otherwise
+     */
+    @Override
+    public boolean equals(Object anObject) {
+      if (this == anObject) {
+        return true;
+      }
+      if (anObject instanceof Port) {
+        return name.equals(((Port) anObject).name);
+      }
+      return false;
+    }
+  }
+

INS26 INS26 MOV31 INS40 INS40 INS23 MOV31 INS55 MOV83 INS74 MOV59 INS44 UPD42 INS74 UPD42 INS43 INS42 INS44 INS8 INS23 INS83 INS43 INS42 INS44 MOV44 INS29 INS83 INS83 INS42 INS71 INS23 INS23 MOV31 INS31 INS31 INS31 INS31 INS43 INS43 UPD42 INS74 UPD42 MOV42 INS43 INS21 INS43 INS43 INS65 INS42 INS43 INS42 INS70 INS41 INS70 INS70 MOV83 INS74 INS59 UPD83 INS42 MOV43 INS42 INS44 INS65 INS65 UPD65 INS42 INS43 INS42 UPD42 INS65 INS29 INS83 INS42 INS72 INS72 INS72 INS83 INS43 INS59 INS83 MOV43 INS59 UPD83 UPD42 MOV44 MOV29 MOV83 INS43 INS42 INS8 INS29 INS83 MOV43 INS42 INS8 INS78 INS83 MOV39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 UPD66 INS43 INS43 UPD66 UPD66 INS42 INS32 INS32 UPD66 UPD66 INS42 INS42 UPD42 UPD66 UPD42 UPD66 INS66 INS40 INS44 INS42 INS8 INS33 INS44 INS32 INS8 INS44 INS42 INS8 INS43 INS43 INS42 INS65 MOV65 INS43 INS42 MOV41 INS66 INS42 INS66 INS42 UPD66 INS66 INS65 INS66 INS40 INS14 INS66 INS65 INS42 INS42 INS42 INS42 INS42 INS42 INS65 INS43 INS42 UPD42 INS21 INS42 INS41 INS65 INS65 INS41 INS42 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS25 INS41 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 MOV42 INS25 INS43 INS42 MOV42 UPD42 MOV42 INS21 INS43 INS42 INS21 UPD42 MOV42 UPD42 MOV42 UPD66 MOV66 UPD66 MOV66 UPD66 UPD66 UPD42 MOV42 INS32 UPD66 MOV66 INS43 INS42 INS42 INS66 INS66 UPD66 UPD42 INS42 INS42 INS7 UPD66 UPD66 INS42 INS66 INS66 INS42 INS32 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS42 INS27 INS8 INS62 INS8 INS9 UPD42 INS42 INS32 INS8 INS40 INS32 INS42 INS32 INS42 INS14 INS22 INS42 INS42 UPD42 INS42 INS22 UPD42 INS22 INS42 INS42 INS42 INS66 INS66 INS66 INS66 INS52 INS42 INS41 INS42 INS43 MOV41 INS32 INS42 INS42 INS41 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS32 INS74 MOV52 UPD42 MOV42 INS52 INS42 INS52 INS42 INS9 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS32 MOV32 INS32 INS42 INS43 INS42 INS42 INS22 INS40 UPD42 MOV42 INS32 UPD42 UPD42 INS32 INS42 INS32 INS42 INS36 INS42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS11 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS32 INS42 INS43 INS42 UPD42 MOV42 INS42 INS42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL43 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL43 DEL42 DEL44 DEL43 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL39 DEL42 DEL42 DEL7 DEL39 DEL39 DEL42 DEL39 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL65 DEL42 DEL66 DEL65 DEL65 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL41 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL43 DEL42 DEL22 DEL42 DEL7 DEL52 DEL41 DEL42 DEL42 DEL39 DEL42 DEL42 DEL66 DEL39 DEL39 DEL42 DEL42 DEL42