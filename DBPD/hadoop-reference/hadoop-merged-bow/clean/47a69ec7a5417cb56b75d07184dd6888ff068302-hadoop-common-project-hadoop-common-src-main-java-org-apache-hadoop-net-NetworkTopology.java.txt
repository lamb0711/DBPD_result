HADOOP-12185. NetworkTopology is not efficient adding/getting/removing nodes. Contributed by Inigo Goiri

+import java.util.HashMap;
+import java.util.Map;
+    private Map<String, Node> childrenMap = new HashMap<String, Node>();
-        for(int i=0; i<children.size(); i++) {
-          if (children.get(i).getName().equals(n.getName())) {
-            children.set(i, n);
-            return false;
+        Node prev = childrenMap.put(n.getName(), n);
+        if (prev != null) {
+          for(int i=0; i<children.size(); i++) {
+            if (children.get(i).getName().equals(n.getName())) {
+              children.set(i, n);
+              return false;
+            }
-        InnerNode parentNode = null;
-        for(int i=0; i<children.size(); i++) {
-          if (children.get(i).getName().equals(parentName)) {
-            parentNode = (InnerNode)children.get(i);
-            break;
-          }
-        }
+        InnerNode parentNode = (InnerNode)childrenMap.get(parentName);
+          childrenMap.put(parentNode.getName(), parentNode);
-        for(int i=0; i<children.size(); i++) {
-          if (children.get(i).getName().equals(n.getName())) {
-            children.remove(i);
-            numOfLeaves--;
-            n.setParent(null);
-            return true;
+        if (childrenMap.containsKey(n.getName())) {
+          for (int i=0; i<children.size(); i++) {
+            if (children.get(i).getName().equals(n.getName())) {
+              children.remove(i);
+              childrenMap.remove(n.getName());
+              numOfLeaves--;
+              n.setParent(null);
+              return true;
+            }
-            children.remove(i);
+            Node prev = children.remove(i);
+            childrenMap.remove(prev.getName());
-      Node childnode = null;
-      for(int i=0; i<children.size(); i++) {
-        if (children.get(i).getName().equals(path[0])) {
-          childnode = children.get(i);
-        }
-      }
+      Node childnode = childrenMap.get(path[0]);
-          int excludedIndex = children.indexOf(excludedNode);
-          if (excludedIndex != -1 && leafIndex >= 0) {
-            // excluded node is one of the children so adjust the leaf index
-            leafIndex = leafIndex>=excludedIndex ? leafIndex+1 : leafIndex;
+          if (excludedNode != null &&
+              childrenMap.containsKey(excludedNode.getName())) {
+            int excludedIndex = children.indexOf(excludedNode);
+            if (excludedIndex != -1 && leafIndex >= 0) {
+              // excluded node is one of the children so adjust the leaf index
+              leafIndex = leafIndex>=excludedIndex ? leafIndex+1 : leafIndex;
+            }

INS26 INS26 INS40 INS40 INS23 INS83 INS74 INS59 INS43 INS43 INS43 INS42 INS14 INS60 INS42 INS42 INS42 INS74 INS8 MOV43 INS59 INS43 INS43 INS43 INS60 INS25 INS60 INS25 MOV41 MOV42 INS32 INS25 INS42 INS42 INS42 INS43 INS59 INS27 INS8 MOV43 INS59 INS32 MOV8 UPD42 MOV42 MOV42 MOV2 INS42 INS8 INS42 INS42 INS32 INS42 INS33 MOV24 INS42 INS11 INS21 INS42 INS42 INS32 MOV25 INS42 INS42 INS32 INS42 INS43 INS32 INS32 INS42 INS42 INS27 INS42 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS32 INS42 INS60 INS21 INS27 INS32 INS42 INS42 INS43 INS59 INS32 INS42 INS33 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL32 DEL21 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42