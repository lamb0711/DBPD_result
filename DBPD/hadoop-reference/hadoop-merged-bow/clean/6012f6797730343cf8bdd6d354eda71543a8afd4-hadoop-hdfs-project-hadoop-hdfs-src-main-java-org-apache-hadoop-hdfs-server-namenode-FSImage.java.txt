svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802 for merging HDFS Snapshot feature branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480838 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.util.Time.now;
+
-
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.hdfs.HAUtil;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.NamenodeRole;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption;
-import static org.apache.hadoop.util.Time.now;
-
-import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.NamenodeRole;
-import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption;
-
-import org.apache.hadoop.hdfs.DFSConfigKeys;
-import org.apache.hadoop.hdfs.DFSUtil;
-import org.apache.hadoop.hdfs.HAUtil;
-      target.dir.updateCountForINodeWithQuota();   
+      updateCountForQuota(target.dir.rootDir);   
+  /**
+   * Update the count of each directory with quota in the namespace.
+   * A directory's count is defined as the total number inodes in the tree
+   * rooted at the directory.
+   * 
+   * This is an update of existing state of the filesystem and does not
+   * throw QuotaExceededException.
+   */
+  static void updateCountForQuota(INodeDirectoryWithQuota root) {
+    updateCountForQuotaRecursively(root, Quota.Counts.newInstance());
+  }
+  
+  private static void updateCountForQuotaRecursively(INodeDirectory dir,
+      Quota.Counts counts) {
+    final long parentNamespace = counts.get(Quota.NAMESPACE);
+    final long parentDiskspace = counts.get(Quota.DISKSPACE);
+
+    dir.computeQuotaUsage4CurrentDirectory(counts);
+    
+    for (INode child : dir.getChildrenList(null)) {
+      if (child.isDirectory()) {
+        updateCountForQuotaRecursively(child.asDirectory(), counts);
+      } else {
+        // file or symlink: count here to reduce recursive calls.
+        child.computeQuotaUsage(counts, false);
+      }
+    }
+      
+    if (dir.isQuotaSet()) {
+      // check if quota is violated. It indicates a software bug.
+      final long namespace = counts.get(Quota.NAMESPACE) - parentNamespace;
+      if (Quota.isViolated(dir.getNsQuota(), namespace)) {
+        LOG.error("BUG: Namespace quota violation in image for "
+            + dir.getFullPathName()
+            + " quota = " + dir.getNsQuota() + " < consumed = " + namespace);
+      }
+
+      final long diskspace = counts.get(Quota.DISKSPACE) - parentDiskspace;
+      if (Quota.isViolated(dir.getDsQuota(), diskspace)) {
+        LOG.error("BUG: Diskspace quota violation in image for "
+            + dir.getFullPathName()
+            + " quota = " + dir.getDsQuota() + " < consumed = " + diskspace);
+      }
+
+      ((INodeDirectoryWithQuota)dir).setSpaceConsumed(namespace, diskspace);
+    }
+  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS60 INS60 INS21 INS70 INS25 INS66 INS66 INS66 INS66 INS66 INS42 INS32 INS42 INS40 INS83 INS39 INS59 INS83 INS39 INS59 INS32 INS44 INS32 INS8 INS32 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS33 INS25 INS42 INS42 INS60 INS25 INS60 INS25 INS21 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS8 INS8 INS83 INS39 INS59 INS32 INS8 INS83 INS39 INS59 INS32 INS8 INS32 INS42 UPD40 INS42 INS42 INS21 INS21 INS42 INS27 INS42 INS42 INS32 INS42 INS21 INS42 INS27 INS42 INS42 INS32 INS42 INS21 INS36 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42