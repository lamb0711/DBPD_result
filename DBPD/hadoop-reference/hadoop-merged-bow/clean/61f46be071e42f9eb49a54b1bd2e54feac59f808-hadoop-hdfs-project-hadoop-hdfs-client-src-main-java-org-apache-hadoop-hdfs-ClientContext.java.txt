HDFS-10208. Addendum for HDFS-9579: to handle the case when client machine can't resolve network path (Ming Ma via sjlee)

+import static org.apache.hadoop.fs.CommonConfigurationKeys.FS_CLIENT_TOPOLOGY_RESOLUTION_ENABLED;
+import static org.apache.hadoop.fs.CommonConfigurationKeys.FS_CLIENT_TOPOLOGY_RESOLUTION_ENABLED_DEFAULT;
+
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-  private final NetworkTopology topology;
-  private final NodeBase clientNode;
-  private final Map<NodeBase, Integer> nodeToDistance;
+  private NodeBase clientNode;
+  private boolean topologyResolutionEnabled;
+    initTopologyResolution(config);
+  }
+  private void initTopologyResolution(Configuration config) {
+    topologyResolutionEnabled = config.getBoolean(
+        FS_CLIENT_TOPOLOGY_RESOLUTION_ENABLED,
+        FS_CLIENT_TOPOLOGY_RESOLUTION_ENABLED_DEFAULT);
+    if (!topologyResolutionEnabled) {
+      return;
+    }
-    List<String> nodes = new ArrayList<>();
+    List<String> nodes = new ArrayList<>();
-    clientNode = new NodeBase(clientHostName,
-        dnsToSwitchMapping.resolve(nodes).get(0));
-    this.topology = NetworkTopology.getInstance(config);
-    this.topology.add(clientNode);
-    this.nodeToDistance = new ConcurrentHashMap<>();
+    List<String> resolvedHosts = dnsToSwitchMapping.resolve(nodes);
+    if (resolvedHosts != null && !resolvedHosts.isEmpty() &&
+        !resolvedHosts.get(0).equals(NetworkTopology.DEFAULT_RACK)) {
+      // The client machine is able to resolve its own network location.
+      this.clientNode = new NodeBase(clientHostName, resolvedHosts.get(0));
+    }
+    // If applications disable the feature or the client machine can't
+    // resolve its network location, clientNode will be set to null.
+    if (clientNode == null) {
+      return DFSUtilClient.isLocalAddress(NetUtils.
+          createSocketAddr(datanodeInfo.getXferAddr())) ? 0 :
+          Integer.MAX_VALUE;
+    }
-    Integer distance = nodeToDistance.get(node);
-    if (distance == null) {
-      topology.add(node);
-      distance = topology.getDistance(clientNode, node);
-      nodeToDistance.put(node, distance);
-    }
-    return distance;
+    return NetworkTopology.getDistanceByPath(clientNode, node);

MOV26 MOV26 MOV23 UPD40 UPD40 INS31 INS31 INS39 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 MOV44 INS8 UPD42 INS43 INS42 INS21 INS25 MOV60 MOV60 MOV60 MOV21 INS60 INS25 INS25 MOV60 MOV41 INS32 UPD42 MOV42 INS7 INS38 INS8 INS74 INS59 INS27 INS8 INS27 INS8 INS32 UPD42 MOV42 MOV42 INS42 INS32 INS42 INS41 INS43 INS43 INS42 MOV32 INS27 INS38 MOV21 INS42 INS33 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS38 INS32 INS16 UPD42 MOV42 MOV33 INS32 INS32 UPD42 MOV42 INS40 INS22 INS14 INS32 INS34 INS40 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS34 INS52 INS42 MOV43 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS34 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 DEL83 DEL83 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL34 DEL32 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL27 DEL32 DEL21 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31