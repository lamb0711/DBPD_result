YARN-752. In AMRMClient, automatically add corresponding rack requests for requested nodes. (sandyr via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493599 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashSet;
+import org.apache.hadoop.yarn.util.RackResolver;
+
+import com.google.common.base.Joiner;
-  //Key->ResourceName (e.g., hostname, rackname, *)
+  //Key->ResourceName (e.g., nodename, rackname, *)
+    RackResolver.init(conf);
-    // Create resource requests
-    // add check for dup locations
-    if (req.hosts != null) {
-      for (String host : req.hosts) {
-        addResourceRequest(req.priority, host, req.capability,
+    Set<String> allRacks = new HashSet<String>();
+    if (req.racks != null) {
+      allRacks.addAll(req.racks);
+      if(req.racks.size() != allRacks.size()) {
+        Joiner joiner = Joiner.on(',');
+        LOG.warn("ContainerRequest has duplicate racks: "
+            + joiner.join(req.racks));
+      }
+    }
+    allRacks.addAll(resolveRacks(req.nodes));
+    
+    if (req.nodes != null) {
+      HashSet<String> dedupedNodes = new HashSet<String>(req.nodes);
+      if(dedupedNodes.size() != req.nodes.size()) {
+        Joiner joiner = Joiner.on(',');
+        LOG.warn("ContainerRequest has duplicate nodes: "
+            + joiner.join(req.nodes));        
+      }
+      for (String node : dedupedNodes) {
+        // Ensure node requests are accompanied by requests for
+        // corresponding rack
+        addResourceRequest(req.priority, node, req.capability,
-    if (req.racks != null) {
-      for (String rack : req.racks) {
-        addResourceRequest(req.priority, rack, req.capability,
-            req.containerCount, req);
-      }
+    for (String rack : allRacks) {
+      addResourceRequest(req.priority, rack, req.capability,
+          req.containerCount, req);
+    Set<String> allRacks = new HashSet<String>();
+    if (req.racks != null) {
+      allRacks.addAll(req.racks);
+    }
+    allRacks.addAll(resolveRacks(req.nodes));
+
-    if (req.hosts != null) {
-      for (String hostName : req.hosts) {
-        decResourceRequest(req.priority, hostName, req.capability,
+    if (req.nodes != null) {
+      for (String node : new HashSet<String>(req.nodes)) {
+        decResourceRequest(req.priority, node, req.capability,
-    if (req.racks != null) {
-      for (String rack : req.racks) {
-        decResourceRequest(req.priority, rack, req.capability,
-            req.containerCount, req);
-      }
+    for (String rack : allRacks) {
+      decResourceRequest(req.priority, rack, req.capability,
+          req.containerCount, req);
+  private Set<String> resolveRacks(List<String> nodes) {
+    Set<String> racks = new HashSet<String>();    
+    if (nodes != null) {
+      for (String node : nodes) {
+        // Ensure node requests are accompanied by requests for
+        // corresponding rack
+        String rack = RackResolver.resolve(node).getNetworkLocation();
+        if (rack == null) {
+          LOG.warn("Failed to resolve rack for node " + node + ".");
+        } else {
+          racks.add(rack);
+        }
+      }
+    }
+    
+    return racks;
+  }
+  

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 MOV78 MOV83 MOV83 MOV39 MOV42 MOV44 INS8 INS83 INS74 INS42 INS44 INS8 INS21 INS60 INS25 INS21 MOV70 INS60 INS25 INS21 MOV25 MOV70 MOV21 INS43 INS43 INS74 INS42 INS60 INS25 INS41 INS32 INS74 INS59 MOV27 INS8 INS32 INS42 INS74 INS59 MOV27 INS8 INS32 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS21 INS25 INS42 INS42 INS32 UPD40 INS60 INS25 INS70 INS43 INS43 INS42 INS14 INS21 INS42 INS42 INS32 UPD40 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS33 INS70 INS42 INS42 INS74 INS32 INS27 INS8 INS42 INS40 INS74 INS59 INS27 INS8 MOV44 INS42 MOV8 INS42 INS42 INS74 INS32 INS42 INS40 MOV44 INS14 INS42 INS42 INS74 INS44 INS42 INS8 INS43 INS43 INS42 INS42 INS40 INS32 INS32 INS60 INS21 INS43 INS43 INS42 INS14 INS32 INS32 INS60 INS21 UPD42 INS43 INS43 INS42 INS42 INS40 UPD42 INS74 INS40 INS43 INS43 INS43 INS42 INS60 MOV25 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS74 INS40 INS42 INS42 INS40 INS42 INS43 INS59 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS27 UPD42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS13 INS45 INS32 INS42 INS42 INS42 INS42 INS13 INS45 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS45 DEL40 DEL70 DEL40 DEL8 DEL25 DEL40 DEL40 DEL8 DEL31