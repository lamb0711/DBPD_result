Fix potential FSImage corruption. Contributed by Daryn Sharp.

- * For each XAttr:<br>
- *   The first 4 bytes represents XAttr namespace and name<br>
- *     [0:3)  - XAttr namespace<br>
- *     [3:8) - Reserved<br>
- *     [8:32) - The name of the entry, which is an ID that points to a
- *              string in map<br>
- *   The following two bytes represents the length of XAttr value<br>
- *   The remaining bytes is the XAttr value<br>
+ *
+ * Note:  this format is used both in-memory and on-disk.  Changes will be
+ * incompatible.
+ *
-class XAttrFormat {
-  private enum XAttrStatusFormat {
-    NAMESPACE(null, 3),
-    RESERVED(NAMESPACE.BITS, 5),
-    NAME(RESERVED.BITS, 24);
+public enum XAttrFormat implements LongBitFormat.Enum {
+  RESERVED(null, 5),
+  NS_EXT(RESERVED.BITS, 1),
+  NAME(NS_EXT.BITS, 24),
+  NS(NAME.BITS, 2);
-    private final LongBitFormat BITS;
-
-    XAttrStatusFormat(LongBitFormat previous, int length) {
-      BITS = new LongBitFormat(name(), previous, length, 0);
-    }
-
-    static XAttr.NameSpace getNamespace(int xattrStatus) {
-      int ordinal = (int) NAMESPACE.BITS.retrieve(xattrStatus);
-      return XAttr.NameSpace.values()[ordinal];
-    }
-
-    static String getName(int xattrStatus) {
-      int id = (int) NAME.BITS.retrieve(xattrStatus);
-      return XAttrStorage.getName(id);
-    }
-
-    static int toInt(XAttr.NameSpace namespace, String name) {
-      long xattrStatusInt = 0;
-
-      xattrStatusInt = NAMESPACE.BITS
-          .combine(namespace.ordinal(), xattrStatusInt);
-      int nid = XAttrStorage.getNameSerialNumber(name);
-      xattrStatusInt = NAME.BITS
-          .combine(nid, xattrStatusInt);
-
-      return (int) xattrStatusInt;
-    }
-  }
+  private static final int NS_EXT_SHIFT = NS.BITS.getLength();
+  private static final int NS_MASK = (1 << NS_EXT_SHIFT) - 1;
+  private static final XAttr.NameSpace[] XATTR_NAMESPACE_VALUES =
+      XAttr.NameSpace.values();
+
+  private final LongBitFormat BITS;
+
+  XAttrFormat(LongBitFormat previous, int length) {
+    BITS = new LongBitFormat(name(), previous, length, 0);
+  }
+
+  @Override
+  public int getLength() {
+    return BITS.getLength();
+  }
+
+  static XAttr.NameSpace getNamespace(int record) {
+    long nid = NS.BITS.retrieve(record);
+    nid |= NS_EXT.BITS.retrieve(record) << NS_EXT_SHIFT;
+    return XATTR_NAMESPACE_VALUES[(int) nid];
+  }
+
+  public static String getName(int record) {
+    int nid = (int)NAME.BITS.retrieve(record);
+    return SerialNumberManager.XATTR.getString(nid);
+  }
+
+  static int toInt(XAttr a) {
+    int nid = SerialNumberManager.XATTR.getSerialNumber(a.getName());
+    int nsOrd = a.getNameSpace().ordinal();
+    long value = NS.BITS.combine(nsOrd & NS_MASK, 0L);
+    value = NS_EXT.BITS.combine(nsOrd >>> NS_EXT_SHIFT, value);
+    value = NAME.BITS.combine(nid, value);
+    return (int)value;
+  }
+
+  static XAttr toXAttr(int record, byte[] value,
+                       SerialNumberManager.StringTable stringTable) {
+    int nid = (int)NAME.BITS.retrieve(record);
+    String name = SerialNumberManager.XATTR.getString(nid, stringTable);
+    return new XAttr.Builder()
+        .setNameSpace(getNamespace(record))
+        .setName(name)
+        .setValue(value)
+        .build();
+  }
-      builder.setNameSpace(XAttrStatusFormat.getNamespace(v));
-      builder.setName(XAttrStatusFormat.getName(v));
+      builder.setNameSpace(XAttrFormat.getNamespace(v));
+      builder.setName(XAttrFormat.getName(v));
-      XAttr.NameSpace namespace = XAttrStatusFormat.getNamespace(v);
-      String name = XAttrStatusFormat.getName(v);
+      XAttr.NameSpace namespace = XAttrFormat.getNamespace(v);
+      String name = XAttrFormat.getName(v);
-        int v = XAttrStatusFormat.toInt(a.getNameSpace(), a.getName());
+        // big-endian
+        int v = XAttrFormat.toInt(a);

INS71 INS29 UPD83 MOV83 UPD42 MOV42 INS43 MOV72 MOV72 MOV72 INS72 INS23 INS23 MOV23 INS23 MOV23 MOV31 INS31 MOV31 MOV31 INS31 INS31 MOV31 MOV31 MOV31 MOV65 INS40 UPD42 UPD34 UPD42 UPD40 UPD34 UPD40 INS42 INS40 INS34 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS5 INS59 UPD42 INS78 INS83 INS39 INS42 INS8 INS83 MOV83 MOV39 MOV42 MOV44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 UPD66 UPD66 INS42 INS32 INS42 INS27 MOV43 INS85 INS42 MOV32 INS42 INS41 UPD42 INS21 UPD42 INS43 INS42 INS60 MOV60 MOV60 MOV21 INS21 INS41 INS42 INS39 INS42 INS5 INS42 INS43 INS42 MOV60 INS60 MOV41 INS40 INS42 INS36 INS34 INS32 UPD39 INS7 INS42 INS39 INS59 INS7 INS11 INS39 INS85 INS40 MOV43 INS59 INS32 INS27 INS42 INS42 UPD42 INS32 INS42 INS27 UPD42 INS11 UPD42 INS40 UPD42 UPD42 INS42 INS32 UPD42 MOV42 UPD42 INS32 UPD42 INS42 INS32 INS39 INS42 INS11 INS42 INS32 INS32 INS42 INS34 INS42 UPD40 MOV40 MOV42 UPD42 MOV42 INS32 INS42 INS39 INS42 INS40 INS42 MOV32 UPD42 INS40 INS42 INS27 INS34 UPD40 INS27 UPD42 INS40 INS42 INS42 INS42 INS39 INS32 UPD40 MOV40 UPD42 MOV42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS40 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS60 INS14 INS42 INS32 UPD42 UPD42 UPD42 UPD42 INS39 INS59 INS43 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL39 DEL32 DEL11 DEL42 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL11 DEL29 DEL42 DEL42 DEL44 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL71 DEL55