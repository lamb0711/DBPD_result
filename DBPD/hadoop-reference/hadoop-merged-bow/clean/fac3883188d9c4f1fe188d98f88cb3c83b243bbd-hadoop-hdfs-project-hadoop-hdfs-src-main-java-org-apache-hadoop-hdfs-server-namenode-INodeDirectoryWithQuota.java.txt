HDFS-4503. Update computeContentSummary(..), spaceConsumedInTree(..) and diskspaceConsumed(..) in INode for snapshot.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448373 13f79535-47bb-0310-9956-ffa450edef68

-  private long nsCount = 1L;
+  private long namespace = 1L;
-    INode.DirCounts counts = new INode.DirCounts();
-    other.spaceConsumedInTree(counts);
-    this.nsCount = counts.getNsCount();
-    this.diskspace = counts.getDsCount();
+    final Quota.Counts counts = other.computeQuotaUsage();
+    this.namespace = counts.get(Quota.NAMESPACE);
+    this.diskspace = counts.get(Quota.DISKSPACE);
-  
-  DirCounts spaceConsumedInTree(DirCounts counts) {
-    counts.nsCount += nsCount;
-    counts.dsCount += diskspace;
+  public final Quota.Counts computeQuotaUsage(Quota.Counts counts) {
+    // use cache value
+    counts.add(Quota.NAMESPACE, namespace);
+    counts.add(Quota.DISKSPACE, diskspace);
+  @Override
+  public Content.CountsMap computeContentSummary(
+      final Content.CountsMap countsMap) {
+    final long original = countsMap.sum(Content.DISKSPACE);
+    super.computeContentSummary(countsMap);
+    checkDiskspace(countsMap.sum(Content.DISKSPACE) - original);
+    return countsMap;
+  }
+
+  @Override
+  public Content.Counts computeContentSummary(
+      final Content.Counts counts) {
+    final long original = counts.get(Content.DISKSPACE);
+    super.computeContentSummary(counts);
+    checkDiskspace(counts.get(Content.DISKSPACE) - original);
+    return counts;
+  }
+  
+  private void checkDiskspace(final long computed) {
+    if (-1 != getDsQuota() && diskspaceConsumed() != computed) {
+      NameNode.LOG.error("BUG: Inconsistent diskspace for directory "
+          + getFullPathName() + ". Cached = " + diskspaceConsumed()
+          + " != Computed = " + computed);
+    }
+  }
+
-    return nsCount;
+    return namespace;
-    setSpaceConsumed(nsCount + nsDelta, diskspace + dsDelta);
+    namespace += nsDelta;
+    diskspace += dsDelta;
-    this.nsCount = namespace;
+    this.namespace = namespace;
-    long newCount = nsCount + nsDelta;
-    long newDiskspace = diskspace + dsDelta;
-    if (nsDelta>0 || dsDelta>0) {
-      if (nsQuota >= 0 && nsQuota < newCount) {
-        throw new NSQuotaExceededException(nsQuota, newCount);
-      }
-      if (dsQuota >= 0 && dsQuota < newDiskspace) {
-        throw new DSQuotaExceededException(dsQuota, newDiskspace);
-      }
+    if (Quota.isViolated(nsQuota, namespace, nsDelta)) {
+      throw new NSQuotaExceededException(nsQuota, namespace + nsDelta);
+    }
+    if (Quota.isViolated(dsQuota, diskspace, dsDelta)) {
+      throw new DSQuotaExceededException(dsQuota, diskspace + dsDelta);

INS31 INS31 INS31 INS31 INS83 INS83 UPD43 UPD42 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 MOV29 INS39 INS42 MOV44 MOV44 MOV43 INS8 UPD42 INS60 INS40 UPD43 INS42 INS40 INS83 INS43 INS42 MOV60 INS21 INS21 INS41 INS42 INS40 INS83 INS43 INS42 MOV60 INS21 INS21 INS41 INS83 INS39 INS42 INS25 INS21 MOV25 MOV25 INS83 UPD43 MOV43 INS59 INS40 INS32 INS32 INS40 INS83 INS48 INS32 INS42 INS40 INS83 INS48 INS32 INS42 UPD27 MOV27 INS8 UPD42 INS7 INS7 INS32 INS32 UPD40 MOV42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 UPD42 INS32 INS42 INS42 INS42 INS27 UPD42 INS32 INS42 INS42 INS42 INS27 UPD27 UPD27 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 UPD42 INS40 UPD42 INS40 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS38 INS32 INS32 INS42 INS32 UPD42 INS42 INS42 INS40 INS42 INS42 INS40 INS34 INS42 INS42 INS40 INS42 INS27 INS27 MOV27 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL7 DEL40 DEL42 DEL7 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL42 DEL34 DEL42 DEL34 DEL42 DEL42 DEL42 DEL27 DEL32 DEL42 DEL34 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL39 DEL42 DEL8 DEL25 DEL8 DEL31