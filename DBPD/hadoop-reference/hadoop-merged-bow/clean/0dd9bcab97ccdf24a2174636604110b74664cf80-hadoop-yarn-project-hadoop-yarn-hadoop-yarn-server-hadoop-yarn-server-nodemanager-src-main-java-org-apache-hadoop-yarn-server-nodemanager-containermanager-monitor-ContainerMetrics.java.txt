YARN-4811. Generate histograms in ContainerMetrics for actual container resource usage

+import com.codahale.metrics.Histogram;
+import com.codahale.metrics.Snapshot;
+import com.codahale.metrics.UniformReservoir;
+import org.apache.hadoop.metrics2.lib.MutableQuantiles;
+import org.apache.hadoop.metrics2.util.Quantile;
+import org.apache.hadoop.metrics2.util.QuantileEstimator;
+import java.util.TreeMap;
+  public static final String PMEM_USAGE_QUANTILES_NAME = "pMemUsageMBHistogram";
+  private static final String PHY_CPU_USAGE_QUANTILES_NAME =
+      "pCpuUsagePercentHistogram";
+  @Metric
+  public  MutableQuantiles pMemMBQuantiles;
+
+  public  MutableQuantiles cpuCoreUsagePercentQuantiles;
+
+  @Metric
+    this.pMemMBQuantiles = registry
+        .newQuantiles(PMEM_USAGE_QUANTILES_NAME, "Physical memory quantiles",
+            "Usage", "MBs", 1);
+    ContainerMetricsQuantiles memEstimator =
+        new ContainerMetricsQuantiles(MutableQuantiles.quantiles);
+    pMemMBQuantiles.setEstimator(memEstimator);
+
+    this.cpuCoreUsagePercentQuantiles = registry
+        .newQuantiles(PHY_CPU_USAGE_QUANTILES_NAME,
+            "Physical Cpu core percent usage quantiles", "Usage", "Percents",
+            1);
+    ContainerMetricsQuantiles cpuEstimator =
+        new ContainerMetricsQuantiles(MutableQuantiles.quantiles);
+    cpuCoreUsagePercentQuantiles.setEstimator(cpuEstimator);
+      this.pMemMBQuantiles.add(memoryMBs);
+      this.cpuCoreUsagePercentQuantiles.add(totalPhysicalCpuPercent);
+
+  public static class ContainerMetricsQuantiles implements QuantileEstimator {
+
+    private final Histogram histogram = new Histogram(new UniformReservoir());
+
+    private Quantile[] quantiles;
+
+    ContainerMetricsQuantiles(Quantile[] q) {
+      quantiles = q;
+    }
+
+    @Override
+    public synchronized void insert(long value) {
+      histogram.update(value);
+    }
+
+    @Override
+    synchronized public long getCount() {
+      return histogram.getCount();
+    }
+
+    @Override
+    synchronized public void clear() {
+      // don't do anything because we want metrics over the lifetime of the
+      // container
+    }
+
+    @Override
+    public synchronized Map<Quantile, Long> snapshot() {
+      Snapshot snapshot = histogram.getSnapshot();
+      Map<Quantile, Long> values = new TreeMap<>();
+      for (Quantile quantile : quantiles) {
+        values.put(quantile, (long) snapshot.getValue(quantile.quantile));
+      }
+      return values;
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS59 INS78 INS83 INS43 INS59 INS83 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS21 INS21 INS60 INS21 INS42 INS83 INS83 INS43 INS59 INS83 INS5 INS59 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS8 INS78 INS83 INS83 INS39 INS42 INS8 INS78 INS83 INS83 INS74 INS42 INS8 INS7 INS43 INS59 INS32 INS7 INS43 INS59 INS32 INS42 INS42 INS14 INS43 INS85 INS42 INS5 INS42 INS21 INS42 INS39 INS42 INS21 INS42 INS41 INS42 INS42 INS43 INS43 INS43 INS60 INS60 INS70 INS41 INS22 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS22 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS21 INS21 INS43 INS14 INS42 INS43 INS85 INS7 INS32 INS32 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS52 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS34 INS43 INS40 INS52 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS34 INS43 INS40 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS11 INS42 INS39 INS32 INS42 INS42 INS40