YARN-2010. Handle app-recovery failures gracefully. (Jian He and Karthik Kambatla via kasha)

+import java.io.IOException;
+import java.nio.ByteBuffer;
+import org.apache.hadoop.io.DataInputByteBuffer;
+import org.apache.hadoop.security.Credentials;
+      RMAppRecoverEvent recoverEvent = (RMAppRecoverEvent) event;
+      try {
+        app.recover(recoverEvent.getRMState());
+      } catch (Exception e) {
+        String msg = app.applicationId + " failed to recover. " + e.getMessage();
+        failToRecoverApp(app, event, msg, e);
+        return RMAppState.FINAL_SAVING;
+      }
+
+      if (UserGroupInformation.isSecurityEnabled()) {
+        // synchronously renew delegation token on recovery.
+        try {
+          app.rmContext.getDelegationTokenRenewer().addApplicationSync(
+            app.getApplicationId(), app.parseCredentials(),
+            app.submissionContext.getCancelTokensWhenComplete(), app.getUser());
+        } catch (Exception e) {
+          String msg = "Failed to renew delegation token on recovery for "
+              + app.applicationId + e.getMessage();
+          failToRecoverApp(app, event, msg, e);
+          return RMAppState.FINAL_SAVING;
+        }
+      }
+
+
+    private void failToRecoverApp(RMAppImpl app, RMAppEvent event, String msg,
+        Exception e) {
+      app.diagnostics.append(msg);
+      LOG.error(msg, e);
+      app.rememberTargetTransitionsAndStoreState(event, new FinalTransition(
+        RMAppState.FAILED), RMAppState.FAILED, RMAppState.FAILED);
+    }
+
+  protected Credentials parseCredentials() throws IOException {
+    Credentials credentials = new Credentials();
+    DataInputByteBuffer dibb = new DataInputByteBuffer();
+    ByteBuffer tokens = submissionContext.getAMContainerSpec().getTokens();
+    if (tokens != null) {
+      dibb.reset(tokens);
+      credentials.readTokenStorageStream(dibb);
+      tokens.rewind();
+    }
+    return credentials;
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS42 INS42 INS60 INS60 INS60 INS25 INS41 INS60 INS54 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS8 INS12 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS11 INS21 INS44 INS8 INS42 INS42 INS54 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS40 INS40 INS43 INS43 INS32 INS42 INS32 INS32 INS32 INS43 INS42 INS32 INS43 INS42 INS60 INS21 INS41 INS8 INS12 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS40 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS60 INS21 INS41 INS40 INS45 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS43 INS59 INS32 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS40 INS32 INS42 INS42