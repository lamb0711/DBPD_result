HDFS-11826. Federation Namenode Heartbeat. Contributed by Inigo Goiri.

(cherry picked from commit 928f8dab52191e733984d37f47b69719ccf11313)

+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.hadoop.hdfs.HAUtil;
+  /** Updates the namenode status in the namenode resolver. */
+  private Collection<NamenodeHeartbeatService> namenodeHearbeatServices;
+    if (conf.getBoolean(
+        DFSConfigKeys.DFS_ROUTER_HEARTBEAT_ENABLE,
+        DFSConfigKeys.DFS_ROUTER_HEARTBEAT_ENABLE_DEFAULT)) {
+
+      // Create status updater for each monitored Namenode
+      this.namenodeHearbeatServices = createNamenodeHearbeatServices();
+      for (NamenodeHeartbeatService hearbeatService :
+          this.namenodeHearbeatServices) {
+        addService(hearbeatService);
+      }
+
+      if (this.namenodeHearbeatServices.isEmpty()) {
+        LOG.error("Heartbeat is enabled but there are no namenodes to monitor");
+      }
+    }
+
+  // Namenode heartbeat monitors
+  /////////////////////////////////////////////////////////
+
+  /**
+   * Create each of the services that will monitor a Namenode.
+   *
+   * @return List of heartbeat services.
+   */
+  protected Collection<NamenodeHeartbeatService>
+      createNamenodeHearbeatServices() {
+
+    Map<String, NamenodeHeartbeatService> ret = new HashMap<>();
+
+    if (conf.getBoolean(
+        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,
+        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {
+      // Create a local heartbet service
+      NamenodeHeartbeatService localHeartbeatService =
+          createLocalNamenodeHearbeatService();
+      if (localHeartbeatService != null) {
+        String nnDesc = localHeartbeatService.getNamenodeDesc();
+        ret.put(nnDesc, localHeartbeatService);
+      }
+    }
+
+    // Create heartbeat services for a list specified by the admin
+    String namenodes = this.conf.get(
+        DFSConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);
+    if (namenodes != null) {
+      for (String namenode : namenodes.split(",")) {
+        String[] namenodeSplit = namenode.split("\\.");
+        String nsId = null;
+        String nnId = null;
+        if (namenodeSplit.length == 2) {
+          nsId = namenodeSplit[0];
+          nnId = namenodeSplit[1];
+        } else if (namenodeSplit.length == 1) {
+          nsId = namenode;
+        } else {
+          LOG.error("Wrong Namenode to monitor: {}", namenode);
+        }
+        if (nsId != null) {
+          NamenodeHeartbeatService heartbeatService =
+              createNamenodeHearbeatService(nsId, nnId);
+          if (heartbeatService != null) {
+            ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);
+          }
+        }
+      }
+    }
+
+    return ret.values();
+  }
+
+  /**
+   * Create a new status updater for the local Namenode.
+   *
+   * @return Updater of the status for the local Namenode.
+   */
+  protected NamenodeHeartbeatService createLocalNamenodeHearbeatService() {
+    // Detect NN running in this machine
+    String nsId = DFSUtil.getNamenodeNameServiceId(conf);
+    String nnId = null;
+    if (HAUtil.isHAEnabled(conf, nsId)) {
+      nnId = HAUtil.getNameNodeId(conf, nsId);
+      if (nnId == null) {
+        LOG.error("Cannot find namenode id for local {}", nsId);
+      }
+    }
+
+    return createNamenodeHearbeatService(nsId, nnId);
+  }
+
+  /**
+   * Create a heartbeat monitor for a particular Namenode.
+   *
+   * @param nsId Identifier of the nameservice to monitor.
+   * @param nnId Identifier of the namenode (HA) to monitor.
+   * @return Updater of the status for the specified Namenode.
+   */
+  protected NamenodeHeartbeatService createNamenodeHearbeatService(
+      String nsId, String nnId) {
+
+    LOG.info("Creating heartbeat service for Namenode {} in {}", nnId, nsId);
+    NamenodeHeartbeatService ret = new NamenodeHeartbeatService(
+        namenodeResolver, nsId, nnId);
+    return ret;
+  }
+
+  /////////////////////////////////////////////////////////

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS29 INS83 INS74 INS59 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS65 INS43 INS43 INS42 INS25 INS65 INS65 INS43 INS43 INS60 INS25 INS60 INS25 INS41 INS65 INS65 INS42 INS60 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS21 INS60 INS41 INS66 INS42 INS42 INS32 INS8 INS66 INS66 INS42 INS42 INS74 INS59 INS32 INS8 INS43 INS59 INS27 INS8 INS32 INS66 INS66 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS42 INS40 INS40 INS21 INS70 INS25 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS40 INS60 INS25 INS42 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS7 INS44 INS22 INS8 INS32 INS8 INS42 INS42 INS42 INS74 INS43 INS59 INS27 INS8 INS22 INS42 INS40 INS44 INS32 INS8 INS42 INS42 INS42 INS7 INS27 INS8 INS43 INS42 INS42 INS42 INS22 INS32 INS43 INS42 INS52 INS42 INS21 INS22 INS42 INS21 INS43 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS52 INS42 INS43 INS42 INS42 INS42 INS45 INS60 INS60 INS60 INS25 INS25 INS42 INS32 INS42 INS33 INS21 INS42 INS52 INS42 INS42 INS42 INS32 INS52 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS42 INS5 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS33 INS40 INS34 INS21 INS21 INS27 INS8 INS8 INS42 INS33 INS60 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS7 INS7 INS40 INS34 INS21 INS21 INS43 INS59 INS27 INS8 INS42 INS2 INS42 INS2 INS7 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42