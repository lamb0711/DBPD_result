Merge trunk into HDFS-1623 branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1158072 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockManager;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeManager;
-import org.apache.hadoop.net.NetworkTopology;
-      ArrayList<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>();
-      ArrayList<DatanodeDescriptor> dead = new ArrayList<DatanodeDescriptor>();
-      fsn.DFSNodesStatus(live, dead);
-      // If a data node has been first included in the include list, 
-      // then decommissioned, then removed from both include and exclude list.  
-      // We make the web console to "forget" this node by not displaying it.
-      fsn.removeDecomNodeFromList(live);  
-      fsn.removeDecomNodeFromList(dead); 
+      final DatanodeManager dm = fsn.getBlockManager().getDatanodeManager();
+      final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>();
+      final List<DatanodeDescriptor> dead = new ArrayList<DatanodeDescriptor>();
+      dm.fetchDatanodes(live, dead, true);
-      ArrayList<DatanodeDescriptor> decommissioning = fsn
-          .getDecommissioningNodes();
+      final List<DatanodeDescriptor> decommissioning = dm.getDecommissioningNodes();
-          + fsn.getUnderReplicatedNotMissingBlocks()
+          + fsn.getBlockManager().getUnderReplicatedNotMissingBlocks()
-  /** @return the network topology. */
-  static NetworkTopology getNetworkTopology(final NameNode namenode) {
-    return namenode.getNamesystem().getBlockManager().getDatanodeManager(
-        ).getNetworkTopology();
-  }
-
-    return (DatanodeDescriptor)getNetworkTopology(namenode).chooseRandom(
+    return (DatanodeDescriptor)namenode.getNamesystem().getBlockManager(
+        ).getDatanodeManager().getNetworkTopology().chooseRandom(
-      ArrayList<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>();
-      ArrayList<DatanodeDescriptor> dead = new ArrayList<DatanodeDescriptor>();
-      nn.getNamesystem().DFSNodesStatus(live, dead);
-      nn.getNamesystem().removeDecomNodeFromList(live);
-      nn.getNamesystem().removeDecomNodeFromList(dead);
+      final FSNamesystem ns = nn.getNamesystem();
+      final DatanodeManager dm = ns.getBlockManager().getDatanodeManager();
+
+      final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>();
+      final List<DatanodeDescriptor> dead = new ArrayList<DatanodeDescriptor>();
+      dm.fetchDatanodes(live, dead, true);
+
-          ArrayList<DatanodeDescriptor> decommissioning = nn.getNamesystem()
-              .getDecommissioningNodes();
+          final List<DatanodeDescriptor> decommissioning = dm.getDecommissioningNodes();
-    final FSNamesystem fsn;
+    final BlockManager blockManager;
-    public XMLBlockInfo(FSNamesystem fsn, Long blockId) {
-      this.fsn = fsn;
+    XMLBlockInfo(FSNamesystem fsn, Long blockId) {
+      this.blockManager = fsn.getBlockManager();
+
-        this.inode = fsn.getBlockManager().getINode(block);
+        this.inode = blockManager.getINode(block);
-       
-        if (fsn.getBlockManager().blocksMap.contains(block)) {
-          Iterator<DatanodeDescriptor> it =
-            fsn.getBlockManager().blocksMap.nodeIterator(block);
+        for(final Iterator<DatanodeDescriptor> it = blockManager.datanodeIterator(block);
+            it.hasNext(); ) {
+          doc.startTag("replica");
-          while (it.hasNext()) {
-            doc.startTag("replica");
+          DatanodeDescriptor dd = it.next();
-            DatanodeDescriptor dd = it.next();
+          doc.startTag("host_name");
+          doc.pcdata(dd.getHostName());
+          doc.endTag();
-            doc.startTag("host_name");
-            doc.pcdata(dd.getHostName());
-            doc.endTag();
-
-            boolean isCorrupt = fsn.getCorruptReplicaBlockIds(0,
-                                  block.getBlockId()) != null;
-            
-            doc.startTag("is_corrupt");
-            doc.pcdata(""+isCorrupt);
-            doc.endTag();
-            
-            doc.endTag(); // </replica>
-          }
-
-        } 
+          boolean isCorrupt = blockManager.getCorruptReplicaBlockIds(0,
+                                block.getBlockId()) != null;
+          
+          doc.startTag("is_corrupt");
+          doc.pcdata(""+isCorrupt);
+          doc.endTag();
+          
+          doc.endTag(); // </replica>
+        }
-    final FSNamesystem fsn;
+    final BlockManager blockManager;
-    public XMLCorruptBlockInfo(FSNamesystem fsn, Configuration conf,
+    XMLCorruptBlockInfo(FSNamesystem fsn, Configuration conf,
-      this.fsn = fsn;
+      this.blockManager = fsn.getBlockManager();
-      doc.pcdata(""+fsn.getMissingBlocksCount());
+      doc.pcdata(""+blockManager.getMissingBlocksCount());
-      doc.pcdata(""+fsn.getCorruptReplicaBlocks());
+      doc.pcdata(""+blockManager.getCorruptReplicaBlocksCount());
-      long[] corruptBlockIds
-        = fsn.getCorruptReplicaBlockIds(numCorruptBlocks,
-                                        startingBlockId);
+      final long[] corruptBlockIds = blockManager.getCorruptReplicaBlockIds(
+          numCorruptBlocks, startingBlockId);

MOV26 INS26 UPD40 INS40 MOV23 MOV43 UPD42 MOV65 MOV60 UPD43 UPD43 INS60 UPD66 MOV66 INS11 INS60 INS60 UPD42 UPD42 UPD42 UPD42 INS83 INS43 INS59 INS83 INS74 INS83 UPD74 MOV74 INS83 UPD74 MOV43 INS32 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS74 INS83 UPD74 MOV74 INS83 INS42 INS42 INS32 INS43 MOV43 UPD43 INS42 UPD42 UPD42 INS9 UPD43 MOV32 INS42 INS40 INS42 INS42 MOV32 INS42 INS42 INS32 INS43 MOV43 UPD43 UPD42 MOV42 UPD42 MOV42 UPD42 INS9 INS32 INS24 MOV32 MOV32 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 MOV32 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 INS58 MOV32 MOV8 UPD42 UPD42 UPD42 MOV42 MOV32 UPD42 UPD42 INS83 MOV74 INS59 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 MOV42 MOV32 INS42 UPD42 INS83 UPD74 UPD43 UPD42 UPD42 UPD42 MOV42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL11 DEL41 DEL8 DEL31 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL32 DEL42 DEL32 DEL83 DEL42 DEL42 DEL22 DEL42 DEL22 DEL42 DEL42 DEL32 DEL59 DEL60 DEL61 DEL8 DEL25 DEL83 DEL42