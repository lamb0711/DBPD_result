YARN-7419. CapacityScheduler: Allow auto leaf queue creation after queue mapping. (Suma Shivaprasad via wangda)

Change-Id: Ia1704bb8cb5070e5b180b5a85787d7b9ca57ebc6

-import org.apache.hadoop.security.Groups;
+import org.apache.hadoop.yarn.server.resourcemanager.placement.ApplicationPlacementContext;
-import org.apache.hadoop.yarn.server.resourcemanager.placement.UserGroupMappingPlacementRule.QueueMapping;
+import static org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacitySchedulerConfiguration.QUEUE_MAPPING;
+
-  public UserGroupMappingPlacementRule
-      getUserGroupMappingPlacementRule() throws IOException {
+  public PlacementRule getUserGroupMappingPlacementRule() throws IOException {
-      boolean overrideWithQueueMappings = conf.getOverrideWithQueueMappings();
-      LOG.info(
-          "Initialized queue mappings, override: " + overrideWithQueueMappings);
-
-      // Get new user/group mappings
-      List<QueueMapping> newMappings = conf.getQueueMappings();
-      // check if mappings refer to valid queues
-      for (QueueMapping mapping : newMappings) {
-        String mappingQueue = mapping.getQueue();
-        if (!mappingQueue.equals(
-            UserGroupMappingPlacementRule.CURRENT_USER_MAPPING) && !mappingQueue
-            .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {
-          CSQueue queue = getQueue(mappingQueue);
-          if (queue == null || !(queue instanceof LeafQueue)) {
-            throw new IOException(
-                "mapping contains invalid or non-leaf queue " + mappingQueue);
-          }
-        }
-      }
-
-      // initialize groups if mappings are present
-      if (newMappings.size() > 0) {
-        Groups groups = new Groups(conf);
-        return new UserGroupMappingPlacementRule(overrideWithQueueMappings,
-            newMappings, groups);
-      }
-
-      return null;
+      return UserGroupMappingPlacementRule.get(this);
-  private void updatePlacementRules() throws IOException {
+  @VisibleForTesting
+  void updatePlacementRules() throws IOException {
-  private void addApplication(ApplicationId applicationId,
-      String queueName, String user, Priority priority) {
+  private void addApplication(ApplicationId applicationId, String queueName,
+      String user, Priority priority,
+      ApplicationPlacementContext placementContext) {
-        this.rmContext.getDispatcher().getEventHandler().handle(new RMAppEvent(
-            applicationId, RMAppEventType.APP_REJECTED, message));
+        this.rmContext.getDispatcher().getEventHandler().handle(
+            new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,
+                message));
+
+      if (queue == null && placementContext != null) {
+        //Could be a potential auto-created leaf queue
+        try {
+          queue = autoCreateLeafQueue(placementContext);
+        } catch (YarnException | IOException e) {
+          LOG.error("Could not auto-create leaf queue due to : ", e);
+          final String message =
+              "Application " + applicationId + " submission by user : " + user
+                  + " to  queue : " + queueName + " failed : " + e.getMessage();
+          this.rmContext.getDispatcher().getEventHandler().handle(
+              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,
+                  message));
+        }
+      }
+
-        String message =
+        final String message =
+
+
-            "Application " + applicationId + " submitted by user " + user
-                + " to non-leaf queue: " + queueName;
+            "Application " + applicationId + " submitted by user : " + user
+                + " to non-leaf queue : " + queueName;
+      } else if (queue instanceof AutoCreatedLeafQueue && queue
+          .getParent() instanceof ManagedParentQueue) {
+
+        //If queue already exists and auto-queue creation was not required,
+        //placement context should not be null
+        if (placementContext == null) {
+          String message =
+              "Application " + applicationId + " submission by user : " + user
+                  + " to specified queue : " + queueName + "  is prohibited. "
+                  + "Verify automatic queue mapping for user exists in " +
+                  QUEUE_MAPPING;
+          this.rmContext.getDispatcher().getEventHandler().handle(
+              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,
+                  message));
+          return;
+          // For a queue which exists already and
+          // not auto-created above, then its parent queue should match
+          // the parent queue specified in queue mapping
+        } else if (!queue.getParent().getQueueName().equals(
+            placementContext.getParentQueue())) {
+          String message =
+              "Auto created Leaf queue " + placementContext.getQueue() + " "
+                  + "already exists under queue : " + queue
+                  .getParent().getQueuePath()
+                  + ".But Queue mapping configuration " +
+                   CapacitySchedulerConfiguration.QUEUE_MAPPING + " has been "
+                  + "updated to a different parent queue : "
+                  + placementContext.getParentQueue()
+                  + " for the specified user : " + user;
+          this.rmContext.getDispatcher().getEventHandler().handle(
+              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,
+                  message));
+          return;
+        }
+
-              appAddedEvent.getUser(), appAddedEvent.getApplicatonPriority());
+              appAddedEvent.getUser(), appAddedEvent.getApplicatonPriority(),
+              appAddedEvent.getPlacementContext());
-      ParentQueue parent = (ParentQueue) queue.getParent();
+      AbstractManagedParentQueue parent = (AbstractManagedParentQueue) queue
+          .getParent();
-          || !(AbstractManagedParentQueue.class.isAssignableFrom(parent.getClass()))) {
+          || !(AbstractManagedParentQueue.class.isAssignableFrom(
+              parent.getClass()))) {
+
+  private LeafQueue autoCreateLeafQueue(
+      ApplicationPlacementContext placementContext)
+      throws IOException, YarnException {
+
+    AutoCreatedLeafQueue autoCreatedLeafQueue = null;
+
+    String leafQueueName = placementContext.getQueue();
+    String parentQueueName = placementContext.getParentQueue();
+
+    if (!StringUtils.isEmpty(parentQueueName)) {
+      CSQueue parentQueue = getQueue(parentQueueName);
+
+      if (parentQueue != null && conf.isAutoCreateChildQueueEnabled(
+          parentQueue.getQueuePath())) {
+
+        ManagedParentQueue autoCreateEnabledParentQueue =
+            (ManagedParentQueue) parentQueue;
+        autoCreatedLeafQueue = new AutoCreatedLeafQueue(this, leafQueueName,
+            autoCreateEnabledParentQueue);
+
+        addQueue(autoCreatedLeafQueue);
+
+        //TODO - Set entitlement through capacity management policy
+      } else{
+        throw new SchedulerDynamicEditException(
+            "Could not auto-create leaf queue for " + leafQueueName
+                + ". Queue mapping specifies an invalid parent queue "
+                + "which does not exist "
+                + parentQueueName);
+      }
+    } else{
+      throw new SchedulerDynamicEditException(
+          "Could not auto-create leaf queue for " + leafQueueName
+              + ". Queue mapping does not specify"
+              + " which parent queue it needs to be created under.");
+    }
+    return autoCreatedLeafQueue;
+  }

MOV26 MOV26 UPD40 UPD40 INS31 INS31 MOV78 MOV83 UPD43 MOV43 MOV42 MOV43 INS8 INS78 INS44 INS83 INS43 INS42 INS44 INS43 INS43 INS8 UPD42 INS54 INS42 INS43 INS42 INS42 INS43 INS42 UPD42 MOV42 INS42 INS60 INS60 INS60 INS25 MOV41 INS8 MOV8 INS42 INS42 INS43 INS59 INS43 MOV59 INS43 INS59 INS38 INS8 MOV8 INS42 MOV21 INS41 INS25 INS25 INS42 INS42 INS33 UPD42 MOV42 UPD42 UPD42 MOV42 INS42 INS32 INS32 MOV60 MOV25 INS53 INS32 INS27 INS8 MOV38 INS8 INS25 UPD43 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 MOV43 INS8 MOV8 INS14 INS42 UPD42 MOV42 INS52 MOV27 INS27 INS54 INS60 INS21 INS41 INS27 INS8 UPD42 UPD42 INS27 INS32 MOV60 INS21 INS21 UPD43 MOV43 INS27 INS42 INS33 INS8 INS12 INS83 MOV43 INS59 INS32 INS62 INS62 MOV25 UPD43 UPD42 UPD42 INS42 INS33 UPD42 MOV42 INS42 INS32 INS43 INS7 INS32 UPD42 INS45 INS42 INS45 INS45 INS21 INS44 INS8 INS42 INS27 INS32 INS42 INS14 INS42 INS43 INS32 INS43 INS27 INS25 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS11 INS42 INS14 INS42 INS42 INS43 INS7 INS84 INS42 INS21 INS60 INS21 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS43 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS38 INS8 INS43 INS42 INS43 INS52 INS42 INS42 INS42 INS45 INS42 UPD45 INS45 UPD42 INS42 INS32 INS43 MOV43 INS32 INS83 INS43 INS59 INS32 INS22 INS42 INS42 INS32 INS60 INS21 INS41 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS32 INS42 INS14 INS52 INS42 INS32 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS32 INS42 INS43 INS42 INS40 INS42 UPD45 UPD45 INS45 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS14 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS45 INS32 INS45 INS40 INS45 INS45 INS32 INS45 INS42 INS32 INS42 INS43 INS42 INS40 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS52 INS42 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL43 DEL43 DEL74 DEL60 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL42 DEL42 DEL32 DEL34 DEL27 DEL25 DEL8 DEL54 DEL8 DEL31 DEL83 DEL42 DEL40 DEL32 DEL38 DEL40 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL43 DEL62 DEL36 DEL38 DEL27 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL14 DEL41 DEL33