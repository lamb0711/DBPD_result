HDFS-10784. Implement WebHdfsFileSystem#listStatusIterator.

+import org.apache.hadoop.fs.RemoteIterator;
+import org.apache.hadoop.hdfs.protocol.DirectoryListing;
+import com.google.common.base.Charsets;
+  private static final byte[] EMPTY_ARRAY = new byte[] {};
+  private class DirListingIterator<T extends FileStatus> implements
+      RemoteIterator<T> {
+
+    private final Path path;
+    private DirectoryListing thisListing;
+    private int i = 0;
+    private byte[] prevKey = EMPTY_ARRAY;
+
+    DirListingIterator(Path path) {
+      this.path = path;
+    }
+
+    @Override
+    public boolean hasNext() throws IOException {
+      if (thisListing == null) {
+        fetchMore();
+      }
+      return i < thisListing.getPartialListing().length ||
+          thisListing.hasMore();
+    }
+
+    private void fetchMore() throws IOException {
+      thisListing = new FsPathResponseRunner<DirectoryListing>(
+          GetOpParam.Op.LISTSTATUS_BATCH,
+          path, new StartAfterParam(new String(prevKey, Charsets.UTF_8))) {
+        @Override
+        DirectoryListing decodeResponse(Map<?, ?> json) throws IOException {
+          return JsonUtilClient.toDirectoryListing(json);
+        }
+      }.run();
+      i = 0;
+      prevKey = thisListing.getLastName();
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public T next() throws IOException {
+      Preconditions.checkState(hasNext(), "No more items in iterator");
+      if (i == thisListing.getPartialListing().length) {
+        fetchMore();
+      }
+      return (T)makeQualified(thisListing.getPartialListing()[i++], path);
+    }
+  }
+
+  @Override
+  public RemoteIterator<FileStatus> listStatusIterator(final Path f)
+      throws FileNotFoundException, IOException {
+    return new DirListingIterator<>(f);
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS55 INS31 INS83 INS83 INS83 INS5 INS59 INS83 INS42 INS73 INS74 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS78 INS83 INS74 INS42 INS44 INS43 INS43 INS8 INS39 INS85 INS42 INS3 INS42 INS43 INS43 INS43 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS5 INS59 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS78 INS79 INS83 INS43 INS42 INS43 INS8 INS42 INS43 INS43 INS83 INS43 INS42 INS42 INS42 INS41 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS39 INS85 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS25 INS41 INS42 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS21 INS25 INS41 INS42 INS42 INS42 INS14 INS39 INS85 INS42 INS7 INS27 INS8 INS27 INS7 INS7 INS7 INS32 INS27 INS8 INS11 INS74 INS42 INS22 INS42 INS42 INS33 INS21 INS27 INS32 INS42 INS32 INS42 INS34 INS42 INS32 INS42 INS42 INS32 INS45 INS42 INS22 INS21 INS43 INS32 INS43 INS52 INS42 INS32 INS42 INS22 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS42 INS32 INS42 INS74 INS40 INS42 INS14 INS1 INS42 INS42 INS42 INS32 INS37 INS42 INS42 INS43 INS43 INS43 INS14 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS40 INS78 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS42 INS74 INS42 INS42 INS41 INS43 INS76 INS76 INS32 INS42 INS42 INS42 INS42