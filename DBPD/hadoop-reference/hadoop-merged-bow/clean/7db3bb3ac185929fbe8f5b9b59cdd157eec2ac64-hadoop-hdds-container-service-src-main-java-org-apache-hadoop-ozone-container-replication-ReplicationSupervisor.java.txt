HDDS-544. Unconditional wait findbug warning from ReplicationSupervisor.
Contributed by Arpit Agarwal.

-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeMap;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentHashMap.KeySetView;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
-  private final Set<Worker> threadPool = new HashSet<>();
-
-  private final Map<Long, ReplicationTask> queue = new TreeMap();
-
-
+  private final ThreadPoolExecutor executor;
-  private final int poolSize;
+  /**
+   * A set of container IDs that are currently being downloaded
+   * or queued for download. Tracked so we don't schedule > 1
+   * concurrent download for the same container.
+   */
+  private final KeySetView<Object, Boolean> containersInFlight;
-    this.poolSize = poolSize;
+    this.containersInFlight = ConcurrentHashMap.newKeySet();
+    this.executor = new ThreadPoolExecutor(
+        0, poolSize, 60, TimeUnit.SECONDS,
+        new LinkedBlockingQueue<>(),
+        new ThreadFactoryBuilder().setDaemon(true)
+            .setNameFormat("ContainerReplicationThread-%d")
+            .build());
-  public synchronized void addTask(ReplicationTask task) {
-    queue.putIfAbsent(task.getContainerId(), task);
-    synchronized (threadPool) {
-      threadPool.notify();
+  /**
+   * Queue an asynchronous download of the given container.
+   */
+  public void addTask(ReplicationTask task) {
+    if (containersInFlight.add(task.getContainerId())) {
+      executor.submit(new TaskRunner(task));
-  public void start() {
-    for (int i = 0; i < poolSize; i++) {
-      Worker worker = new Worker();
-      Thread thread = new Thread(worker, "ContainerReplication-" + i);
-      thread.setDaemon(true);
-      thread.start();
-      threadPool.add(worker);
-    }
-  }
-
-  public synchronized ReplicationTask selectTask() {
-    for (ReplicationTask task : queue.values()) {
-      if (task.getStatus() == Status.QUEUED) {
-        if (containerSet.getContainer(task.getContainerId()) == null) {
-          task.setStatus(Status.DOWNLOADING);
-          return task;
-        } else {
-          LOG.debug("Container {} has already been downloaded.",
-              task.getContainerId());
-          queue.remove(task.getContainerId());
-        }
-      } else if (task.getStatus() == Status.FAILED) {
-        LOG.error(
-            "Container {} can't be downloaded from any of the datanodes.",
-            task.getContainerId());
-        queue.remove(task.getContainerId());
-      } else if (task.getStatus() == Status.DONE) {
-        queue.remove(task.getContainerId());
-        LOG.info("Container {} is replicated.", task.getContainerId());
-      }
-    }
-    //no available task.
-    return null;
-  }
-
-    for (Worker worker : threadPool) {
-      worker.stop();
+    try {
+      executor.shutdown();
+      if (!executor.awaitTermination(3, TimeUnit.SECONDS)) {
+        executor.shutdownNow();
+      }
+    } catch (InterruptedException ie) {
+      // Ignore, we don't really care about the failure.
+      Thread.currentThread().interrupt();
+  /**
+   * Get the number of containers currently being downloaded
+   * or scheduled for download.
+   * @return Count of in-flight replications.
+   */
-  public int getQueueSize() {
-    return queue.size();
+  public int getInFlightReplications() {
+    return containersInFlight.size();
-  private class Worker implements Runnable {
+  private final class TaskRunner implements Runnable {
+    private final ReplicationTask task;
-    private boolean running = true;
+    private TaskRunner(ReplicationTask task) {
+      this.task = task;
+    }
-        while (running) {
-          ReplicationTask task = selectTask();
-          if (task == null) {
-            synchronized (threadPool) {
-              threadPool.wait();
-            }
-          } else {
-            replicator.replicate(task);
-          }
+        if (containerSet.getContainer(task.getContainerId()) != null) {
+          LOG.debug("Container {} has already been downloaded.",
+              task.getContainerId());
+          return;
-      } catch (Exception ex) {
-        LOG.error("Error on doing replication", ex);
-        try {
-          Thread.sleep(200);
-        } catch (InterruptedException e) {
-          LOG.error("Error on waiting after failed replication task", e);
-        }
-      }
-    }
-    public void stop() {
-      running = false;
+        task.setStatus(Status.DOWNLOADING);
+        replicator.replicate(task);
+
+        if (task.getStatus() == Status.FAILED) {
+          LOG.error(
+              "Container {} can't be downloaded from any of the datanodes.",
+              task.getContainerId());
+        } else if (task.getStatus() == Status.DONE) {
+          LOG.info("Container {} is replicated.", task.getContainerId());
+        }
+      } finally {
+        containersInFlight.remove(task.getContainerId());
+      }

INS26 INS26 MOV23 MOV23 UPD40 INS40 UPD40 UPD40 UPD40 INS40 INS31 INS43 INS29 UPD74 INS29 MOV83 MOV39 UPD42 MOV42 INS8 INS29 UPD42 INS83 UPD42 INS23 MOV31 UPD42 MOV42 UPD42 INS65 UPD43 UPD43 UPD43 UPD42 INS21 INS65 INS25 INS54 INS65 INS65 MOV83 INS83 MOV43 INS59 UPD83 UPD42 MOV44 MOV78 INS39 UPD42 MOV8 INS66 INS66 INS66 UPD42 UPD42 UPD42 INS7 INS66 MOV32 MOV32 INS8 INS8 INS12 INS66 INS66 INS66 MOV42 INS54 INS22 INS32 INS14 UPD42 UPD42 MOV21 MOV21 INS25 MOV44 INS8 UPD42 MOV8 MOV8 INS52 INS42 INS42 INS42 UPD42 INS43 INS34 INS42 INS34 INS40 INS14 INS32 INS38 INS8 UPD42 MOV21 INS22 INS42 MOV21 MOV21 INS25 INS42 INS74 INS32 INS42 UPD42 UPD42 INS14 UPD42 UPD42 INS32 MOV21 INS32 INS52 INS42 UPD27 MOV27 INS8 INS25 INS43 INS32 INS42 INS45 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS34 INS40 INS32 INS42 INS41 MOV21 MOV27 INS8 UPD42 INS42 INS14 INS42 INS9 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV21 INS43 INS42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL42 DEL43 DEL14 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL83 DEL42 DEL21 DEL42 DEL8 DEL51 DEL9 DEL42 DEL32 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL14 DEL59 DEL60 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL8 DEL31 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL8 DEL25 DEL8 DEL61 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL12 DEL54 DEL8 DEL31 DEL39 DEL42 DEL9 DEL83 DEL42 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL25 DEL25 DEL42 DEL42 DEL32 DEL70 DEL33 DEL41 DEL8