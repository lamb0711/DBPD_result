Revert "HDDS-239. Add PipelineStateManager to track pipeline state transition. Contributed by Mukul Kumar Singh."

This reverts commit 6837121a43231f854b0b22ad20330012439313ce.(Mixed with HDDS-260)

-      ReplicationFactor replicationFactor, ReplicationType replicationType) {
-    Pipeline pipeline = findOpenPipeline(replicationType, replicationFactor);
+      ReplicationFactor replicationFactor, ReplicationType replicationType)
+      throws IOException {
+    /**
+     * In the Ozone world, we have a very simple policy.
+     *
+     * 1. Try to create a pipeline if there are enough free nodes.
+     *
+     * 2. This allows all nodes to part of a pipeline quickly.
+     *
+     * 3. if there are not enough free nodes, return pipeline in a
+     * round-robin fashion.
+     *
+     * TODO: Might have to come up with a better algorithm than this.
+     * Create a new placement policy that returns pipelines in round robin
+     * fashion.
+     */
+    Pipeline pipeline = allocatePipeline(replicationFactor);
-      LOG.debug("re-used pipeline:{} for container with " +
+      LOG.debug("created new pipeline:{} for container with " +
+      activePipelines.add(pipeline);
+      activePipelineMap.put(pipeline.getPipelineName(), pipeline);
+      node2PipelineMap.addPipeline(pipeline);
+    } else {
+      pipeline = findOpenPipeline(replicationType, replicationFactor);
+      if (pipeline != null) {
+        LOG.debug("re-used pipeline:{} for container with " +
+                "replicationType:{} replicationFactor:{}",
+            pipeline.getPipelineName(), replicationType, replicationFactor);
+      }
-              " operational pipeline.");
+              "free nodes or operational pipeline.");
-    // 1. Check if pipeline already exists
+    // 1. Check if pipeline channel already exists
-      ReplicationFactor replicationFactor);
-
-  /**
-   * Initialize the pipeline
-   * TODO: move the initialization to Ozone Client later
-   */
-  public abstract void initializePipeline(Pipeline pipeline) throws IOException;
+      ReplicationFactor replicationFactor) throws IOException;
-   * Creates a pipeline with a specified replication factor and type.
-   * @param replicationFactor - Replication Factor.
-   * @param replicationType - Replication Type.
+   * Creates a pipeline from a specified set of Nodes.
+   * @param pipelineID - Name of the pipeline
+   * @param datanodes - The list of datanodes that make this pipeline.
-  public Pipeline createPipeline(ReplicationFactor replicationFactor,
-      ReplicationType replicationType) throws IOException {
-    Pipeline pipeline = allocatePipeline(replicationFactor);
-    if (pipeline != null) {
-      LOG.debug("created new pipeline:{} for container with "
-              + "replicationType:{} replicationFactor:{}",
-          pipeline.getPipelineName(), replicationType, replicationFactor);
-      activePipelines.add(pipeline);
-      activePipelineMap.put(pipeline.getPipelineName(), pipeline);
-      node2PipelineMap.addPipeline(pipeline);
-    }
-    return pipeline;
-  }
+  public abstract void createPipeline(String pipelineID,
+      List<DatanodeDetails> datanodes) throws IOException;

INS43 INS8 MOV43 INS83 INS39 INS42 MOV60 INS25 MOV25 UPD43 UPD42 INS74 INS42 MOV27 MOV8 MOV8 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 INS43 INS43 INS21 UPD42 MOV42 INS42 INS7 INS42 MOV32 UPD45 DEL42 DEL43 DEL42 DEL59 DEL60 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL43 DEL43 DEL42 DEL25 DEL42 DEL41 DEL8