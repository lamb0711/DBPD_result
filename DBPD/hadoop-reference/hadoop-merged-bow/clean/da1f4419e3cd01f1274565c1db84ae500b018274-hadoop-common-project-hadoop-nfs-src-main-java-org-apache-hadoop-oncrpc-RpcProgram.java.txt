merge the rest of trunk to branch HDFS-4949

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532967 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.InetAddress;
-import org.apache.hadoop.oncrpc.RpcCallCache.CacheEntry;
+import org.apache.hadoop.oncrpc.security.Verifier;
-import org.jboss.netty.channel.Channel;
+import org.jboss.netty.buffer.ChannelBuffer;
+import org.jboss.netty.buffer.ChannelBuffers;
+import org.jboss.netty.channel.ChannelHandlerContext;
+import org.jboss.netty.channel.MessageEvent;
+import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
-public abstract class RpcProgram {
+public abstract class RpcProgram extends SimpleChannelUpstreamHandler {
-  private final RpcCallCache rpcCallCache;
-   * @param cacheSize size of cache to handle duplciate requests. Size <= 0
-   *          indicates no cache.
-      int lowProgVersion, int highProgVersion, int cacheSize) {
+      int lowProgVersion, int highProgVersion) {
-    this.rpcCallCache = cacheSize > 0 ? new RpcCallCache(program, cacheSize)
-        : null;
-  /**
-   * Handle an RPC request.
-   * @param rpcCall RPC call that is received
-   * @param in xdr with cursor at reading the remaining bytes of a method call
-   * @param out xdr output corresponding to Rpc reply
-   * @param client making the Rpc request
-   * @param channel connection over which Rpc request is received
-   * @return response xdr response
-   */
-  protected abstract XDR handleInternal(RpcCall rpcCall, XDR in, XDR out,
-      InetAddress client, Channel channel);
-  
-  public XDR handle(XDR xdr, InetAddress client, Channel channel) {
-    XDR out = new XDR();
-    RpcCall rpcCall = RpcCall.read(xdr);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug(program + " procedure #" + rpcCall.getProcedure());
+  @Override
+  public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)
+      throws Exception {
+    RpcInfo info = (RpcInfo) e.getMessage();
+    RpcCall call = (RpcCall) info.header();
+    if (LOG.isTraceEnabled()) {
+      LOG.trace(program + " procedure #" + call.getProcedure());
-    if (!checkProgram(rpcCall.getProgram())) {
-      return programMismatch(out, rpcCall);
+    if (this.progNumber != call.getProgram()) {
+      LOG.warn("Invalid RPC call program " + call.getProgram());
+      RpcAcceptedReply reply = RpcAcceptedReply.getInstance(call.getXid(),
+          AcceptState.PROG_UNAVAIL, Verifier.VERIFIER_NONE);
+
+      XDR out = new XDR();
+      reply.write(out);
+      ChannelBuffer b = ChannelBuffers.wrappedBuffer(out.asReadOnlyWrap()
+          .buffer());
+      RpcResponse rsp = new RpcResponse(b, info.remoteAddress());
+      RpcUtil.sendRpcResponse(ctx, rsp);
+      return;
-    if (!checkProgramVersion(rpcCall.getVersion())) {
-      return programVersionMismatch(out, rpcCall);
+    int ver = call.getVersion();
+    if (ver < lowProgVersion || ver > highProgVersion) {
+      LOG.warn("Invalid RPC call version " + ver);
+      RpcAcceptedReply reply = RpcAcceptedReply.getInstance(call.getXid(),
+          AcceptState.PROG_MISMATCH, Verifier.VERIFIER_NONE);
+
+      XDR out = new XDR();
+      reply.write(out);
+      out.writeInt(lowProgVersion);
+      out.writeInt(highProgVersion);
+      ChannelBuffer b = ChannelBuffers.wrappedBuffer(out.asReadOnlyWrap()
+          .buffer());
+      RpcResponse rsp = new RpcResponse(b, info.remoteAddress());
+      RpcUtil.sendRpcResponse(ctx, rsp);
+      return;
-    // Check for duplicate requests in the cache for non-idempotent requests
-    boolean idempotent = rpcCallCache != null && !isIdempotent(rpcCall);
-    if (idempotent) {
-      CacheEntry entry = rpcCallCache.checkOrAddToCache(client, rpcCall.getXid());
-      if (entry != null) { // in ache 
-        if (entry.isCompleted()) {
-          LOG.info("Sending the cached reply to retransmitted request "
-              + rpcCall.getXid());
-          return entry.getResponse();
-        } else { // else request is in progress
-          LOG.info("Retransmitted request, transaction still in progress "
-              + rpcCall.getXid());
-          // TODO: ignore the request?
-        }
-      }
-    }
-    
-    XDR response = handleInternal(rpcCall, xdr, out, client, channel);
-    if (response.size() == 0) {
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("No sync response, expect an async response for request XID="
-            + rpcCall.getXid());
-      }
-    }
-    
-    // Add the request to the cache
-    if (idempotent) {
-      rpcCallCache.callCompleted(client, rpcCall.getXid(), response);
-    }
-    return response;
+    handleInternal(ctx, info);
-  
-  private XDR programMismatch(XDR out, RpcCall call) {
-    LOG.warn("Invalid RPC call program " + call.getProgram());
-    RpcAcceptedReply.voidReply(out, call.getXid(), AcceptState.PROG_UNAVAIL);
-    return out;
-  }
-  
-  private XDR programVersionMismatch(XDR out, RpcCall call) {
-    LOG.warn("Invalid RPC call version " + call.getVersion());
-    RpcAcceptedReply.voidReply(out, call.getXid(), AcceptState.PROG_MISMATCH);
-    out.writeInt(lowProgVersion);
-    out.writeInt(highProgVersion);
-    return out;
-  }
-  
-  private boolean checkProgram(int progNumber) {
-    return this.progNumber == progNumber;
-  }
-  
-  /** Return true if a the program version in rpcCall is supported */
-  private boolean checkProgramVersion(int programVersion) {
-    return programVersion >= lowProgVersion
-        && programVersion <= highProgVersion;
-  }
+
+  protected abstract void handleInternal(ChannelHandlerContext ctx, RpcInfo info);

MOV26 MOV26 INS26 INS26 INS26 INS40 UPD40 UPD40 UPD40 INS40 INS40 INS43 INS31 UPD42 MOV42 INS78 UPD83 MOV83 INS39 INS42 MOV44 MOV44 INS43 INS8 UPD83 INS83 UPD39 UPD42 INS44 INS42 UPD43 UPD42 UPD43 UPD42 UPD42 MOV42 INS60 MOV60 MOV25 INS25 MOV60 INS25 INS21 INS43 INS42 INS43 INS42 UPD42 UPD42 INS43 INS59 UPD27 MOV27 INS8 INS39 INS27 INS8 INS32 INS42 INS42 UPD42 MOV42 INS42 INS11 UPD42 INS11 UPD42 INS32 MOV21 INS60 MOV60 INS21 INS60 MOV60 MOV21 MOV41 INS42 MOV32 INS27 INS27 MOV21 INS60 INS60 INS21 MOV21 MOV21 INS60 INS60 MOV21 INS41 INS42 INS42 INS42 INS43 INS32 MOV43 INS32 INS42 INS42 INS43 INS59 INS32 INS43 INS59 UPD43 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS43 INS59 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 INS42 INS14 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS32 MOV42 INS42 INS14 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS14 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS40 INS40 UPD42 MOV42 INS42 INS32 INS43 INS42 INS32 UPD45 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS40 INS40 INS43 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS42 INS32 UPD42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL42 DEL66 DEL66 DEL65 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL14 DEL33 DEL16 DEL7 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL45 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL31 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL32 DEL41 DEL8 DEL25 DEL32 DEL32 DEL38 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL39 DEL42 DEL42 DEL33 DEL27 DEL32 DEL38 DEL27 DEL59 DEL60 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL43 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL40 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL45 DEL27 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL27 DEL41 DEL8