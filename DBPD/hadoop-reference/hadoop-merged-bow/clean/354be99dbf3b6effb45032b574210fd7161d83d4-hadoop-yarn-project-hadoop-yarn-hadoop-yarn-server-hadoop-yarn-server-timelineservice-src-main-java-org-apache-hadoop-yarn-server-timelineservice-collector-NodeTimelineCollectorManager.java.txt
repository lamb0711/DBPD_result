YARN-6133. [ATSv2 Security] Renew delegation token for app automatically if an app collector is active. Contributed by Varun Saxena.

+import java.util.concurrent.Future;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import org.apache.hadoop.util.Time;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+  private ScheduledThreadPoolExecutor tokenRenewalExecutor;
+
+  private long tokenRenewInterval;
+
+  private static final long TIME_BEFORE_RENEW_DATE = 10 * 1000; // 10 seconds.
+
+    tokenRenewInterval = conf.getLong(
+        YarnConfiguration.TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL,
+        YarnConfiguration.DEFAULT_TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL);
+    tokenRenewalExecutor = new ScheduledThreadPoolExecutor(
+        1, new ThreadFactoryBuilder().setNameFormat(
+            "App Collector Token Renewal thread").build());
+    if (tokenRenewalExecutor != null) {
+      tokenRenewalExecutor.shutdownNow();
+    }
+  public long renewTokenForAppCollector(
+      AppLevelTimelineCollector appCollector) throws IOException {
+    if (appCollector.getDelegationTokenForApp() != null) {
+      TimelineDelegationTokenIdentifier identifier =
+          appCollector.getDelegationTokenForApp().decodeIdentifier();
+      return tokenMgrService.renewToken(appCollector.getDelegationTokenForApp(),
+          identifier.getRenewer().toString());
+    } else {
+      LOG.info("Delegation token not available for renewal for app " +
+          appCollector.getTimelineEntityContext().getAppId());
+      return -1;
+    }
+  }
+
+  @VisibleForTesting
-        appCollector.setDelegationTokenForApp(timelineToken);
+        long renewalDelay = (tokenRenewInterval > TIME_BEFORE_RENEW_DATE) ?
+            tokenRenewInterval - TIME_BEFORE_RENEW_DATE : tokenRenewInterval;
+        Future<?> renewalFuture =
+            tokenRenewalExecutor.schedule(new CollectorTokenRenewer(appId),
+                renewalDelay, TimeUnit.MILLISECONDS);
+        appCollector.setDelegationTokenAndFutureForApp(timelineToken,
+            renewalFuture);
-      reportNewCollectorToNM(appId, token);
+      reportNewCollectorInfoToNM(appId, token);
-        cancelTokenForAppCollector((AppLevelTimelineCollector)collector);
+        cancelTokenForAppCollector((AppLevelTimelineCollector) collector);
-  private void reportNewCollectorToNM(ApplicationId appId,
+  private void reportNewCollectorInfoToNM(ApplicationId appId,
+
+  private final class CollectorTokenRenewer implements Runnable {
+    private ApplicationId appId;
+    private CollectorTokenRenewer(ApplicationId applicationId) {
+      appId = applicationId;
+    }
+
+    @Override
+    public void run() {
+      TimelineCollector collector = get(appId);
+      if (collector == null) {
+        LOG.info("Cannot find active collector while renewing token for " +
+            appId);
+        return;
+      }
+      AppLevelTimelineCollector appCollector =
+          (AppLevelTimelineCollector) collector;
+
+      synchronized (collector) {
+        if (!collector.isStopped()) {
+          try {
+            long newExpirationTime = renewTokenForAppCollector(appCollector);
+            if (newExpirationTime > 0) {
+              long renewInterval = newExpirationTime - Time.now();
+              long renewalDelay = (renewInterval > TIME_BEFORE_RENEW_DATE) ?
+                  renewInterval - TIME_BEFORE_RENEW_DATE : renewInterval;
+              LOG.info("Renewed token for " + appId + " with new expiration " +
+                  "timestamp = " + newExpirationTime);
+              Future<?> renewalFuture = tokenRenewalExecutor.schedule(
+                  this, renewalDelay, TimeUnit.MILLISECONDS);
+              appCollector.setRenewalFutureForApp(renewalFuture);
+            }
+          } catch (Exception e) {
+            LOG.warn("Unable to renew token for " + appId);
+          }
+        }
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS55 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS42 INS42 INS42 INS42 INS27 INS21 INS21 INS25 INS42 INS43 INS42 INS42 INS25 INS42 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS34 INS34 INS7 INS7 INS27 INS8 INS42 INS27 INS8 INS8 INS42 INS42 INS43 INS42 INS21 INS42 INS60 INS25 INS60 INS51 INS42 INS32 INS42 INS14 INS42 INS33 INS21 INS32 INS33 INS60 INS41 INS21 INS41 INS42 INS7 INS43 INS59 INS27 INS8 INS43 INS59 INS42 INS8 INS42 INS42 INS40 INS40 INS43 INS34 INS32 INS32 INS42 INS42 INS43 INS59 INS32 INS32 INS38 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS42 INS42 INS11 INS25 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS34 INS60 INS60 UPD42 INS42 INS42 INS32 INS43 INS42 INS38 INS8 INS14 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS39 INS59 INS74 INS59 INS42 INS42 INS27 INS42 INS32 INS54 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS16 INS43 INS76 INS42 INS32 UPD42 INS42 INS45 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS36 INS27 INS42 INS42 INS42 INS42 INS14 INS42 INS40 INS60 INS25 INS44 INS8 INS27 INS42 INS42 INS43 INS42 INS39 INS59 INS27 INS8 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS60 INS60 INS21 INS60 INS21 INS42 INS32 INS42 INS42 INS39 INS59 INS39 INS59 INS32 INS74 INS59 INS32 INS42 INS42 INS27 INS42 INS27 INS42 INS16 INS42 INS42 INS27 INS43 INS76 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS36 INS27 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS52 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS42