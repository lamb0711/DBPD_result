HDDS-1224. Restructure code to validate the response from server in the Read path (#806)



-import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;
+import org.apache.hadoop.hdds.scm.storage.CheckedBiFunction;
-import java.util.stream.Collectors;
-   * @param config -- Ozone Config
+   * @param config   -- Ozone Config
-    this.secConfig =  new SecurityConfig(config);
+    this.secConfig = new SecurityConfig(config);
-   * */
+   */
-   * */
+   */
-    String userName = UserGroupInformation.getCurrentUser()
-        .getShortUserName();
+    String userName = UserGroupInformation.getCurrentUser().getShortUserName();
-    NettyChannelBuilder channelBuilder = NettyChannelBuilder.forAddress(dn
-            .getIpAddress(), port).usePlaintext()
+    NettyChannelBuilder channelBuilder =
+        NettyChannelBuilder.forAddress(dn.getIpAddress(), port).usePlaintext()
-      if (secConfig.isGrpcMutualTlsRequired() && clientCertChainFile != null &&
-          privateKeyFile != null) {
+      if (secConfig.isGrpcMutualTlsRequired() && clientCertChainFile != null
+          && privateKeyFile != null) {
-  public XceiverClientReply sendCommand(
-      ContainerCommandRequestProto request, List<DatanodeDetails> excludeDns)
+  public ContainerCommandResponseProto sendCommand(
+      ContainerCommandRequestProto request, List<CheckedBiFunction> validators)
-    Preconditions.checkState(HddsUtils.isReadOnly(request));
-    return sendCommandWithTraceIDAndRetry(request, excludeDns);
+    try {
+      XceiverClientReply reply;
+      reply = sendCommandWithTraceIDAndRetry(request, validators);
+      ContainerCommandResponseProto responseProto = reply.getResponse().get();
+      return responseProto;
+    } catch (ExecutionException | InterruptedException e) {
+      throw new IOException("Failed to execute command " + request, e);
+    }
-      ContainerCommandRequestProto request, List<DatanodeDetails> excludeDns)
+      ContainerCommandRequestProto request, List<CheckedBiFunction> validators)
-              .setTraceID(TracingUtil.exportCurrentSpan())
-              .build();
-      return sendCommandWithRetry(finalPayload, excludeDns);
+              .setTraceID(TracingUtil.exportCurrentSpan()).build();
+      return sendCommandWithRetry(finalPayload, validators);
-      ContainerCommandRequestProto request, List<DatanodeDetails> excludeDns)
+      ContainerCommandRequestProto request, List<CheckedBiFunction> validators)
+    IOException ioException = null;
-    List<DatanodeDetails> dns = pipeline.getNodes();
-    List<DatanodeDetails> healthyDns =
-        excludeDns != null ? dns.stream().filter(dnId -> {
-          for (DatanodeDetails excludeId : excludeDns) {
-            if (dnId.equals(excludeId)) {
-              return false;
-            }
-          }
-          return true;
-        }).collect(Collectors.toList()) : dns;
-    for (DatanodeDetails dn : healthyDns) {
+    for (DatanodeDetails dn : pipeline.getNodes()) {
-        if (responseProto.getResult() == ContainerProtos.Result.SUCCESS) {
-          break;
+        if (validators != null && !validators.isEmpty()) {
+          for (CheckedBiFunction validator : validators) {
+            validator.apply(request, responseProto);
+          }
-      } catch (ExecutionException | InterruptedException e) {
+        break;
+      } catch (ExecutionException | InterruptedException | IOException e) {
-        if (Status.fromThrowable(e.getCause()).getCode()
-            == Status.UNAUTHENTICATED.getCode()) {
-          throw new SCMSecurityException("Failed to authenticate with "
-              + "GRPC XceiverServer with Ozone block token.");
+        if (!(e instanceof IOException)) {
+          if (Status.fromThrowable(e.getCause()).getCode()
+              == Status.UNAUTHENTICATED.getCode()) {
+            throw new SCMSecurityException("Failed to authenticate with "
+                + "GRPC XceiverServer with Ozone block token.");
+          }
+          ioException = new IOException(e);
+        } else {
+          ioException = (IOException) e;
+        responseProto = null;
-      throw new IOException(
-          "Failed to execute command " + request + " on the pipeline "
-              + pipeline.getId());
+      Preconditions.checkNotNull(ioException);
+      LOG.error("Failed to execute command " + request + " on the pipeline "
+          + pipeline.getId());
+      throw ioException;

MOV26 UPD40 INS43 INS42 UPD74 UPD42 INS54 UPD74 UPD42 UPD74 MOV74 UPD42 UPD66 UPD43 INS8 INS12 UPD43 UPD43 INS43 MOV32 UPD42 INS60 INS21 INS60 INS41 MOV44 INS8 UPD42 UPD42 UPD42 MOV42 UPD42 INS33 INS21 INS21 MOV43 INS59 INS7 INS43 INS59 INS42 INS53 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS14 UPD42 INS10 INS44 INS42 INS42 INS42 INS42 INS42 MOV27 UPD42 MOV42 MOV42 INS42 INS32 INS42 INS43 INS27 INS42 UPD27 INS8 INS84 INS42 INS25 INS21 INS42 INS42 INS42 INS45 INS42 INS27 INS38 INS70 INS43 INS43 INS43 INS38 INS8 INS8 INS7 INS42 INS33 INS32 INS44 INS42 INS8 INS42 INS42 INS42 INS36 MOV25 INS21 INS21 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS21 INS62 INS7 INS7 INS42 INS32 INS42 INS43 INS42 INS14 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS43 INS42 MOV43 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL25 DEL8 DEL70 DEL9 DEL41 DEL8 DEL86 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL16 DEL59 DEL60 DEL42 DEL32 DEL40 DEL10 DEL8 DEL14