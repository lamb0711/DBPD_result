Merge r1415804 through r1419190 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1419193 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_AUDIT_LOGGERS_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.ha.HAServiceProtocol.HAServiceState;
-import org.apache.hadoop.hdfs.server.namenode.ha.ActiveState;
-import org.apache.hadoop.hdfs.server.namenode.ha.StandbyState;
-  private static final void logAuditEvent(UserGroupInformation ugi,
+  private boolean isAuditEnabled() {
+    return !isDefaultAuditLogger || auditLog.isInfoEnabled();
+  }
+
+  private void logAuditEvent(UserGroupInformation ugi,
-  private static final void logAuditEvent(boolean succeeded,
+  private void logAuditEvent(boolean succeeded,
-    final StringBuilder sb = auditBuffer.get();
-    sb.setLength(0);
-    sb.append("allowed=").append(succeeded).append("\t");
-    sb.append("ugi=").append(ugi).append("\t");
-    sb.append("ip=").append(addr).append("\t");
-    sb.append("cmd=").append(cmd).append("\t");
-    sb.append("src=").append(src).append("\t");
-    sb.append("dst=").append(dst).append("\t");
-    if (null == stat) {
-      sb.append("perm=null");
-    } else {
-      sb.append("perm=");
-      sb.append(stat.getOwner()).append(":");
-      sb.append(stat.getGroup()).append(":");
-      sb.append(stat.getPermission());
+    FileStatus status = null;
+    if (stat != null) {
+      Path symlink = stat.isSymlink() ? new Path(stat.getSymlink()) : null;
+      Path path = dst != null ? new Path(dst) : new Path(src);
+      status = new FileStatus(stat.getLen(), stat.isDir(),
+          stat.getReplication(), stat.getBlockSize(), stat.getModificationTime(),
+          stat.getAccessTime(), stat.getPermission(), stat.getOwner(),
+          stat.getGroup(), symlink, path);
-    auditLog.info(sb);
+    for (AuditLogger logger : auditLoggers) {
+      logger.logAuditEvent(succeeded, ugi.toString(), addr,
+          cmd, src, dst, status);
+    }
+  // Tracks whether the default audit logger is the only configured audit
+  // logger; this allows isAuditEnabled() to return false in case the
+  // underlying logger is disabled, and avoid some unnecessary work.
+  private final boolean isDefaultAuditLogger;
+  private final List<AuditLogger> auditLoggers;
-
+      this.auditLoggers = initAuditLoggers(conf);
+      this.isDefaultAuditLogger = auditLoggers.size() == 1 &&
+        auditLoggers.get(0) instanceof DefaultAuditLogger;
+    } catch (RuntimeException re) {
+      LOG.error(getClass().getSimpleName() + " initialization failed.", re);
+      close();
+      throw re;
+  private List<AuditLogger> initAuditLoggers(Configuration conf) {
+    // Initialize the custom access loggers if configured.
+    Collection<String> alClasses = conf.getStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);
+    List<AuditLogger> auditLoggers = Lists.newArrayList();
+    if (alClasses != null && !alClasses.isEmpty()) {
+      for (String className : alClasses) {
+        try {
+          AuditLogger logger;
+          if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {
+            logger = new DefaultAuditLogger();
+          } else {
+            logger = (AuditLogger) Class.forName(className).newInstance();
+          }
+          logger.initialize(conf);
+          auditLoggers.add(logger);
+        } catch (RuntimeException re) {
+          throw re;
+        } catch (Exception e) {
+          throw new RuntimeException(e);
+        }
+      }
+    }
+
+    // Make sure there is at least one logger installed.
+    if (auditLoggers.isEmpty()) {
+      auditLoggers.add(new DefaultAuditLogger());
+    }
+    return auditLoggers;
+  }
+
-  
-    return haContext.getState() instanceof StandbyState;
+
+    return HAServiceState.STANDBY == haContext.getState().getServiceState();
-        + " blocks = " + (totalInodes + totalBlocks) + " total");
+        + " blocks = " + (totalInodes + totalBlocks)
+        + " total filesystem objects");
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-        if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+        if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (isFile && auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (isFile && isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-      if (status && auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (status && isAuditEnabled() && isExternalInvocation()) {
-    if (status && auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (status && isAuditEnabled() && isExternalInvocation()) {
+      //NOTE: yes, this is bad!  it's assuming much lower level behavior
+      //      of rewriting the dst
-    HdfsFileStatus dinfo = dir.getFileInfo(dst, false);
-      unprotectedChangeLease(src, dst, dinfo);     // update lease with new filename
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (isAuditEnabled() && isExternalInvocation()) {
-    HdfsFileStatus dinfo = dir.getFileInfo(dst, false);
-    unprotectedChangeLease(src, dst, dinfo); // update lease with new filename
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (status && auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (status && isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    if (status && auditLog.isInfoEnabled() && isExternalInvocation()) {
+    if (status && isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-    NNHAStatusHeartbeat.State hbState;
-    if (state instanceof ActiveState) {
-      hbState = NNHAStatusHeartbeat.State.ACTIVE;
-    } else if (state instanceof StandbyState) {
-      hbState = NNHAStatusHeartbeat.State.STANDBY;      
-    } else {
-      throw new AssertionError("Invalid state: " + state.getClass());
-    }
-    return new NNHAStatusHeartbeat(hbState,
+    return new NNHAStatusHeartbeat(state.getServiceState(),
-      if (!isPopulatingReplQueues() && !isInStandbyState()) {
+      if (!isPopulatingReplQueues() && shouldPopulateReplQueues()) {
-      return !isInStandbyState() && blockSafe >= blockReplQueueThreshold;
+      return shouldPopulateReplQueues()
+          && blockSafe >= blockReplQueueThreshold;
-    if (isInStandbyState()) {
+    if (!shouldPopulateReplQueues()) {
-    
+
+  private boolean shouldPopulateReplQueues() {
+    if(haContext == null || haContext.getState() == null)
+      return false;
+    return haContext.getState().shouldPopulateReplQueues();
+  }
+
-  void unprotectedChangeLease(String src, String dst, HdfsFileStatus dinfo) {
-    String overwrite;
-    String replaceBy;
+  void unprotectedChangeLease(String src, String dst) {
-
-    boolean destinationExisted = true;
-    if (dinfo == null) {
-      destinationExisted = false;
-    }
-
-    if (destinationExisted && dinfo.isDir()) {
-      Path spath = new Path(src);
-      Path parent = spath.getParent();
-      if (parent.isRoot()) {
-        overwrite = parent.toString();
-      } else {
-        overwrite = parent.toString() + Path.SEPARATOR;
-      }
-      replaceBy = dst + Path.SEPARATOR;
-    } else {
-      overwrite = src;
-      replaceBy = dst;
-    }
-
-    leaseManager.changeLease(src, dst, overwrite, replaceBy);
+    leaseManager.changeLease(src, dst);
-      out.writeInt(leaseManager.countPath()); // write the size
-
-      for (Lease lease : leaseManager.getSortedLeases()) {
-        for(String path : lease.getPaths()) {
-          // verify that path exists in namespace
-          final INodeFileUnderConstruction cons;
-          try {
-            cons = INodeFileUnderConstruction.valueOf(dir.getINode(path), path);
-          } catch (UnresolvedLinkException e) {
-            throw new AssertionError("Lease files should reside on this FS");
-          }
-          FSImageSerialization.writeINodeUnderConstruction(out, cons, path);
-        }
+      Map<String, INodeFileUnderConstruction> nodes =
+          leaseManager.getINodesUnderConstruction();
+      out.writeInt(nodes.size()); // write the size    
+      for (Map.Entry<String, INodeFileUnderConstruction> entry
+           : nodes.entrySet()) {
+        FSImageSerialization.writeINodeUnderConstruction(
+            out, entry.getValue(), entry.getKey());
-    if (auditLog.isInfoEnabled()) {
+    if (isAuditEnabled()) {
+
+  /**
+   * Default AuditLogger implementation; used when no access logger is
+   * defined in the config file. It can also be explicitly listed in the
+   * config file.
+   */
+  private static class DefaultAuditLogger implements AuditLogger {
+
+    @Override
+    public void initialize(Configuration conf) {
+      // Nothing to do.
+    }
+
+    @Override
+    public void logAuditEvent(boolean succeeded, String userName,
+        InetAddress addr, String cmd, String src, String dst,
+        FileStatus status) {
+      if (auditLog.isInfoEnabled()) {
+        final StringBuilder sb = auditBuffer.get();
+        sb.setLength(0);
+        sb.append("allowed=").append(succeeded).append("\t");
+        sb.append("ugi=").append(userName).append("\t");
+        sb.append("ip=").append(addr).append("\t");
+        sb.append("cmd=").append(cmd).append("\t");
+        sb.append("src=").append(src).append("\t");
+        sb.append("dst=").append(dst).append("\t");
+        if (null == status) {
+          sb.append("perm=null");
+        } else {
+          sb.append("perm=");
+          sb.append(status.getOwner()).append(":");
+          sb.append(status.getGroup()).append(":");
+          sb.append(status.getPermission());
+        }
+        auditLog.info(sb);
+      }
+    }
+
+  }
+

MOV26 MOV26 INS26 INS26 MOV31 INS40 INS40 UPD40 UPD40 INS31 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS55 INS83 INS39 INS42 INS8 INS39 INS42 INS44 MOV44 INS44 INS44 INS44 INS44 MOV44 INS83 INS83 INS39 INS59 INS83 INS83 INS74 INS59 INS83 INS74 INS42 INS44 INS8 INS83 MOV43 INS42 INS8 INS83 INS39 INS42 INS8 INS39 INS42 MOV44 MOV44 INS8 MOV29 MOV39 MOV42 MOV44 MOV43 INS8 INS29 INS83 INS83 INS42 INS43 INS31 MOV31 INS41 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS70 INS42 INS43 INS43 UPD42 MOV42 INS43 INS43 INS43 INS42 MOV60 MOV60 INS25 INS25 INS41 MOV60 MOV41 INS25 INS41 MOV6 MOV21 INS51 INS65 UPD42 MOV42 INS78 INS83 INS39 INS42 INS44 INS8 INS78 UPD83 INS44 INS44 INS8 UPD27 MOV27 INS42 INS42 INS42 INS42 UPD43 INS27 INS8 INS44 INS42 INS8 UPD42 MOV42 INS42 INS12 INS42 INS42 INS42 INS74 INS74 INS27 INS8 INS32 INS8 INS42 INS27 INS27 INS8 MOV8 INS38 INS27 INS41 INS32 MOV42 INS8 INS66 INS66 INS66 INS42 INS43 INS42 INS42 MOV43 INS42 INS43 INS42 INS25 INS38 INS42 UPD42 INS33 INS42 INS33 INS60 MOV60 MOV21 INS43 INS42 INS21 INS21 INS21 INS44 INS8 INS43 INS43 UPD42 INS32 INS43 INS43 INS42 INS32 INS27 INS38 INS70 INS42 INS42 INS21 INS40 INS32 INS25 MOV25 INS42 INS32 MOV32 MOV32 MOV32 MOV21 MOV21 INS25 MOV32 MOV21 MOV21 INS32 INS32 INS27 INS27 INS9 INS32 INS42 INS60 INS21 INS70 UPD42 INS42 INS42 INS42 INS32 MOV8 INS42 INS43 INS59 UPD42 MOV42 INS32 INS7 INS7 INS43 INS42 INS21 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV33 INS32 INS44 INS42 INS8 INS32 MOV32 INS42 UPD45 INS27 MOV8 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS27 MOV8 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS33 INS32 INS33 INS42 INS42 INS74 INS59 INS32 MOV44 MOV32 INS8 MOV42 INS42 UPD42 MOV42 INS42 INS16 UPD42 INS16 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS22 INS32 INS22 INS27 INS42 INS32 INS32 INS42 INS42 INS42 MOV43 INS42 INS54 INS42 INS42 INS14 INS32 INS32 MOV32 INS42 INS32 MOV32 INS32 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 MOV43 MOV43 INS42 INS32 INS42 INS42 INS32 INS74 INS42 UPD42 UPD42 MOV21 INS32 INS14 INS33 INS27 INS14 MOV14 INS43 INS32 INS32 INS32 INS32 INS32 INS32 MOV32 MOV32 MOV32 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS27 INS62 INS42 INS42 INS27 INS42 INS42 INS8 INS12 INS12 INS43 INS32 INS42 INS42 UPD42 UPD42 UPD42 MOV32 MOV32 INS42 INS42 UPD42 MOV32 MOV32 MOV32 MOV32 UPD42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS43 INS32 UPD42 INS42 INS42 INS43 INS32 INS42 INS33 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS43 INS32 INS45 MOV60 MOV25 MOV21 INS21 INS44 INS8 INS44 INS8 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS32 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS42 UPD43 INS32 INS32 INS43 INS42 INS53 INS43 INS42 INS53 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS32 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 UPD42 INS14 UPD42 INS11 INS42 INS43 INS43 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 DEL42 DEL83 DEL83 DEL42 DEL40 DEL42 DEL40 DEL42 DEL43 DEL62 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL43 DEL62 DEL8 DEL43 DEL45 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL39 DEL42 DEL9 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL40 DEL27 DEL42 DEL42 DEL40 DEL27 DEL7 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL25 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL32 DEL38 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL39 DEL42 DEL43 DEL42 DEL44 DEL59 DEL60 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL27 DEL8 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL32 DEL83 DEL42 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL8 DEL51 DEL8 DEL31 DEL83 DEL83