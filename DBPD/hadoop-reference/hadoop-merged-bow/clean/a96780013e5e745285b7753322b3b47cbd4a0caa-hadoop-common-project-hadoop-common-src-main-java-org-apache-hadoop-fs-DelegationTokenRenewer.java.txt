HADOOP-9549. WebHdfsFileSystem hangs on close(). Contributed by Daryn Sharp.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481075 13f79535-47bb-0310-9956-ffa450edef68

+    private Token<?> token; 
-      updateRenewalTime();
+      this.token = fs.getRenewToken();
+      updateRenewalTime(renewCycle);
-      return (int)renewalTime ^ (int)(renewalTime >>> 32);
+      return token.hashCode();
-      if (that == null || !(that instanceof RenewAction)) {
+      if (this == that) {
+        return true;
+      } else if (that == null || !(that instanceof RenewAction)) {
-      return compareTo((Delayed)that) == 0;
+      return token.equals(((RenewAction<?>)that).token);
-     * It can only be called when the action is not in the queue.
+     * It can only be called when the action is not in the queue or any
+     * collection because the hashCode may change
-    private void updateRenewalTime() {
-      renewalTime = renewCycle + Time.now();
+    private void updateRenewalTime(long delay) {
+      renewalTime = Time.now() + delay - delay/10;
+     * It can only be called when the action is not in the queue.
-            fs.getRenewToken().renew(fs.getConf());
+            long expires = token.renew(fs.getConf());
+            updateRenewalTime(expires - Time.now());
-              fs.setDelegationToken(tokens[0]);
+              token = tokens[0];
+              updateRenewalTime(renewCycle);
+              fs.setDelegationToken(token);
+    private void cancel() throws IOException, InterruptedException {
+      final T fs = weakFs.get();
+      if (fs != null) {
+        token.cancel(fs.getConf());
+      }
+    }
+
-            + " secs, renewToken=" + fs.getRenewToken();
+            + " secs, renewToken=" + token;
-  /** Wait for 95% of a day between renewals */
-  private static final int RENEW_CYCLE = 24 * 60 * 60 * 950; 
+  /** assumes renew cycle for a token is 24 hours... */
+  private static final long RENEW_CYCLE = 24 * 60 * 60 * 1000; 
-  protected static int renewCycle = RENEW_CYCLE;
+  protected static long renewCycle = RENEW_CYCLE;
+  @VisibleForTesting
+  static synchronized void reset() {
+    if (INSTANCE != null) {
+      INSTANCE.queue.clear();
+      INSTANCE.interrupt();
+      try {
+        INSTANCE.join();
+      } catch (InterruptedException e) {
+        LOG.warn("Failed to reset renewer");
+      } finally {
+        INSTANCE = null;
+      }
+    }
+  }
+  
-  public synchronized <T extends FileSystem & Renewable> void addRenewAction(final T fs) {
-    queue.add(new RenewAction<T>(fs));
-    if (!isAlive()) {
-      start();
+  @SuppressWarnings("static-access")
+  public <T extends FileSystem & Renewable> void addRenewAction(final T fs) {
+    synchronized (this) {
+      if (!isAlive()) {
+        start();
+      }
+    }
+    RenewAction<T> action = new RenewAction<T>(fs);
+    if (action.token != null) {
+      queue.add(action);
+    } else {
+      fs.LOG.error("does not have a token for renewal");
-  public synchronized <T extends FileSystem & Renewable> void removeRenewAction(
+  public <T extends FileSystem & Renewable> void removeRenewAction(
-    for (RenewAction<?> action : queue) {
-      if (action.weakFs.get() == fs) {
-        try {
-          fs.getRenewToken().cancel(fs.getConf());
-        } catch (InterruptedException ie) {
-          LOG.error("Interrupted while canceling token for " + fs.getUri()
-              + "filesystem");
-          if (LOG.isDebugEnabled()) {
-            LOG.debug(ie.getStackTrace());
-          }
+    RenewAction<T> action = new RenewAction<T>(fs);
+    if (queue.remove(action)) {
+      try {
+        action.cancel();
+      } catch (InterruptedException ie) {
+        LOG.error("Interrupted while canceling token for " + fs.getUri()
+            + "filesystem");
+        if (LOG.isDebugEnabled()) {
+          LOG.debug(ie.getStackTrace());
-        queue.remove(action);
-        return;
-        synchronized (this) {
-          action = queue.take();
-          if (action.renew()) {
-            action.updateRenewalTime();
-            queue.add(action);
-          }
+        action = queue.take();
+        if (action.renew()) {
+          queue.add(action);

MOV31 INS31 INS23 INS31 INS31 UPD39 UPD39 INS78 INS83 INS83 INS39 INS42 INS8 INS79 INS8 MOV8 INS83 INS74 INS59 MOV78 MOV83 MOV39 MOV42 INS8 MOV29 INS83 INS39 INS42 INS44 INS8 UPD42 INS43 INS43 INS8 INS42 INS25 INS42 INS45 INS51 INS60 INS25 INS60 INS43 INS76 INS42 INS21 INS41 INS25 INS39 INS42 INS21 INS42 INS42 INS60 INS25 UPD66 UPD34 INS27 INS8 INS52 MOV8 INS74 INS59 INS27 INS8 INS8 INS74 INS59 MOV32 INS42 INS7 INS32 INS27 INS8 MOV25 INS32 UPD66 INS66 INS7 INS66 INS83 INS43 INS59 INS27 INS8 INS42 INS33 INS21 INS21 INS54 INS43 INS43 INS42 MOV14 INS40 INS33 INS21 INS21 INS43 INS43 INS42 INS14 INS22 MOV32 INS42 INS42 INS42 INS52 INS42 INS41 UPD42 MOV42 INS42 INS22 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS32 INS8 INS12 INS8 INS42 INS42 INS32 INS32 INS42 INS42 INS74 INS42 MOV8 INS52 INS42 INS9 INS36 INS42 INS27 INS27 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS21 INS44 INS8 INS21 INS42 INS42 INS42 INS40 INS42 INS45 INS43 INS43 INS11 INS32 INS42 INS42 UPD34 MOV34 INS42 INS42 MOV32 INS32 INS43 INS42 INS21 INS7 INS42 INS42 MOV74 MOV42 INS42 INS42 MOV8 INS42 INS42 INS42 INS32 INS42 INS33 UPD42 MOV42 INS60 INS42 INS42 INS45 UPD42 MOV42 INS39 INS59 INS32 INS42 INS32 INS42 UPD27 MOV27 INS42 INS42 MOV32 UPD42 INS21 INS21 INS7 INS32 INS32 INS42 MOV2 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL11 DEL39 DEL42 DEL27 DEL36 DEL11 DEL27 DEL41 DEL8 DEL31 DEL43 DEL11 DEL32 DEL34 DEL27 DEL42 DEL7 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL32 DEL21 DEL83 DEL40 DEL42 DEL32 DEL42 DEL27 DEL42 DEL32 DEL21 DEL41 DEL42 DEL44 DEL42 DEL70 DEL8 DEL42 DEL42 DEL32 DEL21 DEL52 DEL51 DEL8