HDDS-2244. Use new ReadWrite lock in OzoneManager. (#1589)


+import java.util.function.Consumer;
+  private static final String READ_LOCK = "read";
+  private static final String WRITE_LOCK = "write";
+
+  @Deprecated
+    return lock(resource, resourceName, manager::writeLock, WRITE_LOCK);
+  }
+
+  /**
+   * Acquire read lock on resource.
+   *
+   * For S3_BUCKET_LOCK, VOLUME_LOCK, BUCKET_LOCK type resource, same
+   * thread acquiring lock again is allowed.
+   *
+   * For USER_LOCK, PREFIX_LOCK, S3_SECRET_LOCK type resource, same thread
+   * acquiring lock again is not allowed.
+   *
+   * Special Note for USER_LOCK: Single thread can acquire single user lock/
+   * multi user lock. But not both at the same time.
+   * @param resource - Type of the resource.
+   * @param resources - Resource names on which user want to acquire lock.
+   * For Resource type BUCKET_LOCK, first param should be volume, second param
+   * should be bucket name. For remaining all resource only one param should
+   * be passed.
+   */
+  public boolean acquireReadLock(Resource resource, String... resources) {
+    String resourceName = generateResourceName(resource, resources);
+    return lock(resource, resourceName, manager::readLock, READ_LOCK);
+  }
+
+
+  /**
+   * Acquire write lock on resource.
+   *
+   * For S3_BUCKET_LOCK, VOLUME_LOCK, BUCKET_LOCK type resource, same
+   * thread acquiring lock again is allowed.
+   *
+   * For USER_LOCK, PREFIX_LOCK, S3_SECRET_LOCK type resource, same thread
+   * acquiring lock again is not allowed.
+   *
+   * Special Note for USER_LOCK: Single thread can acquire single user lock/
+   * multi user lock. But not both at the same time.
+   * @param resource - Type of the resource.
+   * @param resources - Resource names on which user want to acquire lock.
+   * For Resource type BUCKET_LOCK, first param should be volume, second param
+   * should be bucket name. For remaining all resource only one param should
+   * be passed.
+   */
+  public boolean acquireWriteLock(Resource resource, String... resources) {
+    String resourceName = generateResourceName(resource, resources);
+    return lock(resource, resourceName, manager::writeLock, WRITE_LOCK);
+  }
+
+  private boolean lock(Resource resource, String resourceName,
+      Consumer<String> lockFn, String lockType) {
-      manager.lock(resourceName);
-      LOG.debug("Acquired {} lock on resource {}", resource.name,
+      lockFn.accept(resourceName);
+      LOG.debug("Acquired {} {} lock on resource {}", lockType, resource.name,
-        manager.lock(firstUser);
+        manager.writeLock(firstUser);
-        manager.lock(firstUser);
+        manager.writeLock(firstUser);
-          manager.lock(secondUser);
+          manager.writeLock(secondUser);
-          manager.unlock(firstUser);
+          manager.writeUnlock(firstUser);
-      LOG.debug("Acquired {} lock on resource {} and {}", resource.name,
+      LOG.debug("Acquired Write {} lock on resource {} and {}", resource.name,
-      manager.unlock(firstUser);
+      manager.writeUnlock(firstUser);
-      manager.unlock(firstUser);
-      manager.unlock(secondUser);
+      manager.writeUnlock(firstUser);
+      manager.writeUnlock(secondUser);
-    LOG.debug("Release {} lock on resource {} and {}", resource.name,
+    LOG.debug("Release Write {} lock on resource {} and {}", resource.name,
-   * Release lock on resource.
+   * Release write lock on resource.
+  public void releaseWriteLock(Resource resource, String... resources) {
+    String resourceName = generateResourceName(resource, resources);
+    unlock(resource, resourceName, manager::writeUnlock, WRITE_LOCK);
+  }
+
+  /**
+   * Release read lock on resource.
+   * @param resource - Type of the resource.
+   * @param resources - Resource names on which user want to acquire lock.
+   * For Resource type BUCKET_LOCK, first param should be volume, second param
+   * should be bucket name. For remaining all resource only one param should
+   * be passed.
+   */
+  public void releaseReadLock(Resource resource, String... resources) {
+    String resourceName = generateResourceName(resource, resources);
+    unlock(resource, resourceName, manager::readUnlock, READ_LOCK);
+  }
+
+  /**
+   * Release write lock on resource.
+   * @param resource - Type of the resource.
+   * @param resources - Resource names on which user want to acquire lock.
+   * For Resource type BUCKET_LOCK, first param should be volume, second param
+   * should be bucket name. For remaining all resource only one param should
+   * be passed.
+   */
+  @Deprecated
+    unlock(resource, resourceName, manager::writeUnlock, WRITE_LOCK);
+  }
+
+  private void unlock(Resource resource, String resourceName,
+      Consumer<String> lockFn, String lockType) {
-    manager.unlock(resourceName);
+    lockFn.accept(resourceName);
-    LOG.debug("Release {}, lock on resource {}", resource.name,
-        resource.name, resourceName);
+    LOG.debug("Release {} {}, lock on resource {}", lockType, resource.name,
+        resourceName);
-

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV29 INS78 INS83 INS39 INS42 MOV44 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 UPD42 INS44 INS44 INS44 INS44 UPD42 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 MOV60 INS41 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS41 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS41 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS21 INS21 MOV21 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS43 INS43 INS42 UPD66 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS90 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS90 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS90 INS42 INS42 INS42 UPD45 MOV42 INS42 MOV42 INS90 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS90 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS90 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD45 INS42 UPD45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL40 DEL40 DEL32 DEL21