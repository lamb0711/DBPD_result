YARN-5538. Apply SLIDER-875 to yarn-native-services. Contributed by Billie Rinaldi

+import org.apache.slider.providers.agent.application.metadata.CommandOrder;
+import java.util.Map.Entry;
+import java.util.regex.Pattern;
+import static org.apache.slider.api.RoleKeys.ROLE_PREFIX;
-  private volatile Metainfo metaInfo = null;
+  private volatile Map<String, MetainfoHolder> metaInfoMap = new HashMap<>();
-  private ComponentCommandOrder commandOrder = null;
+  private ComponentCommandOrder commandOrder = new ComponentCommandOrder();
+  private static class MetainfoHolder {
+    Metainfo metaInfo;
+    private Map<String, DefaultConfig> defaultConfigs = null;
+
+    public MetainfoHolder(Metainfo metaInfo,
+        Map<String, DefaultConfig> defaultConfigs) {
+      this.metaInfo = metaInfo;
+      this.defaultConfigs = defaultConfigs;
+    }
+  }
+
-      Component componentDef = getMetaInfo().getApplicationComponent(name);
+      Component componentDef = getApplicationComponent(name);
-        throw new BadConfigException(
-            "Component %s is not a member of application.", name);
+        // component member is validated elsewhere, so we don't need to throw
+        // an exception here
+        continue;
-                             SliderFileSystem fileSystem) throws IOException, SliderException {
-    String appDef = SliderUtils.getApplicationDefinitionPath(instanceDefinition
-        .getAppConfOperations());
+                             SliderFileSystem fileSystem,
+                             String roleGroup)
+      throws IOException, SliderException {
+    String mapKey = instanceDefinition.getAppConfOperations()
+        .getComponentOpt(roleGroup, ROLE_PREFIX, DEFAULT_METAINFO_MAP_KEY);
+    String appDef = SliderUtils.getApplicationDefinitionPath(
+        instanceDefinition.getAppConfOperations(), roleGroup);
+    MapOperations component = null;
+    if (roleGroup != null) {
+      component = instanceDefinition.getAppConfOperations().getComponent(roleGroup);
+    }
-    if (metaInfo == null) {
+    MetainfoHolder metaInfoHolder = metaInfoMap.get(mapKey);
+    if (metaInfoHolder == null) {
-        if (metaInfo == null) {
+        if (this.fileSystem == null) {
+        }
+        metaInfoHolder = metaInfoMap.get(mapKey);
+        if (metaInfoHolder == null) {
-          metaInfo = getApplicationMetainfo(fileSystem, appDef, false);
+          Metainfo metaInfo = getApplicationMetainfo(fileSystem, appDef, false);
-          commandOrder = new ComponentCommandOrder(metaInfo.getApplication().getCommandOrders());
-          defaultConfigs = initializeDefaultConfigs(fileSystem, appDef, metaInfo);
+          List<CommandOrder> commandOrders = metaInfo.getApplication()
+              .getCommandOrders();
+          if (!DEFAULT_METAINFO_MAP_KEY.equals(mapKey)) {
+            for (Component comp : metaInfo.getApplication().getComponents()) {
+              comp.setName(mapKey + comp.getName());
+              log.info("Modifying external metainfo component name to {}",
+                  comp.getName());
+            }
+            for (CommandOrder co : commandOrders) {
+              log.info("Adding prefix {} to command order {}",
+                  mapKey, co);
+              co.setCommand(mapKey + co.getCommand());
+              co.setRequires(mapKey + co.getRequires());
+            }
+          }
+          log.debug("Merging command orders {} for {}", commandOrders,
+              roleGroup);
+          commandOrder.mergeCommandOrders(commandOrders,
+              instanceDefinition.getResourceOperations());
+          Map<String, DefaultConfig> defaultConfigs =
+              initializeDefaultConfigs(fileSystem, appDef, metaInfo);
+          metaInfoMap.put(mapKey, new MetainfoHolder(metaInfo, defaultConfigs));
+          if (component != null) {
+            addonAppDefString = component.getOption(AgentKeys.ADDONS, addonAppDefString);
+          }
+              if (component != null) {
+                addonAppDefPath = component.getOption(addonAppDef, addonAppDefPath);
+              }
-      AggregateConf instanceDefinition, SliderFileSystem fileSystem)
+      AggregateConf instanceDefinition, SliderFileSystem fileSystem,
+      String roleGroup)
-    buildMetainfo(instanceDefinition, fileSystem);
+    buildMetainfo(instanceDefinition, fileSystem, roleGroup);
-        .getAppConfOperations());
+        .getAppConfOperations(), roleGroup);
-    initializeApplicationConfiguration(instanceDefinition, fileSystem);
+    initializeApplicationConfiguration(instanceDefinition, fileSystem, roleGroup);
-    for (Package pkg : getMetaInfo().getApplication().getPackages()) {
+    for (Package pkg : getMetaInfo(roleGroup).getApplication().getPackages()) {
-      localizeConfigFiles(launcher, roleName, roleGroup, getMetaInfo(),
+      localizeConfigFiles(launcher, roleName, roleGroup, getMetaInfo(roleGroup),
-                                   roleName,
+                                   roleGroup,
+    // substitute CLUSTER_NAME into credentials
+    Map<String,List<String>> newcred = new HashMap<>();
+    for (Entry<String,List<String>> entry : instanceDefinition.getAppConf().credentials.entrySet()) {
+      List<String> resultList = new ArrayList<>();
+      for (String v : entry.getValue()) {
+        resultList.add(v.replaceAll(Pattern.quote("${CLUSTER_NAME}"),
+            clusterName).replaceAll(Pattern.quote("${CLUSTER}"),
+            clusterName));
+      }
+      newcred.put(entry.getKey().replaceAll(Pattern.quote("${CLUSTER_NAME}"),
+          clusterName).replaceAll(Pattern.quote("${CLUSTER}"),
+          clusterName),
+          resultList);
+    }
+    instanceDefinition.getAppConf().credentials = newcred;
+
-        String label = getContainerLabel(container, roleName, role.group);
+        String roleGroup = role.group;
+        String label = getContainerLabel(container, roleName, roleGroup);
-            new ComponentInstanceState(roleName, container.getId(),
+            new ComponentInstanceState(roleGroup, container.getId(),
-    List<ComponentCommand> commands = getMetaInfo().getApplicationComponent(roleGroup).getCommands();
+    List<ComponentCommand> commands = getApplicationComponent(roleGroup).getCommands();
-    String type = getMetaInfo().getApplicationComponent(roleGroup).getType();
+    String type = getApplicationComponent(roleGroup).getType();
-    String type = getMetaInfo().getApplicationComponent(roleGroup).getType();
+    String type = getApplicationComponent(roleGroup).getType();
-    for (ConfigFile configFile : getMetaInfo()
-        .getComponentConfigFiles(client.getName())) {
+    for (ConfigFile configFile : getMetaInfo().getComponentConfigFiles(client.getName())) {
-          client.getName());
+          client.getName(), client.getName());
-            tokens, null, client.getName());
+            tokens, null, client.getName(), client.getName());
-    for (ConfigFile configFile : getMetaInfo()
-        .getComponentConfigFiles(client.getName())) {
+    for (ConfigFile configFile : getMetaInfo().getComponentConfigFiles(client.getName())) {
-  @VisibleForTesting
-    return this.metaInfo;
+    return getMetaInfo(null);
+  }
+
+  @VisibleForTesting
+  protected Metainfo getMetaInfo(String roleGroup) {
+    String mapKey = DEFAULT_METAINFO_MAP_KEY;
+    if (roleGroup != null) {
+      ConfTreeOperations appConf = getAmState().getAppConfSnapshot();
+      mapKey = appConf.getComponentOpt(roleGroup, ROLE_PREFIX,
+          DEFAULT_METAINFO_MAP_KEY);
+    }
+    MetainfoHolder mh = this.metaInfoMap.get(mapKey);
+    if (mh == null) {
+      return null;
+    }
+    return mh.metaInfo;
-  protected Map<String, DefaultConfig> getDefaultConfigs() {
-    return defaultConfigs;
+  protected Map<String, DefaultConfig> getDefaultConfigs(String roleGroup) {
+    ConfTreeOperations appConf = getAmState().getAppConfSnapshot();
+    String mapKey = appConf.getComponentOpt(roleGroup, ROLE_PREFIX,
+        DEFAULT_METAINFO_MAP_KEY);
+    return metaInfoMap.get(mapKey).defaultConfigs;
-          Application application = getMetaInfo().getApplication();
+          Application application = getMetaInfo(componentGroup).getApplication();
-          if ((!canAnyMasterPublishConfig() || canPublishConfig(componentGroup)) &&
+          if ((!canAnyMasterPublishConfig(componentGroup) || canPublishConfig(componentGroup)) &&
-    Application application = getMetaInfo().getApplication();
+    Application application = getMetaInfo(componentGroup).getApplication();
-    List<ExportGroup> appExportGroups = getMetaInfo().getApplication().getExportGroups();
-    Component component = getMetaInfo().getApplicationComponent(compGroup);
+    List<ExportGroup> appExportGroups = getMetaInfo(compGroup).getApplication().getExportGroups();
+    Component component = getApplicationComponent(compGroup);
-    return getMetaInfo().getApplicationComponent(roleGroup);
+    Metainfo metainfo = getMetaInfo(roleGroup);
+    if (metainfo == null) {
+      return null;
+    }
+    return metainfo.getApplicationComponent(roleGroup);
-  protected boolean canAnyMasterPublishConfig() {
+  protected boolean canAnyMasterPublishConfig(String roleGroup) {
-      Application application = getMetaInfo().getApplication();
+      Application application = getMetaInfo(roleGroup).getApplication();
-    hostLevelParams.put(PACKAGE_LIST, getPackageList());
+    hostLevelParams.put(PACKAGE_LIST, getPackageList(roleGroup));
-    hostLevelParams.put(PACKAGE_LIST, getPackageList());
+    hostLevelParams.put(PACKAGE_LIST, getPackageList(roleGroup));
-    cmd.addContainerDetails(roleGroup, getMetaInfo());
+    cmd.addContainerDetails(roleGroup, getMetaInfo(roleGroup));
-  private String getPackageList() {
-    return getPackageListFromApplication(getMetaInfo().getApplication());
+  private String getPackageList(String roleGroup) {
+    return getPackageListFromApplication(getMetaInfo(roleGroup).getApplication());
-    String containerName = getMetaInfo().getApplicationComponent(roleGroup)
+    String containerName = getApplicationComponent(roleGroup)
-    cmd.addContainerDetails(roleGroup, getMetaInfo());
+    cmd.addContainerDetails(roleGroup, getMetaInfo(roleGroup));
-    List<DockerContainer> containers = getMetaInfo().getApplicationComponent(
+    List<DockerContainer> containers = getApplicationComponent(
-                            configurations, tokens, containerId, roleName);
+                            configurations, tokens, containerId, roleName,
+                            roleGroup);
-            configurations, tokens, containerId, roleName);
+            configurations, tokens, containerId, roleName, roleGroup);
+    String prefix = appConf.getComponentOpt(componentGroup, ROLE_PREFIX,
+        null);
+    String dataDirSuffix = "";
+    if (prefix == null) {
+      prefix = "";
+    } else {
+      dataDirSuffix = "_" + SliderUtils.trimPrefix(prefix);
+    }
-        .getMandatoryOption(InternalKeys.INTERNAL_DATA_DIR_PATH));
+        .getMandatoryOption(InternalKeys.INTERNAL_DATA_DIR_PATH) + dataDirSuffix);
+    tokens.put("${COMPONENT_NAME.lc}", componentName.toLowerCase());
+    tokens.put("${COMPONENT_PREFIX}", prefix);
+    tokens.put("${COMPONENT_PREFIX.lc}", prefix.toLowerCase());
+    tokens.put("${CLUSTER_NAME}", getClusterName());
+    tokens.put("${CLUSTER_NAME.lc}", getClusterName().toLowerCase());
+    tokens.put("${APP_NAME}", getClusterName());
+    tokens.put("${APP_NAME.lc}", getClusterName().toLowerCase());
+    tokens.put("${APP_COMPONENT_NAME}", componentName);
+    tokens.put("${APP_COMPONENT_NAME.lc}", componentName.toLowerCase());
-    List<ConfigFile> configFiles = getMetaInfo().getApplication().getConfigFiles();
+    List<ConfigFile> configFiles = getMetaInfo(roleGroup).getApplication().getConfigFiles();
-    for (Component component : getMetaInfo().getApplication().getComponents()) {
+    for (Component component : getMetaInfo(roleGroup).getApplication().getComponents()) {
-                                     String roleName) {
+                                     String roleName, String roleGroup) {
-    if (getDefaultConfigs().containsKey(configName)) {
+    if (getDefaultConfigs(roleGroup).containsKey(configName)) {
-      for (PropertyInfo defaultConfigProp : getDefaultConfigs().get(configName).getPropertyInfos()) {
+      for (PropertyInfo defaultConfigProp : getDefaultConfigs(roleGroup).get(configName).getPropertyInfos()) {

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS55 INS31 INS74 INS83 INS83 INS42 INS23 INS23 INS31 INS44 INS44 MOV43 MOV78 INS83 MOV43 INS42 INS44 INS8 INS44 INS44 INS44 INS44 INS43 INS43 INS43 UPD42 INS14 INS14 INS43 INS59 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS8 INS43 INS42 INS60 INS60 INS25 INS60 INS43 INS42 INS60 INS70 INS21 INS43 INS42 INS60 INS25 INS60 INS25 INS41 INS43 INS42 INS60 INS60 INS60 INS25 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS43 INS42 INS42 INS42 INS42 INS74 MOV43 INS42 INS42 INS43 INS43 INS43 INS42 INS33 INS43 INS42 INS74 INS42 INS21 INS21 INS42 MOV43 INS59 INS43 INS43 INS59 INS27 INS8 INS43 INS59 INS42 INS74 INS59 INS44 INS32 INS8 INS7 MOV43 MOV43 INS32 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS40 INS42 INS43 INS59 INS43 INS59 INS22 MOV43 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS7 INS7 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS42 INS32 UPD42 INS42 INS42 INS43 INS43 INS74 INS42 INS14 INS74 INS42 INS22 INS42 INS60 INS70 INS21 INS22 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS33 INS60 INS21 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS41 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS33 INS21 INS21 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 MOV22 INS42 INS22 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS43 INS43 INS74 INS43 INS43 INS74 INS32 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS32 INS42 INS43 INS59 INS7 INS22 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS7 INS7 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS18 INS42 INS42 INS42 INS32 INS25 INS21 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS32 INS42 INS42 INS32 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS32 INS42 INS32 INS42 MOV43 INS59 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS22 INS33 MOV21 INS42 INS32 UPD42 INS60 INS60 INS25 INS21 INS21 INS60 INS21 INS25 INS43 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS38 INS8 INS32 INS32 INS74 INS59 INS32 INS27 INS8 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 UPD42 INS42 INS42 MOV43 INS42 INS42 MOV32 INS43 INS43 INS42 MOV32 INS32 INS70 INS70 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS42 MOV32 INS42 INS42 INS42 INS14 INS42 INS33 MOV21 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS44 INS32 INS8 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS32 INS42 INS21 MOV21 INS43 INS42 INS21 INS21 INS21 INS42 UPD42 INS32 INS25 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS40 INS42 INS27 INS8 INS42 INS42 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL33 DEL33 DEL42 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL42 DEL7 DEL42 DEL14 DEL7 DEL21 DEL40 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32