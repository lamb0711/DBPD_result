YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)

+  public static final Set<NodeLabel> EMPTY_NODELABEL_SET = Collections
+      .unmodifiableSet(new HashSet<NodeLabel>(0));
+    Map<NodeId, Set<String>> nodeToLabels =
+        generateNodeLabelsInfoPerNode(String.class);
+    return nodeToLabels;
+  }
+
+  /**
+   * Get mapping of nodes to label info
+   *
+   * @return nodes to labels map
+   */
+  public Map<NodeId, Set<NodeLabel>> getNodeLabelsInfo() {
+    Map<NodeId, Set<NodeLabel>> nodeToLabels =
+        generateNodeLabelsInfoPerNode(NodeLabel.class);
+    return nodeToLabels;
+  }
+
+  @SuppressWarnings("unchecked")
+  private <T> Map<NodeId, Set<T>> generateNodeLabelsInfoPerNode(Class<T> type) {
-      Map<NodeId, Set<String>> nodeToLabels =
-          new HashMap<NodeId, Set<String>>();
+      Map<NodeId, Set<T>> nodeToLabels = new HashMap<>();
-          Set<String> nodeLabels = getLabelsByNode(nodeId);
-          if (nodeLabels == null || nodeLabels.isEmpty()) {
-            continue;
+          if (type.isAssignableFrom(String.class)) {
+            Set<String> nodeLabels = getLabelsByNode(nodeId);
+            if (nodeLabels == null || nodeLabels.isEmpty()) {
+              continue;
+            }
+            nodeToLabels.put(nodeId, (Set<T>) nodeLabels);
+          } else {
+            Set<NodeLabel> nodeLabels = getLabelsInfoByNode(nodeId);
+            if (nodeLabels == null || nodeLabels.isEmpty()) {
+              continue;
+            }
+            nodeToLabels.put(nodeId, (Set<T>) nodeLabels);
-          nodeToLabels.put(nodeId, nodeLabels);
-          nodeToLabels
-              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);
+          if (type.isAssignableFrom(String.class)) {
+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),
+                (Set<T>) host.labels);
+          } else {
+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),
+                (Set<T>) createNodeLabelFromLabelNames(host.labels));
+          }
+
-      Map<String, Set<NodeId>> labelsToNodes =
-          new HashMap<String, Set<NodeId>>();
-      for (String label : labels) {
-        if(label.equals(NO_LABEL)) {
-          continue;
-        }
-        RMNodeLabel nodeLabelInfo = labelCollections.get(label);
-        if(nodeLabelInfo != null) {
-          Set<NodeId> nodeIds = nodeLabelInfo.getAssociatedNodeIds();
-          if (!nodeIds.isEmpty()) {
-            labelsToNodes.put(label, nodeIds);
-          }
-        } else {
-          LOG.warn("getLabelsToNodes : Label [" + label + "] cannot be found");
-        }
-      }      
+      Map<String, Set<NodeId>> labelsToNodes = getLabelsToNodesMapping(labels,
+          String.class);
+
+  /**
+   * Get mapping of labels to nodes for all the labels.
+   *
+   * @return labels to nodes map
+   */
+  public Map<NodeLabel, Set<NodeId>> getLabelsInfoToNodes() {
+    try {
+      readLock.lock();
+      return getLabelsInfoToNodes(labelCollections.keySet());
+    } finally {
+      readLock.unlock();
+    }
+  }
+
+  /**
+   * Get mapping of labels info to nodes for specified set of labels.
+   *
+   * @param nodelabels
+   *          set of nodelabels for which labels to nodes mapping will be
+   *          returned.
+   * @return labels to nodes map
+   */
+  public Map<NodeLabel, Set<NodeId>> getLabelsInfoToNodes(Set<String> labels) {
+    try {
+      readLock.lock();
+      Map<NodeLabel, Set<NodeId>> labelsToNodes = getLabelsToNodesMapping(
+          labels, NodeLabel.class);
+      return Collections.unmodifiableMap(labelsToNodes);
+    } finally {
+      readLock.unlock();
+    }
+  }
+
+  private <T> Map<T, Set<NodeId>> getLabelsToNodesMapping(Set<String> labels,
+      Class<T> type) {
+    Map<T, Set<NodeId>> labelsToNodes = new HashMap<T, Set<NodeId>>();
+    for (String label : labels) {
+      if (label.equals(NO_LABEL)) {
+        continue;
+      }
+      RMNodeLabel nodeLabelInfo = labelCollections.get(label);
+      if (nodeLabelInfo != null) {
+        Set<NodeId> nodeIds = nodeLabelInfo.getAssociatedNodeIds();
+        if (!nodeIds.isEmpty()) {
+          if (type.isAssignableFrom(String.class)) {
+            labelsToNodes.put(type.cast(label), nodeIds);
+          } else {
+            labelsToNodes.put(type.cast(nodeLabelInfo.getNodeLabel()), nodeIds);
+          }
+        }
+      } else {
+        LOG.warn("getLabelsToNodes : Label [" + label + "] cannot be found");
+      }
+    }
+    return labelsToNodes;
+  }
+
+  private Set<NodeLabel> getLabelsInfoByNode(NodeId nodeId) {
+    Set<String> labels = getLabelsByNode(nodeId, nodeCollections);
+    if (labels.isEmpty()) {
+      return EMPTY_NODELABEL_SET;
+    }
+    Set<NodeLabel> nodeLabels = createNodeLabelFromLabelNames(labels);
+    return nodeLabels;
+  }
+
+  private Set<NodeLabel> createNodeLabelFromLabelNames(Set<String> labels) {
+    Set<NodeLabel> nodeLabels = new HashSet<NodeLabel>();
+    for (String label : labels) {
+      if (label.equals(NO_LABEL)) {
+        continue;
+      }
+      RMNodeLabel rmLabel = labelCollections.get(label);
+      if (rmLabel == null) {
+        continue;
+      }
+      nodeLabels.add(rmLabel.getNodeLabel());
+    }
+    return nodeLabels;
+  }
+

INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS74 INS59 MOV29 INS83 MOV74 INS42 INS8 INS29 INS83 INS74 INS42 INS8 INS79 UPD83 INS73 INS74 UPD42 INS44 MOV29 INS83 MOV74 INS42 INS44 INS8 INS29 INS83 UPD74 MOV74 INS42 INS8 INS29 INS83 INS74 INS42 INS44 INS8 UPD83 INS73 INS74 UPD42 INS44 MOV8 INS83 INS74 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS42 INS32 MOV60 INS41 INS65 INS65 INS43 MOV43 INS74 INS60 INS41 INS42 INS45 INS42 INS43 INS43 INS74 INS74 INS42 INS74 INS42 INS54 INS65 INS65 UPD43 UPD43 INS54 INS65 INS65 INS65 INS43 INS43 INS74 INS74 INS42 INS54 INS42 INS43 INS43 INS74 INS74 INS42 INS60 INS41 INS43 INS43 INS43 INS42 INS60 INS25 INS60 INS41 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS42 INS42 INS42 INS42 INS14 INS42 INS66 INS66 INS42 INS43 INS43 INS74 INS59 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS8 MOV8 INS66 INS66 UPD42 UPD42 INS8 INS8 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS43 INS43 INS43 INS43 INS8 INS8 INS42 INS42 INS43 INS43 INS43 INS43 INS74 INS59 INS42 INS42 INS42 INS42 MOV74 INS59 INS32 INS8 INS74 INS59 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS74 INS34 INS32 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS42 INS42 INS60 INS42 INS42 MOV21 MOV60 MOV41 INS21 INS41 INS21 INS42 INS42 INS42 INS42 INS21 INS60 INS41 INS21 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS14 INS42 INS32 INS42 INS42 INS41 INS43 INS43 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS60 INS25 INS21 INS43 INS43 INS42 INS57 INS42 INS42 INS43 INS43 INS42 INS57 INS74 INS59 INS32 INS32 INS32 INS32 INS74 INS59 INS32 INS32 INS42 INS42 INS43 INS43 INS74 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS14 INS25 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS43 INS74 MOV60 INS25 INS43 INS43 INS42 INS42 INS42 INS18 INS42 INS42 INS32 INS42 INS33 INS18 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS8 MOV38 INS8 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS57 INS42 INS43 INS43 MOV38 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS25 MOV25 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS32 MOV8 INS8 INS32 INS8 INS42 INS42 INS32 INS8 INS42 INS42 INS57 INS60 INS25 INS21 INS42 INS42 INS57 INS21 INS42 INS42 INS57 INS21 INS43 INS74 INS59 INS27 INS8 INS32 INS43 INS32 INS43 INS32 INS42 INS11 INS43 INS43 INS42 INS32 INS27 INS32 INS18 INS42 INS42 INS42 INS11 INS42 INS11 INS42 INS42 INS32 INS11 INS42 INS32 INS42 INS42 INS32 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS74 INS42 INS74 INS40 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 MOV42 INS42 INS42 INS32 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL74 DEL14 DEL42 DEL40 DEL14 DEL54 DEL8