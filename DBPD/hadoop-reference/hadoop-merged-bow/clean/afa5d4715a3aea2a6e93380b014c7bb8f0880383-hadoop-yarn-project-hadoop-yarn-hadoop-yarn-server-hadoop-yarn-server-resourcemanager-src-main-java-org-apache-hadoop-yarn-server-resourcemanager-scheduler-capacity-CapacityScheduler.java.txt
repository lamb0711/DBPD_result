YARN-3293. Track and display capacity scheduler health metrics in web
UI. Contributed by Varun Vasudev

+import org.apache.hadoop.util.Time;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.NodeType;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerHealth;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.AssignmentInformation;
-  
+  private SchedulerHealth schedulerHealth = new SchedulerHealth();
+  long lastNodeUpdateTime;
+    Resource releaseResources = Resource.newInstance(0, 0);
+
+    int releasedContainers = 0;
+      RMContainer container = getRMContainer(containerId);
-      completedContainer(getRMContainer(containerId), 
-          completedContainer, RMContainerEventType.FINISHED);
+      completedContainer(container, completedContainer,
+        RMContainerEventType.FINISHED);
+      if (container != null) {
+        releasedContainers++;
+        Resource rs = container.getAllocatedResource();
+        if (rs != null) {
+          Resources.addTo(releaseResources, rs);
+        }
+        rs = container.getReservedResource();
+        if (rs != null) {
+          Resources.addTo(releaseResources, rs);
+        }
+      }
+    schedulerHealth.updateSchedulerReleaseDetails(lastNodeUpdateTime,
+      releaseResources);
+    schedulerHealth.updateSchedulerReleaseCounts(releasedContainers);
+
+  private void updateSchedulerHealth(long now, FiCaSchedulerNode node,
+      CSAssignment assignment) {
+
+    NodeId nodeId = node.getNodeID();
+    List<AssignmentInformation.AssignmentDetails> allocations =
+        assignment.getAssignmentInformation().getAllocationDetails();
+    List<AssignmentInformation.AssignmentDetails> reservations =
+        assignment.getAssignmentInformation().getReservationDetails();
+    if (!allocations.isEmpty()) {
+      ContainerId allocatedContainerId =
+          allocations.get(allocations.size() - 1).containerId;
+      String allocatedQueue = allocations.get(allocations.size() - 1).queue;
+      schedulerHealth.updateAllocation(now, nodeId, allocatedContainerId,
+        allocatedQueue);
+    }
+    if (!reservations.isEmpty()) {
+      ContainerId reservedContainerId =
+          reservations.get(reservations.size() - 1).containerId;
+      String reservedQueue = reservations.get(reservations.size() - 1).queue;
+      schedulerHealth.updateReservation(now, nodeId, reservedContainerId,
+        reservedQueue);
+    }
+    schedulerHealth.updateSchedulerReservationCounts(assignment
+      .getAssignmentInformation().getNumReservations());
+    schedulerHealth.updateSchedulerAllocationCounts(assignment
+      .getAssignmentInformation().getNumAllocations());
+    schedulerHealth.updateSchedulerRunDetails(now, assignment
+      .getAssignmentInformation().getAllocated(), assignment
+      .getAssignmentInformation().getReserved());
+ }
+
+    // reset allocation and reservation stats before we start doing any work
+    updateSchedulerHealth(lastNodeUpdateTime, node,
+      new CSAssignment(Resources.none(), NodeType.NODE_LOCAL));
+
+    CSAssignment assignment;
-      CSAssignment assignment =
-          queue.assignContainers(
+      assignment = queue.assignContainers(
-      
+      if (assignment.isFulfilledReservation()) {
+        CSAssignment tmp =
+            new CSAssignment(reservedContainer.getReservedResource(),
+              assignment.getType());
+        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),
+          reservedContainer.getReservedResource());
+        tmp.getAssignmentInformation().addAllocationDetails(
+          reservedContainer.getContainerId(), queue.getQueuePath());
+        tmp.getAssignmentInformation().incrAllocations();
+        updateSchedulerHealth(lastNodeUpdateTime, node, tmp);
+        schedulerHealth.updateSchedulerFulfilledReservationCounts(1);
+      }
+
-        root.assignContainers(
+        assignment = root.assignContainers(
+        updateSchedulerHealth(lastNodeUpdateTime, node, assignment);
+      setLastNodeUpdateTime(Time.now());
+    if (containerStatus.getExitStatus() == ContainerExitStatus.PREEMPTED) {
+      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),
+        container.getId(), queue.getQueuePath());
+      schedulerHealth.updateSchedulerPreemptionCounts(1);
+    } else {
+      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),
+        container.getId(), queue.getQueuePath());
+    }
+
+  public SchedulerHealth getSchedulerHealth() {
+    return this.schedulerHealth;
+  }
+
+  private synchronized void setLastNodeUpdateTime(long time) {
+    this.lastNodeUpdateTime = time;
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS39 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS14 INS42 INS60 INS60 INS21 INS21 INS39 INS42 INS43 INS42 MOV43 INS42 INS60 INS60 INS60 INS25 INS25 INS21 INS21 INS21 INS21 INS60 INS25 INS42 INS41 INS39 INS42 INS21 INS43 INS43 INS59 INS39 INS59 INS32 INS32 INS42 INS43 INS59 INS74 INS59 INS74 INS59 INS38 INS8 INS38 INS8 INS32 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS8 INS22 INS7 INS42 INS42 INS42 INS32 INS42 INS34 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS32 INS60 INS60 INS21 INS32 INS60 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS21 INS25 INS21 INS32 INS40 INS21 INS21 INS21 INS52 INS42 INS22 INS42 INS42 INS42 INS34 INS34 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS43 INS32 INS40 INS7 INS32 INS8 INS32 INS42 INS42 INS32 INS32 INS32 INS52 INS42 INS42 INS42 MOV32 INS42 INS42 INS33 INS21 INS60 INS25 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 MOV60 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS32 INS32 INS37 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS43 INS32 INS32 INS32 INS32 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS34 INS32 INS34 INS32 INS34 INS32 INS34 INS43 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42