HDDS-1128. Create stateful manager class for the pipeline creation scheduling.

Signed-off-by: Nanda kumar <nanda@apache.org>

-import org.apache.hadoop.hdds.protocol.proto.HddsProtos;
-import org.apache.hadoop.ozone.OzoneConfigKeys;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
-public final class RatisPipelineUtils {
-
-  private static AtomicBoolean isPipelineCreatorRunning =
-      new AtomicBoolean(false);
+final class RatisPipelineUtils {
-   * @param pipelineManager - SCM pipeline manager
-  public static void destroyPipeline(PipelineManager pipelineManager,
-      Pipeline pipeline, Configuration ozoneConf) throws IOException {
+  static void destroyPipeline(Pipeline pipeline, Configuration ozoneConf) {
-    // remove the pipeline from the pipeline manager
-    pipelineManager.removePipeline(pipeline.getId());
-    triggerPipelineCreation(pipelineManager, ozoneConf, 0);
-  }
-
-  /**
-   * Finalizes pipeline in the SCM. Removes pipeline and sends ratis command to
-   * destroy pipeline on the datanodes immediately or after timeout based on the
-   * value of onTimeout parameter.
-   *
-   * @param pipelineManager - SCM pipeline manager
-   * @param pipeline        - Pipeline to be destroyed
-   * @param ozoneConf       - Ozone Configuration
-   * @param onTimeout       - if true pipeline is removed and destroyed on
-   *                        datanodes after timeout
-   * @throws IOException
-   */
-  public static void finalizeAndDestroyPipeline(PipelineManager pipelineManager,
-      Pipeline pipeline, Configuration ozoneConf, boolean onTimeout)
-      throws IOException {
-    final RaftGroup group = RatisHelper.newRaftGroup(pipeline);
-    LOG.info("destroying pipeline:{} with {}", pipeline.getId(), group);
-    pipelineManager.finalizePipeline(pipeline.getId());
-    if (onTimeout) {
-      long pipelineDestroyTimeoutInMillis = ozoneConf
-          .getTimeDuration(ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT,
-              ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT_DEFAULT,
-              TimeUnit.MILLISECONDS);
-      RatisPipelineProvider.getScheduler()
-          .schedule(() -> destroyPipeline(pipelineManager, pipeline, ozoneConf),
-              pipelineDestroyTimeoutInMillis, TimeUnit.MILLISECONDS, LOG, String
-                  .format("Destroy pipeline failed for pipeline:%s with %s",
-                      pipeline.getId(), group));
-    } else {
-      destroyPipeline(pipelineManager, pipeline, ozoneConf);
-    }
-        exceptions.add(
-            new IOException("Failed invoke Ratis rpc " + rpc + " for " +
-                d.getUuid(), ioe));
+        String errMsg =
+            "Failed invoke Ratis rpc " + rpc + " for " + d.getUuid();
+        LOG.error(errMsg, ioe);
+        exceptions.add(new IOException(errMsg, ioe));
-
-  /**
-   * Schedules a fixed interval job to create pipelines.
-   *
-   * @param pipelineManager - Pipeline manager
-   * @param conf            - Configuration
-   */
-  public static void scheduleFixedIntervalPipelineCreator(
-      PipelineManager pipelineManager, Configuration conf) {
-    long intervalInMillis = conf
-        .getTimeDuration(ScmConfigKeys.OZONE_SCM_PIPELINE_CREATION_INTERVAL,
-            ScmConfigKeys.OZONE_SCM_PIPELINE_CREATION_INTERVAL_DEFAULT,
-            TimeUnit.MILLISECONDS);
-    // TODO: #CLUTIL We can start the job asap
-    RatisPipelineProvider.getScheduler().scheduleWithFixedDelay(() -> {
-      if (!isPipelineCreatorRunning.compareAndSet(false, true)) {
-        return;
-      }
-      createPipelines(pipelineManager, conf);
-    }, intervalInMillis, intervalInMillis, TimeUnit.MILLISECONDS);
-  }
-
-  /**
-   * Triggers pipeline creation after the specified time.
-   *
-   * @param pipelineManager - Pipeline manager
-   * @param conf            - Configuration
-   * @param afterMillis     - Time after which pipeline creation needs to be
-   *                        triggered
-   */
-  public static void triggerPipelineCreation(PipelineManager pipelineManager,
-      Configuration conf, long afterMillis) {
-    // TODO: #CLUTIL introduce a better mechanism to not have more than one
-    // job of a particular type running, probably via ratis.
-    if (!isPipelineCreatorRunning.compareAndSet(false, true)) {
-      return;
-    }
-    RatisPipelineProvider.getScheduler()
-        .schedule(() -> createPipelines(pipelineManager, conf), afterMillis,
-            TimeUnit.MILLISECONDS);
-  }
-
-  private static void createPipelines(PipelineManager pipelineManager,
-      Configuration conf) {
-    // TODO: #CLUTIL Different replication factor may need to be supported
-    HddsProtos.ReplicationType type = HddsProtos.ReplicationType.valueOf(
-        conf.get(OzoneConfigKeys.OZONE_REPLICATION_TYPE,
-            OzoneConfigKeys.OZONE_REPLICATION_TYPE_DEFAULT));
-
-    for (HddsProtos.ReplicationFactor factor : HddsProtos.ReplicationFactor
-        .values()) {
-      while (true) {
-        try {
-          if (RatisPipelineProvider.getScheduler().isClosed()) {
-            break;
-          }
-          pipelineManager.createPipeline(type, factor);
-        } catch (IOException ioe) {
-          break;
-        } catch (Throwable t) {
-          LOG.error("Error while creating pipelines {}", t);
-          break;
-        }
-      }
-    }
-    isPipelineCreatorRunning.set(false);
-  }

INS60 INS21 INS43 INS59 INS32 INS42 INS42 MOV27 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL9 DEL14 DEL59 DEL23 DEL42 DEL66 DEL65 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL39 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL86 DEL42 DEL40 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL9 DEL9 DEL32 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL86 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL9 DEL9 DEL32 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL86 DEL42 DEL40 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL44 DEL40 DEL42 DEL32 DEL9 DEL42 DEL42 DEL32 DEL42 DEL32 DEL10 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL10 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL10 DEL8 DEL12 DEL54 DEL8 DEL61 DEL8 DEL70 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31