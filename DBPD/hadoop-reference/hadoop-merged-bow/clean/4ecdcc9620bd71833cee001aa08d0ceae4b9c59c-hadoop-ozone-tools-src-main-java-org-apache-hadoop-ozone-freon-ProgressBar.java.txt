HDDS-692. Use the ProgressBar class in the RandomKeyGenerator freon test. Contributed by Zsolt Horvath.

+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.function.Function;
- * Run an arbitrary code and print progress on the provided stream. The
- * progressbar stops when: - the provided currentvalue is less the the maxvalue
- * - exception thrown
+ * Creates and runs a ProgressBar in new Thread which gets printed on
+ * the provided PrintStream.
+  private static final Logger LOG = LoggerFactory.getLogger(ProgressBar.class);
-  private PrintStream stream;
-  private AtomicLong currentValue;
-  private long maxValue;
-  private Thread progressBar;
-  private volatile boolean exception = false;
-  private long startTime;
+  private final long maxValue;
+  private final Supplier<Long> currentValue;
+  private final Thread progressBar;
+
+  private volatile boolean running;
+
+  private volatile long startTime;
-   * @param stream Used to display the progress
+   * Creates a new ProgressBar instance which prints the progress on the given
+   * PrintStream when started.
+   *
+   * @param stream to display the progress
+   * @param currentValue Supplier that provides the current value
-  ProgressBar(PrintStream stream, long maxValue) {
-    this.stream = stream;
+  public ProgressBar(final PrintStream stream, final Long maxValue,
+                     final Supplier<Long> currentValue) {
-    this.currentValue = new AtomicLong(0);
-    this.progressBar = new Thread(new ProgressBarThread());
+    this.currentValue = currentValue;
+    this.progressBar = new Thread(getProgressBar(stream));
+    this.running = false;
-   * Start a task with a progessbar without any in/out parameters Runnable used
-   * just a task wrapper.
-   *
-   * @param task Runnable
+   * Starts the ProgressBar in a new Thread.
+   * This is a non blocking call.
-  public void start(Runnable task) {
-
-    startTime = System.nanoTime();
-
-    try {
-
+  public synchronized void start() {
+    if (!running) {
+      running = true;
+      startTime = System.nanoTime();
-      task.run();
+    }
+  }
-    } catch (Exception e) {
-      exception = true;
-    } finally {
-
+  /**
+   * Graceful shutdown, waits for the progress bar to complete.
+   * This is a blocking call.
+   */
+  public synchronized void shutdown() {
+    if (running) {
+        running = false;
-        e.printStackTrace();
+        LOG.warn("Got interrupted while waiting for the progress bar to " +
+                "complete.");
-   * Start a task with only out parameters.
-   *
-   * @param task Supplier that represents the task
-   * @param <T> Generic return type
-   * @return Whatever the supllier produces
+   * Terminates the progress bar. This doesn't wait for the progress bar
+   * to complete.
-  public <T> T start(Supplier<T> task) {
-
-    startTime = System.nanoTime();
-    T result = null;
-
-    try {
-
-      progressBar.start();
-      result = task.get();
-
-    } catch (Exception e) {
-      exception = true;
-    } finally {
-
+  public synchronized void terminate() {
+    if (running) {
+        running = false;
-        e.printStackTrace();
+        LOG.warn("Got interrupted while waiting for the progress bar to " +
+                "complete.");
-
-      return result;
-  /**
-   * Start a task with in/out parameters.
-   *
-   * @param input Input of the function
-   * @param task A Function that does the task
-   * @param <T> type of the input
-   * @param <R> return type
-   * @return Whatever the Function returns
-   */
-  public <T, R> R start(T input, Function<T, R> task) {
-
-    startTime = System.nanoTime();
-    R result = null;
-
-    try {
-
-      progressBar.start();
-      result = task.apply(input);
-
-    } catch (Exception e) {
-      exception = true;
-      throw e;
-    } finally {
-
-      try {
-        progressBar.join();
-      } catch (InterruptedException e) {
-        e.printStackTrace();
-      }
-
-      return result;
-    }
-  }
-
-  /**
-   * Increment the progress with one step.
-   */
-  public void incrementProgress() {
-    currentValue.incrementAndGet();
-  }
-
-  private class ProgressBarThread implements Runnable {
-
-    @Override
-    public void run() {
-      try {
-
-        stream.println();
-        long value;
-
-        while ((value = currentValue.get()) < maxValue) {
-          print(value);
-
-          if (exception) {
-            break;
-          }
+  private Runnable getProgressBar(final PrintStream stream) {
+    return () -> {
+      stream.println();
+      while (running && currentValue.get() < maxValue) {
+        print(stream, currentValue.get());
+        try {
+        } catch (InterruptedException e) {
+          LOG.warn("ProgressBar was interrupted.");
-
-        if (exception) {
-          stream.println();
-          stream.println("Incomplete termination, " + "check log for " +
-              "exception.");
-        } else {
-          print(maxValue);
-        }
-        stream.println();
-      } catch (InterruptedException e) {
-        stream.println(e);
-    }
-
-    /**
-     * Given current value prints the progress bar.
-     *
-     * @param value current progress position
-     */
-    private void print(long value) {
-      stream.print('\r');
-      double percent = 100.0 * value / maxValue;
-      StringBuilder sb = new StringBuilder();
-      sb.append(" " + String.format("%.2f", percent) + "% |");
-
-      for (int i = 0; i <= percent; i++) {
-        sb.append('█');
-      }
-      for (int j = 0; j < 100 - percent; j++) {
-        sb.append(' ');
-      }
-      sb.append("|  ");
-      sb.append(value + "/" + maxValue);
-      long timeInSec = TimeUnit.SECONDS.convert(
-          System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
-      String timeToPrint = String.format("%d:%02d:%02d", timeInSec / 3600,
-          (timeInSec % 3600) / 60, timeInSec % 60);
-      sb.append(" Time: " + timeToPrint);
-      stream.print(sb.toString());
-    }
+      print(stream, maxValue);
+      stream.println();
+      running = false;
+    };
-}
+  /**
+   * Given current value prints the progress bar.
+   *
+   * @param value current progress position
+   */
+  private void print(final PrintStream stream, final long value) {
+    stream.print('\r');
+    double percent = 100.0 * value / maxValue;
+    StringBuilder sb = new StringBuilder();
+    sb.append(" " + String.format("%.2f", percent) + "% |");
+
+    for (int i = 0; i <= percent; i++) {
+      sb.append('█');
+    }
+    for (int j = 0; j < 100 - percent; j++) {
+      sb.append(' ');
+    }
+    sb.append("|  ");
+    sb.append(value + "/" + maxValue);
+    long timeInSec = TimeUnit.SECONDS.convert(
+            System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
+    String timeToPrint = String.format("%d:%02d:%02d", timeInSec / 3600,
+            (timeInSec % 3600) / 60, timeInSec % 60);
+    sb.append(" Time: " + timeToPrint);
+    stream.print(sb.toString());
+  }
+}

MOV26 MOV26 MOV55 UPD40 UPD40 INS29 INS83 INS42 INS23 MOV23 INS23 INS23 MOV23 INS23 INS23 MOV31 INS31 INS31 INS31 INS31 INS65 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 MOV59 INS83 INS83 INS74 MOV59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 MOV59 INS83 INS44 INS44 MOV21 INS29 MOV83 INS83 MOV39 INS42 INS8 INS29 INS83 INS83 INS39 INS42 MOV8 INS29 INS83 INS83 INS39 INS42 INS8 INS83 MOV43 INS42 MOV44 INS8 INS44 INS66 INS66 INS42 INS42 INS32 INS43 INS43 INS42 INS65 INS65 INS83 MOV43 INS42 INS83 INS43 INS83 INS74 INS42 INS65 INS25 INS65 INS25 INS65 INS25 INS83 INS41 INS83 INS43 INS42 INS83 INS42 INS42 INS57 INS42 INS42 INS66 INS66 UPD66 INS42 INS66 INS42 MOV43 INS43 INS66 INS66 INS38 INS8 INS66 INS66 INS42 MOV8 INS66 INS66 INS42 MOV8 INS86 INS42 INS43 INS42 INS42 INS14 INS9 INS42 INS21 MOV21 MOV21 INS8 INS42 MOV43 INS32 UPD42 INS7 MOV21 INS61 MOV21 MOV21 MOV21 INS42 INS42 INS42 INS9 INS21 INS21 INS27 INS8 INS7 INS7 INS7 INS42 INS27 MOV21 INS54 INS42 INS42 INS9 INS42 INS9 INS42 INS9 INS32 MOV42 MOV8 INS12 UPD42 UPD42 INS27 UPD42 UPD42 INS27 INS42 INS42 INS42 MOV32 MOV44 INS8 INS45 INS45 INS45 INS45 MOV21 UPD42 UPD42 INS45 DEL39 DEL42 DEL43 DEL34 DEL14 DEL42 DEL43 DEL14 DEL14 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL10 DEL8 DEL25 DEL45 DEL45 DEL45 DEL27 DEL42 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL78 DEL42 DEL39 DEL42 DEL59 DEL60 DEL42 DEL7 DEL36 DEL27 DEL61 DEL42 DEL8 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL23 DEL83 DEL39 DEL23 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL39 DEL23 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL42 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL42 DEL66 DEL66 DEL65 DEL66 DEL42 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL73 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL54 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL55