YARN-3362. Add node label usage in RM CapacityScheduler web UI. (Naganarasimha G R via wangda)

+import java.util.List;
+import org.apache.hadoop.yarn.nodelabels.RMNodeLabel;
+import org.apache.hadoop.yarn.server.resourcemanager.nodelabels.RMNodeLabelsManager;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.QueueCapacities;
+    String label;
+    private String nodeLabel;
+      nodeLabel = info.label;
+      if (nodeLabel == null) {
+        renderLeafQueueInfoWithoutParition(html);
+      } else {
+        renderLeafQueueInfoWithPartition(html);
+      }
+    }
-      ResponseInfo ri = info("\'" + lqinfo.getQueuePath().substring(5) + "\' Queue Status").
-          _("Queue State:", lqinfo.getQueueState()).
-          _("Used Capacity:", percent(lqinfo.getUsedCapacity() / 100)).
-          _("Absolute Used Capacity:", percent(lqinfo.getAbsoluteUsedCapacity() / 100)).
-          _("Absolute Capacity:", percent(lqinfo.getAbsoluteCapacity() / 100)).
-          _("Absolute Max Capacity:", percent(lqinfo.getAbsoluteMaxCapacity() / 100)).
-          _("Used Resources:", lqinfo.getResourcesUsed().toString()).
-          _("Num Schedulable Applications:", Integer.toString(lqinfo.getNumActiveApplications())).
-          _("Num Non-Schedulable Applications:", Integer.toString(lqinfo.getNumPendingApplications())).
-          _("Num Containers:", Integer.toString(lqinfo.getNumContainers())).
-          _("Max Applications:", Integer.toString(lqinfo.getMaxApplications())).
-          _("Max Applications Per User:", Integer.toString(lqinfo.getMaxApplicationsPerUser())).
-          _("Max Application Master Resources:", lqinfo.getAMResourceLimit().toString()).
-          _("Used Application Master Resources:", lqinfo.getUsedAMResource().toString()).
-          _("Max Application Master Resources Per User:", lqinfo.getUserAMResourceLimit().toString()).
-          _("Configured Capacity:", percent(lqinfo.getCapacity() / 100)).
-          _("Configured Max Capacity:", percent(lqinfo.getMaxCapacity() / 100)).
-          _("Configured Minimum User Limit Percent:", Integer.toString(lqinfo.getUserLimit()) + "%").
-          _("Configured User Limit Factor:", StringUtils.format(
-              "%.1f", lqinfo.getUserLimitFactor())).
-          _("Accessible Node Labels:", StringUtils.join(",", lqinfo.getNodeLabels())).
-          _("Ordering Policy: ", lqinfo.getOrderingPolicyInfo()).
-          _("Preemption:", lqinfo.getPreemptionDisabled() ? "disabled" : "enabled");
+    private void renderLeafQueueInfoWithPartition(Block html) {
+      nodeLabel = nodeLabel.length() == 0 ? "<DEFAULT_PARTITION>" : nodeLabel;
+      // first display the queue's label specific details :
+      ResponseInfo ri =
+          info("\'" + lqinfo.getQueuePath().substring(5)
+              + "\' Queue Status for Partition \'" + nodeLabel + "\'");
+      renderQueueCapacityInfo(ri);
+      html._(InfoBlock.class);
+      // clear the info contents so this queue's info doesn't accumulate into
+      // another queue's info
+      ri.clear();
+
+      // second display the queue specific details :
+      ri =
+          info("\'" + lqinfo.getQueuePath().substring(5) + "\' Queue Status")
+              ._("Queue State:", lqinfo.getQueueState());
+      renderCommonLeafQueueInfo(ri);
-
-      // clear the info contents so this queue's info doesn't accumulate into another queue's info
+      // clear the info contents so this queue's info doesn't accumulate into
+      // another queue's info
+
+    private void renderLeafQueueInfoWithoutParition(Block html) {
+      ResponseInfo ri =
+          info("\'" + lqinfo.getQueuePath().substring(5) + "\' Queue Status")
+              ._("Queue State:", lqinfo.getQueueState());
+      renderQueueCapacityInfo(ri);
+      renderCommonLeafQueueInfo(ri);
+      html._(InfoBlock.class);
+      // clear the info contents so this queue's info doesn't accumulate into
+      // another queue's info
+      ri.clear();
+    }
+
+    private void renderQueueCapacityInfo(ResponseInfo ri) {
+      ri.
+      _("Used Capacity:", percent(lqinfo.getUsedCapacity() / 100)).
+      _("Configured Capacity:", percent(lqinfo.getCapacity() / 100)).
+      _("Configured Max Capacity:", percent(lqinfo.getMaxCapacity() / 100)).
+      _("Absolute Used Capacity:", percent(lqinfo.getAbsoluteUsedCapacity() / 100)).
+      _("Absolute Configured Capacity:", percent(lqinfo.getAbsoluteCapacity() / 100)).
+      _("Absolute Configured Max Capacity:", percent(lqinfo.getAbsoluteMaxCapacity() / 100)).
+      _("Used Resources:", lqinfo.getResourcesUsed().toString());
+    }
+
+    private void renderCommonLeafQueueInfo(ResponseInfo ri) {
+      ri.
+      _("Num Schedulable Applications:", Integer.toString(lqinfo.getNumActiveApplications())).
+      _("Num Non-Schedulable Applications:", Integer.toString(lqinfo.getNumPendingApplications())).
+      _("Num Containers:", Integer.toString(lqinfo.getNumContainers())).
+      _("Max Applications:", Integer.toString(lqinfo.getMaxApplications())).
+      _("Max Applications Per User:", Integer.toString(lqinfo.getMaxApplicationsPerUser())).
+      _("Max Application Master Resources:", lqinfo.getAMResourceLimit().toString()).
+      _("Used Application Master Resources:", lqinfo.getUsedAMResource().toString()).
+      _("Max Application Master Resources Per User:", lqinfo.getUserAMResourceLimit().toString()).
+      _("Configured Minimum User Limit Percent:", Integer.toString(lqinfo.getUserLimit()) + "%").
+      _("Configured User Limit Factor:", StringUtils.format(
+          "%.1f", lqinfo.getUserLimitFactor())).
+      _("Accessible Node Labels:", StringUtils.join(",", lqinfo.getNodeLabels())).
+      _("Ordering Policy: ", lqinfo.getOrderingPolicyInfo()).
+      _("Preemption:", lqinfo.getPreemptionDisabled() ? "disabled" : "enabled");
+    }
-              span(".q", info.getQueuePath().substring(5))._().
+              span(".q", "Queue: "+info.getQueuePath().substring(5))._().
+    private List<RMNodeLabel> nodeLabelsInfo;
+      RMNodeLabelsManager nodeLabelManager =
+          rm.getRMContext().getNodeLabelManager();
+      nodeLabelsInfo = nodeLabelManager.pullRMNodeLabelsInfo();
-        CSQueue root = cs.getRootQueue();
-        CapacitySchedulerInfo sinfo = new CapacitySchedulerInfo(root, cs);
-        csqinfo.csinfo = sinfo;
-        csqinfo.qinfo = null;
-
-        float used = sinfo.getUsedCapacity() / 100;
-          _().
-          li().
+          _();
+
+        float used = 0;
+        if (null == nodeLabelsInfo
+            || (nodeLabelsInfo.size() == 1 && nodeLabelsInfo.get(0)
+                .getLabelName().isEmpty())) {
+          CSQueue root = cs.getRootQueue();
+          CapacitySchedulerInfo sinfo =
+              new CapacitySchedulerInfo(root, cs, new RMNodeLabel(
+                  RMNodeLabelsManager.NO_LABEL));
+          csqinfo.csinfo = sinfo;
+          csqinfo.qinfo = null;
+
+          used = sinfo.getUsedCapacity() / 100;
+          //label is not enabled in the cluster or there's only "default" label,
+          ul.li().
+        } else {
+          for (RMNodeLabel label : nodeLabelsInfo) {
+            CSQueue root = cs.getRootQueue();
+            CapacitySchedulerInfo sinfo =
+                new CapacitySchedulerInfo(root, cs, label);
+            csqinfo.csinfo = sinfo;
+            csqinfo.qinfo = null;
+            csqinfo.label = label.getLabelName();
+            String nodeLabel =
+                csqinfo.label.length() == 0 ? "<DEFAULT_PARTITION>"
+                    : csqinfo.label;
+            QueueCapacities queueCapacities = root.getQueueCapacities();
+            used = queueCapacities.getUsedCapacity(label.getLabelName());
+            String partitionUiTag =
+                "Partition: " + nodeLabel + " " + label.getResource();
+            ul.li().
+            a(_Q).$style(width(Q_MAX_WIDTH)).
+              span().$style(join(width(used), ";left:0%;",
+                  used > 1 ? Q_OVER : Q_UNDER))._(".")._().
+              span(".q", partitionUiTag)._().
+            span().$class("qstats").$style(left(Q_STATS_POS)).
+              _(join(percent(used), " used"))._();
+
+            //for the queue hierarchy under label
+            UL<Hamlet> underLabel = html.ul("#pq");
+            underLabel.li().
+            a(_Q).$style(width(Q_MAX_WIDTH)).
+              span().$style(join(width(used), ";left:0%;",
+                  used > 1 ? Q_OVER : Q_UNDER))._(".")._().
+              span(".q", "Queue: root")._().
+            span().$class("qstats").$style(left(Q_STATS_POS)).
+              _(join(percent(used), " used"))._().
+            _(QueueBlock.class)._()._();
+          }
+        }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS23 INS43 INS59 INS83 INS43 INS59 MOV78 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 UPD83 UPD42 INS44 INS83 INS74 INS59 INS42 INS42 INS42 INS42 INS21 INS25 INS43 INS42 INS21 INS60 INS21 MOV21 MOV21 INS21 INS21 INS21 INS21 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS43 INS42 INS60 INS21 INS7 INS27 INS8 INS8 INS42 INS7 MOV43 INS59 INS32 INS7 INS32 INS32 INS32 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS42 MOV32 INS42 MOV32 INS42 INS42 INS43 INS59 INS7 INS8 INS42 INS40 INS42 INS33 INS21 INS21 INS42 INS16 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS32 INS42 INS32 MOV21 INS60 INS25 INS32 INS32 INS27 INS45 INS42 INS42 INS27 INS43 INS32 INS42 INS45 INS32 INS43 UPD45 INS32 INS42 INS42 INS42 MOV32 INS39 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS34 INS45 INS32 INS45 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS42 UPD45 INS42 INS42 INS42 INS34 INS27 INS36 MOV60 INS60 MOV21 MOV21 INS21 INS21 INS70 INS42 INS42 INS32 INS42 INS34 INS45 INS32 INS45 INS32 INS42 INS33 INS42 INS27 MOV43 INS59 INS7 INS32 INS44 INS42 INS8 INS42 INS42 INS32 INS42 INS34 INS32 INS42 INS45 MOV32 MOV32 MOV42 INS27 INS32 INS42 INS14 INS42 MOV27 INS32 INS42 INS43 INS42 INS60 MOV60 INS21 INS21 INS21 INS60 INS60 INS21 INS60 INS21 MOV60 INS21 INS42 INS42 MOV32 MOV42 INS45 MOV32 INS32 INS34 INS32 INS42 MOV43 INS42 INS42 INS14 INS32 INS42 MOV57 INS42 INS43 INS59 INS43 INS7 INS7 INS7 INS43 INS59 INS43 INS59 INS7 INS43 INS59 INS32 INS74 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS40 INS32 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS40 INS33 INS40 INS32 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS34 INS42 INS32 INS42 MOV32 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS45 INS40 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 MOV32 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS45 INS32 INS42 INS57 INS27 INS32 INS42 INS45 INS40 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS45 MOV32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS45 INS42 INS32 INS42 INS45 INS45 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS32 INS42 MOV32 INS32 INS42 INS32 INS32 INS42 INS45 INS45 INS32 INS42 INS32 INS42 INS42 INS32 INS45 INS16 INS32 INS42 INS32 INS42 MOV32 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS45 INS16 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 DEL45 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL45 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL8