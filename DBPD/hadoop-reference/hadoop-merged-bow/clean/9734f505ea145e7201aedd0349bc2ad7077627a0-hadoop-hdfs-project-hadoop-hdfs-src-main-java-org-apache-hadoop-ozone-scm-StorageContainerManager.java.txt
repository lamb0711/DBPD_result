HDFS-12739. Add Support for SCM --init command. Contributed by Shashikant Banerjee.

+import org.apache.hadoop.ozone.common.StorageInfo;
+import org.apache.hadoop.ozone.common.Storage.StorageState;
+import org.apache.hadoop.ozone.scm.exceptions.SCMException.ResultCodes;
+import java.io.PrintStream;
-import java.util.UUID;
+   *  Startup options.
+   */
+  public enum StartupOption {
+    INIT("-init"),
+    CLUSTERID("-clusterid"),
+    GENCLUSTERID("-genclusterid"),
+    REGULAR("-regular"),
+    HELP("-help");
+
+    private final String name;
+    private String clusterId = null;
+
+    public void setClusterId(String cid) {
+      if(cid != null && !cid.isEmpty()) {
+        clusterId = cid;
+      }
+    }
+
+    public String getClusterId() {
+      return clusterId;
+    }
+
+    StartupOption(String arg) {
+      this.name = arg;
+    }
+
+    public String getName() {
+      return name;
+    }
+  }
+
+  /**
+  private final SCMStorage scmStorage;
+  private static final String USAGE =
+      "Usage: \n hdfs scm [ " + StartupOption.INIT.getName() + " [ "
+          + StartupOption.CLUSTERID.getName() + " <cid> ] ]\n " + "hdfs scm [ "
+          + StartupOption.GENCLUSTERID.getName() + " ]\n " + "hdfs scm [ "
+          + StartupOption.HELP.getName() + " ]\n";
-  public StorageContainerManager(OzoneConfiguration conf)
+  private StorageContainerManager(OzoneConfiguration conf)
-    // TODO : Fix the ClusterID generation code.
-    scmNodeManager = new SCMNodeManager(conf, UUID.randomUUID().toString());
+    scmStorage = new SCMStorage(conf);
+    String clusterId = scmStorage.getClusterID();
+    if (clusterId == null) {
+      throw new SCMException("clusterId not found",
+          ResultCodes.SCM_NOT_INITIALIZED);
+    }
+    scmNodeManager = new SCMNodeManager(conf, scmStorage.getClusterID());
+    OzoneConfiguration conf = new OzoneConfiguration();
-      OzoneConfiguration conf = new OzoneConfiguration();
-      if (!DFSUtil.isOzoneEnabled(conf)) {
-        System.out.println("SCM cannot be started in secure mode or when " +
-            OZONE_ENABLED + " is set to false");
-        System.exit(1);
+      StorageContainerManager scm = createSCM(argv, conf);
+      if (scm != null) {
+        scm.start();
+        scm.join();
-      StorageContainerManager scm = new StorageContainerManager(conf);
-      scm.start();
-      scm.join();
+  private static void printUsage(PrintStream out) {
+    out.println(USAGE + "\n");
+  }
+
+  public static StorageContainerManager createSCM(String[] argv,
+      OzoneConfiguration conf) throws IOException {
+    if (!DFSUtil.isOzoneEnabled(conf)) {
+      System.err.println("SCM cannot be started in secure mode or when " +
+          OZONE_ENABLED + " is set to false");
+      System.exit(1);
+    }
+    StartupOption startOpt = parseArguments(argv);
+    if (startOpt == null) {
+      printUsage(System.err);
+      terminate(1);
+      return null;
+    }
+    switch (startOpt) {
+    case INIT:
+      terminate(scmInit(conf) ? 0 : 1);
+      return null;
+    case GENCLUSTERID:
+      System.out.println("Generating new cluster id:");
+      System.out.println(StorageInfo.newClusterID());
+      terminate(0);
+      return null;
+    case HELP:
+      printUsage(System.err);
+      terminate(0);
+      return null;
+    default:
+      return new StorageContainerManager(conf);
+    }
+  }
+
+  /**
+   * Routine to set up the Version info for StorageContainerManager.
+   *
+   * @param conf OzoneConfiguration
+   * @return true if SCM initialization is successful, false otherwise.
+   * @throws IOException if init fails due to I/O error
+   */
+  public static boolean scmInit(OzoneConfiguration conf) throws IOException {
+    SCMStorage scmStorage = new SCMStorage(conf);
+    StorageState state = scmStorage.getState();
+    if (state != StorageState.INITIALIZED) {
+      try {
+        String clusterId = StartupOption.INIT.getClusterId();
+        if (clusterId != null && !clusterId.isEmpty()) {
+          scmStorage.setClusterId(clusterId);
+        }
+        scmStorage.initialize();
+        System.out.println("SCM initialization succeeded." +
+            "Current cluster id for sd=" + scmStorage.getStorageDir() + ";cid="
+                + scmStorage.getClusterID());
+        return true;
+      } catch (IOException ioe) {
+        LOG.error("Could not initialize SCM version file", ioe);
+        return false;
+      }
+    } else {
+      System.out.println("SCM already initialized. Reusing existing" +
+          " cluster id for sd=" + scmStorage.getStorageDir() + ";cid="
+              + scmStorage.getClusterID());
+      return true;
+    }
+  }
+
+  private static StartupOption parseArguments(String[] args) {
+    int argsLen = (args == null) ? 0 : args.length;
+    StartupOption startOpt = StartupOption.HELP;
+    if (argsLen == 0) {
+      startOpt = StartupOption.REGULAR;
+    }
+    for (int i = 0; i < argsLen; i++) {
+      String cmd = args[i];
+      if (StartupOption.INIT.getName().equalsIgnoreCase(cmd)) {
+        startOpt = StartupOption.INIT;
+        if (argsLen > 3) {
+          return null;
+        }
+        for (i = i + 1; i < argsLen; i++) {
+          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {
+            i++;
+            if (i < argsLen && !args[i].isEmpty()) {
+              startOpt.setClusterId(args[i]);
+            } else {
+              // if no cluster id specified or is empty string, return null
+              LOG.error("Must specify a valid cluster ID after the "
+                  + StartupOption.CLUSTERID.getName() + " flag");
+              return null;
+            }
+          } else {
+            return null;
+          }
+        }
+      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {
+        if (argsLen > 1) {
+          return null;
+        }
+        startOpt = StartupOption.GENCLUSTERID;
+      }
+    }
+    return startOpt;
+  }
+

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS71 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS72 INS72 INS72 INS72 INS72 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 UPD83 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 MOV43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS27 INS21 INS60 INS25 MOV60 INS43 INS42 INS21 INS5 INS42 INS43 INS42 INS42 MOV25 INS60 INS25 INS50 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS60 INS25 INS42 INS5 INS42 INS60 INS60 INS25 INS24 INS41 INS66 INS42 INS42 INS42 INS42 INS33 INS43 INS42 INS25 INS42 INS41 INS43 INS42 INS21 INS42 INS41 INS45 INS32 INS45 INS32 INS45 INS45 INS32 INS45 INS45 INS32 INS45 INS7 INS43 INS59 INS27 INS8 INS42 INS32 INS43 INS85 INS42 INS43 INS59 INS27 INS8 INS42 INS49 INS21 INS41 INS49 INS21 INS21 INS21 INS41 INS49 INS21 INS21 INS41 INS49 INS41 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS85 INS39 INS59 INS43 INS59 INS27 INS8 INS58 INS27 INS37 INS8 INS42 INS42 INS27 INS8 INS42 INS42 INS7 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS53 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS41 INS42 INS32 INS33 INS42 INS32 INS32 INS32 INS33 INS42 INS32 INS32 INS33 MOV14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS40 INS54 INS21 INS41 INS42 INS42 INS16 INS42 INS42 INS40 INS42 INS34 INS21 INS39 INS59 INS42 INS42 INS42 INS60 INS25 INS27 INS38 INS21 INS22 INS42 INS43 INS42 INS42 INS42 INS14 INS32 INS43 INS27 INS8 INS42 INS45 INS42 INS42 INS32 INS32 INS33 INS42 INS16 INS40 INS42 INS45 INS40 INS42 INS32 INS42 INS34 INS42 INS40 INS42 INS34 INS43 INS42 INS42 INS42 INS8 INS12 INS32 INS9 INS36 INS34 INS40 INS7 INS42 INS34 INS43 INS59 INS32 INS8 INS25 INS42 INS33 INS32 INS7 INS52 INS42 INS42 INS43 INS45 INS40 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS33 MOV21 MOV21 UPD40 INS42 INS40 INS42 INS34 INS32 INS34 INS34 INS42 INS42 INS42 INS60 INS25 INS21 INS21 INS41 INS44 INS8 INS40 INS42 INS27 INS27 INS42 INS40 INS42 INS42 INS2 INS32 INS42 INS42 INS21 INS25 INS24 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS9 INS43 INS42 INS21 INS41 INS27 INS32 INS45 INS32 INS42 INS33 INS42 INS42 INS40 INS42 INS7 INS27 INS8 INS7 INS27 INS37 INS8 INS32 INS42 INS42 INS25 INS21 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS9 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS34 INS41 INS42 INS27 INS42 INS42 INS42 INS25 INS40 INS42 INS27 INS8 INS7 INS40 INS42 INS42 INS33 INS32 INS32 INS27 INS32 INS45 INS32 INS42 INS42 INS45 INS42 INS33 INS42 INS34 INS32 INS8 INS8 INS42 INS34 INS41 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS2 INS42 INS32 INS21 INS25 INS41 INS33 INS42 INS42 INS40 INS42 INS37 INS27 INS8 INS8 INS33 INS42 INS27 INS38 INS21 INS21 INS41 INS42 INS42 INS32 INS32 INS32 INS33 INS2 INS42 INS42 INS42 INS2 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS40 INS42 DEL32 DEL42 DEL32