HDFS-5068. Convert NNThroughputBenchmark to a Tool to allow generic options. Contributed by Konstantin Shvachko.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514114 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.util.Tool;
+import org.apache.hadoop.util.ToolRunner;
-public class NNThroughputBenchmark {
+public class NNThroughputBenchmark implements Tool {
+    // Turn off minimum block size verification
+    config.setInt(DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY, 0);
-    // Start the NameNode
-    String[] argv = new String[] {};
-    nameNode = NameNode.createNameNode(argv, config);
-    nameNodeProto = nameNode.getRpcServer();
-    nameNode.stop();
+    if(nameNode != null)
+      nameNode.stop();
+  public static void runBenchmark(Configuration conf, List<String> args)
+      throws Exception {
+    NNThroughputBenchmark bench = null;
+    try {
+      bench = new NNThroughputBenchmark(conf);
+      bench.run(args.toArray(new String[]{}));
+    } finally {
+      if(bench != null)
+        bench.close();
+    }
+  }
+
-  public static void runBenchmark(Configuration conf, List<String> args) throws Exception {
+  @Override // Tool
+  public int run(String[] aArgs) throws Exception {
+    List<String> args = new ArrayList<String>(Arrays.asList(aArgs));
-    NNThroughputBenchmark bench = null;
+    // Start the NameNode
+    String[] argv = new String[] {};
+    nameNode = NameNode.createNameNode(argv, config);
+    nameNodeProto = nameNode.getRpcServer();
+
-      bench = new NNThroughputBenchmark(conf);
-        opStat = bench.new CreateFileStats(args);
+        opStat = new CreateFileStats(args);
-        opStat = bench.new OpenFileStats(args);
+        opStat = new OpenFileStats(args);
-        opStat = bench.new DeleteFileStats(args);
+        opStat = new DeleteFileStats(args);
-        opStat = bench.new FileStatusStats(args);
+        opStat = new FileStatusStats(args);
-        opStat = bench.new RenameFileStats(args);
+        opStat = new RenameFileStats(args);
-        opStat = bench.new BlockReportStats(args);
+        opStat = new BlockReportStats(args);
-        opStat = bench.new ReplicationStats(args);
+        opStat = new ReplicationStats(args);
-        opStat = bench.new CleanAllStats(args);
+        opStat = new CleanAllStats(args);
+    }
+    return 0;
+  }
+
+  public static void main(String[] args) throws Exception {
+    NNThroughputBenchmark bench = null;
+    try {
+      bench = new NNThroughputBenchmark(new HdfsConfiguration());
+      ToolRunner.run(bench, args);
-  public static void main(String[] args) throws Exception {
-    runBenchmark(new HdfsConfiguration(), 
-                  new ArrayList<String>(Arrays.asList(args)));
+  @Override // Configurable
+  public void setConf(Configuration conf) {
+    config = conf;
+  }
+
+  @Override // Configurable
+  public Configuration getConf() {
+    return config;

INS26 INS26 INS40 INS40 INS43 INS31 INS31 INS31 INS42 INS83 INS83 INS39 INS42 MOV44 MOV44 INS43 INS8 INS78 UPD39 UPD42 INS44 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS21 INS25 INS42 MOV60 INS54 INS42 INS5 INS42 INS60 MOV60 MOV21 MOV21 INS41 INS60 INS54 INS42 INS43 INS42 INS21 INS42 INS42 INS41 INS32 INS27 MOV21 INS8 MOV8 INS43 INS85 INS74 INS59 INS34 INS43 INS59 INS8 INS8 INS42 INS7 INS42 INS42 INS42 INS40 INS34 INS42 INS33 MOV21 INS21 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS33 INS21 INS21 INS25 INS42 INS42 INS32 INS42 INS42 MOV74 INS32 INS7 INS32 INS27 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 INS42 INS33 INS32 INS42 INS42 INS3 INS42 INS43 MOV14 INS42 INS42 INS5 INS4 UPD42 MOV42 INS43 INS85 INS42 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21