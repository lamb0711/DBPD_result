HDFS-11334: [SPS]: NN switch and rescheduling movements can lead to have more than one coordinator for same file blocks. Contributed by Rakesh R.

+import static org.apache.hadoop.util.Time.monotonicNow;
+import java.util.HashSet;
+import java.util.Set;
-  private final BlocksMovementsCompletionHandler handler;
+  private final BlocksMovementsStatusHandler handler;
+  private long inprogressTrackIdsCheckInterval = 30 * 1000; // 30seconds.
+  private long nextInprogressRecheckTime;
+
-    handler = new BlocksMovementsCompletionHandler();
+    handler = new BlocksMovementsStatusHandler();
-    movementTrackerThread.start();
+
+    // Interval to check that the inprogress trackIds. The time interval is
+    // proportional o the heart beat interval time period.
+    final long heartbeatIntervalSeconds = conf.getTimeDuration(
+        DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,
+        DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT, TimeUnit.SECONDS);
+    inprogressTrackIdsCheckInterval = 5 * heartbeatIntervalSeconds;
+    // update first inprogress recheck time to a future time stamp.
+    nextInprogressRecheckTime = monotonicNow()
+        + inprogressTrackIdsCheckInterval;
+
+  /**
+   * Start StoragePolicySatisfyWorker, which will start block movement tracker
+   * thread to track the completion of block movements.
+   */
+  void start() {
+    movementTrackerThread.start();
+  }
+
+  /**
+   * Stop StoragePolicySatisfyWorker, which will stop block movement tracker
+   * thread.
+   */
+  void stop() {
+    movementTrackerThread.interrupt();
+    movementTracker.stopTracking();
+  }
+
+  /**
+   * Timed wait to stop BlockStorageMovement tracker daemon thread.
+   */
+  void waitToFinishWorkerThread() {
+    try {
+      movementTrackerThread.join(3000);
+    } catch (InterruptedException ie) {
+    }
+  }
+
-   * Blocks movements completion handler, which is used to collect details of
-   * the completed list of block movements and this status(success or failure)
-   * will be send to the namenode via heartbeat.
+   * Blocks movements status handler, which is used to collect details of the
+   * completed or inprogress list of block movements and this status(success or
+   * failure or inprogress) will be send to the namenode via heartbeat.
-  static class BlocksMovementsCompletionHandler {
+  class BlocksMovementsStatusHandler {
+      List<BlocksStorageMovementResult> movementResults = new ArrayList<>();
+      // 1. Adding all the completed trackids.
-        if (trackIdVsMovementStatus.size() <= 0) {
-          return new ArrayList<>();
+        if (trackIdVsMovementStatus.size() > 0) {
+          movementResults = Collections
+              .unmodifiableList(trackIdVsMovementStatus);
-        List<BlocksStorageMovementResult> results = Collections
-            .unmodifiableList(trackIdVsMovementStatus);
-        return results;
+      // 2. Adding the in progress track ids after those which are completed.
+      Set<Long> inProgressTrackIds = getInProgressTrackIds();
+      for (Long trackId : inProgressTrackIds) {
+        movementResults.add(new BlocksStorageMovementResult(trackId,
+            BlocksStorageMovementResult.Status.IN_PROGRESS));
+      }
+      return movementResults;
-  BlocksMovementsCompletionHandler getBlocksMovementsCompletionHandler() {
+  BlocksMovementsStatusHandler getBlocksMovementsStatusHandler() {
+
+  /**
+   * Gets list of trackids which are inprogress. Will do collection periodically
+   * on 'dfs.datanode.storage.policy.satisfier.worker.inprogress.recheck.time.
+   * millis' interval.
+   *
+   * @return collection of trackids which are inprogress
+   */
+  private Set<Long> getInProgressTrackIds() {
+    Set<Long> trackIds = new HashSet<>();
+    long now = monotonicNow();
+    if (nextInprogressRecheckTime >= now) {
+      trackIds = movementTracker.getInProgressTrackIds();
+
+      // schedule next re-check interval
+      nextInprogressRecheckTime = now + inprogressTrackIdsCheckInterval;
+    }
+    return trackIds;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 UPD43 INS83 INS39 INS59 INS83 INS39 INS59 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 UPD42 UPD43 UPD42 INS29 INS83 INS74 INS42 INS8 UPD42 INS42 INS27 INS42 INS60 INS21 INS21 INS65 MOV21 INS65 INS21 INS21 INS65 INS54 UPD42 INS65 INS65 INS43 INS43 INS60 INS60 INS25 INS41 INS34 INS34 INS83 INS39 INS59 INS7 INS7 INS66 INS66 INS66 INS66 INS32 INS32 INS66 INS8 INS12 UPD66 UPD66 UPD66 INS60 INS51 MOV60 INS70 MOV41 INS66 INS66 INS66 INS66 INS42 INS42 INS74 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS27 INS42 INS27 INS42 INS42 INS42 INS42 INS21 INS44 INS8 MOV74 INS59 MOV42 INS8 INS74 INS44 INS42 INS8 UPD42 INS43 INS43 INS42 INS14 INS42 INS32 INS42 INS42 INS21 INS21 UPD43 INS42 INS42 INS40 INS40 INS40 INS34 INS42 INS32 INS42 INS32 INS43 INS42 INS42 MOV14 MOV25 INS43 INS43 UPD42 INS32 INS43 INS42 INS21 INS42 INS42 INS74 INS42 INS7 INS7 UPD42 INS42 INS42 INS42 INS34 INS42 UPD27 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS27 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS40 INS42 MOV32 INS42 DEL83 DEL41 DEL8 DEL51