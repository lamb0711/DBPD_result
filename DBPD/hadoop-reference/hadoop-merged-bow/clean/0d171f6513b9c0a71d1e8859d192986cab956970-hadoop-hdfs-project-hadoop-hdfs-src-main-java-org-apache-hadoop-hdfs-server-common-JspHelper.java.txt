Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1202013 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.web.resources.DoAsParam;
-import org.apache.hadoop.security.authentication.util.KerberosName;
+import org.apache.hadoop.security.authentication.util.KerberosName;
+import org.apache.hadoop.security.authorize.AuthorizationException;
+import org.apache.hadoop.security.authorize.ProxyUsers;
-  public static DatanodeInfo bestNode(LocatedBlocks blks) throws IOException {
+  public static DatanodeInfo bestNode(LocatedBlocks blks, Configuration conf)
+      throws IOException {
-    return bestNode(nodes, false);
+    return bestNode(nodes, false, conf);
-  public static DatanodeInfo bestNode(LocatedBlock blk) throws IOException {
+  public static DatanodeInfo bestNode(LocatedBlock blk, Configuration conf)
+      throws IOException {
-    return bestNode(nodes, true);
+    return bestNode(nodes, true, conf);
-  public static DatanodeInfo bestNode(DatanodeInfo[] nodes, boolean doRandom)
-    throws IOException {
+  public static DatanodeInfo bestNode(DatanodeInfo[] nodes, boolean doRandom,
+      Configuration conf) throws IOException {
-        s = new Socket();
+        s = NetUtils.getDefaultSocketFactory(conf).createSocket();
-    Socket s = new Socket();
+    Socket s = NetUtils.getDefaultSocketFactory(conf).createSocket();
-    long amtToRead = Math.min(chunkSizeToView, blockSize - offsetIntoBlock);
+    int amtToRead = (int)Math.min(chunkSizeToView, blockSize - offsetIntoBlock);
-    int bufferSize = conf.getInt(DFSConfigKeys.IO_FILE_BUFFER_SIZE_KEY,
-        DFSConfigKeys.IO_FILE_BUFFER_SIZE_DEFAULT);
-    BlockReader blockReader = BlockReaderFactory.newBlockReader(s, file,
+    BlockReader blockReader = BlockReaderFactory.newBlockReader(
+        conf, s, file,
-        offsetIntoBlock, amtToRead, bufferSize);
+        offsetIntoBlock, amtToRead);
-      int numRead;
+      int numRead = amtToRead;
-        numRead = blockReader.readAll(buf, readOffset, (int)amtToRead);
+        blockReader.readFully(buf, readOffset, amtToRead);
+    final String doAsUserFromQuery = request.getParameter(DoAsParam.NAME);
-      final String user = request.getRemoteUser();
+      final String remoteUser = request.getRemoteUser();
-          LOG.info("Setting service in token: "
-              + new Text(serviceAddress));
+          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);
-        checkUsername(ugi.getShortUserName(), usernameFromQuery);
-        checkUsername(ugi.getShortUserName(), user);
+        if (ugi.getRealUser() == null) {
+          //non-proxy case
+          checkUsername(ugi.getShortUserName(), usernameFromQuery);
+          checkUsername(null, doAsUserFromQuery);
+        } else {
+          //proxy case
+          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);
+          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);
+          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);
+        }
-        if(user == null) {
+        if(remoteUser == null) {
-        ugi = UserGroupInformation.createRemoteUser(user);
-        checkUsername(ugi.getShortUserName(), usernameFromQuery);
+        final UserGroupInformation realUgi = UserGroupInformation.createRemoteUser(remoteUser);
+        checkUsername(realUgi.getShortUserName(), usernameFromQuery);
-        ugi.setAuthenticationMethod(secureAuthMethod);
+        realUgi.setAuthenticationMethod(secureAuthMethod);
+        ugi = initUGI(realUgi, doAsUserFromQuery, request, true, conf);
-      ugi = usernameFromQuery == null?
+      final UserGroupInformation realUgi = usernameFromQuery == null?
-      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);
+      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);
+      ugi = initUGI(realUgi, doAsUserFromQuery, request, false, conf);
+  private static UserGroupInformation initUGI(final UserGroupInformation realUgi,
+      final String doAsUserFromQuery, final HttpServletRequest request,
+      final boolean isSecurityEnabled, final Configuration conf
+      ) throws AuthorizationException {
+    final UserGroupInformation ugi;
+    if (doAsUserFromQuery == null) {
+      //non-proxy case
+      ugi = realUgi;
+    } else {
+      //proxy case
+      ugi = UserGroupInformation.createProxyUser(doAsUserFromQuery, realUgi);
+      ugi.setAuthenticationMethod(
+          isSecurityEnabled? AuthenticationMethod.PROXY: AuthenticationMethod.SIMPLE);
+      ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);
+    }
+    return ugi;
+  }
+
-    if (name == null) {
+    if (expected == null && name != null) {
+      throw new IOException("Usernames not matched: expecting null but name="
+          + name);
+    }
+    if (name == null) { //name is optional, null is okay

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS44 INS44 INS44 MOV60 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS42 INS60 INS25 INS41 INS25 INS42 INS42 INS42 MOV43 UPD39 INS83 INS43 INS59 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS8 INS42 INS27 INS8 INS42 INS42 UPD42 INS11 INS42 INS42 INS32 INS60 INS21 INS42 INS42 INS42 INS33 INS21 INS21 INS21 INS21 INS27 INS27 INS53 INS32 UPD42 INS39 MOV32 INS42 INS42 INS42 INS40 INS83 INS43 INS59 INS7 INS7 INS7 INS32 INS32 INS42 INS33 INS42 INS33 INS14 INS42 INS42 MOV42 INS42 UPD42 INS25 INS60 INS21 INS42 INS42 MOV16 UPD42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS42 INS32 INS42 INS43 INS27 INS32 MOV21 INS27 INS8 INS8 INS83 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS45 INS42 INS32 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS32 INS33 MOV21 INS21 INS21 MOV21 INS21 UPD42 INS42 INS42 INS32 UPD42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS32 MOV42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 UPD42 INS42 INS40 INS42 INS33 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL14 DEL39 DEL40 DEL40 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL39 DEL42 DEL11 DEL32 DEL7 DEL42 DEL45 DEL42 DEL43 DEL42 DEL14 DEL27 DEL42 DEL32 DEL7 DEL21 DEL42 DEL7 DEL21