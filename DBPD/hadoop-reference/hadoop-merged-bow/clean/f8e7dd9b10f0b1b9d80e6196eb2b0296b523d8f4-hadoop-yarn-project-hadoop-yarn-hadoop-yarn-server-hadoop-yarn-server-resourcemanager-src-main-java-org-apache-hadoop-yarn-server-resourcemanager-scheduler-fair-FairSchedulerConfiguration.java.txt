YARN-7557. It should be possible to specify resource types in the fair scheduler increment value (grepas via rkanter)

+import static org.apache.hadoop.yarn.util.resource.ResourceUtils.RESOURCE_REQUEST_VALUE_PATTERN;
+
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.util.UnitsConversionUtil;
-  
-  /** Increment request grant-able by the RM scheduler. 
-   * These properties are looked up in the yarn-site.xml  */
+
+  /** Increment request grant-able by the RM scheduler.
+   * These properties are looked up in the yarn-site.xml.
+   * Kept for backward-compatibility - the new preferred way to configure the
+   * increment is the yarn.resource-types.{RESOURCE_NAME}.increment-allocation
+   * property, specifically: yarn.resource-types.memory-mb.increment-allocation
+   * for memory and yarn.resource-types.vcores.increment-allocation for CPU */
+  @Deprecated
+  @Deprecated
+   * Postfix for resource allocation increments in the
+   * yarn.resource-types.{RESOURCE_NAME}.increment-allocation property.
+   */
+  static final String INCREMENT_ALLOCATION = ".increment-allocation";
+
+  /**
-    int incrementMemory = getInt(
-      RM_SCHEDULER_INCREMENT_ALLOCATION_MB,
-      DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_MB);
-    int incrementCores = getInt(
-      RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES,
-      DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES);
-    return Resources.createResource(incrementMemory, incrementCores);
+    Long memory = null;
+    Integer vCores = null;
+    Map<String, Long> others = new HashMap<>();
+    ResourceInformation[] resourceTypes = ResourceUtils.getResourceTypesArray();
+    for (int i=0; i < resourceTypes.length; ++i) {
+      String name = resourceTypes[i].getName();
+      String propertyKey = getAllocationIncrementPropKey(name);
+      String propValue = get(propertyKey);
+      if (propValue != null) {
+        Matcher matcher = RESOURCE_REQUEST_VALUE_PATTERN.matcher(propValue);
+        if (matcher.matches()) {
+          long value = Long.parseLong(matcher.group(1));
+          String unit = matcher.group(2);
+          long valueInDefaultUnits = getValueInDefaultUnits(value, unit, name);
+          others.put(name, valueInDefaultUnits);
+        } else {
+          throw new IllegalArgumentException("Property " + propertyKey +
+              " is not in \"value [unit]\" format: " + propValue);
+        }
+      }
+    }
+    if (others.containsKey(ResourceInformation.MEMORY_MB.getName())) {
+      memory = others.get(ResourceInformation.MEMORY_MB.getName());
+      if (get(RM_SCHEDULER_INCREMENT_ALLOCATION_MB) != null) {
+        String overridingKey = getAllocationIncrementPropKey(
+                ResourceInformation.MEMORY_MB.getName());
+        LOG.warn("Configuration " + overridingKey + "=" + get(overridingKey) +
+            " is overriding the " + RM_SCHEDULER_INCREMENT_ALLOCATION_MB +
+            "=" + get(RM_SCHEDULER_INCREMENT_ALLOCATION_MB) + " property");
+      }
+      others.remove(ResourceInformation.MEMORY_MB.getName());
+    } else {
+      memory = getLong(
+          RM_SCHEDULER_INCREMENT_ALLOCATION_MB,
+          DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_MB);
+    }
+    if (others.containsKey(ResourceInformation.VCORES.getName())) {
+      vCores = others.get(ResourceInformation.VCORES.getName()).intValue();
+      if (get(RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES) != null) {
+        String overridingKey = getAllocationIncrementPropKey(
+            ResourceInformation.VCORES.getName());
+        LOG.warn("Configuration " + overridingKey + "=" + get(overridingKey) +
+            " is overriding the " + RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES +
+            "=" + get(RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES) + " property");
+      }
+      others.remove(ResourceInformation.VCORES.getName());
+    } else {
+      vCores = getInt(
+          RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES,
+          DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES);
+    }
+    return Resource.newInstance(memory, vCores, others);
+  }
+
+  private long getValueInDefaultUnits(long value, String unit,
+      String resourceName) {
+    return unit.isEmpty() ? value : UnitsConversionUtil.convert(unit,
+        ResourceUtils.getDefaultUnit(resourceName), value);
+  }
+
+  private String getAllocationIncrementPropKey(String resourceName) {
+    return YarnConfiguration.RESOURCE_TYPES + "." + resourceName +
+        INCREMENT_ALLOCATION;

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS78 INS78 INS29 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS65 INS42 INS42 INS45 INS60 INS60 INS60 INS60 INS24 INS25 INS25 INS39 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS59 INS43 INS59 INS74 INS59 INS5 INS59 INS58 INS27 INS38 INS8 INS32 INS8 INS8 INS32 INS8 INS8 INS42 INS42 INS16 INS42 INS27 INS42 INS42 INS33 INS42 INS42 INS33 INS43 INS43 INS43 INS42 INS14 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS60 INS25 INS42 INS42 INS32 INS21 INS25 INS21 INS21 INS42 INS42 INS32 INS21 INS25 INS21 INS21 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS32 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS40 INS42 INS7 INS27 INS8 INS32 INS7 INS40 INS42 INS7 INS27 INS8 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS32 INS32 INS33 INS60 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS33 MOV60 INS21 INS42 INS42 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS21 INS53 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS39 INS59 INS43 INS59 INS39 INS59 INS32 INS14 INS42 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS45 INS40 INS42 INS42 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS40 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS34 DEL39 DEL42 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60