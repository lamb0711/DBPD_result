HDFS-13165: [SPS]: Collects successfully moved block details via IBR. Contributed by Rakesh R.

+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
-import org.apache.hadoop.hdfs.server.protocol.BlocksStorageMoveAttemptFinished;
-  private volatile StoragePolicySatisfierMode spsMode =
-      StoragePolicySatisfierMode.NONE;
-    private List<Block> assignedBlocks = null;
+    private Map<Block, Set<StorageTypeNodePair>> assignedBlocks = null;
-    BlocksMovingAnalysis(Status status, List<Block> blockMovingInfo) {
+    BlocksMovingAnalysis(Status status,
+        Map<Block, Set<StorageTypeNodePair>> assignedBlocks) {
-      this.assignedBlocks = blockMovingInfo;
+      this.assignedBlocks = assignedBlocks;
-    if (spsMode == StoragePolicySatisfierMode.INTERNAL
+    if (serviceMode == StoragePolicySatisfierMode.INTERNAL
-          + "start it.", StringUtils.toLowerCase(spsMode.toString()));
+          + "start it.", StringUtils.toLowerCase(serviceMode.toString()));
-          StringUtils.toLowerCase(spsMode.toString()));
+          StringUtils.toLowerCase(serviceMode.toString()));
-    this.spsMode = serviceMode;
-                  LOG.debug("Block analysis status:{} for the file path:{}."
+                  LOG.debug("Block analysis status:{} for the file id:{}."
-                      status.status, fileStatus.getPath());
+                      status.status, fileStatus.getFileId());
-                this.storageMovementsMonitor.add(new AttemptedItemInfo<T>(
-                    itemInfo.getStartPath(), itemInfo.getFile(), monotonicNow(),
-                    status.assignedBlocks, itemInfo.getRetryCount()));
+                this.storageMovementsMonitor.add(itemInfo.getStartPath(),
+                    itemInfo.getFile(), monotonicNow(), status.assignedBlocks,
+                    itemInfo.getRetryCount());
-                  LOG.debug("Adding trackID:{} for the file path:{} back to"
+                  LOG.debug("Adding trackID:{} for the file id:{} back to"
-                      + " targets.", trackId, fileStatus.getPath());
+                      + " targets.", trackId, fileStatus.getFileId());
-                  LOG.debug("Adding trackID:{} for the file path:{} back to "
+                  LOG.debug("Adding trackID:{} for the file id:{} back to "
-                      trackId, fileStatus.getPath());
+                      trackId, fileStatus.getFileId());
-                  LOG.debug("Adding trackID:{} for the file path:{} back to "
+                  LOG.debug("Adding trackID:{} for the file id:{} back to "
-                      trackId, fileStatus.getPath());
+                      trackId, fileStatus.getFileId());
-                LOG.info("Block analysis status:{} for the file path:{}."
+                LOG.info("Block analysis status:{} for the file id:{}."
-                    fileStatus.getPath());
+                    fileStatus.getFileId());
-          + " this to the next retry iteration", fileInfo.getPath());
+          + " this to the next retry iteration", fileInfo.getFileId());
-          new ArrayList<>());
+          new HashMap<>());
-          + " So, skipping the analysis.", fileInfo.getPath());
+          + " So, skipping the analysis.", fileInfo.getFileId());
-          new ArrayList<>());
+          new HashMap<>());
-              new ArrayList<>());
+              new HashMap<>());
-    List<Block> assignedBlockIds = new ArrayList<Block>();
+    Map<Block, Set<StorageTypeNodePair>> assignedBlocks = new HashMap<>();
-        assignedBlockIds.add(blkMovingInfo.getBlock());
+        StorageTypeNodePair nodeStorage = new StorageTypeNodePair(
+            blkMovingInfo.getTargetStorageType(), blkMovingInfo.getTarget());
+        Set<StorageTypeNodePair> nodesWithStorage = assignedBlocks
+            .get(blkMovingInfo.getBlock());
+        if (nodesWithStorage == null) {
+          nodesWithStorage = new HashSet<>();
+          assignedBlocks.put(blkMovingInfo.getBlock(), nodesWithStorage);
+        }
+        nodesWithStorage.add(nodeStorage);
-    return new BlocksMovingAnalysis(status, assignedBlockIds);
+    return new BlocksMovingAnalysis(status, assignedBlocks);
+
+      // Add existing storages into exclude nodes to avoid choosing this as
+      // remote target later.
+      List<DatanodeInfo> excludeNodes = new ArrayList<>(existingBlockStorages);
+
-          ecPolicy);
+          ecPolicy, excludeNodes);
+   * @param ecPolicy
+   *          - erasure coding policy of sps invoked file
+   * @param excludeNodes
+   *          - existing source nodes, which has replica copy
-      ErasureCodingPolicy ecPolicy) {
+      ErasureCodingPolicy ecPolicy, List<DatanodeInfo> excludeNodes) {
-    List<DatanodeInfo> excludeNodes = new ArrayList<>();
-      // To avoid choosing this excludeNodes as targets later
-      excludeNodes.add(existingTypeNodePair.dn);
-
+    // If all the sources and targets are paired within same node, then simply
+    // return.
+    if (expectedTypes.size() <= 0) {
+      return foundMatchingTargetNodesForBlock;
+    }
-  private static final class StorageTypeNodePair {
+  static final class StorageTypeNodePair {
-    private StorageTypeNodePair(StorageType storageType, DatanodeInfo dn) {
+    StorageTypeNodePair(StorageType storageType, DatanodeInfo dn) {
+
+    public DatanodeInfo getDatanodeInfo() {
+      return dn;
+    }
+
+    public StorageType getStorageType() {
+      return storageType;
+    }
+
+    @Override
+    public String toString() {
+      return new StringBuilder().append("StorageTypeNodePair(\n  ")
+          .append("DatanodeInfo: ").append(dn).append(", StorageType: ")
+          .append(storageType).toString();
+    }
-   * Receives set of storage movement attempt finished blocks report.
+   * Receives storage movement attempt finished block report.
-   * @param moveAttemptFinishedBlks
-   *          set of storage movement attempt finished blocks.
+   * @param dnInfo
+   *          reported datanode
+   * @param storageType
+   *          - storage type
+   * @param block
+   *          movement attempt finished block.
-  public void notifyStorageMovementAttemptFinishedBlks(
-      BlocksStorageMoveAttemptFinished moveAttemptFinishedBlks) {
-    if (moveAttemptFinishedBlks.getBlocks().length <= 0) {
-      return;
-    }
-    storageMovementsMonitor
-        .notifyMovementTriedBlocks(moveAttemptFinishedBlks.getBlocks());
+  @Override
+  public void notifyStorageMovementAttemptFinishedBlk(DatanodeInfo dnInfo,
+      StorageType storageType, Block block) {
+    storageMovementsMonitor.notifyReportedBlock(dnInfo, storageType, block);
-    private final List<Block> blocks;
+    private final Set<Block> blocks;
+     * @param blocks
+     *          scheduled blocks
+     * @param retryCount
+     *          file retry count
-        List<Block> blocks, int retryCount) {
+        Set<Block> blocks, int retryCount) {
-    List<Block> getBlocks() {
+    Set<Block> getBlocks() {
-
+
+  /**
+   * Sets external listener for testing.
+   *
+   * @param blkMovementListener
+   *          block movement listener callback object
+   */
+  @VisibleForTesting
+  void setBlockMovementListener(BlockMovementListener blkMovementListener) {
+    storageMovementsMonitor.setBlockMovementListener(blkMovementListener);
+  }

MOV26 INS26 INS26 UPD40 INS40 INS40 INS31 INS44 INS31 INS31 INS31 INS78 UPD42 INS44 INS44 INS8 INS29 INS78 INS39 INS42 INS44 INS8 UPD74 INS65 INS65 MOV74 INS42 INS25 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS65 INS42 UPD43 UPD42 INS43 INS42 MOV43 INS42 MOV21 UPD74 MOV74 UPD74 MOV74 INS65 INS65 INS42 INS43 INS42 INS21 INS43 INS74 UPD74 UPD42 UPD74 INS42 INS66 INS42 INS66 INS27 INS8 INS42 INS41 INS42 INS41 INS42 INS42 INS41 UPD66 INS42 INS66 INS42 INS66 UPD42 UPD66 UPD42 INS42 UPD43 INS65 INS65 UPD74 UPD43 INS66 INS42 INS66 INS42 INS32 INS42 UPD43 MOV43 INS43 INS43 INS74 INS43 INS74 UPD42 UPD42 INS60 INS32 INS34 INS41 INS42 INS42 INS32 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 INS42 INS66 INS42 INS66 UPD43 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD43 MOV43 INS43 UPD42 UPD42 INS42 UPD43 MOV43 INS43 UPD74 INS8 INS74 INS59 INS42 INS42 INS42 INS32 INS42 UPD42 UPD42 INS42 UPD42 INS42 UPD43 MOV21 MOV21 INS60 INS60 INS25 INS21 MOV21 INS43 INS43 INS42 INS14 INS32 INS42 INS42 UPD42 UPD74 UPD42 UPD74 UPD42 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS42 INS42 MOV74 INS42 INS42 INS32 INS42 INS45 UPD42 UPD42 UPD43 UPD43 INS42 INS42 INS14 INS43 INS43 INS42 MOV32 INS42 INS33 MOV21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 INS43 INS32 INS32 INS42 INS42 UPD42 UPD42 INS7 INS32 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS42 INS45 UPD74 INS74 INS42 INS42 INS43 UPD43 INS43 INS42 UPD42 INS42 MOV32 MOV32 MOV32 INS40 MOV32 UPD45 UPD42 UPD45 UPD42 UPD45 UPD42 UPD45 UPD42 UPD45 UPD42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL40 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL40 DEL14 DEL8 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL83 DEL83 DEL32 DEL42 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL41 DEL8 DEL25 DEL8