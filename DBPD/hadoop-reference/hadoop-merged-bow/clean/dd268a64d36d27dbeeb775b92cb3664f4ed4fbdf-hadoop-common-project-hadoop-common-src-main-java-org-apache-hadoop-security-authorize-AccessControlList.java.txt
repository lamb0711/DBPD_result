Revert "HADOOP-15836. Review of AccessControlList. Contributed by BELUGA BEHR."

This reverts commit 00254d7b8c714ae2000d0934d260b23458033529.

-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Set;
-import java.util.TreeSet;
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
-import org.apache.commons.lang3.StringUtils;
+import org.apache.hadoop.util.StringUtils;
-  static { // register a ctor
+  static {                                      // register a ctor
-  private final Set<String> users = new TreeSet<>();
+  private Collection<String> users;
-  private final Set<String> groups = new TreeSet<>();
+  private Collection<String> groups;
-   *
+   * 
-   * The user list comes first and is separated by a space followed
+   * The user list comes first and is separated by a space followed 
-   *
+   * 
-
+  
-   * Construct a new ACL from String representation of users and groups.
-   *
+   * Construct a new ACL from String representation of users and groups
+   * 
-   *
+   * 
+    users = new HashSet<String>();
+    groups = new HashSet<String>();
-        return;
+        break;
-    if (userGroupStrings.length >= 1 && userGroupStrings[0] != null) {
-      String[] userList = userGroupStrings[0].split(",");
-      for (String user : userList) {
-        if (StringUtils.isNotBlank(user)) {
-          users.add(user.trim());
-        }
+    if (!allAllowed) {      
+      if (userGroupStrings.length >= 1 && userGroupStrings[0] != null) {
+        users = StringUtils.getTrimmedStringCollection(userGroupStrings[0]);
+      } 
+      
+      if (userGroupStrings.length == 2 && userGroupStrings[1] != null) {
+        groups = StringUtils.getTrimmedStringCollection(userGroupStrings[1]);
+        groupsMapping.cacheGroupsAdd(new LinkedList<String>(groups));
-    if (userGroupStrings.length == 2 && userGroupStrings[1] != null) {
-      String[] groupList = userGroupStrings[1].split(",");
-      for (String group : groupList) {
-        if (StringUtils.isNotBlank(group)) {
-          groups.add(group.trim());
-        }
-      }
-      groupsMapping.cacheGroupsAdd(new ArrayList<>(groups));
-    }
-
+  
-   * Checks whether ACL string contains wildcard.
+   * Checks whether ACL string contains wildcard
-    return WILDCARD_ACL_VALUE.equals(aclString.trim());
+    if (aclString.contains(WILDCARD_ACL_VALUE) && 
+        aclString.trim().equals(WILDCARD_ACL_VALUE)) {
+      return true;
+    }
+    return false;
-
+  
-   *
-   * @param user The user name
+   * 
+   * @param user
+   *          The user name
-   *
-   * @param group The group name
+   * 
+   * @param group
+   *          The group name
-      throw new IllegalArgumentException(
-          "Group " + group + " can not be added");
+      throw new IllegalArgumentException("Group " + group + " can not be added");
-      groupsMapping.cacheGroupsAdd(Collections.singletonList(group));
+      List<String> groupsList = new LinkedList<String>();
+      groupsList.add(group);
+      groupsMapping.cacheGroupsAdd(groupsList);
-   *
-   * @param user The user name
+   * 
+   * @param user
+   *          The user name
-   *
-   * @param group The group name
+   * 
+   * @param group
+   *          The group name
-      throw new IllegalArgumentException(
-          "Group " + group + " can not be removed");
+      throw new IllegalArgumentException("Group " + group
+          + " can not be removed");
-   *
-   * @return an unmodifiable set of user names in alphabetic order.
+   * @return the set of user names. the set must not be modified.
-    return Collections.unmodifiableSet(users);
+    return users;
-
+  
-   *
-   * @return an unmodifiable set of group names in alphabetic order.
+   * @return the set of group names. the set must not be modified.
-    return Collections.unmodifiableSet(groups);
+    return groups;
-    }
-    if (!groups.isEmpty()) {
+    } else if (!groups.isEmpty()) {
-    return String.join(",", users);
+    return getString(users);
-    return String.join(",", groups);
+    return getString(groups);
+  }
+
+  /**
+   * Returns comma-separated concatenated single String of all strings of
+   * the given set
+   *
+   * @param strings set of strings to concatenate
+   */
+  private String getString(Collection<String> strings) {
+    StringBuilder sb = new StringBuilder(INITIAL_CAPACITY);
+    boolean first = true;
+    for(String str: strings) {
+      if (!first) {
+        sb.append(",");
+      } else {
+        first = false;
+      }
+      sb.append(str);
+    }
+    return sb.toString();

MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS23 INS23 INS31 MOV83 INS74 INS59 INS83 INS74 INS59 INS8 MOV8 INS29 INS83 MOV43 INS42 INS44 INS8 INS43 INS43 MOV42 UPD43 MOV43 INS43 INS42 INS21 INS21 INS25 INS25 INS41 MOV25 MOV41 INS65 INS65 INS74 INS42 INS60 INS60 INS70 INS41 INS42 INS42 UPD42 INS42 UPD66 UPD66 INS7 INS7 INS38 INS8 UPD66 INS27 INS8 INS9 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 UPD66 INS42 MOV25 UPD9 INS66 INS66 INS42 INS66 INS43 INS43 INS43 INS59 INS39 INS59 INS44 INS42 INS8 INS32 INS42 INS14 INS42 INS14 INS42 MOV25 MOV25 INS32 MOV32 MOV42 MOV41 INS60 INS21 INS8 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 MOV14 INS42 INS9 MOV43 INS42 INS25 INS21 INS42 INS42 UPD74 MOV74 UPD74 MOV74 MOV27 INS42 INS42 INS42 INS42 INS9 INS74 INS59 INS32 MOV70 INS43 INS42 INS38 INS8 INS8 INS32 UPD43 UPD43 INS10 MOV21 INS43 INS43 INS42 INS14 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS21 INS21 INS42 INS42 INS42 UPD42 UPD42 INS7 INS7 INS42 INS42 INS74 INS32 INS7 INS42 MOV32 MOV2 INS42 MOV32 MOV2 INS43 INS43 INS42 INS42 INS45 INS42 INS9 UPD42 INS42 UPD42 INS42 UPD74 INS42 INS42 INS41 UPD43 INS43 INS9 UPD42 INS42 DEL40 DEL26 DEL83 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL59 DEL23 DEL41 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL70 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL8 DEL25 DEL42 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL8 DEL42 DEL45 DEL42 DEL45 DEL43 DEL74