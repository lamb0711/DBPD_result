HDFS-7498. Simplify the logic in INodesInPath. Contributed by Jing Zhao.

+import java.util.List;
-    final INode[] inodes = inodesInPath.getINodes();
-    int ancestorIndex = inodes.length - 2;
-    for(; ancestorIndex >= 0 && inodes[ancestorIndex] == null;
-        ancestorIndex--);
-    checkTraverse(inodes, ancestorIndex, snapshotId);
+    final int length = inodesInPath.length();
+    final INode last = length > 0 ? inodesInPath.getLastINode() : null;
+    final INode parent = length > 1 ? inodesInPath.getINode(-2) : null;
-    final INode last = inodes[inodes.length - 1];
+    checkTraverse(inodesInPath, snapshotId);
+
-        && inodes.length > 1 && last != null) {
-      checkStickyBit(inodes[inodes.length - 2], last, snapshotId);
+        && length > 1 && last != null) {
+      checkStickyBit(parent, last, snapshotId);
-    if (ancestorAccess != null && inodes.length > 1) {
-      check(inodes, ancestorIndex, snapshotId, ancestorAccess);
+    if (ancestorAccess != null && length > 1) {
+      List<INode> inodes = inodesInPath.getReadOnlyINodes();
+      INode ancestor = null;
+      for (int i = inodes.size() - 2; i >= 0 && (ancestor = inodes.get(i)) ==
+          null; i--);
+      check(ancestor, snapshotId, ancestorAccess);
-    if (parentAccess != null && inodes.length > 1) {
-      check(inodes, inodes.length - 2, snapshotId, parentAccess);
+    if (parentAccess != null && length > 1 && parent != null) {
+      check(parent, snapshotId, parentAccess);
-  private void checkTraverse(INode[] inodes, int last, int snapshotId
-      ) throws AccessControlException {
-    for(int j = 0; j <= last; j++) {
-      check(inodes[j], snapshotId, FsAction.EXECUTE);
+  private void checkTraverse(INodesInPath iip, int snapshotId)
+      throws AccessControlException {
+    List<INode> inodes = iip.getReadOnlyINodes();
+    for (int i = 0; i < inodes.size() - 1; i++) {
+      INode inode = inodes.get(i);
+      if (inode == null) {
+        break;
+      }
+      check(inode, snapshotId, FsAction.EXECUTE);
-  private void check(INode[] inodes, int i, int snapshotId, FsAction access
-      ) throws AccessControlException {
-    check(i >= 0? inodes[i]: null, snapshotId, access);
-  }
-
-  /** Guarded by {@link FSNamesystem#readLock()} */
-  private void check(INode inode, int snapshotId, FsAction access
-      ) throws AccessControlException {
+  private void check(INode inode, int snapshotId, FsAction access)
+      throws AccessControlException {

INS26 INS40 INS31 MOV29 MOV83 MOV39 MOV42 MOV44 MOV44 MOV43 INS8 INS60 INS60 INS21 INS25 INS43 INS42 INS60 INS24 INS83 INS39 INS59 INS83 MOV43 INS59 MOV43 INS32 MOV27 INS8 INS27 INS42 INS74 INS59 MOV58 UPD27 MOV27 MOV37 INS8 INS42 INS32 INS42 INS16 UPD42 INS16 INS42 INS42 INS42 INS60 INS60 INS24 MOV21 MOV27 INS27 INS43 INS43 INS42 INS32 UPD42 INS27 UPD42 INS60 INS25 MOV21 INS42 INS42 INS27 INS32 INS33 INS27 INS32 INS33 INS42 INS74 INS59 MOV43 INS59 INS58 MOV27 MOV37 MOV20 INS42 INS33 INS42 INS42 INS42 INS42 UPD42 INS32 INS34 MOV43 INS59 INS27 INS8 INS42 INS34 INS42 INS42 INS42 INS34 MOV42 UPD42 MOV42 INS38 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS39 INS59 MOV27 UPD42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 INS33 INS10 INS42 INS40 INS34 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV27 MOV34 INS36 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL85 DEL5 DEL32 DEL39 DEL59 DEL60 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL59 DEL60 DEL40 DEL42 DEL40 DEL34 DEL27 DEL2 DEL40 DEL40 DEL42 DEL42 DEL2 DEL42 DEL8 DEL25 DEL40 DEL40 DEL34 DEL27 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL2 DEL33 DEL16 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL2 DEL42 DEL40 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31