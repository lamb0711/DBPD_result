YARN-10022. RM Rest API to validate the CapacityScheduler Configuration change

Contributed by Kinga Marton.

-    int minMem = conf.getInt(
-      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,
-      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);
-    int maxMem = conf.getInt(
-      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,
-      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);
-
-    if (minMem <= 0 || minMem > maxMem) {
-      throw new YarnRuntimeException("Invalid resource scheduler memory"
-        + " allocation configuration"
-        + ", " + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB
-        + "=" + minMem
-        + ", " + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
-        + "=" + maxMem + ", min and max should be greater than 0"
-        + ", max should be no smaller than min.");
-    }
-
+    CapacitySchedulerConfigValidator.validateMemoryAllocation(conf);
-    int minVcores = conf.getInt(
-      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,
-      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
-    int maxVcores = conf.getInt(
-      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,
-      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);
-
-    if (minVcores <= 0 || minVcores > maxVcores) {
-      throw new YarnRuntimeException("Invalid resource scheduler vcores"
-        + " allocation configuration"
-        + ", " + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
-        + "=" + minVcores
-        + ", " + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
-        + "=" + maxVcores + ", min and max should be greater than 0"
-        + ", max should be no smaller than min.");
-    }
+    CapacitySchedulerConfigValidator.validateVCores(conf);
-  @Override
-  public void reinitialize(Configuration newConf, RMContext rmContext)
-      throws IOException {
+  public void reinitialize(Configuration newConf, RMContext rmContext,
+         boolean validation) throws IOException {
-      this.conf = csConfProvider.loadConfiguration(configuration);
+      if (validation) {
+        this.conf = new CapacitySchedulerConfiguration(newConf, false);
+      } else {
+        this.conf = csConfProvider.loadConfiguration(configuration);
+      }
+      if (!validation) {
-      // update lazy preemption
-      this.isLazyPreemptionEnabled = this.conf.getLazyPreemptionEnabled();
+        // update lazy preemption
+        this.isLazyPreemptionEnabled = this.conf.getLazyPreemptionEnabled();
-      // Setup how many containers we can allocate for each round
-      offswitchPerHeartbeatLimit = this.conf.getOffSwitchPerHeartbeatLimit();
+        // Setup how many containers we can allocate for each round
+        offswitchPerHeartbeatLimit = this.conf.getOffSwitchPerHeartbeatLimit();
-      super.reinitialize(newConf, rmContext);
+        super.reinitialize(newConf, rmContext);
+      }
+
+  }
+
+  @Override
+  public void reinitialize(Configuration newConf, RMContext rmContext)
+      throws IOException {
+    reinitialize(newConf, rmContext, false);
-    Set<String> distingushRuleSet = new HashSet<>();
-    // fail the case if we get duplicate placementRule add in
-    for (String pls : placementRuleStrs) {
-      if (!distingushRuleSet.add(pls)) {
-        throw new IOException("Invalid PlacementRule inputs which "
-            + "contains duplicate rule strings");
-      }
-    }
+    Set<String> distinguishRuleSet = CapacitySchedulerConfigValidator
+            .validatePlacementRules(placementRuleStrs);
-    distingushRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);
+    distinguishRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);
-    placementRuleStrs = new ArrayList<>(distingushRuleSet);
+    placementRuleStrs = new ArrayList<>(distinguishRuleSet);

INS31 INS31 MOV83 MOV39 MOV42 MOV44 INS8 INS44 MOV78 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS21 INS21 INS39 INS42 INS43 INS42 INS43 INS42 INS21 INS60 INS32 INS32 INS42 INS42 INS32 MOV74 INS59 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 MOV42 INS25 INS25 INS42 INS42 INS42 INS9 UPD42 MOV42 INS32 UPD42 INS42 INS8 INS8 INS38 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS21 MOV21 INS42 MOV21 MOV21 MOV21 INS7 INS22 INS14 INS52 INS42 INS43 INS42 INS9 INS42 DEL39 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL39 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL43 DEL45 DEL45 DEL45 DEL27 DEL40 DEL45 DEL42 DEL45 DEL40 DEL45 DEL42 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL43 DEL45 DEL45 DEL45 DEL27 DEL40 DEL45 DEL42 DEL45 DEL40 DEL45 DEL42 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL38 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL70