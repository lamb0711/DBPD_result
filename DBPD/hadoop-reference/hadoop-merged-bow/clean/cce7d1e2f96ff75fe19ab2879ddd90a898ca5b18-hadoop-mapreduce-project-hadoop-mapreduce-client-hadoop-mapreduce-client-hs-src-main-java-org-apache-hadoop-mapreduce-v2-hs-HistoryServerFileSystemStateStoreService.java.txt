Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

+import java.util.HashSet;
+import java.util.Set;
+  private static final String UPDATE_TMP_FILE_PREFIX = "update-";
-    fs = rootStatePath.getFileSystem(getConfig());
+    fs = createFileSystem();
+  FileSystem createFileSystem() throws IOException {
+    return rootStatePath.getFileSystem(getConfig());
+  }
+
-    createFile(tokenPath, buildTokenData(tokenId, renewDate));
+    createNewFile(tokenPath, buildTokenData(tokenId, renewDate));
-    createFile(getTokenPath(tokenId), buildTokenData(tokenId, renewDate));
+
+    // Files cannot be atomically replaced, therefore we write a temporary
+    // update file, remove the original token file, then rename the update
+    // file to the token file. During recovery either the token file will be
+    // used or if that is missing and an update file is present then the
+    // update file is used.
+    Path tokenPath = getTokenPath(tokenId);
+    Path tmp = new Path(tokenPath.getParent(),
+        UPDATE_TMP_FILE_PREFIX + tokenPath.getName());
+    writeFile(tmp, buildTokenData(tokenId, renewDate));
+    try {
+      deleteFile(tokenPath);
+    } catch (IOException e) {
+      fs.delete(tmp, false);
+      throw e;
+    }
+    if (!fs.rename(tmp, tokenPath)) {
+      throw new IOException("Could not rename " + tmp + " to " + tokenPath);
+    }
-    createFile(keyPath, memStream.toByteArray());
+    createNewFile(keyPath, memStream.toByteArray());
-  private void createFile(Path file, byte[] data) throws IOException {
-    final int WRITE_BUFFER_SIZE = 4096;
+  private void createNewFile(Path file, byte[] data)
+      throws IOException {
-    FSDataOutputStream out = fs.create(tmp, FILE_PERMISSIONS, true,
-        WRITE_BUFFER_SIZE, fs.getDefaultReplication(tmp),
-        fs.getDefaultBlockSize(tmp), null);
+    writeFile(tmp, data);
+    try {
+      if (!fs.rename(tmp, file)) {
+        throw new IOException("Could not rename " + tmp + " to " + file);
+      }
+    } catch (IOException e) {
+      fs.delete(tmp, false);
+      throw e;
+    }
+  }
+
+  private void writeFile(Path file, byte[] data) throws IOException {
+    final int WRITE_BUFFER_SIZE = 4096;
+    FSDataOutputStream out = fs.create(file, FILE_PERMISSIONS, true,
+        WRITE_BUFFER_SIZE, fs.getDefaultReplication(file),
+        fs.getDefaultBlockSize(file), null);
-      if (!fs.rename(tmp, file)) {
-        throw new IOException("Could not rename " + tmp + " to " + file);
-      }
-      fs.delete(tmp, false);
+      fs.delete(file, false);
+  private void loadTokenFromBucket(int bucketId,
+      HistoryServerState state, Path tokenFile, long numTokenFileBytes)
+          throws IOException {
+    MRDelegationTokenIdentifier token =
+        loadToken(state, tokenFile, numTokenFileBytes);
+    int tokenBucketId = getBucketId(token);
+    if (tokenBucketId != bucketId) {
+      throw new IOException("Token " + tokenFile
+          + " should be in bucket " + tokenBucketId + ", found in bucket "
+          + bucketId);
+    }
+  }
+
+    Set<String> loadedTokens = new HashSet<String>(tokenStats.length);
-        MRDelegationTokenIdentifier token =
-            loadToken(state, stat.getPath(), stat.getLen());
-        int tokenBucketId = getBucketId(token);
-        if (tokenBucketId != bucketId) {
-          throw new IOException("Token " + stat.getPath()
-              + " should be in bucket " + tokenBucketId + ", found in bucket "
-              + bucketId);
-        }
+        loadTokenFromBucket(bucketId, state, stat.getPath(), stat.getLen());
+        loadedTokens.add(name);
+      } else if (name.startsWith(UPDATE_TMP_FILE_PREFIX)) {
+        String tokenName = name.substring(UPDATE_TMP_FILE_PREFIX.length());
+        if (loadedTokens.contains(tokenName)) {
+          // already have the token, update may be partial so ignore it
+          fs.delete(stat.getPath(), false);
+        } else {
+          // token is missing, so try to parse the update temp file
+          loadTokenFromBucket(bucketId, state, stat.getPath(), stat.getLen());
+          fs.rename(stat.getPath(),
+              new Path(stat.getPath().getParent(), tokenName));
+          loadedTokens.add(tokenName);
+          ++numTokens;
+        }
+      } else if (name.startsWith(TMP_FILE_PREFIX)) {
+        // cleanup incomplete temp files
+        fs.delete(stat.getPath(), false);

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS43 INS42 INS43 INS8 UPD42 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS41 INS21 INS60 INS60 MOV21 INS54 INS25 INS21 INS43 INS42 INS5 INS42 INS42 MOV60 INS60 INS54 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 MOV60 INS25 INS60 MOV32 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS38 INS8 INS32 INS42 INS39 INS85 MOV43 INS59 INS8 INS12 INS42 INS42 MOV43 INS59 MOV27 INS8 INS74 INS59 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS14 UPD42 UPD42 INS21 INS44 INS8 INS32 INS53 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS32 MOV54 INS44 INS8 INS42 INS32 INS53 INS43 INS43 INS42 INS14 INS25 INS42 INS42 INS42 INS42 MOV42 MOV42 INS43 INS32 INS27 INS32 INS43 INS42 INS21 INS53 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS14 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS32 INS33 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS74 INS40 MOV32 INS8 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV43 INS27 INS43 INS43 INS21 INS21 INS21 INS32 MOV8 INS25 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS38 INS42 INS42 INS42 INS32 INS8 MOV8 INS42 INS42 INS42 INS32 MOV32 INS42 INS42 INS42 INS42 INS43 INS32 INS8 INS42 INS42 INS42 INS21 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 MOV21 INS32 UPD42 UPD42 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 MOV32 INS9 INS42 INS42 INS42 INS32 INS32 INS42 INS42 MOV32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL9 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL33 DEL32 DEL59 DEL60 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL25