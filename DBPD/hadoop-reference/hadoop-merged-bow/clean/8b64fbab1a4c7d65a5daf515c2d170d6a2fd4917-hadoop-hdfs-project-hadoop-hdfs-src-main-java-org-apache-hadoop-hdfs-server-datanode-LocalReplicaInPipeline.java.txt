HDFS-13994. Improve DataNode BlockSender waitForMinLength. Contributed by BELUGA BEHR.

+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
-                        implements ReplicaInPipeline {
+    implements ReplicaInPipeline {
+
+  private final Lock lock = new ReentrantLock();
+  private final Condition bytesOnDiskChange = lock.newCondition();
+
-  @Override // ReplicaInPipeline
-  public synchronized void setLastChecksumAndDataLen(long dataLength,
-      byte[] checksum) {
-    this.bytesOnDisk = dataLength;
-    this.lastChecksum = checksum;
+  @Override
+  public void setLastChecksumAndDataLen(long dataLength, byte[] checksum) {
+    lock.lock();
+    try {
+      this.bytesOnDisk = dataLength;
+      this.lastChecksum = checksum;
+      bytesOnDiskChange.signalAll();
+    } finally {
+      lock.unlock();
+    }
-  @Override // ReplicaInPipeline
-  public synchronized ChunkChecksum getLastChecksumAndDataLen() {
-    return new ChunkChecksum(getBytesOnDisk(), lastChecksum);
+  @Override
+  public ChunkChecksum getLastChecksumAndDataLen() {
+    lock.lock();
+    try {
+      return new ChunkChecksum(getBytesOnDisk(), lastChecksum);
+    } finally {
+      lock.unlock();
+    }
+  }
+
+  @Override
+  public void waitForMinLength(long minLength, long time, TimeUnit unit)
+      throws IOException {
+    long nanos = unit.toNanos(time);
+    lock.lock();
+    try {
+      while (bytesOnDisk < minLength) {
+        if (nanos <= 0L) {
+          throw new IOException(
+              String.format("Need %d bytes, but only %d bytes available",
+                  minLength, bytesOnDisk));
+        }
+        nanos = bytesOnDiskChange.awaitNanos(nanos);
+      }
+    } catch (InterruptedException e) {
+      throw new IOException(e);
+    } finally {
+      lock.unlock();
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS8 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS21 INS54 INS21 INS54 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS42 INS60 INS21 INS54 INS43 INS42 INS42 INS32 MOV8 INS8 INS32 MOV8 INS8 INS42 INS39 INS59 INS32 INS8 INS12 INS8 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS61 INS44 INS8 INS21 INS32 INS32 INS32 INS42 INS42 INS42 INS27 INS8 INS43 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS21 INS42 INS14 INS42 INS42 INS27 INS8 INS7 INS43 INS42 INS42 INS34 INS53 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS45 INS42 INS42 DEL83 DEL83