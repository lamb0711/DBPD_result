YARN-4081. Add support for multiple resource types in the Resource class. (Varun Vasudev via wangda)

+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.exceptions.ResourceNotFoundException;
+import org.apache.hadoop.yarn.exceptions.YarnException;
+import org.apache.hadoop.yarn.util.Records;
-@InterfaceAudience.LimitedPrivate({"YARN", "MapReduce"})
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+@InterfaceAudience.LimitedPrivate({ "YARN", "MapReduce" })
-  
-  // Java doesn't have const :(
-  private static final Resource NONE = new Resource() {
+
+  /**
+   * Helper class to create a resource with a fixed value for all resource
+   * types. For example, a NONE resource which returns 0 for any resource type.
+   */
+  static class FixedValueResource extends Resource {
+
+    private Map<String, ResourceInformation> resources;
+    private Long resourceValue;
+    private String name;
+
+    /**
+     * Constructor for a fixed value resource
+     * @param rName the name of the resource
+     * @param value the fixed value to be returned for all resource types
+     */
+    FixedValueResource(String rName, Long value) {
+      this.resourceValue = value;
+      this.name = rName;
+      resources = initResourceMap();
+    }
+
+    private int resourceValueToInt() {
+      if(this.resourceValue > Integer.MAX_VALUE) {
+        return Integer.MAX_VALUE;
+      }
+      return this.resourceValue.intValue();
+    }
-      return 0;
+      return resourceValueToInt();
-      return 0;
+      return this.resourceValue;
-    public void setMemorySize(long memory) {
-      throw new RuntimeException("NONE cannot be modified!");
+    public void setMemory(int memory) {
+      throw new RuntimeException(name + " cannot be modified!");
-    public void setMemory(int memory) {
-      throw new RuntimeException("NONE cannot be modified!");
+    public void setMemorySize(long memory) {
+      throw new RuntimeException(name + " cannot be modified!");
-      return 0;
+      return resourceValueToInt();
-    public void setVirtualCores(int cores) {
-      throw new RuntimeException("NONE cannot be modified!");
+    public void setVirtualCores(int virtualCores) {
+      throw new RuntimeException(name + " cannot be modified!");
-    public int compareTo(Resource o) {
-      long diff = 0 - o.getMemorySize();
-      if (diff == 0) {
-        diff = 0 - o.getVirtualCores();
+    public Map<String, ResourceInformation> getResources() {
+      return Collections.unmodifiableMap(this.resources);
+    }
+
+    @Override
+    public ResourceInformation getResourceInformation(String resource)
+        throws YarnException {
+      if (resources.containsKey(resource)) {
+        ResourceInformation value = this.resources.get(resource);
+        ResourceInformation ret = ResourceInformation.newInstance(value);
+        ret.setValue(resourceValue);
+        return ret;
-      return Long.signum(diff);
-    }
-    
-  };
-  
-  private static final Resource UNBOUNDED = new Resource() {
-
-    @Override
-    @SuppressWarnings("deprecation")
-    public int getMemory() {
-      return Integer.MAX_VALUE;
+      throw new YarnException("" + resource + " not found");
-    public long getMemorySize() {
-      return Long.MAX_VALUE;
-    }
-
-    @Override
-    @SuppressWarnings("deprecation")
-    public void setMemory(int memory) {
-      throw new RuntimeException("UNBOUNDED cannot be modified!");
-    }
-
-    @Override
-    public void setMemorySize(long memory) {
-      throw new RuntimeException("UNBOUNDED cannot be modified!");
-    }
-
-    @Override
-    public int getVirtualCores() {
-      return Integer.MAX_VALUE;
-    }
-
-    @Override
-    public void setVirtualCores(int cores) {
-      throw new RuntimeException("UNBOUNDED cannot be modified!");
-    }
-
-    @Override
-    public int compareTo(Resource o) {
-      long diff = Long.MAX_VALUE - o.getMemorySize();
-      if (diff == 0) {
-        diff = Integer.MAX_VALUE - o.getVirtualCores();
+    public Long getResourceValue(String resource) throws YarnException {
+      if (resources.containsKey(resource)) {
+        return resourceValue;
-      return Long.signum(diff);
+      throw new YarnException("" + resource + " not found");
-    
-  };
+
+    @Override
+    public void setResources(Map<String, ResourceInformation> resources) {
+      throw new RuntimeException(name + " cannot be modified!");
+    }
+
+    @Override
+    public void setResourceInformation(String resource,
+        ResourceInformation resourceInformation)
+        throws ResourceNotFoundException {
+      throw new RuntimeException(name + " cannot be modified!");
+    }
+
+    @Override
+    public void setResourceValue(String resource, Long value)
+        throws ResourceNotFoundException {
+      throw new RuntimeException(name + " cannot be modified!");
+    }
+
+    private Map<String, ResourceInformation> initResourceMap() {
+      Map<String, ResourceInformation> tmp = new HashMap<>();
+      // Due to backwards compat, the max value for memory and vcores
+      // needs to be Integer.MAX_VALUE
+      int max = resourceValue > Integer.MAX_VALUE ? Integer.MAX_VALUE :
+          resourceValue.intValue();
+      tmp.put(ResourceInformation.MEMORY.getName(), ResourceInformation
+          .newInstance(ResourceInformation.MEMORY.getName(),
+              ResourceInformation.MEMORY_MB.getUnits(), (long) max));
+      tmp.put(ResourceInformation.VCORES.getName(), ResourceInformation
+          .newInstance(ResourceInformation.VCORES.getName(), (long) max));
+      return tmp;
+    }
+
+  }
+  private static final Resource UNBOUNDED =
+      new FixedValueResource("UNBOUNDED", Long.MAX_VALUE);
+
+  private static final Resource NONE = new FixedValueResource("NONE", 0L);
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS23 INS23 INS29 INS83 INS42 MOV43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 MOV43 INS59 INS65 UPD83 MOV83 INS74 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 MOV78 MOV79 MOV83 MOV39 MOV42 MOV8 MOV78 MOV83 MOV39 MOV42 MOV8 MOV78 MOV83 MOV39 UPD42 MOV42 MOV44 MOV8 MOV78 MOV79 MOV83 MOV39 UPD42 MOV42 MOV44 MOV8 MOV78 MOV83 MOV39 MOV42 MOV8 UPD42 INS44 MOV78 MOV83 INS74 UPD42 MOV42 INS8 MOV78 MOV83 INS43 INS42 MOV44 INS43 INS8 MOV78 INS83 INS43 INS42 INS44 INS43 INS8 MOV78 MOV83 MOV39 UPD42 MOV42 INS44 MOV8 MOV78 MOV83 UPD39 MOV39 INS42 INS44 INS44 INS43 MOV8 MOV78 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 INS43 MOV8 UPD83 MOV83 INS74 INS42 MOV8 INS42 INS14 INS42 INS14 INS66 INS66 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS25 INS41 INS39 INS42 INS43 INS43 INS43 INS41 INS42 UPD43 UPD42 INS42 INS25 INS53 INS42 INS43 INS42 INS42 INS25 INS53 INS74 INS42 INS43 INS42 INS43 INS42 INS42 INS43 UPD42 INS43 INS42 INS42 INS43 INS43 INS43 INS60 INS21 INS21 INS41 INS43 INS45 INS40 INS43 INS45 INS34 INS42 INS42 UPD42 MOV42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS7 INS7 INS7 INS27 MOV8 INS32 INS32 INS22 INS32 INS42 INS42 INS42 INS32 UPD42 INS32 INS8 INS14 UPD42 MOV42 INS32 INS8 INS14 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 UPD39 INS32 INS32 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS32 INS22 INS40 INS22 INS42 INS42 INS52 INS42 INS27 INS27 INS42 INS27 INS42 INS42 INS22 INS42 INS42 INS42 MOV60 INS60 INS21 INS41 INS43 INS27 INS42 INS42 INS42 MOV41 INS43 INS27 INS42 INS42 INS42 INS27 INS27 INS27 INS43 INS43 INS43 INS42 INS14 UPD42 INS16 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS52 INS42 INS52 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS52 INS42 INS43 INS43 INS59 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS74 INS27 INS40 INS32 INS40 INS42 UPD42 MOV42 INS42 INS32 INS32 INS11 INS40 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS11 INS42 UPD42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS40 UPD42 MOV42 INS39 INS42 INS40 UPD42 MOV42 INS39 INS42 INS22 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS52 INS42 DEL34 DEL34 DEL45 DEL45 DEL34 DEL45 DEL39 DEL34 DEL42 DEL32 DEL27 DEL40 DEL45 DEL45 DEL39 DEL45 DEL32 DEL27 DEL42 DEL34 DEL27 DEL42 DEL40 DEL32 DEL27 DEL7 DEL21 DEL8 DEL25 DEL32 DEL41 DEL83 DEL83 DEL42 DEL43 DEL42 DEL78 DEL42 DEL45 DEL79 DEL31 DEL42 DEL78 DEL31 DEL39 DEL42 DEL44 DEL31 DEL42 DEL45 DEL79 DEL39 DEL42 DEL44 DEL31 DEL31 DEL39 DEL39 DEL42 DEL44 DEL31 DEL39 DEL42 DEL42 DEL34 DEL27 DEL42 DEL34 DEL32 DEL27 DEL7 DEL21 DEL8 DEL25 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL40 DEL41 DEL8 DEL31 DEL31 DEL42 DEL31 DEL31 DEL39 DEL42 DEL42 DEL44 DEL31 DEL1 DEL14 DEL59 DEL23