Revert "HDFS-9694. Make existing DFSClient#getFileChecksum() work for striped blocks. Contributed by Kai Zheng"

This reverts commit e5ff0ea7ba087984262f1f27200ae5bb40d9b838.

-import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
-import org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy;
-import org.apache.hadoop.hdfs.protocol.StripedBlockInfo;
-import org.apache.hadoop.hdfs.protocol.datatransfer.DataTransferProtoUtil;
-import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
-import org.apache.hadoop.hdfs.protocol.datatransfer.Op;
-import org.apache.hadoop.hdfs.protocol.datatransfer.Sender;
-import org.apache.hadoop.hdfs.protocol.proto.DataTransferProtos;
-import org.apache.hadoop.hdfs.protocolPB.PBHelperClient;
-import org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier;
-import org.apache.hadoop.hdfs.util.StripedBlockUtil;
-import org.apache.hadoop.io.DataOutputBuffer;
-import org.apache.hadoop.security.token.Token;
-import java.io.DataOutputStream;
-  private BlockChecksumHelper() {
-  }
+  private BlockChecksumHelper() {}
-  static abstract class AbstractBlockChecksumComputer {
+  static abstract class BlockChecksumComputer {
-
-    private byte[] outBytes;
-    private int bytesPerCRC = -1;
-    private DataChecksum.Type crcType = null;
-    private long crcPerBlock = -1;
-    private int checksumSize = -1;
-
-    AbstractBlockChecksumComputer(DataNode datanode) throws IOException {
-      this.datanode = datanode;
-    }
-
-    abstract void compute() throws IOException;
-
-    Sender createSender(IOStreamPair pair) {
-      DataOutputStream out = (DataOutputStream) pair.out;
-      return new Sender(out);
-    }
-
-    DataNode getDatanode() {
-      return datanode;
-    }
-
-    InputStream getBlockInputStream(ExtendedBlock block, long seekOffset)
-        throws IOException {
-      return datanode.data.getBlockInputStream(block, seekOffset);
-    }
-
-    void setOutBytes(byte[] bytes) {
-      this.outBytes = bytes;
-    }
-
-    byte[] getOutBytes() {
-      return outBytes;
-    }
-
-    int getBytesPerCRC() {
-      return bytesPerCRC;
-    }
-
-    public void setBytesPerCRC(int bytesPerCRC) {
-      this.bytesPerCRC = bytesPerCRC;
-    }
-
-    public void setCrcType(DataChecksum.Type crcType) {
-      this.crcType = crcType;
-    }
-
-    public void setCrcPerBlock(long crcPerBlock) {
-      this.crcPerBlock = crcPerBlock;
-    }
-
-    public void setChecksumSize(int checksumSize) {
-      this.checksumSize = checksumSize;
-    }
-
-    DataChecksum.Type getCrcType() {
-      return crcType;
-    }
-
-    long getCrcPerBlock() {
-      return crcPerBlock;
-    }
-
-    int getChecksumSize() {
-      return checksumSize;
-    }
-  }
-
-  /**
-   * The abstract base block checksum computer.
-   */
-  static abstract class BlockChecksumComputer
-      extends AbstractBlockChecksumComputer {
+    private byte[] outBytes;
+    private int bytesPerCRC = -1;
+    private DataChecksum.Type crcType = null;
+    private long crcPerBlock = -1;
+    private int checksumSize = -1;
-      super(datanode);
+      this.datanode = datanode;
-    Sender createSender(IOStreamPair pair) {
-      DataOutputStream out = (DataOutputStream) pair.out;
-      return new Sender(out);
+    protected DataNode getDatanode() {
+      return datanode;
-
-    ExtendedBlock getBlock() {
+    protected ExtendedBlock getBlock() {
-    long getRequestLength() {
+    protected long getRequestLength() {
-    LengthInputStream getMetadataIn() {
+    protected LengthInputStream getMetadataIn() {
-    DataInputStream getChecksumIn() {
+    protected DataInputStream getChecksumIn() {
-    long getVisibleLength() {
+    protected long getVisibleLength() {
-    boolean isPartialBlk() {
+    protected boolean isPartialBlk() {
-    BlockMetadataHeader getHeader() {
+    protected void setOutBytes(byte[] bytes) {
+      this.outBytes = bytes;
+    }
+
+    protected byte[] getOutBytes() {
+      return outBytes;
+    }
+
+    protected int getBytesPerCRC() {
+      return bytesPerCRC;
+    }
+
+    protected DataChecksum.Type getCrcType() {
+      return crcType;
+    }
+
+    protected long getCrcPerBlock() {
+      return crcPerBlock;
+    }
+
+    protected int getChecksumSize() {
+      return checksumSize;
+    }
+
+    protected BlockMetadataHeader getHeader() {
-    DataChecksum getChecksum() {
+    protected DataChecksum getChecksum() {
-     *
-     *
-    void readHeader() throws IOException {
+    protected void readHeader() throws IOException {
-      setChecksumSize(checksum.getChecksumSize());
-      setBytesPerCRC(checksum.getBytesPerChecksum());
-      long crcPerBlock = checksum.getChecksumSize() <= 0 ? 0 :
+      checksumSize = checksum.getChecksumSize();
+      bytesPerCRC = checksum.getBytesPerChecksum();
+      crcPerBlock = checksumSize <= 0 ? 0 :
-              BlockMetadataHeader.getHeaderSize()) / checksum.getChecksumSize();
-      setCrcPerBlock(crcPerBlock);
-      setCrcType(checksum.getChecksumType());
+              BlockMetadataHeader.getHeaderSize()) / checksumSize;
+      crcType = checksum.getChecksumType();
-     *
-    byte[] crcPartialBlock() throws IOException {
-      int partialLength = (int) (requestLength % getBytesPerCRC());
+    protected byte[] crcPartialBlock() throws IOException {
+      int partialLength = (int) (requestLength % bytesPerCRC);
-        final InputStream blockIn = getBlockInputStream(block,
+        final InputStream blockIn = datanode.data.getBlockInputStream(block,
-        byte[] partialCrc = new byte[getChecksumSize()];
+        byte[] partialCrc = new byte[checksumSize];
-      byte[] buffer = new byte[4 * 1024];
+      byte[] buffer = new byte[4*1024];
-
-  /**
-   * Non-striped block group checksum computer for striped blocks.
-   */
-  static class BlockGroupNonStripedChecksumComputer
-      extends AbstractBlockChecksumComputer {
-
-    private final ExtendedBlock blockGroup;
-    private final ErasureCodingPolicy ecPolicy;
-    private final DatanodeInfo[] datanodes;
-    private final Token<BlockTokenIdentifier>[] blockTokens;
-
-    private final DataOutputBuffer md5writer = new DataOutputBuffer();
-
-    BlockGroupNonStripedChecksumComputer(DataNode datanode,
-                                         StripedBlockInfo stripedBlockInfo)
-        throws IOException {
-      super(datanode);
-      this.blockGroup = stripedBlockInfo.getBlock();
-      this.ecPolicy = stripedBlockInfo.getErasureCodingPolicy();
-      this.datanodes = stripedBlockInfo.getDatanodes();
-      this.blockTokens = stripedBlockInfo.getBlockTokens();
-    }
-
-    @Override
-    void compute() throws IOException {
-      for (int idx = 0; idx < ecPolicy.getNumDataUnits(); idx++) {
-        ExtendedBlock block =
-            StripedBlockUtil.constructInternalBlock(blockGroup,
-            ecPolicy.getCellSize(), ecPolicy.getNumDataUnits(), idx);
-        DatanodeInfo targetDatanode = datanodes[idx];
-        Token<BlockTokenIdentifier> blockToken = blockTokens[idx];
-        checksumBlock(block, idx, blockToken, targetDatanode);
-      }
-
-      MD5Hash md5out = MD5Hash.digest(md5writer.getData());
-      setOutBytes(md5out.getDigest());
-    }
-
-    private void checksumBlock(ExtendedBlock block, int blockIdx,
-                               Token<BlockTokenIdentifier> blockToken,
-                               DatanodeInfo targetDatanode) throws IOException {
-      int timeout = 3000;
-      try (IOStreamPair pair = getDatanode().connectToDN(targetDatanode,
-          timeout, block, blockToken)) {
-
-        LOG.debug("write to {}: {}, block={}",
-            getDatanode(), Op.BLOCK_CHECKSUM, block);
-
-        // get block MD5
-        createSender(pair).blockChecksum(block, blockToken);
-
-        final DataTransferProtos.BlockOpResponseProto reply =
-            DataTransferProtos.BlockOpResponseProto.parseFrom(
-                PBHelperClient.vintPrefixed(pair.in));
-
-        String logInfo = "for block " + block
-            + " from datanode " + targetDatanode;
-        DataTransferProtoUtil.checkBlockOpStatus(reply, logInfo);
-
-        DataTransferProtos.OpBlockChecksumResponseProto checksumData =
-            reply.getChecksumResponse();
-
-        //read byte-per-checksum
-        final int bpc = checksumData.getBytesPerCrc();
-        if (blockIdx == 0) { //first block
-          setBytesPerCRC(bpc);
-        } else if (bpc != getBytesPerCRC()) {
-          throw new IOException("Byte-per-checksum not matched: bpc=" + bpc
-              + " but bytesPerCRC=" + getBytesPerCRC());
-        }
-
-        //read crc-per-block
-        final long cpb = checksumData.getCrcPerBlock();
-        if (blockIdx == 0) {
-          setCrcPerBlock(cpb);
-        }
-
-        //read md5
-        final MD5Hash md5 = new MD5Hash(
-            checksumData.getMd5().toByteArray());
-        md5.write(md5writer);
-
-        // read crc-type
-        final DataChecksum.Type ct;
-        if (checksumData.hasCrcType()) {
-          ct = PBHelperClient.convert(checksumData.getCrcType());
-        } else {
-          LOG.debug("Retrieving checksum from an earlier-version DataNode: " +
-              "inferring checksum by reading first byte");
-          ct = DataChecksum.Type.DEFAULT;
-        }
-
-        if (blockIdx == 0) { // first block
-          setCrcType(ct);
-        } else if (getCrcType() != DataChecksum.Type.MIXED &&
-            getCrcType() != ct) {
-          // if crc types are mixed in a file
-          setCrcType(DataChecksum.Type.MIXED);
-        }
-
-        if (LOG.isDebugEnabled()) {
-          if (blockIdx == 0) {
-            LOG.debug("set bytesPerCRC=" + getBytesPerCRC()
-                + ", crcPerBlock=" + getCrcPerBlock());
-          }
-          LOG.debug("got reply from " + targetDatanode + ": md5=" + md5);
-        }
-      }
-    }
-  }
-}
+}

MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 MOV21 INS7 INS7 INS7 INS7 INS42 MOV32 INS42 MOV32 INS42 MOV16 INS42 MOV32 MOV5 INS42 INS42 INS42 INS40 MOV5 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL40 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL55 DEL42 DEL43 DEL42 DEL46 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL85 DEL5 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL46 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL39 DEL42 DEL42 DEL43 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL45 DEL42 DEL32 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL40 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL40 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL40 DEL27 DEL42 DEL32 DEL42 DEL27 DEL27 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL32 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL45 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL55