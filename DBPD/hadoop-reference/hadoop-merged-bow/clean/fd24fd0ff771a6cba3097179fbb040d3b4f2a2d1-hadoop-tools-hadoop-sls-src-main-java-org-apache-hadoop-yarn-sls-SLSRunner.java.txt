YARN-8137. Parallelize node addition in SLS. Contributed by Abhishek Modi.

+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
+import org.eclipse.jetty.util.ConcurrentHashSet;
+  private int poolSize;
-  private HashMap<NodeId, NMSimulator> nmMap;
+  private Map<NodeId, NMSimulator> nmMap;
-    nmMap = new HashMap<>();
+    nmMap = new ConcurrentHashMap<>();
-    int poolSize = tempConf.getInt(SLSConfiguration.RUNNER_POOL_SIZE,
+    poolSize = tempConf.getInt(SLSConfiguration.RUNNER_POOL_SIZE,
-  private void startNM() throws YarnException, IOException {
+  private void startNM() throws YarnException, IOException,
+      InterruptedException {
-    Set<String> rackSet = new HashSet<String>();
+    Set<String> rackSet = new ConcurrentHashSet<>();
+    int threadPoolSize = Math.max(poolSize,
+        SLSConfiguration.RUNNER_POOL_SIZE_DEFAULT);
+    ExecutorService executorService = Executors.
+        newFixedThreadPool(threadPoolSize);
-      // we randomize the heartbeat start time from zero to 1 interval
-      NMSimulator nm = new NMSimulator();
-      Resource nmResource = nodeManagerResource;
-      String hostName = entry.getKey();
-      if (entry.getValue() != null) {
-        nmResource = entry.getValue();
-      }
-      nm.init(hostName, nmResource, random.nextInt(heartbeatInterval),
-          heartbeatInterval, rm, resourceUtilizationRatio);
-      nmMap.put(nm.getNode().getNodeID(), nm);
-      runner.schedule(nm);
-      rackSet.add(nm.getNode().getRackName());
+      executorService.submit(new Runnable() {
+        @Override public void run() {
+          try {
+            // we randomize the heartbeat start time from zero to 1 interval
+            NMSimulator nm = new NMSimulator();
+            Resource nmResource = nodeManagerResource;
+            String hostName = entry.getKey();
+            if (entry.getValue() != null) {
+              nmResource = entry.getValue();
+            }
+            nm.init(hostName, nmResource,
+                random.nextInt(heartbeatInterval),
+                heartbeatInterval, rm, resourceUtilizationRatio);
+            nmMap.put(nm.getNode().getNodeID(), nm);
+            runner.schedule(nm);
+            rackSet.add(nm.getNode().getRackName());
+          } catch (IOException | YarnException e) {
+            LOG.error("Got an error while adding node", e);
+          }
+        }
+      });
+    executorService.shutdown();
+    executorService.awaitTermination(10, TimeUnit.MINUTES);
-  public HashMap<NodeId, NMSimulator> getNmMap() {
+  public Map<NodeId, NMSimulator> getNmMap() {

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS83 INS39 INS59 UPD74 INS43 UPD74 INS42 UPD43 INS21 INS42 INS60 INS60 INS21 INS21 UPD43 UPD42 INS7 INS39 INS59 INS43 INS59 INS8 INS32 INS32 UPD42 INS42 MOV32 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS34 INS40 UPD74 UPD74 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 UPD43 UPD43 INS42 INS42 INS14 UPD42 UPD42 INS43 INS1 INS42 INS31 INS78 INS83 INS39 INS42 INS8 INS42 INS54 MOV8 INS12 INS44 INS8 INS84 INS42 INS21 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS45 INS42 DEL39 DEL42 DEL59 DEL60 DEL42 DEL43