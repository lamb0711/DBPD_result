MAPREDUCE-2789. Complete schedulingInfo on CLI. Contributed by Eric Payne.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1182616 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import org.apache.hadoop.yarn.api.records.ApplicationResourceUsageReport;
+import org.apache.hadoop.yarn.server.resourcemanager.resource.Resources;
+import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerAppReport;
+  @Override
+  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {
+    this.readLock.lock();
+    
+    try {
+      int numUsedContainers = 0;
+      int numReservedContainers = 0;
+      int reservedResources = 0;
+      int currentConsumption = 0;
+      SchedulerAppReport schedApp = 
+          scheduler.getSchedulerAppInfo(this.getAppAttemptId());
+      Collection<RMContainer> liveContainers;
+      Collection<RMContainer> reservedContainers;
+      if (schedApp != null) {
+        liveContainers = schedApp.getLiveContainers();
+        reservedContainers = schedApp.getReservedContainers();
+        if (liveContainers != null) {
+          numUsedContainers = liveContainers.size();
+          for (RMContainer lc : liveContainers) {
+            currentConsumption += lc.getContainer().getResource().getMemory();
+          }
+        }
+        if (reservedContainers != null) {
+          numReservedContainers = reservedContainers.size();
+          for (RMContainer rc : reservedContainers) {
+            reservedResources += rc.getContainer().getResource().getMemory();
+          }
+        }
+      }
+      
+      ApplicationResourceUsageReport appResources = 
+          recordFactory.newRecordInstance(ApplicationResourceUsageReport.class);
+      appResources.setNumUsedContainers(numUsedContainers);
+      appResources.setNumReservedContainers(numReservedContainers);
+      appResources.setUsedResources(
+          Resources.createResource(currentConsumption));
+      appResources.setReservedResources(
+          Resources.createResource(reservedResources));
+      appResources.setNeededResources(
+          Resources.createResource(currentConsumption + reservedResources));
+      return appResources;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS21 INS54 INS32 INS8 INS8 INS22 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS60 INS21 INS21 INS21 INS21 INS21 INS41 INS21 INS52 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS74 INS59 INS74 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS32 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS33 INS21 INS21 INS25 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS7 INS27 INS8 INS27 INS8 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS52 INS42 INS52 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS70 INS42 INS33 INS21 INS70 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS44 INS42 INS8 INS7 INS44 INS42 INS8 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42