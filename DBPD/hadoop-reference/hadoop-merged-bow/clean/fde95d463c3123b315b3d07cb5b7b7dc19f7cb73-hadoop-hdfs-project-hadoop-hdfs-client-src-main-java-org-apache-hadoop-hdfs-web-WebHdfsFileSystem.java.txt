HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah

+import java.nio.charset.StandardCharsets;
+import java.util.Base64;
+import java.util.Base64.Decoder;
+import org.apache.hadoop.fs.FileEncryptionInfo;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.FileEncryptionInfoProto;
+import org.apache.hadoop.hdfs.protocolPB.PBHelperClient;
+  public static final String EZ_HEADER = "X-Hadoop-Accept-EZ";
+  public static final String FEFINFO_HEADER = "X-Hadoop-feInfo";
+    private boolean followRedirect = true;
+    protected AbstractRunner(final HttpOpParam.Op op, boolean redirected,
+        boolean followRedirect) {
+      this(op, redirected);
+      this.followRedirect = followRedirect;
+    }
+
+        if (!followRedirect) {
+          return conn;
+        }
-        return connect(op, url);
+        final HttpURLConnection conn = connect(op, url);
+        // output streams will validate on close
+        if (!op.getDoOutput()) {
+          validateResponse(op, conn, false);
+        }
+        return conn;
+      conn.setRequestProperty(EZ_HEADER, "true");
-          // output streams will validate on close
-          if (!op.getDoOutput()) {
-            validateResponse(op, conn, false);
-          }
-
-  final class URLRunner extends AbstractRunner<HttpURLConnection> {
+  class URLRunner extends AbstractRunner<HttpURLConnection> {
-    protected URL getUrl() {
+    protected URL getUrl() throws IOException {
-        boolean redirected) {
-      super(op, redirected);
+        boolean redirected, boolean followRedirect) {
+      super(op, redirected, followRedirect);
+  @SuppressWarnings("resource")
-    return new FSDataInputStream(new WebHdfsInputStream(f, bufferSize));
+    WebHdfsInputStream webfsInputStream =
+        new WebHdfsInputStream(f, bufferSize);
+    if (webfsInputStream.getFileEncryptionInfo() == null) {
+      return new FSDataInputStream(webfsInputStream);
+    } else {
+      return new FSDataInputStream(
+          webfsInputStream.createWrappedInputStream());
+    }
-      return new URLRunner(GetOpParam.Op.OPEN, offsetUrl, resolved).run();
+      return new URLRunner(GetOpParam.Op.OPEN, offsetUrl, resolved,
+          true).run();
+
+    FileEncryptionInfo getFileEncryptionInfo() {
+      return readRunner.getFileEncryptionInfo();
+    }
+
+    InputStream createWrappedInputStream() throws IOException {
+      return HdfsKMSUtil.createWrappedInputStream(
+          this, getKeyProvider(), getFileEncryptionInfo(), getConf());
+    }
-    private RunnerState runnerState = RunnerState.DISCONNECTED;
+    private RunnerState runnerState = RunnerState.SEEK;
+    private FileEncryptionInfo feInfo = null;
+      getRedirectedUrl();
+    }
+
+    private void getRedirectedUrl() throws IOException {
+      URLRunner urlRunner = new URLRunner(GetOpParam.Op.OPEN, null, false,
+          false) {
+        @Override
+        protected URL getUrl() throws IOException {
+          return toUrl(op, path, new BufferSizeParam(bufferSize));
+        }
+      };
+      HttpURLConnection conn = urlRunner.run();
+      String feInfoStr = conn.getHeaderField(FEFINFO_HEADER);
+      if (feInfoStr != null) {
+        Decoder decoder = Base64.getDecoder();
+        byte[] decodedBytes = decoder.decode(
+            feInfoStr.getBytes(StandardCharsets.UTF_8));
+        feInfo = PBHelperClient
+            .convert(FileEncryptionInfoProto.parseFrom(decodedBytes));
+      }
+      String location = conn.getHeaderField("Location");
+      if (location != null) {
+        // This saves the location for datanode where redirect was issued.
+        // Need to remove offset because seek can be called after open.
+        resolvedUrl = removeOffsetParam(new URL(location));
+      } else {
+        // This is cached for proxies like httpfsfilesystem.
+        cachedConnection = conn;
+      }
+      originalUrl = super.getUrl();
-          cachedConnection = new URLRunner(GetOpParam.Op.OPEN, rurl, true).run();
+          cachedConnection = new URLRunner(GetOpParam.Op.OPEN, rurl, true,
+              false).run();
+
+    protected FileEncryptionInfo getFileEncryptionInfo() {
+      return feInfo;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS23 INS31 INS79 INS31 INS31 INS23 INS31 INS31 INS42 INS42 INS45 INS42 INS42 INS45 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS43 INS44 INS42 INS45 INS60 INS25 INS43 INS42 INS8 INS43 INS42 INS43 INS8 INS83 INS43 INS59 INS83 INS39 INS42 INS43 INS8 INS83 INS43 INS42 INS8 INS42 INS9 INS83 INS43 INS42 INS39 INS42 INS39 INS42 INS17 INS21 INS21 INS42 INS39 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS41 INS42 INS42 INS41 UPD40 INS42 INS42 INS33 INS21 INS42 INS60 INS60 INS60 INS25 INS60 INS25 INS21 INS42 INS41 INS40 INS42 INS42 INS7 INS32 INS42 INS42 INS42 MOV14 INS32 INS33 MOV41 INS41 INS32 INS32 INS32 MOV43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS7 INS42 INS22 INS42 INS25 INS60 MOV25 INS42 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS52 INS32 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS48 INS52 INS42 INS38 INS8 INS83 INS43 INS59 INS42 INS42 INS43 INS32 INS9 INS42 INS42 INS42 INS43 INS40 INS33 INS9 INS9 INS1 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS5 INS59 INS7 INS42 INS42 INS45 INS7 INS7 INS42 INS42 INS41 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS31 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS41 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS43 INS9 INS43 INS42 INS42 INS42 DEL83