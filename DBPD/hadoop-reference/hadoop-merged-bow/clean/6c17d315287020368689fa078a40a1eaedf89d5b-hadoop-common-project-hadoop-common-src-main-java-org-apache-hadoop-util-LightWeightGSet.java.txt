Merge remote-tracking branch 'apache/trunk' into HDFS-7285

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java

Change-Id: I53ec1c426dc988d6c4a2c87b00caef49c4057010

+import java.util.AbstractCollection;
+import java.util.Arrays;
+import java.util.Collection;
-import org.apache.hadoop.util.StringUtils;
-  public static interface LinkedElement {
+  public interface LinkedElement {
-    public void setNext(LinkedElement next);
+    void setNext(LinkedElement next);
-    public LinkedElement getNext();
+    LinkedElement getNext();
-  private final LinkedElement[] entries;
+  protected LinkedElement[] entries;
-  private final int hash_mask;
+  protected int hash_mask;
-  private int size = 0;
+  protected int size = 0;
-  private int modification = 0;
+  protected int modification = 0;
+
+  private Collection<E> values;
+
+  protected LightWeightGSet() {
+  }
-  private static int actualArrayLength(int recommended) {
+  protected static int actualArrayLength(int recommended) {
-  private int getIndex(final K key) {
+  protected int getIndex(final K key) {
-  private E convert(final LinkedElement e){
+  protected E convert(final LinkedElement e){
-    //validate element
+    // validate element
-    if (!(element instanceof LinkedElement)) {
+    LinkedElement e = null;
+    try {
+      e = (LinkedElement)element;
+    } catch (ClassCastException ex) {
-    final LinkedElement e = (LinkedElement)element;
-    //find index
+    // find index
-    //remove if it already exists
+    // remove if it already exists
-    //insert the element to the head of the linked list
+    // insert the element to the head of the linked list
-  private E remove(final int index, final K key) {
+  protected E remove(final int index, final K key) {
+  public Collection<E> values() {
+    if (values == null) {
+      values = new Values();
+    }
+    return values;
+  }
+
+  private final class Values extends AbstractCollection<E> {
+
+    @Override
+    public Iterator<E> iterator() {
+      return LightWeightGSet.this.iterator();
+    }
+
+    @Override
+    public int size() {
+      return size;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public boolean contains(Object o) {
+      return LightWeightGSet.this.contains((K)o);
+    }
+
+    @Override
+    public void clear() {
+      LightWeightGSet.this.clear();
+    }
+  }
+
+  @Override
-    for (int i = 0; i < entries.length; i++) {
-      entries[i] = null;
-    }
+    modification++;
+    Arrays.fill(entries, null);

MOV26 INS26 INS26 INS40 UPD40 INS40 INS23 INS31 INS31 INS55 INS31 UPD83 UPD83 UPD83 UPD83 INS83 INS74 INS59 INS83 INS42 INS8 UPD83 UPD83 UPD83 UPD83 INS78 MOV83 INS74 INS42 INS8 INS83 INS83 INS42 INS74 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS60 INS54 INS42 INS43 INS43 INS25 INS41 INS43 INS43 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS79 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 MOV39 MOV42 INS8 INS21 MOV21 MOV21 INS42 INS42 MOV43 INS59 INS8 INS12 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS41 INS42 INS41 INS42 INS45 INS42 INS43 INS42 INS41 INS42 INS21 INS37 INS32 INS42 INS33 INS21 INS44 MOV8 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS42 INS33 INS7 INS43 INS42 INS7 INS52 INS42 INS52 INS42 INS11 INS52 INS42 INS42 MOV11 UPD42 MOV42 INS42 INS14 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL43 DEL62 DEL36 DEL38 DEL25 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL2 DEL33 DEL7 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL37 DEL8 DEL24 DEL8 DEL31