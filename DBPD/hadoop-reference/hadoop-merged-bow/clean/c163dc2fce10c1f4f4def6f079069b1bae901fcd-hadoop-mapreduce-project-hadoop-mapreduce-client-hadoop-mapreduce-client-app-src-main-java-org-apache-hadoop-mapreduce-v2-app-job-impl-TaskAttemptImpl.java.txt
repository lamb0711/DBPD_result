MAPREDUCE-4838. Add additional fields like Locality, Avataar to the JobHistory logs. Contributed by Zhijie Shen


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1439714 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.mapreduce.v2.api.records.Avataar;
+import org.apache.hadoop.mapreduce.v2.api.records.Locality;
-  private final String[] dataLocalHosts;
+  protected Set<String> dataLocalHosts;
+  protected Set<String> dataLocalRacks;
+  private Locality locality;
+  private Avataar avataar;
-    this.dataLocalHosts = dataLocalHosts;
+
+    this.dataLocalHosts = resolveHosts(dataLocalHosts);
+    this.dataLocalRacks = new HashSet<String>(); 
+    for (String host : this.dataLocalHosts) {
+      this.dataLocalRacks.add(RackResolver.resolve(host).getNetworkLocation());
+    }
+
+    locality = Locality.OFF_SWITCH;
+    avataar = Avataar.VIRGIN;
+  public Locality getLocality() {
+    return locality;
+  }
+  
+  public void setLocality(Locality locality) {
+    this.locality = locality;
+  }
+
+  public Avataar getAvataar()
+  {
+    return avataar;
+  }
+  
+  public void setAvataar(Avataar avataar) {
+    this.avataar = avataar;
+  }
+  
-        Set<String> racks = new HashSet<String>(); 
-        for (String host : taskAttempt.dataLocalHosts) {
-          racks.add(RackResolver.resolve(host).getNetworkLocation());
-        }
-            taskAttempt.attemptId, taskAttempt.resourceCapability, taskAttempt
-                .resolveHosts(taskAttempt.dataLocalHosts), racks
-                .toArray(new String[racks.size()])));
+            taskAttempt.attemptId, taskAttempt.resourceCapability,
+            taskAttempt.dataLocalHosts.toArray(
+                new String[taskAttempt.dataLocalHosts.size()]),
+            taskAttempt.dataLocalRacks.toArray(
+                new String[taskAttempt.dataLocalRacks.size()])));
-  protected String[] resolveHosts(String[] src) {
-    String[] result = new String[src.length];
-    for (int i = 0; i < src.length; i++) {
-      if (isIP(src[i])) {
-        result[i] = resolveHost(src[i]);
-      } else {
-        result[i] = src[i];
+  protected Set<String> resolveHosts(String[] src) {
+    Set<String> result = new HashSet<String>();
+    if (src != null) {
+      for (int i = 0; i < src.length; i++) {
+        if (src[i] == null) {
+          continue;
+        } else if (isIP(src[i])) {
+          result.add(resolveHost(src[i]));
+        } else {
+          result.add(src[i]);
+        }
+
+      taskAttempt.locality = Locality.OFF_SWITCH;
+      if (taskAttempt.dataLocalHosts.size() > 0) {
+        String cHost = taskAttempt.resolveHost(
+            taskAttempt.containerNodeId.getHost());
+        if (taskAttempt.dataLocalHosts.contains(cHost)) {
+          taskAttempt.locality = Locality.NODE_LOCAL;
+        }
+      }
+      if (taskAttempt.locality == Locality.OFF_SWITCH) {
+        if (taskAttempt.dataLocalRacks.contains(taskAttempt.nodeRackName)) {
+          taskAttempt.locality = Locality.RACK_LOCAL;
+        }
+      }
-        		"generated for taskAttempt: " + taskAttempt.getID());
+            "generated for taskAttempt: " + taskAttempt.getID());
-            taskAttempt.shufflePort, taskAttempt.containerID);
+            taskAttempt.shufflePort, taskAttempt.containerID,
+            taskAttempt.locality.toString(), taskAttempt.avataar.toString());
-        		"generated for taskAttempt: " + taskAttempt.getID());
+            "generated for taskAttempt: " + taskAttempt.getID());
-        		"generated for taskAttempt: " + taskAttempt.getID());
+            "generated for taskAttempt: " + taskAttempt.getID());
-        		"generated for taskAttempt: " + taskAttempt.getID());
+            "generated for taskAttempt: " + taskAttempt.getID());

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 UPD83 MOV83 INS74 MOV59 UPD83 MOV83 INS74 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS74 INS8 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS70 INS21 INS21 INS42 INS41 INS43 INS42 INS21 INS42 INS41 INS43 INS42 INS21 INS43 INS43 MOV60 INS25 MOV41 INS42 INS42 INS42 MOV42 INS7 MOV44 INS22 INS8 INS7 INS7 INS42 INS42 INS7 INS42 INS42 INS7 INS42 MOV42 INS27 MOV8 INS21 INS25 INS25 INS32 INS22 INS14 INS52 INS42 INS21 INS42 INS40 INS42 INS40 INS22 INS42 INS22 INS42 UPD42 INS42 INS33 INS7 INS27 INS8 INS27 INS8 INS42 INS42 INS52 INS42 INS74 INS32 INS52 INS42 INS52 INS42 INS40 INS40 INS32 INS34 INS60 INS25 INS40 INS40 INS25 INS43 INS43 INS22 INS42 MOV32 INS25 INS40 INS42 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS32 INS42 INS42 INS52 INS42 INS27 INS8 MOV25 INS42 INS42 INS32 INS40 INS42 INS42 INS21 INS40 INS42 INS40 INS21 INS40 INS42 INS40 INS42 INS2 INS33 INS18 INS42 INS42 INS32 INS7 INS7 INS40 UPD42 INS3 INS40 INS42 INS42 INS40 INS42 INS40 INS40 INS40 INS40 MOV5 INS32 MOV5 INS32 INS32 MOV40 INS42 MOV43 MOV85 INS40 INS42 INS42 MOV32 INS42 INS42 MOV2 MOV42 DEL43 DEL85 DEL5 DEL23 DEL42 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL40 DEL3 DEL59 DEL60 DEL42 DEL42 DEL2 DEL7 DEL42 DEL42 DEL2 DEL7