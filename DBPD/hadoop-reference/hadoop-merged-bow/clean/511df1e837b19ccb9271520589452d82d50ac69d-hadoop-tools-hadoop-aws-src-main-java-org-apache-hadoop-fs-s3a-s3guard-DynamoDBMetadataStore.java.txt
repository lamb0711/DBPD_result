HADOOP-16430. S3AFilesystem.delete to incrementally update s3guard with deletions

Contributed by Steve Loughran.

This overlaps the scanning for directory entries with batched calls to S3 DELETE and updates of the S3Guard tables.
It also uses S3Guard to list the files to delete, so find newly created files even when S3 listings are not use consistent.

For path which the client considers S3Guard to be authoritative, we also do a recursive LIST of the store and delete files; this is to find unindexed files and do guarantee that the delete(path, true) call really does delete everything underneath.

Change-Id: Ice2f6e940c506e0b3a78fa534a99721b1698708e

+import org.apache.hadoop.fs.RemoteIterator;
- * {@link MetadataStore#deleteSubtree(Path)} and
+ * {@link MetadataStore#deleteSubtree(Path, BulkOperationState)} and
-  public void delete(Path path)
+  public void delete(Path path,
+      final BulkOperationState operationState)
-    innerDelete(path, true, null);
+    innerDelete(path, true,
+        extractOrCreate(operationState,
+            BulkOperationState.OperationType.Delete));
-   * @param ancestorState ancestor state for logging
+   * @param ancestorState ancestor state for context.
-  public void deleteSubtree(Path path)
+  public void deleteSubtree(Path path,
+      final BulkOperationState operationState)
+    deleteEntries(new InternalIterators.PathFromRemoteStatusIterator(
+        new DescendantsIterator(this, meta)),
+        operationState);
+  }
-    try(AncestorState state = new AncestorState(this,
-        BulkOperationState.OperationType.Delete, path)) {
-      // Execute via the bounded threadpool.
-      final List<CompletableFuture<Void>> futures = new ArrayList<>();
-      for (DescendantsIterator desc = new DescendantsIterator(this, meta);
-          desc.hasNext();) {
-        final Path pathToDelete = desc.next().getPath();
-        futures.add(submit(executor, () -> {
-          innerDelete(pathToDelete, true, state);
-          return null;
-        }));
-        if (futures.size() > S3GUARD_DDB_SUBMITTED_TASK_LIMIT) {
-          // first batch done; block for completion.
-          waitForCompletion(futures);
-          futures.clear();
-        }
+  @Override
+  @Retries.RetryTranslated
+  public void deletePaths(Collection<Path> paths,
+      final BulkOperationState operationState)
+      throws IOException {
+    deleteEntries(
+        new InternalIterators.RemoteIteratorFromIterator<>(paths.iterator()),
+        operationState);
+  }
+
+  /**
+   * Delete the entries under an iterator.
+   * There's no attempt to order the paths: they are
+   * deleted in the order passed in.
+   * @param entries entries to delete.
+   * @param operationState Nullable operation state
+   * @throws IOException failure
+   */
+  @Retries.RetryTranslated
+  private void deleteEntries(RemoteIterator<Path> entries,
+      final BulkOperationState operationState)
+      throws IOException {
+    final List<CompletableFuture<Void>> futures = new ArrayList<>();
+    AncestorState state = extractOrCreate(operationState,
+        BulkOperationState.OperationType.Delete);
+
+    while (entries.hasNext()) {
+      final Path pathToDelete = entries.next();
+      futures.add(submit(executor, () -> {
+        innerDelete(pathToDelete, true, state);
+        return null;
+      }));
+      if (futures.size() > S3GUARD_DDB_SUBMITTED_TASK_LIMIT) {
+        // first batch done; block for completion.
+        waitForCompletion(futures);
+        futures.clear();
-      // now wait for the final set.
-      waitForCompletion(futures);
+    // now wait for the final set.
+    waitForCompletion(futures);
-        boolean tombstone = itemExists(item);
+        boolean tombstone = !itemExists(item);

INS26 INS40 INS31 INS31 INS44 INS44 INS78 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 MOV8 INS83 INS43 INS42 INS83 INS43 INS42 INS21 INS42 INS40 INS74 INS42 INS83 INS43 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS40 INS74 INS42 INS83 INS43 INS42 INS42 INS60 INS61 INS42 UPD66 INS42 INS32 INS43 MOV43 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS42 MOV43 INS59 INS32 MOV8 INS69 INS32 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 MOV42 INS43 INS42 INS42 INS40 INS43 MOV14 INS74 INS32 INS42 INS42 INS40 INS43 INS42 INS40 INS43 INS42 INS42 INS42 INS32 INS40 UPD42 MOV42 MOV42 INS38 MOV32 DEL33 DEL42 DEL43 DEL42 DEL52 DEL40 DEL42 DEL14 DEL59 DEL58 DEL54 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL58 DEL32 DEL24