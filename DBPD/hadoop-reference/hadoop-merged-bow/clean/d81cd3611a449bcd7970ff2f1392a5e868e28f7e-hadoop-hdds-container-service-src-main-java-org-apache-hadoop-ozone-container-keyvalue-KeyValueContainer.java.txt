HDDS-267. Handle consistency issues during container update/close.

-      writeToContainerFile(containerFile, true);
+      createContainerFile(containerFile);
-   * Creates .container file and checksum file.
+   * Writes to .container file.
-   * @param containerFile
-   * @param isCreate true if we are creating a new container file and false if
-   *                we are updating an existing container file.
+   * @param containerFile container file name
+   * @param isCreate True if creating a new file. False is updating an
+   *                 existing container file.
+      // NativeIO.renameTo is an atomic function. But it might fail if the
+      // container file already exists. Hence, we handle the two cases
+      // separately.
-        // When creating a new container, .container file should not exist
-        // already.
-        // When updating a container, the .container file should exist. If
-        // not, the container is in an inconsistent state.
-      throw new StorageContainerException("Error during creation of " +
+      throw new StorageContainerException("Error while creating/ updating " +
+  private void createContainerFile(File containerFile)
+      throws StorageContainerException {
+    writeToContainerFile(containerFile, true);
+  }
-
-    long containerId = containerData.getContainerID();
-
-    if (!containerFile.exists()) {
-      throw new StorageContainerException("Container is an Inconsistent " +
-          "state, missing .container file. ContainerID: " + containerId,
-          INVALID_CONTAINER_STATE);
-    }
-
-    try {
-      writeToContainerFile(containerFile, false);
-    } catch (IOException e) {
-      //TODO : Container update failure is not handled currently. Might
-      // lead to loss of .container file. When Update container feature
-      // support is added, this failure should also be handled.
-      throw new StorageContainerException("Container update failed. " +
-          "ContainerID: " + containerId, CONTAINER_FILES_CREATE_ERROR);
-    }
+    writeToContainerFile(containerFile, false);
-      long containerId = containerData.getContainerID();
-      if(!containerData.isValid()) {
-        LOG.debug("Invalid container data. Container Id: {}", containerId);
-        throw new StorageContainerException("Invalid container data. " +
-            "ContainerID: " + containerId, INVALID_CONTAINER_STATE);
-      }
+
-
+      // Failed to update .container file. Reset the state to CLOSING
+      containerData.setState(ContainerLifeCycleState.CLOSING);
-      // TODO:
-      // On error, reset the metadata.

INS31 UPD42 INS44 MOV43 INS8 INS83 INS39 INS42 MOV44 MOV43 MOV8 UPD43 MOV43 UPD42 MOV42 MOV21 UPD66 INS66 UPD66 UPD66 UPD42 INS21 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS40 UPD45 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL45 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL25 DEL44 DEL42 DEL43 DEL45 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL25