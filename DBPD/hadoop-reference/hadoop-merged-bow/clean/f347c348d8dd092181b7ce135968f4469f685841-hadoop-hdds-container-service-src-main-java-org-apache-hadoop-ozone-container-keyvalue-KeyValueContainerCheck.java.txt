Add support for checksum verification in data scrubber

Signed-off-by: Anu Engineer <aengineer@apache.org>

+import org.apache.hadoop.hdfs.util.Canceler;
+import org.apache.hadoop.hdfs.util.DataTransferThrottler;
+import org.apache.hadoop.ozone.common.Checksum;
+import org.apache.hadoop.ozone.common.ChecksumData;
+import org.apache.hadoop.ozone.common.OzoneChecksumException;
+import org.apache.hadoop.ozone.container.common.utils.ReferenceCountedDB;
+import java.io.FileInputStream;
-import java.util.List;
+import java.io.InputStream;
+import java.util.Arrays;
-import org.apache.hadoop.ozone.container.common.utils.ReferenceCountedDB;
+import org.apache.ratis.thirdparty.com.google.protobuf.ByteString;
-  public boolean fullCheck() {
+  public boolean fullCheck(DataTransferThrottler throttler, Canceler canceler) {
-        checkBlockDB();
+        scanData(throttler, canceler);
-  private void checkBlockDB() throws IOException {
+  private void scanData(DataTransferThrottler throttler, Canceler canceler)
+      throws IOException {
-
-            BlockUtils.getDB(onDiskContainerData, checkConfig)) {
-      iterateBlockDB(db);
-    }
-  }
+            BlockUtils.getDB(onDiskContainerData, checkConfig);
+        KeyValueBlockIterator kvIter = new KeyValueBlockIterator(containerID,
+            new File(onDiskContainerData.getContainerPath()))) {
-  private void iterateBlockDB(ReferenceCountedDB db)
-      throws IOException {
-    Preconditions.checkState(db != null);
-
-    // get "normal" keys from the Block DB
-    try(KeyValueBlockIterator kvIter = new KeyValueBlockIterator(containerID,
-        new File(onDiskContainerData.getContainerPath()))) {
-
-      // ensure there is a chunk file for each key in the DB
-      while (kvIter.hasNext()) {
+      while(kvIter.hasNext()) {
-
-        List<ContainerProtos.ChunkInfo> chunkInfoList = block.getChunks();
-        for (ContainerProtos.ChunkInfo chunk : chunkInfoList) {
-          File chunkFile;
-          chunkFile = ChunkUtils.getChunkFile(onDiskContainerData,
+        for(ContainerProtos.ChunkInfo chunk : block.getChunks()) {
+          File chunkFile = ChunkUtils.getChunkFile(onDiskContainerData,
-
-            if (bdata == null) {
-              LOG.trace("concurrency with delete, ignoring deleted block");
-              break; // skip to next block from kvIter
-            } else {
-              String errorStr = "Missing chunk file "
-                  + chunkFile.getAbsolutePath();
-              throw new IOException(errorStr);
+            if (bdata != null) {
+              throw new IOException("Missing chunk file "
+                  + chunkFile.getAbsolutePath());
+            }
+          } else if (chunk.getChecksumData().getType()
+              != ContainerProtos.ChecksumType.NONE){
+            int length = chunk.getChecksumData().getChecksumsList().size();
+            ChecksumData cData = new ChecksumData(
+                chunk.getChecksumData().getType(),
+                chunk.getChecksumData().getBytesPerChecksum(),
+                chunk.getChecksumData().getChecksumsList());
+            long bytesRead = 0;
+            byte[] buffer = new byte[cData.getBytesPerChecksum()];
+            try (InputStream fs = new FileInputStream(chunkFile)) {
+              int i = 0, v = 0;
+              for (; i < length; i++) {
+                v = fs.read(buffer);
+                if (v == -1) {
+                  break;
+                }
+                bytesRead += v;
+                throttler.throttle(v, canceler);
+                Checksum cal = new Checksum(cData.getChecksumType(),
+                    cData.getBytesPerChecksum());
+                ByteString expected = cData.getChecksums().get(i);
+                ByteString actual = cal.computeChecksum(buffer)
+                    .getChecksums().get(0);
+                if (!Arrays.equals(expected.toByteArray(),
+                    actual.toByteArray())) {
+                  throw new OzoneChecksumException(String
+                      .format("Inconsistent read for chunk=%s len=%d expected" +
+                              " checksum %s actual checksum %s for block %s",
+                          chunk.getChunkName(), chunk.getLen(),
+                          Arrays.toString(expected.toByteArray()),
+                          Arrays.toString(actual.toByteArray()),
+                          block.getBlockID()));
+                }
+
+              }
+              if (v == -1 && i < length) {
+                throw new OzoneChecksumException(String
+                    .format("Inconsistent read for chunk=%s expected length=%d"
+                            + " actual length=%d for block %s",
+                        chunk.getChunkName(),
+                        chunk.getLen(), bytesRead, block.getBlockID()));
+              }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS44 INS44 UPD42 INS44 MOV43 INS8 INS43 INS42 INS43 INS42 UPD43 UPD42 INS43 INS42 MOV21 MOV60 MOV60 MOV21 MOV25 MOV21 INS54 INS42 INS42 UPD42 UPD42 MOV42 MOV58 MOV58 INS8 INS61 MOV32 INS8 MOV60 INS70 MOV44 MOV32 INS8 INS42 INS42 UPD42 INS60 INS25 MOV43 INS59 MOV38 MOV8 INS25 INS42 MOV32 INS27 INS8 UPD27 INS32 INS40 INS60 MOV60 INS60 INS60 INS54 INS32 INS42 INS39 INS59 INS43 INS59 INS39 INS59 INS5 INS59 INS58 INS8 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS14 INS42 INS34 INS39 INS85 INS42 INS3 INS43 INS59 MOV60 INS24 INS25 MOV27 INS32 INS42 INS43 INS32 INS32 INS32 INS5 INS32 INS42 INS42 INS14 INS39 INS59 INS27 INS37 INS8 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS39 INS85 INS42 INS42 INS43 INS42 UPD42 INS34 INS42 INS34 INS42 INS42 INS42 MOV21 MOV25 INS21 INS21 INS60 INS60 INS60 INS25 INS27 INS27 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS7 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS38 INS8 INS42 INS38 INS42 INS42 INS14 UPD42 INS32 INS42 INS38 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS53 INS34 INS43 INS32 INS42 INS42 INS42 INS34 INS43 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS32 INS14 INS42 INS42 INS42 INS27 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS32 INS32 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL45 DEL32 DEL21 DEL10 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL59 DEL43 DEL42 DEL42 DEL42 DEL33 DEL27 DEL32 DEL21 DEL42 DEL8 DEL70 DEL8 DEL61 DEL8 DEL54 DEL8