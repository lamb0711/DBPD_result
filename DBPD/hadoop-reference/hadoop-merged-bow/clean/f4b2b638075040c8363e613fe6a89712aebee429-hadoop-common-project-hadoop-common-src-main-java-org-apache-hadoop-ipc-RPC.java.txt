Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1170378 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.InvocationHandler;
+import java.io.Closeable;
-  private static final Map<Class,RpcEngine> PROTOCOL_ENGINES
-    = new HashMap<Class,RpcEngine>();
-
-  // track what RpcEngine is used by a proxy class, for stopProxy()
-  private static final Map<Class,RpcEngine> PROXY_ENGINES
-    = new HashMap<Class,RpcEngine>();
+  private static final Map<Class<?>,RpcEngine> PROTOCOL_ENGINES
+    = new HashMap<Class<?>,RpcEngine>();
-                                Class protocol, Class engine) {
+                                Class<?> protocol, Class<?> engine) {
-  private static synchronized RpcEngine getProtocolEngine(Class protocol,
+  private static synchronized RpcEngine getProtocolEngine(Class<?> protocol,
-      if (protocol.isInterface())
-        PROXY_ENGINES.put(Proxy.getProxyClass(protocol.getClassLoader(),
-                                              protocol),
-                          engine);
-  // return the RpcEngine that handles a proxy object
-  private static synchronized RpcEngine getProxyEngine(Object proxy) {
-    return PROXY_ENGINES.get(proxy.getClass());
-  }
-
-   * Stop this proxy and release its invoker's resource
-   * @param proxy the proxy to be stopped
+   * Stop this proxy and release its invoker's resource by getting the
+   * invocation handler for the given proxy object and calling
+   * {@link Closeable#close} if that invocation handler implements
+   * {@link Closeable}.
+   * 
+   * @param proxy the RPC proxy object to be stopped
-    RpcEngine rpcEngine;
-    if (proxy!=null && (rpcEngine = getProxyEngine(proxy)) != null) {
-      rpcEngine.stopProxy(proxy);
+    InvocationHandler invocationHandler = null;
+    try {
+      invocationHandler = Proxy.getInvocationHandler(proxy);
+    } catch (IllegalArgumentException e) {
+      LOG.error("Tried to call RPC.stopProxy on an object that is not a proxy.", e);
+    }
+    if (proxy != null && invocationHandler != null &&
+        invocationHandler instanceof Closeable) {
+      try {
+        ((Closeable)invocationHandler).close();
+      } catch (IOException e) {
+        LOG.error("Stopping RPC invocation handler caused exception", e);
+      }
+    } else {
+      LOG.error("Could not get invocation handler " + invocationHandler +
+          " for proxy " + proxy + ", or invocation handler is not closeable.");
-  public static Server getServer(Class protocol,
+  public static Server getServer(Class<?> protocol,
-  public static Server getServer(Class protocol,
+  public static Server getServer(Class<?> protocol,

INS26 INS26 INS40 INS40 MOV44 UPD74 INS74 INS74 UPD42 INS74 UPD42 INS74 INS54 INS25 INS74 INS74 MOV43 INS76 UPD74 MOV43 INS76 MOV43 INS76 MOV43 INS76 UPD66 INS66 INS65 INS66 INS65 INS66 UPD66 UPD43 INS8 INS12 INS27 INS8 MOV8 MOV43 INS76 MOV43 INS76 INS74 MOV43 INS67 INS42 UPD42 UPD42 INS33 INS21 INS44 INS8 INS27 INS62 INS54 MOV43 INS76 INS42 INS42 INS7 INS43 INS42 INS21 MOV27 INS27 INS42 INS43 INS8 INS12 UPD42 MOV42 MOV32 INS42 INS32 INS42 MOV33 INS42 INS21 INS44 INS8 UPD42 UPD42 INS27 UPD42 INS42 INS42 INS42 INS45 INS42 INS32 INS43 INS42 INS21 INS45 INS42 INS45 INS42 INS45 INS36 INS42 INS42 INS32 INS11 INS42 INS42 INS45 INS42 INS43 INS42 INS42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL25 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL7 DEL36 DEL27 DEL27 DEL25