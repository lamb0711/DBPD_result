HDDS-1586. Allow Ozone RPC client to read with topology awareness. Contributed by Sammi Chen.

+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-
+  private static final Logger LOG =
+      LoggerFactory.getLogger(XceiverClientManager.class);
+  private final boolean topologyAwareRead;
+    topologyAwareRead = Boolean.parseBoolean(conf.get(
+        ScmConfigKeys.DFS_NETWORK_TOPOLOGY_AWARE_READ_ENABLED,
+        ScmConfigKeys.DFS_NETWORK_TOPOLOGY_AWARE_READ_ENABLED_DEFAULT));
+    return acquireClient(pipeline, false);
+  }
+
+  /**
+   * Acquires a XceiverClientSpi connected to a container for read.
+   *
+   * If there is already a cached XceiverClientSpi, simply return
+   * the cached otherwise create a new one.
+   *
+   * @param pipeline the container pipeline for the client connection
+   * @return XceiverClientSpi connected to a container
+   * @throws IOException if a XceiverClientSpi cannot be acquired
+   */
+  public XceiverClientSpi acquireClientForReadData(Pipeline pipeline)
+      throws IOException {
+    return acquireClient(pipeline, true);
+  }
+
+  private XceiverClientSpi acquireClient(Pipeline pipeline, boolean read)
+      throws IOException {
-      XceiverClientSpi info = getClient(pipeline);
+      XceiverClientSpi info = getClient(pipeline, read);
+    releaseClient(client, invalidateClient, false);
+  }
+
+  /**
+   * Releases a read XceiverClientSpi after use.
+   *
+   * @param client client to release
+   * @param invalidateClient if true, invalidates the client in cache
+   */
+  public void releaseClientForReadData(XceiverClientSpi client,
+      boolean invalidateClient) {
+    releaseClient(client, invalidateClient, true);
+  }
+
+  private void releaseClient(XceiverClientSpi client, boolean invalidateClient,
+      boolean read) {
-        String key = pipeline.getId().getId().toString() + pipeline.getType();
+        String key = getPipelineCacheKey(pipeline, read);
-  private XceiverClientSpi getClient(Pipeline pipeline)
+  private XceiverClientSpi getClient(Pipeline pipeline, boolean forRead)
-      String key = pipeline.getId().getId().toString() + type;
+      // create different client for read different pipeline node based on
+      // network topology
+      String key = getPipelineCacheKey(pipeline, forRead);
+  private String getPipelineCacheKey(Pipeline pipeline, boolean forRead) {
+    String key = pipeline.getId().getId().toString() + pipeline.getType();
+    if (topologyAwareRead && forRead) {
+      try {
+        key += pipeline.getClosestNode().getHostName();
+      } catch (IOException e) {
+        LOG.error("Failed to get closest node to create pipeline cache key:" +
+            e.getMessage());
+      }
+    }
+    return key;
+  }
+

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 MOV29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 UPD83 INS44 MOV29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 INS44 INS44 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS32 INS42 INS21 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS39 INS42 INS43 INS42 INS39 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS21 INS39 INS42 INS39 INS42 INS42 INS43 INS42 INS39 INS42 MOV60 INS25 INS41 INS42 INS42 INS57 INS7 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS32 INS42 INS27 INS8 INS42 INS43 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS54 INS42 INS42 INS42 INS32 INS8 INS12 INS42 INS42 INS40 INS40 INS60 INS32 INS21 INS44 INS8 INS42 INS43 INS59 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS32 INS42 INS42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL27