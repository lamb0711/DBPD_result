HDFS-7866. Erasure coding: NameNode manages multiple erasure coding policies. Contributed by Rui Li.

-   * [4-bit storagePolicyID][1-bit isStriped]
-   * [11-bit replication][48-bit preferredBlockSize]
+   * [4-bit storagePolicyID][12-bit BLOCK_LAYOUT_AND_REDUNDANCY]
+   * [48-bit preferredBlockSize]
+   *
+   * BLOCK_LAYOUT_AND_REDUNDANCY contains 12 bits and describes the layout and
+   * redundancy of a block. We use the highest 1 bit to determine whether the
+   * block is replica or erasure coded. For replica blocks, the tail 11 bits
+   * stores the replication factor. For erasure coded blocks, the tail 11 bits
+   * stores the EC policy ID, and in the future, we may further divide these
+   * 11 bits to store both the EC policy ID and replication factor for erasure
+   * coded blocks. The layout of this section is demonstrated as below.
+   * +---------------+-------------------------------+
+   * |     1 bit     |             11 bit            |
+   * +---------------+-------------------------------+
+   * | Replica or EC |Replica factor or EC policy ID |
+   * +---------------+-------------------------------+
+   *
+   * BLOCK_LAYOUT_AND_REDUNDANCY format for replicated block:
+   * 0 [11-bit replication]
+   *
+   * BLOCK_LAYOUT_AND_REDUNDANCY format for striped block:
+   * 1 [11-bit ErasureCodingPolicy ID]
-    REPLICATION(PREFERRED_BLOCK_SIZE.BITS, 11, 0),
-    IS_STRIPED(REPLICATION.BITS, 1, 0),
-    STORAGE_POLICY_ID(IS_STRIPED.BITS, BlockStoragePolicySuite.ID_BIT_LENGTH,
-        0);
+    BLOCK_LAYOUT_AND_REDUNDANCY(PREFERRED_BLOCK_SIZE.BITS,
+        HeaderFormat.LAYOUT_BIT_WIDTH + 11, 0),
+    STORAGE_POLICY_ID(BLOCK_LAYOUT_AND_REDUNDANCY.BITS,
+        BlockStoragePolicySuite.ID_BIT_LENGTH, 0);
+    /**
+     * Number of bits used to encode block layout type.
+     * Different types can be replica or EC
+     */
+    private static final int LAYOUT_BIT_WIDTH = 1;
+
+    private static final int MAX_REDUNDANCY = (1 << 11) - 1;
+
-      return (short)REPLICATION.BITS.retrieve(header);
+      long layoutRedundancy = BLOCK_LAYOUT_AND_REDUNDANCY.BITS.retrieve(header);
+      return (short) (layoutRedundancy & MAX_REDUNDANCY);
+    }
+
+    static byte getECPolicyID(long header) {
+      long layoutRedundancy = BLOCK_LAYOUT_AND_REDUNDANCY.BITS.retrieve(header);
+      return (byte) (layoutRedundancy & MAX_REDUNDANCY);
-      long isStriped = IS_STRIPED.BITS.retrieve(header);
-      Preconditions.checkState(isStriped == 0 || isStriped == 1);
-      return isStriped == 1;
+      long layoutRedundancy = BLOCK_LAYOUT_AND_REDUNDANCY.BITS.retrieve(header);
+      return (layoutRedundancy & (1 << 11)) != 0;
+      Preconditions.checkArgument(replication >= 0 &&
+          replication <= MAX_REDUNDANCY);
-      // Replication factor for striped files is zero
+      // For erasure coded files, replication is used to store ec policy id
+      // TODO: this is hacky. Add some utility to generate the layoutRedundancy
+      long layoutRedundancy = 0;
-        h = REPLICATION.BITS.combine(0L, h);
-        h = IS_STRIPED.BITS.combine(1L, h);
-      } else {
-        h = REPLICATION.BITS.combine(replication, h);
-        h = IS_STRIPED.BITS.combine(0L, h);
+        layoutRedundancy |= 1 << 11;
+      layoutRedundancy |= replication;
+      h = BLOCK_LAYOUT_AND_REDUNDANCY.BITS.combine(layoutRedundancy, h);
-  /** The same as getFileReplication(null). */
+  /**
+   * The same as getFileReplication(null).
+   * For erasure coded files, this returns the EC policy ID.
+   * */
-  // TODO properly handle striped files
-    header = HeaderFormat.REPLICATION.BITS.combine(replication, header);
+    long layoutRedundancy =
+        HeaderFormat.BLOCK_LAYOUT_AND_REDUNDANCY.BITS.retrieve(header);
+    layoutRedundancy = (layoutRedundancy &
+        ~HeaderFormat.MAX_REDUNDANCY) | replication;
+    header = HeaderFormat.BLOCK_LAYOUT_AND_REDUNDANCY.BITS.
+        combine(layoutRedundancy, header);
-   * @return The ID of the erasure coding policy on the file. 0 represents no
-   *          EC policy (file is in contiguous format). 1 represents the system
-   *          default EC policy:
-   *          {@link ErasureCodingPolicyManager#SYS_DEFAULT_POLICY}.
-   * TODO: support more policies by reusing {@link HeaderFormat#REPLICATION}.
+   * @return The ID of the erasure coding policy on the file. -1 represents no
+   *          EC policy.
-    return isStriped() ? (byte)1 : (byte)0;
+    if (isStriped()) {
+      return HeaderFormat.getECPolicyID(header);
+    }
+    return -1;

INS23 INS23 INS31 INS31 UPD42 INS27 UPD40 INS29 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 MOV44 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS60 INS21 INS25 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS40 INS34 INS65 INS42 INS34 INS42 INS27 INS60 INS41 MOV60 INS41 INS39 INS42 INS60 MOV41 MOV21 INS60 INS25 MOV21 MOV21 UPD66 INS66 INS39 INS59 INS7 UPD66 UPD66 MOV32 INS8 INS38 INS66 INS66 INS36 INS34 INS39 INS59 INS11 INS11 INS39 INS59 UPD27 INS32 INS39 INS59 INS42 INS8 UPD7 INS42 INS32 INS42 INS27 INS41 INS34 INS27 INS42 INS32 INS39 INS36 UPD42 INS39 INS36 INS42 INS32 INS36 INS34 INS42 UPD42 MOV42 INS27 INS42 INS34 MOV21 UPD42 INS42 INS40 INS42 INS42 INS36 INS42 UPD40 UPD42 INS32 INS34 INS34 UPD40 MOV40 MOV42 MOV42 INS27 UPD40 INS27 INS40 INS42 INS42 INS27 INS27 INS27 UPD7 UPD40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS36 INS42 INS34 INS42 INS42 UPD42 INS27 INS42 INS38 INS27 INS34 INS34 INS40 MOV34 INS34 DEL34 DEL42 DEL40 DEL34 DEL34 DEL72 DEL39 DEL32 DEL11 DEL41 DEL42 DEL42 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL32 DEL21 DEL8 DEL31 DEL42 DEL40 DEL34 DEL42 DEL32 DEL7 DEL40 DEL42 DEL34 DEL42 DEL32 DEL40 DEL42 DEL42 DEL42 DEL32 DEL34 DEL42 DEL8 DEL8 DEL25 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL39 DEL34 DEL11 DEL39 DEL34 DEL11 DEL16