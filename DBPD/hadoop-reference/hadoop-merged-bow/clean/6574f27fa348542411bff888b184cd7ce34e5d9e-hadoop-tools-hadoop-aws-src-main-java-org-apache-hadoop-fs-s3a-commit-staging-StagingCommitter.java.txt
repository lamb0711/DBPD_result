HADOOP-16570. S3A committers encounter scale issues.

Contributed by Steve Loughran.

This addresses two scale issues which has surfaced in large scale benchmarks
of the S3A Committers.

* Thread pools are not cleaned up.
  This now happens, with tests.

* OOM on job commit for jobs with many thousands of tasks,
  each generating tens of (very large) files.

Instead of loading all pending commits into memory as a single list, the list
of files to load is the sole list which is passed around; .pendingset files are
loaded and processed in isolation -and reloaded if necessary for any
abort/rollback operation.

The parallel commit/abort/revert operations now work at the .pendingset level,
rather than that of individual pending commit files. The existing parallelized
Tasks API is still used to commit those files, but with a null thread pool, so
as to serialize the operations.

Change-Id: I5c8240cd31800eaa83d112358770ca0eb2bca797

-import java.util.ArrayList;
+    super.setupJob(context);
-  protected List<SinglePendingCommit> listPendingUploadsToCommit(
+  protected ActiveCommit listPendingUploadsToCommit(
-  protected List<SinglePendingCommit> listPendingUploadsToAbort(
+  protected ActiveCommit listPendingUploadsToAbort(
-  protected List<SinglePendingCommit> listPendingUploads(
+  protected ActiveCommit listPendingUploads(
-    try {
-      Path wrappedJobAttemptPath = wrappedCommitter.getJobAttemptPath(context);
+    try (DurationInfo ignored = new DurationInfo(LOG,
+        "Listing pending uploads")) {
+      Path wrappedJobAttemptPath = getJobAttemptPath(context);
-      return loadPendingsetFiles(context, suppressExceptions, attemptFS,
+      return ActiveCommit.fromStatusList(attemptFS,
-    return new ArrayList<>(0);
+    return ActiveCommit.empty();
-      List<SinglePendingCommit> pending = listPendingUploadsToAbort(context);
-      abortPendingUploads(context, pending, suppressExceptions);
+      ActiveCommit pending = listPendingUploadsToAbort(context);
+      abortPendingUploads(context, pending, suppressExceptions, true);
+
+    } finally {
+      destroyThreadPool();
+            .suppressExceptions(false)
+    } finally {
+      destroyThreadPool();
+  /**
+   * Pre-commit actions for a job.
+   * Loads all the pending files to verify they can be loaded
+   * and parsed.
+   * @param context job context
+   * @param pending pending commits
+   * @throws IOException any failure
+   */
+  @Override
+  public void preCommitJob(
+      final JobContext context,
+      final ActiveCommit pending) throws IOException {
+
+    // see if the files can be loaded.
+    precommitCheckPendingFiles(context, pending);
+  }

INS31 INS43 INS43 INS43 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS48 INS58 INS32 INS8 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS32 INS32 INS43 INS42 INS45 UPD42 UPD42 UPD42 MOV42 INS9 INS42 INS42 INS42 INS32 MOV32 INS42 INS9 DEL40 DEL26 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL43 DEL74 DEL34 DEL14 DEL42 DEL43 DEL43 DEL74