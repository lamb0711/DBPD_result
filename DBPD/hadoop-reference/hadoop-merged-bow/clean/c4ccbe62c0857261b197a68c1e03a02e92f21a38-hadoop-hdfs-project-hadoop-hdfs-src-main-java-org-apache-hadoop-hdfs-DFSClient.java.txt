HDFS-7189. Add trace spans for DFSClient metadata operations. (Colin P. McCabe via yliu)

+    TraceScope scope = getPathTraceScope("getBlockSize", f);
+    } finally {
+      scope.close();
-    Token<DelegationTokenIdentifier> token =
-      namenode.getDelegationToken(renewer);
-
-    if (token != null) {
-      token.setService(this.dtService);
-      LOG.info("Created " + DelegationTokenIdentifier.stringifyToken(token));
-    } else {
-      LOG.info("Cannot get delegation token from " + renewer);
+    TraceScope scope = Trace.startSpan("getDelegationToken", traceSampler);
+    try {
+      Token<DelegationTokenIdentifier> token =
+        namenode.getDelegationToken(renewer);
+      if (token != null) {
+        token.setService(this.dtService);
+        LOG.info("Created " + DelegationTokenIdentifier.stringifyToken(token));
+      } else {
+        LOG.info("Cannot get delegation token from " + renewer);
+      }
+      return token;
+    } finally {
+      scope.close();
-    return token;
-
-    return callGetBlockLocations(namenode, src, start, length);
+    TraceScope scope = getPathTraceScope("getBlockLocations", src);
+    try {
+      return callGetBlockLocations(namenode, src, start, length);
+    } finally {
+      scope.close();
+    }
+    TraceScope scope = getPathTraceScope("recoverLease", src);
+    } finally {
+      scope.close();
-    long length) throws IOException, UnresolvedLinkException {
-    LocatedBlocks blocks = getLocatedBlocks(src, start, length);
-    BlockLocation[] locations =  DFSUtil.locatedBlocks2Locations(blocks);
-    HdfsBlockLocation[] hdfsLocations = new HdfsBlockLocation[locations.length];
-    for (int i = 0; i < locations.length; i++) {
-      hdfsLocations[i] = new HdfsBlockLocation(locations[i], blocks.get(i));
+        long length) throws IOException, UnresolvedLinkException {
+    TraceScope scope = getPathTraceScope("getBlockLocations", src);
+    try {
+      LocatedBlocks blocks = getLocatedBlocks(src, start, length);
+      BlockLocation[] locations =  DFSUtil.locatedBlocks2Locations(blocks);
+      HdfsBlockLocation[] hdfsLocations = new HdfsBlockLocation[locations.length];
+      for (int i = 0; i < locations.length; i++) {
+        hdfsLocations[i] = new HdfsBlockLocation(locations[i], blocks.get(i));
+      }
+      return hdfsLocations;
+    } finally {
+      scope.close();
-    return hdfsLocations;
-    Map<DatanodeInfo, HdfsBlocksMetadata> metadatas = BlockStorageLocationUtil
-        .queryDatanodesForHdfsBlocksMetadata(conf, datanodeBlocks,
-            getConf().getFileBlockStorageLocationsNumThreads,
-            getConf().getFileBlockStorageLocationsTimeoutMs,
-            getConf().connectToDnViaHostname);
-    
-    if (LOG.isTraceEnabled()) {
-      LOG.trace("metadata returned: "
-          + Joiner.on("\n").withKeyValueSeparator("=").join(metadatas));
+    TraceScope scope =
+      Trace.startSpan("getBlockStorageLocations", traceSampler);
+    Map<DatanodeInfo, HdfsBlocksMetadata> metadatas;
+    try {
+      metadatas = BlockStorageLocationUtil.
+          queryDatanodesForHdfsBlocksMetadata(conf, datanodeBlocks,
+              getConf().getFileBlockStorageLocationsNumThreads,
+              getConf().getFileBlockStorageLocationsTimeoutMs,
+              getConf().connectToDnViaHostname);
+      if (LOG.isTraceEnabled()) {
+        LOG.trace("metadata returned: "
+            + Joiner.on("\n").withKeyValueSeparator("=").join(metadatas));
+      }
+    } finally {
+      scope.close();
-    if (provider == null) {
-      throw new IOException("No KeyProvider is configured, cannot access" +
-          " an encrypted file");
-    }
-    EncryptedKeyVersion ekv = EncryptedKeyVersion.createForDecryption(
-        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),
-        feInfo.getEncryptedDataEncryptionKey());
+    TraceScope scope = Trace.startSpan("decryptEDEK", traceSampler);
-      KeyProviderCryptoExtension cryptoProvider = KeyProviderCryptoExtension
-          .createKeyProviderCryptoExtension(provider);
-      return cryptoProvider.decryptEncryptedKey(ekv);
-    } catch (GeneralSecurityException e) {
-      throw new IOException(e);
+      if (provider == null) {
+        throw new IOException("No KeyProvider is configured, cannot access" +
+            " an encrypted file");
+      }
+      EncryptedKeyVersion ekv = EncryptedKeyVersion.createForDecryption(
+          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),
+          feInfo.getEncryptedDataEncryptionKey());
+      try {
+        KeyProviderCryptoExtension cryptoProvider = KeyProviderCryptoExtension
+            .createKeyProviderCryptoExtension(provider);
+        return cryptoProvider.decryptEncryptedKey(ekv);
+      } catch (GeneralSecurityException e) {
+        throw new IOException(e);
+      }
+    } finally {
+      scope.close();
-    return new DFSInputStream(this, src, verifyChecksum);
+    TraceScope scope = getPathTraceScope("newDFSInputStream", src);
+    try {
+      return new DFSInputStream(this, src, verifyChecksum);
+    } finally {
+      scope.close();
+    }
+    TraceScope scope = getPathTraceScope("createSymlink", target);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("getLinkTarget", path);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("setReplication", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("setStoragePolicy", src);
+    } finally {
+      scope.close();
-    return namenode.getStoragePolicies();
+    TraceScope scope = Trace.startSpan("getStoragePolicies", traceSampler);
+    try {
+      return namenode.getStoragePolicies();
+    } finally {
+      scope.close();
+    }
+    TraceScope scope = getSrcDstTraceScope("rename", src, dst);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("concat", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = getSrcDstTraceScope("rename2", src, dst);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("truncate", src);
+    } finally {
+      scope.close();
-    return namenode.delete(src, true);
+    return delete(src, true);
+    TraceScope scope = getPathTraceScope("delete", src);
+    } finally {
+      scope.close();
-      boolean needLocation) 
-    throws IOException {
+      boolean needLocation) throws IOException {
+    TraceScope scope = getPathTraceScope("listPaths", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("getFileInfo", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("isFileClosed", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("getFileLinkInfo", src);
-     }
+    } finally {
+      scope.close();
+    }
+    TraceScope scope = getPathTraceScope("setPermission", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("setOwner", src);
+    } finally {
+      scope.close();
+    }
+  }
+
+  private long[] callGetStats() throws IOException {
+    checkOpen();
+    TraceScope scope = Trace.startSpan("getStats", traceSampler);
+    try {
+      return namenode.getStats();
+    } finally {
+      scope.close();
-    long rawNums[] = namenode.getStats();
+    long rawNums[] = callGetStats();
-    return namenode.getStats()[ClientProtocol.GET_STATS_MISSING_BLOCKS_IDX];
+    return callGetStats()[ClientProtocol.GET_STATS_MISSING_BLOCKS_IDX];
-    return namenode.getStats()[ClientProtocol.
+    return callGetStats()[ClientProtocol.
-    return namenode.getStats()[ClientProtocol.GET_STATS_UNDER_REPLICATED_IDX];
+    return callGetStats()[ClientProtocol.GET_STATS_UNDER_REPLICATED_IDX];
-    return namenode.getStats()[ClientProtocol.GET_STATS_CORRUPT_BLOCKS_IDX];
+    return callGetStats()[ClientProtocol.GET_STATS_CORRUPT_BLOCKS_IDX];
-    throws IOException {
-    return namenode.listCorruptFileBlocks(path, cookie);
+        throws IOException {
+    checkOpen();
+    TraceScope scope = getPathTraceScope("listCorruptFileBlocks", path);
+    try {
+      return namenode.listCorruptFileBlocks(path, cookie);
+    } finally {
+      scope.close();
+    }
-  throws IOException {
-    return namenode.getDatanodeReport(type);
+      throws IOException {
+    checkOpen();
+    TraceScope scope = Trace.startSpan("datanodeReport", traceSampler);
+    try {
+      return namenode.getDatanodeReport(type);
+    } finally {
+      scope.close();
+    }
-    return namenode.getDatanodeStorageReport(type);
+    checkOpen();
+    TraceScope scope =
+        Trace.startSpan("datanodeStorageReport", traceSampler);
+    try {
+      return namenode.getDatanodeStorageReport(type);
+    } finally {
+      scope.close();
+    }
-    return namenode.setSafeMode(action, isChecked);    
+    TraceScope scope =
+        Trace.startSpan("setSafeMode", traceSampler);
+    try {
+      return namenode.setSafeMode(action, isChecked);
+    } finally {
+      scope.close();
+    }
+    TraceScope scope = Trace.startSpan("createSnapshot", traceSampler);
+    } finally {
+      scope.close();
+    checkOpen();
+    TraceScope scope = Trace.startSpan("deleteSnapshot", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("renameSnapshot", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("getSnapshottableDirListing",
+        traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("allowSnapshot", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("disallowSnapshot", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("getSnapshotDiffReport", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("addCacheDirective", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("modifyCacheDirective", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("removeCacheDirective", traceSampler);
+    } finally {
+      scope.close();
-    return new CacheDirectiveIterator(namenode, filter);
+    return new CacheDirectiveIterator(namenode, filter, traceSampler);
+    TraceScope scope = Trace.startSpan("addCachePool", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("modifyCachePool", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("removeCachePool", traceSampler);
+    } finally {
+      scope.close();
-    return new CachePoolIterator(namenode);
+    return new CachePoolIterator(namenode, traceSampler);
+    TraceScope scope = Trace.startSpan("saveNamespace", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("rollEdits", traceSampler);
+    } finally {
+      scope.close();
-    return namenode.restoreFailedStorage(arg);
+    TraceScope scope = Trace.startSpan("restoreFailedStorage", traceSampler);
+    try {
+      return namenode.restoreFailedStorage(arg);
+    } finally {
+      scope.close();
+    }
-    namenode.refreshNodes();
+    TraceScope scope = Trace.startSpan("refreshNodes", traceSampler);
+    try {
+      namenode.refreshNodes();
+    } finally {
+      scope.close();
+    }
-    namenode.metaSave(pathname);
+    TraceScope scope = Trace.startSpan("metaSave", traceSampler);
+    try {
+      namenode.metaSave(pathname);
+    } finally {
+      scope.close();
+    }
-    namenode.setBalancerBandwidth(bandwidth);
+    TraceScope scope = Trace.startSpan("setBalancerBandwidth", traceSampler);
+    try {
+      namenode.setBalancerBandwidth(bandwidth);
+    } finally {
+      scope.close();
+    }
-    namenode.finalizeUpgrade();
+    TraceScope scope = Trace.startSpan("finalizeUpgrade", traceSampler);
+    try {
+      namenode.finalizeUpgrade();
+    } finally {
+      scope.close();
+    }
-    return namenode.rollingUpgrade(action);
+    TraceScope scope = Trace.startSpan("rollingUpgrade", traceSampler);
+    try {
+      return namenode.rollingUpgrade(action);
+    } finally {
+      scope.close();
+    }
+    TraceScope scope = Trace.startSpan("mkdir", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("getContentSummary", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("setQuota", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("setTimes", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("modifyAclEntries", src);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("removeAclEntries", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("removeDefaultAcl", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("removeAcl", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = Trace.startSpan("setAcl", traceSampler);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("getAclStatus", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("createEncryptionZone", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("getEZForPath", src);
+    } finally {
+      scope.close();
-    return new EncryptionZoneIterator(namenode);
+    return new EncryptionZoneIterator(namenode, traceSampler);
+    TraceScope scope = getPathTraceScope("setXAttr", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("getXAttr", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("getXAttrs", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("getXAttrs", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("listXAttrs", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("removeXAttr", src);
+    } finally {
+      scope.close();
+    TraceScope scope = getPathTraceScope("checkAccess", src);
+    } finally {
+      scope.close();
-    return new DFSInotifyEventInputStream(namenode);
+    return new DFSInotifyEventInputStream(traceSampler, namenode);
-    return new DFSInotifyEventInputStream(namenode, lastReadTxid);
+    return new DFSInotifyEventInputStream(traceSampler, namenode, lastReadTxid);
+
+  private static final byte[] SRC = "src".getBytes(Charset.forName("UTF-8"));
+
+  private static final byte[] DST = "dst".getBytes(Charset.forName("UTF-8"));
+
+  TraceScope getSrcDstTraceScope(String description, String src, String dst) {
+    TraceScope scope = Trace.startSpan(description, traceSampler);
+    Span span = scope.getSpan();
+    if (span != null) {
+      if (src != null) {
+        span.addKVAnnotation(SRC,
+            src.getBytes(Charset.forName("UTF-8")));
+      }
+      if (dst != null) {
+        span.addKVAnnotation(DST,
+            dst.getBytes(Charset.forName("UTF-8")));
+      }
+    }
+    return scope;
+  }

INS31 INS23 INS23 INS31 INS8 INS8 INS8 INS8 INS8 INS8 INS83 INS5 INS42 INS43 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 MOV8 MOV8 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS5 INS59 INS43 INS42 INS44 INS44 INS44 INS8 INS60 MOV6 INS60 INS54 INS60 INS54 INS60 INS60 INS54 INS60 INS54 INS60 INS54 MOV21 INS60 INS54 INS60 INS60 INS60 INS60 INS60 INS54 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS39 INS85 INS42 INS21 INS60 INS54 INS41 INS21 INS60 INS54 INS21 INS60 INS54 INS21 INS60 INS54 INS60 INS54 INS60 INS21 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS54 INS60 INS54 INS60 INS54 INS60 INS54 INS60 INS54 INS60 INS54 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS39 INS85 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS43 INS59 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 INS8 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS32 INS43 INS59 MOV8 INS8 INS2 INS32 INS43 INS59 MOV8 INS8 INS32 INS43 INS59 MOV8 INS8 INS32 INS43 INS59 MOV8 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 INS8 INS32 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 MOV8 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS45 INS42 INS32 INS45 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 MOV25 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS32 INS21 INS32 INS40 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS25 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS7 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 MOV32 INS32 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS33 INS21 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 DEL42 DEL40 DEL2 DEL42 DEL42 DEL42 DEL42 DEL42