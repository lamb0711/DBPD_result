Merging r1527684 through r1532876 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1532910 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URLDecoder;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.TreeMap;
-import java.util.HashMap;
-
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URLDecoder;
+import java.util.*;
+
-public class HarFileSystem extends FilterFileSystem {
+public class HarFileSystem extends FileSystem {
+  private FileSystem fs;
+
-   *
+    // Must call #initialize() method to set the underlying file system
-   * @param fs
+   * @param fs underlying file system
-    super(fs);
+    this.fs = fs;
+    this.statistics = fs.statistics;
+  @Override
+  public Configuration getConf() {
+    return fs.getConf();
+  }
+
-    URI tmp = null;
- 
+    URI tmp;
-  private String decodeFileName(String fname) 
+  private String decodeFileName(String fname)
-  
+
+  @Override
+  public Path getInitialWorkingDirectory() {
+    return getWorkingDirectory();
+  }
+
+  @Override
+  public FsStatus getStatus(Path p) throws IOException {
+    return fs.getStatus(p);
+  }
+
-   * @param underLyingURI the uri of underlying
+   * @param underLyingUri the uri of underlying
-  
+
+  /**
+   * Used for delegation token related functionality. Must delegate to
+   * underlying file system.
+   */
+  @Override
+  protected URI getCanonicalUri() {
+    return fs.getCanonicalUri();
+  }
+
+  @Override
+  protected URI canonicalizeUri(URI uri) {
+    return fs.canonicalizeUri(uri);
+  }
+
+  @Override
+  protected void checkPath(Path path) {
+    fs.checkPath(path);
+  }
+
+  @Override
+  public Path resolvePath(Path p) throws IOException {
+    return fs.resolvePath(p);
+  }
+
-   * @param file the input filestatus to get block locations
+   * @param file the input file status to get block locations
-   * the hash of the path p inside iniside
-   * the filesystem
+   * the hash of the path p inside  the filesystem
-   * @param children
-   *          the string list of children for this parent
-   * @param archiveIndexStat
-   *          the archive index filestatus
-  private void fileStatusesInIndex(HarStatus parent, List<FileStatus> statuses,
-      List<String> children) throws IOException {
+  private void fileStatusesInIndex(HarStatus parent, List<FileStatus> statuses)
+          throws IOException {
-  // <space seperated children>
+  // <space separated children>
-    // we got it.. woo hooo!!! 
- 
+
+  /**
+   * Used for delegation token related functionality. Must delegate to
+   * underlying file system.
+   */
-  public FSDataOutputStream create(Path f,
-      FsPermission permission,
-      boolean overwrite,
-      int bufferSize,
-      short replication,
-      long blockSize,
+  public FileSystem[] getChildFileSystems() {
+    return new FileSystem[]{fs};
+  }
+
+  @Override
+  public FSDataOutputStream create(Path f, FsPermission permission,
+      boolean overwrite, int bufferSize, short replication, long blockSize,
-  
+
+  @SuppressWarnings("deprecation")
+  @Override
+  public FSDataOutputStream createNonRecursive(Path f, boolean overwrite,
+      int bufferSize, short replication, long blockSize, Progressable progress)
+      throws IOException {
+    throw new IOException("Har: create not allowed.");
+  }
+
+  @Override
+  public FSDataOutputStream append(Path f, int bufferSize, Progressable progress) throws IOException {
+    throw new IOException("Har: append not allowed.");
+  }
+
+    super.close();
-    throw new IOException("Har: setreplication not allowed");
+    throw new IOException("Har: setReplication not allowed");
-  
+
+  @Override
+  public boolean rename(Path src, Path dst) throws IOException {
+    throw new IOException("Har: rename not allowed");
+  }
+
+  @Override
+  public FSDataOutputStream append(Path f) throws IOException {
+    throw new IOException("Har: append not allowed");
+  }
+
-  
+
-      fileStatusesInIndex(hstatus, statuses, hstatus.children);
+      fileStatusesInIndex(hstatus, statuses);
-  
+
-  public void copyFromLocalFile(boolean delSrc, Path src, Path dst) throws 
-        IOException {
+  public void copyFromLocalFile(boolean delSrc, boolean overwrite,
+      Path src, Path dst) throws IOException {
-  
+
+  @Override
+  public void copyFromLocalFile(boolean delSrc, boolean overwrite,
+      Path[] srcs, Path dst) throws IOException {
+    throw new IOException("Har: copyfromlocalfile not allowed");
+  }
+
+  @Override
+  public void setTimes(Path p, long mtime, long atime) throws IOException {
+    throw new IOException("Har: setTimes not allowed");
+  }
+
-  public void setPermission(Path p, FsPermission permisssion) 
+  public void setPermission(Path p, FsPermission permission)
-        if (newlen == 0) 
+        if (newlen == 0)
-        //do not need to implement this
-        // hdfs in itself does seektonewsource 
+        // do not need to implement this
+        // hdfs in itself does seektonewsource
-      public void setReadahead(Long readahead)
-          throws IOException, UnsupportedEncodingException {
+      public void setReadahead(Long readahead) throws IOException {
-      public void setDropBehind(Boolean dropBehind)
-          throws IOException, UnsupportedEncodingException {
+      public void setDropBehind(Boolean dropBehind) throws IOException {
-
-    /**
-     * constructor for har input stream.
-     * @param fs the underlying filesystem
-     * @param p the path in the underlying file system
-     * @param start the start position in the part file
-     * @param length the length of valid data in the part file.
-     * @throws IOException
-     */
-    public HarFSDataInputStream(FileSystem fs, Path  p, long start, long length)
-      throws IOException {
-        super(new HarFsInputStream(fs, p, start, length, 0));
-    }
-      Text line;
+      Text line = new Text();
-        line = new Text();
-        String[] readStr = null;
+        String[] readStr;
+      } catch (IOException ioe) {
+        LOG.warn("Encountered exception ", ioe);
+        throw ioe;
+
+  @SuppressWarnings("deprecation")
+  @Override
+  public FsServerDefaults getServerDefaults() throws IOException {
+    return fs.getServerDefaults();
+  }
+
+  @Override
+  public FsServerDefaults getServerDefaults(Path f) throws IOException {
+    return fs.getServerDefaults(f);
+  }
+
+  @Override
+  public long getUsed() throws IOException{
+    return fs.getUsed();
+  }
+
+  @SuppressWarnings("deprecation")
+  @Override
+  public long getDefaultBlockSize() {
+    return fs.getDefaultBlockSize();
+  }
+
+  @SuppressWarnings("deprecation")
+  @Override
+  public long getDefaultBlockSize(Path f) {
+    return fs.getDefaultBlockSize(f);
+  }
+
+  @SuppressWarnings("deprecation")
+  @Override
+  public short getDefaultReplication() {
+    return fs.getDefaultReplication();
+  }
+
+  @Override
+  public short getDefaultReplication(Path f) {
+    return fs.getDefaultReplication(f);
+  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS29 MOV78 INS83 INS5 INS42 INS8 INS79 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 MOV43 INS8 INS78 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS44 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 MOV44 INS44 INS44 MOV43 INS8 INS79 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS79 INS78 INS83 INS39 INS42 INS8 INS79 INS78 INS83 INS39 INS42 INS44 INS8 INS79 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS21 INS21 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS43 INS42 INS42 INS41 INS65 INS42 INS42 INS41 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS21 INS42 INS42 INS43 INS42 INS42 INS41 INS65 INS43 INS85 INS41 INS42 INS45 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS53 INS21 INS42 INS42 INS53 INS42 INS43 INS42 INS43 INS42 INS42 INS53 INS42 INS42 INS43 INS42 INS42 INS53 INS39 INS42 INS42 INS39 INS42 INS39 INS42 INS5 INS42 INS43 INS42 INS42 INS53 INS42 INS39 INS42 INS39 INS42 INS53 UPD42 INS42 INS45 INS42 INS42 INS42 INS41 INS42 INS42 INS43 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS45 INS42 INS41 INS42 INS45 INS42 INS43 INS42 INS41 INS42 INS45 INS42 INS41 INS42 INS43 INS42 INS41 INS66 INS7 INS7 INS32 INS32 INS42 INS32 UPD42 INS66 INS66 INS32 INS42 INS32 INS42 INS32 INS42 INS32 UPD66 UPD66 INS66 INS66 INS42 INS3 INS42 INS42 INS42 INS42 INS14 INS48 INS14 INS42 INS42 INS14 INS42 INS14 INS43 INS85 INS42 INS14 INS14 INS32 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS22 INS42 INS22 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS4 UPD45 INS43 INS45 INS42 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS43 INS45 INS43 INS45 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS44 INS8 INS42 INS43 INS42 INS21 INS53 INS42 INS32 INS42 INS42 INS42 INS45 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL46 DEL33 DEL66 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL40 DEL42 DEL43 DEL42 DEL43 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL14 DEL46 DEL8 DEL31 DEL42 DEL7 DEL21 DEL33