HDFS-12395. Support erasure coding policy operations in namenode edit log. Contributed by Sammi Chen

+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_ADD_ERASURE_CODING_POLICY;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_DISABLE_ERASURE_CODING_POLICY;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_ENABLE_ERASURE_CODING_POLICY;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_REMOVE_ERASURE_CODING_POLICY;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy;
+import org.apache.hadoop.io.erasurecode.ECSchema;
+
+  /**
+   * Operation corresponding to add an erasure coding policy.
+   */
+  static class AddErasureCodingPolicyOp extends FSEditLogOp {
+    private ErasureCodingPolicy ecPolicy;
+
+    AddErasureCodingPolicyOp() {
+      super(OP_ADD_ERASURE_CODING_POLICY);
+    }
+
+    static AddErasureCodingPolicyOp getInstance(OpInstanceCache cache) {
+      return (AddErasureCodingPolicyOp) cache
+          .get(OP_ADD_ERASURE_CODING_POLICY);
+    }
+
+    @Override
+    void resetSubFields() {
+      this.ecPolicy = null;
+    }
+
+    public ErasureCodingPolicy getEcPolicy() {
+      return this.ecPolicy;
+    }
+
+    public AddErasureCodingPolicyOp setErasureCodingPolicy(
+        ErasureCodingPolicy policy) {
+      Preconditions.checkNotNull(policy.getName());
+      Preconditions.checkNotNull(policy.getSchema());
+      Preconditions.checkArgument(policy.getCellSize() > 0);
+      this.ecPolicy = policy;
+      return this;
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      this.ecPolicy = FSImageSerialization.readErasureCodingPolicy(in);
+      readRpcIds(in, logVersion);
+    }
+
+    @Override
+    public void writeFields(DataOutputStream out) throws IOException {
+      Preconditions.checkNotNull(ecPolicy);
+      FSImageSerialization.writeErasureCodingPolicy(out, ecPolicy);
+      writeRpcIds(rpcClientId, rpcCallId, out);
+    }
+
+    @Override
+    protected void toXml(ContentHandler contentHandler) throws SAXException {
+      Preconditions.checkNotNull(ecPolicy);
+      XMLUtils.addSaxString(contentHandler, "CODEC", ecPolicy.getCodecName());
+      XMLUtils.addSaxString(contentHandler, "DATAUNITS",
+          Integer.toString(ecPolicy.getNumDataUnits()));
+      XMLUtils.addSaxString(contentHandler, "PARITYUNITS",
+          Integer.toString(ecPolicy.getNumParityUnits()));
+      XMLUtils.addSaxString(contentHandler, "CELLSIZE",
+          Integer.toString(ecPolicy.getCellSize()));
+
+      Map<String, String> extraOptions = ecPolicy.getSchema().getExtraOptions();
+      if (extraOptions == null || extraOptions.isEmpty()) {
+        XMLUtils.addSaxString(contentHandler, "EXTRAOPTIONS",
+            Integer.toString(0));
+        appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+        return;
+      }
+
+      XMLUtils.addSaxString(contentHandler, "EXTRAOPTIONS",
+          Integer.toString(extraOptions.size()));
+
+      for (Map.Entry<String, String> entry : extraOptions.entrySet()) {
+        contentHandler.startElement("", "", "EXTRAOPTION",
+            new AttributesImpl());
+        XMLUtils.addSaxString(contentHandler, "KEY", entry.getKey());
+        XMLUtils.addSaxString(contentHandler, "VALUE", entry.getValue());
+        contentHandler.endElement("", "", "EXTRAOPTION");
+      }
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+    }
+
+    @Override
+    void fromXml(Stanza st) throws InvalidXmlException {
+      final String codecName = st.getValue("CODEC");
+      final int dataUnits = Integer.parseInt(st.getValue("DATAUNITS"));
+      final int parityUnits = Integer.parseInt(st.getValue("PARITYUNITS"));
+      final int cellSize = Integer.parseInt(st.getValue("CELLSIZE"));
+      final int extraOptionNum = Integer.parseInt(st.getValue("EXTRAOPTIONS"));
+
+      ECSchema schema;
+      if (extraOptionNum == 0) {
+        schema = new ECSchema(codecName, dataUnits, parityUnits, null);
+      } else {
+        Map<String, String> extraOptions = new HashMap<String, String>();
+        List<Stanza> stanzas = st.getChildren("EXTRAOPTION");
+        for (Stanza a: stanzas) {
+          extraOptions.put(a.getValue("KEY"), a.getValue("VALUE"));
+        }
+        schema = new ECSchema(codecName, dataUnits, parityUnits, extraOptions);
+      }
+      this.ecPolicy = new ErasureCodingPolicy(schema, cellSize);
+      readRpcIdsFromXml(st);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder builder = new StringBuilder();
+      builder.append("AddErasureCodingPolicy [");
+      builder.append(ecPolicy.toString());
+
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      builder.append("]");
+      return builder.toString();
+    }
+  }
+
+  /**
+   * Operation corresponding to enable an erasure coding policy.
+   */
+  static class EnableErasureCodingPolicyOp extends FSEditLogOp {
+    private String ecPolicyName;
+
+    EnableErasureCodingPolicyOp() {
+      super(OP_ENABLE_ERASURE_CODING_POLICY);
+    }
+
+    static EnableErasureCodingPolicyOp getInstance(OpInstanceCache cache) {
+      return (EnableErasureCodingPolicyOp) cache
+          .get(OP_ENABLE_ERASURE_CODING_POLICY);
+    }
+
+    @Override
+    void resetSubFields() {
+      this.ecPolicyName = null;
+    }
+
+    public String getEcPolicy() {
+      return this.ecPolicyName;
+    }
+
+    public EnableErasureCodingPolicyOp setErasureCodingPolicy(
+        String policyName) {
+      Preconditions.checkNotNull(policyName);
+      this.ecPolicyName = policyName;
+      return this;
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      this.ecPolicyName = FSImageSerialization.readString(in);
+      readRpcIds(in, logVersion);
+    }
+
+    @Override
+    public void writeFields(DataOutputStream out) throws IOException {
+      Preconditions.checkNotNull(ecPolicyName);
+      FSImageSerialization.writeString(ecPolicyName, out);
+      writeRpcIds(rpcClientId, rpcCallId, out);
+    }
+
+    @Override
+    protected void toXml(ContentHandler contentHandler) throws SAXException {
+      Preconditions.checkNotNull(ecPolicyName);
+      XMLUtils.addSaxString(contentHandler, "POLICYNAME", this.ecPolicyName);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+    }
+
+    @Override
+    void fromXml(Stanza st) throws InvalidXmlException {
+      this.ecPolicyName = st.getValue("POLICYNAME");
+      readRpcIdsFromXml(st);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder builder = new StringBuilder();
+      builder.append("EnableErasureCodingPolicy [");
+      builder.append(ecPolicyName);
+
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      builder.append("]");
+      return builder.toString();
+    }
+  }
+
+  /**
+   * Operation corresponding to disable an erasure coding policy.
+   */
+  static class DisableErasureCodingPolicyOp extends FSEditLogOp {
+    private String ecPolicyName;
+
+    DisableErasureCodingPolicyOp() {
+      super(OP_DISABLE_ERASURE_CODING_POLICY);
+    }
+
+    static DisableErasureCodingPolicyOp getInstance(OpInstanceCache cache) {
+      return (DisableErasureCodingPolicyOp) cache
+          .get(OP_DISABLE_ERASURE_CODING_POLICY);
+    }
+
+    @Override
+    void resetSubFields() {
+      this.ecPolicyName = null;
+    }
+
+    public String getEcPolicy() {
+      return this.ecPolicyName;
+    }
+
+    public DisableErasureCodingPolicyOp setErasureCodingPolicy(
+        String policyName) {
+      Preconditions.checkNotNull(policyName);
+      this.ecPolicyName = policyName;
+      return this;
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      this.ecPolicyName = FSImageSerialization.readString(in);
+      readRpcIds(in, logVersion);
+    }
+
+    @Override
+    public void writeFields(DataOutputStream out) throws IOException {
+      FSImageSerialization.writeString(ecPolicyName, out);
+      writeRpcIds(rpcClientId, rpcCallId, out);
+    }
+
+    @Override
+    protected void toXml(ContentHandler contentHandler) throws SAXException {
+      XMLUtils.addSaxString(contentHandler, "POLICYNAME", this.ecPolicyName);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+    }
+
+    @Override
+    void fromXml(Stanza st) throws InvalidXmlException {
+      this.ecPolicyName = st.getValue("POLICYNAME");
+      readRpcIdsFromXml(st);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder builder = new StringBuilder();
+      builder.append("DisableErasureCodingPolicy [");
+      builder.append(ecPolicyName);
+
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      builder.append("]");
+      return builder.toString();
+    }
+  }
+
+  /**
+   * Operation corresponding to remove an erasure coding policy.
+   */
+  static class RemoveErasureCodingPolicyOp extends FSEditLogOp {
+    private String ecPolicyName;
+
+    RemoveErasureCodingPolicyOp() {
+      super(OP_REMOVE_ERASURE_CODING_POLICY);
+    }
+
+    static RemoveErasureCodingPolicyOp getInstance(OpInstanceCache cache) {
+      return (RemoveErasureCodingPolicyOp) cache
+          .get(OP_REMOVE_ERASURE_CODING_POLICY);
+    }
+
+    @Override
+    void resetSubFields() {
+      this.ecPolicyName = null;
+    }
+
+    public String getEcPolicy() {
+      return this.ecPolicyName;
+    }
+
+    public RemoveErasureCodingPolicyOp setErasureCodingPolicy(
+        String policyName) {
+      Preconditions.checkNotNull(policyName);
+      this.ecPolicyName = policyName;
+      return this;
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      this.ecPolicyName = FSImageSerialization.readString(in);
+      readRpcIds(in, logVersion);
+    }
+
+    @Override
+    public void writeFields(DataOutputStream out) throws IOException {
+      FSImageSerialization.writeString(ecPolicyName, out);
+      writeRpcIds(rpcClientId, rpcCallId, out);
+    }
+
+    @Override
+    protected void toXml(ContentHandler contentHandler) throws SAXException {
+      XMLUtils.addSaxString(contentHandler, "POLICYNAME", this.ecPolicyName);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+    }
+
+    @Override
+    void fromXml(Stanza st) throws InvalidXmlException {
+      this.ecPolicyName = st.getValue("POLICYNAME");
+      readRpcIdsFromXml(st);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder builder = new StringBuilder();
+      builder.append("RemoveErasureCodingPolicy [");
+      builder.append(ecPolicyName);
+
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      builder.append("]");
+      return builder.toString();
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS55 INS55 INS55 INS29 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS42 INS83 INS43 INS59 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS83 INS43 INS59 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS83 INS43 INS59 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS83 INS43 INS59 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS66 INS42 INS42 INS46 INS42 INS43 INS42 INS41 INS42 INS21 INS42 INS41 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS21 INS70 INS21 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS21 INS21 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS41 INS66 INS42 INS42 INS46 INS42 INS43 INS42 INS41 INS42 INS21 INS42 INS41 INS42 INS43 INS42 INS21 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS41 INS66 INS42 INS42 INS46 INS42 INS43 INS42 INS41 INS42 INS21 INS42 INS41 INS42 INS43 INS42 INS21 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS41 INS66 INS42 INS42 INS46 INS42 INS43 INS42 INS41 INS42 INS21 INS42 INS41 INS42 INS43 INS42 INS21 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS41 INS42 INS42 INS11 INS7 INS22 INS42 INS32 INS32 INS32 INS7 INS52 INS42 INS7 INS32 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS74 INS59 INS27 INS8 INS32 INS44 INS32 INS8 INS32 INS42 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS7 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS11 INS7 INS22 INS42 INS32 INS7 INS52 INS42 INS7 INS32 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS7 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS11 INS7 INS22 INS42 INS32 INS7 INS52 INS42 INS7 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS7 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS11 INS7 INS22 INS42 INS32 INS7 INS52 INS42 INS7 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS7 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS32 INS22 INS33 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS22 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS43 INS43 INS43 INS42 INS32 INS27 INS32 INS21 INS21 INS41 INS42 INS42 INS42 INS45 INS32 INS74 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS21 INS60 INS60 INS70 INS21 INS22 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS32 INS22 INS33 INS52 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS22 INS42 INS42 INS42 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS32 INS22 INS33 INS52 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS22 INS42 INS42 INS42 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS32 INS22 INS33 INS52 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS22 INS42 INS42 INS42 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS43 INS43 INS43 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS7 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS7 INS52 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS14 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45