Merge remote-tracking branch 'apache/trunk' into MR-2841

+    Map<String, Float> fairSharePreemptionThresholds =
+        new HashMap<String, Float>();
+    float defaultFairSharePreemptionThreshold = 0.5f;
-        } else if ("defaultFairSharePreemptionTimeout".equals(element.getTagName())) {
+        } else if ("defaultFairSharePreemptionTimeout"
+            .equals(element.getTagName())) {
-        } else if ("defaultMinSharePreemptionTimeout".equals(element.getTagName())) {
+        } else if ("defaultMinSharePreemptionTimeout"
+            .equals(element.getTagName())) {
+        } else if ("defaultFairSharePreemptionThreshold"
+            .equals(element.getTagName())) {
+          String text = ((Text)element.getFirstChild()).getData().trim();
+          float val = Float.parseFloat(text);
+          val = Math.max(Math.min(val, 1.0f), 0.0f);
+          defaultFairSharePreemptionThreshold = val;
-          queueAcls, configuredQueues);
+          fairSharePreemptionThresholds, queueAcls, configuredQueues);
+    // Set the fair share preemption threshold for the root queue
+    if (!fairSharePreemptionThresholds.containsKey(QueueManager.ROOT_QUEUE)) {
+      fairSharePreemptionThresholds.put(QueueManager.ROOT_QUEUE,
+          defaultFairSharePreemptionThreshold);
+    }
+
-        minSharePreemptionTimeouts, fairSharePreemptionTimeouts, queueAcls,
+        minSharePreemptionTimeouts, fairSharePreemptionTimeouts,
+        fairSharePreemptionThresholds, queueAcls,
-  private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources,
+  private void loadQueue(String parentName, Element element,
+      Map<String, Resource> minQueueResources,
+      Map<String, Float> fairSharePreemptionThresholds,
+      } else if ("fairSharePreemptionThreshold".equals(field.getTagName())) {
+        String text = ((Text)field.getFirstChild()).getData().trim();
+        float val = Float.parseFloat(text);
+        val = Math.max(Math.min(val, 1.0f), 0.0f);
+        fairSharePreemptionThresholds.put(queueName, val);
-            fairSharePreemptionTimeouts, queueAcls, configuredQueues);
+            fairSharePreemptionTimeouts, fairSharePreemptionThresholds,
+            queueAcls, configuredQueues);
-    if (maxQueueResources.containsKey(queueName) && minQueueResources.containsKey(queueName)
+    if (maxQueueResources.containsKey(queueName) &&
+        minQueueResources.containsKey(queueName)
-      LOG.warn(String.format("Queue %s has max resources %s less than min resources %s",
-          queueName, maxQueueResources.get(queueName), minQueueResources.get(queueName)));
+      LOG.warn(
+          String.format(
+              "Queue %s has max resources %s less than min resources %s",
+          queueName, maxQueueResources.get(queueName),
+              minQueueResources.get(queueName)));

INS44 INS60 INS60 INS25 INS74 INS42 INS74 INS59 INS39 INS59 INS38 INS8 MOV43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS14 INS42 INS34 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS40 INS32 MOV43 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS25 INS25 INS32 INS8 MOV25 INS32 INS8 MOV25 INS45 INS42 INS32 INS60 INS60 INS21 INS21 INS45 INS42 INS32 INS60 INS60 INS21 INS21 INS42 INS42 INS43 INS59 INS39 INS59 INS7 INS32 INS42 INS42 INS43 INS59 INS39 INS59 INS7 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS36 INS42 INS42 INS42 INS42 INS34 INS36 INS42 INS42 INS42 INS42 INS34 INS11 INS11 INS43 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42