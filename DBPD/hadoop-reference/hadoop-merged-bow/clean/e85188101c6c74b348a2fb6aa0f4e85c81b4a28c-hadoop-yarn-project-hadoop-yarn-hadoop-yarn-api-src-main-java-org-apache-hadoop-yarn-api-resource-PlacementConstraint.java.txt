YARN-7921. Transform a PlacementConstraint to a string expression. Contributed by Weiwei Yang.

+import java.util.stream.Collectors;
+import java.util.Iterator;
+  @Override
+  public String toString() {
+    return this.constraintExpr.toString();
+  }
+
+    public String toString() {
+      int max = getMaxCardinality();
+      int min = getMinCardinality();
+      List<String> targetExprList = getTargetExpressions().stream()
+          .map(TargetExpression::toString).collect(Collectors.toList());
+      List<String> targetConstraints = new ArrayList<>();
+      for (String targetExpr : targetExprList) {
+        if (min == 0 && max == 0) {
+          // anti-affinity
+          targetConstraints.add(new StringBuilder()
+              .append("notin").append(",")
+              .append(getScope()).append(",")
+              .append(targetExpr)
+              .toString());
+        } else if (min == 1 && max == Integer.MAX_VALUE) {
+          // affinity
+          targetConstraints.add(new StringBuilder()
+              .append("in").append(",")
+              .append(getScope()).append(",")
+              .append(targetExpr)
+              .toString());
+        } else {
+          // cardinality
+          targetConstraints.add(new StringBuilder()
+              .append("cardinality").append(",")
+              .append(getScope()).append(",")
+              .append(targetExpr).append(",")
+              .append(min).append(",")
+              .append(max)
+              .toString());
+        }
+      }
+      return String.join(":", targetConstraints);
+    }
+
+    @Override
+    public String toString() {
+      StringBuffer sb = new StringBuffer();
+      if (TargetType.ALLOCATION_TAG == this.targetType) {
+        // following by a comma separated tags
+        sb.append(String.join(",", getTargetValues()));
+      } else if (TargetType.NODE_ATTRIBUTE == this.targetType) {
+        // following by a comma separated key value pairs
+        if (this.getTargetValues() != null) {
+          String attributeName = this.getTargetKey();
+          String attributeValues = String.join(":", this.getTargetValues());
+          sb.append(attributeName + "=[" + attributeValues + "]");
+        }
+      }
+      return sb.toString();
+    }
+
+    @Override
-      IN, NOT_IN
+      IN("in"), NOT_IN("notin");
+
+      private String operator;
+      TargetOperator(String op) {
+        this.operator = op;
+      }
+
+      String getOperator() {
+        return this.operator;
+      }
+    public String toString() {
+      List<String> targetExprs = getTargetExpressions().stream().map(
+          targetExpression -> new StringBuilder()
+              .append(op.getOperator()).append(",")
+              .append(scope).append(",")
+              .append(targetExpression.toString())
+              .toString()).collect(Collectors.toList());
+      return String.join(":", targetExprs);
+    }
+
+    @Override
+
+    @Override
+    public String toString() {
+      StringBuffer sb = new StringBuffer();
+      sb.append("cardinality").append(",").append(getScope()).append(",");
+      for (String tag : getAllocationTags()) {
+        sb.append(tag).append(",");
+      }
+      sb.append(minCardinality).append(",").append(maxCardinality);
+      return sb.toString();
+    }
+
+    @Override
+    public String toString() {
+      StringBuffer sb = new StringBuffer();
+      sb.append("and(");
+      Iterator<AbstractConstraint> it = getChildren().iterator();
+      while (it.hasNext()) {
+        AbstractConstraint child = it.next();
+        sb.append(child.toString());
+        if (it.hasNext()) {
+          sb.append(":");
+        }
+      }
+      sb.append(")");
+      return sb.toString();
+    }
+
+    @Override
+    public String toString() {
+      StringBuffer sb = new StringBuffer();
+      sb.append("or(");
+      Iterator<AbstractConstraint> it = getChildren().iterator();
+      while (it.hasNext()) {
+        AbstractConstraint child = it.next();
+        sb.append(child.toString());
+        if (it.hasNext()) {
+          sb.append(":");
+        }
+      }
+      sb.append(")");
+      return sb.toString();
+    }
+
+    @Override
+    public String toString() {
+      StringBuffer sb = new StringBuffer();
+      sb.append("DelayedOr(");
+      Iterator<TimedPlacementConstraint> it = getChildren().iterator();
+      while (it.hasNext()) {
+        TimedPlacementConstraint child = it.next();
+        sb.append(child.toString());
+        if (it.hasNext()) {
+          sb.append(",");
+        }
+      }
+      sb.append(")");
+      return sb.toString();
+    }

INS26 INS26 INS40 INS40 INS31 INS78 INS83 INS43 INS42 INS8 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS41 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS23 INS31 INS31 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS32 INS42 INS42 INS60 INS60 INS60 INS60 INS70 INS41 INS42 INS42 INS60 INS25 INS41 INS45 INS45 INS83 INS43 INS59 INS42 INS44 INS8 INS43 INS42 INS8 INS42 INS42 INS60 INS41 INS42 INS42 INS60 INS21 INS70 INS21 INS41 INS42 INS42 INS60 INS21 INS60 INS61 INS21 INS41 INS42 INS42 INS60 INS21 INS60 INS61 INS21 INS41 INS42 INS42 INS60 INS21 INS60 INS61 INS21 INS41 INS22 INS42 INS39 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS43 INS59 INS27 INS8 INS25 INS32 INS42 INS42 INS43 INS42 INS21 INS42 INS41 INS74 INS59 INS32 INS43 INS59 INS32 INS44 INS32 INS8 INS32 INS32 INS43 INS59 INS32 INS74 INS59 INS32 INS8 INS32 INS32 INS43 INS59 INS32 INS74 INS59 INS32 INS8 INS32 INS32 INS43 INS59 INS32 INS74 INS59 INS32 INS8 INS32 INS32 INS52 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS14 INS40 INS22 INS21 INS27 INS8 INS42 INS42 INS42 INS7 INS22 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS14 INS32 INS42 INS45 INS43 INS42 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS21 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS21 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS21 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS74 INS42 INS27 INS8 INS25 INS43 INS52 INS42 INS32 INS40 INS22 INS25 INS22 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS45 INS43 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS32 INS8 INS43 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS32 INS8 INS43 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS32 INS8 INS32 INS42 INS90 INS42 INS42 INS43 INS27 INS27 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS32 INS52 INS42 INS27 INS8 INS52 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS32 INS27 INS27 INS21 INS21 INS42 INS42 INS45 INS32 INS32 INS33 INS60 INS60 INS21 INS32 INS42 INS59 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS40 INS32 INS32 INS42 INS52 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS45 INS32 INS42 INS45 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS32 INS14 INS42 INS45 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS43 INS42 INS42 INS43 INS14 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS45 INS42 INS32 INS42 INS32 INS32 INS42 INS45 INS42 INS14 INS42 INS45 INS43 INS42