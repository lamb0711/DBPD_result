YARN-2427. Added the API of moving apps between queues in RM web services. Contributed by Varun Vasudev.

+import org.apache.hadoop.yarn.api.protocolrecords.MoveApplicationAcrossQueuesRequest;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.AppQueue;
-        "UNKNOWN", "RMWebService", "Trying to kill/move an absent application "
+        "UNKNOWN", "RMWebService", "Trying to kill an absent application "
+  @GET
+  @Path("/apps/{appid}/queue")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public AppQueue getAppQueue(@Context HttpServletRequest hsr,
+      @PathParam("appid") String appId) throws AuthorizationException {
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    String userName = "UNKNOWN-USER";
+    if (callerUGI != null) {
+      userName = callerUGI.getUserName();
+    }
+    RMApp app = null;
+    try {
+      app = getRMAppForAppId(appId);
+    } catch (NotFoundException e) {
+      RMAuditLogger.logFailure(userName, AuditConstants.KILL_APP_REQUEST,
+        "UNKNOWN", "RMWebService",
+        "Trying to get state of an absent application " + appId);
+      throw e;
+    }
+
+    AppQueue ret = new AppQueue();
+    ret.setQueue(app.getQueue());
+
+    return ret;
+  }
+
+  @PUT
+  @Path("/apps/{appid}/queue")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response updateAppQueue(AppQueue targetQueue,
+      @Context HttpServletRequest hsr, @PathParam("appid") String appId)
+      throws AuthorizationException, YarnException, InterruptedException,
+      IOException {
+
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    if (callerUGI == null) {
+      String msg = "Unable to obtain user name, user not authenticated";
+      throw new AuthorizationException(msg);
+    }
+
+    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
+      String msg = "The default static user cannot carry out this operation.";
+      return Response.status(Status.FORBIDDEN).entity(msg).build();
+    }
+
+    String userName = callerUGI.getUserName();
+    RMApp app = null;
+    try {
+      app = getRMAppForAppId(appId);
+    } catch (NotFoundException e) {
+      RMAuditLogger.logFailure(userName, AuditConstants.KILL_APP_REQUEST,
+        "UNKNOWN", "RMWebService", "Trying to move an absent application "
+            + appId);
+      throw e;
+    }
+
+    if (!app.getQueue().equals(targetQueue.getQueue())) {
+      // user is attempting to change queue.
+      return moveApp(app, callerUGI, targetQueue.getQueue());
+    }
+
+    AppQueue ret = new AppQueue();
+    ret.setQueue(app.getQueue());
+
+    return Response.status(Status.OK).entity(ret).build();
+  }
+
+  protected Response moveApp(RMApp app, UserGroupInformation callerUGI,
+      String targetQueue) throws IOException, InterruptedException {
+
+    if (app == null) {
+      throw new IllegalArgumentException("app cannot be null");
+    }
+    String userName = callerUGI.getUserName();
+    final ApplicationId appid = app.getApplicationId();
+    final String reqTargetQueue = targetQueue;
+    try {
+      callerUGI
+        .doAs(new PrivilegedExceptionAction<Void>() {
+          @Override
+          public Void run() throws IOException,
+              YarnException {
+            MoveApplicationAcrossQueuesRequest req =
+                MoveApplicationAcrossQueuesRequest.newInstance(appid,
+                  reqTargetQueue);
+            rm.getClientRMService().moveApplicationAcrossQueues(req);
+            return null;
+          }
+        });
+    } catch (UndeclaredThrowableException ue) {
+      // if the root cause is a permissions issue
+      // bubble that up to the user
+      if (ue.getCause() instanceof YarnException) {
+        YarnException ye = (YarnException) ue.getCause();
+        if (ye.getCause() instanceof AccessControlException) {
+          String appId = app.getApplicationId().toString();
+          String msg =
+              "Unauthorized attempt to move appid " + appId
+                  + " by remote user " + userName;
+          return Response.status(Status.FORBIDDEN).entity(msg).build();
+        } else if (ye.getMessage().startsWith("App in")
+            && ye.getMessage().endsWith("state cannot be moved.")) {
+          return Response.status(Status.BAD_REQUEST).entity(ye.getMessage())
+            .build();
+        } else {
+          throw ue;
+        }
+      } else {
+        throw ue;
+      }
+    }
+
+    AppQueue ret = new AppQueue();
+    ret.setQueue(app.getQueue());
+    return Response.status(Status.OK).entity(ret).build();
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS42 INS21 INS60 INS60 INS25 INS60 INS54 INS60 INS21 INS41 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS43 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS25 INS60 INS60 INS54 INS25 INS60 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS25 INS60 INS60 INS60 INS54 INS60 INS21 INS41 INS40 INS40 INS42 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS38 INS8 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS27 INS8 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS33 INS21 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS53 INS32 INS32 INS60 INS41 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS32 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS9 INS7 INS7 INS43 INS42 INS21 INS53 INS43 INS42 INS42 INS42 INS42 INS9 INS43 INS59 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS32 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS25 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS43 INS45 INS42 INS42 INS14 INS42 INS62 INS8 INS8 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS45 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS45 INS27 INS42 INS42 INS42 INS74 INS1 INS32 INS43 INS60 INS25 INS53 UPD45 INS45 INS42 INS42 INS42 INS40 INS45 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS43 INS59 INS62 INS8 INS25 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS42 INS11 INS32 INS43 INS60 INS60 INS41 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS60 INS21 INS41 INS43 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS41 INS53 INS43 INS59 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS42