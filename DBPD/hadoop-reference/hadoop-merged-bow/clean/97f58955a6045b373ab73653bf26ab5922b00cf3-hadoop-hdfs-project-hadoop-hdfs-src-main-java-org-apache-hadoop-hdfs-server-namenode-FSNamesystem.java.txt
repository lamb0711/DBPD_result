HDFS-6293. Issues with OIV processing PB-based fsimages. Contributed by Kihwal Lee.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594439 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.BufferedWriter;
-import java.io.ByteArrayInputStream;
-import java.io.DataInput;
-import java.io.DataInputStream;
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStreamWriter;
-import java.io.PrintWriter;
-import java.io.StringWriter;
+import java.io.*;
+   * Serializes leases.
+   */
+  void saveFilesUnderConstruction(DataOutputStream out,
+      Map<Long, INodeFile> snapshotUCMap) throws IOException {
+    // This is run by an inferior thread of saveNamespace, which holds a read
+    // lock on our behalf. If we took the read lock here, we could block
+    // for fairness if a writer is waiting on the lock.
+    synchronized (leaseManager) {
+      Map<String, INodeFile> nodes = leaseManager.getINodesUnderConstruction();
+      for (Map.Entry<String, INodeFile> entry : nodes.entrySet()) {
+        // TODO: for HDFS-5428, because of rename operations, some
+        // under-construction files that are
+        // in the current fs directory can also be captured in the
+        // snapshotUCMap. We should remove them from the snapshotUCMap.
+        snapshotUCMap.remove(entry.getValue().getId());
+      }
+
+      out.writeInt(nodes.size() + snapshotUCMap.size()); // write the size
+      for (Map.Entry<String, INodeFile> entry : nodes.entrySet()) {
+        FSImageSerialization.writeINodeUnderConstruction(
+            out, entry.getValue(), entry.getKey());
+      }
+      for (Map.Entry<Long, INodeFile> entry : snapshotUCMap.entrySet()) {
+        // for those snapshot INodeFileUC, we use "/.reserved/.inodes/<inodeid>"
+        // as their paths
+        StringBuilder b = new StringBuilder();
+        b.append(FSDirectory.DOT_RESERVED_PATH_PREFIX)
+            .append(Path.SEPARATOR).append(FSDirectory.DOT_INODES_STRING)
+            .append(Path.SEPARATOR).append(entry.getValue().getId());
+        FSImageSerialization.writeINodeUnderConstruction(
+            out, entry.getValue(), b.toString());
+      }
+    }
+  }
+
+  /**
+  /**
+   * @param out save state of the secret manager
+   * @param sdPath String storage directory path
+   */
+  void saveSecretManagerStateCompat(DataOutputStream out, String sdPath)
+      throws IOException {
+    dtSecretManager.saveSecretManagerStateCompat(out, sdPath);
+  }
+

UPD40 INS31 INS31 INS29 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS43 INS42 INS74 INS42 INS42 INS51 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS66 INS42 INS43 INS43 INS43 INS42 INS8 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS70 INS21 INS70 INS70 INS42 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS44 INS32 INS8 INS44 INS32 INS8 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS42 INS42 INS27 INS74 INS42 INS42 INS42 INS21 INS74 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS32 INS32 INS32 INS43 INS43 INS43 INS32 INS43 INS43 INS43 INS43 INS59 INS32 INS32 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS40 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26