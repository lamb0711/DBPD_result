HDFS-4431. Support snapshot in OfflineImageViewer.  Contributed by Jing Zhao


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446993 13f79535-47bb-0310-9956-ffa450edef68

-      -40};
+      -40, -41, -42};
+      
+      boolean supportSnapshot = LayoutVersion.supports(Feature.SNAPSHOT,
+          imageVersion);
+      if (supportSnapshot) {
+        v.visit(ImageElement.SNAPSHOT_COUNTER, in.readInt());
+        v.visit(ImageElement.NUM_SNAPSHOTS_TOTAL, in.readInt());
+        v.visit(ImageElement.NUM_SNAPSHOTTABLE_DIRS, in.readInt());
+      }
-      processINodes(in, v, numInodes, skipBlocks);
+      processINodes(in, v, numInodes, skipBlocks, supportSnapshot);
+   * @param supportSnapshot Whether or not the imageVersion supports snapshot
-      long numInodes, boolean skipBlocks) throws IOException {
+      long numInodes, boolean skipBlocks, boolean supportSnapshot)
+      throws IOException {
-      processLocalNameINodes(in, v, numInodes, skipBlocks);
+      if (!supportSnapshot) {
+        processLocalNameINodes(in, v, numInodes, skipBlocks);
+      } else {
+        processLocalNameINodesWithSnapshot(in, v, skipBlocks);
+      }
-    processINode(in, v, skipBlocks, "");
+    processINode(in, v, skipBlocks, "", false);
+    return processChildren(in, v, skipBlocks, parentName);
+  }
+  
+  /**
+   * Process image with local path name and snapshot support
+   * 
+   * @param in image stream
+   * @param v visitor
+   * @param skipBlocks skip blocks or not
+   */
+  private void processLocalNameINodesWithSnapshot(DataInputStream in,
+      ImageVisitor v, boolean skipBlocks) throws IOException {
+    // process root
+    processINode(in, v, skipBlocks, "", false);
+    processDirectoryWithSnapshot(in, v, skipBlocks);
+  }
+  
+  /**
+   * Process directories when snapshot is supported.
+   */
+  private void processDirectoryWithSnapshot(DataInputStream in, ImageVisitor v,
+      boolean skipBlocks) throws IOException {
+    // 1. load dir name
+    String dirName = FSImageSerialization.readString(in);
+    // 2. load possible snapshots
+    processSnapshots(in, v, dirName);
+    // 3. load children nodes
+    processChildren(in, v, skipBlocks, dirName);
+    // 4. load possible directory diff list
+    processDirectoryDiffList(in, v, dirName);
+    // recursively process sub-directories
+    final int numSubTree = in.readInt();
+    for (int i = 0; i < numSubTree; i++) {
+      processDirectoryWithSnapshot(in, v, skipBlocks);
+    }
+  }
+  
+  /**
+   * Process snapshots of a snapshottable directory
+   */
+  private void processSnapshots(DataInputStream in, ImageVisitor v,
+      String rootName) throws IOException {
+    final int numSnapshots = in.readInt();
+    if (numSnapshots >= 0) {
+      v.visitEnclosingElement(ImageElement.SNAPSHOTS,
+          ImageElement.NUM_SNAPSHOTS, numSnapshots);
+      for (int i = 0; i < numSnapshots; i++) {
+        // process snapshot
+        v.visitEnclosingElement(ImageElement.SNAPSHOT);
+        v.visit(ImageElement.SNAPSHOT_ID, in.readInt());
+        // process root of snapshot
+        v.visitEnclosingElement(ImageElement.SNAPSHOT_ROOT);
+        processINode(in, v, true, rootName, false);
+        v.leaveEnclosingElement();
+        v.leaveEnclosingElement();
+      }
+      v.visit(ImageElement.SNAPSHOT_QUOTA, in.readInt());
+      v.leaveEnclosingElement();
+    }
+  }
+  
+  private void processDirectoryDiffList(DataInputStream in, ImageVisitor v,
+      String currentINodeName) throws IOException {
+    final int numDirDiff = in.readInt();
+    if (numDirDiff >= 0) {
+      v.visitEnclosingElement(ImageElement.SNAPSHOT_DIR_DIFFS,
+          ImageElement.NUM_SNAPSHOT_DIR_DIFF, numDirDiff);
+      for (int i = 0; i < numDirDiff; i++) {
+        // process directory diffs in reverse chronological oder
+        processDirectoryDiff(in, v, currentINodeName); 
+      }
+      v.leaveEnclosingElement();
+    }
+  }
+  
+  private void processDirectoryDiff(DataInputStream in, ImageVisitor v,
+      String currentINodeName) throws IOException {
+    v.visitEnclosingElement(ImageElement.SNAPSHOT_DIR_DIFF);
+    String snapshot = FSImageSerialization.readString(in);
+    v.visit(ImageElement.SNAPSHOT_DIFF_SNAPSHOTROOT, snapshot);
+    v.visit(ImageElement.SNAPSHOT_DIR_DIFF_CHILDREN_SIZE, in.readInt());
+    
+    // process snapshotINode
+    boolean useRoot = in.readBoolean();
+    if (!useRoot) {
+      if (in.readBoolean()) {
+        v.visitEnclosingElement(ImageElement.SNAPSHOT_DIFF_SNAPSHOTINODE);
+        processINode(in, v, true, currentINodeName, true);
+        v.leaveEnclosingElement();
+      }
+    }
+    
+    // process createdList
+    int createdSize = in.readInt();
+    v.visitEnclosingElement(ImageElement.SNAPSHOT_DIR_DIFF_CREATEDLIST,
+        ImageElement.SNAPSHOT_DIR_DIFF_CREATEDLIST_SIZE, createdSize);
+    for (int i = 0; i < createdSize; i++) {
+      String createdNode = FSImageSerialization.readString(in);
+      v.visit(ImageElement.SNAPSHOT_DIR_DIFF_CREATED_INODE, createdNode);
+    }
+    v.leaveEnclosingElement();
+    
+    // process deletedList
+    int deletedSize = in.readInt();
+    v.visitEnclosingElement(ImageElement.SNAPSHOT_DIR_DIFF_DELETEDLIST,
+        ImageElement.SNAPSHOT_DIR_DIFF_DELETEDLIST_SIZE, deletedSize);
+    for (int i = 0; i < deletedSize; i++) {
+      v.visitEnclosingElement(ImageElement.SNAPSHOT_DIR_DIFF_DELETED_INODE);
+      processINode(in, v, false, currentINodeName, true);
+      v.leaveEnclosingElement();
+    }
+    v.leaveEnclosingElement();
+    v.leaveEnclosingElement();
+  }
+  
+  /** Process children under a directory */
+  private int processChildren(DataInputStream in, ImageVisitor v,
+      boolean skipBlocks, String parentName) throws IOException {
-    for (int i=0; i<numChildren; i++) {
-      processINode(in, v, skipBlocks, parentName);
+    for (int i = 0; i < numChildren; i++) {
+      processINode(in, v, skipBlocks, parentName, false);
-   /**
-    * Process image with full path name
-    * 
-    * @param in image stream
-    * @param v visitor
-    * @param numInodes number of indoes to read
-    * @param skipBlocks skip blocks or not
-    * @throws IOException if there is any error occurs
-    */
-   private void processFullNameINodes(DataInputStream in, ImageVisitor v,
-       long numInodes, boolean skipBlocks) throws IOException {
-     for(long i = 0; i < numInodes; i++) {
-       processINode(in, v, skipBlocks, null);
-     }
-   }
-   
-   /**
-    * Process an INode
-    * 
-    * @param in image stream
-    * @param v visitor
-    * @param skipBlocks skip blocks or not
-    * @param parentName the name of its parent node
-    * @throws IOException
-    */
+  /**
+   * Process image with full path name
+   * 
+   * @param in image stream
+   * @param v visitor
+   * @param numInodes number of indoes to read
+   * @param skipBlocks skip blocks or not
+   * @throws IOException if there is any error occurs
+   */
+  private void processFullNameINodes(DataInputStream in, ImageVisitor v,
+      long numInodes, boolean skipBlocks) throws IOException {
+    for(long i = 0; i < numInodes; i++) {
+      processINode(in, v, skipBlocks, null, false);
+    }
+  }
+ 
+  /**
+   * Process an INode
+   * 
+   * @param in image stream
+   * @param v visitor
+   * @param skipBlocks skip blocks or not
+   * @param parentName the name of its parent node
+   * @param isSnapshotCopy whether or not the inode is a snapshot copy
+   * @throws IOException
+   */
-      boolean skipBlocks, String parentName) throws IOException {
+      boolean skipBlocks, String parentName, boolean isSnapshotCopy)
+      throws IOException {
+    boolean supportSnapshot = 
+        LayoutVersion.supports(Feature.SNAPSHOT, imageVersion);
+    
-
-    // File or directory
-    if (numBlocks > 0 || numBlocks == -1) {
+    
+    if (numBlocks > 0) { // File
+      if (supportSnapshot) {
+        // process file diffs
+        processFileDiffList(in, v, parentName);
+        if (isSnapshotCopy) {
+          boolean underConstruction = in.readBoolean();
+          if (underConstruction) {
+            v.visit(ImageElement.CLIENT_NAME,
+                FSImageSerialization.readString(in));
+            v.visit(ImageElement.CLIENT_MACHINE,
+                FSImageSerialization.readString(in));
+          }
+        }
+      }
+    } else if (numBlocks == -1) { // Directory
-    }
-    if (numBlocks == -2) {
+      if (supportSnapshot) {
+        boolean snapshottable = in.readBoolean();
+        if (!snapshottable) {
+          boolean withSnapshot = in.readBoolean();
+          v.visit(ImageElement.IS_WITHSNAPSHOT_DIR, Boolean.toString(withSnapshot));
+        } else {
+          v.visit(ImageElement.IS_SNAPSHOTTABLE_DIR, Boolean.toString(snapshottable));
+        }
+      }
+    } else if (numBlocks == -2) {
-
+  
+  private void processFileDiffList(DataInputStream in, ImageVisitor v,
+      String currentINodeName) throws IOException {
+    final int size = in.readInt();
+    if (size >= 0) {
+      v.visitEnclosingElement(ImageElement.SNAPSHOT_FILE_DIFFS,
+          ImageElement.NUM_SNAPSHOT_FILE_DIFF, size);
+      String snapshot = FSImageSerialization.readString(in);
+      v.visit(ImageElement.SNAPSHOT_DIFF_SNAPSHOTROOT, snapshot);
+      v.visit(ImageElement.SNAPSHOT_FILE_SIZE, in.readLong());
+      if (in.readBoolean()) {
+        v.visitEnclosingElement(ImageElement.SNAPSHOT_DIFF_SNAPSHOTINODE);
+        processINode(in, v, true, currentINodeName, true);
+        v.leaveEnclosingElement();
+      }
+      v.leaveEnclosingElement();
+    }
+  }
+  

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS44 INS83 INS39 INS42 MOV44 MOV44 MOV44 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 UPD42 INS44 INS44 INS44 INS44 INS43 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS65 INS39 INS42 MOV60 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS21 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS21 INS21 INS60 INS24 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS21 INS60 INS25 INS60 INS21 INS24 INS21 INS60 INS21 INS24 INS21 INS21 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS65 INS39 INS42 INS60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS38 INS38 INS42 INS66 INS8 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS66 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS83 INS39 INS59 INS58 INS27 INS37 INS8 INS66 INS42 INS42 INS42 INS83 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS83 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS39 INS59 INS38 INS8 INS39 INS59 INS32 INS58 INS27 INS37 INS8 INS32 INS39 INS59 INS32 INS58 INS27 INS37 INS8 INS32 INS32 INS66 INS42 INS42 INS42 INS42 INS66 INS39 INS59 MOV27 INS8 MOV25 INS42 INS42 INS42 INS83 INS39 INS59 INS27 INS8 INS34 INS34 INS60 INS25 INS25 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS34 INS21 INS24 INS21 INS21 INS42 INS32 INS42 INS34 INS21 INS24 INS21 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS25 INS42 INS32 INS42 INS42 INS40 INS40 INS42 INS39 INS59 INS42 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS40 INS42 INS39 INS59 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS25 MOV27 INS25 INS42 INS32 INS42 INS34 INS21 INS60 INS21 INS21 INS25 INS21 INS39 INS59 INS42 INS8 INS38 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS32 INS58 INS27 INS37 INS8 INS32 INS32 INS42 INS42 INS32 INS58 INS27 INS37 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS42 INS42 INS42 INS34 INS32 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS8 INS25 MOV27 INS8 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS32 INS8 INS32 INS42 INS32 INS21 INS21 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS39 INS59 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS9 INS42 INS9 INS42 INS42 INS9 INS9 INS21 INS25 INS42 INS8 INS21 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS32 INS32 INS42 INS34 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS34 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS8 INS60 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS60 MOV25 INS39 INS59 INS38 INS8 INS8 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS42 INS32 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS39 INS59 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 UPD40 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42