YARN-1342. Recover container tokens upon nodemanager restart. Contributed by Jason Lowe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612995 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.records.ContainerId;
-  private RecoveredNMTokenState nmTokenState;
+  private RecoveredNMTokensState nmTokenState;
+  private RecoveredContainerTokensState containerTokenState;
-    nmTokenState = new RecoveredNMTokenState();
+    nmTokenState = new RecoveredNMTokensState();
+    containerTokenState = new RecoveredContainerTokensState();
+    containerTokenState.activeTokens = new HashMap<ContainerId, Long>();
-
-  public RecoveredNMTokenState loadNMTokenState() throws IOException {
+  public RecoveredNMTokensState loadNMTokensState() throws IOException {
-    RecoveredNMTokenState result = new RecoveredNMTokenState();
+    RecoveredNMTokensState result = new RecoveredNMTokensState();
+  @Override
+  public RecoveredContainerTokensState loadContainerTokensState()
+      throws IOException {
+    // return a copy so caller can't modify our state
+    RecoveredContainerTokensState result =
+        new RecoveredContainerTokensState();
+    result.currentMasterKey = containerTokenState.currentMasterKey;
+    result.previousMasterKey = containerTokenState.previousMasterKey;
+    result.activeTokens =
+        new HashMap<ContainerId, Long>(containerTokenState.activeTokens);
+    return result;
+  }
+
+  @Override
+  public void storeContainerTokenCurrentMasterKey(MasterKey key)
+      throws IOException {
+    MasterKeyPBImpl keypb = (MasterKeyPBImpl) key;
+    containerTokenState.currentMasterKey =
+        new MasterKeyPBImpl(keypb.getProto());
+  }
+
+  @Override
+  public void storeContainerTokenPreviousMasterKey(MasterKey key)
+      throws IOException {
+    MasterKeyPBImpl keypb = (MasterKeyPBImpl) key;
+    containerTokenState.previousMasterKey =
+        new MasterKeyPBImpl(keypb.getProto());
+  }
+
+  @Override
+  public void storeContainerToken(ContainerId containerId,
+      Long expirationTime) throws IOException {
+    containerTokenState.activeTokens.put(containerId, expirationTime);
+  }
+
+  @Override
+  public void removeContainerToken(ContainerId containerId)
+      throws IOException {
+    containerTokenState.activeTokens.remove(containerId);
+  }
+
+

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS31 UPD43 INS83 INS43 INS59 UPD43 UPD42 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 INS42 INS42 INS21 INS21 UPD42 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS42 INS43 INS42 INS42 INS60 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS42 INS21 INS7 INS7 UPD43 INS43 INS59 INS7 INS7 INS7 INS42 INS42 INS43 INS59 INS7 INS42 INS43 INS59 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS40 INS14 UPD42 INS42 INS42 INS14 INS40 INS40 INS40 INS40 INS40 INS14 INS42 INS42 INS11 INS40 INS14 INS42 INS42 INS11 INS40 INS14 INS40 INS42 INS42 INS42 INS40 INS42 INS42 UPD43 INS43 INS74 UPD43 INS43 INS74 INS40 INS43 INS42 INS43 INS32 INS43 INS42 INS43 INS32 UPD42 INS42 INS43 INS43 INS43 UPD42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42