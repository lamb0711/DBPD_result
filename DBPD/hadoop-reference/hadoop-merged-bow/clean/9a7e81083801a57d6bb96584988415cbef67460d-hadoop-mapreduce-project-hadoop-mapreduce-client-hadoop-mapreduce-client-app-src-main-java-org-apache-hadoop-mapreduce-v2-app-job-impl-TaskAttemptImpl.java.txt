YARN-6927. Add support for individual resource types requests in MapReduce
(Contributed by Gergo Repas via Daniel Templeton)

+import static org.apache.commons.lang.StringUtils.isEmpty;
+
+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.util.UnitsConversionUtil;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
-    //TODO:create the resource reqt for this Task attempt
-    this.resourceCapability.setMemorySize(
-        getMemoryRequired(conf, taskId.getTaskType()));
-    this.resourceCapability.setVirtualCores(
-        getCpuRequired(conf, taskId.getTaskType()));
+    populateResourceCapability(taskId.getTaskType());
+  private void populateResourceCapability(TaskType taskType) {
+    String resourceTypePrefix =
+        getResourceTypePrefix(taskType);
+    boolean memorySet = false;
+    boolean cpuVcoresSet = false;
+    if (resourceTypePrefix != null) {
+      List<ResourceInformation> resourceRequests =
+          ResourceUtils.getRequestedResourcesFromConfig(conf,
+              resourceTypePrefix);
+      for (ResourceInformation resourceRequest : resourceRequests) {
+        String resourceName = resourceRequest.getName();
+        if (MRJobConfig.RESOURCE_TYPE_NAME_MEMORY.equals(resourceName) ||
+            MRJobConfig.RESOURCE_TYPE_ALTERNATIVE_NAME_MEMORY.equals(
+                resourceName)) {
+          if (memorySet) {
+            throw new IllegalArgumentException(
+                "Only one of the following keys " +
+                    "can be specified for a single job: " +
+                    MRJobConfig.RESOURCE_TYPE_ALTERNATIVE_NAME_MEMORY + ", " +
+                    MRJobConfig.RESOURCE_TYPE_NAME_MEMORY);
+          }
+          String units = isEmpty(resourceRequest.getUnits()) ?
+              ResourceUtils.getDefaultUnit(ResourceInformation.MEMORY_URI) :
+                resourceRequest.getUnits();
+          this.resourceCapability.setMemorySize(
+              UnitsConversionUtil.convert(units, "Mi",
+                  resourceRequest.getValue()));
+          memorySet = true;
+          String memoryKey = getMemoryKey(taskType);
+          if (memoryKey != null && conf.get(memoryKey) != null) {
+            LOG.warn("Configuration " + resourceTypePrefix + resourceName +
+                "=" + resourceRequest.getValue() + resourceRequest.getUnits() +
+                " is overriding the " + memoryKey + "=" + conf.get(memoryKey) +
+                " configuration");
+          }
+        } else if (MRJobConfig.RESOURCE_TYPE_NAME_VCORE.equals(
+            resourceName)) {
+          this.resourceCapability.setVirtualCores(
+              (int) UnitsConversionUtil.convert(resourceRequest.getUnits(), "",
+                  resourceRequest.getValue()));
+          cpuVcoresSet = true;
+          String cpuKey = getCpuVcoresKey(taskType);
+          if (cpuKey != null && conf.get(cpuKey) != null) {
+            LOG.warn("Configuration " + resourceTypePrefix +
+                MRJobConfig.RESOURCE_TYPE_NAME_VCORE + "=" +
+                resourceRequest.getValue() + resourceRequest.getUnits() +
+                " is overriding the " + cpuKey + "=" +
+                conf.get(cpuKey) + " configuration");
+          }
+        } else {
+          ResourceInformation resourceInformation =
+              this.resourceCapability.getResourceInformation(resourceName);
+          resourceInformation.setUnits(resourceRequest.getUnits());
+          resourceInformation.setValue(resourceRequest.getValue());
+          this.resourceCapability.setResourceInformation(resourceName,
+              resourceInformation);
+        }
+      }
+    }
+    if (!memorySet) {
+      this.resourceCapability.setMemorySize(getMemoryRequired(conf, taskType));
+    }
+    if (!cpuVcoresSet) {
+      this.resourceCapability.setVirtualCores(getCpuRequired(conf, taskType));
+    }
+  }
+
+  private String getCpuVcoresKey(TaskType taskType) {
+    switch (taskType) {
+    case MAP:
+      return MRJobConfig.MAP_CPU_VCORES;
+    case REDUCE:
+      return MRJobConfig.REDUCE_CPU_VCORES;
+    default:
+      return null;
+    }
+  }
+
+  private String getMemoryKey(TaskType taskType) {
+    switch (taskType) {
+    case MAP:
+      return MRJobConfig.MAP_MEMORY_MB;
+    case REDUCE:
+      return MRJobConfig.REDUCE_MEMORY_MB;
+    default:
+      return null;
+    }
+  }
+
+  private Integer getCpuVcoreDefault(TaskType taskType) {
+    switch (taskType) {
+    case MAP:
+      return MRJobConfig.DEFAULT_MAP_CPU_VCORES;
+    case REDUCE:
+      return MRJobConfig.DEFAULT_REDUCE_CPU_VCORES;
+    default:
+      return null;
+    }
+  }
+
-    if (taskType == TaskType.MAP)  {
-      vcores =
-          conf.getInt(MRJobConfig.MAP_CPU_VCORES,
-              MRJobConfig.DEFAULT_MAP_CPU_VCORES);
-    } else if (taskType == TaskType.REDUCE) {
-      vcores =
-          conf.getInt(MRJobConfig.REDUCE_CPU_VCORES,
-              MRJobConfig.DEFAULT_REDUCE_CPU_VCORES);
+    String cpuVcoreKey = getCpuVcoresKey(taskType);
+    if (cpuVcoreKey != null) {
+      Integer defaultCpuVcores = getCpuVcoreDefault(taskType);
+      if (null == defaultCpuVcores) {
+        defaultCpuVcores = vcores;
+      }
+      vcores = conf.getInt(cpuVcoreKey, defaultCpuVcores);
-    
+  private String getResourceTypePrefix(TaskType taskType) {
+    switch (taskType) {
+    case MAP:
+      return MRJobConfig.MAP_RESOURCE_TYPE_PREFIX;
+    case REDUCE:
+      return MRJobConfig.REDUCE_RESOURCE_TYPE_PREFIX;
+    default:
+      LOG.info("TaskType " + taskType +
+          " does not support custom resource types - this support can be " +
+          "added in " + getClass().getSimpleName());
+      return null;
+    }
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 MOV83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 MOV44 MOV44 INS8 INS83 INS43 INS42 INS44 INS8 INS43 INS42 INS60 INS60 INS60 INS25 INS25 INS25 INS42 INS43 INS42 INS50 INS42 INS43 INS42 INS50 INS42 INS43 INS42 INS50 MOV60 INS60 INS25 MOV41 INS42 INS43 INS42 INS50 MOV32 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS38 INS8 INS38 INS8 INS42 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS42 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS42 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS43 INS59 UPD27 MOV27 MOV8 INS42 INS42 INS49 INS41 INS49 INS41 INS49 INS21 INS41 UPD42 INS42 INS42 INS32 INS42 INS9 INS42 INS9 INS42 INS33 INS60 INS70 INS42 INS21 INS42 INS21 INS42 INS40 INS42 INS40 INS33 INS42 INS40 INS42 INS40 INS33 INS42 INS40 INS42 INS40 INS33 INS42 INS42 INS32 UPD42 INS33 INS60 INS25 INS42 INS40 INS42 INS40 INS32 INS33 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS32 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS27 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS22 INS42 INS32 INS22 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS21 INS45 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS25 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS25 INS60 INS21 INS21 INS60 INS25 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS8 INS43 INS59 INS32 INS7 INS43 INS59 INS27 INS8 INS40 INS42 INS42 INS21 INS21 INS60 INS25 INS60 INS21 INS21 INS21 INS53 INS42 INS42 INS16 MOV22 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS27 INS27 INS21 INS32 INS7 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS32 INS14 INS32 INS32 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS33 INS32 INS33 INS32 MOV22 INS42 INS11 INS42 INS9 INS42 INS42 INS32 INS27 INS27 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS43 INS27 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS39 INS32 INS42 INS42 INS42 INS33 INS32 INS33 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS27 INS40 INS45 INS40 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS52 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 UPD40 MOV40 INS45 INS32 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL40 DEL40 DEL40 DEL39 DEL42 DEL42 DEL27 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL31