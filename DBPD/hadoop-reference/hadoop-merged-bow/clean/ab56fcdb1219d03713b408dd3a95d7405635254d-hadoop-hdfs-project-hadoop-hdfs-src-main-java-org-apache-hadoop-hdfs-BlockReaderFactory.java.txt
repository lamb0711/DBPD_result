Merge remote-tracking branch 'apache/trunk' into HDFS-7285

+import java.lang.reflect.Constructor;
+import java.util.List;
+import com.google.common.io.ByteArrayDataOutput;
+import com.google.common.io.ByteStreams;
-import org.apache.hadoop.hdfs.protocolPB.PBHelper;
+import org.apache.hadoop.hdfs.protocolPB.PBHelperClient;
-  private final FailureInjector failureInjector;
+  private static FailureInjector failureInjector = new FailureInjector();
-    this.failureInjector = conf.getShortCircuitConf().brfFailureInjector;
+  @VisibleForTesting
+  public static void setFailureInjectorForTesting(FailureInjector injector) {
+    failureInjector = injector;
+  }
+
-    BlockReader reader = null;
-
+    BlockReader reader = tryToCreateExternalBlockReader();
+    if (reader != null) {
+      return reader;
+    }
+  private BlockReader tryToCreateExternalBlockReader() {
+    List<Class<? extends ReplicaAccessorBuilder>> clses =
+        conf.getReplicaAccessorBuilderClasses();
+    for (Class<? extends ReplicaAccessorBuilder> cls : clses) {
+      try {
+        ByteArrayDataOutput bado = ByteStreams.newDataOutput();
+        token.write(bado);
+        byte tokenBytes[] = bado.toByteArray();
+
+        Constructor<? extends ReplicaAccessorBuilder> ctor =
+            cls.getConstructor();
+        ReplicaAccessorBuilder builder = ctor.newInstance();
+        ReplicaAccessor accessor = builder.
+            setAllowShortCircuitReads(allowShortCircuitLocalReads).
+            setBlock(block.getBlockId(), block.getBlockPoolId()).
+            setBlockAccessToken(tokenBytes).
+            setClientName(clientName).
+            setConfiguration(configuration).
+            setFileName(fileName).
+            setVerifyChecksum(verifyChecksum).
+            setVisibleLength(length).
+            build();
+        if (accessor == null) {
+          if (LOG.isTraceEnabled()) {
+            LOG.trace(this + ": No ReplicaAccessor created by " +
+                cls.getName());
+          }
+        } else {
+          return new ExternalBlockReader(accessor, length, startOffset);
+        }
+      } catch (Throwable t) {
+        LOG.warn("Failed to construct new object of type " +
+            cls.getName(), t);
+      }
+    }
+    return null;
+  }
+
+
-    if (!DFSClient.isLocalAddress(inetSocketAddress)) {
+    if (!DFSUtilClient.isLocalAddress(inetSocketAddress)) {
-    IOException ioe = null;
+    IOException ioe;
-        PBHelper.vintPrefixed(in));
+        PBHelperClient.vintPrefixed(in));

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS31 INS31 UPD83 INS78 INS83 INS83 INS39 INS42 INS44 INS8 MOV60 INS83 INS43 INS42 INS8 INS14 INS42 INS43 INS42 INS21 INS25 INS42 INS60 INS70 INS41 INS43 INS42 INS7 INS27 INS8 INS74 INS59 INS44 INS42 INS8 INS33 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS43 INS74 INS42 INS32 INS74 INS42 INS54 INS42 INS42 INS42 INS43 INS76 INS42 INS42 INS43 INS76 INS8 INS12 UPD42 INS42 INS43 INS42 INS43 INS60 INS21 INS60 INS60 INS60 INS60 INS25 INS44 INS8 UPD42 INS42 INS42 INS43 INS59 INS32 INS39 INS59 INS74 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS85 INS32 INS43 INS76 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS41 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS14 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS52 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL22 DEL7 DEL21 DEL33 DEL33