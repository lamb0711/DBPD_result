YARN-3413. Changed Nodelabel attributes (like exclusivity) to be settable only via addToClusterNodeLabels but not changeable at runtime. (Wangda Tan via vinodkv)

+import org.apache.hadoop.yarn.api.records.NodeLabel;
+import com.google.common.collect.ImmutableSet;
+  private static final String ADD_LABEL_FORMAT_ERR_MSG =
+      "Input format for adding node-labels is not correct, it should be "
+          + "labelName1[(exclusive=true/false)],LabelName2[] ..";
-              new UsageInfo("[label1,label2,label3] (label splitted by \",\")",
+              new UsageInfo("[label1(exclusive=true),"
+                  + "label2(exclusive=false),label3]",
-  private Set<String> buildNodeLabelsSetFromStr(String args) {
+  private List<NodeLabel> buildNodeLabelsFromStr(String args) {
+    List<NodeLabel> nodeLabels = new ArrayList<>();
+    for (String p : args.split(",")) {
+      if (!p.trim().isEmpty()) {
+        String labelName = p;
+
+        // Try to parse exclusive
+        boolean exclusive = NodeLabel.DEFAULT_NODE_LABEL_EXCLUSIVITY;
+        int leftParenthesisIdx = p.indexOf("(");
+        int rightParenthesisIdx = p.indexOf(")");
+
+        if ((leftParenthesisIdx == -1 && rightParenthesisIdx != -1)
+            || (leftParenthesisIdx != -1 && rightParenthesisIdx == -1)) {
+          // Parenthese not match
+          throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);
+        }
+
+        if (leftParenthesisIdx > 0 && rightParenthesisIdx > 0) {
+          if (leftParenthesisIdx > rightParenthesisIdx) {
+            // Parentese not match
+            throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);
+          }
+
+          String property = p.substring(p.indexOf("(") + 1, p.indexOf(")"));
+          if (property.contains("=")) {
+            String key = property.substring(0, property.indexOf("=")).trim();
+            String value =
+                property
+                    .substring(property.indexOf("=") + 1, property.length())
+                    .trim();
+
+            // Now we only support one property, which is exclusive, so check if
+            // key = exclusive and value = {true/false}
+            if (key.equals("exclusive")
+                && ImmutableSet.of("true", "false").contains(value)) {
+              exclusive = Boolean.parseBoolean(value);
+            } else {
+              throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);
+            }
+          } else if (!property.trim().isEmpty()) {
+            throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);
+          }
+        }
+
+        // Try to get labelName if there's "(..)"
+        if (labelName.contains("(")) {
+          labelName = labelName.substring(0, labelName.indexOf("(")).trim();
+        }
+
+        nodeLabels.add(NodeLabel.newInstance(labelName, exclusive));
+      }
+    }
+
+    if (nodeLabels.isEmpty()) {
+      throw new IllegalArgumentException(NO_LABEL_ERR_MSG);
+    }
+    return nodeLabels;
+  }
+
+  private Set<String> buildNodeLabelNamesFromStr(String args) {
-    Set<String> labels = buildNodeLabelsSetFromStr(args);
+    List<NodeLabel> labels = buildNodeLabelsFromStr(args);
-    Set<String> labels = buildNodeLabelsSetFromStr(args);
+    Set<String> labels = buildNodeLabelNamesFromStr(args);

INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS74 INS42 INS44 INS8 UPD42 INS42 INS42 INS27 INS43 INS43 INS43 INS42 INS60 INS70 INS25 INS41 INS45 INS45 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS8 INS42 UPD74 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS45 INS25 INS42 INS42 INS53 UPD43 UPD43 INS42 INS42 INS74 INS42 INS38 INS8 INS14 UPD42 UPD42 UPD42 UPD42 INS43 INS32 INS60 INS60 INS60 INS60 INS25 INS25 INS25 INS21 INS43 INS42 INS42 INS32 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS32 INS8 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS36 INS36 INS53 INS27 INS27 INS25 INS60 INS25 INS42 INS42 INS45 INS21 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS27 INS27 INS14 INS42 INS34 INS42 INS34 INS27 INS8 INS43 INS59 INS32 INS8 INS25 INS7 INS42 INS42 INS42 INS42 INS27 INS27 INS27 INS27 INS43 INS42 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS45 INS60 INS60 INS25 INS38 INS8 INS42 INS32 INS42 INS38 INS42 INS38 INS42 INS38 INS42 INS38 INS42 INS14 INS42 INS42 INS27 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS53 INS32 INS42 INS34 INS34 INS34 INS34 INS43 INS42 INS32 INS34 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS21 INS53 INS32 INS42 INS14 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS7 INS14 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS45 INS45 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS45 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 DEL45