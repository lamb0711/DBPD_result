YARN-9439. Support asynchronized scheduling mode and multi-node lookup mechanism for app activities. Contributed by Tao Yang.

+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMApp;
+import java.util.concurrent.ConcurrentLinkedQueue;
-  private ConcurrentMap<ApplicationId, AppAllocation> appsAllocation;
-  private ConcurrentMap<ApplicationId, List<AppAllocation>>
-      completedAppAllocations;
+  private ThreadLocal<Map<ApplicationId, AppAllocation>>
+      appsAllocation;
+  @VisibleForTesting
+  ConcurrentMap<ApplicationId, Queue<AppAllocation>> completedAppAllocations;
-    appsAllocation = new ConcurrentHashMap<>();
+    appsAllocation = ThreadLocal.withInitial(() -> new HashMap());
-    if (rmContext.getRMApps().get(applicationId).getFinalApplicationStatus()
+    RMApp app = rmContext.getRMApps().get(applicationId);
+    if (app != null && app.getFinalApplicationStatus()
-      List<AppAllocation> allocations = completedAppAllocations.get(
-          applicationId);
-
+      Queue<AppAllocation> curAllocations =
+          completedAppAllocations.get(applicationId);
+      List<AppAllocation> allocations = null;
+      if (curAllocations != null) {
+        allocations = new ArrayList(curAllocations);
+      }
-          Iterator<Map.Entry<ApplicationId, List<AppAllocation>>> iteApp =
+          Iterator<Map.Entry<ApplicationId, Queue<AppAllocation>>> iteApp =
-            Map.Entry<ApplicationId, List<AppAllocation>> appAllocation =
+            Map.Entry<ApplicationId, Queue<AppAllocation>> appAllocation =
-            if (rmContext.getRMApps().get(appAllocation.getKey())
-                .getFinalApplicationStatus()
+            RMApp rmApp = rmContext.getRMApps().get(appAllocation.getKey());
+            if (rmApp == null || rmApp.getFinalApplicationStatus()
-    if (recordingAppActivitiesUntilSpecifiedTime.containsKey(applicationId)
-        && recordingAppActivitiesUntilSpecifiedTime.get(applicationId)
-        > currTS) {
-      appsAllocation.put(applicationId,
-          new AppAllocation(application.getPriority(), nodeID,
-              application.getQueueName()));
-    }
-
-    if (recordingAppActivitiesUntilSpecifiedTime.containsKey(applicationId)
-        && recordingAppActivitiesUntilSpecifiedTime.get(applicationId)
-        <= currTS) {
-      turnOffActivityMonitoringForApp(applicationId);
+    Long turnOffTimestamp =
+        recordingAppActivitiesUntilSpecifiedTime.get(applicationId);
+    if (turnOffTimestamp != null) {
+      if (turnOffTimestamp > currTS) {
+        appsAllocation.get().put(applicationId,
+            new AppAllocation(application.getPriority(), nodeID,
+                application.getQueueName()));
+      } else {
+        turnOffActivityMonitoringForApp(applicationId);
+      }
-      AppAllocation appAllocation = appsAllocation.get(applicationId);
+      AppAllocation appAllocation = appsAllocation.get().get(applicationId);
-      AppAllocation appAllocation = appsAllocation.remove(applicationId);
+      AppAllocation appAllocation = appsAllocation.get().remove(applicationId);
-      List<AppAllocation> appAllocations;
-      if (completedAppAllocations.containsKey(applicationId)) {
-        appAllocations = completedAppAllocations.get(applicationId);
-      } else {
-        appAllocations = new ArrayList<>();
-        completedAppAllocations.put(applicationId, appAllocations);
+      Queue<AppAllocation> appAllocations =
+          completedAppAllocations.get(applicationId);
+      if (appAllocations == null) {
+        appAllocations = new ConcurrentLinkedQueue<>();
+        Queue<AppAllocation> curAppAllocations =
+            completedAppAllocations.putIfAbsent(applicationId, appAllocations);
+        if (curAppAllocations != null) {
+          appAllocations = curAppAllocations;
+        }
-        appAllocations.remove(0);
+        appAllocations.poll();
-
-      if (recordingAppActivitiesUntilSpecifiedTime.get(applicationId)
-          <= currTS) {
+      Long stopTime =
+          recordingAppActivitiesUntilSpecifiedTime.get(applicationId);
+      if (stopTime != null && stopTime <= currTS) {
+    if (recordingAppActivitiesUntilSpecifiedTime.isEmpty()
+        || appsAllocation.get().isEmpty()) {
+      return false;
+    }
-        && appsAllocation.containsKey(applicationId);
+        && appsAllocation.get().containsKey(applicationId);

INS26 INS26 INS40 INS40 INS74 INS78 UPD74 INS43 INS74 INS42 MOV43 UPD74 INS60 INS60 INS25 INS25 INS42 UPD43 MOV43 MOV43 MOV43 UPD43 INS43 INS59 INS27 INS43 INS59 INS27 MOV8 INS27 INS8 UPD42 UPD42 INS32 INS42 INS42 MOV32 INS27 INS27 INS60 INS25 INS42 INS42 MOV32 UPD42 MOV42 INS33 MOV25 INS60 INS32 INS32 INS41 INS42 INS42 INS86 INS42 INS33 MOV32 MOV40 INS74 MOV74 INS59 INS27 INS8 INS27 INS8 MOV43 MOV43 UPD74 INS27 INS43 INS59 INS27 INS42 INS42 INS32 INS42 INS9 INS32 INS14 INS42 INS43 INS43 UPD42 INS42 INS33 INS42 INS33 INS21 INS42 INS42 MOV21 UPD43 MOV32 INS42 INS33 INS60 INS25 INS42 INS42 MOV32 INS27 INS27 INS42 INS42 MOV42 INS42 INS43 INS42 INS42 INS7 INS32 INS42 INS32 UPD42 INS74 INS59 INS27 INS8 INS42 INS33 INS42 MOV42 UPD42 MOV42 INS42 INS14 INS32 MOV42 MOV42 MOV42 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS21 UPD42 INS43 INS42 MOV42 INS42 UPD74 INS42 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 INS7 INS42 UPD43 INS42 INS42 UPD42 UPD74 UPD74 INS60 MOV43 MOV43 UPD74 UPD74 INS43 INS59 INS27 UPD43 MOV43 MOV43 UPD74 INS42 INS42 MOV32 INS27 INS27 UPD42 UPD43 INS42 INS33 MOV32 MOV40 UPD42 INS42 DEL74 DEL83 DEL43 DEL74 DEL14 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL27 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL7 DEL21 DEL8 DEL32 DEL21 DEL34 DEL27