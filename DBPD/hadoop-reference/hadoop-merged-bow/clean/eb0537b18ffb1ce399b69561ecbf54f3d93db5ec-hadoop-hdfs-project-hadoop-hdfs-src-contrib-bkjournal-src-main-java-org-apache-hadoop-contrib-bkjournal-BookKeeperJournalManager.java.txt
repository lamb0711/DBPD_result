HDFS-3408. BKJM : Namenode format fails, if there is no BK root. Contributed by Rakesh R.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349456 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.bookkeeper.util.ZkUtils;
+import org.apache.zookeeper.AsyncCallback.StringCallback;
+  public static final String BKJM_ZK_LEDGERS_AVAILABLE_PATH
+    = "dfs.namenode.bookkeeperjournal.zk.availablebookies";
+
+  public static final String BKJM_ZK_LEDGERS_AVAILABLE_PATH_DEFAULT
+    = "/ledgers/available";
+
-
+      prepareBookKeeperEnv();
+   * Pre-creating bookkeeper metadata path in zookeeper.
+   */
+  private void prepareBookKeeperEnv() throws IOException {
+    // create bookie available path in zookeeper if it doesn't exists
+    final String zkAvailablePath = conf.get(BKJM_ZK_LEDGERS_AVAILABLE_PATH,
+        BKJM_ZK_LEDGERS_AVAILABLE_PATH_DEFAULT);
+    final CountDownLatch zkPathLatch = new CountDownLatch(1);
+
+    StringCallback callback = new StringCallback() {
+      @Override
+      public void processResult(int rc, String path, Object ctx, String name) {
+        if (KeeperException.Code.OK.intValue() == rc
+            || KeeperException.Code.NODEEXISTS.intValue() == rc) {
+          LOG.info("Successfully created bookie available path : "
+              + zkAvailablePath);
+          zkPathLatch.countDown();
+        } else {
+          KeeperException.Code code = KeeperException.Code.get(rc);
+          LOG
+              .error("Error : "
+                  + KeeperException.create(code, path).getMessage()
+                  + ", failed to create bookie available path : "
+                  + zkAvailablePath);
+        }
+      }
+    };
+    ZkUtils.createFullPathOptimistic(zkc, zkAvailablePath, new byte[0],
+        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, callback, null);
+
+    try {
+      if (!zkPathLatch.await(zkc.getSessionTimeout(), TimeUnit.MILLISECONDS)) {
+        throw new IOException("Couldn't create bookie available path :"
+            + zkAvailablePath + ", timed out " + zkc.getSessionTimeout()
+            + " millis");
+      }
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      throw new IOException(
+          "Interrupted when creating the bookie available path : "
+              + zkAvailablePath, e);
+    }
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS65 INS42 INS60 INS60 INS60 INS21 INS54 INS66 INS83 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS32 INS8 INS12 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS3 INS40 INS40 INS42 INS33 INS25 INS44 INS8 INS32 INS42 INS42 INS42 INS42 INS43 INS34 INS43 INS1 INS5 INS34 INS38 INS8 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS31 INS39 INS85 INS32 INS53 INS42 INS32 INS14 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS42 INS42 INS32 INS40 INS14 INS32 INS42 INS43 INS27 INS42 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS45 INS42 INS45 INS32 INS45 INS27 INS27 INS21 INS21 INS60 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS43 INS59 INS32 INS40 INS42 INS40 INS42 INS42 INS42 INS27 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS40 INS42 INS42 INS45 INS32 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42