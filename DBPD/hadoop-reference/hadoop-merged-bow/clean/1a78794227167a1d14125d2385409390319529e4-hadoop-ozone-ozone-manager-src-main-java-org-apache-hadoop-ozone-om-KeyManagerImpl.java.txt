HDDS-1624 : Refactor operations inside the bucket lock in OM key write. (#882)



+import org.apache.hadoop.utils.UniqueId;
-    long currentTime = Time.monotonicNowNanos();
+    long currentTime = UniqueId.next();
-    String openKey;
+    // NOTE size of a key is not a hard limit on anything, it is a value that
+    // client should expect, in terms of current size of key. If client sets
+    // a value, then this value is used, otherwise, we allocate a single
+    // block which is the current size, if read by the client.
+    final long size = args.getDataSize() >= 0 ?
+        args.getDataSize() : scmBlockSize;
+    final List<OmKeyLocationInfo> locations = new ArrayList<>();
+
+    ReplicationFactor factor = args.getFactor();
+    if (factor == null) {
+      factor = useRatis ? ReplicationFactor.THREE : ReplicationFactor.ONE;
+    }
+
+    ReplicationType type = args.getType();
+    if (type == null) {
+      type = useRatis ? ReplicationType.RATIS : ReplicationType.STAND_ALONE;
+    }
+
+    String dbKeyName = metadataManager.getOzoneKey(
+        args.getVolumeName(), args.getBucketName(), args.getKeyName());
-      // NOTE size of a key is not a hard limit on anything, it is a value that
-      // client should expect, in terms of current size of key. If client sets
-      // a value, then this value is used, otherwise, we allocate a single
-      // block which is the current size, if read by the client.
-      long size = args.getDataSize() >= 0 ? args.getDataSize() : scmBlockSize;
-      List<OmKeyLocationInfo> locations = new ArrayList<>();
-      if (args.getIsMultipartKey()) {
-        keyInfo = prepareMultipartKeyInfo(args, size, locations, encInfo);
-        //TODO args.getMetadata
-      } else {
-        keyInfo = prepareKeyInfo(args, size, locations, encInfo);
-      }
-
-      openVersion = keyInfo.getLatestVersionLocations().getVersion();
-      openKey = metadataManager.getOpenKey(
-          volumeName, bucketName, keyName, currentTime);
-      if (metadataManager.getOpenKeyTable().get(openKey) != null) {
-        // This should not happen. If this condition is satisfied, it means
-        // that we have generated a same openKeyId (i.e. currentTime) for two
-        // different client who are trying to write the same key at the same
-        // time. The chance of this happening is very, very minimal.
-
-        // Do we really need this check? Can we avoid this to gain some
-        // minor performance improvement?
-        LOG.warn("Cannot allocate key. The generated open key id is already" +
-            "used for the same key which is currently being written.");
-        throw new OMException("Cannot allocate key. Not able to get a valid" +
-            "open key id.", ResultCodes.KEY_ALLOCATION_ERROR);
-      }
-      LOG.debug("Key {} allocated in volume {} bucket {}",
-          keyName, volumeName, bucketName);
+      keyInfo = prepareKeyInfo(args, dbKeyName, size, locations, encInfo);
-
+    if (keyInfo == null) {
+      // the key does not exist, create a new object, the new blocks are the
+      // version 0
+      keyInfo = createKeyInfo(args, locations, factor, type, size, encInfo);
+    }
+    openVersion = keyInfo.getLatestVersionLocations().getVersion();
+    LOG.debug("Key {} allocated in volume {} bucket {}",
+        keyName, volumeName, bucketName);
-  private OmKeyInfo prepareKeyInfo(OmKeyArgs args, long size,
+  private OmKeyInfo prepareKeyInfo(
+      OmKeyArgs keyArgs, String dbKeyName, long size,
-    ReplicationFactor factor = args.getFactor();
-    ReplicationType type = args.getType();
-    OmKeyInfo keyInfo;
-    // If user does not specify a replication strategy or
-    // replication factor, OM will use defaults.
-    if (factor == null) {
-      factor = useRatis ? ReplicationFactor.THREE : ReplicationFactor.ONE;
-    }
-    if (type == null) {
-      type = useRatis ? ReplicationType.RATIS : ReplicationType.STAND_ALONE;
-    }
-    String objectKey = metadataManager.getOzoneKey(
-        args.getVolumeName(), args.getBucketName(), args.getKeyName());
-    keyInfo = metadataManager.getKeyTable().get(objectKey);
-    if (keyInfo != null) {
+    OmKeyInfo keyInfo = null;
+    if (keyArgs.getIsMultipartKey()) {
+      keyInfo = prepareMultipartKeyInfo(keyArgs, size, locations, encInfo);
+      //TODO args.getMetadata
+    } else if (metadataManager.getKeyTable().isExist(dbKeyName)) {
+      keyInfo = metadataManager.getKeyTable().get(dbKeyName);
-    } else {
-      // the key does not exist, create a new object, the new blocks are the
-      // version 0
-      keyInfo = createKeyInfo(args, locations, factor, type, size, encInfo);
-    metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
+    List<OmKeyLocationInfo> locationInfoList = args.getLocationInfoList();
+    String objectKey = metadataManager
+        .getOzoneKey(volumeName, bucketName, keyName);
+    String openKey = metadataManager
+        .getOpenKey(volumeName, bucketName, keyName, clientID);
+    Preconditions.checkNotNull(locationInfoList);
+      metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
-      String openKey = metadataManager.getOpenKey(volumeName, bucketName,
-          keyName, clientID);
-      String objectKey = metadataManager.getOzoneKey(
-          volumeName, bucketName, keyName);
-      List<OmKeyLocationInfo> locationInfoList = args.getLocationInfoList();
-      Preconditions.checkNotNull(locationInfoList);

INS26 INS40 MOV60 INS44 INS8 MOV60 MOV60 MOV60 MOV25 MOV60 MOV25 INS25 MOV21 MOV21 UPD42 MOV43 INS42 MOV60 INS25 MOV41 MOV60 MOV60 MOV60 MOV21 INS83 INS83 MOV43 INS8 INS27 MOV8 INS32 INS8 MOV25 INS42 MOV32 MOV21 MOV60 MOV21 MOV21 INS42 INS33 INS33 INS42 INS42 INS21 INS32 MOV21 UPD42 UPD42 INS42 INS7 INS32 UPD42 MOV42 UPD42 MOV42 MOV21 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL42 DEL43 DEL45 DEL45 DEL27 DEL40 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL59 DEL60 DEL8