HDFS-6329. WebHdfs does not work if HA is enabled on NN but logical URI is not configured. Contributed by Kihwal Lee.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593470 13f79535-47bb-0310-9956-ffa450edef68

-   * The service name of the delegation token issued by the namenode. It is
-   * the name service id in HA mode, or the rpc address in non-HA mode.
+   * The namenode address that clients will use to access this namenode
+   * or the name service. For HA configurations using logical URI, it
+   * will be the logical address.
-  private String tokenServiceName;
+  private String clientNamenodeAddress;
-  public String getTokenServiceName() { return tokenServiceName; }
+  public String getTokenServiceName() {
+    return getClientNamenodeAddress();
+  }
+
+  /**
+   * Set the namenode address that will be used by clients to access this
+   * namenode or name service. This needs to be called before the config
+   * is overriden.
+   */
+  public void setClientNamenodeAddress(Configuration conf) {
+    String nnAddr = conf.get(FS_DEFAULT_NAME_KEY);
+    if (nnAddr == null) {
+      // default fs is not set.
+      clientNamenodeAddress = null;
+      return;
+    }
+
+    LOG.info(FS_DEFAULT_NAME_KEY + " is " + nnAddr);
+    URI nnUri = URI.create(nnAddr);
+
+    String nnHost = nnUri.getHost();
+    if (nnHost == null) {
+      clientNamenodeAddress = null;
+      return;
+    }
+
+    if (DFSUtil.getNameServiceIds(conf).contains(nnHost)) {
+      // host name is logical
+      clientNamenodeAddress = nnHost;
+    } else if (nnUri.getPort() > 0) {
+      // physical address with a valid port
+      clientNamenodeAddress = nnUri.getAuthority();
+    } else {
+      // the port is missing or 0. Figure out real bind address later.
+      clientNamenodeAddress = null;
+      return;
+    }
+    LOG.info("Clients are to use " + clientNamenodeAddress + " to access"
+        + " this namenode/service.");
+  }
+
+  /**
+   * Get the namenode address to be used by clients.
+   * @return nn address
+   */
+  public String getClientNamenodeAddress() {
+    return clientNamenodeAddress;
+  }
-    final String nsId = getNameServiceId(conf);
-    tokenServiceName = HAUtil.isHAEnabled(conf, nsId) ? nsId : NetUtils
-            .getHostPortString(rpcServer.getRpcAddress());
+    if (clientNamenodeAddress == null) {
+      // This is expected for MiniDFSCluster. Set it now using 
+      // the RPC server's bind address.
+      clientNamenodeAddress = 
+          NetUtils.getHostPortString(rpcServer.getRpcAddress());
+      LOG.info("Clients are to use " + clientNamenodeAddress + " to access"
+          + " this namenode/service.");
+    }
+    setClientNamenodeAddress(conf);

INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 MOV43 INS42 INS8 UPD42 INS65 INS43 INS42 INS60 INS25 INS21 INS60 INS60 INS25 INS25 INS21 INS65 INS65 INS41 INS25 INS21 UPD66 UPD66 INS66 INS32 INS66 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS8 INS25 INS32 INS66 INS66 INS42 INS27 INS8 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS32 INS42 INS42 INS21 INS27 INS8 INS8 INS42 INS42 INS27 INS42 INS33 MOV21 INS21 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS32 INS34 INS21 INS21 INS41 INS45 INS42 INS45 INS45 INS32 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS42 INS7 INS7 UPD42 MOV32 UPD42 MOV42 INS42 INS27 INS42 INS32 INS42 INS33 INS45 INS42 INS45 INS45 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL16 DEL83 DEL42 DEL42 DEL32 DEL59 DEL60