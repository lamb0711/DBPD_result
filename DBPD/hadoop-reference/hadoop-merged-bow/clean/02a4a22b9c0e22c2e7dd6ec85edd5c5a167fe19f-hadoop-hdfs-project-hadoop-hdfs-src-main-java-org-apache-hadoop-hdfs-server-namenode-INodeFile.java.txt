HDFS-8327. Compute storage type quotas in INodeFile.computeQuotaDeltaForTruncate(). Contributed by Haohui Mai.

-  boolean removeLastBlock(Block oldblock) {
+  BlockInfoContiguousUnderConstruction removeLastBlock(Block oldblock) {
-      return false;
+      return null;
-      return false;
+      return null;
+    BlockInfoContiguousUnderConstruction uc =
+        (BlockInfoContiguousUnderConstruction)blocks[size_1];
-    return true;
+    return uc;
-  /** @return the storagespace required for a full block. */
-  final long getPreferredBlockStoragespace() {
-    return getPreferredBlockSize() * getBlockReplication();
-  }
-
+    counts.addNameSpace(nsDelta);
+
+    BlockStoragePolicy bsp = null;
+    if (blockStoragePolicyId != BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {
+      bsp = bsps.getPolicy(blockStoragePolicyId);
+    }
+
+    FileWithSnapshotFeature sf = getFileWithSnapshotFeature();
+    if (sf == null) {
+      counts.add(storagespaceConsumed(bsp));
+      return counts;
+    }
+
+    FileDiffList fileDiffList = sf.getDiffs();
+    int last = fileDiffList.getLastSnapshotId();
+
+    if (lastSnapshotId == Snapshot.CURRENT_STATE_ID
+        || last == Snapshot.CURRENT_STATE_ID) {
+      counts.add(storagespaceConsumed(bsp));
+      return counts;
+    }
+
-    FileWithSnapshotFeature sf = getFileWithSnapshotFeature();
-    if (sf != null) {
-      FileDiffList fileDiffList = sf.getDiffs();
-      int last = fileDiffList.getLastSnapshotId();
-
-      if (lastSnapshotId == Snapshot.CURRENT_STATE_ID
-          || last == Snapshot.CURRENT_STATE_ID) {
-        ssDeltaNoReplication = storagespaceConsumedNoReplication();
-        replication = getBlockReplication();
-      } else if (last < lastSnapshotId) {
-        ssDeltaNoReplication = computeFileSize(true, false);
-        replication = getFileReplication();
-      } else {
-        int sid = fileDiffList.getSnapshotById(lastSnapshotId);
-        ssDeltaNoReplication = storagespaceConsumedNoReplication(sid);
-        replication = getReplication(sid);
-      }
+    if (last < lastSnapshotId) {
+      ssDeltaNoReplication = computeFileSize(true, false);
+      replication = getFileReplication();
-      ssDeltaNoReplication = storagespaceConsumedNoReplication();
-      replication = getBlockReplication();
+      int sid = fileDiffList.getSnapshotById(lastSnapshotId);
+      ssDeltaNoReplication = computeFileSize(sid);
+      replication = getFileReplication(sid);
-    counts.addNameSpace(nsDelta);
-    counts.addStorageSpace(ssDeltaNoReplication * replication);
-    if (blockStoragePolicyId != BLOCK_STORAGE_POLICY_ID_UNSPECIFIED){
-      BlockStoragePolicy bsp = bsps.getPolicy(blockStoragePolicyId);
+    counts.addStorageSpace(ssDeltaNoReplication * replication);
+    if (bsp != null) {
-    counts.addContent(Content.DISKSPACE, storagespaceConsumed());
+    counts.addContent(Content.DISKSPACE, storagespaceConsumed(null)
+        .getStorageSpace());
-  public final long storagespaceConsumed() {
-    return storagespaceConsumedNoReplication() * getBlockReplication();
-  }
-
-  public final long storagespaceConsumedNoReplication() {
+  public final QuotaCounts storagespaceConsumed(BlockStoragePolicy bsp) {
+    QuotaCounts counts = new QuotaCounts.Builder().build();
+    final Iterable<BlockInfoContiguous> blocks;
-    if(sf == null) {
-      return computeFileSize(true, true);
+    if (sf == null) {
+      blocks = Arrays.asList(getBlocks());
+    } else {
+      // Collect all distinct blocks
+      Set<BlockInfoContiguous> allBlocks = new HashSet<>(Arrays.asList(getBlocks()));
+      List<FileDiff> diffs = sf.getDiffs().asList();
+      for(FileDiff diff : diffs) {
+        BlockInfoContiguous[] diffBlocks = diff.getBlocks();
+        if (diffBlocks != null) {
+          allBlocks.addAll(Arrays.asList(diffBlocks));
+        }
+      }
+      blocks = allBlocks;
-    // Collect all distinct blocks
-    long size = 0;
-    Set<Block> allBlocks = new HashSet<Block>(Arrays.asList(getBlocks()));
-    List<FileDiff> diffs = sf.getDiffs().asList();
-    for(FileDiff diff : diffs) {
-      BlockInfoContiguous[] diffBlocks = diff.getBlocks();
-      if (diffBlocks != null) {
-        allBlocks.addAll(Arrays.asList(diffBlocks));
+    final short replication = getBlockReplication();
+    for (BlockInfoContiguous b : blocks) {
+      long blockSize = b.isComplete() ? b.getNumBytes() :
+          getPreferredBlockSize();
+      counts.addStorageSpace(blockSize * replication);
+      if (bsp != null) {
+        List<StorageType> types = bsp.chooseStorageTypes(replication);
+        for (StorageType t : types) {
+          if (t.supportTypeQuota()) {
+            counts.addTypeSpace(t, blockSize);
+          }
+        }
-    for(Block block : allBlocks) {
-      size += block.getNumBytes();
-    }
-    // check if the last block is under construction
-    BlockInfoContiguous lastBlock = getLastBlock();
-    if(lastBlock != null &&
-        lastBlock instanceof BlockInfoContiguousUnderConstruction) {
-      size += getPreferredBlockSize() - lastBlock.getNumBytes();
-    }
-    return size;
-  }
-
-  public final long storagespaceConsumed(int lastSnapshotId) {
-    if (lastSnapshotId != CURRENT_STATE_ID) {
-      return computeFileSize(lastSnapshotId)
-        * getFileReplication(lastSnapshotId);
-    } else {
-      return storagespaceConsumed();
-    }
-  }
-
-  public final short getReplication(int lastSnapshotId) {
-    if (lastSnapshotId != CURRENT_STATE_ID) {
-      return getFileReplication(lastSnapshotId);
-    } else {
-      return getBlockReplication();
-    }
-  }
-
-  public final long storagespaceConsumedNoReplication(int lastSnapshotId) {
-    if (lastSnapshotId != CURRENT_STATE_ID) {
-      return computeFileSize(lastSnapshotId);
-    } else {
-      return storagespaceConsumedNoReplication();
-    }
+    return counts;
-   * @return the quota usage delta (not considering replication factor)
-   */
-  long computeQuotaDeltaForTruncate(final long newLength) {
+   **/
+  void computeQuotaDeltaForTruncate(
+      long newLength, BlockStoragePolicy bsps,
+      QuotaCounts delta) {
-      return 0;
+      return;
-    int n = 0;
-    for (; n < blocks.length && newLength > size; n++) {
-      size += blocks[n].getNumBytes();
-    }
-    final boolean onBoundary = size == newLength;
-
-    long truncateSize = 0;
-    for (int i = (onBoundary ? n : n - 1); i < blocks.length; i++) {
-      truncateSize += blocks[i].getNumBytes();
+    for (BlockInfoContiguous b : blocks) {
+      size += b.getNumBytes();
+    BlockInfoContiguous[] sblocks = null;
-      BlockInfoContiguous[] sblocks = diff != null ? diff.getBlocks() : null;
-      if (sblocks != null) {
-        for (int i = (onBoundary ? n : n-1); i < blocks.length
-            && i < sblocks.length && blocks[i].equals(sblocks[i]); i++) {
-          truncateSize -= blocks[i].getNumBytes();
+      sblocks = diff != null ? diff.getBlocks() : null;
+    }
+
+    for (int i = blocks.length - 1; i >= 0 && size > newLength;
+         size -= blocks[i].getNumBytes(), --i) {
+      BlockInfoContiguous bi = blocks[i];
+      long truncatedBytes;
+      if (size - newLength < bi.getNumBytes()) {
+        // Record a full block as the last block will be copied during
+        // recovery
+        truncatedBytes = bi.getNumBytes() - getPreferredBlockSize();
+      } else {
+        truncatedBytes = bi.getNumBytes();
+      }
+
+      // The block exist in snapshot, adding back the truncated bytes in the
+      // existing files
+      if (sblocks != null && i < sblocks.length && bi.equals(sblocks[i])) {
+        truncatedBytes -= bi.getNumBytes();
+      }
+
+      delta.addStorageSpace(-truncatedBytes * getBlockReplication());
+      if (bsps != null) {
+        List<StorageType> types = bsps.chooseStorageTypes(
+            getBlockReplication());
+        for (StorageType t : types) {
+          if (t.supportTypeQuota()) {
+            delta.addTypeSpace(t, -truncatedBytes);
+          }
-    return onBoundary ? -truncateSize : (getPreferredBlockSize() - truncateSize);

INS31 MOV43 MOV8 MOV29 INS43 INS42 INS44 INS8 MOV29 UPD39 MOV39 INS42 INS44 INS44 MOV44 INS8 INS60 MOV60 MOV21 INS60 INS25 MOV60 INS25 INS25 MOV60 MOV60 MOV25 MOV21 INS25 MOV41 INS42 INS43 INS42 INS60 INS60 MOV60 INS25 INS60 INS70 INS41 INS39 INS42 INS43 INS42 INS43 INS42 MOV60 MOV25 MOV60 INS70 INS60 MOV60 MOV25 INS24 INS43 INS59 INS42 MOV43 INS59 MOV27 INS8 INS27 INS8 MOV27 INS8 MOV32 INS27 INS8 INS42 INS43 INS59 INS83 INS74 INS59 MOV27 INS8 MOV8 INS83 INS39 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS44 INS42 INS8 MOV5 INS59 MOV27 INS58 INS27 UPD7 MOV7 INS38 INS8 INS42 INS42 INS11 INS42 INS33 MOV21 INS42 INS33 INS21 INS41 INS21 INS41 INS42 INS33 MOV60 MOV70 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS21 MOV21 INS42 MOV32 MOV43 INS42 INS60 INS21 INS25 INS43 INS42 INS21 INS42 INS33 MOV60 INS21 INS39 INS59 INS27 INS27 UPD42 INS42 INS60 MOV60 INS25 INS25 INS21 INS25 INS33 INS33 INS43 INS2 INS32 INS42 INS32 INS42 MOV32 INS42 INS14 INS42 INS42 INS42 INS7 UPD74 UPD7 INS39 INS59 INS32 INS27 INS8 INS42 INS7 INS7 INS42 INS27 UPD42 MOV42 INS34 INS42 INS42 INS43 INS59 UPD39 INS27 INS8 INS8 MOV27 INS8 INS32 INS27 INS8 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS33 INS43 INS42 INS32 UPD43 INS42 INS42 INS42 INS16 INS42 INS42 INS27 INS42 INS33 INS60 INS70 INS42 INS32 INS42 MOV16 INS40 INS34 INS42 INS42 MOV2 UPD42 UPD27 MOV27 INS32 INS21 MOV21 INS21 INS42 INS42 INS27 UPD42 MOV42 INS33 INS60 INS70 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS40 INS42 INS42 INS32 UPD42 UPD74 INS32 INS32 MOV32 INS42 INS42 INS74 INS59 INS44 INS42 INS8 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS7 UPD7 MOV27 INS42 INS7 INS38 MOV32 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 MOV27 UPD42 INS42 INS32 INS42 INS43 INS43 UPD42 MOV42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS8 INS42 INS42 INS21 INS42 INS42 INS42 UPD42 MOV42 INS21 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 UPD42 MOV42 DEL39 DEL9 DEL9 DEL9 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL42 DEL7 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL59 DEL60 DEL8 DEL25 DEL8 DEL83 DEL83 DEL39 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL42 DEL9 DEL9 DEL32 DEL41 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL62 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL39 DEL42 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL32 DEL27 DEL41 DEL8 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL39 DEL42 DEL34 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL32 DEL41 DEL34 DEL40 DEL42 DEL42 DEL42 DEL2 DEL42 DEL40 DEL27 DEL39 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL27 DEL27 DEL42 DEL37 DEL8 DEL24 DEL83 DEL39 DEL42 DEL42 DEL42 DEL27 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL16 DEL36 DEL59 DEL58 DEL40 DEL27 DEL42 DEL37 DEL21 DEL8 DEL24 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL34 DEL27 DEL16 DEL36 DEL59 DEL58 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL25 DEL42 DEL38 DEL36 DEL16 DEL41 DEL8 DEL31