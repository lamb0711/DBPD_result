HADOOP-12040. Adjust inputs order for the decode API in raw erasure coder. (Kai Zheng via yliu)

+  @Override
+  public void decode(ByteBuffer[] inputs, int[] erasedIndexes,
+                     ByteBuffer[] outputs) {
+    // Make copies avoiding affecting original ones;
+    ByteBuffer[] newInputs = new ByteBuffer[inputs.length];
+    int[] newErasedIndexes = new int[erasedIndexes.length];
+    ByteBuffer[] newOutputs = new ByteBuffer[outputs.length];
+
+    // Adjust the order to match with underlying requirements.
+    adjustOrder(inputs, newInputs,
+        erasedIndexes, newErasedIndexes, outputs, newOutputs);
+
+    super.decode(newInputs, newErasedIndexes, newOutputs);
+  }
+
+  @Override
+  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {
+    // Make copies avoiding affecting original ones;
+    byte[][] newInputs = new byte[inputs.length][];
+    int[] newErasedIndexes = new int[erasedIndexes.length];
+    byte[][] newOutputs = new byte[outputs.length][];
+
+    // Adjust the order to match with underlying requirements.
+    adjustOrder(inputs, newInputs,
+        erasedIndexes, newErasedIndexes, outputs, newOutputs);
+
+    super.decode(newInputs, newErasedIndexes, newOutputs);
+  }
+
-            erasedIndexes.length, dataLen);
+        erasedIndexes.length, dataLen);
-            adjustedByteArrayOutputsParameter, adjustedOutputOffsets);
+        adjustedByteArrayOutputsParameter, adjustedOutputOffsets);
+  /*
+   * Convert data units first order to parity units first order.
+   */
+  private <T> void adjustOrder(T[] inputs, T[] inputs2,
+                               int[] erasedIndexes, int[] erasedIndexes2,
+                               T[] outputs, T[] outputs2) {
+    // Example:
+    // d0 d1 d2 d3 d4 d5 : p0 p1 p2 => p0 p1 p2 : d0 d1 d2 d3 d4 d5
+    System.arraycopy(inputs, getNumDataUnits(), inputs2,
+        0, getNumParityUnits());
+    System.arraycopy(inputs, 0, inputs2,
+        getNumParityUnits(), getNumDataUnits());
+
+    int numErasedDataUnits = 0, numErasedParityUnits = 0;
+    int idx = 0;
+    for (int i = 0; i < erasedIndexes.length; i++) {
+      if (erasedIndexes[i] >= getNumDataUnits()) {
+        erasedIndexes2[idx++] = erasedIndexes[i] - getNumDataUnits();
+        numErasedParityUnits++;
+      }
+    }
+    for (int i = 0; i < erasedIndexes.length; i++) {
+      if (erasedIndexes[i] < getNumDataUnits()) {
+        erasedIndexes2[idx++] = erasedIndexes[i] + getNumParityUnits();
+        numErasedDataUnits++;
+      }
+    }
+
+    // Copy for data units
+    System.arraycopy(outputs, numErasedDataUnits, outputs2,
+        0, numErasedParityUnits);
+    // Copy for parity units
+    System.arraycopy(outputs, 0, outputs2,
+        numErasedParityUnits, numErasedDataUnits);
+  }
+

INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS73 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS60 INS60 INS60 INS21 INS21 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS60 INS60 INS60 INS21 INS21 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS21 INS21 INS60 INS60 INS24 INS24 INS21 INS21 INS43 INS85 INS39 INS85 INS43 INS85 INS5 INS59 INS5 INS59 INS5 INS59 INS32 INS48 INS39 INS85 INS85 INS39 INS85 INS39 INS85 INS85 INS5 INS59 INS5 INS59 INS5 INS59 INS32 INS48 INS43 INS85 INS43 INS85 INS39 INS85 INS39 INS85 INS43 INS85 INS43 INS85 INS32 INS32 INS39 INS59 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS32 INS32 INS42 INS42 INS43 INS85 INS42 INS3 INS39 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS85 INS42 INS3 INS39 INS85 INS42 INS3 INS39 INS85 INS85 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS32 INS42 INS42 INS42 INS34 INS42 INS32 INS32 INS42 INS34 INS42 INS34 INS42 INS34 INS39 INS59 INS42 INS40 INS42 INS25 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS5 INS40 INS5 INS40 INS42 INS5 INS40 INS5 INS40 INS5 INS40 INS5 INS40 INS42 INS42 INS42 INS42 INS42 INS34 INS27 INS8 INS42 INS34 INS27 INS8 INS43 INS85 INS39 INS85 INS43 INS85 INS39 INS85 INS85 INS39 INS85 INS39 INS85 INS85 INS2 INS32 INS21 INS21 INS2 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS7 INS37 INS42 INS42 INS42 INS7 INS37 INS2 INS27 INS42 INS2 INS27 INS42 INS42 INS37 INS2 INS32 INS42 INS37 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42