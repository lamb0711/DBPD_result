Merging r1526971 through r1527683 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1527697 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
+import org.apache.hadoop.fs.ByteBufferUtil;
+import org.apache.hadoop.fs.HasEnhancedByteBufferAccess;
+import org.apache.hadoop.fs.ReadOption;
+import org.apache.hadoop.hdfs.client.ClientMmap;
+import org.apache.hadoop.io.ByteBufferPool;
+import org.apache.hadoop.util.IdentityHashStore;
-implements ByteBufferReadable, CanSetDropBehind, CanSetReadahead {
+implements ByteBufferReadable, CanSetDropBehind, CanSetReadahead,
+    HasEnhancedByteBufferAccess {
+  /**
+   * Track the ByteBuffers that we have handed out to readers.
+   * 
+   * The value type can be either ByteBufferPool or ClientMmap, depending on
+   * whether we this is a memory-mapped buffer or not.
+   */
+  private final IdentityHashStore<ByteBuffer, Object>
+      extendedReadBuffers = new IdentityHashStore<ByteBuffer, Object>(0);
+
+      this.totalZeroCopyBytesRead = 0;
+      this.totalZeroCopyBytesRead = rhs.getTotalZeroCopyBytesRead();
+    
+    /**
+     * @return The total number of zero-copy bytes read.
+     */
+    public long getTotalZeroCopyBytesRead() {
+      return totalZeroCopyBytesRead;
+    }
+
+    void addZeroCopyBytes(long amt) {
+      this.totalBytesRead += amt;
+      this.totalLocalBytesRead += amt;
+      this.totalShortCircuitBytesRead += amt;
+      this.totalZeroCopyBytesRead += amt;
+    }
+
+    private long totalZeroCopyBytesRead;
+    if (!extendedReadBuffers.isEmpty()) {
+      final StringBuilder builder = new StringBuilder();
+      extendedReadBuffers.visitAll(new IdentityHashStore.Visitor<ByteBuffer, Object>() {
+        private String prefix = "";
+        @Override
+        public void accept(ByteBuffer k, Object v) {
+          builder.append(prefix).append(k);
+          prefix = ", ";
+        }
+      });
+      DFSClient.LOG.warn("closing file " + src + ", but there are still " +
+          "unreleased ByteBuffers allocated by read().  " +
+          "Please release " + builder.toString() + ".");
+    }
+
+  @Override
+  public synchronized ByteBuffer read(ByteBufferPool bufferPool,
+      int maxLength, EnumSet<ReadOption> opts) 
+          throws IOException, UnsupportedOperationException {
+    assert(maxLength > 0);
+    if (((blockReader == null) || (blockEnd == -1)) &&
+          (pos < getFileLength())) {
+      /*
+       * If we don't have a blockReader, or the one we have has no more bytes
+       * left to read, we call seekToBlockSource to get a new blockReader and
+       * recalculate blockEnd.  Note that we assume we're not at EOF here
+       * (we check this above).
+       */
+      if ((!seekToBlockSource(pos)) || (blockReader == null)) {
+        throw new IOException("failed to allocate new BlockReader " +
+            "at position " + pos);
+      }
+    }
+    boolean canSkipChecksums = opts.contains(ReadOption.SKIP_CHECKSUMS);
+    if (canSkipChecksums) {
+      ByteBuffer buffer = tryReadZeroCopy(maxLength);
+      if (buffer != null) {
+        return buffer;
+      }
+    }
+    ByteBuffer buffer = ByteBufferUtil.
+        fallbackRead(this, bufferPool, maxLength);
+    if (buffer != null) {
+      extendedReadBuffers.put(buffer, bufferPool);
+    }
+    return buffer;
+  }
+
+  private synchronized ByteBuffer tryReadZeroCopy(int maxLength)
+      throws IOException {
+    // Java ByteBuffers can't be longer than 2 GB, because they use
+    // 4-byte signed integers to represent capacity, etc.
+    // So we can't mmap the parts of the block higher than the 2 GB offset.
+    // FIXME: we could work around this with multiple memory maps.
+    // See HDFS-5101.
+    long blockEnd32 = Math.min(Integer.MAX_VALUE, blockEnd);
+    long curPos = pos;
+    long blockLeft = blockEnd32 - curPos + 1;
+    if (blockLeft <= 0) {
+      if (DFSClient.LOG.isDebugEnabled()) {
+        DFSClient.LOG.debug("unable to perform a zero-copy read from offset " +
+          curPos + " of " + src + "; blockLeft = " + blockLeft +
+          "; blockEnd32 = " + blockEnd32 + ", blockEnd = " + blockEnd +
+          "; maxLength = " + maxLength);
+      }
+      return null;
+    }
+    int length = Math.min((int)blockLeft, maxLength);
+    long blockStartInFile = currentLocatedBlock.getStartOffset();
+    long blockPos = curPos - blockStartInFile;
+    long limit = blockPos + length;
+    ClientMmap clientMmap =
+        blockReader.getClientMmap(currentLocatedBlock,
+            dfsClient.getMmapManager());
+    if (clientMmap == null) {
+      if (DFSClient.LOG.isDebugEnabled()) {
+        DFSClient.LOG.debug("unable to perform a zero-copy read from offset " +
+          curPos + " of " + src + "; BlockReader#getClientMmap returned " +
+          "null.");
+      }
+      return null;
+    }
+    seek(pos + length);
+    ByteBuffer buffer = clientMmap.getMappedByteBuffer().asReadOnlyBuffer();
+    buffer.position((int)blockPos);
+    buffer.limit((int)limit);
+    clientMmap.ref();
+    extendedReadBuffers.put(buffer, clientMmap);
+    readStatistics.addZeroCopyBytes(length);
+    if (DFSClient.LOG.isDebugEnabled()) {
+      DFSClient.LOG.debug("readZeroCopy read " + maxLength + " bytes from " +
+          "offset " + curPos + " via the zero-copy read path.  " +
+          "blockEnd = " + blockEnd);
+    }
+    return buffer;
+  }
+
+  @Override
+  public synchronized void releaseBuffer(ByteBuffer buffer) {
+    Object val = extendedReadBuffers.remove(buffer);
+    if (val == null) {
+      throw new IllegalArgumentException("tried to release a buffer " +
+          "that was not created by this stream, " + buffer);
+    }
+    if (val instanceof ClientMmap) {
+      ((ClientMmap)val).unref();
+    } else if (val instanceof ByteBufferPool) {
+      ((ByteBufferPool)val).putBuffer(buffer);
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS42 INS29 INS83 INS83 INS74 INS59 INS31 INS31 INS23 INS8 INS78 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS43 INS43 INS43 INS42 INS14 INS29 INS83 INS39 INS42 INS8 INS39 INS42 INS44 INS8 INS83 INS39 INS59 MOV25 MOV21 INS25 MOV25 MOV21 MOV21 MOV21 INS42 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS42 INS42 INS6 INS25 INS60 INS25 INS60 INS25 INS41 INS42 INS39 INS42 INS42 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS25 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS25 INS41 INS42 INS43 INS42 INS60 INS25 INS25 INS66 INS66 INS66 INS42 INS42 INS42 INS74 INS34 INS21 INS21 INS65 INS41 INS39 INS42 INS21 INS21 INS21 INS21 INS42 INS38 INS8 INS42 INS43 INS43 INS36 INS27 INS8 INS39 INS59 INS42 INS8 INS43 INS59 INS27 INS8 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS62 INS8 INS25 INS43 INS43 INS43 INS7 INS7 INS66 INS42 INS7 INS7 INS7 INS7 INS32 INS60 INS21 INS21 INS42 INS42 INS27 INS36 INS36 INS25 INS42 INS32 INS60 INS25 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS34 INS25 INS41 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS25 INS41 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS43 INS21 INS62 INS8 INS42 INS42 INS42 INS22 INS34 INS22 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS32 INS42 INS34 INS27 INS27 INS27 INS8 INS42 INS42 INS40 INS43 INS59 INS27 INS8 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS34 INS32 INS8 INS33 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS33 INS42 INS42 INS32 INS42 INS39 INS42 INS39 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS43 INS21 INS52 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS40 INS42 INS27 INS36 INS36 INS42 INS32 INS36 INS36 INS53 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS21 INS39 INS42 INS42 INS42 INS40 INS42 INS21 INS42 INS42 INS40 INS42 INS27 INS43 INS27 INS36 INS42 INS42 INS32 INS43 INS74 INS1 INS45 INS42 INS45 INS45 INS45 INS32 INS45 INS27 INS27 INS42 INS38 INS27 INS14 INS42 INS42 INS42 INS32 INS32 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS11 INS36 INS42 INS42 INS42 INS43 INS43 INS43 INS23 INS31 INS42 INS42 INS42 INS33 INS42 INS38 INS32 INS42 INS33 INS43 INS27 INS40 INS42 INS27 INS40 INS42 INS27 INS43 INS42 INS11 INS40 INS42 INS42 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 INS44 MOV8 INS34 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS32 INS7 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42