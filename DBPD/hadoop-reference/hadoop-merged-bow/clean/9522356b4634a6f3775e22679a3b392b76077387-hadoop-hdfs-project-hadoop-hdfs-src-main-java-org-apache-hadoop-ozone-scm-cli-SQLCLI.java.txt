HDFS-12069. Ozone: Create a general abstraction for metadata store. Contributed by Weiwei Yang.

-import org.apache.hadoop.utils.LevelDBStore;
-import org.iq80.leveldb.DBIterator;
+import org.apache.hadoop.utils.MetadataStore;
+import org.apache.hadoop.utils.MetadataStoreBuilder;
-import java.util.Map;
+
-    org.iq80.leveldb.Options dbOptions = new org.iq80.leveldb.Options();
-    try (LevelDBStore dbStore = new LevelDBStore(dbFile, dbOptions);
-         Connection conn = connectDB(outPath.toString());
-         DBIterator iter = dbStore.getIterator()) {
+    try (MetadataStore dbStore = MetadataStoreBuilder.newBuilder()
+        .setDbFile(dbFile).build();
+        Connection conn = connectDB(outPath.toString())) {
-      iter.seekToFirst();
-      while (iter.hasNext()) {
-        Map.Entry<byte[], byte[]> entry = iter.next();
-        String containerName = new String(entry.getKey(), encoding);
-        Pipeline pipeline = Pipeline.parseFrom(entry.getValue());
-        insertContainerDB(conn, containerName, pipeline, uuidChecked);
-      }
+      dbStore.iterate(null, (key, value) -> {
+        String containerName = new String(key, encoding);
+        Pipeline pipeline = null;
+        pipeline = Pipeline.parseFrom(value);
+        try {
+          insertContainerDB(conn, containerName, pipeline, uuidChecked);
+          return true;
+        } catch (SQLException e) {
+          throw new IOException(e);
+        }
+      });
-    org.iq80.leveldb.Options dbOptions = new org.iq80.leveldb.Options();
-    try (LevelDBStore dbStore = new LevelDBStore(dbFile, dbOptions);
-         Connection conn = connectDB(outPath.toString());
-         DBIterator iter = dbStore.getIterator()) {
+    try (MetadataStore dbStore = MetadataStoreBuilder.newBuilder()
+        .setDbFile(dbFile).build();
+        Connection conn = connectDB(outPath.toString())) {
-      iter.seekToFirst();
-      while (iter.hasNext()) {
-        Map.Entry<byte[], byte[]> entry = iter.next();
-        String blockKey = DFSUtilClient.bytes2String(entry.getKey());
-        String containerName = DFSUtilClient.bytes2String(entry.getValue());
+      dbStore.iterate(null, (key, value) -> {
+        String blockKey = DFSUtilClient.bytes2String(key);
+        String containerName = DFSUtilClient.bytes2String(value);
-        executeSQL(conn, insertBlockContainer);
-      }
+
+        try {
+          executeSQL(conn, insertBlockContainer);
+          return true;
+        } catch (SQLException e) {
+          throw new IOException(e);
+        }
+      });
-    org.iq80.leveldb.Options dbOptions = new org.iq80.leveldb.Options();
-    try (LevelDBStore dbStore = new LevelDBStore(dbFile, dbOptions);
-         Connection conn = connectDB(outPath.toString());
-         DBIterator iter = dbStore.getIterator()) {
+    try (MetadataStore dbStore = MetadataStoreBuilder.newBuilder()
+        .setDbFile(dbFile).build();
+        Connection conn = connectDB(outPath.toString())) {
-      iter.seekToFirst();
-      while (iter.hasNext()) {
-        Map.Entry<byte[], byte[]> entry = iter.next();
-        DatanodeID nodeId = DatanodeID.getFromProtoBuf(
-            HdfsProtos.DatanodeIDProto.PARSER.parseFrom(entry.getKey()));
-        String blockPool = DFSUtil.bytes2String(entry.getValue());
-        insertNodePoolDB(conn, blockPool, nodeId);
-      }
+      dbStore.iterate(null, (key, value) -> {
+        DatanodeID nodeId = DatanodeID
+            .getFromProtoBuf(HdfsProtos.DatanodeIDProto.PARSER.parseFrom(key));
+        String blockPool = DFSUtil.bytes2String(value);
+        try {
+          insertNodePoolDB(conn, blockPool, nodeId);
+          return true;
+        } catch (SQLException e) {
+          throw new IOException(e);
+        }
+      });
-    org.iq80.leveldb.Options dbOptions = new org.iq80.leveldb.Options();
-    try (LevelDBStore dbStore = new LevelDBStore(dbFile, dbOptions);
-        Connection conn = connectDB(outPath.toString());
-        DBIterator iter = dbStore.getIterator()) {
+    try (MetadataStore dbStore = MetadataStoreBuilder.newBuilder()
+        .setDbFile(dbFile).build();
+        Connection conn = connectDB(outPath.toString())) {
-      iter.seekToFirst();
-      while (iter.hasNext()) {
-        Map.Entry<byte[], byte[]> entry = iter.next();
-        String containerName = DFSUtil.bytes2String(entry.getKey());
-        Long containerUsed = Long.parseLong(
-            DFSUtil.bytes2String(entry.getValue()));
-        String insertOpenContainer = String.format(
-            INSERT_OPEN_CONTAINER, containerName, containerUsed);
-        executeSQL(conn, insertOpenContainer);
-      }
+      dbStore.iterate(null, (key, value) -> {
+        String containerName = DFSUtil.bytes2String(key);
+        Long containerUsed =
+            Long.parseLong(DFSUtil.bytes2String(value));
+        String insertOpenContainer = String
+            .format(INSERT_OPEN_CONTAINER, containerName, containerUsed);
+        try {
+          executeSQL(conn, insertOpenContainer);
+          return true;
+        } catch (SQLException e) {
+          throw new IOException(e);
+        }
+      });

UPD40 UPD40 INS8 INS8 INS8 UPD43 INS21 UPD43 MOV21 INS21 UPD43 MOV21 MOV21 INS21 UPD43 MOV21 INS21 UPD42 INS32 INS32 UPD42 INS32 INS32 UPD42 INS32 INS32 UPD42 INS32 INS32 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS33 INS86 INS32 INS42 MOV42 UPD42 MOV42 INS33 INS86 INS32 INS42 MOV42 UPD42 MOV42 INS33 INS86 INS32 INS42 MOV42 UPD42 MOV42 INS33 INS86 INS32 INS42 INS42 INS59 INS59 INS8 INS32 INS42 INS42 INS59 INS59 INS8 INS32 INS42 INS42 INS59 INS59 INS8 INS32 INS42 INS42 INS59 INS59 INS8 INS42 INS42 INS42 UPD42 MOV42 MOV60 INS60 INS21 INS54 INS42 INS42 INS42 UPD42 MOV42 MOV60 MOV60 MOV60 INS54 INS42 INS42 INS42 UPD42 MOV42 MOV60 MOV60 INS54 INS42 INS42 INS42 UPD42 MOV42 MOV60 MOV60 MOV60 INS54 MOV43 MOV43 INS59 INS7 INS8 INS12 MOV43 MOV43 INS8 INS12 INS8 INS12 INS8 INS12 MOV42 INS33 INS42 INS32 MOV21 INS41 INS44 INS8 MOV21 INS41 INS44 INS8 MOV21 INS41 INS44 INS8 MOV21 INS41 INS44 INS8 MOV43 INS42 MOV42 MOV42 UPD42 MOV42 INS9 INS43 INS42 INS53 UPD42 MOV42 UPD42 MOV42 INS9 INS43 INS42 INS53 UPD42 MOV42 INS9 INS43 INS42 INS53 UPD42 MOV42 INS9 INS43 INS42 INS53 INS42 INS14 INS42 INS14 UPD42 MOV42 INS42 INS14 UPD42 MOV42 INS42 INS14 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL43 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL61 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL40 DEL43 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL8 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL40 DEL43 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL8 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL40 DEL43 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL8