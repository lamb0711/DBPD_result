Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.FSConstants;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
-import org.apache.hadoop.hdfs.server.common.HdfsConstants.NamenodeRole;
-import org.apache.hadoop.hdfs.server.common.HdfsConstants.StartupOption;
-import org.apache.hadoop.hdfs.server.namenode.FSImageStorageInspector.LoadPlan;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.NamenodeRole;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption;
+
-  protected FSNamesystem namesystem = null;
-  /**
-   * URIs for importing an image from a checkpoint. In the default case,
-   * URIs will represent directories. 
-   */
-  private Collection<URI> checkpointDirs;
-  private Collection<URI> checkpointEditsDirs;
-
-  /**
-   * Construct an FSImage.
-   * @param conf Configuration
-   * @see #FSImage(Configuration conf, FSNamesystem ns, 
-   *               Collection imageDirs, Collection editsDirs) 
-   * @throws IOException if default directories are invalid.
-   */
-  public FSImage(Configuration conf) throws IOException {
-    this(conf, (FSNamesystem)null);
-  }
-   * @param ns The FSNamesystem using this image.
-   * @see #FSImage(Configuration conf, FSNamesystem ns, 
+   * @see #FSImage(Configuration conf, 
-  private FSImage(Configuration conf, FSNamesystem ns) throws IOException {
-    this(conf, ns,
+  protected FSImage(Configuration conf) throws IOException {
+    this(conf,
-   * @param ns The FSNamesystem using this image.
-  protected FSImage(Configuration conf, FSNamesystem ns,
+  protected FSImage(Configuration conf,
-    setCheckpointDirectories(FSImage.getCheckpointDirs(conf, null),
-                             FSImage.getCheckpointEditsDirs(conf, null));
-    setFSNamesystem(ns);
-
-  protected FSNamesystem getFSNamesystem() {
-    return namesystem;
-  }
-
-  void setFSNamesystem(FSNamesystem ns) {
-    namesystem = ns;
-    if (ns != null) {
-      storage.setUpgradeManager(ns.upgradeManager);
-    }
-  }
-  void setCheckpointDirectories(Collection<URI> dirs,
-                                Collection<URI> editsDirs) {
-    checkpointDirs = dirs;
-    checkpointEditsDirs = editsDirs;
-  }
-  
-  void format(String clusterId) throws IOException {
+  void format(FSNamesystem fsn, String clusterId) throws IOException {
+    long fileCount = fsn.getTotalFiles();
+    // Expect 1 file, which is the root inode
+    Preconditions.checkState(fileCount == 1,
+        "FSImage.format should be called with an uninitialized namesystem, has " +
+        fileCount + " files");
-    saveFSImageInAllDirs(0);    
+    saveFSImageInAllDirs(fsn, 0);
-  boolean recoverTransitionRead(StartupOption startOpt)
+  boolean recoverTransitionRead(StartupOption startOpt, FSNamesystem target)
+
-    if(startOpt == StartupOption.IMPORT 
-        && (checkpointDirs == null || checkpointDirs.isEmpty()))
-      throw new IOException("Cannot import image from a checkpoint. "
-                            + "\"dfs.namenode.checkpoint.dir\" is not set." );
-
-    if(startOpt == StartupOption.IMPORT 
-        && (checkpointEditsDirs == null || checkpointEditsDirs.isEmpty()))
-      throw new IOException("Cannot import image from a checkpoint. "
-                            + "\"dfs.namenode.checkpoint.dir\" is not set." );
+    storage.setUpgradeManager(target.upgradeManager);
-        && layoutVersion != FSConstants.LAYOUT_VERSION) {
+        && layoutVersion != HdfsConstants.LAYOUT_VERSION) {
-          + FSConstants.LAYOUT_VERSION + " is required.\n"
+          + HdfsConstants.LAYOUT_VERSION + " is required.\n"
-      doUpgrade();
+      doUpgrade(target);
-      doImportCheckpoint();
+      doImportCheckpoint(target);
-    return loadFSImage();
+    return loadFSImage(target);
-  private void doUpgrade() throws IOException {
+  private void doUpgrade(FSNamesystem target) throws IOException {
-      this.loadFSImage();
+      this.loadFSImage(target);
-    this.loadFSImage();
+    this.loadFSImage(target);
-    storage.layoutVersion = FSConstants.LAYOUT_VERSION;
+    storage.layoutVersion = HdfsConstants.LAYOUT_VERSION;
-    saveFSImageInAllDirs(editLog.getLastWrittenTxId());
+    saveFSImageInAllDirs(target, editLog.getLastWrittenTxId());
-    FSImage prevState = new FSImage(conf, getFSNamesystem());
-    prevState.getStorage().layoutVersion = FSConstants.LAYOUT_VERSION;
+    FSImage prevState = new FSImage(conf);
+    prevState.getStorage().layoutVersion = HdfsConstants.LAYOUT_VERSION;
-      if (prevState.getLayoutVersion() != FSConstants.LAYOUT_VERSION) {
+      if (prevState.getLayoutVersion() != HdfsConstants.LAYOUT_VERSION) {
-          FSConstants.LAYOUT_VERSION + ". " +
+          HdfsConstants.LAYOUT_VERSION + ". " +
+   * @param target the NameSystem to import into
-  void doImportCheckpoint() throws IOException {
-    FSNamesystem fsNamesys = getFSNamesystem();
-    FSImage ckptImage = new FSImage(conf, fsNamesys,
+  void doImportCheckpoint(FSNamesystem target) throws IOException {
+    Collection<URI> checkpointDirs =
+      FSImage.getCheckpointDirs(conf, null);
+    Collection<URI> checkpointEditsDirs =
+      FSImage.getCheckpointEditsDirs(conf, null);
+
+    if (checkpointDirs == null || checkpointDirs.isEmpty()) {
+      throw new IOException("Cannot import image from a checkpoint. "
+                            + "\"dfs.namenode.checkpoint.dir\" is not set." );
+    }
+    
+    if (checkpointEditsDirs == null || checkpointEditsDirs.isEmpty()) {
+      throw new IOException("Cannot import image from a checkpoint. "
+                            + "\"dfs.namenode.checkpoint.dir\" is not set." );
+    }
+
+    FSImage realImage = target.getFSImage();
+    FSImage ckptImage = new FSImage(conf, 
-    // replace real image with the checkpoint image
-    FSImage realImage = fsNamesys.getFSImage();
-    assert realImage == this;
-    fsNamesys.dir.fsImage = ckptImage;
+    target.dir.fsImage = ckptImage;
-      ckptImage.recoverTransitionRead(StartupOption.REGULAR);
+      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target);
-    fsNamesys.dir.fsImage = realImage;
+    target.dir.fsImage = realImage;
+
-    saveNamespace();
+    saveNamespace(target);
-  void reloadFromImageFile(File file) throws IOException {
-    namesystem.dir.reset();
+  void reloadFromImageFile(File file, FSNamesystem target) throws IOException {
+    target.dir.reset();
-    loadFSImage(file);
+    loadFSImage(file, target);
-  boolean loadFSImage() throws IOException {
+  boolean loadFSImage(FSNamesystem target) throws IOException {
-    
+ 
+    FSImageStorageInspector.FSImageFile imageFile 
+      = inspector.getLatestImage();   
+
+    Iterable<EditLogInputStream> editStreams = null;
+
+    editLog.recoverUnclosedStreams();
+
+    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, 
+                               getLayoutVersion())) {
+      editStreams = editLog.selectInputStreams(imageFile.getCheckpointTxId() + 1,
+                                               inspector.getMaxSeenTxId());
+    } else {
+      editStreams = FSImagePreTransactionalStorageInspector
+        .getEditLogStreams(storage);
+    }
+ 
+    LOG.debug("Planning to load image :\n" + imageFile);
+    for (EditLogInputStream l : editStreams) {
+      LOG.debug("\t Planning to load edit stream: " + l);
+    }
-    // Plan our load. This will throw if it's impossible to load from the
-    // data that's available.
-    LoadPlan loadPlan = inspector.createLoadPlan();    
-    LOG.debug("Planning to load image using following plan:\n" + loadPlan);
-
-    
-    // Recover from previous interrupted checkpoint, if any
-    needToSave |= loadPlan.doRecovery();
-
-    //
-    // Load in bits
-    //
-    StorageDirectory sdForProperties =
-      loadPlan.getStorageDirectoryForProperties();
-    storage.readProperties(sdForProperties);
-    File imageFile = loadPlan.getImageFile();
-
+      StorageDirectory sdForProperties = imageFile.sd;
+      storage.readProperties(sdForProperties);
+
-        loadFSImage(imageFile);
+        loadFSImage(imageFile.getFile(), target);
-        loadFSImage(imageFile, new MD5Hash(md5));
+        loadFSImage(imageFile.getFile(), new MD5Hash(md5), target);
-        loadFSImage(imageFile, null);
+        loadFSImage(imageFile.getFile(), null, target);
-      throw new IOException("Failed to load image from " + loadPlan.getImageFile(), ioe);
+      FSEditLog.closeAllStreams(editStreams);
+      throw new IOException("Failed to load image from " + imageFile, ioe);
-    long numLoaded = loadEdits(loadPlan.getEditsFiles());
-    needToSave |= needsResaveBasedOnStaleCheckpoint(imageFile, numLoaded);
+    long numLoaded = loadEdits(editStreams, target);
+    needToSave |= needsResaveBasedOnStaleCheckpoint(imageFile.getFile(),
+                                                    numLoaded);
-  protected long loadEdits(List<File> editLogs) throws IOException {
-    LOG.debug("About to load edits:\n  " + Joiner.on("\n  ").join(editLogs));
+  protected long loadEdits(Iterable<EditLogInputStream> editStreams,
+                           FSNamesystem target) throws IOException {
+    LOG.debug("About to load edits:\n  " + Joiner.on("\n  ").join(editStreams));
-    
-    FSEditLogLoader loader = new FSEditLogLoader(namesystem);
-    // Load latest edits
-    for (File edits : editLogs) {
-      LOG.debug("Reading " + edits + " expecting start txid #" + startingTxId);
-      EditLogFileInputStream editIn = new EditLogFileInputStream(edits);
-      int thisNumLoaded = loader.loadFSEdits(editIn, startingTxId);
-      startingTxId += thisNumLoaded;
-      numLoaded += thisNumLoaded;
-      lastAppliedTxId += thisNumLoaded;
-      editIn.close();
+
+    try {    
+      FSEditLogLoader loader = new FSEditLogLoader(target);
+      
+      // Load latest edits
+      for (EditLogInputStream editIn : editStreams) {
+        LOG.info("Reading " + editIn + " expecting start txid #" + startingTxId);
+        int thisNumLoaded = loader.loadFSEdits(editIn, startingTxId);
+        startingTxId += thisNumLoaded;
+        numLoaded += thisNumLoaded;
+        lastAppliedTxId += thisNumLoaded;
+      }
+    } finally {
+      FSEditLog.closeAllStreams(editStreams);
-    getFSNamesystem().dir.updateCountForINodeWithQuota();    
+    target.dir.updateCountForINodeWithQuota();    
-  private void loadFSImage(File imageFile) throws IOException {
+  private void loadFSImage(File imageFile, FSNamesystem target)
+      throws IOException {
-    loadFSImage(imageFile, expectedMD5);
+    loadFSImage(imageFile, expectedMD5, target);
-  private void loadFSImage(File curFile, MD5Hash expectedMd5) throws IOException {
+  private void loadFSImage(File curFile, MD5Hash expectedMd5,
+      FSNamesystem target) throws IOException {
-        conf, getFSNamesystem());
+        conf, target);
-    namesystem.setBlockPoolId(this.getBlockPoolID());
+    target.setBlockPoolId(this.getBlockPoolID());
-  void saveFSImage(StorageDirectory sd, long txid) throws IOException {
+  void saveFSImage(FSNamesystem source, StorageDirectory sd, long txid)
+      throws IOException {
-    saver.save(newFile, txid, getFSNamesystem(), compression);
+    saver.save(newFile, txid, source, compression);
+    private final FSNamesystem source;
-    FSImageSaver(StorageDirectory sd, List<StorageDirectory> errorSDs, long txid) {
+    FSImageSaver(FSNamesystem source, StorageDirectory sd,
+        List<StorageDirectory> errorSDs, long txid) {
+      this.source = source;
-        saveFSImage(sd, txid);
+        saveFSImage(source, sd, txid);
-  void saveNamespace() throws IOException {
+  void saveNamespace(FSNamesystem source) throws IOException {
-      saveFSImageInAllDirs(imageTxId);
+      saveFSImageInAllDirs(source, imageTxId);
-  protected void saveFSImageInAllDirs(long txid) throws IOException {
+  protected void saveFSImageInAllDirs(FSNamesystem source, long txid)
+      throws IOException {
-      FSImageSaver saver = new FSImageSaver(sd, errorSDs, txid);
+      FSImageSaver saver = new FSImageSaver(source, sd, errorSDs, txid);

UPD40 UPD40 UPD40 INS31 INS31 UPD83 MOV43 INS39 INS42 MOV44 MOV44 MOV43 INS8 MOV44 MOV44 MOV29 MOV39 UPD42 MOV42 MOV44 MOV43 INS8 INS44 INS44 MOV60 INS44 INS44 INS44 INS44 INS23 INS44 INS44 MOV65 MOV65 MOV43 MOV42 MOV42 UPD42 INS60 INS21 MOV21 MOV21 UPD42 INS21 UPD42 INS65 MOV43 UPD42 INS60 INS60 INS25 INS25 MOV60 MOV60 MOV21 MOV54 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV43 INS42 MOV43 INS42 INS60 INS21 INS25 INS21 INS70 UPD74 UPD42 MOV43 INS42 INS54 INS21 MOV43 INS42 INS43 INS42 INS43 INS42 INS83 INS83 MOV43 INS59 INS44 INS43 INS42 INS43 INS42 MOV42 MOV66 MOV66 MOV42 MOV32 MOV32 INS39 INS59 INS32 INS32 MOV43 INS42 INS66 MOV74 INS59 MOV74 INS59 MOV27 INS8 MOV27 INS8 MOV43 MOV43 UPD43 INS74 INS59 INS32 INS32 INS8 INS8 INS32 INS44 INS42 INS8 UPD43 UPD43 INS8 INS8 INS32 INS42 MOV43 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS27 INS27 UPD42 UPD42 INS34 INS42 INS42 INS40 INS42 INS42 UPD40 INS42 UPD40 INS42 MOV32 INS42 MOV32 MOV53 MOV53 UPD42 UPD40 UPD40 INS42 UPD40 INS42 INS40 UPD42 INS43 INS43 INS42 INS33 INS42 INS42 INS42 INS42 INS40 INS32 MOV21 MOV21 INS42 UPD42 MOV42 INS27 INS43 INS42 INS21 INS60 MOV21 UPD42 UPD42 MOV60 MOV70 MOV21 INS40 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS7 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS45 UPD42 MOV42 INS45 UPD40 INS42 INS42 MOV43 INS42 UPD42 MOV43 UPD42 INS42 INS42 INS42 INS7 UPD7 INS45 INS42 UPD42 MOV42 INS32 MOV43 INS59 INS21 UPD42 MOV42 UPD42 MOV42 INS32 MOV43 UPD42 MOV43 INS42 INS22 INS42 MOV43 INS42 UPD40 INS42 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS40 INS32 MOV42 INS42 UPD42 UPD43 UPD42 UPD42 MOV42 INS42 UPD42 INS52 INS42 INS42 UPD40 UPD42 MOV42 UPD42 MOV42 MOV27 INS32 UPD42 UPD42 INS42 INS45 INS42 INS42 INS42 INS42 MOV43 UPD42 UPD42 INS42 MOV43 INS42 INS32 INS34 INS42 INS42 INS32 INS42 INS42 UPD42 UPD40 INS42 INS42 MOV42 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 MOV42 INS42 DEL40 DEL26 DEL83 DEL42 DEL33 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL42 DEL69 DEL33 DEL11 DEL42 DEL66 DEL65 DEL42 DEL42 DEL43 DEL42 DEL69 DEL42 DEL69 DEL42 DEL43 DEL42 DEL69 DEL42 DEL43 DEL42 DEL69 DEL68 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL42 DEL17 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL40 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL7 DEL21 DEL33 DEL27 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL31 DEL39 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL31 DEL42 DEL40 DEL27 DEL36 DEL27 DEL25 DEL42 DEL40 DEL27 DEL36 DEL27 DEL25 DEL42 DEL32 DEL42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL52 DEL27 DEL6 DEL8 DEL31 DEL42 DEL45 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL32 DEL42 DEL22 DEL42 DEL32 DEL32