HDDS-1685. Recon: Add support for "start" query param to containers and containers/{id} endpoints.



-   * Use the DB's prefix seek iterator to start the scan from the given
-   * container ID prefix.
+   * Get key prefixes for the given container ID.
+    // set the default startKeyPrefix to empty string
+    return getKeyPrefixesForContainer(containerId, StringUtils.EMPTY);
+  }
+
+  /**
+   * Use the DB's prefix seek iterator to start the scan from the given
+   * container ID and prev key prefix. The prev key prefix is skipped from
+   * the result.
+   *
+   * @param containerId the given containerId.
+   * @param prevKeyPrefix the given key prefix to start the scan from.
+   * @return Map of (Key-Prefix,Count of Keys).
+   */
+  @Override
+  public Map<ContainerKeyPrefix, Integer> getKeyPrefixesForContainer(
+      long containerId, String prevKeyPrefix) throws IOException {
-    containerIterator.seek(new ContainerKeyPrefix(containerId));
+    ContainerKeyPrefix seekKey;
+    boolean skipPrevKey = false;
+    if (StringUtils.isNotBlank(prevKeyPrefix)) {
+      skipPrevKey = true;
+      seekKey = new ContainerKeyPrefix(containerId, prevKeyPrefix);
+    } else {
+      seekKey = new ContainerKeyPrefix(containerId);
+    }
+    KeyValue<ContainerKeyPrefix, Integer> seekKeyValue =
+        containerIterator.seek(seekKey);
+
+    // check if RocksDB was able to seek correctly to the given key prefix
+    // if not, then return empty result
+    // In case of an empty prevKeyPrefix, all the keys in the container are
+    // returned
+    if (seekKeyValue == null ||
+        (StringUtils.isNotBlank(prevKeyPrefix) &&
+            !seekKeyValue.getKey().getKeyPrefix().equals(prevKeyPrefix))) {
+      return prefixes;
+    }
+
+
+      // skip the prev key if prev key is present
+      if (skipPrevKey &&
+          containerKeyPrefix.getKeyPrefix().equals(prevKeyPrefix)) {
+        continue;
+      }
+
-   * Get all the containers.
-   *
-   * @return Map of containerID -> containerMetadata.
-   * @throws IOException
-   */
-  @Override
-  public Map<Long, ContainerMetadata> getContainers() throws IOException {
-    // Set a negative limit to get all the containers.
-    return getContainers(-1);
-  }
-
-  /**
-   * only for the given limit.
+   * only for the given limit from the given start key. The start containerID
+   * is skipped from the result.
+   * @param limit No of containers to get.
+   * @param prevContainer containerID after which the
+   *                      list of containers are scanned.
-  public Map<Long, ContainerMetadata> getContainers(int limit)
+  public Map<Long, ContainerMetadata> getContainers(int limit,
+                                                    long prevContainer)
+    ContainerKeyPrefix seekKey;
+    if (prevContainer > 0L) {
+      seekKey = new ContainerKeyPrefix(prevContainer);
+      KeyValue<ContainerKeyPrefix,
+          Integer> seekKeyValue = containerIterator.seek(seekKey);
+      // Check if RocksDB was able to correctly seek to the given
+      // prevContainer containerId. If not, then return empty result
+      if (seekKeyValue != null &&
+          seekKeyValue.getKey().getContainerId() != prevContainer) {
+        return containers;
+      } else {
+        // seek to the prevContainer+1 containerID to start scan
+        seekKey = new ContainerKeyPrefix(prevContainer + 1);
+        containerIterator.seek(seekKey);
+      }
+    }
-      Long containerID = keyValue.getKey().getContainerId();
+      ContainerKeyPrefix containerKeyPrefix = keyValue.getKey();
+      Long containerID = containerKeyPrefix.getContainerId();
-  public TableIterator getContainerTableIterator() throws IOException {
+  public TableIterator getContainerTableIterator() {

MOV31 MOV29 UPD74 UPD42 INS44 INS29 INS44 INS44 UPD43 UPD43 INS39 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS60 INS60 INS25 INS60 INS25 INS65 INS65 INS39 INS42 INS60 INS25 UPD66 UPD42 UPD42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS39 INS59 INS32 INS8 INS8 INS74 INS59 INS27 INS8 UPD66 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS59 INS27 INS8 UPD42 INS42 INS40 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS21 INS21 MOV21 INS43 INS43 INS43 INS42 INS32 INS27 INS36 INS41 INS25 INS42 INS42 INS42 INS34 INS21 INS60 INS25 INS60 INS60 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS27 INS42 INS27 INS8 INS7 INS74 INS59 INS27 INS8 INS8 INS43 INS59 MOV43 INS59 INS42 INS9 INS42 INS14 INS42 MOV14 INS32 INS38 INS42 INS32 INS18 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS27 INS27 INS41 INS21 INS21 INS42 UPD42 MOV42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS7 INS32 MOV42 MOV42 INS42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS34 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL34 DEL38 DEL42 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43