Merge trunk into auto-failover branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1308260 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.DeprecatedUTF8;
+import org.apache.hadoop.io.Text;
+ *
+ * {@link DatanodeInfo#getName()} should be used to get the network
+ * location (for topology) of a datanode, instead of using
+ * {@link DatanodeID#getXferAddr()} here. Helpers are defined below
+ * for each context in which a DatanodeID is used.
-  public String name;       // hostname:port (data transfer port)
-  public String storageID;  // unique per cluster storageID
-  protected int infoPort;   // info server port
-  public int ipcPort;       // ipc server port
+  protected String ipAddr;     // IP address
+  protected String hostName;   // hostname
+  protected String storageID;  // unique per cluster storageID
+  protected int xferPort;      // data streaming port
+  protected int infoPort;      // info server port
+  protected int ipcPort;       // IPC server port
-  /** Equivalent to DatanodeID(nodeName, "", -1, -1). */
-  public DatanodeID(String nodeName) {this(nodeName, "", -1, -1);}
+  /** Equivalent to DatanodeID(ipAddr, "", -1, -1, -1). */
+  public DatanodeID(String ipAddr) {this(ipAddr, "", "", -1, -1, -1);}
+
+  /** Equivalent to DatanodeID(ipAddr, "", xferPort, -1, -1). */
+  public DatanodeID(String ipAddr, int xferPort) {this(ipAddr, "", "", xferPort, -1, -1);}
-    this(from.getName(),
+    this(from.getIpAddr(),
+        from.getHostName(),
+        from.getXferPort(),
-   * @param nodeName (hostname:portNumber) 
+   * @param ipAddr IP
+   * @param hostName hostname
+   * @param xferPort data transfer port
-  public DatanodeID(String nodeName, String storageID,
-      int infoPort, int ipcPort) {
-    this.name = nodeName;
+  public DatanodeID(String ipAddr, String hostName, String storageID,
+      int xferPort, int infoPort, int ipcPort) {
+    this.ipAddr = ipAddr;
+    this.hostName = hostName;
+    this.xferPort = xferPort;
-  public void setName(String name) {
-    this.name = name;
+  public void setIpAddr(String ipAddr) {
+    this.ipAddr = ipAddr;
+  }
+
+  public void setHostName(String hostName) {
+    this.hostName = hostName;
+  }
+
+  public void setXferPort(int xferPort) {
+    this.xferPort = xferPort;
-  
-  /**
-   * @return hostname:portNumber.
-   */
-  public String getName() {
-    return name;
+
+  public void setStorageID(String storageID) {
+    this.storageID = storageID;
-  
+
+  /**
+   * @return ipAddr;
+   */
+  public String getIpAddr() {
+    return ipAddr;
+  }
+
+  /**
+   * @return hostname
+   */
+  public String getHostName() {
+    return hostName;
+  }
+
+  /**
+   * @return IP:xferPort string
+   */
+  public String getXferAddr() {
+    return ipAddr + ":" + xferPort;
+  }
+
+  /**
+   * @return IP:ipcPort string
+   */
+  public String getIpcAddr() {
+    return ipAddr + ":" + ipcPort;
+  }
+
+  /**
+   * @return IP:infoPort string
+   */
+  public String getInfoAddr() {
+    return ipAddr + ":" + infoPort;
+  }
+
+  /**
+   * @return hostname:xferPort
+   */
+  public String getXferAddrWithHostname() {
+    return hostName + ":" + xferPort;
+  }
+
-    return this.storageID;
+    return storageID;
+  }
+
+  /**
+   * @return xferPort (the port for data streaming)
+   */
+  public int getXferPort() {
+    return xferPort;
-  /**
-   * sets the data storage ID.
-   */
-  public void setStorageID(String storageID) {
-    this.storageID = storageID;
-  }
-
-  /**
-   * @return hostname and no :portNumber.
-   */
-  public String getHost() {
-    int colon = name.indexOf(":");
-    if (colon < 0) {
-      return name;
-    } else {
-      return name.substring(0, colon);
-    }
-  }
-  
-  public int getPort() {
-    int colon = name.indexOf(":");
-    if (colon < 0) {
-      return 50010; // default port.
-    }
-    return Integer.parseInt(name.substring(colon+1));
-  }
-
-    return (name.equals(((DatanodeID)to).getName()) &&
+    return (getXferAddr().equals(((DatanodeID)to).getXferAddr()) &&
-    return name.hashCode()^ storageID.hashCode();
+    return getXferAddr().hashCode()^ storageID.hashCode();
-    return name;
+    return getXferAddr();
-    name = nodeReg.getName();
+    ipAddr = nodeReg.getIpAddr();
+    hostName = nodeReg.getHostName();
+    xferPort = nodeReg.getXferPort();
-    // update any more fields added in future.
-  /** Comparable.
-   * Basis of compare is the String name (host:portNumber) only.
+  /**
+   * Compare based on data transfer address.
+   *
-   * @return as specified by Comparable.
+   * @return as specified by Comparable
-    return name.compareTo(that.getName());
+    return getXferAddr().compareTo(that.getXferAddr());
-  /////////////////////////////////////////////////
-  // Writable
-  /////////////////////////////////////////////////
-    DeprecatedUTF8.writeString(out, name);
-    DeprecatedUTF8.writeString(out, storageID);
+    Text.writeString(out, ipAddr);
+    Text.writeString(out, hostName);
+    Text.writeString(out, storageID);
+    out.writeShort(xferPort);
+    out.writeShort(ipcPort);
-    name = DeprecatedUTF8.readString(in);
-    storageID = DeprecatedUTF8.readString(in);
-    // the infoPort read could be negative, if the port is a large number (more
+    ipAddr = Text.readString(in);
+    hostName = Text.readString(in);
+    storageID = Text.readString(in);
+    // The port read could be negative, if the port is a large number (more
-    this.infoPort = in.readShort() & 0x0000ffff;
+    xferPort = in.readShort() & 0x0000ffff;
+    infoPort = in.readShort() & 0x0000ffff;
+    ipcPort = in.readShort() & 0x0000ffff;

MOV31 UPD40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 MOV43 INS59 UPD83 INS43 UPD83 INS83 INS39 INS59 UPD83 INS29 INS83 INS42 MOV44 INS44 INS8 INS44 INS44 INS44 INS83 INS39 INS42 INS44 INS8 UPD42 INS83 INS39 INS42 INS44 INS8 MOV43 UPD42 INS29 MOV43 UPD42 MOV29 MOV83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 MOV83 INS43 INS42 INS8 MOV29 INS83 MOV43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS65 INS66 INS66 INS65 INS66 INS66 INS42 INS42 UPD42 INS42 UPD42 MOV38 INS65 UPD42 INS39 INS42 INS17 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS43 INS42 INS21 UPD42 INS39 INS42 INS21 INS65 INS42 INS41 INS65 INS42 MOV41 INS65 INS42 MOV41 INS65 INS42 INS41 MOV41 INS65 INS41 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS68 INS68 UPD66 UPD42 INS45 INS38 INS66 INS42 INS45 INS45 INS42 INS38 INS38 INS32 INS32 INS42 INS66 UPD42 UPD66 INS42 INS66 INS42 INS42 INS7 INS7 INS42 INS7 INS7 UPD66 UPD42 INS66 INS42 UPD66 INS27 INS66 INS27 INS66 INS27 INS66 INS27 INS42 INS66 INS42 INS32 INS7 INS7 UPD66 UPD66 INS32 INS32 INS32 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS34 INS34 INS34 INS42 INS42 UPD42 INS42 INS42 INS22 INS42 UPD42 INS22 INS42 INS22 INS42 UPD42 INS22 INS42 INS42 INS45 UPD42 MOV42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 UPD42 MOV42 INS42 INS42 INS32 UPD42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS27 INS42 INS27 INS52 INS42 UPD42 INS52 INS42 INS52 INS42 UPD42 INS52 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS34 INS32 INS34 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL34 DEL42 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL34 DEL27 DEL8 DEL8 DEL25 DEL8 DEL31 DEL39 DEL42 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL34 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL66 DEL52 DEL42 DEL22