HDFS-12773. RBF: Improve State Store FS implementation. Contributed by Inigo Goiri.

+import java.util.LinkedList;
+import java.util.List;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.Options;
-import org.apache.hadoop.hdfs.server.federation.store.StateStoreUtils;
+import org.apache.hadoop.hdfs.DistributedFileSystem;
+  protected boolean rename(String src, String dst) {
+    try {
+      if (fs instanceof DistributedFileSystem) {
+        DistributedFileSystem dfs = (DistributedFileSystem)fs;
+        dfs.rename(new Path(src), new Path(dst), Options.Rename.OVERWRITE);
+        return true;
+      } else {
+        // Replace should be atomic but not available
+        if (fs.exists(new Path(dst))) {
+          fs.delete(new Path(dst), true);
+        }
+        return fs.rename(new Path(src), new Path(dst));
+      }
+    } catch (Exception e) {
+      LOG.error("Cannot rename {} to {}", src, dst, e);
+      return false;
+    }
+  }
+
+  @Override
+  protected boolean remove(String path) {
+    try {
+      return fs.delete(new Path(path), true);
+    } catch (Exception e) {
+      LOG.error("Cannot remove {}", path, e);
+      return false;
+    }
+  }
+
+  @Override
-  /**
-   * Get the folder path for the record class' data.
-   *
-   * @param clazz Data record class.
-   * @return Path of the folder containing the record class' data files.
-   */
-  private Path getPathForClass(Class<? extends BaseRecord> clazz) {
-    if (clazz == null) {
-      return null;
-    }
-    // TODO extract table name from class: entry.getTableName()
-    String className = StateStoreUtils.getRecordName(clazz);
-    return new Path(workPath, className);
-  }
-
-  protected <T extends BaseRecord> void lockRecordRead(Class<T> clazz) {
-    // Not required, synced with HDFS leasing
-  }
-
-  @Override
-  protected <T extends BaseRecord> void unlockRecordRead(Class<T> clazz) {
-    // Not required, synced with HDFS leasing
-  }
-
-  @Override
-  protected <T extends BaseRecord> void lockRecordWrite(Class<T> clazz) {
-    // TODO -> wait for lease to be available
-  }
-
-  @Override
-  protected <T extends BaseRecord> void unlockRecordWrite(Class<T> clazz) {
-    // TODO -> ensure lease is closed for the file
-  }
-
-  @Override
-  protected <T extends BaseRecord> BufferedReader getReader(
-      Class<T> clazz, String sub) {
-
-    Path path = getPathForClass(clazz);
-    if (sub != null && sub.length() > 0) {
-      path = Path.mergePaths(path, new Path("/" + sub));
-    }
-    path = Path.mergePaths(path, new Path("/" + getDataFileName()));
-
+  protected <T extends BaseRecord> BufferedReader getReader(String pathName) {
+    BufferedReader reader = null;
+    Path path = new Path(pathName);
-      BufferedReader reader = new BufferedReader(isr);
-      return reader;
+      reader = new BufferedReader(isr);
-      LOG.error("Cannot open write stream for {}  to {}",
-          clazz.getSimpleName(), path);
-      return null;
+      LOG.error("Cannot open read stream for {}", path);
+    return reader;
-  protected <T extends BaseRecord> BufferedWriter getWriter(
-      Class<T> clazz, String sub) {
-
-    Path path = getPathForClass(clazz);
-    if (sub != null && sub.length() > 0) {
-      path = Path.mergePaths(path, new Path("/" + sub));
-    }
-    path = Path.mergePaths(path, new Path("/" + getDataFileName()));
-
+  protected <T extends BaseRecord> BufferedWriter getWriter(String pathName) {
+    BufferedWriter writer = null;
+    Path path = new Path(pathName);
-      BufferedWriter writer = new BufferedWriter(osw);
-      return writer;
+      writer = new BufferedWriter(osw);
-      LOG.error("Cannot open write stream for {} to {}",
-          clazz.getSimpleName(), path);
-      return null;
+      LOG.error("Cannot open write stream for {}", path);
+    return writer;
+  }
+
+  @Override
+  protected List<String> getChildren(String pathName) {
+    List<String> ret = new LinkedList<>();
+    Path path = new Path(workPath, pathName);
+    try {
+      FileStatus[] files = fs.listStatus(path);
+      for (FileStatus file : files) {
+        Path filePath = file.getPath();
+        String fileName = filePath.getName();
+        ret.add(fileName);
+      }
+    } catch (Exception e) {
+      LOG.error("Cannot get children for {}", pathName, e);
+    }
+    return ret;

MOV26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 UPD40 INS40 INS40 INS31 MOV78 UPD83 INS39 UPD42 INS44 INS44 INS39 INS42 INS44 INS8 MOV78 MOV83 INS74 UPD42 MOV42 INS44 INS8 INS43 INS42 INS43 UPD42 MOV42 INS54 MOV43 INS42 INS54 UPD42 INS60 MOV41 UPD42 INS60 MOV41 INS43 INS43 INS43 INS42 INS60 INS60 INS54 INS41 UPD42 MOV42 UPD42 MOV42 INS8 INS12 INS8 INS12 MOV43 MOV43 INS59 MOV43 MOV43 INS59 INS42 UPD42 MOV42 INS42 INS74 INS59 MOV43 INS59 INS8 INS12 INS42 MOV25 INS44 INS8 MOV41 INS44 INS8 UPD42 INS33 INS42 INS14 INS21 UPD42 INS33 INS42 INS14 INS21 UPD43 MOV43 UPD43 MOV43 INS42 INS14 INS42 INS14 INS60 INS70 INS44 INS8 INS62 INS8 INS43 INS42 INS21 INS41 INS32 INS43 INS42 INS21 INS41 MOV43 INS42 INS7 MOV43 INS42 INS7 UPD42 UPD42 INS74 MOV43 INS42 INS42 INS5 INS59 INS44 INS42 INS8 INS43 UPD42 MOV42 INS21 INS42 INS43 INS60 INS21 INS25 INS41 INS42 INS32 INS9 INS42 INS42 MOV14 INS9 UPD42 MOV42 INS32 INS9 INS42 MOV14 INS42 MOV14 INS43 INS43 INS85 INS42 INS32 INS43 UPD42 MOV42 INS60 INS60 INS21 UPD42 MOV42 INS32 INS42 INS43 INS59 INS32 INS9 INS32 INS8 INS32 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 INS42 INS42 UPD42 INS42 INS42 INS45 INS42 INS42 UPD45 UPD45 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS14 INS14 INS40 INS42 INS42 INS14 INS21 INS42 INS42 INS14 INS14 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS32 INS43 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS9 INS42 INS43 INS42 INS42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL43 DEL43 DEL76 DEL74 DEL44 DEL42 DEL33 DEL27 DEL33 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL73 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL8 DEL42 DEL43 DEL73 DEL39 DEL74 DEL42 DEL44 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL73 DEL39 DEL42 DEL43 DEL43 DEL74 DEL44 DEL8 DEL31 DEL83 DEL42 DEL43 DEL73 DEL39 DEL42 DEL43 DEL43 DEL74 DEL44 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL14 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL27 DEL14 DEL32 DEL7 DEL21 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL41 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL14 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL27 DEL14 DEL32 DEL7 DEL21 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL41