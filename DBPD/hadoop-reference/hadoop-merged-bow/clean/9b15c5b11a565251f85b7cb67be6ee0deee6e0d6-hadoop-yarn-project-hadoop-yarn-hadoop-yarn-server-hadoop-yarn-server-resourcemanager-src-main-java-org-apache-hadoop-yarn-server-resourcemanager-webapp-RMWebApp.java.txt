YARN-1525. Web UI should redirect to active RM when HA is enabled. (Cindy Li via kasha)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575166 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.InetSocketAddress;
+
+import org.apache.hadoop.ha.HAServiceProtocol.HAServiceState;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.server.resourcemanager.RMHAUtils;
+import org.apache.hadoop.yarn.webapp.Dispatcher;
+  private boolean standby = false;
+
+  @Override
+  public void configureServlets() {
+    setup();
+
+    serve("/").with(RMDispatcher.class);
+    serve("/__stop").with(Dispatcher.class);
+
+    for (String path : super.getServePathSpecs()) {
+      serve(path).with(RMDispatcher.class);
+    }
+
+    configureRSServlets();
+  }
+
+  public void checkIfStandbyRM() {
+    standby = (rm.getRMContext().getHAServiceState() == HAServiceState.STANDBY);
+  }
+
+  public boolean isStandby() {
+    return standby;
+  }
+
+  @Override
+  public String getRedirectPath() {
+    if (standby) {
+      return buildRedirectPath();
+    } else
+      return super.getRedirectPath();
+  }
+
+  private String buildRedirectPath() {
+    // make a copy of the original configuration so not to mutate it. Also use
+    // an YarnConfiguration to force loading of yarn-site.xml.
+    YarnConfiguration yarnConf = new YarnConfiguration(rm.getConfig());
+    String activeRMHAId = RMHAUtils.findActiveRMHAId(yarnConf);
+    String path = "";
+    if (activeRMHAId != null) {
+      yarnConf.set(YarnConfiguration.RM_HA_ID, activeRMHAId);
+
+      InetSocketAddress sock = YarnConfiguration.useHttps(yarnConf)
+          ? yarnConf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,
+              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,
+              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT)
+          : yarnConf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,
+              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,
+              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);
+
+      path = sock.getHostName() + ":" + Integer.toString(sock.getPort());
+      path = YarnConfiguration.useHttps(yarnConf)
+          ? "https://" + path
+          : "http://" + path;
+    }
+    return path;
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS42 INS9 INS42 INS21 INS21 INS21 INS70 INS21 INS21 INS41 INS42 INS42 INS25 INS42 INS60 INS60 INS60 INS25 INS41 INS32 INS32 INS32 INS44 INS48 INS8 INS32 INS7 INS42 INS42 INS8 INS41 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS57 INS32 INS42 INS57 INS43 INS42 INS42 INS21 INS42 INS42 INS36 INS41 INS48 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS33 INS21 INS60 INS21 INS21 INS42 INS45 INS43 INS42 INS45 INS43 INS42 INS32 INS27 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS7 INS7 INS42 INS42 INS32 INS42 INS57 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS16 INS42 INS27 INS42 INS16 INS42 INS42 INS43 INS32 INS42 INS32 INS32 INS32 INS32 INS45 INS32 INS32 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42