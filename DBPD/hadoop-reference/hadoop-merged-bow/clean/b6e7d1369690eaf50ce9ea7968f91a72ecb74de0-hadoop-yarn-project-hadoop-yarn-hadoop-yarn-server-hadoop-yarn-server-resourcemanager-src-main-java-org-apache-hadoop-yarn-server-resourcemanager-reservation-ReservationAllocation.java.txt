YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.

+import com.google.common.annotations.VisibleForTesting;
+
-public interface ReservationAllocation extends
-    Comparable<ReservationAllocation> {
+public interface ReservationAllocation
+    extends Comparable<ReservationAllocation> {
-  public ReservationId getReservationId();
+  ReservationId getReservationId();
-  public ReservationDefinition getReservationDefinition();
+  ReservationDefinition getReservationDefinition();
-  public long getStartTime();
+  long getStartTime();
-  public long getEndTime();
+  long getEndTime();
-  public Map<ReservationInterval, Resource> getAllocationRequests();
+  Map<ReservationInterval, Resource> getAllocationRequests();
-  public String getPlanName();
+  String getPlanName();
-  public String getUser();
+  String getUser();
-  public boolean containsGangs();
+  boolean containsGangs();
-  public void setAcceptanceTimestamp(long acceptedAt);
+  void setAcceptanceTimestamp(long acceptedAt);
-  public long getAcceptanceTime();
+  long getAcceptanceTime();
-  public Resource getResourcesAtTime(long tick);
+  Resource getResourcesAtTime(long tick);
+   *
-  public RLESparseResourceAllocation getResourcesOverTime();
+  RLESparseResourceAllocation getResourcesOverTime();
+
+
+  /**
+   * Return a RLE representation of used resources.
+   *
+   * @param start start of the time interval.
+   * @param end end of the time interval.
+   * @return a RLE encoding of resources allocated over time.
+   */
+  RLESparseResourceAllocation getResourcesOverTime(long start, long end);
+
+  /**
+   * Get the periodicity of this reservation representing the time period of the
+   * periodic job. Period is represented in milliseconds for periodic jobs.
+   * Period is 0 for non-periodic jobs.
+   *
+   * @return periodicity of this reservation
+   */
+  long getPeriodicity();
+
+  /**
+   * Set the periodicity of this reservation representing the time period of the
+   * periodic job. Period is represented in milliseconds for periodic jobs.
+   * Period is 0 for non-periodic jobs.
+   *
+   * @param period periodicity of this reservation
+   */
+  @VisibleForTesting
+  void setPeriodicity(long period);

INS26 INS40 INS31 INS31 INS31 INS29 INS43 INS42 INS44 INS44 INS29 INS39 INS42 INS29 INS78 INS39 INS42 INS44 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS39 INS42 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83