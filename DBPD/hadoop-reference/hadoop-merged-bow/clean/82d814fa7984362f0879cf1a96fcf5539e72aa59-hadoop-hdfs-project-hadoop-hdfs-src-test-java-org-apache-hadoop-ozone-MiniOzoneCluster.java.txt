HDFS-11564. Ozone: SCM: Add Comparable Metric Support. Contributed by Anu Engineer.

-import com.google.common.base.Optional;
+import java.util.Optional;
-import com.google.common.base.Supplier;
-    GenericTestUtils.waitFor(new Supplier<Boolean>() {
-      @Override
-      public Boolean get() {
-        if (scm.getNodeCount(SCMNodeManager.NODESTATE.HEALTHY)
-            >= numDataNodes) {
-          return true;
-        }
-        LOG.info("Waiting for cluster to be ready. Got {} of {} DN Heartbeats.",
-            scm.getNodeCount(SCMNodeManager.NODESTATE.HEALTHY),
-            numDataNodes);
-
-        return false;
+    GenericTestUtils.waitFor(() -> {
+      if (scm.getNodeCount(SCMNodeManager.NODESTATE.HEALTHY)
+          >= numDataNodes) {
+        return true;
+      LOG.info("Waiting for cluster to be ready. Got {} of {} DN Heartbeats.",
+          scm.getNodeCount(SCMNodeManager.NODESTATE.HEALTHY),
+          numDataNodes);
+
+      return false;
-    GenericTestUtils.waitFor(new Supplier<Boolean>() {
-      @Override
-      public Boolean get() {
-        if (scm.getScmNodeManager().isOutOfNodeChillMode()) {
-          return true;
-        }
-        LOG.info("Waiting for cluster to be ready. No datanodes found");
-        return false;
+    GenericTestUtils.waitFor(() -> {
+      if (scm.getScmNodeManager().isOutOfNodeChillMode()) {
+        return true;
+      LOG.info("Waiting for cluster to be ready. No datanodes found");
+      return false;
-            scm.getScmNodeManager().getStats().getCapacity() > 0, 100,
+            scm.getScmNodeManager().getStats().getCapacity().get() > 0, 100,
-      extends org.apache.hadoop.hdfs.MiniDFSCluster.Builder {
+      extends MiniDFSCluster.Builder {
-    private final int defaultHBSeconds = 1;
-    private final int defaultProcessorMs = 100;
+    private static final int DEFAULT_HB_SECONDS = 1;
+    private static final int DEFAULT_PROCESSOR_MS = 100;
-    private Optional<String> ozoneHandlerType = Optional.absent();
+    private Optional<String> ozoneHandlerType = java.util.Optional.empty();
-    private Optional<Integer> hbSeconds = Optional.absent();
-    private Optional<Integer> hbProcessorInterval = Optional.absent();
-    private Optional<String> scmMetadataDir = Optional.absent();
+    private Optional<Integer> hbSeconds = Optional.empty();
+    private Optional<Integer> hbProcessorInterval = Optional.empty();
+    private Optional<String> scmMetadataDir = Optional.empty();
-    private int containerWorkerThreadInterval = 1;
-      // TODO : Remove this later, with SCM, NN and SCM can run together.
-      //this.nnTopology(new MiniDFSNNTopology()); // No NameNode required
-
-    public Builder setSCMContainerWorkerThreadInterval(int intervalInSeconds) {
-      containerWorkerThreadInterval = intervalInSeconds;
-      return this;
-    }
-
-      // If user has not specified a path, create a UUID for this miniCluser
+      // If user has not specified a path, create a UUID for this miniCluster
+        GenericTestUtils.setLogLevel(org.apache.log4j.Logger.getRootLogger(),
+            Level.ALL);
-          Level.ALL);
+          Level.INFO);
-            defaultHBSeconds);
+            DEFAULT_HB_SECONDS);
-            defaultProcessorMs);
+            DEFAULT_PROCESSOR_MS);

UPD40 MOV31 MOV31 MOV29 INS39 INS42 MOV43 MOV43 INS8 MOV29 INS39 INS42 MOV43 MOV43 INS8 UPD43 INS21 INS21 UPD40 INS83 INS83 MOV74 MOV74 INS32 INS32 UPD42 UPD42 INS42 INS42 INS86 INS34 MOV27 INS42 INS42 INS86 INS34 INS34 INS40 UPD42 UPD42 UPD42 UPD42 MOV8 MOV8 INS21 UPD40 INS32 INS32 MOV32 INS42 INS42 INS42 INS32 INS40 UPD42 UPD42 INS40 INS42 DEL40 DEL26 DEL42 DEL78 DEL42 DEL43 DEL42 DEL42 DEL78 DEL42 DEL43 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL1 DEL14 DEL34 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL1 DEL14 DEL34 DEL34 DEL32 DEL21 DEL8 DEL31 DEL42 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31