YARN-5538. Apply SLIDER-875 to yarn-native-services. Contributed by Billie Rinaldi

+import org.apache.slider.providers.agent.application.metadata.Component;
+import static org.apache.slider.common.SliderKeys.COMPONENT_SEPARATOR;
+
+  /**
+   * Copy a file to a new FS -both paths must be qualified.
+   * @param conf conf file
+   * @param srcFile src file
+   * @param destFile dest file
+   */
+  public static void copy(Configuration conf,
+      Path srcFile,
+      Path destFile) throws
+      IOException,
+      BadClusterStateException {
+    FileSystem srcFS = FileSystem.get(srcFile.toUri(), conf);
+    //list all paths in the src.
+    if (!srcFS.exists(srcFile)) {
+      throw new FileNotFoundException("Source file not found " + srcFile);
+    }
+    if (!srcFS.isFile(srcFile)) {
+      throw new FileNotFoundException(
+          "Source file not a file " + srcFile);
+    }
+    FileSystem destFS = FileSystem.get(destFile.toUri(), conf);
+    if (destFS.exists(destFile)) {
+      throw new IOException("Dest file already exists " + destFile);
+    }
+    FileUtil.copy(srcFS, srcFile, destFS, destFile, false, true, conf);
+  }
+   * Merge string maps excluding prefixes
+   * @param first first map
+   * @param second second map
+   * @param  prefixes prefixes to ignore
+   * @return 'first' merged with the second
+   */
+  public static Map<String, String> mergeMapsIgnoreDuplicateKeysAndPrefixes(
+      Map<String, String> first, Map<String, String> second,
+      String... prefixes) {
+    Preconditions.checkArgument(first != null, "Null 'first' value");
+    Preconditions.checkArgument(second != null, "Null 'second' value");
+    Preconditions.checkArgument(prefixes != null, "Null 'prefixes' value");
+    for (Map.Entry<String, String> entry : second.entrySet()) {
+      String key = entry.getKey();
+      boolean hasPrefix = false;
+      for (String prefix : prefixes) {
+        if (key.startsWith(prefix)) {
+          hasPrefix = true;
+          break;
+        }
+      }
+      if (hasPrefix) {
+        continue;
+      }
+      if (!first.containsKey(key)) {
+        first.put(key, entry.getValue());
+      }
+    }
+    return first;
+  }
+
+  /**
+    return getApplicationDefinitionPath(conf, null);
+  }
+
+  /**
+   * return the HDFS path where the application package has been uploaded
+   * manually or by using slider client (install package command)
+   *
+   * @param conf configuration
+   * @param roleGroup name of component
+   * @return
+   */
+  public static String getApplicationDefinitionPath(ConfTreeOperations conf,
+      String roleGroup)
+      throws BadConfigException {
+    if (roleGroup != null) {
+      MapOperations component = conf.getComponent(roleGroup);
+      if (component != null) {
+        appDefPath = component.getOption(AgentKeys.APP_DEF, appDefPath);
+      }
+    }
+
+  public static String trimPrefix(String prefix) {
+    if (prefix != null && prefix.endsWith(COMPONENT_SEPARATOR)) {
+      return prefix.substring(0, prefix.length()-1);
+    }
+    return prefix;
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 MOV8 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS25 INS60 INS25 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS74 INS42 INS74 INS42 INS43 INS42 INS21 INS21 INS21 INS70 INS41 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS42 INS43 INS42 INS25 INS41 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS38 INS8 INS43 INS59 INS32 INS8 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS32 INS32 INS32 INS44 INS32 INS8 INS42 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS27 INS8 INS42 INS27 INS8 INS42 INS42 INS42 INS32 INS32 INS53 INS32 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS74 INS42 INS42 INS42 INS60 INS60 INS70 INS25 INS25 INS42 INS42 INS33 INS42 INS33 INS60 INS25 INS27 INS32 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS42 INS33 INS42 INS33 INS42 INS33 INS43 INS43 INS43 INS43 INS59 INS39 INS59 INS44 INS42 INS8 INS42 INS8 INS38 INS8 INS43 INS59 INS27 INS8 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS27 INS43 INS27 INS42 INS42 INS43 INS27 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS43 INS42 INS25 INS18 INS32 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS34 INS27 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS32 INS34 INS42 INS42 INS42 INS21 INS10 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS9