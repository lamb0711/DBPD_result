YARN-5965. Retrospect ApplicationReport#getApplicationTimeouts. Contributed by Rohith Sharma K S

+import org.apache.hadoop.yarn.api.records.ApplicationTimeoutType;
+import org.apache.hadoop.yarn.proto.YarnProtos.AppTimeoutsMapProto;
-import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
-  private List<ApplicationTimeout> applicationTimeoutList = null;
+  private Map<ApplicationTimeoutType, ApplicationTimeout> applicationTimeouts = null;
-    if (this.applicationTimeoutList != null) {
-      addLocalApplicationTimeoutToProto();
+    if (this.applicationTimeouts != null) {
+      addApplicationTimeouts();
-  public List<ApplicationTimeout> getApplicationTimeouts() {
-    initLocalApplicationsList();
-    return this.applicationTimeoutList;
+  public Map<ApplicationTimeoutType, ApplicationTimeout> getApplicationTimeouts() {
+    initApplicationTimeout();
+    return this.applicationTimeouts;
-  private void initLocalApplicationsList() {
-    if (this.applicationTimeoutList != null) {
+  @Override
+  public void setApplicationTimeouts(
+      Map<ApplicationTimeoutType, ApplicationTimeout> timeouts) {
+    if (timeouts == null) {
+      return;
+    }
+    initApplicationTimeout();
+    this.applicationTimeouts.clear();
+    this.applicationTimeouts.putAll(timeouts);
+  }
+
+  private void initApplicationTimeout() {
+    if (this.applicationTimeouts != null) {
-    List<ApplicationTimeoutProto> list = p.getApplicationTimeoutsList();
-    this.applicationTimeoutList = new ArrayList<ApplicationTimeout>();
-
-    for (ApplicationTimeoutProto a : list) {
-      this.applicationTimeoutList.add(convertFromProtoFormat(a));
+    List<AppTimeoutsMapProto> lists = p.getAppTimeoutsList();
+    this.applicationTimeouts =
+        new HashMap<ApplicationTimeoutType, ApplicationTimeout>(lists.size());
+    for (AppTimeoutsMapProto timeoutProto : lists) {
+      this.applicationTimeouts.put(
+          ProtoUtils
+              .convertFromProtoFormat(timeoutProto.getApplicationTimeoutType()),
+          convertFromProtoFormat(timeoutProto.getApplicationTimeout()));
-  private void addLocalApplicationTimeoutToProto() {
-    maybeInitBuilder();
-    builder.clearApplicationTimeouts();
-    if (applicationTimeoutList == null) {
-      return;
-    }
-    Iterable<ApplicationTimeoutProto> iterable =
-        new Iterable<ApplicationTimeoutProto>() {
-          @Override
-          public Iterator<ApplicationTimeoutProto> iterator() {
-            return new Iterator<ApplicationTimeoutProto>() {
-
-              private Iterator<ApplicationTimeout> iter =
-                  applicationTimeoutList.iterator();
-
-              @Override
-              public boolean hasNext() {
-                return iter.hasNext();
-              }
-
-              @Override
-              public ApplicationTimeoutProto next() {
-                return convertToProtoFormat(iter.next());
-              }
-
-              @Override
-              public void remove() {
-                throw new UnsupportedOperationException();
-
-              }
-            };
-
-          }
-        };
-    builder.addAllApplicationTimeouts(iterable);
-  }
-
-  @Override
-  public void setApplicationTimeouts(List<ApplicationTimeout> timeouts) {
+  private void addApplicationTimeouts() {
-    if (timeouts == null) {
-      builder.clearApplicationTimeouts();
+    builder.clearAppTimeouts();
+    if (applicationTimeouts == null) {
+      return;
-    this.applicationTimeoutList = timeouts;
+    Iterable<? extends AppTimeoutsMapProto> values =
+        new Iterable<AppTimeoutsMapProto>() {
+
+          @Override
+          public Iterator<AppTimeoutsMapProto> iterator() {
+            return new Iterator<AppTimeoutsMapProto>() {
+              private Iterator<ApplicationTimeoutType> iterator =
+                  applicationTimeouts.keySet().iterator();
+
+              @Override
+              public boolean hasNext() {
+                return iterator.hasNext();
+              }
+
+              @Override
+              public AppTimeoutsMapProto next() {
+                ApplicationTimeoutType key = iterator.next();
+                return AppTimeoutsMapProto.newBuilder()
+                    .setApplicationTimeout(
+                        convertToProtoFormat(applicationTimeouts.get(key)))
+                    .setApplicationTimeoutType(
+                        ProtoUtils.convertToProtoFormat(key))
+                    .build();
+              }
+
+              @Override
+              public void remove() {
+                throw new UnsupportedOperationException();
+              }
+            };
+          }
+        };
+    this.builder.addAllAppTimeouts(values);
+

MOV26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 UPD40 INS31 UPD74 UPD74 MOV78 INS83 INS39 INS42 INS44 INS8 UPD42 UPD42 UPD43 INS43 UPD42 UPD43 INS43 INS74 INS42 MOV25 INS21 INS21 INS21 UPD42 INS42 UPD42 INS42 INS43 INS43 MOV43 MOV8 INS32 INS32 INS32 MOV8 UPD74 UPD42 INS8 INS74 INS59 UPD42 UPD42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 INS41 MOV43 INS76 INS42 INS14 INS22 UPD42 UPD42 UPD42 INS52 INS42 INS52 INS42 UPD42 UPD42 UPD42 UPD42 UPD74 INS32 UPD42 INS43 UPD74 MOV74 MOV1 INS52 INS42 UPD42 INS43 UPD43 MOV43 INS42 INS42 UPD42 INS32 UPD42 MOV42 UPD43 INS42 UPD42 UPD42 INS42 INS32 INS42 INS32 UPD42 UPD74 MOV74 UPD42 MOV42 INS42 INS42 INS42 INS43 INS42 UPD74 UPD43 UPD42 UPD74 MOV74 MOV78 MOV78 UPD43 UPD43 UPD42 UPD42 INS60 UPD42 INS32 INS43 INS59 INS32 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV42 MOV32 UPD42 UPD42 INS42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL32 DEL42 DEL43 DEL74 DEL14 DEL59 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31