YARN-5355: YARN Timeline Service v.2: alpha 2 (varunsaxena)

+  private final boolean supplementTs;
+
+    this(columnFamily, converter, false);
+  }
+
+  /**
+   * @param columnFamily column family implementation.
+   * @param converter converter use to encode/decode values stored in the column
+   *     or column prefix.
+   * @param needSupplementTs flag to indicate if cell timestamp needs to be
+   *     modified for this column by calling
+   *     {@link TimestampGenerator#getSupplementedTimestamp(long, String)}. This
+   *     would be required for columns(such as metrics in flow run table) where
+   *     potential collisions can occur due to same timestamp.
+   */
+  public ColumnHelper(ColumnFamily<T> columnFamily, ValueConverter converter,
+      boolean needSupplementTs) {
+    this.supplementTs = needSupplementTs;
-   * Figures out the cell timestamp used in the Put For storing into flow run
-   * table. We would like to left shift the timestamp and supplement it with the
-   * AppId id so that there are no collisions in the flow run table's cells
+   * Figures out the cell timestamp used in the Put For storing.
+   * Will supplement the timestamp if required. Typically done for flow run
+   * table.If we supplement the timestamp, we left shift the timestamp and
+   * supplement it with the AppId id so that there are no collisions in the flow
+   * run table's cells.
-    String appId = getAppIdFromAttributes(attributes);
-    long supplementedTS = TimestampGenerator.getSupplementedTimestamp(
-        timestamp, appId);
-    return supplementedTS;
+    if (!this.supplementTs) {
+      return timestamp;
+    } else {
+      String appId = getAppIdFromAttributes(attributes);
+      long supplementedTS = TimestampGenerator.getSupplementedTimestamp(
+          timestamp, appId);
+      return supplementedTS;
+    }
-
-                cellResults.put(
-                    TimestampGenerator.getTruncatedTimestamp(cell.getKey()),
-                    value);
+                Long ts = supplementTs ? TimestampGenerator.
+                    getTruncatedTimestamp(cell.getKey()) : cell.getKey();
+                cellResults.put(ts, value);
-   * @param qualifier for the remainder of the column. Any
-   *          {@link Separator#QUALIFIERS} will be encoded in the qualifier.
+   * @param qualifier for the remainder of the column.
+   *          {@link Separator#QUALIFIERS} is permissible in the qualifier
+   *          as it is joined only with the column prefix bytes.

INS23 INS31 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS29 INS44 INS42 INS74 INS42 INS43 INS42 INS17 INS65 INS65 INS65 INS39 INS42 INS21 INS25 INS43 INS43 INS42 INS42 INS42 INS9 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS66 INS7 INS38 INS8 INS8 UPD66 UPD66 INS66 INS42 INS42 INS68 INS22 INS42 INS22 INS41 MOV60 MOV60 MOV41 INS42 INS42 INS69 INS69 INS52 INS42 INS52 INS42 INS42 INS39 INS43 INS42 INS60 INS43 INS59 INS42 INS42 INS16 INS42 INS42 MOV32 INS32 INS42 INS42