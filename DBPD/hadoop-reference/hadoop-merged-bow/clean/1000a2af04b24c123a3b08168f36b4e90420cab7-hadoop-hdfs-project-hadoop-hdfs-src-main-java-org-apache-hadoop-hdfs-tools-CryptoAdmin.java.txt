HDFS-10899. Add functionality to re-encrypt EDEKs.

+import org.apache.hadoop.hdfs.protocol.HdfsConstants.ReencryptAction;
+import org.apache.hadoop.hdfs.protocol.ZoneReencryptionStatus;
+import org.apache.hadoop.util.Time;
+  private static class ReencryptZoneCommand implements AdminHelper.Command {
+    @Override
+    public String getName() {
+      return "-reencryptZone";
+    }
+
+    @Override
+    public String getShortUsage() {
+      return "[" + getName() + " <action> -path <zone>]\n";
+    }
+
+    @Override
+    public String getLongUsage() {
+      final TableListing listing = AdminHelper.getOptionDescriptionListing();
+      listing.addRow("<action>",
+          "The re-encrypt action to perform. Must be -start or -cancel.");
+      listing.addRow("<zone>", "The path to the zone to be re-encrypted.");
+      return getShortUsage() + "\n" + "Issue a re-encryption command for"
+          + " an encryption zone. Requires superuser permissions.\n\n"
+          + listing.toString();
+    }
+
+    @Override
+    public int run(Configuration conf, List<String> args) throws IOException {
+      final String path = StringUtils.popOptionWithArgument("-path", args);
+      final boolean start = StringUtils.popOption("-start", args);
+      final boolean cancel = StringUtils.popOption("-cancel", args);
+
+      if (!args.isEmpty()) {
+        System.err.println("Can't understand argument: " + args.get(0));
+        getLongUsage();
+        return 1;
+      }
+      if (!(start ^ cancel)) {
+        System.err.println("You must specify either [-start] or [-cancel]. ");
+        getLongUsage();
+        return 2;
+      }
+      if (path == null) {
+        System.err.println("You must specify a zone directory with [-path]. ");
+        getLongUsage();
+        return 3;
+      }
+      ReencryptAction action = ReencryptAction.START;
+      if (cancel) {
+        action = ReencryptAction.CANCEL;
+      }
+
+      final HdfsAdmin admin =
+          new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);
+      try {
+        admin.reencryptEncryptionZone(new Path(path), action);
+        System.out.println("re-encrypt command successfully submitted for "
+            + "zone: " + path + " action: " + action);
+      } catch (IOException e) {
+        System.err.println(prettifyException(e));
+        return 4;
+      }
+      return 0;
+    }
+  }
+
+  private static class ListReencryptionStatusCommand
+      implements AdminHelper.Command {
+    @Override
+    public String getName() {
+      return "-listReencryptionStatus";
+    }
+
+    @Override
+    public String getShortUsage() {
+      return "[" + getName()+ "]\n";
+    }
+
+    @Override
+    public String getLongUsage() {
+      return getShortUsage() + "\n" +
+          "List re-encryption statuses of encryption zones. "
+          + "Requires superuser permissions.\n\n";
+    }
+
+    @Override
+    public int run(Configuration conf, List<String> args) throws IOException {
+      HdfsAdmin admin = new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);
+      try {
+        final TableListing listing =
+            new TableListing.Builder().addField("Zone Name").addField("Status")
+                .addField("EZKey Version Name").addField("Submission Time")
+                .addField("Is Canceled?").addField("Completion Time")
+                .addField("Number of files re-encrypted")
+                .addField("Number of failures")
+                .addField("Last File Checkpointed")
+                .wrapWidth(AdminHelper.MAX_LINE_WIDTH).showHeaders().build();
+        final RemoteIterator<ZoneReencryptionStatus> it =
+            admin.listReencryptionStatus();
+        boolean failuresMet = false;
+        while (it.hasNext()) {
+          ZoneReencryptionStatus zs = it.next();
+          final long completion = zs.getCompletionTime();
+          listing.addRow(zs.getZoneName(), zs.getState().toString(),
+              zs.getEzKeyVersionName(), Time.formatTime(zs.getSubmissionTime()),
+              Boolean.toString(zs.isCanceled()),
+              completion == 0 ? "N/A" : Time.formatTime(completion),
+              Long.toString(zs.getFilesReencrypted()),
+              Long.toString(zs.getNumReencryptionFailures()),
+              zs.getLastCheckpointFile());
+          if (zs.getNumReencryptionFailures() > 0) {
+            failuresMet = true;
+          }
+        }
+        System.out.println(listing.toString());
+        if (failuresMet) {
+          System.out.println("There are re-encryption failures. Files that are"
+              + " failed to re-encrypt are still using the old EDEKs. "
+              + "Please check NameNode log to see which files failed,"
+              + " then either fix the error and re-encrypt again,"
+              + " or manually copy the failed files to use new EDEKs.");
+        }
+      } catch (IOException e) {
+        System.err.println(prettifyException(e));
+        return 2;
+      }
+
+      return 0;
+    }
+  }
+
-      new GetFileEncryptionInfoCommand()
+      new GetFileEncryptionInfoCommand(),
+      new ReencryptZoneCommand(),
+      new ListReencryptionStatusCommand()

INS26 INS26 INS26 INS40 INS40 INS40 INS55 INS55 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS40 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS40 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS60 INS21 INS21 INS41 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS25 INS60 INS25 INS60 INS54 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS54 INS41 INS14 INS14 INS45 INS27 INS83 INS43 INS59 INS32 INS32 INS27 INS42 INS43 INS43 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS38 INS8 INS38 INS8 INS27 INS8 INS43 INS59 INS42 INS8 INS83 INS43 INS59 INS8 INS12 INS34 INS45 INS27 INS27 INS42 INS43 INS43 INS43 INS59 INS8 INS12 INS34 INS43 INS43 INS45 INS32 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS32 INS45 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS21 INS21 INS41 INS36 INS21 INS21 INS41 INS42 INS33 INS21 INS21 INS41 INS42 INS42 INS40 INS21 INS42 INS42 INS14 INS21 INS21 INS44 INS8 INS45 INS32 INS45 INS32 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS14 INS60 INS60 INS60 INS61 INS21 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS34 INS27 INS32 INS32 INS34 INS32 INS32 INS34 INS7 INS43 INS32 INS42 INS32 INS32 INS43 INS42 INS21 INS41 INS42 INS42 INS43 INS32 INS42 INS83 INS43 INS59 INS83 INS74 INS59 INS39 INS59 INS32 INS8 INS32 INS42 INS8 INS43 INS42 INS21 INS41 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS40 INS42 INS27 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS9 INS42 INS42 INS60 INS60 INS21 INS25 INS40 INS42 INS32 INS21 INS42 INS32 INS34 INS45 INS32 INS43 INS42 INS27 INS42 INS45 INS42 INS40 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS83 INS39 INS59 INS32 INS27 INS8 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS34 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS16 INS32 INS32 INS32 INS32 INS34 INS21 INS40 INS42 INS27 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS45 INS45 INS45 INS45 INS45 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS14 INS42 INS45 INS43 INS40