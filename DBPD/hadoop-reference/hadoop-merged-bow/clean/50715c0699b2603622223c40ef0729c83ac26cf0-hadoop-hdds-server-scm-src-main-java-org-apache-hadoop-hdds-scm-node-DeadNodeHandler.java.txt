HDDS-662. Introduce ContainerReplicaState in StorageContainerManager. Contributed by Nanda kumar.

+import org.apache.hadoop.hdds.scm.container.ContainerException;
-import org.apache.hadoop.hdds.scm.container.ContainerStateManager;
+import org.apache.hadoop.hdds.scm.container.ContainerInfo;
+import org.apache.hadoop.hdds.scm.container.ContainerManager;
+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;
+import org.apache.hadoop.hdds.scm.container.ContainerReplica;
-import org.apache.hadoop.hdds.scm.exceptions.SCMException;
-  private final ContainerStateManager containerStateManager;
+  private final ContainerManager containerManager;
-      ContainerStateManager containerStateManager) {
-    this.containerStateManager = containerStateManager;
+      ContainerManager containerManager) {
+    this.containerManager = containerManager;
-    Set<ContainerID> containers =
+    // TODO: check if there are any pipeline on this node and fire close
+    // pipeline event
+    Set<ContainerID> ids =
-    if (containers == null) {
+    if (ids == null) {
-    LOG.info(
-        "Datanode {}  is dead. Removing replications from the in-memory state.",
-        datanodeDetails.getUuid());
-    for (ContainerID container : containers) {
+    LOG.info("Datanode {}  is dead. Removing replications from the in-memory" +
+            " state.", datanodeDetails.getUuid());
+    for (ContainerID id : ids) {
-        try {
-          containerStateManager.removeContainerReplica(container,
-              datanodeDetails);
-        } catch (SCMException ex) {
-          LOG.info("DataNode {} doesn't have replica for container {}.",
-              datanodeDetails.getUuid(), container.getId());
-        }
-
-        if (!containerStateManager.isOpen(container)) {
-          ReplicationRequest replicationRequest =
-              containerStateManager.checkReplicationState(container);
-
-          if (replicationRequest != null) {
-            publisher.fireEvent(SCMEvents.REPLICATE_CONTAINER,
-                replicationRequest);
+        final ContainerInfo container = containerManager.getContainer(id);
+        if (!container.isOpen()) {
+          final ContainerReplica replica = ContainerReplica.newBuilder()
+              .setContainerID(id)
+              .setDatanodeDetails(datanodeDetails)
+              .build();
+          try {
+            containerManager.removeContainerReplica(id, replica);
+            replicateIfNeeded(container, publisher);
+          } catch (ContainerException ex) {
+            LOG.warn("Exception while removing container replica #{} for " +
+                "container #{}.", replica, container, ex);
-      } catch (SCMException e) {
-        LOG.error("Can't remove container from containerStateMap {}", container
-            .getId(), e);
+      } catch (ContainerNotFoundException cnfe) {
+        LOG.warn("Container Not found!", cnfe);
+   * Compare the existing replication number with the expected one.
+   */
+  private void replicateIfNeeded(ContainerInfo container,
+      EventPublisher publisher) throws ContainerNotFoundException {
+    final int existingReplicas = containerManager
+        .getContainerReplicas(container.containerID()).size();
+    final int expectedReplicas = container.getReplicationFactor().getNumber();
+    if (existingReplicas != expectedReplicas) {
+      publisher.fireEvent(SCMEvents.REPLICATE_CONTAINER,
+          new ReplicationRequest(
+              container.getContainerID(), existingReplicas, expectedReplicas));
+    }
+  }
+
+  /**
+  // TODO: remove this.

MOV26 INS26 INS26 INS26 INS40 INS40 UPD40 UPD40 INS40 INS31 INS31 UPD43 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 UPD42 UPD42 UPD43 UPD42 MOV21 MOV60 MOV25 MOV21 INS70 INS65 INS43 INS42 INS43 INS42 INS42 MOV60 INS60 INS25 UPD42 MOV44 INS42 INS8 INS66 INS42 INS42 INS83 INS39 INS83 INS39 INS59 INS27 INS8 UPD42 UPD42 UPD42 INS27 UPD42 INS54 UPD42 INS32 INS42 INS32 INS42 INS42 MOV21 UPD42 INS45 INS45 INS8 INS12 INS32 INS42 INS32 UPD42 MOV42 INS60 INS25 INS44 INS8 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS40 INS14 INS83 INS43 INS59 INS38 INS8 INS43 INS42 INS21 MOV42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS60 MOV54 INS42 INS32 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS42 UPD42 MOV42 INS45 INS42 INS42 INS42 INS32 INS21 INS32 INS42 INS32 UPD43 INS32 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 UPD42 INS27 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS45 INS45 DEL45 DEL45 DEL42 DEL32 DEL32 DEL32 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL33 DEL27 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8 DEL31