HDFS-6000. Avoid saving namespace when starting rolling upgrade. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571840 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import java.util.EnumSet;
-   * @return true if there is rollback fsimage (for rolling upgrade) for the
-   * given txid in storage.
+   * @return true if there is rollback fsimage (for rolling upgrade) in NameNode
+   * directory.
-  boolean hasRollbackFSImage(long txid) {
-    for (StorageDirectory sd : storage.dirIterable(NameNodeDirType.IMAGE)) {
-      final File rollbackImageFile = NNStorage.getStorageFile(sd,
-          NameNodeFile.IMAGE_ROLLBACK, txid);
-      if (rollbackImageFile.exists()) {
-        return true;
-      }
+  public boolean hasRollbackFSImage() throws IOException {
+    final FSImageStorageInspector inspector = new FSImageTransactionalStorageInspector(
+        EnumSet.of(NameNodeFile.IMAGE_ROLLBACK));
+    storage.inspectStorageDirs(inspector);
+    try {
+      List<FSImageFile> images = inspector.getLatestImages();
+      return images != null && !images.isEmpty();
+    } catch (FileNotFoundException e) {
+      return false;
-    return false;
-    final NameNodeFile nnf = rollingRollback ? NameNodeFile.IMAGE_ROLLBACK
-        : NameNodeFile.IMAGE;
-    final FSImageStorageInspector inspector = storage.readAndInspectDirs(nnf);
+    final EnumSet<NameNodeFile> nnfs;
+    if (rollingRollback) {
+      // if it is rollback of rolling upgrade, only load from the rollback image
+      nnfs = EnumSet.of(NameNodeFile.IMAGE_ROLLBACK);
+    } else {
+      // otherwise we can load from both IMAGE and IMAGE_ROLLBACK
+      nnfs = EnumSet.of(NameNodeFile.IMAGE, NameNodeFile.IMAGE_ROLLBACK);
+    }
+    final FSImageStorageInspector inspector = storage.readAndInspectDirs(nnfs);
+      if (StartupOption.isRollingUpgradeDowngrade(startOpt)) {
+        // purge rollback image if it is downgrade
+        archivalManager.purgeCheckpoints(NameNodeFile.IMAGE_ROLLBACK);
+      }
-   * @param canceler 
+   * @param canceler
-  public synchronized void saveNamespace(FSNamesystem source,
-      NameNodeFile nnf, Canceler canceler) throws IOException {
+  public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,
+      Canceler canceler) throws IOException {
-  public synchronized void saveDigestAndRenameCheckpointImage(
+  public synchronized void saveDigestAndRenameCheckpointImage(NameNodeFile nnf,
-      File imageFile = NNStorage.getImageFile(sd, txid);
+      File imageFile = NNStorage.getImageFile(sd, nnf, txid);
-    renameCheckpoint(txid, NameNodeFile.IMAGE_NEW, NameNodeFile.IMAGE, false);
+    renameCheckpoint(txid, NameNodeFile.IMAGE_NEW, nnf, false);

INS26 INS26 INS40 INS40 INS83 INS43 INS44 INS42 INS60 INS21 INS54 INS60 INS25 INS43 INS42 UPD66 UPD66 INS83 INS43 INS59 INS32 INS8 INS12 MOV83 INS74 INS59 INS42 INS8 INS8 INS42 UPD42 MOV42 INS42 INS14 INS42 INS42 INS42 MOV60 INS41 INS44 INS8 INS43 MOV43 UPD42 MOV42 INS21 INS21 INS25 INS42 INS43 INS32 INS74 INS27 INS43 INS42 MOV41 INS42 INS7 INS7 UPD42 INS32 INS8 INS42 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 INS43 INS43 UPD42 INS27 INS38 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS21 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS33 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS40 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS40 DEL39 DEL42 DEL44 DEL83 DEL43 DEL42 DEL40 DEL42 DEL43 DEL42 DEL44 DEL32 DEL32 DEL9 DEL41 DEL8 DEL25 DEL8 DEL70 DEL42 DEL40 DEL40 DEL16 DEL59 DEL60 DEL66 DEL40