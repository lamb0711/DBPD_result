HDDS-1365. Fix error handling in KeyValueContainerCheck. Contributed by Supratim Deka.

-   * fast checks are basic and do not look inside the metadata files.
-   * Or into the structures on disk. These checks can be done on Open
-   * containers as well without concurrency implications
+   * Run basic integrity checks on container metadata.
+   * These checks do not look inside the metadata files.
+   * Applicable for OPEN containers.
+   *
+   * @return true : corruption detected, false : no corruption.
+   */
+  public boolean fastCheck() {
+    boolean corruption = false;
+    try {
+      basicChecks();
+
+    } catch (IOException e) {
+      handleCorruption(e);
+      corruption = true;
+    }
+
+    return corruption;
+  }
+
+  /**
-  public KvCheckError fastCheck() {
+  private void basicChecks() throws IOException {
-    KvCheckError error;
-    LOG.trace("Running fast check for container {};", containerID);
+    LOG.trace("Running basic checks for container {};", containerID);
-    error = loadContainerData();
-    if (error != KvCheckError.ERROR_NONE) {
-      return error;
-    }
+    loadContainerData();
-    error = checkLayout();
-    if (error != KvCheckError.ERROR_NONE) {
-      return error;
-    }
-
-    error = checkContainerFile();
-
-    return error;
+    checkLayout();
+    checkContainerFile();
-   * @return void
+   * @return true : corruption detected, false : no corruption.
-  public KvCheckError fullCheck() {
-    /**
+  public boolean fullCheck() {
+    boolean corruption = false;
-     */
-    KvCheckError error;
+    try {
+      basicChecks();
+      checkBlockDB();
-    error = fastCheck();
-    if (error != KvCheckError.ERROR_NONE) {
-
-      LOG.trace("fastCheck failed, aborting full check for Container {}",
-          containerID);
-      return error;
+    } catch (IOException e) {
+      handleCorruption(e);
+      corruption = true;
-    error = checkBlockDB();
-
-    return error;
+    return corruption;
-   *
-   * @return error code or ERROR_NONE
-  private KvCheckError checkLayout() {
-    boolean success;
-    KvCheckError error = KvCheckError.ERROR_NONE;
+  private void checkLayout() throws IOException {
-    try {
-      checkDirPath(metadataPath);
-    } catch (IOException ie) {
-      error = KvCheckError.METADATA_PATH_ACCESS;
-      handleCorruption(ie.getMessage(), error, ie);
-      return error;
-    }
+    checkDirPath(metadataPath);
-    String chunksPath = onDiskContainerData.getChunksPath();
-    try {
-      checkDirPath(chunksPath);
-    } catch (IOException ie) {
-      error = KvCheckError.CHUNKS_PATH_ACCESS;
-      handleCorruption(ie.getMessage(), error, ie);
-      return error;
-    }
-
-    return error;
+    String chunksPath = onDiskContainerData.getChunksPath();
+    checkDirPath(chunksPath);
-    boolean success = true;
-        success = false;
+        throw new IOException(errStr);
-    } catch (Exception e) {
-      throw new IOException("Generic exception checking dir ["
-          + path + "]", e);
-    try {
-      String[] ls = dirPath.list();
-      if (ls == null) {
-        // null result implies operation failed
-        success = false;
-        errStr = "null listing for directory [" + path + "]";
-      }
-    } catch (Exception e) {
-      throw new IOException("Exception listing dir [" + path + "]", e);
-    }
-
-    if (!success) {
-      Preconditions.checkState(errStr != null);
+    String[] ls = dirPath.list();
+    if (ls == null) {
+      // null result implies operation failed
+      errStr = "null listing for directory [" + path + "]";
-  private KvCheckError checkContainerFile() {
+  private void checkContainerFile() throws IOException {
-    KvCheckError error = KvCheckError.ERROR_NONE;
-    KvCheckAction next;
-    try {
-      ContainerUtils.verifyChecksum(onDiskContainerData);
-    } catch (Exception e) {
-      error = KvCheckError.CONTAINERDATA_CKSUM;
-      handleCorruption("Container File Checksum mismatch", error, e);
-      return error;
-    }
+    ContainerUtils.verifyChecksum(onDiskContainerData);
-      error = KvCheckError.CONTAINERDATA_TYPE;
-      handleCorruption(errStr, error, null);
-      return error; // Abort if we do not know the type of Container
+      throw new IOException(errStr);
-      error = KvCheckError.CONTAINERDATA_ID;
-      next = handleCorruption(errStr, error, null);
-      if (next == KvCheckAction.ABORT) {
-        return error;
-      } // else continue checking other data elements
+      throw new IOException(errStr);
-      error = KvCheckError.CONTAINERDATA_DBTYPE;
-      handleCorruption(errStr, error, null);
-      return error;
+      throw new IOException(errStr);
-      error = KvCheckError.CONTAINERDATA_METADATA_PATH;
-      next = handleCorruption(errStr, error, null);
-      if (next == KvCheckAction.ABORT) {
-        return error;
-      }
+      throw new IOException(errStr);
-
-    return error;
-  private KvCheckError checkBlockDB() {
+  private void checkBlockDB() throws IOException {
-    KvCheckError error;
-    try {
-      dbFile = KeyValueContainerLocationUtil
-          .getContainerDBFile(metaDir, containerID);
+    dbFile = KeyValueContainerLocationUtil
+        .getContainerDBFile(metaDir, containerID);
-      if (!dbFile.exists() || !dbFile.canRead()) {
-
-        String dbFileErrorMsg = "Unable to access DB File [" + dbFile.toString()
-            + "] for Container [" + containerID + "] metadata path ["
-            + metadataPath + "]";
-        error = KvCheckError.DB_ACCESS;
-        handleCorruption(dbFileErrorMsg, error, null);
-        return error;
-      }
-    } catch (Exception e) {
-      String dbFileErrorMessage =
-          "Exception when initializing DBFile" + "with metadatapath ["
-              + metadataPath + "] for Container [" + containerID
-              + "]";
-      error = KvCheckError.DB_ACCESS;
-      handleCorruption(dbFileErrorMessage, error, e);
-      return error;
+    if (!dbFile.exists() || !dbFile.canRead()) {
+      String dbFileErrorMsg = "Unable to access DB File [" + dbFile.toString()
+          + "] for Container [" + containerID + "] metadata path ["
+          + metadataPath + "]";
+      throw new IOException(dbFileErrorMsg);
+
+
+    MetadataStore db = BlockUtils
+        .getDB(onDiskContainerData, checkConfig);
-    try {
-      MetadataStore db = BlockUtils
-          .getDB(onDiskContainerData, checkConfig);
-      error = iterateBlockDB(db);
-    } catch (Exception e) {
-      error = KvCheckError.DB_ITERATOR;
-      handleCorruption("Block DB Iterator aborted", error, e);
-      return error;
-    }
-
-    return error;
+    iterateBlockDB(db);
-  private KvCheckError iterateBlockDB(MetadataStore db)
+  private void iterateBlockDB(MetadataStore db)
-    KvCheckError error = KvCheckError.ERROR_NONE;
-        try {
-          chunkFile = ChunkUtils
-              .getChunkFile(onDiskContainerData,
-                  ChunkInfo.getFromProtoBuf(chunk));
-        } catch (Exception e) {
-          error = KvCheckError.MISSING_CHUNK_FILE;
-          handleCorruption("Unable to access chunk path", error, e);
-          return error;
-        }
+        chunkFile = ChunkUtils.getChunkFile(onDiskContainerData,
+            ChunkInfo.getFromProtoBuf(chunk));
-          error = KvCheckError.MISSING_CHUNK_FILE;
-
-            error = KvCheckError.ERROR_NONE;
-            handleCorruption("Missing chunk file", error, null);
-            return error;
+            String errorStr = "Missing chunk file "
+                + chunkFile.getAbsolutePath();
+            throw new IOException(errorStr);
-
-    return error;
-  private KvCheckError loadContainerData() {
-    KvCheckError error = KvCheckError.ERROR_NONE;
+  private void loadContainerData() throws IOException {
-    try {
-      onDiskContainerData = (KeyValueContainerData) ContainerDataYaml
-          .readContainerFile(containerFile);
-    } catch (IOException e) {
-      error = KvCheckError.FILE_LOAD;
-      handleCorruption("Unable to load Container File", error, e);
-    }
-
-    return error;
+    onDiskContainerData = (KeyValueContainerData) ContainerDataYaml
+        .readContainerFile(containerFile);
-  private KvCheckAction handleCorruption(String reason,
-      KvCheckError error, Exception e) {
-
-    // XXX HDDS-1201 need to implement corruption handling/reporting
-
+  private void handleCorruption(IOException e) {
-        "Corruption detected in container: [" + containerID + "] reason: ["
-            + reason + "] error code: [" + error + "]";
-    String logMessage = null;
-
-    StackTraceElement[] stackeElems = Thread.currentThread().getStackTrace();
-    String caller =
-        "Corruption reported from Source File: [" + stackeElems[2].getFileName()
-            + "] Line: [" + stackeElems[2].getLineNumber() + "]";
-
-    if (e != null) {
-      logMessage = errStr + " exception: [" + e.getMessage() + "]";
-      e.printStackTrace();
-    } else {
-      logMessage = errStr;
-    }
-
-    LOG.error(caller);
+        "Corruption detected in container: [" + containerID + "] ";
+    String logMessage = errStr + "Exception: [" + e.getMessage() + "]";
-
-    return KvCheckAction.ABORT;
-  }
-
-  /**
-   * Pre-defined error codes for Container Metadata check.
-   */
-  public enum KvCheckError {
-    ERROR_NONE,
-    FILE_LOAD, // unable to load container metafile
-    METADATA_PATH_ACCESS, // metadata path is not accessible
-    CHUNKS_PATH_ACCESS, // chunks path is not accessible
-    CONTAINERDATA_ID, // bad Container-ID stored in Container file
-    CONTAINERDATA_METADATA_PATH, // bad metadata path in Container file
-    CONTAINERDATA_CHUNKS_PATH, // bad chunks path in Container file
-    CONTAINERDATA_CKSUM, // container file checksum mismatch
-    CONTAINERDATA_TYPE, // container file incorrect type of Container
-    CONTAINERDATA_DBTYPE, // unknown DB Type specified in Container File
-    DB_ACCESS, // unable to load Metastore DB
-    DB_ITERATOR, // unable to create block iterator for Metastore DB
-    MISSING_CHUNK_FILE // chunk file not found
-  }
-
-  private enum KvCheckAction {
-    CONTINUE, // Continue with remaining checks on the corrupt Container
-    ABORT     // Abort checks for the container

INS31 INS31 INS39 INS29 UPD83 INS39 UPD42 INS43 INS8 MOV29 UPD83 INS39 INS42 MOV29 MOV83 INS39 INS42 UPD43 MOV43 INS8 INS39 MOV43 INS39 MOV43 MOV8 INS39 INS39 INS43 MOV8 INS83 INS39 MOV42 MOV44 MOV8 INS54 INS65 MOV65 UPD42 MOV42 MOV21 MOV21 MOV21 MOV21 INS65 INS54 UPD42 MOV21 MOV60 MOV21 MOV60 MOV25 MOV21 MOV21 MOV60 MOV60 MOV21 MOV60 INS21 UPD42 MOV42 MOV60 UPD43 UPD66 UPD66 UPD66 UPD66 INS39 INS8 INS12 UPD42 INS66 INS66 INS66 MOV32 MOV32 MOV32 INS66 INS8 MOV12 UPD42 MOV32 UPD42 MOV43 MOV43 UPD42 INS9 MOV21 INS44 INS8 UPD45 UPD42 INS9 MOV21 MOV21 MOV44 INS53 INS53 INS53 MOV53 INS53 INS53 MOV27 INS43 INS42 INS21 INS21 INS32 MOV32 INS21 INS14 INS14 INS14 INS14 INS14 UPD45 UPD45 UPD42 INS42 INS32 INS7 UPD42 MOV42 INS7 INS53 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 MOV21 INS42 INS42 INS42 INS9 UPD42 MOV42 INS42 INS9 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS60 INS53 MOV43 INS59 INS14 INS42 INS27 MOV43 INS42 INS45 INS32 UPD42 MOV42 INS42 DEL66 DEL66 DEL66 DEL42 DEL43 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL40 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL40 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL7 DEL42 DEL7 DEL42 DEL7 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL40 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL7 DEL42 DEL44 DEL42 DEL40 DEL7 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL41 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL8 DEL42 DEL44 DEL42 DEL40 DEL7 DEL21 DEL42 DEL41 DEL8 DEL12 DEL54 DEL8 DEL54 DEL66 DEL65 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL38 DEL42 DEL42 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL7 DEL21 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL12 DEL54 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL41 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL7 DEL21 DEL42 DEL40 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL41 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL7 DEL21 DEL42 DEL40 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL41 DEL42 DEL43 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL41 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL45 DEL27 DEL42 DEL45 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL12 DEL54 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL7 DEL21 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL7 DEL21 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL12 DEL54 DEL42 DEL40 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL42 DEL45 DEL33 DEL32 DEL21 DEL42 DEL41 DEL42 DEL41 DEL42 DEL43 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL40 DEL7 DEL21 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL45 DEL42 DEL45 DEL42 DEL42 DEL43 DEL33 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL42 DEL34 DEL2 DEL42 DEL32 DEL45 DEL42 DEL34 DEL2 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL40 DEL41 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL71 DEL83 DEL42 DEL42 DEL72 DEL42 DEL72 DEL71