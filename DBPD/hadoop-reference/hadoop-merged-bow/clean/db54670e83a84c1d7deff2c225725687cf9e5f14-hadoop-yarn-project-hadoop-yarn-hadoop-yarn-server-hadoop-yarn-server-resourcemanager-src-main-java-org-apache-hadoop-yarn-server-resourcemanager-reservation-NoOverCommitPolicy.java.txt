YARN-5165. Fix NoOvercommitPolicy to take advantage of RLE representation of plan. (Carlo Curino via asuresh)

-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.util.resource.Resources;
-    long startTime = reservation.getStartTime();
-    long endTime = reservation.getEndTime();
-    long step = plan.getStep();
+    RLESparseResourceAllocation available = plan.getAvailableResourceOverTime(
+        reservation.getUser(), reservation.getReservationId(),
+        reservation.getStartTime(), reservation.getEndTime());
-    // for every instant in time, check we are respecting cluster capacity
-    for (long t = startTime; t < endTime; t += step) {
-      Resource currExistingAllocTot = plan.getTotalCommittedResources(t);
-      Resource currNewAlloc = reservation.getResourcesAtTime(t);
-      Resource currOldAlloc = Resource.newInstance(0, 0);
-      if (oldReservation != null) {
-        oldReservation.getResourcesAtTime(t);
-      }
-      // check the cluster is never over committed
-      // currExistingAllocTot + currNewAlloc - currOldAlloc >
-      // capPlan.getTotalCapacity()
-      if (Resources.greaterThan(plan.getResourceCalculator(), plan
-          .getTotalCapacity(), Resources.subtract(
-          Resources.add(currExistingAllocTot, currNewAlloc), currOldAlloc),
-          plan.getTotalCapacity())) {
-        throw new ResourceOverCommitException("Resources at time " + t
-            + " would be overcommitted by " + "accepting reservation: "
-            + reservation.getReservationId());
-      }
+    // test the reservation does not exceed what is available
+    try {
+      RLESparseResourceAllocation
+          .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),
+              available, reservation.getResourcesOverTime(),
+              RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,
+              reservation.getStartTime(), reservation.getEndTime());
+    } catch (PlanningException p) {
+      throw new ResourceOverCommitException(
+          "Resources at time " + " would be overcommitted by "
+              + "accepting reservation: " + reservation.getReservationId());

INS8 MOV60 MOV25 MOV60 INS54 UPD43 INS8 INS12 UPD42 UPD42 INS21 INS44 INS8 UPD42 INS32 MOV32 MOV32 MOV32 INS32 INS43 INS42 MOV53 UPD42 MOV42 INS42 INS42 INS42 MOV32 MOV32 INS42 INS32 INS40 INS32 INS32 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL34 DEL34 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL8 DEL25 DEL8 DEL24 DEL8