YARN-8248. Job hangs when a job requests a resource that its queue does not have. (Szilard Nemeth via Haibo Chen)

+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import org.apache.hadoop.yarn.exceptions
+        .SchedulerInvalidResoureRequestException;
+  /**
+   * This class contains invalid resource information along with its
+   * resource request.
+   */
+  public static class MaxResourceValidationResult {
+    private ResourceRequest resourceRequest;
+    private List<ResourceInformation> invalidResources;
+
+    MaxResourceValidationResult(ResourceRequest resourceRequest,
+        List<ResourceInformation> invalidResources) {
+      this.resourceRequest = resourceRequest;
+      this.invalidResources = invalidResources;
+    }
+
+    public boolean isValid() {
+      return invalidResources.isEmpty();
+    }
+
+    @Override
+    public String toString() {
+      return "MaxResourceValidationResult{" + "resourceRequest="
+          + resourceRequest + ", invalidResources=" + invalidResources + '}';
+    }
+  }
+
-  private static final RecordFactory recordFactory = 
+  private static final RecordFactory recordFactory =
-  public static final String RELEASED_CONTAINER = 
+  public static final String RELEASED_CONTAINER =
+  private static Map<String, ResourceInformation> getZeroResources(
+      Resource resource) {
+    Map<String, ResourceInformation> resourceInformations = Maps.newHashMap();
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
+
+    for (int i = 0; i < maxLength; i++) {
+      ResourceInformation resourceInformation =
+          resource.getResourceInformation(i);
+      if (resourceInformation.getValue() == 0L) {
+        resourceInformations.put(resourceInformation.getName(),
+            resourceInformation);
+      }
+    }
+    return resourceInformations;
+  }
+
-      final ResourceInformation availableRI =
-          availableResource.getResourceInformation(reqResourceName);
-
-      long requestedResourceValue = requestedRI.getValue();
-      long availableResourceValue = availableRI.getValue();
-      int unitsRelation = UnitsConversionUtil
-          .compareUnits(requestedRI.getUnits(), availableRI.getUnits());
-
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Requested resource information: " + requestedRI);
-        LOG.debug("Available resource information: " + availableRI);
-        LOG.debug("Relation of units: " + unitsRelation);
-      }
-
-      // requested resource unit is less than available resource unit
-      // e.g. requestedUnit: "m", availableUnit: "K")
-      if (unitsRelation < 0) {
-        availableResourceValue =
-            UnitsConversionUtil.convert(availableRI.getUnits(),
-                requestedRI.getUnits(), availableRI.getValue());
-
-        // requested resource unit is greater than available resource unit
-        // e.g. requestedUnit: "G", availableUnit: "M")
-      } else if (unitsRelation > 0) {
-        requestedResourceValue =
-            UnitsConversionUtil.convert(requestedRI.getUnits(),
-                availableRI.getUnits(), requestedRI.getValue());
-      }
-
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Requested resource value after conversion: " +
-                requestedResourceValue);
-        LOG.info("Available resource value after conversion: " +
-                availableResourceValue);
-      }
-
-      if (requestedResourceValue > availableResourceValue) {
+      boolean valid = checkResource(requestedRI, availableResource);
+      if (!valid) {
+  public static MaxResourceValidationResult
+      validateResourceRequestsAgainstQueueMaxResource(
+      ResourceRequest resReq, Resource availableResource)
+      throws SchedulerInvalidResoureRequestException {
+    final Resource reqResource = resReq.getCapability();
+    Map<String, ResourceInformation> resourcesWithZeroAmount =
+        getZeroResources(availableResource);
+
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("Resources with zero amount: "
+          + Arrays.toString(resourcesWithZeroAmount.entrySet().toArray()));
+    }
+
+    List<ResourceInformation> invalidResources = Lists.newArrayList();
+    for (int i = 0; i < ResourceUtils.getNumberOfKnownResourceTypes(); i++) {
+      final ResourceInformation requestedRI =
+          reqResource.getResourceInformation(i);
+      final String reqResourceName = requestedRI.getName();
+
+      if (resourcesWithZeroAmount.containsKey(reqResourceName)
+          && requestedRI.getValue() > 0) {
+        invalidResources.add(requestedRI);
+      }
+    }
+    return new MaxResourceValidationResult(resReq, invalidResources);
+  }
+
+  /**
+   * Checks requested ResouceInformation against available Resource.
+   * @param requestedRI
+   * @param availableResource
+   * @return true if request is valid, false otherwise.
+   */
+  private static boolean checkResource(
+      ResourceInformation requestedRI, Resource availableResource) {
+    final ResourceInformation availableRI =
+        availableResource.getResourceInformation(requestedRI.getName());
+
+    long requestedResourceValue = requestedRI.getValue();
+    long availableResourceValue = availableRI.getValue();
+    int unitsRelation = UnitsConversionUtil.compareUnits(requestedRI.getUnits(),
+        availableRI.getUnits());
+
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Requested resource information: " + requestedRI);
+      LOG.debug("Available resource information: " + availableRI);
+      LOG.debug("Relation of units: " + unitsRelation);
+    }
+
+    // requested resource unit is less than available resource unit
+    // e.g. requestedUnit: "m", availableUnit: "K")
+    if (unitsRelation < 0) {
+      availableResourceValue =
+          UnitsConversionUtil.convert(availableRI.getUnits(),
+              requestedRI.getUnits(), availableRI.getValue());
+
+      // requested resource unit is greater than available resource unit
+      // e.g. requestedUnit: "G", availableUnit: "M")
+    } else if (unitsRelation > 0) {
+      requestedResourceValue =
+          UnitsConversionUtil.convert(requestedRI.getUnits(),
+              availableRI.getUnits(), requestedRI.getValue());
+    }
+
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Requested resource value after conversion: "
+          + requestedResourceValue);
+      LOG.info("Available resource value after conversion: "
+          + availableResourceValue);
+    }
+
+    return requestedResourceValue <= availableResourceValue;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS31 INS31 INS31 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS74 INS42 INS44 INS8 MOV78 MOV78 INS83 INS39 INS42 MOV44 INS44 MOV43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 UPD39 UPD42 INS44 MOV8 INS65 INS83 INS43 INS59 INS83 INS74 INS59 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS43 INS43 INS43 INS42 INS60 INS60 INS24 INS41 INS43 INS42 INS24 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS24 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS41 INS66 INS66 INS42 INS42 INS43 INS43 INS42 INS43 INS42 INS74 INS42 INS21 INS21 INS41 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS74 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS42 MOV58 MOV27 MOV37 INS8 INS42 INS42 INS83 INS43 INS59 INS74 INS59 INS32 INS8 INS74 INS59 INS58 INS27 INS37 INS8 INS14 INS66 INS42 INS42 INS66 INS42 INS43 INS27 INS42 INS42 INS42 INS43 INS43 INS7 INS7 INS32 INS27 INS43 INS43 INS43 INS42 INS32 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS25 MOV60 MOV60 MOV25 INS60 MOV25 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS43 MOV43 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS25 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS27 INS42 INS45 INS42 INS13 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS27 INS8 INS39 INS59 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS42 INS32 INS52 INS42 INS52 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS34 INS21 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS27 INS21 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL27 DEL24 DEL8