HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.

-import java.io.UnsupportedEncodingException;
-import java.net.URLDecoder;
-import java.util.Objects;
+import com.aliyun.oss.common.auth.CredentialsProvider;
+import com.aliyun.oss.common.auth.DefaultCredentialProvider;
+import com.aliyun.oss.common.auth.DefaultCredentials;
+import org.apache.hadoop.security.ProviderUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-import static org.apache.hadoop.fs.aliyun.oss.Constants.MULTIPART_UPLOAD_PART_NUM_LIMIT;
+import static org.apache.hadoop.fs.aliyun.oss.Constants.*;
+import static org.apache.hadoop.fs.aliyun.oss.Constants.ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY;
+  private static final Logger LOG =
+      LoggerFactory.getLogger(AliyunOSSUtils.class);
+
-   * User information includes user name and password.
-   */
-  static public class UserInfo {
-    private final String user;
-    private final String password;
-
-    public static final UserInfo EMPTY = new UserInfo("", "");
-
-    public UserInfo(String user, String password) {
-      this.user = user;
-      this.password = password;
-    }
-
-    /**
-     * Predicate to verify user information is set.
-     * @return true if the username is defined (not null, not empty).
-     */
-    public boolean hasLogin() {
-      return StringUtils.isNotEmpty(user);
-    }
-
-    /**
-     * Equality test matches user and password.
-     * @param o other object
-     * @return true if the objects are considered equivalent.
-     */
-    @Override
-    public boolean equals(Object o) {
-      if (this == o) {
-        return true;
-      }
-      if (o == null || getClass() != o.getClass()) {
-        return false;
-      }
-      UserInfo that = (UserInfo) o;
-      return Objects.equals(user, that.user) &&
-          Objects.equals(password, that.password);
-    }
-
-    @Override
-    public int hashCode() {
-      return Objects.hash(user, password);
-    }
-
-    public String getUser() {
-      return user;
-    }
-
-    public String getPassword() {
-      return password;
-    }
-  }
-
-  /**
-   * Used to get password from configuration, if default value is not available.
+   * Used to get password from configuration.
+   *
-   * @param val the default value of the key
-  static public String getPassword(Configuration conf, String key, String val)
+  static public String getPassword(Configuration conf, String key)
-    if (StringUtils.isEmpty(val)) {
-      try {
-        final char[] pass = conf.getPassword(key);
-        if (pass != null) {
-          return (new String(pass)).trim();
-        } else {
-          return "";
-        }
-      } catch (IOException ioe) {
-        throw new IOException("Cannot find password option " + key, ioe);
-      }
-    } else {
-      return val;
-    }
-  }
-
-  /**
-   * Extract the user information details from a URI.
-   * @param name URI of the filesystem.
-   * @return a login tuple, possibly empty.
-   */
-  public static UserInfo extractLoginDetails(URI name) {
-      String authority = name.getAuthority();
-      if (authority == null) {
-        return UserInfo.EMPTY;
-      }
-      int loginIndex = authority.indexOf('@');
-      if (loginIndex < 0) {
-        // No user information
-        return UserInfo.EMPTY;
-      }
-      String login = authority.substring(0, loginIndex);
-      int loginSplit = login.indexOf(':');
-      if (loginSplit > 0) {
-        String user = login.substring(0, loginSplit);
-        String password = URLDecoder.decode(login.substring(loginSplit + 1),
-            "UTF-8");
-        return new UserInfo(user, password);
-      } else if (loginSplit == 0) {
-        // There is no user, just a password.
-        return UserInfo.EMPTY;
+      final char[] pass = conf.getPassword(key);
+      if (pass != null) {
+        return (new String(pass)).trim();
-        return new UserInfo(login, "");
+        return "";
-    } catch (UnsupportedEncodingException e) {
-      // This should never happen; translate it if it does.
-      throw new RuntimeException(e);
+    } catch (IOException ioe) {
+      throw new IOException("Cannot find password option " + key, ioe);
-   * Skips the requested number of bytes or fail if there are not enough left.
-   * This allows for the possibility that {@link InputStream#skip(long)} may not
-   * skip as many bytes as requested (most likely because of reaching EOF).
+   * Skip the requested number of bytes or fail if there are no enough bytes
+   * left. This allows for the possibility that {@link InputStream#skip(long)}
+   * may not skip as many bytes as requested (most likely because of reaching
+   * EOF).
+   *
+   *
-     */
+   */
+
+  /**
+   * Create credential provider specified by configuration, or create default
+   * credential provider if not specified.
+   *
+   * @param name the uri of the file system
+   * @param conf configuration
+   * @return a credential provider
+   * @throws IOException on any problem. Class construction issues may be
+   * nested inside the IOE.
+   */
+  public static CredentialsProvider getCredentialsProvider(URI name,
+      Configuration conf) throws IOException {
+    URI uri = java.net.URI.create(
+        name.getScheme() + "://" + name.getAuthority());
+    CredentialsProvider credentials;
+
+    String className = conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);
+    if (StringUtils.isEmpty(className)) {
+      Configuration newConf =
+          ProviderUtils.excludeIncompatibleCredentialProviders(conf,
+              AliyunOSSFileSystem.class);
+      String accessKey =
+          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY);
+      String secretKey =
+          AliyunOSSUtils.getPassword(newConf, SECRET_KEY);
+      credentials = new DefaultCredentialProvider(
+          new DefaultCredentials(accessKey, secretKey));
+    } else {
+      try {
+        LOG.debug("Credential provider class is:" + className);
+        Class<?> credClass = Class.forName(className);
+        try {
+          credentials =
+              (CredentialsProvider)credClass.getDeclaredConstructor(
+                  URI.class, Configuration.class).newInstance(uri, conf);
+        } catch (NoSuchMethodException | SecurityException e) {
+          credentials =
+              (CredentialsProvider)credClass.getDeclaredConstructor()
+              .newInstance();
+        }
+      } catch (ClassNotFoundException e) {
+        throw new IOException(className + " not found.", e);
+      } catch (NoSuchMethodException | SecurityException e) {
+        throw new IOException(String.format("%s constructor exception.  A " +
+            "class specified in %s must provide an accessible constructor " +
+            "accepting URI and Configuration, or an accessible default " +
+            "constructor.", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),
+            e);
+      } catch (ReflectiveOperationException | IllegalArgumentException e) {
+        throw new IOException(className + " instantiation exception.", e);
+      }
+    }
+
+    return credentials;
+  }

MOV26 MOV26 INS26 INS26 INS26 INS26 UPD40 UPD40 INS40 UPD40 INS40 INS40 UPD40 INS40 INS23 INS31 MOV83 MOV83 MOV83 UPD43 MOV43 INS59 MOV8 INS29 MOV83 INS83 INS43 INS42 MOV44 MOV44 INS43 INS8 UPD42 UPD42 MOV42 INS32 MOV65 UPD65 MOV65 MOV65 MOV65 INS65 INS42 UPD43 UPD42 INS42 INS60 MOV60 INS60 INS25 INS41 INS42 INS42 INS57 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS42 UPD66 UPD42 UPD66 UPD66 INS42 INS66 INS66 UPD42 INS43 INS59 UPD43 MOV43 INS59 INS32 INS8 INS8 INS42 INS43 INS42 INS42 INS32 UPD42 UPD42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS60 INS60 INS60 INS21 MOV54 UPD42 MOV42 INS40 INS42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS59 MOV43 INS59 MOV43 INS59 INS7 INS8 INS12 INS12 MOV32 INS45 MOV32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS14 INS21 MOV60 INS54 INS44 INS8 INS44 INS8 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS14 INS32 INS74 INS8 INS12 INS43 INS42 INS53 INS84 INS42 INS53 INS84 INS43 UPD42 MOV42 INS43 INS42 INS42 INS42 INS42 INS27 INS43 INS76 UPD42 INS21 INS44 INS8 INS42 INS14 INS43 INS43 INS14 INS43 INS43 INS42 INS42 INS45 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS7 INS84 INS42 INS21 INS43 INS27 INS42 UPD42 MOV42 INS42 UPD43 MOV43 INS32 INS42 INS42 UPD42 MOV42 UPD43 INS27 INS42 INS11 INS43 INS43 INS7 INS42 UPD42 MOV42 INS45 UPD42 INS42 INS42 INS27 INS42 INS42 UPD42 INS42 INS45 INS43 INS32 INS42 INS42 INS42 INS11 INS45 INS45 INS45 INS45 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS32 UPD42 MOV42 UPD42 MOV42 INS57 INS57 UPD42 MOV42 INS32 UPD42 MOV42 INS43 INS43 INS42 UPD42 MOV42 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL45 DEL45 DEL14 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL78 DEL39 DEL42 DEL52 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL32 DEL27 DEL27 DEL9 DEL41 DEL8 DEL25 DEL40 DEL32 DEL40 DEL32 DEL27 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL55 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL41 DEL8 DEL25 DEL8 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL43 DEL42 DEL8 DEL31 DEL42 DEL43 DEL42 DEL11 DEL39 DEL13 DEL42 DEL59 DEL60 DEL33 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL34 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL34 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL13 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL45 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL42 DEL34 DEL27 DEL40 DEL41 DEL8 DEL42 DEL45 DEL14 DEL41 DEL8 DEL25 DEL25 DEL8 DEL43