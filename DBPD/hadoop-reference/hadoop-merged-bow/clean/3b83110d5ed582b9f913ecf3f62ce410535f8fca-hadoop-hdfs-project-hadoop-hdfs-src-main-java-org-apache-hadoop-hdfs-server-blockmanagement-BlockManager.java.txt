HDFS-13057: [SPS]: Revisit configurations to make SPS service modes internal/external/none. Contributed by Rakesh R.

+import org.apache.hadoop.hdfs.protocol.HdfsConstants.StoragePolicySatisfierMode;
-  private boolean spsEnabled;
-  private final SPSPathIds spsPaths;
+  private StoragePolicySatisfierMode spsMode;
+  private SPSPathIds spsPaths;
-    spsEnabled =
-        conf.getBoolean(
-            DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY,
-            DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_ENABLED_DEFAULT);
-    sps = new StoragePolicySatisfier(conf);
+    String spsModeVal =
+        conf.get(
+            DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,
+            DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_MODE_DEFAULT);
+    spsMode = StoragePolicySatisfierMode.fromString(spsModeVal);
+    sps = new StoragePolicySatisfier(conf);
-    if (!(storagePolicyEnabled && spsEnabled)) {
+    if (!(storagePolicyEnabled && spsMode != StoragePolicySatisfierMode.NONE)) {
-          DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY, spsEnabled);
+          DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_MODE_KEY, spsMode);
-      LOG.info("Storage policy satisfier is already running.");
+      LOG.info("Storage policy satisfier is already running"
+          + " as internal service.");
-    sps.start(false);
+    // starting internal SPS service
+    if (spsMode == StoragePolicySatisfierMode.INTERNAL) {
+      sps.start(false, spsMode);
+    }
-    if (!(storagePolicyEnabled && spsEnabled)) {
+    if (!(storagePolicyEnabled
+        && (spsMode != StoragePolicySatisfierMode.NONE))) {
-      LOG.info("Storage policy satisfier is already stopped.");
+      removeAllSPSPathIds();
+      LOG.info("Storage policy satisfier is not running.");
-  public void enableSPS() {
+  public void enableInternalSPS() {
-    spsEnabled = true;
-      LOG.info("Storage policy satisfier is already running.");
+      LOG.info("Storage policy satisfier is already running as SPS mode:{}.",
+          spsMode);
-    sps.start(true);
+    updateSPSMode(StoragePolicySatisfierMode.INTERNAL);
+    sps.start(true, spsMode);
+  }
+
+  /**
+   * Enable storage policy satisfier by starting its service.
+   */
+  public void enableExternalSPS() {
+    if (!storagePolicyEnabled){
+      LOG.info("Failed to start StoragePolicySatisfier as {} set to {}.",
+          DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY, storagePolicyEnabled);
+      return;
+    }
+    if (spsMode == StoragePolicySatisfierMode.EXTERNAL) {
+      LOG.info("Storage policy satisfier is already enabled as SPS mode:{}.",
+          spsMode);
+      return;
+    }
+    updateSPSMode(StoragePolicySatisfierMode.EXTERNAL);
+    sps.stopGracefully();
+  }
+
+  private void updateSPSMode(StoragePolicySatisfierMode newSpsMode) {
+    LOG.debug("Updating SPS service status, current mode:{}, new mode:{}",
+        spsMode, newSpsMode);
+    spsMode = newSpsMode;
-    spsEnabled = false;
-    if (!sps.isRunning()) {
-      LOG.info("Storage policy satisfier is already stopped.");
-      return;
+    switch (spsMode) {
+    case NONE:
+      break;
+    case INTERNAL:
+    case EXTERNAL:
+      if (!sps.isRunning()) {
+        LOG.info("Storage policy satisfier is already stopped.");
+      } else {
+        LOG.info("Stopping StoragePolicySatisfier mode {}, as admin "
+            + "requested to stop it.", spsMode);
+        sps.disable(true);
+      }
+      removeAllSPSPathIds();
+      break;
+    default:
+      // nothing
+      break;
-
-    LOG.info("Stopping StoragePolicySatisfier, as admin requested to "
-        + "stop it.");
-    sps.disable(true);
+    updateSPSMode(StoragePolicySatisfierMode.NONE);
+    removeAllSPSPathIds();
-   * @return true if sps enabled.
+   * @return true if sps is running as an internal service or external service.
-    return spsEnabled;
+    return spsMode == StoragePolicySatisfierMode.INTERNAL
+        || spsMode == StoragePolicySatisfierMode.EXTERNAL;
+  /**
+   * @return sps service mode.
+   */
+  public StoragePolicySatisfierMode getSPSMode() {
+    return spsMode;
+  }

INS26 INS40 INS31 INS31 INS31 INS43 MOV21 UPD42 INS29 UPD42 INS83 INS39 INS42 INS44 INS8 MOV29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS42 UPD42 INS60 INS21 INS25 INS21 INS65 INS25 INS25 INS21 INS43 INS42 INS21 INS21 INS50 INS21 INS21 INS65 INS42 INS41 INS43 INS59 INS7 INS27 INS8 INS32 INS66 INS38 INS8 INS27 INS8 INS32 INS42 INS32 INS7 INS42 INS49 INS10 INS49 INS49 MOV25 INS21 INS10 INS49 INS10 INS32 INS32 UPD66 INS27 INS66 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS40 MOV21 INS42 INS40 INS42 INS42 MOV21 INS41 INS42 INS40 MOV21 INS41 INS42 INS40 UPD42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS32 INS42 INS40 INS42 INS27 INS27 MOV42 UPD42 MOV42 UPD40 MOV40 UPD40 MOV40 INS42 INS42 INS42 INS21 INS32 INS21 INS21 INS42 INS42 INS40 INS42 INS40 INS27 UPD40 UPD42 INS42 INS36 INS32 UPD45 INS42 INS42 INS42 INS45 INS40 INS42 INS45 INS42 INS32 INS32 UPD42 MOV42 INS40 INS27 INS27 INS42 UPD45 INS42 INS42 INS27 INS42 INS42 INS42 MOV9 INS45 INS45 UPD42 MOV42 INS40 INS45 INS45 DEL39 DEL83 DEL42 DEL32 DEL7 DEL21 DEL45 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL45 DEL45 DEL27 DEL41 DEL42