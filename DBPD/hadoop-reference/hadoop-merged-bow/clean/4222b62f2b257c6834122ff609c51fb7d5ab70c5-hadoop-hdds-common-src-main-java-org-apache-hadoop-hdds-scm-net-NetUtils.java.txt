HDDS-1879.  Support multiple excluded scopes when choosing datanodes in NetworkTopology (#1194)


+import org.apache.commons.collections.CollectionUtils;
+import java.util.stream.Collectors;
-   * @return the new excludedScope
-  public static String removeDuplicate(NetworkTopology topology,
-      Collection<Node> mutableExcludedNodes, String excludedScope,
+  public static void removeDuplicate(NetworkTopology topology,
+      Collection<Node> mutableExcludedNodes, List<String> mutableExcludedScopes,
-    if (mutableExcludedNodes == null || mutableExcludedNodes.size() == 0 ||
-        excludedScope == null || topology == null) {
-      return excludedScope;
+    if (CollectionUtils.isEmpty(mutableExcludedNodes) ||
+        CollectionUtils.isEmpty(mutableExcludedScopes) || topology == null) {
+      return;
-    while (iterator.hasNext()) {
+    while (iterator.hasNext() && (!mutableExcludedScopes.isEmpty())) {
-      if (excludedScope.startsWith(ancestor.getNetworkFullPath())) {
-        // reset excludedScope if it's covered by exclude node's ancestor
-        return null;
-      }
-      if (ancestor.getNetworkFullPath().startsWith(excludedScope)) {
-        // remove exclude node if it's covered by excludedScope
-        iterator.remove();
-      }
+      // excludedScope is child of ancestor
+      List<String> duplicateList = mutableExcludedScopes.stream()
+          .filter(scope -> scope.startsWith(ancestor.getNetworkFullPath()))
+          .collect(Collectors.toList());
+      mutableExcludedScopes.removeAll(duplicateList);
+
+      // ancestor is covered by excludedScope
+      mutableExcludedScopes.stream().forEach(scope -> {
+        if (ancestor.getNetworkFullPath().startsWith(scope)) {
+          // remove exclude node if it's covered by excludedScope
+          iterator.remove();
+        }
+      });
-    return excludedScope;
-    if (mutableExcludedNodes == null || scope == null) {
+    if (CollectionUtils.isEmpty(mutableExcludedNodes) || scope == null) {
-    if (topology == null ||nodes == null || nodes.size() == 0 ||
+    if (topology == null || CollectionUtils.isEmpty(nodes) ||

INS26 INS26 INS40 INS40 INS39 INS74 UPD42 INS43 MOV43 INS27 INS27 INS42 INS32 INS32 MOV27 MOV32 INS36 INS60 INS21 INS21 INS32 MOV27 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS38 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS43 MOV43 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS59 INS8 INS32 INS42 INS86 INS42 INS42 INS42 MOV25 INS42 INS42 INS59 MOV32 INS42 UPD42 UPD42 DEL66 DEL65 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL27 DEL42 DEL33 DEL27 DEL27 DEL27 DEL42 DEL33 DEL41 DEL8 DEL25 DEL42 DEL41 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27