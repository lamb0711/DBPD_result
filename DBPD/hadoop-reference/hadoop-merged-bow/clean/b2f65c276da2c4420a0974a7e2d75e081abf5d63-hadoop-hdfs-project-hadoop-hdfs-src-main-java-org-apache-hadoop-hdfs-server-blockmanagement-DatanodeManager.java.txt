HDFS-5168. Add cross node dependency support to BlockPlacementPolicy.  Contributed by Nikola Vujic


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592179 13f79535-47bb-0310-9956-ffa450edef68

+  /** @return the Host2NodesMap */
+  public Host2NodesMap getHost2DatanodeMap() {
+    return this.host2DatanodeMap;
+  }
+
+   * Resolve a node's dependencies in the network. If the DNS to switch 
+   * mapping fails then this method returns empty list of dependencies 
+   * @param node to get dependencies for
+   * @return List of dependent host names
+   */
+  private List<String> getNetworkDependenciesWithDefault(DatanodeInfo node) {
+    List<String> dependencies;
+    try {
+      dependencies = getNetworkDependencies(node);
+    } catch (UnresolvedTopologyException e) {
+      LOG.error("Unresolved dependency mapping for host " + 
+          node.getHostName() +". Continuing with an empty dependency list");
+      dependencies = Collections.emptyList();
+    }
+    return dependencies;
+  }
+  
+  /**
+   * Resolves a node's dependencies in the network. If the DNS to switch 
+   * mapping fails to get dependencies, then this method throws 
+   * UnresolvedTopologyException. 
+   * @param node to get dependencies for
+   * @return List of dependent host names 
+   * @throws UnresolvedTopologyException if the DNS to switch mapping fails
+   */
+  private List<String> getNetworkDependencies(DatanodeInfo node)
+      throws UnresolvedTopologyException {
+    List<String> dependencies = Collections.emptyList();
+
+    if (dnsToSwitchMapping instanceof DNSToSwitchMappingWithDependency) {
+      //Get dependencies
+      dependencies = 
+          ((DNSToSwitchMappingWithDependency)dnsToSwitchMapping).getDependency(
+              node.getHostName());
+      if(dependencies == null) {
+        LOG.error("The dependency call returned null for host " + 
+            node.getHostName());
+        throw new UnresolvedTopologyException("The dependency call returned " + 
+            "null for host " + node.getHostName());
+      }
+    }
+
+    return dependencies;
+  }
+
+  /**
-          if(this.rejectUnresolvedTopologyDN)
-          {
-            nodeS.setNetworkLocation(resolveNetworkLocation(nodeS));  
+          if(this.rejectUnresolvedTopologyDN) {
+            nodeS.setNetworkLocation(resolveNetworkLocation(nodeS));
+            nodeS.setDependentHostNames(getNetworkDependencies(nodeS));
+            nodeS.setDependentHostNames(
+                getNetworkDependenciesWithDefault(nodeS));
+          nodeDescr.setDependentHostNames(getNetworkDependencies(nodeDescr));
+          nodeDescr.setDependentHostNames(
+              getNetworkDependenciesWithDefault(nodeDescr));

INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS43 INS8 INS65 INS42 INS41 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS60 INS54 INS41 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS42 INS60 INS25 INS41 INS66 INS22 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS74 INS59 INS8 INS12 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS74 INS59 INS62 INS8 INS42 INS52 INS42 INS43 INS43 INS42 INS21 INS44 INS8 INS43 INS43 INS42 INS32 INS42 INS43 INS21 INS25 INS42 INS42 INS7 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS7 INS27 INS8 INS42 INS32 INS42 INS32 INS7 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS36 INS42 INS32 INS32 INS14 INS45 INS32 INS45 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS27 INS43 INS27 INS21 INS21 INS42 INS42 INS43 INS42 INS45 INS32 INS42 INS45 INS45 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42