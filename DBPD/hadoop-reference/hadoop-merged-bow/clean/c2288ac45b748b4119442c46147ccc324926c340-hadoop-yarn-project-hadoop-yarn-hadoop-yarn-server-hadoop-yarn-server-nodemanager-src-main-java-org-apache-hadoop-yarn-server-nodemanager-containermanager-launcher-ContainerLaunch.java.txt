YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)

+import org.apache.hadoop.yarn.server.security.AMSecretKeys;
+  public static final String KEYSTORE_FILE = "yarn_provided.keystore";
+  public static final String TRUSTSTORE_FILE = "yarn_provided.truststore";
+
+      Path nmPrivateKeystorePath = dirsHandler.getLocalPathForWrite(
+          getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR
+              + KEYSTORE_FILE);
+      Path nmPrivateTruststorePath = dirsHandler.getLocalPathForWrite(
+          getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR
+              + TRUSTSTORE_FILE);
+      byte[] keystore = container.getCredentials().getSecretKey(
+          AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE);
+      if (keystore != null) {
+        try (DataOutputStream keystoreOutStream =
+                 lfs.create(nmPrivateKeystorePath,
+                     EnumSet.of(CREATE, OVERWRITE))) {
+          keystoreOutStream.write(keystore);
+          environment.put(ApplicationConstants.KEYSTORE_FILE_LOCATION_ENV_NAME,
+              new Path(containerWorkDir,
+                  ContainerLaunch.KEYSTORE_FILE).toUri().getPath());
+          environment.put(ApplicationConstants.KEYSTORE_PASSWORD_ENV_NAME,
+              new String(container.getCredentials().getSecretKey(
+                  AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE_PASSWORD),
+                  StandardCharsets.UTF_8));
+        }
+      } else {
+        nmPrivateKeystorePath = null;
+      }
+      byte[] truststore = container.getCredentials().getSecretKey(
+          AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE);
+      if (truststore != null) {
+        try (DataOutputStream truststoreOutStream =
+                 lfs.create(nmPrivateTruststorePath,
+                     EnumSet.of(CREATE, OVERWRITE))) {
+          truststoreOutStream.write(truststore);
+          environment.put(
+              ApplicationConstants.TRUSTSTORE_FILE_LOCATION_ENV_NAME,
+              new Path(containerWorkDir,
+                  ContainerLaunch.TRUSTSTORE_FILE).toUri().getPath());
+          environment.put(ApplicationConstants.TRUSTSTORE_PASSWORD_ENV_NAME,
+              new String(container.getCredentials().getSecretKey(
+                  AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE_PASSWORD),
+                  StandardCharsets.UTF_8));
+        }
+      } else {
+        nmPrivateTruststorePath = null;
+      }
+
+          .setNmPrivateKeystorePath(nmPrivateKeystorePath)
+          .setNmPrivateTruststorePath(nmPrivateTruststorePath)

INS26 INS40 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS42 INS42 INS45 INS42 INS42 INS45 INS60 INS60 INS60 INS25 INS60 INS25 INS43 INS59 INS43 INS59 INS5 INS59 INS27 INS8 INS8 INS5 INS59 INS27 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS33 INS54 INS21 INS39 INS85 INS42 INS32 INS42 INS33 INS54 INS21 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS42 INS40 INS58 INS8 INS7 INS32 INS42 INS40 INS58 INS8 INS7 INS42 INS32 INS32 INS40 INS42 INS32 INS40 INS42 INS42 INS42 INS43 INS59 INS21 INS21 INS21 INS42 INS33 INS42 INS42 INS43 INS59 INS21 INS21 INS21 INS42 INS33 MOV32 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS32 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS14 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS32 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS32 INS40 UPD42 UPD42 INS14 INS42 INS42 INS32 INS42 INS40 INS14 INS42 INS42 INS32 INS42 INS40 UPD42 UPD42 INS43 INS42 INS40 INS42 INS42 INS43 INS42 INS40 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42