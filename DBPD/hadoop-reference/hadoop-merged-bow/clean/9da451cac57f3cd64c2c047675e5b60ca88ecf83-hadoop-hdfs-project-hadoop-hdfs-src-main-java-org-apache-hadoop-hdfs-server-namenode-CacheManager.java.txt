HDFS-5430. Support TTL on CacheDirectives. Contributed by Andrew Wang.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546301 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_CACHING_ENABLED_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_CACHING_ENABLED_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES_DEFAULT;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_CACHING_ENABLED_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_CACHING_ENABLED_DEFAULT;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES_DEFAULT;
-import org.apache.hadoop.fs.InvalidRequestException;
+import org.apache.hadoop.fs.InvalidRequestException;
+import org.apache.hadoop.hdfs.protocol.CacheDirective;
+import org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo;
-import org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo;
-import org.apache.hadoop.hdfs.protocol.CacheDirective;
-  private long getNextEntryId() throws IOException {
+  private long getNextDirectiveId() throws IOException {
+   * Calculates the absolute expiry time of the directive from the
+   * {@link CacheDirectiveInfo.Expiration}. This converts a relative Expiration
+   * into an absolute time based on the local clock.
+   * 
+   * @param directive from which to get the expiry time
+   * @param defaultValue to use if Expiration is not set
+   * @return Absolute expiry time in milliseconds since Unix epoch
+   * @throws InvalidRequestException if the Expiration is invalid
+   */
+  private static long validateExpiryTime(CacheDirectiveInfo directive,
+      long defaultValue) throws InvalidRequestException {
+    long expiryTime;
+    CacheDirectiveInfo.Expiration expiration = directive.getExpiration();
+    if (expiration != null) {
+      if (expiration.getMillis() < 0) {
+        throw new InvalidRequestException("Cannot set a negative expiration: "
+            + expiration.getMillis());
+      }
+      // Converts a relative duration into an absolute time based on the local
+      // clock
+      expiryTime = expiration.getAbsoluteMillis();
+    } else {
+      expiryTime = defaultValue;
+    }
+    return expiryTime;
+  }
+
+  /**
+  /**
+   * To be called only from the edit log loading code
+   */
+  CacheDirectiveInfo addDirectiveFromEditLog(CacheDirectiveInfo directive)
+      throws InvalidRequestException {
+    long id = directive.getId();
+    CacheDirective entry =
+        new CacheDirective(
+            directive.getId(),
+            directive.getPath().toUri().getPath(),
+            directive.getReplication(),
+            directive.getExpiration().getAbsoluteMillis());
+    CachePool pool = cachePools.get(directive.getPool());
+    addInternal(entry, pool);
+    if (nextDirectiveId <= id) {
+      nextDirectiveId = id + 1;
+    }
+    return entry.toInfo();
+  }
+
-      long id;
-      if (info.getId() != null) {
-        // We are loading a directive from the edit log.
-        // Use the ID from the edit log.
-        id = info.getId();
-        if (id <= 0) {
-          throw new InvalidRequestException("can't add an ID " +
-              "of " + id + ": it is not positive.");
-        }
-        if (id >= Long.MAX_VALUE) {
-          throw new InvalidRequestException("can't add an ID " +
-              "of " + id + ": it is too big.");
-        }
-        if (nextDirectiveId <= id) {
-          nextDirectiveId = id + 1;
-        }
-      } else {
-        // Add a new directive with the next available ID.
-        id = getNextEntryId();
-      }
-      directive = new CacheDirective(id, path, replication);
+      long expiryTime = validateExpiryTime(info,
+          CacheDirectiveInfo.Expiration.EXPIRY_NEVER);
+      // All validation passed
+      // Add a new entry with the next available ID.
+      long id = getNextDirectiveId();
+      directive = new CacheDirective(id, path, replication, expiryTime);
+
-      if (info.getReplication() != null) {
-        replication = validateReplication(info, replication);
-      }
+      replication = validateReplication(info, replication);
+
+      long expiryTime = prevEntry.getExpiryTime();
+      expiryTime = validateExpiryTime(info, expiryTime);
+
-          new CacheDirective(id, path, replication);
+          new CacheDirective(id, path, replication, expiryTime);
+      out.writeLong(directive.getExpiryTime());
+      long expiryTime = in.readLong();
-          new CacheDirective(directiveId, path, replication);
+          new CacheDirective(directiveId, path, replication, expiryTime);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS31 INS31 UPD42 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS43 INS42 INS44 MOV43 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS25 INS41 INS65 INS42 INS43 INS42 INS60 INS60 INS60 INS21 MOV25 INS41 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS66 INS42 INS39 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS40 INS42 INS40 INS42 INS32 INS42 INS33 INS25 INS21 INS21 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS60 INS60 MOV21 INS60 INS21 INS21 INS60 INS42 INS42 INS27 INS8 INS7 INS7 INS42 INS42 MOV43 INS32 INS32 INS32 INS32 INS42 INS42 INS32 MOV39 INS59 INS39 INS59 INS39 INS59 INS7 MOV43 INS59 INS32 INS39 INS59 MOV43 INS32 INS34 INS53 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS40 UPD42 MOV42 MOV43 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS43 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 MOV43 INS27 INS42 INS42 INS42 MOV42 INS45 INS32 INS42 INS42 DEL59 DEL60 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL34 DEL27 DEL45 DEL45 DEL27 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL40 DEL27 DEL45 DEL45 DEL27 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL32 DEL33 DEL27 DEL8 DEL25 DEL42 DEL14 DEL59