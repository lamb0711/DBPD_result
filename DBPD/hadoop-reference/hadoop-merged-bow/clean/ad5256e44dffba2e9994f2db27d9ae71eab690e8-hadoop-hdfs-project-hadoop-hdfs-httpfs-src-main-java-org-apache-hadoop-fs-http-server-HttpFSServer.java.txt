HDFS-14063. Support noredirect param for CREATE/APPEND/OPEN/GETFILECHECKSUM in HttpFS. Contributed by Íñigo Goiri.

+import org.apache.hadoop.fs.http.server.HttpFSParametersProvider.NoRedirectParam;
+import org.apache.hadoop.hdfs.web.JsonUtil;
+   * @param uriInfo uri info of the request.
-  public Response getRoot(@QueryParam(OperationParam.NAME) OperationParam op,
+  public Response getRoot(@Context UriInfo uriInfo,
+                          @QueryParam(OperationParam.NAME) OperationParam op,
-    return get("", op, params, request);
+    return get("", uriInfo, op, params, request);
+   * @param uriInfo uri info of the request.
+                      @Context UriInfo uriInfo,
-      //Invoking the command directly using an unmanaged FileSystem that is
-      // released by the FileSystemReleaseFilter
-      final FSOperations.FSOpen command = new FSOperations.FSOpen(path);
-      final FileSystem fs = createFileSystem(user);
-      InputStream is = null;
-      UserGroupInformation ugi = UserGroupInformation
-          .createProxyUser(user.getShortUserName(),
-              UserGroupInformation.getLoginUser());
-      try {
-        is = ugi.doAs(new PrivilegedExceptionAction<InputStream>() {
-          @Override
-          public InputStream run() throws Exception {
-            return command.execute(fs);
-          }
-        });
-      } catch (InterruptedException ie) {
-        LOG.info("Open interrupted.", ie);
-        Thread.currentThread().interrupt();
+      Boolean noRedirect = params.get(
+          NoRedirectParam.NAME, NoRedirectParam.class);
+      if (noRedirect) {
+        URI redirectURL = createOpenRedirectionURL(uriInfo);
+        final String js = JsonUtil.toJsonString("Location", redirectURL);
+        response = Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+      } else {
+        //Invoking the command directly using an unmanaged FileSystem that is
+        // released by the FileSystemReleaseFilter
+        final FSOperations.FSOpen command = new FSOperations.FSOpen(path);
+        final FileSystem fs = createFileSystem(user);
+        InputStream is = null;
+        UserGroupInformation ugi = UserGroupInformation
+            .createProxyUser(user.getShortUserName(),
+                UserGroupInformation.getLoginUser());
+        try {
+          is = ugi.doAs(new PrivilegedExceptionAction<InputStream>() {
+            @Override
+            public InputStream run() throws Exception {
+              return command.execute(fs);
+            }
+          });
+        } catch (InterruptedException ie) {
+          LOG.info("Open interrupted.", ie);
+          Thread.currentThread().interrupt();
+        }
+        Long offset = params.get(OffsetParam.NAME, OffsetParam.class);
+        Long len = params.get(LenParam.NAME, LenParam.class);
+        AUDIT_LOG.info("[{}] offset [{}] len [{}]",
+            new Object[] { path, offset, len });
+        InputStreamEntity entity = new InputStreamEntity(is, offset, len);
+        response = Response.ok(entity).type(MediaType.APPLICATION_OCTET_STREAM)
+            .build();
-      Long offset = params.get(OffsetParam.NAME, OffsetParam.class);
-      Long len = params.get(LenParam.NAME, LenParam.class);
-      AUDIT_LOG.info("[{}] offset [{}] len [{}]",
-          new Object[] { path, offset, len });
-      InputStreamEntity entity = new InputStreamEntity(is, offset, len);
-      response =
-          Response.ok(entity).type(MediaType.APPLICATION_OCTET_STREAM).build();
-      Map json = fsExecute(user, command);
+
+      Boolean noRedirect = params.get(
+          NoRedirectParam.NAME, NoRedirectParam.class);
-      response = Response.ok(json).type(MediaType.APPLICATION_JSON).build();
+      if (noRedirect) {
+        URI redirectURL = createOpenRedirectionURL(uriInfo);
+        final String js = JsonUtil.toJsonString("Location", redirectURL);
+        response = Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+      } else {
+        Map json = fsExecute(user, command);
+        response = Response.ok(json).type(MediaType.APPLICATION_JSON).build();
+      }
+  /**
+   * Create an open redirection URL from a request. It points to the same
+   * HttpFS endpoint but removes the "redirect" parameter.
+   * @param uriInfo uri info of the request.
+   * @return URL for the redirected location.
+   */
+  private URI createOpenRedirectionURL(UriInfo uriInfo) {
+    UriBuilder uriBuilder = uriInfo.getRequestUriBuilder();
+    uriBuilder.replaceQueryParam(NoRedirectParam.NAME, (Object[])null);
+    return uriBuilder.build((Object[])null);
+  }
-          response = Response.temporaryRedirect(
-            createUploadRedirectionURL(uriInfo,
-              HttpFSFileSystem.Operation.APPEND)).build();
+          URI redirectURL = createUploadRedirectionURL(
+              uriInfo, HttpFSFileSystem.Operation.APPEND);
+          Boolean noRedirect = params.get(
+              NoRedirectParam.NAME, NoRedirectParam.class);
+          if (noRedirect) {
+            final String js = JsonUtil.toJsonString("Location", redirectURL);
+            response = Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+          } else {
+            response = Response.temporaryRedirect(redirectURL).build();
+          }
-          response = Response.temporaryRedirect(
-            createUploadRedirectionURL(uriInfo,
-              HttpFSFileSystem.Operation.CREATE)).build();
+          URI redirectURL = createUploadRedirectionURL(
+              uriInfo, HttpFSFileSystem.Operation.CREATE);
+          Boolean noRedirect = params.get(
+              NoRedirectParam.NAME, NoRedirectParam.class);
+          if (noRedirect) {
+            final String js = JsonUtil.toJsonString("Location", redirectURL);
+            response = Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+          } else {
+            response = Response.temporaryRedirect(redirectURL).build();
+          }
-          response = Response.status(Response.Status.CREATED).build();
+          final String js = JsonUtil.toJsonString(
+              "Location", uriInfo.getAbsolutePath());
+          response = Response.created(uriInfo.getAbsolutePath())
+              .type(MediaType.APPLICATION_JSON).entity(js).build();

INS26 INS26 INS40 INS40 INS31 INS44 INS44 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS78 INS43 INS42 INS65 INS78 INS43 INS42 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS21 INS41 INS42 INS66 INS42 INS42 INS42 INS66 INS42 INS42 INS8 INS8 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS32 INS32 INS42 INS60 INS25 INS10 MOV60 INS60 MOV21 INS25 INS10 INS42 INS42 INS32 INS42 INS42 INS40 INS11 INS42 INS42 INS11 INS43 INS59 INS42 INS8 MOV8 INS43 INS59 INS42 INS8 MOV8 INS42 INS42 INS5 INS33 INS5 INS33 INS8 INS8 INS42 INS42 INS32 INS60 INS60 INS21 INS42 INS42 INS32 INS60 INS60 INS21 INS43 INS85 INS43 INS85 INS60 INS60 INS25 INS60 INS60 INS25 INS60 INS42 INS42 INS40 INS57 INS43 INS59 INS83 INS43 INS59 INS7 INS42 INS42 INS40 INS57 INS43 INS59 INS83 INS43 INS59 INS7 INS42 INS42 INS43 INS59 INS43 INS59 INS42 INS8 MOV8 INS43 INS59 INS43 INS59 INS42 INS8 MOV8 INS83 INS43 INS59 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS60 INS21 INS42 INS42 MOV32 INS42 INS42 INS32 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS40 INS57 INS83 INS43 INS59 INS7 INS42 INS42 INS40 INS57 INS83 INS43 INS59 INS7 INS42 INS42 INS45 INS32 INS32 INS32 INS42 INS40 INS32 INS42 INS40 INS43 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 UPD40 INS32 INS42 INS40 INS42 INS32 INS42 INS40 INS42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL10 DEL10