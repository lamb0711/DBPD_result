Merge trunk into QJM branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1380990 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.InetAddress;
+import java.util.Set;
-import org.apache.hadoop.yarn.server.security.ContainerTokenSecretManager;
-  private InetAddress resolvedAddress = null;
-  private ContainerTokenSecretManager containerTokenSecretManager;
-      NodeManagerMetrics metrics, ContainerTokenSecretManager 
-      containerTokenSecretManager, ApplicationACLsManager aclsManager,
+      NodeManagerMetrics metrics, ApplicationACLsManager aclsManager,
-    this.containerTokenSecretManager = containerTokenSecretManager;
-            this.containerTokenSecretManager,
+            this.context.getContainerTokenSecretManager(),
-  /**
-   * Authorize the request.
-   * 
-   * @param containerID
-   *          of the container
-   * @param launchContext
-   *          passed if verifying the startContainer, null otherwise.
-   * @throws YarnRemoteException
-   */
-  private void authorizeRequest(ContainerId containerID,
-      ContainerLaunchContext launchContext) throws YarnRemoteException {
-
-    if (!UserGroupInformation.isSecurityEnabled()) {
-      return;
-    }
-
-    String containerIDStr = containerID.toString();
-
+  // Get the remoteUGI corresponding to the api call.
+  private UserGroupInformation getRemoteUgi(String containerIDStr)
+      throws YarnRemoteException {
+    return remoteUgi;
+  }
+
+  // Obtain the needed ContainerTokenIdentifier from the remote-UGI. RPC layer
+  // currently sets only the required id, but iterate through anyways just to
+  // be sure.
+  private ContainerTokenIdentifier selectContainerTokenIdentifier(
+      UserGroupInformation remoteUgi) {
+    Set<TokenIdentifier> tokenIdentifiers = remoteUgi.getTokenIdentifiers();
+    ContainerTokenIdentifier resultId = null;
+    for (TokenIdentifier id : tokenIdentifiers) {
+      if (id instanceof ContainerTokenIdentifier) {
+        resultId = (ContainerTokenIdentifier) id;
+        break;
+      }
+    }
+    return resultId;
+  }
+
+  /**
+   * Authorize the request.
+   * 
+   * @param containerIDStr
+   *          of the container
+   * @param launchContext
+   *          passed if verifying the startContainer, null otherwise.
+   * @param remoteUgi
+   *          ugi corresponding to the remote end making the api-call
+   * @throws YarnRemoteException
+   */
+  private void authorizeRequest(String containerIDStr,
+      ContainerLaunchContext launchContext, UserGroupInformation remoteUgi)
+      throws YarnRemoteException {
+
+    if (!UserGroupInformation.isSecurityEnabled()) {
+      return;
+    }
-    StringBuilder messageBuilder = new StringBuilder(
-        "Unauthorized request to start container. ");
+    StringBuilder messageBuilder =
+        new StringBuilder("Unauthorized request to start container. ");
-    }
-
-    if (launchContext != null) {
-
-      // Verify other things for startContainer() request.
+    } else if (launchContext != null) {
+      // Verify other things also for startContainer() request.
-      LOG.debug("Number of TokenIdentifiers in the UGI from RPC: "
-          + remoteUgi.getTokenIdentifiers().size());
+        LOG.debug("Number of TokenIdentifiers in the UGI from RPC: "
+            + remoteUgi.getTokenIdentifiers().size());
-      // We must and should get only one TokenIdentifier from the RPC.
-      ContainerTokenIdentifier tokenId = (ContainerTokenIdentifier) remoteUgi
-          .getTokenIdentifiers().iterator().next();
+
+
+      // Get the tokenId from the remote user ugi
+      ContainerTokenIdentifier tokenId =
+          selectContainerTokenIdentifier(remoteUgi);
+
+        // Is the container being relaunched? Or RPC layer let startCall with 
+    	//  tokens generated off old-secret through 
+        if (!this.context.getContainerTokenSecretManager()
+          .isValidStartContainerRequest(tokenId)) {
+          unauthorized = true;
+          messageBuilder.append("\n Attempt to relaunch the same " +
+              "container with id " + containerIDStr + ".");
+        }
+
-
+  
-    authorizeRequest(containerID, launchContext);
+    String containerIDStr = containerID.toString();
-    LOG.info("Start request for " + launchContext.getContainerId()
-        + " by user " + launchContext.getUser());
+    UserGroupInformation remoteUgi = getRemoteUgi(containerIDStr);
+    authorizeRequest(containerIDStr, launchContext, remoteUgi);
+
+    LOG.info("Start request for " + containerIDStr + " by user "
+        + launchContext.getUser());
-      throw RPCUtil.getRemoteException("Container " + containerID
+      throw RPCUtil.getRemoteException("Container " + containerIDStr
-            launchContext.getUser(), applicationID, credentials, context);
+          launchContext.getUser(), applicationID, credentials, context);
+    if (UserGroupInformation.isSecurityEnabled()) {
+      ContainerTokenIdentifier tokenId =
+          selectContainerTokenIdentifier(remoteUgi);
+      this.context.getContainerTokenSecretManager().startContainerSuccessful(
+        tokenId);
+    }
+    String containerIDStr = containerID.toString();
+
-    authorizeRequest(containerID, null);
+
+    UserGroupInformation remoteUgi = getRemoteUgi(containerIDStr);
+    authorizeRequest(containerIDStr, null, remoteUgi);
-    // TODO: Only the container's owner can get containers' status today.
-    authorizeRequest(containerID, null);
+    String containerIDStr = containerID.toString();
-    LOG.info("Getting container-status for " + containerID);
+    // TODO: Only the container's owner can get containers' status today.
+
+    UserGroupInformation remoteUgi = getRemoteUgi(containerIDStr);
+    authorizeRequest(containerIDStr, null, remoteUgi);
+
+    LOG.info("Getting container-status for " + containerIDStr);
-    throw RPCUtil.getRemoteException("Container " + containerID
+    throw RPCUtil.getRemoteException("Container " + containerIDStr

MOV26 UPD40 INS31 INS31 INS83 INS43 INS42 INS44 INS43 INS8 INS83 MOV43 INS42 INS44 INS8 INS44 UPD42 MOV42 INS43 INS42 INS42 MOV60 MOV54 INS41 INS43 INS42 INS60 INS60 INS70 INS41 INS65 UPD43 UPD42 INS43 INS42 INS60 INS60 INS25 MOV60 INS60 INS60 INS60 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS44 INS42 INS8 INS42 UPD42 INS42 INS66 UPD42 INS42 MOV25 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS43 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 INS33 INS43 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS60 INS21 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS42 INS32 INS42 INS42 INS42 INS62 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV22 INS42 INS42 INS43 INS21 INS10 INS42 INS42 INS32 INS32 INS42 INS42 UPD42 INS42 INS7 INS32 INS25 UPD42 INS42 INS42 INS22 INS42 INS42 INS11 UPD42 MOV42 UPD42 MOV42 INS38 INS8 INS52 INS42 INS43 INS42 INS32 INS21 INS21 INS42 INS32 INS42 INS42 INS7 INS32 INS22 INS42 INS42 INS9 INS42 INS42 INS27 INS52 INS42 INS27 INS42 INS45 INS45 INS45 DEL40 DEL26 DEL83 DEL43 DEL42 DEL33 DEL59 DEL23 DEL83 DEL43 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL32 DEL32 DEL11 DEL42 DEL42 DEL32