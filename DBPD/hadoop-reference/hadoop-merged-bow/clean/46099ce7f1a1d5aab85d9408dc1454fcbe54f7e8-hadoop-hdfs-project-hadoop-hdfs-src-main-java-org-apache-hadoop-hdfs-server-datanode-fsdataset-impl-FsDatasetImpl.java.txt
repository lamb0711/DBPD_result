HDFS-4988. Datanode must support all the volumes as individual storages.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1526969 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.hdfs.server.common.Storage;
-  final ReplicaMap volumeMap;
+  // TODO HDFS-2832: Consider removing duplicated block info from these
+  //                 two maps. This might require some refactoring
+  //                 rewrite of FsDatasetImpl.
+  final ReplicaMap volumeMap;
+  final Map<FsVolumeImpl, ReplicaMap> perVolumeReplicaMap;
+
+
-      final File dir = storage.getStorageDir(idx).getCurrentDir();
+      Storage.StorageDirectory sd = storage.getStorageDir(idx);
+      final File dir = sd.getCurrentDir();
-      volArray.add(new FsVolumeImpl(this, storage.getStorageID(), dir, conf,
+      volArray.add(new FsVolumeImpl(this, sd.getStorageUuid(), dir, conf,
+    perVolumeReplicaMap = new HashMap<FsVolumeImpl, ReplicaMap>();
-    volumes.getVolumeMap(volumeMap);
+    volumes.initializeReplicaMaps(perVolumeReplicaMap, volumeMap, this);
-    registerMBean(storage.getStorageID());
+    registerMBean(datanode.getDatanodeUuid());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("b=" + b + ", volumeMap=" + volumeMap);
-      }
+    perVolumeReplicaMap.get(v).add(bpid, newReplicaInfo);
+    perVolumeReplicaMap.get(v).add(b.getBlockPoolId(), newReplicaInfo);
+    perVolumeReplicaMap.get(v).add(b.getBlockPoolId(), rbw);
+    perVolumeReplicaMap.get(v).add(b.getBlockPoolId(), newReplicaInfo);
+    perVolumeReplicaMap.get(newReplicaInfo.getVolume()).add(bpid, newReplicaInfo);
+      perVolumeReplicaMap.get((FsVolumeImpl) replicaInfo.getVolume())
+          .remove(b.getBlockPoolId(), b.getLocalBlock());
-  /**
-   * Generates a block report from the in-memory block map.
-   */
-  @Override // FsDatasetSpi
-  public BlockListAsLongs getBlockReport(String bpid) {
-    int size =  volumeMap.size(bpid);
+  private BlockListAsLongs getBlockReportWithReplicaMap(
+      String bpid, ReplicaMap rMap) {
+    int size =  rMap.size(bpid);
-      for (ReplicaInfo b : volumeMap.replicas(bpid)) {
+      for (ReplicaInfo b : rMap.replicas(bpid)) {
+   * Generates a block report from the in-memory block map.
+   */
+  @Override // FsDatasetSpi
+  public BlockListAsLongs getBlockReport(String bpid) {
+    return getBlockReportWithReplicaMap(bpid, volumeMap);
+  }
+
+  @Override
+  public Map<String, BlockListAsLongs> getBlockReports(String bpid) {
+    Map<String, BlockListAsLongs> blockReportMap =
+        new HashMap<String, BlockListAsLongs>();
+
+    for (FsVolumeImpl v : getVolumes()) {
+      ReplicaMap rMap = perVolumeReplicaMap.get(v);
+      BlockListAsLongs blockList = getBlockReportWithReplicaMap(bpid, rMap);
+      blockReportMap.put(v.getStorageID(), blockList);
+    }
+
+    return blockReportMap;
+  }
+
+  /**
+        perVolumeReplicaMap.get(v).remove(bpid, invalidBlks[i]);
+              perVolumeReplicaMap.get(fv).remove(bpid, b.getBlockId());
-   *        "hadoop:service=DataNode,name=FSDatasetState-<storageid>"
+   *        "hadoop:service=DataNode,name=FSDatasetState-<datanodeUuid>"
-  void registerMBean(final String storageId) {
+  void registerMBean(final String datanodeUuid) {
-    StandardMBean bean;
-    String storageName;
-    if (storageId == null || storageId.equals("")) {// Temp fix for the uninitialized storage
-      storageName = "UndefinedStorageId" + DFSUtil.getRandom().nextInt();
-    } else {
-      storageName = storageId;
-    }
-      bean = new StandardMBean(this,FSDatasetMBean.class);
-      mbeanName = MBeans.register("DataNode", "FSDatasetState-" + storageName, bean);
+      StandardMBean bean = new StandardMBean(this,FSDatasetMBean.class);
+      mbeanName = MBeans.register("DataNode", "FSDatasetState-" + datanodeUuid, bean);
+          perVolumeReplicaMap.get((FsVolumeImpl) memBlockInfo.getVolume())
+              .remove(bpid, blockId);
+        perVolumeReplicaMap.get((FsVolumeImpl) memBlockInfo.getVolume()).
+            remove(bpid, diskBlockInfo);
-    volumes.getVolumeMap(bpid, volumeMap);
+    volumes.getAllVolumesMap(bpid, volumeMap);
+
+    // TODO: Avoid the double scan.
+    for (FsVolumeImpl v : getVolumes()) {
+      ReplicaMap rMap = perVolumeReplicaMap.get(v);
+      rMap.initBlockPool(bpid);
+      volumes.getVolumeMap(bpid, v, rMap);
+    }
-  @Override
-  public String[] getBlockPoolList() {
-    return volumeMap.getBlockPoolList();
-  }
-  

MOV26 MOV23 MOV31 UPD40 INS23 INS31 INS83 INS74 INS59 UPD83 UPD42 INS44 MOV29 MOV78 INS43 UPD42 INS44 MOV78 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS43 INS42 INS42 INS43 INS42 INS43 INS43 INS43 INS43 INS42 INS60 INS70 INS41 UPD42 INS70 INS42 INS42 INS42 INS7 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS42 UPD66 INS44 INS32 INS8 INS60 INS42 INS14 INS42 UPD42 INS52 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS21 UPD42 UPD42 INS42 INS43 MOV43 INS43 INS42 INS14 INS43 INS42 INS42 INS60 INS60 INS21 INS60 UPD42 INS43 INS42 INS42 INS60 INS21 INS21 INS43 INS83 MOV43 INS59 INS74 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 INS42 INS42 INS74 INS42 INS43 INS59 INS43 INS59 INS32 MOV43 INS59 INS42 INS43 INS59 INS32 INS32 INS40 UPD42 MOV32 INS42 INS32 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS32 INS32 UPD42 INS43 MOV43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS21 INS42 MOV14 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 UPD42 INS43 INS32 INS32 INS42 INS42 INS2 UPD42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS21 INS43 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL27 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21