YARN-9525. IFile format is not working against s3a remote folder. Contributed by Adam Antal

+import org.apache.commons.lang3.tuple.Pair;
+  private static final int LOG_ROLL_OVER_MAX_FILE_SIZE_GB_DEFAULT = 10;
+          Pair<Path, Boolean> initializationResult = null;
+          boolean createdNew;
+
-            aggregatedLogFile = initializeWriterInRolling(
+            // In rolling log aggregation we need special initialization
+            // done in initializeWriterInRolling.
+            initializationResult = initializeWriterInRolling(
+            aggregatedLogFile = initializationResult.getLeft();
+            createdNew = initializationResult.getRight();
+            createdNew = true;
-          long aggregatedLogFileLength = fc.getFileStatus(
-              aggregatedLogFile).getLen();
-          // append a simple character("\n") to move the writer cursor, so
-          // we could get the correct position when we call
-          // fsOutputStream.getStartPos()
-          final byte[] dummyBytes = "\n".getBytes(Charset.forName("UTF-8"));
-          fsDataOStream.write(dummyBytes);
-          fsDataOStream.flush();
-
-          if (fsDataOStream.getPos() >= (aggregatedLogFileLength
-              + dummyBytes.length)) {
+          // If we have created a new file, we know that the offset is zero.
+          // Otherwise we should get this information through getFileStatus.
+          if (createdNew) {
-            currentOffSet = aggregatedLogFileLength;
+            long aggregatedLogFileLength = fc.getFileStatus(
+                aggregatedLogFile).getLen();
+            // append a simple character("\n") to move the writer cursor, so
+            // we could get the correct position when we call
+            // fsOutputStream.getStartPos()
+            final byte[] dummyBytes = "\n".getBytes(Charset.forName("UTF-8"));
+            fsDataOStream.write(dummyBytes);
+            fsDataOStream.flush();
+
+            if (fsDataOStream.getPos() < (aggregatedLogFileLength
+                + dummyBytes.length)) {
+              currentOffSet = fc.getFileStatus(
+                      aggregatedLogFile).getLen();
+            } else {
+              currentOffSet = 0;
+            }
-  private Path initializeWriterInRolling(final Path remoteLogFile,
-      final ApplicationId appId, final String nodeId) throws Exception {
+  /**
+   * Initializes the write for the log aggregation controller in the
+   * rolling case. It sets up / modifies checksum and meta files if needed.
+   *
+   * @param remoteLogFile the Path of the remote log file
+   * @param appId the application id
+   * @param nodeId the node id
+   * @return a Pair of Path and Boolean - the Path is path of the
+   *         aggregated log file, while the Boolean is whether a new
+   *         file was created or not
+   * @throws Exception
+   */
+  private Pair<Path, Boolean> initializeWriterInRolling(
+      final Path remoteLogFile, final ApplicationId appId,
+      final String nodeId) throws Exception {
+    boolean createdNew = false;
+      createdNew = true;
-      final long currentAggregatedLogFileLength = fc
-          .getFileStatus(aggregatedLogFile).getLen();
+      long currentAggregatedLogFileLength;
+      if (createdNew) {
+        currentAggregatedLogFileLength = 0;
+      } else {
+        currentAggregatedLogFileLength = fc
+            .getFileStatus(aggregatedLogFile).getLen();
+      }
-    return aggregatedLogFile;
+
+    return Pair.of(aggregatedLogFile, createdNew);
-  // TODO: fix me if the remote file system does not support append operation.
-          LOG_ROLL_OVER_MAX_FILE_SIZE_GB, 10);
+          LOG_ROLL_OVER_MAX_FILE_SIZE_GB,
+          LOG_ROLL_OVER_MAX_FILE_SIZE_GB_DEFAULT);

INS26 INS40 INS23 INS83 INS83 INS83 INS39 INS59 INS29 INS74 INS42 INS34 INS65 INS65 INS65 INS65 INS65 INS65 INS43 MOV43 INS43 INS60 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS39 INS59 INS32 INS42 INS9 INS21 INS25 INS42 INS42 INS42 INS42 INS7 INS42 INS8 INS8 INS42 INS9 INS21 INS21 INS7 INS7 INS42 INS42 INS34 INS42 MOV32 INS60 INS60 INS25 INS74 INS59 INS39 INS59 INS42 INS8 INS8 INS43 INS43 INS43 INS42 INS33 INS42 INS21 INS21 INS21 INS21 MOV60 MOV60 MOV21 MOV21 MOV25 MOV8 INS42 INS42 INS42 INS7 INS7 INS7 INS7 UPD27 UPD42 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 DEL42 DEL83 DEL42 DEL34