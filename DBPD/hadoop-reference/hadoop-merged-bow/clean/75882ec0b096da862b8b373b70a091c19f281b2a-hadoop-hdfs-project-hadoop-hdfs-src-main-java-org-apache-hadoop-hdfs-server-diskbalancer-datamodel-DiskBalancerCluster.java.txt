HDFS-9545: DiskBalancer: Add Plan Command. Contributed by Anu Engineer.

-import java.nio.file.Files;
-import java.nio.file.Paths;
+import java.util.Locale;
+import java.util.Map;
+import java.util.HashMap;
+  @JsonIgnore
+  private final Map<String, DiskBalancerDataNode> ipList;
+  @JsonIgnore
+  private final Map<String, DiskBalancerDataNode> hostNames;
+  @JsonIgnore
+  private final Map<String, DiskBalancerDataNode>  hostUUID;
+
-
+    ipList = new HashMap<>();
+    hostNames = new HashMap<>();
+    hostUUID = new HashMap<>();
+    this();
-    exclusionList = new TreeSet<>();
-    inclusionList = new TreeSet<>();
-    LOG.info("Using connector : " + clusterConnector.getConnectorInfo());
+    LOG.debug("Using connector : {}" , clusterConnector.getConnectorInfo());
+    for(DiskBalancerDataNode node : nodes) {
+
+      if(node.getDataNodeIP()!= null && !node.getDataNodeIP().isEmpty()) {
+        ipList.put(node.getDataNodeIP(), node);
+      }
+
+      if(node.getDataNodeName() != null && !node.getDataNodeName().isEmpty()) {
+        // TODO : should we support Internationalized Domain Names ?
+        // Disk balancer assumes that host names are ascii. If not
+        // end user can always balance the node via IP address or DataNode UUID.
+        hostNames.put(node.getDataNodeName().toLowerCase(Locale.US), node);
+      }
+
+      if(node.getDataNodeUUID() != null && !node.getDataNodeUUID().isEmpty()) {
+        hostUUID.put(node.getDataNodeUUID(), node);
+      }
+    }
-   * Creates an Output directory for the cluster output.
-   *
-   * @throws IOException - On failure to create an new directory
-   */
-  public void createOutPutDirectory() throws IOException {
-    if (Files.exists(Paths.get(this.getOutput()))) {
-      LOG.error("An output directory already exists at this location. Path : " +
-          this.getOutput());
-      throw new IOException(
-          "An output directory already exists at this location. Path : " +
-              this.getOutput());
-    }
-
-    File f = new File(this.getOutput());
-    if (!f.mkdirs()) {
-      LOG.error("Unable to create the output directory. Path : " + this
-          .getOutput());
-      throw new IOException(
-          "Unable to create the output directory. Path : " + this.getOutput());
-    }
-    LOG.info("Output directory created. Path : " + this.getOutput());
-  }
-
-  /**
-  public List<NodePlan> computePlan(float thresholdPercent) {
+  public List<NodePlan> computePlan(double thresholdPercent) {
-    for(DiskBalancerDataNode node : this.getNodes()) {
-      if(node.getDataNodeUUID().equals(uuid)) {
-        return node;
-      }
-    }
-    return null;
+    return hostUUID.get(uuid);
+  }
+
+  /**
+   * Returns a node by IP Address.
+   * @param ipAddresss - IP address String.
+   * @return DiskBalancerDataNode.
+   */
+  public DiskBalancerDataNode getNodeByIPAddress(String ipAddresss) {
+    return ipList.get(ipAddresss);
+  }
+
+  /**
+   * Returns a node by hostName.
+   * @param hostName - HostName.
+   * @return DiskBalancerDataNode.
+   */
+  public DiskBalancerDataNode getNodeByName(String hostName) {
+    return hostNames.get(hostName);

MOV26 MOV26 INS26 UPD40 UPD40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS78 INS83 INS83 INS74 INS59 INS78 INS83 INS83 INS74 INS59 INS78 INS83 INS83 INS74 INS59 MOV29 MOV83 MOV39 UPD42 MOV42 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS43 INS43 INS42 INS21 INS21 INS21 INS17 MOV21 MOV21 MOV21 INS70 UPD39 INS41 INS65 INS65 INS65 UPD42 MOV42 INS43 INS42 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 MOV44 INS42 INS8 INS32 INS66 INS42 INS66 INS66 INS42 INS32 INS66 INS42 INS66 INS66 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS14 UPD42 INS45 MOV32 INS25 INS25 INS25 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS74 INS74 INS74 INS27 INS8 INS27 INS8 INS27 INS8 INS43 INS43 INS43 INS27 INS38 MOV21 INS27 INS38 INS21 INS27 INS38 MOV21 INS42 INS42 INS42 INS32 INS33 INS32 MOV32 INS33 INS32 INS32 INS32 INS33 MOV32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 UPD42 INS32 INS42 INS42 UPD42 INS32 INS42 INS42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS40 INS42 UPD42 MOV42 INS42 INS42 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL45 DEL27 DEL45 DEL52 DEL32 DEL27 DEL52 DEL42 DEL45 DEL52 DEL32 DEL27 DEL83 DEL39 DEL42 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL52 DEL32 DEL32 DEL32 DEL42 DEL43 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL52 DEL32 DEL14 DEL59 DEL60 DEL32 DEL38 DEL43 DEL45 DEL52 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL45 DEL52 DEL32 DEL27 DEL32 DEL21 DEL8 DEL31 DEL52 DEL32 DEL42 DEL41 DEL8 DEL25 DEL8 DEL70 DEL33 DEL41