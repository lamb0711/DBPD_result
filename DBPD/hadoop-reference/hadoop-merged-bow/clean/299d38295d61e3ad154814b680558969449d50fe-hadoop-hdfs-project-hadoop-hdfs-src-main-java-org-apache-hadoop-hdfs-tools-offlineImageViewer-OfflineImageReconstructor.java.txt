HDFS-11467. Support ErasureCoding section in OIV XML/ReverseXML. Contributed by Huafeng Wang.

+import com.google.common.base.Preconditions;
-import java.io.OutputStream;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.ECSchemaProto;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.ErasureCodingPolicyProto;
+import org.apache.hadoop.hdfs.server.namenode.FsImageProto.ErasureCodingSection;
+    this.sections.put(ErasureCodingSectionProcessor.NAME,
+        new ErasureCodingSectionProcessor());
+  private class ErasureCodingSectionProcessor implements SectionProcessor {
+    static final String NAME = "ErasureCodingSection";
+
+    @Override
+    public void process() throws IOException {
+      Node node = new Node();
+      loadNodeChildren(node, "ErasureCodingSection fields");
+      ErasureCodingSection.Builder builder = ErasureCodingSection.newBuilder();
+      while (true) {
+        ErasureCodingPolicyProto.Builder policyBuilder =
+            ErasureCodingPolicyProto.newBuilder();
+        Node ec = node.removeChild(ERASURE_CODING_SECTION_POLICY);
+        if (ec == null) {
+          break;
+        }
+        int policyId = ec.removeChildInt(ERASURE_CODING_SECTION_POLICY_ID);
+        policyBuilder.setId(policyId);
+        String name = ec.removeChildStr(ERASURE_CODING_SECTION_POLICY_NAME);
+        policyBuilder.setName(name);
+        Integer cellSize =
+            ec.removeChildInt(ERASURE_CODING_SECTION_POLICY_CELL_SIZE);
+        policyBuilder.setCellSize(cellSize);
+        String policyState =
+            ec.removeChildStr(ERASURE_CODING_SECTION_POLICY_STATE);
+        if (policyState != null) {
+          policyBuilder.setState(
+              HdfsProtos.ErasureCodingPolicyState.valueOf(policyState));
+        }
+
+        Node schema = ec.removeChild(ERASURE_CODING_SECTION_SCHEMA);
+        Preconditions.checkNotNull(schema);
+
+        ECSchemaProto.Builder schemaBuilder = ECSchemaProto.newBuilder();
+        String codecName =
+            schema.removeChildStr(ERASURE_CODING_SECTION_SCHEMA_CODEC_NAME);
+        schemaBuilder.setCodecName(codecName);
+        Integer dataUnits =
+            schema.removeChildInt(ERASURE_CODING_SECTION_SCHEMA_DATA_UNITS);
+        schemaBuilder.setDataUnits(dataUnits);
+        Integer parityUnits = schema.
+            removeChildInt(ERASURE_CODING_SECTION_SCHEMA_PARITY_UNITS);
+        schemaBuilder.setParityUnits(parityUnits);
+        Node options = schema
+            .removeChild(ERASURE_CODING_SECTION_SCHEMA_OPTIONS);
+        if (options != null) {
+          while (true) {
+            Node option =
+                options.removeChild(ERASURE_CODING_SECTION_SCHEMA_OPTION);
+            if (option == null) {
+              break;
+            }
+            String key = option
+                .removeChildStr(ERASURE_CODING_SECTION_SCHEMA_OPTION_KEY);
+            String value = option
+                .removeChildStr(ERASURE_CODING_SECTION_SCHEMA_OPTION_VALUE);
+            schemaBuilder.addOptions(HdfsProtos.ECSchemaOptionEntryProto
+                .newBuilder().setKey(key).setValue(value).build());
+          }
+        }
+        policyBuilder.setSchema(schemaBuilder.build());
+
+        builder.addPolicies(policyBuilder.build());
+      }
+      ErasureCodingSection section = builder.build();
+      section.writeDelimitedTo(out);
+      node.verifyNoRemainingKeys("ErasureCodingSection");
+      recordSectionLength(SectionName.ERASURE_CODING.name());
+    }
+  }
+
-      processFileXml(node, inodeBld );
+      processFileXml(node, inodeBld);

MOV26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS55 INS83 INS42 INS43 INS23 INS31 INS21 INS42 INS83 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS43 INS8 INS32 INS42 INS42 INS45 INS42 INS42 INS60 INS21 INS60 INS61 INS60 INS21 INS21 INS21 INS22 INS42 INS40 INS14 INS43 INS59 INS32 INS43 INS59 INS9 INS8 INS43 INS59 INS32 INS32 INS32 INS52 INS42 INS43 INS42 INS42 INS14 INS42 INS42 INS45 INS40 INS42 INS32 INS60 INS60 INS25 INS60 INS21 INS60 INS21 INS60 INS21 INS60 INS25 INS60 INS21 INS60 INS60 INS21 INS60 INS21 INS60 INS21 INS60 INS25 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS43 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS39 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS10 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS61 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS25 INS60 INS60 INS21 INS40 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS33 INS10 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42