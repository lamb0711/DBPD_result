YARN-5982. Simplify opportunistic container parameters and metrics. (Konstantinos Karanasos via asuresh)

-import org.apache.hadoop.yarn.server.nodemanager.containermanager.container
-    .Container;
-  @Metric("Memory used by Opportunistic Containers in MB")
-      MutableGaugeLong opportMemoryUsed;
-  @Metric("# of Virtual Cores used by opportunistic containers")
-      MutableGaugeInt opportCoresUsed;
+  @Metric("Current allocated memory by opportunistic containers in GB")
+      MutableGaugeLong allocatedOpportunisticGB;
+  @Metric("Current allocated Virtual Cores by opportunistic containers")
+      MutableGaugeInt allocatedOpportunisticVCores;
-      MutableGaugeInt runningOpportContainers;
+      MutableGaugeInt runningOpportunisticContainers;
+  private long allocatedOpportunisticMB;
-  public long getOpportMemoryUsed() {
-    return opportMemoryUsed.value();
-  }
-
-  public int getOpportCoresUsed() {
-    return opportCoresUsed.value();
-  }
-
-  public int getRunningOpportContainers() {
-    return runningOpportContainers.value();
-  }
-
-  public void opportunisticContainerCompleted(Container container) {
-    opportMemoryUsed.decr(container.getResource().getMemorySize());
-    opportCoresUsed.decr(container.getResource().getVirtualCores());
-    runningOpportContainers.decr();
-  }
-
-  public void opportunisticContainerStarted(Container container) {
-    opportMemoryUsed.incr(container.getResource().getMemorySize());
-    opportCoresUsed.incr(container.getResource().getVirtualCores());
-    runningOpportContainers.incr();
-  }
-
+  public void startOpportunisticContainer(Resource res) {
+    runningOpportunisticContainers.incr();
+    allocatedOpportunisticMB = allocatedOpportunisticMB + res.getMemorySize();
+    allocatedOpportunisticGB
+        .set((int) Math.ceil(allocatedOpportunisticMB / 1024d));
+    allocatedOpportunisticVCores.incr(res.getVirtualCores());
+  }
+
+  public void completeOpportunisticContainer(Resource res) {
+    runningOpportunisticContainers.decr();
+    allocatedOpportunisticMB = allocatedOpportunisticMB - res.getMemorySize();
+    allocatedOpportunisticGB
+        .set((int) Math.ceil(allocatedOpportunisticMB / 1024d));
+    allocatedOpportunisticVCores.decr(res.getVirtualCores());
+  }
+
+
+  public long getAllocatedOpportunisticGB() {
+    return allocatedOpportunisticGB.value();
+  }
+
+  public int getAllocatedOpportunisticVCores() {
+    return allocatedOpportunisticVCores.value();
+  }
+
+  public int getRunningOpportunisticContainers() {
+    return runningOpportunisticContainers.value();
+  }

MOV31 INS23 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 UPD42 MOV42 INS44 INS8 UPD42 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 UPD45 UPD42 UPD45 UPD42 UPD42 INS42 INS43 INS42 INS21 INS21 INS21 INS21 UPD43 UPD42 INS21 INS41 INS41 INS41 INS42 INS32 INS7 INS32 INS32 UPD42 INS32 INS7 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS42 INS42 INS11 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS27 UPD42 UPD42 INS11 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS39 INS32 INS42 INS42 INS42 INS32 INS39 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS34 INS42 INS34 DEL40 DEL26 DEL83 DEL39 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL32 DEL42 DEL32