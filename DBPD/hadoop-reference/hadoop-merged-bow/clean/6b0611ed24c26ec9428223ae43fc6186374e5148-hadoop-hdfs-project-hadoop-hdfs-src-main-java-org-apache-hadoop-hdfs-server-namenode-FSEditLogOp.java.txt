Merging r1539737 through r1539896 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1539898 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_MODIFY_PATH_BASED_CACHE_DIRECTIVE;
-import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_REMOVE_PATH_BASED_CACHE_DESCRIPTOR;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_REMOVE_PATH_BASED_CACHE_DIRECTIVE;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.hdfs.protocol.PathBasedCacheDirective;
-      inst.put(OP_REMOVE_PATH_BASED_CACHE_DESCRIPTOR,
-          new RemovePathBasedCacheDescriptorOp());
+      inst.put(OP_MODIFY_PATH_BASED_CACHE_DIRECTIVE,
+          new ModifyPathBasedCacheDirectiveOp());
+      inst.put(OP_REMOVE_PATH_BASED_CACHE_DIRECTIVE,
+          new RemovePathBasedCacheDirectiveOp());
-    String path;
-    short replication;
-    String pool;
+    PathBasedCacheDirective directive;
-    public AddPathBasedCacheDirectiveOp setPath(String path) {
-      this.path = path;
-      return this;
-    }
-
-    public AddPathBasedCacheDirectiveOp setReplication(short replication) {
-      this.replication = replication;
-      return this;
-    }
-
-    public AddPathBasedCacheDirectiveOp setPool(String pool) {
-      this.pool = pool;
+    public AddPathBasedCacheDirectiveOp setDirective(
+        PathBasedCacheDirective directive) {
+      this.directive = directive;
+      assert(directive.getId() != null);
+      assert(directive.getPath() != null);
+      assert(directive.getReplication() != null);
+      assert(directive.getPool() != null);
-      this.path = FSImageSerialization.readString(in);
-      this.replication = FSImageSerialization.readShort(in);
-      this.pool = FSImageSerialization.readString(in);
+      long id = FSImageSerialization.readLong(in);
+      String path = FSImageSerialization.readString(in);
+      short replication = FSImageSerialization.readShort(in);
+      String pool = FSImageSerialization.readString(in);
+      directive = new PathBasedCacheDirective.Builder().
+          setId(id).
+          setPath(new Path(path)).
+          setReplication(replication).
+          setPool(pool).
+          build();
-      FSImageSerialization.writeString(path, out);
-      FSImageSerialization.writeShort(replication, out);
-      FSImageSerialization.writeString(pool, out);
+      FSImageSerialization.writeLong(directive.getId(), out);
+      FSImageSerialization.writeString(directive.getPath().toUri().getPath(), out);
+      FSImageSerialization.writeShort(directive.getReplication(), out);
+      FSImageSerialization.writeString(directive.getPool(), out);
-      XMLUtils.addSaxString(contentHandler, "PATH", path);
+      XMLUtils.addSaxString(contentHandler, "ID",
+          directive.getId().toString());
+      XMLUtils.addSaxString(contentHandler, "PATH",
+          directive.getPath().toUri().getPath());
-          Short.toString(replication));
-      XMLUtils.addSaxString(contentHandler, "POOL", pool);
+          Short.toString(directive.getReplication()));
+      XMLUtils.addSaxString(contentHandler, "POOL", directive.getPool());
-      path = st.getValue("PATH");
-      replication = Short.parseShort(st.getValue("REPLICATION"));
-      pool = st.getValue("POOL");
+      directive = new PathBasedCacheDirective.Builder().
+          setId(Long.parseLong(st.getValue("ID"))).
+          setPath(new Path(st.getValue("PATH"))).
+          setReplication(Short.parseShort(st.getValue("REPLICATION"))).
+          setPool(st.getValue("POOL")).
+          build();
-      builder.append("path=" + path + ",");
-      builder.append("replication=" + replication + ",");
-      builder.append("pool=" + pool);
+      builder.append("id=" + directive.getId() + ",");
+      builder.append("path=" + directive.getPath().toUri().getPath() + ",");
+      builder.append("replication=" + directive.getReplication() + ",");
+      builder.append("pool=" + directive.getPool());
-   * {@link ClientProtocol#removePathBasedCacheDescriptor}
+   * {@link ClientProtocol#modifyPathBasedCacheDirective}
-  static class RemovePathBasedCacheDescriptorOp extends FSEditLogOp {
+  static class ModifyPathBasedCacheDirectiveOp extends FSEditLogOp {
+    PathBasedCacheDirective directive;
+
+    public ModifyPathBasedCacheDirectiveOp() {
+      super(OP_MODIFY_PATH_BASED_CACHE_DIRECTIVE);
+    }
+
+    static ModifyPathBasedCacheDirectiveOp getInstance(OpInstanceCache cache) {
+      return (ModifyPathBasedCacheDirectiveOp) cache
+          .get(OP_MODIFY_PATH_BASED_CACHE_DIRECTIVE);
+    }
+
+    public ModifyPathBasedCacheDirectiveOp setDirective(
+        PathBasedCacheDirective directive) {
+      this.directive = directive;
+      assert(directive.getId() != null);
+      return this;
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      PathBasedCacheDirective.Builder builder =
+          new PathBasedCacheDirective.Builder();
+      builder.setId(FSImageSerialization.readLong(in));
+      byte flags = in.readByte();
+      if ((flags & 0x1) != 0) {
+        builder.setPath(new Path(FSImageSerialization.readString(in)));
+      }
+      if ((flags & 0x2) != 0) {
+        builder.setReplication(FSImageSerialization.readShort(in));
+      }
+      if ((flags & 0x4) != 0) {
+        builder.setPool(FSImageSerialization.readString(in));
+      }
+      if ((flags & ~0x7) != 0) {
+        throw new IOException("unknown flags set in " +
+            "ModifyPathBasedCacheDirectiveOp: " + flags);
+      }
+      this.directive = builder.build();
+      readRpcIds(in, logVersion);
+    }
+
+    @Override
+    public void writeFields(DataOutputStream out) throws IOException {
+      FSImageSerialization.writeLong(directive.getId(), out);
+      byte flags = (byte)(
+          ((directive.getPath() != null) ? 0x1 : 0) |
+          ((directive.getReplication() != null) ? 0x2 : 0) |
+          ((directive.getPool() != null) ? 0x4 : 0)
+        );
+      out.writeByte(flags);
+      if (directive.getPath() != null) {
+        FSImageSerialization.writeString(
+            directive.getPath().toUri().getPath(), out);
+      }
+      if (directive.getReplication() != null) {
+        FSImageSerialization.writeShort(directive.getReplication(), out);
+      }
+      if (directive.getPool() != null) {
+        FSImageSerialization.writeString(directive.getPool(), out);
+      }
+      writeRpcIds(rpcClientId, rpcCallId, out);
+    }
+
+    @Override
+    protected void toXml(ContentHandler contentHandler) throws SAXException {
+      XMLUtils.addSaxString(contentHandler, "ID",
+          Long.toString(directive.getId()));
+      if (directive.getPath() != null) {
+        XMLUtils.addSaxString(contentHandler, "PATH",
+            directive.getPath().toUri().getPath());
+      }
+      if (directive.getReplication() != null) {
+        XMLUtils.addSaxString(contentHandler, "REPLICATION",
+            Short.toString(directive.getReplication()));
+      }
+      if (directive.getPool() != null) {
+        XMLUtils.addSaxString(contentHandler, "POOL", directive.getPool());
+      }
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+    }
+
+    @Override
+    void fromXml(Stanza st) throws InvalidXmlException {
+      PathBasedCacheDirective.Builder builder =
+          new PathBasedCacheDirective.Builder();
+      builder.setId(Long.parseLong(st.getValue("ID")));
+      String path = st.getValueOrNull("PATH");
+      if (path != null) {
+        builder.setPath(new Path(path));
+      }
+      String replicationString = st.getValueOrNull("REPLICATION");
+      if (replicationString != null) {
+        builder.setReplication(Short.parseShort(replicationString));
+      }
+      String pool = st.getValueOrNull("POOL");
+      if (pool != null) {
+        builder.setPool(pool);
+      }
+      this.directive = builder.build();
+      readRpcIdsFromXml(st);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder builder = new StringBuilder();
+      builder.append("ModifyPathBasedCacheDirectiveOp[");
+      builder.append("id=").append(directive.getId());
+      if (directive.getPath() != null) {
+        builder.append(",").append("path=").append(directive.getPath());
+      }
+      if (directive.getReplication() != null) {
+        builder.append(",").append("replication=").
+            append(directive.getReplication());
+      }
+      if (directive.getPool() != null) {
+        builder.append(",").append("pool=").append(directive.getPool());
+      }
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      builder.append("]");
+      return builder.toString();
+    }
+  }
+
+  /**
+   * {@literal @AtMostOnce} for
+   * {@link ClientProtocol#removePathBasedCacheDirective}
+   */
+  static class RemovePathBasedCacheDirectiveOp extends FSEditLogOp {
-    public RemovePathBasedCacheDescriptorOp() {
-      super(OP_REMOVE_PATH_BASED_CACHE_DESCRIPTOR);
+    public RemovePathBasedCacheDirectiveOp() {
+      super(OP_REMOVE_PATH_BASED_CACHE_DIRECTIVE);
-    static RemovePathBasedCacheDescriptorOp getInstance(OpInstanceCache cache) {
-      return (RemovePathBasedCacheDescriptorOp) cache
-          .get(OP_REMOVE_PATH_BASED_CACHE_DESCRIPTOR);
+    static RemovePathBasedCacheDirectiveOp getInstance(OpInstanceCache cache) {
+      return (RemovePathBasedCacheDirectiveOp) cache
+          .get(OP_REMOVE_PATH_BASED_CACHE_DIRECTIVE);
-    public RemovePathBasedCacheDescriptorOp setId(long id) {
+    public RemovePathBasedCacheDirectiveOp setId(long id) {
-      builder.append("RemovePathBasedCacheDescriptor [");
+      builder.append("RemovePathBasedCacheDirective [");

INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS55 INS23 INS31 INS29 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 INS43 MOV59 MOV83 MOV43 UPD42 MOV42 MOV44 INS8 MOV78 MOV78 INS65 INS42 INS43 INS59 INS83 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 UPD42 UPD43 INS44 UPD43 INS21 INS42 UPD42 INS43 INS42 MOV21 INS6 INS6 INS6 INS6 MOV41 INS60 INS60 INS60 INS60 INS21 INS21 INS21 MOV65 INS66 INS65 INS42 INS42 INS46 INS42 INS41 INS42 INS43 INS42 INS21 INS6 MOV41 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS60 INS25 INS25 INS25 INS25 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS25 INS25 INS25 INS21 INS42 INS43 INS42 INS42 INS21 INS25 INS25 INS25 INS21 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS25 INS60 INS25 INS60 INS25 INS21 INS21 INS42 INS42 INS60 INS21 INS21 INS25 INS25 INS25 INS21 INS21 INS41 INS65 UPD42 INS43 INS42 UPD42 INS32 INS42 INS36 INS36 INS36 INS36 INS39 INS59 MOV43 INS59 INS39 INS59 MOV43 INS59 INS32 INS32 INS32 INS67 INS42 INS11 INS42 INS7 INS36 INS42 INS43 INS59 INS32 INS39 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS7 INS32 INS42 INS32 INS39 INS59 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS42 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS42 INS43 INS59 INS32 MOV43 INS59 INS27 INS8 MOV43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS7 INS32 INS43 INS59 INS32 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS32 INS32 INS66 UPD42 INS42 INS42 INS42 INS42 INS14 UPD42 UPD42 INS27 INS27 INS27 INS27 INS42 INS32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS45 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS43 INS32 INS22 INS42 INS27 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS36 INS34 INS21 INS36 INS34 INS21 INS36 INS34 INS21 INS36 INS34 INS53 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS22 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS32 INS42 INS32 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 UPD42 UPD43 UPD45 INS43 UPD43 UPD42 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS32 INS42 INS45 INS32 INS45 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS33 INS43 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS27 INS32 INS27 INS32 INS27 INS14 INS52 INS42 INS42 INS42 INS42 INS42 INS39 INS36 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS52 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS32 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS34 INS42 INS42 INS14 INS42 INS34 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS38 INS43 INS27 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS40 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS42 MOV32 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS45 INS45 INS42 INS36 INS36 INS36 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS14 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS16 INS16 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS14 INS42 INS42 INS43 INS42 INS14 INS42 INS32 INS43 MOV32 INS36 INS34 INS34 INS36 INS34 INS34 INS36 INS34 INS34 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS27 INS27 INS27 INS40 INS40 INS42 INS42 INS45 INS32 INS33 INS32 INS33 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL23 DEL39 DEL23 DEL42 DEL59 DEL23 DEL42 DEL52 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42