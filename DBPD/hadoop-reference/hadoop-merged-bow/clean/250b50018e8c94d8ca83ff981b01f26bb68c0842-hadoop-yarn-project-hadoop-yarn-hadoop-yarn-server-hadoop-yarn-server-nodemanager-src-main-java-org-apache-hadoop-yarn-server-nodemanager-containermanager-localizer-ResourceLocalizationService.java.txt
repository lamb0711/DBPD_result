YARN-8680. YARN NM: Implement Iterable Abstraction for LocalResourceTracker state. Contributed by Pradeep Ambati

-        if (!trackerState.isEmpty()) {
-          LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user,
-              null, dispatcher, true, super.getConfig(), stateStore,
-              dirsHandler);
-          LocalResourcesTracker oldTracker = privateRsrc.putIfAbsent(user,
-              tracker);
-          if (oldTracker != null) {
-            tracker = oldTracker;
-          }
-          recoverTrackerResources(tracker, trackerState);
+        LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user,
+            null, dispatcher, true, super.getConfig(), stateStore,
+            dirsHandler);
+        LocalResourcesTracker oldTracker = privateRsrc.putIfAbsent(user,
+            tracker);
+        if (oldTracker != null) {
+          tracker = oldTracker;
+        recoverTrackerResources(tracker, trackerState);
-          if (!trackerState.isEmpty()) {
-            ApplicationId appId = appEntry.getKey();
-            String appIdStr = appId.toString();
-            LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user,
-                appId, dispatcher, false, super.getConfig(), stateStore,
-                dirsHandler);
-            LocalResourcesTracker oldTracker = appRsrc.putIfAbsent(appIdStr,
-                tracker);
-            if (oldTracker != null) {
-              tracker = oldTracker;
-            }
-            recoverTrackerResources(tracker, trackerState);
+          ApplicationId appId = appEntry.getKey();
+          String appIdStr = appId.toString();
+          LocalResourcesTracker tracker1 = new LocalResourcesTrackerImpl(user,
+              appId, dispatcher, false, super.getConfig(), stateStore,
+              dirsHandler);
+          LocalResourcesTracker oldTracker1 = appRsrc.putIfAbsent(appIdStr,
+              tracker1);
+          if (oldTracker1 != null) {
+            tracker1 = oldTracker1;
+          recoverTrackerResources(tracker1, trackerState);
-      LocalResourceTrackerState state) throws URISyntaxException {
-    for (LocalizedResourceProto proto : state.getLocalizedResources()) {
-      LocalResource rsrc = new LocalResourcePBImpl(proto.getResource());
-      LocalResourceRequest req = new LocalResourceRequest(rsrc);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Recovering localized resource " + req + " at "
-            + proto.getLocalPath());
+      LocalResourceTrackerState state) throws URISyntaxException, IOException {
+    try (RecoveryIterator<LocalizedResourceProto> it =
+             state.getCompletedResourcesIterator()) {
+      while (it != null && it.hasNext()) {
+        LocalizedResourceProto proto = it.next();
+        LocalResource rsrc = new LocalResourcePBImpl(proto.getResource());
+        LocalResourceRequest req = new LocalResourceRequest(rsrc);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Recovering localized resource " + req + " at "
+              + proto.getLocalPath());
+        }
+        tracker.handle(new ResourceRecoveredEvent(req,
+            new Path(proto.getLocalPath()), proto.getSize()));
-      tracker.handle(new ResourceRecoveredEvent(req,
-          new Path(proto.getLocalPath()), proto.getSize()));
-    for (Map.Entry<LocalResourceProto, Path> entry :
-         state.getInProgressResources().entrySet()) {
-      LocalResource rsrc = new LocalResourcePBImpl(entry.getKey());
-      LocalResourceRequest req = new LocalResourceRequest(rsrc);
-      Path localPath = entry.getValue();
-      tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));
+    try (RecoveryIterator<Map.Entry<LocalResourceProto, Path>> it =
+             state.getStartedResourcesIterator()) {
+      while (it != null && it.hasNext()) {
+        Map.Entry<LocalResourceProto, Path> entry = it.next();
+        LocalResource rsrc = new LocalResourcePBImpl(entry.getKey());
+        LocalResourceRequest req = new LocalResourceRequest(rsrc);
+        Path localPath = entry.getValue();
+        tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));
-      // delete any in-progress localizations, containers will request again
-      LOG.info("Deleting in-progress localization for " + req + " at "
-          + localPath);
-      tracker.remove(tracker.getLocalizedResource(req), delService);
+        // delete any in-progress localizations, containers will request again
+        LOG.info("Deleting in-progress localization for " + req + " at "
+            + localPath);
+        tracker.remove(tracker.getLocalizedResource(req), delService);
+      }

MOV8 INS43 MOV60 MOV21 INS54 INS42 INS54 INS54 MOV58 MOV8 INS58 INS8 INS58 INS8 INS61 INS74 INS59 INS61 INS74 INS59 INS61 MOV32 MOV8 INS43 INS43 INS42 INS32 INS27 MOV8 INS43 INS74 INS42 INS32 INS27 MOV8 MOV60 MOV60 MOV60 MOV21 MOV60 MOV60 MOV25 MOV21 INS70 INS42 INS42 MOV42 UPD42 MOV42 INS27 INS32 INS60 INS42 INS43 INS43 INS43 MOV42 UPD42 MOV42 INS27 INS32 INS60 MOV44 MOV32 MOV8 INS42 INS33 INS42 INS42 MOV43 INS59 INS40 INS42 INS42 INS42 INS33 INS42 INS42 MOV74 INS59 MOV21 INS25 INS21 INS42 INS32 INS42 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS33 INS21 INS42 INS42 INS42 UPD42 INS7 INS42 INS42 DEL42 DEL42 DEL32 DEL38 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL70 DEL61 DEL54 DEL8 DEL42 DEL44 DEL32 DEL70 DEL42 DEL44 DEL32 DEL42 DEL32 DEL70