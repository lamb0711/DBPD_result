HDFS-362.  FSEditLog should not writes long and short as UTF8, and should not use ArrayWritable for writing non-array items.  Contributed by Uma Maheswara Rao G


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171945 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.HdfsConstants;
-import org.apache.hadoop.hdfs.server.common.Storage;
-import org.apache.hadoop.io.LongWritable;
-      DeprecatedUTF8 nameReplicationPair[] = new DeprecatedUTF8[] { 
-        new DeprecatedUTF8(path), 
-        toLogReplication(replication),
-        toLogLong(mtime),
-        toLogLong(atime),
-        toLogLong(blockSize)};
-      new ArrayWritable(DeprecatedUTF8.class, nameReplicationPair).write(out);
+      FSImageSerialization.writeString(path, out);
+      FSImageSerialization.writeShort(replication, out);
+      FSImageSerialization.writeLong(mtime, out);
+      FSImageSerialization.writeLong(atime, out);
+      FSImageSerialization.writeLong(blockSize, out);
-        new DeprecatedUTF8(clientName).write(out);
-        new DeprecatedUTF8(clientMachine).write(out);
+        FSImageSerialization.writeString(clientName,out);
+        FSImageSerialization.writeString(clientMachine,out);
-      this.length = in.readInt();
+      if (!LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.length = in.readInt();
+      }
-          logVersion <= -17 && length != 5) {
+          (logVersion <= -17 && length != 5 && !LayoutVersion.supports(
+              Feature.EDITLOG_OP_OPTIMIZATION, logVersion))) {
-      this.replication = readShort(in);
-      this.mtime = readLong(in);
+
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.replication = FSImageSerialization.readShort(in);
+        this.mtime = FSImageSerialization.readLong(in);
+      } else {
+        this.replication = readShort(in);
+        this.mtime = readLong(in);
+      }
+
-        this.atime = readLong(in);
+        if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+          this.atime = FSImageSerialization.readLong(in);
+        } else {
+          this.atime = readLong(in);
+        }
-        this.blockSize = readLong(in);
+        if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+          this.blockSize = FSImageSerialization.readLong(in);
+        } else {
+          this.blockSize = readLong(in);
+        }
-      new DeprecatedUTF8(path).write(out);
-      new DeprecatedUTF8(Short.toString(replication)).write(out);
+      FSImageSerialization.writeString(path, out);
+      FSImageSerialization.writeShort(replication, out);
-      this.replication = readShort(in);
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.replication = FSImageSerialization.readShort(in);
+      } else {
+        this.replication = readShort(in);
+      }
-      int size = 1 + srcs.length + 1; // trg, srcs, timestamp
-      DeprecatedUTF8 info[] = new DeprecatedUTF8[size];
+      FSImageSerialization.writeString(trg, out);
+            
+      DeprecatedUTF8 info[] = new DeprecatedUTF8[srcs.length];
-      info[idx++] = new DeprecatedUTF8(trg);
-      info[idx] = toLogLong(timestamp);
+
+      FSImageSerialization.writeLong(timestamp, out);
-      this.length = in.readInt();
-      if (length < 3) { // trg, srcs.., timestam
-        throw new IOException("Incorrect data format. "
-                              + "Concat delete operation.");
+      if (!LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.length = in.readInt();
+        if (length < 3) { // trg, srcs.., timestamp
+          throw new IOException("Incorrect data format. "
+              + "Concat delete operation.");
+        }
-      int srcSize = this.length - 1 - 1; //trg and timestamp
+      int srcSize = 0;
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        srcSize = in.readInt();
+      } else {
+        srcSize = this.length - 1 - 1; // trg and timestamp
+      }
-      this.timestamp = readLong(in);
+      
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.timestamp = FSImageSerialization.readLong(in);
+      } else {
+        this.timestamp = readLong(in);
+      }
-      DeprecatedUTF8 info[] = new DeprecatedUTF8[] { 
-        new DeprecatedUTF8(src),
-        new DeprecatedUTF8(dst),
-        toLogLong(timestamp)};
-      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+      FSImageSerialization.writeString(src, out);
+      FSImageSerialization.writeString(dst, out);
+      FSImageSerialization.writeLong(timestamp, out);
-      this.length = in.readInt();
-      if (this.length != 3) {
-        throw new IOException("Incorrect data format. "
-                              + "Old rename operation.");
+      if (!LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.length = in.readInt();
+        if (this.length != 3) {
+          throw new IOException("Incorrect data format. "
+              + "Old rename operation.");
+        }
-      this.timestamp = readLong(in);
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.timestamp = FSImageSerialization.readLong(in);
+      } else {
+        this.timestamp = readLong(in);
+      }
-      DeprecatedUTF8 info[] = new DeprecatedUTF8[] { 
-        new DeprecatedUTF8(path),
-        toLogLong(timestamp)};
-      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+      FSImageSerialization.writeString(path, out);
+      FSImageSerialization.writeLong(timestamp, out);
-      this.length = in.readInt();
-      if (this.length != 2) {
-        throw new IOException("Incorrect data format. "
-                              + "delete operation.");
+      if (!LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.length = in.readInt();
+        if (this.length != 2) {
+          throw new IOException("Incorrect data format. " + "delete operation.");
+        }
-      this.timestamp = readLong(in);
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.timestamp = FSImageSerialization.readLong(in);
+      } else {
+        this.timestamp = readLong(in);
+      }
-      DeprecatedUTF8 info[] = new DeprecatedUTF8[] {
-        new DeprecatedUTF8(path),
-        toLogLong(timestamp), // mtime
-        toLogLong(timestamp) // atime, unused at this time
-      };
-      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+      FSImageSerialization.writeString(path, out);
+      FSImageSerialization.writeLong(timestamp, out); // mtime
+      FSImageSerialization.writeLong(timestamp, out); // atime, unused at this
-      this.length = in.readInt();
+      if (!LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.length = in.readInt();
+      }
-          logVersion <= -17 && length != 3) {
+          logVersion <= -17 && length != 3
+          && !LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
-      this.timestamp = readLong(in);
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.timestamp = FSImageSerialization.readLong(in);
+      } else {
+        this.timestamp = readLong(in);
+      }
-        /*unused this.atime = */readLong(in);
+        /* unused this.atime = */
+        if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+          FSImageSerialization.readLong(in);
+        } else {
+          readLong(in);
+        }
-      new LongWritable(genStamp).write(out);
+      FSImageSerialization.writeLong(genStamp, out);
-      this.genStamp = in.readLong();
+      this.genStamp = FSImageSerialization.readLong(in);
-      new DeprecatedUTF8(src).write(out);
+      FSImageSerialization.writeString(src, out);
-      DeprecatedUTF8 u = new DeprecatedUTF8(username == null? "": username);
-      DeprecatedUTF8 g = new DeprecatedUTF8(groupname == null? "": groupname);
-      new DeprecatedUTF8(src).write(out);
-      u.write(out);
-      g.write(out);
+      FSImageSerialization.writeString(src, out);
+      FSImageSerialization.writeString(username == null ? "" : username, out);
+      FSImageSerialization.writeString(groupname == null ? "" : groupname, out);
-      this.nsQuota = readLongWritable(in);
+      this.nsQuota = FSImageSerialization.readLong(in);
-      new DeprecatedUTF8(src).write(out);
-      new LongWritable(nsQuota).write(out);
-      new LongWritable(dsQuota).write(out);
+      FSImageSerialization.writeString(src, out);
+      FSImageSerialization.writeLong(nsQuota, out);
+      FSImageSerialization.writeLong(dsQuota, out);
-      this.nsQuota = readLongWritable(in);
-      this.dsQuota = readLongWritable(in);
+      this.nsQuota = FSImageSerialization.readLong(in);
+      this.dsQuota = FSImageSerialization.readLong(in);
-      DeprecatedUTF8 info[] = new DeprecatedUTF8[] { 
-        new DeprecatedUTF8(path),
-        toLogLong(mtime),
-        toLogLong(atime)};
-      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+      FSImageSerialization.writeString(path, out);
+      FSImageSerialization.writeLong(mtime, out);
+      FSImageSerialization.writeLong(atime, out);
-      this.length = in.readInt();
-      if (length != 3) {
-        throw new IOException("Incorrect data format. "
-                              + "times operation.");
+      if (!LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.length = in.readInt();
+        if (length != 3) {
+          throw new IOException("Incorrect data format. " + "times operation.");
+        }
-      this.mtime = readLong(in);
-      this.atime = readLong(in);
+
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.mtime = FSImageSerialization.readLong(in);
+        this.atime = FSImageSerialization.readLong(in);
+      } else {
+        this.mtime = readLong(in);
+        this.atime = readLong(in);
+      }
-      DeprecatedUTF8 info[] = new DeprecatedUTF8[] { 
-        new DeprecatedUTF8(path),
-        new DeprecatedUTF8(value),
-        toLogLong(mtime),
-        toLogLong(atime)};
-      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+      FSImageSerialization.writeString(path, out);
+      FSImageSerialization.writeString(value, out);
+      FSImageSerialization.writeLong(mtime, out);
+      FSImageSerialization.writeLong(atime, out);
-
-      this.length = in.readInt();
-      if (this.length != 4) {
-        throw new IOException("Incorrect data format. "
-                              + "symlink operation.");
+      if (!LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.length = in.readInt();
+        if (this.length != 4) {
+          throw new IOException("Incorrect data format. "
+              + "symlink operation.");
+        }
-      this.mtime = readLong(in);
-      this.atime = readLong(in);
+
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.mtime = FSImageSerialization.readLong(in);
+        this.atime = FSImageSerialization.readLong(in);
+      } else {
+        this.mtime = readLong(in);
+        this.atime = readLong(in);
+      }
-      DeprecatedUTF8 info[] = new DeprecatedUTF8[] { 
-        new DeprecatedUTF8(src),
-        new DeprecatedUTF8(dst),
-        toLogLong(timestamp)};
-      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+      FSImageSerialization.writeString(src, out);
+      FSImageSerialization.writeString(dst, out);
+      FSImageSerialization.writeLong(timestamp, out);
-      this.length = in.readInt();
-      if (this.length != 3) {
-        throw new IOException("Incorrect data format. "
-                              + "Rename operation.");
+      if (!LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.length = in.readInt();
+        if (this.length != 3) {
+          throw new IOException("Incorrect data format. " + "Rename operation.");
+        }
-      this.timestamp = readLong(in);
+
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.timestamp = FSImageSerialization.readLong(in);
+      } else {
+        this.timestamp = readLong(in);
+      }
-      new DeprecatedUTF8(leaseHolder).write(out);
-      new DeprecatedUTF8(path).write(out);
-      new DeprecatedUTF8(newHolder).write(out);
+      FSImageSerialization.writeString(leaseHolder, out);
+      FSImageSerialization.writeString(path, out);
+      FSImageSerialization.writeString(newHolder, out);
-      toLogLong(expiryTime).write(out);
+      FSImageSerialization.writeLong(expiryTime, out);
-      this.expiryTime = readLong(in);
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.expiryTime = FSImageSerialization.readLong(in);
+      } else {
+        this.expiryTime = readLong(in);
+      }
-      toLogLong(expiryTime).write(out);
+      FSImageSerialization.writeLong(expiryTime, out);
-      this.expiryTime = readLong(in);
+      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, logVersion)) {
+        this.expiryTime = FSImageSerialization.readLong(in);
+      } else {
+        this.expiryTime = readLong(in);
+      }
-  static private DeprecatedUTF8 toLogReplication(short replication) {
-    return new DeprecatedUTF8(Short.toString(replication));
-  }
-  
-  static private DeprecatedUTF8 toLogLong(long timestamp) {
-    return new DeprecatedUTF8(Long.toString(timestamp));
-  }
-
-    // a place holder for reading a long
-  private static final LongWritable longWritable = new LongWritable();
-
-  /** Read an integer from an input stream */
-  private static long readLongWritable(DataInputStream in) throws IOException {
-    synchronized (longWritable) {
-      longWritable.readFields(in);
-      return longWritable.get();
-    }
-  }
-

INS31 MOV31 MOV78 MOV78 MOV21 MOV21 INS78 INS44 INS43 INS8 INS8 MOV44 MOV43 MOV78 MOV44 MOV43 MOV78 MOV44 MOV43 INS8 MOV78 INS44 INS43 MOV78 MOV78 INS39 INS42 MOV44 MOV44 MOV43 INS8 MOV78 MOV44 MOV43 MOV78 INS21 INS21 INS21 INS21 INS25 INS25 INS25 INS25 INS25 INS25 INS42 INS43 INS42 UPD42 MOV42 INS21 INS21 MOV21 INS25 INS25 INS21 INS25 MOV21 INS25 INS21 INS21 INS25 INS25 MOV42 MOV42 INS21 MOV42 MOV21 INS21 INS21 INS25 MOV21 INS25 INS21 INS21 INS21 INS25 INS25 INS21 INS21 INS25 INS25 INS43 INS42 INS42 MOV43 MOV42 MOV42 MOV21 MOV21 MOV21 INS25 MOV21 INS25 INS32 INS32 INS32 INS32 INS38 INS8 INS32 INS8 INS8 INS8 INS8 INS32 INS8 INS8 INS32 INS32 INS38 INS8 INS32 INS8 INS8 INS32 INS8 INS8 UPD42 MOV42 INS32 INS32 INS38 INS8 INS32 INS8 INS8 INS32 INS38 MOV8 INS32 INS8 INS8 INS32 INS32 INS38 INS8 INS32 INS8 INS8 INS8 INS7 INS32 INS32 INS38 MOV8 INS32 INS8 INS8 INS32 INS32 INS32 INS38 INS8 INS32 INS8 INS8 INS32 INS32 INS38 INS8 INS32 INS8 INS8 INS42 INS32 INS8 INS8 INS32 INS8 INS8 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 MOV42 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS42 UPD42 INS32 MOV21 INS36 INS42 INS42 INS40 INS42 INS21 INS21 MOV21 MOV21 INS25 INS25 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS40 INS42 INS21 MOV21 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS32 MOV21 MOV25 INS34 INS42 INS42 INS40 INS42 INS21 INS21 INS42 INS42 INS40 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 MOV21 MOV25 INS42 INS42 INS40 INS42 MOV21 MOV21 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 MOV21 INS27 INS42 INS42 INS40 INS42 MOV21 MOV21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV16 UPD42 UPD42 MOV16 MOV22 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 INS32 INS42 INS42 INS40 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS32 MOV21 MOV25 INS42 INS42 INS40 INS42 MOV21 MOV21 MOV21 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 MOV21 MOV25 INS42 INS42 INS40 INS42 INS21 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS40 INS42 INS21 MOV21 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS40 INS42 INS21 MOV21 INS42 INS42 INS40 INS42 INS27 INS7 INS7 INS32 INS8 MOV8 INS32 INS8 MOV8 INS7 INS40 INS42 INS42 INS40 INS42 INS7 INS7 INS7 INS7 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS7 INS7 INS42 INS42 INS40 INS42 MOV27 INS38 INS32 INS8 MOV8 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS40 INS42 INS7 INS7 INS7 INS7 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS7 INS7 INS7 INS42 INS42 UPD42 INS42 INS42 UPD42 MOV27 INS38 INS22 INS32 INS22 INS32 INS42 INS42 INS40 INS42 INS21 INS42 INS42 INS40 INS42 INS21 INS22 INS32 INS42 INS32 INS42 MOV27 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS32 INS42 INS42 INS40 INS42 INS21 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS32 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS7 INS7 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS22 INS32 INS22 INS32 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL85 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL14 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL57 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL42 DEL42 DEL37 DEL2 DEL42 DEL14 DEL7 DEL39 DEL42 DEL34 DEL40 DEL34 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL42 DEL43 DEL42 DEL43 DEL57 DEL42 DEL14 DEL42 DEL43 DEL42 DEL85 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL32 DEL4 DEL3 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL85 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL4 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL57 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL85 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL14 DEL32 DEL42 DEL32 DEL4 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL57 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL85 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL14 DEL32 DEL42 DEL32 DEL4 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL57 DEL42 DEL14 DEL42 DEL43 DEL42 DEL85 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL32 DEL32 DEL4 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL57 DEL42 DEL14 DEL42 DEL43 DEL42 DEL85 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL4 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL57 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL42 DEL32 DEL42 DEL39 DEL42 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL51 DEL8 DEL31