YARN-660. Improve AMRMClient with matching requests (bikas)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488485 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.Comparator;
+import java.util.LinkedHashSet;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.SortedMap;
+import org.apache.hadoop.yarn.client.AMRMClient.ContainerRequest;
+// TODO check inputs for null etc. YARN-654
+
-public class AMRMClientImpl extends AbstractService implements AMRMClient {
+public class AMRMClientImpl<T extends ContainerRequest> 
+                          extends AbstractService implements AMRMClient<T> {
+  class ResourceRequestInfo {
+    ResourceRequest remoteRequest;
+    LinkedHashSet<T> containerRequests;
+    
+    ResourceRequestInfo(Priority priority, String resourceName,
+        Resource capability) {
+      remoteRequest = BuilderUtils.newResourceRequest(priority, resourceName,
+          capability, 0);
+      containerRequests = new LinkedHashSet<T>();
+    }
+  }
+  
+  
+  /**
+   * Class compares Resource by memory then cpu in reverse order
+   */
+  class ResourceReverseMemoryThenCpuComparator implements Comparator<Resource> {
+    @Override
+    public int compare(Resource arg0, Resource arg1) {
+      int mem0 = arg0.getMemory();
+      int mem1 = arg1.getMemory();
+      int cpu0 = arg0.getVirtualCores();
+      int cpu1 = arg1.getVirtualCores();
+      if(mem0 == mem1) {
+        if(cpu0 == cpu1) {
+          return 0;
+        }
+        if(cpu0 < cpu1) {
+          return 1;
+        }
+        return -1;
+      }
+      if(mem0 < mem1) { 
+        return 1;
+      }
+      return -1;
+    }    
+  }
+  
+  static boolean canFit(Resource arg0, Resource arg1) {
+    int mem0 = arg0.getMemory();
+    int mem1 = arg1.getMemory();
+    int cpu0 = arg0.getVirtualCores();
+    int cpu1 = arg1.getVirtualCores();
+    
+    if(mem0 <= mem1 && cpu0 <= cpu1) { 
+      return true;
+    }
+    return false; 
+  }
+  
-  Map<Priority, Map<String, Map<Resource, ResourceRequest>>>
+  Map<Priority, Map<String, TreeMap<Resource, ResourceRequestInfo>>>
-    new TreeMap<Priority, Map<String, Map<Resource, ResourceRequest>>>();
+    new TreeMap<Priority, Map<String, TreeMap<Resource, ResourceRequestInfo>>>();
-  public synchronized void addContainerRequest(ContainerRequest req) {
+  public synchronized void addContainerRequest(T req) {
-    if(req.hosts != null) {
+    // add check for dup locations
+    if (req.hosts != null) {
-        addResourceRequest(req.priority, host, req.capability, req.containerCount);
+        addResourceRequest(req.priority, host, req.capability,
+            req.containerCount, req);
-    if(req.racks != null) {
+    if (req.racks != null) {
-        addResourceRequest(req.priority, rack, req.capability, req.containerCount);
+        addResourceRequest(req.priority, rack, req.capability,
+            req.containerCount, req);
-        req.containerCount);
+        req.containerCount, req);
-  public synchronized void removeContainerRequest(ContainerRequest req) {
+  public synchronized void removeContainerRequest(T req) {
-    if(req.hosts != null) {
+    if (req.hosts != null) {
-        decResourceRequest(req.priority, hostName, req.capability, req.containerCount);
+        decResourceRequest(req.priority, hostName, req.capability,
+            req.containerCount, req);
-    
-    if(req.racks != null) {
+
+    if (req.racks != null) {
-        decResourceRequest(req.priority, rack, req.capability, req.containerCount);
+        decResourceRequest(req.priority, rack, req.capability,
+            req.containerCount, req);
-   
+
-        req.containerCount);
+        req.containerCount, req);
+  @Override
+  public synchronized List<? extends Collection<T>> getMatchingRequests(
+                                          Priority priority, 
+                                          String resourceName, 
+                                          Resource capability) {
+    List<LinkedHashSet<T>> list = new LinkedList<LinkedHashSet<T>>();
+    Map<String, TreeMap<Resource, ResourceRequestInfo>> remoteRequests = 
+        this.remoteRequestsTable.get(priority);
+    if (remoteRequests == null) {
+      return list;
+    }
+    TreeMap<Resource, ResourceRequestInfo> reqMap = remoteRequests
+        .get(resourceName);
+    if (reqMap == null) {
+      return list;
+    }
+
+    ResourceRequestInfo resourceRequestInfo = reqMap.get(capability);
+    if (resourceRequestInfo != null) {
+      list.add(resourceRequestInfo.containerRequests);
+      return list;
+    }
+    
+    // no exact match. Container may be larger than what was requested.
+    // get all resources <= capability. map is reverse sorted. 
+    SortedMap<Resource, ResourceRequestInfo> tailMap = 
+                                                  reqMap.tailMap(capability);
+    for(Map.Entry<Resource, ResourceRequestInfo> entry : tailMap.entrySet()) {
+      if(canFit(entry.getKey(), capability)) {
+        // match found that fits in the larger resource
+        list.add(entry.getValue().containerRequests);
+      }
+    }
+    
+    // no match found
+    return list;          
+  }
+  
-      Resource capability, int containerCount) {
-    Map<String, Map<Resource, ResourceRequest>> remoteRequests =
+      Resource capability, int containerCount, T req) {
+    Map<String, TreeMap<Resource, ResourceRequestInfo>> remoteRequests =
-      remoteRequests = new HashMap<String, Map<Resource, ResourceRequest>>();
+      remoteRequests = 
+          new HashMap<String, TreeMap<Resource, ResourceRequestInfo>>();
-    Map<Resource, ResourceRequest> reqMap = remoteRequests.get(resourceName);
+    TreeMap<Resource, ResourceRequestInfo> reqMap = 
+                                          remoteRequests.get(resourceName);
-      reqMap = new HashMap<Resource, ResourceRequest>();
+      // capabilities are stored in reverse sorted order. smallest last.
+      reqMap = new TreeMap<Resource, ResourceRequestInfo>(
+          new ResourceReverseMemoryThenCpuComparator());
-    ResourceRequest remoteRequest = reqMap.get(capability);
-    if (remoteRequest == null) {
-      remoteRequest = BuilderUtils.
-          newResourceRequest(priority, resourceName, capability, 0);
-      reqMap.put(capability, remoteRequest);
+    ResourceRequestInfo resourceRequestInfo = reqMap.get(capability);
+    if (resourceRequestInfo == null) {
+      resourceRequestInfo =
+          new ResourceRequestInfo(priority, resourceName, capability);
+      reqMap.put(capability, resourceRequestInfo);
-    remoteRequest.setNumContainers(remoteRequest.getNumContainers() + containerCount);
+    resourceRequestInfo.remoteRequest.setNumContainers(
+         resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);
+
+    if(req instanceof StoredContainerRequest) {
+      resourceRequestInfo.containerRequests.add(req);
+    }
-    addResourceRequestToAsk(remoteRequest);
+    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);
-          + remoteRequest.getNumContainers() + " #asks=" + ask.size());
+          + resourceRequestInfo.remoteRequest.getNumContainers() 
+          + " #asks=" + ask.size());
-  private void decResourceRequest(Priority priority, String resourceName,
-      Resource capability, int containerCount) {
-    Map<String, Map<Resource, ResourceRequest>> remoteRequests =
+  private void decResourceRequest(Priority priority, 
+                                   String resourceName,
+                                   Resource capability, 
+                                   int containerCount, 
+                                   T req) {
+    Map<String, TreeMap<Resource, ResourceRequestInfo>> remoteRequests =
-    Map<Resource, ResourceRequest> reqMap = remoteRequests.get(resourceName);
+    Map<Resource, ResourceRequestInfo> reqMap = remoteRequests.get(resourceName);
-    ResourceRequest remoteRequest = reqMap.get(capability);
+    ResourceRequestInfo resourceRequestInfo = reqMap.get(capability);
-          + remoteRequest.getNumContainers() + " #asks=" + ask.size());
+          + resourceRequestInfo.remoteRequest.getNumContainers() 
+          + " #asks=" + ask.size());
-    remoteRequest.
-        setNumContainers(remoteRequest.getNumContainers() - containerCount);
-    if(remoteRequest.getNumContainers() < 0) {
+    resourceRequestInfo.remoteRequest.setNumContainers(
+        resourceRequestInfo.remoteRequest.getNumContainers() - containerCount);
+
+    if(req instanceof StoredContainerRequest) {
+      resourceRequestInfo.containerRequests.remove(req);
+    }
+    
+    if(resourceRequestInfo.remoteRequest.getNumContainers() < 0) {
-      remoteRequest.setNumContainers(0);
+      resourceRequestInfo.remoteRequest.setNumContainers(0);
-    addResourceRequestToAsk(remoteRequest);
+    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);
-    if (remoteRequest.getNumContainers() == 0) {
+    if (resourceRequestInfo.remoteRequest.getNumContainers() == 0) {
-          + remoteRequest.getNumContainers() + " #asks=" + ask.size());
+          + resourceRequestInfo.remoteRequest.getNumContainers() 
+          + " #asks=" + ask.size());

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS73 INS74 INS55 INS55 INS31 INS31 INS42 MOV43 MOV43 INS43 INS42 INS23 INS23 INS31 INS29 INS42 INS74 INS31 INS83 INS39 INS42 INS44 INS44 INS8 UPD74 MOV74 INS59 INS78 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS44 INS44 INS42 MOV43 INS59 INS74 INS59 INS42 INS44 INS44 INS44 MOV8 INS65 INS43 MOV43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS25 INS41 MOV43 UPD74 INS42 INS14 INS43 UPD43 INS42 INS43 INS76 INS43 INS42 INS43 INS42 INS43 INS42 INS60 MOV60 INS25 MOV60 INS25 MOV60 INS25 INS60 INS70 INS41 INS43 INS42 INS25 INS21 INS43 INS42 INS60 INS60 INS60 INS25 INS42 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS66 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS25 INS25 INS41 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS9 UPD74 INS74 INS42 MOV27 UPD42 MOV27 INS42 INS74 INS42 INS42 INS42 INS74 INS59 UPD74 INS27 INS8 UPD74 INS27 INS8 UPD43 INS27 INS8 INS74 INS59 INS44 INS32 INS8 INS42 INS42 UPD74 UPD74 INS43 INS8 INS62 INS8 INS32 INS42 INS74 INS59 INS74 INS59 INS43 INS59 INS62 INS8 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS38 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS27 INS27 INS41 MOV43 MOV43 UPD43 UPD43 MOV43 MOV43 UPD74 MOV74 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS14 INS43 UPD74 INS42 INS33 INS41 UPD43 MOV43 UPD43 INS42 INS33 INS41 UPD42 UPD42 INS42 INS33 INS21 INS41 INS43 MOV43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS25 MOV43 UPD74 INS43 INS43 UPD43 INS42 UPD42 UPD42 INS21 INS21 INS40 INS42 INS43 MOV21 INS42 INS40 MOV43 INS43 INS74 INS42 INS32 MOV43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS43 INS21 INS40 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS25 INS25 INS41 INS42 INS42 INS41 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 UPD42 MOV43 INS74 MOV44 MOV44 INS42 INS42 INS42 INS43 INS43 INS74 INS42 UPD43 MOV43 UPD43 INS42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 MOV43 INS43 INS32 INS8 UPD43 MOV43 UPD43 INS42 INS42 UPD42 INS7 INS32 INS42 INS42 INS43 INS43 INS43 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS40 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS38 INS34 UPD43 MOV43 INS43 UPD43 MOV43 INS42 INS42 INS43 INS74 UPD42 UPD42 INS42 INS42 INS40 INS40 INS42 INS42 INS32 INS42 INS21 UPD42 UPD42 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS40 UPD42 UPD42 INS42 INS42 INS42 INS52 INS42 INS40 INS40 INS42 INS42 INS40 INS43 INS43 INS42 INS42 INS41 INS42 INS42 INS41 INS34 UPD42 INS42 UPD42 INS42 INS43 INS43 INS42 INS42 INS32 UPD74 UPD74 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 MOV43 UPD74 UPD43 INS43 UPD43 INS43 INS42 INS40 INS40 INS40 INS32 INS42 UPD43 MOV43 UPD43 UPD42 INS42 UPD42 INS42 INS42 INS42 UPD42 UPD42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL74 DEL74 DEL42 DEL14 DEL59 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42