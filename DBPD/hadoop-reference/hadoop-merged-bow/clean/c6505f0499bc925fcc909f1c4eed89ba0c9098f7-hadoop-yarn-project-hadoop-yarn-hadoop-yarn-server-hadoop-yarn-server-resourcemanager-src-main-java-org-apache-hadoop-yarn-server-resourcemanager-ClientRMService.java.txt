Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1566100 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.LocalConfigurationProvider;
+import org.apache.hadoop.yarn.api.protocolrecords.ApplicationsRequestScope;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppMoveEvent;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppState;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.SettableFuture;
+
+  private boolean useLocalConfigurationProvider;
+    this.useLocalConfigurationProvider =
+        (LocalConfigurationProvider.class.isAssignableFrom(conf.getClass(
+            YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,
+            LocalConfigurationProvider.class)));
+    Set<String> tags = request.getApplicationTags();
+    ApplicationsRequestScope scope = request.getScope();
+
+      // Check if current application falls under the specified scope
+      boolean allowAccess = checkAccess(callerUGI, application.getUser(),
+          ApplicationAccessType.VIEW_APP, application);
+      if (scope == ApplicationsRequestScope.OWN &&
+          !callerUGI.getUserName().equals(application.getUser())) {
+        continue;
+      } else if (scope == ApplicationsRequestScope.VIEWABLE && !allowAccess) {
+        continue;
+      }
+
-      boolean allowAccess = checkAccess(callerUGI, application.getUser(),
-          ApplicationAccessType.VIEW_APP, application);
+      if (tags != null && !tags.isEmpty()) {
+        Set<String> appTags = application.getApplicationTags();
+        if (appTags == null || appTags.isEmpty()) {
+          continue;
+        }
+        boolean match = false;
+        for (String tag : tags) {
+          if (appTags.contains(tag)) {
+            match = true;
+            break;
+          }
+        }
+        if (!match) {
+          continue;
+        }
+      }
+
+  @SuppressWarnings("unchecked")
-    throw new UnsupportedOperationException("Move not yet supported");
+    ApplicationId applicationId = request.getApplicationId();
+
+    UserGroupInformation callerUGI;
+    try {
+      callerUGI = UserGroupInformation.getCurrentUser();
+    } catch (IOException ie) {
+      LOG.info("Error getting UGI ", ie);
+      RMAuditLogger.logFailure("UNKNOWN", AuditConstants.MOVE_APP_REQUEST,
+          "UNKNOWN", "ClientRMService" , "Error getting UGI",
+          applicationId);
+      throw RPCUtil.getRemoteException(ie);
+    }
+
+    RMApp application = this.rmContext.getRMApps().get(applicationId);
+    if (application == null) {
+      RMAuditLogger.logFailure(callerUGI.getUserName(),
+          AuditConstants.MOVE_APP_REQUEST, "UNKNOWN", "ClientRMService",
+          "Trying to move an absent application", applicationId);
+      throw new ApplicationNotFoundException("Trying to move an absent"
+          + " application " + applicationId);
+    }
+
+    if (!checkAccess(callerUGI, application.getUser(),
+        ApplicationAccessType.MODIFY_APP, application)) {
+      RMAuditLogger.logFailure(callerUGI.getShortUserName(),
+          AuditConstants.MOVE_APP_REQUEST,
+          "User doesn't have permissions to "
+              + ApplicationAccessType.MODIFY_APP.toString(), "ClientRMService",
+          AuditConstants.UNAUTHORIZED_USER, applicationId);
+      throw RPCUtil.getRemoteException(new AccessControlException("User "
+          + callerUGI.getShortUserName() + " cannot perform operation "
+          + ApplicationAccessType.MODIFY_APP.name() + " on " + applicationId));
+    }
+    
+    // Moves only allowed when app is in a state that means it is tracked by
+    // the scheduler
+    if (EnumSet.of(RMAppState.NEW, RMAppState.NEW_SAVING, RMAppState.FAILED,
+        RMAppState.FINAL_SAVING, RMAppState.FINISHING, RMAppState.FINISHED,
+        RMAppState.KILLED, RMAppState.KILLING, RMAppState.FAILED)
+        .contains(application.getState())) {
+      String msg = "App in " + application.getState() + " state cannot be moved.";
+      RMAuditLogger.logFailure(callerUGI.getShortUserName(),
+          AuditConstants.MOVE_APP_REQUEST, "UNKNOWN", "ClientRMService", msg);
+      throw new YarnException(msg);
+    }
+
+    SettableFuture<Object> future = SettableFuture.create();
+    this.rmContext.getDispatcher().getEventHandler().handle(
+        new RMAppMoveEvent(applicationId, request.getTargetQueue(), future));
+    
+    try {
+      Futures.get(future, YarnException.class);
+    } catch (YarnException ex) {
+      RMAuditLogger.logFailure(callerUGI.getShortUserName(),
+          AuditConstants.MOVE_APP_REQUEST, "UNKNOWN", "ClientRMService",
+          ex.getMessage());
+      throw ex;
+    }
+
+    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), 
+        AuditConstants.MOVE_APP_REQUEST, "ClientRMService" , applicationId);
+    MoveApplicationAcrossQueuesResponse response = recordFactory
+        .newRecordInstance(MoveApplicationAcrossQueuesResponse.class);
+    return response;
-    this.server.refreshServiceAcl(configuration, policyProvider);
+    if (this.useLocalConfigurationProvider) {
+      this.server.refreshServiceAcl(configuration, policyProvider);
+    } else {
+      this.server.refreshServiceAclWithConfigration(configuration,
+          policyProvider);
+    }
+
+  @VisibleForTesting
+  public Server getServer() {
+    return this.server;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS39 INS59 INS79 INS8 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS21 INS60 INS60 INS42 INS45 INS60 INS60 INS54 INS60 INS25 INS25 INS25 INS60 INS21 INS54 INS21 INS60 INS41 INS25 INS42 INS42 INS41 INS7 INS74 INS59 INS43 INS59 MOV60 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS27 INS8 INS38 INS8 INS32 INS8 INS74 INS59 INS32 INS8 INS12 INS32 INS43 INS59 INS42 INS22 MOV8 INS8 INS22 INS22 INS36 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS25 INS25 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS21 MOV53 INS32 INS21 INS53 INS32 INS42 INS32 INS60 INS21 INS53 INS43 INS43 INS42 INS32 INS32 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS32 INS40 INS45 INS42 INS42 INS42 INS32 INS52 INS42 INS21 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS25 INS27 INS8 INS42 INS42 INS7 INS43 INS42 INS21 INS21 INS53 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS32 INS32 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS32 INS42 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS57 INS32 INS57 INS42 INS32 INS27 INS38 INS18 INS27 INS8 INS27 INS38 INS60 INS25 INS60 INS70 INS25 INS42 INS32 INS42 INS32 INS32 INS32 INS22 INS42 INS42 INS42 INS32 INS40 INS45 INS45 INS45 INS42 UPD43 INS27 INS42 INS42 INS42 INS42 INS32 INS40 INS27 INS45 INS40 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS32 INS40 INS45 INS45 INS42 INS43 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS32 INS42 INS43 INS22 INS42 INS42 INS42 INS43 INS42 INS42 INS40 INS57 INS42 INS40 INS32 INS27 INS38 INS18 INS42 INS33 INS32 INS74 INS59 INS27 INS8 INS39 INS59 INS44 INS42 INS8 INS38 INS8 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS40 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 UPD42 INS45 INS45 INS42 INS42 INS42 INS45 INS32 INS43 INS27 INS45 INS32 INS45 INS42 INS42 INS42 INS52 INS42 INS43 INS42 INS42 INS32 INS40 INS45 INS45 INS32 INS42 INS52 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS27 INS32 INS18 INS42 INS9 INS43 INS42 INS25 INS42 INS18 INS40 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS21 INS10 INS7 INS42 INS9 DEL45 DEL8