HADOOP-14999. AliyunOSS: provide one asynchronous multi-part based uploading mechanism. Contributed by Genmao Yu.

+import java.io.File;
-import java.io.InputStream;
+import com.google.common.base.Preconditions;
+import org.apache.hadoop.fs.LocalDirAllocator;
+  private static LocalDirAllocator directoryAllocator;
-   * Skip the requested number of bytes or fail if there are no enough bytes
-   * left. This allows for the possibility that {@link InputStream#skip(long)}
-   * may not skip as many bytes as requested (most likely because of reaching
-   * EOF).
-   *
-   * @param is the input stream to skip.
-   * @param n the number of bytes to skip.
-   * @throws IOException thrown when skipped less number of bytes.
-   */
-  public static void skipFully(InputStream is, long n) throws IOException {
-    long total = 0;
-    long cur = 0;
-
-    do {
-      cur = is.skip(n - total);
-      total += cur;
-    } while((total < n) && (cur > 0));
-
-    if (total < n) {
-      throw new IOException("Failed to skip " + n + " bytes, possibly due " +
-              "to EOF.");
-    }
-  }
-
-  /**
-    String className = conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);
+    String className = conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);
-            "constructor.", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),
+            "constructor.", className, CREDENTIALS_PROVIDER_KEY),
+
+  /**
+   * Demand create the directory allocator, then create a temporary file.
+   *  @param path prefix for the temporary file
+   *  @param size the size of the file that is going to be written
+   *  @param conf the Configuration object
+   *  @return a unique temporary file
+   *  @throws IOException IO problems
+   */
+  public static File createTmpFileForWrite(String path, long size,
+      Configuration conf) throws IOException {
+    if (conf.get(BUFFER_DIR_KEY) == null) {
+      conf.set(BUFFER_DIR_KEY, conf.get("hadoop.tmp.dir") + "/oss");
+    }
+    if (directoryAllocator == null) {
+      directoryAllocator = new LocalDirAllocator(BUFFER_DIR_KEY);
+    }
+    return directoryAllocator.createTmpFileForWrite(path, size, conf);
+  }
+
+  /**
+   * Get a integer option >= the minimum allowed value.
+   * @param conf configuration
+   * @param key key to look up
+   * @param defVal default value
+   * @param min minimum value
+   * @return the value
+   * @throws IllegalArgumentException if the value is below the minimum
+   */
+  static int intOption(Configuration conf, String key, int defVal, int min) {
+    int v = conf.getInt(key, defVal);
+    Preconditions.checkArgument(v >= min,
+        String.format("Value of %s: %d is below the minimum value %d",
+            key, v, min));
+    LOG.debug("Value of {} is {}", key, v);
+    return v;
+  }
+
+  /**
+   * Get a long option >= the minimum allowed value.
+   * @param conf configuration
+   * @param key key to look up
+   * @param defVal default value
+   * @param min minimum value
+   * @return the value
+   * @throws IllegalArgumentException if the value is below the minimum
+   */
+  static long longOption(Configuration conf, String key, long defVal,
+      long min) {
+    long v = conf.getLong(key, defVal);
+    Preconditions.checkArgument(v >= min,
+        String.format("Value of %s: %d is below the minimum value %d",
+            key, v, min));
+    LOG.debug("Value of {} is {}", key, v);
+    return v;
+  }
+
+  /**
+   * Get a size property from the configuration: this property must
+   * be at least equal to {@link Constants#MULTIPART_MIN_SIZE}.
+   * If it is too small, it is rounded up to that minimum, and a warning
+   * printed.
+   * @param conf configuration
+   * @param property property name
+   * @param defVal default value
+   * @return the value, guaranteed to be above the minimum size
+   */
+  public static long getMultipartSizeProperty(Configuration conf,
+      String property, long defVal) {
+    long partSize = conf.getLong(property, defVal);
+    if (partSize < MULTIPART_MIN_SIZE) {
+      LOG.warn("{} must be at least 100 KB; configured value is {}",
+          property, partSize);
+      partSize = MULTIPART_MIN_SIZE;
+    } else if (partSize > Integer.MAX_VALUE) {
+      LOG.warn("oss: {} capped to ~2.14GB(maximum allowed size with " +
+          "current output mechanism)", MULTIPART_UPLOAD_PART_SIZE_KEY);
+      partSize = Integer.MAX_VALUE;
+    }
+    return partSize;
+  }

MOV26 INS26 INS26 UPD40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 MOV43 INS8 INS29 UPD83 MOV83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS29 MOV83 UPD39 MOV39 UPD42 MOV42 INS44 MOV44 MOV44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS25 INS25 INS41 INS65 INS65 MOV65 INS65 MOV65 INS65 MOV65 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS60 INS21 INS21 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 UPD43 UPD42 UPD42 INS39 INS42 MOV60 MOV21 MOV21 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS60 MOV25 INS41 UPD66 MOV66 INS42 UPD66 MOV66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS27 INS8 INS27 INS8 INS32 UPD66 MOV66 INS42 UPD66 MOV66 UPD42 UPD66 INS42 INS66 UPD42 UPD66 INS66 UPD42 UPD66 INS42 INS42 INS39 INS59 INS32 INS32 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 UPD42 INS32 INS32 INS42 INS66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS39 INS59 INS8 INS25 INS42 INS32 INS33 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD27 MOV27 INS32 INS42 INS42 INS45 INS42 INS42 INS67 INS42 INS32 UPD42 UPD42 INS21 INS21 INS27 MOV8 UPD42 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS40 INS21 INS21 INS42 INS42 INS42 INS27 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS45 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS45 INS42 UPD45 MOV45 UPD45 MOV45 UPD42 DEL42 DEL42 DEL39 DEL69 DEL68 DEL65 DEL65 DEL29 DEL39 DEL42 DEL34 DEL59 DEL60 DEL8 DEL42 DEL42 DEL27 DEL36 DEL42 DEL34 DEL27 DEL36 DEL27 DEL19 DEL8 DEL31 DEL42 DEL34 DEL42 DEL32 DEL7 DEL42 DEL42 DEL7 DEL42 DEL43 DEL42 DEL45 DEL27 DEL14 DEL53