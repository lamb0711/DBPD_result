HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.

-  public static final Logger LOG = LoggerFactory.getLogger(StripedBlockUtil.class);
+  public static final Logger LOG =
+      LoggerFactory.getLogger(StripedBlockUtil.class);
-  public static byte[][] initDecodeInputs(AlignedStripe alignedStripe,
+  public static ByteBuffer[] initDecodeInputs(AlignedStripe alignedStripe,
-    byte[][] decodeInputs =
-        new byte[dataBlkNum + parityBlkNum][(int) alignedStripe.getSpanInBlock()];
+    ByteBuffer[] decodeInputs = new ByteBuffer[dataBlkNum + parityBlkNum];
+    for (int i = 0; i < decodeInputs.length; i++) {
+      decodeInputs[i] = ByteBuffer.allocate(
+          (int) alignedStripe.getSpanInBlock());
+    }
-        alignedStripe.chunks[i].addByteArraySlice(0,
-            (int) alignedStripe.getSpanInBlock());
-  public static void finalizeDecodeInputs(final byte[][] decodeInputs,
+  public static void finalizeDecodeInputs(final ByteBuffer[] decodeInputs,
-        chunk.copyTo(decodeInputs[i]);
+        if (chunk.useChunkBuffer()) {
+          chunk.getChunkBuffer().copyTo(decodeInputs[i]);
+        } else {
+          chunk.getByteBuffer().flip();
+        }
-        Arrays.fill(decodeInputs[i], (byte) 0);
+        //ZERO it. Will be better handled in other following issue.
+        byte[] emptyBytes = new byte[decodeInputs[i].limit()];
+        decodeInputs[i].put(emptyBytes);
+        decodeInputs[i].flip();
-  public static void decodeAndFillBuffer(final byte[][] decodeInputs,
+  public static void decodeAndFillBuffer(final ByteBuffer[] decodeInputs,
-    byte[][] decodeOutputs =
-        new byte[decodeIndices.length][(int) alignedStripe.getSpanInBlock()];
+    ByteBuffer[] decodeOutputs = new ByteBuffer[decodeIndices.length];
+    for (int i = 0; i < decodeOutputs.length; i++) {
+      decodeOutputs[i] = ByteBuffer.allocate(
+          (int) alignedStripe.getSpanInBlock());
+    }
-      if (chunk.state == StripingChunk.MISSING) {
-        chunk.copyFrom(decodeOutputs[i]);
+      if (chunk.state == StripingChunk.MISSING && chunk.useChunkBuffer()) {
+        chunk.getChunkBuffer().copyFrom(decodeOutputs[i]);
-    int bufOffset = (int) (rangeStartInBlockGroup % ((long) cellSize * dataBlkNum));
+    int bufOffset =
+        (int) (rangeStartInBlockGroup % ((long) cellSize * dataBlkNum));
-   * @param offsetInBuf Start offset into the destination buffer
-  public static AlignedStripe[] divideByteRangeIntoStripes(ErasureCodingPolicy ecPolicy,
+  public static AlignedStripe[] divideByteRangeIntoStripes(
+      ErasureCodingPolicy ecPolicy,
-      long rangeStartInBlockGroup, long rangeEndInBlockGroup, byte[] buf,
-      int offsetInBuf) {
+      long rangeStartInBlockGroup, long rangeEndInBlockGroup, ByteBuffer buf) {
-    calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf, offsetInBuf);
+    calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf);
-  private static StripingCell[] getStripingCellsOfByteRange(ErasureCodingPolicy ecPolicy,
+  private static StripingCell[] getStripingCellsOfByteRange(
+      ErasureCodingPolicy ecPolicy,
-  private static VerticalRange[] getRangesForInternalBlocks(ErasureCodingPolicy ecPolicy,
+  private static VerticalRange[] getRangesForInternalBlocks(
+      ErasureCodingPolicy ecPolicy,
-      AlignedStripe[] stripes, StripingCell[] cells, byte[] buf,
-      int offsetInBuf) {
+      AlignedStripe[] stripes, StripingCell[] cells, ByteBuffer buf) {
+      StripingChunk chunk;
-        if (s.chunks[cell.idxInStripe] == null) {
-          s.chunks[cell.idxInStripe] = new StripingChunk(buf);
+        chunk = s.chunks[cell.idxInStripe];
+        if (chunk == null) {
+          chunk = new StripingChunk();
+          s.chunks[cell.idxInStripe] = chunk;
-        s.chunks[cell.idxInStripe].addByteArraySlice(
-            (int)(offsetInBuf + done + overlapStart - cellStart), overLapLen);
+        chunk.getChunkBuffer().addSlice(buf,
+            (int) (done + overlapStart - cellStart), overLapLen);
-    public final ChunkByteArray byteArray;
-    public final ByteBuffer byteBuffer;
+    private final ChunkByteBuffer chunkBuffer;
+    private final ByteBuffer byteBuffer;
-    public StripingChunk(byte[] buf) {
-      this.byteArray = new ChunkByteArray(buf);
+    public StripingChunk() {
+      this.chunkBuffer = new ChunkByteBuffer();
-      this.byteArray = null;
+      this.chunkBuffer = null;
-      this.byteArray = null;
+      this.chunkBuffer = null;
-    public void addByteArraySlice(int offset, int length) {
-      assert byteArray != null;
-      byteArray.offsetsInBuf.add(offset);
-      byteArray.lengthsInBuf.add(length);
+    public boolean useByteBuffer(){
+      return byteBuffer != null;
-    void copyTo(byte[] target) {
-      assert byteArray != null;
-      byteArray.copyTo(target);
+    public boolean useChunkBuffer() {
+      return chunkBuffer != null;
-    void copyFrom(byte[] src) {
-      assert byteArray != null;
-      byteArray.copyFrom(src);
+    public ByteBuffer getByteBuffer() {
+      assert byteBuffer != null;
+      return byteBuffer;
+    }
+
+    public ChunkByteBuffer getChunkBuffer() {
+      assert chunkBuffer != null;
+      return chunkBuffer;
-  public static class ChunkByteArray {
-    private final byte[] buf;
-    private final List<Integer> offsetsInBuf;
-    private final List<Integer> lengthsInBuf;
+  /**
+   * A utility to manage ByteBuffer slices for a reader.
+   */
+  public static class ChunkByteBuffer {
+    private final List<ByteBuffer> slices;
-    ChunkByteArray(byte[] buf) {
-      this.buf = buf;
-      this.offsetsInBuf = new ArrayList<>();
-      this.lengthsInBuf = new ArrayList<>();
+    ChunkByteBuffer() {
+      this.slices = new ArrayList<>();
-    public int[] getOffsets() {
-      int[] offsets = new int[offsetsInBuf.size()];
-      for (int i = 0; i < offsets.length; i++) {
-        offsets[i] = offsetsInBuf.get(i);
+    public void addSlice(ByteBuffer buffer, int offset, int len) {
+      ByteBuffer tmp = buffer.duplicate();
+      tmp.position(buffer.position() + offset);
+      tmp.limit(buffer.position() + offset + len);
+      slices.add(tmp.slice());
+    }
+
+    public ByteBuffer getSlice(int i) {
+      return slices.get(i);
+    }
+
+    public List<ByteBuffer> getSlices() {
+      return slices;
+    }
+
+    /**
+     *  Note: target will be ready-to-read state after the call.
+     */
+    void copyTo(ByteBuffer target) {
+      for (ByteBuffer slice : slices) {
+        slice.flip();
+        target.put(slice);
-      return offsets;
+      target.flip();
-    public int[] getLengths() {
-      int[] lens = new int[this.lengthsInBuf.size()];
-      for (int i = 0; i < lens.length; i++) {
-        lens[i] = this.lengthsInBuf.get(i);
-      }
-      return lens;
-    }
-
-    public byte[] buf() {
-      return buf;
-    }
-
-    void copyTo(byte[] target) {
-      int posInBuf = 0;
-      for (int i = 0; i < offsetsInBuf.size(); i++) {
-        System.arraycopy(buf, offsetsInBuf.get(i),
-            target, posInBuf, lengthsInBuf.get(i));
-        posInBuf += lengthsInBuf.get(i);
-      }
-    }
-
-    void copyFrom(byte[] src) {
-      int srcPos = 0;
-      for (int j = 0; j < offsetsInBuf.size(); j++) {
-        System.arraycopy(src, srcPos, buf, offsetsInBuf.get(j),
-            lengthsInBuf.get(j));
-        srcPos += lengthsInBuf.get(j);
+    void copyFrom(ByteBuffer src) {
+      ByteBuffer tmp;
+      int len;
+      for (ByteBuffer slice : slices) {
+        len = slice.remaining();
+        tmp = src.duplicate();
+        tmp.limit(tmp.position() + len);
+        slice.put(tmp);
+        src.position(src.position() + len);

UPD5 INS31 INS31 INS29 UPD42 INS31 INS43 INS24 UPD5 UPD5 INS24 INS43 INS43 UPD83 UPD43 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 INS83 INS39 INS42 MOV8 INS83 INS43 INS42 INS83 INS43 INS42 INS65 UPD74 UPD42 INS83 INS39 INS42 INS44 MOV44 INS44 MOV8 INS43 INS42 INS44 INS8 UPD74 MOV74 UPD42 INS29 INS42 UPD5 MOV58 INS27 MOV37 INS8 INS43 INS43 UPD5 MOV58 INS27 MOV37 INS8 UPD42 UPD66 INS42 INS42 UPD42 UPD42 INS41 INS41 INS42 INS41 INS42 INS41 INS66 UPD43 UPD42 INS43 INS42 INS39 INS42 INS21 INS21 INS21 INS42 INS39 INS42 INS41 UPD43 INS65 INS43 INS70 MOV21 INS43 INS60 INS70 INS43 INS42 INS40 INS21 INS42 INS42 INS43 INS42 INS40 INS21 INS60 INS27 INS27 INS42 INS42 UPD42 INS42 INS43 INS32 INS32 INS32 INS32 UPD42 UPD42 INS66 INS42 INS44 INS42 INS8 INS32 INS42 INS43 INS39 INS59 INS44 INS42 INS8 INS42 UPD5 INS7 INS8 INS42 UPD5 INS7 INS27 MOV43 INS59 INS42 INS33 UPD42 MOV42 MOV33 UPD42 UPD42 INS42 UPD42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS32 INS42 MOV42 MOV42 INS43 INS42 INS21 MOV21 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 MOV42 INS43 INS42 INS21 INS21 INS21 INS21 MOV21 INS43 INS2 INS32 INS25 INS43 INS2 INS32 MOV27 INS32 INS42 MOV21 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS7 INS7 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 MOV11 INS32 MOV8 INS8 INS60 INS21 INS42 INS42 INS42 INS42 INS42 MOV11 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS27 INS42 INS42 INS21 MOV5 INS59 INS32 INS32 INS42 INS42 INS21 INS21 INS32 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS3 INS2 INS42 INS42 INS2 UPD42 MOV42 INS42 INS7 INS7 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 MOV2 INS32 INS42 MOV5 MOV32 MOV42 INS42 INS42 INS42 INS42 INS42 INS14 MOV2 INS42 INS42 INS42 INS42 INS42 UPD42 INS43 INS42 DEL39 DEL85 DEL39 DEL85 DEL39 DEL85 DEL40 DEL42 DEL2 DEL42 DEL34 DEL39 DEL42 DEL42 DEL32 DEL11 DEL32 DEL21 DEL39 DEL85 DEL42 DEL42 DEL39 DEL34 DEL11 DEL39 DEL85 DEL39 DEL85 DEL39 DEL85 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL39 DEL42 DEL44 DEL42 DEL14 DEL40 DEL40 DEL2 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL27 DEL6 DEL40 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL31 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL59 DEL23 DEL39 DEL85 DEL5 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL32 DEL3 DEL42 DEL40 DEL27 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL83 DEL39 DEL85 DEL5 DEL42 DEL31 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL52 DEL42 DEL22 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL2 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL8 DEL24 DEL39 DEL85 DEL5 DEL39 DEL34 DEL42 DEL32 DEL7 DEL39 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL24