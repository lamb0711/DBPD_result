YARN-6619. AMRMClient Changes to use the PlacementConstraint and SchcedulingRequest objects. (Arun Suresh via wangda)

+import java.util.Queue;
+import java.util.concurrent.ConcurrentHashMap;
+import org.apache.hadoop.yarn.api.records.SchedulingRequest;
+import org.apache.hadoop.yarn.api.resource.PlacementConstraint;
+  private Map<Set<String>, PlacementConstraint> placementConstraints =
+      new HashMap<>();
+  private Queue<Collection<SchedulingRequest>> batchedSchedulingRequests =
+      new LinkedList<>();
+  private Map<Set<String>, List<SchedulingRequest>> outstandingSchedRequests =
+      new ConcurrentHashMap<>();
-  
+
+    return registerApplicationMaster(appHostName, appHostPort, appTrackingUrl,
+        null);
+  }
+
+  @Override
+  public RegisterApplicationMasterResponse registerApplicationMaster(
+      String appHostName, int appHostPort, String appTrackingUrl,
+      Map<Set<String>, PlacementConstraint> placementConstraintsMap)
+      throws YarnException, IOException {
+    if (placementConstraintsMap != null && !placementConstraintsMap.isEmpty()) {
+      this.placementConstraints.putAll(placementConstraintsMap);
+    }
+    if (!this.placementConstraints.isEmpty()) {
+      request.setPlacementConstraints(this.placementConstraints);
+    }
+      List<Container> prevContainers =
+          response.getContainersFromPreviousAttempts();
+      removeFromOutstandingSchedulingRequests(prevContainers);
+      recreateSchedulingRequestBatch();
+  public void addSchedulingRequests(
+      Collection<SchedulingRequest> schedulingRequests) {
+    synchronized (this.batchedSchedulingRequests) {
+      this.batchedSchedulingRequests.add(schedulingRequests);
+    }
+  }
+
+  @Override
+        populateSchedulingRequests(allocateRequest);
+        removeFromOutstandingSchedulingRequests(
+            allocateResponse.getAllocatedContainers());
+        removeFromOutstandingSchedulingRequests(
+            allocateResponse.getContainersFromPreviousAttempts());
+  private void populateSchedulingRequests(AllocateRequest allocateRequest) {
+    synchronized (this.batchedSchedulingRequests) {
+      if (!this.batchedSchedulingRequests.isEmpty()) {
+        List<SchedulingRequest> newReqs = new LinkedList<>();
+        Iterator<Collection<SchedulingRequest>> iter =
+            this.batchedSchedulingRequests.iterator();
+        while (iter.hasNext()) {
+          Collection<SchedulingRequest> requests = iter.next();
+          newReqs.addAll(requests);
+          addToOutstandingSchedulingRequests(requests);
+          iter.remove();
+        }
+        allocateRequest.setSchedulingRequests(newReqs);
+      }
+    }
+  }
+
+  private void recreateSchedulingRequestBatch() {
+    List<SchedulingRequest> batched = new ArrayList<>();
+    synchronized (this.outstandingSchedRequests) {
+      for (List<SchedulingRequest> schedReqs :
+          this.outstandingSchedRequests.values()) {
+        batched.addAll(schedReqs);
+      }
+    }
+    synchronized (this.batchedSchedulingRequests) {
+      this.batchedSchedulingRequests.add(batched);
+    }
+  }
+
+  private void addToOutstandingSchedulingRequests(
+      Collection<SchedulingRequest> requests) {
+    for (SchedulingRequest req : requests) {
+      List<SchedulingRequest> schedulingRequests =
+          this.outstandingSchedRequests.computeIfAbsent(
+              req.getAllocationTags(), x -> new LinkedList<>());
+      SchedulingRequest matchingReq = null;
+      synchronized (schedulingRequests) {
+        for (SchedulingRequest schedReq : schedulingRequests) {
+          if (isMatching(req, schedReq)) {
+            matchingReq = schedReq;
+            break;
+          }
+        }
+        if (matchingReq != null) {
+          matchingReq.getResourceSizing().setNumAllocations(
+              req.getResourceSizing().getNumAllocations());
+        } else {
+          schedulingRequests.add(req);
+        }
+      }
+    }
+  }
+
+  private boolean isMatching(SchedulingRequest schedReq1,
+      SchedulingRequest schedReq2) {
+    return schedReq1.getPriority().equals(schedReq2.getPriority()) &&
+        schedReq1.getExecutionType().getExecutionType().equals(
+            schedReq1.getExecutionType().getExecutionType()) &&
+        schedReq1.getAllocationRequestId() ==
+            schedReq2.getAllocationRequestId();
+  }
+
+  private void removeFromOutstandingSchedulingRequests(
+      Collection<Container> containers) {
+    if (containers == null || containers.isEmpty()) {
+      return;
+    }
+    for (Container container : containers) {
+      if (container.getAllocationTags() != null &&
+          !container.getAllocationTags().isEmpty()) {
+        List<SchedulingRequest> schedReqs =
+            this.outstandingSchedRequests.get(container.getAllocationTags());
+        if (schedReqs != null && !schedReqs.isEmpty()) {
+          synchronized (schedReqs) {
+            Iterator<SchedulingRequest> iter = schedReqs.iterator();
+            while (iter.hasNext()) {
+              SchedulingRequest schedReq = iter.next();
+              if (schedReq.getPriority().equals(container.getPriority()) &&
+                  schedReq.getAllocationRequestId() ==
+                      container.getAllocationRequestId()) {
+                int numAllocations =
+                    schedReq.getResourceSizing().getNumAllocations();
+                numAllocations--;
+                if (numAllocations == 0) {
+                  iter.remove();
+                } else {
+                  schedReq.getResourceSizing()
+                      .setNumAllocations(numAllocations);
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS44 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS43 INS74 INS43 INS42 INS14 INS43 INS74 INS42 INS14 INS43 INS74 INS74 INS42 INS14 INS42 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS41 INS74 INS42 INS25 INS25 INS42 INS74 INS42 INS51 INS43 INS42 INS51 INS60 INS51 INS51 INS74 INS42 INS70 INS43 INS42 INS43 INS42 INS41 INS74 INS42 INS25 INS70 INS42 INS43 INS43 INS42 INS74 INS42 INS43 INS43 INS74 INS42 INS43 INS43 INS43 INS43 INS74 INS42 INS42 INS32 INS43 INS74 INS43 INS27 INS8 INS38 INS8 INS43 INS43 INS22 INS8 INS42 INS22 INS8 INS74 INS59 INS22 INS8 INS22 INS8 INS43 INS43 INS44 INS42 INS8 INS42 INS42 INS27 INS43 INS43 INS27 INS8 INS44 INS42 INS8 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS33 INS42 INS43 INS43 INS42 INS27 INS38 INS21 INS32 INS21 INS60 INS21 INS21 INS42 INS42 INS52 INS42 INS21 INS52 INS42 INS25 INS43 INS43 INS42 INS14 INS52 INS42 INS70 INS52 INS42 INS21 INS42 INS42 INS43 INS42 INS60 INS60 INS51 INS32 INS32 INS27 INS42 INS42 INS27 INS32 INS41 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS22 INS42 INS32 INS74 INS59 INS32 INS32 INS32 INS38 INS8 INS42 INS42 INS74 INS44 INS32 INS8 INS32 INS42 INS74 INS59 INS43 INS59 INS42 INS8 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS33 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS22 INS42 INS42 INS52 INS42 INS42 INS42 INS22 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS42 INS21 INS21 INS21 INS32 INS60 INS60 INS61 INS21 INS43 INS74 INS42 INS22 INS42 INS21 INS22 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS33 INS70 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS38 INS60 INS25 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS32 INS32 INS22 INS42 INS74 INS59 INS74 INS59 INS32 INS8 INS32 INS42 INS43 INS43 INS52 INS42 INS32 INS52 INS42 INS42 INS42 INS22 INS42 INS32 INS86 INS44 INS42 INS8 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS33 INS32 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS52 INS42 INS43 INS43 INS42 INS14 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS59 INS14 INS43 INS42 INS25 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS32 INS27 INS38 INS51 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS43 INS43 INS22 INS42 INS74 INS59 INS32 INS32 INS32 INS42 INS74 INS42 INS32 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS22 INS42 INS32 INS42 INS33 INS32 INS42 INS8 INS43 INS42 INS42 INS52 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS10 INS32 INS42 INS32 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS60 INS61 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS74 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS32 INS27 INS60 INS21 INS25 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS39 INS59 INS37 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS21 INS21 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42