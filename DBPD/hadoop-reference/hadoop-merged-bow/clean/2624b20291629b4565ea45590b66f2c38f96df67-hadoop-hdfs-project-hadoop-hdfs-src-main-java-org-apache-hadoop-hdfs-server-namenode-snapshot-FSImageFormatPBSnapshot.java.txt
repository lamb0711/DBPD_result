HDFS-5847. Consolidate INodeReference into a separate section. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567812 13f79535-47bb-0310-9956-ffa450edef68

-import static org.apache.hadoop.hdfs.server.namenode.FSImageFormatPBINode.Loader.loadINodeReference;
-import static org.apache.hadoop.hdfs.server.namenode.FSImageFormatPBINode.Saver.buildINodeReference;
+import org.apache.hadoop.hdfs.server.namenode.FSImageFormatProtobuf.SectionName;
+import org.apache.hadoop.hdfs.server.namenode.FsImageProto.INodeReferenceSection;
+import org.apache.hadoop.hdfs.server.namenode.INodeReference.DstReference;
+import org.apache.hadoop.hdfs.server.namenode.INodeReference.WithCount;
+import org.apache.hadoop.hdfs.server.namenode.INodeReference.WithName;
-
+     * The sequence of the ref node in refList must be strictly the same with
+     * the sequence in fsimage
+     */
+    public void loadINodeReferenceSection(InputStream in) throws IOException {
+      final List<INodeReference> refList = parent.getLoaderContext()
+          .getRefList();
+      while (true) {
+        INodeReferenceSection.INodeReference e = INodeReferenceSection
+            .INodeReference.parseDelimitedFrom(in);
+        if (e == null) {
+          break;
+        }
+        INodeReference ref = loadINodeReference(e);
+        refList.add(ref);
+      }
+    }
+
+    private INodeReference loadINodeReference(
+        INodeReferenceSection.INodeReference r) throws IOException {
+      long referredId = r.getReferredId();
+      INode referred = fsDir.getInode(referredId);
+      WithCount withCount = (WithCount) referred.getParentReference();
+      if (withCount == null) {
+        withCount = new INodeReference.WithCount(null, referred);
+      }
+      final INodeReference ref;
+      if (r.hasDstSnapshotId()) { // DstReference
+        ref = new INodeReference.DstReference(null, withCount,
+            r.getDstSnapshotId());
+      } else {
+        ref = new INodeReference.WithName(null, withCount, r.getName()
+            .toByteArray(), r.getLastSnapshotId());
+      }
+      return ref;
+    }
+
+    /**
+      final List<INodeReference> refList = parent.getLoaderContext()
+          .getRefList();
-          loadDirectoryDiffList(in, inode.asDirectory(), entry.getNumOfDiff());
+          loadDirectoryDiffList(in, inode.asDirectory(), entry.getNumOfDiff(),
+              refList);
-     * @param totalSize the total size of the deleted list
-     * @param deletedNodes non-reference inodes in the deleted list. These
-     *        inodes' ids are directly recorded in protobuf
-    private List<INode> loadDeletedList(InputStream in, INodeDirectory dir,
-        int refNum, List<Long> deletedNodes) throws IOException {
-      List<INode> dlist = new ArrayList<INode>(refNum + deletedNodes.size());
+    private List<INode> loadDeletedList(final List<INodeReference> refList,
+        InputStream in, INodeDirectory dir, List<Long> deletedNodes,
+        List<Integer> deletedRefNodes)
+        throws IOException {
+      List<INode> dlist = new ArrayList<INode>(deletedRefNodes.size()
+          + deletedNodes.size());
-      for (int r = 0; r < refNum; r++) {
-        INodeSection.INodeReference ref = INodeSection.INodeReference
-            .parseDelimitedFrom(in);
-        INodeReference refNode = loadINodeReference(ref, fsDir);
-        dlist.add(refNode);
-        addToDeletedList(refNode, dir);
+      for (int refId : deletedRefNodes) {
+        INodeReference deletedRef = refList.get(refId);
+        dlist.add(deletedRef);
+        addToDeletedList(deletedRef, dir);
+
-        int size) throws IOException {
+        int size, final List<INodeReference> refList) throws IOException {
-        }else if (diffInPb.hasSnapshotCopy()) {
+        } else if (diffInPb.hasSnapshotCopy()) {
-        List<INode> dlist = loadDeletedList(in, dir,
-            diffInPb.getNumOfDeletedRef(), diffInPb.getDeletedINodeList());
+        List<INode> dlist = loadDeletedList(refList, in, dir,
+            diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());
-        FileSummary.Builder headers, SaveNamespaceContext context, FSNamesystem fsn) {
+        FileSummary.Builder headers, SaveNamespaceContext context,
+        FSNamesystem fsn) {
+     * This can only be called after serializing both INode_Dir and SnapshotDiff
+     */
+    public void serializeINodeReferenceSection(OutputStream out)
+        throws IOException {
+      final List<INodeReference> refList = parent.getSaverContext()
+          .getRefList();
+      for (INodeReference ref : refList) {
+        INodeReferenceSection.INodeReference.Builder rb = buildINodeReference(ref);
+        rb.build().writeDelimitedTo(out);
+      }
+      parent.commitSection(headers, SectionName.INODE_REFRENCE);
+    }
+
+    private INodeReferenceSection.INodeReference.Builder buildINodeReference(
+        INodeReference ref) throws IOException {
+      INodeReferenceSection.INodeReference.Builder rb =
+          INodeReferenceSection.INodeReference.newBuilder().
+            setReferredId(ref.getId());
+      if (ref instanceof WithName) {
+        rb.setLastSnapshotId(((WithName) ref).getLastSnapshotId()).setName(
+            ByteString.copyFrom(ref.getLocalNameBytes()));
+      } else if (ref instanceof DstReference) {
+        rb.setDstSnapshotId(((DstReference) ref).getDstSnapshotId());
+      }
+      return rb;
+    }
+
+    /**
+      final List<INodeReference> refList = parent.getSaverContext()
+          .getRefList();
-          serializeDirDiffList(inode.asDirectory(), out);
+          serializeDirDiffList(inode.asDirectory(), refList, out);
-    private void saveCreatedDeletedList(List<INode> created,
-        List<INodeReference> deletedRefs, OutputStream out) throws IOException {
+    private void saveCreatedList(List<INode> created, OutputStream out)
+        throws IOException {
-      // reference nodes in deleted list
-      for (INodeReference ref : deletedRefs) {
-        INodeSection.INodeReference.Builder rb = buildINodeReference(ref);
-        rb.build().writeDelimitedTo(out);
-      }
-    private void serializeDirDiffList(INodeDirectory dir, OutputStream out)
+    private void serializeDirDiffList(INodeDirectory dir,
+        final List<INodeReference> refList, OutputStream out)
-          List<INodeReference> refs = new ArrayList<INodeReference>();
-              refs.add(d.asReference());
+              refList.add(d.asReference());
+              db.addDeletedINodeRef(refList.size() - 1);
-          db.setNumOfDeletedRef(refs.size());
-          saveCreatedDeletedList(created, refs, out);
+          saveCreatedList(created, out);

MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 UPD40 INS31 INS31 MOV44 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 UPD42 INS44 INS65 INS43 INS42 INS42 INS60 INS61 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS60 INS25 INS41 INS60 INS83 INS74 UPD42 INS74 INS42 INS70 INS83 INS74 INS42 INS65 INS43 INS42 INS42 INS60 MOV70 INS21 INS40 INS43 INS42 INS42 INS60 INS25 INS41 INS60 INS83 MOV74 INS42 INS66 INS66 INS42 INS83 INS74 INS59 INS9 INS8 INS40 INS39 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS83 MOV43 INS59 INS32 INS8 INS8 INS42 INS83 INS74 INS59 INS43 INS43 INS43 INS43 INS44 INS42 INS8 INS43 INS43 INS66 INS42 INS83 INS74 INS59 UPD42 INS32 INS42 INS43 INS59 INS62 INS8 INS25 INS42 INS83 MOV74 INS59 INS43 INS43 INS42 INS32 INS60 INS25 INS60 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS33 INS21 INS42 INS42 INS42 INS21 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS39 INS42 MOV60 MOV21 MOV21 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS40 INS40 INS42 INS32 INS42 INS43 INS21 INS62 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS7 INS7 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 UPD43 INS32 INS42 INS32 INS42 INS32 INS42 INS43 INS21 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS33 INS10 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV32 INS42 INS42 UPD40 INS40 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS33 INS42 INS43 INS33 INS42 INS32 INS43 INS33 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS40 INS42 INS42 INS40 INS32 INS42 INS42 INS42 UPD42 INS36 INS42 INS42 INS42 INS36 INS42 UPD42 INS42 INS42 INS11 INS11 INS42 INS43 INS42 INS43 INS42 INS21 INS42 INS42 INS32 UPD42 INS42 INS42 INS27 INS32 INS34 INS42 INS42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL39 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL40 DEL43 DEL42 DEL40 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL24 DEL42 DEL44 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42