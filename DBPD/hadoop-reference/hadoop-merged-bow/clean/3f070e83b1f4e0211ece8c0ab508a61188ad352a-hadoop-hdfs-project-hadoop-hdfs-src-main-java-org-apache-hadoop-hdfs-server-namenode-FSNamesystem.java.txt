HDFS-5009. Include storage information in the LocatedBlock.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1519691 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeStorageInfo;
-    final DatanodeDescriptor targets[] = getBlockManager().chooseTarget( 
+    // TODO: chooseTarget(..) should be changed to return DatanodeStorageInfo's
+    final DatanodeDescriptor chosenDatanodes[] = getBlockManager().chooseTarget( 
+    final DatanodeStorageInfo[] targets = new DatanodeStorageInfo[chosenDatanodes.length];
+    for(int i = 0; i < targets.length; i++) {
+      final DatanodeDescriptor dd = chosenDatanodes[i];
+      targets[i] = dd.getStorageInfos().iterator().next(); 
+    }
-            ((BlockInfoUnderConstruction)lastBlockInFile).getExpectedLocations(),
+            ((BlockInfoUnderConstruction)lastBlockInFile).getExpectedStorageLocations(),
-  LocatedBlock makeLocatedBlock(Block blk,
-                                        DatanodeInfo[] locs,
+  LocatedBlock makeLocatedBlock(Block blk, DatanodeStorageInfo[] locs,
-    LocatedBlock lBlk = new LocatedBlock(
-        getExtendedBlock(blk), locs, offset);
+    LocatedBlock lBlk = LocatedBlock.createLocatedBlock(
+        getExtendedBlock(blk), locs, offset, false);
-      Block newBlock, DatanodeDescriptor targets[]) throws IOException {
+      Block newBlock, DatanodeStorageInfo[] targets)
+          throws IOException {
-    for (DatanodeDescriptor dn : targets) {
-      dn.incBlocksScheduled();
+    for (DatanodeStorageInfo storage : targets) {
+      storage.getDatanodeDescriptor().incBlocksScheduled();
-        uc.setExpectedLocations(blockManager.getNodes(lastBlock));
+        uc.setExpectedLocations(blockManager.getStorages(lastBlock));
-        DatanodeDescriptor[] descriptors = null;
-        if (newtargets.length > 0) {
-          descriptors = new DatanodeDescriptor[newtargets.length];
-          for(int i = 0; i < newtargets.length; i++) {
-            descriptors[i] = blockManager.getDatanodeManager().getDatanode(
-                newtargets[i]);
-          }
-        }
-        if ((closeFile) && (descriptors != null)) {
+        final DatanodeStorageInfo[] storages = blockManager.getDatanodeManager()
+            .getDatanodeStorageInfos(newtargets, newtargetstorages);
+        if (closeFile && storages != null) {
-          for (int i = 0; i < descriptors.length; i++) {
-            descriptors[i].addBlock(newtargetstorages[i], storedBlock);
+          for (int i = 0; i < storages.length; i++) {
+            storages[i].addBlock(storedBlock);
-        pendingFile.setLastBlock(storedBlock, descriptors);
+        pendingFile.setLastBlock(storedBlock, storages);
-      ExtendedBlock newBlock, DatanodeID[] newNodes)
+      ExtendedBlock newBlock, DatanodeID[] newNodes, String[] newStorageIDs)
-          cacheEntry != null);
+          newStorageIDs, cacheEntry != null);
-      ExtendedBlock newBlock, DatanodeID[] newNodes, boolean logRetryCache)
+      ExtendedBlock newBlock, DatanodeID[] newNodes, String[] newStorageIDs,
+      boolean logRetryCache)
-    final DatanodeManager dm = getBlockManager().getDatanodeManager();
-    DatanodeDescriptor[] descriptors = null;
-    if (newNodes.length > 0) {
-      descriptors = new DatanodeDescriptor[newNodes.length];
-      for(int i = 0; i < newNodes.length; i++) {
-        descriptors[i] = dm.getDatanode(newNodes[i]);
-      }
-    }
-    blockinfo.setExpectedLocations(descriptors);
+    final DatanodeStorageInfo[] storages = blockManager.getDatanodeManager()
+        .getDatanodeStorageInfos(newNodes, newStorageIDs);
+    blockinfo.setExpectedLocations(storages);

INS26 INS40 INS44 INS44 INS60 INS24 UPD5 INS5 INS5 INS42 INS5 INS42 INS60 INS83 INS5 INS59 MOV58 INS27 MOV37 INS8 UPD43 MOV43 INS59 INS43 INS85 INS43 INS85 INS43 INS85 MOV83 UPD5 MOV5 INS59 UPD42 INS43 INS85 INS42 INS3 INS42 INS40 INS60 INS21 UPD42 INS42 INS32 UPD42 MOV42 UPD43 UPD42 INS42 INS42 UPD43 UPD42 MOV42 INS32 UPD42 INS42 INS5 INS40 INS83 MOV43 INS59 INS7 INS42 INS42 MOV32 INS42 INS42 INS9 UPD42 UPD42 INS32 UPD42 MOV42 INS42 INS42 INS43 INS85 INS42 INS42 INS2 INS2 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS83 UPD5 INS32 INS42 UPD42 UPD43 UPD42 MOV32 INS42 INS27 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 MOV42 MOV33 UPD40 UPD42 UPD42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL59 DEL85 DEL42 DEL42 DEL2 DEL33 DEL40 DEL34 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL42 DEL40 DEL27 DEL42 DEL42 DEL2 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL36 DEL27 DEL36 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL33 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25