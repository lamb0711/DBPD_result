HADOOP-16423. S3Guard fsck: Check metadata consistency between S3 and metadatastore (log) (#1208). Contributed by Gabor Bota.

Change-Id: I6bbb331b6c0a41c61043e482b95504fda8a50596
-      "\t" + SelectTool.NAME + " - " + SelectTool.PURPOSE + "\n";
+      "\t" + SelectTool.NAME + " - " + SelectTool.PURPOSE + "\n" +
+      "\t" + Fsck.NAME + " - " + Fsck.PURPOSE + "\n";
+  /**
+   * Fsck - check for consistency between S3 and the metadatastore.
+   */
+  static class Fsck extends S3GuardTool {
+    public static final String CHECK_FLAG = "check";
+
+    public static final String NAME = "fsck";
+    public static final String PURPOSE = "Compares S3 with MetadataStore, and "
+        + "returns a failure status if any rules or invariants are violated. "
+        + "Only works with DynamoDB metadata stores.";
+    private static final String USAGE = NAME + " [OPTIONS] [s3a://BUCKET]\n" +
+        "\t" + PURPOSE + "\n\n" +
+        "Common options:\n" +
+        "  -" + CHECK_FLAG + " Check the metadata store for errors, but do "
+        + "not fix any issues.\n";
+
+    Fsck(Configuration conf) {
+      super(conf, CHECK_FLAG);
+    }
+
+    @Override
+    public String getName() {
+      return NAME;
+    }
+
+    @Override
+    public String getUsage() {
+      return USAGE;
+    }
+
+    public int run(String[] args, PrintStream out) throws
+        InterruptedException, IOException {
+      List<String> paths = parseArgs(args);
+      if (paths.isEmpty()) {
+        out.println(USAGE);
+        throw invalidArgs("no arguments");
+      }
+      int exitValue = EXIT_SUCCESS;
+
+      String s3Path = paths.get(0);
+      try {
+        initS3AFileSystem(s3Path);
+      } catch (Exception e) {
+        errorln("Failed to initialize S3AFileSystem from path: " + s3Path);
+        throw e;
+      }
+
+      URI uri = toUri(s3Path);
+      Path root;
+      if (uri.getPath().isEmpty()) {
+        root = new Path("/");
+      } else {
+        root = new Path(uri.getPath());
+      }
+
+      final S3AFileSystem fs = getFilesystem();
+      initMetadataStore(false);
+      final MetadataStore ms = getStore();
+
+      if (ms == null ||
+          !(ms instanceof DynamoDBMetadataStore)) {
+        errorln(s3Path + " path uses MS: " + ms);
+        errorln(NAME + " can be only used with a DynamoDB backed s3a bucket.");
+        errorln(USAGE);
+        return ERROR;
+      }
+
+      final CommandFormat commandFormat = getCommandFormat();
+      if (commandFormat.getOpt(CHECK_FLAG)) {
+        // do the check
+        S3GuardFsck s3GuardFsck = new S3GuardFsck(fs, ms);
+        try {
+          final List<S3GuardFsck.ComparePair> comparePairs
+              = s3GuardFsck.compareS3ToMs(fs.qualify(root));
+          if (comparePairs.size() > 0) {
+            exitValue = EXIT_FAIL;
+          }
+        } catch (IOException e) {
+          throw e;
+        }
+      } else {
+        errorln("No supported operation is selected.");
+        errorln(USAGE);
+        return ERROR;
+      }
+
+      out.flush();
+      return exitValue;
+    }
+  }
+
+    case Fsck.NAME:
+      command = new Fsck(conf);
+      break;

INS55 INS29 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS65 INS42 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS45 INS40 INS45 INS40 INS45 INS66 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS42 INS46 INS42 INS42 INS41 INS42 INS42 INS41 INS5 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS54 INS60 INS60 INS25 INS60 INS21 INS60 INS25 INS60 INS25 INS21 INS41 INS21 INS10 INS49 INS45 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS74 INS59 INS32 INS8 INS39 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS83 INS43 INS59 INS32 INS83 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS32 INS8 INS8 INS32 INS42 INS40 INS7 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS27 INS38 INS21 INS21 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS54 INS21 INS21 INS41 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS34 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS33 INS36 INS32 INS32 INS32 INS42 INS42 INS43 INS59 INS8 INS12 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS14 INS62 INS42 INS27 INS42 INS27 INS42 INS42 INS42 INS42 INS14 INS60 INS25 INS44 INS8 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS43 INS45 INS43 INS32 INS42 INS43 INS42 INS45 INS42 INS42 INS45 INS43 INS42 INS42 INS83 INS74 INS59 INS27 INS8 INS43 INS42 INS53 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS34 INS21 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42