HDFS-8826. In Balancer, add an option to specify the source node list so that balancer only selects blocks to move from those nodes.

+import java.util.HashSet;
+import org.apache.hadoop.util.HostsFileReader;
+  private final Set<String> sourceNodes;
-    this.dispatcher = new Dispatcher(theblockpool, p.nodesToBeIncluded,
-        p.nodesToBeExcluded, movedWinWidth, moverThreads, dispatcherThreads,
+    this.dispatcher = new Dispatcher(theblockpool, p.includedNodes,
+        p.excludedNodes, movedWinWidth, moverThreads, dispatcherThreads,
+    this.sourceNodes = p.sourceNodes;
+      final boolean isSource = Util.isIncluded(sourceNodes, dn.getDatanodeInfo());
+        final double average = policy.getAvgUtilization(t);
+        if (utilization >= average && !isSource) {
+          LOG.info(dn + "[" + t + "] has utilization=" + utilization
+              + " >= average=" + average
+              + " but it is not specified as a source; skipping it.");
+          continue;
+        }
+
+        final double utilizationDiff = utilization - average;
-        final double utilizationDiff = utilization - policy.getAvgUtilization(t);
+    LOG.info("included nodes = " + p.includedNodes);
+    LOG.info("excluded nodes = " + p.excludedNodes);
+    LOG.info("source nodes = " + p.sourceNodes);
-        Collections.<String> emptySet(), Collections.<String> emptySet(),
+        Collections.<String>emptySet(), Collections.<String>emptySet(),
+        Collections.<String>emptySet(),
-    // exclude the nodes in this set from balancing operations
-    Set<String> nodesToBeExcluded;
-    //include only these nodes in balancing operations
-    Set<String> nodesToBeIncluded;
+    /** Exclude the nodes in this set. */
+    final Set<String> excludedNodes;
+    /** If empty, include any node; otherwise, include only these nodes. */
+    final Set<String> includedNodes;
+    /** If empty, any node can be a source;
+     *  otherwise, use only these nodes as source nodes.
+     */
+    final Set<String> sourceNodes;
-        Set<String> nodesToBeExcluded, Set<String> nodesToBeIncluded,
-        boolean runDuringUpgrade) {
+        Set<String> excludedNodes, Set<String> includedNodes,
+        Set<String> sourceNodes, boolean runDuringUpgrade) {
-      this.nodesToBeExcluded = nodesToBeExcluded;
-      this.nodesToBeIncluded = nodesToBeIncluded;
+      this.excludedNodes = excludedNodes;
+      this.includedNodes = includedNodes;
+      this.sourceNodes = sourceNodes;
-              + " max idle iteration = %s, "
-              + "number of nodes to be excluded = %s,"
-              + " number of nodes to be included = %s,"
+              + " max idle iteration = %s,"
+              + " #excluded nodes = %s,"
+              + " #included nodes = %s,"
+              + " #source nodes = %s,"
-          nodesToBeExcluded.size(), nodesToBeIncluded.size(),
+          excludedNodes.size(), includedNodes.size(), sourceNodes.size(),
-      Set<String> nodesTobeExcluded = Parameters.DEFAULT.nodesToBeExcluded;
-      Set<String> nodesTobeIncluded = Parameters.DEFAULT.nodesToBeIncluded;
+      Set<String> excludedNodes = Parameters.DEFAULT.excludedNodes;
+      Set<String> includedNodes = Parameters.DEFAULT.includedNodes;
+      Set<String> sourceNodes = Parameters.DEFAULT.sourceNodes;
-              checkArgument(++i < args.length,
-                  "List of nodes to exclude | -f <filename> is missing: args = "
-                  + Arrays.toString(args));
-              if ("-f".equalsIgnoreCase(args[i])) {
-                checkArgument(++i < args.length,
-                    "File containing nodes to exclude is not specified: args = "
-                    + Arrays.toString(args));
-                nodesTobeExcluded = Util.getHostListFromFile(args[i], "exclude");
-              } else {
-                nodesTobeExcluded = Util.parseHostList(args[i]);
-              }
+              excludedNodes = new HashSet<>();
+              i = processHostList(args, i, "exclude", excludedNodes);
-              checkArgument(++i < args.length,
-                "List of nodes to include | -f <filename> is missing: args = "
-                + Arrays.toString(args));
-              if ("-f".equalsIgnoreCase(args[i])) {
-                checkArgument(++i < args.length,
-                    "File containing nodes to include is not specified: args = "
-                    + Arrays.toString(args));
-                nodesTobeIncluded = Util.getHostListFromFile(args[i], "include");
-               } else {
-                nodesTobeIncluded = Util.parseHostList(args[i]);
-              }
+              includedNodes = new HashSet<>();
+              i = processHostList(args, i, "include", includedNodes);
+            } else if ("-source".equalsIgnoreCase(args[i])) {
+              sourceNodes = new HashSet<>();
+              i = processHostList(args, i, "source", sourceNodes);
-          checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),
+          checkArgument(excludedNodes.isEmpty() || includedNodes.isEmpty(),
-          nodesTobeExcluded, nodesTobeIncluded, runDuringUpgrade);
+          excludedNodes, includedNodes, sourceNodes, runDuringUpgrade);
+    }
+
+    private static int processHostList(String[] args, int i, String type,
+        Set<String> nodes) {
+      Preconditions.checkArgument(++i < args.length,
+          "List of %s nodes | -f <filename> is missing: args=%s",
+          type, Arrays.toString(args));
+      if ("-f".equalsIgnoreCase(args[i])) {
+        Preconditions.checkArgument(++i < args.length,
+            "File containing %s nodes is not specified: args=%s",
+            type, Arrays.toString(args));
+
+        final String filename = args[i];
+        try {
+          HostsFileReader.readFileToSet(type, filename, nodes);
+        } catch (IOException e) {
+          throw new IllegalArgumentException(
+              "Failed to read " + type + " node list from file: " + filename);
+        }
+      } else {
+        final String[] addresses = StringUtils.getTrimmedStrings(args[i]);
+        nodes.addAll(Arrays.asList(addresses));
+      }
+      return i;

INS26 INS26 INS40 INS40 INS23 INS83 INS83 INS74 INS59 INS23 MOV44 INS31 INS43 INS43 INS42 INS21 INS21 INS21 INS21 INS29 INS83 INS74 INS29 INS83 INS74 INS29 INS83 INS74 INS59 INS44 MOV60 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS42 INS42 INS7 INS32 INS32 INS32 INS65 INS43 INS43 UPD42 INS65 INS43 INS43 UPD42 INS65 INS43 INS43 INS42 UPD42 UPD42 MOV74 INS42 INS21 INS60 INS5 INS42 INS39 INS42 INS43 INS42 INS74 INS42 MOV21 INS25 INS41 INS22 INS40 INS60 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS66 INS42 INS42 INS66 INS42 INS42 INS66 INS66 INS42 INS42 INS7 MOV74 INS59 INS43 INS85 INS42 INS43 INS43 MOV32 INS8 INS8 INS42 UPD40 UPD40 INS52 INS42 INS83 INS39 INS59 MOV60 INS45 INS40 INS45 INS40 INS45 INS40 INS42 INS43 INS42 UPD42 UPD42 INS22 INS42 INS32 UPD42 UPD40 UPD42 UPD40 INS42 INS40 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 MOV32 MOV21 INS60 INS54 INS60 INS21 INS42 INS32 INS25 INS60 INS42 UPD42 UPD42 INS52 INS42 UPD45 UPD45 UPD45 INS45 UPD42 UPD42 INS42 INS42 INS83 INS43 INS59 INS8 INS12 INS83 INS5 INS59 INS32 INS42 INS42 INS42 INS32 INS27 INS8 INS83 INS39 INS59 INS42 INS45 INS42 MOV32 INS42 INS42 MOV2 INS21 INS44 INS8 INS43 INS85 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 UPD42 MOV32 INS27 INS38 INS21 INS18 INS42 INS27 INS32 INS43 INS42 INS53 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS43 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS25 UPD42 UPD42 INS42 INS45 INS42 INS45 INS42 MOV32 INS8 MOV25 INS21 INS21 MOV32 INS7 INS7 MOV21 MOV21 MOV32 INS42 INS14 INS42 INS32 INS45 UPD42 MOV21 MOV21 INS74 INS42 INS42 INS42 INS45 INS42 UPD42 INS14 UPD42 INS43 INS74 UPD42 INS42 INS42 INS45 INS42 UPD42 INS14 INS42 INS32 INS42 INS43 INS74 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS42 DEL42 DEL27 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL38 DEL40 DEL27 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL45 DEL42 DEL42 DEL42 DEL2 DEL32 DEL42 DEL42 DEL38 DEL40 DEL27 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL8 DEL25 DEL42 DEL42 DEL8 DEL8 DEL25 DEL45 DEL27 DEL45 DEL27 DEL45