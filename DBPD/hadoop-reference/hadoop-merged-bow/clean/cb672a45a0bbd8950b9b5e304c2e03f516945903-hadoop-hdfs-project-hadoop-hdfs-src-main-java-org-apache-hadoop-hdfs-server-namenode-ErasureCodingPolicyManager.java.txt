HDFS-11605. Allow user to customize new erasure code policies. Contributed by Huafeng Wang

+import org.apache.hadoop.hdfs.protocol.IllegalECPolicyException;
+import java.util.List;
-
+import java.util.stream.Stream;
+  private static final byte USER_DEFINED_POLICY_START_ID = 32;
+   * All user defined policies sorted by name for fast querying.
+   */
+  private Map<String, ErasureCodingPolicy> userPoliciesByName;
+
+  /**
+   * All user defined policies sorted by ID for fast querying.
+   */
+  private Map<Byte, ErasureCodingPolicy> userPoliciesByID;
+
+  /**
-  private final Map<String, ErasureCodingPolicy> enabledPoliciesByName;
+  private Map<String, ErasureCodingPolicy> enabledPoliciesByName;
-  ErasureCodingPolicyManager(Configuration conf) {
+  private volatile static ErasureCodingPolicyManager instance = null;
+
+  public static ErasureCodingPolicyManager getInstance() {
+    if (instance == null) {
+      instance = new ErasureCodingPolicyManager();
+    }
+    return instance;
+  }
+
+  private ErasureCodingPolicyManager() {}
+
+  public void init(Configuration conf) {
+    this.loadPolicies(conf);
+  }
+
+  private void loadPolicies(Configuration conf) {
+    this.userPoliciesByID = new TreeMap<>();
+    this.userPoliciesByName = new TreeMap<>();
+   * Get all system defined policies and user defined policies.
+   * @return all policies
+   */
+  public List<ErasureCodingPolicy> getPolicies() {
+    return Stream.concat(SystemErasureCodingPolicies.getPolicies().stream(),
+      this.userPoliciesByID.values().stream()).collect(Collectors.toList());
+  }
+
+  /**
+   * Get a policy by policy ID, including system policy and user defined policy.
+   * @return ecPolicy, or null if not found
+   */
+  public ErasureCodingPolicy getByID(byte id) {
+    ErasureCodingPolicy policy = SystemErasureCodingPolicies.getByID(id);
+    if (policy == null) {
+      return this.userPoliciesByID.get(id);
+    }
+    return policy;
+  }
+
+  /**
+   * Get a policy by policy ID, including system policy and user defined policy.
+   * @return ecPolicy, or null if not found
+   */
+  public ErasureCodingPolicy getByName(String name) {
+    ErasureCodingPolicy policy = SystemErasureCodingPolicies.getByName(name);
+    if (policy == null) {
+      return this.userPoliciesByName.get(name);
+    }
+    return policy;
+  }
+
+  /**
+
+  public synchronized void addPolicy(ErasureCodingPolicy policy)
+      throws IllegalECPolicyException {
+    String assignedNewName = ErasureCodingPolicy.composePolicyName(
+        policy.getSchema(), policy.getCellSize());
+    for (ErasureCodingPolicy p : getPolicies()) {
+      if (p.getName().equals(assignedNewName)) {
+        throw new IllegalECPolicyException("The policy name already exists");
+      }
+      if (p.getSchema().equals(policy.getSchema()) &&
+          p.getCellSize() == policy.getCellSize()) {
+        throw new IllegalECPolicyException("A policy with same schema and " +
+            "cell size already exists");
+      }
+    }
+    policy.setName(assignedNewName);
+    policy.setId(getNextAvailablePolicyID());
+    this.userPoliciesByName.put(policy.getName(), policy);
+    this.userPoliciesByID.put(policy.getId(), policy);
+  }
+
+  private byte getNextAvailablePolicyID() {
+    byte currentId = this.userPoliciesByID.keySet().stream()
+        .max(Byte::compareTo).orElse(USER_DEFINED_POLICY_START_ID);
+    return (byte) (currentId + 1);
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS74 INS59 INS29 INS83 INS74 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS42 INS8 INS83 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 UPD42 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS8 INS42 INS34 INS65 INS43 INS43 INS43 INS42 INS65 INS43 INS43 INS43 INS42 INS42 INS42 INS33 INS42 INS25 INS41 INS43 INS42 INS21 INS21 INS21 INS65 INS65 INS43 INS43 INS41 INS65 INS65 INS42 INS39 INS42 INS60 INS25 INS41 INS65 INS65 INS42 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS42 INS60 INS70 INS21 INS21 INS21 INS21 INS60 INS41 INS66 INS42 INS42 INS42 INS66 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS32 INS7 INS7 INS66 INS66 INS42 INS42 INS32 INS66 INS66 INS43 INS59 INS27 INS8 INS42 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS44 INS32 INS8 INS32 INS32 INS32 INS32 INS39 INS59 INS11 INS42 INS33 INS21 INS52 INS42 INS42 INS22 INS14 INS22 INS14 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS43 INS42 INS42 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS22 INS42 INS32 INS42 INS22 INS42 INS32 INS42 INS42 INS32 INS39 INS36 INS7 INS52 INS42 INS74 INS52 INS42 INS74 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS8 INS27 INS8 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS14 INS43 INS43 INS32 INS42 INS32 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS53 INS32 INS27 INS53 INS32 INS42 INS90 INS42 INS34 INS43 INS42 INS42 INS42 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS14 INS32 INS42 INS32 INS32 INS32 INS14 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS22 INS42 INS42 INS42 INS45 INS45 INS52 INS42 DEL83