HDFS-12919. RBF: Support erasure coding methods in RouterRpcServer. Contributed by Inigo Goiri.

+   * Get the active namenode resolver used by this client.
+   * @return Active namenode resolver.
+   */
+  public ActiveNamenodeResolver getNamenodeResolver() {
+    return this.namenodeResolver;
+  }
+
+  /**
-  public Object invokeSequential(
+  public <T> T invokeSequential(
-      final RemoteMethod remoteMethod, Class<?> expectedResultClass,
+      final RemoteMethod remoteMethod, Class<T> expectedResultClass,
-          return result;
+          @SuppressWarnings("unchecked")
+          T ret = (T)result;
+          return ret;
-    return firstResult;
+    @SuppressWarnings("unchecked")
+    T ret = (T)firstResult;
+    return ret;
-   * Invokes multiple concurrent proxy calls to different clients. Returns an
+   * Invoke multiple concurrent proxy calls to different clients. Returns an
-   * @return Result of invoking the method per subcluster: nsId -> result.
-   * @throws IOException If requiredResponse=true and any of the calls throw an
-   *           exception.
+   * @throws IOException If all the calls throw an exception.
-  public <T extends RemoteLocationContext> Map<T, Object> invokeConcurrent(
+  public <T extends RemoteLocationContext, R> void invokeConcurrent(
-    return invokeConcurrent(locations, method, requireResponse, standby, -1);
+    invokeConcurrent(locations, method, requireResponse, standby, void.class);
+   * @param <T> The type of the remote location.
+   * @param <R> The type of the remote method return.
+   * @param locations List of remote locations to call concurrently.
+   * @param method The remote method and parameters to invoke.
+   * @param requireResponse If true an exception will be thrown if all calls do
+   *          not complete. If false exceptions are ignored and all data results
+   *          successfully received are returned.
+   * @param standby If the requests should go to the standby namenodes too.
+   * @param clazz Type of the remote return type.
+   * @return Result of invoking the method per subcluster: nsId -> result.
+   * @throws IOException If requiredResponse=true and any of the calls throw an
+   *           exception.
+   */
+  public <T extends RemoteLocationContext, R> Map<T, R> invokeConcurrent(
+      final Collection<T> locations, final RemoteMethod method,
+      boolean requireResponse, boolean standby, Class<R> clazz)
+          throws IOException {
+    return invokeConcurrent(
+        locations, method, requireResponse, standby, -1, clazz);
+  }
+
+  /**
+   * Invokes multiple concurrent proxy calls to different clients. Returns an
+   * array of results.
+   *
+   * Re-throws exceptions generated by the remote RPC call as either
+   * RemoteException or IOException.
+   *
+   * @param <T> The type of the remote location.
+   * @param <R> The type of the remote method return.
+   * @param clazz Type of the remote return type.
-  public <T extends RemoteLocationContext> Map<T, Object> invokeConcurrent(
+  public <T extends RemoteLocationContext, R> Map<T, R> invokeConcurrent(
-      boolean requireResponse, boolean standby, long timeOutMs)
+      boolean requireResponse, boolean standby, long timeOutMs, Class<R> clazz)
-      return Collections.singletonMap(location, result);
+      return Collections.singletonMap(location, clazz.cast(result));
-      Map<T, Object> results = new TreeMap<>();
+      Map<T, R> results = new TreeMap<>();
-          results.put(location, result);
+          results.put(location, clazz.cast(result));

INS31 INS31 INS31 INS29 MOV83 INS43 INS42 INS8 INS73 UPD43 MOV29 INS83 INS73 INS73 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 MOV73 INS73 UPD74 MOV74 INS42 MOV44 MOV44 MOV44 MOV44 INS44 MOV43 MOV8 INS73 INS74 INS44 INS65 INS65 INS42 INS41 INS42 UPD42 UPD74 INS60 INS65 INS65 INS42 INS43 INS42 INS83 INS74 INS42 INS83 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS21 MOV65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV65 MOV65 INS42 UPD43 INS74 INS42 INS65 INS65 INS65 INS42 MOV43 INS43 INS43 INS74 INS42 INS66 INS66 INS22 INS43 INS79 INS43 INS59 UPD42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS43 MOV43 UPD42 MOV42 INS32 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 UPD42 INS43 INS43 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS52 INS42 INS42 INS42 INS45 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS39 UPD74 INS42 INS32 UPD43 INS42 INS42 MOV42 UPD42 INS60 INS79 INS43 INS59 UPD42 INS42 INS45 INS42 INS42 INS11 INS32 INS43 INS42 INS42 INS42 MOV42 INS42 DEL76 DEL43 DEL74 DEL42 DEL31