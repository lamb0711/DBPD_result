YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.server.resourcemanager.resource.ResourceCalculator;
-  private Resource usedResources = Resources.createResource(0);
+  private Resource usedResources = Resources.createResource(0, 0);
+  private final ResourceCalculator resourceCalculator;
+  
-      String queueName, CSQueue parent, 
-      Comparator<FiCaSchedulerApp> applicationComparator, CSQueue old) {
+      String queueName, CSQueue parent, CSQueue old) {
+    
+    this.resourceCalculator = cs.getResourceCalculator();
+
-        (float)(maximumAllocation.getMemory() - minimumAllocation.getMemory()) / 
-         maximumAllocation.getMemory();
+        Resources.ratio(resourceCalculator, 
+            Resources.subtract(maximumAllocation, minimumAllocation), 
+            maximumAllocation);
+            resourceCalculator,
+                resourceCalculator,
+    Comparator<FiCaSchedulerApp> applicationComparator =
+        cs.getApplicationComparator();
-        this, getParent(), clusterResource, minimumAllocation);
+        resourceCalculator, this, getParent(), clusterResource, 
+        minimumAllocation);
-        "usedResources=" + usedResources.getMemory() + "MB, " + 
+        "usedResources=" + usedResources +  
-      new CSAssignment(Resources.createResource(0), NodeType.NODE_LOCAL);
+      new CSAssignment(Resources.createResource(0, 0), NodeType.NODE_LOCAL);
-          if (!assignToUser(application.getUser(), userLimit)) {
+          if (!assignToUser(
+              clusterResource, application.getUser(), userLimit)) {
-          if (Resources.greaterThan(assigned, Resources.none())) {
+          if (Resources.greaterThan(
+              resourceCalculator, clusterResource, assigned, Resources.none())) {
-    return org.apache.hadoop.yarn.server.resourcemanager.resource.Resource.NONE;
+    return Resources.none();
-      (float)(usedResources.getMemory() + required.getMemory()) / 
-        clusterResource.getMemory();
+        Resources.divide(
+            resourceCalculator, clusterResource, 
+            Resources.add(usedResources, required), 
+            clusterResource);
-          " usedResources: " + usedResources.getMemory() +
-          " clusterResources: " + clusterResource.getMemory() +
-          " currentCapacity " + ((float)usedResources.getMemory())/clusterResource.getMemory() + 
-          " required " + required.getMemory() +
+          " usedResources: " + usedResources +
+          " clusterResources: " + clusterResource +
+          " currentCapacity " + 
+            Resources.divide(resourceCalculator, clusterResource, 
+                usedResources, clusterResource) + 
+          " required " + required +
-        Resources.createResource(
-            CSQueueUtils.roundDown(minimumAllocation, 
-                (int)(absoluteMaxCapacity * clusterResource.getMemory()))
-            );
+        Resources.multiplyAndNormalizeDown(
+            resourceCalculator, 
+            clusterResource, 
+            absoluteMaxCapacity, 
+            minimumAllocation);
-        Resources.subtract(Resources.min(userLimit, queueMaxCap), userConsumed);
+        Resources.subtract(
+            Resources.min(resourceCalculator, clusterResource, 
+                userLimit, queueMaxCap), 
+            userConsumed);
-    final int queueCapacity = 
-      Math.max(
-          CSQueueUtils.roundUp(
-              minimumAllocation, 
-              (int)(absoluteCapacity * clusterResource.getMemory())), 
-          required.getMemory()
-          );
+    final Resource queueCapacity =
+        Resources.max(
+            resourceCalculator, clusterResource, 
+            Resources.multiplyAndNormalizeUp(
+                resourceCalculator, 
+                clusterResource, 
+                absoluteCapacity, 
+                minimumAllocation), 
+            required);
-    final int consumed = usedResources.getMemory();
-    final int currentCapacity = 
-      (consumed < queueCapacity) ? 
-          queueCapacity : (consumed + required.getMemory());
-
+    Resource currentCapacity =
+        Resources.lessThan(resourceCalculator, clusterResource, 
+            usedResources, queueCapacity) ?
+            queueCapacity : Resources.add(usedResources, required);
+    
-
-    int limit = 
-      CSQueueUtils.roundUp(
-          minimumAllocation,
-          Math.min(
-              Math.max(divideAndCeil(currentCapacity, activeUsers), 
-                       divideAndCeil((int)userLimit*currentCapacity, 100)),
-              (int)(queueCapacity * userLimitFactor)
-              )
-          );
+    		
+    Resource limit =
+        Resources.roundUp(
+            resourceCalculator, 
+            Resources.min(
+                resourceCalculator, clusterResource,   
+                Resources.max(
+                    resourceCalculator, clusterResource, 
+                    Resources.divideAndCeil(
+                        resourceCalculator, currentCapacity, activeUsers),
+                    Resources.divideAndCeil(
+                        resourceCalculator, 
+                        Resources.multiplyAndRoundDown(
+                            currentCapacity, userLimit), 
+                        100)
+                    ), 
+                Resources.multiplyAndRoundDown(queueCapacity, userLimitFactor)
+                ), 
+            minimumAllocation);
-          " qconsumed: " + consumed +
+          " qconsumed: " + usedResources +
-          " clusterCapacity: " + clusterResource.getMemory()
+          " clusterCapacity: " + clusterResource
-    return Resources.createResource(limit);
+    return limit;
-  private synchronized boolean assignToUser(String userName, Resource limit) {
+  private synchronized boolean assignToUser(Resource clusterResource,
+      String userName, Resource limit) {
-    // overhead of the AM, but it's a > check, not a >= check, so... 
-    if ((user.getConsumedResources().getMemory()) > limit.getMemory()) {
+    // overhead of the AM, but it's a > check, not a >= check, so...
+    if (Resources.greaterThan(resourceCalculator, clusterResource, 
+            user.getConsumedResources(), limit)) {
-  static int divideAndCeil(int a, int b) {
-    if (b == 0) {
-      LOG.info("divideAndCeil called with a=" + a + " b=" + b);
-      return 0;
-    }
-    return (a + (b - 1)) / b;
-  }
-
-          ((float)required.getMemory() / getMaximumAllocation().getMemory());
+          Resources.ratio(
+              resourceCalculator, required, getMaximumAllocation()
+              );
-            " minAllocFactor=" + minimumAllocationFactor +
+            " minAllocFactor=" + getMinimumAllocationFactor() +
-    if (Resources.greaterThan(assigned, Resources.none())) {
+    if (Resources.greaterThan(resourceCalculator, clusterResource, 
+            assigned, Resources.none())) {
-    if (Resources.greaterThan(assigned, Resources.none())) {
+    if (Resources.greaterThan(resourceCalculator, clusterResource, 
+            assigned, Resources.none())) {
-    assert (available.getMemory() >  0);
+    assert Resources.greaterThan(
+        resourceCalculator, clusterResource, available, Resources.none());
+      LOG.warn("Couldn't get container for allocation!");
-        available.getMemory() / capability.getMemory();         
+        resourceCalculator.computeAvailableContainers(available, capability);
+
+      // Does the application need this resource?
-        // Did the application need this resource?
-        this, getParent(), clusterResource, minimumAllocation);
+        resourceCalculator, this, getParent(), clusterResource, minimumAllocation);
-        this, getParent(), clusterResource, minimumAllocation);
+        resourceCalculator, this, getParent(), clusterResource, 
+        minimumAllocation);
+            resourceCalculator,
+            resourceCalculator,
-        this, getParent(), clusterResource, minimumAllocation);
+        resourceCalculator, this, getParent(), clusterResource, 
+        minimumAllocation);
-    Resource consumed = Resources.createResource(0);
+    Resource consumed = Resources.createResource(0, 0);

INS26 INS40 INS23 INS83 INS83 INS43 INS59 INS44 INS42 INS42 INS21 INS60 INS60 INS43 INS42 INS34 INS7 MOV74 INS59 INS32 INS43 INS43 MOV59 INS43 INS42 INS42 MOV32 MOV32 INS32 INS22 INS32 INS32 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 MOV32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS42 MOV42 INS32 INS21 INS32 INS42 INS42 INS42 INS34 INS52 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 INS42 INS42 MOV42 INS32 INS32 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS45 MOV32 MOV45 INS42 MOV45 INS42 MOV45 INS32 MOV45 INS42 MOV45 MOV42 MOV45 MOV45 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL44 DEL39 DEL32 DEL32 DEL27 DEL36 DEL11 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL45 DEL40 DEL39 DEL32 DEL32 DEL27 DEL36 DEL11 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL39 DEL32 DEL11 DEL36 DEL32 DEL27 DEL27 DEL27 DEL42 DEL42 DEL32 DEL27 DEL27 DEL27 DEL27 DEL27 DEL27 DEL42 DEL39 DEL42 DEL42 DEL32 DEL27 DEL36 DEL11 DEL32 DEL39 DEL42 DEL39 DEL42 DEL32 DEL27 DEL36 DEL11 DEL42 DEL32 DEL42 DEL42 DEL27 DEL36 DEL42 DEL42 DEL32 DEL27 DEL36 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL39 DEL60 DEL39 DEL39 DEL42 DEL11 DEL42 DEL27 DEL39 DEL42 DEL42 DEL27 DEL36 DEL11 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL36 DEL42 DEL42 DEL32 DEL27 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL34 DEL41 DEL8 DEL25 DEL42 DEL42 DEL34 DEL27 DEL36 DEL27 DEL36 DEL42 DEL27 DEL41 DEL8 DEL31 DEL39 DEL32 DEL11 DEL42 DEL32 DEL27 DEL36 DEL42 DEL32 DEL34 DEL27 DEL36 DEL32 DEL42 DEL32 DEL27