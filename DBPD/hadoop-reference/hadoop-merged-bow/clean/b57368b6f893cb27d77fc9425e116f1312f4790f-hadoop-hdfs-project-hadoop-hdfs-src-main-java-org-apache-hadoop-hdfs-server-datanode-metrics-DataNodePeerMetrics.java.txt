HDFS-11194. Maintain aggregated peer performance metrics on NameNode.

-import java.util.concurrent.ThreadLocalRandom;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.classification.InterfaceStability;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Map;
+import java.util.concurrent.ThreadLocalRandom;
+import java.util.concurrent.TimeUnit;
+@InterfaceStability.Unstable
-  static final Log LOG = LogFactory.getLog(DataNodePeerMetrics.class);
+  public static final Logger LOG = LoggerFactory.getLogger(
+      DataNodePeerMetrics.class);
-  private final boolean peerStatsEnabled;
+
+  /**
+   * Threshold in milliseconds below which a DataNode is definitely not slow.
+   */
+  private static final long LOW_THRESHOLD_MS = 5;
+
+  private final SlowNodeDetector slowNodeDetector;
+
+  /**
+   * Minimum number of packet send samples which are required to qualify
+   * for outlier detection. If the number of samples is below this then
+   * outlier detection is skipped.
+   */
+  @VisibleForTesting
+  static final long MIN_OUTLIER_DETECTION_SAMPLES = 1000;
-      final int windowSize,
-      final int numWindows,
-      final boolean peerStatsEnabled) {
+      final long windowSizeMs,
+      final int numWindows) {
-    this.peerStatsEnabled = peerStatsEnabled;
+    this.slowNodeDetector = new SlowNodeDetector(LOW_THRESHOLD_MS);
-        windowSize,
-        numWindows);
+        windowSizeMs, numWindows);
-    final int windowSize = conf.getInt(
-            DFSConfigKeys.DFS_METRICS_ROLLING_AVERAGES_WINDOW_SIZE_KEY,
-            DFSConfigKeys.DFS_METRICS_ROLLING_AVERAGES_WINDOW_SIZE_DEFAULT);
+    final long windowSizeMs = conf.getTimeDuration(
+            DFSConfigKeys.DFS_METRICS_ROLLING_AVERAGES_WINDOW_LENGTH_KEY,
+            DFSConfigKeys.DFS_METRICS_ROLLING_AVERAGES_WINDOW_LENGTH_DEFAULT,
+            TimeUnit.MILLISECONDS);
-        DFSConfigKeys.DFS_METRICS_ROLLING_AVERAGES_WINDOW_NUMBERS_KEY,
-        DFSConfigKeys.DFS_METRICS_ROLLING_AVERAGES_WINDOW_NUMBERS_DEFAULT);
-    final boolean peerStatsEnabled = conf.getBoolean(
-        DFSConfigKeys.DFS_DATANODE_PEER_STATS_ENABLED_KEY,
-        DFSConfigKeys.DFS_DATANODE_PEER_STATS_ENABLED_DEFAULT);
+        DFSConfigKeys.DFS_METRICS_ROLLING_AVERAGE_NUM_WINDOWS_KEY,
+        DFSConfigKeys.DFS_METRICS_ROLLING_AVERAGE_NUM_WINDOWS_DEFAULT);
-        windowSize,
-        numWindows,
-        peerStatsEnabled);
+        windowSizeMs,
+        numWindows);
-    if (peerStatsEnabled) {
-      sendPacketDownstreamRollingAvgerages.add(peerAddr, elapsedMs);
-    }
+    sendPacketDownstreamRollingAvgerages.add(peerAddr, elapsedMs);
+
+  /**
+   * Retrieve the set of dataNodes that look significantly slower
+   * than their peers.
+   */
+  public Map<String, Double> getOutliers() {
+    // This maps the metric name to the aggregate latency.
+    // The metric name is the datanode ID.
+    final Map<String, Double> stats =
+        sendPacketDownstreamRollingAvgerages.getStats(
+            MIN_OUTLIER_DETECTION_SAMPLES);
+    LOG.trace("DataNodePeerMetrics: Got stats: {}", stats);
+
+    return slowNodeDetector.getOutliers(stats);
+  }

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 UPD40 INS40 INS40 INS78 INS23 INS23 INS31 INS40 INS83 UPD43 INS29 INS83 UPD39 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS83 INS39 INS59 MOV8 INS29 INS83 INS74 INS42 INS8 UPD42 INS65 UPD42 INS34 INS42 INS42 INS65 INS42 INS42 INS34 UPD39 UPD42 INS65 INS43 INS43 INS43 INS60 INS21 INS41 UPD42 UPD42 INS66 INS66 INS66 INS66 UPD39 INS66 INS66 INS42 INS42 INS42 INS83 INS74 INS59 INS32 INS32 INS14 UPD42 UPD42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 UPD42 INS43 INS42 UPD42 UPD42 UPD40 UPD40 INS40 UPD40 UPD40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL25 DEL8