HDDS-1300. Optimize non-recursive ozone filesystem apis. Contributed by Lokesh Jain.

-import static org.apache.hadoop.ozone.OzoneConsts.OZONE_URI_DELIMITER;
-import java.util.HashMap;
+import org.apache.hadoop.fs.FileAlreadyExistsException;
-  public InputStream createInputStream(String key) throws IOException {
+  public InputStream readFile(String key) throws IOException {
-    return bucket.readKey(key).getInputStream();
+    try {
+      return bucket.readFile(key).getInputStream();
+    } catch (OMException ex) {
+      if (ex.getResult() == OMException.ResultCodes.FILE_NOT_FOUND
+          || ex.getResult() == OMException.ResultCodes.NOT_A_FILE) {
+        throw new FileNotFoundException(
+            ex.getResult().name() + ": " + ex.getMessage());
+      } else {
+        throw ex;
+      }
+    }
-  public OzoneFSOutputStream createKey(String key) throws IOException {
+  public OzoneFSOutputStream createFile(String key, boolean overWrite,
+      boolean recursive) throws IOException {
-    OzoneOutputStream ozoneOutputStream =
-        bucket.createKey(key, 0, replicationType, replicationFactor,
-            new HashMap<>());
-    return new OzoneFSOutputStream(ozoneOutputStream.getOutputStream());
+    try {
+      OzoneOutputStream ozoneOutputStream = bucket
+          .createFile(key, 0, replicationType, replicationFactor, overWrite,
+              recursive);
+      return new OzoneFSOutputStream(ozoneOutputStream.getOutputStream());
+    } catch (OMException ex) {
+      if (ex.getResult() == OMException.ResultCodes.FILE_ALREADY_EXISTS
+          || ex.getResult() == OMException.ResultCodes.NOT_A_FILE) {
+        throw new FileAlreadyExistsException(
+            ex.getResult().name() + ": " + ex.getMessage());
+      } else {
+        throw ex;
+      }
+    }
-   * Helper method to check if an Ozone key is representing a directory.
-   *
-   * @param key key to be checked as a directory
-   * @return true if key is a directory, false otherwise
-   */
-  @Override
-  public boolean isDirectory(BasicKeyInfo key) {
-    LOG.trace("key name:{} size:{}", key.getName(),
-        key.getDataSize());
-    return key.getName().endsWith(OZONE_URI_DELIMITER)
-        && (key.getDataSize() == 0);
-  }
-
-  /**
-  public boolean createDirectory(String keyName) {
-    try {
-      LOG.trace("creating dir for key:{}", keyName);
-      if (storageStatistics != null) {
-        storageStatistics.incrementCounter(Statistic.OBJECTS_CREATED, 1);
-      }
-      bucket.createKey(keyName, 0, replicationType, replicationFactor,
-          new HashMap<>()).close();
-      return true;
-    } catch (IOException ioe) {
-      LOG.error("create key failed for key:{}", keyName, ioe);
-      return false;
+  public boolean createDirectory(String keyName) throws IOException {
+    LOG.trace("creating dir for key:{}", keyName);
+    if (storageStatistics != null) {
+      storageStatistics.incrementCounter(Statistic.OBJECTS_CREATED, 1);
+    try {
+      bucket.createDirectory(keyName);
+    } catch (OMException e) {
+      if (e.getResult() == OMException.ResultCodes.FILE_ALREADY_EXISTS) {
+        throw new FileAlreadyExistsException(e.getMessage());
+      }
+      throw e;
+    }
+    return true;

MOV26 UPD40 INS31 UPD42 INS8 MOV78 MOV83 MOV43 UPD42 MOV42 MOV44 INS44 INS44 MOV43 INS8 MOV43 MOV8 MOV25 INS54 INS39 INS42 INS39 INS42 MOV25 INS54 INS54 INS8 INS12 INS8 INS12 INS8 INS12 MOV41 INS44 INS8 MOV60 MOV41 INS44 INS8 INS21 INS44 INS8 INS43 INS42 INS25 UPD43 MOV43 UPD42 MOV42 INS25 INS32 INS43 INS42 INS25 INS53 INS42 INS27 INS8 INS8 UPD42 INS27 INS8 INS8 MOV42 UPD42 MOV42 MOV42 INS42 INS27 INS8 INS42 UPD42 INS27 INS27 INS53 INS53 UPD42 INS42 INS42 INS27 INS27 INS53 INS53 INS32 INS40 INS53 INS32 INS40 INS32 INS40 INS14 INS42 INS32 INS40 INS32 INS40 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS27 INS43 INS32 INS42 INS32 INS45 INS32 INS42 MOV32 INS45 MOV32 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 DEL40 DEL26 DEL8 DEL42 DEL43 DEL74 DEL14 DEL42 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL45 DEL32 DEL32 DEL32 DEL21 DEL34 DEL27 DEL36 DEL27 DEL41 DEL8 DEL31 DEL34 DEL42 DEL42 DEL43 DEL74 DEL14 DEL32 DEL42 DEL32 DEL21 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8