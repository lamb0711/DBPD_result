HADOOP-12758. Extend CSRF Filter with UserAgent Checks. Contributed by Larry McCay.

+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+  public static final String HEADER_USER_AGENT = "User-Agent";
+  public static final String BROWSER_USER_AGENT_PARAM =
+      "browser-useragents-regex";
+  static final String  BROWSER_USER_AGENTS_DEFAULT = "^Mozilla.*,^Opera.*";
+  private Set<Pattern> browserUserAgents;
+
+    String agents = filterConfig.getInitParameter(BROWSER_USER_AGENT_PARAM);
+    if (agents == null) {
+      agents = BROWSER_USER_AGENTS_DEFAULT;
+    }
+    parseBrowserUserAgents(agents);
+  }
+
+  void parseBrowserUserAgents(String userAgents) {
+    String[] agentsArray =  userAgents.split(",");
+    browserUserAgents = new HashSet<Pattern>();
+    for (String patternString : agentsArray) {
+      browserUserAgents.add(Pattern.compile(patternString));
+    }
+  /**
+   * This method interrogates the User-Agent String and returns whether it
+   * refers to a browser.  If its not a browser, then the requirement for the
+   * CSRF header will not be enforced; if it is a browser, the requirement will
+   * be enforced.
+   * <p>
+   * A User-Agent String is considered to be a browser if it matches
+   * any of the regex patterns from browser-useragent-regex; the default
+   * behavior is to consider everything a browser that matches the following:
+   * "^Mozilla.*,^Opera.*".  Subclasses can optionally override
+   * this method to use different behavior.
+   *
+   * @param userAgent The User-Agent String, or null if there isn't one
+   * @return true if the User-Agent String refers to a browser, false if not
+   */
+  protected boolean isBrowser(String userAgent) {
+    if (userAgent == null) {
+      return false;
+    }
+    for (Pattern pattern : browserUserAgents) {
+      Matcher matcher = pattern.matcher(userAgent);
+      if (matcher.matches()) {
+        return true;
+      }
+    }
+    return false;
+  }
+
-    if (methodsToIgnore.contains(httpRequest.getMethod()) ||
+    if (!isBrowser(httpRequest.getHeader(HEADER_USER_AGENT)) ||
+        methodsToIgnore.contains(httpRequest.getMethod()) ||
-          "Missing Required Header for Vulnerability Protection");
+          "Missing Required Header for CSRF Vulnerability Protection");

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS74 INS59 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS42 INS60 INS25 INS21 INS43 INS42 INS60 INS21 INS70 INS65 INS65 INS65 INS43 INS42 INS25 INS70 INS41 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS5 INS59 INS7 INS44 INS42 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS44 INS42 INS8 INS9 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS14 INS43 INS42 INS21 INS42 INS33 INS41 INS43 INS42 INS60 INS25 INS38 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS45 INS74 INS42 INS32 INS9 INS42 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS41 INS42 INS32 UPD45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42