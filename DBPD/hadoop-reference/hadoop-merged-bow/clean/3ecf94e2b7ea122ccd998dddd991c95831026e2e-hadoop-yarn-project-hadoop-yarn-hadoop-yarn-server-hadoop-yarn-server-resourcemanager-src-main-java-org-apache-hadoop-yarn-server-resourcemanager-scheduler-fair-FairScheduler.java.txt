Merge r1480440 through r1480820 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1480824 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
-  // How often tasks are preempted (must be longer than a couple
+  // How often tasks are preempted 
+  protected long preemptionInterval; 
+  
+  // ms to wait before force killing stuff (must be longer than a couple
-  protected long preemptionInterval = 15000;
-
+  protected long waitTimeBeforeKill; 
+  
+  // Containers whose AMs have been warned that they will be preempted soon.
+  private List<RMContainer> warnedContainers = new ArrayList<RMContainer>();
+  
-
-    // Update recorded capacity of root queue (child queues are updated
-    // when fair share is calculated).
-    rootMetrics.setAvailableResourcesToQueue(clusterCapacity);
-        return c2.getContainer().getPriority().compareTo(
+        int ret = c2.getContainer().getPriority().compareTo(
+        if (ret == 0) {
+          return c2.getContainerId().compareTo(c1.getContainerId());
+        }
+        return ret;
+    
+    // Scan down the list of containers we've already warned and kill them
+    // if we need to.  Remove any containers from the list that we don't need
+    // or that are no longer running.
+    Iterator<RMContainer> warnedIter = warnedContainers.iterator();
+    Set<RMContainer> preemptedThisRound = new HashSet<RMContainer>();
+    while (warnedIter.hasNext()) {
+      RMContainer container = warnedIter.next();
+      if (container.getState() == RMContainerState.RUNNING &&
+          Resources.greaterThan(RESOURCE_CALCULATOR, clusterCapacity,
+              toPreempt, Resources.none())) {
+        warnOrKillContainer(container, apps.get(container), queues.get(container));
+        preemptedThisRound.add(container);
+        Resources.subtractFrom(toPreempt, container.getContainer().getResource());
+      } else {
+        warnedIter.remove();
+      }
+    }
-    // Scan down the sorted list of task statuses until we've killed enough
-    // tasks, making sure we don't kill too many from any queue
-    for (RMContainer container : runningContainers) {
+    // Scan down the rest of the containers until we've preempted enough, making
+    // sure we don't preempt too many from any queue
+    Iterator<RMContainer> runningIter = runningContainers.iterator();
+    while (runningIter.hasNext() &&
+        Resources.greaterThan(RESOURCE_CALCULATOR, clusterCapacity,
+            toPreempt, Resources.none())) {
+      RMContainer container = runningIter.next();
-      if (Resources.greaterThan(RESOURCE_CALCULATOR, clusterCapacity,
-          sched.getResourceUsage(), sched.getFairShare())) {
-        LOG.info("Preempting container (prio=" + container.getContainer().getPriority() +
-            "res=" + container.getContainer().getResource() +
-            ") from queue " + sched.getName());
-        ContainerStatus status = SchedulerUtils.createAbnormalContainerStatus(
+      if (!preemptedThisRound.contains(container) &&
+          Resources.greaterThan(RESOURCE_CALCULATOR, clusterCapacity,
+              sched.getResourceUsage(), sched.getFairShare())) {
+        warnOrKillContainer(container, apps.get(container), sched);
+        
+        warnedContainers.add(container);
+        Resources.subtractFrom(toPreempt, container.getContainer().getResource());
+      }
+    }
+  }
+  
+  private void warnOrKillContainer(RMContainer container, FSSchedulerApp app,
+      FSLeafQueue queue) {
+    LOG.info("Preempting container (prio=" + container.getContainer().getPriority() +
+        "res=" + container.getContainer().getResource() +
+        ") from queue " + queue.getName());
+    
+    Long time = app.getContainerPreemptionTime(container);
+
+    if (time != null) {
+      // if we asked for preemption more than maxWaitTimeBeforeKill ms ago,
+      // proceed with kill
+      if (time + waitTimeBeforeKill < clock.getTime()) {
+        ContainerStatus status =
+          SchedulerUtils.createAbnormalContainerStatus(
-
-        toPreempt = Resources.subtract(toPreempt,
-            container.getContainer().getResource());
-        if (Resources.lessThanOrEqual(RESOURCE_CALCULATOR, clusterCapacity,
-            toPreempt, Resources.none())) {
-          break;
-        }
+        LOG.info("Killing container" + container +
+            " (after waiting for premption for " +
+            (clock.getTime() - time) + "ms)");
+    } else {
+      // track the request in the FSSchedulerApp itself
+      app.addPreemption(container, clock.getTime());
-  public Clock getClock() {
+  public synchronized Clock getClock() {
-  protected void setClock(Clock clock) {
+  protected synchronized void setClock(Clock clock) {
+      updateRootQueueMetrics();
+    updateRootQueueMetrics();
+    updateRootQueueMetrics();
-      }
+        LOG.debug("Preempting " + application.getPreemptionContainers().size()
+            + " container(s)");
+      }
+      
+      Set<ContainerId> preemptionContainerIds = new HashSet<ContainerId>();
+      for (RMContainer container : application.getPreemptionContainers()) {
+        preemptionContainerIds.add(container.getContainerId());
+      }
+      
-          application.getHeadroom());
+          application.getHeadroom(), preemptionContainerIds);
+          assignedContainers++;
+    updateRootQueueMetrics();
+  
+  /**
+   * Subqueue metrics might be a little out of date because fair shares are
+   * recalculated at the update interval, but the root queue metrics needs to
+   * be updated synchronously with allocations and completions so that cluster
+   * metrics will be consistent.
+   */
+  private void updateRootQueueMetrics() {
+    rootMetrics.setAvailableResourcesToQueue(
+        Resources.subtract(
+            clusterCapacity, rootMetrics.getAllocatedResources()));
+  }
-    
+    preemptionInterval = this.conf.getPreemptionInterval();
+    waitTimeBeforeKill = this.conf.getWaitTimeBeforeKill();
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS39 INS59 INS83 INS74 INS59 INS83 INS39 INS42 MOV44 INS44 INS44 MOV8 INS83 INS83 INS29 INS83 INS39 INS42 INS8 INS42 INS43 INS43 INS42 INS14 INS60 INS60 INS61 INS60 INS61 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS65 INS21 INS21 INS21 INS42 INS42 INS74 INS74 INS59 INS74 INS59 INS32 INS8 INS74 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS32 INS66 INS66 INS66 INS66 INS32 INS7 INS7 INS43 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS60 INS25 INS43 INS43 INS42 INS32 INS32 INS32 INS60 MOV60 MOV25 INS42 INS42 INS32 INS42 INS33 INS25 INS21 INS21 INS42 INS42 INS60 INS70 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS27 INS8 INS32 INS32 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS32 INS22 INS42 INS22 INS42 INS43 INS43 INS42 INS42 INS32 INS27 INS32 INS21 INS21 MOV21 INS21 INS42 INS42 INS42 INS42 INS32 INS38 MOV32 INS21 INS21 INS21 UPD42 INS27 INS32 MOV60 MOV21 INS21 INS42 INS42 INS42 INS32 INS42 INS21 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 MOV32 INS32 INS32 MOV32 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS32 INS60 INS25 INS41 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS27 INS43 INS43 INS42 INS42 INS32 INS21 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS36 INS45 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS37 INS42 MOV32 INS42 INS34 MOV41 INS42 INS42 INS27 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 DEL34 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL7 DEL42 DEL8 DEL70 DEL42 DEL42 DEL32 DEL10