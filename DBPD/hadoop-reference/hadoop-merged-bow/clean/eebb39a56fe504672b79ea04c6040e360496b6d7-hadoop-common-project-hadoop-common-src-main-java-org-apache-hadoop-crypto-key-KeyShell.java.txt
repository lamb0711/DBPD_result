HADOOP-13112. Change CredentialShell to use CommandShell base class (Matthew Paduano via aw)

-import java.io.PrintStream;
+
+import org.apache.commons.lang.StringUtils;
+
-import org.apache.hadoop.conf.Configured;
-import org.apache.hadoop.util.Tool;
+import org.apache.hadoop.tools.CommandShell;
-public class KeyShell extends Configured implements Tool {
+public class KeyShell extends CommandShell {
-  private Command command = null;
-  /** allows stdout to be captured if necessary. */
-  @VisibleForTesting
-  public PrintStream out = System.out;
-  /** allows stderr to be captured if necessary. */
-  @VisibleForTesting
-  public PrintStream err = System.err;
-
-   * Primary entry point for the KeyShell; called via main().
-   *
-   * @param args Command line arguments.
-   * @return 0 on success and 1 on failure.  This value is passed back to
-   * the unix shell, so we must follow shell return code conventions:
-   * the return code is an unsigned character, and 0 means success, and
-   * small positive integers mean failure.
-   * @throws Exception
-   */
-  @Override
-  public int run(String[] args) throws Exception {
-    int exitCode = 0;
-    try {
-      exitCode = init(args);
-      if (exitCode != 0) {
-        return exitCode;
-      }
-      if (command.validate()) {
-        command.execute();
-      } else {
-        exitCode = 1;
-      }
-    } catch (Exception e) {
-      e.printStackTrace(err);
-      return 1;
-    }
-    return exitCode;
-  }
-
-  /**
-  private int init(String[] args) throws IOException {
+  @Override
+  protected int init(String[] args) throws IOException {
-
-        command = new CreateCommand(keyName, options);
+        setSubCommand(new CreateCommand(keyName, options));
-          printKeyShellUsage();
-
-        command = new DeleteCommand(keyName);
+        setSubCommand(new DeleteCommand(keyName));
-          printKeyShellUsage();
-
-        command = new RollCommand(keyName);
+        setSubCommand(new RollCommand(keyName));
-          printKeyShellUsage();
-        command = new ListCommand();
+        setSubCommand(new ListCommand());
-          out.println("\nAttributes must be in attribute=value form, " +
-                  "or quoted\nlike \"attribute = value\"\n");
-          printKeyShellUsage();
+          getOut().println("\nAttributes must be in attribute=value form, " +
+              "or quoted\nlike \"attribute = value\"\n");
-          out.println("\nEach attribute must correspond to only one value:\n" +
-                  "atttribute \"" + attr + "\" was repeated\n" );
-          printKeyShellUsage();
+          getOut().println("\nEach attribute must correspond to only one " +
+              "value:\natttribute \"" + attr + "\" was repeated\n");
-        printKeyShellUsage();
-        printKeyShellUsage();
-        ToolRunner.printGenericCommandUsage(System.err);
+        ToolRunner.printGenericCommandUsage(getErr());
-    if (command == null) {
-      printKeyShellUsage();
-      return 1;
-    }
-
-  private void printKeyShellUsage() {
-    out.println(USAGE_PREFIX + COMMANDS);
-    if (command != null) {
-      out.println(command.getUsage());
-    } else {
-      out.println("=========================================================" +
-          "======");
-      out.println(CreateCommand.USAGE + ":\n\n" + CreateCommand.DESC);
-      out.println("=========================================================" +
-          "======");
-      out.println(RollCommand.USAGE + ":\n\n" + RollCommand.DESC);
-      out.println("=========================================================" +
-          "======");
-      out.println(DeleteCommand.USAGE + ":\n\n" + DeleteCommand.DESC);
-      out.println("=========================================================" +
-          "======");
-      out.println(ListCommand.USAGE + ":\n\n" + ListCommand.DESC);
-    }
+  @Override
+  public String getCommandUsage() {
+    StringBuffer sbuf = new StringBuffer(USAGE_PREFIX + COMMANDS);
+    String banner = StringUtils.repeat("=", 66);
+    sbuf.append(banner + "\n");
+    sbuf.append(CreateCommand.USAGE + ":\n\n" + CreateCommand.DESC + "\n");
+    sbuf.append(banner + "\n");
+    sbuf.append(RollCommand.USAGE + ":\n\n" + RollCommand.DESC + "\n");
+    sbuf.append(banner + "\n");
+    sbuf.append(DeleteCommand.USAGE + ":\n\n" + DeleteCommand.DESC + "\n");
+    sbuf.append(banner + "\n");
+    sbuf.append(ListCommand.USAGE + ":\n\n" + ListCommand.DESC + "\n");
+    return sbuf.toString();
-  private abstract class Command {
+  private abstract class Command extends SubCommand {
-    public boolean validate() {
-      return true;
-    }
-
-        e.printStackTrace(err);
+        e.printStackTrace(getErr());
-        out.println(NO_VALID_PROVIDERS);
+        getOut().println(NO_VALID_PROVIDERS);
-      out.println(provider + " has been updated.");
+      getOut().println(provider + " has been updated.");
-        out.println("WARNING: you are modifying a transient provider.");
+        getOut().println("WARNING: you are modifying a transient provider.");
-        out.println("Listing keys for KeyProvider: " + provider);
+        getOut().println("Listing keys for KeyProvider: " + provider);
-            out.println(keys.get(i) + " : " + meta[i]);
+            getOut().println(keys.get(i) + " : " + meta[i]);
-            out.println(keyName);
+            getOut().println(keyName);
-        out.println("Cannot list keys for KeyProvider: " + provider
+        getOut().println("Cannot list keys for KeyProvider: " + provider
-        out.println("Please provide a <keyname>.\n" +
+        getOut().println("Please provide a <keyname>.\n" +
-        out.println("Rolling key version from KeyProvider: "
+        getOut().println("Rolling key version from KeyProvider: "
-          out.println(keyName + " has been successfully rolled.");
+          getOut().println(keyName + " has been successfully rolled.");
-          out.println("Cannot roll key: " + keyName + " within KeyProvider: "
-              + provider + ". " + e.toString());
+          getOut().println("Cannot roll key: " + keyName +
+              " within KeyProvider: " + provider + ". " + e.toString());
-        out.println("Cannot roll key: " + keyName + " within KeyProvider: "
+        getOut().println("Cannot roll key: " + keyName + " within KeyProvider: "
-        out.println("There is no keyName specified. Please specify a " +
+        getOut().println("There is no keyName specified. Please specify a " +
-            out.println(keyName + " has not been deleted.");
+            getOut().println(keyName + " has not been deleted.");
-          out.println(keyName + " will not be deleted.");
-          e.printStackTrace(err);
+          getOut().println(keyName + " will not be deleted.");
+          e.printStackTrace(getErr());
-      out.println("Deleting key: " + keyName + " from KeyProvider: "
+      getOut().println("Deleting key: " + keyName + " from KeyProvider: "
-          out.println(keyName + " has been successfully deleted.");
+          getOut().println(keyName + " has been successfully deleted.");
-          out.println(keyName + " has not been deleted. " + e.toString());
+          getOut().println(keyName + " has not been deleted. " + e.toString());
-            out.println(provider.noPasswordError());
+            getOut().println(provider.noPasswordError());
-            out.println(provider.noPasswordWarning());
+            getOut().println(provider.noPasswordWarning());
-        e.printStackTrace(err);
+        e.printStackTrace(getErr());
-        out.println("Please provide a <keyname>. See the usage description" +
-            " with -help.");
+        getOut().println("Please provide a <keyname>. " +
+            " See the usage description with -help.");
-        out.println(keyName + " has been successfully created with options "
-            + options.toString() + ".");
+        getOut().println(keyName + " has been successfully created " +
+            "with options " + options.toString() + ".");
-        out.println(keyName + " has not been created. " + e.toString());
+        getOut().println(keyName + " has not been created. " + e.toString());
-        out.println(keyName + " has not been created. " + e.toString());
+        getOut().println(keyName + " has not been created. " + e.toString());
-        out.println(keyName + " has not been created. " + e.toString());
+        getOut().println(keyName + " has not been created. " + e.toString());

MOV26 UPD40 UPD40 INS43 INS31 UPD42 MOV42 MOV78 UPD83 INS78 INS83 INS43 INS42 INS8 INS43 UPD42 MOV42 UPD42 MOV42 INS60 INS60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS41 INS42 INS43 INS59 INS43 INS59 INS32 MOV12 MOV12 UPD42 MOV42 INS42 INS14 MOV42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS43 MOV27 UPD42 MOV42 UPD42 MOV42 INS45 INS34 INS42 UPD45 INS45 INS42 UPD45 INS45 INS42 UPD45 INS45 INS42 UPD45 INS45 INS32 INS32 MOV44 MOV44 MOV44 MOV44 INS25 INS42 UPD42 MOV42 UPD42 MOV42 INS32 MOV32 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 MOV14 MOV41 INS32 MOV25 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 UPD45 UPD45 UPD42 MOV42 UPD45 INS45 INS32 INS32 INS32 INS42 MOV14 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV14 INS32 UPD42 MOV42 INS32 INS32 INS32 UPD42 MOV42 INS32 INS42 MOV14 INS32 INS32 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV41 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV41 MOV41 UPD45 UPD45 INS32 INS42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL83 DEL43 DEL42 DEL33 DEL59 DEL23 DEL66 DEL65 DEL29 DEL78 DEL83 DEL43 DEL42 DEL40 DEL59 DEL23 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL43 DEL42 DEL40 DEL59 DEL23 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL42 DEL7 DEL42 DEL7 DEL42 DEL32 DEL21 DEL42 DEL7 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL34 DEL41 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL40 DEL34 DEL41 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL45 DEL45 DEL45 DEL45 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31