MAPREDUCE-5951. Add support for the YARN Shared Cache.

+import java.net.URI;
+import java.net.URISyntaxException;
+   * The NM that hosts AM container will upload resources to shared cache.
+   * Thus there is no need to ask task container's NM to upload the
+   * resources to shared cache. Set the shared cache upload policy to
+   * false.
-      LocalResourceType type, LocalResourceVisibility visibility)
-      throws IOException {
+      String fileSymlink, LocalResourceType type,
+      LocalResourceVisibility visibility) throws IOException {
-    URL resourceURL = URL.fromPath(fc.resolvePath(fstat.getPath()));
+    // We need to be careful when converting from path to URL to add a fragment
+    // so that the symlink name when localized will be correct.
+    Path qualifiedPath = fc.resolvePath(fstat.getPath());
+    URI uriWithFragment = null;
+    boolean useFragment = fileSymlink != null && !fileSymlink.equals("");
+    try {
+      if (useFragment) {
+        uriWithFragment = new URI(qualifiedPath.toUri() + "#" + fileSymlink);
+      } else {
+        uriWithFragment = qualifiedPath.toUri();
+      }
+    } catch (URISyntaxException e) {
+      throw new IOException(
+          "Error parsing local resource path."
+              + " Path was not able to be converted to a URI: " + qualifiedPath,
+          e);
+    }
+    URL resourceURL = URL.fromURI(uriWithFragment);
-      resourceSize, resourceModificationTime);
+        resourceSize, resourceModificationTime, false);
-      LocalResource rc = createLocalResource(jobJarFs, remoteJobJar,
-          LocalResourceType.PATTERN, LocalResourceVisibility.APPLICATION);
+      LocalResourceVisibility jobJarViz =
+          conf.getBoolean(MRJobConfig.JOBJAR_VISIBILITY,
+              MRJobConfig.JOBJAR_VISIBILITY_DEFAULT)
+                  ? LocalResourceVisibility.PUBLIC
+                  : LocalResourceVisibility.APPLICATION;
+      // We hard code the job.jar localized symlink in the container directory.
+      // This is because the mapreduce app expects the job.jar to be named
+      // accordingly. Additionally we set the shared cache upload policy to
+      // false. Resources are uploaded by the AM if necessary.
+      LocalResource rc =
+          createLocalResource(jobJarFs, remoteJobJar, MRJobConfig.JOB_JAR,
+              LocalResourceType.PATTERN, jobJarViz);
+    // There is no point to ask task container's NM to upload the resource
+    // to shared cache (job conf is not shared). Therefore, createLocalResource
+    // will set the shared cache upload policy to false
-        createLocalResource(remoteFS, remoteJobConfPath, LocalResourceType.FILE,
-            LocalResourceVisibility.APPLICATION));
+        createLocalResource(remoteFS, remoteJobConfPath, null,
+            LocalResourceType.FILE, LocalResourceVisibility.APPLICATION));

INS26 INS26 INS40 INS40 INS44 INS43 INS42 INS60 INS60 INS54 INS60 INS66 INS66 INS66 INS66 INS42 INS43 INS43 INS59 INS39 INS59 INS8 INS12 MOV43 INS59 INS42 INS42 MOV32 INS42 INS42 INS33 INS42 INS27 INS25 INS44 INS8 INS42 INS32 INS9 INS60 INS27 INS38 INS42 INS8 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS43 INS59 INS33 INS42 INS33 INS32 INS21 INS21 INS42 INS14 INS42 INS42 INS16 INS42 INS42 INS45 INS7 INS7 INS43 INS27 INS42 INS32 INS40 INS40 UPD40 UPD40 INS42 INS42 INS14 INS42 INS32 INS42 INS45 INS45 INS42 INS42 INS42 INS40 INS40 INS43 INS27 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32