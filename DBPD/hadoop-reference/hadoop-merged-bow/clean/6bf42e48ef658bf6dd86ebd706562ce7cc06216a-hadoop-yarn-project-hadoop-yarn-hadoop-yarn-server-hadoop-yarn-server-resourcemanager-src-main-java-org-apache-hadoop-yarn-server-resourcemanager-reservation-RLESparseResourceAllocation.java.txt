YARN-5331. Extend RLESparseResourceAllocation with period for supporting recurring reservations in YARN ReservationSystem. (Sangeetha Abdu Jyothi via Subru).

+   * @param tick timeStap at which resource needs to be known
+  public ResourceCalculator getResourceCalculator() {
+    return resourceCalculator;
+  }
+
+  /**
+   * Get the maximum capacity across specified time instances. The search-space
+   * is specified using the starting value, tick, and the periodic interval for
+   * search. Maximum resource allocation across tick, tick + period,
+   * tick + 2 * period,..., tick + n * period .. is returned.
+   *
+   * @param tick the starting time instance
+   * @param period interval at which capacity is evaluated
+   * @return maximum resource allocation
+   */
+  public Resource getMaximumPeriodicCapacity(long tick, long period) {
+    Resource maxCapacity = ZERO_RESOURCE;
+    if (!cumulativeCapacity.isEmpty()) {
+      Long lastKey = cumulativeCapacity.lastKey();
+      for (long t = tick; t <= lastKey; t = t + period) {
+        maxCapacity = Resources.componentwiseMax(maxCapacity,
+            cumulativeCapacity.floorEntry(t).getValue());
+      }
+    }
+    return maxCapacity;
+  }
+
+  /**
+   * Get the minimum capacity in the specified time range.
+   *
+   * @param interval the {@link ReservationInterval} to be searched
+   * @return minimum resource allocation
+   */
+  public Resource getMinimumCapacityInInterval(ReservationInterval interval) {
+    Resource minCapacity = Resource.newInstance(
+        Integer.MAX_VALUE, Integer.MAX_VALUE);
+    long start = interval.getStartTime();
+    long end = interval.getEndTime();
+    NavigableMap<Long, Resource> capacityRange =
+        this.getRangeOverlapping(start, end).getCumulative();
+    if (!capacityRange.isEmpty()) {
+      for (Map.Entry<Long, Resource> entry : capacityRange.entrySet()) {
+        if (entry.getValue() != null) {
+          minCapacity = Resources.componentwiseMin(minCapacity,
+              entry.getValue());
+        }
+      }
+    }
+    return minCapacity;
+  }
+

INS31 INS31 INS31 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS39 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS25 INS41 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS59 INS38 INS8 INS42 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS74 INS59 INS38 INS8 INS42 INS42 INS42 INS42 INS32 INS60 INS24 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS32 INS70 INS42 INS42 INS43 INS59 INS58 INS27 INS7 INS8 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS44 INS32 INS8 INS42 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS27 INS21 INS52 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS43 INS43 INS27 INS8 INS42 INS32 INS40 INS42 INS42 INS32 INS33 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42