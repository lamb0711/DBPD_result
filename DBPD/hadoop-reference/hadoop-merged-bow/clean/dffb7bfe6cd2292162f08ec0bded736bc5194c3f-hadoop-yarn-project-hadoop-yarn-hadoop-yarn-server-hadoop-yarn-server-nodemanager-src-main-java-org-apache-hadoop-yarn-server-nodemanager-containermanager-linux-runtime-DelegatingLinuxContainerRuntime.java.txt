YARN-8638. Allow linux container runtimes to be pluggable. Contributed by Craig Condit

+import org.apache.hadoop.util.ReflectionUtils;
-import java.util.EnumSet;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
- * {@link DockerLinuxContainerRuntime} instance, or a
- * {@link JavaSandboxLinuxContainerRuntime} instance depending on whether
- * each instance believes the operation to be within its scope.
+ * {@link DockerLinuxContainerRuntime} instance, a
+ * {@link JavaSandboxLinuxContainerRuntime} instance, or a custom instance
+ * depending on whether each instance believes the operation to be within its
+ * scope.
- * @see DockerLinuxContainerRuntime#isDockerContainerRequested
+ * @see LinuxContainerRuntime#isRuntimeRequested
-       LoggerFactory.getLogger(DelegatingLinuxContainerRuntime.class);
+      LoggerFactory.getLogger(DelegatingLinuxContainerRuntime.class);
-  private EnumSet<LinuxContainerRuntimeConstants.RuntimeType> allowedRuntimes =
-      EnumSet.noneOf(LinuxContainerRuntimeConstants.RuntimeType.class);
+  private Set<String> allowedRuntimes = new HashSet<>();
+  private List<LinuxContainerRuntime> pluggableRuntimes = new ArrayList<>();
-      try {
-        allowedRuntimes.add(
-            LinuxContainerRuntimeConstants.RuntimeType.valueOf(
-                configuredRuntime.toUpperCase()));
-      } catch (IllegalArgumentException e) {
-        throw new ContainerExecutionException("Invalid runtime set in "
-            + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + " : "
-            + configuredRuntime);
+      String normRuntime = configuredRuntime.toUpperCase();
+      allowedRuntimes.add(normRuntime);
+      if (isPluggableRuntime(normRuntime)) {
+        LinuxContainerRuntime runtime = createPluggableRuntime(conf,
+            configuredRuntime);
+        runtime.initialize(conf, nmContext);
+        pluggableRuntimes.add(runtime);
-        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX)) {
+        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {
-        LinuxContainerRuntimeConstants.RuntimeType.DOCKER)) {
+        LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {
-        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT)) {
+        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {
+  @Override
+  public boolean isRuntimeRequested(Map<String, String> env) {
+    return true;
+  }
+
-        javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){
+        javaSandboxLinuxContainerRuntime.isRuntimeRequested(environment)){
-        DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){
+        dockerLinuxContainerRuntime.isRuntimeRequested(environment)) {
-    } else if (defaultLinuxContainerRuntime != null &&
-        !DockerLinuxContainerRuntime.isDockerContainerRequested(environment)) {
-      runtime = defaultLinuxContainerRuntime;
-      throw new ContainerExecutionException("Requested runtime not allowed.");
+      LinuxContainerRuntime pluggableRuntime = pickPluggableRuntime(
+          environment);
+      if (pluggableRuntime != null) {
+        runtime = pluggableRuntime;
+      } else if (defaultLinuxContainerRuntime != null &&
+          defaultLinuxContainerRuntime.isRuntimeRequested(environment)) {
+        runtime = defaultLinuxContainerRuntime;
+      } else {
+        throw new ContainerExecutionException("Requested runtime not allowed.");
+      }
+  private LinuxContainerRuntime pickPluggableRuntime(
+      Map<String, String> environment) {
+    for (LinuxContainerRuntime runtime : pluggableRuntimes) {
+      if (runtime.isRuntimeRequested(environment)) {
+        return runtime;
+      }
+    }
+    return null;
+  }
+
+  private boolean isPluggableRuntime(String runtimeType) {
+    for (LinuxContainerRuntimeConstants.RuntimeType type :
+        LinuxContainerRuntimeConstants.RuntimeType.values()) {
+      if (type.name().equalsIgnoreCase(runtimeType)) {
+        return false;
+      }
+    }
+    return true;
+  }
+
+  private LinuxContainerRuntime createPluggableRuntime(Configuration conf,
+      String runtimeType) throws ContainerExecutionException {
+    String confKey = String.format(
+        YarnConfiguration.LINUX_CONTAINER_RUNTIME_CLASS_FMT, runtimeType);
+    Class<? extends LinuxContainerRuntime> clazz = conf.getClass(
+        confKey, null, LinuxContainerRuntime.class);
+    if (clazz == null) {
+      throw new ContainerExecutionException("Invalid runtime set in "
+          + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + " : "
+          + runtimeType + " : Missing configuration " + confKey);
+    }
+    return ReflectionUtils.newInstance(clazz, conf);
+  }
+
-  boolean isRuntimeAllowed(
-      LinuxContainerRuntimeConstants.RuntimeType runtimeType) {
-    return allowedRuntimes.contains(runtimeType);
+  boolean isRuntimeAllowed(String runtimeType) {
+    return runtimeType != null && allowedRuntimes.contains(
+        runtimeType.toUpperCase());

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS23 INS23 INS31 INS31 INS31 INS31 MOV83 INS74 INS59 INS83 UPD74 MOV74 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS44 UPD66 UPD66 UPD66 INS66 INS43 INS43 INS42 INS14 UPD43 UPD43 INS42 INS14 INS42 INS74 INS42 INS41 INS42 INS74 INS42 INS70 INS41 INS43 INS42 INS70 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS43 INS42 UPD42 UPD42 INS42 INS42 INS74 UPD42 INS42 INS74 INS43 INS43 INS43 INS9 INS43 INS43 INS43 INS44 INS42 INS8 INS33 INS42 MOV44 INS32 INS8 INS9 INS42 INS42 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS42 INS27 INS43 INS43 INS60 MOV21 INS25 INS32 INS32 INS32 INS42 INS42 INS42 INS8 INS42 INS42 INS42 INS43 INS42 INS25 UPD42 INS40 INS42 INS25 INS42 INS42 INS32 INS43 INS76 UPD42 MOV42 MOV32 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS43 INS59 INS32 INS8 MOV40 INS42 MOV40 INS42 MOV40 INS42 UPD42 INS42 INS60 INS25 INS42 INS32 INS8 INS32 INS8 INS42 INS42 INS40 INS42 INS42 INS43 UPD42 UPD42 INS42 INS33 INS14 INS42 INS33 MOV42 MOV42 INS32 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS42 INS60 INS21 INS21 UPD42 UPD42 INS43 INS59 INS27 INS8 MOV25 INS42 INS42 INS42 INS41 INS32 INS42 INS42 INS41 INS42 UPD43 MOV43 INS27 MOV42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS9 INS42 INS45 INS40 INS45 INS42 INS45 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 DEL40 DEL59 DEL23 DEL40 DEL32 DEL8 DEL43 DEL42 DEL44 DEL45 DEL40 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL32 DEL38 DEL40 DEL32