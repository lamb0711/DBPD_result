HDFS-6718. Remove EncryptionZoneManager lock. (wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612439 13f79535-47bb-0310-9956-ffa450edef68

-  /**
-   * Protects the <tt>encryptionZones</tt> map and its contents.
-   */
-  private final ReentrantReadWriteLock lock;
-
-  private void readLock() {
-    lock.readLock().lock();
-  }
-
-  private void readUnlock() {
-    lock.readLock().unlock();
-  }
-
-  private void writeLock() {
-    lock.writeLock().lock();
-  }
-
-  private void writeUnlock() {
-    lock.writeLock().unlock();
-  }
-
-  public boolean hasWriteLock() {
-    return lock.isWriteLockedByCurrentThread();
-  }
-
-  public boolean hasReadLock() {
-    return lock.getReadHoldCount() > 0 || hasWriteLock();
-  }
-
-    lock = new ReentrantReadWriteLock();
-    writeLock();
-    try {
-      encryptionZones.put(inodeId, ez);
-    } finally {
-      writeUnlock();
-    }
+    encryptionZones.put(inodeId, ez);
-    writeLock();
-    try {
-      encryptionZones.remove(inodeId);
-    } finally {
-      writeUnlock();
-    }
+    encryptionZones.remove(inodeId);
-    readLock();
-    try {
-      return (getEncryptionZoneForPath(iip) != null);
-    } finally {
-      readUnlock();
-    }
+    return (getEncryptionZoneForPath(iip) != null);
-    readLock();
-    try {
-      EncryptionZoneInt ezi = getEncryptionZoneForPath(iip);
-      if (ezi == null) {
-        return null;
-      }
-      return ezi.getKeyName();
-    } finally {
-      readUnlock();
+    assert dir.hasReadLock();
+    EncryptionZoneInt ezi = getEncryptionZoneForPath(iip);
+    if (ezi == null) {
+      return null;
+    return ezi.getKeyName();
-    assert hasReadLock();
+    assert dir.hasReadLock();
-    readLock();
-    try {
-      final EncryptionZoneInt srcEZI = getEncryptionZoneForPath(srcIIP);
-      final EncryptionZoneInt dstEZI = getEncryptionZoneForPath(dstIIP);
-      final boolean srcInEZ = (srcEZI != null);
-      final boolean dstInEZ = (dstEZI != null);
-      if (srcInEZ) {
-        if (!dstInEZ) {
-          throw new IOException(
-              src + " can't be moved from an encryption zone.");
-        }
-      } else {
-        if (dstInEZ) {
-          throw new IOException(
-              src + " can't be moved into an encryption zone.");
-        }
+    final EncryptionZoneInt srcEZI = getEncryptionZoneForPath(srcIIP);
+    final EncryptionZoneInt dstEZI = getEncryptionZoneForPath(dstIIP);
+    final boolean srcInEZ = (srcEZI != null);
+    final boolean dstInEZ = (dstEZI != null);
+    if (srcInEZ) {
+      if (!dstInEZ) {
+        throw new IOException(
+            src + " can't be moved from an encryption zone.");
+    } else {
+      if (dstInEZ) {
+        throw new IOException(
+            src + " can't be moved into an encryption zone.");
+      }
+    }
-      if (srcInEZ || dstInEZ) {
-        Preconditions.checkState(srcEZI != null, "couldn't find src EZ?");
-        Preconditions.checkState(dstEZI != null, "couldn't find dst EZ?");
-        if (srcEZI != dstEZI) {
-          final String srcEZPath = getFullPathName(srcEZI);
-          final String dstEZPath = getFullPathName(dstEZI);
-          final StringBuilder sb = new StringBuilder(src);
-          sb.append(" can't be moved from encryption zone ");
-          sb.append(srcEZPath);
-          sb.append(" to encryption zone ");
-          sb.append(dstEZPath);
-          sb.append(".");
-          throw new IOException(sb.toString());
-        }
+    if (srcInEZ || dstInEZ) {
+      Preconditions.checkState(srcEZI != null, "couldn't find src EZ?");
+      Preconditions.checkState(dstEZI != null, "couldn't find dst EZ?");
+      if (srcEZI != dstEZI) {
+        final String srcEZPath = getFullPathName(srcEZI);
+        final String dstEZPath = getFullPathName(dstEZI);
+        final StringBuilder sb = new StringBuilder(src);
+        sb.append(" can't be moved from encryption zone ");
+        sb.append(srcEZPath);
+        sb.append(" to encryption zone ");
+        sb.append(dstEZPath);
+        sb.append(".");
+        throw new IOException(sb.toString());
-    } finally {
-      readUnlock();
-    writeLock();
-    try {
-      if (dir.isNonEmptyDirectory(src)) {
-        throw new IOException(
-            "Attempt to create an encryption zone for a non-empty directory.");
-      }
-
-      final INodesInPath srcIIP = dir.getINodesInPath4Write(src, false);
-      EncryptionZoneInt ezi = getEncryptionZoneForPath(srcIIP);
-      if (ezi != null) {
-        throw new IOException("Directory " + src + " is already in an " +
-            "encryption zone. (" + getFullPathName(ezi) + ")");
-      }
-
-      final XAttr keyIdXAttr = XAttrHelper
-          .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());
-
-      final List<XAttr> xattrs = Lists.newArrayListWithCapacity(1);
-      xattrs.add(keyIdXAttr);
-      // updating the xattr will call addEncryptionZone,
-      // done this way to handle edit log loading
-      dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));
-      // Re-get the new encryption zone add the latest key version
-      ezi = getEncryptionZoneForPath(srcIIP);
-      return keyIdXAttr;
-    } finally {
-      writeUnlock();
+    if (dir.isNonEmptyDirectory(src)) {
+      throw new IOException(
+          "Attempt to create an encryption zone for a non-empty directory.");
+
+    final INodesInPath srcIIP = dir.getINodesInPath4Write(src, false);
+    EncryptionZoneInt ezi = getEncryptionZoneForPath(srcIIP);
+    if (ezi != null) {
+      throw new IOException("Directory " + src + " is already in an " +
+          "encryption zone. (" + getFullPathName(ezi) + ")");
+    }
+
+    final XAttr keyIdXAttr = XAttrHelper
+        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());
+
+    final List<XAttr> xattrs = Lists.newArrayListWithCapacity(1);
+    xattrs.add(keyIdXAttr);
+    // updating the xattr will call addEncryptionZone,
+    // done this way to handle edit log loading
+    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));
+    // Re-get the new encryption zone add the latest key version
+    ezi = getEncryptionZoneForPath(srcIIP);
+    return keyIdXAttr;
-    readLock();
-    try {
-      final List<EncryptionZone> ret =
-          Lists.newArrayListWithExpectedSize(encryptionZones.size());
-      for (EncryptionZoneInt ezi : encryptionZones.values()) {
-        ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyName()));
-      }
-      return ret;
-    } finally {
-      readUnlock();
+    final List<EncryptionZone> ret =
+        Lists.newArrayListWithExpectedSize(encryptionZones.size());
+    for (EncryptionZoneInt ezi : encryptionZones.values()) {
+      ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyName()));
+    return ret;

MOV8 MOV8 MOV8 MOV8 MOV8 MOV8 MOV21 MOV6 MOV6 INS6 MOV6 MOV6 MOV6 INS32 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8