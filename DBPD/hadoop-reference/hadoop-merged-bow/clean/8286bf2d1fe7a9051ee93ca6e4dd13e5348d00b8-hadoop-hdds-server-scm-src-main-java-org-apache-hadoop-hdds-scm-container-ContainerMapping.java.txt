HDDS-303. Removing logic to identify containers to be closed from SCM. Contributed by Nanda kumar.

-import org.apache.hadoop.hdds.scm.container.closer.ContainerCloser;
-  private final float containerCloseThreshold;
-  private final ContainerCloser closer;
-    this.closer = new ContainerCloser(nodeManager, conf);
-    this.containerCloseThreshold = conf.getFloat(
-        ScmConfigKeys.OZONE_SCM_CONTAINER_CLOSE_THRESHOLD,
-        ScmConfigKeys.OZONE_SCM_CONTAINER_CLOSE_THRESHOLD_DEFAULT);
-   * @param size - Space needed in the Container.
+   * @param sizeRequired - Space needed in the Container.
-  public ContainerWithPipeline getMatchingContainerWithPipeline(final long size,
-      String owner, ReplicationType type, ReplicationFactor factor,
-      LifeCycleState state) throws IOException {
+  public ContainerWithPipeline getMatchingContainerWithPipeline(
+      final long sizeRequired, String owner, ReplicationType type,
+      ReplicationFactor factor, LifeCycleState state) throws IOException {
-        .getMatchingContainer(size, owner, type, factor, state);
+        .getMatchingContainer(sizeRequired, owner, type, factor, state);
-          // If the container is closed, then state is already written to SCM
-          Pipeline pipeline =
-              pipelineSelector.getPipeline(
-                  PipelineID.getFromProtobuf(newState.getPipelineID()),
-                  newState.getReplicationType());
-          if(pipeline == null) {
-            pipeline = pipelineSelector
-                .getReplicationPipeline(newState.getReplicationType(),
-                    newState.getReplicationFactor());
-          }
-          // DB.TODO: So can we can write only once to DB.
-          if (closeContainerIfNeeded(newState, pipeline)) {
-            LOG.info("Closing the Container: {}", newState.getContainerID());
-          }
-  /**
-   * Queues the close container command, to datanode and writes the new state
-   * to container DB.
-   * <p>
-   * TODO : Remove this 2 ContainerInfo definitions. It is brain dead to have
-   * one protobuf in one file and another definition in another file.
-   *
-   * @param newState - This is the state we maintain in SCM.
-   * @param pipeline
-   * @throws IOException
-   */
-  private boolean closeContainerIfNeeded(SCMContainerInfo newState,
-      Pipeline pipeline)
-      throws IOException {
-    float containerUsedPercentage = 1.0f *
-        newState.getUsedBytes() / this.size;
-
-    ContainerInfo scmInfo = getContainer(newState.getContainerID());
-    if (containerUsedPercentage >= containerCloseThreshold
-        && !isClosed(scmInfo)) {
-      // We will call closer till get to the closed state.
-      // That is SCM will make this call repeatedly until we reach the closed
-      // state.
-      closer.close(newState, pipeline);
-
-      if (shouldClose(scmInfo)) {
-        // This event moves the Container from Open to Closing State, this is
-        // a state inside SCM. This is the desired state that SCM wants this
-        // container to reach. We will know that a container has reached the
-        // closed state from container reports. This state change should be
-        // invoked once and only once.
-        HddsProtos.LifeCycleState state = updateContainerState(
-            scmInfo.getContainerID(),
-            HddsProtos.LifeCycleEvent.FINALIZE);
-        if (state != HddsProtos.LifeCycleState.CLOSING) {
-          LOG.error("Failed to close container {}, reason : Not able " +
-                  "to " +
-                  "update container state, current container state: {}.",
-              newState.getContainerID(), state);
-          return false;
-        }
-        return true;
-      }
-    }
-    return false;
-  }
-  @VisibleForTesting
-  public ContainerCloser getCloser() {
-    return closer;
-  }
-

UPD42 UPD42 UPD42 DEL40 DEL26 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL34 DEL42 DEL42 DEL32 DEL27 DEL52 DEL42 DEL22 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL45 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31