YARN-1510. Make NMClient support change container resources. (Meng Ding via wangda)

+  public NMClientAsyncImpl(AbstractCallbackHandler callbackHandler) {
+    this(NMClientAsync.class.getName(), callbackHandler);
+  }
+
+  public NMClientAsyncImpl(
+      String name, AbstractCallbackHandler callbackHandler) {
+    this(name, new NMClientImpl(), callbackHandler);
+  }
+
+  @Private
+  @VisibleForTesting
+  protected NMClientAsyncImpl(String name, NMClient client,
+      AbstractCallbackHandler callbackHandler) {
+    super(name, client, callbackHandler);
+    this.client = client;
+    this.callbackHandler = callbackHandler;
+  }
+
+  /**
+   * @deprecated Use {@link
+   *             #NMClientAsyncImpl(NMClientAsync.AbstractCallbackHandler)}
+   *             instead.
+   */
+  @Deprecated
+  /**
+   * @deprecated Use {@link #NMClientAsyncImpl(String,
+   *             NMClientAsync.AbstractCallbackHandler)} instead.
+   */
+  @Deprecated
+  @Deprecated
+  public void increaseContainerResourceAsync(Container container) {
+    if (!(callbackHandler instanceof AbstractCallbackHandler)) {
+      LOG.error("Callback handler does not implement container resource "
+              + "increase callback methods");
+      return;
+    }
+    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;
+    if (containers.get(container.getId()) == null) {
+      handler.onIncreaseContainerResourceError(
+          container.getId(),
+          RPCUtil.getRemoteException(
+              "Container " + container.getId() +
+                  " is neither started nor scheduled to start"));
+    }
+    try {
+      events.put(new IncreaseContainerResourceEvent(container));
+    } catch (InterruptedException e) {
+      LOG.warn("Exception when scheduling the event of increasing resource of "
+          + "Container " + container.getId());
+      handler.onIncreaseContainerResourceError(container.getId(), e);
+    }
+  }
+
-    QUERY_CONTAINER
+    QUERY_CONTAINER,
+    INCREASE_CONTAINER_RESOURCE
+  protected static class IncreaseContainerResourceEvent extends ContainerEvent {
+    private Container container;
+
+    public IncreaseContainerResourceEvent(Container container) {
+      super(container.getId(), container.getNodeId(),
+          container.getContainerToken(),
+              ContainerEventType.INCREASE_CONTAINER_RESOURCE);
+      this.container = container;
+    }
+
+    public Container getContainer() {
+      return container;
+    }
+  }
+
-            // RUNNING -> RUNNING should be the invalid transition
+            .addTransition(ContainerState.RUNNING, ContainerState.RUNNING,
+                ContainerEventType.INCREASE_CONTAINER_RESOURCE,
+                new IncreaseContainerResourceTransition())
-                    ContainerEventType.STOP_CONTAINER))
+                    ContainerEventType.STOP_CONTAINER,
+                    ContainerEventType.INCREASE_CONTAINER_RESOURCE))
-                    ContainerEventType.STOP_CONTAINER));
+                    ContainerEventType.STOP_CONTAINER,
+                    ContainerEventType.INCREASE_CONTAINER_RESOURCE));
+    protected static class IncreaseContainerResourceTransition implements
+        SingleArcTransition<StatefulContainer, ContainerEvent> {
+      @Override
+      public void transition(
+          StatefulContainer container, ContainerEvent event) {
+        if (!(container.nmClientAsync.getCallbackHandler()
+            instanceof AbstractCallbackHandler)) {
+          LOG.error("Callback handler does not implement container resource "
+              + "increase callback methods");
+          return;
+        }
+        AbstractCallbackHandler handler =
+            (AbstractCallbackHandler) container.nmClientAsync
+                .getCallbackHandler();
+        try {
+          if (!(event instanceof IncreaseContainerResourceEvent)) {
+            throw new AssertionError("Unexpected event type. Expecting:"
+                + "IncreaseContainerResourceEvent. Got:" + event);
+          }
+          IncreaseContainerResourceEvent increaseEvent =
+              (IncreaseContainerResourceEvent) event;
+          container.nmClientAsync.getClient().increaseContainerResource(
+              increaseEvent.getContainer());
+          try {
+            handler.onContainerResourceIncreased(
+                increaseEvent.getContainerId(), increaseEvent.getContainer()
+                    .getResource());
+          } catch (Throwable thr) {
+            // Don't process user created unchecked exception
+            LOG.info("Unchecked exception is thrown from "
+                + "onContainerResourceIncreased for Container "
+                + event.getContainerId(), thr);
+          }
+        } catch (Exception e) {
+          try {
+            handler.onIncreaseContainerResourceError(event.getContainerId(), e);
+          } catch (Throwable thr) {
+            // Don't process user created unchecked exception
+            LOG.info("Unchecked exception is thrown from "
+                + "onIncreaseContainerResourceError for Container "
+                + event.getContainerId(), thr);
+          }
+        }
+      }
+    }
+

INS31 INS31 INS31 INS31 INS55 INS44 INS44 INS44 INS29 INS78 INS83 INS42 MOV44 INS8 INS29 INS78 INS83 INS42 INS44 MOV44 INS8 INS78 INS78 INS78 INS83 INS42 INS44 INS44 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS72 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS83 INS83 INS42 INS55 INS43 INS42 INS43 INS42 INS43 INS42 INS65 INS42 INS17 INS65 INS42 INS43 INS42 INS17 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS46 INS21 INS21 INS43 INS42 INS25 INS60 INS25 INS54 INS42 INS42 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS8 MOV83 MOV83 INS42 INS74 INS31 INS42 INS42 INS42 INS66 INS65 INS66 INS32 INS42 INS66 INS65 INS66 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS38 INS8 INS43 INS59 INS27 INS8 INS8 INS12 INS42 INS42 INS43 INS42 INS46 INS21 INS42 INS41 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS68 INS57 INS42 INS68 INS43 INS22 INS42 INS22 INS42 INS36 INS21 INS41 INS42 INS42 INS11 INS32 INS33 INS21 INS21 INS44 INS8 INS42 INS32 INS32 INS32 INS40 INS7 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS54 INS42 INS69 INS43 INS42 INS69 INS69 INS42 INS52 INS42 INS52 INS42 INS62 INS32 INS43 INS42 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS40 INS42 INS42 INS38 INS8 INS43 INS59 INS8 INS12 INS43 INS42 INS43 INS43 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS32 INS32 INS52 INS42 INS32 INS42 INS40 INS40 INS36 INS21 INS41 INS42 INS42 INS11 INS25 INS60 INS21 INS54 INS44 INS8 INS40 INS42 INS40 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 MOV32 MOV42 MOV40 INS40 INS40 INS14 INS62 INS32 INS43 INS32 INS38 INS8 INS43 INS59 INS32 INS8 INS12 INS43 INS42 INS54 INS45 INS32 INS45 INS42 INS45 INS45 INS32 INS42 INS42 INS43 INS32 INS43 INS42 INS42 INS27 INS42 INS40 INS42 INS36 INS53 INS42 INS42 INS11 INS32 INS42 INS32 INS21 INS44 INS8 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS45 INS45 INS62 INS14 INS43 INS42 INS40 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS21 INS44 INS8 INS42 INS43 INS43 INS27 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS43 INS42 INS21 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 DEL42