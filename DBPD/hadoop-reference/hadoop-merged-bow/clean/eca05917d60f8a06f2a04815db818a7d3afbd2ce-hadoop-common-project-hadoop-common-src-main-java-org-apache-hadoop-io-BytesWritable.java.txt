HADOOP-16951: Tidy Up Text and ByteWritables Classes.

1. Remove superfluous code
2. Remove superfluous comments
3. Checkstyle fixes
4. Remove methods that simply call super.method()
5. Use Java 8 facilities to streamline code where applicable
6. Simplify and unify some of the constructs between the two classes
7. Expanding of the arrays be 1.5x instead of 2x per expansion.
+import java.util.Arrays;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
-  private static final byte[] EMPTY_BYTES = {};
+
+  private static final byte[] EMPTY_BYTES = new byte[0];
-  
+
-  public BytesWritable() {this(EMPTY_BYTES);}
-  
+  public BytesWritable() {
+    this.bytes = EMPTY_BYTES;
+    this.size = 0;
+  }
+
-  
+
-    byte[] result = new byte[size];
-    System.arraycopy(bytes, 0, result, 0, size);
-    return result;
+    return Arrays.copyOf(bytes, size);
-  
+
-  
+
-  
+
+   *
-  
+
-   * Change the capacity of the backing storage.
-   * The data is preserved.
-   * @param new_cap The new capacity in bytes.
+   * Change the capacity of the backing storage. The data is preserved.
+   *
+   * @param capacity The new capacity in bytes.
-  public void setCapacity(int new_cap) {
-    if (new_cap != getCapacity()) {
-      byte[] new_data = new byte[new_cap];
-      if (new_cap < size) {
-        size = new_cap;
-      }
-      if (size != 0) {
-        System.arraycopy(bytes, 0, new_data, 0, size);
-      }
-      bytes = new_data;
+  public void setCapacity(final int capacity) {
+    if (capacity != getCapacity()) {
+      this.size = Math.min(size, capacity);
+      this.bytes = Arrays.copyOf(this.bytes, capacity);
+   *
-   * Set the value to a copy of the given byte range
+   * Set the value to a copy of the given byte range.
+   *
-  // inherit javadoc
-  
-  // inherit javadoc
+
-  
-  @Override
-  public int hashCode() {
-    return super.hashCode();
-  }
+  @Override
+  public int hashCode() {
+    return super.hashCode();
+  }
+
-  public String toString() { 
-    StringBuilder sb = new StringBuilder(3*size);
-    for (int idx = 0; idx < size; idx++) {
-      // if not the first, put a blank separator in
-      if (idx != 0) {
-        sb.append(' ');
-      }
-      String num = Integer.toHexString(0xff & bytes[idx]);
-      // if it is only one digit, add a leading 0.
-      if (num.length() < 2) {
-        sb.append('0');
-      }
-      sb.append(num);
-    }
-    return sb.toString();
+  public String toString() {
+    return IntStream.range(0, size)
+        .mapToObj(idx -> String.format("%02x", bytes[idx]))
+        .collect(Collectors.joining(" "));
-    
+
-      return compareBytes(b1, s1+LENGTH_BYTES, l1-LENGTH_BYTES, 
-                          b2, s2+LENGTH_BYTES, l2-LENGTH_BYTES);
+      return compareBytes(b1, s1 + LENGTH_BYTES, l1 - LENGTH_BYTES,
+                          b2, s2 + LENGTH_BYTES, l2 - LENGTH_BYTES);
-  
+
-  
+

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS3 INS21 INS21 INS41 INS83 UPD42 INS41 MOV5 INS34 INS7 INS7 INS32 UPD66 UPD42 UPD66 INS32 INS22 INS42 INS22 INS34 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 INS21 INS21 INS32 UPD42 MOV42 INS32 INS52 INS42 INS52 INS42 INS7 INS7 INS32 INS42 INS86 UPD42 MOV42 UPD42 MOV42 INS45 INS22 INS32 INS22 INS32 INS42 INS42 INS34 INS42 INS59 MOV32 INS52 INS42 INS42 INS42 INS42 UPD42 MOV42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS22 INS42 INS42 UPD42 UPD42 INS45 MOV2 INS52 INS42 DEL4 DEL42 DEL17 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL34 DEL42 DEL34 DEL32 DEL21 DEL42 DEL41 DEL66 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL34 DEL34 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL42 DEL27 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL34 DEL27 DEL42 DEL13 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL13 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL32 DEL41