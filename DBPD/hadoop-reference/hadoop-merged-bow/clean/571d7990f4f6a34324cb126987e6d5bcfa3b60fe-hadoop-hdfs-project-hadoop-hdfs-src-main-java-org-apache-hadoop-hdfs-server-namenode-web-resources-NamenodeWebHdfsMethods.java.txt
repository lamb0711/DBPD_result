Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.InputStream;
+import javax.servlet.http.HttpServletResponse;
+import javax.ws.rs.core.Response.ResponseBuilder;
+import javax.ws.rs.core.Response.Status;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenIdentifier;
+import org.apache.hadoop.hdfs.web.resources.TokenArgumentParam;
-import org.apache.hadoop.hdfs.web.resources.DstPathParam;
+import org.apache.hadoop.hdfs.web.resources.DestinationParam;
-import org.apache.hadoop.io.Text;
+  private static final UriFsPathParam ROOT = new UriFsPathParam("");
+  
+  private @Context HttpServletResponse response;
+      if (status == null) {
+        throw new FileNotFoundException("File " + path + " not found.");
+      }
-        namenode, ugi, request.getUserPrincipal().getName());
+        namenode, ugi,
+        renewer != null? renewer: request.getUserPrincipal().getName());
-    t.setService(new Text(SecurityUtil.buildDTServiceName(
-        NameNode.getUri(namenode.getNameNodeAddress()),
-        NameNode.DEFAULT_PORT)));
+    t.setKind(WebHdfsFileSystem.TOKEN_KIND);
+    SecurityUtil.setTokenService(t, namenode.getNameNodeAddress());
-    final String uripath = "/" + WebHdfsFileSystem.PATH_PREFIX + path;
+    final String uripath = WebHdfsFileSystem.PATH_PREFIX + path;
-  /** Handle HTTP PUT request. */
+  /** Handle HTTP PUT request for the root. */
-  @Path("{" + UriFsPathParam.NAME + ":.*}")
+  @Path("/")
-  public Response put(
-      final InputStream in,
+  public Response putRoot(
-      @PathParam(UriFsPathParam.NAME) final UriFsPathParam path,
-      @QueryParam(DstPathParam.NAME) @DefaultValue(DstPathParam.DEFAULT)
-          final DstPathParam dstPath,
+      @QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
+          final DestinationParam destination,
-          final RenameOptionSetParam renameOptions
-      ) throws IOException, URISyntaxException, InterruptedException {
+          final RenameOptionSetParam renameOptions,
+      @QueryParam(TokenArgumentParam.NAME) @DefaultValue(TokenArgumentParam.DEFAULT) 
+          final TokenArgumentParam delegationTokenArgument
+      ) throws IOException, InterruptedException {
+    return put(ugi, delegation, ROOT, op, destination, owner, group,
+        permission, overwrite, bufferSize, replication, blockSize,
+        modificationTime, accessTime, renameOptions, delegationTokenArgument);
+  }
+
+  /** Handle HTTP PUT request. */
+  @PUT
+  @Path("{" + UriFsPathParam.NAME + ":.*}")
+  @Consumes({"*/*"})
+  @Produces({MediaType.APPLICATION_JSON})
+  public Response put(
+      @Context final UserGroupInformation ugi,
+      @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
+          final DelegationParam delegation,
+      @PathParam(UriFsPathParam.NAME) final UriFsPathParam path,
+      @QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
+          final PutOpParam op,
+      @QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
+          final DestinationParam destination,
+      @QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
+          final OwnerParam owner,
+      @QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
+          final GroupParam group,
+      @QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
+          final PermissionParam permission,
+      @QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
+          final OverwriteParam overwrite,
+      @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT)
+          final BufferSizeParam bufferSize,
+      @QueryParam(ReplicationParam.NAME) @DefaultValue(ReplicationParam.DEFAULT)
+          final ReplicationParam replication,
+      @QueryParam(BlockSizeParam.NAME) @DefaultValue(BlockSizeParam.DEFAULT)
+          final BlockSizeParam blockSize,
+      @QueryParam(ModificationTimeParam.NAME) @DefaultValue(ModificationTimeParam.DEFAULT)
+          final ModificationTimeParam modificationTime,
+      @QueryParam(AccessTimeParam.NAME) @DefaultValue(AccessTimeParam.DEFAULT)
+          final AccessTimeParam accessTime,
+      @QueryParam(RenameOptionSetParam.NAME) @DefaultValue(RenameOptionSetParam.DEFAULT)
+          final RenameOptionSetParam renameOptions,
+      @QueryParam(TokenArgumentParam.NAME) @DefaultValue(TokenArgumentParam.DEFAULT) 
+          final TokenArgumentParam delegationTokenArgument
+      ) throws IOException, InterruptedException {
-          + Param.toSortedString(", ", dstPath, owner, group, permission,
+          + Param.toSortedString(", ", destination, owner, group, permission,
+    //clear content type
+    response.setContentType(null);
+
+    final Configuration conf = (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);
-        @SuppressWarnings("deprecation")
-        final boolean b = np.rename(fullpath, dstPath.getValue());
+        final boolean b = np.rename(fullpath, destination.getValue());
-        np.rename2(fullpath, dstPath.getValue(),
+        np.rename2(fullpath, destination.getValue(),
-      final boolean b = np.setReplication(fullpath, replication.getValue());
+      final boolean b = np.setReplication(fullpath, replication.getValue(conf));
-      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+      final ResponseBuilder r = b? Response.ok(): Response.status(Status.FORBIDDEN);
+      return r.entity(js).type(MediaType.APPLICATION_JSON).build();
+      if (owner.getValue() == null && group.getValue() == null) {
+        throw new IllegalArgumentException("Both owner and group are empty.");
+      }
+
+    case RENEWDELEGATIONTOKEN:
+    {
+      final Token<DelegationTokenIdentifier> token = new Token<DelegationTokenIdentifier>();
+      token.decodeFromUrlString(delegationTokenArgument.getValue());
+      final long expiryTime = np.renewDelegationToken(token);
+      final String js = JsonUtil.toJsonString("long", expiryTime);
+      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+    }
+    case CANCELDELEGATIONTOKEN:
+    {
+      final Token<DelegationTokenIdentifier> token = new Token<DelegationTokenIdentifier>();
+      token.decodeFromUrlString(delegationTokenArgument.getValue());
+      np.cancelDelegationToken(token);
+      return Response.ok().type(MediaType.APPLICATION_JSON).build();
+    }
+  /** Handle HTTP POST request for the root. */
+  @POST
+  @Path("/")
+  @Consumes({"*/*"})
+  @Produces({MediaType.APPLICATION_JSON})
+  public Response postRoot(
+      @Context final UserGroupInformation ugi,
+      @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
+          final DelegationParam delegation,
+      @QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
+          final PostOpParam op,
+      @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT)
+          final BufferSizeParam bufferSize
+      ) throws IOException, InterruptedException {
+    return post(ugi, delegation, ROOT, op, bufferSize);
+  }
+
-      final InputStream in,
-      ) throws IOException, URISyntaxException, InterruptedException {
+      ) throws IOException, InterruptedException {
+    //clear content type
+    response.setContentType(null);
+
-  private static final UriFsPathParam ROOT = new UriFsPathParam("");
-
-  public Response root(
+  public Response getRoot(
-      ) throws IOException, URISyntaxException, InterruptedException {
+      ) throws IOException, InterruptedException {
+    //clear content type
+    response.setContentType(null);
-          offsetValue, lengthValue != null? lengthValue: offsetValue + 1);
+          offsetValue, lengthValue != null? lengthValue: Long.MAX_VALUE);
-      final String js = JsonUtil.toJsonString(status);
+      if (status == null) {
+        throw new FileNotFoundException("File does not exist: " + fullpath);
+      }
+
+      final String js = JsonUtil.toJsonString(status, true);
-        out.println("{\"" + HdfsFileStatus[].class.getSimpleName() + "\":[");
+        out.println("{\"" + HdfsFileStatus.class.getSimpleName() + "es\":{\""
+            + HdfsFileStatus.class.getSimpleName() + "\":[");
-          out.print(JsonUtil.toJsonString(partial[0]));
+          out.print(JsonUtil.toJsonString(partial[0], false));
-          out.print(JsonUtil.toJsonString(partial[i]));
+          out.print(JsonUtil.toJsonString(partial[i], false));
-            out.print(JsonUtil.toJsonString(s));
+            out.print(JsonUtil.toJsonString(s, false));
-        out.println("]}");
+        out.println();
+        out.println("]}}");
+  /** Handle HTTP DELETE request for the root. */
+  @DELETE
+  @Path("/")
+  @Produces(MediaType.APPLICATION_JSON)
+  public Response deleteRoot(
+      @Context final UserGroupInformation ugi,
+      @QueryParam(DeleteOpParam.NAME) @DefaultValue(DeleteOpParam.DEFAULT)
+          final DeleteOpParam op,
+      @QueryParam(RecursiveParam.NAME) @DefaultValue(RecursiveParam.DEFAULT)
+          final RecursiveParam recursive
+      ) throws IOException, InterruptedException {
+    return delete(ugi, ROOT, op, recursive);
+  }
+
-  @Path("{path:.*}")
+  @Path("{" + UriFsPathParam.NAME + ":.*}")
+    //clear content type
+    response.setContentType(null);
+

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 UPD40 INS40 INS40 UPD40 UPD40 INS23 INS31 MOV44 MOV44 INS31 INS31 INS83 INS78 INS43 INS59 INS29 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS8 UPD42 INS29 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS42 INS21 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS78 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS42 INS42 INS41 INS79 INS79 UPD43 UPD42 UPD43 UPD42 INS21 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS78 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS42 INS42 INS41 INS21 INS21 INS65 INS42 INS42 INS45 INS42 INS40 INS42 INS78 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS42 INS42 INS41 INS27 INS21 INS32 MOV32 INS66 INS45 INS40 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS32 INS42 INS40 INS42 INS40 UPD42 UPD40 UPD40 UPD42 INS32 INS66 INS45 INS40 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS32 INS32 INS32 INS66 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS32 INS45 INS40 INS45 INS32 INS25 INS42 INS42 INS40 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS27 INS8 INS16 INS42 INS33 INS53 INS27 INS42 MOV32 INS14 INS42 INS33 INS21 INS43 INS27 UPD42 INS32 INS42 INS45 INS42 INS45 INS42 INS42 UPD45 INS60 INS45 INS32 INS83 INS43 INS59 INS8 INS49 INS8 INS49 INS8 INS57 INS42 INS42 INS42 INS11 MOV60 MOV60 INS60 INS41 INS25 INS42 INS60 INS21 INS60 MOV60 MOV41 INS42 INS60 INS21 INS21 MOV41 INS25 MOV43 INS43 INS9 INS9 INS43 INS32 INS83 INS43 INS59 INS32 INS27 INS8 INS83 INS74 INS59 INS32 INS83 INS39 INS59 INS83 INS74 INS59 INS32 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS40 INS60 INS41 INS42 INS42 INS16 INS32 INS42 INS27 INS27 INS53 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS53 INS9 INS83 INS43 INS59 INS32 INS42 INS32 INS32 INS32 INS42 INS40 INS32 INS33 INS32 INS33 INS14 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 UPD45 UPD42 INS42 INS42 INS74 INS42 INS42 INS14 INS9 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS43 INS43 INS43 INS43 INS40 INS43 INS27 INS42 INS42 INS45 INS42 INS32 INS42 INS40 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 UPD42 INS42 INS42 MOV42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL14 DEL32 DEL45 DEL42 DEL43 DEL42 DEL45 DEL79 DEL8 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL34 DEL27 DEL85 DEL5 DEL45