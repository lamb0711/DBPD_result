HDFS-3423. BKJM: NN startup is failing, when tries to recoverUnfinalizedSegments() a bad inProgress_ ZNodes. Contributed by Ivan and Uma.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1344840 13f79535-47bb-0310-9956-ffa450edef68

-          EditLogLedgerMetadata l
-            = EditLogLedgerMetadata.read(zkc, znode);
-          long endTxId = recoverLastTxId(l, true);
-          if (endTxId == HdfsConstants.INVALID_TXID) {
-            LOG.error("Unrecoverable corruption has occurred in segment "
-                      + l.toString() + " at path " + znode
-                      + ". Unable to continue recovery.");
-            throw new IOException("Unrecoverable corruption,"
-                                  + " please check logs.");
+          EditLogLedgerMetadata l = EditLogLedgerMetadata.read(zkc, znode);
+          try {
+            long endTxId = recoverLastTxId(l, true);
+            if (endTxId == HdfsConstants.INVALID_TXID) {
+              LOG.error("Unrecoverable corruption has occurred in segment "
+                  + l.toString() + " at path " + znode
+                  + ". Unable to continue recovery.");
+              throw new IOException("Unrecoverable corruption,"
+                  + " please check logs.");
+            }
+            finalizeLogSegment(l.getFirstTxId(), endTxId);
+          } catch (SegmentEmptyException see) {
+            LOG.warn("Inprogress znode " + child
+                + " refers to a ledger which is empty. This occurs when the NN"
+                + " crashes after opening a segment, but before writing the"
+                + " OP_START_LOG_SEGMENT op. It is safe to delete."
+                + " MetaData [" + l.toString() + "]");
+
+            // If the max seen transaction is the same as what would
+            // have been the first transaction of the failed ledger,
+            // decrement it, as that transaction never happened and as
+            // such, is _not_ the last seen
+            if (maxTxId.get() == l.getFirstTxId()) {
+              maxTxId.reset(maxTxId.get() - 1);
+            }
+
+            zkc.delete(znode, -1);
-          finalizeLogSegment(l.getFirstTxId(), endTxId);
-      throws IOException {
+      throws IOException, SegmentEmptyException {
+    LedgerHandle lh = null;
-      LedgerHandle lh = null;
+    } catch (BKException bke) {
+      throw new IOException("Exception opening ledger for " + l, bke);
+    } catch (InterruptedException ie) {
+      throw new IOException("Interrupted opening ledger for " + l, ie);
+    }
+
+    BookKeeperEditLogInputStream in = null;
+
+    try {
-      BookKeeperEditLogInputStream in
-        = new BookKeeperEditLogInputStream(lh, l, lastAddConfirmed);
+      if (lastAddConfirmed == -1) {
+        throw new SegmentEmptyException();
+      }
+
+      in = new BookKeeperEditLogInputStream(lh, l, lastAddConfirmed);
-    } catch (BKException e) {
-      throw new IOException("Exception retreiving last tx id for ledger " + l,
-                            e);
-    } catch (InterruptedException ie) {
-      throw new IOException("Interrupted while retreiving last tx id "
-                            + "for ledger " + l, ie);
+    } finally {
+      if (in != null) {
+        in.close();
+      }
+  
+  private static class SegmentEmptyException extends IOException {
+  }

INS55 INS43 MOV8 INS83 INS83 INS42 INS43 UPD42 MOV42 INS54 INS54 INS42 INS8 INS12 INS12 INS8 INS8 MOV25 INS44 INS8 MOV44 INS8 INS33 MOV60 INS25 INS21 MOV60 MOV60 MOV61 MOV41 INS25 MOV43 INS42 INS53 INS53 INS27 INS8 INS7 INS27 INS8 INS42 INS14 INS14 INS42 INS38 INS53 INS42 MOV14 INS42 INS33 INS21 INS8 MOV43 INS27 INS42 MOV43 INS27 INS42 INS34 INS14 INS32 MOV25 MOV60 MOV60 INS54 INS45 INS42 INS45 INS42 INS43 INS42 INS42 MOV8 INS12 INS42 INS44 INS8 INS43 INS42 INS21 INS25 INS21 INS42 INS32 INS27 INS8 INS32 INS42 INS42 INS27 INS32 INS32 INS21 INS42 INS42 INS42 INS38 INS45 INS42 INS45 INS45 INS45 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS27 INS32 INS34 INS42 INS42 DEL42 DEL44 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL45 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8