HDFS-4480. Eliminate the file snapshot circular linked list.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1444280 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.List;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockCollection;
-   * @param withLink whether the node is INodeWithLink
-   * @param withSnapshot whether the node is {@link INodeDirectoryWithSnapshot}
+   * @param withSnapshot whether the node has snapshots
-      long preferredBlockSize, int numBlocks, boolean withLink,
+      long preferredBlockSize, int numBlocks,
-      return withLink ? new INodeFileWithSnapshot(fileNode, null) : fileNode;
+      return withSnapshot ? new INodeFileWithSnapshot(fileNode) : fileNode;
-  public static class BlocksMapUpdateInfo implements
-      Iterable<Map.Entry<Block, BlocksMapINodeUpdateEntry>> {
-    private final Map<Block, BlocksMapINodeUpdateEntry> updateMap;
+  public static class BlocksMapUpdateInfo {
+    /**
+     * The list of blocks that need to be removed from blocksMap
+     */
+    private List<Block> toDeleteList;
+    
+    public BlocksMapUpdateInfo(List<Block> toDeleteList) {
+      this.toDeleteList = toDeleteList == null ? new ArrayList<Block>()
+          : toDeleteList;
+    }
-      updateMap = new HashMap<Block, BlocksMapINodeUpdateEntry>();
+      toDeleteList = new ArrayList<Block>();
-     * Add a to-be-deleted block. This block should belongs to a file without
-     * snapshots. We thus only need to put a block-null pair into the updateMap.
-     * 
+     * @return The list of blocks that need to be removed from blocksMap
+     */
+    public List<Block> getToDeleteList() {
+      return toDeleteList;
+    }
+    
+    /**
+     * Add a to-be-deleted block into the
+     * {@link BlocksMapUpdateInfo#toDeleteList}
-        updateMap.put(toDelete, null);
+        toDeleteList.add(toDelete);
-     * Add a given block, as well as its old and new BlockCollection
-     * information, into the updateMap.
-     * 
-     * @param toUpdateBlock
-     *          The given block
-     * @param entry
-     *          The BlocksMapINodeUpdateEntry instance containing both the
-     *          original BlockCollection of the given block and the new
-     *          BlockCollection of the given block for updating the blocksMap.
-     *          The new BlockCollection should be the INode of one of the
-     *          corresponding file's snapshot.
-     */
-    public void addUpdateBlock(Block toUpdateBlock,
-        BlocksMapINodeUpdateEntry entry) {
-      updateMap.put(toUpdateBlock, entry);
-    }
-
-    /**
-     * Clear {@link BlocksMapUpdateInfo#updateMap}
+     * Clear {@link BlocksMapUpdateInfo#toDeleteList}
-      updateMap.clear();
-    }
-
-    @Override
-    public Iterator<Map.Entry<Block, BlocksMapINodeUpdateEntry>> iterator() {
-      return updateMap.entrySet().iterator();
-    }
-  }
-  
-  /**
-   * When deleting a file with snapshot, we cannot directly remove its record
-   * from blocksMap. Instead, we should consider replacing the original record
-   * in blocksMap with INode of snapshot.
-   */
-  public static class BlocksMapINodeUpdateEntry {
-    /**
-     * The BlockCollection of the file to be deleted
-     */
-    private final BlockCollection toDelete;
-    /**
-     * The BlockCollection of the to-be-deleted file's snapshot
-     */
-    private final BlockCollection toReplace;
-
-    public BlocksMapINodeUpdateEntry(BlockCollection toDelete,
-        BlockCollection toReplace) {
-      this.toDelete = toDelete;
-      this.toReplace = toReplace;
-    }
-
-    public BlockCollection getToDelete() {
-      return toDelete;
-    }
-
-    public BlockCollection getToReplace() {
-      return toReplace;
+      toDeleteList.clear();

MOV26 UPD40 UPD40 INS23 INS31 INS29 INS83 INS74 INS59 INS83 INS42 INS44 INS8 INS74 UPD42 INS8 UPD42 MOV44 INS8 UPD66 INS65 UPD43 MOV43 MOV43 INS42 INS74 INS42 INS21 UPD65 INS43 MOV43 INS41 INS65 MOV65 INS25 UPD42 INS66 UPD42 UPD43 MOV43 MOV43 INS7 UPD66 INS42 INS42 UPD66 MOV66 INS65 MOV27 INS8 UPD42 INS22 INS16 UPD42 INS67 MOV21 UPD42 INS52 INS42 INS27 INS14 INS42 UPD74 INS42 INS42 UPD42 INS42 INS33 INS74 UPD43 UPD42 UPD42 UPD42 UPD43 MOV43 MOV43 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL66 DEL65 DEL42 DEL65 DEL39 DEL42 DEL44 DEL33 DEL40 DEL43 DEL74 DEL74 DEL83 DEL83 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL43 DEL66 DEL39 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL8 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL8 DEL42 DEL78 DEL83 DEL42 DEL43 DEL40 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL55