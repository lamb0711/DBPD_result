HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.

+import org.apache.commons.lang3.builder.EqualsBuilder;
+  private static final String ERROR_MSG_FAULT_TOLERANT_MULTI_DEST =
+      "Invalid entry, fault tolerance requires multiple destinations ";
+  private static final String ERROR_MSG_FAULT_TOLERANT_ALL =
+      "Invalid entry, fault tolerance only supported for ALL order ";
+   * Check if the mount point supports a failed destination.
+   *
+   * @return If it supports failures.
+   */
+  public abstract boolean isFaultTolerant();
+
+  /**
+   * Set if the mount point supports failed destinations.
+   *
+   * @param faultTolerant If it supports failures.
+   */
+  public abstract void setFaultTolerant(boolean faultTolerant);
+
+  /**
-      sb.append("[" + this.getDestOrder() + "]");
+      sb.append("[").append(this.getDestOrder()).append("]");
+    if (this.isFaultTolerant()) {
+      sb.append("[FT]");
+    }
+    if (isFaultTolerant()) {
+      if (getDestinations().size() < 2) {
+        throw new IllegalArgumentException(
+            ERROR_MSG_FAULT_TOLERANT_MULTI_DEST + this);
+      }
+      if (!isAll()) {
+        throw new IllegalArgumentException(
+            ERROR_MSG_FAULT_TOLERANT_ALL + this);
+      }
+    }
+        .append(this.isFaultTolerant())
-      if (!this.getSourcePath().equals(other.getSourcePath())) {
-        return false;
-      } else if (!this.getDestinations().equals(other.getDestinations())) {
-        return false;
-      } else if (this.isReadOnly() != other.isReadOnly()) {
-        return false;
-      } else if (!this.getDestOrder().equals(other.getDestOrder())) {
-        return false;
-      }
-      return true;
+      return new EqualsBuilder()
+          .append(this.getSourcePath(), other.getSourcePath())
+          .append(this.getDestinations(), other.getDestinations())
+          .append(this.isReadOnly(), other.isReadOnly())
+          .append(this.getDestOrder(), other.getDestOrder())
+          .append(this.isFaultTolerant(), other.isFaultTolerant())
+          .isEquals();
-    return order == DestinationOrder.HASH_ALL ||
-        order == DestinationOrder.RANDOM ||
-        order == DestinationOrder.SPACE;
+    return DestinationOrder.FOLDER_ALL.contains(order);

INS26 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS42 INS29 INS83 INS83 INS39 INS42 INS44 MOV8 INS42 INS42 INS45 INS42 INS42 INS45 INS65 INS65 INS65 INS65 INS39 INS42 INS25 INS25 MOV41 INS66 INS66 INS66 INS42 INS66 INS32 INS8 INS32 INS8 INS32 MOV62 INS8 UPD9 MOV9 INS32 INS52 INS42 INS21 INS42 INS25 INS25 MOV32 INS42 MOV60 INS41 INS40 INS42 INS42 INS32 INS27 INS8 INS38 INS8 INS42 INS32 INS32 INS32 INS42 INS45 INS42 INS42 INS45 INS32 INS34 INS53 INS32 INS53 INS52 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS42 MOV32 INS32 INS42 INS14 INS42 INS14 INS32 INS42 INS32 INS32 MOV42 MOV42 INS45 INS42 INS43 INS27 INS43 INS27 INS32 INS42 MOV32 MOV32 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS52 MOV32 MOV32 INS42 MOV32 MOV32 MOV32 UPD42 INS14 INS42 INS43 INS42 DEL45 DEL45 DEL27 DEL42 DEL38 DEL9 DEL41 DEL8 DEL38 DEL9 DEL41 DEL8 DEL27 DEL9 DEL41 DEL8 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL25 DEL25 DEL25 DEL8 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27