YARN-8581. [AMRMProxy] Add sub-cluster timeout in LocalityMulticastAMRMProxyPolicy. Contributed by Botong Huang.

+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+  private Map<SubClusterId, Long> lastHeartbeatTimeStamp;
+  private long subClusterTimeOut;
+      lastHeartbeatTimeStamp = new ConcurrentHashMap<>();
+    this.subClusterTimeOut = this.federationFacade.getConf().getLong(
+        YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,
+        YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);
+    if (this.subClusterTimeOut <= 0) {
+      LOG.info(
+          "{} configured to be {}, should be positive. Using default of {}.",
+          YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,
+          this.subClusterTimeOut,
+          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);
+      this.subClusterTimeOut =
+          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT;
+    }
-    // stateless policy does not care about responses except tracking headroom
-    headroom.put(subClusterId, response.getAvailableResources());
+    if (response.getAvailableResources() != null) {
+      headroom.put(subClusterId, response.getAvailableResources());
+      LOG.info("Subcluster {} updated with {} memory headroom", subClusterId,
+          response.getAvailableResources().getMemorySize());
+    }
+    lastHeartbeatTimeStamp.put(subClusterId, System.currentTimeMillis());
+    for (Map.Entry<SubClusterId, List<ResourceRequest>> entry : bookkeeper
+        .getAnswer().entrySet()) {
+      // A new-cluster here will trigger new UAM luanch, which might take a long
+      // time. We don't want too many requests stuck in this UAM before it is
+      // ready and starts heartbeating
+      if (!lastHeartbeatTimeStamp.containsKey(entry.getKey())) {
+        lastHeartbeatTimeStamp.put(entry.getKey(), System.currentTimeMillis());
+      }
+    }
-      // pre-compute the set of subclusters that are both active and enabled by
-      // the policy weights, and accumulate their total weight
-          totPolicyWeight += entry.getValue();
+      Set<SubClusterId> tmpSCSet = new HashSet<>(activeAndEnabledSC);
+      for (Map.Entry<SubClusterId, Long> entry : lastHeartbeatTimeStamp
+          .entrySet()) {
+        long duration = System.currentTimeMillis() - entry.getValue();
+        if (duration > subClusterTimeOut) {
+          LOG.warn(
+              "Subcluster {} does not have a success heartbeat for {}s, "
+                  + "skip routing asks there for this request",
+              entry.getKey(), (double) duration / 1000);
+          tmpSCSet.remove(entry.getKey());
+        }
+      }
+      if (tmpSCSet.size() < 1) {
+        LOG.warn("All active and enabled subclusters have expired last "
+            + "heartbeat time. Ignore the expiry check for this request");
+      } else {
+        activeAndEnabledSC = tmpSCSet;
+      }
+
+      LOG.info("{} subcluster active, {} subclusters active and enabled",
+          activeSubclusters.size(), activeAndEnabledSC.size());
+
+      // pre-compute the set of subclusters that are both active and enabled by
+      // the policy weights, and accumulate their total weight
+      for (SubClusterId sc : activeAndEnabledSC) {
+        totPolicyWeight += policyWeights.get(sc);
+      }
+

INS26 INS40 INS23 INS23 INS83 INS74 INS59 INS83 INS39 INS59 INS8 INS43 INS43 INS43 INS42 INS42 INS21 INS25 INS25 INS21 INS70 INS42 INS42 INS42 INS7 INS27 INS8 INS27 MOV8 INS32 INS44 INS32 INS8 INS60 INS70 INS25 INS21 INS70 INS21 INS22 INS32 INS22 INS34 INS21 INS21 INS32 INS33 INS21 INS42 INS42 INS42 INS32 INS74 INS42 INS32 INS42 INS25 INS74 INS59 INS44 INS32 INS8 INS27 INS8 INS8 INS32 INS44 INS42 INS8 INS7 INS52 INS42 INS32 INS42 INS40 INS40 INS52 INS42 INS32 INS7 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS38 INS8 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS60 INS25 INS32 INS34 INS21 INS21 INS42 INS42 INS45 INS32 INS32 INS43 INS42 INS21 INS42 INS14 INS22 INS42 INS42 INS42 INS45 INS40 INS22 INS40 INS22 INS40 INS42 INS42 INS45 INS42 INS32 INS40 INS42 INS43 INS43 INS32 INS21 INS42 INS42 INS74 INS42 INS43 INS43 INS43 INS39 INS59 INS27 INS8 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS7 INS74 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS40 INS42 INS42 INS42 INS27 INS42 INS42 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 MOV32 INS32 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS27 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS11 INS34 INS42 INS42 INS39 INS42 DEL42 DEL7 DEL21