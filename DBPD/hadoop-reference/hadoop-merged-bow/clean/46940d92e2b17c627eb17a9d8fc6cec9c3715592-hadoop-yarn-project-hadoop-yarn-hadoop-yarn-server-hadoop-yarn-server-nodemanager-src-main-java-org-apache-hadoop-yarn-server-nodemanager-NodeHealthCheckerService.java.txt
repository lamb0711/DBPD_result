YARN-6302. Fail the node if Linux Container Executor is not configured properly
(Contributed by Miklos Szegedi via Daniel Templeton)

+import com.google.common.base.Joiner;
+import com.google.common.base.Strings;
+import java.util.Arrays;
+import java.util.Collections;
+
+  private Exception nodeHealthException;
+  private long nodeHealthExceptionReportTime;
+    nodeHealthException = null;
+    nodeHealthExceptionReportTime = 0;
-    String scriptReport = (nodeHealthScriptRunner == null) ? ""
-        : nodeHealthScriptRunner.getHealthReport();
-    if (scriptReport.equals("")) {
-      return dirsHandler.getDisksHealthReport(false);
-    } else {
-      return scriptReport.concat(SEPARATOR + dirsHandler.getDisksHealthReport(false));
-    }
+    String scriptReport = Strings.emptyToNull(
+        nodeHealthScriptRunner == null ? null :
+        nodeHealthScriptRunner.getHealthReport());
+    String discReport =
+        Strings.emptyToNull(
+            dirsHandler.getDisksHealthReport(false));
+    String exceptionReport = Strings.emptyToNull(
+        nodeHealthException == null ? null :
+        nodeHealthException.getMessage());
+
+    return Joiner.on(SEPARATOR).skipNulls()
+        .join(scriptReport, discReport, exceptionReport);
-    boolean scriptHealthStatus = (nodeHealthScriptRunner == null) ? true
-        : nodeHealthScriptRunner.isHealthy();
-    return scriptHealthStatus && dirsHandler.areDisksHealthy();
+    boolean scriptHealthy = nodeHealthScriptRunner == null ||
+        nodeHealthScriptRunner.isHealthy();
+    return nodeHealthException == null &&
+        scriptHealthy && dirsHandler.areDisksHealthy();
-    long diskCheckTime = dirsHandler.getLastDisksCheckTime();
-    long lastReportTime = (nodeHealthScriptRunner == null)
-        ? diskCheckTime
-        : Math.max(nodeHealthScriptRunner.getLastReportedTime(), diskCheckTime);
-    return lastReportTime;
+    return Collections.max(Arrays.asList(
+        dirsHandler.getLastDisksCheckTime(),
+        nodeHealthScriptRunner == null ? 0 :
+            nodeHealthScriptRunner.getLastReportedTime(),
+        nodeHealthExceptionReportTime));
+
+  /**
+   * Report an exception to mark the node as unhealthy.
+   * @param ex the exception that makes the node unhealthy
+   */
+  void reportException(Exception ex) {
+    nodeHealthException = ex;
+    nodeHealthExceptionReportTime = System.currentTimeMillis();
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS59 MOV29 MOV39 MOV42 INS8 INS29 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS21 INS21 INS60 INS60 MOV41 INS41 INS65 INS65 INS43 INS42 INS21 INS21 INS7 INS7 INS43 INS59 INS43 INS59 INS32 INS66 INS42 INS66 INS42 INS7 INS7 INS42 INS33 INS42 INS34 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS32 INS42 INS42 UPD42 INS42 UPD42 INS27 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS16 UPD42 UPD42 MOV32 UPD42 MOV42 UPD42 MOV42 INS16 INS32 INS42 MOV27 MOV32 INS27 UPD42 MOV42 INS42 INS42 MOV32 INS16 INS42 INS42 INS42 MOV27 INS33 MOV32 INS27 INS33 INS32 UPD42 MOV42 INS42 INS42 INS42 INS33 MOV27 INS34 MOV32 INS42 INS33 INS42 INS42 DEL36 DEL45 DEL16 DEL42 DEL27 DEL9 DEL45 DEL32 DEL8 DEL41 DEL8 DEL25 DEL36 DEL9 DEL16 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL36 DEL42 DEL42 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31