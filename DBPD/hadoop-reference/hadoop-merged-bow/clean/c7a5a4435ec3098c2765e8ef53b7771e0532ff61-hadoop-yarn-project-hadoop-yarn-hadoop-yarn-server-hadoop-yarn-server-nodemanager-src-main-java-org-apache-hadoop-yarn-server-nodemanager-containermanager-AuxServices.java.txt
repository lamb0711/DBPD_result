YARN-9075.  Add ability to register/remove auxiliary service without restart node manager.
            Contributed by Billie Rinaldi

+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.Timer;
+import java.util.TimerTask;
+
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.hadoop.fs.FSDataInputStream;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.records.AuxServiceConfiguration;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.records.AuxServiceFile;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.records.AuxServiceRecord;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.records.AuxServiceRecords;
+  public static final String CLASS_NAME = "class.name";
+  public static final String SYSTEM_CLASSES = "system.classes";
+
-  protected final Map<String,AuxiliaryService> serviceMap;
-  protected final Map<String,ByteBuffer> serviceMetaData;
+  private final Map<String, AuxiliaryService> serviceMap;
+  private final Map<String, AuxServiceRecord> serviceRecordMap;
+  private final Map<String, ByteBuffer> serviceMetaData;
+  private final FsPermission storeDirPerms = new FsPermission((short)0700);
+  private Path stateStoreRoot = null;
+  private FileSystem stateStoreFs = null;
+
+  private Path manifest;
+  private FileSystem manifestFS;
+  private Timer manifestReloadTimer;
+  private TimerTask manifestReloadTask;
+  private long manifestReloadInterval;
+  private long manifestModifyTS = -1;
+
+  private final ObjectMapper mapper;
+
-  public AuxServices(AuxiliaryLocalPathHandler auxiliaryLocalPathHandler,
+  AuxServices(AuxiliaryLocalPathHandler auxiliaryLocalPathHandler,
-      Collections.synchronizedMap(new HashMap<String,AuxiliaryService>());
+      Collections.synchronizedMap(new HashMap<String, AuxiliaryService>());
+    serviceRecordMap =
+        Collections.synchronizedMap(new HashMap<String, AuxServiceRecord>());
+    this.mapper = new ObjectMapper();
+    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
+  /**
+   * Adds a service to the service map.
+   *
+   * @param name aux service name
+   * @param service aux service
+   * @param serviceRecord aux service record
+   */
-      AuxiliaryService service) {
-    LOG.info("Adding auxiliary service " +
-        service.getName() + ", \"" + name + "\"");
+      AuxiliaryService service, AuxServiceRecord serviceRecord) {
+    LOG.info("Adding auxiliary service " + serviceRecord.getName() +
+        " version " + serviceRecord.getVersion());
+    serviceRecordMap.put(name, serviceRecord);
+   * Gets current aux service records.
+   *
+   * @return a collection of service records
+   */
+  public Collection<AuxServiceRecord> getServiceRecords() {
+    return Collections.unmodifiableCollection(serviceRecordMap.values());
+  }
+
+  /**
-    Map<String, ByteBuffer> metaClone = new HashMap<String, ByteBuffer>(
-        serviceMetaData.size());
+    Map<String, ByteBuffer> metaClone = new HashMap<>(serviceMetaData.size());
+  /**
+   * Creates an auxiliary service from a specification using the Configuration
+   * classloader.
+   *
+   * @param service aux service record
+   * @return auxiliary service
+   */
+  private AuxiliaryService createAuxServiceFromConfiguration(AuxServiceRecord
+      service) {
+    Configuration c = new Configuration(false);
+    c.set(CLASS_NAME, getClassName(service));
+    Class<? extends AuxiliaryService> sClass = c.getClass(CLASS_NAME,
+        null, AuxiliaryService.class);
+
+    if (sClass == null) {
+      throw new YarnRuntimeException("No class defined for auxiliary " +
+          "service" + service.getName());
+    }
+    return ReflectionUtils.newInstance(sClass, null);
+  }
+
+  /**
+   * Creates an auxiliary service from a specification using a custom local
+   * classpath.
+   *
+   * @param service aux service record
+   * @param appLocalClassPath local class path
+   * @param conf configuration
+   * @return auxiliary service
+   * @throws IOException
+   * @throws ClassNotFoundException
+   */
+  private AuxiliaryService createAuxServiceFromLocalClasspath(
+      AuxServiceRecord service, String appLocalClassPath, Configuration conf)
+      throws IOException, ClassNotFoundException {
+    Preconditions.checkArgument(appLocalClassPath != null &&
+        !appLocalClassPath.isEmpty(),
+        "local classpath was null in createAuxServiceFromLocalClasspath");
+    final String sName = service.getName();
+    final String className = getClassName(service);
+
+    if (service.getConfiguration() != null && service.getConfiguration()
+        .getFiles().size() > 0) {
+      throw new YarnRuntimeException("The aux service:" + sName
+          + " has configured local classpath:" + appLocalClassPath
+          + " and config files:" + service.getConfiguration().getFiles()
+          + ". Only one of them should be configured.");
+    }
+
+    return AuxiliaryServiceWithCustomClassLoader.getInstance(conf, className,
+        appLocalClassPath, getSystemClasses(service, className));
+  }
+
+  /**
+   * Creates an auxiliary service from a specification.
+   *
+   * @param service aux service record
+   * @param conf configuration
+   * @param fromConfiguration true if from configuration, false if from manifest
+   * @return auxiliary service
+   * @throws IOException
+   * @throws ClassNotFoundException
+   */
+  private AuxiliaryService createAuxService(AuxServiceRecord service,
+      Configuration conf, boolean fromConfiguration) throws IOException,
+      ClassNotFoundException {
+    final String sName = service.getName();
+    final String className = getClassName(service);
+    if (className == null || className.isEmpty()) {
+      throw new YarnRuntimeException("Class name not provided for auxiliary " +
+          "service " + sName);
+    }
+    if (fromConfiguration) {
+      // aux services from the configuration have an additional configuration
+      // option specifying a local classpath that will not be localized
+      final String appLocalClassPath = conf.get(String.format(
+          YarnConfiguration.NM_AUX_SERVICES_CLASSPATH, sName));
+      if (appLocalClassPath != null && !appLocalClassPath.isEmpty()) {
+        return createAuxServiceFromLocalClasspath(service, appLocalClassPath,
+            conf);
+      }
+    }
+    AuxServiceConfiguration serviceConf = service.getConfiguration();
+    List<Path> destFiles = new ArrayList<>();
+    if (serviceConf != null) {
+      List<AuxServiceFile> files = serviceConf.getFiles();
+      if (files != null) {
+        for (AuxServiceFile file : files) {
+          // localize file (if needed) and add it to the list of paths that
+          // will become the classpath
+          destFiles.add(maybeDownloadJars(sName, className, file.getSrcFile(),
+              file.getType(), conf));
+        }
+      }
+    }
+
+    if (destFiles.size() > 0) {
+      // create aux service using a custom localized classpath
+      LOG.info("The aux service:" + sName
+          + " is using the custom classloader with classpath " + destFiles);
+      return AuxiliaryServiceWithCustomClassLoader.getInstance(conf,
+          className, StringUtils.join(File.pathSeparatorChar, destFiles),
+          getSystemClasses(service, className));
+    } else {
+      return createAuxServiceFromConfiguration(service);
+    }
+  }
+
+  /**
+   * Copies the specified remote file to local NM aux service directory. If the
+   * same file already exists (as determined by modification time), the file
+   * will not be copied again.
+   *
+   * @param sName service name
+   * @param className service class name
+   * @param remoteFile location of the file to download
+   * @param type type of file (STATIC for a jar or ARCHIVE for a tarball)
+   * @param conf configuration
+   * @return path of the downloaded file
+   * @throws IOException
+   */
+  private Path maybeDownloadJars(String sName, String className, String
+      remoteFile, AuxServiceFile.TypeEnum type, Configuration conf)
+      throws IOException {
+    // load AuxiliaryService from remote classpath
+    FileContext localLFS = getLocalFileContext(conf);
+    // create NM aux-service dir in NM localdir if it does not exist.
+    Path nmAuxDir = dirsHandler.getLocalPathForWrite("."
+        + Path.SEPARATOR + NM_AUX_SERVICE_DIR);
+    if (!localLFS.util().exists(nmAuxDir)) {
+      try {
+        localLFS.mkdir(nmAuxDir, NM_AUX_SERVICE_DIR_PERM, true);
+      } catch (IOException ex) {
+        throw new YarnRuntimeException("Fail to create dir:"
+            + nmAuxDir.toString(), ex);
+      }
+    }
+    Path src = new Path(remoteFile);
+    FileContext remoteLFS = getRemoteFileContext(src.toUri(), conf);
+    FileStatus scFileStatus = remoteLFS.getFileStatus(src);
+    if (!scFileStatus.getOwner().equals(
+        this.userUGI.getShortUserName())) {
+      throw new YarnRuntimeException("The remote jarfile owner:"
+          + scFileStatus.getOwner() + " is not the same as the NM user:"
+          + this.userUGI.getShortUserName() + ".");
+    }
+    if ((scFileStatus.getPermission().toShort() & 0022) != 0) {
+      throw new YarnRuntimeException("The remote jarfile should not "
+          + "be writable by group or others. "
+          + "The current Permission is "
+          + scFileStatus.getPermission().toShort());
+    }
+    Path downloadDest = new Path(nmAuxDir,
+        className + "_" + scFileStatus.getModificationTime());
+    // check whether we need to re-download the jar
+    // from remote directory
+    Path targetDirPath = new Path(downloadDest,
+        scFileStatus.getPath().getName());
+    FileStatus[] allSubDirs = localLFS.util().listStatus(nmAuxDir);
+    for (FileStatus sub : allSubDirs) {
+      if (sub.getPath().getName().equals(downloadDest.getName())) {
+        return new Path(targetDirPath + Path.SEPARATOR + "*");
+      } else {
+        if (sub.getPath().getName().contains(className) &&
+            !sub.getPath().getName().endsWith(DEL_SUFFIX)) {
+          Path delPath = new Path(sub.getPath().getParent(),
+              sub.getPath().getName() + DEL_SUFFIX);
+          localLFS.rename(sub.getPath(), delPath);
+          LOG.info("delete old aux service jar dir:"
+              + delPath.toString());
+          FileDeletionTask deletionTask = new FileDeletionTask(
+              this.delService, null, delPath, null);
+          this.delService.delete(deletionTask);
+        }
+      }
+    }
+    LocalResourceType srcType;
+    if (type == AuxServiceFile.TypeEnum.STATIC) {
+      srcType = LocalResourceType.FILE;
+    } else if (type == AuxServiceFile.TypeEnum.ARCHIVE) {
+      srcType = LocalResourceType.ARCHIVE;
+    } else {
+      throw new YarnRuntimeException(
+          "Cannot unpack file of type " + type + " from remote-file-path:" +
+              src + "for aux-service:" + ".\n");
+    }
+    LocalResource scRsrc = LocalResource.newInstance(
+        URL.fromURI(src.toUri()),
+        srcType, LocalResourceVisibility.PRIVATE,
+        scFileStatus.getLen(), scFileStatus.getModificationTime());
+    FSDownload download = new FSDownload(localLFS, null, conf,
+        downloadDest, scRsrc, null);
+    try {
+      // don't need to convert downloaded path into a dir
+      // since it's already a jar path.
+      return download.call();
+    } catch (Exception ex) {
+      throw new YarnRuntimeException(
+          "Exception happend while downloading files "
+              + "for aux-service:" + sName + " and remote-file-path:"
+              + src + ".\n" + ex.getMessage());
+    }
+  }
+
+  /**
+   * If recovery is enabled, creates a recovery directory for the named
+   * service and sets it on the service.
+   *
+   * @param sName name of the service
+   * @param s auxiliary service
+   * @throws IOException
+   */
+  private void setStateStoreDir(String sName, AuxiliaryService s) throws
+      IOException {
+    if (stateStoreRoot != null) {
+      Path storePath = new Path(stateStoreRoot, sName);
+      stateStoreFs.mkdirs(storePath, storeDirPerms);
+      s.setRecoveryPath(storePath);
+    }
+  }
+
+  /**
+   * Removes a service from the service map and stops it, if it exists.
+   *
+   * @param sName name of the service
+   */
+  private synchronized void maybeRemoveAuxService(String sName) {
+    AuxiliaryService s;
+    s = serviceMap.remove(sName);
+    serviceRecordMap.remove(sName);
+    serviceMetaData.remove(sName);
+    if (s != null) {
+      stopAuxService(s);
+    }
+  }
+
+  /**
+   * Constructs an AuxiliaryService then configures and initializes it based
+   * on a service specification.
+   *
+   * @param service aux service record
+   * @param conf configuration
+   * @param fromConfiguration true if from configuration, false if from manifest
+   * @return aux service
+   * @throws IOException
+   */
+  private AuxiliaryService initAuxService(AuxServiceRecord service,
+      Configuration conf, boolean fromConfiguration) throws IOException {
+    final String sName = service.getName();
+    AuxiliaryService s;
+    try {
+      Preconditions
+          .checkArgument(
+              validateAuxServiceName(sName),
+              "The auxiliary service name: " + sName + " is invalid. " +
+                  "The valid service name should only contain a-zA-Z0-9_ " +
+                  "and cannot start with numbers.");
+      s = createAuxService(service, conf, fromConfiguration);
+      if (s == null) {
+        throw new YarnRuntimeException("No auxiliary service class loaded for" +
+            " " + sName);
+      }
+      // TODO better use s.getName()?
+      if (!sName.equals(s.getName())) {
+        LOG.warn("The Auxiliary Service named '" + sName + "' in the "
+            + "configuration is for " + s.getClass() + " which has "
+            + "a name of '" + s.getName() + "'. Because these are "
+            + "not the same tools trying to send ServiceData and read "
+            + "Service Meta Data may have issues unless the refer to "
+            + "the name in the config.");
+      }
+      s.setAuxiliaryLocalPathHandler(auxiliaryLocalPathHandler);
+      setStateStoreDir(sName, s);
+      Configuration customConf = new Configuration(conf);
+      if (service.getConfiguration() != null) {
+        for (Entry<String, String> entry : service.getConfiguration()
+            .getProperties().entrySet()) {
+          customConf.set(entry.getKey(), entry.getValue());
+        }
+      }
+      s.init(customConf);
+
+      LOG.info("Initialized auxiliary service " + sName);
+    } catch (RuntimeException e) {
+      LOG.error("Failed to initialize " + sName, e);
+      throw e;
+    } catch (ClassNotFoundException e) {
+      throw new YarnRuntimeException(e);
+    }
+    return s;
+  }
+
+  /**
+   * Reloads auxiliary services manifest. Must be called after service init.
+   *
+   * @throws IOException if manifest can't be loaded
+   */
+  private void reloadManifest() throws IOException {
+    loadManifest(getConfig(), true);
+  }
+
+  /**
+   * Reads the manifest file if it is configured, exists, and has not been
+   * modified since the last read.
+   *
+   * @return aux service records
+   * @throws IOException
+   */
+  private synchronized AuxServiceRecords maybeReadManifestFile() throws
+      IOException {
+    if (manifest == null) {
+      return null;
+    }
+    if (!manifestFS.exists(manifest)) {
+      LOG.info("Manifest file " + manifest + " doesn't exist");
+      return null;
+    }
+    FileStatus status;
+    try {
+      status = manifestFS.getFileStatus(manifest);
+    } catch (FileNotFoundException e) {
+      LOG.info("Manifest file " + manifest + " doesn't exist");
+      return null;
+    }
+    if (status.getModificationTime() == manifestModifyTS) {
+      return null;
+    }
+    manifestModifyTS = status.getModificationTime();
+    LOG.info("Reading auxiliary services manifest " + manifest);
+    try (FSDataInputStream in = manifestFS.open(manifest)) {
+      return mapper.readValue((InputStream) in, AuxServiceRecords.class);
+    }
+  }
+
+  /**
+   * Updates current aux services based on changes found in the manifest.
+   *
+   * @param conf configuration
+   * @param startServices if true starts services, otherwise only inits services
+   * @throws IOException
+   */
+  private synchronized void loadManifest(Configuration conf, boolean
+      startServices) throws IOException {
+    AuxServiceRecords services = maybeReadManifestFile();
+    if (services == null) {
+      // read did not occur or no changes detected
+      return;
+    }
+    Set<String> loadedAuxServices = new HashSet<>();
+    boolean foundChanges = false;
+    if (services.getServices() != null) {
+      for (AuxServiceRecord service : services.getServices()) {
+        AuxServiceRecord existingService = serviceRecordMap.get(service
+            .getName());
+        loadedAuxServices.add(service.getName());
+        if (existingService != null && existingService.equals(service)) {
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Auxiliary service already loaded: " + service.getName());
+          }
+          continue;
+        }
+        foundChanges = true;
+        try {
+          // stop aux service
+          maybeRemoveAuxService(service.getName());
+          // init aux service
+          AuxiliaryService s = initAuxService(service, conf, false);
+          if (startServices) {
+            // start aux service
+            startAuxService(service.getName(), s, service);
+          }
+          // add aux service to serviceMap
+          addService(service.getName(), s, service);
+        } catch (IOException e) {
+          LOG.error("Failed to load auxiliary service " + service.getName());
+        }
+      }
+    }
+
+    // remove aux services that do not appear in the manifest
+    List<String> servicesToRemove = new ArrayList<>();
+    for (String sName : serviceMap.keySet()) {
+      if (!loadedAuxServices.contains(sName)) {
+        foundChanges = true;
+        servicesToRemove.add(sName);
+      }
+    }
+    for (String sName : servicesToRemove) {
+      LOG.info("Removing aux service " + sName);
+      maybeRemoveAuxService(sName);
+    }
+
+    if (!foundChanges) {
+      LOG.info("No auxiliary services changes detected in manifest");
+    }
+  }
+
+  private static String getClassName(AuxServiceRecord service) {
+    AuxServiceConfiguration serviceConf = service.getConfiguration();
+    if (serviceConf == null) {
+      return null;
+    }
+    return serviceConf.getProperty(CLASS_NAME);
+  }
+
+  private static String[] getSystemClasses(AuxServiceRecord service, String
+      className) {
+    AuxServiceConfiguration serviceConf =
+        service.getConfiguration();
+    if (serviceConf == null) {
+      return new String[]{className};
+    }
+    return StringUtils.split(serviceConf.getProperty(SYSTEM_CLASSES,
+        className));
+  }
+
+  /**
+   * Translates an aux service specified in the Configuration to an aux
+   * service record.
+   *
+   * @param sName aux service name
+   * @param conf configuration
+   * @return
+   */
+  private static AuxServiceRecord createServiceRecordFromConfiguration(String
+      sName, Configuration conf) {
+    String className = conf.get(String.format(
+        YarnConfiguration.NM_AUX_SERVICE_FMT, sName));
+    String remoteClassPath = conf.get(String.format(
+        YarnConfiguration.NM_AUX_SERVICE_REMOTE_CLASSPATH, sName));
+    String[] systemClasses = conf.getTrimmedStrings(String.format(
+        YarnConfiguration.NM_AUX_SERVICES_SYSTEM_CLASSES, sName));
+
+    AuxServiceConfiguration serviceConf = new AuxServiceConfiguration();
+    if (className != null) {
+      serviceConf.setProperty(CLASS_NAME, className);
+    }
+    if (systemClasses != null) {
+      serviceConf.setProperty(SYSTEM_CLASSES, StringUtils.join(",",
+          systemClasses));
+    }
+    if (remoteClassPath != null) {
+      AuxServiceFile.TypeEnum type;
+      String lcClassPath = StringUtils.toLowerCase(remoteClassPath);
+      if (lcClassPath.endsWith(".jar")) {
+        type = AuxServiceFile.TypeEnum.STATIC;
+      } else if (lcClassPath.endsWith(".zip") ||
+          lcClassPath.endsWith(".tar.gz") || lcClassPath.endsWith(".tgz") ||
+          lcClassPath.endsWith(".tar")) {
+        type = AuxServiceFile.TypeEnum.ARCHIVE;
+      } else {
+        throw new YarnRuntimeException("Cannot unpack file from " +
+            "remote-file-path:" + remoteClassPath + "for aux-service:" +
+            sName + ".\n");
+      }
+      AuxServiceFile file = new AuxServiceFile().srcFile(remoteClassPath)
+          .type(type);
+      serviceConf.getFiles().add(file);
+    }
+    return new AuxServiceRecord().name(sName).configuration(serviceConf);
+  }
+
-  public void serviceInit(Configuration conf) throws Exception {
-    final FsPermission storeDirPerms = new FsPermission((short)0700);
-    Path stateStoreRoot = null;
-    FileSystem stateStoreFs = null;
+  public synchronized void serviceInit(Configuration conf) throws Exception {
-    Collection<String> auxNames = conf.getStringCollection(
-        YarnConfiguration.NM_AUX_SERVICES);
-    for (final String sName : auxNames) {
-      try {
-        Preconditions
-            .checkArgument(
-                validateAuxServiceName(sName),
-                "The ServiceName: " + sName + " set in " +
-                YarnConfiguration.NM_AUX_SERVICES +" is invalid." +
-                "The valid service name should only contain a-zA-Z0-9_ " +
-                "and can not start with numbers");
-        String classKey = String.format(
-            YarnConfiguration.NM_AUX_SERVICE_FMT, sName);
-        String className = conf.get(classKey);
-        final String appLocalClassPath = conf.get(String.format(
-            YarnConfiguration.NM_AUX_SERVICES_CLASSPATH, sName));
-        final String appRemoteClassPath = conf.get(String.format(
-            YarnConfiguration.NM_AUX_SERVICE_REMOTE_CLASSPATH, sName));
-        AuxiliaryService s = null;
-        boolean useCustomerClassLoader = ((appLocalClassPath != null
-            && !appLocalClassPath.isEmpty()) ||
-            (appRemoteClassPath != null && !appRemoteClassPath.isEmpty()))
-            && className != null && !className.isEmpty();
-        if (useCustomerClassLoader) {
-          // load AuxiliaryService from local class path
-          if (appRemoteClassPath == null || appRemoteClassPath.isEmpty()) {
-            s = AuxiliaryServiceWithCustomClassLoader.getInstance(
-                conf, className, appLocalClassPath);
-          } else {
-            // load AuxiliaryService from remote class path
-            if (appLocalClassPath != null && !appLocalClassPath.isEmpty()) {
-              throw new YarnRuntimeException("The aux serivce:" + sName
-                  + " has configured local classpath:" + appLocalClassPath
-                  + " and remote classpath:" + appRemoteClassPath
-                  + ". Only one of them should be configured.");
-            }
-            FileContext localLFS = getLocalFileContext(conf);
-            // create NM aux-service dir in NM localdir if it does not exist.
-            Path nmAuxDir = dirsHandler.getLocalPathForWrite("."
-                + Path.SEPARATOR + NM_AUX_SERVICE_DIR);
-            if (!localLFS.util().exists(nmAuxDir)) {
-              try {
-                localLFS.mkdir(nmAuxDir, NM_AUX_SERVICE_DIR_PERM, true);
-              } catch (IOException ex) {
-                throw new YarnRuntimeException("Fail to create dir:"
-                    + nmAuxDir.toString(), ex);
-              }
-            }
-            Path src = new Path(appRemoteClassPath);
-            FileContext remoteLFS = getRemoteFileContext(src.toUri(), conf);
-            FileStatus scFileStatus = remoteLFS.getFileStatus(src);
-            if (!scFileStatus.getOwner().equals(
-                this.userUGI.getShortUserName())) {
-              throw new YarnRuntimeException("The remote jarfile owner:"
-                  + scFileStatus.getOwner() + " is not the same as the NM user:"
-                  + this.userUGI.getShortUserName() + ".");
-            }
-            if ((scFileStatus.getPermission().toShort() & 0022) != 0) {
-              throw new YarnRuntimeException("The remote jarfile should not "
-                  + "be writable by group or others. "
-                  + "The current Permission is "
-                  + scFileStatus.getPermission().toShort());
-            }
-            Path dest = null;
-            Path downloadDest = new Path(nmAuxDir,
-                className + "_" + scFileStatus.getModificationTime());
-            // check whether we need to re-download the jar
-            // from remote directory
-            Path targetDirPath = new Path(downloadDest,
-                scFileStatus.getPath().getName());
-            FileStatus[] allSubDirs = localLFS.util().listStatus(nmAuxDir);
-            boolean reDownload = true;
-            for (FileStatus sub : allSubDirs) {
-              if (sub.getPath().getName().equals(downloadDest.getName())) {
-                reDownload = false;
-                dest = new Path(targetDirPath + Path.SEPARATOR + "*");
-                break;
-              } else {
-                if (sub.getPath().getName().contains(className) &&
-                    !sub.getPath().getName().endsWith(DEL_SUFFIX)) {
-                  Path delPath = new Path(sub.getPath().getParent(),
-                      sub.getPath().getName() + DEL_SUFFIX);
-                  localLFS.rename(sub.getPath(), delPath);
-                  LOG.info("delete old aux service jar dir:"
-                      + delPath.toString());
-                  FileDeletionTask deletionTask = new FileDeletionTask(
-                      this.delService, null, delPath, null);
-                  this.delService.delete(deletionTask);
-                }
-              }
-            }
-            if (reDownload) {
-              LocalResourceType srcType = null;
-              String lowerDst = StringUtils.toLowerCase(src.toString());
-              if (lowerDst.endsWith(".jar")) {
-                srcType = LocalResourceType.FILE;
-              } else if (lowerDst.endsWith(".zip") ||
-                  lowerDst.endsWith(".tar.gz") || lowerDst.endsWith(".tgz")
-                  || lowerDst.endsWith(".tar")) {
-                srcType = LocalResourceType.ARCHIVE;
-              } else {
-                throw new YarnRuntimeException(
-                    "Can not unpack file from remote-file-path:" + src
-                        + "for aux-service:" + ".\n");
-              }
-              LocalResource scRsrc = LocalResource.newInstance(
-                  URL.fromURI(src.toUri()),
-                  srcType, LocalResourceVisibility.PRIVATE,
-                  scFileStatus.getLen(), scFileStatus.getModificationTime());
-              FSDownload download = new FSDownload(localLFS, null, conf,
-                  downloadDest, scRsrc, null);
-              try {
-                Path downloaded = download.call();
-                // don't need to convert downloaded path into a dir
-                // since its already a jar path.
-                dest = downloaded;
-              } catch (Exception ex) {
-                throw new YarnRuntimeException(
-                    "Exception happend while downloading files "
-                    + "for aux-service:" + sName + " and remote-file-path:"
-                    + src + ".\n" + ex.getMessage());
-              }
-            }
-            s = AuxiliaryServiceWithCustomClassLoader.getInstance(
-                new Configuration(conf), className, dest.toString());
-          }
-          LOG.info("The aux service:" + sName
-              + " are using the custom classloader");
-        } else {
-          Class<? extends AuxiliaryService> sClass = conf.getClass(
-              classKey, null, AuxiliaryService.class);
-
-          if (sClass == null) {
-            throw new RuntimeException("No class defined for " + sName);
-          }
-          s = ReflectionUtils.newInstance(sClass, new Configuration(conf));
-        }
-        if (s == null) {
-          throw new RuntimeException("No object created for " + sName);
-        }
-        // TODO better use s.getName()?
-        if(!sName.equals(s.getName())) {
-          LOG.warn("The Auxiliary Service named '"+sName+"' in the "
-              +"configuration is for "+s.getClass()+" which has "
-              +"a name of '"+s.getName()+"'. Because these are "
-              +"not the same tools trying to send ServiceData and read "
-              +"Service Meta Data may have issues unless the refer to "
-              +"the name in the config.");
-        }
-        s.setAuxiliaryLocalPathHandler(auxiliaryLocalPathHandler);
-        addService(sName, s);
-        if (recoveryEnabled) {
-          Path storePath = new Path(stateStoreRoot, sName);
-          stateStoreFs.mkdirs(storePath, storeDirPerms);
-          s.setRecoveryPath(storePath);
-        }
-        s.init(new Configuration(conf));
-      } catch (RuntimeException e) {
-        LOG.error("Failed to initialize " + sName, e);
-        throw e;
+    String manifestStr = conf.get(YarnConfiguration.NM_AUX_SERVICES_MANIFEST);
+    if (manifestStr == null) {
+      Collection<String> auxNames = conf.getStringCollection(
+          YarnConfiguration.NM_AUX_SERVICES);
+      for (final String sName : auxNames) {
+        AuxServiceRecord service = createServiceRecordFromConfiguration(sName,
+            conf);
+        maybeRemoveAuxService(sName);
+        AuxiliaryService s = initAuxService(service, conf, true);
+        addService(sName, s, service);
+    } else {
+      manifest = new Path(manifestStr);
+      manifestFS = FileSystem.get(new URI(manifestStr), conf);
+      loadManifest(conf, false);
+    manifestReloadInterval = conf.getLong(
+        YarnConfiguration.NM_AUX_SERVICES_MANIFEST_RELOAD_MS,
+        YarnConfiguration.DEFAULT_NM_AUX_SERVICES_MANIFEST_RELOAD_MS);
+    manifestReloadTask = new ManifestReloadTask();
+
+  private void startAuxService(String name, AuxiliaryService service,
+      AuxServiceRecord serviceRecord) {
+    service.start();
+    service.registerServiceListener(this);
+    ByteBuffer meta = service.getMetaData();
+    if (meta != null) {
+      serviceMetaData.put(name, meta);
+    }
+    serviceRecord.setLaunchTime(new Date());
+  }
+
+  private void stopAuxService(Service service) {
+    if (service.getServiceState() == Service.STATE.STARTED) {
+      service.unregisterServiceListener(this);
+      service.stop();
+    }
+  }
+
-  public void serviceStart() throws Exception {
+  public synchronized void serviceStart() throws Exception {
-      service.start();
-      service.registerServiceListener(this);
-      ByteBuffer meta = service.getMetaData();
-      if(meta != null) {
-        serviceMetaData.put(name, meta);
-      }
+      startAuxService(name, service, serviceRecordMap.get(name));
+    }
+    if (manifest != null && manifestReloadInterval > 0) {
+      manifestReloadTimer = new Timer("AuxServicesManifestRelaod-Timer",
+          true);
+      manifestReloadTimer.schedule(manifestReloadTask,
+          manifestReloadInterval, manifestReloadInterval);
-  public void serviceStop() throws Exception {
+  public synchronized void serviceStop() throws Exception {
-      synchronized (serviceMap) {
-        for (Service service : serviceMap.values()) {
-          if (service.getServiceState() == Service.STATE.STARTED) {
-            service.unregisterServiceListener(this);
-            service.stop();
-          }
-        }
-        serviceMap.clear();
-        serviceMetaData.clear();
+      for (Service service : serviceMap.values()) {
+        stopAuxService(service);
+      }
+      serviceMap.clear();
+      serviceRecordMap.clear();
+      serviceMetaData.clear();
+      if (manifestReloadTimer != null) {
+        manifestReloadTimer.cancel();
-    LOG.error("Service " + service.getName() + " changed state: " +
+    // services changing state is expected on reload
+    LOG.info("Service " + service.getName() + " changed state: " +
-    stop();
+
+  protected static AuxServiceRecord newAuxService(String name, String
+      className) {
+    AuxServiceConfiguration serviceConf = new AuxServiceConfiguration();
+    serviceConf.setProperty(CLASS_NAME, className);
+    return new AuxServiceRecord().name(name).configuration(serviceConf);
+  }
+
+  protected static void setClasspath(AuxServiceRecord service, String
+      classpath) {
+    service.getConfiguration().getFiles().add(new AuxServiceFile()
+        .srcFile(classpath).type(AuxServiceFile.TypeEnum.STATIC));
+  }
+
+  protected static void setSystemClasses(AuxServiceRecord service, String
+      systemClasses) {
+    service.getConfiguration().setProperty(SYSTEM_CLASSES, systemClasses);
+  }
+
+  /**
+   * Class which is used by the {@link Timer} class to periodically execute the
+   * manifest reload.
+   */
+  private final class ManifestReloadTask extends TimerTask {
+    @Override
+    public void run() {
+      try {
+        reloadManifest();
+      } catch (Throwable t) {
+        // Prevent uncaught exceptions from killing this thread
+        LOG.warn("Error while reloading manifest: ", t);
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 UPD83 INS83 INS83 INS74 INS59 UPD83 INS83 INS83 MOV43 MOV59 INS83 MOV43 MOV59 INS83 MOV43 MOV59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS29 INS44 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 MOV43 INS42 INS44 INS44 INS44 INS44 INS43 MOV8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS5 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 MOV78 INS83 INS83 INS39 INS42 INS44 MOV43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 MOV8 UPD83 UPD42 MOV44 MOV8 INS83 MOV78 INS83 INS83 INS39 INS42 MOV43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS42 INS43 INS31 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS43 INS43 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS21 MOV60 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 MOV43 INS42 INS43 INS42 INS42 INS42 INS21 INS60 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS60 INS60 INS25 INS25 INS60 INS60 INS25 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 UPD42 MOV42 MOV60 MOV25 MOV60 MOV60 MOV54 INS65 INS65 INS65 INS65 INS43 INS42 MOV43 INS42 INS42 MOV25 INS65 INS65 INS43 INS42 INS60 INS21 INS21 INS21 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS54 INS41 INS65 INS65 INS42 INS21 INS65 INS65 INS65 INS42 INS42 INS25 INS25 INS60 INS54 INS25 INS21 INS21 INS54 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS42 INS60 INS25 INS60 INS60 INS25 INS60 INS70 INS70 INS25 INS42 INS43 INS42 INS60 INS25 INS41 INS43 INS85 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 MOV60 MOV60 INS60 INS60 INS25 INS25 INS25 INS41 INS43 INS42 MOV60 MOV25 INS60 INS25 INS21 INS21 MOV21 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS25 INS54 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS41 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS21 INS65 INS42 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS34 INS7 INS7 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS32 INS66 INS66 INS42 INS42 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS32 MOV27 INS8 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS83 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS42 INS8 INS43 INS59 INS74 INS59 INS27 INS8 INS27 INS8 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 UPD42 MOV42 UPD42 MOV42 INS40 MOV43 INS27 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS27 INS66 INS42 INS66 INS42 INS43 INS59 INS7 INS32 INS32 INS27 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS83 INS43 INS59 INS43 INS59 INS8 MOV12 INS12 INS42 INS66 INS42 INS66 INS32 INS66 INS66 INS66 INS42 INS27 INS8 INS38 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS7 INS32 INS58 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS74 INS59 INS39 INS59 INS27 INS8 INS74 INS59 INS44 INS32 INS8 INS44 INS42 INS8 INS38 INS8 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS5 INS59 INS43 INS59 MOV27 INS8 INS27 INS8 INS27 INS8 INS32 INS42 INS43 INS59 INS27 INS8 INS8 INS7 INS7 INS42 INS42 INS42 INS32 INS8 INS27 INS8 INS8 MOV8 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS66 INS65 INS66 INS66 INS42 INS54 INS42 INS32 INS22 INS14 INS42 INS42 INS40 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS42 INS33 INS42 INS42 MOV27 INS45 INS42 INS42 MOV32 INS42 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS27 MOV32 INS53 MOV60 INS25 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS33 INS60 INS25 INS32 INS34 INS21 INS41 INS41 INS14 INS42 INS40 UPD27 INS41 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS25 MOV25 MOV21 INS21 INS60 INS25 INS21 INS21 INS44 INS8 INS42 INS32 INS9 INS42 INS33 INS41 INS32 INS21 INS41 INS42 INS42 INS21 INS44 INS8 INS32 INS42 INS41 INS42 INS32 INS42 INS42 INS27 INS43 INS59 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS43 INS43 INS42 INS14 INS42 INS9 INS32 INS33 INS70 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS25 INS43 INS42 INS21 INS21 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 UPD42 INS32 UPD42 INS43 INS85 INS42 INS32 INS42 INS42 INS14 INS21 INS42 INS33 INS21 INS42 INS33 INS60 INS60 INS25 INS60 INS21 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 MOV60 INS70 INS21 INS21 INS21 INS42 INS32 INS42 INS14 INS42 INS42 INS14 MOV60 MOV60 INS21 INS27 INS27 INS21 INS21 INS70 MOV21 INS21 MOV21 INS25 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS14 INS52 INS42 INS43 INS32 UPD45 INS32 INS42 INS42 UPD74 INS43 INS9 INS42 INS42 UPD42 UPD42 INS14 INS42 INS42 INS32 INS33 INS32 INS34 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS14 MOV27 INS8 INS42 INS42 INS42 INS42 INS74 INS74 INS59 INS27 INS8 INS42 INS42 INS32 INS32 INS32 MOV43 INS42 INS42 INS40 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS7 MOV27 INS8 INS32 INS43 INS59 INS27 INS8 INS32 INS32 INS43 INS42 INS53 INS42 INS33 INS42 INS42 INS42 INS32 INS33 INS7 INS43 INS42 INS21 INS41 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS44 INS32 INS8 INS42 INS42 INS74 INS42 INS38 INS8 INS42 INS32 INS32 INS32 INS42 INS42 INS33 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS43 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS40 MOV44 INS42 INS8 INS7 INS7 INS32 INS42 INS42 INS40 INS40 INS43 INS43 INS32 INS42 INS33 INS42 INS34 INS7 INS32 INS44 MOV32 INS8 INS32 INS27 INS8 INS43 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS42 INS21 INS44 INS8 INS74 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS27 INS42 INS42 INS32 INS42 INS43 INS27 MOV43 INS27 INS41 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS41 INS42 INS42 INS42 INS42 MOV32 INS27 INS42 INS32 INS53 INS42 INS42 INS42 INS42 INS42 MOV14 INS32 INS33 INS70 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS14 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS11 INS57 INS43 INS43 INS42 INS42 INS42 INS60 INS21 INS25 INS21 INS54 INS43 INS32 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS5 INS4 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS27 INS8 INS8 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS60 INS21 INS60 INS21 INS42 MOV14 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS33 INS21 INS42 INS43 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS21 INS43 MOV43 INS43 INS45 INS45 INS32 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS45 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS45 INS42 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 MOV14 INS43 INS45 INS42 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS44 INS32 INS8 INS45 INS42 INS43 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS43 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS7 INS8 INS12 INS42 INS42 INS42 INS42 INS7 INS32 INS45 INS42 INS43 INS85 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS7 INS32 INS32 INS32 INS32 INS21 INS53 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS32 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS45 INS9 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS45 INS42 UPD45 INS43 INS27 INS74 INS42 INS32 INS42 INS21 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS32 INS25 INS18 INS42 INS9 INS21 INS60 INS25 INS21 INS44 INS8 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS14 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS45 INS42 INS43 INS43 INS43 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS8 INS32 INS43 INS59 INS42 INS8 INS32 INS43 INS42 INS21 INS42 INS40 INS43 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS27 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL45 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL42 DEL7 DEL21 DEL10 DEL33 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL83 DEL60 DEL60 DEL60 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL40 DEL45 DEL45 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL36 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL36 DEL27 DEL36 DEL27 DEL38 DEL27 DEL59 DEL60 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL54 DEL8 DEL70 DEL8 DEL42 DEL83 DEL42 DEL70 DEL8 DEL51 DEL8 DEL54 DEL8 DEL42 DEL32 DEL21