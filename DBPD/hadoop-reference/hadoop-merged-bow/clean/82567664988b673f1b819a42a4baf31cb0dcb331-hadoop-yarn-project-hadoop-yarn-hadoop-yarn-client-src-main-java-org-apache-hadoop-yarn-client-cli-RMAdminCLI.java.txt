YARN-2504. Enhanced RM Admin CLI to support management of node-labels. Contribyted by Wangda Tan.

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
-import com.google.common.collect.ImmutableMap;
+import org.apache.commons.lang.StringUtils;
+import org.apache.hadoop.yarn.api.records.NodeId;
+import org.apache.hadoop.yarn.nodelabels.CommonNodeLabelsManager;
+import org.apache.hadoop.yarn.server.api.protocolrecords.AddToClusterNodeLabelsRequest;
+import org.apache.hadoop.yarn.server.api.protocolrecords.GetClusterNodeLabelsRequest;
+import org.apache.hadoop.yarn.server.api.protocolrecords.GetNodesToLabelsRequest;
+import org.apache.hadoop.yarn.server.api.protocolrecords.RemoveFromClusterNodeLabelsRequest;
+import org.apache.hadoop.yarn.server.api.protocolrecords.ReplaceLabelsOnNodeRequest;
+
+import com.google.common.collect.ImmutableMap;
+  private boolean directlyAccessNodeLabelStore = false;
+  static CommonNodeLabelsManager localNodeLabelsManager = null;
-          .build();
+          .put("-addToClusterNodeLabels",
+              new UsageInfo("[label1,label2,label3] (label splitted by \",\")",
+                  "add to cluster node labels "))
+          .put("-removeFromClusterNodeLabels",
+              new UsageInfo("[label1,label2,label3] (label splitted by \",\")",
+                  "remove from cluster node labels"))
+          .put("-replaceLabelsOnNode",
+              new UsageInfo("[node1:port,label1,label2 node2:port,label1,label2]",
+                  "replace labels on nodes"))
+          .put("-getNodeToLabels", new UsageInfo("", 
+              "Get node to label mappings"))
+          .put("-getClusterNodeLabels",
+              new UsageInfo("", "Get node labels in the cluster"))
+          .put("-directlyAccessNodeLabelStore",
+              new UsageInfo("", "Directly access node label store, "
+                  + "with this option, all node label related operations"
+                  + " will not connect RM. Instead, they will"
+                  + " access/modify stored node labels directly."
+                  + " By default, it is false (access via RM)."
+                  + " AND PLEASE NOTE: if you configured"
+                  + " yarn.node-labels.fs-store.uri to a local directory"
+                  + " (instead of NFS or HDFS), this option will only work"
+                  + " when the command run on the machine where RM is running."))              
+              .build();
-
-  protected ResourceManagerAdministrationProtocol createAdminProtocol() throws IOException {
+  
+  protected ResourceManagerAdministrationProtocol createAdminProtocol()
+      throws IOException {
-    return ClientRMProxy.createRMProxy(conf, ResourceManagerAdministrationProtocol.class);
+    return ClientRMProxy.createRMProxy(conf,
+        ResourceManagerAdministrationProtocol.class);
+  // Make it protected to make unit test can change it.
+  protected static synchronized CommonNodeLabelsManager
+      getNodeLabelManagerInstance(Configuration conf) {
+    if (localNodeLabelsManager == null) {
+      localNodeLabelsManager = new CommonNodeLabelsManager();
+      localNodeLabelsManager.init(conf);
+      localNodeLabelsManager.start();
+    }
+    return localNodeLabelsManager;
+  }
+  
+  private int addToClusterNodeLabels(String args) throws IOException,
+      YarnException {
+    Set<String> labels = new HashSet<String>();
+    for (String p : args.split(",")) {
+      labels.add(p);
+    }
+
+    return addToClusterNodeLabels(labels);
+  }
+
+  private int addToClusterNodeLabels(Set<String> labels) throws IOException,
+      YarnException {
+    if (directlyAccessNodeLabelStore) {
+      getNodeLabelManagerInstance(getConf()).addToCluserNodeLabels(labels);
+    } else {
+      ResourceManagerAdministrationProtocol adminProtocol =
+          createAdminProtocol();
+      AddToClusterNodeLabelsRequest request =
+          AddToClusterNodeLabelsRequest.newInstance(labels);
+      adminProtocol.addToClusterNodeLabels(request);
+    }
+    return 0;
+  }
+
+  private int removeFromClusterNodeLabels(String args) throws IOException,
+      YarnException {
+    Set<String> labels = new HashSet<String>();
+    for (String p : args.split(",")) {
+      labels.add(p);
+    }
+    
+    if (directlyAccessNodeLabelStore) {
+      getNodeLabelManagerInstance(getConf()).removeFromClusterNodeLabels(labels);
+    } else {
+      ResourceManagerAdministrationProtocol adminProtocol =
+          createAdminProtocol();
+      RemoveFromClusterNodeLabelsRequest request =
+          RemoveFromClusterNodeLabelsRequest.newInstance(labels);
+      adminProtocol.removeFromClusterNodeLabels(request);
+    }
+
+    return 0;
+  }
+
+  private int getNodeToLabels() throws IOException, YarnException {
+    Map<NodeId, Set<String>> nodeToLabels = null;
+
+    if (directlyAccessNodeLabelStore) {
+      nodeToLabels = getNodeLabelManagerInstance(getConf()).getNodeLabels();
+    } else {
+      ResourceManagerAdministrationProtocol adminProtocol =
+          createAdminProtocol();
+
+      nodeToLabels =
+          adminProtocol.getNodeToLabels(GetNodesToLabelsRequest.newInstance())
+              .getNodeToLabels();
+    }
+    for (NodeId host : sortNodeIdSet(nodeToLabels.keySet())) {
+      System.out.println(String.format("Host=%s, Node-labels=[%s]",
+          (host.getPort() == 0 ? host.getHost() : host.toString()),
+          StringUtils.join(sortStrSet(nodeToLabels.get(host)), ",")));
+    }
+    return 0;
+  }
+
+  private int getClusterNodeLabels() throws IOException, YarnException {
+    Set<String> labels = null;
+    if (directlyAccessNodeLabelStore) {
+      labels = getNodeLabelManagerInstance(getConf()).getClusterNodeLabels();
+    } else {
+      ResourceManagerAdministrationProtocol adminProto = createAdminProtocol();
+      labels =
+          adminProto.getClusterNodeLabels(
+              GetClusterNodeLabelsRequest.newInstance()).getNodeLabels();
+    }
+
+    System.out.println(String.format("Node-labels=%s",
+        StringUtils.join(sortStrSet(labels).iterator(), ",")));
+    return 0;
+  }
+  
+  private List<NodeId> sortNodeIdSet(Set<NodeId> nodes) {
+    List<NodeId> list = new ArrayList<NodeId>();
+    list.addAll(nodes);
+    Collections.sort(list);
+    return list;
+  }
+  
+  private List<String> sortStrSet(Set<String> labels) {
+    List<String> list = new ArrayList<String>();
+    list.addAll(labels);
+    Collections.sort(list);
+    return list;
+  }
+  
+  private Map<NodeId, Set<String>> buildNodeLabelsFromStr(String args)
+      throws IOException {
+    Map<NodeId, Set<String>> map = new HashMap<NodeId, Set<String>>();
+
+    for (String nodeToLabels : args.split("[ \n]")) {
+      nodeToLabels = nodeToLabels.trim();
+      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith("#")) {
+        continue;
+      }
+
+      String[] splits = nodeToLabels.split(",");
+      String nodeIdStr = splits[0];
+
+      if (nodeIdStr.trim().isEmpty()) {
+        throw new IOException("node name cannot be empty");
+      }
+
+      String nodeName;
+      int port;
+      if (nodeIdStr.contains(":")) {
+        nodeName = nodeIdStr.substring(0, nodeIdStr.indexOf(":"));
+        port = Integer.valueOf(nodeIdStr.substring(nodeIdStr.indexOf(":")));
+      } else {
+        nodeName = nodeIdStr;
+        port = 0;
+      }
+
+      NodeId nodeId = NodeId.newInstance(nodeName, port);
+
+      map.put(nodeId, new HashSet<String>());
+
+      for (int i = 1; i < splits.length; i++) {
+        if (!splits[i].trim().isEmpty()) {
+          map.get(nodeId).add(splits[i].trim().toLowerCase());
+        }
+      }
+    }
+
+    return map;
+  }
+
+  private int replaceLabelsOnNodes(String args) throws IOException,
+      YarnException {
+    Map<NodeId, Set<String>> map = buildNodeLabelsFromStr(args);
+    return replaceLabelsOnNodes(map);
+  }
+
+  private int replaceLabelsOnNodes(Map<NodeId, Set<String>> map)
+      throws IOException, YarnException {
+    if (directlyAccessNodeLabelStore) {
+      getNodeLabelManagerInstance(getConf()).replaceLabelsOnNode(map);
+    } else {
+      ResourceManagerAdministrationProtocol adminProtocol =
+          createAdminProtocol();
+      ReplaceLabelsOnNodeRequest request =
+          ReplaceLabelsOnNodeRequest.newInstance(map);
+      adminProtocol.replaceLabelsOnNode(request);
+    }
+    return 0;
+  }
+  
+    // -directlyAccessNodeLabelStore is a additional option for node label
+    // access, so just search if we have specified this option, and remove it
+    List<String> argsList = new ArrayList<String>();
+    for (int i = 0; i < args.length; i++) {
+      if (args[i].equals("-directlyAccessNodeLabelStore")) {
+        directlyAccessNodeLabelStore = true;
+      } else {
+        argsList.add(args[i]);
+      }
+    }
+    args = argsList.toArray(new String[0]);
+    
+      } else if ("-addToClusterNodeLabels".equals(cmd)) {
+        if (i >= args.length) {
+          System.err.println("No cluster node-labels are specified");
+          exitCode = -1;
+        } else {
+          exitCode = addToClusterNodeLabels(args[i]);
+        }
+      } else if ("-removeFromClusterNodeLabels".equals(cmd)) {
+        if (i >= args.length) {
+          System.err.println("No cluster node-labels are specified");
+          exitCode = -1;
+        } else {
+          exitCode = removeFromClusterNodeLabels(args[i]);
+        }
+      } else if ("-replaceLabelsOnNode".equals(cmd)) {
+        if (i >= args.length) {
+          System.err.println("No cluster node-labels are specified");
+          exitCode = -1;
+        } else {
+          exitCode = replaceLabelsOnNodes(args[i]);
+        }
+      } else if ("-getNodeToLabels".equals(cmd)) {
+        exitCode = getNodeToLabels();
+      } else if ("-getClusterNodeLabels".equals(cmd)) {
+        exitCode = getClusterNodeLabels();
+    if (null != localNodeLabelsManager) {
+      localNodeLabelsManager.stop();
+    }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS43 INS43 INS8 INS83 INS39 INS42 INS43 INS43 INS8 INS83 INS74 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS42 INS9 INS42 INS42 INS33 INS32 INS42 INS43 INS42 INS25 INS41 INS43 INS42 INS42 INS42 INS60 INS70 INS41 INS74 INS42 INS42 INS42 INS25 INS41 INS43 INS42 INS42 INS42 INS60 INS70 INS25 INS41 INS42 INS42 INS60 INS25 INS70 INS41 INS42 INS42 INS60 INS25 INS21 INS41 INS43 INS43 INS74 INS42 INS60 INS21 INS21 INS41 INS43 INS43 INS74 INS42 INS60 INS21 INS21 INS41 INS43 INS43 INS74 INS43 INS42 INS42 INS60 INS70 INS41 INS43 INS42 INS42 INS42 INS60 INS41 INS74 INS42 INS42 INS42 INS25 INS41 INS60 INS24 INS21 INS25 INS32 INS42 INS42 INS27 INS8 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS43 INS43 INS42 INS8 INS8 INS34 INS42 INS74 INS59 INS44 INS32 INS8 INS42 INS8 INS8 INS34 INS74 INS59 INS42 INS8 INS8 INS44 INS32 INS8 INS34 INS74 INS59 INS42 INS8 INS8 INS32 INS34 INS42 INS42 INS43 INS43 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS74 INS59 INS32 INS43 INS43 INS74 INS42 INS8 INS8 INS34 INS74 INS59 INS58 INS27 INS37 INS8 INS7 INS27 INS8 INS32 INS42 INS45 INS14 INS42 INS33 INS21 INS21 INS21 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS45 INS21 INS42 INS42 INS42 INS42 INS21 INS60 INS60 INS21 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS45 INS21 INS21 INS60 INS60 INS21 INS43 INS43 INS74 INS42 INS33 INS21 INS60 INS21 INS43 INS42 INS42 INS32 INS21 INS43 INS43 INS42 INS33 INS21 INS60 INS21 INS40 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS14 INS43 INS42 INS42 INS42 INS45 INS21 INS25 INS60 INS60 INS25 INS60 INS60 INS25 INS60 INS21 INS24 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS21 INS60 INS60 INS21 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS32 INS33 INS42 INS21 INS32 INS42 INS45 INS14 INS43 INS45 INS27 INS7 INS32 INS32 INS42 INS42 INS74 INS42 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS74 INS42 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS43 INS43 INS7 INS43 INS59 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS43 INS59 INS7 INS42 INS42 INS45 INS32 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS43 INS43 INS74 INS42 INS7 INS27 INS8 INS5 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS39 INS59 INS32 INS8 INS8 INS43 INS59 INS32 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS74 INS42 INS34 INS32 INS8 INS8 INS42 INS42 INS3 INS32 INS32 INS42 INS45 INS14 INS43 INS45 INS45 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS45 INS43 INS43 INS43 INS43 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS32 INS32 INS18 INS43 INS85 INS42 INS32 INS42 INS42 INS2 INS32 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS45 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS2 INS42 INS45 INS21 INS21 INS5 INS34 INS42 INS42 INS32 INS42 INS45 INS14 INS43 INS45 INS45 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS36 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS34 INS42 INS42 INS14 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS74 INS42 INS34 INS38 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS43 INS85 MOV32 INS42 INS45 INS14 INS43 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS16 INS42 INS42 INS32 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS43 INS43 INS32 INS21 INS42 INS42 INS9 INS42 INS42 INS2 INS42 UPD42 INS45 INS14 INS43 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS45 INS45 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS2 INS42 INS32 INS42 INS32 INS25 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV32 MOV8 INS25 INS2 INS42 INS32 INS8 INS25 INS42 INS42 INS45 INS42 INS42 INS25 INS32 INS8 INS25 INS27 INS8 INS8 INS45 INS42 INS42 INS25 INS32 INS8 INS25 INS42 INS40 INS21 INS21 INS21 INS27 INS8 INS8 INS45 INS42 INS42 INS25 INS32 INS8 MOV25 INS32 INS7 INS7 INS42 INS40 INS21 INS21 INS21 INS27 INS8 INS8 INS45 INS42 INS42 INS21 INS32 INS8 INS40 INS42 INS45 INS42 INS38 INS42 INS32 INS32 INS7 INS7 INS42 INS40 INS21 INS21 INS21 INS7 INS45 INS42 INS42 INS21 INS34 INS42 INS2 INS40 INS42 INS45 INS42 INS38 INS42 INS32 INS32 INS7 INS7 INS42 INS32 INS7 INS42 INS42 INS34 INS42 INS2 INS40 INS42 INS45 INS42 INS38 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS2 INS42 INS42 INS42