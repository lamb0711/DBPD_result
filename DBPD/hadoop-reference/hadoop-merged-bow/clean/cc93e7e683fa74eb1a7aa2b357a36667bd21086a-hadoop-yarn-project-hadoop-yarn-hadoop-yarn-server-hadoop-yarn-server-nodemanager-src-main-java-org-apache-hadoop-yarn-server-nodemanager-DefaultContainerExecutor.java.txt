YARN-2566. DefaultContainerExecutor should pick a working directory randomly. (Zhihai Xu via kasha)

+import java.util.Random;
-    // TODO: Why pick first app dir. The same in LCE why not random?
-    Path appStorageDir = getFirstApplicationDir(localDirs, user, appId);
+    // randomly choose the local directory
+    Path appStorageDir = getWorkingDir(localDirs, user, appId);
+  private long getDiskFreeSpace(Path base) throws IOException {
+    return lfs.getFsStatus(base).getRemaining();
+  }
+
+  private Path getWorkingDir(List<String> localDirs, String user,
+      String appId) throws IOException {
+    Path appStorageDir = null;
+    long totalAvailable = 0L;
+    long[] availableOnDisk = new long[localDirs.size()];
+    int i = 0;
+    // randomly choose the app directory
+    // the chance of picking a directory is proportional to
+    // the available space on the directory.
+    // firstly calculate the sum of all available space on these directories
+    for (String localDir : localDirs) {
+      Path curBase = getApplicationDir(new Path(localDir),
+          user, appId);
+      long space = 0L;
+      try {
+        space = getDiskFreeSpace(curBase);
+      } catch (IOException e) {
+        LOG.warn("Unable to get Free Space for " + curBase.toString(), e);
+      }
+      availableOnDisk[i++] = space;
+      totalAvailable += space;
+    }
+
+    // throw an IOException if totalAvailable is 0.
+    if (totalAvailable <= 0L) {
+      throw new IOException("Not able to find a working directory for "
+          + user);
+    }
+
+    // make probability to pick a directory proportional to
+    // the available space on the directory.
+    Random r = new Random();
+    long randomPosition = Math.abs(r.nextLong()) % totalAvailable;
+    int dir = 0;
+    // skip zero available space directory,
+    // because totalAvailable is greater than 0 and randomPosition
+    // is less than totalAvailable, we can find a valid directory
+    // with nonzero available space.
+    while (availableOnDisk[dir] == 0L) {
+      dir++;
+    }
+    while (randomPosition > availableOnDisk[dir]) {
+      randomPosition -= availableOnDisk[dir++];
+    }
+    appStorageDir = getApplicationDir(new Path(localDirs.get(dir)),
+        user, appId);
+
+    return appStorageDir;
+  }
+

INS26 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS43 INS42 INS42 INS41 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS70 INS25 INS60 INS60 INS60 INS61 INS61 INS21 INS41 INS42 INS32 INS43 INS43 INS42 INS42 INS43 INS59 INS39 INS59 INS5 INS59 INS39 INS59 INS44 INS42 INS8 INS27 INS8 INS43 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS7 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS34 INS39 INS85 INS42 INS3 INS42 INS34 INS43 INS42 INS60 INS60 INS54 INS21 INS21 INS42 INS34 INS53 INS42 INS42 INS14 INS42 INS27 INS42 INS34 INS2 INS34 INS21 INS42 INS2 INS21 INS42 INS32 UPD42 INS42 INS42 INS42 INS5 INS32 INS42 INS43 INS59 INS39 INS59 INS8 INS12 INS7 INS7 INS14 INS43 INS32 INS42 INS42 INS42 INS37 INS42 INS42 INS7 INS42 INS14 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS21 INS44 INS8 INS2 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS2 INS43 INS32 INS42 INS14 INS42 INS42 INS7 INS43 INS42 INS21 INS42 INS37 INS42 INS45 INS42 INS42 INS42 INS42 INS37 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS32 INS42 INS42