HDFS-13876. HttpFS: Implement ALLOWSNAPSHOT, DISALLOWSNAPSHOT.  Contributed by Siyao Meng.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

+import org.apache.hadoop.hdfs.DistributedFileSystem;
+   *  Executor that performs an allowSnapshot operation.
+   */
+  @InterfaceAudience.Private
+  public static class FSAllowSnapshot implements
+      FileSystemAccess.FileSystemExecutor<Void> {
+
+    private Path path;
+
+    /**
+     * Creates a allowSnapshot executor.
+     * @param path directory path to allow snapshot.
+     */
+    public FSAllowSnapshot(String path) {
+      this.path = new Path(path);
+    }
+
+    /**
+     * Executes the filesystem operation.
+     * @param fs filesystem instance to use.
+     * @throws IOException thrown if an IO error occurred.
+     */
+    @Override
+    public Void execute(FileSystem fs) throws IOException {
+      if (fs instanceof DistributedFileSystem) {
+        DistributedFileSystem dfs = (DistributedFileSystem) fs;
+        dfs.allowSnapshot(path);
+      } else {
+        throw new UnsupportedOperationException("allowSnapshot is not "
+            + "supported for HttpFs on " + fs.getClass()
+            + ". Please check your fs.defaultFS configuration");
+      }
+      return null;
+    }
+  }
+
+  /**
+   *  Executor that performs an disallowSnapshot operation.
+   */
+  @InterfaceAudience.Private
+  public static class FSDisallowSnapshot implements
+      FileSystemAccess.FileSystemExecutor<Void> {
+
+    private Path path;
+
+    /**
+     * Creates a disallowSnapshot executor.
+     * @param path directory path to allow snapshot.
+     */
+    public FSDisallowSnapshot(String path) {
+      this.path = new Path(path);
+    }
+
+    /**
+     * Executes the filesystem operation.
+     * @param fs filesystem instance to use.
+     * @throws IOException thrown if an IO error occurred.
+     */
+    @Override
+    public Void execute(FileSystem fs) throws IOException {
+      if (fs instanceof DistributedFileSystem) {
+        DistributedFileSystem dfs = (DistributedFileSystem) fs;
+        dfs.disallowSnapshot(path);
+      } else {
+        throw new UnsupportedOperationException("disallowSnapshot is not "
+            + "supported for HttpFs on " + fs.getClass()
+            + ". Please check your fs.defaultFS configuration");
+      }
+      return null;
+    }
+  }
+
+  /**

INS26 INS40 INS55 INS55 INS29 INS78 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS29 INS78 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS65 INS40 INS43 INS43 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS40 INS43 INS43 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS66 INS40 INS42 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS42 INS25 INS41 INS66 INS40 INS42 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS42 INS25 INS41 INS66 INS42 INS66 INS42 INS7 INS66 INS42 INS66 INS42 INS66 INS42 INS62 INS8 INS8 INS33 INS66 INS42 INS66 INS42 INS7 INS66 INS42 INS66 INS42 INS66 INS42 INS62 INS8 INS8 INS33 INS22 INS14 INS42 INS43 INS60 INS21 INS53 INS22 INS14 INS42 INS43 INS60 INS21 INS53 INS52 INS42 INS43 INS42 INS42 INS43 INS59 INS32 INS14 INS52 INS42 INS43 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS43 INS27 INS43 INS42 INS42 INS27 INS32 INS45 INS43 INS42 INS42 INS27 INS32 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS45 INS45 INS42 INS42