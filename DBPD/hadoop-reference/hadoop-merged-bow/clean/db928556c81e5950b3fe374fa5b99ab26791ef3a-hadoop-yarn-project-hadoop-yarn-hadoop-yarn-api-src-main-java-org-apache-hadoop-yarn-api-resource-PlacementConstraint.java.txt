YARN-6595. [API] Add Placement Constraints at the application level. (Arun Suresh via kkaranasos)

+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (!(o instanceof PlacementConstraint)) {
+      return false;
+    }
+
+    PlacementConstraint that = (PlacementConstraint) o;
+
+    return getConstraintExpr() != null ? getConstraintExpr().equals(that
+        .getConstraintExpr()) : that.getConstraintExpr() == null;
+  }
+
+  @Override
+  public int hashCode() {
+    return getConstraintExpr() != null ? getConstraintExpr().hashCode() : 0;
+  }
+
+    public boolean equals(Object o) {
+      if (this == o) {
+        return true;
+      }
+      if (!(o instanceof SingleConstraint)) {
+        return false;
+      }
+
+      SingleConstraint that = (SingleConstraint) o;
+
+      if (getMinCardinality() != that.getMinCardinality()) {
+        return false;
+      }
+      if (getMaxCardinality() != that.getMaxCardinality()) {
+        return false;
+      }
+      if (!getScope().equals(that.getScope())) {
+        return false;
+      }
+      return getTargetExpressions().equals(that.getTargetExpressions());
+    }
+
+    @Override
+    public int hashCode() {
+      int result = getScope().hashCode();
+      result = 31 * result + getMinCardinality();
+      result = 31 * result + getMaxCardinality();
+      result = 31 * result + getTargetExpressions().hashCode();
+      return result;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+      if (this == o) {
+        return true;
+      }
+      if (!(o instanceof TargetConstraint)) {
+        return false;
+      }
+
+      TargetConstraint that = (TargetConstraint) o;
+
+      if (getOp() != that.getOp()) {
+        return false;
+      }
+      if (!getScope().equals(that.getScope())) {
+        return false;
+      }
+      return getTargetExpressions().equals(that.getTargetExpressions());
+    }
+
+    @Override
+    public int hashCode() {
+      int result = getOp().hashCode();
+      result = 31 * result + getScope().hashCode();
+      result = 31 * result + getTargetExpressions().hashCode();
+      return result;
+    }
+
+    @Override
+
+    @Override
+    public boolean equals(Object o) {
+      if (this == o) {
+        return true;
+      }
+      if (o == null || getClass() != o.getClass()) {
+        return false;
+      }
+
+      CardinalityConstraint that = (CardinalityConstraint) o;
+
+      if (minCardinality != that.minCardinality) {
+        return false;
+      }
+      if (maxCardinality != that.maxCardinality) {
+        return false;
+      }
+      return scope != null ? scope.equals(that.scope) : that.scope == null;
+    }
+
+    @Override
+    public int hashCode() {
+      int result = scope != null ? scope.hashCode() : 0;
+      result = 31 * result + minCardinality;
+      result = 31 * result + maxCardinality;
+      return result;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+      if (this == o) {
+        return true;
+      }
+      if (o == null || getClass() != o.getClass()) {
+        return false;
+      }
+
+      return getChildren() != null ? getChildren().equals(
+          ((CompositeConstraint)o).getChildren()) :
+          ((CompositeConstraint)o).getChildren() == null;
+    }
+
+    @Override
+    public int hashCode() {
+      return getChildren() != null ? getChildren().hashCode() : 0;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+      if (this == o) {
+        return true;
+      }
+      if (o == null || getClass() != o.getClass()) {
+        return false;
+      }
+
+      TimedPlacementConstraint that = (TimedPlacementConstraint) o;
+
+      if (schedulingDelay != that.schedulingDelay) {
+        return false;
+      }
+      if (constraint != null ? !constraint.equals(that.constraint) :
+          that.constraint != null) {
+        return false;
+      }
+      return delayUnit == that.delayUnit;
+    }
+
+    @Override
+    public int hashCode() {
+      int result = constraint != null ? constraint.hashCode() : 0;
+      result = 31 * result + (int) (schedulingDelay ^ (schedulingDelay >>> 32));
+      result = 31 * result + (delayUnit != null ? delayUnit.hashCode() : 0);
+      return result;
+    }

INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS43 INS42 INS25 INS25 INS60 INS41 INS42 INS41 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS27 INS8 INS38 INS8 INS43 INS59 INS16 INS16 INS42 INS43 INS42 INS25 INS25 INS60 INS25 INS25 INS25 INS41 INS42 INS60 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS25 INS25 INS60 INS25 INS25 INS41 INS42 INS60 INS21 INS21 INS41 INS42 INS43 INS42 INS25 INS25 INS60 INS25 INS25 INS41 INS42 INS60 INS21 INS21 INS41 INS42 INS43 INS42 INS25 INS25 INS41 INS42 INS41 INS42 INS43 INS42 INS25 INS25 INS60 INS25 INS25 INS41 INS42 INS60 INS21 INS21 INS41 INS52 INS42 INS41 INS36 INS41 INS42 INS42 INS11 INS27 INS32 INS27 INS27 INS32 INS34 INS42 INS27 INS8 INS38 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS38 INS8 INS32 INS39 INS59 INS7 INS7 INS7 INS42 INS42 INS27 INS8 INS38 INS8 INS43 INS59 INS27 INS8 INS38 INS8 INS32 INS39 INS59 INS7 INS7 INS42 INS42 INS27 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS16 INS39 INS59 INS7 INS7 INS42 INS42 INS27 INS8 INS27 INS8 INS16 INS16 INS42 INS27 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS16 INS8 INS27 INS39 INS59 INS7 INS7 INS42 INS9 INS62 INS9 INS43 INS42 INS32 INS33 INS32 INS42 INS32 INS32 INS33 INS32 INS33 INS32 INS42 INS52 INS42 INS41 INS36 INS41 INS42 INS42 INS11 INS32 INS32 INS41 INS32 INS32 INS41 INS32 INS41 INS32 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS27 INS42 INS27 INS52 INS42 INS41 INS36 INS41 INS42 INS42 INS11 INS32 INS32 INS41 INS32 INS41 INS32 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS27 INS52 INS42 INS41 INS27 INS27 INS41 INS42 INS42 INS11 INS42 INS40 INS41 INS42 INS40 INS41 INS27 INS32 INS27 INS42 INS16 INS42 INS27 INS42 INS27 INS52 INS42 INS41 INS27 INS27 INS41 INS27 INS32 INS27 INS27 INS32 INS34 INS52 INS42 INS41 INS27 INS27 INS41 INS42 INS42 INS11 INS42 INS40 INS41 INS27 INS38 INS27 INS41 INS42 INS40 INS42 INS16 INS42 INS27 INS42 INS27 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS62 INS9 INS43 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS32 INS42 INS32 INS9 INS42 INS42 INS42 INS32 INS42 INS27 INS32 INS27 INS32 INS27 INS32 INS9 INS62 INS9 INS43 INS42 INS42 INS42 INS42 INS9 INS32 INS42 INS32 INS9 INS42 INS42 INS42 INS32 INS42 INS27 INS32 INS27 INS32 INS9 INS42 INS33 INS32 INS32 INS9 INS43 INS42 INS9 INS9 INS42 INS33 INS42 INS42 INS40 INS40 INS33 INS27 INS32 INS34 INS27 INS42 INS27 INS42 INS9 INS42 INS33 INS32 INS32 INS9 INS32 INS33 INS32 INS42 INS32 INS32 INS33 INS32 INS33 INS32 INS42 INS9 INS42 INS33 INS32 INS32 INS9 INS43 INS42 INS9 INS42 INS33 INS32 INS40 INS33 INS9 INS27 INS32 INS34 INS27 INS11 INS27 INS36 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS33 INS42 INS42 INS34 INS42 INS39 INS36 INS34 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS11 INS11 INS27 INS27 INS32 INS34 INS43 INS42 INS43 INS42 INS42 INS36 INS42 INS33 INS42 INS42 INS42 INS42 INS27 INS42 INS34