YARN-2690. [YARN-2574] Make ReservationSystem and its dependent classes independent of Scheduler type. (Anubhav Dhoot via kasha)

+import org.apache.hadoop.yarn.api.records.Resource;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.QueueMetrics;
+import org.apache.hadoop.yarn.util.resource.ResourceCalculator;
-  protected abstract Plan initializePlan(String planQueueName)
-      throws YarnException;
+  protected Plan initializePlan(String planQueueName) throws YarnException {
+    String planQueuePath = getPlanQueuePath(planQueueName);
+    SharingPolicy adPolicy = getAdmissionPolicy(planQueuePath);
+    adPolicy.init(planQueuePath, getReservationSchedulerConfiguration());
+    // Calculate the max plan capacity
+    Resource minAllocation = getMinAllocation();
+    Resource maxAllocation = getMaxAllocation();
+    ResourceCalculator rescCalc = getResourceCalculator();
+    Resource totCap = getPlanQueueCapacity(planQueueName);
+    Plan plan =
+        new InMemoryPlan(getRootQueueMetrics(), adPolicy,
+            getAgent(planQueuePath), totCap, planStepSize, rescCalc,
+            minAllocation, maxAllocation, planQueueName,
+            getReplanner(planQueuePath), getReservationSchedulerConfiguration()
+            .getMoveOnExpiry(planQueuePath));
+    LOG.info("Intialized plan {0} based on reservable queue {1}",
+        plan.toString(), planQueueName);
+    return plan;
+  }
-  protected abstract Planner getReplanner(String planQueueName);
+  protected Planner getReplanner(String planQueueName) {
+    ReservationSchedulerConfiguration reservationConfig =
+        getReservationSchedulerConfiguration();
+    String plannerClassName = reservationConfig.getReplanner(planQueueName);
+    LOG.info("Using Replanner: " + plannerClassName + " for queue: "
+        + planQueueName);
+    try {
+      Class<?> plannerClazz = conf.getClassByName(plannerClassName);
+      if (Planner.class.isAssignableFrom(plannerClazz)) {
+        Planner planner =
+            (Planner) ReflectionUtils.newInstance(plannerClazz, conf);
+        planner.init(planQueueName, reservationConfig);
+        return planner;
+      } else {
+        throw new YarnRuntimeException("Class: " + plannerClazz
+            + " not instance of " + Planner.class.getCanonicalName());
+      }
+    } catch (ClassNotFoundException e) {
+      throw new YarnRuntimeException("Could not instantiate Planner: "
+          + plannerClassName + " for queue: " + planQueueName, e);
+    }
+  }
-  protected abstract ReservationAgent getAgent(String queueName);
+  protected ReservationAgent getAgent(String queueName) {
+    ReservationSchedulerConfiguration reservationConfig =
+        getReservationSchedulerConfiguration();
+    String agentClassName = reservationConfig.getReservationAgent(queueName);
+    LOG.info("Using Agent: " + agentClassName + " for queue: " + queueName);
+    try {
+      Class<?> agentClazz = conf.getClassByName(agentClassName);
+      if (ReservationAgent.class.isAssignableFrom(agentClazz)) {
+        return (ReservationAgent) ReflectionUtils.newInstance(agentClazz, conf);
+      } else {
+        throw new YarnRuntimeException("Class: " + agentClassName
+            + " not instance of " + ReservationAgent.class.getCanonicalName());
+      }
+    } catch (ClassNotFoundException e) {
+      throw new YarnRuntimeException("Could not instantiate Agent: "
+          + agentClassName + " for queue: " + queueName, e);
+    }
+  }
-  protected abstract SharingPolicy getAdmissionPolicy(String queueName);
+  protected SharingPolicy getAdmissionPolicy(String queueName) {
+    ReservationSchedulerConfiguration reservationConfig =
+        getReservationSchedulerConfiguration();
+    String admissionPolicyClassName =
+        reservationConfig.getReservationAdmissionPolicy(queueName);
+    LOG.info("Using AdmissionPolicy: " + admissionPolicyClassName
+        + " for queue: " + queueName);
+    try {
+      Class<?> admissionPolicyClazz =
+          conf.getClassByName(admissionPolicyClassName);
+      if (SharingPolicy.class.isAssignableFrom(admissionPolicyClazz)) {
+        return (SharingPolicy) ReflectionUtils.newInstance(
+            admissionPolicyClazz, conf);
+      } else {
+        throw new YarnRuntimeException("Class: " + admissionPolicyClassName
+            + " not instance of " + SharingPolicy.class.getCanonicalName());
+      }
+    } catch (ClassNotFoundException e) {
+      throw new YarnRuntimeException("Could not instantiate AdmissionPolicy: "
+          + admissionPolicyClassName + " for queue: " + queueName, e);
+    }
+  }
+  protected abstract ReservationSchedulerConfiguration
+      getReservationSchedulerConfiguration();
+
+  protected abstract String getPlanQueuePath(String planQueueName);
+
+  protected abstract Resource getPlanQueueCapacity(String planQueueName);
+
+  protected abstract Resource getMinAllocation();
+
+  protected abstract Resource getMaxAllocation();
+
+  protected abstract ResourceCalculator getResourceCalculator();
+
+  protected abstract QueueMetrics getRootQueueMetrics();

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 MOV43 INS42 MOV44 MOV43 INS8 INS83 MOV43 INS42 INS44 INS8 INS83 MOV43 INS42 MOV44 INS8 INS83 MOV43 INS42 MOV44 INS8 INS83 INS83 INS43 INS42 INS43 UPD42 MOV44 INS43 UPD42 INS44 INS43 UPD42 INS43 UPD42 INS83 INS83 INS43 INS42 INS83 INS83 INS43 INS42 INS60 INS60 INS21 INS60 INS60 INS60 INS60 INS60 INS21 INS41 INS43 INS42 INS60 INS60 INS21 INS54 INS60 INS60 INS21 INS54 INS60 INS60 INS21 INS54 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS12 INS43 INS59 INS43 INS59 INS32 INS8 INS12 INS43 INS59 INS43 INS59 INS32 INS8 INS12 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS60 INS25 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS60 INS25 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS74 INS59 INS32 INS8 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS74 INS59 INS32 INS8 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS74 INS59 INS32 INS8 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS76 INS42 INS32 INS57 INS42 INS42 INS60 INS21 INS41 INS53 INS42 INS14 INS43 INS76 INS42 INS32 INS57 INS42 INS42 INS41 INS53 INS42 INS14 INS43 INS76 INS42 INS32 INS57 INS42 INS42 INS41 INS53 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS59 INS32 INS42 INS14 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS11 INS14 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS11 INS14 INS43 INS27 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS45 INS42 INS45 INS42 INS42 INS43 INS32 INS43 INS27 INS42 INS45 INS42 INS45 INS42 INS42 INS43 INS32 INS43 INS27 INS42 INS45 INS42 INS45 INS42 INS43 INS32 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS57 INS42 INS57 INS42 INS43 INS43 INS43 INS42 INS42 INS42