YARN-6326. Shouldn't use AppAttemptIds to fetch applications while AM Simulator tracks app in SLS (yufeigu via rkanter)

-import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler
-        .ResourceScheduler;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler
-        .SchedulerAppReport;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.AbstractYarnScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplication;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;
-    appTrackedMetrics = new HashSet<String>();
+    appTrackedMetrics = new HashSet<>();
-    queueTrackedMetrics = new HashSet<String>();
+    queueTrackedMetrics = new HashSet<>();
-    this.trackedQueues = new HashSet<String>();
+    this.trackedQueues = new HashSet<>();
-  
-  public void trackApp(final ApplicationAttemptId appAttemptId,
-                       String oldAppId) {
+
+  protected SchedulerApplicationAttempt getSchedulerAppAttempt(
+      ApplicationId appId) {
+    AbstractYarnScheduler yarnScheduler = (AbstractYarnScheduler)scheduler;
+    SchedulerApplication app = (SchedulerApplication)yarnScheduler
+        .getSchedulerApplications().get(appId);
+    if (app == null) {
+      return null;
+    }
+    return app.getCurrentAppAttempt();
+  }
+
+  public void trackApp(final ApplicationId appId, String oldAppId) {
-      new Gauge<Integer>() {
-        @Override
-        public Integer getValue() {
-          SchedulerAppReport app = scheduler.getSchedulerAppInfo(appAttemptId);
-          return app.getLiveContainers().size();
+        new Gauge<Integer>() {
+          @Override
+          public Integer getValue() {
+            SchedulerApplicationAttempt appAttempt =
+                getSchedulerAppAttempt(appId);
+            if (appAttempt != null) {
+              return appAttempt.getLiveContainers().size();
+            } else {
+              return 0;
+            }
+          }
-      }
-      new Gauge<Integer>() {
-        @Override
-        public Integer getValue() {
-          SchedulerAppReport app = scheduler.getSchedulerAppInfo(appAttemptId);
-          return app.getReservedContainers().size();
+        new Gauge<Integer>() {
+          @Override
+          public Integer getValue() {
+            SchedulerApplicationAttempt appAttempt =
+                getSchedulerAppAttempt(appId);
+            if (appAttempt != null) {
+              return appAttempt.getReservedContainers().size();
+            } else {
+              return 0;
+            }
+          }
-      }
-  
-  public void untrackApp(ApplicationAttemptId appAttemptId,
-      String oldAppId) {
+
+  public void untrackApp(String oldAppId) {

INS26 INS26 UPD40 INS40 UPD40 INS40 INS31 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS60 INS60 INS25 INS41 UPD43 UPD42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 UPD42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS33 INS41 INS42 INS42 UPD74 UPD74 UPD74 INS43 INS42 INS43 INS32 INS33 MOV74 MOV74 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV78 MOV43 MOV78 MOV43 INS25 INS25 UPD43 INS27 INS8 INS8 UPD43 INS27 INS8 INS8 UPD42 UPD42 INS42 INS33 MOV41 INS41 UPD42 UPD42 INS42 INS33 MOV41 INS41 UPD42 UPD42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44