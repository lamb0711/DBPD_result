YARN-4966. Improve yarn logs to fetch container logs without specifying nodeId. Contributed by Xuan Gong.

+    boolean appStateKnown = true;
+      appStateKnown = false;
-      if (nodeAddress != null && isApplicationFinished(appState)) {
+      if (nodeAddress != null && (!appStateKnown ||
+          isApplicationFinished(appState))) {
+      String nodeHttpAddress = null;
+      String nodeId = null;
-        String nodeHttpAddress =
+        nodeHttpAddress =
-        String nodeId = report.getAssignedNode().toString();
-        // If the application is not in the final state,
-        // we will provide the NodeHttpAddress and get the container logs
-        // by calling NodeManager webservice.
-        if (!isApplicationFinished(appState)) {
-          if (logFiles == null || logFiles.length == 0) {
-            logFiles = new String[] { "syslog" };
-          }
-          printContainerLogsFromRunningApplication(getConf(), appIdStr,
-            containerIdStr, nodeHttpAddress, nodeId, logFiles, logCliHelper,
-            appOwner);
-        } else {
+        nodeId = report.getAssignedNode().toString();
+      } catch (IOException | YarnException ex) {
+        if (!appStateKnown || isApplicationFinished(appState)) {
-          // If the application is in the final state, we will directly
-          // get the container logs from HDFS.
-          printContainerLogsForFinishedApplication(appIdStr, containerIdStr,
-            nodeId, requestedLogFiles, logCliHelper, appOwner);
+          return printContainerLogsForFinishedApplicationWithoutNodeId(
+              appIdStr, containerIdStr, requestedLogFiles, logCliHelper,
+              appOwner);
+        } else if (!isApplicationFinished(appState)) {
+          System.err.println("Unable to get logs for this container:"
+              + containerIdStr + "for the application:" + appId);
+          System.out.println("The application: " + appId + " is still running, "
+              + "and we can not get Container report for the container: "
+              + containerIdStr +". Please try later or after the application "
+              + "finishes.");
+          return -1;
-        return resultCode;
-      } catch (IOException | YarnException ex) {
-        System.err.println("Unable to get logs for this container:"
-            + containerIdStr + "for the application:" + appId);
-        if (!getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,
-          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {
-          System.out.println("Please enable the application history service. Or ");
-        }
-        System.out.println("Using "
-            + "yarn logs -applicationId <appId> -containerId <containerId> "
-            + "--nodeAddress <nodeHttpAddress> to get the container logs");
-        return -1;
+      // If the application is not in the final state,
+      // we will provide the NodeHttpAddress and get the container logs
+      // by calling NodeManager webservice.
+      if (!isApplicationFinished(appState)) {
+        if (logFiles == null || logFiles.length == 0) {
+          logFiles = new String[] {"syslog"};
+        }
+        printContainerLogsFromRunningApplication(getConf(), appIdStr,
+            containerIdStr, nodeHttpAddress, nodeId, logFiles, logCliHelper,
+            appOwner);
+      } else {
+        String[] requestedLogFiles = logFiles;
+        if(fetchAllLogFiles(logFiles)) {
+          requestedLogFiles = null;
+        }
+        // If the application is in the final state, we will directly
+        // get the container logs from HDFS.
+        printContainerLogsForFinishedApplication(appIdStr, containerIdStr,
+            nodeId, requestedLogFiles, logCliHelper, appOwner);
+      }
+      return resultCode;
-      appOwner, Arrays.asList(requestedLogFiles));
+        appOwner, Arrays.asList(requestedLogFiles), false);
+  private int printContainerLogsForFinishedApplicationWithoutNodeId(
+      String appId, String containerId, String[] logFiles,
+      LogCLIHelpers logCliHelper, String appOwner) throws IOException {
+    String containerString = "\n\nContainer: " + containerId;
+    System.out.println(containerString);
+    System.out.println(StringUtils.repeat("=", containerString.length()));
+    return logCliHelper.dumpAContainersLogsForALogTypeWithoutNodeId(appId,
+        containerId, appOwner, logFiles != null ?
+        Arrays.asList(logFiles) : null);
+  }
+

INS31 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS60 INS43 INS42 INS43 INS42 INS5 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS41 INS39 INS59 MOV8 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS42 INS9 MOV25 INS54 INS9 INS42 INS42 INS42 INS27 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS16 INS21 INS8 INS12 INS45 INS42 INS42 INS42 INS45 INS32 INS27 INS32 INS33 INS7 INS36 INS33 INS33 MOV60 INS21 INS21 MOV44 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS9 INS27 INS7 INS7 INS25 INS38 MOV32 INS42 MOV32 INS42 MOV32 INS27 INS8 INS25 INS42 INS38 INS32 INS60 INS25 INS41 INS38 INS8 INS42 INS42 INS42 INS5 INS59 INS32 INS8 INS32 INS32 MOV21 INS21 MOV41 INS43 INS85 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS40 INS42 INS27 INS42 INS33 INS45 INS42 INS45 INS45 INS42 INS45 INS45 DEL42 DEL32 DEL42 DEL40 DEL40 DEL32 DEL38 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL40 DEL42 DEL45 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8