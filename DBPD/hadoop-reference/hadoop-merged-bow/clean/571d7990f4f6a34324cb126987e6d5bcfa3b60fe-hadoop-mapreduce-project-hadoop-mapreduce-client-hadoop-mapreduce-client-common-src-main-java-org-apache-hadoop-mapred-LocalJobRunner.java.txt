Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.util.concurrent.Executors;
+import java.util.concurrent.Executors;
-import org.apache.hadoop.fs.LocalDirAllocator;
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
-import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
-import org.apache.hadoop.mapreduce.filecache.DistributedCache;
-import org.apache.hadoop.mapreduce.filecache.TaskDistributedCacheManager;
-import org.apache.hadoop.mapreduce.filecache.TrackerDistributedCacheManager;
-import org.apache.hadoop.security.Credentials;
-import org.apache.hadoop.mapreduce.server.jobtracker.State;
-import org.apache.hadoop.mapreduce.split.SplitMetaInfoReader;
+import org.apache.hadoop.mapreduce.split.SplitMetaInfoReader;
+import org.apache.hadoop.mapreduce.v2.LogParams;
+import org.apache.hadoop.security.Credentials;
+@SuppressWarnings("deprecation")
-  private JobTrackerInstrumentation myMetrics = null;
+  private LocalJobRunnerMetrics myMetrics = null;
-    private TrackerDistributedCacheManager trackerDistributerdCacheManager;
-    private TaskDistributedCacheManager taskDistributedCacheManager;
+    private LocalDistributedCacheManager localDistributedCacheManager;
-      this.trackerDistributerdCacheManager =
-          new TrackerDistributedCacheManager(conf, new DefaultTaskController());
-      this.taskDistributedCacheManager = 
-          trackerDistributerdCacheManager.newTaskDistributedCacheManager(conf);
-      taskDistributedCacheManager.setup(
-          new LocalDirAllocator(MRConfig.LOCAL_DIR), 
-          new File(systemJobDir.toString()),
-          "archive", "archive");
-      
-      if (DistributedCache.getSymlink(conf)) {
-        // This is not supported largely because, 
-        // for a Child subprocess, the cwd in LocalJobRunner
-        // is not a fresh slate, but rather the user's working directory.
-        // This is further complicated because the logic in
-        // setupWorkDir only creates symlinks if there's a jarfile
-        // in the configuration.
-        LOG.warn("LocalJobRunner does not support " +
-        		"symlinking into current working dir.");
-      }
-      // Setup the symlinks for the distributed cache.
-      TaskRunner.setupWorkDir(conf, new File(localJobDir.toUri()).getAbsoluteFile());
+      localDistributedCacheManager = new LocalDistributedCacheManager();
+      localDistributedCacheManager.setup(conf);
-      if (!taskDistributedCacheManager.getClassPaths().isEmpty()) {
-        setContextClassLoader(taskDistributedCacheManager.makeClassLoader(
+      if (localDistributedCacheManager.hasLocalClasspaths()) {
+        setContextClassLoader(localDistributedCacheManager.makeClassLoader(
-    JobProfile getProfile() {
-      return profile;
-    }
-
-          TaskRunner.setupChildMapredLocalDirs(map, localConf);
+          setupChildMapredLocalDirs(map, localConf);
-    @SuppressWarnings("unchecked")
-            TaskRunner.setupChildMapredLocalDirs(reduce, localConf);
+            setupChildMapredLocalDirs(reduce, localConf);
-          taskDistributedCacheManager.release();
-          trackerDistributerdCacheManager.purgeCache();
+          localDistributedCacheManager.close();
-    myMetrics = new JobTrackerMetricsInst(null, new JobConf(conf));
+    myMetrics = new LocalJobRunnerMetrics(new JobConf(conf));
-  /**
-   * @deprecated Use {@link #getJobTrackerStatus()} instead.
-   */
-  @Deprecated
-  public State getJobTrackerState() throws IOException, InterruptedException {
-    return State.RUNNING;
-  }
-  
-   * @see org.apache.hadoop.mapred.JobSubmissionProtocol#getQueueAdmins()
+   * @see org.apache.hadoop.mapreduce.protocol.ClientProtocol#getQueueAdmins(String)
+
+  @Override
+  public LogParams getLogFileParams(org.apache.hadoop.mapreduce.JobID jobID,
+      org.apache.hadoop.mapreduce.TaskAttemptID taskAttemptID)
+      throws IOException, InterruptedException {
+    throw new UnsupportedOperationException("Not supported");
+  }
+  
+  static void setupChildMapredLocalDirs(Task t, JobConf conf) {
+    String[] localDirs = conf.getTrimmedStrings(MRConfig.LOCAL_DIR);
+    String jobId = t.getJobID().toString();
+    String taskId = t.getTaskID().toString();
+    boolean isCleanup = t.isTaskCleanupTask();
+    String user = t.getUser();
+    StringBuffer childMapredLocalDir =
+        new StringBuffer(localDirs[0] + Path.SEPARATOR
+            + getLocalTaskDir(user, jobId, taskId, isCleanup));
+    for (int i = 1; i < localDirs.length; i++) {
+      childMapredLocalDir.append("," + localDirs[i] + Path.SEPARATOR
+          + getLocalTaskDir(user, jobId, taskId, isCleanup));
+    }
+    LOG.debug(MRConfig.LOCAL_DIR + " for child : " + childMapredLocalDir);
+    conf.set(MRConfig.LOCAL_DIR, childMapredLocalDir.toString());
+  }
+  
+  static final String TASK_CLEANUP_SUFFIX = ".cleanup";
+  static final String SUBDIR = jobDir;
+  static final String JOBCACHE = "jobcache";
+  
+  static String getLocalTaskDir(String user, String jobid, String taskid,
+      boolean isCleanupAttempt) {
+    String taskDir = SUBDIR + Path.SEPARATOR + user + Path.SEPARATOR + JOBCACHE
+      + Path.SEPARATOR + jobid + Path.SEPARATOR + taskid;
+    if (isCleanupAttempt) {
+      taskDir = taskDir + TASK_CLEANUP_SUFFIX;
+    }
+    return taskDir;
+  }
+  
+  

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 INS79 INS31 INS31 INS23 INS23 INS23 INS31 INS42 INS45 UPD43 MOV78 MOV83 INS43 INS42 INS44 INS44 MOV43 MOV43 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 UPD42 UPD43 UPD42 INS42 INS43 INS42 INS43 INS42 INS53 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS24 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS25 INS41 UPD42 UPD42 INS40 INS40 INS14 INS42 INS42 INS5 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS32 INS42 INS42 INS42 INS43 INS59 INS42 INS8 INS42 INS32 UPD40 INS69 INS43 INS45 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS27 INS42 INS42 INS40 INS32 INS42 INS42 INS27 INS21 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD43 INS43 INS42 UPD42 MOV42 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS34 INS32 INS40 INS45 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS7 UPD43 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS40 INS32 INS42 INS42 INS27 INS42 INS27 UPD42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS45 INS2 INS40 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL14 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL40 DEL14 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL45 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL42 DEL32 DEL32 DEL21 DEL32 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL45 DEL79 DEL42 DEL42 DEL42 DEL32 DEL21 DEL33 DEL66 DEL42 DEL68 DEL65 DEL66 DEL65 DEL29 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31