HDFS-3548. NamenodeFsck.copyBlock fails to create a Block Reader. Contributed by Colin Patrick McCabe


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1358822 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import org.apache.hadoop.fs.UnresolvedLinkException;
+import org.apache.hadoop.security.AccessControlException;
+  /**
+   * True if we encountered an internal error during FSCK, such as not being
+   * able to delete a corrupt file.
+   */
+  private boolean internalError = false;
+
+        // If there were internal errors during the fsck operation, we want to
+        // return FAILURE_STATUS, even if those errors were not immediately
+        // fatal.  Otherwise many unit tests will pass even when there are bugs.
+        if (internalError) {
+          throw new IOException("fsck encountered internal errors!");
+        }
+
-      try {
-        if (doMove) {
-          if (!isOpen) {
-            copyBlocksToLostFound(parent, file, blocks);
-          }
-        }
-        if (doDelete) {
-          if (!isOpen) {
-            LOG.warn("\n - deleting corrupted file " + path);
-            namenode.getRpcServer().delete(path, true);
-          }
-        }
-      } catch (IOException e) {
-        LOG.error("error processing " + path + ": " + e.toString());
+      if (isOpen) {
+        LOG.info("Fsck: ignoring open file " + path);
+      } else {
+        if (doMove) copyBlocksToLostFound(parent, file, blocks);
+        if (doDelete) deleteCorruptedFile(path);
+
+  private void deleteCorruptedFile(String path) {
+    try {
+      namenode.getRpcServer().delete(path, true);
+      LOG.info("Fsck: deleted corrupt file " + path);
+    } catch (Exception e) {
+      LOG.error("Fsck: error deleting corrupted file " + path, e);
+      internalError = true;
+    }
+  }
+
+  boolean hdfsPathExists(String path)
+      throws AccessControlException, UnresolvedLinkException, IOException {
+    try {
+      HdfsFileStatus hfs = namenode.getRpcServer().getFileInfo(path);
+      return (hfs != null);
+    } catch (FileNotFoundException e) {
+      return false;
+    }
+  }
+    final String fullName = file.getFullName(parent);
+    OutputStream fos = null;
-    if (!lfInited) {
-      lostFoundInit(dfs);
-    }
-    if (!lfInitedOk) {
-      return;
-    }
-    String fullName = file.getFullName(parent);
-    String target = lostFound + fullName;
-    String errmsg = "Failed to move " + fullName + " to /lost+found";
-    try {
+      if (!lfInited) {
+        lostFoundInit(dfs);
+      }
+      if (!lfInitedOk) {
+        throw new IOException("failed to initialize lost+found");
+      }
+      String target = lostFound + fullName;
+      if (hdfsPathExists(target)) {
+        LOG.warn("Fsck: can't copy the remains of " + fullName + " to " +
+          "lost+found, because " + target + " already exists.");
+        return;
+      }
-        LOG.warn(errmsg);
-        return;
+        throw new IOException("failed to create directory " + target);
-      OutputStream fos = null;
+      boolean copyError = false;
-          if (fos != null)
-            chain++;
-          else {
-            throw new IOException(errmsg + ": could not store chain " + chain);
+          if (fos == null) {
+            throw new IOException("Failed to copy " + fullName +
+                " to /lost+found: could not store chain " + chain);
+          chain++;
-          e.printStackTrace();
-          // something went wrong copying this block...
-          LOG.warn(" - could not copy block " + lblock.getBlock() + " to " + target);
+          LOG.error("Fsck: could not copy block " + lblock.getBlock() +
+              " to " + target, e);
+          internalError = true;
+          copyError = true;
-      if (fos != null) fos.close();
-      LOG.warn("\n - copied corrupted file " + fullName + " to /lost+found");
-    }  catch (Exception e) {
-      e.printStackTrace();
-      LOG.warn(errmsg + ": " + e.getMessage());
-    }
+      if (copyError) {
+        LOG.warn("Fsck: there were errors copying the remains of the " +
+          "corrupted file " + fullName + " to /lost+found");
+      } else {
+        LOG.info("Fsck: copied the remains of the corrupted file " + 
+          fullName + " to /lost+found");
+      }
+    } catch (Exception e) {
+      LOG.error("copyBlocksToLostFound: error processing " + fullName, e);
+      internalError = true;
+      if (fos != null) fos.close();
-          throw new IOException("Could not obtain block " + lblock);
+          throw new IOException("Could not obtain block " + lblock, ie);
-        s = new Socket();
+        s = NetUtils.getDefaultSocketFactory(conf).createSocket();
-      e.printStackTrace();
+      LOG.error("Error reading block", e);
+      internalError = true;

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS29 INS83 INS39 INS59 INS83 INS39 INS42 INS44 MOV8 INS39 INS42 INS44 INS43 INS43 INS43 INS8 MOV8 INS65 INS42 INS9 INS43 INS42 INS54 MOV43 INS42 INS42 INS42 INS42 INS54 MOV60 MOV60 INS66 INS66 INS42 MOV8 MOV21 INS12 INS8 INS12 INS83 INS8 INS25 INS44 INS8 INS60 INS41 INS44 INS8 MOV25 INS25 MOV60 INS25 INS60 INS25 MOV25 MOV21 INS21 INS42 INS8 MOV8 INS43 INS42 INS21 INS21 INS43 INS59 INS36 INS43 INS42 INS41 MOV38 INS8 INS32 INS8 INS39 INS59 INS42 INS8 INS8 INS21 INS7 INS25 MOV21 INS25 INS25 UPD42 INS42 INS32 INS7 INS42 INS42 INS32 INS27 INS42 INS9 INS53 INS42 INS42 INS21 INS41 INS53 INS42 INS9 MOV21 INS21 INS7 INS42 INS9 INS42 INS8 INS42 MOV21 INS42 INS21 UPD45 INS42 INS42 INS27 INS42 INS42 INS9 INS32 INS42 INS42 INS42 INS33 INS14 INS32 INS14 INS32 UPD42 INS42 INS42 INS9 INS42 UPD42 INS45 UPD42 INS53 UPD42 INS32 INS45 INS42 INS42 INS42 MOV43 INS45 INS42 INS42 INS27 INS43 INS27 MOV21 MOV21 INS42 INS42 INS27 UPD45 INS42 INS32 INS14 UPD45 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 UPD27 INS21 INS27 INS45 INS42 INS45 INS32 INS42 INS43 INS45 INS7 INS7 INS45 UPD45 MOV45 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS9 INS42 INS9 INS42 UPD45 INS45 UPD42 UPD45 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL38 DEL25 DEL8 DEL25 DEL42 DEL25 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL38 DEL25 DEL41 DEL8 DEL25 DEL42 DEL45 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL41 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL8 DEL54 DEL8 DEL42 DEL43 DEL14