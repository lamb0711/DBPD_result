YARN-5956. Refactor ClientRMService for unify error handling across apis. Contributed by Kai Sasaki.

-  InetSocketAddress clientBindAddress;
+  private InetSocketAddress clientBindAddress;
-  private static final EnumSet<RMAppState> COMPLETED_APP_STATES = EnumSet.of(
-      RMAppState.FINISHED, RMAppState.FINISHING, RMAppState.FAILED,
-      RMAppState.KILLED, RMAppState.FINAL_SAVING, RMAppState.KILLING);
-   * @param callerUGI
-   * @param owner
-   * @param operationPerformed
-   * @param application
-   * @return
+   * @param callerUGI the user information who submit the request
+   * @param owner the user of the application
+   * @param operationPerformed the type of operation defined in
+   *        {@link ApplicationAccessType}
+   * @param application submitted application
+   * @return access is permitted or not
+    ApplicationId applicationId
+        = request.getApplicationAttemptId().getApplicationId();
-    UserGroupInformation callerUGI;
-    try {
-      callerUGI = UserGroupInformation.getCurrentUser();
-    } catch (IOException ie) {
-      LOG.info("Error getting UGI ", ie);
-      throw RPCUtil.getRemoteException(ie);
-    }
-    RMApp application = this.rmContext.getRMApps().get(
-        appAttemptId.getApplicationId());
-    if (application == null) {
-      // If the RM doesn't have the application, throw
-      // ApplicationNotFoundException and let client to handle.
-      throw new ApplicationNotFoundException("Application with id '"
-          + request.getApplicationAttemptId().getApplicationId()
-          + "' doesn't exist in RM. Please check that the job "
-          + "submission was successful.");
-    }
+    UserGroupInformation callerUGI = getCallerUgi(applicationId,
+        AuditConstants.GET_APP_ATTEMPT_REPORT);
+    RMApp application = verifyUserAccessForRMApp(applicationId, callerUGI,
+        AuditConstants.GET_APP_ATTEMPT_REPORT, ApplicationAccessType.VIEW_APP,
+        false);
-    UserGroupInformation callerUGI;
-    try {
-      callerUGI = UserGroupInformation.getCurrentUser();
-    } catch (IOException ie) {
-      LOG.info("Error getting UGI ", ie);
-      throw RPCUtil.getRemoteException(ie);
-    }
-    RMApp application = this.rmContext.getRMApps().get(appId);
-    if (application == null) {
-      // If the RM doesn't have the application, throw
-      // ApplicationNotFoundException and let client to handle.
-      throw new ApplicationNotFoundException("Application with id '" + appId
-          + "' doesn't exist in RM. Please check that the job submission "
-          + "was successful.");
-    }
+    UserGroupInformation callerUGI = getCallerUgi(appId,
+        AuditConstants.GET_APP_ATTEMPTS);
+    RMApp application = verifyUserAccessForRMApp(appId, callerUGI,
+        AuditConstants.GET_APP_ATTEMPTS, ApplicationAccessType.VIEW_APP,
+        false);
-    UserGroupInformation callerUGI;
-    try {
-      callerUGI = UserGroupInformation.getCurrentUser();
-    } catch (IOException ie) {
-      LOG.info("Error getting UGI ", ie);
-      throw RPCUtil.getRemoteException(ie);
-    }
-    RMApp application = this.rmContext.getRMApps().get(appId);
-    if (application == null) {
-      // If the RM doesn't have the application, throw
-      // ApplicationNotFoundException and let client to handle.
-      throw new ApplicationNotFoundException("Application with id '" + appId
-          + "' doesn't exist in RM. Please check that the job submission "
-          + "was successful.");
-    }
+    UserGroupInformation callerUGI = getCallerUgi(appId,
+        AuditConstants.GET_CONTAINER_REPORT);
+    RMApp application = verifyUserAccessForRMApp(appId, callerUGI,
+        AuditConstants.GET_CONTAINER_REPORT, ApplicationAccessType.VIEW_APP,
+        false);
-      RMContainer rmConatiner = this.rmContext.getScheduler().getRMContainer(
+      RMContainer rmContainer = this.rmContext.getScheduler().getRMContainer(
-      if (rmConatiner == null) {
+      if (rmContainer == null) {
-      response = GetContainerReportResponse.newInstance(rmConatiner
+      response = GetContainerReportResponse.newInstance(rmContainer
-    UserGroupInformation callerUGI;
-    try {
-      callerUGI = UserGroupInformation.getCurrentUser();
-    } catch (IOException ie) {
-      LOG.info("Error getting UGI ", ie);
-      throw RPCUtil.getRemoteException(ie);
-    }
-    RMApp application = this.rmContext.getRMApps().get(appId);
-    if (application == null) {
-      // If the RM doesn't have the application, throw
-      // ApplicationNotFoundException and let client to handle.
-      throw new ApplicationNotFoundException("Application with id '" + appId
-          + "' doesn't exist in RM. Please check that the job submission "
-          + "was successful.");
-    }
+    UserGroupInformation callerUGI = getCallerUgi(appId,
+        AuditConstants.GET_CONTAINERS);
+    RMApp application = verifyUserAccessForRMApp(appId, callerUGI,
+        AuditConstants.GET_CONTAINERS, ApplicationAccessType.VIEW_APP, false);
+            // In order to check the number format
-    SubmitApplicationResponse response = recordFactory
+    return recordFactory
-    return response;
-    UserGroupInformation callerUGI;
-    try {
-      callerUGI = UserGroupInformation.getCurrentUser();
-    } catch (IOException ie) {
-      LOG.info("Error getting UGI ", ie);
-      RMAuditLogger.logFailure("UNKNOWN", AuditConstants.FAIL_ATTEMPT_REQUEST,
-          "UNKNOWN", "ClientRMService" , "Error getting UGI",
-          applicationId, attemptId);
-      throw RPCUtil.getRemoteException(ie);
-    }
-
-    RMApp application = this.rmContext.getRMApps().get(applicationId);
-    if (application == null) {
-      RMAuditLogger.logFailure(callerUGI.getUserName(),
-          AuditConstants.FAIL_ATTEMPT_REQUEST, "UNKNOWN", "ClientRMService",
-          "Trying to fail an attempt of an absent application", applicationId,
-          attemptId);
-      throw new ApplicationNotFoundException("Trying to fail an attempt "
-          + attemptId + " of an absent application " + applicationId);
-    }
+    UserGroupInformation callerUGI = getCallerUgi(applicationId,
+        AuditConstants.FAIL_ATTEMPT_REQUEST);
+    RMApp application = verifyUserAccessForRMApp(applicationId, callerUGI,
+        AuditConstants.FAIL_ATTEMPT_REQUEST, ApplicationAccessType.MODIFY_APP,
+        true);
-    if (!checkAccess(callerUGI, application.getUser(),
-        ApplicationAccessType.MODIFY_APP, application)) {
-      RMAuditLogger.logFailure(callerUGI.getShortUserName(),
-          AuditConstants.FAIL_ATTEMPT_REQUEST,
-          "User doesn't have permissions to "
-              + ApplicationAccessType.MODIFY_APP.toString(), "ClientRMService",
-          AuditConstants.UNAUTHORIZED_USER, applicationId);
-      throw RPCUtil.getRemoteException(new AccessControlException("User "
-          + callerUGI.getShortUserName() + " cannot perform operation "
-          + ApplicationAccessType.MODIFY_APP.name() + " on " + applicationId));
-    }
-
-    if (!ACTIVE_APP_STATES.contains(application.getState())) {
-      if (COMPLETED_APP_STATES.contains(application.getState())) {
-        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),
-            AuditConstants.FAIL_ATTEMPT_REQUEST, "ClientRMService",
-            applicationId);
-        return response;
-      }
+    if (application.isAppInCompletedStates()) {
+      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),
+          AuditConstants.FAIL_ATTEMPT_REQUEST, "ClientRMService",
+          applicationId);
+      return response;
-          "UNKNOWN", "ClientRMService" , "Error getting UGI",
-          applicationId, callerContext);
+              "UNKNOWN", "ClientRMService", "Error getting UGI",
+              applicationId, callerContext);
-
-    // For UnmanagedAMs, return true so they don't retry
+    // For Unmanaged AMs, return true so they don't retry
-      Token<RMDelegationTokenIdentifier> realRMDTtoken =
+      Token<RMDelegationTokenIdentifier> realRMDToken =
-              realRMDTtoken.getIdentifier(),
-              realRMDTtoken.getKind().toString(),
-              realRMDTtoken.getPassword(),
-              realRMDTtoken.getService().toString()
+              realRMDToken.getIdentifier(),
+              realRMDToken.getKind().toString(),
+              realRMDToken.getPassword(),
+              realRMDToken.getService().toString()
-    UserGroupInformation callerUGI;
-    try {
-      callerUGI = UserGroupInformation.getCurrentUser();
-    } catch (IOException ie) {
-      LOG.info("Error getting UGI ", ie);
-      RMAuditLogger.logFailure("UNKNOWN", AuditConstants.MOVE_APP_REQUEST,
-          "UNKNOWN", "ClientRMService" , "Error getting UGI",
-          applicationId);
-      throw RPCUtil.getRemoteException(ie);
-    }
-
-    RMApp application = this.rmContext.getRMApps().get(applicationId);
-    if (application == null) {
-      RMAuditLogger.logFailure(callerUGI.getUserName(),
-          AuditConstants.MOVE_APP_REQUEST, "UNKNOWN", "ClientRMService",
-          "Trying to move an absent application", applicationId);
-      throw new ApplicationNotFoundException("Trying to move an absent"
-          + " application " + applicationId);
-    }
-
-    if (!checkAccess(callerUGI, application.getUser(),
-        ApplicationAccessType.MODIFY_APP, application)) {
-      RMAuditLogger.logFailure(callerUGI.getShortUserName(),
-          AuditConstants.MOVE_APP_REQUEST,
-          "User doesn't have permissions to "
-              + ApplicationAccessType.MODIFY_APP.toString(), "ClientRMService",
-          AuditConstants.UNAUTHORIZED_USER, applicationId);
-      throw RPCUtil.getRemoteException(new AccessControlException("User "
-          + callerUGI.getShortUserName() + " cannot perform operation "
-          + ApplicationAccessType.MODIFY_APP.name() + " on " + applicationId));
-    }
+    UserGroupInformation callerUGI = getCallerUgi(applicationId,
+        AuditConstants.MOVE_APP_REQUEST);
+    RMApp application = verifyUserAccessForRMApp(applicationId, callerUGI,
+        AuditConstants.MOVE_APP_REQUEST, ApplicationAccessType.MODIFY_APP,
+        true);
-    MoveApplicationAcrossQueuesResponse response = recordFactory
+    return recordFactory
-    return response;
-    checkReservationSytem(AuditConstants.CREATE_NEW_RESERVATION_REQUEST);
+    checkReservationSystem(AuditConstants.CREATE_NEW_RESERVATION_REQUEST);
-    checkReservationSytem(AuditConstants.SUBMIT_RESERVATION_REQUEST);
+    checkReservationSystem(AuditConstants.SUBMIT_RESERVATION_REQUEST);
-    checkReservationSytem(AuditConstants.UPDATE_RESERVATION_REQUEST);
+    checkReservationSystem(AuditConstants.UPDATE_RESERVATION_REQUEST);
-    checkReservationSytem(AuditConstants.DELETE_RESERVATION_REQUEST);
+    checkReservationSystem(AuditConstants.DELETE_RESERVATION_REQUEST);
-    checkReservationSytem(AuditConstants.LIST_RESERVATION_REQUEST);
+    checkReservationSystem(AuditConstants.LIST_RESERVATION_REQUEST);
-    GetNodesToLabelsResponse response =
-        GetNodesToLabelsResponse.newInstance(labelsMgr.getNodeLabels());
-    return response;
+    return GetNodesToLabelsResponse.newInstance(labelsMgr.getNodeLabels());
-      return GetLabelsToNodesResponse.newInstance(
-          labelsMgr.getLabelsToNodes());
+      return GetLabelsToNodesResponse.newInstance(labelsMgr.getLabelsToNodes());
-    GetClusterNodeLabelsResponse response =
-        GetClusterNodeLabelsResponse.newInstance(
+    return GetClusterNodeLabelsResponse.newInstance(
-    return response;
-  private void checkReservationSytem(String auditConstant) throws YarnException {
+  private void checkReservationSystem(String auditConstant)
+      throws YarnException {
-        AuditConstants.UPDATE_APP_PRIORITY);
+        AuditConstants.UPDATE_APP_PRIORITY, ApplicationAccessType.MODIFY_APP,
+        true);
-   * Signal a container.
+   * Send a signal to a container.
+   *
+   * @param request request to signal a container
+   * @return the response of sending signal request
+   * @throws YarnException rpc related exception
+   * @throws IOException fail to obtain user group information
-        AuditConstants.UPDATE_APP_TIMEOUTS);
+        AuditConstants.UPDATE_APP_TIMEOUTS, ApplicationAccessType.MODIFY_APP,
+        true);
-      if (COMPLETED_APP_STATES.contains(state)) {
+      if (application.isAppInCompletedStates()) {
-      UserGroupInformation callerUGI, String operation) throws YarnException {
+      UserGroupInformation callerUGI, String operation,
+      ApplicationAccessType accessType,
+      boolean needCheckAccess) throws YarnException {
-      throw new ApplicationNotFoundException("Trying to " + operation
-          + " of an absent application " + applicationId);
+        // If the RM doesn't have the application, throw
+        // ApplicationNotFoundException and let client to handle.
+      throw new ApplicationNotFoundException("Application with id '"
+              + applicationId + "' doesn't exist in RM. "
+              + "Please check that the job "
+              + "submission was successful.");
-    if (!checkAccess(callerUGI, application.getUser(),
-        ApplicationAccessType.MODIFY_APP, application)) {
-      RMAuditLogger.logFailure(callerUGI.getShortUserName(), operation,
-          "User doesn't have permissions to "
-              + ApplicationAccessType.MODIFY_APP.toString(),
-          "ClientRMService", AuditConstants.UNAUTHORIZED_USER, applicationId);
-      throw RPCUtil.getRemoteException(new AccessControlException("User "
-          + callerUGI.getShortUserName() + " cannot perform operation "
-          + ApplicationAccessType.MODIFY_APP.name() + " on " + applicationId));
+    if (needCheckAccess) {
+      if (!checkAccess(callerUGI, application.getUser(),
+              accessType, application)) {
+        RMAuditLogger.logFailure(callerUGI.getShortUserName(), operation,
+                "User doesn't have permissions to "
+                        + accessType.toString(),
+                "ClientRMService", AuditConstants.UNAUTHORIZED_USER,
+                applicationId);
+        throw RPCUtil.getRemoteException(new AccessControlException("User "
+                + callerUGI.getShortUserName() + " cannot perform operation "
+                + accessType.name() + " on " + applicationId));
+      }

INS83 MOV60 UPD42 INS44 INS44 INS60 INS60 INS60 INS60 INS60 INS60 INS60 MOV25 INS60 INS60 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS25 INS66 INS66 INS66 INS65 INS66 INS66 INS43 MOV43 INS59 MOV43 INS59 MOV43 INS59 MOV43 MOV59 MOV43 INS59 MOV43 MOV32 MOV43 INS59 MOV43 INS59 INS32 MOV43 INS59 MOV43 INS59 MOV32 MOV32 MOV32 MOV43 UPD66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 MOV43 INS42 INS42 INS8 INS42 INS42 UPD42 MOV32 INS42 INS32 MOV42 INS32 INS42 INS32 UPD42 MOV42 MOV42 INS32 MOV42 INS32 MOV42 INS32 MOV42 UPD42 MOV42 MOV42 INS32 MOV42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV25 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS40 INS9 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS40 INS40 INS9 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS40 INS40 INS9 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS40 INS40 INS9 UPD42 MOV42 UPD42 MOV42 MOV40 UPD42 MOV42 MOV42 MOV42 MOV40 MOV40 INS9 UPD42 MOV42 UPD42 MOV42 MOV40 UPD42 MOV42 MOV42 MOV42 MOV40 MOV40 INS9 INS40 INS9 INS40 INS9 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 UPD42 INS45 INS45 UPD45 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL32 DEL59 DEL23 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL32 DEL42 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL32 DEL42 DEL42 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL32 DEL42 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL45 DEL45 DEL45 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL45 DEL45 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL45 DEL40 DEL42 DEL32 DEL27 DEL45 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL40 DEL42 DEL32 DEL45 DEL42 DEL27 DEL14 DEL32 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL8 DEL25 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL45 DEL45 DEL45 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL45 DEL45 DEL45 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL45 DEL40 DEL42 DEL32 DEL27 DEL45 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL40 DEL42 DEL32 DEL45 DEL42 DEL27 DEL14 DEL32 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40