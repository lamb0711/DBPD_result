HADOOP-15836. Review of AccessControlList. Contributed by BELUGA BEHR.

+import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
+import java.util.Collections;
+import java.util.Set;
+import java.util.TreeSet;
+import org.apache.commons.lang3.StringUtils;
-import org.apache.hadoop.util.StringUtils;
-  static {                                      // register a ctor
+  static { // register a ctor
-  private Collection<String> users;
+  private final Set<String> users = new TreeSet<>();
-  private Collection<String> groups;
+  private final Set<String> groups = new TreeSet<>();
-   * 
+   *
-   * The user list comes first and is separated by a space followed 
+   * The user list comes first and is separated by a space followed
-   * 
+   *
-  
+
-   * Construct a new ACL from String representation of users and groups
-   * 
+   * Construct a new ACL from String representation of users and groups.
+   *
-   * 
+   *
-    users = new HashSet<String>();
-    groups = new HashSet<String>();
-        break;
+        return;
-    if (!allAllowed) {      
-      if (userGroupStrings.length >= 1 && userGroupStrings[0] != null) {
-        users = StringUtils.getTrimmedStringCollection(userGroupStrings[0]);
-      } 
-      
-      if (userGroupStrings.length == 2 && userGroupStrings[1] != null) {
-        groups = StringUtils.getTrimmedStringCollection(userGroupStrings[1]);
-        groupsMapping.cacheGroupsAdd(new LinkedList<String>(groups));
+    if (userGroupStrings.length >= 1 && userGroupStrings[0] != null) {
+      String[] userList = userGroupStrings[0].split(",");
+      for (String user : userList) {
+        if (StringUtils.isNotBlank(user)) {
+          users.add(user.trim());
+        }
+    if (userGroupStrings.length == 2 && userGroupStrings[1] != null) {
+      String[] groupList = userGroupStrings[1].split(",");
+      for (String group : groupList) {
+        if (StringUtils.isNotBlank(group)) {
+          groups.add(group.trim());
+        }
+      }
+      groupsMapping.cacheGroupsAdd(new ArrayList<>(groups));
+    }
-  
+
-   * Checks whether ACL string contains wildcard
+   * Checks whether ACL string contains wildcard.
-    if (aclString.contains(WILDCARD_ACL_VALUE) && 
-        aclString.trim().equals(WILDCARD_ACL_VALUE)) {
-      return true;
-    }
-    return false;
+    return WILDCARD_ACL_VALUE.equals(aclString.trim());
-  
+
-   * 
-   * @param user
-   *          The user name
+   *
+   * @param user The user name
-   * 
-   * @param group
-   *          The group name
+   *
+   * @param group The group name
-      throw new IllegalArgumentException("Group " + group + " can not be added");
+      throw new IllegalArgumentException(
+          "Group " + group + " can not be added");
-      List<String> groupsList = new LinkedList<String>();
-      groupsList.add(group);
-      groupsMapping.cacheGroupsAdd(groupsList);
+      groupsMapping.cacheGroupsAdd(Collections.singletonList(group));
-   * 
-   * @param user
-   *          The user name
+   *
+   * @param user The user name
-   * 
-   * @param group
-   *          The group name
+   *
+   * @param group The group name
-      throw new IllegalArgumentException("Group " + group
-          + " can not be removed");
+      throw new IllegalArgumentException(
+          "Group " + group + " can not be removed");
-   * @return the set of user names. the set must not be modified.
+   *
+   * @return an unmodifiable set of user names in alphabetic order.
-    return users;
+    return Collections.unmodifiableSet(users);
-  
+
-   * @return the set of group names. the set must not be modified.
+   *
+   * @return an unmodifiable set of group names in alphabetic order.
-    return groups;
+    return Collections.unmodifiableSet(groups);
-    } else if (!groups.isEmpty()) {
+    }
+    if (!groups.isEmpty()) {
-    return getString(users);
+    return String.join(",", users);
-    return getString(groups);
-  }
-
-  /**
-   * Returns comma-separated concatenated single String of all strings of
-   * the given set
-   *
-   * @param strings set of strings to concatenate
-   */
-  private String getString(Collection<String> strings) {
-    StringBuilder sb = new StringBuilder(INITIAL_CAPACITY);
-    boolean first = true;
-    for(String str: strings) {
-      if (!first) {
-        sb.append(",");
-      } else {
-        first = false;
-      }
-      sb.append(str);
-    }
-    return sb.toString();
+    return String.join(",", groups);

MOV26 MOV26 INS26 UPD40 INS40 UPD40 UPD40 UPD40 INS23 INS23 MOV83 INS83 UPD74 MOV74 INS59 INS83 INS83 UPD74 MOV74 INS59 INS8 UPD43 MOV42 INS14 UPD43 UPD42 MOV42 MOV14 INS25 MOV25 MOV41 MOV25 UPD42 INS74 UPD42 INS74 UPD66 UPD66 MOV27 INS8 UPD66 MOV32 MOV32 UPD66 UPD66 UPD66 UPD66 UPD66 INS32 UPD66 INS32 UPD43 MOV43 INS43 INS60 INS70 INS60 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 UPD42 MOV42 INS5 INS59 INS44 INS42 INS8 INS5 INS59 INS44 INS42 INS8 INS41 MOV43 INS85 INS42 MOV32 MOV42 INS43 INS42 MOV25 MOV43 INS85 INS42 MOV32 MOV42 INS43 INS42 INS25 INS32 UPD42 INS45 INS42 INS32 UPD42 INS45 INS42 INS32 INS8 UPD74 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 UPD43 INS32 INS32 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL59 DEL23 DEL83 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL14 DEL7 DEL21 DEL42 DEL14 DEL7 DEL21 DEL10 DEL42 DEL42 DEL7 DEL42 DEL42 DEL7 DEL42 DEL43 DEL42 DEL38 DEL8 DEL25 DEL42 DEL9 DEL42 DEL42 DEL42 DEL32 DEL27 DEL8 DEL25 DEL9 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL38 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31