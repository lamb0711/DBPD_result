HDFS-4647. Rename should call setLocalName after an inode is removed from snapshots.  Contributed by Arpit Agarwal


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1464795 13f79535-47bb-0310-9956-ffa450edef68

-    final INode srcChild = srcIIP.getLastINode();
+    INode srcChild = srcIIP.getLastINode();
+    final boolean isSrcInSnapshot = srcChild.isInLatestSnapshot(
+        srcIIP.getLatestSnapshot());
+    final boolean srcChildIsReference = srcChild.isReference();
+    
+    // check srcChild for reference
+    final INodeReference.WithCount withCount;
+    if (srcChildIsReference || isSrcInSnapshot) {
+      final INodeReference.WithName withName = srcIIP.getINode(-2).asDirectory()
+          .replaceChild4ReferenceWithName(srcChild); 
+      withCount = (INodeReference.WithCount)withName.getReferredINode();
+      srcChild = withName;
+      srcIIP.setLastINode(srcChild);
+    } else {
+      withCount = null;
+    }
+
-      //TODO: setLocalName breaks created/deleted lists
-      srcChild.setLocalName(dstIIP.getLastLocalName());
+      
+      srcChild = srcIIP.getLastINode();
+      final byte[] dstChildName = dstIIP.getLastLocalName();
+      final INode toDst;
+      if (withCount == null) {
+        srcChild.setLocalName(dstChildName);
+        toDst = srcChild;
+      } else {
+        withCount.getReferredINode().setLocalName(dstChildName);
+        final INodeReference ref = new INodeReference(dstIIP.getINode(-2), withCount);
+        withCount.setParentReference(ref);
+        withCount.incrementReferenceCount();
+        toDst = ref;
+      }
-      added = addLastINodeNoQuotaCheck(dstIIP, srcChild);
+      added = addLastINodeNoQuotaCheck(dstIIP, toDst);
-        if (srcIIP.getLatestSnapshot() != null) {
-          createReferences4Rename(srcChild, srcChildName,
-              (INodeDirectoryWithSnapshot)srcParent.asDirectory(),
-              dstParent.asDirectory());
-        }
-        srcChild.setLocalName(srcChildName);
+        if (withCount == null) {
+          srcChild.setLocalName(srcChildName);
+        } else if (!srcChildIsReference) { // src must be in snapshot
+          final INodeDirectoryWithSnapshot srcParent = 
+              (INodeDirectoryWithSnapshot) srcIIP.getINode(-2).asDirectory();
+          final INode originalChild = withCount.getReferredINode();
+          srcParent.replaceRemovedChild(srcChild, originalChild);
+          srcChild = originalChild;
+        }
+    INode srcChild = srcIIP.getLastINode();
+    final byte[] srcChildName = srcChild.getLocalNameBytes();
+    final boolean isSrcInSnapshot = srcChild.isInLatestSnapshot(
+        srcIIP.getLatestSnapshot());
+    final boolean srcChildIsReference = srcChild.isReference();
+    
+    // check srcChild for reference
+    final INodeReference.WithCount withCount;
+    if (srcChildIsReference || isSrcInSnapshot) {
+      final INodeReference.WithName withName = srcIIP.getINode(-2).asDirectory()
+          .replaceChild4ReferenceWithName(srcChild); 
+      withCount = (INodeReference.WithCount)withName.getReferredINode();
+      srcChild = withName;
+      srcIIP.setLastINode(srcChild);
+    } else {
+      withCount = null;
+    }
+    
-    final INode srcChild = srcIIP.getLastINode();
-    final byte[] srcChildName = srcChild.getLocalNameBytes();
-
+    
-      //TODO: setLocalName breaks created/deleted lists
-      srcChild.setLocalName(dstIIP.getLastLocalName());
+      
+      srcChild = srcIIP.getLastINode();
+
+      final byte[] dstChildName = dstIIP.getLastLocalName();
+      final INode toDst;
+      if (withCount == null) {
+        srcChild.setLocalName(dstChildName);
+        toDst = srcChild;
+      } else {
+        withCount.getReferredINode().setLocalName(dstChildName);
+        final INodeReference ref = new INodeReference(dstIIP.getINode(-2), withCount);
+        withCount.setParentReference(ref);
+        withCount.incrementReferenceCount();
+        toDst = ref;
+      }
-      if (addLastINodeNoQuotaCheck(dstIIP, srcChild)) {
+      if (addLastINodeNoQuotaCheck(dstIIP, toDst)) {
-        if (srcIIP.getLatestSnapshot() != null) {
-          createReferences4Rename(srcChild, srcChildName,
-              (INodeDirectoryWithSnapshot)srcParent.asDirectory(),
-              dstParent.asDirectory());
-        }
-
-        srcChild.setLocalName(srcChildName);
+        srcChild = srcIIP.getLastINode();
+        if (withCount == null) {
+          srcChild.setLocalName(srcChildName);
+        } else if (!srcChildIsReference) { // src must be in snapshot
+          final INodeDirectoryWithSnapshot srcParent
+              = (INodeDirectoryWithSnapshot)srcIIP.getINode(-2).asDirectory();
+          final INode originalChild = withCount.getReferredINode();
+          srcParent.replaceRemovedChild(srcChild, originalChild);
+          srcChild = originalChild;
+        }
-
-  /** The renamed inode is also in a snapshot, create references */
-  private static void createReferences4Rename(final INode srcChild,
-      final byte[] srcChildName, final INodeDirectoryWithSnapshot srcParent,
-      final INodeDirectory dstParent) {
-    final INodeReference.WithCount ref;
-    if (srcChild.isReference()) {
-      ref = (INodeReference.WithCount)srcChild.asReference().getReferredINode();
-    } else {
-      ref = dstParent.asDirectory().replaceChild4Reference(srcChild);
-    }
-    srcParent.replaceRemovedChild4Reference(srcChild, ref, srcChildName);
-  }
+  

MOV60 MOV60 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS25 INS43 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS27 INS8 INS8 INS8 INS83 INS39 INS59 INS83 INS39 INS59 INS83 MOV43 INS59 INS27 INS8 INS8 INS42 INS42 INS32 INS42 INS32 INS40 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS25 INS25 INS42 INS32 INS42 MOV32 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS25 INS42 INS42 MOV32 INS42 INS42 INS83 INS43 INS59 INS7 INS7 INS32 INS7 INS7 INS83 INS5 INS59 INS83 MOV43 INS59 INS27 INS8 INS8 MOV38 INS8 INS42 INS42 MOV32 INS83 INS43 INS59 INS7 INS7 INS32 INS7 INS7 INS83 MOV5 INS59 INS83 MOV43 INS59 INS27 INS8 INS8 INS8 INS40 INS42 INS32 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS39 INS85 INS42 MOV32 INS42 INS42 INS33 MOV21 INS21 INS21 INS60 INS21 INS21 INS21 INS25 MOV21 INS40 INS42 INS32 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 MOV32 INS42 INS42 INS33 MOV21 INS21 INS21 INS60 INS21 INS21 INS21 UPD42 INS21 INS25 MOV21 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS7 INS32 INS83 INS43 INS59 INS32 INS32 INS7 UPD42 INS27 MOV8 INS25 INS32 INS42 INS42 MOV43 INS32 INS42 INS42 INS7 INS32 INS83 INS43 INS59 INS32 INS32 INS7 INS7 INS27 MOV8 INS25 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS38 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS38 INS8 INS42 INS42 INS38 INS42 INS42 INS43 INS32 INS42 INS42 INS60 INS60 INS21 INS21 INS42 INS42 INS38 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS60 INS60 INS21 INS21 INS34 INS42 INS42 INS42 INS38 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS7 INS34 INS42 INS42 INS42 INS38 INS83 MOV43 INS59 INS83 INS43 INS59 INS32 INS7 INS34 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 MOV43 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS38 INS42 INS42 INS38 INS34 INS34 DEL83 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL83 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL83 DEL42 DEL44 DEL83 DEL42 DEL44 DEL83 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31