HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.

+import static org.apache.hadoop.hdfs.client.HdfsClientConfigKeys.DFS_CLIENT_LOCAL_INTERFACES;
+import static org.apache.hadoop.hdfs.client.HdfsClientConfigKeys.DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_DEFAULT;
+import static org.apache.hadoop.hdfs.client.HdfsClientConfigKeys.DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY;
-import org.apache.hadoop.fs.UnresolvedLinkException;
- * DFSClient can connect to a Hadoop Filesystem and 
+ * DFSClient can connect to a Hadoop Filesystem and
- * to communicate with a NameNode daemon, and connects 
+ * to communicate with a NameNode daemon, and connects
- * Hadoop DFS users should obtain an instance of 
+ * Hadoop DFS users should obtain an instance of
-  public static final long SERVER_DEFAULTS_VALIDITY_PERIOD = 60 * 60 * 1000L; // 1 hour
+  // 1 hour
+  public static final long SERVER_DEFAULTS_VALIDITY_PERIOD = 60 * 60 * 1000L;
-  private final Map<Long, DFSOutputStream> filesBeingWritten
-      = new HashMap<Long, DFSOutputStream>();
+  private final Map<Long, DFSOutputStream> filesBeingWritten = new HashMap<>();
-  
-  public DFSClient(InetSocketAddress address, Configuration conf) throws IOException {
+
+  public DFSClient(InetSocketAddress address, Configuration conf)
+      throws IOException {
-  public DFSClient(URI nameNodeUri, Configuration conf
-      ) throws IOException {
+  public DFSClient(URI nameNodeUri, Configuration conf) throws IOException {
-   * @see #DFSClient(URI, ClientProtocol, Configuration, FileSystem.Statistics) 
+   * @see #DFSClient(URI, ClientProtocol, Configuration, FileSystem.Statistics)
-                   FileSystem.Statistics stats)
-    throws IOException {
+      FileSystem.Statistics stats) throws IOException {
-  
-  /** 
+
+  /**
-      Configuration conf, FileSystem.Statistics stats)
-    throws IOException {
+      Configuration conf, FileSystem.Statistics stats) throws IOException {
-    
+
-    this.clientName = "DFSClient_" + dfsClientConf.getTaskId() + "_" + 
+    this.clientName = "DFSClient_" + dfsClientConf.getTaskId() + "_" +
-        HdfsClientConfigKeys.DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY,
-        HdfsClientConfigKeys.DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_DEFAULT);
+        DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY,
+        DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_DEFAULT);
-      LOG.warn(HdfsClientConfigKeys.DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY
+      LOG.warn(DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY
-    
+
-      conf.getTrimmedStrings(HdfsClientConfigKeys.DFS_CLIENT_LOCAL_INTERFACES);
+        conf.getTrimmedStrings(DFS_CLIENT_LOCAL_INTERFACES);
-      Joiner.on(',').join(localInterfaces)+ "] with addresses [" +
-      Joiner.on(',').join(localInterfaceAddrs) + "]");
+          Joiner.on(',').join(localInterfaces)+ "] with addresses [" +
+          Joiner.on(',').join(localInterfaceAddrs) + "]");
-    
-    Boolean readDropBehind = (conf.get(DFS_CLIENT_CACHE_DROP_BEHIND_READS) == null) ?
-        null : conf.getBoolean(DFS_CLIENT_CACHE_DROP_BEHIND_READS, false);
+
+    Boolean readDropBehind =
+        (conf.get(DFS_CLIENT_CACHE_DROP_BEHIND_READS) == null) ?
+            null : conf.getBoolean(DFS_CLIENT_CACHE_DROP_BEHIND_READS, false);
-    Boolean writeDropBehind = (conf.get(DFS_CLIENT_CACHE_DROP_BEHIND_WRITES) == null) ?
-        null : conf.getBoolean(DFS_CLIENT_CACHE_DROP_BEHIND_WRITES, false);
+    Boolean writeDropBehind =
+        (conf.get(DFS_CLIENT_CACHE_DROP_BEHIND_WRITES) == null) ?
+            null : conf.getBoolean(DFS_CLIENT_CACHE_DROP_BEHIND_WRITES, false);
-      conf, DataTransferSaslUtil.getSaslPropertiesResolver(conf),
-      TrustedChannelResolver.getInstance(conf), nnFallbackToSimpleAuth);
+        conf, DataTransferSaslUtil.getSaslPropertiesResolver(conf),
+        TrustedChannelResolver.getInstance(conf), nnFallbackToSimpleAuth);
-  
+
-   * 
+   *
-    List<SocketAddress> localAddrs = new ArrayList<SocketAddress>();
+    List<SocketAddress> localAddrs = new ArrayList<>();
-  
+
-      IOException result = new IOException("Filesystem closed");
-      throw result;
+      throw new IOException("Filesystem closed");
-  public LeaseRenewer getLeaseRenewer() throws IOException {
-      return LeaseRenewer.getInstance(authority, ugi, this);
+  public LeaseRenewer getLeaseRenewer() {
+    return LeaseRenewer.getInstance(authority, ugi, this);
-    
+
-   *  enforced to consistently update its local dfsclients array and 
+   *  enforced to consistently update its local dfsclients array and
-  public void putFileBeingWritten(final long inodeId, final DFSOutputStream out) {
+  public void putFileBeingWritten(final long inodeId,
+      final DFSOutputStream out) {
-  
+
-        // Abort if the lease has already expired. 
+        // Abort if the lease has already expired.
-  
+
-    TraceScope scope = newPathTraceScope("getBlockSize", f);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getBlockSize", f)) {
-    } finally {
-      scope.close();
-  
+
-  @InterfaceAudience.LimitedPrivate( { "HDFS" }) 
+  @InterfaceAudience.LimitedPrivate( { "HDFS" })
-  
+
-    TraceScope scope = tracer.newScope("getDelegationToken");
-    try {
+    try (TraceScope ignored = tracer.newScope("getDelegationToken")) {
-        namenode.getDelegationToken(renewer);
+          namenode.getDelegationToken(renewer);
-    } finally {
-      scope.close();
-   * @throws InvalidToken
-      throws InvalidToken, IOException {
+      throws IOException {
-    } catch (InterruptedException ie) {                                       
+    } catch (InterruptedException ie) {
-                                     AccessControlException.class);
+          AccessControlException.class);
-  
+
-   * @throws InvalidToken
-      throws InvalidToken, IOException {
+      throws IOException {
-     } catch (InterruptedException ie) {                                       
+    } catch (InterruptedException ie) {
-                                     AccessControlException.class);
+          AccessControlException.class);
-  
+
-    
+
-    
+
-      Token<DelegationTokenIdentifier> delToken = 
-        (Token<DelegationTokenIdentifier>) token;
+      Token<DelegationTokenIdentifier> delToken =
+          (Token<DelegationTokenIdentifier>) token;
-        throw re.unwrapRemoteException(InvalidToken.class, 
-                                       AccessControlException.class);
+        throw re.unwrapRemoteException(InvalidToken.class,
+            AccessControlException.class);
-      Token<DelegationTokenIdentifier> delToken = 
+      Token<DelegationTokenIdentifier> delToken =
-      LOG.info("Cancelling " + 
-               DelegationTokenIdentifier.stringifyToken(delToken));
+      LOG.info("Cancelling " +
+          DelegationTokenIdentifier.stringifyToken(delToken));
-    
+
-      
+
-        NameNodeProxiesClient.createProxyWithClientProtocol(conf, uri, null);
+          NameNodeProxiesClient.createProxyWithClientProtocol(conf, uri, null);
-        "Returned service '" + info.getDelegationTokenService().toString() +
-        "' doesn't match expected service '" +
-        token.getService().toString() + "'";
-        
+          "Returned service '" + info.getDelegationTokenService().toString() +
+              "' doesn't match expected service '" +
+              token.getService().toString() + "'";
+
-    
+
-  
+
-    TraceScope scope = newPathTraceScope("getBlockLocations", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getBlockLocations", src)) {
-    } finally {
-      scope.close();
-      String src, long start, long length) 
+      String src, long start, long length)
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class);
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
-    TraceScope scope = newPathTraceScope("recoverLease", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("recoverLease", src)) {
-                                     AccessControlException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          AccessControlException.class,
+          UnresolvedPathException.class);
-   * 
-   * getBlockLocations() returns a list of hostnames that store 
+   *
+   * getBlockLocations() returns a list of hostnames that store
-   * as the data-block the task processes. 
+   * as the data-block the task processes.
-  public BlockLocation[] getBlockLocations(String src, long start, 
-        long length) throws IOException, UnresolvedLinkException {
+  public BlockLocation[] getBlockLocations(String src, long start,
+      long length) throws IOException {
-    TraceScope scope = newPathTraceScope("getBlockLocations", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getBlockLocations", src)) {
-      BlockLocation[] locations =  DFSUtilClient.locatedBlocks2Locations(blocks);
-      HdfsBlockLocation[] hdfsLocations = new HdfsBlockLocation[locations.length];
+      BlockLocation[] locations = DFSUtilClient.locatedBlocks2Locations(blocks);
+      HdfsBlockLocation[] hdfsLocations =
+          new HdfsBlockLocation[locations.length];
-    } finally {
-      scope.close();
-  
+
-    TraceScope scope = tracer.newScope("decryptEDEK");
-    try {
+    try (TraceScope ignored = tracer.newScope("decryptEDEK")) {
-    } finally {
-      scope.close();
-  private static CryptoProtocolVersion getCryptoProtocolVersion
-      (FileEncryptionInfo feInfo) throws IOException {
+  private static CryptoProtocolVersion getCryptoProtocolVersion(
+      FileEncryptionInfo feInfo) throws IOException {
-          + suite.getConfigSuffix() + " prefixed with "
-          + HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX
-          + ". Please see the example configuration "
-          + "hadoop.security.crypto.codec.classes.EXAMPLECIPHERSUITE "
-          + "at core-default.xml for details.");
+              + suite.getConfigSuffix() + " prefixed with "
+              + HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX
+              + ". Please see the example configuration "
+              + "hadoop.security.crypto.codec.classes.EXAMPLECIPHERSUITE "
+              + "at core-default.xml for details.");
-  public DFSInputStream open(String src) 
-      throws IOException, UnresolvedLinkException {
-    return open(src, dfsClientConf.getIoBufferSize(), true, null);
+  public DFSInputStream open(String src) throws IOException {
+    return open(src, dfsClientConf.getIoBufferSize(), true);
-                             FileSystem.Statistics stats)
-      throws IOException, UnresolvedLinkException {
+      FileSystem.Statistics stats) throws IOException {
-  
+
-      throws IOException, UnresolvedLinkException {
+      throws IOException {
-    TraceScope scope = newPathTraceScope("newDFSInputStream", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("newDFSInputStream", src)) {
-    } finally {
-      scope.close();
-  
+
-  public OutputStream create(String src, boolean overwrite) 
+  public OutputStream create(String src, boolean overwrite)
-    
+
-  public OutputStream create(String src, 
-                             boolean overwrite,
-                             Progressable progress) throws IOException {
+  public OutputStream create(String src,
+      boolean overwrite, Progressable progress) throws IOException {
-    
+
-  public OutputStream create(String src, 
-                             boolean overwrite, 
-                             short replication,
-                             long blockSize) throws IOException {
+  public OutputStream create(String src, boolean overwrite, short replication,
+      long blockSize) throws IOException {
-   * Call {@link #create(String, FsPermission, EnumSet, short, long, 
+   * Call {@link #create(String, FsPermission, EnumSet, short, long,
-   * 
+   *
-   * 
+   *
-  public OutputStream create(String src,
-                             boolean overwrite,
-                             short replication,
-                             long blockSize,
-                             Progressable progress,
-                             int buffersize)
+  public OutputStream create(String src, boolean overwrite, short replication,
+      long blockSize, Progressable progress, int buffersize)
-   * Call {@link #create(String, FsPermission, EnumSet, boolean, short, 
+   * Call {@link #create(String, FsPermission, EnumSet, boolean, short,
-  public DFSOutputStream create(String src, 
-                             FsPermission permission,
-                             EnumSet<CreateFlag> flag, 
-                             short replication,
-                             long blockSize,
-                             Progressable progress,
-                             int buffersize,
-                             ChecksumOpt checksumOpt)
+  public DFSOutputStream create(String src, FsPermission permission,
+      EnumSet<CreateFlag> flag, short replication, long blockSize,
+      Progressable progress, int buffersize, ChecksumOpt checksumOpt)
-   * Create a new dfs file with the specified block replication 
+   * Create a new dfs file with the specified block replication
-   * into the file.  
-   * 
+   * into the file.
+   *
-   *          If null, use default permission {@link FsPermission#getFileDefault()}
+   *          If null, use default permission
+   *          {@link FsPermission#getFileDefault()}
-   * @param buffersize underlying buffer size 
+   * @param buffersize underlying buffer size
-   * 
+   *
-  public DFSOutputStream create(String src, 
-                             FsPermission permission,
-                             EnumSet<CreateFlag> flag, 
-                             boolean createParent,
-                             short replication,
-                             long blockSize,
-                             Progressable progress,
-                             int buffersize,
-                             ChecksumOpt checksumOpt) throws IOException {
+  public DFSOutputStream create(String src, FsPermission permission,
+      EnumSet<CreateFlag> flag, boolean createParent, short replication,
+      long blockSize, Progressable progress, int buffersize,
+      ChecksumOpt checksumOpt) throws IOException {
-  public DFSOutputStream create(String src, 
-                             FsPermission permission,
-                             EnumSet<CreateFlag> flag, 
-                             boolean createParent,
-                             short replication,
-                             long blockSize,
-                             Progressable progress,
-                             int buffersize,
-                             ChecksumOpt checksumOpt,
-                             InetSocketAddress[] favoredNodes) throws IOException {
+  public DFSOutputStream create(String src, FsPermission permission,
+      EnumSet<CreateFlag> flag, boolean createParent, short replication,
+      long blockSize, Progressable progress, int buffersize,
+      ChecksumOpt checksumOpt, InetSocketAddress[] favoredNodes)
+      throws IOException {
-        buffersize, dfsClientConf.createChecksum(checksumOpt),
+        dfsClientConf.createChecksum(checksumOpt),
-        favoredNodeStrs[i] = 
-            favoredNodes[i].getHostName() + ":" 
-                         + favoredNodes[i].getPort();
+        favoredNodeStrs[i] =
+            favoredNodes[i].getHostName() + ":" + favoredNodes[i].getPort();
-  
+
-      int buffersize, Progressable progress) throws IOException {
+      Progressable progress) throws IOException {
-          throw new FileNotFoundException("failed to append to non-existent file "
-              + src + " on client " + clientName);
+          throw new FileNotFoundException(
+              "failed to append to non-existent file " + src + " on client "
+                  + clientName);
-      return callAppend(src, buffersize, flag, progress, null);
+      return callAppend(src, flag, progress, null);
-  
+
-  public DFSOutputStream primitiveCreate(String src, 
-                             FsPermission absPermission,
-                             EnumSet<CreateFlag> flag,
-                             boolean createParent,
-                             short replication,
-                             long blockSize,
-                             Progressable progress,
-                             int buffersize,
-                             ChecksumOpt checksumOpt)
-      throws IOException, UnresolvedLinkException {
+  public DFSOutputStream primitiveCreate(String src, FsPermission absPermission,
+      EnumSet<CreateFlag> flag, boolean createParent, short replication,
+      long blockSize, Progressable progress, int buffersize,
+      ChecksumOpt checksumOpt) throws IOException {
-    DFSOutputStream result = primitiveAppend(src, flag, buffersize, progress);
+    DFSOutputStream result = primitiveAppend(src, flag, progress);
-          flag, createParent, replication, blockSize, progress, buffersize,
-          checksum, null);
+          flag, createParent, replication, blockSize, progress, checksum, null);
-  
+
-   * 
-   * @see ClientProtocol#createSymlink(String, String,FsPermission, boolean) 
+   *
+   * @see ClientProtocol#createSymlink(String, String,FsPermission, boolean)
-    TraceScope scope = newPathTraceScope("createSymlink", target);
-    try {
+    try (TraceScope ignored = newPathTraceScope("createSymlink", target)) {
-                                     FileAlreadyExistsException.class, 
-                                     FileNotFoundException.class,
-                                     ParentNotDirectoryException.class,
-                                     NSQuotaExceededException.class, 
-                                     DSQuotaExceededException.class,
-                                     QuotaByStorageTypeExceededException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          FileAlreadyExistsException.class,
+          FileNotFoundException.class,
+          ParentNotDirectoryException.class,
+          NSQuotaExceededException.class,
+          DSQuotaExceededException.class,
+          QuotaByStorageTypeExceededException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-   * 
+   *
-  public String getLinkTarget(String path) throws IOException { 
+  public String getLinkTarget(String path) throws IOException {
-    TraceScope scope = newPathTraceScope("getLinkTarget", path);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getLinkTarget", path)) {
-                                     FileNotFoundException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class);
-  private DFSOutputStream callAppend(String src, int buffersize,
-      EnumSet<CreateFlag> flag, Progressable progress, String[] favoredNodes)
-      throws IOException {
+  private DFSOutputStream callAppend(String src, EnumSet<CreateFlag> flag,
+      Progressable progress, String[] favoredNodes) throws IOException {
-      return DFSOutputStream.newStreamForAppend(this, src, flag, buffersize,
-          progress, blkWithStatus.getLastBlock(),
-          blkWithStatus.getFileStatus(), dfsClientConf.createChecksum(null),
-          favoredNodes);
+      return DFSOutputStream.newStreamForAppend(this, src, flag, progress,
+          blkWithStatus.getLastBlock(), blkWithStatus.getFileStatus(),
+          dfsClientConf.createChecksum(null), favoredNodes);
-                                     FileNotFoundException.class,
-                                     SafeModeException.class,
-                                     DSQuotaExceededException.class,
-                                     QuotaByStorageTypeExceededException.class,
-                                     UnsupportedOperationException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
+          FileNotFoundException.class,
+          SafeModeException.class,
+          DSQuotaExceededException.class,
+          QuotaByStorageTypeExceededException.class,
+          UnsupportedOperationException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-  
+
-   * Append to an existing HDFS file.  
-   * 
+   * Append to an existing HDFS file.
+   *
-   * 
+   *
-   * 
+   *
-    final DFSOutputStream result = callAppend(src, buffersize, flag, progress,
+    final DFSOutputStream result = callAppend(src, flag, progress,
-   * 
+   *
-    TraceScope scope = newPathTraceScope("setReplication", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("setReplication", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     SafeModeException.class,
-                                     DSQuotaExceededException.class,
-                                     QuotaByStorageTypeExceededException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          SafeModeException.class,
+          DSQuotaExceededException.class,
+          QuotaByStorageTypeExceededException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-    TraceScope scope = newPathTraceScope("setStoragePolicy", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("setStoragePolicy", src)) {
-                                    FileNotFoundException.class,
-                                    SafeModeException.class,
-                                    NSQuotaExceededException.class,
-                                    UnresolvedPathException.class,
-                                    SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          SafeModeException.class,
+          NSQuotaExceededException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-    TraceScope scope = newPathTraceScope("getStoragePolicy", path);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getStoragePolicy", path)) {
-                                    FileNotFoundException.class,
-                                    SafeModeException.class,
-                                    UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          SafeModeException.class,
+          UnresolvedPathException.class);
-    TraceScope scope = tracer.newScope("getStoragePolicies");
-    try {
+    try (TraceScope ignored = tracer.newScope("getStoragePolicies")) {
-    } finally {
-      scope.close();
-    TraceScope scope = newSrcDstTraceScope("rename", src, dst);
-    try {
+    try (TraceScope ignored = newSrcDstTraceScope("rename", src, dst)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     NSQuotaExceededException.class,
-                                     DSQuotaExceededException.class,
-                                     QuotaByStorageTypeExceededException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          NSQuotaExceededException.class,
+          DSQuotaExceededException.class,
+          QuotaByStorageTypeExceededException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-    TraceScope scope = tracer.newScope("concat");
-    try {
+    try (TraceScope ignored = tracer.newScope("concat")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-    TraceScope scope = newSrcDstTraceScope("rename2", src, dst);
-    try {
+    try (TraceScope ignored = newSrcDstTraceScope("rename2", src, dst)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     DSQuotaExceededException.class,
-                                     QuotaByStorageTypeExceededException.class,
-                                     FileAlreadyExistsException.class,
-                                     FileNotFoundException.class,
-                                     ParentNotDirectoryException.class,
-                                     SafeModeException.class,
-                                     NSQuotaExceededException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          DSQuotaExceededException.class,
+          QuotaByStorageTypeExceededException.class,
+          FileAlreadyExistsException.class,
+          FileNotFoundException.class,
+          ParentNotDirectoryException.class,
+          SafeModeException.class,
+          NSQuotaExceededException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-    TraceScope scope = newPathTraceScope("truncate", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("truncate", src)) {
-    } finally {
-      scope.close();
-   * See {@link ClientProtocol#delete(String, boolean)}. 
+   * See {@link ClientProtocol#delete(String, boolean)}.
-   * delete contents of the directory if non empty and recursive 
+   * delete contents of the directory if non empty and recursive
-    TraceScope scope = newPathTraceScope("delete", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("delete", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     SafeModeException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          SafeModeException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-  
+
-    throws IOException {
+      throws IOException {
-  
+
-    TraceScope scope = newPathTraceScope("listPaths", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("listPaths", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
-   *         
+   *
-    TraceScope scope = newPathTraceScope("getFileInfo", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getFileInfo", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
-  
+
-    TraceScope scope = newPathTraceScope("isFileClosed", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("isFileClosed", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
-  
+
-   * 
-   * For description of exceptions thrown 
+   *
+   * For description of exceptions thrown
-    TraceScope scope = newPathTraceScope("getFileLinkInfo", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getFileLinkInfo", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          UnresolvedPathException.class);
-   }
-  
+  }
+
-  
+
-    return d == null ? false : d.getEncryptDataTransfer();
+    return d != null && d.getEncryptDataTransfer();
-  
+
-   * @return The checksum 
+   * @return The checksum
-      
+
-      final int timeout = 3000*datanodes.length + dfsClientConf.getSocketTimeout();
+      final int timeout = 3000 * datanodes.length +
+          dfsClientConf.getSocketTimeout();
-        
+
-            BlockOpResponseProto.parseFrom(PBHelperClient.vintPrefixed(in));
+              BlockOpResponseProto.parseFrom(PBHelperClient.vintPrefixed(in));
-          String logInfo = "for block " + block + " from datanode " + datanodes[j];
+          String logInfo = "for block " + block + " from datanode " +
+              datanodes[j];
-            reply.getChecksumResponse();
+              reply.getChecksumResponse();
-          
+
-          
+
-                      "inferring checksum by reading first byte");
+                "inferring checksum by reading first byte");
-                  + "for file {} for block {} from datanode {}. Will retry the "
-                  + "block once.",
+                    + "for file {} for block {} from datanode {}. Will retry "
+                    + "the block once.",
-    final MD5Hash fileMD5 = MD5Hash.digest(md5out.getData()); 
+    final MD5Hash fileMD5 = MD5Hash.digest(md5out.getData());
-      case CRC32:
-        return new MD5MD5CRC32GzipFileChecksum(bytesPerCRC,
-            crcPerBlock, fileMD5);
-      case CRC32C:
-        return new MD5MD5CRC32CastagnoliFileChecksum(bytesPerCRC,
-            crcPerBlock, fileMD5);
-      default:
-        // If there is no block allocated for the file,
-        // return one with the magic entry that matches what previous
-        // hdfs versions return.
-        if (locatedblocks.size() == 0) {
-          return new MD5MD5CRC32GzipFileChecksum(0, 0, fileMD5);
-        }
+    case CRC32:
+      return new MD5MD5CRC32GzipFileChecksum(bytesPerCRC,
+          crcPerBlock, fileMD5);
+    case CRC32C:
+      return new MD5MD5CRC32CastagnoliFileChecksum(bytesPerCRC,
+          crcPerBlock, fileMD5);
+    default:
+      // If there is no block allocated for the file,
+      // return one with the magic entry that matches what previous
+      // hdfs versions return.
+      if (locatedblocks.size() == 0) {
+        return new MD5MD5CRC32GzipFileChecksum(0, 0, fileMD5);
+      }
-        // we should never get here since the validity was checked
-        // when getCrcType() was called above.
-        return null;
+      // we should never get here since the validity was checked
+      // when getCrcType() was called above.
+      return null;
-  
+
-        lb.getBlockToken(), dn);
+          lb.getBlockToken(), dn);
-  
+
-      DataOutputStream out = new DataOutputStream(new BufferedOutputStream(pair.out,
-          smallBufferSize));
+      DataOutputStream out = new DataOutputStream(
+          new BufferedOutputStream(pair.out, smallBufferSize));
-  
+
-      String logInfo = "trying to read " + lb.getBlock() + " from datanode " + dn;
+      String logInfo = "trying to read " + lb.getBlock() + " from datanode " +
+          dn;
-      return PBHelperClient.convert(reply.getReadOpChecksumInfo().getChecksum().getType());
+      return PBHelperClient.convert(
+          reply.getReadOpChecksumInfo().getChecksum().getType());
-   * 
+   *
-    TraceScope scope = newPathTraceScope("setPermission", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("setPermission", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     SafeModeException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          SafeModeException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-   * 
+   *
-    TraceScope scope = newPathTraceScope("setOwner", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("setOwner", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     SafeModeException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);                                   
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          SafeModeException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-    TraceScope scope = tracer.newScope("getStats");
-    try {
+    try (TraceScope ignored = tracer.newScope("getStats")) {
-    } finally {
-      scope.close();
-   * Returns count of blocks with no good replicas left. Normally should be 
+   * Returns count of blocks with no good replicas left. Normally should be
-   */ 
+   */
-  
+
-   */ 
+   */
-  
+
-   * Returns count of blocks with at least one replica marked corrupt. 
+   * Returns count of blocks with at least one replica marked corrupt.
-   */ 
+   */
-  
+
-  public CorruptFileBlocks listCorruptFileBlocks(String path,
-                                                 String cookie)
-        throws IOException {
+  public CorruptFileBlocks listCorruptFileBlocks(String path, String cookie)
+      throws IOException {
-    TraceScope scope = newPathTraceScope("listCorruptFileBlocks", path);
-    try {
+    try (TraceScope ignored
+             = newPathTraceScope("listCorruptFileBlocks", path)) {
-    } finally {
-      scope.close();
-    TraceScope scope = tracer.newScope("datanodeReport");
-    try {
+    try (TraceScope ignored = tracer.newScope("datanodeReport")) {
-    } finally {
-      scope.close();
-    
+
-    TraceScope scope =
-        tracer.newScope("datanodeStorageReport");
-    try {
+    try (TraceScope ignored = tracer.newScope("datanodeStorageReport")) {
-    } finally {
-      scope.close();
-   * 
+   *
-  
+
-   * 
+   *
-  public boolean setSafeMode(SafeModeAction action, boolean isChecked) throws IOException{
-    TraceScope scope =
-        tracer.newScope("setSafeMode");
-    try {
+  public boolean setSafeMode(SafeModeAction action, boolean isChecked)
+      throws IOException{
+    try (TraceScope ignored = tracer.newScope("setSafeMode")) {
-    } finally {
-      scope.close();
- 
+
-   * 
+   *
-    TraceScope scope = tracer.newScope("createSnapshot");
-    try {
+    try (TraceScope ignored = tracer.newScope("createSnapshot")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-    } finally {
-      scope.close();
-  
+
-   * 
-   * @param snapshotRoot The snapshottable directory that the 
+   *
+   * @param snapshotRoot The snapshottable directory that the
-    TraceScope scope = tracer.newScope("deleteSnapshot");
-    try {
+    try (TraceScope ignored = tracer.newScope("deleteSnapshot")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-    } finally {
-      scope.close();
-  
+
-    TraceScope scope = tracer.newScope("renameSnapshot");
-    try {
+    try (TraceScope ignored = tracer.newScope("renameSnapshot")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-    } finally {
-      scope.close();
-  
+
-    TraceScope scope = tracer.newScope("getSnapshottableDirListing");
-    try {
+    try (TraceScope ignored = tracer.newScope("getSnapshottableDirListing")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-    } finally {
-      scope.close();
-   * 
+   *
-    TraceScope scope = tracer.newScope("allowSnapshot");
-    try {
+    try (TraceScope ignored = tracer.newScope("allowSnapshot")) {
-    } finally {
-      scope.close();
-  
+
-   * 
+   *
-    TraceScope scope = tracer.newScope("disallowSnapshot");
-    try {
+    try (TraceScope ignored = tracer.newScope("disallowSnapshot")) {
-    } finally {
-      scope.close();
-  
+
-    TraceScope scope = tracer.newScope("getSnapshotDiffReport");
-    try {
+    try (TraceScope ignored = tracer.newScope("getSnapshotDiffReport")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-    } finally {
-      scope.close();
-    TraceScope scope = tracer.newScope("addCacheDirective");
-    try {
+    try (TraceScope ignored = tracer.newScope("addCacheDirective")) {
-    } finally {
-      scope.close();
-  
+
-    TraceScope scope = tracer.newScope("modifyCacheDirective");
-    try {
+    try (TraceScope ignored = tracer.newScope("modifyCacheDirective")) {
-    } finally {
-      scope.close();
-    TraceScope scope = tracer.newScope("removeCacheDirective");
-    try {
+    try (TraceScope ignored = tracer.newScope("removeCacheDirective")) {
-    } finally {
-      scope.close();
-  
+
-    TraceScope scope = tracer.newScope("addCachePool");
-    try {
+    try (TraceScope ignored = tracer.newScope("addCachePool")) {
-    } finally {
-      scope.close();
-    TraceScope scope = tracer.newScope("modifyCachePool");
-    try {
+    try (TraceScope ignored = tracer.newScope("modifyCachePool")) {
-    } finally {
-      scope.close();
-    TraceScope scope = tracer.newScope("removeCachePool");
-    try {
+    try (TraceScope ignored = tracer.newScope("removeCachePool")) {
-    } finally {
-      scope.close();
-   * 
+   *
-    TraceScope scope = tracer.newScope("saveNamespace");
-    try {
+    try (TraceScope ignored = tracer.newScope("saveNamespace")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-    } finally {
-      scope.close();
-   * @return the txid of the new log segment 
+   * @return the txid of the new log segment
-  long rollEdits() throws AccessControlException, IOException {
+  long rollEdits() throws IOException {
-    TraceScope scope = tracer.newScope("rollEdits");
-    try {
+    try (TraceScope ignored = tracer.newScope("rollEdits")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-    } finally {
-      scope.close();
-  
+
-   * 
+   *
-  boolean restoreFailedStorage(String arg)
-      throws AccessControlException, IOException{
+  boolean restoreFailedStorage(String arg) throws IOException{
-    TraceScope scope = tracer.newScope("restoreFailedStorage");
-    try {
+    try (TraceScope ignored = tracer.newScope("restoreFailedStorage")) {
-    } finally {
-      scope.close();
-   * See {@link ClientProtocol#refreshNodes()} 
+   * See {@link ClientProtocol#refreshNodes()}
-   * 
+   *
-    TraceScope scope = tracer.newScope("refreshNodes");
-    try {
+    try (TraceScope ignored = tracer.newScope("refreshNodes")) {
-    } finally {
-      scope.close();
-   * 
+   *
-    TraceScope scope = tracer.newScope("metaSave");
-    try {
+    try (TraceScope ignored = tracer.newScope("metaSave")) {
-    } finally {
-      scope.close();
-   * See {@link ClientProtocol#setBalancerBandwidth(long)} 
+   * See {@link ClientProtocol#setBalancerBandwidth(long)}
-   * 
+   *
-    TraceScope scope = tracer.newScope("setBalancerBandwidth");
-    try {
+    try (TraceScope ignored = tracer.newScope("setBalancerBandwidth")) {
-    } finally {
-      scope.close();
-    
+
-    TraceScope scope = tracer.newScope("finalizeUpgrade");
-    try {
+    try (TraceScope ignored = tracer.newScope("finalizeUpgrade")) {
-    } finally {
-      scope.close();
-  RollingUpgradeInfo rollingUpgrade(RollingUpgradeAction action) throws IOException {
+  RollingUpgradeInfo rollingUpgrade(RollingUpgradeAction action)
+      throws IOException {
-    TraceScope scope = tracer.newScope("rollingUpgrade");
-    try {
+    try (TraceScope ignored = tracer.newScope("rollingUpgrade")) {
-    } finally {
-      scope.close();
-   * 
+   *
-   * 
+   *
-    throws IOException {
+      throws IOException {
-  public boolean primitiveMkdir(String src, FsPermission absPermission, 
-    boolean createParent)
-    throws IOException {
+  public boolean primitiveMkdir(String src, FsPermission absPermission,
+      boolean createParent) throws IOException {
-    } 
+    }
-    TraceScope scope = tracer.newScope("mkdir");
-    try {
+    try (TraceScope ignored = tracer.newScope("mkdir")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     InvalidPathException.class,
-                                     FileAlreadyExistsException.class,
-                                     FileNotFoundException.class,
-                                     ParentNotDirectoryException.class,
-                                     SafeModeException.class,
-                                     NSQuotaExceededException.class,
-                                     DSQuotaExceededException.class,
-                                     QuotaByStorageTypeExceededException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          InvalidPathException.class,
+          FileAlreadyExistsException.class,
+          FileNotFoundException.class,
+          ParentNotDirectoryException.class,
+          SafeModeException.class,
+          NSQuotaExceededException.class,
+          DSQuotaExceededException.class,
+          QuotaByStorageTypeExceededException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-  
+
-   * 
+   *
-    TraceScope scope = newPathTraceScope("getContentSummary", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getContentSummary", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
-    if ((namespaceQuota <= 0 && namespaceQuota != HdfsConstants.QUOTA_DONT_SET &&
-         namespaceQuota != HdfsConstants.QUOTA_RESET) ||
-        (storagespaceQuota <= 0 && storagespaceQuota != HdfsConstants.QUOTA_DONT_SET &&
-         storagespaceQuota != HdfsConstants.QUOTA_RESET)) {
+    if ((namespaceQuota <= 0 &&
+          namespaceQuota != HdfsConstants.QUOTA_DONT_SET &&
+          namespaceQuota != HdfsConstants.QUOTA_RESET) ||
+        (storagespaceQuota <= 0 &&
+            storagespaceQuota != HdfsConstants.QUOTA_DONT_SET &&
+            storagespaceQuota != HdfsConstants.QUOTA_RESET)) {
-                                         namespaceQuota + " and " +
-                                         storagespaceQuota);
-                                         
+          namespaceQuota + " and " +
+          storagespaceQuota);
+
-    TraceScope scope = newPathTraceScope("setQuota", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("setQuota", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     NSQuotaExceededException.class,
-                                     DSQuotaExceededException.class,
-                                     QuotaByStorageTypeExceededException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          NSQuotaExceededException.class,
+          DSQuotaExceededException.class,
+          QuotaByStorageTypeExceededException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-        quota);
+          quota);
-      throw new IllegalArgumentException("Don't support Quota for storage type : "
-        + type.toString());
+      throw new IllegalArgumentException(
+          "Don't support Quota for storage type : " + type.toString());
-    TraceScope scope = newPathTraceScope("setQuotaByStorageType", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("setQuotaByStorageType", src)) {
-        FileNotFoundException.class,
-        QuotaByStorageTypeExceededException.class,
-        UnresolvedPathException.class,
-        SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          QuotaByStorageTypeExceededException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-   * 
+   *
-    TraceScope scope = newPathTraceScope("setTimes", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("setTimes", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          UnresolvedPathException.class,
+          SnapshotAccessControlException.class);
-    
+
-        + ", ugi=" + ugi + "]"; 
+        + ", ugi=" + ugi + "]";
-    TraceScope scope = newPathTraceScope("modifyAclEntries", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("modifyAclEntries", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     AclException.class,
-                                     FileNotFoundException.class,
-                                     NSQuotaExceededException.class,
-                                     SafeModeException.class,
-                                     SnapshotAccessControlException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          AclException.class,
+          FileNotFoundException.class,
+          NSQuotaExceededException.class,
+          SafeModeException.class,
+          SnapshotAccessControlException.class,
+          UnresolvedPathException.class);
-    TraceScope scope = tracer.newScope("removeAclEntries");
-    try {
+    try (TraceScope ignored = tracer.newScope("removeAclEntries")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     AclException.class,
-                                     FileNotFoundException.class,
-                                     NSQuotaExceededException.class,
-                                     SafeModeException.class,
-                                     SnapshotAccessControlException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          AclException.class,
+          FileNotFoundException.class,
+          NSQuotaExceededException.class,
+          SafeModeException.class,
+          SnapshotAccessControlException.class,
+          UnresolvedPathException.class);
-    TraceScope scope = tracer.newScope("removeDefaultAcl");
-    try {
+    try (TraceScope ignored = tracer.newScope("removeDefaultAcl")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     AclException.class,
-                                     FileNotFoundException.class,
-                                     NSQuotaExceededException.class,
-                                     SafeModeException.class,
-                                     SnapshotAccessControlException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          AclException.class,
+          FileNotFoundException.class,
+          NSQuotaExceededException.class,
+          SafeModeException.class,
+          SnapshotAccessControlException.class,
+          UnresolvedPathException.class);
-    TraceScope scope = tracer.newScope("removeAcl");
-    try {
+    try (TraceScope ignored = tracer.newScope("removeAcl")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     AclException.class,
-                                     FileNotFoundException.class,
-                                     NSQuotaExceededException.class,
-                                     SafeModeException.class,
-                                     SnapshotAccessControlException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          AclException.class,
+          FileNotFoundException.class,
+          NSQuotaExceededException.class,
+          SafeModeException.class,
+          SnapshotAccessControlException.class,
+          UnresolvedPathException.class);
-    TraceScope scope = tracer.newScope("setAcl");
-    try {
+    try (TraceScope ignored = tracer.newScope("setAcl")) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     AclException.class,
-                                     FileNotFoundException.class,
-                                     NSQuotaExceededException.class,
-                                     SafeModeException.class,
-                                     SnapshotAccessControlException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          AclException.class,
+          FileNotFoundException.class,
+          NSQuotaExceededException.class,
+          SafeModeException.class,
+          SnapshotAccessControlException.class,
+          UnresolvedPathException.class);
-    TraceScope scope = newPathTraceScope("getAclStatus", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getAclStatus", src)) {
-    } catch(RemoteException re) {
-      throw re.unwrapRemoteException(AccessControlException.class,
-                                     AclException.class,
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
-    }
-  }
-  
-  public void createEncryptionZone(String src, String keyName)
-    throws IOException {
-    checkOpen();
-    TraceScope scope = newPathTraceScope("createEncryptionZone", src);
-    try {
-      namenode.createEncryptionZone(src, keyName);
-                                     SafeModeException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          AclException.class,
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
-  public EncryptionZone getEZForPath(String src)
-          throws IOException {
+  public void createEncryptionZone(String src, String keyName)
+      throws IOException {
-    TraceScope scope = newPathTraceScope("getEZForPath", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("createEncryptionZone", src)) {
+      namenode.createEncryptionZone(src, keyName);
+    } catch (RemoteException re) {
+      throw re.unwrapRemoteException(AccessControlException.class,
+          SafeModeException.class,
+          UnresolvedPathException.class);
+    }
+  }
+
+  public EncryptionZone getEZForPath(String src) throws IOException {
+    checkOpen();
+    try (TraceScope ignored = newPathTraceScope("getEZForPath", src)) {
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          UnresolvedPathException.class);
-    TraceScope scope = newPathTraceScope("setErasureCodingPolicy", src);
-    try {
+    try (TraceScope ignored =
+             newPathTraceScope("setErasureCodingPolicy", src)) {
-    } finally {
-      scope.close();
-  public void setXAttr(String src, String name, byte[] value, 
+  public void setXAttr(String src, String name, byte[] value,
-    TraceScope scope = newPathTraceScope("setXAttr", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("setXAttr", src)) {
-                                     FileNotFoundException.class,
-                                     NSQuotaExceededException.class,
-                                     SafeModeException.class,
-                                     SnapshotAccessControlException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          NSQuotaExceededException.class,
+          SafeModeException.class,
+          SnapshotAccessControlException.class,
+          UnresolvedPathException.class);
-  
+
-    TraceScope scope = newPathTraceScope("getXAttr", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getXAttr", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
-  
+
-    TraceScope scope = newPathTraceScope("getXAttrs", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getXAttrs", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
-  
-  public Map<String, byte[]> getXAttrs(String src, List<String> names) 
+
+  public Map<String, byte[]> getXAttrs(String src, List<String> names)
-    TraceScope scope = newPathTraceScope("getXAttrs", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("getXAttrs", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
-  
-  public List<String> listXAttrs(String src)
-          throws IOException {
+
+  public List<String> listXAttrs(String src) throws IOException {
-    TraceScope scope = newPathTraceScope("listXAttrs", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("listXAttrs", src)) {
-        XAttrHelper.buildXAttrMap(namenode.listXAttrs(src));
+          XAttrHelper.buildXAttrMap(namenode.listXAttrs(src));
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
-    TraceScope scope = newPathTraceScope("removeXAttr", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("removeXAttr", src)) {
-    } catch(RemoteException re) {
+    } catch (RemoteException re) {
-                                     FileNotFoundException.class,
-                                     NSQuotaExceededException.class,
-                                     SafeModeException.class,
-                                     SnapshotAccessControlException.class,
-                                     UnresolvedPathException.class);
-    } finally {
-      scope.close();
+          FileNotFoundException.class,
+          NSQuotaExceededException.class,
+          SafeModeException.class,
+          SnapshotAccessControlException.class,
+          UnresolvedPathException.class);
-    TraceScope scope = newPathTraceScope("checkAccess", src);
-    try {
+    try (TraceScope ignored = newPathTraceScope("checkAccess", src)) {
-    } finally {
-      scope.close();
-    TraceScope scope = tracer.newScope("getErasureCodingPolicies");
-    try {
+    try (TraceScope ignored = tracer.newScope("getErasureCodingPolicies")) {
-    } finally {
-      scope.close();
-          lastReadTxid);
+        lastReadTxid);
-    final int socketTimeout = dfsClientConf.getSocketTimeout(); 
+    final int socketTimeout = dfsClientConf.getSocketTimeout();
-      NetUtils.connect(sock, addr, getRandomLocalInterfaceAddr(), socketTimeout);
+      NetUtils.connect(sock, addr, getRandomLocalInterfaceAddr(),
+          socketTimeout);
-          private final AtomicInteger threadIndex =
-            new AtomicInteger(0); 
+          private final AtomicInteger threadIndex = new AtomicInteger(0);
-            t.setName("hedgedRead-" +
-              threadIndex.getAndIncrement());
+            t.setName("hedgedRead-" + threadIndex.getAndIncrement());
-
-      @Override
-      public void rejectedExecution(Runnable runnable,
-          ThreadPoolExecutor e) {
-        LOG.info("Execution rejected, Executing in current thread");
-        HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();
-        // will run in the current thread
-        super.rejectedExecution(runnable, e);
-      }
-    });
+          @Override
+          public void rejectedExecution(Runnable runnable,
+              ThreadPoolExecutor e) {
+            LOG.info("Execution rejected, Executing in current thread");
+            HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();
+            // will run in the current thread
+            super.rejectedExecution(runnable, e);
+          }
+        });
-          private final AtomicInteger threadIndex = new AtomicInteger(0);
+              private final AtomicInteger threadIndex = new AtomicInteger(0);
-          @Override
-          public Thread newThread(Runnable r) {
-            Thread t = super.newThread(r);
-            t.setName("stripedRead-" + threadIndex.getAndIncrement());
-            return t;
-          }
-        }, new ThreadPoolExecutor.CallerRunsPolicy() {
-          @Override
-          public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {
-            LOG.info("Execution for striped reading rejected, "
-                + "Executing in current thread");
-            // will run in the current thread
-            super.rejectedExecution(runnable, e);
-          }
-        });
+              @Override
+              public Thread newThread(Runnable r) {
+                Thread t = super.newThread(r);
+                t.setName("stripedRead-" + threadIndex.getAndIncrement());
+                return t;
+              }
+            },
+            new ThreadPoolExecutor.CallerRunsPolicy() {
+              @Override
+              public void rejectedExecution(Runnable runnable,
+                  ThreadPoolExecutor e) {
+                LOG.info("Execution for striped reading rejected, "
+                    + "Executing in current thread");
+                // will run in the current thread
+                super.rejectedExecution(runnable, e);
+              }
+            });
-      HEDGED_READ_THREAD_POOL.getMaximumPoolSize() > 0;
+        HEDGED_READ_THREAD_POOL.getMaximumPoolSize() > 0;
-    try {
-      clientContext.getKeyProviderCache().setKeyProvider(conf, provider);
-    } catch (IOException e) {
-     LOG.error("Could not set KeyProvider !!", e);
-    }
+    clientContext.getKeyProviderCache().setKeyProvider(conf, provider);
-  public ErasureCodingPolicy getErasureCodingPolicy(String src) throws IOException {
+  public ErasureCodingPolicy getErasureCodingPolicy(String src)
+      throws IOException {
-    TraceScope scope = newPathTraceScope("getErasureCodingPolicy", src);
-    try {
+    try (TraceScope ignored =
+             newPathTraceScope("getErasureCodingPolicy", src)) {
-    } finally {
-      scope.close();

MOV26 INS26 INS26 UPD40 INS40 INS40 MOV43 MOV8 UPD66 UPD66 UPD66 MOV65 MOV65 UPD74 UPD66 INS58 INS58 INS58 INS58 UPD66 UPD66 INS58 INS58 INS58 UPD66 UPD66 UPD66 UPD66 INS58 INS58 UPD66 MOV43 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 UPD66 UPD66 INS58 INS58 INS58 INS58 UPD66 INS58 INS27 UPD66 INS58 INS58 INS58 UPD66 UPD66 INS58 INS58 INS58 INS58 INS58 UPD66 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 UPD66 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 INS58 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 INS27 MOV32 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 INS59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 INS42 INS42 INS42 UPD74 MOV14 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV33 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD45 UPD45 DEL42 DEL43 DEL42 DEL43 DEL66 DEL40 DEL40 DEL40 DEL40 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL65 DEL42 DEL43 DEL42 DEL65 DEL42 DEL43 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL33 DEL42 DEL43 DEL42 DEL43 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL66 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL39 DEL42 DEL44 DEL42 DEL42 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL27 DEL9 DEL16 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL66 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL66 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL32 DEL21 DEL8 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8