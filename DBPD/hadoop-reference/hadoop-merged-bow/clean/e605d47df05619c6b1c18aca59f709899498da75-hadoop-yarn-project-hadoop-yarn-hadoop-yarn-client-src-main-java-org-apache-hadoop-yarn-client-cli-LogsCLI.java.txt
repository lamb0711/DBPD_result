YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.

+import java.util.HashSet;
+  private static final String REGEX_OPTION = "regex";
+    boolean useRegex = false;
+      useRegex = commandLine.hasOption(REGEX_OPTION);
-    List<String> logs = new ArrayList<String>();
-    if (fetchAllLogFiles(logFiles)) {
-      logs.add(".*");
+    Set<String> logs = new HashSet<String>();
+    if (fetchAllLogFiles(logFiles, useRegex)) {
+      logs.add("ALL");
-      logs = Arrays.asList(logFiles);
+      logs.addAll(Arrays.asList(logFiles));
-          logCliHelper);
+          logCliHelper, useRegex);
-      return fetchContainerLogs(request, logCliHelper);
+      return fetchContainerLogs(request, logCliHelper, useRegex);
-        resultCode = fetchApplicationLogs(request, logCliHelper);
+        resultCode = fetchApplicationLogs(request, logCliHelper, useRegex);
-  private boolean fetchAllLogFiles(String[] logFiles) {
+  private boolean fetchAllLogFiles(String[] logFiles, boolean useRegex) {
-    if (logs.contains("ALL") || logs.contains(".*")) {
+    if (logs.contains("ALL") || logs.contains("*")||
+        (logs.contains(".*") && useRegex)) {
-      ContainerLogsRequest request, LogCLIHelpers logCliHelper)
-      throws IOException {
+      ContainerLogsRequest request, LogCLIHelpers logCliHelper,
+      boolean useRegex) throws IOException {
-      List<String> matchedFiles = getMatchedLogFiles(request, fileNames);
+      Set<String> matchedFiles = getMatchedLogFiles(request, fileNames,
+          useRegex);
-      ContainerLogsRequest request, LogCLIHelpers logCliHelper)
-      throws IOException {
+      ContainerLogsRequest request, LogCLIHelpers logCliHelper,
+      boolean useRegex) throws IOException {
-        request, logCliHelper);
+        request, logCliHelper, useRegex);
-      ContainerLogsRequest request, LogCLIHelpers logCliHelper)
-      throws IOException {
+      ContainerLogsRequest request, LogCLIHelpers logCliHelper,
+      boolean useRegex) throws IOException {
-        request, logCliHelper);
+        request, logCliHelper, useRegex);
-      LogCLIHelpers logCliHelper) throws Exception {
+      LogCLIHelpers logCliHelper, boolean useRegex) throws Exception {
-        outputAMContainerLogs(amRequest, conf, logCliHelper);
+        outputAMContainerLogs(amRequest, conf, logCliHelper, useRegex);
-              logCliHelper);
+              logCliHelper, useRegex);
-                logCliHelper);
+                logCliHelper, useRegex);
-      Configuration conf, LogCLIHelpers logCliHelper) throws Exception {
+      Configuration conf, LogCLIHelpers logCliHelper, boolean useRegex)
+      throws Exception {
-              logCliHelper);
+              logCliHelper, useRegex);
-              request, logCliHelper);
+              request, logCliHelper, useRegex);
-            request, logCliHelper);
+            request, logCliHelper, useRegex);
-        + "to get specified container log files. Use \"ALL\" to fetch all the "
-        + "log files for the container. It also supports Java Regex.");
+        + "to get exact matched log files. Use \"ALL\" or \"*\"to "
+        + "fetch all the log files for the container. Specific -regex "
+        + "for using java regex to find matched log files.");
+    opts.addOption(REGEX_OPTION, false, "Work with -log_files to find "
+        + "matched files by using java regex.");
+    printOpts.addOption(commandOpts.getOption(REGEX_OPTION));
-      List<String> amContainersList, LogCLIHelpers logCliHelper)
-      throws Exception {
+      List<String> amContainersList, LogCLIHelpers logCliHelper,
+      boolean useRegex) throws Exception {
-        logCliHelper);
+        logCliHelper, useRegex);
-      LogCLIHelpers logCliHelper) throws IOException {
+      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException {
-            request, logCliHelper);
+            request, logCliHelper, useRegex);
-            request, logCliHelper);
+            request, logCliHelper, useRegex);
-            request, logCliHelper);
+            request, logCliHelper, useRegex);
-          logCliHelper);
+          logCliHelper, useRegex);
-          request, logCliHelper);
+          request, logCliHelper, useRegex);
-      LogCLIHelpers logCliHelper) throws IOException, YarnException {
+      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException,
+      YarnException {
-          options, logCliHelper);
+          options, logCliHelper, useRegex);
-            container, logCliHelper);
+            container, logCliHelper, useRegex);
-      ContainerLogsRequest request, LogCLIHelpers logCliHelper)
-      throws IOException {
+      ContainerLogsRequest request, LogCLIHelpers logCliHelper,
+      boolean useRegex) throws IOException {
-      List<String> matchedFiles = new ArrayList<String>();
-      if (!request.getLogTypes().contains(".*")) {
+      Set<String> matchedFiles = new HashSet<String>();
+      if (!request.getLogTypes().contains("ALL")) {
-        matchedFiles = getMatchedLogFiles(request, files);
+        matchedFiles = getMatchedLogFiles(request, files, useRegex);
-  private List<String> getMatchedLogFiles(ContainerLogsRequest options,
-      Collection<String> candidate) throws IOException {
-    List<String> matchedFiles = new ArrayList<String>();
-    List<String> filePattern = options.getLogTypes();
+  private Set<String> getMatchedLogFiles(ContainerLogsRequest options,
+      Collection<String> candidate, boolean useRegex) throws IOException {
+    Set<String> matchedFiles = new HashSet<String>();
+    Set<String> filePattern = options.getLogTypes();
+    if (options.getLogTypes().contains("ALL")) {
+      return new HashSet<String>(candidate);
+    }
-      if (isFileMatching(file, filePattern)) {
-        matchedFiles.add(file);
+      if (useRegex) {
+        if (isFileMatching(file, filePattern)) {
+          matchedFiles.add(file);
+        }
+      } else {
+        if (filePattern.contains(file)) {
+          matchedFiles.add(file);
+        }
-      List<String> logTypes) {
+      Set<String> logTypes) {

INS26 INS40 INS23 INS83 INS83 INS83 INS43 INS59 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS74 INS44 INS42 INS42 INS45 INS60 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS43 INS39 INS42 INS25 UPD74 INS39 INS59 UPD74 MOV74 MOV43 MOV43 MOV43 INS32 INS32 INS42 INS42 UPD74 UPD74 MOV74 INS32 INS8 INS8 UPD43 INS42 INS9 INS21 UPD43 INS42 INS32 INS36 INS42 INS42 INS42 INS9 INS27 INS42 INS42 INS32 INS42 UPD43 UPD43 INS32 INS42 INS45 INS41 INS25 UPD42 INS7 UPD42 UPD74 MOV74 INS42 INS42 INS45 INS27 UPD74 INS42 INS42 MOV43 INS45 INS45 INS42 INS42 INS42 INS74 UPD42 UPD74 MOV74 UPD42 INS42 INS42 INS14 INS42 MOV8 INS8 INS42 INS32 UPD43 UPD45 INS32 INS42 INS42 MOV32 INS42 UPD43 UPD45 UPD45 INS45 INS43 MOV43 UPD43 UPD74 MOV74 INS42 INS25 INS42 INS42 INS42 UPD42 INS42 INS42 MOV32 UPD42 INS42 MOV32 INS42 INS42 INS42 INS42 INS74 UPD45 UPD42 UPD43 INS32 INS8 INS42 INS42 INS42 INS42 INS43 MOV43 UPD42 INS42 INS42 INS42 INS21 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL7 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74