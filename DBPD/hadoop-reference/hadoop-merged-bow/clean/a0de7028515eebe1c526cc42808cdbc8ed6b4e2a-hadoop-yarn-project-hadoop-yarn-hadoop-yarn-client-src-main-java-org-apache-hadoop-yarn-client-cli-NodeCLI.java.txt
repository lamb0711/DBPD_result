YARN-4290. Add -showDetails option to YARN Nodes CLI to print all nodes reports information. (Sunil G via wangda)

+  private static final String NODE_SHOW_DETAILS = "showDetails";
-        "based on node state, all -all to list all nodes.");
+        "based on node state, all -all to list all nodes, " +
+        "-showDetails to display more details about each node.");
+    Option showDetailsOpt = new Option(NODE_SHOW_DETAILS, false,
+        "Works with -list to show more details about each node.");
+    opts.addOption(showDetailsOpt);
-      listClusterNodes(nodeStates);
+
+      // List all node details with more information.
+      if (cliParser.hasOption(NODE_SHOW_DETAILS)) {
+        listDetailedClusterNodes(nodeStates);
+      } else {
+        listClusterNodes(nodeStates);
+      }
+   * Lists the nodes which are matching the given node states along with
+   * detailed node informations such as resource usage etc.
+   *
+   * @param nodeStates
+   * @throws YarnException
+   * @throws IOException
+   */
+  private void listDetailedClusterNodes(Set<NodeState> nodeStates)
+      throws YarnException, IOException {
+    PrintWriter writer = new PrintWriter(new OutputStreamWriter(sysout,
+        Charset.forName("UTF-8")));
+    List<NodeReport> nodesReport = client.getNodeReports(nodeStates
+        .toArray(new NodeState[0]));
+    writer.println("Total Nodes:" + nodesReport.size());
+    writer.printf(NODES_PATTERN, "Node-Id", "Node-State", "Node-Http-Address",
+        "Number-of-Running-Containers");
+    for (NodeReport nodeReport : nodesReport) {
+      writer.printf(NODES_PATTERN, nodeReport.getNodeId(),
+          nodeReport.getNodeState(), nodeReport.getHttpAddress(),
+          nodeReport.getNumContainers());
+      writer.println("Detailed Node Information :");
+      writer.print("\tConfigured Resources : ");
+      writer.println(nodeReport.getCapability());
+      writer.print("\tAllocated Resources : ");
+      if (nodeReport.getUsed() != null) {
+        writer.print(nodeReport.getUsed());
+      }
+      writer.println();
+
+      writer.print("\tResource Utilization by Node : ");
+      if (nodeReport.getNodeUtilization() != null) {
+        writer.print("PMem:"
+            + nodeReport.getNodeUtilization().getPhysicalMemory()
+            + " MB, VMem:" + nodeReport.getNodeUtilization().getVirtualMemory()
+            + " MB, VCores:" + nodeReport.getNodeUtilization().getCPU());
+      }
+      writer.println();
+
+      writer.print("\tResource Utilization by Containers : ");
+      if (nodeReport.getAggregatedContainersUtilization() != null) {
+        writer.print("PMem:"
+            + nodeReport.getAggregatedContainersUtilization()
+                .getPhysicalMemory()
+            + " MB, VMem:"
+            + nodeReport.getAggregatedContainersUtilization()
+                .getVirtualMemory() + " MB, VCores:"
+            + nodeReport.getAggregatedContainersUtilization().getCPU());
+      }
+      writer.println();
+
+      writer.print("\tNode-Labels : ");
+      // Create a List for node labels since we need it get sorted
+      List<String> nodeLabelsList = new ArrayList<String>(
+          nodeReport.getNodeLabels());
+      Collections.sort(nodeLabelsList);
+      writer.println(StringUtils.join(nodeLabelsList.iterator(), ','));
+    }
+    writer.flush();
+  }
+
+  /**

INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS42 INS42 INS45 INS60 INS21 INS65 INS65 INS65 INS65 INS74 INS42 INS42 INS42 INS60 INS60 INS21 INS21 INS70 INS21 INS43 INS59 INS32 INS66 INS66 INS42 INS42 INS42 INS43 INS43 INS43 INS59 INS74 INS59 INS32 INS32 INS44 INS42 INS8 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS45 INS45 INS45 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS25 INS21 INS21 INS25 INS21 INS21 INS60 INS21 INS21 INS42 INS42 UPD45 INS45 INS43 INS42 INS9 INS45 INS25 INS43 INS14 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS27 INS8 INS32 INS32 INS27 INS8 INS32 INS32 INS27 INS8 INS32 INS32 INS74 INS59 INS32 INS32 INS42 INS32 INS8 INS8 INS42 INS43 INS42 INS32 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS45 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS45 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS45 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 MOV21 INS42 INS42 INS42 INS45 INS5 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS32 INS13 INS32 INS43 INS85 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42