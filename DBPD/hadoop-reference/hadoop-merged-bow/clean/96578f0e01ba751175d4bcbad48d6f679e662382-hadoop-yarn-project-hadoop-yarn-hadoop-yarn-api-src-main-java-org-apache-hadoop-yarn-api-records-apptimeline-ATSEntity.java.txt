YARN-1634. Added a testable in-memory implementation of ApplicationTimelineStore. Contributed by Zhijie Shen.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564583 13f79535-47bb-0310-9956-ffa450edef68

-public class ATSEntity {
+public class ATSEntity implements Comparable<ATSEntity> {
+  @Override
+  public int hashCode() {
+    // generated by eclipse
+    final int prime = 31;
+    int result = 1;
+    result = prime * result + ((entityId == null) ? 0 : entityId.hashCode());
+    result =
+        prime * result + ((entityType == null) ? 0 : entityType.hashCode());
+    result = prime * result + ((events == null) ? 0 : events.hashCode());
+    result = prime * result + ((otherInfo == null) ? 0 : otherInfo.hashCode());
+    result =
+        prime * result
+            + ((primaryFilters == null) ? 0 : primaryFilters.hashCode());
+    result =
+        prime * result
+            + ((relatedEntities == null) ? 0 : relatedEntities.hashCode());
+    result = prime * result + ((startTime == null) ? 0 : startTime.hashCode());
+    return result;
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    // generated by eclipse
+    if (this == obj)
+      return true;
+    if (obj == null)
+      return false;
+    if (getClass() != obj.getClass())
+      return false;
+    ATSEntity other = (ATSEntity) obj;
+    if (entityId == null) {
+      if (other.entityId != null)
+        return false;
+    } else if (!entityId.equals(other.entityId))
+      return false;
+    if (entityType == null) {
+      if (other.entityType != null)
+        return false;
+    } else if (!entityType.equals(other.entityType))
+      return false;
+    if (events == null) {
+      if (other.events != null)
+        return false;
+    } else if (!events.equals(other.events))
+      return false;
+    if (otherInfo == null) {
+      if (other.otherInfo != null)
+        return false;
+    } else if (!otherInfo.equals(other.otherInfo))
+      return false;
+    if (primaryFilters == null) {
+      if (other.primaryFilters != null)
+        return false;
+    } else if (!primaryFilters.equals(other.primaryFilters))
+      return false;
+    if (relatedEntities == null) {
+      if (other.relatedEntities != null)
+        return false;
+    } else if (!relatedEntities.equals(other.relatedEntities))
+      return false;
+    if (startTime == null) {
+      if (other.startTime != null)
+        return false;
+    } else if (!startTime.equals(other.startTime))
+      return false;
+    return true;
+  }
+
+  @Override
+  public int compareTo(ATSEntity other) {
+    int comparison = entityType.compareTo(other.entityType);
+    if (comparison == 0) {
+      long thisStartTime =
+          startTime == null ? Long.MIN_VALUE : startTime;
+      long otherStartTime =
+          other.startTime == null ? Long.MIN_VALUE : other.startTime;
+      if (thisStartTime > otherStartTime) {
+        return -1;
+      } else if (thisStartTime < otherStartTime) {
+        return 1;
+      } else {
+        return entityId.compareTo(other.entityId);
+      }
+    } else {
+      return comparison;
+    }
+  }
+

INS74 INS31 INS31 INS31 INS43 INS43 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS25 INS25 INS25 INS60 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS41 INS42 INS43 INS42 INS60 INS25 INS83 INS39 INS59 INS39 INS59 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS27 INS41 INS27 INS41 INS27 INS41 INS43 INS59 INS27 INS8 INS25 INS27 INS8 INS25 INS27 INS8 INS25 INS27 INS8 INS25 INS27 INS8 INS25 INS27 INS8 INS25 INS27 INS8 INS25 INS9 INS42 INS39 INS59 INS27 INS8 INS8 INS42 INS34 INS42 INS34 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS52 INS42 INS9 INS42 INS33 INS9 INS32 INS32 INS9 INS42 INS42 INS11 INS42 INS33 INS25 INS38 INS41 INS42 INS33 INS25 INS38 INS41 INS42 INS33 INS25 INS38 INS41 INS42 INS33 INS25 INS38 INS41 INS42 INS33 INS25 INS38 INS41 INS42 INS33 INS25 INS38 INS41 INS42 INS33 INS25 INS38 INS41 INS42 INS32 INS42 INS34 INS60 INS60 INS25 INS41 INS27 INS36 INS27 INS36 INS27 INS36 INS27 INS36 INS27 INS36 INS27 INS36 INS27 INS36 INS42 INS42 INS42 INS43 INS42 INS27 INS41 INS32 INS9 INS27 INS41 INS32 INS9 INS27 INS41 INS32 INS9 INS27 INS41 INS32 INS9 INS27 INS41 INS32 INS9 INS27 INS41 INS32 INS9 INS27 INS41 INS32 INS9 INS42 INS42 INS40 INS39 INS59 INS39 INS59 INS27 INS8 INS25 INS42 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS40 INS33 INS9 INS42 INS42 INS40 INS40 INS33 INS9 INS42 INS42 INS40 INS40 INS33 INS9 INS42 INS42 INS40 INS40 INS33 INS9 INS42 INS42 INS40 INS40 INS33 INS9 INS42 INS42 INS40 INS40 INS33 INS9 INS42 INS42 INS40 INS40 INS33 INS9 INS42 INS42 INS40 INS42 INS16 INS42 INS16 INS42 INS42 INS41 INS27 INS8 INS8 INS36 INS34 INS32 INS36 INS34 INS32 INS36 INS34 INS32 INS36 INS34 INS32 INS36 INS34 INS32 INS36 INS34 INS32 INS36 INS34 INS32 INS27 INS40 INS42 INS27 INS40 INS40 INS38 INS42 INS42 INS41 INS41 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS33 INS40 INS33 INS34 INS34 INS32 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS42 INS40