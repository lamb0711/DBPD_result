Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import com.google.common.base.Supplier;
+  private static final Log LOG = LogFactory.getLog(AMRMClient.class);
+  /**
+   * Wait for <code>check</code> to return true for each 1000 ms.
+   * See also {@link #waitFor(com.google.common.base.Supplier, int)}
+   * and {@link #waitFor(com.google.common.base.Supplier, int, int)}
+   * @param check
+   */
+  public void waitFor(Supplier<Boolean> check) throws InterruptedException {
+    waitFor(check, 1000);
+  }
+
+  /**
+   * Wait for <code>check</code> to return true for each
+   * <code>checkEveryMillis</code> ms.
+   * See also {@link #waitFor(com.google.common.base.Supplier, int, int)}
+   * @param check user defined checker
+   * @param checkEveryMillis interval to call <code>check</code>
+   */
+  public void waitFor(Supplier<Boolean> check, int checkEveryMillis)
+      throws InterruptedException {
+    waitFor(check, checkEveryMillis, 1);
+  }
+
+  /**
+   * Wait for <code>check</code> to return true for each
+   * <code>checkEveryMillis</code> ms. In the main loop, this method will log
+   * the message "waiting in main loop" for each <code>logInterval</code> times
+   * iteration to confirm the thread is alive.
+   * @param check user defined checker
+   * @param checkEveryMillis interval to call <code>check</code>
+   * @param logInterval interval to log for each
+   */
+  public void waitFor(Supplier<Boolean> check, int checkEveryMillis,
+      int logInterval) throws InterruptedException {
+    Preconditions.checkNotNull(check, "check should not be null");
+    Preconditions.checkArgument(checkEveryMillis >= 0,
+        "checkEveryMillis should be positive value");
+    Preconditions.checkArgument(logInterval >= 0,
+        "logInterval should be positive value");
+
+    int loggingCounter = logInterval;
+    do {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Check the condition for main loop.");
+      }
+
+      boolean result = check.get();
+      if (result) {
+        LOG.info("Exits the main loop.");
+        return;
+      }
+      if (--loggingCounter <= 0) {
+        LOG.info("Waiting in main loop.");
+        loggingCounter = logInterval;
+      }
+
+      Thread.sleep(checkEveryMillis);
+    } while (true);
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS32 INS65 INS65 INS74 INS42 INS42 INS21 INS65 INS65 INS65 INS74 INS42 INS39 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS74 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS21 INS21 INS60 INS19 INS42 INS42 INS57 INS66 INS66 INS65 INS66 INS65 INS42 INS43 INS43 INS32 INS66 INS66 INS66 INS65 INS42 INS66 INS42 INS66 INS43 INS43 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS32 INS32 INS32 INS39 INS59 INS8 INS9 INS43 INS68 INS68 INS42 INS42 INS42 INS42 INS34 INS68 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS25 INS60 INS25 INS25 INS21 INS42 INS42 INS69 INS69 INS42 INS69 INS69 INS69 INS42 INS69 INS69 INS69 INS42 INS34 INS42 INS34 INS32 INS8 INS39 INS59 INS42 INS8 INS27 INS8 INS32 INS43 INS39 INS43 INS39 INS39 INS43 INS39 INS39 INS42 INS42 INS21 INS42 INS32 INS21 INS41 INS38 INS34 INS21 INS21 INS42 INS42 INS42 INS40 INS40 INS40 INS32 INS42 INS42 INS32 INS42 INS32 INS7 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42