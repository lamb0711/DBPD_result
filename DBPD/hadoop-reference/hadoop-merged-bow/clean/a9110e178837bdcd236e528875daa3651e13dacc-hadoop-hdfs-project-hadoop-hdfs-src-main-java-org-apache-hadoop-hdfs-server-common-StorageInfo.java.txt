Merge r1555021 through r1561510 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1561516 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import java.util.Properties;
+
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+import org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory;
+  
+  protected static final String STORAGE_FILE_VERSION    = "VERSION";
+  
+  public static int getNsIdFromColonSeparatedString(String in) {
+    return Integer.parseInt(in.split(":")[1]);
+  }
+  
+  public static String getClusterIdFromColonSeparatedString(String in) {
+    return in.split(":")[3];
+  }
+  
+  /**
+   * Read properties from the VERSION file in the given storage directory.
+   */
+  public void readProperties(StorageDirectory sd) throws IOException {
+    Properties props = readPropertiesFile(sd.getVersionFile());
+    setFieldsFromProperties(props, sd);
+  }
+  
+  /**
+   * Read properties from the the previous/VERSION file in the given storage directory.
+   */
+  public void readPreviousVersionProperties(StorageDirectory sd)
+      throws IOException {
+    Properties props = readPropertiesFile(sd.getPreviousVersionFile());
+    setFieldsFromProperties(props, sd);
+  }
+  
+  /**
+   * Get common storage fields.
+   * Should be overloaded if additional fields need to be get.
+   * 
+   * @param props
+   * @throws IOException
+   */
+  protected void setFieldsFromProperties(
+      Properties props, StorageDirectory sd) throws IOException {
+    setLayoutVersion(props, sd);
+    setNamespaceID(props, sd);
+    setcTime(props, sd);
+    setClusterId(props, layoutVersion, sd);
+  }
+  
+  /** Validate and set ctime from {@link Properties}*/
+  protected void setcTime(Properties props, StorageDirectory sd)
+      throws InconsistentFSStateException {
+    cTime = Long.parseLong(getProperty(props, sd, "cTime"));
+  }
+
+  /** Validate and set clusterId from {@link Properties}*/
+  protected void setClusterId(Properties props, int layoutVersion,
+      StorageDirectory sd) throws InconsistentFSStateException {
+    // Set cluster ID in version that supports federation
+    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {
+      String cid = getProperty(props, sd, "clusterID");
+      if (!(clusterID.equals("") || cid.equals("") || clusterID.equals(cid))) {
+        throw new InconsistentFSStateException(sd.getRoot(),
+            "cluster Id is incompatible with others.");
+      }
+      clusterID = cid;
+    }
+  }
+  
+  /** Validate and set layout version from {@link Properties}*/
+  protected void setLayoutVersion(Properties props, StorageDirectory sd)
+      throws IncorrectVersionException, InconsistentFSStateException {
+    int lv = Integer.parseInt(getProperty(props, sd, "layoutVersion"));
+    if (lv < HdfsConstants.LAYOUT_VERSION) { // future version
+      throw new IncorrectVersionException(lv, "storage directory "
+          + sd.root.getAbsolutePath());
+    }
+    layoutVersion = lv;
+  }
+  
+  /** Validate and set namespaceID version from {@link Properties}*/
+  protected void setNamespaceID(Properties props, StorageDirectory sd)
+      throws InconsistentFSStateException {
+    int nsId = Integer.parseInt(getProperty(props, sd, "namespaceID"));
+    if (namespaceID != 0 && nsId != 0 && namespaceID != nsId) {
+      throw new InconsistentFSStateException(sd.root,
+          "namespaceID is incompatible with others.");
+    }
+    namespaceID = nsId;
+  }
+  
+  static String getProperty(Properties props, StorageDirectory sd,
+      String name) throws InconsistentFSStateException {
+    String property = props.getProperty(name);
+    if (property == null) {
+      throw new InconsistentFSStateException(sd.root, "file "
+          + STORAGE_FILE_VERSION + " has " + name + " missing.");
+    }
+    return property;
+  }
+  
+  public static Properties readPropertiesFile(File from) throws IOException {
+    RandomAccessFile file = new RandomAccessFile(from, "rws");
+    FileInputStream in = null;
+    Properties props = new Properties();
+    try {
+      in = new FileInputStream(file.getFD());
+      file.seek(0);
+      props.load(in);
+    } finally {
+      if (in != null) {
+        in.close();
+      }
+      file.close();
+    }
+    return props;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS45 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS65 INS43 INS42 INS42 INS60 INS21 INS65 INS43 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS65 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS25 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS21 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS54 INS41 INS42 INS32 INS42 INS2 INS66 INS42 INS43 INS59 INS32 INS66 INS42 INS43 INS59 INS32 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS66 INS65 INS66 INS42 INS42 INS7 INS66 INS65 INS66 INS42 INS42 INS32 INS8 INS66 INS65 INS66 INS42 INS42 INS39 INS59 INS27 INS8 INS7 INS66 INS65 INS66 INS42 INS42 INS39 INS59 INS27 INS8 INS7 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS8 INS42 INS42 INS42 INS2 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS60 INS25 INS21 INS42 INS42 INS32 INS42 INS40 INS53 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS14 INS21 INS21 INS21 INS25 INS21 INS32 INS34 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS7 INS42 INS42 INS32 INS14 INS42 INS42 INS32 INS27 INS27 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS43 INS42 INS45 INS43 INS7 INS32 INS32 INS27 INS8 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS36 INS53 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS34 INS42 INS34 INS43 INS40 INS45 INS43 INS40 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS27 INS14 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS43 INS32 INS32 INS32 INS32 INS32 INS43 INS32 INS45 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42