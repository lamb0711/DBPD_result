Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

-/**
+  
+  /**
-      Path tmpDir = new Path(outputPath, FileOutputCommitter.TEMP_DIR_NAME);
+      Path tmpDir = 
+          new Path(outputPath, getJobAttemptBaseDirName(context) + 
+              Path.SEPARATOR + FileOutputCommitter.TEMP_DIR_NAME);
-    // delete the _temporary folder in the output folder
-    cleanupJob(context);
-    // check if the output-dir marking is required
-    if (shouldMarkOutputDir(context.getJobConf())) {
-      // create a _success file in the output folder
-      markOutputDirSuccessful(context);
+    //delete the task temp directory from the current jobtempdir
+    JobConf conf = context.getJobConf();
+    Path outputPath = FileOutputFormat.getOutputPath(conf);
+    if (outputPath != null) {
+      FileSystem outputFileSystem = outputPath.getFileSystem(conf);
+      Path tmpDir = new Path(outputPath, getJobAttemptBaseDirName(context) +
+          Path.SEPARATOR + FileOutputCommitter.TEMP_DIR_NAME);
+      FileSystem fileSys = tmpDir.getFileSystem(context.getConfiguration());
+      if (fileSys.exists(tmpDir)) {
+        fileSys.delete(tmpDir, true);
+      } else {
+        LOG.warn("Task temp dir could not be deleted " + tmpDir);
+      }
+
+      //move the job output to final place
+      Path jobOutputPath = 
+          new Path(outputPath, getJobAttemptBaseDirName(context));
+      moveJobOutputs(outputFileSystem, 
+          jobOutputPath, outputPath, jobOutputPath);
+
+      // delete the _temporary folder in the output folder
+      cleanupJob(context);
+      // check if the output-dir marking is required
+      if (shouldMarkOutputDir(context.getJobConf())) {
+        // create a _success file in the output folder
+        markOutputDirSuccessful(context);
+      }
+  private void moveJobOutputs(FileSystem fs, final Path origJobOutputPath,
+      Path finalOutputDir, Path jobOutput) throws IOException {
+    LOG.debug("Told to move job output from " + jobOutput
+        + " to " + finalOutputDir + 
+        " and orig job output path is " + origJobOutputPath);  
+    if (fs.isFile(jobOutput)) {
+      Path finalOutputPath = 
+          getFinalPath(fs, finalOutputDir, jobOutput, origJobOutputPath);
+      if (!fs.rename(jobOutput, finalOutputPath)) {
+        if (!fs.delete(finalOutputPath, true)) {
+          throw new IOException("Failed to delete earlier output of job");
+        }
+        if (!fs.rename(jobOutput, finalOutputPath)) {
+          throw new IOException("Failed to save output of job");
+        }
+      }
+      LOG.debug("Moved job output file from " + jobOutput + " to " + 
+          finalOutputPath);
+    } else if (fs.getFileStatus(jobOutput).isDirectory()) {
+      LOG.debug("Job output file " + jobOutput + " is a dir");      
+      FileStatus[] paths = fs.listStatus(jobOutput);
+      Path finalOutputPath = 
+          getFinalPath(fs, finalOutputDir, jobOutput, origJobOutputPath);
+      fs.mkdirs(finalOutputPath);
+      LOG.debug("Creating dirs along job output path " + finalOutputPath);
+      if (paths != null) {
+        for (FileStatus path : paths) {
+          moveJobOutputs(fs, origJobOutputPath, finalOutputDir, path.getPath());
+        }
+      }
+    }
+  }
+  
-        Path jobOutputPath = taskOutputPath.getParent().getParent();
-        // Move the task outputs to their final place
-        moveTaskOutputs(context, fs, jobOutputPath, taskOutputPath);
+        // Move the task outputs to the current job attempt output dir
+        JobConf conf = context.getJobConf();
+        Path outputPath = FileOutputFormat.getOutputPath(conf);
+        FileSystem outputFileSystem = outputPath.getFileSystem(conf);
+        Path jobOutputPath = new Path(outputPath, getJobTempDirName(context));
+        moveTaskOutputs(context, outputFileSystem, jobOutputPath, 
+            taskOutputPath);
+
+    LOG.debug("Told to move taskoutput from " + taskOutput
+        + " to " + jobOutputDir);    
-      Path finalOutputPath = getFinalPath(jobOutputDir, taskOutput, 
+      Path finalOutputPath = getFinalPath(fs, jobOutputDir, taskOutput, 
+      LOG.debug("Taskoutput " + taskOutput + " is a dir");
-      Path finalOutputPath = getFinalPath(jobOutputDir, taskOutput, 
+      Path finalOutputPath = getFinalPath(fs, jobOutputDir, taskOutput, 
+      LOG.debug("Creating dirs along path " + finalOutputPath);
-  private Path getFinalPath(Path jobOutputDir, Path taskOutput, 
+  @SuppressWarnings("deprecation")
+  private Path getFinalPath(FileSystem fs, Path jobOutputDir, Path taskOutput, 
-    URI taskOutputUri = taskOutput.toUri();
-    URI relativePath = taskOutputPath.toUri().relativize(taskOutputUri);
-    if (taskOutputUri == relativePath) {//taskOutputPath is not a parent of taskOutput
+    URI taskOutputUri = taskOutput.makeQualified(fs).toUri();
+    URI taskOutputPathUri = taskOutputPath.makeQualified(fs).toUri();
+    URI relativePath = taskOutputPathUri.relativize(taskOutputUri);
+    if (taskOutputUri == relativePath) { 
+      //taskOutputPath is not a parent of taskOutput
-          taskOutputPath + " child = " + taskOutput);
+          taskOutputPathUri + " child = " + taskOutputUri);
-  Path getTempTaskOutputPath(TaskAttemptContext taskContext) throws IOException {
+  Path getTempTaskOutputPath(TaskAttemptContext taskContext) 
+      throws IOException {
+  
+  @Override
+  public boolean isRecoverySupported() {
+    return true;
+  }
+  
+  @Override
+  public void recoverTask(TaskAttemptContext context)
+      throws IOException {
+    Path outputPath = FileOutputFormat.getOutputPath(context.getJobConf());
+    context.progress();
+    Path jobOutputPath = new Path(outputPath, getJobTempDirName(context));
+    int previousAttempt =         
+        context.getConfiguration().getInt(
+            MRConstants.APPLICATION_ATTEMPT_ID, 0) - 1;
+    if (previousAttempt < 0) {
+      LOG.warn("Cannot recover task output for first attempt...");
+      return;
+    }
+
+    FileSystem outputFileSystem = 
+        outputPath.getFileSystem(context.getJobConf());
+    Path pathToRecover = 
+        new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));
+    if (outputFileSystem.exists(pathToRecover)) {
+      // Move the task outputs to their final place
+      LOG.debug("Trying to recover task from " + pathToRecover
+          + " into " + jobOutputPath);
+      moveJobOutputs(outputFileSystem, 
+          pathToRecover, jobOutputPath, pathToRecover);
+      LOG.info("Saved output of job to " + jobOutputPath);
+    }
+  }
+
+  protected static String getJobAttemptBaseDirName(JobContext context) {
+    int appAttemptId = 
+        context.getJobConf().getInt(
+            MRConstants.APPLICATION_ATTEMPT_ID, 0);
+    return getJobAttemptBaseDirName(appAttemptId);
+  }
+
+  protected static String getJobTempDirName(TaskAttemptContext context) {
+    int appAttemptId = 
+        context.getJobConf().getInt(
+            MRConstants.APPLICATION_ATTEMPT_ID, 0);
+    return getJobAttemptBaseDirName(appAttemptId);
+  }
+
+  protected static String getJobAttemptBaseDirName(int appAttemptId) {
+    return FileOutputCommitter.TEMP_DIR_NAME + Path.SEPARATOR + 
+      + appAttemptId;
+  }
+
+  protected static String getTaskAttemptBaseDirName(
+      TaskAttemptContext context) {
+    return getJobTempDirName(context) + Path.SEPARATOR + 
+      FileOutputCommitter.TEMP_DIR_NAME + Path.SEPARATOR +
+      "_" + context.getTaskAttemptID().toString();
+  }

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS79 INS44 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS60 INS60 INS25 INS43 INS42 INS83 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS25 INS21 INS42 INS45 INS43 INS42 INS60 INS42 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS60 INS25 INS60 INS60 INS25 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS42 INS60 INS41 INS42 INS39 INS42 INS41 INS42 INS43 INS42 INS41 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS25 INS32 INS42 MOV43 MOV43 INS59 INS43 INS9 INS42 INS43 INS59 INS32 INS43 INS59 INS39 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS39 INS59 INS32 INS42 INS39 INS59 INS32 INS27 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS60 INS25 INS60 INS21 MOV21 MOV25 INS42 INS42 INS27 INS42 INS42 INS42 INS60 INS25 INS21 INS32 INS8 INS42 INS42 INS27 INS60 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS27 INS42 INS34 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS40 INS38 INS32 INS40 INS40 INS40 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS32 INS45 INS42 INS45 INS42 INS45 INS42 MOV43 INS59 INS38 INS8 INS32 INS32 INS42 INS21 INS60 INS60 INS21 INS21 INS25 INS45 INS42 INS45 INS42 INS43 INS59 INS21 MOV60 INS21 INS32 INS32 INS42 UPD42 MOV42 INS42 INS42 INS32 INS43 INS42 INS32 INS32 INS34 INS32 INS42 INS42 INS32 INS43 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS40 INS34 INS32 INS42 INS40 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS25 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS5 INS59 MOV43 INS59 INS32 INS32 INS27 INS8 INS60 INS60 INS60 INS42 INS42 INS32 INS32 INS43 INS32 MOV42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS34 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS27 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS38 INS8 INS45 INS42 INS45 INS42 INS42 INS42 INS27 INS43 INS85 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS33 INS70 INS43 INS59 INS43 INS43 INS59 MOV43 INS59 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS27 INS42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 UPD42 UPD42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS40 INS40 INS42 INS32 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS53 INS32 INS53 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS44 INS42 INS8 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS32 INS42 INS14 UPD42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS9 INS14 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS43 INS42 INS32 INS43 INS45 MOV43 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL40 DEL8 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32