Merging r1466653 through r1467712 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1467713 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.mapreduce.OutputCommitter;
+import org.apache.hadoop.mapreduce.jobhistory.JobHistoryParser.TaskAttemptInfo;
+import org.apache.hadoop.mapreduce.v2.app.job.event.TaskAttemptRecoverEvent;
+import org.apache.hadoop.yarn.api.records.Container;
+         EnumSet.of(TaskAttemptStateInternal.FAILED,
+             TaskAttemptStateInternal.KILLED,
+             TaskAttemptStateInternal.SUCCEEDED),
+         TaskAttemptEventType.TA_RECOVER, new RecoverTransition())
+     .addTransition(TaskAttemptStateInternal.NEW,
-        .newContainerLaunchContext(null, conf
-            .get(MRJobConfig.USER_NAME), null, localResources,
+        .newContainerLaunchContext(conf
+            .get(MRJobConfig.USER_NAME), localResources,
-      ContainerId containerID, Configuration conf,
-      Token<JobTokenIdentifier> jobToken, Task remoteTask,
+      Configuration conf, Token<JobTokenIdentifier> jobToken, Task remoteTask,
-      Resource assignedCapability, WrappedJvmID jvmID,
+      WrappedJvmID jvmID,
-        containerID, commonContainerSpec.getUser(), assignedCapability,
+        commonContainerSpec.getUser(),
+  @SuppressWarnings("unchecked")
+  public TaskAttemptStateInternal recover(TaskAttemptInfo taInfo,
+      OutputCommitter committer, boolean recoverOutput) {
+    containerID = taInfo.getContainerId();
+    containerNodeId = ConverterUtils.toNodeId(taInfo.getHostname() + ":"
+        + taInfo.getPort());
+    containerMgrAddress = StringInterner.weakIntern(
+        containerNodeId.toString());
+    nodeHttpAddress = StringInterner.weakIntern(taInfo.getHostname() + ":"
+        + taInfo.getHttpPort());
+    computeRackAndLocality();
+    launchTime = taInfo.getStartTime();
+    finishTime = (taInfo.getFinishTime() != -1) ?
+        taInfo.getFinishTime() : clock.getTime();
+    shufflePort = taInfo.getShufflePort();
+    trackerName = taInfo.getHostname();
+    httpPort = taInfo.getHttpPort();
+    sendLaunchedEvents();
+
+    reportedStatus.id = attemptId;
+    reportedStatus.progress = 1.0f;
+    reportedStatus.counters = taInfo.getCounters();
+    reportedStatus.stateString = taInfo.getState();
+    reportedStatus.phase = Phase.CLEANUP;
+    reportedStatus.mapFinishTime = taInfo.getMapFinishTime();
+    reportedStatus.shuffleFinishTime = taInfo.getShuffleFinishTime();
+    reportedStatus.sortFinishTime = taInfo.getSortFinishTime();
+    addDiagnosticInfo(taInfo.getError());
+
+    boolean needToClean = false;
+    String recoveredState = taInfo.getTaskStatus();
+    if (recoverOutput
+        && TaskAttemptState.SUCCEEDED.toString().equals(recoveredState)) {
+      TaskAttemptContext tac = new TaskAttemptContextImpl(conf,
+          TypeConverter.fromYarn(attemptId));
+      try {
+        committer.recoverTask(tac);
+        LOG.info("Recovered output from task attempt " + attemptId);
+      } catch (Exception e) {
+        LOG.error("Unable to recover task attempt " + attemptId, e);
+        LOG.info("Task attempt " + attemptId + " will be recovered as KILLED");
+        recoveredState = TaskAttemptState.KILLED.toString();
+        needToClean = true;
+      }
+    }
+
+    TaskAttemptStateInternal attemptState;
+    if (TaskAttemptState.SUCCEEDED.toString().equals(recoveredState)) {
+      attemptState = TaskAttemptStateInternal.SUCCEEDED;
+      reportedStatus.taskState = TaskAttemptState.SUCCEEDED;
+      eventHandler.handle(createJobCounterUpdateEventTASucceeded(this));
+      logAttemptFinishedEvent(attemptState);
+    } else if (TaskAttemptState.FAILED.toString().equals(recoveredState)) {
+      attemptState = TaskAttemptStateInternal.FAILED;
+      reportedStatus.taskState = TaskAttemptState.FAILED;
+      eventHandler.handle(createJobCounterUpdateEventTAFailed(this, false));
+      TaskAttemptUnsuccessfulCompletionEvent tauce =
+          createTaskAttemptUnsuccessfulCompletionEvent(this,
+              TaskAttemptStateInternal.FAILED);
+      eventHandler.handle(
+          new JobHistoryEvent(attemptId.getTaskId().getJobId(), tauce));
+    } else {
+      if (!TaskAttemptState.KILLED.toString().equals(recoveredState)) {
+        if (String.valueOf(recoveredState).isEmpty()) {
+          LOG.info("TaskAttempt" + attemptId
+              + " had not completed, recovering as KILLED");
+        } else {
+          LOG.warn("TaskAttempt " + attemptId + " found in unexpected state "
+              + recoveredState + ", recovering as KILLED");
+        }
+        addDiagnosticInfo("Killed during application recovery");
+        needToClean = true;
+      }
+      attemptState = TaskAttemptStateInternal.KILLED;
+      reportedStatus.taskState = TaskAttemptState.KILLED;
+      eventHandler.handle(createJobCounterUpdateEventTAKilled(this, false));
+      TaskAttemptUnsuccessfulCompletionEvent tauce =
+          createTaskAttemptUnsuccessfulCompletionEvent(this,
+              TaskAttemptStateInternal.KILLED);
+      eventHandler.handle(
+          new JobHistoryEvent(attemptId.getTaskId().getJobId(), tauce));
+    }
+
+    if (needToClean) {
+      TaskAttemptContext tac = new TaskAttemptContextImpl(conf,
+          TypeConverter.fromYarn(attemptId));
+      try {
+        committer.abortTask(tac);
+      } catch (Exception e) {
+        LOG.warn("Task cleanup failed for attempt " + attemptId, e);
+      }
+    }
+
+    return attemptState;
+  }
+
+  private void computeRackAndLocality() {
+    nodeRackName = RackResolver.resolve(
+        containerNodeId.getHost()).getNetworkLocation();
+
+    locality = Locality.OFF_SWITCH;
+    if (dataLocalHosts.size() > 0) {
+      String cHost = resolveHost(containerNodeId.getHost());
+      if (dataLocalHosts.contains(cHost)) {
+        locality = Locality.NODE_LOCAL;
+      }
+    }
+    if (locality == Locality.OFF_SWITCH) {
+      if (dataLocalRacks.contains(nodeRackName)) {
+        locality = Locality.RACK_LOCAL;
+      }
+    }
+  }
+
+  private static JobCounterUpdateEvent createJobCounterUpdateEventTASucceeded(
+      TaskAttemptImpl taskAttempt) {
+    long slotMillis = computeSlotMillis(taskAttempt);
+    TaskId taskId = taskAttempt.attemptId.getTaskId();
+    JobCounterUpdateEvent jce = new JobCounterUpdateEvent(taskId.getJobId());
+    jce.addCounterUpdate(
+      taskId.getTaskType() == TaskType.MAP ?
+        JobCounter.SLOTS_MILLIS_MAPS : JobCounter.SLOTS_MILLIS_REDUCES,
+        slotMillis);
+    return jce;
+  }
+
+  @SuppressWarnings("unchecked")
+  private void sendLaunchedEvents() {
+    JobCounterUpdateEvent jce = new JobCounterUpdateEvent(attemptId.getTaskId()
+        .getJobId());
+    jce.addCounterUpdate(attemptId.getTaskId().getTaskType() == TaskType.MAP ?
+        JobCounter.TOTAL_LAUNCHED_MAPS : JobCounter.TOTAL_LAUNCHED_REDUCES, 1);
+    eventHandler.handle(jce);
+
+    LOG.info("TaskAttempt: [" + attemptId
+        + "] using containerId: [" + containerID + " on NM: ["
+        + containerMgrAddress + "]");
+    TaskAttemptStartedEvent tase =
+      new TaskAttemptStartedEvent(TypeConverter.fromYarn(attemptId),
+          TypeConverter.fromYarn(attemptId.getTaskId().getTaskType()),
+          launchTime, trackerName, httpPort, shufflePort, containerID,
+          locality.toString(), avataar.toString());
+    eventHandler.handle(
+        new JobHistoryEvent(attemptId.getTaskId().getJobId(), tase));
+  }
+
-      taskAttempt.nodeRackName = RackResolver.resolve(
-          taskAttempt.containerNodeId.getHost()).getNetworkLocation();
-      taskAttempt.locality = Locality.OFF_SWITCH;
-      if (taskAttempt.dataLocalHosts.size() > 0) {
-        String cHost = taskAttempt.resolveHost(
-            taskAttempt.containerNodeId.getHost());
-        if (taskAttempt.dataLocalHosts.contains(cHost)) {
-          taskAttempt.locality = Locality.NODE_LOCAL;
-        }
-      }
-      if (taskAttempt.locality == Locality.OFF_SWITCH) {
-        if (taskAttempt.dataLocalRacks.contains(taskAttempt.nodeRackName)) {
-          taskAttempt.locality = Locality.RACK_LOCAL;
-        }
-      }
+      taskAttempt.computeRackAndLocality();
-          cEvent.getApplicationACLs(), taskAttempt.containerID,
-          taskAttempt.conf, taskAttempt.jobToken, taskAttempt.remoteTask,
-          taskAttempt.oldJobId, taskAttempt.assignedCapability,
-          taskAttempt.jvmID, taskAttempt.taskAttemptListener,
-          taskAttempt.credentials);
+          cEvent.getApplicationACLs(), taskAttempt.conf, taskAttempt.jobToken,
+          taskAttempt.remoteTask, taskAttempt.oldJobId, taskAttempt.jvmID,
+          taskAttempt.taskAttemptListener, taskAttempt.credentials);
-          launchContext, taskAttempt.remoteTask));
+          launchContext, taskAttempt.assignedCapability, taskAttempt.remoteTask));
-      JobCounterUpdateEvent jce =
-          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()
-              .getJobId());
-      jce.addCounterUpdate(
-          taskAttempt.attemptId.getTaskId().getTaskType() == TaskType.MAP ? 
-              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES
-              , 1);
-      taskAttempt.eventHandler.handle(jce);
-      
-      LOG.info("TaskAttempt: [" + taskAttempt.attemptId
-          + "] using containerId: [" + taskAttempt.containerID + " on NM: ["
-          + taskAttempt.containerMgrAddress + "]");
-      TaskAttemptStartedEvent tase =
-        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),
-            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),
-            taskAttempt.launchTime,
-            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),
-            taskAttempt.shufflePort, taskAttempt.containerID,
-            taskAttempt.locality.toString(), taskAttempt.avataar.toString());
-      taskAttempt.eventHandler.handle
-          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));
+      taskAttempt.sendLaunchedEvents();
-      long slotMillis = computeSlotMillis(taskAttempt);
-      TaskId taskId = taskAttempt.attemptId.getTaskId();
-      JobCounterUpdateEvent jce = new JobCounterUpdateEvent(taskId.getJobId());
-      jce.addCounterUpdate(
-        taskId.getTaskType() == TaskType.MAP ? 
-          JobCounter.SLOTS_MILLIS_MAPS : JobCounter.SLOTS_MILLIS_REDUCES,
-          slotMillis);
-      taskAttempt.eventHandler.handle(jce);
+      taskAttempt.eventHandler.handle(
+          createJobCounterUpdateEventTASucceeded(taskAttempt));
+  private static class RecoverTransition implements
+      MultipleArcTransition<TaskAttemptImpl, TaskAttemptEvent, TaskAttemptStateInternal> {
+
+    @Override
+    public TaskAttemptStateInternal transition(TaskAttemptImpl taskAttempt,
+        TaskAttemptEvent event) {
+      TaskAttemptRecoverEvent tare = (TaskAttemptRecoverEvent) event;
+      return taskAttempt.recover(tare.getTaskAttemptInfo(),
+          tare.getCommitter(), tare.getRecoverOutput());
+    }
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 MOV31 INS31 INS55 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 UPD83 INS43 INS42 INS79 INS83 INS39 INS42 INS8 INS31 INS83 INS83 INS42 INS74 INS31 INS42 INS45 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS25 INS60 INS25 INS25 INS41 INS21 INS21 INS25 INS25 INS42 INS41 INS42 INS45 INS60 INS21 INS21 INS21 INS60 INS21 MOV21 MOV79 MOV78 INS83 INS39 INS42 INS44 MOV44 INS8 INS43 INS43 INS43 INS43 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS7 INS7 INS7 INS7 INS32 INS7 INS7 INS7 INS7 INS7 INS32 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS32 INS39 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS8 INS25 INS42 INS8 INS42 INS7 INS7 INS27 INS8 INS27 INS8 INS42 MOV43 INS59 INS32 INS32 INS32 MOV43 INS59 INS32 INS43 INS42 MOV21 INS21 MOV21 MOV21 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS41 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS16 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS40 INS34 INS40 INS32 INS40 INS32 INS40 INS40 INS40 INS32 INS40 INS32 INS40 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS60 INS54 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS21 INS21 INS32 INS8 INS8 INS60 INS54 INS42 INS32 INS42 INS40 INS32 INS34 INS60 INS25 INS42 INS40 INS25 INS42 INS14 INS42 INS42 INS16 INS34 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS14 INS42 INS42 INS14 INS32 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS36 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS8 INS12 INS40 INS42 INS7 INS7 INS32 INS32 INS32 INS42 INS42 INS21 INS21 INS21 INS60 INS21 INS25 INS21 INS21 INS21 INS60 INS21 INS43 INS59 INS8 INS12 INS32 INS42 INS42 INS42 MOV43 INS59 INS32 INS8 INS32 INS8 MOV43 INS32 INS27 INS40 INS40 INS45 INS42 INS45 INS42 INS45 INS42 INS45 MOV43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 MOV43 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS32 INS32 INS45 INS32 INS42 INS42 INS32 INS45 INS32 INS27 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS14 INS21 INS21 INS44 INS8 INS42 INS40 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS7 INS7 INS32 INS43 INS59 INS32 INS38 INS8 INS7 INS7 INS32 INS43 INS59 INS32 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS21 INS32 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS38 INS43 INS42 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS21 INS21 INS42 INS52 INS42 INS40 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS25 INS21 INS21 INS42 INS40 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS32 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS32 INS7 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS32 INS7 INS7 INS42 INS52 INS9 INS42 INS52 INS40 INS43 INS32 INS42 INS32 INS42 INS42 INS32 INS8 INS8 INS32 INS7 INS42 INS52 INS9 INS42 INS52 INS40 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS9 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS21 INS21 INS42 INS45 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 MOV14 UPD40 UPD40 UPD40 INS42 INS32 UPD40 INS14 INS42 INS42 UPD40 MOV40 INS40 INS40 INS43 INS42 DEL42 DEL33 DEL33 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL40 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL40 DEL32 DEL32 DEL32 DEL7 DEL40 DEL40 DEL7 DEL21 DEL40 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL40 DEL40 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL40 DEL40 DEL27 DEL40 DEL42 DEL40 DEL32 DEL40 DEL40 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL40 DEL40 DEL42 DEL40 DEL42 DEL32 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL32 DEL40 DEL27 DEL40 DEL40 DEL16 DEL34 DEL32 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL40 DEL45 DEL40 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL32 DEL32 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL14 DEL59 DEL60 DEL40 DEL42 DEL40 DEL42 DEL32 DEL42 DEL32 DEL42 DEL14 DEL32 DEL21