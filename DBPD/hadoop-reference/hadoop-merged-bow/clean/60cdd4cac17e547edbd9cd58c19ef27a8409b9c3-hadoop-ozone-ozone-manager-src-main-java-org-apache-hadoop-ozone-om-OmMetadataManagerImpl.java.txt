HDDS-1233. Create an Ozone Manager Service provider for Recon. Contributed by Aravindan Vijayan.

+  /**
+   * For subclass overriding.
+   */
+  protected OmMetadataManagerImpl() {
+    this.lock = new OzoneManagerLock(new OzoneConfiguration());
+    this.openKeyExpireThresholdMS =
+        OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS_DEFAULT;
+  }
+
-      this.store = DBStoreBuilder.newBuilder(configuration)
+      DBStoreBuilder dbStoreBuilder = DBStoreBuilder.newBuilder(configuration)
-          .setPath(Paths.get(metaDir.getPath()))
-          .addTable(USER_TABLE)
-          .addTable(VOLUME_TABLE)
-          .addTable(BUCKET_TABLE)
-          .addTable(KEY_TABLE)
-          .addTable(DELETED_TABLE)
-          .addTable(OPEN_KEY_TABLE)
-          .addTable(S3_TABLE)
-          .addTable(MULTIPARTINFO_TABLE)
-          .addTable(S3_SECRET_TABLE)
-          .addTable(DELEGATION_TOKEN_TABLE)
-          .addCodec(OzoneTokenIdentifier.class, new TokenIdentifierCodec())
-          .addCodec(OmKeyInfo.class, new OmKeyInfoCodec())
-          .addCodec(OmBucketInfo.class, new OmBucketInfoCodec())
-          .addCodec(OmVolumeArgs.class, new OmVolumeArgsCodec())
-          .addCodec(VolumeList.class, new VolumeListCodec())
-          .addCodec(OmMultipartKeyInfo.class, new OmMultipartKeyInfoCodec())
-          .build();
-
-      userTable =
-          this.store.getTable(USER_TABLE, String.class, VolumeList.class);
-      checkTableStatus(userTable, USER_TABLE);
-      this.store.getTable(VOLUME_TABLE, String.class,
-          String.class);
-      volumeTable =
-          this.store.getTable(VOLUME_TABLE, String.class, OmVolumeArgs.class);
-      checkTableStatus(volumeTable, VOLUME_TABLE);
-
-      bucketTable =
-          this.store.getTable(BUCKET_TABLE, String.class, OmBucketInfo.class);
-      checkTableStatus(bucketTable, BUCKET_TABLE);
-
-      keyTable = this.store.getTable(KEY_TABLE, String.class, OmKeyInfo.class);
-      checkTableStatus(keyTable, KEY_TABLE);
-
-      deletedTable =
-          this.store.getTable(DELETED_TABLE, String.class, OmKeyInfo.class);
-      checkTableStatus(deletedTable, DELETED_TABLE);
-
-      openKeyTable =
-          this.store.getTable(OPEN_KEY_TABLE, String.class, OmKeyInfo.class);
-      checkTableStatus(openKeyTable, OPEN_KEY_TABLE);
-
-      s3Table = this.store.getTable(S3_TABLE);
-      checkTableStatus(s3Table, S3_TABLE);
-
-      dTokenTable = this.store.getTable(DELEGATION_TOKEN_TABLE,
-          OzoneTokenIdentifier.class, Long.class);
-      checkTableStatus(dTokenTable, DELEGATION_TOKEN_TABLE);
-
-      multipartInfoTable = this.store.getTable(MULTIPARTINFO_TABLE,
-          String.class, OmMultipartKeyInfo.class);
-      checkTableStatus(multipartInfoTable, MULTIPARTINFO_TABLE);
-
-      s3SecretTable = this.store.getTable(S3_SECRET_TABLE);
-      checkTableStatus(s3SecretTable, S3_SECRET_TABLE);
+          .setPath(Paths.get(metaDir.getPath()));
+      this.store = addOMTablesAndCodecs(dbStoreBuilder).build();
+      initializeOmTables();
+  protected DBStoreBuilder addOMTablesAndCodecs(DBStoreBuilder builder) {
+
+    return builder.addTable(USER_TABLE)
+        .addTable(VOLUME_TABLE)
+        .addTable(BUCKET_TABLE)
+        .addTable(KEY_TABLE)
+        .addTable(DELETED_TABLE)
+        .addTable(OPEN_KEY_TABLE)
+        .addTable(S3_TABLE)
+        .addTable(MULTIPARTINFO_TABLE)
+        .addTable(DELEGATION_TOKEN_TABLE)
+        .addTable(S3_SECRET_TABLE)
+        .addCodec(OzoneTokenIdentifier.class, new TokenIdentifierCodec())
+        .addCodec(OmKeyInfo.class, new OmKeyInfoCodec())
+        .addCodec(OmBucketInfo.class, new OmBucketInfoCodec())
+        .addCodec(OmVolumeArgs.class, new OmVolumeArgsCodec())
+        .addCodec(VolumeList.class, new VolumeListCodec())
+        .addCodec(OmMultipartKeyInfo.class, new OmMultipartKeyInfoCodec());
+  }
+
+  /**
+   * Initialize OM Tables.
+   *
+   * @throws IOException
+   */
+  protected void initializeOmTables() throws IOException {
+    userTable =
+        this.store.getTable(USER_TABLE, String.class, VolumeList.class);
+    checkTableStatus(userTable, USER_TABLE);
+    this.store.getTable(VOLUME_TABLE, String.class,
+        String.class);
+    volumeTable =
+        this.store.getTable(VOLUME_TABLE, String.class, OmVolumeArgs.class);
+    checkTableStatus(volumeTable, VOLUME_TABLE);
+
+    bucketTable =
+        this.store.getTable(BUCKET_TABLE, String.class, OmBucketInfo.class);
+    checkTableStatus(bucketTable, BUCKET_TABLE);
+
+    keyTable = this.store.getTable(KEY_TABLE, String.class, OmKeyInfo.class);
+    checkTableStatus(keyTable, KEY_TABLE);
+
+    deletedTable =
+        this.store.getTable(DELETED_TABLE, String.class, OmKeyInfo.class);
+    checkTableStatus(deletedTable, DELETED_TABLE);
+
+    openKeyTable =
+        this.store.getTable(OPEN_KEY_TABLE, String.class, OmKeyInfo.class);
+    checkTableStatus(openKeyTable, OPEN_KEY_TABLE);
+
+    s3Table = this.store.getTable(S3_TABLE);
+    checkTableStatus(s3Table, S3_TABLE);
+
+    multipartInfoTable = this.store.getTable(MULTIPARTINFO_TABLE,
+        String.class, OmMultipartKeyInfo.class);
+    checkTableStatus(multipartInfoTable, MULTIPARTINFO_TABLE);
+
+    dTokenTable = this.store.getTable(DELEGATION_TOKEN_TABLE,
+        OzoneTokenIdentifier.class, Long.class);
+    checkTableStatus(dTokenTable, DELEGATION_TOKEN_TABLE);
+
+    s3SecretTable = this.store.getTable(S3_SECRET_TABLE);
+    checkTableStatus(s3SecretTable, S3_SECRET_TABLE);
+  }
+
+
+  /**
+   * Update store used by subclass.
+   *
+   * @param store DB store.
+   */
+  protected void setStore(DBStore store) {
+    this.store = store;
+  }
+

INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS8 MOV29 MOV78 INS83 INS39 INS42 MOV44 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS29 UPD83 UPD42 MOV8 MOV21 MOV21 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS21 INS21 INS42 INS25 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS21 INS66 INS7 INS7 MOV27 INS8 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS22 INS14 INS22 INS42 MOV60 INS60 INS21 INS21 INS32 INS42 MOV57 MOV14 INS22 INS42 INS52 INS42 INS43 INS14 INS52 INS42 INS43 INS59 INS7 INS32 INS32 INS42 MOV57 MOV14 INS52 INS42 INS42 INS43 INS42 INS42 MOV32 MOV22 INS32 INS42 INS32 INS42 MOV57 MOV14 INS42 INS32 INS42 INS32 INS42 MOV57 MOV14 INS42 INS42 INS32 INS42 MOV57 MOV14 INS32 INS42 MOV57 MOV14 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL25 DEL8