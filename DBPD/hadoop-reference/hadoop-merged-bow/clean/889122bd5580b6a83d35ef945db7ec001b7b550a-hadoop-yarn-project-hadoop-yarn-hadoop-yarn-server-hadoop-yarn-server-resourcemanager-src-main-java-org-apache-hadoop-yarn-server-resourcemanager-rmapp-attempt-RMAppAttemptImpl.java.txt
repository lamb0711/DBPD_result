Merge branch 'trunk' into HDFS-6581

+import java.util.Collection;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import org.apache.hadoop.yarn.api.records.NodeId;
+import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNodeFinishedContainersPulledByAMEvent;
-  
-  private List<ContainerStatus> justFinishedContainers =
-    new ArrayList<ContainerStatus>();
+
+  private ConcurrentMap<NodeId, List<ContainerStatus>>
+      justFinishedContainers =
+      new ConcurrentHashMap<NodeId, List<ContainerStatus>>();
+  // Tracks the previous finished containers that are waiting to be
+  // verified as received by the AM. If the AM sends the next allocate
+  // request it implicitly acks this list.
+  private ConcurrentMap<NodeId, List<ContainerStatus>>
+      finishedContainersSentToAM =
+      new ConcurrentHashMap<NodeId, List<ContainerStatus>>();
+  @VisibleForTesting
+      List<ContainerStatus> returnList = new ArrayList<ContainerStatus>();
+      for (Collection<ContainerStatus> containerStatusList :
+          justFinishedContainers.values()) {
+        returnList.addAll(containerStatusList);
+      }
+      return returnList;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  @Override
+  public ConcurrentMap<NodeId, List<ContainerStatus>>
+  getJustFinishedContainersReference
+      () {
+    this.readLock.lock();
+    try {
+  public ConcurrentMap<NodeId, List<ContainerStatus>>
+  getFinishedContainersSentToAMReference() {
+    this.readLock.lock();
+    try {
+      return this.finishedContainersSentToAM;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  @Override
-      List<ContainerStatus> returnList = new ArrayList<ContainerStatus>(
-          this.justFinishedContainers.size());
-      returnList.addAll(this.justFinishedContainers);
-      this.justFinishedContainers.clear();
+      List<ContainerStatus> returnList = new ArrayList<ContainerStatus>();
+
+      // A new allocate means the AM received the previously sent
+      // finishedContainers. We can ack this to NM now
+      for (NodeId nodeId:finishedContainersSentToAM.keySet()) {
+
+        // Clear and get current values
+        List<ContainerStatus> currentSentContainers =
+            finishedContainersSentToAM
+            .put(nodeId, new ArrayList<ContainerStatus>());
+        List<ContainerId> containerIdList = new ArrayList<ContainerId>
+            (currentSentContainers.size());
+        for (ContainerStatus containerStatus:currentSentContainers) {
+          containerIdList.add(containerStatus.getContainerId());
+        }
+        eventHandler.handle(new RMNodeFinishedContainersPulledByAMEvent(
+            nodeId, containerIdList));
+      }
+
+      // Mark every containerStatus as being sent to AM though we may return
+      // only the ones that belong to the current attempt
+      boolean keepContainersAcressAttempts = this.submissionContext
+          .getKeepContainersAcrossApplicationAttempts();
+      for (NodeId nodeId:justFinishedContainers.keySet()) {
+
+        // Clear and get current values
+        List<ContainerStatus> finishedContainers = justFinishedContainers.put
+            (nodeId, new ArrayList<ContainerStatus>());
+
+        if (keepContainersAcressAttempts) {
+          returnList.addAll(finishedContainers);
+        } else {
+          // Filter out containers from previous attempt
+          for (ContainerStatus containerStatus: finishedContainers) {
+            if (containerStatus.getContainerId().getApplicationAttemptId()
+                .equals(this.getAppAttemptId())) {
+              returnList.add(containerStatus);
+            }
+          }
+        }
+
+        finishedContainersSentToAM.putIfAbsent(nodeId, new ArrayList
+              <ContainerStatus>());
+        finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);
+      }
+
-      attemptState.getState());
+        attemptState.getState());
-    this.justFinishedContainers = attempt.getJustFinishedContainers();
+    this.justFinishedContainers = attempt.getJustFinishedContainersReference();
+    this.finishedContainersSentToAM =
+        attempt.getFinishedContainersSentToAMReference();
+      // Add all finished containers so that they can be acked to NM
+      addJustFinishedContainer(appAttempt, containerFinishedEvent);
+
-      // Normal container.Put it in completed containers list
-      appAttempt.justFinishedContainers.add(containerStatus);
+  private static void addJustFinishedContainer(RMAppAttemptImpl appAttempt,
+      RMAppAttemptContainerFinishedEvent containerFinishedEvent) {
+    appAttempt.justFinishedContainers.putIfAbsent(containerFinishedEvent
+        .getNodeId(), new ArrayList<ContainerStatus>());
+    appAttempt.justFinishedContainers.get(containerFinishedEvent
+            .getNodeId()).add(containerFinishedEvent.getContainerStatus());
+  }
+
-      ContainerStatus containerStatus =
-          containerFinishedEvent.getContainerStatus();
-      appAttempt.justFinishedContainers.add(containerStatus);
+      addJustFinishedContainer(appAttempt, containerFinishedEvent);
+      // Add all finished containers so that they can be acked to NM.
+      addJustFinishedContainer(appAttempt, containerFinishedEvent);
+
-      // Normal container.
-      appAttempt.justFinishedContainers.add(containerStatus);
+
+      // Add all finished containers so that they can be acked to NM.
+      addJustFinishedContainer(appAttempt, containerFinishedEvent);
+
-      // Normal container.
-      appAttempt.justFinishedContainers.add(containerStatus);
-        event);
+          event);

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS74 INS59 INS83 INS74 INS59 INS78 INS78 INS83 INS74 INS42 INS8 INS74 UPD42 INS78 INS83 INS74 INS42 INS8 INS83 INS83 INS39 INS42 MOV44 INS44 INS8 INS43 INS43 MOV74 INS42 INS14 INS43 INS43 INS74 INS42 INS14 INS42 INS42 INS43 INS43 INS21 INS54 INS43 INS43 MOV74 INS42 INS43 INS43 INS74 INS21 INS54 INS21 MOV25 INS43 INS42 INS21 INS21 INS44 MOV25 MOV25 INS42 INS42 INS74 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS32 INS8 INS8 INS7 INS42 INS32 INS32 INS43 INS42 INS43 INS43 INS74 INS42 INS42 INS43 INS43 INS74 INS22 INS42 INS60 INS70 INS41 INS21 INS42 INS42 INS22 INS42 INS41 INS21 INS60 INS70 INS60 INS70 INS22 INS32 INS40 INS42 INS32 INS14 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS52 INS42 MOV74 MOV59 INS44 INS32 INS8 INS42 INS32 INS52 INS42 INS22 INS32 INS74 INS59 INS44 INS32 INS8 INS39 INS59 INS44 INS32 INS8 UPD42 INS52 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS74 INS40 INS42 INS32 INS42 INS42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 INS74 INS42 INS42 INS42 INS21 INS22 INS42 INS52 INS42 INS22 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 MOV60 INS70 INS21 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS25 MOV21 INS21 INS43 INS43 INS42 INS42 INS43 MOV43 INS32 INS52 INS42 INS52 INS42 INS42 INS42 INS74 INS42 INS74 INS59 INS74 INS44 INS42 INS8 INS32 INS22 INS42 INS42 INS74 INS59 INS42 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS32 INS43 INS43 UPD42 INS43 INS42 INS21 INS42 INS42 INS14 INS52 INS42 INS43 INS43 INS42 INS32 MOV21 INS70 INS42 UPD42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 UPD74 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS44 INS42 INS8 INS74 INS42 INS42 INS42 INS74 INS43 INS42 INS42 INS42 INS32 INS42 INS74 INS42 INS43 INS42 INS25 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS21 INS32 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL40 DEL40