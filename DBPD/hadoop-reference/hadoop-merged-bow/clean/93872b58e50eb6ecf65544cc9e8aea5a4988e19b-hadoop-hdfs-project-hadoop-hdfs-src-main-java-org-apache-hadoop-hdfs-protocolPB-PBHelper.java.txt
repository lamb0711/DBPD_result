HDFS-4230. Support listing of all the snapshottable directories.  Contributed by Jing Zhao


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1429643 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.SnapshottableDirectoryStatus;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.SnapshottableDirectoryListingProto;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.SnapshottableDirectoryStatusProto;
-  
+  public static SnapshottableDirectoryStatus convert(
+      SnapshottableDirectoryStatusProto sdirStatusProto) {
+    if (sdirStatusProto == null) {
+      return null;
+    }
+    return new SnapshottableDirectoryStatus(sdirStatusProto.getDirStatus()
+        .getModificationTime(), sdirStatusProto.getDirStatus().getAccessTime(),
+        PBHelper.convert(sdirStatusProto.getDirStatus().getPermission()),
+        sdirStatusProto.getDirStatus().getOwner(), sdirStatusProto
+            .getDirStatus().getGroup(), sdirStatusProto.getDirStatus()
+            .getPath().toByteArray(), sdirStatusProto.getSnapshotNumber(),
+        sdirStatusProto.getSnapshotQuota(), sdirStatusProto.getParentFullpath()
+            .toByteArray());
+  }
+  
+  public static SnapshottableDirectoryStatusProto convert(
+      SnapshottableDirectoryStatus status) {
+    if (status == null) {
+      return null;
+    }
+    int snapshotNumber = status.getSnapshotNumber();
+    int snapshotQuota = status.getSnapshotQuota();
+    byte[] parentFullPath = status.getParentFullPath();
+    ByteString parentFullPathBytes = ByteString
+        .copyFrom(parentFullPath == null ? new byte[0] : parentFullPath);
+    HdfsFileStatusProto fs = convert(status.getDirStatus());
+    SnapshottableDirectoryStatusProto.Builder builder = 
+        SnapshottableDirectoryStatusProto
+        .newBuilder().setSnapshotNumber(snapshotNumber)
+        .setSnapshotQuota(snapshotQuota).setParentFullpath(parentFullPathBytes)
+        .setDirStatus(fs);
+    return builder.build();
+  }
+  
+  } 
+  
+  public static SnapshottableDirectoryStatus[] convert(
+      SnapshottableDirectoryListingProto sdlp) {
+    if (sdlp == null)
+      return null;
+    List<SnapshottableDirectoryStatusProto> list = sdlp
+        .getSnapshottableDirListingList();
+    if (list.isEmpty()) {
+      return new SnapshottableDirectoryStatus[0];
+    } else {
+      SnapshottableDirectoryStatus[] result = 
+          new SnapshottableDirectoryStatus[list.size()];
+      for (int i = 0; i < list.size(); i++) {
+        result[i] = (SnapshottableDirectoryStatus) PBHelper
+            .convert(list.get(i));
+      }
+      return result;
+    }
+  }
+  
+  public static SnapshottableDirectoryListingProto convert(
+      SnapshottableDirectoryStatus[] status) {
+    if (status == null)
+      return null;
+    SnapshottableDirectoryStatusProto[] protos = 
+        new SnapshottableDirectoryStatusProto[status.length];
+    for (int i = 0; i < status.length; i++) {
+      protos[i] = PBHelper.convert(status[i]);
+    }
+    List<SnapshottableDirectoryStatusProto> protoList = Arrays.asList(protos);
+    return SnapshottableDirectoryListingProto.newBuilder()
+        .addAllSnapshottableDirListing(protoList).build();

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS5 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS25 INS41 INS42 INS43 INS42 INS25 INS60 INS60 INS60 INS60 INS60 INS60 INS41 INS43 INS85 INS43 INS42 INS25 INS60 INS25 INS42 INS5 INS42 INS25 INS60 INS24 INS60 INS41 INS42 INS27 INS8 INS14 INS42 INS27 INS8 INS39 INS59 INS39 INS59 INS5 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS27 INS41 INS74 INS59 INS32 INS8 INS8 INS43 INS85 INS27 INS41 INS5 INS59 INS58 INS27 INS37 INS8 INS74 INS59 INS32 INS42 INS33 INS41 INS43 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS33 INS41 INS42 INS32 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS33 INS33 INS43 INS43 INS42 INS32 INS42 INS42 INS41 INS60 INS24 INS41 INS42 INS42 INS33 INS33 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS43 INS43 INS42 INS32 INS32 INS42 INS33 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS3 INS42 INS42 INS42 INS32 INS42 INS42 INS5 INS34 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS32 INS42 INS21 INS43 INS85 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS5 INS34 INS32 INS42 INS42 INS43 INS85 INS42 INS5 INS32 INS42 INS34 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS2 INS39 INS85 INS32 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS2 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42