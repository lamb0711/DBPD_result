HDFS-10999. Introduce separate stats for Replicated and Erasure Coded Blocks apart from the current Aggregated stats. (Manoj Govindassamy via lei)

-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.TreeMap;
+import java.util.concurrent.atomic.LongAdder;
+import org.apache.hadoop.hdfs.protocol.BlockType;
+  private final LongAdder totalCorruptBlocks = new LongAdder();
+  private final LongAdder totalCorruptECBlockGroups = new LongAdder();
+
+      incrementBlockStat(blk);
-   * Remove Block from CorruptBlocksMap
-   *
+   * Remove Block from CorruptBlocksMap.
-      corruptReplicasMap.remove(blk);
+      Map<DatanodeDescriptor, Reason> value = corruptReplicasMap.remove(blk);
+      if (value != null) {
+        decrementBlockStat(blk);
+      }
-    if (datanodes==null)
+    if (datanodes == null) {
+    }
+        decrementBlockStat(blk);
-    
+
+  private void incrementBlockStat(Block block) {
+    if (BlockIdManager.isStripedBlockID(block.getBlockId())) {
+      totalCorruptECBlockGroups.increment();
+    } else {
+      totalCorruptBlocks.increment();
+    }
+  }
+
+  private void decrementBlockStat(Block block) {
+    if (BlockIdManager.isStripedBlockID(block.getBlockId())) {
+      totalCorruptECBlockGroups.decrement();
+    } else {
+      totalCorruptBlocks.decrement();
+    }
+  }
-   *
-  long[] getCorruptReplicaBlockIdsForTesting(int numExpectedBlocks,
-                                   Long startingBlockId) {
+  long[] getCorruptBlockIdsForTesting(BlockType blockType,
+      int numExpectedBlocks, Long startingBlockId) {
-    
-    Iterator<Block> blockIt = 
-        new TreeMap<>(corruptReplicasMap).keySet().iterator();
-    
-    // if the starting block id was specified, iterate over keys until
-    // we find the matching block. If we find a matching block, break
-    // to leave the iterator on the next block after the specified block. 
-    if (startingBlockId != null) {
-      boolean isBlockFound = false;
-      while (blockIt.hasNext()) {
-        Block b = blockIt.next();
-        if (b.getBlockId() == startingBlockId) {
-          isBlockFound = true;
-          break; 
-        }
-      }
-      
-      if (!isBlockFound) {
-        return null;
-      }
-    }
-
-    ArrayList<Long> corruptReplicaBlockIds = new ArrayList<Long>();
-
-    // append up to numExpectedBlocks blockIds to our list
-    for(int i=0; i<numExpectedBlocks && blockIt.hasNext(); i++) {
-      corruptReplicaBlockIds.add(blockIt.next().getBlockId());
-    }
-    
-    long[] ret = new long[corruptReplicaBlockIds.size()];
-    for(int i=0; i<ret.length; i++) {
-      ret[i] = corruptReplicaBlockIds.get(i);
-    }
-    
-    return ret;
+    long cursorBlockId =
+        startingBlockId != null ? startingBlockId : Long.MIN_VALUE;
+    return corruptReplicasMap.keySet()
+        .stream()
+        .filter(r -> {
+          if (blockType == BlockType.STRIPED) {
+            return BlockIdManager.isStripedBlockID(r.getBlockId()) &&
+                r.getBlockId() >= cursorBlockId;
+          } else {
+            return !BlockIdManager.isStripedBlockID(r.getBlockId()) &&
+                r.getBlockId() >= cursorBlockId;
+          }
+        })
+        .sorted()
+        .limit(numExpectedBlocks)
+        .mapToLong(Block::getBlockId)
+        .toArray();
+
+  long getCorruptBlocksStat() {
+    return totalCorruptBlocks.longValue();
+  }
+
+  long getCorruptECBlockGroupsStat() {
+    return totalCorruptECBlockGroups.longValue();
+  }

MOV26 MOV26 UPD40 UPD40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS39 UPD42 MOV42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 MOV29 MOV78 MOV5 INS42 INS44 MOV44 MOV44 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS42 INS42 INS14 INS42 INS42 INS14 MOV43 INS42 INS25 MOV43 INS42 INS25 INS43 INS42 MOV25 INS60 INS41 INS41 MOV41 INS43 INS43 UPD66 INS8 INS32 INS8 INS8 INS32 INS8 MOV8 UPD42 MOV42 INS39 INS59 INS32 INS32 INS32 INS42 INS42 INS21 INS60 INS25 MOV41 INS42 INS42 INS32 INS21 INS21 UPD42 MOV42 INS42 INS32 INS21 INS42 INS16 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS74 INS59 INS27 INS8 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 MOV42 INS32 INS32 MOV27 INS42 INS40 INS32 INS42 INS90 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 MOV42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS86 INS32 INS42 INS59 INS8 INS42 INS42 UPD42 MOV42 INS25 INS27 INS8 INS8 INS42 INS40 INS41 INS41 INS27 INS27 INS32 INS27 INS38 INS27 INS42 INS42 INS32 MOV32 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 MOV42 UPD42 UPD42 DEL40 DEL26 DEL32 DEL21 DEL42 DEL9 DEL7 DEL10 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL14 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL27 DEL25 DEL8 DEL61 DEL42 DEL38 DEL33 DEL41 DEL8 DEL25 DEL8 DEL25 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL27 DEL42 DEL37 DEL32 DEL32 DEL21 DEL8 DEL24 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL8 DEL31 DEL42