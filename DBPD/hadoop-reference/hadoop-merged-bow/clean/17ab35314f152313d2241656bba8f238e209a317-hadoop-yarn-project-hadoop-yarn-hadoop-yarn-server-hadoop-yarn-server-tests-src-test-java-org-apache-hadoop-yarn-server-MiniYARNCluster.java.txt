Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1556665 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.server.resourcemanager.RMFatalEvent;
+  private int failoverTimeout;
+    failoverTimeout = conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS,
+        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);
+    conf.setBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, true);
+      if (!useFixedPorts) {
+        if (HAUtil.isHAEnabled(conf)) {
+          setHARMConfiguration(i, conf);
+        } else {
+          setNonHARMConfiguration(conf);
+        }
+      }
+  private void setNonHARMConfiguration(Configuration conf) {
+    String hostname = MiniYARNCluster.getHostname();
+    conf.set(YarnConfiguration.RM_ADDRESS, hostname + ":0");
+    conf.set(YarnConfiguration.RM_ADMIN_ADDRESS, hostname + ":0");
+    conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, hostname + ":0");
+    conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS, hostname + ":0");
+    WebAppUtils.setRMWebAppHostnameAndPort(conf, hostname, 0);
+  }
+
+  private void setHARMConfiguration(final int index, Configuration conf) {
+    String hostname = MiniYARNCluster.getHostname();
+    for (String confKey : YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS) {
+      conf.set(HAUtil.addSuffix(confKey, rmIds[index]), hostname + ":0");
+    }
+  }
+
+  private synchronized void initResourceManager(int index, Configuration conf) {
+    if (HAUtil.isHAEnabled(conf)) {
+      conf.set(YarnConfiguration.RM_HA_ID, rmIds[index]);
+    }
+    resourceManagers[index].init(conf);
+    resourceManagers[index].getRMContext().getDispatcher().register(
+        RMAppAttemptEventType.class,
+        new EventHandler<RMAppAttemptEvent>() {
+          public void handle(RMAppAttemptEvent event) {
+            if (event instanceof RMAppAttemptRegistrationEvent) {
+              appMasters.put(event.getApplicationAttemptId(),
+                  event.getTimestamp());
+            } else if (event instanceof RMAppAttemptUnregistrationEvent) {
+              appMasters.remove(event.getApplicationAttemptId());
+            }
+          }
+        });
+  }
+
+  private synchronized void startResourceManager(final int index) {
+    try {
+      Thread rmThread = new Thread() {
+        public void run() {
+          resourceManagers[index].start();
+        }
+      };
+      rmThread.setName("RM-" + index);
+      rmThread.start();
+      int waitCount = 0;
+      while (resourceManagers[index].getServiceState() == STATE.INITED
+          && waitCount++ < 60) {
+        LOG.info("Waiting for RM to start...");
+        Thread.sleep(1500);
+      }
+      if (resourceManagers[index].getServiceState() != STATE.STARTED) {
+        // RM could have failed.
+        throw new IOException(
+            "ResourceManager failed to start. Final state is "
+                + resourceManagers[index].getServiceState());
+      }
+    } catch (Throwable t) {
+      throw new YarnRuntimeException(t);
+    }
+    LOG.info("MiniYARN ResourceManager address: " +
+        getConfig().get(YarnConfiguration.RM_ADDRESS));
+    LOG.info("MiniYARN ResourceManager web address: " +
+        WebAppUtils.getRMWebAppURLWithoutScheme(getConfig()));
+  }
+
+  @InterfaceAudience.Private
+  @VisibleForTesting
+  public synchronized void stopResourceManager(int index) {
+    if (resourceManagers[index] != null) {
+      resourceManagers[index].stop();
+      resourceManagers[index] = null;
+    }
+  }
+
+  @InterfaceAudience.Private
+  @VisibleForTesting
+  public synchronized void restartResourceManager(int index)
+      throws InterruptedException {
+    if (resourceManagers[index] != null) {
+      resourceManagers[index].stop();
+      resourceManagers[index] = null;
+    }
+    Configuration conf = getConfig();
+    resourceManagers[index] = new ResourceManager();
+    initResourceManager(index, getConfig());
+    startResourceManager(index);
+  }
+
-   * In a HA cluster, go through all the RMs and find the Active RM. If none
-   * of them are active, wait upto 5 seconds for them to transition to Active.
+   * In a HA cluster, go through all the RMs and find the Active RM. In a
+   * non-HA cluster, return the index of the only RM.
-   * In an non-HA cluster, return the index of the only RM.
-   *
-   * @return index of the active RM or -1 if none of them transition to
-   * active even after 5 seconds of waiting
+   * @return index of the active RM or -1 if none of them turn active
-    int numRetriesForRMBecomingActive = 5;
+    int numRetriesForRMBecomingActive = failoverTimeout / 100;
+        if (resourceManagers[i] == null) {
+          continue;
+        }
-        Thread.sleep(1000);
+        Thread.sleep(100);
-        : this.resourceManagers[getActiveRMIndex()];
+        : this.resourceManagers[activeRMIndex];
-    private void setNonHARMConfiguration(Configuration conf) {
-      String hostname = MiniYARNCluster.getHostname();
-      conf.set(YarnConfiguration.RM_ADDRESS, hostname + ":0");
-      conf.set(YarnConfiguration.RM_ADMIN_ADDRESS, hostname + ":0");
-      conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, hostname + ":0");
-      conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS, hostname + ":0");
-      WebAppUtils.setRMWebAppHostnameAndPort(conf, hostname, 0);
-    }
-
-    private void setHARMConfiguration(Configuration conf) {
-      String hostname = MiniYARNCluster.getHostname();
-      for (String confKey : YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS) {
-        for (String id : HAUtil.getRMHAIds(conf)) {
-          conf.set(HAUtil.addSuffix(confKey, id), hostname + ":0");
-        }
-      }
-    }
-
-      conf.setBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, true);
-
-      if (!useFixedPorts) {
-        if (HAUtil.isHAEnabled(conf)) {
-          setHARMConfiguration(conf);
-        } else {
-          setNonHARMConfiguration(conf);
-        }
-      }
-      if (HAUtil.isHAEnabled(conf)) {
-        conf.set(YarnConfiguration.RM_HA_ID, rmIds[index]);
-      }
-      resourceManagers[index].init(conf);
-      resourceManagers[index].getRMContext().getDispatcher().register
-          (RMAppAttemptEventType.class,
-          new EventHandler<RMAppAttemptEvent>() {
-            public void handle(RMAppAttemptEvent event) {
-              if (event instanceof RMAppAttemptRegistrationEvent) {
-                appMasters.put(event.getApplicationAttemptId(), event.getTimestamp());
-              } else if (event instanceof RMAppAttemptUnregistrationEvent) {
-                appMasters.remove(event.getApplicationAttemptId());
-              }
-            }
-          });
+      initResourceManager(index, conf);
-      try {
-        new Thread() {
-          public void run() {
-            resourceManagers[index].start();
-          }
-        }.start();
-        int waitCount = 0;
-        while (resourceManagers[index].getServiceState() == STATE.INITED
-            && waitCount++ < 60) {
-          LOG.info("Waiting for RM to start...");
-          Thread.sleep(1500);
-        }
-        if (resourceManagers[index].getServiceState() != STATE.STARTED) {
-          // RM could have failed.
-          throw new IOException(
-              "ResourceManager failed to start. Final state is "
-                  + resourceManagers[index].getServiceState());
-        }
-        super.serviceStart();
-      } catch (Throwable t) {
-        throw new YarnRuntimeException(t);
-      }
+      startResourceManager(index);
+      super.serviceStart();
-      super.serviceStop();
+      super.serviceStop();

INS26 INS40 INS23 MOV31 INS31 MOV31 MOV31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS42 INS44 MOV44 INS8 UPD83 UPD42 INS44 UPD83 UPD42 INS44 INS78 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS78 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS31 INS31 INS42 INS21 MOV21 INS83 INS39 INS42 MOV60 INS70 INS39 INS42 INS83 INS39 INS42 INS40 INS42 INS39 INS42 INS25 INS40 INS42 INS39 INS42 INS42 INS25 INS60 INS21 INS21 INS21 MOV78 UPD83 MOV83 INS83 MOV39 UPD42 MOV42 INS44 MOV43 INS8 MOV78 INS83 INS83 INS39 INS42 MOV43 INS8 MOV21 INS7 MOV44 INS40 INS8 INS27 INS8 INS27 INS8 INS43 INS59 INS7 INS32 INS32 UPD66 UPD66 UPD66 UPD43 MOV43 UPD42 MOV42 INS21 MOV21 INS21 INS21 MOV21 MOV21 INS42 INS32 INS25 INS21 INS60 INS21 INS2 INS33 INS21 INS21 INS2 INS33 INS21 INS21 INS42 INS42 INS32 INS2 INS14 INS42 INS42 INS32 INS42 INS42 INS27 UPD42 INS32 INS32 INS32 INS42 INS42 INS40 INS40 MOV38 INS8 INS32 INS43 INS59 INS32 INS42 INS42 INS32 INS7 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS43 INS42 INS42 INS34 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS27 UPD42 UPD42 INS27 INS25 INS42 INS42 INS32 MOV27 INS42 INS42 MOV14 INS42 INS42 INS27 INS42 INS2 INS42 INS2 INS33 INS2 INS42 INS2 INS33 INS42 INS25 INS45 INS32 INS45 INS32 MOV32 INS8 MOV8 INS42 INS42 INS42 INS2 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS32 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS32 INS21 INS42 INS42 INS2 INS33 INS18 UPD34 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL66 DEL66 DEL34 DEL42 DEL32 DEL42 DEL32 DEL40 DEL44 DEL32 DEL8 DEL70 DEL8 DEL70 DEL8 DEL31