YARN-8488.  Added SUCCEEDED/FAILED states to YARN service.
            Contributed by Suma Shivaprasad

+import org.apache.hadoop.yarn.service.api.records.ContainerState;
+import org.apache.hadoop.yarn.util.Clock;
+import org.apache.hadoop.yarn.util.SystemClock;
-import static org.apache.hadoop.yarn.api.records.ContainerExitStatus.KILLED_AFTER_APP_COMPLETION;
+import static org.apache.hadoop.yarn.api.records.ContainerExitStatus
+    .KILLED_AFTER_APP_COMPLETION;
+  private boolean timelineServiceEnabled;
+
+  private Clock systemClock;
+
+    this.app = context.getService();
+    this.systemClock = SystemClock.getInstance();
+    if (YarnConfiguration
+        .timelineServiceV2Enabled(getConfig())) {
+      timelineServiceEnabled = true;
+    }
+
+
+
-        // mark component-instances/containers as STOPPED
-        for (ContainerId containerId : getLiveInstances().keySet()) {
-          serviceTimelinePublisher.componentInstanceFinished(containerId,
-              KILLED_AFTER_APP_COMPLETION, diagnostics.toString());
+
+        // mark other component-instances/containers as STOPPED
+        final Map<ContainerId, ComponentInstance> liveInst =
+            getLiveInstances();
+        for (Map.Entry<ContainerId, ComponentInstance> instance : liveInst
+            .entrySet()) {
+          if (!ComponentInstance.isFinalState(
+              instance.getValue().getContainerSpec().getState())) {
+            LOG.info("{} Component instance state changed from {} to {}",
+                instance.getValue().getCompInstanceName(),
+                instance.getValue().getContainerSpec().getState(),
+                ContainerState.STOPPED);
+            serviceTimelinePublisher.componentInstanceFinished(
+                instance.getKey(), KILLED_AFTER_APP_COMPLETION,
+                ContainerState.STOPPED, getDiagnostics().toString());
+          }
+
+        LOG.info("Service state changed to {}", finalApplicationStatus);
-        serviceTimelinePublisher
-            .serviceAttemptUnregistered(context, diagnostics.toString());
+        serviceTimelinePublisher.serviceAttemptUnregistered(context,
+            finalApplicationStatus, diagnostics.toString());
+
-      amRMClient.unregisterApplicationMaster(FinalApplicationStatus.ENDED,
+      amRMClient.unregisterApplicationMaster(finalApplicationStatus,
-      LOG.info("Service {} unregistered with RM, with attemptId = {} " +
-          ", diagnostics = {} ", app.getName(), context.attemptId, diagnostics);
+      LOG.info("Service {} unregistered with RM, with attemptId = {} "
+              + ", diagnostics = {} ", app.getName(), context.attemptId,
+          diagnostics);
-  public synchronized void terminateServiceIfAllComponentsFinished() {
+  public void terminateServiceIfAllComponentsFinished() {
-      if (!restartPolicy.shouldTerminate(comp)) {
+
+      if (restartPolicy.shouldTerminate(comp)) {
+        if (restartPolicy.hasCompletedSuccessfully(comp)) {
+          comp.getComponentSpec().setState(org.apache.hadoop
+              .yarn.service.api.records.ComponentState.SUCCEEDED);
+          LOG.info("{} Component state changed from {} to {}",
+              comp.getName(), comp.getComponentSpec().getState(),
+              org.apache.hadoop
+                  .yarn.service.api.records.ComponentState.SUCCEEDED);
+        } else {
+          comp.getComponentSpec().setState(org.apache.hadoop
+              .yarn.service.api.records.ComponentState.FAILED);
+          LOG.info("{} Component state changed from {} to {}",
+              comp.getName(), comp.getComponentSpec().getState(),
+              org.apache.hadoop
+                  .yarn.service.api.records.ComponentState.FAILED);
+        }
+
+        if (isTimelineServiceEnabled()) {
+          // record in ATS
+          serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),
+              comp.getComponentSpec().getState(), systemClock.getTime());
+        }
+      } else {
-      } else{
+      } else {
+      int exitStatus = EXIT_SUCCESS;
-        getTerminationHandler().terminate(EXIT_SUCCESS);
-      } else{
+        app.setState(ServiceState.SUCCEEDED);
+      } else {
-        getTerminationHandler().terminate(EXIT_FALSE);
+        app.setState(ServiceState.FAILED);
+        exitStatus = EXIT_FALSE;
+
+      getTerminationHandler().terminate(exitStatus);
+  public Clock getSystemClock() {
+    return systemClock;
+  }
+
+  public boolean isTimelineServiceEnabled() {
+    return timelineServiceEnabled;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS21 INS21 INS25 INS42 INS41 INS41 INS7 INS7 INS32 INS8 INS42 INS42 INS22 INS32 INS22 INS32 INS42 INS42 INS32 INS21 INS25 INS60 MOV21 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS7 MOV32 INS8 MOV8 INS39 INS59 INS42 INS9 INS60 INS21 INS42 MOV25 INS25 INS42 INS42 INS21 INS21 UPD42 INS83 INS74 INS59 INS8 INS32 INS32 INS8 INS8 INS32 INS8 INS32 INS7 INS43 MOV43 INS43 INS42 MOV32 INS74 INS42 INS42 UPD42 INS25 INS42 INS42 INS45 INS42 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS21 UPD42 MOV42 UPD42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS38 INS8 INS32 INS32 INS32 INS32 INS32 INS40 INS42 INS42 INS32 INS21 MOV21 INS32 INS42 INS40 INS42 INS42 INS45 INS32 INS32 INS40 INS32 INS42 INS40 INS42 INS42 INS45 INS32 INS32 INS40 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS32 INS40 INS32 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL8 DEL42 DEL32 DEL40 DEL83 DEL38 DEL32 DEL42