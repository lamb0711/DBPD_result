YARN-8665.  Added Yarn service cancel upgrade option.
            Contributed by Chandni Singh

+import org.apache.hadoop.yarn.api.records.ContainerId;
-import org.apache.hadoop.yarn.service.api.records.ComponentState;
+import org.apache.hadoop.yarn.service.component.instance.ComponentInstanceEvent;
+import org.apache.hadoop.yarn.service.component.instance.ComponentInstanceEventType;
-import org.apache.hadoop.yarn.state.InvalidStateTransitionException;
-import org.apache.hadoop.yarn.state.MultipleArcTransition;
-import org.apache.hadoop.yarn.state.StateMachine;
-import org.apache.hadoop.yarn.state.StateMachineFactory;
+import org.apache.hadoop.yarn.state.*;
+import java.util.ArrayList;
-import java.util.Queue;
-  private Queue<org.apache.hadoop.yarn.service.api.records
-        .Component> compsToUpgradeInOrder;
+  private List<org.apache.hadoop.yarn.service.api.records
+      .Component> componentsToUpgrade;
+  private List<String> compsAffectedByUpgrade = new ArrayList<>();
+  private String cancelledVersion;
-              new CheckStableTransition())
+              new StartFromUpgradeTransition())
+
+          .addTransition(State.UPGRADING, State.UPGRADING,
+              ServiceEventType.CANCEL_UPGRADE, new CancelUpgradeTransition())
+      serviceManager.componentsToUpgrade = event.getCompsToUpgrade();
+      event.getCompsToUpgrade().forEach(comp ->
+          serviceManager.compsAffectedByUpgrade.add(comp.getName()));
-          serviceManager.serviceSpec.setState(ServiceState.EXPRESS_UPGRADING);
-          serviceManager.compsToUpgradeInOrder = event
-              .getCompsToUpgradeInOrder();
-          serviceManager.upgradeNextCompIfAny();
-        } else if (event.isAutoFinalize()) {
-          serviceManager.serviceSpec.setState(ServiceState
-              .UPGRADING_AUTO_FINALIZE);
+          serviceManager.dispatchNeedUpgradeEvents(false);
+          serviceManager.upgradeNextCompIfAny(false);
-          serviceManager.serviceSpec.setState(
-              ServiceState.UPGRADING);
+          serviceManager.dispatchNeedUpgradeEvents(false);
+
+        if (event.isExpressUpgrade()) {
+          serviceManager.setServiceState(ServiceState.EXPRESS_UPGRADING);
+        } else if (event.isAutoFinalize()) {
+          serviceManager.setServiceState(ServiceState.UPGRADING_AUTO_FINALIZE);
+        } else {
+          serviceManager.setServiceState(ServiceState.UPGRADING);
+        }
+
-      if (currState.equals(ServiceState.EXPRESS_UPGRADING)) {
-        org.apache.hadoop.yarn.service.api.records.Component component =
-            serviceManager.compsToUpgradeInOrder.peek();
-        if (!component.getState().equals(ComponentState.NEEDS_UPGRADE) &&
-            !component.getState().equals(ComponentState.UPGRADING)) {
-          serviceManager.compsToUpgradeInOrder.remove();
+      if (currState.equals(ServiceState.EXPRESS_UPGRADING) ||
+          currState.equals(ServiceState.CANCEL_UPGRADING)) {
+
+        if (!serviceManager.componentsToUpgrade.isEmpty()) {
+          org.apache.hadoop.yarn.service.api.records.Component compSpec =
+              serviceManager.componentsToUpgrade.get(0);
+          Component component = serviceManager.scheduler.getAllComponents()
+              .get(compSpec.getName());
+
+          if (!component.isUpgrading()) {
+            serviceManager.componentsToUpgrade.remove(0);
+            serviceManager.upgradeNextCompIfAny(
+                currState.equals(ServiceState.CANCEL_UPGRADING));
+          }
-        serviceManager.upgradeNextCompIfAny();
+
-          event.getType().equals(ServiceEventType.START) ||
-          (currState.equals(ServiceState.EXPRESS_UPGRADING) &&
-              serviceManager.compsToUpgradeInOrder.isEmpty())) {
+          ((currState.equals(ServiceState.EXPRESS_UPGRADING) ||
+              currState.equals(ServiceState.CANCEL_UPGRADING)) &&
+              serviceManager.componentsToUpgrade.isEmpty())) {
+
-          if (serviceManager.finalizeUpgrade()) {
-            LOG.info("Service def state changed from {} -> {}", currState,
-                serviceManager.serviceSpec.getState());
+          if (serviceManager.finalizeUpgrade(
+              currState.equals(ServiceState.CANCEL_UPGRADING))) {
-  private void upgradeNextCompIfAny() {
-    if (!compsToUpgradeInOrder.isEmpty()) {
-      org.apache.hadoop.yarn.service.api.records.Component component =
-          compsToUpgradeInOrder.peek();
+  private static class StartFromUpgradeTransition implements
+      MultipleArcTransition<ServiceManager, ServiceEvent, State> {
-      ComponentEvent needUpgradeEvent = new ComponentEvent(
-          component.getName(), ComponentEventType.UPGRADE).setTargetSpec(
-          component).setUpgradeVersion(upgradeVersion).setExpressUpgrade(true);
-      context.scheduler.getDispatcher().getEventHandler().handle(
-          needUpgradeEvent);
+    @Override
+    public State transition(ServiceManager serviceManager, ServiceEvent event) {
+      ServiceState currState = serviceManager.serviceSpec.getState();
+
+      ServiceState targetState = checkIfStable(serviceManager.serviceSpec);
+      if (targetState.equals(ServiceState.STABLE)) {
+        if (serviceManager.finalizeUpgrade(
+            currState.equals(ServiceState.CANCEL_UPGRADING))) {
+          return State.STABLE;
+        }
+      }
+      return State.UPGRADING;
+    }
+  }
+
+  private static class CancelUpgradeTransition implements
+      SingleArcTransition<ServiceManager, ServiceEvent> {
+
+    @Override
+    public void transition(ServiceManager serviceManager,
+        ServiceEvent event) {
+      if (!serviceManager.getState().equals(State.UPGRADING)) {
+        LOG.info("[SERVICE]: Cannot cancel the upgrade in {} state",
+            serviceManager.getState());
+        return;
+      }
+      try {
+        Service targetSpec = ServiceApiUtil.loadService(
+            serviceManager.context.fs, serviceManager.getName());
+
+        Service sourceSpec = ServiceApiUtil.loadServiceUpgrade(
+            serviceManager.context.fs, serviceManager.getName(),
+            serviceManager.upgradeVersion);
+        serviceManager.cancelledVersion = serviceManager.upgradeVersion;
+        LOG.info("[SERVICE] cancel version {}",
+            serviceManager.cancelledVersion);
+        serviceManager.upgradeVersion = serviceManager.serviceSpec.getVersion();
+        serviceManager.componentsToUpgrade = serviceManager
+            .resolveCompsToUpgrade(sourceSpec, targetSpec);
+
+        serviceManager.compsAffectedByUpgrade.clear();
+        serviceManager.componentsToUpgrade.forEach(comp ->
+            serviceManager.compsAffectedByUpgrade.add(comp.getName()));
+
+        serviceManager.dispatchNeedUpgradeEvents(true);
+        serviceManager.upgradeNextCompIfAny(true);
+        serviceManager.setServiceState(ServiceState.CANCEL_UPGRADING);
+      } catch (Throwable e) {
+        LOG.error("[SERVICE]: Cancellation of upgrade failed", e);
+      }
+    }
+  }
+
+  private void upgradeNextCompIfAny(boolean cancelUpgrade) {
+    if (!componentsToUpgrade.isEmpty()) {
+      org.apache.hadoop.yarn.service.api.records.Component component =
+          componentsToUpgrade.get(0);
+
+      serviceSpec.getComponent(component.getName()).getContainers().forEach(
+          container -> {
+            ComponentInstanceEvent upgradeEvent = new ComponentInstanceEvent(
+                ContainerId.fromString(container.getId()),
+                !cancelUpgrade ? ComponentInstanceEventType.UPGRADE :
+                    ComponentInstanceEventType.CANCEL_UPGRADE);
+            LOG.info("Upgrade container {} {}", container.getId(),
+                cancelUpgrade);
+            dispatcher.getEventHandler().handle(upgradeEvent);
+          });
+    }
+  }
+
+  private void dispatchNeedUpgradeEvents(boolean cancelUpgrade) {
+    if (componentsToUpgrade != null) {
+      componentsToUpgrade.forEach(component -> {
+        ComponentEvent needUpgradeEvent = new ComponentEvent(
+            component.getName(), !cancelUpgrade ? ComponentEventType.UPGRADE :
+            ComponentEventType.CANCEL_UPGRADE)
+            .setTargetSpec(component)
+            .setUpgradeVersion(upgradeVersion);
+        LOG.info("Upgrade component {} {}", component.getName(), cancelUpgrade);
+        context.scheduler.getDispatcher().getEventHandler()
+            .handle(needUpgradeEvent);
+      });
-  private boolean finalizeUpgrade() {
-    try {
-      // save the application id and state to
-      Service targetSpec = ServiceApiUtil.loadServiceUpgrade(
-          fs, getName(), upgradeVersion);
-      targetSpec.setId(serviceSpec.getId());
-      targetSpec.setState(ServiceState.STABLE);
-      Map<String, Component> allComps = scheduler.getAllComponents();
-      targetSpec.getComponents().forEach(compSpec -> {
-        Component comp = allComps.get(compSpec.getName());
-        compSpec.setState(comp.getComponentSpec().getState());
-      });
-      jsonSerDeser.save(fs.getFileSystem(),
-          ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);
-      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);
-    } catch (IOException e) {
-      LOG.error("Upgrade did not complete because unable to re-write the" +
-          " service definition", e);
-      return false;
+  private boolean finalizeUpgrade(boolean cancelUpgrade) {
+    if (!cancelUpgrade) {
+      try {
+        // save the application id and state to
+        Service targetSpec = ServiceApiUtil.loadServiceUpgrade(
+            fs, getName(), upgradeVersion);
+        targetSpec.setId(serviceSpec.getId());
+        targetSpec.setState(ServiceState.STABLE);
+        Map<String, Component> allComps = scheduler.getAllComponents();
+        targetSpec.getComponents().forEach(compSpec -> {
+          Component comp = allComps.get(compSpec.getName());
+          compSpec.setState(comp.getComponentSpec().getState());
+        });
+        jsonSerDeser.save(fs.getFileSystem(),
+            ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);
+      } catch (IOException e) {
+        LOG.error("Upgrade did not complete because unable to re-write the" +
+            " service definition", e);
+        return false;
+      }
-      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);
+      String upgradeVersionToDel = cancelUpgrade? cancelledVersion :
+          upgradeVersion;
+      LOG.info("[SERVICE]: delete upgrade dir version {}", upgradeVersionToDel);
+      fs.deleteClusterUpgradeDir(getName(), upgradeVersionToDel);
+
+      for (String comp : compsAffectedByUpgrade) {
+        String compDirVersionToDel = cancelUpgrade? cancelledVersion :
+            serviceSpec.getVersion();
+        LOG.info("[SERVICE]: delete {} dir version {}",  comp,
+            compDirVersionToDel);
+        fs.deleteComponentDir(compDirVersionToDel, comp);
+      }
+
+      if (cancelUpgrade) {
+        fs.deleteComponentsVersionDirIfEmpty(cancelledVersion);
+      } else {
+        fs.deleteComponentsVersionDirIfEmpty(serviceSpec.getVersion());
+      }
+
-    serviceSpec.setState(ServiceState.STABLE);
+    setServiceState(ServiceState.STABLE);
+    cancelledVersion = null;
+    compsAffectedByUpgrade.clear();
+        compsNeedUpgradeList = resolveCompsToUpgrade(context.service,
+        targetSpec);
+
+    ServiceEvent event = new ServiceEvent(ServiceEventType.UPGRADE)
+        .setVersion(upgradeVersion)
+        .setAutoFinalize(autoFinalize)
+        .setExpressUpgrade(expressUpgrade);
+
+    if (expressUpgrade) {
+      // In case of express upgrade  components need to be upgraded in order.
+      // Once the service manager gets notified that a component finished
+      // upgrading, it then issues event to upgrade the next component.
+      Map<String, org.apache.hadoop.yarn.service.api.records.Component>
+          compsNeedUpgradeByName = new HashMap<>();
+      if (compsNeedUpgradeList != null) {
+        compsNeedUpgradeList.forEach(component ->
+            compsNeedUpgradeByName.put(component.getName(), component));
+      }
+      List<String> resolvedComps = ServiceApiUtil
+          .resolveCompsDependency(targetSpec);
+
+      List<org.apache.hadoop.yarn.service.api.records.Component>
+          orderedCompUpgrade = new LinkedList<>();
+      resolvedComps.forEach(compName -> {
+        org.apache.hadoop.yarn.service.api.records.Component component =
+            compsNeedUpgradeByName.get(compName);
+        if (component != null ) {
+          orderedCompUpgrade.add(component);
+        }
+      });
+      event.setCompsToUpgrade(orderedCompUpgrade);
+    } else {
+      event.setCompsToUpgrade(compsNeedUpgradeList);
+    }
+    context.scheduler.getDispatcher().getEventHandler().handle(
+        event);
+
+    if (autoFinalize && (compsNeedUpgradeList == null ||
+        compsNeedUpgradeList.isEmpty())) {
+      // nothing to upgrade and auto finalize is requested, trigger a
+      // state check.
+      context.scheduler.getDispatcher().getEventHandler().handle(
+          new ServiceEvent(ServiceEventType.CHECK_STABLE));
+    }
+  }
+
+  private List<org.apache.hadoop.yarn.service.api.records.Component>
+      resolveCompsToUpgrade(Service sourceSpec, Service targetSpec) {
+
+    List<org.apache.hadoop.yarn.service.api.records.Component>
-        findTargetComponentSpecs(context.service, targetSpec);
+        findTargetComponentSpecs(sourceSpec, targetSpec);
-    ServiceEvent event = new ServiceEvent(ServiceEventType.UPGRADE)
-        .setVersion(upgradeVersion)
-        .setAutoFinalize(autoFinalize)
-        .setExpressUpgrade(expressUpgrade);
+    return compsNeedUpgradeList;
+  }
-    if (expressUpgrade) {
-      // In case of express upgrade  components need to be upgraded in order.
-      // Once the service manager gets notified that a component finished
-      // upgrading, it then issues event to upgrade the next component.
-      Map<String, org.apache.hadoop.yarn.service.api.records.Component>
-          compsNeedUpgradeByName = new HashMap<>();
-      if (compsNeedUpgradeList != null) {
-        compsNeedUpgradeList.forEach(component ->
-            compsNeedUpgradeByName.put(component.getName(), component));
-      }
-      List<String> resolvedComps = ServiceApiUtil
-          .resolveCompsDependency(targetSpec);
-
-      Queue<org.apache.hadoop.yarn.service.api.records.Component>
-          orderedCompUpgrade = new LinkedList<>();
-      resolvedComps.forEach(compName -> {
-        org.apache.hadoop.yarn.service.api.records.Component component =
-            compsNeedUpgradeByName.get(compName);
-        if (component != null ) {
-          orderedCompUpgrade.add(component);
-        }
-      });
-      event.setCompsToUpgradeInOrder(orderedCompUpgrade);
-    }
-
-    context.scheduler.getDispatcher().getEventHandler().handle(event);
-
-    if (compsNeedUpgradeList != null && !compsNeedUpgradeList.isEmpty()) {
-      if (!expressUpgrade) {
-        compsNeedUpgradeList.forEach(component -> {
-          ComponentEvent needUpgradeEvent = new ComponentEvent(
-              component.getName(), ComponentEventType.UPGRADE).setTargetSpec(
-              component).setUpgradeVersion(event.getVersion());
-          context.scheduler.getDispatcher().getEventHandler().handle(
-              needUpgradeEvent);
-
-        });
-      }
-    }  else if (autoFinalize) {
-      // nothing to upgrade if upgrade auto finalize is requested, trigger a
-      // state check.
-      context.scheduler.getDispatcher().getEventHandler().handle(
-          new ServiceEvent(ServiceEventType.CHECK_STABLE));
+  /**
+   * Sets the state of the service in the service spec.
+   * @param state service state
+   */
+  private void setServiceState(
+      org.apache.hadoop.yarn.service.api.records.ServiceState state) {
+    org.apache.hadoop.yarn.service.api.records.ServiceState curState =
+        serviceSpec.getState();
+    if (!curState.equals(state)) {
+      serviceSpec.setState(state);
+      LOG.info("[SERVICE] spec state changed from {} -> {}", curState, state);

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS23 INS55 INS55 INS31 INS31 INS31 INS31 UPD74 INS83 INS74 INS59 INS83 INS43 INS59 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 UPD43 UPD42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS8 INS43 INS43 INS43 INS43 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS78 INS83 MOV39 INS42 INS44 INS44 INS8 INS39 INS42 INS25 INS39 INS42 INS25 INS39 INS42 INS25 INS54 INS21 MOV21 MOV21 INS21 INS21 MOV41 MOV25 INS43 INS43 INS43 INS42 INS43 INS42 INS60 MOV25 INS41 INS65 INS65 INS43 INS42 INS60 INS25 UPD42 INS42 INS42 INS74 MOV32 INS42 MOV21 MOV21 INS21 INS54 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS54 MOV38 INS8 INS27 INS8 INS38 MOV8 INS8 MOV12 INS32 INS7 INS32 INS8 INS27 INS42 INS40 INS42 INS42 INS74 INS59 INS42 INS66 INS42 INS66 INS40 INS43 INS59 INS38 INS8 INS43 UPD42 INS40 INS40 INS40 INS14 INS32 INS8 MOV12 UPD27 MOV27 INS8 INS27 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS40 INS42 INS42 INS38 INS8 INS8 INS12 MOV60 INS21 INS42 INS33 INS21 INS42 INS60 INS21 INS21 INS70 INS25 INS42 INS40 INS42 INS33 INS42 INS42 INS21 INS42 INS36 INS43 INS43 INS42 INS32 INS40 INS42 INS32 INS32 INS21 INS21 INS42 MOV14 INS43 UPD40 INS32 INS42 INS86 INS25 INS25 MOV41 MOV25 MOV32 INS36 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS25 INS32 INS21 INS41 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS44 INS8 UPD42 MOV43 INS32 INS32 INS43 INS59 INS32 INS32 INS44 INS42 INS8 INS42 INS8 INS8 UPD42 UPD74 INS32 UPD27 MOV27 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS14 INS42 UPD42 INS42 INS42 INS59 INS32 INS32 INS8 INS8 MOV32 INS8 MOV25 INS42 INS42 UPD40 INS38 INS27 INS40 INS42 INS42 INS40 INS32 INS8 INS32 INS42 INS40 INS32 INS43 INS59 INS43 INS59 INS7 INS32 INS7 INS7 INS32 INS32 INS32 INS32 INS32 INS43 INS42 INS21 INS32 INS42 INS86 INS42 INS42 INS86 INS42 INS42 INS16 INS42 INS42 INS45 INS42 INS42 INS42 MOV32 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS21 UPD43 UPD42 INS42 INS42 INS42 UPD27 MOV32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS40 INS42 INS32 INS42 INS42 INS21 MOV21 INS21 INS21 INS32 INS60 INS25 INS36 INS32 INS42 INS42 INS32 INS41 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS40 INS42 INS42 INS45 INS40 INS40 INS32 INS40 INS32 INS40 INS42 INS40 INS42 INS86 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS40 INS42 INS32 UPD42 UPD42 INS34 INS32 INS42 INS59 INS8 MOV59 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS32 UPD42 INS42 INS42 INS42 INS32 INS32 INS32 INS40 INS42 MOV43 INS43 INS59 INS38 INS8 INS27 INS40 INS42 INS32 INS8 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS59 INS32 INS42 INS42 INS45 INS42 INS42 INS42 MOV32 INS42 INS60 INS21 INS21 INS60 INS21 MOV21 INS42 INS42 INS16 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS9 INS42 INS42 INS9 INS42 INS42 INS40 UPD42 INS42 INS42 INS32 INS32 MOV21 MOV21 MOV32 MOV32 MOV42 MOV42 INS32 MOV41 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 UPD43 MOV43 INS59 INS32 INS32 MOV43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD40 UPD42 INS34 INS32 UPD42 MOV42 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 UPD40 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 INS42 INS42 UPD42 UPD42 MOV42 INS14 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 UPD42 MOV42 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS42 UPD40 INS34 INS32 INS43 INS32 INS16 INS42 INS42 INS42 INS42 MOV32 MOV42 MOV42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS38 INS40 INS40 INS42 INS42 INS42 MOV43 MOV32 INS16 INS38 INS40 INS40 INS42 DEL40 DEL26 DEL42 DEL43 DEL14 DEL40 DEL40 DEL40 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL42 DEL32 DEL40 DEL32 DEL38 DEL32 DEL42 DEL40 DEL32 DEL38 DEL27 DEL8 DEL25 DEL42 DEL32 DEL36 DEL27 DEL32 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL40 DEL83 DEL42 DEL32 DEL9 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL38 DEL42 DEL42 DEL38 DEL42 DEL42 DEL42 DEL40 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL86 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25