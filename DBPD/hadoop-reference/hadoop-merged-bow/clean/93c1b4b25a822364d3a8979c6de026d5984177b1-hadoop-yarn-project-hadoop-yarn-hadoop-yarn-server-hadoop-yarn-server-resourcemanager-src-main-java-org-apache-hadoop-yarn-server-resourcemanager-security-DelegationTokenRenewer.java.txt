Merge r1414455:r1426018 from trunk

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1432246 13f79535-47bb-0310-9956-ffa450edef68

+    // find tokens for renewal, but don't add timers until we know
+    // all renewable tokens are valid
+    Set<DelegationTokenToRenew> dtrs = new HashSet<DelegationTokenToRenew>();
-
-        addTokenToList(dtr);
-      
-        setTimerForTokenRenewal(dtr, true);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Registering token for renewal for:" +
-              " service = " + token.getService() + 
-              " for appId = " + applicationId);
-        }
+        renewToken(dtr);
+        dtrs.add(dtr);
+      }
+    }
+    for (DelegationTokenToRenew dtr : dtrs) {
+      addTokenToList(dtr);
+      setTimerForTokenRenewal(dtr);
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Registering token for renewal for:" +
+            " service = " + dtr.token.getService() +
+            " for appId = " + applicationId);
+    private boolean cancelled = false;
-    public void run() {
+    public synchronized void run() {
+      if (cancelled) {
+        return;
+      }
+
-        // need to use doAs so that http can find the kerberos tgt
-        dttr.expirationDate = UserGroupInformation.getLoginUser()
-          .doAs(new PrivilegedExceptionAction<Long>(){
-
-          @Override
-          public Long run() throws Exception {
-            return dttr.token.renew(dttr.conf);
-          }
-        });
-
+        renewToken(dttr);
-        setTimerForTokenRenewal(dttr, false);// set the next one
+        setTimerForTokenRenewal(dttr);// set the next one
+
+    @Override
+    public synchronized boolean cancel() {
+      cancelled = true;
+      return super.cancel();
+    }
-  private 
-  void setTimerForTokenRenewal(DelegationTokenToRenew token, 
-                               boolean firstTime) throws IOException {
+  private void setTimerForTokenRenewal(DelegationTokenToRenew token)
+      throws IOException {
-    long now = System.currentTimeMillis();
-    long renewIn;
-    if(firstTime) {
-      renewIn = now;
-    } else {
-      long expiresIn = (token.expirationDate - now); 
-      renewIn = now + expiresIn - expiresIn/10; // little bit before the expiration
-    }
+    long expiresIn = token.expirationDate - System.currentTimeMillis();
+    long renewIn = token.expirationDate - expiresIn/10; // little bit before the expiration
+  // renew a token
+  private void renewToken(final DelegationTokenToRenew dttr)
+      throws IOException {
+    // need to use doAs so that http can find the kerberos tgt
+    // NOTE: token renewers should be responsible for the correct UGI!
+    try {
+      dttr.expirationDate = UserGroupInformation.getLoginUser().doAs(
+          new PrivilegedExceptionAction<Long>(){          
+            @Override
+            public Long run() throws Exception {
+              return dttr.token.renew(dttr.conf);
+            }
+          });
+    } catch (InterruptedException e) {
+      throw new IOException(e);
+    }
+  }
+

INS31 INS23 INS31 INS83 INS39 INS42 INS44 INS43 INS8 INS60 INS70 INS83 INS39 INS59 INS83 INS78 INS83 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS42 INS54 INS74 INS59 INS44 INS42 INS8 INS42 INS9 INS25 INS42 INS21 INS41 INS42 MOV8 INS12 INS43 INS43 INS42 INS14 INS43 INS42 MOV21 INS21 INS25 INS42 INS8 INS8 INS7 INS48 UPD42 INS27 MOV27 INS44 INS8 INS42 INS42 INS74 INS42 INS32 MOV32 INS8 INS41 INS21 MOV25 INS21 INS42 INS9 INS42 INS40 INS32 INS40 INS43 INS42 INS53 INS43 INS43 MOV21 INS42 INS42 INS21 INS32 INS32 MOV42 MOV42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS42 MOV27 INS32 INS45 INS42 INS40 INS42 DEL9 DEL42 DEL32 DEL45 DEL42 DEL27 DEL8 DEL25 DEL39 DEL42 DEL44 DEL32 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL7 DEL21 DEL8 DEL39 DEL42 DEL40 DEL42 DEL27 DEL36 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL21