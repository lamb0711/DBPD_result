HADOOP-14993. AliyunOSS: Override listFiles and listLocatedStatus. Contributed Genmao Yu

+import org.apache.hadoop.fs.BlockLocation;
+import org.apache.hadoop.fs.LocatedFileStatus;
+import org.apache.hadoop.fs.PathFilter;
+import org.apache.hadoop.fs.RemoteIterator;
+import static org.apache.hadoop.fs.aliyun.oss.AliyunOSSUtils.objectRepresentsDirectory;
+  private static final PathFilter DEFAULT_FILTER = new PathFilter() {
+    @Override
+    public boolean accept(Path file) {
+      return true;
+    }
+  };
-   * Check if OSS object represents a directory.
-   *
-   * @param name object key
-   * @param size object content length
-   * @return true if object represents a directory
-   */
-  private boolean objectRepresentsDirectory(final String name,
-      final long size) {
-    return StringUtils.isNotEmpty(name) && name.endsWith("/") && size == 0L;
-  }
-
-  /**
+  @Override
+  public RemoteIterator<LocatedFileStatus> listFiles(
+      final Path f, final boolean recursive) throws IOException {
+    Path qualifiedPath = f.makeQualified(uri, workingDir);
+    final FileStatus status = getFileStatus(qualifiedPath);
+    PathFilter filter = new PathFilter() {
+      @Override
+      public boolean accept(Path path) {
+        return status.isFile() || !path.equals(f);
+      }
+    };
+    FileStatusAcceptor acceptor =
+        new FileStatusAcceptor.AcceptFilesOnly(qualifiedPath);
+    return innerList(f, status, filter, acceptor, recursive);
+  }
+
+  @Override
+  public RemoteIterator<LocatedFileStatus> listLocatedStatus(Path f)
+      throws IOException {
+    return listLocatedStatus(f, DEFAULT_FILTER);
+  }
+
+  @Override
+  public RemoteIterator<LocatedFileStatus> listLocatedStatus(final Path f,
+      final PathFilter filter) throws IOException {
+    Path qualifiedPath = f.makeQualified(uri, workingDir);
+    final FileStatus status = getFileStatus(qualifiedPath);
+    FileStatusAcceptor acceptor =
+        new FileStatusAcceptor.AcceptAllButSelf(qualifiedPath);
+    return innerList(f, status, filter, acceptor, false);
+  }
+
+  private RemoteIterator<LocatedFileStatus> innerList(final Path f,
+      final FileStatus status,
+      final PathFilter filter,
+      final FileStatusAcceptor acceptor,
+      final boolean recursive) throws IOException {
+    Path qualifiedPath = f.makeQualified(uri, workingDir);
+    String key = pathToKey(qualifiedPath);
+
+    if (status.isFile()) {
+      LOG.debug("{} is a File", qualifiedPath);
+      final BlockLocation[] locations = getFileBlockLocations(status,
+        0, status.getLen());
+      return store.singleStatusRemoteIterator(filter.accept(f) ? status : null,
+        locations);
+    } else {
+      return store.createLocatedFileStatusIterator(key, maxKeys, this, filter,
+        acceptor, recursive ? null : "/");
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS78 INS83 INS74 INS42 MOV44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS44 MOV44 INS43 MOV8 INS42 INS42 INS14 INS42 INS43 INS43 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS60 INS60 INS60 INS60 INS41 INS42 INS43 INS43 INS43 INS42 INS42 INS41 INS42 INS43 INS43 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS60 INS60 INS41 INS43 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 UPD39 UPD42 INS42 INS60 INS60 INS25 INS43 INS1 INS42 INS42 INS42 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 MOV43 INS59 INS32 INS8 INS8 INS42 INS31 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS60 INS41 INS41 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS1 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS83 INS5 INS59 INS32 INS32 INS42 INS43 INS42 INS41 INS42 INS31 INS40 INS40 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS16 INS42 INS9 INS78 UPD83 MOV83 MOV39 INS42 INS44 INS8 INS42 INS42 INS42 INS34 INS32 INS32 INS42 INS33 INS42 INS33 INS45 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS38 INS42 INS42 INS32 INS42 INS42 INS42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL31 DEL42 DEL32 DEL32 DEL42 DEL34 DEL27 DEL27 DEL41