YARN-2582. Fixed Log CLI and Web UI for showing aggregated logs of LRS. Contributed Xuan Gong.

+import org.apache.hadoop.fs.FileContext;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.RemoteIterator;
-    AggregatedLogFormat.LogReader reader = null;
+    ContainerId containerId = verifyAndGetContainerId(html);
+    NodeId nodeId = verifyAndGetNodeId(html);
+    String appOwner = verifyAndGetAppOwner(html);
+    LogLimits logLimits = verifyAndGetLogLimits(html);
+    if (containerId == null || nodeId == null || appOwner == null
+        || appOwner.isEmpty() || logLimits == null) {
+      return;
+    }
+
+    ApplicationId applicationId = containerId.getApplicationAttemptId()
+        .getApplicationId();
+    String logEntity = $(ENTITY_STRING);
+    if (logEntity == null || logEntity.isEmpty()) {
+      logEntity = containerId.toString();
+    }
+
+    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,
+        YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {
+      html.h1()
+          ._("Aggregation is not enabled. Try the nodemanager at " + nodeId)
+          ._();
+      return;
+    }
+
+    Path remoteRootLogDir = new Path(conf.get(
+        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
+        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
+    Path remoteAppDir = LogAggregationUtils.getRemoteAppLogDir(
+        remoteRootLogDir, applicationId, appOwner,
+        LogAggregationUtils.getRemoteNodeLogDirSuffix(conf));
+    RemoteIterator<FileStatus> nodeFiles;
-      ContainerId containerId = verifyAndGetContainerId(html);
-      NodeId nodeId = verifyAndGetNodeId(html);
-      String appOwner = verifyAndGetAppOwner(html);
-      LogLimits logLimits = verifyAndGetLogLimits(html);
-      if (containerId == null || nodeId == null || appOwner == null
-          || appOwner.isEmpty() || logLimits == null) {
-        return;
-      }
+      Path qualifiedLogDir =
+          FileContext.getFileContext(conf).makeQualified(
+            remoteAppDir);
+      nodeFiles =
+          FileContext.getFileContext(qualifiedLogDir.toUri(), conf)
+            .listStatus(remoteAppDir);
+    } catch (FileNotFoundException fnf) {
+      html.h1()
+          ._("Logs not available for " + logEntity
+              + ". Aggregation may not be complete, "
+              + "Check back later or try the nodemanager at " + nodeId)._();
+      return;
+    } catch (Exception ex) {
+      html.h1()
+          ._("Error getting logs at " + nodeId)._();
+      return;
+    }
-      ApplicationId applicationId = containerId.getApplicationAttemptId()
-          .getApplicationId();
-      String logEntity = $(ENTITY_STRING);
-      if (logEntity == null || logEntity.isEmpty()) {
-        logEntity = containerId.toString();
-      }
-
-      if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,
-          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {
-        html.h1()
-            ._("Aggregation is not enabled. Try the nodemanager at " + nodeId)
-            ._();
-        return;
-      }
-
-      Path remoteRootLogDir = new Path(conf.get(
-          YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-          YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-
-      try {
-        reader = new AggregatedLogFormat.LogReader(conf,
-            LogAggregationUtils.getRemoteNodeLogFileForApp(remoteRootLogDir,
-                applicationId, appOwner, nodeId,
-                LogAggregationUtils.getRemoteNodeLogDirSuffix(conf)));
-      } catch (FileNotFoundException e) {
-        // ACLs not available till the log file is opened.
-        html.h1()
-            ._("Logs not available for " + logEntity
-                + ". Aggregation may not be complete, "
-                + "Check back later or try the nodemanager at " + nodeId)._();
-        return;
-      } catch (IOException e) {
-        html.h1()._("Error getting logs for " + logEntity)._();
-        LOG.error("Error getting logs for " + logEntity, e);
-        return;
-      }
-
-      String owner = null;
-      Map<ApplicationAccessType, String> appAcls = null;
-      try {
-        owner = reader.getApplicationOwner();
-        appAcls = reader.getApplicationAcls();
-      } catch (IOException e) {
-        html.h1()._("Error getting logs for " + logEntity)._();
-        LOG.error("Error getting logs for " + logEntity, e);
-        return;
-      }
-      ApplicationACLsManager aclsManager = new ApplicationACLsManager(conf);
-      aclsManager.addApplication(applicationId, appAcls);
-
-      String remoteUser = request().getRemoteUser();
-      UserGroupInformation callerUGI = null;
-      if (remoteUser != null) {
-        callerUGI = UserGroupInformation.createRemoteUser(remoteUser);
-      }
-      if (callerUGI != null
-          && !aclsManager.checkAccess(callerUGI,
-              ApplicationAccessType.VIEW_APP, owner, applicationId)) {
-        html.h1()
-            ._("User [" + remoteUser
-                + "] is not authorized to view the logs for " + logEntity)._();
-        return;
-      }
-
-      String desiredLogType = $(CONTAINER_LOG_TYPE);
-      try {
-        AggregatedLogFormat.ContainerLogsReader logReader = reader
-            .getContainerLogsReader(containerId);
-        if (logReader == null) {
-          html.h1()
-              ._("Logs not available for " + logEntity
-                  + ". Could be caused by the rentention policy")._();
-          return;
-        }
-
-        boolean foundLog = readContainerLogs(html, logReader, logLimits,
-            desiredLogType);
-
-        if (!foundLog) {
-          if (desiredLogType.isEmpty()) {
-            html.h1("No logs available for container " + containerId.toString());
-          } else {
-            html.h1("Unable to locate '" + desiredLogType
-                + "' log for container " + containerId.toString());
+    boolean foundLog = false;
+    String desiredLogType = $(CONTAINER_LOG_TYPE);
+    try {
+      while (nodeFiles.hasNext()) {
+        AggregatedLogFormat.LogReader reader = null;
+        try {
+          FileStatus thisNodeFile = nodeFiles.next();
+          if (!thisNodeFile.getPath().getName()
+            .contains(LogAggregationUtils.getNodeString(nodeId))
+              || thisNodeFile.getPath().getName()
+                .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
+            continue;
-          return;
+          reader =
+              new AggregatedLogFormat.LogReader(conf, thisNodeFile.getPath());
+
+          String owner = null;
+          Map<ApplicationAccessType, String> appAcls = null;
+          try {
+            owner = reader.getApplicationOwner();
+            appAcls = reader.getApplicationAcls();
+          } catch (IOException e) {
+            LOG.error("Error getting logs for " + logEntity, e);
+            continue;
+          }
+          ApplicationACLsManager aclsManager = new ApplicationACLsManager(conf);
+          aclsManager.addApplication(applicationId, appAcls);
+
+          String remoteUser = request().getRemoteUser();
+          UserGroupInformation callerUGI = null;
+          if (remoteUser != null) {
+            callerUGI = UserGroupInformation.createRemoteUser(remoteUser);
+          }
+          if (callerUGI != null && !aclsManager.checkAccess(callerUGI,
+              ApplicationAccessType.VIEW_APP, owner, applicationId)) {
+            html.h1()
+                ._("User [" + remoteUser
+                    + "] is not authorized to view the logs for " + logEntity
+                    + " in log file [" + thisNodeFile.getPath().getName() + "]")._();
+            LOG.error("User [" + remoteUser
+              + "] is not authorized to view the logs for " + logEntity);
+            continue;
+          }
+
+          AggregatedLogFormat.ContainerLogsReader logReader = reader
+            .getContainerLogsReader(containerId);
+          if (logReader == null) {
+            continue;
+          }
+
+          foundLog = readContainerLogs(html, logReader, logLimits,
+              desiredLogType);
+        } catch (IOException ex) {
+          LOG.error("Error getting logs for " + logEntity, ex);
+          continue;
+        } finally {
+          if (reader != null)
+            reader.close();
-      } catch (IOException e) {
-        html.h1()._("Error getting logs for " + logEntity)._();
-        LOG.error("Error getting logs for " + logEntity, e);
-        return;
-    } finally {
-      if (reader != null) {
-        reader.close();
+      if (!foundLog) {
+        if (desiredLogType.isEmpty()) {
+          html.h1("No logs available for container " + containerId.toString());
+        } else {
+          html.h1("Unable to locate '" + desiredLogType
+              + "' log for container " + containerId.toString());
+        }
+    } catch (IOException e) {
+      html.h1()._("Error getting logs for " + logEntity)._();
+      LOG.error("Error getting logs for " + logEntity, e);

INS26 INS26 INS26 INS40 INS40 INS40 MOV8 INS60 INS60 INS54 INS60 INS54 INS43 INS59 INS74 INS59 INS8 MOV12 INS12 INS39 INS59 INS8 MOV12 INS42 INS42 INS32 INS43 INS43 INS42 INS60 INS21 MOV44 INS8 INS42 INS9 INS61 MOV25 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV32 INS42 INS42 INS43 INS59 INS7 UPD42 UPD43 UPD42 MOV21 INS41 INS32 INS8 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 MOV60 INS54 INS32 INS42 INS42 INS32 INS42 INS42 INS8 INS12 MOV8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV32 INS60 INS25 INS21 MOV60 MOV60 MOV54 MOV60 MOV21 MOV60 MOV60 MOV25 MOV25 MOV60 INS25 INS21 INS44 INS8 INS42 INS42 UPD45 UPD42 INS43 INS59 INS27 INS8 INS7 MOV27 INS8 INS7 INS43 INS42 MOV21 INS18 MOV27 MOV21 INS42 INS42 INS32 INS38 INS32 INS18 INS42 INS14 INS21 INS18 INS18 INS42 MOV32 INS42 INS42 INS42 INS32 INS32 INS42 INS40 MOV43 INS42 INS32 INS18 INS32 MOV32 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL41 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL42 DEL32 DEL21 DEL41 DEL42 DEL32 DEL41 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL42 DEL32 DEL21 DEL41 DEL8 DEL39 DEL42 DEL59 DEL60 DEL41 DEL41 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8