HDFS-12794. Ozone: Parallelize ChunkOutputSream Writes to container. Contributed by Shashikant Banerjee.

+import com.google.common.primitives.Ints;
+import org.apache.commons.lang.StringUtils;
+import org.apache.hadoop.ozone.OzoneConsts;
+import static org.apache.hadoop.ozone.OzoneConfigKeys
+    .OZONE_OUTPUT_STREAM_BUFFER_SIZE_DEFAULT;
+
+  private final long streamBufferSize;
+    streamBufferSize = OZONE_OUTPUT_STREAM_BUFFER_SIZE_DEFAULT * OzoneConsts.MB;
-  public ChunkGroupOutputStream(
+  /**
+   * Chunkoutput stream, making this package visible since this can be
+   * created only via builder.
+   * @param handler  - Open Key state.
+   * @param xceiverClientManager - Communication Manager.
+   * @param scmClient - SCM protocol Client.
+   * @param ksmClient - KSM Protocol client
+   * @param chunkSize - Chunk Size - I/O
+   * @param requestId - Seed for trace ID generation.
+   * @param factor - Replication factor
+   * @param type - Replication Type - RATIS/Standalone etc.
+   * @param maxBufferSize - Maximum stream buffer Size.
+   * @throws IOException - Throws this exception if there is an error.
+   */
+  ChunkGroupOutputStream(
-      ReplicationType type) throws IOException {
+      ReplicationType type, long maxBufferSize) throws IOException {
+    this.streamBufferSize = maxBufferSize;
-        chunkSize, subKeyInfo.getLength()));
+        chunkSize, subKeyInfo.getLength(), this.streamBufferSize));
+    private long streamBufferSize;
+    public Builder setStreamBufferSize(long blockSize) {
+      this.streamBufferSize = blockSize;
+      return this;
+    }
+
+      Preconditions.checkNotNull(openHandler);
+      Preconditions.checkNotNull(xceiverManager);
+      Preconditions.checkNotNull(scmClient);
+      Preconditions.checkNotNull(ksmClient);
+      Preconditions.checkState(chunkSize > 0);
+      Preconditions.checkState(StringUtils.isNotEmpty(requestID));
+      Preconditions
+          .checkState(streamBufferSize > 0 && streamBufferSize > chunkSize);
+
-          ksmClient, chunkSize, requestID, factor, type);
+          ksmClient, chunkSize, requestID, factor, type, streamBufferSize);
+    private long streamBufferSize; // Max block size.
-        long length) {
+        long length, long streamBufferSize) {
+      this.streamBufferSize = streamBufferSize;
+      this.streamBufferSize =
+          OZONE_OUTPUT_STREAM_BUFFER_SIZE_DEFAULT * OzoneConsts.MB;
-            requestId, chunkSize);
+            requestId, chunkSize, Ints.checkedCast(streamBufferSize));

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS83 INS83 INS39 INS59 INS29 INS44 INS23 INS31 INS23 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS21 INS83 INS39 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS59 INS44 INS7 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS7 INS42 INS42 INS39 INS42 INS21 INS41 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS39 INS42 INS21 INS21 INS42 INS27 INS22 INS42 INS7 INS52 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS7 INS7 INS42 INS40 INS52 INS42 INS22 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS22 INS42 INS22 INS27 INS52 INS42 INS52 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS27 INS52 INS42 INS52 INS42 INS42 INS40 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 DEL83