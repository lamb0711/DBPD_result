HDFS-12636. Ozone: OzoneFileSystem: Implement seek functionality for rpc client. Contributed by Lokesh Jain.

+import java.io.EOFException;
+import java.util.Arrays;
+import org.apache.hadoop.fs.Seekable;
-public class ChunkInputStream extends InputStream {
+public class ChunkInputStream extends InputStream implements Seekable {
-  private int chunkOffset;
+  private int chunkIndex;
+  private long[] chunkOffset;
-  private int bufferOffset;
+  private int bufferIndex;
-    this.chunkOffset = 0;
+    this.chunkIndex = -1;
+    // chunkOffset[i] stores offset at which chunk i stores data in
+    // ChunkInputStream
+    this.chunkOffset = new long[this.chunks.size()];
+    initializeChunkOffset();
-    this.bufferOffset = 0;
+    this.bufferIndex = 0;
+  }
+
+  private void initializeChunkOffset() {
+    int tempOffset = 0;
+    for (int i = 0; i < chunks.size(); i++) {
+      chunkOffset[i] = tempOffset;
+      tempOffset += chunks.get(i).getLen();
+    }
-    return available == EOF ? EOF : buffers.get(bufferOffset).get();
+    return available == EOF ? EOF :
+        Byte.toUnsignedInt(buffers.get(bufferIndex).get());
-    buffers.get(bufferOffset).get(b, off, available);
+    buffers.get(bufferIndex).get(b, off, available);
-        readChunkFromContainer(0);
+        readChunkFromContainer();
-          buffers.get(bufferOffset).hasRemaining()) {
+          buffers.get(bufferIndex).hasRemaining()) {
-        ByteBuffer bb = buffers.get(bufferOffset);
+        ByteBuffer bb = buffers.get(bufferIndex);
-          !buffers.get(bufferOffset).hasRemaining() &&
-          bufferOffset < buffers.size() - 1) {
+          !buffers.get(bufferIndex).hasRemaining() &&
+          bufferIndex < buffers.size() - 1) {
-        ++bufferOffset;
-      } else if (chunkOffset < chunks.size() - 1) {
+        ++bufferIndex;
+      } else if (chunkIndex < chunks.size() - 1) {
-        readChunkFromContainer(chunkOffset + 1);
+        readChunkFromContainer();
-   * @param readChunkOffset offset in the chunk list of which chunk to read
-  private synchronized void readChunkFromContainer(int readChunkOffset)
-      throws IOException {
+  private synchronized void readChunkFromContainer() throws IOException {
+    // On every chunk read chunkIndex should be increased so as to read the
+    // next chunk
+    chunkIndex += 1;
-          chunks.get(readChunkOffset), key, traceID);
+          chunks.get(chunkIndex), key, traceID);
-    chunkOffset = readChunkOffset;
+    bufferIndex = 0;
+  }
+
+  @Override
+  public synchronized void seek(long pos) throws IOException {
+    if (pos < 0 || (chunks.size() == 0 && pos > 0)
+        || pos >= chunkOffset[chunks.size() - 1] + chunks.get(chunks.size() - 1)
+        .getLen()) {
+      throw new EOFException(
+          "EOF encountered pos: " + pos + " container key: " + key);
+    }
+    if (chunkIndex == -1) {
+      chunkIndex = Arrays.binarySearch(chunkOffset, pos);
+    } else if (pos < chunkOffset[chunkIndex]) {
+      chunkIndex = Arrays.binarySearch(chunkOffset, 0, chunkIndex, pos);
+    } else if (pos >= chunkOffset[chunkIndex] + chunks.get(chunkIndex)
+        .getLen()) {
+      chunkIndex =
+          Arrays.binarySearch(chunkOffset, chunkIndex + 1, chunks.size(), pos);
+    }
+    if (chunkIndex < 0) {
+      // Binary search returns -insertionPoint - 1  if element is not present
+      // in the array. insertionPoint is the point at which element would be
+      // inserted in the sorted array. We need to adjust the chunkIndex
+      // accordingly so that chunkIndex = insertionPoint - 1
+      chunkIndex = -chunkIndex -2;
+    }
+    // adjust chunkIndex so that readChunkFromContainer reads the correct chunk
+    chunkIndex -= 1;
+    readChunkFromContainer();
+    adjustBufferIndex(pos);
+  }
+
+  private void adjustBufferIndex(long pos) {
+    long tempOffest = chunkOffset[chunkIndex];
+    for (int i = 0; i < buffers.size(); i++) {
+      if (pos - tempOffest >= buffers.get(i).capacity()) {
+        tempOffest += buffers.get(i).capacity();
+      } else {
+        bufferIndex = i;
+        break;
+      }
+    }
+    buffers.get(bufferIndex).position((int) (pos - tempOffest));
+  }
+
+  @Override
+  public synchronized long getPos() throws IOException {
+    return chunkIndex == -1 ? 0 :
+        chunkOffset[chunkIndex] + buffers.get(bufferIndex).position();
+  }
+
+  @Override
+  public boolean seekToNewSource(long targetPos) throws IOException {
+    return false;

INS26 INS26 INS26 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS59 INS83 INS5 MOV59 INS83 INS39 INS42 INS8 MOV21 INS78 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS39 INS85 UPD42 INS21 INS21 INS60 INS24 INS21 INS42 INS39 INS42 INS42 INS25 INS25 INS25 INS21 INS21 INS21 INS39 INS42 INS60 INS24 INS21 INS42 INS42 INS41 INS42 INS39 INS42 INS42 INS41 INS7 INS32 INS39 INS59 INS58 INS27 INS37 INS8 INS7 INS27 INS8 INS27 INS8 INS25 INS27 INS8 INS7 INS32 INS32 INS39 INS59 INS58 INS27 INS37 INS8 INS32 INS16 INS9 INS22 INS38 MOV22 INS3 INS42 INS42 INS34 INS39 INS59 INS42 INS32 INS42 INS21 INS21 INS32 INS42 INS34 UPD42 INS34 INS27 INS27 INS53 INS42 INS38 INS21 INS27 INS8 INS25 INS42 INS34 INS21 INS42 INS34 INS42 INS42 INS42 INS42 INS2 INS39 INS59 INS42 INS32 INS42 INS25 INS32 INS42 INS11 INS27 INS34 INS27 INS52 INS42 INS34 INS5 INS32 UPD42 INS42 INS34 INS42 INS42 INS7 INS7 INS42 INS42 INS32 UPD42 INS27 INS36 INS42 INS27 INS14 INS34 INS7 INS42 INS2 INS21 INS27 INS8 INS7 INS42 INS42 INS42 INS34 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS39 INS36 INS42 INS38 INS2 INS32 INS39 INS85 INS22 INS42 INS2 INS42 INS42 INS32 MOV32 MOV42 INS42 INS34 INS27 INS2 INS32 INS43 INS27 INS42 INS32 INS42 INS42 INS7 INS42 INS27 INS21 INS42 INS27 INS27 INS32 INS21 INS21 INS10 INS27 INS34 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS32 INS42 UPD42 INS27 INS27 INS42 INS27 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS2 INS32 INS7 INS38 INS34 INS42 INS42 INS32 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 INS34 INS42 INS34 INS32 INS34 INS42 INS42 INS27 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS32 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 DEL34 DEL32 DEL34 DEL42 DEL34 DEL27 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42