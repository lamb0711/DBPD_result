YARN-72. NM should handle cleaning up containers when it shuts down. Contributed by Sandy Ryza.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1416484 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+  
+  /**
+   * Extra duration to wait for containers to be killed on shutdown.
+   */
+  private static final int SHUTDOWN_CLEANUP_SLOP_MS = 1000;
+  private Context context;
+  private AsyncDispatcher dispatcher;
+  private ContainerManagerImpl containerManager;
+  private long waitForContainersOnShutdownMillis;
+  
-    Context context = new NMContext(containerTokenSecretManager);
+    this.context = new NMContext(containerTokenSecretManager);
-    AsyncDispatcher dispatcher = new AsyncDispatcher();
+    this.dispatcher = new AsyncDispatcher();
-    ContainerManagerImpl containerManager =
+    containerManager =
-
+    
-
+    
+    waitForContainersOnShutdownMillis =
+        conf.getLong(YarnConfiguration.NM_SLEEP_DELAY_BEFORE_SIGKILL_MS,
+            YarnConfiguration.DEFAULT_NM_SLEEP_DELAY_BEFORE_SIGKILL_MS) + 
+        conf.getLong(YarnConfiguration.NM_PROCESS_KILL_WAIT_MS,
+            YarnConfiguration.DEFAULT_NM_PROCESS_KILL_WAIT_MS) +
+        SHUTDOWN_CLEANUP_SLOP_MS;
+    
+    cleanupContainers();
+  
+  @SuppressWarnings("unchecked")
+  private void cleanupContainers() {
+    Map<ContainerId, Container> containers = context.getContainers();
+    if (containers.isEmpty()) {
+      return;
+    }
+    LOG.info("Containers still running on shutdown: " + containers.keySet());
+    
+    List<ContainerId> containerIds = new ArrayList<ContainerId>(containers.keySet());
+    dispatcher.getEventHandler().handle(
+        new CMgrCompletedContainersEvent(containerIds, 
+            CMgrCompletedContainersEvent.Reason.ON_SHUTDOWN));
+    
+    LOG.info("Waiting for containers to be killed");
+    
+    long waitStartTime = System.currentTimeMillis();
+    while (!containers.isEmpty() && 
+        System.currentTimeMillis() - waitStartTime < waitForContainersOnShutdownMillis) {
+      try {
+        Thread.sleep(1000);
+      } catch (InterruptedException ex) {
+        LOG.warn("Interrupted while sleeping on container kill", ex);
+      }
+    }
+
+    // All containers killed
+    if (containers.isEmpty()) {
+      LOG.info("All containers in DONE state");
+    } else {
+      LOG.info("Done waiting for containers to be killed. Still alive: " + 
+          containers.keySet());
+    }
+  }
+  
+  // For testing
+  ContainerManagerImpl getContainerManager() {
+    return containerManager;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS83 INS39 INS59 INS83 MOV43 INS59 INS83 MOV43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS79 INS83 INS39 INS42 INS8 MOV43 INS42 INS8 INS65 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS45 INS60 INS25 INS21 INS60 INS21 INS21 INS60 INS61 INS25 INS41 INS66 INS7 INS7 INS7 INS7 INS32 INS74 INS59 INS32 INS8 INS32 INS74 INS59 INS32 INS32 INS39 INS59 INS27 INS8 INS32 INS8 INS8 INS42 INS22 MOV14 INS22 MOV14 INS42 MOV32 INS42 INS27 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS27 INS43 INS43 INS42 INS14 INS32 INS42 INS14 INS42 INS42 INS45 INS42 INS32 INS38 INS27 INS54 INS42 INS42 INS21 INS21 INS52 INS42 INS52 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS43 INS42 INS40 INS42 INS42 INS32 INS27 INS42 INS8 INS12 INS32 INS32 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS21 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS45 INS32 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60