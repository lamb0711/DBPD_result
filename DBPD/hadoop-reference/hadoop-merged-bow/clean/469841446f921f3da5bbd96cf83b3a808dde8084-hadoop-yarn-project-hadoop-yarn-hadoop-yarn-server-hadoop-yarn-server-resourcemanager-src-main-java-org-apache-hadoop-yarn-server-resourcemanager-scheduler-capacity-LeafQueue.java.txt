YARN-9930. Support max running app logic for CapacityScheduler. Contributed by Peter Bacsko

+  private final List<FiCaSchedulerApp> runnableApps = new ArrayList<>();
+  private final List<FiCaSchedulerApp> nonRunnableApps = new ArrayList<>();
+
+  @SuppressWarnings("checkstyle:nowhitespaceafter")
-              + "userLimitFactor) ]" + "\n" + "usedCapacity = "
+              + "userLimitFactor) ]" + "\n"
+              + "maxParallelApps = " + getMaxParallelApps() + "\n"
+              + "usedCapacity = " +
-      return getNumPendingApplications() + getNumActiveApplications();
+      return getNumPendingApplications() + getNumActiveApplications() +
+          getNumNonRunnableApps();
-  
+
+      applicationAttemptMap.put(application.getApplicationAttemptId(),
+          application);
+
+      if (application.isRunnable()) {
+        runnableApps.add(application);
+        LOG.debug("Adding runnable application: {}",
+            application.getApplicationAttemptId());
+      } else {
+        nonRunnableApps.add(application);
+        LOG.info("Application attempt {} is not runnable,"
+            + " parallel limit reached", application.getApplicationAttemptId());
+        return;
+      }
+
-      applicationAttemptMap.put(application.getApplicationAttemptId(),
-          application);
-              + getNumActiveApplications());
+              + getNumActiveApplications()
+              + " #queue-nonrunnable-applications: "
+              + getNumNonRunnableApps());
+      boolean runnable = runnableApps.remove(application);
+      if (!runnable) {
+        // removeNonRunnableApp acquires the write lock again, which is fine
+        if (!removeNonRunnableApp(application)) {
+          LOG.error("Given app to remove " + application +
+              " does not exist in queue " + getQueuePath());
+        }
+      }
+
+
+  @Override
+  int getNumRunnableApps() {
+    readLock.lock();
+    try {
+      return runnableApps.size();
+    } finally {
+      readLock.unlock();
+    }
+  }
+
+  int getNumNonRunnableApps() {
+    readLock.lock();
+    try {
+      return nonRunnableApps.size();
+    } finally {
+      readLock.unlock();
+    }
+  }
+
+  boolean removeNonRunnableApp(FiCaSchedulerApp app) {
+    writeLock.lock();
+    try {
+      return nonRunnableApps.remove(app);
+    } finally {
+      writeLock.unlock();
+    }
+  }
+
+  List<FiCaSchedulerApp> getCopyOfNonRunnableAppSchedulables() {
+    List<FiCaSchedulerApp> appsToReturn = new ArrayList<>();
+    readLock.lock();
+    try {
+      appsToReturn.addAll(nonRunnableApps);
+    } finally {
+      readLock.unlock();
+    }
+    return appsToReturn;
+  }

INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS79 INS78 INS39 INS42 INS8 INS39 INS42 INS8 INS39 INS42 INS44 INS8 INS74 INS42 INS8 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS45 INS42 INS21 INS54 INS21 INS54 INS43 INS42 INS21 INS54 INS43 INS43 INS60 INS21 INS54 INS41 INS42 INS42 INS74 INS42 INS42 INS74 MOV21 INS32 INS8 INS8 INS32 INS8 INS8 INS42 INS32 INS8 INS8 INS42 INS42 INS74 INS59 INS32 INS8 INS8 INS42 INS43 INS43 INS25 INS60 INS25 INS42 INS42 INS41 INS21 INS42 INS42 INS41 INS21 INS42 INS42 INS41 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS21 INS21 INS42 INS42 INS32 INS8 INS8 INS39 INS59 INS38 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS74 INS32 INS32 INS32 INS42 INS42 INS21 INS21 INS21 INS21 INS41 INS42 INS32 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS38 INS42 INS32 INS32 INS32 INS32 INS45 INS32 INS42 INS42 INS42 INS38 INS8 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS32 INS21 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS45 INS32 INS42