HADOOP-15499. Performance severe drops when running RawErasureCoderBenchmark with NativeRSRawErasureCoder. Contributed by Sammi Chen.

+import java.util.concurrent.locks.ReentrantReadWriteLock;
+  // Protect ISA-L coder data structure in native layer from being accessed and
+  // updated concurrently by the init, release and encode functions.
+  protected final ReentrantReadWriteLock encoderLock =
+      new ReentrantReadWriteLock();
+
-  protected synchronized void doEncode(ByteBufferEncodingState encodingState)
+  protected void doEncode(ByteBufferEncodingState encodingState)
-    if (nativeCoder == 0) {
-      throw new IOException(String.format("%s closed",
-          getClass().getSimpleName()));
-    }
-    int[] inputOffsets = new int[encodingState.inputs.length];
-    int[] outputOffsets = new int[encodingState.outputs.length];
-    int dataLen = encodingState.inputs[0].remaining();
+    encoderLock.readLock().lock();
+    try {
+      if (nativeCoder == 0) {
+        throw new IOException(String.format("%s closed",
+            getClass().getSimpleName()));
+      }
+      int[] inputOffsets = new int[encodingState.inputs.length];
+      int[] outputOffsets = new int[encodingState.outputs.length];
+      int dataLen = encodingState.inputs[0].remaining();
-    ByteBuffer buffer;
-    for (int i = 0; i < encodingState.inputs.length; ++i) {
-      buffer = encodingState.inputs[i];
-      inputOffsets[i] = buffer.position();
-    }
+      ByteBuffer buffer;
+      for (int i = 0; i < encodingState.inputs.length; ++i) {
+        buffer = encodingState.inputs[i];
+        inputOffsets[i] = buffer.position();
+      }
-    for (int i = 0; i < encodingState.outputs.length; ++i) {
-      buffer = encodingState.outputs[i];
-      outputOffsets[i] = buffer.position();
-    }
+      for (int i = 0; i < encodingState.outputs.length; ++i) {
+        buffer = encodingState.outputs[i];
+        outputOffsets[i] = buffer.position();
+      }
-    performEncodeImpl(encodingState.inputs, inputOffsets, dataLen,
-        encodingState.outputs, outputOffsets);
+      performEncodeImpl(encodingState.inputs, inputOffsets, dataLen,
+          encodingState.outputs, outputOffsets);
+    } finally {
+      encoderLock.readLock().unlock();
+    }

INS26 INS40 INS23 INS83 INS83 INS43 INS59 INS8 INS42 INS42 INS14 INS21 INS54 INS43 INS32 MOV8 INS8 INS42 INS32 INS42 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 DEL83