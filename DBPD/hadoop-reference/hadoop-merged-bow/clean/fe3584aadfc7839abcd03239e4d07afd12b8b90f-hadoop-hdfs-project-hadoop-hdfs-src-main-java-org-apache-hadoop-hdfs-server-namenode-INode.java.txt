HDFS-4126. Add reading/writing snapshot information to FSImage. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1437256 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectorySnapshottable;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectoryWithSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileWithSnapshot;
+   * @param numBlocks number of blocks
+   * @param withLink whether the node is INodeWithLink
+   * @param computeFileSize non-negative computeFileSize means the node is 
+   *                        INodeFileSnapshot
+   * @param snapshottable whether the node is {@link INodeDirectorySnapshottable}
+   * @param withSnapshot whether the node is {@link INodeDirectoryWithSnapshot}                       
-  static INode newINode(long id,
-                        PermissionStatus permissions,
-                        BlockInfo[] blocks,
-                        String symlink,
-                        short replication,
-                        long modificationTime,
-                        long atime,
-                        long nsQuota,
-                        long dsQuota,
-                        long preferredBlockSize) {
+  static INode newINode(long id, PermissionStatus permissions,
+      BlockInfo[] blocks, String symlink, short replication,
+      long modificationTime, long atime, long nsQuota, long dsQuota,
+      long preferredBlockSize, int numBlocks, boolean withLink,
+      long computeFileSize, boolean snapshottable, boolean withSnapshot) {
-    }  else if (blocks == null) { //not sym link and blocks null? directory!
+    }  else if (blocks == null && numBlocks < 0) { 
+      //not sym link and numBlocks < 0? directory!
+      INodeDirectory dir = null;
-        return new INodeDirectoryWithQuota(
-             id, permissions, modificationTime, nsQuota, dsQuota);
-      } 
-      // regular directory
-      return new INodeDirectory(id, permissions, modificationTime);
+        dir = new INodeDirectoryWithQuota(id, permissions, modificationTime,
+            nsQuota, dsQuota);
+      } else {
+        // regular directory
+        dir = new INodeDirectory(id, permissions, modificationTime);
+      }
+      return snapshottable ? new INodeDirectorySnapshottable(dir)
+          : (withSnapshot ? INodeDirectoryWithSnapshot.newInstance(dir, null)
+              : dir);
-    return new INodeFile(id, permissions, blocks, replication,
+    INodeFile fileNode = new INodeFile(id, permissions, blocks, replication,
+    return computeFileSize >= 0 ? new INodeFileSnapshot(fileNode,
+        computeFileSize) : (withLink ? new INodeFileWithSnapshot(fileNode)
+        : fileNode);
-  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix, Snapshot snapshot) {
+  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,
+      Snapshot snapshot) {
+    out.print(", permission=" + getFsPermission(snapshot) + ", group="
+        + getGroupName(snapshot) + ", user=" + getUserName(snapshot));
+      if (this.isFile()) {
+        // print block information
+        String blocksInfo = ((INodeFile) this).printBlocksInfo();
+        out.print(", blocks=[" + blocksInfo + "]");
+      }
+      if (this instanceof INodeFileWithSnapshot) {
+        INodeFileWithSnapshot nodeWithLink = (INodeFileWithSnapshot) this;
+        FileWithSnapshot next = nodeWithLink.getNext();
+        out.print(", next="
+            + (next != null ? next.asINodeFile().getObjectString() : "null"));
+        if (this instanceof INodeFileSnapshot) {
+          out.print(", computedSize="
+              + ((INodeFileSnapshot) this).computeFileSize(true));
+        }
+      }
-      final INodeDirectory dir = (INodeDirectory)this;
+      final INodeDirectory dir = (INodeDirectory) this;

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS44 INS44 INS44 INS44 INS44 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS60 INS21 INS25 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS65 INS42 INS66 INS65 INS66 INS43 INS59 INS16 INS32 MOV38 INS8 MOV8 INS42 INS42 INS27 INS42 INS42 MOV14 INS27 INS14 INS36 INS42 INS42 INS27 INS25 INS25 MOV21 MOV27 INS27 INS60 INS42 INS34 INS43 INS42 INS42 INS16 INS45 INS32 INS45 INS32 INS45 INS32 INS32 INS8 INS62 INS8 INS42 INS34 INS43 INS59 INS8 INS16 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS60 INS21 INS52 INS43 INS60 INS60 INS21 MOV25 INS42 INS42 INS33 INS21 INS21 INS42 INS14 INS36 INS43 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS62 INS7 INS7 UPD43 MOV43 UPD42 MOV42 INS16 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS27 INS52 INS43 INS21 INS42 MOV14 INS42 MOV14 UPD42 INS42 INS32 INS42 INS36 INS42 INS45 INS42 INS45 INS43 INS52 INS42 INS42 INS45 INS36 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS33 INS11 INS42 INS16 INS42 INS42 INS27 INS42 INS43 INS52 INS27 INS32 INS45 INS45 INS32 INS42 INS42 INS33 INS32 INS42 INS36 INS42 INS9 INS42 INS42 INS11 INS43 INS52 INS42 DEL41