HDFS-5923. Do not persist the ACL bit in the FsPermission. Contributed by Haohui Mai.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1567784 13f79535-47bb-0310-9956-ffa450edef68

-  
+
+  private static final class AclEditLogUtil {
+    private static final int ACL_EDITLOG_ENTRY_HAS_NAME_OFFSET = 6;
+    private static final int ACL_EDITLOG_ENTRY_TYPE_OFFSET = 3;
+    private static final int ACL_EDITLOG_ENTRY_SCOPE_OFFSET = 5;
+    private static final int ACL_EDITLOG_PERM_MASK = 7;
+    private static final int ACL_EDITLOG_ENTRY_TYPE_MASK = 3;
+    private static final int ACL_EDITLOG_ENTRY_SCOPE_MASK = 1;
+
+    private static final FsAction[] FSACTION_VALUES = FsAction.values();
+    private static final AclEntryScope[] ACL_ENTRY_SCOPE_VALUES = AclEntryScope
+        .values();
+    private static final AclEntryType[] ACL_ENTRY_TYPE_VALUES = AclEntryType
+        .values();
+
+    private static List<AclEntry> read(DataInputStream in, int logVersion)
+        throws IOException {
+      if (!LayoutVersion.supports(Feature.EXTENDED_ACL, logVersion)) {
+        return null;
+      }
+
+      int size = in.readInt();
+      if (size == 0) {
+        return null;
+      }
+
+      List<AclEntry> aclEntries = Lists.newArrayListWithCapacity(size);
+      for (int i = 0; i < size; ++i) {
+        int v = in.read();
+        int p = v & ACL_EDITLOG_PERM_MASK;
+        int t = (v >> ACL_EDITLOG_ENTRY_TYPE_OFFSET)
+            & ACL_EDITLOG_ENTRY_TYPE_MASK;
+        int s = (v >> ACL_EDITLOG_ENTRY_SCOPE_OFFSET)
+            & ACL_EDITLOG_ENTRY_SCOPE_MASK;
+        boolean hasName = ((v >> ACL_EDITLOG_ENTRY_HAS_NAME_OFFSET) & 1) == 1;
+        String name = hasName ? FSImageSerialization.readString(in) : null;
+        aclEntries.add(new AclEntry.Builder().setName(name)
+            .setPermission(FSACTION_VALUES[p])
+            .setScope(ACL_ENTRY_SCOPE_VALUES[s])
+            .setType(ACL_ENTRY_TYPE_VALUES[t]).build());
+      }
+
+      return aclEntries;
+    }
+
+    private static void write(List<AclEntry> aclEntries, DataOutputStream out)
+        throws IOException {
+      if (aclEntries == null) {
+        out.writeInt(0);
+        return;
+      }
+
+      out.writeInt(aclEntries.size());
+      for (AclEntry e : aclEntries) {
+        boolean hasName = e.getName() != null;
+        int v = (e.getScope().ordinal() << ACL_EDITLOG_ENTRY_SCOPE_OFFSET)
+            | (e.getType().ordinal() << ACL_EDITLOG_ENTRY_TYPE_OFFSET)
+            | e.getPermission().ordinal();
+
+        if (hasName) {
+          v |= 1 << ACL_EDITLOG_ENTRY_HAS_NAME_OFFSET;
+        }
+        out.write(v);
+        if (hasName) {
+          FSImageSerialization.writeString(e.getName(), out);
+        }
+      }
+    }
+  }
+
-        if (permissions.getPermission().getAclBit()) {
+        boolean hasAcl = aclEntries != null;
+        out.writeBoolean(hasAcl);
+        if (hasAcl) {
-            .addAllEntries(PBHelper.convertAclEntryProto(aclEntries))
-            .build()
-            .writeDelimitedTo(out);
+              .addAllEntries(PBHelper.convertAclEntryProto(aclEntries)).build()
+              .writeDelimitedTo(out);
-        if (permissions.getPermission().getAclBit()) {
-          aclEntries = PBHelper.convertAclEntry(
-            AclFeatureProto.parseDelimitedFrom((DataInputStream)in)
-            .getEntriesList());
-        } else {
-          aclEntries = null;
-        }
+        aclEntries = AclEditLogUtil.read(in, logVersion);
-        if (permissions.getPermission().getAclBit()) {
+        if (aclEntries != null) {
-      if (permissions.getPermission().getAclBit()) {
-        aclEntries = readAclEntriesFromXml(st);
-      } else {
-        aclEntries = null;
-      }
+      aclEntries = readAclEntriesFromXml(st);
-      if (permissions.getPermission().getAclBit()) {
+
+      boolean hasAcl = aclEntries != null;
+      out.writeBoolean(hasAcl);
+      if (hasAcl) {
-          .addAllEntries(PBHelper.convertAclEntryProto(aclEntries))
-          .build()
-          .writeDelimitedTo(out);
+            .addAllEntries(PBHelper.convertAclEntryProto(aclEntries)).build()
+            .writeDelimitedTo(out);
-      if (permissions.getPermission().getAclBit()) {
-        aclEntries = PBHelper.convertAclEntry(
-          AclFeatureProto.parseDelimitedFrom((DataInputStream)in)
-          .getEntriesList());
-      } else {
-        aclEntries = null;
-      }
+      aclEntries = AclEditLogUtil.read(in, logVersion);
-      if (permissions.getPermission().getAclBit()) {
+      if (aclEntries != null) {
-      if (permissions.getPermission().getAclBit()) {
-        aclEntries = readAclEntriesFromXml(st);
-      } else {
-        aclEntries = null;
-      }
+      aclEntries = readAclEntriesFromXml(st);
-      return aclEntries;
+      return null;

INS55 INS83 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS43 INS43 INS42 INS39 INS42 INS42 INS25 INS60 INS25 INS60 INS24 MOV41 INS74 INS42 INS43 INS42 INS42 INS25 INS21 INS70 MOV21 INS60 INS21 MOV21 MOV21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS39 INS59 INS27 INS8 INS74 INS59 INS58 INS27 INS38 INS8 INS43 INS43 INS42 INS27 INS8 INS32 INS44 INS42 INS8 INS39 INS59 INS32 INS42 INS27 INS33 INS32 INS41 INS42 INS32 INS42 INS34 INS41 INS43 INS43 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS42 INS42 INS42 INS33 INS21 INS41 INS42 INS42 INS32 INS43 INS42 INS60 INS60 INS25 INS21 INS25 INS60 INS21 MOV21 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS40 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS42 INS8 INS32 INS42 INS8 INS39 INS59 INS32 INS42 INS27 INS42 INS33 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS27 INS42 INS27 INS21 INS42 INS42 INS42 INS21 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS36 INS42 INS36 INS42 INS36 INS34 INS42 INS32 INS33 INS32 INS42 INS32 INS33 INS36 INS36 INS32 INS7 INS32 INS42 INS33 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS27 INS27 INS27 INS42 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS27 INS27 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS36 INS34 INS32 INS42 INS2 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS32 INS42 INS2 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS40 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25