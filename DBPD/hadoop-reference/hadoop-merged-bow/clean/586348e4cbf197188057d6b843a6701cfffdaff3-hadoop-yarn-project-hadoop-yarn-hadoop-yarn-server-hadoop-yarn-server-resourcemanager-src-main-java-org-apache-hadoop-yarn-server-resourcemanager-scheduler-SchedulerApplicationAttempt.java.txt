YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan

-  protected final Resource currentReservation = Resource.newInstance(0, 0);
-  protected Resource currentConsumption = Resource.newInstance(0, 0);
-  private Resource amResource = Resources.none();
+  
+  protected ResourceUsage attemptResourceUsage = new ResourceUsage();
-    return amResource;
+    return attemptResourceUsage.getAMUsed();
-    this.amResource = amResource;
+    attemptResourceUsage.setAMUsed(amResource);
-    return currentReservation;
+    return attemptResourceUsage.getReserved();
-        
-      Resources.addTo(currentReservation, container.getResource());
+      attemptResourceUsage.incReserved(node.getPartition(),
+          container.getResource());
-          + "; currentReservation " + currentReservation.getMemory());
+          + "; currentReservation " + container.getResource());
-          LOG.debug("showRequests:" + " application=" + getApplicationId() + 
-              " headRoom=" + getHeadroom() + 
-              " currentConsumption=" + currentConsumption.getMemory());
+          LOG.debug("showRequests:" + " application=" + getApplicationId()
+              + " headRoom=" + getHeadroom() + " currentConsumption="
+              + attemptResourceUsage.getUsed().getMemory());
-    return currentConsumption;
+    return attemptResourceUsage.getUsed();
-    AggregateAppResourceUsage resUsage = getRunningAggregateAppResourceUsage();
+    AggregateAppResourceUsage runningResourceUsage =
+        getRunningAggregateAppResourceUsage();
+    Resource usedResourceClone =
+        Resources.clone(attemptResourceUsage.getUsed());
+    Resource reservedResourceClone =
+        Resources.clone(attemptResourceUsage.getReserved());
-               reservedContainers.size(), Resources.clone(currentConsumption),
-               Resources.clone(currentReservation),
-               Resources.add(currentConsumption, currentReservation),
-               resUsage.getMemorySeconds(), resUsage.getVcoreSeconds());
+        reservedContainers.size(), usedResourceClone, reservedResourceClone,
+        Resources.add(usedResourceClone, reservedResourceClone),
+        runningResourceUsage.getMemorySeconds(),
+        runningResourceUsage.getVcoreSeconds());
-    this.currentConsumption = appAttempt.getCurrentConsumption();
+    this.attemptResourceUsage.copyAllUsed(appAttempt.attemptResourceUsage);
-  public synchronized void recoverContainer(RMContainer rmContainer) {
+  public synchronized void recoverContainer(SchedulerNode node,
+      RMContainer rmContainer) {
-    Resources.addTo(currentConsumption, rmContainer.getContainer()
-      .getResource());
+    attemptResourceUsage.incUsed(node.getPartition(), rmContainer
+        .getContainer().getResource());
+    

MOV23 UPD43 INS44 UPD42 UPD42 INS14 INS60 INS60 INS41 INS43 INS42 INS43 INS32 INS32 INS32 INS32 MOV43 INS59 MOV43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 INS32 INS42 INS42 MOV32 MOV32 INS42 INS42 MOV32 MOV32 MOV32 INS22 UPD42 MOV42 INS40 UPD42 UPD42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 UPD42 UPD42 UPD42 UPD42 MOV52 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 MOV42 INS42 DEL83 DEL42 DEL42 DEL42 DEL34 DEL34 DEL32 DEL59 DEL23 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL42 DEL42 DEL34 DEL34 DEL32 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL41 DEL22 DEL42 DEL32 DEL7