YARN-3147. Clean up RM web proxy code. Contributed by Steve Loughran

+import java.util.Set;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  private static final Log LOG = LogFactory.getLog(WebAppProxyServlet.class);
-  private static final HashSet<String> passThroughHeaders = 
-    new HashSet<String>(Arrays.asList("User-Agent", "Accept", "Accept-Encoding",
-        "Accept-Language", "Accept-Charset"));
+  private static final Logger LOG = LoggerFactory.getLogger(
+      WebAppProxyServlet.class);
+  private static final Set<String> passThroughHeaders = 
+    new HashSet<>(Arrays.asList(
+        "User-Agent",
+        "Accept",
+        "Accept-Encoding",
+        "Accept-Language",
+        "Accept-Charset"));
-      return new HTML<WebAppProxyServlet._>("html", null, EnumSet.of(EOpt.ENDTAG));
+      return new HTML<>("html", null, EnumSet.of(EOpt.ENDTAG));
-  public WebAppProxyServlet()
-  {
+  public WebAppProxyServlet() {
-    resp.setStatus(HttpServletResponse.SC_NOT_FOUND);
-    resp.setContentType(MimeType.HTML);
-    Page p = new Page(resp.getWriter());
-    p.html().
-      h1(message).
-    _();
+    ProxyUtils.notFound(resp, message);
-      h1("WARNING: The following page may not be safe!").h3().
+      h1("WARNING: The following page may not be safe!").
+      h3().
-      LOG.debug("local InetAddress for proxy host: " + localAddress.toString());
+      LOG.debug("local InetAddress for proxy host: {}", localAddress);
-        LOG.debug("REQ HEADER: "+name+" : "+value);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("REQ HEADER: {} : {}", name, value);
+        }
-    if(user != null && !user.isEmpty()) {
-      method.setRequestHeader("Cookie",PROXY_USER_COOKIE_NAME+"="+
-          URLEncoder.encode(user, "ASCII"));
+    if (user != null && !user.isEmpty()) {
+      method.setRequestHeader("Cookie",
+          PROXY_USER_COOKIE_NAME + "=" + URLEncoder.encode(user, "ASCII"));
-      if(c != null) {
+      if (c != null) {
-      if(in != null) {
+      if (in != null) {
-    if(b != null) return b;
-    return false;
+    return b != null ? b : false;
-      boolean userApproved = 
-        (userApprovedParamS != null && Boolean.valueOf(userApprovedParamS));
+      boolean userApproved = Boolean.valueOf(userApprovedParamS);
-      String parts[] = pathInfo.split("/", 3);
+      String[] parts = pathInfo.split("/", 3);
-        LOG.warn(remoteUser+" Gave an invalid proxy path "+pathInfo);
+        LOG.warn("{} gave an invalid proxy path {}", remoteUser,  pathInfo);
-        LOG.warn(req.getRemoteUser()+" Attempting to access "+appId+
-        " that is invalid");
-        notFound(resp, appId+" appears to be formatted incorrectly.");
+        LOG.warn("{} attempting to access {} that is invalid",
+            remoteUser, appId);
+        notFound(resp, appId + " appears to be formatted incorrectly.");
-      ApplicationReport applicationReport = null;
+      ApplicationReport applicationReport;
-        LOG.warn(req.getRemoteUser()+" Attempting to access "+id+
-            " that was not found");
+        LOG.warn("{} attempting to access {} that was not found",
+            remoteUser, id);
-        if (toFetch != null)
-        {
-          resp.sendRedirect(resp.encodeRedirectURL(toFetch.toString()));
+        if (toFetch != null) {
+          ProxyUtils.sendRedirect(req, resp, toFetch.toString());
-        notFound(resp, "Application "+appId+" could not be found, " +
-        		"please try the history server");
+        notFound(resp, "Application " + appId + " could not be found, " +
+                       "please try the history server");
-      URI trackingUri = null;
+      URI trackingUri;
-        resp.sendRedirect(resp.encodeRedirectURL(
-            StringHelper.pjoin(rmAppPageUrlBase, id.toString())));
+        ProxyUtils.sendRedirect(req, resp, 
+            StringHelper.pjoin(rmAppPageUrlBase, id.toString()));
-        LOG.info("Asking "+remoteUser+" if they want to connect to the " +
-            "app master GUI of "+appId+" owned by "+runningUser);
+        LOG.info("Asking {} if they want to connect to the "
+            + "app master GUI of {} owned by {}",
+            remoteUser, appId, runningUser);
-      LOG.info(req.getRemoteUser()+" is accessing unchecked "+toFetch+
-          " which is the app master GUI of "+appId+" owned by "+runningUser);
+      LOG.info("{} is accessing unchecked {}"
+          + " which is the app master GUI of {} owned by {}",
+          remoteUser, toFetch, appId, runningUser);
-      switch(applicationReport.getYarnApplicationState()) {
-      case KILLED:
-      case FINISHED:
-      case FAILED:
-        resp.sendRedirect(resp.encodeRedirectURL(toFetch.toString()));
-        return;
+      switch (applicationReport.getYarnApplicationState()) {
+        case KILLED:
+        case FINISHED:
+        case FAILED:
+          ProxyUtils.sendRedirect(req, resp, toFetch.toString());
+          return;
+        default:
+          // fall out of the switch
-      if(userWasWarned && userApproved) {
+      if (userWasWarned && userApproved) {
-    } catch(URISyntaxException e) {
+    } catch(URISyntaxException | YarnException e) {
-    } catch (YarnException e) {
-      throw new IOException(e);
+  /**
+   * This method is used by Java object deserialization, to fill in the
+   * transient {@link #trackingUriPlugins} field.
+   * See {@link ObjectInputStream#defaultReadObject()}
+   * <p>
+   *   <I>Do not remove</I>
+   * <p>
+   * Yarn isn't currently serializing this class, but findbugs
+   * complains in its absence.
+   * 
+   * 
+   * @param input source
+   * @throws IOException IO failure
+   * @throws ClassNotFoundException classloader fun
+   */

MOV26 MOV26 INS26 INS40 UPD40 UPD40 UPD43 UPD74 INS29 UPD42 UPD43 MOV74 INS42 INS8 INS41 INS65 INS65 INS65 INS65 UPD42 UPD42 UPD42 UPD74 INS41 INS32 INS16 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV27 INS42 INS9 INS67 INS68 INS74 MOV45 MOV33 MOV32 INS5 INS49 INS84 INS42 INS42 INS42 MOV43 INS45 MOV42 INS25 MOV32 MOV43 INS85 INS27 INS42 INS42 INS42 INS42 MOV32 MOV43 MOV43 INS32 INS8 MOV32 UPD45 MOV45 INS45 UPD42 UPD42 INS42 INS42 INS42 INS42 MOV21 INS45 INS42 INS42 INS45 UPD42 MOV42 INS42 INS45 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 MOV32 UPD45 MOV45 UPD45 MOV45 INS45 INS42 INS42 UPD42 UPD42 INS42 INS42 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL14 DEL41 DEL8 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL32 DEL32 DEL42 DEL32 DEL45 DEL42 DEL32 DEL27 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL41 DEL25 DEL9 DEL41 DEL42 DEL33 DEL27 DEL27 DEL36 DEL85 DEL42 DEL45 DEL42 DEL27 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL33 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL33 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12