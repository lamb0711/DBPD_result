YARN-2582. Fixed Log CLI and Web UI for showing aggregated logs of LRS. Contributed Xuan Gong.

-    Path logPath = LogAggregationUtils.getRemoteNodeLogFileForApp(
+    Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(
-        ConverterUtils.toNodeId(nodeId), suffix);
-    AggregatedLogFormat.LogReader reader;
+        suffix);
+    RemoteIterator<FileStatus> nodeFiles;
-      reader = new AggregatedLogFormat.LogReader(getConf(), logPath);
-    } catch (FileNotFoundException fnfe) {
-      System.out.println("Logs not available at " + logPath.toString());
-      System.out
-          .println("Log aggregation has not completed or is not enabled.");
+      Path qualifiedLogDir =
+          FileContext.getFileContext(getConf()).makeQualified(
+            remoteAppLogDir);
+      nodeFiles =
+          FileContext.getFileContext(qualifiedLogDir.toUri(), getConf())
+            .listStatus(remoteAppLogDir);
+    } catch (FileNotFoundException fnf) {
+      logDirNotExist(remoteAppLogDir.toString());
-    return dumpAContainerLogs(containerId, reader, System.out);
+    boolean foundContainerLogs = false;
+    while (nodeFiles.hasNext()) {
+      FileStatus thisNodeFile = nodeFiles.next();
+      String fileName = thisNodeFile.getPath().getName();
+      if (fileName.contains(LogAggregationUtils.getNodeString(nodeId))
+          && !fileName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
+        AggregatedLogFormat.LogReader reader = null;
+        try {
+          reader =
+              new AggregatedLogFormat.LogReader(getConf(),
+                thisNodeFile.getPath());
+          if (dumpAContainerLogs(containerId, reader, System.out) > -1) {
+            foundContainerLogs = true;
+          }
+        } finally {
+          if (reader != null) {
+            reader.close();
+          }
+        }
+      }
+    }
+    if (!foundContainerLogs) {
+      containerLogNotFound(containerId);
+      return -1;
+    }
+    return 0;
-      System.out.println("Logs for container " + containerIdStr
-          + " are not present in this log-file.");
+      containerLogNotFound(containerIdStr);
-      System.out.println("Logs not available at " + remoteAppLogDir.toString());
-      System.out
-          .println("Log aggregation has not completed or is not enabled.");
+      logDirNotExist(remoteAppLogDir.toString());
+    boolean foundAnyLogs = false;
-      AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(
-          getConf(), new Path(remoteAppLogDir, thisNodeFile.getPath().getName()));
-      try {
+      if (!thisNodeFile.getPath().getName()
+        .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
+        AggregatedLogFormat.LogReader reader =
+            new AggregatedLogFormat.LogReader(getConf(), thisNodeFile.getPath());
+        try {
-        DataInputStream valueStream;
-        LogKey key = new LogKey();
-        valueStream = reader.next(key);
-
-        while (valueStream != null) {
-          String containerString = "\n\nContainer: " + key + " on "
-              + thisNodeFile.getPath().getName();
-          out.println(containerString);
-          out.println(StringUtils.repeat("=", containerString.length()));
-          while (true) {
-            try {
-              LogReader.readAContainerLogsForALogType(valueStream, out);
-            } catch (EOFException eof) {
-              break;
-            }
-          }
-
-          // Next container
-          key = new LogKey();
+          DataInputStream valueStream;
+          LogKey key = new LogKey();
+
+          while (valueStream != null) {
+            String containerString =
+                "\n\nContainer: " + key + " on " + thisNodeFile.getPath().getName();
+            out.println(containerString);
+            out.println(StringUtils.repeat("=", containerString.length()));
+            while (true) {
+              try {
+                LogReader.readAContainerLogsForALogType(valueStream, out);
+                foundAnyLogs = true;
+              } catch (EOFException eof) {
+                break;
+              }
+            }
+
+            // Next container
+            key = new LogKey();
+            valueStream = reader.next(key);
+          }
+        } finally {
+          reader.close();
-      } finally {
-        reader.close();
+    if (! foundAnyLogs) {
+      emptyLogDir(remoteAppLogDir.toString());
+      return -1;
+    }
+
+  private static void containerLogNotFound(String containerId) {
+    System.out.println("Logs for container " + containerId
+      + " are not present in this log-file.");
+  }
+
+  private static void logDirNotExist(String remoteAppLogDir) {
+    System.out.println(remoteAppLogDir + "does not exist.");
+    System.out.println("Log aggregation has not completed or is not enabled.");
+  }
+
+  private static void emptyLogDir(String remoteAppLogDir) {
+    System.out.println(remoteAppLogDir + "does not have any log files.");
+  }

INS31 INS31 INS31 INS31 MOV78 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 MOV60 MOV60 INS60 INS60 INS54 INS60 INS61 INS25 INS41 INS60 INS25 UPD43 MOV43 UPD42 MOV42 MOV21 INS43 INS42 MOV21 MOV21 INS43 INS42 INS21 MOV43 INS59 INS74 INS59 INS8 INS12 INS39 INS59 INS32 INS8 INS38 INS8 INS34 INS39 INS59 INS8 INS38 INS8 UPD42 INS42 INS42 INS32 UPD42 MOV42 INS32 INS43 INS43 INS42 INS60 INS21 INS44 INS8 INS42 INS9 INS42 INS42 INS60 MOV60 INS25 INS42 INS21 MOV41 INS41 INS42 INS9 MOV60 INS25 INS42 INS21 INS41 INS27 INS40 INS42 INS27 MOV42 UPD42 MOV42 MOV42 MOV32 MOV42 INS42 INS42 INS42 INS43 INS59 INS7 INS43 INS42 INS21 MOV41 INS43 INS59 INS43 INS27 INS8 INS32 INS38 INS38 MOV8 INS32 INS38 UPD45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 MOV32 INS32 INS38 MOV60 INS54 INS42 INS42 UPD42 INS42 INS34 INS32 INS60 INS42 INS32 INS34 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 INS32 MOV43 MOV8 INS8 UPD42 MOV32 INS32 INS42 INS40 MOV43 INS59 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 UPD42 UPD42 UPD42 MOV42 INS42 INS40 INS33 INS25 INS25 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS42 INS42 MOV43 MOV32 INS32 MOV32 INS38 INS21 INS42 INS33 INS21 INS42 INS42 MOV43 INS32 INS34 INS7 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS21 INS7 INS42 INS9 DEL42 DEL43 DEL42 DEL14 DEL14 DEL42 DEL32 DEL59 DEL60 DEL44 DEL8 DEL12 DEL54 DEL41 DEL8 DEL31 DEL40 DEL45 DEL42 DEL45 DEL27 DEL40 DEL45 DEL27 DEL42 DEL42 DEL32 DEL45