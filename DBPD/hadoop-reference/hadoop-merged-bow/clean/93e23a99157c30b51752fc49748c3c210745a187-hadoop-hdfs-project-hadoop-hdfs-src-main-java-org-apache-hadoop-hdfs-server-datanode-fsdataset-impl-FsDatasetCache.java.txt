HDFS-6613. Improve logging in caching classes. (wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607697 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  private static final Log LOG = LogFactory.getLog(FsDatasetCache.class);
+  private static final Logger LOG = LoggerFactory.getLogger(FsDatasetCache
+      .class);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Block with id " + blockId + ", pool " + bpid +
-            " already exists in the FsDatasetCache with state " +
-            prevValue.state);
-      }
+      LOG.debug("Block with id {}, pool {} already exists in the "
+              + "FsDatasetCache with state {}", blockId, bpid, prevValue.state
+      );
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Initiating caching for Block with id " + blockId +
-          ", pool " + bpid);
-    }
+    LOG.debug("Initiating caching for Block with id {}, pool {}", blockId,
+        bpid);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug(key + " is anchored, and can't be uncached now.");
-      }
+      LOG.debug("{} is anchored, and can't be uncached now.", key);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Block with id " + blockId + ", pool " + bpid + " " +
-            "does not need to be uncached, because it is not currently " +
-            "in the mappableBlockMap.");
-      }
+      LOG.debug("Block with id {}, pool {} does not need to be uncached, "
+          + "because it is not currently in the mappableBlockMap.", blockId,
+          bpid);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Cancelling caching for block with id " + blockId +
-            ", pool " + bpid + ".");
-      }
+      LOG.debug("Cancelling caching for block with id {}, pool {}.", blockId,
+          bpid);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Block with id " + blockId + ", pool " + bpid + " " +
-            "has been scheduled for uncaching.");
-      }
+      LOG.debug(
+          "Block with id {}, pool {} has been scheduled for uncaching" + ".",
+          blockId, bpid);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Block with id " + blockId + ", pool " + bpid + " " +
-            "does not need to be uncached, because it is " +
-            "in state " + prevValue.state + ".");
-      }
+      LOG.debug("Block with id {}, pool {} does not need to be uncached, "
+          + "because it is in state {}.", blockId, bpid, prevValue.state);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Successfully cached " + key + ".  We are now caching " +
-              newUsedBytes + " bytes in total.");
-        }
+        LOG.debug("Successfully cached {}.  We are now caching {} bytes in"
+            + " total.", key, newUsedBytes);
-            newUsedBytes = usedBytesCount.release(length);
+            usedBytesCount.release(length);
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("Caching of " + key + " was aborted.  We are now " +
-                "caching only " + newUsedBytes + " + bytes in total.");
-          }
+          LOG.debug("Caching of {} was aborted.  We are now caching only {} "
+                  + "bytes in total.", key, usedBytesCount.get());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Uncaching of " + key + " completed.  " +
-            "usedBytes = " + newUsedBytes);
-      }
+      LOG.debug("Uncaching of {} completed. usedBytes = {}", key, newUsedBytes);

MOV26 MOV26 UPD40 UPD40 UPD43 UPD42 MOV21 UPD42 UPD42 INS21 INS21 INS21 MOV21 MOV21 INS45 INS42 INS42 MOV21 MOV21 MOV32 MOV32 MOV32 INS45 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS40 MOV21 INS45 INS42 INS42 INS27 INS42 INS42 INS40 INS45 INS42 INS27 INS42 INS42 UPD45 MOV45 INS45 UPD45 MOV45 INS45 UPD45 MOV45 INS45 UPD45 MOV45 INS45 INS27 INS42 INS42 MOV21 UPD45 MOV45 INS45 INS42 INS32 MOV32 UPD45 UPD45 INS42 INS42 DEL42 DEL45 DEL42 DEL45 DEL40 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL45 DEL42 DEL45 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL45 DEL42 DEL45 DEL45 DEL45 DEL40 DEL45 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL7 DEL45 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25