HDFS-1975. Support for sharing the namenode state from active to standby. Contributed by Jitendra Nath Pandey, Aaron T Myers, and Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208813 13f79535-47bb-0310-9956-ffa450edef68

+    this.clientRpcServer.addProtocol(HAServiceProtocol.class, this);
+    if (nn.isStandbyState()) {
+      if (namesystem.isGenStampInFuture(newgenerationstamp)) {
+        LOG.info("Required GS=" + newgenerationstamp
+            + ", Queuing commitBlockSynchronization message");
+        namesystem.getPendingDataNodeMessages().queueMessage(
+            new PendingDataNodeMessages.CommitBlockSynchronizationMessage(
+                block, newgenerationstamp, newlength, closeFile, deleteblock,
+                newtargets, newgenerationstamp));
+        return;
+      }
+    }
-    nn.checkOperation(OperationCategory.READ);
+    // TODO(HA): decide on OperationCategory for this
+    if (nn.isStandbyState()) {
+      long maxGs = blist.getMaxGsInBlockList();
+      if (namesystem.isGenStampInFuture(maxGs)) {
+        LOG.info("Required GS="+maxGs+", Queuing blockReport message");
+        namesystem.getPendingDataNodeMessages().queueMessage(
+            new PendingDataNodeMessages.BlockReportMessage(nodeReg, poolId,
+                blist, maxGs));
+        return null;
+      }
+    }
-    if (nn.getFSImage().isUpgradeFinalized())
+    if (nn.getFSImage().isUpgradeFinalized() && !nn.isStandbyState())
+    if (nn.isStandbyState()) {
+      if (receivedAndDeletedBlocks.length > 0) {
+        long maxGs = receivedAndDeletedBlocks[0].getBlock()
+            .getGenerationStamp();
+        for (ReceivedDeletedBlockInfo binfo : receivedAndDeletedBlocks) {
+          if (binfo.getBlock().getGenerationStamp() > maxGs) {
+            maxGs = binfo.getBlock().getGenerationStamp();
+          }
+        }
+        if (namesystem.isGenStampInFuture(maxGs)) {
+          LOG.info("Required GS=" + maxGs
+              + ", Queuing blockReceivedAndDeleted message");
+          namesystem.getPendingDataNodeMessages().queueMessage(
+              new PendingDataNodeMessages.BlockReceivedDeleteMessage(nodeReg,
+                  poolId, receivedAndDeletedBlocks, maxGs));
+          return;
+        }
+      }
+    }

INS8 INS21 MOV21 INS25 MOV21 INS25 INS25 INS32 INS32 INS8 INS32 INS8 INS27 INS32 INS8 INS22 INS42 INS57 INS52 INS42 INS42 INS25 INS42 INS42 INS60 INS25 MOV32 INS38 INS42 INS42 INS25 INS52 INS42 INS43 INS32 INS8 INS39 INS59 INS32 INS8 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS21 INS21 INS41 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS41 INS42 INS42 INS40 INS34 INS60 INS70 INS25 INS32 INS32 INS42 INS42 INS32 INS32 INS33 INS39 INS59 INS44 INS42 INS8 INS32 INS8 INS42 INS42 INS27 INS32 INS42 INS14 INS42 INS42 INS27 INS32 INS42 INS14 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS21 INS21 INS41 INS45 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS8 INS32 INS32 INS40 INS40 INS2 INS42 INS32 INS42 INS21 INS42 INS42 INS27 INS32 INS42 INS14 INS42 INS34 INS32 INS42 INS7 INS45 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS32 INS42 INS42 INS42 DEL8 DEL42 DEL42 DEL40 DEL32 DEL21