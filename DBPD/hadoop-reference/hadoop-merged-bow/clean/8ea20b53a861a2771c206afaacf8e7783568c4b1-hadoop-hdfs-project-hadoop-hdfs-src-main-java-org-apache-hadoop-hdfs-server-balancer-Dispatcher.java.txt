HDFS-6911. Archival Storage: check if a block is already scheduled in Mover. Contributed by Tsz Wo Nicholas Sze.

-    private PendingMove() {
-    }
-
-    public PendingMove(DBlock block, Source source, StorageGroup target) {
-      this.block = block;
+    private PendingMove(Source source, StorageGroup target) {
+      // source and target must have the same storage type
+      final StorageType t = source.getStorageType();
-        if (markMovedIfGoodBlock(i.next())) {
+        if (markMovedIfGoodBlock(i.next(), t)) {
-    private boolean markMovedIfGoodBlock(DBlock block) {
+    private boolean markMovedIfGoodBlock(DBlock block, StorageType targetStorageType) {
-          if (isGoodBlockCandidate(source, target, block)) {
+          if (isGoodBlockCandidate(source, target, targetStorageType, block)) {
-    public boolean chooseProxySource() {
+    private boolean chooseProxySource() {
+      private PendingMove addPendingMove(DBlock block, final PendingMove pm) {
+        if (getDDatanode().addPendingBlock(pm)) {
+          if (pm.markMovedIfGoodBlock(block, getStorageType())) {
+            incScheduledSize(pm.block.getNumBytes());
+            return pm;
+          } else {
+            getDDatanode().removePendingBlock(pm);
+          }
+        }
+        return null;
+      }
+
+      // source and target must have the same storage type
+      final StorageType sourceStorageType = getStorageType();
-        if (Dispatcher.this.isGoodBlockCandidate(this, t.target, block)) {
+        if (Dispatcher.this.isGoodBlockCandidate(this, t.target,
+            sourceStorageType, block)) {
-        PendingMove pendingBlock = new PendingMove();
+        final PendingMove pendingBlock = new PendingMove(this, task.target);
-          pendingBlock.source = this;
-          pendingBlock.target = task.target;
+    
+    /** Add a pending move */
+    public PendingMove addPendingMove(DBlock block, StorageGroup target) {
+      return target.addPendingMove(block, new PendingMove(this, target));
+    }
-  private boolean isGoodBlockCandidate(StorageGroup source, StorageGroup target,
-      DBlock block) {
-    // match source and target storage type
-    return isGoodBlockCandidate(source, target, source.getStorageType(), block);
-  }
-
-  public boolean isGoodBlockCandidate(StorageGroup source, StorageGroup target,
+  private boolean isGoodBlockCandidate(StorageGroup source, StorageGroup target,

INS31 UPD83 UPD83 INS44 UPD83 INS31 INS29 INS83 INS43 INS42 MOV44 MOV44 INS8 INS60 INS43 INS42 INS83 INS43 INS42 MOV44 INS44 INS8 INS60 INS65 INS42 INS41 INS83 INS43 INS59 INS42 INS42 INS83 INS43 INS42 INS25 INS41 INS83 INS43 INS59 INS66 INS32 INS42 INS42 MOV32 INS42 INS32 INS8 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS25 INS42 INS83 INS43 MOV43 INS52 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS41 INS21 INS52 INS40 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS40 INS42 INS42 DEL83 DEL42 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL40 DEL52 DEL7 DEL21 DEL40 DEL40 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31