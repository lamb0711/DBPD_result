HADOOP-11920. Refactor some codes for erasure coders. Contributed by Kai Zheng.

-    assert (inputs.length == getNumDataUnits());
-    assert (outputs.length == getNumParityUnits());
+    checkParameters(inputs, outputs);
-    doEncode(inputs, outputs);
+    boolean hasArray = inputs[0].hasArray();
+    if (hasArray) {
+      byte[][] newInputs = toArrays(inputs);
+      byte[][] newOutputs = toArrays(outputs);
+      doEncode(newInputs, newOutputs);
+    } else {
+      doEncode(inputs, outputs);
+    }
-   * Perform the real encoding work using ByteBuffer
-   * @param inputs
-   * @param outputs
+   * Perform the real encoding work using direct ByteBuffer
+   * @param inputs Direct ByteBuffers expected
+   * @param outputs Direct ByteBuffers expected
-    assert (inputs.length == getNumDataUnits());
-    assert (outputs.length == getNumParityUnits());
+    checkParameters(inputs, outputs);
-    assert (inputs.length == getNumDataUnits());
-    assert (outputs.length == getNumParityUnits());
-
-    doEncode(inputs, outputs);
+    ByteBuffer[] newInputs = ECChunk.toBuffers(inputs);
+    ByteBuffer[] newOutputs = ECChunk.toBuffers(outputs);
+    encode(newInputs, newOutputs);
-   * Perform the real encoding work using chunks.
+   * Check and validate decoding parameters, throw exception accordingly.
-  protected void doEncode(ECChunk[] inputs, ECChunk[] outputs) {
-    /**
-     * Note callers may pass byte array, or ByteBuffer via ECChunk according
-     * to how ECChunk is created. Some implementations of coder use byte array
-     * (ex: pure Java), some use native ByteBuffer (ex: ISA-L), all for the
-     * better performance.
-     */
-    if (inputs[0].getBuffer().hasArray()) {
-      byte[][] inputBytesArr = ECChunk.toArray(inputs);
-      byte[][] outputBytesArr = ECChunk.toArray(outputs);
-      doEncode(inputBytesArr, outputBytesArr);
-    } else {
-      ByteBuffer[] inputBuffers = ECChunk.toBuffers(inputs);
-      ByteBuffer[] outputBuffers = ECChunk.toBuffers(outputs);
-      doEncode(inputBuffers, outputBuffers);
+  protected void checkParameters(Object[] inputs, Object[] outputs) {
+    if (inputs.length != getNumDataUnits()) {
+      throw new IllegalArgumentException("Invalid inputs length");
+    }
+    if (outputs.length != getNumParityUnits()) {
+      throw new IllegalArgumentException("Invalid outputs length");
-

MOV31 MOV78 UPD83 UPD42 MOV8 MOV29 UPD83 UPD42 INS21 INS60 INS25 INS21 UPD5 UPD5 INS25 INS25 INS32 INS39 INS59 INS42 INS8 INS8 UPD66 INS66 INS66 INS32 UPD66 UPD43 UPD43 UPD27 MOV27 INS8 UPD27 MOV27 INS8 INS42 UPD42 MOV42 INS42 INS42 MOV32 INS60 INS60 INS21 MOV21 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS53 INS53 UPD42 MOV5 INS59 MOV5 INS59 INS32 INS14 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS45 INS43 INS45 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL40 DEL32 DEL27 DEL36 DEL6 DEL40 DEL32 DEL27 DEL36 DEL6 DEL40 DEL32 DEL27 DEL36 DEL6 DEL40 DEL32 DEL27 DEL36 DEL6 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL36 DEL6 DEL36 DEL6 DEL42 DEL42 DEL42 DEL32 DEL21