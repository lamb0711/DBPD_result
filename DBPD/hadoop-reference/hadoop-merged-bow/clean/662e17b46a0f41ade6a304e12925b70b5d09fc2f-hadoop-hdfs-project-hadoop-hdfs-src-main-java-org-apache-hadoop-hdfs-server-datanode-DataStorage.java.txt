HDFS-9654. Code refactoring for HDFS-8578.

-import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.ComparisonChain;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.util.concurrent.Futures;
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import java.nio.channels.FileLock;
+import java.nio.channels.OverlappingFileLockException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+import java.util.TreeMap;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+
-import java.io.File;
-import java.io.IOException;
-import java.io.RandomAccessFile;
-import java.nio.channels.FileLock;
-import java.nio.channels.OverlappingFileLockException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Set;
-import java.util.TreeMap;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.ComparisonChain;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.util.concurrent.Futures;
-  private String datanodeUuid = null;
+  private volatile String datanodeUuid = null;
-  public synchronized String getDatanodeUuid() {
+  public String getDatanodeUuid() {
-  public synchronized void setDatanodeUuid(String newDatanodeUuid) {
+  public void setDatanodeUuid(String newDatanodeUuid) {
+  private static boolean createStorageID(StorageDirectory sd, int lv) {
+    // Clusters previously upgraded from layout versions earlier than
+    // ADD_DATANODE_AND_STORAGE_UUIDS failed to correctly generate a
+    // new storage ID. We check for that and fix it now.
+    final boolean haveValidStorageId = DataNodeLayoutVersion.supports(
+        LayoutVersion.Feature.ADD_DATANODE_AND_STORAGE_UUIDS, lv)
+        && DatanodeStorage.isValidStorageId(sd.getStorageUuid());
+    return createStorageID(sd, !haveValidStorageId);
+  }
+
-  public synchronized boolean createStorageID(
+  public static boolean createStorageID(
-      throws IOException {
+          throws IOException {
-        LOG.info("Storage directory " + dataDir + " is not formatted for "
-            + nsInfo.getBlockPoolID());
-        LOG.info("Formatting ...");
+        LOG.info("Storage directory " + dataDir
+            + " is not formatted for namespace " + nsInfo.getNamespaceID()
+            + ". Formatting...");
-      doTransition(datanode, sd, nsInfo, startOpt);
+      if (doTransition(sd, nsInfo, startOpt, datanode.getConf())) {
+        return sd;
+      }
-      BlockPoolSliceStorage bpStorage;
-      final String bpid = nsInfo.getBlockPoolID();
-      synchronized (this) {
-        bpStorage = this.bpStorageMap.get(bpid);
-        if (bpStorage == null) {
-          bpStorage = new BlockPoolSliceStorage(
-              nsInfo.getNamespaceID(), bpid, nsInfo.getCTime(),
-              nsInfo.getClusterID());
-          addBlockPoolStorage(bpid, bpStorage);
-        }
-      }
-      builder.addBpStorageDirectories(
-          bpid, bpStorage.loadBpStorageDirectories(
-              datanode, nsInfo, bpDataDirs, StartupOption.HOTSWAP));
+      final BlockPoolSliceStorage bpStorage = getBlockPoolSliceStorage(nsInfo);
+      final List<StorageDirectory> dirs = bpStorage.loadBpStorageDirectories(
+          nsInfo, bpDataDirs, StartupOption.HOTSWAP, datanode.getConf());
+      builder.addBpStorageDirectories(nsInfo.getBlockPoolID(), dirs);
-   * @return a list of successfully loaded volumes.
-   * @throws IOException
+   * @return a list of successfully loaded storage directories.
-  synchronized List<StorageLocation> addStorageLocations(DataNode datanode,
+  synchronized List<StorageDirectory> addStorageLocations(DataNode datanode,
-    final String bpid = nsInfo.getBlockPoolID();
-    List<StorageLocation> successVolumes = Lists.newArrayList();
+    final List<StorageLocation> successLocations = loadDataStorage(
+        datanode, nsInfo, dataDirs, startOpt);
+    return loadBlockPoolSliceStorage(
+        datanode, nsInfo, successLocations, startOpt);
+  }
+
+  private List<StorageLocation> loadDataStorage(DataNode datanode,
+      NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs,
+      StartupOption startOpt) throws IOException {
+    final List<StorageLocation> success = Lists.newArrayList();
-          StorageDirectory sd = loadStorageDirectory(
+          final StorageDirectory sd = loadStorageDirectory(
-          LOG.warn(e);
+          LOG.warn("Failed to add storage directory " + dataDir, e);
+      success.add(dataDir);
+    }
+    return success;
+  }
+
+  private List<StorageDirectory> loadBlockPoolSliceStorage(DataNode datanode,
+      NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs,
+      StartupOption startOpt) throws IOException {
+    final String bpid = nsInfo.getBlockPoolID();
+    final BlockPoolSliceStorage bpStorage = getBlockPoolSliceStorage(nsInfo);
+    final List<StorageDirectory> success = Lists.newArrayList();
+    for (StorageLocation dataDir : dataDirs) {
+      final File curDir = new File(dataDir.getFile(), STORAGE_DIR_CURRENT);
-      bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, new File(root,
-              STORAGE_DIR_CURRENT)));
+      bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, curDir));
-        BlockPoolSliceStorage bpStorage = this.bpStorageMap.get(bpid);
-        if (bpStorage == null) {
-          bpStorage = new BlockPoolSliceStorage(
-              nsInfo.getNamespaceID(), bpid, nsInfo.getCTime(),
-              nsInfo.getClusterID());
-        }
-        bpStorage.recoverTransitionRead(datanode, nsInfo, bpDataDirs, startOpt);
-        addBlockPoolStorage(bpid, bpStorage);
+        final List<StorageDirectory> dirs = bpStorage.recoverTransitionRead(
+            nsInfo, bpDataDirs, startOpt, datanode.getConf());
+        for(StorageDirectory sd : dirs) {
+          success.add(sd);
+        }
-        LOG.warn("Failed to add storage for block pool: " + bpid + " : "
-            + e.getMessage());
-        continue;
+        LOG.warn("Failed to add storage directory " + dataDir
+            + " for block pool " + bpid, e);
-      successVolumes.add(dataDir);
-    return successVolumes;
+
+    return success;
-   * @param datanode Datanode to which this storage belongs to
-   * @throws IOException
+   * @return true if the new properties has been written.
-  private void doTransition( DataNode datanode,
-                             StorageDirectory sd, 
-                             NamespaceInfo nsInfo, 
-                             StartupOption startOpt
-                             ) throws IOException {
+  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,
+      StartupOption startOpt, Configuration conf) throws IOException {
-    // Clusters previously upgraded from layout versions earlier than
-    // ADD_DATANODE_AND_STORAGE_UUIDS failed to correctly generate a
-    // new storage ID. We check for that and fix it now.
-    boolean haveValidStorageId =
-        DataNodeLayoutVersion.supports(
-            LayoutVersion.Feature.ADD_DATANODE_AND_STORAGE_UUIDS, layoutVersion) &&
-            DatanodeStorage.isValidStorageId(sd.getStorageUuid());
-
-      createStorageID(sd, !haveValidStorageId);
-      return; // regular startup
+      createStorageID(sd, layoutVersion);
+      return false; // need to write properties
-      doUpgrade(datanode, sd, nsInfo);  // upgrade
-      createStorageID(sd, !haveValidStorageId);
-      return;
+      doUpgrade(sd, nsInfo, conf);  // upgrade
+      return true; // doUgrade already has written properties
-  void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)
-      throws IOException {
+  void doUpgrade(final StorageDirectory sd, final NamespaceInfo nsInfo,
+      final Configuration conf) throws IOException {
+    final int oldLV = getLayoutVersion();
-             + ".\n   old LV = " + this.getLayoutVersion()
+             + ".\n   old LV = " + oldLV
-    File curDir = sd.getCurrentDir();
-    File prevDir = sd.getPreviousDir();
-    File bbwDir = new File(sd.getRoot(), Storage.STORAGE_1_BBW);
+    final File curDir = sd.getCurrentDir();
+    final File prevDir = sd.getPreviousDir();
+    final File bbwDir = new File(sd.getRoot(), Storage.STORAGE_1_BBW);
-    File tmpDir = sd.getPreviousTmp();
+    final File tmpDir = sd.getPreviousTmp();
-    // 3. Format BP and hard link blocks from previous directory
+    // 3.1. Format BP
-    BlockPoolSliceStorage bpStorage = new BlockPoolSliceStorage(nsInfo.getNamespaceID(), 
-        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());
+    BlockPoolSliceStorage bpStorage = getBlockPoolSliceStorage(nsInfo);
-    linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,
-        STORAGE_DIR_CURRENT));
-    
+
+    final File toDir = new File(curBpDir, STORAGE_DIR_CURRENT);
+    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);
+  }
+
+  private void doUgrade(final StorageDirectory sd,
+      final NamespaceInfo nsInfo, final File prevDir,
+      final File tmpDir, final File bbwDir, final File toDir, final int oldLV,
+      Configuration conf) throws IOException {
+    // 3.2. Link block files from <SD>/previous.tmp to <SD>/current
+    linkAllBlocks(tmpDir, bbwDir, toDir, oldLV, conf);
+
-    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);
+
+    createStorageID(sd, layoutVersion);
-  private void linkAllBlocks(DataNode datanode, File fromDir, File fromBbwDir,
-      File toDir) throws IOException {
+  private static void linkAllBlocks(File fromDir, File fromBbwDir, File toDir,
+      int diskLayoutVersion, Configuration conf) throws IOException {
-    int diskLayoutVersion = this.getLayoutVersion();
-      linkBlocks(datanode, new File(fromDir, STORAGE_DIR_FINALIZED),
-          new File(toDir, STORAGE_DIR_FINALIZED), diskLayoutVersion, hardLink);
+      linkBlocks(fromDir, toDir, STORAGE_DIR_FINALIZED,
+          diskLayoutVersion, hardLink, conf);
-      linkBlocks(datanode, new File(fromDir, STORAGE_DIR_RBW),
-          new File(toDir, STORAGE_DIR_RBW), diskLayoutVersion, hardLink);
+      linkBlocks(fromDir, toDir, STORAGE_DIR_RBW,
+          diskLayoutVersion, hardLink, conf);
-      linkBlocks(datanode, fromDir, new File(toDir, STORAGE_DIR_FINALIZED),
-          diskLayoutVersion, hardLink);      
+      linkBlocks(fromDir, new File(toDir, STORAGE_DIR_FINALIZED),
+          diskLayoutVersion, hardLink, conf);
-        linkBlocks(datanode, fromBbwDir,
-            new File(toDir, STORAGE_DIR_RBW), diskLayoutVersion, hardLink);
+        linkBlocks(fromBbwDir, new File(toDir, STORAGE_DIR_RBW),
+            diskLayoutVersion, hardLink, conf);
-    } 
-    LOG.info( hardLink.linkStats.report() );
+    }
+    LOG.info("Linked blocks from " + fromDir + " to " + toDir + ". "
+        + hardLink.linkStats.report());
-  static void linkBlocks(DataNode datanode, File from, File to, int oldLV,
-      HardLink hl) throws IOException {
+  static void linkBlocks(File fromDir, File toDir, String subdir, int oldLV,
+      HardLink hl, Configuration conf) throws IOException {
+    linkBlocks(new File(fromDir, subdir), new File(toDir, subdir),
+        oldLV, hl, conf);
+  }
+
+  private static void linkBlocks(File from, File to, int oldLV,
+      HardLink hl, Configuration conf) throws IOException {
+    LOG.info("Start linking block files from " + from + " to " + to);
-    int numLinkWorkers = datanode.getConf().getInt(
+    final int numLinkWorkers = conf.getInt(
-   * Add bpStorage into bpStorageMap
+   * Get the BlockPoolSliceStorage from {@link bpStorageMap}.
+   * If the object is not found, create a new object and put it to the map.
-  private void addBlockPoolStorage(String bpID, BlockPoolSliceStorage bpStorage
-      ) {
-    if (!this.bpStorageMap.containsKey(bpID)) {
-      this.bpStorageMap.put(bpID, bpStorage);
+  synchronized BlockPoolSliceStorage getBlockPoolSliceStorage(
+      final NamespaceInfo nsInfo) {
+    final String bpid = nsInfo.getBlockPoolID();
+    BlockPoolSliceStorage bpStorage = bpStorageMap.get(bpid);
+    if (bpStorage == null) {
+      bpStorage = new BlockPoolSliceStorage(nsInfo.getNamespaceID(), bpid,
+            nsInfo.getCTime(), nsInfo.getClusterID());
+      bpStorageMap.put(bpid, bpStorage);
+    return bpStorage;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS31 INS31 INS31 INS31 MOV44 INS31 MOV44 INS31 INS83 MOV83 INS83 UPD39 MOV39 INS42 MOV44 INS44 INS8 UPD83 MOV29 MOV78 INS83 INS74 INS42 MOV44 MOV44 INS44 INS44 INS43 INS8 UPD83 UPD42 INS83 INS74 INS42 MOV44 INS44 MOV44 INS44 INS43 INS8 MOV65 UPD39 INS44 INS44 INS44 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS44 INS83 INS39 INS42 INS44 INS44 MOV44 INS44 INS44 INS44 INS43 INS8 INS83 INS29 INS83 MOV43 INS42 INS44 INS8 INS39 INS42 MOV60 INS41 INS43 INS43 INS74 INS42 INS43 INS42 INS42 INS60 INS41 INS43 INS43 INS43 INS42 INS74 INS42 INS43 INS42 INS42 MOV60 INS60 INS60 INS70 INS41 UPD65 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS60 INS60 INS21 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS43 INS42 INS42 INS21 MOV21 MOV21 MOV21 MOV21 MOV21 INS21 INS39 INS42 UPD43 UPD42 INS43 INS42 INS43 INS42 UPD42 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS21 UPD43 UPD42 INS21 INS65 INS83 INS43 INS42 MOV60 INS60 MOV25 INS41 INS83 MOV32 UPD66 INS42 INS42 INS43 INS43 INS42 INS83 MOV74 INS59 INS32 INS83 INS74 UPD42 INS42 INS42 INS42 INS43 INS43 INS42 INS83 MOV43 INS59 INS83 INS74 INS59 INS44 INS42 INS8 INS42 UPD66 INS42 INS42 INS42 INS42 INS83 INS39 INS59 INS83 INS83 INS83 INS83 MOV43 INS59 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 INS42 INS42 INS42 INS42 INS32 UPD42 INS32 INS83 INS66 INS65 INS66 INS66 INS42 MOV43 INS59 INS42 INS25 INS60 INS60 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 UPD42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS60 MOV60 INS21 INS54 UPD42 MOV42 INS32 INS42 INS32 INS42 INS42 MOV14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 MOV14 MOV14 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS21 INS32 INS8 INS83 MOV43 INS59 INS83 INS74 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS8 INS12 INS32 INS9 INS9 UPD42 MOV42 INS42 UPD42 MOV42 MOV42 INS45 INS42 INS45 INS42 INS45 MOV32 UPD42 UPD42 UPD42 INS45 INS42 INS45 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 MOV42 MOV42 MOV42 MOV42 MOV32 INS41 MOV42 INS32 INS43 INS43 INS42 INS32 MOV32 INS42 UPD42 INS42 INS42 INS14 INS42 INS42 INS32 MOV21 INS60 INS70 MOV44 INS8 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS40 INS32 MOV42 UPD42 MOV42 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS83 INS74 INS59 INS44 INS42 INS8 MOV21 UPD45 MOV32 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 UPD42 MOV42 INS83 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 UPD42 INS27 UPD42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS27 INS45 INS42 DEL83 DEL83 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL21 DEL59 DEL60 DEL52 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL32 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL65 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL32 DEL32 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL18 DEL8 DEL12 DEL54 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL65 DEL42 DEL42 DEL42 DEL42 DEL38 DEL32 DEL21 DEL52 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL14 DEL59 DEL60 DEL32 DEL21 DEL32 DEL42 DEL32 DEL21 DEL39 DEL42 DEL52 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL42 DEL66 DEL65 DEL29 DEL42 DEL52 DEL42 DEL22 DEL32 DEL38 DEL8 DEL25 DEL8 DEL31