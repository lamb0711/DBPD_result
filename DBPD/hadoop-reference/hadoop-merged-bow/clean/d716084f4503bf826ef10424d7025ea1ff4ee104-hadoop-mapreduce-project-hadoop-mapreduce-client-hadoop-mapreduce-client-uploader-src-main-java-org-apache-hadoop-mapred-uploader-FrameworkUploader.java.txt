MAPREDUCE-7032. Add the ability to specify a delayed replication count (miklos.szegedi@cloudera.com via rkanter)

+import org.apache.hadoop.fs.BlockLocation;
+import org.apache.hadoop.fs.FileStatus;
+import java.util.Collections;
+import java.util.HashMap;
-  short replication = 10;
+  Path targetPath = null;
+  @VisibleForTesting
+  short initialReplication = 3;
+  @VisibleForTesting
+  short finalReplication = 10;
+  @VisibleForTesting
+  short acceptableReplication = 9;
+  @VisibleForTesting
+  int timeout = 10;
-    } catch (UploaderException|IOException e) {
+    } catch (UploaderException|IOException|InterruptedException e) {
+      throw new RuntimeException(e);
-      Path targetPath =
+      targetPath =
-            replication + " for path: " + targetPath);
+            initialReplication + " for path: " + targetPath);
-        if (replication > 0) {
-          builder.replication(replication);
+        if (initialReplication > 0) {
+          builder.replication(initialReplication);
-            replication + " for path: " + targetPath +
+            initialReplication + " for path: " + targetPath +
+  private long getSmallestReplicatedBlockCount()
+      throws IOException {
+    FileSystem fileSystem = targetPath.getFileSystem(new Configuration());
+    FileStatus status = fileSystem.getFileStatus(targetPath);
+    long length = status.getLen();
+    HashMap<Long, Integer> blockCount = new HashMap<>();
+
+    // Start with 0s for each offset
+    for (long offset = 0; offset < length; offset +=status.getBlockSize()) {
+      blockCount.put(offset, 0);
+    }
+
+    // Count blocks
+    BlockLocation[] locations = fileSystem.getFileBlockLocations(
+        targetPath, 0, length);
+    for(BlockLocation location: locations) {
+      final int replicas = location.getHosts().length;
+      blockCount.compute(
+          location.getOffset(), (key, value) -> value + replicas);
+    }
+
+    // Print out the results
+    for (long offset = 0; offset < length; offset +=status.getBlockSize()) {
+      LOG.info(String.format(
+          "Replication counts offset:%d blocks:%d",
+          offset, blockCount.get(offset)));
+    }
+
+    return Collections.min(blockCount.values());
+  }
+
+  private void endUpload()
+      throws IOException, InterruptedException {
+    FileSystem fileSystem = targetPath.getFileSystem(new Configuration());
+    if (fileSystem instanceof DistributedFileSystem) {
+      fileSystem.setReplication(targetPath, finalReplication);
+      LOG.info("Set replication to " +
+          finalReplication + " for path: " + targetPath);
+      long startTime = System.currentTimeMillis();
+      long endTime = startTime;
+      long currentReplication = 0;
+      while(endTime - startTime < timeout * 1000 &&
+           currentReplication < acceptableReplication) {
+        Thread.sleep(1000);
+        endTime = System.currentTimeMillis();
+        currentReplication = getSmallestReplicatedBlockCount();
+      }
+      if (endTime - startTime >= timeout * 1000) {
+        LOG.error(String.format(
+            "Timed out after %d seconds while waiting for acceptable" +
+                " replication of %d (current replication is %d)",
+            timeout, acceptableReplication, currentReplication));
+      }
+    } else {
+      LOG.info("Cannot set replication to " +
+          finalReplication + " for path: " + targetPath +
+          " on a non-distributed fileystem " +
+          fileSystem.getClass().getName());
+    }
+  }
+
-  void buildPackage() throws IOException, UploaderException {
+  void buildPackage()
+      throws IOException, UploaderException, InterruptedException {
+      endUpload();
-            "Desired replication count")
-        .hasArg().create("replication"));
+            "Desired initial replication count. Default 3.")
+        .hasArg().create("initialReplication"));
+    opts.addOption(OptionBuilder
+        .withDescription(
+            "Desired final replication count. Default 10.")
+        .hasArg().create("finalReplication"));
+    opts.addOption(OptionBuilder
+        .withDescription(
+            "Desired acceptable replication count. Default 9.")
+        .hasArg().create("acceptableReplication"));
+    opts.addOption(OptionBuilder
+        .withDescription(
+            "Desired timeout for the acceptable" +
+                " replication in seconds. Default 10")
+        .hasArg().create("timeout"));
-    replication = Short.parseShort(parser.getCommandLine().getOptionValue(
-        "replication", "10"));
+    initialReplication =
+        Short.parseShort(parser.getCommandLine().getOptionValue(
+            "initialReplication", "3"));
+    finalReplication =
+        Short.parseShort(parser.getCommandLine().getOptionValue(
+            "finalReplication", "10"));
+    acceptableReplication =
+        Short.parseShort(
+            parser.getCommandLine().getOptionValue(
+                "acceptableReplication", "9"));
+    timeout =
+        Integer.parseInt(
+            parser.getCommandLine().getOptionValue("timeout", "10"));

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 MOV78 MOV43 INS59 INS78 INS39 INS59 INS78 INS78 INS39 INS59 INS78 INS39 INS59 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS43 INS8 INS43 INS42 INS33 INS42 INS42 INS34 INS42 UPD42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS60 INS60 INS60 INS60 INS24 INS60 INS70 INS24 INS41 INS42 INS42 INS60 INS25 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS43 INS59 INS43 INS59 INS39 INS59 INS74 INS59 INS58 INS27 INS7 INS8 INS5 INS59 INS44 INS42 INS8 INS58 INS27 INS7 INS8 INS32 INS43 INS59 INS62 INS8 INS8 INS32 INS32 INS32 INS7 INS7 INS7 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS32 INS21 INS43 INS85 INS42 INS32 INS43 INS42 INS60 INS21 INS39 INS59 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS21 INS21 INS60 INS60 INS60 INS61 INS25 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS42 INS32 INS42 INS32 INS42 INS32 UPD84 INS53 INS7 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS83 INS39 INS59 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS32 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS32 INS32 INS32 INS42 INS45 UPD45 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS14 INS42 MOV14 INS43 INS43 INS42 INS42 INS42 INS34 INS42 INS22 INS42 INS42 INS32 INS86 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS34 INS27 INS27 INS21 INS21 INS21 INS27 INS27 INS21 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS32 INS42 UPD45 UPD45 INS32 INS42 INS45 INS45 INS32 INS42 INS45 INS45 INS32 INS42 INS45 INS45 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS59 INS59 INS27 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS32 INS7 INS7 INS42 INS42 INS42 INS34 INS32 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS45 UPD45 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS45 INS45 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 UPD42 INS45 INS45 DEL42 DEL59 DEL60