HDFS-12473. Change hosts JSON file format.

+import com.fasterxml.jackson.databind.JsonMappingException;
+
+import java.util.ArrayList;
-import java.util.Set;
-import java.util.HashSet;
+import java.util.List;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
- * Reader support for JSON based datanode configuration, an alternative
+ * Reader support for JSON-based datanode configuration, an alternative format
- * The JSON file format is the array of elements where each element
+ * The JSON file format defines the array of elements where each element
- * a datanode is defined in {@link DatanodeAdminProperties}. For example,
+ * a datanode is defined by {@link DatanodeAdminProperties}. For example,
- * {"hostName": "host1"}
- * {"hostName": "host2", "port": 50, "upgradeDomain": "ud0"}
- * {"hostName": "host3", "port": 0, "adminState": "DECOMMISSIONED"}
+ * [
+ *   {"hostName": "host1"},
+ *   {"hostName": "host2", "port": 50, "upgradeDomain": "ud0"},
+ *   {"hostName": "host3", "port": 0, "adminState": "DECOMMISSIONED"}
+ * ]
-  private static final ObjectReader READER =
-      new ObjectMapper().readerFor(DatanodeAdminProperties.class);
-  private static final JsonFactory JSON_FACTORY = new JsonFactory();
+
+  public static final Logger LOG =
+      LoggerFactory.getLogger(CombinedHostsFileReader.class);
-   * @param hostsFile the input json file to read from.
+   * @param hostsFile the input json file to read from
-  public static Set<DatanodeAdminProperties>
+  public static DatanodeAdminProperties[]
-    HashSet<DatanodeAdminProperties> allDNs = new HashSet<>();
+    DatanodeAdminProperties[] allDNs = new DatanodeAdminProperties[0];
+    ObjectMapper objectMapper = new ObjectMapper();
+    boolean tryOldFormat = false;
-         new InputStreamReader(new FileInputStream(hostsFile), "UTF-8")) {
-      Iterator<DatanodeAdminProperties> iterator =
-          READER.readValues(JSON_FACTORY.createParser(input));
-      while (iterator.hasNext()) {
-        DatanodeAdminProperties properties = iterator.next();
-        allDNs.add(properties);
+        new InputStreamReader(new FileInputStream(hostsFile), "UTF-8")) {
+      allDNs = objectMapper.readValue(input, DatanodeAdminProperties[].class);
+    } catch (JsonMappingException jme) {
+      // The old format doesn't have json top-level token to enclose the array.
+      // For backward compatibility, try parsing the old format.
+      tryOldFormat = true;
+      LOG.warn("{} has invalid JSON format." +
+          "Try the old format without top-level token defined.", hostsFile);
+    }
+
+    if (tryOldFormat) {
+      ObjectReader objectReader =
+          objectMapper.readerFor(DatanodeAdminProperties.class);
+      JsonFactory jsonFactory = new JsonFactory();
+      List<DatanodeAdminProperties> all = new ArrayList<>();
+      try (Reader input =
+          new InputStreamReader(new FileInputStream(hostsFile), "UTF-8")) {
+        Iterator<DatanodeAdminProperties> iterator =
+            objectReader.readValues(jsonFactory.createParser(input));
+        while (iterator.hasNext()) {
+          DatanodeAdminProperties properties = iterator.next();
+          all.add(properties);
+        }
+      allDNs = all.toArray(new DatanodeAdminProperties[all.size()]);

MOV26 INS26 INS26 INS26 INS40 UPD40 UPD40 INS40 INS40 UPD83 INS43 INS59 INS5 INS8 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 INS42 INS42 INS32 INS43 INS85 INS60 INS60 INS60 INS54 INS25 MOV41 INS42 INS42 INS57 UPD66 UPD42 MOV42 INS5 INS59 INS43 INS59 INS39 INS59 INS58 INS8 INS12 INS42 MOV8 INS43 MOV43 INS85 INS42 INS3 INS42 INS42 MOV14 INS42 INS9 INS43 INS59 INS21 INS44 INS8 INS60 INS60 INS21 INS42 INS5 INS34 INS42 INS42 INS14 INS7 INS43 INS42 INS21 INS21 MOV43 MOV59 MOV43 MOV59 UPD74 INS7 INS43 INS85 INS43 INS14 INS45 INS42 INS32 INS42 INS7 INS32 UPD42 UPD42 UPD43 UPD42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS57 INS42 INS9 INS42 INS42 INS27 INS42 INS42 UPD42 UPD74 INS42 INS42 INS3 INS42 INS5 INS45 INS45 UPD43 INS5 INS32 INS43 INS85 UPD42 UPD42 INS43 INS85 INS42 INS42 INS42 UPD42 UPD42 INS42 DEL83 DEL83 DEL83 DEL23 DEL43 DEL74