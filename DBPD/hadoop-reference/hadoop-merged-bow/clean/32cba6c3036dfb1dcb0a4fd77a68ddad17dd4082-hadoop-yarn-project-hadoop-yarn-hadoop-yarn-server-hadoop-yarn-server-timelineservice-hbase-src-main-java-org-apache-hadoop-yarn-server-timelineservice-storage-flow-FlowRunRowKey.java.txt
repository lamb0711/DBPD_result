YARN-5355: YARN Timeline Service v.2: alpha 2 (varunsaxena)

+import java.util.List;
+
+import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineReaderUtils;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.KeyConverterToString;
-   *
+   * Constructs a row key for the flow run table as follows:
+   * {@code clusterId!userId!flowName!Flow Run Id}.
+   * @return String representation of row key
+   */
+  public String getRowKeyAsString() {
+    return flowRunRowKeyConverter.encodeAsString(this);
+  }
+
+  /**
+   * Given the encoded row key as string, returns the row key as an object.
+   * @param encodedRowKey String representation of row key.
+   * @return A <cite>FlowRunRowKey</cite> object.
+   */
+  public static FlowRunRowKey parseRowKeyFromString(String encodedRowKey) {
+    return new FlowRunRowKeyConverter().decodeFromString(encodedRowKey);
+  }
+
+  /**
-      KeyConverter<FlowRunRowKey> {
+      KeyConverter<FlowRunRowKey>, KeyConverterToString<FlowRunRowKey> {
+
+    @Override
+    public String encodeAsString(FlowRunRowKey key) {
+      if (key.clusterId == null || key.userId == null || key.flowName == null
+          || key.flowRunId == null) {
+        throw new IllegalArgumentException();
+      }
+      return TimelineReaderUtils.joinAndEscapeStrings(new String[] {
+          key.clusterId, key.userId, key.flowName, key.flowRunId.toString()});
+    }
+
+    @Override
+    public FlowRunRowKey decodeFromString(String encodedRowKey) {
+      List<String> split = TimelineReaderUtils.split(encodedRowKey);
+      if (split == null || split.size() != 4) {
+        throw new IllegalArgumentException(
+            "Invalid row key for flow run table.");
+      }
+      Long flowRunId = Long.valueOf(split.get(3));
+      return new FlowRunRowKey(split.get(0), split.get(1), split.get(2),
+          flowRunId);
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS74 INS31 INS31 INS65 INS65 INS42 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS43 INS43 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS66 INS65 INS66 INS66 INS32 INS66 INS42 INS66 INS66 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS25 INS41 INS42 INS42 INS43 INS42 INS60 INS25 INS60 INS41 INS66 INS42 INS42 INS52 INS14 INS42 INS42 INS42 INS27 INS8 INS32 INS42 INS74 INS59 INS27 INS8 INS43 INS59 INS14 INS43 INS27 INS27 INS53 INS42 INS42 INS3 INS43 INS43 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS32 INS43 INS32 INS32 INS32 INS42 INS42 INS27 INS27 INS40 INS33 INS14 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS27 INS27 INS40 INS33 INS43 INS43 INS85 INS40 INS40 INS40 INS32 INS42 INS42 INS43 INS45 INS42 INS42 INS34 INS40 INS33 INS40 INS33 INS42 INS42 INS40 INS42 INS42