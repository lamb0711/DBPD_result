HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.

+import com.google.common.annotations.VisibleForTesting;
-import org.apache.hadoop.hdfs.protocol.Block;
-  private final SortedMap<Block, Map<DatanodeDescriptor, Reason>> corruptReplicasMap =
-    new TreeMap<Block, Map<DatanodeDescriptor, Reason>>();
+  /**
+   * Used to track corrupted replicas (for contiguous block) or internal blocks
+   * (for striped block) and the corresponding DataNodes. For a striped block,
+   * the key here is the striped block group object stored in the blocksMap.
+   */
+  private final SortedMap<BlockInfo, Map<DatanodeDescriptor, Reason>> corruptReplicasMap = new TreeMap<>();
-  void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,
+  void addToCorruptReplicasMap(BlockInfo blk, DatanodeDescriptor dn,
-      nodes = new HashMap<DatanodeDescriptor, Reason>();
+      nodes = new HashMap<>();
-    
+
-    
+
-  void removeFromCorruptReplicasMap(Block blk) {
+  void removeFromCorruptReplicasMap(BlockInfo blk) {
-  boolean removeFromCorruptReplicasMap(Block blk, DatanodeDescriptor datanode) {
+  boolean removeFromCorruptReplicasMap(BlockInfo blk,
+      DatanodeDescriptor datanode) {
-  boolean removeFromCorruptReplicasMap(Block blk, DatanodeDescriptor datanode,
-      Reason reason) {
+  boolean removeFromCorruptReplicasMap(BlockInfo blk,
+      DatanodeDescriptor datanode, Reason reason) {
-  Collection<DatanodeDescriptor> getNodes(Block blk) {
-    Map <DatanodeDescriptor, Reason> nodes = corruptReplicasMap.get(blk);
-    if (nodes == null)
-      return null;
-    return nodes.keySet();
+  Collection<DatanodeDescriptor> getNodes(BlockInfo blk) {
+    Map<DatanodeDescriptor, Reason> nodes = corruptReplicasMap.get(blk);
+    return nodes != null ? nodes.keySet() : null;
-  boolean isReplicaCorrupt(Block blk, DatanodeDescriptor node) {
+  boolean isReplicaCorrupt(BlockInfo blk, DatanodeDescriptor node) {
-  int numCorruptReplicas(Block blk) {
+  int numCorruptReplicas(BlockInfo blk) {
-   * Return a range of corrupt replica block ids. Up to numExpectedBlocks 
+   * Return a range of corrupt replica block ids. Up to numExpectedBlocks
-   * (fewer if numExpectedBlocks blocks are unavailable). If startingBlockId 
+   * (fewer if numExpectedBlocks blocks are unavailable). If startingBlockId
+  @VisibleForTesting
-    
-    Iterator<Block> blockIt = corruptReplicasMap.keySet().iterator();
-    
+    Iterator<BlockInfo> blockIt = corruptReplicasMap.keySet().iterator();
-    // to leave the iterator on the next block after the specified block. 
+    // to leave the iterator on the next block after the specified block.
-        Block b = blockIt.next();
+        BlockInfo b = blockIt.next();
-          break; 
+          break;
-      
-    ArrayList<Long> corruptReplicaBlockIds = new ArrayList<Long>();
-
+    ArrayList<Long> corruptReplicaBlockIds = new ArrayList<>();
-    
-    
-  String getCorruptReason(Block block, DatanodeDescriptor node) {
+  String getCorruptReason(BlockInfo block, DatanodeDescriptor node) {

MOV26 UPD40 INS29 UPD74 INS78 INS65 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS42 UPD43 INS66 INS66 INS66 UPD42 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 INS16 UPD42 UPD42 UPD66 UPD66 UPD74 UPD42 INS27 MOV32 INS33 UPD43 INS42 INS33 UPD42 UPD74 UPD74 UPD43 UPD42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL27 DEL33 DEL41 DEL25 DEL42 DEL43