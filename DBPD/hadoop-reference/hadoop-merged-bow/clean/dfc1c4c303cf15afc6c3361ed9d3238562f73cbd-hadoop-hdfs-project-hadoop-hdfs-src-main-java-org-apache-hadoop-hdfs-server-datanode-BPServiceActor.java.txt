HDFS-8163. Using monotonicNow for block report scheduling causes test failures on recently restarted systems. (Arpit Agarwal)

+import org.apache.hadoop.util.Time;
-  // lastBlockReport and lastHeartbeat may be assigned/read
-  // by testing threads (through BPServiceActor#triggerXXX), while also 
-  // assigned/read by the actor thread. Thus they should be declared as volatile
-  // to make sure the "happens-before" consistency.
-  volatile long lastBlockReport = 0;
-
-  boolean resetBlockReportTime = true;
-
+  private final Scheduler scheduler;
-  private volatile long lastHeartbeat = 0;
+    scheduler = new Scheduler(dnConf.heartBeatInterval, dnConf.blockReportInterval);
-  // This is useful to make sure NN gets Heartbeat before Blockreport
-  // upon NN restart while DN keeps retrying Otherwise,
-  // 1. NN restarts.
-  // 2. Heartbeat RPC will retry and succeed. NN asks DN to reregister.
-  // 3. After reregistration completes, DN will send Blockreport first.
-  // 4. Given NN receives Blockreport after Heartbeat, it won't mark
-  //    DatanodeStorageInfo#blockContentsStale to false until the next
-  //    Blockreport.
-  void scheduleHeartbeat() {
-    lastHeartbeat = 0;
-  }
-
-  /**
-   * This methods  arranges for the data node to send the block report at 
-   * the next heartbeat.
-   */
-  void scheduleBlockReport(long delay) {
-    if (delay > 0) { // send BR after random delay
-      lastBlockReport = monotonicNow()
-      - ( dnConf.blockReportInterval - DFSUtil.getRandom().nextInt((int)(delay)));
-    } else { // send at next heartbeat
-      lastBlockReport = lastHeartbeat - dnConf.blockReportInterval;
-    }
-    resetBlockReportTime = true; // reset future BRs for randomness
-  }
-
-  
-      lastBlockReport = 0;
-      lastHeartbeat = 0;
+      scheduler.scheduleHeartbeat();
+      long nextBlockReportTime = scheduler.scheduleBlockReport(0);
-      while (lastBlockReport == 0) {
+      while (nextBlockReportTime - scheduler.nextBlockReportTime >= 0) {
-      lastHeartbeat = 0;
+      final long nextHeartbeatTime = scheduler.scheduleHeartbeat();
-      while (lastHeartbeat == 0) {
+      while (nextHeartbeatTime - scheduler.nextHeartbeatTime >= 0) {
-    final long startTime = monotonicNow();
-    if (startTime - lastBlockReport <= dnConf.blockReportInterval) {
+    if (!scheduler.isBlockReportDue()) {
-    scheduleNextBlockReport(startTime);
+    scheduler.scheduleNextBlockReport();
-  private void scheduleNextBlockReport(long previousReportStartTime) {
-    // If we have sent the first set of block reports, then wait a random
-    // time before we start the periodic block reports.
-    if (resetBlockReportTime) {
-      lastBlockReport = previousReportStartTime -
-          DFSUtil.getRandom().nextInt((int)(dnConf.blockReportInterval));
-      resetBlockReportTime = false;
-    } else {
-      /* say the last block report was at 8:20:14. The current report
-       * should have started around 9:20:14 (default 1 hour interval).
-       * If current time is :
-       *   1) normal like 9:20:18, next report should be at 10:20:14
-       *   2) unexpected like 11:35:43, next report should be at 12:20:14
-       */
-      lastBlockReport += (monotonicNow() - lastBlockReport) /
-          dnConf.blockReportInterval * dnConf.blockReportInterval;
-    }
-  }
-
-        final long startTime = monotonicNow();
+        final long startTime = scheduler.monotonicNow();
-        boolean sendHeartbeat =
-            startTime - lastHeartbeat >= dnConf.heartBeatInterval;
+        final boolean sendHeartbeat = scheduler.isHeartbeatDue(startTime);
-          lastHeartbeat = startTime;
+          scheduler.scheduleNextHeartbeat();
-            dn.getMetrics().addHeartbeat(monotonicNow() - startTime);
+            dn.getMetrics().addHeartbeat(scheduler.monotonicNow() - startTime);
-        long waitTime = dnConf.heartBeatInterval - 
-        (monotonicNow() - lastHeartbeat);
+        long waitTime = scheduler.getHeartbeatWaitTime();
-    scheduleBlockReport(dnConf.initialBlockReportDelay);
+    scheduler.scheduleBlockReport(dnConf.initialBlockReportDelay);
-      scheduleHeartbeat();
+      scheduler.scheduleHeartbeat();
-        lastBlockReport = 0;
+        scheduler.scheduleBlockReport(0);
+
+  Scheduler getScheduler() {
+    return scheduler;
+  }
+
+  /**
+   * Utility class that wraps the timestamp computations for scheduling
+   * heartbeats and block reports.
+   */
+  static class Scheduler {
+    // nextBlockReportTime and nextHeartbeatTime may be assigned/read
+    // by testing threads (through BPServiceActor#triggerXXX), while also
+    // assigned/read by the actor thread.
+    @VisibleForTesting
+    volatile long nextBlockReportTime = monotonicNow();
+
+    @VisibleForTesting
+    volatile long nextHeartbeatTime = monotonicNow();
+
+    @VisibleForTesting
+    boolean resetBlockReportTime = true;
+
+    private final long heartbeatIntervalMs;
+    private final long blockReportIntervalMs;
+
+    Scheduler(long heartbeatIntervalMs, long blockReportIntervalMs) {
+      this.heartbeatIntervalMs = heartbeatIntervalMs;
+      this.blockReportIntervalMs = blockReportIntervalMs;
+    }
+
+    // This is useful to make sure NN gets Heartbeat before Blockreport
+    // upon NN restart while DN keeps retrying Otherwise,
+    // 1. NN restarts.
+    // 2. Heartbeat RPC will retry and succeed. NN asks DN to reregister.
+    // 3. After reregistration completes, DN will send Blockreport first.
+    // 4. Given NN receives Blockreport after Heartbeat, it won't mark
+    //    DatanodeStorageInfo#blockContentsStale to false until the next
+    //    Blockreport.
+    long scheduleHeartbeat() {
+      nextHeartbeatTime = monotonicNow();
+      return nextHeartbeatTime;
+    }
+
+    long scheduleNextHeartbeat() {
+      // Numerical overflow is possible here and is okay.
+      nextHeartbeatTime += heartbeatIntervalMs;
+      return nextHeartbeatTime;
+    }
+
+    boolean isHeartbeatDue(long startTime) {
+      return (nextHeartbeatTime - startTime <= 0);
+    }
+
+    boolean isBlockReportDue() {
+      return nextBlockReportTime - monotonicNow() <= 0;
+    }
+
+    /**
+     * This methods  arranges for the data node to send the block report at
+     * the next heartbeat.
+     */
+    long scheduleBlockReport(long delay) {
+      if (delay > 0) { // send BR after random delay
+        // Numerical overflow is possible here and is okay.
+        nextBlockReportTime =
+            monotonicNow() + DFSUtil.getRandom().nextInt((int) (delay));
+      } else { // send at next heartbeat
+        nextBlockReportTime = monotonicNow();
+      }
+      resetBlockReportTime = true; // reset future BRs for randomness
+      return nextBlockReportTime;
+    }
+
+    /**
+     * Schedule the next block report after the block report interval. If the
+     * current block report was delayed then the next block report is sent per
+     * the original schedule.
+     * Numerical overflow is possible here.
+     */
+    void scheduleNextBlockReport() {
+      // If we have sent the first set of block reports, then wait a random
+      // time before we start the periodic block reports.
+      if (resetBlockReportTime) {
+        nextBlockReportTime = monotonicNow() +
+            DFSUtil.getRandom().nextInt((int)(blockReportIntervalMs));
+        resetBlockReportTime = false;
+      } else {
+        /* say the last block report was at 8:20:14. The current report
+         * should have started around 9:20:14 (default 1 hour interval).
+         * If current time is :
+         *   1) normal like 9:20:18, next report should be at 10:20:14
+         *   2) unexpected like 11:35:43, next report should be at 12:20:14
+         */
+        nextBlockReportTime +=
+              (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /
+                  blockReportIntervalMs)) * blockReportIntervalMs;
+      }
+    }
+
+    long getHeartbeatWaitTime() {
+      return nextHeartbeatTime - monotonicNow();
+    }
+
+    /**
+     * Wrapped for testing.
+     * @return
+     */
+    @VisibleForTesting
+    public long monotonicNow() {
+      return Time.monotonicNow();
+    }
+  }

INS26 MOV31 INS40 INS23 INS31 INS55 INS83 INS83 INS43 INS59 MOV29 MOV78 UPD42 MOV78 UPD42 INS43 INS42 INS8 INS29 INS83 INS42 INS23 INS23 MOV23 MOV23 MOV23 INS31 MOV31 INS31 INS31 INS31 MOV31 INS31 INS31 INS31 INS42 INS42 INS21 INS42 INS41 INS65 INS78 INS83 INS39 MOV59 INS78 INS83 INS39 MOV59 INS78 UPD83 INS83 UPD83 INS42 INS44 INS44 INS8 UPD39 UPD39 MOV39 UPD42 MOV42 INS8 INS39 INS42 MOV44 INS8 INS39 INS42 INS8 UPD39 INS29 INS39 INS42 MOV8 INS39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS7 INS38 INS42 INS66 INS66 INS42 UPD42 INS42 UPD42 INS42 UPD42 UPD42 INS39 INS42 INS39 INS42 INS21 INS21 INS41 INS21 INS41 UPD42 INS41 INS41 INS41 INS65 INS41 INS65 INS65 INS42 INS41 INS42 INS14 INS60 MOV21 INS60 INS32 UPD42 UPD42 INS42 INS7 INS7 INS42 INS7 INS42 INS36 INS27 UPD66 INS42 INS66 INS66 INS66 INS66 INS27 INS66 INS32 INS43 INS40 INS40 INS32 INS39 INS59 UPD27 INS83 INS39 INS59 MOV32 UPD27 INS42 INS42 INS22 INS42 INS22 INS42 UPD42 MOV32 INS42 INS42 INS27 INS27 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS42 INS32 INS42 INS42 INS27 INS42 INS52 INS42 INS52 INS42 INS27 INS34 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS34 UPD42 MOV42 INS40 INS42 INS42 UPD42 MOV42 INS40 INS59 INS83 INS32 INS42 INS42 INS42 UPD42 UPD27 MOV27 UPD42 INS32 UPD42 UPD27 UPD42 INS42 INS32 INS32 INS32 INS42 INS42 INS34 MOV32 INS42 MOV32 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS36 INS42 INS42 INS27 INS42 MOV36 INS42 INS27 UPD27 INS32 INS42 MOV27 UPD42 INS42 INS42 UPD42 DEL42 DEL34 DEL7 DEL42 DEL34 DEL7 DEL21 DEL42 DEL34 DEL7 DEL83 DEL39 DEL60 DEL42 DEL42 DEL27 DEL40 DEL27 DEL83 DEL31 DEL42 DEL42 DEL27 DEL40 DEL27 DEL42 DEL42 DEL7 DEL40 DEL42 DEL27 DEL36 DEL27 DEL42 DEL34 DEL7 DEL34 DEL34 DEL34 DEL40 DEL36 DEL27 DEL42 DEL40 DEL27 DEL42 DEL40 DEL40 DEL27 DEL40