YARN-1010. FairScheduler: decouple container scheduling from nodemanager heartbeats. (Wei Yan via Sandy Ryza)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528192 13f79535-47bb-0310-9956-ffa450edef68

-    lastScheduledContainer.put(priority, System.currentTimeMillis());
+    resetSchedulingOpportunities(priority, System.currentTimeMillis());
+  }
+  // used for continuous scheduling
+  synchronized public void resetSchedulingOpportunities(Priority priority,
+                                                        long currentTimeMs) {
+    lastScheduledContainer.put(priority, currentTimeMs);
+  /**
+   * Return the level at which we are allowed to schedule containers.
+   * Given the thresholds indicating how much time passed before relaxing
+   * scheduling constraints.
+   */
+  public synchronized NodeType getAllowedLocalityLevelByTime(Priority priority,
+          long nodeLocalityDelayMs, long rackLocalityDelayMs,
+          long currentTimeMs) {
+
+    // if not being used, can schedule anywhere
+    if (nodeLocalityDelayMs < 0 || rackLocalityDelayMs < 0) {
+      return NodeType.OFF_SWITCH;
+    }
+
+    // default level is NODE_LOCAL
+    if (! allowedLocalityLevel.containsKey(priority)) {
+      allowedLocalityLevel.put(priority, NodeType.NODE_LOCAL);
+      return NodeType.NODE_LOCAL;
+    }
+
+    NodeType allowed = allowedLocalityLevel.get(priority);
+
+    // if level is already most liberal, we're done
+    if (allowed.equals(NodeType.OFF_SWITCH)) {
+      return NodeType.OFF_SWITCH;
+    }
+
+    // check waiting time
+    long waitTime = currentTimeMs;
+    if (lastScheduledContainer.containsKey(priority)) {
+      waitTime -= lastScheduledContainer.get(priority);
+    } else {
+      waitTime -= appSchedulable.getStartTime();
+    }
+
+    long thresholdTime = allowed.equals(NodeType.NODE_LOCAL) ?
+            nodeLocalityDelayMs : rackLocalityDelayMs;
+
+    if (waitTime > thresholdTime) {
+      if (allowed.equals(NodeType.NODE_LOCAL)) {
+        allowedLocalityLevel.put(priority, NodeType.RACK_LOCAL);
+        resetSchedulingOpportunities(priority, currentTimeMs);
+      } else if (allowed.equals(NodeType.RACK_LOCAL)) {
+        allowedLocalityLevel.put(priority, NodeType.OFF_SWITCH);
+        resetSchedulingOpportunities(priority, currentTimeMs);
+      }
+    }
+    return allowedLocalityLevel.get(priority);
+  }

INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS43 INS42 INS39 INS42 INS21 MOV21 INS65 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS25 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS41 INS42 INS32 INS66 INS66 INS66 INS42 INS27 INS8 INS38 INS8 INS43 INS59 INS32 INS8 INS39 INS59 INS32 INS8 INS8 INS39 INS59 INS27 INS8 INS32 UPD42 INS42 INS42 INS42 INS42 INS27 INS27 INS41 INS32 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS40 INS41 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS16 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS40 INS7 INS7 INS32 INS42 INS42 INS32 INS8 INS25 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS21 INS21 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS40 INS21 INS21 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 DEL42