Merge r1609845 through r1616427 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1616428 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.security.authentication.util.RandomSignerSecretProvider;
+import org.apache.hadoop.security.authentication.util.SignerSecretProvider;
+import org.apache.hadoop.security.authentication.util.StringSignerSecretProvider;
-  private static final Random RAN = new Random();
+  /**
+   * Constant for the configuration property that indicates the name of the
+   * SignerSecretProvider class to use.  If not specified, SIGNATURE_SECRET
+   * will be used or a random secret.
+   */
+  public static final String SIGNER_SECRET_PROVIDER_CLASS =
+          "signer.secret.provider";
+
+  /**
+   * Constant for the attribute that can be used for providing a custom
+   * object that subclasses the SignerSecretProvider.  Note that this should be
+   * set in the ServletContext and the class should already be initialized.  
+   * If not specified, SIGNER_SECRET_PROVIDER_CLASS will be used.
+   */
+  public static final String SIGNATURE_PROVIDER_ATTRIBUTE =
+      "org.apache.hadoop.security.authentication.util.SignerSecretProvider";
+  private SignerSecretProvider secretProvider;
+  private boolean customSecretProvider;
-    String signatureSecret = config.getProperty(configPrefix + SIGNATURE_SECRET);
-    if (signatureSecret == null) {
-      signatureSecret = Long.toString(RAN.nextLong());
-      randomSecret = true;
-      LOG.warn("'signature.secret' configuration not set, using a random value as secret");
+
+    validity = Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, "36000"))
+        * 1000; //10 hours
+    secretProvider = (SignerSecretProvider) filterConfig.getServletContext().
+        getAttribute(SIGNATURE_PROVIDER_ATTRIBUTE);
+    if (secretProvider == null) {
+      String signerSecretProviderClassName =
+          config.getProperty(configPrefix + SIGNER_SECRET_PROVIDER_CLASS, null);
+      if (signerSecretProviderClassName == null) {
+        String signatureSecret =
+            config.getProperty(configPrefix + SIGNATURE_SECRET, null);
+        if (signatureSecret != null) {
+          secretProvider = new StringSignerSecretProvider(signatureSecret);
+        } else {
+          secretProvider = new RandomSignerSecretProvider();
+          randomSecret = true;
+        }
+      } else {
+        try {
+          Class<?> klass = Thread.currentThread().getContextClassLoader().
+              loadClass(signerSecretProviderClassName);
+          secretProvider = (SignerSecretProvider) klass.newInstance();
+          customSecretProvider = true;
+        } catch (ClassNotFoundException ex) {
+          throw new ServletException(ex);
+        } catch (InstantiationException ex) {
+          throw new ServletException(ex);
+        } catch (IllegalAccessException ex) {
+          throw new ServletException(ex);
+        }
+      }
+      try {
+        secretProvider.init(config, validity);
+      } catch (Exception ex) {
+        throw new ServletException(ex);
+      }
+    } else {
+      customSecretProvider = true;
-    signer = new Signer(signatureSecret.getBytes());
-    validity = Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, "36000")) * 1000; //10 hours
+    signer = new Signer(secretProvider);
+   * Returns if a custom implementation of a SignerSecretProvider is being used.
+   *
+   * @return if a custom implementation of a SignerSecretProvider is being used.
+   */
+  protected boolean isCustomSignerSecretProvider() {
+    return customSecretProvider;
+  }
+
+  /**
+    if (secretProvider != null) {
+      secretProvider.destroy();
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS29 UPD83 MOV83 MOV83 MOV83 UPD43 MOV43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 MOV21 INS29 INS83 INS39 INS42 INS8 INS65 UPD42 UPD42 MOV42 INS45 INS65 UPD42 MOV42 INS42 INS45 INS42 INS42 INS42 INS21 INS65 INS65 INS41 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS7 INS8 INS66 INS66 INS42 INS27 INS8 INS42 INS11 UPD42 INS60 INS25 INS54 INS21 INS42 INS33 INS21 INS43 INS32 INS43 INS59 INS27 INS8 INS8 INS8 INS12 INS7 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 MOV60 INS25 INS54 MOV21 INS44 INS8 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS33 INS27 INS8 INS8 INS8 INS12 INS12 INS12 INS43 INS42 INS53 INS42 INS42 INS42 INS33 INS21 INS21 MOV21 INS60 MOV21 INS21 INS44 INS8 INS44 INS8 INS44 INS8 UPD42 UPD42 INS42 INS42 INS42 INS14 INS33 INS7 INS7 INS74 INS59 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS42 INS14 INS42 INS14 INS43 INS76 INS42 INS32 UPD42 INS11 INS42 INS9 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS43 INS42 INS43 INS42 INS32 INS42 INS42 INS43 INS32 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL42 DEL32 DEL32 DEL45 DEL42 DEL42 DEL32