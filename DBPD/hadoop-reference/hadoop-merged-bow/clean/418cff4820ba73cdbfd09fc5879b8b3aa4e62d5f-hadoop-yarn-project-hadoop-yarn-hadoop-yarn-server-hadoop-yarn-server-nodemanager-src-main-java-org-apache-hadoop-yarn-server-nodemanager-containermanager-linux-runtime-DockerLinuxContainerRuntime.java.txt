Merge remote-tracking branch 'apache-commit/trunk' into HDDS-48

+import org.apache.hadoop.yarn.api.ApplicationConstants.Environment;
+  private static final String DEFAULT_PROCFS = "/proc";
+  /**
+   * Check if system is default to disable docker override or
+   * user requested a Docker container with ENTRY_POINT support.
+   *
+   * @param environment - Docker container environment variables
+   * @return true if Docker launch command override is disabled
+   */
+  private boolean checkUseEntryPoint(Map<String, String> environment) {
+    boolean overrideDisable = false;
+    String overrideDisableKey = Environment.
+        YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE.
+            name();
+    String overrideDisableValue = (environment.get(overrideDisableKey) != null)
+        ? environment.get(overrideDisableKey) :
+            System.getenv(overrideDisableKey);
+    overrideDisable = Boolean.parseBoolean(overrideDisableValue);
+    return overrideDisable;
+  }
+
-    boolean useEntryPoint = Boolean.parseBoolean(environment
-              .get(ENV_DOCKER_CONTAINER_RUN_OVERRIDE_DISABLE));
+    boolean useEntryPoint = checkUseEntryPoint(environment);
-    PrivilegedOperation signalOp = new PrivilegedOperation(
-        PrivilegedOperation.OperationType.SIGNAL_CONTAINER);
-    signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),
-        ctx.getExecutionAttribute(USER), Integer.toString(
-            PrivilegedOperation.RunAsUserCommand.SIGNAL_CONTAINER.getValue()),
-        ctx.getExecutionAttribute(PID),
-        Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));
-    signalOp.disableFailureLogging();
-    try {
-      privilegedOperationExecutor.executePrivilegedOperation(null, signalOp,
-          null, ctx.getContainer().getLaunchContext().getEnvironment(), false,
-          false);
-    } catch (PrivilegedOperationException e) {
-      String msg = "Liveliness check failed for PID: "
-          + ctx.getExecutionAttribute(PID)
+    String procFs = ctx.getExecutionAttribute(PROCFS);
+    if (procFs == null || procFs.isEmpty()) {
+      procFs = DEFAULT_PROCFS;
+    }
+    String pid = ctx.getExecutionAttribute(PID);
+    if (!new File(procFs + File.separator + pid).exists()) {
+      String msg = "Liveliness check failed for PID: " + pid
-      throw new ContainerExecutionException(msg, e.getExitCode(), e.getOutput(),
-          e.getErrorOutput());
+      throw new ContainerExecutionException(msg);

INS26 INS40 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 UPD39 MOV39 UPD42 MOV42 INS44 INS8 INS83 INS39 INS42 MOV44 MOV43 INS8 INS42 INS42 INS45 INS65 INS65 INS65 INS74 INS42 INS60 INS60 INS60 INS21 INS41 INS60 INS25 MOV60 INS25 INS66 INS66 INS42 INS66 INS66 INS43 INS43 INS43 INS39 INS59 INS43 INS59 INS43 INS59 INS7 INS42 MOV43 INS59 INS27 INS8 INS43 INS38 INS8 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS32 INS42 INS32 INS27 INS32 INS21 INS42 UPD42 MOV32 INS32 INS60 MOV53 INS40 UPD42 MOV42 INS36 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS7 INS14 UPD42 MOV42 INS43 INS59 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS27 UPD42 MOV42 INS42 INS27 INS32 INS33 INS42 INS42 INS40 INS42 INS45 INS42 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL43 DEL42 DEL43 DEL40 DEL14 DEL59 DEL60 DEL42 DEL32 DEL32 DEL40 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL21 DEL32 DEL21 DEL42 DEL42 DEL33 DEL42 DEL33 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL9 DEL9 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31