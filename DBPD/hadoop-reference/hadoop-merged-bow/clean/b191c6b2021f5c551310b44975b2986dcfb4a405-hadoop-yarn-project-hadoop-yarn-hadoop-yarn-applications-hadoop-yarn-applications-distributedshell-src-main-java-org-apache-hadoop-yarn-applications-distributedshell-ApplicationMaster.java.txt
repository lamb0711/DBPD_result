YARN-2928: YARN Timeline Service v.2: alpha 1 (sjlee)

For a list of commits and contributors, see the merge branch history.

-import org.apache.hadoop.yarn.util.ConverterUtils;
+  private boolean timelineServiceV2 = false;
+
+
+    if (YarnConfiguration.timelineServiceEnabled(conf)) {
+      timelineServiceV2 = YarnConfiguration.timelineServiceV2Enabled(conf);
+    } else {
+      timelineClient = null;
+      LOG.warn("Timeline service is not enabled");
+    }
+
-
+    if (timelineServiceV2) {
+      // need to bind timelineClient
+      amRMClient.registerTimelineClient(timelineClient);
+    }
-      publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
-          DSEvent.DS_APP_ATTEMPT_START, domainId, appSubmitterUgi);
+      if (timelineServiceV2) {
+        publishApplicationAttemptEventOnTimelineServiceV2(
+            DSEvent.DS_APP_ATTEMPT_START);
+      } else {
+        publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
+            DSEvent.DS_APP_ATTEMPT_START, domainId, appSubmitterUgi);
+      }
-          if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,
-              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {
+          if (YarnConfiguration.timelineServiceEnabled(conf)) {
-            timelineClient = TimelineClient.createTimelineClient();
+            if (timelineServiceV2) {
+              timelineClient = TimelineClient.createTimelineClient(
+                  appAttemptID.getApplicationId());
+              LOG.info("Timeline service V2 client is enabled");
+            } else {
+              timelineClient = TimelineClient.createTimelineClient();
+              LOG.info("Timeline service V1 client is enabled");
+            }
-    if(timelineClient != null) {
-      publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
-          DSEvent.DS_APP_ATTEMPT_END, domainId, appSubmitterUgi);
+    if (timelineClient != null) {
+      if (timelineServiceV2) {
+        publishApplicationAttemptEventOnTimelineServiceV2(
+            DSEvent.DS_APP_ATTEMPT_END);
+      } else {
+        publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
+            DSEvent.DS_APP_ATTEMPT_END, domainId, appSubmitterUgi);
+      }
-          publishContainerEndEvent(
-              timelineClient, containerStatus, domainId, appSubmitterUgi);
+          if (timelineServiceV2) {
+            publishContainerEndEventOnTimelineServiceV2(containerStatus);
+          } else {
+            publishContainerEndEvent(
+                timelineClient, containerStatus, domainId, appSubmitterUgi);
+          }
-        applicationMaster.nmClientAsync.getContainerStatusAsync(containerId, container.getNodeId());
+        applicationMaster.nmClientAsync.getContainerStatusAsync(
+            containerId, container.getNodeId());
-        applicationMaster.publishContainerStartEvent(
-            applicationMaster.timelineClient, container,
-            applicationMaster.domainId, applicationMaster.appSubmitterUgi);
+        if (applicationMaster.timelineServiceV2) {
+          applicationMaster.publishContainerStartEventOnTimelineServiceV2(
+              container);
+        } else {
+          applicationMaster.publishContainerStartEvent(
+              applicationMaster.timelineClient, container,
+              applicationMaster.domainId, applicationMaster.appSubmitterUgi);
+        }
-          + appAttemptId.toString(), e);
+          + appAttemptID, e);
+
+  private void publishContainerStartEventOnTimelineServiceV2(
+      Container container) {
+    final org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity
+        entity =
+            new org.apache.hadoop.yarn.api.records.timelineservice.
+            TimelineEntity();
+    entity.setId(container.getId().toString());
+    entity.setType(DSEntity.DS_CONTAINER.toString());
+    long ts = System.currentTimeMillis();
+    entity.setCreatedTime(ts);
+    entity.addInfo("user", appSubmitterUgi.getShortUserName());
+
+    org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent event =
+        new org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent();
+    event.setTimestamp(ts);
+    event.setId(DSEvent.DS_CONTAINER_START.toString());
+    event.addInfo("Node", container.getNodeId().toString());
+    event.addInfo("Resources", container.getResource().toString());
+    entity.addEvent(event);
+
+    try {
+      appSubmitterUgi.doAs(new PrivilegedExceptionAction<Object>() {
+        @Override
+        public TimelinePutResponse run() throws Exception {
+          timelineClient.putEntities(entity);
+          return null;
+        }
+      });
+    } catch (Exception e) {
+      LOG.error("Container start event could not be published for "
+          + container.getId().toString(),
+          e instanceof UndeclaredThrowableException ? e.getCause() : e);
+    }
+  }
+
+  private void publishContainerEndEventOnTimelineServiceV2(
+      final ContainerStatus container) {
+    final org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity
+        entity =
+            new org.apache.hadoop.yarn.api.records.timelineservice.
+            TimelineEntity();
+    entity.setId(container.getContainerId().toString());
+    entity.setType(DSEntity.DS_CONTAINER.toString());
+    //entity.setDomainId(domainId);
+    entity.addInfo("user", appSubmitterUgi.getShortUserName());
+    org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent event =
+        new  org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent();
+    event.setTimestamp(System.currentTimeMillis());
+    event.setId(DSEvent.DS_CONTAINER_END.toString());
+    event.addInfo("State", container.getState().name());
+    event.addInfo("Exit Status", container.getExitStatus());
+    entity.addEvent(event);
+
+    try {
+      appSubmitterUgi.doAs(new PrivilegedExceptionAction<Object>() {
+        @Override
+        public TimelinePutResponse run() throws Exception {
+          timelineClient.putEntities(entity);
+          return null;
+        }
+      });
+    } catch (Exception e) {
+      LOG.error("Container end event could not be published for "
+          + container.getContainerId().toString(),
+          e instanceof UndeclaredThrowableException ? e.getCause() : e);
+    }
+  }
+
+  private void publishApplicationAttemptEventOnTimelineServiceV2(
+      DSEvent appEvent) {
+    final org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity
+        entity =
+            new org.apache.hadoop.yarn.api.records.timelineservice.
+            TimelineEntity();
+    entity.setId(appAttemptID.toString());
+    entity.setType(DSEntity.DS_APP_ATTEMPT.toString());
+    long ts = System.currentTimeMillis();
+    if (appEvent == DSEvent.DS_APP_ATTEMPT_START) {
+      entity.setCreatedTime(ts);
+    }
+    entity.addInfo("user", appSubmitterUgi.getShortUserName());
+    org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent event =
+        new org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent();
+    event.setId(appEvent.toString());
+    event.setTimestamp(ts);
+    entity.addEvent(event);
+
+    try {
+      appSubmitterUgi.doAs(new PrivilegedExceptionAction<Object>() {
+        @Override
+        public TimelinePutResponse run() throws Exception {
+          timelineClient.putEntitiesAsync(entity);
+          return null;
+        }
+      });
+    } catch (Exception e) {
+      LOG.error("App Attempt "
+          + (appEvent.equals(DSEvent.DS_APP_ATTEMPT_START) ? "start" : "end")
+          + " event could not be published for "
+          + appAttemptID,
+          e instanceof UndeclaredThrowableException ? e.getCause() : e);
+    }
+  }
+

INS23 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS9 INS25 INS25 INS43 INS42 INS60 INS21 INS21 INS60 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS54 INS83 INS43 INS42 INS60 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS54 INS43 INS42 INS60 INS21 INS21 INS60 INS25 INS21 INS60 INS21 INS21 INS21 INS54 INS32 INS8 INS8 INS42 INS8 INS8 INS8 INS42 INS83 INS43 INS59 INS32 INS32 INS39 INS59 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS8 INS12 INS42 INS83 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS8 INS12 INS42 INS83 INS43 INS59 INS32 INS32 INS39 INS59 INS27 INS8 INS32 INS43 INS59 INS32 INS32 INS32 INS8 INS12 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS25 INS25 INS8 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS21 INS44 INS8 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS21 INS44 INS8 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS21 INS42 INS42 INS45 INS32 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS7 INS7 INS32 INS32 INS42 INS8 MOV8 INS42 INS8 MOV8 INS25 INS43 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS40 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS42 INS21 INS43 INS32 INS42 INS40 INS42 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS32 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS42 INS21 INS21 INS8 INS40 INS8 MOV8 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS25 INS21 INS74 INS1 INS42 INS42 INS27 INS16 INS74 INS1 INS42 INS42 INS27 INS16 INS74 INS1 INS42 INS42 INS27 INS16 INS42 INS40 INS42 INS40 INS42 INS8 MOV8 INS32 INS42 INS43 INS43 INS31 INS45 INS32 INS62 INS32 INS42 INS43 INS43 INS31 INS45 INS32 INS62 INS32 INS42 INS43 INS43 INS31 INS45 INS36 INS45 INS42 INS62 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS16 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS32 INS45 INS45 INS42 INS42 INS42 INS32 INS33 INS32 INS33 INS32 INS33 INS42 INS42 INS40 UPD42 UPD42 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS8 INS21 INS21 MOV21 INS21 INS7 INS32 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL40 DEL40 DEL42 DEL42 DEL32