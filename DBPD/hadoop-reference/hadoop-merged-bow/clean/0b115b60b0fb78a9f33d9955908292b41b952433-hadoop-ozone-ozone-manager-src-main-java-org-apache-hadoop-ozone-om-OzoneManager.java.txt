HDDS-1371. OMSnapshotProvider to download DB checkpoint from leader OM. (#703)


+import org.apache.hadoop.ozone.om.snapshot.OzoneManagerSnapshotProvider;
-
-import static org.apache.hadoop.ozone.om.OMConfigKeys
-    .OZONE_OM_HANDLER_COUNT_DEFAULT;
-import static org.apache.hadoop.ozone.om.OMConfigKeys
-    .OZONE_OM_HANDLER_COUNT_KEY;
-import static org.apache.hadoop.ozone.om.OMConfigKeys
-    .OZONE_OM_METRICS_SAVE_INTERVAL;
-import static org.apache.hadoop.ozone.om.OMConfigKeys
-    .OZONE_OM_METRICS_SAVE_INTERVAL_DEFAULT;
-
+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_HANDLER_COUNT_DEFAULT;
+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_HANDLER_COUNT_KEY;
+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_KERBEROS_KEYTAB_FILE_KEY;
+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_KERBEROS_PRINCIPAL_KEY;
+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_METRICS_SAVE_INTERVAL;
+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_METRICS_SAVE_INTERVAL_DEFAULT;
-import static org.apache.hadoop.ozone.om.OMConfigKeys
-    .OZONE_OM_RATIS_PORT_DEFAULT;
+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_RATIS_PORT_DEFAULT;
-import static org.apache.hadoop.ozone.om.OMConfigKeys
-    .OZONE_OM_KERBEROS_KEYTAB_FILE_KEY;
-import static org.apache.hadoop.ozone.om.OMConfigKeys
-    .OZONE_OM_KERBEROS_PRINCIPAL_KEY;
-  private List<OMNodeDetails> peerNodes;
+  private OzoneManagerSnapshotProvider omSnapshotProvider;
+  private List<OMNodeDetails> peerNodes;
+  private File omRatisSnapshotDir;
+    if (peerNodes != null && !peerNodes.isEmpty()) {
+      this.omSnapshotProvider = new OzoneManagerSnapshotProvider(configuration,
+          omRatisSnapshotDir, peerNodes);
+    }
+
+            String httpAddr = OmUtils.getHttpAddressForOMPeerNode(conf,
+                serviceId, nodeId, addr.getHostName());
+            String httpsAddr = OmUtils.getHttpsAddressForOMPeerNode(conf,
+                serviceId, nodeId, addr.getHostName());
+                .setHttpAddress(httpAddr)
+                .setHttpsAddress(httpsAddr)
+
+
+    // Create Ratis storage dir
+    String omRatisDirectory = OmUtils.getOMRatisDirectory(configuration);
+    if (omRatisDirectory == null || omRatisDirectory.isEmpty()) {
+      throw new IllegalArgumentException(HddsConfigKeys.OZONE_METADATA_DIRS +
+          " must be defined.");
+    }
+    OmUtils.createOMDir(omRatisDirectory);
+
+    // Create Ratis snapshot dir
+    omRatisSnapshotDir = OmUtils.createOMDir(
+        OmUtils.getOMRatisSnapshotDirectory(configuration));
+
+    // Get and set Http(s) address of local node. If base config keys are
+    // not set, check for keys suffixed with OM serivce ID and node ID.
+    setOMNodeSpecificConfigs(serviceId, nodeId);
+  }
+
+  /**
+   * Check if any of the following configuration keys have been set using OM
+   * Node ID suffixed to the key. If yes, then set the base key with the
+   * configured valued.
+   *    1. {@link OMConfigKeys#OZONE_OM_HTTP_ADDRESS_KEY}
+   *    2. {@link OMConfigKeys#OZONE_OM_HTTPS_ADDRESS_KEY}
+   *    3. {@link OMConfigKeys#OZONE_OM_HTTP_BIND_HOST_KEY}
+   *    4. {@link OMConfigKeys#OZONE_OM_HTTPS_BIND_HOST_KEY}
+   */
+  private void setOMNodeSpecificConfigs(String omServiceId, String omNodeId) {
+    String[] confKeys = new String[] {
+        OMConfigKeys.OZONE_OM_HTTP_ADDRESS_KEY,
+        OMConfigKeys.OZONE_OM_HTTPS_ADDRESS_KEY,
+        OMConfigKeys.OZONE_OM_HTTP_BIND_HOST_KEY,
+        OMConfigKeys.OZONE_OM_HTTPS_BIND_HOST_KEY};
+
+    for (String confKey : confKeys) {
+      String confValue = OmUtils.getConfSuffixedWithOMNodeId(
+          configuration, confKey, omServiceId, omNodeId);
+      if (confValue != null) {
+        LOG.info("Setting configuration key {} with value of key {}: {}",
+            confKey, OmUtils.addKeySuffixes(confKey, omNodeId), confValue);
+        configuration.set(confKey, confValue);
+      }
+    }
+  public OzoneManagerSnapshotProvider getOmSnapshotProvider() {
+    return omSnapshotProvider;
+  }
+
+  @VisibleForTesting

MOV26 MOV26 INS26 MOV23 INS40 INS23 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS25 INS60 INS25 INS21 INS21 INS21 INS65 INS43 INS42 INS43 INS42 INS60 INS70 INS42 INS42 INS41 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS7 INS32 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS42 INS42 INS5 INS59 INS44 INS42 INS8 INS42 INS27 INS38 INS21 INS42 INS42 INS32 INS27 INS32 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS67 INS67 INS67 INS67 INS43 INS85 INS42 INS3 INS43 INS42 INS60 INS25 INS42 INS33 INS32 INS7 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS4 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS22 INS14 INS43 INS27 INS42 INS42 INS42 INS43 INS85 INS40 INS40 INS40 INS40 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS52 INS42 INS43 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS43 INS59 INS43 INS59 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 UPD42 INS42