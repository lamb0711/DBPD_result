YARN-7939.  Added support to upgrade a component instance.
            Contributed by Chandni Singh

+import com.google.common.base.Preconditions;
-import org.apache.hadoop.yarn.service.api.records.Component;
+import org.apache.hadoop.yarn.service.api.records.Artifact;
-      ComponentInstance instance, Container container) {
+      ComponentInstance instance, Container container,
+      ComponentLaunchContext componentLaunchContext) {
-        new ContainerLauncher(service, instance, container);
+        new ContainerLauncher(service, instance, container,
+            componentLaunchContext, false);
+  public void reInitCompInstance(Service service,
+      ComponentInstance instance, Container container,
+      ComponentLaunchContext componentLaunchContext) {
+    ContainerLauncher reInitializer = new ContainerLauncher(service, instance,
+        container, componentLaunchContext, true);
+    executorService.execute(reInitializer);
+  }
+
+    private final ComponentLaunchContext componentLaunchContext;
+    private final boolean reInit;
-    public ContainerLauncher(
-        Service service,
-        ComponentInstance instance, Container container) {
+    ContainerLauncher(Service service, ComponentInstance instance,
+        Container container, ComponentLaunchContext componentLaunchContext,
+        boolean reInit) {
+      this.componentLaunchContext = componentLaunchContext;
+      this.reInit = reInit;
-      Component compSpec = instance.getCompSpec();
-          compSpec.getArtifact());
+          componentLaunchContext.getArtifact());
-            instance, fs, getConfig(), container);
-        instance.getComponent().getScheduler().getNmClient()
-            .startContainerAsync(container,
-                launcher.completeContainerLaunch());
+            instance, fs, getConfig(), container, componentLaunchContext);
+        if (!reInit) {
+          LOG.info("launching container {}", container.getId());
+          instance.getComponent().getScheduler().getNmClient()
+              .startContainerAsync(container,
+                  launcher.completeContainerLaunch());
+        } else {
+          LOG.info("reInitializing container {}", container.getId());
+          instance.getComponent().getScheduler().getNmClient()
+              .reInitializeContainerAsync(container.getId(),
+                  launcher.completeContainerLaunch(), true);
+        }
+
+  /**
+   * Launch context of a component.
+   */
+  public static class ComponentLaunchContext {
+    private final String name;
+    private final String serviceVersion;
+    private Artifact artifact;
+    private org.apache.hadoop.yarn.service.api.records.Configuration
+        configuration;
+    private String launchCommand;
+
+    public ComponentLaunchContext(String name, String serviceVersion) {
+      this.name = Preconditions.checkNotNull(name);
+      this.serviceVersion = Preconditions.checkNotNull(serviceVersion);
+    }
+
+    public String getName() {
+      return name;
+    }
+
+    public String getServiceVersion() {
+      return serviceVersion;
+    }
+
+    public Artifact getArtifact() {
+      return artifact;
+    }
+
+    public org.apache.hadoop.yarn.service.api.records.
+        Configuration getConfiguration() {
+      return configuration;
+    }
+
+    public String getLaunchCommand() {
+      return launchCommand;
+    }
+
+    public ComponentLaunchContext setArtifact(Artifact artifact) {
+      this.artifact = artifact;
+      return this;
+    }
+
+    public ComponentLaunchContext setConfiguration(org.apache.hadoop.yarn.
+        service.api.records.Configuration configuration) {
+      this.configuration = configuration;
+      return this;
+    }
+
+    public ComponentLaunchContext setLaunchCommand(String launchCommand) {
+      this.launchCommand = launchCommand;
+      return this;
+    }
+  }

INS26 INS40 UPD40 INS31 INS55 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS23 INS23 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS44 INS44 INS65 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 MOV43 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS41 INS42 INS41 INS40 INS41 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS7 INS7 INS8 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS52 INS40 INS7 INS52 INS42 INS7 INS52 MOV43 INS42 INS9 INS43 INS42 INS42 INS42 INS42 INS9 INS22 INS42 INS22 INS42 INS21 INS25 INS22 INS32 INS22 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS52 INS42 INS52 INS42 INS32 INS38 MOV8 INS8 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS21 INS21 INS32 INS32 UPD42 UPD42 INS45 INS32 INS42 INS42 INS45 INS32 INS32 INS42 INS32 INS32 INS9 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42