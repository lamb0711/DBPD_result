HDDS-662. Introduce ContainerReplicaState in StorageContainerManager. Contributed by Nanda kumar.

-import org.apache.hadoop.hdds.protocol.proto.HddsProtos.SCMContainerInfo;
-import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerInfo;
-import java.nio.charset.Charset;
+import java.util.Collections;
+import java.util.Objects;
+import java.util.stream.Collectors;
+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_DB_CACHE_SIZE_DEFAULT;
+import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_DB_CACHE_SIZE_MB;
-  private final NodeManager nodeManager;
-  private final long cacheSize;
-  private final Charset encoding = Charset.forName("UTF-8");
-   * @param cacheSizeMB - Amount of memory reserved for the LSM tree to cache
-   * its nodes. This is
-  public SCMContainerManager(
-      final Configuration conf, final NodeManager nodeManager, final int
-      cacheSizeMB, EventPublisher eventPublisher) throws IOException {
-    this.nodeManager = nodeManager;
-    this.cacheSize = cacheSizeMB;
+  public SCMContainerManager(final Configuration conf,
+      final NodeManager nodeManager, final EventPublisher eventPublisher)
+      throws IOException {
-    File metaDir = getOzoneMetaDirPath(conf);
+    final File metaDir = getOzoneMetaDirPath(conf);
+    final File containerDBPath = new File(metaDir, SCM_CONTAINER_DB);
+    final int cacheSize = conf.getInt(OZONE_SCM_DB_CACHE_SIZE_MB,
+        OZONE_SCM_DB_CACHE_SIZE_DEFAULT);
-    // Write the container name to pipeline mapping.
-    File containerDBPath = new File(metaDir, SCM_CONTAINER_DB);
-    containerStore =
-        MetadataStoreBuilder.newBuilder()
-            .setConf(conf)
-            .setDbFile(containerDBPath)
-            .setCacheSize(this.cacheSize * OzoneConsts.MB)
-            .build();
+    this.containerStore = MetadataStoreBuilder.newBuilder()
+        .setConf(conf)
+        .setDbFile(containerDBPath)
+        .setCacheSize(cacheSize * OzoneConsts.MB)
+        .build();
-
-    size = (long)conf.getStorageSize(OZONE_SCM_CONTAINER_SIZE,
+    this.size = (long) conf.getStorageSize(OZONE_SCM_CONTAINER_SIZE,
-
-            conf, eventPublisher, cacheSizeMB);
-
-    this.containerStateManager =
-        new ContainerStateManager(conf, this, pipelineSelector);
-    LOG.trace("Container State Manager created.");
-
+            conf, eventPublisher, cacheSize);
+    this.containerStateManager = new ContainerStateManager(conf);
-    long containerCreationLeaseTimeout = conf.getTimeDuration(
+    final long containerCreationLeaseTimeout = conf.getTimeDuration(
-    containerLeaseManager = new LeaseManager<>("ContainerCreation",
+    this.containerLeaseManager = new LeaseManager<>("ContainerCreation",
-    containerLeaseManager.start();
+    this.containerLeaseManager.start();
+
-  private void loadExistingContainers() {
-
-    List<ContainerInfo> containerList;
-    try {
-      containerList = listContainer(0, Integer.MAX_VALUE);
-
-      // if there are no container to load, let us return.
-      if (containerList == null || containerList.size() == 0) {
-        LOG.info("No containers to load for this cluster.");
-        return;
-      }
-    } catch (IOException e) {
-      if (!e.getMessage().equals("No container exists in current db")) {
-        LOG.error("Could not list the containers", e);
-      }
-      return;
+  private void loadExistingContainers() throws IOException {
+    List<Map.Entry<byte[], byte[]>> range = containerStore
+        .getSequentialRangeKVs(null, Integer.MAX_VALUE, null);
+    for (Map.Entry<byte[], byte[]> entry : range) {
+      ContainerInfo container = ContainerInfo.fromProtobuf(
+          HddsProtos.SCMContainerInfo.PARSER.parseFrom(entry.getValue()));
+      Preconditions.checkNotNull(container);
+      containerStateManager.loadContainer(container);
+      pipelineSelector.addContainerToPipeline(
+          container.getPipelineID(), container.getContainerID());
+  }
+  @VisibleForTesting
+  // TODO: remove this later.
+  public ContainerStateManager getContainerStateManager() {
+    return containerStateManager;
+  }
+
+  @Override
+  public List<ContainerInfo> getContainers() {
+    lock.lock();
-      for (ContainerInfo container : containerList) {
-        containerStateManager.addExistingContainer(container);
-        pipelineSelector.addContainerToPipeline(
-            container.getPipelineID(), container.getContainerID());
-      }
-    } catch (SCMException ex) {
-      LOG.error("Unable to create a container information. ", ex);
-      // Fix me, what is the proper shutdown procedure for SCM ??
-      // System.exit(1) // Should we exit here?
+      return containerStateManager.getAllContainerIDs().stream().map(id -> {
+        try {
+          return containerStateManager.getContainer(id);
+        } catch (ContainerNotFoundException e) {
+          // How can this happen?
+          return null;
+        }
+      }).filter(Objects::nonNull).collect(Collectors.toList());
+    } finally {
+      lock.unlock();
+    }
+  }
+
+  @Override
+  public List<ContainerInfo> getContainers(LifeCycleState state) {
+    lock.lock();
+    try {
+      return containerStateManager.getContainerIDsByState(state).stream()
+          .map(id -> {
+            try {
+              return containerStateManager.getContainer(id);
+            } catch (ContainerNotFoundException e) {
+              // How can this happen?
+              return null;
+            }
+          }).filter(Objects::nonNull).collect(Collectors.toList());
+    } finally {
+      lock.unlock();
-  public ContainerInfo getContainer(final long containerID) throws
-      IOException {
-    ContainerInfo containerInfo;
-    lock.lock();
-    try {
-      byte[] containerBytes = containerStore.get(
-          Longs.toByteArray(containerID));
-      if (containerBytes == null) {
-        throw new SCMException(
-            "Specified key does not exist. key : " + containerID,
-            SCMException.ResultCodes.FAILED_TO_FIND_CONTAINER);
-      }
-
-      HddsProtos.SCMContainerInfo temp = HddsProtos.SCMContainerInfo.PARSER
-          .parseFrom(containerBytes);
-      containerInfo = ContainerInfo.fromProtobuf(temp);
-      return containerInfo;
-    } finally {
-      lock.unlock();
-    }
+  public ContainerInfo getContainer(final ContainerID containerID)
+      throws ContainerNotFoundException {
+    return containerStateManager.getContainer(containerID);
-  public ContainerWithPipeline getContainerWithPipeline(long containerID)
-      throws IOException {
-    ContainerInfo contInfo;
+  public ContainerWithPipeline getContainerWithPipeline(ContainerID containerID)
+      throws ContainerNotFoundException {
-      byte[] containerBytes = containerStore.get(
-          Longs.toByteArray(containerID));
-      if (containerBytes == null) {
-        throw new SCMException(
-            "Specified key does not exist. key : " + containerID,
-            SCMException.ResultCodes.FAILED_TO_FIND_CONTAINER);
-      }
-      HddsProtos.SCMContainerInfo temp = HddsProtos.SCMContainerInfo.PARSER
-          .parseFrom(containerBytes);
-      contInfo = ContainerInfo.fromProtobuf(temp);
-
+      final ContainerInfo contInfo = getContainer(containerID);
-      if (contInfo.isContainerOpen()) {
+      if (contInfo.isOpen()) {
-        Set<DatanodeDetails> dnWithReplicas = containerStateManager
+        Set<ContainerReplica> dnWithReplicas = containerStateManager
-          leaderId = dnWithReplicas.iterator().next().getUuidString();
+          leaderId = dnWithReplicas.iterator().next()
+              .getDatanodeDetails().getUuidString();
-        dnWithReplicas.forEach(pipeline::addMember);
+        dnWithReplicas.stream().map(ContainerReplica::getDatanodeDetails).
+            forEach(pipeline::addMember);
-  public List<ContainerInfo> listContainer(long startContainerID,
-      int count) throws IOException {
-    List<ContainerInfo> containerList = new ArrayList<>();
+  public List<ContainerInfo> listContainer(ContainerID startContainerID,
+      int count) {
-      if (containerStore.isEmpty()) {
-        throw new IOException("No container exists in current db");
-      }
-      byte[] startKey = startContainerID <= 0 ? null :
-          Longs.toByteArray(startContainerID);
-      List<Map.Entry<byte[], byte[]>> range =
-          containerStore.getSequentialRangeKVs(startKey, count, null);
+      final long startId = startContainerID == null ?
+          0 : startContainerID.getId();
+      final List<ContainerID> containersIds =
+          new ArrayList<>(containerStateManager.getAllContainerIDs());
+      Collections.sort(containersIds);
-      // Transform the values into the pipelines.
-      // TODO: filter by container state
-      for (Map.Entry<byte[], byte[]> entry : range) {
-        ContainerInfo containerInfo =
-            ContainerInfo.fromProtobuf(
-                HddsProtos.SCMContainerInfo.PARSER.parseFrom(
-                    entry.getValue()));
-        Preconditions.checkNotNull(containerInfo);
-        containerList.add(containerInfo);
-      }
+      return containersIds.stream()
+          .filter(id -> id.getId() > startId)
+          .limit(count)
+          .map(id -> {
+            try {
+              return containerStateManager.getContainer(id);
+            } catch (ContainerNotFoundException ex) {
+              // This can never happen, as we hold lock no one else can remove
+              // the container after we got the container ids.
+              LOG.warn("Container Missing.", ex);
+              return null;
+            }
+          }).collect(Collectors.toList());
-    return containerList;
-  public ContainerWithPipeline allocateContainer(
-      ReplicationType type,
-      ReplicationFactor replicationFactor,
-      String owner)
+  public ContainerWithPipeline allocateContainer(final ReplicationType type,
+      final ReplicationFactor replicationFactor, final String owner)
-
-    ContainerInfo containerInfo;
-    ContainerWithPipeline containerWithPipeline;
-
-      containerWithPipeline = containerStateManager.allocateContainer(
-              pipelineSelector, type, replicationFactor, owner);
-      containerInfo = containerWithPipeline.getContainerInfo();
+      final ContainerInfo containerInfo; containerInfo = containerStateManager
+          .allocateContainer(pipelineSelector, type, replicationFactor, owner);
+      final Pipeline pipeline = pipelineSelector.getPipeline(
+          containerInfo.getPipelineID());
-      byte[] containerIDBytes = Longs.toByteArray(
-          containerInfo.getContainerID());
-      containerStore.put(containerIDBytes, containerInfo.getProtobuf()
-              .toByteArray());
+      try {
+        final byte[] containerIDBytes = Longs.toByteArray(
+            containerInfo.getContainerID());
+        containerStore.put(containerIDBytes,
+            containerInfo.getProtobuf().toByteArray());
+      } catch (IOException ex) {
+        // If adding to containerStore fails, we should remove the container
+        // from in-memory map.
+        try {
+          containerStateManager.removeContainer(containerInfo.containerID());
+        } catch (ContainerNotFoundException cnfe) {
+          // No need to worry much, everything is going as planned.
+        }
+        throw ex;
+      }
+      return new ContainerWithPipeline(containerInfo, pipeline);
-    return containerWithPipeline;
-  public void deleteContainer(long containerID) throws IOException {
+  public void deleteContainer(ContainerID containerID) throws IOException {
-      byte[] dbKey = Longs.toByteArray(containerID);
-      byte[] containerBytes = containerStore.get(dbKey);
-      if (containerBytes == null) {
-        throw new SCMException(
-            "Failed to delete container " + containerID + ", reason : " +
-                "container doesn't exist.",
-            SCMException.ResultCodes.FAILED_TO_FIND_CONTAINER);
+      containerStateManager.removeContainer(containerID);
+      final byte[] dbKey = Longs.toByteArray(containerID.getId());
+      final byte[] containerBytes = containerStore.get(dbKey);
+      if (containerBytes != null) {
+        containerStore.delete(dbKey);
+      } else {
+        // Where did the container go? o_O
+        LOG.warn("Unable to remove the container {} from container store," +
+                " it's missing!", containerID);
-      containerStore.delete(dbKey);
+    } catch (ContainerNotFoundException cnfe) {
+      throw new SCMException(
+          "Failed to delete container " + containerID + ", reason : " +
+              "container doesn't exist.",
+          SCMException.ResultCodes.FAILED_TO_FIND_CONTAINER);
-      long containerID, HddsProtos.LifeCycleEvent event) throws
-      IOException {
-    ContainerInfo containerInfo;
+      ContainerID containerID, HddsProtos.LifeCycleEvent event)
+      throws IOException {
+    // Should we return the updated ContainerInfo instead of LifeCycleState?
-      byte[] dbKey = Longs.toByteArray(containerID);
-      byte[] containerBytes = containerStore.get(dbKey);
-      if (containerBytes == null) {
-        throw new SCMException(
-            "Failed to update container state"
-                + containerID
-                + ", reason : container doesn't exist.",
-            SCMException.ResultCodes.FAILED_TO_FIND_CONTAINER);
+      ContainerInfo updatedContainer =
+          updateContainerStateInternal(containerID, event);
+      if (!updatedContainer.isOpen()) {
+        pipelineSelector.removeContainerFromPipeline(
+            updatedContainer.getPipelineID(), containerID.getId());
-      containerInfo =
-          ContainerInfo.fromProtobuf(HddsProtos.SCMContainerInfo.PARSER
-              .parseFrom(containerBytes));
+      final byte[] dbKey = Longs.toByteArray(containerID.getId());
+      containerStore.put(dbKey, updatedContainer.getProtobuf().toByteArray());
+      return updatedContainer.getState();
+    } catch (ContainerNotFoundException cnfe) {
+      throw new SCMException(
+          "Failed to update container state"
+              + containerID
+              + ", reason : container doesn't exist.",
+          SCMException.ResultCodes.FAILED_TO_FIND_CONTAINER);
+    } finally {
+      lock.unlock();
+    }
+  }
-      Preconditions.checkNotNull(containerInfo);
+  private ContainerInfo updateContainerStateInternal(ContainerID containerID,
+      HddsProtos.LifeCycleEvent event) throws IOException {
+    // Refactor the below code for better clarity.
+    try {
+      final ContainerInfo info =
+          containerStateManager.getContainer(containerID);
-            containerLeaseManager.acquire(containerInfo);
+            containerLeaseManager.acquire(info);
-          return null;
-        });
+          return null; });
-        containerLeaseManager.release(containerInfo);
+        containerLeaseManager.release(info);
-      ContainerInfo updatedContainer = containerStateManager
-          .updateContainerState(containerInfo, event);
-      if (!updatedContainer.isContainerOpen()) {
-        pipelineSelector.removeContainerFromPipeline(
-                containerInfo.getPipelineID(), containerID);
-      }
-      containerStore.put(dbKey, updatedContainer.getProtobuf().toByteArray());
-      return updatedContainer.getState();
+      return containerStateManager.updateContainerState(containerID, event);
-    } finally {
-      lock.unlock();
-  /**
-   * Update deleteTransactionId according to deleteTransactionMap.
-   *
-   * @param deleteTransactionMap Maps the containerId to latest delete
-   *                             transaction id for the container.
-   * @throws IOException
-   */
+
+    /**
+     * Update deleteTransactionId according to deleteTransactionMap.
+     *
+     * @param deleteTransactionMap Maps the containerId to latest delete
+     *                             transaction id for the container.
+     * @throws IOException
+     */
-   * Returns the container State Manager.
-   *
-   * @return ContainerStateManager
-   */
-  @Override
-  public ContainerStateManager getStateManager() {
-    return containerStateManager;
-  }
-
-  /**
-    ContainerInfo containerInfo = getStateManager()
+    ContainerInfo containerInfo = containerStateManager
-      ContainerReportsProto reports, boolean isRegisterCall)
-      throws IOException {
+      ContainerReportsProto reports) throws IOException {
-    for (StorageContainerDatanodeProtocolProtos.ContainerInfo contInfo :
+    for (StorageContainerDatanodeProtocolProtos.ContainerInfo newInfo :
-      // Update replica info during registration process.
-      if (isRegisterCall) {
-        try {
-          getStateManager().addContainerReplica(ContainerID.
-              valueof(contInfo.getContainerID()), datanodeDetails);
-        } catch (Exception ex) {
-          // Continue to next one after logging the error.
-          LOG.error("Error while adding replica for containerId {}.",
-              contInfo.getContainerID(), ex);
-        }
-      }
-      byte[] dbKey = Longs.toByteArray(contInfo.getContainerID());
+      ContainerID id = ContainerID.valueof(newInfo.getContainerID());
+      ContainerReplica replica = ContainerReplica.newBuilder()
+          .setContainerID(id)
+          .setDatanodeDetails(datanodeDetails)
+          .setOriginNodeId(datanodeDetails.getUuid())
+          .build();
-        byte[] containerBytes = containerStore.get(dbKey);
-        if (containerBytes != null) {
-          HddsProtos.SCMContainerInfo knownState =
-              HddsProtos.SCMContainerInfo.PARSER.parseFrom(containerBytes);
-
-          if (knownState.getState() == LifeCycleState.CLOSING
-              && contInfo.getState() == LifeCycleState.CLOSED) {
-
-            updateContainerState(contInfo.getContainerID(),
-                LifeCycleEvent.CLOSE);
-
-            //reread the container
-            knownState =
-                HddsProtos.SCMContainerInfo.PARSER
-                    .parseFrom(containerStore.get(dbKey));
-          }
-
-          HddsProtos.SCMContainerInfo newState =
-              reconcileState(contInfo, knownState, datanodeDetails);
-
-          if (knownState.getDeleteTransactionId() > contInfo
-              .getDeleteTransactionId()) {
-            pendingDeleteStatusList
-                .addPendingDeleteStatus(contInfo.getDeleteTransactionId(),
-                    knownState.getDeleteTransactionId(),
-                    knownState.getContainerID());
-          }
-
-          // FIX ME: This can be optimized, we write twice to memory, where a
-          // single write would work well.
-          //
-          // We need to write this to DB again since the closed only write
-          // the updated State.
-          containerStore.put(dbKey, newState.toByteArray());
-
-        } else {
-          // Container not found in our container db.
-          LOG.error("Error while processing container report from datanode :" +
-                  " {}, for container: {}, reason: container doesn't exist in" +
-                  "container database.", datanodeDetails,
-              contInfo.getContainerID());
+        containerStateManager.updateContainerReplica(id, replica);
+        ContainerInfo currentInfo = containerStateManager.getContainer(id);
+        if (newInfo.getState() == LifeCycleState.CLOSING
+            && currentInfo.getState() == LifeCycleState.CLOSED) {
+          currentInfo = updateContainerStateInternal(id, LifeCycleEvent.CLOSE);
+
+        HddsProtos.SCMContainerInfo newState =
+            reconcileState(newInfo, currentInfo);
+
+        if (currentInfo.getDeleteTransactionId() >
+            newInfo.getDeleteTransactionId()) {
+          pendingDeleteStatusList
+                .addPendingDeleteStatus(newInfo.getDeleteTransactionId(),
+                    currentInfo.getDeleteTransactionId(),
+                    currentInfo.getContainerID());
+        }
+        containerStateManager.updateContainerInfo(
+            ContainerInfo.fromProtobuf(newState));
+        containerStore.put(id.getBytes(), newState.toByteArray());
+      } catch (ContainerNotFoundException e) {
+        LOG.error("Error while processing container report from datanode :" +
+                " {}, for container: {}, reason: container doesn't exist in" +
+                "container database.", datanodeDetails, id);
-   * @param dnDetails
-      SCMContainerInfo knownState, DatanodeDetails dnDetails) {
+      ContainerInfo knownState) {
-        .setPipelineID(knownState.getPipelineID())
-        .setReplicationType(knownState.getReplicationType())
-        .setReplicationFactor(knownState.getReplicationFactor());
-
-    // TODO: If current state doesn't have this DN in list of DataNodes with
-    // replica then add it in list of replicas.
-
-    // If used size is greater than allocated size, we will be updating
-    // allocated size with used size. This update is done as a fallback
-    // mechanism in case SCM crashes without properly updating allocated
-    // size. Correct allocated value will be updated by
-    // ContainerStateManager during SCM shutdown.
-    long usedSize = datanodeState.getUsed();
-    long allocated = knownState.getAllocatedBytes() > usedSize ?
-        knownState.getAllocatedBytes() : usedSize;
-    builder.setAllocatedBytes(allocated)
-        .setUsedBytes(usedSize)
-        .setNumberOfKeys(datanodeState.getKeyCount())
+        .setPipelineID(knownState.getPipelineID().getProtobuf())
+        .setReplicationType(knownState.getReplicationType())
+        .setReplicationFactor(knownState.getReplicationFactor())
+        .setUsedBytes(datanodeState.getUsed())
+        .setNumberOfKeys(datanodeState.getKeyCount())
-        .setContainerID(knownState.getContainerID())
-
-   * In Container is in closed state, if it is in closed, Deleting or Deleted
-   * State.
+   * Returns the latest list of DataNodes where replica for given containerId
+   * exist. Throws an SCMException if no entry is found for given containerId.
-   * @param info - ContainerInfo.
-   * @return true if is in open state, false otherwise
+   * @param containerID
+   * @return Set<DatanodeDetails>
-  private boolean shouldClose(ContainerInfo info) {
-    return info.getState() == HddsProtos.LifeCycleState.OPEN;
+  public Set<ContainerReplica> getContainerReplicas(
+      final ContainerID containerID) throws ContainerNotFoundException {
+    return containerStateManager.getContainerReplicas(containerID);
-  private boolean isClosed(ContainerInfo info) {
-    return info.getState() == HddsProtos.LifeCycleState.CLOSED;
+  /**
+   * Add a container Replica for given DataNode.
+   *
+   * @param containerID
+   * @param replica
+   */
+  public void updateContainerReplica(final ContainerID containerID,
+      final ContainerReplica replica) throws ContainerNotFoundException {
+    containerStateManager.updateContainerReplica(containerID, replica);
+  }
+
+  /**
+   * Remove a container Replica for given DataNode.
+   *
+   * @param containerID
+   * @param replica
+   * @return True of dataNode is removed successfully else false.
+   */
+  public void removeContainerReplica(final ContainerID containerID,
+      final ContainerReplica replica)
+      throws ContainerNotFoundException, ContainerReplicaNotFoundException {
+    containerStateManager.removeContainerReplica(containerID, replica);
-      flushContainerInfo();
-  /**
-   * Since allocatedBytes of a container is only in memory, stored in
-   * containerStateManager, when closing SCMContainerManager, we need to update
-   * this in the container store.
-   *
-   * @throws IOException on failure.
-   */
-  @VisibleForTesting
-  public void flushContainerInfo() throws IOException {
-    List<ContainerInfo> containers = containerStateManager.getAllContainers();
-    List<Long> failedContainers = new ArrayList<>();
-    for (ContainerInfo info : containers) {
-      // even if some container updated failed, others can still proceed
-      try {
-        byte[] dbKey = Longs.toByteArray(info.getContainerID());
-        byte[] containerBytes = containerStore.get(dbKey);
-        // TODO : looks like when a container is deleted, the container is
-        // removed from containerStore but not containerStateManager, so it can
-        // return info of a deleted container. may revisit this in the future,
-        // for now, just skip a not-found container
-        if (containerBytes != null) {
-          containerStore.put(dbKey, info.getProtobuf().toByteArray());
-        } else {
-          LOG.debug("Container state manager has container {} but not found " +
-                  "in container store, a deleted container?",
-              info.getContainerID());
-        }
-      } catch (IOException ioe) {
-        failedContainers.add(info.getContainerID());
-      }
-    }
-    if (!failedContainers.isEmpty()) {
-      throw new IOException("Error in flushing container info from container " +
-          "state manager: " + failedContainers);
-    }
-  }
-
-  @VisibleForTesting
-  public MetadataStore getContainerStore() {
-    return containerStore;
-  }
-

MOV26 MOV26 MOV26 INS26 INS26 MOV31 MOV31 UPD40 INS40 INS40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD83 INS39 INS42 MOV8 MOV78 INS83 MOV43 INS42 MOV8 INS78 INS83 MOV74 INS42 INS8 MOV78 INS83 MOV74 INS42 INS44 INS8 MOV29 MOV78 INS83 MOV43 INS42 INS44 INS43 INS8 INS43 MOV29 MOV78 INS83 MOV74 INS42 INS44 MOV44 INS8 MOV29 MOV78 MOV43 UPD42 INS44 MOV43 INS8 UPD83 MOV43 UPD42 MOV29 UPD83 MOV83 INS74 INS42 INS44 INS43 MOV8 MOV29 MOV83 MOV39 UPD42 MOV42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS83 INS60 INS42 INS21 INS54 UPD43 MOV43 UPD42 MOV42 MOV21 INS54 INS83 UPD43 MOV43 UPD42 MOV42 INS42 INS41 INS43 INS42 INS43 INS42 MOV21 INS54 INS83 INS83 INS83 INS43 INS43 INS43 INS42 MOV21 INS54 INS43 MOV43 INS43 INS43 INS83 INS43 UPD42 MOV42 INS42 UPD65 INS65 INS83 INS43 INS42 INS83 UPD43 MOV43 UPD42 MOV42 INS42 MOV21 INS65 INS65 INS65 INS65 INS83 UPD43 MOV43 UPD42 MOV42 INS83 INS43 INS42 INS42 UPD42 MOV42 INS21 MOV42 MOV66 MOV66 MOV66 MOV66 MOV66 MOV66 INS83 INS83 INS83 INS39 INS59 INS83 INS32 INS8 INS8 UPD42 INS8 MOV8 UPD42 INS32 INS42 INS42 INS8 MOV8 INS8 INS42 INS12 INS42 INS40 INS8 INS12 MOV8 INS42 UPD42 MOV42 INS32 UPD66 UPD66 UPD42 UPD66 INS42 UPD42 MOV42 INS42 INS32 UPD66 UPD42 INS42 UPD42 MOV42 UPD42 INS66 INS42 INS42 INS66 UPD42 INS42 INS32 INS42 INS32 INS22 INS22 INS22 INS22 MOV21 INS42 INS42 INS41 MOV21 INS41 MOV42 UPD42 MOV42 UPD42 MOV42 INS60 MOV60 INS21 INS41 MOV60 MOV21 INS60 INS54 INS41 INS21 INS44 MOV8 MOV60 MOV25 MOV60 MOV21 MOV41 INS44 MOV8 INS41 UPD42 INS60 INS60 INS32 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS52 INS42 UPD42 INS52 INS42 INS52 INS42 INS40 INS33 INS32 INS32 INS83 MOV43 INS83 INS39 INS59 INS83 INS74 INS32 INS32 INS83 INS83 INS43 INS59 MOV8 INS12 INS14 INS32 INS83 MOV5 INS83 MOV5 UPD27 INS8 INS8 INS43 INS42 MOV43 INS38 INS83 MOV5 INS43 INS42 INS83 MOV43 INS32 UPD42 MOV42 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS32 UPD42 UPD42 INS32 INS42 INS32 UPD42 UPD42 INS42 INS16 MOV43 INS43 UPD42 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS32 INS44 INS8 INS43 INS42 INS42 INS42 INS42 INS42 MOV33 MOV21 INS21 INS42 UPD42 INS32 INS21 UPD42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS21 MOV60 MOV25 MOV60 MOV25 INS21 MOV21 INS44 INS8 INS32 INS42 MOV32 INS42 INS32 INS42 INS90 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS90 INS42 INS42 UPD42 MOV42 UPD74 INS27 INS34 INS32 INS42 INS32 INS32 INS42 INS86 INS42 INS42 INS42 INS42 MOV32 INS83 MOV43 INS42 INS54 INS53 INS42 INS32 INS32 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS32 UPD42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 MOV42 MOV32 INS32 INS42 INS32 MOV43 INS32 INS43 INS42 MOV21 MOV32 INS42 MOV32 INS32 INS42 INS86 INS42 INS42 INS32 INS42 INS86 INS42 INS42 UPD43 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS59 INS8 INS8 INS12 INS42 MOV42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 UPD42 UPD42 INS32 UPD42 MOV42 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS59 INS8 MOV32 UPD42 MOV42 INS59 INS8 UPD42 INS32 INS42 INS90 INS32 INS42 INS86 INS42 INS54 INS21 INS44 INS8 INS45 INS45 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS54 UPD42 UPD42 INS42 INS42 INS54 INS32 MOV42 INS42 INS42 INS42 INS42 INS42 INS59 INS27 INS8 MOV12 INS32 INS43 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS32 MOV32 INS42 MOV32 INS8 INS12 INS8 INS12 MOV32 INS42 INS42 INS32 INS42 INS41 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 UPD42 UPD42 INS32 INS41 INS44 INS8 INS41 INS44 INS8 UPD42 INS42 INS42 INS32 UPD43 INS41 INS42 INS42 MOV32 INS42 INS32 INS43 INS42 INS41 INS32 INS43 INS42 MOV41 INS42 INS42 INS42 UPD42 INS33 INS42 UPD42 MOV42 INS42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 UPD42 UPD45 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL32 DEL59 DEL23 DEL65 DEL42 DEL66 DEL66 DEL65 DEL83 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL83 DEL39 DEL42 DEL59 DEL60 DEL42 DEL34 DEL40 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL27 DEL41 DEL8 DEL25 DEL8 DEL44 DEL45 DEL32 DEL38 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL44 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL54 DEL8 DEL31 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL45 DEL14 DEL53 DEL8 DEL25 DEL39 DEL85 DEL5 DEL42 DEL42 DEL34 DEL27 DEL33 DEL42 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL54 DEL42 DEL41 DEL8 DEL45 DEL39 DEL42 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL40 DEL14 DEL53 DEL8 DEL25 DEL40 DEL43 DEL42 DEL40 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL39 DEL39 DEL85 DEL5 DEL83 DEL39 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL40 DEL14 DEL53 DEL40 DEL43 DEL40 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL54 DEL8 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL31 DEL32 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL45 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL39 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL40 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL21 DEL40 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL39 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL8 DEL8 DEL25 DEL8 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL21 DEL66 DEL32 DEL40 DEL27 DEL66 DEL66 DEL66 DEL42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL42 DEL44 DEL42 DEL42 DEL32 DEL40 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL31 DEL42 DEL32 DEL21 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL44 DEL42 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL70 DEL42 DEL42 DEL32 DEL38 DEL43 DEL45 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31