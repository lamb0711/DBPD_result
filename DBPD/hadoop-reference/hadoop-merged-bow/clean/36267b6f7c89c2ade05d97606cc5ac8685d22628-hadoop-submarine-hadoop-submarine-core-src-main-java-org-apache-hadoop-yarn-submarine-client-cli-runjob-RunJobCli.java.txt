SUBMARINE-52. [SUBMARINE-14] Generate Service spec + launch script for single-node PyTorch learning job. Contributed by Szilard Nemeth.

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
-package org.apache.hadoop.yarn.submarine.client.cli;
+package org.apache.hadoop.yarn.submarine.client.cli.runjob;
+import org.apache.hadoop.yarn.submarine.client.cli.AbstractCli;
+import org.apache.hadoop.yarn.submarine.client.cli.CliConstants;
+import org.apache.hadoop.yarn.submarine.client.cli.CliUtils;
+import org.apache.hadoop.yarn.submarine.client.cli.Command;
-import org.apache.hadoop.yarn.submarine.client.cli.param.RunJobParameters;
-import org.apache.hadoop.yarn.submarine.client.cli.param.RunJobParameters.UnderscoreConverterPropertyUtils;
+import org.apache.hadoop.yarn.submarine.client.cli.param.runjob.RunJobParameters;
+import org.apache.hadoop.yarn.submarine.client.cli.param.runjob.RunJobParameters.UnderscoreConverterPropertyUtils;
+/**
+ * This purpose of this class is to handle / parse CLI arguments related to
+ * the run job Submarine command.
+ */
-  private static final String YAML_PARSE_FAILED = "Failed to parse " +
+  private static final String CAN_BE_USED_WITH_TF_PYTORCH =
+      "Can be used with TensorFlow or PyTorch frameworks.";
+  private static final String CAN_BE_USED_WITH_TF_ONLY =
+      "Can only be used with TensorFlow framework.";
+  public static final String YAML_PARSE_FAILED = "Failed to parse " +
-  private Options options;
-  private RunJobParameters parameters = new RunJobParameters();
+  private Options options;
+  private ParametersHolder parametersHolder;
-  RunJobCli(ClientContext cliContext, JobSubmitter jobSubmitter,
+  public RunJobCli(ClientContext cliContext, JobSubmitter jobSubmitter,
+    options.addOption(CliConstants.FRAMEWORK, true,
+        String.format("Framework to use. Valid values are: %s! " +
+                "The default framework is Tensorflow.",
+            Framework.getValues()));
-            + "could be local or other FS directory. This will be used to serve.");
-    options.addOption(CliConstants.N_WORKERS, true,
-        "Number of worker tasks of the job, by default it's 1");
-    options.addOption(CliConstants.N_PS, true,
-        "Number of PS tasks of the job, by default it's 0");
-    options.addOption(CliConstants.WORKER_RES, true,
-        "Resource of each worker, for example "
-            + "memory-mb=2048,vcores=2,yarn.io/gpu=2");
-    options.addOption(CliConstants.PS_RES, true,
-        "Resource of each PS, for example "
-            + "memory-mb=2048,vcores=2,yarn.io/gpu=2");
+            + "could be local or other FS directory. " +
+            "This will be used to serve.");
-    options.addOption(CliConstants.TENSORBOARD, false,
-        "Should we run TensorBoard"
-            + " for this job? By default it's disabled");
-    options.addOption(CliConstants.TENSORBOARD_RESOURCES, true,
-        "Specify resources of Tensorboard, by default it is "
-            + CliConstants.TENSORBOARD_DEFAULT_RESOURCES);
-    options.addOption(CliConstants.TENSORBOARD_DOCKER_IMAGE, true,
-        "Specify Tensorboard docker image. when this is not "
-            + "specified, Tensorboard " + "uses --" + CliConstants.DOCKER_IMAGE
-            + " as default.");
-    options.addOption(CliConstants.WORKER_LAUNCH_CMD, true,
-        "Commandline of worker, arguments will be "
-            + "directly used to launch the worker");
-    options.addOption(CliConstants.PS_LAUNCH_CMD, true,
-        "Commandline of worker, arguments will be "
-            + "directly used to launch the PS");
+
+    addWorkerOptions(options);
+    addPSOptions(options);
+    addTensorboardOptions(options);
+
-    options.addOption(CliConstants.PS_DOCKER_IMAGE, true,
-        "Specify docker image for PS, when this is not specified, PS uses --"
-            + CliConstants.DOCKER_IMAGE + " as default.");
-    options.addOption(CliConstants.WORKER_DOCKER_IMAGE, true,
-        "Specify docker image for WORKER, when this is not specified, WORKER "
-            + "uses --" + CliConstants.DOCKER_IMAGE + " as default.");
-  private void replacePatternsInParameters() throws IOException {
-    if (parameters.getPSLaunchCmd() != null && !parameters.getPSLaunchCmd()
-        .isEmpty()) {
-      String afterReplace = CliUtils.replacePatternsInLaunchCommand(
-          parameters.getPSLaunchCmd(), parameters,
-          clientContext.getRemoteDirectoryManager());
-      parameters.setPSLaunchCmd(afterReplace);
-    }
+  private void addWorkerOptions(Options options) {
+    options.addOption(CliConstants.N_WORKERS, true,
+        "Number of worker tasks of the job, by default it's 1." +
+            CAN_BE_USED_WITH_TF_PYTORCH);
+    options.addOption(CliConstants.WORKER_DOCKER_IMAGE, true,
+        "Specify docker image for WORKER, when this is not specified, WORKER "
+            + "uses --" + CliConstants.DOCKER_IMAGE + " as default." +
+            CAN_BE_USED_WITH_TF_PYTORCH);
+    options.addOption(CliConstants.WORKER_LAUNCH_CMD, true,
+        "Commandline of worker, arguments will be "
+            + "directly used to launch the worker" +
+            CAN_BE_USED_WITH_TF_PYTORCH);
+    options.addOption(CliConstants.WORKER_RES, true,
+        "Resource of each worker, for example "
+            + "memory-mb=2048,vcores=2,yarn.io/gpu=2" +
+            CAN_BE_USED_WITH_TF_PYTORCH);
+  }
-    if (parameters.getWorkerLaunchCmd() != null && !parameters
-        .getWorkerLaunchCmd().isEmpty()) {
-      String afterReplace = CliUtils.replacePatternsInLaunchCommand(
-          parameters.getWorkerLaunchCmd(), parameters,
-          clientContext.getRemoteDirectoryManager());
-      parameters.setWorkerLaunchCmd(afterReplace);
-    }
+  private void addPSOptions(Options options) {
+    options.addOption(CliConstants.N_PS, true,
+        "Number of PS tasks of the job, by default it's 0. " +
+            CAN_BE_USED_WITH_TF_ONLY);
+    options.addOption(CliConstants.PS_DOCKER_IMAGE, true,
+        "Specify docker image for PS, when this is not specified, PS uses --"
+            + CliConstants.DOCKER_IMAGE + " as default." +
+            CAN_BE_USED_WITH_TF_ONLY);
+    options.addOption(CliConstants.PS_LAUNCH_CMD, true,
+        "Commandline of worker, arguments will be "
+            + "directly used to launch the PS" +
+            CAN_BE_USED_WITH_TF_ONLY);
+    options.addOption(CliConstants.PS_RES, true,
+        "Resource of each PS, for example "
+            + "memory-mb=2048,vcores=2,yarn.io/gpu=2" +
+            CAN_BE_USED_WITH_TF_ONLY);
+  }
+
+  private void addTensorboardOptions(Options options) {
+    options.addOption(CliConstants.TENSORBOARD, false,
+        "Should we run TensorBoard"
+            + " for this job? By default it's disabled." +
+            CAN_BE_USED_WITH_TF_ONLY);
+    options.addOption(CliConstants.TENSORBOARD_RESOURCES, true,
+        "Specify resources of Tensorboard, by default it is "
+            + CliConstants.TENSORBOARD_DEFAULT_RESOURCES + "." +
+            CAN_BE_USED_WITH_TF_ONLY);
+    options.addOption(CliConstants.TENSORBOARD_DOCKER_IMAGE, true,
+        "Specify Tensorboard docker image. when this is not "
+            + "specified, Tensorboard " + "uses --" + CliConstants.DOCKER_IMAGE
+            + " as default." +
+            CAN_BE_USED_WITH_TF_ONLY);
-      // Do parsing
-      ParametersHolder parametersHolder = createParametersHolder(cli);
-      parameters.updateParameters(parametersHolder, clientContext);
+      parametersHolder = createParametersHolder(cli);
+      parametersHolder.updateParameters(clientContext);
-
-    // Set default job dir / saved model dir, etc.
-    setDefaultDirs();
-
-    // replace patterns
-    replacePatternsInParameters();
-  private ParametersHolder createParametersHolder(CommandLine cli) {
+  private ParametersHolder createParametersHolder(CommandLine cli)
+      throws ParseException, YarnException {
-      if (yamlConfig == null) {
-        throw new YamlParseException(String.format(
-            YAML_PARSE_FAILED + ", file is empty: %s", yamlConfigFile));
-      } else if (yamlConfig.getConfigs() == null) {
-        throw new YamlParseException(String.format(YAML_PARSE_FAILED +
-            ", config section should be defined, but it cannot be found in " +
-            "YAML file '%s'!", yamlConfigFile));
-      }
+      checkYamlConfig(yamlConfigFile, yamlConfig);
-      return ParametersHolder.createWithCmdLineAndYaml(cli, yamlConfig);
+      return ParametersHolder.createWithCmdLineAndYaml(cli, yamlConfig,
+          Command.RUN_JOB);
-      return ParametersHolder.createWithCmdLine(cli);
+      return ParametersHolder.createWithCmdLine(cli, Command.RUN_JOB);
+    }
+  }
+
+  private void checkYamlConfig(String yamlConfigFile,
+      YamlConfigFile yamlConfig) {
+    if (yamlConfig == null) {
+      throw new YamlParseException(String.format(
+          YAML_PARSE_FAILED + ", file is empty: %s", yamlConfigFile));
+    } else if (yamlConfig.getConfigs() == null) {
+      throw new YamlParseException(String.format(YAML_PARSE_FAILED +
+          ", config section should be defined, but it cannot be found in " +
+          "YAML file '%s'!", yamlConfigFile));
-  private void setDefaultDirs() throws IOException {
-    // Create directories if needed
-    String jobDir = parameters.getCheckpointPath();
-    if (null == jobDir) {
-      if (parameters.getNumWorkers() > 0) {
-        jobDir = clientContext.getRemoteDirectoryManager().getJobCheckpointDir(
-            parameters.getName(), true).toString();
-      } else {
-        // when #workers == 0, it means we only launch TB. In that case,
-        // point job dir to root dir so all job's metrics will be shown.
-        jobDir = clientContext.getRemoteDirectoryManager().getUserRootFolder()
-            .toString();
-      }
-      parameters.setCheckpointPath(jobDir);
-    }
-
-    if (parameters.getNumWorkers() > 0) {
-      // Only do this when #worker > 0
-      String savedModelDir = parameters.getSavedModelPath();
-      if (null == savedModelDir) {
-        savedModelDir = jobDir;
-        parameters.setSavedModelPath(savedModelDir);
-      }
-    }
-  }
-
-  private void storeJobInformation(String jobName, ApplicationId applicationId,
-      String[] args) throws IOException {
+  private void storeJobInformation(RunJobParameters parameters,
+      ApplicationId applicationId, String[] args) throws IOException {
+    String jobName = parameters.getName();
-    ApplicationId applicationId = this.jobSubmitter.submitJob(parameters);
-    storeJobInformation(parameters.getName(), applicationId, args);
+    ApplicationId applicationId = jobSubmitter.submitJob(parametersHolder);
+    RunJobParameters parameters =
+        (RunJobParameters) parametersHolder.getParameters();
+    storeJobInformation(parameters, applicationId, args);
-    return parameters;
+    return (RunJobParameters) parametersHolder.getParameters();

INS26 INS26 INS26 INS26 MOV23 UPD40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS29 INS23 INS23 INS31 INS31 INS31 INS65 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 MOV43 INS59 UPD83 MOV43 INS83 MOV21 UPD42 INS44 INS8 MOV83 MOV39 UPD42 MOV42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS43 INS43 INS83 INS39 INS42 INS44 INS44 MOV8 INS66 INS66 INS42 INS45 INS42 INS45 UPD42 INS21 INS43 INS42 MOV21 MOV21 INS21 MOV21 INS43 INS42 INS21 MOV21 MOV21 MOV21 INS43 INS42 INS21 MOV21 MOV21 INS42 INS42 MOV43 INS42 INS43 INS42 MOV43 UPD42 INS60 INS60 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS32 INS32 INS42 INS32 INS32 INS8 INS42 MOV43 INS59 MOV43 INS59 INS11 MOV42 MOV42 UPD40 MOV40 MOV9 INS32 UPD40 UPD9 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 INS9 INS27 UPD42 MOV42 UPD42 MOV42 INS40 INS9 INS27 UPD42 UPD42 INS40 INS9 INS27 UPD42 MOV42 UPD42 MOV42 INS40 INS9 INS27 UPD42 MOV42 UPD42 MOV42 INS40 MOV9 INS27 UPD42 MOV42 UPD42 MOV42 INS40 INS9 INS27 UPD42 UPD42 INS40 INS9 INS27 UPD42 MOV42 UPD42 MOV42 INS40 INS9 INS27 INS42 INS42 INS40 INS9 INS27 INS21 MOV60 INS21 MOV21 INS41 INS42 MOV32 INS42 INS11 MOV42 INS43 INS32 UPD42 MOV42 UPD42 MOV42 MOV27 INS32 INS45 INS45 UPD45 UPD45 INS45 INS42 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS40 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 UPD42 MOV42 INS45 INS40 INS45 INS42 INS42 INS7 INS32 INS32 INS42 INS42 UPD42 INS43 INS32 INS42 INS42 INS42 UPD45 UPD45 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 DEL14 DEL40 DEL9 DEL45 DEL45 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL40 DEL9 DEL45 DEL32 DEL21 DEL42 DEL42 DEL40 DEL9 DEL32 DEL21 DEL40 DEL9 DEL45 DEL45 DEL27 DEL32 DEL21 DEL40 DEL9 DEL45 DEL40 DEL27 DEL40 DEL9 DEL45 DEL45 DEL27 DEL40 DEL9 DEL45 DEL45 DEL27 DEL42 DEL42 DEL40 DEL9 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL7 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL32 DEL34 DEL27 DEL8 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL32 DEL59 DEL60 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42