YARN-7739. DefaultAMSProcessor should properly check customized resource types against minimum/maximum allocation. (wangda)

Change-Id: I10cc9341237d9a2fc0f8c855efb98a36b91389e2

+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
-    if (resReq.getCapability().getMemorySize() < 0 ||
-        resReq.getCapability().getMemorySize() > maximumResource.getMemorySize()) {
-      throw new InvalidResourceRequestException("Invalid resource request"
-          + ", requested memory < 0"
-          + ", or requested memory > max configured"
-          + ", requestedMemory=" + resReq.getCapability().getMemorySize()
-          + ", maxMemory=" + maximumResource.getMemorySize());
-    }
-    if (resReq.getCapability().getVirtualCores() < 0 ||
-        resReq.getCapability().getVirtualCores() >
-        maximumResource.getVirtualCores()) {
-      throw new InvalidResourceRequestException("Invalid resource request"
-          + ", requested virtual cores < 0"
-          + ", or requested virtual cores > max configured"
-          + ", requestedVirtualCores="
-          + resReq.getCapability().getVirtualCores()
-          + ", maxVirtualCores=" + maximumResource.getVirtualCores());
+    Resource requestedResource = resReq.getCapability();
+    for (int i = 0; i < ResourceUtils.getNumberOfKnownResourceTypes(); i++) {
+      ResourceInformation reqRI = requestedResource.getResourceInformation(i);
+      ResourceInformation maxRI = maximumResource.getResourceInformation(i);
+      if (reqRI.getValue() < 0 || reqRI.getValue() > maxRI.getValue()) {
+        throw new InvalidResourceRequestException(
+            "Invalid resource request, requested resource type=[" + reqRI
+                .getName()
+                + "] < 0 or greater than maximum allowed allocation. Requested "
+                + "resource=" + requestedResource
+                + ", maximum allowed allocation=" + maximumResource
+                + ", please note that maximum allowed allocation is calculated "
+                + "by scheduler based on maximum resource of registered "
+                + "NodeManagers, which might be less than configured "
+                + "maximum allocation=" + ResourceUtils
+                .getResourceTypesMaximumAllocation());
+      }

INS26 INS26 INS40 INS40 INS60 INS24 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS42 MOV32 INS39 INS59 INS42 MOV32 INS42 INS60 INS60 MOV25 INS42 INS34 UPD42 UPD42 INS43 INS59 INS43 INS59 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD45 MOV45 INS32 INS45 INS45 INS42 UPD45 INS42 INS45 INS45 INS45 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL45 DEL45 DEL27 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL32 DEL27 DEL27 DEL43 DEL45 DEL45 DEL45 DEL45 DEL27 DEL32 DEL42 DEL32 DEL45 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25