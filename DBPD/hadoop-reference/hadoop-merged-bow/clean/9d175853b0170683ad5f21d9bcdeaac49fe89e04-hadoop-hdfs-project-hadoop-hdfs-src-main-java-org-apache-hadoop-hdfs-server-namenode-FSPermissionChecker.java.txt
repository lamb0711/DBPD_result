HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.

+import java.io.IOException;
+import org.apache.hadoop.fs.ParentNotDirectoryException;
+import org.apache.hadoop.hdfs.protocol.UnresolvedPathException;
-  private static String constructPath(INodeAttributes[] inodes, int end) {
-    byte[][] components = new byte[end+1][];
-    for (int i=0; i <= end; i++) {
-      components[i] = inodes[i].getLocalNameBytes();
-    }
-    return DFSUtil.byteArray2PathString(components);
+  private static String getPath(byte[][] components, int start, int end) {
+    return DFSUtil.byteArray2PathString(components, start, end - start + 1);
-    checkTraverse(inodeAttrs, ancestorIndex);
+    try {
+      checkTraverse(inodeAttrs, inodes, components, ancestorIndex);
+    } catch (UnresolvedPathException | ParentNotDirectoryException ex) {
+      // must tunnel these exceptions out to avoid breaking interface for
+      // external enforcer
+      throw new TraverseAccessControlException(ex);
+    }
-      checkStickyBit(inodeAttrs, inodeAttrs.length - 2);
+      checkStickyBit(inodeAttrs, components, inodeAttrs.length - 2);
-      check(inodeAttrs, ancestorIndex, ancestorAccess);
+      check(inodeAttrs, components, ancestorIndex, ancestorAccess);
-      check(inodeAttrs, inodeAttrs.length - 2, parentAccess);
+      check(inodeAttrs, components, inodeAttrs.length - 2, parentAccess);
-      check(inodeAttrs, inodeAttrs.length - 1, access);
+      check(inodeAttrs, components, inodeAttrs.length - 1, access);
-      checkOwner(inodeAttrs, inodeAttrs.length - 1);
+      checkOwner(inodeAttrs, components, inodeAttrs.length - 1);
-  private void checkOwner(INodeAttributes[] inodes, int i)
+  private void checkOwner(INodeAttributes[] inodes, byte[][] components, int i)
-        " is not the owner of inode=" + constructPath(inodes, i));
+        " is not the owner of inode=" + getPath(components, 0, i));
-  /** Guarded by {@link FSNamesystem#readLock()} */
-  private void checkTraverse(INodeAttributes[] inodeAttrs, int last)
-      throws AccessControlException {
+  /** Guarded by {@link FSNamesystem#readLock()}
+   * @throws AccessControlException
+   * @throws ParentNotDirectoryException
+   * @throws UnresolvedPathException
+   */
+  private void checkTraverse(INodeAttributes[] inodeAttrs, INode[] inodes,
+      byte[][] components, int last) throws AccessControlException,
+          UnresolvedPathException, ParentNotDirectoryException {
-      INodeAttributes inode = inodeAttrs[i];
-      if (!inode.isDirectory()) {
-        throw new AccessControlException(
-            constructPath(inodeAttrs, i) + " (is not a directory)");
-      }
-      if (!hasPermission(inode, FsAction.EXECUTE)) {
-        throw new AccessControlException(toAccessControlString(
-            inode, constructPath(inodeAttrs, i), FsAction.EXECUTE));
-      }
+      checkIsDirectory(inodes[i], components, i);
+      check(inodeAttrs, components, i, FsAction.EXECUTE);
-  private void check(INodeAttributes[] inodes, int i, FsAction access)
-      throws AccessControlException {
+  private void check(INodeAttributes[] inodes, byte[][] components, int i,
+      FsAction access) throws AccessControlException {
-          toAccessControlString(inode, constructPath(inodes, i), access));
+          toAccessControlString(inode, getPath(components, 0, i), access));
-  private void checkStickyBit(INodeAttributes[] inodes, int index)
-      throws AccessControlException {
+  private void checkStickyBit(INodeAttributes[] inodes, byte[][] components,
+      int index) throws AccessControlException {
-        constructPath(inodes, index + 1),
+        getPath(components, 0, index + 1),
-        constructPath(inodes, index),
+        getPath(components, 0, index),
+
+  /**
+   * Verifies that all existing ancestors are directories.  If a permission
+   * checker is provided then the user must have exec access.  Ancestor
+   * symlinks will throw an unresolved exception, and resolveLink determines
+   * if the last inode will throw an unresolved exception.  This method
+   * should always be called after a path is resolved into an IIP.
+   * @param pc for permission checker, null for no checking
+   * @param iip path to verify
+   * @param resolveLink whether last inode may be a symlink
+   * @throws AccessControlException
+   * @throws UnresolvedPathException
+   * @throws ParentNotDirectoryException
+   */
+  static void checkTraverse(FSPermissionChecker pc, INodesInPath iip,
+      boolean resolveLink) throws AccessControlException,
+          UnresolvedPathException, ParentNotDirectoryException {
+    try {
+      if (pc == null || pc.isSuperUser()) {
+        checkSimpleTraverse(iip);
+      } else {
+        pc.checkPermission(iip, false, null, null, null, null, false);
+      }
+    } catch (TraverseAccessControlException tace) {
+      // unwrap the non-ACE (unresolved, parent not dir) exception
+      // tunneled out of checker.
+      tace.throwCause();
+    }
+    // maybe check that the last inode is a symlink
+    if (resolveLink) {
+      int last = iip.length() - 1;
+      checkNotSymlink(iip.getINode(last), iip.getPathComponents(), last);
+    }
+  }
+
+  // rudimentary permission-less directory check
+  private static void checkSimpleTraverse(INodesInPath iip)
+      throws UnresolvedPathException, ParentNotDirectoryException {
+    byte[][] components = iip.getPathComponents();
+    for (int i=0; i < iip.length() - 1; i++) {
+      INode inode = iip.getINode(i);
+      if (inode == null) {
+        break;
+      }
+      checkIsDirectory(inode, components, i);
+    }
+  }
+
+  private static void checkIsDirectory(INode inode, byte[][] components, int i)
+      throws UnresolvedPathException, ParentNotDirectoryException {
+    if (inode != null && !inode.isDirectory()) {
+      checkNotSymlink(inode, components, i);
+      throw new ParentNotDirectoryException(
+          getPath(components, 0, i) + " (is not a directory)");
+    }
+  }
+
+  private static void checkNotSymlink(INode inode, byte[][] components, int i)
+      throws UnresolvedPathException {
+    if (inode != null && inode.isSymlink()) {
+      final int last = components.length - 1;
+      final String path = getPath(components, 0, last);
+      final String preceding = getPath(components, 0, i - 1);
+      final String remainder = getPath(components, i + 1, last);
+      final String target = inode.asSymlink().getSymlinkString();
+      if (LOG.isDebugEnabled()) {
+        final String link = inode.getLocalName();
+        LOG.debug("UnresolvedPathException " +
+            " path: " + path + " preceding: " + preceding +
+            " count: " + i + " link: " + link + " target: " + target +
+            " remainder: " + remainder);
+      }
+      throw new UnresolvedPathException(path, preceding, remainder, target);
+    }
+  }
+
+  //used to tunnel non-ACE exceptions encountered during path traversal.
+  //ops that create inodes are expected to throw ParentNotDirectoryExceptions.
+  //the signature of other methods requires the PNDE to be thrown as an ACE.
+  @SuppressWarnings("serial")
+  static class TraverseAccessControlException extends AccessControlException {
+    TraverseAccessControlException(IOException ioe) {
+      super(ioe);
+    }
+    public void throwCause() throws UnresolvedPathException,
+        ParentNotDirectoryException, AccessControlException {
+      Throwable ioe = getCause();
+      if (ioe instanceof UnresolvedPathException) {
+        throw (UnresolvedPathException)ioe;
+      }
+      if (ioe instanceof ParentNotDirectoryException) {
+        throw (ParentNotDirectoryException)ioe;
+      }
+      throw this;
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS55 UPD42 INS44 INS8 INS44 MOV29 MOV83 MOV39 MOV42 MOV44 INS44 INS44 MOV44 MOV43 INS43 INS43 MOV8 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS44 MOV43 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS79 INS83 INS42 MOV43 INS31 INS31 UPD5 UPD42 INS39 INS42 INS41 INS54 INS5 INS42 INS65 INS65 INS65 INS5 INS42 INS5 INS42 INS42 INS42 INS5 INS42 INS5 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS54 INS25 INS43 INS42 INS42 INS42 INS60 INS24 INS43 INS42 INS5 INS42 INS39 INS42 INS42 INS42 MOV25 INS43 INS42 INS5 INS42 INS39 INS42 INS42 MOV25 INS42 INS45 INS42 INS44 INS8 INS83 INS39 INS42 INS43 INS43 INS43 INS8 INS39 INS85 INS32 INS8 INS12 INS39 INS85 INS85 INS42 INS42 INS42 INS43 INS85 INS39 INS85 INS85 INS39 INS85 INS85 INS39 INS85 INS85 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS8 INS42 MOV5 INS59 MOV58 UPD27 MOV27 MOV37 INS8 INS42 INS39 INS85 INS85 INS27 INS42 INS39 INS85 INS85 INS27 INS8 INS43 INS42 INS46 INS42 INS42 INS42 INS60 INS25 INS25 INS53 INS42 INS42 INS42 INS42 INS27 MOV21 INS44 INS8 INS42 UPD42 INS21 INS25 INS44 INS8 INS60 INS21 INS42 INS32 INS27 MOV60 INS25 INS21 INS27 MOV38 INS21 INS27 INS32 INS60 INS60 INS60 INS60 INS60 INS25 INS53 INS42 INS42 INS43 INS59 INS62 INS8 INS62 INS8 INS52 INS27 INS34 INS84 INS42 INS53 MOV32 INS32 INS27 INS8 INS8 INS43 INS42 INS21 INS39 INS59 INS32 INS42 INS42 INS32 INS34 UPD43 INS27 INS8 INS32 INS42 INS33 INS32 INS42 INS33 MOV42 INS42 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS32 MOV8 INS14 INS42 INS42 INS32 INS42 INS43 INS53 INS42 INS43 INS53 INS42 INS42 INS42 INS42 INS43 INS43 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS34 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS40 UPD42 UPD42 INS34 UPD42 UPD42 INS34 INS27 INS32 INS21 INS21 INS42 INS32 INS42 INS27 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 INS32 INS42 INS33 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS11 INS42 INS42 INS43 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS34 INS42 INS42 INS34 INS42 INS42 INS42 INS34 INS27 INS42 INS42 INS27 INS42 INS32 INS42 INS83 INS43 INS59 INS32 INS42 INS43 INS42 INS43 INS42 INS42 UPD42 UPD42 INS34 INS42 INS42 INS42 INS42 INS42 INS9 INS33 INS33 INS33 INS33 INS9 INS42 INS42 UPD42 UPD42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 MOV42 INS42 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS45 DEL42 DEL43 DEL66 DEL39 DEL85 DEL85 DEL5 DEL42 DEL42 DEL34 DEL27 DEL3 DEL59 DEL60 DEL42 DEL42 DEL2 DEL7 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL24 DEL8 DEL31 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL14 DEL53 DEL42 DEL40 DEL32 DEL38