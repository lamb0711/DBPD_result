Revert "YARN-5609. Expose upgrade and restart API in ContainerManagementProtocol. Contributed by Arun Suresh"

This reverts commit fe644bafe7b4fb5b07f7cf08a7d7044abbf55027.

-    private boolean isRollback = false;
-
-    private ResourceSet mergedResourceSet(ResourceSet current) {
-      if (isRollback) {
-        // No merging should be done for rollback
+    private ResourceSet mergedResourceSet() {
+      if (oldLaunchContext == null) {
-      if (current == newResourceSet) {
-        // This happens during a restart
-        return current;
-      }
-      return ResourceSet.merge(current, newResourceSet);
+      return ResourceSet.merge(oldResourceSet, newResourceSet);
-      ReInitializationContext cntxt = new ReInitializationContext(
-          oldLaunchContext, oldResourceSet, null, null);
-      cntxt.isRollback = true;
-      return cntxt;
+      if (oldLaunchContext == null) {
+        return null;
+      } else {
+        return new ReInitializationContext(
+            oldLaunchContext, oldResourceSet, null, null);
+      }
-        // 'reInitContext.newResourceSet' can be
-        // a) current container resourceSet (In case of Restart)
-        // b) previous resourceSet (In case of RollBack)
-        // c) An actual NEW resourceSet (In case of Upgrade/ReInit)
-        //
-        // In cases a) and b) Container can immediately be cleaned up since
-        // we are sure the resources are already available (we check the
-        // pendingResources to verify that nothing more is needed). So we can
-        // kill the container immediately
-        ResourceSet newResourceSet = container.reInitContext.newResourceSet;
-        if (!newResourceSet.getPendingResources().isEmpty()) {
+        Map<LocalResourceVisibility, Collection<LocalResourceRequest>>
+            resByVisibility = container.reInitContext.newResourceSet
+            .getAllResourcesByVisibility();
+        if (!resByVisibility.isEmpty()) {
-                  container, newResourceSet.getAllResourcesByVisibility()));
+                  container, resByVisibility));
-        container.metrics.reInitingContainer();
-        NMAuditLogger.logSuccess(container.user,
-            AuditConstants.START_CONTAINER_REINIT, "ContainerImpl",
-            container.containerId.getApplicationAttemptId().getApplicationId(),
-            container.containerId);
-      if (reInitEvent.getReInitLaunchContext() == null) {
-        // This is a Restart...
-        // We also need to make sure that if Rollback is possible, the
-        // rollback state should be retained in the
-        // oldLaunchContext and oldResourceSet
-        return new ReInitializationContext(
-            container.launchContext, container.resourceSet,
-            container.canRollback() ?
-                container.reInitContext.oldLaunchContext : null,
-            container.canRollback() ?
-                container.reInitContext.oldResourceSet : null);
-      } else {
-        return new ReInitializationContext(
-            reInitEvent.getReInitLaunchContext(),
-            reInitEvent.getResourceSet(),
-            // If AutoCommit is turned on, then no rollback can happen...
-            // So don't need to store the previous context.
-            (reInitEvent.isAutoCommit() ? null : container.launchContext),
-            (reInitEvent.isAutoCommit() ? null : container.resourceSet));
-      }
+      return new ReInitializationContext(
+          reInitEvent.getReInitLaunchContext(),
+          reInitEvent.getResourceSet(),
+          // If AutoCommit is turned on, then no rollback can happen...
+          // So don't need to store the previous context.
+          (reInitEvent.isAutoCommit() ? null : container.launchContext),
+          (reInitEvent.isAutoCommit() ? null : container.resourceSet));
-      if (container.isReInitializing()) {
-        NMAuditLogger.logSuccess(container.user,
-            AuditConstants.FINISH_CONTAINER_REINIT, "ContainerImpl",
-            container.containerId.getApplicationAttemptId().getApplicationId(),
-            container.containerId);
-      }
-        container.metrics.rollbackContainerOnFailure();
-        container.metrics.reInitingContainer();
-        NMAuditLogger.logSuccess(container.user,
-            AuditConstants.START_CONTAINER_REINIT, "ContainerImpl",
-            container.containerId.getApplicationAttemptId().getApplicationId(),
-            container.containerId);
-          + "] for re-initialization !!");
+          + "] for upgrade !!");
-      container.resourceSet =
-          container.reInitContext.mergedResourceSet(container.resourceSet);
+      container.resourceSet = container.reInitContext.mergedResourceSet();
-    if (this.isReInitializing && !isReInitializing) {
-      metrics.endReInitingContainer();
-    }

MOV43 INS42 INS8 MOV8 INS25 MOV60 INS27 INS27 INS8 MOV8 INS42 INS33 UPD42 INS42 INS33 INS41 INS60 INS33 MOV14 INS74 INS59 UPD45 INS43 INS43 INS74 INS42 INS32 UPD42 MOV42 INS42 INS43 INS43 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL59 DEL60 DEL40 DEL9 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL40 DEL45 DEL42 DEL32 DEL32 DEL40 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL40 DEL40 DEL42 DEL42 DEL32 DEL40 DEL33 DEL16 DEL42 DEL42 DEL32 DEL40 DEL33 DEL16 DEL14 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL40 DEL45 DEL40 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL21 DEL8 DEL25 DEL40 DEL42 DEL32 DEL21 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL40 DEL45 DEL40 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL21 DEL40 DEL52 DEL42 DEL22 DEL42 DEL38 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25