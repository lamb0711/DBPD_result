HDFS-2317. Support read access to HDFS in webhdfs.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170085 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import java.io.OutputStream;
+import java.io.PrintStream;
+import javax.ws.rs.core.StreamingOutput;
+import org.apache.hadoop.hdfs.protocol.DirectoryListing;
+import org.apache.hadoop.hdfs.web.resources.LengthParam;
+import org.apache.hadoop.hdfs.web.resources.OffsetParam;
-      final String path, final HttpOpParam.Op op) throws IOException {
-    if (op == PostOpParam.Op.APPEND) {
-      final HdfsFileStatus status = namenode.getRpcServer().getFileInfo(path);
+      final String path, final HttpOpParam.Op op, final long openOffset
+      ) throws IOException {
+    if (op == GetOpParam.Op.OPEN || op == PostOpParam.Op.APPEND) {
+      final NamenodeProtocols np = namenode.getRpcServer();
+      final HdfsFileStatus status = np.getFileInfo(path);
+      if (op == GetOpParam.Op.OPEN && (openOffset < 0L || openOffset >= len)) {
+        throw new IOException("Offset=" + openOffset + " out of the range [0, "
+          + len + "); " + op + ", path=" + path);
+      }
+
-        final LocatedBlocks locations = namenode.getRpcServer().getBlockLocations(path, len-1, 1);
+        final long offset = op == GetOpParam.Op.OPEN? openOffset: len - 1;
+        final LocatedBlocks locations = np.getBlockLocations(path, offset, 1);
-          return JspHelper.bestNode(locations.get(count - 1));
+          return JspHelper.bestNode(locations.get(0));
-      final String path, final HttpOpParam.Op op,
+      final String path, final HttpOpParam.Op op, final long openOffset,
-    final DatanodeInfo dn = chooseDatanode(namenode, path, op);
+    final DatanodeInfo dn = chooseDatanode(namenode, path, op, openOffset);
-            + Param.toSortedString(", ", dstPath, owner, group, permission,
-                overwrite, bufferSize, replication, blockSize));
+          + Param.toSortedString(", ", dstPath, owner, group, permission,
+              overwrite, bufferSize, replication, blockSize,
+              modificationTime, accessTime, renameOptions));
-      final URI uri = redirectURI(namenode, fullpath, op.getValue(),
+      final URI uri = redirectURI(namenode, fullpath, op.getValue(), -1L,
-      final URI uri = redirectURI(namenode, fullpath, op.getValue(), bufferSize);
+      final URI uri = redirectURI(namenode, fullpath, op.getValue(), -1L,
+          bufferSize);
-          final GetOpParam op
-      ) throws IOException {
-    return get(ROOT, op);
+          final GetOpParam op,
+      @QueryParam(OffsetParam.NAME) @DefaultValue(OffsetParam.DEFAULT)
+          final OffsetParam offset,
+      @QueryParam(LengthParam.NAME) @DefaultValue(LengthParam.DEFAULT)
+          final LengthParam length,
+      @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT)
+          final BufferSizeParam bufferSize
+      ) throws IOException, URISyntaxException {
+    return get(ROOT, op, offset, length, bufferSize);
-          final GetOpParam op
-      ) throws IOException {
+          final GetOpParam op,
+      @QueryParam(OffsetParam.NAME) @DefaultValue(OffsetParam.DEFAULT)
+          final OffsetParam offset,
+      @QueryParam(LengthParam.NAME) @DefaultValue(LengthParam.DEFAULT)
+          final LengthParam length,
+      @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT)
+          final BufferSizeParam bufferSize
+      ) throws IOException, URISyntaxException {
-          + Param.toSortedString(", "));
+          + Param.toSortedString(", ", offset, length, bufferSize));
+    final NameNode namenode = (NameNode)context.getAttribute("name.node");
+    final String fullpath = path.getAbsolutePath();
+    final NamenodeProtocols np = namenode.getRpcServer();
+
+    case OPEN:
+    {
+      final URI uri = redirectURI(namenode, fullpath, op.getValue(),
+          offset.getValue(), offset, length, bufferSize);
+      return Response.temporaryRedirect(uri).build();
+    }
-      final NameNode namenode = (NameNode)context.getAttribute("name.node");
-      final String fullpath = path.getAbsolutePath();
-      final HdfsFileStatus status = namenode.getRpcServer().getFileInfo(fullpath);
+    {
+      final HdfsFileStatus status = np.getFileInfo(fullpath);
-
+    }
+    case LISTSTATUS:
+    {
+      final StreamingOutput streaming = getListingStream(np, fullpath);
+      return Response.ok(streaming).type(MediaType.APPLICATION_JSON).build();
+    }
+  private static DirectoryListing getDirectoryListing(final NamenodeProtocols np,
+      final String p, byte[] startAfter) throws IOException {
+    final DirectoryListing listing = np.getListing(p, startAfter, false);
+    if (listing == null) { // the directory does not exist
+      throw new FileNotFoundException("File " + p + " does not exist.");
+    }
+    return listing;
+  }
+  
+  private static StreamingOutput getListingStream(final NamenodeProtocols np, 
+      final String p) throws IOException {
+    final DirectoryListing first = getDirectoryListing(np, p,
+        HdfsFileStatus.EMPTY_NAME);
+
+    return new StreamingOutput() {
+      @Override
+      public void write(final OutputStream outstream) throws IOException {
+        final PrintStream out = new PrintStream(outstream);
+        out.print('[');
+
+        final HdfsFileStatus[] partial = first.getPartialListing();
+        if (partial.length > 0) {
+          out.print(JsonUtil.toJsonString(partial[0]));
+        }
+        for(int i = 1; i < partial.length; i++) {
+          out.println(',');
+          out.print(JsonUtil.toJsonString(partial[i]));
+        }
+
+        for(DirectoryListing curr = first; curr.hasMore(); ) { 
+          curr = getDirectoryListing(np, p, curr.getLastName());
+          for(HdfsFileStatus s : curr.getPartialListing()) {
+            out.println(',');
+            out.print(JsonUtil.toJsonString(s));
+          }
+        }
+        
+        out.println(']');
+      }
+    };
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS44 INS44 INS44 INS44 INS44 INS43 INS44 INS44 INS44 INS43 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS83 INS39 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS79 INS79 INS83 INS43 INS42 INS42 MOV60 MOV60 INS60 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS5 INS42 INS42 INS60 INS25 INS41 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS41 INS27 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS83 INS43 INS59 INS49 INS8 INS8 INS8 INS49 INS42 INS42 INS39 INS85 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS83 INS43 INS59 INS14 INS27 MOV27 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS60 INS41 INS60 MOV60 MOV41 INS42 INS60 INS41 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS43 INS1 INS42 INS40 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS83 INS43 INS59 INS32 MOV83 MOV43 MOV59 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS9 INS14 INS42 INS42 INS42 INS40 INS42 INS31 INS42 INS42 INS32 INS27 INS36 INS53 INS60 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS43 INS27 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 UPD42 MOV42 INS42 INS40 INS27 INS14 INS83 INS39 INS59 INS38 INS38 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS45 INS42 INS45 INS42 INS83 INS43 INS42 INS42 INS60 INS21 INS60 INS25 INS24 INS24 INS21 INS27 INS27 INS43 INS27 INS42 INS16 INS42 INS42 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS83 INS5 INS59 INS27 INS8 INS58 INS27 INS37 INS8 INS58 INS32 INS8 INS32 INS42 INS34 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS27 INS42 MOV27 UPD42 MOV42 INS42 INS42 INS42 INS14 INS42 INS42 INS13 INS43 INS85 INS42 INS32 INS40 INS34 INS21 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS43 INS59 INS42 INS42 INS21 INS70 INS42 INS42 INS13 INS42 INS40 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS32 INS32 INS42 INS42 INS42 INS7 INS44 INS32 INS8 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS13 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL34 DEL27 DEL42 DEL32 DEL60