YARN-2809. Implement workaround for linux kernel panic when removing cgroup. Contributed by Nathan Roberts

+import java.io.FileReader;
+
+  private long deleteCgroupDelay;
+    this.deleteCgroupDelay =
+        conf.getLong(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_DELETE_DELAY,
+            YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_DELAY);
+  /*
+   * Utility routine to print first line from cgroup tasks file
+   */
+  private void logLineFromTasksFile(File cgf) {
+    String str;
+    if (LOG.isDebugEnabled()) {
+      try (BufferedReader inl =
+            new BufferedReader(new InputStreamReader(new FileInputStream(cgf
+              + "/tasks"), "UTF-8"))) {
+        if ((str = inl.readLine()) != null) {
+          LOG.debug("First line in cgroup tasks file: " + cgf + " " + str);
+        }
+      } catch (IOException e) {
+        LOG.warn("Failed to read cgroup tasks file. ", e);
+      }
+    }
+  }
+
+  /**
+   * If tasks file is empty, delete the cgroup.
+   *
+   * @param file object referring to the cgroup to be deleted
+   * @return Boolean indicating whether cgroup was deleted
+   */
+  @VisibleForTesting
+  boolean checkAndDeleteCgroup(File cgf) throws InterruptedException {
+    boolean deleted = false;
+    // FileInputStream in = null;
+    try (FileInputStream in = new FileInputStream(cgf + "/tasks")) {
+      if (in.read() == -1) {
+        /*
+         * "tasks" file is empty, sleep a bit more and then try to delete the
+         * cgroup. Some versions of linux will occasionally panic due to a race
+         * condition in this area, hence the paranoia.
+         */
+        Thread.sleep(deleteCgroupDelay);
+        deleted = cgf.delete();
+        if (!deleted) {
+          LOG.warn("Failed attempt to delete cgroup: " + cgf);
+        }
+      } else {
+        logLineFromTasksFile(cgf);
+      }
+    } catch (IOException e) {
+      LOG.warn("Failed to read cgroup tasks file. ", e);
+    }
+    return deleted;
+  }
+
-    boolean deleted;
-    
+    boolean deleted = false;
+
-
-      deleted = new File(cgroupPath).delete();
-      if (!deleted) {
-        try {
-          Thread.sleep(20);
-        } catch (InterruptedException ex) {
-          // NOP        
+      try {
+        deleted = checkAndDeleteCgroup(new File(cgroupPath));
+        if (!deleted) {
+          Thread.sleep(deleteCgroupDelay);
+      } catch (InterruptedException ex) {
+        // NOP
-

INS26 INS40 INS23 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS39 INS42 INS44 INS43 INS8 INS42 INS21 INS43 INS42 INS60 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS54 INS41 INS7 INS42 INS43 INS59 INS32 INS8 INS66 INS42 INS66 INS66 INS42 INS39 INS59 INS58 INS8 INS12 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS54 INS42 INS9 INS43 INS59 INS25 INS44 INS8 INS9 MOV54 INS52 INS42 INS42 INS42 INS40 INS40 INS58 INS8 INS12 INS42 INS42 INS14 INS27 INS8 INS8 INS43 INS42 INS21 INS8 INS43 INS59 INS25 INS44 INS8 INS43 INS27 INS32 INS38 INS21 INS21 INS25 INS21 INS42 INS32 MOV21 INS25 INS42 INS42 INS14 INS27 INS8 INS43 INS42 INS21 INS42 INS42 INS45 INS42 INS42 INS34 INS32 INS7 MOV38 INS8 INS32 INS42 INS42 INS45 INS42 INS38 INS8 INS43 INS14 INS36 INS33 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 MOV14 INS42 MOV21 INS42 INS43 INS14 INS45 INS7 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 UPD42 INS42 INS43 INS27 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 DEL34 DEL8 DEL8 DEL25