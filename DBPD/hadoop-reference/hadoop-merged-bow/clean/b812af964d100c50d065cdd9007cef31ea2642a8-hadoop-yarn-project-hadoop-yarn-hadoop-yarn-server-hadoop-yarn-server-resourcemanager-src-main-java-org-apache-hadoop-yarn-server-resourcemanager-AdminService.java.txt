YARN-1669. Modified RM HA handling of protocol level service-ACLS to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564549 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.LocalConfigurationProvider;
-      RefreshServiceAclsRequest request) throws YarnException {
-    Configuration conf = new Configuration();
-    if (!conf.getBoolean(
+      RefreshServiceAclsRequest request) throws YarnException, IOException {
+    if (!getConfig().getBoolean(
-    
-    PolicyProvider policyProvider = new RMPolicyProvider(); 
-    
-    refreshServiceAcls(conf, policyProvider);
-    if (isRMActive()) {
-      rmContext.getClientRMService().refreshServiceAcls(conf, policyProvider);
-      rmContext.getApplicationMasterService().refreshServiceAcls(
-          conf, policyProvider);
-      rmContext.getResourceTrackerService().refreshServiceAcls(
-          conf, policyProvider);
-    } else {
-      LOG.warn("ResourceManager is not active. Not refreshing ACLs for " +
-          "Clients, ApplicationMasters and NodeManagers");
+
+    String argName = "refreshServiceAcls";
+    if (!isRMActive()) {
+      RMAuditLogger.logFailure(UserGroupInformation.getCurrentUser()
+          .getShortUserName(), argName,
+          adminAcl.toString(), "AdminService",
+          "ResourceManager is not active. Can not refresh Service ACLs.");
+      throwStandbyException();
+
+    PolicyProvider policyProvider = new RMPolicyProvider(); 
+    Configuration conf =
+        getConfiguration(YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);
+
+    refreshServiceAcls(conf, policyProvider);
+    rmContext.getClientRMService().refreshServiceAcls(conf, policyProvider);
+    rmContext.getApplicationMasterService().refreshServiceAcls(
+        conf, policyProvider);
+    rmContext.getResourceTrackerService().refreshServiceAcls(
+        conf, policyProvider);
-  void refreshServiceAcls(Configuration configuration, 
+  synchronized void refreshServiceAcls(Configuration configuration,
-    this.server.refreshServiceAcl(configuration, policyProvider);
+    if (this.configurationProvider instanceof LocalConfigurationProvider) {
+      this.server.refreshServiceAcl(configuration, policyProvider);
+    } else {
+      this.server.refreshServiceAclWithConfigration(configuration,
+          policyProvider);
+    }
+
+  @VisibleForTesting
+  public Server getServer() {
+    return this.server;
+  }

INS26 INS40 INS31 INS43 MOV60 MOV25 INS83 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS60 MOV21 MOV21 MOV21 INS25 INS42 INS42 INS41 UPD43 INS38 MOV43 INS59 INS62 MOV8 INS8 INS22 UPD42 UPD42 INS45 MOV32 INS21 INS42 INS32 INS22 INS43 INS21 INS52 INS42 INS32 INS32 INS42 INS40 INS52 INS42 INS42 INS32 UPD42 MOV42 UPD42 INS42 INS32 INS42 INS32 INS45 INS45 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS52 INS42 UPD42 MOV42 INS42 DEL14 DEL8 DEL45 DEL45 DEL27