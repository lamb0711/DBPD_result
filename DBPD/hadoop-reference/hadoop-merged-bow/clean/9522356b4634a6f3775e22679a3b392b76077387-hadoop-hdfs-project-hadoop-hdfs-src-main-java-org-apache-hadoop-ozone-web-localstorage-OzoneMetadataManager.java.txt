HDFS-12069. Ozone: Create a general abstraction for metadata store. Contributed by Weiwei Yang.

-import org.apache.hadoop.utils.LevelDBStore;
-import org.iq80.leveldb.DBException;
-import org.iq80.leveldb.DBIterator;
+import org.apache.hadoop.utils.MetadataStore;
+import org.apache.hadoop.utils.MetadataStoreBuilder;
-  private LevelDBStore userDB;
-  private LevelDBStore metadataDB;
+  private MetadataStore userDB;
+  private MetadataStore metadataDB;
-      userDB = new LevelDBStore(new File(storageRoot + USER_DB), true);
-      metadataDB = new LevelDBStore(new File(storageRoot + META_DB), true);
+      userDB = MetadataStoreBuilder.newBuilder()
+          .setDbFile(new File(storageRoot + USER_DB))
+          .setCreateIfMissing(true)
+          .build();
+      metadataDB = MetadataStoreBuilder.newBuilder()
+          .setDbFile(new File(storageRoot + META_DB))
+          .setCreateIfMissing(true)
+          .build();
-    } catch (IOException | DBException ex) {
+    } catch (IOException ex) {
-    } catch (IOException | DBException ex) {
+    } catch (IOException ex) {
-    } catch (IOException | DBException ex) {
+    } catch (IOException ex) {
-    } catch (IOException | DBException ex) {
+    } catch (IOException ex) {
-    } catch (IOException | DBException ex) {
+    } catch (IOException ex) {
-  public ListVolumes listAllVolumes(ListArgs args) throws OzoneException,
-      IOException {
+  public ListVolumes listAllVolumes(ListArgs args)
+      throws OzoneException, IOException {
-    String prevKey = args.getPrevKey();
+    final String prevKey;
-    try (DBIterator iterator = this.userDB.getDB().iterator()) {
-      if (prevKey != null) {
-        // Format is username/volumeName
-
-        String[] volName = args.getPrevKey().split("/");
-        if (volName.length < 2) {
-          throw ErrorTable.newError(ErrorTable.USER_NOT_FOUND, args.getArgs());
-        }
-        seekToUser(iterator, volName[0]);
-        userName = new String(iterator.peekNext().getKey(), encoding);
-        prevKey = volName[1];
-      } else {
-        userName = getFirstUser(iterator);
-      }
-
-      if (userName == null || userName.isEmpty()) {
+    if (args.getPrevKey() != null) {
+      // Format is username/volumeName
+      String[] volName = args.getPrevKey().split("/");
+      if (volName.length < 2) {
-      ListVolumes returnSet = new ListVolumes();
-      int count = maxCount - returnSet.getVolumes().size();
+      byte[] userNameBytes = userDB.get(volName[0].getBytes(encoding));
+      userName = new String(userNameBytes, encoding);
+      prevKey = volName[1];
+    } else {
+      userName = new String(userDB.peekAround(0, null).getKey(), encoding);
+      prevKey = null;
+    }
-      // we need to iterate through users until we get maxcount volumes
-      // or no more volumes are left.
-      while (iterator.hasNext() && count > 0) {
+    if (userName == null || userName.isEmpty()) {
+      throw ErrorTable.newError(ErrorTable.USER_NOT_FOUND, args.getArgs());
+    }
-        userName = new String(iterator.next().getKey(), encoding);
-
-        byte[] volumeList = userDB.get(userName.getBytes(encoding));
+    ListVolumes returnSet = new ListVolumes();
+    // we need to iterate through users until we get maxcount volumes
+    // or no more volumes are left.
+    userDB.iterate(null, (key, value) -> {
+      int currentSize = returnSet.getVolumes().size();
+      if (currentSize < maxCount) {
+        String name = new String(key, encoding);
+        byte[] volumeList = userDB.get(name.getBytes(encoding));
-          throw ErrorTable.newError(ErrorTable.USER_NOT_FOUND, args.getArgs());
+          throw new IOException(
+              ErrorTable.newError(ErrorTable.USER_NOT_FOUND, args.getArgs()));
-
-        returnSet.getVolumes().addAll(getFilteredVolumes(
-            volumeList, prefix, prevKey, count).getVolumes());
-        count = maxCount - returnSet.getVolumes().size();
+        returnSet.getVolumes().addAll(
+            getFilteredVolumes(volumeList, prefix, prevKey,
+                maxCount - currentSize).getVolumes());
+        return true;
+      } else {
+        return false;
-      return returnSet;
-    }
-  }
+    });
-  /**
-   * Returns the first user name from the UserDB.
-   *
-   * @return - UserName.
-   * @throws IOException
-   */
-  String getFirstUser(DBIterator iterator) throws IOException {
-    iterator.seekToFirst();
-    if (iterator.hasNext()) {
-      return new String(iterator.peekNext().getKey(), encoding);
-    }
-    return null;
-  }
-
-  /**
-   * Reposition the DB cursor to the user name.
-   *
-   * @param iterator - Current Iterator.
-   * @param userName - userName to seek to
-   * @return - DBIterator.
-   * @throws IOException
-   */
-  DBIterator seekToUser(DBIterator iterator, String userName) throws
-      IOException {
-    iterator.seek(userName.getBytes(encoding));
-    return iterator;
+    return returnSet;
-    } catch (IOException | DBException ex) {
+    } catch (IOException ex) {
-    } catch (IOException | DBException ex) {
+    } catch (IOException ex) {
-    } catch (IOException | DBException ex) {
+    } catch (IOException ex) {
-    } catch (IOException | DBException ex) {
+    } catch (IOException ex) {

MOV26 UPD40 UPD40 UPD43 UPD43 MOV8 UPD42 UPD42 MOV60 INS60 MOV60 MOV60 INS21 INS83 MOV43 INS59 INS32 INS42 MOV32 INS60 INS21 INS42 UPD42 MOV42 INS33 INS86 MOV43 MOV43 MOV43 MOV43 MOV43 INS5 INS59 INS7 INS59 INS59 INS8 MOV43 MOV43 MOV43 MOV43 INS32 INS32 INS39 INS85 INS42 INS32 INS14 INS42 INS33 INS42 INS42 MOV60 INS25 INS32 INS42 INS32 INS42 INS42 INS42 MOV32 MOV2 MOV43 INS42 MOV43 INS32 INS42 INS27 INS8 INS8 INS32 INS42 INS9 INS32 INS42 INS9 UPD42 UPD42 INS32 INS42 UPD42 MOV32 INS42 UPD42 MOV42 INS60 MOV60 MOV25 MOV21 INS41 INS41 INS32 INS42 MOV14 INS32 INS42 MOV14 UPD42 MOV42 UPD42 MOV42 INS34 INS33 MOV43 INS59 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS14 MOV43 INS42 MOV42 INS14 UPD42 MOV43 MOV32 INS27 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL9 DEL14 DEL42 DEL43 DEL9 DEL14 DEL42 DEL43 DEL84 DEL42 DEL43 DEL84 DEL42 DEL43 DEL84 DEL42 DEL43 DEL84 DEL42 DEL43 DEL84 DEL42 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL61 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL54 DEL8 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL14 DEL41 DEL8 DEL25 DEL33 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL84 DEL42 DEL43 DEL84 DEL42 DEL43 DEL84 DEL42 DEL43 DEL84