YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.

+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.server.resourcemanager.RMServerUtils;
-  private long lastMemorySeconds = 0;
-  private long lastVcoreSeconds = 0;
-
+  private Map<String, Long> lastResourceSecondsMap = new HashMap<>();
-      long memorySeconds = 0;
-      long vcoreSeconds = 0;
+      Map<String, Long> resourceSecondsMap = new HashMap<>();
-        memorySeconds += resource.getMemorySize() * usedMillis /
-            DateUtils.MILLIS_PER_SECOND;
-        vcoreSeconds += resource.getVirtualCores() * usedMillis  
-            / DateUtils.MILLIS_PER_SECOND;
+        for (Map.Entry<String, ResourceInformation> entry : resource
+            .getResources().entrySet()) {
+          long value = RMServerUtils
+              .getOrDefault(resourceSecondsMap, entry.getKey(), 0L);
+          value += entry.getValue().getValue() * usedMillis
+              / DateUtils.MILLIS_PER_SECOND;
+          resourceSecondsMap.put(entry.getKey(), value);
+        }
-      lastMemorySeconds = memorySeconds;
-      lastVcoreSeconds = vcoreSeconds;
+      lastResourceSecondsMap = resourceSecondsMap;
-    return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);
+    return new AggregateAppResourceUsage(lastResourceSecondsMap);
+      Map<String, Long> preemptedResourceSecondsMaps = new HashMap<>();
+      preemptedResourceSecondsMaps
+          .put(ResourceInformation.MEMORY_MB.getName(), 0L);
+      preemptedResourceSecondsMaps
+          .put(ResourceInformation.VCORES.getName(), 0L);
-        clusterUsagePerc = calc.divide(cluster, usedResourceClone, cluster)
-            * 100;
+        clusterUsagePerc =
+            calc.divide(cluster, usedResourceClone, cluster) * 100;
-      return ApplicationResourceUsageReport.newInstance(liveContainers.size(),
-          reservedContainers.size(), usedResourceClone, reservedResourceClone,
-          Resources.add(usedResourceClone, reservedResourceClone),
-          runningResourceUsage.getMemorySeconds(),
-          runningResourceUsage.getVcoreSeconds(), queueUsagePerc,
-          clusterUsagePerc, 0, 0);
+      return ApplicationResourceUsageReport
+          .newInstance(liveContainers.size(), reservedContainers.size(),
+              usedResourceClone, reservedResourceClone,
+              Resources.add(usedResourceClone, reservedResourceClone),
+              runningResourceUsage.getResourceUsageSecondsMap(), queueUsagePerc,
+              clusterUsagePerc, preemptedResourceSecondsMaps);

INS26 INS26 INS40 INS40 INS23 MOV83 INS74 MOV59 INS43 INS43 INS43 UPD42 INS14 INS42 INS42 INS42 INS74 INS43 INS70 UPD42 INS60 INS21 INS21 INS42 INS74 MOV44 MOV32 INS8 INS74 INS59 INS32 INS32 INS43 INS43 INS43 UPD42 INS14 MOV60 MOV60 INS70 UPD42 UPD42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS74 INS44 INS32 INS8 INS42 INS42 INS42 INS74 INS40 INS42 INS40 INS42 UPD42 INS43 INS74 INS42 INS32 INS42 MOV60 MOV21 MOV21 INS43 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS34 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 INS42 UPD42 MOV42 DEL34 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL39 DEL23 DEL39 DEL34 DEL42 DEL34 DEL42 DEL32 DEL42 DEL27 DEL40 DEL27 DEL7 DEL8 DEL70 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL34 DEL34