YARN-3742. YARN RM will shut down if ZKClient creation times out. (Daniel Templeton via kasha)

-  public static class RMFatalEventDispatcher
-      implements EventHandler<RMFatalEvent> {
-
+  private class RMFatalEventDispatcher implements EventHandler<RMFatalEvent> {
-      LOG.fatal("Received a " + RMFatalEvent.class.getName() + " of type " +
-          event.getType().name() + ". Cause:\n" + event.getCause());
+      LOG.error("Received " + event);
-      ExitUtil.terminate(1, event.getCause());
+      if (HAUtil.isHAEnabled(getConfig())) {
+        // If we're in an HA config, the right answer is always to go into
+        // standby.
+        LOG.warn("Transitioning the resource manager to standby.");
+        handleTransitionToStandByInNewThread();
+      } else {
+        // If we're stand-alone, we probably want to shut down, but the if and
+        // how depends on the event.
+        switch(event.getType()) {
+        case STATE_STORE_FENCED:
+          LOG.fatal("State store fenced even though the resource manager " +
+              "is not configured for high availability. Shutting down this " +
+              "resource manager to protect the integrity of the state store.");
+          ExitUtil.terminate(1, event.getExplanation());
+          break;
+        case STATE_STORE_OP_FAILED:
+          if (YarnConfiguration.shouldRMFailFast(getConfig())) {
+            LOG.fatal("Shutting down the resource manager because a state " +
+                "store operation failed, and the resource manager is " +
+                "configured to fail fast. See the yarn.fail-fast and " +
+                "yarn.resourcemanager.fail-fast properties.");
+            ExitUtil.terminate(1, event.getExplanation());
+          } else {
+            LOG.warn("Ignoring state store operation failure because the " +
+                "resource manager is not configured to fail fast. See the " +
+                "yarn.fail-fast and yarn.resourcemanager.fail-fast " +
+                "properties.");
+          }
+          break;
+        default:
+          LOG.fatal("Shutting down the resource manager.");
+          ExitUtil.terminate(1, event.getExplanation());
+        }
+      }
-  public void handleTransitionToStandByInNewThread() {
+  private void handleTransitionToStandByInNewThread() {

UPD83 UPD83 INS21 INS25 INS32 INS32 INS8 INS8 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS32 INS21 INS21 INS50 UPD45 MOV45 INS42 UPD42 MOV42 INS32 INS32 MOV32 INS49 INS21 INS21 INS10 INS49 INS25 INS10 INS49 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS32 INS32 INS42 INS32 INS8 INS8 INS32 MOV32 INS42 INS42 INS27 INS42 UPD42 MOV42 INS34 INS32 INS42 INS42 INS32 INS21 INS21 INS21 INS42 INS42 INS45 INS45 INS45 UPD45 MOV45 INS42 INS42 INS42 INS32 INS32 INS32 UPD42 INS42 INS42 INS27 INS42 INS42 INS34 INS32 INS42 INS42 INS27 UPD45 MOV45 INS45 INS45 INS45 MOV42 UPD42 MOV42 INS45 INS45 INS45 INS45 DEL83 DEL42 DEL43 DEL57 DEL32 DEL32 DEL32 DEL27 DEL32 DEL21 DEL21