HDFS-14706. Checksums are not checked if block meta file is less than 7 bytes. Contributed by Stephen O'Donnell.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

+import java.util.Random;
+  private boolean leaseRecovered = false;
+  private boolean exceptionInClose = false; //for unit test
+  @VisibleForTesting
+  public void setExceptionInClose(boolean enable) {
+    exceptionInClose = enable;
+  }
+
+  private class EmulateExceptionInClose {
+    private Random rand = null;
+    private int kickedNum;
+
+    EmulateExceptionInClose(int callNum) {
+      if (exceptionInClose) {
+        rand = new Random();
+      }
+      kickedNum = callNum;
+    }
+
+    void kickRandomException() throws IOException {
+      if (exceptionInClose) {
+        if (kickedNum > 0) {
+          if (rand.nextInt(kickedNum) == 1) {
+            throw new IOException("Emulated random IOException in close");
+          }
+        }
+      }
+    }
+
+    void kickException() throws IOException {
+      if (exceptionInClose) {
+        throw new IOException("Emulated IOException in close");
+      }
+    }
+  }
+
+    boolean recoverOnCloseException = dfsClient.getConfiguration().getBoolean(
+        HdfsClientConfigKeys.Write.RECOVER_ON_CLOSE_EXCEPTION_KEY,
+        HdfsClientConfigKeys.Write.RECOVER_ON_CLOSE_EXCEPTION_DEFAULT);
+      if (recoverOnCloseException && !leaseRecovered) {
+        try {
+          dfsClient.endFileLease(fileId);
+          dfsClient.recoverLease(src);
+          leaseRecovered = true;
+        } catch (Exception e) {
+          LOG.warn("Fail to recover lease for {}", src, e);
+        }
+      }
+
+    EmulateExceptionInClose eei = new EmulateExceptionInClose(5);
-      flushBuffer();       // flush from all upper layers
+      flushBuffer(); // flush from all upper layers
+      // for test
+      eei.kickRandomException();
-        flushInternal();             // flush all data to Datanodes
+        flushInternal(); // flush all data to Datanodes
+      // for test
+      eei.kickRandomException();
+      // for test
+      eei.kickException();
+    } catch (IOException ioe) {
+      if (recoverOnCloseException) {
+        try {
+          dfsClient.endFileLease(fileId);
+          dfsClient.recoverLease(src);
+          leaseRecovered = true;
+        } catch (Exception e) {
+          // Ignore exception rendered by recoverLease. Throw original
+          // exception
+        }
+      }
+      throw ioe;

INS26 INS40 INS23 INS23 INS31 INS55 INS83 INS39 INS59 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS42 INS9 INS42 INS9 INS42 INS39 INS42 INS21 INS83 INS43 INS59 INS83 INS39 INS59 INS42 INS44 INS8 INS39 INS42 INS43 INS8 INS39 INS42 INS43 INS8 INS60 INS60 INS7 INS42 INS42 INS33 INS42 INS39 INS42 INS25 INS21 INS42 INS25 INS42 INS25 INS39 INS59 INS43 INS59 INS12 INS42 INS42 INS42 INS8 INS7 INS42 INS8 INS42 INS8 INS42 INS32 INS25 INS42 INS42 INS14 INS21 INS21 INS21 INS44 INS8 INS21 INS42 INS42 INS25 INS53 INS32 INS42 INS40 INS40 INS27 INS8 INS43 INS34 INS32 INS32 INS32 INS43 INS42 INS25 INS53 INS7 INS27 INS8 INS14 INS42 INS42 INS42 INS38 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS42 INS42 INS14 INS42 INS34 INS25 INS43 INS45 INS42 INS8 INS12 INS54 INS43 INS27 INS8 INS42 INS21 INS21 INS21 INS44 INS8 INS8 INS12 INS42 INS32 INS34 INS53 INS32 INS32 INS7 INS43 INS42 INS21 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS32 INS32 INS7 INS43 INS42 INS43 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42