Merge trunk into auto-failover branch.

Needs a few tweaks to fix compilation - will do in followup commit. This is just a straight merge


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1324567 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.util.ToolRunner.confirmPrompt;
-    format(conf, true);
+    format(conf, true, true);
+   * <li>{@link StartupOption#RECOVERY RECOVERY} - recover name node
+   * metadata</li>
-  private static boolean format(Configuration conf,
-                                boolean force)
-      throws IOException {
+  private static boolean format(Configuration conf, boolean force,
+      boolean isInteractive) throws IOException {
-    if (!confirmFormat(dirsToFormat, force, true)) {
+    if (!confirmFormat(dirsToFormat, force, isInteractive)) {
+    String nsId = DFSUtil.getNamenodeNameServiceId(conf);
+    String namenodeId = HAUtil.getNameNodeId(conf, nsId);
+    initializeGenericKeys(conf, nsId, namenodeId);
-      StartupOption.FORMAT.getName() + "[" + StartupOption.CLUSTERID.getName() +  
-      " cid ]] | [" +
+      StartupOption.FORMAT.getName() + " [" + StartupOption.CLUSTERID.getName() +  
+      " cid ] [" + StartupOption.FORCE.getName() + "] [" +
+      StartupOption.NONINTERACTIVE.getName() + "] ] | [" +
-      StartupOption.BOOTSTRAPSTANDBY.getName() + "] | [" +
-      StartupOption.INITIALIZESHAREDEDITS.getName() + "]");
+      StartupOption.INITIALIZESHAREDEDITS.getName() + "] | [" +
+      StartupOption.BOOTSTRAPSTANDBY.getName() + "] | [" + 
+      StartupOption.RECOVER.getName() + " [ " +
+        StartupOption.FORCE.getName() + " ] ]");
-        // might be followed by two args
-        if (i + 2 < argsLen
-            && args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {
-          i += 2;
-          startOpt.setClusterId(args[i]);
+        for (i = i + 1; i < argsLen; i++) {
+          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {
+            i++;
+            if (i >= argsLen) {
+              // if no cluster id specified, return null
+              LOG.fatal("Must specify a valid cluster ID after the "
+                  + StartupOption.CLUSTERID.getName() + " flag");
+              return null;
+            }
+            String clusterId = args[i];
+            // Make sure an id is specified and not another flag
+            if (clusterId.isEmpty() ||
+                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||
+                clusterId.equalsIgnoreCase(
+                    StartupOption.NONINTERACTIVE.getName())) {
+              LOG.fatal("Must specify a valid cluster ID after the "
+                  + StartupOption.CLUSTERID.getName() + " flag");
+              return null;
+            }
+            startOpt.setClusterId(clusterId);
+          }
+
+          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {
+            startOpt.setForceFormat(true);
+          }
+
+          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {
+            startOpt.setInteractiveFormat(false);
+          }
+      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {
+        if (startOpt != StartupOption.REGULAR) {
+          throw new RuntimeException("Can't combine -recover with " +
+              "other startup options.");
+        }
+        startOpt = StartupOption.RECOVER;
+        while (++i < argsLen) {
+          if (args[i].equalsIgnoreCase(
+                StartupOption.FORCE.getName())) {
+            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);
+          } else {
+            throw new RuntimeException("Error parsing recovery options: " + 
+              "can't understand option \"" + args[i] + "\"");
+          }
+        }
-  /**
-   * Print out a prompt to the user, and return true if the user
-   * responds with "Y" or "yes".
-   */
-  static boolean confirmPrompt(String prompt) throws IOException {
-    while (true) {
-      System.err.print(prompt + " (Y or N) ");
-      StringBuilder responseBuilder = new StringBuilder();
-      while (true) {
-        int c = System.in.read();
-        if (c == -1 || c == '\r' || c == '\n') {
-          break;
-        }
-        responseBuilder.append((char)c);
+  private static void doRecovery(StartupOption startOpt, Configuration conf)
+      throws IOException {
+    if (startOpt.getForce() < MetaRecoveryContext.FORCE_ALL) {
+      if (!confirmPrompt("You have selected Metadata Recovery mode.  " +
+          "This mode is intended to recover lost metadata on a corrupt " +
+          "filesystem.  Metadata recovery mode often permanently deletes " +
+          "data from your HDFS filesystem.  Please back up your edit log " +
+          "and fsimage before trying this!\n\n" +
+          "Are you ready to proceed? (Y/N)\n")) {
+        System.err.println("Recovery aborted at user request.\n");
+        return;
-  
-      String response = responseBuilder.toString();
-      if (response.equalsIgnoreCase("y") ||
-          response.equalsIgnoreCase("yes")) {
-        return true;
-      } else if (response.equalsIgnoreCase("n") ||
-          response.equalsIgnoreCase("no")) {
-        return false;
-      }
-      // else ask them again
+    }
+    MetaRecoveryContext.LOG.info("starting recovery...");
+    UserGroupInformation.setConfiguration(conf);
+    NameNode.initMetrics(conf, startOpt.toNodeRole());
+    FSNamesystem fsn = null;
+    try {
+      fsn = FSNamesystem.loadFromDisk(conf);
+      fsn.saveNamespace();
+      MetaRecoveryContext.LOG.info("RECOVERY COMPLETE");
+    } catch (IOException e) {
+      MetaRecoveryContext.LOG.info("RECOVERY FAILED: caught exception", e);
+      throw e;
+    } catch (RuntimeException e) {
+      MetaRecoveryContext.LOG.info("RECOVERY FAILED: caught exception", e);
+      throw e;
+    } finally {
+      if (fsn != null)
+        fsn.close();
-        boolean aborted = format(conf, false);
+        boolean aborted = format(conf, startOpt.getForceFormat(),
+            startOpt.getInteractiveFormat());
+      case RECOVER: {
+        NameNode.doRecovery(startOpt, conf);
+        return null;
+      }

INS26 INS40 INS44 INS83 UPD39 UPD42 INS44 INS8 INS39 INS42 INS60 INS60 INS21 UPD43 UPD42 INS43 INS42 INS25 INS21 INS21 MOV21 INS60 INS54 INS65 INS66 INS66 INS66 INS43 INS59 INS43 INS59 INS32 UPD42 INS42 INS27 INS8 INS32 INS32 UPD43 MOV43 INS59 INS8 INS12 INS12 INS8 INS8 INS49 INS9 INS67 INS66 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 MOV45 INS32 INS40 INS25 UPD40 MOV40 UPD42 MOV42 INS45 INS42 INS42 INS42 UPD42 UPD42 INS42 INS32 UPD42 UPD42 MOV42 INS33 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS25 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 UPD45 INS32 INS45 INS32 INS45 INS45 INS32 INS45 INS32 UPD45 INS42 INS42 INS38 INS8 INS42 INS42 INS7 INS32 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS27 INS21 INS32 INS33 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS24 INS32 MOV21 INS41 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 UPD45 MOV45 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS7 INS27 INS37 INS8 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS42 UPD45 MOV45 UPD42 MOV42 INS40 INS42 UPD45 MOV45 INS42 INS42 INS42 INS32 INS32 INS42 MOV27 MOV42 MOV42 INS42 INS25 INS25 INS25 INS45 INS45 INS45 INS45 INS45 INS45 UPD42 INS45 INS42 INS42 INS42 INS42 INS32 MOV8 INS32 INS8 INS32 INS8 MOV2 MOV42 MOV32 INS25 INS60 INS25 INS2 INS42 INS32 INS21 INS2 INS42 INS32 INS21 INS42 INS37 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS21 INS41 INS42 INS42 MOV2 INS32 INS32 INS32 INS21 INS41 INS42 INS42 INS42 INS9 INS42 INS42 INS9 INS32 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS42 INS42 INS27 INS40 INS42 INS40 INS42 INS42 INS42 INS27 INS25 INS45 INS32 INS45 INS45 INS32 INS45 MOV32 MOV8 INS25 INS40 INS42 INS40 INS42 INS32 INS8 MOV8 INS32 INS42 INS42 INS25 INS21 INS61 INS40 INS42 INS27 INS8 INS7 INS27 INS8 INS42 INS40 INS53 INS42 INS40 INS38 INS42 INS25 INS14 INS42 INS32 INS8 INS8 INS43 INS27 INS2 INS42 INS32 INS21 INS53 INS42 INS45 INS45 INS42 INS42 INS40 INS42 INS32 INS14 INS42 INS42 INS40 INS43 INS27 INS42 INS27 INS2 INS45 INS45 INS45 INS42 INS42 DEL9 DEL42 DEL34 DEL7 DEL34 DEL27 DEL27 DEL32 DEL27 DEL25 DEL25 DEL66 DEL66 DEL65 DEL29 DEL42 DEL45 DEL27 DEL39 DEL42 DEL11 DEL9 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL9 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL42 DEL13 DEL27 DEL27 DEL42 DEL13 DEL27 DEL27 DEL10 DEL8 DEL25 DEL8 DEL61 DEL32 DEL59 DEL60 DEL45 DEL32 DEL42 DEL32 DEL27 DEL9 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL25 DEL8 DEL61 DEL8 DEL9