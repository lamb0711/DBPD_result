Merge trunk into branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1613007 13f79535-47bb-0310-9956-ffa450edef68

-    List<XAttr> filteredXAttrs = null;
-      filteredXAttrs = XAttrPermissionFilter.filterXAttrsForApi(pc, xAttrs);
-      if (filteredXAttrs.isEmpty()) {
-        return filteredXAttrs;
+      try {
+        XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs);
+      } catch (AccessControlException e) {
+        logAuditEvent(false, "getXAttrs", src);
+        throw e;
-        List<XAttr> toGet = Lists.newArrayListWithCapacity(filteredXAttrs.size());
-        for (XAttr xAttr : filteredXAttrs) {
+        List<XAttr> toGet = Lists.newArrayListWithCapacity(xAttrs.size());
+        for (XAttr xAttr : xAttrs) {
+          boolean foundIt = false;
+              foundIt = true;
+          if (!foundIt) {
+            throw new IOException(
+                "At least one of the attributes provided was not found.");
+          }
-  
+
+  /**
+   * Remove an xattr for a file or directory.
+   *
+   * @param src
+   *          - path to remove the xattr from
+   * @param xAttr
+   *          - xAttr to remove
+   * @throws AccessControlException
+   * @throws SafeModeException
+   * @throws UnresolvedLinkException
+   * @throws IOException
+   */
-    nnConf.checkXAttrsConfigFlag();
-    HdfsFileStatus resultingStat = null;
-    FSPermissionChecker pc = getPermissionChecker();
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
-      XAttrPermissionFilter.checkPermissionForApi(pc, xAttr);
+      removeXAttrInt(src, xAttr, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+  }
+
+  void removeXAttrInt(String src, XAttr xAttr, boolean logRetryCache)
+      throws IOException {
+    nnConf.checkXAttrsConfigFlag();
+    HdfsFileStatus resultingStat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+      XAttrPermissionFilter.checkPermissionForApi(pc, xAttr);
-        getEditLog().logRemoveXAttrs(src, removedXAttrs);
+        getEditLog().logRemoveXAttrs(src, removedXAttrs, logRetryCache);
+      } else {
+        throw new IOException(
+            "No matching attributes found for remove operation");
-    } catch (AccessControlException e) {
-      logAuditEvent(false, "removeXAttr", src);
-      throw e;

INS31 INS29 INS39 INS42 INS44 INS44 INS43 INS8 UPD42 INS44 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS60 MOV54 INS39 INS42 MOV21 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS54 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS21 INS8 INS12 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS7 INS32 INS8 MOV21 INS44 INS8 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS53 INS32 INS43 INS42 INS21 INS53 UPD42 INS42 INS33 INS14 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS32 INS42 INS60 INS25 INS42 INS43 INS45 UPD42 MOV42 INS9 INS45 UPD42 MOV42 INS39 INS59 INS38 INS8 INS42 UPD42 INS42 INS9 INS42 INS53 INS14 INS21 INS43 INS45 INS7 INS42 INS42 INS9 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL32 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL45 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12