HDFS-3809. Make BKJM use protobufs for all serialization with ZK. Contributed by Ivan Kelly



git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1381699 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocolPB.PBHelper;
+import org.apache.hadoop.contrib.bkjournal.BKJournalProtos.VersionProto;
+import com.google.protobuf.TextFormat;
+import static com.google.common.base.Charsets.UTF_8;
+
-
+  private final NamespaceInfo nsInfo;
-  private int bytesToInt(byte[] b) {
-    assert b.length >= 4;
-    return b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3];
-  }
-
-  private byte[] intToBytes(int i) {
-    return new byte[] {
-      (byte)(i >> 24),
-      (byte)(i >> 16),
-      (byte)(i >> 8),
-      (byte)(i) };
-  }
-
-  BookKeeperJournalManager(Configuration conf, URI uri) throws IOException {
-    this(conf, uri, null);
-    // TODO(ivank): update BookKeeperJournalManager to do something
-    // with the NamespaceInfo. This constructor has been added
-    // for compatibility with the old tests, and may be removed
-    // when the tests are updated.
-  }
-
+    this.nsInfo = nsInfo;
+
+        VersionProto.Builder builder = VersionProto.newBuilder();
+        TextFormat.merge(new String(d, UTF_8), builder);
+        if (!builder.isInitialized()) {
+          throw new IOException("Invalid/Incomplete data in znode");
+        }
+        VersionProto vp = builder.build();
+
-        assert bytesToInt(d) == BKJM_LAYOUT_VERSION;
-      } else {
-        zkc.create(versionPath, intToBytes(BKJM_LAYOUT_VERSION),
+        assert vp.getLayoutVersion() == BKJM_LAYOUT_VERSION;
+
+        NamespaceInfo readns = PBHelper.convert(vp.getNamespaceInfo());
+
+        if (nsInfo.getNamespaceID() != readns.getNamespaceID() ||
+            !nsInfo.clusterID.equals(readns.getClusterID()) ||
+            !nsInfo.getBlockPoolID().equals(readns.getBlockPoolID())) {
+          String err = String.format("Environment mismatch. Running process %s"
+                                     +", stored in ZK %s", nsInfo, readns);
+          LOG.error(err);
+          throw new IOException(err);
+        }
+      } else if (nsInfo.getNamespaceID() > 0) {
+        VersionProto.Builder builder = VersionProto.newBuilder();
+        builder.setNamespaceInfo(PBHelper.convert(nsInfo))
+          .setLayoutVersion(BKJM_LAYOUT_VERSION);
+        byte[] data = TextFormat.printToString(builder.build()).getBytes(UTF_8);
+        zkc.create(versionPath, data,
-      bkc = new BookKeeper(new ClientConfiguration(),
-                           zkc);
+      bkc = new BookKeeper(new ClientConfiguration(), zkc);
+      Thread.currentThread().interrupt();
+      Thread.currentThread().interrupt();
-          HdfsConstants.LAYOUT_VERSION,  currentLedger.getId(), txId);
+          HdfsConstants.LAYOUT_VERSION, currentLedger.getId(), txId);
+      Thread.currentThread().interrupt();
+      Thread.currentThread().interrupt();
+          Thread.currentThread().interrupt();
+        Thread.currentThread().interrupt();
+          Thread.currentThread().interrupt();
+      Thread.currentThread().interrupt();
+      Thread.currentThread().interrupt();
+      Thread.currentThread().interrupt();

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS83 INS83 INS43 INS59 UPD42 MOV42 INS42 INS21 INS7 INS22 INS42 INS52 INS42 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS25 INS60 INS60 INS25 INS27 MOV8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS38 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS34 INS60 INS21 INS60 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS21 INS32 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS38 INS60 INS21 INS53 INS42 INS42 INS43 INS59 INS32 MOV5 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS14 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS27 INS38 INS32 INS43 INS59 INS32 INS14 INS40 INS42 INS32 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 INS21 INS32 INS42 INS21 INS42 MOV43 INS45 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL40 DEL34 DEL27 DEL6 DEL42 DEL34 DEL2 DEL34 DEL27 DEL42 DEL34 DEL2 DEL34 DEL27 DEL27 DEL42 DEL34 DEL2 DEL34 DEL27 DEL27 DEL42 DEL34 DEL2 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL85 DEL5 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL34 DEL27 DEL36 DEL11 DEL39 DEL42 DEL34 DEL27 DEL36 DEL11 DEL39 DEL42 DEL34 DEL27 DEL36 DEL11 DEL39 DEL42 DEL36 DEL11 DEL4 DEL3 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL33 DEL17 DEL8 DEL31 DEL42 DEL32