HDDS-1017. Use distributed tracing to indentify performance problems in Ozone. Contributed by Elek, Marton.

+import io.opentracing.Scope;
+import io.opentracing.util.GlobalTracer;
-      try {
+      try (Scope scope = GlobalTracer.get().buildSpan("createVolume")
+          .startActive(true)) {
-          volume.createBucket(bucketName);
-          long bucketCreationDuration = System.nanoTime() - start;
-          histograms.get(FreonOps.BUCKET_CREATE.ordinal())
-              .update(bucketCreationDuration);
-          bucketCreationTime.getAndAdd(bucketCreationDuration);
-          numberOfBucketsCreated.getAndIncrement();
+          try (Scope scope = GlobalTracer.get().buildSpan("createBucket")
+              .startActive(true)) {
+            volume.createBucket(bucketName);
+            long bucketCreationDuration = System.nanoTime() - start;
+            histograms.get(FreonOps.BUCKET_CREATE.ordinal())
+                .update(bucketCreationDuration);
+            bucketCreationTime.getAndAdd(bucketCreationDuration);
+            numberOfBucketsCreated.getAndIncrement();
+          }
-              OzoneOutputStream os =
-                  bucket.createKey(key, keySize, type, factor, new HashMap<>());
-              long keyCreationDuration = System.nanoTime() - keyCreateStart;
-              histograms.get(FreonOps.KEY_CREATE.ordinal())
-                  .update(keyCreationDuration);
-              keyCreationTime.getAndAdd(keyCreationDuration);
-              long keyWriteStart = System.nanoTime();
-              os.write(keyValue);
-              os.write(randomValue);
-              os.close();
-              long keyWriteDuration = System.nanoTime() - keyWriteStart;
-              threadKeyWriteTime += keyWriteDuration;
-              histograms.get(FreonOps.KEY_WRITE.ordinal())
-                  .update(keyWriteDuration);
-              totalBytesWritten.getAndAdd(keySize);
-              numberOfKeysAdded.getAndIncrement();
+              try (Scope scope = GlobalTracer.get().buildSpan("createKey")
+                  .startActive(true)) {
+                OzoneOutputStream os =
+                    bucket
+                        .createKey(key, keySize, type, factor, new HashMap<>());
+                long keyCreationDuration = System.nanoTime() - keyCreateStart;
+                histograms.get(FreonOps.KEY_CREATE.ordinal())
+                    .update(keyCreationDuration);
+                keyCreationTime.getAndAdd(keyCreationDuration);
+                long keyWriteStart = System.nanoTime();
+                os.write(keyValue);
+                os.write(randomValue);
+                os.close();
+
+                long keyWriteDuration = System.nanoTime() - keyWriteStart;
+
+                threadKeyWriteTime += keyWriteDuration;
+                histograms.get(FreonOps.KEY_WRITE.ordinal())
+                    .update(keyWriteDuration);
+                totalBytesWritten.getAndAdd(keySize);
+                numberOfKeysAdded.getAndIncrement();
+              }

INS26 INS26 INS40 INS40 INS58 INS43 INS59 INS42 INS42 INS32 INS32 INS42 INS9 INS54 INS32 INS42 INS45 INS58 INS8 INS42 INS42 INS43 INS59 MOV21 MOV60 MOV21 MOV21 MOV21 INS42 INS42 INS32 INS32 INS42 INS9 INS54 INS32 INS42 INS45 INS58 INS8 INS42 INS42 INS43 INS59 MOV60 MOV60 MOV21 MOV21 MOV60 MOV21 MOV21 MOV21 MOV60 MOV21 MOV21 MOV21 MOV21 INS42 INS42 INS32 INS32 INS42 INS9 INS32 INS42 INS45 INS42 INS42