YARN-3862. Support for fetching specific configs and metrics based on prefixes (Varun Saxena via sjlee)

+import org.apache.hadoop.hbase.filter.BinaryComparator;
+import org.apache.hadoop.hbase.filter.BinaryPrefixComparator;
+import org.apache.hadoop.hbase.filter.FamilyFilter;
+import org.apache.hadoop.hbase.filter.FilterList;
+import org.apache.hadoop.hbase.filter.QualifierFilter;
+import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;
+import org.apache.hadoop.hbase.filter.FilterList.Operator;
+import org.apache.hadoop.yarn.server.timelineservice.reader.filter.TimelineFilterList;
+import org.apache.hadoop.yarn.server.timelineservice.reader.filter.TimelineFilterUtils;
+import org.apache.hadoop.yarn.server.timelineservice.storage.entity.EntityColumnFamily;
+      TimelineFilterList confsToRetrieve, TimelineFilterList metricsToRetrieve,
-        eventFilters, fieldsToRetrieve, sortedKeys);
+        eventFilters, confsToRetrieve, metricsToRetrieve, fieldsToRetrieve,
+        sortedKeys);
-      String entityId, EnumSet<Field> fieldsToRetrieve) {
+      String entityId, TimelineFilterList confsToRetrieve,
+      TimelineFilterList metricsToRetrieve, EnumSet<Field> fieldsToRetrieve) {
-        fieldsToRetrieve);
+        confsToRetrieve, metricsToRetrieve, fieldsToRetrieve);
+  @Override
+  protected FilterList constructFilterListBasedOnFields() {
+    FilterList list = new FilterList(Operator.MUST_PASS_ONE);
+    // Fetch all the columns.
+    if (fieldsToRetrieve.contains(Field.ALL) &&
+        (confsToRetrieve == null ||
+        confsToRetrieve.getFilterList().isEmpty()) &&
+        (metricsToRetrieve == null ||
+        metricsToRetrieve.getFilterList().isEmpty())) {
+      return list;
+    }
+    FilterList infoColFamilyList = new FilterList();
+    // By default fetch everything in INFO column family.
+    FamilyFilter infoColumnFamily =
+        new FamilyFilter(CompareOp.EQUAL,
+           new BinaryComparator(EntityColumnFamily.INFO.getBytes()));
+    infoColFamilyList.addFilter(infoColumnFamily);
+    // Events not required.
+    if (!fieldsToRetrieve.contains(Field.EVENTS) &&
+        !fieldsToRetrieve.contains(Field.ALL) && eventFilters == null) {
+      infoColFamilyList.addFilter(
+          new QualifierFilter(CompareOp.NOT_EQUAL,
+          new BinaryPrefixComparator(
+          EntityColumnPrefix.EVENT.getColumnPrefixBytes(""))));
+    }
+    // info not required.
+    if (!fieldsToRetrieve.contains(Field.INFO) &&
+        !fieldsToRetrieve.contains(Field.ALL) && infoFilters == null) {
+      infoColFamilyList.addFilter(
+          new QualifierFilter(CompareOp.NOT_EQUAL,
+          new BinaryPrefixComparator(
+              EntityColumnPrefix.INFO.getColumnPrefixBytes(""))));
+    }
+    // is related to not required.
+    if (!fieldsToRetrieve.contains(Field.IS_RELATED_TO) &&
+        !fieldsToRetrieve.contains(Field.ALL) && isRelatedTo == null) {
+      infoColFamilyList.addFilter(
+          new QualifierFilter(CompareOp.NOT_EQUAL,
+          new BinaryPrefixComparator(
+              EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(""))));
+    }
+    // relates to not required.
+    if (!fieldsToRetrieve.contains(Field.RELATES_TO) &&
+        !fieldsToRetrieve.contains(Field.ALL) && relatesTo == null) {
+      infoColFamilyList.addFilter(
+          new QualifierFilter(CompareOp.NOT_EQUAL,
+          new BinaryPrefixComparator(
+              EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(""))));
+    }
+    list.addFilter(infoColFamilyList);
+    if ((fieldsToRetrieve.contains(Field.CONFIGS) || configFilters != null) ||
+        (confsToRetrieve != null &&
+        !confsToRetrieve.getFilterList().isEmpty())) {
+      FilterList filterCfg =
+          new FilterList(new FamilyFilter(CompareOp.EQUAL,
+              new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));
+      if (confsToRetrieve != null &&
+          !confsToRetrieve.getFilterList().isEmpty()) {
+        filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(
+            EntityColumnPrefix.CONFIG, confsToRetrieve));
+      }
+      list.addFilter(filterCfg);
+    }
+    if ((fieldsToRetrieve.contains(Field.METRICS) || metricFilters != null) ||
+        (metricsToRetrieve != null &&
+        !metricsToRetrieve.getFilterList().isEmpty())) {
+      FilterList filterMetrics =
+          new FilterList(new FamilyFilter(CompareOp.EQUAL,
+              new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));
+      if (metricsToRetrieve != null &&
+          !metricsToRetrieve.getFilterList().isEmpty()) {
+        filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(
+            EntityColumnPrefix.METRIC, metricsToRetrieve));
+      }
+      list.addFilter(filterMetrics);
+    }
+    return list;
+  }
+
+    if (!fieldsToRetrieve.contains(Field.CONFIGS) &&
+        confsToRetrieve != null && !confsToRetrieve.getFilterList().isEmpty()) {
+      fieldsToRetrieve.add(Field.CONFIGS);
+    }
+    if (!fieldsToRetrieve.contains(Field.METRICS) &&
+        metricsToRetrieve != null &&
+        !metricsToRetrieve.getFilterList().isEmpty()) {
+      fieldsToRetrieve.add(Field.METRICS);
+    }
-  protected Result getResult(Configuration hbaseConf, Connection conn)
-      throws IOException {
+  protected Result getResult(Configuration hbaseConf, Connection conn,
+      FilterList filterList) throws IOException {
+    if (filterList != null && !filterList.getFilters().isEmpty()) {
+      get.setFilter(filterList);
+    }
-      Connection conn) throws IOException {
+      Connection conn, FilterList filterList) throws IOException {
+    if (filterList != null && !filterList.getFilters().isEmpty()) {
+      scan.setFilter(filterList);
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS44 INS44 INS44 INS44 INS78 INS83 INS43 INS42 INS8 INS44 INS44 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS21 INS25 INS25 INS25 INS25 INS21 INS25 INS25 INS41 INS25 INS25 INS43 INS42 INS25 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS42 INS27 INS8 INS27 INS8 INS42 INS27 INS8 INS42 INS27 INS8 INS42 INS42 INS14 INS32 INS36 INS36 INS41 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS38 INS38 INS27 INS21 INS38 INS38 INS27 INS21 INS38 INS38 INS27 INS21 INS38 INS38 INS27 INS21 INS42 INS42 INS42 INS36 INS36 INS60 INS25 INS21 INS36 INS36 INS60 INS25 INS21 INS27 INS38 INS21 INS27 INS38 INS21 INS27 INS38 INS21 INS27 INS38 INS21 INS43 INS40 INS42 INS42 INS40 INS27 INS27 INS42 INS43 INS43 INS40 INS14 INS32 INS32 INS42 INS33 INS32 INS32 INS32 INS42 INS33 INS32 INS32 INS32 INS42 INS33 INS32 INS32 INS32 INS42 INS33 INS32 INS27 INS27 INS43 INS59 INS27 INS8 INS32 INS27 INS27 INS43 INS59 INS27 INS8 INS32 INS38 INS27 INS32 INS32 INS38 INS27 INS32 INS32 INS42 INS33 INS32 INS32 INS42 INS33 INS32 INS32 INS42 INS27 INS32 INS27 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS14 INS32 INS27 INS27 INS38 INS42 INS42 INS14 INS27 INS38 INS21 INS42 INS42 INS42 INS32 INS27 INS27 INS38 INS42 INS42 INS14 INS27 INS38 INS21 INS42 INS42 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS33 INS32 INS42 INS42 INS40 INS42 INS43 INS40 INS14 INS43 INS40 INS14 INS43 INS40 INS14 INS43 INS40 INS14 INS42 INS42 INS40 INS42 INS33 INS42 INS33 INS32 INS43 INS14 INS42 INS33 INS32 INS32 INS42 INS42 INS40 INS42 INS33 INS42 INS33 INS32 INS43 INS14 INS42 INS33 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS43 INS32 INS32 INS42 INS42 INS43 INS40 INS14 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS40 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS45 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42