YARN-8680. YARN NM: Implement Iterable Abstraction for LocalResourceTracker state. Contributed by Pradeep Ambati

+import java.util.AbstractMap.SimpleEntry;
+  /**
+   * The Local Tracker State DB key locations - "completed" and "started".
+   * To seek through app tracker states in RecoveredUserResources
+   * we need to move from one app tracker state to another using key "zzz".
+   * zzz comes later in lexicographical order than started.
+   * Similarly to move one user to another in RLS,we can use "zzz",
+   * as RecoveredUserResources uses two keys appcache and filecache.
+   */
+  private static final String BEYOND_ENTRIES_SUFFIX = "zzz/";
+
-    LeveldbIterator it = getLevelDBIterator(LOCALIZATION_PUBLIC_KEY_PREFIX);
-    state.publicTrackerState = loadResourceTrackerState(it,
+    state.publicTrackerState = loadResourceTrackerState(
-  private LocalResourceTrackerState loadResourceTrackerState(
-      LeveldbIterator iter, String keyPrefix) throws IOException {
+  private LocalResourceTrackerState loadResourceTrackerState(String keyPrefix)
+      throws IOException {
-    LocalResourceTrackerState state = new LocalResourceTrackerState();
-    while (iter.hasNext()) {
-      Entry<byte[], byte[]> entry = iter.peekNext();
-      String key = asString(entry.getKey());
-      if (!key.startsWith(keyPrefix)) {
-        break;
-      }
-      if (key.startsWith(completedPrefix)) {
-        state.localizedResources = loadCompletedResources(iter,
-            completedPrefix);
-      } else if (key.startsWith(startedPrefix)) {
-        state.inProgressResources = loadStartedResources(iter, startedPrefix);
-      } else {
-        throw new IOException("Unexpected key in resource tracker state: "
-            + key);
-      }
-    }
+    RecoveryIterator<LocalizedResourceProto> crIt =
+        new CompletedResourcesIterator(completedPrefix);
+    RecoveryIterator<Entry<LocalResourceProto, Path>> srIt =
+        new StartedResourcesIterator(startedPrefix);
-    return state;
+    return new LocalResourceTrackerState(crIt, srIt);
-  private List<LocalizedResourceProto> loadCompletedResources(
+  private class CompletedResourcesIterator extends
+      BaseRecoveryIterator<LocalizedResourceProto> {
+    private String startKey;
+    CompletedResourcesIterator(String startKey) throws IOException {
+      super(startKey);
+      this.startKey = startKey;
+    }
+
+    @Override
+    protected LocalizedResourceProto getNextItem(LeveldbIterator it)
+        throws IOException {
+      return getNextCompletedResource(it, startKey);
+    }
+  }
+
+  private LocalizedResourceProto getNextCompletedResource(
-    List<LocalizedResourceProto> rsrcs =
-        new ArrayList<LocalizedResourceProto>();
-    while (iter.hasNext()) {
-      Entry<byte[],byte[]> entry = iter.peekNext();
+    LocalizedResourceProto nextCompletedResource = null;
+    if (iter.hasNext()){
+      Entry<byte[], byte[]> entry = iter.next();
-        break;
+        return null;
-      rsrcs.add(LocalizedResourceProto.parseFrom(entry.getValue()));
-      iter.next();
+      nextCompletedResource = LocalizedResourceProto.parseFrom(
+          entry.getValue());
-
-    return rsrcs;
+    return nextCompletedResource;
-  private Map<LocalResourceProto, Path> loadStartedResources(
+  private class StartedResourcesIterator extends
+      BaseRecoveryIterator<Entry<LocalResourceProto, Path>> {
+    private String startKey;
+    StartedResourcesIterator(String startKey) throws IOException {
+      super(startKey);
+      this.startKey = startKey;
+    }
+
+    @Override
+    protected Entry<LocalResourceProto, Path> getNextItem(LeveldbIterator it)
+        throws IOException {
+      return getNextStartedResource(it, startKey);
+    }
+  }
+
+  private Entry<LocalResourceProto, Path> getNextStartedResource(
-    Map<LocalResourceProto, Path> rsrcs =
-        new HashMap<LocalResourceProto, Path>();
-    while (iter.hasNext()) {
-      Entry<byte[],byte[]> entry = iter.peekNext();
+    Entry<LocalResourceProto, Path> nextStartedResource = null;
+    if (iter.hasNext()){
+      Entry<byte[], byte[]> entry = iter.next();
-        break;
+        return null;
-      rsrcs.put(LocalResourceProto.parseFrom(entry.getValue()), localPath);
-      iter.next();
+      nextStartedResource = new SimpleEntry<LocalResourceProto, Path>(
+          LocalResourceProto.parseFrom(entry.getValue()), localPath);
+    return nextStartedResource;
+  }
-    return rsrcs;
+  private void seekPastPrefix(LeveldbIterator iter, String keyPrefix)
+      throws IOException {
+    try{
+      iter.seek(bytes(keyPrefix + BEYOND_ENTRIES_SUFFIX));
+      while (iter.hasNext()) {
+        Entry<byte[], byte[]> entry = iter.peekNext();
+        String key = asString(entry.getKey());
+        if (key.startsWith(keyPrefix)) {
+          iter.next();
+        } else {
+          break;
+        }
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+
+    // seek through App cache
+    String appCachePrefix = keyPrefix + LOCALIZATION_APPCACHE_SUFFIX;
+    iter.seek(bytes(appCachePrefix));
-      Entry<byte[],byte[]> entry = iter.peekNext();
+      Entry<byte[], byte[]> entry = iter.peekNext();
-      if (!key.startsWith(keyPrefix)) {
+
+      if (!key.startsWith(appCachePrefix)) {
-      if (key.startsWith(LOCALIZATION_FILECACHE_SUFFIX, keyPrefix.length())) {
-        userResources.privateTrackerState = loadResourceTrackerState(iter,
-            keyPrefix + LOCALIZATION_FILECACHE_SUFFIX);
-      } else if (key.startsWith(LOCALIZATION_APPCACHE_SUFFIX,
-          keyPrefix.length())) {
-        int appIdStartPos = keyPrefix.length() +
-            LOCALIZATION_APPCACHE_SUFFIX.length();
-        int appIdEndPos = key.indexOf('/', appIdStartPos);
-        if (appIdEndPos < 0) {
-          throw new IOException("Unable to determine appID in resource key: "
-              + key);
-        }
-        ApplicationId appId = ApplicationId.fromString(
-            key.substring(appIdStartPos, appIdEndPos));
-        userResources.appTrackerStates.put(appId,
-            loadResourceTrackerState(iter, key.substring(0, appIdEndPos+1)));
-      } else {
-        throw new IOException("Unexpected user resource key " + key);
+      int appIdStartPos = appCachePrefix.length();
+      int appIdEndPos = key.indexOf('/', appIdStartPos);
+      if (appIdEndPos < 0) {
+        throw new IOException("Unable to determine appID in resource key: "
+            + key);
+      ApplicationId appId = ApplicationId.fromString(
+          key.substring(appIdStartPos, appIdEndPos));
+      String trackerStateKey = key.substring(0, appIdEndPos+1);
+      userResources.appTrackerStates.put(appId,
+          loadResourceTrackerState(trackerStateKey));
+      // Seek to next application
+      seekPastPrefix(iter, trackerStateKey);
+
+    // File Cache
+    String fileCachePrefix = keyPrefix + LOCALIZATION_FILECACHE_SUFFIX;
+    iter.seek(bytes(fileCachePrefix));
+    Entry<byte[], byte[]> entry = iter.peekNext();
+    String key = asString(entry.getKey());
+    if (key.startsWith(fileCachePrefix)) {
+      userResources.privateTrackerState =
+          loadResourceTrackerState(fileCachePrefix);
+    }
+
+    // seek to Next User.
+    seekPastPrefix(iter, keyPrefix);

INS26 INS40 INS23 INS31 INS55 INS55 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS83 MOV43 MOV42 MOV44 MOV43 INS8 INS83 INS42 UPD74 MOV74 INS23 INS31 INS31 MOV43 UPD42 INS83 INS42 INS74 INS23 INS31 INS31 UPD74 MOV74 UPD42 INS83 INS39 INS42 MOV44 INS44 INS43 INS8 MOV8 INS65 INS42 INS42 INS45 MOV60 MOV60 MOV60 MOV60 INS41 UPD43 INS83 INS43 INS59 INS42 INS44 MOV43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS25 INS43 UPD74 MOV74 INS83 INS43 INS59 INS42 INS44 INS43 INS8 INS78 INS83 UPD74 MOV74 INS42 INS44 INS43 INS8 UPD43 INS25 INS43 INS42 INS42 INS54 MOV60 INS60 INS21 INS61 INS60 INS21 MOV60 INS60 INS25 INS21 MOV41 INS66 INS66 INS66 INS66 INS66 INS66 UPD74 MOV74 INS59 INS74 MOV14 UPD42 INS42 INS42 INS43 INS42 INS46 INS21 INS42 INS42 MOV43 INS42 INS42 INS41 INS43 MOV32 MOV8 UPD42 INS42 UPD43 INS42 INS42 INS43 INS42 INS42 INS46 INS21 INS42 UPD43 INS43 INS42 INS42 INS41 UPD42 INS74 MOV32 MOV8 UPD42 INS42 INS8 INS12 INS43 INS59 INS32 MOV32 MOV8 INS43 INS59 INS32 INS43 INS59 INS32 MOV8 INS32 UPD43 INS42 INS14 INS43 INS74 UPD42 INS14 INS42 INS42 INS42 INS42 INS7 INS32 INS42 UPD42 INS33 INS60 UPD42 INS42 INS42 INS7 UPD42 INS42 INS32 INS43 INS43 INS43 UPD42 INS33 INS60 INS21 INS21 INS61 INS44 MOV8 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS32 MOV60 MOV60 INS25 INS60 INS60 INS21 INS42 INS42 MOV27 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 INS43 INS42 INS42 MOV43 INS43 INS43 INS43 INS42 INS22 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS74 INS59 INS7 INS22 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS74 INS59 INS8 INS7 INS32 MOV32 INS8 INS43 INS42 INS42 INS42 INS42 UPD42 MOV42 INS38 MOV8 MOV39 INS59 INS43 INS59 INS32 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS52 INS42 INS43 INS5 INS5 INS42 INS32 INS41 INS42 MOV32 INS52 INS42 INS43 INS5 INS5 INS42 INS32 INS41 INS42 INS14 INS42 INS42 INS32 MOV60 MOV60 INS25 INS42 INS32 MOV42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS33 INS42 INS39 INS85 INS39 INS85 MOV42 MOV42 INS33 INS74 MOV32 INS42 INS42 INS27 INS32 INS8 MOV8 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 UPD42 UPD42 INS43 INS43 INS43 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL74 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL42 DEL32 DEL38 DEL10 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL7 DEL21 DEL8 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL74 DEL14 DEL10 DEL42 DEL42 DEL32 DEL61 DEL14 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21 DEL61 DEL45 DEL42 DEL27 DEL32 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL32 DEL38 DEL25 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL25 DEL25 DEL61 DEL8