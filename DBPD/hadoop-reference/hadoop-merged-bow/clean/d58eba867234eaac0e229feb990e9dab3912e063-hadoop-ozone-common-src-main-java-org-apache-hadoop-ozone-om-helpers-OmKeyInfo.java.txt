HDDS-1927. Consolidate add/remove Acl into OzoneAclUtil class. Contributed by Xiaoyu Yao.

Signed-off-by: Anu Engineer <aengineer@apache.org>

-import java.util.BitSet;
-import com.google.protobuf.ByteString;
+import org.apache.hadoop.ozone.OzoneAcl;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo;
-import static org.apache.hadoop.ozone.OzoneAcl.ZERO_BITSET;
-
-  private List<OzoneAclInfo> acls;
+  private List<OzoneAcl> acls;
-      FileEncryptionInfo encInfo, List<OzoneAclInfo> acls) {
+      FileEncryptionInfo encInfo, List<OzoneAcl> acls) {
-  public List<OzoneAclInfo> getAcls() {
+  public List<OzoneAcl> getAcls() {
-  /**
-   * Add an ozoneAcl to list of existing Acl set.
-   * @param ozoneAcl
-   * @return true - if successfully added, false if not added or acl is
-   * already existing in the acl list.
-   */
-  public boolean addAcl(OzoneAclInfo ozoneAcl) {
-    // Case 1: When we are adding more rights to existing user/group.
-    boolean addToExistingAcl = false;
-    for(OzoneAclInfo existingAcl: getAcls()) {
-      if(existingAcl.getName().equals(ozoneAcl.getName()) &&
-          existingAcl.getType().equals(ozoneAcl.getType())) {
-
-        // We need to do "or" before comparision because think of a case like
-        // existing acl is 777 and newly added acl is 444, we have already
-        // that acl set. In this case if we do direct check they will not
-        // be equal, but if we do or and then check, we shall know it
-        // has acl's already set or not.
-        BitSet newAclBits = BitSet.valueOf(
-            existingAcl.getRights().toByteArray());
-
-        newAclBits.or(BitSet.valueOf(ozoneAcl.getRights().toByteArray()));
-
-        if (newAclBits.equals(BitSet.valueOf(
-            existingAcl.getRights().toByteArray()))) {
-          return false;
-        } else {
-          OzoneAclInfo newAcl = OzoneAclInfo.newBuilder()
-              .setType(ozoneAcl.getType())
-              .setName(ozoneAcl.getName())
-              .setAclScope(ozoneAcl.getAclScope())
-              .setRights(ByteString.copyFrom(newAclBits.toByteArray()))
-              .build();
-          getAcls().remove(existingAcl);
-          getAcls().add(newAcl);
-          addToExistingAcl = true;
-          break;
-        }
-      }
-    }
-
-    // Case 2: When a completely new acl is added.
-    if(!addToExistingAcl) {
-      getAcls().add(ozoneAcl);
-    }
-    return true;
+  public boolean addAcl(OzoneAcl acl) {
+    return OzoneAclUtil.addAcl(acls, acl);
-  /**
-   * Remove acl from existing acl list.
-   * @param ozoneAcl
-   * @return true - if successfully removed, false if not able to remove due
-   * to that acl is not in the existing acl list.
-   */
-  public boolean removeAcl(OzoneAclInfo ozoneAcl) {
-    boolean removed = false;
-
-    // When we are removing subset of rights from existing acl.
-    for(OzoneAclInfo existingAcl: getAcls()) {
-      if (existingAcl.getName().equals(ozoneAcl.getName()) &&
-          existingAcl.getType().equals(ozoneAcl.getType())) {
-
-        BitSet bits = BitSet.valueOf(ozoneAcl.getRights().toByteArray());
-        BitSet existingAclBits =
-            BitSet.valueOf(existingAcl.getRights().toByteArray());
-        bits.and(existingAclBits);
-
-        // This happens when the acl bitset asked to remove is not set for
-        // matched name and type.
-        // Like a case we have 444 permission, 333 is asked to removed.
-        if (bits.equals(ZERO_BITSET)) {
-          return false;
-        }
-
-        // We have some matching. Remove them.
-        bits.xor(existingAclBits);
-
-        // If existing acl has same bitset as passed acl bitset, remove that
-        // acl from the list
-        if (bits.equals(ZERO_BITSET)) {
-          getAcls().remove(existingAcl);
-        } else {
-          // Remove old acl and add new acl.
-          OzoneAclInfo newAcl = OzoneAclInfo.newBuilder()
-              .setType(ozoneAcl.getType())
-              .setName(ozoneAcl.getName())
-              .setAclScope(ozoneAcl.getAclScope())
-              .setRights(ByteString.copyFrom(bits.toByteArray()))
-              .build();
-          getAcls().remove(existingAcl);
-          getAcls().add(newAcl);
-        }
-        removed = true;
-        break;
-      }
-    }
-
-    return removed;
+  public boolean removeAcl(OzoneAcl acl) {
+    return OzoneAclUtil.removeAcl(acls, acl);
-  /**
-   * Reset the existing acl list.
-   * @param ozoneAcls
-   * @return true - if successfully able to reset.
-   */
-  public boolean setAcls(List<OzoneAclInfo> ozoneAcls) {
-    this.acls.clear();
-    this.acls = ozoneAcls;
-    return true;
+  public boolean setAcls(List<OzoneAcl> newAcls) {
+    return OzoneAclUtil.setAcl(acls, newAcls);
-
-
-    private List<OzoneAclInfo> acls;
+    private List<OzoneAcl> acls;
+      acls = new ArrayList<>();
-    public Builder setAcls(List<OzoneAclInfo> listOfAcls) {
-      this.acls = new ArrayList<>();
-      this.acls.addAll(listOfAcls);
+    public Builder setAcls(List<OzoneAcl> listOfAcls) {
+      if (listOfAcls != null) {
+        this.acls.addAll(listOfAcls);
+      }
-        .addAllMetadata(KeyValueUtil.toProtobuf(metadata));
+        .addAllMetadata(KeyValueUtil.toProtobuf(metadata))
+        .addAllAcls(OzoneAclUtil.toProtobuf(acls));
-    if(acls != null) {
-      kb.addAllAcls(acls);
-    }
-        .setAcls(keyInfo.getAclsList()).build();
+        .setAcls(OzoneAclUtil.fromProtobuf(keyInfo.getAclsList()))
+        .build();
-        Objects.equals(metadata, omKeyInfo.metadata);
+        Objects.equals(metadata, omKeyInfo.metadata) &&
+        Objects.equals(acls, omKeyInfo.acls);

MOV26 UPD40 UPD74 UPD74 INS8 INS8 MOV44 UPD43 UPD74 UPD43 UPD43 UPD42 INS41 UPD43 UPD42 INS41 UPD74 UPD42 INS41 UPD74 MOV74 INS44 UPD42 UPD43 UPD42 UPD42 INS32 UPD42 INS32 UPD43 INS32 UPD43 INS21 UPD74 MOV74 INS42 INS25 INS27 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 UPD42 MOV42 INS42 INS42 UPD42 INS7 UPD43 INS27 INS8 INS32 MOV27 INS32 INS42 MOV14 UPD42 INS42 INS33 MOV21 MOV32 INS42 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 MOV32 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL9 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL42 DEL38 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL9 DEL41 DEL8 DEL66 DEL65 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL42 DEL44 DEL52 DEL42 DEL22 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL9 DEL41 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25