HDFS-13223. Reduce DiffListBySkipList memory usage.  Contributed by Shashikant Banerjee

+import com.google.common.base.Preconditions;
-import java.util.Random;
-import java.util.concurrent.ThreadLocalRandom;
+  static String childrenDiff2String(ChildrenDiff diff) {
+    if (diff == null) {
+      return "null";
+    }
+    return "@" + Integer.toHexString(System.identityHashCode(diff));
+  }
+
+  static String skip2String(SkipListNode skipTo, ChildrenDiff diff) {
+    return "->" + skipTo + ":diff=" + childrenDiff2String(diff);
+  }
+
+    static final SkipDiff[] EMPTY_ARRAY = {};
+
-      return "->" + skipTo + (diff == null? " (diff==null)": "");
+      return skip2String(skipTo, diff);
-  private final static class SkipListNode implements Comparable<Integer> {
+  final static class SkipListNode implements Comparable<Integer> {
-    private DirectoryDiff diff;
+    private final DirectoryDiff diff;
+    /** Next node. */
+    private SkipListNode next;
-     * List containing combined children diffs over a skip interval.
+     * Array containing combined children diffs over a skip interval.
-    private List<SkipDiff> skipDiffList;
+    private SkipDiff[] skips;
-      skipDiffList = new ArrayList<>(level + 1);
+
+      this.skips = level > 0? new SkipDiff[level]: SkipDiff.EMPTY_ARRAY;
+      for(int i = 0; i < skips.length; i++) {
+        skips[i] = new SkipDiff(null);
+      }
-      return skipDiffList.size() - 1;
+      return skips.length;
-      for (int level = level();
-           level > 0 && getSkipNode(level) == null; level--) {
-        skipDiffList.remove(level);
+      int n = skips.length - 1;
+      for (; n >= 0 && skips[n] == null; n--) {
+        continue;
+      }
+      n++;
+      if (n < skips.length) {
+        skips = n > 0 ? Arrays.copyOf(skips, n) : SkipDiff.EMPTY_ARRAY;
-      if (level < skipDiffList.size()) {
-        skipDiffList.get(level).setDiff(cDiff);
-      } else {
-        skipDiffList.add(new SkipDiff(cDiff));
+      Preconditions.checkArgument(level > 0);
+      resize(level);
+      skips[level - 1].setDiff(cDiff);
+    }
+
+    void setSkipDiff4Target(
+        SkipListNode target, int startLevel, ChildrenDiff childrenDiff) {
+      for(int i = startLevel; i <= level(); i++) {
+        if (getSkipNode(i) != target) {
+          return;
+        }
+        setSkipDiff(childrenDiff, i);
+      }
+    }
+
+    private void resize(int newLevel) {
+      int i = skips.length;
+      if (i < newLevel) {
+        skips = Arrays.copyOf(skips, newLevel);
+        for (; i < newLevel; i++) {
+          skips[i] = new SkipDiff(null);
+        }
-      for (int i = skipDiffList.size(); i <= level; i++) {
-        skipDiffList.add(new SkipDiff(null));
+      if (level == 0) {
+        next = node;
+      } else {
+        resize(level);
+        skips[level - 1].setSkipTo(node);
-      skipDiffList.get(level).setSkipTo(node);
-        return diff.getChildrenDiff();
+        return diff != null? diff.getChildrenDiff(): null;
-        return skipDiffList.get(level).getDiff();
+        return skips[level - 1].getDiff();
-      if (level >= skipDiffList.size()) {
-        return null;
-      } else {
-        return skipDiffList.get(level).getSkipTo();
-      }
+      return level == 0? next
+          : level <= skips.length? skips[level - 1].getSkipTo()
+          : null;
+
+    StringBuilder appendTo(StringBuilder b) {
+      b.append(this).append(": ").append(skip2String(next, getChildrenDiff(0)));
+      for(int i = 0; i < skips.length; i++) {
+        b.append(", ").append(skips[i]);
+      }
+      return b;
+    }
-  private List<SkipListNode> skipNodeList;
-
-  /**
-   * The max no of skipLevels.
-   */
-  private final int maxSkipLevels;
-
-  /**
-   * The no of diffs after which the level promotion happens.
-   */
-  private final int skipInterval;
+  private final List<SkipListNode> skipNodeList;
-  public DiffListBySkipList(int capacity, int interval, int skipLevel) {
+  public DiffListBySkipList(int capacity) {
-    this.maxSkipLevels = skipLevel;
-    this.skipInterval = interval;
-    final int nodeLevel = randomLevel(skipInterval, maxSkipLevels);
+    final int nodeLevel = DirectoryDiffListFactory.randomLevel();
-
-    for (int level = head.level() + 1; level <= nodeLevel; level++) {
-      head.skipDiffList.add(new SkipDiff(null));
-    }
-    final int nodeLevel = randomLevel(skipInterval, maxSkipLevels);
-    final int headLevel = head.level();
+    final int nodeLevel = DirectoryDiffListFactory.randomLevel();
-    for (int level = headLevel + 1; level <= nodeLevel; level++) {
-      head.skipDiffList.add(new SkipDiff(null));
-      nodePath[level] = head;
-    }
-    final SkipListNode current = new SkipListNode(diff, nodeLevel);
+    final SkipListNode newNode = new SkipListNode(diff, nodeLevel);
-        // Note : the last element(elemnt being added) diff is not added while
+        // Note : the last element(element being added) diff is not added while
-        ChildrenDiff combined = combineDiff(nodePath[level], current, level);
+        ChildrenDiff combined = combineDiff(nodePath[level], newNode, level);
-      nodePath[level].setSkipTo(current, level);
-      current.setSkipTo(null, level);
+      nodePath[level].setSkipTo(newNode, level);
+      newNode.setSkipTo(null, level);
-    return skipNodeList.add(current);
+    return skipNodeList.add(newNode);
+    ChildrenDiff first = null;
+
-        if (combined == null) {
-          combined = new ChildrenDiff();
+
+        if (first == null) {
+          first = cur.getChildrenDiff(i);
+        } else {
+          if (combined == null) {
+            combined = new ChildrenDiff();
+            combined.combinePosterior(first, null);
+          }
+          combined.combinePosterior(cur.getChildrenDiff(i), null);
-        combined.combinePosterior(cur.getChildrenDiff(i), null);
-    return combined;
+    return combined != null? combined: first;
+  SkipListNode getSkipListNode(int i) {
+    return skipNodeList.get(i);
+  }
+
-    SkipListNode node = getNode(index);
+    final SkipListNode node = getNode(index);
+
+
-      if (nodePath[level] != head && level > 0) {
+      final SkipListNode previous = nodePath[level];
+      final SkipListNode next = node.getSkipNode(level);
+      if (level == 0) {
+        if (next != null) {
+          previous.setSkipDiff4Target(next, 1, previous.getChildrenDiff(0));
+        }
+      } else if (previous != head) {
-        if (index == size() - 1) {
-          nodePath[level].setSkipDiff(null, level);
+        if (next == null) {
+          previous.setSkipDiff(null, level);
-            nodePath[level].getChildrenDiff(level)
-                .combinePosterior(node.getChildrenDiff(level), null);
+            final ChildrenDiff combined;
+            if (previous == nodePath[level - 1]
+                && next == node.getSkipNode(level - 1)) {
+              combined = nodePath[level - 1].getChildrenDiff(level - 1);
+              previous.setSkipDiff4Target(next, level + 1, combined);
+            } else if (next == previous.getSkipNode(level + 1)) {
+              combined = previous.getChildrenDiff(level + 1);
+            } else {
+              combined = new ChildrenDiff();
+              combined.combinePosterior(previous.getChildrenDiff(level), null);
+              combined.combinePosterior(node.getChildrenDiff(level), null);
+            }
+            previous.setSkipDiff(combined, level);
-      nodePath[level].setSkipTo(node.getSkipNode(level), level);
+      previous.setSkipTo(next, level);
-  /**
-   * Returns the level of the skipList node.
-   *
-   * @param skipInterval The max interval after which the next level promotion
-   *                     should happen.
-   * @param maxLevel     Maximum no of skip levels
-   * @return A value in the range 0 to maxLevel-1.
-   */
-  static int randomLevel(int skipInterval, int maxLevel) {
-    final Random r = ThreadLocalRandom.current();
-    for (int level = 0; level < maxLevel; level++) {
-      // skip to the next level with probability 1/skipInterval
-      if (r.nextInt(skipInterval) > 0) {
-        return level;
-      }
-    }
-    return maxLevel;
-  }
-    final StringBuilder b = new StringBuilder(getClass().getSimpleName());
-    b.append(" head: ").append(head).append(head.skipDiffList);
+    final StringBuilder b = new StringBuilder().append(" head: ");
+    head.appendTo(b);
-      b.append("\n  ").append(n).append(n.skipDiffList);
+      n.appendTo(b.append("\n  "));

MOV26 UPD40 INS31 INS31 INS31 INS83 MOV43 INS42 INS44 INS8 MOV83 INS43 INS42 MOV44 INS44 INS8 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS8 INS43 INS42 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS83 INS83 INS5 INS59 INS43 INS83 INS43 INS29 INS83 INS5 INS59 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS39 INS42 INS44 INS44 INS44 INS8 UPD83 MOV83 MOV39 UPD42 MOV42 INS44 INS8 INS83 INS39 INS42 MOV44 MOV44 INS8 INS43 MOV42 MOV44 INS8 INS43 INS42 INS44 INS8 INS60 INS60 INS42 INS39 INS42 INS41 INS60 INS21 INS42 MOV27 INS8 INS27 INS42 UPD42 MOV42 INS27 INS43 INS85 INS42 INS4 INS42 UPD42 MOV42 UPD42 INS65 MOV43 INS85 INS42 INS24 INS60 INS24 INS21 INS25 INS21 INS21 MOV21 MOV43 INS42 INS39 INS42 INS43 INS42 INS24 INS39 INS42 INS60 INS25 INS25 INS42 INS41 INS42 INS43 INS42 INS21 INS24 INS41 MOV83 INS43 MOV59 INS43 INS59 INS16 INS32 INS83 MOV83 MOV43 INS59 INS32 INS41 INS45 INS32 INS45 INS42 INS45 INS32 INS42 INS32 UPD66 INS66 INS58 INS27 INS37 MOV8 INS40 INS39 INS59 MOV27 MOV37 INS8 INS37 INS27 INS8 INS32 INS32 INS42 INS58 INS27 MOV37 INS8 INS39 INS59 INS27 INS8 INS27 INS8 INS8 INS16 INS42 INS32 INS58 INS27 INS37 INS8 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS33 INS27 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS60 INS60 INS25 MOV42 INS32 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS22 INS16 INS39 INS59 INS42 INS40 INS42 UPD42 MOV42 INS27 INS27 UPD42 INS18 INS42 INS42 INS40 MOV21 INS42 INS42 MOV27 UPD42 MOV42 UPD42 MOV42 INS2 INS39 INS59 INS42 MOV32 INS25 MOV21 MOV42 INS40 INS42 INS42 INS21 INS24 INS42 INS34 INS21 INS21 MOV21 INS27 INS42 INS16 MOV32 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 UPD42 UPD42 UPD42 UPD42 INS42 INS33 INS83 MOV43 INS59 INS83 INS43 INS59 INS27 INS8 INS25 MOV14 MOV42 MOV45 MOV32 MOV32 INS42 INS42 INS42 INS52 INS42 MOV27 INS3 INS40 INS42 INS34 INS7 INS40 INS34 INS42 INS34 INS2 INS7 MOV42 INS34 INS42 INS27 INS42 INS42 INS27 INS8 INS7 UPD27 MOV27 INS37 INS8 INS7 INS32 INS16 MOV42 INS34 INS27 INS32 INS33 INS32 UPD42 INS45 INS42 INS42 INS32 INS42 INS34 INS32 MOV2 UPD42 UPD42 INS25 INS42 MOV2 INS42 INS42 MOV32 MOV42 MOV34 INS25 INS27 INS8 INS42 INS42 INS42 INS5 INS42 INS2 MOV14 INS42 INS42 INS42 INS16 INS42 INS34 INS32 INS42 INS41 UPD42 UPD42 INS42 INS42 INS32 UPD42 INS42 INS21 INS42 INS42 INS42 INS42 INS2 INS27 MOV32 INS33 INS2 INS42 INS40 INS2 INS42 UPD42 MOV42 UPD42 MOV42 INS52 UPD42 MOV42 INS34 INS32 INS42 INS2 MOV42 INS27 INS8 INS8 INS27 INS8 INS42 INS42 INS25 MOV43 INS85 INS42 INS42 INS27 INS32 INS40 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS7 INS42 INS27 INS42 INS33 INS42 INS27 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS33 INS21 MOV25 MOV21 INS42 INS33 INS21 INS27 INS8 INS8 INS42 INS34 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS2 MOV14 INS42 INS34 INS42 INS34 INS42 INS34 UPD42 INS7 INS32 INS42 INS33 INS21 INS25 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS34 INS32 INS32 MOV27 MOV8 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS33 INS42 INS60 INS21 INS42 INS42 INS42 INS33 INS83 INS43 INS59 INS27 INS25 INS32 INS42 INS42 INS27 INS27 INS21 INS27 INS8 MOV8 INS42 INS42 INS42 INS42 UPD42 MOV42 INS2 INS42 INS32 INS7 INS32 INS42 INS32 INS21 INS21 INS21 INS21 INS42 INS27 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 MOV27 INS7 INS7 INS32 INS32 INS42 MOV34 INS42 INS34 MOV2 UPD42 MOV42 INS27 INS42 INS34 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS33 INS42 MOV42 MOV32 MOV33 INS27 INS42 INS34 INS42 INS42 INS27 INS43 INS42 MOV42 MOV42 INS42 INS34 INS42 INS34 INS42 DEL40 DEL26 DEL39 DEL42 DEL45 DEL42 DEL45 DEL45 DEL16 DEL36 DEL27 DEL83 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL32 DEL39 DEL59 DEL58 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL8 DEL8 DEL25 DEL8 DEL31 DEL39 DEL32 DEL59 DEL58 DEL24 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL33 DEL41 DEL8 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL40 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL34 DEL27 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL40 DEL42 DEL43 DEL33 DEL14 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL8 DEL24 DEL83 DEL60 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL33 DEL42 DEL32 DEL42 DEL42 DEL2 DEL32 DEL32 DEL21 DEL25 DEL8 DEL42 DEL27 DEL27 DEL25 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL42 DEL39 DEL42 DEL44 DEL83 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL32 DEL34 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32