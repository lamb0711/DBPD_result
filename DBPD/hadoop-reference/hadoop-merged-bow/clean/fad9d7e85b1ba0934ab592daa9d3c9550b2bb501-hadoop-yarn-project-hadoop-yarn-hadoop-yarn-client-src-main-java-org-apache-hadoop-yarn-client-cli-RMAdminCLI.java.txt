New parameter of CLI for decommissioning node gracefully in RMAdmin CLI. Contributed by Devaraj K

+import org.apache.hadoop.yarn.api.records.DecommissionType;
+import org.apache.hadoop.yarn.server.api.protocolrecords.CheckForDecommissioningNodesRequest;
+import org.apache.hadoop.yarn.server.api.protocolrecords.CheckForDecommissioningNodesResponse;
+  private static final String INVALID_TIMEOUT_ERR_MSG =
+      "Invalid timeout specified : ";
-          .put("-refreshNodes", new UsageInfo("",
-              "Refresh the hosts information at the ResourceManager."))
+          .put("-refreshNodes", new UsageInfo("[-g [timeout in seconds]]",
+              "Refresh the hosts information at the ResourceManager. Here "
+              + "[-g [timeout in seconds] is optional, if we specify the "
+              + "timeout then ResourceManager will wait for timeout before "
+              + "marking the NodeManager as decommissioned."))
-      " [-refreshNodes]" +
+      " [-refreshNodes [-g [timeout in seconds]]]" +
-    RefreshNodesRequest request = 
-      recordFactory.newRecordInstance(RefreshNodesRequest.class);
+    RefreshNodesRequest request = RefreshNodesRequest
+        .newInstance(DecommissionType.NORMAL);
-  
+
+  private int refreshNodes(long timeout) throws IOException, YarnException {
+    // Graceful decommissioning with timeout
+    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();
+    RefreshNodesRequest gracefulRequest = RefreshNodesRequest
+        .newInstance(DecommissionType.GRACEFUL);
+    adminProtocol.refreshNodes(gracefulRequest);
+    CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest = recordFactory
+        .newRecordInstance(CheckForDecommissioningNodesRequest.class);
+    long waitingTime;
+    boolean nodesDecommissioning = true;
+    // timeout=-1 means wait for all the nodes to be gracefully
+    // decommissioned
+    for (waitingTime = 0; waitingTime < timeout || timeout == -1; waitingTime++) {
+      // wait for one second to check nodes decommissioning status
+      try {
+        Thread.sleep(1000);
+      } catch (InterruptedException e) {
+        // Ignore the InterruptedException
+      }
+      CheckForDecommissioningNodesResponse checkForDecommissioningNodes = adminProtocol
+          .checkForDecommissioningNodes(checkForDecommissioningNodesRequest);
+      Set<NodeId> decommissioningNodes = checkForDecommissioningNodes
+          .getDecommissioningNodes();
+      if (decommissioningNodes.isEmpty()) {
+        nodesDecommissioning = false;
+        break;
+      } else {
+        StringBuilder nodes = new StringBuilder();
+        for (NodeId nodeId : decommissioningNodes) {
+          nodes.append(nodeId).append(",");
+        }
+        nodes.deleteCharAt(nodes.length() - 1);
+        System.out.println("Nodes '" + nodes + "' are still decommissioning.");
+      }
+    }
+    if (nodesDecommissioning) {
+      System.out.println("Graceful decommissioning not completed in " + timeout
+          + " seconds, issueing forceful decommissioning command.");
+      RefreshNodesRequest forcefulRequest = RefreshNodesRequest
+          .newInstance(DecommissionType.FORCEFUL);
+      adminProtocol.refreshNodes(forcefulRequest);
+    } else {
+      System.out.println("Graceful decommissioning completed in " + waitingTime
+          + " seconds.");
+    }
+    return 0;
+  }
+
-        "-refreshNodes".equals(cmd) || "-refreshServiceAcl".equals(cmd) ||
+        "-refreshServiceAcl".equals(cmd) ||
-        exitCode = refreshNodes();
+        if (args.length == 1) {
+          exitCode = refreshNodes();
+        } else if (args.length == 3) {
+          // if the graceful timeout specified
+          if ("-g".equals(args[1])) {
+            long timeout = validateTimeout(args[2]);
+            exitCode = refreshNodes(timeout);
+          } else {
+            printUsage(cmd, isHAEnabled);
+            return -1;
+          }
+        } else {
+          printUsage(cmd, isHAEnabled);
+          return -1;
+        }
-      // out the first line of the error mesage, ignore the stack trace.
+      // out the first line of the error message, ignore the stack trace.
+  private long validateTimeout(String strTimeout) {
+    long timeout;
+    try {
+      timeout = Long.parseLong(strTimeout);
+    } catch (NumberFormatException ex) {
+      throw new IllegalArgumentException(INVALID_TIMEOUT_ERR_MSG + strTimeout);
+    }
+    if (timeout < -1) {
+      throw new IllegalArgumentException(INVALID_TIMEOUT_ERR_MSG + timeout);
+    }
+    return timeout;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS45 INS39 INS42 INS42 INS42 INS60 INS60 INS21 INS60 INS60 INS60 INS24 INS25 INS41 INS43 INS42 INS60 INS54 INS25 INS41 MOV43 INS43 INS59 MOV43 INS59 INS32 INS43 INS59 INS39 INS59 INS39 INS59 INS7 INS27 INS37 INS8 INS42 INS8 INS8 INS34 INS42 INS39 INS59 INS8 INS12 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS34 INS27 INS27 INS42 INS54 INS60 INS60 INS25 INS21 INS60 INS21 INS21 INS42 INS21 INS44 INS8 INS42 INS38 INS53 UPD45 UPD42 UPD42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS57 INS42 INS42 INS42 INS38 INS8 INS12 INS43 INS59 INS74 INS59 INS32 INS8 INS8 INS32 INS43 INS59 INS32 INS32 INS7 INS43 INS42 INS53 INS34 INS14 INS43 INS34 INS21 INS44 INS8 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS10 INS60 INS70 INS21 INS21 INS40 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS27 INS8 INS42 INS32 INS42 INS14 INS43 INS27 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS59 INS44 INS42 INS8 INS32 INS32 INS45 INS42 INS45 INS42 INS42 INS40 INS45 INS42 INS45 INS25 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS9 INS42 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS27 INS40 INS42 INS27 INS27 MOV8 INS25 INS42 INS42 INS42 INS43 INS42 INS32 INS32 INS34 INS45 INS42 INS45 INS40 INS34 INS27 INS8 INS8 INS42 INS32 INS42 INS45 INS42 INS42 INS40 INS34 INS25 INS21 INS41 INS42 INS42 INS42 INS32 INS8 INS8 INS32 INS38 INS45 INS42 INS2 INS60 INS21 INS21 INS41 INS42 INS42 INS42 INS34 INS42 INS34 INS39 INS59 INS7 INS32 INS38 UPD45 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS45 INS45 INS45 INS45 INS42 INS2 INS42 INS42 INS42 INS34 DEL45 DEL57 DEL45 DEL42 DEL42 DEL32