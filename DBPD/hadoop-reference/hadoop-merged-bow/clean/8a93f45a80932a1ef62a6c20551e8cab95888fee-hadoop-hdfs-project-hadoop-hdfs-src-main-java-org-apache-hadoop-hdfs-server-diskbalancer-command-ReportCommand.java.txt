HDFS-10821. DiskBalancer: Report command support with multiple nodes. Contributed by Yiqun Lin.

+import org.apache.hadoop.hdfs.server.diskbalancer.DiskBalancerException;
-    desc = String.format("Print out volume information for a DataNode.");
+    desc = String.format("Print out volume information for DataNode(s).");
-       * Reporting volume information for a specific DataNode
+       * Reporting volume information for specific DataNode(s)
-     * get value that identifies a DataNode from command line, it could be UUID,
-     * IP address or host name.
+     * get value that identifies DataNode(s) from command line, it could be
+     * UUID, IP address or host name.
-       * Reporting volume information for a specific DataNode
+       * Reporting volume information for specific DataNode(s)
-          "Reporting volume information for DataNode '%s'.", nodeVal);
+          "Reporting volume information for DataNode(s) '%s'.", nodeVal);
-      final String trueStr = "True";
-      final String falseStr = "False";
-      DiskBalancerDataNode dbdn = getNode(nodeVal);
-      // get storage path of datanode
-      populatePathNames(dbdn);
+      List<DiskBalancerDataNode> dbdns = Lists.newArrayList();
+      try {
+        dbdns = getNodes(nodeVal);
+      } catch (DiskBalancerException e) {
+        // If there are some invalid nodes that contained in nodeVal,
+        // the exception will be threw.
+        recordOutput(result, e.getMessage());
+        return;
+      }
-      if (dbdn == null) {
-        outputLine = String.format(
-            "Can't find a DataNode that matches '%s'.", nodeVal);
-        recordOutput(result, outputLine);
-      } else {
-        result.appendln(String.format(nodeFormat,
-            dbdn.getDataNodeName(),
-            dbdn.getDataNodeIP(),
-            dbdn.getDataNodePort(),
-            dbdn.getDataNodeUUID(),
-            dbdn.getVolumeCount(),
-            dbdn.getNodeDataDensity()));
-
-        List<String> volumeList = Lists.newArrayList();
-        for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {
-          for (DiskBalancerVolume vol : vset.getVolumes()) {
-            volumeList.add(String.format(volumeFormat,
-                vol.getStorageType(),
-                vol.getPath(),
-                vol.getUsedRatio(),
-                vol.getUsed(),
-                vol.getCapacity(),
-                vol.getFreeRatio(),
-                vol.getFreeSpace(),
-                vol.getCapacity(),
-                vol.isFailed() ? trueStr : falseStr,
-                vol.isReadOnly() ? trueStr : falseStr,
-                vol.isSkip() ? trueStr : falseStr,
-                vol.isTransient() ? trueStr : falseStr));
-          }
+      if (!dbdns.isEmpty()) {
+        for (DiskBalancerDataNode node : dbdns) {
+          recordNodeReport(result, node, nodeFormat, volumeFormat);
+          result.append(System.lineSeparator());
-
-        Collections.sort(volumeList);
-        result.appendln(
-            StringUtils.join(volumeList.toArray(), System.lineSeparator()));
+   * Put node report lines to string buffer.
+   */
+  private void recordNodeReport(StrBuilder result, DiskBalancerDataNode dbdn,
+      final String nodeFormat, final String volumeFormat) throws Exception {
+    final String trueStr = "True";
+    final String falseStr = "False";
+
+    // get storage path of datanode
+    populatePathNames(dbdn);
+    result.appendln(String.format(nodeFormat,
+        dbdn.getDataNodeName(),
+        dbdn.getDataNodeIP(),
+        dbdn.getDataNodePort(),
+        dbdn.getDataNodeUUID(),
+        dbdn.getVolumeCount(),
+        dbdn.getNodeDataDensity()));
+
+    List<String> volumeList = Lists.newArrayList();
+    for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {
+      for (DiskBalancerVolume vol : vset.getVolumes()) {
+        volumeList.add(String.format(volumeFormat,
+            vol.getStorageType(),
+            vol.getPath(),
+            vol.getUsedRatio(),
+            vol.getUsed(),
+            vol.getCapacity(),
+            vol.getFreeRatio(),
+            vol.getFreeSpace(),
+            vol.getCapacity(),
+            vol.isFailed() ? trueStr : falseStr,
+            vol.isReadOnly() ? trueStr: falseStr,
+            vol.isSkip() ? trueStr : falseStr,
+            vol.isTransient() ? trueStr : falseStr));
+      }
+    }
+
+    Collections.sort(volumeList);
+    result.appendln(
+        StringUtils.join(volumeList.toArray(), System.lineSeparator()));
+  }
+
+  /**
-    String header = "Report command reports the volume information of a given" +
-        " datanode, or prints out the list of nodes that will benefit from " +
-        "running disk balancer. Top defaults to " + getDefaultTop();
+    String header = "Report command reports the volume information of given" +
+        " datanode(s), or prints out the list of nodes that will benefit " +
+        "from running disk balancer. Top defaults to " + getDefaultTop();
-        + "-node {DataNodeID | IP | Hostname}";
+        + "-node [<DataNodeID|IP|Hostname>,...]";

INS26 INS40 INS31 INS83 INS39 INS42 MOV44 INS44 INS44 INS44 INS43 INS8 INS29 UPD42 INS44 MOV8 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 MOV60 MOV60 INS25 INS65 INS43 INS42 MOV60 MOV60 MOV21 INS42 INS42 INS42 MOV32 MOV8 INS8 INS66 INS42 INS21 MOV21 INS60 INS54 INS25 UPD45 INS7 INS74 INS59 INS8 INS12 INS38 INS8 UPD45 UPD45 UPD45 UPD45 INS42 INS32 INS43 INS43 INS42 INS32 INS21 INS44 INS8 INS32 INS70 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS41 INS42 INS42 INS44 INS42 INS8 INS42 INS32 INS42 INS32 MOV43 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8