YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.

+import org.apache.hadoop.yarn.server.nodemanager.Context;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.docker.DockerVolumeCommand;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.DockerCommandPlugin;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.ResourcePlugin;
+  private Context nmContext;
-   *
-   * @param privilegedOperationExecutor the {@link PrivilegedOperationExecutor}
+   *  @param privilegedOperationExecutor the {@link PrivilegedOperationExecutor}
-  public DockerLinuxContainerRuntime(PrivilegedOperationExecutor
-      privilegedOperationExecutor, CGroupsHandler cGroupsHandler) {
+  public DockerLinuxContainerRuntime(
+      PrivilegedOperationExecutor privilegedOperationExecutor,
+      CGroupsHandler cGroupsHandler) {
-  public void initialize(Configuration conf)
+  public void initialize(Configuration conf, Context nmContext)
+    this.nmContext = nmContext;
+  private void runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,
+      Container container) throws ContainerExecutionException {
+    try {
+      String commandFile = dockerClient.writeCommandToTempFile(
+          dockerVolumeCommand, container.getContainerId().toString());
+      PrivilegedOperation privOp = new PrivilegedOperation(
+          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);
+      privOp.appendArgs(commandFile);
+      String output = privilegedOperationExecutor
+          .executePrivilegedOperation(null, privOp, null,
+              null, true, false);
+      LOG.info("ContainerId=" + container.getContainerId()
+          + ", docker volume output for " + dockerVolumeCommand + ": "
+          + output);
+    } catch (ContainerExecutionException e) {
+      LOG.error("Error when writing command to temp file, command="
+              + dockerVolumeCommand,
+          e);
+      throw e;
+    } catch (PrivilegedOperationException e) {
+      LOG.error("Error when executing command, command="
+          + dockerVolumeCommand, e);
+      throw new ContainerExecutionException(e);
+    }
+
+  }
+
+    Container container = ctx.getContainer();
+
+    // Create volumes when needed.
+    if (nmContext != null
+        && nmContext.getResourcePluginManager().getNameToPlugins() != null) {
+      for (ResourcePlugin plugin : nmContext.getResourcePluginManager()
+          .getNameToPlugins().values()) {
+        DockerCommandPlugin dockerCommandPlugin =
+            plugin.getDockerCommandPluginInstance();
+        if (dockerCommandPlugin != null) {
+          DockerVolumeCommand dockerVolumeCommand =
+              dockerCommandPlugin.getCreateDockerVolumeCommand(ctx.getContainer());
+          if (dockerVolumeCommand != null) {
+            runDockerVolumeCommand(dockerVolumeCommand, container);
+          }
+        }
+      }
+    }
+    // use plugins to update docker run command.
+    if (nmContext != null
+        && nmContext.getResourcePluginManager().getNameToPlugins() != null) {
+      for (ResourcePlugin plugin : nmContext.getResourcePluginManager()
+          .getNameToPlugins().values()) {
+        DockerCommandPlugin dockerCommandPlugin =
+            plugin.getDockerCommandPluginInstance();
+        if (dockerCommandPlugin != null) {
+          dockerCommandPlugin.updateDockerRunCommand(runCommand, container);
+        }
+      }
+    }
+
+    // Cleanup volumes when needed.
+    if (nmContext != null
+        && nmContext.getResourcePluginManager().getNameToPlugins() != null) {
+      for (ResourcePlugin plugin : nmContext.getResourcePluginManager()
+          .getNameToPlugins().values()) {
+        DockerCommandPlugin dockerCommandPlugin =
+            plugin.getDockerCommandPluginInstance();
+        if (dockerCommandPlugin != null) {
+          DockerVolumeCommand dockerVolumeCommand =
+              dockerCommandPlugin.getCleanupDockerVolumesCommand(
+                  ctx.getContainer());
+          if (dockerVolumeCommand != null) {
+            runDockerVolumeCommand(dockerVolumeCommand, ctx.getContainer());
+          }
+        }
+      }
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS43 INS59 INS44 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS43 INS8 INS8 INS42 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS54 INS42 INS60 INS25 INS25 INS25 INS42 INS7 INS42 INS42 INS8 INS12 INS12 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS22 INS42 INS60 INS60 INS21 INS60 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS27 INS27 INS70 INS27 INS27 INS70 INS27 INS27 INS70 INS52 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS33 INS32 INS33 INS44 INS32 INS8 INS42 INS33 INS32 INS33 INS44 INS32 INS8 INS42 INS33 INS32 INS33 INS44 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS32 INS14 INS32 INS42 INS43 INS42 INS32 INS42 INS60 INS25 INS32 INS42 INS43 INS42 INS32 INS42 INS60 INS25 INS32 INS42 INS43 INS42 INS32 INS42 INS60 INS25 INS42 INS42 INS42 INS32 INS43 INS40 INS42 INS42 INS33 INS42 INS33 INS33 INS9 INS9 INS45 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL8 DEL8