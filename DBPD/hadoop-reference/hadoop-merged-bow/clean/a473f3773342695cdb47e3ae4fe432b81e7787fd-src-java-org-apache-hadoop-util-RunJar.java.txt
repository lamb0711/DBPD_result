HADOOP-6346. Add support for specifying unpack pattern regex to RunJar.unJar. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@889018 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.jar.*;
-import java.lang.reflect.*;
+import java.lang.reflect.Array;
+import java.lang.reflect.Method;
+import java.lang.reflect.InvocationTargetException;
-import java.io.*;
-import java.util.*;
-
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.File;
+import java.util.regex.Pattern;
+import java.util.Arrays;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.jar.JarFile;
+import java.util.jar.JarEntry;
+import java.util.jar.Manifest;
+import org.apache.hadoop.io.IOUtils;
-  /** Unpack a jar file into a directory. */
+  /** Pattern that matches any string */
+  public static final Pattern MATCH_ANY = Pattern.compile(".*");
+
+  /**
+   * Unpack a jar file into a directory.
+   *
+   * This version unpacks all files inside the jar regardless of filename.
+   */
+    unJar(jarFile, toDir, MATCH_ANY);
+  }
+
+  /**
+   * Unpack matching files from a jar. Entries inside the jar that do
+   * not match the given pattern will be skipped.
+   *
+   * @param jarFile the .jar file to unpack
+   * @param toDir the destination directory into which to unpack the jar
+   * @param unpackRegex the pattern to match jar entries against
+   */
+  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)
+    throws IOException {
-      Enumeration entries = jar.entries();
+      Enumeration<JarEntry> entries = jar.entries();
-        if (!entry.isDirectory()) {
+        if (!entry.isDirectory() &&
+            unpackRegex.matcher(entry.getName()).matches()) {
-            if (!file.getParentFile().mkdirs()) {
-              if (!file.getParentFile().isDirectory()) {
-                throw new IOException("Mkdirs failed to create " + 
-                                      file.getParentFile().toString());
-              }
-            }
+            ensureDirectory(file.getParentFile());
-              byte[] buffer = new byte[8192];
-              int i;
-              while ((i = in.read(buffer)) != -1) {
-                out.write(buffer, 0, i);
-              }
+              IOUtils.copyBytes(in, out, 8192);
+  /**
+   * Ensure the existence of a given directory.
+   *
+   * @throws IOException if it cannot be created and does not already exist
+   */
+  private static void ensureDirectory(File dir) throws IOException {
+    if (!dir.mkdirs() && !dir.isDirectory()) {
+      throw new IOException("Mkdirs failed to create " +
+                            dir.toString());
+    }
+  }
+
-    boolean b = tmpDir.mkdirs();
-    if (!b && !tmpDir.isDirectory()) { 
-      System.err.println("Mkdirs failed to create " + tmpDir);
-      System.exit(-1);
-    }
+    ensureDirectory(tmpDir);
+
-    b = workDir.delete();
-    if (!b) {
+    if (!workDir.delete()) {
-    b = workDir.mkdirs();
-    if (!b && !workDir.isDirectory()) {
-      System.err.println("Mkdirs failed to create " + workDir);
-      System.exit(-1);
-    }
+    ensureDirectory(workDir);
-    
+
-    classPath.add(new File(workDir+"/").toURL());
-    classPath.add(file.toURL());
-    classPath.add(new File(workDir, "classes/").toURL());
+    classPath.add(new File(workDir+"/").toURI().toURL());
+    classPath.add(file.toURI().toURL());
+    classPath.add(new File(workDir, "classes/").toURI().toURL());
-        classPath.add(libs[i].toURL());
+        classPath.add(libs[i].toURI().toURL());

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS42 INS42 INS32 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS65 INS65 UPD65 INS65 INS43 INS42 INS65 INS65 INS43 INS42 INS42 INS25 MOV21 MOV21 INS66 INS42 INS42 INS45 INS66 INS66 INS42 INS42 INS32 INS66 INS66 INS42 INS66 INS42 UPD66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS38 INS38 INS53 UPD42 INS42 MOV32 UPD42 INS42 INS42 INS42 MOV32 MOV42 INS42 INS42 MOV32 MOV42 INS74 INS32 INS32 INS14 UPD42 INS32 UPD42 MOV43 INS43 INS42 INS42 INS42 INS42 MOV43 INS27 UPD42 MOV42 INS42 UPD42 INS42 INS27 INS45 INS32 INS32 MOV38 INS32 INS42 INS42 INS42 INS42 MOV32 MOV42 INS32 INS42 UPD42 INS42 INS42 INS32 INS21 UPD42 INS42 INS42 MOV32 MOV32 UPD42 INS21 INS32 INS42 INS42 MOV42 MOV42 UPD34 MOV34 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL34 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL40 DEL45 DEL42 DEL27 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL34 DEL38 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21 DEL42 DEL40 DEL45 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL38 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL34 DEL38 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42