YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.

-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.util.resource.Resources;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.NavigableMap;
+import java.util.TreeMap;
+import org.apache.hadoop.yarn.api.records.Resource;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.util.resource.ResourceCalculator;
+import org.apache.hadoop.yarn.util.resource.Resources;
+import com.google.common.annotations.VisibleForTesting;
+
- * This data structure stores a periodic RLESparseResourceAllocation.
+ * This data structure stores a periodic {@link RLESparseResourceAllocation}.
-public class PeriodicRLESparseResourceAllocation extends
-    RLESparseResourceAllocation {
+public class PeriodicRLESparseResourceAllocation
+    extends RLESparseResourceAllocation {
-  private static final Logger LOG = LoggerFactory
-      .getLogger(PeriodicRLESparseResourceAllocation.class);
+  private static final Logger LOG =
+      LoggerFactory.getLogger(PeriodicRLESparseResourceAllocation.class);
-   * @param rleVector {@link RLESparseResourceAllocation} with the run-length
-              encoded data.
+   * @param resourceCalculator {@link ResourceCalculator} the resource
+   *          calculator to use.
-      RLESparseResourceAllocation rleVector, Long timePeriod) {
-    super(rleVector.getCumulative(), rleVector.getResourceCalculator());
+      ResourceCalculator resourceCalculator, Long timePeriod) {
+    super(resourceCalculator);
-   * @param rleVector {@link RLESparseResourceAllocation} with the run-length
-              encoded data.
+   * @param resourceCalculator {@link ResourceCalculator} the resource
+   *          calculator to use..
-      RLESparseResourceAllocation rleVector) {
-    this(rleVector, 86400000L);
+      ResourceCalculator resourceCalculator) {
+    this(resourceCalculator,
+        YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY);
+  }
+
+  /**
+   * Constructor.
+   *
+   * @param rleVector {@link RLESparseResourceAllocation} with the run-length
+   *          encoded data.
+   * @param timePeriod Time period in milliseconds.
+   */
+  @VisibleForTesting
+  public PeriodicRLESparseResourceAllocation(
+      RLESparseResourceAllocation rleVector, Long timePeriod) {
+    super(rleVector.getCumulative(), rleVector.getResourceCalculator());
+    this.timePeriod = timePeriod;
+
+    // make sure the PeriodicRLE is zero-based, and handles wrap-around
+    long delta = (getEarliestStartTime() % timePeriod - getEarliestStartTime());
+    shift(delta);
+
+    List<Long> toRemove = new ArrayList<>();
+    Map<Long, Resource> toAdd = new TreeMap<>();
+
+    for (Map.Entry<Long, Resource> entry : cumulativeCapacity.entrySet()) {
+      if (entry.getKey() > timePeriod) {
+        toRemove.add(entry.getKey());
+        if (entry.getValue() != null) {
+          toAdd.put(timePeriod, entry.getValue());
+          long prev = entry.getKey() % timePeriod;
+          toAdd.put(prev, this.getCapacityAtTime(prev));
+          toAdd.put(0L, entry.getValue());
+        }
+      }
+    }
+    for (Long l : toRemove) {
+      cumulativeCapacity.remove(l);
+    }
+    cumulativeCapacity.putAll(toAdd);
-   * @param interval {@link ReservationInterval} to which the specified
-   *          resource is to be added.
+   * @param interval {@link ReservationInterval} to which the specified resource
+   *          is to be added.
-  public boolean addInterval(ReservationInterval interval,
-      Resource resource) {
+  public boolean addInterval(ReservationInterval interval, Resource resource) {
+
-      LOG.info("Cannot set capacity beyond end time: " + timePeriod);
+      LOG.info("Cannot set capacity beyond end time: " + timePeriod + " was ("
+          + interval.toString() + ")");
-   /**
+  /**
-  public boolean removeInterval(
-      ReservationInterval interval, Resource resource) {
+  public boolean removeInterval(ReservationInterval interval,
+      Resource resource) {
-    if (!Resources.fitsIn(
-        resource, super.getMinimumCapacityInInterval(interval))) {
+    // TODO revesit decrementing endTime
+    if (!Resources.fitsIn(resource, getMinimumCapacityInInterval(
+        new ReservationInterval(startTime, endTime - 1)))) {
-   * @param tick UTC time base from which offsets are specified for finding
-   *          the maximum capacity.
-   * @param period periodic offset at which capacities are evaluted.
+   * @param tick UTC time base from which offsets are specified for finding the
+   *          maximum capacity.
+   * @param period periodic offset at which capacities are evaluated.
-      maxResource =
-          super.getMaximumPeriodicCapacity(tick % timePeriod, period);
+      maxResource = super.getMaximumPeriodicCapacity(tick % timePeriod, period);
+  @Override
+  public RLESparseResourceAllocation getRangeOverlapping(long start, long end) {
+    NavigableMap<Long, Resource> unrolledMap = new TreeMap<>();
+    readLock.lock();
+    try {
+      long relativeStart = (start >= 0) ? start % timePeriod : 0;
+      NavigableMap<Long, Resource> cumulativeMap = this.getCumulative();
+      Long previous = cumulativeMap.floorKey(relativeStart);
+      previous = (previous != null) ? previous : 0;
+      for (long i = 0; i <= (end - start) / timePeriod; i++) {
+        for (Map.Entry<Long, Resource> e : cumulativeMap.entrySet()) {
+          long curKey = e.getKey() + (i * timePeriod);
+          if (curKey >= previous && (start + curKey - relativeStart) <= end) {
+            unrolledMap.put(curKey, e.getValue());
+          }
+        }
+      }
+      RLESparseResourceAllocation rle =
+          new RLESparseResourceAllocation(unrolledMap, getResourceCalculator());
+      rle.shift(start - relativeStart);
+      return rle;
+    } finally {
+      readLock.unlock();
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS44 INS44 MOV29 INS78 INS83 INS42 MOV44 MOV44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 UPD66 MOV65 INS66 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS46 INS21 UPD43 UPD42 INS42 MOV46 MOV21 INS60 INS21 INS60 INS60 INS70 INS70 INS21 INS42 INS42 INS39 INS42 INS39 INS42 INS60 INS21 INS54 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS7 UPD42 INS65 UPD66 UPD66 UPD42 UPD42 INS40 INS39 INS59 INS32 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS44 INS42 INS8 INS32 UPD66 UPD66 UPD66 UPD66 UPD66 INS74 INS59 INS32 INS8 INS8 INS42 INS22 INS42 INS42 INS42 INS36 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS25 INS43 INS42 INS21 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS60 INS60 INS60 INS21 INS24 INS60 INS21 INS41 INS21 INS52 INS42 INS27 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS27 INS8 INS42 INS32 INS32 INS42 INS42 INS42 INS74 INS39 INS59 INS74 INS59 INS43 INS59 INS7 INS58 INS27 INS37 INS8 INS43 INS59 INS32 INS42 INS32 INS27 INS32 INS43 INS43 INS40 INS42 INS42 INS32 INS42 INS21 INS25 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS16 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS16 INS39 INS59 INS42 INS27 INS42 INS70 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS45 INS32 INS45 INS43 INS42 INS27 INS42 INS36 INS27 INS34 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS36 INS42 INS34 INS42 INS34 INS36 INS42 INS44 INS32 INS8 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS33 INS21 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS34 INS27 INS42 INS42 INS27 INS27 INS74 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS32 INS32 INS42 INS34 INS42 INS33 INS42 INS42 INS43 INS43 INS43 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS32 INS40 INS42 INS42 INS42 INS27 INS27 INS27 INS21 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS32 INS36 INS42 INS42 INS36 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 DEL34 DEL42 DEL42 DEL48