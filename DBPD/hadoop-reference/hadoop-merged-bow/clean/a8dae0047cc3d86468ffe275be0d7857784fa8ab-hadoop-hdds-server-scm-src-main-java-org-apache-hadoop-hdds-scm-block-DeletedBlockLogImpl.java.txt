HDDS-308. SCM should identify a container with pending deletes using container reports. Contributed by Lokesh Jain.

+import org.apache.hadoop.hdds.scm.container.common.helpers.Pipeline;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentHashMap;
+import static java.lang.Math.min;
-          if (dnsWithCommittedTxn == null || containerId == null) {
-            LOG.warn("Transaction txId={} commit by dnId={} failed."
-                + " Corresponding entry not found.", txID, dnID);
+          if (dnsWithCommittedTxn == null) {
+            LOG.warn("Transaction txId={} commit by dnId={} for containerID={} "
+                    + "failed. Corresponding entry not found.", txID, dnID,
+                containerId);
-          Collection<DatanodeDetails> containerDnsDetails =
+          Pipeline pipeline =
-                  .getPipeline().getDatanodes().values();
+                  .getPipeline();
+          Collection<DatanodeDetails> containerDnsDetails =
+              pipeline.getDatanodes().values();
-          // corresponding nodes commit the txn.
-          if (dnsWithCommittedTxn.size() >= containerDnsDetails.size()) {
+          // corresponding nodes commit the txn. It is required to check that
+          // the nodes returned in the pipeline match the replication factor.
+          if (min(containerDnsDetails.size(), dnsWithCommittedTxn.size())
+              >= pipeline.getFactor().getNumber()) {
-                .map(dnDetails -> dnDetails.getUuid())
+                .map(DatanodeDetails::getUuid)
-   * @return Mapping from containerId to latest transactionId for the container.
-  public Map<Long, Long> addTransactions(
+  public void addTransactions(
-    Map<Long, Long> deleteTransactionsMap = new HashMap<>();
-        deleteTransactionsMap.put(entry.getKey(), currentLatestID);
-      return deleteTransactionsMap;
-  public void getTransactions(DatanodeDeletedBlockTransactions transactions)
-      throws IOException {
+  public Map<Long, Long> getTransactions(
+      DatanodeDeletedBlockTransactions transactions) throws IOException {
+      Map<Long, Long> deleteTransactionMap = new HashMap<>();
+              deleteTransactionMap.put(block.getContainerID(), block.getTxID());
+      return deleteTransactionMap;

MOV26 INS26 INS26 INS40 INS40 INS39 MOV74 MOV60 INS41 INS42 UPD42 INS60 MOV27 INS43 MOV74 INS59 INS42 UPD42 MOV32 INS42 INS32 INS32 INS32 INS32 INS42 INS42 MOV32 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 UPD45 INS90 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL32 DEL42 DEL32 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL66 DEL65 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL41 DEL39