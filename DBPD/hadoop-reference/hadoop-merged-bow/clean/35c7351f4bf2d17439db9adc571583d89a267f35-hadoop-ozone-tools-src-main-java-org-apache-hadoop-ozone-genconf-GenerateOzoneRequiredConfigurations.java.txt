HDDS-455. Ozone genconf tool must use picocli. Contributed by Dinesh Chitlangia.

+import org.apache.hadoop.hdds.cli.GenericCli;
+import org.apache.hadoop.hdds.cli.HddsVersionProvider;
+import picocli.CommandLine.Command;
+import picocli.CommandLine.Parameters;
+import picocli.CommandLine.PicocliException;
-
- * <li>ozone genconf -output <Path to output file></li>
- * <li>ozone genconf -help</li>
+ * <li>ozone genconf <Path to output file></li>
+ * <li>ozone genconf --help</li>
+ * <li>ozone genconf -h</li>
-public final class GenerateOzoneRequiredConfigurations {
+@Command(
+    name = "ozone genconf",
+    description = "Tool to generate template ozone-site.xml",
+    versionProvider = HddsVersionProvider.class,
+    mixinStandardHelpOptions = true)
+public final class GenerateOzoneRequiredConfigurations extends GenericCli {
-  private static final String OUTPUT = "-output";
-  private static final String HELP = "-help";
-  private static final String USAGE = "Usage: \nozone genconf "
-      + OUTPUT + " <Path to output file> \n"
-      + "ozone genconf "
-      + HELP;
-  private static final int SUCCESS = 0;
-  private static final int FAILURE = 1;
+  @Parameters(arity = "1..1",
+      description = "Directory path where ozone-site file should be generated.")
+  private String path;
-  private GenerateOzoneRequiredConfigurations() {
-
-  }
-   * @throws JAXBException
+   *
-  public static void main(String[] args) {
-
-    try {
-      if (args.length == 0) {
-        System.out.println(USAGE);
-        System.exit(1);
-      }
-
-      switch (args[0]) {
-      case OUTPUT:
-        if (args.length > 1) {
-          int result = generateConfigurations(args[1]);
-        } else {
-          System.out.println("Path to output file is mandatory");
-          System.out.println(USAGE);
-          System.exit(1);
-        }
-        break;
-
-      case HELP:
-        System.out.println(USAGE);
-        System.exit(0);
-        break;
-
-      default:
-        System.out.println(USAGE);
-        System.exit(1);
-      }
-
-    } catch (Exception e) {
-      e.printStackTrace();
-    }
+  public static void main(String[] args) throws Exception {
+    new GenerateOzoneRequiredConfigurations().run(args);
-  /**
-   * Check if the path is valid directory.
-   *
-   * @param path
-   * @return true, if path is valid directory, else return false
-   */
-  public static boolean isValidPath(String path) {
-    try {
-      return Files.isDirectory(Paths.get(path));
-    } catch (InvalidPathException | NullPointerException ex) {
-      return false;
-    }
-  }
-
-  /**
-   * Check if user has permission to write in the specified path.
-   *
-   * @param path
-   * @return true, if the user has permission to write, else returns false
-   */
-  public static boolean canWrite(String path) {
-    File file = new File(path);
-    return file.canWrite();
+  @Override
+  public Void call() throws Exception {
+    generateConfigurations(path);
+    return null;
-   *
-   * @return SUCCESS(0) if file can be generated, else returns FAILURE(1)
+   * @throws PicocliException
-  public static int generateConfigurations(String path) throws JAXBException {
+  public static void generateConfigurations(String path) throws
+      PicocliException, JAXBException {
-      System.out.println("Invalid directory path.");
-      return FAILURE;
+      throw new PicocliException("Invalid directory path.");
-      System.out.println("Insufficient permission.");
-      return FAILURE;
+      throw new PicocliException("Insufficient permission.");
+  }
-    return SUCCESS;
+  /**
+   * Check if the path is valid directory.
+   *
+   * @param path
+   * @return true, if path is valid directory, else return false
+   */
+  public static boolean isValidPath(String path) {
+    try {
+      return Files.isDirectory(Paths.get(path));
+    } catch (InvalidPathException | NullPointerException ex) {
+      return Boolean.FALSE;
+    }
+  }
+
+  /**
+   * Check if user has permission to write in the specified path.
+   *
+   * @param path
+   * @return true, if the user has permission to write, else returns false
+   */
+  public static boolean canWrite(String path) {
+    File file = new File(path);
+    return file.canWrite();

INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS77 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS42 INS80 INS80 INS80 INS80 UPD42 MOV42 INS77 MOV83 MOV43 MOV59 MOV29 MOV83 MOV83 MOV39 MOV42 MOV44 INS43 INS8 INS78 INS83 INS43 INS42 MOV43 INS8 UPD39 INS43 UPD66 UPD66 INS66 INS42 INS45 INS42 INS45 INS42 INS57 INS42 INS9 INS42 INS80 INS80 UPD42 INS42 INS21 INS42 INS42 MOV21 INS41 UPD65 INS42 INS43 INS42 INS45 INS42 INS45 INS32 INS33 INS42 UPD42 MOV42 INS14 INS42 INS42 UPD42 UPD42 INS53 INS53 INS43 INS14 INS14 INS42 INS43 INS45 INS43 INS45 INS40 INS42 INS42 DEL34 DEL42 DEL65 DEL66 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL41 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL41 DEL42 DEL41 DEL83 DEL83 DEL42 DEL83 DEL83 DEL83 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL45 DEL42 DEL45 DEL45 DEL42 DEL27 DEL59 DEL23 DEL83 DEL83 DEL39 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL8 DEL31 DEL40 DEL34 DEL27 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL2 DEL42 DEL49 DEL40 DEL34 DEL27 DEL39 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL59 DEL60 DEL8 DEL40 DEL42 DEL45 DEL32 DEL21 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL25 DEL10 DEL42 DEL49 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL10 DEL49 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL50 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL9