YARN-7863. Modify placement constraints to support node attributes. Contributed by Sunil Govindan.

-import org.apache.hadoop.yarn.api.records.ApplicationId;
-import org.apache.hadoop.yarn.api.records.SchedulingRequest;
+import org.apache.hadoop.yarn.api.records.*;
-  private static boolean canSatisfyNodePartitionConstraintExpresssion(
-      TargetExpression targetExpression, SchedulerNode schedulerNode) {
+  private static boolean canSatisfyNodeConstraintExpresssion(
+      SingleConstraint sc, TargetExpression targetExpression,
+      SchedulerNode schedulerNode) {
-    if (values == null || values.isEmpty()) {
-      return schedulerNode.getPartition().equals(
-          RMNodeLabelsManager.NO_LABEL);
-    } else{
-      String nodePartition = values.iterator().next();
-      if (!nodePartition.equals(schedulerNode.getPartition())) {
+
+    if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {
+      if (values == null || values.isEmpty()) {
+        return schedulerNode.getPartition()
+            .equals(RMNodeLabelsManager.NO_LABEL);
+      } else {
+        String nodePartition = values.iterator().next();
+        if (!nodePartition.equals(schedulerNode.getPartition())) {
+          return false;
+        }
+      }
+    } else {
+      NodeAttributeOpCode opCode = sc.getNodeAttributeOpCode();
+      // compare attributes.
+      String inputAttribute = values.iterator().next();
+      NodeAttribute requestAttribute = getNodeConstraintFromRequest(
+          targetExpression.getTargetKey(), inputAttribute);
+      if (requestAttribute == null) {
+        return true;
+      }
+
+      if (schedulerNode.getNodeAttributes() == null ||
+          !schedulerNode.getNodeAttributes().contains(requestAttribute)) {
+        if(LOG.isDebugEnabled()) {
+          LOG.debug("Incoming requestAttribute:" + requestAttribute
+              + "is not present in " + schedulerNode.getNodeID());
+        }
+        return false;
+      }
+      boolean found = false;
+      for (Iterator<NodeAttribute> it = schedulerNode.getNodeAttributes()
+          .iterator(); it.hasNext();) {
+        NodeAttribute nodeAttribute = it.next();
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Starting to compare Incoming requestAttribute :"
+              + requestAttribute
+              + " with requestAttribute value= " + requestAttribute
+              .getAttributeValue()
+              + ", stored nodeAttribute value=" + nodeAttribute
+              .getAttributeValue());
+        }
+        if (requestAttribute.equals(nodeAttribute)) {
+          if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {
+            if (LOG.isDebugEnabled()) {
+              LOG.debug(
+                  "Incoming requestAttribute:" + requestAttribute
+                      + " matches with node:" + schedulerNode.getNodeID());
+            }
+            found = true;
+            return found;
+          }
+        }
+      }
+      if (!found) {
+        if(LOG.isDebugEnabled()) {
+          LOG.info("skip this node:" + schedulerNode.getNodeID()
+              + " for requestAttribute:" + requestAttribute);
+        }
-
+  private static boolean isOpCodeMatches(NodeAttribute requestAttribute,
+      NodeAttribute nodeAttribute, NodeAttributeOpCode opCode) {
+    boolean retCode = false;
+    switch (opCode) {
+    case EQ:
+      retCode = requestAttribute.getAttributeValue()
+          .equals(nodeAttribute.getAttributeValue());
+      break;
+    case NE:
+      retCode = !(requestAttribute.getAttributeValue()
+          .equals(nodeAttribute.getAttributeValue()));
+      break;
+    default:
+      break;
+    }
+    return retCode;
+  }
+
-      } else if (currentExp.getTargetType().equals(TargetType.NODE_ATTRIBUTE)
-          && currentExp.getTargetKey().equals(NODE_PARTITION)) {
-        // This is a node partition expression, check it.
-        canSatisfyNodePartitionConstraintExpresssion(currentExp, schedulerNode);
+      } else if (currentExp.getTargetType().equals(TargetType.NODE_ATTRIBUTE)) {
+        // This is a node attribute expression, check it.
+        if (!canSatisfyNodeConstraintExpresssion(singleConstraint, currentExp,
+            schedulerNode)) {
+          return false;
+        }
+      if(LOG.isDebugEnabled()) {
+        LOG.debug(
+            "Constraint is found empty during constraint validation for app:"
+                + appId);
+      }
+
+  private static NodeAttribute getNodeConstraintFromRequest(String attrKey,
+      String attrString) {
+    NodeAttribute nodeAttribute = null;
+    if(LOG.isDebugEnabled()) {
+      LOG.debug("Incoming node attribute: " + attrKey + "=" + attrString);
+    }
+
+    // Input node attribute could be like 1.8
+    String[] name = attrKey.split("/");
+    if (name == null || name.length == 1) {
+      nodeAttribute = NodeAttribute
+          .newInstance(attrKey, NodeAttributeType.STRING, attrString);
+    } else {
+      nodeAttribute = NodeAttribute
+          .newInstance(name[0], name[1], NodeAttributeType.STRING, attrString);
+    }
+
+    return nodeAttribute;
+  }

UPD40 INS31 INS31 UPD42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS43 INS42 MOV60 INS25 MOV41 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS50 INS41 INS25 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS25 INS41 INS42 INS32 MOV8 INS8 INS42 INS42 INS42 INS39 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS10 INS42 MOV27 INS8 INS42 INS42 INS43 INS59 INS32 INS8 INS5 INS59 INS27 INS8 INS8 INS42 INS32 INS42 INS42 INS60 INS60 INS60 MOV25 INS25 INS60 INS24 INS25 INS42 INS9 INS42 INS7 INS42 INS7 INS25 INS41 INS42 INS42 INS33 INS42 INS42 INS21 INS43 INS85 INS42 INS32 INS27 INS27 INS21 INS21 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS27 INS8 INS39 INS59 INS58 INS32 INS8 INS38 INS8 INS42 INS32 INS42 INS38 INS32 INS8 INS9 INS32 INS42 INS42 INS42 INS45 INS42 INS33 INS40 INS34 INS7 INS7 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS27 INS38 INS25 INS41 INS42 INS9 INS74 INS59 INS42 INS42 INS60 INS25 INS25 INS42 INS25 INS41 INS32 INS42 INS32 INS36 MOV32 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS33 INS32 INS32 INS8 INS9 INS43 INS43 INS42 INS32 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS8 INS9 INS42 INS42 INS42 INS42 INS32 INS25 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS2 INS2 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS25 INS42 INS42 INS21 INS32 INS42 INS32 INS38 INS8 INS42 INS42 INS27 INS42 INS34 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS41 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS25 INS21 INS41 INS42 INS42 INS27 UPD42 MOV42 INS42 MOV42 MOV42 INS9 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS45 INS32 INS32 INS8 INS7 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS45 INS32 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21