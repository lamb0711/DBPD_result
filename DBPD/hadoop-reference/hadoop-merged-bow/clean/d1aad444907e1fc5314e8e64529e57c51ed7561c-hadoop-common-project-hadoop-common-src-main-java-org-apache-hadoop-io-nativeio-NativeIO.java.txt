HDFS-14356. Implement HDFS cache on SCM with native PMDK libs. Contributed by Feilong He.

+    /**
+     * Keeps the support state of PMDK.
+     */
+    public enum SupportState {
+      UNSUPPORTED(-1),
+      PMDK_LIB_NOT_FOUND(1),
+      SUPPORTED(0);
+
+      private byte stateCode;
+      SupportState(int stateCode) {
+        this.stateCode = (byte) stateCode;
+      }
+
+      public int getStateCode() {
+        return stateCode;
+      }
+
+      public String getMessage() {
+        String msg;
+        switch (stateCode) {
+        case -1:
+          msg = "The native code is built without PMDK support.";
+          break;
+        case 1:
+          msg = "The native code is built with PMDK support, but PMDK libs " +
+              "are NOT found in execution environment or failed to be loaded.";
+          break;
+        case 0:
+          msg = "The native code is built with PMDK support, and PMDK libs " +
+              "are loaded successfully.";
+          break;
+        default:
+          msg = "The state code: " + stateCode + " is unrecognized!";
+        }
+        return msg;
+      }
+    }
+
+    // Denotes the state of supporting PMDK. The value is set by JNI.
+    private static SupportState pmdkSupportState =
+        SupportState.PMDK_LIB_NOT_FOUND;
+
+    // This method is invoked by JNI.
+    public static void setPmdkSupportState(int stateCode) {
+      for (SupportState state : SupportState.values()) {
+        if (state.getStateCode() == stateCode) {
+          pmdkSupportState = state;
+          return;
+        }
+      }
+      LOG.error("The state code: " + stateCode + " is unrecognized!");
+    }
+
+    public static boolean isPmdkAvailable() {
+      LOG.info(pmdkSupportState.getMessage());
+      return pmdkSupportState == SupportState.SUPPORTED;
+    }
+
+    /**
+     * Denote memory region for a file mapped.
+     */
+    public static class PmemMappedRegion {
+      private long address;
+      private long length;
+      private boolean isPmem;
+
+      public PmemMappedRegion(long address, long length, boolean isPmem) {
+        this.address = address;
+        this.length = length;
+        this.isPmem = isPmem;
+      }
+
+      public boolean isPmem() {
+        return this.isPmem;
+      }
+
+      public long getAddress() {
+        return this.address;
+      }
+
+      public long getLength() {
+        return this.length;
+      }
+    }
+
+    /**
+     * JNI wrapper of persist memory operations.
+     */
+    public static class Pmem {
+      // check whether the address is a Pmem address or DIMM address
+      public static boolean isPmem(long address, long length) {
+        return NativeIO.POSIX.isPmemCheck(address, length);
+      }
+
+      // create a pmem file and memory map it
+      public static PmemMappedRegion mapBlock(String path, long length) {
+        return NativeIO.POSIX.pmemCreateMapFile(path, length);
+      }
+
+      // unmap a pmem file
+      public static boolean unmapBlock(long address, long length) {
+        return NativeIO.POSIX.pmemUnMap(address, length);
+      }
+
+      // copy data from disk file(src) to pmem file(dest), without flush
+      public static void memCopy(byte[] src, long dest, boolean isPmem,
+          long length) {
+        NativeIO.POSIX.pmemCopy(src, dest, isPmem, length);
+      }
+
+      // flush the memory content to persistent storage
+      public static void memSync(PmemMappedRegion region) {
+        if (region.isPmem()) {
+          NativeIO.POSIX.pmemDrain();
+        } else {
+          NativeIO.POSIX.pmemSync(region.getAddress(), region.getLength());
+        }
+      }
+    }
+
+    private static native boolean isPmemCheck(long address, long length);
+    private static native PmemMappedRegion pmemCreateMapFile(String path,
+        long length);
+    private static native boolean pmemUnMap(long address, long length);
+    private static native void pmemCopy(byte[] src, long dest, boolean isPmem,
+        long length);
+    private static native void pmemDrain();
+    private static native void pmemSync(long address, long length);
+
-        FileDescriptor fd, long offset, long len, int flags)
-            throws NativeIOException {
+          FileDescriptor fd, long offset, long len, int flags)
+          throws NativeIOException {
-   * @param Fthe full principal name containing the domain
+   * @param name the full principal name containing the domain

INS71 INS23 INS31 INS31 INS55 INS55 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS72 INS72 INS72 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS42 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS42 INS44 INS44 INS83 INS83 INS83 INS43 INS42 INS44 INS44 INS83 INS83 INS83 INS39 INS42 INS44 INS44 INS83 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS83 INS83 INS83 INS39 INS42 INS83 INS83 INS83 INS39 INS42 INS44 INS44 INS65 INS42 INS38 INS42 INS34 INS42 INS34 INS83 INS39 INS59 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS40 INS39 INS42 INS70 INS21 INS21 INS41 INS65 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS65 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS39 INS42 INS39 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 UPD42 UPD66 INS66 INS34 INS42 INS39 INS42 INS21 INS41 INS42 INS60 INS50 INS41 INS44 INS32 INS8 INS32 INS32 INS27 INS66 INS42 INS42 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS21 INS41 INS41 INS41 INS66 INS39 INS42 INS39 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS41 INS39 INS42 INS39 INS42 INS41 INS5 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS43 INS42 INS25 INS42 INS39 INS85 INS7 INS42 INS43 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS42 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS40 INS7 INS7 INS7 INS22 INS22 INS22 INS32 INS42 INS32 INS32 INS39 INS85 INS32 INS42 INS32 INS8 INS8 INS22 INS11 INS42 INS42 INS38 INS7 INS34 INS7 INS34 INS7 INS7 INS42 INS27 INS8 INS45 INS42 INS45 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS52 INS42 INS39 INS42 INS34 INS42 INS45 INS42 INS27 INS42 INS27 INS42 INS27 INS32 INS42 INS21 INS41 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS32 INS45 INS45 INS45 INS45 INS45 INS42 INS45 INS42 INS42 INS7 INS40 INS42 INS40 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42