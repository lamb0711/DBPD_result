HDFS-8909. Erasure coding: update BlockInfoContiguousUC and BlockInfoStripedUC to use BlockUnderConstructionFeature. Contributed by Jing Zhao.

+import java.io.IOException;
+import com.google.common.base.Preconditions;
+  private BlockUnderConstructionFeature uc;
+
-  /**
-   * BlockInfo represents a block that is not being constructed.
-   * In order to start modifying the block, the BlockInfo should be converted to
-   * {@link BlockInfoContiguousUnderConstruction} or
-   * {@link BlockInfoStripedUnderConstruction}.
-   * @return {@link BlockUCState#COMPLETE}
-   */
-  public BlockUCState getBlockUCState() {
-    return BlockUCState.COMPLETE;
-  }
-
-  /**
-   * Is this block complete?
-   *
-   * @return true if the state of the block is {@link BlockUCState#COMPLETE}
-   */
-  public boolean isComplete() {
-    return getBlockUCState().equals(BlockUCState.COMPLETE);
-  }
-
+
+  /* UnderConstruction Feature related */
+
+  public BlockUnderConstructionFeature getUnderConstructionFeature() {
+    return uc;
+  }
+
+  public BlockUCState getBlockUCState() {
+    return uc == null ? BlockUCState.COMPLETE : uc.getBlockUCState();
+  }
+
+  /**
+   * Is this block complete?
+   *
+   * @return true if the state of the block is {@link BlockUCState#COMPLETE}
+   */
+  public boolean isComplete() {
+    return getBlockUCState().equals(BlockUCState.COMPLETE);
+  }
+
+  /**
+   * Add/Update the under construction feature.
+   */
+  public void convertToBlockUnderConstruction(BlockUCState s,
+      DatanodeStorageInfo[] targets) {
+    if (isComplete()) {
+      uc = new BlockUnderConstructionFeature(this, s, targets, this.isStriped());
+    } else {
+      // the block is already under construction
+      uc.setBlockUCState(s);
+      uc.setExpectedLocations(this, targets, this.isStriped());
+    }
+  }
+
+  /**
+   * Convert an under construction block to a complete block.
+   *
+   * @return BlockInfo - a complete block.
+   * @throws IOException if the state of the block
+   * (the generation stamp and the length) has not been committed by
+   * the client or it does not have at least a minimal number of replicas
+   * reported from data-nodes.
+   */
+  BlockInfo convertToCompleteBlock() throws IOException {
+    assert getBlockUCState() != BlockUCState.COMPLETE :
+        "Trying to convert a COMPLETE block";
+    uc = null;
+    return this;
+  }
+
+  /**
+   * Process the recorded replicas. When about to commit or finish the
+   * pipeline recovery sort out bad replicas.
+   * @param genStamp  The final generation stamp for the block.
+   */
+  public void setGenerationStampAndVerifyReplicas(long genStamp) {
+    Preconditions.checkState(uc != null && !isComplete());
+    // Set the generation stamp for the block.
+    setGenerationStamp(genStamp);
+
+    // Remove the replicas with wrong gen stamp
+    uc.removeStaleReplicas(this);
+  }
+
+  /**
+   * Commit block's length and generation stamp as reported by the client.
+   * Set block state to {@link BlockUCState#COMMITTED}.
+   * @param block - contains client reported block length and generation
+   * @throws IOException if block ids are inconsistent.
+   */
+  void commitBlock(Block block) throws IOException {
+    if (getBlockId() != block.getBlockId()) {
+      throw new IOException("Trying to commit inconsistent block: id = "
+          + block.getBlockId() + ", expected id = " + getBlockId());
+    }
+    Preconditions.checkState(!isComplete());
+    uc.commit();
+    this.set(getBlockId(), block.getNumBytes(), block.getGenerationStamp());
+    // Sort out invalid replicas.
+    setGenerationStampAndVerifyReplicas(block.getGenerationStamp());
+  }

INS26 INS26 MOV31 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 MOV43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS43 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS42 INS41 INS41 INS65 INS43 INS42 INS5 INS42 INS25 INS65 INS65 INS65 INS42 INS42 INS6 INS21 INS41 INS65 INS65 INS39 INS42 INS21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS25 INS21 INS21 INS21 INS21 INS42 INS16 INS66 INS42 INS43 INS85 INS32 INS8 INS8 UPD66 MOV66 UPD66 MOV66 UPD42 MOV42 INS66 INS66 INS66 INS66 INS27 INS45 INS7 INS52 UPD66 MOV66 INS66 UPD42 MOV42 INS66 INS32 INS32 INS32 UPD66 MOV66 UPD66 MOV66 MOV65 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS32 INS32 INS32 INS32 INS27 INS40 INS32 INS42 INS42 INS21 INS21 INS21 INS32 INS40 INS42 INS33 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS52 INS32 INS32 INS53 INS42 INS42 INS38 INS42 INS42 INS52 INS42 INS32 INS32 INS32 INS42 INS32 INS42 INS33 INS42 INS42 INS7 INS32 INS32 INS42 INS27 INS38 UPD42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS33 INS32 INS43 INS27 INS42 INS43 INS52 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS52 INS42 INS42 INS42 INS42 DEL65 DEL65 DEL65 DEL65 DEL29 DEL83 DEL42 DEL40 DEL41 DEL8 DEL31