YARN-7276. Federation Router Web Service fixes. Contributed by Inigo Goiri.

+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;
+import static javax.servlet.http.HttpServletResponse.SC_OK;
+
+import javax.ws.rs.core.HttpHeaders;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-  protected static <T> T genericForward(String webApp, HttpServletRequest hsr,
-      final Class<T> returnType, HTTPMethods method, String targetPath,
-      Object formParam, Map<String, String[]> additionalParam) {
+  protected static <T> T genericForward(
+      final String webApp, final HttpServletRequest hsr,
+      final Class<T> returnType, final HTTPMethods method,
+      final String targetPath, final Object formParam,
+      final Map<String, String[]> additionalParam) {
-              (hsr == null) ? null : hsr.getPathInfo(), paramMap, formParam);
+              (hsr == null) ? null : hsr.getPathInfo(), paramMap, formParam,
+              getMediaTypeFromHttpServletRequest(hsr, returnType));
-          if (response.getStatus() == 200) {
+          if (response.getStatus() == SC_OK) {
+          if (response.getStatus() == SC_NO_CONTENT) {
+            try {
+              return returnType.getConstructor().newInstance();
+            } catch (RuntimeException | ReflectiveOperationException e) {
+              LOG.error("Cannot create empty entity for {}", returnType, e);
+            }
+          }
-      Map<String, String[]> queryParams, Object formParam) {
+      Map<String, String[]> queryParams, Object formParam, String mediaType) {
-    // I can forward the call in JSON or XML since the Router will convert it
-    // again in Object before send it back to the client
-      builder = webResource.entity(formParam, MediaType.APPLICATION_XML);
-      builder = builder.accept(MediaType.APPLICATION_XML);
+      builder = webResource.entity(formParam, mediaType);
+      builder = builder.accept(mediaType);
-      builder = webResource.accept(MediaType.APPLICATION_XML);
+      builder = webResource.accept(mediaType);
+  /**
+   * Extract from HttpServletRequest the MediaType in output.
+   */
+  protected static <T> String getMediaTypeFromHttpServletRequest(
+      HttpServletRequest request, final Class<T> returnType) {
+    if (request == null) {
+      // By default we return XML for REST call without HttpServletRequest
+      return MediaType.APPLICATION_XML;
+    }
+    // TODO
+    if (!returnType.equals(Response.class)) {
+      return MediaType.APPLICATION_XML;
+    }
+    String header = request.getHeader(HttpHeaders.ACCEPT);
+    if (header == null || header.equals("*")) {
+      // By default we return JSON
+      return MediaType.APPLICATION_JSON;
+    }
+    return header;
+  }
+

MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS44 INS44 MOV44 INS29 INS83 INS83 INS73 INS43 INS42 MOV44 INS44 INS8 INS83 INS83 INS43 INS42 INS83 INS83 INS43 INS42 INS83 INS83 UPD42 INS65 INS42 INS42 UPD42 INS83 INS74 INS42 INS25 INS25 INS60 INS25 INS41 INS42 INS42 INS66 INS43 INS43 INS27 INS8 INS38 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS33 INS41 INS32 INS41 INS42 INS42 INS32 INS27 INS32 INS41 INS40 INS42 INS42 INS57 INS40 INS42 INS42 INS40 INS42 INS33 INS42 INS42 INS45 INS40 INS43 INS42 INS42 INS42 INS42 INS25 INS27 INS8 INS42 INS32 INS42 INS54 INS32 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS41 INS44 INS8 INS32 INS84 INS42 INS21 INS32 INS42 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 DEL34 DEL40 DEL40 DEL40