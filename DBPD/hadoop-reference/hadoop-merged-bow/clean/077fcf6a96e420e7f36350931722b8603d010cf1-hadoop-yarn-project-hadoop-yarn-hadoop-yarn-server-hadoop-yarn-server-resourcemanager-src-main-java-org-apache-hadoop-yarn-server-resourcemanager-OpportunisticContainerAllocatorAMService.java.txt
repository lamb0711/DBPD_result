YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)

+import org.apache.hadoop.yarn.ams.ApplicationMasterServiceContext;
+import org.apache.hadoop.yarn.api.protocolrecords
+    .FinishApplicationMasterRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.FinishApplicationMasterResponse;
-  class OpportunisticAMSProcessor extends DefaultAMSProcessor {
+  class OpportunisticAMSProcessor implements
+      ApplicationMasterServiceProcessor {
-    OpportunisticAMSProcessor(RMContext rmContext, YarnScheduler
-        scheduler) {
-      super(rmContext, scheduler);
+    private ApplicationMasterServiceContext context;
+    private ApplicationMasterServiceProcessor nextProcessor;
+
+    private YarnScheduler getScheduler() {
+      return ((RMContext)context).getScheduler();
-    public RegisterApplicationMasterResponse registerApplicationMaster(
+    public void init(ApplicationMasterServiceContext amsContext,
+        ApplicationMasterServiceProcessor next) {
+      this.context = amsContext;
+      // The AMSProcessingChain guarantees that 'next' is not null.
+      this.nextProcessor = next;
+    }
+
+    @Override
+    public void registerApplicationMaster(
-        RegisterApplicationMasterRequest request) throws IOException {
+        RegisterApplicationMasterRequest request,
+        RegisterApplicationMasterResponse response) throws IOException {
-      return super.registerApplicationMaster(applicationAttemptId, request);
+      nextProcessor.registerApplicationMaster(
+          applicationAttemptId, request, response);
-    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,
-        AllocateRequest request) throws YarnException {
+    public void allocate(ApplicationAttemptId appAttemptId,
+        AllocateRequest request, AllocateResponse response)
+        throws YarnException {
+        ApplicationMasterServiceUtils.addToAllocatedContainers(
+            response, oppContainers);
+      nextProcessor.allocate(appAttemptId, request, response);
+    }
-      AllocateResponse response = super.allocate(appAttemptId, request);
-      if (!oppContainers.isEmpty()) {
-        ApplicationMasterServiceUtils.addToAllocatedContainers(
-            response, oppContainers);
-      }
-      return response;
+    @Override
+    public void finishApplicationMaster(
+        ApplicationAttemptId applicationAttemptId,
+        FinishApplicationMasterRequest request,
+        FinishApplicationMasterResponse response) {
+      nextProcessor.finishApplicationMaster(applicationAttemptId,
+          request, response);
-  protected ApplicationMasterServiceProcessor createProcessor() {
-    return new OpportunisticAMSProcessor(rmContext, rmContext.getScheduler());
-  }
-
-  @Override
+  protected List<ApplicationMasterServiceProcessor> getProcessorList(
+      Configuration conf) {
+    List<ApplicationMasterServiceProcessor> retVal =
+        super.getProcessorList(conf);
+    retVal.add(new OpportunisticAMSProcessor());
+    return retVal;
+  }
+
+  @Override

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 UPD43 INS23 INS23 INS31 INS31 INS74 UPD42 INS44 UPD42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 MOV43 INS42 INS8 INS78 INS83 INS39 INS42 INS39 INS44 INS39 INS42 INS44 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS43 INS43 INS43 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS41 INS42 INS43 UPD42 INS43 INS42 INS21 INS21 MOV43 INS42 INS21 MOV43 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS42 MOV42 INS42 INS74 INS59 INS32 INS42 INS32 INS42 INS42 INS7 INS7 INS32 INS32 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS48 INS42 INS42 MOV14 INS36 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS52 INS42 INS52 INS42 MOV43 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL46 DEL42 DEL42 DEL42 DEL48 DEL41 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL48 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL42 DEL41 DEL42 DEL42 DEL42 DEL32