HDFS-11196. Ozone: Improve logging and error handling in the container layer. Contributed by Anu Engineer.

+import org.apache.hadoop.ozone.container.common.helpers.ContainerMetrics;
-import org.apache.hadoop.ozone.container.common.helpers.ContainerMetrics;
+import org.apache.hadoop.scm.container.common.helpers.StorageContainerException;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
+    .Result.PUT_SMALL_FILE_ERROR;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
+    .Result.GET_SMALL_FILE_ERROR;
+
+
-      ContainerCommandRequestProto msg) throws IOException {
+      ContainerCommandRequestProto msg) {
-    Preconditions.checkNotNull(msg);
-    Type cmdType = msg.getCmdType();
-    metrics.incContainerOpcMetrics(cmdType);
-    if ((cmdType == Type.CreateContainer) ||
-        (cmdType == Type.DeleteContainer) ||
-        (cmdType == Type.ReadContainer) ||
-        (cmdType == Type.ListContainer) ||
-        (cmdType == Type.UpdateContainer)) {
-      resp = containerProcessHandler(msg);
-    }
+    try {
+      Preconditions.checkNotNull(msg);
+      Type cmdType = msg.getCmdType();
+      metrics.incContainerOpcMetrics(cmdType);
+      if ((cmdType == Type.CreateContainer) ||
+          (cmdType == Type.DeleteContainer) ||
+          (cmdType == Type.ReadContainer) ||
+          (cmdType == Type.ListContainer) ||
+          (cmdType == Type.UpdateContainer)) {
+        resp = containerProcessHandler(msg);
+      }
-    if ((cmdType == Type.PutKey) ||
-        (cmdType == Type.GetKey) ||
-        (cmdType == Type.DeleteKey) ||
-        (cmdType == Type.ListKey)) {
-      resp = keyProcessHandler(msg);
-    }
+      if ((cmdType == Type.PutKey) ||
+          (cmdType == Type.GetKey) ||
+          (cmdType == Type.DeleteKey) ||
+          (cmdType == Type.ListKey)) {
+        resp = keyProcessHandler(msg);
+      }
-    if ((cmdType == Type.WriteChunk) ||
-        (cmdType == Type.ReadChunk) ||
-        (cmdType == Type.DeleteChunk)) {
-      resp = chunkProcessHandler(msg);
-    }
+      if ((cmdType == Type.WriteChunk) ||
+          (cmdType == Type.ReadChunk) ||
+          (cmdType == Type.DeleteChunk)) {
+        resp = chunkProcessHandler(msg);
+      }
-    if ((cmdType == Type.PutSmallFile) ||
-        (cmdType == Type.GetSmallFile)) {
-      resp = smallFileHandler(msg);
-    }
+      if ((cmdType == Type.PutSmallFile) ||
+          (cmdType == Type.GetSmallFile)) {
+        resp = smallFileHandler(msg);
+      }
-    if (resp != null) {
-      metrics.incContainerOpsLatencies(cmdType,
-                            System.nanoTime() - startNanos);
-      return resp;
-    }
+      if (resp != null) {
+        metrics.incContainerOpsLatencies(cmdType,
+            System.nanoTime() - startNanos);
+        return resp;
+      }
-    return ContainerUtils.unsupportedRequest(msg);
+      return ContainerUtils.unsupportedRequest(msg);
+    } catch (StorageContainerException e) {
+      // This useful since the trace ID will allow us to correlate failures.
+      return ContainerUtils.logAndReturnError(LOG, e, msg);
+    } catch (IllegalStateException | NullPointerException e) {
+      return ContainerUtils.logAndReturnError(LOG, e, msg);
+    }
+
-   * @throws IOException
+   * @throws StorageContainerException
-      ContainerCommandRequestProto msg) throws IOException {
+      ContainerCommandRequestProto msg) throws StorageContainerException {
-   * @throws IOException
+   * @throws StorageContainerException
-      ContainerCommandRequestProto msg) throws IOException {
+      ContainerCommandRequestProto msg) throws StorageContainerException {
-   * @throws IOException
+   * @throws StorageContainerException
-      ContainerCommandRequestProto msg) throws IOException {
+      ContainerCommandRequestProto msg) throws StorageContainerException {
-      ContainerCommandRequestProto msg) throws IOException {
+      ContainerCommandRequestProto msg) throws StorageContainerException {
-
-   * @throws IOException
+   * @throws StorageContainerException
-      ContainerCommandRequestProto msg) throws IOException {
+      ContainerCommandRequestProto msg) throws StorageContainerException {
+    try {
-    Pipeline pipeline =
-        Pipeline.getFromProtoBuf(msg.getPutSmallFile().getKey().getPipeline());
-    Preconditions.checkNotNull(pipeline);
-    KeyData keyData = KeyData.getFromProtoBuf(msg.getPutSmallFile().getKey()
-        .getKeyData());
-    ChunkInfo chunkInfo = ChunkInfo.getFromProtoBuf(msg.getPutSmallFile()
-        .getChunkInfo());
-    byte[] data = msg.getPutSmallFile().getData().toByteArray();
+      Pipeline pipeline =
+          Pipeline.getFromProtoBuf(msg.getPutSmallFile()
+              .getKey().getPipeline());
-    metrics.incContainerBytesStats(Type.PutSmallFile, data.length);
-    this.containerManager.getChunkManager().writeChunk(pipeline, keyData
-        .getKeyName(), chunkInfo, data);
-    List<ContainerProtos.ChunkInfo> chunks = new LinkedList<>();
-    chunks.add(chunkInfo.getProtoBufMessage());
-    keyData.setChunks(chunks);
-    this.containerManager.getKeyManager().putKey(pipeline, keyData);
-    return FileUtils.getPutFileResponse(msg);
+      Preconditions.checkNotNull(pipeline);
+      KeyData keyData = KeyData.getFromProtoBuf(msg.getPutSmallFile().getKey()
+          .getKeyData());
+      ChunkInfo chunkInfo = ChunkInfo.getFromProtoBuf(msg.getPutSmallFile()
+          .getChunkInfo());
+      byte[] data = msg.getPutSmallFile().getData().toByteArray();
+
+      metrics.incContainerBytesStats(Type.PutSmallFile, data.length);
+      this.containerManager.getChunkManager().writeChunk(pipeline, keyData
+          .getKeyName(), chunkInfo, data);
+      List<ContainerProtos.ChunkInfo> chunks = new LinkedList<>();
+      chunks.add(chunkInfo.getProtoBufMessage());
+      keyData.setChunks(chunks);
+      this.containerManager.getKeyManager().putKey(pipeline, keyData);
+      return FileUtils.getPutFileResponse(msg);
+    } catch (IOException e) {
+      throw new StorageContainerException("Put Small File Failed.", e,
+          PUT_SMALL_FILE_ERROR);
+    }
+   * @throws StorageContainerException
-      ContainerCommandRequestProto msg) throws IOException {
+      ContainerCommandRequestProto msg) throws StorageContainerException {
-    Pipeline pipeline =
-        Pipeline.getFromProtoBuf(msg.getGetSmallFile().getKey().getPipeline());
-    long bytes = 0;
-    Preconditions.checkNotNull(pipeline);
-    KeyData keyData = KeyData.getFromProtoBuf(msg.getGetSmallFile()
-        .getKey().getKeyData());
-    KeyData data = this.containerManager.getKeyManager().getKey(keyData);
-    ContainerProtos.ChunkInfo c = null;
-    for (ContainerProtos.ChunkInfo chunk : data.getChunks()) {
-      bytes += chunk.getSerializedSize();
-      ByteString current =
-          ByteString.copyFrom(this.containerManager.getChunkManager().readChunk(
-              pipeline, keyData.getKeyName(), ChunkInfo.getFromProtoBuf(
-                  chunk)));
-      dataBuf = dataBuf.concat(current);
-      c = chunk;
-    }
-    metrics.incContainerBytesStats(Type.GetSmallFile,  bytes);
-    return FileUtils.getGetSmallFileResponse(msg, dataBuf.toByteArray(),
-        ChunkInfo.getFromProtoBuf(c));
-  }
+    try {
+      Pipeline pipeline =
+          Pipeline.getFromProtoBuf(msg.getGetSmallFile()
+              .getKey().getPipeline());
+      long bytes = 0;
+      Preconditions.checkNotNull(pipeline);
+      KeyData keyData = KeyData.getFromProtoBuf(msg.getGetSmallFile()
+          .getKey().getKeyData());
+      KeyData data = this.containerManager.getKeyManager().getKey(keyData);
+      ContainerProtos.ChunkInfo c = null;
+      for (ContainerProtos.ChunkInfo chunk : data.getChunks()) {
+        bytes += chunk.getSerializedSize();
+        ByteString current =
+            ByteString.copyFrom(this.containerManager.getChunkManager()
+                .readChunk(
+                    pipeline, keyData.getKeyName(), ChunkInfo.getFromProtoBuf(
+                        chunk)));
+        dataBuf = dataBuf.concat(current);
+        c = chunk;
+      }
+      metrics.incContainerBytesStats(Type.GetSmallFile, bytes);
+      return FileUtils.getGetSmallFileResponse(msg, dataBuf.toByteArray(),
+          ChunkInfo.getFromProtoBuf(c));
+    } catch (IOException e) {
+      throw new StorageContainerException("Unable to decode protobuf", e,
+          GET_SMALL_FILE_ERROR);
+
+    }
+  }

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS8 UPD43 UPD43 UPD43 INS43 UPD43 UPD43 MOV60 MOV60 INS54 UPD42 UPD42 UPD42 INS42 UPD42 INS54 INS65 UPD42 INS54 MOV8 INS12 INS12 UPD42 UPD42 UPD42 UPD42 INS8 INS12 INS42 INS8 INS12 INS44 INS8 INS44 INS8 MOV60 MOV21 MOV60 MOV60 MOV60 MOV21 MOV21 MOV60 MOV21 MOV21 MOV21 MOV41 INS44 INS8 MOV60 MOV60 MOV21 MOV60 MOV60 MOV60 MOV70 MOV21 MOV41 INS44 INS8 INS43 INS42 INS41 INS84 INS42 INS41 INS43 INS42 INS53 MOV43 INS42 INS53 INS42 INS32 INS43 INS43 INS32 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 DEL43