Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1566100 13f79535-47bb-0310-9956-ffa450edef68

+   * Checks if a string is a valid path component. For instance, components
+   * cannot contain a ":" or "/", and cannot be equal to a reserved component
+   * like ".snapshot".
+   * <p>
+   * The primary use of this method is for validating paths when loading the
+   * FSImage. During normal NN operation, paths are sometimes allowed to
+   * contain reserved components.
+   * 
+   * @return If component is valid
+   */
+  public static boolean isValidNameForComponent(String component) {
+    if (component.equals(".") ||
+        component.equals("..") ||
+        component.indexOf(":") >= 0 ||
+        component.indexOf("/") >= 0) {
+      return false;
+    }
+    return !isReservedPathComponent(component);
+  }
+
+
+  /**
+   * Returns if the component is reserved.
+   * 
+   * <p>
+   * Note that some components are only reserved under certain directories, e.g.
+   * "/.reserved" is reserved, while "/hadoop/.reserved" is not.
+   * 
+   * @param component
+   * @return if the component is reserved
+   */
+  public static boolean isReservedPathComponent(String component) {
+    for (String reserved : HdfsConstants.RESERVED_PATH_COMPONENTS) {
+      if (component.equals(reserved)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
-  
+
+  /**
+   * Converts a list of path components into a path using Path.SEPARATOR.
+   * 
+   * @param components Path components
+   * @return Combined path as a UTF-8 string
+   */
+  public static String strings2PathString(String[] components) {
+    if (components.length == 0) {
+      return "";
+    }
+    if (components.length == 1) {
+      if (components[0] == null || components[0].isEmpty()) {
+        return Path.SEPARATOR;
+      }
+    }
+    return Joiner.on(Path.SEPARATOR).join(components);
+  }
+
-    String httpPolicy = conf.get(DFSConfigKeys.DFS_HTTP_POLICY_KEY,
-        DFSConfigKeys.DFS_HTTP_POLICY_DEFAULT);
-
-    HttpConfig.Policy policy = HttpConfig.Policy.fromString(httpPolicy);
-
-    if (policy == HttpConfig.Policy.HTTP_ONLY) {
-      boolean httpsEnabled = conf.getBoolean(
-          DFSConfigKeys.DFS_HTTPS_ENABLE_KEY,
+    String policyStr = conf.get(DFSConfigKeys.DFS_HTTP_POLICY_KEY);
+    if (policyStr == null) {
+      boolean https = conf.getBoolean(DFSConfigKeys.DFS_HTTPS_ENABLE_KEY,
-      boolean hadoopSslEnabled = conf.getBoolean(
+      boolean hadoopSsl = conf.getBoolean(
-      if (hadoopSslEnabled) {
+      if (hadoopSsl) {
-            + " is deprecated. Please use "
-            + DFSConfigKeys.DFS_HTTPS_ENABLE_KEY + ".");
-        policy = HttpConfig.Policy.HTTPS_ONLY;
-      } else if (httpsEnabled) {
-        LOG.warn(DFSConfigKeys.DFS_HTTPS_ENABLE_KEY
-            + " is deprecated. Please use "
-            + DFSConfigKeys.DFS_HTTPS_ENABLE_KEY + ".");
-        policy = HttpConfig.Policy.HTTP_AND_HTTPS;
+            + " is deprecated. Please use " + DFSConfigKeys.DFS_HTTP_POLICY_KEY
+            + ".");
+      if (https) {
+        LOG.warn(DFSConfigKeys.DFS_HTTPS_ENABLE_KEY
+            + " is deprecated. Please use " + DFSConfigKeys.DFS_HTTP_POLICY_KEY
+            + ".");
+      }
+
+      return (hadoopSsl || https) ? HttpConfig.Policy.HTTP_AND_HTTPS
+          : HttpConfig.Policy.HTTP_ONLY;
+    }
+
+    HttpConfig.Policy policy = HttpConfig.Policy.fromString(policyStr);
+    if (policy == null) {
+      throw new HadoopIllegalArgumentException("Unregonized value '"
+          + policyStr + "' for " + DFSConfigKeys.DFS_HTTP_POLICY_KEY);

INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS43 INS42 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS70 INS41 INS65 INS65 INS65 INS42 INS5 INS42 INS25 INS25 INS41 INS60 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS27 INS8 INS38 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS44 INS40 INS8 INS9 INS66 INS42 INS66 INS66 INS43 INS85 INS27 INS8 INS27 INS8 INS32 MOV43 INS59 INS27 INS8 INS27 INS27 INS41 INS32 INS43 INS42 INS25 INS42 INS40 INS34 INS41 INS40 INS34 INS25 INS32 INS42 INS42 UPD42 UPD42 INS33 INS25 INS25 INS41 INS42 INS32 INS42 INS33 INS53 INS32 INS32 INS27 INS32 INS34 INS9 INS42 INS42 INS42 INS32 INS8 INS45 INS27 INS8 INS42 INS42 INS40 UPD42 MOV42 MOV8 UPD42 MOV42 INS8 INS16 INS40 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS34 INS42 INS42 INS45 INS42 INS42 INS42 INS41 INS27 INS32 INS41 UPD42 UPD42 MOV21 INS36 INS40 INS40 INS43 INS27 INS42 INS42 INS45 INS9 INS2 INS33 INS2 INS42 INS40 INS27 INS42 INS45 INS42 INS45 INS40 INS42 INS34 INS42 INS34 INS42 INS42 UPD40 UPD40 DEL40 DEL42 DEL40 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL40 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL25