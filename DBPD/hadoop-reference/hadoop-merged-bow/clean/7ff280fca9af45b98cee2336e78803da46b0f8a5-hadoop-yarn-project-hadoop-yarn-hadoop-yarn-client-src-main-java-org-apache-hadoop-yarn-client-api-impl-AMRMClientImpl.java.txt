YARN-1509. Make AMRMClient support send increase container request and get increased/decreased containers. (Meng Ding via wangda)

+import java.util.AbstractMap.SimpleEntry;
+import org.apache.hadoop.yarn.api.records.Container;
+import org.apache.hadoop.yarn.api.records.ContainerResourceChangeRequest;
+import org.apache.hadoop.yarn.util.resource.Resources;
-  
-  
+
+
-    if(mem0 <= mem1 && cpu0 <= cpu1) { 
-      return true;
-    }
-    return false; 
+    return (mem0 <= mem1 && cpu0 <= cpu1);
-  // pendingRelease holds history or release requests.request is removed only if
-  // RM sends completedContainer.
+  // pendingRelease holds history of release requests.
+  // request is removed only if RM sends completedContainer.
-  
+  // change map holds container resource change requests between two allocate()
+  // calls, and are cleared after each successful allocate() call.
+  protected final Map<ContainerId, SimpleEntry<Container, Resource>> change =
+      new HashMap<>();
+  // pendingChange map holds history of container resource change requests in
+  // case AM needs to reregister with the ResourceManager.
+  // Change requests are removed from this map if RM confirms the change
+  // through allocate response, or if RM confirms that the container has been
+  // completed.
+  protected final Map<ContainerId, SimpleEntry<Container, Resource>>
+      pendingChange = new HashMap<>();
+
-    
+    Map<ContainerId, SimpleEntry<Container, Resource>> oldChange =
+        new HashMap<>();
+        List<ContainerResourceChangeRequest> increaseList = new ArrayList<>();
+        List<ContainerResourceChangeRequest> decreaseList = new ArrayList<>();
+        // Save the current change for recovery
+        oldChange.putAll(change);
+        for (Map.Entry<ContainerId, SimpleEntry<Container, Resource>> entry :
+            change.entrySet()) {
+          Container container = entry.getValue().getKey();
+          Resource original = container.getResource();
+          Resource target = entry.getValue().getValue();
+          if (Resources.fitsIn(target, original)) {
+            // This is a decrease request
+            decreaseList.add(ContainerResourceChangeRequest.newInstance(
+                container.getId(), target));
+          } else {
+            // This is an increase request
+            increaseList.add(ContainerResourceChangeRequest.newInstance(
+                container.getId(), target));
+          }
+        }
+        change.clear();
-              askList, releaseList, blacklistRequest);
-        // clear blacklistAdditions and blacklistRemovals before 
+                askList, releaseList, blacklistRequest,
+                    increaseList, decreaseList);
+        // clear blacklistAdditions and blacklistRemovals before
+          change.putAll(this.pendingChange);
+        if (!pendingChange.isEmpty()) {
+          List<ContainerStatus> completed =
+              allocateResponse.getCompletedContainersStatuses();
+          List<Container> changed = new ArrayList<>();
+          changed.addAll(allocateResponse.getIncreasedContainers());
+          changed.addAll(allocateResponse.getDecreasedContainers());
+          // remove all pending change requests that belong to the completed
+          // containers
+          for (ContainerStatus status : completed) {
+            ContainerId containerId = status.getContainerId();
+            pendingChange.remove(containerId);
+          }
+          // remove all pending change requests that have been satisfied
+          if (!changed.isEmpty()) {
+            removePendingChangeRequests(changed);
+          }
+        }
-          
+          // change requests could have been added during the allocate call.
+          // Those are the newest requests which take precedence
+          // over requests cached in the oldChange map.
+          //
+          // Only insert entries from the cached oldChange map
+          // that do not exist in the current change map:
+          for (Map.Entry<ContainerId, SimpleEntry<Container, Resource>> entry :
+              oldChange.entrySet()) {
+            ContainerId oldContainerId = entry.getKey();
+            Container oldContainer = entry.getValue().getKey();
+            Resource oldResource = entry.getValue().getValue();
+            if (change.get(oldContainerId) == null) {
+              change.put(
+                  oldContainerId, new SimpleEntry<>(oldContainer, oldResource));
+            }
+          }
+  protected void removePendingChangeRequests(
+      List<Container> changedContainers) {
+    for (Container changedContainer : changedContainers) {
+      ContainerId containerId = changedContainer.getId();
+      if (pendingChange.get(containerId) == null) {
+        continue;
+      }
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("RM has confirmed changed resource allocation for "
+            + "container " + containerId + ". Current resource allocation:"
+            + changedContainer.getResource()
+            + ". Remove pending change request:"
+            + pendingChange.get(containerId).getValue());
+      }
+      pendingChange.remove(containerId);
+    }
+  }
+
+  public synchronized void requestContainerResourceChange(
+      Container container, Resource capability) {
+    validateContainerResourceChangeRequest(
+        container.getId(), container.getResource(), capability);
+    if (change.get(container.getId()) == null) {
+      change.put(container.getId(),
+          new SimpleEntry<>(container, capability));
+    } else {
+      change.get(container.getId()).setValue(capability);
+    }
+    if (pendingChange.get(container.getId()) == null) {
+      pendingChange.put(container.getId(),
+          new SimpleEntry<>(container, capability));
+    } else {
+      pendingChange.get(container.getId()).setValue(capability);
+    }
+  }
+
+  @Override
+    pendingChange.remove(containerId);
-  
+
+  private void validateContainerResourceChangeRequest(
+      ContainerId containerId, Resource original, Resource target) {
+    Preconditions.checkArgument(containerId != null,
+        "ContainerId cannot be null");
+    Preconditions.checkArgument(original != null,
+        "Original resource capability cannot be null");
+    Preconditions.checkArgument(!Resources.equals(Resources.none(), original)
+            && Resources.fitsIn(Resources.none(), original),
+        "Original resource capability must be greater than 0");
+    Preconditions.checkArgument(target != null,
+        "Target resource capability cannot be null");
+    Preconditions.checkArgument(!Resources.equals(Resources.none(), target)
+            && Resources.fitsIn(Resources.none(), target),
+        "Target resource capability must be greater than 0");
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 MOV41 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS74 INS42 INS14 INS60 INS74 INS42 INS70 INS42 INS43 INS42 INS43 INS42 INS21 INS25 INS25 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS36 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS42 INS43 INS43 INS43 INS74 INS74 INS59 INS43 INS43 INS44 INS42 INS8 INS42 INS42 INS32 INS27 INS8 INS8 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 MOV27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS14 INS42 INS42 INS43 INS42 INS60 INS25 INS25 INS21 INS42 INS32 INS32 INS42 INS32 INS33 INS21 INS21 INS32 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS43 INS59 INS27 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS33 INS42 INS33 INS38 INS32 INS42 INS33 INS38 INS32 INS42 INS42 INS42 INS43 INS60 INS60 INS21 INS70 INS21 INS25 INS42 INS42 INS32 INS32 INS33 INS18 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS74 INS59 INS74 INS59 INS32 INS44 INS32 INS8 INS32 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS42 INS42 INS32 INS60 INS60 INS21 INS21 INS70 INS25 INS70 INS42 INS42 INS27 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS43 INS43 INS74 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS21 INS42 INS42 INS74 INS59 INS74 INS59 INS32 INS32 INS44 INS42 INS8 INS38 INS8 INS44 INS32 INS8 INS27 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS43 INS43 INS40 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS21 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS60 INS21 INS32 INS21 INS74 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS32 INS43 INS43 INS74 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS52 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS74 INS42 INS42 INS43 INS42 DEL9 DEL8 DEL25 DEL9 DEL41