YARN-7242. Support to specify values of different resource types in DistributedShell for easier testing. Contributed by Gergely Nov√°k.

+import com.google.common.base.Joiner;
+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.api.records.ResourceTypeInfo;
+import org.apache.hadoop.yarn.exceptions.ResourceNotFoundException;
+import org.apache.hadoop.yarn.util.UnitsConversionUtil;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
-
+  // Amount of resources to request to run the App Master
+  private Map<String, Long> amResources = new HashMap<>();
+  // Amt. of resources to request for container
+  // in which shell script will be executed
+  private Map<String, Long> containerResources = new HashMap<>();
+    this.conf.setBoolean(
+        YarnConfiguration.YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER, true);
-    opts.addOption("master_vcores", true, "Amount of virtual cores to be requested to run the application master");
+    opts.addOption("master_vcores", true, "Amount of virtual cores " +
+        "to be requested to run the application master");
+    opts.addOption("master_resources", true, "Amount of resources " +
+        "to be requested to run the application master. " +
+        "Specified as resource type=value pairs separated by commas." +
+        "E.g. -master_resources memory-mb=512,vcores=2");
-    opts.addOption("container_memory", true, "Amount of memory in MB to be requested to run the shell command");
-    opts.addOption("container_vcores", true, "Amount of virtual cores to be requested to run the shell command");
+    opts.addOption("container_memory", true, "Amount of memory in MB " +
+        "to be requested to run the shell command");
+    opts.addOption("container_vcores", true, "Amount of virtual cores " +
+        "to be requested to run the shell command");
+    opts.addOption("container_resources", true, "Amount of resources " +
+        "to be requested to run the shell command. " +
+        "Specified as resource type=value pairs separated by commas. " +
+        "E.g. -container_resources memory-mb=256,vcores=1");
+    if (cliParser.hasOption("master_resources")) {
+      Map<String, Long> masterResources =
+          parseResourcesString(cliParser.getOptionValue("master_resources"));
+      for (Map.Entry<String, Long> entry : masterResources.entrySet()) {
+        if (entry.getKey().equals(ResourceInformation.MEMORY_URI)) {
+          amMemory = entry.getValue();
+        } else if (entry.getKey().equals(ResourceInformation.VCORES_URI)) {
+          amVCores = entry.getValue().intValue();
+        } else {
+          amResources.put(entry.getKey(), entry.getValue());
+        }
+      }
+    }
+    if (cliParser.hasOption("container_resources")) {
+      Map<String, Long> resources =
+          parseResourcesString(cliParser.getOptionValue("container_resources"));
+      for (Map.Entry<String, Long> entry : resources.entrySet()) {
+        if (entry.getKey().equals(ResourceInformation.MEMORY_URI)) {
+          containerMemory = entry.getValue();
+        } else if (entry.getKey().equals(ResourceInformation.VCORES_URI)) {
+          containerVirtualCores = entry.getValue().intValue();
+        } else {
+          containerResources.put(entry.getKey(), entry.getValue());
+        }
+      }
+    }
-    setAMResourceCapability(appContext, amMemory, amVCores, amResourceProfile,
-        amPriority, profiles);
-    setContainerResources(containerMemory, containerVirtualCores, profiles);
+    List<ResourceTypeInfo> resourceTypes = yarnClient.getResourceTypeInfo();
+    setAMResourceCapability(appContext, profiles, resourceTypes);
+    setContainerResources(profiles, resourceTypes);
+    if (!containerResources.isEmpty()) {
+      Joiner.MapJoiner joiner = Joiner.on(',').withKeyValueSeparator("=");
+      vargs.add("--container_resources " + joiner.join(containerResources));
+    }
-      long memory, int vcores, String profile, int priority,
-      Map<String, Resource> profiles) throws IllegalArgumentException {
-    if (memory < -1 || memory == 0) {
+      Map<String, Resource> profiles, List<ResourceTypeInfo> resourceTypes)
+      throws IllegalArgumentException, IOException, YarnException {
+    if (amMemory < -1 || amMemory == 0) {
-          + " application master, exiting. Specified memory=" + memory);
+          + " application master, exiting. Specified memory=" + amMemory);
-    if (vcores < -1 || vcores == 0) {
+    if (amVCores < -1 || amVCores == 0) {
-          + " application master, exiting. Specified virtual cores=" + vcores);
+          + " application master, exiting. " +
+          "Specified virtual cores=" + amVCores);
-    String tmp = profile;
-    if (profile.isEmpty()) {
+    String tmp = amResourceProfile;
+    if (amResourceProfile.isEmpty()) {
-          .add(ResourceRequest.newInstance(Priority.newInstance(priority), "*",
-              Resources.clone(Resources.none()), 1));
+          .add(ResourceRequest.newInstance(Priority.newInstance(amPriority),
+              "*", Resources.clone(Resources.none()), 1));
+
-    // set amMemory because it's used to set Xmx param
-    if (profiles == null) {
-      amMemory = memory == -1 ? DEFAULT_AM_MEMORY : memory;
-      amVCores = vcores == -1 ? DEFAULT_AM_VCORES : vcores;
-      capability.setMemorySize(amMemory);
-      capability.setVirtualCores(amVCores);
-    } else {
-      amMemory = memory == -1 ? profiles.get(tmp).getMemorySize() : memory;
-      amVCores = vcores == -1 ? profiles.get(tmp).getVirtualCores() : vcores;
-      capability.setMemorySize(memory);
-      capability.setVirtualCores(vcores);
+
+    validateResourceTypes(amResources.keySet(), resourceTypes);
+    for (Map.Entry<String, Long> entry : amResources.entrySet()) {
+      capability.setResourceValue(entry.getKey(), entry.getValue());
+    // set amMemory because it's used to set Xmx param
+    if (amMemory == -1) {
+      amMemory = (profiles == null) ? DEFAULT_AM_MEMORY :
+          profiles.get(tmp).getMemorySize();
+    }
+    if (amVCores == -1) {
+      amVCores = (profiles == null) ? DEFAULT_AM_VCORES :
+          profiles.get(tmp).getVirtualCores();
+    }
+    capability.setMemorySize(amMemory);
+    capability.setVirtualCores(amVCores);
-  private void setContainerResources(long memory, int vcores,
-      Map<String, Resource> profiles) throws IllegalArgumentException {
-    if (memory < -1 || memory == 0) {
-      throw new IllegalArgumentException(
-          "Container memory '" + memory + "' has to be greated than 0");
+  private void setContainerResources(Map<String, Resource> profiles,
+      List<ResourceTypeInfo> resourceTypes) throws IllegalArgumentException {
+    if (containerMemory < -1 || containerMemory == 0) {
+      throw new IllegalArgumentException("Container memory '" +
+          containerMemory + "' has to be greated than 0");
-    if (vcores < -1 || vcores == 0) {
-      throw new IllegalArgumentException(
-          "Container vcores '" + vcores + "' has to be greated than 0");
+    if (containerVirtualCores < -1 || containerVirtualCores == 0) {
+      throw new IllegalArgumentException("Container vcores '" +
+          containerVirtualCores + "' has to be greated than 0");
+    validateResourceTypes(containerResources.keySet(), resourceTypes);
-      containerMemory = memory == -1 ? DEFAULT_CONTAINER_MEMORY : memory;
-      containerVirtualCores = vcores == -1 ? DEFAULT_CONTAINER_VCORES : vcores;
+      containerMemory = containerMemory == -1 ?
+          DEFAULT_CONTAINER_MEMORY : containerMemory;
+      containerVirtualCores = containerVirtualCores == -1 ?
+          DEFAULT_CONTAINER_VCORES : containerVirtualCores;
+
+  private void validateResourceTypes(Iterable<String> resourceNames,
+      List<ResourceTypeInfo> resourceTypes) {
+    for (String resourceName : resourceNames) {
+      if (!resourceTypes.stream().anyMatch(e ->
+          e.getName().equals(resourceName))) {
+        throw new ResourceNotFoundException("Unknown resource: " +
+            resourceName);
+      }
+    }
+  }
+
+  static Map<String, Long> parseResourcesString(String resourcesStr) {
+    Map<String, Long> resources = new HashMap<>();
+
+    // Ignore the grouping "[]"
+    if (resourcesStr.startsWith("[")) {
+      resourcesStr = resourcesStr.substring(1);
+    }
+    if (resourcesStr.endsWith("]")) {
+      resourcesStr = resourcesStr.substring(0, resourcesStr.length());
+    }
+
+    for (String resource : resourcesStr.trim().split(",")) {
+      resource = resource.trim();
+      if (!resource.matches("^[^=]+=\\d+\\s?\\w*$")) {
+        throw new IllegalArgumentException("\"" + resource + "\" is not a " +
+            "valid resource type/amount pair. " +
+            "Please provide key=amount pairs separated by commas.");
+      }
+      String[] splits = resource.split("=");
+      String key = splits[0], value = splits[1];
+      String units = ResourceUtils.getUnits(value);
+      String valueWithoutUnit = value.substring(
+          0, value.length() - units.length()).trim();
+      Long resourceValue = Long.valueOf(valueWithoutUnit);
+      if (!units.isEmpty()) {
+        resourceValue = UnitsConversionUtil.convert(units, "Mi", resourceValue);
+      }
+      if (key.equals("memory")) {
+        key = ResourceInformation.MEMORY_URI;
+      }
+      resources.put(key, resourceValue);
+    }
+    return resources;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 MOV44 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS74 INS59 INS43 INS43 INS83 MOV39 MOV42 MOV44 INS44 MOV43 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS21 INS21 INS21 INS25 INS25 INS60 INS21 INS21 INS25 INS74 INS42 INS42 INS42 MOV21 INS70 INS25 INS25 MOV21 MOV21 INS74 UPD42 MOV42 MOV25 MOV25 INS21 INS25 INS74 INS42 INS74 INS42 INS70 INS43 INS43 INS43 INS43 INS42 INS60 INS25 INS25 INS70 INS41 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS32 INS32 INS32 INS32 INS8 INS32 INS8 INS74 INS59 INS32 INS32 INS38 INS8 INS43 INS43 INS44 INS32 INS8 INS27 INS8 INS27 INS8 INS43 INS43 INS32 MOV27 MOV8 MOV21 INS43 INS43 INS43 INS43 MOV44 INS42 INS8 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS8 INS32 INS8 INS44 INS32 INS8 INS42 INS43 INS43 INS22 INS42 INS40 INS9 INS27 INS42 INS42 INS45 INS9 INS27 INS27 INS27 INS42 INS42 INS45 INS9 INS27 INS42 INS42 INS45 INS60 INS70 INS42 INS42 INS45 INS60 INS70 INS43 INS43 INS42 INS32 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS60 MOV21 INS42 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS74 INS42 INS42 INS42 MOV21 INS42 MOV38 MOV21 INS42 MOV38 MOV21 INS42 INS42 UPD27 MOV27 UPD27 MOV27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS25 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS45 INS21 INS42 INS42 INS45 MOV21 INS43 INS42 INS32 INS42 INS45 INS21 INS25 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS21 INS42 INS42 INS52 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS74 INS59 INS44 INS32 INS8 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS59 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS43 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS38 INS8 INS42 INS42 INS42 INS74 INS7 INS42 INS42 INS42 INS7 INS38 INS8 INS5 INS59 INS43 INS59 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS38 INS8 INS32 INS8 INS32 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS25 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS25 INS40 INS42 INS32 UPD42 INS42 INS27 MOV34 MOV43 MOV43 INS40 INS42 INS42 UPD42 INS32 INS32 MOV32 MOV43 MOV43 UPD42 UPD42 INS32 INS53 INS43 INS42 INS32 UPD42 INS32 INS42 INS32 INS32 INS53 INS43 INS85 INS42 INS32 INS42 INS42 INS2 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 MOV21 INS42 INS42 INS45 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS32 INS8 INS25 INS32 INS42 INS45 INS45 INS32 UPD42 UPD45 INS45 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS36 INS42 INS36 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS86 INS14 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS45 INS14 INS42 INS42 INS42 INS45 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS45 INS40 INS42 INS42 INS32 INS42 INS40 INS21 INS32 INS8 INS8 INS42 INS42 INS45 INS40 INS42 INS42 INS32 INS42 INS40 INS21 INS32 INS8 INS8 INS42 INS42 INS13 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS27 MOV27 UPD42 UPD42 INS42 INS42 INS59 INS32 INS43 INS27 INS42 INS42 INS43 INS27 INS42 INS42 INS34 INS27 UPD42 INS32 INS42 INS40 INS42 INS42 INS7 INS32 INS42 INS40 INS21 INS21 INS42 INS42 INS7 INS32 INS42 INS40 INS21 INS21 INS42 INS33 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS45 INS45 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS7 INS32 INS42 INS32 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL45 DEL45 DEL45 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL42 DEL8 DEL25 DEL42 DEL27 DEL42 DEL27 DEL42 DEL27 DEL42 DEL42 DEL16 DEL42 DEL27 DEL42 DEL42 DEL16 DEL83 DEL39 DEL42 DEL44 DEL39 DEL44 DEL8 DEL25 DEL8 DEL31