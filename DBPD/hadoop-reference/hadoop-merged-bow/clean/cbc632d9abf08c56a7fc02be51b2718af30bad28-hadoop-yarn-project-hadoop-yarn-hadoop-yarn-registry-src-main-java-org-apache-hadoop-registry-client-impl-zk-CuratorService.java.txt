Merge branch 'yarn-native-services' into trunk

+import org.apache.curator.framework.recipes.cache.TreeCache;
+import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
+import org.apache.curator.framework.recipes.cache.TreeCacheListener;
-import org.apache.hadoop.service.CompositeService;
-import org.apache.hadoop.service.ServiceStateException;
+import org.apache.hadoop.service.CompositeService;
+import org.apache.hadoop.service.ServiceStateException;
-   * the Curator binding
+   * the Curator binding.
-   * Path to the registry root
+   * Path to the registry root.
-   * Security service
+   * Security service.
-   * the connection binding text for messages
+   * the connection binding text for messages.
-   * Security connection diagnostics
+   * Security connection diagnostics.
+   * Registry tree cache.
+   */
+  private TreeCache treeCache;
+
+  /**
-   * @param name service name
+   *
+   * @param name          service name
-   * If null: use this instance
+   *                      If null: use this instance
-   * configuration options from the registry)
+   * configuration options from the registry).
+   *
-   * This is where the security bindings are set up
+   * This is where the security bindings are set up.
+   *
+   *
-   * Close the ZK connection if it is open
+   * Close the ZK connection if it is open.
+
+    if (treeCache != null) {
+      treeCache.close();
+    }
-   * Internal check that a service is in the live state
+   * Internal check that a service is in the live state.
+   *
-          + getServiceState());
+              + getServiceState());
+   *
-   * Get the registry security helper
+   * Get the registry security helper.
+   *
-   * Build the security diagnostics string
+   * Build the security diagnostics string.
+   *
+   *
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Creating CuratorService with connection {}",
+    LOG.info("Creating CuratorService with connection {}",
-    }
+
-      CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();
+      CuratorFrameworkFactory.Builder builder =
+          CuratorFrameworkFactory.builder();
-       .connectionTimeoutMs(connectionTimeout)
-       .sessionTimeoutMs(sessionTimeout)
+          .connectionTimeoutMs(connectionTimeout)
+          .sessionTimeoutMs(sessionTimeout)
-       .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,
-           retryCeiling,
-           retryTimes));
+          .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,
+              retryCeiling,
+              retryTimes));
-           + " " + bindingDiagnosticDetails();
+        + " " + bindingDiagnosticDetails();
-   * Get the binding diagnostics
+   * Get the binding diagnostics.
+   *
-           + " root=\"" + registryRoot + "\""
-           + " " + securityConnectionDiagnostics;
+        + " root=\"" + registryRoot + "\""
+        + " " + securityConnectionDiagnostics;
-   * Create a full path from the registry root and the supplied subdir
+   * Create a full path from the registry root and the supplied subdir.
+   *
+   *
-   * the provider stored in {@link #bindingSource}
+   * the provider stored in {@link #bindingSource}.
-   *
-                            + " " + securityConnectionDiagnostics;
+        + " " + securityConnectionDiagnostics;
-   * the quorum supplied by {@link #buildConnectionString()}
+   * the quorum supplied by {@link #buildConnectionString()}.
+   *
-   * the ZK service
+   * the ZK service.
+   *
-        DEFAULT_REGISTRY_ZK_QUORUM);
+                                  DEFAULT_REGISTRY_ZK_QUORUM);
-   * Create an IOE when an operation fails
-   * @param path path of operation
+   * Create an IOE when an operation fails.
+   *
+   * @param path      path of operation
-   * Create an IOE when an operation fails
-   * @param path path of operation
+   * Create an IOE when an operation fails.
+   *
+   * @param path      path of operation
-          + "; " + securityConnectionDiagnostics,
+              + "; " + securityConnectionDiagnostics,
-    } else if (exception instanceof KeeperException.NoChildrenForEphemeralsException) {
+    } else if (exception instanceof
+        KeeperException.NoChildrenForEphemeralsException) {
-          exception.toString(),
+              exception.toString(),
-   * @param path path to create
-   * @param acl ACL for path -used when creating a new entry
+   * @param path          path to create
+   * @param acl           ACL for path -used when creating a new entry
-   * Stat the file
+   * Stat the file.
+   *
-   * @throws IOException on a failure
+   * @throws IOException           on a failure
-   * Get the ACLs of a path
+   * Get the ACLs of a path.
+   *
-   * Probe for a path existing
+   * Probe for a path existing.
+   *
-   * {@link PathNotFoundException}
+   *                     {@link PathNotFoundException}
-   * Verify a path exists
+   * Verify a path exists.
+   *
-   * Create a directory. It is not an error if it already exists
-   * @param path path to create
-   * @param mode mode for path
+   * Create a directory. It is not an error if it already exists.
+   *
+   * @param path          path to create
+   * @param mode          mode for path
-   * @param acls ACL for path
+   * @param acls          ACL for path
-   * Recursively make a path
+   * Recursively make a path.
+   *
-   * @param acl ACL for path
+   * @param acl  ACL for path
-   * without data
+   * without data.
+   *
-   * Update the data for a path
+   * Update the data for a path.
+   *
-   * Create or update an entry
-   * @param path path
-   * @param data data
-   * @param acl ACL for path -used when creating a new entry
+   * Create or update an entry.
+   *
+   * @param path      path
+   * @param data      data
+   * @param acl       ACL for path -used when creating a new entry
-   * @throws IOException
+   * @throws IOException
-   * It is not an error to delete a path that does not exist
-   * @param path path of operation
-   * @param recursive flag to trigger recursive deletion
+   * It is not an error to delete a path that does not exist.
+   *
+   * @param path               path of operation
+   * @param recursive          flag to trigger recursive deletion
-   * into an async/background operation.
-   * task
+   *                           into an async/background operation.
+   *                           task
-   * List all children of a path
+   * List all children of a path.
+   *
-   * Read data on a path
+   * Read data on a path.
+   *
-   * operation
-   * @return a class to dump the registry
+   * operation.
+   *
+   * @return a class to dump the registry
-   * @param id ID to use
+   *
+   * @param id   ID to use
-   * Clear all write accessors
+   * Clear all write accessors.
-
-   * Any exception raised is swallowed
+   * Any exception raised is swallowed.
+   *
+
+  /**
+   * Registers a listener to path related events.
+   *
+   * @param listener the listener.
+   * @return a handle allowing for the management of the listener.
+   * @throws Exception if registration fails due to error.
+   */
+  public ListenerHandle registerPathListener(final PathListener listener)
+      throws Exception {
+
+    final TreeCacheListener pathChildrenCacheListener =
+        new TreeCacheListener() {
+
+          public void childEvent(CuratorFramework curatorFramework,
+              TreeCacheEvent event)
+              throws Exception {
+            String path = null;
+            if (event != null && event.getData() != null) {
+              path = event.getData().getPath();
+            }
+            assert event != null;
+            switch (event.getType()) {
+            case NODE_ADDED:
+              LOG.info("Informing listener of added node {}", path);
+              listener.nodeAdded(path);
+
+              break;
+
+            case NODE_REMOVED:
+              LOG.info("Informing listener of removed node {}", path);
+              listener.nodeRemoved(path);
+
+              break;
+
+            case NODE_UPDATED:
+              LOG.info("Informing listener of updated node {}", path);
+              listener.nodeAdded(path);
+
+              break;
+
+            default:
+              // do nothing
+              break;
+
+            }
+          }
+        };
+    treeCache.getListenable().addListener(pathChildrenCacheListener);
+
+    return new ListenerHandle() {
+      @Override
+      public void remove() {
+        treeCache.getListenable().removeListener(pathChildrenCacheListener);
+      }
+    };
+
+  }
+
+  // TODO: should caches be stopped and then restarted if need be?
+
+  /**
+   * Create the tree cache that monitors the registry for node addition, update,
+   * and deletion.
+   *
+   * @throws Exception if any issue arises during monitoring.
+   */
+  public void monitorRegistryEntries()
+      throws Exception {
+    String registryPath =
+        getConfig().get(RegistryConstants.KEY_REGISTRY_ZK_ROOT,
+            RegistryConstants.DEFAULT_ZK_REGISTRY_ROOT);
+    treeCache = new TreeCache(curator, registryPath);
+    treeCache.start();
+  }

MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS29 INS83 INS43 INS59 INS29 MOV29 MOV65 MOV65 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS65 INS42 INS42 INS25 MOV21 INS65 INS65 MOV65 MOV65 MOV65 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS42 INS60 INS21 INS41 INS65 INS65 INS42 INS60 INS21 INS21 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 INS27 INS8 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 UPD66 INS66 INS42 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS83 INS43 INS59 INS32 INS14 INS66 INS66 INS42 INS66 INS43 INS59 INS7 INS32 INS42 INS33 INS21 UPD42 INS42 INS42 INS14 INS32 INS42 INS42 INS43 INS1 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS43 INS1 INS42 INS42 INS42 INS31 INS32 INS42 INS40 INS40 INS43 INS42 INS42 INS42 INS42 INS42 INS31 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS21 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS6 INS50 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS27 INS32 INS49 INS21 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS10 INS32 INS42 INS42 INS42 INS42 INS33 INS27 INS27 INS21 INS42 INS33 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS33 INS32 INS33 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29