Merging r1533208 through r1534278 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1534279 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.ref.WeakReference;
+import java.util.LinkedList;
+  /**
+   * Tracks statistics about how many reads, writes, and so forth have been
+   * done in a FileSystem.
+   * 
+   * Since there is only one of these objects per FileSystem, there will 
+   * typically be many threads writing to this object.  Almost every operation
+   * on an open file will involve a write to this object.  In contrast, reading
+   * statistics is done infrequently by most programs, and not at all by others.
+   * Hence, this is optimized for writes.
+   * 
+   * Each thread writes to its own thread-local area of memory.  This removes 
+   * contention and allows us to scale up to many, many threads.  To read
+   * statistics, the reader thread totals up the contents of all of the 
+   * thread-local data areas.
+   */
+    /**
+     * Statistics data.
+     * 
+     * There is only a single writer to thread-local StatisticsData objects.
+     * Hence, volatile is adequate here-- we do not need AtomicLong or similar
+     * to prevent lost updates.
+     * The Java specification guarantees that updates to volatile longs will
+     * be perceived as atomic with respect to other threads, which is all we
+     * need.
+     */
+    private static class StatisticsData {
+      volatile long bytesRead;
+      volatile long bytesWritten;
+      volatile int readOps;
+      volatile int largeReadOps;
+      volatile int writeOps;
+      /**
+       * Stores a weak reference to the thread owning this StatisticsData.
+       * This allows us to remove StatisticsData objects that pertain to
+       * threads that no longer exist.
+       */
+      final WeakReference<Thread> owner;
+
+      StatisticsData(WeakReference<Thread> owner) {
+        this.owner = owner;
+      }
+
+      /**
+       * Add another StatisticsData object to this one.
+       */
+      void add(StatisticsData other) {
+        this.bytesRead += other.bytesRead;
+        this.bytesWritten += other.bytesWritten;
+        this.readOps += other.readOps;
+        this.largeReadOps += other.largeReadOps;
+        this.writeOps += other.writeOps;
+      }
+
+      /**
+       * Negate the values of all statistics.
+       */
+      void negate() {
+        this.bytesRead = -this.bytesRead;
+        this.bytesWritten = -this.bytesWritten;
+        this.readOps = -this.readOps;
+        this.largeReadOps = -this.largeReadOps;
+        this.writeOps = -this.writeOps;
+      }
+
+      @Override
+      public String toString() {
+        return bytesRead + " bytes read, " + bytesWritten + " bytes written, "
+            + readOps + " read ops, " + largeReadOps + " large read ops, "
+            + writeOps + " write ops";
+      }
+    }
+
+    private interface StatisticsAggregator<T> {
+      void accept(StatisticsData data);
+      T aggregate();
+    }
+
-    private AtomicLong bytesRead = new AtomicLong();
-    private AtomicLong bytesWritten = new AtomicLong();
-    private AtomicInteger readOps = new AtomicInteger();
-    private AtomicInteger largeReadOps = new AtomicInteger();
-    private AtomicInteger writeOps = new AtomicInteger();
+
+    /**
+     * rootData is data that doesn't belong to any thread, but will be added
+     * to the totals.  This is useful for making copies of Statistics objects,
+     * and for storing data that pertains to threads that have been garbage
+     * collected.  Protected by the Statistics lock.
+     */
+    private final StatisticsData rootData;
+
+    /**
+     * Thread-local data.
+     */
+    private final ThreadLocal<StatisticsData> threadData;
+    /**
+     * List of all thread-local data areas.  Protected by the Statistics lock.
+     */
+    private LinkedList<StatisticsData> allData;
+
+      this.rootData = new StatisticsData(null);
+      this.threadData = new ThreadLocal<StatisticsData>();
+      this.allData = null;
-     * @param st
-     *          The input Statistics object which is cloned.
+     * @param other    The input Statistics object which is cloned.
-    public Statistics(Statistics st) {
-      this.scheme = st.scheme;
-      this.bytesRead = new AtomicLong(st.bytesRead.longValue());
-      this.bytesWritten = new AtomicLong(st.bytesWritten.longValue());
+    public Statistics(Statistics other) {
+      this.scheme = other.scheme;
+      this.rootData = new StatisticsData(null);
+      other.visitAll(new StatisticsAggregator<Void>() {
+        @Override
+        public void accept(StatisticsData data) {
+          rootData.add(data);
+        }
+
+        public Void aggregate() {
+          return null;
+        }
+      });
+      this.threadData = new ThreadLocal<StatisticsData>();
+    }
+
+    /**
+     * Get or create the thread-local data associated with the current thread.
+     */
+    private StatisticsData getThreadData() {
+      StatisticsData data = threadData.get();
+      if (data == null) {
+        data = new StatisticsData(
+            new WeakReference<Thread>(Thread.currentThread()));
+        threadData.set(data);
+        synchronized(this) {
+          if (allData == null) {
+            allData = new LinkedList<StatisticsData>();
+          }
+          allData.add(data);
+        }
+      }
+      return data;
-      bytesRead.getAndAdd(newBytes);
+      getThreadData().bytesRead += newBytes;
-      bytesWritten.getAndAdd(newBytes);
+      getThreadData().bytesWritten += newBytes;
-      readOps.getAndAdd(count);
+      getThreadData().readOps += count;
-      largeReadOps.getAndAdd(count);
+      getThreadData().largeReadOps += count;
-      writeOps.getAndAdd(count);
+      getThreadData().writeOps += count;
+    }
+
+    /**
+     * Apply the given aggregator to all StatisticsData objects associated with
+     * this Statistics object.
+     *
+     * For each StatisticsData object, we will call accept on the visitor.
+     * Finally, at the end, we will call aggregate to get the final total. 
+     *
+     * @param         The visitor to use.
+     * @return        The total.
+     */
+    private synchronized <T> T visitAll(StatisticsAggregator<T> visitor) {
+      visitor.accept(rootData);
+      if (allData != null) {
+        for (Iterator<StatisticsData> iter = allData.iterator();
+            iter.hasNext(); ) {
+          StatisticsData data = iter.next();
+          visitor.accept(data);
+          if (data.owner.get() == null) {
+            /*
+             * If the thread that created this thread-local data no
+             * longer exists, remove the StatisticsData from our list
+             * and fold the values into rootData.
+             */
+            rootData.add(data);
+            iter.remove();
+          }
+        }
+      }
+      return visitor.aggregate();
-      return bytesRead.get();
+      return visitAll(new StatisticsAggregator<Long>() {
+        private long bytesRead = 0;
+
+        @Override
+        public void accept(StatisticsData data) {
+          bytesRead += data.bytesRead;
+        }
+
+        public Long aggregate() {
+          return bytesRead;
+        }
+      });
-      return bytesWritten.get();
+      return visitAll(new StatisticsAggregator<Long>() {
+        private long bytesWritten = 0;
+
+        @Override
+        public void accept(StatisticsData data) {
+          bytesWritten += data.bytesWritten;
+        }
+
+        public Long aggregate() {
+          return bytesWritten;
+        }
+      });
-      return readOps.get() + largeReadOps.get();
+      return visitAll(new StatisticsAggregator<Integer>() {
+        private int readOps = 0;
+
+        @Override
+        public void accept(StatisticsData data) {
+          readOps += data.readOps;
+          readOps += data.largeReadOps;
+        }
+
+        public Integer aggregate() {
+          return readOps;
+        }
+      });
-      return largeReadOps.get();
+      return visitAll(new StatisticsAggregator<Integer>() {
+        private int largeReadOps = 0;
+
+        @Override
+        public void accept(StatisticsData data) {
+          largeReadOps += data.largeReadOps;
+        }
+
+        public Integer aggregate() {
+          return largeReadOps;
+        }
+      });
-      return writeOps.get();
+      return visitAll(new StatisticsAggregator<Integer>() {
+        private int writeOps = 0;
+
+        @Override
+        public void accept(StatisticsData data) {
+          writeOps += data.writeOps;
+        }
+
+        public Integer aggregate() {
+          return writeOps;
+        }
+      });
+
-      return bytesRead + " bytes read, " + bytesWritten + " bytes written, "
-          + readOps + " read ops, " + largeReadOps + " large read ops, "
-          + writeOps + " write ops";
+      return visitAll(new StatisticsAggregator<String>() {
+        private StatisticsData total = new StatisticsData(null);
+
+        @Override
+        public void accept(StatisticsData data) {
+          total.add(data);
+        }
+
+        public String aggregate() {
+          return total.toString();
+        }
+      });
-    
+
-     * Reset the counts of bytes to 0.
+     * Resets all statistics to 0.
+     *
+     * In order to reset, we add up all the thread-local statistics data, and
+     * set rootData to the negative of that.
+     *
+     * This may seem like a counterintuitive way to reset the statsitics.  Why
+     * can't we just zero out all the thread-local data?  Well, thread-local
+     * data can only be modified by the thread that owns it.  If we tried to
+     * modify the thread-local data from this thread, our modification might get
+     * interleaved with a read-modify-write operation done by the thread that
+     * owns the data.  That would result in our update getting lost.
+     *
+     * The approach used here avoids this problem because it only ever reads
+     * (not writes) the thread-local data.  Both reads and writes to rootData
+     * are done under the lock, so we're free to modify rootData from any thread
+     * that holds the lock.
-      bytesWritten.set(0);
-      bytesRead.set(0);
+      visitAll(new StatisticsAggregator<Void>() {
+        private StatisticsData total = new StatisticsData(null);
+
+        @Override
+        public void accept(StatisticsData data) {
+          total.add(data);
+        }
+
+        public Void aggregate() {
+          total.negate();
+          rootData.add(total);
+          return null;
+        }
+      });

INS26 INS26 INS40 INS40 INS29 INS55 INS55 INS31 INS31 INS31 INS65 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 MOV31 INS83 INS42 INS73 INS31 INS31 INS29 INS83 UPD43 INS29 INS83 INS74 INS29 INS74 INS59 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS73 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS29 INS83 INS74 INS59 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS8 INS42 INS39 INS42 INS44 INS43 INS42 INS65 UPD42 UPD42 INS65 INS43 INS43 UPD42 INS65 INS43 INS43 INS42 INS21 INS21 INS21 UPD42 MOV21 INS21 INS21 INS21 INS65 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS42 INS42 INS74 INS42 INS21 INS25 INS41 INS42 INS42 INS41 INS21 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS65 INS43 INS43 INS42 INS74 INS42 INS21 INS65 INS43 INS42 MOV21 MOV21 INS21 INS21 INS21 INS65 INS21 INS21 INS21 INS21 INS21 INS43 INS42 UPD42 MOV42 INS66 INS66 INS66 INS66 INS66 UPD42 MOV42 INS42 INS66 UPD42 MOV42 INS42 INS7 INS7 INS7 UPD42 UPD66 INS7 INS32 INS7 INS66 INS43 INS59 INS27 INS8 INS42 INS7 INS7 INS7 INS7 INS7 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS43 INS43 INS32 INS27 INS8 INS32 INS32 INS32 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS32 INS66 INS66 INS66 UPD42 MOV42 INS42 INS43 INS43 INS7 INS66 INS42 UPD7 UPD7 INS7 INS7 INS7 INS66 INS7 INS7 INS7 INS7 INS7 UPD42 MOV42 INS22 INS14 INS22 INS14 INS22 INS33 UPD40 INS22 INS14 INS42 INS42 INS14 INS22 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS51 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS24 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 UPD42 MOV42 INS42 INS22 INS42 INS40 INS40 INS22 INS40 INS22 INS40 INS22 INS40 INS22 INS38 INS22 INS38 INS22 INS38 INS22 INS38 INS22 INS38 INS52 INS42 INS43 INS33 INS52 INS42 INS74 INS52 INS42 INS52 INS42 INS43 INS33 INS74 INS1 INS52 INS42 INS74 INS42 INS42 INS7 INS32 INS52 INS8 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS58 INS32 INS8 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS22 INS52 INS42 INS22 INS52 INS42 INS22 INS52 INS42 INS22 INS42 INS43 INS43 INS42 INS43 INS43 INS31 INS31 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS25 INS21 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS74 INS59 INS42 INS42 INS60 INS21 INS25 INS43 INS43 INS23 INS31 INS31 INS43 INS43 INS23 INS31 INS31 INS43 INS43 INS23 INS31 INS31 INS43 INS43 INS23 INS31 INS31 INS43 INS43 INS23 INS31 INS31 INS43 INS43 INS23 INS31 INS31 INS43 INS43 INS23 INS31 INS31 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS44 MOV8 INS83 INS43 INS42 INS8 INS42 INS42 INS43 INS14 INS27 INS8 INS32 INS43 INS43 INS42 INS32 INS43 INS59 INS32 INS27 INS8 INS42 INS42 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 MOV8 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS74 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS33 INS21 INS21 INS42 INS34 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS34 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS34 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS34 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS34 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS42 INS14 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS42 INS14 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS32 INS33 INS43 INS43 INS42 INS42 INS7 INS42 INS42 INS40 INS42 INS32 INS32 INS42 INS7 INS42 INS42 INS7 INS42 INS42 INS7 INS7 INS42 INS42 INS7 INS42 INS42 INS7 INS42 INS43 INS33 INS42 INS32 INS32 INS43 INS33 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS74 INS43 INS43 INS42 INS42 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL83 DEL43 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL43 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL43 DEL14 DEL43 DEL42 DEL43 DEL14 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL34 DEL34