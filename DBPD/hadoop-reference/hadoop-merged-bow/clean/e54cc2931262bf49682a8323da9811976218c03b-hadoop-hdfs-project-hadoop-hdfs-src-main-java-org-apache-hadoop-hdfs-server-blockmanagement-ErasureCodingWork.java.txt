HDFS-9818. Correctly handle EC reconstruction work caused by not enough racks. Contributed by Jing Zhao.

+import org.apache.hadoop.hdfs.protocol.Block;
+import org.apache.hadoop.hdfs.protocol.ExtendedBlock;
+import org.apache.hadoop.hdfs.util.StripedBlockUtil;
+import java.util.ArrayList;
+import java.util.BitSet;
+import java.util.HashMap;
+import java.util.Map;
+  private final String blockPoolId;
-  public ErasureCodingWork(BlockInfo block,
+  public ErasureCodingWork(String blockPoolId, BlockInfo block,
+    this.blockPoolId = blockPoolId;
-    try {
-      // TODO: new placement policy for EC considering multiple writers
-      DatanodeStorageInfo[] chosenTargets = blockplacement.chooseTarget(
-          getBc().getName(), getAdditionalReplRequired(), getSrcNodes()[0],
-          getLiveReplicaStorages(), false, excludedNodes,
-          getBlock().getNumBytes(),
-          storagePolicySuite.getPolicy(getBc().getStoragePolicyID()));
-      setTargets(chosenTargets);
-    } finally {
+    // TODO: new placement policy for EC considering multiple writers
+    DatanodeStorageInfo[] chosenTargets = blockplacement.chooseTarget(
+        getBc().getName(), getAdditionalReplRequired(), getSrcNodes()[0],
+        getLiveReplicaStorages(), false, excludedNodes,
+        getBlock().getNumBytes(),
+        storagePolicySuite.getPolicy(getBc().getStoragePolicyID()));
+    setTargets(chosenTargets);
+  }
+
+  /**
+   * @return true if the current source nodes cover all the internal blocks.
+   * I.e., we only need to have more racks.
+   */
+  private boolean hasAllInternalBlocks() {
+    final BlockInfoStriped block = (BlockInfoStriped) getBlock();
+    if (getSrcNodes().length < block.getRealTotalBlockNum()) {
+      return false;
+    }
+    BitSet bitSet = new BitSet(block.getTotalBlockNum());
+    for (byte index : liveBlockIndicies) {
+      bitSet.set(index);
+    }
+    for (int i = 0; i < block.getRealDataBlockNum(); i++) {
+      if (!bitSet.get(i)) {
+        return false;
+      }
+    }
+    for (int i = block.getDataBlockNum(); i < block.getTotalBlockNum(); i++) {
+      if (!bitSet.get(i)) {
+        return false;
+      }
+    }
+    return true;
+  }
+
+  /**
+   * We have all the internal blocks but not enough racks. Thus we do not need
+   * to do decoding but only simply make an extra copy of an internal block. In
+   * this scenario, use this method to choose the source datanode for simple
+   * replication.
+   * @return The index of the source datanode.
+   */
+  private int chooseSource4SimpleReplication() {
+    Map<String, List<Integer>> map = new HashMap<>();
+    for (int i = 0; i < getSrcNodes().length; i++) {
+      final String rack = getSrcNodes()[i].getNetworkLocation();
+      List<Integer> dnList = map.get(rack);
+      if (dnList == null) {
+        dnList = new ArrayList<>();
+        map.put(rack, dnList);
+      }
+      dnList.add(i);
+    }
+    List<Integer> max = null;
+    for (Map.Entry<String, List<Integer>> entry : map.entrySet()) {
+      if (max == null || entry.getValue().size() > max.size()) {
+        max = entry.getValue();
+      }
+    }
+    assert max != null;
+    return max.get(0);
+  }
+
+  @Override
+  void addTaskToDatanode() {
+    assert getTargets().length > 0;
+    BlockInfoStriped stripedBlk = (BlockInfoStriped) getBlock();
+
+    // if we already have all the internal blocks, but not enough racks,
+    // we only need to replicate one internal block to a new rack
+    if (hasAllInternalBlocks()) {
+      int sourceIndex = chooseSource4SimpleReplication();
+      final byte blockIndex = liveBlockIndicies[sourceIndex];
+      final DatanodeDescriptor source = getSrcNodes()[sourceIndex];
+      final long internBlkLen = StripedBlockUtil.getInternalBlockLength(
+          stripedBlk.getNumBytes(), stripedBlk.getCellSize(),
+          stripedBlk.getDataBlockNum(), blockIndex);
+      final Block targetBlk = new Block(
+          stripedBlk.getBlockId() + blockIndex, internBlkLen,
+          stripedBlk.getGenerationStamp());
+      source.addBlockToBeReplicated(targetBlk, getTargets());
+    } else {
+      getTargets()[0].getDatanodeDescriptor().addBlockToBeErasureCoded(
+          new ExtendedBlock(blockPoolId, stripedBlk),
+          getSrcNodes(), getTargets(), getLiveBlockIndicies(),
+          stripedBlk.getErasureCodingPolicy());

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS44 MOV8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS78 INS39 INS42 INS8 INS42 INS42 INS43 INS42 INS21 INS65 INS60 INS25 INS60 INS70 INS24 INS24 INS41 INS65 INS65 INS60 INS24 INS60 INS70 INS6 INS41 INS42 INS6 INS60 INS25 INS42 INS7 INS66 INS66 INS83 INS43 INS59 INS27 INS8 INS43 INS59 INS44 INS42 INS8 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS9 INS66 INS66 INS66 INS66 INS66 INS74 INS59 INS58 INS27 INS37 INS8 INS74 INS59 INS44 INS32 INS8 INS27 INS32 INS27 INS43 INS59 INS32 INS8 INS8 INS22 INS42 INS42 INS42 INS11 INS22 INS32 INS41 INS42 INS42 INS14 INS39 INS42 INS21 INS39 INS59 INS42 INS32 INS42 INS25 INS39 INS59 INS42 INS32 INS42 INS25 INS43 INS43 INS74 INS42 INS14 INS39 INS59 INS42 INS22 INS42 INS60 INS60 INS25 INS21 INS43 INS43 INS42 INS33 INS74 INS42 INS42 INS42 INS25 INS42 INS33 INS42 INS42 INS34 INS22 INS34 INS42 INS42 INS11 INS42 INS60 INS60 INS60 INS60 INS60 INS21 INS21 INS52 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS9 INS43 INS32 INS32 INS42 INS34 INS42 INS42 INS38 INS8 INS42 INS32 INS42 INS42 INS38 INS8 INS42 INS42 INS43 INS43 INS74 INS42 INS34 INS32 INS42 INS83 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS43 INS74 INS27 INS8 INS32 INS42 INS43 INS32 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS41 INS42 INS42 INS32 INS41 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS40 INS42 INS43 INS43 INS27 INS27 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS2 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS32 INS42 INS14 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS33 INS32 INS32 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS43 INS27 INS42 INS32 INS42 INS2 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 DEL8 DEL54 DEL8