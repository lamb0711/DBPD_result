Merge trunk into HDDS-48

+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;
-import java.util.EnumSet;
-  public ContainerInfo createContainer(String owner)
+  public ContainerWithPipeline createContainer(String owner)
-      ContainerInfo container =
+      ContainerWithPipeline containerWithPipeline =
-      Pipeline pipeline = container.getPipeline();
-      client = xceiverClientManager.acquireClient(pipeline, container.getContainerID());
+      Pipeline pipeline = containerWithPipeline.getPipeline();
+      client = xceiverClientManager.acquireClient(pipeline,
+          containerWithPipeline.getContainerInfo().getContainerID());
-      createContainer(client, container.getContainerID());
-      return container;
+      createContainer(client,
+          containerWithPipeline.getContainerInfo().getContainerID());
+      return containerWithPipeline;
-  public ContainerInfo createContainer(HddsProtos.ReplicationType type,
+  public ContainerWithPipeline createContainer(HddsProtos.ReplicationType type,
-      ContainerInfo container =
+      ContainerWithPipeline containerWithPipeline =
-      Pipeline pipeline = container.getPipeline();
+      Pipeline pipeline = containerWithPipeline.getPipeline();
-          container.getContainerID());
+          containerWithPipeline.getContainerInfo().getContainerID());
-          container.getContainerID());
-      createContainer(client, container.getContainerID());
-      return container;
+          containerWithPipeline.getContainerInfo().getContainerID());
+      createContainer(client,
+          containerWithPipeline.getContainerInfo().getContainerID());
+      return containerWithPipeline;
-   * @param nodeStatuses - A set of criteria that we want the node to have.
+   * @param nodeStatuses - Criteria that we want the node to have.
-  public HddsProtos.NodePool queryNode(EnumSet<HddsProtos.NodeState>
+  public List<HddsProtos.Node> queryNode(HddsProtos.NodeState
-   * Delete the container, this will release any resource it uses.
-   * @param pipeline - Pipeline that represents the container.
-   * @param force - True to forcibly delete the container.
+   * Deletes an existing container.
+   *
+   * @param containerId - ID of the container.
+   * @param pipeline    - Pipeline that represents the container.
+   * @param force       - true to forcibly delete the container.
-  public void deleteContainer(long containerID, Pipeline pipeline, boolean force)
-      throws IOException {
+  public void deleteContainer(long containerId, Pipeline pipeline,
+      boolean force) throws IOException {
-      client = xceiverClientManager.acquireClient(pipeline, containerID);
+      client = xceiverClientManager.acquireClient(pipeline, containerId);
-      ContainerProtocolCalls.deleteContainer(client, containerID, force, traceID);
+      ContainerProtocolCalls
+          .deleteContainer(client, containerId, force, traceID);
-          .deleteContainer(containerID);
+          .deleteContainer(containerId);
-            containerID,
+            containerId,
+   * Delete the container, this will release any resource it uses.
+   * @param containerID - containerID.
+   * @param force - True to forcibly delete the container.
+   * @throws IOException
+   */
+  @Override
+  public void deleteContainer(long containerID, boolean force)
+      throws IOException {
+    ContainerWithPipeline info = getContainerWithPipeline(containerID);
+    deleteContainer(containerID, info.getPipeline(), force);
+  }
+
+  /**
-   * @param pipeline - pipeline that represents the container.
-   * @return ContainerInfo - a message of protobuf which has basic info
-   * of a container.
+   * @param containerID - ID of the container.
+   * @param pipeline    - Pipeline where the container is located.
+   * @return ContainerInfo
+   * Get meta data from an existing container.
+   * @param containerID - ID of the container.
+   * @return ContainerInfo - a message of protobuf which has basic info
+   * of a container.
+   * @throws IOException
+   */
+  @Override
+  public ContainerData readContainer(long containerID) throws IOException {
+    ContainerWithPipeline info = getContainerWithPipeline(containerID);
+    return readContainer(containerID, info.getPipeline());
+  }
+
+  /**
+   * Gets a container by Name -- Throws if the container does not exist.
+   *
+   * @param containerId - Container ID
+   * @return ContainerWithPipeline
+   * @throws IOException
+   */
+  @Override
+  public ContainerWithPipeline getContainerWithPipeline(long containerId)
+      throws IOException {
+    return storageContainerLocationClient.getContainerWithPipeline(containerId);
+  }
+
+  /**
+   * Close a container.
+   *
+   * @throws IOException
+   */
+  @Override
+  public void closeContainer(long containerId)
+      throws IOException {
+    ContainerWithPipeline info = getContainerWithPipeline(containerId);
+    Pipeline pipeline = info.getPipeline();
+    closeContainer(containerId, pipeline);
+  }
+
+  /**
-    // TODO : Fix this, it currently returns the capacity but not the current usage.
+    // TODO : Fix this, it currently returns the capacity
+    // but not the current usage.

MOV26 UPD40 INS31 INS31 INS31 INS31 UPD43 UPD43 INS74 INS29 INS44 MOV29 INS78 INS83 INS39 INS42 MOV44 INS44 INS43 INS8 INS29 MOV29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 UPD42 INS43 INS43 MOV43 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS42 INS39 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS39 INS42 INS42 INS60 INS41 INS65 INS65 INS65 INS65 INS42 INS42 INS39 INS42 INS42 INS41 INS65 INS65 INS42 INS39 INS42 INS42 INS60 INS60 INS21 UPD66 INS42 UPD40 MOV40 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 UPD42 UPD66 INS43 INS59 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 UPD42 UPD66 INS43 INS59 INS32 INS66 INS42 INS66 INS66 INS42 INS32 INS66 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 UPD43 UPD42 UPD43 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 INS32 UPD42 INS32 UPD42 MOV42 INS42 INS32 INS32 UPD42 MOV42 INS42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 DEL43 DEL42 DEL43 DEL74