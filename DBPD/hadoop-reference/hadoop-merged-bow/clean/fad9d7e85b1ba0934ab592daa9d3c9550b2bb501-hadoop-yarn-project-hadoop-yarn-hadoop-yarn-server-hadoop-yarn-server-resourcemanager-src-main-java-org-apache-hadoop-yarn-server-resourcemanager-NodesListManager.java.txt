New parameter of CLI for decommissioning node gracefully in RMAdmin CLI. Contributed by Devaraj K

+import java.util.HashSet;
+import java.util.Map.Entry;
+import org.apache.hadoop.yarn.api.records.NodeState;
+    refreshHostsReader(yarnConf);
+
+    for (NodeId nodeId: rmContext.getRMNodes().keySet()) {
+      if (!isValidNode(nodeId.getHost())) {
+        this.rmContext.getDispatcher().getEventHandler().handle(
+            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION));
+      }
+    }
+  }
+
+  private void refreshHostsReader(Configuration yarnConf) throws IOException,
+      YarnException {
-
-    for (NodeId nodeId: rmContext.getRMNodes().keySet()) {
-      if (!isValidNode(nodeId.getHost())) {
-        this.rmContext.getDispatcher().getEventHandler().handle(
-            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION));
-      }
-    }
-}
+
+  /**
+   * Refresh the nodes gracefully
+   *
+   * @param conf
+   * @throws IOException
+   * @throws YarnException
+   */
+  public void refreshNodesGracefully(Configuration conf) throws IOException,
+      YarnException {
+    refreshHostsReader(conf);
+    for (Entry<NodeId, RMNode> entry:rmContext.getRMNodes().entrySet()) {
+      NodeId nodeId = entry.getKey();
+      if (!isValidNode(nodeId.getHost())) {
+        this.rmContext.getDispatcher().getEventHandler().handle(
+            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION_WITH_TIMEOUT));
+      } else {
+        // Recommissioning the nodes
+        if (entry.getValue().getState() == NodeState.DECOMMISSIONING
+            || entry.getValue().getState() == NodeState.DECOMMISSIONED) {
+          this.rmContext.getDispatcher().getEventHandler()
+              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));
+        }
+      }
+    }
+  }
+
+  /**
+   * It checks for any nodes in decommissioning state
+   *
+   * @return decommissioning nodes
+   */
+  public Set<NodeId> checkForDecommissioningNodes() {
+    Set<NodeId> decommissioningNodes = new HashSet<NodeId>();
+    for (Entry<NodeId, RMNode> entry : rmContext.getRMNodes().entrySet()) {
+      if (entry.getValue().getState() == NodeState.DECOMMISSIONING) {
+        decommissioningNodes.add(entry.getKey());
+      }
+    }
+    return decommissioningNodes;
+  }
+
+  /**
+   * Forcefully decommission the nodes if they are in DECOMMISSIONING state
+   */
+  public void refreshNodesForcefully() {
+    for (Entry<NodeId, RMNode> entry : rmContext.getRMNodes().entrySet()) {
+      if (entry.getValue().getState() == NodeState.DECOMMISSIONING) {
+        this.rmContext.getDispatcher().getEventHandler().handle(
+            new RMNodeEvent(entry.getKey(), RMNodeEventType.DECOMMISSION));
+      }
+    }
+  }
+}

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS43 INS43 INS8 UPD83 UPD42 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS43 INS42 INS42 INS42 INS21 MOV70 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS42 INS21 INS70 INS65 INS65 INS43 INS43 INS60 INS70 INS41 INS65 INS70 INS42 INS32 INS66 INS42 INS42 INS42 INS42 INS32 INS44 INS32 INS8 INS66 INS66 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS42 INS66 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS60 INS25 INS43 INS43 INS42 INS14 INS74 INS42 INS32 INS42 INS25 INS74 INS42 INS32 INS42 INS25 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS38 INS8 INS8 INS42 INS42 INS74 INS43 INS43 INS43 INS42 INS42 INS27 INS8 INS43 INS43 INS43 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS25 INS43 INS43 INS42 INS42 INS42 INS32 INS40 INS21 INS42 INS42 INS42 INS32 INS40 INS21 INS42 INS42 INS42 INS32 INS32 INS27 INS8 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS27 INS27 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS32 INS42 INS43 INS42 INS40 INS32 INS40 INS32 INS40 INS32 INS42 INS42 INS32 INS42 INS43 INS32 INS40 INS22 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS14 INS22 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS40 INS52 INS42 INS22 INS42 INS42 INS52 INS42