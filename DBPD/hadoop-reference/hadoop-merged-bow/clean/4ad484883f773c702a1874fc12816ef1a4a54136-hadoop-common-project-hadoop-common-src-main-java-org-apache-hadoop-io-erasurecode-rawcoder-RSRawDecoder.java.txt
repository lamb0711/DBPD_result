HADOOP-11847 Enhance raw coder allowing to read least required inputs in decoding. Contributed by Kai Zheng

+import org.apache.hadoop.HadoopIllegalArgumentException;
+ *
+ * Currently this implementation will compute and decode not to read units
+ * unnecessarily due to the underlying implementation limit in GF. This will be
+ * addressed in HADOOP-11871.
+  /**
+   * We need a set of reusable buffers either for the bytes array
+   * decoding version or direct buffer decoding version. Normally not both.
+   *
+   * For output, in addition to the valid buffers from the caller
+   * passed from above, we need to provide extra buffers for the internal
+   * decoding implementation. For output, the caller should provide no more
+   * than numParityUnits but at least one buffers. And the left buffers will be
+   * borrowed from either bytesArrayBuffers, for the bytes array version.
+   *
+   */
+  // Reused buffers for decoding with bytes arrays
+  private byte[][] bytesArrayBuffers = new byte[getNumParityUnits()][];
+  private byte[][] adjustedByteArrayOutputsParameter =
+      new byte[getNumParityUnits()][];
+  private int[] adjustedOutputOffsets = new int[getNumParityUnits()];
+
+  // Reused buffers for decoding with direct ByteBuffers
+  private ByteBuffer[] directBuffers = new ByteBuffer[getNumParityUnits()];
+  private ByteBuffer[] adjustedDirectBufferOutputsParameter =
+      new ByteBuffer[getNumParityUnits()];
+
-    assert (getNumDataUnits() + getNumParityUnits() < RSUtil.GF.getFieldSize());
+    if (numDataUnits + numParityUnits >= RSUtil.GF.getFieldSize()) {
+      throw new HadoopIllegalArgumentException(
+              "Invalid numDataUnits and numParityUnits");
+    }
-  @Override
-  protected void doDecode(ByteBuffer[] inputs, int[] erasedIndexes,
+  private void doDecodeImpl(ByteBuffer[] inputs, int[] erasedIndexes,
+    ByteBuffer valid = findFirstValidInput(inputs);
+    int dataLen = valid.remaining();
-      RSUtil.GF.substitute(inputs, outputs[i], primitivePower[i]);
+      RSUtil.GF.substitute(inputs, dataLen, outputs[i], primitivePower[i]);
-  @Override
-  protected void doDecode(byte[][] inputs, int[] inputOffsets,
+  private void doDecodeImpl(byte[][] inputs, int[] inputOffsets,
-        erasedIndexes.length, dataLen);
+            erasedIndexes.length, dataLen);
+  }
+
+  @Override
+  protected void doDecode(byte[][] inputs, int[] inputOffsets,
+                          int dataLen, int[] erasedIndexes,
+                          byte[][] outputs, int[] outputOffsets) {
+    /**
+     * As passed parameters are friendly to callers but not to the underlying
+     * implementations, so we have to adjust them before calling doDecodeImpl.
+     */
+
+    int[] erasedOrNotToReadIndexes = getErasedOrNotToReadIndexes(inputs);
+
+    // Prepare for adjustedOutputsParameter
+
+    // First reset the positions needed this time
+    for (int i = 0; i < erasedOrNotToReadIndexes.length; i++) {
+      adjustedByteArrayOutputsParameter[i] = null;
+      adjustedOutputOffsets[i] = 0;
+    }
+    // Use the caller passed buffers in erasedIndexes positions
+    for (int outputIdx = 0, i = 0; i < erasedIndexes.length; i++) {
+      boolean found = false;
+      for (int j = 0; j < erasedOrNotToReadIndexes.length; j++) {
+        // If this index is one requested by the caller via erasedIndexes, then
+        // we use the passed output buffer to avoid copying data thereafter.
+        if (erasedIndexes[i] == erasedOrNotToReadIndexes[j]) {
+          found = true;
+          adjustedByteArrayOutputsParameter[j] = resetBuffer(
+                  outputs[outputIdx], outputOffsets[outputIdx], dataLen);
+          adjustedOutputOffsets[j] = outputOffsets[outputIdx];
+          outputIdx++;
+        }
+      }
+      if (!found) {
+        throw new HadoopIllegalArgumentException(
+            "Inputs not fully corresponding to erasedIndexes in null places");
+      }
+    }
+    // Use shared buffers for other positions (not set yet)
+    for (int bufferIdx = 0, i = 0; i < erasedOrNotToReadIndexes.length; i++) {
+      if (adjustedByteArrayOutputsParameter[i] == null) {
+        adjustedByteArrayOutputsParameter[i] = resetBuffer(
+            checkGetBytesArrayBuffer(bufferIdx, dataLen), 0, dataLen);
+        adjustedOutputOffsets[i] = 0; // Always 0 for such temp output
+        bufferIdx++;
+      }
+    }
+
+    doDecodeImpl(inputs, inputOffsets, dataLen, erasedOrNotToReadIndexes,
+            adjustedByteArrayOutputsParameter, adjustedOutputOffsets);
+  }
+
+  @Override
+  protected void doDecode(ByteBuffer[] inputs, int[] erasedIndexes,
+                          ByteBuffer[] outputs) {
+    ByteBuffer validInput = findFirstValidInput(inputs);
+    int dataLen = validInput.remaining();
+
+    /**
+     * As passed parameters are friendly to callers but not to the underlying
+     * implementations, so we have to adjust them before calling doDecodeImpl.
+     */
+
+    int[] erasedOrNotToReadIndexes = getErasedOrNotToReadIndexes(inputs);
+
+    // Prepare for adjustedDirectBufferOutputsParameter
+
+    // First reset the positions needed this time
+    for (int i = 0; i < erasedOrNotToReadIndexes.length; i++) {
+      adjustedDirectBufferOutputsParameter[i] = null;
+    }
+    // Use the caller passed buffers in erasedIndexes positions
+    for (int outputIdx = 0, i = 0; i < erasedIndexes.length; i++) {
+      boolean found = false;
+      for (int j = 0; j < erasedOrNotToReadIndexes.length; j++) {
+        // If this index is one requested by the caller via erasedIndexes, then
+        // we use the passed output buffer to avoid copying data thereafter.
+        if (erasedIndexes[i] == erasedOrNotToReadIndexes[j]) {
+          found = true;
+          adjustedDirectBufferOutputsParameter[j] =
+              resetBuffer(outputs[outputIdx++]);
+        }
+      }
+      if (!found) {
+        throw new HadoopIllegalArgumentException(
+            "Inputs not fully corresponding to erasedIndexes in null places");
+      }
+    }
+    // Use shared buffers for other positions (not set yet)
+    for (int bufferIdx = 0, i = 0; i < erasedOrNotToReadIndexes.length; i++) {
+      if (adjustedDirectBufferOutputsParameter[i] == null) {
+        ByteBuffer buffer = checkGetDirectBuffer(bufferIdx, dataLen);
+        buffer.position(0);
+        buffer.limit(dataLen);
+        adjustedDirectBufferOutputsParameter[i] = resetBuffer(buffer);
+        bufferIdx++;
+      }
+    }
+
+    doDecodeImpl(inputs, erasedOrNotToReadIndexes,
+        adjustedDirectBufferOutputsParameter);
+  }
+
+  private byte[] checkGetBytesArrayBuffer(int idx, int bufferLen) {
+    if (bytesArrayBuffers[idx] == null ||
+            bytesArrayBuffers[idx].length < bufferLen) {
+      bytesArrayBuffers[idx] = new byte[bufferLen];
+    }
+    return bytesArrayBuffers[idx];
+  }
+
+  private ByteBuffer checkGetDirectBuffer(int idx, int bufferLen) {
+    if (directBuffers[idx] == null ||
+        directBuffers[idx].capacity() < bufferLen) {
+      directBuffers[idx] = ByteBuffer.allocateDirect(bufferLen);
+    }
+    return directBuffers[idx];

INS26 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS5 INS59 INS83 INS5 INS59 INS83 INS5 INS59 INS83 INS5 INS59 INS83 INS5 INS59 UPD83 UPD42 UPD83 UPD42 MOV78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 MOV78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS5 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS66 INS66 INS66 INS65 INS39 INS85 INS85 INS42 INS3 INS39 INS85 INS85 INS42 INS3 INS39 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS25 INS60 INS60 INS5 INS42 INS5 INS42 INS39 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS60 INS24 INS24 INS24 INS21 INS5 INS42 INS5 INS42 INS5 INS42 INS60 INS60 INS60 INS24 INS24 INS24 INS21 INS39 INS85 INS39 INS42 INS39 INS42 INS25 INS41 INS42 INS39 INS42 INS39 INS42 INS25 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS5 MOV32 INS5 INS32 INS5 INS32 INS42 INS5 INS32 INS42 INS5 INS32 INS27 INS8 INS43 INS59 INS39 INS59 INS39 INS85 INS85 INS39 INS85 INS39 INS85 INS39 INS85 INS85 INS39 INS85 INS5 INS59 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS32 INS43 INS85 INS39 INS85 INS43 INS85 INS43 INS59 INS39 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS32 INS27 INS8 INS2 INS27 INS8 INS2 INS39 INS85 INS85 INS39 INS85 INS85 INS42 INS39 INS85 INS42 INS43 INS85 INS42 INS43 INS85 INS42 MOV27 MOV32 INS53 INS42 INS42 INS32 INS42 INS32 INS39 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS39 INS59 INS59 INS42 INS40 INS42 INS60 INS24 INS25 INS39 INS59 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS39 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS39 INS59 INS59 INS42 INS40 INS42 INS60 INS24 INS25 INS39 INS59 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS42 INS42 INS27 INS27 INS21 INS42 INS42 INS27 INS27 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS7 INS7 INS42 INS34 INS42 INS34 INS39 INS59 INS58 INS27 INS37 INS8 INS38 INS8 INS42 INS34 INS42 INS34 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS7 INS42 INS34 INS42 INS34 INS39 INS59 INS58 INS27 INS37 INS8 INS38 INS8 INS42 INS34 INS42 INS34 INS27 INS8 INS2 INS33 INS22 INS42 INS7 INS2 INS33 INS32 INS42 INS7 INS43 INS45 INS42 INS2 INS33 INS2 INS34 INS42 INS9 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS53 INS2 INS33 INS21 INS21 INS21 INS2 INS33 INS42 INS9 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS53 INS2 INS33 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS2 INS42 INS2 INS3 INS42 INS42 INS2 INS42 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS27 INS8 INS14 INS42 INS42 INS7 INS7 INS37 INS42 INS42 INS42 INS34 INS27 INS8 INS14 INS42 INS42 INS43 INS59 INS32 INS32 INS7 INS37 INS42 INS42 INS42 INS42 INS5 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS2 INS21 INS21 INS21 INS21 INS43 INS45 INS2 INS32 INS2 INS34 INS42 INS2 INS2 INS21 INS21 INS43 INS45 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS2 INS32 INS42 INS39 INS85 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS37 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS2 INS32 INS2 INS2 INS42 INS42 INS42 INS42 INS42 INS9 INS2 INS32 INS42 INS42 INS42 INS2 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS37 INS42 DEL42 DEL32 DEL27 DEL36 DEL6