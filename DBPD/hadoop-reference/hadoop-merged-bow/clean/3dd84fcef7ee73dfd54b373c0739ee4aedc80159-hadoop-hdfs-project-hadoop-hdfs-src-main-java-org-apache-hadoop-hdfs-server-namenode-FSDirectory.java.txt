Merge r1410998 through r1412282 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1412297 13f79535-47bb-0310-9956-ffa450edef68

+  private static INodeDirectoryWithQuota createRoot(FSNamesystem namesystem) {
+    final INodeDirectoryWithQuota r = new INodeDirectoryWithQuota(
+        INodeDirectory.ROOT_NAME,
+        namesystem.createFsOwnerPermissions(new FsPermission((short)0755)));
+    return INodeDirectorySnapshottable.newInstance(r, 0);
+  }
-
-    this.namesystem = ns;
-    int threshold = conf.getInt(
-        DFSConfigKeys.DFS_NAMENODE_NAME_CACHE_THRESHOLD_KEY,
-        DFSConfigKeys.DFS_NAMENODE_NAME_CACHE_THRESHOLD_DEFAULT);
-    NameNode.LOG.info("Caching file names occuring more than " + threshold
-        + " times");
-    this.nameCache = new NameCache<ByteArray>(threshold);
-    reset();
-
+    rootDir = createRoot(ns);
+
+    int threshold = conf.getInt(
+        DFSConfigKeys.DFS_NAMENODE_NAME_CACHE_THRESHOLD_KEY,
+        DFSConfigKeys.DFS_NAMENODE_NAME_CACHE_THRESHOLD_DEFAULT);
+    NameNode.LOG.info("Caching file names occuring more than " + threshold
+        + " times");
+    nameCache = new NameCache<ByteArray>(threshold);
+    namesystem = ns;
-  INodeDirectory addToParent(INodeDirectory parentINode,
-      INode newNode, boolean propagateModTime) {
-    // NOTE: This does not update space counts for parents
-    INodeDirectory newParent = null;
-    writeLock();
-    try {
-      try {
-        newParent = rootDir.addToParent(newNode, parentINode,
-                                        propagateModTime);
-        cacheName(newNode);
-      } catch (FileNotFoundException e) {
-        return null;
-      }
-      if(newParent == null)
-        return null;
-      if(!newNode.isDirectory() && !newNode.isSymlink()) {
-        // Add file->block mapping
-        INodeFile newF = (INodeFile)newNode;
-        BlockInfo[] blocks = newF.getBlocks();
-        for (int i = 0; i < blocks.length; i++) {
-          newF.setBlock(i, getBlockManager().addBlockCollection(blocks[i], newF));
-        }
-      }
-    } finally {
-      writeUnlock();
-    }
-    return newParent;
-  }
-
-    if (inode == null) {
-      return null;
-    }
-    assert !inode.isSymlink();
-    if (inode.isDirectory()) {
+    if (inode == null || !inode.isFile()) {
-   * Get the blocksize of a file
-   * @param filename the filename
-   * @return the number of bytes 
+   * @param path the file path
+   * @return the block size of the file. 
-  long getPreferredBlockSize(String filename) throws UnresolvedLinkException,
+  long getPreferredBlockSize(String path) throws UnresolvedLinkException,
-      INode inode = rootDir.getNode(filename, false);
-      if (inode == null) {
-        throw new FileNotFoundException("File does not exist: " + filename);
-      }
-      if (inode.isDirectory() || inode.isSymlink()) {
-        throw new IOException("Getting block size of non-file: "+ filename); 
-      }
-      return ((INodeFile)inode).getPreferredBlockSize();
+      return INodeFile.valueOf(rootDir.getNode(path, false), path
+          ).getPreferredBlockSize();
-      return inode.isDirectory() || inode.isSymlink() 
-        ? true 
-        : ((INodeFile)inode).getBlocks() != null;
+      return !inode.isFile() || ((INodeFile)inode).getBlocks() != null;
-      INode targetNode = rootDir.getNode(src, false);
-      if (targetNode == null)
-        return null;
-      if (targetNode.isDirectory())
-        return null;
-      if (targetNode.isSymlink()) 
-        return null;
-      return ((INodeFile)targetNode).getBlocks();
+      final INode i = rootDir.getNode(src, false);
+      return i != null && i.isFile()? ((INodeFile)i).getBlocks(): null;
-      final INodeDirectoryWithQuota r = new INodeDirectoryWithQuota(
-          INodeDirectory.ROOT_NAME,
-          getFSNamesystem().createFsOwnerPermissions(new FsPermission((short)0755)),
-          Long.MAX_VALUE, UNKNOWN_DISK_SPACE);
-      rootDir = INodeDirectorySnapshottable.newInstance(r, 0);
+      rootDir = createRoot(getFSNamesystem());
-      QuotaExceededException, IOException {
+      QuotaExceededException, SnapshotAccessControlException {
-      newNode = unprotectedSymlink(path, target, modTime, modTime,
+      newNode = unprotectedAddSymlink(path, target, modTime, modTime,
-  INodeSymlink unprotectedSymlink(String path, String target, long modTime, 
+  INodeSymlink unprotectedAddSymlink(String path, String target, long mtime, 
-      throws UnresolvedLinkException {
+      throws UnresolvedLinkException, QuotaExceededException {
-    INodeSymlink newNode = new INodeSymlink(target, modTime, atime, perm);
-    try {
-      newNode = addNode(path, newNode, UNKNOWN_DISK_SPACE);
-    } catch (UnresolvedLinkException e) {
-      /* All UnresolvedLinkExceptions should have been resolved by now, but we
-       * should re-throw them in case that changes so they are not swallowed 
-       * by catching IOException below.
-       */
-      throw e;
-    } catch (IOException e) {
-      return null;
-    }
-    return newNode;
+    final INodeSymlink symlink = new INodeSymlink(target, mtime, atime, perm);
+    return addNode(path, symlink, UNKNOWN_DISK_SPACE);
-    if (inode.isDirectory() || inode.isSymlink()) {
+    if (!inode.isFile()) {

MOV31 INS31 INS83 INS83 INS43 UPD42 INS44 MOV8 MOV60 MOV21 MOV21 MOV21 MOV29 INS39 INS42 MOV8 UPD43 UPD42 INS43 INS42 INS43 INS42 INS41 UPD42 UPD42 UPD42 INS42 INS41 INS42 MOV32 INS7 INS27 UPD42 UPD66 UPD66 INS8 INS83 MOV43 INS32 INS38 INS42 INS32 INS42 INS42 INS42 MOV27 INS38 INS41 MOV21 INS21 MOV21 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS42 INS32 INS32 INS27 INS83 INS16 INS7 MOV43 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 MOV42 INS38 MOV27 UPD42 INS27 MOV32 INS33 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS27 INS32 INS42 MOV32 UPD42 MOV42 MOV42 UPD42 MOV42 MOV9 MOV42 UPD42 MOV42 INS42 INS33 INS42 INS42 UPD42 DEL39 DEL40 DEL42 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL33 DEL41 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL38 DEL6 DEL42 DEL42 DEL32 DEL33 DEL41 DEL8 DEL25 DEL66 DEL65 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL11 DEL36 DEL32 DEL41 DEL42 DEL42 DEL32 DEL32 DEL27 DEL9 DEL16 DEL42 DEL33 DEL27 DEL33 DEL41 DEL25 DEL42 DEL42 DEL32 DEL33 DEL41 DEL25 DEL42 DEL42 DEL32 DEL33 DEL41 DEL25 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL12 DEL54 DEL42 DEL41 DEL42 DEL42 DEL32 DEL32 DEL27