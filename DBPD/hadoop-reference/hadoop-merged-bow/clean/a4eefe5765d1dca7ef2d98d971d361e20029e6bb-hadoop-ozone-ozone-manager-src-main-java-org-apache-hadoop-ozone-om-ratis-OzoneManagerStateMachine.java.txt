HDDS-947. Implement OzoneManager State Machine.

-import com.google.protobuf.InvalidProtocolBufferException;
+import com.google.common.base.Preconditions;
+import com.google.protobuf.ServiceException;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.*;
+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos
+    .OMRequest;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos
+    .OMResponse;
+import org.apache.hadoop.ozone.protocolPB.OzoneManagerRequestHandler;
+import org.apache.ratis.proto.RaftProtos;
+import org.apache.ratis.protocol.RaftClientRequest;
-  private final OzoneManager ozoneManager;
+  private final OzoneManagerRequestHandler handler;
+  private RaftGroupId raftGroupId;
-  public OzoneManagerStateMachine(OzoneManager om) {
-    // OzoneManager is required when implementing StateMachine
-    this.ozoneManager = om;
+  public OzoneManagerStateMachine(OzoneManagerProtocol om) {
+    this.handler = new OzoneManagerRequestHandler(om);
+    this.raftGroupId = id;
+  /**
+   * Validate/pre-process the incoming update request in the state machine.
+   * @return the content to be written to the log entry. Null means the request
+   * should be rejected.
+   * @throws IOException thrown by the state machine while validating
+   */
+  public TransactionContext startTransaction(
+      RaftClientRequest raftClientRequest) throws IOException {
+    ByteString messageContent = raftClientRequest.getMessage().getContent();
+    OMRequest omRequest = OMRatisHelper.convertByteStringToOMRequest(
+        messageContent);
+
+    Preconditions.checkArgument(raftClientRequest.getRaftGroupId().equals(
+        raftGroupId));
+    try {
+      handler.validateRequest(omRequest);
+    } catch (IOException ioe) {
+      TransactionContext ctxt = TransactionContext.newBuilder()
+          .setClientRequest(raftClientRequest)
+          .setStateMachine(this)
+          .setServerRole(RaftProtos.RaftPeerRole.LEADER)
+          .build();
+      ctxt.setException(ioe);
+      return ctxt;
+    }
+    return TransactionContext.newBuilder()
+        .setClientRequest(raftClientRequest)
+        .setStateMachine(this)
+        .setServerRole(RaftProtos.RaftPeerRole.LEADER)
+        .setLogData(messageContent)
+        .build();
+  }
+
-   * Apply a committed log entry to the state machine. This function
-   * currently returns a dummy message.
-   * TODO: Apply transaction to OM state machine
+   * Apply a committed log entry to the state machine.
-    String errorMessage;
-    ByteString logData = trx.getStateMachineLogEntry().getLogData();
-      OMRequest omRequest = OMRatisHelper.convertByteStringToOMRequest(logData);
-      LOG.debug("Received request: cmdType={} traceID={} ",
-          omRequest.getCmdType(), omRequest.getTraceID());
-      errorMessage = "Dummy response from Ratis server for command type: " +
-          omRequest.getCmdType();
-    } catch (InvalidProtocolBufferException e) {
-      errorMessage = e.getMessage();
+      OMRequest request = OMRatisHelper.convertByteStringToOMRequest(
+          trx.getStateMachineLogEntry().getLogData());
+      CompletableFuture<Message> future = CompletableFuture
+          .supplyAsync(() -> runCommand(request));
+      return future;
+    } catch (IOException e) {
+      return completeExceptionally(e);
-
-    // TODO: When State Machine is implemented, send the actual response back
-    return OMRatisHelper.completeExceptionally(new IOException(errorMessage));
+
+  /**
+   * Query the state machine. The request must be read-only.
+   */
+  @Override
+  public CompletableFuture<Message> query(Message request) {
+    try {
+      OMRequest omRequest = OMRatisHelper.convertByteStringToOMRequest(
+          request.getContent());
+      return CompletableFuture.completedFuture(runCommand(omRequest));
+    } catch (IOException e) {
+      return completeExceptionally(e);
+    }
+  }
+
+  /**
+   * Submits request to OM and returns the response Message.
+   * @param request OMRequest
+   * @return response from OM
+   * @throws ServiceException
+   */
+  private Message runCommand(OMRequest request) {
+    OMResponse response = handler.handle(request);
+    return OMRatisHelper.convertResponseToMessage(response);
+  }
+
+  private static <T> CompletableFuture<T> completeExceptionally(Exception e) {
+    final CompletableFuture<T> future = new CompletableFuture<>();
+    future.completeExceptionally(e);
+    return future;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 UPD43 INS83 INS43 INS59 INS29 MOV83 INS43 UPD42 MOV42 INS44 INS43 INS8 MOV78 INS83 MOV74 INS42 MOV44 INS8 INS29 INS78 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS73 INS74 INS42 INS44 INS8 UPD42 UPD42 INS42 INS42 UPD43 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 MOV60 MOV21 INS54 INS41 INS54 INS65 INS42 INS43 INS43 INS43 INS42 INS54 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS60 MOV41 INS42 INS43 INS43 INS43 INS42 INS60 INS21 INS41 UPD42 INS7 INS66 INS66 INS66 INS42 INS66 UPD42 MOV42 MOV43 MOV59 INS8 INS12 INS32 INS8 INS12 INS66 INS42 INS42 INS42 INS8 MOV12 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS42 INS42 INS42 INS83 INS74 INS59 INS32 INS42 INS14 INS22 INS42 INS42 INS32 UPD42 UPD42 INS32 INS21 INS44 INS8 INS32 INS42 MOV60 INS60 INS41 INS44 INS8 INS60 INS41 INS42 INS42 INS32 UPD42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 UPD42 INS43 INS42 INS52 INS42 INS32 INS42 UPD42 MOV32 UPD42 MOV42 UPD42 MOV42 INS32 MOV43 INS42 INS60 INS21 INS41 INS32 INS42 INS42 INS43 INS74 INS59 INS42 INS43 INS42 INS41 INS43 INS59 INS32 UPD43 INS41 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS32 INS42 INS40 INS42 UPD42 INS32 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL14 DEL43 DEL60 DEL42 DEL45 DEL32 DEL27 DEL7 DEL21 DEL8 DEL54 DEL8 DEL31