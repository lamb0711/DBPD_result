Merge trunk into branch.

Branch will not build after this commit: need to implement new JournalManager
interfaces in QuorumJournalManager in a follow-up.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1371518 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_ENCRYPT_DATA_TRANSFER_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_ENCRYPT_DATA_TRANSFER_KEY;
+import java.io.InputStream;
+import org.apache.hadoop.hdfs.protocol.datatransfer.DataTransferEncryptor;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import org.apache.hadoop.hdfs.security.token.block.DataEncryptionKey;
+  private DataEncryptionKey encryptionKey;
-    this.socketCache = new SocketCache(dfsClientConf.socketCacheCapacity);
-    
-    
+    
+    this.socketCache = new SocketCache(dfsClientConf.socketCacheCapacity);
-    return getFileChecksum(src, namenode, socketFactory, dfsClientConf.socketTimeout);    
+    return getFileChecksum(src, namenode, socketFactory,
+        dfsClientConf.socketTimeout, getDataEncryptionKey());
+  }
+  
+  @InterfaceAudience.Private
+  public void clearDataEncryptionKey() {
+    LOG.debug("Clearing encryption key");
+    synchronized (this) {
+      encryptionKey = null;
+    }
+  }
+  
+  /**
+   * @return true if data sent between this client and DNs should be encrypted,
+   *         false otherwise.
+   * @throws IOException in the event of error communicating with the NN
+   */
+  boolean shouldEncryptData() throws IOException {
+    FsServerDefaults d = getServerDefaults();
+    return d == null ? false : d.getEncryptDataTransfer();
+  }
+  
+  @InterfaceAudience.Private
+  public DataEncryptionKey getDataEncryptionKey()
+      throws IOException {
+    if (shouldEncryptData()) {
+      synchronized (this) {
+        if (encryptionKey == null ||
+            (encryptionKey != null &&
+             encryptionKey.expiryDate < Time.now())) {
+          LOG.debug("Getting new encryption token from NN");
+          encryptionKey = namenode.getDataEncryptionKey();
+        }
+        return encryptionKey;
+      }
+    } else {
+      return null;
+    }
-      ClientProtocol namenode, SocketFactory socketFactory, int socketTimeout
-      ) throws IOException {
+      ClientProtocol namenode, SocketFactory socketFactory, int socketTimeout,
+      DataEncryptionKey encryptionKey) throws IOException {
-          out = new DataOutputStream(
-              new BufferedOutputStream(NetUtils.getOutputStream(sock), 
-                                       HdfsConstants.SMALL_BUFFER_SIZE));
-          in = new DataInputStream(NetUtils.getInputStream(sock));
+          OutputStream unbufOut = NetUtils.getOutputStream(sock);
+          InputStream unbufIn = NetUtils.getInputStream(sock);
+          if (encryptionKey != null) {
+            IOStreamPair encryptedStreams =
+                DataTransferEncryptor.getEncryptedStreams(
+                    unbufOut, unbufIn, encryptionKey);
+            unbufOut = encryptedStreams.out;
+            unbufIn = encryptedStreams.in;
+          }
+          out = new DataOutputStream(new BufferedOutputStream(unbufOut,
+              HdfsConstants.SMALL_BUFFER_SIZE));
+          in = new DataInputStream(unbufIn);

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS43 INS59 MOV21 INS78 INS83 INS39 INS42 INS8 INS29 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS44 INS42 INS42 INS40 INS21 INS51 INS65 INS65 INS42 INS60 INS41 INS40 INS42 INS42 INS25 INS43 INS42 INS32 INS52 INS8 INS66 INS66 INS42 INS66 INS43 INS59 INS16 INS32 INS8 INS8 INS42 INS32 INS42 INS42 INS45 INS21 INS42 INS42 INS32 INS27 INS9 INS32 INS42 INS51 INS41 INS42 INS7 INS42 INS42 INS33 INS42 INS42 INS52 INS8 INS33 INS42 INS33 INS25 INS41 INS27 INS8 INS42 INS27 INS36 INS21 INS21 INS60 INS60 INS25 INS42 INS33 INS27 INS32 INS7 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS27 INS42 INS42 INS45 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS33 INS60 INS21 INS21 INS42 INS33 INS40 INS32 INS42 INS42 INS43 INS59 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42