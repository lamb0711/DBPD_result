MAPREDUCE-5481. Enable uber jobs to have multiple reducers (Sandy Ryza)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541844 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+import org.apache.hadoop.mapreduce.TaskID;
+      // Collect locations of map outputs to give to reduces
+      Map<TaskAttemptID, MapOutputFile> localMapFiles =
+          new HashMap<TaskAttemptID, MapOutputFile>();
+      
-                       (numReduceTasks > 0));
+                       (numReduceTasks > 0), localMapFiles);
-                            boolean renameOutputs)
+                            boolean renameOutputs,
+                            Map<TaskAttemptID, MapOutputFile> localMapFiles)
-            renameMapOutputForReduce(conf, attemptID, map.getMapOutputFile());
+            MapOutputFile renamed = renameMapOutputForReduce(conf, attemptID,
+                map.getMapOutputFile());
+            localMapFiles.put(classicAttemptID, renamed);
+          reduce.setLocalMapFiles(localMapFiles);
-          //relocalize();  // needed only if more than one reducer supported (is MAPREDUCE-434 fixed yet?)
+          relocalize();
-    private void renameMapOutputForReduce(JobConf conf, TaskAttemptId mapId,
-                                          MapOutputFile subMapOutputFile)
-    throws IOException {
+    private MapOutputFile renameMapOutputForReduce(JobConf conf,
+        TaskAttemptId mapId, MapOutputFile subMapOutputFile) throws IOException {
+      Path mapOutIndex = new Path(mapOut.toString() + ".index");
+      Path reduceInIndex = new Path(reduceIn.toString() + ".index");
+      if (!localFs.rename(mapOutIndex, reduceInIndex))
+        throw new IOException("Couldn't rename " + mapOutIndex);
+      
+      return new RenamedMapOutputFile(reduceIn);
+  
+  private static class RenamedMapOutputFile extends MapOutputFile {
+    private Path path;
+    
+    public RenamedMapOutputFile(Path path) {
+      this.path = path;
+    }
+    
+    @Override
+    public Path getOutputFile() throws IOException {
+      return path;
+    }
+
+    @Override
+    public Path getOutputFileForWrite(long size) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public Path getOutputFileForWriteInVolume(Path existing) {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public Path getOutputIndexFile() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public Path getOutputIndexFileForWrite(long size) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public Path getOutputIndexFileForWriteInVolume(Path existing) {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public Path getSpillFile(int spillNumber) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public Path getSpillFileForWrite(int spillNumber, long size)
+        throws IOException {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public Path getSpillIndexFile(int spillNumber) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public Path getSpillIndexFileForWrite(int spillNumber, long size)
+        throws IOException {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public Path getInputFile(int mapId) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public Path getInputFileForWrite(TaskID mapId, long size)
+        throws IOException {
+      throw new UnsupportedOperationException();
+    }
+    @Override
+    public void removeAll() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS55 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS44 INS43 INS42 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS60 INS74 INS42 INS42 INS60 INS60 INS25 INS41 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS41 INS42 INS42 INS39 INS42 INS42 INS53 INS42 INS42 INS43 INS42 INS53 INS42 INS42 INS42 INS53 INS42 INS42 INS39 INS42 INS42 INS53 INS42 INS42 INS43 INS42 INS53 INS42 INS42 INS39 INS42 INS42 INS53 INS42 INS42 INS39 INS42 INS39 INS42 INS42 INS53 INS42 INS42 INS39 INS42 INS42 INS53 INS42 INS42 INS39 INS42 INS39 INS42 INS42 INS53 INS42 INS42 INS39 INS42 INS42 INS53 INS42 INS42 INS43 INS42 INS39 INS42 INS42 INS53 INS42 INS42 INS53 INS74 INS59 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS38 INS53 INS14 INS42 INS7 INS42 INS14 INS42 INS14 INS14 INS14 INS42 INS14 INS14 INS14 INS14 INS14 INS14 INS42 INS14 INS14 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS14 INS43 INS42 INS22 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS74 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS21 INS21 INS42 INS32 INS45 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS60 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 DEL39