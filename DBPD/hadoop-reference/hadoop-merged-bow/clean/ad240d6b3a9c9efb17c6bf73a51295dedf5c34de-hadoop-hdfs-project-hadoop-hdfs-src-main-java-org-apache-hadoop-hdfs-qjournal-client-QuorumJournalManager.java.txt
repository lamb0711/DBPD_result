Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1561771 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.hdfs.server.common.Storage;
+import org.apache.hadoop.hdfs.server.common.StorageInfo;
-  private static final int FORMAT_TIMEOUT_MS = 60000;
-  private static final int HASDATA_TIMEOUT_MS = 60000;
+  private static final int FORMAT_TIMEOUT_MS            = 60000;
+  private static final int HASDATA_TIMEOUT_MS           = 60000;
+  private static final int CAN_ROLL_BACK_TIMEOUT_MS     = 60000;
+  private static final int FINALIZE_TIMEOUT_MS          = 60000;
+  private static final int PRE_UPGRADE_TIMEOUT_MS       = 60000;
+  private static final int ROLL_BACK_TIMEOUT_MS         = 60000;
+  private static final int UPGRADE_TIMEOUT_MS           = 60000;
+  private static final int GET_JOURNAL_CTIME_TIMEOUT_MS = 60000;
+  @Override
+  public void doPreUpgrade() throws IOException {
+    QuorumCall<AsyncLogger, Void> call = loggers.doPreUpgrade();
+    try {
+      call.waitFor(loggers.size(), loggers.size(), 0, PRE_UPGRADE_TIMEOUT_MS,
+          "doPreUpgrade");
+      
+      if (call.countExceptions() > 0) {
+        call.rethrowException("Could not do pre-upgrade of one or more JournalNodes");
+      }
+    } catch (InterruptedException e) {
+      throw new IOException("Interrupted waiting for doPreUpgrade() response");
+    } catch (TimeoutException e) {
+      throw new IOException("Timed out waiting for doPreUpgrade() response");
+    }
+  }
+
+  @Override
+  public void doUpgrade(Storage storage) throws IOException {
+    QuorumCall<AsyncLogger, Void> call = loggers.doUpgrade(storage);
+    try {
+      call.waitFor(loggers.size(), loggers.size(), 0, UPGRADE_TIMEOUT_MS,
+          "doUpgrade");
+      
+      if (call.countExceptions() > 0) {
+        call.rethrowException("Could not perform upgrade of one or more JournalNodes");
+      }
+    } catch (InterruptedException e) {
+      throw new IOException("Interrupted waiting for doUpgrade() response");
+    } catch (TimeoutException e) {
+      throw new IOException("Timed out waiting for doUpgrade() response");
+    }
+  }
+  
+  @Override
+  public void doFinalize() throws IOException {
+    QuorumCall<AsyncLogger, Void> call = loggers.doFinalize();
+    try {
+      call.waitFor(loggers.size(), loggers.size(), 0, FINALIZE_TIMEOUT_MS,
+          "doFinalize");
+      
+      if (call.countExceptions() > 0) {
+        call.rethrowException("Could not finalize one or more JournalNodes");
+      }
+    } catch (InterruptedException e) {
+      throw new IOException("Interrupted waiting for doFinalize() response");
+    } catch (TimeoutException e) {
+      throw new IOException("Timed out waiting for doFinalize() response");
+    }
+  }
+  
+  @Override
+  public boolean canRollBack(StorageInfo storage, StorageInfo prevStorage,
+      int targetLayoutVersion) throws IOException {
+    QuorumCall<AsyncLogger, Boolean> call = loggers.canRollBack(storage,
+        prevStorage, targetLayoutVersion);
+    try {
+      call.waitFor(loggers.size(), loggers.size(), 0, CAN_ROLL_BACK_TIMEOUT_MS,
+          "lockSharedStorage");
+      
+      if (call.countExceptions() > 0) {
+        call.rethrowException("Could not check if roll back possible for"
+            + " one or more JournalNodes");
+      }
+      
+      // Either they all return the same thing or this call fails, so we can
+      // just return the first result.
+      DFSUtil.assertAllResultsEqual(call.getResults().values());
+      for (Boolean result : call.getResults().values()) {
+        return result;
+      }
+    } catch (InterruptedException e) {
+      throw new IOException("Interrupted waiting for lockSharedStorage() " +
+          "response");
+    } catch (TimeoutException e) {
+      throw new IOException("Timed out waiting for lockSharedStorage() " +
+          "response");
+    }
+    
+    throw new AssertionError("Unreachable code.");
+  }
+
+  @Override
+  public void doRollback() throws IOException {
+    QuorumCall<AsyncLogger, Void> call = loggers.doRollback();
+    try {
+      call.waitFor(loggers.size(), loggers.size(), 0, ROLL_BACK_TIMEOUT_MS,
+          "doRollback");
+      
+      if (call.countExceptions() > 0) {
+        call.rethrowException("Could not perform rollback of one or more JournalNodes");
+      }
+    } catch (InterruptedException e) {
+      throw new IOException("Interrupted waiting for doFinalize() response");
+    } catch (TimeoutException e) {
+      throw new IOException("Timed out waiting for doFinalize() response");
+    }
+  }
+  
+  @Override
+  public long getJournalCTime() throws IOException {
+    QuorumCall<AsyncLogger, Long> call = loggers.getJournalCTime();
+    try {
+      call.waitFor(loggers.size(), loggers.size(), 0,
+          GET_JOURNAL_CTIME_TIMEOUT_MS, "getJournalCTime");
+      
+      if (call.countExceptions() > 0) {
+        call.rethrowException("Could not journal CTime for one "
+            + "more JournalNodes");
+      }
+      
+      // Either they all return the same thing or this call fails, so we can
+      // just return the first result.
+      DFSUtil.assertAllResultsEqual(call.getResults().values());
+      for (Long result : call.getResults().values()) {
+        return result;
+      }
+    } catch (InterruptedException e) {
+      throw new IOException("Interrupted waiting for getJournalCTime() " +
+          "response");
+    } catch (TimeoutException e) {
+      throw new IOException("Timed out waiting for getJournalCTime() " +
+          "response");
+    }
+    
+    throw new AssertionError("Unreachable code.");
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS54 INS53 INS42 INS42 INS60 INS54 INS42 INS42 INS60 INS54 INS53 INS74 INS59 INS8 INS12 INS12 INS42 INS74 INS59 INS8 INS12 INS12 INS74 INS59 INS8 INS12 INS12 INS42 INS42 INS74 INS59 INS8 INS12 INS12 INS14 INS74 INS59 INS8 INS12 INS12 INS74 INS59 INS8 INS12 INS12 INS14 INS43 INS43 INS43 INS42 INS32 INS21 INS25 INS44 INS8 INS44 INS8 INS43 INS43 INS43 INS42 INS32 INS21 INS25 INS44 INS8 INS44 INS8 INS43 INS43 INS43 INS42 INS32 INS21 INS25 INS44 INS8 INS44 INS8 INS43 INS43 INS43 INS42 INS32 INS21 INS25 INS21 INS70 INS44 INS8 INS44 INS8 INS43 INS45 INS43 INS43 INS43 INS42 INS32 INS21 INS25 INS44 INS8 INS44 INS8 INS43 INS43 INS43 INS42 INS32 INS21 INS25 INS21 INS70 INS44 INS8 INS44 INS8 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS32 INS44 INS32 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS32 INS44 INS32 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS32 INS32 INS34 INS42 INS45 INS32 INS34 INS21 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS32 INS34 INS42 INS45 INS32 INS34 INS21 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS32 INS34 INS42 INS45 INS32 INS34 INS21 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS32 INS34 INS42 INS45 INS32 INS34 INS21 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS41 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS32 INS34 INS42 INS45 INS32 INS34 INS21 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS32 INS34 INS42 INS45 INS32 INS34 INS21 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS41 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS43 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS45 INS45 INS45 INS45 INS45