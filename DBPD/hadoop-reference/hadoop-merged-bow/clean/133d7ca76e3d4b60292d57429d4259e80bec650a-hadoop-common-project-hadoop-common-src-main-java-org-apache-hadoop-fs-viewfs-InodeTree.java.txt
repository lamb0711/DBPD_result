HADOOP-13055. Implement linkMergeSlash and linkFallback for ViewFileSystem

+import com.google.common.base.Preconditions;
+import java.util.Collections;
+import java.util.LinkedList;
-  private final INodeDir<T> root;     // the root of the mount table
-  private final String homedirPrefix; // the homedir for this mount table
+  // the root of the mount table
+  private final INode<T> root;
+  // the fallback filesystem
+  private final INodeLink<T> rootFallbackLink;
+  // the homedir for this mount table
+  private final String homedirPrefix;
-   * Internal class for inode tree
+   * Internal class for INode tree.
+
+    // INode forming the internal mount table directory tree
+    // for ViewFileSystem. This internal directory tree is
+    // constructed based on the mount table config entries
+    // and is read only.
+    abstract boolean isInternalDir();
+
+    // INode linking to another filesystem. Represented
+    // via mount table link config entries.
+    boolean isLink() {
+      return !isInternalDir();
+    }
-   * Internal class to represent an internal dir of the mount table
+   * Internal class to represent an internal dir of the mount table.
-    final Map<String,INode<T>> children = new HashMap<String,INode<T>>();
-    T InodeDirFs =  null; // file system of this internal directory of mountT
-    boolean isRoot = false;
+    private final Map<String, INode<T>> children = new HashMap<>();
+    private T internalDirFs =  null; //filesystem of this internal directory
+    private boolean isRoot = false;
+    @Override
+    boolean isInternalDir() {
+      return true;
+    }
+
+    T getInternalDirFs() {
+      return internalDirFs;
+    }
+
+    void setInternalDirFs(T internalDirFs) {
+      this.internalDirFs = internalDirFs;
+    }
+
+    void setRoot(boolean root) {
+      isRoot = root;
+    }
+
+    boolean isRoot() {
+      return isRoot;
+    }
+
+    Map<String, INode<T>> getChildren() {
+      return Collections.unmodifiableMap(children);
+    }
+
-          (isRoot ? "" : "/") + pathComponent, aUgi);
+          (isRoot() ? "" : "/") + pathComponent, aUgi);
+  /**
+   * Mount table link type.
+   */
+    /**
+     * Link entry pointing to a single filesystem uri.
+     * Config prefix: fs.viewfs.mounttable.<mnt_tbl_name>.link.<link_name>
+     * Refer: {@link Constants#CONFIG_VIEWFS_LINK}
+     */
+    /**
+     * Fallback filesystem for the paths not mounted by
+     * any single link entries.
+     * Config prefix: fs.viewfs.mounttable.<mnt_tbl_name>.linkFallback
+     * Refer: {@link Constants#CONFIG_VIEWFS_LINK_FALLBACK}
+     */
+    SINGLE_FALLBACK,
+    /**
+     * Link entry pointing to an union of two or more filesystem uris.
+     * Config prefix: fs.viewfs.mounttable.<mnt_tbl_name>.linkMerge.<link_name>
+     * Refer: {@link Constants#CONFIG_VIEWFS_LINK_MERGE}
+     */
-    NFLY
+    /**
+     * Link entry for merging mount table's root with the
+     * root of another filesystem.
+     * Config prefix: fs.viewfs.mounttable.<mnt_tbl_name>.linkMergeSlash
+     * Refer: {@link Constants#CONFIG_VIEWFS_LINK_MERGE_SLASH}
+     */
+    MERGE_SLASH,
+    /**
+     * Link entry to write to multiple filesystems and read
+     * from the closest filesystem.
+     * Config prefix: fs.viewfs.mounttable.<mnt_tbl_name>.linkNfly
+     * Refer: {@link Constants#CONFIG_VIEWFS_LINK_NFLY}
+     */
+    NFLY;
+
+    @Override
+    boolean isInternalDir() {
+      return false;
+    }
+
+    public T getTargetFileSystem() {
+      return targetFileSystem;
+    }
-    INodeDir<T> curInode = root;
+    // Make sure root is of INodeDir type before
+    // adding any regular links to it.
+    Preconditions.checkState(root.isInternalDir());
+    INodeDir<T> curInode = getRootDir();
-        newDir.InodeDirFs = getTargetFileSystem(newDir);
+        newDir.setInternalDirFs(getTargetFileSystem(newDir));
-      if (nextInode instanceof INodeLink) {
+      if (nextInode.isLink()) {
-        assert (nextInode instanceof INodeDir);
+        assert(nextInode.isInternalDir());
+    case SINGLE_FALLBACK:
+    case MERGE_SLASH:
+      // Link fallback and link merge slash configuration
+      // are handled specially at InodeTree.
+      throw new IllegalArgumentException("Unexpected linkType: " + linkType);
+  private INodeDir<T> getRootDir() {
+    Preconditions.checkState(root.isInternalDir());
+    return (INodeDir<T>)root;
+  }
+
+  private INodeLink<T> getRootLink() {
+    Preconditions.checkState(root.isLink());
+    return (INodeLink<T>)root;
+  }
+
+  private boolean hasFallbackLink() {
+    return rootFallbackLink != null;
+  }
+
+  private INodeLink<T> getRootFallbackLink() {
+    Preconditions.checkState(root.isInternalDir());
+    return rootFallbackLink;
+  }
+
+  /**
+   * An internal class representing the ViewFileSystem mount table
+   * link entries and their attributes.
+   * @see LinkType
+   */
+  private static class LinkEntry {
+    private final String src;
+    private final String target;
+    private final LinkType linkType;
+    private final String settings;
+    private final UserGroupInformation ugi;
+    private final Configuration config;
+
+    LinkEntry(String src, String target, LinkType linkType, String settings,
+        UserGroupInformation ugi, Configuration config) {
+      this.src = src;
+      this.target = target;
+      this.linkType = linkType;
+      this.settings = settings;
+      this.ugi = ugi;
+      this.config = config;
+    }
+
+    String getSrc() {
+      return src;
+    }
+
+    String getTarget() {
+      return target;
+    }
+
+    LinkType getLinkType() {
+      return linkType;
+    }
+
+    boolean isLinkType(LinkType type) {
+      return this.linkType == type;
+    }
+
+    String getSettings() {
+      return settings;
+    }
+
+    UserGroupInformation getUgi() {
+      return ugi;
+    }
+
+    Configuration getConfig() {
+      return config;
+    }
+  }
+
-    String vName = viewName;
-    if (vName == null) {
-      vName = Constants.CONFIG_VIEWFS_DEFAULT_MOUNT_TABLE;
+    String mountTableName = viewName;
+    if (mountTableName == null) {
+      mountTableName = Constants.CONFIG_VIEWFS_DEFAULT_MOUNT_TABLE;
-    homedirPrefix = ConfigUtil.getHomeDirValue(config, vName);
-    root = new INodeDir<T>("/", UserGroupInformation.getCurrentUser());
-    root.InodeDirFs = getTargetFileSystem(root);
-    root.isRoot = true;
+    homedirPrefix = ConfigUtil.getHomeDirValue(config, mountTableName);
-    final String mtPrefix = Constants.CONFIG_VIEWFS_PREFIX + "." +
-        vName + ".";
+    boolean isMergeSlashConfigured = false;
+    String mergeSlashTarget = null;
+    List<LinkEntry> linkEntries = new LinkedList<>();
+
+    final String mountTablePrefix =
+        Constants.CONFIG_VIEWFS_PREFIX + "." + mountTableName + ".";
+    final String linkFallbackPrefix = Constants.CONFIG_VIEWFS_LINK_FALLBACK;
+    final String linkMergeSlashPrefix =
+        Constants.CONFIG_VIEWFS_LINK_MERGE_SLASH;
-      if (key.startsWith(mtPrefix)) {
+      if (key.startsWith(mountTablePrefix)) {
-        LinkType linkType = LinkType.SINGLE;
-        String src = key.substring(mtPrefix.length());
+        LinkType linkType;
+        String src = key.substring(mountTablePrefix.length());
-                + "link entry '" + key + "'. "
-                + Constants.CONFIG_VIEWFS_LINK_MERGE_SLASH  + " is not "
-                + "supported yet.");
+                + "link entry '" + key + "'. Use "
+                + Constants.CONFIG_VIEWFS_LINK_MERGE_SLASH  + " instead!");
+          linkType = LinkType.SINGLE;
+        } else if (src.startsWith(linkFallbackPrefix)) {
+          if (src.length() != linkFallbackPrefix.length()) {
+            throw new IOException("ViewFs: Mount points initialization error." +
+                " Invalid " + Constants.CONFIG_VIEWFS_LINK_FALLBACK +
+                " entry in config: " + src);
+          }
+          linkType = LinkType.SINGLE_FALLBACK;
-          linkType = LinkType.MERGE;
+          linkType = LinkType.MERGE;
+        } else if (src.startsWith(linkMergeSlashPrefix)) {
+          // This is a LinkMergeSlash entry. This entry should
+          // not have any additional source path.
+          if (src.length() != linkMergeSlashPrefix.length()) {
+            throw new IOException("ViewFs: Mount points initialization error." +
+                " Invalid " + Constants.CONFIG_VIEWFS_LINK_MERGE_SLASH +
+                " entry in config: " + src);
+          }
+          linkType = LinkType.MERGE_SLASH;
-        final String target = si.getValue(); // link or merge link
-        createLink(src, target, linkType, settings, ugi, config);
+
+        final String target = si.getValue();
+        if (linkType != LinkType.MERGE_SLASH) {
+          if (isMergeSlashConfigured) {
+            throw new IOException("Mount table " + mountTableName
+                + " has already been configured with a merge slash link. "
+                + "A regular link should not be added.");
+          }
+          linkEntries.add(
+              new LinkEntry(src, target, linkType, settings, ugi, config));
+        } else {
+          if (!linkEntries.isEmpty()) {
+            throw new IOException("Mount table " + mountTableName
+                + " has already been configured with regular links. "
+                + "A merge slash link should not be configured.");
+          }
+          if (isMergeSlashConfigured) {
+            throw new IOException("Mount table " + mountTableName
+                + " has already been configured with a merge slash link. "
+                + "Multiple merge slash links for the same mount table is "
+                + "not allowed.");
+          }
+          isMergeSlashConfigured = true;
+          mergeSlashTarget = target;
+        }
+
+    if (isMergeSlashConfigured) {
+      Preconditions.checkNotNull(mergeSlashTarget);
+      root = new INodeLink<T>(mountTableName, ugi,
+          getTargetFileSystem(new URI(mergeSlashTarget)),
+          new URI(mergeSlashTarget));
+      mountPoints.add(new MountPoint<T>("/", (INodeLink<T>) root));
+      rootFallbackLink = null;
+    } else {
+      root = new INodeDir<T>("/", UserGroupInformation.getCurrentUser());
+      getRootDir().setInternalDirFs(getTargetFileSystem(getRootDir()));
+      getRootDir().setRoot(true);
+      INodeLink<T> fallbackLink = null;
+      for (LinkEntry le : linkEntries) {
+        if (le.isLinkType(LinkType.SINGLE_FALLBACK)) {
+          if (fallbackLink != null) {
+            throw new IOException("Mount table " + mountTableName
+                + " has already been configured with a link fallback. "
+                + "Multiple fallback links for the same mount table is "
+                + "not allowed.");
+          }
+          fallbackLink = new INodeLink<T>(mountTableName, ugi,
+              getTargetFileSystem(new URI(le.getTarget())),
+              new URI(le.getTarget()));
+        } else {
+          createLink(le.getSrc(), le.getTarget(), le.getLinkType(),
+              le.getSettings(), le.getUgi(), le.getConfig());
+        }
+      }
+      rootFallbackLink = fallbackLink;
+    }
+
-              "viewfs://" + vName + "/");
+              "viewfs://" + mountTableName + "/");
-   * @param p - inout path
+   * @param p - input path
-      ResolveResult<T> res =
-          new ResolveResult<T>(ResultKind.INTERNAL_DIR,
-              root.InodeDirFs, root.fullPath, SlashPath);
+      T targetFs = root.isInternalDir() ?
+          getRootDir().getInternalDirFs() : getRootLink().getTargetFileSystem();
+      ResolveResult<T> res = new ResolveResult<T>(ResultKind.INTERNAL_DIR,
+          targetFs, root.fullPath, SlashPath);
-    INodeDir<T> curInode = root;
+    /**
+     * linkMergeSlash has been configured. The root of this mount table has
+     * been linked to the root directory of a file system.
+     * The first non-slash path component should be name of the mount table.
+     */
+    if (root.isLink()) {
+      Path remainingPath;
+      StringBuilder remainingPathStr = new StringBuilder();
+      // ignore first slash
+      for (int i = 1; i < path.length; i++) {
+        remainingPathStr.append("/").append(path[i]);
+      }
+      remainingPath = new Path(remainingPathStr.toString());
+      ResolveResult<T> res = new ResolveResult<T>(ResultKind.EXTERNAL_DIR,
+          getRootLink().getTargetFileSystem(), root.fullPath, remainingPath);
+      return res;
+    }
+    Preconditions.checkState(root.isInternalDir());
+    INodeDir<T> curInode = getRootDir();
+
-        StringBuilder failedAt = new StringBuilder(path[0]);
-        for (int j = 1; j <= i; ++j) {
-          failedAt.append('/').append(path[j]);
+        if (hasFallbackLink()) {
+          return new ResolveResult<T>(ResultKind.EXTERNAL_DIR,
+              getRootFallbackLink().getTargetFileSystem(),
+              root.fullPath, new Path(p));
+        } else {
+          StringBuilder failedAt = new StringBuilder(path[0]);
+          for (int j = 1; j <= i; ++j) {
+            failedAt.append('/').append(path[j]);
+          }
+          throw (new FileNotFoundException(
+              "File/Directory does not exist: " + failedAt.toString()));
-        throw (new FileNotFoundException("File/Directory does not exist: "
-            + failedAt.toString()));
-      if (nextInode instanceof INodeLink) {
+      if (nextInode.isLink()) {
-                link.targetFileSystem, nextInode.fullPath, remainingPath);
+                link.getTargetFileSystem(), nextInode.fullPath, remainingPath);
-      } else if (nextInode instanceof INodeDir) {
+      } else if (nextInode.isInternalDir()) {
-            curInode.InodeDirFs, curInode.fullPath, remainingPath);
+            curInode.getInternalDirFs(), curInode.fullPath, remainingPath);

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS55 MOV74 INS83 INS83 INS74 INS59 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS72 INS72 INS31 INS31 INS83 MOV74 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS74 INS42 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS43 INS42 INS83 INS39 INS42 INS39 INS42 INS8 INS83 INS83 INS43 INS83 INS78 INS39 INS42 INS8 MOV43 INS42 INS8 INS39 INS42 INS44 INS8 INS39 INS42 INS44 INS8 INS39 INS42 INS8 INS74 INS42 INS8 INS65 INS29 INS29 INS42 INS29 INS29 INS42 INS29 INS78 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS21 INS21 INS41 MOV43 INS43 INS21 INS41 INS41 INS43 INS43 INS21 INS41 INS65 INS65 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS39 INS42 INS44 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS21 INS60 INS60 INS42 INS42 UPD66 INS41 UPD66 INS42 UPD42 INS42 INS41 INS41 INS43 INS42 INS21 INS39 INS42 INS21 INS41 INS43 INS43 INS74 INS41 INS66 INS65 INS65 INS65 INS65 INS65 INS42 INS41 INS42 INS41 INS32 INS49 INS49 INS53 INS32 INS11 INS42 INS32 INS11 INS27 INS42 INS42 INS32 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 MOV43 INS42 MOV43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS41 INS42 INS41 INS42 INS41 INS43 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS43 INS39 INS59 INS43 INS59 INS74 INS59 INS83 MOV43 INS59 INS83 INS43 INS59 INS42 INS8 INS8 UPD66 INS32 INS8 INS32 UPD74 MOV74 INS59 INS83 MOV74 MOV59 INS38 UPD74 INS9 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS43 INS43 INS32 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS65 INS9 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS32 MOV74 INS42 INS42 INS42 INS32 INS74 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS9 INS42 INS42 INS33 INS43 INS43 INS42 INS14 UPD42 INS42 INS40 INS42 INS42 INS40 INS21 INS21 INS21 INS21 MOV21 INS21 INS21 INS60 INS70 INS21 INS60 MOV60 INS42 INS42 INS60 MOV60 INS24 INS21 MOV60 INS41 INS42 INS42 INS32 UPD43 INS42 INS32 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS67 INS67 INS67 INS67 INS67 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 UPD42 INS42 INS42 INS74 UPD42 INS32 INS7 INS32 INS7 INS32 INS32 INS74 INS59 INS44 INS42 INS8 INS7 INS43 INS59 INS74 INS43 INS59 INS43 INS58 INS27 INS37 INS8 INS7 MOV74 INS42 INS42 INS42 UPD42 INS42 INS8 INS32 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 INS43 UPD42 INS25 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS33 INS32 INS42 INS32 INS32 INS42 INS9 INS43 INS43 INS42 INS33 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS16 INS43 INS43 INS42 INS42 INS42 UPD42 INS14 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS14 INS25 INS42 INS42 INS60 INS32 INS42 INS42 INS32 INS42 INS43 INS43 INS25 INS27 INS8 INS8 INS74 INS42 INS42 INS32 INS14 INS74 INS45 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS8 INS8 UPD42 INS32 INS32 INS32 INS42 INS42 UPD40 INS42 UPD40 UPD42 INS43 INS42 INS34 INS32 INS43 INS32 MOV74 UPD40 INS32 UPD42 INS32 INS8 MOV8 INS83 INS74 INS59 INS42 INS42 INS42 INS42 MOV32 INS32 INS42 INS42 INS21 INS32 INS8 MOV25 INS42 INS40 INS25 MOV21 INS25 INS25 INS21 INS21 MOV43 INS43 INS42 INS14 INS43 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS40 INS25 INS21 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS42 INS32 INS42 INS42 INS41 INS43 INS43 INS42 INS14 INS32 INS42 INS42 INS7 INS42 INS42 INS42 INS25 INS21 MOV21 INS25 INS42 INS8 INS38 INS8 INS42 INS8 INS7 INS7 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS43 INS27 INS8 INS7 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS74 INS40 INS32 INS40 INS42 INS42 UPD42 INS42 INS40 INS27 INS8 INS7 INS32 INS8 MOV25 INS53 INS42 INS42 INS14 INS32 INS53 INS53 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS53 INS42 INS14 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS74 INS40 INS32 INS40 INS14 INS43 INS43 INS42 INS42 INS32 INS32 INS53 INS42 INS40 INS42 INS42 INS42 INS25 INS21 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS14 INS14 INS74 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS27 INS8 INS7 INS43 INS27 INS42 INS43 INS27 INS43 INS27 INS43 INS27 INS43 INS43 INS42 INS14 INS43 INS32 INS42 INS42 INS42 INS42 UPD45 UPD45 INS43 INS27 INS32 INS32 INS53 INS42 INS40 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS45 INS45 INS42 INS45 INS42 INS45 INS45 INS45 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS27 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS45 INS45 INS43 INS27 INS42 INS27 INS40 INS45 INS42 INS45 INS45 DEL42 DEL42 DEL40 DEL7 DEL42 DEL62 DEL42 DEL42 DEL43 DEL62 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL9 DEL7 DEL21 DEL40 DEL45 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL40 DEL42 DEL40 DEL42 DEL62 DEL42 DEL42 DEL43 DEL62 DEL40 DEL83 DEL60