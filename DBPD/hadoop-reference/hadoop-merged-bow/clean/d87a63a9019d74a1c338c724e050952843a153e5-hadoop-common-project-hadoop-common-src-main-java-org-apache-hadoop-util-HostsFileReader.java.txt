HADOOP-14412. HostsFileReader#getHostDetails is very expensive on large clusters. Contributed by Jason Lowe.

+import java.util.Collections;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
+import java.util.concurrent.atomic.AtomicReference;
-  private Set<String> includes;
-  // exclude host list with optional timeout.
-  // If the value is null, it indicates default timeout.
-  private Map<String, Integer> excludes;
-  private String includesFile;
-  private String excludesFile;
-  private WriteLock writeLock;
-  private ReadLock readLock;
-  
-  public HostsFileReader(String inFile, 
+  private final AtomicReference<HostDetails> current;
+
+  public HostsFileReader(String inFile,
-    includes = new HashSet<String>();
-    excludes = new HashMap<String, Integer>();
-    includesFile = inFile;
-    excludesFile = exFile;
-    ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
-    this.writeLock = rwLock.writeLock();
-    this.readLock = rwLock.readLock();
-    refresh();
+    HostDetails hostDetails = new HostDetails(
+        inFile, Collections.emptySet(),
+        exFile, Collections.emptyMap());
+    current = new AtomicReference<>(hostDetails);
+    refresh(inFile, exFile);
-    includes = new HashSet<String>();
-    excludes = new HashMap<String, Integer>();
-    this.includesFile = includesFile;
-    this.excludesFile = excludesFile;
-    ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
-    this.writeLock = rwLock.writeLock();
-    this.readLock = rwLock.readLock();
+    HostDetails hostDetails = new HostDetails(
+        includesFile, Collections.emptySet(),
+        excludesFile, Collections.emptyMap());
+    current = new AtomicReference<>(hostDetails);
-    this.writeLock.lock();
-    try {
-      refresh(includesFile, excludesFile);
-    } finally {
-      this.writeLock.unlock();
-    }
+    HostDetails hostDetails = current.get();
+    refresh(hostDetails.includesFile, hostDetails.excludesFile);
-  public void refresh(String includeFiles, String excludeFiles)
+  public void refresh(String includesFile, String excludesFile)
-    this.writeLock.lock();
-    try {
-      // update instance variables
-      updateFileNames(includeFiles, excludeFiles);
-      Set<String> newIncludes = new HashSet<String>();
-      Map<String, Integer> newExcludes = new HashMap<String, Integer>();
-      boolean switchIncludes = false;
-      boolean switchExcludes = false;
-      if (includeFiles != null && !includeFiles.isEmpty()) {
-        readFileToSet("included", includeFiles, newIncludes);
-        switchIncludes = true;
-      }
-      if (excludeFiles != null && !excludeFiles.isEmpty()) {
-        readFileToMap("excluded", excludeFiles, newExcludes);
-        switchExcludes = true;
-      }
-
-      if (switchIncludes) {
-        // switch the new hosts that are to be included
-        includes = newIncludes;
-      }
-      if (switchExcludes) {
-        // switch the excluded hosts
-        excludes = newExcludes;
-      }
-    } finally {
-      this.writeLock.unlock();
+    HostDetails oldDetails = current.get();
+    Set<String> newIncludes = oldDetails.includes;
+    Map<String, Integer> newExcludes = oldDetails.excludes;
+    if (includesFile != null && !includesFile.isEmpty()) {
+      newIncludes = new HashSet<>();
+      readFileToSet("included", includesFile, newIncludes);
+      newIncludes = Collections.unmodifiableSet(newIncludes);
+    if (excludesFile != null && !excludesFile.isEmpty()) {
+      newExcludes = new HashMap<>();
+      readFileToMap("excluded", excludesFile, newExcludes);
+      newExcludes = Collections.unmodifiableMap(newExcludes);
+    }
+    HostDetails newDetails = new HostDetails(includesFile, newIncludes,
+        excludesFile, newExcludes);
+    current.set(newDetails);
-    this.writeLock.lock();
-    try {
-      Set<String> newIncludes = new HashSet<String>();
-      Map<String, Integer> newExcludes = new HashMap<String, Integer>();
-      boolean switchIncludes = false;
-      boolean switchExcludes = false;
-      if (inFileInputStream != null) {
-        readFileToSetWithFileInputStream("included", includesFile,
-            inFileInputStream, newIncludes);
-        switchIncludes = true;
-      }
-      if (exFileInputStream != null) {
-        readFileToMapWithFileInputStream("excluded", excludesFile,
-            exFileInputStream, newExcludes);
-        switchExcludes = true;
-      }
-      if (switchIncludes) {
-        // switch the new hosts that are to be included
-        includes = newIncludes;
-      }
-      if (switchExcludes) {
-        // switch the excluded hosts
-        excludes = newExcludes;
-      }
-    } finally {
-      this.writeLock.unlock();
+    HostDetails oldDetails = current.get();
+    Set<String> newIncludes = oldDetails.includes;
+    Map<String, Integer> newExcludes = oldDetails.excludes;
+    if (inFileInputStream != null) {
+      newIncludes = new HashSet<>();
+      readFileToSetWithFileInputStream("included", oldDetails.includesFile,
+          inFileInputStream, newIncludes);
+      newIncludes = Collections.unmodifiableSet(newIncludes);
+    if (exFileInputStream != null) {
+      newExcludes = new HashMap<>();
+      readFileToMapWithFileInputStream("excluded", oldDetails.excludesFile,
+          exFileInputStream, newExcludes);
+      newExcludes = Collections.unmodifiableMap(newExcludes);
+    }
+    HostDetails newDetails = new HostDetails(
+        oldDetails.includesFile, newIncludes,
+        oldDetails.excludesFile, newExcludes);
+    current.set(newDetails);
-    this.readLock.lock();
-    try {
-      return includes;
-    } finally {
-      this.readLock.unlock();
-    }
+    HostDetails hostDetails = current.get();
+    return hostDetails.getIncludedHosts();
-    this.readLock.lock();
-    try {
-      return excludes.keySet();
-    } finally {
-      this.readLock.unlock();
-    }
+    HostDetails hostDetails = current.get();
+    return hostDetails.getExcludedHosts();
+  /**
+   * Retrieve an atomic view of the included and excluded hosts.
+   *
+   * @param includes set to populate with included hosts
+   * @param excludes set to populate with excluded hosts
+   * @deprecated use {@link #getHostDetails() instead}
+   */
+  @Deprecated
-    this.readLock.lock();
-    try {
-      includes.addAll(this.includes);
-      excludes.addAll(this.excludes.keySet());
-    } finally {
-      this.readLock.unlock();
-    }
+    HostDetails hostDetails = current.get();
+    includes.addAll(hostDetails.getIncludedHosts());
+    excludes.addAll(hostDetails.getExcludedHosts());
+  /**
+   * Retrieve an atomic view of the included and excluded hosts.
+   *
+   * @param includeHosts set to populate with included hosts
+   * @param excludeHosts map to populate with excluded hosts
+   * @deprecated use {@link #getHostDetails() instead}
+   */
+  @Deprecated
-    this.readLock.lock();
-    try {
-      includeHosts.addAll(this.includes);
-      excludeHosts.putAll(this.excludes);
-    } finally {
-      this.readLock.unlock();
-    }
+    HostDetails hostDetails = current.get();
+    includeHosts.addAll(hostDetails.getIncludedHosts());
+    excludeHosts.putAll(hostDetails.getExcludedMap());
+  }
+
+  /**
+   * Retrieve an atomic view of the included and excluded hosts.
+   *
+   * @return the included and excluded hosts
+   */
+  public HostDetails getHostDetails() {
+    return current.get();
-    this.includesFile = includesFile;
+    HostDetails oldDetails = current.get();
+    HostDetails newDetails = new HostDetails(includesFile, oldDetails.includes,
+        oldDetails.excludesFile, oldDetails.excludes);
+    current.set(newDetails);
-    this.excludesFile = excludesFile;
+    HostDetails oldDetails = current.get();
+    HostDetails newDetails = new HostDetails(
+        oldDetails.includesFile, oldDetails.includes,
+        excludesFile, oldDetails.excludes);
+    current.set(newDetails);
-  public void updateFileNames(String includeFiles, String excludeFiles) {
-    this.writeLock.lock();
-    try {
-      setIncludesFile(includeFiles);
-      setExcludesFile(excludeFiles);
-    } finally {
-      this.writeLock.unlock();
+  public void updateFileNames(String includesFile, String excludesFile) {
+    LOG.info("Setting the includes file to " + includesFile);
+    LOG.info("Setting the excludes file to " + excludesFile);
+    HostDetails oldDetails = current.get();
+    HostDetails newDetails = new HostDetails(includesFile, oldDetails.includes,
+        excludesFile, oldDetails.excludes);
+    current.set(newDetails);
+  }
+
+  /**
+   * An atomic view of the included and excluded hosts
+   */
+  public static class HostDetails {
+    private final String includesFile;
+    private final Set<String> includes;
+    private final String excludesFile;
+    // exclude host list with optional timeout.
+    // If the value is null, it indicates default timeout.
+    private final Map<String, Integer> excludes;
+
+    HostDetails(String includesFile, Set<String> includes,
+        String excludesFile, Map<String, Integer> excludes) {
+      this.includesFile = includesFile;
+      this.includes = includes;
+      this.excludesFile = excludesFile;
+      this.excludes = excludes;
+    }
+
+    public String getIncludesFile() {
+      return includesFile;
+    }
+
+    public Set<String> getIncludedHosts() {
+      return includes;
+    }
+
+    public String getExcludesFile() {
+      return excludesFile;
+    }
+
+    public Set<String> getExcludedHosts() {
+      return excludes.keySet();
+    }
+
+    public Map<String, Integer> getExcludedMap() {
+      return excludes;

MOV26 MOV26 UPD40 UPD40 INS23 INS31 INS31 INS31 INS55 MOV83 INS83 INS74 MOV59 INS74 INS83 INS74 INS42 INS8 INS29 INS78 INS29 INS78 INS29 INS43 INS42 UPD42 INS44 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV44 MOV8 INS29 INS83 INS83 INS42 MOV23 MOV23 MOV23 MOV23 INS31 INS31 INS31 INS31 MOV31 INS31 INS43 INS43 UPD42 INS60 INS60 INS60 MOV21 UPD42 UPD42 INS60 MOV60 MOV60 MOV25 MOV25 INS60 MOV21 INS60 MOV60 MOV60 MOV25 MOV25 INS60 MOV21 INS43 INS43 INS60 INS41 INS43 INS43 INS60 INS41 INS65 INS65 INS65 INS65 INS42 INS60 MOV21 MOV21 INS65 INS65 INS65 INS65 INS42 INS60 MOV21 MOV21 INS65 INS65 INS42 INS41 INS43 INS42 INS60 INS60 INS21 UPD42 MOV21 INS60 INS60 INS21 UPD42 MOV21 INS60 INS60 MOV21 INS65 INS83 INS83 INS83 INS83 INS42 INS44 INS44 MOV44 INS44 INS8 INS83 MOV43 INS42 INS8 INS83 MOV74 INS42 MOV8 INS83 MOV43 INS42 INS8 MOV8 INS83 INS74 INS42 INS8 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS43 INS59 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS43 INS59 INS32 INS66 INS66 INS32 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS66 INS43 INS42 INS74 INS42 INS74 INS42 MOV21 MOV21 MOV21 MOV21 INS41 INS41 INS43 INS43 INS43 INS41 UPD42 MOV42 INS42 INS14 INS42 INS14 INS42 INS42 UPD42 MOV42 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS40 INS40 INS42 INS42 INS32 INS40 INS40 INS21 INS21 INS42 INS42 INS14 INS42 UPD42 INS42 INS42 INS42 INS32 INS40 INS40 INS21 INS21 INS42 INS42 INS14 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS68 INS66 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS68 INS66 INS42 INS42 INS32 UPD42 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 UPD42 INS27 INS42 INS42 INS32 INS42 INS42 INS14 INS42 UPD42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS32 INS74 INS42 INS43 INS42 INS32 INS42 INS32 INS74 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS7 UPD42 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS43 INS40 INS42 INS40 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS45 INS42 INS42 INS42 INS43 INS42 INS40 INS40 INS40 INS42 INS42 INS43 INS40 INS40 INS42 INS40 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 MOV22 INS42 MOV22 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 UPD42 INS42 MOV14 UPD42 UPD42 INS32 UPD42 INS42 MOV14 UPD42 UPD42 INS32 INS42 INS42 MOV14 INS40 UPD42 INS32 INS42 MOV14 INS40 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD74 INS42 INS42 INS42 UPD74 INS42 INS42 INS42 UPD74 INS42 INS42 INS42 UPD74 INS42 INS42 INS42 DEL40 DEL26 DEL43 DEL42 DEL59 DEL23 DEL83 DEL43 DEL23 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL8 DEL54 DEL9 DEL42 DEL43 DEL9 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL8 DEL54 DEL42 DEL43 DEL42 DEL9 DEL42 DEL43 DEL42 DEL43 DEL42 DEL9 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL8 DEL54 DEL52 DEL42 DEL22 DEL32 DEL21 DEL52 DEL42 DEL22 DEL32 DEL21 DEL8 DEL54 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL21 DEL8 DEL8 DEL54 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL21 DEL8 DEL8 DEL54 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL54 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31