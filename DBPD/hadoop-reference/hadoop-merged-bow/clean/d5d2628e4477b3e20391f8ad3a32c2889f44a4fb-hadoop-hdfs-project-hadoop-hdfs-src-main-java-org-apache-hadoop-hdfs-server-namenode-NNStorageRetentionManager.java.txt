Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Comparator;
+import com.google.common.collect.ComparisonChain;
+  private final int maxExtraEditsSegmentsToRetain;
-  private final FSEditLog editLog;
+  private final LogsPurgeable purgeableLogs;
-      FSEditLog editLog,
+      LogsPurgeable purgeableLogs,
+    this.maxExtraEditsSegmentsToRetain = conf.getInt(
+        DFSConfigKeys.DFS_NAMENODE_MAX_EXTRA_EDITS_SEGMENTS_RETAINED_KEY,
+        DFSConfigKeys.DFS_NAMENODE_MAX_EXTRA_EDITS_SEGMENTS_RETAINED_DEFAULT);
-    this.editLog = editLog;
+    this.purgeableLogs = purgeableLogs;
-      FSEditLog editLog) {
-    this(conf, storage, editLog, new DeletionStoragePurger());
+      LogsPurgeable purgeableLogs) {
+    this(conf, storage, purgeableLogs, new DeletionStoragePurger());
-    long purgeLogsFrom = Math.max(0, minImageTxId + 1 - numExtraEditsToRetain);
-    editLog.purgeLogsOlderThan(purgeLogsFrom);
+    //
+    // First, determine the target number of extra transactions to retain based
+    // on the configured amount.
+    long minimumRequiredTxId = minImageTxId + 1;
+    long purgeLogsFrom = Math.max(0, minimumRequiredTxId - numExtraEditsToRetain);
+    
+    ArrayList<EditLogInputStream> editLogs = new ArrayList<EditLogInputStream>();
+    purgeableLogs.selectInputStreams(editLogs, purgeLogsFrom, false);
+    Collections.sort(editLogs, new Comparator<EditLogInputStream>() {
+      @Override
+      public int compare(EditLogInputStream a, EditLogInputStream b) {
+        return ComparisonChain.start()
+            .compare(a.getFirstTxId(), b.getFirstTxId())
+            .compare(a.getLastTxId(), b.getLastTxId())
+            .result();
+      }
+    });
+    
+    // Next, adjust the number of transactions to retain if doing so would mean
+    // keeping too many segments around.
+    while (editLogs.size() > maxExtraEditsSegmentsToRetain) {
+      purgeLogsFrom = editLogs.get(0).getFirstTxId();
+      editLogs.remove(0);
+    }
+    
+    // Finally, ensure that we're not trying to purge any transactions that we
+    // actually need.
+    if (purgeLogsFrom > minimumRequiredTxId) {
+      throw new AssertionError("Should not purge more edits than required to "
+          + "restore: " + purgeLogsFrom + " should be <= "
+          + minimumRequiredTxId);
+    }
+    
+    purgeableLogs.purgeLogsOlderThan(purgeLogsFrom);
-        LOG.info("Purging old image " + image);
+      LOG.info("Purging old edit log " + log);
+      LOG.info("Purging old image " + image);

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS83 INS83 INS39 INS59 UPD43 INS42 UPD42 UPD42 UPD43 UPD42 INS21 UPD43 UPD42 INS60 INS60 INS21 INS21 INS61 INS25 UPD42 INS7 UPD42 UPD42 INS39 INS59 INS74 INS59 INS32 INS32 INS27 INS8 INS27 INS8 INS21 MOV21 INS22 INS32 UPD42 INS42 MOV27 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS14 INS32 INS42 INS21 INS21 INS42 INS42 INS53 UPD42 INS32 INS52 INS42 INS42 INS42 INS40 INS40 UPD42 INS42 INS42 INS74 INS74 INS1 INS42 INS42 INS7 INS32 INS14 INS42 INS42 INS27 INS42 INS43 INS43 INS43 INS43 INS31 INS42 INS32 INS42 INS42 INS34 INS43 INS27 INS45 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS32 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS34 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42