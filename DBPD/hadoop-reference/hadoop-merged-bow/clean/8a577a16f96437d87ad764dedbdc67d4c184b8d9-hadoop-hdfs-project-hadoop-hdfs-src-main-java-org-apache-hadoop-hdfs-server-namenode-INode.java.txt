HDFS-4150.  Update the inode in the block map when a snapshotted file or a snapshot file is deleted. Contributed by Jing Zhao


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1406763 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockCollection;
-   *          INode. These blocks later should be removed from the blocksMap.
+   *          INode. These blocks later should be removed/updated in the
+   *          blocksMap.
-  public static class BlocksMapUpdateInfo {
-    /**
-     * The list of blocks that need to be removed from blocksMap
-     */
-    private List<Block> toDeleteList;
-    
-    public BlocksMapUpdateInfo(List<Block> toDeleteList) {
-      this.toDeleteList = toDeleteList == null ? new ArrayList<Block>()
-          : toDeleteList;
-    }
+  public static class BlocksMapUpdateInfo implements
+      Iterable<Map.Entry<Block, BlocksMapINodeUpdateEntry>> {
+    private final Map<Block, BlocksMapINodeUpdateEntry> updateMap;
-      toDeleteList = new ArrayList<Block>();
+      updateMap = new HashMap<Block, BlocksMapINodeUpdateEntry>();
-     * @return The list of blocks that need to be removed from blocksMap
-     */
-    public List<Block> getToDeleteList() {
-      return toDeleteList;
-    }
-    
-    /**
-     * Add a to-be-deleted block into the
-     * {@link BlocksMapUpdateInfo#toDeleteList}
+     * Add a to-be-deleted block. This block should belongs to a file without
+     * snapshots. We thus only need to put a block-null pair into the updateMap.
+     * 
-        toDeleteList.add(toDelete);
+        updateMap.put(toDelete, null);
-     * Clear {@link BlocksMapUpdateInfo#toDeleteList}
+     * Add a given block, as well as its old and new BlockCollection
+     * information, into the updateMap.
+     * 
+     * @param toUpdateBlock
+     *          The given block
+     * @param entry
+     *          The BlocksMapINodeUpdateEntry instance containing both the
+     *          original BlockCollection of the given block and the new
+     *          BlockCollection of the given block for updating the blocksMap.
+     *          The new BlockCollection should be the INode of one of the
+     *          corresponding file's snapshot.
+     */
+    public void addUpdateBlock(Block toUpdateBlock,
+        BlocksMapINodeUpdateEntry entry) {
+      updateMap.put(toUpdateBlock, entry);
+    }
+
+    /**
+     * Clear {@link BlocksMapUpdateInfo#updateMap}
-      toDeleteList.clear();
+      updateMap.clear();
+    }
+
+    @Override
+    public Iterator<Map.Entry<Block, BlocksMapINodeUpdateEntry>> iterator() {
+      return updateMap.entrySet().iterator();
+    }
+  }
+  
+  /**
+   * When deleting a file with snapshot, we cannot directly remove its record
+   * from blocksMap. Instead, we should consider replacing the original record
+   * in blocksMap with INode of snapshot.
+   */
+  public static class BlocksMapINodeUpdateEntry {
+    /**
+     * The BlockCollection of the file to be deleted
+     */
+    private final BlockCollection toDelete;
+    /**
+     * The BlockCollection of the to-be-deleted file's snapshot
+     */
+    private final BlockCollection toReplace;
+
+    public BlocksMapINodeUpdateEntry(BlockCollection toDelete,
+        BlockCollection toReplace) {
+      this.toDelete = toDelete;
+      this.toReplace = toReplace;
+    }
+
+    public BlockCollection getToDelete() {
+      return toDelete;
+    }
+
+    public BlockCollection getToReplace() {
+      return toReplace;

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS55 INS74 INS23 INS31 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 UPD43 MOV43 INS74 INS83 INS83 INS74 INS59 INS39 UPD42 MOV44 INS8 UPD42 INS44 INS44 INS8 INS78 INS83 INS74 INS42 INS8 INS65 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 UPD66 INS66 UPD42 INS43 MOV43 UPD43 MOV43 UPD43 MOV43 MOV43 INS43 INS42 UPD65 MOV65 INS25 INS65 INS65 INS65 MOV43 INS42 INS43 INS42 MOV21 INS42 INS43 INS74 INS41 INS66 INS66 INS66 INS65 INS42 INS42 INS65 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS41 INS40 UPD42 UPD42 INS42 UPD66 INS66 MOV27 INS8 UPD66 MOV66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS43 MOV43 INS43 INS32 INS66 INS66 INS42 INS42 INS7 INS7 INS42 INS42 UPD42 INS21 UPD42 UPD42 UPD42 INS42 UPD42 INS40 INS42 INS32 INS42 INS22 INS42 INS22 INS42 UPD74 INS32 UPD42 INS42 INS42 INS52 INS42 INS52 INS42 UPD43 INS43 INS42 INS42 INS42 INS33 UPD42 INS42 DEL66 DEL65 DEL29 DEL83 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL74 DEL14 DEL42 DEL16 DEL7 DEL21 DEL8 DEL31 DEL42 DEL43 DEL74 DEL42 DEL41 DEL8 DEL42 DEL42 DEL67 DEL65 DEL65 DEL8 DEL25 DEL8