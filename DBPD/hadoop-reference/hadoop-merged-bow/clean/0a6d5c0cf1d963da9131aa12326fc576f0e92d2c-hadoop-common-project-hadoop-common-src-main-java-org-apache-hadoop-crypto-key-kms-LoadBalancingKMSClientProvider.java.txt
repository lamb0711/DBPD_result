HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.

+import java.io.InterruptedIOException;
+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
+import org.apache.hadoop.io.retry.RetryPolicies;
+import org.apache.hadoop.io.retry.RetryPolicy;
+import org.apache.hadoop.io.retry.RetryPolicy.RetryAction;
+import org.apache.hadoop.security.AccessControlException;
-import org.apache.hadoop.util.StringUtils;
+  private RetryPolicy retryPolicy = null;
+
+    int maxNumRetries = conf.getInt(CommonConfigurationKeysPublic.
+        KMS_CLIENT_FAILOVER_MAX_RETRIES_KEY, providers.length);
+    int sleepBaseMillis = conf.getInt(CommonConfigurationKeysPublic.
+        KMS_CLIENT_FAILOVER_SLEEP_BASE_MILLIS_KEY,
+        CommonConfigurationKeysPublic.
+            KMS_CLIENT_FAILOVER_SLEEP_BASE_MILLIS_DEFAULT);
+    int sleepMaxMillis = conf.getInt(CommonConfigurationKeysPublic.
+        KMS_CLIENT_FAILOVER_SLEEP_MAX_MILLIS_KEY,
+        CommonConfigurationKeysPublic.
+            KMS_CLIENT_FAILOVER_SLEEP_MAX_MILLIS_DEFAULT);
+    Preconditions.checkState(maxNumRetries >= 0);
+    Preconditions.checkState(sleepBaseMillis >= 0);
+    Preconditions.checkState(sleepMaxMillis >= 0);
+    this.retryPolicy = RetryPolicies.failoverOnNetworkException(
+        RetryPolicies.TRY_ONCE_THEN_FAIL, maxNumRetries, 0, sleepBaseMillis,
+        sleepMaxMillis);
-  KMSClientProvider[] getProviders() {
+  public KMSClientProvider[] getProviders() {
+    if (providers.length == 0) {
+      throw new IOException("No providers configured !");
+    }
-    for (int i = 0; i < providers.length; i++) {
+    int numFailovers = 0;
+    for (int i = 0;; i++, numFailovers++) {
+      } catch (AccessControlException ace) {
+        // No need to retry on AccessControlException
+        // and AuthorizationException.
+        // This assumes all the servers are configured with identical
+        // permissions and identical key acls.
+        throw ace;
-        LOG.warn("KMS provider at [{}] threw an IOException!! {}",
-            provider.getKMSUrl(), StringUtils.stringifyException(ioe));
+        LOG.warn("KMS provider at [{}] threw an IOException: ",
+            provider.getKMSUrl(), ioe);
+
+        RetryAction action = null;
+        try {
+          action = retryPolicy.shouldRetry(ioe, 0, numFailovers, false);
+        } catch (Exception e) {
+          if (e instanceof IOException) {
+            throw (IOException)e;
+          }
+          throw new IOException(e);
+        }
+        if (action.action == RetryAction.RetryDecision.FAIL) {
+          LOG.warn("Aborting since the Request has failed with all KMS"
+              + " providers(depending on {}={} setting and numProviders={})"
+              + " in the group OR the exception is not recoverable",
+              CommonConfigurationKeysPublic.KMS_CLIENT_FAILOVER_MAX_RETRIES_KEY,
+              getConf().getInt(
+                  CommonConfigurationKeysPublic.
+                  KMS_CLIENT_FAILOVER_MAX_RETRIES_KEY, providers.length),
+              providers.length);
+          throw ex;
+        }
+        if (((numFailovers + 1) % providers.length) == 0) {
+          // Sleep only after we try all the providers for every cycle.
+          try {
+            Thread.sleep(action.delayMillis);
+          } catch (InterruptedException e) {
+            throw new InterruptedIOException("Thread Interrupted");
+          }
+        }
-    if (ex != null) {
-      LOG.warn("Aborting since the Request has failed with all KMS"
-          + " providers in the group. !!");
-      throw ex;
-    }
-    throw new IOException("No providers configured !!");

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS40 INS23 INS83 INS43 INS59 INS83 MOV25 INS42 INS42 INS33 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS60 INS39 INS59 INS39 INS59 INS39 INS59 INS32 INS32 INS32 INS7 UPD27 INS39 INS59 INS37 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS22 INS32 INS40 INS34 MOV53 INS42 INS34 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS34 INS42 INS34 INS42 INS34 INS52 INS42 INS42 INS42 INS40 INS42 INS34 INS42 INS42 INS12 UPD45 INS44 INS8 INS43 INS42 INS53 INS21 INS60 INS54 INS25 INS25 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS27 INS8 INS27 INS8 MOV42 MOV42 UPD45 MOV45 MOV32 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS40 INS40 INS21 MOV53 INS36 INS34 INS54 INS7 INS43 INS42 INS25 INS53 INS32 INS27 INS8 INS12 INS42 INS32 INS42 INS62 INS8 INS14 INS42 INS42 INS27 INS40 INS32 INS40 INS36 INS40 INS21 INS44 INS8 UPD42 MOV42 UPD42 MOV42 MOV42 INS34 INS42 INS9 INS42 INS43 INS53 INS43 INS42 INS45 INS45 INS45 INS32 INS42 INS40 INS40 INS27 INS32 INS43 INS42 INS53 INS42 INS11 INS42 INS42 INS42 INS34 INS42 INS42 INS40 INS42 INS14 INS43 INS42 INS43 INS45 INS42 INS42 DEL42 DEL33 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL42 DEL40 DEL27 DEL32 DEL32 DEL21