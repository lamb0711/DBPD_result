HDDS-1395. Key write fails with BlockOutputStream has been closed exception (#749). Contributed by Shashikant Banerjee

+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerNotOpenException;
+import org.apache.hadoop.io.retry.RetryPolicies;
+import org.apache.hadoop.io.retry.RetryPolicy;
+import org.apache.ratis.protocol.AlreadyClosedException;
+import org.apache.ratis.protocol.GroupMismatchException;
+import org.apache.ratis.protocol.NotReplicatedException;
+import org.apache.ratis.protocol.RaftRetryFailureException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
-
+import java.util.concurrent.TimeoutException;
+  private static final List<Class<? extends Exception>> EXCEPTION_LIST =
+      new ArrayList<Class<? extends Exception>>() {{
+        add(TimeoutException.class);
+        add(ContainerNotOpenException.class);
+        add(RaftRetryFailureException.class);
+        add(AlreadyClosedException.class);
+        add(GroupMismatchException.class);
+        // Not Replicated Exception will be thrown if watch For commit
+        // does not succeed
+        add(NotReplicatedException.class);
+      }};
+
+
+  public static Throwable checkForException(Exception e) throws IOException {
+    Throwable t = e;
+    while (t != null) {
+      for (Class<? extends Exception> cls : getExceptionList()) {
+        if (cls.isInstance(t)) {
+          return t;
+        }
+      }
+      t = t.getCause();
+    }
+
+    throw e instanceof IOException ? (IOException)e : new IOException(e);
+  }
+
+  public static RetryPolicy createRetryPolicy(int maxRetryCount,
+      long retryInterval) {
+    // retry with fixed sleep between retries
+    return RetryPolicies.retryUpToMaximumCountWithFixedSleep(
+        maxRetryCount, retryInterval, TimeUnit.MILLISECONDS);
+  }
+
+  public static Map<Class<? extends Throwable>,
+      RetryPolicy> getRetryPolicyByException(int maxRetryCount,
+      long retryInterval) {
+    Map<Class<? extends Throwable>, RetryPolicy> policyMap = new HashMap<>();
+    for (Class<? extends Exception> ex : EXCEPTION_LIST) {
+      if (ex == TimeoutException.class
+          || ex == RaftRetryFailureException.class) {
+        // retry without sleep
+        policyMap.put(ex, createRetryPolicy(maxRetryCount, 0));
+      } else {
+        // retry with fixed sleep between retries
+        policyMap.put(ex, createRetryPolicy(maxRetryCount, retryInterval));
+      }
+    }
+    // Default retry policy
+    policyMap
+        .put(Exception.class, createRetryPolicy(maxRetryCount, retryInterval));
+    return policyMap;
+  }
+
+  public static List<Class<? extends Exception>> getExceptionList() {
+    return EXCEPTION_LIST;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS8 INS43 INS74 INS42 INS14 INS42 INS43 INS42 INS42 INS60 INS61 INS53 INS42 INS39 INS42 INS39 INS42 INS41 INS43 INS74 INS43 INS39 INS42 INS39 INS42 INS60 INS70 INS21 INS41 INS43 INS74 INS41 INS42 INS43 INS76 INS74 INS1 INS42 INS43 INS59 INS27 INS8 INS16 INS32 INS42 INS43 INS76 INS42 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS43 INS76 INS42 INS42 INS43 INS43 INS74 INS28 INS42 INS42 INS42 INS42 INS33 INS70 INS21 INS62 INS11 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS43 INS74 INS43 INS42 INS14 INS74 INS42 INS25 INS42 INS42 INS57 INS32 INS42 INS43 INS42 INS42 INS43 INS76 INS8 INS44 INS32 INS8 INS7 INS42 INS43 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS76 INS42 INS74 INS43 INS76 INS27 INS8 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS21 INS21 INS21 INS21 INS21 INS21 INS74 INS42 INS42 INS25 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS43 INS27 INS27 INS21 INS21 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS76 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS57 INS32 INS32 INS42 INS57 INS42 INS57 INS42 INS57 INS42 INS57 INS42 INS57 INS42 INS57 INS42 INS43 INS42 INS42 INS42 INS41 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42