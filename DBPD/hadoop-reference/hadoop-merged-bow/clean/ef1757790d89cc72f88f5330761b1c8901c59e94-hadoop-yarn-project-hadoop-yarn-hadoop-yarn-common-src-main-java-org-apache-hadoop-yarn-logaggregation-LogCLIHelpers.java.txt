YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.

+import java.nio.file.Files;
+import java.nio.file.Paths;
-
+import org.apache.commons.io.IOUtils;
-      null);
+      null, null);
-      String nodeId, String jobOwner, List<String> logType)
+      String nodeId, String jobOwner, List<String> logType, String localDir)
-    return dumpAContainersLogsForALogType(appId, containerId, nodeId, jobOwner,
-        logType, true);
+    return dumpAContainersLogsForALogType(appId, containerId, nodeId,
+        jobOwner, logType, true, localDir);
-      boolean outputFailure) throws IOException {
+      boolean outputFailure, String localDir) throws IOException {
+        PrintStream out = createPrintStream(localDir, fileName, containerId);
+          String containerString = "\n\nContainer: " + containerId;
+          out.println(containerString);
+          out.println(StringUtils.repeat("=", containerString.length()));
-            if (dumpAContainerLogs(containerId, reader, System.out,
+            if (dumpAContainerLogs(containerId, reader, out,
-            if (dumpAContainerLogsForALogType(containerId, reader, System.out,
+            if (dumpAContainerLogsForALogType(containerId, reader, out,
+          closePrintStream(out);
-    if (!foundContainerLogs && outputFailure) {
-      containerLogNotFound(containerId);
+    if (!foundContainerLogs) {
+      if (outputFailure) {
+        containerLogNotFound(containerId);
+      }
-      String containerId, String jobOwner, List<String> logType)
-    throws IOException {
+      String containerId, String jobOwner, List<String> logType,
+      String localDir) throws IOException {
+        PrintStream out = System.out;
+          if (getContainerLogsStream(containerId, reader) == null) {
+            continue;
+          }
+          reader =
+              new AggregatedLogFormat.LogReader(getConf(),
+              thisNodeFile.getPath());
+          out = createPrintStream(localDir, thisNodeFile.getPath().getName(),
+              containerId);
+          out.println(containerId);
+          out.println(StringUtils.repeat("=", containerId.length()));
-            if (dumpAContainerLogs(containerId, reader, System.out,
+            if (dumpAContainerLogs(containerId, reader, out,
-            if (dumpAContainerLogsForALogType(containerId, reader, System.out,
+            if (dumpAContainerLogsForALogType(containerId, reader, out,
+          closePrintStream(out);
+
-    DataInputStream valueStream;
-    LogKey key = new LogKey();
-    valueStream = reader.next(key);
-
-    while (valueStream != null && !key.toString().equals(containerIdStr)) {
-      // Next container
-      key = new LogKey();
-      valueStream = reader.next(key);
-    }
+    DataInputStream valueStream = getContainerLogsStream(
+        containerIdStr, reader);
-  @Private
-  public int dumpAContainerLogsForALogType(String containerIdStr,
-      AggregatedLogFormat.LogReader reader, PrintStream out,
-      long logUploadedTime, List<String> logType) throws IOException {
+  private DataInputStream getContainerLogsStream(String containerIdStr,
+      AggregatedLogFormat.LogReader reader) throws IOException {
+    return valueStream;
+  }
+  @Private
+  public int dumpAContainerLogsForALogType(String containerIdStr,
+      AggregatedLogFormat.LogReader reader, PrintStream out,
+      long logUploadedTime, List<String> logType) throws IOException {
+    DataInputStream valueStream = getContainerLogsStream(
+        containerIdStr, reader);
-      PrintStream out) throws IOException {
+      String localDir) throws IOException {
-
-            String containerString =
-                "\n\nContainer: " + key + " on "
-                + thisNodeFile.getPath().getName();
-            out.println(containerString);
-            out.println(StringUtils.repeat("=", containerString.length()));
-            while (true) {
-              try {
-                LogReader.readAContainerLogsForALogType(valueStream, out,
-                    thisNodeFile.getModificationTime());
-                foundAnyLogs = true;
-              } catch (EOFException eof) {
-                break;
+            PrintStream out = createPrintStream(localDir,
+                thisNodeFile.getPath().getName(), key.toString());
+            try {
+              String containerString =
+                  "\n\nContainer: " + key + " on "
+                  + thisNodeFile.getPath().getName();
+              out.println(containerString);
+              out.println(StringUtils.repeat("=", containerString.length()));
+              while (true) {
+                try {
+                  LogReader.readAContainerLogsForALogType(valueStream, out,
+                      thisNodeFile.getModificationTime());
+                  foundAnyLogs = true;
+                } catch (EOFException eof) {
+                  break;
+                }
+            } finally {
+              closePrintStream(out);
+
+  @Private
+  public PrintStream createPrintStream(String localDir, String nodeId,
+      String containerId) throws IOException {
+    PrintStream out = System.out;
+    if(localDir != null && !localDir.isEmpty()) {
+      Path nodePath = new Path(localDir, LogAggregationUtils
+          .getNodeString(nodeId));
+      Files.createDirectories(Paths.get(nodePath.toString()));
+      Path containerLogPath = new Path(nodePath, containerId);
+      out = new PrintStream(containerLogPath.toString(), "UTF-8");
+    }
+    return out;
+  }
+
+  public void closePrintStream(PrintStream out) {
+    if (out != System.out) {
+      IOUtils.closeQuietly(out);
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS44 INS44 INS44 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS44 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 MOV44 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS42 INS43 INS42 INS43 INS42 INS42 MOV60 MOV60 MOV21 MOV61 INS41 INS60 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS25 INS42 INS42 MOV38 INS42 MOV43 INS59 INS42 INS40 INS42 INS43 INS59 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS27 INS8 INS33 INS42 INS25 MOV42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS27 INS38 INS60 INS21 INS60 INS21 INS42 INS40 INS21 INS42 INS8 INS42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS33 INS32 INS43 INS59 INS32 INS43 INS59 INS7 INS32 INS60 MOV21 INS60 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS43 INS32 INS45 INS42 INS42 INS32 INS60 INS21 INS21 INS21 MOV8 INS21 INS42 INS42 INS40 INS25 MOV21 INS21 INS21 INS21 MOV8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS7 INS32 INS27 INS8 INS7 INS32 INS32 INS32 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS33 INS18 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS54 MOV21 MOV21 INS45 INS42 INS42 INS42 INS45 INS32 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS43 INS59 MOV8 INS8 INS42 INS42 INS40 INS42 INS42 INS42 MOV32 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS21 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL42 DEL27 DEL40 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61