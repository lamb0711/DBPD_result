HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520665 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.lang.builder.EqualsBuilder;
-import org.apache.commons.lang.builder.HashCodeBuilder;
+import javax.annotation.Nonnull;
+
-import org.apache.hadoop.fs.permission.FsPermission;
+import org.apache.hadoop.classification.InterfaceAudience;
-import org.apache.hadoop.hdfs.protocol.CachePoolInfo.Builder;
+import org.apache.hadoop.fs.permission.FsAction;
+import org.apache.hadoop.fs.permission.FsPermission;
- * CachePools are uniquely identified by a numeric id as well as the
- * {@link CachePoolInfo} pool name. Mutable metadata is contained in
- * CachePoolInfo, including pool name, owner, group, and permissions.
- * See this class for more details.
+ * This is an internal class, only used on the NameNode.  For identifying or
+ * describing a cache pool to clients, please use CachePoolInfo.
+@InterfaceAudience.Private
-  private final long id;
+  @Nonnull
+  private final String poolName;
-  private CachePoolInfo info;
+  @Nonnull
+  private String ownerName;
-  public CachePool(long id) {
-    this.id = id;
-    this.info = null;
-  }
-
-  CachePool(long id, String poolName, String ownerName, String groupName,
+  @Nonnull
+  private String groupName;
+  
+  @Nonnull
+  private FsPermission mode;
+  
+  private int weight;
+  
+  public CachePool(String poolName, String ownerName, String groupName,
-    this.id = id;
-    // Set CachePoolInfo default fields if null
-    if (poolName == null || poolName.isEmpty()) {
-      throw new IOException("invalid empty cache pool name");
-    }
+    this.poolName = poolName;
-      ugi = NameNode.getRemoteUser();
-      ownerName = ugi.getShortUserName();
+      if (ugi == null) {
+        ugi = NameNode.getRemoteUser();
+      }
+      this.ownerName = ugi.getShortUserName();
+    } else {
+      this.ownerName = ownerName;
-      String[] groups = ugi.getGroupNames();
-      if (groups.length == 0) {
-        throw new IOException("failed to get group names from UGI " + ugi);
-      }
-      groupName = groups[0];
+      this.groupName = ugi.getPrimaryGroupName();
+    } else {
+      this.groupName = ownerName;
-    if (mode == null) {
-      mode = FsPermission.getDirDefault();
-    }
-    if (weight == null) {
-      weight = 100;
-    }
-    CachePoolInfo.Builder builder = CachePoolInfo.newBuilder();
-    builder.setPoolName(poolName).setOwnerName(ownerName)
-        .setGroupName(groupName).setMode(mode).setWeight(weight);
-    this.info = builder.build();
+    this.mode = mode != null ? 
+        new FsPermission(mode): FsPermission.getCachePoolDefault();
+    this.weight = weight != null ? weight : 100;
-  public CachePool(long id, CachePoolInfo info) {
-    this.id = id;
-    this.info = info;
+  public String getName() {
+    return poolName;
-  /**
-   * @return id of the pool
-   */
-  public long getId() {
-    return id;
+  public String getOwnerName() {
+    return ownerName;
+  public CachePool setOwnerName(String ownerName) {
+    this.ownerName = ownerName;
+    return this;
+  }
+
+  public String getGroupName() {
+    return groupName;
+  }
+
+  public CachePool setGroupName(String groupName) {
+    this.groupName = groupName;
+    return this;
+  }
+
+  public FsPermission getMode() {
+    return mode;
+  }
+
+  public CachePool setMode(FsPermission mode) {
+    this.mode = new FsPermission(mode);
+    return this;
+  }
+  
+  public int getWeight() {
+    return weight;
+  }
+
+  public CachePool setWeight(int weight) {
+    this.weight = weight;
+    return this;
+  }
+  
+   * @param fullInfo
+   *          If true, only the name will be returned (i.e., what you 
+   *          would get if you didn't have read permission for this pool.)
-  public CachePoolInfo getInfo() {
-    return info;
+  public CachePoolInfo getInfo(boolean fullInfo) {
+    CachePoolInfo info = new CachePoolInfo(poolName);
+    if (!fullInfo) {
+      return info;
+    }
+    return info.setOwnerName(ownerName).
+        setGroupName(groupName).
+        setMode(new FsPermission(mode)).
+        setWeight(weight);
-  void setInfo(CachePoolInfo info) {
-    this.info = info;
+  public CachePoolInfo getInfo(FSPermissionChecker pc) {
+    return getInfo(pc.checkPermission(this, FsAction.READ)); 
-        append("{ ").append("id:").append(id).
-        append(", info:").append(info.toString()).
+        append("{ ").append("poolName:").append(poolName).
+        append(", ownerName:").append(ownerName).
+        append(", groupName:").append(groupName).
+        append(", mode:").append(mode).
+        append(", weight:").append(weight).
-
-  @Override
-  public int hashCode() {
-    return new HashCodeBuilder().append(id).append(info).hashCode();
-  }
-
-  @Override
-  public boolean equals(Object obj) {
-    if (obj == null) { return false; }
-    if (obj == this) { return true; }
-    if (obj.getClass() != getClass()) {
-      return false;
-    }
-    CachePool rhs = (CachePool)obj;
-    return new EqualsBuilder()
-      .append(id, rhs.id)
-      .append(info, rhs.info)
-      .isEquals();
-  }

MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 INS78 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS40 INS78 INS43 INS78 INS43 INS78 INS83 INS43 INS59 INS78 INS83 INS43 INS59 INS83 INS39 INS59 INS83 MOV42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 MOV83 INS43 INS42 INS8 INS83 MOV43 INS42 MOV44 MOV8 UPD39 UPD42 MOV83 MOV43 UPD42 MOV42 MOV44 MOV8 MOV29 MOV43 INS42 INS44 MOV43 UPD42 UPD66 UPD66 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 MOV60 INS25 MOV25 INS21 INS21 INS41 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS41 INS42 INS43 INS42 MOV21 INS41 INS42 INS41 INS43 INS42 INS41 INS39 UPD42 INS41 INS65 INS39 INS42 INS60 INS25 UPD43 UPD42 MOV27 INS8 INS8 INS8 INS8 INS7 INS7 INS42 INS42 INS42 INS7 INS52 INS42 INS42 INS52 INS42 INS42 INS52 UPD42 INS52 INS42 INS66 INS66 MOV43 INS59 INS38 MOV8 INS32 UPD42 INS32 INS32 UPD42 INS25 MOV21 INS21 MOV25 INS21 MOV21 INS22 INS16 INS22 INS16 INS22 INS42 INS42 INS14 UPD42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 UPD42 INS27 MOV8 INS7 INS7 INS52 INS42 INS27 INS14 INS32 INS52 INS42 INS27 INS42 INS34 INS52 INS42 UPD42 UPD42 INS43 INS42 UPD42 MOV43 INS42 MOV32 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS52 UPD40 MOV40 INS32 INS42 INS45 UPD42 MOV42 MOV33 INS22 INS22 INS42 INS22 INS32 INS22 INS42 MOV42 MOV33 INS43 INS42 MOV42 UPD42 MOV42 MOV42 MOV33 INS42 UPD42 UPD42 INS43 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 MOV42 UPD42 MOV42 INS52 INS42 INS42 INS42 UPD42 UPD42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 MOV32 INS42 INS45 UPD42 INS42 UPD45 UPD42 MOV42 UPD45 UPD42 UPD45 DEL42 DEL65 DEL66 DEL66 DEL39 DEL42 DEL42 DEL42 DEL34 DEL2 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL31 DEL39 DEL42 DEL44 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL25 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL27 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL39 DEL42 DEL44 DEL31 DEL66 DEL65 DEL29 DEL42 DEL31 DEL39 DEL31 DEL42 DEL78 DEL39 DEL42 DEL42 DEL43 DEL14 DEL42 DEL32 DEL42 DEL78 DEL39 DEL42 DEL33 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL52 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL14 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL42 DEL32