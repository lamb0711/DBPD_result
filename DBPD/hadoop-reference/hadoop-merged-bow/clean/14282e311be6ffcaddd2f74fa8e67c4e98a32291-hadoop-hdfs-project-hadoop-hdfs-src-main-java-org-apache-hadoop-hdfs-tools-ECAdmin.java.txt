HDFS-14188. Make hdfs ec -verifyClusterSetup command accept an erasure coding policy as a parameter. Contributed by Kitti Nanasi.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

+import org.apache.hadoop.fs.shell.CommandFormat;
-      return "[" + getName() + "]\n";
+      return "[" + getName() + " [-policy <policy>...<policy>]]\n";
+      TableListing listing = AdminHelper.getOptionDescriptionListing();
+      listing.addRow("<policy>", "The name of the erasure coding policy");
-          + "Verify the cluster setup can support all enabled erasure coding"
-          + " policies.\n";
+          + "Verify if the cluster setup can support all enabled erasure " +
+          "coding policies. If optional parameter -policy is specified, " +
+          "verify if the cluster setup can support the given policy.\n";
-      if (args.size() > 0) {
-        System.err.println(getName() + ": Too many arguments");
-        return 1;
-      }
+      boolean isPolicyOption = StringUtils.popOption("-policy", args);
-      ECTopologyVerifierResult result = getECTopologyVerifierResult(dfs);
+      ECTopologyVerifierResult result;
+      if (isPolicyOption) {
+        CommandFormat c = new CommandFormat(1, Integer.MAX_VALUE);
+        c.parse(args);
+        String[] parameters = args.toArray(new String[args.size()]);
+        result = getECTopologyResultForPolicies(dfs, parameters);
+      } else {
+        result = getECTopologyVerifierResult(dfs);
+      }
+  private static ECTopologyVerifierResult getECTopologyResultForPolicies(
+      final DistributedFileSystem dfs, final String... policyNames)
+      throws IOException {
+    ErasureCodingPolicy[] policies =
+        new ErasureCodingPolicy[policyNames.length];
+    for (int i = 0; i < policyNames.length; i++) {
+      policies[i] =
+        getPolicy(dfs.getClient().getNamenode().getErasureCodingPolicies(),
+            policyNames[i]);
+    }
+    final DatanodeInfo[] report = dfs.getClient().getNamenode()
+        .getDatanodeReport(HdfsConstants.DatanodeReportType.ALL);
+    return ECTopologyVerifier.getECTopologyVerifierResult(report, policies);
+  }
+

INS26 INS40 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS24 INS60 INS41 INS60 INS21 INS60 INS60 INS25 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS83 INS5 INS59 INS32 INS43 INS59 INS32 INS39 INS59 MOV43 INS59 INS42 INS8 INS8 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 UPD45 INS42 INS42 INS32 INS42 INS42 INS45 INS45 UPD45 UPD45 INS45 INS42 INS32 INS42 INS60 INS21 MOV60 INS21 INS21 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS32 INS42 INS40 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS43 INS59 INS32 INS5 INS7 INS7 INS43 INS85 INS2 INS32 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS85 UPD42 INS32 INS42 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 INS2 INS42 INS42 INS43 INS34 INS40 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS5 MOV32 INS32 INS42 INS43 INS85 INS42 INS42 INS42 DEL34 DEL27 DEL40 DEL32 DEL45 DEL27 DEL32 DEL21 DEL34 DEL41 DEL8 DEL25