merge changes from trunk to HDFS-4949 branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524865 13f79535-47bb-0310-9956-ffa450edef68

+import javax.crypto.SecretKey;
+
-import org.apache.hadoop.io.Text;
-import org.apache.hadoop.yarn.security.client.ClientToAMTokenSelector;
+import org.apache.hadoop.yarn.server.resourcemanager.security.ClientToAMTokenSecretManagerInRM;
-  private Token<ClientToAMTokenIdentifier> clientToAMToken;
+  private SecretKey clientTokenMasterKey = null;
-      return this.proxiedTrackingUrl;
+      return (getSubmissionContext().getUnmanagedAM()) ? 
+              this.origTrackingUrl : this.proxiedTrackingUrl;
-  public Token<ClientToAMTokenIdentifier> getClientToAMToken() {
-    return this.clientToAMToken;
+  public SecretKey getClientTokenMasterKey() {
+    return this.clientTokenMasterKey;
+  public Token<ClientToAMTokenIdentifier> createClientToken(String client) {
+    this.readLock.lock();
+
+    try {
+      Token<ClientToAMTokenIdentifier> token = null;
+      ClientToAMTokenSecretManagerInRM secretMgr =
+          this.rmContext.getClientToAMTokenSecretManager();
+      if (client != null &&
+          secretMgr.getMasterKey(this.applicationAttemptId) != null) {
+        token = new Token<ClientToAMTokenIdentifier>(
+            new ClientToAMTokenIdentifier(this.applicationAttemptId, client),
+            secretMgr);
+      }
+      return token;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  @Override
-    recoverAppAttemptTokens(attemptState.getAppAttemptTokens());
+    recoverAppAttemptCredentials(attemptState.getAppAttemptCredentials());
-  private void recoverAppAttemptTokens(Credentials appAttemptTokens) {
+  private void recoverAppAttemptCredentials(Credentials appAttemptTokens) {
-    if (UserGroupInformation.isSecurityEnabled()) {
-      ClientToAMTokenSelector clientToAMTokenSelector =
-          new ClientToAMTokenSelector();
-      this.clientToAMToken =
-          clientToAMTokenSelector.selectToken(new Text(),
-            appAttemptTokens.getAllTokens());
+    if (UserGroupInformation.isSecurityEnabled()) {
+      byte[] clientTokenMasterKeyBytes = appAttemptTokens.getSecretKey(
+          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);
+      clientTokenMasterKey = rmContext.getClientToAMTokenSecretManager()
+          .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);
-
-        appAttempt.rmContext.getClientToAMTokenSecretManager()
-          .registerApplication(appAttempt.applicationAttemptId);
-
-        // create clientToAMToken
-        appAttempt.clientToAMToken =
-            new Token<ClientToAMTokenIdentifier>(new ClientToAMTokenIdentifier(
-              appAttempt.applicationAttemptId),
-              appAttempt.rmContext.getClientToAMTokenSecretManager());
+        appAttempt.clientTokenMasterKey = appAttempt.rmContext
+            .getClientToAMTokenSecretManager()
+            .registerApplication(appAttempt.applicationAttemptId);
+
+      appAttempt.removeCredentials(appAttempt);
-
+      // There must be at least one container allocated, because a
+      // CONTAINER_ALLOCATED is emitted after an RMContainer is constructed,
+      // and is put in SchedulerApplication#newlyAllocatedContainers. Then,
+      // YarnScheduler#allocate will fetch it.
+      assert amContainerAllocation.getContainers().size() != 0;
-
-      // Remove the AppAttempt from the AMRMTokenSecretManager
-      appAttempt.rmContext.getAMRMTokenSecretManager()
-        .applicationMasterFinished(appAttemptId);
+      appAttempt.removeCredentials(appAttempt);
-  private static final class AMRegisteredTransition extends BaseTransition {
+  static final class AMRegisteredTransition extends BaseTransition {
-
-      // Unregister from the ClientToAMTokenSecretManager
-      if (UserGroupInformation.isSecurityEnabled()) {
-        appAttempt.rmContext.getClientToAMTokenSecretManager()
-          .unRegisterApplication(appAttempt.getAppAttemptId());
-      }
-
-      // Remove the AppAttempt from the AMRMTokenSecretManager
-      appAttempt.rmContext.getAMRMTokenSecretManager()
-        .applicationMasterFinished(appAttemptId);
-
+
+  private void removeCredentials(RMAppAttemptImpl appAttempt) {
+    // Unregister from the ClientToAMTokenSecretManager
+    if (UserGroupInformation.isSecurityEnabled()) {
+      appAttempt.rmContext.getClientToAMTokenSecretManager()
+        .unRegisterApplication(appAttempt.getAppAttemptId());
+    }
+
+    // Remove the AppAttempt from the AMRMTokenSecretManager
+    appAttempt.rmContext.getAMRMTokenSecretManager()
+      .applicationMasterFinished(appAttempt.getAppAttemptId());
+  }

MOV26 MOV26 MOV23 UPD40 UPD40 INS31 INS31 INS43 INS43 UPD42 INS78 INS83 MOV74 INS42 INS44 INS8 UPD42 INS83 INS39 INS42 INS44 INS8 INS42 UPD42 INS33 INS42 INS42 INS43 INS42 INS21 INS54 INS43 INS42 MOV25 MOV21 INS42 INS32 INS8 INS8 INS21 INS6 INS42 UPD42 INS22 INS42 INS60 INS60 INS25 INS41 INS21 UPD42 INS8 INS32 INS27 INS32 INS16 INS52 INS42 MOV74 INS59 INS43 INS59 INS27 MOV8 INS42 INS32 UPD42 INS5 MOV21 INS42 INS42 INS42 INS32 INS34 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 INS42 INS36 INS22 MOV22 INS42 INS33 INS42 INS42 INS32 INS27 INS27 INS22 INS42 INS39 INS85 UPD42 INS32 INS42 INS7 INS32 INS42 INS32 INS52 INS42 INS22 INS42 INS42 INS33 INS32 INS33 INS52 INS42 INS42 INS42 INS40 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS40 MOV32 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS22 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS52 INS42 INS42 INS22 INS42 INS52 INS42 DEL40 DEL40 DEL40 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL14 DEL52 DEL42 DEL22 DEL42 DEL43 DEL14 DEL32 DEL40 DEL32 DEL83