YARN-2928: YARN Timeline Service v.2: alpha 1 (sjlee)

For a list of commits and contributors, see the merge branch history.

-import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMApp;
+import org.apache.hadoop.yarn.util.timeline.TimelineUtils;
+    // set the flow context optionally for timeline service v.2
+    setFlowContext(container);
+  private void setFlowContext(ContainerLaunchContext container) {
+    if (YarnConfiguration.timelineServiceV2Enabled(conf)) {
+      Map<String, String> environment = container.getEnvironment();
+      ApplicationId applicationId =
+          application.getAppAttemptId().getApplicationId();
+      RMApp app = rmContext.getRMApps().get(applicationId);
+
+      // initialize the flow in the environment with default values for those
+      // that do not specify the flow tags
+      // flow name: app name (or app id if app name is missing),
+      // flow version: "1", flow run id: start time
+      setFlowTags(environment, TimelineUtils.FLOW_NAME_TAG_PREFIX,
+          TimelineUtils.generateDefaultFlowName(app.getName(), applicationId));
+      setFlowTags(environment, TimelineUtils.FLOW_VERSION_TAG_PREFIX,
+          TimelineUtils.DEFAULT_FLOW_VERSION);
+      setFlowTags(environment, TimelineUtils.FLOW_RUN_ID_TAG_PREFIX,
+          String.valueOf(app.getStartTime()));
+
+      // Set flow context info: the flow context is received via the application
+      // tags
+      for (String tag : app.getApplicationTags()) {
+        String[] parts = tag.split(":", 2);
+        if (parts.length != 2 || parts[1].isEmpty()) {
+          continue;
+        }
+        switch (parts[0].toUpperCase()) {
+        case TimelineUtils.FLOW_NAME_TAG_PREFIX:
+          setFlowTags(environment, TimelineUtils.FLOW_NAME_TAG_PREFIX,
+              parts[1]);
+          break;
+        case TimelineUtils.FLOW_VERSION_TAG_PREFIX:
+          setFlowTags(environment, TimelineUtils.FLOW_VERSION_TAG_PREFIX,
+              parts[1]);
+          break;
+        case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:
+          setFlowTags(environment, TimelineUtils.FLOW_RUN_ID_TAG_PREFIX,
+              parts[1]);
+          break;
+        default:
+          break;
+        }
+      }
+    }
+  }
+
+  private static void setFlowTags(
+      Map<String, String> environment, String tagPrefix, String value) {
+    if (!value.isEmpty()) {
+      environment.put(tagPrefix, value);
+    }
+  }
+

MOV26 INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS21 INS43 INS42 INS25 INS74 INS42 INS43 INS42 INS43 INS42 INS25 INS32 INS42 INS32 INS8 INS43 INS43 INS43 INS42 INS42 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS21 INS21 INS21 INS70 INS42 INS42 INS42 INS32 INS21 INS74 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS44 INS32 INS8 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS32 INS43 INS42 INS42 INS42 INS60 INS25 INS50 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS5 INS59 INS27 INS8 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS27 INS32 INS18 INS2 INS42 INS40 INS32 INS40 INS32 INS40 INS32 INS42 INS42 INS42 INS45 INS34 INS40 INS34 INS2 INS42 INS42 INS34 INS42 INS42 INS40 INS2 INS42 INS42 INS40 INS2 INS42 INS42 INS40 INS2 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34