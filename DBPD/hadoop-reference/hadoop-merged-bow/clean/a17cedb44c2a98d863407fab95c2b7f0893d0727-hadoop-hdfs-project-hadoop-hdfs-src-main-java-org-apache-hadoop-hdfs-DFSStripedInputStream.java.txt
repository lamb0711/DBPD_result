HDFS-8203. Erasure Coding: Seek and other Ops in DFSStripedInputStream. Contributed by Yi Liu.

+import org.apache.hadoop.fs.ReadOption;
+import org.apache.hadoop.io.ByteBufferPool;
+
+import java.io.EOFException;
+import java.util.EnumSet;
+    return getOffsetInBlockGroup(pos);
+  }
+
+  private long getOffsetInBlockGroup(long pos) {
-    int stripeIndex = (int) (offsetInBlockGroup / stripeLen);
-    curStripeRange = new StripeRange(stripeIndex * stripeLen,
-        Math.min(currentLocatedBlock.getBlockSize() - (stripeIndex * stripeLen),
-            stripeLen));
-    final int numCell = (int) ((curStripeRange.length - 1) / cellSize + 1);
+    final int stripeIndex = (int) (offsetInBlockGroup / stripeLen);
+    final int stripeBufOffset = (int) (offsetInBlockGroup % stripeLen);
+    final int stripeLimit = (int) Math.min(currentLocatedBlock.getBlockSize()
+        - (stripeIndex * stripeLen), stripeLen);
+    curStripeRange = new StripeRange(offsetInBlockGroup,
+        stripeLimit - stripeBufOffset);
+
+    final int startCell = stripeBufOffset / cellSize;
+    final int numCell = (stripeLimit - 1) / cellSize + 1;
-    for (int i = 0; i < numCell; i++) {
-      curStripeBuf.position(cellSize * i);
-      curStripeBuf.limit((int) Math.min(cellSize * (i + 1),
-          curStripeRange.length));
+    for (int i = startCell; i < numCell; i++) {
+      int bufPos = i == startCell ? stripeBufOffset : cellSize * i;
+      curStripeBuf.position(bufPos);
+      curStripeBuf.limit(Math.min(cellSize * (i + 1), stripeLimit));
+  /**
+   * Seek to a new arbitrary location
+   */
+  @Override
+  public synchronized void seek(long targetPos) throws IOException {
+    if (targetPos > getFileLength()) {
+      throw new EOFException("Cannot seek after EOF");
+    }
+    if (targetPos < 0) {
+      throw new EOFException("Cannot seek to negative offset");
+    }
+    if (closed.get()) {
+      throw new IOException("Stream is closed!");
+    }
+    if (targetPos <= blockEnd) {
+      final long targetOffsetInBlk = getOffsetInBlockGroup(targetPos);
+      if (curStripeRange.include(targetOffsetInBlk)) {
+        int bufOffset = getStripedBufOffset(targetOffsetInBlk);
+        curStripeBuf.position(bufOffset);
+        pos = targetPos;
+        return;
+      }
+    }
+    pos = targetPos;
+    blockEnd = -1;
+  }
+
+  private int getStripedBufOffset(long offsetInBlockGroup) {
+    final long stripeLen = cellSize * dataBlkNum;
+    // compute the position in the curStripeBuf based on "pos"
+    return (int) (offsetInBlockGroup % stripeLen);
+  }
+
-    final long stripeLen = cellSize * dataBlkNum;
-    final long offsetInBlk = pos - currentLocatedBlock.getStartOffset();
-    // compute the position in the curStripeBuf based on "pos"
-    int bufOffset = (int) (offsetInBlk % stripeLen);
+    final long offsetInBlk = getOffsetInBlockGroup();
+    int bufOffset = getStripedBufOffset(offsetInBlk);
+
+  /**
+   * May need online read recovery, zero-copy read doesn't make
+   * sense, so don't support it.
+   */
+  @Override
+  public synchronized ByteBuffer read(ByteBufferPool bufferPool,
+      int maxLength, EnumSet<ReadOption> opts)
+          throws IOException, UnsupportedOperationException {
+    throw new UnsupportedOperationException(
+        "Not support enhanced byte buffer access.");
+  }
+
+  @Override
+  public synchronized void releaseBuffer(ByteBuffer buffer) {
+    throw new UnsupportedOperationException(
+        "Not support enhanced byte buffer access.");
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS8 INS44 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS41 INS39 INS42 INS60 INS60 INS60 INS65 INS42 INS39 INS42 INS42 INS25 INS25 INS25 INS25 INS21 INS21 INS39 INS42 MOV60 INS41 INS65 INS42 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS42 INS42 INS53 INS42 INS43 INS42 INS53 INS32 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS66 INS27 INS8 INS27 INS8 INS32 INS8 INS27 INS8 INS7 INS7 INS11 INS66 INS66 INS42 INS43 INS43 INS14 INS42 INS14 INS42 INS42 INS42 INS11 INS42 INS11 INS42 INS27 INS27 INS60 INS42 INS32 INS53 INS42 INS34 INS53 INS42 INS42 INS53 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS38 INS39 INS36 INS32 INS32 INS42 INS42 INS43 INS45 INS43 INS45 INS39 INS36 INS39 MOV32 INS42 UPD27 INS42 INS42 MOV27 MOV34 INS42 INS39 INS59 INS42 INS14 INS14 INS14 INS83 INS39 INS59 INS32 INS8 INS34 INS27 UPD42 MOV42 INS42 INS42 INS42 INS42 INS27 UPD42 UPD42 INS42 INS16 INS42 MOV32 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS27 INS42 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS32 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL39 DEL27 DEL36 DEL11 DEL34 DEL40 DEL39 DEL11 DEL42 DEL42 DEL32 DEL27 DEL39 DEL42 DEL42 DEL27 DEL36 DEL11