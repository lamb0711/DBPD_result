YARN-2629. Made the distributed shell use the domain-based timeline ACLs. Contributed by Zhijie Shen.

+import java.lang.reflect.UndeclaredThrowableException;
+import org.apache.hadoop.yarn.api.records.timeline.TimelinePutResponse;
+  // Timeline domain ID
+  private String domainId = null;
+
-
+      if (envs.containsKey(DSConstants.DISTRIBUTEDSHELLTIMELINEDOMAIN)) {
+        domainId = envs.get(DSConstants.DISTRIBUTEDSHELLTIMELINEDOMAIN);
+      }
-    try {
-      publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
-          DSEvent.DS_APP_ATTEMPT_START);
-    } catch (Exception e) {
-      LOG.error("App Attempt start event could not be published for "
-          + appAttemptID.toString(), e);
-    }
+    publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
+        DSEvent.DS_APP_ATTEMPT_START, domainId, appSubmitterUgi);
+
-    try {
-      publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
-          DSEvent.DS_APP_ATTEMPT_END);
-    } catch (Exception e) {
-      LOG.error("App Attempt start event could not be published for "
-          + appAttemptID.toString(), e);
-    }
+
+    publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
+        DSEvent.DS_APP_ATTEMPT_END, domainId, appSubmitterUgi);
-        try {
-          publishContainerEndEvent(timelineClient, containerStatus);
-        } catch (Exception e) {
-          LOG.error("Container start event could not be published for "
-              + containerStatus.getContainerId().toString(), e);
-        }
+        publishContainerEndEvent(
+            timelineClient, containerStatus, domainId, appSubmitterUgi);
-      try {
-        ApplicationMaster.publishContainerStartEvent(
-            applicationMaster.timelineClient, container);
-      } catch (Exception e) {
-        LOG.error("Container start event could not be published for "
-            + container.getId().toString(), e);
-      }
+      ApplicationMaster.publishContainerStartEvent(
+          applicationMaster.timelineClient, container,
+          applicationMaster.domainId, applicationMaster.appSubmitterUgi);
-  private static void publishContainerStartEvent(TimelineClient timelineClient,
-      Container container) throws IOException, YarnException {
-    TimelineEntity entity = new TimelineEntity();
+  private static void publishContainerStartEvent(
+      final TimelineClient timelineClient, Container container, String domainId,
+      UserGroupInformation ugi) {
+    final TimelineEntity entity = new TimelineEntity();
-    entity.addPrimaryFilter("user",
-        UserGroupInformation.getCurrentUser().getShortUserName());
+    entity.setDomainId(domainId);
+    entity.addPrimaryFilter("user", ugi.getShortUserName());
-    timelineClient.putEntities(entity);
+    try {
+      ugi.doAs(new PrivilegedExceptionAction<TimelinePutResponse>() {
+        @Override
+        public TimelinePutResponse run() throws Exception {
+          return timelineClient.putEntities(entity);
+        }
+      });
+    } catch (Exception e) {
+      LOG.error("Container start event could not be published for "
+          + container.getId().toString(),
+          e instanceof UndeclaredThrowableException ? e.getCause() : e);
+    }
-  private static void publishContainerEndEvent(TimelineClient timelineClient,
-      ContainerStatus container) throws IOException, YarnException {
-    TimelineEntity entity = new TimelineEntity();
+  private static void publishContainerEndEvent(
+      final TimelineClient timelineClient, ContainerStatus container,
+      String domainId, UserGroupInformation ugi) {
+    final TimelineEntity entity = new TimelineEntity();
-    entity.addPrimaryFilter("user",
-        UserGroupInformation.getCurrentUser().getShortUserName());
+    entity.setDomainId(domainId);
+    entity.addPrimaryFilter("user", ugi.getShortUserName());
-    timelineClient.putEntities(entity);
+    try {
+      ugi.doAs(new PrivilegedExceptionAction<TimelinePutResponse>() {
+        @Override
+        public TimelinePutResponse run() throws Exception {
+          return timelineClient.putEntities(entity);
+        }
+      });
+    } catch (Exception e) {
+      LOG.error("Container end event could not be published for "
+          + container.getContainerId().toString(),
+          e instanceof UndeclaredThrowableException ? e.getCause() : e);
+    }
-      TimelineClient timelineClient, String appAttemptId, DSEvent appEvent)
-      throws IOException, YarnException {
-    TimelineEntity entity = new TimelineEntity();
+      final TimelineClient timelineClient, String appAttemptId,
+      DSEvent appEvent, String domainId, UserGroupInformation ugi) {
+    final TimelineEntity entity = new TimelineEntity();
-    entity.addPrimaryFilter("user",
-        UserGroupInformation.getCurrentUser().getShortUserName());
+    entity.setDomainId(domainId);
+    entity.addPrimaryFilter("user", ugi.getShortUserName());
-    timelineClient.putEntities(entity);
+    try {
+      ugi.doAs(new PrivilegedExceptionAction<TimelinePutResponse>() {
+        @Override
+        public TimelinePutResponse run() throws Exception {
+          return timelineClient.putEntities(entity);
+        }
+      });
+    } catch (Exception e) {
+      LOG.error("App Attempt "
+          + (appEvent.equals(DSEvent.DS_APP_ATTEMPT_START) ? "start" : "end")
+          + " event could not be published for "
+          + appAttemptId.toString(),
+          e instanceof UndeclaredThrowableException ? e.getCause() : e);
+    }

INS26 INS26 INS40 INS40 INS23 INS83 INS43 INS59 INS44 INS44 INS44 INS44 INS44 INS44 INS42 INS42 INS33 INS21 INS21 INS83 INS43 INS42 INS43 INS42 INS21 INS54 INS83 INS43 INS42 INS43 INS42 INS21 INS54 INS83 INS43 INS42 INS43 INS42 INS21 INS54 INS32 INS32 MOV21 UPD42 MOV42 UPD42 MOV42 INS83 INS32 INS8 MOV12 UPD42 MOV42 UPD42 MOV42 INS83 INS32 INS8 INS12 UPD42 MOV42 UPD42 MOV42 INS83 INS32 INS8 INS12 INS25 MOV42 MOV42 MOV32 MOV40 INS42 UPD42 MOV42 MOV42 MOV42 MOV32 MOV40 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 MOV21 MOV44 INS8 INS42 INS42 INS42 MOV21 MOV44 INS8 INS32 INS8 MOV21 INS40 INS40 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS21 UPD42 MOV42 INS32 INS21 INS42 INS42 INS40 INS21 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS42 INS42 INS14 INS32 INS7 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS74 INS1 INS16 INS74 INS1 INS42 INS42 INS27 INS16 INS74 INS1 INS42 INS42 INS27 INS16 INS42 INS32 INS43 INS43 INS31 INS62 INS32 INS42 INS43 INS43 INS31 INS45 INS32 INS62 INS32 INS42 INS43 INS43 INS31 INS45 INS36 INS45 INS32 INS62 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS43 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS16 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS32 INS45 INS45 INS42 MOV32 MOV32 MOV32 INS42 INS42 INS40 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL32 DEL21 DEL8 DEL42 DEL45 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL45 DEL32 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL12 DEL54 DEL8 DEL54 DEL43 DEL43 DEL42 DEL32 DEL42 DEL43 DEL43 DEL42 DEL32 DEL43 DEL43 DEL42 DEL32