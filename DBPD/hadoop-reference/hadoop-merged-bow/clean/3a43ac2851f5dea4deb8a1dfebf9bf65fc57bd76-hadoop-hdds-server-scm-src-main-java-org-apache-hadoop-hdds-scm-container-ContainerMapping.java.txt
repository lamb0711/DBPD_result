HDDS-1. Remove SCM Block DB. Contributed by Xiaoyu Yao.

+import com.google.common.primitives.Longs;
-import org.apache.hadoop.hdfs.DFSUtil;
-import org.apache.hadoop.utils.MetadataKeyFilters.KeyPrefixFilter;
-import org.apache.hadoop.utils.MetadataKeyFilters.MetadataKeyFilter;
-  public ContainerInfo getContainer(final String containerName) throws
+  public ContainerInfo getContainer(final long containerID) throws
-      byte[] containerBytes = containerStore.get(containerName.getBytes(
-          encoding));
+      byte[] containerBytes = containerStore.get(Longs.toByteArray(containerID));
-            "Specified key does not exist. key : " + containerName,
+            "Specified key does not exist. key : " + containerID,
-  public List<ContainerInfo> listContainer(String startName,
-      String prefixName, int count) throws IOException {
+  public List<ContainerInfo> listContainer(long startContainerID,
+      int count) throws IOException {
-      MetadataKeyFilter prefixFilter = new KeyPrefixFilter(prefixName);
-      byte[] startKey = startName == null ? null : DFSUtil.string2Bytes(
-          startName);
+      byte[] startKey = startContainerID <= 0 ? null :
+          Longs.toByteArray(startContainerID);
-          containerStore.getSequentialRangeKVs(startKey, count, prefixFilter);
+          containerStore.getSequentialRangeKVs(startKey, count, null);
-   * @param containerName - Name of the container.
-      final String containerName,
-    Preconditions.checkNotNull(containerName);
-    Preconditions.checkState(!containerName.isEmpty());
-      byte[] containerBytes = containerStore.get(containerName.getBytes(
-          encoding));
-      if (containerBytes != null) {
-        throw new SCMException(
-            "Specified container already exists. key : " + containerName,
-            SCMException.ResultCodes.CONTAINER_EXISTS);
-      }
-              pipelineSelector, type, replicationFactor, containerName,
-              owner);
-      containerStore.put(
-          containerName.getBytes(encoding), containerInfo.getProtobuf()
+              pipelineSelector, type, replicationFactor, owner);
+
+      byte[] containerIDBytes = Longs.toByteArray(containerInfo.getContainerID());
+      containerStore.put(containerIDBytes, containerInfo.getProtobuf()
-   * @param containerName - Container name
+   * @param containerID - Container ID
-  public void deleteContainer(String containerName) throws IOException {
+  public void deleteContainer(long containerID) throws IOException {
-      byte[] dbKey = containerName.getBytes(encoding);
+      byte[] dbKey = Longs.toByteArray(containerID);
-            "Failed to delete container " + containerName + ", reason : " +
+            "Failed to delete container " + containerID + ", reason : " +
-      String containerName, HddsProtos.LifeCycleEvent event) throws
+      long containerID, HddsProtos.LifeCycleEvent event) throws
-      byte[] dbKey = containerName.getBytes(encoding);
+      byte[] dbKey = Longs.toByteArray(containerID);
-                + containerName
+                + containerID
-          updateContainerState(containerName,
+          updateContainerState(containerID,
-      byte[] dbKey = datanodeState.getContainerNameBytes().toByteArray();
+      byte[] dbKey = Longs.toByteArray(datanodeState.getContainerID());
-            LOG.info("Closing the Container: {}", newState.getContainerName());
+            LOG.info("Closing the Container: {}", newState.getContainerID());
-              datanodeState.getContainerName());
+              datanodeState.getContainerID());
-    builder.setContainerName(knownState.getContainerName());
+    builder.setContainerID(knownState.getContainerID());
-    ContainerInfo scmInfo = getContainer(newState.getContainerName());
+    ContainerInfo scmInfo = getContainer(newState.getContainerID());
-            scmInfo.getContainerName(),
+            scmInfo.getContainerID(),
-              newState.getContainerName(), state);
+              newState.getContainerID(), state);
-    List<String> failedContainers = new ArrayList<>();
+    List<Long> failedContainers = new ArrayList<>();
-        byte[] dbKey = info.getContainerName().getBytes(encoding);
+        byte[] dbKey = Longs.toByteArray(info.getContainerID());
-              .setContainerName(oldInfo.getContainerName())
-              info.getContainerName());
+              info.getContainerID());
-        failedContainers.add(info.getContainerName());
+        failedContainers.add(info.getContainerID());

MOV26 UPD40 INS39 UPD42 INS39 UPD42 INS39 UPD42 INS39 UPD42 UPD42 UPD66 UPD74 INS60 UPD42 UPD43 MOV5 INS59 MOV5 MOV27 MOV5 MOV27 UPD42 UPD42 INS42 INS32 UPD42 MOV42 UPD42 UPD27 INS33 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS34 UPD42 UPD42 UPD42 INS42 INS42 MOV43 MOV43 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL33 DEL42 DEL42 DEL66 DEL65 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL42 DEL27 DEL40 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32