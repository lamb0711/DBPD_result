Reverting the previous trunk merge since it added other unintended changes in addition


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1177127 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.util.StringUtils;
-  void startSecrectManager() throws IOException {
+  void activateSecretManager() throws IOException {
-  void stopSecretManager() {
-    if (dtSecretManager != null) {
-      dtSecretManager.stopThreads();
-    }
-  }
-  
-  /** 
-   * Start services common to both active and standby states
-   * @throws IOException
+  /**
+   * Activate FSNamesystem daemons.
-  void startCommonServices(Configuration conf) throws IOException {
+  void activate(Configuration conf) throws IOException {
+
+
+
+      this.lmthread = new Daemon(leaseManager.new Monitor());
+      lmthread.start();
-  
-  /** 
-   * Stop services common to both active and standby states
-   * @throws IOException
-   */
-  void stopCommonServices() {
-    writeLock();
-    try {
-      if (blockManager != null) blockManager.close();
-      if (nnrmthread != null) nnrmthread.interrupt();
-    } finally {
-      writeUnlock();
-    }
-  }
-  
-  /**
-   * Start services required in active state
-   * @throws IOException
-   */
-  void startActiveServices() throws IOException {
-    LOG.info("Starting services required for active state");
-    writeLock();
-    try {
-      startSecrectManager();
-      lmthread = new Daemon(leaseManager.new Monitor());
-      lmthread.start();
-    } finally {
-      writeUnlock();
-    }
-  }
-  
-  /** 
-   * Start services required in active state 
-   * @throws InterruptedException
-   */
-  void stopActiveServices() {
-    LOG.info("Stopping services started for active state");
-    writeLock();
-    try {
-      stopSecretManager();
-      if (lmthread != null) {
-        try {
-          lmthread.interrupt();
-          lmthread.join(3000);
-        } catch (InterruptedException ie) {
-          LOG.warn("Encountered exception ", ie);
-        }
-        lmthread = null;
-      }
-    } finally {
-      writeUnlock();
-    }
-  }
-  
-  /** Start services required in standby state */
-  void startStandbyServices() {
-    LOG.info("Starting services required for standby state");
-  }
-  /** Stop services required in standby state */
-  void stopStandbyServices() {
-    LOG.info("Stopping services started for standby state");
-  }
-  
-   * Version of @see #getNamespaceInfo() that is not protected by a lock.
+   * Version of {@see #getNamespaceInfo()} that is not protected by a lock.
-      stopCommonServices();
+      if (blockManager != null) blockManager.close();
+      if (dtSecretManager != null) dtSecretManager.stopThreads();
+      if (nnrmthread != null) nnrmthread.interrupt();
+    } catch (Exception e) {
+      LOG.warn("Exception shutting down FSNamesystem", e);
-        stopActiveServices();
-        stopStandbyServices();
+        if (lmthread != null) {
+          lmthread.interrupt();
+          lmthread.join(3000);
+        }
+      } catch (InterruptedException ie) {
+      final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>();
+      final List<DatanodeDescriptor> dead = new ArrayList<DatanodeDescriptor>();
+      blockManager.getDatanodeManager().fetchDatanodes(live, dead, false);
+      out.println("Live Datanodes: "+live.size());
+      out.println("Dead Datanodes: "+dead.size());
-                        false, blockManager.maxReplication, 0);
+                        false, blockManager.maxReplication, (long)0);
-      replication = pendingFile.getReplication();
+      replication = (int)pendingFile.getReplication();
-      INodeFileUnderConstruction pendingFile) {
+      INodeFileUnderConstruction pendingFile) throws IOException {
-      assert isConsistent() : " SafeMode: Inconsistent filesystem state: "
-        + "Total num of blocks, active blocks, or "
-        + "total safe blocks don't match.";
+      try {
+        assert isConsistent() : " SafeMode: Inconsistent filesystem state: "
+          + "Total num of blocks, active blocks, or "
+          + "total safe blocks don't match.";
+      } catch(IOException e) {
+        System.err.print(StringUtils.stringifyException(e));
+      }
-        (int) (blockTotal * replQueueThreshold);
+        (int) (((double) blockTotal) * replQueueThreshold);
-      if (replication == safeReplication)
+      if ((int)replication == safeReplication)
-    private boolean isConsistent() {
+    private boolean isConsistent() throws IOException {

INS26 INS40 UPD42 UPD42 INS43 INS42 INS8 MOV43 UPD66 INS66 INS65 UPD66 MOV8 MOV12 MOV8 INS54 MOV41 INS21 MOV21 INS66 MOV25 MOV25 INS60 INS60 INS21 INS21 INS21 MOV8 INS12 INS7 MOV21 UPD43 UPD42 MOV12 INS12 INS83 INS74 INS59 INS83 INS74 INS59 INS32 INS32 INS32 INS44 INS8 INS11 INS22 MOV14 UPD42 MOV25 INS44 INS8 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS27 INS42 INS42 INS27 INS11 INS43 INS42 INS21 INS39 INS42 INS52 INS42 UPD42 UPD45 UPD42 MOV8 INS43 INS42 MOV21 MOV21 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS45 INS32 INS45 INS32 INS11 INS39 MOV32 INS42 INS32 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS39 INS34 INS40 INS42 INS32 INS36 MOV32 UPD42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 MOV42 MOV42 INS39 INS42 DEL39 DEL42 DEL8 DEL31 DEL42 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL39 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL66 DEL65 DEL42 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL7 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL66 DEL65 DEL42 DEL65 DEL29 DEL39 DEL42 DEL31 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL31 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL21 DEL54 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL34 DEL42 DEL42