HDDS-357. Use DBStore and TableStore for OzoneManager non-background service.
Contributed by Nandakumar.

-import org.apache.hadoop.utils.BatchOperation;
+import org.apache.hadoop.utils.RocksDBStore;
+import org.rocksdb.RocksDBException;
+import org.rocksdb.WriteBatch;
-      BatchOperation batchOperation) throws IOException {
+      WriteBatch batchOperation) throws RocksDBException, IOException {
-    byte[] volumeList  = metadataManager.get(dbUserKey);
+    byte[] volumeList  = metadataManager.getUserTable().get(dbUserKey);
-    batchOperation.put(dbUserKey, newVolList.toByteArray());
+    batchOperation.put(metadataManager.getUserTable().getHandle(),
+        dbUserKey, newVolList.toByteArray());
-                                      BatchOperation batchOperation)
-      throws IOException {
+      WriteBatch batch) throws RocksDBException, IOException {
-    byte[] volumeList  = metadataManager.get(dbUserKey);
+    byte[] volumeList  = metadataManager.getUserTable().get(dbUserKey);
-      batchOperation.delete(dbUserKey);
+      batch.delete(dbUserKey);
-      batchOperation.put(dbUserKey, newVolList.toByteArray());
+      batch.put(metadataManager.getUserTable().getHandle(),
+          dbUserKey, newVolList.toByteArray());
-      byte[] volumeInfo = metadataManager.get(dbVolumeKey);
+      byte[] volumeInfo = metadataManager.getVolumeTable().get(dbVolumeKey);
-      BatchOperation batch = new BatchOperation();
-      // Write the vol info
-      List<HddsProtos.KeyValue> metadataList = new LinkedList<>();
-      for (Map.Entry<String, String> entry : args.getKeyValueMap().entrySet()) {
-        metadataList.add(HddsProtos.KeyValue.newBuilder()
-            .setKey(entry.getKey()).setValue(entry.getValue()).build());
+      try(WriteBatch batch = new WriteBatch()) {
+        // Write the vol info
+        List<HddsProtos.KeyValue> metadataList = new LinkedList<>();
+        for (Map.Entry<String, String> entry :
+            args.getKeyValueMap().entrySet()) {
+          metadataList.add(HddsProtos.KeyValue.newBuilder()
+              .setKey(entry.getKey()).setValue(entry.getValue()).build());
+        }
+        List<OzoneAclInfo> aclList = args.getAclMap().ozoneAclGetProtobuf();
+
+        VolumeInfo newVolumeInfo = VolumeInfo.newBuilder()
+            .setAdminName(args.getAdminName())
+            .setOwnerName(args.getOwnerName())
+            .setVolume(args.getVolume())
+            .setQuotaInBytes(args.getQuotaInBytes())
+            .addAllMetadata(metadataList)
+            .addAllVolumeAcls(aclList)
+            .setCreationTime(Time.now())
+            .build();
+        batch.put(metadataManager.getVolumeTable().getHandle(),
+            dbVolumeKey, newVolumeInfo.toByteArray());
+
+        // Add volume to user list
+        addVolumeToOwnerList(args.getVolume(), args.getOwnerName(), batch);
+        metadataManager.getStore().write(batch);
-      List<OzoneAclInfo> aclList = args.getAclMap().ozoneAclGetProtobuf();
-
-      VolumeInfo newVolumeInfo = VolumeInfo.newBuilder()
-          .setAdminName(args.getAdminName())
-          .setOwnerName(args.getOwnerName())
-          .setVolume(args.getVolume())
-          .setQuotaInBytes(args.getQuotaInBytes())
-          .addAllMetadata(metadataList)
-          .addAllVolumeAcls(aclList)
-          .setCreationTime(Time.now())
-          .build();
-      batch.put(dbVolumeKey, newVolumeInfo.toByteArray());
-
-      // Add volume to user list
-      addVolumeToOwnerList(args.getVolume(), args.getOwnerName(), batch);
-      metadataManager.writeBatch(batch);
-    } catch (IOException ex) {
+    } catch (RocksDBException | IOException ex) {
-      throw ex;
+      if(ex instanceof RocksDBException) {
+        throw RocksDBStore.toIOException("Volume creation failed.",
+            (RocksDBException) ex);
+      } else {
+        throw (IOException) ex;
+      }
-      byte[] volInfo = metadataManager.get(dbVolumeKey);
+      byte[] volInfo = metadataManager.getVolumeTable().get(dbVolumeKey);
-      BatchOperation batch = new BatchOperation();
-      delVolumeFromOwnerList(volume, volumeArgs.getOwnerName(), batch);
-      addVolumeToOwnerList(volume, owner, batch);
+      try(WriteBatch batch = new WriteBatch()) {
+        delVolumeFromOwnerList(volume, volumeArgs.getOwnerName(), batch);
+        addVolumeToOwnerList(volume, owner, batch);
-      OmVolumeArgs newVolumeArgs =
-          OmVolumeArgs.newBuilder().setVolume(volumeArgs.getVolume())
-              .setAdminName(volumeArgs.getAdminName())
-              .setOwnerName(owner)
-              .setQuotaInBytes(volumeArgs.getQuotaInBytes())
-              .setCreationTime(volumeArgs.getCreationTime())
-              .build();
+        OmVolumeArgs newVolumeArgs =
+            OmVolumeArgs.newBuilder().setVolume(volumeArgs.getVolume())
+                .setAdminName(volumeArgs.getAdminName())
+                .setOwnerName(owner)
+                .setQuotaInBytes(volumeArgs.getQuotaInBytes())
+                .setCreationTime(volumeArgs.getCreationTime())
+                .build();
-      VolumeInfo newVolumeInfo = newVolumeArgs.getProtobuf();
-      batch.put(dbVolumeKey, newVolumeInfo.toByteArray());
-
-      metadataManager.writeBatch(batch);
-    } catch (IOException ex) {
+        VolumeInfo newVolumeInfo = newVolumeArgs.getProtobuf();
+        batch.put(metadataManager.getVolumeTable().getHandle(),
+            dbVolumeKey, newVolumeInfo.toByteArray());
+        metadataManager.getStore().write(batch);
+      }
+    } catch (RocksDBException | IOException ex) {
-      throw ex;
+      if(ex instanceof RocksDBException) {
+        throw RocksDBStore.toIOException("Volume creation failed.",
+            (RocksDBException) ex);
+      } else {
+        throw (IOException) ex;
+      }
-      byte[] volInfo = metadataManager.get(dbVolumeKey);
+      byte[] volInfo = metadataManager.getVolumeTable().get(dbVolumeKey);
-      metadataManager.put(dbVolumeKey, newVolumeInfo.toByteArray());
+      metadataManager.getVolumeTable().put(dbVolumeKey,
+          newVolumeInfo.toByteArray());
-      byte[] volInfo = metadataManager.get(dbVolumeKey);
+      byte[] volInfo = metadataManager.getVolumeTable().get(dbVolumeKey);
-      BatchOperation batch = new BatchOperation();
+
-      byte[] volInfo = metadataManager.get(dbVolumeKey);
+      byte[] volInfo = metadataManager.getVolumeTable().get(dbVolumeKey);
-      delVolumeFromOwnerList(volume, volumeInfo.getOwnerName(), batch);
-      batch.delete(dbVolumeKey);
-      metadataManager.writeBatch(batch);
-    } catch (IOException ex) {
+      try(WriteBatch batch = new WriteBatch()) {
+        delVolumeFromOwnerList(volume, volumeInfo.getOwnerName(), batch);
+        batch.delete(metadataManager.getVolumeTable().getHandle(),
+            dbVolumeKey);
+        metadataManager.getStore().write(batch);
+      }
+    } catch (RocksDBException| IOException ex) {
-      throw ex;
+      if(ex instanceof RocksDBException) {
+        throw RocksDBStore.toIOException("Volume creation failed.",
+            (RocksDBException) ex);
+      } else {
+        throw (IOException) ex;
+      }
-      byte[] volInfo = metadataManager.get(dbVolumeKey);
+      byte[] volInfo = metadataManager.getVolumeTable().get(dbVolumeKey);
-                                        String prefix, String startKey, int maxKeys) throws IOException {
+      String prefix, String startKey, int maxKeys) throws IOException {

INS26 INS26 UPD40 INS40 INS40 INS43 INS43 UPD43 INS42 UPD43 UPD42 INS42 UPD42 UPD42 INS32 INS54 INS54 INS54 INS32 INS32 INS42 INS32 INS58 INS8 INS84 INS25 INS58 INS8 INS84 INS25 INS5 INS58 INS8 INS84 INS25 MOV5 MOV42 INS42 INS42 INS42 MOV42 INS42 UPD42 UPD42 INS32 INS43 INS59 MOV60 MOV70 MOV60 MOV60 MOV21 MOV21 MOV21 INS43 INS43 INS62 INS8 INS8 INS43 INS59 MOV21 MOV21 MOV60 MOV60 MOV21 MOV21 INS43 INS43 INS62 INS8 INS8 INS32 INS39 INS85 MOV39 INS43 INS59 MOV21 MOV21 MOV21 INS43 INS43 INS62 INS8 INS8 INS32 INS42 INS32 UPD42 MOV42 MOV42 MOV14 INS42 INS42 INS42 INS43 MOV53 INS53 INS32 UPD42 MOV42 MOV42 MOV14 INS42 INS42 INS42 INS43 MOV53 INS53 INS32 MOV42 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS43 MOV53 INS53 INS32 INS42 INS42 MOV42 INS42 UPD43 INS32 INS32 UPD42 INS42 INS32 INS11 MOV42 INS42 UPD43 INS32 INS32 UPD42 INS42 INS32 INS11 MOV42 INS42 MOV42 INS42 MOV42 INS42 INS43 INS32 INS32 UPD42 INS42 INS32 INS11 MOV42 INS42 UPD42 INS32 INS42 MOV42 INS42 INS42 INS42 INS45 INS11 MOV43 INS42 UPD42 INS32 INS42 MOV42 INS42 INS42 INS42 INS45 INS11 MOV43 INS42 INS42 INS32 INS42 MOV42 INS42 INS42 INS42 INS45 INS11 MOV43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL43 DEL59 DEL60 DEL42 DEL43 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42