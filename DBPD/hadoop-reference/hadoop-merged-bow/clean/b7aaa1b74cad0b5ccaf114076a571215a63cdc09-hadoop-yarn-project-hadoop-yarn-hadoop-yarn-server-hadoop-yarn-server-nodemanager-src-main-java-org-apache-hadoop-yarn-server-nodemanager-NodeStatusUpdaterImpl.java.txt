Merge trunk into the HDFS-347 branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1467511 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
+
-  private long heartBeatInterval;
+  private long nextHeartBeatInterval;
+  private long rmConnectWaitMS;
+  private long rmConnectionRetryIntervalMS;
+  private boolean waitForEver;
+
+  private Runnable statusUpdaterRunnable;
+  private Thread  statusUpdater;
-    this.heartBeatInterval =
-        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,
-            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);
+
-    		" physical-memory=" + memoryMb + " virtual-memory=" + virtualMemoryMb +
-    		" physical-cores=" + cpuCores + " virtual-cores=" + virtualCores);
+        " physical-memory=" + memoryMb + " virtual-memory=" + virtualMemoryMb +
+        " physical-cores=" + cpuCores + " virtual-cores=" + virtualCores);
+
+  protected void rebootNodeStatusUpdater() {
+    // Interrupt the updater.
+    this.isStopped = true;
+
+    try {
+      statusUpdater.join();
+      registerWithRM();
+      statusUpdater = new Thread(statusUpdaterRunnable, "Node Status Updater");
+      this.isStopped = false;
+      statusUpdater.start();
+      LOG.info("NodeStatusUpdater thread is reRegistered and restarted");
+    } catch (Exception e) {
+      throw new AvroRuntimeException(e);
+    }
+  }
-  private void registerWithRM() throws YarnRemoteException {
+  @VisibleForTesting
+  protected void registerWithRM() throws YarnRemoteException {
-    long rmConnectWaitMS =
+    rmConnectWaitMS =
-    long rmConnectionRetryIntervalMS =
+    rmConnectionRetryIntervalMS =
-    boolean waitForEver = (rmConnectWaitMS == -1000);
+    waitForEver = (rmConnectWaitMS == -1000);
-  private NodeStatus getNodeStatus() {
+  public NodeStatus getNodeStatusAndUpdateContainersInContext() {
-    new Thread("Node Status Updater") {
+    statusUpdaterRunnable = new Runnable() {
-            synchronized (heartbeatMonitor) {
-              heartbeatMonitor.wait(heartBeatInterval);
-            }
-            NodeStatus nodeStatus = getNodeStatus();
+            NodeHeartbeatResponse response = null;
+            int rmRetryCount = 0;
+            long waitStartTime = System.currentTimeMillis();
+            NodeStatus nodeStatus = getNodeStatusAndUpdateContainersInContext();
-            NodeHeartbeatResponse response =
-              resourceTracker.nodeHeartbeat(request);
-
+            while (!isStopped) {
+              try {
+                rmRetryCount++;
+                response = resourceTracker.nodeHeartbeat(request);
+                break;
+              } catch (Throwable e) {
+                LOG.warn("Trying to heartbeat to ResourceManager, "
+                    + "current no. of failed attempts is " + rmRetryCount);
+                if(System.currentTimeMillis() - waitStartTime < rmConnectWaitMS
+                    || waitForEver) {
+                  try {
+                    LOG.info("Sleeping for " + rmConnectionRetryIntervalMS/1000
+                        + " seconds before next heartbeat to RM");
+                    Thread.sleep(rmConnectionRetryIntervalMS);
+                  } catch(InterruptedException ex) {
+                    //done nothing
+                  }
+                } else {
+                  String errorMessage = "Failed to heartbeat to RM, " +
+                      "no. of failed attempts is "+rmRetryCount;
+                  LOG.error(errorMessage,e);
+                  throw new YarnException(errorMessage,e);
+                }
+              }
+            }
+            //get next heartbeat interval from response
+            nextHeartBeatInterval = response.getNextHeartBeatInterval();
-                  		" hence shutting down.");
+                      " hence shutting down.");
-            if (response.getNodeAction() == NodeAction.REBOOT) {
+            if (response.getNodeAction() == NodeAction.RESYNC) {
-                  new NodeManagerEvent(NodeManagerEventType.REBOOT));
+                  new NodeManagerEvent(NodeManagerEventType.RESYNC));
+          } catch (YarnException e) {
+            //catch and throw the exception if tried MAX wait time to connect RM
+            dispatcher.getEventHandler().handle(
+                new NodeManagerEvent(NodeManagerEventType.SHUTDOWN));
+            throw e;
+          } finally {
+            synchronized (heartbeatMonitor) {
+              nextHeartBeatInterval = nextHeartBeatInterval <= 0 ?
+                  YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS :
+                    nextHeartBeatInterval;
+              try {
+                heartbeatMonitor.wait(nextHeartBeatInterval);
+              } catch (InterruptedException e) {
+                // Do Nothing
+              }
+            }
-    }.start();
+    };
+    statusUpdater =
+        new Thread(statusUpdaterRunnable, "Node Status Updater");
+    statusUpdater.start();

INS26 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS8 INS78 UPD83 UPD83 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS54 INS42 INS21 INS21 INS21 INS21 INS21 INS7 INS8 INS12 INS7 INS7 INS7 INS7 INS7 INS32 INS22 INS9 INS21 INS21 INS21 INS21 INS21 INS21 INS44 INS8 INS42 MOV27 INS42 MOV27 INS42 MOV36 INS42 MOV14 INS42 INS14 INS42 INS42 INS52 INS42 INS32 INS32 INS7 INS7 INS32 INS32 INS43 INS42 INS53 INS43 MOV43 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS22 INS9 INS42 INS42 INS42 INS42 INS45 INS42 INS14 INS42 INS43 INS42 INS45 INS52 INS42 INS43 INS42 INS42 INS42 INS12 INS8 INS60 INS60 INS60 INS61 INS21 INS44 INS8 INS51 MOV43 INS59 INS39 INS59 INS39 INS59 INS38 INS8 INS7 INS43 INS42 INS21 INS53 INS42 INS8 INS42 INS33 INS42 INS34 INS42 INS32 INS42 INS54 INS42 INS32 UPD40 INS42 INS32 INS42 INS21 INS54 UPD42 MOV42 INS42 UPD42 INS8 INS12 INS42 INS42 INS32 INS42 INS14 INS7 INS8 INS12 INS21 INS21 INS10 INS44 INS8 INS42 INS42 INS43 INS40 INS42 INS16 INS21 INS44 INS8 INS37 INS7 INS43 INS42 INS21 INS25 UPD40 INS42 INS27 INS40 INS42 INS32 INS43 INS42 INS42 INS42 MOV32 INS42 INS32 INS27 INS8 INS8 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS54 MOV60 INS21 INS53 INS45 INS45 INS42 INS27 INS42 INS8 INS12 INS43 INS32 INS14 INS32 INS42 INS21 INS21 INS44 INS8 INS42 UPD42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS45 INS45 INS27 INS42 INS34 DEL52 DEL42 DEL22 DEL42 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL42 DEL32