MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.yarn.api.records.ApplicationId;
-import org.apache.hadoop.yarn.api.records.ContainerState;
+import org.apache.hadoop.yarn.api.records.ContainerStatus;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerUtils;
-  private final RecordFactory recordFactory = 
+  private static final RecordFactory recordFactory = 
-      containerCompleted(rmContainer, RMContainerEventType.RELEASED);
+      containerCompleted(rmContainer,
+          SchedulerUtils.createAbnormalContainerStatus(
+              releasedContainer, 
+              SchedulerUtils.RELEASED_CONTAINER),
+          RMContainerEventType.RELEASED);
-      containerCompleted(container, RMContainerEventType.KILL);
+      containerCompleted(container, 
+          SchedulerUtils.createAbnormalContainerStatus(
+              container.getContainerId(), 
+              SchedulerUtils.COMPLETED_APPLICATION),
+          RMContainerEventType.KILL);
-  private synchronized void nodeUpdate(RMNode rmNode,
-      Map<ApplicationId, List<Container>> remoteContainers) {
+  private synchronized void nodeUpdate(RMNode rmNode, 
+      List<ContainerStatus> newlyLaunchedContainers,
+      List<ContainerStatus> completedContainers) {
-    for (List<Container> appContainers : remoteContainers.values()) {
-      for (Container container : appContainers) {
-        /* make sure the scheduler hasnt already removed the applications */
-        if (getApplication(container.getId().getAppAttemptId()) != null) {
-          if (container.getState() == ContainerState.RUNNING) {
-            containerLaunchedOnNode(container, node);
-          } else { // has to COMPLETE
-            containerCompleted(getRMContainer(container.getId()), 
-                RMContainerEventType.FINISHED);
-          }
-        }
-        else {
-          LOG.warn("Scheduler not tracking application " + container.getId().getAppAttemptId());
-        }
-      }
+    // Processing the newly launched containers
+    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {
+      containerLaunchedOnNode(launchedContainer.getContainerId(), node);
+    }
+
+    // Process completed containers
+    for (ContainerStatus completedContainer : completedContainers) {
+      ContainerId containerId = completedContainer.getContainerId();
+      LOG.info("DEBUG --- Container FINISHED: " + containerId);
+      containerCompleted(getRMContainer(containerId), 
+          completedContainer, RMContainerEventType.FINISHED);
-          nodeUpdatedEvent.getContainers());
+          nodeUpdatedEvent.getNewlyLaunchedContainers(),
+          nodeUpdatedEvent.getCompletedContainers());
-      containerCompleted(getRMContainer(containerExpiredEvent.getContainerId()), 
+      ContainerId containerid = containerExpiredEvent.getContainerId();
+      containerCompleted(getRMContainer(containerid), 
+          SchedulerUtils.createAbnormalContainerStatus(
+              containerid, 
+              SchedulerUtils.EXPIRED_CONTAINER),
-  private void containerLaunchedOnNode(Container container, SchedulerNode node) {
+  private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {
-    ApplicationAttemptId applicationAttemptId = container.getId().getAppAttemptId();
+    ApplicationAttemptId applicationAttemptId = containerId.getAppAttemptId();
-          " launched container " + container.getId() +
+          " launched container " + containerId +
-    application.containerLaunchedOnNode(container.getId());
+    application.containerLaunchedOnNode(containerId);
-      RMContainerEventType event) {
+      ContainerStatus containerStatus, RMContainerEventType event) {
-    application.containerCompleted(rmContainer, event);
+    application.containerCompleted(rmContainer, containerStatus, event);
-      containerCompleted(container, RMContainerEventType.KILL);
+      containerCompleted(container, 
+          SchedulerUtils.createAbnormalContainerStatus(
+              container.getContainerId(), 
+              SchedulerUtils.LOST_CONTAINER),
+              RMContainerEventType.KILL);

MOV26 MOV26 UPD40 UPD40 INS83 MOV44 INS44 UPD74 MOV74 UPD42 UPD74 UPD42 INS70 INS70 UPD43 UPD42 INS43 INS42 UPD43 UPD43 MOV44 UPD42 MOV42 INS8 INS44 INS42 INS8 UPD42 INS42 UPD42 UPD42 UPD43 UPD42 INS21 INS43 INS42 INS60 INS21 INS21 INS60 UPD42 MOV42 INS42 UPD42 INS32 INS42 INS43 INS59 INS32 INS32 INS43 INS59 UPD42 MOV42 INS32 INS32 UPD42 MOV42 MOV32 UPD42 MOV42 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS27 INS42 MOV32 UPD42 MOV42 INS40 INS32 INS42 INS42 MOV32 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS40 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS42 UPD42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL32 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL32 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32