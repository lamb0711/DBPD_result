HDDS-1611. Evaluate ACL on volume bucket key and prefix to authorize access. Contributed by Ajay Kumar. (#973)


+import java.util.BitSet;
+import org.apache.hadoop.ozone.om.exceptions.OMException;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo;
+import org.apache.hadoop.ozone.security.acl.RequestContext;
+import static org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType.ALL;
+import static org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType.NONE;
-      userGroups.stream().forEach((group) -> listOfAcls.add(
+      userGroups.forEach((group) -> listOfAcls.add(
+
+  /**
+   * Check if acl right requested for given RequestContext exist
+   * in provided acl list.
+   * Acl validation rules:
+   * 1. If user/group has ALL bit set than all user should have all rights.
+   * 2. If user/group has NONE bit set than user/group will not have any right.
+   * 3. For all other individual rights individual bits should be set.
+   *
+   * @param acls
+   * @param context
+   * @return return true if acl list contains right requsted in context.
+   * */
+  public static boolean checkAclRight(List<OzoneAclInfo> acls,
+      RequestContext context) throws OMException {
+    String[] userGroups = context.getClientUgi().getGroupNames();
+    String userName = context.getClientUgi().getUserName();
+    ACLType aclToCheck = context.getAclRights();
+    for (OzoneAclInfo a : acls) {
+      if(checkAccessInAcl(a, userGroups, userName, aclToCheck)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private static boolean checkAccessInAcl(OzoneAclInfo a, String[] groups,
+      String username, ACLType aclToCheck) {
+    BitSet rights = BitSet.valueOf(a.getRights().toByteArray());
+    switch (a.getType()) {
+    case USER:
+      if (a.getName().equals(username)) {
+        return checkIfAclBitIsSet(aclToCheck, rights);
+      }
+      break;
+    case GROUP:
+      for (String grp : groups) {
+         // TODO: Convert ozone acls to proto map format for efficient
+        //  acl checks.
+        if (a.getName().equals(grp)) {
+          return checkIfAclBitIsSet(aclToCheck, rights);
+        }
+      }
+      break;
+
+    default:
+      return checkIfAclBitIsSet(aclToCheck, rights);
+    }
+    return false;
+  }
+
+  /**
+   * Check if acl right requested for given RequestContext exist
+   * in provided acl list.
+   * Acl validation rules:
+   * 1. If user/group has ALL bit set than all user should have all rights.
+   * 2. If user/group has NONE bit set than user/group will not have any right.
+   * 3. For all other individual rights individual bits should be set.
+   *
+   * @param acls
+   * @param context
+   * @return return true if acl list contains right requsted in context.
+   * */
+  public static boolean checkAclRights(List<OzoneAcl> acls,
+      RequestContext context) throws OMException {
+    String[] userGroups = context.getClientUgi().getGroupNames();
+    String userName = context.getClientUgi().getUserName();
+    ACLType aclToCheck = context.getAclRights();
+    // TODO: All ozone types should use one data type for acls. i.e Store
+    //  and maintain acls in proto format only.
+    for (OzoneAcl a : acls) {
+      if (checkAccessInAcl(OzoneAcl.toProtobuf(a), userGroups,
+          userName, aclToCheck)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Helper function to check if bit for given acl is set.
+   * @param acl
+   * @param bitset
+   * @return True of acl bit is set else false.
+   * */
+  public static boolean checkIfAclBitIsSet(ACLType acl, BitSet bitset) {
+    if (bitset == null) {
+      return false;
+    }
+
+    return ((bitset.get(acl.ordinal())
+        || bitset.get(ALL.ordinal()))
+        && !bitset.get(NONE.ordinal()));
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS70 INS41 INS43 INS42 INS5 INS42 INS43 INS42 INS43 INS42 INS60 INS50 INS41 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS70 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS66 INS43 INS43 INS42 INS5 INS59 INS43 INS59 INS43 INS59 INS44 INS42 INS8 INS9 INS42 INS43 INS85 INS42 INS42 INS43 INS59 INS32 INS49 INS25 INS10 INS49 INS70 INS10 INS49 INS41 INS9 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS66 INS43 INS43 INS42 INS5 INS59 INS43 INS59 INS43 INS59 INS44 INS42 INS8 INS9 INS66 INS42 INS42 INS66 INS42 INS42 INS27 INS8 INS36 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS8 INS42 INS44 INS42 INS8 INS32 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS25 INS42 INS33 INS41 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS32 INS32 INS42 INS42 INS41 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS8 INS9 INS36 INS38 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS27 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS42 INS9 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32