HDFS-3137. Bump LAST_UPGRADABLE_LAYOUT_VERSION to -16. Contributed by Eli Collins


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1307173 13f79535-47bb-0310-9956-ffa450edef68

-        /*
-         * Note: Remove any checks for version earlier than 
-         * Storage.LAST_UPGRADABLE_LAYOUT_VERSION since we should never get 
-         * to here with older images.
-         */
-
-        /*
-         * TODO we need to change format of the image file
-         * it should not contain version and namespace fields
-         */
-        if(getLayoutVersion() != imgVersion)
+        if (getLayoutVersion() != imgVersion) {
+        }
-        // read number of files
-        long numFiles = readNumFiles(in);
+        long numFiles = in.readLong();
-        if (imgVersion <= -12) {
-          long genstamp = in.readLong();
-          namesystem.setGenerationStamp(genstamp); 
-        }
+        long genstamp = in.readLong();
+        namesystem.setGenerationStamp(genstamp); 
-        
-        // load datanode info
-        this.loadDatanodes(in);
+        loadFilesUnderConstruction(in);
-        // load Files Under Construction
-        this.loadFilesUnderConstruction(in);
-
-        this.loadSecretManagerState(in);
+        loadSecretManagerState(in);
-    if (imgVersion <= -8) {
-      blockSize = in.readLong();
-    }
+    blockSize = in.readLong();
-    // for older versions, a blocklist of size 0
-    // indicates a directory.
-    if ((-9 <= imgVersion && numBlocks > 0) ||
-        (imgVersion < -9 && numBlocks >= 0)) {
+    if (numBlocks >= 0) {
-        if (-14 < imgVersion) {
-          blocks[j].set(in.readLong(), in.readLong(), 
-                        GenerationStamp.GRANDFATHER_GENERATION_STAMP);
-        } else {
-          blocks[j].readFields(in);
-        }
-      }
-    }
-    // Older versions of HDFS does not store the block size in inode.
-    // If the file has more than one block, use the size of the 
-    // first block as the blocksize. Otherwise use the default block size.
-    //
-    if (-8 <= imgVersion && blockSize == 0) {
-      if (numBlocks > 1) {
-        blockSize = blocks[0].getNumBytes();
-      } else {
-        long first = ((numBlocks == 1) ? blocks[0].getNumBytes(): 0);
-        blockSize = Math.max(namesystem.getDefaultBlockSize(), first);
+        blocks[j].readFields(in);
-      if (LayoutVersion.supports(Feature.NAMESPACE_QUOTA, imgVersion)
-          && blocks == null && numBlocks == -1) {
-        nsQuota = in.readLong();
-      }
-      long dsQuota = -1L;
-      if (LayoutVersion.supports(Feature.DISKSPACE_QUOTA, imgVersion)
-          && blocks == null && numBlocks == -1) {
-        dsQuota = in.readLong();
-      }
-  
-      // Read the symlink only when the node is a symlink
-      String symlink = "";
-      if (numBlocks == -2) {
-        symlink = Text.readString(in);
-      }
-      
-      PermissionStatus permissions = namesystem.getUpgradePermission();
-      if (imgVersion <= -11) {
-        permissions = PermissionStatus.read(in);
-      }
-  
-      return INode.newINode(permissions, blocks, symlink, replication,
-          modificationTime, atime, nsQuota, dsQuota, blockSize);
+    if (blocks == null && numBlocks == -1) {
+      nsQuota = in.readLong();
+    }
+    long dsQuota = -1L;
+    if (LayoutVersion.supports(Feature.DISKSPACE_QUOTA, imgVersion)
+        && blocks == null && numBlocks == -1) {
+      dsQuota = in.readLong();
-    private void loadDatanodes(DataInputStream in)
-        throws IOException {
-      int imgVersion = getLayoutVersion();
-
-      if (imgVersion > -3) // pre datanode image version
-        return;
-      if (imgVersion <= -12) {
-        return; // new versions do not store the datanodes any more.
-      }
-      int size = in.readInt();
-      for(int i = 0; i < size; i++) {
-        // We don't need to add these descriptors any more.
-        FSImageSerialization.DatanodeImage.skipOne(in);
-      }
+    // Read the symlink only when the node is a symlink
+    String symlink = "";
+    if (numBlocks == -2) {
+      symlink = Text.readString(in);
+    
+    PermissionStatus permissions = PermissionStatus.read(in);
+
+    return INode.newINode(permissions, blocks, symlink, replication,
+        modificationTime, atime, nsQuota, dsQuota, blockSize);
+  }
-      int imgVersion = getLayoutVersion();
-      if (imgVersion > -13) // pre lease image version
-        return;
-    private long readNumFiles(DataInputStream in)
-        throws IOException {
-      int imgVersion = getLayoutVersion();
-
-      if (LayoutVersion.supports(Feature.NAMESPACE_QUOTA, imgVersion)) {
-        return in.readLong();
-      } else {
-        return in.readInt();
-      }
-    }
-

MOV21 MOV27 MOV8 MOV60 MOV21 MOV21 INS24 MOV27 MOV32 INS8 MOV58 MOV27 MOV37 MOV8 MOV53 MOV21 MOV42 DEL42 DEL42 DEL34 DEL38 DEL27 DEL8 DEL25 DEL52 DEL42 DEL42 DEL32 DEL21 DEL52 DEL52 DEL42 DEL34 DEL38 DEL27 DEL8 DEL25 DEL34 DEL38 DEL42 DEL27 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL21 DEL8 DEL25 DEL34 DEL38 DEL42 DEL27 DEL42 DEL34 DEL27 DEL27 DEL36 DEL42 DEL34 DEL38 DEL27 DEL27 DEL36 DEL27 DEL24 DEL8 DEL34 DEL38 DEL42 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL34 DEL27 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL39 DEL42 DEL42 DEL34 DEL27 DEL36 DEL42 DEL34 DEL2 DEL42 DEL32 DEL34 DEL16 DEL36 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL40 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL34 DEL38 DEL27 DEL42 DEL7 DEL21 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL41 DEL25 DEL42 DEL34 DEL38 DEL27 DEL41 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL41 DEL25 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31