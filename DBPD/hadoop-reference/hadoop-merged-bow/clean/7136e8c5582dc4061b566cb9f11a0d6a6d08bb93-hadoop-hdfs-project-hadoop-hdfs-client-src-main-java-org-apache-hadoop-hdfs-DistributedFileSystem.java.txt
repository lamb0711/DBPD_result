HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.

-import org.apache.hadoop.fs.FileAlreadyExistsException;
-import org.apache.hadoop.fs.ParentNotDirectoryException;
-import org.apache.hadoop.security.AccessControlException;
-  
+
-      throw new IllegalArgumentException("Invalid DFS directory name " + 
-                                         result);
+      throw new IllegalArgumentException("Invalid DFS directory name " +
+          result);
-   * 
+   *
-                                         file+" is not a valid DFS filename.");
+          file+" is not a valid DFS filename.");
-  
+
-  
+
-  public BlockLocation[] getFileBlockLocations(Path p, 
+  public BlockLocation[] getFileBlockLocations(Path p,
-  /** 
+  /**
-      public Boolean doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Boolean doCall(final Path p) throws IOException{
-      public FSDataInputStream doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public FSDataInputStream doCall(final Path p) throws IOException {
-          dfs.open(getPathName(p), bufferSize, verifyChecksum);
+            dfs.open(getPathName(p), bufferSize, verifyChecksum);
-   * 
+   *
-   * 
+   *
-   * Same as  
-   * {@link #create(Path, FsPermission, boolean, int, short, long, 
-   * Progressable)} with the addition of favoredNodes that is a hint to 
+   * Same as
+   * {@link #create(Path, FsPermission, boolean, int, short, long,
+   * Progressable)} with the addition of favoredNodes that is a hint to
-          throws IOException {
+      throws IOException {
-      public HdfsDataOutputStream doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public HdfsDataOutputStream doCall(final Path p) throws IOException {
-  
+
-    final EnumSet<CreateFlag> cflags, final int bufferSize,
-    final short replication, final long blockSize, final Progressable progress,
-    final ChecksumOpt checksumOpt) throws IOException {
+      final EnumSet<CreateFlag> cflags, final int bufferSize,
+      final short replication, final long blockSize,
+      final Progressable progress, final ChecksumOpt checksumOpt)
+      throws IOException {
-      public FSDataOutputStream doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public FSDataOutputStream doCall(final Path p) throws IOException {
-                cflags, replication, blockSize, progress, bufferSize,
-                checksumOpt);
+            cflags, replication, blockSize, progress, bufferSize,
+            checksumOpt);
-    FsPermission absolutePermission, EnumSet<CreateFlag> flag, int bufferSize,
-    short replication, long blockSize, Progressable progress,
-    ChecksumOpt checksumOpt) throws IOException {
+      FsPermission absolutePermission, EnumSet<CreateFlag> flag, int bufferSize,
+      short replication, long blockSize, Progressable progress,
+      ChecksumOpt checksumOpt) throws IOException {
-      getPathName(fixRelativePart(f)),
-      absolutePermission, flag, true, replication, blockSize,
-      progress, bufferSize, checksumOpt);
+        getPathName(fixRelativePart(f)),
+        absolutePermission, flag, true, replication, blockSize,
+        progress, bufferSize, checksumOpt);
-      public FSDataOutputStream doCall(final Path p) throws IOException,
-          UnresolvedLinkException {
+      public FSDataOutputStream doCall(final Path p) throws IOException {
-          flag, false, replication, blockSize, progress, bufferSize, null);
+            flag, false, replication, blockSize, progress, bufferSize, null);
-  public boolean setReplication(Path src, 
-                                final short replication
-                               ) throws IOException {
+  public boolean setReplication(Path src, final short replication)
+      throws IOException {
-      public Boolean doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Boolean doCall(final Path p) throws IOException {
-      public Void doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-          throws IOException, UnresolvedLinkException {
+          throws IOException {
-   * @return
-   * 
+   *
-  
+
-        public Boolean doCall(final Path p)
-            throws IOException, UnresolvedLinkException {
+        public Boolean doCall(final Path p) throws IOException {
-  /** 
+  /**
-        public Void doCall(final Path p)
-            throws IOException, UnresolvedLinkException {
+        public Void doCall(final Path p) throws IOException {
-      public Boolean doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Boolean doCall(final Path p) throws IOException {
-      public Boolean doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Boolean doCall(final Path p) throws IOException {
-  
+
-      public ContentSummary doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public ContentSummary doCall(final Path p) throws IOException {
-   * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#setQuota(String, long, long, StorageType)
+   * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#setQuota(String,
+   * long, long, StorageType)
-      public Void doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-  public void setQuotaByStorageType(
-    Path src, final StorageType type, final long quota)
-    throws IOException {
+  public void setQuotaByStorageType(Path src, final StorageType type,
+      final long quota)
+      throws IOException {
-      public Void doCall(final Path p)
-        throws IOException, UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-        throws IOException {
-        // setQuotaByStorageType is not defined in FileSystem, so we only can resolve
-        // within this DFS
+          throws IOException {
+        // setQuotaByStorageType is not defined in FileSystem, so we only can
+        // resolve within this DFS
-    
+
-      partialListing.length + thisListing.getRemainingEntries();
+        partialListing.length + thisListing.getRemainingEntries();
-      new ArrayList<FileStatus>(totalNumEntries);
+        new ArrayList<>(totalNumEntries);
- 
+
- 
+
- 
+
- 
+
-      public FileStatus[] doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public FileStatus[] doCall(final Path p) throws IOException {
-  throws IOException {
+      throws IOException {
-          throws IOException, UnresolvedLinkException {
-        return new DirListingIterator<LocatedFileStatus>(p, filter, true);
+          throws IOException {
+        return new DirListingIterator<>(p, filter, true);
-      public RemoteIterator<LocatedFileStatus> next(final FileSystem fs, final Path p)
-          throws IOException {
+      public RemoteIterator<LocatedFileStatus> next(final FileSystem fs,
+          final Path p) throws IOException {
-  throws IOException {
+      throws IOException {
-          throws IOException, UnresolvedLinkException {
-        return new DirListingIterator<FileStatus>(p, false);
+          throws IOException {
+        return new DirListingIterator<>(p, false);
-          return ((DistributedFileSystem)fs).listStatusIterator(p);
+        return ((DistributedFileSystem)fs).listStatusIterator(p);
-   * 
+   *
-   * 
+   *
-  implements RemoteIterator<T> {
+      implements RemoteIterator<T> {
-          // apply filter if not null
+        // apply filter if not null
-      
+
-          && thisListing.hasMore()) { 
+          && thisListing.hasMore()) {
-      } 
+      }
-  
+
-   * @param permission  The permission.  See FsPermission#applyUMask for 
+   * @param permission  The permission.  See FsPermission#applyUMask for
-   * @param permission  The permission.  See FsPermission#applyUMask for 
+   * @param permission  The permission.  See FsPermission#applyUMask for
-      public Boolean doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Boolean doCall(final Path p) throws IOException {
-    throws IOException {
+      throws IOException {
- 
+
-  }        
-  
+  }
+
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    throws IOException {
+      throws IOException {
-  public DatanodeInfo[] getDataNodeStats(final DatanodeReportType type
-      ) throws IOException {
+  public DatanodeInfo[] getDataNodeStats(final DatanodeReportType type)
+      throws IOException {
-   *  
+   *
-  public boolean setSafeMode(HdfsConstants.SafeModeAction action) 
-  throws IOException {
+  public boolean setSafeMode(HdfsConstants.SafeModeAction action)
+      throws IOException {
-   * 
+   *
-  public long rollEdits() throws AccessControlException, IOException {
+  public long rollEdits() throws IOException {
-   * 
+   *
-  public boolean restoreFailedStorage(String arg)
-      throws AccessControlException, IOException {
+  public boolean restoreFailedStorage(String arg) throws IOException {
-  
+
-   * Refreshes the list of hosts and excluded hosts from the configured 
-   * files.  
+   * Refreshes the list of hosts and excluded hosts from the configured
+   * files.
-   * Requests the namenode to dump data strcutures into specified 
+   * Requests the namenode to dump data strcutures into specified
-      public FileStatus doCall(final Path p) throws IOException,
-          UnresolvedLinkException {
+      public FileStatus doCall(final Path p) throws IOException {
-      final boolean createParent) throws AccessControlException,
-      FileAlreadyExistsException, FileNotFoundException,
-      ParentNotDirectoryException, UnsupportedFileSystemException, 
-      IOException {
+      final boolean createParent) throws IOException {
-      public Void doCall(final Path p) throws IOException,
-          UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-      public Void next(final FileSystem fs, final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Void next(final FileSystem fs, final Path p) throws IOException {
-  public FileStatus getFileLinkStatus(final Path f)
-      throws AccessControlException, FileNotFoundException,
-      UnsupportedFileSystemException, IOException {
+  public FileStatus getFileLinkStatus(final Path f) throws IOException {
-      public FileStatus doCall(final Path p) throws IOException,
-          UnresolvedLinkException {
+      public FileStatus doCall(final Path p) throws IOException {
-        throws IOException, UnresolvedLinkException {
+          throws IOException {
-  public Path getLinkTarget(final Path f) throws AccessControlException,
-      FileNotFoundException, UnsupportedFileSystemException, IOException {
+  public Path getLinkTarget(final Path f) throws IOException {
-      public Path doCall(final Path p) throws IOException,
-          UnresolvedLinkException {
+      public Path doCall(final Path p) throws IOException {
-      public Path next(final FileSystem fs, final Path p)
-        throws IOException, UnresolvedLinkException {
+      public Path next(final FileSystem fs, final Path p) throws IOException {
-      public FileChecksum doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public FileChecksum doCall(final Path p) throws IOException {
-      public FileChecksum doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public FileChecksum doCall(final Path p) throws IOException {
-          return ((DistributedFileSystem) fs).getFileChecksum(p, length);
+          return fs.getFileChecksum(p, length);
-                  + fs.getClass().getSimpleName()); 
+                  + fs.getClass().getSimpleName());
-      ) throws IOException {
+  ) throws IOException {
-      public Void doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-  public void setOwner(Path p, final String username, final String groupname
-      ) throws IOException {
+  public void setOwner(Path p, final String username, final String groupname)
+      throws IOException {
-      public Void doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-  public void setTimes(Path p, final long mtime, final long atime
-      ) throws IOException {
+  public void setTimes(Path p, final long mtime, final long atime)
+      throws IOException {
-      public Void doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-  
+
-    Token<DelegationTokenIdentifier> result =
-      dfs.getDelegationToken(renewer == null ? null : new Text(renewer));
-    return result;
+    return dfs.getDelegationToken(renewer == null ? null : new Text(renewer));
-  
+
-   * 
+   *
-      public Void doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-  
+
-      public Void doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-  
+
-  public Path createSnapshot(final Path path, final String snapshotName) 
+  public Path createSnapshot(final Path path, final String snapshotName)
-      public Path doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Path doCall(final Path p) throws IOException {
-  
+
-      public Void doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-  
+
-  
+
-      public Void doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-   * 
+   *
-      public SnapshotDiffReport doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public SnapshotDiffReport doCall(final Path p) throws IOException {
- 
+
-   * @throws IOException If an I/O error occurred     
+   * @throws IOException If an I/O error occurred
-      public Boolean doCall(final Path p)
-          throws IOException, UnresolvedLinkException {
+      public Boolean doCall(final Path p) throws IOException {
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  
+
-   * 
+   *
-   * @throws IOException 
+   * @throws IOException
-   * @throws IOException 
+   * @throws IOException
-    
+
-   * @throws IOException 
+   * @throws IOException
-      public Void next(final FileSystem fs, final Path p)
-        throws IOException, UnresolvedLinkException {
+      public Void next(final FileSystem fs, final Path p) throws IOException {
-      public Void next(final FileSystem fs, final Path p)
-        throws IOException, UnresolvedLinkException {
+      public Void next(final FileSystem fs, final Path p) throws IOException {
-  public void setAcl(Path path, final List<AclEntry> aclSpec) throws IOException {
+  public void setAcl(Path path, final List<AclEntry> aclSpec)
+      throws IOException {
-        throws IOException, UnresolvedLinkException {
+          throws IOException {
-  
+
-    throws IOException {
+      throws IOException {
-      public Void doCall(final Path p) throws IOException,
-          UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-          throws IOException {
+      throws IOException {
-      public EncryptionZone doCall(final Path p) throws IOException,
-          UnresolvedLinkException {
+      public EncryptionZone doCall(final Path p) throws IOException {
-  public void setXAttr(Path path, final String name, final byte[] value, 
+  public void setXAttr(Path path, final String name, final byte[] value,
-      }      
+      }
-  
+
-      public byte[] next(final FileSystem fs, final Path p)
-        throws IOException, UnresolvedLinkException {
+      public byte[] next(final FileSystem fs, final Path p) throws IOException {
-  
+
-        throws IOException, UnresolvedLinkException {
+          throws IOException {
-  
+
-  public Map<String, byte[]> getXAttrs(Path path, final List<String> names) 
+  public Map<String, byte[]> getXAttrs(Path path, final List<String> names)
-        throws IOException, UnresolvedLinkException {
+          throws IOException {
-  
+
-          throws IOException {
+      throws IOException {
-              throws IOException, UnresolvedLinkException {
+          throws IOException {
-   * @param ecPolicy The erasure coding policy. If not specified default will be used.
+   * @param ecPolicy The erasure coding policy. If not specified default will
+   *                 be used.
-  public void setErasureCodingPolicy(final Path path, final ErasureCodingPolicy ecPolicy)
-      throws IOException {
+  public void setErasureCodingPolicy(final Path path,
+      final ErasureCodingPolicy ecPolicy) throws IOException {
-      public Void doCall(final Path p) throws IOException,
-          UnresolvedLinkException {
+      public Void doCall(final Path p) throws IOException {
-      public ErasureCodingPolicy doCall(final Path p) throws IOException,
-          UnresolvedLinkException {
+      public ErasureCodingPolicy doCall(final Path p) throws IOException {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV32 UPD66 UPD66 INS66 UPD74 UPD74 UPD74 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL66 DEL66 DEL66 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43