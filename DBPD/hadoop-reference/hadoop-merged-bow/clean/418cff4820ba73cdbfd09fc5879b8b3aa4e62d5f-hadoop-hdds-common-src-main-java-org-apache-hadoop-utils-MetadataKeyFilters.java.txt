Merge remote-tracking branch 'apache-commit/trunk' into HDDS-48

+import org.apache.hadoop.hdfs.DFSUtil;
+import java.util.ArrayList;
+import java.util.List;
+
-      new MetadataKeyFilters.KeyPrefixFilter(OzoneConsts.DELETING_KEY_PREFIX);
+      new MetadataKeyFilters.KeyPrefixFilter()
+          .addFilter(OzoneConsts.DELETING_KEY_PREFIX);
+
+  private static KeyPrefixFilter deletedKeyFilter =
+      new MetadataKeyFilters.KeyPrefixFilter()
+          .addFilter(OzoneConsts.DELETED_KEY_PREFIX);
-      new MetadataKeyFilters.KeyPrefixFilter(OzoneConsts.DELETING_KEY_PREFIX,
-          true);
+      new MetadataKeyFilters.KeyPrefixFilter()
+          .addFilter(OzoneConsts.DELETING_KEY_PREFIX, true)
+          .addFilter(OzoneConsts.DELETED_KEY_PREFIX, true)
+          .addFilter(OzoneConsts.DELETE_TRANSACTION_KEY_PREFIX, true);
+  public static KeyPrefixFilter getDeletedKeyFilter() {
+    return deletedKeyFilter;
+  }
+
-    private String keyPrefix = null;
+    private List<String> positivePrefixList = new ArrayList<>();
+    private List<String> negativePrefixList = new ArrayList<>();
+    private boolean atleastOnePositiveMatch;
-    private Boolean negative;
-    public KeyPrefixFilter(String keyPrefix) {
-      this(keyPrefix, false);
+    public KeyPrefixFilter() {}
+
+    /**
+     * KeyPrefixFilter constructor. It is made of positive and negative prefix
+     * list. PositivePrefixList is the list of prefixes which are accepted
+     * whereas negativePrefixList contains the list of prefixes which are
+     * rejected.
+     *
+     * @param atleastOnePositiveMatch if positive it requires key to be accepted
+     *                               by atleast one positive filter.
+     */
+    public KeyPrefixFilter(boolean atleastOnePositiveMatch) {
+      this.atleastOnePositiveMatch = atleastOnePositiveMatch;
-    public KeyPrefixFilter(String keyPrefix, boolean negative) {
-      this.keyPrefix = keyPrefix;
-      this.negative = negative;
+    public KeyPrefixFilter addFilter(String keyPrefix) {
+      addFilter(keyPrefix, false);
+      return this;
+    }
+
+    public KeyPrefixFilter addFilter(String keyPrefix, boolean negative) {
+      Preconditions.checkArgument(!Strings.isNullOrEmpty(keyPrefix),
+          "KeyPrefix is null or empty: " + keyPrefix);
+      // keyPrefix which needs to be added should not be prefix of any opposing
+      // filter already present. If keyPrefix is a negative filter it should not
+      // be a prefix of any positive filter. Nor should any opposing filter be
+      // a prefix of keyPrefix.
+      // For example if b0 is accepted b can not be rejected and
+      // if b is accepted b0 can not be rejected. If these scenarios need to be
+      // handled we need to add priorities.
+      if (negative) {
+        Preconditions.checkArgument(positivePrefixList.stream().noneMatch(
+            prefix -> prefix.startsWith(keyPrefix) || keyPrefix
+                .startsWith(prefix)),
+            "KeyPrefix: " + keyPrefix + " already accepted.");
+        this.negativePrefixList.add(keyPrefix);
+      } else {
+        Preconditions.checkArgument(negativePrefixList.stream().noneMatch(
+            prefix -> prefix.startsWith(keyPrefix) || keyPrefix
+                .startsWith(prefix)),
+            "KeyPrefix: " + keyPrefix + " already rejected.");
+        this.positivePrefixList.add(keyPrefix);
+      }
+      return this;
-      boolean accept = false;
-      if (Strings.isNullOrEmpty(keyPrefix)) {
-        accept = true;
-      } else {
-        byte [] prefixBytes = keyPrefix.getBytes();
-        if (currentKey != null && prefixMatch(prefixBytes, currentKey)) {
-          keysHinted++;
-          accept = true;
-        } else {
-          accept = false;
-        }
+      if (currentKey == null) {
+        return false;
-      return (negative) ? !accept : accept;
+      boolean accept;
+
+      // There are no filters present
+      if (positivePrefixList.isEmpty() && negativePrefixList.isEmpty()) {
+        return true;
+      }
+
+      accept = !positivePrefixList.isEmpty() && positivePrefixList.stream()
+          .anyMatch(prefix -> {
+            byte[] prefixBytes = DFSUtil.string2Bytes(prefix);
+            return prefixMatch(prefixBytes, currentKey);
+          });
+      if (accept) {
+        keysHinted++;
+        return true;
+      } else if (atleastOnePositiveMatch) {
+        return false;
+      }
+
+      accept = !negativePrefixList.isEmpty() && negativePrefixList.stream()
+          .allMatch(prefix -> {
+            byte[] prefixBytes = DFSUtil.string2Bytes(prefix);
+            return !prefixMatch(prefixBytes, currentKey);
+          });
+      if (accept) {
+        keysHinted++;
+        return true;
+      }
+
+      return false;
-    private boolean prefixMatch(byte[] prefix, byte[] key) {
+    private static boolean prefixMatch(byte[] prefix, byte[] key) {

INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS23 INS31 MOV23 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS42 INS8 INS23 INS31 INS31 UPD42 INS32 UPD42 INS32 INS42 INS42 INS32 INS42 INS41 INS74 INS74 INS83 INS39 INS59 INS83 INS42 INS8 INS29 INS83 INS42 INS44 INS8 INS43 INS42 INS43 INS42 INS83 MOV14 INS42 INS40 MOV14 INS42 INS40 INS32 INS42 INS40 INS9 INS42 INS43 MOV43 UPD42 INS14 INS43 INS43 UPD42 INS14 INS42 INS65 INS65 INS39 INS42 INS21 INS42 INS21 INS41 INS42 INS21 INS25 INS41 INS25 INS25 INS21 MOV25 INS21 INS25 INS41 INS32 INS42 INS40 INS9 INS42 INS74 UPD42 MOV42 INS42 INS74 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS7 INS32 INS52 INS32 INS42 INS8 INS8 INS52 INS27 INS8 INS27 INS8 INS7 INS42 INS25 INS7 INS42 INS8 INS9 INS14 INS42 INS40 INS9 INS43 INS43 INS22 INS42 INS42 INS42 INS9 INS42 INS42 INS38 INS27 INS21 MOV21 INS21 MOV21 INS42 INS33 INS41 INS32 INS32 INS41 INS42 INS27 INS41 INS42 INS8 INS42 INS27 INS21 INS41 INS43 INS42 INS42 INS52 INS42 MOV32 INS45 INS42 INS32 INS32 INS32 INS32 INS9 INS42 INS42 INS42 INS42 INS9 INS38 INS32 INS9 INS41 INS38 INS32 INS37 INS9 INS40 INS42 INS42 INS32 INS27 INS22 INS42 INS42 INS42 INS42 INS32 INS27 INS22 INS42 INS42 INS32 INS32 INS42 INS86 INS9 INS32 INS32 INS42 INS86 INS42 INS32 INS42 INS86 INS45 INS42 INS45 MOV52 UPD42 MOV42 INS32 INS42 INS86 INS45 INS42 INS45 MOV52 UPD42 MOV42 INS42 INS42 INS42 INS42 INS59 INS8 INS42 INS42 INS42 INS42 INS59 INS8 INS42 INS42 INS59 INS27 INS42 INS42 INS59 INS27 INS42 MOV60 INS41 INS42 INS60 INS41 INS42 INS32 INS32 INS42 INS32 INS32 MOV32 INS5 INS59 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS32 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL9 DEL40 DEL33 DEL43 DEL42 DEL42 DEL9 DEL17 DEL42 DEL22 DEL42 DEL7 DEL22 DEL42 DEL7 DEL9 DEL42 DEL33 DEL27 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL8 DEL25 DEL42 DEL36 DEL42 DEL38 DEL42 DEL16 DEL41