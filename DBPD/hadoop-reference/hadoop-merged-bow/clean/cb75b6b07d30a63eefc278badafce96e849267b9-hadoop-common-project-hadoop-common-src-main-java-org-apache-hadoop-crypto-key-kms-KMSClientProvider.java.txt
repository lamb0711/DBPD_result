Merge r1609845 through r1618416 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1618417 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.crypto.key.KeyProviderDelegationTokenExtension;
+import org.apache.hadoop.security.Credentials;
-import org.apache.hadoop.security.authentication.client.AuthenticatedURL;
+import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.hadoop.security.authentication.client.PseudoAuthenticator;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL;
+import java.security.PrivilegedExceptionAction;
-public class KMSClientProvider extends KeyProvider implements CryptoExtension {
+public class KMSClientProvider extends KeyProvider implements CryptoExtension,
+    KeyProviderDelegationTokenExtension.DelegationTokenExtension {
+
+  public static final String TOKEN_KIND = "kms-dt";
+  private DelegationTokenAuthenticatedURL.Token authToken;
+  private UserGroupInformation loginUgi;
+    authToken = new DelegationTokenAuthenticatedURL.Token();
+    loginUgi = UserGroupInformation.getCurrentUser();
-      sb.append(collection);
-      if (resource != null) {
-        sb.append("/").append(URLEncoder.encode(resource, UTF8));
-      }
-      if (subResource != null) {
-        sb.append("/").append(subResource);
+      if (collection != null) {
+        sb.append(collection);
+        if (resource != null) {
+          sb.append("/").append(URLEncoder.encode(resource, UTF8));
+          if (subResource != null) {
+            sb.append("/").append(subResource);
+          }
+        }
-  private HttpURLConnection createConnection(URL url, String method)
+  private HttpURLConnection createConnection(final URL url, String method)
-      AuthenticatedURL authUrl = new AuthenticatedURL(new PseudoAuthenticator(),
-          configurator);
-      conn = authUrl.openConnection(url, new AuthenticatedURL.Token());
-    } catch (AuthenticationException ex) {
+      // if current UGI is different from UGI at constructor time, behave as
+      // proxyuser
+      UserGroupInformation currentUgi = UserGroupInformation.getCurrentUser();
+      final String doAsUser =
+          (loginUgi.getShortUserName().equals(currentUgi.getShortUserName()))
+          ? null : currentUgi.getShortUserName();
+
+      // creating the HTTP connection using the current UGI at constructor time
+      conn = loginUgi.doAs(new PrivilegedExceptionAction<HttpURLConnection>() {
+        @Override
+        public HttpURLConnection run() throws Exception {
+          DelegationTokenAuthenticatedURL authUrl =
+              new DelegationTokenAuthenticatedURL(configurator);
+          return authUrl.openConnection(url, authToken, doAsUser);
+        }
+      });
+    } catch (IOException ex) {
+      throw ex;
+    } catch (Exception ex) {
-        es = conn.getErrorStream();
-        ObjectMapper mapper = new ObjectMapper();
-        Map json = mapper.readValue(es, Map.class);
-        String exClass = (String) json.get(
-            KMSRESTConstants.ERROR_EXCEPTION_JSON);
-        String exMsg = (String)
-            json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);
-        try {
-          ClassLoader cl = KMSClientProvider.class.getClassLoader();
-          Class klass = cl.loadClass(exClass);
-          Constructor constr = klass.getConstructor(String.class);
-          toThrow = (Exception) constr.newInstance(exMsg);
-        } catch (Exception ex) {
+        String contentType = conn.getHeaderField(CONTENT_TYPE);
+        if (contentType != null &&
+            contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) {
+          es = conn.getErrorStream();
+          ObjectMapper mapper = new ObjectMapper();
+          Map json = mapper.readValue(es, Map.class);
+          String exClass = (String) json.get(
+              KMSRESTConstants.ERROR_EXCEPTION_JSON);
+          String exMsg = (String)
+              json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);
+          try {
+            ClassLoader cl = KMSClientProvider.class.getClassLoader();
+            Class klass = cl.loadClass(exClass);
+            Constructor constr = klass.getConstructor(String.class);
+            toThrow = (Exception) constr.newInstance(exMsg);
+          } catch (Exception ex) {
+            toThrow = new IOException(MessageFormat.format(
+                "HTTP status [{0}], {1}", status, conn.getResponseMessage()));
+          }
+        } else {
+  @Override
+  public Token<?>[] addDelegationTokens(String renewer,
+      Credentials credentials) throws IOException {
+    Token<?>[] tokens;
+    URL url = createURL(null, null, null, null);
+    DelegationTokenAuthenticatedURL authUrl =
+        new DelegationTokenAuthenticatedURL(configurator);
+    try {
+      Token<?> token = authUrl.getDelegationToken(url, authToken, renewer);
+      if (token != null) {
+        credentials.addToken(token.getService(), token);
+        tokens = new Token<?>[] { token };
+      } else {
+        throw new IOException("Got NULL as delegation token");
+      }
+    } catch (AuthenticationException ex) {
+      throw new IOException(ex);
+    }
+    return tokens;
+  }
+

MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 UPD40 INS40 INS43 INS23 INS23 INS23 INS31 INS40 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS78 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS45 INS40 INS42 INS42 INS42 INS21 INS21 INS83 INS43 INS42 INS74 INS85 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS54 INS41 INS7 INS7 INS42 INS12 INS12 INS43 INS76 INS42 INS42 INS5 INS59 MOV43 INS59 INS43 INS59 INS8 MOV12 INS42 INS42 INS14 INS42 INS32 INS60 INS44 INS8 INS44 INS8 INS42 INS74 INS85 INS42 INS42 INS32 INS42 INS42 INS14 INS60 INS25 INS43 INS42 INS42 INS43 INS59 INS83 UPD43 INS43 INS42 INS53 INS43 INS42 INS53 INS8 INS43 INS76 INS42 INS33 INS33 INS33 INS33 INS43 INS42 INS74 INS59 INS27 INS8 INS8 INS40 UPD42 MOV21 MOV25 INS42 INS42 INS32 UPD42 UPD42 INS16 INS42 INS42 INS42 INS14 MOV60 INS60 INS25 MOV21 INS42 INS42 INS43 INS76 INS42 INS32 INS42 INS33 INS21 INS21 INS53 INS42 INS42 INS36 INS33 INS32 UPD42 INS42 INS14 INS43 INS42 INS43 INS59 INS27 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS14 INS25 INS32 INS42 INS42 INS74 INS1 INS42 INS42 INS42 INS32 INS27 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS3 INS43 INS45 INS27 INS8 INS32 INS42 INS32 INS43 INS43 INS31 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS7 INS42 INS42 INS5 INS4 INS42 INS42 INS33 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS14 INS74 INS85 INS42 INS42 INS42 INS42 INS60 INS41 INS43 INS32 INS43 INS76 INS43 INS59 INS32 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 MOV43 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL14 DEL42 DEL14 DEL40 DEL42 DEL42 DEL14