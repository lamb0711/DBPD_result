HDDS-1220. KeyManager#openKey should release the bucket lock before doing an allocateBlock. Contributed by Lokesh Jain.

-    AllocatedBlock allocatedBlock;
-    try {
-      allocatedBlock =
-          scmBlockClient.allocateBlock(scmBlockSize, keyInfo.getType(),
-              keyInfo.getFactor(), omId, excludeList);
-    } catch (SCMException ex) {
-      if (ex.getResult()
-          .equals(SCMException.ResultCodes.CHILL_MODE_EXCEPTION)) {
-        throw new OMException(ex.getMessage(), ResultCodes.SCM_IN_CHILL_MODE);
-      }
-      throw ex;
-    }
-    OmKeyLocationInfo.Builder builder = new OmKeyLocationInfo.Builder()
-        .setBlockID(new BlockID(allocatedBlock.getBlockID()))
-        .setLength(scmBlockSize)
-        .setOffset(0);
-    if (grpcBlockTokenEnabled) {
-      String remoteUser = getRemoteUser().getShortUserName();
-      builder.setToken(secretManager.generateToken(remoteUser,
-          allocatedBlock.getBlockID().toString(),
-          getAclForUser(remoteUser),
-          scmBlockSize));
-    }
-    OmKeyLocationInfo info = builder.build();
-    keyInfo.appendNewBlocks(Collections.singletonList(info));
+    List<OmKeyLocationInfo> locationInfos =
+        allocateBlock(keyInfo, excludeList, scmBlockSize);
+    keyInfo.appendNewBlocks(locationInfos);
-    return info;
+    return locationInfos.get(0);
+  }
+
+  private List<OmKeyLocationInfo> allocateBlock(OmKeyInfo keyInfo,
+      ExcludeList excludeList, long requestedSize) throws IOException {
+    int numBlocks = (int) ((requestedSize - 1) / scmBlockSize + 1);
+    List<OmKeyLocationInfo> locationInfos = new ArrayList<>(numBlocks);
+    while (requestedSize > 0) {
+      long allocateSize = Math.min(requestedSize, scmBlockSize);
+      AllocatedBlock allocatedBlock;
+      try {
+        allocatedBlock = scmBlockClient
+            .allocateBlock(allocateSize, keyInfo.getType(), keyInfo.getFactor(),
+                omId, excludeList);
+      } catch (SCMException ex) {
+        if (ex.getResult()
+            .equals(SCMException.ResultCodes.CHILL_MODE_EXCEPTION)) {
+          throw new OMException(ex.getMessage(), ResultCodes.SCM_IN_CHILL_MODE);
+        }
+        throw ex;
+      }
+      OmKeyLocationInfo.Builder builder = new OmKeyLocationInfo.Builder()
+          .setBlockID(new BlockID(allocatedBlock.getBlockID()))
+          .setLength(scmBlockSize)
+          .setOffset(0);
+      if (grpcBlockTokenEnabled) {
+        String remoteUser = getRemoteUser().getShortUserName();
+        builder.setToken(secretManager
+            .generateToken(remoteUser, allocatedBlock.getBlockID().toString(),
+                getAclForUser(remoteUser), scmBlockSize));
+      }
+      locationInfos.add(builder.build());
+      requestedSize -= allocateSize;
+    }
+    return locationInfos;
+    long requestedSize = Math.min(preallocateMax, args.getDataSize());
+    OmKeyInfo keyInfo;
+    String openKey;
+    long openVersion;
-      long requestedSize = Math.min(preallocateMax, args.getDataSize());
-      // requested size is not required but more like a optimization:
-      // SCM looks at the requested, if it 0, no block will be allocated at
-      // the point, if client needs more blocks, client can always call
-      // allocateBlock. But if requested size is not 0, OM will preallocate
-      // some blocks and piggyback to client, to save RPC calls.
-      while (requestedSize > 0) {
-        long allocateSize = Math.min(scmBlockSize, requestedSize);
-        AllocatedBlock allocatedBlock;
-        try {
-          allocatedBlock = scmBlockClient
-              .allocateBlock(allocateSize, type, factor, omId,
-                  new ExcludeList());
-        } catch (IOException ex) {
-          if (ex instanceof SCMException) {
-            if (((SCMException) ex).getResult()
-                .equals(SCMException.ResultCodes.CHILL_MODE_EXCEPTION)) {
-              throw new OMException(ex.getMessage(),
-                  ResultCodes.SCM_IN_CHILL_MODE);
-            }
-          }
-          throw ex;
-        }
-        OmKeyLocationInfo.Builder builder = new OmKeyLocationInfo.Builder()
-            .setBlockID(new BlockID(allocatedBlock.getBlockID()))
-            .setLength(allocateSize)
-            .setOffset(0);
-        if (grpcBlockTokenEnabled) {
-          String remoteUser = getRemoteUser().getShortUserName();
-          builder.setToken(secretManager.generateToken(remoteUser,
-              allocatedBlock.getBlockID().toString(),
-              getAclForUser(remoteUser),
-              scmBlockSize));
-        }
-
-        OmKeyLocationInfo subKeyInfo = builder.build();
-        locations.add(subKeyInfo);
-        requestedSize -= allocateSize;
-      }
-      OmKeyInfo keyInfo;
-      long openVersion;
-      String openKey = metadataManager.getOpenKey(
+      openKey = metadataManager.getOpenKey(
-      metadataManager.getOpenKeyTable().put(openKey, keyInfo);
-      return new OpenKeySession(currentTime, keyInfo, openVersion);
+
+    // requested size is not required but more like a optimization:
+    // SCM looks at the requested, if it 0, no block will be allocated at
+    // the point, if client needs more blocks, client can always call
+    // allocateBlock. But if requested size is not 0, OM will preallocate
+    // some blocks and piggyback to client, to save RPC calls.
+    if (requestedSize > 0) {
+      List<OmKeyLocationInfo> locationInfos =
+          allocateBlock(keyInfo, new ExcludeList(), requestedSize);
+      keyInfo.appendNewBlocks(locationInfos);
+    }
+    metadataManager.getOpenKeyTable().put(openKey, keyInfo);
+    return new OpenKeySession(currentTime, keyInfo, openVersion);

INS31 INS8 INS83 INS74 INS42 INS44 INS44 INS44 MOV43 INS8 MOV21 MOV60 MOV60 MOV60 MOV21 MOV60 MOV60 MOV25 INS60 INS21 MOV21 MOV21 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS60 INS61 INS41 MOV60 MOV60 INS60 MOV60 INS25 MOV21 MOV41 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS39 INS59 INS74 INS59 INS27 MOV8 MOV60 INS42 MOV43 INS59 MOV27 INS8 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS11 INS43 MOV43 INS42 INS14 INS42 INS34 MOV21 INS42 MOV21 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS36 INS42 INS74 INS42 INS39 INS74 INS59 INS32 INS27 INS43 UPD42 INS32 UPD42 UPD42 MOV32 INS42 MOV32 INS43 MOV43 INS42 INS32 INS42 INS42 INS42 INS27 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS36 INS42 INS27 UPD42 INS42 INS34 DEL42 DEL42 DEL42 DEL32 DEL42 DEL41 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL8 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL40 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60