HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.

-      LOG.info("Generated new storageID " + sd.getStorageUuid() +
-          " for directory " + sd.getRoot() +
+      LOG.info("Generated new storageID {} for directory {} {}", sd
+              .getStorageUuid(), sd.getRoot(),
-      LOG.info("Enabled trash for bpid " + bpid);
+      LOG.info("Enabled trash for bpid {}",  bpid);
-      LOG.info("Cleared trash for bpid " + bpid);
+      LOG.info("Cleared trash for bpid {}", bpid);
-        LOG.info("Storage directory with location " + location
-            + " does not exist");
+        LOG.info("Storage directory with location {} does not exist", location);
-        LOG.info("Storage directory with location " + location
-            + " is not formatted for namespace " + nsInfo.getNamespaceID()
-            + ". Formatting...");
+        LOG.info("Storage directory with location {} is not formatted for "
+            + "namespace {}. Formatting...", location, nsInfo.getNamespaceID());
-      final String errorMessage = "Storage directory is in use";
-      LOG.warn(errorMessage + ".");
+      final String errorMessage = "Storage directory is in use.";
+      LOG.warn(errorMessage);
-    LOG.info("Using " + min + " threads to upgrade data directories ("
-        + key + "=" + n + ", dataDirs=" + dataDirs + ")");
+    LOG.info("Using {} threads to upgrade data directories ({}={}, "
+        + "dataDirs={})", min, key, n, dataDirs);
-          LOG.warn("Failed to add storage directory " + dataDir, e);
+          LOG.warn("Failed to add storage directory {}", dataDir, e);
-        LOG.info("Storage directory " + dataDir + " has already been used.");
+        LOG.info("Storage directory {} has already been used.", dataDir);
-      LOG.info("loadDataStorage: " + tasks.size() + " upgrade tasks");
+      LOG.info("loadDataStorage: {} upgrade tasks", tasks.size());
-          LOG.warn("Failed to upgrade storage directory " + t.dataDir, e);
+          LOG.warn("Failed to upgrade storage directory {}", t.dataDir, e);
-        LOG.warn("Failed to add storage directory " + dataDir
-            + " for block pool " + bpid, e);
+        LOG.warn("Failed to add storage directory {} for block pool {}",
+            dataDir, bpid, e);
-      LOG.info("loadBlockPoolSliceStorage: " + tasks.size() + " upgrade tasks");
+      LOG.info("loadBlockPoolSliceStorage: {} upgrade tasks", tasks.size());
-          LOG.warn("Failed to upgrade storage directory " + t.dataDir
-              + " for block pool " + bpid, e);
+          LOG.warn("Failed to upgrade storage directory {} for block pool {}",
+              t.dataDir, bpid, e);
-   * @param dirsToRemove a set of storage directories to be removed.
+   * @param storageLocations a set of storage directories to be removed.
-          LOG.warn(String.format(
-            "I/O error attempting to unlock storage directory %s.",
-            sd.getRoot()), e);
+          LOG.warn("I/O error attempting to unlock storage directory {}.",
+              sd.getRoot(), e);
-        LOG.error("Unable to acquire file lock on path " + oldF.toString());
+        LOG.error("Unable to acquire file lock on path {}", oldF);
-    LOG.info("Upgrading storage directory " + sd.getRoot()
-             + ".\n   old LV = " + oldLV
-             + "; old CTime = " + this.getCTime()
-             + ".\n   new LV = " + HdfsServerConstants.DATANODE_LAYOUT_VERSION
-             + "; new CTime = " + nsInfo.getCTime());
+    LOG.info("Upgrading storage directory {}.\n old LV = {}; old CTime = {}"
+            + ".\n new LV = {}; new CTime = {}", sd.getRoot(), oldLV,
+        this.getCTime(), HdfsServerConstants.DATANODE_LAYOUT_VERSION,
+        nsInfo.getCTime());
-    LOG.info("Upgrade of " + sd.getRoot()+ " is complete");
+    LOG.info("Upgrade of {} is complete", sd.getRoot());
-    LOG.info("Updating layout version from " + layoutVersion
-        + " to " + HdfsServerConstants.DATANODE_LAYOUT_VERSION
-        + " for storage " + sd.getRoot());
+    LOG.info("Updating layout version from {} to {} for storage {}",
+        layoutVersion, HdfsServerConstants.DATANODE_LAYOUT_VERSION,
+        sd.getRoot());
-        LOG.info("Layout version rolled back to "
-            + HdfsServerConstants.DATANODE_LAYOUT_VERSION + " for storage "
-            + sd.getRoot());
+        LOG.info("Layout version rolled back to {} for storage {}",
+            HdfsServerConstants.DATANODE_LAYOUT_VERSION, sd.getRoot());
-    LOG.info("Rolling back storage directory " + sd.getRoot()
-        + ".\n   target LV = " + HdfsServerConstants.DATANODE_LAYOUT_VERSION
-        + "; target CTime = " + nsInfo.getCTime());
+    LOG.info("Rolling back storage directory {}.\n   target LV = {}; target "
+            + "CTime = {}", sd.getRoot(),
+        HdfsServerConstants.DATANODE_LAYOUT_VERSION, nsInfo.getCTime());
-    LOG.info("Rollback of " + sd.getRoot() + " is complete");
+    LOG.info("Rollback of {} is complete", sd.getRoot());
-    LOG.info("Finalizing upgrade for storage directory " 
-             + dataDirPath 
-             + ".\n   cur LV = " + this.getLayoutVersion()
-             + "; cur CTime = " + this.getCTime());
+    LOG.info("Finalizing upgrade for storage directory {}.\n   cur LV = {}; "
+        + "cur CTime = {}", dataDirPath, this.getLayoutVersion(), this
+        .getCTime());
-    LOG.info("Linked blocks from " + fromDir + " to " + toDir + ". "
-        + hardLink.linkStats.report());
+    LOG.info("Linked blocks from {} to {}. {}", fromDir, toDir, hardLink
+        .linkStats.report());
-    LOG.info("Start linking block files from " + from + " to " + to);
+    LOG.info("Start linking block files from {} to {}", from, to);
-      LOG.error("There are " + duplicates.size() + " duplicate block " +
-          "entries within the same volume.");
+      LOG.error("There are {} duplicate block " +
+          "entries within the same volume.", duplicates.size());
-          LOG.warn("Unexpectedly low genstamp on " +
-                   duplicate.src.getAbsolutePath() + ".");
+          LOG.warn("Unexpectedly low genstamp on {}.",
+              duplicate.src.getAbsolutePath());
-        LOG.warn("Unexpectedly short length on " +
-            duplicate.src.getAbsolutePath() + ".");
+        LOG.warn("Unexpectedly short length on {}.",
+            duplicate.src.getAbsolutePath());
-        LOG.warn("Unexpectedly short length on " +
-            prevLongest.src.getAbsolutePath() + ".");
+        LOG.warn("Unexpectedly short length on {}.",
+            prevLongest.src.getAbsolutePath());
-        LOG.warn("Discarding " + args.src.getAbsolutePath() + ".");
+        LOG.warn("Discarding {}.", args.src.getAbsolutePath());

UPD42 INS27 INS42 INS42 INS42 INS42 INS27 MOV32 INS42 MOV32 INS40 MOV32 INS45 MOV32 INS45 INS42 INS40 MOV32 MOV32 INS40 MOV32 INS45 MOV32 INS42 MOV32 MOV32 INS45 INS42 INS42 MOV32 INS45 INS42 INS42 UPD45 MOV45 INS45 UPD45 MOV45 UPD45 MOV45 UPD45 UPD45 UPD45 UPD45 INS45 MOV32 MOV32 MOV36 INS45 INS42 INS45 INS42 UPD45 INS42 INS45 MOV32 INS45 MOV32 MOV32 INS45 INS42 INS42 MOV32 UPD45 UPD45 UPD45 INS45 INS42 INS45 MOV42 INS45 INS40 MOV32 INS45 MOV32 INS45 MOV32 INS45 MOV32 INS45 INS42 INS42 MOV32 INS45 MOV32 INS45 INS42 INS45 INS40 INS45 INS40 INS42 UPD42 UPD42 UPD45 INS42 DEL45 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL45 DEL27 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL45 DEL27 DEL45 DEL45 DEL27 DEL45 DEL40 DEL27 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL45 DEL27 DEL45 DEL40 DEL45 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL27 DEL42 DEL45 DEL45 DEL40 DEL45 DEL27 DEL45 DEL45 DEL27 DEL45 DEL42 DEL45 DEL40 DEL45 DEL27 DEL45 DEL40 DEL45 DEL27 DEL45 DEL40 DEL45 DEL45 DEL27 DEL42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27