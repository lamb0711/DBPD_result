YARN-9970. Refactor TestUserGroupMappingPlacementRule#verifyQueueMapping. Contributed by Manikandan R

-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.hadoop.yarn.server.resourcemanager.placement.UserGroupMappingPlacementRule.QueueMapping.MappingType;
-
-import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.yarn.server.resourcemanager.placement.QueueMapping.MappingType;
+import org.apache.hadoop.yarn.server.resourcemanager.placement.QueueMapping.QueueMappingBuilder;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.annotations.VisibleForTesting;
-  @Private
-  public static class QueueMapping {
-
-    public enum MappingType {
-
-      USER("u"), GROUP("g");
-      private final String type;
-
-      private MappingType(String type) {
-        this.type = type;
-      }
-
-      public String toString() {
-        return type;
-      }
-
-    };
-
-    MappingType type;
-    String source;
-    String queue;
-    String parentQueue;
-
-    public final static String DELIMITER = ":";
-
-    public QueueMapping(MappingType type, String source, String queue) {
-      this.type = type;
-      this.source = source;
-      this.queue = queue;
-      this.parentQueue = null;
-    }
-
-    public QueueMapping(MappingType type, String source,
-        String queue, String parentQueue) {
-      this.type = type;
-      this.source = source;
-      this.queue = queue;
-      this.parentQueue = parentQueue;
-    }
-
-    public String getQueue() {
-      return queue;
-    }
-
-    public String getParentQueue() {
-      return parentQueue;
-    }
-
-    public boolean hasParentQueue() {
-      return parentQueue != null;
-    }
-
-    public MappingType getType() {
-      return type;
-    }
-
-    public String getSource() {
-      return source;
-    }
-
-    @Override
-    public int hashCode() {
-      return super.hashCode();
-    }
-    
-    @Override
-    public boolean equals(Object obj) {
-      if (obj instanceof QueueMapping) {
-        QueueMapping other = (QueueMapping) obj;
-        return (other.type.equals(type) && 
-            other.source.equals(source) && 
-            other.queue.equals(queue));
-      } else {
-        return false;
-      }
-    }
-
-    public String toString() {
-      return type.toString() + DELIMITER + source + DELIMITER +
-        (parentQueue != null ?
-        parentQueue + "." + queue :
-        queue);
-    }
-  }
-
-      if (mapping.type == MappingType.USER) {
-        if (mapping.source.equals(CURRENT_USER_MAPPING)) {
+      if (mapping.getType() == MappingType.USER) {
+        if (mapping.getSource().equals(CURRENT_USER_MAPPING)) {
-              QueueMapping queueMapping = new QueueMapping(mapping.getType(),
-                  mapping.getSource(), user, groups.getGroups(user).get(0));
+              QueueMapping queueMapping = 
+                                QueueMappingBuilder.create()
+                                    .type(mapping.getType())
+                                    .source(mapping.getSource()).queue(user)
+                                    .parentQueue(groups.getGroups(user).get(0))
+                                    .build();
-              QueueMapping queueMapping = new QueueMapping(mapping.getType(),
-                  mapping.getSource(), user, secondaryGroup);
+              QueueMapping queueMapping = 
+                                QueueMappingBuilder.create()
+                                    .type(mapping.getType())
+                                    .source(mapping.getSource())
+                                    .queue(user)
+                                    .parentQueue(secondaryGroup)
+                                    .build();
-          } else if (mapping.queue.equals(CURRENT_USER_MAPPING)) {
+          } else if (mapping.getQueue().equals(CURRENT_USER_MAPPING)) {
-          } else if (mapping.queue.equals(PRIMARY_GROUP_MAPPING)) {
+          } else if (mapping.getQueue().equals(PRIMARY_GROUP_MAPPING)) {
-          } else if (mapping.queue.equals(SECONDARY_GROUP_MAPPING)) {
+          } else if (mapping.getQueue().equals(SECONDARY_GROUP_MAPPING)) {
-        if (user.equals(mapping.source)) {
-          if (mapping.queue.equals(PRIMARY_GROUP_MAPPING)) {
+        if (user.equals(mapping.getSource())) {
+          if (mapping.getQueue().equals(PRIMARY_GROUP_MAPPING)) {
-          } else if (mapping.queue.equals(SECONDARY_GROUP_MAPPING)) {
+          } else if (mapping.getQueue().equals(SECONDARY_GROUP_MAPPING)) {
-      if (mapping.type == MappingType.GROUP) {
+      if (mapping.getType() == MappingType.GROUP) {
-          if (userGroups.equals(mapping.source)) {
-            if (mapping.queue.equals(CURRENT_USER_MAPPING)) {
+          if (userGroups.equals(mapping.getSource())) {
+            if (mapping.getQueue().equals(CURRENT_USER_MAPPING)) {
-    if (!StringUtils.isEmpty(mapping.parentQueue)) {
+    if (!StringUtils.isEmpty(mapping.getParentQueue())) {
-      return new QueueMapping(mapping.getType(), mapping.getSource(),
-          queuePath.getLeafQueue(), queuePath.getParentQueue());
+      return QueueMappingBuilder.create()
+          .type(mapping.getType())
+          .source(mapping.getSource())
+          .queue(queuePath.getLeafQueue())
+          .parentQueue(queuePath.getParentQueue())
+          .build();
-      return new QueueMapping(mapping.getType(), mapping.getSource(),
-          queuePath.getLeafQueue(), queuePath.getParentQueue());
+      return QueueMappingBuilder.create()
+          .type(mapping.getType())
+          .source(mapping.getSource())
+          .queue(queuePath.getLeafQueue())
+          .parentQueue(queuePath.getParentQueue())
+          .build();

MOV26 MOV26 MOV26 MOV26 INS26 UPD40 INS40 MOV8 INS70 MOV41 MOV25 MOV44 INS42 MOV8 MOV33 MOV27 INS8 INS25 INS25 MOV41 MOV32 MOV8 INS27 INS8 INS27 INS8 INS32 INS32 MOV41 INS32 INS40 INS25 MOV25 MOV32 INS40 INS70 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS8 INS8 MOV44 MOV32 INS8 INS32 INS42 MOV32 INS32 INS42 INS32 INS42 INS42 INS25 INS42 MOV32 MOV25 INS25 INS32 INS42 MOV32 INS32 INS42 MOV32 INS42 INS42 MOV27 MOV8 MOV25 MOV8 INS32 INS8 INS32 INS42 MOV32 INS32 INS42 MOV32 INS25 INS32 INS42 INS42 MOV32 INS25 MOV41 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 MOV8 INS25 INS42 INS42 INS32 INS32 MOV8 INS42 INS42 INS32 INS42 MOV32 INS32 INS42 INS42 INS32 MOV8 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV43 INS59 INS42 INS42 INS32 INS42 INS42 INS32 MOV8 MOV8 INS42 INS42 INS42 INS32 MOV43 INS59 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV32 INS32 INS42 INS41 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 DEL42 DEL78 DEL83 DEL83 DEL42 DEL83 DEL42 DEL42 DEL45 DEL72 DEL42 DEL45 DEL72 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL71 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL48 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL11 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL27 DEL36 DEL41 DEL8 DEL9 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL45 DEL42 DEL27 DEL42 DEL16 DEL36 DEL27 DEL41 DEL8 DEL31 DEL55 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL40 DEL42 DEL40 DEL40 DEL40 DEL42 DEL42 DEL32 DEL25 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL25 DEL25 DEL8 DEL25 DEL42 DEL40 DEL40 DEL27 DEL25 DEL40 DEL40 DEL27 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL32 DEL25 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8 DEL70 DEL8 DEL40 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL8 DEL25