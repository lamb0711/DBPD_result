Merge branch 'trunk' into HDDS-1535
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.utils.db.cache.CacheKey;
+import org.apache.hadoop.utils.db.cache.CacheValue;
+import org.apache.hadoop.utils.db.cache.PartialTableCache;
+import org.apache.hadoop.utils.db.cache.TableCache;
+
-  private Table<byte[], byte[]> rawTable;
+  private final Table<byte[], byte[]> rawTable;
-  private CodecRegistry codecRegistry;
+  private final CodecRegistry codecRegistry;
-  private Class<KEY> keyType;
+  private final Class<KEY> keyType;
-  private Class<VALUE> valueType;
+  private final Class<VALUE> valueType;
+
+  private final TableCache<CacheKey<KEY>, CacheValue<VALUE>> cache;
+
+    cache = new PartialTableCache<>();
+  /**
+   * Returns the value mapped to the given key in byte array or returns null
+   * if the key is not found.
+   *
+   * Caller's of this method should use synchronization mechanism, when
+   * accessing. First it will check from cache, if it has entry return the
+   * value, otherwise get from the RocksDB table.
+   *
+   * @param key metadata key
+   * @return VALUE
+   * @throws IOException
+   */
+    // Here the metadata lock will guarantee that cache is not updated for same
+    // key during get key.
+    CacheValue< VALUE > cacheValue = cache.get(new CacheKey<>(key));
+    if (cacheValue == null) {
+      // If no cache for the table or if it does not exist in cache get from
+      // RocksDB table.
+      return getFromTable(key);
+    } else {
+      // We have a value in cache, return the value.
+      return cacheValue.getValue();
+    }
+  }
+
+  private VALUE getFromTable(KEY key) throws IOException {
+  @Override
+  public void addCacheEntry(CacheKey<KEY> cacheKey,
+      CacheValue<VALUE> cacheValue) {
+    // This will override the entry if there is already entry for this key.
+    cache.put(cacheKey, cacheValue);
+  }
+
+
+  @Override
+  public void cleanupCache(long epoch) {
+    cache.cleanup(epoch);
+  }
+
+  @VisibleForTesting
+  TableCache<CacheKey<KEY>, CacheValue<VALUE>> getCache() {
+    return cache;
+  }
+
+  public Table<byte[], byte[]> getRawTable() {
+    return rawTable;
+  }
+
+  public CodecRegistry getCodecRegistry() {
+    return codecRegistry;
+  }
+
+  public Class<KEY> getKeyType() {
+    return keyType;
+  }
+
+  public Class<VALUE> getValueType() {
+    return valueType;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS83 INS83 INS83 INS74 INS59 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 UPD83 UPD42 MOV78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS74 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS74 INS42 INS8 INS43 INS74 INS74 INS42 INS21 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS42 INS60 INS25 INS74 INS42 INS74 INS42 INS21 INS42 INS39 INS42 INS21 INS42 INS43 INS74 INS74 INS41 INS43 INS5 INS5 INS41 INS42 INS41 INS43 INS43 INS41 INS43 INS43 INS41 INS42 INS43 INS43 INS43 INS43 INS7 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS74 INS59 INS27 INS8 INS8 INS43 INS43 INS43 INS43 INS32 INS32 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS33 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS14 INS32 INS32 INS43 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42