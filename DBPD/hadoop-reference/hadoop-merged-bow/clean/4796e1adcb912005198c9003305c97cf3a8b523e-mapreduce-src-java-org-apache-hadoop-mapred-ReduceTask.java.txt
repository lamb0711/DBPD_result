MAPREDUCE-2365. Add counters to track bytes (read,written) via File(Input,Output)Format. Contributed by Siddharth Seth. 


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1146515 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.FileSystem.Statistics;
+import org.apache.hadoop.mapreduce.lib.output.FileOutputFormatCounter;
+  private Counters.Counter fileOutputByteCounter =
+    getCounters().findCounter(FileOutputFormatCounter.BYTES_WRITTEN);
-    FileSystem fs = FileSystem.get(job);
+    final RecordWriter<OUTKEY, OUTVALUE> out = new OldTrackingRecordWriter<OUTKEY, OUTVALUE>(
+        this, job, reporter, finalName);
-    final RecordWriter<OUTKEY,OUTVALUE> out = 
-      job.getOutputFormat().getRecordWriter(fs, job, finalName, reporter);  
-    
-          reduceOutputCounter.increment(1);
+  static class OldTrackingRecordWriter<K, V> implements RecordWriter<K, V> {
+
+    private final RecordWriter<K, V> real;
+    private final org.apache.hadoop.mapred.Counters.Counter reduceOutputCounter;
+    private final org.apache.hadoop.mapred.Counters.Counter fileOutputByteCounter;
+    private final Statistics fsStats;
+
+    @SuppressWarnings({ "deprecation", "unchecked" })
+    public OldTrackingRecordWriter(ReduceTask reduce, JobConf job,
+        TaskReporter reporter, String finalName) throws IOException {
+      this.reduceOutputCounter = reduce.reduceOutputCounter;
+      this.fileOutputByteCounter = reduce.fileOutputByteCounter;
+      Statistics matchedStats = null;
+      if (job.getOutputFormat() instanceof FileOutputFormat) {
+        matchedStats = getFsStatistics(FileOutputFormat.getOutputPath(job), job);
+      }
+      fsStats = matchedStats;
+
+      FileSystem fs = FileSystem.get(job);
+      long bytesOutPrev = getOutputBytes(fsStats);
+      this.real = job.getOutputFormat().getRecordWriter(fs, job, finalName,
+          reporter);
+      long bytesOutCurr = getOutputBytes(fsStats);
+      fileOutputByteCounter.increment(bytesOutCurr - bytesOutPrev);
+    }
+
+    @Override
+    public void write(K key, V value) throws IOException {
+      long bytesOutPrev = getOutputBytes(fsStats);
+      real.write(key, value);
+      long bytesOutCurr = getOutputBytes(fsStats);
+      fileOutputByteCounter.increment(bytesOutCurr - bytesOutPrev);
+      reduceOutputCounter.increment(1);
+    }
+
+    @Override
+    public void close(Reporter reporter) throws IOException {
+      long bytesOutPrev = getOutputBytes(fsStats);
+      real.close(reporter);
+      long bytesOutCurr = getOutputBytes(fsStats);
+      fileOutputByteCounter.increment(bytesOutCurr - bytesOutPrev);
+    }
+
+    private long getOutputBytes(Statistics stats) {
+      return stats == null ? 0 : stats.getBytesWritten();
+    }
+  }
+
-  
-    NewTrackingRecordWriter(org.apache.hadoop.mapreduce.RecordWriter<K,V> real,
-                            org.apache.hadoop.mapreduce.Counter recordCounter) {
-      this.real = real;
-      this.outputRecordCounter = recordCounter;
+    private final org.apache.hadoop.mapreduce.Counter fileOutputByteCounter;
+    private final Statistics fsStats;
+
+    @SuppressWarnings("unchecked")
+    NewTrackingRecordWriter(ReduceTask reduce,
+        org.apache.hadoop.mapreduce.TaskAttemptContext taskContext)
+        throws InterruptedException, IOException {
+      this.outputRecordCounter = reduce.reduceOutputCounter;
+      this.fileOutputByteCounter = reduce.fileOutputByteCounter;
+
+      Statistics matchedStats = null;
+      if (reduce.outputFormat instanceof org.apache.hadoop.mapreduce.lib.output.FileOutputFormat) {
+        matchedStats = getFsStatistics(org.apache.hadoop.mapreduce.lib.output.FileOutputFormat
+            .getOutputPath(taskContext), taskContext.getConfiguration());
+      }
+
+      fsStats = matchedStats;
+
+      long bytesOutPrev = getOutputBytes(fsStats);
+      this.real = (org.apache.hadoop.mapreduce.RecordWriter<K, V>) reduce.outputFormat
+          .getRecordWriter(taskContext);
+      long bytesOutCurr = getOutputBytes(fsStats);
+      fileOutputByteCounter.increment(bytesOutCurr - bytesOutPrev);
+      long bytesOutPrev = getOutputBytes(fsStats);
+      long bytesOutCurr = getOutputBytes(fsStats);
+      fileOutputByteCounter.increment(bytesOutCurr - bytesOutPrev);
+      long bytesOutPrev = getOutputBytes(fsStats);
+      long bytesOutCurr = getOutputBytes(fsStats);
+      fileOutputByteCounter.increment(bytesOutCurr - bytesOutPrev);
+
+    private long getOutputBytes(Statistics stats) {
+      return stats == null ? 0 : stats.getBytesWritten();
+    }
-    org.apache.hadoop.mapreduce.RecordWriter<OUTKEY,OUTVALUE> output =
-      (org.apache.hadoop.mapreduce.RecordWriter<OUTKEY,OUTVALUE>)
-        outputFormat.getRecordWriter(taskContext);
-      new NewTrackingRecordWriter<OUTKEY, OUTVALUE>(output, reduceOutputCounter);
+      new NewTrackingRecordWriter<OUTKEY, OUTVALUE>(this, taskContext);
-    output.close(reducerContext);
+    trackedRW.close(reducerContext);

INS26 INS26 INS40 INS40 INS83 INS42 INS23 INS55 INS83 INS43 INS59 INS83 INS42 INS73 INS73 INS74 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS23 INS23 INS31 INS40 INS42 INS32 INS42 INS42 INS43 INS43 INS43 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS79 INS83 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS83 MOV43 INS59 INS83 INS83 INS43 INS59 INS79 INS43 INS43 MOV21 INS83 INS39 INS42 INS44 INS8 INS32 INS42 INS40 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS4 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS60 INS25 INS21 MOV60 INS60 INS21 INS60 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS21 MOV21 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS21 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS45 INS43 UPD42 INS43 UPD42 INS42 INS42 INS21 INS60 INS25 INS21 INS60 INS60 INS21 INS60 INS60 INS21 INS60 INS60 INS21 INS43 INS42 INS41 INS42 INS14 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS7 INS7 INS43 INS59 INS62 INS8 INS7 INS39 INS59 INS7 INS39 INS59 INS32 INS42 INS42 INS39 INS59 INS32 INS39 INS59 INS32 INS42 INS39 INS59 INS32 INS39 INS59 INS32 INS42 INS16 INS42 INS40 INS7 INS43 INS59 INS62 INS8 INS7 INS39 INS59 INS39 INS59 INS32 INS39 INS59 INS39 INS59 INS32 INS39 INS59 INS39 INS59 INS32 INS42 INS16 UPD42 INS74 INS52 INS42 INS42 INS42 INS22 INS40 INS22 INS40 INS42 INS42 INS33 INS32 INS43 INS21 INS42 INS42 INS42 INS32 MOV22 MOV32 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS34 INS32 INS40 INS22 INS40 INS42 INS42 INS33 INS40 INS43 INS21 INS42 INS42 INS42 INS32 INS22 INS11 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS27 INS34 INS32 INS52 UPD42 INS43 INS43 INS43 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS52 INS42 INS40 INS7 INS42 INS42 INS52 INS42 MOV74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL42 DEL42 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42