merge from trunk r1598430

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598435 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.io.FileInputStream;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+  // Used for finding the configured static mapping file.
+  static final String NFS_STATIC_MAPPING_FILE_KEY = "dfs.nfs.static.mapping.file";
+  private static final String NFS_STATIC_MAPPING_FILE_DEFAULT = "/etc/nfs.map";
+  private final File staticMappingFile;
+
+  // Used for parsing the static mapping file.
+  private static final Pattern EMPTY_LINE = Pattern.compile("^\\s*$");
+  private static final Pattern COMMENT_LINE = Pattern.compile("^\\s*#.*$");
+  private static final Pattern MAPPING_LINE =
+      Pattern.compile("^(uid|gid)\\s+(\\d+)\\s+(\\d+)\\s*(#.*)?$");
+
+    staticMappingFile = new File(NFS_STATIC_MAPPING_FILE_DEFAULT);
+    
+    String staticFilePath = conf.get(NFS_STATIC_MAPPING_FILE_KEY,
+        NFS_STATIC_MAPPING_FILE_DEFAULT);
+    staticMappingFile = new File(staticFilePath);
+    
-      String command, String regex) throws IOException  {
+      String command, String regex, Map<Integer, Integer> staticMapping)
+      throws IOException  {
-        final Integer key = parseId(nameId[1]);        
+        final Integer key = staticMapping.get(parseId(nameId[1]));
-      LOG.info("Updated " + mapName + " map size:" + map.size());
+      LOG.info("Updated " + mapName + " map size: " + map.size());
+    
+    StaticMapping staticMapping = new StaticMapping(
+        new HashMap<Integer, Integer>(), new HashMap<Integer, Integer>());
+    if (staticMappingFile.exists()) {
+      LOG.info("Using '" + staticMappingFile + "' for static UID/GID mapping...");
+      staticMapping = parseStaticMap(staticMappingFile);
+    } else {
+      LOG.info("Not doing static UID/GID mapping because '" + staticMappingFile
+          + "' does not exist.");
+    }
-      updateMapInternal(uMap, "user", LINUX_GET_ALL_USERS_CMD, ":");
-      updateMapInternal(gMap, "group", LINUX_GET_ALL_GROUPS_CMD, ":");
+      updateMapInternal(uMap, "user", LINUX_GET_ALL_USERS_CMD, ":",
+          staticMapping.uidMapping);
+      updateMapInternal(gMap, "group", LINUX_GET_ALL_GROUPS_CMD, ":",
+          staticMapping.gidMapping);
-      updateMapInternal(uMap, "user", MAC_GET_ALL_USERS_CMD, "\\s+");
-      updateMapInternal(gMap, "group", MAC_GET_ALL_GROUPS_CMD, "\\s+");
+      updateMapInternal(uMap, "user", MAC_GET_ALL_USERS_CMD, "\\s+",
+          staticMapping.uidMapping);
+      updateMapInternal(gMap, "group", MAC_GET_ALL_GROUPS_CMD, "\\s+",
+          staticMapping.gidMapping);
+  
+  @SuppressWarnings("serial")
+  static final class PassThroughMap<K> extends HashMap<K, K> {
+    
+    public PassThroughMap() {
+      this(new HashMap<K, K>());
+    }
+    
+    public PassThroughMap(Map<K, K> mapping) {
+      super();
+      for (Map.Entry<K, K> entry : mapping.entrySet()) {
+        super.put(entry.getKey(), entry.getValue());
+      }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public K get(Object key) {
+      if (super.containsKey(key)) {
+        return super.get(key);
+      } else {
+        return (K) key;
+      }
+    }
+  }
+  
+  @VisibleForTesting
+  static final class StaticMapping {
+    final Map<Integer, Integer> uidMapping;
+    final Map<Integer, Integer> gidMapping;
+    
+    public StaticMapping(Map<Integer, Integer> uidMapping,
+        Map<Integer, Integer> gidMapping) {
+      this.uidMapping = new PassThroughMap<Integer>(uidMapping);
+      this.gidMapping = new PassThroughMap<Integer>(gidMapping);
+    }
+  }
+  
+  static StaticMapping parseStaticMap(File staticMapFile)
+      throws IOException {
+    
+    Map<Integer, Integer> uidMapping = new HashMap<Integer, Integer>();
+    Map<Integer, Integer> gidMapping = new HashMap<Integer, Integer>();
+    
+    BufferedReader in = new BufferedReader(new InputStreamReader(
+        new FileInputStream(staticMapFile)));
+    
+    try {
+      String line = null;
+      while ((line = in.readLine()) != null) {
+        // Skip entirely empty and comment lines.
+        if (EMPTY_LINE.matcher(line).matches() ||
+            COMMENT_LINE.matcher(line).matches()) {
+          continue;
+        }
+        
+        Matcher lineMatcher = MAPPING_LINE.matcher(line);
+        if (!lineMatcher.matches()) {
+          LOG.warn("Could not parse line '" + line + "'. Lines should be of " +
+              "the form '[uid|gid] [remote id] [local id]'. Blank lines and " +
+              "everything following a '#' on a line will be ignored.");
+          continue;
+        }
+        
+        // We know the line is fine to parse without error checking like this
+        // since it matched the regex above.
+        String firstComponent = lineMatcher.group(1);
+        int remoteId = Integer.parseInt(lineMatcher.group(2));
+        int localId = Integer.parseInt(lineMatcher.group(3));
+        if (firstComponent.equals("uid")) {
+          uidMapping.put(localId, remoteId);
+        } else {
+          gidMapping.put(localId, remoteId);
+        }
+      }
+    } finally {
+      in.close();
+    }
+    
+    return new StaticMapping(uidMapping, gidMapping);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS55 INS55 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS44 INS79 INS83 INS83 INS42 INS73 INS74 INS31 INS31 INS31 INS78 INS83 INS83 INS42 INS23 INS23 INS31 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS60 INS21 INS74 INS42 INS60 INS25 INS42 INS45 INS42 INS43 INS43 INS43 INS83 INS42 INS8 INS83 INS42 INS44 INS8 INS79 INS78 INS83 INS43 INS42 INS44 INS8 INS42 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS54 INS41 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS43 INS59 INS7 INS43 INS43 INS43 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS17 INS74 INS42 INS46 INS70 INS42 INS45 INS42 INS42 INS43 INS42 INS25 INS43 INS43 INS43 INS42 INS43 INS43 INS43 INS42 INS74 INS42 INS74 INS42 INS21 INS21 INS42 INS74 INS59 INS74 INS59 INS43 INS59 INS8 INS8 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS21 INS21 INS21 INS14 INS43 INS43 INS43 INS44 INS32 INS8 INS42 INS48 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS7 INS7 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS60 INS61 INS21 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS14 INS14 INS32 INS7 INS32 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS21 INS42 INS42 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS14 INS22 INS14 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS43 INS14 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS74 INS74 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS27 INS40 INS40 INS40 INS40 INS43 INS43 INS43 INS43 INS43 INS43 INS48 INS48 INS11 INS52 INS42 INS74 INS42 INS52 INS42 INS74 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS43 INS14 INS42 INS42 INS33 INS36 INS33 INS25 INS60 INS25 INS60 INS60 INS60 INS25 INS42 INS42 UPD45 INS43 INS43 INS43 INS43 INS43 INS43 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS7 INS27 INS8 INS43 INS59 INS38 INS8 INS43 INS59 INS39 INS59 INS39 INS59 INS32 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS18 INS42 INS42 INS32 INS32 INS21 INS18 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS21 INS21 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS45