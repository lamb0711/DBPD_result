HDFS-11603. Improve slow mirror/disk warnings in BlockReceiver.

+  private DatanodeInfo[] downstreamDNs = DatanodeInfo.EMPTY_ARRAY;
-    if (duration > datanodeSlowLogThresholdMs) {
+    if (duration > datanodeSlowLogThresholdMs && LOG.isWarnEnabled()) {
-          + flushTotalNanos + "ns");
+          + flushTotalNanos + "ns, volume=" + getVolumeBaseUri());
-        if (duration > datanodeSlowLogThresholdMs) {
+        if (duration > datanodeSlowLogThresholdMs && LOG.isWarnEnabled()) {
-              + "ms (threshold=" + datanodeSlowLogThresholdMs + "ms)");
+              + "ms (threshold=" + datanodeSlowLogThresholdMs + "ms), "
+              + "downstream DNs=" + Arrays.toString(downstreamDNs));
-          if (duration > datanodeSlowLogThresholdMs) {
+          if (duration > datanodeSlowLogThresholdMs && LOG.isWarnEnabled()) {
-                + "ms (threshold=" + datanodeSlowLogThresholdMs + "ms)");
+                + "ms (threshold=" + datanodeSlowLogThresholdMs + "ms), "
+                + "volume=" + getVolumeBaseUri());
-        if (duration > datanodeSlowLogThresholdMs) {
+        if (duration > datanodeSlowLogThresholdMs && LOG.isWarnEnabled()) {
-              + "ms (threshold=" + datanodeSlowLogThresholdMs + "ms)");
+              + "ms (threshold=" + datanodeSlowLogThresholdMs
+              + "ms), volume=" + getVolumeBaseUri());
-    isPenultimateNode = ((downstreams != null) && (downstreams.length == 1));
-    if (isPenultimateNode) {
-      mirrorNameForMetrics = (downstreams[0].getInfoSecurePort() != 0 ?
-          downstreams[0].getInfoSecureAddr() : downstreams[0].getInfoAddr());
-      LOG.debug("Will collect peer metrics for downstream node {}",
-          mirrorNameForMetrics);
-    }
+    initPerfMonitoring(downstreams);
+  /**
+   * If we have downstream DNs and peerMetrics are enabled, then initialize
+   * some state for monitoring the performance of downstream DNs.
+   *
+   * @param downstreams downstream DNs, or null if there are none.
+   */
+  private void initPerfMonitoring(DatanodeInfo[] downstreams) {
+    if (downstreams != null && downstreams.length > 0) {
+      downstreamDNs = downstreams;
+      isPenultimateNode = (downstreams.length == 1);
+      if (isPenultimateNode && datanode.getPeerMetrics() != null) {
+        mirrorNameForMetrics = (downstreams[0].getInfoSecurePort() != 0 ?
+            downstreams[0].getInfoSecureAddr() : downstreams[0].getInfoAddr());
+        LOG.debug("Will collect peer metrics for downstream node {}",
+            mirrorNameForMetrics);
+      }
+    }
+  }
+
+  /**
+   * Fetch the base URI of the volume on which this replica resides.
+   *
+   * @returns Volume base URI as string if available. Else returns the
+   *          the string "unavailable".
+   */
+  private String getVolumeBaseUri() {
+    final ReplicaInfo ri = replicaInfo.getReplicaInfo();
+    if (ri != null && ri.getVolume() != null) {
+      return ri.getVolume().getBaseURI().toString();
+    }
+    return "unavailable";
+  }
+

INS23 INS31 INS31 INS83 INS5 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS43 INS85 INS42 INS40 INS21 INS65 INS65 INS5 INS42 INS25 INS65 INS65 INS42 INS60 INS25 INS41 INS42 INS27 INS32 INS66 INS66 INS42 INS66 INS43 INS85 INS27 INS8 INS66 INS66 INS66 INS83 INS43 INS59 INS27 INS8 INS45 MOV27 INS32 INS42 INS42 INS42 MOV27 INS27 INS21 MOV21 MOV25 INS42 INS42 INS32 INS27 INS27 INS41 INS42 INS42 INS40 INS34 INS7 INS27 INS42 INS42 INS42 INS33 INS32 INS33 INS32 INS42 INS42 MOV36 INS42 INS27 INS42 INS42 INS32 INS42 UPD45 INS32 INS27 INS27 INS32 INS33 INS32 INS42 INS42 MOV27 INS32 MOV27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 MOV27 INS32 UPD45 INS45 INS32 INS42 INS42 UPD45 INS32 INS42 INS42 INS42 INS42 UPD45 INS45 INS32 INS42 DEL36 DEL27 DEL36 DEL42