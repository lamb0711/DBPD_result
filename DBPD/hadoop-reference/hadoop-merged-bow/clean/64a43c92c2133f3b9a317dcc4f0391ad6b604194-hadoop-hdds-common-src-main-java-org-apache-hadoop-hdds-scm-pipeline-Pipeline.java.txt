HDDS-656. Add logic for pipeline report and action processing in new pipeline code. Contributed by Lokesh Jain.

-import org.apache.hadoop.hdds.protocol.proto.HddsProtos.LifeCycleState;
+import java.io.IOException;
+import java.util.LinkedHashMap;
+import java.util.Map;
-  private LifeCycleState state;
-  private List<DatanodeDetails> nodes;
+  private PipelineState state;
+  private Map<DatanodeDetails, Long> nodeStatus;
-      ReplicationFactor factor, LifeCycleState state,
-      List<DatanodeDetails> nodes) {
+      ReplicationFactor factor, PipelineState state,
+      Map<DatanodeDetails, Long> nodeStatus) {
-    this.nodes = nodes;
+    this.nodeStatus = nodeStatus;
-  public LifeCycleState getLifeCycleState() {
+  PipelineState getPipelineState() {
+    // TODO: See if we need to expose this.
+  public boolean isClosed() {
+    return state == PipelineState.CLOSED;
+  }
+
+  public boolean isOpen() {
+    return state == PipelineState.OPEN;
+  }
+
+  void reportDatanode(DatanodeDetails dn) throws IOException {
+    if (nodeStatus.get(dn) == null) {
+      throw new IOException(
+          String.format("Datanode=%s not part of pipeline=%s", dn, id));
+    }
+    nodeStatus.put(dn, System.currentTimeMillis());
+  }
+
+  boolean isHealthy() {
+    for (Long reportedTime : nodeStatus.values()) {
+      if (reportedTime < 0) {
+        return false;
+      }
+    }
+    return true;
+  }
+
-    return new ArrayList<>(nodes);
+    return new ArrayList<>(nodeStatus.keySet());
-    HddsProtos.Pipeline.Builder builder = HddsProtos.Pipeline.newBuilder();
-    builder.setId(id.getProtobuf());
-    builder.setType(type);
-    builder.setState(state);
-    builder.addAllMembers(nodes.stream().map(
-        DatanodeDetails::getProtoBufMessage).collect(Collectors.toList()));
+    HddsProtos.Pipeline.Builder builder = HddsProtos.Pipeline.newBuilder()
+        .setId(id.getProtobuf())
+        .setType(type)
+        .setFactor(factor)
+        .setLeaderID("")
+        .addAllMembers(nodeStatus.keySet().stream()
+            .map(DatanodeDetails::getProtoBufMessage)
+            .collect(Collectors.toList()));
-    return new Pipeline(PipelineID.getFromProtobuf(pipeline.getId()),
-        pipeline.getType(), pipeline.getFactor(), pipeline.getState(),
-        pipeline.getMembersList().stream().map(DatanodeDetails::getFromProtoBuf)
-            .collect(Collectors.toList()));
+    return new Builder().setId(PipelineID.getFromProtobuf(pipeline.getId()))
+        .setFactor(pipeline.getFactor())
+        .setType(pipeline.getType())
+        .setState(PipelineState.ALLOCATED)
+        .setNodes(pipeline.getMembersList().stream()
+            .map(DatanodeDetails::getFromProtoBuf).collect(Collectors.toList()))
+        .build();
+
-        .append(nodes, that.nodes)
+        .append(nodeStatus, that.nodeStatus)
-        .append(nodes)
+        .append(nodeStatus)
-    private LifeCycleState state = null;
-    private List<DatanodeDetails> nodes = null;
+    private PipelineState state = null;
+    private Map<DatanodeDetails, Long> nodeStatus = null;
-      this.id = pipeline.getID();
-      this.type = pipeline.getType();
-      this.factor = pipeline.getFactor();
-      this.state = pipeline.getLifeCycleState();
-      this.nodes = pipeline.getNodes();
+      this.id = pipeline.id;
+      this.type = pipeline.type;
+      this.factor = pipeline.factor;
+      this.state = pipeline.state;
+      this.nodeStatus = pipeline.nodeStatus;
-    public Builder setState(LifeCycleState state1) {
+    public Builder setState(PipelineState state1) {
-    public Builder setNodes(List<DatanodeDetails> nodes1) {
-      this.nodes = nodes1;
+    public Builder setNodes(List<DatanodeDetails> nodes) {
+      this.nodeStatus = new LinkedHashMap<>();
+      nodes.forEach(node -> nodeStatus.put(node, -1L));
-      Preconditions.checkNotNull(nodes);
-      return new Pipeline(id, type, factor, state, nodes);
+      Preconditions.checkNotNull(nodeStatus);
+      return new Pipeline(id, type, factor, state, nodeStatus);
+
+  enum PipelineState {
+    ALLOCATED, OPEN, CLOSED
+  }

MOV26 INS26 INS26 INS40 UPD40 INS40 INS31 INS31 INS31 INS31 INS71 UPD43 UPD74 INS44 UPD43 UPD42 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS8 INS42 INS72 INS72 INS72 UPD42 UPD43 INS43 UPD42 UPD43 INS74 INS42 UPD42 INS41 INS41 INS43 INS42 INS42 INS25 INS21 INS70 INS41 UPD43 UPD74 MOV44 INS42 INS42 INS42 UPD42 INS42 UPD42 INS43 INS43 INS43 INS27 INS27 INS42 INS27 INS8 INS32 INS44 INS32 INS8 INS9 INS32 UPD42 UPD43 INS43 UPD42 UPD43 INS21 INS42 INS42 INS42 UPD42 INS42 INS40 INS42 INS40 INS32 INS33 INS53 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS25 INS32 MOV32 INS32 INS42 UPD42 INS42 UPD42 INS32 UPD42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS32 INS32 INS42 MOV32 UPD42 UPD40 UPD42 INS40 INS40 INS40 INS40 INS40 INS14 INS42 INS42 INS86 UPD42 UPD42 INS43 INS32 INS42 INS34 INS41 INS32 INS42 INS45 INS32 UPD42 MOV42 INS40 UPD42 UPD42 INS74 INS59 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS9 INS32 INS42 UPD42 MOV42 INS32 UPD42 MOV42 MOV32 INS43 INS42 INS42 INS42 INS42 INS38 MOV32 INS42 INS42 INS32 INS32 INS42 MOV32 INS42 INS34 MOV32 UPD42 MOV42 INS42 INS14 INS42 MOV32 UPD43 MOV43 UPD42 DEL83 DEL42 DEL42 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL21 DEL32 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42