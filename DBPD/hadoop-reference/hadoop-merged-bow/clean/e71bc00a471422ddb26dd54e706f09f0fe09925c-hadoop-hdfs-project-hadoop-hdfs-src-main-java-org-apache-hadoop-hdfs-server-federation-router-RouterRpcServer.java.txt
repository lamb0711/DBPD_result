HDFS-13224. RBF: Resolvers to support mount points across multiple subclusters. Contributed by Inigo Goiri.

-    Map<String, DatanodeStorageReport> datanodesMap = new HashMap<>();
-    RemoteMethod method = new RemoteMethod("getDatanodeStorageReport",
-        new Class<?>[] {DatanodeReportType.class}, type);
-    Set<FederationNamespaceInfo> nss = namenodeResolver.getNamespaces();
-    Map<FederationNamespaceInfo, DatanodeStorageReport[]> results =
-        rpcClient.invokeConcurrent(
-            nss, method, true, false, DatanodeStorageReport[].class);
-    for (DatanodeStorageReport[] result : results.values()) {
-      for (DatanodeStorageReport node : result) {
-        String nodeId = node.getDatanodeInfo().getXferAddr();
+    Map<String, DatanodeStorageReport[]> dnSubcluster =
+        getDatanodeStorageReportMap(type);
+
+    // Avoid repeating machines in multiple subclusters
+    Map<String, DatanodeStorageReport> datanodesMap = new LinkedHashMap<>();
+    for (DatanodeStorageReport[] dns : dnSubcluster.values()) {
+      for (DatanodeStorageReport dn : dns) {
+        DatanodeInfo dnInfo = dn.getDatanodeInfo();
+        String nodeId = dnInfo.getXferAddr();
-          datanodesMap.put(nodeId, node);
+          datanodesMap.put(nodeId, dn);
-    // TODO sort somehow
+  /**
+   * Get the list of datanodes per subcluster.
+   *
+   * @param type Type of the datanodes to get.
+   * @return nsId -> datanode list.
+   * @throws IOException
+   */
+  public Map<String, DatanodeStorageReport[]> getDatanodeStorageReportMap(
+      DatanodeReportType type) throws IOException {
+
+    Map<String, DatanodeStorageReport[]> ret = new LinkedHashMap<>();
+    RemoteMethod method = new RemoteMethod("getDatanodeStorageReport",
+        new Class<?>[] {DatanodeReportType.class}, type);
+    Set<FederationNamespaceInfo> nss = namenodeResolver.getNamespaces();
+    Map<FederationNamespaceInfo, DatanodeStorageReport[]> results =
+        rpcClient.invokeConcurrent(
+            nss, method, true, false, DatanodeStorageReport[].class);
+    for (Entry<FederationNamespaceInfo, DatanodeStorageReport[]> entry :
+        results.entrySet()) {
+      FederationNamespaceInfo ns = entry.getKey();
+      String nsId = ns.getNameserviceId();
+      DatanodeStorageReport[] result = entry.getValue();
+      ret.put(nsId, result);
+    }
+    return ret;
+  }
+

INS31 INS29 INS83 INS74 INS42 INS44 INS43 INS8 INS60 INS65 INS65 INS65 INS65 INS43 INS43 INS5 INS43 INS42 INS42 INS60 MOV60 MOV60 MOV60 INS70 INS41 INS74 INS59 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS43 INS85 INS42 INS74 INS59 INS44 INS32 INS8 INS42 INS43 INS43 INS5 INS42 INS32 UPD42 UPD42 INS42 INS43 INS43 INS5 INS42 INS14 INS74 INS42 INS42 INS42 INS60 INS60 INS60 INS21 INS42 INS42 INS43 INS85 INS42 INS42 UPD74 UPD42 INS42 INS42 INS43 INS85 INS74 INS43 INS43 INS5 INS43 INS59 INS43 INS59 INS5 INS59 INS32 INS42 UPD43 UPD42 INS60 INS42 INS43 INS42 INS42 INS43 INS85 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 DEL42 DEL32