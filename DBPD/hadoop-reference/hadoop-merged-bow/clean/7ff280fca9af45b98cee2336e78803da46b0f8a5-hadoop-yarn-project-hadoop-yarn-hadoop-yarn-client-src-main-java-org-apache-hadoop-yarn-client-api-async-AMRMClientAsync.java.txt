YARN-1509. Make AMRMClient support send increase container request and get increased/decreased containers. (Meng Ding via wangda)

- * class MyCallbackHandler implements AMRMClientAsync.CallbackHandler {
+ * class MyCallbackHandler extends AMRMClientAsync.AbstractCallbackHandler {
- *   
+ *
+ *   public void onContainersResourceChanged(List<Container> containers) {
+ *     [determine if resource allocation of containers have been increased in
+ *      the ResourceManager, and if so, inform the NodeManagers to increase the
+ *      resource monitor/enforcement on the containers]
+ *   }
+ *
+  /**
+   * <p>Create a new instance of AMRMClientAsync.</p>
+   *
+   * @param intervalMs heartbeat interval in milliseconds between AM and RM
+   * @param callbackHandler callback handler that processes responses from
+   *                        the <code>ResourceManager</code>
+   */
+  public static <T extends ContainerRequest> AMRMClientAsync<T>
+      createAMRMClientAsync(
+      int intervalMs, AbstractCallbackHandler callbackHandler) {
+    return new AMRMClientAsyncImpl<T>(intervalMs, callbackHandler);
+  }
+
+  /**
+   * <p>Create a new instance of AMRMClientAsync.</p>
+   *
+   * @param client the AMRMClient instance
+   * @param intervalMs heartbeat interval in milliseconds between AM and RM
+   * @param callbackHandler callback handler that processes responses from
+   *                        the <code>ResourceManager</code>
+   */
+  public static <T extends ContainerRequest> AMRMClientAsync<T>
+      createAMRMClientAsync(
+      AMRMClient<T> client, int intervalMs,
+      AbstractCallbackHandler callbackHandler) {
+    return new AMRMClientAsyncImpl<T>(client, intervalMs, callbackHandler);
+  }
+
+  protected AMRMClientAsync(
+      int intervalMs, AbstractCallbackHandler callbackHandler) {
+    this(new AMRMClientImpl<T>(), intervalMs, callbackHandler);
+  }
+
+  @Private
+  @VisibleForTesting
+  protected AMRMClientAsync(AMRMClient<T> client, int intervalMs,
+      AbstractCallbackHandler callbackHandler) {
+    super(AMRMClientAsync.class.getName());
+    this.client = client;
+    this.heartbeatIntervalMs.set(intervalMs);
+    this.handler = callbackHandler;
+  }
+
+  /**
+   *
+   * @deprecated Use {@link #createAMRMClientAsync(int,
+   *             AMRMClientAsync.AbstractCallbackHandler)} instead.
+   */
+  @Deprecated
-  
+
+  /**
+   *
+   * @deprecated Use {@link #createAMRMClientAsync(AMRMClient,
+   *             int, AMRMClientAsync.AbstractCallbackHandler)} instead.
+   */
+  @Deprecated
-  
+
+  @Deprecated
+  @Deprecated
+   * Request container resource change before calling <code>allocate</code>.
+   * Any previous pending resource change request of the same container will be
+   * removed.
+   *
+   * Application that calls this method is expected to maintain the
+   * <code>Container</code>s that are returned from previous successful
+   * allocations or resource changes. By passing in the existing container and a
+   * target resource capability to this method, the application requests the
+   * ResourceManager to change the existing resource allocation to the target
+   * resource allocation.
+   *
+   * @param container The container returned from the last successful resource
+   *                  allocation or resource change
+   * @param capability  The target resource capability of the container
+   */
+  public abstract void requestContainerResourceChange(
+      Container container, Resource capability);
+
+  /**
-  public interface CallbackHandler {
-    
+  /**
+   * <p>
+   * The callback abstract class. The callback functions need to be implemented
+   * by {@link AMRMClientAsync} users. The APIs are called when responses from
+   * the <code>ResourceManager</code> are available.
+   * </p>
+   */
+  public abstract static class AbstractCallbackHandler
+      implements CallbackHandler {
+
-    public void onContainersCompleted(List<ContainerStatus> statuses);
-    
+    public abstract void onContainersCompleted(List<ContainerStatus> statuses);
+
-    public void onContainersAllocated(List<Container> containers);
-    
+    public abstract void onContainersAllocated(List<Container> containers);
+
+    /**
+     * Called when the ResourceManager responds to a heartbeat with containers
+     * whose resource allocation has been changed.
+     */
+    public abstract void onContainersResourceChanged(
+        List<Container> containers);
+
-    public void onShutdownRequest();
-    
+    public abstract void onShutdownRequest();
+
-    public void onNodesUpdated(List<NodeReport> updatedNodes);
-    
-    public float getProgress();
-    
+    public abstract void onNodesUpdated(List<NodeReport> updatedNodes);
+
+    public abstract float getProgress();
+
+    /**
+     * Called when error comes from RM communications as well as from errors in
+     * the callback itself from the app. Calling
+     * stop() is the recommended action.
+     */
+    public abstract void onError(Throwable e);
+  }
+
+  /**
+   * @deprecated Use {@link AMRMClientAsync.AbstractCallbackHandler} instead.
+   */
+  @Deprecated
+  public interface CallbackHandler {
+
+    /**
+     * Called when the ResourceManager responds to a heartbeat with completed
+     * containers. If the response contains both completed containers and
+     * allocated containers, this will be called before containersAllocated.
+     */
+    void onContainersCompleted(List<ContainerStatus> statuses);
+
+    /**
+     * Called when the ResourceManager responds to a heartbeat with allocated
+     * containers. If the response containers both completed containers and
+     * allocated containers, this will be called after containersCompleted.
+     */
+    void onContainersAllocated(List<Container> containers);
+
+    /**
+     * Called when the ResourceManager wants the ApplicationMaster to shutdown
+     * for being out of sync etc. The ApplicationMaster should not unregister
+     * with the RM unless the ApplicationMaster wants to be the last attempt.
+     */
+    void onShutdownRequest();
+
+    /**
+     * Called when nodes tracked by the ResourceManager have changed in health,
+     * availability etc.
+     */
+    void onNodesUpdated(List<NodeReport> updatedNodes);
+
+    float getProgress();
+
-    public void onError(Throwable e);
+    void onError(Throwable e);

INS31 INS31 INS31 INS31 INS31 INS55 INS29 INS44 INS44 INS29 INS44 INS44 INS44 INS44 INS29 INS78 INS83 INS83 INS73 INS74 INS42 INS44 MOV44 INS8 INS29 INS78 INS83 INS83 INS73 INS74 INS42 INS44 INS44 MOV44 INS8 INS78 INS83 INS42 INS44 MOV44 INS8 INS78 INS78 INS78 INS83 INS42 MOV44 MOV44 MOV44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS29 INS83 INS83 INS42 INS43 INS31 INS31 INS29 INS78 INS83 INS42 INS31 INS31 INS31 INS31 INS31 MOV31 INS66 INS66 INS66 INS66 INS66 INS65 INS65 INS65 INS39 INS42 INS43 INS42 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS65 INS42 INS42 INS43 INS43 INS43 INS39 INS42 INS41 INS65 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS39 INS42 INS41 INS42 INS39 INS42 INS17 INS42 INS42 INS42 INS46 INS21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS65 INS42 INS83 INS83 INS29 INS83 INS83 INS39 INS42 INS44 INS83 INS83 INS83 INS29 INS83 INS83 INS39 INS42 INS44 INS65 INS42 INS29 INS39 INS42 INS44 INS29 INS39 INS42 INS44 INS29 INS39 INS42 INS29 INS39 INS42 INS44 INS39 INS42 UPD66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS43 INS42 INS42 INS42 INS66 INS65 INS66 INS42 INS42 INS42 INS14 INS66 INS65 INS66 INS42 INS42 INS42 INS43 INS43 INS14 INS14 INS42 INS42 INS32 INS7 INS32 INS7 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS74 INS42 INS65 INS43 INS42 INS66 INS65 INS66 INS65 INS74 INS42 INS65 INS74 INS42 INS65 INS65 INS74 INS42 INS42 INS42 INS68 INS74 INS42 INS42 INS68 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS57 INS42 INS22 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS66 INS66 INS43 INS43 INS66 INS66 INS66 INS42 INS40 INS66 INS66 INS66 INS43 INS43 INS66 INS66 INS66 INS43 INS43 INS66 INS66 INS66 INS66 INS66 INS43 INS43 INS42 INS69 INS69 INS43 INS43 INS42 INS69 INS69 INS69 INS43 INS43 INS43 INS43 INS43 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS43 INS42 INS42 INS43 INS39 INS43 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 DEL42 DEL83