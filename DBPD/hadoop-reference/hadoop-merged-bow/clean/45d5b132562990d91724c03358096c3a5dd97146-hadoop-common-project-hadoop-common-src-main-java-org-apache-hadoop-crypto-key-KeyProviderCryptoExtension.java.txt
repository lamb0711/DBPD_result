Merge changes from trunk

+import java.nio.ByteBuffer;
+import org.apache.hadoop.crypto.CryptoCodec;
+import org.apache.hadoop.crypto.Decryptor;
+import org.apache.hadoop.crypto.Encryptor;
-      Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding");
+
+      CryptoCodec cc = CryptoCodec.getInstance(keyProvider.getConf());
-      RANDOM.get().nextBytes(newKey);
-      final byte[] iv = new byte[cipher.getBlockSize()];
-      RANDOM.get().nextBytes(iv);
+      cc.generateSecureRandom(newKey);
+      final byte[] iv = new byte[cc.getCipherSuite().getAlgorithmBlockSize()];
+      cc.generateSecureRandom(iv);
-      // Encrypt the new key
-      cipher.init(Cipher.ENCRYPT_MODE,
-          new SecretKeySpec(encryptionKey.getMaterial(), "AES"),
-          new IvParameterSpec(encryptionIV));
-      final byte[] encryptedKey = cipher.doFinal(newKey);
+      Encryptor encryptor = cc.createEncryptor();
+      encryptor.init(encryptionKey.getMaterial(), encryptionIV);
+      int keyLen = newKey.length;
+      ByteBuffer bbIn = ByteBuffer.allocateDirect(keyLen);
+      ByteBuffer bbOut = ByteBuffer.allocateDirect(keyLen);
+      bbIn.put(newKey);
+      bbIn.flip();
+      encryptor.encrypt(bbIn, bbOut);
+      bbOut.flip();
+      byte[] encryptedKey = new byte[keyLen];
+      bbOut.get(encryptedKey);    
-      final byte[] encryptionKeyMaterial = encryptionKey.getMaterial();
+
-      // Init the cipher with encryption key parameters
-      Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding");
-      cipher.init(Cipher.DECRYPT_MODE,
-          new SecretKeySpec(encryptionKeyMaterial, "AES"),
-          new IvParameterSpec(encryptionIV));
-      // Decrypt the encrypted key
+
+      CryptoCodec cc = CryptoCodec.getInstance(keyProvider.getConf());
+      Decryptor decryptor = cc.createDecryptor();
+      decryptor.init(encryptionKey.getMaterial(), encryptionIV);
-      final byte[] decryptedKey = cipher.doFinal(encryptedKV.getMaterial());
+      int keyLen = encryptedKV.getMaterial().length;
+      ByteBuffer bbIn = ByteBuffer.allocateDirect(keyLen);
+      ByteBuffer bbOut = ByteBuffer.allocateDirect(keyLen);
+      bbIn.put(encryptedKV.getMaterial());
+      bbIn.flip();
+      decryptor.decrypt(bbIn, bbOut);
+      bbOut.flip();
+      byte[] decryptedKey = new byte[keyLen];
+      bbOut.get(decryptedKey);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV60 INS60 INS21 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS21 UPD43 INS43 INS59 INS32 INS39 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 MOV5 INS59 INS32 INS43 UPD43 INS32 INS39 INS59 INS43 INS59 INS43 INS59 MOV32 INS32 INS32 INS32 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 MOV42 MOV32 INS42 INS42 INS40 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 MOV42 MOV32 INS42 INS42 INS22 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS42 UPD42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV5 INS42 INS42 INS42 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 UPD42 MOV42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL40 DEL43 DEL45 DEL14 DEL43 DEL42 DEL14 DEL32 DEL21 DEL83 DEL32 DEL59 DEL60 DEL83 DEL42 DEL45 DEL40 DEL43 DEL42 DEL45 DEL14 DEL43 DEL42 DEL14 DEL32 DEL21 DEL83