HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah

+import java.util.Base64;
+import java.util.Base64.Encoder;
+import javax.ws.rs.core.Response.ResponseBuilder;
+import javax.ws.rs.core.Response.Status;
+import org.apache.hadoop.fs.FileEncryptionInfo;
+import org.apache.hadoop.hdfs.protocolPB.PBHelperClient;
-  private static volatile String serverDefaultsResponse = null;
+  private boolean supportEZ;
+    supportEZ =
+        Boolean.valueOf(request.getHeader(WebHdfsFileSystem.EZ_HEADER));
-      final String remoteAddr) throws IOException {
+      final String remoteAddr, final HdfsFileStatus status) throws IOException {
-      final HdfsFileStatus status = np.getFileInfo(path);
-    } 
+    }
-  private URI redirectURI(final NameNode namenode,
+  private URI redirectURI(ResponseBuilder rb, final NameNode namenode,
+    final NamenodeProtocols np = getRPCServer(namenode);
+    HdfsFileStatus status = null;
+    if (op == GetOpParam.Op.OPEN
+        || op == GetOpParam.Op.GETFILECHECKSUM
+        || op == PostOpParam.Op.APPEND) {
+      status = np.getFileInfo(path);
+    }
-        excludeDatanodes, remoteAddr);
+        excludeDatanodes, remoteAddr, status);
-    final String query = op.toQueryString() + delegationQuery
-        + "&" + new NamenodeAddressParam(namenode)
-        + Param.toSortedString("&", parameters);
-    final String uripath = WebHdfsFileSystem.PATH_PREFIX + path;
+
+    StringBuilder queryBuilder = new StringBuilder();
+    queryBuilder.append(op.toQueryString());
+    queryBuilder.append(delegationQuery);
+    queryBuilder.append("&").append(new NamenodeAddressParam(namenode));
+    queryBuilder.append(Param.toSortedString("&", parameters));
+
+    boolean prependReservedRawPath  = false;
+    if (op == GetOpParam.Op.OPEN && supportEZ
+        && status.getFileEncryptionInfo() != null) {
+      prependReservedRawPath = true;
+      rb.header(WebHdfsFileSystem.FEFINFO_HEADER,
+          encodeFeInfo(status.getFileEncryptionInfo()));
+    }
+    final String uripath = WebHdfsFileSystem.PATH_PREFIX +
+        (prependReservedRawPath ? "/.reserved/raw" + path : path);
-        query, null);
+        queryBuilder.toString(), null);
-      final URI uri = redirectURI(namenode, ugi, delegation, username,
+      final URI uri = redirectURI(null, namenode, ugi, delegation, username,
-      final URI uri = redirectURI(namenode, ugi, delegation, username,
+      final URI uri = redirectURI(null, namenode, ugi, delegation, username,
+  private static String encodeFeInfo(FileEncryptionInfo feInfo) {
+    Encoder encoder = Base64.getEncoder();
+    String encodedValue = encoder
+        .encodeToString(PBHelperClient.convert(feInfo).toByteArray());
+    return encodedValue;
+  }
+
-      final URI uri = redirectURI(namenode, ugi, delegation, username,
+      ResponseBuilder rb = Response.noContent();
+      final URI uri = redirectURI(rb, namenode, ugi, delegation, username,
-        return Response.temporaryRedirect(uri)
-          .type(MediaType.APPLICATION_OCTET_STREAM).build();
+        return rb.status(Status.TEMPORARY_REDIRECT).location(uri)
+            .type(MediaType.APPLICATION_OCTET_STREAM).build();
-        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
+        return rb.status(Status.OK).entity(js).type(MediaType.APPLICATION_JSON)
+            .build();
-      final URI uri = redirectURI(namenode, ugi, delegation, username, doAsUser,
-          fullpath, op.getValue(), -1L, -1L, null);
+      final URI uri = redirectURI(null, namenode, ugi, delegation, username,
+          doAsUser, fullpath, op.getValue(), -1L, -1L, null);
+      String serverDefaultsResponse =
+          (String) context.getAttribute("serverDefaults");
+        context.setAttribute("serverDefaults", serverDefaultsResponse);
-  /*
-   * This is used only and only for testing.
-   * Please don't use it otherwise.
-   */
-  @VisibleForTesting
-  public static void resetServerDefaultsResponse() {
-    serverDefaultsResponse = null;
-  }
-

INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS39 INS44 INS44 UPD83 MOV43 UPD42 INS44 UPD42 INS21 INS83 MOV43 INS42 INS43 INS42 INS60 INS60 INS25 INS60 INS21 INS21 INS21 INS21 INS60 INS25 INS43 INS42 INS60 INS60 INS41 INS7 INS42 INS83 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS39 INS59 INS27 INS8 INS42 INS43 INS59 INS43 INS59 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS27 INS27 INS21 INS42 UPD42 MOV42 INS14 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 MOV14 INS42 INS42 MOV32 INS42 INS9 INS27 INS27 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS60 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS42 INS40 INS7 INS42 INS43 INS42 INS42 INS45 INS27 INS42 INS32 INS33 INS7 INS32 INS36 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 MOV32 INS42 INS42 INS40 INS42 INS42 INS42 INS9 INS42 INS42 INS40 INS32 INS16 INS42 INS42 MOV38 INS32 INS42 INS42 INS42 INS32 MOV38 INS42 INS42 INS11 INS21 INS42 INS32 INS42 INS27 INS42 INS33 INS33 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS33 INS43 INS32 INS32 INS42 INS42 INS45 MOV42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 INS40 DEL83 DEL83 DEL33 DEL83 DEL42 DEL59 DEL60 DEL83 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL78 DEL39 DEL42 DEL33 DEL7 DEL21 DEL42 DEL43