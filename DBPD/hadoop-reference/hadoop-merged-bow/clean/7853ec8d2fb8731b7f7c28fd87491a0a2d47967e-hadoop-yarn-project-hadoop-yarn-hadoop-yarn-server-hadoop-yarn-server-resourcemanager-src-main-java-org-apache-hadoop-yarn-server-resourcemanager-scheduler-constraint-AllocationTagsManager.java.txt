YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.

-import com.google.common.collect.ImmutableSet;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMApp;
+import java.util.concurrent.ConcurrentMap;
-   * a given set of application IDs, the values are properly merged.
+   * the scope defined in the allocation tags, the values are properly merged.
-   * @param appIds a set of application IDs.
+   * @param allocationTags {@link AllocationTags}.
-  private TypeToCountedTags aggregateAllocationTags(Set<ApplicationId> appIds,
-      Map<ApplicationId, TypeToCountedTags> mapping) {
+  private TypeToCountedTags aggregateAllocationTags(
+      AllocationTags allocationTags,
+      Map<ApplicationId, TypeToCountedTags> mapping)
+      throws InvalidAllocationTagsQueryException {
+    // Based on the namespace type of the given allocation tags
+    TargetApplicationsNamespace namespace = allocationTags.getNamespace();
+    TargetApplications ta = new TargetApplications(
+        allocationTags.getCurrentApplicationId(), getApplicationIdToTags());
+    namespace.evaluate(ta);
+    Set<ApplicationId> appIds = namespace.getNamespaceScope();
-        mapping = aggregateAllocationTags(
-            tags.getNamespace().getNamespaceScope(),
-            perAppNodeMappings);
+        mapping = aggregateAllocationTags(tags, perAppNodeMappings);
-        mapping = aggregateAllocationTags(
-            tags.getNamespace().getNamespaceScope(),
-            perAppRackMappings);
+        mapping = aggregateAllocationTags(tags, perAppRackMappings);
-   * @return all application IDs in a set that currently visible by
-   * the allocation tags manager.
+   * @return all applications that is known to the
+   * {@link AllocationTagsManager}, along with their application tags.
+   * The result is a map, where key is an application ID, and value is the
+   * application-tags attached to this application. If there is no
+   * application-tag exists for the application, the value is an empty set.
-  public Set<ApplicationId> getAllApplicationIds() {
-    return ImmutableSet.copyOf(perAppNodeMappings.keySet());
+  private Map<ApplicationId, Set<String>> getApplicationIdToTags() {
+    Map<ApplicationId, Set<String>> result = new HashMap<>();
+    ConcurrentMap<ApplicationId, RMApp> allApps = rmContext.getRMApps();
+    if (allApps != null) {
+      for (Map.Entry<ApplicationId, RMApp> app : allApps.entrySet()) {
+        if (perAppNodeMappings.containsKey(app.getKey())) {
+          result.put(app.getKey(), app.getValue().getApplicationTags());
+        }
+      }
+    }
+    return result;

MOV26 INS26 INS40 UPD40 INS43 UPD83 INS74 INS42 INS8 INS43 UPD42 INS42 INS60 INS60 INS21 INS60 INS43 INS43 INS74 INS60 INS60 INS25 INS41 UPD66 UPD42 UPD66 INS65 INS66 INS42 INS43 INS59 INS43 INS59 INS32 MOV74 INS59 UPD66 INS65 UPD66 INS66 INS66 INS66 INS42 INS42 MOV43 INS43 INS74 INS59 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 MOV43 INS74 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS42 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS42 INS42 INS25 INS42 INS43 INS43 INS43 INS32 INS8 INS40 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS21 MOV42 MOV42 UPD42 UPD42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL74 DEL42 DEL32 DEL41 DEL8