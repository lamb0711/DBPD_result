HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1431097 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.io.IOUtils;
-import org.apache.hadoop.hdfs.SocketCache.SocketAndStreams;
+import org.apache.hadoop.hdfs.net.EncryptedPeer;
+import org.apache.hadoop.hdfs.net.Peer;
+import org.apache.hadoop.hdfs.net.TcpPeerServer;
+import org.apache.hadoop.hdfs.security.token.block.DataEncryptionKey;
-  private final SocketCache socketCache;
+  private final PeerCache peerCache;
-    this.socketCache = dfsClient.socketCache;
+    this.peerCache = dfsClient.peerCache;
-      closeBlockReader(blockReader);
+      blockReader.close(peerCache);
-      closeBlockReader(blockReader);
+      blockReader.close(peerCache);
-          closeBlockReader(reader);
+          reader.close(peerCache);
-  /**
-   * Close the given BlockReader and cache its socket.
-   */
-  private void closeBlockReader(BlockReader reader) throws IOException {
-    if (reader.hasSentStatusCode()) {
-      IOStreamPair ioStreams = reader.getStreams();
-      Socket oldSock = reader.takeSocket();
-      socketCache.put(oldSock, ioStreams);
+  private Peer newPeer(InetSocketAddress addr) throws IOException {
+    Peer peer = null;
+    boolean success = false;
+    Socket sock = null;
+    try {
+      sock = dfsClient.socketFactory.createSocket();
+      NetUtils.connect(sock, addr,
+        dfsClient.getRandomLocalInterfaceAddr(),
+        dfsClient.getConf().socketTimeout);
+      peer = TcpPeerServer.peerFromSocketAndKey(sock, 
+          dfsClient.getDataEncryptionKey());
+      success = true;
+      return peer;
+    } finally {
+      if (!success) {
+        IOUtils.closeQuietly(peer);
+        IOUtils.closeQuietly(sock);
+      }
-    reader.close();
-      SocketAndStreams sockAndStreams = null;
+      Peer peer = null;
-        sockAndStreams = socketCache.get(dnAddr);
+        peer = peerCache.get(chosenNode);
-      Socket sock;
-      if (sockAndStreams == null) {
+      if (peer == null) {
+        peer = newPeer(dnAddr);
-
-        sock = dfsClient.socketFactory.createSocket();
-        
-        // TCP_NODELAY is crucial here because of bad interactions between
-        // Nagle's Algorithm and Delayed ACKs. With connection keepalive
-        // between the client and DN, the conversation looks like:
-        //   1. Client -> DN: Read block X
-        //   2. DN -> Client: data for block X
-        //   3. Client -> DN: Status OK (successful read)
-        //   4. Client -> DN: Read block Y
-        // The fact that step #3 and #4 are both in the client->DN direction
-        // triggers Nagling. If the DN is using delayed ACKs, this results
-        // in a delay of 40ms or more.
-        //
-        // TCP_NODELAY disables nagling and thus avoids this performance
-        // disaster.
-        sock.setTcpNoDelay(true);
-
-        NetUtils.connect(sock, dnAddr,
-            dfsClient.getRandomLocalInterfaceAddr(),
-            dfsClient.getConf().socketTimeout);
-        sock.setSoTimeout(dfsClient.getConf().socketTimeout);
-      } else {
-        sock = sockAndStreams.sock;
-            BlockReaderFactory.newBlockReader(dfsClient.getConf(),
-                                       sock, file, block,
+            BlockReaderFactory.newBlockReader(dfsClient.conf,
+                                       file, block,
-                                       bufferSize, verifyChecksum,
+                                       verifyChecksum,
-                                       dfsClient.getDataEncryptionKey(),
-                                       sockAndStreams == null ? null : sockAndStreams.ioStreams);
+                                       peer,
+                                       chosenNode);
-        DFSClient.LOG.debug("Error making BlockReader. Closing stale " + sock, ex);
-        if (sockAndStreams != null) {
-          sockAndStreams.close();
-        } else {
-          sock.close();
-        }
+        DFSClient.LOG.debug("Error making BlockReader. Closing stale " + peer, ex);
+        IOUtils.closeQuietly(peer);

INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 UPD43 INS43 INS42 UPD42 UPD42 INS42 UPD43 UPD42 MOV60 INS60 MOV60 INS54 UPD42 UPD43 INS39 INS59 MOV8 INS8 UPD40 UPD42 INS42 INS33 INS42 INS9 UPD42 INS33 INS21 INS21 INS41 INS25 UPD42 INS7 INS7 INS42 INS38 INS8 UPD43 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 INS42 INS32 INS42 INS9 INS42 MOV21 MOV21 UPD42 UPD42 UPD42 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV21 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL21 DEL32 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL33 DEL27 DEL33 DEL40 DEL16 DEL42 DEL33 DEL27 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25