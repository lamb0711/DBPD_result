Merge branch 'trunk' into HDDS-1535
+import org.apache.hadoop.hdds.protocol.proto.SCMSecurityProtocolProtos.SCMGetCertResponseProto;
-  private static SCMSecurityProtocol getScmSecurityClient(
-      OzoneConfiguration conf) throws IOException {
+  private static SCMSecurityProtocolClientSideTranslatorPB
+      getScmSecurityClient(OzoneConfiguration conf) throws IOException {
-    SCMSecurityProtocol secureScmClient = getScmSecurityClient(config);
+    SCMSecurityProtocolClientSideTranslatorPB secureScmClient =
+        getScmSecurityClient(config);
-    String pemEncodedCert = secureScmClient.getOMCertificate(omDetailsProto,
-        getEncodedString(csr));
+    SCMGetCertResponseProto response = secureScmClient.
+        getOMCertChain(omDetailsProto, getEncodedString(csr));
+    String pemEncodedCert = response.getX509Certificate();
-      client.storeCertificate(pemEncodedCert, true);
-      // Persist om cert serial id.
-      omStore.setOmCertSerialId(CertificateCodec.
-          getX509Certificate(pemEncodedCert).getSerialNumber().toString());
+
+
+      // Store SCM CA certificate.
+      if(response.hasX509CACertificate()) {
+        String pemEncodedRootCert = response.getX509CACertificate();
+        client.storeCertificate(pemEncodedRootCert, true, true);
+        client.storeCertificate(pemEncodedCert, true);
+        // Persist om cert serial id.
+        omStore.setOmCertSerialId(CertificateCodec.
+            getX509Certificate(pemEncodedCert).getSerialNumber().toString());
+      } else {
+        throw new RuntimeException("Unable to retrieve OM certificate " +
+            "chain");
+      }
+  @Override
+  public List<OzoneFileStatus> listStatus(OmKeyArgs args, boolean recursive,
+      String startKey, long numEntries) throws IOException {
+    if(isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.READ,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+    }
+    boolean auditSuccess = true;
+    try {
+      metrics.incNumListStatus();
+      return keyManager.listStatus(args, recursive, startKey, numEntries);
+    } catch (Exception ex) {
+      metrics.incNumListStatusFails();
+      auditSuccess = false;
+      AUDIT.logWriteFailure(buildAuditMessageForFailure(OMAction.LIST_STATUS,
+          (args == null) ? null : args.toAuditMap(), ex));
+      throw ex;
+    } finally {
+      if(auditSuccess){
+        AUDIT.logWriteSuccess(buildAuditMessageForSuccess(
+            OMAction.LIST_STATUS, (args == null) ? null : args.toAuditMap()));
+      }
+    }
+  }
+

INS26 INS40 INS31 UPD43 INS78 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS43 INS8 UPD42 INS60 INS42 INS43 INS43 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS60 INS54 UPD43 INS43 MOV43 INS59 INS8 INS42 INS42 INS42 INS42 INS42 INS8 INS39 INS59 INS8 INS12 INS8 UPD42 INS42 UPD42 INS42 INS32 INS25 INS21 INS42 INS9 INS21 INS41 INS44 INS8 INS25 UPD42 INS42 INS42 INS32 MOV8 INS8 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS21 INS53 INS42 INS8 INS42 INS42 INS60 INS21 INS53 INS42 INS40 INS40 INS40 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS42 INS21 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS9 INS43 INS27 INS42 INS40 INS16 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS45 INS36 INS33 INS32 INS42 INS40 INS16 INS27 INS42 INS42 INS36 INS33 INS32 INS42 INS33 INS27 INS42 INS42 INS42 INS33