Merge r1476010 through r1476452 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1476453 13f79535-47bb-0310-9956-ffa450edef68

+  @Override
+  DatanodeDescriptor[] chooseTarget(String src, int numOfReplicas,
+      DatanodeDescriptor writer, HashMap<Node, Node> excludedNodes,
+      long blocksize, List<DatanodeDescriptor> favoredNodes) {
+    try {
+      if (favoredNodes == null || favoredNodes.size() == 0) {
+        // Favored nodes not specified, fall back to regular block placement.
+        return chooseTarget(src, numOfReplicas, writer,
+            new ArrayList<DatanodeDescriptor>(numOfReplicas), false, 
+            excludedNodes, blocksize);
+      }
+
+      HashMap<Node, Node> favoriteAndExcludedNodes = excludedNodes == null ?
+          new HashMap<Node, Node>() : new HashMap<Node, Node>(excludedNodes);
+
+      // Choose favored nodes
+      List<DatanodeDescriptor> results = new ArrayList<DatanodeDescriptor>();
+      boolean avoidStaleNodes = stats != null
+          && stats.isAvoidingStaleDataNodesForWrite();
+      for (int i = 0; i < Math.min(favoredNodes.size(), numOfReplicas); i++) {
+        DatanodeDescriptor favoredNode = favoredNodes.get(i);
+        // Choose a single node which is local to favoredNode.
+        // 'results' is updated within chooseLocalNode
+        DatanodeDescriptor target = chooseLocalNode(favoredNode,
+            favoriteAndExcludedNodes, blocksize, 
+            getMaxNodesPerRack(results, 
+                numOfReplicas)[1], results, avoidStaleNodes);
+        if (target == null) {
+          LOG.warn("Could not find a target for file " + src
+              + " with favored node " + favoredNode); 
+          continue;
+        }
+        favoriteAndExcludedNodes.put(target, target);
+      }
+
+      if (results.size() < numOfReplicas) {        
+        // Not enough favored nodes, choose other nodes.
+        numOfReplicas -= results.size();
+        DatanodeDescriptor[] remainingTargets = 
+            chooseTarget(src, numOfReplicas, writer, results,
+                false, favoriteAndExcludedNodes, blocksize);
+        for (int i = 0; i < remainingTargets.length; i++) {
+          results.add(remainingTargets[i]);
+        }
+      }
+      return results.toArray(new DatanodeDescriptor[results.size()]);
+    } catch (NotEnoughReplicasException nr) {
+      // Fall back to regular block placement disregarding favored nodes hint
+      return chooseTarget(src, numOfReplicas, writer, 
+          new ArrayList<DatanodeDescriptor>(numOfReplicas), false, 
+          excludedNodes, blocksize);
+    }
+  }
+
-    int clusterSize = clusterMap.getNumOfLeaves();
-    int totalNumOfReplicas = chosenNodes.size()+numOfReplicas;
-    if (totalNumOfReplicas > clusterSize) {
-      numOfReplicas -= (totalNumOfReplicas-clusterSize);
-      totalNumOfReplicas = clusterSize;
-    }
-      
-    int maxNodesPerRack = 
-      (totalNumOfReplicas-1)/clusterMap.getNumOfRacks()+2;
+    int[] result = getMaxNodesPerRack(chosenNodes, numOfReplicas);
+    numOfReplicas = result[0];
+    int maxNodesPerRack = result[1];
+
+  private int[] getMaxNodesPerRack(List<DatanodeDescriptor> chosenNodes,
+      int numOfReplicas) {
+    int clusterSize = clusterMap.getNumOfLeaves();
+    int totalNumOfReplicas = chosenNodes.size()+numOfReplicas;
+    if (totalNumOfReplicas > clusterSize) {
+      numOfReplicas -= (totalNumOfReplicas-clusterSize);
+      totalNumOfReplicas = clusterSize;
+    }
+    int maxNodesPerRack = (totalNumOfReplicas-1)/clusterMap.getNumOfRacks()+2;
+    return new int[] {numOfReplicas, maxNodesPerRack};
+  }

INS31 INS31 INS78 INS5 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS5 INS42 INS44 INS44 INS8 INS42 INS43 INS85 INS43 INS42 INS39 INS42 INS43 INS42 INS74 INS42 INS39 INS42 INS74 INS42 INS54 INS60 INS21 INS60 INS39 INS85 INS74 INS42 INS39 INS42 MOV60 MOV60 MOV25 MOV60 INS41 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS8 INS12 INS5 INS59 INS7 INS39 INS59 INS43 INS43 INS3 INS42 INS42 INS42 INS42 INS42 INS25 INS60 INS60 INS60 INS24 INS25 INS41 INS44 INS8 INS39 INS85 INS42 INS32 INS42 INS2 INS42 INS2 INS42 INS42 INS5 INS4 INS27 INS8 INS74 INS59 INS74 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS32 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS39 INS85 INS42 INS42 INS27 INS27 INS41 INS43 INS43 INS43 INS42 INS16 INS43 INS43 INS42 INS14 INS42 INS27 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS25 INS21 INS32 INS42 INS21 INS60 INS24 INS42 INS42 INS3 INS42 INS32 INS42 INS33 INS32 INS34 INS32 INS42 INS42 INS42 INS27 INS14 INS14 INS42 INS42 INS74 INS27 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS7 INS5 INS59 INS58 INS27 INS37 INS8 INS5 INS32 INS42 INS42 INS42 INS42 INS14 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS9 INS42 INS42 INS42 INS33 INS74 INS74 INS42 INS43 INS43 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS18 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS43 INS85 INS42 INS42 INS74 INS42 INS74 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS34 INS32 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS27 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42