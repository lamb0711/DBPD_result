Revert "HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang."

This reverts commit de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5.

-  public final Map<String, LightWeightLinkedSet<BlockInfo>> excessReplicateMap =
-    new TreeMap<>();
+  public final Map<String, LightWeightLinkedSet<Block>> excessReplicateMap =
+    new TreeMap<String, LightWeightLinkedSet<Block>>();
-    final List<DatanodeDescriptor> live = new ArrayList<>();
-    final List<DatanodeDescriptor> dead = new ArrayList<>();
+    final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>();
+    final List<DatanodeDescriptor> dead = new ArrayList<DatanodeDescriptor>();
-      new ArrayList<>();
-
+      new ArrayList<DatanodeStorageInfo>();
+    
-    for (DatanodeStorageInfo storage : getStorages(block)) {
+    for (DatanodeStorageInfo storage : blocksMap.getStorages(block)) {
-  public int getDefaultStorageNum(BlockInfo block) {
-    return defaultReplication;
-  }
-
-  public short getMinStorageNum(BlockInfo block) {
-    return minReplication;
-  }
-
-   * @return true if the block has minimum stored copies
+   * @return true if the block has minimum replicas
-  public boolean hasMinStorage(BlockInfo block) {
-    return hasMinStorage(block, countNodes(block).liveReplicas());
-  }
-
-  public boolean hasMinStorage(BlockInfo block, int liveNum) {
-    return liveNum >= getMinStorageNum(block);
+  public boolean checkMinReplication(BlockInfo block) {
+    return (countNodes(block).liveReplicas() >= minReplication);
-    if (block.getBlockUCState() == BlockUCState.COMMITTED) {
+    if (block.getBlockUCState() == BlockUCState.COMMITTED)
-    }
-    if (commitBlock == null) {
+    if(commitBlock == null)
-    }
-    if (lastBlock == null) {
+    if(lastBlock == null)
-    }
-    if (lastBlock.isComplete()) {
+    if(lastBlock.isComplete())
-    }
-
+    
-    if(hasMinStorage(lastBlock)) {
+    if(countNodes(lastBlock).liveReplicas() >= minReplication)
-    }
-    if (blkIndex < 0) {
+    if(blkIndex < 0)
-    }
-    if(curBlock.isComplete()) {
+    if(curBlock.isComplete())
-    }
-    if (!force && !hasMinStorage(curBlock, numNodes)) {
+    if (!force && numNodes < minReplication)
-    }
-    if(!force && ucBlock.getBlockUCState() != BlockUCState.COMMITTED) {
+    if(!force && ucBlock.getBlockUCState() != BlockUCState.COMMITTED)
-    }
-        hasMinStorage(oldBlock, targets.length) ? -1 : 0,
+        targets.length >= minReplication ? -1 : 0,
-        = new ArrayList<>(blocksMap.numNodes(block));
-    for(DatanodeStorageInfo storage : getStorages(block)) {
+        = new ArrayList<DatanodeStorageInfo>(blocksMap.numNodes(block));
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(block)) {
-    int curBlk;
+    int curBlk = 0;
-      return Collections.emptyList();
+      return Collections.<LocatedBlock>emptyList();
-    List<LocatedBlock> results = new ArrayList<>(blocks.length);
+    List<LocatedBlock> results = new ArrayList<LocatedBlock>(blocks.length);
-    int curBlk;
+    int curBlk = 0;
-  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)
-      throws IOException {
+  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos
+      ) throws IOException {
-      final ExtendedBlock eb =
-          new ExtendedBlock(namesystem.getBlockPoolId(), blk);
+      final ExtendedBlock eb = new ExtendedBlock(namesystem.getBlockPoolId(), blk);
-      for(DatanodeStorageInfo storage : getStorages(blk)) {
+      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {
-        if (isCorrupt || (!replicaCorrupt)) {
+        if (isCorrupt || (!replicaCorrupt))
-        }
-    List<BlockWithLocations> results = new ArrayList<>();
+    List<BlockWithLocations> results = new ArrayList<BlockWithLocations>();
-    final Iterator<BlockInfo> it = node.getBlockIterator();
+    final Iterator<? extends Block> it = node.getBlockIterator();
-    final Iterator<BlockInfo> it = storageInfo.getBlockIterator();
+    final Iterator<? extends Block> it = storageInfo.getBlockIterator();
-      BlockInfo block = it.next();
+      Block block = it.next();
-  private void addToInvalidates(BlockInfo storedBlock) {
+  private void addToInvalidates(Block b) {
-    for(DatanodeStorageInfo storage : blocksMap.getStorages(storedBlock,
-        State.NORMAL)) {
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(b, State.NORMAL)) {
-      invalidateBlocks.add(storedBlock, node, false);
+      invalidateBlocks.add(b, node, false);
-      blockLog.debug("BLOCK* addToInvalidates: {} {}", storedBlock,
+      blockLog.debug("BLOCK* addToInvalidates: {} {}", b,
-    final Block reportedBlock = blk.getLocalBlock();
-    final BlockInfo storedBlock = getStoredBlock(reportedBlock);
+    final BlockInfo storedBlock = getStoredBlock(blk.getLocalBlock());
-
-    markBlockAsCorrupt(new BlockToMarkCorrupt(reportedBlock, storedBlock,
+    
+    markBlockAsCorrupt(new BlockToMarkCorrupt(storedBlock,
-    if (b.stored.isDeleted()) {
+    if (b.corrupted.isDeleted()) {
-        getExpectedReplicaNum(b.stored.getBlockCollection(), b.stored);
+        b.corrupted.getBlockCollection().getPreferredBlockReplication();
-      storageInfo.addBlock(b.stored, b.corrupted);
+      storageInfo.addBlock(b.stored);
-    boolean minReplicationSatisfied = hasMinStorage(b.stored,
-        numberOfReplicas.liveReplicas());
+    boolean minReplicationSatisfied =
+        numberOfReplicas.liveReplicas() >= minReplication;
-    List<ReplicationWork> work = new LinkedList<>();
+    List<ReplicationWork> work = new LinkedList<ReplicationWork>();
-            requiredReplication = getExpectedReplicaNum(bc, block);
+            requiredReplication = bc.getPreferredBlockReplication();
-            containingNodes = new ArrayList<>();
-            List<DatanodeStorageInfo> liveReplicaNodes = new ArrayList<>();
+            containingNodes = new ArrayList<DatanodeDescriptor>();
+            List<DatanodeStorageInfo> liveReplicaNodes = new ArrayList<DatanodeStorageInfo>();
-                   (blockHasEnoughRacks(block, requiredReplication)) ) {
+                   (blockHasEnoughRacks(block)) ) {
-    final Set<Node> excludedNodes = new HashSet<>();
+    final Set<Node> excludedNodes = new HashSet<Node>();
-          requiredReplication = getExpectedReplicaNum(bc, block);
+          requiredReplication = bc.getPreferredBlockReplication();
-                 (blockHasEnoughRacks(block, requiredReplication)) ) {
+                 (blockHasEnoughRacks(block)) ) {
-               (!blockHasEnoughRacks(block, requiredReplication)) ) {
+               (!blockHasEnoughRacks(block)) ) {
-      datanodeDescriptors = new ArrayList<>(nodes.size());
+      datanodeDescriptors = new ArrayList<DatanodeDescriptor>(nodes.size());
-    for(DatanodeStorageInfo storage : getStorages(block)) {
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(block)) {
-      LightWeightLinkedSet<BlockInfo> excessBlocks =
+      LightWeightLinkedSet<Block> excessBlocks =
-          BlockInfo bi = getStoredBlock(timedOutItems[i]);
+          BlockInfo bi = blocksMap.getStoredBlock(timedOutItems[i]);
-
+    
-
-  private static class BlockInfoToAdd {
-    private final BlockInfo stored;
-    private final Block reported;
-
-    BlockInfoToAdd(BlockInfo stored, Block reported) {
-      this.stored = stored;
-      this.reported = reported;
-    }
-
-    public BlockInfo getStored() {
-      return stored;
-    }
-
-    public Block getReported() {
-      return reported;
-    }
-  }
-
+  
-    /** The corrupted block in a datanode. This is the one reported by the
-     * datanode.
-     */
-    final Block corrupted;
+    /** The corrupted block in a datanode. */
+    final BlockInfo corrupted;
-    BlockToMarkCorrupt(Block corrupted,
+    BlockToMarkCorrupt(BlockInfo corrupted,
-    BlockToMarkCorrupt(Block corrupted, BlockInfo stored, long gs,
-        String reason, Reason reasonCode) {
-      this(corrupted, stored, reason, reasonCode);
+    BlockToMarkCorrupt(BlockInfo stored, String reason,
+        Reason reasonCode) {
+      this(stored, stored, reason, reasonCode);
+    }
+
+    BlockToMarkCorrupt(BlockInfo stored, long gs, String reason,
+        Reason reasonCode) {
+      this(new BlockInfoContiguous(stored), stored,
+          reason, reasonCode);
-        BlockInfo bi = getStoredBlock(b);
+        BlockInfo bi = blocksMap.getStoredBlock(b);
-
+  
-    Collection<BlockInfoToAdd> toAdd = new LinkedList<>();
-    Collection<BlockInfo> toRemove = new TreeSet<>();
-    Collection<Block> toInvalidate = new LinkedList<>();
-    Collection<BlockToMarkCorrupt> toCorrupt = new LinkedList<>();
-    Collection<StatefulBlockInfo> toUC = new LinkedList<>();
+    Collection<BlockInfo> toAdd = new LinkedList<BlockInfo>();
+    Collection<Block> toRemove = new TreeSet<Block>();
+    Collection<Block> toInvalidate = new LinkedList<Block>();
+    Collection<BlockToMarkCorrupt> toCorrupt = new LinkedList<BlockToMarkCorrupt>();
+    Collection<StatefulBlockInfo> toUC = new LinkedList<StatefulBlockInfo>();
-
+   
-    for (StatefulBlockInfo b : toUC) {
+    for (StatefulBlockInfo b : toUC) { 
-    for (BlockInfo b : toRemove) {
+    for (Block b : toRemove) {
-    for (BlockInfoToAdd b : toAdd) {
-      addStoredBlock(b.getStored(), b.getReported(), storageInfo, null,
-          numBlocksLogged < maxNumBlocksToLog);
+    for (BlockInfo b : toAdd) {
+      addStoredBlock(b, storageInfo, null, numBlocksLogged < maxNumBlocksToLog);
-  public void markBlockReplicasAsCorrupt(Block oldBlock, BlockInfo block,
-      long oldGenerationStamp, long oldNumBytes,
+  public void markBlockReplicasAsCorrupt(BlockInfo block,
+      long oldGenerationStamp, long oldNumBytes, 
-      b = new BlockToMarkCorrupt(oldBlock, block, oldGenerationStamp,
+      b = new BlockToMarkCorrupt(block, oldGenerationStamp,
-      b = new BlockToMarkCorrupt(oldBlock, block,
+      b = new BlockToMarkCorrupt(block,
-      BlockInfo storedBlock = getStoredBlock(iblk);
+      BlockInfo storedBlock = blocksMap.getStoredBlock(iblk);
-        addStoredBlockImmediate(storedBlock, iblk, storageInfo);
+        addStoredBlockImmediate(storedBlock, storageInfo);
-  private void reportDiff(DatanodeStorageInfo storageInfo,
-      BlockListAsLongs newReport,
-      Collection<BlockInfoToAdd> toAdd,     // add to DatanodeDescriptor
-      Collection<BlockInfo> toRemove,       // remove from DatanodeDescriptor
+  private void reportDiff(DatanodeStorageInfo storageInfo, 
+      BlockListAsLongs newReport, 
+      Collection<BlockInfo> toAdd,              // add to DatanodeDescriptor
+      Collection<Block> toRemove,           // remove from DatanodeDescriptor
-    // place a delimiter in the list which separates blocks
+    // place a delimiter in the list which separates blocks 
-    Block delimiterBlock = new Block();
-    BlockInfo delimiter = new BlockInfoContiguous(delimiterBlock,
-        (short) 1);
-    AddBlockResult result = storageInfo.addBlock(delimiter, delimiterBlock);
-    assert result == AddBlockResult.ADDED
+    BlockInfo delimiter = new BlockInfoContiguous(new Block(), (short) 1);
+    AddBlockResult result = storageInfo.addBlock(delimiter);
+    assert result == AddBlockResult.ADDED 
-        headIndex =
-            storageInfo.moveBlockToHead(storedBlock, curIndex, headIndex);
+        headIndex = storageInfo.moveBlockToHead(storedBlock, curIndex, headIndex);
-    while (it.hasNext()) {
+    while(it.hasNext())
-    }
-      final Block block, final ReplicaState reportedState,
-      final Collection<BlockInfoToAdd> toAdd,
-      final Collection<Block> toInvalidate,
+      final Block block, final ReplicaState reportedState, 
+      final Collection<BlockInfo> toAdd,
+      final Collection<Block> toInvalidate, 
-
+    
-
+  
-
+    
-    BlockInfo storedBlock = getStoredBlock(block);
+    BlockInfo storedBlock = blocksMap.getStoredBlock(block);
-
+    
-        corruptReplicas.isReplicaCorrupt(storedBlock, dn))) {
-      toAdd.add(new BlockInfoToAdd(storedBlock, block));
+            corruptReplicas.isReplicaCorrupt(storedBlock, dn))) {
+      toAdd.add(storedBlock);
-        removeStoredBlock(getStoredBlock(rbi.getBlock()),
+        removeStoredBlock(rbi.getBlock(),
-          return new BlockToMarkCorrupt(new Block(reported), storedBlock, reportedGS,
+          return new BlockToMarkCorrupt(storedBlock, reportedGS,
-                  + " does not match genstamp in block map "
-                  + storedBlock.getGenerationStamp(), Reason.GENSTAMP_MISMATCH);
+              + " does not match genstamp in block map "
+              + storedBlock.getGenerationStamp(), Reason.GENSTAMP_MISMATCH);
-          return new BlockToMarkCorrupt(new Block(reported), storedBlock,
+          return new BlockToMarkCorrupt(storedBlock,
-                  reported.getNumBytes() + " does not match " +
-                  "length in block map " + storedBlock.getNumBytes(),
+              reported.getNumBytes() + " does not match " +
+              "length in block map " + storedBlock.getNumBytes(),
-          return new BlockToMarkCorrupt(new Block(reported), storedBlock,
-              reportedGS, "block is " + ucState + " and reported state "
-              + reportedState + ", But reported genstamp " + reportedGS
+          return new BlockToMarkCorrupt(storedBlock, reportedGS, "block is "
+              + ucState + " and reported state " + reportedState
+              + ", But reported genstamp " + reportedGS
-              + storedBlock.getGenerationStamp(),
-              Reason.GENSTAMP_MISMATCH);
+              + storedBlock.getGenerationStamp(), Reason.GENSTAMP_MISMATCH);
-      } else if (storedBlock.getGenerationStamp() !=
-          reported.getGenerationStamp()) {
+      } else if (storedBlock.getGenerationStamp() != reported.getGenerationStamp()) {
-        return new BlockToMarkCorrupt(
-            new Block(reported), storedBlock, reportedGS,
-            "reported " + reportedState +
-                " replica with genstamp " + reportedGS +
-                " does not match COMPLETE block's genstamp in block map " +
-                storedBlock.getGenerationStamp(), Reason.GENSTAMP_MISMATCH);
+        return new BlockToMarkCorrupt(storedBlock, reportedGS,
+            "reported " + reportedState + " replica with genstamp " + reportedGS
+            + " does not match COMPLETE block's genstamp in block map "
+            + storedBlock.getGenerationStamp(), Reason.GENSTAMP_MISMATCH);
-          return new BlockToMarkCorrupt(new Block(reported), storedBlock,
+          return new BlockToMarkCorrupt(storedBlock,
-      return new BlockToMarkCorrupt(new Block(reported), storedBlock, msg,
-          Reason.INVALID_STATE);
+      return new BlockToMarkCorrupt(storedBlock, msg, Reason.INVALID_STATE);
-      addStoredBlock(block, ucBlock.reportedBlock, storageInfo, null, true);
+      addStoredBlock(block, storageInfo, null, true);
-  private void addStoredBlockImmediate(BlockInfo storedBlock, Block reported,
+  private void addStoredBlockImmediate(BlockInfo storedBlock,
-      throws IOException {
+  throws IOException {
-    if (!namesystem.isInStartupSafeMode()
+    if (!namesystem.isInStartupSafeMode() 
-      addStoredBlock(storedBlock, reported, storageInfo, null, false);
+      addStoredBlock(storedBlock, storageInfo, null, false);
-    AddBlockResult result = storageInfo.addBlock(storedBlock, reported);
+    AddBlockResult result = storageInfo.addBlock(storedBlock);
-        && hasMinStorage(storedBlock, numCurrentReplica)) {
+        && numCurrentReplica >= minReplication) {
-   * @return the block that is stored in blocksMap.
+   * @return the block that is stored in blockMap.
-      final Block reportedBlock,
-      DatanodeStorageInfo storageInfo,
-      DatanodeDescriptor delNodeHint,
-      boolean logEveryBlock)
-      throws IOException {
+                               DatanodeStorageInfo storageInfo,
+                               DatanodeDescriptor delNodeHint,
+                               boolean logEveryBlock)
+  throws IOException {
-      storedBlock = getStoredBlock(block);
+      storedBlock = blocksMap.getStoredBlock(block);
+    assert bc != null : "Block must belong to a file";
-    AddBlockResult result = storageInfo.addBlock(storedBlock, reportedBlock);
+    AddBlockResult result = storageInfo.addBlock(storedBlock);
-        + pendingReplications.getNumReplicas(storedBlock);
+      + pendingReplications.getNumReplicas(storedBlock);
-        hasMinStorage(storedBlock, numLiveReplicas)) {
+        numLiveReplicas >= minReplication) {
-
+    
-    short fileReplication = getExpectedReplicaNum(bc, storedBlock);
+    short fileReplication = bc.getPreferredBlockReplication();
-          storedBlock + ". blockMap has " + numCorruptNodes +
+          storedBlock + "blockMap has " + numCorruptNodes + 
-    if ((corruptReplicasCount > 0) && (numLiveReplicas >= fileReplication)) {
-      invalidateCorruptReplicas(storedBlock, reportedBlock);
-    }
+    if ((corruptReplicasCount > 0) && (numLiveReplicas >= fileReplication))
+      invalidateCorruptReplicas(storedBlock);
-  private void invalidateCorruptReplicas(BlockInfo blk, Block reported) {
+  private void invalidateCorruptReplicas(BlockInfo blk) {
-        if (!invalidateBlock(new BlockToMarkCorrupt(reported, blk, null,
-            Reason.ANY), node)) {
+        if (!invalidateBlock(new BlockToMarkCorrupt(blk, null,
+              Reason.ANY), node)) {
-        getExpectedReplicaNum(block.getBlockCollection(), block);
+        block.getBlockCollection().getPreferredBlockReplication();
-  private void processOverReplicatedBlock(final BlockInfo block,
+  private void processOverReplicatedBlock(final Block block,
-    Collection<DatanodeStorageInfo> nonExcess = new ArrayList<>();
+    Collection<DatanodeStorageInfo> nonExcess = new ArrayList<DatanodeStorageInfo>();
-      LightWeightLinkedSet<BlockInfo> excessBlocks = excessReplicateMap.get(
-          cur.getDatanodeUuid());
+      LightWeightLinkedSet<Block> excessBlocks = excessReplicateMap.get(cur
+          .getDatanodeUuid());
-    chooseExcessReplicates(nonExcess, block, replication,
+    chooseExcessReplicates(nonExcess, block, replication, 
-  private void chooseExcessReplicates(
-      final Collection<DatanodeStorageInfo> nonExcess,
-      BlockInfo storedBlock, short replication,
-      DatanodeDescriptor addedNode,
-      DatanodeDescriptor delNodeHint,
-      BlockPlacementPolicy replicator) {
+  private void chooseExcessReplicates(final Collection<DatanodeStorageInfo> nonExcess, 
+                              Block b, short replication,
+                              DatanodeDescriptor addedNode,
+                              DatanodeDescriptor delNodeHint,
+                              BlockPlacementPolicy replicator) {
-    BlockCollection bc = getBlockCollection(storedBlock);
-    final BlockStoragePolicy storagePolicy = storagePolicySuite.getPolicy(
-        bc.getStoragePolicyID());
+    BlockCollection bc = getBlockCollection(b);
+    final BlockStoragePolicy storagePolicy = storagePolicySuite.getPolicy(bc.getStoragePolicyID());
-    final Map<String, List<DatanodeStorageInfo>> rackMap = new HashMap<>();
-    final List<DatanodeStorageInfo> moreThanOne = new ArrayList<>();
-    final List<DatanodeStorageInfo> exactlyOne = new ArrayList<>();
+    final Map<String, List<DatanodeStorageInfo>> rackMap
+        = new HashMap<String, List<DatanodeStorageInfo>>();
+    final List<DatanodeStorageInfo> moreThanOne = new ArrayList<DatanodeStorageInfo>();
+    final List<DatanodeStorageInfo> exactlyOne = new ArrayList<DatanodeStorageInfo>();
+    
-
+    
-        cur = replicator.chooseReplicaToDelete(bc, storedBlock, replication,
+        cur = replicator.chooseReplicaToDelete(bc, b, replication,
-      processChosenExcessReplica(nonExcess, cur, storedBlock);
-    }
-  }
+      nonExcess.remove(cur);
+      addToExcessReplicate(cur.getDatanodeDescriptor(), b);
-  private void processChosenExcessReplica(
-      final Collection<DatanodeStorageInfo> nonExcess,
-      final DatanodeStorageInfo chosen, BlockInfo storedBlock) {
-    nonExcess.remove(chosen);
-    addToExcessReplicate(chosen.getDatanodeDescriptor(), storedBlock);
-    //
-    // The 'excessblocks' tracks blocks until we get confirmation
-    // that the datanode has deleted them; the only way we remove them
-    // is when we get a "removeBlock" message.
-    //
-    // The 'invalidate' list is used to inform the datanode the block
-    // should be deleted.  Items are removed from the invalidate list
-    // upon giving instructions to the datanodes.
-    //
-    addToInvalidates(storedBlock, chosen.getDatanodeDescriptor());
-    blockLog.debug("BLOCK* chooseExcessReplicates: "
-        +"({}, {}) is added to invalidated blocks set", chosen, storedBlock);
+      //
+      // The 'excessblocks' tracks blocks until we get confirmation
+      // that the datanode has deleted them; the only way we remove them
+      // is when we get a "removeBlock" message.  
+      //
+      // The 'invalidate' list is used to inform the datanode the block 
+      // should be deleted.  Items are removed from the invalidate list
+      // upon giving instructions to the namenode.
+      //
+      addToInvalidates(b, cur.getDatanodeDescriptor());
+      blockLog.debug("BLOCK* chooseExcessReplicates: "
+                +"({}, {}) is added to invalidated blocks set", cur, b);
+    }
-  private void addToExcessReplicate(DatanodeInfo dn, BlockInfo storedBlock) {
+  private void addToExcessReplicate(DatanodeInfo dn, Block block) {
-    LightWeightLinkedSet<BlockInfo> excessBlocks = excessReplicateMap.get(
-        dn.getDatanodeUuid());
+    LightWeightLinkedSet<Block> excessBlocks = excessReplicateMap.get(dn.getDatanodeUuid());
-      excessBlocks = new LightWeightLinkedSet<>();
+      excessBlocks = new LightWeightLinkedSet<Block>();
-    if (excessBlocks.add(storedBlock)) {
+    if (excessBlocks.add(block)) {
-          + " excessReplicateMap", dn, storedBlock);
+          + " excessReplicateMap", dn, block);
-    removeStoredBlock(getStoredBlock(block), node);
+    removeStoredBlock(block, node);
-  public void removeStoredBlock(BlockInfo storedBlock,
-      DatanodeDescriptor node) {
-    blockLog.debug("BLOCK* removeStoredBlock: {} from {}", storedBlock, node);
+  public void removeStoredBlock(Block block, DatanodeDescriptor node) {
+    blockLog.debug("BLOCK* removeStoredBlock: {} from {}", block, node);
+      BlockInfo storedBlock = getStoredBlock(block);
-            " removed from node {}", storedBlock, node);
+            " removed from node {}", block, node);
-          .get(new CachedBlock(storedBlock.getBlockId(), (short) 0, false));
+          .get(new CachedBlock(block.getBlockId(), (short) 0, false));
-              + "related lists on node {}", storedBlock, node);
+              + "related lists on node {}", block, node);
-      BlockCollection bc = storedBlock.getBlockCollection();
+      BlockCollection bc = blocksMap.getBlockCollection(block);
-      LightWeightLinkedSet<BlockInfo> excessBlocks = excessReplicateMap.get(
-          node.getDatanodeUuid());
+      LightWeightLinkedSet<Block> excessBlocks = excessReplicateMap.get(node
+          .getDatanodeUuid());
-        if (excessBlocks.remove(storedBlock)) {
+        if (excessBlocks.remove(block)) {
-              "excessBlocks", storedBlock);
+              "excessBlocks", block);
-      corruptReplicas.removeFromCorruptReplicasMap(storedBlock, node);
+      corruptReplicas.removeFromCorruptReplicasMap(block, node);
-  private long addBlock(BlockInfo block, List<BlockWithLocations> results) {
+  private long addBlock(Block block, List<BlockWithLocations> results) {
-
+  
-    Collection<BlockInfoToAdd> toAdd = new LinkedList<>();
-    Collection<Block> toInvalidate = new LinkedList<>();
-    Collection<BlockToMarkCorrupt> toCorrupt = new LinkedList<>();
-    Collection<StatefulBlockInfo> toUC = new LinkedList<>();
+    Collection<BlockInfo> toAdd = new LinkedList<BlockInfo>();
+    Collection<Block> toInvalidate = new LinkedList<Block>();
+    Collection<BlockToMarkCorrupt> toCorrupt = new LinkedList<BlockToMarkCorrupt>();
+    Collection<StatefulBlockInfo> toUC = new LinkedList<StatefulBlockInfo>();
-    processReportedBlock(storageInfo, block, reportedState, toAdd, toInvalidate,
-        toCorrupt, toUC);
+    processReportedBlock(storageInfo, block, reportedState,
+                              toAdd, toInvalidate, toCorrupt, toUC);
-        : "The block should be only in one of the lists.";
+      : "The block should be only in one of the lists.";
-    for (StatefulBlockInfo b : toUC) {
+    for (StatefulBlockInfo b : toUC) { 
-    for (BlockInfoToAdd b : toAdd) {
-      addStoredBlock(b.getStored(), b.getReported(), storageInfo, delHintNode,
-          numBlocksLogged < maxNumBlocksToLog);
+    for (BlockInfo b : toAdd) {
+      addStoredBlock(b, storageInfo, delHintNode, numBlocksLogged < maxNumBlocksToLog);
-        String msg =
+        String msg = 
-        LightWeightLinkedSet<BlockInfo> blocksExcess =
-            excessReplicateMap.get(node.getDatanodeUuid());
+        LightWeightLinkedSet<Block> blocksExcess = excessReplicateMap.get(node
+            .getDatanodeUuid());
-      int expectedReplication = this.getReplication(block);
+      BlockCollection bc = blocksMap.getBlockCollection(block);
+      short expectedReplication = bc.getPreferredBlockReplication();
-        processOverReplicatedBlock(block, (short) expectedReplication, null,
-            null);
+        processOverReplicatedBlock(block, expectedReplication, null, null);
-          " blocks or blocks pending replication. Safe to decommission.",
+          " blocks or blocks pending replication. Safe to decommission.", 
-
-  /** @return an iterator of the datanodes. */
-  public Iterable<DatanodeStorageInfo> getStorages(final Block block) {
-    return blocksMap.getStorages(block);
-  }
-
+        final BlockInfoUnderConstruction uc =
+            (BlockInfoUnderConstruction)b;
-        final int min = getMinStorageNum(b);
-        final BlockUCState state = b.getBlockUCState();
-        LOG.info("BLOCK* " + b + " is not COMPLETE (ucState = " + state
-            + ", replication# = " + numNodes
-            + (numNodes < min ? " < " : " >= ")
-            + " minimum = " + min + ") in file " + src);
+        LOG.info("BLOCK* " + b + " is not COMPLETE (ucState = "
+          + uc.getBlockUCState() + ", replication# = " + numNodes
+          + (numNodes < minReplication ? " < ": " >= ")
+          + " minimum = " + minReplication + ") in file " + src);
-  private int getReplication(BlockInfo block) {
+  private int getReplication(Block block) {
-    return bc == null? 0: getExpectedReplicaNum(bc, block);
+    return bc == null? 0: bc.getPreferredBlockReplication();
-   * Get blocks to invalidate for <i>nodeId</i>.
-   * in {@link #invalidateBlocks}.boolean blockHasEnoughRacks
+   * Get blocks to invalidate for <i>nodeId</i>
+   * in {@link #invalidateBlocks}.
-  boolean blockHasEnoughRacks(BlockInfo storedBlock, int expectedStorageNum) {
+  boolean blockHasEnoughRacks(Block b) {
-    boolean enoughRacks = false;
-    Collection<DatanodeDescriptor> corruptNodes =
-        corruptReplicas.getNodes(storedBlock);
+    boolean enoughRacks = false;;
+    Collection<DatanodeDescriptor> corruptNodes = 
+                                  corruptReplicas.getNodes(b);
+    int numExpectedReplicas = getReplication(b);
-    for(DatanodeStorageInfo storage : getStorages(storedBlock)) {
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(b)) {
-          if (expectedStorageNum == 1 || (expectedStorageNum > 1 &&
-              !datanodeManager.hasClusterEverBeenMultiRack())) {
+          if (numExpectedReplicas == 1 ||
+              (numExpectedReplicas > 1 &&
+                  !datanodeManager.hasClusterEverBeenMultiRack())) {
-  boolean isNeededReplication(BlockInfo storedBlock, int expected,
-      int current) {
-    return current < expected || !blockHasEnoughRacks(storedBlock, expected);
-  }
-
-  public short getExpectedReplicaNum(BlockCollection bc, BlockInfo block) {
-    return bc.getPreferredBlockReplication();
+  boolean isNeededReplication(Block b, int expected, int current) {
+    return current < expected || !blockHasEnoughRacks(b);
+  /** @return an iterator of the datanodes. */
+  public Iterable<DatanodeStorageInfo> getStorages(final Block block) {
+    return blocksMap.getStorages(block);
+  }
+
-    for (DatanodeStorageInfo info : getStorages(block)) {
+    for (DatanodeStorageInfo info : blocksMap.getStorages(block)) {
-      LightWeightLinkedSet<BlockInfo> excessReplicas =
-          excessReplicateMap.get(uuid);
+      LightWeightLinkedSet<Block> excessReplicas = excessReplicateMap.get(uuid);
-   * {@link BlockManager#processMisReplicatedBlock}.
+   * {@link BlockManager#processMisReplicatedBlock(BlockInfo)}.

MOV31 MOV44 UPD74 MOV60 UPD42 INS31 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 UPD74 MOV43 UPD42 MOV43 INS42 MOV44 INS44 INS44 INS8 INS8 UPD42 UPD74 UPD42 UPD74 INS60 INS6 INS60 UPD43 MOV43 INS42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 MOV43 INS42 INS20 INS60 MOV43 INS42 UPD43 UPD74 UPD66 INS36 MOV41 MOV41 MOV41 MOV41 INS27 MOV21 INS41 MOV41 MOV53 MOV53 UPD74 UPD74 UPD42 MOV42 MOV43 MOV43 INS43 INS42 INS43 INS42 INS17 INS17 MOV21 MOV74 INS74 MOV74 MOV74 MOV74 INS44 MOV44 UPD43 MOV21 UPD43 MOV43 INS59 MOV43 UPD66 INS27 INS45 MOV43 MOV59 INS21 UPD42 UPD42 UPD74 UPD42 MOV60 UPD42 UPD74 MOV74 MOV74 UPD74 UPD42 UPD66 UPD66 INS39 INS59 UPD42 INS43 INS74 UPD42 UPD42 INS42 INS27 INS32 INS42 MOV33 INS27 INS42 INS34 INS34 INS76 INS76 UPD42 UPD42 INS32 UPD40 INS27 INS42 UPD66 INS42 INS42 INS42 INS42 INS42 INS42 INS14 MOV42 MOV42 MOV42 UPD42 INS43 INS43 UPD42 UPD42 UPD43 MOV43 UPD42 MOV43 INS42 UPD42 UPD42 INS42 INS32 INS27 INS42 INS33 INS27 MOV32 MOV42 UPD42 UPD42 INS21 INS21 INS21 MOV43 UPD42 MOV42 UPD42 UPD74 MOV74 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 INS60 INS42 INS32 INS42 UPD42 INS42 INS68 INS42 INS43 INS43 UPD74 UPD74 UPD74 MOV32 INS42 INS32 INS42 INS42 INS42 INS27 UPD74 INS43 UPD74 UPD74 MOV43 MOV43 MOV43 INS42 MOV32 INS42 MOV32 INS42 UPD74 UPD74 UPD74 INS43 INS42 UPD74 INS42 INS42 UPD74 UPD74 UPD74 MOV42 MOV42 UPD74 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD74 UPD74 UPD42 UPD74 UPD74 UPD74 INS32 INS32 INS32 MOV43 UPD42 UPD42 UPD74 MOV74 UPD74 UPD74 UPD42 UPD74 UPD42 INS43 INS59 UPD39 MOV60 UPD42 UPD42 INS42 INS42 UPD74 INS42 INS42 INS69 INS42 INS42 INS43 INS43 INS43 UPD42 MOV42 MOV42 INS40 INS42 INS43 INS42 INS43 INS42 INS43 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 UPD40 INS43 INS43 MOV43 UPD42 MOV42 MOV43 MOV43 MOV43 INS43 INS43 MOV42 INS42 INS43 MOV43 INS43 INS74 INS43 MOV43 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 UPD42 INS32 INS42 INS42 MOV27 INS42 INS42 MOV14 UPD42 UPD42 INS42 MOV43 INS43 INS43 INS43 MOV42 INS42 INS42 INS32 UPD42 INS43 MOV43 INS42 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 UPD74 INS42 INS42 INS42 MOV32 INS42 UPD45 INS42 INS42 INS43 INS43 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS74 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 UPD43 INS42 INS43 UPD42 MOV32 INS42 INS42 INS43 MOV43 UPD42 INS42 UPD42 UPD42 INS11 INS42 INS42 UPD42 INS42 UPD42 UPD42 UPD74 INS43 INS42 INS32 UPD42 UPD43 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 MOV14 MOV14 UPD42 UPD42 UPD74 UPD74 UPD42 INS43 INS43 INS42 INS42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL8 DEL8 DEL8 DEL8 DEL32 DEL8 DEL41 DEL8 DEL8 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL8 DEL42 DEL42 DEL40 DEL32 DEL8 DEL43 DEL43 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL40 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL83 DEL42 DEL83 DEL83 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL55 DEL66 DEL42 DEL44 DEL42 DEL17 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL8 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL42 DEL14 DEL42 DEL14 DEL42 DEL14 DEL42 DEL14 DEL42 DEL14 DEL40 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL83 DEL42 DEL44 DEL42 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL83 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL74 DEL42 DEL32 DEL42 DEL42 DEL32 DEL52 DEL39 DEL42 DEL11 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL41 DEL8 DEL31 DEL42 DEL42 DEL67