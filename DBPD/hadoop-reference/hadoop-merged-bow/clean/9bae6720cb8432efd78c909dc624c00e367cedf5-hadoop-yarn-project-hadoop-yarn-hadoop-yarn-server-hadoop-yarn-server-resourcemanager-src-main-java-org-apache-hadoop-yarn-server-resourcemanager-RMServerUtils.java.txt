YARN-6050. AMs can't be scheduled on racks or nodes (rkanter)

+import java.util.Collections;
+import java.util.Iterator;
+import com.google.common.collect.Sets;
+import org.apache.hadoop.yarn.api.records.NodeId;
-   * @param amreq am resource request
+   * @param amReqs am resource requests
-      Configuration conf, ResourceRequest amreq) {
-    if (YarnConfiguration.areNodeLabelsEnabled(conf)) {
-      RMNodeLabelsManager labelManager = rmContext.getNodeLabelManager();
-      String amNodeLabelExpression = amreq.getNodeLabelExpression();
-      amNodeLabelExpression = (amNodeLabelExpression == null
-          || amNodeLabelExpression.trim().isEmpty())
-              ? RMNodeLabelsManager.NO_LABEL : amNodeLabelExpression;
-      return labelManager.getActiveNMCountPerLabel(amNodeLabelExpression);
+      Configuration conf, List<ResourceRequest> amReqs) {
+    // Determine the list of nodes that are eligible based on the strict
+    // resource requests
+    Set<NodeId> nodesForReqs = new HashSet<>();
+    for (ResourceRequest amReq : amReqs) {
+      if (amReq.getRelaxLocality() &&
+          !amReq.getResourceName().equals(ResourceRequest.ANY)) {
+        nodesForReqs.addAll(
+            rmContext.getScheduler().getNodeIds(amReq.getResourceName()));
+      }
-    return rmContext.getScheduler().getNumClusterNodes();
+
+    if (YarnConfiguration.areNodeLabelsEnabled(conf)) {
+      // Determine the list of nodes that are eligible based on the node label
+      String amNodeLabelExpression = amReqs.get(0).getNodeLabelExpression();
+      Set<NodeId> nodesForLabels =
+          getNodeIdsForLabel(rmContext, amNodeLabelExpression);
+      if (nodesForLabels != null && !nodesForLabels.isEmpty()) {
+        // If only node labels, strip out any wildcard NodeIds and return
+        if (nodesForReqs.isEmpty()) {
+          for (Iterator<NodeId> it = nodesForLabels.iterator(); it.hasNext();) {
+            if (it.next().getPort() == 0) {
+              it.remove();
+            }
+          }
+          return nodesForLabels.size();
+        } else {
+          // The NodeIds common to both the strict resource requests and the
+          // node label is the eligible set
+          return Sets.intersection(nodesForReqs, nodesForLabels).size();
+        }
+      }
+    }
+
+    // If no strict resource request NodeIds nor node label NodeIds, then just
+    // return the entire cluster
+    if (nodesForReqs.isEmpty()) {
+      return rmContext.getScheduler().getNumClusterNodes();
+    }
+    // No node label NodeIds, so return the strict resource request NodeIds
+    return nodesForReqs.size();
+  }
+
+  private static Set<NodeId> getNodeIdsForLabel(RMContext rmContext,
+      String label) {
+    label = (label == null || label.trim().isEmpty())
+        ? RMNodeLabelsManager.NO_LABEL : label;
+    if (label.equals(RMNodeLabelsManager.NO_LABEL)) {
+      // NO_LABEL nodes aren't tracked directly
+      return rmContext.getNodeLabelManager().getNodesWithoutALabel();
+    } else {
+      Map<String, Set<NodeId>> labelsToNodes =
+          rmContext.getNodeLabelManager().getLabelsToNodes(
+              Collections.singleton(label));
+      return labelsToNodes.get(label);
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 MOV29 MOV83 MOV83 MOV39 MOV42 MOV44 MOV44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS74 INS42 MOV60 INS70 INS25 INS25 INS41 INS43 INS43 INS43 INS42 INS43 INS42 MOV21 INS25 UPD42 UPD66 INS43 INS43 INS74 MOV44 INS42 INS8 MOV32 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS43 INS43 UPD42 INS14 UPD42 INS25 MOV60 INS60 INS25 INS42 INS42 MOV41 INS42 INS42 UPD42 INS42 INS42 INS40 INS41 INS60 MOV41 INS42 UPD42 MOV42 INS74 INS27 INS8 INS74 INS59 INS27 INS8 UPD42 INS32 INS74 INS59 INS43 INS32 INS38 INS21 INS43 INS43 INS42 INS32 INS27 INS38 INS25 INS32 INS42 INS43 INS43 INS74 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS43 MOV32 INS42 INS32 INS32 INS42 INS40 INS42 INS42 INS32 UPD42 MOV42 INS42 INS34 INS42 INS42 INS42 INS42 INS24 INS41 INS41 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS58 INS32 INS8 INS32 INS32 UPD42 INS42 INS42 INS42 INS42 INS74 INS59 INS42 INS42 INS25 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS21 INS32 INS42 INS32 INS42 INS42 INS42 INS42 DEL43 DEL8 DEL25 DEL8 DEL31