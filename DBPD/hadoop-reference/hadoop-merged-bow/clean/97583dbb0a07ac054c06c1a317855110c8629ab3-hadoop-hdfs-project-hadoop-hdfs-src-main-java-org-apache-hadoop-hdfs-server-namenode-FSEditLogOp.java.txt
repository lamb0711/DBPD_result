Merge from trunk to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1603993 13f79535-47bb-0310-9956-ffa450edef68

+  private static List<XAttr> readXAttrsFromEditLog(DataInputStream in,
+      int logVersion) throws IOException {
+    if (!NameNodeLayoutVersion.supports(NameNodeLayoutVersion.Feature.XATTRS,
+        logVersion)) {
+      return null;
+    }
+    XAttrEditLogProto proto = XAttrEditLogProto.parseDelimitedFrom(in);
+    return PBHelper.convertXAttrs(proto.getXAttrsList());
+  }
+
+    List<XAttr> xAttrs;
+    <T extends AddCloseOp> T setXAttrs(List<XAttr> xAttrs) {
+      this.xAttrs = xAttrs;
+      return (T)this;
+    }
+
+        XAttrEditLogProto.Builder b = XAttrEditLogProto.newBuilder();
+        b.addAllXAttrs(PBHelper.convertXAttrProto(xAttrs));
+        b.build().writeDelimitedTo(out);
-      // clientname, clientMachine and block locations of last block.
+        this.xAttrs = readXAttrsFromEditLog(in, logVersion);
+    List<XAttr> xAttrs;
+    MkdirOp setXAttrs(List<XAttr> xAttrs) {
+      this.xAttrs = xAttrs;
+      return this;
+    }
+
+      XAttrEditLogProto.Builder b = XAttrEditLogProto.newBuilder();
+      b.addAllXAttrs(PBHelper.convertXAttrProto(xAttrs));
+      b.build().writeDelimitedTo(out);
+
+      xAttrs = readXAttrsFromEditLog(in, logVersion);
+      builder.append(", xAttrs=");
+      builder.append(xAttrs);
+      if (xAttrs != null) {
+        appendXAttrsToXml(contentHandler, xAttrs);
+      }
+      xAttrs = readXAttrsFromXml(st);
-    XAttr xAttr;
+    List<XAttr> xAttrs;
-      xAttr = PBHelper.convertXAttr(p.getXAttr());
+      xAttrs = PBHelper.convertXAttrs(p.getXAttrsList());
-      b.setXAttr(PBHelper.convertXAttrProto(xAttr));
+      b.addAllXAttrs(PBHelper.convertXAttrProto(xAttrs));
-      appendXAttrToXml(contentHandler, xAttr);
+      appendXAttrsToXml(contentHandler, xAttrs);
-      xAttr = readXAttrFromXml(st);
+      xAttrs = readXAttrsFromXml(st);
-    XAttr xAttr;
+    List<XAttr> xAttrs;
-      xAttr = PBHelper.convertXAttr(p.getXAttr());
+      xAttrs = PBHelper.convertXAttrs(p.getXAttrsList());
-      b.setXAttr(PBHelper.convertXAttrProto(xAttr));
+      b.addAllXAttrs(PBHelper.convertXAttrProto(xAttrs));
-      appendXAttrToXml(contentHandler, xAttr);
+      appendXAttrsToXml(contentHandler, xAttrs);
-      xAttr = readXAttrFromXml(st);
+      xAttrs = readXAttrsFromXml(st);
-  
-  private static void appendXAttrToXml(ContentHandler contentHandler,
-      XAttr xAttr) throws SAXException {
-    contentHandler.startElement("", "", "XATTR", new AttributesImpl());
-    XMLUtils.addSaxString(contentHandler, "NAMESPACE", 
-        xAttr.getNameSpace().toString());
-    XMLUtils.addSaxString(contentHandler, "NAME", xAttr.getName());
-    if (xAttr.getValue() != null) {
-      try {
-        XMLUtils.addSaxString(contentHandler, "VALUE", 
-            XAttrCodec.encodeValue(xAttr.getValue(), XAttrCodec.HEX));
-      } catch (IOException e) {
-        throw new SAXException(e);
+
+  private static void appendXAttrsToXml(ContentHandler contentHandler,
+      List<XAttr> xAttrs) throws SAXException {
+    for (XAttr xAttr: xAttrs) {
+      contentHandler.startElement("", "", "XATTR", new AttributesImpl());
+      XMLUtils.addSaxString(contentHandler, "NAMESPACE",
+          xAttr.getNameSpace().toString());
+      XMLUtils.addSaxString(contentHandler, "NAME", xAttr.getName());
+      if (xAttr.getValue() != null) {
+        try {
+          XMLUtils.addSaxString(contentHandler, "VALUE",
+              XAttrCodec.encodeValue(xAttr.getValue(), XAttrCodec.HEX));
+        } catch (IOException e) {
+          throw new SAXException(e);
+        }
+      contentHandler.endElement("", "", "XATTR");
-    contentHandler.endElement("", "", "XATTR");
-  
-  private static XAttr readXAttrFromXml(Stanza st) 
+
+  private static List<XAttr> readXAttrsFromXml(Stanza st)
-    
-    Stanza a = st.getChildren("XATTR").get(0);
-    XAttr.Builder builder = new XAttr.Builder();
-    builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue("NAMESPACE"))).
-        setName(a.getValue("NAME"));
-    String v = a.getValueOrNull("VALUE");
-    if (v != null) {
-      try {
-        builder.setValue(XAttrCodec.decodeValue(v));
-      } catch (IOException e) {
-        throw new InvalidXmlException(e.toString());
+
+    List<Stanza> stanzas = st.getChildren("XATTR");
+    List<XAttr> xattrs = Lists.newArrayListWithCapacity(stanzas.size());
+    for (Stanza a: stanzas) {
+      XAttr.Builder builder = new XAttr.Builder();
+      builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue("NAMESPACE"))).
+          setName(a.getValue("NAME"));
+      String v = a.getValueOrNull("VALUE");
+      if (v != null) {
+        try {
+          builder.setValue(XAttrCodec.decodeValue(v));
+        } catch (IOException e) {
+          throw new InvalidXmlException(e.toString());
+        }
+      xattrs.add(builder.build());
-    return builder.build();
+    return xattrs;

MOV55 INS31 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS23 INS31 INS23 INS31 UPD42 MOV43 MOV23 MOV31 MOV31 MOV31 MOV31 UPD42 MOV43 INS23 MOV31 MOV31 INS31 INS31 UPD42 INS44 INS8 INS74 UPD42 INS8 INS43 INS43 INS43 INS42 INS39 INS42 INS42 INS25 INS60 INS41 INS74 INS59 INS73 INS43 INS42 INS44 INS8 INS74 INS59 INS43 INS42 INS44 INS8 INS74 MOV78 MOV43 MOV78 MOV43 MOV78 MOV78 INS74 MOV43 INS59 MOV78 MOV43 MOV78 MOV43 MOV78 INS83 INS39 INS42 MOV44 MOV43 INS8 MOV78 INS39 INS42 MOV44 MOV43 INS8 INS74 INS42 INS70 INS43 INS43 MOV25 MOV60 INS60 INS70 INS41 INS42 INS42 INS42 INS38 INS8 INS43 INS59 INS32 INS43 INS43 INS42 INS42 INS43 INS42 INS74 INS42 INS21 INS41 INS43 INS43 INS42 INS42 INS74 INS42 INS21 INS41 INS60 INS21 INS21 INS21 INS21 INS21 INS25 INS21 INS43 MOV43 UPD42 INS43 MOV43 UPD42 INS42 INS42 MOV21 MOV21 MOV21 INS21 MOV21 MOV21 INS21 MOV21 INS43 MOV43 MOV44 INS42 MOV8 INS42 MOV42 INS74 INS74 INS59 INS44 INS42 MOV8 INS42 INS32 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS7 INS11 INS42 INS42 INS43 INS43 INS7 INS52 INS43 INS59 INS32 INS32 INS7 INS32 INS32 INS27 INS8 INS7 UPD42 MOV42 INS42 INS32 INS7 INS42 INS42 INS43 INS43 UPD42 MOV32 INS43 INS43 INS42 INS32 MOV43 INS42 INS21 INS42 INS42 INS40 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS43 INS52 INS60 INS21 INS21 INS21 INS42 INS42 INS22 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS42 INS43 INS59 INS32 INS32 INS7 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS22 INS32 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL34 DEL32 DEL41