Merging r1536572 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1536889 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+  volatile long lastCacheReport = 0;
+
-        new LocatedBlock(block, dnArr, uuids, types, -1, false) };
+        new LocatedBlock(block, dnArr, uuids, types, -1, false, null) };
+  DatanodeCommand cacheReport() throws IOException {
+    // If caching is disabled, do not send a cache report
+    if (dn.getFSDataset().getDnCacheCapacity() == 0) {
+      return null;
+    }
+    // send cache report if timer has expired.
+    DatanodeCommand cmd = null;
+    long startTime = Time.monotonicNow();
+    if (startTime - lastCacheReport > dnConf.cacheReportInterval) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Sending cacheReport from service actor: " + this);
+      }
+      lastCacheReport = startTime;
+
+      String bpid = bpos.getBlockPoolId();
+      List<Long> blockIds = dn.getFSDataset().getCacheReport(bpid);
+      long createTime = Time.monotonicNow();
+
+      cmd = bpNamenode.cacheReport(bpRegistration, bpid, blockIds);
+      long sendTime = Time.monotonicNow();
+      long createCost = createTime - startTime;
+      long sendCost = sendTime - createTime;
+      dn.getMetrics().addCacheReport(sendCost);
+      LOG.info("CacheReport of " + blockIds.size()
+          + " blocks took " + createCost + " msec to generate and "
+          + sendCost + " msecs for RPC and NN processing");
+    }
+    return cmd;
+  }
+        dn.getFSDataset().getDnCacheCapacity(),
+        dn.getFSDataset().getDnCacheUsed(),
-    LOG.info("For namenode " + nnAddr + " using DELETEREPORT_INTERVAL of "
-        + dnConf.deleteReportInterval + " msec " + " BLOCKREPORT_INTERVAL of "
-        + dnConf.blockReportInterval + "msec" + " Initial delay: "
-        + dnConf.initialBlockReportDelay + "msec" + "; heartBeatInterval="
-        + dnConf.heartBeatInterval);
+    LOG.info("For namenode " + nnAddr + " using"
+        + " DELETEREPORT_INTERVAL of " + dnConf.deleteReportInterval + " msec "
+        + " BLOCKREPORT_INTERVAL of " + dnConf.blockReportInterval + "msec"
+        + " CACHEREPORT_INTERVAL of " + dnConf.cacheReportInterval + "msec"
+        + " Initial delay: " + dnConf.initialBlockReportDelay + "msec"
+        + "; heartBeatInterval=" + dnConf.heartBeatInterval);
+        cmd = cacheReport();
+        processCommand(new DatanodeCommand[]{ cmd });
+

INS26 INS40 INS23 INS31 INS83 INS39 INS59 INS43 INS42 INS43 INS8 INS42 INS34 INS42 INS42 INS25 INS60 INS60 INS25 INS41 INS27 INS8 INS43 INS59 INS39 INS59 INS27 INS8 INS42 INS32 INS34 INS41 INS42 INS42 INS33 INS42 INS32 INS27 INS40 INS25 INS21 INS60 INS60 INS60 INS21 INS60 INS60 INS60 INS21 INS21 INS32 INS32 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS8 INS7 INS43 INS59 INS74 INS59 INS39 INS59 INS7 INS39 INS59 INS39 INS59 INS39 INS59 INS32 INS32 INS32 INS42 INS32 INS42 INS45 UPD45 INS45 INS40 INS45 INS33 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS21 INS21 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS7 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS3 INS45 INS52 INS42 INS5 INS4 INS43 INS85 INS42 INS42