Merge r1415804 through r1419190 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1419193 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.UTFDataFormatException;
+import org.apache.hadoop.util.StringUtils;
+ * Note that this decodes UTF-8 but actually encodes CESU-8, a variant of
+ * UTF-8: see http://en.wikipedia.org/wiki/CESU-8
+ *
+  
+  /**
+   * Convert to a string, checking for valid UTF8.
+   * @return the converted string
+   * @throws UTFDataFormatException if the underlying bytes contain invalid
+   * UTF8 data.
+   */
+  public String toStringChecked() throws IOException {
+    StringBuilder buffer = new StringBuilder(length);
+    synchronized (IBUF) {
+      IBUF.reset(bytes, length);
+      readChars(IBUF, buffer, length);
+    }
+    return buffer.toString();
+  }
+  /**
+   * Convert a UTF-8 encoded byte array back into a string.
+   *
+   * @throws IOException if the byte array is invalid UTF8
+   */
+  public static String fromBytes(byte[] bytes) throws IOException {
+    DataInputBuffer dbuf = new DataInputBuffer();
+    dbuf.reset(bytes, 0, bytes.length);
+    StringBuilder buf = new StringBuilder(bytes.length);
+    readChars(dbuf, buf, bytes.length);
+    return buf.toString();
+  }
+
-    throws IOException {
+    throws UTFDataFormatException, IOException {
+        // 0b0xxxxxxx: 1-byte sequence
-      } else if ((b & 0xE0) != 0xE0) {
+      } else if ((b & 0xE0) == 0xC0) {
+        if (i >= nBytes) {
+          throw new UTFDataFormatException("Truncated UTF8 at " +
+              StringUtils.byteToHexString(bytes, i - 1, 1));
+        }
+        // 0b110xxxxx: 2-byte sequence
-      } else {
+      } else if ((b & 0xF0) == 0xE0) {
+        // 0b1110xxxx: 3-byte sequence
+        if (i + 1 >= nBytes) {
+          throw new UTFDataFormatException("Truncated UTF8 at " +
+              StringUtils.byteToHexString(bytes, i - 1, 2));
+        }
+      } else if ((b & 0xF8) == 0xF0) {
+        if (i + 2 >= nBytes) {
+          throw new UTFDataFormatException("Truncated UTF8 at " +
+              StringUtils.byteToHexString(bytes, i - 1, 3));
+        }
+        // 0b11110xxx: 4-byte sequence
+        int codepoint =
+            ((b & 0x07) << 18)
+          | ((bytes[i++] & 0x3F) <<  12)
+          | ((bytes[i++] & 0x3F) <<  6)
+          | ((bytes[i++] & 0x3F));
+        buffer.append(highSurrogate(codepoint))
+              .append(lowSurrogate(codepoint));
+      } else {
+        // The UTF8 standard describes 5-byte and 6-byte sequences, but
+        // these are no longer allowed as of 2003 (see RFC 3629)
+
+        // Only show the next 6 bytes max in the error code - in case the
+        // buffer is large, this will prevent an exceedingly large message.
+        int endForError = Math.min(i + 5, nBytes);
+        throw new UTFDataFormatException("Invalid UTF8 at " +
+            StringUtils.byteToHexString(bytes, i - 1, endForError));
+  private static char highSurrogate(int codePoint) {
+    return (char) ((codePoint >>> 10)
+        + (Character.MIN_HIGH_SURROGATE - (Character.MIN_SUPPLEMENTARY_CODE_POINT >>> 10)));
+  }
+
+  private static char lowSurrogate(int codePoint) {
+    return (char) ((codePoint & 0x3ff) + Character.MIN_LOW_SURROGATE);
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS43 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS66 INS66 INS65 INS65 INS65 INS42 INS42 INS60 INS51 INS41 INS65 INS65 INS42 INS5 INS42 INS42 INS60 INS21 INS60 INS21 INS41 INS42 INS39 INS42 INS41 INS39 INS42 INS41 INS66 INS66 INS42 INS66 INS66 INS43 INS59 INS42 INS8 INS32 INS66 INS42 INS66 INS39 INS85 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS11 INS11 INS42 INS42 INS14 INS21 INS21 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS42 INS39 INS36 INS39 INS36 INS43 INS42 INS32 INS32 INS43 INS43 INS40 INS25 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD27 MOV27 MOV8 INS25 INS36 INS36 INS36 INS40 UPD34 INS25 INS27 MOV8 INS25 INS27 INS27 INS27 INS27 INS8 INS36 INS34 INS25 INS27 INS8 INS8 INS42 INS34 INS40 INS36 INS42 INS34 INS42 INS42 INS53 INS27 INS27 INS8 INS36 INS34 INS25 INS60 INS21 INS60 INS53 INS27 INS14 INS42 INS34 INS27 INS42 INS53 INS27 INS27 INS8 INS39 INS59 INS32 INS39 INS59 INS14 INS40 INS34 INS43 INS27 INS42 INS34 INS14 INS42 INS34 INS27 INS42 INS53 INS42 INS27 INS32 INS42 INS32 INS42 INS32 INS43 INS27 INS42 INS45 INS32 INS43 INS27 INS42 INS34 INS14 INS36 INS36 INS36 INS36 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS27 INS34 INS42 INS45 INS32 INS43 INS27 INS27 INS27 INS27 INS36 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS34 INS42 INS45 INS32 INS36 INS34 INS36 INS34 INS36 INS34 INS27 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS27 INS34 INS27 INS27 INS27 INS2 INS34 INS42 INS34 INS42 INS34 INS2 INS34 INS2 INS34 INS42 INS37 INS42 INS37 INS42 INS37 INS42 INS42 INS42 DEL25