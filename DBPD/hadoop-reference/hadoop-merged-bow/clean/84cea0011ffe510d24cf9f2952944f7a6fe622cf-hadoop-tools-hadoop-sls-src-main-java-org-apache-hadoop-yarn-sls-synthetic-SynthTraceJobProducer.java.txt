YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)

+import org.apache.commons.math3.distribution.AbstractRealDistribution;
+import org.apache.hadoop.yarn.exceptions.YarnRuntimeException;
+import org.apache.hadoop.yarn.sls.appmaster.MRAMSimulator;
+import org.codehaus.jackson.annotate.JsonCreator;
+import org.codehaus.jackson.map.JsonMappingException;
- * workloads. The .json input file is used to determine how many jobs, which
+ * workloads. The .json input file is used to determine how many weight, which
-  private final List<Double> weightList;
-  private final Map<Integer, SynthWorkload> workloads;
+  private final static int DEFAULT_MAPPER_PRIORITY = 20;
+  private final static int DEFAULT_REDUCER_PRIORITY = 10;
+
-    workloads = new HashMap<Integer, SynthWorkload>();
-    weightList = new ArrayList<Double>();
+    // Initialize the random generator and the seed
-    seed = trace.rand_seed;
-    rand.setSeed(seed);
+    this.seed = trace.rand_seed;
+    this.rand.setSeed(seed);
+    // Initialize the trace
+    this.trace.init(rand);
-    for (int workloadId = 0; workloadId < trace.workloads
-        .size(); workloadId++) {
-      SynthWorkload workload = new SynthWorkload(workloadId, trace);
-      for (int classId =
-          0; classId < trace.workloads.get(workloadId).job_classes
-              .size(); classId++) {
-        SynthJobClass cls = new SynthJobClass(rand, trace, workload, classId);
-        workload.add(cls);
-      }
-      workloads.put(workloadId, workload);
-    }
-
-    for (int i = 0; i < workloads.size(); i++) {
-      double w = workloads.get(i).getWorkloadWeight();
+    for (Double w : trace.workload_weights) {
-      weightList.add(w);
+    // Initialize our story parameters
+    listStoryParams = createStory();
+
+    LOG.info("Generated " + listStoryParams.size() + " deadlines for "
+        + this.numJobs.get() + " jobs");
+  }
+
+  // StoryParams hold the minimum amount of information needed to completely
+  // specify a job run: job definition, start time, and queue.
+  // This allows us to create "jobs" and then order them according to start time
+  static class StoryParams {
+    // Time the job gets submitted to
+    private long actualSubmissionTime;
+    // The queue the job gets submitted to
+    private String queue;
+    // Definition to construct the job from
+    private JobDefinition jobDef;
+
+    StoryParams(long actualSubmissionTime, String queue, JobDefinition jobDef) {
+      this.actualSubmissionTime = actualSubmissionTime;
+      this.queue = queue;
+      this.jobDef = jobDef;
+    }
+  }
+
+
+  private Queue<StoryParams> createStory() {
-    listStoryParams =
-        new PriorityQueue<StoryParams>(10, new Comparator<StoryParams>() {
+    Queue<StoryParams> storyQueue =
+        new PriorityQueue<>(this.numJobs.get(), new Comparator<StoryParams>() {
-                .toIntExact(o2.actualSubmissionTime - o1.actualSubmissionTime);
+                .toIntExact(o1.actualSubmissionTime - o2.actualSubmissionTime);
+    for (int i = 0; i < numJobs.get(); i++) {
+      // Generate a workload
+      Workload wl = trace.generateWorkload();
+      // Save all the parameters needed to completely define a job
+      long actualSubmissionTime = wl.generateSubmissionTime();
+      String queue = wl.queue_name;
+      JobDefinition job = wl.generateJobDefinition();
+      storyQueue.add(new StoryParams(actualSubmissionTime, queue, job));
+    }
+    return storyQueue;
+  }
-    // initialize it
-    createStoryParams();
-    LOG.info("Generated " + listStoryParams.size() + " deadlines for "
-        + this.numJobs.get() + " jobs ");
+  @Override
+  public JobStory getNextJob() throws IOException {
+    if (numJobs.decrementAndGet() < 0) {
+      return null;
+    }
+    StoryParams storyParams = listStoryParams.poll();
+    return new SynthJob(rand, conf, storyParams.jobDef, storyParams.queue,
+        storyParams.actualSubmissionTime);
+  }
+
+  @Override
+  public void close(){
+  }
+
+  @Override
+  public String toString() {
+    return "SynthTraceJobProducer [ conf=" + conf + ", numJobs=" + numJobs
+        + ", r=" + rand + ", totalWeight="
+        + totalWeight + ", workloads=" + trace.workloads + "]";
+  }
+
+  public int getNumJobs() {
+    return trace.num_jobs;
+  }
+
+  // Helper to parse and maintain backwards compatibility with
+  // syn json formats
+  private static void validateJobDef(JobDefinition jobDef){
+    if(jobDef.tasks == null) {
+      LOG.info("Detected old JobDefinition format. Converting.");
+      try {
+        jobDef.tasks = new ArrayList<>();
+        jobDef.type = "mapreduce";
+        jobDef.deadline_factor = new Sample(jobDef.deadline_factor_avg,
+            jobDef.deadline_factor_stddev);
+        jobDef.duration = new Sample(jobDef.dur_avg,
+            jobDef.dur_stddev);
+        jobDef.reservation = new Sample(jobDef.chance_of_reservation);
+
+        TaskDefinition map = new TaskDefinition();
+        map.type = MRAMSimulator.MAP_TYPE;
+        map.count = new Sample(jobDef.mtasks_avg, jobDef.mtasks_stddev);
+        map.time = new Sample(jobDef.mtime_avg, jobDef.mtime_stddev);
+        map.max_memory = new Sample((double) jobDef.map_max_memory_avg,
+            jobDef.map_max_memory_stddev);
+        map.max_vcores = new Sample((double) jobDef.map_max_vcores_avg,
+            jobDef.map_max_vcores_stddev);
+        map.priority = DEFAULT_MAPPER_PRIORITY;
+
+        jobDef.tasks.add(map);
+        TaskDefinition reduce = new TaskDefinition();
+        reduce.type = MRAMSimulator.REDUCE_TYPE;
+        reduce.count = new Sample(jobDef.rtasks_avg, jobDef.rtasks_stddev);
+        reduce.time = new Sample(jobDef.rtime_avg, jobDef.rtime_stddev);
+        reduce.max_memory = new Sample((double) jobDef.reduce_max_memory_avg,
+            jobDef.reduce_max_memory_stddev);
+        reduce.max_vcores = new Sample((double) jobDef.reduce_max_vcores_avg,
+            jobDef.reduce_max_vcores_stddev);
+        reduce.priority = DEFAULT_REDUCER_PRIORITY;
+
+        jobDef.tasks.add(reduce);
+      } catch (JsonMappingException e) {
+        LOG.warn("Error converting old JobDefinition format", e);
+      }
+    }
+    List<Double> workload_weights;
+    JDKRandomGenerator rand;
+
+    public void init(JDKRandomGenerator random){
+      this.rand = random;
+      // Pass rand forward
+      for(Workload w : workloads){
+        w.init(rand);
+      }
+      // Initialize workload weights
+      workload_weights = new ArrayList<>();
+      for(Workload w : workloads){
+        workload_weights.add(w.workload_weight);
+      }
+    }
+
+    Workload generateWorkload(){
+      return workloads.get(SynthUtils.getWeighted(workload_weights, rand));
+    }
-    List<JobClass> job_classes;
+    List<JobDefinition> job_classes;
+
+    JDKRandomGenerator rand;
+
+    List<Double> job_weights;
+    List<Double> time_weights;
+
+    public void init(JDKRandomGenerator random){
+      this.rand = random;
+      // Validate and pass rand forward
+      for(JobDefinition def : job_classes){
+        validateJobDef(def);
+        def.init(rand);
+      }
+
+      // Initialize job weights
+      job_weights = new ArrayList<>();
+      job_weights = new ArrayList<>();
+      for(JobDefinition j : job_classes){
+        job_weights.add(j.class_weight);
+      }
+
+      // Initialize time weights
+      time_weights = new ArrayList<>();
+      for(TimeSample ts : time_distribution){
+        time_weights.add(ts.weight);
+      }
+    }
+
+    public long generateSubmissionTime(){
+      int index = SynthUtils.getWeighted(time_weights, rand);
+      // Retrieve the lower and upper bounds for this time "bucket"
+      int start = time_distribution.get(index).time;
+      // Get the beginning of the next time sample (if it exists)
+      index = (index+1)<time_distribution.size() ? index+1 : index;
+      int end = time_distribution.get(index).time;
+      int range = end-start;
+      // Within this time "bucket", uniformly pick a time if our
+      // range is non-zero, otherwise just use the start time of the bucket
+      return start + (range>0 ? rand.nextInt(range) : 0);
+    }
+
+    public JobDefinition generateJobDefinition(){
+      return job_classes.get(SynthUtils.getWeighted(job_weights, rand));
+    }
+
+    @Override
+    public String toString(){
+      return "\nWorkload " + workload_name + ", weight: " + workload_weight
+          + ", queue: " + queue_name + " "
+          + job_classes.toString().replace("\n", "\n\t");
+    }
-  public static class JobClass {
+  public static class JobDefinition {
+    // am type to launch
+    @JsonProperty("type")
+    String type;
+    @JsonProperty("deadline_factor")
+    Sample deadline_factor;
+    @JsonProperty("duration")
+    Sample duration;
+    @JsonProperty("reservation")
+    Sample reservation;
+
+    @JsonProperty("tasks")
+    List<TaskDefinition> tasks;
+
+    @JsonProperty("params")
+    Map<String, String> params;
+
+    // Old JSON fields for backwards compatibility
+    public void init(JDKRandomGenerator rand){
+      deadline_factor.init(rand);
+      duration.init(rand);
+      reservation.init(rand);
+
+      for(TaskDefinition t : tasks){
+        t.count.init(rand);
+        t.time.init(rand);
+        t.max_memory.init(rand);
+        t.max_vcores.init(rand);
+      }
+    }
+
+    @Override
+    public String toString(){
+      return "\nJobDefinition " + class_name + ", weight: " + class_weight
+          + ", type: " + type + " "
+          + tasks.toString().replace("\n", "\n\t");
+    }
+  }
+
+  /**
+   * A task representing a type of container - e.g. "map" in mapreduce
+   */
+  @SuppressWarnings({ "membername", "checkstyle:visibilitymodifier" })
+  public static class TaskDefinition {
+
+    @JsonProperty("type")
+    String type;
+    @JsonProperty("count")
+    Sample count;
+    @JsonProperty("time")
+    Sample time;
+    @JsonProperty("max_memory")
+    Sample max_memory;
+    @JsonProperty("max_vcores")
+    Sample max_vcores;
+    @JsonProperty("priority")
+    int priority;
+
+    @Override
+    public String toString(){
+      return "\nTaskDefinition " + type
+          + " Count[" + count + "] Time[" + time + "] Memory[" + max_memory
+          + "] Vcores[" + max_vcores + "] Priority[" + priority + "]";
+    }
+  }
+
+  /**
+   * Class used to parse value sample information.
+   */
+  @SuppressWarnings({ "membername", "checkstyle:visibilitymodifier" })
+  public static class Sample {
+    private static final Dist DEFAULT_DIST = Dist.LOGNORM;
+
+    private final double val;
+    private final double std;
+    private final Dist dist;
+    private AbstractRealDistribution dist_instance;
+    private final List<String> discrete;
+    private final List<Double> weights;
+    private final Mode mode;
+
+    private JDKRandomGenerator rand;
+
+    private enum Mode{
+      CONST,
+      DIST,
+      DISC
+    }
+
+    private enum Dist{
+      LOGNORM,
+      NORM
+    }
+
+    public Sample(Double val) throws JsonMappingException{
+      this(val, null);
+    }
+
+    public Sample(Double val, Double std) throws JsonMappingException{
+      this(val, std, null, null, null);
+    }
+
+    @JsonCreator
+    public Sample(@JsonProperty("val") Double val,
+        @JsonProperty("std") Double std, @JsonProperty("dist") String dist,
+        @JsonProperty("discrete") List<String> discrete,
+        @JsonProperty("weights") List<Double> weights)
+        throws JsonMappingException{
+      // Different Modes
+      // - Constant: val must be specified, all else null. Sampling will
+      // return val.
+      // - Distribution: val, std specified, dist optional (defaults to
+      // LogNormal). Sampling will sample from the appropriate distribution
+      // - Discrete: discrete must be set to a list of strings or numbers,
+      // weights optional (defaults to uniform)
+
+      if(val!=null){
+        if(std==null){
+          // Constant
+          if(dist!=null || discrete!=null || weights!=null){
+            throw new JsonMappingException("Instantiation of " + Sample.class
+                + " failed");
+          }
+          mode = Mode.CONST;
+          this.val = val;
+          this.std = 0;
+          this.dist = null;
+          this.discrete = null;
+          this.weights = null;
+        } else {
+          // Distribution
+          if(discrete!=null || weights != null){
+            throw new JsonMappingException("Instantiation of " + Sample.class
+                + " failed");
+          }
+          mode = Mode.DIST;
+          this.val = val;
+          this.std = std;
+          this.dist = dist!=null ? Dist.valueOf(dist) : DEFAULT_DIST;
+          this.discrete = null;
+          this.weights = null;
+        }
+      } else {
+        // Discrete
+        if(discrete==null){
+          throw new JsonMappingException("Instantiation of " + Sample.class
+              + " failed");
+        }
+        mode = Mode.DISC;
+        this.val = 0;
+        this.std = 0;
+        this.dist = null;
+        this.discrete = discrete;
+        if(weights == null){
+          weights = new ArrayList<>(Collections.nCopies(
+              discrete.size(), 1.0));
+        }
+        if(weights.size() != discrete.size()){
+          throw new JsonMappingException("Instantiation of " + Sample.class
+              + " failed");
+        }
+        this.weights = weights;
+      }
+    }
+
+    public void init(JDKRandomGenerator random){
+      if(this.rand != null){
+        throw new YarnRuntimeException("init called twice");
+      }
+      this.rand = random;
+      if(mode == Mode.DIST){
+        switch(this.dist){
+        case LOGNORM:
+          this.dist_instance = SynthUtils.getLogNormalDist(rand, val, std);
+          return;
+        case NORM:
+          this.dist_instance = SynthUtils.getNormalDist(rand, val, std);
+          return;
+        default:
+          throw new YarnRuntimeException("Unknown distribution " + dist.name());
+        }
+      }
+    }
+
+    public int getInt(){
+      return Math.toIntExact(getLong());
+    }
+
+    public long getLong(){
+      return Math.round(getDouble());
+    }
+
+    public double getDouble(){
+      return Double.parseDouble(getString());
+    }
+
+    public String getString(){
+      if(this.rand == null){
+        throw new YarnRuntimeException("getValue called without init");
+      }
+      switch(mode){
+      case CONST:
+        return Double.toString(val);
+      case DIST:
+        return Double.toString(dist_instance.sample());
+      case DISC:
+        return this.discrete.get(SynthUtils.getWeighted(this.weights, rand));
+      default:
+        throw new YarnRuntimeException("Unknown sampling mode " + mode.name());
+      }
+    }
+
+    @Override
+    public String toString(){
+      switch(mode){
+      case CONST:
+        return "value: " + Double.toString(val);
+      case DIST:
+        return "value: " + this.val + " std: " + this.std + " dist: "
+            + this.dist.name();
+      case DISC:
+        return "discrete: " + this.discrete + ", weights: " + this.weights;
+      default:
+        throw new YarnRuntimeException("Unknown sampling mode " + mode.name());
+      }
+    }
+
-    double jobs;
+    double weight;
-
-  static class StoryParams {
-    private SynthJobClass pickedJobClass;
-    private long actualSubmissionTime;
-
-    StoryParams(SynthJobClass pickedJobClass, long actualSubmissionTime) {
-      this.pickedJobClass = pickedJobClass;
-      this.actualSubmissionTime = actualSubmissionTime;
-    }
-  }
-
-
-  void createStoryParams() {
-
-    for (int i = 0; i < numJobs.get(); i++) {
-      int workload = SynthUtils.getWeighted(weightList, rand);
-      SynthWorkload pickedWorkload = workloads.get(workload);
-      long jobClass =
-          SynthUtils.getWeighted(pickedWorkload.getWeightList(), rand);
-      SynthJobClass pickedJobClass =
-          pickedWorkload.getClassList().get((int) jobClass);
-      long actualSubmissionTime = pickedWorkload.getBaseSubmissionTime(rand);
-      // long actualSubmissionTime = (i + 1) * 10;
-      listStoryParams
-          .add(new StoryParams(pickedJobClass, actualSubmissionTime));
-    }
-  }
-
-  @Override
-  public JobStory getNextJob() throws IOException {
-    if (numJobs.decrementAndGet() < 0) {
-      return null;
-    }
-    StoryParams storyParams = listStoryParams.poll();
-    return storyParams.pickedJobClass.getJobStory(conf,
-        storyParams.actualSubmissionTime);
-  }
-
-  @Override
-  public void close() {
-  }
-
-  @Override
-  public String toString() {
-    return "SynthTraceJobProducer [ conf=" + conf + ", numJobs=" + numJobs
-        + ", weightList=" + weightList + ", r=" + rand + ", totalWeight="
-        + totalWeight + ", workloads=" + workloads + "]";
-  }
-
-  public int getNumJobs() {
-    return trace.num_jobs;
-  }
-

INS26 INS26 INS26 INS26 INS26 MOV23 MOV55 MOV31 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS23 MOV23 INS31 INS31 INS31 INS55 INS55 INS55 INS83 INS39 INS83 INS83 INS83 INS39 INS59 INS23 MOV44 INS83 INS74 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS83 MOV39 INS42 INS44 INS8 INS23 INS23 INS31 INS31 MOV29 MOV79 INS83 INS83 INS42 MOV23 MOV23 MOV23 MOV23 MOV23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 UPD42 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS29 INS79 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS29 INS79 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 MOV23 INS23 INS23 INS71 INS71 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 UPD66 UPD42 INS34 INS42 INS34 INS21 INS70 UPD43 INS83 INS43 INS59 INS44 MOV21 INS43 INS43 INS60 INS24 INS41 INS42 INS42 INS41 INS43 INS42 INS25 INS74 INS59 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS8 UPD74 INS43 INS59 INS74 INS59 INS74 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS39 UPD42 MOV42 INS8 INS83 INS43 INS42 INS8 MOV78 INS83 MOV43 INS42 INS8 INS79 INS43 INS59 INS79 INS43 INS59 INS79 INS43 INS59 INS79 INS43 INS59 INS79 INS74 INS59 INS79 INS74 INS59 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS4 INS79 INS43 INS59 INS79 INS43 INS59 INS79 INS43 INS59 INS79 INS43 INS59 INS79 INS43 INS59 INS79 INS39 INS59 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS4 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS72 INS72 INS72 INS83 INS42 INS72 INS72 INS83 INS42 INS44 INS43 INS8 INS83 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS43 INS32 INS44 INS40 INS8 UPD42 UPD42 INS42 INS42 UPD43 UPD42 INS43 INS42 INS21 INS42 INS42 INS74 INS59 MOV58 MOV27 MOV37 INS8 INS42 INS14 INS27 INS42 INS27 INS8 INS43 INS43 INS42 INS42 INS42 INS43 INS42 INS21 INS70 INS21 INS70 INS42 INS41 UPD43 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS42 INS43 INS42 INS21 INS70 INS21 INS21 INS70 INS21 INS70 MOV60 INS60 INS21 INS60 INS60 INS41 INS42 INS41 INS41 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS43 INS43 INS42 INS42 INS45 MOV43 INS43 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS70 INS42 INS42 INS41 INS66 INS45 INS45 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS41 INS66 INS45 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS17 INS43 INS42 INS43 INS42 INS42 INS17 INS42 INS79 MOV43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS74 INS42 INS79 INS74 INS42 INS42 INS25 INS43 INS42 INS25 INS21 INS25 INS41 INS41 INS41 INS42 INS25 INS50 INS42 INS42 INS50 UPD42 INS22 INS22 INS22 INS42 INS42 INS43 INS42 MOV21 INS32 UPD42 INS42 INS7 INS43 MOV43 INS42 MOV14 INS60 INS60 INS60 INS60 INS21 INS43 INS42 INS42 INS40 INS40 INS40 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS40 INS45 INS40 INS33 INS21 INS54 INS42 INS42 INS42 INS7 INS44 INS42 INS8 INS7 INS44 INS42 INS8 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS7 INS44 INS42 INS8 INS7 INS7 INS44 INS42 INS8 INS7 INS44 INS42 INS8 INS39 INS59 INS7 INS39 MOV59 UPD39 MOV39 INS59 INS27 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS44 INS42 INS8 INS27 INS27 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS33 INS33 INS33 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS42 INS45 INS43 INS43 INS27 INS8 INS8 INS42 INS27 INS8 INS7 INS27 INS8 INS32 INS32 INS32 INS27 INS8 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS53 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS53 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 MOV42 INS42 UPD45 UPD42 INS22 INS42 INS42 UPD74 INS32 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS32 INS8 INS12 INS22 INS42 INS43 INS42 INS21 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS32 INS22 INS42 INS43 INS42 INS21 INS21 INS42 INS14 INS42 INS14 INS43 INS42 INS21 INS42 INS14 INS43 INS42 INS21 UPD42 INS42 INS22 INS42 INS16 UPD42 INS22 INS42 INS27 INS42 INS36 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS33 INS25 INS25 INS21 INS21 INS21 INS21 INS21 INS25 INS25 INS21 INS22 INS33 INS53 INS22 INS42 INS42 INS40 INS50 INS42 INS42 INS32 INS42 UPD42 MOV42 INS32 INS42 INS42 INS32 INS22 INS33 INS53 INS42 INS32 INS42 INS32 INS42 INS32 INS14 INS42 INS27 INS42 INS27 INS42 INS27 INS14 UPD42 INS52 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS45 MOV21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS44 INS8 INS52 INS42 INS42 INS32 INS74 INS42 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS32 INS32 INS74 INS74 INS42 INS32 INS74 INS42 INS32 UPD42 INS32 INS42 INS27 INS27 INS42 INS32 INS42 INS42 INS42 INS16 MOV42 MOV42 INS42 INS42 INS32 INS42 INS45 INS45 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS45 INS45 INS27 INS8 INS8 INS27 INS8 INS7 INS7 INS7 INS7 INS7 INS27 INS8 INS27 INS8 INS7 INS52 INS42 INS14 INS52 INS42 INS22 INS49 INS21 INS41 INS49 INS21 INS41 INS49 INS53 INS42 UPD42 MOV42 INS42 INS52 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS22 INS42 INS32 INS43 INS27 UPD45 MOV45 INS32 UPD45 MOV45 INS22 UPD45 MOV45 INS22 UPD45 MOV45 INS32 UPD45 MOV45 INS22 UPD45 MOV45 INS22 INS43 INS27 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS43 INS59 INS7 INS7 INS7 INS7 INS7 INS7 INS32 INS43 INS59 INS7 INS7 INS7 INS7 INS7 INS7 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS40 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS36 INS32 INS42 INS34 UPD42 MOV42 MOV42 UPD42 MOV42 INS27 INS32 INS34 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS33 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS33 INS53 INS42 INS40 INS22 INS34 INS22 INS34 INS22 INS33 INS22 INS42 INS42 INS33 INS21 INS32 INS32 INS53 INS22 INS42 INS43 INS45 INS52 INS42 INS42 INS7 INS42 INS7 INS14 INS43 INS45 INS42 INS42 INS52 INS42 INS42 INS42 INS22 UPD42 MOV42 INS42 INS45 INS32 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS42 UPD45 MOV45 INS32 INS40 INS40 INS45 INS40 INS14 INS40 INS14 INS40 INS14 INS42 INS42 INS14 INS40 INS40 INS40 INS14 INS40 INS14 INS40 INS14 INS40 INS14 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS40 INS40 INS40 INS14 INS40 INS14 INS40 INS14 INS40 INS14 INS40 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS8 INS7 INS7 INS7 INS7 INS7 INS7 INS27 INS8 INS7 INS7 INS7 INS7 INS7 INS7 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS7 INS42 INS42 INS42 INS42 INS14 INS52 INS42 UPD42 MOV42 INS22 INS32 INS22 INS32 INS43 INS27 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 UPD74 INS43 INS40 INS40 INS43 INS40 INS40 INS43 INS40 INS43 INS43 INS40 INS40 INS43 INS40 INS40 INS43 INS11 INS40 INS43 INS11 INS40 INS43 INS43 INS40 INS40 INS43 INS40 INS40 INS43 INS11 INS40 INS43 INS11 INS40 INS42 INS42 INS45 INS42 INS42 INS34 INS27 INS27 INS53 INS42 INS40 INS22 INS42 INS22 INS34 INS22 INS33 INS22 INS33 INS22 INS33 INS27 INS27 INS53 INS42 INS40 INS22 INS42 INS22 INS42 INS22 INS16 INS22 INS33 INS22 INS33 INS43 INS27 INS42 INS14 INS43 INS27 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS52 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS40 INS42 INS39 INS40 INS42 INS42 INS42 INS42 INS39 INS40 INS42 INS39 INS40 INS27 INS27 INS42 INS33 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS33 INS42 INS33 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS27 INS32 INS42 INS52 INS42 INS52 INS42 INS42 INS45 INS57 INS45 INS74 INS32 INS42 INS45 INS57 INS45 INS42 INS42 INS42 INS33 INS42 INS33 INS43 INS27 INS43 INS27 INS42 INS33 UPD42 MOV42 INS42 UPD42 MOV42 INS43 INS43 INS42 INS42 INS32 INS34 INS43 UPD40 UPD40 INS42 INS45 INS57 INS45 INS42 INS45 INS57 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL22 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL32 DEL21 DEL34 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL83 DEL83 DEL42 DEL55 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL27 DEL41 DEL42 DEL43 DEL60 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL32 DEL39 DEL42 DEL11 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL14 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31