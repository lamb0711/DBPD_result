Merge remote-tracking branch 'apache/trunk' into HDFS-7285

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/proto/hdfs.proto
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/proto/DatanodeProtocol.proto
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/blockmanagement/TestBlockTokenWithDFS.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFsck.java

Change-Id: Ic7946c4ea35bed587fe879ce58b959b25ecc0823

+import org.apache.commons.io.output.FileWriterWithEncoding;
+import org.apache.hadoop.fs.RemoteIterator;
+import org.apache.hadoop.yarn.exceptions.ApplicationNotFoundException;
+import org.apache.hadoop.yarn.util.ConverterUtils;
-import java.io.FileWriter;
+import java.util.Arrays;
+  private static final String VERBOSE_OPTION = "verbose";
+  private boolean verbose = false;
-  Set<ApplicationReport> eligibleApplications;
+  Set<AppInfo> eligibleApplications;
-    findAggregatedApps();
-
+    if (verbose) {
+      LOG.info("Remote Log Dir Root: " + remoteRootLogDir);
+      LOG.info("Log Suffix: " + suffix);
+      LOG.info("Working Dir: " + workingDir);
+    }
-      checkFiles(fs, remoteRootLogDir, suffix);
+      checkFilesAndSeedApps(fs, remoteRootLogDir, suffix);
+    filterAppsByAggregatedStatus();
+
-    for (ApplicationReport report : eligibleApplications) {
-      sb.append("\n\t").append(report.getApplicationId());
+    for (AppInfo app : eligibleApplications) {
+      sb.append("\n\t").append(app.getAppId());
+    Option verboseOpt = new Option(VERBOSE_OPTION, false,
+        "Print more details.");
+    opts.addOption(verboseOpt);
+      if (commandLine.hasOption(VERBOSE_OPTION)) {
+        verbose = true;
+      }
-  void findAggregatedApps() throws IOException, YarnException {
+  void filterAppsByAggregatedStatus() throws IOException, YarnException {
-      List<ApplicationReport> reports = client.getApplications();
-      for (ApplicationReport report : reports) {
-        LogAggregationStatus aggStatus = report.getLogAggregationStatus();
-        if (aggStatus.equals(LogAggregationStatus.SUCCEEDED) ||
-            aggStatus.equals(LogAggregationStatus.FAILED)) {
-          eligibleApplications.add(report);
+      for (Iterator<AppInfo> it = eligibleApplications.iterator();
+           it.hasNext();) {
+        AppInfo app = it.next();
+        try {
+          ApplicationReport report = client.getApplicationReport(
+              ConverterUtils.toApplicationId(app.getAppId()));
+          LogAggregationStatus aggStatus = report.getLogAggregationStatus();
+          if (aggStatus.equals(LogAggregationStatus.RUNNING) ||
+              aggStatus.equals(LogAggregationStatus.RUNNING_WITH_FAILURE) ||
+              aggStatus.equals(LogAggregationStatus.NOT_START) ||
+              aggStatus.equals(LogAggregationStatus.DISABLED) ||
+              aggStatus.equals(LogAggregationStatus.FAILED)) {
+            if (verbose) {
+              LOG.info("Skipping " + app.getAppId() +
+                  " due to aggregation status being " + aggStatus);
+            }
+            it.remove();
+          } else {
+            if (verbose) {
+              LOG.info(app.getAppId() + " has aggregation status " + aggStatus);
+            }
+            app.setFinishTime(report.getFinishTime());
+          }
+        } catch (ApplicationNotFoundException e) {
+          // Assume the aggregation has finished
+          if (verbose) {
+            LOG.info(app.getAppId() + " not in the ResourceManager");
+          }
-  void checkFiles(FileSystem fs, Path remoteRootLogDir, String suffix) {
-    for (Iterator<ApplicationReport> reportIt = eligibleApplications.iterator();
-         reportIt.hasNext(); ) {
-      ApplicationReport report = reportIt.next();
-      long totalFileSize = 0L;
+  void checkFilesAndSeedApps(FileSystem fs, Path remoteRootLogDir,
+       String suffix) throws IOException {
+    for (RemoteIterator<FileStatus> userIt =
+         fs.listStatusIterator(remoteRootLogDir); userIt.hasNext();) {
+      Path userLogPath = userIt.next().getPath();
-        FileStatus[] files = fs.listStatus(
-            LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir,
-                report.getApplicationId(), report.getUser(), suffix));
-        if (files.length < minNumLogFiles) {
-          reportIt.remove();
-        } else {
-          for (FileStatus file : files) {
-            if (file.getPath().getName().equals(report.getApplicationId()
-                + ".har")) {
-              reportIt.remove();
-              break;
+        for (RemoteIterator<FileStatus> appIt =
+             fs.listStatusIterator(new Path(userLogPath, suffix));
+             appIt.hasNext();) {
+          Path appLogPath = appIt.next().getPath();
+          try {
+            FileStatus[] files = fs.listStatus(appLogPath);
+            if (files.length >= minNumLogFiles) {
+              boolean eligible = true;
+              long totalFileSize = 0L;
+              for (FileStatus file : files) {
+                if (file.getPath().getName().equals(appLogPath.getName()
+                    + ".har")) {
+                  eligible = false;
+                  if (verbose) {
+                    LOG.info("Skipping " + appLogPath.getName() +
+                        " due to existing .har file");
+                  }
+                  break;
+                }
+                totalFileSize += file.getLen();
+                if (totalFileSize > maxTotalLogsSize) {
+                  eligible = false;
+                  if (verbose) {
+                    LOG.info("Skipping " + appLogPath.getName() + " due to " +
+                        "total file size being too large (" + totalFileSize +
+                        " > " + maxTotalLogsSize + ")");
+                  }
+                  break;
+                }
+              }
+              if (eligible) {
+                if (verbose) {
+                  LOG.info("Adding " + appLogPath.getName() + " for user " +
+                      userLogPath.getName());
+                }
+                eligibleApplications.add(
+                    new AppInfo(appLogPath.getName(), userLogPath.getName()));
+              }
+            } else {
+              if (verbose) {
+                LOG.info("Skipping " + appLogPath.getName() + " due to not " +
+                    "having enough log files (" + files.length + " < " +
+                    minNumLogFiles + ")");
+              }
-            totalFileSize += file.getLen();
-          }
-          if (totalFileSize > maxTotalLogsSize) {
-            reportIt.remove();
+          } catch (IOException ioe) {
+            // Ignore any apps we can't read
+            if (verbose) {
+              LOG.info("Skipping logs under " + appLogPath + " due to " +
+                  ioe.getMessage());
+            }
-        // If the user doesn't have permission or it doesn't exist, then skip it
-        reportIt.remove();
+        // Ignore any apps we can't read
+        if (verbose) {
+          LOG.info("Skipping all logs under " + userLogPath + " due to " +
+              ioe.getMessage());
+        }
-      List<ApplicationReport> sortedApplications =
-          new ArrayList<ApplicationReport>(eligibleApplications);
-      Collections.sort(sortedApplications, new Comparator<ApplicationReport>() {
+      if (verbose) {
+        LOG.info("Too many applications (" + eligibleApplications.size() +
+            " > " + maxEligible + ")");
+      }
+      List<AppInfo> sortedApplications =
+          new ArrayList<AppInfo>(eligibleApplications);
+      Collections.sort(sortedApplications, new Comparator<AppInfo>() {
-        public int compare(ApplicationReport o1, ApplicationReport o2) {
-          return Long.compare(o1.getFinishTime(), o2.getFinishTime());
+        public int compare(AppInfo o1, AppInfo o2) {
+          int lCompare = Long.compare(o1.getFinishTime(), o2.getFinishTime());
+          if (lCompare == 0) {
+            return o1.getAppId().compareTo(o2.getAppId());
+          }
+          return lCompare;
+        if (verbose) {
+          LOG.info("Removing " + sortedApplications.get(i));
+        }
-    LOG.info("Generating script at: " + localScript.getAbsolutePath());
+    if (verbose) {
+      LOG.info("Generating script at: " + localScript.getAbsolutePath());
+    }
-    FileWriter fw = null;
+    FileWriterWithEncoding fw = null;
-      fw = new FileWriter(localScript);
+      fw = new FileWriterWithEncoding(localScript, "UTF-8");
-      for (ApplicationReport report : eligibleApplications) {
+      for (AppInfo app : eligibleApplications) {
-        fw.write(report.getApplicationId().toString());
+        fw.write(app.getAppId());
-        fw.write(report.getUser());
+        fw.write(app.getUser());
+    if (verbose) {
+      LOG.info("Running Distributed Shell with arguments: " +
+          Arrays.toString(dsArgs));
+    }
+
+  @VisibleForTesting
+  static class AppInfo {
+    private String appId;
+    private String user;
+    private long finishTime;
+
+    AppInfo(String appId, String user) {
+      this.appId = appId;
+      this.user = user;
+      this.finishTime = 0L;
+    }
+
+    public String getAppId() {
+      return appId;
+    }
+
+    public String getUser() {
+      return user;
+    }
+
+    public long getFinishTime() {
+      return finishTime;
+    }
+
+    public void setFinishTime(long finishTime) {
+      this.finishTime = finishTime;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+      if (this == o) {
+        return true;
+      }
+      if (o == null || getClass() != o.getClass()) {
+        return false;
+      }
+
+      AppInfo appInfo = (AppInfo) o;
+
+      if (appId != null
+          ? !appId.equals(appInfo.appId) : appInfo.appId != null) {
+        return false;
+      }
+      return !(user != null
+          ? !user.equals(appInfo.user) : appInfo.user != null);
+    }
+
+    @Override
+    public int hashCode() {
+      int result = appId != null ? appId.hashCode() : 0;
+      result = 31 * result + (user != null ? user.hashCode() : 0);
+      return result;
+    }
+  }

MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS23 INS23 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS59 UPD74 MOV21 UPD42 UPD42 INS43 INS78 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS45 INS42 INS9 UPD43 INS25 INS60 INS21 INS42 INS25 INS25 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 UPD42 INS42 INS8 INS43 INS59 INS32 INS58 INS42 INS8 UPD43 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS41 INS42 INS41 INS41 INS39 INS42 INS21 INS42 INS43 INS42 INS25 INS25 INS60 INS25 INS41 INS42 INS60 INS21 INS41 INS21 INS21 INS21 UPD42 UPD43 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 INS25 INS24 INS74 INS59 UPD42 INS25 MOV21 UPD42 INS21 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS42 INS7 INS42 INS27 INS8 INS27 INS8 INS43 INS59 INS16 INS8 INS38 INS39 INS59 INS7 INS42 INS32 INS32 INS32 UPD42 INS43 INS42 INS9 INS45 INS32 INS8 MOV58 INS32 INS8 INS43 INS43 INS42 INS32 INS43 INS42 INS8 UPD74 INS32 INS22 INS42 INS22 INS42 INS22 INS34 INS22 INS42 INS52 INS42 INS41 INS27 INS27 INS41 INS42 INS42 INS11 INS27 INS38 INS27 INS41 INS36 INS42 INS16 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 UPD42 INS42 INS42 INS42 INS42 INS21 UPD74 INS42 INS42 INS60 INS54 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 INS24 INS44 INS8 INS21 UPD43 INS25 UPD43 UPD42 INS42 INS42 INS27 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS9 INS42 INS33 INS32 INS32 INS9 INS43 INS42 INS42 INS33 INS32 INS40 INS33 INS9 INS16 INS27 INS32 INS34 INS27 INS36 INS45 INS42 INS45 INS42 INS45 INS42 UPD42 UPD42 INS7 UPD43 UPD42 INS43 MOV59 INS8 INS12 INS32 INS42 INS58 INS32 INS8 INS43 INS42 INS25 INS32 UPD42 UPD74 UPD74 INS42 INS8 UPD43 INS45 UPD42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS27 INS38 INS27 INS42 INS33 INS42 INS42 INS34 INS42 INS16 INS42 INS9 UPD42 UPD42 MOV42 UPD42 INS60 MOV60 MOV25 INS44 INS8 UPD42 MOV42 MOV42 INS74 INS59 UPD42 MOV42 UPD42 MOV42 INS60 INS54 INS42 INS42 INS8 INS42 INS42 INS27 UPD43 UPD43 INS21 UPD42 MOV32 INS42 INS42 INS42 INS42 INS33 INS32 INS40 INS33 INS27 INS32 INS34 UPD42 UPD42 MOV43 INS59 INS8 INS43 INS42 INS25 INS43 INS43 INS42 INS32 INS43 INS59 INS8 INS12 MOV21 INS45 INS32 INS45 INS42 INS45 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS40 INS42 INS33 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS25 INS21 INS25 INS42 INS42 INS8 INS42 INS42 MOV42 UPD42 MOV42 INS14 INS42 INS42 INS32 INS60 MOV25 MOV44 INS8 INS42 INS42 UPD43 UPD43 INS60 INS25 INS41 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 UPD40 INS42 INS8 INS32 INS42 INS8 INS21 INS43 INS42 INS42 INS32 UPD42 MOV42 MOV5 INS59 UPD27 INS8 INS8 INS25 UPD42 INS42 INS27 UPD42 UPD42 INS39 INS59 INS27 INS8 INS42 INS45 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS21 UPD42 UPD42 INS32 INS32 INS42 INS42 UPD42 MOV42 INS42 INS32 INS60 MOV60 MOV70 INS25 INS25 INS42 INS8 INS45 INS42 INS45 INS32 INS42 MOV32 INS42 INS34 MOV41 INS42 INS42 INS42 INS42 INS42 INS32 INS32 MOV42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS39 INS59 INS42 INS8 INS42 INS8 INS21 UPD42 MOV42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS45 INS42 INS9 INS25 MOV25 INS21 INS21 INS32 INS32 INS42 INS32 INS45 INS32 INS45 INS42 INS32 INS45 INS42 INS42 INS42 MOV27 INS8 INS42 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS25 INS21 INS25 INS10 INS42 INS42 INS14 INS42 INS42 INS27 INS45 INS42 INS45 INS32 INS7 INS42 INS8 INS7 INS42 INS8 INS32 INS43 INS32 INS32 INS45 INS32 INS45 INS45 INS40 INS45 INS42 INS45 INS42 INS42 UPD42 UPD42 INS42 INS9 MOV21 INS42 INS9 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS27 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS45 INS32 INS45 INS45 INS32 INS45 INS45 INS42 INS45 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL42 DEL43 DEL43 DEL74 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL42 DEL32