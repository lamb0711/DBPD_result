HDFS-4149. Implement the disallowSnapshot(..) in FSNamesystem and add resetSnapshottable(..) to SnapshotManager.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1405683 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
-/** Directories where taking snapshots is allowed. */
+/**
+ * Directories where taking snapshots is allowed.
+ * 
+ * Like other {@link INode} subclasses, this class is synchronized externally
+ * by the namesystem and FSDirectory locks.
+ */
-      throw new SnapshotException(src + " is not a snapshottable directory.");
+      throw new SnapshotException(
+          "Directory is not a snapshottable directory: " + src);
-  /** A list of snapshots of this directory. */
-  private final List<INodeDirectoryWithSnapshot> snapshots
-      = new ArrayList<INodeDirectoryWithSnapshot>();
-  
-  public INode getSnapshotINode(byte[] name) {
-    if (snapshots == null || snapshots.size() == 0) {
-      return null;
-    }
-    int low = Collections.binarySearch(snapshots, name);
-    if (low >= 0) {
-      return snapshots.get(low);
-    }
-    return null;
-  }
-  
-  /** Number of snapshots is allowed. */
+  /** Snapshots of this directory in ascending order of snapshot id. */
+  private final List<Snapshot> snapshots = new ArrayList<Snapshot>();
+
+  /** Number of snapshots allowed. */
+  
+  int getNumSnapshots() {
+    return snapshots.size();
+  }
+  
+  /** @return the root directory of a snapshot. */
+  public INodeDirectory getSnapshotRoot(byte[] snapshotName) {
+    if (snapshots == null || snapshots.size() == 0) {
+      return null;
+    }
+    int low = Collections.binarySearch(snapshots, snapshotName);
+    if (low >= 0) {
+      return snapshots.get(low).getRoot();
+    }
+    return null;
+  }
-    if (snapshotQuota <= 0) {
+    if (snapshotQuota < 0) {
-          "Cannot set snapshot quota to " + snapshotQuota + " <= 0");
+          "Cannot set snapshot quota to " + snapshotQuota + " < 0");
-  INodeDirectoryWithSnapshot addSnapshotRoot(final String name
-      ) throws SnapshotException {
+  void addSnapshot(final Snapshot s) throws SnapshotException {
-    final INodeDirectoryWithSnapshot r = new INodeDirectoryWithSnapshot(name, this);
-    snapshots.add(r);
+    snapshots.add(s);
-    r.setModificationTime(timestamp);
+    s.getRoot().setModificationTime(timestamp);
-    return r;
-    dumpTreeRecursively(out, prefix, snapshots);
+    dumpTreeRecursively(out, prefix, new Iterable<INodeDirectoryWithSnapshot>() {
+      @Override
+      public Iterator<INodeDirectoryWithSnapshot> iterator() {
+        return new Iterator<INodeDirectoryWithSnapshot>() {
+          final Iterator<Snapshot> i = snapshots.iterator();
+
+          @Override
+          public boolean hasNext() {
+            return i.hasNext();
+          }
+
+          @Override
+          public INodeDirectoryWithSnapshot next() {
+            return i.next().getRoot();
+          }
+
+          @Override
+          public void remove() {
+            throw new UnsupportedOperationException();
+          }
+        };
+      }
+    });

INS26 MOV31 INS40 INS31 UPD74 INS39 INS42 INS8 INS29 UPD43 UPD42 INS39 UPD42 UPD66 INS66 INS65 INS66 INS66 INS43 INS41 INS65 UPD42 UPD42 UPD43 UPD42 INS42 UPD66 INS42 UPD74 UPD66 INS32 INS66 UPD27 UPD42 INS43 INS42 INS42 UPD42 INS32 INS14 INS42 UPD42 INS32 UPD42 MOV42 INS42 INS74 INS1 MOV32 INS42 INS43 MOV43 INS31 INS45 UPD45 INS42 INS78 INS83 INS74 INS42 INS8 INS42 INS43 MOV43 INS41 INS42 INS14 INS74 INS1 INS43 MOV43 INS23 INS31 INS31 INS31 INS42 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 MOV43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS32 INS42 INS41 INS42 INS41 INS42 INS53 INS42 INS42 MOV42 INS42 INS32 INS32 INS14 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 DEL45 DEL83 DEL42 DEL42 DEL43 DEL42 DEL52 DEL14 DEL59 DEL60 DEL42 DEL41