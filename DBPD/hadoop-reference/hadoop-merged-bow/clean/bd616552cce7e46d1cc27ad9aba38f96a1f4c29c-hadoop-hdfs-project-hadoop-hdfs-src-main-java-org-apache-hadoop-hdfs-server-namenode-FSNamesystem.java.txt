HDFS-6825. Edit log corruption due to delayed block removal. Contributed by Yongjun Zhang.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618684 13f79535-47bb-0310-9956-ffa450edef68

-      INodeFile iFile = ((INode)storedBlock.getBlockCollection()).asFile();
+      //
+      // The implementation of delete operation (see @deleteInternal method)
+      // first removes the file paths from namespace, and delays the removal
+      // of blocks to later time for better performance. When
+      // commitBlockSynchronization (this method) is called in between, the
+      // blockCollection of storedBlock could have been assigned to null by
+      // the delete operation, throw IOException here instead of NPE; if the
+      // file path is already removed from namespace by the delete operation,
+      // throw FileNotFoundException here, so not to proceed to the end of
+      // this method to add a CloseOp to the edit log for an already deleted
+      // file (See HDFS-6825).
+      //
+      BlockCollection blockCollection = storedBlock.getBlockCollection();
+      if (blockCollection == null) {
+        throw new IOException("The blockCollection of " + storedBlock
+            + " is null, likely because the file owning this block was"
+            + " deleted and the block removal is delayed");
+      }
+      INodeFile iFile = ((INode)blockCollection).asFile();
+      if (isFileDeleted(iFile)) {
+        throw new FileNotFoundException("File not found: "
+            + iFile.getFullPathName() + ", likely due to delayed block"
+            + " removal");
+      }
-    if (dir.getInode(file.getId()) == null || 
-        file.getParent() == null || (file.isWithSnapshot() &&
-        file.getFileWithSnapshotFeature().isCurrentFileDeleted())) {
+    if (dir.getInode(file.getId()) == null) {
+      return true;
+    }
+
+    // look at the path hierarchy to see if one parent is deleted by recursive
+    // deletion
+    INode tmpChild = file;
+    INodeDirectory tmpParent = file.getParent();
+    while (true) {
+      if (tmpParent == null ||
+          tmpParent.searchChildren(tmpChild.getLocalNameBytes()) < 0) {
+        return true;
+      }
+      if (tmpParent.isRoot()) {
+        break;
+      }
+      tmpChild = tmpParent;
+      tmpParent = tmpParent.getParent();
+    }
+
+    if (file.isWithSnapshot() &&
+        file.getFileWithSnapshotFeature().isCurrentFileDeleted()) {

INS25 INS60 INS60 INS61 MOV27 INS8 INS43 INS59 INS43 INS59 INS9 INS8 MOV27 INS60 INS25 INS25 INS41 INS42 INS42 INS42 INS42 INS42 MOV32 INS25 INS25 INS21 INS21 INS43 INS59 INS27 INS8 INS32 INS8 INS9 INS27 INS8 INS32 INS8 INS7 INS7 INS42 INS42 MOV32 INS42 INS33 INS53 INS42 INS42 INS53 INS27 INS27 INS41 INS42 INS42 INS10 INS42 INS42 INS42 INS32 INS14 INS14 INS42 INS33 INS32 INS34 INS9 INS42 INS42 INS43 INS27 INS43 INS27 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS45 INS32 INS45 INS45 INS42 INS42 INS42 INS42 DEL33 DEL27 DEL27 DEL36 DEL27