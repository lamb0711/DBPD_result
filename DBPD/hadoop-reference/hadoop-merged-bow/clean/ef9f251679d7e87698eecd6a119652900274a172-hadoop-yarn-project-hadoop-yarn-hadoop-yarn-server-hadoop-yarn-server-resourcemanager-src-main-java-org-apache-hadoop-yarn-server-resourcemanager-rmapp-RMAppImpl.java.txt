YARN-514.Delayed store operations should not result in RM unavailability for app submission (Zhijie Shen via bikas)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469059 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.util.ExitUtil;
+    .addTransition(RMAppState.NEW, RMAppState.NEW_SAVING,
+        RMAppEventType.START, new RMAppSavingTransition())
-        RMAppEventType.START, new StartAppAttemptTransition())
+        RMAppEventType.RECOVER, new StartAppAttemptTransition())
+    // Transitions from NEW_SAVING state
+    .addTransition(RMAppState.NEW_SAVING, RMAppState.NEW_SAVING,
+        RMAppEventType.NODE_UPDATE, new RMAppNodeUpdateTransition())
+    .addTransition(RMAppState.NEW_SAVING, RMAppState.SUBMITTED,
+        RMAppEventType.APP_SAVED, new StartAppAttemptTransition())
+    .addTransition(RMAppState.NEW_SAVING, RMAppState.KILLED,
+        RMAppEventType.KILL, new AppKilledTransition())
+    .addTransition(RMAppState.NEW_SAVING, RMAppState.FAILED,
+        RMAppEventType.APP_REJECTED, new AppRejectedTransition())
+
-        RMAppEventType.KILL)
+        EnumSet.of(RMAppEventType.KILL, RMAppEventType.APP_SAVED))
-            RMAppEventType.ATTEMPT_KILLED))
+            RMAppEventType.ATTEMPT_KILLED, RMAppEventType.APP_SAVED))
+    case NEW_SAVING:
+      return YarnApplicationState.NEW_SAVING;
+    case NEW_SAVING:
+      if (event.getType().equals(RMAppEventType.APP_SAVED)) {
+        assert app.getState().equals(RMAppState.NEW_SAVING);
+        RMAppStoredEvent storeEvent = (RMAppStoredEvent) event;
+        if(storeEvent.getStoredException() != null) {
+          // For HA this exception needs to be handled by giving up
+          // master status if we got fenced
+          LOG.error("Failed to store application: "
+              + storeEvent.getApplicationId(),
+              storeEvent.getStoredException());
+          ExitUtil.terminate(1, storeEvent.getStoredException());
+        }
+      }
+
+  private static final class RMAppSavingTransition extends RMAppTransition {
+    @Override
+    public void transition(RMAppImpl app, RMAppEvent event) {
+      // If recovery is enabled then store the application information in a
+      // non-blocking call so make sure that RM has stored the information
+      // needed to restart the AM after RM restart without further client
+      // communication
+      LOG.info("Storing application with id " + app.applicationId);
+      app.rmContext.getStateStore().storeApplication(app);
+    }
+  }
+

INS26 INS40 INS55 INS83 INS83 INS83 INS42 INS43 INS31 INS8 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS49 INS41 INS49 INS25 MOV21 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS40 INS42 INS32 INS8 INS42 INS42 INS32 INS32 INS32 INS42 INS40 INS6 INS60 INS25 INS42 INS42 INS27 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS45 INS40 INS40 INS42 INS32 INS32 INS42 INS40 INS42 INS42 INS11 INS32 INS33 INS21 INS21 INS42 INS42 MOV40 INS40 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS34 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS40 INS40 INS40 INS42 MOV32 MOV42 MOV40 INS40 INS40 MOV14 UPD40 UPD40 INS14 UPD40 UPD40 UPD40 MOV14 INS43 INS32 INS42 INS40 MOV32 INS40 MOV14 INS42 INS32 INS42 INS40 INS40 INS40 INS32 INS42 UPD40 MOV40 INS40 MOV40 MOV14 MOV32 MOV42 INS40 UPD40 MOV40 INS40 MOV14 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 INS14 UPD40 UPD40 UPD40 MOV14 INS43 UPD40 UPD40 UPD40 MOV14 INS42 UPD40 INS14 UPD40 UPD40 UPD40 INS14 INS43 UPD40 UPD40 UPD40 MOV14 INS43 INS42 UPD40 UPD40 UPD40 MOV14 INS42 UPD40 UPD40 MOV14 UPD40 UPD40 MOV14 UPD40 INS14 INS43 INS42 DEL42 DEL8