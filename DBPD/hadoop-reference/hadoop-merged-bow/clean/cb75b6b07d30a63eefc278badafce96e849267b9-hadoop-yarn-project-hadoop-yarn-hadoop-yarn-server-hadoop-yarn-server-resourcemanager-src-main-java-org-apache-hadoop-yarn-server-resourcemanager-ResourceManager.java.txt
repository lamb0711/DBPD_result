Merge r1609845 through r1618416 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1618417 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import org.apache.hadoop.security.AuthenticationFilterInitializer;
-    // 3 conditions need to be satisfied -
+    // 4 conditions need to be satisfied -
+    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer
-    String initializers = conf.get("hadoop.http.filter.initializers");
-    if (UserGroupInformation.isSecurityEnabled()
-        && useYarnAuthenticationFilter
-        && conf.get(authTypeKey, "").equalsIgnoreCase(
-          KerberosAuthenticationHandler.TYPE)) {
-      LOG.info("Using RM authentication filter(kerberos/delegation-token)"
-          + " for RM webapp authentication");
-      RMAuthenticationHandler
-        .setSecretManager(getClientRMService().rmDTSecretManager);
-      String yarnAuthKey =
-          authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;
-      conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());
+    String filterInitializerConfKey = "hadoop.http.filter.initializers";
+    String actualInitializers = "";
+    Class<?>[] initializersClasses =
+        conf.getClasses(filterInitializerConfKey);
-      initializers =
-          initializers == null || initializers.isEmpty() ? "" : ","
-              + initializers;
-      if (!initializers.contains(RMAuthenticationFilterInitializer.class
-        .getName())) {
-        conf.set("hadoop.http.filter.initializers",
-          RMAuthenticationFilterInitializer.class.getName() + initializers);
+    boolean hasHadoopAuthFilterInitializer = false;
+    boolean hasRMAuthFilterInitializer = false;
+    if (initializersClasses != null) {
+      for (Class<?> initializer : initializersClasses) {
+        if (initializer.getName().equals(
+          AuthenticationFilterInitializer.class.getName())) {
+          hasHadoopAuthFilterInitializer = true;
+        }
+        if (initializer.getName().equals(
+          RMAuthenticationFilterInitializer.class.getName())) {
+          hasRMAuthFilterInitializer = true;
+        }
+      }
+      if (UserGroupInformation.isSecurityEnabled()
+          && useYarnAuthenticationFilter
+          && hasHadoopAuthFilterInitializer
+          && conf.get(authTypeKey, "").equals(
+            KerberosAuthenticationHandler.TYPE)) {
+        ArrayList<String> target = new ArrayList<String>();
+        for (Class<?> filterInitializer : initializersClasses) {
+          if (filterInitializer.getName().equals(
+            AuthenticationFilterInitializer.class.getName())) {
+            if (hasRMAuthFilterInitializer == false) {
+              target.add(RMAuthenticationFilterInitializer.class.getName());
+            }
+            continue;
+          }
+          target.add(filterInitializer.getName());
+        }
+        actualInitializers = StringUtils.join(",", target);
+
+        LOG.info("Using RM authentication filter(kerberos/delegation-token)"
+            + " for RM webapp authentication");
+        RMAuthenticationHandler
+          .setSecretManager(getClientRMService().rmDTSecretManager);
+        String yarnAuthKey =
+            authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;
+        conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());
+        conf.set(filterInitializerConfKey, actualInitializers);
-    // if security is not enabled and the default filter initializer has been
-    // set, set the initializer to include the
+    // if security is not enabled and the default filter initializer has not 
+    // been set, set the initializer to include the
+    String initializers = conf.get(filterInitializerConfKey);
-      if (initializers == null || initializers.isEmpty()) {
-        conf.set("hadoop.http.filter.initializers",
+      if (initializersClasses == null || initializersClasses.length == 0) {
+        conf.set(filterInitializerConfKey,
-        conf.set("hadoop.http.filter.initializers",
+        conf.set(filterInitializerConfKey,

INS26 INS26 INS40 INS40 INS60 INS60 INS60 INS60 INS60 INS25 MOV43 INS59 INS43 INS59 INS5 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS43 INS42 INS45 INS42 INS42 INS45 INS74 INS85 INS42 INS32 INS42 INS9 INS42 INS9 INS42 INS33 INS70 MOV25 INS42 INS43 INS76 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS74 INS42 INS25 INS25 INS42 INS60 INS70 INS21 INS21 INS27 INS43 INS76 INS32 INS8 MOV32 INS8 UPD42 INS74 INS59 INS44 INS42 INS8 INS7 INS32 UPD42 INS40 INS34 INS42 INS32 INS42 INS32 INS21 INS32 UPD42 INS21 INS43 INS43 INS42 INS14 INS74 INS42 INS25 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS7 UPD42 MOV42 INS42 INS7 INS42 INS42 INS74 INS43 INS76 INS32 INS8 INS32 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS9 INS42 INS9 INS43 INS43 INS42 INS32 INS42 INS32 MOV25 INS18 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS57 INS42 INS27 INS42 INS42 INS43 INS42 INS9 INS42 UPD42 INS42 MOV32 DEL38 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL33 DEL27 DEL32 DEL27 DEL45 DEL45 DEL42 DEL27 DEL16 DEL7 DEL21 DEL45 DEL42 DEL42 DEL32 DEL45 DEL45