YARN-6050. AMs can't be scheduled on racks or nodes (rkanter)

+import java.util.Collections;
+import java.util.List;
+import org.apache.hadoop.yarn.api.records.ExecutionType;
+import org.apache.hadoop.yarn.api.records.ExecutionTypeRequest;
-        application.getAMResourceRequest() == null &&
+        (application.getAMResourceRequests() == null ||
+            application.getAMResourceRequests().isEmpty()) &&
-      ResourceRequest amReqFromAppContext =
-          appContext.getAMContainerResourceRequest();
-      String labelExp = (amReqFromAppContext != null) ?
-          amReqFromAppContext.getNodeLabelExpression() : null;
+      List<ResourceRequest> amReqsFromAppContext =
+          appContext.getAMContainerResourceRequests();
+      String labelExp =
+          (amReqsFromAppContext != null && !amReqsFromAppContext.isEmpty()) ?
+          amReqsFromAppContext.get(0).getNodeLabelExpression() : null;
-    ResourceRequest amReq = null;
+    List<ResourceRequest> amReqs = null;
-      amReq = validateAndCreateResourceRequest(submissionContext, isRecovery);
+      amReqs = validateAndCreateResourceRequest(submissionContext, isRecovery);
-            submissionContext.getApplicationTags(), amReq, startTime);
+            submissionContext.getApplicationTags(), amReqs, startTime);
-  private ResourceRequest validateAndCreateResourceRequest(
+  private List<ResourceRequest> validateAndCreateResourceRequest(
-      ResourceRequest amReq = submissionContext.getAMContainerResourceRequest();
-      if (amReq == null) {
-        amReq = BuilderUtils
-            .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,
-                ResourceRequest.ANY, submissionContext.getResource(), 1);
-      }
-
-      // set label expression for AM container
-      if (null == amReq.getNodeLabelExpression()) {
-        amReq.setNodeLabelExpression(submissionContext
-            .getNodeLabelExpression());
+      List<ResourceRequest> amReqs =
+          submissionContext.getAMContainerResourceRequests();
+      if (amReqs == null || amReqs.isEmpty()) {
+        if (submissionContext.getResource() != null) {
+          amReqs = Collections.singletonList(BuilderUtils
+              .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,
+                  ResourceRequest.ANY, submissionContext.getResource(), 1));
+        } else {
+          throw new InvalidResourceRequestException("Invalid resource request, "
+              + "no resources requested");
+        }
-        SchedulerUtils.normalizeAndValidateRequest(amReq,
-            scheduler.getMaximumResourceCapability(),
-            submissionContext.getQueue(), scheduler, isRecovery, rmContext);
+        // Find the ANY request and ensure there's only one
+        ResourceRequest anyReq = null;
+        for (ResourceRequest amReq : amReqs) {
+          if (amReq.getResourceName().equals(ResourceRequest.ANY)) {
+            if (anyReq == null) {
+              anyReq = amReq;
+            } else {
+              throw new InvalidResourceRequestException("Invalid resource "
+                  + "request, only one resource request with "
+                  + ResourceRequest.ANY + " is allowed");
+            }
+          }
+        }
+        if (anyReq == null) {
+          throw new InvalidResourceRequestException("Invalid resource request, "
+              + "no resource request specified with " + ResourceRequest.ANY);
+        }
+
+        // Make sure that all of the requests agree with the ANY request
+        // and have correct values
+        for (ResourceRequest amReq : amReqs) {
+          amReq.setCapability(anyReq.getCapability());
+          amReq.setExecutionTypeRequest(
+              ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));
+          amReq.setNumContainers(1);
+          amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);
+        }
+
+        // set label expression for AM ANY request if not set
+        if (null == anyReq.getNodeLabelExpression()) {
+          anyReq.setNodeLabelExpression(submissionContext
+              .getNodeLabelExpression());
+        }
+
+        // Put ANY request at the front
+        if (!amReqs.get(0).equals(anyReq)) {
+          amReqs.remove(anyReq);
+          amReqs.add(0, anyReq);
+        }
+
+        // Normalize all requests
+        for (ResourceRequest amReq : amReqs) {
+          SchedulerUtils.normalizeAndValidateRequest(amReq,
+              scheduler.getMaximumResourceCapability(),
+              submissionContext.getQueue(), scheduler, isRecovery, rmContext);
+
+          amReq.setCapability(
+              scheduler.getNormalizedResource(amReq.getCapability()));
+        }
+        return amReqs;
-
-      amReq.setCapability(scheduler.getNormalizedResource(amReq.getCapability()));
-      return amReq;
-    
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS74 INS43 MOV43 INS74 INS42 MOV38 INS36 INS43 INS43 UPD42 INS25 INS54 INS27 INS74 INS42 INS42 UPD42 INS74 INS27 INS8 INS8 MOV12 MOV27 INS32 INS43 INS43 UPD42 UPD42 INS43 INS43 UPD42 INS27 INS32 MOV25 INS60 INS70 INS25 INS70 MOV25 INS25 INS70 MOV41 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS33 INS42 INS42 UPD27 INS8 MOV43 INS59 INS44 INS42 INS8 INS27 INS8 INS44 INS42 INS8 INS38 INS8 INS44 INS42 MOV8 UPD42 UPD42 INS42 INS42 INS27 INS32 INS32 INS53 INS42 INS33 MOV43 INS42 INS25 INS42 INS33 INS53 MOV43 INS42 INS21 INS21 INS21 INS21 INS32 INS21 INS21 INS43 INS42 MOV21 INS27 INS38 UPD42 MOV42 INS42 INS34 INS42 INS42 INS14 INS32 INS8 INS14 INS32 INS32 INS32 INS32 UPD42 INS32 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 MOV33 INS32 UPD42 INS32 INS43 INS27 INS32 INS42 INS40 INS25 INS43 INS27 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS40 UPD42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS45 INS45 INS42 INS42 INS27 INS8 INS8 INS42 INS45 INS45 INS40 UPD42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS7 INS14 INS42 INS42 INS43 INS27 INS42 INS27 INS40 INS45 INS45 INS45 DEL27 DEL27 DEL42 DEL54