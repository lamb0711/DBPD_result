HDFS-8254. Avoid assigning a leading streamer in StripedDataStreamer to tolerate datanode failure. Contributed by Tsz Wo Nicholas Sze.

+import org.apache.hadoop.hdfs.DFSStripedOutputStream.MultipleBlockingQueue;
-/****************************************************************************
- * The StripedDataStreamer class is used by {@link DFSStripedOutputStream}.
- * There are two kinds of StripedDataStreamer, leading streamer and ordinary
- * stream. Leading streamer requests a block group from NameNode, unwraps
- * it to located blocks and transfers each located block to its corresponding
- * ordinary streamer via a blocking queue.
- *
- ****************************************************************************/
+/**
+ * This class extends {@link DataStreamer} to support writing striped blocks
+ * to datanodes.
+ * A {@link DFSStripedOutputStream} has multiple {@link StripedDataStreamer}s.
+ * Whenever the streamers need to talk the namenode, only the fastest streamer
+ * sends an rpc call to the namenode and then populates the result for the
+ * other streamers.
+ */
+  /**
+   * This class is designed for multiple threads to share a
+   * {@link MultipleBlockingQueue}. Initially, the queue is empty. The earliest
+   * thread calling poll populates entries to the queue and the other threads
+   * will wait for it. Once the entries are populated, all the threads can poll
+   * their entries.
+   *
+   * @param <T> the queue entry type.
+   */
+  static abstract class ConcurrentPoll<T> {
+    private final MultipleBlockingQueue<T> queue;
+
+    ConcurrentPoll(MultipleBlockingQueue<T> queue) {
+      this.queue = queue;
+    }
+
+    T poll(final int i) throws IOException {
+      for(;;) {
+        synchronized(queue) {
+          final T polled = queue.poll(i);
+          if (polled != null) { // already populated; return polled item.
+            return polled;
+          }
+          if (isReady2Populate()) {
+            populate();
+            return queue.poll(i);
+          }
+        }
+
+        // sleep and then retry.
+        try {
+          Thread.sleep(100);
+        } catch(InterruptedException ie) {
+          throw DFSUtil.toInterruptedIOException(
+              "Sleep interrupted during poll", ie);
+        }
+      }
+    }
+
+    boolean isReady2Populate() {
+      return queue.isEmpty();
+    }
+
+    abstract void populate() throws IOException;
+  }
+
-  private volatile boolean isFailed;
+  private volatile boolean failed;
-  void setIsFailed(boolean isFailed) {
-    this.isFailed = isFailed;
+  void setFailed(boolean failed) {
+    this.failed = failed;
-    return isFailed;
-  }
-
-  public boolean isLeadingStreamer () {
-    return index == 0;
+    return failed;
-      coordinator.putEndBlock(index, block);
+      coordinator.offerEndBlock(index, block);
-  protected LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)
+  protected LocatedBlock locateFollowingBlock(final DatanodeInfo[] excludedNodes)
-    if (isLeadingStreamer()) {
-      if (block != null) {
-        // set numByte for the previous block group
-        long bytes = 0;
-        for (int i = 0; i < NUM_DATA_BLOCKS; i++) {
-          final ExtendedBlock b = coordinator.getEndBlock(i);
-          if (b != null) {
-            StripedBlockUtil.checkBlocks(block, i, b);
-            bytes += b.getNumBytes();
-          }
-        }
-        block.setNumBytes(bytes);
+    final MultipleBlockingQueue<LocatedBlock> followingBlocks
+        = coordinator.getFollowingBlocks();
+    return new ConcurrentPoll<LocatedBlock>(followingBlocks) {
+      @Override
+      boolean isReady2Populate() {
+        return super.isReady2Populate()
+            && (block == null || coordinator.hasAllEndBlocks());
-      putLoactedBlocks(super.locateFollowingBlock(excludedNodes));
-    }
+      @Override
+      void populate() throws IOException {
+        getLastException().check(false);
-    return coordinator.getStripedBlock(index);
-  }
+        if (block != null) {
+          // set numByte for the previous block group
+          long bytes = 0;
+          for (int i = 0; i < NUM_DATA_BLOCKS; i++) {
+            final ExtendedBlock b = coordinator.takeEndBlock(i);
+            StripedBlockUtil.checkBlocks(index, block, i, b);
+            bytes += b.getNumBytes();
+          }
+          block.setNumBytes(bytes);
+          block.setBlockId(block.getBlockId() - index);
+        }
-  void putLoactedBlocks(LocatedBlock lb) throws IOException {
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Obtained block group " + lb);
-    }
-    LocatedBlock[] blocks = StripedBlockUtil.parseStripedBlockGroup(
-        (LocatedStripedBlock)lb,
-        BLOCK_STRIPED_CELL_SIZE, NUM_DATA_BLOCKS, NUM_PARITY_BLOCKS);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("locateFollowingBlock: index=" + index + ", block=" + block);
+        }
-    // TODO allow write to continue if blocks.length >= NUM_DATA_BLOCKS
-    assert blocks.length == (NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS) :
-        "Fail to get block group from namenode: blockGroupSize: " +
-            (NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS) + ", blocks.length: " +
-            blocks.length;
-    for (int i = 0; i < blocks.length; i++) {
-      coordinator.putStripedBlock(i, blocks[i]);
-    }
+        final LocatedBlock lb = StripedDataStreamer.super.locateFollowingBlock(
+            excludedNodes);
+        final LocatedBlock[] blocks = StripedBlockUtil.parseStripedBlockGroup(
+            (LocatedStripedBlock)lb,
+            BLOCK_STRIPED_CELL_SIZE, NUM_DATA_BLOCKS, NUM_PARITY_BLOCKS);
+
+        for (int i = 0; i < blocks.length; i++) {
+          if (!coordinator.getStripedDataStreamer(i).isFailed()) {
+            if (blocks[i] == null) {
+              getLastException().set(
+                  new IOException("Failed to get following block, i=" + i));
+            } else {
+              followingBlocks.offer(i, blocks[i]);
+            }
+          }
+        }
+      }
+    }.poll(index);
-    if (isLeadingStreamer()) {
-      final LocatedBlock updated = super.updateBlockForPipeline();
-      final ExtendedBlock block = updated.getBlock();
-      for (int i = 0; i < NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS; i++) {
-        final LocatedBlock lb = new LocatedBlock(block, null, null, null,
-                -1, updated.isCorrupt(), null);
-        lb.setBlockToken(updated.getBlockToken());
-        coordinator.putStripedBlock(i, lb);
+    final MultipleBlockingQueue<LocatedBlock> newBlocks
+        = coordinator.getNewBlocks();
+    return new ConcurrentPoll<LocatedBlock>(newBlocks) {
+      @Override
+      void populate() throws IOException {
+        final ExtendedBlock bg = coordinator.getBlockGroup();
+        final LocatedBlock updated = callUpdateBlockForPipeline(bg);
+        final long newGS = updated.getBlock().getGenerationStamp();
+        for (int i = 0; i < NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS; i++) {
+          final ExtendedBlock bi = coordinator.getStripedDataStreamer(i).getBlock();
+          if (bi != null) {
+            final LocatedBlock lb = new LocatedBlock(newBlock(bi, newGS),
+                null, null, null, -1, updated.isCorrupt(), null);
+            lb.setBlockToken(updated.getBlockToken());
+            newBlocks.offer(i, lb);
+          } else {
+            final LocatedBlock lb = coordinator.getFollowingBlocks().peek(i);
+            lb.getBlock().setGenerationStamp(newGS);
+          }
+        }
-    }
-    return coordinator.getStripedBlock(index);
+    }.poll(index);
-  ExtendedBlock updatePipeline(long newGS) throws IOException {
-    if (isLeadingStreamer()) {
-      final ExtendedBlock newBlock = super.updatePipeline(newGS);
-      for (int i = 0; i < NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS; i++) {
-        coordinator.putUpdateBlock(i, new ExtendedBlock(newBlock));
+  ExtendedBlock updatePipeline(final long newGS) throws IOException {
+    final MultipleBlockingQueue<ExtendedBlock> updateBlocks
+        = coordinator.getUpdateBlocks();
+    return new ConcurrentPoll<ExtendedBlock>(updateBlocks) {
+      @Override
+      void populate() throws IOException {
+        final ExtendedBlock bg = coordinator.getBlockGroup();
+        final ExtendedBlock newBG = newBlock(bg, newGS);
+        final ExtendedBlock updated = callUpdatePipeline(bg, newBG);
+        for (int i = 0; i < NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS; i++) {
+          final ExtendedBlock bi = coordinator.getStripedDataStreamer(i).getBlock();
+          updateBlocks.offer(i, newBlock(bi, updated.getGenerationStamp()));
+        }
-    }
-    return coordinator.getUpdateBlock(index);
+    }.poll(index);
-    return "#" + index + ": isFailed? " + Boolean.toString(isFailed).charAt(0)
+    return "#" + index + ": failed? " + Boolean.toString(failed).charAt(0)

INS26 INS40 INS55 INS31 MOV65 INS29 INS83 INS83 INS42 INS73 INS23 INS31 INS31 INS31 INS31 UPD42 INS78 MOV83 MOV43 MOV42 MOV44 MOV43 INS8 INS78 INS43 INS78 MOV43 UPD66 INS65 INS66 UPD66 UPD66 INS66 INS65 INS66 UPD66 UPD66 UPD66 INS65 INS65 INS42 INS83 INS83 INS74 INS59 INS42 INS44 INS8 INS43 INS42 INS44 INS43 INS8 INS39 INS42 INS8 INS83 INS39 INS42 INS43 UPD42 UPD42 INS42 INS83 INS60 INS41 INS42 INS42 INS60 INS42 INS83 INS60 INS41 INS42 INS42 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS43 INS43 INS42 INS74 INS42 INS21 INS42 INS83 INS39 INS42 INS42 INS24 INS41 INS42 UPD42 INS83 INS74 INS59 INS32 INS83 INS74 INS59 INS83 INS74 INS59 INS32 INS42 INS42 INS42 INS43 INS43 INS7 INS8 INS32 UPD42 INS43 INS43 INS42 INS32 INS14 INS42 INS42 INS43 INS43 INS42 INS32 INS14 INS42 INS43 INS43 INS42 INS32 INS14 UPD42 MOV42 MOV42 UPD45 INS42 INS42 INS22 INS42 INS51 INS54 INS42 INS42 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS74 INS42 INS1 INS42 INS42 UPD42 MOV42 INS42 INS74 INS42 INS1 INS42 INS42 UPD42 MOV42 INS42 INS74 INS42 INS1 INS52 INS42 INS42 INS8 INS8 INS12 UPD42 INS43 MOV43 INS31 INS31 INS43 INS43 INS31 INS43 INS43 INS31 UPD42 INS60 INS25 INS25 INS21 INS44 INS8 INS42 MOV78 INS39 INS42 INS8 MOV78 MOV39 UPD42 MOV42 MOV43 INS8 INS42 INS42 MOV78 INS39 INS42 MOV43 MOV8 INS42 INS42 INS78 INS39 INS42 INS43 INS8 INS83 INS43 INS59 INS27 INS8 INS32 INS8 INS32 INS43 INS42 INS53 MOV41 INS21 MOV25 MOV25 INS60 MOV60 MOV24 INS60 INS42 INS42 INS60 MOV60 INS60 MOV24 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS21 INS41 INS42 INS42 INS34 INS42 INS32 INS27 INS32 INS83 MOV43 INS59 INS83 INS8 INS83 INS43 INS59 INS43 INS39 INS8 INS83 MOV43 INS59 INS83 INS43 INS59 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS48 INS36 INS32 INS42 INS9 INS21 INS42 INS48 INS25 INS42 INS42 INS32 INS42 INS32 UPD42 INS32 INS60 INS25 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS60 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS38 INS8 INS42 INS42 INS42 INS42 MOV32 INS42 INS83 MOV43 INS59 INS27 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS32 MOV21 MOV21 INS42 INS42 INS27 INS32 INS25 INS42 INS32 INS42 INS33 INS60 INS21 INS42 INS42 INS32 UPD42 UPD42 INS32 INS42 INS33 MOV42 UPD42 MOV42 MOV43 INS32 INS42 INS45 INS42 UPD45 UPD42 INS32 INS42 INS27 INS8 MOV8 INS32 INS42 INS83 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS33 INS21 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS14 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS45 INS42 DEL83 DEL39 DEL42 DEL42 DEL34 DEL27 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL33 DEL27 DEL8 DEL25 DEL32 DEL42 DEL42 DEL42 DEL48 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL44 DEL40 DEL42 DEL42 DEL27 DEL36 DEL27 DEL45 DEL42 DEL42 DEL27 DEL36 DEL45 DEL40 DEL27 DEL6 DEL8 DEL31 DEL32 DEL25 DEL42 DEL48 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL48 DEL42 DEL14 DEL32 DEL8 DEL25 DEL42 DEL32 DEL41