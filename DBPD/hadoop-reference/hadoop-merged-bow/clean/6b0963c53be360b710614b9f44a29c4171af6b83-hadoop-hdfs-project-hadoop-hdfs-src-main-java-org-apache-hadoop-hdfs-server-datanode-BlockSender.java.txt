HDFS-2465. Add HDFS support for fadvise readahead and drop-behind. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190626 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileDescriptor;
+import org.apache.hadoop.io.ReadaheadPool;
+import org.apache.hadoop.io.ReadaheadPool.ReadaheadRequest;
+import org.apache.hadoop.io.nativeio.NativeIO;
-  /** Starting position to read */
+  /** Initial position to read */
+  private long initialOffset;
+  /** Current position of read */
+  /** The file descriptor of the block being sent */
+  private FileDescriptor blockInFd;
+
+  // Cache-management related fields
+  private final long readaheadLength;
+  private boolean shouldDropCacheBehindRead;
+  private ReadaheadRequest curReadahead;
+  private long lastCacheDropOffset;
+  private static final long CACHE_DROP_INTERVAL_BYTES = 1024 * 1024; // 1MB
+  /**
+   * Minimum length of read below which management of the OS
+   * buffer cache is disabled.
+   */
+  private static final long LONG_READ_THRESHOLD_BYTES = 256 * 1024;
+  
+  private static ReadaheadPool readaheadPool =
+    ReadaheadPool.getInstance();
+
+      this.readaheadLength = datanode.getReadaheadLength();
+      this.shouldDropCacheBehindRead = datanode.shouldDropCacheBehindReads();
+      if (blockIn instanceof FileInputStream) {
+        blockInFd = ((FileInputStream)blockIn).getFD();
+      } else {
+        blockInFd = null;
+      }
+    if (blockInFd != null && shouldDropCacheBehindRead) {
+      // drop the last few MB of the file from cache
+      try {
+        NativeIO.posixFadviseIfPossible(
+            blockInFd, lastCacheDropOffset, offset - lastCacheDropOffset,
+            NativeIO.POSIX_FADV_DONTNEED);
+      } catch (Exception e) {
+        LOG.warn("Unable to drop cache on file close", e);
+      }
+    }
+    if (curReadahead != null) {
+      curReadahead.cancel();
+    }
+    
+      blockInFd = null;
-    final long initialOffset = offset;
+    initialOffset = offset;
+    lastCacheDropOffset = initialOffset;
+
+    if (isLongRead() && blockInFd != null) {
+      // Advise that this file descriptor will be accessed sequentially.
+      NativeIO.posixFadviseIfPossible(blockInFd, 0, 0, NativeIO.POSIX_FADV_SEQUENTIAL);
+    }
+    
+    // Trigger readahead of beginning of file if configured.
+    manageOsCache();
+
+        manageOsCache();
+
+  /**
+   * Manage the OS buffer cache by performing read-ahead
+   * and drop-behind.
+   */
+  private void manageOsCache() throws IOException {
+    if (!isLongRead() || blockInFd == null) {
+      // don't manage cache manually for short-reads, like
+      // HBase random read workloads.
+      return;
+    }
+
+    // Perform readahead if necessary
+    if (readaheadLength > 0 && readaheadPool != null) {
+      curReadahead = readaheadPool.readaheadStream(
+          clientTraceFmt, blockInFd,
+          offset, readaheadLength, Long.MAX_VALUE,
+          curReadahead);
+    }
+
+    // Drop what we've just read from cache, since we aren't
+    // likely to need it again
+    long nextCacheDropOffset = lastCacheDropOffset + CACHE_DROP_INTERVAL_BYTES;
+    if (shouldDropCacheBehindRead &&
+        offset >= nextCacheDropOffset) {
+      long dropLength = offset - lastCacheDropOffset;
+      if (dropLength >= 1024) {
+        NativeIO.posixFadviseIfPossible(blockInFd,
+            lastCacheDropOffset, dropLength,
+            NativeIO.POSIX_FADV_DONTNEED);
+      }
+      lastCacheDropOffset += CACHE_DROP_INTERVAL_BYTES;
+    }
+  }
+
+  private boolean isLongRead() {
+    return (endOffset - offset) > LONG_READ_THRESHOLD_BYTES;
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS59 INS29 INS83 INS39 MOV59 INS29 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS42 INS65 INS65 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS65 INS42 INS27 INS42 INS42 INS32 INS25 INS25 INS21 INS21 INS25 INS21 INS65 INS42 INS25 INS25 INS60 INS25 INS41 UPD66 INS66 INS66 INS34 INS34 INS66 INS66 INS34 INS34 INS42 INS42 INS27 INS8 INS27 INS8 INS7 INS7 INS27 INS8 INS32 INS66 INS66 INS27 INS8 INS27 INS8 INS39 INS59 INS27 INS8 INS27 INS21 INS21 INS25 INS27 INS42 INS54 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS27 INS21 INS42 INS38 INS27 INS41 INS27 INS27 INS21 INS42 INS27 INS42 INS27 INS60 INS25 INS21 INS36 INS42 INS7 INS7 INS62 INS8 INS8 INS42 INS33 INS8 INS12 INS32 INS7 INS42 INS42 INS33 INS32 INS32 INS42 INS33 INS42 INS34 INS42 INS33 INS7 INS42 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS7 INS27 INS22 INS32 INS22 INS32 INS42 INS43 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS34 INS34 INS40 INS21 INS42 INS42 INS32 INS42 INS27 INS42 INS34 INS21 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS7 INS7 INS32 INS43 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS27 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS36 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS11 INS43 INS42 INS42 DEL83 DEL39 DEL42 DEL42 DEL59 DEL60