HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng

-import org.apache.hadoop.io.erasurecode.rawcoder.util.CoderUtil;
+import org.apache.hadoop.io.erasurecode.ErasureCoderOptions;
-public class RSRawDecoder extends AbstractRawErasureDecoder {
+public class RSRawDecoder extends RawErasureDecoder {
-  public RSRawDecoder(int numDataUnits, int numParityUnits) {
-    super(numDataUnits, numParityUnits);
-    if (numDataUnits + numParityUnits >= RSUtil.GF.getFieldSize()) {
+  public RSRawDecoder(ErasureCoderOptions coderOptions) {
+    super(coderOptions);
+
+    int numAllUnits = getNumAllUnits();
+    if (getNumAllUnits() >= RSUtil.GF.getFieldSize()) {
-    int numAllUnits = getNumDataUnits() + numParityUnits;
-    if (isAllowingVerboseDump()) {
-      DumpUtil.dumpMatrix(encodeMatrix, numDataUnits, numAllUnits);
+    if (allowVerboseDump()) {
+      DumpUtil.dumpMatrix(encodeMatrix, getNumDataUnits(), numAllUnits);
-  protected void doDecode(ByteBuffer[] inputs, int[] erasedIndexes,
-                          ByteBuffer[] outputs) {
-    prepareDecoding(inputs, erasedIndexes);
+  protected void doDecode(ByteBufferDecodingState decodingState) {
+    CoderUtil.resetOutputBuffers(decodingState.outputs,
+        decodingState.decodeLength);
+    prepareDecoding(decodingState.inputs, decodingState.erasedIndexes);
-      realInputs[i] = inputs[validIndexes[i]];
+      realInputs[i] = decodingState.inputs[validIndexes[i]];
-    RSUtil.encodeData(gfTables, realInputs, outputs);
+    RSUtil.encodeData(gfTables, realInputs, decodingState.outputs);
-  protected void doDecode(byte[][] inputs, int[] inputOffsets,
-                          int dataLen, int[] erasedIndexes,
-                          byte[][] outputs, int[] outputOffsets) {
-    prepareDecoding(inputs, erasedIndexes);
+  protected void doDecode(ByteArrayDecodingState decodingState) {
+    int dataLen = decodingState.decodeLength;
+    CoderUtil.resetOutputBuffers(decodingState.outputs,
+        decodingState.outputOffsets, dataLen);
+    prepareDecoding(decodingState.inputs, decodingState.erasedIndexes);
-      realInputs[i] = inputs[validIndexes[i]];
-      realInputOffsets[i] = inputOffsets[validIndexes[i]];
+      realInputs[i] = decodingState.inputs[validIndexes[i]];
+      realInputOffsets[i] = decodingState.inputOffsets[validIndexes[i]];
-            outputs, outputOffsets);
+        decodingState.outputs, decodingState.outputOffsets);
-    int[] tmpValidIndexes = new int[getNumDataUnits()];
-    CoderUtil.makeValidIndexes(inputs, tmpValidIndexes);
+    int[] tmpValidIndexes = CoderUtil.getValidIndexes(inputs);
-    if (isAllowingVerboseDump()) {
+    if (allowVerboseDump()) {

UPD40 UPD43 UPD42 INS44 MOV25 INS44 INS43 UPD42 MOV42 INS43 UPD42 INS21 INS43 UPD42 MOV42 INS60 INS21 INS60 INS42 UPD42 UPD42 MOV42 INS32 INS42 INS39 INS59 INS32 MOV21 MOV5 INS59 INS32 INS32 UPD42 UPD42 UPD42 INS40 INS40 INS42 INS40 INS40 INS40 INS42 INS40 UPD42 UPD42 INS40 INS40 UPD42 INS42 INS40 INS40 INS40 INS40 MOV42 INS32 UPD42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 MOV42 MOV32 MOV2 MOV2 INS40 INS40 INS40 DEL39 DEL42 DEL44 DEL39 DEL44 DEL42 DEL32 DEL42 DEL27 DEL42 DEL42 DEL27 DEL43 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL42 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL39 DEL85 DEL5 DEL3 DEL59 DEL60 DEL42 DEL32 DEL21