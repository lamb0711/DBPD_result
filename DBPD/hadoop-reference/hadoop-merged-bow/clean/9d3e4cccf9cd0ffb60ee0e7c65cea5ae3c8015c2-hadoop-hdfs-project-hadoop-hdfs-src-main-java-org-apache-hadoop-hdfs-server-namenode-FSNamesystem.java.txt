HDFS-5040.Audit log for admin commands/ logging output of all DFS admin commands. Contributed by Kuhu Shukla.

+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
-  private void logAuditEvent(boolean succeeded, String cmd, String src)
+  void logAuditEvent(boolean succeeded, String cmd, String src)
-    checkSuperuserPrivilege();
+    String operationName = "metaSave";
+    checkSuperuserPrivilege(operationName);
-      writeUnlock("metaSave");
+      writeUnlock(operationName);
+    logAuditEvent(true, operationName, null);
-    final String operationName = "setQuota";
+    final String operationName = getQuotaCommand(nsQuota, ssQuota);
-  DatanodeInfo[] datanodeReport(final DatanodeReportType type
-      ) throws AccessControlException, StandbyException {
-    checkSuperuserPrivilege();
+  DatanodeInfo[] datanodeReport(final DatanodeReportType type)
+      throws IOException {
+    String operationName = "datanodeReport";
+    DatanodeInfo[] arr;
+    checkSuperuserPrivilege(operationName);
-
-      DatanodeInfo[] arr = new DatanodeInfo[results.size()];
+      arr = new DatanodeInfo[results.size()];
-      return arr;
-      readUnlock("datanodeReport");
+      readUnlock(operationName);
+    logAuditEvent(true, operationName, null);
+    return arr;
-      ) throws AccessControlException, StandbyException {
-    checkSuperuserPrivilege();
+      ) throws IOException {
+    String operationName = "getDatanodeStorageReport";
+    DatanodeStorageReport[] reports;
+    checkSuperuserPrivilege(operationName);
-      DatanodeStorageReport[] reports = new DatanodeStorageReport[datanodes.size()];
+      reports = new DatanodeStorageReport[datanodes.size()];
-      return reports;
+    logAuditEvent(true, operationName, null);
+    return reports;
+    String operationName = "saveNamespace";
-    checkSuperuserPrivilege();
+    checkSuperuserPrivilege(operationName);
-      readUnlock("saveNamespace");
+      readUnlock(operationName);
+    logAuditEvent(true, operationName, null);
-  boolean restoreFailedStorage(String arg) throws AccessControlException,
-      StandbyException {
-    checkSuperuserPrivilege();
+  boolean restoreFailedStorage(String arg) throws IOException {
+    String operationName = getFailedStorageCommand(arg);
+    boolean val = false;
+    checkSuperuserPrivilege(operationName);
-      if(arg.equals("check"))
-        return getFSImage().getStorage().getRestoreFailedStorage();
-      
-      boolean val = arg.equals("true");  // false if not
-      getFSImage().getStorage().setRestoreFailedStorage(val);
-      
-      return val;
+      if(arg.equals("check")) {
+        val = getFSImage().getStorage().getRestoreFailedStorage();
+      } else {
+        val = arg.equals("true");  // false if not
+        getFSImage().getStorage().setRestoreFailedStorage(val);
+      }
-      writeUnlock("restoreFailedStorage");
+      writeUnlock(operationName);
+    logAuditEvent(true, operationName, null);
+    return val;
-    checkSuperuserPrivilege();
+    String operationName = "finalizeUpgrade";
+    checkSuperuserPrivilege(operationName);
-      writeUnlock("finalizeUpgrade");
+      writeUnlock(operationName);
+    logAuditEvent(true, operationName, null);
+    String operationName = "refreshNodes";
-    checkSuperuserPrivilege();
+    checkSuperuserPrivilege(operationName);
+    logAuditEvent(true, operationName, null);
+    String operationName = "setBalancerBandwidth";
-    checkSuperuserPrivilege();
+    checkSuperuserPrivilege(operationName);
+    logAuditEvent(true, operationName, null);
+    String operationName = action.toString().toLowerCase();
+    boolean error = false;
-      checkSuperuserPrivilege();
+      checkSuperuserPrivilege(operationName);
+        error = true;
+    if (!error) {
+      logAuditEvent(true, operationName, null);
+    }
-    checkSuperuserPrivilege();
+    String operationName = "rollEditLog";
+    CheckpointSignature result = null;
+    checkSuperuserPrivilege(operationName);
-      return getFSImage().rollEditLog(getEffectiveLayoutVersion());
+      result = getFSImage().rollEditLog(getEffectiveLayoutVersion());
-      writeUnlock("rollEditLog");
+      writeUnlock(operationName);
+    logAuditEvent(true, operationName, null);
+    return result;
+    checkSuperuserPrivilege(operationName);
-      checkSuperuserPrivilege();
+    checkSuperuserPrivilege(operationName);
-      checkSuperuserPrivilege();
-    checkSuperuserPrivilege();
+    final String operationName = "queryRollingUpgrade";
+    checkSuperuserPrivilege(operationName);
-      return rollingUpgradeInfo;
-      readUnlock("queryRollingUpgrade");
+      readUnlock(operationName);
+    logAuditEvent(true, operationName, null, null, null);
+    return rollingUpgradeInfo;
-    checkSuperuserPrivilege();
+    checkSuperuserPrivilege(operationName);
-    checkSuperuserPrivilege();
+    checkSuperuserPrivilege(operationName);
+  void checkSuperuserPrivilege(String operationName)
+      throws IOException {
+    try {
+      checkSuperuserPrivilege();
+    } catch (AccessControlException ace) {
+      logAuditEvent(false, operationName, null);
+      throw ace;
+    }
+  }
+
+  String getQuotaCommand(long nsQuota, long dsQuota) {
+    if (nsQuota == HdfsConstants.QUOTA_RESET
+        && dsQuota == HdfsConstants.QUOTA_DONT_SET) {
+      return "clearQuota";
+    } else if (nsQuota == HdfsConstants.QUOTA_DONT_SET
+        && dsQuota == HdfsConstants.QUOTA_RESET) {
+      return "clearSpaceQuota";
+    } else if (dsQuota == HdfsConstants.QUOTA_DONT_SET) {
+      return "setQuota";
+    } else {
+      return "setSpaceQuota";
+    }
+  }
+
+  String getFailedStorageCommand(String mode) {
+    if(mode.equals("check")) {
+      return "checkRestoreFailedStorage";
+    } else if (mode.equals("true")) {
+      return "enableRestoreFailedStorage";
+    } else {
+      return "disableRestoreFailedStorage";
+    }
+  }

INS26 INS40 INS31 INS31 INS31 UPD43 UPD43 UPD43 INS39 INS42 INS44 INS43 INS8 INS43 INS42 INS44 INS44 INS8 INS43 INS42 INS44 INS8 INS60 INS21 UPD42 INS60 INS60 INS21 MOV41 UPD42 INS60 INS60 INS21 MOV41 INS60 INS21 UPD42 INS60 INS60 INS21 MOV41 INS60 INS21 INS60 INS21 INS60 INS21 INS60 INS60 INS25 INS60 INS60 INS21 INS41 INS21 INS21 INS60 INS21 INS21 MOV41 INS43 INS42 INS42 INS54 INS42 INS39 INS42 INS39 INS42 INS25 INS42 INS43 INS42 INS25 INS43 INS59 INS32 INS43 INS59 MOV5 INS59 INS32 INS43 INS59 MOV5 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS39 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS39 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS32 INS42 INS32 INS32 INS83 INS43 INS59 INS32 INS32 INS42 INS8 INS12 INS27 INS8 INS25 INS42 INS32 INS8 INS25 INS42 INS42 INS45 INS42 INS42 INS9 INS42 INS33 INS32 INS42 INS42 INS45 INS42 INS42 INS21 INS42 INS9 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS21 INS42 INS9 INS42 INS33 INS42 INS42 INS45 INS42 INS21 INS42 INS9 INS42 INS33 INS42 INS42 INS32 INS42 INS9 INS42 MOV21 INS42 INS9 INS42 INS33 INS42 INS42 INS45 INS42 MOV21 INS42 INS9 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS9 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS9 INS42 INS33 INS42 INS42 INS32 INS42 INS9 INS42 INS21 INS42 INS42 INS45 INS42 INS42 INS33 INS42 INS21 INS42 INS9 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS9 INS42 INS33 INS33 INS33 INS42 INS42 MOV21 INS44 INS8 INS27 INS27 INS41 INS27 INS8 INS25 INS42 INS42 INS45 INS41 INS32 INS8 INS8 INS42 INS42 INS42 INS7 INS7 INS32 INS42 INS42 INS8 INS8 MOV32 INS32 INS42 INS21 INS32 INS7 MOV43 INS42 INS21 INS53 INS42 INS40 INS42 INS40 INS45 INS27 INS27 INS41 INS27 INS8 INS8 INS45 INS42 INS42 INS45 INS41 INS41 INS42 INS42 MOV3 INS42 INS42 MOV3 INS42 INS42 INS21 INS21 MOV21 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS9 INS42 INS33 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS40 INS45 INS42 INS40 INS41 INS41 INS45 INS45 INS7 INS7 INS42 INS9 INS42 INS9 INS42 INS33 INS45 INS45 INS42 MOV32 INS42 MOV32 DEL83 DEL45 DEL45 DEL42 DEL43 DEL42 DEL59 DEL60 DEL45 DEL42 DEL59 DEL60 DEL45 DEL42 DEL43 DEL41 DEL39 DEL42 DEL59 DEL60 DEL45 DEL45 DEL41 DEL45 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL45