HDFS-5121.  Add RPCs for creating and manipulating cache pools.  (Contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1519841 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
+    checkOperation(OperationCategory.WRITE);
-      List<PathCacheDirective> directives) {
-    return cacheManager.addDirectives(directives);
+      List<PathCacheDirective> directives) throws IOException {
+    CacheEntryWithPayload retryCacheEntry =
+        RetryCache.waitForCompletion(retryCache, null);
+    if (retryCacheEntry != null && retryCacheEntry.isSuccess()) {
+      return (List<Fallible<PathCacheEntry>>) retryCacheEntry.getPayload();
+    }
+    final FSPermissionChecker pc = getPermissionChecker();
+    boolean success = false;
+    List<Fallible<PathCacheEntry>> results = null;
+    checkOperation(OperationCategory.WRITE);
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException(
+            "Cannot add path cache directive", safeMode);
+      }
+      results = cacheManager.addDirectives(directives, pc);
+      //getEditLog().logAddPathCacheDirectives(results); FIXME: HDFS-5119
+      success = true;
+    } finally {
+      writeUnlock();
+      if (success) {
+        getEditLog().logSync();
+      }
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "addPathCacheDirectives", null, null, null);
+      }
+      RetryCache.setState(retryCacheEntry, success, results);
+    }
+    return results;
-  List<Fallible<Long>> removePathCacheEntries(List<Long> ids) {
-    return cacheManager.removeEntries(ids);
+  List<Fallible<Long>> removePathCacheEntries(List<Long> ids) throws IOException {
+    CacheEntryWithPayload retryCacheEntry =
+        RetryCache.waitForCompletion(retryCache, null);
+    if (retryCacheEntry != null && retryCacheEntry.isSuccess()) {
+      return (List<Fallible<Long>>) retryCacheEntry.getPayload();
+    }
+    final FSPermissionChecker pc = getPermissionChecker();
+    boolean success = false;
+    List<Fallible<Long>> results = null;
+    checkOperation(OperationCategory.WRITE);
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException(
+            "Cannot remove path cache directives", safeMode);
+      }
+      results = cacheManager.removeEntries(ids, pc);
+      //getEditLog().logRemovePathCacheEntries(results); FIXME: HDFS-5119
+      success = true;
+    } finally {
+      writeUnlock();
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "removePathCacheEntries", null, null, null);
+      }
+      RetryCache.setState(retryCacheEntry, success, results);
+    }
+    getEditLog().logSync();
+    return results;
-      int maxReplies) {
-    return cacheManager.listPathCacheEntries(startId, pool, maxReplies);
+      int maxReplies) throws IOException {
+    checkOperation(OperationCategory.READ);
+    readLock();
+    try {
+      checkOperation(OperationCategory.READ);
+      return cacheManager.listPathCacheEntries(startId, pool, maxReplies);
+    } finally {
+      readUnlock();
+    }
+  }
+
+  public void addCachePool(CachePoolInfo req) throws IOException {
+    final FSPermissionChecker pc = getPermissionChecker();
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    checkOperation(OperationCategory.WRITE);
+    writeLock();
+    boolean success = false;
+    try {
+      checkOperation(OperationCategory.WRITE);
+      if (!pc.isSuperUser()) {
+        throw new AccessControlException("Non-super users cannot " +
+            "add cache pools.");
+      }
+      if (isInSafeMode()) {
+        throw new SafeModeException(
+            "Cannot add cache pool " + req.getPoolName(), safeMode);
+      }
+      cacheManager.addCachePool(req);
+      //getEditLog().logAddCachePool(req); // FIXME: HDFS-5119
+      success = true;
+    } finally {
+      writeUnlock();
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "addCachePool", req.getPoolName(), null, null);
+      }
+      RetryCache.setState(cacheEntry, success);
+    }
+    
+    getEditLog().logSync();
+  }
+
+  public void modifyCachePool(CachePoolInfo req) throws IOException {
+    final FSPermissionChecker pc = getPermissionChecker();
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    checkOperation(OperationCategory.WRITE);
+    writeLock();
+    boolean success = false;
+    try {
+      checkOperation(OperationCategory.WRITE);
+      if (!pc.isSuperUser()) {
+        throw new AccessControlException("Non-super users cannot " +
+            "modify cache pools.");
+      }
+      if (isInSafeMode()) {
+        throw new SafeModeException(
+            "Cannot modify cache pool " + req.getPoolName(), safeMode);
+      }
+      cacheManager.modifyCachePool(req);
+      //getEditLog().logModifyCachePool(req); // FIXME: HDFS-5119
+      success = true;
+    } finally {
+      writeUnlock();
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "modifyCachePool", req.getPoolName(), null, null);
+      }
+      RetryCache.setState(cacheEntry, success);
+    }
+
+    getEditLog().logSync();
+  }
+
+  public void removeCachePool(String cachePoolName) throws IOException {
+    final FSPermissionChecker pc = getPermissionChecker();
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    checkOperation(OperationCategory.WRITE);
+    writeLock();
+    boolean success = false;
+    try {
+      checkOperation(OperationCategory.WRITE);
+      if (!pc.isSuperUser()) {
+        throw new AccessControlException("Non-super users cannot " +
+            "remove cache pools.");
+      }
+      if (isInSafeMode()) {
+        throw new SafeModeException(
+            "Cannot remove cache pool " + cachePoolName, safeMode);
+      }
+      cacheManager.removeCachePool(cachePoolName);
+      //getEditLog().logRemoveCachePool(req); // FIXME: HDFS-5119
+      success = true;
+    } finally {
+      writeUnlock();
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "removeCachePool", cachePoolName, null, null);
+      }
+      RetryCache.setState(cacheEntry, success);
+    }
+    
+    getEditLog().logSync();
+  }
+
+  public List<CachePoolInfo> listCachePools(String prevKey,
+      int maxRepliesPerRequest) throws IOException {
+    final FSPermissionChecker pc = getPermissionChecker();
+    List<CachePoolInfo> results;
+    checkOperation(OperationCategory.READ);
+    readLock();
+    try {
+      checkOperation(OperationCategory.READ);
+      results = cacheManager.listCachePools(pc, prevKey, maxRepliesPerRequest);
+    } finally {
+      readUnlock();
+    }
+    return results;
+  }
+
+  public CacheManager getCacheManager() {
+    return cacheManager;
-
-  public CacheManager getCacheManager() {
-    return cacheManager;
-  }

INS26 MOV55 INS40 INS31 INS31 INS31 INS31 INS43 INS8 INS43 INS8 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS21 INS42 INS60 INS25 INS60 INS60 INS60 INS21 INS21 INS54 INS41 INS42 INS60 INS25 INS60 INS60 INS60 INS21 INS21 INS54 INS21 INS41 INS42 INS21 INS21 INS54 INS43 INS42 INS42 INS60 INS60 INS25 INS21 INS21 INS60 INS54 INS21 INS43 INS42 INS42 INS60 INS60 INS25 INS21 INS21 INS60 INS54 INS21 INS43 INS42 INS42 INS60 INS60 INS25 INS21 INS21 INS60 INS54 INS21 INS43 INS43 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS21 INS21 INS54 INS41 INS32 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS39 INS59 INS74 INS59 INS32 INS32 INS8 INS8 INS42 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS39 INS59 INS74 INS59 INS32 INS32 INS8 INS8 INS32 INS42 INS32 INS32 MOV8 INS8 INS42 INS83 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS39 INS59 INS8 INS8 INS32 INS42 INS83 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS39 INS59 INS8 INS8 INS32 INS42 INS83 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS39 INS59 INS8 INS8 INS32 INS42 INS42 INS42 INS83 INS43 INS59 INS74 INS59 INS32 INS32 INS8 INS8 INS42 INS42 INS40 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS42 INS32 INS42 INS9 INS43 INS74 INS42 INS33 INS42 INS40 INS42 INS21 INS25 INS21 INS21 INS21 INS25 INS25 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS42 INS32 INS42 INS9 INS43 INS74 INS42 INS33 INS42 INS40 INS42 INS21 INS25 INS21 INS21 INS21 INS25 INS21 INS32 INS42 INS42 INS40 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS40 INS42 INS42 INS9 INS21 INS25 INS25 INS21 INS21 INS21 INS25 INS21 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS40 INS42 INS42 INS9 INS21 INS25 INS25 INS21 INS21 INS21 INS25 INS21 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS40 INS42 INS42 INS9 INS21 INS25 INS25 INS21 INS21 INS21 INS25 INS21 INS32 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS40 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS42 INS42 INS43 INS43 INS32 INS32 INS8 INS7 INS7 INS32 INS42 INS8 INS27 INS8 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS42 INS42 INS43 INS43 INS32 INS32 INS8 INS7 INS7 INS32 INS27 INS8 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS38 INS8 INS32 INS8 INS32 INS7 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS38 INS8 INS32 INS8 INS32 INS7 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS38 INS8 INS32 INS8 INS32 INS7 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS74 INS32 INS42 INS42 INS42 INS40 INS42 INS53 INS42 INS32 INS42 INS9 INS42 INS21 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS40 INS42 INS53 INS42 INS32 INS42 INS9 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS53 INS42 INS53 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS53 INS42 INS53 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS53 INS42 INS53 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS43 INS74 INS42 INS42 INS14 MOV42 MOV42 MOV42 INS42 INS32 INS42 INS42 INS32 INS43 INS74 INS42 INS42 INS14 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS45 INS42 INS32 INS42 INS42 INS42 INS45 INS33 INS33 INS33 INS42 INS43 INS43 INS43 INS45 INS42 INS42 INS42 INS45 INS33 INS33 INS33 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS45 INS32 INS33 INS33 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS45 INS32 INS33 INS33 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS45 INS42 INS33 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 DEL32 DEL41 DEL8 DEL32 DEL41 DEL8