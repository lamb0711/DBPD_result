YARN-701. Use application tokens irrespective of secure or non-secure mode. Contributed by Vinod K V.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504604 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.UndeclaredThrowableException;
+import java.security.PrivilegedExceptionAction;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.yarn.security.AMRMTokenIdentifier;
-    RegisterApplicationMasterRequest req =
+    final RegisterApplicationMasterRequest req =
-    return amRMProtocol.registerApplicationMaster(req);
+    UserGroupInformation ugi =
+        UserGroupInformation.createRemoteUser(attemptId.toString());
+    Token<AMRMTokenIdentifier> token =
+        context.getRMApps().get(attemptId.getApplicationId())
+          .getRMAppAttempt(attemptId).getAMRMToken();
+    ugi.addTokenIdentifier(token.decodeIdentifier());
+    try {
+      return ugi
+        .doAs(new PrivilegedExceptionAction<RegisterApplicationMasterResponse>() {
+          @Override
+          public RegisterApplicationMasterResponse run() throws Exception {
+            return amRMProtocol.registerApplicationMaster(req);
+          }
+        });
+    } catch (UndeclaredThrowableException e) {
+      throw (Exception) e.getCause();
+    }
-    AllocateRequest req = AllocateRequest.newInstance(attemptId,
+    final AllocateRequest req = AllocateRequest.newInstance(attemptId,
-    return amRMProtocol.allocate(req);
+    UserGroupInformation ugi =
+        UserGroupInformation.createRemoteUser(attemptId.toString());
+    Token<AMRMTokenIdentifier> token =
+        context.getRMApps().get(attemptId.getApplicationId())
+          .getRMAppAttempt(attemptId).getAMRMToken();
+    ugi.addTokenIdentifier(token.decodeIdentifier());
+    try {
+      return ugi.doAs(new PrivilegedExceptionAction<AllocateResponse>() {
+        @Override
+        public AllocateResponse run() throws Exception {
+          return amRMProtocol.allocate(req);
+        }
+      });
+    } catch (UndeclaredThrowableException e) {
+      throw (Exception) e.getCause();
+    }
-    FinishApplicationMasterRequest req = Records.newRecord(FinishApplicationMasterRequest.class);
+    final FinishApplicationMasterRequest req =
+        Records.newRecord(FinishApplicationMasterRequest.class);
-    amRMProtocol.finishApplicationMaster(req);
+    UserGroupInformation ugi =
+        UserGroupInformation.createRemoteUser(attemptId.toString());
+    Token<AMRMTokenIdentifier> token =
+        context.getRMApps().get(attemptId.getApplicationId())
+          .getRMAppAttempt(attemptId).getAMRMToken();
+    ugi.addTokenIdentifier(token.decodeIdentifier());
+    ugi.doAs(new PrivilegedExceptionAction<Object>() {
+      @Override
+      public Object run() throws Exception {
+        amRMProtocol.finishApplicationMaster(req);
+        return null;
+      }
+    });

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS8 INS60 INS60 INS21 INS54 MOV60 INS60 INS60 INS21 INS54 INS60 INS60 INS21 INS21 INS83 INS43 INS59 INS74 INS59 INS32 INS8 INS12 INS83 INS43 INS59 INS74 INS59 INS32 INS8 INS12 INS83 INS43 INS59 INS74 INS59 INS32 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS41 INS44 INS8 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS41 INS44 INS8 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS1 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS31 INS32 INS42 INS32 INS74 INS1 INS43 INS32 INS32 INS42 INS32 INS74 INS1 INS43 INS32 INS32 INS42 INS32 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS41 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 MOV8 INS33 INS42 INS42 INS42 MOV41 INS42 INS42 INS42