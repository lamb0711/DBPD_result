YARN-3075. NodeLabelsManager implementation to retrieve label to node mapping (Varun Saxena via wangda)

+    public NodeId nodeId;
-    protected Node() {
+    protected Node(NodeId nodeid) {
+      nodeId = nodeid;
-      Node c = new Node();
+      Node c = new Node(nodeId);
-  
+
+  private void addNodeToLabels(NodeId node, Set<String> labels) {
+    for(String l : labels) {
+      labelCollections.get(l).addNodeId(node);
+    }
+  }
+
+  private void removeNodeFromLabels(NodeId node, Set<String> labels) {
+    for(String l : labels) {
+      labelCollections.get(l).removeNodeId(node);
+    }
+  }
+
+  private void replaceNodeForLabels(NodeId node, Set<String> oldLabels,
+      Set<String> newLabels) {
+    if(oldLabels != null) {
+      removeNodeFromLabels(node, oldLabels);
+    }
+    addNodeToLabels(node, newLabels);
+  }
+
+    Set<String> oldLabels;
-        case REMOVE: 
+        case REMOVE:
+          removeNodeFromLabels(nodeId, labels);
+            removeNodeFromLabels(node.nodeId, labels);
+          addNodeToLabels(nodeId, labels);
+            addNodeToLabels(node.nodeId, labels);
+          replaceNodeForLabels(nodeId, host.labels, labels);
+            replaceNodeForLabels(node.nodeId, node.labels, labels);
-          if (nm.labels == null) {
-            nm.labels = new HashSet<String>();
-          }
+            addNodeToLabels(nodeId, labels);
+            if (nm.labels == null) { 
+              nm.labels = new HashSet<String>();
+            }
+            oldLabels = getLabelsByNode(nodeId);
+            replaceNodeForLabels(nodeId, oldLabels, labels);
+            if (nm.labels == null) { 
+              nm.labels = new HashSet<String>();
+            }
+          removeNodeFromLabels(nodeId, labels);
+   * Get mapping of labels to nodes for all the labels.
+   *
+   * @return labels to nodes map
+   */
+  public Map<String, Set<NodeId>> getLabelsToNodes() {
+    try {
+      readLock.lock();
+      return getLabelsToNodes(labelCollections.keySet());
+    } finally {
+      readLock.unlock();
+    }
+  }
+
+  /**
+   * Get mapping of labels to nodes for specified set of labels.
+   *
+   * @param labels set of labels for which labels to nodes mapping will be
+   *        returned.
+   * @return labels to nodes map
+   */
+  public Map<String, Set<NodeId>> getLabelsToNodes(Set<String> labels) {
+    try {
+      readLock.lock();
+      Map<String, Set<NodeId>> labelsToNodes =
+          new HashMap<String, Set<NodeId>>();
+      for (String label : labels) {
+        if(label.equals(NO_LABEL)) {
+          continue;
+        }
+        NodeLabel nodeLabelInfo = labelCollections.get(label);
+        if(nodeLabelInfo != null) {
+          Set<NodeId> nodeIds = nodeLabelInfo.getAssociatedNodeIds();
+          if (!nodeIds.isEmpty()) {
+            labelsToNodes.put(label, nodeIds);
+          }
+        } else {
+          LOG.warn("getLabelsToNodes : Label [" + label + "] cannot be found");
+        }
+      }      
+      return Collections.unmodifiableMap(labelsToNodes);
+    } finally {
+      readLock.unlock();
+    }
+  }
+
+  /**
-      host.nms.put(nodeId, new Node());
+      host.nms.put(nodeId, new Node(nodeId));

INS31 INS31 INS31 INS31 INS31 INS23 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS83 INS43 INS59 INS44 INS43 INS42 INS74 INS42 INS70 INS43 INS42 INS74 INS42 INS70 INS43 INS42 INS74 INS42 INS74 INS42 INS25 INS21 INS60 INS65 INS65 INS43 INS43 INS74 INS54 INS65 INS65 INS65 INS43 INS43 INS74 INS74 INS42 INS54 INS42 INS42 INS43 INS42 INS21 INS42 INS43 INS43 INS44 INS42 INS8 INS42 INS43 INS43 INS44 INS42 INS8 INS42 INS43 INS43 INS43 INS43 INS27 INS8 INS32 INS74 INS59 INS66 INS66 INS42 INS42 INS43 INS43 INS8 INS8 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS43 INS43 INS43 INS43 INS8 INS8 INS42 INS7 MOV43 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS21 INS41 INS21 INS42 INS42 INS42 INS42 INS21 INS60 INS70 INS41 INS21 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS74 INS59 INS44 INS42 INS8 INS32 INS32 MOV43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS14 INS43 INS42 INS25 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS8 INS43 INS59 INS27 INS8 INS8 INS42 INS32 INS32 INS32 MOV21 MOV21 INS21 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS18 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS21 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS21 INS42 INS42 INS40 INS42 INS21 INS21 MOV25 INS21 INS21 INS25 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS74 INS59 INS38 INS8 INS32 INS32 INS32 INS32 INS32 INS7 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS21 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS40 INS14 INS74 INS43 INS43 INS42 INS42