Merge trunk into auto-failover branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1309164 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.net.util.SubnetUtils;
+import org.apache.commons.net.util.SubnetUtils.SubnetInfo;
+import com.google.common.base.Preconditions;
+
-   * @param endpoint 
-   * @param timeout - timeout in milliseconds
+   * @param address the remote address
+   * @param timeout timeout in milliseconds
+   */
+  public static void connect(Socket socket,
+      SocketAddress address,
+      int timeout) throws IOException {
+    connect(socket, address, null, timeout);
+  }
+
+  /**
+   * Like {@link NetUtils#connect(Socket, SocketAddress, int)} but
+   * also takes a local address and port to bind the socket to. 
+   * 
+   * @param socket
+   * @param address the remote address
+   * @param localAddr the local address to bind the socket to
+   * @param timeout timeout in milliseconds
-                             SocketAddress endpoint, 
+                             SocketAddress endpoint,
+                             SocketAddress localAddr,
+    if (localAddr != null) {
+      Class localClass = localAddr.getClass();
+      Class remoteClass = endpoint.getClass();
+      Preconditions.checkArgument(localClass.equals(remoteClass),
+          "Local address %s must be of same family as remote address %s.",
+          localAddr, endpoint);
+      socket.bind(localAddr);
+    }
+
+
+  /**
+   * @return true if the given string is a subnet specified
+   *     using CIDR notation, false otherwise
+   */
+  public static boolean isValidSubnet(String subnet) {
+    try {
+      new SubnetUtils(subnet);
+      return true;
+    } catch (IllegalArgumentException iae) {
+      return false;
+    }
+  }
+
+  /**
+   * Add all addresses associated with the given nif in the
+   * given subnet to the given list.
+   */
+  private static void addMatchingAddrs(NetworkInterface nif,
+      SubnetInfo subnetInfo, List<InetAddress> addrs) {
+    Enumeration<InetAddress> ifAddrs = nif.getInetAddresses();
+    while (ifAddrs.hasMoreElements()) {
+      InetAddress ifAddr = ifAddrs.nextElement();
+      if (subnetInfo.isInRange(ifAddr.getHostAddress())) {
+        addrs.add(ifAddr);
+      }
+    }
+  }
+
+  /**
+   * Return an InetAddress for each interface that matches the
+   * given subnet specified using CIDR notation.
+   *
+   * @param subnet subnet specified using CIDR notation
+   * @param returnSubinterfaces
+   *            whether to return IPs associated with subinterfaces
+   * @throws IllegalArgumentException if subnet is invalid
+   */
+  public static List<InetAddress> getIPs(String subnet,
+      boolean returnSubinterfaces) {
+    List<InetAddress> addrs = new ArrayList<InetAddress>();
+    SubnetInfo subnetInfo = new SubnetUtils(subnet).getInfo();
+    Enumeration<NetworkInterface> nifs;
+
+    try {
+      nifs = NetworkInterface.getNetworkInterfaces();
+    } catch (SocketException e) {
+      LOG.error("Unable to get host interfaces", e);
+      return addrs;
+    }
+
+    while (nifs.hasMoreElements()) {
+      NetworkInterface nif = nifs.nextElement();
+      // NB: adding addresses even if the nif is not up
+      addMatchingAddrs(nif, subnetInfo, addrs);
+
+      if (!returnSubinterfaces) {
+        continue;
+      }
+      Enumeration<NetworkInterface> subNifs = nif.getSubInterfaces();
+      while (subNifs.hasMoreElements()) {
+        addMatchingAddrs(subNifs.nextElement(), subnetInfo, addrs);
+      }
+    }
+    return addrs;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 MOV29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS25 INS65 INS43 INS42 INS54 INS65 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS61 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS39 INS42 INS60 INS60 INS60 INS54 INS61 INS41 UPD42 UPD66 UPD66 INS42 INS42 INS32 INS66 INS65 INS66 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS66 INS66 INS42 INS8 INS12 INS66 INS66 INS42 INS42 INS43 INS43 INS74 INS59 INS32 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS74 INS59 INS8 INS12 INS32 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS68 INS42 INS33 INS60 INS60 INS21 INS21 INS21 INS41 INS44 INS8 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS43 INS43 INS42 INS21 INS44 INS8 INS42 INS42 INS60 INS21 INS25 INS60 INS61 INS42 INS42 INS69 INS69 INS69 INS43 INS59 INS43 INS59 INS32 INS32 INS14 INS9 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS74 INS14 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS41 INS43 INS59 INS32 INS38 INS8 INS74 INS59 INS32 INS8 INS43 INS43 INS39 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS18 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42