HDFS-5616. NameNode: implement default ACL handling. Contributed by Chris Nauroth.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1565845 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.proto.AclProtos.AclFsImageProto;
+    List<AclEntry> aclEntries;
+    <T extends AddCloseOp> T setAclEntries(List<AclEntry> aclEntries) {
+      this.aclEntries = aclEntries;
+      return (T)this;
+    }
+
+        if (permissions.getPermission().getAclBit()) {
+          AclFsImageProto.newBuilder()
+            .addAllEntries(PBHelper.convertAclEntryProto(aclEntries))
+            .build()
+            .writeDelimitedTo(out);
+        }
+
+        if (permissions.getPermission().getAclBit()) {
+          aclEntries = PBHelper.convertAclEntry(
+            AclFsImageProto.parseDelimitedFrom((DataInputStream)in)
+            .getEntriesList());
+        } else {
+          aclEntries = null;
+        }
+
+      builder.append(", aclEntries=");
+      builder.append(aclEntries);
+        if (permissions.getPermission().getAclBit()) {
+          appendAclEntriesToXml(contentHandler, aclEntries);
+        }
+      if (permissions.getPermission().getAclBit()) {
+        aclEntries = readAclEntriesFromXml(st);
+      } else {
+        aclEntries = null;
+      }
+    List<AclEntry> aclEntries;
+    MkdirOp setAclEntries(List<AclEntry> aclEntries) {
+      this.aclEntries = aclEntries;
+      return this;
+    }
+
+      if (permissions.getPermission().getAclBit()) {
+        AclFsImageProto.newBuilder()
+          .addAllEntries(PBHelper.convertAclEntryProto(aclEntries))
+          .build()
+          .writeDelimitedTo(out);
+      }
+      if (permissions.getPermission().getAclBit()) {
+        aclEntries = PBHelper.convertAclEntry(
+          AclFsImageProto.parseDelimitedFrom((DataInputStream)in)
+          .getEntriesList());
+      } else {
+        aclEntries = null;
+      }
+      builder.append(", aclEntries=");
+      builder.append(aclEntries);
+      if (permissions.getPermission().getAclBit()) {
+        appendAclEntriesToXml(contentHandler, aclEntries);
+      }
+      if (permissions.getPermission().getAclBit()) {
+        aclEntries = readAclEntriesFromXml(st);
+      } else {
+        aclEntries = null;
+      }
-      for (AclEntry e : aclEntries) {
-        contentHandler.startElement("", "", "ENTRY", new AttributesImpl());
-        XMLUtils.addSaxString(contentHandler, "SCOPE", e.getScope().name());
-        XMLUtils.addSaxString(contentHandler, "TYPE", e.getType().name());
-        XMLUtils.addSaxString(contentHandler, "NAME", e.getName());
-        fsActionToXml(contentHandler, e.getPermission());
-        contentHandler.endElement("", "", "ENTRY");
-      }
+      appendAclEntriesToXml(contentHandler, aclEntries);
-      if (!st.hasChildren("ENTRY"))
-        return;
-
-      List<Stanza> stanzas = st.getChildren("ENTRY");
-      for (Stanza s : stanzas) {
-        AclEntry e = new AclEntry.Builder()
-            .setScope(AclEntryScope.valueOf(s.getValue("SCOPE")))
-            .setType(AclEntryType.valueOf(s.getValue("TYPE")))
-            .setName(s.getValue("NAME"))
-            .setPermission(fsActionFromXml(s)).build();
-        aclEntries.add(e);
-      }
+      aclEntries = readAclEntriesFromXml(st);
+
+  private static void appendAclEntriesToXml(ContentHandler contentHandler,
+      List<AclEntry> aclEntries) throws SAXException {
+    for (AclEntry e : aclEntries) {
+      contentHandler.startElement("", "", "ENTRY", new AttributesImpl());
+      XMLUtils.addSaxString(contentHandler, "SCOPE", e.getScope().name());
+      XMLUtils.addSaxString(contentHandler, "TYPE", e.getType().name());
+      XMLUtils.addSaxString(contentHandler, "NAME", e.getName());
+      fsActionToXml(contentHandler, e.getPermission());
+      contentHandler.endElement("", "", "ENTRY");
+    }
+  }
+
+  private static List<AclEntry> readAclEntriesFromXml(Stanza st) {
+    List<AclEntry> aclEntries = Lists.newArrayList();
+    if (!st.hasChildren("ENTRY"))
+      return aclEntries;
+
+    List<Stanza> stanzas = st.getChildren("ENTRY");
+    for (Stanza s : stanzas) {
+      AclEntry e = new AclEntry.Builder()
+        .setScope(AclEntryScope.valueOf(s.getValue("SCOPE")))
+        .setType(AclEntryType.valueOf(s.getValue("TYPE")))
+        .setName(s.getValue("NAME"))
+        .setPermission(fsActionFromXml(s)).build();
+      aclEntries.add(e);
+    }
+    return aclEntries;
+  }

INS26 INS40 MOV31 MOV31 INS23 INS31 INS23 INS31 INS31 INS31 UPD83 INS83 UPD42 INS44 INS83 INS83 INS74 UPD42 INS74 INS59 INS73 INS43 INS42 INS44 INS8 INS74 INS59 INS43 INS42 INS44 INS8 MOV78 INS83 INS39 INS42 INS44 INS43 INS8 MOV78 INS39 INS42 INS44 MOV43 INS8 INS74 INS42 INS43 INS43 INS60 INS41 INS43 INS43 INS42 INS42 INS43 INS42 INS74 INS42 INS21 INS41 INS21 INS21 INS25 INS43 INS43 INS42 INS42 INS74 INS42 INS21 INS41 INS25 INS25 INS21 INS21 INS25 INS25 INS43 INS42 INS42 MOV21 INS21 INS43 INS42 MOV21 INS21 INS43 INS43 INS42 INS42 INS74 INS59 INS42 INS42 INS42 INS42 INS43 INS43 INS7 INS11 INS32 INS32 INS32 INS8 INS8 INS42 INS42 INS43 INS43 INS7 INS52 INS32 INS8 INS32 INS8 INS8 INS32 INS32 INS32 INS8 INS32 INS8 INS8 INS42 INS32 INS42 INS7 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS43 INS52 INS25 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS25 INS32 INS42 INS21 INS21 INS42 INS42 INS22 INS42 INS32 INS42 INS21 INS32 INS42 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS21 INS32 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS32 INS8 INS32 INS8 INS8 INS32 INS8 INS42 INS42 INS7 INS7 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS21 INS32 INS42 INS21 INS21 INS32 INS42 INS21 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS43 INS42 INS42 DEL39