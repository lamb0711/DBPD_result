HDFS-4447. Refactor INodeDirectoryWithSnapshot for supporting general INode diff lists.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440216 13f79535-47bb-0310-9956-ffa450edef68

-  public static class ChildrenDiff extends Diff<byte[], INode> {
+  static class ChildrenDiff extends Diff<byte[], INode> {
-   * The difference between two snapshots. {@link INodeDirectoryWithSnapshot}
-   * maintains a list of snapshot diffs,
-   * <pre>
-   *   d_1 -> d_2 -> ... -> d_n -> null,
-   * </pre>
-   * where -> denotes the {@link SnapshotDiff#posteriorDiff} reference. The
-   * current directory state is stored in the field of {@link INodeDirectory}.
-   * The snapshot state can be obtained by applying the diffs one-by-one in
-   * reversed chronological order.  Let s_1, s_2, ..., s_n be the corresponding
-   * snapshots.  Then,
-   * <pre>
-   *   s_n                     = (current state) - d_n;
-   *   s_{n-1} = s_n - d_{n-1} = (current state) - d_n - d_{n-1};
-   *   ...
-   *   s_k     = s_{k+1} - d_k = (current state) - d_n - d_{n-1} - ... - d_k.
-   * </pre>
+   * The difference of an {@link INodeDirectory} between two snapshots.
-  public class SnapshotDiff implements Comparable<Snapshot> {
-    /** The snapshot will be obtained after this diff is applied. */
-    final Snapshot snapshot;
+  class DirectoryDiff extends AbstractINodeDiff<INodeDirectory, DirectoryDiff> {
-    final int childrenSize;
-    /**
-     * Posterior diff is the diff happened after this diff.
-     * The posterior diff should be first applied to obtain the posterior
-     * snapshot and then apply this diff in order to obtain this snapshot.
-     * If the posterior diff is null, the posterior state is the current state. 
-     */
-    private SnapshotDiff posteriorDiff;
+    private final int childrenSize;
-    /** The snapshot inode data.  It is null when there is no change. */
-    private INodeDirectory snapshotINode = null;
-    private SnapshotDiff(Snapshot snapshot, INodeDirectory dir) {
-      Preconditions.checkNotNull(snapshot, "snapshot is null");
+    private DirectoryDiff(Snapshot snapshot, INodeDirectory dir) {
+      super(snapshot, null, null);
-      this.snapshot = snapshot;
-    SnapshotDiff(Snapshot snapshot,
-        int childrenSize, INodeDirectory snapshotINode,
-        SnapshotDiff posteriorDiff, List<INode> createdList,
-        List<INode> deletedList) {
-      this.snapshot = snapshot;
+    DirectoryDiff(Snapshot snapshot, INodeDirectory snapshotINode,
+        DirectoryDiff posteriorDiff, int childrenSize,
+        List<INode> createdList, List<INode> deletedList) {
+      super(snapshot, snapshotINode, posteriorDiff);
-      this.snapshotINode = snapshotINode;
-      this.posteriorDiff = posteriorDiff;
-    ChildrenDiff getDiff() {
+    ChildrenDiff getChildrenDiff() {
-
-    /** Compare diffs with snapshot ID. */
-    @Override
-    public int compareTo(final Snapshot that) {
-      return Snapshot.ID_COMPARATOR.compare(this.snapshot, that);
-    }
-    /** Copy the INode state to the snapshot if it is not done already. */
-    private void checkAndInitINode(INodeDirectory snapshotCopy) {
-      if (snapshotINode == null) {
-        if (snapshotCopy == null) {
-          snapshotCopy = new INodeDirectory(INodeDirectoryWithSnapshot.this,
-              false);
-        }
-        snapshotINode = snapshotCopy;
-      }
+    @Override
+    INodeDirectory getCurrentINode() {
+      return INodeDirectoryWithSnapshot.this;
-    /** @return the snapshot object of this diff. */
-    Snapshot getSnapshot() {
-      return snapshot;
-    }
-
-    private INodeDirectory getSnapshotINode() {
-      // get from this diff, then the posterior diff and then the current inode
-      for(SnapshotDiff d = this; ; d = d.posteriorDiff) {
-        if (d.snapshotINode != null) {
-          return d.snapshotINode;
-        } else if (d.posteriorDiff == null) {
-          return INodeDirectoryWithSnapshot.this;
+    @Override
+    void combinePosteriorAndCollectBlocks(final DirectoryDiff posterior,
+        final BlocksMapUpdateInfo collectedBlocks) {
+      diff.combinePosterior(posterior.diff, new Diff.Processor<INode>() {
+        /** Collect blocks for deleted files. */
+        @Override
+        public void process(INode inode) {
+          if (inode != null && inode instanceof INodeFile) {
+            ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);
+          }
-      }
+      });
-            for(SnapshotDiff d = SnapshotDiff.this; d != null; d = d.posteriorDiff) {
+            for(DirectoryDiff d = DirectoryDiff.this; d != null; d = d.getPosterior()) {
-                INodeDirectoryWithSnapshot.this.getChildrenList(null)));
+                getCurrentINode().getChildrenList(null)));
-      for(SnapshotDiff d = this; ; d = d.posteriorDiff) {
+      for(DirectoryDiff d = this; ; d = d.getPosterior()) {
-        } else if (d.posteriorDiff == null) {
+        } else if (d.getPosterior() == null) {
-          return INodeDirectoryWithSnapshot.this.getChild(name, null);
+          return getCurrentINode().getChild(name, null);
+      final DirectoryDiff posterior = getPosterior();
-          + (posteriorDiff == null? null: posteriorDiff.snapshot)
+          + (posterior == null? null: posterior.snapshot)
-    
-    private List<INodeDirectory> getSnapshotDirectory() {
-      return diff.getDirsInDeleted();
+  }
+
+  /** A list of directory diffs. */
+  class DirectoryDiffList extends AbstractINodeDiffList<INodeDirectory, DirectoryDiff> {
+    @Override
+    INodeDirectoryWithSnapshot getCurrentINode() {
+      return INodeDirectoryWithSnapshot.this;
+    }
+
+    @Override
+    DirectoryDiff addSnapshotDiff(Snapshot snapshot, INodeDirectory dir,
+        boolean isSnapshotCreation) {
+      final DirectoryDiff d = new DirectoryDiff(snapshot, dir); 
+      if (isSnapshotCreation) {
+        //for snapshot creation, snapshotINode is the same as the snapshot root
+        d.snapshotINode = snapshot.getRoot();
+      }
+      return append(d);
-      withSnapshot.addSnapshotDiff(latest, dir, false);
+      withSnapshot.diffs.addSnapshotDiff(latest, dir, false);
-    int earlierDiffIndex = Collections.binarySearch(diffs, earlierSnapshot);
-    if (earlierDiffIndex < 0 && (-earlierDiffIndex - 1) == diffs.size()) {
+    final List<DirectoryDiff> difflist = diffs.asList();
+    final int size = difflist.size();
+    int earlierDiffIndex = Collections.binarySearch(difflist, earlierSnapshot);
+    if (earlierDiffIndex < 0 && (-earlierDiffIndex - 1) == size) {
-    int laterDiffIndex = diffs.size();
+    int laterDiffIndex = size;
-      laterDiffIndex = Collections.binarySearch(diffs, laterSnapshot);
+      laterDiffIndex = Collections.binarySearch(difflist, laterSnapshot);
-      SnapshotDiff sdiff = diffs.get(i);
+      DirectoryDiff sdiff = difflist.get(i);
-      for (int i = laterDiffIndex; i < diffs.size(); i++) {
-        if (diffs.get(i).snapshotINode != null
-            && !dirCopy.metadataEquals(diffs.get(i).snapshotINode)) {
+      for (int i = laterDiffIndex; i < size; i++) {
+        if (!dirCopy.metadataEquals(difflist.get(i).snapshotINode)) {
-  private final List<SnapshotDiff> diffs;
+  private final DirectoryDiffList diffs;
-      List<SnapshotDiff> diffs) {
+      DirectoryDiffList diffs) {
-    this.diffs = diffs != null? diffs: new ArrayList<SnapshotDiff>();
-  }
-  
-  /**
-   * Delete the snapshot with the given name. The synchronization of the diff
-   * list will be done outside.
-   * 
-   * If the diff to remove is not the first one in the diff list, we need to 
-   * combine the diff with its previous one:
-   * 
-   * @param snapshot The snapshot to be deleted
-   * @param collectedBlocks Used to collect information for blocksMap update
-   * @return The SnapshotDiff containing the deleted snapshot. 
-   *         Null if the snapshot with the given name does not exist. 
-   */
-  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,
-      final BlocksMapUpdateInfo collectedBlocks) {
-    int snapshotIndex = Collections.binarySearch(diffs, snapshot);
-    if (snapshotIndex == -1) {
-      return null;
-    } else {
-      SnapshotDiff diffToRemove = null;
-      diffToRemove = diffs.remove(snapshotIndex);
-      if (snapshotIndex > 0) {
-        // combine the to-be-removed diff with its previous diff
-        SnapshotDiff previousDiff = diffs.get(snapshotIndex - 1);
-        previousDiff.diff.combinePosterior(diffToRemove.diff,
-            new Diff.Processor<INode>() {
-          /** Collect blocks for deleted files. */
-          @Override
-          public void process(INode inode) {
-            if (inode != null && inode instanceof INodeFile) {
-              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);
-            }
-          }
-        });
-
-        previousDiff.posteriorDiff = diffToRemove.posteriorDiff;
-        diffToRemove.posteriorDiff = null;
-      }
-      return diffToRemove;
-    }
-  }
-  
-  /** Insert a SnapshotDiff to the head of diffs */
-  public void insertDiff(SnapshotDiff diff) {
-    diffs.add(0, diff);
-  }
-  
-  /** Add a {@link SnapshotDiff} for the given snapshot and directory. */
-  SnapshotDiff addSnapshotDiff(Snapshot snapshot, INodeDirectory dir,
-      boolean isSnapshotCreation) {
-    final SnapshotDiff last = getLastSnapshotDiff();
-    final SnapshotDiff d = new SnapshotDiff(snapshot, dir); 
-
-    if (isSnapshotCreation) {
-      //for snapshot creation, snapshotINode is the same as the snapshot root
-      d.snapshotINode = snapshot.getRoot();
-    }
-    diffs.add(d);
-    if (last != null) {
-      last.posteriorDiff = d;
-    }
-    return d;
-  }
-  
-  SnapshotDiff getLastSnapshotDiff() {
-    final int n = diffs.size();
-    return n == 0? null: diffs.get(n - 1);
+    this.diffs = diffs != null? diffs: new DirectoryDiffList();
-    final SnapshotDiff last = getLastSnapshotDiff();
-    return last == null? null: last.getSnapshot();
+    return diffs.getLastSnapshot();
-  /**
-   * Check if the latest snapshot diff exists.  If not, add it.
-   * @return the latest snapshot diff, which is never null.
-   */
-  private SnapshotDiff checkAndAddLatestSnapshotDiff(Snapshot latest) {
-    final SnapshotDiff last = getLastSnapshotDiff();
-    return last != null && last.snapshot.equals(latest)? last
-        : addSnapshotDiff(latest, this, false);
-  }
-  
-  /**
-   * Check if the latest {@link ChildrenDiff} exists.  If not, add it.
-   * @return the latest {@link ChildrenDiff}, which is never null.
-   */
-  ChildrenDiff checkAndAddLatestDiff(Snapshot latest) {
-    return checkAndAddLatestSnapshotDiff(latest).diff;
-  }
-
-  /**
-   * @return {@link #snapshots}
-   */
-  List<SnapshotDiff> getSnapshotDiffs() {
+  /** @return the snapshot diff list. */
+  DirectoryDiffList getDiffs() {
-  /**
-   * @return the diff corresponding to the given snapshot.
-   *         When the diff is null, it means that the current state and
-   *         the corresponding snapshot state are the same. 
-   */
-  SnapshotDiff getSnapshotDiff(Snapshot snapshot) {
-    if (snapshot == null) {
-      // snapshot == null means the current state, therefore, return null.
-      return null;
-    }
-    final int i = Collections.binarySearch(diffs, snapshot);
-    if (i >= 0) {
-      // exact match
-      return diffs.get(i);
-    } else {
-      // Exact match not found means that there were no changes between
-      // given snapshot and the next state so that the diff for the given
-      // snapshot was not recorded.  Thus, return the next state.
-      final int j = -i - 1;
-      return j < diffs.size()? diffs.get(j): null;
-    }
+  @Override
+  public Pair<INodeDirectoryWithSnapshot, INodeDirectory> createSnapshotCopy() {
+    return new Pair<INodeDirectoryWithSnapshot, INodeDirectory>(this,
+        new INodeDirectory(this, false));
-      checkAndAddLatestSnapshotDiff(latest).checkAndInitINode(snapshotCopy);
+      diffs.checkAndAddLatestSnapshotDiff(latest).checkAndInitINode(snapshotCopy);
-    final SnapshotDiff diff = checkAndAddLatestSnapshotDiff(latest);
+    final DirectoryDiff diff = diffs.checkAndAddLatestSnapshotDiff(latest);
-      diff = checkAndAddLatestDiff(latest);
+      diff = diffs.checkAndAddLatestSnapshotDiff(latest).diff;
-      diff = checkAndAddLatestDiff(latest);
+      diff = diffs.checkAndAddLatestSnapshotDiff(latest).diff;
-    final SnapshotDiff diff = getSnapshotDiff(snapshot);
+    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    final SnapshotDiff diff = getSnapshotDiff(snapshot);
+    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    final SnapshotDiff diff = getSnapshotDiff(snapshot);
+    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    final SnapshotDiff diff = getSnapshotDiff(snapshot);
+    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    final SnapshotDiff diff = getSnapshotDiff(snapshot);
+    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    final SnapshotDiff diff = getSnapshotDiff(snapshot);
+    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    final SnapshotDiff diff = getSnapshotDiff(snapshot);
+    final DirectoryDiff diff = diffs.getDiff(snapshot);
-    return super.toString() + ", diffs=" + getSnapshotDiffs();
+    return super.toString() + ", " + diffs;
-    for (SnapshotDiff sdiff : diffs) {
-      List<INodeDirectory> list = sdiff.getSnapshotDirectory();
+    for (DirectoryDiff sdiff : diffs) {
+      List<INodeDirectory> list = sdiff.getChildrenDiff().getDirsInDeleted();

INS55 INS31 UPD42 UPD74 MOV44 INS31 INS31 INS31 INS29 INS42 INS74 MOV31 MOV31 INS43 UPD43 INS42 MOV8 INS78 INS83 UPD74 MOV74 UPD42 MOV42 INS8 UPD43 UPD43 INS43 INS83 UPD42 UPD42 UPD42 INS78 MOV43 INS42 MOV8 MOV78 INS39 INS42 INS44 MOV44 INS8 INS78 MOV83 MOV43 MOV42 MOV8 MOV65 UPD43 MOV43 INS43 INS43 MOV78 INS43 INS42 INS78 UPD43 INS60 INS60 UPD42 MOV42 INS43 UPD42 INS42 UPD43 UPD43 MOV43 INS41 UPD66 UPD66 UPD42 UPD42 INS42 INS46 UPD43 INS46 INS42 INS83 INS43 INS42 MOV83 UPD43 MOV43 UPD42 MOV42 INS21 INS42 INS60 UPD66 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS41 INS42 UPD42 INS41 INS83 INS74 INS59 INS83 INS39 INS59 UPD42 MOV42 INS32 UPD66 UPD42 UPD42 INS14 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS42 INS33 INS33 UPD42 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS32 MOV58 INS7 INS83 INS43 INS59 INS52 UPD43 INS32 MOV43 INS43 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS74 INS52 INS14 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 INS42 UPD43 UPD42 MOV42 INS42 INS40 MOV14 UPD43 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD43 INS43 INS43 INS43 MOV43 INS52 INS9 INS42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD43 INS40 UPD42 INS43 UPD42 MOV42 UPD42 MOV42 INS42 INS22 INS22 INS43 UPD40 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 INS42 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 UPD42 INS38 INS42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 MOV65 MOV43 UPD42 INS32 MOV32 UPD66 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV42 MOV33 UPD43 INS32 INS42 UPD42 INS42 UPD42 INS42 INS42 UPD42 INS32 INS42 DEL83 DEL42 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL83 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL33 DEL59 DEL23 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL40 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL52 DEL9 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL7 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL40 DEL7 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL33 DEL27 DEL25 DEL25 DEL8 DEL24 DEL8 DEL31 DEL40 DEL42 DEL52 DEL42 DEL43 DEL42 DEL52 DEL59 DEL58 DEL42 DEL40 DEL7 DEL40 DEL42 DEL52 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL40 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL33 DEL27 DEL38 DEL27 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL33 DEL41 DEL8 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL59 DEL60 DEL40 DEL42 DEL40 DEL32 DEL21 DEL40 DEL40 DEL7 DEL21 DEL40 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL33 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL16 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL32 DEL16 DEL66 DEL65 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL52 DEL9 DEL32 DEL16 DEL41 DEL8 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL22 DEL41 DEL8 DEL31 DEL66 DEL42 DEL67 DEL65 DEL65 DEL29 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL83 DEL39 DEL42 DEL42 DEL38 DEL34 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL33 DEL16 DEL41 DEL8 DEL25 DEL8 DEL31 DEL32 DEL32 DEL42 DEL32