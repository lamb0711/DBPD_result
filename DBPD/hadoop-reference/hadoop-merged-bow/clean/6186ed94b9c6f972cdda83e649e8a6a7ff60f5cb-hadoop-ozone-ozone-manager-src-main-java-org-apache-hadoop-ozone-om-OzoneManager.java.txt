HDDS-1300. Optimize non-recursive ozone filesystem apis. Contributed by Lokesh Jain.

-  public OzoneFileStatus getFileStatus(String volumeName, String bucketName,
-                                       String keyName) throws IOException {
-    Map<String, String> auditMap = new HashMap<>();
-    auditMap.put(OzoneConsts.VOLUME, volumeName);
-    auditMap.put(OzoneConsts.BUCKET, bucketName);
-    auditMap.put(OzoneConsts.KEY, keyName);
-    metrics.incNumGetFileStatus();
+  public OzoneFileStatus getFileStatus(OmKeyArgs args) throws IOException {
+    if (isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.READ,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+    }
+    boolean auditSuccess = true;
-      OzoneFileStatus ozoneFileStatus =
-          keyManager.getFileStatus(volumeName, bucketName, keyName);
-      AUDIT.logWriteSuccess(buildAuditMessageForSuccess(OMAction
-          .GET_FILE_STATUS, auditMap));
-      return ozoneFileStatus;
+      metrics.incNumGetFileStatus();
+      return keyManager.getFileStatus(args);
-      AUDIT.logWriteFailure(buildAuditMessageForFailure(OMAction
-          .GET_FILE_STATUS, auditMap, ex));
+      auditSuccess = false;
+      AUDIT.logWriteFailure(
+          buildAuditMessageForFailure(OMAction.GET_FILE_STATUS,
+              (args == null) ? null : args.toAuditMap(), ex));
+    } finally {
+      if (auditSuccess) {
+        AUDIT.logWriteSuccess(
+            buildAuditMessageForSuccess(OMAction.GET_FILE_STATUS,
+                (args == null) ? null : args.toAuditMap()));
+      }
+    }
+  }
+
+  @Override
+  public void createDirectory(OmKeyArgs args) throws IOException {
+    if (isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.WRITE,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+    }
+    boolean auditSuccess = true;
+    try {
+      metrics.incNumCreateDirectory();
+      keyManager.createDirectory(args);
+    } catch (IOException ex) {
+      metrics.incNumCreateDirectoryFails();
+      auditSuccess = false;
+      AUDIT.logWriteFailure(
+          buildAuditMessageForFailure(OMAction.CREATE_DIRECTORY,
+              (args == null) ? null : args.toAuditMap(), ex));
+      throw ex;
+    } finally {
+      if (auditSuccess) {
+        AUDIT.logWriteSuccess(
+            buildAuditMessageForSuccess(OMAction.CREATE_DIRECTORY,
+                (args == null) ? null : args.toAuditMap()));
+      }
+    }
+  }
+
+  @Override
+  public OpenKeySession createFile(OmKeyArgs args, boolean overWrite,
+      boolean recursive) throws IOException {
+    if (isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.WRITE,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+    }
+    boolean auditSuccess = true;
+    try {
+      metrics.incNumCreateFile();
+      return keyManager.createFile(args, overWrite, recursive);
+    } catch (Exception ex) {
+      metrics.incNumCreateFileFails();
+      auditSuccess = false;
+      AUDIT.logWriteFailure(buildAuditMessageForFailure(OMAction.CREATE_FILE,
+          (args == null) ? null : args.toAuditMap(), ex));
+      throw ex;
+    } finally {
+      if(auditSuccess){
+        AUDIT.logWriteSuccess(buildAuditMessageForSuccess(
+            OMAction.CREATE_FILE, (args == null) ? null : args.toAuditMap()));
+      }
+    }
+  }
+
+  @Override
+  public OmKeyInfo lookupFile(OmKeyArgs args) throws IOException {
+    if(isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.READ,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+    }
+    boolean auditSuccess = true;
+    try {
+      metrics.incNumLookupFile();
+      return keyManager.lookupFile(args);
+    } catch (Exception ex) {
+      metrics.incNumLookupFileFails();
+      auditSuccess = false;
+      AUDIT.logWriteFailure(buildAuditMessageForFailure(OMAction.LOOKUP_FILE,
+          (args == null) ? null : args.toAuditMap(), ex));
+      throw ex;
+    } finally {
+      if(auditSuccess){
+        AUDIT.logWriteSuccess(buildAuditMessageForSuccess(
+            OMAction.LOOKUP_FILE, (args == null) ? null : args.toAuditMap()));
+      }

INS31 INS31 INS31 INS31 MOV78 MOV83 MOV43 MOV42 MOV44 MOV43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 UPD43 UPD42 INS25 INS60 INS54 INS42 INS43 INS42 UPD42 MOV42 INS25 INS60 INS54 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS25 INS60 INS54 INS42 INS42 INS43 INS42 INS42 INS25 INS60 INS54 UPD42 INS42 INS8 INS39 INS59 INS8 INS12 INS8 UPD42 MOV42 INS42 INS8 INS39 INS59 INS8 INS12 INS8 UPD42 MOV42 INS42 INS8 INS39 INS59 INS8 INS12 INS8 INS42 INS42 INS8 INS39 INS59 INS8 MOV12 INS8 INS21 INS42 INS9 MOV21 INS41 MOV44 INS8 INS25 MOV21 INS42 INS9 INS21 INS21 INS44 INS8 INS25 INS21 INS42 INS9 INS21 INS41 INS44 INS8 INS25 INS21 INS42 INS9 INS21 MOV41 INS44 INS25 INS32 INS32 MOV21 INS21 INS21 MOV53 INS42 INS8 INS32 INS32 INS43 INS42 INS21 INS21 MOV21 INS53 INS42 INS8 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS21 INS53 INS42 INS8 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS53 INS42 INS8 INS42 INS40 INS40 INS40 INS32 INS32 INS32 INS42 INS42 INS42 INS7 INS32 INS21 UPD42 INS40 INS40 UPD40 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 MOV21 UPD42 MOV42 INS40 INS40 INS40 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS42 MOV21 INS42 INS40 INS40 INS40 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS42 INS40 INS16 INS42 INS42 INS42 INS32 INS42 UPD40 MOV40 INS16 INS42 UPD42 UPD42 INS32 INS42 INS40 INS16 INS42 UPD40 INS16 INS42 INS42 INS32 INS36 INS33 INS32 INS42 INS40 INS16 INS36 INS33 INS32 INS42 UPD40 MOV40 INS16 INS36 INS33 INS32 UPD40 INS16 INS36 INS33 INS32 INS42 INS40 INS16 INS27 INS42 INS42 INS36 INS33 INS32 INS27 INS42 INS42 INS36 INS33 INS32 INS27 INS42 INS42 INS36 INS33 INS32 INS27 INS42 UPD42 MOV42 INS36 INS33 INS32 INS42 INS33 INS27 INS42 INS42 INS42 INS33 INS27 INS42 INS42 INS42 INS33 INS27 INS42 UPD42 MOV42 INS42 INS33 INS27 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL54 DEL8 DEL31