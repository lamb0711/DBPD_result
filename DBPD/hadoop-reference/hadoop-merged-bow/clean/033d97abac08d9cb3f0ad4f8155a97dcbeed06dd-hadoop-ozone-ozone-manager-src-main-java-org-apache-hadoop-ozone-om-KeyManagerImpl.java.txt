HDDS-956. MultipartUpload: List Parts for a Multipart upload key. Contributed by Bharat Viswanadham.

+import java.util.Iterator;
+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;
+import org.apache.hadoop.ozone.om.helpers.OmMultipartUploadListParts;
+import org.apache.hadoop.ozone.om.helpers.OmPartInfo;
-          .getPartKeyInfoList();
+          .getPartKeyInfoMap();
-            .getPartKeyInfoList();
+            .getPartKeyInfoMap();
+
+  @Override
+  public OmMultipartUploadListParts listParts(String volumeName,
+      String bucketName, String keyName, String uploadID,
+      int partNumberMarker, int maxParts)  throws IOException {
+    Preconditions.checkNotNull(volumeName);
+    Preconditions.checkNotNull(bucketName);
+    Preconditions.checkNotNull(keyName);
+    Preconditions.checkNotNull(uploadID);
+    boolean isTruncated = false;
+    int nextPartNumberMarker = 0;
+
+    metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
+    try {
+      String multipartKey = metadataManager.getMultipartKey(volumeName,
+          bucketName, keyName, uploadID);
+
+      OmMultipartKeyInfo multipartKeyInfo =
+          metadataManager.getMultipartInfoTable().get(multipartKey);
+
+      if (multipartKeyInfo == null) {
+        throw new OMException("No Such Multipart upload exists for this key.",
+                ResultCodes.NO_SUCH_MULTIPART_UPLOAD);
+      } else {
+        TreeMap<Integer, PartKeyInfo> partKeyInfoMap =
+            multipartKeyInfo.getPartKeyInfoMap();
+        Iterator<Map.Entry<Integer, PartKeyInfo>> partKeyInfoMapIterator =
+            partKeyInfoMap.entrySet().iterator();
+        HddsProtos.ReplicationType replicationType =
+            partKeyInfoMap.firstEntry().getValue().getPartKeyInfo().getType();
+        int count = 0;
+        List<OmPartInfo> omPartInfoList = new ArrayList<>();
+
+        while (count < maxParts && partKeyInfoMapIterator.hasNext()) {
+          Map.Entry<Integer, PartKeyInfo> partKeyInfoEntry =
+              partKeyInfoMapIterator.next();
+          nextPartNumberMarker = partKeyInfoEntry.getKey();
+          // As we should return only parts with part number greater
+          // than part number marker
+          if (partKeyInfoEntry.getKey() > partNumberMarker) {
+            PartKeyInfo partKeyInfo = partKeyInfoEntry.getValue();
+            OmPartInfo omPartInfo = new OmPartInfo(partKeyInfo.getPartNumber(),
+                partKeyInfo.getPartName(),
+                partKeyInfo.getPartKeyInfo().getModificationTime(),
+                partKeyInfo.getPartKeyInfo().getDataSize());
+            omPartInfoList.add(omPartInfo);
+            replicationType = partKeyInfo.getPartKeyInfo().getType();
+            count++;
+          }
+        }
+
+        if (partKeyInfoMapIterator.hasNext()) {
+          Map.Entry<Integer, PartKeyInfo> partKeyInfoEntry =
+              partKeyInfoMapIterator.next();
+          isTruncated = true;
+        } else {
+          isTruncated = false;
+          nextPartNumberMarker = 0;
+        }
+        OmMultipartUploadListParts omMultipartUploadListParts =
+            new OmMultipartUploadListParts(replicationType,
+                nextPartNumberMarker, isTruncated);
+        omMultipartUploadListParts.addPartList(omPartInfoList);
+        return omMultipartUploadListParts;
+      }
+    } catch (OMException ex) {
+      throw ex;
+    } catch (IOException ex){
+      LOG.error("List Multipart Upload Parts Failed: volume: " + volumeName +
+              "bucket: " + bucketName + "key: " + keyName, ex);
+      throw new OMException(ex.getMessage(), ResultCodes
+              .LIST_MULTIPART_UPLOAD_PARTS_FAILED);
+    } finally {
+      metadataManager.getLock().releaseBucketLock(volumeName, bucketName);
+    }
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS21 INS21 INS21 INS60 INS60 INS21 INS54 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS39 INS59 INS39 INS59 INS32 INS8 INS12 INS12 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS34 INS32 INS42 INS42 INS42 INS60 INS60 INS25 INS44 INS8 INS44 INS8 INS21 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS53 INS43 INS42 INS21 INS53 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS60 INS60 INS60 INS60 INS60 INS61 INS25 INS60 INS21 INS41 INS42 INS42 INS42 INS32 INS14 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS74 INS59 INS74 INS59 INS43 INS59 INS39 INS59 INS74 INS59 INS27 INS8 INS32 INS8 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS27 INS42 INS43 INS32 INS40 INS42 INS42 INS42 INS42 INS43 INS45 INS40 INS43 INS43 INS43 INS42 INS32 INS43 INS74 INS42 INS32 INS40 INS42 INS32 INS42 INS34 INS43 INS43 INS42 INS14 INS27 INS32 INS60 INS21 INS25 INS42 INS42 INS60 INS21 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS74 INS59 INS7 INS27 INS8 INS74 INS59 INS7 INS7 INS7 INS43 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS43 INS42 INS32 INS42 INS32 INS32 INS42 INS60 INS60 INS21 INS21 INS21 INS43 INS43 INS43 INS42 INS32 INS42 INS9 INS42 INS9 INS42 INS34 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS7 INS37 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42