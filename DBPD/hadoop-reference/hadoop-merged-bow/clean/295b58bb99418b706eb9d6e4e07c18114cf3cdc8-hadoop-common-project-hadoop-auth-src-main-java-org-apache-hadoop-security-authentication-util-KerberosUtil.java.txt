HADOOP-10322. Add ability to read principal names from a keytab. Contributed by Benoy Antony and Daryn Sharp.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1590637 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.util.PlatformName.IBM_JAVA;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.regex.Pattern;
+import org.apache.directory.server.kerberos.shared.keytab.Keytab;
+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;
-import static org.apache.hadoop.util.PlatformName.IBM_JAVA;
-
+
+  /**
+   * Get all the unique principals present in the keytabfile.
+   * 
+   * @param keytabFileName 
+   *          Name of the keytab file to be read.
+   * @return list of unique principals in the keytab.
+   * @throws IOException 
+   *          If keytab entries cannot be read from the file.
+   */
+  static final String[] getPrincipalNames(String keytabFileName) throws IOException {
+      Keytab keytab = Keytab.read(new File(keytabFileName));
+      Set<String> principals = new HashSet<String>();
+      List<KeytabEntry> entries = keytab.getEntries();
+      for (KeytabEntry entry: entries){
+        principals.add(entry.getPrincipalName().replace("\\", "/"));
+      }
+      return principals.toArray(new String[0]);
+    }
+
+  /**
+   * Get all the unique principals from keytabfile which matches a pattern.
+   * 
+   * @param keytab 
+   *          Name of the keytab file to be read.
+   * @param pattern 
+   *         pattern to be matched.
+   * @return list of unique principals which matches the pattern.
+   * @throws IOException 
+   */
+  public static final String[] getPrincipalNames(String keytab,
+      Pattern pattern) throws IOException {
+    String[] principals = getPrincipalNames(keytab);
+    if (principals.length != 0) {
+      List<String> matchingPrincipals = new ArrayList<String>();
+      for (String principal : principals) {
+        if (pattern.matcher(principal).matches()) {
+          matchingPrincipals.add(principal);
+        }
+      }
+      principals = matchingPrincipals.toArray(new String[0]);
+    }
+    return principals;
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS42 INS60 INS60 INS60 INS70 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS5 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS3 INS43 INS85 INS42 INS32 INS40 INS34 INS60 INS70 INS21 INS42 INS42 INS14 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS32 INS5 INS34 INS42 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS7 INS43 INS42 INS43 INS43 INS42 INS42 INS32 INS43 INS85 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS45 INS42 INS42 INS42 INS74 INS42 INS32 INS8 INS42 INS42 INS3 INS42 INS42 INS43 INS43 INS32 INS42 INS21 INS5 INS34 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS42 INS42