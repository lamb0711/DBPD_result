Merge r1479733 through r1480439 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1480440 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.InetSocketAddress;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.security.Credentials;
+import org.apache.hadoop.security.SecurityUtil;
-import org.apache.hadoop.yarn.api.records.ClientToken;
+import org.apache.hadoop.yarn.security.ApplicationTokenIdentifier;
+import org.apache.hadoop.yarn.security.ApplicationTokenSelector;
+import org.apache.hadoop.yarn.security.client.ClientTokenSelector;
-  private ClientToken clientToken;
+  private Token<ClientTokenIdentifier> clientToken;
+  private Token<ApplicationTokenIdentifier> applicationToken = null;
-    if (UserGroupInformation.isSecurityEnabled()) {
-
-      this.rmContext.getClientToAMTokenSecretManager().registerApplication(
-        appAttemptId);
-
-      Token<ClientTokenIdentifier> token =
-          new Token<ClientTokenIdentifier>(new ClientTokenIdentifier(
-            appAttemptId), this.rmContext.getClientToAMTokenSecretManager());
-      this.clientToken =
-          BuilderUtils.newClientToken(token.getIdentifier(), token.getKind()
-            .toString(), token.getPassword(), token.getService().toString());
-    }
-
-  public ClientToken getClientToken() {
+  public Token<ClientTokenIdentifier> getClientToken() {
+  public Token<ApplicationTokenIdentifier> getApplicationToken() {
+    return this.applicationToken;
+  }
+
+  @Override
-    LOG.info("Recovered attempt: AppId: " + getAppAttemptId().getApplicationId() 
+    recoverAppAttemptTokens(attemptState.getAppAttemptTokens());
+    LOG.info("Recovered attempt: AppId: " + getAppAttemptId().getApplicationId()
-  
+
+  private void recoverAppAttemptTokens(Credentials appAttemptTokens) {
+    if (appAttemptTokens == null) {
+      return;
+    }
+    if (UserGroupInformation.isSecurityEnabled()) {
+
+      ClientTokenSelector clientTokenSelector = new ClientTokenSelector();
+      this.clientToken =
+          clientTokenSelector.selectToken(new Text(),
+            appAttemptTokens.getAllTokens());
+
+      InetSocketAddress serviceAddr = conf.getSocketAddr(
+            YarnConfiguration.RM_SCHEDULER_ADDRESS,
+            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,
+            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);
+      ApplicationTokenSelector appTokenSelector = new ApplicationTokenSelector();
+      this.applicationToken =
+          appTokenSelector.selectToken(
+            SecurityUtil.buildTokenService(serviceAddr),
+            appAttemptTokens.getAllTokens());
+
+      // For now, no need to populate tokens back to
+      // ApplicationTokenSecretManager, because running attempts are rebooted
+      // Later in work-preserve restart, we'll create NEW->RUNNING transition
+      // in which the restored tokens will be added to the secret manager
+    }
+  }
+      if (UserGroupInformation.isSecurityEnabled()) {
+
+        appAttempt.rmContext.getClientToAMTokenSecretManager()
+          .registerApplication(appAttempt.applicationAttemptId);
+
+        // create clientToken
+        appAttempt.clientToken =
+            new Token<ClientTokenIdentifier>(new ClientTokenIdentifier(
+              appAttempt.applicationAttemptId),
+              appAttempt.rmContext.getClientToAMTokenSecretManager());
+
+        // create application token
+        ApplicationTokenIdentifier id =
+            new ApplicationTokenIdentifier(appAttempt.applicationAttemptId);
+        Token<ApplicationTokenIdentifier> applicationToken =
+            new Token<ApplicationTokenIdentifier>(id,
+              appAttempt.rmContext.getApplicationTokenSecretManager());
+        InetSocketAddress serviceAddr =
+            appAttempt.conf.getSocketAddr(
+              YarnConfiguration.RM_SCHEDULER_ADDRESS,
+              YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,
+              YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);
+        // normally the client should set the service after acquiring the
+        // token, but this token is directly provided to the AMs
+        SecurityUtil.setTokenService(applicationToken, serviceAddr);
+
+        appAttempt.applicationToken = applicationToken;
+
+      }
+
-      
-  
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS23 INS31 INS31 INS83 MOV74 MOV59 INS74 INS59 INS74 INS78 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS43 INS43 INS42 INS33 INS43 INS43 INS42 INS43 INS43 INS41 INS21 INS43 INS42 INS25 INS25 INS8 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS22 INS32 INS42 INS27 INS8 MOV32 INS8 MOV21 MOV21 INS25 MOV21 INS52 INS42 INS42 INS32 INS42 INS33 INS41 INS60 INS21 INS60 INS60 INS21 INS32 INS8 INS42 INS42 INS43 INS59 INS7 INS43 INS59 INS43 INS59 INS7 INS42 INS42 INS21 INS21 INS60 INS60 INS60 INS21 INS21 INS42 INS42 INS14 MOV22 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS22 INS32 INS32 INS7 INS43 INS59 INS74 INS59 INS43 INS59 INS32 INS7 INS43 INS42 INS42 INS14 INS32 INS42 INS42 INS40 INS40 INS40 INS43 INS52 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS40 INS40 MOV14 INS42 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS40 INS42 INS42 INS74 INS42 INS32 INS40 INS42 INS40 INS40 INS40 INS42 INS40 INS40 INS42 INS43 INS43 INS40 INS42 INS42 INS42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL43 DEL42 DEL52 DEL42 DEL22 DEL8