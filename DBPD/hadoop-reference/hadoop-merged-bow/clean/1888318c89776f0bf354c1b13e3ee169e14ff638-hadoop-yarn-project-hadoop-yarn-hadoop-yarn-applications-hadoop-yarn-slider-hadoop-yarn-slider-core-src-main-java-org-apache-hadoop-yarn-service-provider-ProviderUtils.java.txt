YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He

-package org.apache.slider.providers;
+package org.apache.hadoop.yarn.service.provider;
-import org.apache.hadoop.registry.client.binding.RegistryPathUtils;
-import org.apache.hadoop.registry.client.types.ServiceRecord;
-import org.apache.hadoop.registry.client.types.yarn.PersistencePolicies;
-import org.apache.hadoop.registry.client.types.yarn.YarnRegistryAttributes;
-import org.apache.slider.common.SliderKeys;
-import org.apache.slider.common.SliderXmlConfKeys;
+import org.apache.hadoop.yarn.service.conf.SliderKeys;
+import org.apache.hadoop.yarn.service.conf.SliderXmlConfKeys;
-import org.apache.slider.core.exceptions.NoSuchNodeException;
+import org.apache.slider.core.launch.AbstractLauncher;
-import org.apache.slider.server.appmaster.state.RoleInstance;
+import org.apache.hadoop.yarn.service.compinstance.ComponentInstance;
+import org.apache.hadoop.yarn.service.ServiceContext;
-import org.apache.slider.server.services.yarnregistry.YarnRegistryViewForProviders;
+import org.slf4j.LoggerFactory;
-import static org.apache.slider.util.ServiceApiUtil.$;
+import static org.apache.hadoop.yarn.service.utils.ServiceApiUtil.$;
-  protected final Logger log;
+  protected static final Logger log =
+      LoggerFactory.getLogger(ProviderUtils.class);
-  /**
-   * Create an instance
-   * @param log log directory to use -usually the provider
-   */
-  
-  public ProviderUtils(Logger log) {
-    this.log = log;
-  }
-  public void substituteMapWithTokens(Map<String, String> configs,
+  public static void substituteMapWithTokens(Map<String, String> configs,
-  public synchronized void createConfigFileAndAddLocalResource(
-      ContainerLauncher launcher, SliderFileSystem fs, Component component,
-      Map<String, String> tokensForSubstitution, RoleInstance roleInstance,
-      StateAccessForProviders appState) throws IOException {
+  public static synchronized void createConfigFileAndAddLocalResource(
+      AbstractLauncher launcher, SliderFileSystem fs, Component component,
+      Map<String, String> tokensForSubstitution, ComponentInstance instance,
+      ServiceContext context) throws IOException {
-        new Path(compDir, roleInstance.getCompInstanceName());
+        new Path(compDir, instance.getCompInstanceName());
+      log.info(instance.getCompInstanceId() + ": Creating dir on hdfs: " + compInstanceDir);
-      roleInstance.compInstanceDir = compInstanceDir;
-      log.info("Creating component instance dir: " + compInstanceDir);
+      instance.setCompInstanceDir(compInstanceDir);
-    log.info("Tokens substitution for component: " + roleInstance
-        .getCompInstanceName() + System.lineSeparator()
-        + tokensForSubstitution);
+    if (log.isDebugEnabled()) {
+      log.debug("Tokens substitution for component instance: " + instance
+          .getCompInstanceName() + System.lineSeparator()
+          + tokensForSubstitution);
+    }
-        log.info("Saving config file on hdfs for component " + roleInstance
+        log.info("Saving config file on hdfs for component " + instance
-                tokensForSubstitution, configFile, remoteFile, appState);
+                tokensForSubstitution, configFile, remoteFile, context);
-                tokensForSubstitution, configFile, remoteFile, appState);
+                tokensForSubstitution, configFile, remoteFile, context);
-              roleInstance, configFile, fileName, remoteFile);
+              instance, configFile, fileName, remoteFile);
-  private void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,
-      Map<String, String> tokensForSubstitution, RoleInstance roleInstance,
+  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,
+      Map<String, String> tokensForSubstitution, ComponentInstance instance,
-      log.info("Component instance = " + roleInstance.getCompInstanceName()
+      log.info("Component instance = " + instance.getCompInstanceName()
-  private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,
+  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,
-      Path remoteFile, StateAccessForProviders appState) throws IOException {
+      Path remoteFile, ServiceContext context) throws IOException {
-      conf = (Map<String, String>) appState.getConfigFileCache()
-          .get(configFile);
+      conf = (Map<String, String>) context.configCache.get(configFile);
-  private void resolvePlainTemplateAndSaveOnHdfs(FileSystem fs,
+  private static void resolvePlainTemplateAndSaveOnHdfs(FileSystem fs,
-      Path remoteFile, StateAccessForProviders appState) {
+      Path remoteFile, ServiceContext context) {
-      content = (String) appState.getConfigFileCache().get(configFile);
+      content = (String) context.configCache.get(configFile);
-   * @param roleInstance role instance
-  public Map<String, String> initCompTokensForSubstitute(
-      RoleInstance roleInstance) {
+  public static Map<String, String> initCompTokensForSubstitute(
+      ComponentInstance instance) {
-    tokens.put(COMPONENT_NAME, roleInstance.role);
-    tokens.put(COMPONENT_NAME_LC, roleInstance.role.toLowerCase());
-    tokens.put(COMPONENT_INSTANCE_NAME, roleInstance.getCompInstanceName());
-    tokens.put(CONTAINER_ID, roleInstance.getContainerId().toString());
-    tokens.put(COMPONENT_ID, String.valueOf(roleInstance.componentId));
+    tokens.put(COMPONENT_NAME, instance.getCompSpec().getName());
+    tokens
+        .put(COMPONENT_NAME_LC, instance.getCompSpec().getName().toLowerCase());
+    tokens.put(COMPONENT_INSTANCE_NAME, instance.getCompInstanceName());
+    tokens.put(CONTAINER_ID, instance.getContainer().getId().toString());
+    tokens.put(COMPONENT_ID,
+        String.valueOf(instance.getCompInstanceId().getId()));
-  public void addComponentHostTokens(Map<String, String> tokens,
+  public static void addComponentHostTokens(Map<String, String> tokens,
-  public Iterable<String> getHostsList(Collection<ClusterNode> values,
+  public static Iterable<String> getHostsList(Collection<ClusterNode> values,
-
-  /**
-   * Update ServiceRecord in Registry with IP and hostname.
-   * @param amState access to AM state
-   * @param yarnRegistry acces to YARN registry
-   * @param containerId container ID
-   * @param roleName component name
-   * @param ip list of IPs
-   * @param hostname hostname
-   */
-  public void updateServiceRecord(StateAccessForProviders amState,
-      YarnRegistryViewForProviders yarnRegistry,
-      String containerId, String roleName, List<String> ip, String hostname)
-      throws IOException {
-    try {
-      RoleInstance role = null;
-      if(ip != null && !ip.isEmpty()){
-        role = amState.getOwnedContainer(containerId);
-        role.ip = ip.get(0);
-      }
-      if(hostname != null && !hostname.isEmpty()){
-        role = amState.getOwnedContainer(containerId);
-        role.hostname = hostname;
-      }
-      if (role != null) {
-        // create and publish updated service record (including hostname & ip)
-        ServiceRecord record = new ServiceRecord();
-        record.set(YarnRegistryAttributes.YARN_ID, containerId);
-        record.description = role.getCompInstanceName();
-        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,
-            PersistencePolicies.CONTAINER);
-        // TODO: use constants from YarnRegistryAttributes
-        if (role.ip != null) {
-          record.set("yarn:ip", role.ip);
-        }
-        if (role.hostname != null) {
-          record.set("yarn:hostname", role.hostname);
-        }
-        yarnRegistry.putComponent(
-            RegistryPathUtils.encodeYarnID(containerId), record);
-      }
-    } catch (NoSuchNodeException e) {
-      // ignore - there is nothing to do if we don't find a container
-      log.warn("Owned container {} not found - {}", containerId, e);
-    }
-  }

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 MOV83 INS83 MOV83 MOV43 INS59 INS83 INS83 INS83 INS83 INS83 MOV29 MOV83 INS83 MOV74 MOV42 MOV44 INS8 INS83 INS83 MOV42 INS32 UPD43 UPD43 UPD42 UPD43 UPD42 INS25 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 MOV60 MOV21 MOV21 MOV21 MOV21 INS21 MOV41 INS42 INS42 INS57 UPD42 UPD42 UPD42 MOV43 MOV21 INS32 INS8 UPD42 UPD42 UPD42 UPD42 INS32 INS43 INS21 INS42 INS42 MOV21 INS32 MOV42 MOV42 MOV42 INS32 UPD42 MOV42 MOV43 INS32 INS32 INS42 INS32 UPD42 INS32 MOV42 MOV42 INS32 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 MOV32 INS42 MOV32 UPD42 MOV42 INS32 UPD45 UPD45 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS40 INS40 UPD42 UPD42 MOV32 UPD42 MOV32 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL59 DEL23 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL40 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL66 DEL65 DEL40 DEL40 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL40 DEL40 DEL32 DEL21 DEL40 DEL33 DEL27 DEL42 DEL42 DEL45 DEL40 DEL32 DEL21 DEL8 DEL25 DEL40 DEL33 DEL27 DEL42 DEL42 DEL45 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31