Reverting MAPREDUCE-4371 to address test failures.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355382 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
-import java.util.HashSet;
-          if (isCircular(jobsInProgress)) {
-	    throw new IllegalArgumentException(
-		"job control has circular dependency");
-	  }
-
- /**
-   * Uses topological sorting algorithm for finding circular dependency
-   */
-  private boolean isCircular(final List<ControlledJob> jobList) {
-    boolean cyclePresent = false;
-    HashSet<ControlledJob> SourceSet = new HashSet<ControlledJob>();
-    HashMap<ControlledJob, List<ControlledJob>> processedMap =
-	new HashMap<ControlledJob, List<ControlledJob>>();
-    for (ControlledJob n : jobList) {
-      processedMap.put(n, new ArrayList<ControlledJob>());
-    }
-    for (ControlledJob n : jobList) {
-      if (!hasInComingEdge(n, jobList, processedMap)) {
-	SourceSet.add(n);
-      }
-    }
-    while (!SourceSet.isEmpty()) {
-      ControlledJob controlledJob = SourceSet.iterator().next();
-      SourceSet.remove(controlledJob);
-      if (controlledJob.getDependentJobs() != null) {
-	for (int i = 0; i < controlledJob.getDependentJobs().size(); i++) {
-	  ControlledJob depenControlledJob =
-	      controlledJob.getDependentJobs().get(i);
-	  processedMap.get(controlledJob).add(depenControlledJob);
-	  if (!hasInComingEdge(controlledJob, jobList, processedMap)) {
-	    SourceSet.add(depenControlledJob);
-	  }
-	}
-      }
-    }
-
-    for (ControlledJob controlledJob : jobList) {
-      if (controlledJob.getDependentJobs() != null
-	  && controlledJob.getDependentJobs().size() != processedMap.get(
-	      controlledJob).size()) {
-	cyclePresent = true;
-	LOG.error("Job control has circular dependency for the  job "
-	    + controlledJob.getJobName());
-	break;
-      }
-    }
-    return cyclePresent;
-  }
-
-  private boolean hasInComingEdge(ControlledJob controlledJob,
-      List<ControlledJob> controlledJobList,
-      HashMap<ControlledJob, List<ControlledJob>> processedMap) {
-    boolean hasIncomingEdge = false;
-    for (ControlledJob k : controlledJobList) {
-      if (k != controlledJob && k.getDependentJobs() != null
-	  && !processedMap.get(k).contains(controlledJob)
-	  && k.getDependentJobs().contains(controlledJob)) {
-	hasIncomingEdge = true;
-	break;
-      }
-    }
-    return hasIncomingEdge;
-
-  }

DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL32 DEL21 DEL8 DEL70 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL61 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31