Merge remote-tracking branch 'apache/trunk' into MR-2841

+import org.apache.hadoop.crypto.key.kms.server.KMS.KMSOp;
+import org.apache.hadoop.security.AccessControlException;
+import org.apache.hadoop.security.authorize.AuthorizationException;
+  private static final String UNAUTHORIZED_MSG_WITH_KEY =
+      "User:%s not allowed to do '%s' on '%s'";
+
+  private static final String UNAUTHORIZED_MSG_WITHOUT_KEY =
+      "User:%s not allowed to do '%s'";
-    public String getConfigKey() {
+    public String getAclConfigKey() {
+
+    public String getBlacklistConfigKey() {
+      return KMSConfiguration.CONFIG_PREFIX + "blacklist." + this.toString();
+    }
+  private volatile Map<Type, AccessControlList> blacklistedAcls;
+    Map<Type, AccessControlList> tempBlacklist = new HashMap<Type, AccessControlList>();
-      String aclStr = conf.get(aclType.getConfigKey(), ACL_DEFAULT);
+      String aclStr = conf.get(aclType.getAclConfigKey(), ACL_DEFAULT);
+      String blacklistStr = conf.get(aclType.getBlacklistConfigKey());
+      if (blacklistStr != null) {
+        // Only add if blacklist is present
+        tempBlacklist.put(aclType, new AccessControlList(blacklistStr));
+        LOG.info("'{}' Blacklist '{}'", aclType, blacklistStr);
+      }
+    blacklistedAcls = tempBlacklist;
-    conf.get(Type.CREATE.getConfigKey());
+    conf.get(Type.CREATE.getAclConfigKey());
+  /**
+   * First Check if user is in ACL for the KMS operation, if yes, then
+   * return true if user is not present in any configured blacklist for
+   * the operation
+   * @param type KMS Operation
+   * @param ugi UserGroupInformation of user
+   * @return true is user has access
+   */
-    return acls.get(type).isUserAllowed(ugi);
+    boolean access = acls.get(type).isUserAllowed(ugi);
+    if (access) {
+      AccessControlList blacklist = blacklistedAcls.get(type);
+      access = (blacklist == null) || !blacklist.isUserInList(ugi);
+    }
+    return access;
+  }
+
+  public void assertAccess(KMSACLs.Type aclType,
+      UserGroupInformation ugi, KMSOp operation, String key)
+      throws AccessControlException {
+    if (!KMSWebApp.getACLs().hasAccess(aclType, ugi)) {
+      KMSWebApp.getUnauthorizedCallsMeter().mark();
+      KMSWebApp.getKMSAudit().unauthorized(ugi, operation, key);
+      throw new AuthorizationException(String.format(
+          (key != null) ? UNAUTHORIZED_MSG_WITH_KEY
+                        : UNAUTHORIZED_MSG_WITHOUT_KEY,
+          ugi.getShortUserName(), operation, key));
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS31 INS83 INS83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS45 UPD42 INS83 INS43 INS42 INS8 INS43 INS43 INS43 INS42 INS60 INS21 INS65 INS65 INS65 INS65 INS60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS42 INS41 INS42 INS42 INS42 INS74 INS59 INS7 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS39 INS59 INS42 INS8 INS42 INS40 INS42 INS42 INS42 INS38 INS8 INS27 INS43 INS43 INS43 INS42 INS14 INS60 INS25 INS42 INS42 INS42 MOV32 INS60 INS21 INS32 INS21 INS21 INS53 INS40 INS45 INS32 INS42 INS42 INS42 INS74 INS43 INS59 INS27 INS8 UPD42 INS43 INS59 INS7 INS32 INS42 INS42 INS42 INS32 INS32 INS14 INS52 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS36 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS27 INS32 INS36 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS33 INS42 INS42 INS42 INS27 INS42 INS42 INS33