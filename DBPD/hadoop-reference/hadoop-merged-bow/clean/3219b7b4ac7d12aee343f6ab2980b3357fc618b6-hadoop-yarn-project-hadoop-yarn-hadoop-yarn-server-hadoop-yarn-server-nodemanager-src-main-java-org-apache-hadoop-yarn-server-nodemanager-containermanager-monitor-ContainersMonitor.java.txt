YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)

+import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.nodemanager.containermanager.monitor.ContainersMonitorImpl.ProcessTreeInfo;
-  public ResourceUtilization getContainersUtilization();
+  ResourceUtilization getContainersUtilization();
-  ResourceUtilization getContainersAllocation();
-
-  boolean hasResourcesAvailable(ProcessTreeInfo pti);
-
-  void increaseContainersAllocation(ProcessTreeInfo pti);
-
-  void decreaseContainersAllocation(ProcessTreeInfo pti);
-
-  void increaseResourceUtilization(ResourceUtilization resourceUtil,
-      ProcessTreeInfo pti);
-
-  void decreaseResourceUtilization(ResourceUtilization resourceUtil,
-      ProcessTreeInfo pti);
+  float getVmemRatio();
+
+  /**
+   * Utility method to add a {@link Resource} to the
+   * {@link ResourceUtilization}.
+   * @param containersMonitor Containers Monitor.
+   * @param resourceUtil Resource Utilization.
+   * @param resource Resource.
+   */
+  static void increaseResourceUtilization(
+      ContainersMonitor containersMonitor, ResourceUtilization resourceUtil,
+      Resource resource) {
+    float vCores = (float) resource.getVirtualCores() /
+        containersMonitor.getVCoresAllocatedForContainers();
+    int vmem = (int) (resource.getMemorySize()
+        * containersMonitor.getVmemRatio());
+    resourceUtil.addTo((int)resource.getMemorySize(), vmem, vCores);
+  }
+
+  /**
+   * Utility method to subtract a {@link Resource} from the
+   * {@link ResourceUtilization}.
+   * @param containersMonitor Containers Monitor.
+   * @param resourceUtil Resource Utilization.
+   * @param resource Resource.
+   */
+  static void decreaseResourceUtilization(
+      ContainersMonitor containersMonitor, ResourceUtilization resourceUtil,
+      Resource resource) {
+    float vCores = (float) resource.getVirtualCores() /
+        containersMonitor.getVCoresAllocatedForContainers();
+    int vmem = (int) (resource.getMemorySize()
+        * containersMonitor.getVmemRatio());
+    resourceUtil.subtractFrom((int)resource.getMemorySize(), vmem, vCores);
+  }

MOV26 MOV31 UPD40 INS31 INS31 UPD42 INS39 INS42 INS29 INS83 UPD39 MOV39 UPD42 MOV42 MOV44 MOV44 INS44 INS8 INS29 INS83 MOV44 INS44 INS8 INS65 INS65 INS65 INS65 UPD43 UPD42 INS43 INS42 INS60 INS60 INS21 INS65 INS65 INS65 INS65 UPD43 UPD42 INS43 INS42 INS60 INS60 INS21 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 INS42 INS39 INS59 INS39 INS59 INS32 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 INS42 INS39 INS59 INS39 INS59 INS32 INS42 INS42 INS42 INS27 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS32 INS39 INS36 INS39 INS32 INS11 INS32 INS39 INS36 INS39 INS32 INS39 INS32 INS42 INS42 INS27 INS42 INS42 INS39 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL31 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31