YARN-4680. TimerTasks leak in ATS V1.5 Writer. (Xuan Gong via
gtcarrera9)

+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
+import org.apache.hadoop.util.Time;
+    long timerTaskTTL = conf.getLong(
+        YarnConfiguration.TIMELINE_SERVICE_CLIENT_INTERNAL_TIMERS_TTL_SECS,
+        YarnConfiguration
+            .TIMELINE_SERVICE_CLIENT_INTERNAL_TIMERS_TTL_SECS_DEFAULT);
+
-        new LogFDsCache(flushIntervalSecs, cleanIntervalSecs, ttl);
+        new LogFDsCache(flushIntervalSecs, cleanIntervalSecs, ttl,
+            timerTaskTTL);
-      updateLastModifiedTime(System.currentTimeMillis());
+      updateLastModifiedTime(Time.monotonicNow());
-      updateLastModifiedTime(System.currentTimeMillis());
+      updateLastModifiedTime(Time.monotonicNow());
-      this.lastModifiedTime = System.currentTimeMillis();
+      this.lastModifiedTime = Time.monotonicNow();
-              (logPathToCreate.getName() + "_" + System.currentTimeMillis()));
+              (logPathToCreate.getName() + "_" + Time.monotonicNow()));
-    private Timer flushTimer;
-    private FlushTimerTask flushTimerTask;
-    private Timer cleanInActiveFDsTimer;
-    private CleanInActiveFDsTask cleanInActiveFDsTask;
+    private Timer flushTimer = null;
+    private Timer cleanInActiveFDsTimer = null;
+    private Timer monitorTaskTimer = null;
+    private volatile boolean timerTaskStarted = false;
+    private final ReentrantLock timerTaskLocker = new ReentrantLock();
+    private final long flushIntervalSecs;
+    private final long cleanIntervalSecs;
+    private final long timerTaskRetainTTL;
+    private volatile long timeStampOfLastWrite = Time.monotonicNow();
+    private final ReadLock timerTasksMonitorReadLock;
+    private final WriteLock timerTasksMonitorWriteLock;
-        long ttl) {
+        long ttl, long timerTaskRetainTTL) {
-      this.flushTimer =
-          new Timer(LogFDsCache.class.getSimpleName() + "FlushTimer",
-            true);
-      this.flushTimerTask = new FlushTimerTask();
-      this.flushTimer.schedule(flushTimerTask, flushIntervalSecs * 1000,
-          flushIntervalSecs * 1000);
-
-      this.cleanInActiveFDsTimer =
-          new Timer(LogFDsCache.class.getSimpleName() +
-            "cleanInActiveFDsTimer", true);
-      this.cleanInActiveFDsTask = new CleanInActiveFDsTask();
-      this.cleanInActiveFDsTimer.schedule(cleanInActiveFDsTask,
-          cleanIntervalSecs * 1000, cleanIntervalSecs * 1000);
+      this.flushIntervalSecs = flushIntervalSecs;
+      this.cleanIntervalSecs = cleanIntervalSecs;
+      long timerTaskRetainTTLVar = timerTaskRetainTTL * 1000;
+      if (timerTaskRetainTTLVar > this.ttl) {
+        this.timerTaskRetainTTL = timerTaskRetainTTLVar;
+      } else {
+        this.timerTaskRetainTTL = this.ttl + 2 * 60 * 1000;
+        LOG.warn("The specific " + YarnConfiguration
+            .TIMELINE_SERVICE_CLIENT_INTERNAL_TIMERS_TTL_SECS + " : "
+            + timerTaskRetainTTL + " is invalid, because it is less than or "
+            + "equal to " + YarnConfiguration
+            .TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS + " : " + ttl + ". Use "
+            + YarnConfiguration.TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS + " : "
+            + ttl + " + 120s instead.");
+      }
+      ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+      this.timerTasksMonitorReadLock = lock.readLock();
+      this.timerTasksMonitorWriteLock = lock.writeLock();
-      long currentTimeStamp = System.currentTimeMillis();
+      long currentTimeStamp = Time.monotonicNow();
+    private class TimerMonitorTask extends TimerTask {
+      @Override
+      public void run() {
+        try {
+          timerTasksMonitorWriteLock.lock();
+          monitorTimerTasks();
+        } finally {
+          timerTasksMonitorWriteLock.unlock();
+        }
+      }
+    }
+
+    private void monitorTimerTasks() {
+      if (Time.monotonicNow() - this.timeStampOfLastWrite
+          >= this.timerTaskRetainTTL) {
+        cancelAndCloseTimerTasks();
+
+        timerTaskStarted = false;
+      } else {
+        if (this.monitorTaskTimer != null) {
+          this.monitorTaskTimer.schedule(new TimerMonitorTask(),
+              this.timerTaskRetainTTL);
+        }
+      }
+    }
+
-      flushTimer.cancel();
-      cleanInActiveFDsTimer.cancel();
+      cancelAndCloseTimerTasks();
+    }
+
+    private void cancelAndCloseTimerTasks() {
+      if (flushTimer != null) {
+        flushTimer.cancel();
+        flushTimer = null;
+      }
+
+      if (cleanInActiveFDsTimer != null) {
+        cleanInActiveFDsTimer.cancel();
+        cleanInActiveFDsTimer = null;
+      }
+
+      if (monitorTaskTimer != null) {
+        monitorTaskTimer.cancel();
+        monitorTaskTimer = null;
+      }
+      checkAndStartTimeTasks();
+      checkAndStartTimeTasks();
+      checkAndStartTimeTasks();
+
+    private void createAndStartTimerTasks() {
+      this.flushTimer =
+          new Timer(LogFDsCache.class.getSimpleName() + "FlushTimer",
+              true);
+      this.flushTimer.schedule(new FlushTimerTask(), flushIntervalSecs * 1000,
+          flushIntervalSecs * 1000);
+
+      this.cleanInActiveFDsTimer =
+          new Timer(LogFDsCache.class.getSimpleName()
+              + "cleanInActiveFDsTimer", true);
+      this.cleanInActiveFDsTimer.schedule(new CleanInActiveFDsTask(),
+          cleanIntervalSecs * 1000, cleanIntervalSecs * 1000);
+
+      this.monitorTaskTimer =
+          new Timer(LogFDsCache.class.getSimpleName() + "MonitorTimer",
+              true);
+      this.monitorTaskTimer.schedule(new TimerMonitorTask(),
+          this.timerTaskRetainTTL);
+    }
+
+    private void checkAndStartTimeTasks() {
+      try {
+        this.timerTasksMonitorReadLock.lock();
+        this.timeStampOfLastWrite = Time.monotonicNow();
+        if(!timerTaskStarted) {
+          try {
+            timerTaskLocker.lock();
+            if (!timerTaskStarted) {
+              createAndStartTimerTasks();
+              timerTaskStarted = true;
+            }
+          } finally {
+            timerTaskLocker.unlock();
+          }
+        }
+      } finally {
+        this.timerTasksMonitorReadLock.unlock();
+      }
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV23 MOV23 MOV31 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS55 INS31 INS31 INS31 INS60 MOV43 INS83 MOV43 INS59 UPD43 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 UPD43 INS83 INS83 INS43 INS59 INS83 INS42 MOV44 MOV44 MOV44 INS44 INS8 INS83 INS42 INS43 INS31 INS83 INS39 INS42 INS8 MOV78 INS83 INS39 INS42 MOV43 INS8 UPD83 UPD42 UPD83 INS39 UPD42 MOV21 MOV21 INS83 INS39 INS42 INS8 INS39 INS59 INS33 INS42 INS33 UPD42 UPD42 INS33 INS42 INS9 INS42 INS42 INS14 INS42 UPD42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS39 INS42 MOV21 MOV21 MOV21 MOV21 INS21 INS21 INS60 INS25 INS60 INS21 INS21 INS42 INS78 INS83 INS39 INS42 INS8 INS25 MOV21 INS21 INS25 INS25 INS25 INS21 INS21 INS21 INS54 INS42 INS32 INS43 INS42 INS42 INS7 INS7 INS39 INS59 INS27 INS8 INS8 INS43 INS59 INS7 INS7 INS42 INS54 INS27 INS8 INS8 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS32 INS32 INS32 INS8 INS8 INS42 INS42 INS40 INS40 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS27 INS42 INS22 INS21 INS21 INS21 INS42 INS42 INS14 INS22 INS32 INS22 INS32 INS8 INS8 INS27 INS22 INS21 INS21 INS25 INS42 INS42 INS33 MOV21 INS21 INS42 INS33 MOV21 INS21 INS42 INS33 INS21 INS21 INS42 INS42 INS42 MOV14 MOV14 INS14 INS22 INS42 INS14 INS22 INS21 INS21 INS25 INS21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS52 INS42 INS52 INS42 INS42 INS34 INS52 INS42 INS7 INS7 INS32 INS43 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 UPD42 UPD42 INS21 INS21 INS21 INS32 INS22 INS52 INS42 INS32 INS7 INS27 INS8 INS7 INS7 INS32 INS7 UPD42 INS43 INS27 INS9 MOV52 UPD42 MOV42 INS43 INS52 INS42 INS32 INS7 INS38 INS8 INS32 INS22 INS42 INS22 INS27 INS42 INS42 INS27 INS42 INS32 INS32 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS9 INS22 INS33 INS21 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS32 INS45 INS42 INS22 INS42 INS22 INS32 INS42 INS54 INS22 INS42 INS52 INS42 INS52 INS42 INS22 INS27 INS45 INS40 INS45 INS42 INS45 INS45 INS40 INS45 INS42 INS45 INS40 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS57 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS8 INS8 INS52 INS42 INS52 INS42 INS34 INS34 INS34 INS22 INS42 INS14 INS22 INS43 INS21 INS25 INS21 INS52 INS42 INS43 INS52 INS42 INS42 INS32 INS38 INS8 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS32 INS7 INS42 INS42 INS9 DEL42 DEL42 DEL22 DEL7