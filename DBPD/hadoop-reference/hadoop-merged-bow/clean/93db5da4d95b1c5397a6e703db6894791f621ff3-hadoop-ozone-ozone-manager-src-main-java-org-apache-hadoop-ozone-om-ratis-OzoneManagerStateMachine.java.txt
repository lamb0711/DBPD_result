HDDS-1250. In OM HA AllocateBlock call where connecting to SCM from OM should not happen on Ratis.

+import com.google.common.annotations.VisibleForTesting;
-import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;
+import org.apache.hadoop.ozone.om.protocol.OzoneManagerServerProtocol;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;
+import org.apache.hadoop.ozone.protocolPB.RequestHandler;
-  private final OzoneManagerProtocol ozoneManager;
-  private final OzoneManagerRequestHandler handler;
+  private final OzoneManagerServerProtocol ozoneManager;
+  private RequestHandler handler;
+
+    if (omRequest.getCmdType() ==
+        OzoneManagerProtocolProtos.Type.AllocateBlock) {
+      return handleAllocateBlock(raftClientRequest, omRequest);
+    }
+  /**
+   * Handle AllocateBlock Request, which needs a special handling. This
+   * request needs to be executed on the leader, where it connects to SCM and
+   * get Block information.
+   * @param raftClientRequest
+   * @param omRequest
+   * @return TransactionContext
+   */
+  private TransactionContext handleAllocateBlock(
+      RaftClientRequest raftClientRequest, OMRequest omRequest) {
+    OMResponse omResponse = handler.handle(omRequest);
+
+
+    // If request is failed, no need to proceed further.
+    // Setting the exception with omResponse message and code.
+
+    // TODO: the allocate block fails when scm is in chill mode or when scm is
+    //  down, but that error is not correctly received in OM end, once that
+    //  is fixed, we need to see how to handle this failure case or how we
+    //  need to retry or how to handle this scenario. For other errors like
+    //  KEY_NOT_FOUND, we don't need a retry/
+    if (!omResponse.getSuccess()) {
+      TransactionContext transactionContext = TransactionContext.newBuilder()
+          .setClientRequest(raftClientRequest)
+          .setStateMachine(this)
+          .setServerRole(RaftProtos.RaftPeerRole.LEADER)
+          .build();
+      IOException ioe = new IOException(omResponse.getMessage() +
+          " Status code " + omResponse.getStatus());
+      transactionContext.setException(ioe);
+      return transactionContext;
+    }
+
+
+    // Get original request
+    OzoneManagerProtocolProtos.AllocateBlockRequest allocateBlockRequest =
+        omRequest.getAllocateBlockRequest();
+
+    // Create new AllocateBlockRequest with keyLocation set.
+    OzoneManagerProtocolProtos.AllocateBlockRequest newAllocateBlockRequest =
+        OzoneManagerProtocolProtos.AllocateBlockRequest.newBuilder().
+            mergeFrom(allocateBlockRequest)
+            .setKeyLocation(
+                omResponse.getAllocateBlockResponse().getKeyLocation()).build();
+
+    OMRequest newOmRequest = omRequest.toBuilder().setCmdType(
+        OzoneManagerProtocolProtos.Type.AllocateBlock)
+        .setAllocateBlockRequest(newAllocateBlockRequest).build();
+
+    ByteString messageContent = ByteString.copyFrom(newOmRequest.toByteArray());
+
+    return TransactionContext.newBuilder()
+        .setClientRequest(raftClientRequest)
+        .setStateMachine(this)
+        .setServerRole(RaftProtos.RaftPeerRole.LEADER)
+        .setLogData(messageContent)
+        .build();
+
+  }
+
+  @VisibleForTesting
+  public void setHandler(RequestHandler handler) {
+    this.handler = handler;
+  }
+
+  @VisibleForTesting
+  public void setRaftGroupId(RaftGroupId raftGroupId) {
+    this.raftGroupId = raftGroupId;
+  }
+

INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS23 INS31 INS31 INS31 UPD43 MOV83 INS43 MOV59 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 UPD42 INS42 INS25 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS60 INS60 INS60 INS41 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS21 INS27 INS8 INS66 INS66 INS66 INS42 INS42 INS66 INS42 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 UPD42 MOV42 INS7 INS42 INS7 INS32 INS40 INS41 INS42 INS42 INS32 INS32 INS60 INS60 INS21 INS41 INS40 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS43 INS27 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS32 INS42 INS52 INS32 INS42 INS40 INS42 INS32 INS45 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL83 DEL43 DEL23