Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.NodeResourceUpdateSchedulerEvent;
-  private final int httpPort;
+  private int httpPort;
-  private final String httpAddress;
-  private volatile ResourceOption resourceOption;
+  private String httpAddress;
+  private volatile Resource totalCapability;
+     .addTransition(NodeState.NEW, NodeState.NEW,
+         RMNodeEventType.RESOURCE_UPDATE, 
+         new UpdateNodeResourceWhenUnusableTransition())
+     .addTransition(NodeState.RUNNING, NodeState.RUNNING,
+         RMNodeEventType.RESOURCE_UPDATE, new UpdateNodeResourceWhenRunningTransition())
+
+     //Transitions from REBOOTED state
+     .addTransition(NodeState.REBOOTED, NodeState.REBOOTED,
+         RMNodeEventType.RESOURCE_UPDATE, 
+         new UpdateNodeResourceWhenUnusableTransition())
+         
+     //Transitions from DECOMMISSIONED state
+     .addTransition(NodeState.DECOMMISSIONED, NodeState.DECOMMISSIONED,
+         RMNodeEventType.RESOURCE_UPDATE, 
+         new UpdateNodeResourceWhenUnusableTransition())
+         
+     //Transitions from LOST state
+     .addTransition(NodeState.LOST, NodeState.LOST,
+         RMNodeEventType.RESOURCE_UPDATE, 
+         new UpdateNodeResourceWhenUnusableTransition())
+     .addTransition(NodeState.UNHEALTHY, NodeState.UNHEALTHY,
+         RMNodeEventType.RESOURCE_UPDATE, new UpdateNodeResourceWhenUnusableTransition())
-      int cmPort, int httpPort, Node node, ResourceOption resourceOption, String nodeManagerVersion) {
+      int cmPort, int httpPort, Node node, Resource capability, String nodeManagerVersion) {
-    this.resourceOption = resourceOption; 
+    this.totalCapability = capability; 
-    return this.resourceOption.getResource();
-  }
-  
-  @Override
-  public void setResourceOption(ResourceOption resourceOption) {
-    this.resourceOption = resourceOption;
-  }
-  
-  @Override
-  public ResourceOption getResourceOption(){
-    return this.resourceOption;
+    return this.totalCapability;
+  private static void handleRunningAppOnNode(RMNodeImpl rmNode,
+      RMContext context, ApplicationId appId, NodeId nodeId) {
+    RMApp app = context.getRMApps().get(appId);
+
+    // if we failed getting app by appId, maybe something wrong happened, just
+    // add the app to the finishedApplications list so that the app can be
+    // cleaned up on the NM
+    if (null == app) {
+      LOG.warn("Cannot get RMApp by appId=" + appId
+          + ", just added it to finishedApplications list for cleanup");
+      rmNode.finishedApplications.add(appId);
+      return;
+    }
+
+    context.getDispatcher().getEventHandler()
+        .handle(new RMAppRunningOnNodeEvent(appId, nodeId));
+  }
+  
+  private static void updateNodeResourceFromEvent(RMNodeImpl rmNode, 
+     RMNodeResourceUpdateEvent event){
+      ResourceOption resourceOption = event.getResourceOption();
+      // Set resource on RMNode
+      rmNode.totalCapability = resourceOption.getResource();
+  }
+
-
-    void handleRunningAppOnNode(RMNodeImpl rmNode, RMContext context,
-        ApplicationId appId, NodeId nodeId) {
-      RMApp app = context.getRMApps().get(appId);
-      
-      // if we failed getting app by appId, maybe something wrong happened, just
-      // add the app to the finishedApplications list so that the app can be
-      // cleaned up on the NM
-      if (null == app) {
-        LOG.warn("Cannot get RMApp by appId=" + appId
-            + ", just added it to finishedApplications list for cleanup");
-        rmNode.finishedApplications.add(appId);
-        return;
-      }
-
-      context.getDispatcher().getEventHandler()
-          .handle(new RMAppRunningOnNodeEvent(appId, nodeId));
-    }
-      // Kill containers since node is rejoining.
-      rmNode.nodeUpdateQueue.clear();
-      rmNode.context.getDispatcher().getEventHandler().handle(
-          new NodeRemovedSchedulerEvent(rmNode));
-
-      RMNode newNode = ((RMNodeReconnectEvent)event).getReconnectedNode();
+      RMNodeReconnectEvent reconnectEvent = (RMNodeReconnectEvent) event;
+      RMNode newNode = reconnectEvent.getReconnectedNode();
-      if (rmNode.getTotalCapability().equals(newNode.getTotalCapability())
-          && rmNode.getHttpPort() == newNode.getHttpPort()) {
-        // Reset heartbeat ID since node just restarted.
-        rmNode.getLastNodeHeartBeatResponse().setResponseId(0);
-        if (rmNode.getState() != NodeState.UNHEALTHY) {
-          // Only add new node if old state is not UNHEALTHY
-          rmNode.context.getDispatcher().getEventHandler().handle(
-              new NodeAddedSchedulerEvent(rmNode));
+      rmNode.httpPort = newNode.getHttpPort();
+      rmNode.httpAddress = newNode.getHttpAddress();
+      rmNode.totalCapability = newNode.getTotalCapability();
+      
+      // Reset heartbeat ID since node just restarted.
+      rmNode.getLastNodeHeartBeatResponse().setResponseId(0);
+
+      if (null != reconnectEvent.getRunningApplications()) {
+        for (ApplicationId appId : reconnectEvent.getRunningApplications()) {
+          handleRunningAppOnNode(rmNode, rmNode.context, appId, rmNode.nodeId);
-      } else {
-        // Reconnected node differs, so replace old node and start new node
-        switch (rmNode.getState()) {
-        case RUNNING:
-          ClusterMetrics.getMetrics().decrNumActiveNodes();
-          break;
-        case UNHEALTHY:
-          ClusterMetrics.getMetrics().decrNumUnhealthyNMs();
-          break;
-        }
-        rmNode.context.getRMNodes().put(newNode.getNodeID(), newNode);
-        rmNode.context.getDispatcher().getEventHandler().handle(
-            new RMNodeStartedEvent(newNode.getNodeID(), null, null));
+
+      if (rmNode.getState().equals(NodeState.RUNNING)) {
+        // Update scheduler node's capacity for reconnect node.
+        rmNode.context.getDispatcher().getEventHandler().handle(
+            new NodeResourceUpdateSchedulerEvent(rmNode, 
+                ResourceOption.newInstance(rmNode.totalCapability, -1)));
+      }
+      
+  
+  public static class UpdateNodeResourceWhenRunningTransition
+      implements SingleArcTransition<RMNodeImpl, RMNodeEvent> {
+    @Override
+    public void transition(RMNodeImpl rmNode, RMNodeEvent event) {
+      RMNodeResourceUpdateEvent updateEvent = (RMNodeResourceUpdateEvent)event;
+      updateNodeResourceFromEvent(rmNode, updateEvent);
+      // Notify new resourceOption to scheduler
+      rmNode.context.getDispatcher().getEventHandler().handle(
+          new NodeResourceUpdateSchedulerEvent(rmNode, updateEvent.getResourceOption()));
+    }
+  }
+  
+  public static class UpdateNodeResourceWhenUnusableTransition
+      implements SingleArcTransition<RMNodeImpl, RMNodeEvent> {
+
+    @Override
+    public void transition(RMNodeImpl rmNode, RMNodeEvent event) {
+      // The node is not usable, only log a warn message
+      LOG.warn("Try to update resource on a "+ rmNode.getState().toString() +
+          " node: "+rmNode.toString());
+      updateNodeResourceFromEvent(rmNode, (RMNodeResourceUpdateEvent)event);
+      // No need to notify scheduler as schedulerNode is not function now
+      // and can sync later from RMnode.
+    }
+  }
+  

INS26 MOV31 INS40 MOV31 INS55 INS55 INS55 UPD43 MOV78 INS83 INS83 INS83 UPD83 UPD42 INS44 INS83 MOV83 MOV42 MOV74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 UPD42 UPD42 INS32 UPD43 UPD42 INS43 INS42 INS43 INS42 INS60 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS43 INS43 INS43 MOV78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS43 MOV78 INS83 INS39 INS42 INS44 INS44 INS8 MOV32 INS42 UPD42 INS22 INS42 INS42 MOV43 INS59 MOV60 INS60 MOV21 INS21 MOV21 INS21 MOV21 INS25 MOV21 INS25 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS21 MOV21 INS42 INS42 INS42 INS43 INS42 INS43 INS42 MOV21 MOV21 UPD42 INS40 INS40 INS40 INS14 UPD42 MOV52 UPD42 MOV42 INS42 INS32 INS40 INS32 INS43 MOV43 INS59 INS7 INS7 INS7 INS27 INS8 INS32 INS8 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS43 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 MOV11 INS42 INS32 INS40 MOV32 INS40 INS32 INS40 MOV32 INS33 INS32 INS70 MOV32 UPD42 MOV42 INS40 INS21 INS42 INS42 INS11 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS42 UPD42 INS11 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS44 INS32 INS8 INS32 INS43 INS42 UPD43 INS32 INS45 INS32 INS45 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS21 MOV32 MOV42 MOV14 INS42 UPD42 INS42 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD43 INS32 INS32 INS42 INS40 INS42 INS42 MOV40 UPD42 MOV42 INS40 UPD42 INS42 INS42 INS40 INS38 INS32 INS42 INS40 INS40 INS40 MOV14 INS34 INS32 INS42 MOV40 MOV32 INS40 MOV14 INS32 INS42 INS40 INS40 INS40 INS14 MOV32 MOV42 INS40 INS40 INS40 INS14 INS43 UPD40 UPD40 UPD40 INS14 INS43 INS42 UPD40 INS40 UPD40 INS14 INS43 INS42 INS43 INS42 INS42 INS32 INS42 MOV32 MOV42 INS40 INS40 INS40 INS14 INS43 INS42 DEL83 DEL83 DEL22 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL36 DEL42 DEL32 DEL40 DEL32 DEL40 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL33 DEL33 DEL14 DEL83 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL27 DEL27 DEL40 DEL27 DEL8 DEL25 DEL8 DEL42 DEL49 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL10 DEL50 DEL8 DEL25 DEL8 DEL31 DEL55