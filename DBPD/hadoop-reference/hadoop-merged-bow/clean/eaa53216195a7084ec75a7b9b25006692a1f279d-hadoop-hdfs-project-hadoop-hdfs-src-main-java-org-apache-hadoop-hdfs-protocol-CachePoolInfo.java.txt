Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1553226 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo.Expiration;
+  /**
+   * Indicates that the pool does not have a maximum relative expiry.
+   */
+  public static final long RELATIVE_EXPIRY_NEVER =
+      Expiration.MAX_RELATIVE_EXPIRY_MS;
+  /**
+   * Default max relative expiry for cache pools.
+   */
+  public static final long DEFAULT_MAX_RELATIVE_EXPIRY =
+      RELATIVE_EXPIRY_NEVER;
+
+  public static final long LIMIT_UNLIMITED = Long.MAX_VALUE;
+  public static final long DEFAULT_LIMIT = LIMIT_UNLIMITED;
+
+  @Nullable
+  Long maxRelativeExpiryMs;
+
-  
+
+  /**
+   * @return Name of the pool.
+   */
+  /**
+   * @return The owner of the pool. Along with the group and mode, determines
+   *         who has access to view and modify the pool.
+   */
+  /**
+   * @return The group of the pool. Along with the owner and mode, determines
+   *         who has access to view and modify the pool.
+   */
-  
+
+  /**
+   * @return Unix-style permissions of the pool. Along with the owner and group,
+   *         determines who has access to view and modify the pool.
+   */
+  /**
+   * @return The maximum aggregate number of bytes that can be cached by
+   *         directives in this pool.
+   */
+  /**
+   * @return The maximum relative expiration of directives of this pool in
+   *         milliseconds
+   */
+  public Long getMaxRelativeExpiryMs() {
+    return maxRelativeExpiryMs;
+  }
+
+  /**
+   * Set the maximum relative expiration of directives of this pool in
+   * milliseconds.
+   * 
+   * @param ms in milliseconds
+   * @return This builder, for call chaining.
+   */
+  public CachePoolInfo setMaxRelativeExpiryMs(Long ms) {
+    this.maxRelativeExpiryMs = ms;
+    return this;
+  }
+
+      append(", maxRelativeExpiryMs:").append(maxRelativeExpiryMs).
+        append(maxRelativeExpiryMs, other.maxRelativeExpiryMs).
+        append(maxRelativeExpiryMs).
+    if (info.getMaxRelativeExpiryMs() != null) {
+      long maxRelativeExpiryMs = info.getMaxRelativeExpiryMs();
+      if (maxRelativeExpiryMs < 0l) {
+        throw new InvalidRequestException("Max relative expiry is negative.");
+      }
+      if (maxRelativeExpiryMs > Expiration.MAX_RELATIVE_EXPIRY_MS) {
+        throw new InvalidRequestException("Max relative expiry is too big.");
+      }
+    }

INS26 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS78 INS43 INS59 INS29 INS29 INS29 INS29 INS29 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS40 INS65 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS21 INS41 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS7 INS52 INS32 INS32 INS32 INS27 INS8 INS22 INS42 INS32 INS42 MOV32 INS42 MOV32 INS42 INS32 INS33 INS60 INS25 INS25 INS52 INS42 MOV32 INS42 INS45 INS42 UPD42 INS40 UPD42 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS27 INS8 UPD42 INS42 INS42 INS32 INS42 INS34 INS53 INS42 INS40 INS53 UPD45 INS42 INS42 INS14 INS14 INS43 INS45 INS43 INS45 INS42 INS42