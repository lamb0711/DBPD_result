Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.server.resourcemanager.RMAuditLogger;
+import org.apache.hadoop.yarn.server.resourcemanager.RMAuditLogger.AuditConstants;
-  Map<Priority, Integer> schedulingOpportunities = new HashMap<Priority, Integer>();
+  Map<Priority, Integer> schedulingOpportunities = 
+      new HashMap<Priority, Integer>();
+  
+  Map<Priority, Integer> reReservations =
+      new HashMap<Priority, Integer>();
+
+    RMAuditLogger.logSuccess(getUser(), 
+        AuditConstants.RELEASE_CONTAINER, "SchedulerApp", 
+        getApplicationId(), containerId);
+    RMAuditLogger.logSuccess(getUser(), 
+        AuditConstants.ALLOC_CONTAINER, "SchedulerApp", 
+        getApplicationId(), container.getId());
-    Integer schedulingOpportunities = this.schedulingOpportunities
-        .get(priority);
+    Integer schedulingOpportunities = 
+        this.schedulingOpportunities.get(priority);
-    Integer schedulingOpportunities = this.schedulingOpportunities
-        .get(priority);
+    Integer schedulingOpportunities = 
+        this.schedulingOpportunities.get(priority);
-    Integer schedulingOpportunities = this.schedulingOpportunities
-        .get(priority);
+    Integer schedulingOpportunities = 
+        this.schedulingOpportunities.get(priority);
+  synchronized void resetReReservations(Priority priority) {
+    Integer reReservations = this.reReservations.get(priority);
+    reReservations = 0;
+    this.reReservations.put(priority, reReservations);
+  }
+
+  synchronized void addReReservation(Priority priority) {
+    Integer reReservations = this.reReservations.get(priority);
+    if (reReservations == null) {
+      reReservations = 0;
+    }
+    ++reReservations;
+    this.reReservations.put(priority, reReservations);
+  }
+
+  synchronized public int getReReservations(Priority priority) {
+    Integer reReservations = this.reReservations.get(priority);
+    if (reReservations == null) {
+      reReservations = 0;
+      this.reReservations.put(priority, reReservations);
+    }
+    return reReservations;
+  }
+
+      
+      // Reset the re-reservation count
+      resetReReservations(priority);
+    } else {
+      // Note down the re-reservation
+      addReReservation(priority);
+    // Reset the re-reservation count
+    resetReReservations(priority);
+
-   * @return
+   * @return true is reserved, false if not

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS74 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS14 INS21 INS21 INS43 INS42 INS60 INS21 INS21 INS43 INS42 INS60 INS25 INS21 INS21 INS43 INS42 INS60 INS25 INS41 INS21 INS42 INS42 INS42 INS74 INS32 INS32 INS42 INS43 INS59 INS7 INS32 INS42 INS43 INS59 INS27 INS8 INS38 INS32 INS42 INS43 INS59 INS27 INS8 INS42 INS8 INS32 INS66 INS43 INS43 INS43 INS42 INS42 INS32 INS40 INS45 INS32 INS42 INS42 INS42 INS32 INS40 INS45 INS32 INS32 INS42 INS42 INS32 INS42 INS34 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS52 INS42 INS22 INS42 INS42 INS7 INS52 INS42 INS22 INS42 INS42 INS7 INS32 INS32 INS32 INS52 INS42 INS52 INS42 INS42 INS34 INS52 INS42 INS42 INS34 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42