YARN-6395. Integrate service app master to write data into ATSv2. Contributed by Rohith Sharma K S

+import org.apache.hadoop.yarn.client.api.TimelineClient;
+import org.apache.slider.server.appmaster.timelineservice.ServiceTimelinePublisher;
+import org.apache.slider.server.appmaster.timelineservice.SliderMetricsSink;
+  /** Handle to communicate with the timeline service */
+  private TimelineClient timelineClient;
+
+  private boolean timelineServiceEnabled = false;
+
+  ServiceTimelinePublisher serviceTimelinePublisher;
+
+    if (YarnConfiguration.timelineServiceV2Enabled(conf)) {
+      timelineServiceEnabled = true;
+      log.info("Enabled YARN timeline service v2. ");
+    }
+      if (timelineServiceEnabled) {
+        timelineClient = TimelineClient.createTimelineClient(appid);
+        asyncRMClient.registerTimelineClient(timelineClient);
+        timelineClient.init(getConfig());
+        timelineClient.start();
+        log.info("Timeline client started.");
+
+        serviceTimelinePublisher = new ServiceTimelinePublisher(timelineClient);
+        serviceTimelinePublisher.init(getConfig());
+        serviceTimelinePublisher.start();
+        appState.setServiceTimelinePublisher(serviceTimelinePublisher);
+        log.info("ServiceTimelinePublisher started.");
+      }
+
+      if (timelineServiceEnabled) {
+        DefaultMetricsSystem.instance().register("SliderMetricsSink",
+            "For processing metrics to ATS",
+            new SliderMetricsSink(serviceTimelinePublisher));
+        log.info("SliderMetricsSink registered.");
+      }
+    if (timelineServiceEnabled) {
+      serviceTimelinePublisher.serviceAttemptRegistered(appState);
+    }
+
+    if (timelineServiceEnabled) {
+      serviceTimelinePublisher.componentInstanceStarted(container,
+          instance.providerRole.component.getName());
+    }
+    if (timelineServiceEnabled) {
+      serviceTimelinePublisher.serviceAttemptUnregistered(appState, stopAction);
+      serviceTimelinePublisher.stop();
+      timelineClient.stop();
+    }
+
+        if (timelineServiceEnabled && result.roleInstance != null) {
+          serviceTimelinePublisher
+              .componentInstanceFinished(result.roleInstance);
+        }
+    } else if (timelineServiceEnabled) {
+      RoleInstance instance = appState.getOwnedContainer(containerId);
+      if (instance != null) {
+        org.apache.slider.api.resource.Container container =
+            instance.providerRole.component
+                .getContainer(containerId.toString());
+        if (container != null) {
+          serviceTimelinePublisher.componentInstanceUpdated(container,
+              instance.providerRole.component.getName());
+        }
+      }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS29 INS83 INS43 INS59 INS83 INS39 INS59 INS43 INS59 INS65 INS42 INS42 INS42 INS9 INS42 INS42 INS25 INS25 INS25 INS25 INS66 INS32 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS25 INS42 INS42 INS42 INS21 INS21 INS25 INS25 INS21 INS21 INS21 INS21 INS21 INS42 INS8 INS7 INS32 INS42 INS8 INS42 INS8 INS32 INS32 INS32 INS32 INS32 INS60 INS25 INS42 INS9 INS42 INS42 INS45 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS43 INS59 INS27 INS8 INS7 INS32 INS32 INS32 INS32 INS7 INS32 INS32 INS32 INS32 INS32 INS32 INS40 INS42 INS27 INS8 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS45 INS45 INS14 INS42 INS42 INS45 INS42 INS27 INS21 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS40 INS33 INS32 INS40 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42