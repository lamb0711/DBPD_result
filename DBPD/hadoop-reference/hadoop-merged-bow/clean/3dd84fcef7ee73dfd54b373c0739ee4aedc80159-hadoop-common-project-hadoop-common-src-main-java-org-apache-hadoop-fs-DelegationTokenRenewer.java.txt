Merge r1410998 through r1412282 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1412297 13f79535-47bb-0310-9956-ffa450edef68

-public class DelegationTokenRenewer<T extends FileSystem & DelegationTokenRenewer.Renewable>
+public class DelegationTokenRenewer
-      renewalTime = RENEW_CYCLE + Time.now();
+      renewalTime = renewCycle + Time.now();
-  private static final int RENEW_CYCLE = 24 * 60 * 60 * 950;
+  private static final int RENEW_CYCLE = 24 * 60 * 60 * 950; 
-  private DelayQueue<RenewAction<T>> queue = new DelayQueue<RenewAction<T>>();
+  @InterfaceAudience.Private
+  protected static int renewCycle = RENEW_CYCLE;
-  public DelegationTokenRenewer(final Class<T> clazz) {
+  /** Queue to maintain the RenewActions to be processed by the {@link #run()} */
+  private volatile DelayQueue<RenewAction<?>> queue = new DelayQueue<RenewAction<?>>();
+  
+  /**
+   * Create the singleton instance. However, the thread can be started lazily in
+   * {@link #addRenewAction(FileSystem)}
+   */
+  private static DelegationTokenRenewer INSTANCE = null;
+
+  private DelegationTokenRenewer(final Class<? extends FileSystem> clazz) {
-  /** Add a renew action to the queue. */
-  public void addRenewAction(final T fs) {
-    queue.add(new RenewAction<T>(fs));
+  public static synchronized DelegationTokenRenewer getInstance() {
+    if (INSTANCE == null) {
+      INSTANCE = new DelegationTokenRenewer(FileSystem.class);
+    }
+    return INSTANCE;
+  /** Add a renew action to the queue. */
+  public synchronized <T extends FileSystem & Renewable> void addRenewAction(final T fs) {
+    queue.add(new RenewAction<T>(fs));
+    if (!isAlive()) {
+      start();
+    }
+  }
+
+  /** Remove the associated renew action from the queue */
+  public synchronized <T extends FileSystem & Renewable> void removeRenewAction(
+      final T fs) {
+    for (RenewAction<?> action : queue) {
+      if (action.weakFs.get() == fs) {
+        queue.remove(action);
+        return;
+      }
+    }
+  }
+
+  @SuppressWarnings("static-access")
-      RenewAction<T> action = null;
+      RenewAction<?> action = null;
-        action = queue.take();
-        if (action.renew()) {
-          action.updateRenewalTime();
-          queue.add(action);
+        synchronized (this) {
+          action = queue.take();
+          if (action.renew()) {
+            action.updateRenewalTime();
+            queue.add(action);
+          }
-        T.LOG.warn("Failed to renew token, action=" + action, ie);
+        action.weakFs.get().LOG.warn("Failed to renew token, action=" + action,
+            ie);

INS23 INS23 INS31 INS31 INS78 INS83 INS83 INS39 INS59 INS29 INS83 UPD74 MOV74 INS29 INS83 INS83 INS43 INS59 UPD83 INS83 INS83 INS83 INS43 INS42 INS8 INS83 INS73 INS29 INS83 INS83 INS73 INS39 INS42 INS44 INS8 INS79 INS40 INS42 INS42 INS65 UPD74 INS65 INS42 INS42 INS33 UPD74 INS42 INS25 INS41 INS42 INS43 INS43 INS25 INS65 MOV42 INS43 UPD43 MOV43 INS83 INS43 INS42 INS70 INS42 INS45 INS66 INS65 INS66 INS76 UPD74 MOV74 INS66 INS65 INS76 INS27 INS8 INS42 INS42 INS42 INS38 INS8 INS66 INS42 INS42 INS42 INS44 INS42 INS8 INS68 UPD74 INS68 INS43 INS42 INS33 INS21 INS32 INS21 UPD74 MOV74 INS42 INS25 INS42 INS76 INS42 INS69 UPD42 MOV42 INS7 INS42 INS32 INS76 INS27 INS8 INS74 INS8 UPD42 MOV43 INS42 INS14 INS42 INS32 INS42 INS21 INS41 INS43 INS76 INS51 INS43 INS57 INS40 INS42 INS32 INS42 INS52 MOV8 INS42 INS43 INS42 INS42 INS42 INS42 INS22 INS32 INS42 UPD40 MOV40 INS42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL43 DEL40 DEL42 DEL43