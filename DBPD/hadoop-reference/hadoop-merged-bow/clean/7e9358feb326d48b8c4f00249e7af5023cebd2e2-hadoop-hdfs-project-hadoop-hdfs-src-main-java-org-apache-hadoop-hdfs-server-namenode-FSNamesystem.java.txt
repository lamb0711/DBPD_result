HDFS-3107. Introduce truncate. Contributed by Plamen Jeliazkov.
+   * Truncate file to a lower length.
+   * Truncate cannot be reverted / recovered from as it causes data loss.
+   * Truncation at block boundary is atomic, otherwise it requires
+   * block recovery to truncate the last block of the file.
+   *
+   * @return true if and client does not need to wait for block recovery,
+   * false if client needs to wait for block recovery.
+   */
+  boolean truncate(String src, long newLength,
+                   String clientName, String clientMachine,
+                   long mtime)
+      throws IOException, UnresolvedLinkException {
+    boolean ret;
+    try {
+      ret = truncateInt(src, newLength, clientName, clientMachine, mtime);
+    } catch (AccessControlException e) {
+      logAuditEvent(false, "truncate", src);
+      throw e;
+    }
+    return ret;
+  }
+
+  boolean truncateInt(String srcArg, long newLength,
+                      String clientName, String clientMachine,
+                      long mtime)
+      throws IOException, UnresolvedLinkException {
+    String src = srcArg;
+    if (NameNode.stateChangeLog.isDebugEnabled()) {
+      NameNode.stateChangeLog.debug("DIR* NameSystem.truncate: src="
+          + src + " newLength=" + newLength);
+    }
+    HdfsFileStatus stat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
+    boolean res;
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode("Cannot truncate for " + src);
+      src = dir.resolvePath(pc, src, pathComponents);
+      res = truncateInternal(src, newLength, clientName,
+                             clientMachine, mtime, pc);
+      stat = FSDirStatAndListingOp.getFileInfo(dir, src, false,
+          FSDirectory.isReservedRawName(src), true);
+    } finally {
+      writeUnlock();
+    }
+    getEditLog().logSync();
+    logAuditEvent(true, "truncate", src, null, stat);
+    return res;
+  }
+
+  /**
+   * Truncate a file to a given size
+   * Update the count at each ancestor directory with quota
+   */
+  boolean truncateInternal(String src, long newLength,
+                           String clientName, String clientMachine,
+                           long mtime, FSPermissionChecker pc)
+      throws IOException, UnresolvedLinkException {
+    assert hasWriteLock();
+    INodesInPath iip = dir.getINodesInPath4Write(src, true);
+    if (isPermissionEnabled) {
+      dir.checkPathAccess(pc, iip, FsAction.WRITE);
+    }
+    INodeFile file = iip.getLastINode().asFile();
+    // Data will be lost after truncate occurs so it cannot support snapshots.
+    if(file.isInLatestSnapshot(iip.getLatestSnapshotId()))
+      throw new HadoopIllegalArgumentException(
+          "Cannot truncate file with snapshot.");
+    // Opening an existing file for write. May need lease recovery.
+    recoverLeaseInternal(iip, src, clientName, clientMachine, false);
+    // Refresh INode as the file could have been closed
+    iip = dir.getINodesInPath4Write(src, true);
+    file = INodeFile.valueOf(iip.getLastINode(), src);
+    // Truncate length check.
+    long oldLength = file.computeFileSize();
+    if(oldLength == newLength)
+      return true;
+    if(oldLength < newLength)
+      throw new HadoopIllegalArgumentException(
+          "Cannot truncate to a larger file size. Current size: " + oldLength +
+              ", truncate size: " + newLength + ".");
+    // Perform INodeFile truncation.
+    BlocksMapUpdateInfo collectedBlocks = new BlocksMapUpdateInfo();
+    boolean onBlockBoundary = dir.truncate(iip, newLength,
+                                           collectedBlocks, mtime);
+
+    if(! onBlockBoundary) {
+      // Open file for write, but don't log into edits
+      prepareFileForWrite(src, iip, clientName, clientMachine, false, false);
+      file = INodeFile.valueOf(dir.getINode4Write(src), src);
+      initializeBlockRecovery(file);
+    }
+    getEditLog().logTruncate(src, clientName, clientMachine, newLength, mtime);
+    removeBlocks(collectedBlocks);
+    return onBlockBoundary;
+  }
+
+  void initializeBlockRecovery(INodeFile inodeFile) throws IOException {
+    BlockInfo lastBlock = inodeFile.getLastBlock();
+    long recoveryId = nextGenerationStamp(blockIdManager.isLegacyBlock(lastBlock));
+    ((BlockInfoUnderConstruction)lastBlock).initializeBlockRecovery(
+        BlockUCState.BEING_TRUNCATED, recoveryId);
+  }
+
+  /**
-              && lastBlock.getBlockUCState() == BlockUCState.UNDER_RECOVERY) {
+              && (lastBlock.getBlockUCState() == BlockUCState.UNDER_RECOVERY ||
+                 lastBlock.getBlockUCState() == BlockUCState.BEING_TRUNCATED)) {
+    case BEING_TRUNCATED:
-      uc.initializeBlockRecovery(blockRecoveryId);
+      if (uc.getBlockUCState() != BlockUCState.BEING_TRUNCATED) {
+        uc.initializeBlockRecovery(blockRecoveryId);
+      }

INS31 INS31 INS31 INS31 INS29 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS39 INS42 INS44 INS43 INS8 INS65 INS65 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS60 INS54 INS41 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS21 INS60 INS60 INS21 INS54 INS21 INS21 INS41 INS65 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS6 INS60 INS25 INS60 INS25 INS21 INS21 INS21 INS60 INS25 INS25 INS60 INS60 INS25 INS21 INS21 INS41 INS43 INS42 INS42 INS60 INS60 INS21 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS39 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS39 INS59 INS5 INS59 INS32 INS8 INS8 INS32 INS32 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS8 INS43 INS59 INS32 INS53 INS32 INS7 INS7 INS39 INS59 INS27 INS41 INS27 INS53 INS43 INS59 INS39 INS59 INS38 INS8 INS32 INS32 INS42 INS42 INS43 INS59 INS39 INS59 INS32 INS49 INS25 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS40 INS42 INS21 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS40 INS42 INS39 INS85 INS85 INS42 INS32 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS9 INS45 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS32 INS42 INS21 INS21 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS36 INS42 INS40 INS42 INS42 INS27 INS8 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS9 INS32 INS32 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS32 INS11 INS32 INS40 MOV21 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS27 INS42 INS40 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS27 MOV27 INS27 INS32 INS40 INS42 INS42