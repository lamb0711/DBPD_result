Merge trunk into branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1437623 13f79535-47bb-0310-9956-ffa450edef68

-  public static boolean fullyDelete(File dir) {
-    if (dir.delete()) {
+  public static boolean fullyDelete(final File dir) {
+    return fullyDelete(dir, false);
+  }
+  
+  /**
+   * Delete a directory and all its contents.  If
+   * we return false, the directory may be partially-deleted.
+   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed
+   *     to by the symlink is not deleted.
+   * (2) If dir is symlink to a directory, symlink is deleted. The directory
+   *     pointed to by symlink is not deleted.
+   * (3) If dir is a normal file, it is deleted.
+   * (4) If dir is a normal directory, then dir and all its contents recursively
+   *     are deleted.
+   * @param dir the file or directory to be deleted
+   * @param tryGrantPermissions true if permissions should be modified to delete a file.
+   * @return true on success false on failure.
+   */
+  public static boolean fullyDelete(final File dir, boolean tryGrantPermissions) {
+    if (tryGrantPermissions) {
+      // try to chmod +rwx the parent folder of the 'dir': 
+      File parent = dir.getParentFile();
+      grantPermissions(parent);
+    }
+    if (deleteImpl(dir, false)) {
-
-    if (!fullyDeleteContents(dir)) {
+    if (!fullyDeleteContents(dir, tryGrantPermissions)) {
-    return dir.delete();
+    return deleteImpl(dir, true);
+  }
+  
+  /*
+   * Pure-Java implementation of "chmod +rwx f".
+   */
+  private static void grantPermissions(final File f) {
+      f.setExecutable(true);
+      f.setReadable(true);
+      f.setWritable(true);
+  private static boolean deleteImpl(final File f, final boolean doLog) {
+    if (f == null) {
+      LOG.warn("null file argument.");
+      return false;
+    }
+    final boolean wasDeleted = f.delete();
+    if (wasDeleted) {
+      return true;
+    }
+    final boolean ex = f.exists();
+    if (doLog && ex) {
+      LOG.warn("Failed to delete file or dir ["
+          + f.getAbsolutePath() + "]: it still exists.");
+    }
+    return !ex;
+  }
+  
-  public static boolean fullyDeleteContents(File dir) {
+  public static boolean fullyDeleteContents(final File dir) {
+    return fullyDeleteContents(dir, false);
+  }
+  
+  /**
+   * Delete the contents of a directory, not the directory itself.  If
+   * we return false, the directory may be partially-deleted.
+   * If dir is a symlink to a directory, all the contents of the actual
+   * directory pointed to by dir will be deleted.
+   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this 
+   * and all the underlying directories before trying to delete their contents.
+   */
+  public static boolean fullyDeleteContents(final File dir, final boolean tryGrantPermissions) {
+    if (tryGrantPermissions) {
+      // to be able to list the dir and delete files from it
+      // we must grant the dir rwx permissions: 
+      grantPermissions(dir);
+    }
-    File contents[] = dir.listFiles();
+    final File[] contents = dir.listFiles();
-          if (!contents[i].delete()) {// normal file or symlink to another file
+          if (!deleteImpl(contents[i], true)) {// normal file or symlink to another file
-          b = contents[i].delete();
+          b = deleteImpl(contents[i], false);
-          if (!fullyDelete(contents[i])) {
+          if (!fullyDelete(contents[i], tryGrantPermissions)) {
-            continue; // continue deletion of other files/dirs under dir
+            // continue deletion of other files/dirs under dir

INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 MOV29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS44 MOV8 INS83 INS41 INS65 INS65 INS65 INS65 INS83 INS43 INS42 INS39 INS42 INS25 MOV25 INS25 INS41 INS83 INS43 INS42 INS21 INS21 INS21 INS83 INS43 INS42 INS83 INS39 INS42 INS25 INS60 INS25 INS60 INS25 INS41 INS83 INS43 INS42 INS41 INS65 INS65 INS83 INS43 INS83 INS39 INS42 INS25 MOV60 MOV60 MOV41 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS8 INS38 MOV8 INS32 INS42 INS32 INS32 INS32 INS42 INS27 INS8 INS83 INS39 INS59 INS42 INS8 INS83 INS39 INS59 INS27 INS8 INS38 INS42 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS8 INS83 INS5 MOV27 INS8 UPD42 MOV42 MOV42 INS9 INS60 INS21 UPD42 UPD42 INS9 INS32 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS33 INS21 INS41 INS42 INS32 INS41 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS9 INS21 MOV43 INS85 INS24 MOV43 INS59 INS32 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS9 INS42 INS42 INS32 INS32 MOV58 MOV27 MOV37 MOV8 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS32 INS45 MOV32 MOV8 INS42 INS42 MOV25 MOV60 INS21 INS25 INS7 MOV42 INS8 INS42 INS32 MOV18 MOV2 UPD42 INS9 INS42 MOV2 INS9 UPD42 INS42 DEL32 DEL38 DEL25 DEL42 DEL42 DEL32 DEL41 DEL85 DEL42 DEL42 DEL32 DEL7 DEL21 DEL18 DEL24 DEL8 DEL25 DEL8