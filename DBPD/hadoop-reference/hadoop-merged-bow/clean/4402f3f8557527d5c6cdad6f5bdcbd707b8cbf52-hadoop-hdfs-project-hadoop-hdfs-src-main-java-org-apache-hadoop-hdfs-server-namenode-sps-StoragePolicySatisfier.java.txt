HDFS-13097: [SPS]: Fix the branch review comments(Part1). Contributed by Surendra Singh.

-import org.apache.hadoop.hdfs.DFSUtil;
+import com.google.common.base.Preconditions;
-    this.spsWorkMultiplier = DFSUtil.getSPSWorkMultiplier(getConf());
+    this.spsWorkMultiplier = getSPSWorkMultiplier(getConf());
-    isRunning = true;
-    this.spsMode = serviceMode;
+    isRunning = true;
+    this.spsMode = serviceMode;
-  public synchronized void disable(boolean forceStop) {
+  public synchronized void stop(boolean forceStop) {
-      disable(true);
+      stop(false);
-    if (storagePolicySatisfierThread == null) {
-      return;
-    }
-    try {
-      storagePolicySatisfierThread.join(3000);
-    } catch (InterruptedException ie) {
+    if (storagePolicySatisfierThread != null) {
+      try {
+        storagePolicySatisfierThread.join(3000);
+      } catch (InterruptedException ie) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Interrupted Exception while waiting to join sps thread,"
+              + " ignoring it", ie);
+        }
+      }
+      } catch (IOException e) {
+        LOG.error("Exception during StoragePolicySatisfier execution - "
+            + "will continue next cycle", e);
-        handleException(t);
-      }
-    }
-  }
-
-  private void handleException(Throwable t) {
-    // double check to avoid entering into synchronized block.
-    if (isRunning) {
-      synchronized (this) {
-        if (isRunning) {
-          if (t instanceof InterruptedException) {
+        synchronized (this) {
+          if (isRunning) {
-            LOG.info("Stopping StoragePolicySatisfier.");
+            if (t instanceof InterruptedException) {
+              LOG.info("Stopping StoragePolicySatisfier.", t);
+            } else {
+              LOG.error("StoragePolicySatisfier thread received "
+                  + "runtime exception.", t);
+            }
-          } else {
-            LOG.error(
-                "StoragePolicySatisfier thread received runtime exception, "
-                    + "ignoring", t);
-    return;
-      if (!DFSUtil.removeOverlapBetweenStorageTypes(expectedStorageTypes,
+      if (!removeOverlapBetweenStorageTypes(expectedStorageTypes,
-    if (!DFSUtil.removeOverlapBetweenStorageTypes(expectedStorageTypes,
+    if (!removeOverlapBetweenStorageTypes(expectedStorageTypes,
-   * Set file inode in queue for which storage movement needed for its blocks.
-   *
-   * @param inodeId
-   *          - file inode/blockcollection id.
-   */
-  public void satisfyStoragePolicy(Long inodeId) {
-    //For file startId and trackId is same
-    storageMovementNeeded.add(new ItemInfo(inodeId, inodeId));
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Added track info for inode {} to block "
-          + "storageMovementNeeded queue", inodeId);
-    }
-  }
-
-  /**
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Added track info for inode {} to block "
+          + "storageMovementNeeded queue", trackInfo.getFileId());
+    }
+
+  /**
+   * Remove the overlap between the expected types and the existing types.
+   *
+   * @param expected
+   *          - Expected storage types list.
+   * @param existing
+   *          - Existing storage types list.
+   * @param ignoreNonMovable
+   *          ignore non-movable storage types by removing them from both
+   *          expected and existing storage type list to prevent non-movable
+   *          storage from being moved.
+   * @returns if the existing types or the expected types is empty after
+   *          removing the overlap.
+   */
+  private static boolean removeOverlapBetweenStorageTypes(
+      List<StorageType> expected,
+      List<StorageType> existing, boolean ignoreNonMovable) {
+    for (Iterator<StorageType> i = existing.iterator(); i.hasNext();) {
+      final StorageType t = i.next();
+      if (expected.remove(t)) {
+        i.remove();
+      }
+    }
+    if (ignoreNonMovable) {
+      removeNonMovable(existing);
+      removeNonMovable(expected);
+    }
+    return expected.isEmpty() || existing.isEmpty();
+  }
+
+  private static void removeNonMovable(List<StorageType> types) {
+    for (Iterator<StorageType> i = types.iterator(); i.hasNext();) {
+      final StorageType t = i.next();
+      if (!t.isMovable()) {
+        i.remove();
+      }
+    }
+  }
+
+  /**
+   * Get DFS_SPS_WORK_MULTIPLIER_PER_ITERATION from
+   * configuration.
+   *
+   * @param conf Configuration
+   * @return Value of DFS_SPS_WORK_MULTIPLIER_PER_ITERATION
+   */
+  private static int getSPSWorkMultiplier(Configuration conf) {
+    int spsWorkMultiplier = conf
+        .getInt(
+            DFSConfigKeys.DFS_SPS_WORK_MULTIPLIER_PER_ITERATION,
+            DFSConfigKeys.DFS_SPS_WORK_MULTIPLIER_PER_ITERATION_DEFAULT);
+    Preconditions.checkArgument(
+        (spsWorkMultiplier > 0),
+        DFSConfigKeys.DFS_SPS_WORK_MULTIPLIER_PER_ITERATION +
+        " = '" + spsWorkMultiplier + "' is invalid. " +
+        "It should be a positive, non-zero integer value.");
+    return spsWorkMultiplier;
+  }

MOV26 MOV31 MOV31 UPD40 INS31 INS31 MOV21 MOV21 UPD42 MOV78 UPD42 MOV44 INS29 INS83 UPD39 UPD42 INS44 INS44 INS83 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 MOV8 MOV43 UPD42 INS65 INS65 INS65 INS65 INS65 INS74 UPD42 INS74 INS42 INS39 INS42 INS24 INS25 INS74 UPD42 INS24 INS65 INS65 INS65 INS43 INS42 INS60 INS41 UPD27 UPD42 MOV42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS43 INS43 INS43 INS43 INS58 INS32 INS8 INS42 INS8 INS27 INS43 INS43 INS58 INS32 INS8 INS66 INS66 INS42 INS66 INS66 INS42 INS39 INS59 INS42 MOV54 MOV42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS74 INS59 INS42 INS42 INS60 INS25 MOV21 MOV21 INS32 INS32 UPD42 MOV42 INS42 INS74 INS59 INS42 INS42 INS60 INS25 INS42 INS32 UPD42 UPD42 INS36 INS27 INS12 INS43 INS43 INS42 INS32 INS83 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS83 INS43 INS59 INS38 INS8 INS42 INS42 INS40 INS40 INS27 INS40 INS45 INS42 INS45 INS45 UPD42 UPD9 INS8 INS44 INS8 INS8 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV21 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS42 INS34 INS25 INS43 INS42 INS21 INS51 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS42 INS32 INS52 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS25 INS32 INS45 INS45 INS42 INS8 INS42 INS42 INS27 INS42 MOV21 INS25 INS21 INS21 INS45 INS45 MOV62 INS8 INS8 INS32 INS32 MOV21 INS21 MOV52 INS42 MOV22 INS42 INS42 INS32 UPD42 INS42 INS45 INS42 INS42 INS27 INS42 INS45 INS45 DEL42 DEL8 DEL41 DEL8 DEL42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL14 DEL31 DEL45 DEL45 DEL27 DEL42 DEL42 DEL52 DEL42 DEL45 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL25 DEL8 DEL51 DEL8 DEL25