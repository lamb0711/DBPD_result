Merging trunk to HDFS-1623 branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1179484 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import org.apache.hadoop.fs.ContentSummary;
+import org.apache.hadoop.fs.MD5MD5CRC32FileChecksum;
+import org.apache.hadoop.io.MD5Hash;
+import org.apache.hadoop.util.StringUtils;
-  private static class ThreadLocalMap extends ThreadLocal<Map<String, Object>> {
-    @Override
-    protected Map<String, Object> initialValue() {
-      return new TreeMap<String, Object>();
-    }
-
-    @Override
-    public Map<String, Object> get() {
-      final Map<String, Object> m = super.get();
-      m.clear();
-      return m;
-    }
-  }
-
-  private static final ThreadLocalMap jsonMap = new ThreadLocalMap();
-  private static final ThreadLocalMap tokenMap = new ThreadLocalMap();
-  private static final ThreadLocalMap datanodeInfoMap = new ThreadLocalMap();
-  private static final ThreadLocalMap extendedBlockMap = new ThreadLocalMap();
-  private static final ThreadLocalMap locatedBlockMap = new ThreadLocalMap();
-
+  private static final Object[] EMPTY_OBJECT_ARRAY = {};
+    return toJsonString(Token.class, toJsonMap(token));
+  }
+
+  private static Map<String, Object> toJsonMap(
+      final Token<? extends TokenIdentifier> token) throws IOException {
-    final Map<String, Object> m = tokenMap.get();
+    final Map<String, Object> m = new TreeMap<String, Object>();
-    return JSON.toString(m);
+    return m;
-      final Map<?, ?> m) throws IOException {
+      final Map<?, ?> json) throws IOException {
+    final Map<?, ?> m = (Map<?, ?>)json.get(Token.class.getSimpleName());
-  public static Token<BlockTokenIdentifier> toBlockToken(
+  private static Token<BlockTokenIdentifier> toBlockToken(
-    final Map<String, Object> m = jsonMap.get();
+    final Map<String, Object> m = new TreeMap<String, Object>();
-    return JSON.toString(m);
+    return toJsonString(RemoteException.class, m);
-  public static RemoteException toRemoteException(final Map<String, Object> m) {
+  public static RemoteException toRemoteException(final Map<?, ?> json) {
+    final Map<?, ?> m = (Map<?, ?>)json.get(RemoteException.class.getSimpleName());
+  private static String toJsonString(final Class<?> clazz, final Object value) {
+    return toJsonString(clazz.getSimpleName(), value);
+  }
+
-  public static String toJsonString(final Object key, final Object value) {
-    final Map<String, Object> m = jsonMap.get();
-    m.put(key instanceof String ? (String) key : key.toString(), value);
+  public static String toJsonString(final String key, final Object value) {
+    final Map<String, Object> m = new TreeMap<String, Object>();
+    m.put(key, value);
-  public static String toString(final FsPermission permission) {
+  private static String toString(final FsPermission permission) {
-  public static FsPermission toFsPermission(final String s) {
+  private static FsPermission toFsPermission(final String s) {
-      final Map<String, Object> m = jsonMap.get();
+      final Map<String, Object> m = new TreeMap<String, Object>();
-      return JSON.toString(m);
+      return toJsonString(HdfsFileStatus.class, m);
-  @SuppressWarnings("unchecked")
-  static Map<String, Object> parse(String jsonString) {
-    return (Map<String, Object>) JSON.parse(jsonString);
-  }
-
-  public static HdfsFileStatus toFileStatus(final Map<String, Object> m) {
-    if (m == null) {
+  public static HdfsFileStatus toFileStatus(final Map<?, ?> json) {
+    if (json == null) {
+    final Map<?, ?> m = (Map<?, ?>)json.get(HdfsFileStatus.class.getSimpleName());
-  /** Convert a LocatedBlock to a Json string. */
-  public static String toJsonString(final ExtendedBlock extendedblock) {
+  /** Convert an ExtendedBlock to a Json map. */
+  private static Map<String, Object> toJsonMap(final ExtendedBlock extendedblock) {
-    final Map<String, Object> m = extendedBlockMap.get();
+    final Map<String, Object> m = new TreeMap<String, Object>();
-    return JSON.toString(m);
+    return m;
-  public static ExtendedBlock toExtendedBlock(final Map<?, ?> m) {
+  private static ExtendedBlock toExtendedBlock(final Map<?, ?> m) {
-  /** Convert a DatanodeInfo to a Json string. */
-  public static String toJsonString(final DatanodeInfo datanodeinfo) {
+  /** Convert a DatanodeInfo to a Json map. */
+  private static Map<String, Object> toJsonMap(final DatanodeInfo datanodeinfo) {
-    final Map<String, Object> m = datanodeInfoMap.get();
+    final Map<String, Object> m = new TreeMap<String, Object>();
-    return JSON.toString(m);
+    return m;
-  public static DatanodeInfo toDatanodeInfo(final Map<?, ?> m) {
+  private static DatanodeInfo toDatanodeInfo(final Map<?, ?> m) {
-  /** Convert a DatanodeInfo[] to a Json string. */
-  public static String toJsonString(final DatanodeInfo[] array
-      ) throws IOException {
+  /** Convert a DatanodeInfo[] to a Json array. */
+  private static Object[] toJsonArray(final DatanodeInfo[] array) {
-      return "[]";
+      return EMPTY_OBJECT_ARRAY;
-      final StringBuilder b = new StringBuilder().append('[').append(
-          toJsonString(array[0]));
-      for(int i = 1; i < array.length; i++) {
-        b.append(", ").append(toJsonString(array[i]));
+      final Object[] a = new Object[array.length];
+      for(int i = 0; i < array.length; i++) {
+        a[i] = toJsonMap(array[i]);
-      return b.append(']').toString();
+      return a;
-  public static DatanodeInfo[] toDatanodeInfoArray(final Object[] objects) {
+  private static DatanodeInfo[] toDatanodeInfoArray(final Object[] objects) {
-        array[i] = (DatanodeInfo)toDatanodeInfo((Map<?, ?>) objects[i]);
+        array[i] = toDatanodeInfo((Map<?, ?>) objects[i]);
-  /** Convert a LocatedBlock to a Json string. */
-  public static String toJsonString(final LocatedBlock locatedblock
+  /** Convert a LocatedBlock to a Json map. */
+  private static Map<String, Object> toJsonMap(final LocatedBlock locatedblock
-    final Map<String, Object> m = locatedBlockMap.get();
-    m.put("blockToken", toJsonString(locatedblock.getBlockToken()));
+    final Map<String, Object> m = new TreeMap<String, Object>();
+    m.put("blockToken", toJsonMap(locatedblock.getBlockToken()));
-    m.put("block", toJsonString(locatedblock.getBlock()));
-
-    m.put("locations", toJsonString(locatedblock.getLocations()));
-    return JSON.toString(m);
+    m.put("block", toJsonMap(locatedblock.getBlock()));
+    m.put("locations", toJsonArray(locatedblock.getLocations()));
+    return m;
-  public static LocatedBlock toLocatedBlock(final Map<?, ?> m) throws IOException {
+  private static LocatedBlock toLocatedBlock(final Map<?, ?> m) throws IOException {
-    final ExtendedBlock b = toExtendedBlock((Map<?, ?>)JSON.parse((String)m.get("block")));
+    final ExtendedBlock b = toExtendedBlock((Map<?, ?>)m.get("block"));
-        (Object[])JSON.parse((String)m.get("locations")));
+        (Object[])m.get("locations"));
-    locatedblock.setBlockToken(toBlockToken((Map<?, ?>)JSON.parse((String)m.get("blockToken"))));
+    locatedblock.setBlockToken(toBlockToken((Map<?, ?>)m.get("blockToken")));
-  /** Convert a LocatedBlock[] to a Json string. */
-  public static String toJsonString(final List<LocatedBlock> array
+  /** Convert a LocatedBlock[] to a Json array. */
+  private static Object[] toJsonArray(final List<LocatedBlock> array
-      return "[]";
+      return EMPTY_OBJECT_ARRAY;
-      final StringBuilder b = new StringBuilder().append('[').append(
-          toJsonString(array.get(0)));
-      for(int i = 1; i < array.size(); i++) {
-        b.append(",\n  ").append(toJsonString(array.get(i)));
+      final Object[] a = new Object[array.size()];
+      for(int i = 0; i < array.size(); i++) {
+        a[i] = toJsonMap(array.get(0));
-      return b.append(']').toString();
+      return a;
-  /** Convert an Object[] to a List of LocatedBlock. 
-   * @throws IOException */
-  public static List<LocatedBlock> toLocatedBlockList(final Object[] objects
+  /** Convert an Object[] to a List of LocatedBlock. */
+  private static List<LocatedBlock> toLocatedBlockList(final Object[] objects
-        list.add((LocatedBlock)toLocatedBlock((Map<?, ?>)objects[i]));
+        list.add(toLocatedBlock((Map<?, ?>)objects[i]));
-    final Map<String, Object> m = jsonMap.get();
+    final Map<String, Object> m = new TreeMap<String, Object>();
-    m.put("locatedBlocks", toJsonString(locatedblocks.getLocatedBlocks()));
-    m.put("lastLocatedBlock", toJsonString(locatedblocks.getLastLocatedBlock()));
+    m.put("locatedBlocks", toJsonArray(locatedblocks.getLocatedBlocks()));
+    m.put("lastLocatedBlock", toJsonMap(locatedblocks.getLastLocatedBlock()));
-    return JSON.toString(m);
+    return toJsonString(LocatedBlocks.class, m);
-  public static LocatedBlocks toLocatedBlocks(final Map<String, Object> m
+  public static LocatedBlocks toLocatedBlocks(final Map<?, ?> json
-    if (m == null) {
+    if (json == null) {
-    
+
+    final Map<?, ?> m = (Map<?, ?>)json.get(LocatedBlocks.class.getSimpleName());
-        (Object[])JSON.parse((String) m.get("locatedBlocks")));
+        (Object[])m.get("locatedBlocks"));
-        (Map<?, ?>)JSON.parse((String)m.get("lastLocatedBlock")));
+        (Map<?, ?>)m.get("lastLocatedBlock"));
+
+  /** Convert a ContentSummary to a Json string. */
+  public static String toJsonString(final ContentSummary contentsummary) {
+    if (contentsummary == null) {
+      return null;
+    }
+
+    final Map<String, Object> m = new TreeMap<String, Object>();
+    m.put("length", contentsummary.getLength());
+    m.put("fileCount", contentsummary.getFileCount());
+    m.put("directoryCount", contentsummary.getDirectoryCount());
+    m.put("quota", contentsummary.getQuota());
+    m.put("spaceConsumed", contentsummary.getSpaceConsumed());
+    m.put("spaceQuota", contentsummary.getSpaceQuota());
+    return toJsonString(ContentSummary.class, m);
+  }
+
+  /** Convert a Json map to a ContentSummary. */
+  public static ContentSummary toContentSummary(final Map<?, ?> json) {
+    if (json == null) {
+      return null;
+    }
+
+    final Map<?, ?> m = (Map<?, ?>)json.get(ContentSummary.class.getSimpleName());
+    final long length = (Long)m.get("length");
+    final long fileCount = (Long)m.get("fileCount");
+    final long directoryCount = (Long)m.get("directoryCount");
+    final long quota = (Long)m.get("quota");
+    final long spaceConsumed = (Long)m.get("spaceConsumed");
+    final long spaceQuota = (Long)m.get("spaceQuota");
+
+    return new ContentSummary(length, fileCount, directoryCount,
+        quota, spaceConsumed, spaceQuota);
+  }
+
+  /** Convert a MD5MD5CRC32FileChecksum to a Json string. */
+  public static String toJsonString(final MD5MD5CRC32FileChecksum checksum) {
+    if (checksum == null) {
+      return null;
+    }
+
+    final Map<String, Object> m = new TreeMap<String, Object>();
+    m.put("algorithm", checksum.getAlgorithmName());
+    m.put("length", checksum.getLength());
+    m.put("bytes", StringUtils.byteToHexString(checksum.getBytes()));
+    return toJsonString(MD5MD5CRC32FileChecksum.class, m);
+  }
+
+  /** Convert a Json map to a MD5MD5CRC32FileChecksum. */
+  public static MD5MD5CRC32FileChecksum toMD5MD5CRC32FileChecksum(
+      final Map<?, ?> json) throws IOException {
+    if (json == null) {
+      return null;
+    }
+
+    final Map<?, ?> m = (Map<?, ?>)json.get(
+        MD5MD5CRC32FileChecksum.class.getSimpleName());
+    final String algorithm = (String)m.get("algorithm");
+    final int length = (int)(long)(Long)m.get("length");
+    final byte[] bytes = StringUtils.hexStringToByte((String)m.get("bytes"));
+
+    final DataInputStream in = new DataInputStream(new ByteArrayInputStream(bytes));
+    final int bytesPerCRC = in.readInt();
+    final long crcPerBlock = in.readLong();
+    final MD5Hash md5 = MD5Hash.read(in);
+    final MD5MD5CRC32FileChecksum checksum = new MD5MD5CRC32FileChecksum(
+        bytesPerCRC, crcPerBlock, md5);
+
+    //check algorithm name
+    final String alg = "MD5-of-" + crcPerBlock + "MD5-of-" + bytesPerCRC + "CRC32";
+    if (!alg.equals(algorithm)) {
+      throw new IOException("Algorithm not matched: algorithm=" + algorithm
+          + ", crcPerBlock=" + crcPerBlock
+          + ", bytesPerCRC=" + bytesPerCRC);
+    }
+    //check length
+    if (length != checksum.getLength()) {
+      throw new IOException("Length not matched: length=" + length
+          + ", checksum.getLength()=" + checksum.getLength());
+    }
+
+    return checksum;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 MOV31 MOV31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS5 INS59 MOV29 INS83 INS83 MOV43 INS42 INS44 INS43 INS8 INS83 INS83 INS42 INS44 MOV43 UPD83 INS83 INS83 MOV43 INS42 INS44 INS44 UPD83 UPD83 UPD83 MOV74 UPD42 UPD83 UPD83 MOV74 UPD42 UPD83 UPD83 INS5 UPD42 UPD83 UPD83 MOV74 UPD42 UPD83 INS29 INS83 INS83 INS5 INS42 MOV44 MOV43 INS8 UPD83 INS29 INS83 INS83 MOV43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 MOV43 INS29 INS83 MOV83 INS43 INS42 MOV44 MOV43 INS8 INS43 INS85 INS42 INS4 INS83 INS74 INS42 UPD42 MOV42 INS41 INS83 MOV74 MOV42 INS25 UPD42 INS60 INS74 INS42 INS60 INS83 INS74 INS42 INS83 INS43 INS42 MOV43 INS74 INS42 INS60 INS43 INS85 INS65 INS43 INS85 INS25 INS74 INS42 INS60 INS65 INS83 INS43 INS42 INS25 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS65 INS42 INS83 INS74 INS42 INS25 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS41 INS65 INS43 INS42 INS60 INS21 INS21 INS65 INS42 INS83 INS74 UPD42 INS25 INS60 INS60 INS60 INS60 MOV60 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS41 INS42 UPD43 MOV43 INS76 INS32 INS27 INS8 INS83 INS74 INS59 INS43 INS76 INS76 INS83 INS74 INS59 INS43 INS76 INS42 INS32 INS43 INS76 INS76 INS83 INS74 INS59 UPD66 INS42 UPD66 INS42 UPD66 INS42 UPD66 INS42 MOV32 INS66 INS42 MOV27 MOV8 INS25 INS43 INS76 INS76 INS83 INS74 INS59 INS66 UPD42 MOV42 INS27 INS8 INS83 MOV74 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS66 INS43 INS76 INS76 INS27 INS8 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS14 INS66 UPD42 MOV42 MOV83 MOV74 INS59 INS32 INS32 INS66 INS43 INS76 INS76 INS27 INS8 INS83 INS74 INS59 INS83 MOV43 INS59 INS83 INS39 INS59 INS83 INS5 INS59 UPD43 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 MOV43 INS59 INS38 INS8 INS27 INS8 INS42 UPD42 INS43 INS42 INS57 INS32 INS42 INS42 INS33 INS41 MOV14 UPD42 INS45 INS32 INS43 INS76 INS76 INS42 INS11 INS14 UPD42 INS57 INS42 INS43 INS76 INS76 INS42 INS11 INS42 INS42 INS32 INS42 INS14 INS42 INS42 UPD42 INS43 INS76 INS76 INS42 INS11 INS14 INS14 INS14 MOV32 MOV32 INS42 UPD42 MOV32 MOV27 INS8 INS8 INS14 UPD42 INS57 INS42 UPD42 INS43 INS76 INS76 INS42 INS11 MOV32 MOV32 INS42 INS33 INS41 UPD42 MOV42 MOV14 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS57 INS42 UPD42 MOV42 INS42 INS33 INS41 INS43 INS76 INS76 UPD42 MOV42 INS11 INS42 INS11 INS42 INS11 INS42 INS11 UPD42 MOV42 INS11 INS42 INS11 INS42 INS11 UPD43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS14 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 UPD45 UPD42 INS57 UPD42 MOV42 INS42 INS33 INS41 MOV43 INS76 INS76 INS42 INS11 INS42 INS11 INS42 INS11 INS39 INS85 INS42 INS32 UPD42 UPD42 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS27 INS32 INS53 INS42 INS32 INS53 UPD42 MOV42 INS43 INS42 INS42 INS33 INS42 INS42 INS42 INS74 INS32 INS74 INS43 INS42 INS74 INS32 INS42 INS42 INS74 INS42 INS74 INS32 INS74 INS74 INS74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS41 INS60 INS24 INS41 INS74 UPD42 UPD42 INS43 INS42 INS74 INS32 UPD42 UPD42 INS33 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS33 INS42 INS74 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 UPD42 INS74 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 INS43 INS33 INS74 MOV32 MOV43 INS32 INS39 INS11 INS42 INS42 INS11 UPD43 MOV43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 INS43 INS76 INS76 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS43 INS76 INS76 INS42 INS42 INS32 INS43 INS43 INS43 INS14 UPD42 INS57 INS43 INS76 INS76 INS42 INS42 INS32 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS5 INS42 INS43 INS43 INS43 MOV74 MOV5 MOV74 INS42 INS83 INS5 INS59 INS58 MOV27 MOV37 INS8 INS42 INS43 INS43 INS43 INS42 INS43 INS76 INS76 INS42 INS42 INS32 MOV5 MOV74 INS43 INS43 INS43 INS42 INS43 INS76 INS76 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 UPD42 MOV42 INS42 INS42 INS45 UPD42 MOV42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 UPD42 MOV42 INS42 INS42 INS45 UPD43 MOV43 MOV43 MOV43 INS42 INS42 INS42 UPD43 MOV43 INS76 INS76 UPD42 UPD42 INS32 INS42 INS42 INS45 INS39 INS11 MOV43 INS32 UPD42 INS43 INS42 INS42 INS43 INS27 INS43 INS27 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS74 INS43 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 UPD42 INS3 INS42 INS42 INS42 INS43 INS85 UPD42 MOV42 INS3 INS39 INS59 INS21 INS42 INS42 INS42 INS42 INS57 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS57 INS42 UPD42 UPD42 INS57 INS42 INS43 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS32 INS43 INS43 INS43 INS43 INS43 INS42 INS43 UPD42 MOV42 INS5 INS40 UPD34 INS7 UPD42 MOV42 INS5 INS32 INS42 INS34 INS7 INS43 INS43 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS2 MOV32 MOV32 INS43 INS85 INS42 INS42 INS2 MOV32 MOV32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS42 UPD42 DEL83 DEL83 DEL42 DEL43 DEL43 DEL43 DEL74 DEL74 DEL55 DEL83 DEL83 DEL83 DEL43 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL43 DEL59 DEL23 DEL83 DEL83 DEL83 DEL43 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL43 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL43 DEL42 DEL14 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL42 DEL48 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL62 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL32 DEL16 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL79 DEL42 DEL42 DEL43 DEL74 DEL11 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL45 DEL43 DEL43 DEL14 DEL42 DEL13 DEL32 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL42 DEL13 DEL32 DEL42 DEL32 DEL42 DEL43 DEL11 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL42 DEL42 DEL43 DEL11 DEL42 DEL42 DEL32 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL45 DEL41 DEL8 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL24 DEL13 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL43 DEL11 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL11 DEL32 DEL42 DEL42 DEL11 DEL32 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL42 DEL13 DEL32 DEL42 DEL32