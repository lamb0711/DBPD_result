HDFS-7721. The HDFS BlockScanner may run fast during the first hour (cmccabe)

+   * The monotonic minute that the volume scanner was started on.
+   */
+  private long startMinute = 0;
+
+  /**
-    newMinute = newMinute % MINUTES_PER_HOUR;
-      LOG.trace("{}: updateScannedBytes is zeroing out slot {}.  " +
-              "curMinute = {}; newMinute = {}", this, m % MINUTES_PER_HOUR,
-          curMinute, newMinute);
-      scannedBytesSum -= scannedBytes[(int)(m % MINUTES_PER_HOUR)];
-      scannedBytes[(int)(m % MINUTES_PER_HOUR)] = 0;
+      int slotIdx = (int)(m % MINUTES_PER_HOUR);
+      LOG.trace("{}: updateScannedBytes is zeroing out slotIdx {}.  " +
+              "curMinute = {}; newMinute = {}", this, slotIdx,
+              curMinute, newMinute);
+      scannedBytesSum -= scannedBytes[slotIdx];
+      scannedBytes[slotIdx] = 0;
-  static boolean calculateShouldScan(long targetBytesPerSec,
-                                     long scannedBytesSum) {
-    long effectiveBytesPerSec =
-        scannedBytesSum / (SECONDS_PER_MINUTE * MINUTES_PER_HOUR);
+  static boolean calculateShouldScan(String storageId, long targetBytesPerSec,
+                   long scannedBytesSum, long startMinute, long curMinute) {
+    long runMinutes = curMinute - startMinute;
+    long effectiveBytesPerSec;
+    if (runMinutes <= 0) {
+      // avoid division by zero
+      effectiveBytesPerSec = scannedBytesSum;
+    } else {
+      if (runMinutes > MINUTES_PER_HOUR) {
+        // we only keep an hour's worth of rate information
+        runMinutes = MINUTES_PER_HOUR;
+      }
+      effectiveBytesPerSec = scannedBytesSum /
+          (SECONDS_PER_MINUTE * runMinutes);
+    }
+
-    LOG.trace("calculateShouldScan: effectiveBytesPerSec = {}, and " +
-        "targetBytesPerSec = {}.  shouldScan = {}",
-        effectiveBytesPerSec, targetBytesPerSec, shouldScan);
+    LOG.trace("{}: calculateShouldScan: effectiveBytesPerSec = {}, and " +
+        "targetBytesPerSec = {}.  startMinute = {}, curMinute = {}, " +
+        "shouldScan = {}",
+        storageId, effectiveBytesPerSec, targetBytesPerSec,
+        startMinute, curMinute, shouldScan);
-      if (!calculateShouldScan(conf.targetBytesPerSec, scannedBytesSum)) {
+      if (!calculateShouldScan(volume.getStorageID(), conf.targetBytesPerSec,
+          scannedBytesSum, startMinute, curMinute)) {
+    // Record the minute on which the scanner started.
+    this.startMinute =
+        TimeUnit.MINUTES.convert(Time.monotonicNow(), TimeUnit.MILLISECONDS);
+    this.curMinute = startMinute;

INS23 INS29 INS83 INS39 INS59 INS44 INS44 INS44 INS65 INS42 INS34 INS43 INS42 INS39 INS42 INS39 INS42 INS60 INS60 INS25 INS21 INS21 INS66 INS42 MOV39 INS59 INS39 INS59 INS27 INS8 INS8 INS7 INS7 INS60 INS42 INS27 MOV42 INS42 INS34 INS21 INS25 INS21 INS42 INS42 INS42 INS22 INS32 INS22 INS42 INS39 INS59 INS42 INS42 INS7 INS27 INS8 INS7 UPD45 UPD45 INS45 INS52 INS42 INS40 INS42 INS32 INS40 INS52 INS42 INS42 MOV11 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS27 INS42 INS42 UPD45 INS42 INS42 INS7 MOV42 MOV36 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 DEL42 DEL42 DEL42 DEL27 DEL7 DEL21 DEL42 DEL42 DEL27 DEL39 DEL42 DEL42 DEL27 DEL36 DEL11 DEL27 DEL59 DEL60