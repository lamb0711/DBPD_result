HDFS-12258. ec -listPolicies should list all policies in system, no matter it's enabled or disabled. Contributed by Wei Zhou.

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdfs.protocol.ErasureCodingPolicyState;
+import java.util.ArrayList;
-import java.util.stream.Stream;
-   * All user defined policies sorted by name for fast querying.
+   * All policies sorted by name for fast querying, include built-in policy,
+   * user defined policy, removed policy.
-  private Map<String, ErasureCodingPolicy> userPoliciesByName;
+  private Map<String, ErasureCodingPolicy> policiesByName;
-   * All user defined policies sorted by ID for fast querying.
+   * All policies sorted by ID for fast querying, including built-in policy,
+   * user defined policy, removed policy.
-  private Map<Byte, ErasureCodingPolicy> userPoliciesByID;
+  private Map<Byte, ErasureCodingPolicy> policiesByID;
-   * All removed policies sorted by name.
+   * For better performance when query all Policies.
-  private Map<String, ErasureCodingPolicy> removedPoliciesByName;
+  private ErasureCodingPolicy[] allPolicies;
-   * All enabled policies maintained in NN memory for fast querying,
-   * identified and sorted by its name.
+   * All enabled policies sorted by name for fast querying, including built-in
+   * policy, user defined policy.
+  /**
+   * For better performance when query all enabled Policies.
+   */
+  private ErasureCodingPolicy[] enabledPolicies;
+
-    this.userPoliciesByID = new TreeMap<>();
-    this.userPoliciesByName = new TreeMap<>();
-    this.removedPoliciesByName = new TreeMap<>();
+    this.policiesByName = new TreeMap<>();
+    this.policiesByID = new TreeMap<>();
+
+    /**
+     * TODO: load user defined EC policy from fsImage HDFS-7859
+     * load persistent policies from image and editlog, which is done only once
+     * during NameNode startup. This can be done here or in a separate method.
+     */
+
+    /*
+     * Add all System built-in policies into policy map
+     */
+    for (ErasureCodingPolicy policy :
+        SystemErasureCodingPolicies.getPolicies()) {
+      policiesByName.put(policy.getName(), policy);
+      policiesByID.put(policy.getId(), policy);
+    }
+
-      ErasureCodingPolicy ecPolicy =
-          SystemErasureCodingPolicies.getByName(policyName);
+      ErasureCodingPolicy ecPolicy = policiesByName.get(policyName);
-        ecPolicy = userPoliciesByName.get(policyName);
-        if (ecPolicy == null) {
-          String allPolicies = SystemErasureCodingPolicies.getPolicies()
-              .stream().map(ErasureCodingPolicy::getName)
-              .collect(Collectors.joining(", ")) + ", " +
-              userPoliciesByName.values().stream()
-              .map(ErasureCodingPolicy::getName)
-              .collect(Collectors.joining(", "));
-          String msg = String.format("EC policy '%s' specified at %s is not a "
-              + "valid policy. Please choose from list of available "
-              + "policies: [%s]",
-              policyName,
-              DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,
-              allPolicies);
-          throw new IllegalArgumentException(msg);
-        }
+        String names = policiesByName.values()
+            .stream().map(ErasureCodingPolicy::getName)
+            .collect(Collectors.joining(", "));
+        String msg = String.format("EC policy '%s' specified at %s is not a "
+                + "valid policy. Please choose from list of available "
+                + "policies: [%s]",
+            policyName,
+            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,
+            names);
+        throw new IllegalArgumentException(msg);
+    enabledPolicies =
+        enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);
+    allPolicies = policiesByName.values().toArray(new ErasureCodingPolicy[0]);
-
-    /**
-     * TODO: HDFS-7859 persist into NameNode
-     * load persistent policies from image and editlog, which is done only once
-     * during NameNode startup. This can be done here or in a separate method.
-     */
-    ErasureCodingPolicy[] results =
-        new ErasureCodingPolicy[enabledPoliciesByName.size()];
-    return enabledPoliciesByName.values().toArray(results);
+    return enabledPolicies;
-    return Stream.concat(SystemErasureCodingPolicies.getPolicies().stream(),
-        userPoliciesByName.values().stream())
-        .toArray(ErasureCodingPolicy[]::new);
+    return allPolicies;
-    ErasureCodingPolicy policy = SystemErasureCodingPolicies.getByID(id);
-    if (policy == null) {
-      return this.userPoliciesByID.get(id);
-    }
-    return policy;
+    return this.policiesByID.get(id);
-    ErasureCodingPolicy policy = SystemErasureCodingPolicies.getByName(name);
-    if (policy == null) {
-      return this.userPoliciesByName.get(name);
-    }
-    return policy;
+    return this.policiesByName.get(name);
+    // Set policy state into DISABLED when adding into Hadoop.
+    policy.setState(ErasureCodingPolicyState.DISABLED);
+
-    this.userPoliciesByName.put(policy.getName(), policy);
-    this.userPoliciesByID.put(policy.getId(), policy);
+    this.policiesByName.put(policy.getName(), policy);
+    this.policiesByID.put(policy.getId(), policy);
+    allPolicies = policiesByName.values().toArray(new ErasureCodingPolicy[0]);
-    byte currentId = this.userPoliciesByID.keySet().stream()
-        .max(Byte::compareTo).orElse(
-            ErasureCodeConstants.USER_DEFINED_POLICY_START_ID);
+    byte currentId = this.policiesByID.keySet().stream()
+        .max(Byte::compareTo)
+        .filter(id -> id >= ErasureCodeConstants.USER_DEFINED_POLICY_START_ID)
+        .orElse(ErasureCodeConstants.USER_DEFINED_POLICY_START_ID);
-    if (SystemErasureCodingPolicies.getByName(name) != null) {
-      throw new IllegalArgumentException("System erasure coding policy " +
-          name + " cannot be removed");
-    }
-    ErasureCodingPolicy policy = userPoliciesByName.get(name);
-    if (policy == null) {
+    ErasureCodingPolicy ecPolicy = policiesByName.get(name);
+    if (ecPolicy == null) {
-    enabledPoliciesByName.remove(name);
-    removedPoliciesByName.put(name, policy);
+
+    if (ecPolicy.isSystemPolicy()) {
+      throw new IllegalArgumentException("System erasure coding policy " +
+          name + " cannot be removed");
+    }
+
+    if (enabledPoliciesByName.containsKey(name)) {
+      enabledPoliciesByName.remove(name);
+      enabledPolicies =
+          enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);
+    }
+    ecPolicy.setState(ErasureCodingPolicyState.REMOVED);
+    LOG.info("Remove erasure coding policy " + name);
+  @VisibleForTesting
-    return removedPoliciesByName.values().stream().collect(Collectors.toList());
+    ArrayList<ErasureCodingPolicy> removedPolicies =
+        new ArrayList<ErasureCodingPolicy>();
+    for (ErasureCodingPolicy ecPolicy : policiesByName.values()) {
+      if (ecPolicy.isRemoved()) {
+        removedPolicies.add(ecPolicy);
+      }
+    }
+    return removedPolicies;
-    ErasureCodingPolicy sysEcPolicy = SystemErasureCodingPolicies
-        .getByName(name);
-    ErasureCodingPolicy userEcPolicy = userPoliciesByName.get(name);
-    LOG.info("Disable the erasure coding policy " + name);
-    if (sysEcPolicy == null &&
-        userEcPolicy == null) {
+    ErasureCodingPolicy ecPolicy = policiesByName.get(name);
+    if (ecPolicy == null) {
-    if(sysEcPolicy != null){
+    if (enabledPoliciesByName.containsKey(name)) {
-      removedPoliciesByName.put(name, sysEcPolicy);
+      enabledPolicies =
+          enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);
-    if(userEcPolicy != null){
-      enabledPoliciesByName.remove(name);
-      removedPoliciesByName.put(name, userEcPolicy);
-    }
+    ecPolicy.setState(ErasureCodingPolicyState.DISABLED);
+    LOG.info("Disable the erasure coding policy " + name);
-    ErasureCodingPolicy sysEcPolicy = SystemErasureCodingPolicies
-        .getByName(name);
-    ErasureCodingPolicy userEcPolicy = userPoliciesByName.get(name);
-    LOG.info("Enable the erasure coding policy " + name);
-    if (sysEcPolicy == null &&
-        userEcPolicy == null) {
+    ErasureCodingPolicy ecPolicy = policiesByName.get(name);
+    if (ecPolicy == null) {
-    if(sysEcPolicy != null){
-      enabledPoliciesByName.put(name, sysEcPolicy);
-      removedPoliciesByName.remove(name);
-    }
-    if(userEcPolicy != null) {
-      enabledPoliciesByName.put(name, userEcPolicy);
-      removedPoliciesByName.remove(name);
-    }
+    enabledPoliciesByName.put(name, ecPolicy);
+    ecPolicy.setState(ErasureCodingPolicyState.ENABLED);
+    enabledPolicies =
+        enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);
+    LOG.info("Enable the erasure coding policy " + name);
-

MOV26 INS26 INS26 INS40 INS40 UPD40 INS23 INS31 INS5 INS29 INS83 INS5 INS59 MOV21 MOV21 MOV29 INS83 MOV5 INS42 INS8 INS8 INS8 MOV25 INS78 MOV21 MOV21 UPD42 UPD42 INS43 INS85 UPD42 INS65 MOV43 MOV85 INS42 INS70 INS21 MOV41 MOV41 MOV41 INS21 INS21 INS25 INS21 INS21 INS42 INS60 INS70 INS41 INS25 MOV21 MOV21 MOV21 INS21 UPD66 INS66 UPD66 INS66 UPD66 MOV42 UPD66 UPD66 INS66 INS44 MOV32 INS8 MOV8 INS7 INS42 INS42 INS32 INS7 MOV27 INS32 INS32 INS8 INS32 INS32 INS74 INS59 INS44 INS32 INS8 INS42 MOV43 INS27 INS32 MOV8 INS27 INS7 INS43 INS42 INS21 INS21 MOV25 INS60 MOV21 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV21 MOV21 INS42 INS42 INS40 INS42 INS42 INS27 INS43 MOV43 INS42 INS14 MOV43 INS42 UPD42 MOV42 MOV42 INS25 UPD42 UPD42 MOV42 MOV33 UPD42 MOV42 UPD42 MOV42 MOV42 MOV21 UPD42 UPD42 INS40 UPD42 UPD42 MOV42 MOV33 UPD42 UPD42 UPD42 INS40 INS42 INS32 UPD42 UPD42 INS42 INS32 INS32 MOV43 INS59 MOV32 INS42 INS3 INS32 INS42 INS3 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS3 INS32 UPD42 INS7 INS45 INS42 INS42 INS74 INS32 INS8 UPD42 UPD42 INS7 UPD42 INS32 UPD42 MOV42 INS3 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 MOV5 INS34 INS42 INS42 MOV5 INS34 INS42 INS42 MOV5 INS34 MOV32 INS42 INS86 INS42 INS32 INS43 MOV43 UPD42 MOV42 UPD42 MOV42 INS21 INS42 INS32 MOV42 UPD42 MOV42 INS5 INS34 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 INS43 INS85 INS59 INS27 INS32 UPD42 MOV42 INS3 INS42 INS32 INS32 UPD42 MOV42 INS3 INS43 INS85 UPD42 MOV32 UPD42 MOV42 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS5 INS34 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS5 INS34 INS42 UPD42 INS43 INS85 INS43 INS85 UPD42 INS42 INS42 UPD42 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL90 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL45 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL25 DEL8 DEL52 DEL42 DEL22 DEL43 DEL74 DEL14 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL89 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL32 DEL33 DEL27 DEL42 DEL32 DEL32 DEL21 DEL32 DEL32 DEL32 DEL32 DEL41 DEL42 DEL32 DEL59 DEL60 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL32 DEL42 DEL42 DEL42 DEL33 DEL27 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25