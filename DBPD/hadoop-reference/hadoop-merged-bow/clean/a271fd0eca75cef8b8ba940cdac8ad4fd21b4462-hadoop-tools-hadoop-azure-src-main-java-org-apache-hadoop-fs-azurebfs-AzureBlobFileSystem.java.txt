HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.
Contributed by Da Zhou.

-import org.threadly.util.ExceptionUtils;
-import org.apache.hadoop.fs.azurebfs.services.AbfsServiceProviderImpl;
-import org.apache.hadoop.fs.azurebfs.contracts.services.TracingService;
-import org.apache.hadoop.fs.azurebfs.contracts.services.ConfigurationService;
-import org.apache.hadoop.fs.azurebfs.contracts.services.AbfsHttpService;
-import org.apache.hadoop.fs.azurebfs.contracts.services.AbfsServiceProvider;
-import org.apache.htrace.core.TraceScope;
-  private AbfsServiceProvider abfsServiceProvider;
-  private TracingService tracingService;
-  private AbfsHttpService abfsHttpService;
-  private ConfigurationService configurationService;
+  private AzureBlobFileSystemStore abfsStore;
-
-    try {
-      this.abfsServiceProvider = AbfsServiceProviderImpl.create(configuration);
-      this.tracingService = abfsServiceProvider.get(TracingService.class);
-      this.abfsHttpService = abfsServiceProvider.get(AbfsHttpService.class);
-      this.configurationService = abfsServiceProvider.get(ConfigurationService.class);
-    } catch (AzureBlobFileSystemException exception) {
-      throw new IOException(exception);
-    }
-
+    this.abfsStore = new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);
-    if (this.configurationService.getCreateRemoteFileSystemDuringInitialization()) {
+    if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {
-      InputStream inputStream = abfsHttpService.openFileForRead(this, makeQualified(path), statistics);
+      InputStream inputStream = abfsStore.openFileForRead(makeQualified(path), statistics);
-      OutputStream outputStream = abfsHttpService.createFile(this, makeQualified(f), overwrite);
+      OutputStream outputStream = abfsStore.createFile(makeQualified(f), overwrite);
-      OutputStream outputStream = abfsHttpService.openFileForWrite(this, makeQualified(f), false);
+      OutputStream outputStream = abfsStore.openFileForWrite(makeQualified(f), false);
-      abfsHttpService.rename(this, makeQualified(src), makeQualified(adjustedDst));
+      abfsStore.rename(makeQualified(src), makeQualified(adjustedDst));
-      abfsHttpService.delete(this, makeQualified(f), recursive);
+      abfsStore.delete(makeQualified(f), recursive);
-      FileStatus[] result = abfsHttpService.listStatus(this, makeQualified(f));
+      FileStatus[] result = abfsStore.listStatus(makeQualified(f));
-      abfsHttpService.createDirectory(this, makeQualified(f));
+      abfsStore.createDirectory(makeQualified(f));
-
-    try {
-      abfsHttpService.closeFileSystem(this);
-    } catch (AzureBlobFileSystemException ex) {
-      checkException(null, ex);
-      this.isClosed = true;
-    }
+    this.isClosed = true;
-      return abfsHttpService.getFileStatus(this, makeQualified(f));
+      return abfsStore.getFileStatus(makeQualified(f));
-    final String blobLocationHost = this.configurationService.getAzureBlockLocationHost();
+    final String blobLocationHost = this.abfsStore.getAbfsConfiguration().getAzureBlockLocationHost();
-      abfsHttpService.createFilesystem(this);
+      this.abfsStore.createFilesystem();
-
-
-    final TraceScope traceScope = tracingService.traceBegin(scopeDescription);
-      tracingService.traceException(traceScope, azureBlobFileSystemException);
-        exception = (Exception) ExceptionUtils.getRootCause(exception);
+        exception = (Exception) getRootCause(exception);
-
-      tracingService.traceException(traceScope, fileSystemOperationUnhandledException);
-    } finally {
-      tracingService.traceEnd(traceScope);
+  /**
+   * Gets the root cause of a provided {@link Throwable}.  If there is no cause for the
+   * {@link Throwable} provided into this function, the original {@link Throwable} is returned.
+   *
+   * @param throwable starting {@link Throwable}
+   * @return root cause {@link Throwable}
+   */
+  private Throwable getRootCause(Throwable throwable) {
+    if (throwable == null) {
+      throw new IllegalArgumentException("throwable can not be null");
+    }
+
+    Throwable result = throwable;
+    while (result.getCause() != null) {
+      result = result.getCause();
+    }
+
+    return result;
+  }
+
+
+  @VisibleForTesting
+  AzureBlobFileSystemStore getAbfsStore() {
+    return this.abfsStore;
+  }

INS31 INS31 INS31 UPD43 INS8 MOV78 INS83 MOV43 INS42 MOV44 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS78 INS43 INS42 INS8 UPD42 UPD42 INS21 MOV21 INS54 MOV21 MOV21 MOV54 INS65 INS65 INS65 UPD42 MOV42 INS43 INS42 INS25 INS60 INS61 INS41 INS42 UPD42 MOV42 INS41 INS7 INS8 MOV8 MOV12 MOV8 INS8 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS65 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS22 MOV22 INS14 INS32 INS21 MOV41 INS60 MOV41 INS21 MOV41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS53 INS42 INS42 UPD42 MOV42 INS32 INS33 INS21 INS52 INS42 UPD42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS32 MOV5 INS59 MOV32 INS32 INS32 INS14 INS42 INS42 INS7 UPD42 MOV42 INS52 INS42 UPD42 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 UPD42 UPD42 INS42 INS42 MOV32 MOV22 INS42 INS22 INS43 INS45 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL43 DEL59 DEL23 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL57 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL52 DEL52 DEL42 DEL21 DEL8 DEL52 DEL42 DEL59 DEL60 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL83 DEL42 DEL42 DEL42 DEL52 DEL32 DEL41 DEL8 DEL54 DEL8 DEL31 DEL42 DEL52 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8