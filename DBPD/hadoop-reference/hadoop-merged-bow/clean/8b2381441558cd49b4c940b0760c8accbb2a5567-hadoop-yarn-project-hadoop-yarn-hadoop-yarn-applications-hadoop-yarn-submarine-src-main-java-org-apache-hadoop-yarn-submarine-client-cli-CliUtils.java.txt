YARN-8960. [Submarine] Can't get submarine service status using the command of "yarn app -status" under security environment. (Zac Zhou via wangda)

Change-Id: I21b1addc9c32817650ea744a8f2e6b5602f2f4d4

+import org.apache.commons.lang3.StringUtils;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.yarn.submarine.common.exception.SubmarineRuntimeException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import java.io.File;
+import static org.apache.hadoop.yarn.submarine.client.cli.CliConstants.KEYTAB;
+import static org.apache.hadoop.yarn.submarine.client.cli.CliConstants.PRINCIPAL;
+
+  private static final Logger LOG =
+      LoggerFactory.getLogger(CliUtils.class);
+
+  public static void doLoginIfSecure(String keytab, String principal) throws
+      IOException {
+    if (!UserGroupInformation.isSecurityEnabled()) {
+      return;
+    }
+
+    if (StringUtils.isEmpty(keytab) || StringUtils.isEmpty(principal)) {
+      if (StringUtils.isNotEmpty(keytab)) {
+        SubmarineRuntimeException e = new SubmarineRuntimeException("The " +
+            "parameter of " + PRINCIPAL + " is missing.");
+        LOG.error(e.getMessage(), e);
+        throw e;
+      }
+
+      if (StringUtils.isNotEmpty(principal)) {
+        SubmarineRuntimeException e = new SubmarineRuntimeException("The " +
+            "parameter of " + KEYTAB + " is missing.");
+        LOG.error(e.getMessage(), e);
+        throw e;
+      }
+
+      UserGroupInformation user = UserGroupInformation.getCurrentUser();
+      if(user == null || user.getAuthenticationMethod() ==
+          UserGroupInformation.AuthenticationMethod.SIMPLE) {
+        SubmarineRuntimeException e = new SubmarineRuntimeException("Failed " +
+            "to authenticate in secure environment. Please run kinit " +
+            "command in advance or use " + "--" + KEYTAB + "/--" + PRINCIPAL +
+            " parameters");
+        LOG.error(e.getMessage(), e);
+        throw e;
+      }
+      LOG.info("Submarine job is submitted by user: " + user.getUserName());
+      return;
+    }
+
+    File keytabFile = new File(keytab);
+    if (!keytabFile.exists()) {
+      SubmarineRuntimeException e =  new SubmarineRuntimeException("No " +
+          "keytab localized at  " + keytab);
+      LOG.error(e.getMessage(), e);
+      throw e;
+    }
+    UserGroupInformation.loginUserFromKeytab(principal, keytab);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS25 INS25 INS60 INS25 INS21 INS42 INS42 INS57 INS42 INS42 INS38 INS8 INS27 INS8 INS43 INS59 INS38 INS8 INS32 INS43 INS32 INS41 INS32 INS32 INS25 INS25 INS60 INS25 INS21 INS41 INS42 INS42 INS14 INS32 INS60 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS8 INS43 INS59 INS27 INS8 INS32 INS43 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS60 INS21 INS53 INS42 INS42 INS42 INS60 INS21 INS53 INS42 INS42 INS32 INS27 INS27 INS60 INS21 INS53 INS42 INS42 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS33 INS32 INS40 INS43 INS59 INS32 INS42 INS45 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS43 INS27 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS27 INS42 INS45 INS42 INS27 INS42 INS45 INS42 INS27 INS42 INS45 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45