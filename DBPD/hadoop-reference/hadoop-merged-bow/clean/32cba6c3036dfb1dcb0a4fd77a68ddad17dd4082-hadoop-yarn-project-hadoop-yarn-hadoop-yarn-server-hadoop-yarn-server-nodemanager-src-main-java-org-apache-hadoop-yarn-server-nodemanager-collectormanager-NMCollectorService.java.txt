YARN-5355: YARN Timeline Service v.2: alpha 2 (varunsaxena)

+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
-import org.apache.hadoop.yarn.server.api.records.AppCollectorsMap;
+import org.apache.hadoop.yarn.server.api.records.AppCollectorData;
-import org.apache.hadoop.yarn.server.nodemanager.NodeManager;
+import org.apache.hadoop.yarn.server.nodemanager.security.authorize.NMPolicyProvider;
-    // TODO Security settings.
+    // Kerberos based authentication to be used for CollectorNodemanager
+    // protocol if security is enabled.
-            collectorServerAddress, serverConf,
-            this.context.getNMTokenSecretManager(),
+            collectorServerAddress, serverConf, null,
+    if (conf.getBoolean(
+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {
+      server.refreshServiceAcl(conf, new NMPolicyProvider());
+    }
+
-
-    List<AppCollectorsMap> newCollectorsList = request.getAppCollectorsList();
+    List<AppCollectorData> newCollectorsList = request.getAppCollectorsList();
-      Map<ApplicationId, String> newCollectorsMap =
-          new HashMap<ApplicationId, String>();
-      for (AppCollectorsMap collector : newCollectorsList) {
+      Map<ApplicationId, AppCollectorData> newCollectorsMap =
+          new HashMap<>();
+      for (AppCollectorData collector : newCollectorsList) {
-        String collectorAddr = collector.getCollectorAddr();
-        newCollectorsMap.put(appId, collectorAddr);
+        newCollectorsMap.put(appId, collector);
+        // TODO: Do we need to do this after we received confirmation from
+        // the RM?
-          nmTimelinePublisher.setTimelineServiceAddress(appId, collectorAddr);
+          nmTimelinePublisher.setTimelineServiceAddress(appId,
+              collector.getCollectorAddr());
-      ((NodeManager.NMContext)context).addRegisteredCollectors(
-          newCollectorsMap);
+      Map<ApplicationId, AppCollectorData> registeringCollectors
+          = context.getRegisteringCollectors();
+      if (registeringCollectors != null) {
+        registeringCollectors.putAll(newCollectorsMap);
+      } else {
+        LOG.warn("collectors are added when the registered collectors are " +
+            "initialized");
+      }

MOV26 INS26 INS40 UPD40 UPD40 INS25 INS32 INS8 UPD74 INS42 INS42 INS40 INS9 INS21 UPD43 INS60 INS25 INS33 INS32 UPD42 UPD74 INS74 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS14 MOV43 UPD43 UPD43 INS43 MOV43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS43 UPD42 UPD74 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS32 INS42 UPD42 INS42 INS42 MOV42 INS42 INS42 INS27 INS45 INS45 MOV32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL40 DEL43 DEL42 DEL11 DEL36 DEL32 DEL21