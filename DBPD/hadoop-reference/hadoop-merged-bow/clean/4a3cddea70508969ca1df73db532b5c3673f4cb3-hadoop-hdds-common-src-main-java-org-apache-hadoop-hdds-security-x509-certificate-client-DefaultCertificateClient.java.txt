HDDS-134. SCM CA: OM sends CSR and uses certificate issued by SCM. Contributed by Ajay Kumar.

+import org.apache.commons.validator.routines.DomainValidator;
-  private final String component;
-  DefaultCertificateClient(SecurityConfig securityConfig, String component,
-      Logger log) {
+  DefaultCertificateClient(SecurityConfig securityConfig, Logger log) {
-    Objects.requireNonNull(component);
-    this.component = component;
-    keyCodec = new KeyCodec(securityConfig, component);
+    keyCodec = new KeyCodec(securityConfig);
-    Path keyPath = securityConfig.getKeyLocation(component);
+    Path keyPath = securityConfig.getKeyLocation();
-        getLogger().error("Error while getting private key for {}",
-            component, e);
+        getLogger().error("Error while getting private key.", e);
-    Path keyPath = securityConfig.getKeyLocation(component);
+    Path keyPath = securityConfig.getKeyLocation();
-        getLogger().error("Error while getting private key for {}",
-            component, e);
+        getLogger().error("Error while getting public key.", e);
-    Path certPath = securityConfig.getCertificateLocation(component);
+    Path certPath = securityConfig.getCertificateLocation();
-          new CertificateCodec(securityConfig, component);
+          new CertificateCodec(securityConfig);
-        getLogger().error("Error reading certificate for {}", component, e);
+        getLogger().error("Error reading certificate.", e);
-  public CertificateSignRequest.Builder getCSRBuilder() {
-    return new CertificateSignRequest.Builder();
+  public CertificateSignRequest.Builder getCSRBuilder()
+      throws CertificateException {
+    CertificateSignRequest.Builder builder =
+        new CertificateSignRequest.Builder()
+        .setConfiguration(securityConfig.getConfiguration());
+    try {
+      DomainValidator validator = DomainValidator.getInstance();
+      // Add all valid ips.
+      OzoneSecurityUtil.getValidInetsForCurrentHost().forEach(
+          ip -> {
+            builder.addIpAddress(ip.getHostAddress());
+            if(validator.isValid(ip.getCanonicalHostName())) {
+              builder.addDnsName(ip.getCanonicalHostName());
+            }
+          });
+    } catch (IOException e) {
+      throw new CertificateException("Error while adding ip to CSR builder",
+          e, CSR_ERROR);
+    }
+    return builder;
-    CertificateCodec certificateCodec = new CertificateCodec(securityConfig,
-        component);
+    CertificateCodec certificateCodec = new CertificateCodec(securityConfig);
-    Path keyPath = securityConfig.getKeyLocation(component);
+    Path keyPath = securityConfig.getKeyLocation();
-      getLogger().error("Error while bootstrapping certificate client for {}",
-          component, e);
-      throw new CertificateException("Error while bootstrapping certificate " +
-          "client for" + component, BOOTSTRAP_ERROR);
+      getLogger().error("Error while bootstrapping certificate client.", e);
+      throw new CertificateException("Error while bootstrapping certificate.",
+          BOOTSTRAP_ERROR);

INS26 INS40 INS31 MOV29 MOV78 INS83 MOV43 INS42 INS43 INS8 UPD42 MOV42 INS60 INS54 MOV41 INS43 INS59 INS8 INS12 INS42 MOV43 INS40 UPD42 MOV42 INS32 INS60 INS21 INS44 INS8 MOV43 MOV14 INS42 INS32 INS43 INS59 INS32 INS43 INS42 INS53 MOV43 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS86 INS42 INS14 MOV43 INS42 INS42 INS42 INS42 INS59 INS8 INS43 INS45 INS42 INS42 UPD45 INS45 INS42 INS21 INS25 INS42 UPD45 UPD45 UPD45 INS32 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 DEL83 DEL83 DEL43 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL8 DEL31 DEL42 DEL42 DEL42 DEL45 DEL45 DEL42 DEL27