HDDS-1138. Ozone Client should avoid talking to SCM directly. Contributed by Xiaoyu Yao and Mukul Kumar Singh.

Closes #585 
+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;
+import javax.ws.rs.HEAD;
+
-  private final ScmBlockLocationProtocol scmBlockClient;
+  private final ScmClient scmClient;
-    this(scmBlockClient, metadataManager, conf, omId, secretManager, null);
+    this(new ScmClient(scmBlockClient, null), metadataManager,
+        conf, omId, secretManager, null);
-  public KeyManagerImpl(ScmBlockLocationProtocol scmBlockClient,
+  public KeyManagerImpl(ScmClient scmClient,
-    this.scmBlockClient = scmBlockClient;
+    this.scmClient = scmClient;
-      keyDeletingService = new KeyDeletingService(scmBlockClient, this,
+      keyDeletingService = new KeyDeletingService(scmClient.getBlockClient(), this,
-      allocatedBlocks = scmBlockClient
+      allocatedBlocks = scmClient.getBlockClient()
-          .setOffset(0);
+          .setOffset(0)
+          .setPipeline(allocatedBlock.getPipeline());
+      // Refresh container pipeline info from SCM
+      // based on OmKeyArgs.refreshPipeline flag
+      // 1. Client send initial read request OmKeyArgs.refreshPipeline = false
+      // and uses the pipeline cached in OM to access datanode
+      // 2. If succeeded, done.
+      // 3. If failed due to pipeline does not exist or invalid pipeline state
+      //    exception, client should retry lookupKey with
+      //    OmKeyArgs.refreshPipeline = true
+      if (args.getRefreshPipeline()) {
+        for (OmKeyLocationInfoGroup key : value.getKeyLocationVersions()) {
+          key.getLocationList().forEach(k -> {
+            // TODO: fix Some tests that may not initialize container client
+            // The production should always have containerClient initialized.
+            if (scmClient.getContainerClient() != null) {
+              try {
+                ContainerWithPipeline cp = scmClient.getContainerClient()
+                    .getContainerWithPipeline(k.getContainerID());
+                if (!cp.getPipeline().equals(k.getPipeline())) {
+                  k.setPipeline(cp.getPipeline());
+                }
+              } catch (IOException e) {
+                LOG.debug("Unable to update pipeline for container");
+              }
+            }
+          });
+        }
+      }

INS26 INS26 INS40 INS40 UPD43 UPD42 UPD42 UPD43 UPD42 INS14 UPD42 INS43 INS42 INS33 UPD42 INS25 INS42 UPD42 INS32 INS8 INS32 INS42 INS42 INS70 INS32 INS32 MOV32 INS42 INS32 INS44 INS32 INS8 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS32 INS32 INS42 INS86 INS42 INS42 INS59 INS8 INS42 INS25 INS27 INS8 INS32 INS33 INS54 INS42 INS42 INS8 INS12 INS60 INS25 INS44 INS8 INS43 INS59 INS38 INS8 INS43 INS42 INS21 INS42 INS42 INS32 INS32 INS21 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42