HDFS-4503. Update computeContentSummary(..), spaceConsumedInTree(..) and diskspaceConsumed(..) in INode for snapshot.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448373 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.INode.Content.CountsMap.Key;
-  DirCounts spaceConsumedInTree(DirCounts counts) {
-    counts.nsCount += 1;
+  Quota.Counts computeQuotaUsage(Quota.Counts counts) {
-        child.spaceConsumedInTree(counts);
+        child.computeQuotaUsage(counts);
+    counts.add(Quota.NAMESPACE, 1);
-  long[] computeContentSummary(long[] summary) {
-    // Walk through the children of this node, using a new summary array
-    // for the (sub)tree rooted at this node
-    assert 4 == summary.length;
-    long[] subtreeSummary = new long[]{0,0,0,0};
-    if (children != null) {
-      for (INode child : children) {
-        child.computeContentSummary(subtreeSummary);
-      }
+  public Content.Counts computeContentSummary(final Content.Counts counts) {
+    for (INode child : getChildrenList(null)) {
+      child.computeContentSummary(counts);
-    if (this instanceof INodeDirectoryWithQuota) {
-      // Warn if the cached and computed diskspace values differ
-      INodeDirectoryWithQuota node = (INodeDirectoryWithQuota)this;
-      long space = node.diskspaceConsumed();
-      assert -1 == node.getDsQuota() || space == subtreeSummary[3];
-      if (-1 != node.getDsQuota() && space != subtreeSummary[3]) {
-        NameNode.LOG.warn("Inconsistent diskspace for directory "
-            +getLocalName()+". Cached: "+space+" Computed: "+subtreeSummary[3]);
-      }
-    }
+    counts.add(Content.DIRECTORY, 1);
+    return counts;
+  }
-    // update the passed summary array with the values for this node's subtree
-    for (int i = 0; i < summary.length; i++) {
-      summary[i] += subtreeSummary[i];
+  @Override
+  public Content.CountsMap computeContentSummary(
+      final Content.CountsMap countsMap) {
+    for (INode child : getChildrenList(null)) {
+      child.computeContentSummary(countsMap);
-
-    summary[2]++;
-    return summary;
+    countsMap.getCounts(Key.CURRENT).add(Content.DIRECTORY, 1);
+    return countsMap;

INS26 INS40 INS31 INS31 UPD43 UPD42 MOV78 INS83 INS43 MOV42 MOV44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS40 UPD43 INS21 INS40 INS83 INS43 UPD42 INS70 INS21 INS41 INS42 INS40 INS83 INS43 INS42 INS70 INS21 MOV41 INS40 INS32 INS40 INS44 INS32 MOV8 INS32 INS42 INS40 MOV44 INS32 INS8 INS32 UPD42 INS42 INS42 INS40 INS34 INS43 INS42 INS42 INS33 INS42 UPD42 MOV42 INS40 INS34 UPD42 MOV42 INS33 MOV21 INS32 INS42 INS40 INS34 INS42 INS42 INS42 INS40 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 DEL42 DEL42 DEL40 DEL34 DEL7 DEL21 DEL39 DEL85 DEL5 DEL40 DEL45 DEL32 DEL45 DEL42 DEL45 DEL42 DEL34 DEL2 DEL27 DEL39 DEL85 DEL5 DEL34 DEL40 DEL27 DEL6 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL34 DEL34 DEL34 DEL4 DEL3 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL70 DEL8 DEL25 DEL52 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL52 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL34 DEL38 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL34 DEL2 DEL27 DEL27 DEL6 DEL34 DEL38 DEL42 DEL32 DEL27 DEL42 DEL42 DEL34 DEL2 DEL27 DEL27 DEL8 DEL25 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL7 DEL21 DEL8 DEL24 DEL42 DEL34 DEL2 DEL37 DEL21 DEL8 DEL31