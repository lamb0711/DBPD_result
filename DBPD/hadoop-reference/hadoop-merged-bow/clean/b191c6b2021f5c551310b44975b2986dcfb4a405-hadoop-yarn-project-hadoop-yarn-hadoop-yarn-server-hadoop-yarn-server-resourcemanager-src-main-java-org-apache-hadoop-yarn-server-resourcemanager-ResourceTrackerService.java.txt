YARN-2928: YARN Timeline Service v.2: alpha 1 (sjlee)

For a list of commits and contributors, see the merge branch history.

+import java.util.List;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppCollectorUpdateEvent;
+    boolean timelineV2Enabled =
+        YarnConfiguration.timelineServiceV2Enabled(getConfig());
+    if (timelineV2Enabled) {
+      // Check & update collectors info from request.
+      // TODO make sure it won't have race condition issue for AM failed over
+      // case that the older registration could possible override the newer
+      // one.
+      updateAppCollectorsMap(request);
+    }
+
+    if (timelineV2Enabled) {
+      // Return collectors' map that NM needs to know
+      setAppCollectorsMapToResponse(rmNode.getRunningApps(),
+          nodeHeartBeatResponse);
+    }
+
+  private void setAppCollectorsMapToResponse(
+      List<ApplicationId> runningApps, NodeHeartbeatResponse response) {
+    Map<ApplicationId, String> liveAppCollectorsMap = new
+        HashMap<ApplicationId, String>();
+    Map<ApplicationId, RMApp> rmApps = rmContext.getRMApps();
+    // Set collectors for all running apps on this node.
+    for (ApplicationId appId : runningApps) {
+      String appCollectorAddr = rmApps.get(appId).getCollectorAddr();
+      if (appCollectorAddr != null) {
+        liveAppCollectorsMap.put(appId, appCollectorAddr);
+      } else {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Collector for applicaton: " + appId +
+              " hasn't registered yet!");
+        }
+      }
+    }
+    response.setAppCollectorsMap(liveAppCollectorsMap);
+  }
+
+  private void updateAppCollectorsMap(NodeHeartbeatRequest request) {
+    Map<ApplicationId, String> registeredCollectorsMap =
+        request.getRegisteredCollectors();
+    if (registeredCollectorsMap != null
+        && !registeredCollectorsMap.isEmpty()) {
+      Map<ApplicationId, RMApp> rmApps = rmContext.getRMApps();
+      for (Map.Entry<ApplicationId, String> entry:
+          registeredCollectorsMap.entrySet()) {
+        ApplicationId appId = entry.getKey();
+        String collectorAddr = entry.getValue();
+        if (collectorAddr != null && !collectorAddr.isEmpty()) {
+          RMApp rmApp = rmApps.get(appId);
+          if (rmApp == null) {
+            LOG.warn("Cannot update collector info because application ID: " +
+                appId + " is not found in RMContext!");
+          } else {
+            String previousCollectorAddr = rmApp.getCollectorAddr();
+            if (previousCollectorAddr == null
+                || !previousCollectorAddr.equals(collectorAddr)) {
+              // sending collector update event.
+              RMAppCollectorUpdateEvent event =
+                  new RMAppCollectorUpdateEvent(appId, collectorAddr);
+              rmContext.getDispatcher().getEventHandler().handle(event);
+            }
+          }
+        }
+      }
+    }
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS60 INS25 INS25 INS74 INS42 INS43 INS42 INS60 INS60 INS70 INS21 INS43 INS42 INS60 INS25 INS39 INS59 INS42 INS8 INS42 INS8 INS43 INS43 INS42 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS74 INS59 INS27 INS8 INS42 INS32 INS21 INS21 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS27 INS38 INS60 INS70 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS38 INS60 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS25 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS27 INS42 INS42 INS32 INS27 INS38 INS60 INS21 INS45 INS42 INS45 INS42 INS42 INS42 INS33 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42