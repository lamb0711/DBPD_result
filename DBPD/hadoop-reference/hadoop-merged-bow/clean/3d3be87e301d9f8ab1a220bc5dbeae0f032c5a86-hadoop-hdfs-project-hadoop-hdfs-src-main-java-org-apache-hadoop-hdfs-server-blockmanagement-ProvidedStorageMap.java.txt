HDFS-12778. [READ] Report multiple locations for PROVIDED blocks

-import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
+  private int defaultReplication;
+    this.defaultReplication = conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,
+        DFSConfigKeys.DFS_REPLICATION_DEFAULT);
-    private ShadowDatanodeInfoWithStorage pending;
-    private boolean hasProvidedLocations;
-
-      pending = new ShadowDatanodeInfoWithStorage(
-          providedDescriptor, storageId);
-      hasProvidedLocations = false;
+    }
+
+    private DatanodeDescriptor chooseProvidedDatanode(
+        Set<String> excludedUUids) {
+      DatanodeDescriptor dn = providedDescriptor.choose(null, excludedUUids);
+      if (dn == null) {
+        dn = providedDescriptor.choose(null);
+      }
+      return dn;
-      DatanodeInfoWithStorage[] locs =
-        new DatanodeInfoWithStorage[storages.length];
-      String[] sids = new String[storages.length];
-      StorageType[] types = new StorageType[storages.length];
+      List<DatanodeInfoWithStorage> locs = new ArrayList<>();
+      List<String> sids = new ArrayList<>();
+      List<StorageType> types = new ArrayList<>();
+      boolean isProvidedBlock = false;
+      Set<String> excludedUUids = new HashSet<>();
+
-        sids[i] = storages[i].getStorageID();
-        types[i] = storages[i].getStorageType();
-        if (StorageType.PROVIDED.equals(storages[i].getStorageType())) {
-          locs[i] = pending;
-          hasProvidedLocations = true;
+        DatanodeStorageInfo currInfo = storages[i];
+        StorageType storageType = currInfo.getStorageType();
+        sids.add(currInfo.getStorageID());
+        types.add(storageType);
+        if (StorageType.PROVIDED.equals(storageType)) {
+          DatanodeDescriptor dn = chooseProvidedDatanode(excludedUUids);
+          locs.add(
+              new DatanodeInfoWithStorage(
+                  dn, currInfo.getStorageID(), currInfo.getStorageType()));
+          excludedUUids.add(dn.getDatanodeUuid());
+          isProvidedBlock = true;
-          locs[i] = new DatanodeInfoWithStorage(
-              storages[i].getDatanodeDescriptor(), sids[i], types[i]);
+          locs.add(new DatanodeInfoWithStorage(
+              currInfo.getDatanodeDescriptor(),
+              currInfo.getStorageID(), storageType));
+          excludedUUids.add(currInfo.getDatanodeDescriptor().getDatanodeUuid());
-      return new LocatedBlock(eb, locs, sids, types, pos, isCorrupt, null);
+
+      int numLocations = locs.size();
+      if (isProvidedBlock) {
+        // add more replicas until we reach the defaultReplication
+        for (int count = numLocations + 1;
+            count <= defaultReplication && count <= providedDescriptor
+                .activeProvidedDatanodes(); count++) {
+          DatanodeDescriptor dn = chooseProvidedDatanode(excludedUUids);
+          locs.add(new DatanodeInfoWithStorage(
+              dn, storageId, StorageType.PROVIDED));
+          sids.add(storageId);
+          types.add(StorageType.PROVIDED);
+          excludedUUids.add(dn.getDatanodeUuid());
+        }
+      }
+      return new LocatedBlock(eb,
+          locs.toArray(new DatanodeInfoWithStorage[locs.size()]),
+          sids.toArray(new String[sids.size()]),
+          types.toArray(new StorageType[types.size()]),
+          pos, isCorrupt, null);
-      // TODO: to support multiple provided storages, need to pass/maintain map
-      if (hasProvidedLocations) {
-        // set all fields of pending DatanodeInfo
-        List<String> excludedUUids = new ArrayList<String>();
-        for (LocatedBlock b : blocks) {
-          DatanodeInfo[] infos = b.getLocations();
-          StorageType[] types = b.getStorageTypes();
-
-          for (int i = 0; i < types.length; i++) {
-            if (!StorageType.PROVIDED.equals(types[i])) {
-              excludedUUids.add(infos[i].getDatanodeUuid());
-            }
-          }
-        }
-
-        DatanodeDescriptor dn =
-                providedDescriptor.choose(client, excludedUUids);
-        if (dn == null) {
-          dn = providedDescriptor.choose(client);
-        }
-        pending.replaceInternal(dn);
-      }
-
-   * An abstract {@link DatanodeInfoWithStorage} to represent provided storage.
-   */
-  static class ShadowDatanodeInfoWithStorage extends DatanodeInfoWithStorage {
-    private String shadowUuid;
-
-    ShadowDatanodeInfoWithStorage(DatanodeDescriptor d, String storageId) {
-      super(d, storageId, StorageType.PROVIDED);
-    }
-
-    @Override
-    public String getDatanodeUuid() {
-      return shadowUuid;
-    }
-
-    public void setDatanodeUuid(String uuid) {
-      shadowUuid = uuid;
-    }
-
-    void replaceInternal(DatanodeDescriptor dn) {
-      updateRegInfo(dn); // overwrite DatanodeID (except UUID)
-      setDatanodeUuid(dn.getDatanodeUuid());
-      setCapacity(dn.getCapacity());
-      setDfsUsed(dn.getDfsUsed());
-      setRemaining(dn.getRemaining());
-      setBlockPoolUsed(dn.getBlockPoolUsed());
-      setCacheCapacity(dn.getCacheCapacity());
-      setCacheUsed(dn.getCacheUsed());
-      setLastUpdate(dn.getLastUpdate());
-      setLastUpdateMonotonic(dn.getLastUpdateMonotonic());
-      setXceiverCount(dn.getXceiverCount());
-      setNetworkLocation(dn.getNetworkLocation());
-      adminState = dn.getAdminState();
-      setUpgradeDomain(dn.getUpgradeDomain());
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-      return super.equals(obj);
-    }
-
-    @Override
-    public int hashCode() {
-      return super.hashCode();
-    }
-  }
-
-  /**
+      LOG.info("XXXXX adding Datanode " + dn.getDatanodeUuid());
-              dns.get(client.getDatanodeUuid()) : null;
+          dns.get(client.getDatanodeUuid()) : null;
-        List<String> excludedUUids) {
+        Set<String> excludedUUids) {
-              dns.get(client.getDatanodeUuid()) : null;
+          dns.get(client.getDatanodeUuid()) : null;

INS23 INS55 INS83 INS39 INS59 MOV29 MOV42 MOV43 INS31 INS31 INS31 MOV31 MOV31 INS42 INS21 INS42 MOV44 INS8 INS83 INS43 INS42 INS44 MOV8 MOV78 MOV43 MOV42 MOV44 MOV44 MOV44 MOV44 INS8 MOV78 MOV43 INS42 MOV44 INS7 MOV46 UPD42 MOV42 INS74 INS42 INS60 INS25 INS41 MOV60 INS60 MOV60 INS60 MOV60 INS24 MOV60 INS25 INS41 MOV41 MOV21 UPD74 INS22 INS32 INS43 MOV43 INS43 INS59 MOV27 INS8 INS42 INS74 MOV74 INS59 INS74 INS39 INS59 INS74 MOV58 MOV27 MOV38 INS8 INS39 INS42 INS8 INS14 UPD43 MOV43 INS52 INS42 INS42 INS42 INS40 INS40 INS42 UPD42 MOV42 INS42 INS32 MOV21 INS43 MOV43 INS14 INS42 INS14 INS43 INS43 UPD42 INS42 INS9 INS43 MOV43 UPD42 INS14 INS60 MOV60 MOV21 MOV21 INS25 UPD42 INS24 MOV43 INS42 INS32 INS32 INS32 INS42 INS42 INS33 UPD42 INS42 INS27 UPD42 INS42 INS42 INS33 INS42 UPD42 MOV42 INS74 INS74 INS42 INS42 UPD74 UPD42 MOV42 INS74 INS43 INS59 INS43 INS32 INS32 MOV32 INS8 INS8 UPD42 UPD42 INS58 INS27 INS37 INS8 UPD42 MOV42 UPD42 MOV42 MOV3 UPD42 MOV42 UPD42 MOV42 MOV3 UPD42 MOV42 UPD42 MOV42 INS3 INS45 MOV32 INS42 INS32 INS43 INS43 INS43 INS42 INS42 MOV2 MOV42 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS60 MOV21 INS21 INS21 INS21 MOV21 INS39 INS59 INS27 INS27 INS42 INS60 MOV21 MOV21 MOV21 MOV21 INS32 INS32 MOV5 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV43 INS59 INS32 INS32 INS7 INS32 INS42 INS27 INS42 INS42 INS42 INS32 MOV43 INS59 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS14 INS42 INS34 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 UPD42 INS14 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 INS42 INS42 INS42 MOV43 INS42 INS32 INS32 INS42 INS42 INS43 INS32 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS42 INS40 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL9 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL43 DEL85 DEL5 DEL43 DEL85 DEL5 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL32 DEL7 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL32 DEL7 DEL42 DEL42 DEL2 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL14 DEL7 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL40 DEL40 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL48 DEL41 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL31 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL40 DEL42 DEL42 DEL42 DEL2 DEL32 DEL38 DEL8 DEL25 DEL8 DEL24 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL55 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL46 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL48 DEL41 DEL8 DEL31 DEL55 DEL42 DEL43