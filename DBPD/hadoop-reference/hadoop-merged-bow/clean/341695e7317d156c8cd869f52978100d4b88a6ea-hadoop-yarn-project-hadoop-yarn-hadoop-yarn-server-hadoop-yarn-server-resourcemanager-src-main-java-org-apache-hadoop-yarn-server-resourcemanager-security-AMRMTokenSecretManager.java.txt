Merge trunk into branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1612742 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
-import java.util.Map;
+import java.security.SecureRandom;
+import java.util.HashSet;
+import java.util.Set;
-
-import javax.crypto.SecretKey;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.yarn.server.security.MasterKeyData;
+
+import com.google.common.annotations.VisibleForTesting;
-  private SecretKey masterKey;
+  private int serialNo = new SecureRandom().nextInt();
+  private MasterKeyData nextMasterKey;
+  private MasterKeyData currentMasterKey;
+
+  private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();
+  private final Lock readLock = readWriteLock.readLock();
+  private final Lock writeLock = readWriteLock.writeLock();
+
+  private final long activationDelay;
-  private final Map<ApplicationAttemptId, byte[]> passwords =
-      new HashMap<ApplicationAttemptId, byte[]>();
+  private final Set<ApplicationAttemptId> appAttemptSet =
+      new HashSet<ApplicationAttemptId>();
-    rollMasterKey();
+    // Adding delay = 1.5 * expiry interval makes sure that all active AMs get
+    // the updated shared-key.
+    this.activationDelay =
+        (long) (conf.getLong(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS,
+            YarnConfiguration.DEFAULT_RM_AM_EXPIRY_INTERVAL_MS) * 1.5);
+    LOG.info("AMRMTokenKeyRollingInterval: " + this.rollingInterval
+        + "ms and AMRMTokenKeyActivationDelay: " + this.activationDelay + " ms");
+    if (rollingInterval <= activationDelay * 2) {
+      throw new IllegalArgumentException(
+          YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
+              + " should be more than 2 X "
+              + YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS);
+    }
-    this.timer.scheduleAtFixedRate(new MasterKeyRoller(), 0, rollingInterval);
+    if (this.currentMasterKey == null) {
+      this.currentMasterKey = createNewMasterKey();
+    }
+    this.timer.scheduleAtFixedRate(new MasterKeyRoller(), rollingInterval,
+      rollingInterval);
-  public synchronized void applicationMasterFinished(
-      ApplicationAttemptId appAttemptId) {
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Application finished, removing password for " + appAttemptId);
+  public void applicationMasterFinished(ApplicationAttemptId appAttemptId) {
+    this.writeLock.lock();
+    try {
+      LOG.info("Application finished, removing password for " + appAttemptId);
+      this.appAttemptSet.remove(appAttemptId);
+    } finally {
+      this.writeLock.unlock();
-    this.passwords.remove(appAttemptId);
-  public synchronized void setMasterKey(SecretKey masterKey) {
-    this.masterKey = masterKey;
-  }
-
-  @Private
-  public synchronized SecretKey getMasterKey() {
-    return this.masterKey;
-  }
-
-  @Private
-  synchronized void rollMasterKey() {
-    LOG.info("Rolling master-key for amrm-tokens");
-    this.masterKey = generateSecret();
-  }
-
-  /**
-   * Create a password for a given {@link AMRMTokenIdentifier}. Used to
-   * send to the AppicationAttempt which can give it back during authentication.
-   */
-  @Override
-  public synchronized byte[] createPassword(
-      AMRMTokenIdentifier identifier) {
-    ApplicationAttemptId applicationAttemptId =
-        identifier.getApplicationAttemptId();
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Creating password for " + applicationAttemptId);
+  void rollMasterKey() {
+    this.writeLock.lock();
+    try {
+      LOG.info("Rolling master-key for amrm-tokens");
+      this.nextMasterKey = createNewMasterKey();
+      this.timer.schedule(new NextKeyActivator(), this.activationDelay);
+    } finally {
+      this.writeLock.unlock();
-    byte[] password = createPassword(identifier.getBytes(), masterKey);
-    this.passwords.put(applicationAttemptId, password);
-    return password;
+  }
+
+  private class NextKeyActivator extends TimerTask {
+    @Override
+    public void run() {
+      activateNextMasterKey();
+    }
+  }
+
+  public void activateNextMasterKey() {
+    this.writeLock.lock();
+    try {
+      LOG.info("Activating next master key with id: "
+          + this.nextMasterKey.getMasterKey().getKeyId());
+      this.currentMasterKey = this.nextMasterKey;
+      this.nextMasterKey = null;
+    } finally {
+      this.writeLock.unlock();
+    }
+  }
+
+  @Private
+  @VisibleForTesting
+  public MasterKeyData createNewMasterKey() {
+    this.writeLock.lock();
+    try {
+      return new MasterKeyData(serialNo++, generateSecret());
+    } finally {
+      this.writeLock.unlock();
+    }
+  }
+
+  public Token<AMRMTokenIdentifier> createAndGetAMRMToken(
+      ApplicationAttemptId appAttemptId) {
+    this.writeLock.lock();
+    try {
+      LOG.info("Create AMRMToken for ApplicationAttempt: " + appAttemptId);
+      AMRMTokenIdentifier identifier =
+          new AMRMTokenIdentifier(appAttemptId, getMasterKey().getMasterKey()
+            .getKeyId());
+      byte[] password = this.createPassword(identifier);
+      appAttemptSet.add(appAttemptId);
+      return new Token<AMRMTokenIdentifier>(identifier.getBytes(), password,
+        identifier.getKind(), new Text());
+    } finally {
+      this.writeLock.unlock();
+    }
+  }
+
+  // If nextMasterKey is not Null, then return nextMasterKey
+  // otherwise return currentMasterKey
+  @VisibleForTesting
+  public MasterKeyData getMasterKey() {
+    this.readLock.lock();
+    try {
+      return nextMasterKey == null ? currentMasterKey : nextMasterKey;
+    } finally {
+      this.readLock.unlock();
+    }
-  public synchronized void
-      addPersistedPassword(Token<AMRMTokenIdentifier> token) throws IOException {
-    AMRMTokenIdentifier identifier = token.decodeIdentifier();
-    if (LOG.isDebugEnabled()) {
+  public void addPersistedPassword(Token<AMRMTokenIdentifier> token)
+      throws IOException {
+    this.writeLock.lock();
+    try {
+      AMRMTokenIdentifier identifier = token.decodeIdentifier();
+      appAttemptSet.add(identifier.getApplicationAttemptId());
+    } finally {
+      this.writeLock.unlock();
-    this.passwords.put(identifier.getApplicationAttemptId(),
-      token.getPassword());
-  public synchronized byte[] retrievePassword(
-      AMRMTokenIdentifier identifier) throws InvalidToken {
-    ApplicationAttemptId applicationAttemptId =
-        identifier.getApplicationAttemptId();
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Trying to retrieve password for " + applicationAttemptId);
+  public byte[] retrievePassword(AMRMTokenIdentifier identifier)
+      throws InvalidToken {
+    this.readLock.lock();
+    try {
+      ApplicationAttemptId applicationAttemptId =
+          identifier.getApplicationAttemptId();
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Trying to retrieve password for " + applicationAttemptId);
+      }
+      if (!appAttemptSet.contains(applicationAttemptId)) {
+        throw new InvalidToken("Password not found for ApplicationAttempt "
+            + applicationAttemptId);
+      }
+      if (identifier.getKeyId() == this.currentMasterKey.getMasterKey()
+        .getKeyId()) {
+        return createPassword(identifier.getBytes(),
+          this.currentMasterKey.getSecretKey());
+      } else if (nextMasterKey != null
+          && identifier.getKeyId() == this.nextMasterKey.getMasterKey()
+            .getKeyId()) {
+        return createPassword(identifier.getBytes(),
+          this.nextMasterKey.getSecretKey());
+      }
+      throw new InvalidToken("Given AMRMToken for application : "
+          + applicationAttemptId.toString()
+          + " seems to have been generated illegally.");
+    } finally {
+      this.readLock.unlock();
-    byte[] password = this.passwords.get(applicationAttemptId);
-    if (password == null) {
-      throw new InvalidToken("Password not found for ApplicationAttempt "
-          + applicationAttemptId);
-    }
-    return password;
+  @Private
+  @VisibleForTesting
+  public MasterKeyData getCurrnetMasterKeyData() {
+    this.readLock.lock();
+    try {
+      return this.currentMasterKey;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  @Private
+  @VisibleForTesting
+  public MasterKeyData getNextMasterKeyData() {
+    this.readLock.lock();
+    try {
+      return this.nextMasterKey;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  @Override
+  @Private
+  protected byte[] createPassword(AMRMTokenIdentifier identifier) {
+    this.readLock.lock();
+    try {
+      ApplicationAttemptId applicationAttemptId =
+          identifier.getApplicationAttemptId();
+      LOG.info("Creating password for " + applicationAttemptId);
+      return createPassword(identifier.getBytes(), getMasterKey()
+        .getSecretKey());
+    } finally {
+      this.readLock.unlock();
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS55 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 UPD43 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 UPD74 MOV21 MOV78 UPD42 INS8 INS83 INS42 INS43 INS31 UPD83 UPD42 INS8 MOV78 INS78 MOV83 INS43 INS42 INS8 UPD83 MOV83 INS74 UPD42 MOV42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS8 MOV78 INS78 INS83 INS43 INS42 INS8 INS78 INS78 INS83 INS43 INS42 INS8 MOV78 INS78 INS83 MOV5 INS42 MOV44 INS8 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD43 MOV43 UPD42 INS21 INS25 INS25 INS21 INS54 INS21 INS54 UPD42 MOV42 INS78 INS83 INS39 INS42 MOV8 INS21 INS54 INS42 INS42 INS21 INS54 INS43 INS43 INS43 INS42 INS21 INS54 INS42 INS42 INS21 INS54 INS21 INS54 INS21 INS54 INS42 INS42 INS21 INS54 INS42 INS42 INS42 INS21 INS54 INS42 INS21 INS54 INS14 INS42 INS43 INS42 INS42 INS42 INS42 UPD42 UPD74 INS7 INS27 INS8 INS27 INS8 INS32 MOV8 INS8 INS32 INS8 INS8 INS42 INS21 INS32 INS8 INS8 INS32 INS8 INS8 INS42 INS42 INS42 INS32 INS8 INS8 INS32 INS8 INS8 INS32 MOV8 INS8 INS32 INS8 INS8 INS32 INS8 INS8 INS32 INS8 INS8 INS32 INS8 INS8 INS43 INS42 UPD43 MOV43 INS22 INS11 INS42 INS42 INS27 INS42 INS27 INS53 INS22 INS33 INS21 INS42 INS22 UPD42 MOV42 INS21 MOV21 INS22 INS42 MOV21 MOV21 INS21 INS21 INS32 INS22 INS42 INS21 MOV21 INS21 INS21 INS22 INS42 INS41 INS21 INS22 INS42 INS21 INS60 MOV60 MOV21 MOV41 INS21 INS22 INS42 INS41 INS21 INS22 UPD42 MOV42 MOV60 INS21 MOV21 INS22 INS42 MOV60 MOV25 MOV25 INS25 INS53 INS21 INS22 INS42 INS41 INS21 INS22 INS42 INS41 INS21 INS22 INS42 MOV60 MOV21 INS41 INS21 INS42 UPD42 INS52 INS42 INS39 INS36 INS45 INS22 INS45 INS22 INS45 INS42 INS34 INS14 INS52 INS42 INS7 INS52 INS42 INS32 INS52 INS42 INS32 INS32 INS42 INS52 INS42 INS32 INS7 INS32 INS52 INS42 INS14 INS32 INS52 INS42 INS32 INS43 INS59 MOV5 INS14 INS32 INS52 INS42 INS16 INS32 INS52 INS42 INS32 INS52 INS42 INS38 INS27 INS8 INS25 INS14 INS32 INS52 INS42 INS22 INS32 INS52 INS42 INS22 INS32 INS52 INS42 INS32 INS32 INS27 INS52 INS42 INS52 INS42 INS43 INS27 INS22 INS32 UPD42 INS22 INS42 INS42 UPD42 INS32 INS22 INS42 INS14 INS22 INS22 INS42 INS42 INS42 INS27 INS22 INS22 INS33 INS22 INS42 INS43 INS37 MOV32 INS22 INS42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS14 INS42 UPD42 UPD42 INS74 MOV32 INS42 INS32 INS14 INS22 INS42 INS27 INS42 INS42 INS22 INS42 INS42 INS42 MOV32 UPD42 INS32 INS32 INS32 INS41 INS27 INS8 INS43 INS27 INS22 INS42 INS52 INS42 INS22 INS42 INS52 INS42 INS22 INS42 UPD42 INS42 INS32 INS32 INS22 INS42 INS32 INS34 INS42 INS40 INS45 INS40 INS52 INS42 INS42 INS52 INS42 UPD42 UPD42 INS42 INS52 INS42 INS43 INS52 INS42 INS52 INS42 INS45 INS32 INS52 INS42 UPD42 INS52 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS45 INS42 INS43 INS42 INS32 INS52 UPD42 INS43 INS43 INS42 INS42 INS43 INS52 INS42 INS42 INS33 INS52 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS27 INS27 MOV41 INS42 INS45 INS32 INS45 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS32 INS32 INS42 INS33 INS32 INS32 INS32 INS42 INS42 INS42 INS22 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS32 INS52 INS42 INS42 INS52 INS42 MOV22 UPD42 MOV42 INS42 INS42 INS22 INS42 UPD42 INS52 INS42 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL34 DEL83 DEL42 DEL42 DEL32 DEL25 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL52 DEL42 DEL22 DEL41 DEL83 DEL83 DEL43 DEL42 DEL31 DEL8 DEL39 DEL85 DEL5 DEL52 DEL42 DEL22 DEL42 DEL42 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL32 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL42 DEL32 DEL42 DEL32 DEL25 DEL83 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8