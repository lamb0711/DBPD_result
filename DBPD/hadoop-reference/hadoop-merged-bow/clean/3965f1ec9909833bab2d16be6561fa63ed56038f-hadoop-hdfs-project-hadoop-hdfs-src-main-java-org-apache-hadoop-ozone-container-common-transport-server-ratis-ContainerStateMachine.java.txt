HDFS-12853. Ozone: Optimize chunk writes for Ratis by avoiding double writes.  Contributed by Mukul Kumar Singh

-import com.google.protobuf.ByteString;
+import org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos;
+import org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.WriteChunkRequestProto;
+import org.apache.ratis.shaded.proto.RaftProtos.LogEntryProto;
+import org.apache.ratis.shaded.com.google.protobuf.ByteString;
+import com.google.protobuf.InvalidProtocolBufferException;
-import java.util.function.Function;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.ArrayBlockingQueue;
+  private final ThreadPoolExecutor writeChunkExecutor;
+  private final ConcurrentHashMap<String, CompletableFuture<Message>>
+                                                                writeChunkMap;
-  ContainerStateMachine(ContainerDispatcher dispatcher) {
+  ContainerStateMachine(ContainerDispatcher dispatcher,
+      int numWriteChunkThreads) {
+    writeChunkMap = new ConcurrentHashMap<>();
+    writeChunkExecutor =
+        new ThreadPoolExecutor(numWriteChunkThreads, numWriteChunkThreads,
+            60, TimeUnit.SECONDS,
+            new ArrayBlockingQueue<>(1024),
+            new ThreadPoolExecutor.CallerRunsPolicy());
+    writeChunkExecutor.prestartAllCoreThreads();
+  public TransactionContext startTransaction(RaftClientRequest request)
+      throws IOException {
+    final ContainerCommandRequestProto proto =
+        getRequestProto(request.getMessage().getContent());
+
+    final SMLogEntryProto log;
+    if (proto.getCmdType() == ContainerProtos.Type.WriteChunk) {
+      final WriteChunkRequestProto write = proto.getWriteChunk();
+      // create the state machine data proto
+      final WriteChunkRequestProto dataWriteChunkProto =
+          WriteChunkRequestProto
+              .newBuilder(write)
+              .setStage(ContainerProtos.Stage.WRITE_DATA)
+              .build();
+      ContainerCommandRequestProto dataContainerCommandProto =
+          ContainerCommandRequestProto
+              .newBuilder(proto)
+              .setWriteChunk(dataWriteChunkProto)
+              .build();
+
+      // create the log entry proto
+      final WriteChunkRequestProto commitWriteChunkProto =
+          WriteChunkRequestProto
+              .newBuilder(write)
+              .setStage(ContainerProtos.Stage.COMMIT_DATA)
+              .build();
+      ContainerCommandRequestProto commitContainerCommandProto =
+          ContainerCommandRequestProto
+              .newBuilder(proto)
+              .setWriteChunk(commitWriteChunkProto)
+              .build();
+
+      log = SMLogEntryProto.newBuilder()
+          .setData(getShadedByteString(commitContainerCommandProto))
+          .setStateMachineData(getShadedByteString(dataContainerCommandProto))
+          .build();
+    } else {
+      log = SMLogEntryProto.newBuilder()
+          .setData(request.getMessage().getContent())
+          .build();
+    }
+    return new TransactionContext(this, request, log);
+  }
+
+  private ByteString getShadedByteString(ContainerCommandRequestProto proto) {
+    return ShadedProtoUtil.asShadedByteString(proto.toByteArray());
+  }
+
+  private ContainerCommandRequestProto getRequestProto(ByteString request)
+      throws InvalidProtocolBufferException {
+    return ContainerCommandRequestProto.parseFrom(
+        ShadedProtoUtil.asByteString(request));
+  }
+
+  private Message runCommand(ContainerCommandRequestProto requestProto) {
+    LOG.trace("dispatch {}", requestProto);
+    ContainerCommandResponseProto response = dispatcher.dispatch(requestProto);
+    LOG.trace("response {}", response);
+    return () -> ShadedProtoUtil.asShadedByteString(response.toByteArray());
+  }
+
+  @Override
+  public CompletableFuture<Message> writeStateMachineData(LogEntryProto entry) {
+    try {
+      final ContainerCommandRequestProto requestProto =
+          getRequestProto(entry.getSmLogEntry().getStateMachineData());
+      final WriteChunkRequestProto write = requestProto.getWriteChunk();
+      Message raftClientReply = runCommand(requestProto);
+      CompletableFuture<Message> future =
+          CompletableFuture.completedFuture(raftClientReply);
+      writeChunkMap.put(write.getChunkData().getChunkName(),future);
+      return future;
+    } catch (IOException e) {
+      return completeExceptionally(e);
+    }
+  }
+
-    return dispatch(ShadedProtoUtil.asByteString(
-        request.getMessage().getContent()),
-        response -> new RaftClientReply(request,
-            () -> ShadedProtoUtil.asShadedByteString(response.toByteArray())));
+    try {
+      final ContainerCommandRequestProto requestProto =
+          getRequestProto(request.getMessage().getContent());
+      RaftClientReply raftClientReply =
+          new RaftClientReply(request, runCommand(requestProto));
+      return CompletableFuture.completedFuture(raftClientReply);
+    } catch (IOException e) {
+      return completeExceptionally(e);
+    }
-    final SMLogEntryProto logEntry = trx.getSMLogEntry();
-    return dispatch(ShadedProtoUtil.asByteString(logEntry.getData()),
-        response ->
-            () -> ShadedProtoUtil.asShadedByteString(response.toByteArray())
-    );
-  }
-
-  private <T> CompletableFuture<T> dispatch(
-      ByteString requestBytes, Function<ContainerCommandResponseProto, T> f) {
-    final ContainerCommandResponseProto response;
-      final ContainerCommandRequestProto request
-          = ContainerCommandRequestProto.parseFrom(requestBytes);
-      LOG.trace("dispatch {}", request);
-      response = dispatcher.dispatch(request);
-      LOG.trace("response {}", response);
+      ContainerCommandRequestProto requestProto =
+          getRequestProto(trx.getSMLogEntry().getData());
+
+      if (requestProto.getCmdType() == ContainerProtos.Type.WriteChunk) {
+        WriteChunkRequestProto write = requestProto.getWriteChunk();
+        CompletableFuture<Message> stateMachineFuture =
+            writeChunkMap.remove(write.getChunkData().getChunkName());
+        return stateMachineFuture
+            .thenComposeAsync(v ->
+                CompletableFuture.completedFuture(runCommand(requestProto)));
+      } else {
+        return CompletableFuture.completedFuture(runCommand(requestProto));
+      }
-    return CompletableFuture.completedFuture(f.apply(response));
-  static <T> CompletableFuture<T> completeExceptionally(Exception e) {
+  private static <T> CompletableFuture<T> completeExceptionally(Exception e) {
+
+  @Override
+  public void close() throws IOException {
+    writeChunkExecutor.shutdown();
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 UPD40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS44 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS8 UPD83 INS43 INS42 MOV44 INS43 MOV83 INS43 INS42 INS44 INS8 INS78 INS83 UPD74 MOV74 UPD42 MOV42 INS44 INS8 MOV78 INS83 MOV74 INS42 MOV44 INS8 MOV78 INS83 MOV74 INS42 MOV44 INS8 INS83 INS78 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS43 INS43 INS74 INS42 INS39 INS42 INS21 INS21 INS21 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS42 INS43 INS42 INS41 INS42 UPD42 INS42 INS41 INS42 INS43 INS42 INS21 INS60 MOV21 MOV41 INS42 UPD43 INS43 INS42 INS54 MOV54 INS54 INS42 INS42 INS21 INS42 INS42 INS43 INS43 INS7 INS7 INS32 INS42 INS83 MOV43 INS59 INS83 MOV43 INS59 INS27 INS8 MOV8 INS14 INS42 INS32 INS32 INS42 INS32 MOV43 INS59 MOV86 UPD42 UPD42 MOV42 INS8 MOV12 INS12 INS8 INS12 INS32 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS32 INS40 INS60 INS60 INS60 INS60 INS60 INS21 INS21 INS43 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS60 MOV60 INS60 INS60 INS21 INS41 INS60 INS41 INS44 INS8 MOV60 INS25 INS44 INS8 INS42 INS42 INS74 INS43 INS42 INS42 INS34 INS40 INS14 INS14 INS42 INS32 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS43 INS43 INS59 INS74 INS59 INS32 INS42 INS43 MOV43 INS59 INS32 INS43 INS42 INS41 INS43 INS27 INS8 INS8 INS43 INS42 INS41 INS43 INS42 INS74 INS34 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 MOV32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 UPD42 INS32 INS32 INS40 INS60 INS60 MOV41 INS41 INS42 INS32 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS86 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV42 MOV42 MOV32 INS42 INS42 UPD42 UPD42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL86 DEL14 DEL86 DEL41 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL32 DEL7 DEL21 DEL83 DEL42 DEL32 DEL42 DEL73 DEL43 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL8 DEL31