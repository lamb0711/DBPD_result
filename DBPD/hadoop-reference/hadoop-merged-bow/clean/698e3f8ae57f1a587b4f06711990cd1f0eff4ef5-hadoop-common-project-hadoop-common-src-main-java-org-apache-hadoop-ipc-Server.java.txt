Merging trunk to branch HDFS-2802

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1460410 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.io.DataOutputBuffer;
+import com.google.protobuf.CodedOutputStream;
-  public static final byte CURRENT_VERSION = 8;
+  // 9 : Changes to protocol for HADOOP-8990
+  public static final byte CURRENT_VERSION = 9;
-      if (clientVersion >= 3) {
+      if (clientVersion >= 9) {
+        // Versions >>9  understand the normal response
-        // Versions 3 and greater can interpret this exception
-        // response in the same manner
+        setupResponse(buffer, fakeCall, RpcStatusProto.FATAL,
+            null, VersionMismatch.class.getName(), errMsg);
+        responder.doRespond(fakeCall);
+      } else if (clientVersion >= 3) {
+        Call fakeCall =  new Call(-1, null, this);
+        // Versions 3 to 8 use older response
-    RpcResponseHeaderProto.Builder response =  
+    RpcResponseHeaderProto.Builder headerBuilder =  
-    response.setCallId(call.callId);
-    response.setStatus(status);
-    response.setServerIpcVersionNum(Server.CURRENT_VERSION);
-
+    headerBuilder.setCallId(call.callId);
+    headerBuilder.setStatus(status);
+    headerBuilder.setServerIpcVersionNum(Server.CURRENT_VERSION);
+      RpcResponseHeaderProto header = headerBuilder.build();
+      final int headerLen = header.getSerializedSize();
+      int fullLength  = CodedOutputStream.computeRawVarint32Size(headerLen) +
+          headerLen;
-        response.build().writeDelimitedTo(out);
-        rv.write(out);
+        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {
+          ProtobufRpcEngine.RpcWrapper resWrapper = 
+              (ProtobufRpcEngine.RpcWrapper) rv;
+          fullLength += resWrapper.getLength();
+          out.writeInt(fullLength);
+          header.writeDelimitedTo(out);
+          rv.write(out);
+        } else { // Have to serialize to buffer to get len
+          final DataOutputBuffer buf = new DataOutputBuffer();
+          rv.write(buf);
+          byte[] data = buf.getData();
+          fullLength += buf.getLength();
+          out.writeInt(fullLength);
+          header.writeDelimitedTo(out);
+          out.write(data, 0, buf.getLength());
+        }
-      response.setExceptionClassName(errorClass);
-      response.setErrorMsg(error);
-      response.build().writeDelimitedTo(out);
+      headerBuilder.setExceptionClassName(errorClass);
+      headerBuilder.setErrorMsg(error);
+      RpcResponseHeaderProto header = headerBuilder.build();
+      int headerLen = header.getSerializedSize();
+      final int fullLength  = 
+          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;
+      out.writeInt(fullLength);
+      header.writeDelimitedTo(out);

INS26 INS26 INS40 INS40 UPD34 INS25 INS27 INS8 MOV25 UPD42 UPD42 UPD42 UPD42 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS21 INS42 INS34 INS60 INS21 INS21 INS43 INS59 INS83 INS39 INS59 INS39 INS59 INS8 INS43 INS59 INS39 INS59 INS83 INS39 INS59 INS32 INS32 INS43 INS59 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS25 UPD42 UPD42 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS62 INS8 INS8 UPD42 MOV42 MOV42 INS42 INS42 INS32 INS42 INS43 INS38 INS33 INS52 INS57 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS21 INS21 INS21 MOV21 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS34 INS43 INS40 INS43 INS59 INS7 INS32 INS32 INS83 INS43 INS59 INS32 INS5 INS59 INS7 INS32 INS32 INS32 INS42 INS40 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 INS42 UPD42 MOV42 INS39 INS85 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 INS34 INS32 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 DEL32 DEL32 DEL21 DEL8 DEL32 DEL32 DEL21