YARN-5082. Limit ContainerId increase in fair scheduler if the num of node app reserved reached the limit (sandflee via asuresh)

-  private Priority priority;
+  private Priority appPriority;
-    this.priority = Priority.newInstance(1);
+    this.appPriority = Priority.newInstance(1);
-    if (! allowedLocalityLevel.containsKey(priority)) {
+    if (!allowedLocalityLevel.containsKey(priority)) {
-      Container container) {
+      Container reservedContainer) {
+
+    Container container = reservedContainer;
+    if (container == null) {
+      container =
+          createContainer(node, request.getCapability(), request.getPriority());
+    }
-    RMContainer rmContainer = new RMContainerImpl(container, 
+    RMContainer rmContainer = new RMContainerImpl(container,
-  private boolean reserve(Priority priority, FSSchedulerNode node,
-      Container container, NodeType type, boolean alreadyReserved) {
+  private boolean reserve(ResourceRequest request, FSSchedulerNode node,
+      Container reservedContainer, NodeType type) {
+    Priority priority = request.getPriority();
-      if (!alreadyReserved) {
-        getMetrics().reserveResource(getUser(), container.getResource());
+      if (reservedContainer == null) {
+        reservedContainer =
+            createContainer(node, request.getCapability(),
+              request.getPriority());
+        getMetrics().reserveResource(getUser(),
+            reservedContainer.getResource());
-                super.reserve(node, priority, null, container);
+                super.reserve(node, priority, null, reservedContainer);
-        super.reserve(node, priority, rmContainer, container);
+        super.reserve(node, priority, rmContainer, reservedContainer);
-    Container container = null;
+    Container reservedContainer = null;
-      container = node.getReservedContainer().getContainer();
-    } else {
-      container = createContainer(node, capability, request.getPriority());
+      reservedContainer = node.getReservedContainer().getContainer();
-          allocate(type, node, request.getPriority(), request, container);
+          allocate(type, node, request.getPriority(), request,
+              reservedContainer);
-        setAMResource(container.getResource());
-        getQueue().addAMResourceUsage(container.getResource());
+        setAMResource(capability);
+        getQueue().addAMResourceUsage(capability);
-      return container.getResource();
+      return capability;
-    if (isReservable(container) &&
-        reserve(request.getPriority(), node, container, type, reserved)) {
+    if (isReservable(capability) &&
+        reserve(request, node, reservedContainer, type)) {
-        LOG.debug("Not creating reservation as container " + container.getId()
-            + " is not reservable");
+        LOG.debug("Couldn't creating reservation for " +
+            getName() + ",at priority " +  request.getPriority());
-  private boolean isReservable(Container container) {
+  private boolean isReservable(Resource capacity) {
-      getQueue().getPolicy().getResourceCalculator(), container.getResource());
+        getQueue().getPolicy().getResourceCalculator(), capacity);
-    return priority;
+    return appPriority;

UPD42 UPD42 INS60 INS25 UPD43 UPD42 UPD42 INS60 UPD43 UPD42 INS43 INS59 INS27 INS8 UPD42 INS43 INS59 UPD42 UPD42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 MOV32 UPD42 UPD42 MOV42 UPD42 INS7 INS42 INS27 INS42 UPD42 MOV42 UPD42 INS42 INS32 INS42 INS33 INS21 UPD42 INS42 INS42 INS32 INS32 INS7 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 UPD42 UPD42 UPD45 UPD45 MOV32 INS42 INS42 INS42 INS42 UPD42 DEL39 DEL42 DEL44 DEL42 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32