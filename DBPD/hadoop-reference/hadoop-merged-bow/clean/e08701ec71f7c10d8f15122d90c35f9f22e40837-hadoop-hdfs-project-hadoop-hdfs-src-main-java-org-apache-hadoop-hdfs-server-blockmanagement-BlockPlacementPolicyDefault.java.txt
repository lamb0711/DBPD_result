HDFS-6961. Archival Storage: BlockPlacementPolicy#chooseTarget should check each valid storage type in each choosing round.

-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.TreeSet;
+import java.util.*;
-      final List<StorageType> storageTypes = storagePolicy.chooseStorageTypes(
-          (short)numOfReplicas);
+      final List<StorageType> requiredStorageTypes = storagePolicy
+          .chooseStorageTypes((short)numOfReplicas);
+      final EnumMap<StorageType, Integer> storageTypes =
+          getRequiredStorageTypes(requiredStorageTypes);
-            results, avoidStaleNodes, storageTypes.get(0), false);
+            results, avoidStaleNodes, storageTypes, false);
-        storageTypes.remove(0);
+  private EnumMap<StorageType, Integer> getRequiredStorageTypes(
+      List<StorageType> types) {
+    EnumMap<StorageType, Integer> map = new EnumMap<StorageType,
+        Integer>(StorageType.class);
+    for (StorageType type : types) {
+      if (!map.containsKey(type)) {
+        map.put(type, 1);
+      } else {
+        int num = map.get(type);
+        map.put(type, num + 1);
+      }
+    }
+    return map;
+  }
+
-    final Set<Node> oldExcludedNodes = avoidStaleNodes ? 
-        new HashSet<Node>(excludedNodes) : null;
+    final Set<Node> oldExcludedNodes = new HashSet<Node>(excludedNodes);
-    final List<StorageType> storageTypes = storagePolicy.chooseStorageTypes(
-        (short)totalReplicasExpected, DatanodeStorageInfo.toStorageTypes(results),
-        unavailableStorages, newBlock);
+    final List<StorageType> requiredStorageTypes = storagePolicy
+        .chooseStorageTypes((short) totalReplicasExpected,
+            DatanodeStorageInfo.toStorageTypes(results),
+            unavailableStorages, newBlock);
+    final EnumMap<StorageType, Integer> storageTypes =
+        getRequiredStorageTypes(requiredStorageTypes);
-    StorageType curStorageType = null;
-      if ((numOfReplicas = storageTypes.size()) == 0) {
+      if ((numOfReplicas = requiredStorageTypes.size()) == 0) {
-        curStorageType = storageTypes.remove(0);
-            maxNodesPerRack, results, avoidStaleNodes, curStorageType, true)
+            maxNodesPerRack, results, avoidStaleNodes, storageTypes, true)
-        curStorageType = storageTypes.remove(0);
-            results, avoidStaleNodes, curStorageType);
+            results, avoidStaleNodes, storageTypes);
-        curStorageType = storageTypes.remove(0);
-              results, avoidStaleNodes, curStorageType);
+              results, avoidStaleNodes, storageTypes);
-              results, avoidStaleNodes, curStorageType);
+              results, avoidStaleNodes, storageTypes);
-              results, avoidStaleNodes, curStorageType);
+              results, avoidStaleNodes, storageTypes);
-      curStorageType = storageTypes.remove(0);
-          maxNodesPerRack, results, avoidStaleNodes, curStorageType);
+          maxNodesPerRack, results, avoidStaleNodes, storageTypes);
-      if (storageTypes.size() > 0) {
-        // Retry chooseTarget with fallback storage types
-        unavailableStorages.add(curStorageType);
-        return chooseTarget(numOfReplicas, writer, excludedNodes, blocksize,
+      boolean retry = false;
+      // simply add all the remaining types into unavailableStorages and give
+      // another try. No best effort is guaranteed here.
+      for (StorageType type : storageTypes.keySet()) {
+        if (!unavailableStorages.contains(type)) {
+          unavailableStorages.add(type);
+          retry = true;
+        }
+      }
+      if (retry) {
+        for (DatanodeStorageInfo resultStorage : results) {
+          addToExcludedNodes(resultStorage.getDatanodeDescriptor(),
+              oldExcludedNodes);
+        }
+        numOfReplicas = totalReplicasExpected - results.size();
+        return chooseTarget(numOfReplicas, writer, oldExcludedNodes, blocksize,
-                                             Set<Node> excludedNodes,
-                                             long blocksize,
-                                             int maxNodesPerRack,
-                                             List<DatanodeStorageInfo> results,
-                                             boolean avoidStaleNodes,
-                                             StorageType storageType,
-                                             boolean fallbackToLocalRack)
+      Set<Node> excludedNodes, long blocksize, int maxNodesPerRack,
+      List<DatanodeStorageInfo> results, boolean avoidStaleNodes,
+      EnumMap<StorageType, Integer> storageTypes, boolean fallbackToLocalRack)
-          maxNodesPerRack, results, avoidStaleNodes, storageType);
+          maxNodesPerRack, results, avoidStaleNodes, storageTypes);
-        for(DatanodeStorageInfo localStorage : DFSUtil.shuffle(
-            localDatanode.getStorageInfos())) {
-          if (addIfIsGoodTarget(localStorage, excludedNodes, blocksize,
-              maxNodesPerRack, false, results, avoidStaleNodes, storageType) >= 0) {
-            return localStorage;
+        for (Iterator<Map.Entry<StorageType, Integer>> iter = storageTypes
+            .entrySet().iterator(); iter.hasNext(); ) {
+          Map.Entry<StorageType, Integer> entry = iter.next();
+          for (DatanodeStorageInfo localStorage : DFSUtil.shuffle(
+              localDatanode.getStorageInfos())) {
+            StorageType type = entry.getKey();
+            if (addIfIsGoodTarget(localStorage, excludedNodes, blocksize,
+                maxNodesPerRack, false, results, avoidStaleNodes, type) >= 0) {
+              int num = entry.getValue();
+              if (num == 1) {
+                iter.remove();
+              } else {
+                entry.setValue(num - 1);
+              }
+              return localStorage;
+            }
-        maxNodesPerRack, results, avoidStaleNodes, storageType);
+        maxNodesPerRack, results, avoidStaleNodes, storageTypes);
-                                             Set<Node> excludedNodes,
-                                             long blocksize,
-                                             int maxNodesPerRack,
-                                             List<DatanodeStorageInfo> results,
-                                             boolean avoidStaleNodes,
-                                             StorageType storageType)
+                                                Set<Node> excludedNodes,
+                                                long blocksize,
+                                                int maxNodesPerRack,
+                                                List<DatanodeStorageInfo> results,
+                                                boolean avoidStaleNodes,
+                                                EnumMap<StorageType, Integer> storageTypes)
-          maxNodesPerRack, results, avoidStaleNodes, storageType);
+          maxNodesPerRack, results, avoidStaleNodes, storageTypes);
-          blocksize, maxNodesPerRack, results, avoidStaleNodes, storageType);
+          blocksize, maxNodesPerRack, results, avoidStaleNodes, storageTypes);
-              blocksize, maxNodesPerRack, results, avoidStaleNodes, storageType);
+              blocksize, maxNodesPerRack, results, avoidStaleNodes,
+              storageTypes);
-              maxNodesPerRack, results, avoidStaleNodes, storageType);
+              maxNodesPerRack, results, avoidStaleNodes, storageTypes);
-            maxNodesPerRack, results, avoidStaleNodes, storageType);
+            maxNodesPerRack, results, avoidStaleNodes, storageTypes);
-                                StorageType storageType)
+                                EnumMap<StorageType, Integer> storageTypes)
-          avoidStaleNodes, storageType);
+          avoidStaleNodes, storageTypes);
-                   maxReplicasPerRack, results, avoidStaleNodes, storageType);
+                   maxReplicasPerRack, results, avoidStaleNodes, storageTypes);
-      StorageType storageType)
+      EnumMap<StorageType, Integer> storageTypes)
-        results, avoidStaleNodes, storageType);
+        results, avoidStaleNodes, storageTypes);
-                            StorageType storageType)
-                                throws NotEnoughReplicasException {
+                            EnumMap<StorageType, Integer> storageTypes)
+                            throws NotEnoughReplicasException {
-        int i;
-        for(i = 0; i < storages.length; i++) {
-          final int newExcludedNodes = addIfIsGoodTarget(storages[i],
-              excludedNodes, blocksize, maxNodesPerRack, considerLoad, results,
-              avoidStaleNodes, storageType);
-          if (newExcludedNodes >= 0) {
-            numOfReplicas--;
-            if (firstChosen == null) {
-              firstChosen = storages[i];
+        int i = 0;
+        boolean search = true;
+        for (Iterator<Map.Entry<StorageType, Integer>> iter = storageTypes
+            .entrySet().iterator(); search && iter.hasNext(); ) {
+          Map.Entry<StorageType, Integer> entry = iter.next();
+          for (i = 0; i < storages.length; i++) {
+            StorageType type = entry.getKey();
+            final int newExcludedNodes = addIfIsGoodTarget(storages[i],
+                excludedNodes, blocksize, maxNodesPerRack, considerLoad, results,
+                avoidStaleNodes, type);
+            if (newExcludedNodes >= 0) {
+              numOfReplicas--;
+              if (firstChosen == null) {
+                firstChosen = storages[i];
+              }
+              numOfAvailableNodes -= newExcludedNodes;
+              int num = entry.getValue();
+              if (num == 1) {
+                iter.remove();
+              } else {
+                entry.setValue(num - 1);
+              }
+              search = false;
+              break;
-            numOfAvailableNodes -= newExcludedNodes;
-            break;

UPD40 INS31 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS74 UPD42 INS74 UPD42 INS74 UPD42 INS74 UPD42 INS74 UPD42 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS83 INS74 INS43 INS43 INS43 MOV27 INS43 INS43 INS43 MOV27 INS43 MOV43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS60 INS42 INS42 INS43 INS43 INS43 INS42 INS14 MOV43 INS42 INS25 MOV14 UPD42 INS43 INS43 INS43 UPD42 INS32 INS42 MOV42 INS42 UPD42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 UPD42 INS42 INS42 INS42 INS83 INS74 INS59 INS42 INS42 INS42 INS74 INS57 INS38 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS60 INS70 INS25 INS8 UPD42 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS43 MOV43 INS32 INS21 INS60 INS21 MOV25 MOV25 UPD42 INS39 INS59 INS44 INS32 INS8 INS42 INS8 UPD42 INS24 UPD42 UPD42 UPD42 INS60 INS24 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS32 INS42 INS9 MOV43 INS42 MOV42 UPD42 MOV42 INS25 INS70 INS21 MOV41 INS58 INS32 INS8 UPD42 INS39 INS59 INS58 INS27 INS8 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS27 UPD42 INS42 INS38 INS8 INS44 INS42 INS8 INS7 INS74 INS59 INS42 INS42 INS60 MOV70 INS34 INS42 INS9 INS74 INS59 INS42 INS32 INS60 MOV24 MOV42 INS42 INS42 INS42 INS42 INS34 UPD42 INS32 MOV21 INS21 INS43 INS42 INS21 INS42 INS27 UPD42 INS43 INS74 INS42 INS32 INS74 INS59 UPD42 INS43 INS74 INS42 INS32 INS42 INS42 INS74 INS59 UPD42 UPD42 INS42 INS42 INS42 INS7 INS42 INS32 INS42 INS32 INS42 INS43 INS43 INS43 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS60 INS42 INS43 INS43 INS43 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS60 UPD42 UPD42 UPD42 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 MOV43 INS59 INS8 UPD42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 MOV43 INS59 INS42 INS42 INS42 INS42 INS32 INS60 INS25 MOV41 UPD42 INS42 INS32 INS60 INS25 INS21 INS42 INS42 UPD42 INS39 INS59 INS27 MOV8 INS8 INS42 INS42 UPD42 INS39 INS59 INS27 INS8 INS8 INS7 INS42 INS32 INS42 INS34 INS21 INS21 INS42 INS32 INS42 INS34 INS21 INS21 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS34 INS42 INS34 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL34 DEL32 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL33 DEL16 DEL33 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL32 DEL34 DEL27 DEL8 DEL25 DEL8