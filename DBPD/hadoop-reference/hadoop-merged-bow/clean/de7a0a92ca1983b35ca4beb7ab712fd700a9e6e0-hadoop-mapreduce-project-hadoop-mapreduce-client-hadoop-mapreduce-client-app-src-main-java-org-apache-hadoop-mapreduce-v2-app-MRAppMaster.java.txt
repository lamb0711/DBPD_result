MAPREDUCE-6638. Do not attempt to recover progress from previous job attempts if spill encryption is enabled. (Haibo Chen via kasha)

-import org.apache.hadoop.yarn.util.ConverterUtils;
-    if (appAttemptID.getAttemptId() == 1) {
-      return;  // no need to recover on the first attempt
+    boolean attemptRecovery = shouldAttemptRecovery();
+    boolean recoverySucceeded = true;
+    if (attemptRecovery) {
+      LOG.info("Attempting to recover.");
+      try {
+        parsePreviousJobHistory();
+      } catch (IOException e) {
+        LOG.warn("Unable to parse prior job history, aborting recovery", e);
+        recoverySucceeded = false;
+      }
+    }
+
+    if (!isFirstAttempt() && (!attemptRecovery || !recoverySucceeded)) {
+      amInfos.addAll(readJustAMInfos());
+    }
+  }
+
+  private boolean isFirstAttempt() {
+    return appAttemptID.getAttemptId() == 1;
+  }
+
+  /**
+   * Check if the current job attempt should try to recover from previous
+   * job attempts if any.
+   */
+  private boolean shouldAttemptRecovery() throws IOException {
+    if (isFirstAttempt()) {
+      return false;  // no need to recover on the first attempt
+    if (!recoveryEnabled) {
+      LOG.info("Not attempting to recover. Recovery disabled. To enable " +
+          "recovery, set " + MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE);
+      return false;
+    }
+    if (!recoverySupportedByCommitter) {
+      LOG.info("Not attempting to recover. Recovery is not supported by " +
+          committer.getClass() + ". Use an OutputCommitter that supports" +
+              " recovery.");
+      return false;
+    }
-    // If a shuffle secret was not provided by the job client then this app
-    // attempt will generate one.  However that disables recovery if there
-    // are reducers as the shuffle secret would be app attempt specific.
-    int numReduceTasks = getConfig().getInt(MRJobConfig.NUM_REDUCES, 0);
+    int reducerCount = getConfig().getInt(MRJobConfig.NUM_REDUCES, 0);
+
+    // If a shuffle secret was not provided by the job client, one will be
+    // generated in this job attempt. However, that disables recovery if
+    // there are reducers as the shuffle secret would be job attempt specific.
-
-    if (recoveryEnabled && recoverySupportedByCommitter
-        && (numReduceTasks <= 0 || shuffleKeyValidForRecovery)) {
-      LOG.info("Recovery is enabled. "
-          + "Will try to recover from previous life on best effort basis.");
-      try {
-        parsePreviousJobHistory();
-      } catch (IOException e) {
-        LOG.warn("Unable to parse prior job history, aborting recovery", e);
-        // try to get just the AMInfos
-        amInfos.addAll(readJustAMInfos());
-      }
-    } else {
-      LOG.info("Will not try to recover. recoveryEnabled: "
-            + recoveryEnabled + " recoverySupportedByCommitter: "
-            + recoverySupportedByCommitter + " numReduceTasks: "
-            + numReduceTasks + " shuffleKeyValidForRecovery: "
-            + shuffleKeyValidForRecovery + " ApplicationAttemptID: "
-            + appAttemptID.getAttemptId());
-      // Get the amInfos anyways whether recovery is enabled or not
-      amInfos.addAll(readJustAMInfos());
+    if (reducerCount > 0 && !shuffleKeyValidForRecovery) {
+      LOG.info("Not attempting to recover. The shuffle key is invalid for " +
+          "recovery.");
+      return false;
+
+    // If the intermediate data is encrypted, recovering the job requires the
+    // access to the key. Until the encryption key is persisted, we should
+    // avoid attempts to recover.
+    boolean spillEncrypted = CryptoUtils.isEncryptedSpillEnabled(getConfig());
+    if (reducerCount > 0 && spillEncrypted) {
+      LOG.info("Not attempting to recover. Intermediate spill encryption" +
+          " is enabled.");
+      return false;
+    }
+
+    return true;
+  public boolean recovered() {
+    return recoveredJobStartTime > 0;
+  }
+

INS31 INS31 INS31 INS31 MOV83 MOV39 MOV42 INS43 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 MOV43 INS8 INS83 INS39 INS42 INS8 INS42 INS60 INS60 MOV25 INS25 INS41 INS65 INS25 MOV60 INS25 MOV60 INS25 MOV60 MOV60 INS25 INS60 INS25 INS41 INS41 INS39 INS59 INS39 INS59 INS42 MOV8 MOV27 MOV8 MOV27 INS66 INS66 INS32 INS8 INS38 INS8 INS38 INS8 INS27 INS8 INS39 INS59 INS27 INS8 INS9 INS27 INS42 INS32 INS42 INS9 INS38 INS42 INS41 INS42 INS21 INS41 INS42 INS21 INS41 UPD42 INS27 INS38 INS21 INS41 INS42 INS32 INS27 INS42 INS21 INS41 INS42 INS34 INS42 INS32 INS9 INS32 INS9 INS32 INS9 INS42 INS34 INS42 INS32 INS9 UPD42 MOV42 INS42 INS32 INS42 INS34 INS32 INS9 INS45 INS8 INS42 INS38 INS38 MOV42 MOV42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 UPD42 MOV42 INS42 UPD42 MOV42 INS27 MOV21 INS21 INS42 INS42 UPD45 MOV45 UPD45 MOV45 INS40 UPD45 MOV45 INS32 INS45 UPD45 MOV45 UPD45 MOV45 INS45 INS45 INS45 INS7 INS42 INS42 INS42 INS9 DEL40 DEL26 DEL45 DEL45 DEL27 DEL41 DEL8 DEL42 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31