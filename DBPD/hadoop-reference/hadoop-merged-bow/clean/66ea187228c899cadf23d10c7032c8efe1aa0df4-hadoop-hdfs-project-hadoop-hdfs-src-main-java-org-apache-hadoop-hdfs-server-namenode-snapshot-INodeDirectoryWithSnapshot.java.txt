HDFS-4131. Add capability to namenode to get snapshot diff. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440152 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.Path;
-    private ChildrenDiff() {}
+    ChildrenDiff() {}
+    
+    /**
+     * Print out the content of the Diff. In general, "M"/"+"/"-" are used to 
+     * represent files/directories that were modified, created, and deleted, 
+     * respectively.
+     * 
+     * @param str A StringBuilder used to storing the description of the Diff.
+     * @param parent The directory that the Diff is about. Used to get the full 
+     *               path of the INodes contained in the Diff.             
+     */
+    public void printDiff(StringBuilder str, INodeDirectoryWithSnapshot parent,
+        boolean reverse) {
+      final String mStr = "M\t";
+      final String cStr = reverse ? "-\t" : "+\t";
+      final String dStr = reverse ? "+\t" : "-\t";
+      StringBuilder cBuffer = new StringBuilder();
+      StringBuilder dBuffer = new StringBuilder();
+      StringBuilder mBuffer = new StringBuilder();
+      int c = 0;
+      int d = 0;
+      List<INode> created = getCreatedList();
+      List<INode> deleted = getDeletedList();
+      for (; c < created.size() && d < deleted.size(); ) {
+        INode cnode = created.get(c);
+        INode dnode = deleted.get(d);
+        if (cnode.equals(dnode)) {
+          mBuffer.append(mStr + parent.getFullPathName() + Path.SEPARATOR
+              + cnode.getLocalName() + "\n");
+          c++;
+          d++;
+        } else if (cnode.compareTo(dnode.getLocalNameBytes()) < 0) {
+          cBuffer.append(cStr + parent.getFullPathName() + Path.SEPARATOR
+              + cnode.getLocalName() + "\n");
+          c++;
+        } else {
+          dBuffer.append(dStr + parent.getFullPathName() + Path.SEPARATOR
+              + dnode.getLocalName() + "\n");
+          d++;
+        }
+      }   
+      for (; d < deleted.size(); d++) {
+        dBuffer.append(dStr + parent.getFullPathName() + Path.SEPARATOR
+            + deleted.get(d).getLocalName() + "\n");
+      }    
+      for (; c < created.size(); c++) {
+        cBuffer.append(cStr + parent.getFullPathName() + Path.SEPARATOR
+            + created.get(c).getLocalName() + "\n");
+      }
+      
+      str.append(cBuffer);
+      str.append(dBuffer);
+      str.append(mBuffer);
+    }
+  
+  /**
+   * Compute the difference between Snapshots.
+   * 
+   * @param fromSnapshot Start point of the diff computation. Null indicates
+   *          current tree.
+   * @param toSnapshot End point of the diff computation. Null indicates current
+   *          tree.
+   * @param diff Used to capture the changes happening to the children. Note
+   *          that the diff still represents (later_snapshot - earlier_snapshot)
+   *          although toSnapshot can be before fromSnapshot.
+   * @return Whether changes happened between the startSnapshot and endSnaphsot.
+   */
+  boolean computeDiffBetweenSnapshots(Snapshot fromSnapshot,
+      Snapshot toSnapshot, ChildrenDiff diff) {
+    Snapshot earlierSnapshot = fromSnapshot;
+    Snapshot laterSnapshot = toSnapshot;
+    if (fromSnapshot == null
+        || (toSnapshot != null && Snapshot.ID_COMPARATOR.compare(fromSnapshot,
+            toSnapshot) > 0)) {
+      earlierSnapshot = toSnapshot;
+      laterSnapshot = fromSnapshot;
+    }
+    
+    int earlierDiffIndex = Collections.binarySearch(diffs, earlierSnapshot);
+    if (earlierDiffIndex < 0 && (-earlierDiffIndex - 1) == diffs.size()) {
+      // if the earlierSnapshot is after the latest SnapshotDiff stored in diffs,
+      // no modification happened after the earlierSnapshot
+      return false;
+    }
+    int laterDiffIndex = diffs.size();
+    if (laterSnapshot != null) {
+      laterDiffIndex = Collections.binarySearch(diffs, laterSnapshot);
+      if (laterDiffIndex == -1 || laterDiffIndex == 0) {
+        // if the endSnapshot is the earliest SnapshotDiff stored in
+        // diffs, or before it, no modification happened before the endSnapshot
+        return false;
+      }
+    }
+    
+    earlierDiffIndex = earlierDiffIndex < 0 ? (-earlierDiffIndex - 1)
+        : earlierDiffIndex;
+    laterDiffIndex = laterDiffIndex < 0 ? (-laterDiffIndex - 1)
+        : laterDiffIndex;
+    boolean dirMetadataChanged = false;
+    INodeDirectory dirCopy = null;
+    for (int i = earlierDiffIndex; i < laterDiffIndex; i++) {
+      SnapshotDiff sdiff = diffs.get(i);
+      diff.combinePosterior(sdiff.diff, null);
+      if (dirMetadataChanged == false && sdiff.snapshotINode != null) {
+        if (dirCopy == null) {
+          dirCopy = sdiff.snapshotINode;
+        } else {
+          if (!dirCopy.metadataEquals(sdiff.snapshotINode)) {
+            dirMetadataChanged = true;
+          }
+        }
+      }
+    }
+
+    if (!diff.isEmpty() || dirMetadataChanged) {
+      return true;
+    } else if (dirCopy != null) {
+      for (int i = laterDiffIndex; i < diffs.size(); i++) {
+        if (diffs.get(i).snapshotINode != null
+            && !dirCopy.metadataEquals(diffs.get(i).snapshotINode)) {
+          return true;
+        }
+      }
+      return !dirCopy.metadataEquals(this);
+    }
+    return false;
+  }

INS26 INS40 MOV31 INS31 INS31 INS29 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS8 INS29 UPD83 INS39 UPD42 INS44 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS60 INS25 INS60 INS25 INS21 INS21 INS60 INS60 INS24 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS24 INS24 INS24 INS21 INS21 INS21 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS7 INS7 INS39 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS25 INS9 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS27 INS8 INS27 INS37 INS8 INS27 INS37 INS8 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS36 INS21 INS21 INS42 INS32 INS27 INS27 INS41 INS42 INS32 INS42 INS33 INS21 INS25 INS42 INS16 INS42 INS16 INS42 INS9 INS42 INS42 INS33 INS39 INS59 INS42 INS42 INS42 INS60 INS21 INS25 INS38 INS42 INS41 INS27 INS8 INS42 INS42 INS45 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS34 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS27 INS27 INS60 INS60 INS25 INS42 INS32 INS42 INS21 INS42 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS27 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS34 INS36 INS32 INS9 INS42 INS42 INS7 INS27 INS8 INS27 INS36 INS42 INS27 INS36 INS42 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS32 INS9 INS42 INS33 INS24 INS41 INS42 INS45 INS45 INS42 INS45 INS45 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS27 INS27 INS41 INS42 INS34 INS27 INS42 INS34 INS27 INS42 INS42 INS32 INS42 INS42 INS40 INS33 INS27 INS27 INS25 INS42 INS42 INS58 INS27 INS37 INS8 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS21 INS27 INS8 INS8 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS33 INS32 INS34 INS38 INS34 INS42 INS42 INS42 INS42 INS42 INS38 INS42 INS34 INS9 INS38 INS34 INS38 INS34 INS42 INS42 INS42 INS42 INS9 INS40 INS33 INS27 INS8 INS8 INS39 INS59 INS42 INS32 INS42 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS37 INS37 INS32 INS34 INS21 INS21 INS21 INS21 INS42 INS32 INS40 INS32 INS45 INS42 INS32 INS40 INS32 INS45 INS40 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS33 INS21 INS25 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS52 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS32 INS37 INS32 INS37 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS7 INS38 INS8 INS27 INS38 INS41 INS42 INS32 INS40 INS32 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS21 INS22 INS33 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS32 INS45 INS42 INS32 INS40 INS32 INS45 INS42 INS42 INS40 INS7 INS32 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL8