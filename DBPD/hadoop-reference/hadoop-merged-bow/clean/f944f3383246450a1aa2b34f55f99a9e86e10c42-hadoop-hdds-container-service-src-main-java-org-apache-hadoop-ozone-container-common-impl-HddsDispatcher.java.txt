HDDS-709. Modify Close Container handling sequence on datanodes. Contributed by Shashikant Banerjee.

+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerNotOpenException;
+import org.apache.hadoop.hdds.scm.container.common.helpers.InvalidContainerStateException;
+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.
+    ContainerDataProto.State;
+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.Result;
+  /**
+   * Returns true for exceptions which can be ignored for marking the container
+   * unhealthy.
+   * @param result ContainerCommandResponse error code.
+   * @return true if exception can be ignored, false otherwise.
+   */
+  private boolean canIgnoreException(Result result) {
+    switch (result) {
+    case SUCCESS:
+    case CONTAINER_UNHEALTHY:
+    case CLOSED_CONTAINER_IO:
+    case DELETE_ON_OPEN_CONTAINER:
+    case ERROR_CONTAINER_NOT_EMPTY:
+      return true;
+    default:
+      return false;
+    }
+  }
+
-      if (!HddsUtils.isReadOnly(msg)
-          && responseProto.getResult() != ContainerProtos.Result.SUCCESS) {
-        // If the container is open and the container operation has failed,
-        // it should be first marked unhealthy and the initiate the close
-        // container action. This also implies this is the first transaction
-        // which has failed, so the container is marked unhealthy right here.
+
+      // ApplyTransaction called on closed Container will fail with Closed
+      // container exception. In such cases, ignore the exception here
+      // If the container is already marked unhealthy, no need to change the
+      // state here.
+
+      Result result = responseProto.getResult();
+      if (!HddsUtils.isReadOnly(msg) && !canIgnoreException(result)) {
+        // If the container is open/closing and the container operation
+        // has failed, it should be first marked unhealthy and the initiate the
+        // close container action. This also implies this is the first
+        // transaction which has failed, so the container is marked unhealthy
+        // right here.
-        if (container.getContainerState() == ContainerDataProto.State.OPEN) {
-          container.getContainerData()
-              .setState(ContainerDataProto.State.UNHEALTHY);
-          sendCloseContainerActionIfNeeded(container);
-        }
+
+        // For container to be moved to unhealthy state here, the container can
+        // only be in open or closing state.
+        State containerState = container.getContainerData().getState();
+        Preconditions.checkState(
+            containerState == State.OPEN || containerState == State.CLOSING);
+        container.getContainerData()
+            .setState(ContainerDataProto.State.UNHEALTHY);
+        sendCloseContainerActionIfNeeded(container);
+   * This will be called as a part of creating the log entry during
+   * startTransaction in Ratis on the leader node. In such cases, if the
+   * container is not in open state for writing we should just fail.
+   * Leader will propagate the exception to client.
+   * @param msg  container command proto
+   * @throws StorageContainerException In case container state is open for write
+   *         requests and in invalid state for read requests.
+   */
+  @Override
+  public void validateContainerCommand(
+      ContainerCommandRequestProto msg) throws StorageContainerException {
+    ContainerType containerType = msg.getCreateContainer().getContainerType();
+    Handler handler = getHandler(containerType);
+    if (handler == null) {
+      StorageContainerException ex = new StorageContainerException(
+          "Invalid " + "ContainerType " + containerType,
+          ContainerProtos.Result.CONTAINER_INTERNAL_ERROR);
+      throw ex;
+    }
+    ContainerProtos.Type cmdType = msg.getCmdType();
+    long containerID = msg.getContainerID();
+    Container container;
+    container = getContainer(containerID);
+    if (container != null) {
+      State containerState = container.getContainerState();
+      if (!HddsUtils.isReadOnly(msg) && containerState != State.OPEN) {
+        switch (cmdType) {
+        case CreateContainer:
+          // Create Container is idempotent. There is nothing to validate.
+          break;
+        case CloseContainer:
+          // If the container is unhealthy, closeContainer will be rejected
+          // while execution. Nothing to validate here.
+          break;
+        default:
+          // if the container is not open, no updates can happen. Just throw
+          // an exception
+          throw new ContainerNotOpenException(
+              "Container " + containerID + " in " + containerState + " state");
+        }
+      } else if (HddsUtils.isReadOnly(msg) && containerState == State.INVALID) {
+        throw new InvalidContainerStateException(
+            "Container " + containerID + " in " + containerState + " state");
+      }
+    }
+  }
+
+  /**
-  @VisibleForTesting

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS43 INS42 INS50 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS60 INS21 INS25 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS49 INS49 INS49 INS49 INS49 INS41 INS49 INS41 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS39 INS59 INS43 INS59 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS60 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS53 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS43 INS59 MOV8 INS32 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS25 INS42 INS42 MOV32 INS38 INS60 INS21 INS42 INS42 INS42 INS42 INS14 INS42 INS42 MOV32 INS38 INS27 INS50 INS27 INS8 INS32 INS43 INS59 INS32 INS43 INS27 INS40 INS32 INS42 INS40 INS42 INS49 INS10 INS49 INS10 INS49 INS53 INS32 INS27 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS14 INS32 INS42 INS27 INS27 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 DEL40 DEL27 DEL40 DEL27 DEL25 DEL8 DEL42 DEL78