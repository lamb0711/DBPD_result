YARN-8292: Fix the dominant resource preemption cannot happen when some of the resource vector becomes negative. Contributed by Wangda Tan.

-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.PriorityQueue;
-
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.PriorityQueue;
+
-  private boolean isReservedPreemptionCandidatesSelector;
+  protected boolean isReservedPreemptionCandidatesSelector;
+  private Resource stepFactor;
+
+    stepFactor = Resource.newInstance(0, 0);
+    for (ResourceInformation ri : stepFactor.getResources()) {
+      ri.setValue(1);
+    }
-    for (Iterator<TempQueuePerPartition> i = qAlloc.iterator(); i.hasNext();) {
+    for (Iterator<TempQueuePerPartition> i = qAlloc.iterator(); i.hasNext(); ) {
-        initIdealAssigned =
-            Resources.add(q.getGuaranteed(), q.untouchableExtra);
-      } else {
+        initIdealAssigned = Resources.add(
+            Resources.componentwiseMin(q.getGuaranteed(), q.getUsed()),
+            q.untouchableExtra);
+      } else{
-
+
-      Resource wQassigned = Resource.newInstance(0, 0);
+      // This value will be used in every round to calculate ideal allocation.
+      // So make a copy to avoid it changed during calculation.
+      Resource dupUnassignedForTheRound = Resources.clone(unassigned);
+
+        if (!rc.isAnyMajorResourceAboveZero(unassigned)) {
+          break;
+        }
+
-        Resource wQavail = Resources.multiplyAndNormalizeUp(rc, unassigned,
-            sub.normalizedGuarantee, Resource.newInstance(1, 1));
+
+        // How much resource we offer to the queue (to increase its ideal_alloc
+        Resource wQavail = Resources.multiplyAndNormalizeUp(rc,
+            dupUnassignedForTheRound,
+            sub.normalizedGuarantee, this.stepFactor);
+
+        // Make sure it is not beyond unassigned
+        wQavail = Resources.componentwiseMin(wQavail, unassigned);
+
-        Resources.addTo(wQassigned, wQdone);
+
+        Resources.subtractFrom(unassigned, wQdone);
+
+        // Make sure unassigned is always larger than 0
+        unassigned = Resources.componentwiseMax(unassigned, Resources.none());
-      Resources.subtractFrom(unassigned, wQassigned);

MOV26 MOV26 MOV26 MOV26 MOV26 INS23 UPD83 INS83 INS43 INS59 INS42 INS42 INS21 INS70 INS7 INS44 INS32 INS8 INS42 MOV32 INS43 INS42 INS42 INS42 INS21 INS60 INS42 INS32 MOV43 INS59 INS42 INS42 INS34 UPD42 MOV42 INS32 INS25 INS21 INS21 MOV42 UPD42 MOV42 MOV42 INS38 INS8 MOV43 INS7 INS7 INS32 INS10 INS42 INS32 UPD42 UPD42 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS32 INS52 INS42 INS42 INS42 INS42 INS42 DEL59 DEL60 DEL42 DEL42 DEL34 DEL34 DEL32 DEL42 DEL32 DEL21