HDFS-4432. Support INodeFileUnderConstructionWithSnapshot in FSImage saving/loading. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1439682 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot;
- *       snapshotFileSize: long,
- *       isINodeFileWithLink: byte (if ComputedFileSize is negative),
+ *       snapshotFileSize: long (negative is the file is not a snapshot copy),
+ *       isINodeFileUnderConstructionSnapshot: byte (if snapshotFileSize 
+ *       is positive), 
+ *       {clientName: short + byte[], clientMachine: short + byte[]} (when 
+ *       isINodeFileUnderConstructionSnapshot is true),
+ *       isINodeFileWithSnapshot: byte (if snapshotFileSize is negative),
+        boolean supportSnapshot = LayoutVersion.supports(Feature.SNAPSHOT,
+            imgVersion);
-        if (LayoutVersion.supports(Feature.SNAPSHOT, imgVersion)) {
+        if (supportSnapshot) {
-          if (LayoutVersion.supports(Feature.SNAPSHOT, imgVersion)) {
+          if (supportSnapshot) {
-        loadFilesUnderConstruction(in);
+        loadFilesUnderConstruction(in, supportSnapshot);
+    String clientName = "";
+    String clientMachine = "";
+    boolean underConstruction = false;
-      // to indicate INodeFileWithLink, blocks may be set as null while
+      // to indicate INodeFileWithSnapshot, blocks may be set as null while
+        } else {
+          underConstruction = in.readBoolean();
+          if (underConstruction) {
+            clientName = FSImageSerialization.readString(in);
+            clientMachine = FSImageSerialization.readString(in);
+          }
-    return INode.newINode(inodeId, permissions, blocks, symlink, replication,
-        modificationTime, atime, nsQuota, dsQuota, blockSize, numBlocks,
-        withLink, computeFileSize, snapshottable, withSnapshot);
+      return INode.newINode(inodeId, permissions, blocks, symlink, replication,
+          modificationTime, atime, nsQuota, dsQuota, blockSize, numBlocks,
+          withLink, computeFileSize, snapshottable, withSnapshot,
+          underConstruction, clientName, clientMachine);
-    private void loadFilesUnderConstruction(DataInputStream in)
-    throws IOException {
+    private void loadFilesUnderConstruction(DataInputStream in,
+        boolean supportSnapshot) throws IOException {
-          FSImageSerialization.readINodeUnderConstruction(in);
+          FSImageSerialization.readINodeUnderConstruction(in, supportSnapshot);
+        cons.setLocalName(oldnode.getLocalNameBytes());
+        if (oldnode instanceof FileWithSnapshot
+            && cons instanceof FileWithSnapshot) {
+          ((FileWithSnapshot) oldnode).insertBefore((FileWithSnapshot) cons);
+        }

INS26 INS40 UPD66 INS66 INS66 INS66 INS66 UPD66 INS44 INS60 INS60 INS60 INS39 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS60 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS9 INS42 INS42 INS42 INS21 INS25 INS39 INS59 INS42 INS32 INS27 INS8 INS42 MOV32 INS42 INS25 INS42 INS42 INS32 INS62 INS62 INS21 INS42 MOV27 MOV8 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS32 INS21 MOV25 INS42 INS42 INS36 INS42 INS11 INS7 INS42 INS8 INS11 INS43 INS42 INS42 INS32 INS21 INS21 INS43 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL40 DEL42 DEL32