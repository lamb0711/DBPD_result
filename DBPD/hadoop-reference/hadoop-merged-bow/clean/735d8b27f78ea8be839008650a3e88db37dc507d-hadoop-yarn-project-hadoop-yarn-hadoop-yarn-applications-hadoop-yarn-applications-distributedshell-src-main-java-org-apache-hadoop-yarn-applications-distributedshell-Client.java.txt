YARN-7. Support CPU resource for DistributedShell. (Junping Du via llu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1531222 13f79535-47bb-0310-9956-ffa450edef68

+  // Amt. of virtual core resource to request for to run the App Master
+  private int amVCores = 1;
+  // Amt. of virtual cores to request for container in which shell script will be executed
+  private int containerVirtualCores = 1;
+    opts.addOption("master_vcores", true, "Amount of virtual cores to be requested to run the application master");
+    opts.addOption("container_vcores", true, "Amount of virtual cores to be requested to run the shell command");
-
+    amVCores = Integer.parseInt(cliParser.getOptionValue("master_vcores", "1"));
+    
+    if (amVCores < 0) {
+      throw new IllegalArgumentException("Invalid virtual cores specified for application master, exiting."
+          + " Specified virtual cores=" + amVCores);
+    }
+    containerVirtualCores = Integer.parseInt(cliParser.getOptionValue("container_vcores", "1"));
-    if (containerMemory < 0 || numContainers < 1) {
-      throw new IllegalArgumentException("Invalid no. of containers or container memory specified, exiting."
+    if (containerMemory < 0 || containerVirtualCores < 0 || numContainers < 1) {
+      throw new IllegalArgumentException("Invalid no. of containers or container memory/vcores specified,"
+          + " exiting."
+          + ", containerVirtualCores=" + containerVirtualCores
+    int maxVCores = appResponse.getMaximumResourceCapability().getVirtualCores();
+    LOG.info("Max virtual cores capabililty of resources in this cluster " + maxVCores);
+    
+    if (amVCores > maxVCores) {
+      LOG.info("AM virtual cores specified above max threshold of cluster. " 
+          + "Using max value." + ", specified=" + amVCores 
+          + ", max=" + maxVCores);
+      amVCores = maxVCores;
+    }
+    
+    vargs.add("--container_vcores " + String.valueOf(containerVirtualCores));
-    // For now, only memory is supported so we set memory requirements
+    // For now, both memory and vcores are supported, so we set memory and 
+    // vcores requirements
+    capability.setVirtualCores(amVCores);

INS23 INS23 INS83 INS39 INS59 INS83 INS39 INS59 INS42 INS34 INS42 INS34 INS21 INS21 INS21 INS25 INS21 INS60 INS21 INS25 INS21 INS21 INS32 INS32 INS7 INS27 INS8 INS7 INS39 INS59 INS32 INS27 INS8 INS32 INS32 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS45 INS9 INS45 INS42 INS32 INS42 INS34 INS53 INS42 INS32 INS27 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS32 MOV27 INS27 INS32 INS42 INS45 INS42 INS32 INS7 INS45 INS32 INS42 INS42 INS45 INS45 INS43 INS27 INS42 INS42 INS45 INS45 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS42 INS27 INS42 INS45 INS42 UPD45 INS45 INS45 INS45 INS45