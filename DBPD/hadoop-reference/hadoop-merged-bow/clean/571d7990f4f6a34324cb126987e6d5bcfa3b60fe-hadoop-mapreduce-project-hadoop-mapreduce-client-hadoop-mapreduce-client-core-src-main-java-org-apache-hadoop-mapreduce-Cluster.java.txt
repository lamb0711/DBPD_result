Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.mapreduce.v2.LogParams;
+  private static final Log LOG = LogFactory.getLog(Cluster.class);
+  private static ServiceLoader<ClientProtocolProvider> frameworkLoader =
+      ServiceLoader.load(ClientProtocolProvider.class);
+  
-    for (ClientProtocolProvider provider : ServiceLoader
-        .load(ClientProtocolProvider.class)) {
-      ClientProtocol clientProtocol = null;
-      if (jobTrackAddr == null) {
-        clientProtocol = provider.create(conf);
-      } else {
-        clientProtocol = provider.create(jobTrackAddr, conf);
-      }
+    synchronized (frameworkLoader) {
+      for (ClientProtocolProvider provider : frameworkLoader) {
+        LOG.debug("Trying ClientProtocolProvider : "
+            + provider.getClass().getName());
+        ClientProtocol clientProtocol = null; 
+        try {
+          if (jobTrackAddr == null) {
+            clientProtocol = provider.create(conf);
+          } else {
+            clientProtocol = provider.create(jobTrackAddr, conf);
+          }
-      if (clientProtocol != null) {
-        clientProtocolProvider = provider;
-        client = clientProtocol;
-        break;
+          if (clientProtocol != null) {
+            clientProtocolProvider = provider;
+            client = clientProtocol;
+            LOG.debug("Picked " + provider.getClass().getName()
+                + " as the ClientProtocolProvider");
+            break;
+          }
+          else {
+            LOG.info("Cannot pick " + provider.getClass().getName()
+                + " as the ClientProtocolProvider - returned null protocol");
+          }
+        } 
+        catch (Exception e) {
+          LOG.info("Failed to use " + provider.getClass().getName()
+              + " due to error: " + e.getMessage());
+        }
-  
+
+  /**
+   * Get log parameters for the specified jobID or taskAttemptID
+   * @param jobID the job id.
+   * @param taskAttemptID the task attempt id. Optional.
+   * @return the LogParams
+   * @throws IOException
+   * @throws InterruptedException
+   */
+  public LogParams getLogParams(JobID jobID, TaskAttemptID taskAttemptID)
+      throws IOException, InterruptedException {
+    return client.getLogFileParams(jobID, taskAttemptID);
+  }
+
+   * @deprecated Use {@link Token#renew} instead
+   * @deprecated Use {@link Token#cancel} instead

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS32 INS43 INS43 INS42 MOV32 INS51 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS41 INS65 INS65 INS42 INS42 INS57 INS42 INS42 INS42 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS66 INS65 INS66 INS66 INS65 INS66 INS43 MOV70 INS42 INS42 INS42 INS42 INS67 INS67 INS42 INS42 INS8 INS42 INS42 INS42 INS42 INS21 MOV60 INS54 INS32 MOV8 INS12 INS42 INS42 INS27 INS44 INS8 INS45 INS32 INS8 INS43 INS42 INS21 INS32 INS42 INS21 INS21 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42