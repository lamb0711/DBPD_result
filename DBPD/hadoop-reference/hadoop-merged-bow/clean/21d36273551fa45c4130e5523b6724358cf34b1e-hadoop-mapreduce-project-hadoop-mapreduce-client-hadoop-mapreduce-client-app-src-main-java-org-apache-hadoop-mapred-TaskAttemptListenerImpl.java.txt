MAPREDUCE-5124. AM lacks flow control for task events. Contributed by Peter Bacsko

+import java.util.List;
+import java.util.concurrent.atomic.AtomicReference;
+import org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId;
+import com.google.common.annotations.VisibleForTesting;
+
-@SuppressWarnings({"unchecked"})
+
+  private ConcurrentMap<TaskAttemptId,
+      AtomicReference<TaskAttemptStatus>> attemptIdToStatus
+        = new ConcurrentHashMap<>();
+
+    AtomicReference<TaskAttemptStatus> lastStatusRef =
+        attemptIdToStatus.get(yarnAttemptID);
+    if (lastStatusRef == null) {
+      throw new IllegalStateException("Status update was called"
+          + " with illegal TaskAttemptId: " + yarnAttemptID);
+    }
+
-    context.getEventHandler().handle(
-        new TaskAttemptStatusUpdateEvent(taskAttemptStatus.id,
-            taskAttemptStatus));
+    coalesceStatusUpdate(yarnAttemptID, taskAttemptStatus, lastStatusRef);
+
+
+    attemptIdToStatus.put(attemptID, new AtomicReference<>());
+
+    attemptIdToStatus.remove(attemptID);
+  private void coalesceStatusUpdate(TaskAttemptId yarnAttemptID,
+      TaskAttemptStatus taskAttemptStatus,
+      AtomicReference<TaskAttemptStatus> lastStatusRef) {
+    boolean asyncUpdatedNeeded = false;
+    TaskAttemptStatus lastStatus = lastStatusRef.get();
+
+    if (lastStatus == null) {
+      lastStatusRef.set(taskAttemptStatus);
+      asyncUpdatedNeeded = true;
+    } else {
+      List<TaskAttemptId> oldFetchFailedMaps =
+          taskAttemptStatus.fetchFailedMaps;
+
+      // merge fetchFailedMaps from the previous update
+      if (lastStatus.fetchFailedMaps != null) {
+        if (taskAttemptStatus.fetchFailedMaps == null) {
+          taskAttemptStatus.fetchFailedMaps = lastStatus.fetchFailedMaps;
+        } else {
+          taskAttemptStatus.fetchFailedMaps.addAll(lastStatus.fetchFailedMaps);
+        }
+      }
+
+      if (!lastStatusRef.compareAndSet(lastStatus, taskAttemptStatus)) {
+        // update failed - async dispatcher has processed it in the meantime
+        taskAttemptStatus.fetchFailedMaps = oldFetchFailedMaps;
+        lastStatusRef.set(taskAttemptStatus);
+        asyncUpdatedNeeded = true;
+      }
+    }
+
+    if (asyncUpdatedNeeded) {
+      context.getEventHandler().handle(
+          new TaskAttemptStatusUpdateEvent(taskAttemptStatus.id,
+              lastStatusRef));
+    }
+  }
+
+  @VisibleForTesting
+  ConcurrentMap<TaskAttemptId,
+      AtomicReference<TaskAttemptStatus>> getAttemptIdToStatus() {
+    return attemptIdToStatus;
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS74 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS74 INS42 INS8 INS43 INS43 INS74 INS42 INS14 INS60 INS25 INS21 INS21 INS21 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS60 INS25 INS25 INS42 INS43 INS43 INS74 INS41 INS42 INS42 INS43 INS43 INS74 INS74 INS59 INS27 INS8 INS32 INS32 INS32 INS42 INS42 INS43 INS43 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS8 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS60 INS25 INS25 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS74 INS42 INS42 INS32 INS7 INS74 INS59 INS27 INS8 INS38 INS8 INS43 INS27 INS43 INS42 INS42 INS42 INS42 INS9 INS43 INS43 INS42 INS40 INS40 INS33 INS25 INS32 INS21 INS21 INS21 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS7 INS32 INS7 UPD42 INS40 INS33 INS21 INS21 INS40 INS42 INS42 INS42 INS42 INS42 INS9 INS7 INS32 INS40 INS40 INS40 INS42 INS40 DEL42 DEL45 DEL4 DEL79