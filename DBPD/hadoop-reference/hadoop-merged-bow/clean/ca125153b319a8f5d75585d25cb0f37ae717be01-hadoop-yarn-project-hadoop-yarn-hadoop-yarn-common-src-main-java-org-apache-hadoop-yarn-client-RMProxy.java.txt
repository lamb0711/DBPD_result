YARN-1028. Added FailoverProxyProvider capability to ResourceManager to help with RM failover. Contributed by Karthik Kambatla.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551739 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.util.ReflectionUtils;
+import org.apache.hadoop.yarn.conf.HAUtil;
+  protected static RMProxy INSTANCE;
+  protected RMProxy() {}
+
+  /**
+   * Verify the passed protocol is supported.
+   */
+  @Private
+  protected void checkAllowedProtocols(Class<?> protocol) {}
+
+  /**
+   * Get the ResourceManager address from the provided Configuration for the
+   * given protocol.
+   */
+  @Private
+  protected InetSocketAddress getRMAddress(
+      YarnConfiguration conf, Class<?> protocol) throws IOException {
+    throw new UnsupportedOperationException("This method should be invoked " +
+        "from an instance of ClientRMProxy or ServerRMProxy");
+  }
+
+  /**
+   * Create a proxy for the specified protocol. For non-HA,
+   * this is a direct connection to the ResourceManager address. When HA is
+   * enabled, the proxy handles the failover between the ResourceManagers as
+   * well.
+   */
+  @Private
+  protected static <T> T createRMProxy(final Configuration configuration,
+      final Class<T> protocol) throws IOException {
+    YarnConfiguration conf = (configuration instanceof YarnConfiguration)
+        ? (YarnConfiguration) configuration
+        : new YarnConfiguration(configuration);
+    RetryPolicy retryPolicy = createRetryPolicy(conf);
+    if (HAUtil.isHAEnabled(conf)) {
+      RMFailoverProxyProvider<T> provider =
+          INSTANCE.createRMFailoverProxyProvider(conf, protocol);
+      return (T) RetryProxy.create(protocol, provider, retryPolicy);
+    } else {
+      InetSocketAddress rmAddress = INSTANCE.getRMAddress(conf, protocol);
+      LOG.info("Connecting to ResourceManager at " + rmAddress);
+      T proxy = RMProxy.<T>getProxy(conf, protocol, rmAddress);
+      return (T) RetryProxy.create(protocol, proxy, retryPolicy);
+    }
+  }
+
+  /**
+   * @deprecated
+   * This method is deprecated and is not used by YARN internally any more.
+   * To create a proxy to the RM, use ClientRMProxy#createRMProxy or
+   * ServerRMProxy#createRMProxy.
+   *
+   * Create a proxy to the ResourceManager at the specified address.
+   *
+   * @param conf Configuration to generate retry policy
+   * @param protocol Protocol for the proxy
+   * @param rmAddress Address of the ResourceManager
+   * @param <T> Type information of the proxy
+   * @return Proxy to the RM
+   * @throws IOException
+   */
+  @Deprecated
-  private static <T> T getProxy(final Configuration conf,
+  /**
+   * Get a proxy to the RM at the specified address. To be used to create a
+   * RetryProxy.
+   */
+  @Private
+  static <T> T getProxy(final Configuration conf,
-
+  /**
+   * Helper method to create FailoverProxyProvider.
+   */
+  private <T> RMFailoverProxyProvider<T> createRMFailoverProxyProvider(
+      Configuration conf, Class<T> protocol) {
+    Class<? extends RMFailoverProxyProvider<T>> defaultProviderClass;
+    try {
+      defaultProviderClass = (Class<? extends RMFailoverProxyProvider<T>>)
+          Class.forName(
+              YarnConfiguration.DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER);
+    } catch (Exception e) {
+      throw new YarnRuntimeException("Invalid default failover provider class" +
+          YarnConfiguration.DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER, e);
+    }
+
+    RMFailoverProxyProvider<T> provider = ReflectionUtils.newInstance(
+        conf.getClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,
+            defaultProviderClass, RMFailoverProxyProvider.class), conf);
+    provider.init(conf, (RMProxy<T>) this, protocol);
+    return provider;
+  }
+
+  /**
+   * A RetryPolicy to allow failing over upto the specified maximum time.
+   */
+  private static class FailoverUptoMaximumTimePolicy implements RetryPolicy {
+    private long maxTime;
+
+    FailoverUptoMaximumTimePolicy(long maxTime) {
+      this.maxTime = maxTime;
+    }
+
+    @Override
+    public RetryAction shouldRetry(Exception e, int retries, int failovers,
+        boolean isIdempotentOrAtMostOnce) throws Exception {
+      return System.currentTimeMillis() < maxTime
+          ? RetryAction.FAILOVER_AND_RETRY
+          : RetryAction.FAIL;
+    }
+  }
+
+  /**
+   * Fetch retry policy from Configuration
+   */
-            .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);
-
-    if (rmConnectionRetryIntervalMS < 0) {
-      throw new YarnRuntimeException("Invalid Configuration. " +
-          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +
-          " should not be negative.");
-    }
+                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);
-
-    if (waitForEver) {
-      return  RetryPolicies.RETRY_FOREVER;
-    } else {
+    if (!waitForEver) {
+    // Handle HA case first
+    if (HAUtil.isHAEnabled(conf)) {
+      final long failoverSleepBaseMs = conf.getLong(
+          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,
+          rmConnectionRetryIntervalMS);
+
+      final long failoverSleepMaxMs = conf.getLong(
+          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,
+          rmConnectionRetryIntervalMS);
+
+      int maxFailoverAttempts = conf.getInt(
+          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);
+
+      RetryPolicy basePolicy = RetryPolicies.TRY_ONCE_THEN_FAIL;
+      if (maxFailoverAttempts == -1) {
+        if (waitForEver) {
+          basePolicy = RetryPolicies.FAILOVER_FOREVER;
+        } else {
+          basePolicy = new FailoverUptoMaximumTimePolicy(
+              System.currentTimeMillis() + rmConnectWaitMS);
+        }
+        maxFailoverAttempts = 0;
+      }
+
+      return RetryPolicies.failoverOnNetworkException(basePolicy,
+          maxFailoverAttempts, failoverSleepBaseMs, failoverSleepMaxMs);
+    }
+
+    if (waitForEver) {
+      return RetryPolicies.RETRY_FOREVER;
+    }
+
+    if (rmConnectionRetryIntervalMS < 0) {
+      throw new YarnRuntimeException("Invalid Configuration. " +
+          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +
+          " should not be negative.");
+    }
+
-            rmConnectionRetryIntervalMS,
-            TimeUnit.MILLISECONDS);
+            rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);
-
-    return RetryPolicies.retryByException(RetryPolicies.TRY_ONCE_THEN_FAIL,
-      exceptionToPolicyMap);
+    return RetryPolicies.retryByException(
+        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS55 INS83 INS83 INS43 INS59 INS83 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS83 INS73 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS29 INS78 INS29 INS83 INS73 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS29 MOV25 INS42 INS42 INS65 INS42 INS74 INS42 INS65 INS42 INS42 INS43 INS42 INS74 INS42 INS42 INS53 INS65 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS74 INS42 INS42 INS60 INS60 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS65 INS42 INS65 INS42 INS43 INS43 INS43 INS42 INS74 INS42 INS60 INS54 INS60 INS21 INS41 INS65 INS42 INS83 INS39 INS59 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS65 INS25 INS25 INS66 INS43 INS76 INS66 INS66 INS42 INS43 INS76 INS14 INS66 INS66 INS66 INS66 INS42 INS43 INS43 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS8 INS12 INS74 INS59 INS32 INS42 INS66 INS42 INS39 INS42 INS21 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS41 INS66 INS38 INS32 INS8 INS42 MOV8 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS41 INS60 INS21 INS60 INS41 INS42 INS42 INS43 INS76 INS42 INS21 INS44 INS8 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS7 INS42 INS16 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS41 INS42 INS45 INS45 INS36 INS11 INS14 INS42 INS42 INS74 INS59 INS11 INS43 INS59 INS32 INS43 INS59 INS11 INS42 INS74 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS74 INS52 INS22 INS42 INS27 INS40 INS40 INS83 INS39 INS59 INS83 INS39 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS32 INS62 INS43 INS42 INS43 INS42 INS43 INS43 INS42 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS43 INS32 INS43 INS43 INS42 INS11 INS42 INS14 INS42 INS42 INS40 INS42 INS57 INS43 INS43 INS52 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS38 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS43 INS27 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS38 INS34 INS42 INS8 INS8 INS7 INS42 INS42 INS43 INS76 INS42 INS42 INS40 INS42 INS45 INS40 INS42 INS34 INS21 INS21 INS42 INS34 INS42 INS74 INS7 INS7 INS43 INS43 INS42 INS40 INS42 INS14 INS42 INS42 INS43 INS27 INS42 INS32 INS42 INS42 INS42 DEL83 DEL42