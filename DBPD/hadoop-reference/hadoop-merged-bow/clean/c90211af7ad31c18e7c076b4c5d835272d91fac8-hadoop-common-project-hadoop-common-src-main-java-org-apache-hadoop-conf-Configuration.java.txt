Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1557294 13f79535-47bb-0310-9956-ffa450edef68

-   * Returns the alternate name for a key if the property name is deprecated
-   * or if deprecates a property name.
-   *
-   * @param name property name.
-   * @return alternate name.
-   */
-  private String[] getAlternateNames(String name) {
-    String altNames[] = null;
-    DeprecationContext cur = deprecationContext.get();
-    DeprecatedKeyInfo keyInfo = cur.getDeprecatedKeyMap().get(name);
-    if (keyInfo == null) {
-      altNames = (cur.getReverseDeprecatedKeyMap().get(name) != null ) ? 
-        new String [] {cur.getReverseDeprecatedKeyMap().get(name)} : null;
-      if(altNames != null && altNames.length > 0) {
-    	//To help look for other new configs for this deprecated config
-    	keyInfo = cur.getDeprecatedKeyMap().get(altNames[0]);
-      }      
-    } 
-    if(keyInfo != null && keyInfo.newKeys.length > 0) {
-      List<String> list = new ArrayList<String>(); 
-      if(altNames != null) {
-    	  list.addAll(Arrays.asList(altNames));
-      }
-      list.addAll(Arrays.asList(keyInfo.newKeys));
-      altNames = list.toArray(new String[list.size()]);
-    }
-    return altNames;
-  }
-
-  /**
+  /**
+   * Returns alternative names (non-deprecated keys or previously-set deprecated keys)
+   * for a given non-deprecated key.
+   * If the given key is deprecated, return null.
+   *
+   * @param name property name.
+   * @return alternative names.
+   */
+  private String[] getAlternativeNames(String name) {
+    String altNames[] = null;
+    DeprecatedKeyInfo keyInfo = null;
+    DeprecationContext cur = deprecationContext.get();
+    String depKey = cur.getReverseDeprecatedKeyMap().get(name);
+    if(depKey != null) {
+      keyInfo = cur.getDeprecatedKeyMap().get(depKey);
+      if(keyInfo.newKeys.length > 0) {
+        if(getProps().containsKey(depKey)) {
+          //if deprecated key is previously set explicitly
+          List<String> list = new ArrayList<String>();
+          list.addAll(Arrays.asList(keyInfo.newKeys));
+          list.add(depKey);
+          altNames = list.toArray(new String[list.size()]);
+        }
+        else {
+          altNames = keyInfo.newKeys;
+        }
+      }
+    }
+    return altNames;
+  }
+
-   * <code>name</code> is deprecated or there is a deprecated name associated to it,
-   * it sets the value to both names.
-   * 
+   * <code>name</code> is deprecated, it also sets the <code>value</code> to
+   * the keys that replace the deprecated key.
+   *
-    if(source == null) {
-      updatingResource.put(name, new String[] {"programatically"});
-    } else {
-      updatingResource.put(name, new String[] {source});
-    }
-    String[] altNames = getAlternateNames(name);
-    if (altNames != null && altNames.length > 0) {
-      String altSource = "because " + name + " is deprecated";
-      for(String altName : altNames) {
-        if(!altName.equals(name)) {
-          getOverlay().setProperty(altName, value);
-          getProps().setProperty(altName, value);
-          updatingResource.put(altName, new String[] {altSource});
+    String newSource = (source == null ? "programatically" : source);
+
+    if (!isDeprecated(name)) {
+      updatingResource.put(name, new String[] {newSource});
+      String[] altNames = getAlternativeNames(name);
+      if(altNames != null) {
+        for(String n: altNames) {
+          if(!n.equals(name)) {
+            getOverlay().setProperty(n, value);
+            getProps().setProperty(n, value);
+            updatingResource.put(n, new String[] {newSource});
+          }
-    warnOnceIfDeprecated(deprecations, name);
+    else {
+      String[] names = handleDeprecation(deprecationContext.get(), name);
+      String altSource = "because " + name + " is deprecated";
+      for(String n : names) {
+        getOverlay().setProperty(n, value);
+        getProps().setProperty(n, value);
+        updatingResource.put(n, new String[] {altSource});
+      }
+    }
-    String[] altNames = getAlternateNames(name);
-    getOverlay().remove(name);
-    getProps().remove(name);
-    if (altNames !=null && altNames.length > 0) {
-      for(String altName : altNames) {
-    	getOverlay().remove(altName);
-    	getProps().remove(altName);
+    String[] names = null;
+    if (!isDeprecated(name)) {
+      names = getAlternativeNames(name);
+      if(names == null) {
+    	  names = new String[]{name};
+    else {
+      names = handleDeprecation(deprecationContext.get(), name);
+    }
+
+    for(String n: names) {
+      getOverlay().remove(n);
+      getProps().remove(n);
+    }
+
+  /**
+   * Returns whether or not a deprecated name has been warned. If the name is not
+   * deprecated then always return false
+   */
+  public static boolean hasWarnedDeprecation(String name) {
+    DeprecationContext deprecations = deprecationContext.get();
+    if(deprecations.getDeprecatedKeyMap().containsKey(name)) {
+      if(deprecations.getDeprecatedKeyMap().get(name).accessed.get()) {
+        return true;
+      }
+    }
+    return false;
+  }

MOV31 INS31 UPD42 MOV60 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS60 MOV25 INS60 INS25 MOV70 INS65 INS43 INS42 INS60 INS25 INS41 UPD66 UPD66 INS66 UPD66 INS43 INS59 INS27 UPD66 UPD66 INS43 INS59 INS38 INS8 MOV8 INS38 INS8 INS8 UPD42 INS66 INS66 INS42 INS43 INS59 INS32 INS8 INS9 INS33 INS42 INS42 MOV32 UPD42 MOV42 MOV33 MOV25 INS42 INS42 INS36 INS32 MOV21 INS60 INS25 INS60 MOV60 INS70 INS42 INS33 INS32 MOV21 MOV25 INS21 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS25 MOV27 INS8 INS16 INS42 INS42 MOV5 INS59 MOV27 MOV8 MOV5 INS59 MOV44 INS42 MOV8 UPD42 MOV42 MOV42 INS7 INS27 INS7 INS42 INS42 INS42 INS42 INS32 INS8 INS25 MOV27 INS45 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS32 UPD42 MOV42 MOV33 INS21 INS42 INS32 UPD42 UPD42 INS22 INS42 INS41 INS42 INS32 MOV8 INS8 INS42 INS42 INS44 INS8 UPD42 MOV42 INS32 MOV42 UPD42 MOV42 MOV42 INS7 INS42 INS32 INS42 INS32 INS42 INS9 INS32 INS42 INS42 MOV21 INS21 UPD42 INS43 INS42 INS25 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 INS42 INS3 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS42 INS38 INS8 INS5 INS4 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS40 INS32 INS21 INS21 INS21 INS43 INS85 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 MOV5 INS4 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL34 DEL2 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL36 DEL4 DEL3 DEL33 DEL16 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL45 DEL4 DEL3 DEL32 DEL21 DEL8 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL38 DEL25 DEL40 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL32 DEL21