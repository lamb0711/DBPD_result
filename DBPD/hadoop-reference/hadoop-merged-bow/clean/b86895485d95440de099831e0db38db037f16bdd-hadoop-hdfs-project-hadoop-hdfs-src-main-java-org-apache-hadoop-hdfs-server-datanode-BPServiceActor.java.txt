HDFS-14997. BPServiceActor processes commands from NameNode asynchronously. Contributed by Xiaoqiao He.

+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+  private final CommandProcessingThread commandProcessingThread;
+    commandProcessingThread = new CommandProcessingThread(this);
+    commandProcessingThread.start();
-            if (!processCommand(resp.getCommands()))
-              continue;
+            commandProcessingThread.enqueue(resp.getCommands());
-        processCommand(cmds == null ? null : cmds.toArray(new DatanodeCommand[cmds.size()]));
+        commandProcessingThread.enqueue(cmds);
-          processCommand(new DatanodeCommand[]{ cmd });
+          commandProcessingThread.enqueue(cmd);
-   * Process an array of datanode commands
-   * 
-   * @param cmds an array of datanode commands
-   * @return true if further processing may be required or false otherwise. 
-   */
-  boolean processCommand(DatanodeCommand[] cmds) {
-    if (cmds != null) {
-      for (DatanodeCommand cmd : cmds) {
-        try {
-          if (bpos.processCommandFromActor(cmd, this) == false) {
-            return false;
-          }
-        } catch (RemoteException re) {
-          String reClass = re.getClassName();
-          if (UnregisteredNodeException.class.getName().equals(reClass) ||
-              DisallowedDatanodeException.class.getName().equals(reClass) ||
-              IncorrectVersionException.class.getName().equals(reClass)) {
-            LOG.warn(this + " is shutting down", re);
-            shouldServiceRun = false;
-            return false;
-          }
-        } catch (IOException ioe) {
-          LOG.warn("Error processing datanode Command", ioe);
-        }
-      }
-    }
-    return true;
-  }
-
-
-  /**
-}
+
+  /**
+   * CommandProcessingThread that process commands asynchronously.
+   */
+  class CommandProcessingThread extends Thread {
+    private final BPServiceActor actor;
+    private final BlockingQueue<Runnable> queue;
+
+    CommandProcessingThread(BPServiceActor actor) {
+      super("Command processor");
+      this.actor = actor;
+      this.queue = new LinkedBlockingQueue<>();
+      setDaemon(true);
+    }
+
+    @Override
+    public void run() {
+      try {
+        processQueue();
+      } catch (Throwable t) {
+        LOG.error("{} encountered fatal exception and exit.", getName(), t);
+      }
+    }
+
+    /**
+     * Process commands in queue one by one, and wait until queue not empty.
+     */
+    private void processQueue() {
+      while (shouldRun()) {
+        try {
+          Runnable action = queue.take();
+          action.run();
+          dn.getMetrics().incrActorCmdQueueLength(-1);
+          dn.getMetrics().incrNumProcessedCommands();
+        } catch (InterruptedException e) {
+          LOG.error("{} encountered interrupt and exit.", getName());
+          // ignore unless thread was specifically interrupted.
+          if (Thread.interrupted()) {
+            break;
+          }
+        }
+      }
+      dn.getMetrics().incrActorCmdQueueLength(-1 * queue.size());
+      queue.clear();
+    }
+
+    /**
+     * Process an array of datanode commands.
+     *
+     * @param cmds an array of datanode commands
+     * @return true if further processing may be required or false otherwise.
+     */
+    private boolean processCommand(DatanodeCommand[] cmds) {
+      if (cmds != null) {
+        for (DatanodeCommand cmd : cmds) {
+          try {
+            if (!bpos.processCommandFromActor(cmd, actor)) {
+              return false;
+            }
+          } catch (RemoteException re) {
+            String reClass = re.getClassName();
+            if (UnregisteredNodeException.class.getName().equals(reClass) ||
+                DisallowedDatanodeException.class.getName().equals(reClass) ||
+                IncorrectVersionException.class.getName().equals(reClass)) {
+              LOG.warn("{} is shutting down", this, re);
+              shouldServiceRun = false;
+              return false;
+            }
+          } catch (IOException ioe) {
+            LOG.warn("Error processing datanode Command", ioe);
+          }
+        }
+      }
+      return true;
+    }
+
+    void enqueue(DatanodeCommand cmd) throws InterruptedException {
+      if (cmd == null) {
+        return;
+      }
+      queue.put(() -> processCommand(new DatanodeCommand[]{cmd}));
+      dn.getMetrics().incrActorCmdQueueLength(1);
+    }
+
+    void enqueue(List<DatanodeCommand> cmds) throws InterruptedException {
+      if (cmds == null) {
+        return;
+      }
+      queue.put(() -> processCommand(
+          cmds.toArray(new DatanodeCommand[cmds.size()])));
+      dn.getMetrics().incrActorCmdQueueLength(1);
+    }
+
+    void enqueue(DatanodeCommand[] cmds) throws InterruptedException {
+      queue.put(() -> processCommand(cmds));
+      dn.getMetrics().incrActorCmdQueueLength(1);
+    }
+  }
+}

INS26 INS26 INS40 INS40 INS42 INS23 INS55 INS83 INS83 INS43 INS59 INS29 INS42 INS43 INS23 INS23 INS31 INS31 INS31 MOV31 INS31 INS31 INS31 INS42 INS42 INS21 INS21 INS65 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS44 INS43 INS8 INS7 INS32 INS66 INS42 INS42 INS43 INS43 INS42 INS43 INS42 INS46 INS21 INS21 INS21 INS42 INS54 INS65 INS61 INS21 INS21 INS43 INS42 INS42 INS25 MOV21 INS21 INS74 INS42 INS42 INS25 MOV21 INS21 INS5 INS42 INS42 INS21 INS21 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS7 INS7 INS32 INS8 INS12 INS66 INS32 INS8 INS32 INS32 UPD66 UPD66 INS42 INS27 INS8 INS32 INS32 INS43 INS43 MOV27 INS8 INS32 INS32 INS43 INS85 INS32 INS32 INS43 INS52 INS22 INS42 INS22 INS14 INS42 INS9 INS21 INS44 INS8 INS42 INS54 INS32 INS42 INS27 INS42 INS42 INS42 INS33 INS41 INS42 INS42 INS86 INS32 INS42 INS34 INS42 INS42 INS41 INS42 INS42 INS86 INS32 INS42 INS34 INS42 INS42 INS42 INS86 INS32 INS42 INS34 INS42 INS21 INS52 INS42 INS52 INS42 INS74 INS32 INS43 INS42 INS21 INS8 INS12 INS42 INS42 INS38 INS32 MOV32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS60 INS21 INS21 INS21 INS44 INS8 INS34 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS45 INS32 INS42 INS43 INS59 INS32 INS32 INS32 INS43 INS42 INS21 INS25 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS38 INS32 INS42 INS42 INS32 INS32 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS10 INS38 MOV32 INS42 INS32 UPD42 INS42 MOV42 MOV42 MOV42 INS42 INS45 INS52 DEL42 DEL38 DEL18 DEL25 DEL52 DEL32 DEL9 DEL27 DEL52 DEL45 DEL27 DEL33 DEL16