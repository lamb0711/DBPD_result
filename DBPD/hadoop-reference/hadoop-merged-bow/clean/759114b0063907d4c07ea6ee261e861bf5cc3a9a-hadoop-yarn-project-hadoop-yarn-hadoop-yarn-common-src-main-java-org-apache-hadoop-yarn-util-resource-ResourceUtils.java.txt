YARN-4830. Add support for resource types in the nodemanager. Contributed by Varun Vasudev.

+import org.apache.commons.lang.StringUtils;
+  private static final String MEMORY = ResourceInformation.MEMORY_MB.getName();
+  private static final String VCORES = ResourceInformation.VCORES.getName();
+
-    DISALLOWED_NAMES.add(ResourceInformation.MEMORY_MB.getName());
-    DISALLOWED_NAMES.add(ResourceInformation.VCORES.getName());
+    DISALLOWED_NAMES.add(MEMORY);
+    DISALLOWED_NAMES.add(VCORES);
+  private static volatile Object nodeLock;
+  private static Map<String, ResourceInformation> readOnlyNodeResources;
+
-    String memory = ResourceInformation.MEMORY_MB.getName();
-    String vcores = ResourceInformation.VCORES.getName();
-    if (resourceInformationMap.containsKey(memory)) {
-      ResourceInformation memInfo = resourceInformationMap.get(memory);
+    if (resourceInformationMap.containsKey(MEMORY)) {
+      ResourceInformation memInfo = resourceInformationMap.get(MEMORY);
-                + " be of type 'COUNTABLE' and have units 'M'.");
+                + " be of type 'COUNTABLE' and have units 'Mi'.");
-    if (resourceInformationMap.containsKey(vcores)) {
-      ResourceInformation vcoreInfo = resourceInformationMap.get(vcores);
+    if (resourceInformationMap.containsKey(VCORES)) {
+      ResourceInformation vcoreInfo = resourceInformationMap.get(VCORES);
-    if (!res.containsKey(ResourceInformation.MEMORY_MB.getName())) {
-      LOG.info("Adding resource type - name = " + ResourceInformation.MEMORY_MB
-          .getName() + ", units = " + ResourceInformation.MEMORY_MB.getUnits()
-          + ", type = " + ResourceTypes.COUNTABLE);
+    if (!res.containsKey(MEMORY)) {
+      LOG.info("Adding resource type - name = " + MEMORY + ", units = "
+          + ResourceInformation.MEMORY_MB.getUnits() + ", type = "
+          + ResourceTypes.COUNTABLE);
-          .newInstance(ResourceInformation.MEMORY_MB.getName(),
+          .newInstance(MEMORY,
-      res.put(ResourceInformation.MEMORY_MB.getName(), ri);
+      res.put(MEMORY, ri);
-    if (!res.containsKey(ResourceInformation.VCORES.getName())) {
-      LOG.info("Adding resource type - name = " + ResourceInformation.VCORES
-          .getName() + ", units = , type = " + ResourceTypes.COUNTABLE);
+    if (!res.containsKey(VCORES)) {
+      LOG.info("Adding resource type - name = " + VCORES + ", units = , type = "
+          + ResourceTypes.COUNTABLE);
-          ResourceInformation.newInstance(ResourceInformation.VCORES.getName());
-      res.put(ResourceInformation.VCORES.getName(), ri);
+          ResourceInformation.newInstance(VCORES);
+      res.put(VCORES, ri);
+
-              InputStream ris = getConfInputStream(resourceFile, conf);
+              addResourcesFileToConf(resourceFile, conf);
-              conf.addResource(ris);
-              return resources;
-            } catch (IOException ie) {
-              LOG.fatal(
-                  "Exception trying to read resource types configuration '"
-                      + resourceFile + "'.", ie);
-              throw new YarnRuntimeException(ie);
-            } catch (YarnException ye) {
-              LOG.fatal(
-                  "YARN Exception trying to read resource types configuration '"
-                      + resourceFile + "'.", ye);
-              throw new YarnRuntimeException(ye);
-  static InputStream getConfInputStream(String resourceFile, Configuration conf)
-      throws IOException, YarnException {
+  private static InputStream getConfInputStream(String resourceFile,
+      Configuration conf) throws IOException, YarnException {
+  private static void addResourcesFileToConf(String resourceFile,
+      Configuration conf) throws FileNotFoundException {
+    try {
+      InputStream ris = getConfInputStream(resourceFile, conf);
+      LOG.debug("Found " + resourceFile + ", adding to configuration");
+      conf.addResource(ris);
+    } catch (FileNotFoundException fe) {
+      throw fe;
+    } catch (IOException ie) {
+      LOG.fatal("Exception trying to read resource types configuration '"
+          + resourceFile + "'.", ie);
+      throw new YarnRuntimeException(ie);
+    } catch (YarnException ye) {
+      LOG.fatal("YARN Exception trying to read resource types configuration '"
+          + resourceFile + "'.", ye);
+      throw new YarnRuntimeException(ye);
+    }
+  }
+
+
+  private static String getUnits(String resourceValue) {
+    String units;
+    for (int i = 0; i < resourceValue.length(); i++) {
+      if (Character.isAlphabetic(resourceValue.charAt(i))) {
+        units = resourceValue.substring(i);
+        if (StringUtils.isAlpha(units)) {
+          return units;
+        }
+      }
+    }
+    return "";
+  }
+
+  /**
+   * Function to get the resources for a node. This function will look at the
+   * file {@link YarnConfiguration#NODE_RESOURCES_CONFIGURATION_FILE} to
+   * determine the node resources.
+   *
+   * @param conf configuration file
+   * @return a map to resource name to the ResourceInformation object. The map
+   * is guaranteed to have entries for memory and vcores
+   */
+  public static Map<String, ResourceInformation> getNodeResourceInformation(
+      Configuration conf) {
+    if (nodeLock == null) {
+      synchronized (ResourceUtils.class) {
+        if (nodeLock == null) {
+          synchronized (ResourceUtils.class) {
+            nodeLock = new Object();
+            Map<String, ResourceInformation> nodeResources =
+                initializeNodeResourceInformation(conf);
+            addManadtoryResources(nodeResources);
+            checkMandatatoryResources(nodeResources);
+            readOnlyNodeResources = Collections.unmodifiableMap(nodeResources);
+          }
+        }
+      }
+    }
+    return readOnlyNodeResources;
+  }
+
+  private static Map<String, ResourceInformation>
+  initializeNodeResourceInformation(Configuration conf) {
+    Map<String, ResourceInformation> nodeResources = new HashMap<>();
+    try {
+      addResourcesFileToConf(
+          YarnConfiguration.NODE_RESOURCES_CONFIGURATION_FILE, conf);
+      for (Map.Entry<String, String> entry : conf) {
+        String key = entry.getKey();
+        String value = entry.getValue();
+        if (key.startsWith(YarnConfiguration.NM_RESOURCES_PREFIX)) {
+          addResourceInformation(key, value, nodeResources);
+        }
+      }
+    } catch (FileNotFoundException fe) {
+      LOG.info("Couldn't find node resources file");
+    }
+    return nodeResources;
+  }
+
+  private static void addResourceInformation(String prop, String value,
+      Map<String, ResourceInformation> nodeResources) {
+    String[] parts = prop.split("\\.");
+    LOG.info("Found resource entry " + prop);
+    if (parts.length == 4) {
+      String resourceType = parts[3];
+      if (!nodeResources.containsKey(resourceType)) {
+        nodeResources
+            .put(resourceType, ResourceInformation.newInstance(resourceType));
+      }
+      String units = getUnits(value);
+      Long resourceValue =
+          Long.valueOf(value.substring(0, value.length() - units.length()));
+      nodeResources.get(resourceType).setValue(resourceValue);
+      nodeResources.get(resourceType).setUnits(units);
+      LOG.debug("Setting value for resource type " + resourceType + " to "
+              + resourceValue + " with units " + units);
+    }
+  }
+
+  @VisibleForTesting
+  synchronized public static void resetNodeResources() {
+    nodeLock = null;
+  }

INS26 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 MOV59 INS83 INS83 INS83 INS43 MOV59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS39 INS42 INS44 INS44 INS43 MOV8 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS83 INS83 INS39 INS42 INS8 INS42 UPD42 INS42 UPD42 INS42 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 MOV43 INS42 INS60 INS24 INS41 INS65 INS65 INS65 INS43 INS43 INS43 INS43 INS42 INS25 INS41 INS43 INS43 INS43 INS43 INS42 INS60 INS54 INS41 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS21 INS25 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS12 MOV43 INS59 INS58 INS27 INS37 INS8 INS45 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS8 INS12 INS42 INS42 INS42 INS43 INS43 INS43 INS5 INS59 INS32 INS27 INS8 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS44 INS8 INS42 INS39 INS59 INS42 INS32 INS42 INS25 INS67 INS42 INS33 INS51 INS43 INS43 INS43 INS42 INS14 INS21 INS70 INS44 INS8 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS27 INS40 INS34 INS60 INS25 INS60 INS60 INS21 INS21 INS21 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS53 INS42 INS34 INS42 INS42 INS32 INS8 INS42 INS42 INS57 INS8 INS42 INS42 INS42 INS74 INS32 INS44 INS42 INS8 INS43 INS42 INS21 INS42 INS42 INS42 INS45 INS45 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS21 INS25 INS43 INS25 INS43 INS42 INS40 INS42 INS74 INS42 INS60 INS60 INS25 INS42 INS32 INS42 INS42 INS2 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 UPD42 UPD42 INS42 MOV32 UPD42 MOV42 MOV32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS7 INS32 INS8 INS42 INS27 INS8 INS42 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS45 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS42 INS33 INS51 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS27 UPD45 INS8 INS42 INS42 INS42 INS42 INS57 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 MOV21 MOV60 MOV25 INS54 INS43 INS21 INS60 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 MOV12 INS42 INS7 INS74 INS59 INS32 INS32 INS7 INS21 INS21 MOV21 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS42 INS45 DEL40 DEL32 DEL40 DEL32 DEL60 DEL60 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL32 DEL40 DEL32 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL32 DEL40 DEL32 DEL42 DEL41