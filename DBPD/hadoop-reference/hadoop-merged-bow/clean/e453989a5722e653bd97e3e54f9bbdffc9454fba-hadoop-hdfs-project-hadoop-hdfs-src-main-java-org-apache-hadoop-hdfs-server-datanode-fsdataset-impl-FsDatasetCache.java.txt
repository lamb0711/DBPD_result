HDFS-8157. Writes to RAM DISK reserve locked memory for block files. (Arpit Agarwal)

-    public long round(long count) {
-      long newCount = 
-          (count + (osPageSize - 1)) / osPageSize;
-      return newCount * osPageSize;
+    public long roundUp(long count) {
+      return (count + osPageSize - 1) & (~(osPageSize - 1));
+    }
+
+    /**
+     * Round down a number to the operating system page size.
+     */
+    public long roundDown(long count) {
+      return count & (~(osPageSize - 1));
-      count = rounder.round(count);
+      count = rounder.roundUp(count);
-      count = rounder.round(count);
+      count = rounder.roundUp(count);
-    
+
+    /**
+     * Release some bytes that we're using rounded down to the page size.
+     *
+     * @param count    The number of bytes to release.  We will round this
+     *                 down to the page size.
+     *
+     * @return         The new number of usedBytes.
+     */
+    long releaseRoundDown(long count) {
+      count = rounder.roundDown(count);
+      return usedBytes.addAndGet(-count);
+    }
+
+   * Try to reserve more bytes.
+   *
+   * @param count    The number of bytes to add.  We will round this
+   *                 up to the page size.
+   *
+   * @return         The new number of usedBytes if we succeeded;
+   *                 -1 if we failed.
+   */
+  long reserve(long count) {
+    return usedBytesCount.reserve(count);
+  }
+
+  /**
+   * Release some bytes that we're using.
+   *
+   * @param count    The number of bytes to release.  We will round this
+   *                 up to the page size.
+   *
+   * @return         The new number of usedBytes.
+   */
+  long release(long count) {
+    return usedBytesCount.release(count);
+  }
+
+  /**
+   * Release some bytes that we're using rounded down to the page size.
+   *
+   * @param count    The number of bytes to release.  We will round this
+   *                 down to the page size.
+   *
+   * @return         The new number of usedBytes.
+   */
+  long releaseRoundDown(long count) {
+    return usedBytesCount.releaseRoundDown(count);
+  }
+
+  /**
+   * Get the OS page size.
+   *
+   * @return the OS page size.
+   */
+  long getOsPageSize() {
+    return usedBytesCount.rounder.osPageSize;
+  }
+
+  /**
-      long newUsedBytes = usedBytesCount.reserve(length);
+      long newUsedBytes = reserve(length);
-            usedBytesCount.release(length);
+            release(length);
-      long newUsedBytes =
-          usedBytesCount.release(value.mappableBlock.getLength());
+      long newUsedBytes = release(value.mappableBlock.getLength());

INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS8 UPD42 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS39 INS42 INS41 INS65 INS65 INS65 INS39 INS42 INS41 INS65 INS65 INS65 INS39 INS42 INS41 INS65 INS65 INS41 INS65 INS39 INS42 INS41 INS65 INS65 INS65 INS39 INS42 INS21 INS41 INS66 INS42 INS66 INS66 INS66 INS66 INS32 INS66 INS42 INS66 INS66 INS66 INS32 INS66 INS42 INS66 INS66 INS66 INS32 INS66 INS66 INS40 UPD27 MOV27 INS66 INS27 INS66 INS42 INS66 INS66 INS66 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS36 INS42 INS36 INS42 INS32 INS42 INS42 INS38 INS27 INS38 INS38 UPD42 UPD42 INS42 INS42 INS42 INS42 INS27 INS34 MOV36 INS36 MOV42 INS42 INS27 INS42 INS34 DEL39 DEL42 DEL36 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42