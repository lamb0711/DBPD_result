Merging r1544666 through r1547120 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1547122 13f79535-47bb-0310-9956-ffa450edef68

-
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.RMStateVersion;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppNewSavedEvent;
-import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppNewSavedEvent;
+  protected static final String VERSION_NODE = "RMVersionNode";
-  
+
+  /**
+   * 1) Versioning scheme: major.minor. For e.g. 1.0, 1.1, 1.2...1.25, 2.0 etc.
+   * 2) Any incompatible change of state-store is a major upgrade, and any
+   *    compatible change of state-store is a minor upgrade.
+   * 3) If theres's no version, treat it as 1.0.
+   * 4) Within a minor upgrade, say 1.1 to 1.2:
+   *    overwrite the version info and proceed as normal.
+   * 5) Within a major upgrade, say 1.2 to 2.0:
+   *    throw exception and indicate user to use a separate upgrade tool to
+   *    upgrade RM state.
+   */
+  public void checkVersion() throws Exception {
+    RMStateVersion loadedVersion = loadVersion();
+    LOG.info("Loaded RM state version info " + loadedVersion);
+    if (loadedVersion != null && loadedVersion.equals(getCurrentVersion())) {
+      return;
+    }
+    // if there is no version info, treat it as 1.0;
+    if (loadedVersion == null) {
+      loadedVersion = RMStateVersion.newInstance(1, 0);
+    }
+    if (loadedVersion.isCompatibleTo(getCurrentVersion())) {
+      LOG.info("Storing RM state version info " + getCurrentVersion());
+      storeVersion();
+    } else {
+      throw new RMStateVersionIncompatibleException(
+        "Expecting RM state version " + getCurrentVersion()
+            + ", but loading version " + loadedVersion);
+    }
+  }
+
+  /**
+   * Derived class use this method to load the version information from state
+   * store.
+   */
+  protected abstract RMStateVersion loadVersion() throws Exception;
+
+  /**
+   * Derived class use this method to store the version information.
+   */
+  protected abstract void storeVersion() throws Exception;
+
+  /**
+   * Get the current version of the underlying state store.
+   */
+  protected abstract RMStateVersion getCurrentVersion();
+

MOV26 INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS43 INS29 INS83 INS83 INS39 INS42 INS43 INS29 INS83 INS83 INS43 INS42 INS42 INS42 INS45 INS65 INS42 INS60 INS21 INS25 INS25 INS25 INS65 INS42 INS42 INS65 INS42 INS65 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS59 INS32 INS27 INS8 INS27 INS8 INS32 INS8 INS8 INS66 INS66 INS66 INS66 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS32 INS41 INS42 INS33 INS21 INS42 INS42 INS32 INS21 INS21 INS53 INS42 INS45 INS42 INS42 INS33 INS42 INS42 INS32 INS7 INS42 INS32 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS43 INS27 INS42 INS42 INS34 INS34 INS45 INS32 INS42 INS45 INS32 INS45 INS42 INS42 INS42