HDFS-6727. Refresh data volumes on DataNode based on configuration changes (Lei Xu via Colin Patrick McCabe)

+import java.util.Arrays;
+import java.util.Collections;
+import java.util.concurrent.ConcurrentHashMap;
+import com.google.common.collect.Lists;
+import org.apache.hadoop.io.MultipleIOException;
-    storageMap = new HashMap<String, DatanodeStorage>();
+    storageMap = new ConcurrentHashMap<String, DatanodeStorage>();
-    fsVolume.getVolumeMap(volumeMap);
+    ReplicaMap tempVolumeMap = new ReplicaMap(this);
+    fsVolume.getVolumeMap(tempVolumeMap);
+    volumeMap.addAll(tempVolumeMap);
-                            DatanodeStorage.State.NORMAL,
-                            storageType));
+            DatanodeStorage.State.NORMAL,
+            storageType));
+  private void addVolumeAndBlockPool(Collection<StorageLocation> dataLocations,
+      Storage.StorageDirectory sd, final Collection<String> bpids)
+      throws IOException {
+    final File dir = sd.getCurrentDir();
+    final StorageType storageType =
+        getStorageTypeFromLocations(dataLocations, sd.getRoot());
+
+    final FsVolumeImpl fsVolume = new FsVolumeImpl(
+        this, sd.getStorageUuid(), dir, this.conf, storageType);
+    final ReplicaMap tempVolumeMap = new ReplicaMap(fsVolume);
+
+    List<IOException> exceptions = Lists.newArrayList();
+    for (final String bpid : bpids) {
+      try {
+        fsVolume.addBlockPool(bpid, this.conf);
+        fsVolume.getVolumeMap(bpid, tempVolumeMap);
+      } catch (IOException e) {
+        LOG.warn("Caught exception when adding " + fsVolume +
+            ". Will throw later.", e);
+        exceptions.add(e);
+      }
+    }
+    if (!exceptions.isEmpty()) {
+      // The states of FsDatasteImpl are not modified, thus no need to rolled back.
+      throw MultipleIOException.createIOException(exceptions);
+    }
+
+    volumeMap.addAll(tempVolumeMap);
+    storageMap.put(sd.getStorageUuid(),
+        new DatanodeStorage(sd.getStorageUuid(),
+            DatanodeStorage.State.NORMAL,
+            storageType));
+    asyncDiskService.addVolume(sd.getCurrentDir());
+    volumes.addVolume(fsVolume);
+
+    LOG.info("Added volume - " + dir + ", StorageType: " + storageType);
+  }
+
-   * @param volumes
-   * @throws IOException
+   * @param volumes an array of storage locations for adding volumes.
+   * @param bpids block pool IDs.
+   * @return an array of successfully loaded volumes.
-  public synchronized void addVolumes(Collection<StorageLocation> volumes)
-      throws IOException {
+  public synchronized List<StorageLocation> addVolumes(
+      final List<StorageLocation> volumes, final Collection<String> bpids) {
-    Map<String, Storage.StorageDirectory> allStorageDirs =
+    final Map<String, Storage.StorageDirectory> allStorageDirs =
-    for (int idx = 0; idx < dataStorage.getNumStorageDirs(); idx++) {
-      Storage.StorageDirectory sd = dataStorage.getStorageDir(idx);
-      allStorageDirs.put(sd.getRoot().getAbsolutePath(), sd);
+    List<StorageLocation> succeedVolumes = Lists.newArrayList();
+    try {
+      for (int idx = 0; idx < dataStorage.getNumStorageDirs(); idx++) {
+        Storage.StorageDirectory sd = dataStorage.getStorageDir(idx);
+        allStorageDirs.put(sd.getRoot().getCanonicalPath(), sd);
+      }
+    } catch (IOException ioe) {
+      LOG.warn("Caught exception when parsing storage URL.", ioe);
+      return succeedVolumes;
-    for (StorageLocation vol : volumes) {
-      String key = vol.getFile().getAbsolutePath();
-      if (!allStorageDirs.containsKey(key)) {
-        LOG.warn("Attempt to add an invalid volume: " + vol.getFile());
-      } else {
-        addVolume(dataLocations, allStorageDirs.get(key));
+    final boolean[] successFlags = new boolean[volumes.size()];
+    Arrays.fill(successFlags, false);
+    List<Thread> volumeAddingThreads = Lists.newArrayList();
+    for (int i = 0; i < volumes.size(); i++) {
+      final int idx = i;
+      Thread t = new Thread() {
+        public void run() {
+          StorageLocation vol = volumes.get(idx);
+          try {
+            String key = vol.getFile().getCanonicalPath();
+            if (!allStorageDirs.containsKey(key)) {
+              LOG.warn("Attempt to add an invalid volume: " + vol.getFile());
+            } else {
+              addVolumeAndBlockPool(dataLocations, allStorageDirs.get(key),
+                  bpids);
+              successFlags[idx] = true;
+            }
+          } catch (IOException e) {
+            LOG.warn("Caught exception when adding volume " + vol, e);
+          }
+        }
+      };
+      volumeAddingThreads.add(t);
+      t.start();
+    }
+
+    for (Thread t : volumeAddingThreads) {
+      try {
+        t.join();
+      } catch (InterruptedException e) {
+        LOG.warn("Caught InterruptedException when adding volume.", e);
+
+    for (int i = 0; i < volumes.size(); i++) {
+      if (successFlags[i]) {
+        succeedVolumes.add(volumes.get(i));
+      }
+    }
+    return succeedVolumes;
-        this.volumes.removeVolume(volume);
-        storageMap.remove(sd.getStorageUuid());
+        // Disable the volume from the service.
+        this.volumes.removeVolume(volume);
-              invalidate(bpid, block.getBlockId());
+              invalidate(bpid, block);
+
+        storageMap.remove(sd.getStorageUuid());
-   * It should only be used for decommissioning disks.
+   * It should only be used when deactivating disks.
-   * @param blockId the ID of the block.
+   * @param block The block to be invalidated.
-  public void invalidate(String bpid, long blockId) {
+  public void invalidate(String bpid, ReplicaInfo block) {
-          new ExtendedBlockId(blockId, bpid));
+          new ExtendedBlockId(block.getBlockId(), bpid));
-      cacheManager.uncacheBlock(bpid, blockId);
+      cacheManager.uncacheBlock(bpid, block.getBlockId());
+
+    datanode.notifyNamenodeDeletedBlock(new ExtendedBlock(bpid, block),
+        block.getStorageUuid());

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS83 INS39 INS42 INS44 INS44 INS44 MOV43 INS8 INS74 INS44 INS60 INS21 INS74 INS42 INS43 INS42 INS83 INS74 INS42 INS60 INS60 INS60 INS60 INS60 INS70 INS25 INS21 INS21 INS21 INS21 INS21 UPD65 INS65 INS43 INS43 INS83 UPD74 INS83 INS74 INS42 INS60 INS54 INS60 INS21 INS60 INS24 INS24 INS41 INS43 UPD42 INS21 INS43 INS59 INS32 INS43 INS43 INS40 INS43 INS43 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS38 INS8 INS32 INS32 INS32 INS32 INS32 INS66 UPD42 INS66 INS66 INS42 INS42 UPD43 INS43 INS43 INS83 INS74 INS59 INS8 INS12 INS83 INS5 INS59 INS32 INS74 INS59 INS58 INS27 INS37 INS8 UPD42 INS8 INS58 INS27 INS37 INS8 INS42 UPD66 UPD42 UPD66 INS42 INS32 INS42 INS42 INS14 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS83 INS43 INS42 INS54 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 INS42 INS42 INS43 INS43 INS42 INS32 MOV24 INS44 INS8 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS9 INS43 INS43 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS21 INS21 INS43 INS42 INS54 INS39 INS59 INS42 INS32 INS42 INS25 MOV21 INS42 INS42 INS14 INS32 UPD74 INS43 INS52 INS42 INS42 INS42 INS42 INS32 INS43 INS52 INS32 INS42 INS22 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS43 INS32 INS40 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS41 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS83 INS39 INS59 INS43 INS59 INS32 INS32 INS42 INS8 INS12 INS42 INS34 INS42 INS42 INS2 INS8 MOV21 MOV21 INS43 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS21 UPD42 INS42 INS42 UPD42 INS32 INS32 INS43 INS42 INS21 INS21 INS42 INS42 INS45 INS42 INS43 INS1 INS32 INS43 INS42 INS21 INS32 INS32 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS31 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 UPD42 INS83 INS39 INS42 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS60 INS54 MOV43 INS59 MOV8 INS12 INS42 INS32 INS44 INS8 INS21 INS42 INS42 INS42 INS43 INS42 INS21 INS32 INS21 INS42 INS32 INS42 INS42 INS42 UPD42 INS7 INS42 INS42 INS27 INS42 UPD42 INS42 INS2 INS9 INS45 INS42 INS42 INS42 DEL39 DEL42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21