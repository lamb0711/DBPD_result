HDDS-293. Reduce memory usage and object creation in KeyData.

+import com.google.common.base.Preconditions;
+   * Represent a list of chunks.
+   * In order to reduce memory usage, chunkList is declared as an {@link Object}.
+   * When #elements == 0, chunkList is null.
+   * When #elements == 1, chunkList refers to the only element.
+   * When #elements > 1, chunkList refers to the list.
+   *
-  private List<ContainerProtos.ChunkInfo> chunks;
+  private Object chunkList;
-      keyData.setSize(data.getSize());
+      Preconditions.checkArgument(data.getSize() == keyData.getSize());
-    builder.addAllChunks(this.chunks);
+    builder.addAllChunks(getChunks());
+  @SuppressWarnings("unchecked")
+  private List<ContainerProtos.ChunkInfo> castChunkList() {
+    return (List<ContainerProtos.ChunkInfo>)chunkList;
+  }
+
-    return chunks;
+    return chunkList == null? Collections.emptyList()
+        : chunkList instanceof ContainerProtos.ChunkInfo?
+            Collections.singletonList((ContainerProtos.ChunkInfo)chunkList)
+        : Collections.unmodifiableList(castChunkList());
-    if (chunks == null) {
-      chunks = new ArrayList<>();
+    if (chunkList == null) {
+      chunkList = chunkInfo;
+    } else {
+      final List<ContainerProtos.ChunkInfo> list;
+      if (chunkList instanceof ContainerProtos.ChunkInfo) {
+        list = new ArrayList<>(2);
+        list.add((ContainerProtos.ChunkInfo)chunkList);
+        chunkList = list;
+      } else {
+        list = castChunkList();
+      }
+      list.add(chunkInfo);
-    chunks.add(chunkInfo);
+    size += chunkInfo.getLen();
-  public void removeChunk(ContainerProtos.ChunkInfo chunkInfo) {
-    chunks.remove(chunkInfo);
+  public boolean removeChunk(ContainerProtos.ChunkInfo chunkInfo) {
+    final boolean removed;
+    if (chunkList instanceof List) {
+      final List<ContainerProtos.ChunkInfo> list = castChunkList();
+      removed = list.remove(chunkInfo);
+      if (list.size() == 1) {
+        chunkList = list.get(0);
+      }
+    } else if (chunkInfo.equals(chunkList)) {
+      chunkList = null;
+      removed = true;
+    } else {
+      removed = false;
+    }
+
+    if (removed) {
+      size -= chunkInfo.getLen();
+    }
+    return removed;
-    this.chunks = chunks;
-  }
-
-  /**
-   * sets the total size of the block
-   * @param size size of the block
-   */
-  public void setSize(long size) {
-    this.size = size;
+    if (chunks == null) {
+      chunkList = null;
+      size = 0L;
+    } else {
+      final int n = chunks.size();
+      chunkList = n == 0? null: n == 1? chunks.get(0): chunks;
+      size = chunks.parallelStream().mapToLong(ContainerProtos.ChunkInfo::getLen).sum();
+    }
-
-  /**
-   * computes the total size of chunks allocated for the key.
-   */
-  public void computeSize() {
-    setSize(chunks.parallelStream().mapToLong(e -> e.getLen()).sum());
-  }

INS26 INS40 INS31 INS31 INS43 MOV21 INS79 INS83 MOV74 INS42 INS8 INS8 UPD39 INS8 MOV29 MOV83 MOV39 MOV42 MOV44 INS8 INS42 UPD42 INS42 INS45 INS41 INS25 INS21 INS60 INS25 INS25 INS41 INS25 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS11 INS16 INS27 INS8 INS8 INS7 INS83 INS39 INS59 INS62 INS8 INS25 INS42 INS8 INS42 MOV27 INS8 INS8 INS42 INS32 INS74 INS42 INS27 INS32 INS16 INS42 INS33 INS21 INS60 MOV25 MOV21 INS42 INS32 INS42 INS42 INS43 INS60 MOV21 INS25 INS32 INS8 INS8 INS21 MOV21 INS21 INS60 MOV21 MOV21 INS32 INS42 INS43 INS43 INS42 INS33 INS42 INS42 INS62 INS32 INS32 INS7 INS83 INS74 INS59 INS62 INS8 INS42 INS42 INS42 INS83 INS74 INS59 INS7 INS27 INS8 INS42 INS42 INS42 INS21 INS21 INS21 INS7 INS7 INS83 INS39 INS59 INS7 INS42 INS42 INS27 INS42 INS40 INS42 INS43 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS21 INS21 INS21 UPD42 INS43 INS43 INS42 INS32 INS42 INS32 INS32 INS34 INS21 INS7 INS7 INS7 INS42 INS32 INS42 INS33 INS42 INS34 INS42 INS32 INS42 INS16 INS42 INS32 MOV32 INS32 INS40 INS43 INS42 INS42 INS42 INS40 INS40 INS32 INS7 INS7 INS42 INS40 INS42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS7 INS42 INS33 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS33 INS16 MOV32 MOV42 MOV42 UPD42 MOV42 INS40 UPD42 INS42 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS27 INS32 INS42 INS90 INS34 INS43 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS34 INS40 INS42 INS40 DEL32 DEL52 DEL42 DEL22 DEL42 DEL8 DEL32 DEL8 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL42 DEL32 DEL32 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL8 DEL31