YARN-2768 Improved Yarn Registry service record structure (stevel)

-import org.apache.hadoop.registry.client.types.AddressTypes;
+import static org.apache.hadoop.registry.client.types.AddressTypes.*;
+import org.apache.hadoop.registry.client.types.ServiceRecord;
-import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
-        AddressTypes.ADDRESS_HOSTNAME_AND_PORT,
+        ADDRESS_HOSTNAME_AND_PORT,
-        tuplelist(hostname, Integer.toString(port)));
+        hostnamePortPair(hostname, port));
-   * @param protobuf flag to indicate whether or not the IPC uses protocol
-   * buffers
-  public static Endpoint ipcEndpoint(String api,
-      boolean protobuf, List<String> address) {
-    ArrayList<List<String>> addressList = new ArrayList<List<String>>();
-    if (address != null) {
-      addressList.add(address);
-    }
+  public static Endpoint ipcEndpoint(String api, InetSocketAddress address) {
-        AddressTypes.ADDRESS_HOSTNAME_AND_PORT,
-        protobuf ? ProtocolTypes.PROTOCOL_HADOOP_IPC_PROTOBUF
-                 : ProtocolTypes.PROTOCOL_HADOOP_IPC,
-        addressList);
+        ADDRESS_HOSTNAME_AND_PORT,
+        ProtocolTypes.PROTOCOL_HADOOP_IPC,
+        address== null ? null: hostnamePortPair(address));
-   * Create a single-element list of tuples from the input.
-   * that is, an input ("a","b","c") is converted into a list
-   * in the form [["a","b","c"]]
-   * @param t1 tuple elements
-   * @return a list containing a single tuple
+   * Create a single entry map
+   * @param key map entry key
+   * @param val map entry value
+   * @return a 1 entry map.
-  public static List<List<String>> tuplelist(String... t1) {
-    List<List<String>> outer = new ArrayList<List<String>>();
-    outer.add(tuple(t1));
-    return outer;
+  public static Map<String, String> map(String key, String val) {
+    Map<String, String> map = new HashMap<String, String>(1);
+    map.put(key, val);
+    return map;
-   * Create a tuples from the input.
-   * that is, an input ("a","b","c") is converted into a list
-   * in the form ["a","b","c"]
-   * @param t1 tuple elements
-   * @return a single tuple as a list
+   * Create a URI
+   * @param uri value
+   * @return a 1 entry map.
-  public static List<String> tuple(String... t1) {
-    return Arrays.asList(t1);
+  public static Map<String, String> uri(String uri) {
+    return map(ADDRESS_URI, uri);
-   * Create a tuples from the input, converting all to Strings in the process
-   * that is, an input ("a", 7, true) is converted into a list
-   * in the form ["a","7,"true"]
-   * @param t1 tuple elements
-   * @return a single tuple as a list
+   * Create a (hostname, port) address pair
+   * @param hostname hostname
+   * @param port port
+   * @return a 1 entry map.
-  public static List<String> tuple(Object... t1) {
-    List<String> l = new ArrayList<String>(t1.length);
-    for (Object t : t1) {
-      l.add(t.toString());
-    }
-    return l;
+  public static Map<String, String> hostnamePortPair(String hostname, int port) {
+    Map<String, String> map =
+        map(ADDRESS_HOSTNAME_FIELD, hostname);
+    map.put(ADDRESS_PORT_FIELD, Integer.toString(port));
+    return map;
-   * Convert a socket address pair into a string tuple, (host, port).
-   * TODO JDK7: move to InetAddress.getHostString() to avoid DNS lookups.
-   * @param address an address
-   * @return an element for the address list
+   * Create a (hostname, port) address pair
+   * @param address socket address whose hostname and port are used for the
+   * generated address.
+   * @return a 1 entry map.
-  public static List<String> marshall(InetSocketAddress address) {
-    return tuple(address.getHostName(), address.getPort());
+  public static Map<String, String> hostnamePortPair(InetSocketAddress address) {
+    return hostnamePortPair(address.getHostName(), address.getPort());
-    requireAddressType(AddressTypes.ADDRESS_URI, epr);
-    List<List<String>> addresses = epr.addresses;
+    requireAddressType(ADDRESS_URI, epr);
+    List<Map<String, String>> addresses = epr.addresses;
-    for (List<String> address : addresses) {
-      if (address.size() != 1) {
-        throw new InvalidRecordException(epr.toString(),
-            "Address payload invalid: wrong element count: " +
-            address.size());
-      }
-      results.add(address.get(0));
+    for (Map<String, String> address : addresses) {
+      results.add(getAddressField(address, ADDRESS_URI));
+   * Get a specific field from an address -raising an exception if
+   * the field is not present
+   * @param address address to query
+   * @param field field to resolve
+   * @return the resolved value. Guaranteed to be non-null.
+   * @throws InvalidRecordException if the field did not resolve
+   */
+  public static String getAddressField(Map<String, String> address,
+      String field) throws InvalidRecordException {
+    String val = address.get(field);
+    if (val == null) {
+      throw new InvalidRecordException("", "Missing address field: " + field);
+    }
+    return val;
+  }
+
+  /**
+
+  /**
+   * Validate the record by checking for null fields and other invalid
+   * conditions
+   * @param path path for exceptions
+   * @param record record to validate. May be null
+   * @throws InvalidRecordException on invalid entries
+   */
+  public static void validateServiceRecord(String path, ServiceRecord record)
+      throws InvalidRecordException {
+    if (record == null) {
+      throw new InvalidRecordException(path, "Null record");
+    }
+    if (!ServiceRecord.RECORD_TYPE.equals(record.type)) {
+      throw new InvalidRecordException(path,
+          "invalid record type field: \"" + record.type + "\"");
+    }
+
+    if (record.external != null) {
+      for (Endpoint endpoint : record.external) {
+        validateEndpoint(path, endpoint);
+      }
+    }
+    if (record.internal != null) {
+      for (Endpoint endpoint : record.internal) {
+        validateEndpoint(path, endpoint);
+      }
+    }
+  }
+
+  /**
+   * Validate the endpoint by checking for null fields and other invalid
+   * conditions
+   * @param path path for exceptions
+   * @param endpoint endpoint to validate. May be null
+   * @throws InvalidRecordException on invalid entries
+   */
+  public static void validateEndpoint(String path, Endpoint endpoint)
+      throws InvalidRecordException {
+    if (endpoint == null) {
+      throw new InvalidRecordException(path, "Null endpoint");
+    }
+    try {
+      endpoint.validate();
+    } catch (RuntimeException e) {
+      throw new InvalidRecordException(path, e.toString());
+    }
+  }
+

MOV26 INS26 INS26 MOV31 MOV31 MOV31 INS40 INS40 UPD40 INS31 INS31 INS31 INS31 INS31 MOV29 MOV83 MOV83 MOV43 MOV42 MOV44 MOV44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 MOV44 MOV8 MOV29 MOV83 MOV83 UPD74 MOV74 INS42 MOV44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS42 MOV44 MOV8 INS43 INS42 INS44 INS44 INS43 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS43 INS8 INS43 INS42 INS41 INS65 INS65 INS65 INS65 UPD43 MOV43 MOV43 INS43 INS43 INS42 UPD42 MOV21 UPD43 UPD43 MOV43 MOV43 UPD42 INS41 INS65 INS65 INS65 INS65 UPD43 MOV43 UPD43 MOV43 MOV43 INS43 INS42 INS39 INS42 INS60 INS21 MOV41 INS65 INS65 INS65 INS43 MOV43 INS43 INS65 INS65 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS65 INS65 UPD65 INS43 INS42 UPD43 UPD42 UPD42 MOV42 INS25 INS25 INS25 INS25 INS65 UPD65 INS43 INS42 INS43 INS42 INS42 INS25 INS54 INS42 INS14 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 INS42 INS42 UPD74 INS42 UPD66 UPD42 UPD66 UPD66 UPD42 UPD42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 UPD42 UPD42 MOV42 INS74 INS59 MOV32 UPD42 INS66 INS42 INS66 INS66 INS66 INS42 INS42 UPD74 UPD66 UPD66 UPD42 UPD66 INS42 INS66 UPD66 INS42 INS66 UPD43 MOV43 MOV43 INS43 INS42 INS43 INS59 INS27 INS8 INS42 UPD66 MOV66 UPD66 MOV66 INS42 UPD66 MOV66 UPD42 UPD66 INS42 UPD66 MOV42 UPD42 INS27 INS8 INS38 INS8 INS27 INS8 INS27 INS8 UPD66 UPD66 UPD42 UPD66 INS42 INS66 INS42 UPD66 MOV42 INS42 INS27 INS8 INS8 INS12 INS42 INS32 MOV43 INS42 INS42 INS40 INS16 UPD43 UPD43 MOV43 MOV43 UPD42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD43 MOV43 MOV43 INS43 INS42 INS32 INS42 UPD42 UPD42 UPD42 INS42 UPD74 UPD74 UPD42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS33 INS53 INS32 INS53 INS40 INS33 MOV70 INS40 INS33 INS70 INS42 INS33 INS53 INS21 INS44 INS8 INS42 INS42 INS42 INS27 INS33 INS32 UPD42 UPD42 UPD74 INS34 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD43 INS43 UPD43 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 INS14 INS40 INS42 INS40 INS14 INS40 INS44 INS40 INS8 INS14 INS32 INS43 INS42 INS53 INS42 INS33 INS42 INS42 UPD43 UPD43 MOV43 MOV43 UPD42 INS42 UPD42 INS42 MOV43 INS45 INS27 INS43 INS42 INS45 INS43 INS42 INS27 UPD43 UPD42 INS43 INS42 INS21 INS43 INS42 INS45 INS42 INS42 INS42 INS14 UPD42 UPD42 INS42 UPD42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS40 INS45 UPD42 INS42 INS32 INS42 INS43 INS42 INS32 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL42 DEL66 DEL66 DEL65 DEL39 DEL42 DEL74 DEL74 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL40 DEL42 DEL40 DEL40 DEL16 DEL42 DEL14 DEL66 DEL66 DEL74 DEL74 DEL42 DEL44 DEL31 DEL42 DEL74 DEL74 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL40 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL34 DEL66 DEL74 DEL42 DEL32 DEL41 DEL65 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL43 DEL43 DEL74 DEL42 DEL43 DEL74 DEL40 DEL14 DEL59 DEL60 DEL42 DEL41 DEL8 DEL42 DEL43 DEL43 DEL74 DEL42