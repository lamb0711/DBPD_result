YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)

+
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.PendingAsk;
-      SchedulerRequestKey schedulerKey, ResourceRequest request,
-      Container container) {
+      SchedulerRequestKey schedulerKey, Container container) {
-      if (getTotalRequiredResources(schedulerKey) <= 0) {
+      if (getOutstandingAsksCount(schedulerKey) <= 0) {
+        return null;
+      }
+
+      SchedulingPlacementSet<FiCaSchedulerNode> ps =
+          appSchedulingInfo.getSchedulingPlacementSet(schedulerKey);
+      if (null == ps) {
+        LOG.warn("Failed to get " + SchedulingPlacementSet.class.getName()
+            + " for application=" + getApplicationId() + " schedulerRequestKey="
+            + schedulerKey);
-          request.getNodeLabelExpression());
+          ps.getPrimaryRequestedNodePartition());
-  public synchronized Map<String, Resource> getTotalPendingRequestsPerPartition() {
+  public Map<String, Resource> getTotalPendingRequestsPerPartition() {
+    try {
+      readLock.lock();
-    Map<String, Resource> ret = new HashMap<String, Resource>();
-    Resource res = null;
-    for (SchedulerRequestKey key : appSchedulingInfo.getSchedulerKeys()) {
-      ResourceRequest rr = appSchedulingInfo.getResourceRequest(key, "*");
-      if ((res = ret.get(rr.getNodeLabelExpression())) == null) {
-        res = Resources.createResource(0, 0);
-        ret.put(rr.getNodeLabelExpression(), res);
+      Map<String, Resource> ret = new HashMap<>();
+      for (SchedulerRequestKey schedulerKey : appSchedulingInfo
+          .getSchedulerKeys()) {
+        SchedulingPlacementSet<FiCaSchedulerNode> ps =
+            appSchedulingInfo.getSchedulingPlacementSet(schedulerKey);
+
+        String nodePartition = ps.getPrimaryRequestedNodePartition();
+        Resource res = ret.get(nodePartition);
+        if (null == res) {
+          res = Resources.createResource(0);
+          ret.put(nodePartition, res);
+        }
+
+        PendingAsk ask = ps.getPendingAsk(ResourceRequest.ANY);
+        if (ask.getCount() > 0) {
+          Resources.addTo(res, Resources
+              .multiply(ask.getPerAllocationResource(),
+                  ask.getCount()));
+        }
-      Resources.addTo(res,
-          Resources.multiply(rr.getCapability(), rr.getNumContainers()));
+      return ret;
+    } finally {
+      readLock.unlock();
-    return ret;
+

INS26 INS40 INS8 INS54 INS8 INS8 INS60 INS25 INS21 MOV60 MOV70 MOV41 INS21 INS74 INS59 INS27 INS8 INS32 INS32 INS43 INS43 INS42 INS32 INS33 INS42 INS21 INS41 INS42 INS42 UPD42 INS60 INS60 INS25 INS60 INS25 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 UPD74 INS74 MOV43 INS59 MOV43 INS59 INS27 MOV8 INS43 INS59 INS27 INS8 INS42 INS42 INS27 UPD42 UPD42 INS43 INS43 UPD42 INS42 INS32 INS42 INS32 MOV33 INS42 INS42 INS42 INS32 INS32 INS34 MOV21 INS45 INS32 INS45 INS32 INS45 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS40 INS42 INS42 INS57 INS42 INS42 UPD42 MOV42 INS43 INS42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL43 DEL45 DEL34 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL36 DEL27 DEL25 DEL42 DEL33 DEL59 DEL60 DEL8