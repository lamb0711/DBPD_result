YARN-2314. Disable ContainerManagementProtocolProxy cache by default to prevent creating thousands of threads in a large cluster. Contributed by Jason Lowe

+import java.util.Collections;
+import java.util.Map;
+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
-  private final LinkedHashMap<String, ContainerManagementProtocolProxyData> cmProxy;
+  private final Map<String, ContainerManagementProtocolProxyData> cmProxy;
-    if (maxConnectedNMs < 1) {
+    if (maxConnectedNMs < 0) {
-              + " (" + maxConnectedNMs + ") can not be less than 1.");
+              + " (" + maxConnectedNMs + ") can not be less than 0.");
-    cmProxy =
-        new LinkedHashMap<String, ContainerManagementProtocolProxyData>();
+    if (maxConnectedNMs > 0) {
+      cmProxy =
+          new LinkedHashMap<String, ContainerManagementProtocolProxyData>();
+    } else {
+      cmProxy = Collections.emptyMap();
+      // Connections are not being cached so ensure connections close quickly
+      // to avoid creating thousands of RPC client threads on large clusters.
+      conf.setInt(
+          CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,
+          0);
+    }
-      if (cmProxy.size() > maxConnectedNMs) {
-        // Number of existing proxy exceed the limit.
-        String cmAddr = cmProxy.keySet().iterator().next();
-        removeProxy(cmProxy.get(cmAddr));
+      if (maxConnectedNMs > 0) {
+        addProxyToCache(containerManagerBindAddr, proxy);
-      
-      cmProxy.put(containerManagerBindAddr, proxy);
+
+  private void addProxyToCache(String containerManagerBindAddr,
+      ContainerManagementProtocolProxyData proxy) {
+    while (cmProxy.size() >= maxConnectedNMs) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Cleaning up the proxy cache, size=" + cmProxy.size()
+            + " max=" + maxConnectedNMs);
+      }
+      boolean removedProxy = false;
+      for (ContainerManagementProtocolProxyData otherProxy : cmProxy.values()) {
+        removedProxy = removeProxy(otherProxy);
+        if (removedProxy) {
+          break;
+        }
+      }
+      if (!removedProxy) {
+        // all of the proxies are currently in use and already scheduled
+        // for removal, so we need to wait until at least one of them closes
+        try {
+          this.wait();
+        } catch (InterruptedException e) {
+          e.printStackTrace();
+        }
+      }
+    }
+
+    if (maxConnectedNMs > 0) {
+      cmProxy.put(containerManagerBindAddr, proxy);
+    }
+  }
-    ContainerManagementProtocolProxyData proxy =
-        cmProxy.remove(containerManagerBindAddr);
-    cmProxy.put(containerManagerBindAddr, proxy);
+    if (maxConnectedNMs > 0) {
+      ContainerManagementProtocolProxyData proxy =
+          cmProxy.remove(containerManagerBindAddr);
+      cmProxy.put(containerManagerBindAddr, proxy);
+    }
+    tryCloseProxy(proxy);
+  }
+
+  private boolean tryCloseProxy(
+      ContainerManagementProtocolProxyData proxy) {
+      return true;
+    return false;
-  private synchronized void removeProxy(
+  private synchronized boolean removeProxy(
-      mayBeCloseProxy(proxy);
+      return tryCloseProxy(proxy);
+    return false;

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 UPD74 INS83 INS39 INS42 INS44 INS44 INS8 INS8 INS83 INS83 INS39 INS42 INS44 INS8 UPD83 UPD39 UPD42 UPD39 UPD43 INS25 INS43 INS42 INS43 INS42 INS61 INS25 INS25 INS43 INS42 INS21 INS41 INS41 UPD42 INS27 INS8 INS8 INS42 INS42 UPD27 MOV27 INS8 INS27 INS8 INS27 MOV8 INS42 INS32 INS9 INS9 UPD34 INS42 INS34 MOV21 INS21 INS21 INS25 INS60 INS70 INS25 INS42 INS34 MOV21 INS42 INS34 INS42 INS42 INS41 INS41 INS7 INS32 INS27 INS8 INS32 INS8 INS39 INS59 INS44 INS32 INS8 INS38 INS8 INS9 INS32 INS42 INS32 INS42 INS42 INS40 INS34 INS42 INS34 MOV21 INS42 INS42 INS21 INS42 INS9 INS43 INS42 INS42 INS42 INS21 INS25 INS42 INS54 UPD42 MOV42 MOV42 UPD45 INS42 INS42 INS32 INS42 INS7 INS42 INS8 INS8 INS12 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS42 INS32 INS10 INS21 INS44 INS8 INS45 INS32 INS45 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL83 DEL32 DEL21