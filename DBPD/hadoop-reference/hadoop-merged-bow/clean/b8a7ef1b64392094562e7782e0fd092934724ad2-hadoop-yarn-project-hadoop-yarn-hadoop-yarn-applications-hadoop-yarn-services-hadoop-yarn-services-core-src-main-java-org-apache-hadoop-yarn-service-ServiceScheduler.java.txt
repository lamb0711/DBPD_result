YARN-6744. Recover component information on YARN native services AM restart. Contributed by Billie Rinaldi

-import org.apache.hadoop.registry.client.binding.RegistryTypeUtils;
+import org.apache.hadoop.registry.client.binding.RegistryPathUtils;
-    // Cleanup each component instance. no need to release containers as
-    // they will be automatically released by RM
-    for (ComponentInstance instance : liveInstances.values()) {
-      instance.cleanupRegistryAndCompHdfsDir();
-    }
-    //TODO handle containers recover
+    // recover components based on containers sent from RM
+    recoverComponents(response);
+
+    for (Component component : componentsById.values()) {
+      // Trigger initial evaluation of components
+      if (component.areDependenciesReady()) {
+        LOG.info("Triggering initial evaluation of component {}",
+            component.getName());
+        ComponentEvent event = new ComponentEvent(component.getName(), FLEX)
+            .setDesired(component.getComponentSpec().getNumberOfContainers());
+        component.handle(event);
+      }
+    }
-  private void recover() {
-
+  private void recoverComponents(RegisterApplicationMasterResponse response) {
+    List<Container> recoveredContainers = response
+        .getContainersFromPreviousAttempts();
+    LOG.info("Received {} containers from previous attempt.",
+        recoveredContainers.size());
+    Map<String, ServiceRecord> existingRecords = new HashMap<>();
+    List<String> existingComps = null;
+    try {
+      existingComps = yarnRegistryOperations.listComponents();
+      LOG.info("Found {} containers from ZK registry: {}", existingComps.size(),
+          existingComps);
+    } catch (Exception e) {
+      LOG.info("Could not read component paths: {}", e.getMessage());
+    }
+    if (existingComps != null) {
+      for (String existingComp : existingComps) {
+        try {
+          ServiceRecord record =
+              yarnRegistryOperations.getComponent(existingComp);
+          existingRecords.put(existingComp, record);
+        } catch (Exception e) {
+          LOG.warn("Could not resolve record for component {}: {}",
+              existingComp, e);
+        }
+      }
+    }
+    for (Container container : recoveredContainers) {
+      LOG.info("Handling container {} from previous attempt",
+          container.getId());
+      ServiceRecord record = existingRecords.get(RegistryPathUtils
+          .encodeYarnID(container.getId().toString()));
+      if (record != null) {
+        Component comp = componentsById.get(container.getAllocationRequestId());
+        ComponentEvent event =
+            new ComponentEvent(comp.getName(), CONTAINER_RECOVERED)
+                .setContainer(container)
+                .setInstance(comp.getComponentInstance(record.description));
+        comp.handle(event);
+        // do not remove requests in this case because we do not know if they
+        // have already been removed
+      } else {
+        LOG.info("Record not found in registry for container {} from previous" +
+            " attempt, releasing", container.getId());
+        amRMClient.releaseAssignedContainer(container.getId());
+      }
+    }
-          yarnRegistryOperations.registerSelf(serviceRecord, true);
+          yarnRegistryOperations.registerSelf(serviceRecord, false);
-
-      // Trigger the component without dependencies
-      if (component.areDependenciesReady()) {
-        ComponentEvent event = new ComponentEvent(compSpec.getName(), FLEX)
-            .setDesired(compSpec.getNumberOfContainers());
-        component.handle(event);
-      }
-        LOG.info("[COMPONENT {}]: {} outstanding container requests.",
-            comp.getName(),
-            amRMClient.getMatchingRequests(container.getAllocationRequestId()).size());
-        // remove the corresponding request
-        Collection<AMRMClient.ContainerRequest> collection = amRMClient
+        Collection<AMRMClient.ContainerRequest> requests = amRMClient
-        if (collection.iterator().hasNext()) {
-          AMRMClient.ContainerRequest request = collection.iterator().next();
+        LOG.info("[COMPONENT {}]: {} outstanding container requests.",
+            comp.getName(), requests.size());
+        // remove the corresponding request
+        if (requests.iterator().hasNext()) {
+          LOG.info("[COMPONENT {}]: removing one container request.", comp
+              .getName());
+          AMRMClient.ContainerRequest request = requests.iterator().next();
-
-          LOG.error(
+          LOG.warn(

UPD40 UPD42 INS44 INS8 INS21 INS70 INS43 INS42 INS60 INS21 INS60 INS60 INS54 INS25 INS70 INS32 INS44 INS32 INS8 INS42 INS74 INS59 INS32 INS74 INS59 INS74 INS59 INS8 INS12 INS27 INS8 INS44 INS42 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS25 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS32 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS33 INS21 INS21 INS44 INS8 INS42 INS33 INS70 INS43 INS42 INS21 INS60 INS25 MOV21 INS42 MOV32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS7 INS32 INS43 INS42 INS21 INS44 INS42 INS8 INS42 INS32 INS43 INS59 INS27 INS8 INS8 INS21 INS60 MOV21 INS43 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS43 INS42 INS54 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS21 INS21 INS21 INS32 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS32 INS43 INS59 MOV43 INS59 INS32 INS32 INS32 UPD42 INS21 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 INS32 INS42 INS42 INS14 INS42 INS32 INS43 INS59 INS32 INS43 INS42 INS21 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 UPD42 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 MOV43 INS32 INS42 UPD42 INS42 INS42 UPD9 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL32