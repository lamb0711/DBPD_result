YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).

+import org.apache.hadoop.registry.client.api.RegistryOperations;
-import org.apache.hadoop.service.AbstractService;
+import org.apache.hadoop.service.CompositeService;
+import org.apache.hadoop.yarn.server.api.ContainerType;
+import org.apache.hadoop.yarn.server.federation.utils.FederationStateStoreFacade;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.container.Container;
+import org.apache.hadoop.yarn.util.ConverterUtils;
-public class AMRMProxyService extends AbstractService implements
+public class AMRMProxyService extends CompositeService implements
+  private RegistryOperations registry;
-    super.serviceInit(conf);
+
+    // Both second app attempt and NM restart within Federation need registry
+    if (conf.getBoolean(YarnConfiguration.AMRM_PROXY_HA_ENABLED,
+        YarnConfiguration.DEFAULT_AMRM_PROXY_HA_ENABLED)
+        || conf.getBoolean(YarnConfiguration.NM_RECOVERY_ENABLED,
+            YarnConfiguration.DEFAULT_NM_RECOVERY_ENABLED)) {
+      this.registry = FederationStateStoreFacade.createInstance(conf,
+          YarnConfiguration.YARN_REGISTRY_CLASS,
+          YarnConfiguration.DEFAULT_YARN_REGISTRY_CLASS,
+          RegistryOperations.class);
+      addService(this.registry);
+    }
+
+    super.serviceInit(conf);
+            // Clear the service field, as if RM just issued the token
+            amrmToken.setService(new Text());
+        // Regenerate the local AMRMToken for the AM
+        // Retrieve the AM container credentials from NM context
+        Credentials amCred = null;
+        for (Container container : this.nmContext.getContainers().values()) {
+          LOG.debug("From NM Context container " + container.getContainerId());
+          if (container.getContainerId().getApplicationAttemptId().equals(
+              attemptId) && container.getContainerTokenIdentifier() != null) {
+            LOG.debug("Container type "
+                + container.getContainerTokenIdentifier().getContainerType());
+            if (container.getContainerTokenIdentifier()
+                .getContainerType() == ContainerType.APPLICATION_MASTER) {
+              LOG.info("AM container {} found in context, has credentials: {}",
+                  container.getContainerId(),
+                  (container.getCredentials() != null));
+              amCred = container.getCredentials();
+            }
+          }
+        }
+        if (amCred == null) {
+          LOG.error("No credentials found for AM container of {}. "
+              + "Yarn registry access might not work", attemptId);
+        }
+
+        // Create the intercepter pipeline for the AM
-            entry.getValue(), true);
-      } catch (Exception e) {
+            entry.getValue(), true, amCred);
+      } catch (IOException e) {
-        localToken, null, false);
+        localToken, null, false, credentials);
-      Map<String, byte[]> recoveredDataMap, boolean isRecovery) {
+      Map<String, byte[]> recoveredDataMap, boolean isRecovery,
+      Credentials credentials) {
-      interceptorChain.init(createApplicationMasterContext(this.nmContext,
-          applicationAttemptId, user, amrmToken, localToken));
+      interceptorChain.init(
+          createApplicationMasterContext(this.nmContext, applicationAttemptId,
+              user, amrmToken, localToken, credentials, this.registry));
-          new org.apache.hadoop.security.token.Token<AMRMTokenIdentifier>(
-              token.getIdentifier().array(), token.getPassword().array(),
-              new Text(token.getKind()), new Text(token.getService()));
+          ConverterUtils.convertFromYarn(token, (Text) null);
-      context.setAMRMToken(newToken);
-
-      // Update the AMRMToken in context map in NM state store
-      if (this.nmContext.getNMStateStore() != null) {
+      // Update the AMRMToken in context map, and in NM state store if it is
+      // different
+      if (context.setAMRMToken(newToken)
+          && this.nmContext.getNMStateStore() != null) {
-      Token<AMRMTokenIdentifier> localToken) {
+      Token<AMRMTokenIdentifier> localToken, Credentials credentials,
+      RegistryOperations registryImpl) {
-            applicationAttemptId, user, amrmToken, localToken);
+            applicationAttemptId, user, amrmToken, localToken, credentials,
+            registryImpl);

INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 UPD43 INS23 UPD42 INS83 INS43 INS59 MOV21 INS44 INS44 INS44 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS27 INS8 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS7 INS32 MOV74 INS27 INS42 INS42 INS22 INS32 INS42 INS22 INS60 INS70 INS25 INS32 MOV32 MOV27 INS52 INS42 INS42 INS42 INS42 INS40 INS40 INS57 INS52 INS42 INS43 INS59 INS44 INS32 INS8 INS27 INS8 UPD43 INS42 INS22 UPD42 MOV42 UPD42 MOV42 MOV42 INS11 INS43 INS42 INS42 INS33 INS43 INS42 INS32 INS42 INS21 INS25 INS42 INS33 INS21 INS42 UPD42 INS52 INS42 MOV43 INS33 INS42 INS42 INS22 INS42 INS32 INS27 INS8 INS32 INS52 INS42 INS42 INS42 INS27 INS32 INS27 INS21 INS25 INS42 INS42 INS27 INS42 INS21 INS45 INS32 INS32 INS42 INS42 INS32 INS33 INS32 INS27 INS8 INS45 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS40 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS45 INS32 INS32 INS42 INS32 INS7 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS36 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS33 INS42 INS42 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL14 DEL42 DEL42 DEL32 DEL14 DEL14 DEL21