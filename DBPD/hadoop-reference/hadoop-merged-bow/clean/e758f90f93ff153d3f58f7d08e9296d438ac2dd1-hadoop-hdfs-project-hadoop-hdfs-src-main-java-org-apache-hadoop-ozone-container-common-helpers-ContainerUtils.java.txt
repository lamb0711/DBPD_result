HDFS-10195. Ozone: Add container persistence. Contributed by Anu Engineer.

+import org.apache.commons.io.FileUtils;
+import org.apache.hadoop.fs.FileAlreadyExistsException;
+import org.apache.hadoop.ozone.OzoneConsts;
+import org.apache.hadoop.ozone.container.common.impl.ContainerManagerImpl;
+import org.apache.hadoop.ozone.container.common.utils.LevelDBStore;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+import static org.apache.commons.io.FilenameUtils.removeExtension;
+import static org.apache.hadoop.ozone.OzoneConsts.CONTAINER_EXTENSION;
+import static org.apache.hadoop.ozone.OzoneConsts.CONTAINER_META;
+  /**
+   * get containerName from a container file.
+   *
+   * @param containerFile - File
+   * @return Name of the container.
+   */
+  public static String getContainerNameFromFile(File containerFile) {
+    Preconditions.checkNotNull(containerFile);
+    return Paths.get(containerFile.getParent()).resolve(
+        removeExtension(containerFile.getName())).toString();
+
+  }
+
+  /**
+   * Verifies that this in indeed a new container.
+   *
+   * @param containerFile - Container File to verify
+   * @param metadataFile  - metadata File to verify
+   * @throws IOException
+   */
+  public static void verifyIsNewContainer(File containerFile, File metadataFile)
+      throws IOException {
+    Logger log = LoggerFactory.getLogger(ContainerManagerImpl.class);
+    if (containerFile.exists()) {
+      log.error("container already exists on disk. File: {}",
+          containerFile.toPath());
+      throw new FileAlreadyExistsException("container already exists on " +
+          "disk.");
+    }
+
+    if (metadataFile.exists()) {
+      log.error("metadata found on disk, but missing container. Refusing to" +
+          " write this container. File: {} ", metadataFile.toPath());
+      throw new FileAlreadyExistsException(("metadata found on disk, but " +
+          "missing container. Refusing to write this container."));
+    }
+
+    File parentPath = new File(containerFile.getParent());
+
+    if (!parentPath.exists() && !parentPath.mkdirs()) {
+      log.error("Unable to create parent path. Path: {}",
+          parentPath.toString());
+      throw new IOException("Unable to create container directory.");
+    }
+
+    if (!containerFile.createNewFile()) {
+      log.error("creation of a new container file failed. File: {}",
+          containerFile.toPath());
+      throw new IOException("creation of a new container file failed.");
+    }
+
+    if (!metadataFile.createNewFile()) {
+      log.error("creation of the metadata file failed. File: {}",
+          metadataFile.toPath());
+      throw new IOException("creation of a new container file failed.");
+    }
+  }
+
+  /**
+   * creates a Metadata DB for the specified container.
+   *
+   * @param containerPath - Container Path.
+   * @throws IOException
+   */
+  public static Path createMetadata(Path containerPath) throws IOException {
+    Preconditions.checkNotNull(containerPath);
+    containerPath = containerPath.resolve(OzoneConsts.CONTAINER_META_PATH);
+    if (!containerPath.toFile().mkdirs()) {
+      throw new IOException("Unable to create directory for metadata storage." +
+          " Path {}" + containerPath);
+    }
+    containerPath = containerPath.resolve(OzoneConsts.CONTAINER_DB);
+    LevelDBStore store = new LevelDBStore(containerPath.toFile(), true);
+
+    // we close since the SCM pre-creates containers.
+    // we will open and put Db handle into a cache when keys are being created
+    // in a container.
+
+    store.close();
+    return containerPath;
+  }
+
+  /**
+   * remove Container if it is empty.
+   * <p/>
+   * There are three things we need to delete.
+   * <p/>
+   * 1. Container file and metadata file. 2. The Level DB file 3. The path that
+   * we created on the data location.
+   *
+   * @param containerData - Data of the container to remove.
+   * @throws IOException
+   */
+  public static void removeContainer(ContainerData containerData) throws
+      IOException {
+    Preconditions.checkNotNull(containerData);
+
+    // TODO : Check if there are any keys. This needs to be done
+    // by calling into key layer code, hence this is a TODO for now.
+
+    Path dbPath = Paths.get(containerData.getDBPath());
+
+    // Delete the DB File.
+    FileUtils.forceDelete(dbPath.toFile());
+    dbPath = dbPath.getParent();
+
+    // Delete all Metadata in the Data directories for this containers.
+    if (dbPath != null) {
+      FileUtils.deleteDirectory(dbPath.toFile());
+      dbPath = dbPath.getParent();
+    }
+
+    // now delete the container directory, this means that all key data dirs
+    // will be removed too.
+    if (dbPath != null) {
+      FileUtils.deleteDirectory(dbPath.toFile());
+    }
+
+    // Delete the container metadata from the metadata locations.
+    String rootPath = getContainerNameFromFile(new File(containerData
+        .getContainerPath()));
+    Path containerPath = Paths.get(rootPath.concat(CONTAINER_EXTENSION));
+    Path metaPath = Paths.get(rootPath.concat(CONTAINER_META));
+
+    FileUtils.forceDelete(containerPath.toFile());
+    FileUtils.forceDelete(metaPath.toFile());
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS42 INS43 INS42 INS21 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS25 INS60 INS25 INS25 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS21 INS21 INS25 INS21 INS60 INS21 INS41 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS60 INS21 INS21 INS25 INS25 INS60 INS60 INS60 INS21 INS21 INS66 INS42 INS66 INS66 INS42 INS32 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS32 INS8 INS43 INS59 INS27 INS8 INS38 INS8 INS38 INS8 INS66 INS42 INS66 INS42 INS42 INS32 INS7 INS38 INS8 INS7 INS43 INS59 INS32 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS32 INS43 INS59 INS32 INS7 INS27 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS53 INS42 INS42 INS21 INS53 INS42 INS42 INS14 INS38 INS38 INS21 INS53 INS32 INS21 INS53 INS32 INS21 INS53 INS42 INS42 INS42 INS42 INS32 INS32 INS53 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS57 INS32 INS14 INS32 INS14 INS43 INS32 INS32 INS32 INS32 INS14 INS42 INS42 INS32 INS14 INS42 INS42 INS32 INS14 INS42 INS42 INS40 INS32 INS42 INS14 INS42 INS42 INS40 INS43 INS32 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS45 INS32 INS43 INS27 INS42 INS42 INS27 INS32 INS43 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS43 INS45 INS42 INS42 INS45 INS32 INS43 INS45 INS42 INS42 INS45 INS32 INS43 INS45 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45