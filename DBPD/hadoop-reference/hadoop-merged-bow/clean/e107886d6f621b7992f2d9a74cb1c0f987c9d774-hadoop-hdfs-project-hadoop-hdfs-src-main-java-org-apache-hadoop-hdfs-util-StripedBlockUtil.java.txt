HDFS-8190. StripedBlockUtil.getInternalBlockLength may have overflow error.

+import com.google.common.base.Preconditions;
+
-   * @param numBytesInGroup Size of the block group only counting data blocks
+   * @param dataSize Size of the block group only counting data blocks
-   * @param dataBlkNum The number of data blocks
-   * @param idxInGroup The logical index in the striped block group
+   * @param numDataBlocks The number of data blocks
+   * @param i The logical index in the striped block group
-  public static long getInternalBlockLength(long numBytesInGroup,
-      int cellSize, int dataBlkNum, int idxInGroup) {
+  public static long getInternalBlockLength(long dataSize,
+      int cellSize, int numDataBlocks, int i) {
+    Preconditions.checkArgument(dataSize >= 0);
+    Preconditions.checkArgument(cellSize > 0);
+    Preconditions.checkArgument(numDataBlocks > 0);
+    Preconditions.checkArgument(i >= 0);
-    final long numBytesPerStripe = cellSize * dataBlkNum;
-    assert numBytesPerStripe  > 0:
-        "getInternalBlockLength should only be called on valid striped blocks";
+    final int stripeSize = cellSize * numDataBlocks;
-    if (numBytesInGroup % numBytesPerStripe == 0) {
-      return numBytesInGroup / dataBlkNum;
+    final int lastStripeDataLen = (int)(dataSize % stripeSize);
+    if (lastStripeDataLen == 0) {
+      return dataSize / numDataBlocks;
-    int numStripes = (int) ((numBytesInGroup - 1) / numBytesPerStripe + 1);
-    assert numStripes >= 1 : "There should be at least 1 stripe";
-
-    // All stripes but the last one are full stripes. The block should at least
-    // contain (numStripes - 1) full cells.
-    long blkSize = (numStripes - 1) * cellSize;
-
-    long lastStripeLen = numBytesInGroup % numBytesPerStripe;
-    // Size of parity cells should equal the size of the first cell, if it
-    // is not full.
-    long lastParityCellLen = Math.min(cellSize, lastStripeLen);
-
-    if (idxInGroup >= dataBlkNum) {
-      // for parity blocks
-      blkSize += lastParityCellLen;
-    } else {
-      // for data blocks
-      blkSize +=  Math.min(cellSize,
-          Math.max(0, lastStripeLen - cellSize * idxInGroup));
+    final int numStripes = (int) ((dataSize - 1) / stripeSize + 1);
+    return (numStripes - 1L)*cellSize
+        + lastCellSize(lastStripeDataLen, cellSize, numDataBlocks, i);
+  }
+  
+  private static int lastCellSize(int size, int cellSize, int numDataBlocks,
+      int i) {
+    if (i < numDataBlocks) {
+      // parity block size (i.e. i >= numDataBlocks) is the same as 
+      // the first data block size (i.e. i = 0).
+      size -= i*cellSize;
+      if (size < 0) {
+        size = 0;
+      }
-
-    return blkSize;
+    return size > cellSize? cellSize: size;

INS26 INS40 INS31 INS31 MOV29 MOV83 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 UPD42 UPD42 UPD42 INS21 INS21 INS21 INS21 MOV60 INS60 MOV25 MOV60 INS41 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS25 INS41 UPD42 UPD42 UPD42 INS32 INS32 INS32 INS32 UPD39 INS83 INS39 INS59 INS83 INS27 UPD27 MOV27 INS8 INS16 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 UPD42 INS42 INS11 UPD42 MOV42 INS27 INS32 UPD42 UPD42 MOV21 INS25 INS27 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 UPD42 INS39 INS36 MOV36 MOV42 INS42 INS42 INS42 INS42 INS42 UPD7 INS27 INS8 UPD42 MOV42 MOV42 INS27 UPD42 UPD42 UPD42 INS27 INS42 INS34 INS21 INS42 UPD42 MOV42 UPD34 INS42 INS42 INS7 UPD42 INS42 INS34 UPD42 DEL42 DEL27 DEL42 DEL34 DEL27 DEL45 DEL6 DEL42 DEL34 DEL27 DEL45 DEL6 DEL39 DEL42 DEL27 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL27 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL42 DEL27 DEL27 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31