HDFS-4503. Update computeContentSummary(..), spaceConsumedInTree(..) and diskspaceConsumed(..) in INode for snapshot.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448373 13f79535-47bb-0310-9956-ffa450edef68

-      updateCount(inodesInPath, 0,
-          fileINode.getPreferredBlockSize()*fileINode.getFileReplication(), true);
+      updateCount(inodesInPath, 0, 0, fileINode.getBlockDiskspace(), true);
-    updateCount(iip, 0,
-        -fileNode.getPreferredBlockSize()*fileNode.getFileReplication(), true);
+    updateCount(iip, 0, 0, -fileNode.getBlockDiskspace(), true);
-      NameNode.LOG.warn("FSDirectory.updateCountNoQuotaCheck - unexpected ", e);
+      NameNode.LOG.error("BUG: unexpected exception ", e);
-   * @param inodes
-   * @param numOfINodes
-   * @param nsDelta
-   * @param dsDelta
-  private void unprotectedUpdateCount(INodesInPath inodesInPath,
+  private static void unprotectedUpdateCount(INodesInPath inodesInPath,
-    assert hasWriteLock();
-  private static String getFullPathName(INode[] inodes, int pos) {
+  static String getFullPathName(INode[] inodes, int pos) {
-  private void verifyQuota(INode[] inodes, int pos, long nsDelta, long dsDelta,
-      INode commonAncestor) throws QuotaExceededException {
-    if (!ready) {
-      // Do not check quota if edits log is still being processed
-      return;
-    }
+  private static void verifyQuota(INode[] inodes, int pos, long nsDelta,
+      long dsDelta, INode commonAncestor) throws QuotaExceededException {
-    if (pos>inodes.length) {
-      pos = inodes.length;
-    }
-    int i = pos - 1;
-    try {
-      // check existing components in the path  
-      for(; i >= 0; i--) {
-        if (commonAncestor == inodes[i]) {
-          // Moving an existing node. Stop checking for quota when common
-          // ancestor is reached
-          return;
-        }
-        if (inodes[i].isQuotaSet()) { // a directory with quota
-          INodeDirectoryWithQuota node =(INodeDirectoryWithQuota)inodes[i]; 
-          node.verifyQuota(nsDelta, dsDelta);
+
+    // check existing components in the path
+    for(int i = (pos > inodes.length? inodes.length: pos) - 1; i >= 0; i--) {
+      if (commonAncestor == inodes[i]) {
+        // Stop checking for quota when common ancestor is reached
+        return;
+      }
+      if (inodes[i].isQuotaSet()) { // a directory with quota
+        try {
+          ((INodeDirectoryWithQuota)inodes[i]).verifyQuota(nsDelta, dsDelta);
+        } catch (QuotaExceededException e) {
+          e.setPathName(getFullPathName(inodes, i));
+          throw e;
-    } catch (QuotaExceededException e) {
-      e.setPathName(getFullPathName(inodes, i));
-      throw e;
-   * @param srcInodes directory from where node is being moved.
-   * @param dstInodes directory to where node is moved to.
+   * @param src directory from where node is being moved.
+   * @param dst directory to where node is moved to.
-  private void verifyQuotaForRename(INode[] srcInodes, INode[]dstInodes)
+  private void verifyQuotaForRename(INode[] src, INode[] dst)
-    INode srcInode = srcInodes[srcInodes.length - 1];
-    INode commonAncestor = null;
-    for(int i =0;srcInodes[i] == dstInodes[i]; i++) {
-      commonAncestor = srcInodes[i];
-    }
-    INode.DirCounts srcCounts = new INode.DirCounts();
-    srcInode.spaceConsumedInTree(srcCounts);
-    long nsDelta = srcCounts.getNsCount();
-    long dsDelta = srcCounts.getDsCount();
+    int i = 0;
+    for(; src[i] == dst[i]; i++);
+    // src[i - 1] is the last common ancestor.
+
+    final Quota.Counts delta = src[src.length - 1].computeQuotaUsage();
-    INode dstInode = dstInodes[dstInodes.length - 1];
-    if (dstInode != null) {
-      INode.DirCounts dstCounts = new INode.DirCounts();
-      dstInode.spaceConsumedInTree(dstCounts);
-      nsDelta -= dstCounts.getNsCount();
-      dsDelta -= dstCounts.getDsCount();
+    final int dstIndex = dst.length - 1;
+    if (dst[dstIndex] != null) {
+      delta.subtract(dst[dstIndex].computeQuotaUsage());
-    verifyQuota(dstInodes, dstInodes.length - 1, nsDelta, dsDelta,
-        commonAncestor);
+    verifyQuota(dst, dstIndex, delta.get(Quota.NAMESPACE),
+        delta.get(Quota.DISKSPACE), src[i - 1]);
-    INode.DirCounts counts = new INode.DirCounts();
-    child.spaceConsumedInTree(counts);
-    updateCount(inodesInPath, pos, counts.getNsCount(), counts.getDsCount(), checkQuota);
-    if (inodes[pos-1] == null) {
-      throw new NullPointerException("Panic: parent does not exist");
-    }
+    final Quota.Counts counts = child.computeQuotaUsage();
+    updateCount(inodesInPath, pos,
+        counts.get(Quota.NAMESPACE), counts.get(Quota.DISKSPACE), checkQuota);
-      updateCount(inodesInPath, pos, -counts.getNsCount(), -counts.getDsCount(), true);
+      updateCountNoQuotaCheck(inodesInPath, pos,
+          -counts.get(Quota.NAMESPACE), -counts.get(Quota.DISKSPACE));
-      INode.DirCounts counts = new INode.DirCounts();
-      removedNode.spaceConsumedInTree(counts);
+      final Quota.Counts counts = removedNode.computeQuotaUsage();
-                  -counts.getNsCount(), -counts.getDsCount());
+          -counts.get(Quota.NAMESPACE), -counts.get(Quota.DISKSPACE));
-
-  /** Update the count of each directory with quota in the namespace
-   * A directory's count is defined as the total number inodes in the tree
-   * rooted at the directory.
-   * 
-   * This is an update of existing state of the filesystem and does not
-   * throw QuotaExceededException.
-   */
-  void updateCountForINodeWithQuota() {
-    updateCountForINodeWithQuota(rootDir, new INode.DirCounts(), 
-                                 new ArrayList<INode>(50));
-  }
-  
-  /** 
-   * Update the count of the directory if it has a quota and return the count
-   * 
-   * This does not throw a QuotaExceededException. This is just an update
-   * of of existing state and throwing QuotaExceededException does not help
-   * with fixing the state, if there is a problem.
-   * 
-   * @param dir the root of the tree that represents the directory
-   * @param counters counters for name space and disk space
-   * @param nodesInPath INodes for the each of components in the path.
-   */
-  private static void updateCountForINodeWithQuota(INodeDirectory dir, 
-                                               INode.DirCounts counts,
-                                               ArrayList<INode> nodesInPath) {
-    long parentNamespace = counts.nsCount;
-    long parentDiskspace = counts.dsCount;
-    
-    counts.nsCount = 1L;//for self. should not call node.spaceConsumedInTree()
-    counts.dsCount = 0L;
-    
-    /* We don't need nodesInPath if we could use 'parent' field in 
-     * INode. using 'parent' is not currently recommended. */
-    nodesInPath.add(dir);
-
-    for (INode child : dir.getChildrenList(null)) {
-      if (child.isDirectory()) {
-        updateCountForINodeWithQuota((INodeDirectory)child, 
-                                     counts, nodesInPath);
-      } else if (child.isSymlink()) {
-        counts.nsCount += 1;
-      } else { // reduce recursive calls
-        counts.nsCount += 1;
-        counts.dsCount += ((INodeFile)child).diskspaceConsumed();
-      }
-    }
-      
-    if (dir.isQuotaSet()) {
-      ((INodeDirectoryWithQuota)dir).setSpaceConsumed(counts.nsCount,
-                                                      counts.dsCount);
-
-      // check if quota is violated for some reason.
-      if ((dir.getNsQuota() >= 0 && counts.nsCount > dir.getNsQuota()) ||
-          (dir.getDsQuota() >= 0 && counts.dsCount > dir.getDsQuota())) {
-
-        // can only happen because of a software bug. the bug should be fixed.
-        StringBuilder path = new StringBuilder(512);
-        for (INode n : nodesInPath) {
-          path.append('/');
-          path.append(n.getLocalName());
-        }
-        
-        NameNode.LOG.warn("Quota violation in image for " + path + 
-                          " (Namespace quota : " + dir.getNsQuota() +
-                          " consumed : " + counts.nsCount + ")" +
-                          " (Diskspace quota : " + dir.getDsQuota() +
-                          " consumed : " + counts.dsCount + ").");
-      }            
-    }
-      
-    // pop 
-    nodesInPath.remove(nodesInPath.size()-1);
-    
-    counts.nsCount += parentNamespace;
-    counts.dsCount += parentDiskspace;
-  }
-       size = fileNode.computeFileSize(true, snapshot);
+       size = fileNode.computeFileSize(snapshot);
-        size = fileNode.computeFileSize(true, snapshot);
+        size = fileNode.computeFileSize(snapshot);
+
+        final boolean isUc = fileNode.isUnderConstruction();
+        final long fileSize = snapshot == null && isUc?
+            fileNode.computeFileSizeNotIncludingLastUcBlock(): size;
-            fileNode.getBlocks(), fileNode.computeFileSize(false, snapshot),
-            fileNode.isUnderConstruction(), 0L, size, false);
+            fileNode.getBlocks(), fileSize, isUc, 0L, size, false);

INS31 INS83 INS83 MOV8 MOV29 MOV83 MOV39 MOV42 MOV44 MOV44 MOV43 INS8 MOV25 UPD42 UPD42 MOV25 INS60 INS24 INS60 MOV60 MOV25 INS21 INS60 INS58 UPD42 UPD42 INS39 MOV59 MOV27 MOV37 INS20 INS83 UPD43 MOV43 MOV59 INS83 INS39 INS32 INS83 UPD43 MOV43 INS59 INS34 INS38 INS39 INS59 UPD40 UPD42 UPD42 INS27 INS2 INS21 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS2 UPD40 MOV42 INS32 INS60 INS60 INS60 MOV32 INS42 INS27 UPD42 UPD42 INS2 UPD42 UPD40 MOV40 MOV34 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS27 MOV42 UPD42 MOV42 UPD42 INS40 UPD42 INS40 INS83 UPD43 MOV43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS34 INS32 UPD42 INS36 INS34 INS54 INS42 INS27 INS42 UPD42 MOV42 INS32 INS42 MOV34 UPD42 UPD40 MOV42 INS32 INS42 MOV32 INS42 INS16 MOV42 UPD42 MOV42 UPD42 UPD45 INS16 INS8 MOV12 INS40 INS34 INS2 UPD42 MOV42 MOV42 UPD42 MOV42 INS27 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV27 INS40 INS42 INS21 INS42 INS42 UPD42 INS40 UPD42 INS40 UPD42 INS40 UPD42 INS40 INS27 INS42 INS42 INS42 INS32 MOV21 INS42 INS33 INS36 INS42 INS42 INS42 UPD42 MOV42 MOV32 MOV11 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL38 DEL42 DEL42 DEL32 DEL27 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL32 DEL6 DEL83 DEL43 DEL42 DEL59 DEL60 DEL42 DEL38 DEL41 DEL8 DEL25 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL34 DEL27 DEL59 DEL60 DEL54 DEL8 DEL42 DEL42 DEL43 DEL42 DEL27 DEL2 DEL42 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL58 DEL42 DEL42 DEL42 DEL2 DEL7 DEL21 DEL8 DEL24 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL60 DEL40 DEL34 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL27 DEL2 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL9 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL40 DEL43 DEL14 DEL42 DEL43 DEL42 DEL43 DEL74 DEL34 DEL14 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL42 DEL40 DEL59 DEL60 DEL39 DEL42 DEL40 DEL59 DEL60 DEL40 DEL34 DEL7 DEL21 DEL40 DEL34 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL33 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL40 DEL34 DEL7 DEL21 DEL8 DEL40 DEL34 DEL7 DEL21 DEL40 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL70 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL40 DEL32 DEL21 DEL42 DEL42 DEL32 DEL34 DEL27 DEL40 DEL42 DEL42 DEL32 DEL27 DEL27 DEL36 DEL42 DEL42 DEL32 DEL34 DEL27 DEL40 DEL42 DEL42 DEL32 DEL27 DEL27 DEL36 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL40 DEL42 DEL45 DEL42 DEL45 DEL42 DEL32 DEL45 DEL40 DEL45 DEL45 DEL42 DEL32 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL40 DEL42 DEL7 DEL21 DEL40 DEL42 DEL7 DEL21 DEL8 DEL31 DEL9 DEL9 DEL42 DEL9 DEL32