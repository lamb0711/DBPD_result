YARN-5587. Add support for resource profiles. (vvasudev via asuresh)

+import com.google.common.base.Preconditions;
+import java.util.Map;
+
- * resource types. For example, you could use the "minimum" profile and set the
- * memory in the capability override to 4096M. This implies that you wish for
- * the resources specified in the "minimum" profile but with 4096M memory. The
- * conversion from the ProfileCapability to the Resource class with the actual
- * resource requirements will be done by the ResourceManager, which has the
- * actual profile to Resource mapping.
+ * resource types.
+ *
+ * For example, if you have a resource profile "small" that maps to
+ * {@literal <4096M, 2 cores, 1 gpu>} and you set the capability override to
+ * {@literal <8192M, 0 cores, 0 gpu>}, then the actual resource allocation on
+ * the ResourceManager will be {@literal <8192M, 2 cores, 1 gpu>}.
+ *
+ * Note that the conversion from the ProfileCapability to the Resource class
+ * with the actual resource requirements will be done by the ResourceManager,
+ * which has the actual profile to Resource mapping.
+ *
+  public static final String DEFAULT_PROFILE = "default";
+
+  public static ProfileCapability newInstance(Resource override) {
+    return newInstance(DEFAULT_PROFILE, override);
+  }
+
+  public static ProfileCapability newInstance(String profile) {
+    Preconditions
+        .checkArgument(profile != null, "The profile name cannot be null");
+    ProfileCapability obj = Records.newRecord(ProfileCapability.class);
+    obj.setProfileName(profile);
+    obj.setProfileCapabilityOverride(Resource.newInstance(0, 0));
+    return obj;
+  }
+
+    Preconditions
+        .checkArgument(profile != null, "The profile name cannot be null");
+  /**
+   * Get the profile name.
+   * @return the profile name
+   */
+  /**
+   * Get the profile capability override.
+   * @return Resource object containing the override.
+   */
+  /**
+   * Set the resource profile name.
+   * @param profileName the resource profile name
+   */
+  /**
+   * Set the capability override to override specific resource types on the
+   * resource profile.
+   *
+   * For example, if you have a resource profile "small" that maps to
+   * {@literal <4096M, 2 cores, 1 gpu>} and you set the capability override to
+   * {@literal <8192M, 0 cores, 0 gpu>}, then the actual resource allocation on
+   * the ResourceManager will be {@literal <8192M, 2 cores, 1 gpu>}.
+   *
+   * Note that the conversion from the ProfileCapability to the Resource class
+   * with the actual resource requirements will be done by the ResourceManager,
+   * which has the actual profile to Resource mapping.
+   *
+   * @param r Resource object containing the capability override
+   */
+
+  /**
+   * Get a representation of the capability as a Resource object.
+   * @param capability the capability we wish to convert
+   * @param resourceProfilesMap map of profile name to Resource object
+   * @return Resource object representing the capability
+   */
+  public static Resource toResource(ProfileCapability capability,
+      Map<String, Resource> resourceProfilesMap) {
+    Preconditions
+        .checkArgument(capability != null, "Capability cannot be null");
+    Preconditions.checkArgument(resourceProfilesMap != null,
+        "Resource profiles map cannot be null");
+    Resource resource = Resource.newInstance(0, 0);
+
+    if (resourceProfilesMap.containsKey(capability.getProfileName())) {
+      resource = Resource
+          .newInstance(resourceProfilesMap.get(capability.getProfileName()));
+    }
+
+    if(capability.getProfileCapabilityOverride()!= null) {
+      for (Map.Entry<String, ResourceInformation> entry : capability
+          .getProfileCapabilityOverride().getResources().entrySet()) {
+        if (entry.getValue() != null && entry.getValue().getValue() != 0) {
+          resource.setResourceInformation(entry.getKey(), entry.getValue());
+        }
+      }
+    }
+    return resource;
+  }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS43 INS29 INS43 INS29 INS29 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS66 UPD66 INS65 UPD66 INS65 UPD66 INS66 INS65 INS66 UPD66 UPD66 UPD66 INS42 INS45 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS21 INS60 INS21 INS21 INS41 INS21 INS65 INS65 INS42 INS65 INS65 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS74 INS42 INS21 INS21 INS60 INS25 INS25 INS41 INS66 INS66 INS66 INS42 INS32 INS42 INS32 INS43 INS59 INS32 INS32 INS42 INS32 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS43 MOV43 INS32 INS32 INS43 INS59 INS32 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS32 INS33 INS70 INS42 INS33 INS42 INS42 INS57 INS42 INS42 INS34 INS34 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS42 INS34 INS34 INS42 INS42 INS7 INS42 INS42 INS44 INS32 INS8 INS43 INS42 INS32 INS74 INS42 INS32 INS42 INS25 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS32 INS42 INS27 INS8 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS27 INS27 INS21 INS42 INS42 INS32 INS33 INS32 INS34 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42