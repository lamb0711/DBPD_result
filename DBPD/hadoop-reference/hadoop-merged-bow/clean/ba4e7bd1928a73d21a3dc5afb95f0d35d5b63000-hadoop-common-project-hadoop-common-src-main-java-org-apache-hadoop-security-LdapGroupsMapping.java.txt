HADOOP-16125. Support multiple bind users in LdapGroupsMapping. Contributed by Lukas Majercak.

+import javax.naming.AuthenticationException;
+   * User aliases to bind to the LDAP server with. Each alias will have
+   * to have its username and password configured, see core-default.xml
+   * and GroupsMapping.md for details.
+   */
+  public static final String BIND_USERS_KEY = LDAP_CONFIG_PREFIX +
+      ".bind.users";
+
+  /*
-  public static final String BIND_USER_KEY = LDAP_CONFIG_PREFIX + ".bind.user";
+  public static final String BIND_USER_SUFFIX = ".bind.user";
+  public static final String BIND_USER_KEY = LDAP_CONFIG_PREFIX +
+      BIND_USER_SUFFIX;
-  public static final String BIND_PASSWORD_KEY = LDAP_CONFIG_PREFIX + ".bind.password";
+  public static final String BIND_PASSWORD_SUFFIX = ".bind.password";
+  public static final String BIND_PASSWORD_KEY = LDAP_CONFIG_PREFIX +
+      BIND_PASSWORD_SUFFIX;
-  
-  public static final String BIND_PASSWORD_FILE_KEY = BIND_PASSWORD_KEY + ".file";
+
+  public static final String BIND_PASSWORD_FILE_SUFFIX =
+      BIND_PASSWORD_SUFFIX + ".file";
+  public static final String BIND_PASSWORD_FILE_KEY = LDAP_CONFIG_PREFIX +
+      BIND_PASSWORD_FILE_SUFFIX;
+  public static final String BIND_PASSWORD_ALIAS_SUFFIX =
+      BIND_PASSWORD_SUFFIX + ".alias";
-      BIND_PASSWORD_KEY + ".alias";
+      LDAP_CONFIG_PREFIX + BIND_PASSWORD_ALIAS_SUFFIX;
-  private String bindUser;
-  private String bindPassword;
+
+  /*
+   * Users to bind to when connecting to LDAP. This will be a rotating
+   * iterator, cycling back to the first user if necessary.
+   */
+  private Iterator<BindUserInfo> bindUsers;
+  private BindUserInfo currentBindUser;
+
+      } catch (AuthenticationException e) {
+        switchBindUser(e);
+  /**
+   * Switch to the next available user to bind to.
+   * @param e AuthenticationException encountered when contacting LDAP
+   */
+  protected void switchBindUser(AuthenticationException e) {
+    BindUserInfo oldBindUser = this.currentBindUser;
+    currentBindUser = this.bindUsers.next();
+    if (!oldBindUser.equals(currentBindUser)) {
+      LOG.info("Switched from {} to {} after an AuthenticationException: {}",
+          oldBindUser, currentBindUser, e.getMessage());
+    }
+  }
+
-      env.put(Context.SECURITY_PRINCIPAL, bindUser);
-      env.put(Context.SECURITY_CREDENTIALS, bindPassword);
+      env.put(Context.SECURITY_PRINCIPAL, currentBindUser.username);
+      env.put(Context.SECURITY_CREDENTIALS, currentBindUser.password);
+    this.conf = conf;
-    
-    bindUser = conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);
-    String alias = conf.get(BIND_PASSWORD_ALIAS_KEY,
-        BIND_PASSWORD_ALIAS_DEFAULT);
-    bindPassword = getPasswordFromCredentialProviders(conf, alias, "");
-    if (bindPassword.isEmpty()) {
-      bindPassword = getPassword(conf, BIND_PASSWORD_KEY,
-          BIND_PASSWORD_DEFAULT);
-      if (bindPassword.isEmpty()) {
-        bindPassword = extractPassword(
-            conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));
-      }
-    }
+    initializeBindUsers();
-
-    this.conf = conf;
+
+  private void initializeBindUsers() {
+    List<BindUserInfo> bindUsersConfigured = new ArrayList<>();
+
+    String[] bindUserAliases = conf.getStrings(BIND_USERS_KEY);
+    if (bindUserAliases != null && bindUserAliases.length > 0) {
+
+      for (String bindUserAlias : bindUserAliases) {
+        String userConfPrefix = BIND_USERS_KEY + "." + bindUserAlias;
+        String bindUsername = conf.get(userConfPrefix + BIND_USER_SUFFIX);
+        String bindPassword = getPasswordForBindUser(userConfPrefix);
+
+        if (bindUsername == null || bindPassword == null) {
+          throw new RuntimeException("Bind username or password not " +
+              "configured for user: " + bindUserAlias);
+        }
+        bindUsersConfigured.add(new BindUserInfo(bindUsername, bindPassword));
+      }
+    } else {
+      String bindUsername = conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);
+      String bindPassword = getPasswordForBindUser(LDAP_CONFIG_PREFIX);
+      bindUsersConfigured.add(new BindUserInfo(bindUsername, bindPassword));
+    }
+
+    this.bindUsers = Iterators.cycle(bindUsersConfigured);
+    this.currentBindUser = this.bindUsers.next();
+  }
+
+  private String getPasswordForBindUser(String keyPrefix) {
+    String password;
+    String alias = conf.get(keyPrefix + BIND_PASSWORD_ALIAS_SUFFIX,
+        BIND_PASSWORD_ALIAS_DEFAULT);
+    password = getPasswordFromCredentialProviders(conf, alias, "");
+    if (password.isEmpty()) {
+      password = getPassword(conf, keyPrefix + BIND_PASSWORD_SUFFIX,
+          BIND_PASSWORD_DEFAULT);
+      if (password.isEmpty()) {
+        password = extractPassword(conf.get(
+            keyPrefix + BIND_PASSWORD_FILE_SUFFIX, BIND_PASSWORD_FILE_DEFAULT));
+      }
+    }
+    return password;
+  }
+
+  private final static class BindUserInfo {
+    private final String username;
+    private final String password;
+
+    private BindUserInfo(String username, String password) {
+      this.username = username;
+      this.password = password;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+      if (!(o instanceof BindUserInfo)) {
+        return false;
+      }
+      return this.username.equals(((BindUserInfo) o).username);
+    }
+
+    @Override
+    public int hashCode() {
+      return this.username.hashCode();
+    }
+
+    @Override
+    public String toString() {
+      return this.username;
+    }
+  }

INS26 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 MOV43 INS59 MOV43 INS43 INS83 INS83 INS83 INS43 INS59 INS43 INS83 INS83 INS83 INS43 INS59 INS74 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 MOV21 INS83 INS39 INS42 INS8 INS83 MOV43 INS42 INS44 INS8 INS83 INS83 INS83 INS42 INS23 MOV23 INS31 INS31 INS31 INS31 UPD42 INS42 INS42 INS45 INS42 INS27 INS42 INS45 INS42 UPD42 INS42 INS42 INS27 INS42 UPD42 INS42 INS42 INS27 INS43 INS43 UPD42 INS42 INS42 INS65 INS65 INS43 INS42 INS60 INS21 INS25 MOV21 INS60 INS60 INS25 INS21 INS21 INS43 INS42 INS60 INS60 MOV21 INS25 INS41 INS83 INS83 INS43 INS59 INS83 INS43 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 MOV43 INS42 INS8 UPD45 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS66 INS42 INS66 INS42 INS43 INS59 INS7 INS38 INS8 INS32 INS74 INS59 INS5 INS59 INS27 INS8 INS8 INS7 INS7 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 UPD42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS25 INS41 INS42 INS41 INS42 INS41 INS42 INS42 INS22 INS42 INS32 INS32 INS21 UPD42 MOV42 INS43 INS43 INS42 INS14 MOV43 INS85 INS42 INS32 INS27 INS27 INS70 INS60 INS60 INS21 INS22 INS32 INS22 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS21 INS25 INS42 INS42 INS7 INS7 INS42 INS38 INS8 INS32 INS32 INS22 INS12 INS52 INS42 INS22 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS33 INS40 INS34 INS44 INS42 INS8 INS43 INS59 INS43 INS59 INS32 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS22 INS42 INS42 INS42 INS27 INS42 INS7 INS32 INS8 INS22 INS42 INS22 INS42 INS36 INS41 INS22 INS42 INS22 INS22 INS42 INS52 INS42 INS44 INS8 INS52 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS40 INS40 INS43 INS43 INS42 INS60 INS60 INS60 INS25 INS21 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS14 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS52 INS42 INS52 INS42 INS62 INS9 INS52 INS42 INS36 INS42 INS52 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS27 INS42 INS7 INS42 INS43 INS11 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS33 INS42 INS33 INS14 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS45 INS42 INS42 INS42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL25