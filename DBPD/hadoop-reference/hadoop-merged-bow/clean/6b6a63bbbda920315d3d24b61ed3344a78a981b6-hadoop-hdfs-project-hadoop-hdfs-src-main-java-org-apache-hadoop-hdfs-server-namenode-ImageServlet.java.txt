Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

+import org.apache.hadoop.ha.HAServiceProtocol;
+  private SortedSet<ImageUploadRequest> currentlyDownloadingCheckpoints = Collections
+      .<ImageUploadRequest> synchronizedSortedSet(new TreeSet<ImageUploadRequest>());
+
-      Configuration otherNnConf = HAUtil.getConfForOtherNode(conf);
-      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf
-          .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),
-          NameNode.getAddress(otherNnConf).getHostName()));
+      List<Configuration> otherNnConfs = HAUtil.getConfForOtherNodes(conf);
+      for (Configuration otherNnConf : otherNnConfs) {
+        validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf
+                .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),
+            NameNode.getAddress(otherNnConf).getHostName()));
+      }
-   * @param httpMethod instance of method to set the parameters
+              // if its not the active NN, then we need to notify the caller it was was the wrong
+              // target (regardless of the fact that we got the image)
+              HAServiceProtocol.HAServiceState state = NameNodeHttpServer
+                  .getNameNodeStateFromContext(getServletContext());
+              if (state != HAServiceProtocol.HAServiceState.ACTIVE) {
+                // we need a different response type here so the client can differentiate this
+                // from the failure to upload due to (1) security, or (2) other checkpoints already
+                // present
+                response.sendError(HttpServletResponse.SC_EXPECTATION_FAILED,
+                    "Nameode "+request.getLocalAddr()+" is currently not in a state which can "
+                        + "accept uploads of new fsimages. State: "+state);
+                return null;
+              }
+              String remoteAddr = request.getRemoteAddr();
+              ImageUploadRequest imageRequest = new ImageUploadRequest(txid, remoteAddr);
-              if (!nnImage.addToCheckpointing(txid)) {
+              // if the node is attempting to upload an older transaction, we ignore it
+              SortedSet<ImageUploadRequest> larger = currentlyDownloadingCheckpoints.tailSet(imageRequest);
+              if (larger.size() > 0) {
+                response.sendError(HttpServletResponse.SC_CONFLICT,
+                    "Another checkpointer is already in the process of uploading a" +
+                        " checkpoint made up to transaction ID " + larger.last());
+                return null;
+              }
+
+              //make sure no one else has started uploading one
+              if (!currentlyDownloadingCheckpoints.add(imageRequest)) {
+                  // remove the request once we've processed it, or it threw an error, so we
+                  // aren't using it either
+                  currentlyDownloadingCheckpoints.remove(imageRequest);
+
+
+  private static class ImageUploadRequest implements Comparable<ImageUploadRequest> {
+
+    private final long txId;
+    private final String address;
+
+    public ImageUploadRequest(long txid, String remoteAddr) {
+      this.txId = txid;
+      this.address = remoteAddr;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+      if (this == o) return true;
+      if (o == null || getClass() != o.getClass()) return false;
+
+      ImageUploadRequest that = (ImageUploadRequest) o;
+
+      if (txId != that.txId) return false;
+      if (!address.equals(that.address)) return false;
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      int result = (int) (txId ^ (txId >>> 32));
+      result = 31 * result + address.hashCode();
+      return result;
+    }
+
+    @Override public int compareTo(ImageUploadRequest other) {
+      return Long.compare(txId, other.txId);
+    }
+
+    @Override public String toString() {
+      return "ImageRequest{" +
+          "txId=" + txId +
+          ", address='" + address + '\'' +
+          '}';
+    }
+  }

INS26 INS40 INS23 INS55 INS83 INS74 INS59 INS83 INS83 INS42 INS74 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS43 INS43 INS42 INS32 INS43 INS43 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS43 INS42 INS14 INS8 INS42 INS42 INS42 INS42 INS42 INS39 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS25 INS25 INS60 INS25 INS25 INS41 INS42 INS60 INS21 INS41 INS42 INS43 INS42 INS41 INS42 INS42 INS41 INS42 INS74 INS60 INS70 INS42 INS7 INS7 INS42 INS27 INS41 INS27 INS41 INS43 INS59 INS27 INS41 INS38 INS41 INS9 INS39 INS59 INS7 INS42 INS42 INS32 INS27 INS43 INS43 INS74 INS59 INS44 INS42 MOV8 INS22 INS42 INS22 INS42 INS52 INS42 INS9 INS27 INS27 INS9 INS42 INS42 INS11 INS42 INS40 INS9 INS32 INS9 INS42 INS11 INS42 INS27 INS42 INS42 INS42 INS40 INS27 INS42 INS45 INS42 INS13 INS13 INS42 INS42 INS43 INS43 INS42 INS32 MOV43 INS42 INS52 INS42 INS52 INS42 INS42 INS33 INS32 INS32 INS43 INS42 INS42 INS42 INS40 INS39 INS36 INS27 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS34 INS42 INS42 INS42 INS42 INS36 INS27 INS60 INS25 INS60 INS60 INS60 INS25 INS42 INS34 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS74 INS59 INS27 INS8 INS40 INS42 INS32 INS42 INS40 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS32 INS34 INS21 INS41 INS42 INS42 INS32 INS32 INS33 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS40 INS27 INS42 INS42 INS42 INS40 INS27 INS21 INS45 INS32 INS45 INS45 INS42 INS45 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL66 DEL65