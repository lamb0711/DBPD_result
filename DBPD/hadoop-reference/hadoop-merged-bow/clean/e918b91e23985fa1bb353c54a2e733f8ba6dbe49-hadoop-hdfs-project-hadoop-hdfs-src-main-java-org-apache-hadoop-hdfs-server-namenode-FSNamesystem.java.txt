HDFS-2579. Starting delegation token manager during safemode fails. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1242225 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_DEFAULT;
+  private boolean alwaysUseDelegationTokensForTests;
+  
-  void startSecretManager() throws IOException {
+  private void startSecretManager() {
-      dtSecretManager.startThreads();
+      try {
+        dtSecretManager.startThreads();
+      } catch (IOException e) {
+        // Inability to start secret manager
+        // can't be recovered from.
+        throw new RuntimeException(e);
+      }
-  void stopSecretManager() {
+  private void startSecretManagerIfNecessary() {
+    boolean shouldRun = shouldUseDelegationTokens() &&
+      !isInSafeMode() && getEditLog().isOpenForWrite();
+    boolean running = dtSecretManager.isRunning();
+    if (shouldRun && !running) {
+      startSecretManager();
+    }
+  }
+
+  private void stopSecretManager() {
-      if (UserGroupInformation.isSecurityEnabled()) {
-        startSecretManager();
-      }
+      startSecretManagerIfNecessary();
+  private boolean shouldUseDelegationTokens() {
+    return UserGroupInformation.isSecurityEnabled() ||
+      alwaysUseDelegationTokensForTests;
+  }
+
+    
+    // For testing purposes, allow the DT secret manager to be started regardless
+    // of whether security is enabled.
+    alwaysUseDelegationTokensForTests = 
+      conf.getBoolean(DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,
+          DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_DEFAULT);
+
+      startSecretManagerIfNecessary();
+      // Stop the secret manager, since rolling the master key would
+      // try to write to the edit log
+      stopSecretManager();
+
-    writeLock();
-    try {
-      if (isInSafeMode()) {
-        throw new SafeModeException(
-          "Cannot log master key update in safe mode", safeMode);
-      }
-      getEditLog().logUpdateMasterKey(key);
-    } finally {
-      writeUnlock();
-    }
+    
+    assert !isInSafeMode() :
+      "this should never be called while in safemode, since we stop " +
+      "the DT manager before entering safemode!";
+    // No need to hold FSN lock since we don't access any internal
+    // structures, and this is stopped before the FSN shuts itself
+    // down, etc.
+    getEditLog().logUpdateMasterKey(key);

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS83 INS39 INS59 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS8 MOV8 INS42 INS60 INS60 MOV25 INS41 INS21 INS6 MOV21 INS8 INS39 INS59 INS39 INS59 INS27 INS27 INS7 INS21 INS38 INS27 INS54 INS42 INS27 INS42 INS32 INS42 INS38 INS21 MOV32 INS42 INS42 INS32 INS32 INS21 MOV32 INS45 INS45 MOV8 INS12 INS32 INS38 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS44 INS8 INS42 INS32 INS32 INS42 INS42 INS42 MOV43 INS42 INS53 INS42 INS42 INS14 INS43 INS42 INS42 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8