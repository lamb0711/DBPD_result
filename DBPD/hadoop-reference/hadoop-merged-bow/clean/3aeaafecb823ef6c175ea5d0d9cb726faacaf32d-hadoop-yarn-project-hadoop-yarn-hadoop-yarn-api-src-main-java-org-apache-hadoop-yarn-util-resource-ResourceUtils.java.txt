YARN-6788. [YARN-3926] Improve performance of resource profile branch
(Contributed by Sunil Govindan via Daniel Templeton)

+import java.util.concurrent.ConcurrentHashMap;
-  private static volatile Object lock;
-  private static Map<String, ResourceInformation> readOnlyResources;
-  private static volatile Object nodeLock;
-  private static Map<String, ResourceInformation> readOnlyNodeResources;
-
+  private static volatile boolean initializedResources = false;
+  private static final Map<String, Integer> RESOURCE_NAME_TO_INDEX =
+      new ConcurrentHashMap<String, Integer>();
+  private static volatile Map<String, ResourceInformation> resourceTypes;
+  private static volatile String[] resourceNamesArray;
+  private static volatile ResourceInformation[] resourceTypesArray;
+  private static volatile boolean initializedNodeResources = false;
+  private static volatile Map<String, ResourceInformation> readOnlyNodeResources;
-    String[][] resourceTypesKeys =
-        {
-          { ResourceInformation.MEMORY_MB.getName(),
+    String[][] resourceTypesKeys = {
+        {ResourceInformation.MEMORY_MB.getName(),
-              YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),
-            ResourceInformation.MEMORY_MB.getName()
-          },
-          { ResourceInformation.VCORES.getName(),
+                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),
+            ResourceInformation.MEMORY_MB.getName()},
+        {ResourceInformation.VCORES.getName(),
-              YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),
-            ResourceInformation.VCORES.getName()
-          }
-        };
+                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),
+            ResourceInformation.VCORES.getName()}};
-    String[][] resourceTypesKeys =
-        {
-          {
-            ResourceInformation.MEMORY_MB.getName(),
+    String[][] resourceTypesKeys = {
+        {ResourceInformation.MEMORY_MB.getName(),
-              YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB),
-            ResourceInformation.MEMORY_MB.getName()
-          },
-          {
-            ResourceInformation.VCORES.getName(),
+                YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB),
+            ResourceInformation.MEMORY_MB.getName()},
+        {ResourceInformation.VCORES.getName(),
-              YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES),
-             ResourceInformation.VCORES.getName()
-          }
-        };
+                YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES),
+            ResourceInformation.VCORES.getName()}};
-    readOnlyResources = Collections.unmodifiableMap(resourceInformationMap);
+    resourceTypes = Collections.unmodifiableMap(resourceInformationMap);
+    updateKnownResources();
+    updateResourceTypeIndex();
+  }
+
+  private static void updateKnownResources() {
+    // Update resource names.
+    resourceNamesArray = new String[resourceTypes.size()];
+    resourceTypesArray = new ResourceInformation[resourceTypes.size()];
+
+    int index = 2;
+    for (ResourceInformation resInfo : resourceTypes.values()) {
+      if (resInfo.getName().equals(MEMORY)) {
+        resourceTypesArray[0] = ResourceInformation
+            .newInstance(resourceTypes.get(MEMORY));
+        resourceNamesArray[0] = MEMORY;
+      } else if (resInfo.getName().equals(VCORES)) {
+        resourceTypesArray[1] = ResourceInformation
+            .newInstance(resourceTypes.get(VCORES));
+        resourceNamesArray[1] = VCORES;
+      } else {
+        resourceTypesArray[index] = ResourceInformation.newInstance(resInfo);
+        resourceNamesArray[index] = resInfo.getName();
+        index++;
+      }
+    }
+  }
+
+  private static void updateResourceTypeIndex() {
+    RESOURCE_NAME_TO_INDEX.clear();
+
+    for (int index = 0; index < resourceTypesArray.length; index++) {
+      ResourceInformation resInfo = resourceTypesArray[index];
+      RESOURCE_NAME_TO_INDEX.put(resInfo.getName(), index);
+    }
+  }
+
+  /**
+   * Get associate index of resource types such memory, cpu etc.
+   * This could help to access each resource types in a resource faster.
+   * @return Index map for all Resource Types.
+   */
+  public static Map<String, Integer> getResourceTypeIndex() {
+    return RESOURCE_NAME_TO_INDEX;
+  /**
+   * Get resource names array, this is mostly for performance perspective. Never
+   * modify returned array.
+   *
+   * @return resourceNamesArray
+   */
+  public static String[] getResourceNamesArray() {
+    getResourceTypes(null, YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE);
+    return resourceNamesArray;
+  }
+
+  public static ResourceInformation[] getResourceTypesArray() {
+    getResourceTypes(null, YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE);
+    return resourceTypesArray;
+  }
+
-    if (lock == null) {
+    if (!initializedResources) {
-        if (lock == null) {
-          synchronized (ResourceUtils.class) {
-            Map<String, ResourceInformation> resources = new HashMap<>();
-            if (conf == null) {
-              conf = new YarnConfiguration();
-            }
-            try {
-              addResourcesFileToConf(resourceFile, conf);
-              LOG.debug("Found " + resourceFile + ", adding to configuration");
-              initializeResourcesMap(conf, resources);
-              lock = new Object();
-            } catch (FileNotFoundException fe) {
-              LOG.info("Unable to find '" + resourceFile
-                  + "'. Falling back to memory and vcores as resources", fe);
-              initializeResourcesMap(conf, resources);
-              lock = new Object();
-            }
+        if (!initializedResources) {
+          Map<String, ResourceInformation> resources = new HashMap<>();
+          if (conf == null) {
+            conf = new YarnConfiguration();
+          }
+          try {
+            addResourcesFileToConf(resourceFile, conf);
+            LOG.debug("Found " + resourceFile + ", adding to configuration");
+            initializeResourcesMap(conf, resources);
+            initializedResources = true;
+          } catch (FileNotFoundException fe) {
+            LOG.info("Unable to find '" + resourceFile
+                + "'. Falling back to memory and vcores as resources", fe);
+            initializeResourcesMap(conf, resources);
+            initializedResources = true;
-    return readOnlyResources;
+    return resourceTypes;
-  static void resetResourceTypes() {
-    lock = null;
+  synchronized static void resetResourceTypes() {
+    initializedResources = false;
-    lock = null;
+    synchronized (ResourceUtils.class) {
+      initializedResources = false;
+    }
-    if (nodeLock == null) {
+    if (!initializedNodeResources) {
-        if (nodeLock == null) {
-          synchronized (ResourceUtils.class) {
-            Map<String, ResourceInformation> nodeResources =
-                initializeNodeResourceInformation(conf);
-            addManadtoryResources(nodeResources);
-            checkMandatatoryResources(nodeResources);
-            readOnlyNodeResources = Collections.unmodifiableMap(nodeResources);
-            nodeLock = new Object();
-          }
+        if (!initializedNodeResources) {
+          Map<String, ResourceInformation> nodeResources = initializeNodeResourceInformation(
+              conf);
+          addManadtoryResources(nodeResources);
+          checkMandatatoryResources(nodeResources);
+          setMinimumAllocationForMandatoryResources(nodeResources, conf);
+          setMaximumAllocationForMandatoryResources(nodeResources, conf);
+          readOnlyNodeResources = Collections.unmodifiableMap(nodeResources);
+          initializedNodeResources = true;
-    nodeLock = null;
+    initializedNodeResources = false;
-    Map<String, ResourceInformation> resourceTypes = getResourceTypes();
-    for (Map.Entry<String, ResourceInformation> entry : resourceTypes
-        .entrySet()) {
-      String name = entry.getKey();
+    for (ResourceInformation entry : resourceTypesArray) {
+      String name = entry.getName();
-        ret.setMemorySize(entry.getValue().getMinimumAllocation());
-        continue;
-      }
-      if (name.equals(ResourceInformation.VCORES.getName())) {
-        Long tmp = entry.getValue().getMinimumAllocation();
+        ret.setMemorySize(entry.getMinimumAllocation());
+      } else if (name.equals(ResourceInformation.VCORES.getName())) {
+        Long tmp = entry.getMinimumAllocation();
-        continue;
+      } else {
+        ret.setResourceValue(name, entry.getMinimumAllocation());
-      ret.setResourceValue(name, entry.getValue().getMinimumAllocation());
-    Map<String, ResourceInformation> resourceTypes = getResourceTypes();
-    for (Map.Entry<String, ResourceInformation> entry : resourceTypes
-        .entrySet()) {
-      String name = entry.getKey();
+    for (ResourceInformation entry : resourceTypesArray) {
+      String name = entry.getName();
-        ret.setMemorySize(entry.getValue().getMaximumAllocation());
-        continue;
-      }
-      if (name.equals(ResourceInformation.VCORES.getName())) {
-        Long tmp = entry.getValue().getMaximumAllocation();
+        ret.setMemorySize(entry.getMaximumAllocation());
+      } else if (name.equals(ResourceInformation.VCORES.getName())) {
+        Long tmp = entry.getMaximumAllocation();
+      } else {
+        ret.setResourceValue(name, entry.getMaximumAllocation());
-      ret.setResourceValue(name, entry.getValue().getMaximumAllocation());

INS26 MOV23 MOV31 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS74 INS59 INS83 INS5 INS5 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS74 INS42 INS8 INS29 INS83 INS83 INS5 INS42 INS8 INS83 INS83 INS5 INS42 INS8 MOV8 MOV78 INS83 INS8 MOV8 MOV78 MOV43 UPD42 MOV29 MOV43 UPD42 INS42 INS9 INS43 INS43 INS43 INS42 INS14 UPD42 INS43 INS85 UPD42 INS43 INS85 UPD42 INS42 INS9 INS21 INS21 INS21 INS21 INS60 INS70 INS21 INS24 INS65 INS65 INS43 MOV43 INS43 INS41 INS65 INS65 INS43 INS85 INS21 INS41 INS43 INS85 INS21 INS41 INS41 INS51 MOV21 MOV41 INS42 INS42 INS42 INS74 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS7 INS7 INS39 INS59 INS44 INS32 INS8 INS32 INS58 INS27 INS37 INS8 INS66 INS66 INS66 INS42 INS42 INS42 INS66 INS66 INS66 INS42 INS32 INS42 INS42 INS32 INS42 INS38 INS42 MOV57 INS8 INS38 INS42 INS42 INS43 MOV43 INS43 UPD42 INS42 INS42 INS42 INS3 INS42 INS3 INS42 INS34 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS42 INS33 INS40 INS42 INS33 INS40 INS42 UPD42 INS9 MOV21 INS42 UPD42 INS9 MOV43 MOV43 INS42 INS42 INS5 INS32 INS5 INS32 INS42 INS32 INS8 INS25 INS42 INS34 INS43 INS59 INS32 INS8 INS8 MOV25 MOV25 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS32 INS8 INS8 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS25 UPD42 INS9 INS25 INS8 INS8 INS42 INS42 INS42 INS42 INS7 INS7 INS32 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS38 MOV8 INS38 MOV8 UPD42 INS21 UPD42 INS21 INS2 INS32 INS2 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS37 INS42 INS42 INS21 INS21 INS32 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS34 INS2 INS32 INS2 INS42 INS2 INS32 INS2 INS32 INS42 INS32 INS32 MOV42 UPD42 INS42 INS42 INS42 INS32 MOV42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS9 MOV42 UPD42 INS42 INS42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 INS9 UPD42 INS9 DEL43 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL33 DEL27 DEL42 DEL43 DEL57 DEL51 DEL8 DEL25 DEL42 DEL41 DEL8 DEL33 DEL33 DEL8 DEL42 DEL33 DEL27 DEL42 DEL43 DEL14 DEL42 DEL33 DEL27 DEL51 DEL8 DEL25 DEL8 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL32 DEL18 DEL42 DEL32 DEL18 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL32 DEL18 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21