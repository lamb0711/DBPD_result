HDFS-9398. Make ByteArraryManager log message in one-line format.  Contributed by Mingliang Liu

+  private static final ThreadLocal<StringBuilder> DEBUG_MESSAGE =
+      new ThreadLocal<StringBuilder>() {
+    protected StringBuilder initialValue() {
+      return new StringBuilder();
+    }
+  };
+
+  private static void logDebugMessage() {
+    final StringBuilder b = DEBUG_MESSAGE.get();
+    LOG.debug(b.toString());
+    b.setLength(0);
+  }
-      LOG.debug(", {}", this);
+      if (LOG.isDebugEnabled()) {
+        DEBUG_MESSAGE.get().append(", ").append(this);
+      }
-        LOG.debug(": wait ...");
+        if (LOG.isDebugEnabled()) {
+          DEBUG_MESSAGE.get().append(": wait ...");
+          logDebugMessage();
+        }
-        LOG.debug("wake up: {}", this);
+        if (LOG.isDebugEnabled()) {
+          DEBUG_MESSAGE.get().append("wake up: ").append(this);
+        }
-      LOG.debug(", recycled? {}", array != null);
+      if (LOG.isDebugEnabled()) {
+        DEBUG_MESSAGE.get().append(", recycled? ").append(array != null);
+      }
-      LOG.debug(", {}", this);
+      if (LOG.isDebugEnabled()) {
+        DEBUG_MESSAGE.get().append(", ").append(this);
+      }
-        LOG.debug(", freeQueue.offer");
+        if (LOG.isDebugEnabled()) {
+          DEBUG_MESSAGE.get().append(", freeQueue.offer");
+        }
-      LOG.debug("allocate({})", arrayLength);
+      if (LOG.isDebugEnabled()) {
+        DEBUG_MESSAGE.get().append("allocate(").append(arrayLength).append(")");
+      }
-        LOG.debug(": count={}, {}Threshold", count,
-            aboveThreshold ? "above" : "below");
+        if (LOG.isDebugEnabled()) {
+          DEBUG_MESSAGE.get().append(": count=").append(count)
+              .append(aboveThreshold? ", aboveThreshold": ", belowThreshold");
+        }
-      LOG.debug(", return byte[{}]", array.length);
+      if (LOG.isDebugEnabled()) {
+        DEBUG_MESSAGE.get().append(", return byte[")
+            .append(array.length).append("]");
+        logDebugMessage();
+      }
-      LOG.debug("recycle: array.length={}", array.length);
+      if (LOG.isDebugEnabled()) {
+        DEBUG_MESSAGE.get()
+            .append("recycle: array.length=").append(array.length);
+      }
-      LOG.debug(", freeQueueSize={}", freeQueueSize);
+      if (LOG.isDebugEnabled()) {
+        DEBUG_MESSAGE.get().append(", freeQueueSize=").append(freeQueueSize);
+        logDebugMessage();
+      }

INS23 INS31 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS14 INS60 INS21 INS21 INS42 INS42 INS74 INS1 INS83 INS43 INS59 INS32 INS32 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS43 INS43 INS31 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS34 INS32 INS8 INS32 INS8 INS32 INS8 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS42 INS42 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS25 INS25 INS42 INS42 MOV21 INS42 INS42 MOV21 INS25 MOV21 INS42 INS42 MOV21 INS25 INS42 INS42 MOV21 INS21 INS42 INS42 MOV21 INS42 INS42 MOV21 INS21 INS42 INS41 INS32 INS8 INS32 INS8 INS32 INS32 MOV8 INS32 INS32 INS8 INS32 INS32 INS32 INS14 INS32 INS42 INS42 INS42 MOV21 INS21 INS42 INS42 MOV21 INS32 INS42 MOV27 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 MOV21 INS32 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS32 INS42 UPD45 MOV45 INS32 INS32 INS42 UPD45 MOV45 INS32 INS42 UPD45 MOV45 INS32 INS42 MOV42 INS32 INS42 MOV40 INS32 INS42 UPD45 MOV45 INS32 INS42 UPD45 MOV45 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS42 UPD45 MOV45 INS32 INS42 INS32 INS42 UPD45 MOV45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD45 MOV45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 MOV42 UPD45 UPD45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD45 MOV45 UPD42 MOV42 UPD42 MOV42 DEL32 DEL32 DEL32