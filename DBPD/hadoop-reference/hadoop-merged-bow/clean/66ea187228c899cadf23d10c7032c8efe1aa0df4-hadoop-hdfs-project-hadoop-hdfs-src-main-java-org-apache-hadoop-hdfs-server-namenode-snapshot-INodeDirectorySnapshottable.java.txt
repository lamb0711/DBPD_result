HDFS-4131. Add capability to namenode to get snapshot diff. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440152 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Comparator;
+import java.util.Map;
+import java.util.SortedMap;
+import java.util.TreeMap;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.diff.Diff;
+  
+  /**
+   * A class describing the difference between snapshots of a snapshottable
+   * directory.
+   */
+  public static class SnapshotDiffReport {
+    public static final Comparator<INode> INODE_COMPARATOR = 
+        new Comparator<INode>() {
+      @Override
+      public int compare(INode left, INode right) {
+        if (left == null) {
+          return right == null ? 0 : -1;
+        } else {
+          return right == null ? 1 : left.compareTo(right.getLocalNameBytes());
+        }
+      }
+    };
+    
+    /** The root directory of the snapshots */
+    private final INodeDirectorySnapshottable snapshotRoot;
+    /** The starting point of the difference */
+    private final Snapshot from;
+    /** The end point of the difference */
+    private final Snapshot to;
+    /**
+     * A map capturing the detailed difference. Each key indicates a directory
+     * whose metadata or children have been changed between the two snapshots,
+     * while its associated value is a {@link Diff} storing the changes happened
+     * to the children (files).
+     */
+    private final SortedMap<INodeDirectoryWithSnapshot, ChildrenDiff> diffMap;
+    
+    public SnapshotDiffReport(INodeDirectorySnapshottable snapshotRoot,
+        Snapshot start, Snapshot end) {
+      this.snapshotRoot = snapshotRoot;
+      this.from = start;
+      this.to = end;
+      this.diffMap = new TreeMap<INodeDirectoryWithSnapshot, ChildrenDiff>(
+          INODE_COMPARATOR);
+    }
+    
+    /** Add a dir-diff pair into {@link #diffMap} */
+    public void addDiff(INodeDirectoryWithSnapshot dir, ChildrenDiff diff) {
+      diffMap.put(dir, diff);
+    }
+    
+    /**
+     * dump the diff
+     */
+    public String dump() {
+      StringBuilder strBuffer = new StringBuilder();
+      String fromStr = from == null ? "current directory" : "snapshot "
+          + from.getRoot().getLocalName();
+      String toStr = to == null ? "current directory" : "snapshot "
+          + to.getRoot().getLocalName();
+      strBuffer.append("Diffence between snapshot " + fromStr + " and " + toStr
+          + " under directory " + snapshotRoot.getFullPathName() + ":\n");
+      
+      if (!diffMap.isEmpty()) {
+        for (Map.Entry<INodeDirectoryWithSnapshot, ChildrenDiff> entry : diffMap
+            .entrySet()) {
+          strBuffer.append("M\t" + entry.getKey().getFullPathName() + "\n");
+          entry.getValue().printDiff(strBuffer, entry.getKey(),
+              from == null || 
+              (to != null && Snapshot.ID_COMPARATOR.compare(from, to) > 0));
+        }
+      }
+      return strBuffer.toString();
+    }
+  }
+   * Compute the difference between two snapshots (or a snapshot and the current
+   * directory) of the directory.
+   * 
+   * @param from The name of the start point of the comparison. Null indicating
+   *          the current tree.
+   * @param to The name of the end point. Null indicating the current tree.
+   * @return The difference between the start/end points.
+   * @throws SnapshotException If there is no snapshot matching the starting
+   *           point, or if endSnapshotName is not null but cannot be identified
+   *           as a previous snapshot.
+   */
+  SnapshotDiffReport computeDiff(final String from, final String to)
+      throws SnapshotException {
+    Snapshot fromSnapshot = getSnapshotByName(from);
+    Snapshot toSnapshot = getSnapshotByName(to); 
+    SnapshotDiffReport diffs = new SnapshotDiffReport(this, fromSnapshot,
+        toSnapshot);
+    computeDiffInDir(this, diffs);
+    return diffs;
+  }
+  
+  /**
+   * Find the snapshot matching the given name.
+   * 
+   * @param snapshotName The name of the snapshot.
+   * @return The corresponding snapshot. Null if snapshotName is null or empty.
+   * @throws SnapshotException If snapshotName is not null or empty, but there
+   *           is no snapshot matching the name.
+   */
+  private Snapshot getSnapshotByName(String snapshotName)
+      throws SnapshotException {
+    Snapshot s = null;
+    if (snapshotName != null && !snapshotName.isEmpty()) {
+      final int index = searchSnapshot(DFSUtil.string2Bytes(snapshotName));
+      if (index < 0) {
+        throw new SnapshotException("Cannot find the snapshot of directory "
+            + this.getFullPathName() + " with name " + snapshotName);
+      }
+      s = snapshotsByNames.get(index);
+    }
+    return s;
+  }
+  
+  /**
+   * Recursively compute the difference between snapshots under a given
+   * directory.
+   * @param dir The directory under which the diff is computed.
+   * @param diffReport data structure used to store the diff.
+   */
+  private void computeDiffInDir(INodeDirectory dir,
+      SnapshotDiffReport diffReport) {
+    ChildrenDiff diff = new ChildrenDiff();
+    if (dir instanceof INodeDirectoryWithSnapshot) {
+      boolean change = ((INodeDirectoryWithSnapshot) dir)
+          .computeDiffBetweenSnapshots(diffReport.from,
+              diffReport.to, diff);
+      if (change) {
+        diffReport.addDiff((INodeDirectoryWithSnapshot) dir,
+            diff); 
+      }
+    }
+    ReadOnlyList<INode> children = dir.getChildrenList(null);
+    for (INode child : children) {
+      if (child instanceof INodeDirectory
+          && diff.searchCreated(child.getLocalNameBytes()) == null) {
+        // Compute diff recursively for children that are directories. We do not
+        // need to compute diff for those contained in the created list since 
+        // directory contained in the created list must be new created.
+        computeDiffInDir((INodeDirectory) child, diffReport);
+      }
+    }
+  }
+  
+  /**

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS83 INS42 INS55 INS31 INS31 INS31 INS29 MOV83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS83 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS65 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS60 INS60 INS21 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS70 INS66 INS66 INS43 INS43 INS42 INS14 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS65 INS43 INS42 INS43 INS42 INS21 INS65 INS42 INS60 INS60 INS60 INS21 INS25 INS41 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS62 INS8 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS74 INS1 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS66 INS65 INS66 INS42 INS42 INS32 INS66 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS38 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS52 INS42 INS42 INS42 INS33 INS27 INS38 INS60 INS25 INS21 INS42 INS42 INS14 INS42 INS43 INS60 INS25 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS43 INS43 INS31 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS14 INS67 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS27 INS32 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS52 INS42 INS42 INS42 INS33 INS32 INS83 INS39 INS59 INS27 INS8 INS7 INS43 INS42 INS39 INS59 INS42 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS27 INS8 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS74 INS42 INS42 INS43 INS27 INS45 INS27 INS27 INS45 INS27 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS53 INS42 INS32 INS42 INS42 INS32 INS21 INS62 INS27 INS21 INS42 INS43 INS42 INS43 INS42 INS25 INS43 INS43 INS43 INS42 INS42 INS33 INS45 INS32 INS42 INS33 INS45 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS21 INS21 INS42 INS32 INS14 INS42 INS42 INS42 INS36 INS42 INS40 INS40 INS42 INS32 INS42 INS43 INS32 INS33 INS32 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS43 INS43 INS32 INS32 INS42 INS42 INS42 INS43 INS27 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS42 INS11 INS42 INS42 INS33 INS41 INS41 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS32 INS27 INS42 INS45 INS32 INS45 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS16 INS16 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS27 INS36 INS52 INS42 INS42 INS42 INS42 INS27 INS34 INS38 INS27 INS34 INS32 INS32 INS42 INS42 INS33 INS27 INS42 INS33 INS34 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS33 INS32 INS34 INS40 INS42 INS42 INS42 DEL42