HDFS-8890. Allow admin to specify which blockpools the balancer should run on. (Chris Trezzo via mingma)

+      + "\n\t[-blockpools <comma-separated list of blockpool ids>]"
+      + "\tThe balancer will only run on blockpools included in this list."
-          final Balancer b = new Balancer(nnc, p, conf);
-          final Result r = b.runOneIteration();
-          r.print(iteration, System.out);
+          if (p.blockpools.size() == 0
+              || p.blockpools.contains(nnc.getBlockpoolID())) {
+            final Balancer b = new Balancer(nnc, p, conf);
+            final Result r = b.runOneIteration();
+            r.print(iteration, System.out);
-          // clean all lists
-          b.resetData(conf);
-          if (r.exitStatus == ExitStatus.IN_PROGRESS) {
-            done = false;
-          } else if (r.exitStatus != ExitStatus.SUCCESS) {
-            //must be an error statue, return.
-            return r.exitStatus.getExitCode();
+            // clean all lists
+            b.resetData(conf);
+            if (r.exitStatus == ExitStatus.IN_PROGRESS) {
+              done = false;
+            } else if (r.exitStatus != ExitStatus.SUCCESS) {
+              // must be an error statue, return.
+              return r.exitStatus.getExitCode();
+            }
+
+            if (!done) {
+              Thread.sleep(sleeptime);
+            }
+          } else {
+            LOG.info("Skipping blockpool " + nnc.getBlockpoolID());
-
-        if (!done) {
-          Thread.sleep(sleeptime);
-        }
-    static final Parameters DEFAULT = new Parameters(
-        BalancingPolicy.Node.INSTANCE, 10.0,
-        NameNodeConnector.DEFAULT_MAX_IDLE_ITERATIONS,
-        Collections.<String>emptySet(), Collections.<String>emptySet(),
-        Collections.<String>emptySet(),
-        false);
+    static final Parameters DEFAULT =
+        new Parameters(BalancingPolicy.Node.INSTANCE, 10.0,
+            NameNodeConnector.DEFAULT_MAX_IDLE_ITERATIONS,
+            Collections.<String> emptySet(), Collections.<String> emptySet(),
+            Collections.<String> emptySet(), Collections.<String> emptySet(),
+            false);
+     * A set of block pools to run the balancer on.
+     */
+    final Set<String> blockpools;
+    /**
-        Set<String> sourceNodes, boolean runDuringUpgrade) {
+        Set<String> sourceNodes, Set<String> blockpools,
+        boolean runDuringUpgrade) {
+      this.blockpools = blockpools;
+              + " #blockpools = %s,"
-          Balancer.class.getSimpleName(), getClass().getSimpleName(),
-          policy, threshold, maxIdleIteration,
-          excludedNodes.size(), includedNodes.size(), sourceNodes.size(),
+          Balancer.class.getSimpleName(), getClass().getSimpleName(), policy,
+          threshold, maxIdleIteration, excludedNodes.size(),
+          includedNodes.size(), sourceNodes.size(), blockpools.size(),
+      Set<String> blockpools = Parameters.DEFAULT.blockpools;
+            } else if ("-blockpools".equalsIgnoreCase(args[i])) {
+              checkArgument(
+                  ++i < args.length,
+                  "blockpools value is missing: args = "
+                      + Arrays.toString(args));
+              blockpools = parseBlockPoolList(args[i]);
+              LOG.info("Balancer will run on the following blockpools: "
+                  + blockpools.toString());
-      return new Parameters(policy, threshold, maxIdleIteration,
-          excludedNodes, includedNodes, sourceNodes, runDuringUpgrade);
+      return new Parameters(policy, threshold, maxIdleIteration, excludedNodes,
+          includedNodes, sourceNodes, blockpools, runDuringUpgrade);
+    private static Set<String> parseBlockPoolList(String string) {
+      String[] addrs = StringUtils.getTrimmedStrings(string);
+      return new HashSet<String>(Arrays.asList(addrs));
+    }
+

INS23 INS31 INS29 INS83 INS74 INS59 INS44 INS83 INS83 INS74 INS42 INS44 INS8 INS45 INS45 INS65 INS43 INS43 INS42 INS74 INS42 INS21 INS60 INS43 INS43 INS43 INS42 INS60 INS41 INS32 INS66 INS42 INS42 INS43 INS43 INS7 INS74 INS59 INS42 INS42 INS42 INS5 INS59 INS14 INS42 INS43 INS42 INS42 INS42 INS22 INS42 INS32 INS43 INS43 INS42 INS40 INS42 INS43 INS85 INS42 INS32 INS74 INS32 INS42 INS52 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS8 INS42 INS42 INS25 INS27 MOV8 INS8 INS27 INS32 MOV25 INS21 INS32 INS34 INS40 INS42 INS32 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS32 INS42 INS42 INS25 INS32 INS8 MOV25 INS45 INS42 INS2 INS21 INS21 INS21 INS42 INS42 INS32 INS7 INS32 INS42 INS27 INS27 INS42 INS32 INS42 INS42 INS27 INS38 INS40 INS45 INS32 INS42 INS2 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42