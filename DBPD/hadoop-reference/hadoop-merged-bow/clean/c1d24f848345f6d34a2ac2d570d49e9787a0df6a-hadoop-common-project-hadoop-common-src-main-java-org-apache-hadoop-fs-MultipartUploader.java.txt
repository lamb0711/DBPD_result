HDFS-13713. Add specification of Multipart Upload API to FS specification, with contract tests.

Contributed by Ewan Higgs and Steve Loughran.

+import java.io.Closeable;
-import java.util.List;
+import java.util.Map;
-import com.google.common.base.Preconditions;
-import org.apache.commons.lang3.tuple.Pair;
-
+import static com.google.common.base.Preconditions.checkArgument;
+
- *   <li>Initialize an upload</li>
- *   <li>Upload parts in any order</li>
+ *   <li>Initialize an upload.</li>
+ *   <li>Upload parts in any order.</li>
- *   FS</li>
+ *   FS.</li>
- *
- * Implementers should make sure that the complete function should make sure
- * that 'complete' will reorder parts if the destination FS doesn't already
- * do it for them.
-public abstract class MultipartUploader {
+public abstract class MultipartUploader implements Closeable {
+   * Perform any cleanup.
+   * The upload is not required to support any operations after this.
+   * @throws IOException problems on close.
+   */
+  @Override
+  public void close() throws IOException {
+  }
+
+  /**
-   * Put part as part of a multipart upload. It should be possible to have
-   * parts uploaded in any order (or in parallel).
+   * Put part as part of a multipart upload.
+   * It is possible to have parts uploaded in any order (or in parallel).
-   * @param handles non-empty list of identifiers with associated part numbers
+   * @param handles non-empty map of part number to part handle.
-   *          Depending on the backend, the list order may be significant.
-   * @throws IOException IO failure or the handle list is empty.
+   * @throws IOException IO failure
-      List<Pair<Integer, PartHandle>> handles, UploadHandle multipartUploadId)
+      Map<Integer, PartHandle> handles,
+      UploadHandle multipartUploadId)
-   * Utility method to validate uploadIDs
-   * @param uploadId
-   * @throws IllegalArgumentException
+   * Utility method to validate uploadIDs.
+   * @param uploadId Upload ID
+   * @throws IllegalArgumentException invalid ID
-    Preconditions.checkArgument(uploadId.length > 0,
+    checkArgument(uploadId != null, "null uploadId");
+    checkArgument(uploadId.length > 0,
+
+  /**
+   * Utility method to validate partHandles.
+   * @param partHandles handles
+   * @throws IllegalArgumentException if the parts are invalid
+   */
+  protected void checkPartHandles(Map<Integer, PartHandle> partHandles) {
+    checkArgument(!partHandles.isEmpty(),
+        "Empty upload");
+    partHandles.keySet()
+        .stream()
+        .forEach(key ->
+            checkArgument(key > 0,
+                "Invalid part handle index %s", key));
+  }
+
+  /**
+   * Check all the arguments to the
+   * {@link #putPart(Path, InputStream, int, UploadHandle, long)} operation.
+   * @param filePath Target path for upload (same as {@link #initialize(Path)}).
+   * @param inputStream Data for this part. Implementations MUST close this
+   * stream after reading in the data.
+   * @param partNumber Index of the part relative to others.
+   * @param uploadId Identifier from {@link #initialize(Path)}.
+   * @param lengthInBytes Target length to read from the stream.
+   * @throws IllegalArgumentException invalid argument
+   */
+  protected void checkPutArguments(Path filePath,
+      InputStream inputStream,
+      int partNumber,
+      UploadHandle uploadId,
+      long lengthInBytes) throws IllegalArgumentException {
+    checkArgument(filePath != null, "null filePath");
+    checkArgument(inputStream != null, "null inputStream");
+    checkArgument(partNumber > 0, "Invalid part number: %d", partNumber);
+    checkArgument(uploadId != null, "null uploadId");
+    checkArgument(lengthInBytes >= 0, "Invalid part length: %d", lengthInBytes);
+  }

MOV26 MOV26 UPD40 UPD40 UPD40 INS43 INS31 INS31 INS31 INS42 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 UPD66 UPD66 UPD66 INS65 INS65 INS42 INS42 UPD74 MOV74 INS21 INS65 INS65 INS65 INS74 INS42 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS66 INS66 INS42 INS66 UPD66 UPD66 UPD66 UPD66 UPD43 UPD66 INS66 INS66 INS32 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS43 INS32 INS32 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 UPD42 INS42 INS27 INS45 INS42 INS42 INS42 INS42 INS38 INS45 INS32 INS42 INS86 INS68 INS68 INS68 INS42 INS27 INS45 INS42 INS27 INS45 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS27 INS45 INS42 INS42 INS33 INS32 INS32 INS42 INS59 INS32 INS42 INS69 INS69 INS69 INS69 INS69 INS42 INS69 INS42 INS69 INS42 INS33 INS42 INS33 INS42 INS34 INS42 INS33 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS43 INS43 INS39 INS43 INS39 INS43 INS43 INS42 INS34 INS42 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL42 DEL43 DEL74 DEL42