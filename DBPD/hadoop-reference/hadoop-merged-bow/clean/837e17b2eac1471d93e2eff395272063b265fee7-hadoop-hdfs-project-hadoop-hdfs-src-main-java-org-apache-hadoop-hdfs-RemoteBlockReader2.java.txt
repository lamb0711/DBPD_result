svn merge -c -1430507 . for reverting HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430662 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.Socket;
+import java.nio.channels.ReadableByteChannel;
-import org.apache.hadoop.hdfs.protocol.DatanodeID;
-import org.apache.hadoop.hdfs.net.Peer;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import org.apache.hadoop.hdfs.security.token.block.DataEncryptionKey;
+import org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier;
+import org.apache.hadoop.net.SocketInputWrapper;
+import org.apache.hadoop.security.token.Token;
-import com.google.common.annotations.VisibleForTesting;
-
-  private final DatanodeID datanodeID;
-  private final Peer peer;
+  
+  Socket dnSock;
+  // for now just sending the status code (e.g. checksumOk) after the read.
+  private IOStreamPair ioStreams;
+  private final ReadableByteChannel in;
-  @VisibleForTesting
-  public Peer getPeer() {
-    return peer;
-  }
-  
-    packetReceiver.receiveNextPacket(peer.getInputStreamChannel());
+    packetReceiver.receiveNextPacket(in);
-    packetReceiver.receiveNextPacket(peer.getInputStreamChannel());
+    packetReceiver.receiveNextPacket(in);
-      DataChecksum checksum, long firstChunkOffset) {
+      DataChecksum checksum, long firstChunkOffset, ReadableByteChannel in) {
-    this.datanodeID = params.getDatanodeID();
-    this.peer = params.getPeer();
+    this.dnSock = params.getSocket();
+    this.ioStreams = params.getIoStreamPair();
+    this.in = in;
-  public synchronized void close(PeerCache peerCache) throws IOException {
+  public synchronized void close() throws IOException {
-    if (peerCache != null && sentStatusCode) {
-      peerCache.put(datanodeID, peer);
-    } else {
-      peer.close();
+    if (dnSock != null) {
+      dnSock.close();
+  
+  /**
+   * Take the socket used to talk to the DN.
+   */
+  @Override
+  public Socket takeSocket() {
+    assert hasSentStatusCode() :
+      "BlockReader shouldn't give back sockets mid-read";
+    Socket res = dnSock;
+    dnSock = null;
+    return res;
+  }
+
+  /**
+   * Whether the BlockReader has reached the end of its input stream
+   * and successfully sent a status code back to the datanode.
+   */
+  @Override
+  public boolean hasSentStatusCode() {
+    return sentStatusCode;
+  }
-    assert !sentStatusCode : "already sent status code to " + peer;
+    assert !sentStatusCode : "already sent status code to " + dnSock;
-      writeReadResult(peer.getOutputStream(), statusCode);
+      writeReadResult(ioStreams.out, statusCode);
-               peer.getRemoteAddressString() + ": " + e.getMessage());
+               dnSock.getInetAddress() + ": " + e.getMessage());
+    IOStreamPair ioStreams = params.getIoStreamPair();
+    ReadableByteChannel ch;
+    if (ioStreams.in instanceof SocketInputWrapper) {
+      ch = ((SocketInputWrapper)ioStreams.in).getReadableByteChannel();
+    } else {
+      ch = (ReadableByteChannel) ioStreams.in;
+    }
+    
-          params.getPeer().getOutputStream()));
+          ioStreams.out));
-    DataInputStream in = new DataInputStream(params.getPeer().getInputStream());
+    DataInputStream in = new DataInputStream(ioStreams.in);
-    checkSuccess(status, params.getPeer(), params.getBlock(), params.getFile());
+    checkSuccess(status, params.getSocket(), params.getBlock(),
+        params.getFile());
-    return new RemoteBlockReader2(params, checksum, firstChunkOffset);
+    return new RemoteBlockReader2(params, checksum, firstChunkOffset, ch);
-      BlockOpResponseProto status, Peer peer,
+      BlockOpResponseProto status, Socket sock,
-                + peer.getLocalAddressString() + ", remote="
-                + peer.getRemoteAddressString() + ", for file " + file
+                + sock.getLocalSocketAddress() + ", remote="
+                + sock.getRemoteSocketAddress() + ", for file " + file
-            + peer.getLocalAddressString() + ", remote="
-            + peer.getRemoteAddressString() + ", for file " + file
+            + sock.getLocalSocketAddress() + ", remote="
+            + sock.getRemoteSocketAddress() + ", for file " + file
+
+  @Override
+  public IOStreamPair getStreams() {
+    return ioStreams;
+  }

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 UPD40 INS40 INS40 UPD40 UPD40 INS23 INS31 INS31 INS43 INS59 UPD43 UPD43 INS44 INS29 UPD43 UPD42 INS29 INS78 INS83 INS39 INS42 INS8 MOV60 INS78 INS83 INS43 INS42 INS8 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS43 INS42 INS21 INS65 UPD42 UPD42 INS6 INS60 INS21 INS65 INS42 INS41 INS60 INS25 INS60 UPD43 UPD42 INS42 INS42 INS41 INS42 INS7 INS27 INS66 INS32 INS45 INS43 INS59 INS7 UPD42 INS66 INS66 INS42 INS43 INS43 INS59 INS62 INS8 INS8 MOV43 INS59 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS22 INS42 UPD42 MOV42 MOV33 INS42 INS42 INS42 INS42 INS42 INS33 UPD42 INS42 UPD42 INS32 INS42 INS42 INS40 INS43 INS21 INS21 INS42 INS14 INS42 UPD42 UPD42 UPD42 UPD42 INS52 INS42 MOV42 UPD42 MOV42 INS42 INS7 INS7 MOV43 INS40 UPD42 UPD42 INS40 INS42 INS32 INS42 INS11 INS40 INS36 INS42 INS43 INS40 INS11 INS42 UPD42 UPD42 INS43 INS40 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL83 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL27 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL14 DEL42 DEL42 DEL32 DEL42 DEL32