YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)

+import org.apache.commons.cli.UnrecognizedOptionException;
+import org.apache.hadoop.yarn.api.records.ReservationACL;
+import org.apache.hadoop.yarn.server.resourcemanager.security.ReservationsACLsManager;
+    ReservationId reservationId = request.getApplicationSubmissionContext()
+            .getReservationID();
+
+    checkReservationACLs(submissionContext.getQueue(), AuditConstants
+            .SUBMIT_RESERVATION_REQUEST, reservationId);
+
-            AuditConstants.SUBMIT_RESERVATION_REQUEST);
+            AuditConstants.SUBMIT_RESERVATION_REQUEST, null);
-            AuditConstants.UPDATE_RESERVATION_REQUEST);
+            AuditConstants.UPDATE_RESERVATION_REQUEST, reservationId);
-            AuditConstants.DELETE_RESERVATION_REQUEST);
+            AuditConstants.DELETE_RESERVATION_REQUEST, reservationId);
-    String user = checkReservationACLs(requestInfo.getQueue(),
-            AuditConstants.LIST_RESERVATION_REQUEST);
+    ReservationId reservationId = null;
+    if (requestInfo.getReservationId() != null && !requestInfo
+            .getReservationId().isEmpty()) {
+      reservationId = ReservationId.parseReservationId(
+            requestInfo.getReservationId());
+    }
+
+    checkReservationACLs(requestInfo.getQueue(),
+            AuditConstants.LIST_RESERVATION_REQUEST, reservationId);
-    Set<ReservationAllocation> reservations = plan.getReservations(
-        requestedId, new ReservationInterval(startTime, endTime), user);
+    Set<ReservationAllocation> reservations;
+
+    reservations = plan.getReservations(requestedId, new ReservationInterval(
+            startTime, endTime));
-  private String checkReservationACLs(String queueName, String auditConstant)
-      throws YarnException {
+  private String checkReservationACLs(String queueName, String auditConstant,
+                                      ReservationId reservationId)
+      throws YarnException, IOException {
-    // Check if user has access on the managed queue
-    if (!queueACLsManager.checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS,
-        queueName, null, null)) {
-      RMAuditLogger.logFailure(
-          callerUGI.getShortUserName(),
-          auditConstant,
-          "User doesn't have permissions to "
-              + QueueACL.SUBMIT_APPLICATIONS.toString(), "ClientRMService",
-          AuditConstants.UNAUTHORIZED_USER);
-      throw RPCUtil.getRemoteException(new AccessControlException("User "
-          + callerUGI.getShortUserName() + " cannot perform operation "
-          + QueueACL.SUBMIT_APPLICATIONS.name() + " on queue" + queueName));
+
+    if (reservationSystem == null) {
+      return callerUGI.getShortUserName();
-    return callerUGI.getShortUserName();
+
+    ReservationsACLsManager manager = reservationSystem
+            .getReservationsACLsManager();
+    ReservationACL reservationACL = getReservationACLFromAuditConstant(
+            auditConstant);
+
+    if (manager == null) {
+      return callerUGI.getShortUserName();
+    }
+
+    String reservationCreatorName = "";
+    ReservationAllocation reservation;
+    // Get the user associated with the reservation.
+    Plan plan = reservationSystem.getPlan(queueName);
+    if (reservationId != null && plan != null) {
+      reservation = plan.getReservationById(reservationId);
+      if (reservation != null) {
+        reservationCreatorName = reservation.getUser();
+      }
+    }
+
+    // If the reservation to be altered or listed belongs to the current user,
+    // access will be given.
+    if (reservationCreatorName != null && !reservationCreatorName.isEmpty()
+           && reservationCreatorName.equals(callerUGI.getUserName())) {
+      return callerUGI.getShortUserName();
+    }
+
+    // Check if the user has access to the specific ACL
+    if (manager.checkAccess(callerUGI, reservationACL, queueName)) {
+      return callerUGI.getShortUserName();
+    }
+
+    // If the user has Administer ACL then access is granted
+    if (manager.checkAccess(callerUGI, ReservationACL
+            .ADMINISTER_RESERVATIONS, queueName)) {
+      return callerUGI.getShortUserName();
+    }
+
+    handleNoAccess(callerUGI.getShortUserName(), queueName, auditConstant,
+            reservationACL.toString(), reservationACL.name());
+    throw new IllegalStateException();
+  }
+
+  private ReservationACL getReservationACLFromAuditConstant(
+          String auditConstant) throws YarnException{
+    if (auditConstant.equals(AuditConstants.SUBMIT_RESERVATION_REQUEST)) {
+      return ReservationACL.SUBMIT_RESERVATIONS;
+    } else if (auditConstant.equals(AuditConstants.LIST_RESERVATION_REQUEST)) {
+      return ReservationACL.LIST_RESERVATIONS;
+    } else if (auditConstant.equals(AuditConstants.DELETE_RESERVATION_REQUEST)
+          || auditConstant.equals(AuditConstants.UPDATE_RESERVATION_REQUEST)) {
+      return ReservationACL.ADMINISTER_RESERVATIONS;
+    } else {
+      String error = "Audit Constant " + auditConstant + " is not recognized.";
+      LOG.error(error);
+      throw RPCUtil.getRemoteException(new UnrecognizedOptionException(error));
+    }
+  }
+
+  private void handleNoAccess(String name, String queue, String auditConstant,
+          String acl, String op) throws YarnException {
+    RMAuditLogger.logFailure(
+            name,
+            auditConstant,
+            "User doesn't have permissions to " + acl, "ClientRMService",
+            auditConstant);
+    throw RPCUtil.getRemoteException(new AccessControlException("User "
+            + name + " cannot perform operation " + op + " on queue " + queue));

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 MOV83 MOV43 MOV42 MOV44 MOV44 INS44 MOV43 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS60 INS21 INS25 INS21 INS21 INS43 INS42 INS42 MOV60 MOV54 INS25 INS60 INS60 INS25 INS60 INS60 INS60 INS25 INS25 INS25 INS25 INS21 INS53 INS42 INS43 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 MOV21 MOV53 INS43 INS59 INS32 INS43 INS27 INS8 MOV32 INS7 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 MOV43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS8 INS32 INS8 INS32 INS14 INS42 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS40 INS42 INS42 UPD42 INS33 INS27 INS38 INS21 INS42 INS42 MOV32 INS42 INS33 MOV41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS21 INS25 INS27 INS32 INS41 INS42 INS42 INS42 INS42 INS42 INS41 UPD42 MOV42 MOV42 MOV42 UPD40 MOV40 MOV42 INS41 INS42 MOV32 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS40 INS41 INS32 INS8 INS25 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS33 INS32 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS7 INS27 INS8 INS27 INS38 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS41 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS41 INS60 INS21 INS53 INS42 INS42 UPD45 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS40 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS45 INS43 INS42 INS42 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL33 DEL33 DEL32 DEL38 DEL8 DEL25 DEL8 DEL31