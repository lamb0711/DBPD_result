YARN-3970. Add REST api support for Application Priority. Contributed by Naganarasimha G R.

+import org.apache.hadoop.yarn.api.protocolrecords.UpdateApplicationPriorityRequest;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.AppPriority;
+  @Path("/apps/{appid}/priority")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public AppPriority getAppPriority(@Context HttpServletRequest hsr,
+      @PathParam("appid") String appId) throws AuthorizationException {
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    String userName = "UNKNOWN-USER";
+    if (callerUGI != null) {
+      userName = callerUGI.getUserName();
+    }
+    RMApp app = null;
+    try {
+      app = getRMAppForAppId(appId);
+    } catch (NotFoundException e) {
+      RMAuditLogger.logFailure(userName, AuditConstants.KILL_APP_REQUEST,
+          "UNKNOWN", "RMWebService",
+          "Trying to get state of an absent application " + appId);
+      throw e;
+    }
+
+    AppPriority ret = new AppPriority();
+    ret.setPriority(
+        app.getApplicationSubmissionContext().getPriority().getPriority());
+
+    return ret;
+  }
+
+  @PUT
+  @Path("/apps/{appid}/priority")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response updateApplicationPriority(AppPriority targetPriority,
+      @Context HttpServletRequest hsr, @PathParam("appid") String appId)
+      throws AuthorizationException, YarnException, InterruptedException,
+          IOException {
+    init();
+    if (targetPriority == null) {
+      throw new YarnException("Target Priority cannot be null");
+    }
+
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    if (callerUGI == null) {
+      throw new AuthorizationException(
+          "Unable to obtain user name, user not authenticated");
+    }
+
+    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
+      return Response.status(Status.FORBIDDEN)
+          .entity("The default static user cannot carry out this operation.")
+          .build();
+    }
+
+    String userName = callerUGI.getUserName();
+    RMApp app = null;
+    try {
+      app = getRMAppForAppId(appId);
+    } catch (NotFoundException e) {
+      RMAuditLogger.logFailure(userName, AuditConstants.KILL_APP_REQUEST,
+          "UNKNOWN", "RMWebService",
+          "Trying to move an absent application " + appId);
+      throw e;
+    }
+    Priority priority = app.getApplicationSubmissionContext().getPriority();
+    if (priority == null
+        || priority.getPriority() != targetPriority.getPriority()) {
+      return modifyApplicationPriority(app, callerUGI,
+          targetPriority.getPriority());
+    }
+    return Response.status(Status.OK).entity(targetPriority).build();
+  }
+
+  private Response modifyApplicationPriority(final RMApp app,
+      UserGroupInformation callerUGI, final int appPriority)
+          throws IOException, InterruptedException {
+    String userName = callerUGI.getUserName();
+    try {
+      callerUGI.doAs(new PrivilegedExceptionAction<Void>() {
+        @Override
+        public Void run() throws IOException, YarnException {
+          Priority priority = Priority.newInstance(appPriority);
+          UpdateApplicationPriorityRequest request =
+              UpdateApplicationPriorityRequest
+                  .newInstance(app.getApplicationId(), priority);
+          rm.getClientRMService().updateApplicationPriority(request);
+          return null;
+        }
+      });
+    } catch (UndeclaredThrowableException ue) {
+      // if the root cause is a permissions issue
+      // bubble that up to the user
+      if (ue.getCause() instanceof YarnException) {
+        YarnException ye = (YarnException) ue.getCause();
+        if (ye.getCause() instanceof AccessControlException) {
+          String appId = app.getApplicationId().toString();
+          String msg = "Unauthorized attempt to change priority of appid "
+              + appId + " by remote user " + userName;
+          return Response.status(Status.FORBIDDEN).entity(msg).build();
+        } else if (ye.getMessage().startsWith("Application in")
+            && ye.getMessage().endsWith("state cannot be update priority.")) {
+          return Response.status(Status.BAD_REQUEST).entity(ye.getMessage())
+              .build();
+        } else {
+          throw ue;
+        }
+      } else {
+        throw ue;
+      }
+    }
+    AppPriority ret = new AppPriority(
+        app.getApplicationSubmissionContext().getPriority().getPriority());
+    return Response.status(Status.OK).entity(ret).build();
+  }
+
+  @GET

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS42 INS21 INS60 INS60 INS25 INS60 INS54 INS60 INS21 INS41 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS43 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS25 INS60 INS25 INS25 INS60 INS60 INS54 INS60 INS25 INS41 INS42 INS83 INS43 INS42 INS43 INS42 INS83 INS39 INS42 INS42 INS42 INS60 INS54 INS60 INS41 INS40 INS40 INS42 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS33 INS21 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS32 INS41 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS32 INS27 INS27 INS41 INS32 INS42 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS9 INS7 INS7 INS43 INS42 INS21 INS53 INS43 INS32 INS42 INS14 INS42 INS42 INS9 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS42 INS33 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS25 INS43 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS45 INS43 INS45 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS62 INS8 INS8 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS45 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS45 INS27 INS42 INS42 INS74 INS1 INS32 INS43 INS60 INS25 INS53 INS32 INS42 INS45 INS42 INS42 INS42 INS40 INS45 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS43 INS59 INS62 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS42 INS11 INS32 INS43 INS60 INS60 INS41 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS60 INS60 INS21 INS41 INS43 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS41 INS53 INS43 INS59 INS43 INS59 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42