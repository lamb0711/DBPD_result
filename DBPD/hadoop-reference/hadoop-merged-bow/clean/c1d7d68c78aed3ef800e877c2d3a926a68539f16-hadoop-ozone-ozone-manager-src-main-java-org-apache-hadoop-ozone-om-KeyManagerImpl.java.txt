HDDS-1461. Optimize listStatus api in OzoneFileSystem (#782)


+import com.google.common.base.Strings;
-import org.apache.commons.lang3.StringUtils;
+import org.apache.hadoop.ozone.om.helpers.OzoneFSUtils;
+import org.apache.hadoop.utils.db.CodecRegistry;
+import org.apache.hadoop.utils.db.RDBStore;
+import org.apache.hadoop.utils.db.TableIterator;
+import org.apache.hadoop.utils.db.Table;
-        return new OzoneFileStatus(keyName);
+        return new OzoneFileStatus(OZONE_URI_DELIMITER);
-      //Check if the key is a file.
+      // Check if the key is a file.
-      String dirKey = addTrailingSlashIfNeeded(keyName);
+      String dirKey = OzoneFSUtils.addTrailingSlashIfNeeded(keyName);
-          volumeName + "bucket: " + bucketName + "key: " + keyName,
+          volumeName + " bucket: " + bucketName + " key: " + keyName,
+    metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
-      metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
-
-      // verify bucket exists
-      OmBucketInfo bucketInfo = getBucketInfo(volumeName, bucketName);
-      verifyNoFilesInPath(volumeName, bucketName, Paths.get(keyName), false);
-      String dir = addTrailingSlashIfNeeded(keyName);
-      String dirDbKey =
-          metadataManager.getOzoneKey(volumeName, bucketName, dir);
-      FileEncryptionInfo encInfo = getFileEncryptionInfo(bucketInfo);
+      Path keyPath = Paths.get(keyName);
+      OzoneFileStatus status =
+          verifyNoFilesInPath(volumeName, bucketName, keyPath, false);
+      if (status != null && OzoneFSUtils.pathToKey(status.getPath())
+          .equals(keyName)) {
+        // if directory already exists
+        return;
+      }
-          createDirectoryKeyInfo(volumeName, bucketName, dir, new ArrayList<>(),
-              ReplicationFactor.ONE, ReplicationType.RATIS, encInfo);
+          createDirectoryKey(volumeName, bucketName, keyName);
+      String dirDbKey = metadataManager
+          .getOzoneKey(volumeName, bucketName, dirDbKeyInfo.getKeyName());
-
-  private OmKeyInfo createDirectoryKeyInfo(String volumeName, String bucketName,
-      String keyName, List<OmKeyLocationInfo> locations,
-      ReplicationFactor factor, ReplicationType type,
-      FileEncryptionInfo encInfo) {
+  private OmKeyInfo createDirectoryKey(String volumeName, String bucketName,
+      String keyName) throws IOException {
+    // verify bucket exists
+    OmBucketInfo bucketInfo = getBucketInfo(volumeName, bucketName);
+
+    String dir = OzoneFSUtils.addTrailingSlashIfNeeded(keyName);
+    FileEncryptionInfo encInfo = getFileEncryptionInfo(bucketInfo);
-        .setKeyName(keyName)
+        .setKeyName(dir)
-            new OmKeyLocationInfoGroup(0, locations)))
+            new OmKeyLocationInfoGroup(0, new ArrayList<>())))
-        .setReplicationType(type)
-        .setReplicationFactor(factor)
+        .setReplicationType(ReplicationType.RATIS)
+        .setReplicationFactor(ReplicationFactor.ONE)
+    metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
-      metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
-
+    metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
-      metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
+   * List the status for a file or a directory and its contents.
+   *
+   * @param args       Key args
+   * @param recursive  For a directory if true all the descendants of a
+   *                   particular directory are listed
+   * @param startKey   Key from which listing needs to start. If startKey exists
+   *                   its status is included in the final list.
+   * @param numEntries Number of entries to list from the start key
+   * @return list of file status
+   */
+  public List<OzoneFileStatus> listStatus(OmKeyArgs args, boolean recursive,
+      String startKey, long numEntries) throws IOException {
+    Preconditions.checkNotNull(args, "Key args can not be null");
+    String volumeName = args.getVolumeName();
+    String bucketName = args.getBucketName();
+    String keyName = args.getKeyName();
+
+    List<OzoneFileStatus> fileStatusList = new ArrayList<>();
+    metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
+    try {
+      if (Strings.isNullOrEmpty(startKey)) {
+        OzoneFileStatus fileStatus = getFileStatus(args);
+        if (fileStatus.isFile()) {
+          return Collections.singletonList(fileStatus);
+        }
+        startKey = OzoneFSUtils.addTrailingSlashIfNeeded(keyName);
+      }
+
+      String seekKeyInDb =
+          metadataManager.getOzoneKey(volumeName, bucketName, startKey);
+      String keyInDb = OzoneFSUtils.addTrailingSlashIfNeeded(
+          metadataManager.getOzoneKey(volumeName, bucketName, keyName));
+      TableIterator<String, ? extends Table.KeyValue<String, OmKeyInfo>>
+          iterator = metadataManager.getKeyTable().iterator();
+      iterator.seek(seekKeyInDb);
+
+      if (!iterator.hasNext()) {
+        return Collections.emptyList();
+      }
+
+      if (iterator.key().equals(keyInDb)) {
+        // skip the key which needs to be listed
+        iterator.next();
+      }
+
+      while (iterator.hasNext() && numEntries - fileStatusList.size() > 0) {
+        String entryInDb = iterator.key();
+        OmKeyInfo value = iterator.value().getValue();
+        if (entryInDb.startsWith(keyInDb)) {
+          String entryKeyName = value.getKeyName();
+          if (recursive) {
+            // for recursive list all the entries
+            fileStatusList.add(new OzoneFileStatus(value, scmBlockSize,
+                !OzoneFSUtils.isFile(entryKeyName)));
+            iterator.next();
+          } else {
+            // get the child of the directory to list from the entry. For
+            // example if directory to list is /a and entry is /a/b/c where
+            // c is a file. The immediate child is b which is a directory. c
+            // should not be listed as child of a.
+            String immediateChild = OzoneFSUtils
+                .getImmediateChild(entryKeyName, keyName);
+            boolean isFile = OzoneFSUtils.isFile(immediateChild);
+            if (isFile) {
+              fileStatusList
+                  .add(new OzoneFileStatus(value, scmBlockSize, !isFile));
+              iterator.next();
+            } else {
+              // if entry is a directory
+              fileStatusList.add(new OzoneFileStatus(immediateChild));
+              // skip the other descendants of this child directory.
+              iterator.seek(
+                  getNextGreaterString(volumeName, bucketName, immediateChild));
+            }
+          }
+        } else {
+          break;
+        }
+      }
+    } finally {
+      metadataManager.getLock().releaseBucketLock(volumeName, bucketName);
+    }
+    return fileStatusList;
+  }
+
+  private String getNextGreaterString(String volumeName, String bucketName,
+      String keyPrefix) throws IOException {
+    // Increment the last character of the string and return the new ozone key.
+    Preconditions.checkArgument(!Strings.isNullOrEmpty(keyPrefix),
+        "Key prefix is null or empty");
+    CodecRegistry codecRegistry =
+        ((RDBStore) metadataManager.getStore()).getCodecRegistry();
+    byte[] keyPrefixInBytes = codecRegistry.asRawData(keyPrefix);
+    keyPrefixInBytes[keyPrefixInBytes.length - 1]++;
+    String nextPrefix = codecRegistry.asObject(keyPrefixInBytes, String.class);
+    return metadataManager.getOzoneKey(volumeName, bucketName, nextPrefix);
+  }
+
+  /**
+   * @return OzoneFileStatus of the first directory found in path in reverse
+   * order
-  private void verifyNoFilesInPath(String volumeName, String bucketName,
-      Path path, boolean directoryMustExist) throws IOException {
+  private OzoneFileStatus verifyNoFilesInPath(String volumeName,
+      String bucketName, Path path, boolean directoryMustExist)
+      throws IOException {
-          break;
+          return fileStatus;
+    return null;
-  private String addTrailingSlashIfNeeded(String key) {
-    if (StringUtils.isNotEmpty(key) && !key.endsWith(OZONE_URI_DELIMITER)) {
-      return key + OZONE_URI_DELIMITER;
-    } else {
-      return key;
-    }
-  }

MOV26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 UPD40 INS40 INS40 INS40 INS40 INS31 UPD42 INS43 INS29 UPD83 UPD74 MOV74 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS43 MOV21 UPD42 MOV42 MOV60 INS60 MOV60 MOV21 MOV21 INS65 INS65 INS65 INS65 INS65 INS65 UPD43 INS43 INS42 INS39 INS42 INS43 UPD42 INS39 INS42 INS42 INS21 INS60 INS60 INS60 INS60 INS21 INS54 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS21 INS60 INS41 INS65 INS42 INS41 MOV43 INS59 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 UPD42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS5 INS59 INS37 INS43 INS59 INS32 INS66 INS66 INS33 INS60 INS60 INS25 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS32 INS42 INS42 INS42 INS25 INS60 INS60 INS60 INS21 INS25 INS25 INS61 INS21 INS42 INS42 INS38 INS45 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS2 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 MOV43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS32 INS8 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS38 MOV8 INS32 INS8 INS27 INS8 INS32 INS32 INS36 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS57 INS42 INS42 MOV32 INS42 INS42 INS32 INS27 INS32 INS41 UPD42 UPD42 INS40 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS60 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS76 INS42 INS32 INS42 INS42 INS42 MOV32 INS32 INS42 INS42 INS21 INS32 INS27 INS60 INS60 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS40 INS34 INS43 INS42 UPD45 UPD45 MOV42 MOV42 MOV42 INS42 MOV9 INS42 INS33 INS32 INS42 MOV42 UPD42 UPD42 INS42 UPD42 INS32 INS40 INS42 INS43 INS59 INS32 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS32 INS42 UPD42 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS34 INS43 INS59 INS43 INS59 INS32 INS8 MOV8 INS42 INS42 INS43 INS32 INS42 UPD42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS41 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 MOV43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV43 INS59 INS42 INS8 INS8 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS60 INS60 INS25 INS42 INS42 INS42 INS32 INS32 INS43 INS59 INS39 INS59 INS42 INS8 INS8 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS21 INS21 INS21 INS21 MOV14 INS43 INS42 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS38 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL32 DEL21 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL40 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL27 DEL32 DEL38 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL39