HDFS-5430. Support TTL on CacheDirectives. Contributed by Andrew Wang.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546301 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo;
-import org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo;
-          " -path <path> -replication <replication> -pool <pool-name>]\n";
+          " -path <path> -pool <pool-name> " +
+          "[-replication <replication>] [-ttl <time-to-live>]]\n";
-      listing.addRow("<replication>", "The cache replication factor to use. " +
-          "Defaults to 1.");
+      listing.addRow("<replication>", "The cache replication factor to use. " +
+          "Defaults to 1.");
+      listing.addRow("<time-to-live>", "How long the directive is " +
+          "valid. Can be specified in minutes, hours, and days via e.g. " +
+          "30m, 4h, 2d. Valid units are [smhd]." +
+          " If unspecified, the directive never expires.");
+      CacheDirectiveInfo.Builder builder = new CacheDirectiveInfo.Builder();
+
-      short replication = 1;
-      String replicationString =
-          StringUtils.popOptionWithArgument("-replication", args);
-      if (replicationString != null) {
-        replication = Short.parseShort(replicationString);
-      }
+      builder.setPath(new Path(path));
+
+      builder.setPool(poolName);
+
+      String replicationString =
+          StringUtils.popOptionWithArgument("-replication", args);
+      if (replicationString != null) {
+        Short replication = Short.parseShort(replicationString);
+        builder.setReplication(replication);
+      }
+
+      String ttlString = StringUtils.popOptionWithArgument("-ttl", args);
+      if (ttlString != null) {
+        try {
+          long ttl = DFSUtil.parseRelativeTime(ttlString);
+          builder.setExpiration(CacheDirectiveInfo.Expiration.newRelative(ttl));
+        } catch (IOException e) {
+          System.err.println(
+              "Error while parsing ttl value: " + e.getMessage());
+          return 1;
+        }
+      }
+
-      CacheDirectiveInfo directive = new CacheDirectiveInfo.Builder().
-          setPath(new Path(path)).
-          setReplication(replication).
-          setPool(poolName).
-          build();
+      CacheDirectiveInfo directive = builder.build();
-          "[-pool <pool-name>] ]\n";
+          "[-pool <pool-name>] [-ttl <time-to-live>]]\n";
+      listing.addRow("<time-to-live>", "How long the directive is " +
+          "valid. Can be specified in minutes, hours, and days via e.g. " +
+          "30m, 4h, 2d. Valid units are [smhd]." +
+          " If unspecified, the directive never expires.");
+      String ttlString = StringUtils.popOptionWithArgument("-ttl", args);
+      if (ttlString != null) {
+        long ttl;
+        try {
+          ttl = DFSUtil.parseRelativeTime(ttlString);
+        } catch (IOException e) {
+          System.err.println(
+              "Error while parsing ttl value: " + e.getMessage());
+          return 1;
+        }
+        builder.setExpiration(CacheDirectiveInfo.Expiration.newRelative(ttl));
+        modified = true;
+      }
-          addField("REPLICATION", Justification.RIGHT).
+          addField("REPL", Justification.RIGHT).
+          addField("EXPIRY", Justification.LEFT).
+        String expiry;
+        if (directive.getExpiration().getMillis() ==
+            CacheDirectiveInfo.Expiration.EXPIRY_NEVER) {
+          expiry = "never";
+        } else {
+          expiry = directive.getExpiration().toString();
+        }
+        row.add(expiry);

MOV26 INS26 INS40 MOV21 MOV60 MOV25 INS21 INS60 INS21 INS21 INS60 INS25 INS60 INS21 INS60 INS25 INS32 INS43 INS59 MOV32 INS32 INS43 INS59 INS27 INS8 MOV43 INS59 INS32 INS43 INS59 INS27 INS8 UPD45 INS45 INS42 INS42 INS45 INS27 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS60 INS42 INS42 INS32 INS42 INS33 INS54 INS42 INS32 UPD45 INS42 INS42 INS45 INS27 INS42 INS42 INS32 INS42 INS33 INS60 INS54 INS21 INS21 INS32 INS60 INS25 INS21 INS45 INS45 INS45 INS45 INS43 INS43 INS59 INS32 INS42 INS42 INS45 INS42 INS8 INS12 UPD42 MOV42 MOV42 INS45 INS45 INS45 INS45 INS42 INS42 INS45 INS42 INS39 INS59 INS8 INS12 INS32 INS7 MOV32 INS42 INS45 INS40 INS43 INS59 INS27 INS8 INS8 INS32 INS40 INS42 INS42 MOV32 INS42 INS42 INS42 MOV60 INS21 INS44 INS8 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS9 UPD45 INS42 INS42 INS32 INS40 INS21 INS21 INS42 INS42 INS42 UPD39 INS32 INS43 INS42 INS21 INS41 INS7 INS43 INS42 INS21 INS41 INS40 INS42 INS42 UPD45 INS32 INS42 INS7 INS7 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS34 INS42 INS32 INS42 INS32 INS34 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS40 UPD42 MOV42 INS27 INS42 INS42 INS42 INS40 INS42 INS27 INS32 INS42 INS45 INS32 INS45 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 DEL40 DEL43 DEL14 DEL42 DEL7 DEL42 DEL34 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60