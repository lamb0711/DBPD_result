HDFS-9833. Erasure coding: recomputing block checksum on the fly by reconstructing the missed/corrupt block data. Contributed by Rakesh R.

+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hdfs.server.datanode.erasurecode.StripedBlockChecksumReconstructor;
+import org.apache.hadoop.hdfs.server.datanode.erasurecode.StripedReconstructionInfo;
+import java.util.HashMap;
+import java.util.Map;
+@InterfaceAudience.Private
+    private final byte[] blockIndices;
+      this.blockIndices = stripedBlockInfo.getBlockIndices();
+    }
+
+    private static class LiveBlockInfo {
+      private final DatanodeInfo dn;
+      private final Token<BlockTokenIdentifier> token;
+
+      LiveBlockInfo(DatanodeInfo dn, Token<BlockTokenIdentifier> token) {
+        this.dn = dn;
+        this.token = token;
+      }
+
+      DatanodeInfo getDn() {
+        return dn;
+      }
+
+      Token<BlockTokenIdentifier> getToken() {
+        return token;
+      }
-      for (int idx = 0; idx < ecPolicy.getNumDataUnits(); idx++) {
-        ExtendedBlock block =
-            StripedBlockUtil.constructInternalBlock(blockGroup,
-            ecPolicy.getCellSize(), ecPolicy.getNumDataUnits(), idx);
-        DatanodeInfo targetDatanode = datanodes[idx];
-        Token<BlockTokenIdentifier> blockToken = blockTokens[idx];
-        checksumBlock(block, idx, blockToken, targetDatanode);
+      assert datanodes.length == blockIndices.length;
+
+      Map<Byte, LiveBlockInfo> liveDns = new HashMap<>(datanodes.length);
+      int blkIndxLen = blockIndices.length;
+      int numDataUnits = ecPolicy.getNumDataUnits();
+      // Prepare live datanode list. Missing data blocks will be reconstructed
+      // and recalculate checksum.
+      for (int idx = 0; idx < blkIndxLen; idx++) {
+        liveDns.put(blockIndices[idx],
+            new LiveBlockInfo(datanodes[idx], blockTokens[idx]));
+      }
+      for (int idx = 0; idx < numDataUnits && idx < blkIndxLen; idx++) {
+        try {
+          LiveBlockInfo liveBlkInfo = liveDns.get((byte) idx);
+          if (liveBlkInfo == null) {
+            // reconstruct block and calculate checksum for missing node
+            recalculateChecksum(idx);
+          } else {
+            try {
+              ExtendedBlock block = StripedBlockUtil.constructInternalBlock(
+                  blockGroup, ecPolicy.getCellSize(), numDataUnits, idx);
+              checksumBlock(block, idx, liveBlkInfo.getToken(),
+                  liveBlkInfo.getDn());
+            } catch (IOException ioe) {
+              LOG.warn("Exception while reading checksum", ioe);
+              // reconstruct block and calculate checksum for the failed node
+              recalculateChecksum(idx);
+            }
+          }
+        } catch (IOException e) {
+          LOG.warn("Failed to get the checksum", e);
+        }
-        //read byte-per-checksum
-        final int bpc = checksumData.getBytesPerCrc();
-        if (blockIdx == 0) { //first block
-          setBytesPerCRC(bpc);
-        } else if (bpc != getBytesPerCRC()) {
-          throw new IOException("Byte-per-checksum not matched: bpc=" + bpc
-              + " but bytesPerCRC=" + getBytesPerCRC());
-        }
-
-        //read crc-per-block
-        final long cpb = checksumData.getCrcPerBlock();
-        if (blockIdx == 0) {
-          setCrcPerBlock(cpb);
-        }
-
-        //read md5
-        final MD5Hash md5 = new MD5Hash(
-            checksumData.getMd5().toByteArray());
-        md5.write(md5writer);
-
-          LOG.debug("Retrieving checksum from an earlier-version DataNode: " +
-              "inferring checksum by reading first byte");
+          LOG.debug("Retrieving checksum from an earlier-version DataNode: "
+              + "inferring checksum by reading first byte");
-        if (blockIdx == 0) { // first block
-          setCrcType(ct);
-        } else if (getCrcType() != DataChecksum.Type.MIXED &&
-            getCrcType() != ct) {
-          // if crc types are mixed in a file
-          setCrcType(DataChecksum.Type.MIXED);
-        }
-
+        setOrVerifyChecksumProperties(blockIdx, checksumData.getBytesPerCrc(),
+            checksumData.getCrcPerBlock(), ct);
+        //read md5
+        final MD5Hash md5 = new MD5Hash(checksumData.getMd5().toByteArray());
+        md5.write(md5writer);
-          if (blockIdx == 0) {
-            LOG.debug("set bytesPerCRC=" + getBytesPerCRC()
-                + ", crcPerBlock=" + getCrcPerBlock());
-          }
+
+    /**
+     * Reconstruct this data block and recalculate checksum.
+     *
+     * @param errBlkIndex
+     *          error index to be reconstrcuted and recalculate checksum.
+     * @throws IOException
+     */
+    private void recalculateChecksum(int errBlkIndex) throws IOException {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Recalculate checksum for the missing/failed block index "
+            + errBlkIndex);
+      }
+      byte[] errIndices = new byte[1];
+      errIndices[0] = (byte) errBlkIndex;
+      StripedReconstructionInfo stripedReconInfo =
+          new StripedReconstructionInfo(
+          blockGroup, ecPolicy, blockIndices, datanodes, errIndices);
+      final StripedBlockChecksumReconstructor checksumRecon =
+          new StripedBlockChecksumReconstructor(
+          getDatanode().getErasureCodingWorker(), stripedReconInfo,
+          md5writer);
+      checksumRecon.reconstruct();
+
+      DataChecksum checksum = checksumRecon.getChecksum();
+      long crcPerBlock = checksum.getChecksumSize() <= 0 ? 0
+          : checksumRecon.getChecksumDataLen() / checksum.getChecksumSize();
+      setOrVerifyChecksumProperties(errBlkIndex, checksum.getBytesPerChecksum(),
+          crcPerBlock, checksum.getChecksumType());
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Recalculated checksum for the block index " + errBlkIndex
+            + ": md5=" + checksumRecon.getMD5());
+      }
+    }
+
+    private void setOrVerifyChecksumProperties(int blockIdx, int bpc,
+        final long cpb, DataChecksum.Type ct) throws IOException {
+      //read byte-per-checksum
+      if (blockIdx == 0) { //first block
+        setBytesPerCRC(bpc);
+      } else if (bpc != getBytesPerCRC()) {
+        throw new IOException("Byte-per-checksum not matched: bpc=" + bpc
+            + " but bytesPerCRC=" + getBytesPerCRC());
+      }
+
+      //read crc-per-block
+      if (blockIdx == 0) {
+        setCrcPerBlock(cpb);
+      }
+
+      if (blockIdx == 0) { // first block
+        setCrcType(ct);
+      } else if (getCrcType() != DataChecksum.Type.MIXED &&
+          getCrcType() != ct) {
+        // if crc types are mixed in a file
+        setCrcType(DataChecksum.Type.MIXED);
+      }
+
+      if (LOG.isDebugEnabled()) {
+        if (blockIdx == 0) {
+          LOG.debug("set bytesPerCRC=" + getBytesPerCRC()
+              + ", crcPerBlock=" + getCrcPerBlock());
+        }
+      }
+    }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS78 INS40 INS23 INS55 INS31 INS31 INS31 INS83 INS83 INS5 INS59 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 MOV78 MOV39 MOV42 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS39 INS85 INS42 INS21 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS42 INS44 INS44 INS8 INS43 INS42 INS8 INS74 INS42 INS8 INS6 INS60 INS60 INS60 INS24 INS24 MOV60 MOV21 INS65 INS65 INS65 INS39 INS42 INS42 INS25 INS60 INS21 INS60 MOV60 INS21 INS60 MOV60 MOV21 INS25 INS39 INS42 INS39 INS42 INS83 INS39 INS42 INS43 INS42 INS42 MOV25 MOV25 MOV25 MOV25 INS7 INS42 INS42 INS43 INS43 INS42 MOV43 INS42 MOV74 INS42 INS21 INS21 INS42 INS41 INS43 INS43 INS41 INS27 INS74 INS59 INS39 INS59 INS39 INS59 MOV58 MOV27 MOV37 INS8 INS58 INS27 INS37 INS8 MOV60 MOV21 INS66 INS42 INS66 INS42 INS32 INS8 INS5 INS59 INS7 INS43 INS59 INS83 INS43 INS32 INS43 INS59 INS39 INS32 INS8 INS40 INS22 INS32 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS40 INS40 INS43 INS43 INS43 INS42 INS14 INS42 INS40 INS42 MOV32 INS42 INS21 INS39 INS59 INS27 INS27 INS42 INS54 INS21 INS25 INS42 INS42 INS21 INS39 INS85 INS42 INS3 INS2 INS11 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 UPD42 INS16 INS42 INS42 INS32 UPD42 INS32 INS42 INS42 INS21 INS52 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS74 INS40 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS8 INS12 INS32 INS32 INS8 INS32 INS5 INS34 INS42 INS34 INS39 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS27 INS34 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS2 INS14 INS60 INS25 INS44 INS8 INS42 INS42 MOV32 MOV32 INS42 INS42 INS42 MOV21 INS42 INS42 INS27 INS39 INS85 INS42 INS42 INS32 INS42 INS32 INS34 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS43 MOV2 MOV2 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS21 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS54 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS32 INS8 INS12 INS42 INS42 INS45 INS42 INS39 INS42 INS42 INS42 MOV60 INS21 INS44 INS8 INS32 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 DEL42 DEL32 DEL8 DEL24 DEL8 DEL31 DEL83 DEL39 DEL42 DEL59 DEL60 DEL83 DEL39 DEL42 DEL59 DEL60 DEL42