Merge r1555021 through r1559304 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1559305 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_ADD_BLOCK;
+      inst.put(OP_ADD_BLOCK, new AddBlockOp());
+  static class AddBlockOp extends FSEditLogOp {
+    private String path;
+    private Block penultimateBlock;
+    private Block lastBlock;
+    
+    private AddBlockOp() {
+      super(OP_ADD_BLOCK);
+    }
+    
+    static AddBlockOp getInstance(OpInstanceCache cache) {
+      return (AddBlockOp) cache.get(OP_ADD_BLOCK);
+    }
+    
+    AddBlockOp setPath(String path) {
+      this.path = path;
+      return this;
+    }
+    
+    public String getPath() {
+      return path;
+    }
+
+    AddBlockOp setPenultimateBlock(Block pBlock) {
+      this.penultimateBlock = pBlock;
+      return this;
+    }
+    
+    Block getPenultimateBlock() {
+      return penultimateBlock;
+    }
+    
+    AddBlockOp setLastBlock(Block lastBlock) {
+      this.lastBlock = lastBlock;
+      return this;
+    }
+    
+    Block getLastBlock() {
+      return lastBlock;
+    }
+
+    @Override
+    public void writeFields(DataOutputStream out) throws IOException {
+      FSImageSerialization.writeString(path, out);
+      int size = penultimateBlock != null ? 2 : 1;
+      Block[] blocks = new Block[size];
+      if (penultimateBlock != null) {
+        blocks[0] = penultimateBlock;
+      }
+      blocks[size - 1] = lastBlock;
+      FSImageSerialization.writeCompactBlockArray(blocks, out);
+      // clientId and callId
+      writeRpcIds(rpcClientId, rpcCallId, out);
+    }
+    
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      path = FSImageSerialization.readString(in);
+      Block[] blocks = FSImageSerialization.readCompactBlockArray(in,
+          logVersion);
+      Preconditions.checkState(blocks.length == 2 || blocks.length == 1);
+      penultimateBlock = blocks.length == 1 ? null : blocks[0];
+      lastBlock = blocks[blocks.length - 1];
+      readRpcIds(in, logVersion);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder();
+      sb.append("AddBlockOp [path=")
+        .append(path)
+        .append(", penultimateBlock=")
+        .append(penultimateBlock == null ? "NULL" : penultimateBlock)
+        .append(", lastBlock=")
+        .append(lastBlock);
+      appendRpcIdsToString(sb, rpcClientId, rpcCallId);
+      sb.append("]");
+      return sb.toString();
+    }
+    
+    @Override
+    protected void toXml(ContentHandler contentHandler) throws SAXException {
+      XMLUtils.addSaxString(contentHandler, "PATH", path);
+      if (penultimateBlock != null) {
+        FSEditLogOp.blockToXml(contentHandler, penultimateBlock);
+      }
+      FSEditLogOp.blockToXml(contentHandler, lastBlock);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+    }
+    
+    @Override 
+    void fromXml(Stanza st) throws InvalidXmlException {
+      this.path = st.getValue("PATH");
+      List<Stanza> blocks = st.getChildren("BLOCK");
+      int size = blocks.size();
+      Preconditions.checkState(size == 1 || size == 2);
+      this.penultimateBlock = size == 2 ? 
+          FSEditLogOp.blockFromXml(blocks.get(0)) : null;
+      this.lastBlock = FSEditLogOp.blockFromXml(blocks.get(size - 1));
+      readRpcIdsFromXml(st);
+    }
+  }
+  

INS26 INS40 INS55 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS46 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS41 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS25 INS21 INS21 INS21 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS60 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS42 INS21 INS25 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS11 INS42 INS7 INS52 INS42 INS42 INS7 INS52 INS42 INS42 INS7 INS52 INS42 INS42 INS32 INS39 INS59 INS5 INS59 INS27 INS8 INS7 INS32 INS32 INS42 INS7 INS5 INS59 INS32 INS7 INS7 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS42 INS32 INS27 INS8 INS32 INS32 INS42 INS7 INS74 INS59 INS39 INS59 INS32 INS7 INS7 INS32 INS42 INS42 INS42 INS14 INS43 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS43 INS85 INS42 INS3 INS42 INS33 INS21 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS27 INS42 INS16 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS22 INS16 INS22 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS27 INS34 INS34 INS42 INS5 INS42 INS7 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS27 INS33 INS2 INS42 INS27 INS43 INS32 INS42 INS45 INS32 INS52 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS27 INS27 INS52 INS42 INS27 INS32 INS33 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS43 INS85 INS2 INS42 INS42 INS34 INS40 INS34 INS40 INS34 INS40 INS34 INS42 INS34 INS40 INS34 INS42 INS32 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS34 INS32 INS42 INS45 INS27 INS45 INS42 INS42 INS42 INS34 INS42 INS34 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS45