HDDS-2164 : om.db.checkpoints is getting filling up fast. (#1536)


+import java.util.zip.GZIPOutputStream;
+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
+   * Given a source directory, create a tar.gz file from it.
+   *
+   * @param sourcePath the path to the directory to be archived.
+   * @return tar.gz file
+   * @throws IOException
+   */
+  public static File createTarFile(Path sourcePath) throws IOException {
+    TarArchiveOutputStream tarOs = null;
+    try {
+      String sourceDir = sourcePath.toString();
+      String fileName = sourceDir.concat(".tar.gz");
+      FileOutputStream fileOutputStream = new FileOutputStream(fileName);
+      GZIPOutputStream gzipOutputStream =
+          new GZIPOutputStream(new BufferedOutputStream(fileOutputStream));
+      tarOs = new TarArchiveOutputStream(gzipOutputStream);
+      File folder = new File(sourceDir);
+      File[] filesInDir = folder.listFiles();
+      if (filesInDir != null) {
+        for (File file : filesInDir) {
+          addFilesToArchive(file.getName(), file, tarOs);
+        }
+      }
+      return new File(fileName);
+    } finally {
+      try {
+        org.apache.hadoop.io.IOUtils.closeStream(tarOs);
+      } catch (Exception e) {
+        LOG.error("Exception encountered when closing " +
+            "TAR file output stream: " + e);
+      }
+    }
+  }
+
+  private static void addFilesToArchive(String source, File file,
+                                        TarArchiveOutputStream
+                                            tarFileOutputStream)
+      throws IOException {
+    tarFileOutputStream.putArchiveEntry(new TarArchiveEntry(file, source));
+    if (file.isFile()) {
+      FileInputStream fileInputStream = new FileInputStream(file);
+      BufferedInputStream bufferedInputStream =
+          new BufferedInputStream(fileInputStream);
+      org.apache.commons.compress.utils.IOUtils.copy(bufferedInputStream,
+          tarFileOutputStream);
+      tarFileOutputStream.closeArchiveEntry();
+      fileInputStream.close();
+    } else if (file.isDirectory()) {
+      tarFileOutputStream.closeArchiveEntry();
+      File[] filesInDir = file.listFiles();
+      if (filesInDir != null) {
+        for (File cFile : filesInDir) {
+          addFilesToArchive(cFile.getAbsolutePath(), cFile,
+              tarFileOutputStream);
+        }
+      }
+    }
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS54 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS25 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS8 INS8 INS42 INS42 INS42 INS32 INS32 INS8 INS25 INS42 INS42 INS33 INS60 INS60 INS60 INS60 INS21 INS60 INS60 INS25 INS41 INS54 INS42 INS42 INS14 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS32 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS7 INS43 INS59 INS5 INS59 INS27 INS8 INS14 INS8 INS12 INS43 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS21 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS14 INS43 INS85 INS42 INS32 INS42 INS33 INS70 INS43 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS5 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS43 INS14 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS32 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS21 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS42 INS21 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42