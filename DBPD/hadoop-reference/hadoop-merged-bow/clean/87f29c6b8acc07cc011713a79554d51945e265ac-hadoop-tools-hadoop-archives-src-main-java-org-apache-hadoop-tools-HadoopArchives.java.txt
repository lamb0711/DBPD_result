HADOOP-12214. Parse 'HadoopArchive' commandline using cli Options. (Contributed by Vinayakumar B)

+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.GnuParser;
+import org.apache.commons.cli.HelpFormatter;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.Parser;
+  private static final String ARCHIVE_NAME = "archiveName";
+  private static final String REPLICATION = "r";
+  private static final String PARENT_PATH = "p";
+  private static final String HELP = "help";
-  private static final String usage = "Usage: archive"
-  + " -archiveName <NAME>.har -p <parent path> [-r <replication factor>]" +
-      "<src>* <dest>" +
+  private static final String usage = "archive"
+  + " <-archiveName <NAME>.har> <-p <parent path>> [-r <replication factor>]" +
+      " <src>* <dest>" +
-  
+
+  private void printUsage(Options opts, boolean printDetailed) {
+    HelpFormatter helpFormatter = new HelpFormatter();
+    if (printDetailed) {
+      helpFormatter.printHelp(usage.length() + 10, usage, null, opts, null,
+          false);
+    } else {
+      System.out.println(usage);
+    }
+  }
+
-      Path parentPath = null;
-      List<Path> srcPaths = new ArrayList<Path>();
-      Path destPath = null;
-      String archiveName = null;
-      if (args.length < 5) {
-        System.out.println(usage);
-        throw new IOException("Invalid usage.");
+      // Parse CLI options
+      Options options = new Options();
+      options.addOption(ARCHIVE_NAME, true,
+          "Name of the Archive. This is mandatory option");
+      options.addOption(PARENT_PATH, true,
+          "Parent path of sources. This is mandatory option");
+      options.addOption(REPLICATION, true, "Replication factor archive files");
+      options.addOption(HELP, false, "Show the usage");
+      Parser parser = new GnuParser();
+      CommandLine commandLine = parser.parse(options, args, true);
+
+      if (commandLine.hasOption(HELP)) {
+        printUsage(options, true);
+        return 0;
-      if (!"-archiveName".equals(args[0])) {
-        System.out.println(usage);
+      if (!commandLine.hasOption(ARCHIVE_NAME)) {
+        printUsage(options, false);
-      archiveName = args[1];
+      String archiveName = commandLine.getOptionValue(ARCHIVE_NAME);
-        System.out.println(usage);
+        printUsage(options, false);
-      int i = 2;
-      if (! "-p".equals(args[i])) {
-        System.out.println(usage);
+      if (!commandLine.hasOption(PARENT_PATH)) {
+        printUsage(options, false);
-      parentPath = new Path(args[i+1]);
+      Path parentPath = new Path(commandLine.getOptionValue(PARENT_PATH));
-        parentPath= parentPath.getFileSystem(getConf()).makeQualified(parentPath);
+        parentPath = parentPath.getFileSystem(getConf()).makeQualified(
+            parentPath);
-      i+=2;
-
-      if ("-r".equals(args[i])) {
-        repl = Short.parseShort(args[i+1]);
-        i+=2;
+      if (commandLine.hasOption(REPLICATION)) {
+        repl = Short.parseShort(commandLine.getOptionValue(REPLICATION));
+      // Remaining args
+      args = commandLine.getArgs();
+      List<Path> srcPaths = new ArrayList<Path>();
+      Path destPath = null;
-      for (; i < args.length; i++) {
+      for (int i = 0; i < args.length; i++) {
-            System.out.println(usage);
+            printUsage(options, false);
+      if (destPath == null) {
+        printUsage(options, false);
+        throw new IOException("Destination path not specified.");
+      }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS42 INS39 INS42 INS60 INS25 UPD45 UPD45 UPD45 INS42 INS43 INS59 INS42 INS8 MOV8 MOV60 MOV60 MOV25 MOV25 INS42 INS42 INS14 INS21 INS60 INS21 INS21 INS21 INS21 INS25 INS60 INS25 MOV21 INS43 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS43 INS43 INS32 INS8 INS38 INS8 MOV43 MOV43 INS59 MOV32 INS8 UPD7 INS58 UPD27 INS42 INS42 INS42 INS27 INS42 INS33 INS42 INS33 INS9 INS42 INS42 INS14 INS42 INS42 INS42 INS9 INS45 INS42 INS42 INS42 INS9 INS45 INS42 INS42 INS42 INS9 INS45 INS42 INS42 INS42 INS9 INS45 INS42 UPD42 INS14 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS21 INS41 INS32 MOV21 MOV53 UPD42 INS32 INS42 INS14 UPD42 INS42 INS42 MOV21 UPD42 INS32 INS39 INS59 INS42 INS33 INS32 INS34 INS43 INS43 INS42 INS42 INS42 INS42 INS9 INS32 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS9 UPD42 UPD42 INS9 UPD42 UPD42 INS9 INS42 INS42 INS42 UPD42 UPD42 INS9 UPD45 INS32 INS42 INS42 INS42 UPD42 UPD42 INS9 DEL33 DEL42 DEL33 DEL45 DEL42 DEL34 DEL2 DEL32 DEL38 DEL42 DEL42 DEL34 DEL2 DEL7 DEL39 DEL34 DEL40 DEL45 DEL42 DEL42 DEL2 DEL40 DEL42 DEL42 DEL42 DEL34 DEL27 DEL2 DEL14 DEL7 DEL21 DEL45 DEL42 DEL42 DEL2 DEL42 DEL42 DEL34 DEL27 DEL2 DEL34 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL40 DEL40 DEL34 DEL40