MAPREDUCE-3901. Modified JobHistory records in YARN to lazily load job and task reports so as to improve UI response times. Contributed by Siddarth Seth.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1294417 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.yarn.factory.providers.RecordFactoryProvider;
+import org.apache.hadoop.yarn.util.Records;
-
-  private final TaskType type;
-  private Counters counters;
-  private final long startTime;
-  private final long finishTime;
-  private TaskState state;
-  private final TaskReport report;
+  private final TaskInfo taskInfo;
+  private TaskReport report;
+  private TaskAttemptId successfulAttempt;
+  private List<String> reportDiagnostics = new LinkedList<String>();
+  private Lock taskAttemptsLock = new ReentrantLock();
+  private AtomicBoolean taskAttemptsLoaded = new AtomicBoolean(false);
-  
-  private static final Log LOG = LogFactory.getLog(CompletedTask.class);
-    LOG.debug("HandlingTaskId: [" + taskId + "]");
+    this.taskInfo = taskInfo;
-    this.startTime = taskInfo.getStartTime();
-    this.finishTime = taskInfo.getFinishTime();
-    this.type = TypeConverter.toYarn(taskInfo.getTaskType());
-    if (taskInfo.getCounters() != null)
-      this.counters = taskInfo.getCounters();
-    if (taskInfo.getTaskStatus() != null) {
-      this.state = TaskState.valueOf(taskInfo.getTaskStatus());
-    } else {
-      this.state = TaskState.KILLED;
-    }
-    report = RecordFactoryProvider.getRecordFactory(null).newRecordInstance(TaskReport.class);
-    for (TaskAttemptInfo attemptHistory : taskInfo.getAllTaskAttempts()
-        .values()) {
-      CompletedTaskAttempt attempt = new CompletedTaskAttempt(taskId, 
-          attemptHistory);
-      report.addAllDiagnostics(attempt.getDiagnostics()); //TODO TMI?
-      attempts.put(attempt.getID(), attempt);
-      if (attemptHistory.getTaskStatus() != null
-          && attemptHistory.getTaskStatus().equals(
-              TaskState.SUCCEEDED.toString())
-          && report.getSuccessfulAttempt() == null) {
-        report.setSuccessfulAttempt(TypeConverter.toYarn(attemptHistory
-            .getAttemptId()));
-      }
-    }
-    report.setTaskId(taskId);
-    report.setStartTime(startTime);
-    report.setFinishTime(finishTime);
-    report.setTaskState(state);
-    report.setProgress(getProgress());
-    report.setCounters(TypeConverter.toYarn(getCounters()));
-    report.addAllRunningAttempts(new ArrayList<TaskAttemptId>(attempts.keySet()));
+    loadAllTaskAttempts();
+    loadAllTaskAttempts();
-    return counters;
+    return taskInfo.getCounters();
-  public TaskReport getReport() {
+  public synchronized TaskReport getReport() {
+    if (report == null) {
+      constructTaskReport();
+    }
+  
+  
-    return type;
+    return TypeConverter.toYarn(taskInfo.getTaskType());
-    return state;
+    return taskInfo.getTaskStatus() == null ? TaskState.KILLED : TaskState
+        .valueOf(taskInfo.getTaskStatus());
+  private void constructTaskReport() {
+    loadAllTaskAttempts();
+    this.report = Records.newRecord(TaskReport.class);
+    report.setTaskId(taskId);
+    report.setStartTime(taskInfo.getStartTime());
+    report.setFinishTime(taskInfo.getFinishTime());
+    report.setTaskState(getState());
+    report.setProgress(getProgress());
+    report.setCounters(TypeConverter.toYarn(getCounters()));
+    if (successfulAttempt != null) {
+      report.setSuccessfulAttempt(successfulAttempt);
+    }
+    report.addAllDiagnostics(reportDiagnostics);
+    report
+        .addAllRunningAttempts(new ArrayList<TaskAttemptId>(attempts.keySet()));
+  }
+
+  private void loadAllTaskAttempts() {
+    if (taskAttemptsLoaded.get()) {
+      return;
+    }
+    taskAttemptsLock.lock();
+    try {
+      if (taskAttemptsLoaded.get()) {
+        return;
+      }
+
+      for (TaskAttemptInfo attemptHistory : taskInfo.getAllTaskAttempts()
+          .values()) {
+        CompletedTaskAttempt attempt =
+            new CompletedTaskAttempt(taskId, attemptHistory);
+        reportDiagnostics.addAll(attempt.getDiagnostics());
+        attempts.put(attempt.getID(), attempt);
+        if (successfulAttempt == null
+            && attemptHistory.getTaskStatus() != null
+            && attemptHistory.getTaskStatus().equals(
+                TaskState.SUCCEEDED.toString())) {
+          successfulAttempt =
+              TypeConverter.toYarn(attemptHistory.getAttemptId());
+        }
+      }
+      taskAttemptsLoaded.set(true);
+    } finally {
+      taskAttemptsLock.unlock();
+    }
+  }

INS26 INS26 INS26 MOV23 MOV23 MOV23 INS40 INS40 INS40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD43 UPD43 INS74 UPD43 UPD43 MOV42 MOV44 MOV44 INS8 MOV78 INS83 MOV43 INS42 INS8 MOV78 INS83 INS83 MOV43 INS42 INS8 MOV78 INS83 MOV43 INS42 INS8 MOV78 INS83 MOV43 INS42 MOV8 INS83 INS39 INS42 INS8 UPD83 MOV83 INS39 UPD42 MOV42 INS8 UPD42 UPD42 UPD42 UPD42 INS43 INS43 UPD42 INS14 UPD42 UPD42 INS14 UPD42 UPD42 INS14 MOV21 MOV21 INS21 INS21 INS41 MOV25 MOV41 INS41 INS41 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS25 MOV21 MOV21 INS25 INS21 INS54 INS42 INS42 INS74 INS43 INS43 INS9 INS32 INS32 MOV32 UPD27 INS8 MOV32 INS16 INS32 INS32 INS32 INS27 INS8 INS32 INS8 INS32 INS8 INS8 INS43 INS43 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS21 UPD27 MOV27 INS40 MOV32 INS42 INS22 INS42 INS42 MOV32 INS42 INS42 MOV32 UPD42 INS32 INS42 INS33 MOV21 UPD42 UPD42 INS42 INS42 INS41 INS42 INS42 INS25 MOV70 INS21 INS21 INS42 INS42 UPD42 INS32 INS52 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 INS32 INS8 INS32 INS32 UPD42 MOV42 UPD42 UPD42 INS42 INS42 MOV41 INS42 INS42 INS9 INS42 INS42 MOV27 UPD42 UPD42 INS27 INS27 MOV27 INS7 INS42 INS33 INS42 MOV32 DEL83 DEL83 DEL39 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL42 DEL43 DEL57 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL83 DEL42 DEL8 DEL31 DEL83 DEL42 DEL8 DEL31 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL42 DEL42 DEL33 DEL32 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22 DEL7 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31