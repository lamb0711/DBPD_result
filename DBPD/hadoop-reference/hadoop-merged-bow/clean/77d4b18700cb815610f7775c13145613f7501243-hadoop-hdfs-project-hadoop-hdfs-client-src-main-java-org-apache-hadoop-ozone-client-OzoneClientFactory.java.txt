HDFS-12385. Ozone: OzoneClient: Refactoring OzoneClient API. Contributed by Nadakumar.

-import org.apache.hadoop.ozone.client.rest.OzoneRestClient;
-import org.apache.hadoop.ozone.client.rpc.OzoneRpcClient;
+import org.apache.hadoop.ozone.client.protocol.ClientProtocol;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Proxy;
+
+import static org.apache.hadoop.ozone.OzoneConfigKeys
+    .OZONE_CLIENT_PROTOCOL;
+import static org.apache.hadoop.ozone.OzoneConfigKeys
+    .OZONE_CLIENT_PROTOCOL_REST;
+import static org.apache.hadoop.ozone.OzoneConfigKeys
+    .OZONE_CLIENT_PROTOCOL_RPC;
+ * Based on <code>ozone.client.protocol</code>, it decides which
+ * protocol to use for the communication.
+ * Default value is
+ * <code>org.apache.hadoop.ozone.client.rpc.RpcClient</code>.<br>
+ * OzoneClientFactory constructs a proxy using
+ * {@link OzoneClientInvocationHandler}
+ * and creates OzoneClient instance with it.
+ * {@link OzoneClientInvocationHandler} dispatches the call to
+ * underlying {@link ClientProtocol} implementation.
+  private enum ClientType {
+    RPC, REST
+  }
+
+  private static final Logger LOG = LoggerFactory.getLogger(
+      OzoneClientFactory.class);
+
-   * Returns an OzoneClient which will use RPC protocol to perform
-   * client operations.
-   *
+   * Returns an OzoneClient which will use protocol defined through
+   * <code>ozone.client.protocol</code> to perform client operations.
-    //TODO: get client based on ozone.client.protocol
-    return new OzoneRpcClient(getConfiguration());
+    return getClient(null);
-   *
-    return new OzoneRpcClient(getConfiguration());
+    return getClient(ClientType.RPC);
-   * Returns an OzoneClient which will use RPC protocol to perform
+   * Returns an OzoneClient which will use REST protocol to perform
-   *
-    return new OzoneRestClient(getConfiguration());
+    return getClient(ClientType.REST);
-   * Sets the configuration, which will be used while creating OzoneClient.
-   *
-   * @param conf
+   * Returns OzoneClient with protocol type set base on ClientType.
+   * @param clientType
+   * @return OzoneClient
+   * @throws IOException
-  public static void setConfiguration(Configuration conf) {
-    configuration = conf;
+  private static OzoneClient getClient(ClientType clientType)
+      throws IOException {
+    OzoneClientInvocationHandler clientHandler =
+        new OzoneClientInvocationHandler(getProtocolClass(clientType));
+    ClientProtocol proxy = (ClientProtocol) Proxy.newProxyInstance(
+        OzoneClientInvocationHandler.class.getClassLoader(),
+        new Class<?>[]{ClientProtocol.class}, clientHandler);
+    return new OzoneClient(proxy);
+
+  /**
+   * Based on the clientType, client protocol instance is created.
+   * If clientType is null, <code>ozone.client.protocol</code> property
+   * will be used to decide the protocol to be used.
+   * @param clientType type of client protocol to be created
+   * @return ClientProtocol implementation
+   * @throws IOException
+   */
+  private static ClientProtocol getProtocolClass(ClientType clientType)
+      throws IOException {
+    Class<? extends ClientProtocol> protocolClass = null;
+    if(clientType != null) {
+      switch (clientType) {
+      case RPC:
+        protocolClass = OZONE_CLIENT_PROTOCOL_RPC;
+        break;
+      case REST:
+        protocolClass = OZONE_CLIENT_PROTOCOL_REST;
+        break;
+      default:
+        LOG.warn("Invalid ClientProtocol type, falling back to RPC.");
+        protocolClass = OZONE_CLIENT_PROTOCOL_RPC;
+        break;
+      }
+    } else {
+      protocolClass = (Class<ClientProtocol>)
+          getConfiguration().getClass(
+              OZONE_CLIENT_PROTOCOL, OZONE_CLIENT_PROTOCOL_RPC);
+    }
+    try {
+      Constructor<? extends ClientProtocol> ctor =
+          protocolClass.getConstructor(Configuration.class);
+      return ctor.newInstance(getConfiguration());
+    } catch (Exception e) {
+      final String message = "Couldn't create protocol " + protocolClass;
+      LOG.warn(message, e);
+      if (e.getCause() instanceof IOException) {
+        throw (IOException) e.getCause();
+      } else {
+        throw new IOException(message, e);
+      }
+    }
+  }
+
+  /**
+   * Sets the configuration, which will be used while creating OzoneClient.
+   *
+   * @param conf
+   */
+  public static void setConfiguration(Configuration conf) {
+    configuration = conf;
+  }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 UPD40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS71 INS23 INS31 INS31 INS83 INS42 INS72 INS72 INS83 INS83 INS83 INS43 INS59 MOV43 MOV43 MOV29 INS83 INS83 MOV43 INS42 MOV43 INS8 MOV43 UPD42 MOV43 INS29 UPD83 INS43 UPD42 INS44 INS43 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS42 INS42 INS42 INS32 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS54 INS42 INS42 INS42 INS42 INS42 INS57 UPD66 UPD66 INS32 INS32 UPD66 INS32 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS74 INS59 INS27 INS8 INS8 INS8 INS12 INS43 UPD42 MOV42 INS33 INS42 INS40 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS11 UPD43 INS42 INS43 INS76 INS42 INS33 INS42 INS33 INS50 INS21 INS60 INS41 INS44 INS8 INS42 INS43 INS32 INS43 INS32 UPD42 INS42 INS43 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS21 INS10 INS7 INS74 INS59 INS32 INS43 INS42 INS60 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS3 INS42 INS42 INS42 INS7 INS42 INS7 INS32 INS7 INS42 INS11 INS43 INS76 INS42 INS32 INS42 INS42 MOV32 INS42 INS83 INS43 INS59 INS32 INS62 INS8 INS8 INS57 INS42 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS74 INS32 INS42 INS43 INS42 INS42 INS57 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS43 INS53 INS53 INS43 INS74 INS85 INS57 INS43 INS43 MOV32 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS11 INS14 INS42 INS43 INS76 INS43 INS42 INS42 INS42 INS43 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL32 DEL14 DEL42 DEL43 DEL14