YARN-9265. FPGA plugin fails to recognize Intel Processing Accelerator Card. Contributed by Peter Bacsko.

-import com.google.common.annotations.VisibleForTesting;
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+import org.apache.hadoop.fs.FileUtil;
+import org.apache.hadoop.util.Shell.ShellCommandExecutor;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga.discovery.AoclOutputBasedDiscoveryStrategy;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga.discovery.FPGADiscoveryStrategy;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga.discovery.ScriptBasedFPGADiscoveryStrategy;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga.discovery.SettingsBasedFPGADiscoveryStrategy;
-import java.util.Iterator;
-import java.util.List;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Sets;
-
-  public static final Logger LOG = LoggerFactory.getLogger(
+  private static final Logger LOG = LoggerFactory.getLogger(
+  private Function<String, Optional<String>> scriptRunner = this::runScript;
+
-  private static final int MAX_EXEC_TIMEOUT_MS = 10 * 1000;
+  public static final int MAX_EXEC_TIMEOUT_MS = 10 * 1000;
-  public synchronized static FpgaDiscoverer setInstance(FpgaDiscoverer newInstance) {
+  void setScriptRunner(Function<String, Optional<String>> scriptRunner) {
+    this.scriptRunner = scriptRunner;
+  }
+
+  @VisibleForTesting
+  static void reset() {
+    instance = new FpgaDiscoverer();
+  }
+
+  @VisibleForTesting
+  public static FpgaDiscoverer setInstance(FpgaDiscoverer newInstance) {
-  public synchronized void setConf(Configuration conf) {
-    this.conf = conf;
+  public void setConf(Configuration configuration) {
+    this.conf = configuration;
-  public synchronized void setResourceHanderPlugin(AbstractFpgaVendorPlugin plugin) {
-    this.plugin = plugin;
+  public void setResourceHanderPlugin(AbstractFpgaVendorPlugin vendorPlugin) {
+    this.plugin = vendorPlugin;
-  public synchronized boolean diagnose() {
+  public boolean diagnose() {
-  public synchronized void initialize(Configuration conf) throws YarnException {
-    this.conf = conf;
-    this.plugin.initPlugin(conf);
+  public void initialize(Configuration config) throws YarnException {
+    this.conf = config;
+    this.plugin.initPlugin(config);
-  public synchronized List<FpgaResourceAllocator.FpgaDevice> discover() throws ResourceHandlerException {
+  public List<FpgaResourceAllocator.FpgaDevice> discover()
+      throws ResourceHandlerException {
-    // whatever static or auto discover, we always needs
-    // the vendor plugin to discover. For instance, IntelFpgaOpenclPlugin need to
-    // setup a mapping of <major:minor> to <aliasDevName>
-    list = this.plugin.discover(MAX_EXEC_TIMEOUT_MS);
-    if (0 == list.size()) {
-      throw new ResourceHandlerException("No FPGA devices detected!");
+
+    String availableDevices = conf.get(
+        YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);
+    String discoveryScript = conf.get(
+        YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);
+
+    FPGADiscoveryStrategy discoveryStrategy;
+    if (availableDevices != null) {
+      discoveryStrategy =
+          new SettingsBasedFPGADiscoveryStrategy(
+              plugin.getFpgaType(), availableDevices);
+    } else if (discoveryScript != null) {
+      discoveryStrategy =
+          new ScriptBasedFPGADiscoveryStrategy(
+              plugin.getFpgaType(), scriptRunner, discoveryScript);
+    } else {
+      discoveryStrategy = new AoclOutputBasedDiscoveryStrategy(plugin);
-    currentFpgaInfo = list;
-    if (allowed.equalsIgnoreCase(
+
+    list = discoveryStrategy.discover();
+
+    if (allowed == null || allowed.equalsIgnoreCase(
-        return list;
+      return list;
-      String[] minors = allowed.split(",");
-      Iterator<FpgaResourceAllocator.FpgaDevice> iterator = list.iterator();
-      // remove the non-configured minor numbers
-      FpgaResourceAllocator.FpgaDevice t;
-      while (iterator.hasNext()) {
-        boolean valid = false;
-        t = iterator.next();
-        for (String minorNumber : minors) {
-          if (t.getMinor().toString().equals(minorNumber)) {
-            valid = true;
-            break;
-          }
-        }
-        if (!valid) {
-          iterator.remove();
-        }
-      }
+      Set<String> minors = Sets.newHashSet(allowed.split(","));
+
+      // Replace list with a filtered one
+      list = list
+        .stream()
+        .filter(dev -> minors.contains(dev.getMinor().toString()))
+        .collect(Collectors.toList());
+
-      if (list.size() != minors.length) {
+      if (list.size() != minors.size()) {
+
+    currentFpgaInfo = ImmutableList.copyOf(list);
+
+  private Optional<String> runScript(String path) {
+    if (path == null || path.trim().isEmpty()) {
+      LOG.error("Undefined script");
+      return Optional.empty();
+    }
+
+    File f = new File(path);
+    if (!f.exists()) {
+      LOG.error("Script does not exist");
+      return Optional.empty();
+    }
+
+    if (!FileUtil.canExecute(f)) {
+      LOG.error("Script is not executable");
+      return Optional.empty();
+    }
+
+    ShellCommandExecutor shell = new ShellCommandExecutor(
+        new String[] {path},
+        null,
+        null,
+        MAX_EXEC_TIMEOUT_MS);
+    try {
+      shell.execute();
+      String output = shell.getOutput();
+      return Optional.of(output);
+    } catch (IOException e) {
+      LOG.error("Cannot execute script", e);
+      return Optional.empty();
+    }
+  }

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 UPD83 INS83 INS74 INS59 UPD83 MOV78 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 MOV44 MOV83 MOV39 MOV42 MOV44 INS8 MOV44 MOV21 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS74 INS42 INS90 INS74 INS42 INS21 INS42 INS21 INS42 UPD42 MOV21 UPD42 MOV21 UPD42 MOV21 INS60 INS60 INS60 INS25 INS21 INS43 INS43 INS43 INS42 INS25 INS60 INS25 INS25 INS60 INS54 INS42 INS42 INS43 INS43 INS52 INS42 INS43 INS43 INS74 INS7 INS7 MOV43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS7 INS27 INS42 INS42 INS42 INS27 INS8 INS43 INS59 INS38 INS8 INS38 INS8 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS43 INS43 INS22 INS42 INS42 INS14 UPD42 MOV22 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS21 INS27 INS8 MOV8 INS42 INS32 INS27 MOV32 INS32 INS27 INS32 MOV21 INS41 INS42 INS42 INS14 INS32 INS21 INS41 INS32 INS21 INS41 INS42 INS42 INS14 INS21 INS60 INS41 INS44 INS8 INS42 INS42 INS52 INS42 INS43 INS42 INS42 INS40 INS42 INS42 INS40 INS7 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS43 INS3 INS33 INS33 INS42 INS32 INS43 INS59 INS32 INS43 INS42 INS21 INS41 INS42 INS42 INS14 INS7 INS7 INS74 INS7 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 MOV5 INS4 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS32 INS42 INS42 INS14 INS42 INS14 INS43 INS43 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 UPD43 MOV43 INS42 INS42 INS42 INS42 INS42 MOV32 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD42 MOV42 INS86 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS59 INS32 UPD42 MOV42 INS42 INS42 MOV32 UPD42 DEL83 DEL83 DEL42 DEL42 DEL32 DEL83 DEL8 DEL31 DEL83 DEL83 DEL83 DEL45 DEL14 DEL53 DEL34 DEL32 DEL27 DEL25 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL39 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL38 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL40 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7