Revert "HADOOP-15852. Refactor QuotaUsage. Contributed by Beluga Behr."

This reverts commit fb9deed41d6b9f242474b474a5acde0c858e28f6.

-      this.quota = -1L;
-      this.spaceQuota = -1L;
+      this.quota = -1;
+      this.spaceQuota = -1;
-      Arrays.fill(typeQuota, -1L);
+      for (int i = 0; i < typeQuota.length; i++) {
+        typeQuota[i] = -1;
+      }
-      System.arraycopy(typeConsumed, 0, this.typeConsumed, 0,
-          typeConsumed.length);
+      for (int i = 0; i < typeConsumed.length; i++) {
+        this.typeConsumed[i] = typeConsumed[i];
+      }
-      System.arraycopy(typeQuota, 0, this.typeQuota, 0,
-          typeQuota.length);
+      for (int i = 0; i < typeQuota.length; i++) {
+        this.typeQuota[i] = typeQuota[i];
+      }
-    return (typeQuota != null) ? typeQuota[type.ordinal()] : -1L;
+    return (typeQuota != null) ? typeQuota[type.ordinal()] : -1;
-    return (typeConsumed != null) ? typeConsumed[type.ordinal()] : 0L;
+    return (typeConsumed != null) ? typeConsumed[type.ordinal()] : 0;
+  }
+
+  /** Return storage type quota. */
+  private long[] getTypesQuota() {
+    return typeQuota;
+  }
+
+  /** Return storage type quota. */
+  private long[] getTypesConsumed() {
+    return typeConsumed;
-      if (typeQuota[t.ordinal()] > 0L) {
+      if (typeQuota[t.ordinal()] > 0) {
-      if (typeConsumed[t.ordinal()] > 0L) {
+      if (typeConsumed[t.ordinal()] > 0) {
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result
-        + (int) (fileAndDirectoryCount ^ (fileAndDirectoryCount >>> 32));
-    result = prime * result + (int) (quota ^ (quota >>> 32));
-    result = prime * result + (int) (spaceConsumed ^ (spaceConsumed >>> 32));
-    result = prime * result + (int) (spaceQuota ^ (spaceQuota >>> 32));
-    result = prime * result + Arrays.hashCode(typeConsumed);
-    result = prime * result + Arrays.hashCode(typeQuota);
-    return result;
+  public boolean equals(Object to) {
+    return (this == to || (to instanceof QuotaUsage &&
+        getFileAndDirectoryCount() ==
+        ((QuotaUsage) to).getFileAndDirectoryCount() &&
+        getQuota() == ((QuotaUsage) to).getQuota() &&
+        getSpaceConsumed() == ((QuotaUsage) to).getSpaceConsumed() &&
+        getSpaceQuota() == ((QuotaUsage) to).getSpaceQuota() &&
+        Arrays.equals(getTypesQuota(), ((QuotaUsage) to).getTypesQuota()) &&
+        Arrays.equals(getTypesConsumed(),
+        ((QuotaUsage) to).getTypesConsumed())));
-  public boolean equals(Object obj) {
-    if (this == obj) {
-      return true;
+  public int hashCode() {
+    long result = (getFileAndDirectoryCount() ^ getQuota() ^
+        getSpaceConsumed() ^ getSpaceQuota());
+    if (getTypesQuota() != null) {
+      for (long quota : getTypesQuota()) {
+        result ^= quota;
+      }
-    if (obj == null) {
-      return false;
+    if (getTypesConsumed() != null) {
+      for (long consumed : getTypesConsumed()) {
+        result ^= consumed;
+      }
-    if (getClass() != obj.getClass()) {
-      return false;
-    }
-    QuotaUsage other = (QuotaUsage) obj;
-    if (fileAndDirectoryCount != other.fileAndDirectoryCount) {
-      return false;
-    }
-    if (quota != other.quota) {
-      return false;
-    }
-    if (spaceConsumed != other.spaceConsumed) {
-      return false;
-    }
-    if (spaceQuota != other.spaceQuota) {
-      return false;
-    }
-    if (!Arrays.equals(typeConsumed, other.typeConsumed)) {
-      return false;
-    }
-    if (!Arrays.equals(typeQuota, other.typeQuota)) {
-      return false;
-    }
-    return true;
+    return (int)result;
-    if (quota > 0L) {
+    if (quota > 0) {
-    if (spaceQuota >= 0L) {
+    if (spaceQuota >= 0) {
-    StringBuilder content = new StringBuilder();
+    StringBuffer content = new StringBuffer();
-    StringBuilder header = new StringBuilder();
+    StringBuffer header = new StringBuffer();
+
-      final String storageName = st.toString();
+      String storageName = st.toString();

INS31 INS31 INS31 INS29 UPD83 MOV83 INS5 UPD42 MOV42 INS8 INS29 INS83 INS5 INS42 INS8 MOV78 INS83 INS39 INS42 MOV44 INS8 MOV78 UPD39 UPD42 INS65 INS39 INS85 INS41 INS65 INS39 INS85 INS41 UPD42 INS41 INS60 INS25 INS25 INS41 INS24 INS24 INS24 INS66 INS42 INS66 INS42 INS36 INS39 INS59 MOV27 INS8 MOV27 INS8 INS11 UPD43 UPD43 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 UPD34 INS27 INS42 INS36 INS32 INS33 INS70 INS32 INS33 INS70 INS39 INS42 UPD34 UPD34 UPD42 UPD42 INS39 INS59 INS42 INS40 INS42 INS21 INS39 INS59 INS42 INS40 INS42 INS21 INS39 INS59 INS42 INS40 INS42 INS21 UPD34 INS27 INS36 INS27 INS42 INS44 INS32 INS8 INS42 INS44 INS32 INS8 UPD43 UPD43 UPD34 UPD34 INS42 INS34 INS7 INS42 INS34 INS7 INS42 INS34 INS7 UPD34 UPD34 INS52 INS42 INS27 INS32 MOV32 MOV32 INS32 INS39 INS42 INS42 INS21 INS39 INS42 UPD42 MOV42 INS21 UPD42 UPD42 INS2 INS38 INS2 INS2 INS2 INS2 INS27 INS32 INS42 UPD42 UPD42 INS42 INS7 INS7 INS42 INS42 UPD34 MOV34 MOV22 INS42 INS42 INS42 MOV22 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS32 INS32 INS42 INS36 UPD42 MOV42 INS27 INS27 INS32 INS32 INS42 INS36 UPD42 MOV42 INS11 INS27 INS27 INS32 INS32 INS42 INS36 INS42 MOV11 MOV43 INS42 INS62 INS27 INS32 INS32 INS42 INS36 INS42 INS11 UPD42 INS42 INS43 INS32 INS32 INS42 INS36 INS42 INS11 INS43 INS42 INS42 INS42 INS36 INS42 INS11 INS43 INS42 INS42 INS11 INS43 INS42 INS42 INS43 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL38 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL34 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL34 DEL40 DEL32 DEL21 DEL39 DEL83 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL42 DEL27 DEL39 DEL42 DEL42 DEL34 DEL27 DEL36 DEL27 DEL36 DEL11 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL39 DEL42 DEL42 DEL34 DEL27 DEL36 DEL27 DEL36 DEL11 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL39 DEL42 DEL42 DEL34 DEL27 DEL36 DEL27 DEL36 DEL11 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL39 DEL42 DEL42 DEL34 DEL27 DEL36 DEL27 DEL36 DEL11 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL40 DEL42 DEL40 DEL52 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL33 DEL27 DEL9 DEL41 DEL8 DEL25 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL59 DEL60 DEL9 DEL41 DEL8 DEL25 DEL42 DEL40 DEL27 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL42 DEL40 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL40 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL83