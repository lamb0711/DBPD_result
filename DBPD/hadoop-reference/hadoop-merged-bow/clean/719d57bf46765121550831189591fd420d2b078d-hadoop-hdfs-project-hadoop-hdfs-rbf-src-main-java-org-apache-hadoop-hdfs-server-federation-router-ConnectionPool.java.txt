HDFS-14545. RBF: Router should support GetUserMappingsProtocol. Contributed by Ayush Saxena.

+import java.lang.reflect.Constructor;
+import java.util.HashMap;
+import org.apache.hadoop.security.RefreshUserMappingsProtocol;
+import org.apache.hadoop.security.protocolPB.RefreshUserMappingsProtocolClientSideTranslatorPB;
+import org.apache.hadoop.security.protocolPB.RefreshUserMappingsProtocolPB;
+import org.apache.hadoop.tools.GetUserMappingsProtocol;
+import org.apache.hadoop.tools.protocolPB.GetUserMappingsProtocolClientSideTranslatorPB;
+import org.apache.hadoop.tools.protocolPB.GetUserMappingsProtocolPB;
+  /** Map for the protocols and their protobuf implementations. */
+  private final static Map<Class<?>, ProtoImpl> PROTO_MAP = new HashMap<>();
+  static {
+    PROTO_MAP.put(ClientProtocol.class,
+        new ProtoImpl(ClientNamenodeProtocolPB.class,
+            ClientNamenodeProtocolTranslatorPB.class));
+    PROTO_MAP.put(NamenodeProtocol.class, new ProtoImpl(
+        NamenodeProtocolPB.class, NamenodeProtocolTranslatorPB.class));
+    PROTO_MAP.put(RefreshUserMappingsProtocol.class,
+        new ProtoImpl(RefreshUserMappingsProtocolPB.class,
+            RefreshUserMappingsProtocolClientSideTranslatorPB.class));
+    PROTO_MAP.put(GetUserMappingsProtocol.class,
+        new ProtoImpl(GetUserMappingsProtocolPB.class,
+            GetUserMappingsProtocolClientSideTranslatorPB.class));
+  }
+
+  /** Class to store the protocol implementation. */
+  private static class ProtoImpl {
+    private final Class<?> protoPb;
+    private final Class<?> protoClientPb;
+
+    ProtoImpl(Class<?> pPb, Class<?> pClientPb) {
+      this.protoPb = pPb;
+      this.protoClientPb = pClientPb;
+    }
+  }
+   * @param <T>
-  protected static ConnectionContext newConnection(Configuration conf,
-      String nnAddress, UserGroupInformation ugi, Class<?> proto)
-          throws IOException {
-    ConnectionContext ret;
-    if (proto == ClientProtocol.class) {
-      ret = newClientConnection(conf, nnAddress, ugi);
-    } else if (proto == NamenodeProtocol.class) {
-      ret = newNamenodeConnection(conf, nnAddress, ugi);
-    } else {
-      String msg = "Unsupported protocol for connection to NameNode: " +
-          ((proto != null) ? proto.getClass().getName() : "null");
+  protected static <T> ConnectionContext newConnection(Configuration conf,
+      String nnAddress, UserGroupInformation ugi, Class<T> proto)
+      throws IOException {
+    if (!PROTO_MAP.containsKey(proto)) {
+      String msg = "Unsupported protocol for connection to NameNode: "
+          + ((proto != null) ? proto.getClass().getName() : "null");
-    return ret;
-  }
+    ProtoImpl classes = PROTO_MAP.get(proto);
+    RPC.setProtocolEngine(conf, classes.protoPb, ProtobufRpcEngine.class);
-  /**
-   * Creates a proxy wrapper for a client NN connection. Each proxy contains
-   * context for a single user/security context. To maximize throughput it is
-   * recommended to use multiple connection per user+server, allowing multiple
-   * writes and reads to be dispatched in parallel.
-   *
-   * Mostly based on NameNodeProxies#createNonHAProxy() but it needs the
-   * connection identifier.
-   *
-   * @param conf Configuration for the connection.
-   * @param nnAddress Address of server supporting the ClientProtocol.
-   * @param ugi User context.
-   * @return Proxy for the target ClientProtocol that contains the user's
-   *         security context.
-   * @throws IOException If it cannot be created.
-   */
-  private static ConnectionContext newClientConnection(
-      Configuration conf, String nnAddress, UserGroupInformation ugi)
-          throws IOException {
-    RPC.setProtocolEngine(
-        conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);
-
-    final RetryPolicy defaultPolicy = RetryUtils.getDefaultRetryPolicy(
-        conf,
+    final RetryPolicy defaultPolicy = RetryUtils.getDefaultRetryPolicy(conf,
-    final long version = RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);
-    ClientNamenodeProtocolPB proxy = RPC.getProtocolProxy(
-        ClientNamenodeProtocolPB.class, version, socket, ugi, conf,
-        factory, RPC.getRpcTimeout(conf), defaultPolicy, null).getProxy();
-    ClientProtocol client = new ClientNamenodeProtocolTranslatorPB(proxy);
+    final long version = RPC.getProtocolVersion(classes.protoPb);
+    Object proxy = RPC.getProtocolProxy(classes.protoPb, version, socket, ugi,
+        conf, factory, RPC.getRpcTimeout(conf), defaultPolicy, null).getProxy();
+    T client = newProtoClient(proto, classes, proxy);
-    ProxyAndInfo<ClientProtocol> clientProxy =
-        new ProxyAndInfo<ClientProtocol>(client, dtService, socket);
+    ProxyAndInfo<T> clientProxy =
+        new ProxyAndInfo<T>(client, dtService, socket);
-  /**
-   * Creates a proxy wrapper for a NN connection. Each proxy contains context
-   * for a single user/security context. To maximize throughput it is
-   * recommended to use multiple connection per user+server, allowing multiple
-   * writes and reads to be dispatched in parallel.
-   *
-   * @param conf Configuration for the connection.
-   * @param nnAddress Address of server supporting the ClientProtocol.
-   * @param ugi User context.
-   * @return Proxy for the target NamenodeProtocol that contains the user's
-   *         security context.
-   * @throws IOException If it cannot be created.
-   */
-  private static ConnectionContext newNamenodeConnection(
-      Configuration conf, String nnAddress, UserGroupInformation ugi)
-          throws IOException {
-    RPC.setProtocolEngine(
-        conf, NamenodeProtocolPB.class, ProtobufRpcEngine.class);
-
-    final RetryPolicy defaultPolicy = RetryUtils.getDefaultRetryPolicy(
-        conf,
-        HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY,
-        HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT,
-        HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,
-        HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,
-        HdfsConstants.SAFEMODE_EXCEPTION_CLASS_NAME);
-
-    SocketFactory factory = SocketFactory.getDefault();
-    if (UserGroupInformation.isSecurityEnabled()) {
-      SaslRpcServer.init(conf);
+  private static <T> T newProtoClient(Class<T> proto, ProtoImpl classes,
+      Object proxy) {
+    try {
+      Constructor<?> constructor =
+          classes.protoClientPb.getConstructor(classes.protoPb);
+      Object o = constructor.newInstance(new Object[] {proxy});
+      if (proto.isAssignableFrom(o.getClass())) {
+        @SuppressWarnings("unchecked")
+        T client = (T) o;
+        return client;
+      }
+    } catch (Exception e) {
+      LOG.error(e.getMessage());
-    InetSocketAddress socket = NetUtils.createSocketAddr(nnAddress);
-    final long version = RPC.getProtocolVersion(NamenodeProtocolPB.class);
-    NamenodeProtocolPB proxy = RPC.getProtocolProxy(NamenodeProtocolPB.class,
-        version, socket, ugi, conf,
-        factory, RPC.getRpcTimeout(conf), defaultPolicy, null).getProxy();
-    NamenodeProtocol client = new NamenodeProtocolTranslatorPB(proxy);
-    Text dtService = SecurityUtil.buildTokenService(socket);
-
-    ProxyAndInfo<NamenodeProtocol> clientProxy =
-        new ProxyAndInfo<NamenodeProtocol>(client, dtService, socket);
-    ConnectionContext connection = new ConnectionContext(clientProxy);
-    return connection;
+    return null;
-}
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS28 INS55 INS31 INS29 INS83 INS83 INS83 INS74 INS59 INS83 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS31 MOV29 UPD83 INS73 MOV43 UPD42 MOV44 MOV44 MOV44 INS44 MOV43 INS83 INS83 INS73 INS43 INS42 INS44 INS44 INS44 INS8 INS65 INS43 INS74 INS43 INS42 INS14 INS21 INS21 INS21 MOV21 INS65 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS42 INS44 MOV44 INS8 INS65 INS42 INS74 UPD42 MOV42 MOV25 INS60 INS42 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS54 INS41 INS66 INS42 INS43 INS76 INS42 INS74 INS32 INS32 INS32 INS66 INS43 INS76 UPD42 MOV42 INS43 INS76 UPD42 MOV42 INS74 INS42 UPD42 INS21 INS21 INS66 INS42 INS66 INS43 INS43 INS38 INS43 INS59 UPD43 UPD43 UPD74 MOV74 INS43 INS43 INS42 INS42 INS8 INS12 INS33 UPD42 MOV42 INS43 UPD42 MOV42 UPD42 MOV42 MOV57 INS14 INS42 INS42 MOV57 INS14 INS42 INS42 INS57 INS14 UPD42 INS42 INS57 INS14 UPD42 MOV42 UPD42 MOV42 INS43 INS76 INS7 INS7 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 INS40 UPD42 UPD42 INS32 UPD43 UPD42 MOV42 UPD42 MOV42 INS60 MOV60 INS25 INS44 INS8 INS42 INS43 MOV57 INS57 INS43 MOV57 INS57 INS43 INS43 INS57 INS57 INS43 INS43 INS57 INS57 UPD42 MOV42 INS22 INS42 INS22 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 UPD42 UPD74 MOV74 INS74 INS59 UPD43 INS32 INS8 INS43 INS42 INS21 INS42 MOV43 UPD42 MOV42 MOV43 UPD42 MOV42 INS42 INS43 INS43 INS42 INS42 UPD43 MOV43 UPD43 MOV43 INS52 INS42 INS52 INS42 INS40 UPD43 INS43 INS76 INS42 INS32 UPD42 INS42 INS32 INS42 INS42 INS32 MOV60 INS41 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS40 UPD42 MOV42 INS40 INS42 INS42 INS3 UPD42 MOV42 UPD42 MOV42 INS79 INS43 INS42 INS42 INS42 INS32 INS5 INS4 INS42 INS45 UPD42 MOV42 INS42 INS11 INS42 INS42 INS43 INS85 INS42 INS43 INS42 INS42 INS42 DEL42 DEL42 DEL57 DEL57 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL83 DEL43 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL39 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL43 DEL42 DEL44 DEL43 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL57 DEL42 DEL43 DEL57 DEL42 DEL14 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL14 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL14