HDDS-247. Handle CLOSED_CONTAINER_IO exception in ozoneClient. Contributed by Shashikant Banerjee.

+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;
+import java.nio.ByteBuffer;
+import java.util.Optional;
+  @VisibleForTesting
+  public int getOpenID() {
+    return openID;
+  }
+
-    checkNotClosed();
-
-    if (streamEntries.size() <= currentStreamIndex) {
-      Preconditions.checkNotNull(omClient);
-      // allocate a new block, if a exception happens, log an error and
-      // throw exception to the caller directly, and the write fails.
-      try {
-        allocateNewBlock(currentStreamIndex);
-      } catch (IOException ioe) {
-        LOG.error("Allocate block fail when writing.");
-        throw ioe;
-      }
-    }
-    ChunkOutputStreamEntry entry = streamEntries.get(currentStreamIndex);
-    entry.write(b);
-    incrementBlockLength(currentStreamIndex, 1);
-    if (entry.getRemaining() <= 0) {
-      currentStreamIndex += 1;
-    }
-    byteOffset += 1;
+    byte[] buf = new byte[1];
+    buf[0] = (byte) b;
+    write(buf, 0, 1);
+    handleWrite(b, off, len);
+  }
+  private void handleWrite(byte[] b, int off, int len) throws IOException {
-      int writeLen = Math.min(len, (int)current.getRemaining());
-      current.write(b, off, writeLen);
+      int writeLen = Math.min(len, (int) current.getRemaining());
+      try {
+        current.write(b, off, writeLen);
+      } catch (IOException ioe) {
+        if (checkIfContainerIsClosed(ioe)) {
+          handleCloseContainerException(current, currentStreamIndex);
+          continue;
+        } else {
+          throw ioe;
+        }
+      }
+        // since the current block is already written close the stream.
+        handleFlushOrClose(true);
+   * It performs following actions :
+   * a. Updates the committed length at datanode for the current stream in
+   *    datanode.
+   * b. Reads the data from the underlying buffer and writes it the next stream.
+   *
+   * @param streamEntry StreamEntry
+   * @param streamIndex Index of the entry
+   * @throws IOException Throws IOexception if Write fails
+   */
+  private void handleCloseContainerException(ChunkOutputStreamEntry streamEntry,
+      int streamIndex) throws IOException {
+    // TODO : If the block is still not committed and is in the
+    // pending openBlock Map, it will return BLOCK_NOT_COMMITTED
+    // exception. We should handle this by retrying the same operation
+    // n times and update the OzoneManager with the actual block length
+    // written. At this point of time, we also need to allocate new blocks
+    // from a different container and may need to nullify
+    // all the remaining pre-allocated blocks in case they were
+    // pre-allocated on the same container which got closed now.This needs
+    // caching the closed container list on the client itself.
+    long committedLength = 0;
+    ByteBuffer buffer = streamEntry.getBuffer();
+    if (buffer == null) {
+      // the buffer here will be null only when closeContainerException is
+      // hit while calling putKey during close on chunkOutputStream.
+      // Since closeContainer auto commit pending keys, no need to do
+      // anything here.
+      return;
+    }
+
+    // In case where not a single chunk of data has been written to the Datanode
+    // yet. This block does not yet exist on the datanode but cached on the
+    // outputStream buffer. No need to call GetCommittedBlockLength here
+    // for this block associated with the stream here.
+    if (streamEntry.currentPosition >= chunkSize
+        || streamEntry.currentPosition != buffer.position()) {
+      ContainerProtos.GetCommittedBlockLengthResponseProto responseProto =
+          ContainerProtocolCalls
+              .getCommittedBlockLength(streamEntry.xceiverClient,
+                  streamEntry.blockID, requestID);
+      committedLength = responseProto.getBlockLength();
+      // update the length of the current stream
+      locationInfoList.get(streamIndex).setLength(committedLength);
+    }
+
+    if (buffer.position() > 0) {
+      // If the data is still cached in the underlying stream, we need to
+      // allocate new block and write this data in the datanode. The cached
+      // data in the buffer does not exceed chunkSize.
+      Preconditions.checkState(buffer.position() < chunkSize);
+      currentStreamIndex += 1;
+      // readjust the byteOffset value to the length actually been written.
+      byteOffset -= buffer.position();
+      handleWrite(buffer.array(), 0, buffer.position());
+    }
+
+    // just clean up the current stream. Since the container is already closed,
+    // it will be auto committed. No need to call close again here.
+    streamEntry.cleanup();
+    // This case will arise when while writing the first chunk itself fails.
+    // In such case, the current block associated with the stream has no data
+    // written. Remove it from the current stream list.
+    if (committedLength == 0) {
+      streamEntries.remove(streamIndex);
+      locationInfoList.remove(streamIndex);
+      Preconditions.checkArgument(currentStreamIndex != 0);
+      currentStreamIndex -= 1;
+    }
+  }
+
+  private boolean checkIfContainerIsClosed(IOException ioe) {
+    return Optional.of(ioe.getCause())
+        .filter(e -> e instanceof StorageContainerException)
+        .map(e -> (StorageContainerException) e)
+        .filter(sce -> sce.getResult() == Result.CLOSED_CONTAINER_IO)
+        .isPresent();
+  }
+
+  private long getKeyLength() {
+    return locationInfoList.parallelStream().mapToLong(e -> e.getLength())
+        .sum();
+  }
+
+  /**
+    handleFlushOrClose(false);
+  }
+
+  /**
+   * Close or Flush the latest outputStream.
+   * @param close Flag which decides whether to call close or flush on the
+   *              outputStream.
+   * @throws IOException In case, flush or close fails with exception.
+   */
+  private void handleFlushOrClose(boolean close) throws IOException {
-    for (int i = 0; i <= currentStreamIndex; i++) {
-      streamEntries.get(i).flush();
+    int size = streamEntries.size();
+    int streamIndex =
+        currentStreamIndex >= size ? size - 1 : currentStreamIndex;
+    ChunkOutputStreamEntry entry = streamEntries.get(streamIndex);
+    if (entry != null) {
+      try {
+        if (close) {
+          entry.close();
+        } else {
+          entry.flush();
+        }
+      } catch (IOException ioe) {
+        if (checkIfContainerIsClosed(ioe)) {
+          // This call will allocate a new streamEntry and write the Data.
+          // Close needs to be retried on the newly allocated streamEntry as
+          // as well.
+          handleCloseContainerException(entry, streamIndex);
+          handleFlushOrClose(close);
+        } else {
+          throw ioe;
+        }
+      }
-    for (ChunkOutputStreamEntry entry : streamEntries) {
-      if (entry != null) {
-        entry.close();
-      }
-    }
+    handleFlushOrClose(true);
-      long length =
-          locationInfoList.parallelStream().mapToLong(e -> e.getLength()).sum();
-      Preconditions.checkState(byteOffset == length);
+      Preconditions.checkState(streamEntries.size() == locationInfoList.size());
+      Preconditions.checkState(byteOffset == getKeyLength());
+
+    ByteBuffer getBuffer() throws IOException {
+      if (this.outputStream instanceof ChunkOutputStream) {
+        ChunkOutputStream out = (ChunkOutputStream) this.outputStream;
+        return out.getBuffer();
+      }
+      throw new IOException("Invalid Output Stream for Key: " + key);
+    }
+
+    public void cleanup() {
+      checkStream();
+      if (this.outputStream instanceof ChunkOutputStream) {
+        ChunkOutputStream out = (ChunkOutputStream) this.outputStream;
+        out.cleanup();
+      }
+    }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 MOV83 INS39 INS42 INS8 MOV78 INS83 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 MOV29 MOV78 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 UPD83 UPD42 INS29 INS83 INS39 INS42 MOV44 INS44 INS43 MOV8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 MOV78 MOV83 MOV83 MOV39 MOV42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 MOV43 MOV8 INS31 INS31 INS42 INS41 INS60 INS21 INS21 INS5 INS42 INS39 INS42 INS39 INS42 INS42 MOV21 INS21 INS65 INS65 INS65 INS65 UPD42 INS39 INS42 INS42 INS60 INS60 INS25 INS25 INS21 INS25 INS43 INS42 INS41 INS41 INS42 MOV21 INS21 INS65 INS65 INS65 INS39 INS42 INS60 INS60 INS60 INS25 INS21 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS42 INS5 INS59 INS7 INS32 INS39 INS85 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS39 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS32 INS27 INS8 INS42 INS32 MOV32 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS39 INS59 INS39 INS59 MOV43 INS59 MOV27 INS8 INS32 INS42 INS42 INS25 INS53 INS21 INS25 INS39 INS85 INS42 INS3 INS2 INS11 INS42 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS54 INS25 INS42 INS34 INS42 INS42 INS32 INS42 INS33 INS41 INS27 INS27 INS60 INS21 MOV21 INS32 INS34 MOV21 MOV21 MOV21 INS42 INS42 INS42 INS34 INS21 MOV21 INS21 MOV21 INS32 INS42 INS42 INS9 UPD42 MOV42 INS32 INS42 INS16 INS42 INS32 INS54 INS42 INS9 INS21 INS62 INS8 INS14 INS32 INS62 INS8 INS5 INS34 INS42 INS34 INS39 INS42 INS8 INS12 MOV27 MOV8 INS42 INS42 INS40 INS42 INS40 INS32 INS43 INS59 INS7 INS42 INS42 INS7 INS32 INS32 UPD7 INS32 INS42 INS86 INS42 INS42 INS27 INS27 INS42 MOV42 MOV42 UPD42 MOV42 MOV8 INS12 INS32 INS22 INS43 INS60 INS41 INS43 INS27 INS42 INS22 INS43 INS60 INS21 INS39 INS85 MOV21 MOV44 INS8 INS21 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS32 INS42 UPD42 UPD42 INS27 INS42 INS32 UPD42 INS32 INS34 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 INS32 INS42 INS86 INS59 INS27 MOV42 INS42 INS42 INS34 INS44 INS8 INS42 INS42 UPD27 MOV27 INS52 INS42 INS42 INS43 INS59 INS32 INS42 INS45 INS42 INS52 INS42 INS42 INS43 INS59 INS32 MOV25 INS32 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV34 INS32 INS42 INS86 INS59 INS11 INS42 INS32 INS40 INS42 INS8 INS43 INS42 INS25 INS32 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS8 INS42 INS9 UPD42 MOV42 INS42 INS42 INS42 INS32 INS59 INS62 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS43 INS22 INS43 INS22 INS42 INS42 INS21 INS18 MOV53 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS21 INS21 INS53 INS42 INS52 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 DEL31 DEL83 DEL32 DEL45 DEL8 DEL8 DEL12 DEL54 DEL42 DEL32 DEL59 DEL60 DEL34 DEL32 DEL21 DEL42 DEL42 DEL32 DEL27 DEL25 DEL39 DEL34 DEL59 DEL58 DEL42 DEL27 DEL42 DEL37 DEL32 DEL32 DEL21 DEL8 DEL24 DEL31 DEL42 DEL70 DEL42 DEL39 DEL42 DEL59 DEL60 DEL42