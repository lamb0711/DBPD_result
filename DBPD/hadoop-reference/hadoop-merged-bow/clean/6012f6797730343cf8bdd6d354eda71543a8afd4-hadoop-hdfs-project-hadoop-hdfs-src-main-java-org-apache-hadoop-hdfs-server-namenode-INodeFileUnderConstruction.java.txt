svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802 for merging HDFS Snapshot feature branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480838 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.QuotaExceededException;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileUnderConstructionWithSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
+
+import com.google.common.base.Preconditions;
-class INodeFileUnderConstruction extends INodeFile implements MutableBlockCollection {
+public class INodeFileUnderConstruction extends INodeFile implements MutableBlockCollection {
-    super(id, permissions, BlockInfo.EMPTY_ARRAY, replication, modTime,
-        modTime, preferredBlockSize);
-    this.clientName = clientName;
-    this.clientMachine = clientMachine;
-    this.clientNode = clientNode;
+    this(id, null, replication, modTime, preferredBlockSize, BlockInfo.EMPTY_ARRAY,
+        permissions, clientName, clientMachine, clientNode);
-    super(id, perm, blocks, blockReplication, modificationTime,
-        modificationTime, preferredBlockSize);
-    setLocalName(name);
+    super(id, name, perm, modificationTime, modificationTime,
+        blocks, blockReplication, preferredBlockSize);
+    this.clientName = clientName;
+    this.clientMachine = clientMachine;
+    this.clientNode = clientNode;
+  }
+  
+  public INodeFileUnderConstruction(final INodeFile that,
+      final String clientName,
+      final String clientMachine,
+      final DatanodeDescriptor clientNode) {
+    super(that);
-  String getClientName() {
+  public String getClientName() {
-  String getClientMachine() {
+  public String getClientMachine() {
-  DatanodeDescriptor getClientNode() {
+  public DatanodeDescriptor getClientNode() {
-  /**
-   * Is this inode being constructed?
-   */
+  /** @return true unconditionally. */
-  public boolean isUnderConstruction() {
+  public final boolean isUnderConstruction() {
-  //
-  // converts a INodeFileUnderConstruction into a INodeFile
-  // use the modification time as the access time
-  //
-  INodeFile convertToInodeFile() {
-    assert allBlocksComplete() : "Can't finalize inode " + this
-      + " since it contains non-complete blocks! Blocks are "
-      + Arrays.asList(getBlocks());
-    INodeFile obj = new INodeFile(getId(),
-                                  getPermissionStatus(),
-                                  getBlocks(),
-                                  getBlockReplication(),
-                                  getModificationTime(),
-                                  getModificationTime(),
-                                  getPreferredBlockSize());
-    return obj;
-    
+  /**
+   * Converts an INodeFileUnderConstruction to an INodeFile.
+   * The original modification time is used as the access time.
+   * The new modification is the specified mtime.
+   */
+  protected INodeFile toINodeFile(long mtime) {
+    assertAllBlocksComplete();
+
+    final INodeFile f = new INodeFile(getId(), getLocalNameBytes(),
+        getPermissionStatus(), mtime, getModificationTime(),
+        getBlocks(), getFileReplication(), getPreferredBlockSize());
+    f.setParent(getParent());
+    return f;
-  /**
-   * @return true if all of the blocks in this file are marked as completed.
-   */
-  private boolean allBlocksComplete() {
-    for (BlockInfo b : getBlocks()) {
-      if (!b.isComplete()) {
-        return false;
-      }
+  @Override
+  public INodeFileUnderConstruction recordModification(final Snapshot latest,
+      final INodeMap inodeMap) throws QuotaExceededException {
+    if (isInLatestSnapshot(latest)) {
+      INodeFileUnderConstructionWithSnapshot newFile = getParent()
+          .replaceChild4INodeFileUcWithSnapshot(this, inodeMap)
+          .recordModification(latest, inodeMap);
+      return newFile;
+    } else {
+      return this;
-    return true;
+  }
+
+  /** Assert all blocks are complete. */
+  protected void assertAllBlocksComplete() {
+    final BlockInfo[] blocks = getBlocks();
+    for (int i = 0; i < blocks.length; i++) {
+      Preconditions.checkState(blocks[i].isComplete(), "Failed to finalize"
+          + " %s %s since blocks[%s] is non-complete, where blocks=%s.",
+          getClass().getSimpleName(), this, i, Arrays.asList(getBlocks()));
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS83 INS31 INS31 INS8 MOV8 INS83 INS42 INS44 INS44 INS44 INS44 MOV8 INS83 INS83 INS83 INS83 INS29 INS83 UPD42 INS44 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 UPD83 UPD39 UPD42 INS17 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 UPD65 INS65 INS39 INS42 INS21 INS21 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 UPD65 INS60 INS24 INS42 INS33 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD66 INS66 INS66 INS66 INS32 INS83 INS32 UPD42 INS42 INS42 INS32 INS8 INS8 UPD66 INS83 INS5 INS59 INS58 INS27 INS37 INS8 UPD42 MOV42 UPD42 MOV32 MOV32 INS42 INS42 INS32 INS42 INS42 INS60 INS41 INS41 MOV43 INS85 INS42 MOV32 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS43 INS59 INS42 INS52 INS42 INS34 INS32 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS32 INS52 INS42 MOV32 INS32 INS42 INS42 INS42 INS2 MOV42 INS45 INS45 INS32 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL45 DEL52 DEL45 DEL27 DEL6 DEL42 DEL44 DEL42 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL70 DEL9 DEL41