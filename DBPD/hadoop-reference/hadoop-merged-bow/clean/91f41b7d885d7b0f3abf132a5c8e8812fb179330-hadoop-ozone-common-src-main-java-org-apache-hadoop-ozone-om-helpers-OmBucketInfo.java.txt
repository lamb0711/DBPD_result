HDDS-1884. Support Bucket ACL operations for OM HA. (#1202)


+import java.util.BitSet;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.BucketInfo;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos
+    .BucketInfo;
+import static org.apache.hadoop.ozone.OzoneAcl.ZERO_BITSET;
+
+   * Add an ozoneAcl to list of existing Acl set.
+   * @param ozoneAcl
+   * @return true - if successfully added, false if not added or acl is
+   * already existing in the acl list.
+   */
+  public boolean addAcl(OzoneAcl ozoneAcl) {
+    // Case 1: When we are adding more rights to existing user/group.
+    boolean addToExistingAcl = false;
+    for(OzoneAcl existingAcl: getAcls()) {
+      if(existingAcl.getName().equals(ozoneAcl.getName()) &&
+          existingAcl.getType().equals(ozoneAcl.getType())) {
+
+        BitSet bits = (BitSet) ozoneAcl.getAclBitSet().clone();
+
+        // We need to do "or" before comparision because think of a case like
+        // existing acl is 777 and newly added acl is 444, we have already
+        // that acl set. In this case if we do direct check they will not
+        // be equal, but if we do or and then check, we shall know it
+        // has acl's already set or not.
+        bits.or(existingAcl.getAclBitSet());
+
+        if (bits.equals(existingAcl.getAclBitSet())) {
+          return false;
+        } else {
+          existingAcl.getAclBitSet().or(ozoneAcl.getAclBitSet());
+          addToExistingAcl = true;
+          break;
+        }
+      }
+    }
+
+    // Case 2: When a completely new acl is added.
+    if(!addToExistingAcl) {
+      getAcls().add(ozoneAcl);
+    }
+    return true;
+  }
+
+  /**
+   * Remove acl from existing acl list.
+   * @param ozoneAcl
+   * @return true - if successfully removed, false if not able to remove due
+   * to that acl is not in the existing acl list.
+   */
+  public boolean removeAcl(OzoneAcl ozoneAcl) {
+    boolean removed = false;
+
+    // When we are removing subset of rights from existing acl.
+    for(OzoneAcl existingAcl: getAcls()) {
+      if (existingAcl.getName().equals(ozoneAcl.getName()) &&
+          existingAcl.getType().equals(ozoneAcl.getType())) {
+        BitSet bits = (BitSet) ozoneAcl.getAclBitSet().clone();
+        bits.and(existingAcl.getAclBitSet());
+
+        // This happens when the acl bitset is not existing for current name
+        // and type.
+        // Like a case we have 444 permission, 333 is asked to removed.
+        if (bits.equals(ZERO_BITSET)) {
+          return false;
+        }
+
+        // We have some matching. Remove them.
+        existingAcl.getAclBitSet().xor(bits);
+
+        // If existing acl has same bitset as passed acl bitset, remove that
+        // acl from the list
+        if (existingAcl.getAclBitSet().equals(ZERO_BITSET)) {
+          getAcls().remove(existingAcl);
+        }
+        removed = true;
+        break;
+      }
+    }
+
+    return removed;
+  }
+
+  /**
+   * Reset the existing acl list.
+   * @param ozoneAcls
+   * @return true - if successfully able to reset.
+   */
+  public boolean setAcls(List<OzoneAcl> ozoneAcls) {
+    this.acls.clear();
+    this.acls = ozoneAcls;
+    return true;
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS43 INS42 INS60 INS70 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS60 INS70 INS41 INS65 INS65 INS65 INS74 INS42 INS21 INS21 INS41 INS66 INS42 INS66 INS66 INS42 INS39 INS59 INS44 INS32 INS8 INS38 INS8 INS9 INS66 INS42 INS66 INS66 INS42 INS39 INS59 INS44 INS32 INS8 INS42 INS66 INS42 INS66 INS43 INS43 INS32 INS7 INS9 INS42 INS9 INS43 INS42 INS42 INS25 INS42 INS21 INS42 INS9 INS43 INS42 INS42 INS25 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS27 INS8 INS32 INS42 INS27 INS8 INS52 INS42 INS52 INS42 INS32 INS32 INS60 INS21 INS25 INS32 INS42 INS42 INS32 INS32 INS60 INS21 INS25 INS21 INS25 INS21 INS10 INS32 INS42 INS32 INS32 INS42 INS32 INS43 INS59 INS32 INS32 INS8 INS8 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS43 INS59 INS32 INS32 INS8 INS32 INS32 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS41 INS21 INS21 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS9 INS43 INS32 INS42 INS42 INS42 INS42 INS9 INS32 INS7 INS43 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42