YARN-5434. Add -client|server argument for graceful decommmission. Contributed by Robert Kanter.

-          .put("-refreshNodes", new UsageInfo("[-g [timeout in seconds]]",
+          .put("-refreshNodes",
+              new UsageInfo("[-g [timeout in seconds] -client|server]",
-              + "[-g [timeout in seconds] is optional, if we specify the "
-              + "timeout then ResourceManager will wait for timeout before "
-              + "marking the NodeManager as decommissioned."))
+              + "[-g [timeout in seconds] -client|server] is optional, if we "
+              + "specify the timeout then ResourceManager will wait for "
+              + "timeout before marking the NodeManager as decommissioned."
+              + " The -client|server indicates if the timeout tracking should"
+              + " be handled by the client or the ResourceManager. The client"
+              + "-side tracking is blocking, while the server-side tracking"
+              + " is not. Omitting the timeout, or a timeout of -1, indicates"
+              + " an infinite timeout."))
-      " [-refreshNodes [-g [timeout in seconds]]]" +
+      " [-refreshNodes [-g [timeout in seconds] -client|server]]" +
-  private int refreshNodes(long timeout) throws IOException, YarnException {
+  private int refreshNodes(long timeout, String trackingMode)
+      throws IOException, YarnException {
+    if (!"client".equals(trackingMode)) {
+      throw new UnsupportedOperationException(
+          "Only client tracking mode is currently supported.");
+    }
-        } else if (args.length == 3) {
+        } else if (args.length == 3 || args.length == 4) {
-            long timeout = validateTimeout(args[2]);
-            exitCode = refreshNodes(timeout);
+            long timeout = -1;
+            String trackingMode;
+            if (args.length == 4) {
+              timeout = validateTimeout(args[2]);
+              trackingMode = validateTrackingMode(args[3]);
+            } else {
+              trackingMode = validateTrackingMode(args[2]);
+            }
+            exitCode = refreshNodes(timeout, trackingMode);
+  private String validateTrackingMode(String mode) {
+    if ("-client".equals(mode)) {
+      return "client";
+    }
+    if ("-server".equals(mode)) {
+      return "server";
+    }
+    throw new IllegalArgumentException("Invalid mode specified: " + mode);
+  }
+

INS31 INS44 INS83 INS43 INS42 INS44 INS8 INS43 INS42 INS25 INS42 INS43 INS42 INS25 INS25 INS53 INS42 INS38 INS8 INS42 INS32 INS8 INS32 INS8 INS14 INS32 INS53 INS45 INS42 INS42 INS41 INS45 INS42 INS42 INS41 INS43 INS27 UPD45 INS45 INS42 INS42 INS14 INS45 INS45 INS42 INS45 INS42 INS43 INS45 INS42 INS27 MOV27 INS27 INS40 INS34 INS60 INS25 INS43 INS59 INS27 INS8 INS8 INS38 INS42 INS42 INS40 INS34 INS21 INS21 INS21 INS34 INS7 INS7 INS7 INS42 INS42 MOV32 INS42 INS32 INS42 INS32 UPD45 INS42 INS2 INS42 INS2 UPD45 UPD45 UPD45 INS45 INS45 INS45 INS45 INS45 INS42 INS34 INS42 INS34