YARN-4092. Fixed UI redirection to print useful messages when both RMs are in standby mode. Contributed by Xuan Gong

+import java.net.InetSocketAddress;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Random;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.webapp.YarnWebParams;
+  private String path;
+  private static final int BASIC_SLEEP_TIME = 5;
+  private static final int MAX_SLEEP_TIME = 5 * 60;
-  public RMWebAppFilter(Injector injector) {
+  public RMWebAppFilter(Injector injector, Configuration conf) {
+    InetSocketAddress sock = YarnConfiguration.useHttps(conf)
+        ? conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,
+            YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,
+            YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT)
+        : conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,
+            YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,
+            YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);
+
+    path = sock.getHostName() + ":" + Integer.toString(sock.getPort());
+    path = YarnConfiguration.useHttps(conf)
+        ? "https://" + path
+        : "http://" + path;
-      String redirectPath = rmWebApp.getRedirectPath() + uri;
+
+      String redirectPath = rmWebApp.getRedirectPath();
+        redirectPath += uri;
+      } else {
+        boolean doRetry = true;
+        String retryIntervalStr =
+            request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);
+        int retryInterval = 0;
+        if (retryIntervalStr != null) {
+          try {
+            retryInterval = Integer.parseInt(retryIntervalStr.trim());
+          } catch (NumberFormatException ex) {
+            doRetry = false;
+          }
+        }
+        int next = calculateExponentialTime(retryInterval);
+
+        String redirectUrl =
+            appendOrReplaceParamter(path + uri,
+              YarnWebParams.NEXT_REFRESH_INTERVAL + "=" + (retryInterval + 1));
+        if (redirectUrl == null || next > MAX_SLEEP_TIME) {
+          doRetry = false;
+        }
+        String redirectMsg =
+            doRetry ? "Can not find any active RM. Will retry in next " + next
+                + " seconds." : "There is no active RM right now.";
+        PrintWriter out = response.getWriter();
+        out.println(redirectMsg);
+        if (doRetry) {
+          response.setHeader("Refresh", next + ";url=" + redirectUrl);
+          response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);
+        }
+      return;
-
-}
+
+  private String appendOrReplaceParamter(String uri, String newQuery) {
+    if (uri.contains(YarnWebParams.NEXT_REFRESH_INTERVAL + "=")) {
+      return uri.replaceAll(YarnWebParams.NEXT_REFRESH_INTERVAL + "=[^&]+",
+        newQuery);
+    }
+    try {
+      URI oldUri = new URI(uri);
+      String appendQuery = oldUri.getQuery();
+      if (appendQuery == null) {
+        appendQuery = newQuery;
+      } else {
+        appendQuery += "&" + newQuery;
+      }
+
+      URI newUri =
+          new URI(oldUri.getScheme(), oldUri.getAuthority(), oldUri.getPath(),
+            appendQuery, oldUri.getFragment());
+
+      return newUri.toString();
+    } catch (URISyntaxException e) {
+      return null;
+    }
+  }
+
+  private static int calculateExponentialTime(int retries) {
+    long baseTime = BASIC_SLEEP_TIME * (1L << retries);
+    return (int) (baseTime * ((new Random()).nextDouble() + 0.5));
+  }
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS44 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS34 INS42 INS27 INS43 INS42 INS60 INS21 INS21 INS25 INS42 INS43 INS42 INS43 INS42 INS25 INS54 INS39 INS42 INS60 INS41 INS34 INS34 INS42 INS43 INS59 INS7 INS7 MOV27 INS8 INS42 INS42 INS32 INS8 INS8 INS12 INS39 INS59 INS11 INS42 INS42 INS16 INS42 INS27 INS42 INS16 MOV60 MOV25 INS41 INS42 INS42 INS27 INS41 INS60 INS60 INS25 INS60 INS41 INS44 INS8 INS42 INS27 INS39 INS36 INS32 INS32 INS32 INS32 INS45 INS32 INS32 INS27 INS27 MOV27 MOV8 INS40 INS45 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS32 INS43 INS42 INS41 INS42 INS36 INS27 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS42 MOV32 INS21 INS60 INS60 INS60 INS60 INS60 INS25 INS60 INS60 INS21 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS33 INS27 INS42 INS36 INS42 INS42 INS7 INS39 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS42 INS8 INS40 INS45 INS43 INS42 INS42 INS42 INS7 INS7 INS43 INS32 INS32 INS32 INS42 INS32 INS34 INS42 INS27 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS34 INS42 INS33 INS54 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS21 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS40 INS8 INS12 INS42 INS42 INS42 INS27 INS27 INS42 INS33 INS42 INS42 INS7 INS42 INS27 INS45 INS42 INS42 INS32 INS32 INS45 INS42 INS36 INS42 INS21 INS44 INS8 INS42 INS42 INS40 INS45 INS36 INS42 INS9 INS45 INS42 INS45 INS42 INS42 INS45 INS27 INS42 INS42 INS40 INS14 INS7 INS43 INS42 INS21 INS27 INS42 INS45 INS42 INS43 INS42 INS32 INS42 INS7 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS42 DEL42 DEL27