YARN-3334. NM uses timeline client to publish container metrics to new timeline service. Contributed by Junping Du.

+import java.io.IOException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
+import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.yarn.api.records.timelineservice.ContainerEntity;
+import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity;
+import org.apache.hadoop.yarn.api.records.timelineservice.TimelineMetric;
+import org.apache.hadoop.yarn.client.api.TimelineClient;
+import org.apache.hadoop.yarn.exceptions.YarnException;
-import org.apache.hadoop.yarn.util.ResourceCalculatorProcessTree;
+import org.apache.hadoop.yarn.util.ResourceCalculatorProcessTree;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+  
+  private boolean publishContainerMetricsToTimelineService;
+  
+  // For posting entities in new timeline service in a non-blocking way
+  // TODO replace with event loop in TimelineClient.
+  private static ExecutorService threadPool =
+      Executors.newCachedThreadPool(
+          new ThreadFactoryBuilder().setNameFormat("TimelineService #%d")
+          .build());
+  
+  @Private
+  public static enum ContainerMetric {
+    CPU, MEMORY
+  }
+    
+    publishContainerMetricsToTimelineService =
+        YarnConfiguration.systemMetricsPublisherEnabled(conf);
+
+    if (publishContainerMetricsToTimelineService) {
+      LOG.info("NodeManager has been configured to publish container " +
+          "metrics to Timeline Service V2.");
+    } else {
+      LOG.warn("NodeManager has not been configured to publish container " +
+          "metrics to Timeline Service V2.");
+    }
+    
+    
+    shutdownAndAwaitTermination();
+    
+  
+  // TODO remove threadPool after adding non-blocking call in TimelineClient
+  private static void shutdownAndAwaitTermination() {
+    threadPool.shutdown();
+    try {
+      if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) {
+        threadPool.shutdownNow(); 
+        if (!threadPool.awaitTermination(60, TimeUnit.SECONDS))
+            LOG.error("ThreadPool did not terminate");
+      }
+    } catch (InterruptedException ie) {
+      threadPool.shutdownNow();
+      // Preserve interrupt status
+      Thread.currentThread().interrupt();
+    }
+  }
+          
+          ContainerEntity entity = new ContainerEntity();
+          entity.setId(containerId.toString());
+          
-                    ResourceCalculatorProcessTree.getResourceCalculatorProcessTree(pId, processTreeClass, conf);
+                    ResourceCalculatorProcessTree.getResourceCalculatorProcessTree(
+                        pId, processTreeClass, conf);
+            long currentTime = System.currentTimeMillis();
+
-
+            
+            if (publishContainerMetricsToTimelineService) {
+              // if currentPmemUsage data is available
+              if (currentPmemUsage != 
+                  ResourceCalculatorProcessTree.UNAVAILABLE) {
+                TimelineMetric memoryMetric = new TimelineMetric();
+                memoryMetric.setId(ContainerMetric.MEMORY.toString() + pId);
+                memoryMetric.addTimeSeriesData(currentTime, currentPmemUsage);
+                entity.addMetric(memoryMetric);
+              }
+              // if cpuUsageTotalCoresPercentage data is available
+              if (cpuUsageTotalCoresPercentage != 
+                ResourceCalculatorProcessTree.UNAVAILABLE) {
+                TimelineMetric cpuMetric = new TimelineMetric();
+                cpuMetric.setId(ContainerMetric.CPU.toString() + pId);
+                cpuMetric.addTimeSeriesData(currentTime, 
+                    cpuUsageTotalCoresPercentage);
+                entity.addMetric(cpuMetric);
+              }
+            }
+            
+
-            LOG.warn("Uncaught exception in ContainerMemoryManager "
-                + "while managing memory of " + containerId, e);
+            LOG.warn("Uncaught exception in ContainersMonitorImpl "
+                + "while monitoring resource of " + containerId, e);
+          }
+          
+          if (publishContainerMetricsToTimelineService) {
+            try {
+              TimelineClient timelineClient = context.getApplications().get(
+                  containerId.getApplicationAttemptId().getApplicationId()).
+                      getTimelineClient();
+              putEntityWithoutBlocking(timelineClient, entity);
+            } catch (Exception e) {
+              LOG.error("Exception in ContainersMonitorImpl in putting " +
+                  "resource usage metrics to timeline service.", e);
+            }
+    
+    private void putEntityWithoutBlocking(final TimelineClient timelineClient, 
+        final TimelineEntity entity) {
+      Runnable publishWrapper = new Runnable() {
+        public void run() {
+          try {
+            timelineClient.putEntities(entity);
+          } catch (IOException|YarnException e) {
+            LOG.error("putEntityNonBlocking get failed: " + e);
+            throw new RuntimeException(e.toString());
+          }
+        }
+      };
+      threadPool.execute(publishWrapper);
+    }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS71 INS31 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS42 INS72 INS72 INS83 INS83 INS39 INS42 INS8 INS31 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS25 INS21 INS21 INS54 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS32 INS7 INS42 INS8 INS8 INS32 INS32 INS8 INS12 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS21 INS32 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS25 INS44 INS8 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS38 INS8 INS43 INS42 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS21 INS25 INS42 INS32 INS32 INS43 INS1 INS42 INS45 INS45 INS45 INS45 INS42 INS42 INS34 INS40 INS32 INS38 INS21 INS42 INS42 INS32 INS42 INS60 INS21 INS25 INS42 INS31 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS59 INS32 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS34 INS40 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS32 INS60 INS25 INS54 INS54 INS43 INS42 INS42 INS39 INS59 INS42 INS8 INS8 INS12 INS8 INS12 INS42 INS42 INS32 INS25 INS25 INS60 INS21 INS44 INS8 INS21 INS44 INS8 INS42 INS42 INS27 INS8 INS27 INS8 INS43 INS59 INS32 INS43 INS42 INS21 INS32 INS84 INS42 INS21 INS53 INS42 INS40 INS60 INS21 INS21 INS21 INS42 INS40 INS60 INS21 INS21 INS21 UPD45 UPD45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS32 INS14 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS32 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42