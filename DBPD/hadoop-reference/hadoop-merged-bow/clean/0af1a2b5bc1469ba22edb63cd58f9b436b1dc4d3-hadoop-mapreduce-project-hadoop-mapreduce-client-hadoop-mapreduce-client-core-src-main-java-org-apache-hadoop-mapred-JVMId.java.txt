YARN-2312. Deprecated old ContainerId#getId API and updated MapReduce to use ContainerId#getContainerId instead. Contributed by Tsuyoshi OZAWA

-class JVMId extends ID {
+class JVMId {
-  JobID jobId;
+  final JobID jobId;
+  private long jvmId;
+  private static final char SEPARATOR = '_';
-  public JVMId(JobID jobId, boolean isMap, int id) {
-    super(id);
+  public JVMId(JobID jobId, boolean isMap, long id) {
+    this.jvmId = id;
-  public JVMId (String jtIdentifier, int jobId, boolean isMap, int id) {
+  public JVMId (String jtIdentifier, int jobId, boolean isMap, long id) {
+
+  @Override
-    if(o == null)
-      return false;
-    if(o.getClass().equals(this.getClass())) {
-      JVMId that = (JVMId)o;
-      return this.id==that.id
-        && this.isMap == that.isMap
-        && this.jobId.equals(that.jobId);
+    // Generated by IntelliJ IDEA 13.1.
+    if (this == o) {
+      return true;
-    else return false;
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+
+    JVMId jvmId1 = (JVMId) o;
+
+    if (isMap != jvmId1.isMap) {
+      return false;
+    }
+    if (jvmId != jvmId1.jvmId) {
+      return false;
+    }
+    if (!jobId.equals(jvmId1.jobId)) {
+      return false;
+    }
+
+    return true;
-  /**Compare TaskInProgressIds by first jobIds, then by tip numbers. Reduces are 
-   * defined as greater then maps.*/
-  public int compareTo(org.apache.hadoop.mapreduce.ID o) {
-    JVMId that = (JVMId)o;
+  public int hashCode() {
+    // Generated by IntelliJ IDEA 13.1.
+    int result = (isMap ? 1 : 0);
+    result = 31 * result + jobId.hashCode();
+    result = 31 * result + (int) (jvmId ^ (jvmId >>> 32));
+    return result;
+  }
+
+  /**
+   * Compare TaskInProgressIds by first jobIds, then by tip numbers. Reduces are
+   * defined as greater then maps.
+   **/
+  public int compareTo(JVMId that) {
-        return this.id - that.id;
+        return Long.valueOf(this.jvmId).compareTo(that.jvmId);
+   * This method does NOT override org.apache.hadoop.mapred.ID to accept 64-bit
+   * ID to support work-preserving RM restart.
+   * @return 64-bit JVM id.
+   */
+  public long getId() {
+    return jvmId;
+  }
+
+  /**
-                 append(idFormat.format(id));
+                 append(idFormat.format(jvmId));
-  
-  @Override
-  public int hashCode() {
-    return jobId.hashCode() * 11 + id;
-  }
-  
-  @Override
+
-    super.readFields(in);
+    this.jvmId = in.readLong();
-  @Override
-    super.write(out);
+    out.writeLong(jvmId);

MOV31 INS23 INS23 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 MOV78 INS29 INS83 INS39 INS42 INS8 INS42 INS42 INS13 UPD39 INS21 UPD39 INS25 MOV60 INS25 INS25 INS25 INS41 INS60 INS21 INS21 INS41 MOV43 UPD42 INS65 INS65 INS41 INS7 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS38 INS8 INS9 INS39 INS59 INS7 INS7 INS42 UPD66 INS66 INS66 INS66 INS42 INS7 INS32 INS22 INS42 INS52 INS42 INS41 MOV27 INS27 MOV41 UPD42 INS42 UPD40 MOV40 MOV41 INS42 UPD40 MOV40 INS41 INS32 INS41 INS42 INS36 INS42 UPD27 MOV27 INS42 INS27 INS22 INS32 INS42 INS42 INS42 INS52 INS42 INS9 INS32 MOV32 INS9 INS42 MOV42 UPD40 MOV40 INS9 INS16 INS27 INS27 INS11 UPD42 INS52 INS42 INS42 INS42 INS42 INS42 INS34 INS34 UPD34 MOV34 INS42 INS34 INS42 INS39 INS36 INS27 INS32 UPD42 MOV42 INS36 INS32 INS42 INS40 INS27 INS42 INS42 INS22 INS42 INS34 MOV52 UPD42 MOV42 DEL42 DEL43 DEL42 DEL46 DEL42 DEL52 DEL42 DEL32 DEL32 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL52 DEL42 DEL22 DEL27 DEL52 DEL42 DEL22 DEL27 DEL27 DEL52 DEL42 DEL22 DEL32 DEL27 DEL41 DEL8 DEL25 DEL27 DEL41 DEL42 DEL78 DEL40 DEL43 DEL22 DEL40 DEL27 DEL42 DEL42 DEL48 DEL42 DEL78 DEL42 DEL42 DEL48