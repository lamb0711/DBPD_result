YARN-7419. CapacityScheduler: Allow auto leaf queue creation after queue mapping. (Suma Shivaprasad via wangda)

Change-Id: Ia1704bb8cb5070e5b180b5a85787d7b9ca57ebc6

+  @Private
+  @VisibleForTesting
+  public void setOverrideWithQueueMappings(boolean overrideWithQueueMappings) {
+    setBoolean(ENABLE_QUEUE_MAPPING_OVERRIDE, overrideWithQueueMappings);
+  }
+
+  @Private
+  @VisibleForTesting
+  public void setQueuePlacementRules(Collection<String> queuePlacementRules) {
+    if (queuePlacementRules == null) {
+      return;
+    }
+    String str = StringUtils.join(",", queuePlacementRules);
+    setStrings(YarnConfiguration.QUEUE_PLACEMENT_RULES, str);
+  }
+
+  @Private
+  @VisibleForTesting
+  public void setQueueMappings(List<QueueMapping> queueMappings) {
+    if (queueMappings == null) {
+      return;
+    }
+
+    List<String> queueMappingStrs = new ArrayList<>();
+    for (QueueMapping mapping : queueMappings) {
+      queueMappingStrs.add(mapping.toString());
+    }
+
+    setStrings(QUEUE_MAPPING, StringUtils.join(",", queueMappingStrs));
+  }
+
+
+  @Private
+  public static final boolean DEFAULT_AUTO_CREATE_CHILD_QUEUE_ENABLED = false;
+
+  @Private
+  public static final String AUTO_CREATE_CHILD_QUEUE_ENABLED =
+      "auto-create-child-queue.enabled";
+
+  @Private
+  public static final String AUTO_CREATED_LEAF_QUEUE_TEMPLATE_PREFIX =
+      "leaf-queue-template";
+
+  @Private
+  public static final String AUTO_CREATE_QUEUE_MAX_QUEUES =
+      "auto-create-child-queue.max-queues";
+
+  @Private
+  public static final int DEFAULT_AUTO_CREATE_QUEUE_MAX_QUEUES = 1000;
+
+  /**
+   * If true, this queue will be created as a Parent Queue which Auto Created
+   * leaf child queues
+   *
+   * @param queuePath The queues path
+   * @return true if auto create is enabled for child queues else false. Default
+   * is false
+   */
+  @Private
+  public boolean isAutoCreateChildQueueEnabled(String queuePath) {
+    boolean isAutoCreateEnabled = getBoolean(
+        getQueuePrefix(queuePath) + AUTO_CREATE_CHILD_QUEUE_ENABLED,
+        DEFAULT_AUTO_CREATE_CHILD_QUEUE_ENABLED);
+    return isAutoCreateEnabled;
+  }
+
+  @Private
+  @VisibleForTesting
+  public void setAutoCreateChildQueueEnabled(String queuePath,
+      boolean autoCreationEnabled) {
+    setBoolean(getQueuePrefix(queuePath) +
+            AUTO_CREATE_CHILD_QUEUE_ENABLED,
+        autoCreationEnabled);
+  }
+
+  /**
+   * Get the auto created leaf queue's template configuration prefix
+   * Leaf queue's template capacities are configured at the parent queue
+   *
+   * @param queuePath parent queue's path
+   * @return Config prefix for leaf queue template configurations
+   */
+  @Private
+  public String getAutoCreatedQueueTemplateConfPrefix(String queuePath) {
+    return queuePath + DOT + AUTO_CREATED_LEAF_QUEUE_TEMPLATE_PREFIX;
+  }
+
+  @Private
+  public static final String FAIL_AUTO_CREATION_ON_EXCEEDING_CAPACITY =
+      "auto-create-child-queue.fail-on-exceeding-parent-capacity";
+
+  @Private
+  public static final boolean DEFAULT_FAIL_AUTO_CREATION_ON_EXCEEDING_CAPACITY =
+      false;
+
+  /**
+   * Fail further auto leaf queue creation when parent's guaranteed capacity is
+   * exceeded.
+   *
+   * @param queuePath the parent queue's path
+   * @return true if configured to fail else false
+   */
+  @Private
+  public boolean getShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded(
+      String queuePath) {
+    boolean shouldFailAutoQueueCreationOnExceedingGuaranteedCapacity =
+        getBoolean(getQueuePrefix(queuePath)
+                + FAIL_AUTO_CREATION_ON_EXCEEDING_CAPACITY,
+            DEFAULT_FAIL_AUTO_CREATION_ON_EXCEEDING_CAPACITY);
+    return shouldFailAutoQueueCreationOnExceedingGuaranteedCapacity;
+  }
+
+  @VisibleForTesting
+  @Private
+  public void setShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded(
+      String queuePath, boolean autoCreationEnabled) {
+    setBoolean(
+        getQueuePrefix(queuePath) +
+            FAIL_AUTO_CREATION_ON_EXCEEDING_CAPACITY,
+        autoCreationEnabled);
+  }
+
+  /**
+   * Get the max number of leaf queues that are allowed to be created under
+   * a parent queue
+   *
+   * @param queuePath the paret queue's path
+   * @return the max number of leaf queues allowed to be auto created
+   */
+  @Private
+  public int getAutoCreatedQueuesMaxChildQueuesLimit(String queuePath) {
+    return getInt(getQueuePrefix(queuePath) +
+            AUTO_CREATE_QUEUE_MAX_QUEUES,
+        DEFAULT_AUTO_CREATE_QUEUE_MAX_QUEUES);
+  }
+
+  @Private
+  @VisibleForTesting
+  public void setAutoCreatedLeafQueueTemplateCapacity(String queuePath,
+      float val) {
+    String leafQueueConfPrefix = getAutoCreatedQueueTemplateConfPrefix(
+        queuePath);
+    setCapacity(leafQueueConfPrefix, val);
+  }
+
+  @Private
+  @VisibleForTesting
+  public void setAutoCreatedLeafQueueTemplateMaxCapacity(String queuePath,
+      float val) {
+    String leafQueueConfPrefix = getAutoCreatedQueueTemplateConfPrefix(
+        queuePath);
+    setMaximumCapacity(leafQueueConfPrefix, val);
+  }

INS31 INS31 INS31 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS78 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS39 INS59 INS29 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS39 INS59 INS29 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS39 INS42 INS21 INS42 INS42 INS74 INS42 INS25 INS60 INS21 INS42 INS42 INS74 INS42 INS25 INS60 INS70 INS21 INS42 INS42 INS9 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS41 INS42 INS42 INS43 INS42 INS39 INS42 INS21 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS45 INS42 INS42 INS9 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS41 INS42 INS42 INS43 INS42 INS39 INS42 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS39 INS42 INS60 INS21 INS42 INS42 INS43 INS42 INS39 INS42 INS60 INS21 INS32 INS43 INS43 INS27 INS8 INS43 INS59 INS32 INS43 INS43 INS27 INS8 INS74 INS59 INS44 INS42 INS8 INS32 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS39 INS59 INS42 INS42 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS27 INS66 INS66 INS42 INS66 INS66 INS42 INS39 INS59 INS42 INS42 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS33 INS41 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42