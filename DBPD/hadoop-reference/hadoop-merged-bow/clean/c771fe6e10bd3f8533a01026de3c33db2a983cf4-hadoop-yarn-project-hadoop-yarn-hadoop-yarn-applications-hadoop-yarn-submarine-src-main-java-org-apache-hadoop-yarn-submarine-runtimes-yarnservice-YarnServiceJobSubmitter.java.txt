YARN-8714. [Submarine] Support files/tarballs to be localized for a training job. (Zhankun Tang via wangda)

Change-Id: I845131273e52a9d81dbc813ea6d4af06b205e334

+import org.apache.hadoop.fs.FileUtil;
+import org.apache.hadoop.yarn.submarine.client.cli.param.Localization;
+import org.apache.hadoop.yarn.submarine.common.conf.SubmarineConfiguration;
+import org.apache.hadoop.yarn.submarine.common.fs.RemoteDirectoryManager;
+import java.io.FileInputStream;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
-      Component comp, Path uploadedFilePath) throws IOException {
+      Component comp, Path uploadedFilePath)
+      throws IOException {
-    FileSystem fs = FileSystem.get(clientContext.getYarnConfig());
+    FileSystem fs = clientContext.getRemoteDirectoryManager()
+        .getDefaultFileSystem();
+
+  private String getLastNameFromPath(String srcFileStr) {
+    return new Path(srcFileStr).getName();
+  }
+
+  /**
+   * May download a remote uri(file/dir) and zip.
+   * Skip download if local dir
+   * Remote uri can be a local dir(won't download)
+   * or remote HDFS dir, s3 dir/file .etc
+   * */
+  private String mayDownloadAndZipIt(String remoteDir, String zipFileName,
+      boolean doZip)
+      throws IOException {
+    RemoteDirectoryManager rdm = clientContext.getRemoteDirectoryManager();
+    //Append original modification time and size to zip file name
+    String suffix;
+    String srcDir = remoteDir;
+    String zipDirPath =
+        System.getProperty("java.io.tmpdir") + "/" + zipFileName;
+    boolean needDeleteTempDir = false;
+    if (rdm.isRemote(remoteDir)) {
+      //Append original modification time and size to zip file name
+      FileStatus status = rdm.getRemoteFileStatus(new Path(remoteDir));
+      suffix = "_" + status.getModificationTime()
+          + "-" + rdm.getRemoteFileSize(remoteDir);
+      // Download them to temp dir
+      boolean downloaded = rdm.copyRemoteToLocal(remoteDir, zipDirPath);
+      if (!downloaded) {
+        throw new IOException("Failed to download files from "
+            + remoteDir);
+      }
+      LOG.info("Downloaded remote: {} to local: {}", remoteDir, zipDirPath);
+      srcDir = zipDirPath;
+      needDeleteTempDir = true;
+    } else {
+      File localDir = new File(remoteDir);
+      suffix = "_" + localDir.lastModified()
+          + "-" + localDir.length();
+    }
+    if (!doZip) {
+      return srcDir;
+    }
+    // zip a local dir
+    String zipFileUri = zipDir(srcDir, zipDirPath + suffix + ".zip");
+    // delete downloaded temp dir
+    if (needDeleteTempDir) {
+      deleteFiles(srcDir);
+    }
+    return zipFileUri;
+  }
+
+  @VisibleForTesting
+  public String zipDir(String srcDir, String dstFile) throws IOException {
+    FileOutputStream fos = new FileOutputStream(dstFile);
+    ZipOutputStream zos = new ZipOutputStream(fos);
+    File srcFile = new File(srcDir);
+    LOG.info("Compressing {}", srcDir);
+    addDirToZip(zos, srcFile, srcFile);
+    // close the ZipOutputStream
+    zos.close();
+    LOG.info("Compressed {} to {}", srcDir, dstFile);
+    return dstFile;
+  }
+
+  private void deleteFiles(String localUri) {
+    boolean success = FileUtil.fullyDelete(new File(localUri));
+    if (!success) {
+      LOG.warn("Fail to delete {}", localUri);
+    }
+    LOG.info("Deleted {}", localUri);
+  }
+
+  private void addDirToZip(ZipOutputStream zos, File srcFile, File base)
+      throws IOException {
+    File[] files = srcFile.listFiles();
+    if (null == files) {
+      return;
+    }
+    FileInputStream fis = null;
+    for (int i = 0; i < files.length; i++) {
+      // if it's directory, add recursively
+      if (files[i].isDirectory()) {
+        addDirToZip(zos, files[i], base);
+        continue;
+      }
+      byte[] buffer = new byte[1024];
+      try {
+        fis = new FileInputStream(files[i]);
+        String name =  base.toURI().relativize(files[i].toURI()).getPath();
+        LOG.info(" Zip adding: " + name);
+        zos.putNextEntry(new ZipEntry(name));
+        int length;
+        while ((length = fis.read(buffer)) > 0) {
+          zos.write(buffer, 0, length);
+        }
+        zos.flush();
+      } finally {
+        if (fis != null) {
+          fis.close();
+        }
+        zos.closeEntry();
+      }
+    }
+  }
+
+    handleLocalizations(parameters);
+
+  /**
+   * Localize dependencies for all containers.
+   * If remoteUri is a local directory,
+   * we'll zip it, upload to HDFS staging dir HDFS.
+   * If remoteUri is directory, we'll download it, zip it and upload
+   * to HDFS.
+   * If localFilePath is ".", we'll use remoteUri's file/dir name
+   * */
+  private void handleLocalizations(RunJobParameters parameters)
+      throws IOException {
+    // Handle localizations
+    Path stagingDir =
+        clientContext.getRemoteDirectoryManager().getJobStagingArea(
+            parameters.getName(), true);
+    List<Localization> locs = parameters.getLocalizations();
+    String remoteUri;
+    String containerLocalPath;
+    RemoteDirectoryManager rdm = clientContext.getRemoteDirectoryManager();
+
+    // Check to fail fast
+    for (Localization loc : locs) {
+      remoteUri = loc.getRemoteUri();
+      Path resourceToLocalize = new Path(remoteUri);
+      // Check if remoteUri exists
+      if (rdm.isRemote(remoteUri)) {
+        // check if exists
+        if (!rdm.existsRemoteFile(resourceToLocalize)) {
+          throw new FileNotFoundException(
+              "File " + remoteUri + " doesn't exists.");
+        }
+      } else {
+        // Check if exists
+        File localFile = new File(remoteUri);
+        if (!localFile.exists()) {
+          throw new FileNotFoundException(
+              "File " + remoteUri + " doesn't exists.");
+        }
+      }
+      // check remote file size
+      validFileSize(remoteUri);
+    }
+    // Start download remote if needed and upload to HDFS
+    for (Localization loc : locs) {
+      remoteUri = loc.getRemoteUri();
+      containerLocalPath = loc.getLocalPath();
+      String srcFileStr = remoteUri;
+      ConfigFile.TypeEnum destFileType = ConfigFile.TypeEnum.STATIC;
+      Path resourceToLocalize = new Path(remoteUri);
+      boolean needUploadToHDFS = true;
+
+      /**
+       * Special handling for remoteUri directory.
+       * */
+      boolean needDeleteTempFile = false;
+      if (rdm.isDir(remoteUri)) {
+        destFileType = ConfigFile.TypeEnum.ARCHIVE;
+        srcFileStr = mayDownloadAndZipIt(
+            remoteUri, getLastNameFromPath(srcFileStr), true);
+      } else if (rdm.isRemote(remoteUri)) {
+        if (!needHdfs(remoteUri)) {
+          // Non HDFS remote uri. Non directory, no need to zip
+          srcFileStr = mayDownloadAndZipIt(
+              remoteUri, getLastNameFromPath(srcFileStr), false);
+          needDeleteTempFile = true;
+        } else {
+          // HDFS file, no need to upload
+          needUploadToHDFS = false;
+        }
+      }
+
+      // Upload file to HDFS
+      if (needUploadToHDFS) {
+        resourceToLocalize = uploadToRemoteFile(stagingDir, srcFileStr);
+      }
+      if (needDeleteTempFile) {
+        deleteFiles(srcFileStr);
+      }
+      // Remove .zip from zipped dir name
+      if (destFileType == ConfigFile.TypeEnum.ARCHIVE
+          && srcFileStr.endsWith(".zip")) {
+        // Delete local zip file
+        deleteFiles(srcFileStr);
+        int suffixIndex = srcFileStr.lastIndexOf('_');
+        srcFileStr = srcFileStr.substring(0, suffixIndex);
+      }
+      // If provided, use the name of local uri
+      if (!containerLocalPath.equals(".")
+          && !containerLocalPath.equals("./")) {
+        // Change the YARN localized file name to what'll used in container
+        srcFileStr = getLastNameFromPath(containerLocalPath);
+      }
+      String localizedName = getLastNameFromPath(srcFileStr);
+      LOG.info("The file/dir to be localized is {}",
+          resourceToLocalize.toString());
+      LOG.info("Its localized file name will be {}", localizedName);
+      serviceSpec.getConfiguration().getFiles().add(new ConfigFile().srcFile(
+          resourceToLocalize.toUri().toString()).destFile(localizedName)
+          .type(destFileType));
+      // set mounts
+      // if mount path is absolute, just use it.
+      // if relative, no need to mount explicitly
+      if (containerLocalPath.startsWith("/")) {
+        String mountStr = getLastNameFromPath(srcFileStr) + ":"
+            + containerLocalPath + ":" + loc.getMountPermission();
+        LOG.info("Add bind-mount string {}", mountStr);
+        appendToEnv(serviceSpec, "YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS",
+            mountStr, ",");
+      }
+    }
+  }
+
+  private void validFileSize(String uri) throws IOException {
+    RemoteDirectoryManager rdm = clientContext.getRemoteDirectoryManager();
+    long actualSizeByte;
+    String locationType = "Local";
+    if (rdm.isRemote(uri)) {
+      actualSizeByte = clientContext.getRemoteDirectoryManager()
+          .getRemoteFileSize(uri);
+      locationType = "Remote";
+    } else {
+      actualSizeByte = FileUtil.getDU(new File(uri));
+    }
+    long maxFileSizeMB = clientContext.getSubmarineConfig()
+        .getLong(SubmarineConfiguration.LOCALIZATION_MAX_ALLOWED_FILE_SIZE_MB,
+            SubmarineConfiguration.DEFAULT_MAX_ALLOWED_REMOTE_URI_SIZE_MB);
+    LOG.info("{} fie/dir: {}, size(Byte):{},"
+        + " Allowed max file/dir size: {}",
+        locationType, uri, actualSizeByte, maxFileSizeMB * 1024 * 1024);
+
+    if (actualSizeByte > maxFileSizeMB * 1024 * 1024) {
+      throw new IOException(uri + " size(Byte): "
+          + actualSizeByte + " exceeds configured max size:"
+          + maxFileSizeMB * 1024 * 1024);
+    }
+  }
+
-
-

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS43 INS42 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS60 INS25 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS41 INS43 INS42 INS60 INS25 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS24 INS21 INS65 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS70 INS70 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS60 INS21 INS25 INS42 INS32 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS8 INS8 INS38 INS8 INS43 INS59 INS42 INS8 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS42 INS42 INS39 INS59 INS38 INS8 INS32 INS42 INS42 INS42 INS5 INS59 INS27 INS8 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS43 INS59 INS74 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS44 INS42 INS8 INS44 INS42 INS8 INS42 INS43 INS59 INS39 INS59 INS43 INS59 INS32 INS8 INS8 INS39 INS59 INS32 INS27 INS8 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS60 INS21 INS60 INS25 INS21 INS21 INS21 INS60 INS21 INS42 INS41 INS42 INS42 INS32 INS21 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS21 INS42 INS42 INS45 INS42 INS43 INS85 INS42 INS32 INS33 INS42 INS41 INS42 INS42 INS33 INS39 INS59 INS42 INS40 INS42 INS25 INS60 INS54 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS60 INS25 INS21 INS43 INS42 INS21 INS21 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS25 INS25 INS25 INS60 INS21 INS21 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS27 INS53 INS42 INS43 INS42 INS42 INS42 INS32 INS45 INS42 INS43 INS59 INS7 INS39 INS59 INS38 INS8 INS32 INS7 INS7 INS43 INS59 INS7 INS42 INS42 INS42 INS27 INS32 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS34 INS32 INS8 INS5 INS59 INS8 INS8 INS32 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS59 INS32 INS8 INS8 INS32 INS42 INS7 INS7 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS32 INS8 INS25 INS42 INS8 INS42 INS8 INS27 INS8 INS27 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS8 INS42 INS42 INS7 INS7 INS7 INS32 INS42 INS40 INS40 INS45 INS45 INS42 INS34 INS34 INS42 INS34 INS34 INS14 UPD42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS27 INS42 INS32 INS42 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS14 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS2 INS42 INS21 INS18 INS39 INS85 INS42 INS3 INS21 INS60 INS21 INS21 INS60 INS61 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS25 INS60 INS25 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS14 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS21 INS21 INS32 INS8 INS21 INS21 INS27 INS32 INS21 INS60 INS21 INS38 INS38 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS60 INS21 INS21 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS42 INS43 INS27 INS42 INS42 INS14 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS32 INS5 INS34 INS7 INS43 INS59 INS32 INS32 INS39 INS59 INS27 INS8 INS32 INS27 INS8 INS32 INS42 INS42 INS43 INS42 INS38 INS8 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS7 INS7 INS42 INS42 INS42 INS25 INS7 INS32 INS42 INS40 INS42 INS42 INS45 INS32 INS39 INS59 INS7 INS32 INS32 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS45 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS39 INS85 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS36 INS34 INS21 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS14 INS32 INS53 INS42 INS42 INS40 INS42 INS32 INS38 INS8 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS34 INS34 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS2 INS32 INS42 INS45 INS42 INS43 INS42 INS7 INS32 INS32 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS9 INS32 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS34 INS42 INS42 INS42 INS14 INS42 INS32 INS32 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS42 DEL42 DEL42