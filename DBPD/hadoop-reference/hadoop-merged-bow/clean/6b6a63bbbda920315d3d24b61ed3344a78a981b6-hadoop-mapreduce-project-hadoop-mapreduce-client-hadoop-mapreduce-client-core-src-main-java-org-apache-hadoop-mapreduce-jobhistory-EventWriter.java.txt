Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+import com.google.common.annotations.VisibleForTesting;
+
-class EventWriter {
+@InterfaceAudience.Private
+@InterfaceStability.Unstable
+public class EventWriter {
+  static final String VERSION_BINARY = "Avro-Binary";
-  
-  EventWriter(FSDataOutputStream out) throws IOException {
+
+  /**
+   * avro encoding format supported by EventWriter.
+   */
+  public enum WriteMode { JSON, BINARY }
+  private final WriteMode writeMode;
+  private final boolean jsonOutput;  // Cache value while we have 2 modes
+
+  @VisibleForTesting
+  public EventWriter(FSDataOutputStream out, WriteMode mode)
+      throws IOException {
-    out.writeBytes(VERSION);
+    this.writeMode = mode;
+    if (this.writeMode==WriteMode.JSON) {
+      this.jsonOutput = true;
+      out.writeBytes(VERSION);
+    } else if (this.writeMode==WriteMode.BINARY) {
+      this.jsonOutput = false;
+      out.writeBytes(VERSION_BINARY);
+    } else {
+      throw new IOException("Unknown mode: " + mode);
+    }
-    this.encoder =  EncoderFactory.get().jsonEncoder(Event.SCHEMA$, out);
+    if (!this.jsonOutput) {
+      this.encoder = EncoderFactory.get().binaryEncoder(out, null);
+    } else {
+      this.encoder = EncoderFactory.get().jsonEncoder(Event.SCHEMA$, out);
+    }
-    wrapper.type = event.getEventType();
-    wrapper.event = event.getDatum();
+    wrapper.setType(event.getEventType());
+    wrapper.setEvent(event.getDatum());
-    out.writeBytes("\n");
+    if (this.jsonOutput) {
+      out.writeBytes("\n");
+    }
-  void close() throws IOException {
+  @VisibleForTesting
+  public void close() throws IOException {
-    result.name = new Utf8(name);
-    result.groups = new ArrayList<JhCounterGroup>(0);
+    result.setName(new Utf8(name));
+    result.setGroups(new ArrayList<JhCounterGroup>(0));
-      g.name = new Utf8(group.getName());
-      g.displayName = new Utf8(group.getDisplayName());
-      g.counts = new ArrayList<JhCounter>(group.size());
+      g.setName(new Utf8(group.getName()));
+      g.setDisplayName(new Utf8(group.getDisplayName()));
+      g.setCounts(new ArrayList<JhCounter>(group.size()));
-        c.name = new Utf8(counter.getName());
-        c.displayName = new Utf8(counter.getDisplayName());
-        c.value = counter.getValue();
-        g.counts.add(c);
+        c.setName(new Utf8(counter.getName()));
+        c.setDisplayName(new Utf8(counter.getDisplayName()));
+        c.setValue(counter.getValue());
+        g.getCounts().add(c);
-      result.groups.add(g);
+      result.getGroups().add(g);

INS26 INS26 INS26 INS40 INS40 INS40 INS78 INS78 INS83 INS23 INS71 INS23 INS23 INS40 INS40 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS72 INS72 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS78 INS83 INS44 MOV21 MOV21 INS78 INS83 INS42 INS42 INS45 INS65 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS25 INS25 INS25 INS42 INS66 INS42 INS7 INS27 INS8 INS25 INS38 INS8 INS8 INS32 INS32 INS22 INS8 INS32 INS32 INS22 INS42 INS22 INS40 INS21 MOV21 INS27 INS8 INS8 INS22 INS21 MOV21 INS42 INS42 MOV32 INS42 INS42 MOV32 INS52 INS42 MOV21 INS42 INS42 MOV14 INS42 INS42 MOV14 INS52 INS42 INS52 INS42 INS7 INS22 INS40 INS21 INS21 INS53 INS52 INS42 INS7 INS32 INS32 INS32 INS22 INS9 INS52 INS42 INS7 INS32 INS14 INS22 INS32 INS42 INS42 MOV14 INS42 INS42 MOV14 INS42 INS42 MOV14 INS32 INS52 INS42 INS22 INS9 INS42 INS42 INS42 INS43 INS27 INS52 INS42 INS32 INS42 INS42 INS33 INS32 INS32 INS32 INS42 INS42 INS52 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 MOV14 INS42 INS42 MOV32 INS32 INS42 INS42 DEL40 DEL7 DEL40 DEL7 DEL40 DEL7 DEL40 DEL7 DEL40 DEL7 DEL40 DEL7 DEL40 DEL7 DEL40 DEL7 DEL40 DEL7 DEL40 DEL7 DEL40 DEL40