HDFS-8178. QJM doesn't move aside stale inprogress edits files. Contributed by Istvan Fajth.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

-  private File currentInProgress = null;
+  @VisibleForTesting
+  File currentInProgress = null;
+  /**
+   * Purges the unnecessary edits and edits_inprogress files.
+   *
+   * Edits files that are ending before the minTxIdToKeep are purged.
+   * Edits in progress files that are starting before minTxIdToKeep are purged.
+   * Edits in progress files that are marked as empty, trash, corrupted or
+   * stale by file extension and starting before minTxIdToKeep are purged.
+   * Edits in progress files that are after minTxIdToKeep, but before the
+   * current edits in progress files are marked as stale for clarity.
+   *
+   * In case file removal or rename is failing a warning is logged, but that
+   * does not fail the operation.
+   *
+   * @param minTxIdToKeep the lowest transaction ID that should be retained
+   * @throws IOException if listing the storage directory fails.
+   */
-    for (EditLogFile log : editLogs) {
-      if (log.getFirstTxId() < minTxIdToKeep &&
-          log.getLastTxId() < minTxIdToKeep) {
-        purger.purgeLog(log);
+    synchronized (this) {
+      for (EditLogFile log : editLogs) {
+        if (log.getFirstTxId() < minTxIdToKeep &&
+            log.getLastTxId() < minTxIdToKeep) {
+          purger.purgeLog(log);
+        } else if (isStaleInProgressLog(minTxIdToKeep, log)) {
+          purger.markStale(log);
+        }
+  private boolean isStaleInProgressLog(long minTxIdToKeep, EditLogFile log) {
+    return log.isInProgress() &&
+        !log.getFile().equals(currentInProgress) &&
+        log.getFirstTxId() >= minTxIdToKeep &&
+        // at last we check if this segment is not already marked as .trash,
+        // .empty or .corrupted, in which case it does not match the strict
+        // regex pattern.
+        EDITS_INPROGRESS_REGEX.matcher(log.getFile().getName()).matches();
+  }
+
-      
+
+    public void moveAsideStaleInprogressFile() throws IOException {
+      assert isInProgress;
+      renameSelf(".stale");
+    }
+

INS31 INS78 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS31 INS42 INS65 INS65 INS65 INS51 INS39 INS42 INS43 INS42 INS41 INS83 INS39 INS42 INS43 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS52 INS8 INS42 INS27 INS42 INS6 INS21 MOV70 INS27 INS32 INS42 INS32 INS32 INS38 INS27 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS25 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS32 INS42 INS42 INS42 DEL83