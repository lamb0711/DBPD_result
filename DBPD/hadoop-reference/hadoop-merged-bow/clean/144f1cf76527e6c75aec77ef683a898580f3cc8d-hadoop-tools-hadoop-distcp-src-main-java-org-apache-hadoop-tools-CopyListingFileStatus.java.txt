Revert "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen."

This reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.

-  // <chunkOffset, chunkLength> represents the offset and length of a file
-  // chunk in number of bytes.
-  // used when splitting a large file to chunks to copy in parallel.
-  // If a file is not large enough to split, chunkOffset would be 0 and
-  // chunkLength would be the length of the file.
-  private long chunkOffset = 0;
-  private long chunkLength = Long.MAX_VALUE;
-
-  public CopyListingFileStatus(FileStatus fileStatus,
-      long chunkOffset, long chunkLength) {
-    this(fileStatus.getLen(), fileStatus.isDirectory(),
-        fileStatus.getReplication(), fileStatus.getBlockSize(),
-        fileStatus.getModificationTime(), fileStatus.getAccessTime(),
-        fileStatus.getPermission(), fileStatus.getOwner(),
-        fileStatus.getGroup(),
-        fileStatus.getPath());
-    this.chunkOffset = chunkOffset;
-    this.chunkLength = chunkLength;
-  }
-
-    this(length, isdir, blockReplication, blocksize, modificationTime,
-        accessTime, permission, owner, group, path, 0, Long.MAX_VALUE);
-  }
-
-  @SuppressWarnings("checkstyle:parameternumber")
-  public CopyListingFileStatus(long length, boolean isdir,
-      int blockReplication, long blocksize, long modificationTime,
-      long accessTime, FsPermission permission, String owner, String group,
-      Path path, long chunkOffset, long chunkLength) {
-    this.chunkOffset = chunkOffset;
-    this.chunkLength = chunkLength;
-  }
-
-  public CopyListingFileStatus(CopyListingFileStatus other) {
-    this.length = other.length;
-    this.isdir = other.isdir;
-    this.blockReplication = other.blockReplication;
-    this.blocksize = other.blocksize;
-    this.modificationTime = other.modificationTime;
-    this.accessTime = other.accessTime;
-    this.permission = other.permission;
-    this.owner = other.owner;
-    this.group = other.group;
-    this.path = new Path(other.path.toUri());
-    this.chunkOffset = other.chunkOffset;
-    this.chunkLength = other.chunkLength;
-  public long getChunkOffset() {
-    return chunkOffset;
-  }
-
-  public void setChunkOffset(long offset) {
-    this.chunkOffset = offset;
-  }
-
-  public long getChunkLength() {
-    return chunkLength;
-  }
-
-  public void setChunkLength(long chunkLength) {
-    this.chunkLength = chunkLength;
-  }
-
-  public boolean isSplit() {
-    return getChunkLength() != Long.MAX_VALUE &&
-        getChunkLength() != getLen();
-  }
-
-  public long getSizeToCopy() {
-    return isSplit()? getChunkLength() : getLen();
-  }
-
-
-    out.writeLong(chunkOffset);
-    out.writeLong(chunkLength);
-
-    chunkOffset = in.readLong();
-    chunkLength = in.readLong();
-    sb.append(this.getPath().toString());
-    sb.append(" length = ").append(this.getLen());
-    sb.append(" aclEntries = ").append(aclEntries);
-    sb.append(", xAttrs = ").append(xAttrs);
-    if (isSplit()) {
-      sb.append(", chunkOffset = ").append(this.getChunkOffset());
-      sb.append(", chunkLength = ").append(this.getChunkLength());
-    }
+    sb.append("aclEntries = " + aclEntries);
+    sb.append(", xAttrs = " + xAttrs);

MOV42 MOV42 INS27 MOV42 MOV42 INS27 INS45 INS42 INS45 INS42 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL39 DEL42 DEL40 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL17 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL45 DEL79 DEL83 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL40 DEL17 DEL8 DEL31 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL32 DEL42 DEL32 DEL27 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL16 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL52 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL52 DEL42 DEL32 DEL32 DEL21 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL52 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL52 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25