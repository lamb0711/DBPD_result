HDFS-12650. Use slf4j instead of log4j in LeaseManager. Contributed by Ajay Kumar.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  public static final Log LOG = LogFactory.getLog(LeaseManager.class);
+  public static final Logger LOG = LoggerFactory.getLogger(LeaseManager.class
+      .getName());
-        LOG.warn("The file " + cons.getFullPathName()
-            + " is not under construction but has lease.");
+        LOG.warn("The file {} is not under construction but has lease.",
+            cons.getFullPathName());
-    LOG.info("Number of blocks under construction: " + numUCBlocks);
+    LOG.info("Number of blocks under construction: {}", numUCBlocks);
-      LOG.info("Took " + (endTimeMs - startTimeMs) + " ms to collect "
-          + iipSet.size() + " open files with leases" +
-          ((ancestorDir != null) ?
+      LOG.info("Took {} ms to collect {} open files with leases {}",
+          (endTimeMs - startTimeMs), iipSet.size(), ((ancestorDir != null) ?
-        LOG.warn("The file " + inodeFile.getFullPathName()
-            + " is not under construction but has lease.");
+        LOG.warn("The file {} is not under construction but has lease.",
+            inodeFile.getFullPathName());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("inode " + inodeId + " not found in lease.files (=" + lease
-                + ")");
-      }
+      LOG.debug("inode {} not found in lease.files (={})", inodeId, lease);
-        LOG.error(lease + " not found in sortedLeases");
+        LOG.error("{} not found in sortedLeases", lease);
-      LOG.warn("Removing non-existent lease! holder=" + holder +
-          " src=" + src.getFullPathName());
+      LOG.warn("Removing non-existent lease! holder={} src={}", holder, src
+          .getFullPathName());
-          if (LOG.isDebugEnabled()) {
-            LOG.debug(name + " is interrupted", ie);
-          }
+          LOG.debug("{} is interrupted", name, ie);
-      LOG.info(leaseToCheck + " has expired hard limit");
+      LOG.info("{} has expired hard limit", leaseToCheck);
-            LOG.warn("Cannot release the path " + p + " in the lease "
-                + leaseToCheck + ". It will be retried.", e);
+            LOG.warn("Cannot release the path {} in the lease {}. It will be "
+                + "retried.", p, leaseToCheck, e);
-              LOG.debug("Lease recovery for inode " + id + " is complete. " +
-                            "File closed.");
+              LOG.debug("Lease recovery for inode {} is complete. File closed"
+                  + ".", id);
-              LOG.debug("Started block recovery " + p + " lease " + leaseToCheck);
+              LOG.debug("Started block recovery {} lease {}", p, leaseToCheck);
-          LOG.warn("Removing lease with an invalid path: " + p + ","
-              + leaseToCheck, e);
+          LOG.warn("Removing lease with an invalid path: {},{}", p,
+              leaseToCheck, e);
-          LOG.debug("Breaking out of checkLeases after " +
-              fsnamesystem.getMaxLockHoldToReleaseLeaseMs() + "ms.");
+          LOG.debug("Breaking out of checkLeases after {} ms.",
+              fsnamesystem.getMaxLockHoldToReleaseLeaseMs());

MOV26 MOV26 UPD40 UPD40 UPD43 UPD42 INS32 MOV25 INS42 INS42 MOV32 MOV42 MOV38 UPD42 INS45 INS42 INS45 MOV36 MOV32 MOV36 INS45 INS42 INS42 INS45 INS42 MOV32 INS45 INS42 INS8 INS45 MOV32 INS45 MOV32 INS45 INS42 MOV21 INS45 INS42 INS45 MOV32 INS45 INS42 INS42 INS27 INS42 INS42 UPD45 MOV45 INS45 INS42 INS45 INS42 INS42 UPD45 UPD45 DEL42 DEL45 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL8 DEL25 DEL42 DEL45 DEL27 DEL45 DEL42 DEL45 DEL27 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL42 DEL45 DEL27 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL45 DEL27