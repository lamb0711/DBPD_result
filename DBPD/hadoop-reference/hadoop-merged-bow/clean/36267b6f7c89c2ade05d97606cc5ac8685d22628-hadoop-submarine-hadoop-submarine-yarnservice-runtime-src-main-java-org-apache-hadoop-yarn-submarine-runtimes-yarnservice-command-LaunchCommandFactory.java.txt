SUBMARINE-52. [SUBMARINE-14] Generate Service spec + launch script for single-node PyTorch learning job. Contributed by Szilard Nemeth.

-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.yarn.submarine.client.cli.param.RunJobParameters;
-import org.apache.hadoop.yarn.submarine.common.api.TaskType;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.HadoopEnvironmentSetup;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.command.TensorBoardLaunchCommand;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.command.TensorFlowPsLaunchCommand;
-import org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.command.TensorFlowWorkerLaunchCommand;
+import org.apache.hadoop.yarn.submarine.common.api.Role;
-import java.util.Objects;
- * Simple factory to create instances of {@link AbstractLaunchCommand}
- * based on the {@link TaskType}.
- * All dependencies are passed to this factory that could be required
- * by any implementor of {@link AbstractLaunchCommand}.
+ * Interface for creating launch commands.
-public class LaunchCommandFactory {
-  private final HadoopEnvironmentSetup hadoopEnvSetup;
-  private final RunJobParameters parameters;
-  private final Configuration yarnConfig;
-
-  public LaunchCommandFactory(HadoopEnvironmentSetup hadoopEnvSetup,
-      RunJobParameters parameters, Configuration yarnConfig) {
-    this.hadoopEnvSetup = hadoopEnvSetup;
-    this.parameters = parameters;
-    this.yarnConfig = yarnConfig;
-  }
-
-  public AbstractLaunchCommand createLaunchCommand(TaskType taskType,
-      Component component) throws IOException {
-    Objects.requireNonNull(taskType, "TaskType must not be null!");
-
-    if (taskType == TaskType.WORKER || taskType == TaskType.PRIMARY_WORKER) {
-      return new TensorFlowWorkerLaunchCommand(hadoopEnvSetup, taskType,
-          component, parameters, yarnConfig);
-
-    } else if (taskType == TaskType.PS) {
-      return new TensorFlowPsLaunchCommand(hadoopEnvSetup, taskType, component,
-          parameters, yarnConfig);
-
-    } else if (taskType == TaskType.TENSORBOARD) {
-      return new TensorBoardLaunchCommand(hadoopEnvSetup, taskType, component,
-          parameters);
-    }
-    throw new IllegalStateException("Unknown task type: " + taskType);
-  }
+public interface LaunchCommandFactory {
+  AbstractLaunchCommand createLaunchCommand(Role role, Component component)
+      throws IOException;

UPD40 UPD66 UPD43 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL42 DEL65 DEL66 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL25 DEL25 DEL25 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8