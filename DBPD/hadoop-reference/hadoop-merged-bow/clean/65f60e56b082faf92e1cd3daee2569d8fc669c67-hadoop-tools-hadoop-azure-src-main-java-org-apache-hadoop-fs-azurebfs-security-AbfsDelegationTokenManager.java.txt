HADOOP-16068. ABFS Authentication and Delegation Token plugins to optionally be bound to specific URI of the store.

Contributed by Steve Loughran.

+import java.io.Closeable;
+import java.net.URI;
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.fs.azurebfs.extensions.BoundDTExtension;
+import org.apache.hadoop.fs.azurebfs.extensions.ExtensionHelper;
+import org.apache.hadoop.io.IOUtils;
+ *
+ * Instantiates the class declared in
+ * {@link ConfigurationKeys#FS_AZURE_DELEGATION_TOKEN_PROVIDER_TYPE} and
+ * issues tokens from it.
-public class AbfsDelegationTokenManager {
+public class AbfsDelegationTokenManager implements BoundDTExtension {
+  /**
+   * Create the custom delegation token manager and call its
+   * {@link CustomDelegationTokenManager#initialize(Configuration)} method.
+   * @param conf configuration
+   * @throws IOException failure during initialization.
+   * @throws RuntimeException classloading problems.
+   */
-    CustomDelegationTokenManager customTokenMgr = (CustomDelegationTokenManager) ReflectionUtils
+    CustomDelegationTokenManager customTokenMgr = ReflectionUtils
-    if (customTokenMgr == null) {
-      throw new IllegalArgumentException(String.format("Failed to initialize %s.", customDelegationTokenMgrClass));
-    }
-
+    Preconditions.checkArgument(customTokenMgr != null,
+        "Failed to initialize %s.", customDelegationTokenMgrClass);
-
+  /**
+   * Bind to a filesystem instance by passing the binding information down
+   * to any token manager which implements {@link BoundDTExtension}.
+   *
+   * This is not invoked before renew or cancel operations, but is guaranteed
+   * to be invoked before calls to {@link #getDelegationToken(String)}.
+   * @param fsURI URI of the filesystem.
+   * @param conf configuration of this extension.
+   * @throws IOException bind failure.
+   */
+  @Override
+  public void bind(final URI fsURI, final Configuration conf)
+      throws IOException {
+    Preconditions.checkNotNull(fsURI, "Np Filesystem URI");
+    ExtensionHelper.bind(tokenManager, fsURI, conf);
+  }
+
+  /**
+   * Query the token manager for the service name; if it does not implement
+   * the extension interface, null is returned.
+   * @return the canonical service name.
+   */
+  @Override
+  public String getCanonicalServiceName() {
+    return ExtensionHelper.getCanonicalServiceName(tokenManager, null);
+  }
+
+  /**
+   * Close.
+   * If the token manager is closeable, it has its {@link Closeable#close()}
+   * method (quietly) invoked.
+   */
+  @Override
+  public void close() {
+    if (tokenManager instanceof Closeable) {
+      IOUtils.cleanupWithLogger(LOG, (Closeable) tokenManager);
+    }
+  }
+
+  /**
+   * Get a delegation token by invoking
+   * {@link CustomDelegationTokenManager#getDelegationToken(String)}.
+   * If the token returned already has a Kind; that is used.
+   * If not, then the token kind is set to
+   * {@link AbfsDelegationTokenIdentifier#TOKEN_KIND}, which implicitly
+   * resets any token renewer class.
+   * @param renewer the principal permitted to renew the token.
+   * @return a token for the filesystem.
+   * @throws IOException failure.
+   */
+    LOG.debug("Requesting Delegation token for {}", renewer);
-    token.setKind(AbfsDelegationTokenIdentifier.TOKEN_KIND);
+    if (token.getKind() == null) {
+      // if a token type is not set, use the default.
+      // note: this also sets the renewer to null.
+      token.setKind(AbfsDelegationTokenIdentifier.TOKEN_KIND);
+    }
+
+  @VisibleForTesting
+  public CustomDelegationTokenManager getTokenManager() {
+    return tokenManager;
+  }
+
+  @Override
+  public String toString() {
+    final StringBuilder sb = new StringBuilder(
+        "AbfsDelegationTokenManager{");
+    sb.append("tokenManager=").append(tokenManager);
+    sb.append('}');
+    return sb.toString();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS31 INS31 INS31 INS31 INS31 INS42 INS29 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS29 INS78 INS83 MOV43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS66 INS65 INS66 INS66 INS65 INS65 INS65 INS65 INS21 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS21 INS65 INS65 INS42 INS42 INS41 INS65 INS42 INS25 INS65 INS65 INS65 INS65 INS21 INS25 INS42 INS41 INS42 INS42 INS60 INS21 INS21 INS41 INS67 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 MOV43 INS32 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS66 INS66 INS66 INS32 INS66 INS66 INS65 INS66 INS62 INS8 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS32 INS27 INS8 INS42 INS83 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS68 MOV32 INS42 INS42 INS27 MOV45 MOV42 INS42 INS68 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS68 INS42 INS43 INS21 INS68 INS67 INS42 INS42 INS45 INS42 INS32 INS33 MOV21 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS69 MOV42 MOV33 INS42 INS69 INS42 INS42 INS42 INS32 INS42 INS42 INS69 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS45 INS43 INS43 INS42 INS42 INS42 INS11 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 DEL11 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25