HDFS-4534. Add INodeReference in order to support rename with snapshots.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1458164 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.INodeReference;
+import org.apache.hadoop.hdfs.util.Diff.ListType;
-    private final INode setCreatedChild(final int c, final INode newChild) {
-      return getCreatedList().set(c, newChild);
+    /**
+     * Replace the given child from the created/deleted list.
+     * @return true if the child is replaced; false if the child is not found.
+     */
+    private final boolean replace(final ListType type,
+        final INode oldChild, final INode newChild) {
+      final List<INode> list = getList(type); 
+      final int i = search(list, oldChild.getLocalNameBytes());
+      if (i < 0) {
+        return false;
+      }
+
+      final INode removed = list.set(i, newChild);
+      Preconditions.checkState(removed == oldChild);
+      return true;
-      final List<INode> created = getCreatedList();
+      final List<INode> created = getList(ListType.CREATED);
-      List<INode> createdList = getCreatedList();
+      final List<INode> createdList = getList(ListType.CREATED);
-      List<INode> deletedList = getDeletedList();
+      final List<INode> deletedList = getList(ListType.DELETED);
-        d.computeQuotaUsage(counts, false);
-        d.destroyAndCollectBlocks(collectedBlocks);
+        if (INodeReference.tryRemoveReference(d) <= 0) {
+          d.computeQuotaUsage(counts, false);
+          d.destroyAndCollectBlocks(collectedBlocks);
+        }
-      final List<INode> created = getCreatedList();
+      final List<INode> created = getList(ListType.CREATED);
-      final List<INode> deleted = getDeletedList();
+      final List<INode> deleted = getList(ListType.DELETED);
-      for (INode node : getDeletedList()) {
+      for (INode node : getList(ListType.DELETED)) {
-      List<INode> created = getCreatedList();
-      List<INode> deleted = getDeletedList();
+      List<INode> created = getList(ListType.CREATED);
+      List<INode> deleted = getList(ListType.DELETED);
-            inode.computeQuotaUsage(counts, false);
-            inode.destroyAndCollectBlocks(collectedBlocks);
+            if (INodeReference.tryRemoveReference(inode) <= 0) {
+              inode.computeQuotaUsage(counts, false);
+              inode.destroyAndCollectBlocks(collectedBlocks);
+            }
+    
+    /** Replace the given child in the created/deleted list, if there is any. */
+    private boolean replaceChild(final ListType type, final INode oldChild,
+        final INode newChild) {
+      final List<DirectoryDiff> diffList = asList();
+      for(int i = diffList.size() - 1; i >= 0; i--) {
+        final ChildrenDiff diff = diffList.get(i).diff;
+        if (diff.replace(type, oldChild, newChild)) {
+          return true;
+        }
+      }
+      return false;
+    }
-      final int c = diff.searchCreatedIndex(name);
+      final int c = diff.searchIndex(ListType.CREATED, name);
+    diffs.replaceChild(ListType.CREATED, oldChild, newChild);
+  }
-    // replace same child in the created list, if there is any.
-    final byte[] name = oldChild.getLocalNameBytes();
-    final List<DirectoryDiff> diffList = diffs.asList();
-    for(int i = diffList.size() - 1; i >= 0; i--) {
-      final ChildrenDiff diff = diffList.get(i).diff;
-      final int c = diff.searchCreatedIndex(name);
-      if (c >= 0) {
-        final INode removed = diff.setCreatedChild(c, newChild);
-        Preconditions.checkState(removed == oldChild);
-        return;
-      }
-    }
+  /** The child just has been removed, replace it with a reference. */
+  public INodeReference.WithName replaceRemovedChild4Reference(
+      INode oldChild, INodeReference.WithCount newChild, byte[] childName) {
+    final INodeReference.WithName ref = new INodeReference.WithName(
+        newChild, childName);
+    newChild.incrementReferenceCount();
+    diffs.replaceChild(ListType.CREATED, oldChild, ref);
+    // the old child must be in the deleted list
+    Preconditions.checkState(
+        diffs.replaceChild(ListType.DELETED, oldChild, ref));
+    return ref;
-          for (INode cNode : priorDiff.getChildrenDiff().getCreatedList()) {
+          for (INode cNode : priorDiff.getChildrenDiff().getList(ListType.CREATED)) {
-      for(INode deleted : d.getChildrenDiff().getDeletedList()) {
+      for(INode deleted : d.getChildrenDiff().getList(ListType.DELETED)) {
-      for(INode deleted : d.getChildrenDiff().getDeletedList()) {
+      for(INode deleted : d.getChildrenDiff().getList(ListType.DELETED)) {

INS26 INS26 INS40 INS40 INS31 INS31 MOV31 MOV78 INS83 INS39 INS42 MOV44 MOV44 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS29 INS39 INS42 INS44 INS44 INS44 INS8 MOV60 INS29 UPD83 UPD39 INS44 INS44 MOV44 MOV21 INS21 INS65 INS40 MOV43 INS42 INS43 INS42 MOV5 INS42 INS60 INS21 INS21 INS21 INS41 INS65 INS65 INS83 INS43 INS42 INS83 INS43 INS42 MOV83 INS43 INS42 MOV60 INS60 INS25 INS60 MOV21 INS41 INS60 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS32 INS66 INS40 INS83 INS43 INS59 INS32 INS32 INS32 INS42 INS66 INS66 INS42 INS42 INS42 INS83 INS39 INS59 INS27 INS8 INS83 MOV43 INS59 INS9 INS83 INS74 INS59 INS83 INS83 INS8 INS66 INS42 INS42 INS9 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS32 INS42 INS34 INS41 INS42 INS32 INS43 INS43 INS42 INS32 INS25 UPD42 INS40 UPD42 UPD42 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 MOV32 UPD42 INS42 INS42 UPD42 MOV42 MOV32 INS9 INS42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS40 UPD42 INS40 UPD42 INS40 INS27 MOV8 UPD42 INS40 UPD42 INS40 UPD42 INS40 UPD42 INS40 INS32 INS8 INS40 MOV32 INS42 INS40 UPD42 INS40 INS32 INS34 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 MOV41 UPD42 INS40 INS42 INS42 INS42 INS9 INS8 UPD42 INS40 INS25 INS27 MOV8 INS32 INS34 INS42 INS42 INS42 DEL42 DEL39 DEL42 DEL44 DEL32 DEL32 DEL41 DEL8 DEL83 DEL42 DEL59 DEL60 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL83 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL32