HDDS-99. Adding SCM Audit log. Contributed by Dinesh Chitlangia.

+import com.google.common.collect.Maps;
+import org.apache.hadoop.ipc.Server;
+import org.apache.hadoop.ozone.audit.AuditAction;
+import org.apache.hadoop.ozone.audit.AuditEventStatus;
+import org.apache.hadoop.ozone.audit.AuditLogger;
+import org.apache.hadoop.ozone.audit.AuditLoggerType;
+import org.apache.hadoop.ozone.audit.AuditMessage;
+import org.apache.hadoop.ozone.audit.Auditor;
+import org.apache.hadoop.ozone.audit.SCMAction;
+import java.util.Map;
-    StorageContainerLocationProtocol, EventHandler<Boolean> {
+    StorageContainerLocationProtocol, EventHandler<Boolean>, Auditor {
+  private static final AuditLogger AUDIT =
+      new AuditLogger(AuditLoggerType.SCMLOGGER);
+    boolean auditSuccess = true;
+    Map<String, String> auditMap = Maps.newHashMap();
+    auditMap.put("containerID", String.valueOf(containerID));
-    return scm.getContainerManager()
-        .getContainer(ContainerID.valueof(containerID));
+    try {
+      return scm.getContainerManager()
+          .getContainer(ContainerID.valueof(containerID));
+    } catch (IOException ex) {
+      auditSuccess = false;
+      AUDIT.logReadFailure(
+          buildAuditMessageForFailure(SCMAction.GET_CONTAINER, auditMap, ex)
+      );
+      throw ex;
+    } finally {
+      if(auditSuccess) {
+        AUDIT.logReadSuccess(
+            buildAuditMessageForSuccess(SCMAction.GET_CONTAINER, auditMap)
+        );
+      }
+    }
+
-    if (chillModePrecheck.isInChillMode()) {
-      ContainerInfo contInfo = scm.getContainerManager()
-          .getContainer(ContainerID.valueof(containerID));
-      if (contInfo.isOpen()) {
-        if (!hasRequiredReplicas(contInfo)) {
-          throw new SCMException("Open container " + containerID + " doesn't"
-              + " have enough replicas to service this operation in "
-              + "Chill mode.", ResultCodes.CHILL_MODE_EXCEPTION);
+    Map<String, String> auditMap = Maps.newHashMap();
+    auditMap.put("containerID", String.valueOf(containerID));
+    boolean auditSuccess = true;
+    try {
+      if (chillModePrecheck.isInChillMode()) {
+        ContainerInfo contInfo = scm.getContainerManager()
+            .getContainer(ContainerID.valueof(containerID));
+        if (contInfo.isOpen()) {
+          if (!hasRequiredReplicas(contInfo)) {
+            throw new SCMException("Open container " + containerID + " doesn't"
+                + " have enough replicas to service this operation in "
+                + "Chill mode.", ResultCodes.CHILL_MODE_EXCEPTION);
+          }
+      getScm().checkAdminAccess(null);
+
+      final ContainerID id = ContainerID.valueof(containerID);
+      final ContainerInfo container = scm.getContainerManager().
+          getContainer(id);
+      final Pipeline pipeline;
+
+      if (container.isOpen()) {
+        // Ratis pipeline
+        pipeline = scm.getPipelineManager()
+            .getPipeline(container.getPipelineID());
+      } else {
+        pipeline = scm.getPipelineManager().createPipeline(
+            HddsProtos.ReplicationType.STAND_ALONE,
+            container.getReplicationFactor(),
+            scm.getContainerManager()
+                .getContainerReplicas(id).stream()
+                .map(ContainerReplica::getDatanodeDetails)
+                .collect(Collectors.toList()));
+      }
+
+      return new ContainerWithPipeline(container, pipeline);
+    } catch (IOException ex) {
+      auditSuccess = false;
+      AUDIT.logReadFailure(
+          buildAuditMessageForFailure(SCMAction.GET_CONTAINER_WITH_PIPELINE,
+              auditMap, ex)
+      );
+      throw ex;
+    } finally {
+      if(auditSuccess) {
+        AUDIT.logReadSuccess(
+            buildAuditMessageForSuccess(SCMAction.GET_CONTAINER_WITH_PIPELINE,
+                auditMap)
+        );
+      }
-    getScm().checkAdminAccess(null);
-
-    final ContainerID id = ContainerID.valueof(containerID);
-    final ContainerInfo container = scm.getContainerManager().getContainer(id);
-    final Pipeline pipeline;
-
-    if (container.isOpen()) {
-      // Ratis pipeline
-      pipeline = scm.getPipelineManager()
-          .getPipeline(container.getPipelineID());
-    } else {
-      pipeline = scm.getPipelineManager().createPipeline(
-          HddsProtos.ReplicationType.STAND_ALONE,
-          container.getReplicationFactor(),
-          scm.getContainerManager()
-              .getContainerReplicas(id).stream()
-              .map(ContainerReplica::getDatanodeDetails)
-              .collect(Collectors.toList()));
-    }
-
-    return new ContainerWithPipeline(container, pipeline);
-    return scm.getContainerManager().
-        listContainer(ContainerID.valueof(startContainerID), count);
+    boolean auditSuccess = true;
+    Map<String, String> auditMap = Maps.newHashMap();
+    auditMap.put("startContainerID", String.valueOf(startContainerID));
+    auditMap.put("count", String.valueOf(count));
+    try {
+      return scm.getContainerManager().
+          listContainer(ContainerID.valueof(startContainerID), count);
+    } catch (Exception ex) {
+      auditSuccess = false;
+      AUDIT.logReadFailure(
+          buildAuditMessageForFailure(SCMAction.LIST_CONTAINER, auditMap, ex));
+      throw ex;
+    } finally {
+      if(auditSuccess) {
+        AUDIT.logReadSuccess(
+            buildAuditMessageForSuccess(SCMAction.LIST_CONTAINER, auditMap));
+      }
+    }
+
-    getScm().checkAdminAccess(remoteUser);
-    scm.getContainerManager().deleteContainer(ContainerID.valueof(containerID));
-
+    boolean auditSuccess = true;
+    Map<String, String> auditMap = Maps.newHashMap();
+    auditMap.put("containerID", String.valueOf(containerID));
+    auditMap.put("remoteUser", remoteUser);
+    try {
+      getScm().checkAdminAccess(remoteUser);
+      scm.getContainerManager().deleteContainer(
+          ContainerID.valueof(containerID));
+    } catch (Exception ex) {
+      auditSuccess = false;
+      AUDIT.logWriteFailure(
+          buildAuditMessageForFailure(SCMAction.DELETE_CONTAINER, auditMap, ex)
+      );
+      throw ex;
+    } finally {
+      if(auditSuccess) {
+        AUDIT.logWriteSuccess(
+            buildAuditMessageForSuccess(SCMAction.DELETE_CONTAINER, auditMap)
+        );
+      }
+    }
+    AUDIT.logReadSuccess(
+        buildAuditMessageForSuccess(SCMAction.LIST_PIPELINE, null));
+    Map<String, String> auditMap = Maps.newHashMap();
+    auditMap.put("pipelineID", pipelineID.getId());
+    AUDIT.logWriteSuccess(
+        buildAuditMessageForSuccess(SCMAction.CLOSE_PIPELINE, null)
+    );
-    ScmInfo.Builder builder =
-        new ScmInfo.Builder()
-            .setClusterId(scm.getScmStorage().getClusterID())
-            .setScmId(scm.getScmStorage().getScmId());
-    return builder.build();
+    boolean auditSuccess = true;
+    try{
+      ScmInfo.Builder builder =
+          new ScmInfo.Builder()
+              .setClusterId(scm.getScmStorage().getClusterID())
+              .setScmId(scm.getScmStorage().getScmId());
+      return builder.build();
+    } catch (Exception ex) {
+      auditSuccess = false;
+      AUDIT.logReadFailure(
+          buildAuditMessageForFailure(SCMAction.GET_SCM_INFO, null, ex)
+      );
+      throw ex;
+    } finally {
+      if(auditSuccess) {
+        AUDIT.logReadSuccess(
+            buildAuditMessageForSuccess(SCMAction.GET_SCM_INFO, null)
+        );
+      }
+    }
+    AUDIT.logReadSuccess(
+        buildAuditMessageForSuccess(SCMAction.IN_CHILL_MODE, null)
+    );
+    AUDIT.logWriteSuccess(
+        buildAuditMessageForSuccess(SCMAction.FORCE_EXIT_CHILL_MODE, null)
+    );
+
+  @Override
+  public AuditMessage buildAuditMessageForSuccess(
+      AuditAction op, Map<String, String> auditMap) {
+    return new AuditMessage.Builder()
+        .setUser((Server.getRemoteUser() == null) ? null :
+            Server.getRemoteUser().getUserName())
+        .atIp((Server.getRemoteIp() == null) ? null :
+            Server.getRemoteIp().getHostAddress())
+        .forOperation(op.getAction())
+        .withParams(auditMap)
+        .withResult(AuditEventStatus.SUCCESS.toString())
+        .withException(null)
+        .build();
+  }
+
+  @Override
+  public AuditMessage buildAuditMessageForFailure(AuditAction op, Map<String,
+      String> auditMap, Throwable throwable) {
+    return new AuditMessage.Builder()
+        .setUser((Server.getRemoteUser() == null) ? null :
+            Server.getRemoteUser().getUserName())
+        .atIp((Server.getRemoteIp() == null) ? null :
+            Server.getRemoteIp().getHostAddress())
+        .forOperation(op.getAction())
+        .withParams(auditMap)
+        .withResult(AuditEventStatus.FAILURE.toString())
+        .withException(throwable)
+        .build();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS42 INS83 INS83 INS83 INS43 INS59 INS8 INS8 INS8 INS8 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS14 MOV60 INS60 INS60 INS21 MOV21 INS54 INS60 INS21 INS60 INS54 INS60 INS60 INS21 INS21 INS54 MOV60 INS60 INS60 INS21 INS21 INS54 INS21 INS60 INS21 INS21 INS60 INS54 INS21 INS21 INS42 INS42 INS43 INS42 INS74 INS42 INS41 INS42 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS41 INS43 INS40 INS39 INS59 INS74 INS59 INS32 MOV8 INS12 INS8 INS74 INS59 INS32 INS39 INS59 MOV8 INS12 INS8 INS39 INS59 INS74 INS59 INS32 INS32 MOV8 INS12 INS8 INS39 INS59 INS74 INS59 INS32 INS32 MOV8 INS12 INS8 INS32 INS74 INS59 INS32 INS32 INS39 INS59 MOV8 INS12 INS8 INS32 INS32 INS42 INS43 INS43 INS43 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS9 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS32 INS44 INS8 INS25 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS9 INS44 INS8 INS25 INS42 INS9 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS44 INS8 INS25 INS42 INS9 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS44 INS8 INS25 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS9 INS44 INS8 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS53 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS53 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS53 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS53 INS42 INS8 INS42 INS40 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS33 INS43 INS42 INS21 INS21 INS53 INS42 INS8 INS42 INS40 INS33 INS42 INS40 INS33 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS7 INS32 INS42 INS21 INS42 INS7 INS32 INS42 INS21 INS42 INS7 INS32 INS42 INS21 INS42 INS7 INS32 INS42 INS21 INS42 INS7 INS32 INS42 INS21 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS9 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS33 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS33 INS32 INS42 INS16 INS42 INS42 INS32 INS42 INS16 INS42 INS42 INS14 INS42 INS16 INS36 INS33 INS32 INS14 INS42 INS16 INS36 INS33 INS32 INS43 INS36 INS33 INS32 INS27 INS32 INS42 INS43 INS36 INS33 INS32 INS27 INS32 INS42 INS40 INS27 INS32 INS42 INS32 INS33 INS42 INS42 INS40 INS27 INS32 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42