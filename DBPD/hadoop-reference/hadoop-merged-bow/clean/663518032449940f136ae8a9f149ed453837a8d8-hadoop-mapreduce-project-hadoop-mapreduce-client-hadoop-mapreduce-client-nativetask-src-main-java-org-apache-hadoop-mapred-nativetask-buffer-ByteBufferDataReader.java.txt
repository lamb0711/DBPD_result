MAPREDUCE-6000. native-task: Simplify ByteBufferDataReader/Writer. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1613036 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.base.Charsets;
+
+  private java.io.DataInputStream javaReader;
-      this.byteBuffer = buffer.getByteBuffer();
+      reset(buffer);
+    javaReader = new java.io.DataInputStream(this);
-
-    InputStream in = this;
-
-    char buf[] = lineCache;
-
-    if (buf == null) {
-      buf = lineCache = new char[128];
-    }
-
-    int room = buf.length;
-    int offset = 0;
-    int c;
-
-    loop: while (true) {
-      switch (c = in.read()) {
-      case -1:
-      case '\n':
-        break loop;
-
-      case '\r':
-        final int c2 = in.read();
-        if ((c2 != '\n') && (c2 != -1)) {
-          if (!(in instanceof PushbackInputStream)) {
-            in = new PushbackInputStream(in);
-          }
-          ((PushbackInputStream) in).unread(c2);
-        }
-        break loop;
-
-      default:
-        if (--room < 0) {
-          buf = new char[offset + 128];
-          room = buf.length - offset - 1;
-          System.arraycopy(lineCache, 0, buf, 0, offset);
-          lineCache = buf;
-        }
-        buf[offset++] = (char) c;
-        break;
-      }
-    }
-    if ((c == -1) && (offset == 0)) {
-      return null;
-    }
-    return String.copyValueOf(buf, 0, offset);
+    return javaReader.readLine();
-    return readUTF(this);
-  }
-
-  private final static String readUTF(DataInput in) throws IOException {
-    final int utflen = in.readUnsignedShort();
-    byte[] bytearr = null;
-    char[] chararr = null;
-
-    bytearr = new byte[utflen];
-    chararr = new char[utflen];
-
-    int c, char2, char3;
-    int count = 0;
-    int chararr_count = 0;
-
-    in.readFully(bytearr, 0, utflen);
-
-    while (count < utflen) {
-      c = bytearr[count] & 0xff;
-      if (c > 127) {
-        break;
-      }
-      count++;
-      chararr[chararr_count++] = (char) c;
-    }
-
-    while (count < utflen) {
-      c = bytearr[count] & 0xff;
-      switch (c >> 4) {
-      case 0:
-      case 1:
-      case 2:
-      case 3:
-      case 4:
-      case 5:
-      case 6:
-      case 7:
-        /* 0xxxxxxx */
-        count++;
-        chararr[chararr_count++] = (char) c;
-        break;
-      case 12:
-      case 13:
-        /* 110x xxxx 10xx xxxx */
-        count += 2;
-        if (count > utflen) {
-          throw new UTFDataFormatException("malformed input: partial character at end");
-        }
-        char2 = bytearr[count - 1];
-        if ((char2 & 0xC0) != 0x80) {
-          throw new UTFDataFormatException("malformed input around byte " + count);
-        }
-        chararr[chararr_count++] = (char) (((c & 0x1F) << 6) | (char2 & 0x3F));
-        break;
-      case 14:
-        /* 1110 xxxx 10xx xxxx 10xx xxxx */
-        count += 3;
-        if (count > utflen) {
-          throw new UTFDataFormatException("malformed input: partial character at end");
-        }
-        char2 = bytearr[count - 2];
-        char3 = bytearr[count - 1];
-        if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {
-          throw new UTFDataFormatException("malformed input around byte " + (count - 1));
-        }
-        chararr[chararr_count++] = (char) (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
-        break;
-      default:
-        /* 10xx xxxx, 1111 xxxx */
-        throw new UTFDataFormatException("malformed input around byte " + count);
-      }
-    }
-    // The number of chars produced may be less than utflen
-    return new String(chararr, 0, chararr_count);
+    return javaReader.readUTF();

INS26 MOV31 INS40 INS23 INS83 INS43 INS59 UPD42 MOV44 MOV78 MOV43 UPD42 MOV43 MOV78 UPD83 MOV43 MOV43 INS40 INS42 MOV21 INS41 MOV27 INS32 UPD42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD43 INS52 INS42 INS42 INS40 DEL42 DEL43 DEL42 DEL52 DEL59 DEL60 DEL39 DEL42 DEL85 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL7 DEL7 DEL42 DEL42 DEL39 DEL42 DEL40 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL9 DEL42 DEL42 DEL42 DEL32 DEL7 DEL34 DEL38 DEL49 DEL13 DEL49 DEL42 DEL10 DEL13 DEL49 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL13 DEL27 DEL36 DEL42 DEL34 DEL38 DEL27 DEL36 DEL27 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL8 DEL25 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL10 DEL49 DEL42 DEL38 DEL34 DEL27 DEL42 DEL39 DEL85 DEL5 DEL42 DEL34 DEL27 DEL3 DEL7 DEL21 DEL42 DEL40 DEL42 DEL34 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL37 DEL2 DEL39 DEL42 DEL11 DEL7 DEL21 DEL10 DEL50 DEL8 DEL61 DEL30 DEL42 DEL34 DEL38 DEL27 DEL36 DEL42 DEL34 DEL27 DEL36 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL41 DEL83 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL52 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL7 DEL21 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL7 DEL21 DEL39 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL2 DEL34 DEL27 DEL7 DEL21 DEL42 DEL34 DEL27 DEL10 DEL8 DEL25 DEL42 DEL37 DEL21 DEL42 DEL42 DEL37 DEL2 DEL39 DEL42 DEL11 DEL7 DEL21 DEL8 DEL61 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL2 DEL34 DEL27 DEL7 DEL21 DEL42 DEL34 DEL27 DEL34 DEL49 DEL34 DEL49 DEL34 DEL49 DEL34 DEL49 DEL34 DEL49 DEL34 DEL49 DEL34 DEL49 DEL34 DEL49 DEL42 DEL37 DEL21 DEL42 DEL42 DEL37 DEL2 DEL39 DEL42 DEL11 DEL7 DEL21 DEL10 DEL34 DEL49 DEL34 DEL49 DEL42 DEL34 DEL7 DEL21 DEL42 DEL42 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL34 DEL27 DEL2 DEL7 DEL21 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL37 DEL2 DEL39 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL36 DEL42 DEL34 DEL27 DEL36 DEL27 DEL36 DEL11 DEL7 DEL21 DEL10 DEL34 DEL49 DEL42 DEL34 DEL7 DEL21 DEL42 DEL42 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL34 DEL27 DEL2 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL27 DEL2 DEL7 DEL21 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL36 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL36 DEL27 DEL42 DEL43 DEL45 DEL42 DEL34 DEL27 DEL36 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL37 DEL2 DEL39 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL36 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL36 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL36 DEL27 DEL36 DEL11 DEL7 DEL21 DEL10 DEL49 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL50 DEL8 DEL61 DEL42 DEL43 DEL42 DEL34 DEL42 DEL14 DEL41