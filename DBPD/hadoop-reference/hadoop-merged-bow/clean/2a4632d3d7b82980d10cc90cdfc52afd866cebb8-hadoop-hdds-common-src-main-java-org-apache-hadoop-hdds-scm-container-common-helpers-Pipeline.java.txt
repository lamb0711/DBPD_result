HDDS-141. Remove PipeLine Class from SCM and move the data field in the Pipeline to ContainerInfo. Contributed by Shashikant Banerjee.

-import com.google.common.annotations.VisibleForTesting;
-import java.util.Arrays;
+import java.util.Map;
+import java.util.TreeMap;
-    String[] ignorableFieldNames = {"data"};
+    String[] ignorableFieldNames = {"leaderID", "datanodes"};
-  private PipelineChannel pipelineChannel;
-  /**
-   * Allows you to maintain private data on pipelines. This is not serialized
-   * via protobuf, just allows us to maintain some private data.
-   */
-  private byte[] data;
+  private String leaderID;
+  @JsonIgnore
+  private Map<String, DatanodeDetails> datanodes;
+  private HddsProtos.LifeCycleState lifeCycleState;
+  private HddsProtos.ReplicationType type;
+  private HddsProtos.ReplicationFactor factor;
+  private String name;
+  // TODO: change to long based id
+  //private long id;
+
-   * @param pipelineChannel - transport information for this container
+   * @param leaderID       -  Leader datanode id
+   * @param lifeCycleState  - Pipeline State
+   * @param replicationType - Replication protocol
+   * @param replicationFactor - replication count on datanodes
+   * @param name  - pipelineName
-  public Pipeline(PipelineChannel pipelineChannel) {
-    this.pipelineChannel = pipelineChannel;
-    data = null;
+  public Pipeline(String leaderID, HddsProtos.LifeCycleState lifeCycleState,
+      HddsProtos.ReplicationType replicationType,
+      HddsProtos.ReplicationFactor replicationFactor, String name) {
+    this.leaderID = leaderID;
+    this.lifeCycleState = lifeCycleState;
+    this.type = replicationType;
+    this.factor = replicationFactor;
+    this.name = name;
+    datanodes = new TreeMap<>();
-   * @param pipeline - ProtoBuf definition for the pipeline.
+   * @param pipelineProto - ProtoBuf definition for the pipeline.
-  public static Pipeline getFromProtoBuf(HddsProtos.Pipeline pipeline) {
-    Preconditions.checkNotNull(pipeline);
-    PipelineChannel pipelineChannel =
-        PipelineChannel.getFromProtoBuf(pipeline.getPipelineChannel());
-    return new Pipeline(pipelineChannel);
+  public static Pipeline getFromProtoBuf(
+      HddsProtos.Pipeline pipelineProto) {
+    Preconditions.checkNotNull(pipelineProto);
+    Pipeline pipeline =
+        new Pipeline(pipelineProto.getLeaderID(),
+            pipelineProto.getState(),
+            pipelineProto.getType(),
+            pipelineProto.getFactor(),
+            pipelineProto.getName());
+
+    for (HddsProtos.DatanodeDetailsProto dataID :
+        pipelineProto.getMembersList()) {
+      pipeline.addMember(DatanodeDetails.getFromProtoBuf(dataID));
+    }
+    return pipeline;
+  /**
+   * returns the replication count.
+   * @return Replication Factor
+   */
-    return pipelineChannel.getFactor();
+    return factor;
-    return pipelineChannel.getDatanodes().get(pipelineChannel.getLeaderID());
+    return getDatanodes().get(leaderID);
+  public void addMember(DatanodeDetails datanodeDetails) {
+    datanodes.put(datanodeDetails.getUuid().toString(),
+        datanodeDetails);
+  }
+
+  public Map<String, DatanodeDetails> getDatanodes() {
+    return datanodes;
+  }
-    return pipelineChannel.getDatanodes()
-        .get(pipelineChannel.getLeaderID()).getHostName();
+    return getDatanodes()
+        .get(leaderID).getHostName();
+   *
+   * @return lead
+   */
+  public String getLeaderID() {
+    return leaderID;
+  }
+  /**
-    return new ArrayList<>(pipelineChannel.getDatanodes().values());
+    return new ArrayList<>(getDatanodes().values());
-    for (DatanodeDetails id : pipelineChannel.getDatanodes().values()) {
+    for (DatanodeDetails id :getDatanodes().values()) {
-    builder.setPipelineChannel(this.pipelineChannel.getProtobufMessage());
+    for (DatanodeDetails datanode : datanodes.values()) {
+      builder.addMembers(datanode.getProtoBufMessage());
+    }
+    builder.setLeaderID(leaderID);
+
+    if (this.getLifeCycleState() != null) {
+      builder.setState(this.getLifeCycleState());
+    }
+    if (this.getType() != null) {
+      builder.setType(this.getType());
+    }
+
+    if (this.getFactor() != null) {
+      builder.setFactor(this.getFactor());
+    }
-   * Returns private data that is set on this pipeline.
-   *
-   * @return blob, the user can interpret it any way they like.
-   */
-  public byte[] getData() {
-    if (this.data != null) {
-      return Arrays.copyOf(this.data, this.data.length);
-    } else {
-      return null;
-    }
-  }
-
-  @VisibleForTesting
-  public PipelineChannel getPipelineChannel() {
-    return pipelineChannel;
-  }
-
-  /**
-   * Set private data on pipeline.
-   *
-   * @param data -- private data.
-   */
-  public void setData(byte[] data) {
-    if (data != null) {
-      this.data = Arrays.copyOf(data, data.length);
-    }
-  }
-
-  /**
-    return pipelineChannel.getLifeCycleState();
+    return lifeCycleState;
-    return pipelineChannel.getName();
+    return name;
-    return pipelineChannel.getType();
+    return type;
-    pipelineChannel.getDatanodes().keySet().stream()
+    getDatanodes().keySet().stream()
-            append(id.endsWith(pipelineChannel.getLeaderID()) ? "*" + id : id));
+            append(id.endsWith(getLeaderID()) ? "*" + id : id));

MOV26 UPD40 UPD40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS78 UPD43 INS74 INS83 INS43 INS59 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 INS43 INS59 INS44 INS44 INS44 INS44 INS29 INS43 INS83 INS39 INS42 INS44 INS8 INS83 INS74 INS42 INS8 INS29 MOV83 INS43 INS42 INS8 MOV29 MOV78 INS83 MOV43 MOV42 INS8 INS42 UPD42 UPD42 INS43 INS43 INS43 UPD42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 UPD43 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 UPD42 INS70 INS65 INS65 INS40 INS43 INS42 INS21 INS43 INS43 INS43 INS41 INS65 INS42 INS41 MOV60 INS70 INS21 MOV25 INS25 MOV25 MOV41 INS42 INS42 INS42 INS42 INS66 INS42 INS66 UPD42 UPD66 INS42 INS66 INS42 INS66 UPD42 INS40 INS40 INS40 INS42 INS7 INS7 INS7 INS7 UPD42 MOV43 INS59 INS44 INS32 INS8 INS42 INS66 INS66 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS66 INS42 INS44 INS32 INS8 INS32 INS27 INS8 INS42 INS42 INS42 UPD42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 UPD42 INS14 UPD42 INS42 INS14 INS43 INS42 INS42 INS42 INS21 UPD42 MOV42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 INS32 INS21 INS32 INS33 INS21 INS32 INS45 UPD45 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS74 INS43 INS32 INS32 INS32 INS32 INS32 INS40 INS32 INS32 INS42 UPD42 MOV42 INS42 INS52 INS42 INS32 INS52 INS42 INS32 INS52 INS42 INS32 INS43 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS52 INS42 INS52 INS42 INS52 UPD42 MOV42 DEL66 DEL66 DEL65 DEL29 DEL39 DEL85 DEL5 DEL33 DEL43 DEL42 DEL32 DEL32 DEL59 DEL42 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL32 DEL41 DEL33 DEL41 DEL8 DEL42 DEL52 DEL42 DEL22 DEL40 DEL32 DEL7 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL85 DEL5 DEL42 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42