HDFS-4979. Implement retry cache on Namenode. Contributed by Suresh Srinivas.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507170 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_ENABLE_RETRY_CACHE_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_ENABLE_RETRY_CACHE_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_RETRY_CACHE_EXPIRYTIME_MILLIS_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_RETRY_CACHE_EXPIRYTIME_MILLIS_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_RETRY_CACHE_HEAP_PERCENT_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_RETRY_CACHE_HEAP_PERCENT_KEY;
+import org.apache.hadoop.hdfs.server.protocol.ReceivedDeletedBlockInfo;
+import org.apache.hadoop.ipc.RetryCache;
+import org.apache.hadoop.ipc.RetryCache.CacheEntry;
+import org.apache.hadoop.ipc.RetryCache.CacheEntryWithPayload;
-  private boolean isAuditEnabled() {
+  @VisibleForTesting
+  public boolean isAuditEnabled() {
+  private final RetryCache retryCache;
+  
+      this.retryCache = initRetryCache(conf);
+  
+  @VisibleForTesting
+  static RetryCache initRetryCache(Configuration conf) {
+    boolean enable = conf.getBoolean(DFS_NAMENODE_ENABLE_RETRY_CACHE_KEY,
+        DFS_NAMENODE_ENABLE_RETRY_CACHE_DEFAULT);
+    LOG.info("Retry cache on namenode is " + (enable ? "enabled" : "disabled"));
+    if (enable) {
+      float heapPercent = conf.getFloat(
+          DFS_NAMENODE_RETRY_CACHE_HEAP_PERCENT_KEY,
+          DFS_NAMENODE_RETRY_CACHE_HEAP_PERCENT_DEFAULT);
+      long entryExpiryMillis = conf.getLong(
+          DFS_NAMENODE_RETRY_CACHE_EXPIRYTIME_MILLIS_KEY,
+          DFS_NAMENODE_RETRY_CACHE_EXPIRYTIME_MILLIS_DEFAULT);
+      LOG.info("Retry cache will use " + heapPercent
+          + " of total heap and retry cache entry expiry time is "
+          + entryExpiryMillis + " millis");
+      long entryExpiryNanos = entryExpiryMillis * 1000 * 1000;
+      return new RetryCache("Namenode Retry Cache", heapPercent,
+          entryExpiryNanos);
+    }
+    return null;
+  }
-      
+    RetryCache.clear(retryCache);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    
+    // Either there is no previous request in progres or it has failed
+    
+    boolean success = false;
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
-
+  
-   * For description of parameters and exceptions thrown see 
-   * {@link ClientProtocol#create()}, except it returns valid  file status
-   * upon success
+   * For description of parameters and exceptions thrown see
+   * {@link ClientProtocol#create()}, except it returns valid file status upon
+   * success
+   * 
+   * For retryCache handling details see -
+   * {@link #getFileStatus(boolean, CacheEntryWithPayload)}
+   * 
+    HdfsFileStatus status = null;
+    CacheEntryWithPayload cacheEntry = RetryCache.waitForCompletion(retryCache,
+        null);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return (HdfsFileStatus) cacheEntry.getPayload();
+    }
+    
-      return startFileInt(src, permissions, holder, clientMachine, flag,
+      status = startFileInt(src, permissions, holder, clientMachine, flag,
+    } finally {
+      RetryCache.setState(cacheEntry, status != null, status);
+    return status;
-    final HdfsFileStatus stat;
+    HdfsFileStatus stat = null;
-          delete(src, true); // File exists - delete if overwrite
+          try {
+            deleteInt(src, true); // File exists - delete if overwrite
+          } catch (AccessControlException e) {
+            logAuditEvent(false, "delete", src);
+            throw e;
+          }
+    LocatedBlock lb = null;
+    CacheEntryWithPayload cacheEntry = RetryCache.waitForCompletion(retryCache,
+        null);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return (LocatedBlock) cacheEntry.getPayload();
+    }
+      
+    boolean success = false;
-      return appendFileInt(src, holder, clientMachine);
+      lb = appendFileInt(src, holder, clientMachine);
+      success = true;
+      return lb;
+    } finally {
+      RetryCache.setState(cacheEntry, success, lb);
-  private LocatedBlock appendFileInt(String src, String holder, String clientMachine)
-      throws AccessControlException, SafeModeException,
+  private LocatedBlock appendFileInt(String src, String holder,
+      String clientMachine) throws AccessControlException, SafeModeException,
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return true; // Return previous response
+    }
+    boolean ret = false;
-      return renameToInt(src, dst);
+      ret = renameToInt(src, dst);
+    } finally {
+      RetryCache.setState(cacheEntry, ret);
+    return ret;
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+      success = true;
+      RetryCache.setState(cacheEntry, success);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return true; // Return previous response
+    }
+    boolean ret = false;
-      return deleteInt(src, recursive);
+      ret = deleteInt(src, recursive);
+    } finally {
+      RetryCache.setState(cacheEntry, ret);
+    return ret;
+  
+    boolean ret = false;
+      ret = true;
-    return true;
+    return ret;
+    boolean ret = false;
-      return mkdirsInt(src, permissions, createParent);
+      ret = mkdirsInt(src, permissions, createParent);
+    return ret;
-    // heuristic because the mkdirs() operation migth need to 
+    // heuristic because the mkdirs() operation might need to 
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
-      LOG.info("New namespace image has been created");
+      success = true;
+      RetryCache.setState(cacheEntry, success);
+    LOG.info("New namespace image has been created");
+          // Ignored
-  NamenodeCommand startCheckpoint(
-                                NamenodeRegistration bnReg, // backup node
-                                NamenodeRegistration nnReg) // active name-node
-  throws IOException {
+  NamenodeCommand startCheckpoint(NamenodeRegistration backupNode,
+      NamenodeRegistration activeNamenode) throws IOException {
+    CacheEntryWithPayload cacheEntry = RetryCache.waitForCompletion(retryCache,
+        null);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return (NamenodeCommand) cacheEntry.getPayload();
+    }
+    NamenodeCommand cmd = null;
-      LOG.info("Start checkpoint for " + bnReg.getAddress());
-      NamenodeCommand cmd = getFSImage().startCheckpoint(bnReg, nnReg);
+      LOG.info("Start checkpoint for " + backupNode.getAddress());
+      cmd = getFSImage().startCheckpoint(backupNode, activeNamenode);
+      RetryCache.setState(cacheEntry, cmd != null, cmd);
+  public void processIncrementalBlockReport(final DatanodeID nodeID,
+      final String poolId, final ReceivedDeletedBlockInfo blockInfos[])
+      throws IOException {
+    writeLock();
+    try {
+      blockManager.processIncrementalBlockReport(nodeID, poolId, blockInfos);
+    } finally {
+      writeUnlock();
+    }
+  }
+  
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+      success = true;
+      RetryCache.setState(cacheEntry, success);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
-
+      success = true;
+      RetryCache.setState(cacheEntry, success);
+    CacheEntryWithPayload cacheEntry = RetryCache.waitForCompletion(retryCache,
+        null);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return (String) cacheEntry.getPayload();
+    }
-    final String snapshotPath;
+    String snapshotPath = null;
+      RetryCache.setState(cacheEntry, snapshotPath != null, snapshotPath);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+      success = true;
+      RetryCache.setState(cacheEntry, success);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+      success = true;
+      RetryCache.setState(cacheEntry, success);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 MOV44 INS31 INS78 UPD83 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS44 INS8 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS60 INS21 INS25 INS41 INS21 INS60 INS25 INS60 INS60 INS25 INS60 INS60 INS60 INS25 INS41 INS60 INS60 INS25 INS60 MOV54 INS60 INS25 INS60 INS41 INS60 INS25 INS60 INS60 INS25 INS60 INS41 INS60 INS41 INS60 INS41 INS60 INS25 INS60 MOV21 UPD42 UPD42 INS60 INS25 INS60 INS83 INS43 INS42 INS83 MOV43 INS42 INS83 INS43 INS42 INS85 INS42 INS21 INS54 INS60 INS25 INS60 INS60 INS25 INS60 INS60 INS25 INS60 INS25 INS60 INS60 INS25 INS60 INS42 INS39 INS59 INS32 INS42 INS8 INS33 INS32 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 UPD66 UPD66 UPD66 INS66 INS65 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS42 INS39 INS59 INS42 INS39 INS59 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS42 INS42 INS32 INS8 MOV8 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS27 INS8 INS43 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS27 INS8 INS39 INS59 INS21 INS42 INS32 INS42 INS42 INS27 INS60 INS60 INS21 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS68 INS42 INS42 INS33 INS42 INS42 INS32 INS27 INS32 INS41 INS21 INS21 INS33 INS42 INS42 INS33 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 MOV41 INS42 INS9 INS21 INS21 INS42 INS9 INS21 INS42 INS9 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS42 INS33 INS21 INS21 INS21 INS42 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS33 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS7 INS42 INS42 INS42 INS42 INS45 INS36 INS39 INS59 INS39 INS59 INS32 INS39 INS59 INS14 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS69 INS69 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS7 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS7 INS7 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS9 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS7 INS7 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS7 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS22 INS32 INS16 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS27 INS43 INS45 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS39 INS43 INS43 INS32 INS42 MOV32 INS42 INS42 INS42 INS27 INS42 INS43 INS32 INS42 MOV32 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS9 INS42 MOV32 INS42 INS9 INS42 INS42 INS42 INS42 MOV43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS8 INS42 INS42 INS42 INS42 INS42 MOV32 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS42 INS42 INS42 INS42 INS33 INS54 UPD42 INS8 INS12 MOV21 INS44 INS8 INS43 INS42 INS21 INS53 UPD42 INS42 INS32 INS42 INS42 INS9 INS45 INS42 DEL41 DEL83 DEL8 DEL8 DEL41 DEL41 DEL41 DEL42 DEL32 DEL59 DEL60 DEL83