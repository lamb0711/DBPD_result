Merge r1555021 through r1569889 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1569890 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclStatus;
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public void modifyAclEntries(Path path, final List<AclEntry> aclSpec)
+      throws IOException {
+    Path absF = fixRelativePart(path);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p) throws IOException {
+        dfs.modifyAclEntries(getPathName(p), aclSpec);
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p) throws IOException {
+        fs.modifyAclEntries(p, aclSpec);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public void removeAclEntries(Path path, final List<AclEntry> aclSpec)
+      throws IOException {
+    Path absF = fixRelativePart(path);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p) throws IOException {
+        dfs.removeAclEntries(getPathName(p), aclSpec);
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p) throws IOException {
+        fs.removeAclEntries(p, aclSpec);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public void removeDefaultAcl(Path path) throws IOException {
+    final Path absF = fixRelativePart(path);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p) throws IOException {
+        dfs.removeDefaultAcl(getPathName(p));
+        return null;
+      }
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+        throws IOException, UnresolvedLinkException {
+        fs.removeDefaultAcl(p);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public void removeAcl(Path path) throws IOException {
+    final Path absF = fixRelativePart(path);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p) throws IOException {
+        dfs.removeAcl(getPathName(p));
+        return null;
+      }
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+        throws IOException, UnresolvedLinkException {
+        fs.removeAcl(p);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public void setAcl(Path path, final List<AclEntry> aclSpec) throws IOException {
+    Path absF = fixRelativePart(path);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p) throws IOException {
+        dfs.setAcl(getPathName(p), aclSpec);
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p) throws IOException {
+        fs.setAcl(p, aclSpec);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public AclStatus getAclStatus(Path path) throws IOException {
+    final Path absF = fixRelativePart(path);
+    return new FileSystemLinkResolver<AclStatus>() {
+      @Override
+      public AclStatus doCall(final Path p) throws IOException {
+        return dfs.getAclStatus(getPathName(p));
+      }
+      @Override
+      public AclStatus next(final FileSystem fs, final Path p)
+        throws IOException, UnresolvedLinkException {
+        return fs.getAclStatus(p);
+      }
+    }.resolve(this, absF);
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS43 INS42 INS83 INS74 INS42 INS42 INS60 INS21 INS65 INS42 INS43 INS42 INS83 INS74 INS42 INS42 INS60 INS21 INS65 INS42 INS43 INS42 INS42 INS60 INS21 INS65 INS42 INS43 INS42 INS42 INS60 INS21 INS65 INS42 INS43 INS42 INS83 INS74 INS42 INS42 INS60 INS21 INS65 INS42 INS42 INS43 INS42 INS42 INS60 INS41 INS65 INS42 INS43 INS43 INS43 INS59 INS32 INS65 INS42 INS43 INS43 INS43 INS59 INS32 INS65 INS42 INS83 INS43 INS59 INS32 INS65 INS42 INS83 INS43 INS59 INS32 INS65 INS42 INS43 INS43 INS43 INS59 INS32 INS65 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42