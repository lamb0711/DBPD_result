svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535 back to trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574259 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.BatchedRemoteIterator.BatchedEntries;
-import org.apache.hadoop.fs.BatchedRemoteIterator.BatchedEntries;
-import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants.RollingUpgradeAction;
+import org.apache.hadoop.hdfs.protocol.RollingUpgradeInfo;
+import org.apache.hadoop.hdfs.server.datanode.DataNodeLayoutVersion;
+  public RollingUpgradeInfo rollingUpgrade(RollingUpgradeAction action) throws IOException {
+    LOG.info("rollingUpgrade " + action);
+    switch(action) {
+    case QUERY:
+      return namesystem.queryRollingUpgrade();
+    case PREPARE:
+      return namesystem.startRollingUpgrade();
+    case FINALIZE:
+      return namesystem.finalizeRollingUpgrade();
+    default:
+      throw new UnsupportedActionException(action + " is not yet supported.");
+    }
+  }
+
+  @Override // ClientProtocol
-    verifyLayoutVersion(nodeReg.getVersion());
-  void verifyRequest(NodeRegistration nodeReg) throws IOException {
-    verifyLayoutVersion(nodeReg.getVersion());
-    if (!namesystem.getRegistrationID().equals(nodeReg.getRegistrationID())) {
-      LOG.warn("Invalid registrationID - expected: "
-          + namesystem.getRegistrationID() + " received: "
-          + nodeReg.getRegistrationID());
-      throw new UnregisteredNodeException(nodeReg);
+  private void verifyRequest(NodeRegistration nodeReg) throws IOException {
+    // verify registration ID
+    final String id = nodeReg.getRegistrationID();
+    final String expectedID = namesystem.getRegistrationID();
+    if (!expectedID.equals(id)) {
+      LOG.warn("Registration IDs mismatched: the "
+          + nodeReg.getClass().getSimpleName() + " ID is " + id
+          + " but the expected ID is " + expectedID);
+       throw new UnregisteredNodeException(nodeReg);
+    }
+
+    // verify layout version if there is no rolling upgrade.
+    if (!namesystem.isRollingUpgrade()) {
+      final int lv = nodeReg.getVersion();
+      final int expectedLV = nodeReg instanceof NamenodeRegistration?
+          NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION
+          : DataNodeLayoutVersion.CURRENT_LAYOUT_VERSION;
+      if (expectedLV != nodeReg.getVersion()) {
+        LOG.warn("Layout versions mismatched: the "
+            + nodeReg.getClass().getSimpleName() + " LV is " + lv
+            + " but the expected LV is " + expectedLV);
+         throw new UnregisteredNodeException(nodeReg);
+      }
-    if (version != HdfsConstants.LAYOUT_VERSION)
-      throw new IncorrectVersionException(version, "data node");
+    if (version != HdfsConstants.NAMENODE_LAYOUT_VERSION)
+      throw new IncorrectVersionException(
+          HdfsConstants.NAMENODE_LAYOUT_VERSION, version, "data node");

MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS42 INS42 INS43 INS42 INS42 INS21 INS50 INS60 INS60 INS25 INS42 INS32 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS53 INS83 INS43 INS59 INS83 INS43 INS59 INS38 INS8 INS8 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS32 INS14 INS42 INS42 MOV32 INS42 INS42 MOV32 INS32 MOV21 MOV53 INS32 INS60 INS60 INS25 UPD40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS83 INS39 INS59 INS83 INS39 INS59 INS27 MOV8 INS40 INS42 INS42 INS45 INS42 UPD42 INS27 INS42 MOV32 INS42 INS16 INS42 MOV32 INS53 INS45 INS32 INS45 INS42 INS45 INS42 INS62 INS40 INS40 INS14 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 UPD45 INS32 INS45 INS42 INS45 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 DEL42 DEL32 DEL21 DEL32 DEL42 DEL32 DEL45 DEL32