HDFS-14333. Datanode fails to start if any disk has errors during Namenode registration. Contributed by Stephen O'Donnell.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

+import org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.AddBlockPoolException;
-
-    data.addBlockPool(nsInfo.getBlockPoolID(), getConf());
+    try {
+      data.addBlockPool(nsInfo.getBlockPoolID(), getConf());
+    } catch (AddBlockPoolException e) {
+      handleAddBlockPoolError(e);
+    }
+  /**
+   * Handles an AddBlockPoolException object thrown from
+   * {@link org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.FsVolumeList#
+   * addBlockPool}. Will ensure that all volumes that encounted a
+   * AddBlockPoolException are removed from the DataNode and marked as failed
+   * volumes in the same way as a runtime volume failure.
+   *
+   * @param e this exception is a container for all IOException objects caught
+   *          in FsVolumeList#addBlockPool.
+   */
+  private void handleAddBlockPoolError(AddBlockPoolException e)
+      throws IOException {
+    Map<FsVolumeSpi, IOException> unhealthyDataDirs =
+        e.getFailingVolumes();
+    if (unhealthyDataDirs != null && !unhealthyDataDirs.isEmpty()) {
+      handleVolumeFailures(unhealthyDataDirs.keySet());
+    } else {
+      LOG.debug("HandleAddBlockPoolError called with empty exception list");
+    }
+  }
+

INS26 INS40 INS31 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS54 INS65 INS65 INS43 INS42 INS42 INS60 INS25 INS8 INS12 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS74 INS59 INS27 INS8 INS8 MOV21 INS44 INS8 INS67 INS43 INS43 INS43 INS42 INS32 INS27 INS38 INS21 INS21 INS43 INS42 INS21 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42