HDFS-9589. Block files which have been hardlinked should be duplicated before the DataNode appends to the them (cmccabe)

+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import org.apache.hadoop.fs.FileUtil;
+import org.apache.hadoop.fs.HardLink;
+import org.apache.hadoop.io.IOUtils;
+  /**
+   * Copy specified file into a temporary file. Then rename the
+   * temporary file to the original name. This will cause any
+   * hardlinks to the original file to be removed. The temporary
+   * files are created in the same directory. The temporary files will
+   * be recovered (especially on Windows) on datanode restart.
+   */
+  private void breakHardlinks(File file, Block b) throws IOException {
+    File tmpFile = DatanodeUtil.createTmpFile(b, DatanodeUtil.getUnlinkTmpFile(file));
+    try {
+      FileInputStream in = new FileInputStream(file);
+      try {
+        FileOutputStream out = new FileOutputStream(tmpFile);
+        try {
+          IOUtils.copyBytes(in, out, 16 * 1024);
+        } finally {
+          out.close();
+        }
+      } finally {
+        in.close();
+      }
+      if (file.length() != tmpFile.length()) {
+        throw new IOException("Copy of file " + file + " size " + file.length()+
+                              " into file " + tmpFile +
+                              " resulted in a size of " + tmpFile.length());
+      }
+      FileUtil.replaceFile(tmpFile, file);
+    } catch (IOException e) {
+      boolean done = tmpFile.delete();
+      if (!done) {
+        DataNode.LOG.info("detachFile failed to delete temporary file " +
+                          tmpFile);
+      }
+      throw e;
+    }
+  }
+
+  /**
+   * This function "breaks hardlinks" to the current replica file.
+   *
+   * When doing a DataNode upgrade, we create a bunch of hardlinks to each block
+   * file.  This cleverly ensures that both the old and the new storage
+   * directories can contain the same block file, without using additional space
+   * for the data.
+   *
+   * However, when we want to append to the replica file, we need to "break" the
+   * hardlink to ensure that the old snapshot continues to contain the old data
+   * length.  If we failed to do that, we could roll back to the previous/
+   * directory during a downgrade, and find that the block contents were longer
+   * than they were at the time of upgrade.
+   *
+   * @return true only if data was copied.
+   * @throws IOException
+   */
+  public boolean breakHardLinksIfNeeded() throws IOException {
+    File file = getBlockFile();
+    if (file == null || getVolume() == null) {
+      throw new IOException("detachBlock:Block not found. " + this);
+    }
+    File meta = getMetaFile();
+
+    int linkCount = HardLink.getLinkCount(file);
+    if (linkCount > 1) {
+      DataNode.LOG.info("Breaking hardlink for " + linkCount + "x-linked " +
+          "block " + this);
+      breakHardlinks(file, this);
+    }
+    if (HardLink.getLinkCount(meta) > 1) {
+      breakHardlinks(meta, this);
+    }
+    return true;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS65 INS65 INS65 INS42 INS60 INS25 INS60 INS60 INS25 INS25 INS41 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS8 INS12 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS9 INS42 INS42 INS32 INS60 INS54 INS25 INS21 INS44 INS8 INS42 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS21 INS21 INS32 INS34 INS21 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS8 INS27 INS8 INS32 INS43 INS42 INS60 INS25 INS53 INS42 INS42 INS33 INS32 INS33 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS60 INS54 INS21 INS32 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS38 INS8 INS42 INS42 INS43 INS27 INS40 INS42 INS27 INS42 INS42 INS52 INS42 INS42 INS52 INS43 INS42 INS43 INS59 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS21 INS42 INS45 INS52 INS45 INS42 INS45 INS45 INS52 INS42 INS42 INS42 INS14 INS21 INS21 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS43 INS42 INS32 INS32 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS34 INS34