YARN-6353. Clean up OrderingPolicy javadoc (Daniel Templeton via Varun Saxena)

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.*;
- * container assignment and preemption
+ * container assignment and preemption.
+ * @param <S> the type of {@link SchedulableEntity} that will be compared
-  
+
-   * Get the collection of SchedulableEntities which are managed by this
-   * OrderingPolicy - should include processes returned by the Assignment and
-   * Preemption iterator with no guarantees regarding order
+   * Get the collection of {@link SchedulableEntity} Objects which are managed
+   * by this OrderingPolicy - should include processes returned by the
+   * Assignment and Preemption iterator with no guarantees regarding order.
+   * @return a collection of {@link SchedulableEntity} objects
-  
+
-   * Return an iterator over the collection of SchedulableEntities which orders
-   * them for container assignment
+   * Return an iterator over the collection of {@link SchedulableEntity}
+   * objects which orders them for container assignment.
+   * @return an iterator over the collection of {@link SchedulableEntity}
+   * objects
-  
+
-   * Return an iterator over the collection of SchedulableEntities which orders
-   * them for preemption
+   * Return an iterator over the collection of {@link SchedulableEntity}
+   * objects which orders them for preemption.
+   * @return an iterator over the collection of {@link SchedulableEntity}
-  
+
-   * Add a SchedulableEntity to be managed for allocation and preemption 
-   * ordering
+   * Add a {@link SchedulableEntity} to be managed for allocation and preemption
+   * ordering.
+   * @param s the {@link SchedulableEntity} to add
-  
+
-   * Remove a SchedulableEntity from management for allocation and preemption 
-   * ordering
+   * Remove a {@link SchedulableEntity} from management for allocation and
+   * preemption ordering.
+   * @param s the {@link SchedulableEntity} to remove
+   * @return whether the {@link SchedulableEntity} was present before this
+   * operation
-  
+
-   * Add a collection of SchedulableEntities to be managed for allocation 
-   * and preemption ordering
+   * Add a collection of {@link SchedulableEntity} objects to be managed for
+   * allocation and preemption ordering.
+   * @param sc the collection of {@link SchedulableEntity} objects to add
-  
+
-   * Get the number of SchedulableEntities managed for allocation and
-   * preemption ordering
+   * Get the number of {@link SchedulableEntity} objects managed for allocation
+   * and preemption ordering.
+   * @return the number of {@link SchedulableEntity} objects
-  
+
-   * configuration
+   * configuration.
+   * @param conf a map of scheduler configuration properties and values
-  
+
-   * The passed SchedulableEntity has been allocated the passed Container,
-   * take appropriate action (depending on comparator, a reordering of the
-   * SchedulableEntity may be required)
+   * Notify the {@code OrderingPolicy} that the {@link SchedulableEntity}
+   * has been allocated the given {@link RMContainer}, enabling the
+   * {@code OrderingPolicy} to take appropriate action. Depending on the
+   * comparator, a reordering of the {@link SchedulableEntity} may be required.
+   * @param schedulableEntity the {@link SchedulableEntity}
+   * @param r the allocated {@link RMContainer}
-  public void containerAllocated(S schedulableEntity, 
-    RMContainer r);
-  
+  public void containerAllocated(S schedulableEntity, RMContainer r);
+
-   * The passed SchedulableEntity has released the passed Container,
-   * take appropriate action (depending on comparator, a reordering of the
-   * SchedulableEntity may be required)
+   * Notify the {@code OrderingPolicy} that the {@link SchedulableEntity}
+   * has released the given {@link RMContainer}, enabling the
+   * {@code OrderingPolicy} to take appropriate action. Depending on the
+   * comparator, a reordering of the {@link SchedulableEntity} may be required.
+   * @param schedulableEntity the {@link SchedulableEntity}
+   * @param r the released {@link RMContainer}
-  public void containerReleased(S schedulableEntity, 
-    RMContainer r);
-  
+  public void containerReleased(S schedulableEntity, RMContainer r);
+
-   * Demand Updated for the passed schedulableEntity, reorder if needed.
+   * Notify the {@code OrderingPolicy} that the demand for the
+   * {@link SchedulableEntity} has been updated, enabling the
+   * {@code OrderingPolicy} to reorder the {@link SchedulableEntity} if needed.
+   * @param schedulableEntity the updated {@link SchedulableEntity}
-   * Display information regarding configuration and status
+   * Return information regarding configuration and status.
+   * @return configuration and status information
-  
+

INS65 MOV74 MOV74 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 UPD66 INS66 INS42 INS66 INS66 INS65 INS66 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 UPD66 INS65 INS66 UPD66 UPD66 INS66 INS65 INS66 UPD66 INS65 UPD66 INS66 INS65 INS66 UPD66 INS65 UPD66 INS66 INS65 INS66 INS65 UPD66 UPD66 INS42 INS66 INS65 INS66 INS66 INS65 UPD66 UPD66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS66 UPD66 INS65 INS66 UPD66 INS42 INS66 INS65 INS66 INS66 INS65 UPD66 UPD66 INS66 INS65 INS66 UPD66 INS42 INS66 INS66 INS65 INS66 INS65 UPD66 INS65 INS66 INS65 UPD66 INS66 INS65 UPD66 INS42 INS66 INS65 INS42 INS66 INS65 INS66 INS65 INS66 INS65 UPD66 INS65 INS66 INS65 UPD66 INS66 INS65 UPD66 INS42 INS66 INS65 INS42 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 UPD66 INS42 INS66 INS65 UPD66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS66 INS42 INS42 INS66 INS42 INS42 INS42 INS66 INS42 INS42 INS66 INS42 INS42 INS42 INS66 INS42 INS66 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26