YARN-8881. [YARN-8851] Add basic pluggable device plugin framework. (Zhankun Tang via wangda)

Change-Id: If9a2f68cd4713b4ec932cdeda68106f17437c3d3

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.util.ReflectionUtils;
+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.server.nodemanager.api.deviceplugin.DevicePlugin;
+import org.apache.hadoop.yarn.server.nodemanager.api.deviceplugin.DeviceRegisterRequest;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.deviceframework.DevicePluginAdapter;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
+import java.lang.reflect.Method;
+
-      throws YarnException {
+      throws YarnException, ClassNotFoundException {
-      throws YarnRuntimeException {
+      throws YarnRuntimeException, ClassNotFoundException {
+
+    for (String pluginClassName : pluginClassNames) {
+      Class<?> pluginClazz = Class.forName(pluginClassName);
+      if (!DevicePlugin.class.isAssignableFrom(pluginClazz)) {
+        throw new YarnRuntimeException("Class: " + pluginClassName
+            + " not instance of " + DevicePlugin.class.getCanonicalName());
+      }
+      // sanity-check before initialization
+      checkInterfaceCompatibility(DevicePlugin.class, pluginClazz);
+
+      DevicePlugin dpInstance =
+          (DevicePlugin) ReflectionUtils.newInstance(
+              pluginClazz, configuration);
+
+      // Try to register plugin
+      // TODO: handle the plugin method timeout issue
+      DeviceRegisterRequest request = null;
+      try {
+        request = dpInstance.getRegisterRequestInfo();
+      } catch (Exception e) {
+        throw new YarnRuntimeException("Exception thrown from plugin's"
+            + " getRegisterRequestInfo:"
+            + e.getMessage());
+      }
+      String resourceName = request.getResourceName();
+      // check if someone has already registered this resource type name
+      if (pluginMap.containsKey(resourceName)) {
+        throw new YarnRuntimeException(resourceName
+            + " already registered! Please change resource type name"
+            + " or configure correct resource type name"
+            + " in resource-types.xml for "
+            + pluginClassName);
+      }
+      // check resource name is valid and configured in resource-types.xml
+      if (!isConfiguredResourceName(resourceName)) {
+        throw new YarnRuntimeException(resourceName
+            + " is not configured inside "
+            + YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE
+            + " , please configure it first");
+      }
+      LOG.info("New resource type: {} registered successfully by {}",
+          resourceName,
+          pluginClassName);
+      DevicePluginAdapter pluginAdapter = new DevicePluginAdapter(
+          resourceName, dpInstance);
+      LOG.info("Adapter of {} created. Initializing..", pluginClassName);
+      try {
+        pluginAdapter.initialize(context);
+      } catch (YarnException e) {
+        throw new YarnRuntimeException("Adapter of "
+            + pluginClassName + " init failed!");
+      }
+      LOG.info("Adapter of {} init success!", pluginClassName);
+      // Store plugin as adapter instance
+      pluginMap.put(request.getResourceName(), pluginAdapter);
+    } // end for
+  }
+
+  @VisibleForTesting
+  // Check if the implemented interfaces' signature is compatible
+  public void checkInterfaceCompatibility(Class<?> expectedClass,
+      Class<?> actualClass) throws YarnRuntimeException{
+    LOG.debug("Checking implemented interface's compatibility: {}",
+        expectedClass.getSimpleName());
+    Method[] expectedDevicePluginMethods = expectedClass.getMethods();
+
+    // Check method compatibility
+    boolean found;
+    for (Method method: expectedDevicePluginMethods) {
+      found = false;
+      LOG.debug("Try to find method: {}",
+          method.getName());
+      for (Method m : actualClass.getDeclaredMethods()) {
+        if (m.getName().equals(method.getName())) {
+          LOG.debug("Method {} found in class {}",
+              actualClass.getSimpleName(),
+              m.getName());
+          found = true;
+          break;
+        }
+      }
+      if (!found) {
+        LOG.error("Method {} is not found in plugin",
+            method.getName());
+        throw new YarnRuntimeException(
+            "Method " + method.getName()
+                + " is expected but not implemented in "
+                + actualClass.getCanonicalName());
+      }
+    }// end for
+    LOG.info("{} compatibility is ok.",
+        expectedClass.getSimpleName());
+  }
+
+  @VisibleForTesting
+  public boolean isConfiguredResourceName(String resourceName) {
+    // check configured
+    Map<String, ResourceInformation> configuredResourceTypes =
+        ResourceUtils.getResourceTypes();
+    if (!configuredResourceTypes.containsKey(resourceName)) {
+      return false;
+    }
+    return true;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 MOV21 MOV60 MOV25 INS70 INS42 INS74 INS42 INS74 INS42 INS42 INS21 INS60 INS60 INS70 INS21 INS42 INS43 INS42 INS60 INS25 INS41 INS44 INS42 INS8 INS43 INS76 INS43 INS76 INS32 INS5 INS59 INS39 INS59 INS44 INS42 INS8 INS32 INS42 INS74 INS59 INS38 INS8 INS9 INS43 INS42 INS60 INS25 INS21 INS60 INS60 INS54 INS60 INS25 INS25 INS21 INS60 INS21 INS54 INS21 INS21 INS42 INS42 INS42 INS42 INS45 INS32 INS43 INS85 INS42 INS32 INS42 INS43 INS42 INS21 INS21 INS70 INS25 INS42 INS42 INS45 INS32 INS43 INS43 INS43 INS42 INS32 INS32 INS41 INS42 INS74 INS59 INS38 INS8 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS8 INS38 INS8 INS32 INS43 INS59 INS32 INS8 INS12 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS44 INS32 INS8 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS76 INS42 INS32 INS32 INS53 INS42 INS57 INS42 INS42 INS42 INS11 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS53 INS32 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS21 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS45 INS32 INS43 INS42 INS42 INS42 INS25 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS14 INS43 INS43 INS32 INS7 INS43 INS42 INS53 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS14 INS43 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS32 INS21 INS21 INS10 INS42 INS42 INS45 INS32 INS43 INS27 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS42 INS45 INS40 INS45 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS57 INS42 INS42 INS45 INS45 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS32 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL8