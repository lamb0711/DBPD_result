MAPREDUCE-2702. Added a new API in OutputCommitter for recovering the outputs of tasks from a crashed job so as to support MR Application Master recovery. Contributed by Sharad Agarwal and Arun C Murthy.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179188 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.util.StringUtils;
-                          (FileOutputCommitter.TEMP_DIR_NAME + Path.SEPARATOR +
-                           "_" + context.getTaskAttemptID().toString()
-                           )).makeQualified(outputFileSystem);
+                          getTaskAttemptBaseDirName(context))
+                          .makeQualified(outputFileSystem);
-      Path tmpDir = new Path(outputPath, FileOutputCommitter.TEMP_DIR_NAME);
+      Path tmpDir = new Path(outputPath, getJobAttemptBaseDirName(context) + 
+    		  Path.SEPARATOR + FileOutputCommitter.TEMP_DIR_NAME);
+   * Move all job output to the final place.
+    //delete the task temp directory from the current jobtempdir
+    Path tmpDir = new Path(outputPath, getJobAttemptBaseDirName(context) +
+        Path.SEPARATOR + FileOutputCommitter.TEMP_DIR_NAME);
+    FileSystem fileSys = tmpDir.getFileSystem(context.getConfiguration());
+    if (fileSys.exists(tmpDir)) {
+      fileSys.delete(tmpDir, true);
+    } else {
+      LOG.warn("Task temp dir could not be deleted " + tmpDir);
+    }
+    
+	  //move the job output to final place
+    Path jobOutputPath = 
+        new Path(outputPath, getJobAttemptBaseDirName(context));
+	  moveJobOutputs(outputFileSystem, outputPath, jobOutputPath);
+	  
+  private void moveJobOutputs(FileSystem fs,
+      Path finalOutputDir, Path jobOutput) throws IOException {
+    if (fs.isFile(jobOutput)) {
+      Path finalOutputPath = getFinalPath(finalOutputDir, jobOutput, jobOutput);
+      if (!fs.rename(jobOutput, finalOutputPath)) {
+        if (!fs.delete(finalOutputPath, true)) {
+          throw new IOException("Failed to delete earlier output of job");
+        }
+        if (!fs.rename(jobOutput, finalOutputPath)) {
+          throw new IOException("Failed to save output of job");
+        }
+      }
+      LOG.debug("Moved " + jobOutput + " to " + finalOutputPath);
+    } else if (fs.getFileStatus(jobOutput).isDirectory()) {
+      FileStatus[] paths = fs.listStatus(jobOutput);
+      Path finalOutputPath = getFinalPath(finalOutputDir, jobOutput, jobOutput);
+      fs.mkdirs(finalOutputPath);
+      if (paths != null) {
+        for (FileStatus path : paths) {
+          moveJobOutputs(fs, finalOutputDir, path.getPath());
+        }
+      }
+    }
+  }
+
-        // Move the task outputs to their final place
-        moveTaskOutputs(context, outputFileSystem, outputPath, workPath);
+        // Move the task outputs to the current job attempt output dir
+    	  Path jobOutputPath = 
+    	      new Path(outputPath, getJobAttemptBaseDirName(context));
+        moveTaskOutputs(context, outputFileSystem, jobOutputPath, workPath);
+
+  @Override
+  public boolean isRecoverySupported() {
+    return true;
+  }
+  
+  @Override
+  public void recoverTask(TaskAttemptContext context)
+      throws IOException {
+    context.progress();
+    Path jobOutputPath = 
+        new Path(outputPath, getJobAttemptBaseDirName(context));
+    int previousAttempt =         
+        context.getConfiguration().getInt(
+            MRJobConfig.APPLICATION_ATTEMPT_ID, 0) - 1;
+    if (previousAttempt < 0) {
+      throw new IOException ("Cannot recover task output for first attempt...");
+    }
+
+    Path pathToRecover = 
+        new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));
+    if (outputFileSystem.exists(pathToRecover)) {
+      // Move the task outputs to their final place
+      moveJobOutputs(outputFileSystem, jobOutputPath, pathToRecover);
+      LOG.info("Saved output of job to " + jobOutputPath);
+    }
+  }
+
+  protected static String getJobAttemptBaseDirName(JobContext context) {
+    int appAttemptId = 
+        context.getConfiguration().getInt(
+            MRJobConfig.APPLICATION_ATTEMPT_ID, 0);
+    return getJobAttemptBaseDirName(appAttemptId);
+  }
+
+  protected static String getJobAttemptBaseDirName(int appAttemptId) {
+    return FileOutputCommitter.TEMP_DIR_NAME + Path.SEPARATOR + 
+      + appAttemptId;
+  }
+
+  protected static String getTaskAttemptBaseDirName(
+      TaskAttemptContext context) {
+	  return getJobAttemptBaseDirName(context) + Path.SEPARATOR + 
+	  FileOutputCommitter.TEMP_DIR_NAME + Path.SEPARATOR +
+      "_" + context.getTaskAttemptID().toString();
+  }

INS31 INS31 INS31 INS31 INS31 INS31 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS60 INS60 INS25 INS60 INS21 MOV21 MOV25 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS42 INS41 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS25 INS60 INS25 INS42 INS43 INS42 INS60 INS41 INS42 INS39 INS42 INS41 INS42 INS43 INS42 INS41 INS66 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS8 INS25 INS9 INS42 INS32 INS43 INS59 INS39 INS59 INS27 INS8 INS43 INS59 INS32 INS8 INS42 INS39 INS59 INS32 INS27 INS42 MOV27 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS21 INS32 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS27 INS42 INS34 INS53 INS42 INS42 INS14 INS42 INS42 INS42 INS21 INS21 INS42 INS32 INS42 INS42 INS40 INS40 INS38 INS32 INS40 MOV43 INS43 INS42 INS27 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS32 INS43 INS59 INS38 INS8 INS32 INS32 INS42 INS60 INS60 INS21 INS25 INS43 INS42 INS32 INS32 INS34 INS14 INS43 INS42 INS32 INS32 INS32 INS32 INS42 INS40 INS34 INS42 INS42 INS42 INS42 INS32 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS25 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS5 INS59 INS43 INS59 INS32 INS27 INS8 INS60 INS42 INS42 INS42 INS32 INS42 INS40 INS34 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 MOV43 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS38 INS8 INS45 INS42 INS45 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS70 INS43 INS59 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS40 INS40 INS32 INS53 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS14 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS14 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS21 INS43 INS42 INS32 INS43 INS45 INS43 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL36 DEL40 DEL8