HDDS-1. Remove SCM Block DB. Contributed by Xiaoyu Yao.

-  public Pipeline createContainer(String containerId, String owner)
+  public ContainerInfo createContainer(String owner)
-      Pipeline pipeline =
+      ContainerInfo container =
-              xceiverClientManager.getFactor(), containerId, owner);
-      client = xceiverClientManager.acquireClient(pipeline);
+              xceiverClientManager.getFactor(), owner);
+      Pipeline pipeline = container.getPipeline();
+      client = xceiverClientManager.acquireClient(pipeline, container.getContainerID());
-      // TODO : Container Client State needs to be updated.
-      // TODO : Return ContainerInfo instead of Pipeline
-      createContainer(containerId, client, pipeline);
-      return pipeline;
+      createContainer(client, container.getContainerID());
+      return container;
-   * @param containerId - Container ID
-   * @param client - Client to communicate with Datanodes
-   * @param pipeline - A pipeline that is already created.
+   * @param client - Client to communicate with Datanodes.
+   * @param containerId - Container ID.
-  public void createContainer(String containerId, XceiverClientSpi client,
-      Pipeline pipeline) throws IOException {
+  public void createContainer(XceiverClientSpi client,
+      long containerId) throws IOException {
-    ContainerProtocolCalls.createContainer(client, traceID);
+    ContainerProtocolCalls.createContainer(client, containerId, traceID);
-          + " leader:" + pipeline.getLeader()
-          + " machines:" + pipeline.getMachines());
+          + " leader:" + client.getPipeline().getLeader()
+          + " machines:" + client.getPipeline().getMachines());
-    storageContainerLocationClient.notifyObjectStageChange(
-        ObjectStageChangeRequestProto.Type.pipeline,
-        pipeline.getPipelineName(),
-        ObjectStageChangeRequestProto.Op.create,
-        ObjectStageChangeRequestProto.Stage.begin);
+
+    // TODO: this has not been fully implemented on server side
+    // SCMClientProtocolServer#notifyObjectStageChange
+    // TODO: when implement the pipeline state machine, change
+    // the pipeline name (string) to pipeline id (long)
+    //storageContainerLocationClient.notifyObjectStageChange(
+    //    ObjectStageChangeRequestProto.Type.pipeline,
+    //    pipeline.getPipelineName(),
+    //    ObjectStageChangeRequestProto.Op.create,
+    //    ObjectStageChangeRequestProto.Stage.begin);
-    storageContainerLocationClient.notifyObjectStageChange(
-        ObjectStageChangeRequestProto.Type.pipeline,
-        pipeline.getPipelineName(),
-        ObjectStageChangeRequestProto.Op.create,
-        ObjectStageChangeRequestProto.Stage.complete);
+    //storageContainerLocationClient.notifyObjectStageChange(
+    //    ObjectStageChangeRequestProto.Type.pipeline,
+    //    pipeline.getPipelineName(),
+    //    ObjectStageChangeRequestProto.Op.create,
+    //    ObjectStageChangeRequestProto.Stage.complete);
-  public Pipeline createContainer(HddsProtos.ReplicationType type,
-      HddsProtos.ReplicationFactor factor,
-      String containerId, String owner) throws IOException {
+  public ContainerInfo createContainer(HddsProtos.ReplicationType type,
+      HddsProtos.ReplicationFactor factor, String owner) throws IOException {
-      Pipeline pipeline =
+      ContainerInfo container =
-              containerId, owner);
-      client = xceiverClientManager.acquireClient(pipeline);
+              owner);
+      Pipeline pipeline = container.getPipeline();
+      client = xceiverClientManager.acquireClient(pipeline,
+          container.getContainerID());
-
-      // TODO : Return ContainerInfo instead of Pipeline
-      client = xceiverClientManager.acquireClient(pipeline);
-      createContainer(containerId, client, pipeline);
-      return pipeline;
+      client = xceiverClientManager.acquireClient(pipeline,
+          container.getContainerID());
+      createContainer(client, container.getContainerID());
+      return container;
-  public void deleteContainer(Pipeline pipeline, boolean force)
+  public void deleteContainer(long containerID, Pipeline pipeline, boolean force)
-      client = xceiverClientManager.acquireClient(pipeline);
+      client = xceiverClientManager.acquireClient(pipeline, containerID);
-      ContainerProtocolCalls.deleteContainer(client, force, traceID);
+      ContainerProtocolCalls.deleteContainer(client, containerID, force, traceID);
-          .deleteContainer(pipeline.getContainerName());
+          .deleteContainer(containerID);
-            pipeline.getContainerName(),
+            containerID,
-  public List<ContainerInfo> listContainer(String startName,
-      String prefixName, int count)
-      throws IOException {
+  public List<ContainerInfo> listContainer(long startContainerID,
+      int count) throws IOException {
-        startName, prefixName, count);
+        startContainerID, count);
-  public ContainerData readContainer(Pipeline pipeline) throws IOException {
+  public ContainerData readContainer(long containerID,
+      Pipeline pipeline) throws IOException {
-      client = xceiverClientManager.acquireClient(pipeline);
+      client = xceiverClientManager.acquireClient(pipeline, containerID);
-          ContainerProtocolCalls.readContainer(client,
-              pipeline.getContainerName(), traceID);
+          ContainerProtocolCalls.readContainer(client, containerID, traceID);
-            pipeline.getContainerName(),
+            containerID,
-  public Pipeline getContainer(String containerId) throws
+  public ContainerInfo getContainer(long containerId) throws
-  public void closeContainer(Pipeline pipeline) throws IOException {
+  public void closeContainer(long containerId, Pipeline pipeline)
+      throws IOException {
-      client = xceiverClientManager.acquireClient(pipeline);
+      client = xceiverClientManager.acquireClient(pipeline, containerId);
-      String containerId = pipeline.getContainerName();
-
-      ContainerProtocolCalls.closeContainer(client, traceID);
+      ContainerProtocolCalls.closeContainer(client, containerId, traceID);
-   * @param pipeline - Pipeline
+   * @param containerID - ID of the container.
-  public long getContainerSize(Pipeline pipeline) throws IOException {
-    // TODO : Pipeline can be null, handle it correctly.
+  public long getContainerSize(long containerID) throws IOException {
+    // TODO : Fix this, it currently returns the capacity but not the current usage.

MOV44 UPD43 UPD43 INS44 INS44 UPD43 INS44 UPD42 INS39 UPD42 INS39 INS42 INS39 UPD42 INS39 INS42 UPD42 INS39 INS39 INS42 INS39 INS42 UPD66 UPD42 UPD66 UPD42 UPD66 INS60 INS42 INS60 UPD42 INS43 MOV43 INS59 UPD42 INS43 MOV43 INS59 UPD42 INS42 UPD42 INS42 INS32 UPD42 INS32 INS42 UPD42 INS42 INS32 UPD42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL40 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL40 DEL40 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42