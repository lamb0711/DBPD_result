HADOOP-14154 Persist isAuthoritative bit in DynamoDBMetaStore (Contributed by Gabor Bota)

+import java.util.HashSet;
+import java.util.Objects;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.stream.Collectors;
-          PathMetadata.tombstone(path));
+          new DDBPathMetadata(PathMetadata.tombstone(path)));
-  public PathMetadata get(Path path) throws IOException {
+  public DDBPathMetadata get(Path path) throws IOException {
-  public PathMetadata get(Path path, boolean wantEmptyDirectoryFlag)
+  public DDBPathMetadata get(Path path, boolean wantEmptyDirectoryFlag)
-  private PathMetadata innerGet(Path path, boolean wantEmptyDirectoryFlag)
+  private DDBPathMetadata innerGet(Path path, boolean wantEmptyDirectoryFlag)
-    final PathMetadata meta;
+    final DDBPathMetadata meta;
-      meta = new PathMetadata(makeDirStatus(username, path));
+      meta =
+          new DDBPathMetadata(makeDirStatus(username, path));
-            PathMetadata meta = itemToPathMetadata(item, username);
+            DDBPathMetadata meta = itemToPathMetadata(item, username);
+
+          DDBPathMetadata dirPathMeta = get(path);
+          boolean isAuthoritative = false;
+          if(dirPathMeta != null) {
+            isAuthoritative = dirPathMeta.isAuthoritativeDir();
+          }
+
-          return (metas.isEmpty() && get(path) == null)
+          return (metas.isEmpty() && dirPathMeta == null)
-              : new DirListingMetadata(path, metas, false);
+              : new DirListingMetadata(path, metas, isAuthoritative);
-  Collection<PathMetadata> completeAncestry(
-      Collection<PathMetadata> pathsToCreate) {
+  Collection<DDBPathMetadata> completeAncestry(
+      Collection<DDBPathMetadata> pathsToCreate) {
-    Map<Path, PathMetadata> ancestry = new HashMap<>();
+    Map<Path, DDBPathMetadata> ancestry = new HashMap<>();
-    for (PathMetadata meta : pathsToCreate) {
+    for (DDBPathMetadata meta : pathsToCreate) {
-      ancestry.put(path, meta);
+      ancestry.put(path, new DDBPathMetadata(meta));
-        ancestry.put(parent, new PathMetadata(status, Tristate.FALSE, false));
+        ancestry.put(parent, new DDBPathMetadata(status, Tristate.FALSE,
+            false));
-    Collection<PathMetadata> newItems = new ArrayList<>();
+    Collection<DDBPathMetadata> newItems = new ArrayList<>();
-      newItems.addAll(completeAncestry(pathsToCreate));
+      newItems.addAll(completeAncestry(pathMetaToDDBPathMeta(pathsToCreate)));
-        newItems.add(PathMetadata.tombstone(meta));
+        newItems.add(new DDBPathMetadata(PathMetadata.tombstone(meta)));
+    innerPut(pathMetaToDDBPathMeta(metas));
+  }
+  @Retries.OnceRaw
+  private void innerPut(Collection<DDBPathMetadata> metas) throws IOException {
-  private Collection<PathMetadata> fullPathsToPut(PathMetadata meta)
+  private Collection<DDBPathMetadata> fullPathsToPut(DDBPathMetadata meta)
-    final Collection<PathMetadata> metasToPut = new ArrayList<>();
+    final Collection<DDBPathMetadata> metasToPut = new ArrayList<>();
-        metasToPut.add(new PathMetadata(status, Tristate.FALSE, false));
+        metasToPut.add(new DDBPathMetadata(status, Tristate.FALSE, false,
+            meta.isAuthoritativeDir()));
-    PathMetadata p = new PathMetadata(makeDirStatus(path, username),
-        meta.isEmpty(), false);
+    DDBPathMetadata ddbPathMeta =
+        new DDBPathMetadata(makeDirStatus(path, username), meta.isEmpty(),
+            false, meta.isAuthoritative());
-    final Collection<PathMetadata> metasToPut = invoker.retry(
+    final Collection<DDBPathMetadata> metasToPut = invoker.retry(
-        () -> fullPathsToPut(p));
+        () -> fullPathsToPut(ddbPathMeta));
-    metasToPut.addAll(meta.getListing());
+    metasToPut.addAll(pathMetaToDDBPathMeta(meta.getListing()));
+      Set<Path> parentPathSet =  new HashSet<>();
-        PathMetadata md = PathMetadataDynamoDBTranslation
+        DDBPathMetadata md = PathMetadataDynamoDBTranslation
+
+        // add parent path of what we remove
+        Path parentPath = path.getParent();
+        if (parentPath != null) {
+          parentPathSet.add(parentPath);
+        }
+
+
+          // set authoritative false for each pruned dir listing
+          removeAuthoritativeDirFlag(parentPathSet);
+          parentPathSet.clear();
+
+
+        // set authoritative false for each pruned dir listing
+        removeAuthoritativeDirFlag(parentPathSet);
+        parentPathSet.clear();
+  private void removeAuthoritativeDirFlag(Set<Path> pathSet)
+      throws IOException {
+    AtomicReference<IOException> rIOException = new AtomicReference<>();
+
+    Set<DDBPathMetadata> metas = pathSet.stream().map(path -> {
+      try {
+        DDBPathMetadata ddbPathMetadata = get(path);
+        if(ddbPathMetadata == null) {
+          return null;
+        }
+        LOG.debug("Setting false isAuthoritativeDir on {}", ddbPathMetadata);
+        ddbPathMetadata.setAuthoritativeDir(false);
+        return ddbPathMetadata;
+      } catch (IOException e) {
+        String msg = String.format("IOException while getting PathMetadata "
+            + "on path: %s.", path);
+        LOG.error(msg, e);
+        rIOException.set(e);
+        return null;
+      }
+    }).filter(Objects::nonNull).collect(Collectors.toSet());
+
+    try {
+      LOG.debug("innerPut on metas: {}", metas);
+      innerPut(metas);
+    } catch (IOException e) {
+      String msg = String.format("IOException while setting false "
+          + "authoritative directory flag on: %s.", metas);
+      LOG.error(msg, e);
+      rIOException.set(e);
+    }
+
+    if (rIOException.get() != null) {
+      throw rIOException.get();
+    }
+  }
+
-          Boolean.toString(false));
+          Boolean.toString(true));

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 UPD43 UPD43 UPD43 UPD74 MOV78 INS78 INS83 INS39 INS42 MOV44 INS43 INS8 UPD83 UPD42 INS44 UPD74 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 UPD42 UPD42 UPD43 UPD74 INS40 INS42 INS21 INS74 INS42 UPD43 UPD43 INS74 INS42 INS42 INS60 INS60 INS54 INS25 UPD43 UPD42 UPD43 UPD74 UPD74 INS32 INS43 INS43 UPD42 UPD42 UPD74 UPD43 UPD74 INS32 INS43 INS43 INS74 INS59 INS74 INS59 INS8 INS12 INS27 INS8 UPD42 UPD42 UPD43 UPD43 UPD43 INS42 INS32 INS42 INS42 UPD43 UPD42 UPD42 UPD43 INS42 INS42 MOV32 INS60 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS21 INS21 INS44 INS8 INS32 INS33 INS53 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD43 INS32 UPD42 UPD42 INS74 INS59 INS42 INS42 INS74 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS43 INS42 INS60 INS21 INS21 INS42 INS42 INS32 INS60 INS60 INS25 INS14 UPD42 INS42 INS42 INS43 INS43 INS42 INS14 INS60 INS25 INS21 INS21 INS43 INS32 INS42 INS90 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS14 UPD43 INS43 INS59 INS39 INS59 INS27 INS8 INS43 INS42 INS32 UPD42 INS42 INS42 INS74 UPD43 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD9 INS43 MOV32 UPD42 INS42 INS42 MOV32 INS42 INS9 INS42 INS33 INS21 INS42 INS42 MOV42 INS14 INS43 UPD42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS59 INS8 INS42 INS42 INS27 INS42 INS42 UPD43 INS7 INS42 UPD43 INS43 MOV32 UPD43 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS54 INS45 INS45 UPD42 INS42 INS32 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS60 INS25 INS21 INS21 INS41 INS44 INS8 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS43 INS42 INS60 INS21 INS21 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS45 INS42 INS42 INS42 INS9 INS42 INS43 INS59 INS32 INS32 INS33 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS45 DEL9 DEL42 DEL42