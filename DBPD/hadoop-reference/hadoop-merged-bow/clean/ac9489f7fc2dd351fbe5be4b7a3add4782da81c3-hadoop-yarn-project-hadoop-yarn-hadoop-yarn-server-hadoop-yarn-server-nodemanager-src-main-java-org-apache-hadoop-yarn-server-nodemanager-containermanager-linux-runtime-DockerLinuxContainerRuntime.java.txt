YARN-6804. Allow custom hostname for docker containers in native services. Contributed by Billie Rinaldi

+import org.apache.hadoop.registry.client.binding.RegistryPathUtils;
+ *     {@code YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME} sets the
+ *     hostname to be used by the Docker container. If not specified, a
+ *     hostname will be derived from the container ID.
+ *   </li>
+ *   <li>
+  public static final String HOSTNAME_PATTERN =
+      "^[a-zA-Z0-9][a-zA-Z0-9_.-]+$";
+  private static final Pattern hostnamePattern = Pattern.compile(
+      HOSTNAME_PATTERN);
+  @InterfaceAudience.Private
+  public static final String ENV_DOCKER_CONTAINER_HOSTNAME =
+      "YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME";
+  @InterfaceAudience.Private
-      if (LOG.isInfoEnabled()) {
-        LOG.info("cGroupsHandler is null - cgroups not in use.");
-      }
+      LOG.info("cGroupsHandler is null - cgroups not in use.");
+  public static void validateHostname(String hostname) throws
+      ContainerExecutionException {
+    if (hostname != null && !hostname.isEmpty()) {
+      if (!hostnamePattern.matcher(hostname).matches()) {
+        throw new ContainerExecutionException("Hostname '" + hostname
+            + "' doesn't match docker hostname pattern");
+      }
+    }
+  }
+
+  /** Set a DNS friendly hostname. */
+  private void setHostname(DockerRunCommand runCommand, String
+      containerIdStr, String name)
+      throws ContainerExecutionException {
+    if (name == null || name.isEmpty()) {
+      name = RegistryPathUtils.encodeYarnID(containerIdStr);
+      validateHostname(name);
+    }
+
+    LOG.info("setting hostname in container to: " + name);
+    runCommand.setHostname(name);
+  }
+
-    if (LOG.isInfoEnabled()) {
-      LOG.info("Privileged container requested for : " + container
-          .getContainerId().toString());
-    }
+    LOG.info("Privileged container requested for : " + container
+        .getContainerId().toString());
-    if (LOG.isInfoEnabled()) {
-      LOG.info("All checks pass. Launching privileged container for : "
-          + container.getContainerId().toString());
-    }
+    LOG.info("All checks pass. Launching privileged container for : "
+        + container.getContainerId().toString());
+    String hostname = environment.get(ENV_DOCKER_CONTAINER_HOSTNAME);
+    validateHostname(hostname);
+
-        .setNetworkType(network)
-        .setCapabilities(capabilities)
+        .setNetworkType(network);
+    setHostname(runCommand, containerIdStr, hostname);
+    runCommand.setCapabilities(capabilities)
-    List<String> allDirs = new ArrayList<>(containerLocalDirs);
+    List<String> allDirs = new ArrayList<>(containerLocalDirs);
-      if (LOG.isInfoEnabled()) {
-        LOG.info("command override disabled");
-      }
+      LOG.info("command override disabled");

INS26 INS40 INS23 INS23 INS23 INS31 INS31 MOV65 MOV65 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS45 INS42 INS42 INS32 INS40 INS42 INS42 INS45 INS40 MOV25 INS43 INS42 INS42 INS25 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS21 INS21 MOV21 MOV21 INS60 INS21 INS21 INS21 INS66 INS42 INS42 INS42 MOV27 MOV8 INS42 INS27 INS8 INS66 INS42 INS42 INS42 INS27 INS8 INS32 INS32 INS43 INS59 INS32 INS32 INS32 MOV8 INS27 INS38 INS25 INS27 INS32 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV27 INS9 INS42 INS33 INS32 INS38 INS8 INS42 INS33 INS42 INS42 INS7 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS53 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS45 INS42 INS45 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL32 DEL42 DEL42 DEL32 DEL25 DEL8