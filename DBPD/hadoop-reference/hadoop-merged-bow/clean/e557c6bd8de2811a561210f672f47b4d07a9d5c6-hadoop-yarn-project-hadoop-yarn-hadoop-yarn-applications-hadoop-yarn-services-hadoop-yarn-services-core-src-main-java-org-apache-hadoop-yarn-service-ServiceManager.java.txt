YARN-8298.  Added express upgrade for YARN service.
            Contributed by Chandni Singh

+import org.apache.hadoop.yarn.service.api.records.ComponentState;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.Queue;
+  private Queue<org.apache.hadoop.yarn.service.api.records
+        .Component> compsToUpgradeInOrder;
+      serviceManager.upgradeVersion = event.getVersion();
-        if (!event.isAutoFinalize()) {
-          serviceManager.serviceSpec.setState(ServiceState.UPGRADING);
+        if (event.isExpressUpgrade()) {
+          serviceManager.serviceSpec.setState(ServiceState.EXPRESS_UPGRADING);
+          serviceManager.compsToUpgradeInOrder = event
+              .getCompsToUpgradeInOrder();
+          serviceManager.upgradeNextCompIfAny();
+        } else if (event.isAutoFinalize()) {
+          serviceManager.serviceSpec.setState(ServiceState
+              .UPGRADING_AUTO_FINALIZE);
-              ServiceState.UPGRADING_AUTO_FINALIZE);
+              ServiceState.UPGRADING);
-        serviceManager.upgradeVersion = event.getVersion();
+      if (currState.equals(ServiceState.EXPRESS_UPGRADING)) {
+        org.apache.hadoop.yarn.service.api.records.Component component =
+            serviceManager.compsToUpgradeInOrder.peek();
+        if (!component.getState().equals(ComponentState.NEEDS_UPGRADE) &&
+            !component.getState().equals(ComponentState.UPGRADING)) {
+          serviceManager.compsToUpgradeInOrder.remove();
+        }
+        serviceManager.upgradeNextCompIfAny();
+      }
-          event.getType().equals(ServiceEventType.START)) {
+          event.getType().equals(ServiceEventType.START) ||
+          (currState.equals(ServiceState.EXPRESS_UPGRADING) &&
+              serviceManager.compsToUpgradeInOrder.isEmpty())) {
+  private void upgradeNextCompIfAny() {
+    if (!compsToUpgradeInOrder.isEmpty()) {
+      org.apache.hadoop.yarn.service.api.records.Component component =
+          compsToUpgradeInOrder.peek();
+
+      ComponentEvent needUpgradeEvent = new ComponentEvent(
+          component.getName(), ComponentEventType.UPGRADE).setTargetSpec(
+          component).setUpgradeVersion(upgradeVersion).setExpressUpgrade(true);
+      context.scheduler.getDispatcher().getEventHandler().handle(
+          needUpgradeEvent);
+    }
+  }
+
-      boolean autoFinalize) throws IOException {
+      boolean autoFinalize, boolean expressUpgrade) throws IOException {
-        compsThatNeedUpgrade = componentsFinder.
+        compsNeedUpgradeList = componentsFinder.
-    ServiceEvent event = new ServiceEvent(ServiceEventType.UPGRADE)
-        .setVersion(upgradeVersion)
-        .setAutoFinalize(autoFinalize);
-    context.scheduler.getDispatcher().getEventHandler().handle(event);
-    if (compsThatNeedUpgrade != null && !compsThatNeedUpgrade.isEmpty()) {
-      if (autoFinalize) {
-        event.setAutoFinalize(true);
-      }
-      compsThatNeedUpgrade.forEach(component -> {
+    // remove all components from need upgrade list if there restart policy
+    // doesn't all upgrade.
+    if (compsNeedUpgradeList != null) {
+      compsNeedUpgradeList.removeIf(component -> {
-        if (restartPolicyHandler.allowUpgrades()) {
+        if (!restartPolicyHandler.allowUpgrades()) {
+          LOG.info("The component {} has a restart policy that doesnt " +
+                  "allow upgrades {} ", component.getName(),
+              component.getRestartPolicy().toString());
+          return true;
+        }
+
+        return false;
+      });
+    }
+
+    ServiceEvent event = new ServiceEvent(ServiceEventType.UPGRADE)
+        .setVersion(upgradeVersion)
+        .setAutoFinalize(autoFinalize)
+        .setExpressUpgrade(expressUpgrade);
+
+    if (expressUpgrade) {
+      // In case of express upgrade  components need to be upgraded in order.
+      // Once the service manager gets notified that a component finished
+      // upgrading, it then issues event to upgrade the next component.
+      Map<String, org.apache.hadoop.yarn.service.api.records.Component>
+          compsNeedUpgradeByName = new HashMap<>();
+      if (compsNeedUpgradeList != null) {
+        compsNeedUpgradeList.forEach(component ->
+            compsNeedUpgradeByName.put(component.getName(), component));
+      }
+      List<String> resolvedComps = ServiceApiUtil
+          .resolveCompsDependency(targetSpec);
+
+      Queue<org.apache.hadoop.yarn.service.api.records.Component>
+          orderedCompUpgrade = new LinkedList<>();
+      resolvedComps.forEach(compName -> {
+        org.apache.hadoop.yarn.service.api.records.Component component =
+            compsNeedUpgradeByName.get(compName);
+        if (component != null ) {
+          orderedCompUpgrade.add(component);
+        }
+      });
+      event.setCompsToUpgradeInOrder(orderedCompUpgrade);
+    }
+
+    context.scheduler.getDispatcher().getEventHandler().handle(event);
+
+    if (compsNeedUpgradeList != null && !compsNeedUpgradeList.isEmpty()) {
+      if (!expressUpgrade) {
+        compsNeedUpgradeList.forEach(component -> {
-        } else {
-          LOG.info("The component {} has a restart "
-              + "policy that doesnt allow upgrades {} ", component.getName(),
-              component.getRestartPolicy().toString());
-        }
-      });
-    } else {
+
+        });
+      }
+    }  else if (autoFinalize) {
-      if (autoFinalize) {
-        context.scheduler.getDispatcher().getEventHandler().handle(
-            new ServiceEvent(ServiceEventType.CHECK_STABLE));
-      }
+      context.scheduler.getDispatcher().getEventHandler().handle(
+          new ServiceEvent(ServiceEventType.CHECK_STABLE));

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS74 INS59 INS83 INS39 INS42 INS8 INS44 INS43 INS43 INS42 INS25 INS39 INS42 INS25 INS25 INS42 INS40 MOV21 INS25 INS38 INS8 INS27 MOV8 INS42 INS8 MOV25 INS32 INS8 INS32 INS60 INS60 INS21 UPD42 INS42 INS33 INS32 INS60 INS25 INS60 INS60 INS21 INS21 MOV25 INS25 INS42 INS42 INS40 INS60 INS25 INS21 INS36 INS42 INS42 INS43 INS59 INS43 INS59 INS32 MOV32 INS42 INS42 INS74 INS59 INS27 INS8 INS74 INS59 INS74 INS59 INS32 INS32 UPD42 INS38 INS8 INS32 INS8 MOV25 MOV8 INS43 INS59 INS27 INS8 INS32 INS27 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 UPD42 UPD42 INS43 INS43 INS43 INS42 INS14 INS42 INS33 INS21 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS86 INS42 INS42 INS42 UPD42 INS42 INS21 INS42 INS42 INS21 INS21 INS21 MOV32 INS40 INS42 INS32 INS38 INS38 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS9 INS32 INS42 INS59 INS42 INS42 INS40 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS74 INS59 INS8 INS32 INS32 INS7 INS32 INS40 INS42 INS32 INS32 INS32 INS42 INS42 INS40 INS40 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS25 INS41 INS43 INS42 INS42 INS86 INS43 INS42 INS60 INS25 INS42 INS42 INS86 INS40 INS42 INS40 INS40 INS32 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS40 INS40 INS42 INS14 INS42 INS42 INS38 MOV8 INS9 INS42 INS59 INS32 INS42 INS43 INS59 INS27 INS8 MOV59 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS40 MOV32 INS41 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD45 UPD45 DEL38 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25