Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.util.ExitUtil.terminate;
+import java.io.InputStream;
+import java.io.PrintStream;
+import org.apache.hadoop.hdfs.protocol.HdfsBlocksMetadata;
+import org.apache.hadoop.hdfs.protocol.datatransfer.DataTransferEncryptor;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
-
-import static org.apache.hadoop.util.ExitUtil.terminate;
-
+import org.apache.hadoop.io.ReadaheadPool;
+import org.apache.hadoop.util.Time;
+import com.google.common.annotations.VisibleForTesting;
-import com.google.common.annotations.VisibleForTesting;
+  
+  private static final String USAGE = "Usage: java DataNode [-rollback | -regular]";
-  private boolean heartbeatsDisabledForTests = false;
+  private volatile boolean heartbeatsDisabledForTests = false;
-  private final String userWithLocalPathAccess;
+  private final List<String> usersWithLocalPathAccess;
+  private boolean connectToDnViaHostname;
+  ReadaheadPool readaheadPool;
+  private final boolean getHdfsBlockLocationsEnabled;
-    this.userWithLocalPathAccess = conf
-        .get(DFSConfigKeys.DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY);
+    this.usersWithLocalPathAccess = Arrays.asList(
+        conf.getTrimmedStrings(DFSConfigKeys.DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY));
+    this.connectToDnViaHostname = conf.getBoolean(
+        DFSConfigKeys.DFS_DATANODE_USE_DN_HOSTNAME,
+        DFSConfigKeys.DFS_DATANODE_USE_DN_HOSTNAME_DEFAULT);
+    this.getHdfsBlockLocationsEnabled = conf.getBoolean(
+        DFSConfigKeys.DFS_HDFS_BLOCKS_METADATA_ENABLED, 
+        DFSConfigKeys.DFS_HDFS_BLOCKS_METADATA_ENABLED_DEFAULT);
-    ipcServer = RPC.getServer(ClientDatanodeProtocolPB.class, service, ipcAddr
-        .getHostName(), ipcAddr.getPort(), conf.getInt(
-        DFS_DATANODE_HANDLER_COUNT_KEY, DFS_DATANODE_HANDLER_COUNT_DEFAULT),
-        false, conf, blockPoolTokenSecretManager);
+    ipcServer = new RPC.Builder(conf)
+        .setProtocol(ClientDatanodeProtocolPB.class)
+        .setInstance(service)
+        .setBindAddress(ipcAddr.getHostName())
+        .setPort(ipcAddr.getPort())
+        .setNumHandlers(
+            conf.getInt(DFS_DATANODE_HANDLER_COUNT_KEY,
+                DFS_DATANODE_HANDLER_COUNT_DEFAULT)).setVerbose(false)
+        .setSecretManager(blockPoolTokenSecretManager).build();
-      directoryScanner = new DirectoryScanner(this, data, conf);
+      directoryScanner = new DirectoryScanner(data, conf);
+
+    // Create the ReadaheadPool from the DataNode context so we can
+    // exit without having to explicitly shutdown its thread pool.
+    readaheadPool = ReadaheadPool.getInstance();
-    // TODO should we check that all federated nns are either enabled or
-    // disabled?
-        new BlockTokenSecretManager(0, blockTokenLifetime);
+          new BlockTokenSecretManager(0, blockTokenLifetime, blockPoolId,
+              dnConf.encryptionAlgorithm);
-   * transfer, and that may be be a different address.
+   * transfer, and that may be a different address.
-      DatanodeID datanodeid, final Configuration conf, final int socketTimeout)
-    throws IOException {
-    final InetSocketAddress addr =
-      NetUtils.createSocketAddr(datanodeid.getIpcAddr());
-    if (InterDatanodeProtocol.LOG.isDebugEnabled()) {
-      InterDatanodeProtocol.LOG.debug("InterDatanodeProtocol addr=" + addr);
+      DatanodeID datanodeid, final Configuration conf, final int socketTimeout,
+      final boolean connectToDnViaHostname) throws IOException {
+    final String dnAddr = datanodeid.getIpcAddr(connectToDnViaHostname);
+    final InetSocketAddress addr = NetUtils.createSocketAddr(dnAddr);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Connecting to datanode " + dnAddr + " addr=" + addr);
+            @Override
-        + System.currentTimeMillis();
+        + Time.now();
-    if (!currentUser.equals(this.userWithLocalPathAccess)) {
+    if (!usersWithLocalPathAccess.contains(currentUser)) {
+
+  @Override
+  public HdfsBlocksMetadata getHdfsBlocksMetadata(List<ExtendedBlock> blocks,
+      List<Token<BlockTokenIdentifier>> tokens) throws IOException, 
+      UnsupportedOperationException {
+    if (!getHdfsBlockLocationsEnabled) {
+      throw new UnsupportedOperationException("Datanode#getHdfsBlocksMetadata "
+          + " is not enabled in datanode config");
+    }
+    if (blocks.size() != tokens.size()) {
+      throw new IOException("Differing number of blocks and tokens");
+    }
+    // Check access for each block
+    for (int i = 0; i < blocks.size(); i++) {
+      checkBlockToken(blocks.get(i), tokens.get(i), 
+          BlockTokenSecretManager.AccessMode.READ);
+    }
+    return data.getHdfsBlocksMetadata(blocks);
+  }
+    this.shouldRun = false;
-    this.shouldRun = false;
-  UpgradeManagerDatanode getUpgradeManagerDatanode(String bpid) {
-    BPOfferService bpos = blockPoolManager.get(bpid);
-    if(bpos==null) {
-      return null;
-    }
-    return bpos.getUpgradeManager();
-  }
-
-  private void transferBlock( ExtendedBlock block, 
-                              DatanodeInfo xferTargets[] 
-                              ) throws IOException {
+  private void transferBlock(ExtendedBlock block, DatanodeInfo xferTargets[])
+      throws IOException {
+    @Override
-        InetSocketAddress curTarget = 
-          NetUtils.createSocketAddr(targets[0].getXferAddr());
+        final String dnAddr = targets[0].getXferAddr(connectToDnViaHostname);
+        InetSocketAddress curTarget = NetUtils.createSocketAddr(dnAddr);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Connecting to datanode " + dnAddr);
+        }
-        OutputStream baseStream = NetUtils.getOutputStream(sock, writeTimeout);
-        out = new DataOutputStream(new BufferedOutputStream(baseStream,
+        OutputStream unbufOut = NetUtils.getOutputStream(sock, writeTimeout);
+        InputStream unbufIn = NetUtils.getInputStream(sock);
+        if (dnConf.encryptDataTransfer) {
+          IOStreamPair encryptedStreams =
+              DataTransferEncryptor.getEncryptedStreams(
+                  unbufOut, unbufIn,
+                  blockPoolTokenSecretManager.generateDataEncryptionKey(
+                      b.getBlockPoolId()));
+          unbufOut = encryptedStreams.out;
+          unbufIn = encryptedStreams.in;
+        }
+        
+        out = new DataOutputStream(new BufferedOutputStream(unbufOut,
+        in = new DataInputStream(unbufIn);
-        blockSender.sendBlock(out, baseStream, null);
+        blockSender.sendBlock(out, unbufOut, null);
-          in = new DataInputStream(NetUtils.getInputStream(sock));
-      printUsage();
+      printUsage(System.err);
-  private static void printUsage() {
-    System.err.println("Usage: java DataNode");
-    System.err.println("           [-rollback]");
+  private static void printUsage(PrintStream out) {
+    out.println(USAGE + "\n");
-      terminate(1);
+      terminate(1, e);
+    if (DFSUtil.parseHelpArgument(args, DataNode.USAGE, System.out, true)) {
+      System.exit(0);
+    }
+
+      @Override
-    DatanodeInfo[] targets = rBlock.getLocations();
-    DatanodeID[] datanodeids = (DatanodeID[])targets;
+    DatanodeID[] datanodeids = rBlock.getLocations();
-                dnConf.socketTimeout);
+                dnConf.socketTimeout, dnConf.connectToDnViaHostname);

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS83 INS83 INS83 MOV43 INS59 INS83 INS74 INS83 INS39 INS59 INS43 INS59 INS83 INS83 INS39 INS59 INS44 INS78 INS83 UPD43 UPD42 INS44 INS43 INS43 INS8 MOV21 INS44 INS8 INS8 INS42 INS45 INS43 INS43 UPD42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS83 INS39 INS42 INS60 INS42 UPD42 INS74 UPD42 INS74 INS42 INS42 INS42 INS25 MOV25 INS24 MOV41 INS78 INS43 INS42 MOV21 INS25 MOV21 INS42 INS42 INS7 INS7 INS7 UPD66 INS83 INS43 INS59 INS43 INS43 INS43 INS74 INS38 INS8 UPD27 INS58 INS27 INS37 INS8 INS42 INS42 INS32 INS8 UPD5 INS32 INS22 INS32 INS22 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS53 INS32 INS32 INS53 INS39 INS59 INS42 INS32 INS42 INS21 UPD42 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 INS40 INS40 INS9 INS21 UPD43 UPD42 UPD42 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS40 INS40 INS52 INS42 INS42 INS42 INS40 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 MOV42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS34 INS42 INS42 INS32 INS60 INS25 INS60 INS25 INS21 INS42 INS45 INS32 UPD42 MOV42 UPD42 MOV42 MOV40 INS32 INS42 INS42 INS42 INS43 INS27 INS43 INS45 INS42 INS32 INS32 INS40 INS83 MOV43 MOV43 INS59 INS32 INS8 INS43 INS59 INS40 INS8 INS7 INS40 INS42 INS42 INS34 MOV32 INS42 INS9 INS42 INS40 INS45 INS42 UPD45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS21 UPD42 INS42 INS42 MOV32 INS60 INS21 INS21 INS42 INS14 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS7 INS7 MOV43 INS42 INS78 INS32 UPD42 MOV42 MOV32 INS78 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS40 INS42 INS40 UPD42 INS42 INS32 UPD42 MOV42 MOV32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS32 INS42 MOV42 INS42 INS42 INS32 INS14 UPD42 MOV42 MOV57 INS42 INS42 INS43 INS42 INS40 DEL32 DEL42 DEL9 DEL52 DEL42 DEL32 DEL40 DEL40 DEL52 DEL42 DEL22 DEL42 DEL33 DEL33 DEL41 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL7 DEL21 DEL40 DEL45 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL11 DEL59 DEL60