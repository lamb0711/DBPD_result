SUBMARINE-47. Provide an implementation to parse configuration values from a YAML file for submarine run CLI. Contributed by Szilard Nemeth.

-import org.apache.commons.cli.CommandLine;
-import org.apache.commons.cli.Options;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.CaseFormat;
+import org.yaml.snakeyaml.introspector.Property;
+import org.yaml.snakeyaml.introspector.PropertyUtils;
+import java.beans.IntrospectionException;
-  public void updateParametersByParsedCommandline(CommandLine parsedCommandLine,
-      Options options, ClientContext clientContext)
+  public void updateParameters(ParametersHolder parametersHolder,
+      ClientContext clientContext)
-    String input = parsedCommandLine.getOptionValue(CliConstants.INPUT_PATH);
-    String jobDir = parsedCommandLine.getOptionValue(CliConstants.CHECKPOINT_PATH);
+    String input = parametersHolder.getOptionValue(CliConstants.INPUT_PATH);
+    String jobDir = parametersHolder.getOptionValue(
+        CliConstants.CHECKPOINT_PATH);
-    if (parsedCommandLine.getOptionValue(CliConstants.N_WORKERS) != null) {
+    if (parametersHolder.getOptionValue(CliConstants.N_WORKERS) != null) {
-          parsedCommandLine.getOptionValue(CliConstants.N_WORKERS));
+          parametersHolder.getOptionValue(CliConstants.N_WORKERS));
-      // But if nWorkers is 0, INPUT_PATH can be ignored because user can only run Tensorboard
+      // But if nWorkers is 0, INPUT_PATH can be ignored because
+      // user can only run Tensorboard
-        throw new ParseException("\"--" + CliConstants.INPUT_PATH + "\" is absent");
+        throw new ParseException("\"--" + CliConstants.INPUT_PATH +
+            "\" is absent");
-    if (parsedCommandLine.getOptionValue(CliConstants.N_PS) != null) {
+    if (parametersHolder.getOptionValue(CliConstants.N_PS) != null) {
-          parsedCommandLine.getOptionValue(CliConstants.N_PS));
+          parametersHolder.getOptionValue(CliConstants.N_PS));
-    String kerberosKeytab = parsedCommandLine.getOptionValue(
+    String kerberosKeytab = parametersHolder.getOptionValue(
-    String kerberosPrincipal = parsedCommandLine.getOptionValue(
+    String kerberosPrincipal = parametersHolder.getOptionValue(
-      String workerResourceStr = parsedCommandLine.getOptionValue(
+      String workerResourceStr = parametersHolder.getOptionValue(
-      String psResourceStr = parsedCommandLine.getOptionValue(CliConstants.PS_RES);
+      String psResourceStr = parametersHolder.getOptionValue(
+          CliConstants.PS_RES);
-    if (parsedCommandLine.hasOption(CliConstants.TENSORBOARD)) {
+    if (parametersHolder.hasOption(CliConstants.TENSORBOARD)) {
-      String tensorboardResourceStr = parsedCommandLine.getOptionValue(
+      String tensorboardResourceStr = parametersHolder.getOptionValue(
-      tensorboardDockerImage = parsedCommandLine.getOptionValue(
+      tensorboardDockerImage = parametersHolder.getOptionValue(
-    if (parsedCommandLine.hasOption(CliConstants.WAIT_JOB_FINISH)) {
+    if (parametersHolder.hasOption(CliConstants.WAIT_JOB_FINISH)) {
-    String[] quicklinkStrs = parsedCommandLine.getOptionValues(
+    List<String> quicklinkStrs = parametersHolder.getOptionValues(
-    psDockerImage = parsedCommandLine.getOptionValue(
+    psDockerImage = parametersHolder.getOptionValue(
-    workerDockerImage = parsedCommandLine.getOptionValue(
+    workerDockerImage = parametersHolder.getOptionValue(
-    String workerLaunchCmd = parsedCommandLine.getOptionValue(
+    String workerLaunchCmd = parametersHolder.getOptionValue(
-    String psLaunchCommand = parsedCommandLine.getOptionValue(
+    String psLaunchCommand = parametersHolder.getOptionValue(
-    String[] localizationsStr = parsedCommandLine.getOptionValues(
+    List<String> localizationsStr = parametersHolder.getOptionValues(
-    boolean distributeKerberosKeytab = parsedCommandLine.hasOption(CliConstants
+    boolean distributeKerberosKeytab = parametersHolder.hasOption(CliConstants
-    this.setInputPath(input).setCheckpointPath(jobDir).setNumPS(nPS).setNumWorkers(nWorkers)
+    this.setInputPath(input).setCheckpointPath(jobDir)
+        .setNumPS(nPS).setNumWorkers(nWorkers)
-    super.updateParametersByParsedCommandline(parsedCommandLine,
-        options, clientContext);
+    super.updateParameters(parametersHolder, clientContext);
+
+  @VisibleForTesting
+  public static class UnderscoreConverterPropertyUtils extends PropertyUtils {
+    @Override
+    public Property getProperty(Class<? extends Object> type, String name)
+        throws IntrospectionException {
+      if (name.indexOf('_') > -1) {
+        name = convertName(name);
+      }
+      return super.getProperty(type, name);
+    }
+
+    private static String convertName(String name) {
+      return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, name);
+    }
+  }

INS26 INS26 INS26 UPD40 UPD40 INS40 INS40 INS40 INS55 UPD42 INS78 INS83 INS83 INS42 INS43 INS31 INS31 UPD43 UPD42 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 UPD42 INS74 INS74 INS42 INS42 INS74 INS42 MOV43 INS42 INS42 INS25 INS41 INS42 MOV43 INS42 INS41 UPD42 UPD42 INS43 INS43 INS43 INS43 UPD42 UPD42 INS43 INS76 INS27 INS8 INS48 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS43 INS32 INS38 INS21 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS13 INS34 INS7 UPD42 UPD42 UPD42 UPD42 INS42 INS32 UPD42 UPD42 INS42 INS42 DEL42 DEL43 DEL42 DEL44 DEL85 DEL5 DEL85 DEL5 DEL42