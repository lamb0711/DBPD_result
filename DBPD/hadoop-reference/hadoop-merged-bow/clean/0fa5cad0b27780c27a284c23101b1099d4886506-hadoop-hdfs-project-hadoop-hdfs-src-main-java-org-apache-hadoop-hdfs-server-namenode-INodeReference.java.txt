HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Iterator;
+    
-    if (ref == wc.getParentReference()) {
-      wc.setParent(null);
-    }
-    return ((WithCount)referred).decrementReferenceCount();
+    wc.removeReference(ref);
+    return wc.getReferenceCount();
-  public final Quota.Counts cleanSubtree(Snapshot snapshot, Snapshot prior,
+  public Quota.Counts cleanSubtree(Snapshot snapshot, Snapshot prior,
-  public final Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache) {
-    return referred.computeQuotaUsage(counts, useCache);
+  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,
+      int lastSnapshotId) {
+    return referred.computeQuotaUsage(counts, useCache, lastSnapshotId);
-  public final void addSpaceConsumed(long nsDelta, long dsDelta, boolean verify)
-      throws QuotaExceededException {
-    referred.addSpaceConsumed(nsDelta, dsDelta, verify);
-  }
-
-  @Override
-
+  
-    private int referenceCount = 1;
+    
+    private final List<WithName> withNameList = new ArrayList<WithName>();
-    /** @return the reference count. */
-      return referenceCount;
+      int count = withNameList.size();
+      if (getParentReference() != null) {
+        count++;
+      }
+      return count;
-    public int incrementReferenceCount() {
-      return ++referenceCount;
+    public void addReference(INodeReference ref) {
+      if (ref instanceof WithName) {
+        withNameList.add((WithName) ref);
+      } else if (ref instanceof DstReference) {
+        setParentReference(ref);
+      }
-    public int decrementReferenceCount() {
-      return --referenceCount;
+    public void removeReference(INodeReference ref) {
+      if (ref instanceof WithName) {
+        Iterator<INodeReference.WithName> iter = withNameList.iterator();
+        while (iter.hasNext()) {
+          if (iter.next() == ref) {
+            iter.remove();
+            break;
+          }
+        }
+      } else if (ref == getParentReference()) {
+        setParent(null);
+      }
+    }
+    
+    @Override
+    public final void addSpaceConsumed(long nsDelta, long dsDelta,
+        boolean verify, int snapshotId) throws QuotaExceededException {
+      INodeReference parentRef = getParentReference();
+      if (parentRef != null) {
+        parentRef.addSpaceConsumed(nsDelta, dsDelta, verify, snapshotId);
+      }
+      addSpaceConsumedToRenameSrc(nsDelta, dsDelta, verify, snapshotId);
+    }
+    
+    @Override
+    public final void addSpaceConsumedToRenameSrc(long nsDelta, long dsDelta,
+        boolean verify, int snapshotId) throws QuotaExceededException {
+      if (snapshotId != Snapshot.INVALID_ID) {
+        // sort withNameList based on the lastSnapshotId
+        Collections.sort(withNameList, new Comparator<WithName>() {
+          @Override
+          public int compare(WithName w1, WithName w2) {
+            return w1.lastSnapshotId - w2.lastSnapshotId;
+          }
+        });
+        for (INodeReference.WithName withName : withNameList) {
+          if (withName.getLastSnapshotId() >= snapshotId) {
+            withName.addSpaceConsumed(nsDelta, dsDelta, verify, snapshotId);
+            break;
+          }
+        }
+      }
-
+  
-    public WithName(INodeDirectory parent, WithCount referred, byte[] name) {
+    /**
+     * The id of the last snapshot in the src tree when this WithName node was 
+     * generated. When calculating the quota usage of the referred node, only 
+     * the files/dirs existing when this snapshot was taken will be counted for 
+     * this WithName node and propagated along its ancestor path.
+     */
+    private final int lastSnapshotId;
+    
+    public WithName(INodeDirectory parent, WithCount referred, byte[] name,
+        int lastSnapshotId) {
+      this.lastSnapshotId = lastSnapshotId;
+      referred.addReference(this);
+    
+    public int getLastSnapshotId() {
+      return lastSnapshotId;
+    }
+    
+    @Override
+    public final Quota.Counts computeQuotaUsage(Quota.Counts counts,
+        boolean useCache, int lastSnapshotId) {
+      Preconditions.checkState(lastSnapshotId == Snapshot.INVALID_ID
+          || this.lastSnapshotId <= lastSnapshotId);
+      final INode referred = this.getReferredINode().asReference()
+          .getReferredINode();
+      // we cannot use cache for the referred node since its cached quota may
+      // have already been updated by changes in the current tree
+      return referred.computeQuotaUsage(counts, false, this.lastSnapshotId);
+    }
+    
+    @Override
+    public Quota.Counts cleanSubtree(Snapshot snapshot, Snapshot prior,
+        BlocksMapUpdateInfo collectedBlocks, List<INode> removedINodes)
+        throws QuotaExceededException {
+      Quota.Counts counts = getReferredINode().cleanSubtree(snapshot, prior,
+          collectedBlocks, removedINodes);
+      INodeReference ref = getReferredINode().getParentReference();
+      if (ref != null) {
+        ref.addSpaceConsumed(-counts.get(Quota.NAMESPACE),
+            -counts.get(Quota.DISKSPACE), true, Snapshot.INVALID_ID);
+      }
+      return counts;
+    }
+      referred.addReference(this);
+    }
+    
+    @Override
+    public Quota.Counts cleanSubtree(Snapshot snapshot, Snapshot prior,
+        BlocksMapUpdateInfo collectedBlocks, List<INode> removedINodes)
+        throws QuotaExceededException {
+      Quota.Counts counts = getReferredINode().cleanSubtree(snapshot, prior,
+          collectedBlocks, removedINodes);
+      if (snapshot != null) {
+        // also need to update quota usage along the corresponding WithName node
+        WithCount wc = (WithCount) getReferredINode();
+        wc.addSpaceConsumedToRenameSrc(-counts.get(Quota.NAMESPACE),
+            -counts.get(Quota.DISKSPACE), true, snapshot.getId());
+      }
+      return counts;

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS55 INS43 INS44 INS44 INS44 MOV29 INS83 INS83 INS42 MOV43 INS23 MOV31 INS31 INS31 INS31 MOV31 INS31 INS23 INS31 INS31 INS31 INS31 MOV21 INS40 INS43 INS42 INS39 INS42 INS39 INS42 INS83 INS83 INS74 INS59 INS83 INS39 INS42 INS8 MOV29 INS83 MOV39 UPD42 MOV42 INS44 INS8 MOV29 INS83 INS39 INS42 INS44 INS8 MOV78 INS83 INS39 INS42 MOV44 MOV44 MOV44 INS44 INS43 INS8 INS78 MOV83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS59 INS44 INS83 INS39 INS42 INS8 INS78 INS83 INS83 MOV43 INS42 MOV44 MOV44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 MOV43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS40 INS43 INS43 INS42 INS14 INS60 INS25 INS41 INS43 INS42 INS25 INS43 INS42 INS25 INS39 INS42 INS42 INS60 INS25 INS21 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS25 INS65 INS42 INS39 INS42 INS21 INS21 INS41 INS42 INS39 INS42 INS21 INS60 INS41 INS42 INS40 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS60 INS25 INS41 INS21 INS42 INS40 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS41 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS74 INS39 INS59 INS27 INS8 INS42 INS42 INS62 INS8 INS25 INS42 INS62 INS8 INS25 INS43 INS59 INS27 INS8 INS32 INS27 INS8 INS66 INS66 INS66 INS66 INS7 INS32 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS43 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS43 INS43 INS42 INS32 INS32 INS33 INS21 INS42 INS43 MOV21 INS62 INS8 INS42 INS43 INS60 INS61 INS27 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS21 INS70 INS22 INS42 INS42 INS42 INS52 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS22 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS52 INS42 INS42 INS40 INS42 INS32 INS42 INS33 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS37 INS42 INS42 INS43 INS21 INS42 INS74 INS59 INS32 INS8 INS42 INS32 INS21 INS42 INS32 INS32 INS44 INS42 INS8 INS52 INS42 INS27 INS27 INS32 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 MOV43 INS59 INS32 INS42 UPD42 UPD42 INS11 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS25 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS25 INS42 INS40 INS22 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS38 INS38 INS9 INS40 INS42 INS42 INS11 INS42 INS42 INS38 INS38 INS9 INS32 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS27 INS8 INS42 INS33 INS74 INS1 INS40 INS27 INS8 INS52 INS42 INS52 INS42 INS32 INS32 INS43 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS21 INS10 INS43 INS43 INS31 INS32 INS42 INS21 INS10 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS78 MOV83 MOV39 UPD42 MOV42 INS44 INS44 MOV8 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS40 INS40 DEL33 DEL42 DEL42 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL11 DEL36 DEL83 DEL83 DEL83 DEL83 DEL8 DEL31 DEL42 DEL42 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL41 DEL8 DEL42 DEL38 DEL83 DEL83 DEL42 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL39 DEL42 DEL42 DEL38 DEL41 DEL8 DEL31 DEL31 DEL55