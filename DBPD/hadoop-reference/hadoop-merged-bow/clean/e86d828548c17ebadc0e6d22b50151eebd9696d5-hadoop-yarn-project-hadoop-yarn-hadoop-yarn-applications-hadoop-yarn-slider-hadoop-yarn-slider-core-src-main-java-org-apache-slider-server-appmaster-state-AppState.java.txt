YARN-6716. Native services support for specifying component start order. Contributed by Billie Rinaldi

+import org.apache.slider.util.ServiceApiUtil;
-    //build the initial component list
+    // build the initial component list
+    Collection<Component> sortedComponents = ServiceApiUtil
+        .sortByDependencies(app.getComponents());
-    for (Component component : app.getComponents()) {
+    for (Component component : sortedComponents) {
-      createComponent(name, name, component, priority++);
+      createComponent(name, component, priority++);
-  public ProviderRole createComponent(String name, String group,
-      Component component, int priority) throws BadConfigException {
+  public ProviderRole createComponent(String name, Component component,
+      int priority) throws BadConfigException {
-        new ProviderRole(name, group, priority, (int)placementPolicy, threshold,
+        new ProviderRole(name, priority, (int)placementPolicy, threshold,
-      if (!roleStatus.isExcludeFromFlexing()) {
+      if (!roleStatus.isExcludeFromFlexing() &&
+          areDependenciesReady(roleStatus)) {
+  @VisibleForTesting
+  public boolean areDependenciesReady(RoleStatus roleStatus) {
+    List<String> dependencies = roleStatus.getProviderRole().component
+        .getDependencies();
+    if (SliderUtils.isEmpty(dependencies)) {
+      return true;
+    }
+    for (String dependency : dependencies) {
+      ProviderRole providerRole = roles.get(dependency);
+      if (providerRole == null) {
+        log.error("Couldn't find dependency {} for {} (should never happen)",
+            dependency, roleStatus.getName());
+        continue;
+      }
+      RoleStatus other = getRoleStatusMap().get(providerRole.id);
+      if (other.getRunning() < other.getDesired()) {
+        log.info("Dependency {} not satisfied for {}, only {} of {} instances" +
+            " running", dependency, roleStatus.getName(), other.getRunning(),
+            other.getDesired());
+        return false;
+      }
+      if (providerRole.probe == null) {
+        continue;
+      }
+      List<RoleInstance> dependencyInstances = enumLiveNodesInRole(
+          providerRole.name);
+      if (dependencyInstances.size() < other.getDesired()) {
+        log.info("Dependency {} not satisfied for {}, only {} of {} instances" +
+                " live", dependency, roleStatus.getName(),
+            dependencyInstances.size(), other.getDesired());
+        return false;
+      }
+      for (RoleInstance instance : dependencyInstances) {
+        if (instance.state != STATE_READY) {
+          return false;
+        }
+      }
+    }
+    return true;
+  }
+
+  public synchronized boolean monitorComponentInstances() {
+    boolean hasChanged = false;
+    for (RoleInstance instance : getLiveContainers().values()) {
+      if (instance.providerRole.probe == null) {
+        continue;
+      }
+      boolean ready = instance.providerRole.probe.ping(instance).isSuccess();
+      if (ready) {
+        if (instance.state != STATE_READY) {
+          instance.state = STATE_READY;
+          hasChanged = true;
+          log.info("State of {} changed to ready", instance.role);
+        }
+      } else {
+        if (instance.state == STATE_READY) {
+          instance.state = STATE_NOT_READY;
+          hasChanged = true;
+          log.info("State of {} changed from ready to not ready", instance
+              .role);
+        }
+      }
+    }
+    return hasChanged;
+  }
+

INS26 INS40 INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS8 INS60 INS42 INS43 INS42 INS60 INS25 INS70 INS41 INS60 INS70 INS41 INS74 INS59 INS42 INS42 INS74 INS59 INS32 INS8 MOV44 INS42 INS8 INS9 INS39 INS59 INS44 INS32 INS8 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS41 UPD42 INS60 INS25 INS60 INS25 INS25 INS60 INS25 INS70 INS42 INS9 INS43 INS42 INS32 INS42 INS25 INS60 INS25 INS42 INS42 INS42 INS42 MOV32 INS27 INS42 INS42 INS22 INS42 INS9 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS74 INS59 INS27 INS8 INS44 INS42 INS8 INS42 INS42 INS27 INS8 INS39 INS59 INS42 INS8 INS8 MOV38 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS18 INS42 INS42 INS32 INS32 INS32 INS21 INS41 INS40 INS33 INS18 INS43 INS43 INS42 INS32 INS32 INS32 INS21 INS41 INS43 INS42 INS25 INS40 INS33 INS18 INS42 INS32 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS27 INS8 INS32 INS42 INS27 INS8 INS27 INS8 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS32 INS32 INS32 INS42 INS42 INS27 INS42 INS32 INS32 INS32 INS40 INS42 INS41 INS40 INS42 INS42 INS40 INS42 INS21 INS21 INS21 INS40 INS42 INS21 INS21 INS21 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS7 INS7 INS32 INS7 INS7 INS32 INS40 INS42 INS42 INS9 INS42 INS42 INS45 INS40 INS40 INS42 INS42 INS9 INS42 INS42 INS45 INS40 DEL42 DEL42