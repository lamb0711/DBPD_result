YARN-2495. Allow admin specify labels from each NM (Distributed configuration for node label). (Naganarasimha G R via wangda)

+import org.apache.hadoop.util.StringUtils;
+import org.apache.hadoop.yarn.nodelabels.CommonNodeLabelsManager;
+import org.apache.hadoop.yarn.server.nodemanager.nodelabels.NodeLabelsProvider;
+  private final NodeLabelsProvider nodeLabelsProvider;
+  private final boolean hasNodeLabelsProvider;
+
+    this(context, dispatcher, healthChecker, metrics, null);
+  }
+
+  public NodeStatusUpdaterImpl(Context context, Dispatcher dispatcher,
+      NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics,
+      NodeLabelsProvider nodeLabelsProvider) {
+    this.nodeLabelsProvider = nodeLabelsProvider;
+    this.hasNodeLabelsProvider = (nodeLabelsProvider != null);
-    this.recentlyStoppedContainers =
-        new LinkedHashMap<ContainerId, Long>();
+    this.recentlyStoppedContainers = new LinkedHashMap<ContainerId, Long>();
+    Set<String> nodeLabels = null;
+    if (hasNodeLabelsProvider) {
+      nodeLabels = nodeLabelsProvider.getNodeLabels();
+      nodeLabels =
+          (null == nodeLabels) ? CommonNodeLabelsManager.EMPTY_STRING_SET
+              : nodeLabels;
+    }
-          nodeManagerVersionId, containerReports, getRunningApplications());
+            nodeManagerVersionId, containerReports, getRunningApplications(),
+            nodeLabels);
-    // if the Resourcemanager instructs NM to shutdown.
+    // if the Resource Manager instructs NM to shutdown.
-        "Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, "
+        "Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, "
-    LOG.info("Registered with ResourceManager as " + this.nodeId
-        + " with total resource of " + this.totalResource);
+    StringBuilder successfullRegistrationMsg = new StringBuilder();
+    successfullRegistrationMsg.append("Registered with ResourceManager as ")
+        .append(this.nodeId).append(" with total resource of ")
+        .append(this.totalResource);
+
+    if (regNMResponse.getAreNodeLabelsAcceptedByRM()) {
+      successfullRegistrationMsg
+          .append(" and with following Node label(s) : {")
+          .append(StringUtils.join(",", nodeLabels)).append("}");
+    } else if (hasNodeLabelsProvider) {
+      //case where provider is set but RM did not accept the Node Labels
+      LOG.error(regNMResponse.getDiagnosticsMessage());
+    }
+
+    LOG.info(successfullRegistrationMsg);
-        int lastHeartBeatID = 0;
+        int lastHeartbeatID = 0;
+        Set<String> lastUpdatedNodeLabelsToRM = null;
+        if (hasNodeLabelsProvider) {
+          lastUpdatedNodeLabelsToRM = nodeLabelsProvider.getNodeLabels();
+          lastUpdatedNodeLabelsToRM =
+              (null == lastUpdatedNodeLabelsToRM) ? CommonNodeLabelsManager.EMPTY_STRING_SET
+                  : lastUpdatedNodeLabelsToRM;
+        }
-            NodeStatus nodeStatus = getNodeStatus(lastHeartBeatID);
-            
+            Set<String> nodeLabelsForHeartbeat = null;
+            NodeStatus nodeStatus = getNodeStatus(lastHeartbeatID);
+
+            if (hasNodeLabelsProvider) {
+              nodeLabelsForHeartbeat = nodeLabelsProvider.getNodeLabels();
+              //if the provider returns null then consider empty labels are set
+              nodeLabelsForHeartbeat =
+                  (nodeLabelsForHeartbeat == null) ? CommonNodeLabelsManager.EMPTY_STRING_SET
+                      : nodeLabelsForHeartbeat;
+              if (!areNodeLabelsUpdated(nodeLabelsForHeartbeat,
+                  lastUpdatedNodeLabelsToRM)) {
+                //if nodelabels have not changed then no need to send
+                nodeLabelsForHeartbeat = null;
+              }
+            }
+
-                  NodeStatusUpdaterImpl.this.context
-                    .getContainerTokenSecretManager().getCurrentKey(),
-                  NodeStatusUpdaterImpl.this.context.getNMTokenSecretManager()
-                    .getCurrentKey());
+                    NodeStatusUpdaterImpl.this.context
+                        .getContainerTokenSecretManager().getCurrentKey(),
+                    NodeStatusUpdaterImpl.this.context
+                        .getNMTokenSecretManager().getCurrentKey(),
+                    nodeLabelsForHeartbeat);
+            if (response.getAreNodeLabelsAcceptedByRM()) {
+              lastUpdatedNodeLabelsToRM = nodeLabelsForHeartbeat;
+              LOG.info("Node Labels {"
+                  + StringUtils.join(",", nodeLabelsForHeartbeat)
+                  + "} were Accepted by RM ");
+            } else if (nodeLabelsForHeartbeat != null) {
+              // case where NodeLabelsProvider is set and updated labels were
+              // sent to RM and RM rejected the labels
+              LOG.error(response.getDiagnosticsMessage());
+            }
+
-            lastHeartBeatID = response.getResponseId();
+            lastHeartbeatID = response.getResponseId();
+      /**
+       * Caller should take care of sending non null nodelabels for both
+       * arguments
+       * 
+       * @param nodeLabelsNew
+       * @param nodeLabelsOld
+       * @return if the New node labels are diff from the older one.
+       */
+      private boolean areNodeLabelsUpdated(Set<String> nodeLabelsNew,
+          Set<String> nodeLabelsOld) {
+        if (nodeLabelsNew.size() != nodeLabelsOld.size()
+            || !nodeLabelsOld.containsAll(nodeLabelsNew)) {
+          return true;
+        }
+        return false;
+      }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS8 INS44 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS17 INS43 INS42 INS21 INS21 INS60 INS25 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS7 INS7 INS74 INS59 INS42 INS8 INS43 INS59 INS32 INS32 INS8 INS25 INS32 INS22 INS42 INS22 INS36 INS43 INS43 INS42 INS33 INS21 INS21 INS42 INS42 INS14 INS32 INS42 MOV22 INS42 INS42 INS21 INS42 INS8 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS27 INS42 INS42 INS7 INS7 INS42 INS43 INS32 INS42 INS45 INS32 INS21 INS42 INS33 INS42 INS32 INS42 INS16 INS42 INS32 INS42 MOV22 INS32 INS42 INS45 INS32 INS31 INS42 INS42 INS36 INS40 INS42 UPD45 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS42 INS32 INS42 INS42 INS32 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS60 INS25 INS65 INS65 INS65 INS65 INS74 INS42 INS74 INS42 INS25 INS41 INS33 INS42 INS74 INS59 INS42 INS8 INS66 INS66 INS42 INS42 INS66 INS43 INS43 INS43 INS43 INS27 INS8 INS9 UPD42 INS43 INS43 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS27 INS38 INS41 INS42 INS42 INS7 INS7 INS32 INS32 INS32 INS9 INS42 INS32 INS42 INS16 INS60 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS40 INS42 INS74 INS59 INS42 INS8 INS32 INS8 INS25 INS27 INS43 INS43 INS42 INS33 INS21 INS21 INS25 INS42 INS42 INS21 INS21 INS27 INS8 UPD42 INS33 INS42 INS42 INS42 UPD42 INS7 INS7 INS38 INS8 INS42 INS7 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS16 INS32 INS21 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS36 INS40 INS42 INS42 INS42 INS42 INS7 INS45 INS32 INS45 INS42 INS42 INS32 INS27 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS33 DEL45 DEL45 DEL27 DEL32