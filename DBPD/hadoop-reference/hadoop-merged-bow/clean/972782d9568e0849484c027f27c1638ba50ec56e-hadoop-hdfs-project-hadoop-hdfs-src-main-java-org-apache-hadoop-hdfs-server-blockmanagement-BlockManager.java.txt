HDFS-9754. Avoid unnecessary getBlockCollection calls in BlockManager. Contributed by Jing Zhao.

-        addExpectedReplicasToPending(lastBlock, bc);
+        addExpectedReplicasToPending(lastBlock);
-  public void addExpectedReplicasToPending(BlockInfo blk, BlockCollection bc) {
-    if (!bc.isStriped()) {
-      addExpectedReplicasToPending(blk);
-    }
-  }
-
-  private void addExpectedReplicasToPending(BlockInfo lastBlock) {
-    DatanodeStorageInfo[] expectedStorages =
-        lastBlock.getUnderConstructionFeature().getExpectedStorageLocations();
-    if (expectedStorages.length - lastBlock.numNodes() > 0) {
-      ArrayList<DatanodeDescriptor> pendingNodes =
-          new ArrayList<DatanodeDescriptor>();
-      for (DatanodeStorageInfo storage : expectedStorages) {
-        DatanodeDescriptor dnd = storage.getDatanodeDescriptor();
-        if (lastBlock.findStorageInfo(dnd) == null) {
-          pendingNodes.add(dnd);
+  public void addExpectedReplicasToPending(BlockInfo blk) {
+    if (!blk.isStriped()) {
+      DatanodeStorageInfo[] expectedStorages =
+          blk.getUnderConstructionFeature().getExpectedStorageLocations();
+      if (expectedStorages.length - blk.numNodes() > 0) {
+        ArrayList<DatanodeDescriptor> pendingNodes = new ArrayList<>();
+        for (DatanodeStorageInfo storage : expectedStorages) {
+          DatanodeDescriptor dnd = storage.getDatanodeDescriptor();
+          if (blk.findStorageInfo(dnd) == null) {
+            pendingNodes.add(dnd);
+          }
+        pendingReplications.increment(blk,
+            pendingNodes.toArray(new DatanodeDescriptor[pendingNodes.size()]));
-      pendingReplications.increment(lastBlock,
-          pendingNodes.toArray(new DatanodeDescriptor[pendingNodes.size()]));
-        final ExtendedBlock eb = new ExtendedBlock(namesystem.getBlockPoolId(),
+        final ExtendedBlock eb = new ExtendedBlock(getBlockPoolId(),
-        final ExtendedBlock eb = new ExtendedBlock(namesystem.getBlockPoolId(),
+        final ExtendedBlock eb = new ExtendedBlock(getBlockPoolId(),
-    final ExtendedBlock eb = new ExtendedBlock(namesystem.getBlockPoolId(), blk);
+    final ExtendedBlock eb = new ExtendedBlock(getBlockPoolId(), blk);
-    // block should belong to a file
-    BlockCollection bc = getBlockCollection(block);
-    // abandoned block or block reopened for append
-    if (bc == null
-        || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) {
+    // skip abandoned block or block reopened for append
+    if (block.isDeleted() || !block.isCompleteOrCommitted()) {
+    final BlockCollection bc = getBlockCollection(block);
-    // block should belong to a file
-    BlockCollection bc = getBlockCollection(block);
-    // abandoned block or block reopened for append
-    if (bc == null
-        || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) {
+    // skip abandoned block or block reopened for append
+    if (block.isDeleted() || !block.isCompleteOrCommitted()) {
-      String src = getBlockCollection(block).getName();
-      ErasureCodingPolicy ecPolicy = null;
-      try {
-        ecPolicy = namesystem.getErasureCodingPolicyForPath(src);
-      } catch (IOException e) {
-        blockLog
-            .warn("Failed to get EC policy for the file {} ", src);
-      }
-      if (ecPolicy == null) {
-        blockLog.warn("No erasure coding policy found for the file {}. "
-            + "So cannot proceed for reconstruction", src);
-        // TODO: we may have to revisit later for what we can do better to
-        // handle this case.
-        return false;
-      }
+      final ErasureCodingPolicy ecPolicy =
+          ((BlockInfoStriped) block).getErasureCodingPolicy();
+      assert ecPolicy != null;
+
-          new ExtendedBlock(namesystem.getBlockPoolId(), block),
+          new ExtendedBlock(getBlockPoolId(), block),
-    BlockCollection bc = getBlockCollection(storedBlock);
-    assert bc != null : "Block must belong to a file";
-      addExpectedReplicasToPending(storedBlock, bc);
+      addExpectedReplicasToPending(storedBlock);
-    // if file is under construction, then done for now
-    if (bc.isUnderConstruction()) {
+    // if block is still under construction, then done for now
+    if (!storedBlock.isCompleteOrCommitted()) {
-      BlockCollection bc = getBlockCollection(storedBlock);
-      if (bc != null) {
+      if (!storedBlock.isDeleted()) {

MOV29 UPD83 MOV44 INS8 MOV60 INS25 INS25 INS38 MOV8 INS27 MOV8 INS83 MOV59 INS38 INS32 INS32 INS38 MOV42 MOV32 MOV32 INS38 INS6 INS32 INS38 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS32 INS83 MOV43 INS27 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV33 INS42 INS42 MOV43 MOV43 INS36 UPD42 UPD42 UPD42 UPD42 INS11 UPD74 MOV43 INS32 MOV43 INS43 INS42 MOV42 INS42 UPD42 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL36 DEL27 DEL25 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL27 DEL36 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL27 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL6 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27