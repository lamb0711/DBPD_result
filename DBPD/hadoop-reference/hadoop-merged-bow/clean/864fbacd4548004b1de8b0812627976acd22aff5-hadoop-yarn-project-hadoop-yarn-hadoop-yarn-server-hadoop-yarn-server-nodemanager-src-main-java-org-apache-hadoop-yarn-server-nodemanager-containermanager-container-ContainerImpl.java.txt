YARN-5292. NM Container lifecycle and state transitions to support for PAUSED container state. (Hitesh Sharma via asuresh)

+    .addTransition(ContainerState.NEW, ContainerState.DONE,
+            ContainerEventType.PAUSE_CONTAINER, new KillOnPauseTransition())
+    .addTransition(ContainerState.LOCALIZING, ContainerState.KILLING,
+        ContainerEventType.PAUSE_CONTAINER, new KillOnPauseTransition())
-        ContainerEventType.KILL_CONTAINER)
+        EnumSet.of(ContainerEventType.KILL_CONTAINER,
+            ContainerEventType.PAUSE_CONTAINER))
+    .addTransition(ContainerState.RUNNING, ContainerState.PAUSING,
+    ContainerEventType.PAUSE_CONTAINER, new PauseContainerTransition())
+
+    // From PAUSING State
+    .addTransition(ContainerState.PAUSING, ContainerState.KILLING,
+        ContainerEventType.KILL_CONTAINER, new KillTransition())
+    .addTransition(ContainerState.PAUSING, ContainerState.PAUSING,
+        ContainerEventType.UPDATE_DIAGNOSTICS_MSG,
+        UPDATE_DIAGNOSTICS_TRANSITION)
+    .addTransition(ContainerState.PAUSING, ContainerState.PAUSED,
+        ContainerEventType.CONTAINER_PAUSED, new PausedContainerTransition())
+    // In case something goes wrong then container will exit from the
+    // PAUSING state
+    .addTransition(ContainerState.PAUSING,
+        ContainerState.EXITED_WITH_SUCCESS,
+        ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS)
+    .addTransition(ContainerState.PAUSING,
+        ContainerState.EXITED_WITH_FAILURE,
+        ContainerEventType.CONTAINER_EXITED_WITH_FAILURE,
+        new ExitedWithFailureTransition(true))
+    .addTransition(ContainerState.PAUSING, ContainerState.EXITED_WITH_FAILURE,
+        ContainerEventType.CONTAINER_KILLED_ON_REQUEST,
+        new KilledExternallyTransition())
+
+    // From PAUSED State
+    .addTransition(ContainerState.PAUSED, ContainerState.KILLING,
+        ContainerEventType.KILL_CONTAINER, new KillTransition())
+    .addTransition(ContainerState.PAUSED, ContainerState.PAUSED,
+        ContainerEventType.UPDATE_DIAGNOSTICS_MSG,
+        UPDATE_DIAGNOSTICS_TRANSITION)
+    .addTransition(ContainerState.PAUSED, ContainerState.PAUSED,
+        ContainerEventType.PAUSE_CONTAINER)
+    .addTransition(ContainerState.PAUSED, ContainerState.RESUMING,
+        ContainerEventType.RESUME_CONTAINER, new ResumeContainerTransition())
+    // In case something goes wrong then container will exit from the
+    // PAUSED state
+    .addTransition(ContainerState.PAUSED,
+        ContainerState.EXITED_WITH_FAILURE,
+        ContainerEventType.CONTAINER_EXITED_WITH_FAILURE,
+        new ExitedWithFailureTransition(true))
+    .addTransition(ContainerState.PAUSED, ContainerState.EXITED_WITH_FAILURE,
+        ContainerEventType.CONTAINER_KILLED_ON_REQUEST,
+        new KilledExternallyTransition())
+    .addTransition(ContainerState.PAUSED,
+        ContainerState.EXITED_WITH_SUCCESS,
+        ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS,
+        new ExitedWithSuccessTransition(true))
+
+    // From RESUMING State
+    .addTransition(ContainerState.RESUMING, ContainerState.KILLING,
+        ContainerEventType.KILL_CONTAINER, new KillTransition())
+    .addTransition(ContainerState.RESUMING, ContainerState.RUNNING,
+        ContainerEventType.CONTAINER_RESUMED)
+    .addTransition(ContainerState.RESUMING, ContainerState.RESUMING,
+        ContainerEventType.UPDATE_DIAGNOSTICS_MSG,
+        UPDATE_DIAGNOSTICS_TRANSITION)
+    // In case something goes wrong then container will exit from the
+    // RESUMING state
+    .addTransition(ContainerState.RESUMING,
+        ContainerState.EXITED_WITH_FAILURE,
+        ContainerEventType.CONTAINER_EXITED_WITH_FAILURE,
+        new ExitedWithFailureTransition(true))
+    .addTransition(ContainerState.RESUMING,
+        ContainerState.EXITED_WITH_FAILURE,
+        ContainerEventType.CONTAINER_KILLED_ON_REQUEST,
+        new KilledExternallyTransition())
+    .addTransition(ContainerState.RESUMING,
+        ContainerState.EXITED_WITH_SUCCESS,
+        ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS,
+        new ExitedWithSuccessTransition(true))
+    .addTransition(ContainerState.REINITIALIZING, ContainerState.KILLING,
+        ContainerEventType.PAUSE_CONTAINER, new KillOnPauseTransition())
+    .addTransition(ContainerState.RELAUNCHING, ContainerState.KILLING,
+        ContainerEventType.PAUSE_CONTAINER, new KillOnPauseTransition())
-        ContainerEventType.KILL_CONTAINER)
+        EnumSet.of(ContainerEventType.KILL_CONTAINER,
+            ContainerEventType.PAUSE_CONTAINER))
-                   ContainerEventType.KILL_CONTAINER)
+        EnumSet.of(ContainerEventType.KILL_CONTAINER,
+            ContainerEventType.PAUSE_CONTAINER))
-        ContainerEventType.CONTAINER_LAUNCHED)
+        EnumSet.of(ContainerEventType.CONTAINER_LAUNCHED,
+            ContainerEventType.PAUSE_CONTAINER))
-            ContainerEventType.CONTAINER_EXITED_WITH_FAILURE))
+            ContainerEventType.CONTAINER_EXITED_WITH_FAILURE,
+            ContainerEventType.PAUSE_CONTAINER))
-        ContainerEventType.KILL_CONTAINER)
+        EnumSet.of(ContainerEventType.KILL_CONTAINER,
+            ContainerEventType.PAUSE_CONTAINER))
+    case PAUSED:
+    case RESUMING:
+    case PAUSING:
+   * Transitions upon receiving PAUSE_CONTAINER.
+   * - LOCALIZED -> KILLING.
+   * - REINITIALIZING -> KILLING.
+   */
+  @SuppressWarnings("unchecked") // dispatcher not typed
+  static class KillOnPauseTransition implements
+      SingleArcTransition<ContainerImpl, ContainerEvent> {
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void transition(ContainerImpl container, ContainerEvent event) {
+      // Kill the process/process-grp
+      container.setIsReInitializing(false);
+      container.dispatcher.getEventHandler().handle(
+          new ContainersLauncherEvent(container,
+              ContainersLauncherEventType.CLEANUP_CONTAINER));
+    }
+  }
+
+  /**
+  /**
+   * Transitions upon receiving PAUSE_CONTAINER.
+   * - RUNNING -> PAUSED
+   */
+  @SuppressWarnings("unchecked") // dispatcher not typed
+  static class PauseContainerTransition implements
+      SingleArcTransition<ContainerImpl, ContainerEvent> {
+    @Override
+    public void transition(ContainerImpl container, ContainerEvent event) {
+      // Pause the process/process-grp if it is supported by the container
+      container.dispatcher.getEventHandler().handle(
+          new ContainersLauncherEvent(container,
+              ContainersLauncherEventType.PAUSE_CONTAINER));
+      ContainerPauseEvent pauseEvent = (ContainerPauseEvent) event;
+      container.addDiagnostics(pauseEvent.getDiagnostic(), "\n");
+    }
+  }
+
+  /**
+   * Transitions upon receiving PAUSED_CONTAINER.
+   */
+  @SuppressWarnings("unchecked") // dispatcher not typed
+  static class PausedContainerTransition implements
+      SingleArcTransition<ContainerImpl, ContainerEvent> {
+    @Override
+    public void transition(ContainerImpl container, ContainerEvent event) {
+      // Container was PAUSED so tell the scheduler
+      container.dispatcher.getEventHandler().handle(
+          new ContainerSchedulerEvent(container,
+              ContainerSchedulerEventType.CONTAINER_PAUSED));
+    }
+  }
+
+  /**
+   * Transitions upon receiving RESUME_CONTAINER.
+   * - PAUSED -> RUNNING
+   */
+  @SuppressWarnings("unchecked") // dispatcher not typed
+  static class ResumeContainerTransition implements
+      SingleArcTransition<ContainerImpl, ContainerEvent> {
+    @Override
+    public void transition(ContainerImpl container, ContainerEvent event) {
+      // Pause the process/process-grp if it is supported by the container
+      container.dispatcher.getEventHandler().handle(
+          new ContainersLauncherEvent(container,
+              ContainersLauncherEventType.RESUME_CONTAINER));
+      ContainerResumeEvent resumeEvent = (ContainerResumeEvent) event;
+      container.addDiagnostics(resumeEvent.getDiagnostic(), "\n");
+    }
+  }
+

INS83 INS42 INS55 INS55 INS55 INS55 INS29 INS79 INS83 INS42 INS74 INS31 INS29 INS79 INS83 INS42 INS74 INS31 INS29 INS79 INS83 INS42 INS74 INS31 INS29 INS79 INS83 INS42 INS74 INS31 INS32 MOV49 INS65 INS42 INS45 INS43 INS43 INS43 INS79 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS42 INS45 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS42 INS45 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS42 INS45 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS32 INS42 INS49 INS49 INS49 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS60 INS21 INS66 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS60 INS21 INS32 INS42 INS40 INS40 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS9 INS32 INS42 INS14 INS32 INS42 INS14 INS42 INS42 INS11 INS42 INS42 INS32 INS45 INS32 INS42 INS14 INS32 INS42 INS14 INS42 INS42 INS11 INS42 INS42 INS32 INS45 INS32 INS42 INS40 INS40 INS40 INS40 INS42 INS43 INS42 INS40 INS40 INS42 INS43 INS42 INS40 INS43 INS42 INS42 INS42 INS40 INS42 INS43 INS42 INS40 INS40 INS42 INS43 INS42 INS40 INS43 INS42 INS42 INS42 INS32 INS42 INS40 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS40 INS32 INS42 INS42 INS40 INS40 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS32 INS42 INS40 INS40 INS40 MOV14 INS32 INS42 INS40 INS40 INS32 INS32 INS42 INS40 INS40 INS40 MOV14 INS42 INS42 INS40 INS40 INS32 INS42 INS40 INS40 INS40 MOV14 INS32 INS42 INS40 INS40 INS40 MOV14 INS32 INS42 INS40 INS40 INS40 INS32 INS42 INS40 INS40 INS40 INS42 INS32 INS42 INS40 INS40 INS40 INS32 INS42 INS40 INS40 INS40 MOV14 INS32 INS42 INS40 INS40 INS40 MOV14 INS32 INS42 INS40 INS40 INS32 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS40 INS40 INS32 INS42 INS40 INS40 INS40 MOV14 INS32 INS42 INS40 INS40 INS32 MOV32 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS40 INS40 UPD42 INS40 INS40 INS40 MOV14 UPD40 UPD40 INS40 INS14 UPD40 UPD40 UPD40 INS14 INS43 UPD40 UPD40 UPD40 INS42 INS43 INS42 UPD40 UPD40 UPD40 INS14 INS42 UPD40 UPD40 UPD40 MOV40 MOV14 INS43 INS9 UPD40 UPD40 UPD40 MOV14 INS42 UPD40 UPD40 UPD40 INS14 UPD40 UPD40 INS14 INS43 UPD40 UPD40 UPD40 INS42 INS43 INS42 UPD40 UPD40 UPD40 MOV14 INS42 UPD40 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 INS14 UPD40 UPD40 UPD40 INS14 INS43 INS9 UPD40 UPD40 UPD40 INS14 INS43 INS9 INS42 UPD40 UPD40 UPD40 INS14 INS43 INS9 INS42 UPD40 UPD40 UPD40 INS14 INS43 INS42 UPD40 UPD40 UPD40 INS42 INS43 INS9 INS42 UPD40 UPD40 UPD40 INS42 UPD40 UPD40 UPD40 INS14 UPD40 UPD40 MOV14 INS43 UPD40 UPD40 UPD40 INS14 INS42 UPD40 UPD40 UPD40 MOV14 INS43 UPD40 UPD40 UPD40 INS42 UPD40 UPD40 UPD40 UPD43 UPD40 UPD40 UPD40 INS42 UPD42 UPD40 UPD40 UPD40 INS14 UPD40 UPD40 INS14 INS43 UPD40 UPD40 UPD40 MOV14 INS43 INS42 UPD40 UPD40 UPD40 INS42 UPD40 UPD40 UPD40 INS14 UPD40 UPD40 UPD40 INS42 INS43 UPD40 UPD40 UPD40 MOV14 INS42 UPD40 UPD40 UPD40 INS14 INS43 INS42 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 MOV14 UPD40 UPD40 UPD40 UPD40 INS32 UPD40 INS42 INS42 INS42 UPD40 MOV40 INS40 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 INS14 INS43 INS42 INS32 INS42 MOV32 MOV42 INS40 INS40 INS40 INS14 INS43 INS42 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32 DEL42