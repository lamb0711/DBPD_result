HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.

+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants;
-  public static final BlockInfoContiguous[] EMPTY_ARRAY = {};
-  protected BlockInfoContiguous(BlockInfoContiguous from) {
+  protected BlockInfoContiguous(BlockInfo from) {
-  /**
-   * Ensure that there is enough  space to include num more triplets.
-   * @return first free triplet index.
-   */
-  private int ensureCapacity(int num) {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    int last = numNodes();
-    if (triplets.length >= (last+num)*3) {
-      return last;
-    }
-    /* Not enough space left. Create a new array. Should normally
-     * happen only when replication is manually increased by the user. */
-    Object[] old = triplets;
-    triplets = new Object[(last+num)*3];
-    System.arraycopy(old, 0, triplets, 0, last * 3);
-    return last;
-  }
-
-    // find the last null node
-    int lastNode = ensureCapacity(1);
-    setStorageInfo(lastNode, storage);
-    setNext(lastNode, null);
-    setPrevious(lastNode, null);
-    return true;
+    return ContiguousBlockStorageOp.addStorage(this, storage);
-    int dnIndex = findStorageInfo(storage);
-    if (dnIndex < 0) { // the node is not found
-      return false;
-    }
-    assert getPrevious(dnIndex) == null && getNext(dnIndex) == null :
-        "Block is still in the list and must be removed first.";
-    // find the last not null node
-    int lastNode = numNodes()-1;
-    // replace current node triplet by the lastNode one
-    setStorageInfo(dnIndex, getStorageInfo(lastNode));
-    setNext(dnIndex, getNext(lastNode));
-    setPrevious(dnIndex, getPrevious(lastNode));
-    // set the last triplet to null
-    setStorageInfo(lastNode, null);
-    setNext(lastNode, null);
-    setPrevious(lastNode, null);
-    return true;
+    return ContiguousBlockStorageOp.removeStorage(this, storage);
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert triplets.length % 3 == 0 : "Malformed BlockInfo";
-
-    for (int idx = getCapacity()-1; idx >= 0; idx--) {
-      if (getDatanode(idx) != null) {
-        return idx + 1;
-      }
-    }
-    return 0;
+    return ContiguousBlockStorageOp.numNodes(this);
-    assert newBlock instanceof BlockInfoContiguous;
-    for (int i = this.numNodes() - 1; i >= 0; i--) {
-      final DatanodeStorageInfo storage = this.getStorageInfo(i);
-      final boolean removed = storage.removeBlock(this);
-      assert removed : "currentBlock not found.";
+    ContiguousBlockStorageOp.replaceBlock(this, newBlock);
+  }
-      final DatanodeStorageInfo.AddBlockResult result = storage.addBlock(
-          newBlock);
-      assert result == DatanodeStorageInfo.AddBlockResult.ADDED :
-          "newBlock already exists.";
-    }
+  @Override
+  BlockInfoUnderConstruction convertCompleteBlockToUC(
+      HdfsServerConstants.BlockUCState s, DatanodeStorageInfo[] targets) {
+    BlockInfoUnderConstructionContiguous ucBlock =
+        new BlockInfoUnderConstructionContiguous(this,
+            getBlockCollection().getPreferredBlockReplication(), s, targets);
+    ucBlock.setBlockCollection(getBlockCollection());
+    return ucBlock;

INS26 INS40 INS31 INS31 INS31 INS78 MOV39 MOV42 MOV44 MOV8 MOV78 MOV44 MOV78 INS8 MOV78 MOV39 MOV42 MOV44 INS8 MOV78 INS43 INS42 INS44 INS44 INS8 UPD43 INS42 INS41 INS41 INS41 INS21 UPD42 MOV42 INS43 INS42 INS5 INS42 INS60 INS21 INS41 UPD42 INS32 INS32 INS32 INS32 INS40 MOV43 INS85 INS43 INS59 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS52 MOV42 UPD42 MOV42 UPD42 MOV42 INS52 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS42 INS52 INS42 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS52 INS32 INS42 INS42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL59 DEL23 DEL39 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL9 DEL41 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL3 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL42 DEL34 DEL27 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL31 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL45 DEL6 DEL39 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL60 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL9 DEL41 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL40 DEL34 DEL27 DEL34 DEL27 DEL45 DEL6 DEL39 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL32 DEL33 DEL27 DEL42 DEL34 DEL27 DEL41 DEL8 DEL25 DEL8 DEL24 DEL34 DEL41 DEL8 DEL42 DEL43 DEL62 DEL6 DEL39 DEL42 DEL52 DEL42 DEL32 DEL34 DEL27 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL83 DEL42 DEL52 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL39 DEL42 DEL52 DEL32 DEL59 DEL60 DEL42 DEL45 DEL6 DEL83 DEL40 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL45 DEL6 DEL8 DEL24 DEL8 DEL31