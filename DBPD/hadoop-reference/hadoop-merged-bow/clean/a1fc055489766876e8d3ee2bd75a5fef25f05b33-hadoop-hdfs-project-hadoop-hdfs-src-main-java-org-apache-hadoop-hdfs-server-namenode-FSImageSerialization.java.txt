HDFS-1623. High Availability Framework for HDFS NN. Contributed by Todd Lipcon, Aaron T. Myers, Eli Collins, Uma Maheswara Rao G, Bikas Saha, Suresh Srinivas, Jitendra Nath Pandey, Hari Mankude, Brandon Li, Sanjay Radia, Mingjie Lai, and Gregory Chanan


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296534 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.io.WritableUtils;
+
+  /**
+   * Write an array of blocks as compactly as possible. This uses
+   * delta-encoding for the generation stamp and size, following
+   * the principle that genstamp increases relatively slowly,
+   * and size is equal for all but the last block of a file.
+   */
+  public static void writeCompactBlockArray(
+      Block[] blocks, DataOutputStream out) throws IOException {
+    WritableUtils.writeVInt(out, blocks.length);
+    Block prev = null;
+    for (Block b : blocks) {
+      long szDelta = b.getNumBytes() -
+          (prev != null ? prev.getNumBytes() : 0);
+      long gsDelta = b.getGenerationStamp() -
+          (prev != null ? prev.getGenerationStamp() : 0);
+      out.writeLong(b.getBlockId()); // blockid is random
+      WritableUtils.writeVLong(out, szDelta);
+      WritableUtils.writeVLong(out, gsDelta);
+      prev = b;
+    }
+  }
+  
+  public static Block[] readCompactBlockArray(
+      DataInputStream in, int logVersion) throws IOException {
+    int num = WritableUtils.readVInt(in);
+    if (num < 0) {
+      throw new IOException("Invalid block array length: " + num);
+    }
+    Block prev = null;
+    Block[] ret = new Block[num];
+    for (int i = 0; i < num; i++) {
+      long id = in.readLong();
+      long sz = WritableUtils.readVLong(in) +
+          ((prev != null) ? prev.getNumBytes() : 0);
+      long gs = WritableUtils.readVLong(in) +
+          ((prev != null) ? prev.getGenerationStamp() : 0);
+      ret[i] = new Block(id, sz, gs);
+      prev = ret[i];
+    }
+    return ret;
+  }
+

INS26 INS40 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS65 INS5 INS42 INS43 INS42 INS42 INS21 INS60 INS70 INS43 INS85 INS43 INS42 INS39 INS42 INS42 INS60 INS25 INS60 INS60 INS24 INS41 INS66 INS66 INS66 INS66 INS43 INS85 INS42 INS32 INS43 INS59 INS44 INS42 INS8 INS42 INS42 INS39 INS59 INS27 INS8 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS33 INS43 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS42 INS32 INS42 INS34 INS53 INS42 INS42 INS33 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS60 INS21 INS21 INS42 INS39 INS59 INS39 INS59 INS32 INS32 INS32 INS7 INS42 INS42 INS42 INS14 INS42 INS5 INS42 INS42 INS34 INS39 INS59 INS39 INS59 INS39 INS59 INS7 INS7 INS42 INS27 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS43 INS85 INS42 INS32 INS42 INS27 INS42 INS27 INS2 INS14 INS42 INS2 INS32 INS36 INS32 INS36 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS36 INS32 INS36 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS16 INS42 INS27 INS32 INS34 INS27 INS32 INS34 INS36 INS32 INS34 INS36 INS32 INS34 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS33 INS42 INS33