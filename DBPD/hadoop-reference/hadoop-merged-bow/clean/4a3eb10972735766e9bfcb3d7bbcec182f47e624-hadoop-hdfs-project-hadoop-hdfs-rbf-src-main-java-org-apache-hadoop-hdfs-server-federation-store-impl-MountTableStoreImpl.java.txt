HDFS-15051. RBF: Impose directory level permissions for Mount entries. Contributed by Xiaoqiao He.

+import org.apache.hadoop.fs.Path;
+  /**
+   * Whether a mount table entry can be accessed by the current context.
+   *
+   * @param src mount entry being accessed
+   * @param action type of action being performed on the mount entry
+   * @throws AccessControlException if mount table cannot be accessed
+   */
+  private void checkMountTableEntryPermission(String src, FsAction action)
+      throws IOException {
+    final MountTable partial = MountTable.newInstance();
+    partial.setSourcePath(src);
+    final Query<MountTable> query = new Query<>(partial);
+    final MountTable entry = getDriver().get(getRecordClass(), query);
+    if (entry != null) {
+      RouterPermissionChecker pc = RouterAdminServer.getPermissionChecker();
+      if (pc != null) {
+        pc.checkPermission(entry, action);
+      }
+    }
+  }
+
+  /**
+   * Check parent path permission recursively. It needs WRITE permission
+   * of the nearest parent entry and other EXECUTE permission.
+   * @param src mount entry being checked
+   * @throws AccessControlException if mount table cannot be accessed
+   */
+  private void checkMountTablePermission(final String src) throws IOException {
+    String parent = src.substring(0, src.lastIndexOf(Path.SEPARATOR));
+    checkMountTableEntryPermission(parent, FsAction.WRITE);
+    while (!parent.isEmpty()) {
+      parent = parent.substring(0, parent.lastIndexOf(Path.SEPARATOR));
+      checkMountTableEntryPermission(parent, FsAction.EXECUTE);
+    }
+  }
+
+  /**
+   * When add mount table entry, it needs WRITE permission of the nearest parent
+   * entry if exist, and EXECUTE permission of other ancestor entries.
+   * @param request add mount table entry request
+   * @return add mount table entry response
+   * @throws IOException if mount table cannot be accessed
+   */
-      RouterPermissionChecker pc = RouterAdminServer.getPermissionChecker();
-      if (pc != null) {
-        pc.checkPermission(mountTable, FsAction.WRITE);
-      }
+      final String src = mountTable.getSourcePath();
+      checkMountTablePermission(src);
+      boolean status = getDriver().put(mountTable, false, true);
+      AddMountTableEntryResponse response =
+          AddMountTableEntryResponse.newInstance();
+      response.setStatus(status);
+      updateCacheAllRouters();
+      return response;
+    } else {
+      AddMountTableEntryResponse response =
+          AddMountTableEntryResponse.newInstance();
+      response.setStatus(false);
+      return response;
-
-    boolean status = getDriver().put(mountTable, false, true);
-    AddMountTableEntryResponse response =
-        AddMountTableEntryResponse.newInstance();
-    response.setStatus(status);
-    updateCacheAllRouters();
-    return response;
-      RouterPermissionChecker pc = RouterAdminServer.getPermissionChecker();
-      if (pc != null) {
-        pc.checkPermission(mountTable, FsAction.WRITE);
-      }
+      final String srcPath = mountTable.getSourcePath();
+      checkMountTableEntryPermission(srcPath, FsAction.WRITE);
+      boolean status = getDriver().put(mountTable, true, true);
+      UpdateMountTableEntryResponse response =
+          UpdateMountTableEntryResponse.newInstance();
+      response.setStatus(status);
+      updateCacheAllRouters();
+      return response;
+    } else {
+      UpdateMountTableEntryResponse response =
+          UpdateMountTableEntryResponse.newInstance();
+      response.setStatus(false);
+      return response;
-
-    boolean status = getDriver().put(mountTable, true, true);
-    UpdateMountTableEntryResponse response =
-        UpdateMountTableEntryResponse.newInstance();
-    response.setStatus(status);
-    updateCacheAllRouters();
-    return response;

INS26 INS40 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS60 MOV25 INS65 INS65 INS65 INS83 INS43 INS42 INS42 INS60 INS21 INS61 INS65 INS65 INS65 INS65 INS25 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS83 INS43 INS59 INS32 INS83 INS74 INS59 INS83 INS43 INS59 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS59 INS32 INS38 INS8 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS27 INS8 MOV8 MOV27 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS42 INS40 INS32 INS21 INS21 INS42 INS33 MOV21 MOV60 INS21 MOV60 MOV60 MOV21 MOV21 MOV41 INS60 INS41 MOV21 INS60 INS21 MOV60 MOV60 MOV21 MOV21 MOV41 INS60 INS21 INS41 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS7 INS32 INS83 UPD43 INS32 INS43 INS59 INS42 INS83 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS9 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS34 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS40 DEL40 DEL42 DEL40 DEL42 DEL33 DEL27 DEL25 DEL8