HDFS-4461.  DirectoryScanner: volume prefix takes up memory for every block that is scanned (Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494401 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+   * 
+   * Because millions of these structures may be created, we try to save
+   * memory here.  So instead of storing full paths, we store path suffixes.
+   * The block file, if it exists, will have a path like this:
+   * <volume_base_path>/<block_path>
+   * So we don't need to store the volume path, since we already know what the
+   * volume is.
+   * 
+   * The metadata file, if it exists, will have a path like this:
+   * <volume_base_path>/<block_path>_<genstamp>.meta
+   * So if we have a block file, there isn't any need to store the block path
+   * again.
+   * 
+   * The accessor functions take care of these manipulations.
-    private final File metaFile;
-    private final File blockFile;
+    
+    /**
+     * The block file path, relative to the volume's base directory.
+     * If there was no block file found, this may be null. If 'vol'
+     * is null, then this is the full path of the block file.
+     */
+    private final String blockSuffix;
+    
+    /**
+     * The suffix of the meta file path relative to the block file.
+     * If blockSuffix is null, then this will be the entire path relative
+     * to the volume base directory, or an absolute path if vol is also
+     * null.
+     */
+    private final String metaSuffix;
+
+    private final static Pattern CONDENSED_PATH_REGEX =
+        Pattern.compile("(?<!^)(\\\\|/){2,}");
+    
+    private final static String QUOTED_FILE_SEPARATOR = 
+        Matcher.quoteReplacement(File.separator);
+    
+    /**
+     * Get the most condensed version of the path.
+     *
+     * For example, the condensed version of /foo//bar is /foo/bar
+     * Unlike {@link File#getCanonicalPath()}, this will never perform I/O
+     * on the filesystem.
+     */
+    private static String getCondensedPath(String path) {
+      return CONDENSED_PATH_REGEX.matcher(path).
+          replaceAll(QUOTED_FILE_SEPARATOR);
+    }
+
+    /**
+     * Get a path suffix.
+     *
+     * @param f            The file to get the suffix for.
+     * @param prefix       The prefix we're stripping off.
+     *
+     * @return             A suffix such that prefix + suffix = path to f
+     */
+    private static String getSuffix(File f, String prefix) {
+      String fullPath = getCondensedPath(f.getAbsolutePath());
+      if (fullPath.startsWith(prefix)) {
+        return fullPath.substring(prefix.length());
+      }
+      throw new RuntimeException(prefix + " is not a prefix of " + fullPath);
+    }
+
-      this.metaFile = metaFile;
-      this.blockFile = blockFile;
+      String condensedVolPath = vol == null ? null :
+        getCondensedPath(vol.getBasePath());
+      this.blockSuffix = blockFile == null ? null :
+        getSuffix(blockFile, condensedVolPath);
+      if (metaFile == null) {
+        this.metaSuffix = null;
+      } else if (blockFile == null) {
+        this.metaSuffix = getSuffix(metaFile, condensedVolPath);
+      } else {
+        this.metaSuffix = getSuffix(metaFile,
+            condensedVolPath + blockSuffix);
+      }
-    File getMetaFile() {
-      return metaFile;
+    File getBlockFile() {
+      return (blockSuffix == null) ? null :
+        new File(volume.getBasePath(), blockSuffix);
-    File getBlockFile() {
-      return blockFile;
+    File getMetaFile() {
+      if (metaSuffix == null) {
+        return null;
+      } else if (blockSuffix == null) {
+        return new File(volume.getBasePath(), metaSuffix);
+      } else {
+        return new File(volume.getBasePath(), blockSuffix + metaSuffix);
+      }
-      return metaFile != null ? Block.getGenerationStamp(metaFile.getName()) :
-        GenerationStamp.GRANDFATHER_GENERATION_STAMP;
+      return metaSuffix != null ? Block.getGenerationStamp(
+          getMetaFile().getName()) : 
+            GenerationStamp.GRANDFATHER_GENERATION_STAMP;

INS26 INS26 INS40 INS40 MOV23 INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS43 INS83 INS43 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 UPD42 MOV43 UPD42 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS42 INS42 INS65 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS65 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS42 MOV43 INS42 INS43 INS42 INS60 INS25 INS53 INS60 INS21 INS25 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS45 INS42 INS42 INS40 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS32 INS8 INS14 INS43 INS59 INS7 INS27 INS8 INS25 INS16 INS27 INS8 INS25 INS68 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS43 INS27 INS42 INS42 INS16 INS22 INS16 INS42 INS33 INS21 INS27 INS8 INS8 INS36 INS33 INS14 INS42 INS33 INS41 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS27 INS33 INS32 INS52 INS42 INS27 INS33 INS32 INS7 INS42 INS33 MOV21 MOV21 INS27 MOV43 INS32 INS42 INS33 INS42 INS33 MOV41 INS41 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS22 INS33 INS42 INS33 INS42 INS42 INS14 INS14 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS32 INS43 INS32 INS42 INS43 INS32 INS27 UPD42 MOV42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL8