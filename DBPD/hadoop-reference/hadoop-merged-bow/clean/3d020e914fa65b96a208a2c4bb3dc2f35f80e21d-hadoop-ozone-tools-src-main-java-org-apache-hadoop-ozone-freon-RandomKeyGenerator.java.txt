HDDS-1532. Improve the concurrent testing framework of Freon. (#957)


-import static java.lang.Math.min;
+  private static final int CHECK_INTERVAL_MILLIS = 5000;
+
-  private ExecutorService processor;
+  private ExecutorService executor;
-    threadPoolSize =
-        min(numOfVolumes, numOfThreads);
-    processor = Executors.newFixedThreadPool(threadPoolSize);
+    threadPoolSize = numOfThreads;
+    executor = Executors.newFixedThreadPool(threadPoolSize);
-      String volume = "vol-" + i + "-" +
-          RandomStringUtils.randomNumeric(5);
-      processor.submit(new OfflineProcessor(volume));
+      String volumeName = "vol-" + i + "-" + RandomStringUtils.randomNumeric(5);
+      executor.submit(new VolumeProcessor(volumeName));
-    processor.shutdown();
-    processor.awaitTermination(Integer.MAX_VALUE, TimeUnit.MILLISECONDS);
+    // wait until all keys are added or exception occurred.
+    while ((numberOfKeysAdded.get() != numOfVolumes * numOfBuckets * numOfKeys)
+           && exception == null) {
+      try {
+        Thread.sleep(CHECK_INTERVAL_MILLIS);
+      } catch (InterruptedException e) {
+        throw e;
+      }
+    }
+    executor.shutdown();
+    executor.awaitTermination(Integer.MAX_VALUE, TimeUnit.MILLISECONDS);
-  private class OfflineProcessor implements Runnable {
-
-    private int totalBuckets;
-    private int totalKeys;
+  private class VolumeProcessor implements Runnable {
-    OfflineProcessor(String volumeName) {
-      this.totalBuckets = numOfBuckets;
-      this.totalKeys = numOfKeys;
+    VolumeProcessor(String volumeName) {
-      Long threadKeyWriteTime = 0L;
-      for (int j = 0; j < totalBuckets; j++) {
-        String bucketName = "bucket-" + j + "-" +
+      for (int i = 0; i < numOfBuckets; i++) {
+        String bucketName = "bucket-" + i + "-" +
-        try {
-          LOG.trace("Creating bucket: {} in volume: {}",
-              bucketName, volume.getName());
-          start = System.nanoTime();
-          try (Scope scope = GlobalTracer.get().buildSpan("createBucket")
-              .startActive(true)) {
-            volume.createBucket(bucketName);
-            long bucketCreationDuration = System.nanoTime() - start;
-            histograms.get(FreonOps.BUCKET_CREATE.ordinal())
-                .update(bucketCreationDuration);
-            bucketCreationTime.getAndAdd(bucketCreationDuration);
-            numberOfBucketsCreated.getAndIncrement();
-          }
-          OzoneBucket bucket = volume.getBucket(bucketName);
-          for (int k = 0; k < totalKeys; k++) {
-            String key = "key-" + k + "-" +
-                RandomStringUtils.randomNumeric(5);
-            byte[] randomValue =
-                DFSUtil.string2Bytes(UUID.randomUUID().toString());
-            try {
-              LOG.trace("Adding key: {} in bucket: {} of volume: {}",
-                  key, bucket, volume);
-              long keyCreateStart = System.nanoTime();
-              try (Scope scope = GlobalTracer.get().buildSpan("createKey")
-                  .startActive(true)) {
-                OzoneOutputStream os =
-                    bucket
-                        .createKey(key, keySize, type, factor, new HashMap<>());
-                long keyCreationDuration = System.nanoTime() - keyCreateStart;
-                histograms.get(FreonOps.KEY_CREATE.ordinal())
-                    .update(keyCreationDuration);
-                keyCreationTime.getAndAdd(keyCreationDuration);
-                long keyWriteStart = System.nanoTime();
-                try (Scope writeScope = GlobalTracer.get()
-                    .buildSpan("writeKeyData")
-                    .startActive(true)) {
-                  for (long nrRemaining = keySize - randomValue.length;
-                        nrRemaining > 0; nrRemaining -= bufferSize) {
-                    int curSize = (int)Math.min(bufferSize, nrRemaining);
-                    os.write(keyValueBuffer, 0, curSize);
-                  }
-                  os.write(randomValue);
-                  os.close();
-                }
-
-                long keyWriteDuration = System.nanoTime() - keyWriteStart;
-
-                threadKeyWriteTime += keyWriteDuration;
-                histograms.get(FreonOps.KEY_WRITE.ordinal())
-                    .update(keyWriteDuration);
-                totalBytesWritten.getAndAdd(keySize);
-                numberOfKeysAdded.getAndIncrement();
-              }
-              if (validateWrites) {
-                MessageDigest tmpMD = (MessageDigest)commonInitialMD.clone();
-                tmpMD.update(randomValue);
-                boolean validate = validationQueue.offer(
-                    new KeyValidate(bucket, key, tmpMD.digest()));
-                if (validate) {
-                  LOG.trace("Key {}, is queued for validation.", key);
-                }
-              }
-            } catch (Exception e) {
-              exception = e;
-              LOG.error("Exception while adding key: {} in bucket: {}" +
-                  " of volume: {}.", key, bucket, volume, e);
-            }
-          }
-        } catch (Exception e) {
-          exception = e;
-          LOG.error("Exception while creating bucket: {}" +
-              " in volume: {}.", bucketName, volume, e);
-        }
+        BucketProcessor bp = new BucketProcessor(volume, bucketName);
+        executor.submit(bp);
+    }
+  }
-      keyWriteTime.getAndAdd(threadKeyWriteTime);
+  private class BucketProcessor implements Runnable {
+    private OzoneVolume volume;
+    private String bucketName;
+
+    BucketProcessor(OzoneVolume volume, String bucketName) {
+      this.volume = volume;
+      this.bucketName = bucketName;
+    @Override
+    @SuppressFBWarnings("REC_CATCH_EXCEPTION")
+    public void run() {
+      LOG.trace("Creating bucket: {} in volume: {}",
+              bucketName, volume.getName());
+      long start = System.nanoTime();
+      OzoneBucket bucket;
+      try (Scope scope = GlobalTracer.get().buildSpan("createBucket")
+          .startActive(true)) {
+        volume.createBucket(bucketName);
+        long bucketCreationDuration = System.nanoTime() - start;
+        histograms.get(FreonOps.BUCKET_CREATE.ordinal())
+                  .update(bucketCreationDuration);
+        bucketCreationTime.getAndAdd(bucketCreationDuration);
+        numberOfBucketsCreated.getAndIncrement();
+
+        bucket = volume.getBucket(bucketName);
+      } catch (IOException e) {
+        exception = e;
+        LOG.error("Could not create bucket ", e);
+        return;
+      }
+
+      for (int i = 0; i < numOfKeys; i++) {
+        String keyName = "key-" + i + "-" + RandomStringUtils.randomNumeric(5);
+        KeyProcessor kp = new KeyProcessor(bucket, keyName);
+        executor.submit(kp);
+      }
+    }
+  }
+
+  private class KeyProcessor implements Runnable {
+    private OzoneBucket bucket;
+    private String keyName;
+
+    KeyProcessor(OzoneBucket bucket, String keyName) {
+      this.bucket = bucket;
+      this.keyName = keyName;
+    }
+
+    @Override
+    @SuppressFBWarnings("REC_CATCH_EXCEPTION")
+    public void run() {
+      String bucketName = bucket.getName();
+      String volumeName = bucket.getVolumeName();
+      LOG.trace("Adding key: {} in bucket: {} of volume: {}",
+          keyName, bucketName, volumeName);
+      byte[] randomValue = DFSUtil.string2Bytes(UUID.randomUUID().toString());
+      try {
+        long keyCreateStart = System.nanoTime();
+        try (Scope scope = GlobalTracer.get().buildSpan("createKey")
+            .startActive(true)) {
+          OzoneOutputStream os = bucket.createKey(keyName, keySize, type,
+                                                  factor, new HashMap<>());
+          long keyCreationDuration = System.nanoTime() - keyCreateStart;
+          histograms.get(FreonOps.KEY_CREATE.ordinal())
+                    .update(keyCreationDuration);
+          keyCreationTime.getAndAdd(keyCreationDuration);
+
+          long keyWriteStart = System.nanoTime();
+          try (Scope writeScope = GlobalTracer.get().buildSpan("writeKeyData")
+              .startActive(true)) {
+            for (long nrRemaining = keySize - randomValue.length;
+                 nrRemaining > 0; nrRemaining -= bufferSize) {
+              int curSize = (int)Math.min(bufferSize, nrRemaining);
+              os.write(keyValueBuffer, 0, curSize);
+            }
+            os.write(randomValue);
+            os.close();
+
+            long keyWriteDuration = System.nanoTime() - keyWriteStart;
+            histograms.get(FreonOps.KEY_WRITE.ordinal())
+                      .update(keyWriteDuration);
+            keyWriteTime.getAndAdd(keyWriteDuration);
+            totalBytesWritten.getAndAdd(keySize);
+            numberOfKeysAdded.getAndIncrement();
+          }
+        }
+
+        if (validateWrites) {
+          MessageDigest tmpMD = (MessageDigest)commonInitialMD.clone();
+          tmpMD.update(randomValue);
+          boolean validate = validationQueue.offer(
+                    new KeyValidate(bucket, keyName, tmpMD.digest()));
+          if (validate) {
+            LOG.trace("Key {}, is queued for validation.", keyName);
+          }
+        }
+      } catch (Exception e) {
+        exception = e;
+        LOG.error("Exception while adding key: {} in bucket: {}" +
+            " of volume: {}.", keyName, bucketName, volumeName, e);
+      }
+    }
+
+  @VisibleForTesting
+  public int getThreadPoolSize() {
+    return threadPoolSize;
+  }

INS23 INS55 INS55 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS42 INS43 MOV23 MOV31 INS31 INS83 INS42 INS43 INS23 INS23 INS31 INS31 UPD42 INS31 INS78 INS83 INS39 INS42 INS8 INS42 INS34 UPD42 INS61 INS42 UPD42 INS78 INS79 INS83 INS39 INS42 INS8 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS42 INS44 INS44 INS8 INS78 INS79 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS44 INS44 INS8 MOV8 INS42 INS41 INS27 INS8 INS42 INS42 INS45 MOV21 MOV60 MOV60 MOV54 INS24 INS42 INS42 INS42 INS42 INS43 INS42 MOV43 INS42 INS21 INS21 INS42 INS42 INS45 MOV21 INS60 INS60 MOV54 INS24 INS42 UPD42 INS42 UPD42 INS43 INS42 INS43 INS42 INS21 INS21 INS60 INS60 INS21 INS42 INS42 UPD42 INS36 INS27 INS54 UPD42 UPD42 INS58 INS27 INS37 INS8 INS42 INS7 INS7 INS39 INS59 MOV43 INS59 INS12 INS58 INS27 INS37 INS8 INS42 INS42 INS7 INS7 INS43 INS59 INS43 INS59 INS32 INS27 INS42 INS33 INS8 INS12 INS39 INS59 INS42 INS42 INS42 MOV60 INS60 INS21 INS22 INS42 INS22 INS42 INS42 INS32 INS42 INS21 INS44 INS8 INS39 INS59 INS42 INS42 INS42 MOV60 INS60 INS21 INS22 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 UPD42 UPD42 INS32 INS27 INS21 INS44 INS8 INS42 INS34 INS43 INS59 INS32 INS52 INS42 INS52 INS42 INS42 INS42 INS7 INS43 INS42 MOV21 INS21 INS41 INS42 INS34 INS43 INS43 INS59 INS32 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 UPD43 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS14 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 UPD42 INS43 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 MOV60 MOV21 INS21 MOV21 MOV21 UPD42 INS32 INS42 INS42 INS42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL39 DEL39 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL24 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8