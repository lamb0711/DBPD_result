YARN-9477. Implement VE discovery using libudev. Contributed by Peter Bacsko.

+  private static final String ENV_USE_UDEV = "NEC_USE_UDEV";
+  private boolean useUdev;
+  private VEDeviceDiscoverer discoverer;
-    this(System::getenv, DEFAULT_BINARY_SEARCH_DIRS);
+    this(System::getenv, DEFAULT_BINARY_SEARCH_DIRS, new UdevUtil());
-  NECVEPlugin(Function<String, String> envProvider, String[] scriptPaths)
-      throws ResourceHandlerException {
+  NECVEPlugin(Function<String, String> envProvider, String[] scriptPaths,
+      UdevUtil udev) throws ResourceHandlerException {
+    if (Boolean.parseBoolean(envProvider.apply(ENV_USE_UDEV))) {
+      LOG.info("Using libudev to retrieve syspath & device status");
+      useUdev = true;
+      udev.init();
+      discoverer = new VEDeviceDiscoverer(udev);
+    } else {
+      scriptBasedInit(envProvider, scriptPaths);
+    }
+  }
+
+  private void scriptBasedInit(Function<String, String> envProvider,
+      String[] scriptPaths) throws ResourceHandlerException {
-    CommandExecutor executor =
-        commandExecutorProvider.apply(new String[]{this.binaryPath});
-    try {
-      executor.execute();
-      String output = executor.getOutput();
-      devices = parseOutput(output);
-    } catch (IOException e) {
-      LOG.warn(e.toString());
+    if (useUdev) {
+      try {
+        devices = discoverer.getDevicesFromPath("/dev");
+      } catch (IOException e) {
+        LOG.error("Error during scanning devices", e);
+      }
+    } else {
+      CommandExecutor executor =
+          commandExecutorProvider.apply(new String[]{this.binaryPath});
+      try {
+        executor.execute();
+        String output = executor.getOutput();
+        devices = parseOutput(output);
+      } catch (IOException e) {
+        LOG.error("Error during executing external binary", e);
+      }
+
+    if (devices != null) {
+      LOG.info("Found devices:");
+      devices.forEach(dev -> LOG.info("{}", dev));
+    }
+
+  void setVeDeviceDiscoverer(VEDeviceDiscoverer veDeviceDiscoverer) {
+    this.discoverer = veDeviceDiscoverer;
+  }
+
+  @VisibleForTesting

INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 MOV78 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 UPD42 INS8 INS78 INS39 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS74 INS42 INS5 INS42 INS43 INS42 INS42 INS25 MOV60 INS25 INS25 MOV41 INS42 INS43 INS42 INS21 INS14 INS43 INS43 INS43 INS43 INS85 INS42 INS32 INS8 INS8 INS42 INS8 MOV8 INS27 INS8 INS42 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS21 INS21 INS21 INS54 INS42 INS33 INS21 INS21 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS7 INS32 INS8 INS12 INS32 INS32 INS52 INS42 INS42 INS42 INS45 INS42 INS9 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS21 MOV44 INS8 INS44 INS42 INS42 INS45 INS42 INS42 INS86 INS43 INS42 INS7 INS21 INS43 INS42 INS59 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 UPD42 INS45 MOV42 DEL42 DEL32