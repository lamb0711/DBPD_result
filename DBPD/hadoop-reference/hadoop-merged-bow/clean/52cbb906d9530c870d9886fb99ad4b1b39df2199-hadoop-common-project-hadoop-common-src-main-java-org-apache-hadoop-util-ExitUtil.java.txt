YARN-548. Add tests for YarnUncaughtExceptionHandler (Vadim Bondarev via jeagles)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485877 13f79535-47bb-0310-9956-ffa450edef68

+  private static volatile boolean systemHaltDisabled = false;
+  private static volatile HaltException firstHaltException;
+  public static class HaltException extends RuntimeException {
+    private static final long serialVersionUID = 1L;
+    public final int status;
+
+    public HaltException(int status, String msg) {
+      super(msg);
+      this.status = status;
+    }
+  }
+
+   * Disable the use of {@code Runtime.getRuntime().halt() } for testing.
+   */
+  public static void disableSystemHalt() {
+    systemHaltDisabled = true;
+  }
+
+  /**
+   * @return true if halt has been called
+   */
+  public static boolean haltCalled() {
+    return firstHaltException != null;
+  }
+
+  /**
-   * Reset the tracking of process termination. This is for use
-   * in unit tests where one test in the suite expects an exit
-   * but others do not.
+   * @return the first {@code HaltException} thrown, null if none thrown yet
+   */
+  public static HaltException getFirstHaltException() {
+    return firstHaltException;
+  }
+
+  /**
+   * Reset the tracking of process termination. This is for use in unit tests
+   * where one test in the suite expects an exit but others do not.
+  public static void resetFirstHaltException() {
+    firstHaltException = null;
+  }
+
-   * @param status exit code
-   * @param msg message used to create the ExitException
-   * @throws ExitException if System.exit is disabled for test purposes
+   *
+   * @param status
+   *          exit code
+   * @param msg
+   *          message used to create the {@code ExitException}
+   * @throws ExitException
+   *           if System.exit is disabled for test purposes
+   * Forcibly terminates the currently running Java virtual machine.
+   *
+   * @param status
+   *          exit code
+   * @param msg
+   *          message used to create the {@code HaltException}
+   * @throws HaltException
+   *           if Runtime.getRuntime().halt() is disabled for test purposes
+   */
+  public static void halt(int status, String msg) throws HaltException {
+    LOG.info("Halt with status " + status + " Message: " + msg);
+    if (systemHaltDisabled) {
+      HaltException ee = new HaltException(status, msg);
+      LOG.fatal("Halt called", ee);
+      if (null == firstHaltException) {
+        firstHaltException = ee;
+      }
+      throw ee;
+    }
+    Runtime.getRuntime().halt(status);
+  }
+
+  /**
+   *
-   * @param t throwable used to create the ExitException
-   * @throws ExitException if System.exit is disabled for test purposes
+   * @param t
+   *          throwable used to create the ExitException
+   * @throws ExitException
+   *           if System.exit is disabled for test purposes
-   * Like {@link terminate(int, String)} without a message.
+   * Forcibly terminates the currently running Java virtual machine.
+   *
-   * @throws ExitException if System.exit is disabled for test purposes
+   * @param t
+   * @throws ExitException
+   */
+  public static void halt(int status, Throwable t) throws HaltException {
+    halt(status, StringUtils.stringifyException(t));
+  }
+
+  /**
+   * Like {@link terminate(int, String)} without a message.
+   *
+   * @param status
+   * @throws ExitException
+   *           if System.exit is disabled for test purposes
+
+  /**
+   * Forcibly terminates the currently running Java virtual machine.
+   * @param status
+   * @throws ExitException
+   */
+  public static void halt(int status) throws HaltException {
+    halt(status, "HaltException");
+  }

INS23 INS23 INS55 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS42 INS43 INS23 INS23 INS31 INS29 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS8 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS9 INS42 INS42 INS42 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS65 INS21 INS65 INS41 INS65 INS42 INS41 INS21 INS65 INS65 INS65 INS65 INS39 INS42 INS43 INS42 INS42 INS21 INS25 INS21 INS65 INS65 INS65 INS65 INS39 INS42 INS43 INS42 INS42 INS21 INS65 INS65 INS65 INS39 INS42 INS42 INS21 INS42 INS34 INS42 INS39 INS42 INS43 INS42 INS46 INS21 INS66 INS65 INS66 INS7 INS66 INS27 INS66 INS65 INS66 INS42 UPD66 UPD66 INS7 UPD66 UPD66 INS65 UPD66 INS66 INS42 INS66 INS42 INS66 INS65 INS42 INS66 INS42 INS32 INS42 INS8 INS32 UPD66 UPD66 INS66 INS42 INS42 INS42 INS42 INS32 UPD66 INS66 INS42 INS42 INS32 INS42 INS42 INS7 INS66 INS42 INS9 INS42 INS33 INS66 INS42 INS33 INS66 INS66 INS42 INS42 INS27 INS60 INS21 INS25 INS53 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS22 INS42 INS45 INS42 INS45 INS42 INS43 INS59 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS33 INS42 INS21 INS43 INS42 INS42 INS7 INS42 INS42 INS42 DEL66