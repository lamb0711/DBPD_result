HDDS-1611. Evaluate ACL on volume bucket key and prefix to authorize access. Contributed by Ajay Kumar. (#973)


+import com.google.protobuf.ByteString;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclRights;
+import java.util.stream.Collectors;
+  private static final List<ACLType> EMPTY_LIST = new ArrayList<>(0);
-    if (type == ACLIdentityType.WORLD && name.length() != 0) {
-      throw new IllegalArgumentException("Unexpected name part in world type");
+    if (type == ACLIdentityType.WORLD || type == ACLIdentityType.ANONYMOUS) {
+      if (!name.equals(ACLIdentityType.WORLD.name()) &&
+          !name.equals(ACLIdentityType.ANONYMOUS.name()) &&
+          name.length() != 0) {
+        throw new IllegalArgumentException("Unexpected name:{" + name +
+            "} for type WORLD, ANONYMOUS. It should be WORLD & " +
+            "ANONYMOUS respectively.");
+      }
+      // For type WORLD and ANONYMOUS we allow only one acl to be set.
+      this.name = type.name();
-
-    acls.stream().forEach(a -> aclBitSet.set(a));
-    if (type == ACLIdentityType.WORLD && name.length() != 0) {
-      throw new IllegalArgumentException("Unexpected name part in world type");
+    if (type == ACLIdentityType.WORLD || type == ACLIdentityType.ANONYMOUS) {
+      if (!name.equals(ACLIdentityType.WORLD.name()) &&
+          !name.equals(ACLIdentityType.ANONYMOUS.name()) &&
+          name.length() != 0) {
+        throw new IllegalArgumentException("Unexpected name:{" + name +
+            "} for type WORLD, ANONYMOUS. It should be WORLD & " +
+            "ANONYMOUS respectively.");
+      }
+      // For type WORLD and ANONYMOUS we allow only one acl to be set.
+      this.name = type.name();
-        .setType(OzoneAclType.valueOf(acl.getType().name()));
-    acl.getAclBitSet().stream().forEach(a ->
-        builder.addRights(OzoneAclRights.valueOf(ACLType.values()[a].name())));
+        .setType(OzoneAclType.valueOf(acl.getType().name()))
+        .setRights(ByteString.copyFrom(acl.getAclBitSet().toByteArray()));
-    BitSet aclRights = new BitSet(ACLType.getNoOfAcls());
-    protoAcl.getRightsList().parallelStream().forEach(a ->
-        aclRights.set(a.ordinal()));
-
+    BitSet aclRights = BitSet.valueOf(protoAcl.getRights().toByteArray());
-    List<ACLType> acls = new ArrayList<>(ACLType.getNoOfAcls());
-      aclBitSet.stream().forEach(a -> acls.add(ACLType.values()[a]));
+      return aclBitSet.stream().mapToObj(a ->
+          ACLType.values()[a]).collect(Collectors.toList());
-    return acls;
+    return EMPTY_LIST;

MOV26 INS26 UPD40 INS40 INS23 INS83 INS83 INS83 MOV74 MOV59 UPD42 INS25 INS25 INS60 INS34 INS27 INS8 INS27 INS8 MOV43 INS59 UPD42 MOV27 INS27 MOV25 INS21 MOV27 INS27 INS25 INS21 INS32 MOV42 INS32 INS41 INS42 INS40 INS7 INS42 INS40 INS27 MOV8 INS7 MOV32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 MOV32 INS38 INS38 INS22 INS32 INS38 INS38 MOV27 INS22 INS32 INS42 INS42 INS32 UPD42 MOV32 INS42 INS32 INS32 INS32 INS52 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS42 INS42 MOV32 INS42 UPD42 MOV32 UPD42 INS86 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS27 MOV59 MOV2 INS40 INS42 INS40 INS42 INS45 INS42 INS45 INS45 INS40 INS42 INS40 UPD42 MOV42 INS45 INS42 INS45 INS45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL42 DEL59 DEL32 DEL86 DEL32 DEL21 DEL45 DEL27 DEL25 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL2 DEL42 DEL32 DEL32 DEL32 DEL86 DEL32 DEL21 DEL42 DEL43 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL86 DEL32 DEL21 DEL60 DEL42 DEL86 DEL21