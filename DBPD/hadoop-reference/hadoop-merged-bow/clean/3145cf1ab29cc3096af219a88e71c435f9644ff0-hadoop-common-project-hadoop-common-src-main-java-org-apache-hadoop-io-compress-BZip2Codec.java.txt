Merge r1449958 through r1453659 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1453669 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.conf.Configurable;
+import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.io.compress.bzip2.BZip2DummyCompressor;
-import org.apache.hadoop.io.compress.bzip2.BZip2DummyDecompressor;
+import org.apache.hadoop.io.compress.bzip2.Bzip2Factory;
- * This class provides CompressionOutputStream and CompressionInputStream for
- * compression and decompression. Currently we dont have an implementation of
- * the Compressor and Decompressor interfaces, so those methods of
- * CompressionCodec which have a Compressor or Decompressor type argument, throw
- * UnsupportedOperationException.
+ * This class provides output and input streams for bzip2 compression
+ * and decompression.  It uses the native bzip2 library on the system
+ * if possible, else it uses a pure-Java implementation of the bzip2
+ * algorithm.  The configuration parameter
+ * io.compression.codec.bzip2.library can be used to control this
+ * behavior.
+ *
+ * In the pure-Java mode, the Compressor and Decompressor interfaces
+ * are not implemented.  Therefore, in that mode, those methods of
+ * CompressionCodec which have a Compressor or Decompressor type
+ * argument, throw UnsupportedOperationException.
+ *
+ * Currently, support for splittability is available only in the
+ * pure-Java mode; therefore, if a SplitCompressionInputStream is
+ * requested, the pure-Java implementation is used, regardless of the
+ * setting of the configuration parameter mentioned above.
-public class BZip2Codec implements SplittableCompressionCodec {
+public class BZip2Codec implements Configurable, SplittableCompressionCodec {
+  private Configuration conf;
+  
-  * Creates a new instance of BZip2Codec
+   * Set the configuration to be used by this object.
+   *
+   * @param conf the configuration object.
+   */
+  @Override
+  public void setConf(Configuration conf) {
+    this.conf = conf;
+  }
+  
+  /**
+   * Return the configuration used by this object.
+   *
+   * @return the configuration object used by this objec.
+   */
+  @Override
+  public Configuration getConf() {
+    return conf;
+  }
+  
+  /**
+  * Creates a new instance of BZip2Codec.
-  * Creates CompressionOutputStream for BZip2
-  *
-  * @param out
-  *            The output Stream
-  * @return The BZip2 CompressionOutputStream
-  * @throws java.io.IOException
-  *             Throws IO exception
-  */
+   * Create a {@link CompressionOutputStream} that will write to the given
+   * {@link OutputStream}.
+   *
+   * @param out        the location for the final output stream
+   * @return a stream the user can write uncompressed data to, to have it 
+   *         compressed
+   * @throws IOException
+   */
-    return new BZip2CompressionOutputStream(out);
+    return createOutputStream(out, createCompressor());
-  * Creates a compressor using given OutputStream.
+   * Create a {@link CompressionOutputStream} that will write to the given
+   * {@link OutputStream} with the given {@link Compressor}.
-  * @return CompressionOutputStream
-    @throws java.io.IOException
+   * @param out        the location for the final output stream
+   * @param compressor compressor to use
+   * @return a stream the user can write uncompressed data to, to have it 
+   *         compressed
+   * @throws IOException
-    return createOutputStream(out);
+    return Bzip2Factory.isNativeBzip2Loaded(conf) ?
+      new CompressorStream(out, compressor, 
+                           conf.getInt("io.file.buffer.size", 4*1024)) :
+      new BZip2CompressionOutputStream(out);
-  * This functionality is currently not supported.
-  *
-  * @return BZip2DummyCompressor.class
-  */
+   * Get the type of {@link Compressor} needed by this {@link CompressionCodec}.
+   *
+   * @return the type of compressor needed by this codec.
+   */
-  public Class<? extends org.apache.hadoop.io.compress.Compressor> getCompressorType() {
-    return BZip2DummyCompressor.class;
+  public Class<? extends Compressor> getCompressorType() {
+    return Bzip2Factory.getBzip2CompressorType(conf);
-  * This functionality is currently not supported.
-  *
-  * @return Compressor
-  */
+   * Create a new {@link Compressor} for use by this {@link CompressionCodec}.
+   *
+   * @return a new compressor for use by this codec
+   */
-    return new BZip2DummyCompressor();
+    return Bzip2Factory.getBzip2Compressor(conf);
-  * Creates CompressionInputStream to be used to read off uncompressed data.
-  *
-  * @param in
-  *            The InputStream
-  * @return Returns CompressionInputStream for BZip2
-  * @throws java.io.IOException
-  *             Throws IOException
-  */
+   * Create a {@link CompressionInputStream} that will read from the given
+   * input stream and return a stream for uncompressed data.
+   *
+   * @param in the stream to read compressed bytes from
+   * @return a stream to read uncompressed bytes from
+   * @throws IOException
+   */
-    return new BZip2CompressionInputStream(in);
+    return createInputStream(in, createDecompressor());
-  * This functionality is currently not supported.
-  *
-  * @return CompressionInputStream
-  */
+   * Create a {@link CompressionInputStream} that will read from the given
+   * {@link InputStream} with the given {@link Decompressor}, and return a 
+   * stream for uncompressed data.
+   *
+   * @param in           the stream to read compressed bytes from
+   * @param decompressor decompressor to use
+   * @return a stream to read uncompressed bytes from
+   * @throws IOException
+   */
-    return createInputStream(in);
+    return Bzip2Factory.isNativeBzip2Loaded(conf) ? 
+      new DecompressorStream(in, decompressor,
+                             conf.getInt("io.file.buffer.size", 4*1024)) :
+      new BZip2CompressionInputStream(in);
-  @Override
-  * This functionality is currently not supported.
-  *
-  * @return BZip2DummyDecompressor.class
-  */
+   * Get the type of {@link Decompressor} needed by this {@link CompressionCodec}.
+   *
+   * @return the type of decompressor needed by this codec.
+   */
-  public Class<? extends org.apache.hadoop.io.compress.Decompressor> getDecompressorType() {
-    return BZip2DummyDecompressor.class;
+  public Class<? extends Decompressor> getDecompressorType() {
+    return Bzip2Factory.getBzip2DecompressorType(conf);
-  * This functionality is currently not supported.
-  *
-  * @return Decompressor
-  */
+   * Create a new {@link Decompressor} for use by this {@link CompressionCodec}.
+   *
+   * @return a new decompressor for use by this codec
+   */
-    return new BZip2DummyDecompressor();
+    return Bzip2Factory.getBzip2Decompressor(conf);
-    @Override
-    @Override
-    @Override
-    @Override
-    @Override
-    @Override
-    @Override
-    @Override
-    @Override
-    @Override

MOV26 MOV26 INS26 UPD40 INS40 UPD40 INS43 INS23 INS31 INS31 INS42 INS83 INS43 INS59 INS29 MOV78 INS83 INS39 INS42 INS44 INS8 INS29 MOV78 INS83 INS43 INS42 INS8 MOV78 MOV78 UPD74 MOV78 MOV78 MOV43 MOV44 MOV43 MOV78 MOV43 MOV44 MOV43 MOV78 UPD74 MOV78 UPD66 UPD66 INS66 INS66 INS66 INS66 UPD66 INS66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS42 INS41 INS65 INS65 UPD65 UPD76 INS65 INS65 INS65 UPD76 INS66 INS42 INS66 INS42 INS7 INS66 INS66 INS42 UPD66 UPD66 INS65 INS66 INS65 INS66 UPD66 INS66 UPD66 INS42 INS32 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 UPD66 INS66 UPD66 INS42 INS16 INS66 INS65 UPD66 INS65 INS66 UPD66 UPD43 INS32 INS66 INS65 UPD66 INS65 INS66 UPD66 INS32 INS66 INS65 INS66 UPD66 UPD66 UPD66 INS42 INS32 INS66 INS65 INS66 INS65 INS66 INS65 INS66 UPD66 INS42 INS66 INS42 INS66 UPD66 INS42 INS16 INS66 INS65 UPD66 INS65 INS66 UPD66 UPD43 INS32 INS66 INS65 UPD66 INS65 INS66 UPD66 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS14 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS14 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS27 INS42 INS42 INS42 INS45 INS27 INS34 INS34 INS34 INS34 DEL40 DEL66 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL43 DEL57 DEL42 DEL43 DEL14 DEL40 DEL66 DEL42 DEL42 DEL32 DEL40 DEL42 DEL43 DEL57 DEL42 DEL43 DEL14 DEL42 DEL78 DEL42 DEL78 DEL42 DEL78 DEL42 DEL78 DEL42 DEL78 DEL42 DEL78 DEL42 DEL78 DEL42 DEL78 DEL42 DEL78