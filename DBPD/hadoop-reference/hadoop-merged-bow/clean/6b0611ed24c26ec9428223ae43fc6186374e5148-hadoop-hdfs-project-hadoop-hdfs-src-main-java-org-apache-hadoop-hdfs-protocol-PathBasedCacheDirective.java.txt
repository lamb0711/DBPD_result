Merging r1539737 through r1539896 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1539898 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
-
-import com.google.common.base.Preconditions;
+import java.net.URI;
-import org.apache.hadoop.hdfs.DFSUtil;
-import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.InvalidPoolNameError;
-import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.InvalidPathNameError;
- * A directive to add a path to a cache pool.
+ * Describes a path-based cache directive.
-
+    private Long id;
-    private short replication = (short)1;
+    private Short replication;
-      return new PathBasedCacheDirective(path, replication, pool);
+      return new PathBasedCacheDirective(id, path, replication, pool);
+    }
+
+    /**
+     * Creates an empty builder.
+     */
+    public Builder() {
+    }
+
+    /**
+     * Creates a builder with all elements set to the same values as the
+     * given PathBasedCacheDirective.
+     */
+    public Builder(PathBasedCacheDirective directive) {
+      this.id = directive.getId();
+      // deep-copy URI
+      URI uri = directive.getPath().toUri();
+      this.path = new Path(uri.getScheme(), uri.getAuthority(), uri.getPath());
+      this.replication = directive.getReplication();
+      this.pool = directive.getPool();
+    }
+
+    /**
+     * Sets the id used in this request.
+     * 
+     * @param id The id used in this request.
+     * @return This builder, for call chaining.
+     */
+    public Builder setId(Long id) {
+      this.id = id;
+      return this;
-    public Builder setReplication(short replication) {
+    public Builder setReplication(Short replication) {
+  private final Long id;
-  private final short replication;
+  private final Short replication;
+  PathBasedCacheDirective(Long id, Path path, Short replication, String pool) {
+    this.id = id;
+    this.path = path;
+    this.replication = replication;
+    this.pool = pool;
+  }
+
+  /**
+   * @return The ID of this directive.
+   */
+  public Long getId() {
+    return id;
+  }
+
-  public short getReplication() {
+  public Short getReplication() {
-  /**
-   * Check if this PathBasedCacheDirective is valid.
-   * 
-   * @throws IOException
-   *     If this PathBasedCacheDirective is not valid.
-   */
-  public void validate() throws IOException {
-    if (!DFSUtil.isValidName(path.toUri().getPath())) {
-      throw new InvalidPathNameError(this);
-    }
-    if (replication <= 0) {
-      throw new IOException("Tried to request a cache replication " +
-          "factor of " + replication + ", but that is less than 1.");
-    }
-    if (pool.isEmpty()) {
-      throw new InvalidPoolNameError(this);
-    }
-  }
-
-    return new EqualsBuilder().append(getPath(), other.getPath()).
+    return new EqualsBuilder().append(getId(), other.getId()).
+        append(getPath(), other.getPath()).
-    return new HashCodeBuilder().append(getPath()).
+    return new HashCodeBuilder().append(id).
+        append(path).
-        append(getPool()).
+        append(pool).
-    builder.append("{ path:").append(path).
-      append(", replication:").append(replication).
-      append(", pool:").append(pool).
-      append(" }");
+    builder.append("{");
+    String prefix = "";
+    if (id != null) {
+      builder.append(prefix).append("id: ").append(id);
+      prefix = ",";
+    }
+    if (path != null) {
+      builder.append(prefix).append("path: ").append(path);
+      prefix = ",";
+    }
+    if (replication != null) {
+      builder.append(prefix).append("replication: ").append(replication);
+      prefix = ",";
+    }
+    if (pool != null) {
+      builder.append(prefix).append("pool: ").append(pool);
+      prefix = ",";
+    }
+    builder.append("}");
-
-  /**
-   * Protected constructor.  Callers use Builder to create new instances.
-   * 
-   * @param path The path used in this request.
-   * @param replication The replication used in this request.
-   * @param pool The pool used in this request.
-   */
-  protected PathBasedCacheDirective(Path path, short replication, String pool) {
-    Preconditions.checkNotNull(path);
-    Preconditions.checkNotNull(pool);
-    this.path = path;
-    this.replication = replication;
-    this.pool = pool;
-  }

MOV23 MOV31 UPD40 INS23 INS31 INS31 INS23 INS31 INS31 INS31 INS43 INS59 INS83 INS83 INS43 MOV59 INS42 INS44 INS44 MOV29 MOV83 UPD43 MOV43 INS42 INS8 INS43 MOV78 INS83 MOV43 INS42 INS8 UPD66 INS83 INS43 INS59 INS43 INS29 INS83 INS42 INS8 INS29 INS83 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS43 INS42 INS43 MOV42 UPD65 UPD42 INS41 INS42 MOV60 INS21 INS60 MOV25 MOV25 INS25 INS25 INS21 MOV41 INS42 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS60 INS21 INS21 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS21 INS41 INS43 INS42 INS42 INS7 UPD66 INS42 INS32 INS32 INS43 INS59 UPD27 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS66 INS66 INS66 INS42 INS7 INS43 INS59 INS7 INS7 INS7 INS66 INS42 INS66 INS66 INS42 INS7 INS52 INS42 INS22 INS42 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS45 UPD42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS42 MOV42 UPD45 MOV45 INS42 INS22 INS32 INS42 INS42 INS32 INS22 INS14 INS22 INS32 INS22 INS32 INS22 INS42 INS52 INS42 UPD42 INS42 INS32 INS7 INS32 INS7 INS32 INS7 INS32 INS7 INS52 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS43 INS32 INS32 INS32 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 MOV32 MOV42 MOV42 INS42 INS45 INS32 MOV42 MOV42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS32 INS42 INS45 INS32 UPD42 MOV42 INS45 UPD45 INS32 INS42 UPD45 MOV45 MOV14 MOV42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 UPD42 INS42 MOV42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL39 DEL39 DEL34 DEL11 DEL39 DEL39 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL39 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL66 DEL65 DEL42 DEL39 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL38 DEL42 DEL43 DEL52 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL32 DEL32 DEL34 DEL42 DEL43 DEL45 DEL45 DEL27 DEL42 DEL45 DEL27 DEL14 DEL53 DEL32 DEL42 DEL43 DEL52 DEL14 DEL53 DEL8 DEL45 DEL32 DEL42 DEL83 DEL42 DEL32 DEL32 DEL32 DEL32 DEL21 DEL8 DEL31