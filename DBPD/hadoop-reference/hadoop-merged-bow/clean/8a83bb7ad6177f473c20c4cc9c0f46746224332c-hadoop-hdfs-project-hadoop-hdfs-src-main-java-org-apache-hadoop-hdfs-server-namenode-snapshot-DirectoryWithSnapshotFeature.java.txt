HDFS-4667. Capture renamed files/directories in snapshot diff report. Contributed by Jing Zhao and Binglin Chang.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604488 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Collections;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectorySnapshottable.SnapshotDiffInfo.RenameEntry;
-        boolean fromEarlier) {
-      List<DiffReportEntry> cList = new ArrayList<DiffReportEntry>();
-      List<DiffReportEntry> dList = new ArrayList<DiffReportEntry>();
-      int c = 0, d = 0;
+        boolean fromEarlier, Map<Long, RenameEntry> renameMap) {
+      List<DiffReportEntry> list = new ArrayList<DiffReportEntry>();
-      for (; c < created.size() && d < deleted.size(); ) {
-        INode cnode = created.get(c);
-        INode dnode = deleted.get(d);
-        if (cnode.compareTo(dnode.getLocalNameBytes()) == 0) {
+      for (INode cnode : created) {
+        RenameEntry entry = renameMap.get(cnode.getId());
+        if (entry == null || !entry.isRename()) {
-          // must be the case: delete first and then create an inode with the
-          // same name
-          cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));
-          dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));
-          c++;
-          d++;
-        } else if (cnode.compareTo(dnode.getLocalNameBytes()) < 0) {
-          fullPath[fullPath.length - 1] = cnode.getLocalNameBytes();
-          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE
+          list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE
-          c++;
-        } else {
-          fullPath[fullPath.length - 1] = dnode.getLocalNameBytes();
-          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE
-              : DiffType.CREATE, fullPath));
-          d++;
-      for (; d < deleted.size(); d++) {
-        fullPath[fullPath.length - 1] = deleted.get(d).getLocalNameBytes();
-        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE
-            : DiffType.CREATE, fullPath));
+      for (INode dnode : deleted) {
+        RenameEntry entry = renameMap.get(dnode.getId());
+        if (entry != null && entry.isRename()) {
+          list.add(new DiffReportEntry(DiffType.RENAME,
+              fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),
+              fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));
+        } else {
+          fullPath[fullPath.length - 1] = dnode.getLocalNameBytes();
+          list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE
+              : DiffType.CREATE, fullPath));
+        }
-      for (; c < created.size(); c++) {
-        fullPath[fullPath.length - 1] = created.get(c).getLocalNameBytes();
-        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE
-            : DiffType.DELETE, fullPath));
-      }
-      dList.addAll(cList);
-      return dList;
+      return list;
-    Snapshot earlier = fromSnapshot;
-    Snapshot later = toSnapshot;
-    if (Snapshot.ID_COMPARATOR.compare(fromSnapshot, toSnapshot) > 0) {
-      earlier = toSnapshot;
-      later = fromSnapshot;
-    }
-
-    boolean modified = diffs.changedBetweenSnapshots(earlier, later);
-    if (!modified) {
+    int[] diffIndexPair = diffs.changedBetweenSnapshots(fromSnapshot,
+        toSnapshot);
+    if (diffIndexPair == null) {
-
-    final List<DirectoryDiff> difflist = diffs.asList();
-    final int size = difflist.size();
-    int earlierDiffIndex = Collections.binarySearch(difflist, earlier.getId());
-    int laterDiffIndex = later == null ? size : Collections
-        .binarySearch(difflist, later.getId());
-    earlierDiffIndex = earlierDiffIndex < 0 ? (-earlierDiffIndex - 1)
-        : earlierDiffIndex;
-    laterDiffIndex = laterDiffIndex < 0 ? (-laterDiffIndex - 1)
-        : laterDiffIndex;
+    int earlierDiffIndex = diffIndexPair[0];
+    int laterDiffIndex = diffIndexPair[1];
+    List<DirectoryDiff> difflist = diffs.asList();
-      if (dirMetadataChanged == false && sdiff.snapshotINode != null) {
+      if (!dirMetadataChanged && sdiff.snapshotINode != null) {
-      for (int i = laterDiffIndex; i < size; i++) {
+      for (int i = laterDiffIndex; i < difflist.size(); i++) {

MOV26 UPD40 MOV60 INS44 INS60 INS74 INS42 INS70 INS70 INS5 INS27 MOV39 INS59 INS43 INS43 INS43 INS44 INS42 INS8 INS44 INS42 INS8 UPD42 INS39 INS85 UPD42 INS42 INS33 INS2 MOV42 INS2 INS42 INS42 INS42 UPD42 MOV43 INS42 INS60 INS25 MOV43 INS42 INS60 INS25 UPD42 UPD42 INS42 INS34 INS42 INS34 INS43 INS59 INS27 MOV8 INS43 INS59 INS27 INS8 MOV8 INS38 UPD42 MOV42 UPD42 MOV42 INS32 INS27 INS38 MOV21 UPD42 MOV42 INS42 INS32 INS27 MOV32 INS21 INS42 MOV32 INS42 INS42 INS32 UPD42 MOV42 INS33 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 INS33 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 MOV42 INS14 UPD42 MOV43 INS40 INS16 INS16 INS42 INS32 INS32 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL34 DEL59 DEL42 DEL34 DEL59 DEL60 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL37 DEL21 DEL42 DEL37 DEL21 DEL42 DEL32 DEL27 DEL32 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL34 DEL27 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL14 DEL32 DEL21 DEL42 DEL37 DEL21 DEL42 DEL37 DEL21 DEL8 DEL32 DEL34 DEL27 DEL25 DEL25 DEL8 DEL24 DEL27 DEL42 DEL37 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL40 DEL40 DEL16 DEL42 DEL14 DEL32 DEL21 DEL8 DEL24 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL40 DEL40 DEL16 DEL42 DEL14 DEL32 DEL21 DEL8 DEL24 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL40 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL38 DEL83 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL42 DEL38 DEL34 DEL27 DEL36 DEL42 DEL16 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL38 DEL34 DEL27 DEL36 DEL42 DEL16 DEL7 DEL21 DEL83 DEL42 DEL9 DEL27 DEL42