HDFS-4987. Namenode changes to track multiple storages per datanode.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1518087 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.hadoop.hdfs.server.protocol.DatanodeStorage;
-  private volatile BlockInfo blockList = null;
-  private int numBlocks = 0;
+  private final Map<String, DatanodeStorageInfo> storageMap = 
+      new HashMap<String, DatanodeStorageInfo>();
+
-   * Add datanode to the block.
-   * Add block to the head of the list of blocks belonging to the data-node.
+   * Add data-node to the block. Add block to the head of the list of blocks
+   * belonging to the data-node.
-  public boolean addBlock(BlockInfo b) {
-    if(!b.addNode(this))
-      return false;
-    // add to the head of the data-node list
-    blockList = b.listInsert(blockList, this);
-    numBlocks++;
-    return true;
-  }
-  
-  /**
-   * Remove block from the list of blocks belonging to the data-node.
-   * Remove datanode from the block.
-   */
-  public boolean removeBlock(BlockInfo b) {
-    blockList = b.listRemove(blockList, this);
-    if ( b.removeNode(this) ) {
-      numBlocks--;
-      return true;
-    } else {
-      return false;
+  public boolean addBlock(String storageID, BlockInfo b) {
+    DatanodeStorageInfo s = getStorageInfo(storageID);
+    if (s != null) {
+      return s.addBlock(b);
+    return false;
+  }
+
+  DatanodeStorageInfo getStorageInfo(String storageID) {
+    return storageMap.get(storageID);
+  }
+  public Collection<DatanodeStorageInfo> getStorageInfos() {
+    return storageMap.values();
-   * Move block to the head of the list of blocks belonging to the data-node.
-   * @return the index of the head of the blockList
+   * Remove block from the list of blocks belonging to the data-node. Remove
+   * data-node from the block.
-  int moveBlockToHead(BlockInfo b, int curIndex, int headIndex) {
-    blockList = b.moveBlockToHead(blockList, this, curIndex, headIndex);
-    return curIndex;
+  boolean removeBlock(BlockInfo b) {
+    int index = b.findStorageInfo(this);
+    DatanodeStorageInfo s = b.getStorageInfo(index);
+    if (s != null) {
+      return s.removeBlock(b);
+    }
+    return false;
+  }
+  
+  /**
+   * Remove block from the list of blocks belonging to the data-node. Remove
+   * data-node from the block.
+   */
+  boolean removeBlock(String storageID, BlockInfo b) {
+    DatanodeStorageInfo s = getStorageInfo(storageID);
+    if (s != null) {
+      return s.removeBlock(b);
+    }
+    return false;
-    return blockList;
+    return getBlockIterator().next();
-    boolean done = removeBlock(oldBlock);
+    int index = oldBlock.findStorageInfo(this);
+    DatanodeStorageInfo s = oldBlock.getStorageInfo(index);
+    boolean done = s.removeBlock(oldBlock);
-    done = addBlock(newBlock);
+
+    done = s.addBlock(newBlock);
-    this.blockList = null;
-    return numBlocks;
+    // TODO: synchronization
+    int blocks = 0;
+    for (DatanodeStorageInfo entry : storageMap.values()) {
+      blocks += entry.numBlocks();
+    }
+    return blocks;
-  /**
-   * Iterates over the list of blocks belonging to the datanode.
-   */
-  public static class BlockIterator implements Iterator<BlockInfo> {
-    private BlockInfo current;
-    private DatanodeDescriptor node;
-      
-    BlockIterator(BlockInfo head, DatanodeDescriptor dn) {
-      this.current = head;
-      this.node = dn;
+  private static class BlockIterator implements Iterator<BlockInfo> {
+    private final int maxIndex;
+    private int index = 0;
+    private List<Iterator<BlockInfo>> iterators = new ArrayList<Iterator<BlockInfo>>();
+    
+    private BlockIterator(final Iterable<DatanodeStorageInfo> storages) {
+      for (DatanodeStorageInfo e : storages) {
+        iterators.add(e.getBlockIterator());
+      }
+      maxIndex = iterators.size() - 1;
+    }
+
+    private BlockIterator(final DatanodeStorageInfo storage) {
+      iterators.add(storage.getBlockIterator());
+      maxIndex = iterators.size() - 1;
-      return current != null;
+      update();
+      return iterators.get(index).hasNext();
-      BlockInfo res = current;
-      current = current.getNext(current.findDatanode(node));
-      return res;
+      update();
+      return iterators.get(index).next();
-
+    
-    public void remove()  {
-      throw new UnsupportedOperationException("Sorry. can't remove.");
+    public void remove() {
+      throw new UnsupportedOperationException("Remove unsupported.");
+    }
+    
+    private void update() {
+      while(index < maxIndex && !iterators.get(index).hasNext()) {
+        index++;
+      }
-  public Iterator<BlockInfo> getBlockIterator() {
-    return new BlockIterator(this.blockList, this);
+  Iterator<BlockInfo> getBlockIterator() {
+    return new BlockIterator(storageMap.values());
+  }
+  Iterator<BlockInfo> getBlockIterator(final String storageID) {
+    return new BlockIterator(storageMap.get(storageID));
+
+  DatanodeStorageInfo updateStorage(DatanodeStorage s) {
+    DatanodeStorageInfo storage = getStorageInfo(s.getStorageID());
+    if (storage == null) {
+      storage = new DatanodeStorageInfo(this, s);
+      storageMap.put(s.getStorageID(), storage);
+    } else {
+      storage.setState(s.getState());
+    }
+    return storage;
+  }

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS55 INS31 INS31 UPD83 INS74 MOV29 MOV83 MOV39 MOV42 INS44 MOV44 INS8 INS43 INS42 INS44 INS8 INS83 INS74 INS42 INS8 MOV44 UPD39 UPD42 MOV44 INS8 UPD83 MOV83 MOV83 MOV42 MOV74 INS23 INS23 MOV23 INS31 INS31 MOV31 INS31 MOV31 INS31 INS74 INS42 INS8 INS74 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS43 INS43 UPD42 INS14 INS43 INS42 INS60 MOV25 MOV41 INS42 INS43 INS42 INS41 INS43 INS43 MOV41 INS60 INS60 INS25 MOV41 INS65 INS43 INS42 INS60 INS25 MOV41 INS60 INS60 INS60 INS70 MOV83 INS83 INS39 INS59 INS83 INS39 MOV59 INS74 INS83 MOV42 MOV44 INS8 INS83 INS42 INS44 INS8 MOV78 MOV78 MOV83 MOV43 MOV42 INS8 INS83 INS39 INS42 INS8 INS43 INS43 INS41 INS43 INS43 INS83 INS43 INS42 MOV41 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 UPD42 MOV42 INS74 UPD66 UPD66 INS42 INS43 INS59 INS27 INS8 INS42 INS32 INS42 INS42 INS32 UPD66 UPD66 INS39 INS59 INS43 INS59 INS27 INS8 UPD9 UPD66 MOV66 UPD66 MOV66 INS42 INS43 INS59 INS27 INS8 INS32 INS39 INS59 INS43 INS59 INS39 INS59 INS44 INS32 INS8 UPD42 INS42 UPD42 INS34 INS43 MOV74 UPD42 INS14 INS83 INS74 UPD42 INS70 MOV21 INS83 INS43 INS42 INS21 MOV21 INS21 INS21 INS41 INS61 INS42 MOV42 INS14 INS42 INS42 INS42 INS14 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS43 INS42 INS42 INS42 INS21 UPD42 MOV42 INS74 INS43 INS43 INS44 INS42 INS8 INS42 INS32 INS32 INS32 INS32 INS32 INS27 INS8 MOV43 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 MOV42 UPD42 MOV42 MOV52 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS74 INS42 UPD42 MOV42 UPD43 MOV43 UPD42 MOV42 INS21 INS42 INS27 INS42 INS42 INS32 INS42 INS27 INS42 INS32 INS42 INS42 INS32 INS42 UPD45 INS27 INS38 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS43 INS43 UPD42 INS32 INS32 INS34 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS37 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL43 DEL33 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL52 DEL32 DEL38 DEL9 DEL42 DEL52 DEL32 DEL7 DEL21 DEL42 DEL37 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL32 DEL42 DEL37 DEL21 DEL8 DEL8 DEL25 DEL65 DEL65 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL52 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL42 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL43 DEL43 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL33 DEL27 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL23 DEL44 DEL8 DEL31 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL31 DEL55 DEL83 DEL42 DEL52 DEL42 DEL22 DEL52 DEL14 DEL41 DEL8