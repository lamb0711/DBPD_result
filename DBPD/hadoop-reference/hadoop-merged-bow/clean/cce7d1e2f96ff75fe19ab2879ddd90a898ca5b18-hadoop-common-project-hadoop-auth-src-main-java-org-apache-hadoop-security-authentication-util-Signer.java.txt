Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

-  private byte[] secret;
+  private SignerSecretProvider secretProvider;
-   * Creates a Signer instance using the specified secret.
+   * Creates a Signer instance using the specified SignerSecretProvider.  The
+   * SignerSecretProvider should already be initialized.
-   * @param secret secret to use for creating the digest.
+   * @param secretProvider The SignerSecretProvider to use
-  public Signer(byte[] secret) {
-    if (secret == null) {
-      throw new IllegalArgumentException("secret cannot be NULL");
+  public Signer(SignerSecretProvider secretProvider) {
+    if (secretProvider == null) {
+      throw new IllegalArgumentException("secretProvider cannot be NULL");
-    this.secret = secret.clone();
+    this.secretProvider = secretProvider;
-  public String sign(String str) {
+  public synchronized String sign(String str) {
-    String signature = computeSignature(str);
+    byte[] secret = secretProvider.getCurrentSecret();
+    String signature = computeSignature(secret, str);
-    String currentSignature = computeSignature(rawValue);
-    if (!originalSignature.equals(currentSignature)) {
-      throw new SignerException("Invalid signature");
-    }
+    checkSignatures(rawValue, originalSignature);
+   * @param secret The secret to use
-  protected String computeSignature(String str) {
+  protected String computeSignature(byte[] secret, String str) {
+  protected void checkSignatures(String rawValue, String originalSignature)
+      throws SignerException {
+    boolean isValid = false;
+    byte[][] secrets = secretProvider.getAllSecrets();
+    for (int i = 0; i < secrets.length; i++) {
+      byte[] secret = secrets[i];
+      if (secret != null) {
+        String currentSignature = computeSignature(secret, rawValue);
+        if (originalSignature.equals(currentSignature)) {
+          isValid = true;
+          break;
+        }
+      }
+    }
+    if (!isValid) {
+      throw new SignerException("Invalid signature");
+    }
+  }

INS31 INS43 INS44 INS83 MOV44 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 UPD42 INS43 INS42 INS60 INS21 INS65 MOV43 INS42 INS43 INS42 INS42 INS60 INS60 INS24 MOV25 UPD66 INS66 UPD42 UPD66 INS42 MOV5 INS59 INS32 INS42 INS66 INS42 INS39 INS59 INS5 INS59 INS58 INS27 INS37 INS8 UPD42 INS42 INS42 INS32 UPD42 MOV42 MOV42 INS42 INS42 INS9 INS39 INS85 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS5 INS59 INS27 INS8 UPD45 INS39 INS85 INS42 INS2 INS42 INS33 INS60 INS25 INS42 INS42 INS43 INS59 MOV32 INS8 INS42 INS42 INS32 INS21 INS10 INS42 INS42 INS42 INS7 INS42 INS9 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60