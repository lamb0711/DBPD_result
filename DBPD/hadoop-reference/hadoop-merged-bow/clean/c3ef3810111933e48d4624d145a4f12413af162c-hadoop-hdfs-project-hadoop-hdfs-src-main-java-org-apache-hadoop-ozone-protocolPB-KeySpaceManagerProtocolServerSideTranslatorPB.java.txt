HDFS-12543. Ozone : allow create key without specifying size. Contributed by Chen Liang.

+import org.apache.hadoop.ozone.ksm.helpers.KsmKeyLocationInfo;
+import org.apache.hadoop.ozone.ksm.helpers.OpenKeySession;
+    .KeySpaceManagerProtocolProtos.AllocateBlockRequest;
+import org.apache.hadoop.ozone.protocol.proto
+    .KeySpaceManagerProtocolProtos.AllocateBlockResponse;
+import org.apache.hadoop.ozone.protocol.proto
+    .KeySpaceManagerProtocolProtos.CommitKeyRequest;
+import org.apache.hadoop.ozone.protocol.proto
+    .KeySpaceManagerProtocolProtos.CommitKeyResponse;
+import org.apache.hadoop.ozone.protocol.proto
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos;
+      OzoneProtos.ReplicationType type =
+          keyArgs.hasType()? keyArgs.getType() : null;
+      OzoneProtos.ReplicationFactor factor =
+          keyArgs.hasFactor()? keyArgs.getFactor() : null;
-          .setType(keyArgs.getType())
-          .setFactor(keyArgs.getFactor())
+          .setType(type)
+          .setFactor(factor)
-      KsmKeyInfo keyInfo = impl.allocateKey(ksmKeyArgs);
-      resp.setKeyInfo(keyInfo.getProtobuf());
+      if (keyArgs.hasDataSize()) {
+        ksmKeyArgs.setDataSize(keyArgs.getDataSize());
+      } else {
+        ksmKeyArgs.setDataSize(0);
+      }
+      OpenKeySession openKey = impl.openKey(ksmKeyArgs);
+      resp.setKeyInfo(openKey.getKeyInfo().getProtobuf());
+      resp.setID(openKey.getId());
-          .setDataSize(keyArgs.getDataSize())
+
+  @Override
+  public CommitKeyResponse commitKey(RpcController controller,
+      CommitKeyRequest request) throws ServiceException {
+    CommitKeyResponse.Builder resp =
+        CommitKeyResponse.newBuilder();
+    try {
+      KeyArgs keyArgs = request.getKeyArgs();
+      KsmKeyArgs ksmKeyArgs = new KsmKeyArgs.Builder()
+          .setVolumeName(keyArgs.getVolumeName())
+          .setBucketName(keyArgs.getBucketName())
+          .setKeyName(keyArgs.getKeyName())
+          .build();
+      int id = request.getClientID();
+      impl.commitKey(ksmKeyArgs, id);
+      resp.setStatus(Status.OK);
+    } catch (IOException e) {
+      resp.setStatus(exceptionToResponseStatus(e));
+    }
+    return resp.build();
+  }
+
+  @Override
+  public AllocateBlockResponse allocateBlock(RpcController controller,
+      AllocateBlockRequest request) throws ServiceException {
+    AllocateBlockResponse.Builder resp =
+        AllocateBlockResponse.newBuilder();
+    try {
+      KeyArgs keyArgs = request.getKeyArgs();
+      KsmKeyArgs ksmKeyArgs = new KsmKeyArgs.Builder()
+          .setVolumeName(keyArgs.getVolumeName())
+          .setBucketName(keyArgs.getBucketName())
+          .setKeyName(keyArgs.getKeyName())
+          .build();
+      int id = request.getClientID();
+      KsmKeyLocationInfo newLocation = impl.allocateBlock(ksmKeyArgs, id);
+      resp.setKeyLocation(newLocation.getProtobuf());
+      resp.setStatus(Status.OK);
+    } catch (IOException e) {
+      resp.setStatus(exceptionToResponseStatus(e));
+    }
+    return resp.build();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS41 INS42 INS42 INS43 INS59 INS8 INS12 INS32 INS42 INS42 INS43 INS59 INS8 INS12 INS32 INS60 INS60 INS25 INS21 INS21 INS40 INS42 INS32 INS60 INS60 INS60 INS21 MOV21 INS44 INS8 INS42 INS42 INS40 INS42 INS32 INS60 INS60 INS60 INS60 INS21 INS21 INS44 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS8 UPD43 INS32 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS43 INS42 INS21 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS32 INS32 INS43 INS42 INS21 INS40 INS42 INS16 INS40 INS42 INS16 INS42 INS42 INS21 INS21 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS32 MOV32 INS33 INS32 MOV32 INS33 INS32 INS32 UPD42 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS40 INS40 DEL42 DEL42 DEL42 DEL32 DEL32