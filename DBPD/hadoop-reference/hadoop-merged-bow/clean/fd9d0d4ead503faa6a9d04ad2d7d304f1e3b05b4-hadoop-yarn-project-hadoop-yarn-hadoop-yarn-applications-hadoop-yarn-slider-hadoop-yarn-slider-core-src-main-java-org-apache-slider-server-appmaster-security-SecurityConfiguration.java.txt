YARN-6400. Remove some unneeded code after YARN-6255. Contributed by Jian He

-import com.google.common.base.Preconditions;
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.security.UserGroupInformation;
-import static org.apache.slider.core.main.LauncherExitCodes.EXIT_UNAUTHORIZED;
-import org.apache.slider.common.SliderKeys;
-import org.apache.slider.common.SliderXmlConfKeys;
-import org.apache.slider.common.tools.SliderUtils;
-import org.apache.slider.core.conf.AggregateConf;
-import org.apache.slider.core.exceptions.SliderException;
-import java.io.File;
-import java.io.IOException;
-
-  private final Configuration configuration;
-  private final AggregateConf instanceDefinition;
-  public SecurityConfiguration(Configuration configuration,
-                               AggregateConf instanceDefinition,
-                               String clusterName) throws SliderException {
-    Preconditions.checkNotNull(configuration);
-    Preconditions.checkNotNull(instanceDefinition);
-    Preconditions.checkNotNull(clusterName);
-    this.configuration = configuration;
-    this.instanceDefinition = instanceDefinition;
-    this.clusterName = clusterName;
-    validate();
-  }
-
-  private void validate() throws SliderException {
-    if (isSecurityEnabled()) {
-      String principal = instanceDefinition.getAppConfOperations()
-          .getComponent(SliderKeys.COMPONENT_AM).get(SliderXmlConfKeys.KEY_KEYTAB_PRINCIPAL);
-      if(SliderUtils.isUnset(principal)) {
-        // if no login identity is available, fail
-        UserGroupInformation loginUser = null;
-        try {
-          loginUser = getLoginUser();
-        } catch (IOException e) {
-          throw new SliderException(EXIT_UNAUTHORIZED, e,
-                                    "No principal configured for the application and "
-                                    + "exception raised during retrieval of login user. "
-                                    + "Unable to proceed with application "
-                                    + "initialization.  Please ensure a value "
-                                    + "for %s exists in the application "
-                                    + "configuration or the login issue is addressed",
-                                    SliderXmlConfKeys.KEY_KEYTAB_PRINCIPAL);
-        }
-        if (loginUser == null) {
-          throw new SliderException(EXIT_UNAUTHORIZED,
-                                    "No principal configured for the application "
-                                    + "and no login user found. "
-                                    + "Unable to proceed with application "
-                                    + "initialization.  Please ensure a value "
-                                    + "for %s exists in the application "
-                                    + "configuration or the login issue is addressed",
-                                    SliderXmlConfKeys.KEY_KEYTAB_PRINCIPAL);
-        }
-      }
-      // ensure that either local or distributed keytab mechanism is enabled,
-      // but not both
-      String keytabFullPath = instanceDefinition.getAppConfOperations()
-          .getComponent(SliderKeys.COMPONENT_AM)
-          .get(SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH);
-      String keytabName = instanceDefinition.getAppConfOperations()
-          .getComponent(SliderKeys.COMPONENT_AM)
-          .get(SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME);
-      if (SliderUtils.isSet(keytabFullPath) && SliderUtils.isSet(keytabName)) {
-        throw new SliderException(EXIT_UNAUTHORIZED,
-                                  "Both a keytab on the cluster host (%s) and a"
-                                  + " keytab to be retrieved from HDFS (%s) are"
-                                  + " specified.  Please configure only one keytab"
-                                  + " retrieval mechanism.",
-                                  SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH,
-                                  SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME);
-
-      }
-    }
-  }
-
-  protected UserGroupInformation getLoginUser() throws IOException {
-    return UserGroupInformation.getLoginUser();
-  }
-
-  public boolean isSecurityEnabled () {
-    return SliderUtils.isHadoopClusterSecure(configuration);
-  }
-
-  public String getPrincipal () throws IOException {
-    String principal = instanceDefinition.getAppConfOperations()
-        .getComponent(SliderKeys.COMPONENT_AM).get(SliderXmlConfKeys.KEY_KEYTAB_PRINCIPAL);
-    if (SliderUtils.isUnset(principal)) {
-      principal = UserGroupInformation.getLoginUser().getShortUserName();
-      log.info("No principal set in the slider configuration.  Will use AM login"
-               + " identity {} to attempt keytab-based login", principal);
-    }
-
-    return principal;
-  }
-
-  public boolean isKeytabProvided() {
-    boolean keytabProvided = instanceDefinition.getAppConfOperations()
-                    .getComponent(SliderKeys.COMPONENT_AM)
-                    .get(SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH) != null ||
-                instanceDefinition.getAppConfOperations()
-                    .getComponent(SliderKeys.COMPONENT_AM).
-                    get(SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME) != null;
-    return keytabProvided;
-
-  }
-
-  public File getKeytabFile(AggregateConf instanceDefinition)
-      throws SliderException, IOException {
-    //TODO implement this for dash semantic
-    String keytabFullPath = instanceDefinition.getAppConfOperations()
-        .getComponent(SliderKeys.COMPONENT_AM)
-        .get(SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH);
-    File localKeytabFile;
-    if (SliderUtils.isUnset(keytabFullPath)) {
-      // get the keytab
-      String keytabName = instanceDefinition.getAppConfOperations()
-          .getComponent(SliderKeys.COMPONENT_AM).
-              get(SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME);
-      log.info("No host keytab file path specified. Will attempt to retrieve"
-               + " keytab file {} as a local resource for the container",
-               keytabName);
-      // download keytab to local, protected directory
-      localKeytabFile = new File(SliderKeys.KEYTAB_DIR, keytabName);
-    } else {
-      log.info("Using host keytab file {} for login", keytabFullPath);
-      localKeytabFile = new File(keytabFullPath);
-    }
-    return localKeytabFile;
-  }
-
+//  private void validate() throws SliderException {
+//    if (isSecurityEnabled()) {
+//      String principal = instanceDefinition.getAppConfOperations()
+//          .getComponent(SliderKeys.COMPONENT_AM).get(SliderXmlConfKeys.KEY_KEYTAB_PRINCIPAL);
+//      if(SliderUtils.isUnset(principal)) {
+//        // if no login identity is available, fail
+//        UserGroupInformation loginUser = null;
+//        try {
+//          loginUser = getLoginUser();
+//        } catch (IOException e) {
+//          throw new SliderException(EXIT_UNAUTHORIZED, e,
+//                                    "No principal configured for the application and "
+//                                    + "exception raised during retrieval of login user. "
+//                                    + "Unable to proceed with application "
+//                                    + "initialization.  Please ensure a value "
+//                                    + "for %s exists in the application "
+//                                    + "configuration or the login issue is addressed",
+//                                    SliderXmlConfKeys.KEY_KEYTAB_PRINCIPAL);
+//        }
+//        if (loginUser == null) {
+//          throw new SliderException(EXIT_UNAUTHORIZED,
+//                                    "No principal configured for the application "
+//                                    + "and no login user found. "
+//                                    + "Unable to proceed with application "
+//                                    + "initialization.  Please ensure a value "
+//                                    + "for %s exists in the application "
+//                                    + "configuration or the login issue is addressed",
+//                                    SliderXmlConfKeys.KEY_KEYTAB_PRINCIPAL);
+//        }
+//      }
+//      // ensure that either local or distributed keytab mechanism is enabled,
+//      // but not both
+//      String keytabFullPath = instanceDefinition.getAppConfOperations()
+//          .getComponent(SliderKeys.COMPONENT_AM)
+//          .get(SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH);
+//      String keytabName = instanceDefinition.getAppConfOperations()
+//          .getComponent(SliderKeys.COMPONENT_AM)
+//          .get(SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME);
+//      if (SliderUtils.isSet(keytabFullPath) && SliderUtils.isSet(keytabName)) {
+//        throw new SliderException(EXIT_UNAUTHORIZED,
+//                                  "Both a keytab on the cluster host (%s) and a"
+//                                  + " keytab to be retrieved from HDFS (%s) are"
+//                                  + " specified.  Please configure only one keytab"
+//                                  + " retrieval mechanism.",
+//                                  SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH,
+//                                  SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME);
+//
+//      }
+//    }
+//  }
+//
+//  protected UserGroupInformation getLoginUser() throws IOException {
+//    return UserGroupInformation.getLoginUser();
+//  }
+//
+//  public boolean isSecurityEnabled () {
+//    return SliderUtils.isHadoopClusterSecure(configuration);
+//  }
+//
+//  public String getPrincipal () throws IOException {
+//    String principal = instanceDefinition.getAppConfOperations()
+//        .getComponent(SliderKeys.COMPONENT_AM).get(SliderXmlConfKeys.KEY_KEYTAB_PRINCIPAL);
+//    if (SliderUtils.isUnset(principal)) {
+//      principal = UserGroupInformation.getLoginUser().getShortUserName();
+//      log.info("No principal set in the slider configuration.  Will use AM login"
+//               + " identity {} to attempt keytab-based login", principal);
+//    }
+//
+//    return principal;
+//  }
+//
+//  public boolean isKeytabProvided() {
+//    boolean keytabProvided = instanceDefinition.getAppConfOperations()
+//                    .getComponent(SliderKeys.COMPONENT_AM)
+//                    .get(SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH) != null ||
+//                instanceDefinition.getAppConfOperations()
+//                    .getComponent(SliderKeys.COMPONENT_AM).
+//                    get(SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME) != null;
+//    return keytabProvided;
+//
+//  }
+//
+//  public File getKeytabFile(AggregateConf instanceDefinition)
+//      throws SliderException, IOException {
+//    //TODO implement this for dash semantic
+//    String keytabFullPath = instanceDefinition.getAppConfOperations()
+//        .getComponent(SliderKeys.COMPONENT_AM)
+//        .get(SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH);
+//    File localKeytabFile;
+//    if (SliderUtils.isUnset(keytabFullPath)) {
+//      // get the keytab
+//      String keytabName = instanceDefinition.getAppConfOperations()
+//          .getComponent(SliderKeys.COMPONENT_AM).
+//              get(SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME);
+//      log.info("No host keytab file path specified. Will attempt to retrieve"
+//               + " keytab file {} as a local resource for the container",
+//               keytabName);
+//      // download keytab to local, protected directory
+//      localKeytabFile = new File(SliderKeys.KEYTAB_DIR, keytabName);
+//    } else {
+//      log.info("Using host keytab file {} for login", keytabFullPath);
+//      localKeytabFile = new File(keytabFullPath);
+//    }
+//    return localKeytabFile;
+//  }

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL27 DEL40 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL27 DEL40 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL45 DEL45 DEL45 DEL27 DEL40 DEL40 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL33 DEL27 DEL27 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31