HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.

-    // Path must be absolute.
-    if (!src.startsWith(Path.SEPARATOR)) {
-      return false;
-    }
-      
-    // Check for ".." "." ":" "/"
-    String[] components = StringUtils.split(src, '/');
-    for (int i = 0; i < components.length; i++) {
-      String element = components[i];
-      if (element.equals(".")  ||
-          (element.indexOf(":") >= 0)  ||
-          (element.indexOf("/") >= 0)) {
-        return false;
-      }
-      // ".." is allowed in path starting with /.reserved/.inodes
-      if (element.equals("..")) {
-        if (components.length > 4
-            && components[1].equals(FSDirectory.DOT_RESERVED_STRING)
-            && components[2].equals(FSDirectory.DOT_INODES_STRING)) {
-          continue;
-        }
-        return false;
-      }
-      // The string may start or end with a /, but not have
-      // "//" in the middle.
-      if (element.isEmpty() && i != components.length - 1 &&
-          i != 0) {
-        return false;
-      }
-    }
-    return true;
+    return DFSUtilClient.isValidName(src);
-    return str.getBytes(Charsets.UTF_8);
+    return DFSUtilClient.string2Bytes(str);
-  
-  /**
-   * Convert a LocatedBlocks to BlockLocations[]
-   * @param blocks a LocatedBlocks
-   * @return an array of BlockLocations
-   */
-  public static BlockLocation[] locatedBlocks2Locations(LocatedBlocks blocks) {
-    if (blocks == null) {
-      return new BlockLocation[0];
-    }
-    return locatedBlocks2Locations(blocks.getLocatedBlocks());
-  }
-  
-  /**
-   * Convert a List<LocatedBlock> to BlockLocation[]
-   * @param blocks A List<LocatedBlock> to be converted
-   * @return converted array of BlockLocation
-   */
-  public static BlockLocation[] locatedBlocks2Locations(List<LocatedBlock> blocks) {
-    if (blocks == null) {
-      return new BlockLocation[0];
-    }
-    int nrBlocks = blocks.size();
-    BlockLocation[] blkLocations = new BlockLocation[nrBlocks];
-    if (nrBlocks == 0) {
-      return blkLocations;
-    }
-    int idx = 0;
-    for (LocatedBlock blk : blocks) {
-      assert idx < nrBlocks : "Incorrect index";
-      DatanodeInfo[] locations = blk.getLocations();
-      String[] hosts = new String[locations.length];
-      String[] xferAddrs = new String[locations.length];
-      String[] racks = new String[locations.length];
-      for (int hCnt = 0; hCnt < locations.length; hCnt++) {
-        hosts[hCnt] = locations[hCnt].getHostName();
-        xferAddrs[hCnt] = locations[hCnt].getXferAddr();
-        NodeBase node = new NodeBase(xferAddrs[hCnt],
-                                     locations[hCnt].getNetworkLocation());
-        racks[hCnt] = node.toString();
-      }
-      DatanodeInfo[] cachedLocations = blk.getCachedLocations();
-      String[] cachedHosts = new String[cachedLocations.length];
-      for (int i=0; i<cachedLocations.length; i++) {
-        cachedHosts[i] = cachedLocations[i].getHostName();
-      }
-      blkLocations[idx] = new BlockLocation(xferAddrs, hosts, cachedHosts,
-                                            racks,
-                                            blk.getStartOffset(),
-                                            blk.getBlockSize(),
-                                            blk.isCorrupt());
-      idx++;
-    }
-    return blkLocations;
-  }

INS41 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 INS42 DEL42 DEL42 DEL40 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL13 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL34 DEL27 DEL36 DEL42 DEL42 DEL45 DEL32 DEL34 DEL27 DEL36 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL40 DEL34 DEL27 DEL42 DEL34 DEL2 DEL42 DEL40 DEL32 DEL27 DEL42 DEL34 DEL2 DEL42 DEL40 DEL32 DEL27 DEL18 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL40 DEL34 DEL27 DEL27 DEL27 DEL42 DEL34 DEL27 DEL27 DEL9 DEL41 DEL8 DEL25 DEL8 DEL24 DEL9 DEL41 DEL40 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL41 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL27 DEL45 DEL6 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL37 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31