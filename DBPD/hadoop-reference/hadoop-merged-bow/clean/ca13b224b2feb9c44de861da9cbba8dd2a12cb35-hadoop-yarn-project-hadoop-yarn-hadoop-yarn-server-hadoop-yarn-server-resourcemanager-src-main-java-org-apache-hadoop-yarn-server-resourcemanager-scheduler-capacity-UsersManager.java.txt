YARN-5892. Support user-specific minimum user limit percentage in Capacity Scheduler. Contributed by Eric Payne.

+  private float activeUsersTimesWeights = 0.0f;
+  private float allUsersTimesWeights = 0.0f;
+
+    private float weight;
+
+    /**
+     * @return the weight
+     */
+    public float getWeight() {
+      return weight;
+    }
+
+    /**
+     * @param weight the weight to set
+     */
+    public void setWeight(float weight) {
+      this.weight = weight;
+    }
+      activeUsersTimesWeights = sumActiveUsersTimesWeights();
+      allUsersTimesWeights = sumAllUsersTimesWeights();
+    user.setWeight(getUserWeightFromQueue(userName));
+    allUsersTimesWeights = sumAllUsersTimesWeights();
-                user.getResourceUsage()));
+                user.getResourceUsage(), user.getWeight(),
+                activeUsersSet.contains(user.userName)));
+  private float getUserWeightFromQueue(String userName) {
+    Float weight = lQueue.getUserWeights().get(userName);
+    return (weight == null) ? 1.0f : weight.floatValue();
+  }
+
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("userLimit is fetched. userLimit = "
-          + userLimitPerSchedulingMode.get(schedulingMode) + ", schedulingMode="
-          + schedulingMode + ", partition=" + nodePartition);
+    Resource userLimitResource = userLimitPerSchedulingMode.get(schedulingMode);
+    User user = getUser(userName);
+    float weight = (user == null) ? 1.0f : user.getWeight();
+    Resource userSpecificUserLimit =
+        Resources.multiplyAndNormalizeDown(resourceCalculator,
+            userLimitResource, weight, lQueue.getMinimumAllocation());
+
+    if (user != null) {
+      user.setUserResourceLimit(userSpecificUserLimit);
-    return userLimitPerSchedulingMode.get(schedulingMode);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("userLimit is fetched. userLimit=" + userLimitResource
+          + ", userSpecificUserLimit=" + userSpecificUserLimit
+          + ", schedulingMode=" + schedulingMode
+          + ", partition=" + nodePartition);
+    }
+    return userSpecificUserLimit;
+    Resource userLimitResource = userLimitPerSchedulingMode.get(schedulingMode);
+    User user = getUser(userName);
+    float weight = (user == null) ? 1.0f : user.getWeight();
+    Resource userSpecificUserLimit =
+        Resources.multiplyAndNormalizeDown(resourceCalculator,
+            userLimitResource, weight, lQueue.getMinimumAllocation());
+
-      LOG.debug("userLimit is fetched. userLimit = "
-          + userLimitPerSchedulingMode.get(schedulingMode) + ", schedulingMode="
-          + schedulingMode + ", partition=" + nodePartition);
+      LOG.debug("userLimit is fetched. userLimit=" + userLimitResource
+          + ", userSpecificUserLimit=" + userSpecificUserLimit
+          + ", schedulingMode=" + schedulingMode
+          + ", partition=" + nodePartition);
-    return userLimitPerSchedulingMode.get(schedulingMode);
+    return userSpecificUserLimit;
-     * We want to base the userLimit calculation on max(queueCapacity,
-     * usedResources+required). However, we want usedResources to be based on
-     * the combined ratios of all the users in the queue so we use consumedRatio
-     * to calculate such. The calculation is dependent on how the
-     * resourceCalculator calculates the ratio between two Resources. DRF
-     * Example: If usedResources is greater than queueCapacity and users have
-     * the following [mem,cpu] usages: User1: [10%,20%] - Dominant resource is
-     * 20% User2: [30%,10%] - Dominant resource is 30% Then total consumedRatio
-     * is then 20+30=50%. Yes, this value can be larger than 100% but for the
-     * purposes of making sure all users are getting their fair share, it works.
+     * We want to base the userLimit calculation on
+     * max(queueCapacity, usedResources+required). However, we want
+     * usedResources to be based on the combined ratios of all the users in the
+     * queue so we use consumedRatio to calculate such.
+     * The calculation is dependent on how the resourceCalculator calculates the
+     * ratio between two Resources. DRF Example: If usedResources is greater
+     * than queueCapacity and users have the following [mem,cpu] usages:
+     *
+     * User1: [10%,20%] - Dominant resource is 20%
+     * User2: [30%,10%] - Dominant resource is 30%
+     * Then total consumedRatio is then 20+30=50%. Yes, this value can be
+     * larger than 100% but for the purposes of making sure all users are
+     * getting their fair share, it works.
-    int usersCount = getNumActiveUsers();
+    float usersSummedByWeight = activeUsersTimesWeights;
-      usersCount = users.size();
+      usersSummedByWeight = allUsersTimesWeights;
-     * User limit resource is determined by: max{currentCapacity / #activeUsers,
+     * User limit resource is determined by: max(currentCapacity / #activeUsers,
-            usersCount),
+            usersSummedByWeight),
-      LOG.debug("User limit computation for " + userName + " in queue "
-          + lQueue.getQueueName() + " userLimitPercent=" + lQueue.getUserLimit()
-          + " userLimitFactor=" + lQueue.getUserLimitFactor() + " required: "
-          + required + " consumed: " + consumed + " user-limit-resource: "
-          + userLimitResource + " queueCapacity: " + queueCapacity
-          + " qconsumed: " + lQueue.getQueueResourceUsage().getUsed()
-          + " currentCapacity: " + currentCapacity + " activeUsers: "
-          + usersCount + " clusterCapacity: " + clusterResource
-          + " resourceByLabel: " + partitionResource + " usageratio: "
-          + getUsageRatio(nodePartition) + " Partition: " + nodePartition);
+      LOG.debug("User limit computation for " + userName
+          + ",  in queue: " + lQueue.getQueueName()
+          + ",  userLimitPercent=" + lQueue.getUserLimit()
+          + ",  userLimitFactor=" + lQueue.getUserLimitFactor()
+          + ",  required=" + required
+          + ",  consumed=" + consumed
+          + ",  user-limit-resource=" + userLimitResource
+          + ",  queueCapacity=" + queueCapacity
+          + ",  qconsumed=" + lQueue.getQueueResourceUsage().getUsed()
+          + ",  currentCapacity=" + currentCapacity
+          + ",  activeUsers=" + usersSummedByWeight
+          + ",  clusterCapacity=" + clusterResource
+          + ",  resourceByLabel=" + partitionResource
+          + ",  usageratio=" + getUsageRatio(nodePartition)
+          + ",  Partition=" + nodePartition
+          + ",  resourceUsed=" + resourceUsed
+          + ",  maxUserLimit=" + maxUserLimit
+          + ",  userWeight=" + getUser(userName).getWeight()
+      );
-    getUser(userName).setUserResourceLimit(userLimitResource);
+  float sumActiveUsersTimesWeights() {
+    float count = 0.0f;
+    try {
+      this.readLock.lock();
+      for (String u : activeUsersSet) {
+        count += getUser(u).getWeight();
+      }
+      return count;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  float sumAllUsersTimesWeights() {
+    float count = 0.0f;
+    try {
+      this.readLock.lock();
+      for (String u : users.keySet()) {
+        count += getUser(u).getWeight();
+      }
+      return count;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+        activeUsersTimesWeights = sumActiveUsersTimesWeights();
+        activeUsersTimesWeights = sumActiveUsersTimesWeights();
+
+  public void updateUserWeights() {
+    try {
+      this.writeLock.lock();
+      for (Map.Entry<String, User> ue : users.entrySet()) {
+        ue.getValue().setWeight(getUserWeightFromQueue(ue.getKey()));
+      }
+      activeUsersTimesWeights = sumActiveUsersTimesWeights();
+      allUsersTimesWeights = sumAllUsersTimesWeights();
+      userLimitNeedsRecompute();
+    } finally {
+      this.writeLock.unlock();
+    }
+  }

INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS23 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS34 INS42 INS34 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS21 INS21 INS43 INS42 INS60 INS41 INS60 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS60 INS25 INS60 INS54 INS60 INS54 INS54 INS42 INS65 INS41 INS65 INS39 INS42 INS21 INS32 INS7 INS42 INS43 INS59 INS16 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS27 INS8 MOV32 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 MOV32 MOV8 INS42 UPD39 INS39 INS59 INS8 INS8 INS39 INS59 INS8 INS8 INS8 INS8 INS66 INS42 INS42 INS66 INS7 INS21 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS36 INS34 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS16 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS16 INS42 INS42 INS32 UPD42 INS42 INS42 INS34 INS21 INS70 INS41 INS21 INS42 INS34 INS21 INS70 INS41 INS21 INS21 INS70 INS21 INS21 INS21 INS21 INS22 INS42 INS7 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS36 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS36 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS44 INS42 INS8 INS42 INS32 INS32 INS44 INS32 INS8 INS42 INS32 INS32 INS44 INS32 INS8 INS7 INS7 INS32 INS32 INS52 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS33 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS22 INS42 INS43 INS42 INS21 INS22 INS42 INS22 INS42 INS43 INS42 INS42 INS42 INS21 INS22 INS42 INS21 INS21 INS22 INS42 INS74 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS32 INS42 INS22 INS42 INS42 INS42 INS42 INS33 UPD45 INS42 INS45 INS42 INS42 INS33 UPD45 INS42 INS45 INS42 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD42 UPD45 UPD45 UPD45 UPD45 INS45 INS42 INS45 INS42 INS45 MOV32 INS52 INS42 INS42 INS7 INS52 INS42 INS52 INS42 INS42 INS7 INS52 INS42 INS7 INS7 INS52 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS52 INS42 UPD42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS40 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL21