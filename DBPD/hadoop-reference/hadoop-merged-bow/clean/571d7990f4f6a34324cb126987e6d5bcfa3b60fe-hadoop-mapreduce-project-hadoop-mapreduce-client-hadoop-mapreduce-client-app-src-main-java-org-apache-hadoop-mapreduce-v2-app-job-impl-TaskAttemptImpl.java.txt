Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import org.apache.hadoop.mapreduce.filecache.DistributedCache;
+import org.apache.hadoop.util.StringUtils;
-import org.apache.hadoop.yarn.api.ApplicationConstants;
+import org.apache.hadoop.yarn.api.records.ApplicationAccessType;
+import org.apache.hadoop.yarn.api.records.NodeId;
+import org.apache.hadoop.yarn.util.Apps;
+import org.apache.hadoop.yarn.util.BuilderUtils;
+
+  private String trackerName;
+  private int httpPort;
-  private String nodeHostName;
+  private NodeId containerNodeId;
+  private String nodeRackName;
+  
+  private static final String LINE_SEPARATOR = System
+      .getProperty("line.separator");
+   * @param applicationACLs 
-  private ContainerLaunchContext createContainerLaunchContext() {
+  private ContainerLaunchContext createContainerLaunchContext(
+      Map<ApplicationAccessType, String> applicationACLs) {
-      MRApps.addToEnvironment(
+      Apps.addToEnvironment(
-    ContainerLaunchContext container =
-        recordFactory.newRecordInstance(ContainerLaunchContext.class);
-    container.setContainerId(containerID);
-    container.setUser(conf.get(MRJobConfig.USER_NAME));
-    container.setResource(assignedCapability);
-    container.setLocalResources(localResources);
-    container.setEnvironment(environment);
-    container.setCommands(commands);
-    container.setServiceData(serviceData);
-    container.setContainerTokens(tokens);
-    
+    ContainerLaunchContext container = BuilderUtils
+        .newContainerLaunchContext(containerID, conf
+            .get(MRJobConfig.USER_NAME), assignedCapability, localResources,
+            environment, commands, serviceData, tokens, applicationACLs);
+
+  
+  /**
+   * If container Assigned then return the node's rackname, otherwise null.
+   */
+  @Override
+  public String getNodeRackName() {
+    this.readLock.lock();
+    try {
+      return this.nodeRackName;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
-      result.setDiagnosticInfo(reportedStatus.diagnosticInfo);
+      result.setDiagnosticInfo(StringUtils.join(LINE_SEPARATOR, getDiagnostics()));
+      result.setContainerId(this.getAssignedContainerID());
+      result.setNodeManagerHost(trackerName);
+      result.setNodeManagerHttpPort(httpPort);
+      if (this.containerNodeId != null) {
+        result.setNodeManagerPort(this.containerNodeId.getPort());
+      }
-        taskAttempt.getMemoryRequired(taskAttempt.conf, taskType);
+       taskAttempt.getMemoryRequired(taskAttempt.conf, taskType);
-  private static TaskAttemptUnsuccessfulCompletionEvent createTaskAttemptUnsuccessfulCompletionEvent(
-      TaskAttemptImpl taskAttempt, TaskAttemptState attemptState) {
-    TaskAttemptUnsuccessfulCompletionEvent tauce = new TaskAttemptUnsuccessfulCompletionEvent(
-        TypeConverter.fromYarn(taskAttempt.attemptId),
-        TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),
-        attemptState.toString(), taskAttempt.finishTime,
-        taskAttempt.nodeHostName == null ? "UNKNOWN" : taskAttempt.nodeHostName,
-        taskAttempt.reportedStatus.diagnosticInfo.toString(),
-        taskAttempt.getProgressSplitBlock().burst());
+  private static
+      TaskAttemptUnsuccessfulCompletionEvent
+      createTaskAttemptUnsuccessfulCompletionEvent(TaskAttemptImpl taskAttempt,
+          TaskAttemptState attemptState) {
+    TaskAttemptUnsuccessfulCompletionEvent tauce =
+        new TaskAttemptUnsuccessfulCompletionEvent(
+            TypeConverter.fromYarn(taskAttempt.attemptId),
+            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId()
+                .getTaskType()), attemptState.toString(),
+            taskAttempt.finishTime,
+            taskAttempt.containerMgrAddress == null ? "UNKNOWN"
+                : taskAttempt.containerMgrAddress, StringUtils.join(
+                LINE_SEPARATOR, taskAttempt.getDiagnostics()), taskAttempt
+                .getProgressSplitBlock().burst());
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "deprecation" })
-      TaskAttemptContainerAssignedEvent cEvent = 
+      final TaskAttemptContainerAssignedEvent cEvent = 
-      taskAttempt.nodeHostName = cEvent.getContainer().getNodeId().getHost();
-      taskAttempt.containerMgrAddress = cEvent.getContainer().getNodeId()
+      taskAttempt.containerNodeId = cEvent.getContainer().getNodeId();
+      taskAttempt.containerMgrAddress = taskAttempt.containerNodeId
+      taskAttempt.nodeRackName = RackResolver.resolve(
+          taskAttempt.containerNodeId.getHost()).getNetworkLocation();
+      taskAttempt.taskAttemptListener.registerPendingTask(taskAttempt.jvmID);
-          return taskAttempt.createContainerLaunchContext();
+          return taskAttempt.createContainerLaunchContext(cEvent
+              .getApplicationACLs());
+      taskAttempt.shufflePort = event.getShufflePort();
+
-      taskAttempt.taskAttemptListener.register(
+      taskAttempt.taskAttemptListener.registerLaunchedTask(
+      taskAttempt.trackerName = nodeHttpInetAddr.getHostName();
+      taskAttempt.httpPort = nodeHttpInetAddr.getPort();
+      LOG.info("TaskAttempt: [" + taskAttempt.attemptId
+          + "] using containerId: [" + taskAttempt.containerID + " on NM: ["
+          + taskAttempt.containerMgrAddress + "]");
-            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort());
+            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),
+            taskAttempt.shufflePort, taskAttempt.containerID);
-      taskAttempt.shufflePort = event.getShufflePort();
+      @SuppressWarnings("deprecation")
-         finishTime, this.nodeHostName == null ? "UNKNOWN" : this.nodeHostName,
+         finishTime,
+         this.containerNodeId == null ? "UNKNOWN"
+             : this.containerNodeId.getHost(),
+         this.nodeRackName == null ? "UNKNOWN" : this.nodeRackName,
-         finishTime, this.containerMgrAddress == null ? "UNKNOWN" : this.containerMgrAddress,
+         finishTime,
+         this.containerNodeId == null ? "UNKNOWN"
+                                         : this.containerNodeId.getHost(),
+         this.nodeRackName == null ? "UNKNOWN" : this.nodeRackName,
-      //add to diagnostic
-      taskAttempt.addDiagnosticInfo(newReportedStatus.diagnosticInfo);
-    result.diagnosticInfo = "";

MOV26 MOV26 MOV26 INS26 INS26 MOV23 INS40 UPD40 UPD40 UPD40 INS40 INS23 INS23 INS23 INS23 INS31 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS44 INS29 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS65 INS74 INS42 INS60 INS65 INS42 INS42 INS21 INS54 MOV21 MOV21 INS42 INS42 INS45 INS42 INS66 INS43 INS43 INS43 MOV43 INS59 INS66 INS32 INS8 INS8 INS4 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 MOV42 INS32 INS22 INS42 INS41 INS21 INS21 INS21 INS21 INS25 INS45 INS45 INS83 INS7 INS32 INS7 INS7 INS32 MOV43 INS79 UPD42 MOV42 UPD42 MOV42 MOV42 MOV32 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS22 INS32 INS32 INS32 INS32 INS27 INS8 UPD40 MOV32 INS40 INS32 UPD40 INS40 INS42 INS40 UPD42 INS40 INS32 INS40 INS32 INS42 INS42 INS27 INS42 INS45 UPD42 INS52 INS42 INS22 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS33 INS21 UPD40 UPD42 INS42 INS42 INS32 INS40 INS42 UPD42 INS42 INS42 INS42 INS42 INS45 INS40 INS45 INS40 INS45 INS40 INS45 MOV43 INS40 INS40 INS52 INS42 INS42 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS32 UPD40 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS16 INS16 INS42 INS42 INS42 INS32 INS40 UPD42 MOV42 INS27 INS45 INS32 INS32 INS27 INS45 INS22 INS22 INS42 INS22 INS33 INS22 INS42 UPD42 INS22 INS42 INS22 INS33 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 UPD42 MOV52 UPD42 MOV42 INS52 INS42 INS32 INS42 INS42 DEL42 DEL43 DEL42 DEL57 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL40 DEL40 DEL45 DEL42 DEL32 DEL32 DEL22 DEL42 DEL42 DEL40 DEL32 DEL21 DEL40 DEL45 DEL7 DEL21