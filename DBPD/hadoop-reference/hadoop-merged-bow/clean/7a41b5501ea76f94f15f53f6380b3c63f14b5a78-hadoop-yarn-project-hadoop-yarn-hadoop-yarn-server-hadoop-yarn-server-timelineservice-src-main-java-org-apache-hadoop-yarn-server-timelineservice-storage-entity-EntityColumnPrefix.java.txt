YARN-4025. Deal with byte representations of Longs in writer code. Contributed by Sangjin Lee and Vrushali C.

+   * #store(byte[],
+   * org.apache.hadoop.yarn.server.timelineservice.storage.common.
+   * TypedBufferedMutator, java.lang.String, java.lang.Long, java.lang.Object)
+   */
+  public void store(byte[] rowKey,
+      TypedBufferedMutator<EntityTable> tableMutator, byte[] qualifier,
+      Long timestamp, Object inputValue) throws IOException {
+
+    // Null check
+    if (qualifier == null) {
+      throw new IOException("Cannot store column with null qualifier in "
+          + tableMutator.getName().getNameAsString());
+    }
+
+    byte[] columnQualifier =
+        ColumnHelper.getColumnQualifier(this.columnPrefixBytes, qualifier);
+
+    column.store(rowKey, tableMutator, columnQualifier, timestamp, inputValue);
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see
+   * org.apache.hadoop.yarn.server.timelineservice.storage.common.ColumnPrefix
+  /**
+   * @param result from which to read columns
+   * @return the latest values of columns in the column family. The column
+   *         qualifier is returned as a list of parts, each part a byte[]. This
+   *         is to facilitate returning byte arrays of values that were not
+   *         Strings. If they can be treated as Strings, you should use
+   *         {@link #readResults(Result)} instead.
+   * @throws IOException
+   */
+  public Map<?, Object> readResultsHavingCompoundColumnQualifiers(Result result)
+          throws IOException {
+    return column.readResultsHavingCompoundColumnQualifiers(result,
+        columnPrefixBytes);
+  }
+

INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS43 INS8 INS5 INS42 INS74 INS42 INS5 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS60 INS21 INS65 INS65 INS65 INS43 INS76 INS43 INS43 INS42 INS42 INS41 INS39 INS85 INS43 INS43 INS39 INS85 INS42 INS42 INS27 INS8 INS5 INS59 INS32 INS42 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS53 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS68 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS22 INS42 INS42 INS69 INS43 INS27 INS52 INS42 INS43 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42