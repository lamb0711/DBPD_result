HDFS-12284. RBF: Support for Kerberos authentication. Contributed by Sherwood Zheng and Inigo Goiri.

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_HTTP_POLICY_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY;
+import org.apache.hadoop.http.HttpConfig;
+    private int httpsPort;
-      this.httpPort = nn.getHttpAddress().getPort();
+      if (nn.getHttpAddress() != null) {
+        this.httpPort = nn.getHttpAddress().getPort();
+      }
+      if (nn.getHttpsAddress() != null) {
+        this.httpsPort = nn.getHttpsAddress().getPort();
+      }
+    public String getWebAddress() {
+      if (conf.get(DFS_HTTP_POLICY_KEY)
+          .equals(HttpConfig.Policy.HTTPS_ONLY.name())) {
+        return getHttpsAddress();
+      }
+      return getHttpAddress();
+    }
+
+    public String getHttpsAddress() {
+      return namenode.getHttpsAddress().getHostName() + ":" + httpsPort;
+    }
+
-      long heartbeatInterval, long cacheFlushInterval) {
+      long heartbeatInterval, long cacheFlushInterval,
+      Configuration overrideConf) {
-    configureNameservices(numNameservices, numNamenodes);
+    configureNameservices(numNameservices, numNamenodes, overrideConf);
+  }
+
+  public MiniRouterDFSCluster(
+      boolean ha, int numNameservices, int numNamenodes,
+      long heartbeatInterval, long cacheFlushInterval) {
+    this(ha, numNameservices, numNamenodes,
+        heartbeatInterval, cacheFlushInterval, null);
-        DEFAULT_HEARTBEAT_INTERVAL_MS, DEFAULT_CACHE_INTERVAL_MS);
+        DEFAULT_HEARTBEAT_INTERVAL_MS, DEFAULT_CACHE_INTERVAL_MS,
+        null);
-        DEFAULT_HEARTBEAT_INTERVAL_MS, DEFAULT_CACHE_INTERVAL_MS);
+        DEFAULT_HEARTBEAT_INTERVAL_MS, DEFAULT_CACHE_INTERVAL_MS,
+        null);
+  }
+
+  public MiniRouterDFSCluster(boolean ha, int numNameservices,
+      Configuration overrideConf) {
+    this(ha, numNameservices, 2,
+        DEFAULT_HEARTBEAT_INTERVAL_MS, DEFAULT_CACHE_INTERVAL_MS, overrideConf);
+        conf.set(DFS_NAMENODE_HTTPS_ADDRESS_KEY + "." + suffix,
+            "127.0.0.1:" + context.httpsPort);
-  public void configureNameservices(int numNameservices, int numNamenodes) {
+  public void configureNameservices(int numNameservices, int numNamenodes,
+      Configuration overrideConf) {
+      if (overrideConf != null) {
+        nnConf.addResource(overrideConf);
+      }
+
-            nn.getLifelineAddress(), nn.getHttpAddress());
+            nn.getLifelineAddress(), nn.getWebAddress());

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS23 INS31 INS31 INS44 INS83 INS42 MOV44 MOV44 MOV44 INS44 INS44 INS8 INS44 INS44 INS44 INS83 INS42 INS44 INS44 INS44 INS8 INS44 INS83 INS39 INS59 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS43 INS42 INS39 INS42 INS39 INS42 INS17 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS17 INS43 INS42 INS42 INS25 INS25 INS42 INS25 INS41 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS33 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS32 INS8 INS32 INS27 INS42 INS25 INS32 INS33 MOV21 INS32 INS33 INS21 INS32 INS42 INS32 INS41 INS42 INS32 INS45 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS42 INS21 INS42 INS33 INS21 INS22 INS32 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS32 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS40 UPD42