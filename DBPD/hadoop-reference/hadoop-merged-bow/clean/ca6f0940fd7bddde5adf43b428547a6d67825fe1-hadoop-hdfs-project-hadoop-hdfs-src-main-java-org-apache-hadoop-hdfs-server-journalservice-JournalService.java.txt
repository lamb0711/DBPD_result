Merge trunk into auto-failover branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1310905 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.protocol.FenceResponse;
+import org.apache.hadoop.hdfs.server.protocol.FencedException;
+import org.apache.hadoop.hdfs.server.protocol.JournalInfo;
+import com.google.common.annotations.VisibleForTesting;
+  private long epoch = 0;
+  private String fencerInfo;
-    synchronized void startLogSegment() throws IOException {
+    synchronized void startLogSegment() {
-  public void journal(NamenodeRegistration registration, long firstTxnId,
+  public void journal(JournalInfo journalInfo, long epoch, long firstTxnId,
-    verify(registration);
+    verify(epoch, journalInfo);
-  public void startLogSegment(NamenodeRegistration registration, long txid)
+  public void startLogSegment(JournalInfo journalInfo, long epoch, long txid)
-    verify(registration);
+    verify(epoch, journalInfo);
+  @Override
+  public FenceResponse fence(JournalInfo journalInfo, long epoch,
+      String fencerInfo) throws IOException {
+    LOG.info("Fenced by " + fencerInfo + " with epoch " + epoch);
+    verifyFence(epoch, fencerInfo);
+    verify(journalInfo);
+    long previousEpoch = epoch;
+    this.epoch = epoch;
+    this.fencerInfo = fencerInfo;
+    
+    // TODO:HDFS-3092 set lastTransId and inSync
+    return new FenceResponse(previousEpoch, 0, false);
+  }
+
-  private void verify(NamenodeRegistration reg) throws IOException {
-    if (!registration.getRegistrationID().equals(reg.getRegistrationID())) {
-      LOG.warn("Invalid registrationID - expected: "
-          + registration.getRegistrationID() + " received: "
-          + reg.getRegistrationID());
-      throw new UnregisteredNodeException(reg);
+  private void verifyEpoch(long e) throws FencedException {
+    if (epoch != e) {
+      String errorMsg = "Epoch " + e + " is not valid. "
+          + "Resource has already been fenced by " + fencerInfo
+          + " with epoch " + epoch;
+      LOG.warn(errorMsg);
+      throw new FencedException(errorMsg);
+  private void verifyFence(long e, String fencer) throws FencedException {
+    if (e <= epoch) {
+      String errorMsg = "Epoch " + e + " from fencer " + fencer
+          + " is not valid. " + "Resource has already been fenced by "
+          + fencerInfo + " with epoch " + epoch;
+      LOG.warn(errorMsg);
+      throw new FencedException(errorMsg);
+    }
+  }
+  
+  /** 
+   * Verifies a journal request
+   */
+  private void verify(JournalInfo journalInfo) throws IOException {
+    String errorMsg = null;
+    int expectedNamespaceID = registration.getNamespaceID();
+    if (journalInfo.getNamespaceId() != expectedNamespaceID) {
+      errorMsg = "Invalid namespaceID in journal request - expected " + expectedNamespaceID
+          + " actual " + journalInfo.getNamespaceId();
+      LOG.warn(errorMsg);
+      throw new UnregisteredNodeException(journalInfo);
+    } 
+    if (!journalInfo.getClusterId().equals(registration.getClusterID())) {
+      errorMsg = "Invalid clusterId in journal request - expected "
+          + journalInfo.getClusterId() + " actual " + registration.getClusterID();
+      LOG.warn(errorMsg);
+      throw new UnregisteredNodeException(journalInfo);
+    }
+  }
+  
+  /** 
+   * Verifies a journal request
+   */
+  private void verify(long e, JournalInfo journalInfo) throws IOException {
+    verifyEpoch(e);
+    verify(journalInfo);
+  }
+  
-}
+
+  @VisibleForTesting
+  long getEpoch() {
+    return epoch;
+  }
+}

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS43 INS59 INS44 INS44 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS29 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS78 INS39 INS42 INS8 INS42 INS34 INS42 INS42 UPD43 UPD42 INS39 INS42 UPD43 UPD42 INS39 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS60 INS21 INS21 INS41 INS39 INS42 INS42 INS25 INS39 INS42 INS43 INS42 INS42 INS25 INS65 UPD43 UPD42 INS60 INS60 INS25 INS65 INS39 INS42 INS43 INS42 INS21 INS21 INS42 INS41 UPD42 UPD42 INS42 INS42 INS32 INS32 INS32 INS39 INS59 INS7 INS7 INS14 INS27 INS8 INS42 INS27 INS8 INS66 UPD42 INS43 INS59 INS39 INS59 INS27 INS8 INS66 INS42 INS32 INS32 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS43 INS42 INS34 INS9 INS42 INS42 INS60 INS21 INS53 INS42 INS42 INS60 INS21 INS53 INS42 INS42 INS33 INS42 INS32 INS32 INS42 INS21 INS21 MOV53 INS21 INS53 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS52 INS42 INS52 INS42 INS42 INS43 INS59 INS32 INS14 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS7 INS32 INS7 INS32 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS32 UPD45 MOV45 MOV32 UPD45 MOV45 MOV32 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL42 DEL27 DEL32