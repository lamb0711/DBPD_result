YARN-6210. FairScheduler: Node reservations can interfere with preemption. (kasha)

-import com.google.common.annotations.VisibleForTesting;
-    return !Resources.lessThan(fsQueue.getPolicy().getResourceCalculator(),
-        scheduler.getClusterResource(), usageAfterPreemption, getFairShare());
+    return !isUsageBelowShare(usageAfterPreemption, getFairShare());
-    if (isReservable(capability) && reserve(
-        pendingAsk.getPerAllocationResource(), node, reservedContainer, type,
-        schedulerKey)) {
+    if (isReservable(capability) &&
+        reserve(pendingAsk.getPerAllocationResource(), node, reservedContainer,
+            type, schedulerKey)) {
-    return scheduler.isAtLeastReservationThreshold(
-        getQueue().getPolicy().getResourceCalculator(), capacity);
+    // Reserve only when the app is starved and the requested container size
+    // is larger than the configured threshold
+    return isStarved() &&
+        scheduler.isAtLeastReservationThreshold(
+            getQueue().getPolicy().getResourceCalculator(), capacity);
+    long now = scheduler.getClock().getTime();
-    Resource starvation = Resources.componentwiseMin(threshold, demand);
-    Resources.subtractFromNonNegative(starvation, getResourceUsage());
+    Resource fairDemand = Resources.componentwiseMin(threshold, demand);
-    long now = scheduler.getClock().getTime();
-    boolean starved = !Resources.isNone(starvation);
+    // Check if the queue is starved for fairshare
+    boolean starved = isUsageBelowShare(getResourceUsage(), fairDemand);
-    if (starved &&
-        (now - lastTimeAtFairShare > fsQueue.getFairSharePreemptionTimeout())) {
-      this.fairshareStarvation = starvation;
+    if (!starved ||
+        now - lastTimeAtFairShare < fsQueue.getFairSharePreemptionTimeout()) {
+      fairshareStarvation = Resources.none();
-      this.fairshareStarvation = Resources.none();
+      // The app has been starved for longer than preemption-timeout.
+      fairshareStarvation =
+          Resources.subtractFromNonNegative(fairDemand, getResourceUsage());
-    return this.fairshareStarvation;
+    return fairshareStarvation;
+  }
+
+  /**
+   * Helper method that checks if {@code usage} is strictly less than
+   * {@code share}.
+   */
+  private boolean isUsageBelowShare(Resource usage, Resource share) {
+    return fsQueue.getPolicy().getResourceCalculator().compare(
+        scheduler.getClusterResource(), usage, share, true) < 0;
-  @VisibleForTesting
-    return !Resources.isNone(fairshareStarvation);
+    return isUsageBelowShare(getResourceUsage(), getFairShare());
+  }
+
+  /**
+   * Is application starved for fairshare or minshare
+   */
+  private boolean isStarved() {
+    return isStarvedForFairShare() || !Resources.isNone(minshareStarvation);
+  public String toString() {
+    return getApplicationAttemptId() + " Alloc: " + getCurrentConsumption();
+  }
+
+  @Override

INS31 INS31 INS31 INS31 MOV60 INS29 INS83 INS39 INS42 INS44 INS44 INS8 MOV29 MOV39 MOV42 INS8 INS29 INS83 INS39 INS42 MOV8 INS78 INS83 INS43 INS42 INS8 INS41 MOV8 INS65 INS43 INS42 INS43 INS42 MOV41 INS41 INS65 INS42 INS42 INS41 INS38 INS27 UPD27 INS42 INS66 INS65 INS66 INS65 INS66 INS42 INS42 INS27 INS32 INS66 INS27 INS27 INS32 INS32 MOV32 UPD42 INS32 INS38 UPD27 MOV27 INS66 INS66 MOV32 MOV42 MOV42 INS34 INS42 INS32 INS32 INS32 INS38 INS32 INS45 INS32 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 INS9 INS42 INS42 INS42 MOV32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 MOV32 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL38 DEL42 DEL36 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL38 DEL38 DEL42 DEL78 DEL31