YARN-6160. Create an agent-less docker-less provider in the native services framework. Contributed by Billie Rinaldi

-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.conf.Configured;
-import org.apache.slider.common.SliderKeys;
-import org.apache.slider.common.SliderXmlConfKeys;
-import org.apache.slider.core.exceptions.BadClusterStateException;
+import org.apache.slider.api.resource.Artifact;
-import org.apache.slider.providers.agent.AgentKeys;
+import org.apache.slider.providers.docker.DockerProviderFactory;
+import org.apache.slider.providers.tarball.TarballProviderFactory;
+import org.apache.slider.util.RestApiErrorMessages;
- * Base class for factories
+ * Base class for factories.
-public abstract class SliderProviderFactory extends Configured {
-
-  public static final String DEFAULT_CLUSTER_TYPE = AgentKeys.PROVIDER_AGENT;
-  
+public abstract class SliderProviderFactory {
-    LoggerFactory.getLogger(SliderProviderFactory.class);
-  public static final String PROVIDER_NOT_FOUND =
-    "Unable to find provider of application type %s";
+      LoggerFactory.getLogger(SliderProviderFactory.class);
-  public SliderProviderFactory(Configuration conf) {
-    super(conf);
-  }
-
-  protected SliderProviderFactory() {
-  }
+  protected SliderProviderFactory() {}
-  /**
-   * Create a provider for a specific application
-   * @param application app
-   * @return app instance
-   * @throws SliderException on any instantiation problem
-   */
-  public static SliderProviderFactory createSliderProviderFactory(String application) throws
-      SliderException {
-    Configuration conf = loadSliderConfiguration();
-    if (application == null) {
-      application = DEFAULT_CLUSTER_TYPE;
-    }
-    String providerKey =
-      String.format(SliderXmlConfKeys.KEY_PROVIDER, application);
-    if (application.contains(".")) {
-      log.debug("Treating {} as a classname", application);
-      String name = "classname.key";
-      conf.set(name, application);
-      providerKey = name;
-    }
-    
-    Class<? extends SliderProviderFactory> providerClass;
-    try {
-      providerClass = conf.getClass(providerKey, null, SliderProviderFactory.class);
-    } catch (RuntimeException e) {
-      throw new BadClusterStateException(e, "Failed to load provider %s: %s", application, e);
-    }
-    if (providerClass == null) {
-      throw new BadClusterStateException(PROVIDER_NOT_FOUND, application);
-    }
+  public static synchronized ProviderService getProviderService(Artifact
+      artifact) {
+    return createSliderProviderFactory(artifact).createServerProvider();
+  }
-    Exception ex;
-    try {
-      SliderProviderFactory providerFactory = providerClass.newInstance();
-      providerFactory.setConf(conf);
-      return providerFactory;
-    } catch (Exception e) {
-      ex = e;
-    }
-    //by here the operation failed and ex is set to the value 
-    throw new BadClusterStateException(ex,
-                              "Failed to create an instance of %s : %s",
-                              providerClass,
-                              ex);
+  public static synchronized AbstractClientProvider getClientProvider(Artifact
+      artifact) {
+    return createSliderProviderFactory(artifact).createClientProvider();
-   * Load a configuration with the {@link SliderKeys#SLIDER_XML} resource
-   * included
-   * @return a configuration instance
+   * Create a provider for a specific application
+   * @param artifact artifact
+   * @return provider factory
+   * @throws SliderException on any instantiation problem
-  public static Configuration loadSliderConfiguration() {
-    Configuration conf = new Configuration();
-    conf.addResource(SliderKeys.SLIDER_XML);
-    return conf;
+  public static synchronized SliderProviderFactory createSliderProviderFactory(
+      Artifact artifact) {
+    if (artifact == null || artifact.getType() == null) {
+      log.info("Loading service provider type default");
+      return DefaultProviderFactory.getInstance();
+    }
+    log.info("Loading service provider type {}", artifact.getType());
+    switch (artifact.getType()) {
+      // TODO add handling for custom types?
+      // TODO handle application
+      case DOCKER:
+        return DockerProviderFactory.getInstance();
+      case TARBALL:
+        return TarballProviderFactory.getInstance();
+      default:
+        throw new IllegalArgumentException(
+            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);
+    }

MOV26 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS83 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS83 INS43 UPD42 MOV42 MOV44 MOV8 INS83 UPD66 UPD42 MOV42 INS43 INS42 INS41 UPD42 MOV42 UPD43 UPD42 INS41 UPD43 UPD42 INS25 MOV21 INS50 INS42 INS32 UPD42 INS32 UPD42 UPD66 UPD66 UPD42 INS27 MOV8 INS32 INS32 INS49 INS41 INS49 INS41 INS49 INS53 INS32 INS42 INS32 INS42 INS27 INS27 INS41 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS32 MOV14 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV33 INS32 INS33 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD43 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 UPD45 UPD42 MOV42 UPD42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL83 DEL83 DEL43 DEL42 DEL40 DEL59 DEL23 DEL83 DEL83 DEL83 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL31 DEL42 DEL46 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL33 DEL42 DEL43 DEL57 DEL32 DEL7 DEL42 DEL45 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL25 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL54 DEL53 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31