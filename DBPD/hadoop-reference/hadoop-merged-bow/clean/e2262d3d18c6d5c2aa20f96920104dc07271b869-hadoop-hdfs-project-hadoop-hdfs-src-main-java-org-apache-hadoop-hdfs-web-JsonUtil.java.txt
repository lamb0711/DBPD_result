HDFS-6565. Use jackson instead jetty json in hdfs-client. Contributed by Akira AJISAKA.

-import org.apache.hadoop.hdfs.protocol.BlockStoragePolicy;
-import org.mortbay.util.ajax.JSON;
+import org.codehaus.jackson.map.ObjectMapper;
+import org.codehaus.jackson.map.ObjectReader;
-  /** Convert a Token[] to a JSON array. */
-  private static Object[] toJsonArray(final Token<? extends TokenIdentifier>[] array
-      ) throws IOException {
-    if (array == null) {
-      return null;
-    } else if (array.length == 0) {
-      return EMPTY_OBJECT_ARRAY;
-    } else {
-      final Object[] a = new Object[array.length];
-      for(int i = 0; i < array.length; i++) {
-        a[i] = toJsonMap(array[i]);
-      }
-      return a;
-    }
-  }
-
-  /** Convert a token object to a JSON string. */
-  public static String toJsonString(final Token<? extends TokenIdentifier>[] tokens
-      ) throws IOException {
-    if (tokens == null) {
-      return null;
-    }
-
-    final Map<String, Object> m = new TreeMap<String, Object>();
-    m.put(Token.class.getSimpleName(), toJsonArray(tokens));
-    return toJsonString(Token.class.getSimpleName() + "s", m);
-  }
-
-  /** Convert an Object[] to a List<Token<?>>.  */
-  private static List<Token<?>> toTokenList(final Object[] objects) throws IOException {
-    if (objects == null) {
-      return null;
-    } else if (objects.length == 0) {
-      return Collections.emptyList();
-    } else {
-      final List<Token<?>> list = new ArrayList<Token<?>>(objects.length);
-      for(int i = 0; i < objects.length; i++) {
-        list.add(toToken((Map<?, ?>)objects[i]));
-      }
-      return list;
-    }
-  }
-
-  /** Convert a JSON map to a List<Token<?>>. */
-  public static List<Token<?>> toTokenList(final Map<?, ?> json) throws IOException {
-    if (json == null) {
-      return null;
-    }
-
-    final Map<?, ?> m = (Map<?, ?>)json.get(Token.class.getSimpleName() + "s");
-    return toTokenList((Object[])m.get(Token.class.getSimpleName()));
-  }
-
-    return JSON.toString(m);
+    ObjectMapper mapper = new ObjectMapper();
+    try {
+      return mapper.writeValueAsString(m);
+    } catch (IOException ignored) {
+    }
+    return null;
-    return includeType ? toJsonString(FileStatus.class, m): JSON.toString(m);
+    ObjectMapper mapper = new ObjectMapper();
+    try {
+      return includeType ?
+          toJsonString(FileStatus.class, m) : mapper.writeValueAsString(m);
+    } catch (IOException ignored) {
+    }
+    return null;
-    final long len = (Long) m.get("length");
+    final long len = ((Number) m.get("length")).longValue();
-    final long aTime = (Long) m.get("accessTime");
-    final long mTime = (Long) m.get("modificationTime");
-    final long blockSize = (Long) m.get("blockSize");
+    final long aTime = ((Number) m.get("accessTime")).longValue();
+    final long mTime = ((Number) m.get("modificationTime")).longValue();
+    final long blockSize = ((Number) m.get("blockSize")).longValue();
-    final short replication = (short) (long) (Long) m.get("replication");
-    final long fileId = m.containsKey("fileId") ? (Long) m.get("fileId")
-        : INodeId.GRANDFATHER_INODE_ID;
-    Long childrenNumLong = (Long) m.get("childrenNum");
-    final int childrenNum = (childrenNumLong == null) ? -1
-            : childrenNumLong.intValue();
+    final short replication = ((Number) m.get("replication")).shortValue();
+    final long fileId = m.containsKey("fileId") ?
+        ((Number) m.get("fileId")).longValue() : INodeId.GRANDFATHER_INODE_ID;
+    final int childrenNum = getInt(m, "childrenNum", -1);
-        (byte) (long) (Long) m.get("storagePolicy") :
-          BlockStoragePolicySuite.ID_UNSPECIFIED;
+        (byte) ((Number) m.get("storagePolicy")).longValue() :
+        BlockStoragePolicySuite.ID_UNSPECIFIED;
-    final long blockId = (Long)m.get("blockId");
-    final long numBytes = (Long)m.get("numBytes");
-    final long generationStamp = (Long)m.get("generationStamp");
+    final long blockId = ((Number) m.get("blockId")).longValue();
+    final long numBytes = ((Number) m.get("numBytes")).longValue();
+    final long generationStamp =
+        ((Number) m.get("generationStamp")).longValue();
-    return (int) (long) (Long) value;
+    return ((Number) value).intValue();
-    return (Long) value;
+    return ((Number) value).longValue();
+  static List<?> getList(Map<?, ?> m, String key) {
+    Object list = m.get(key);
+    if (list instanceof List<?>) {
+      return (List<?>) list;
+    } else {
+      return null;
+    }
+  }
+
-        (int)(long)(Long)m.get("infoPort"),
+        ((Number) m.get("infoPort")).intValue(),
-        (int)(long)(Long)m.get("ipcPort"),
+        ((Number) m.get("ipcPort")).intValue(),
-  private static DatanodeInfo[] toDatanodeInfoArray(final Object[] objects) 
+  private static DatanodeInfo[] toDatanodeInfoArray(final List<?> objects)
-    } else if (objects.length == 0) {
+    } else if (objects.isEmpty()) {
-      final DatanodeInfo[] array = new DatanodeInfo[objects.length];
-      for(int i = 0; i < array.length; i++) {
-        array[i] = toDatanodeInfo((Map<?, ?>) objects[i]);
+      final DatanodeInfo[] array = new DatanodeInfo[objects.size()];
+      int i = 0;
+      for (Object object : objects) {
+        array[i++] = toDatanodeInfo((Map<?, ?>) object);
-        (Object[])m.get("locations"));
-    final long startOffset = (Long)m.get("startOffset");
+        getList(m, "locations"));
+    final long startOffset = ((Number) m.get("startOffset")).longValue();
-        (Object[])m.get("cachedLocations"));
+        getList(m, "cachedLocations"));
-  /** Convert an Object[] to a List of LocatedBlock. */
-  private static List<LocatedBlock> toLocatedBlockList(final Object[] objects
-      ) throws IOException {
+  /** Convert an List of Object to a List of LocatedBlock. */
+  private static List<LocatedBlock> toLocatedBlockList(
+      final List<?> objects) throws IOException {
-    } else if (objects.length == 0) {
+    } else if (objects.isEmpty()) {
-      final List<LocatedBlock> list = new ArrayList<LocatedBlock>(objects.length);
-      for(int i = 0; i < objects.length; i++) {
-        list.add(toLocatedBlock((Map<?, ?>)objects[i]));
+      final List<LocatedBlock> list = new ArrayList<>(objects.size());
+      for (Object object : objects) {
+        list.add(toLocatedBlock((Map<?, ?>) object));
-    final long fileLength = (Long)m.get("fileLength");
+    final long fileLength = ((Number) m.get("fileLength")).longValue();
-        (Object[])m.get("locatedBlocks"));
+        getList(m, "locatedBlocks"));
-    final long length = (Long)m.get("length");
-    final long fileCount = (Long)m.get("fileCount");
-    final long directoryCount = (Long)m.get("directoryCount");
-    final long quota = (Long)m.get("quota");
-    final long spaceConsumed = (Long)m.get("spaceConsumed");
-    final long spaceQuota = (Long)m.get("spaceQuota");
+    final long length = ((Number) m.get("length")).longValue();
+    final long fileCount = ((Number) m.get("fileCount")).longValue();
+    final long directoryCount = ((Number) m.get("directoryCount")).longValue();
+    final long quota = ((Number) m.get("quota")).longValue();
+    final long spaceConsumed = ((Number) m.get("spaceConsumed")).longValue();
+    final long spaceQuota = ((Number) m.get("spaceQuota")).longValue();
-    final int length = (int)(long)(Long)m.get("length");
+    final int length = ((Number) m.get("length")).intValue();
-    m.put("entries", status.getEntries());
+
+    final List<String> stringEntries = new ArrayList<>();
+    for (AclEntry entry : status.getEntries()) {
+      stringEntries.add(entry.toString());
+    }
+    m.put("entries", stringEntries);
+
-    return JSON.toString(finalMap);
+
+    ObjectMapper mapper = new ObjectMapper();
+    try {
+      return mapper.writeValueAsString(finalMap);
+    } catch (IOException ignored) {
+    }
+    return null;
-    final Object[] entries = (Object[]) m.get("entries");
+    final List<?> entries = (List<?>) m.get("entries");
-    for (int i = 0; i < entries.length; i++) {
-      AclEntry aclEntry = AclEntry.parseAclEntry((String) entries[i], true);
+    for (Object entry : entries) {
+      AclEntry aclEntry = AclEntry.parseAclEntry((String) entry, true);
-    return JSON.toString(finalMap);
+    ObjectMapper mapper = new ObjectMapper();
+    return mapper.writeValueAsString(finalMap);
-    String ret = JSON.toString(names);
+    ObjectMapper mapper = new ObjectMapper();
+    String ret = mapper.writeValueAsString(names);
-    return JSON.toString(finalMap);
+    return mapper.writeValueAsString(finalMap);
-  
+
-    
-    return toXAttrMap((Object[])json.get("XAttrs"));
+    return toXAttrMap(getList(json, "XAttrs"));
-    final Object[] xattrs = (Object[]) JSON.parse(namesInJson);
+    ObjectReader reader = new ObjectMapper().reader(List.class);
+    final List<Object> xattrs = reader.readValue(namesInJson);
-    for (int i = 0; i < xattrs.length; i++) {
-        names.add((String) (xattrs[i]));
+    for (Object xattr : xattrs) {
+      names.add((String) xattr);
-  private static Map<String, byte[]> toXAttrMap(final Object[] objects) 
+  private static Map<String, byte[]> toXAttrMap(final List<?> objects)
-    } else if (objects.length == 0) {
+    } else if (objects.isEmpty()) {
-      for(int i = 0; i < objects.length; i++) {
-        Map<?, ?> m = (Map<?, ?>) objects[i];
+      for (Object object : objects) {
+        Map<?, ?> m = (Map<?, ?>) object;

MOV26 MOV31 MOV31 UPD40 UPD40 INS31 UPD39 UPD42 MOV44 MOV44 MOV44 UPD39 UPD42 MOV44 MOV44 MOV44 MOV83 INS74 INS42 INS44 INS44 INS8 MOV29 UPD83 MOV5 UPD42 MOV43 INS60 INS54 INS41 INS60 INS54 INS41 MOV43 UPD76 MOV76 INS74 INS42 INS43 INS42 INS60 INS25 UPD74 UPD42 INS25 INS74 INS60 MOV60 INS60 INS70 INS60 INS54 INS41 INS70 INS60 INS60 INS60 INS70 INS74 INS43 INS59 INS8 INS12 INS33 INS43 INS59 INS8 INS12 INS33 INS32 INS32 MOV43 INS76 INS76 MOV42 MOV43 INS59 INS62 INS8 MOV8 UPD43 MOV27 MOV8 INS25 MOV5 UPD66 INS43 INS76 MOV74 INS83 INS39 INS59 UPD39 INS83 INS74 MOV59 INS44 MOV32 INS8 INS43 INS59 INS8 INS12 INS33 INS74 INS44 INS42 INS8 INS43 INS59 INS43 INS59 MOV43 INS43 INS59 INS74 INS44 INS42 INS8 INS43 INS76 INS42 INS42 INS14 MOV41 INS44 INS8 INS42 INS42 INS14 MOV41 INS44 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS36 INS42 INS36 INS42 INS42 INS32 INS42 INS74 INS41 INS32 INS32 UPD42 INS32 MOV8 INS8 INS32 UPD42 MOV42 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS43 UPD42 INS43 INS42 INS21 INS42 INS42 INS42 INS14 MOV41 INS44 INS8 INS43 INS76 MOV43 INS42 MOV60 MOV21 INS42 INS42 INS14 UPD42 UPD42 INS42 INS42 INS14 UPD42 UPD42 INS32 INS42 INS42 INS32 INS43 MOV43 INS32 MOV43 INS42 MOV21 UPD42 MOV42 INS32 INS43 MOV43 INS42 INS43 MOV43 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS45 MOV38 MOV11 INS36 INS42 INS36 INS42 INS36 INS42 INS11 INS11 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 MOV76 INS11 INS36 INS42 INS36 INS42 INS42 UPD42 MOV42 MOV60 INS60 INS70 MOV41 INS32 INS36 INS42 INS32 INS42 INS42 INS70 INS36 INS42 INS32 INS36 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS42 INS42 UPD74 INS42 INS32 INS43 MOV43 INS42 INS42 INS74 INS43 INS43 UPD42 UPD42 INS42 MOV42 MOV45 INS14 INS42 INS57 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS70 INS42 UPD42 UPD42 INS42 MOV11 MOV11 MOV11 MOV11 MOV11 INS36 INS42 UPD39 INS32 MOV11 MOV11 MOV11 UPD43 MOV43 MOV42 UPD43 MOV43 MOV42 UPD74 MOV74 INS42 MOV11 MOV11 MOV5 INS39 MOV59 INS44 INS42 MOV8 INS42 MOV42 MOV45 MOV11 INS42 MOV42 MOV45 MOV74 INS44 INS42 MOV8 MOV11 INS42 MOV42 MOV45 INS11 MOV11 MOV11 MOV11 MOV11 MOV11 MOV11 INS42 INS42 INS32 INS42 UPD42 UPD42 INS43 INS76 INS42 INS42 INS43 INS43 INS44 INS42 MOV8 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 MOV11 INS36 INS42 UPD43 UPD43 UPD43 UPD42 UPD42 MOV43 UPD43 UPD43 MOV43 INS42 UPD43 MOV43 INS42 UPD43 INS43 MOV32 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS42 INS42 UPD42 MOV42 INS42 INS42 MOV43 INS42 MOV43 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 MOV11 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS7 UPD42 UPD74 INS32 INS32 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 INS42 MOV74 UPD42 UPD43 INS42 INS42 INS2 MOV32 INS42 INS42 INS42 INS42 MOV32 UPD42 INS42 MOV37 UPD42 UPD42 MOV74 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL83 DEL42 DEL43 DEL74 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL40 DEL34 DEL27 DEL42 DEL41 DEL8 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL85 DEL5 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL57 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL45 DEL27 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL83 DEL42 DEL43 DEL74 DEL74 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL11 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL39 DEL39 DEL11 DEL11 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL32 DEL16 DEL39 DEL11 DEL11 DEL39 DEL39 DEL11 DEL11 DEL11 DEL42 DEL43 DEL42 DEL43 DEL76 DEL39 DEL39 DEL11 DEL11 DEL39 DEL39 DEL11 DEL11 DEL66 DEL65 DEL29 DEL42 DEL43 DEL76 DEL74 DEL74 DEL76 DEL40 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL83 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL45 DEL27 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL32 DEL11 DEL32 DEL41 DEL83 DEL83 DEL42 DEL83 DEL85 DEL5 DEL42 DEL44 DEL40 DEL34 DEL27 DEL39 DEL58 DEL42 DEL40 DEL27 DEL24 DEL8 DEL25 DEL25 DEL8 DEL31 DEL85 DEL5 DEL42 DEL32 DEL11 DEL85 DEL5 DEL42 DEL32 DEL11 DEL43 DEL85 DEL5 DEL40 DEL34 DEL27 DEL42 DEL43 DEL40 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL7 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL11 DEL83 DEL39 DEL42 DEL39 DEL39 DEL42 DEL43 DEL11 DEL11 DEL11 DEL59 DEL60 DEL42 DEL43 DEL76 DEL74 DEL40 DEL85 DEL5 DEL43 DEL85 DEL5 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL85 DEL5 DEL42 DEL32 DEL11 DEL85 DEL5 DEL85 DEL5 DEL32 DEL11 DEL42 DEL42 DEL2 DEL36 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL43 DEL85 DEL5 DEL40 DEL34 DEL27 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24