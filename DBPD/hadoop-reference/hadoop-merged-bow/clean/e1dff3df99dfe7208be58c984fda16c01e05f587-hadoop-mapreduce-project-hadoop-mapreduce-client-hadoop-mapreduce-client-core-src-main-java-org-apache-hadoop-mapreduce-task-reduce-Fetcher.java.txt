Merge trunk into QJM branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1367365 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.HttpURLConnection;
-import java.net.HttpURLConnection;
+import java.security.GeneralSecurityException;
+import java.util.Arrays;
+import javax.net.ssl.HttpsURLConnection;
+import org.apache.hadoop.mapreduce.MRConfig;
+import org.apache.hadoop.security.ssl.SSLFactory;
+  private static boolean sslShuffle;
+  private static SSLFactory sslFactory;
+
+
+    synchronized (Fetcher.class) {
+      sslShuffle = job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY,
+                                  MRConfig.SHUFFLE_SSL_ENABLED_DEFAULT);
+      if (sslShuffle && sslFactory == null) {
+        sslFactory = new SSLFactory(SSLFactory.Mode.CLIENT, job);
+        try {
+          sslFactory.init();
+        } catch (Exception ex) {
+          sslFactory.destroy();
+          throw new RuntimeException(ex);
+        }
+      }
+    }
+    if (sslFactory != null) {
+      sslFactory.destroy();
+    }
-    return (HttpURLConnection)url.openConnection();
+    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
+    if (sslShuffle) {
+      HttpsURLConnection httpsConn = (HttpsURLConnection) conn;
+      try {
+        httpsConn.setSSLSocketFactory(sslFactory.createSSLSocketFactory());
+      } catch (GeneralSecurityException ex) {
+        throw new IOException(ex);
+      }
+      httpsConn.setHostnameVerifier(sslFactory.getHostnameVerifier());
+    }
+    return conn;
+  @VisibleForTesting
-      LOG.debug("Fetcher " + id + " going to fetch from " + host);
-      for (TaskAttemptID tmp: maps) {
-        LOG.debug(tmp);
-      }
+      LOG.debug("Fetcher " + id + " going to fetch from " + host + " for: "
+        + maps);
-      if(failedTasks != null) {
+      if(failedTasks != null && failedTasks.length > 0) {
+        LOG.warn("copyMapOutput failed for tasks "+Arrays.toString(failedTasks));
+  private static TaskAttemptID[] EMPTY_ATTEMPT_ID_ARRAY = new TaskAttemptID[0];
+  
-      LOG.debug("header: " + mapId + ", len: " + compressedLength + 
-               ", decomp len: " + decompressedLength);
+      if(LOG.isDebugEnabled()) {
+        LOG.debug("header: " + mapId + ", len: " + compressedLength + 
+            ", decomp len: " + decompressedLength);
+      }
-        return new TaskAttemptID[] {mapId};
+        //Not an error but wait to process data.
+        return EMPTY_ATTEMPT_ID_ARRAY;
-      LOG.info("Failed to shuffle output of " + mapId + 
+      LOG.warn("Failed to shuffle output of " + mapId + 

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS43 INS78 INS83 INS83 INS5 INS59 INS42 INS42 INS42 INS51 INS25 INS42 INS60 INS25 INS42 INS43 INS85 INS42 INS3 INS57 INS8 INS27 INS8 MOV43 INS59 INS42 INS8 INS42 INS42 INS5 INS34 INS43 INS21 INS25 INS42 INS33 INS21 INS42 MOV11 INS60 INS54 INS21 INS43 INS85 INS25 INS42 INS7 INS27 INS8 INS32 INS43 INS59 INS8 INS12 INS32 INS27 INS42 INS32 INS8 INS42 INS32 INS42 INS27 INS21 INS54 INS42 INS42 INS42 INS42 INS11 INS21 INS44 INS8 INS42 INS42 INS32 MOV27 INS27 INS21 INS42 INS42 MOV21 INS42 INS42 INS40 INS40 INS42 INS33 INS7 INS8 INS12 INS43 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS45 INS42 INS40 INS34 INS32 INS42 UPD42 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS27 INS43 INS40 INS42 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS43 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3