HDFS-9392. Admins support for maintenance state. Contributed by Ming Ma.

+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
-    initExcludeHosts(hostNameAndPort);
+    ArrayList<String> nodes = new ArrayList<>();
+    nodes.add(hostNameAndPort);
+    initExcludeHosts(nodes);
-  public void initExcludeHosts(String... hostNameAndPorts) throws IOException {
+  public void initExcludeHosts(List<String> hostNameAndPorts)
+      throws IOException {
+    initOutOfServiceHosts(hostNameAndPorts, null);
+  }
+
+  public void initOutOfServiceHosts(List<String> decommissionHostNameAndPorts,
+      Map<String, Long> maintenanceHosts) throws IOException {
-      for (String hostNameAndPort : hostNameAndPorts) {
+      if (maintenanceHosts != null && maintenanceHosts.size() > 0) {
+        throw new UnsupportedOperationException(
+            "maintenance support isn't supported by legacy hosts file");
+      }
+      for (String hostNameAndPort : decommissionHostNameAndPorts) {
-      DFSTestUtil.writeFile(localFileSys, excludeFile, excludeHosts.toString());
+      DFSTestUtil.writeFile(localFileSys, excludeFile,
+          excludeHosts.toString());
-      for (String hostNameAndPort : hostNameAndPorts) {
-        DatanodeAdminProperties dn = new DatanodeAdminProperties();
-        String[] hostAndPort = hostNameAndPort.split(":");
-        dn.setHostName(hostAndPort[0]);
-        dn.setPort(Integer.parseInt(hostAndPort[1]));
-        dn.setAdminState(AdminStates.DECOMMISSIONED);
-        allDNs.add(dn);
+      if (decommissionHostNameAndPorts != null) {
+        for (String hostNameAndPort : decommissionHostNameAndPorts) {
+          DatanodeAdminProperties dn = new DatanodeAdminProperties();
+          String[] hostAndPort = hostNameAndPort.split(":");
+          dn.setHostName(hostAndPort[0]);
+          dn.setPort(Integer.parseInt(hostAndPort[1]));
+          dn.setAdminState(AdminStates.DECOMMISSIONED);
+          allDNs.add(dn);
+        }
+      }
+      if (maintenanceHosts != null) {
+        for (Map.Entry<String, Long> hostEntry : maintenanceHosts.entrySet()) {
+          DatanodeAdminProperties dn = new DatanodeAdminProperties();
+          String[] hostAndPort = hostEntry.getKey().split(":");
+          dn.setHostName(hostAndPort[0]);
+          dn.setPort(Integer.parseInt(hostAndPort[1]));
+          dn.setAdminState(AdminStates.IN_MAINTENANCE);
+          dn.setMaintenanceExpireTimeInMS(hostEntry.getValue());
+          allDNs.add(dn);
+        }
+  public void initIncludeHost(String hostNameAndPort) throws IOException {
+    initIncludeHosts(new String[]{hostNameAndPort});
+  }
+

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS31 INS31 INS83 INS39 INS42 MOV44 MOV43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 INS44 UPD42 INS44 INS43 INS60 INS21 INS21 INS74 INS42 INS42 INS21 INS74 UPD42 INS74 INS42 INS25 INS43 INS42 INS42 INS74 INS59 INS32 INS32 INS43 INS43 INS32 INS43 INS43 INS43 INS43 INS43 INS42 MOV8 INS8 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS25 MOV60 MOV25 INS25 MOV21 UPD42 INS3 INS42 INS42 INS74 INS27 INS8 UPD42 INS27 INS27 INS8 INS5 INS4 INS43 INS27 INS27 INS53 INS42 INS33 INS42 INS33 INS70 INS43 INS85 INS42 INS42 INS42 INS33 INS32 INS34 INS14 UPD42 INS44 INS32 INS8 INS42 INS42 INS42 INS43 INS45 INS74 INS42 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS42 INS43 INS43 INS43 INS43 INS59 INS5 INS59 INS32 INS32 INS32 INS32 INS32 INS40 INS42 INS42 INS42 INS42 INS14 MOV43 INS85 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS45 INS42 INS34 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS34 DEL42 DEL42