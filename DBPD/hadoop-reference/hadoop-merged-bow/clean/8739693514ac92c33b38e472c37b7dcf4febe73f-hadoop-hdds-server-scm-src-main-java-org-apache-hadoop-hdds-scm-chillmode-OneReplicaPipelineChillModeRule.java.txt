HDDS-1217. Refactor ChillMode rules and chillmode manager. (#558)



+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdds.scm.events.SCMEvents;
-import org.apache.hadoop.hdds.server.events.EventHandler;
-import org.apache.hadoop.hdds.server.events.EventPublisher;
+import org.apache.hadoop.hdds.server.events.EventQueue;
+import org.apache.hadoop.hdds.server.events.TypedEvent;
- * This rule covers whether we have atleast one datanode is reported for each
+ * This rule covers whether we have at least one datanode is reported for each
-public class OneReplicaPipelineChillModeRule implements
-    ChillModeExitRule<PipelineReportFromDatanode>,
-    EventHandler<PipelineReportFromDatanode> {
+public class OneReplicaPipelineChillModeRule extends
+    ChillModeExitRule<PipelineReportFromDatanode> {
-  private final SCMChillModeManager chillModeManager;
+  private int currentReportedPipelineCount = 0;
-  public OneReplicaPipelineChillModeRule(PipelineManager pipelineManager,
-      SCMChillModeManager chillModeManager,
-      Configuration configuration) {
-    this.chillModeManager = chillModeManager;
+
+  public OneReplicaPipelineChillModeRule(String ruleName, EventQueue eventQueue,
+      PipelineManager pipelineManager,
+      SCMChillModeManager chillModeManager, Configuration configuration) {
+    super(chillModeManager, ruleName, eventQueue);
+    Preconditions.checkArgument((percent >= 0.0 && percent <= 1.0),
+        HddsConfigKeys.
+            HDDS_SCM_CHILLMODE_ONE_NODE_REPORTED_PIPELINE_PCT  +
+            " value should be >= 0.0 and <= 1.0");
+
+
-  public boolean validate() {
-    if (reportedPipelineIDSet.size() >= thresholdCount) {
+  protected TypedEvent<PipelineReportFromDatanode> getEventType() {
+    return SCMEvents.PROCESSED_PIPELINE_REPORT;
+  }
+
+  @Override
+  protected boolean validate() {
+    if (currentReportedPipelineCount >= thresholdCount) {
-  public void process(PipelineReportFromDatanode pipelineReportFromDatanode) {
+  protected void process(PipelineReportFromDatanode
+      pipelineReportFromDatanode) {
-  }
-  @Override
-  public void cleanup() {
-    reportedPipelineIDSet.clear();
-  }
+    currentReportedPipelineCount = reportedPipelineIDSet.size();
-  @Override
-  public void onMessage(PipelineReportFromDatanode pipelineReportFromDatanode,
-      EventPublisher publisher) {
-
-    if (validate()) {
-      chillModeManager.validateChillModeExitRules(publisher);
-      return;
-    }
-
-    // Process pipeline report from datanode
-    process(pipelineReportFromDatanode);
-
-    if (chillModeManager.getInChillMode()) {
+    if (scmInChillMode()) {
-          reportedPipelineIDSet.size(), thresholdCount);
+          currentReportedPipelineCount, thresholdCount);
-    if (validate()) {
-      chillModeManager.validateChillModeExitRules(publisher);
-    }
+
+  @Override
+  protected void cleanup() {
+    reportedPipelineIDSet.clear();
+  }
+
+  @VisibleForTesting
+  public int getThresholdCount() {
+    return thresholdCount;
+  }
+
+  @VisibleForTesting
+  public int getCurrentReportedPipelineCount() {
+    return currentReportedPipelineCount;
+  }
+

INS26 INS26 INS40 INS40 UPD40 UPD40 INS31 INS31 INS31 INS39 INS44 INS44 MOV78 UPD83 MOV83 UPD74 MOV74 INS42 INS8 UPD83 UPD83 UPD83 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 UPD66 UPD42 INS34 INS43 INS42 INS43 INS42 INS46 INS21 UPD43 MOV41 INS21 INS25 INS42 INS41 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS40 INS7 INS32 INS8 INS42 INS42 INS42 INS42 INS36 INS27 INS42 INS42 MOV32 INS42 INS21 INS27 INS40 INS45 INS32 INS27 INS27 MOV32 INS42 MOV27 INS42 INS42 INS42 INS34 INS42 INS34 DEL83 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31