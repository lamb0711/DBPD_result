YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.yarn.server.resourcemanager.RMServerUtils;
-import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStore;
-  private long finishTime;
+  private long finishTime = 0;
+  private long storedFinishTime = 0;
-  private boolean isAppRemovalRequestSent = false;
-  private RMAppState previousStateAtRemoving;
+  private RMAppState stateBeforeFinalSaving;
+  private RMAppEvent eventCausingFinalSaving;
+  private RMAppState targetedFinalState;
+  private RMAppState recoveredFinalState;
+  Object transitionTodo;
-    .addTransition(RMAppState.NEW, RMAppState.SUBMITTED,
-        RMAppEventType.RECOVER, new StartAppAttemptTransition())
-    .addTransition(RMAppState.NEW, RMAppState.KILLED, RMAppEventType.KILL,
-        new AppKilledTransition())
-    .addTransition(RMAppState.NEW, RMAppState.FAILED,
-        RMAppEventType.APP_REJECTED, new AppRejectedTransition())
+    .addTransition(RMAppState.NEW, EnumSet.of(RMAppState.SUBMITTED,
+            RMAppState.FINISHED, RMAppState.FAILED, RMAppState.KILLED,
+            RMAppState.FINAL_SAVING),
+        RMAppEventType.RECOVER, new RMAppRecoveredTransition())
+    .addTransition(RMAppState.NEW, RMAppState.FINAL_SAVING, RMAppEventType.KILL,
+        new FinalSavingTransition(
+          new AppKilledTransition(), RMAppState.KILLED))
+    .addTransition(RMAppState.NEW, RMAppState.FINAL_SAVING,
+        RMAppEventType.APP_REJECTED,
+        new FinalSavingTransition(
+          new AppRejectedTransition(), RMAppState.FAILED))
-        RMAppEventType.APP_SAVED, new StartAppAttemptTransition())
-    .addTransition(RMAppState.NEW_SAVING, RMAppState.KILLED,
-        RMAppEventType.KILL, new AppKilledTransition())
-    .addTransition(RMAppState.NEW_SAVING, RMAppState.FAILED,
-        RMAppEventType.APP_REJECTED, new AppRejectedTransition())
+        RMAppEventType.APP_NEW_SAVED, new StartAppAttemptTransition())
+    .addTransition(RMAppState.NEW_SAVING, RMAppState.FINAL_SAVING,
+        RMAppEventType.KILL,
+        new FinalSavingTransition(
+          new AppKilledTransition(), RMAppState.KILLED))
+    .addTransition(RMAppState.NEW_SAVING, RMAppState.FINAL_SAVING,
+        RMAppEventType.APP_REJECTED,
+          new FinalSavingTransition(new AppRejectedTransition(),
+            RMAppState.FAILED))
-    .addTransition(RMAppState.SUBMITTED, RMAppState.FAILED,
-        RMAppEventType.APP_REJECTED, new AppRejectedTransition())
+    .addTransition(RMAppState.SUBMITTED, RMAppState.FINAL_SAVING,
+        RMAppEventType.APP_REJECTED,
+        new FinalSavingTransition(
+          new AppRejectedTransition(), RMAppState.FAILED))
-    .addTransition(RMAppState.SUBMITTED, RMAppState.KILLED,
-        RMAppEventType.KILL, new KillAppAndAttemptTransition())
+    .addTransition(RMAppState.SUBMITTED, RMAppState.FINAL_SAVING,
+        RMAppEventType.KILL,
+        new FinalSavingTransition(
+          new KillAppAndAttemptTransition(), RMAppState.KILLED))
-        EnumSet.of(RMAppState.SUBMITTED, RMAppState.FAILED),
+        EnumSet.of(RMAppState.SUBMITTED, RMAppState.FINAL_SAVING),
-    .addTransition(RMAppState.ACCEPTED, RMAppState.KILLED,
-        RMAppEventType.KILL, new KillAppAndAttemptTransition())
+    .addTransition(RMAppState.ACCEPTED, RMAppState.FINAL_SAVING,
+        RMAppEventType.KILL,
+        new FinalSavingTransition(
+          new KillAppAndAttemptTransition(), RMAppState.KILLED))
-    .addTransition(RMAppState.RUNNING, RMAppState.REMOVING,
-          RMAppEventType.ATTEMPT_UNREGISTERED,
-        new RMAppRemovingTransition())
+    .addTransition(RMAppState.RUNNING, RMAppState.FINAL_SAVING,
+        RMAppEventType.ATTEMPT_UNREGISTERED,
+        new FinalSavingTransition(
+          new AttemptUnregisteredTransition(),
+          RMAppState.FINISHING, RMAppState.FINISHED))
+      // UnManagedAM directly jumps to finished
-        EnumSet.of(RMAppState.SUBMITTED, RMAppState.FAILED),
+        EnumSet.of(RMAppState.SUBMITTED, RMAppState.FINAL_SAVING),
-    .addTransition(RMAppState.RUNNING, RMAppState.KILLED,
-        RMAppEventType.KILL, new KillAppAndAttemptTransition())
+    .addTransition(RMAppState.RUNNING, RMAppState.FINAL_SAVING,
+        RMAppEventType.KILL,
+        new FinalSavingTransition(
+          new KillAppAndAttemptTransition(), RMAppState.KILLED))
-     // Transitions from REMOVING state
-    .addTransition(RMAppState.REMOVING, RMAppState.FINISHING,
-        RMAppEventType.APP_REMOVED,  new RMAppFinishingTransition())
-    .addTransition(RMAppState.REMOVING, RMAppState.FINISHED,
-        RMAppEventType.ATTEMPT_FINISHED, FINISHED_TRANSITION)
-    .addTransition(RMAppState.REMOVING, RMAppState.KILLED,
-        RMAppEventType.KILL, new KillAppAndAttemptTransition())
+     // Transitions from FINAL_SAVING state
+    .addTransition(RMAppState.FINAL_SAVING,
+      EnumSet.of(RMAppState.FINISHING, RMAppState.FAILED,
+        RMAppState.KILLED, RMAppState.FINISHED), RMAppEventType.APP_UPDATE_SAVED,
+        new FinalStateSavedTransition())
+    .addTransition(RMAppState.FINAL_SAVING, RMAppState.FINAL_SAVING,
+        RMAppEventType.ATTEMPT_FINISHED,
+        new AttemptFinishedAtFinalSavingTransition())
-    .addTransition(RMAppState.REMOVING, RMAppState.REMOVING,
-        RMAppEventType.NODE_UPDATE)
+    .addTransition(RMAppState.FINAL_SAVING, RMAppState.FINAL_SAVING,
+        EnumSet.of(RMAppEventType.NODE_UPDATE, RMAppEventType.KILL))
-      EnumSet.of(RMAppEventType.NODE_UPDATE, RMAppEventType.APP_REMOVED))
+      EnumSet.of(RMAppEventType.NODE_UPDATE))
-            RMAppEventType.KILL,
-            RMAppEventType.APP_REMOVED))
+            RMAppEventType.KILL))
-        EnumSet.of(RMAppEventType.KILL, RMAppEventType.NODE_UPDATE,
-          RMAppEventType.APP_SAVED, RMAppEventType.APP_REMOVED))
+        EnumSet.of(RMAppEventType.KILL, RMAppEventType.NODE_UPDATE))
-            RMAppEventType.ATTEMPT_KILLED, RMAppEventType.NODE_UPDATE,
-            RMAppEventType.APP_SAVED, RMAppEventType.APP_REMOVED))
+            RMAppEventType.ATTEMPT_KILLED, RMAppEventType.NODE_UPDATE))
-
-      return this.stateMachine.getCurrentState();
+        return this.stateMachine.getCurrentState();
-    case REMOVING:
+    case FINAL_SAVING:
+    this.recoveredFinalState = appState.getState();
-            + appState.getAttemptCount() + " attempts");
+        + appState.getAttemptCount() + " attempts and final state = " + this.recoveredFinalState );
+    this.diagnostics.append(appState.getDiagnostics());
+    this.storedFinishTime = appState.getFinishTime();
+    this.startTime = appState.getStartTime();
-  
-  private static final class StartAppAttemptTransition extends RMAppTransition {
-    public void transition(RMAppImpl app, RMAppEvent event) {
-      if (event.getType().equals(RMAppEventType.APP_SAVED)) {
-        assert app.getState().equals(RMAppState.NEW_SAVING);
-        RMAppStoredEvent storeEvent = (RMAppStoredEvent) event;
-        if(storeEvent.getStoredException() != null) {
-          // For HA this exception needs to be handled by giving up
-          // master status if we got fenced
-          LOG.error("Failed to store application: "
-              + storeEvent.getApplicationId(),
-              storeEvent.getStoredException());
-          ExitUtil.terminate(1, storeEvent.getStoredException());
-        }
-      }
+  private static final class RMAppRecoveredTransition implements
+      MultipleArcTransition<RMAppImpl, RMAppEvent, RMAppState> {
+    @Override
+    public RMAppState transition(RMAppImpl app, RMAppEvent event) {
+
+      if (app.recoveredFinalState != null) {
+        FINAL_TRANSITION.transition(app, event);
+        return app.recoveredFinalState;
+      }
+      // Directly call AttemptFailedTransition, since now we deem that an
+      // application fails because of RM restart as a normal AM failure.
+
+      // Do not recover unmanaged applications since current recovery 
+      // mechanism of restarting attempts does not work for them.
+      // This will need to be changed in work preserving recovery in which 
+      // RM will re-connect with the running AM's instead of restarting them
+
+      // In work-preserve restart, if attemptCount == maxAttempts, the job still
+      // needs to be recovered because the last attempt may still be running.
+
+      // As part of YARN-1210, we may return ACCECPTED state waiting for AM to
+      // reregister or fail and remove the following code.
+      return new AttemptFailedTransition(RMAppState.SUBMITTED).transition(app,
+        event);
+    }
+  }
+
+  private static final class StartAppAttemptTransition extends RMAppTransition {
+    @Override
+    public void transition(RMAppImpl app, RMAppEvent event) {
+      RMAppNewSavedEvent storeEvent = (RMAppNewSavedEvent) event;
+      if (storeEvent.getStoredException() != null) {
+        // For HA this exception needs to be handled by giving up
+        // master status if we got fenced
+        LOG.error(
+          "Failed to store application: " + storeEvent.getApplicationId(),
+          storeEvent.getStoredException());
+        ExitUtil.terminate(1, storeEvent.getStoredException());
+      }
-  private static final class RMAppFinishingTransition extends RMAppTransition {
+  private static final class FinalStateSavedTransition implements
+      MultipleArcTransition<RMAppImpl, RMAppEvent, RMAppState> {
+
+    @SuppressWarnings({ "rawtypes", "unchecked" })
+    @Override
+    public RMAppState transition(RMAppImpl app, RMAppEvent event) {
+      RMAppUpdateSavedEvent storeEvent = (RMAppUpdateSavedEvent) event;
+      if (storeEvent.getUpdatedException() != null) {
+        LOG.error("Failed to update the final state of application"
+              + storeEvent.getApplicationId(), storeEvent.getUpdatedException());
+        ExitUtil.terminate(1, storeEvent.getUpdatedException());
+      }
+
+      if (app.transitionTodo instanceof SingleArcTransition) {
+        ((SingleArcTransition) app.transitionTodo).transition(app,
+          app.eventCausingFinalSaving);
+      } else if (app.transitionTodo instanceof MultipleArcTransition) {
+        ((MultipleArcTransition) app.transitionTodo).transition(app,
+          app.eventCausingFinalSaving);
+      }
+      return app.targetedFinalState;
+
+    }
+  }
+
+  private static class AttemptFailedFinalStateSavedTransition extends
+      RMAppTransition {
-      if (event.getType().equals(RMAppEventType.APP_REMOVED)) {
-        RMAppRemovedEvent removeEvent = (RMAppRemovedEvent) event;
-        if (removeEvent.getRemovedException() != null) {
-          LOG.error(
-            "Failed to remove application: " + removeEvent.getApplicationId(),
-            removeEvent.getRemovedException());
-          ExitUtil.terminate(1, removeEvent.getRemovedException());
-        }
+      String msg = null;
+      if (event instanceof RMAppFailedAttemptEvent) {
+        msg = app.getAppAttemptFailedDiagnostics(event);
-      app.finishTime = System.currentTimeMillis();
+      LOG.info(msg);
+      app.diagnostics.append(msg);
+      // Inform the node for app-finish
+      FINAL_TRANSITION.transition(app, event);
+  private String getAppAttemptFailedDiagnostics(RMAppEvent event) {
+    String msg = null;
+    RMAppFailedAttemptEvent failedEvent = (RMAppFailedAttemptEvent) event;
+    if (this.submissionContext.getUnmanagedAM()) {
+      // RM does not manage the AM. Do not retry
+      msg = "Unmanaged application " + this.getApplicationId()
+              + " failed due to " + failedEvent.getDiagnostics()
+              + ". Failing the application.";
+    } else if (this.attempts.size() >= this.maxAppAttempts) {
+      msg = "Application " + this.getApplicationId() + " failed "
+              + this.maxAppAttempts + " times due to "
+              + failedEvent.getDiagnostics() + ". Failing the application.";
+    }
+    return msg;
+  }
+
+
-      app.rmContext.getStateStore().storeApplication(app);
+      app.rmContext.getStateStore().storeNewApplication(app);
-  private static final class RMAppRemovingTransition extends RMAppTransition {
+  private void rememberTargetTransitions(RMAppEvent event,
+      Object transitionToDo, RMAppState targetFinalState) {
+    transitionTodo = transitionToDo;
+    targetedFinalState = targetFinalState;
+    eventCausingFinalSaving = event;
+  }
+
+  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,
+      Object transitionToDo, RMAppState targetFinalState,
+      RMAppState stateToBeStored) {
+    rememberTargetTransitions(event, transitionToDo, targetFinalState);
+    this.stateBeforeFinalSaving = getState();
+    this.storedFinishTime = System.currentTimeMillis();
+
+    LOG.info("Updating application " + this.applicationId
+        + " with final state: " + this.targetedFinalState);
+    // we lost attempt_finished diagnostics in app, because attempt_finished
+    // diagnostics is sent after app final state is saved. Later on, we will
+    // create GetApplicationAttemptReport specifically for getting per attempt
+    // info.
+    String diags = null;
+    switch (event.getType()) {
+    case APP_REJECTED:
+      RMAppRejectedEvent rejectedEvent = (RMAppRejectedEvent) event;
+      diags = rejectedEvent.getMessage();
+      break;
+    case ATTEMPT_FINISHED:
+      RMAppFinishedAttemptEvent finishedEvent =
+          (RMAppFinishedAttemptEvent) event;
+      diags = finishedEvent.getDiagnostics();
+      break;
+    case ATTEMPT_FAILED:
+      RMAppFailedAttemptEvent failedEvent = (RMAppFailedAttemptEvent) event;
+      diags = getAppAttemptFailedDiagnostics(failedEvent);
+      break;
+    case KILL:
+      diags = getAppKilledDiagnostics();
+      break;
+    default:
+      break;
+    }
+    ApplicationState appState =
+        new ApplicationState(this.submitTime, this.startTime,
+          this.submissionContext, this.user, stateToBeStored, diags,
+          this.storedFinishTime);
+    this.rmContext.getStateStore().updateApplicationState(appState);
+  }
+
+  private static final class FinalSavingTransition extends RMAppTransition {
+    Object transitionToDo;
+    RMAppState targetedFinalState;
+    RMAppState stateToBeStored;
+
+    public FinalSavingTransition(Object transitionToDo,
+        RMAppState targetedFinalState) {
+      this(transitionToDo, targetedFinalState, targetedFinalState);
+    }
+
+    public FinalSavingTransition(Object transitionToDo,
+        RMAppState targetedFinalState, RMAppState stateToBeStored) {
+      this.transitionToDo = transitionToDo;
+      this.targetedFinalState = targetedFinalState;
+      this.stateToBeStored = stateToBeStored;
+    }
+
-      LOG.info("Removing application with id " + app.applicationId);
-      app.removeApplicationState();
-      app.previousStateAtRemoving = app.getState();
+      app.rememberTargetTransitionsAndStoreState(event, transitionToDo,
+        targetedFinalState, stateToBeStored);
+    }
+  }
+
+  private static class AttemptUnregisteredTransition extends RMAppTransition {
+    @Override
+    public void transition(RMAppImpl app, RMAppEvent event) {
+      app.finishTime = app.storedFinishTime;
+  private static class AttemptFinishedAtFinalSavingTransition extends
+      RMAppTransition {
+    @Override
+    public void transition(RMAppImpl app, RMAppEvent event) {
+      if (app.targetedFinalState.equals(RMAppState.FAILED)
+          || app.targetedFinalState.equals(RMAppState.KILLED)) {
+        // Ignore Attempt_Finished event if we were supposed to reach FAILED
+        // FINISHED state
+        return;
+      }
+
+      // pass in the earlier attempt_unregistered event, as it is needed in
+      // AppFinishedFinalStateSavedTransition later on
+      app.rememberTargetTransitions(event,
+        new AppFinishedFinalStateSavedTransition(app.eventCausingFinalSaving),
+        RMAppState.FINISHED);
+    };
+  }
+
+  private static class AppFinishedFinalStateSavedTransition extends
+      RMAppTransition {
+    RMAppEvent attemptUnregistered;
+
+    public AppFinishedFinalStateSavedTransition(RMAppEvent attemptUnregistered) {
+      this.attemptUnregistered = attemptUnregistered;
+    }
+    @Override
+    public void transition(RMAppImpl app, RMAppEvent event) {
+      new AttemptUnregisteredTransition().transition(app, attemptUnregistered);
+      FINISHED_TRANSITION.transition(app, event);
+    };
+  }
+
+
+  private static String getAppKilledDiagnostics() {
+    return "Application killed by user.";
+  }
+
-      if (app.getState() != RMAppState.FINISHING) {
+      app.finishTime = app.storedFinishTime;
+      if (app.finishTime == 0 ) {
-      // application completely done and remove from state store.
-      app.removeApplicationState();
-
-
-      RMAppFailedAttemptEvent failedEvent = ((RMAppFailedAttemptEvent) event);
-      boolean retryApp = true;
-      String msg = null;
-      if (app.submissionContext.getUnmanagedAM()) {
-        // RM does not manage the AM. Do not retry
-        retryApp = false;
-        msg = "Unmanaged application " + app.getApplicationId()
-            + " failed due to " + failedEvent.getDiagnostics()
-            + ". Failing the application.";
-      } else if (app.attempts.size() >= app.maxAppAttempts) {
-        retryApp = false;
-        msg = "Application " + app.getApplicationId() + " failed "
-            + app.maxAppAttempts + " times due to " + failedEvent.getDiagnostics()
-            + ". Failing the application.";
-      }
-
-      if (retryApp) {
+      if (!app.submissionContext.getUnmanagedAM()
+          && app.attempts.size() < app.maxAppAttempts) {
-        LOG.info(msg);
-        app.diagnostics.append(msg);
-        // Inform the node for app-finish
-        FINAL_TRANSITION.transition(app, event);
-        return RMAppState.FAILED;
+        app.rememberTargetTransitionsAndStoreState(event,
+          new AttemptFailedFinalStateSavedTransition(), RMAppState.FAILED,
+          RMAppState.FAILED);
+        return RMAppState.FINAL_SAVING;
-    // If App is in REMOVING state, return its previous state.
-    if (rmAppState.equals(RMAppState.REMOVING)) {
-      rmAppState = previousStateAtRemoving;
+    // If App is in FINAL_SAVING state, return its previous state.
+    if (rmAppState.equals(RMAppState.FINAL_SAVING)) {
+      rmAppState = stateBeforeFinalSaving;
-
-  private void removeApplicationState(){
-    if (!isAppRemovalRequestSent) {
-      rmContext.getStateStore().removeApplication(this);
-      isAppRemovalRequestSent = true;
-    }
-  }

MOV23 INS23 INS23 INS23 INS23 INS55 INS55 INS55 INS31 INS31 INS31 INS55 INS55 INS55 INS55 INS31 UPD39 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS83 MOV83 MOV83 UPD42 MOV42 INS74 INS31 INS83 INS83 INS83 INS42 INS74 INS31 MOV83 MOV83 INS42 INS43 INS31 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 MOV8 INS83 INS83 INS83 INS42 MOV43 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS42 INS43 INS31 INS83 INS83 INS42 INS43 INS31 INS83 INS83 INS42 MOV43 INS23 INS31 INS31 INS83 INS83 INS43 INS42 INS8 INS34 UPD42 INS34 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS21 INS21 INS21 INS21 INS43 INS43 INS43 INS43 MOV78 MOV83 INS43 MOV42 MOV44 MOV44 INS8 INS78 MOV8 INS43 INS43 INS43 INS43 INS79 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS42 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV8 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 MOV21 INS60 INS50 INS60 INS21 INS43 INS59 INS43 INS59 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS42 INS44 INS44 INS44 INS8 INS78 INS83 MOV39 UPD42 MOV42 INS44 INS44 INS8 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS41 MOV25 UPD42 MOV42 INS7 INS32 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS25 INS41 INS42 MOV21 INS42 INS42 INS42 INS42 INS42 INS4 INS42 INS42 INS43 INS42 INS43 INS42 MOV60 MOV25 INS25 INS41 MOV60 INS25 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS32 INS7 INS43 INS59 MOV32 INS49 INS60 INS21 INS10 INS49 INS60 INS21 INS10 INS49 MOV60 INS21 INS10 INS49 INS21 INS10 INS49 INS10 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS17 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS43 INS42 INS43 INS42 MOV21 INS42 INS43 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS25 INS21 INS42 INS42 INS43 INS42 MOV21 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS45 UPD40 UPD40 UPD42 INS22 INS32 INS22 INS42 INS32 INS22 INS32 INS22 INS32 INS27 INS8 INS32 UPD43 INS45 INS45 INS42 INS42 UPD43 INS62 INS8 INS25 INS40 INS62 INS8 INS42 INS42 INS33 INS42 INS42 INS11 INS22 INS42 INS21 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS22 INS42 INS42 INS33 INS42 INS43 INS59 INS7 INS42 INS43 INS59 MOV7 INS42 INS7 INS42 INS7 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS27 INS8 INS32 INS42 INS42 INS42 INS32 INS32 INS7 UPD27 INS27 MOV8 MOV8 UPD40 UPD40 UPD40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 INS52 INS42 INS42 INS42 UPD45 INS22 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS40 INS33 INS21 INS41 INS14 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS40 INS43 INS21 INS62 INS8 INS42 INS43 INS21 INS43 INS42 INS52 INS42 INS7 INS32 INS22 INS21 UPD42 INS52 INS42 INS42 INS52 INS42 UPD45 INS22 INS45 INS22 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS11 INS42 MOV11 INS42 INS32 INS42 INS32 INS43 INS22 INS22 INS22 INS22 INS42 INS42 INS22 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS40 INS40 INS32 INS32 INS41 INS42 INS42 INS42 INS14 INS40 INS22 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 UPD40 INS34 INS38 UPD27 MOV27 INS21 INS41 UPD40 INS32 UPD40 UPD40 INS52 INS42 INS32 INS40 INS43 INS40 UPD43 UPD43 UPD42 UPD42 INS42 INS32 INS40 INS43 INS21 INS42 INS7 INS42 INS42 INS27 INS22 INS42 INS52 INS42 INS7 INS52 INS42 INS52 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS40 INS42 INS40 INS40 INS42 INS40 INS43 INS40 INS52 INS42 INS43 MOV32 INS32 INS40 UPD42 UPD40 INS32 INS42 INS42 INS40 INS40 INS40 MOV40 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS36 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS45 INS32 INS45 MOV32 INS45 INS52 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS14 INS40 INS40 UPD40 UPD40 UPD40 MOV14 INS42 INS42 UPD40 MOV40 UPD45 UPD42 UPD42 UPD42 UPD42 INS11 INS36 INS42 INS42 INS40 INS42 INS42 INS42 INS52 INS42 INS45 INS32 INS45 INS22 INS45 MOV32 INS45 INS43 UPD40 UPD40 UPD40 INS42 UPD42 INS43 INS40 INS11 INS52 INS42 INS52 INS42 INS42 UPD40 UPD40 INS32 INS42 INS43 INS40 UPD40 UPD40 UPD40 INS42 INS42 INS40 UPD40 MOV40 INS42 INS40 INS32 UPD40 UPD43 UPD40 MOV40 UPD40 INS42 INS42 UPD40 MOV40 INS40 MOV40 INS40 UPD43 UPD42 INS32 UPD40 INS14 INS43 MOV14 UPD40 UPD42 UPD40 UPD40 INS42 INS42 INS42 INS40 UPD40 MOV40 INS43 INS40 INS42 UPD43 MOV43 UPD40 UPD40 INS42 UPD42 UPD40 UPD40 UPD40 UPD43 INS14 INS40 INS40 UPD40 MOV40 UPD40 UPD43 UPD42 INS43 INS32 UPD40 INS14 INS43 INS14 UPD40 UPD42 INS42 UPD40 UPD40 INS42 INS42 INS40 UPD40 MOV40 INS43 INS40 INS42 UPD43 MOV43 UPD40 UPD40 UPD40 MOV14 INS42 UPD42 UPD40 UPD40 INS14 UPD40 UPD40 INS43 INS14 INS40 UPD40 UPD40 INS42 INS43 UPD40 UPD40 UPD40 UPD43 MOV14 INS40 INS42 UPD40 UPD40 INS14 UPD43 UPD42 UPD40 UPD40 INS43 MOV14 INS40 UPD42 INS32 INS42 INS40 INS40 INS40 MOV14 UPD43 MOV14 INS40 INS42 UPD43 MOV43 MOV32 MOV42 MOV40 MOV40 MOV40 MOV14 UPD42 MOV42 UPD40 INS14 UPD40 INS14 INS43 INS14 INS40 INS32 INS14 INS43 MOV14 INS40 INS42 INS43 INS42 INS42 MOV40 INS40 INS40 INS40 INS40 INS43 INS42 INS43 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL9 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL40 DEL40 DEL42 DEL40 DEL40 DEL40 DEL40 DEL32 DEL42 DEL40 DEL40 DEL42 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL6 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL25 DEL8 DEL40 DEL41 DEL83 DEL39 DEL42 DEL40 DEL32 DEL8 DEL25 DEL8 DEL31 DEL55 DEL40 DEL40 DEL40 DEL36 DEL32 DEL21 DEL21 DEL32 DEL52 DEL83 DEL42 DEL31 DEL55 DEL42 DEL9 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL42 DEL45 DEL42 DEL32 DEL45 DEL40 DEL45 DEL45 DEL27 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL45 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL25 DEL83 DEL42 DEL38 DEL8 DEL25 DEL8 DEL31