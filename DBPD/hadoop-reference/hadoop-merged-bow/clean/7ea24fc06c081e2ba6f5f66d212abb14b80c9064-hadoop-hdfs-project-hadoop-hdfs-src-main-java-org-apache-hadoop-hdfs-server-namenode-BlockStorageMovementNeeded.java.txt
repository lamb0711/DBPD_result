HDFS-12225: [SPS]: Optimize extended attributes for tracking SPS movements. Contributed by Surendra Singh Lilhore.

+import static org.apache.hadoop.hdfs.server.common.HdfsServerConstants.XATTR_SATISFY_STORAGE_POLICY;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import org.apache.hadoop.hdfs.server.namenode.StoragePolicySatisfier.ItemInfo;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
+import org.apache.hadoop.util.Daemon;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
- * A Class to track the block collection IDs for which physical storage movement
- * needed as per the Namespace and StorageReports from DN.
+ * A Class to track the block collection IDs (Inode's ID) for which physical
+ * storage movement needed as per the Namespace and StorageReports from DN.
+ * It scan the pending directories for which storage movement is required and
+ * schedule the block collection IDs for movement. It track the info of
+ * scheduled items and remove the SPS xAttr from the file/Directory once
+ * movement is success.
-  private final Queue<Long> storageMovementNeeded = new LinkedList<Long>();
+
+  public static final Logger LOG =
+      LoggerFactory.getLogger(BlockStorageMovementNeeded.class);
+
+  private final Queue<ItemInfo> storageMovementNeeded =
+      new LinkedList<ItemInfo>();
-   * Add the block collection id to tracking list for which storage movement
+   * Map of rootId and number of child's. Number of child's indicate the number
+   * of files pending to satisfy the policy.
+   */
+  private final Map<Long, Integer> pendingWorkForDirectory =
+      new HashMap<Long, Integer>();
+
+  private final Namesystem namesystem;
+
+  // List of pending dir to satisfy the policy
+  private final Queue<Long> spsDirsToBeTraveresed = new LinkedList<Long>();
+
+  private final StoragePolicySatisfier sps;
+
+  private Daemon fileInodeIdCollector;
+
+  public BlockStorageMovementNeeded(Namesystem namesystem,
+      StoragePolicySatisfier sps) {
+    this.namesystem = namesystem;
+    this.sps = sps;
+  }
+
+  /**
+   * Add the candidate to tracking list for which storage movement
-   * @param blockCollectionID
-   *          - block collection id, which is nothing but inode id.
+   * @param trackInfo
+   *          - track info for satisfy the policy
-  public synchronized void add(Long blockCollectionID) {
-    storageMovementNeeded.add(blockCollectionID);
+  public synchronized void add(ItemInfo trackInfo) {
+    storageMovementNeeded.add(trackInfo);
+  }
+
+  /**
+   * Add the itemInfo to tracking list for which storage movement
+   * expected if necessary.
+   * @param rootId
+   *            - root inode id
+   * @param itemInfoList
+   *            - List of child in the directory
+   */
+  private synchronized void addAll(Long rootId,
+      List<ItemInfo> itemInfoList) {
+    storageMovementNeeded.addAll(itemInfoList);
+    pendingWorkForDirectory.put(rootId, itemInfoList.size());
-  public synchronized Long get() {
+  public synchronized ItemInfo get() {
+  public synchronized void addToPendingDirQueue(long id) {
+    spsDirsToBeTraveresed.add(id);
+    // Notify waiting FileInodeIdCollector thread about the newly
+    // added SPS path.
+    synchronized (spsDirsToBeTraveresed) {
+      spsDirsToBeTraveresed.notify();
+    }
+  }
+
+    spsDirsToBeTraveresed.clear();
+    pendingWorkForDirectory.clear();
+  }
+
+  /**
+   * Decrease the pending child count for directory once one file blocks moved
+   * successfully. Remove the SPS xAttr if pending child count is zero.
+   */
+  public synchronized void removeItemTrackInfo(ItemInfo trackInfo)
+      throws IOException {
+    if (trackInfo.isDir()) {
+      // If track is part of some root then reduce the pending directory work
+      // count.
+      long rootId = trackInfo.getRootId();
+      INode inode = namesystem.getFSDirectory().getInode(rootId);
+      if (inode == null) {
+        // directory deleted just remove it.
+        this.pendingWorkForDirectory.remove(rootId);
+      } else {
+        if (pendingWorkForDirectory.get(rootId) != null) {
+          Integer pendingWork = pendingWorkForDirectory.get(rootId) - 1;
+          pendingWorkForDirectory.put(rootId, pendingWork);
+          if (pendingWork <= 0) {
+            namesystem.removeXattr(rootId, XATTR_SATISFY_STORAGE_POLICY);
+            pendingWorkForDirectory.remove(rootId);
+          }
+        }
+      }
+    } else {
+      // Remove xAttr if trackID doesn't exist in
+      // storageMovementAttemptedItems or file policy satisfied.
+      namesystem.removeXattr(trackInfo.getTrackId(),
+          XATTR_SATISFY_STORAGE_POLICY);
+    }
+  }
+
+  public synchronized void clearQueue(long trackId) {
+    spsDirsToBeTraveresed.remove(trackId);
+    Iterator<ItemInfo> iterator = storageMovementNeeded.iterator();
+    while (iterator.hasNext()) {
+      ItemInfo next = iterator.next();
+      if (next.getRootId() == trackId) {
+        iterator.remove();
+      }
+    }
+    pendingWorkForDirectory.remove(trackId);
+  }
+
+  /**
+   * Clean all the movements in spsDirsToBeTraveresed/storageMovementNeeded
+   * and notify to clean up required resources.
+   * @throws IOException
+   */
+  public synchronized void clearQueuesWithNotification() {
+    // Remove xAttr from directories
+    Long trackId;
+    while ((trackId = spsDirsToBeTraveresed.poll()) != null) {
+      try {
+        // Remove xAttr for file
+        namesystem.removeXattr(trackId, XATTR_SATISFY_STORAGE_POLICY);
+      } catch (IOException ie) {
+        LOG.warn("Failed to remove SPS xattr for track id " + trackId, ie);
+      }
+    }
+
+    // File's directly added to storageMovementNeeded, So try to remove
+    // xAttr for file
+    ItemInfo itemInfo;
+    while ((itemInfo = storageMovementNeeded.poll()) != null) {
+      try {
+        // Remove xAttr for file
+        if (!itemInfo.isDir()) {
+          namesystem.removeXattr(itemInfo.getTrackId(),
+              XATTR_SATISFY_STORAGE_POLICY);
+        }
+      } catch (IOException ie) {
+        LOG.warn(
+            "Failed to remove SPS xattr for track id "
+                + itemInfo.getTrackId(), ie);
+      }
+    }
+    this.clearAll();
+  }
+
+  /**
+   * Take dir tack ID from the spsDirsToBeTraveresed queue and collect child
+   * ID's to process for satisfy the policy.
+   */
+  private class FileInodeIdCollector implements Runnable {
+    @Override
+    public void run() {
+      LOG.info("Starting FileInodeIdCollector!.");
+      while (namesystem.isRunning() && sps.isRunning()) {
+        try {
+          if (!namesystem.isInSafeMode()) {
+            FSDirectory fsd = namesystem.getFSDirectory();
+            Long rootINodeId = spsDirsToBeTraveresed.poll();
+            if (rootINodeId == null) {
+              // Waiting for SPS path
+              synchronized (spsDirsToBeTraveresed) {
+                spsDirsToBeTraveresed.wait(5000);
+              }
+            } else {
+              INode rootInode = fsd.getInode(rootINodeId);
+              if (rootInode != null) {
+                // TODO : HDFS-12291
+                // 1. Implement an efficient recursive directory iteration
+                // mechanism and satisfies storage policy for all the files
+                // under the given directory.
+                // 2. Process files in batches,so datanodes workload can be
+                // handled.
+                List<ItemInfo> itemInfoList =
+                    new ArrayList<>();
+                for (INode childInode : rootInode.asDirectory()
+                    .getChildrenList(Snapshot.CURRENT_STATE_ID)) {
+                  if (childInode.isFile()
+                      && childInode.asFile().numBlocks() != 0) {
+                    itemInfoList.add(
+                        new ItemInfo(rootINodeId, childInode.getId()));
+                  }
+                }
+                if (itemInfoList.isEmpty()) {
+                  // satisfy track info is empty, so remove the xAttr from the
+                  // directory
+                  namesystem.removeXattr(rootINodeId,
+                      XATTR_SATISFY_STORAGE_POLICY);
+                }
+                addAll(rootINodeId, itemInfoList);
+              }
+            }
+          }
+        } catch (Throwable t) {
+          LOG.warn("Exception while loading inodes to satisfy the policy", t);
+        }
+      }
+    }
+  }
+
+  public void start() {
+    fileInodeIdCollector = new Daemon(new FileInodeIdCollector());
+    fileInodeIdCollector.setName("FileInodeIdCollector");
+    fileInodeIdCollector.start();
+  }
+
+  public void stop() {
+    if (fileInodeIdCollector != null) {
+      fileInodeIdCollector.interrupt();
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS44 INS29 INS83 INS83 INS39 INS42 MOV44 INS44 INS8 INS43 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS42 INS43 INS31 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 UPD66 UPD66 INS66 INS66 INS66 INS66 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS65 INS43 MOV43 INS43 INS42 INS14 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS43 INS42 INS65 INS65 INS65 UPD42 INS74 INS42 INS21 INS21 INS42 INS39 INS42 INS21 INS51 INS21 INS21 INS65 INS43 INS42 INS42 INS25 INS39 INS42 INS21 INS60 INS61 INS21 INS65 INS65 INS60 INS61 INS60 INS61 INS21 INS65 INS42 INS78 INS83 INS39 INS42 INS8 INS21 INS21 INS21 INS25 INS42 INS42 INS57 INS42 INS42 INS74 INS66 INS66 INS42 INS42 INS74 INS42 INS42 INS7 INS7 UPD66 UPD42 UPD66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS32 INS32 INS32 INS42 INS8 INS32 INS32 INS66 INS66 INS42 INS32 INS8 INS8 INS32 INS74 INS59 INS32 INS8 INS32 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS66 INS66 INS42 INS21 INS61 INS7 INS32 INS32 INS27 INS8 INS43 INS43 INS43 INS43 INS43 INS43 INS22 INS42 INS22 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS25 INS21 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS36 INS33 INS54 INS42 INS42 INS36 INS33 INS54 INS52 INS42 INS32 INS27 INS8 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS7 INS8 INS12 INS7 INS8 INS12 INS42 INS42 INS45 INS32 INS32 INS54 INS43 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS21 INS42 INS32 INS21 INS44 INS8 INS42 INS32 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS38 INS8 INS43 INS42 INS21 INS25 INS44 INS8 INS42 INS42 INS42 INS22 INS42 INS42 INS32 INS33 INS60 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS42 INS32 INS38 INS8 INS43 INS42 INS21 INS52 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS60 INS60 INS25 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS34 INS21 INS21 INS45 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS45 INS42 INS32 INS34 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS51 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS43 INS59 INS27 INS8 INS21 INS42 INS42 INS32 INS42 INS33 INS60 INS70 INS25 INS21 INS32 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS8 INS32 INS42 INS42 INS34 INS43 INS43 INS42 INS14 INS43 INS42 INS32 INS42 INS40 INS25 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS27 INS8 INS32 INS43 INS32 INS27 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42