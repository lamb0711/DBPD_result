HDFS-5438. Flaws in block report processing can cause data loss. Contributed by Kihwal Lee.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1542054 13f79535-47bb-0310-9956-ffa450edef68

-  private SortedMap<Block, Collection<DatanodeDescriptor>> corruptReplicasMap =
-    new TreeMap<Block, Collection<DatanodeDescriptor>>();
+  /** The corruption reason code */
+  public static enum Reason {
+    NONE,                // not specified.
+    ANY,                 // wildcard reason
+    GENSTAMP_MISMATCH,   // mismatch in generation stamps
+    SIZE_MISMATCH,       // mismatch in sizes
+    INVALID_STATE,       // invalid state
+    CORRUPTION_REPORTED  // client or datanode reported the corruption
+  }
+
+  private SortedMap<Block, Map<DatanodeDescriptor, Reason>> corruptReplicasMap =
+    new TreeMap<Block, Map<DatanodeDescriptor, Reason>>();
-    Collection<DatanodeDescriptor> nodes = getNodes(blk);
+    addToCorruptReplicasMap(blk, dn, reason, Reason.NONE);
+  }
+
+  /**
+   * Mark the block belonging to datanode as corrupt.
+   *
+   * @param blk Block to be added to CorruptReplicasMap
+   * @param dn DatanodeDescriptor which holds the corrupt replica
+   * @param reason a textual reason (for logging purposes)
+   * @param reasonCode the enum representation of the reason
+   */
+  public void addToCorruptReplicasMap(Block blk, DatanodeDescriptor dn,
+      String reason, Reason reasonCode) {
+    Map <DatanodeDescriptor, Reason> nodes = corruptReplicasMap.get(blk);
-      nodes = new TreeSet<DatanodeDescriptor>();
+      nodes = new HashMap<DatanodeDescriptor, Reason>();
-    if (!nodes.contains(dn)) {
-      nodes.add(dn);
+    if (!nodes.keySet().contains(dn)) {
+    // Add the node or update the reason.
+    nodes.put(dn, reasonCode);
-    Collection<DatanodeDescriptor> datanodes = corruptReplicasMap.get(blk);
+    return removeFromCorruptReplicasMap(blk, datanode, Reason.ANY);
+  }
+
+  boolean removeFromCorruptReplicasMap(Block blk, DatanodeDescriptor datanode,
+      Reason reason) {
+    Map <DatanodeDescriptor, Reason> datanodes = corruptReplicasMap.get(blk);
+    boolean removed = false;
-    if (datanodes.remove(datanode)) { // remove the replicas
+
+    // if reasons can be compared but don't match, return false.
+    Reason storedReason = datanodes.get(datanode);
+    if (reason != Reason.ANY && storedReason != null &&
+        reason != storedReason) {
+      return false;
+    }
+
+    if (datanodes.remove(datanode) != null) { // remove the replicas
-    return corruptReplicasMap.get(blk);
+    Map <DatanodeDescriptor, Reason> nodes = corruptReplicasMap.get(blk);
+    if (nodes == null)
+      return null;
+    return nodes.keySet();

INS71 INS31 INS31 INS29 INS83 INS83 INS42 INS72 INS72 INS72 INS72 INS72 INS72 UPD74 MOV29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS44 MOV29 INS39 INS42 INS44 INS44 INS8 INS44 INS65 INS42 INS42 INS42 INS42 INS42 INS42 UPD74 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS41 INS43 INS42 INS60 INS60 INS25 INS60 INS25 INS41 INS66 UPD43 INS43 UPD74 INS42 INS42 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 UPD74 INS32 INS42 INS42 INS32 INS42 UPD74 INS39 INS59 INS43 INS59 INS27 INS8 INS27 INS74 INS59 INS27 INS41 INS32 UPD42 INS42 UPD74 INS42 INS42 INS42 INS42 INS40 UPD43 INS43 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 UPD43 INS43 INS42 INS9 INS42 INS42 INS32 INS27 INS27 INS41 MOV32 INS33 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS33 INS42 INS42 UPD43 MOV43 UPD43 UPD42 INS42 INS42 UPD42 MOV42 MOV42 INS32 UPD42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS9 INS42 INS42 INS42 MOV42 MOV42 MOV42 UPD42 UPD42 MOV42 INS42 INS42 INS40 INS42 INS33 UPD74 UPD43 INS43 INS43 UPD42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL41