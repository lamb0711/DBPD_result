YARN-5070. upgrade HBase version for first merge (Vrushali C via sjlee)

+import org.apache.hadoop.hbase.client.Scan;
-import org.apache.hadoop.hbase.regionserver.HRegion;
+import org.apache.hadoop.hbase.regionserver.Region;
+import org.apache.hadoop.hbase.regionserver.ScannerContext;
-  private final HRegion region;
+  private final Region region;
-  private final int limit;
+  private final int batchSize;
-  FlowScanner(RegionCoprocessorEnvironment env, int limit,
+  FlowScanner(RegionCoprocessorEnvironment env, InternalScanner internalScanner,
+      FlowScannerOperation action) {
+    this(env, null, internalScanner, action);
+  }
+
+  FlowScanner(RegionCoprocessorEnvironment env, Scan incomingScan,
-    this.limit = limit;
+    this.batchSize = incomingScan == null ? -1 : incomingScan.getBatch();
+    // TODO initialize other scan attributes like Scan#maxResultSize
+    if (LOG.isDebugEnabled()) {
+      LOG.debug(" batch size=" + batchSize);
+    }
+
-    return nextRaw(cells, limit);
+    return nextRaw(cells, ScannerContext.newBuilder().build());
-  public boolean nextRaw(List<Cell> cells, int cellLimit) throws IOException {
-    return nextInternal(cells, cellLimit);
+  public boolean nextRaw(List<Cell> cells, ScannerContext scannerContext)
+      throws IOException {
+    return nextInternal(cells, scannerContext);
-    return next(cells, limit);
+    return next(cells, ScannerContext.newBuilder().build());
-  public boolean next(List<Cell> cells, int cellLimit) throws IOException {
-    return nextInternal(cells, cellLimit);
+  public boolean next(List<Cell> cells, ScannerContext scannerContext)
+      throws IOException {
+    return nextInternal(cells, scannerContext);
-   * Checks if the converter is a numeric converter or not. For a converter to
-   * be numeric, it must implement {@link NumericValueConverter} interface.
-   * @param converter
-   * @return true, if converter is of type NumericValueConverter, false
-   * otherwise.
-   */
-  private static boolean isNumericConverter(ValueConverter converter) {
-    return (converter instanceof NumericValueConverter);
-  }
-
-  /**
-   * @param cellLimit
+   * @param scannerContext
-  @SuppressWarnings("deprecation")
-  private boolean nextInternal(List<Cell> cells, int cellLimit)
+  private boolean nextInternal(List<Cell> cells, ScannerContext scannerContext)
-    byte[] currentColumnQualifier = Separator.EMPTY_BYTES;
+    byte[] previousColumnQualifier = Separator.EMPTY_BYTES;
+    int limit = batchSize;
-    while (cellLimit <= 0 || addedCnt < cellLimit) {
-      cell = peekAtNextCell(cellLimit);
+    while (limit <= 0 || addedCnt < limit) {
+      cell = peekAtNextCell(scannerContext);
-      byte[] newColumnQualifier = CellUtil.cloneQualifier(cell);
-      if (comp.compare(currentColumnQualifier, newColumnQualifier) != 0) {
-        if (converter != null && isNumericConverter(converter)) {
-          addedCnt += emitCells(cells, currentColumnCells, currentAggOp,
-              converter, currentTimestamp);
-        }
-        resetState(currentColumnCells, alreadySeenAggDim);
-        currentColumnQualifier = newColumnQualifier;
-        currentAggOp = getCurrentAggOp(cell);
-        converter = getValueConverter(newColumnQualifier);
+      byte[] currentColumnQualifier = CellUtil.cloneQualifier(cell);
+      if (previousColumnQualifier == null) {
+        // first time in loop
+        previousColumnQualifier = currentColumnQualifier;
-      // No operation needs to be performed on non numeric converters.
-      if (!isNumericConverter(converter)) {
-        currentColumnCells.add(cell);
-        nextCell(cellLimit);
-        continue;
+
+      converter = getValueConverter(currentColumnQualifier);
+      if (comp.compare(previousColumnQualifier, currentColumnQualifier) != 0) {
+        addedCnt += emitCells(cells, currentColumnCells, currentAggOp,
+            converter, currentTimestamp);
+        resetState(currentColumnCells, alreadySeenAggDim);
+        previousColumnQualifier = currentColumnQualifier;
+        currentAggOp = getCurrentAggOp(cell);
+        converter = getValueConverter(currentColumnQualifier);
-          (NumericValueConverter)converter);
-      nextCell(cellLimit);
+          converter, scannerContext);
+      nextCell(scannerContext);
-    if (!currentColumnCells.isEmpty()) {
-      addedCnt += emitCells(cells, currentColumnCells, currentAggOp,
-          converter, currentTimestamp);
+    if ((!currentColumnCells.isEmpty()) && ((limit <= 0 || addedCnt < limit))) {
+      addedCnt += emitCells(cells, currentColumnCells, currentAggOp, converter,
+          currentTimestamp);
-              + FlowRunRowKey.parseRowKey(cells.get(0).getRow()).toString());
+              + FlowRunRowKey.parseRowKey(CellUtil.cloneRow(cells.get(0))));
-   * resets the parameters to an intialized state for next loop iteration.
+   * resets the parameters to an initialized state for next loop iteration.
-      Set<String> alreadySeenAggDim, NumericValueConverter converter)
-      throws IOException {
+      Set<String> alreadySeenAggDim, ValueConverter converter,
+      ScannerContext scannerContext) throws IOException {
+
-      nextCell(limit);
-            converter);
+            (NumericValueConverter) converter);
-            converter);
+            (NumericValueConverter) converter);
-   * @param cellLimit
-   *          the limit of number of cells to return if the next batch must be
-   *          fetched by the wrapped scanner
+   * @param scannerContext
+   *          context information for the batch of cells under consideration
-  public Cell nextCell(int cellLimit) throws IOException {
-    Cell cell = peekAtNextCell(cellLimit);
+  public Cell nextCell(ScannerContext scannerContext) throws IOException {
+    Cell cell = peekAtNextCell(scannerContext);
-   * @param cellLimit
-   *          the limit of number of cells to return if the next batch must be
-   *          fetched by the wrapped scanner
+   * @param scannerContext
+   *          context information for the batch of cells under consideration
-  public Cell peekAtNextCell(int cellLimit) throws IOException {
+  public Cell peekAtNextCell(ScannerContext scannerContext) throws IOException {
-      hasMore = flowRunScanner.next(availableCells, cellLimit);
+      hasMore = flowRunScanner.next(availableCells, scannerContext);
+
+  @Override
+  public int getBatch() {
+    return batchSize;
+  }

MOV26 INS26 INS26 MOV31 MOV31 MOV31 INS40 UPD40 INS40 INS31 UPD43 INS42 INS44 INS44 INS44 INS8 UPD42 UPD42 MOV78 UPD42 MOV44 MOV78 UPD42 MOV44 MOV44 INS78 UPD83 UPD39 UPD42 UPD42 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS17 INS43 INS42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS60 UPD43 UPD42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS8 INS42 INS42 UPD42 INS42 INS39 INS59 INS27 UPD66 UPD42 UPD42 UPD66 INS42 UPD42 UPD66 INS42 INS42 INS16 INS42 INS42 INS21 UPD42 INS32 UPD42 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS25 MOV21 MOV21 INS36 INS36 UPD42 INS27 INS38 INS32 INS32 INS32 INS42 INS32 INS42 UPD42 UPD42 INS27 INS8 INS7 MOV8 MOV38 INS36 UPD42 INS42 INS33 INS34 INS42 INS42 INS42 INS42 INS27 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 INS42 INS33 INS21 INS42 INS32 MOV21 INS21 MOV21 INS21 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS27 MOV43 MOV43 INS45 INS42 UPD42 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS7 INS7 INS27 INS27 MOV32 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 UPD42 UPD42 UPD42 INS11 INS42 INS42 MOV32 INS43 INS42 INS42 UPD42 INS27 INS42 INS45 INS42 INS45 MOV22 INS45 MOV32 MOV32 INS42 UPD42 DEL39 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL42 DEL45 DEL79 DEL39 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL25 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL38 DEL18 DEL8 DEL25 DEL21 DEL42 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL66 DEL39 DEL42 DEL66 DEL39 DEL42 DEL66 DEL66 DEL42 DEL65 DEL66 DEL65 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL62 DEL36