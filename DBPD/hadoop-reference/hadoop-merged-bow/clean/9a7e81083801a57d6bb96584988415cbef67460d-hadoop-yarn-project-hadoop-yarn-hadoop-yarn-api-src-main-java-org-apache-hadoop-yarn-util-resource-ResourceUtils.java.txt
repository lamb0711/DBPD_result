YARN-6927. Add support for individual resource types requests in MapReduce
(Contributed by Gergo Repas via Daniel Templeton)

+import java.util.Map.Entry;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+  private static final Pattern RESOURCE_REQUEST_VALUE_PATTERN =
+      Pattern.compile("^([0-9]+) ?([a-zA-Z]*)$");
+
+  /**
+   * From a given configuration get all entries representing requested
+   * resources: entries that match the {prefix}{resourceName}={value}[{units}]
+   * pattern.
+   * @param configuration The configuration
+   * @param prefix Keys with this prefix are considered from the configuration
+   * @return The list of requested resources as described by the configuration
+   */
+  public static List<ResourceInformation> getRequestedResourcesFromConfig(
+      Configuration configuration, String prefix) {
+    List<ResourceInformation> result = new ArrayList<>();
+    Map<String, String> customResourcesMap = configuration
+        .getValByRegex("^" + Pattern.quote(prefix) + "[^.]+$");
+    for (Entry<String, String> resource : customResourcesMap.entrySet()) {
+      String resourceName = resource.getKey().substring(prefix.length());
+      Matcher matcher =
+          RESOURCE_REQUEST_VALUE_PATTERN.matcher(resource.getValue());
+      if (!matcher.matches()) {
+        String errorMsg = "Invalid resource request specified for property "
+            + resource.getKey() + ": \"" + resource.getValue()
+            + "\", expected format is: value[ ][units]";
+        LOG.error(errorMsg);
+        throw new IllegalArgumentException(errorMsg);
+      }
+      long value = Long.parseLong(matcher.group(1));
+      String unit = matcher.group(2);
+      if (unit.isEmpty()) {
+        unit = ResourceUtils.getDefaultUnit(resourceName);
+      }
+      ResourceInformation resourceInformation = new ResourceInformation();
+      resourceInformation.setName(resourceName);
+      resourceInformation.setValue(value);
+      resourceInformation.setUnits(unit);
+      result.add(resourceInformation);
+    }
+    return result;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS42 INS42 INS32 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS60 INS60 INS70 INS41 INS42 INS42 INS45 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS25 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS38 INS8 INS39 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS43 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS60 INS21 INS53 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS34 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42