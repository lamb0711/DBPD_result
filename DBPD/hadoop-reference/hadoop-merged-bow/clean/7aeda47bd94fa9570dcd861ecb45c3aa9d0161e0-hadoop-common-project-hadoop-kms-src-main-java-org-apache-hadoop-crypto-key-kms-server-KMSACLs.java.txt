Merge branch 'trunk' into HDFS-6581

+import org.apache.hadoop.crypto.key.kms.server.KeyAuthorizationKeyProvider.KeyACLs;
+import org.apache.hadoop.crypto.key.kms.server.KeyAuthorizationKeyProvider.KeyOpType;
+import java.util.regex.Pattern;
-public class KMSACLs implements Runnable {
+public class KMSACLs implements Runnable, KeyACLs {
+  private volatile Map<String, HashMap<KeyOpType, AccessControlList>> keyAcls;
+  private final Map<KeyOpType, AccessControlList> defaultKeyAcls =
+      new HashMap<KeyOpType, AccessControlList>();
-    setACLs(conf);
+    setKMSACLs(conf);
+    setKeyACLs(conf);
-  private void setACLs(Configuration conf) {
+  private void setKMSACLs(Configuration conf) {
+  private void setKeyACLs(Configuration conf) {
+    Map<String, HashMap<KeyOpType, AccessControlList>> tempKeyAcls =
+        new HashMap<String, HashMap<KeyOpType,AccessControlList>>();
+    Map<String, String> allKeyACLS =
+        conf.getValByRegex(Pattern.quote(KMSConfiguration.KEY_ACL_PREFIX));
+    for (Map.Entry<String, String> keyAcl : allKeyACLS.entrySet()) {
+      String k = keyAcl.getKey();
+      // this should be of type "key.acl.<KEY_NAME>.<OP_TYPE>"
+      int keyNameStarts = KMSConfiguration.KEY_ACL_PREFIX.length();
+      int keyNameEnds = k.lastIndexOf(".");
+      if (keyNameStarts >= keyNameEnds) {
+        LOG.warn("Invalid key name '{}'", k);
+      } else {
+        String aclStr = keyAcl.getValue();
+        String keyName = k.substring(keyNameStarts, keyNameEnds);
+        String keyOp = k.substring(keyNameEnds + 1);
+        KeyOpType aclType = null;
+        try {
+          aclType = KeyOpType.valueOf(keyOp);
+        } catch (IllegalArgumentException e) {
+          LOG.warn("Invalid key Operation '{}'", keyOp);
+        }
+        if (aclType != null) {
+          // On the assumption this will be single threaded.. else we need to
+          // ConcurrentHashMap
+          HashMap<KeyOpType,AccessControlList> aclMap =
+              tempKeyAcls.get(keyName);
+          if (aclMap == null) {
+            aclMap = new HashMap<KeyOpType, AccessControlList>();
+            tempKeyAcls.put(keyName, aclMap);
+          }
+          aclMap.put(aclType, new AccessControlList(aclStr));
+          LOG.info("KEY_NAME '{}' KEY_OP '{}' ACL '{}'",
+              keyName, aclType, aclStr);
+        }
+      }
+    }
+
+    keyAcls = tempKeyAcls;
+    for (KeyOpType keyOp : KeyOpType.values()) {
+      if (!defaultKeyAcls.containsKey(keyOp)) {
+        String confKey = KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + keyOp;
+        String aclStr = conf.get(confKey);
+        if (aclStr != null) {
+          if (aclStr.equals("*")) {
+            LOG.info("Default Key ACL for  KEY_OP '{}' is set to '*'", keyOp);
+          }
+          defaultKeyAcls.put(keyOp, new AccessControlList(aclStr));
+        }
+      }
+    }
+  }
+
-        setACLs(loadACLs());
+        setKMSACLs(loadACLs());
+        setKeyACLs(loadACLs());
-      LOG.warn("Could not reload ACLs file: " + ex.toString(), ex);
+      LOG.warn(
+          String.format("Could not reload ACLs file: '%s'", ex.toString()), ex);
+  @Override
+  public boolean hasAccessToKey(String keyName, UserGroupInformation ugi,
+      KeyOpType opType) {
+    Map<KeyOpType, AccessControlList> keyAcl = keyAcls.get(keyName);
+    if (keyAcl == null) {
+      // Get KeyAcl map of DEFAULT KEY.
+      keyAcl = defaultKeyAcls;
+    }
+    // If No key acl defined for this key, check to see if
+    // there are key defaults configured for this operation
+    AccessControlList acl = keyAcl.get(opType);
+    if (acl == null) {
+      // If no acl is specified for this operation,
+      // deny access
+      return false;
+    } else {
+      return acl.isUserAllowed(ugi);
+    }
+  }
+
+  @Override
+  public boolean isACLPresent(String keyName, KeyOpType opType) {
+    return (keyAcls.containsKey(keyName) || defaultKeyAcls.containsKey(opType));
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS42 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 UPD42 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS74 INS42 INS43 INS43 INS43 INS42 INS14 INS21 INS43 INS42 INS60 INS60 INS70 INS21 INS70 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS25 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS74 INS32 INS42 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS7 INS44 INS32 INS8 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS36 INS42 INS42 INS42 INS43 INS43 INS43 UPD42 INS42 INS42 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS42 INS42 INS43 INS42 INS42 INS42 INS25 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS41 INS41 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS43 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS42 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS9 INS32 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS60 INS60 INS60 INS60 INS54 INS25 INS32 INS60 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS45 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS27 INS8 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS60 INS25 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS25 INS21 UPD42 INS42 INS32 INS42 INS42 INS45 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS7 INS43 INS42 INS21 INS74 INS59 INS27 INS8 INS32 INS32 INS40 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS42 INS42 INS34 INS42 INS32 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS21 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS43 INS42 INS32 INS43 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS74 INS43 INS43 INS43 INS42 INS42 INS42 DEL45 DEL27