Merge r1550130 through r1555020 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1555021 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
+import org.apache.hadoop.fs.CacheFlag;
+import org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo.Expiration;
-import org.apache.hadoop.hdfs.server.namenode.CachePool;
-import org.apache.hadoop.ipc.RemoteException;
-import org.apache.hadoop.security.UserGroupInformation;
-    return command.run(getConf(), argsList);
+    try {
+      return command.run(getConf(), argsList);
+    } catch (IllegalArgumentException e) {
+      System.err.println(prettifyException(e));
+      return -1;
+    }
+  /**
+   * Parses a time-to-live value from a string
+   * @return The ttl in milliseconds
+   * @throws IOException if it could not be parsed
+   */
+  private static Long parseTtlString(String maxTtlString) throws IOException {
+    Long maxTtl = null;
+    if (maxTtlString != null) {
+      if (maxTtlString.equalsIgnoreCase("never")) {
+        maxTtl = CachePoolInfo.RELATIVE_EXPIRY_NEVER;
+      } else {
+        maxTtl = DFSUtil.parseRelativeTime(maxTtlString);
+      }
+    }
+    return maxTtl;
+  }
+
+  private static Expiration parseExpirationString(String ttlString)
+      throws IOException {
+    Expiration ex = null;
+    if (ttlString != null) {
+      if (ttlString.equalsIgnoreCase("never")) {
+        ex = CacheDirectiveInfo.Expiration.NEVER;
+      } else {
+        long ttl = DFSUtil.parseRelativeTime(ttlString);
+        ex = CacheDirectiveInfo.Expiration.newRelative(ttl);
+      }
+    }
+    return ex;
+  }
+
+          "[-force] " +
+      listing.addRow("-force",
+          "Skips checking of cache pool resource limits.");
-          "valid. Can be specified in minutes, hours, and days via e.g. " +
+          "valid. Can be specified in minutes, hours, and days, e.g. " +
+          " \"never\" indicates a directive that never expires." +
-
+      boolean force = StringUtils.popOption("-force", args);
-      if (ttlString != null) {
-        try {
-          long ttl = DFSUtil.parseRelativeTime(ttlString);
-          builder.setExpiration(CacheDirectiveInfo.Expiration.newRelative(ttl));
-        } catch (IOException e) {
-          System.err.println(
-              "Error while parsing ttl value: " + e.getMessage());
-          return 1;
+      try {
+        Expiration ex = parseExpirationString(ttlString);
+        if (ex != null) {
+          builder.setExpiration(ex);
+      } catch (IOException e) {
+        System.err.println(
+            "Error while parsing ttl value: " + e.getMessage());
+        return 1;
+      EnumSet<CacheFlag> flags = EnumSet.noneOf(CacheFlag.class);
+      if (force) {
+        flags.add(CacheFlag.FORCE);
+      }
-        long id = dfs.addCacheDirective(directive);
+        long id = dfs.addCacheDirective(directive, flags);
-          " -id <id> [-path <path>] [-replication <replication>] " +
+          " -id <id> [-path <path>] [-force] [-replication <replication>] " +
+      listing.addRow("-force",
+          "Skips checking of cache pool resource limits.");
-          "valid. Can be specified in minutes, hours, and days via e.g. " +
+          "valid. Can be specified in minutes, hours, and days, e.g. " +
-          " If unspecified, the directive never expires.");
+          " \"never\" indicates a directive that never expires.");
+      boolean force = StringUtils.popOption("-force", args);
-      if (ttlString != null) {
-        long ttl;
-        try {
-          ttl = DFSUtil.parseRelativeTime(ttlString);
-        } catch (IOException e) {
-          System.err.println(
-              "Error while parsing ttl value: " + e.getMessage());
-          return 1;
+      try {
+        Expiration ex = parseExpirationString(ttlString);
+        if (ex != null) {
+          builder.setExpiration(ex);
+          modified = true;
-        builder.setExpiration(CacheDirectiveInfo.Expiration.newRelative(ttl));
-        modified = true;
+      } catch (IOException e) {
+        System.err.println(
+            "Error while parsing ttl value: " + e.getMessage());
+        return 1;
+      EnumSet<CacheFlag> flags = EnumSet.noneOf(CacheFlag.class);
+      if (force) {
+        flags.add(CacheFlag.FORCE);
+      }
-        dfs.modifyCacheDirective(builder.build());
+        dfs.modifyCacheDirective(builder.build(), flags);
-      DistributedFileSystem dfs = getDFS(conf);
-      RemoteIterator<CacheDirectiveEntry> iter =
-          dfs.listCacheDirectives(
-              new CacheDirectiveInfo.Builder().
-                  setPath(new Path(path)).build());
-      while (iter.hasNext()) {
-        CacheDirectiveEntry entry = iter.next();
-        try {
-          dfs.removeCacheDirective(entry.getInfo().getId());
-          System.out.println("Removed cache directive " +
-              entry.getInfo().getId());
-        } catch (IOException e) {
-          System.err.println(prettifyException(e));
-          exitCode = 2;
+      try {
+        DistributedFileSystem dfs = getDFS(conf);
+        RemoteIterator<CacheDirectiveEntry> iter =
+            dfs.listCacheDirectives(
+                new CacheDirectiveInfo.Builder().
+                    setPath(new Path(path)).build());
+        while (iter.hasNext()) {
+          CacheDirectiveEntry entry = iter.next();
+          try {
+            dfs.removeCacheDirective(entry.getInfo().getId());
+            System.out.println("Removed cache directive " +
+                entry.getInfo().getId());
+          } catch (IOException e) {
+            System.err.println(prettifyException(e));
+            exitCode = 2;
+          }
+      } catch (IOException e) {
+        System.err.println(prettifyException(e));
+        exitCode = 2;
-
-      DistributedFileSystem dfs = getDFS(conf);
-      RemoteIterator<CacheDirectiveEntry> iter =
-          dfs.listCacheDirectives(builder.build());
-      int numEntries = 0;
-      while (iter.hasNext()) {
-        CacheDirectiveEntry entry = iter.next();
-        CacheDirectiveInfo directive = entry.getInfo();
-        CacheDirectiveStats stats = entry.getStats();
-        List<String> row = new LinkedList<String>();
-        row.add("" + directive.getId());
-        row.add(directive.getPool());
-        row.add("" + directive.getReplication());
-        String expiry;
-        if (directive.getExpiration().getMillis() ==
-            CacheDirectiveInfo.Expiration.EXPIRY_NEVER) {
-          expiry = "never";
-        } else {
-          expiry = directive.getExpiration().toString();
+      try {
+        DistributedFileSystem dfs = getDFS(conf);
+        RemoteIterator<CacheDirectiveEntry> iter =
+            dfs.listCacheDirectives(builder.build());
+        int numEntries = 0;
+        while (iter.hasNext()) {
+          CacheDirectiveEntry entry = iter.next();
+          CacheDirectiveInfo directive = entry.getInfo();
+          CacheDirectiveStats stats = entry.getStats();
+          List<String> row = new LinkedList<String>();
+          row.add("" + directive.getId());
+          row.add(directive.getPool());
+          row.add("" + directive.getReplication());
+          String expiry;
+          // This is effectively never, round for nice printing
+          if (directive.getExpiration().getMillis() >
+              Expiration.MAX_RELATIVE_EXPIRY_MS / 2) {
+            expiry = "never";
+          } else {
+            expiry = directive.getExpiration().toString();
+          }
+          row.add(expiry);
+          row.add(directive.getPath().toUri().getPath());
+          if (printStats) {
+            row.add("" + stats.getBytesNeeded());
+            row.add("" + stats.getBytesCached());
+            row.add("" + stats.getFilesNeeded());
+            row.add("" + stats.getFilesCached());
+          }
+          tableListing.addRow(row.toArray(new String[0]));
+          numEntries++;
-        row.add(expiry);
-        row.add(directive.getPath().toUri().getPath());
-        if (printStats) {
-          row.add("" + stats.getBytesNeeded());
-          row.add("" + stats.getBytesCached());
-          row.add("" + stats.getFilesNeeded());
-          row.add("" + stats.getFilesCached());
+        System.out.print(String.format("Found %d entr%s\n",
+            numEntries, numEntries == 1 ? "y" : "ies"));
+        if (numEntries > 0) {
+          System.out.print(tableListing);
-        tableListing.addRow(row.toArray(new String[0]));
-        numEntries++;
-      }
-      System.out.print(String.format("Found %d entr%s\n",
-          numEntries, numEntries == 1 ? "y" : "ies"));
-      if (numEntries > 0) {
-        System.out.print(tableListing);
+      } catch (IOException e) {
+        System.err.println(prettifyException(e));
+        return 2;
-          "[-group <group>] [-mode <mode>] [-weight <weight>]]\n";
+          "[-group <group>] [-mode <mode>] [-limit <limit>] " +
+          "[-maxTtl <maxTtl>]\n";
-          FsPermission.getCachePoolDefault().toShort()));
-      listing.addRow("<weight>", "Weight of the pool. " +
-          "This is a relative measure of the importance of the pool used " +
-          "during cache resource management. By default, it is set to " +
-          CachePool.DEFAULT_WEIGHT);
-
+          FsPermission.getCachePoolDefault().toShort()) + ".");
+      listing.addRow("<limit>", "The maximum number of bytes that can be " +
+          "cached by directives in this pool, in aggregate. By default, " +
+          "no limit is set.");
+      listing.addRow("<maxTtl>", "The maximum allowed time-to-live for " +
+          "directives being added to the pool. This can be specified in " +
+          "seconds, minutes, hours, and days, e.g. 120s, 30m, 4h, 2d. " +
+          "Valid units are [smhd]. By default, no maximum is set. " +
+          "This can also be manually specified by \"never\".");
-      String owner = StringUtils.popOptionWithArgument("-owner", args);
-      if (owner == null) {
-        owner = UserGroupInformation.getCurrentUser().getShortUserName();
-      }
-      String group = StringUtils.popOptionWithArgument("-group", args);
-      if (group == null) {
-        group = UserGroupInformation.getCurrentUser().getGroupNames()[0];
-      }
-      String modeString = StringUtils.popOptionWithArgument("-mode", args);
-      int mode;
-      if (modeString == null) {
-        mode = FsPermission.getCachePoolDefault().toShort();
-      } else {
-        mode = Integer.parseInt(modeString, 8);
-      }
-      String weightString = StringUtils.popOptionWithArgument("-weight", args);
-      int weight;
-      if (weightString == null) {
-        weight = CachePool.DEFAULT_WEIGHT;
-      } else {
-        weight = Integer.parseInt(weightString);
-      }
+      CachePoolInfo info = new CachePoolInfo(name);
+
+      String owner = StringUtils.popOptionWithArgument("-owner", args);
+      if (owner != null) {
+        info.setOwnerName(owner);
+      }
+      String group = StringUtils.popOptionWithArgument("-group", args);
+      if (group != null) {
+        info.setGroupName(group);
+      }
+      String modeString = StringUtils.popOptionWithArgument("-mode", args);
+      if (modeString != null) {
+        short mode = Short.parseShort(modeString, 8);
+        info.setMode(new FsPermission(mode));
+      }
+      String limitString = StringUtils.popOptionWithArgument("-limit", args);
+      if (limitString != null) {
+        long limit = Long.parseLong(limitString);
+        info.setLimit(limit);
+      }
+      String maxTtlString = StringUtils.popOptionWithArgument("-maxTtl", args);
+      try {
+        Long maxTtl = parseTtlString(maxTtlString);
+        if (maxTtl != null) {
+          info.setMaxRelativeExpiryMs(maxTtl);
+        }
+      } catch (IOException e) {
+        System.err.println(
+            "Error while parsing maxTtl value: " + e.getMessage());
+        return 1;
+      }
+
-      CachePoolInfo info = new CachePoolInfo(name).
-          setOwnerName(owner).
-          setGroupName(group).
-          setMode(new FsPermission((short)mode)).
-          setWeight(weight);
-        throw new RemoteException(e.getClass().getName(), e.getMessage());
+        System.err.println(prettifyException(e));
+        return 2;
-          "[-group <group>] [-mode <mode>] [-weight <weight>]]\n";
+          "[-group <group>] [-mode <mode>] [-limit <limit>] " +
+          "[-maxTtl <maxTtl>]]\n";
-      listing.addRow("<weight>", "Weight of the pool.");
+      listing.addRow("<limit>", "Maximum number of bytes that can be cached " +
+          "by this pool.");
+      listing.addRow("<maxTtl>", "The maximum allowed time-to-live for " +
+          "directives being added to the pool.");
-          "See usage of " + AddCachePoolCommand.NAME + " for more details",
+          "See usage of " + AddCachePoolCommand.NAME + " for more details.",
-      String weightString = StringUtils.popOptionWithArgument("-weight", args);
-      Integer weight = (weightString == null) ?
-          null : Integer.parseInt(weightString);
+      String limitString = StringUtils.popOptionWithArgument("-limit", args);
+      Long limit = (limitString == null) ?
+          null : Long.parseLong(limitString);
+      String maxTtlString = StringUtils.popOptionWithArgument("-maxTtl", args);
+      Long maxTtl = null;
+      try {
+        maxTtl = parseTtlString(maxTtlString);
+      } catch (IOException e) {
+        System.err.println(
+            "Error while parsing maxTtl value: " + e.getMessage());
+        return 1;
+      }
-      if (weight != null) {
-        info.setWeight(weight);
+      if (limit != null) {
+        info.setLimit(limit);
+        changed = true;
+      }
+      if (maxTtl != null) {
+        info.setMaxRelativeExpiryMs(maxTtl);
-        throw new RemoteException(e.getClass().getName(), e.getMessage());
+        System.err.println(prettifyException(e));
+        return 2;
-      if (weight != null) {
-        System.out.print(prefix + "weight " + weight);
+      if (limit != null) {
+        System.out.print(prefix + "limit " + limit);
+      if (maxTtl != null) {
+        System.out.print(prefix + "max time-to-live " + maxTtlString);
+      }
-        throw new RemoteException(e.getClass().getName(), e.getMessage());
+        System.err.println(prettifyException(e));
+        return 2;
-          addField("WEIGHT", Justification.RIGHT);
+          addField("LIMIT", Justification.RIGHT).
+          addField("MAXTTL", Justification.RIGHT);
+            addField("BYTES_OVERLIMIT", Justification.RIGHT).
-            row.add(
-                info.getWeight() != null ? info.getWeight().toString() : null);
+            Long limit = info.getLimit();
+            String limitString;
+            if (limit != null && limit.equals(CachePoolInfo.LIMIT_UNLIMITED)) {
+              limitString = "unlimited";
+            } else {
+              limitString = "" + limit;
+            }
+            row.add(limitString);
+            Long maxTtl = info.getMaxRelativeExpiryMs();
+            String maxTtlString = null;
+
+            if (maxTtl != null) {
+              if (maxTtl.longValue() == CachePoolInfo.RELATIVE_EXPIRY_NEVER) {
+                maxTtlString  = "never";
+              } else {
+                maxTtlString = DFSUtil.durationToString(maxTtl);
+              }
+            }
+            row.add(maxTtlString);
+              row.add(Long.toString(stats.getBytesOverlimit()));
-        throw new RemoteException(e.getClass().getName(), e.getMessage());
+        System.err.println(prettifyException(e));
+        return 2;

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS54 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS42 INS60 MOV25 INS41 MOV78 MOV43 MOV60 MOV25 MOV78 MOV43 INS8 INS12 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS8 INS42 INS21 INS60 MOV54 INS60 INS25 INS21 MOV60 MOV54 INS60 INS25 INS54 INS54 INS21 INS60 INS60 INS54 INS54 INS21 INS60 INS60 INS54 INS25 INS54 INS25 MOV41 INS44 INS8 INS42 INS42 INS33 INS42 INS33 INS25 INS42 INS42 INS33 INS25 INS32 INS39 INS59 INS8 INS74 INS59 INS42 INS8 INS32 UPD39 INS74 INS59 INS42 INS8 INS8 INS12 INS8 INS12 INS32 INS43 INS59 UPD27 UPD27 UPD27 UPD27 UPD43 MOV43 INS59 INS8 INS12 MOV8 INS12 INS32 UPD43 INS43 INS59 INS43 INS59 INS8 INS12 INS27 INS8 MOV8 INS12 INS27 INS8 INS43 INS42 INS21 INS41 INS32 INS8 INS8 INS32 MOV8 MOV8 INS45 INS42 INS42 INS45 INS45 INS42 INS32 INS60 INS25 INS43 INS43 INS42 INS32 INS21 UPD45 INS42 INS42 INS45 INS45 UPD42 INS32 INS60 INS25 INS43 INS43 INS42 INS32 MOV21 MOV60 MOV60 MOV61 INS44 INS8 MOV60 MOV60 MOV60 MOV61 MOV21 MOV25 INS44 INS8 UPD45 INS45 INS42 INS42 INS45 INS27 UPD45 INS42 INS42 INS14 INS60 INS21 UPD42 UPD42 INS60 INS21 UPD42 UPD42 MOV42 INS32 INS60 INS25 MOV44 INS8 INS44 INS8 UPD45 INS45 UPD45 INS27 INS42 INS42 INS45 INS27 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 UPD42 INS42 INS33 INS21 INS21 MOV44 INS8 INS42 INS33 INS21 MOV21 UPD42 INS32 INS42 INS32 INS38 INS42 INS42 INS45 INS21 INS21 INS42 INS42 INS45 INS21 UPD45 INS45 INS42 INS42 INS45 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS57 INS32 UPD45 UPD45 INS42 INS42 INS45 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 UPD42 MOV42 INS57 INS32 INS43 INS42 INS21 INS21 INS43 INS42 INS21 INS41 INS27 INS45 INS45 INS45 INS45 UPD45 UPD45 INS45 UPD45 INS45 INS43 INS42 INS32 INS32 INS39 INS59 INS32 UPD45 INS39 INS59 INS32 INS42 INS42 INS45 INS42 INS43 INS59 INS27 INS8 INS21 INS41 INS43 INS42 INS21 INS41 INS45 INS45 INS45 INS45 UPD45 INS42 INS42 INS45 INS42 INS7 INS43 INS42 INS21 INS41 INS32 INS7 INS21 INS41 INS32 INS21 INS41 MOV32 INS42 INS45 INS40 INS32 INS21 INS41 INS40 INS42 INS32 INS34 INS7 INS7 INS7 INS7 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS43 INS42 INS42 INS40 INS42 INS42 INS32 INS7 INS42 INS32 INS34 MOV45 MOV45 MOV45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV14 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS33 INS21 INS32 INS34 INS42 INS32 INS34 UPD45 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS32 INS34 UPD42 UPD42 INS42 INS42 INS42 INS42 INS9 INS32 INS34 INS40 UPD42 MOV42 INS27 INS32 INS34 UPD45 MOV32 INS42 INS45 INS40 INS32 INS34 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS40 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 MOV7 INS42 INS40 INS42 INS32 INS42 INS34 UPD27 INS40 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 MOV34 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS40 INS42 INS27 INS40 INS42 INS32 UPD42 INS42 INS42 INS40 INS42 INS27 INS40 INS42 MOV32 INS42 INS45 INS42 UPD45 UPD42 INS40 INS42 INS32 UPD45 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 MOV32 UPD42 MOV42 UPD42 MOV42 INS45 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 UPD45 INS60 INS60 INS25 INS21 INS60 INS60 INS25 INS21 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 INS34 MOV42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS25 INS42 INS42 INS42 INS21 MOV42 UPD42 MOV42 INS42 MOV33 INS42 INS42 INS40 INS7 INS7 MOV42 UPD42 MOV42 INS27 INS8 INS8 INS32 INS42 INS45 INS42 INS27 INS32 INS40 INS21 INS21 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL40 DEL42 DEL32 DEL32 DEL7 DEL42 DEL32 DEL32 DEL34 DEL2 DEL7 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL39 DEL42 DEL11 DEL42 DEL32 DEL7 DEL21 DEL39 DEL42 DEL59 DEL60 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL32 DEL7 DEL21 DEL43 DEL42 DEL14 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL32 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL45 DEL42 DEL42 DEL43 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL32 DEL32 DEL14 DEL53 DEL42 DEL42 DEL32 DEL27 DEL32 DEL42 DEL32 DEL33 DEL16 DEL32 DEL21 DEL42 DEL43 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL14 DEL53