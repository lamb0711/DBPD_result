HDFS-11419. DFSTopologyNodeImpl#chooseRandom optimizations. Contributed by Chen Liang.

-import java.util.Map;
+  /**
+   * This map stores storage type counts of the subtree. We can always get this
+   * info by iterate over the childrenStorageInfo variable. But for optimization
+   * purpose, we store this info directly to avoid the iteration.
+   */
+  private final EnumMap<StorageType, Integer> storageTypeCounts;
+
+    storageTypeCounts = new EnumMap<>(StorageType.class);
+    storageTypeCounts = new EnumMap<>(StorageType.class);
-    int res = 0;
-    for (Map.Entry<String, EnumMap<StorageType, Integer>> entry :
-        childrenStorageInfo.entrySet()) {
-      if (entry.getValue().containsKey(type)) {
-        res += entry.getValue().get(type);
-      }
+    if (storageTypeCounts.containsKey(type)) {
+      return storageTypeCounts.get(type);
+    } else {
+      return 0;
-    return res;
+  private void incStorageTypeCount(StorageType type) {
+    // no locking because the caller is synchronized already
+    if (storageTypeCounts.containsKey(type)) {
+      storageTypeCounts.put(type, storageTypeCounts.get(type)+1);
+    } else {
+      storageTypeCounts.put(type, 1);
+    }
+  }
+
+  private void decStorageTypeCount(StorageType type) {
+    // no locking because the caller is synchronized already
+    int current = storageTypeCounts.get(type);
+    current -= 1;
+    if (current == 0) {
+      storageTypeCounts.remove(type);
+    } else {
+      storageTypeCounts.put(type, current);
+    }
+  }
+
-      synchronized (childrenStorageInfo) {
-        if (!childrenStorageInfo.containsKey(dnDescriptor.getName())) {
-          childrenStorageInfo.put(
-              dnDescriptor.getName(), new EnumMap<>(StorageType.class));
-        }
-        for (StorageType st : dnDescriptor.getStorageTypes()) {
-          childrenStorageInfo.get(dnDescriptor.getName()).put(st, 1);
-        }
+      if (!childrenStorageInfo.containsKey(dnDescriptor.getName())) {
+        childrenStorageInfo.put(
+            dnDescriptor.getName(), new EnumMap<>(StorageType.class));
+      }
+      for (StorageType st : dnDescriptor.getStorageTypes()) {
+        childrenStorageInfo.get(dnDescriptor.getName()).put(st, 1);
+        incStorageTypeCount(st);
-        synchronized (childrenStorageInfo) {
-          if (!childrenStorageInfo.containsKey(parentNode.getName())) {
-            childrenStorageInfo.put(
-                parentNode.getName(), new EnumMap<>(StorageType.class));
-            for (StorageType st : dnDescriptor.getStorageTypes()) {
-              childrenStorageInfo.get(parentNode.getName()).put(st, 1);
-            }
-          } else {
-            EnumMap<StorageType, Integer> currentCount =
-                childrenStorageInfo.get(parentNode.getName());
-            for (StorageType st : dnDescriptor.getStorageTypes()) {
-              if (currentCount.containsKey(st)) {
-                currentCount.put(st, currentCount.get(st) + 1);
-              } else {
-                currentCount.put(st, 1);
-              }
+        if (!childrenStorageInfo.containsKey(parentNode.getName())) {
+          childrenStorageInfo.put(
+              parentNode.getName(), new EnumMap<>(StorageType.class));
+          for (StorageType st : dnDescriptor.getStorageTypes()) {
+            childrenStorageInfo.get(parentNode.getName()).put(st, 1);
+          }
+        } else {
+          EnumMap<StorageType, Integer> currentCount =
+              childrenStorageInfo.get(parentNode.getName());
+          for (StorageType st : dnDescriptor.getStorageTypes()) {
+            if (currentCount.containsKey(st)) {
+              currentCount.put(st, currentCount.get(st) + 1);
+            } else {
+              currentCount.put(st, 1);
+        for (StorageType st : dnDescriptor.getStorageTypes()) {
+          incStorageTypeCount(st);
+        }
-            synchronized (childrenStorageInfo) {
-              childrenStorageInfo.remove(dnDescriptor.getName());
+            childrenStorageInfo.remove(dnDescriptor.getName());
+            for (StorageType st : dnDescriptor.getStorageTypes()) {
+              decStorageTypeCount(st);
-        synchronized (childrenStorageInfo) {
-          EnumMap<StorageType, Integer> currentCount =
-              childrenStorageInfo.get(parentNode.getName());
-          EnumSet<StorageType> toRemove = EnumSet.noneOf(StorageType.class);
-          for (StorageType st : dnDescriptor.getStorageTypes()) {
-            int newCount = currentCount.get(st) - 1;
-            if (newCount == 0) {
-              toRemove.add(st);
-            }
-            currentCount.put(st, newCount);
+        EnumMap<StorageType, Integer> currentCount =
+            childrenStorageInfo.get(parentNode.getName());
+        EnumSet<StorageType> toRemove = EnumSet.noneOf(StorageType.class);
+        for (StorageType st : dnDescriptor.getStorageTypes()) {
+          int newCount = currentCount.get(st) - 1;
+          if (newCount == 0) {
+            toRemove.add(st);
-          for (StorageType st : toRemove) {
-            currentCount.remove(st);
-          }
+          currentCount.put(st, newCount);
+        }
+        for (StorageType st : toRemove) {
+          currentCount.remove(st);
+        }
+        for (StorageType st : dnDescriptor.getStorageTypes()) {
+          decStorageTypeCount(st);

INS23 INS31 INS31 INS31 INS29 INS83 INS83 MOV74 INS59 MOV83 MOV39 MOV42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 MOV8 MOV8 INS65 INS42 INS21 INS21 INS25 INS43 UPD42 MOV42 MOV25 INS43 INS42 INS60 INS21 INS25 MOV25 MOV25 MOV60 INS25 MOV25 MOV25 MOV60 INS66 INS66 INS66 INS7 INS7 INS32 INS8 INS8 UPD42 MOV42 INS8 INS42 INS39 INS59 INS7 INS27 INS8 INS8 MOV32 MOV8 INS8 MOV32 MOV8 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS41 INS41 UPD42 MOV42 INS21 INS42 INS32 INS42 INS34 INS42 INS34 INS21 INS21 MOV21 MOV21 MOV60 MOV25 MOV21 MOV21 INS41 MOV60 MOV60 MOV25 INS25 MOV60 MOV60 MOV25 MOV60 MOV41 INS74 INS57 INS74 INS57 INS32 INS34 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS9 MOV32 INS8 MOV8 INS42 MOV8 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 MOV21 MOV25 INS70 MOV41 INS70 INS25 MOV21 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS44 INS32 INS8 INS44 INS32 INS8 MOV27 MOV8 INS42 MOV42 MOV42 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS32 INS42 INS42 MOV21 INS70 INS42 INS42 INS44 INS32 INS8 INS43 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL39 DEL42 DEL34 DEL59 DEL60 DEL40 DEL43 DEL43 DEL74 DEL44 DEL42 DEL42 DEL32 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL32 DEL32 DEL7 DEL42 DEL51 DEL42 DEL8 DEL51 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL8 DEL51 DEL42 DEL42 DEL51 DEL25 DEL8