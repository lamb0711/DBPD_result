HDFS-8466. Refactor BlockInfoContiguous and fix NPE in TestBlockInfo#testCopyConstructor() (Contributed by Vinayakumar B)

-   * Copy construction.
-   * This is used to convert BlockReplicationInfoUnderConstruction
+   * Copy construction. This is used to convert
+   * BlockReplicationInfoUnderConstruction
+   *
-    this(from, from.getBlockCollection().getPreferredBlockReplication());
-    this.triplets = new Object[from.triplets.length];
+    this(from, (short) (from.triplets.length / 3));
-  public DatanodeDescriptor getDatanode(int index) {
-    DatanodeStorageInfo storage = getStorageInfo(index);
-    return storage == null ? null : storage.getDatanodeDescriptor();
-  }
-
-  DatanodeStorageInfo getStorageInfo(int index) {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3 < triplets.length : "Index is out of bound";
-    return (DatanodeStorageInfo)triplets[index*3];
-  }
-
-  /**
-   * Return the previous block on the block list for the datanode at
-   * position index. Set the previous block on the list to "to".
-   *
-   * @param index - the datanode index
-   * @param to - block to be set to previous on the list of blocks
-   * @return current previous block on the list of blocks
-   */
-  private BlockInfoContiguous setPrevious(int index, BlockInfoContiguous to) {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3+1 < triplets.length : "Index is out of bound";
-    BlockInfoContiguous info = (BlockInfoContiguous)triplets[index*3+1];
-    triplets[index*3+1] = to;
-    return info;
-  }
-
-  /**
-   * Return the next block on the block list for the datanode at
-   * position index. Set the next block on the list to "to".
-   *
-   * @param index - the datanode index
-   * @param to - block to be set to next on the list of blocks
-   *    * @return current next block on the list of blocks
-   */
-  private BlockInfoContiguous setNext(int index, BlockInfoContiguous to) {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3+2 < triplets.length : "Index is out of bound";
-    BlockInfoContiguous info = (BlockInfoContiguous)triplets[index*3+2];
-    triplets[index*3+2] = to;
-    return info;
-  }
-
-  public int getCapacity() {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert triplets.length % 3 == 0 : "Malformed BlockInfo";
-    return triplets.length / 3;
-  }
-

INS17 UPD66 UPD66 MOV42 INS11 INS39 INS36 INS27 INS40 INS34 DEL42 DEL42 DEL32 DEL42 DEL32 DEL17 DEL52 DEL42 DEL22 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL42 DEL42 DEL32 DEL16 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL40 DEL27 DEL27 DEL45 DEL6 DEL42 DEL43 DEL42 DEL42 DEL34 DEL27 DEL2 DEL11 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL34 DEL27 DEL40 DEL27 DEL27 DEL45 DEL6 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL34 DEL27 DEL34 DEL27 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL34 DEL27 DEL40 DEL27 DEL27 DEL45 DEL6 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL34 DEL27 DEL34 DEL27 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL40 DEL34 DEL27 DEL34 DEL27 DEL45 DEL6 DEL40 DEL34 DEL27 DEL41 DEL8 DEL31