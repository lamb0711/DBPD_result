YARN-4720. Skip unnecessary NN operations in log aggregation. (Jun Gong via mingma)

+  // This variable is only for testing
+  private int logAggregationTimes = 0;
+
+    String diagnosticMessage = "";
+    boolean logAggregationSucceedInThisCycle = true;
+      if (pendingContainerInThisCycle.isEmpty()) {
+        return;
+      }
+
+      logAggregationTimes++;
+
+        logAggregationSucceedInThisCycle = false;
-      String diagnosticMessage = "";
-      boolean logAggregationSucceedInThisCycle = true;
-            if (remoteFS.exists(remoteNodeTmpLogFileForApp)) {
-              if (rename) {
-                remoteFS.rename(remoteNodeTmpLogFileForApp, renamedPath);
-              } else {
-                remoteFS.delete(remoteNodeTmpLogFileForApp, false);
-              }
+            if (rename) {
+              remoteFS.rename(remoteNodeTmpLogFileForApp, renamedPath);
+            } else {
+              remoteFS.delete(remoteNodeTmpLogFileForApp, false);
-
-      LogAggregationReport report =
-          Records.newRecord(LogAggregationReport.class);
-      report.setApplicationId(appId);
-      report.setDiagnosticMessage(diagnosticMessage);
-      report.setLogAggregationStatus(logAggregationSucceedInThisCycle
-          ? LogAggregationStatus.RUNNING
-          : LogAggregationStatus.RUNNING_WITH_FAILURE);
-      this.context.getLogAggregationStatusForApps().add(report);
+    } finally {
+      LogAggregationStatus logAggregationStatus =
+          logAggregationSucceedInThisCycle
+              ? LogAggregationStatus.RUNNING
+              : LogAggregationStatus.RUNNING_WITH_FAILURE;
+      sendLogAggregationReport(logAggregationStatus, diagnosticMessage);
-        LogAggregationReport finalReport =
-            Records.newRecord(LogAggregationReport.class);
-        finalReport.setApplicationId(appId);
-        finalReport.setLogAggregationStatus(renameTemporaryLogFileFailed
-            ? LogAggregationStatus.FAILED : LogAggregationStatus.SUCCEEDED);
-        this.context.getLogAggregationStatusForApps().add(finalReport);
+        LogAggregationStatus finalLogAggregationStatus =
+            renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle
+                ? LogAggregationStatus.FAILED
+                : LogAggregationStatus.SUCCEEDED;
+        sendLogAggregationReport(finalLogAggregationStatus, "");
-    } finally {
+
+  private void sendLogAggregationReport(
+      LogAggregationStatus logAggregationStatus, String diagnosticMessage) {
+    LogAggregationReport report =
+        Records.newRecord(LogAggregationReport.class);
+    report.setApplicationId(appId);
+    report.setDiagnosticMessage(diagnosticMessage);
+    report.setLogAggregationStatus(logAggregationStatus);
+    this.context.getLogAggregationStatusForApps().add(report);
+  }
+
+
+  @Private
+  @VisibleForTesting
+  public int getLogAggregationTimes() {
+    return this.logAggregationTimes;
+  }

INS23 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS78 INS83 INS39 INS42 INS8 INS42 INS34 MOV60 MOV60 INS43 INS42 INS43 INS42 MOV60 MOV21 MOV21 INS21 MOV21 INS42 INS42 INS41 INS8 INS42 INS42 INS32 INS22 INS25 MOV21 INS60 INS21 INS25 MOV25 INS42 INS42 INS42 INS52 INS42 INS32 INS8 INS37 MOV8 INS43 INS59 INS32 INS42 INS8 UPD42 MOV42 UPD42 MOV42 INS41 INS42 INS21 MOV21 INS42 INS42 MOV16 INS42 INS42 INS42 INS60 INS21 INS21 INS32 INS43 INS59 INS32 INS7 UPD42 MOV42 UPD42 MOV42 INS14 INS42 INS42 INS16 INS42 INS42 INS45 INS42 INS9 MOV74 INS1 INS27 INS40 INS40 INS31 INS42 INS38 MOV78 INS83 MOV43 INS42 MOV43 MOV8 INS42 MOV60 MOV41 DEL42 DEL42 DEL42 DEL40 DEL40 DEL16 DEL32 DEL42 DEL32 DEL25 DEL42 DEL42 DEL83 DEL42 DEL31 DEL1 DEL14 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8