HDDS-1888. Add containers to node2container map in SCM as part of ICR processing.

Signed-off-by: Nanda kumar <nanda@apache.org>

+      checkIfNodeExist(nodeId);
-      if (nodeMap.containsKey(uuid)) {
-        return nodeMap.get(uuid);
-      }
-      throw new NodeNotFoundException("Node UUID: " + uuid);
+      checkIfNodeExist(uuid);
+      return nodeMap.get(uuid);
+      checkIfNodeExist(uuid);
-      throw new NodeNotFoundException("Node UUID: " + uuid);
+      throw new NodeNotFoundException("Node not found in node state map." +
+          " UUID: " + uuid);
+  /**
+   * Adds the given container to the specified datanode.
+   *
+   * @param uuid - datanode uuid
+   * @param containerId - containerID
+   * @throws NodeNotFoundException - if datanode is not known. For new datanode
+   *                        use addDatanodeInContainerMap call.
+   */
+  public void addContainer(final UUID uuid,
+                           final ContainerID containerId)
+      throws NodeNotFoundException {
+    lock.writeLock().lock();
+    try {
+      checkIfNodeExist(uuid);
+      nodeToContainer.get(uuid).add(containerId);
+    } finally {
+      lock.writeLock().unlock();
+    }
+  }
+
-    if (!nodeToContainer.containsKey(uuid)) {
-      throw new NodeNotFoundException("Node UUID: " + uuid);
+    lock.writeLock().lock();
+    try {
+      checkIfNodeExist(uuid);
+      nodeToContainer.put(uuid, containers);
+    } finally {
+      lock.writeLock().unlock();
-    nodeToContainer.put(uuid, containers);
-    Set<ContainerID> containers = nodeToContainer.get(uuid);
-    if (containers == null) {
-      throw new NodeNotFoundException("Node UUID: " + uuid);
+    lock.readLock().lock();
+    try {
+      checkIfNodeExist(uuid);
+      return Collections.unmodifiableSet(nodeToContainer.get(uuid));
+    } finally {
+      lock.readLock().unlock();
-    return Collections.unmodifiableSet(containers);
-    Set<ContainerID> containers = nodeToContainer.get(uuid);
-    if (containers == null) {
-      throw new NodeNotFoundException("Node UUID: " + uuid);
+    lock.writeLock().lock();
+    try {
+      checkIfNodeExist(uuid);
+      nodeToContainer.get(uuid).remove(containerID);
+    } finally {
+      lock.writeLock().unlock();
-    containers.remove(containerID);
+
+  /**
+   * Throws NodeNotFoundException if the Node for given id doesn't exist.
+   *
+   * @param uuid Node UUID
+   * @throws NodeNotFoundException If the node is missing.
+   */
+  private void checkIfNodeExist(UUID uuid) throws NodeNotFoundException {
+    if (!nodeToContainer.containsKey(uuid)) {
+      throw new NodeNotFoundException("Node UUID: " + uuid);
+    }
+  }

MOV31 INS31 INS31 INS31 INS29 MOV83 INS39 UPD42 MOV42 INS44 INS44 MOV43 INS8 INS83 INS39 INS42 MOV44 MOV44 MOV43 INS8 INS83 MOV74 INS42 INS44 MOV43 INS8 INS29 UPD83 UPD42 INS65 INS65 INS65 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS21 INS54 INS21 INS54 INS43 INS42 INS21 INS54 INS21 INS54 INS65 INS65 INS65 MOV8 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 MOV42 MOV42 INS32 INS8 INS8 INS32 INS8 INS8 INS42 INS32 INS8 INS8 INS32 INS8 INS8 INS66 INS42 INS66 INS42 INS66 INS21 INS21 INS21 INS32 INS42 INS21 INS21 INS21 INS32 INS42 INS21 MOV21 INS21 INS32 INS42 INS21 MOV41 INS21 INS32 INS42 INS21 MOV21 INS21 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 MOV32 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS45 UPD45 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL25 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL43 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25