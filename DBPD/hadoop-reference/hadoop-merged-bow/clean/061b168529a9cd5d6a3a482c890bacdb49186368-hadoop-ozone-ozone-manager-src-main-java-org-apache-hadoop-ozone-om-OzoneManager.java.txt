HDDS-167. Rename KeySpaceManager to OzoneManager. Contributed by Arpit Agarwal.

-package org.apache.hadoop.ozone.ksm;
+package org.apache.hadoop.ozone.om;
-import org.apache.hadoop.ozone.ksm.exceptions.KSMException;
-import org.apache.hadoop.ozone.ksm.helpers.KsmBucketArgs;
-import org.apache.hadoop.ozone.ksm.helpers.KsmBucketInfo;
-import org.apache.hadoop.ozone.ksm.helpers.KsmKeyArgs;
-import org.apache.hadoop.ozone.ksm.helpers.KsmKeyInfo;
-import org.apache.hadoop.ozone.ksm.helpers.KsmKeyLocationInfo;
-import org.apache.hadoop.ozone.ksm.helpers.KsmVolumeArgs;
-import org.apache.hadoop.ozone.ksm.helpers.OpenKeySession;
-import org.apache.hadoop.ozone.ksm.helpers.ServiceInfo;
-import org.apache.hadoop.ozone.ksm.protocol.KeySpaceManagerProtocol;
-import org.apache.hadoop.ozone.ksm.protocolPB.KeySpaceManagerProtocolPB;
-import org.apache.hadoop.ozone.ksm.exceptions.KSMException.ResultCodes;
+import org.apache.hadoop.ozone.om.exceptions.OMException;
+import org.apache.hadoop.ozone.om.helpers.OmBucketArgs;
+import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;
+import org.apache.hadoop.ozone.om.helpers.OmKeyArgs;
+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;
+import org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfo;
+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;
+import org.apache.hadoop.ozone.om.helpers.OpenKeySession;
+import org.apache.hadoop.ozone.om.helpers.ServiceInfo;
+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;
+import org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolPB;
+import org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes;
-import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos
-    .KeySpaceManagerProtocolProtos.OzoneAclInfo;
+    .OzoneManagerProtocolProtos.OzoneAclInfo;
-import org.apache.hadoop.ozone.protocolPB
-    .KeySpaceManagerProtocolServerSideTranslatorPB;
+import org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB;
-import static org.apache.hadoop.ozone.KsmUtils.getKsmAddress;
+import static org.apache.hadoop.ozone.OmUtils.getOmAddress;
-import static org.apache.hadoop.ozone.ksm.KSMConfigKeys
-    .OZONE_KSM_ADDRESS_KEY;
-import static org.apache.hadoop.ozone.ksm.KSMConfigKeys
-    .OZONE_KSM_HANDLER_COUNT_DEFAULT;
-import static org.apache.hadoop.ozone.ksm.KSMConfigKeys
-    .OZONE_KSM_HANDLER_COUNT_KEY;
+import static org.apache.hadoop.ozone.om.OMConfigKeys
+    .OZONE_OM_ADDRESS_KEY;
+import static org.apache.hadoop.ozone.om.OMConfigKeys
+    .OZONE_OM_HANDLER_COUNT_DEFAULT;
+import static org.apache.hadoop.ozone.om.OMConfigKeys
+    .OZONE_OM_HANDLER_COUNT_KEY;
-    .KeySpaceManagerProtocolProtos.KeySpaceManagerService
+    .OzoneManagerProtocolProtos.OzoneManagerService
- * Ozone Keyspace manager is the metadata manager of ozone.
+ * Ozone Manager is the metadata manager of ozone.
-public final class KeySpaceManager extends ServiceRuntimeInfoImpl
-    implements KeySpaceManagerProtocol, KSMMXBean {
+public final class OzoneManager extends ServiceRuntimeInfoImpl
+    implements OzoneManagerProtocol, OMMXBean {
-      LoggerFactory.getLogger(KeySpaceManager.class);
+      LoggerFactory.getLogger(OzoneManager.class);
-      "Usage: \n ozone ksm [genericOptions] " + "[ "
-          + StartupOption.CREATEOBJECTSTORE.getName() + " ]\n " + "ozone ksm [ "
+      "Usage: \n ozone om [genericOptions] " + "[ "
+          + StartupOption.CREATEOBJECTSTORE.getName() + " ]\n " + "ozone om [ "
-  private final RPC.Server ksmRpcServer;
-  private final InetSocketAddress ksmRpcAddress;
-  private final KSMMetadataManager metadataManager;
+  private final RPC.Server omRpcServer;
+  private final InetSocketAddress omRpcAddress;
+  private final OMMetadataManager metadataManager;
-  private final KSMMetrics metrics;
-  private final KeySpaceManagerHttpServer httpServer;
-  private final KSMStorage ksmStorage;
+  private final OMMetrics metrics;
+  private final OzoneManagerHttpServer httpServer;
+  private final OMStorage omStorage;
-  private ObjectName ksmInfoBeanName;
+  private ObjectName omInfoBeanName;
-  private KeySpaceManager(OzoneConfiguration conf) throws IOException {
+  private OzoneManager(OzoneConfiguration conf) throws IOException {
-    ksmStorage = new KSMStorage(conf);
+    omStorage = new OMStorage(conf);
-    if (ksmStorage.getState() != StorageState.INITIALIZED) {
-      throw new KSMException("KSM not initialized.",
-          ResultCodes.KSM_NOT_INITIALIZED);
+    if (omStorage.getState() != StorageState.INITIALIZED) {
+      throw new OMException("OM not initialized.",
+          ResultCodes.OM_NOT_INITIALIZED);
-    // verifies that the SCM info in the KSM Version file is correct.
+    // verifies that the SCM info in the OM Version file is correct.
-    if (!(scmInfo.getClusterId().equals(ksmStorage.getClusterID()) && scmInfo
-        .getScmId().equals(ksmStorage.getScmId()))) {
-      throw new KSMException("SCM version info mismatch.",
+    if (!(scmInfo.getClusterId().equals(omStorage.getClusterID()) && scmInfo
+        .getScmId().equals(omStorage.getScmId()))) {
+      throw new OMException("SCM version info mismatch.",
-    final int handlerCount = conf.getInt(OZONE_KSM_HANDLER_COUNT_KEY,
-        OZONE_KSM_HANDLER_COUNT_DEFAULT);
+    final int handlerCount = conf.getInt(OZONE_OM_HANDLER_COUNT_KEY,
+        OZONE_OM_HANDLER_COUNT_DEFAULT);
-    RPC.setProtocolEngine(configuration, KeySpaceManagerProtocolPB.class,
+    RPC.setProtocolEngine(configuration, OzoneManagerProtocolPB.class,
-    BlockingService ksmService = newReflectiveBlockingService(
-        new KeySpaceManagerProtocolServerSideTranslatorPB(this));
-    final InetSocketAddress ksmNodeRpcAddr =
-        getKsmAddress(configuration);
-    ksmRpcServer = startRpcServer(configuration, ksmNodeRpcAddr,
-        KeySpaceManagerProtocolPB.class, ksmService,
+    BlockingService omService = newReflectiveBlockingService(
+        new OzoneManagerProtocolServerSideTranslatorPB(this));
+    final InetSocketAddress omNodeRpcAddr =
+        getOmAddress(configuration);
+    omRpcServer = startRpcServer(configuration, omNodeRpcAddr,
+        OzoneManagerProtocolPB.class, omService,
-    ksmRpcAddress = updateRPCListenAddress(configuration,
-        OZONE_KSM_ADDRESS_KEY, ksmNodeRpcAddr, ksmRpcServer);
-    metadataManager = new KSMMetadataManagerImpl(configuration);
+    omRpcAddress = updateRPCListenAddress(configuration,
+        OZONE_OM_ADDRESS_KEY, omNodeRpcAddr, omRpcServer);
+    metadataManager = new OmMetadataManagerImpl(configuration);
-    metrics = KSMMetrics.create();
+    metrics = OMMetrics.create();
-            ksmStorage.getKsmId());
-    httpServer = new KeySpaceManagerHttpServer(configuration, this);
+            omStorage.getOmId());
+    httpServer = new OzoneManagerHttpServer(configuration, this);
-  public KSMStorage getKsmStorage() {
-    return ksmStorage;
+  public OMStorage getOmStorage() {
+    return omStorage;
-  public KSMMetadataManager getMetadataManager() {
+  public OMMetadataManager getMetadataManager() {
-  public KSMMetrics getMetrics() {
+  public OMMetrics getMetrics() {
-   * Main entry point for starting KeySpaceManager.
+   * Main entry point for starting OzoneManager.
-      StringUtils.startupShutdownMessage(KeySpaceManager.class, argv, LOG);
-      KeySpaceManager ksm = createKSM(hParser.getRemainingArgs(), conf);
-      if (ksm != null) {
-        ksm.start();
-        ksm.join();
+      StringUtils.startupShutdownMessage(OzoneManager.class, argv, LOG);
+      OzoneManager om = createOm(hParser.getRemainingArgs(), conf);
+      if (om != null) {
+        om.start();
+        om.join();
-      LOG.error("Failed to start the KeyspaceManager.", t);
+      LOG.error("Failed to start the OzoneManager.", t);
-   * Constructs KSM instance based on command line arguments.
+   * Constructs OM instance based on command line arguments.
-   * @return KSM instance
-   * @throws IOException in case KSM instance creation fails.
+   * @return OM instance
+   * @throws IOException in case OM instance creation fails.
-  public static KeySpaceManager createKSM(String[] argv,
-      OzoneConfiguration conf) throws IOException {
+  public static OzoneManager createOm(String[] argv,
+                                      OzoneConfiguration conf) throws IOException {
-      System.err.println("KSM cannot be started in secure mode or when " +
+      System.err.println("OM cannot be started in secure mode or when " +
-      terminate(ksmInit(conf) ? 0 : 1);
+      terminate(omInit(conf) ? 0 : 1);
-      return new KeySpaceManager(conf);
+      return new OzoneManager(conf);
-   * Initializes the KSM instance.
+   * Initializes the OM instance.
-   * @return true if KSM initialization succeeds , false otherwise
+   * @return true if OM initialization succeeds, false otherwise
-  private static boolean ksmInit(OzoneConfiguration conf) throws IOException {
-    KSMStorage ksmStorage = new KSMStorage(conf);
-    StorageState state = ksmStorage.getState();
+  private static boolean omInit(OzoneConfiguration conf) throws IOException {
+    OMStorage omStorage = new OMStorage(conf);
+    StorageState state = omStorage.getState();
-        ksmStorage.setClusterId(clusterId);
-        ksmStorage.setScmId(scmId);
-        ksmStorage.initialize();
+        omStorage.setClusterId(clusterId);
+        omStorage.setScmId(scmId);
+        omStorage.initialize();
-            "KSM initialization succeeded.Current cluster id for sd="
-                + ksmStorage.getStorageDir() + ";cid=" + ksmStorage
+            "OM initialization succeeded.Current cluster id for sd="
+                + omStorage.getStorageDir() + ";cid=" + omStorage
-        LOG.error("Could not initialize KSM version file", ioe);
+        LOG.error("Could not initialize OM version file", ioe);
-          "KSM already initialized.Reusing existing cluster id for sd="
-              + ksmStorage.getStorageDir() + ";cid=" + ksmStorage
+          "OM already initialized.Reusing existing cluster id for sd="
+              + omStorage.getStorageDir() + ";cid=" + omStorage
-   * Parses the command line options for KSM initialization.
+   * Parses the command line options for OM initialization.
-    LOG.info(buildRpcServerStartMessage("KeyspaceManager RPC server",
-        ksmRpcAddress));
-    DefaultMetricsSystem.initialize("KeySpaceManager");
+    LOG.info(buildRpcServerStartMessage("OzoneManager RPC server",
+        omRpcAddress));
+    DefaultMetricsSystem.initialize("OzoneManager");
-    ksmRpcServer.start();
+    omRpcServer.start();
-      ksmRpcServer.stop();
+      omRpcServer.stop();
-      LOG.error("Key Space Manager stop failed.", e);
+      LOG.error("OzoneManager stop failed.", e);
-      ksmRpcServer.join();
+      omRpcServer.join();
-      LOG.info("Interrupted during KeyspaceManager join.", e);
+      LOG.info("Interrupted during OzoneManager join.", e);
-  public void createVolume(KsmVolumeArgs args) throws IOException {
+  public void createVolume(OmVolumeArgs args) throws IOException {
-  public KsmVolumeArgs getVolumeInfo(String volume) throws IOException {
+  public OmVolumeArgs getVolumeInfo(String volume) throws IOException {
-  public List<KsmVolumeArgs> listVolumeByUser(String userName, String prefix,
-      String prevKey, int maxKeys) throws IOException {
+  public List<OmVolumeArgs> listVolumeByUser(String userName, String prefix,
+                                             String prevKey, int maxKeys) throws IOException {
-  public List<KsmVolumeArgs> listAllVolumes(String prefix, String prevKey, int
+  public List<OmVolumeArgs> listAllVolumes(String prefix, String prevKey, int
-  public void createBucket(KsmBucketInfo bucketInfo) throws IOException {
+  public void createBucket(OmBucketInfo bucketInfo) throws IOException {
-  public List<KsmBucketInfo> listBuckets(String volumeName,
-      String startKey, String prefix, int maxNumOfBuckets)
+  public List<OmBucketInfo> listBuckets(String volumeName,
+                                        String startKey, String prefix, int maxNumOfBuckets)
-   * @return KsmBucketInfo or exception is thrown.
+   * @return OmBucketInfo or exception is thrown.
-  public KsmBucketInfo getBucketInfo(String volume, String bucket)
+  public OmBucketInfo getBucketInfo(String volume, String bucket)
-   * @return KsmKeyInfo - the info about the allocated key.
+   * @return OmKeyInfo - the info about the allocated key.
-  public OpenKeySession openKey(KsmKeyArgs args) throws IOException {
+  public OpenKeySession openKey(OmKeyArgs args) throws IOException {
-  public void commitKey(KsmKeyArgs args, int clientID)
+  public void commitKey(OmKeyArgs args, int clientID)
-  public KsmKeyLocationInfo allocateBlock(KsmKeyArgs args, int clientID)
+  public OmKeyLocationInfo allocateBlock(OmKeyArgs args, int clientID)
-   * @return KsmKeyInfo - the info about the requested key.
+   * @return OmKeyInfo - the info about the requested key.
-  public KsmKeyInfo lookupKey(KsmKeyArgs args) throws IOException {
+  public OmKeyInfo lookupKey(OmKeyArgs args) throws IOException {
-  public void renameKey(KsmKeyArgs args, String toKeyName) throws IOException {
+  public void renameKey(OmKeyArgs args, String toKeyName) throws IOException {
-  public void deleteKey(KsmKeyArgs args) throws IOException {
+  public void deleteKey(OmKeyArgs args) throws IOException {
-  public List<KsmKeyInfo> listKeys(String volumeName, String bucketName,
-      String startKey, String keyPrefix, int maxKeys) throws IOException {
+  public List<OmKeyInfo> listKeys(String volumeName, String bucketName,
+                                  String startKey, String keyPrefix, int maxKeys) throws IOException {
-  public void setBucketProperty(KsmBucketArgs args)
+  public void setBucketProperty(OmBucketArgs args)
-    this.ksmInfoBeanName =
-        MBeans.register("KeySpaceManager",
-            "KeySpaceManagerInfo",
+    this.omInfoBeanName =
+        MBeans.register("OzoneManager",
+            "OzoneManagerInfo",
-    if (this.ksmInfoBeanName != null) {
-      MBeans.unregister(this.ksmInfoBeanName);
-      this.ksmInfoBeanName = null;
+    if (this.omInfoBeanName != null) {
+      MBeans.unregister(this.omInfoBeanName);
+      this.omInfoBeanName = null;
-    return "" + ksmRpcAddress.getPort();
+    return "" + omRpcAddress.getPort();
-  public KeySpaceManagerHttpServer getHttpServer() {
+  public OzoneManagerHttpServer getHttpServer() {
-    ServiceInfo.Builder ksmServiceInfoBuilder = ServiceInfo.newBuilder()
-        .setNodeType(HddsProtos.NodeType.KSM)
-        .setHostname(ksmRpcAddress.getHostName())
+    ServiceInfo.Builder omServiceInfoBuilder = ServiceInfo.newBuilder()
+        .setNodeType(HddsProtos.NodeType.OM)
+        .setHostname(omRpcAddress.getHostName())
-                .setValue(ksmRpcAddress.getPort())
+                .setValue(omRpcAddress.getPort())
-      ksmServiceInfoBuilder.addServicePort(ServicePort.newBuilder()
+      omServiceInfoBuilder.addServicePort(ServicePort.newBuilder()
-      ksmServiceInfoBuilder.addServicePort(ServicePort.newBuilder()
+      omServiceInfoBuilder.addServicePort(ServicePort.newBuilder()
-    services.add(ksmServiceInfoBuilder.build());
+    services.add(omServiceInfoBuilder.build());

UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD42 UPD43 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD43 UPD74 UPD74 UPD74 UPD43 UPD43 UPD43 UPD74 UPD43 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD45 UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD43 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD66 UPD66 UPD42 UPD42 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD45 UPD42 UPD42 UPD45 UPD45 UPD42 UPD42 UPD42 UPD42 UPD43 UPD45 UPD40 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD45 UPD45 UPD42 UPD45 UPD45 UPD45 UPD42 UPD42 UPD40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 UPD45 UPD42 UPD42