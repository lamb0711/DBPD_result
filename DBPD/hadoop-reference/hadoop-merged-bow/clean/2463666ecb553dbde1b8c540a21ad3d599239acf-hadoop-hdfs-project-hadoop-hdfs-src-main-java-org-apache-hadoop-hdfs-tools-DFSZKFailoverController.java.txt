HDFS-6184. Capture NN's thread dump when it fails over. Contributed by Ming Ma.

+import java.io.ByteArrayOutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.ha.HealthMonitor;
+import org.apache.hadoop.io.IOUtils;
+  // This is used only for unit tests
+  private boolean isThreadDumpCaptured = false;
+
+
+  /**
+   * capture local NN's thread dump and write it to ZKFC's log.
+   */
+  private void getLocalNNThreadDump() {
+    isThreadDumpCaptured = false;
+    // We use the same timeout value for both connection establishment
+    // timeout and read timeout.
+    int httpTimeOut = conf.getInt(
+        DFSConfigKeys.DFS_HA_ZKFC_NN_HTTP_TIMEOUT_KEY,
+        DFSConfigKeys.DFS_HA_ZKFC_NN_HTTP_TIMEOUT_KEY_DEFAULT);
+    if (httpTimeOut == 0) {
+      // If timeout value is set to zero, the feature is turned off.
+      return;
+    }
+    try {
+      String stacksUrl = DFSUtil.getInfoServer(localNNTarget.getAddress(),
+          conf, DFSUtil.getHttpClientScheme(conf)) + "/stacks";
+      URL url = new URL(stacksUrl);
+      HttpURLConnection conn = (HttpURLConnection)url.openConnection();
+      conn.setReadTimeout(httpTimeOut);
+      conn.setConnectTimeout(httpTimeOut);
+      conn.connect();
+      ByteArrayOutputStream out = new ByteArrayOutputStream();
+      IOUtils.copyBytes(conn.getInputStream(), out, 4096, true);
+      StringBuilder localNNThreadDumpContent =
+          new StringBuilder("-- Local NN thread dump -- \n");
+      localNNThreadDumpContent.append(out);
+      localNNThreadDumpContent.append("\n -- Local NN thread dump -- ");
+      LOG.info(localNNThreadDumpContent);
+      isThreadDumpCaptured = true;
+    } catch (IOException e) {
+      LOG.warn("Can't get local NN thread dump due to " + e.getMessage());
+    }
+  }
+
+  @Override
+  protected synchronized void setLastHealthState(HealthMonitor.State newState) {
+    super.setLastHealthState(newState);
+    // Capture local NN thread dump when the target NN health state changes.
+    if (getLastHealthState() == HealthMonitor.State.SERVICE_NOT_RESPONDING ||
+        getLastHealthState() == HealthMonitor.State.SERVICE_UNHEALTHY) {
+      getLocalNNThreadDump();
+    }
+  }
+
+  @VisibleForTesting
+  boolean isThreadDumpCaptured() {
+    return isThreadDumpCaptured;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS39 INS42 INS8 INS42 INS9 INS65 INS21 INS60 INS25 INS54 INS42 INS43 INS42 INS21 INS25 INS42 INS41 INS66 INS7 INS39 INS59 INS27 INS8 INS8 INS12 INS40 INS48 INS27 INS8 INS42 INS42 INS9 INS42 INS32 INS42 INS34 INS41 INS60 INS60 INS60 INS21 INS21 INS21 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS27 INS27 INS21 INS42 INS42 INS40 INS40 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS32 INS7 INS43 INS42 INS21 INS32 INS40 INS32 INS40 INS32 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS34 INS9 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS32 INS45 INS43 INS42 INS43 INS32 INS43 INS42 INS42 INS43 INS45 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42