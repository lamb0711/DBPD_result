YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)

-  private DistributedSchedulingAMProtocol rmClient;
+  private ApplicationMasterProtocol rmClient;
-      rmClient = user.doAs(
-          new PrivilegedExceptionAction<DistributedSchedulingAMProtocol>() {
-            @Override
-            public DistributedSchedulingAMProtocol run() throws Exception {
-              setAMRMTokenService(conf);
-              return ServerRMProxy.createRMProxy(conf,
-                  DistributedSchedulingAMProtocol.class);
-            }
-          });
+      rmClient = createRMClient(appContext, conf);
+  private ApplicationMasterProtocol createRMClient(
+      AMRMProxyApplicationContext appContext, final Configuration conf)
+      throws IOException, InterruptedException {
+    if (appContext.getNMCotext().isDistributedSchedulingEnabled()) {
+      return user.doAs(
+          new PrivilegedExceptionAction<DistributedSchedulingAMProtocol>() {
+            @Override
+            public DistributedSchedulingAMProtocol run() throws Exception {
+              setAMRMTokenService(conf);
+              return ServerRMProxy.createRMProxy(conf,
+                  DistributedSchedulingAMProtocol.class);
+            }
+          });
+    } else {
+      return user.doAs(
+          new PrivilegedExceptionAction<ApplicationMasterProtocol>() {
+            @Override
+            public ApplicationMasterProtocol run() throws Exception {
+              setAMRMTokenService(conf);
+              return ClientRMProxy.createRMProxy(conf,
+                  ApplicationMasterProtocol.class);
+            }
+          });
+    }
+  }
+
-    LOG.info("Forwarding registerApplicationMasterForDistributedScheduling" +
-        "request to the real YARN RM");
-    return rmClient.registerApplicationMasterForDistributedScheduling(request);
+    if (getApplicationContext().getNMCotext()
+        .isDistributedSchedulingEnabled()) {
+      LOG.info("Forwarding registerApplicationMasterForDistributedScheduling" +
+          "request to the real YARN RM");
+      return ((DistributedSchedulingAMProtocol)rmClient)
+          .registerApplicationMasterForDistributedScheduling(request);
+    } else {
+      throw new YarnException("Distributed Scheduling is not enabled !!");
+    }
-    DistributedSchedulingAllocateResponse allocateResponse =
-        rmClient.allocateForDistributedScheduling(request);
-    if (allocateResponse.getAllocateResponse().getAMRMToken() != null) {
-      updateAMRMToken(allocateResponse.getAllocateResponse().getAMRMToken());
+    if (getApplicationContext().getNMCotext()
+        .isDistributedSchedulingEnabled()) {
+      DistributedSchedulingAllocateResponse allocateResponse =
+          ((DistributedSchedulingAMProtocol)rmClient)
+              .allocateForDistributedScheduling(request);
+      if (allocateResponse.getAllocateResponse().getAMRMToken() != null) {
+        updateAMRMToken(allocateResponse.getAllocateResponse().getAMRMToken());
+      }
+      return allocateResponse;
+    } else {
+      throw new YarnException("Distributed Scheduling is not enabled !!");
-
-    return allocateResponse;

INS31 INS43 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS8 INS42 INS42 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS25 INS25 INS25 INS8 INS42 INS42 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 INS8 INS8 MOV21 MOV21 MOV60 INS21 INS32 INS42 INS41 INS41 INS32 INS42 INS53 INS32 INS42 MOV60 MOV25 MOV41 INS53 INS7 INS42 INS42 MOV32 INS32 INS32 INS42 INS14 INS32 INS42 INS14 INS42 INS32 INS42 INS42 INS14 INS42 INS36 INS43 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS74 INS1 INS11 INS42 INS36 INS42 INS43 INS43 INS31 MOV43 INS42 INS11 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS43 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS57 INS43 INS42 DEL42 DEL7 DEL21 DEL42 DEL42