YARN-7688. Miscellaneous Improvements To ProcfsBasedProcessTree. Contributed by BELUGA BEHR.

+import java.io.FileFilter;
-import java.io.InputStreamReader;
+import java.io.InputStreamReader;
+import java.util.ArrayDeque;
+import java.util.Collections;
+import java.util.Queue;
+import org.apache.commons.io.filefilter.AndFileFilter;
+import org.apache.commons.io.filefilter.DirectoryFileFilter;
+import org.apache.commons.io.filefilter.RegexFileFilter;
+import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.StringUtils;
+      String searchName = StringUtils.trimToNull(name);
-        if (info.name.trim().equalsIgnoreCase(name.trim())) {
+        if (info.name.trim().equalsIgnoreCase(searchName)) {
-      LOG.warn("Failed to get Operating System name. " + se);
+      LOG.warn("Failed to get Operating System name.", se);
-        if (!pID.equals("1")) {
+        if (!"1".equals(pID)) {
-          if (ppid.equals("1")) {
+          if ("1".equals(ppid)) {
-      LinkedList<ProcessInfo> pInfoQueue = new LinkedList<ProcessInfo>();
-      pInfoQueue.addAll(me.getChildren());
+      List<ProcessInfo> children = me.getChildren();
+      Queue<ProcessInfo> pInfoQueue = new ArrayDeque<ProcessInfo>(children);
-      if (LOG.isDebugEnabled()) {
-        // Log.debug the ProcfsBasedProcessTree
-        LOG.debug(this.toString());
-      }
+      LOG.debug(this);
+
-        //Update smaps info
+        // Update smaps info
-    List<String> currentPIDs = new ArrayList<String>();
-    currentPIDs.addAll(processTree.keySet());
-    return currentPIDs;
+    return Collections.unmodifiableList(new ArrayList<>(processTree.keySet()));
-    long total = UNAVAILABLE;
+    long total = 0L;
+    boolean isAvailable = false;
-        if (total == UNAVAILABLE ) {
-          total = 0;
-        }
+        isAvailable = true;
-    return total;
+    return isAvailable ? total : UNAVAILABLE;
-      if ((p != null) ) {
+      if (p != null) {
+        isAvailable = true;
-        isAvailable = true;
-          if (LOG.isDebugEnabled()) {
-            LOG.debug(procMemInfo.toString());
-          }
+          LOG.debug(procMemInfo);
-        incJiffies += p.getDtime();
+        incJiffies += p.getDtime();
-    List<String> processList = new ArrayList<String>();
-    String[] processDirs = (new File(procfsDir)).list();
-    if (processDirs != null) {
-      for (String dir : processDirs) {
-        Matcher m = numberPattern.matcher(dir);
-        if (!m.matches()) {
-          continue;
-        }
-        try {
-          if ((new File(procfsDir, dir)).isDirectory()) {
-            processList.add(dir);
-          }
-        } catch (SecurityException s) {
-          // skip this process
-        }
+    List<String> processList = Collections.emptyList();
+    FileFilter procListFileFilter = new AndFileFilter(
+        DirectoryFileFilter.INSTANCE, new RegexFileFilter(numberPattern));
+
+    File dir = new File(procfsDir);
+    File[] processDirs = dir.listFiles(procListFileFilter);
+
+    if (ArrayUtils.isNotEmpty(processDirs)) {
+      processList = new ArrayList<String>(processDirs.length);
+      for (File processDir : processDirs) {
+        processList.add(processDir.getName());
-      LOG.warn("Error reading the stream " + io);
+      LOG.warn("Error reading the stream", io);
-          LOG.warn("Error closing the stream " + in);
+          LOG.warn("Error closing the stream", i);
-        LOG.warn("Error closing the stream " + fReader);
+        LOG.warn("Error closing the stream", i);
-          if (ret.equals("")) {
+          if (ret.isEmpty()) {
-        LOG.warn("Error reading the stream " + io);
+        LOG.warn("Error reading the stream", io);
-            LOG.warn("Error closing the stream " + in);
+            LOG.warn("Error closing the stream", i);
-          LOG.warn("Error closing the stream " + fReader);
+          LOG.warn("Error closing the stream", i);
-      LOG.error(f.getMessage());
+      LOG.error(f);
-      LOG.error(e.getMessage());
+      LOG.error(e);
-      LOG.error(t.getMessage());
+      LOG.error(t);
-        sb.append(info.toString());
+        sb.append(info);

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS41 INS60 INS60 MOV60 INS25 INS60 INS32 INS39 INS59 INS16 INS43 INS59 INS43 INS5 INS32 INS8 MOV43 INS59 INS60 MOV21 INS42 INS42 INS14 INS34 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV14 INS43 INS85 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 INS21 INS70 INS42 INS42 INS32 UPD74 MOV74 UPD74 MOV74 INS59 UPD74 MOV74 MOV32 MOV27 MOV25 MOV21 INS42 INS42 INS43 INS40 INS14 UPD42 MOV42 UPD42 UPD42 UPD42 INS7 INS44 INS42 INS8 INS42 INS42 INS42 UPD43 UPD42 MOV32 UPD43 INS42 INS14 MOV52 MOV21 UPD42 MOV42 INS43 INS42 INS42 MOV14 MOV43 INS42 MOV21 UPD42 MOV42 INS45 INS42 UPD42 UPD42 INS74 INS42 INS42 INS40 INS45 INS42 MOV42 MOV42 MOV42 MOV42 INS43 INS43 UPD42 INS9 MOV21 INS32 INS45 INS42 INS45 INS42 INS42 INS42 UPD42 MOV42 INS42 INS45 INS42 UPD42 INS45 INS42 MOV42 INS45 INS42 INS45 INS42 INS45 INS42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL42 DEL45 DEL42 DEL45 DEL14 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL42 DEL34 DEL42 DEL42 DEL27 DEL8 DEL25 DEL42 DEL36 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL25 DEL85 DEL5 DEL36 DEL42 DEL32 DEL43 DEL42 DEL33 DEL27 DEL43 DEL42 DEL44 DEL42 DEL32 DEL38 DEL18 DEL8 DEL25 DEL42 DEL42 DEL14 DEL36 DEL42 DEL32 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8 DEL25 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32