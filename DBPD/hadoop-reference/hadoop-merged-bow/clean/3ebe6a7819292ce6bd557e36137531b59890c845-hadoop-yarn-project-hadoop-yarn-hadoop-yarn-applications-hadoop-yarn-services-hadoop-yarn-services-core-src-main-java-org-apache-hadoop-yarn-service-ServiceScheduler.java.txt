YARN-7565. Yarn service pre-maturely releases the container after AM restart. Contributed by Chandni Singh

+import org.apache.hadoop.yarn.service.conf.YarnServiceConf;
+  private final Map<ContainerId, ComponentInstance> unRecoveredInstances =
+      new ConcurrentHashMap<>();
+  private long containerRecoveryTimeout;
+    containerRecoveryTimeout = getConfig().getInt(
+        YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,
+        YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS);
-      ServiceRecord record = existingRecords.get(RegistryPathUtils
+      ServiceRecord record = existingRecords.remove(RegistryPathUtils
+
+    existingRecords.forEach((encodedContainerId, record) -> {
+      String componentName = record.get(YarnRegistryAttributes.YARN_COMPONENT);
+      if (componentName != null) {
+        Component component = componentsByName.get(componentName);
+        ComponentInstance compInstance = component.getComponentInstance(
+            record.description);
+        ContainerId containerId = ContainerId.fromString(record.get(
+            YarnRegistryAttributes.YARN_ID));
+        unRecoveredInstances.put(containerId, compInstance);
+        component.removePendingInstance(compInstance);
+      }
+    });
+
+    if (unRecoveredInstances.size() > 0) {
+      executorService.schedule(() -> {
+        synchronized (unRecoveredInstances) {
+          // after containerRecoveryTimeout, all the containers that haven't be
+          // recovered by the RM will released. The corresponding Component
+          // Instances are added to the pending queues of their respective
+          // component.
+          unRecoveredInstances.forEach((containerId, instance) -> {
+            LOG.info("{}, wait on container {} expired",
+                instance.getCompInstanceId(), containerId);
+            instance.cleanupRegistryAndCompHdfsDir(containerId);
+            Component component = componentsByName.get(instance.getCompName());
+            component.requestContainers(1);
+            component.reInsertPendingInstance(instance);
+            amRMClient.releaseAssignedContainer(containerId);
+          });
+          unRecoveredInstances.clear();
+        }
+      }, containerRecoveryTimeout, TimeUnit.MILLISECONDS);
+    }
+
+    @Override
+    public void onContainersReceivedFromPreviousAttempts(
+        List<Container> containers) {
+      if (containers == null || containers.isEmpty()) {
+        return;
+      }
+      for (Container container : containers) {
+        ComponentInstance compInstance;
+        synchronized (unRecoveredInstances) {
+          compInstance = unRecoveredInstances.remove(container.getId());
+        }
+        if (compInstance != null) {
+          Component component = componentsById.get(
+              container.getAllocationRequestId());
+          ComponentEvent event = new ComponentEvent(component.getName(),
+              CONTAINER_RECOVERED)
+              .setInstance(compInstance)
+              .setContainerId(container.getId())
+              .setContainer(container);
+          component.handle(event);
+        } else {
+          LOG.info("Not waiting to recover container {}, releasing",
+              container.getId());
+          amRMClient.releaseAssignedContainer(container.getId());
+        }
+      }
+    }
+

INS26 INS40 INS23 INS23 INS83 INS83 INS74 INS59 INS83 INS39 INS59 INS31 INS43 INS43 INS43 INS42 INS14 INS42 INS21 INS21 INS25 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS74 INS7 INS32 INS27 INS8 INS42 INS74 INS42 INS25 INS70 INS43 INS42 INS32 INS42 INS42 INS86 INS32 INS34 INS21 INS43 INS43 INS27 INS8 INS44 INS42 INS8 INS42 INS32 INS42 INS40 INS40 INS59 INS59 INS8 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS41 INS43 INS42 INS60 INS51 INS25 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS86 INS42 INS40 INS42 INS33 INS42 INS42 INS42 INS43 INS59 INS42 INS8 INS27 INS8 INS8 UPD42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS21 INS42 INS33 INS60 INS60 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS60 INS21 INS21 INS51 INS7 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS40 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS86 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS59 INS59 INS8 INS43 INS32 INS42 INS42 INS42 INS21 INS21 INS60 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42