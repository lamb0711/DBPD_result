MAPREDUCE-5785. Derive heap size or mapreduce.*.memory.mb automatically. (Gera Shegalov and Karthik Kambatla via kasha)

+import java.util.regex.Matcher;
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.mapreduce.TaskType;
+  private static final Pattern JAVA_OPTS_XMX_PATTERN =
+          Pattern.compile(".*(?:^|\\s)-Xmx(\\d+)([gGmMkK]?)(?:$|\\s).*");
-  
-  public static final String DEFAULT_MAPRED_TASK_JAVA_OPTS = "-Xmx200m";
-  
+
-  
+
+  private String getConfiguredTaskJavaOpts(TaskType taskType) {
+    String userClasspath = "";
+    String adminClasspath = "";
+    if (taskType == TaskType.MAP) {
+      userClasspath = get(JobConf.MAPRED_MAP_TASK_JAVA_OPTS,
+          get(JobConf.MAPRED_TASK_JAVA_OPTS));
+      adminClasspath = get(MRJobConfig.MAPRED_MAP_ADMIN_JAVA_OPTS,
+          MRJobConfig.DEFAULT_MAPRED_ADMIN_JAVA_OPTS);
+    } else {
+      userClasspath = get(JobConf.MAPRED_REDUCE_TASK_JAVA_OPTS,
+          get(JobConf.MAPRED_TASK_JAVA_OPTS));
+      adminClasspath = get(MRJobConfig.MAPRED_REDUCE_ADMIN_JAVA_OPTS,
+          MRJobConfig.DEFAULT_MAPRED_ADMIN_JAVA_OPTS);
+    }
+
+    // Add admin classpath first so it can be overridden by user.
+    return adminClasspath + " " + userClasspath;
+  }
+
+  @Private
+  public String getTaskJavaOpts(TaskType taskType) {
+    String javaOpts = getConfiguredTaskJavaOpts(taskType);
+
+    if (!javaOpts.contains("-Xmx")) {
+      float heapRatio = getFloat(MRJobConfig.HEAP_MEMORY_MB_RATIO,
+          MRJobConfig.DEFAULT_HEAP_MEMORY_MB_RATIO);
+
+      if (heapRatio > 1.0f || heapRatio < 0) {
+        LOG.warn("Invalid value for " + MRJobConfig.HEAP_MEMORY_MB_RATIO
+            + ", using the default.");
+        heapRatio = MRJobConfig.DEFAULT_HEAP_MEMORY_MB_RATIO;
+      }
+
+      int taskContainerMb = getMemoryRequired(taskType);
+      int taskHeapSize = (int)Math.ceil(taskContainerMb * heapRatio);
+
+      String xmxArg = String.format("-Xmx%dm", taskHeapSize);
+      LOG.info("Task java-opts do not specify heap size. Setting task attempt" +
+          " jvm max heap size to " + xmxArg);
+
+      javaOpts += " " + xmxArg;
+    }
+
+    return javaOpts;
+  }
+
+  /**
+   * Parse the Maximum heap size from the java opts as specified by the -Xmx option
+   * Format: -Xmx<size>[g|G|m|M|k|K]
+   * @param javaOpts String to parse to read maximum heap size
+   * @return Maximum heap size in MB or -1 if not specified
+   */
+  @Private
+  @VisibleForTesting
+  public static int parseMaximumHeapSizeMB(String javaOpts) {
+    // Find the last matching -Xmx following word boundaries
+    Matcher m = JAVA_OPTS_XMX_PATTERN.matcher(javaOpts);
+    if (m.matches()) {
+      int size = Integer.parseInt(m.group(1));
+      if (size <= 0) {
+        return -1;
+      }
+      if (m.group(2).isEmpty()) {
+        // -Xmx specified in bytes
+        return size / (1024 * 1024);
+      }
+      char unit = m.group(2).charAt(0);
+      switch (unit) {
+        case 'g':
+        case 'G':
+          // -Xmx specified in GB
+          return size * 1024;
+        case 'm':
+        case 'M':
+          // -Xmx specified in MB
+          return size;
+        case 'k':
+        case 'K':
+          // -Xmx specified in KB
+          return size / 1024;
+      }
+    }
+    // -Xmx not specified
+    return -1;
+  }
+
+  @Private
+  public int getMemoryRequired(TaskType taskType) {
+    int memory = 1024;
+    int heapSize = parseMaximumHeapSizeMB(getConfiguredTaskJavaOpts(taskType));
+    float heapRatio = getFloat(MRJobConfig.HEAP_MEMORY_MB_RATIO,
+        MRJobConfig.DEFAULT_HEAP_MEMORY_MB_RATIO);
+    if (taskType == TaskType.MAP)  {
+      if (get(MRJobConfig.MAP_MEMORY_MB) == null && heapSize > 0) {
+        memory = (int) Math.ceil(heapSize / heapRatio);
+        LOG.info(MRJobConfig.MAP_MEMORY_MB +
+            " not specified. Derived from javaOpts = " + memory);
+      } else {
+        memory = getInt(MRJobConfig.MAP_MEMORY_MB,
+            MRJobConfig.DEFAULT_MAP_MEMORY_MB);
+      }
+    } else if (taskType == TaskType.REDUCE) {
+      if (get(MRJobConfig.REDUCE_MEMORY_MB) == null && heapSize > 0) {
+        memory = (int) Math.ceil(heapSize / heapRatio);
+        LOG.info(MRJobConfig.REDUCE_MEMORY_MB +
+            " not specified. Derived from javaOpts = " + memory);
+      } else {
+        memory = getInt(MRJobConfig.REDUCE_MEMORY_MB,
+            MRJobConfig.DEFAULT_REDUCE_MEMORY_MB);
+      }
+    }
+
+    return memory;
+  }

INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS31 INS31 INS31 INS31 UPD83 INS43 INS83 INS43 INS42 INS44 INS8 INS78 INS83 MOV43 INS42 INS44 INS8 INS29 INS78 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS42 UPD42 INS32 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS41 INS42 INS42 INS45 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS27 INS42 INS43 INS59 INS38 INS8 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS32 INS8 INS38 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS25 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS40 INS21 INS21 INS21 INS21 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS60 INS25 INS60 INS60 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS25 INS60 INS50 INS34 INS42 INS34 INS42 INS32 INS42 INS32 INS42 INS40 INS25 INS27 INS8 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS45 INS39 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS43 INS59 INS32 INS7 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS32 INS8 INS39 INS59 INS42 INS49 INS49 INS41 INS49 INS49 INS41 INS49 INS49 INS41 INS42 INS32 INS42 INS40 INS40 INS27 INS8 INS8 INS42 INS40 INS25 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS27 INS27 INS21 INS21 INS42 INS32 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS27 INS42 INS32 INS42 INS34 INS41 INS32 INS42 INS41 INS42 INS32 INS13 INS13 INS27 INS13 INS13 INS42 INS13 INS13 INS27 INS42 INS42 INS27 INS27 INS21 INS21 INS21 INS27 INS8 INS8 INS42 INS40 INS32 INS42 INS40 INS40 INS42 INS40 INS32 INS42 INS40 INS40 INS42 INS40 INS40 INS42 INS34 INS42 INS34 INS32 INS7 INS42 INS42 INS39 INS32 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS38 INS42 INS42 INS34 INS27 INS32 INS42 INS34 INS42 INS34 INS42 INS34 INS32 INS33 INS42 INS34 INS7 INS32 INS7 INS27 INS27 INS21 INS21 INS21 INS42 INS40 INS42 INS40 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS34 INS34 INS42 INS36 INS42 INS42 INS34 INS42 INS40 INS42 INS11 INS42 INS42 INS27 INS42 INS32 INS32 INS33 INS42 INS34 INS7 INS32 INS7 INS45 INS40 INS45 INS42 INS42 INS27 INS39 INS32 INS40 INS45 INS42 INS42 INS40 INS40 INS42 INS40 INS42 INS11 INS42 INS42 INS27 INS42 INS32 INS34 INS34 INS42 INS42 INS27 INS39 INS32 INS40 INS45 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS27 INS42 INS42 DEL45