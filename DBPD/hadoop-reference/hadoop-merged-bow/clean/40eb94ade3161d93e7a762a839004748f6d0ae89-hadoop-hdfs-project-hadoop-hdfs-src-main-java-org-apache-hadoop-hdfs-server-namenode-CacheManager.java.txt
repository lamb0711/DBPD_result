HDFS-5053. NameNode should invoke DataNode APIs to coordinate caching. (Andrew Wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1523145 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map.Entry;
-import java.util.Map.Entry;
-final class CacheManager {
+public final class CacheManager {
+   * Cache entries, sorted by path
+   */
+  private final TreeMap<String, List<PathBasedCacheEntry>> entriesByPath =
+      new TreeMap<String, List<PathBasedCacheEntry>>();
+
+  /**
-  CacheManager(FSDirectory dir, Configuration conf) {
+  final private FSNamesystem namesystem;
+  final private FSDirectory dir;
+
+  CacheManager(FSNamesystem namesystem, FSDirectory dir, Configuration conf) {
+    this.namesystem = namesystem;
+    this.dir = dir;
+    entriesByPath.clear();
-      LOG.info("addDirective " + directive + ": validation failed.");
+      LOG.info("addDirective " + directive + ": validation failed: "
+          + ioe.getClass().getName() + ": " + ioe.getMessage());
+
+    // Success!
+    // First, add it to the various maps
+    String path = directive.getPath();
+    List<PathBasedCacheEntry> entryList = entriesByPath.get(path);
+    if (entryList == null) {
+      entryList = new ArrayList<PathBasedCacheEntry>(1);
+      entriesByPath.put(path, entryList);
+    }
+    entryList.add(entry);
+
+    // Next, set the path as cached in the namesystem
+    try {
+      INode node = dir.getINode(directive.getPath());
+      if (node.isFile()) {
+        INodeFile file = node.asFile();
+        // TODO: adjustable cache replication factor
+        namesystem.setCacheReplicationInt(directive.getPath(),
+            file.getBlockReplication());
+      }
+    } catch (IOException ioe) {
+      LOG.info("addDirective " + directive +": failed to cache file: " +
+          ioe.getClass().getName() +": " + ioe.getMessage());
+      return new Fallible<PathBasedCacheEntry>(ioe);
+    }
+
+    // Remove the corresponding entry in entriesByPath.
+    String path = existing.getDirective().getPath();
+    List<PathBasedCacheEntry> entries = entriesByPath.get(path);
+    if (entries == null || !entries.remove(existing)) {
+      return new Fallible<Long>(
+          new UnexpectedRemovePathBasedCacheEntryException(entryId));
+    }
+    if (entries.size() == 0) {
+      entriesByPath.remove(path);
+    }
+
+    // Set the path as uncached in the namesystem
+    try {
+      INode node = dir.getINode(existing.getDirective().getPath());
+      if (node.isFile()) {
+        namesystem.setCacheReplicationInt(existing.getDirective().getPath(),
+            (short) 0);
+      }
+    } catch (IOException e) {
+      LOG.warn("removeEntry " + entryId + ": failure while setting cache"
+          + " replication factor", e);
+      return new Fallible<Long>(e);
+    }
+    LOG.info("removeEntry successful for PathCacheEntry id " + entryId);

MOV26 INS83 INS23 INS23 INS23 INS29 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS65 INS43 INS43 INS74 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS60 INS60 INS25 INS21 INS54 INS60 INS60 INS25 INS25 INS54 INS21 INS66 INS42 INS42 INS43 INS43 INS74 INS42 INS7 INS7 INS32 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS8 INS12 INS43 INS59 INS74 INS59 INS27 INS8 INS27 INS8 INS8 INS12 INS32 INS42 INS42 INS43 INS43 INS74 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS60 INS25 INS44 INS8 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS27 INS38 INS41 INS32 INS34 INS21 INS60 INS25 INS44 INS8 INS42 INS42 INS27 INS42 INS42 INS43 INS43 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS43 INS59 INS32 INS8 INS43 INS42 INS21 INS41 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS14 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS43 INS42 INS21 INS41 INS45 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS74 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS14 INS74 INS34 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS27 INS74 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS42 INS74 INS42 UPD45 INS32 INS45 INS32 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS45 INS42 INS45 INS32 INS45 INS32 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS11 INS45 INS42 INS45 INS45 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS39 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42