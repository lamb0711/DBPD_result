Merging r1536572 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1536889 13f79535-47bb-0310-9956-ffa450edef68

+import java.nio.ByteBuffer;
+    private static void assertCodeLoaded() throws IOException {
+      if (!isAvailable()) {
+        throw new IOException("NativeIO was not loaded");
+      }
+    }
+
+    static native void mlock_native(
+        ByteBuffer buffer, long len) throws NativeIOException;
+    static native void munlock_native(
+        ByteBuffer buffer, long len) throws NativeIOException;
+
+    /**
+     * Locks the provided direct ByteBuffer into memory, preventing it from
+     * swapping out. After a buffer is locked, future accesses will not incur
+     * a page fault.
+     * 
+     * See the mlock(2) man page for more information.
+     * 
+     * @throws NativeIOException
+     */
+    public static void mlock(ByteBuffer buffer, long len)
+        throws IOException {
+      assertCodeLoaded();
+      if (!buffer.isDirect()) {
+        throw new IOException("Cannot mlock a non-direct ByteBuffer");
+      }
+      mlock_native(buffer, len);
+    }
+
+    /**
+     * Unlocks a locked direct ByteBuffer, allowing it to swap out of memory.
+     * This is a no-op if the ByteBuffer was not previously locked.
+     * 
+     * See the munlock(2) man page for more information.
+     * 
+     * @throws NativeIOException
+     */
+    public static void munlock(ByteBuffer buffer, long len)
+        throws IOException {
+      assertCodeLoaded();
+      if (!buffer.isDirect()) {
+        throw new IOException("Cannot munlock a non-direct ByteBuffer");
+      }
+      munlock_native(buffer, len);
+    }
+
+  /**
+   * Get the maximum number of bytes that can be locked into memory at any
+   * given point.
+   *
+   * @return 0 if no bytes can be locked into memory;
+   *         Long.MAX_VALUE if there is no limit;
+   *         The number of bytes that can be locked into memory otherwise.
+   */
+  public static long getMemlockLimit() {
+    return isAvailable() ? getMemlockLimit0() : 0;
+  }
+
+  private static native long getMemlockLimit0();
+  

INS26 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS83 INS39 INS42 INS83 INS83 INS39 INS42 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS41 INS42 INS25 INS43 INS42 INS39 INS42 INS42 INS43 INS42 INS39 INS42 INS42 INS65 INS65 INS43 INS42 INS39 INS42 INS42 INS21 INS25 INS21 INS65 INS65 INS43 INS42 INS39 INS42 INS42 INS21 INS25 INS21 INS66 INS66 INS66 INS66 INS66 INS16 INS38 INS8 INS42 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS32 INS38 INS8 INS32 INS66 INS66 INS66 INS42 INS42 INS32 INS38 INS8 INS32 INS32 INS32 INS34 INS32 INS53 INS42 INS32 INS53 INS42 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS42 INS42