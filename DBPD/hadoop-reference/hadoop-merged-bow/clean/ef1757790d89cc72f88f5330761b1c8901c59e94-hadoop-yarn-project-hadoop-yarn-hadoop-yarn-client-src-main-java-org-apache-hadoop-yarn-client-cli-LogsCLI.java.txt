YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.

+import java.io.PrintStream;
+  private static final String OUT_OPTION = "out";
-
-
-
+    String localDir = null;
+      localDir = commandLine.getOptionValue(OUT_OPTION);
-    boolean appStateObtainedSuccessfully = true;
-      appStateObtainedSuccessfully = false;
+      // If we can not get appReport from either RM or ATS
+      // We will assume that this app has already finished.
+      appState = YarnApplicationState.FINISHED;
+    ContainerLogsRequest request = new ContainerLogsRequest(appId,
+        isApplicationFinished(appState), appOwner,
+        nodeAddress, null, containerIdStr);
+
-      return showMetaInfo(appState, appStateObtainedSuccessfully,
-          logCliHelper, appId, containerIdStr, nodeAddress, appOwner);
+      return showMetaInfo(request, logCliHelper);
-      return showNodeLists(appState, appStateObtainedSuccessfully,
-          logCliHelper, appId, appOwner);
+      return showNodeLists(request, logCliHelper);
+
-      return fetchAMContainerLogs(logFiles, appState, appId, appOwner,
-          amContainersList, logCliHelper);
+      return fetchAMContainerLogs(request, amContainersList,
+          logFiles, logCliHelper, localDir);
-      return fetchContainerLogs(appState, appStateObtainedSuccessfully,
-          logFiles, appOwner, nodeAddress, containerId, logCliHelper);
+      return fetchContainerLogs(request, logFiles,
+          logCliHelper, localDir);
-        resultCode =
-            logCliHelper.dumpAllContainersLogs(appId, appOwner, System.out);
-        if (resultCode == -1) {
-          System.err.println("Can not find the logs for the application: "
-              + appId + " with the appOwner: " + appOwner);
-        }
+        resultCode = fetchApplicationLogs(appId, appOwner,
+            logCliHelper, localDir);
-      ContainerId containerId, String nodeHttpAddress,
-      String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,
-      String appOwner) throws IOException {
-    String appId = containerId.getApplicationAttemptId()
-        .getApplicationId().toString();
-    String containerIdStr = containerId.toString();
+      ContainerLogsRequest request, String[] logFiles,
+      LogCLIHelpers logCliHelper, String localDir) throws IOException {
+    String appId = request.getAppId().toString();
+    String containerIdStr = request.getContainerId().toString();
-    // fetch all the log files for the container
-    if (fetchAllLogFiles(logFiles)) {
-      requestedLogFiles =
-          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);
-    }
-    Client webServiceClient = Client.create();
-    String containerString = "\n\nContainer: " + containerIdStr;
-    System.out.println(containerString);
-    System.out.println(StringUtils.repeat("=", containerString.length()));
-
-    for (String logFile : requestedLogFiles) {
-      System.out.println("LogType:" + logFile);
-      System.out.println("Log Upload Time:"
-          + Times.format(System.currentTimeMillis()));
-      System.out.println("Log Contents:");
-      try {
-        WebResource webResource =
-            webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)
-                + nodeHttpAddress);
-        ClientResponse response =
-            webResource.path("ws").path("v1").path("node")
-              .path("containerlogs").path(containerIdStr).path(logFile)
-              .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
-        System.out.println(response.getEntity(String.class));
-        System.out.println("End of LogType:" + logFile);
-      } catch (ClientHandlerException | UniformInterfaceException ex) {
-        System.err.println("Can not find the log file:" + logFile
-            + " for the container:" + containerIdStr + " in NodeManager:"
-            + nodeId);
+    String nodeHttpAddress = request.getNodeHttpAddress();
+    String nodeId = request.getNodeId();
+    String appOwner = request.getAppOwner();
+    PrintStream out = logCliHelper.createPrintStream(localDir, nodeId,
+        containerIdStr);
+    try {
+      // fetch all the log files for the container
+      if (fetchAllLogFiles(logFiles)) {
+        requestedLogFiles =
+            getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);
+      Client webServiceClient = Client.create();
+      String containerString = "\n\nContainer: " + containerIdStr;
+      out.println(containerString);
+      out.println(StringUtils.repeat("=", containerString.length()));
+
+      for (String logFile : requestedLogFiles) {
+        out.println("LogType:" + logFile);
+        out.println("Log Upload Time:"
+            + Times.format(System.currentTimeMillis()));
+        out.println("Log Contents:");
+        try {
+          WebResource webResource =
+              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)
+                  + nodeHttpAddress);
+          ClientResponse response =
+              webResource.path("ws").path("v1").path("node")
+                .path("containerlogs").path(containerIdStr).path(logFile)
+                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
+          out.println(response.getEntity(String.class));
+          out.println("End of LogType:" + logFile);
+          out.flush();
+        } catch (ClientHandlerException | UniformInterfaceException ex) {
+          System.err.println("Can not find the log file:" + logFile
+              + " for the container:" + containerIdStr + " in NodeManager:"
+              + nodeId);
+        }
+      }
+    } finally {
+      logCliHelper.closePrintStream(out);
-        appOwner, Arrays.asList(requestedLogFiles), false);
+        appOwner, Arrays.asList(requestedLogFiles), false, localDir);
-  private void printContainerLogsForFinishedApplication(String appId,
-      String containerId, String nodeAddress, String[] logFiles,
-      LogCLIHelpers logCliHelper, String appOwner) throws IOException {
-    String containerString = "\n\nContainer: " + containerId;
-    System.out.println(containerString);
-    System.out.println(StringUtils.repeat("=", containerString.length()));
-    logCliHelper.dumpAContainersLogsForALogType(appId, containerId,
-        nodeAddress, appOwner, logFiles != null ? Arrays.asList(logFiles)
-        : null);
+  private void printContainerLogsForFinishedApplication(
+      ContainerLogsRequest request, String[] logFiles,
+      LogCLIHelpers logCliHelper, String localDir)
+      throws IOException {
+    logCliHelper.dumpAContainersLogsForALogType(request.getAppId().toString(),
+        request.getContainerId().toString(), request.getNodeId(),
+        request.getAppOwner(), logFiles != null ? Arrays.asList(logFiles)
+        : null, localDir);
-      LogCLIHelpers logCliHelper, String appOwner) throws IOException {
-    String containerString = "\n\nContainer: " + containerId;
-    System.out.println(containerString);
-    System.out.println(StringUtils.repeat("=", containerString.length()));
+      LogCLIHelpers logCliHelper, String appOwner, String localDir)
+      throws IOException {
-        Arrays.asList(logFiles) : null);
+        Arrays.asList(logFiles) : null, localDir);
-  private int printAMContainerLogs(Configuration conf, String appId,
-      List<String> amContainers, String[] logFiles, LogCLIHelpers logCliHelper,
-      String appOwner, boolean applicationFinished) throws Exception {
+  private int printAMContainerLogs(Configuration conf,
+      ContainerLogsRequest request, List<String> amContainers,
+      String[] logFiles, LogCLIHelpers logCliHelper, String localDir)
+      throws Exception {
-    List<AMLogsRequest> requests = new ArrayList<AMLogsRequest>();
+    List<ContainerLogsRequest> requests =
+        new ArrayList<ContainerLogsRequest>();
+    String appId = request.getAppId().toString();
-          AMLogsRequest request = new AMLogsRequest(applicationFinished);
-          request.setAmContainerId(amContainer.getString("containerId"));
-          request.setNodeHttpAddress(amContainer.getString("nodeHttpAddress"));
-          request.setNodeId(amContainer.getString("nodeId"));
-          requests.add(request);
+          ContainerLogsRequest amRequest = new ContainerLogsRequest(request);
+          amRequest.setContainerId(amContainer.getString("containerId"));
+          amRequest.setNodeHttpAddress(
+              amContainer.getString("nodeHttpAddress"));
+          amRequest.setNodeId(amContainer.getString("nodeId"));
+          requests.add(amRequest);
-      if (applicationFinished) {
+      if (request.isAppFinished()) {
-              AMLogsRequest request = new AMLogsRequest(applicationFinished);
-              request.setAmContainerId(amContainer.getString("amContainerId"));
-              requests.add(request);
+              ContainerLogsRequest amRequest = new ContainerLogsRequest(
+                  request);
+              amRequest.setContainerId(amContainer.getString("amContainerId"));
+              requests.add(amRequest);
-      for (AMLogsRequest request : requests) {
-        outputAMContainerLogs(request, conf, appId, logFiles, logCliHelper,
-            appOwner);
+      for (ContainerLogsRequest amRequest : requests) {
+        outputAMContainerLogs(amRequest, conf, logFiles,
+            logCliHelper, localDir);
-          outputAMContainerLogs(requests.get(requests.size() - 1), conf, appId,
-              logFiles, logCliHelper, appOwner);
+          outputAMContainerLogs(requests.get(requests.size() - 1), conf,
+              logFiles, logCliHelper, localDir);
-            outputAMContainerLogs(requests.get(amContainerId - 1), conf, appId,
-                logFiles, logCliHelper, appOwner);
+            outputAMContainerLogs(requests.get(amContainerId - 1), conf,
+                logFiles, logCliHelper, localDir);
-  private void outputAMContainerLogs(AMLogsRequest request, Configuration conf,
-      String appId, String[] logFiles, LogCLIHelpers logCliHelper,
-      String appOwner) throws Exception {
+  private void outputAMContainerLogs(ContainerLogsRequest request,
+      Configuration conf, String[] logFiles,
+      LogCLIHelpers logCliHelper, String localDir) throws Exception {
-    String containerId = request.getAmContainerId();
+    String containerId = request.getContainerId();
+            request.setNodeId(nodeId);
-          printContainerLogsForFinishedApplication(appId, containerId, nodeId,
-              requestedLogFilesList, logCliHelper, appOwner);
+          printContainerLogsForFinishedApplication(request,
+              requestedLogFilesList, logCliHelper, localDir);
-            ContainerId.fromString(containerId), nodeHttpAddress, nodeId,
-            requestedLogFiles, logCliHelper, appOwner);
+            request, requestedLogFiles, logCliHelper, localDir);
-  private int showMetaInfo(YarnApplicationState appState,
-      boolean appStateObtainedSuccessfully, LogCLIHelpers logCliHelper,
-      ApplicationId appId, String containerIdStr, String nodeAddress,
-      String appOwner) throws IOException {
-    if (!isApplicationFinished(appState) && appStateObtainedSuccessfully) {
+  private int showMetaInfo(ContainerLogsRequest request,
+      LogCLIHelpers logCliHelper) throws IOException {
+    if (!request.isAppFinished()) {
-      logCliHelper.printLogMetadata(appId, containerIdStr, nodeAddress,
-          appOwner, System.out, System.err);
+      logCliHelper.printLogMetadata(request.getAppId(),
+          request.getContainerId(), request.getNodeId(),
+          request.getAppOwner(), System.out, System.err);
-  private int showNodeLists(YarnApplicationState appState,
-      boolean appStateObtainedSuccessfully, LogCLIHelpers logCliHelper,
-      ApplicationId appId, String appOwner) throws IOException {
-    if (!isApplicationFinished(appState) && appStateObtainedSuccessfully) {
+  private int showNodeLists(ContainerLogsRequest request,
+      LogCLIHelpers logCliHelper) throws IOException {
+    if (!request.isAppFinished()) {
-      logCliHelper.printNodesList(appId, appOwner, System.out, System.err);
+      logCliHelper.printNodesList(request.getAppId(), request.getAppOwner(),
+          System.out, System.err);
+    opts.addOption(OUT_OPTION, true, "Local directory for storing individual "
+        + "container logs. The container logs will be stored based on the "
+        + "node the container ran on.");
+    opts.getOption(OUT_OPTION).setArgName("Local Directory");
+    printOpts.addOption(commandOpts.getOption(OUT_OPTION));
-  private int fetchAMContainerLogs(String[] logFiles,
-      YarnApplicationState appState, ApplicationId appId,
-      String appOwner, List<String> amContainersList,
-      LogCLIHelpers logCliHelper) throws Exception {
+  private int fetchAMContainerLogs(ContainerLogsRequest request,
+      List<String> amContainersList, String[] logFiles,
+      LogCLIHelpers logCliHelper, String localDir) throws Exception {
-    if (appState == YarnApplicationState.ACCEPTED
-        || appState == YarnApplicationState.RUNNING) {
-      return printAMContainerLogs(getConf(), appId.toString(), amContainersList,
-        logFiles, logCliHelper, appOwner, false);
+    if (!request.isAppFinished()) {
+      return printAMContainerLogs(getConf(), request, amContainersList,
+          logFiles, logCliHelper, localDir);
-        return printAMContainerLogs(getConf(), appId.toString(),
-            amContainersList, logFiles, logCliHelper, appOwner, true);
+        return printAMContainerLogs(getConf(), request, amContainersList,
+            logFiles, logCliHelper, localDir);
+        ApplicationId appId = request.getAppId();
+        String appOwner = request.getAppOwner();
-  private int fetchContainerLogs(YarnApplicationState appState,
-      boolean appStateObtainedSuccessfully, String[] logFiles,
-      String appOwner, String nodeAddress,
-      ContainerId containerId, LogCLIHelpers logCliHelper) throws IOException {
+  private int fetchContainerLogs(ContainerLogsRequest request,
+      String[] logFiles, LogCLIHelpers logCliHelper, String localDir)
+      throws IOException {
-    String appIdStr = containerId.getApplicationAttemptId()
-        .getApplicationId().toString();
-    String containerIdStr = containerId.toString();
+    String appIdStr = request.getAppId().toString();
+    String containerIdStr = request.getContainerId();
+    String nodeAddress = request.getNodeId();
+    String appOwner = request.getAppOwner();
+    boolean isAppFinished = request.isAppFinished();
-    if (nodeAddress != null && (!appStateObtainedSuccessfully ||
-        isApplicationFinished(appState))) {
+    if (nodeAddress != null && isAppFinished) {
-          containerIdStr, nodeAddress, appOwner, logs);
+          containerIdStr, nodeAddress, appOwner, logs, localDir);
+      request.setNodeId(nodeId);
+      request.setNodeHttpAddress(nodeHttpAddress);
-      if (!appStateObtainedSuccessfully || isApplicationFinished(appState)) {
+      if (isAppFinished) {
-            appOwner);
-      } else if (!isApplicationFinished(appState)) {
+            appOwner, localDir);
+      } else {
-    if (!isApplicationFinished(appState)) {
+    if (!isAppFinished) {
-      printContainerLogsFromRunningApplication(getConf(), containerId,
-          nodeHttpAddress, nodeId, logFiles, logCliHelper, appOwner);
+      printContainerLogsFromRunningApplication(getConf(), request,
+          logFiles, logCliHelper, localDir);
-      printContainerLogsForFinishedApplication(appIdStr, containerIdStr,
-          nodeId, requestedLogFiles, logCliHelper, appOwner);
+      printContainerLogsForFinishedApplication(request,
+          requestedLogFiles, logCliHelper, localDir);
-  private static class AMLogsRequest {
-    private String amContainerId;
-    private String nodeId;
-    private String nodeHttpAddress;
-    private final boolean isAppFinished;
-
-    AMLogsRequest(boolean isAppFinished) {
-      this.isAppFinished = isAppFinished;
-      this.setAmContainerId("");
-      this.setNodeId("");
-      this.setNodeHttpAddress("");
+  private int fetchApplicationLogs(ApplicationId appId, String appOwner,
+      LogCLIHelpers logCliHelper, String localDir) throws IOException {
+    int resultCode =
+        logCliHelper.dumpAllContainersLogs(appId, appOwner, localDir);
+    if (resultCode == -1) {
+      System.err.println("Can not find the logs for the application: "
+          + appId + " with the appOwner: " + appOwner);
-
-    public String getAmContainerId() {
-      return amContainerId;
-    }
-
-    public void setAmContainerId(String amContainerId) {
-      this.amContainerId = amContainerId;
-    }
-
-    public String getNodeId() {
-      return nodeId;
-    }
-
-    public void setNodeId(String nodeId) {
-      this.nodeId = nodeId;
-    }
-
-    public String getNodeHttpAddress() {
-      return nodeHttpAddress;
-    }
-
-    public void setNodeHttpAddress(String nodeHttpAddress) {
-      this.nodeHttpAddress = nodeHttpAddress;
-    }
-
-    public boolean isAppFinished() {
-      return isAppFinished;
-    }
+    return resultCode;
+
+  private static class ContainerLogsRequest {
+    private ApplicationId appId;
+    private String containerId;
+    private String nodeId;
+    private String nodeHttpAddress;
+    private String appOwner;
+    private boolean appFinished;
+
+    public ContainerLogsRequest(ContainerLogsRequest request) {
+      this.setAppId(request.getAppId());
+      this.setAppFinished(request.isAppFinished());
+      this.setAppOwner(request.getAppOwner());
+      this.setNodeId(request.getNodeId());
+      this.setNodeHttpAddress(request.getNodeHttpAddress());
+      this.setContainerId(request.getContainerId());
+    }
+
+    public ContainerLogsRequest(ApplicationId applicationId,
+        boolean isAppFinished, String owner,
+        String address, String httpAddress, String container) {
+      this.setAppId(applicationId);
+      this.setAppFinished(isAppFinished);
+      this.setAppOwner(owner);
+      this.setNodeId(address);
+      this.setNodeHttpAddress(httpAddress);
+      this.setContainerId(container);
+    }
+
+    public ApplicationId getAppId() {
+      return appId;
+    }
+
+    public void setAppId(ApplicationId appId) {
+      this.appId = appId;
+    }
+
+    public String getContainerId() {
+      return containerId;
+    }
+
+    public void setContainerId(String containerId) {
+      this.containerId = containerId;
+    }
+
+    public String getNodeId() {
+      return nodeId;
+    }
+
+    public void setNodeId(String nodeAddress) {
+      this.nodeId = nodeAddress;
+    }
+
+    public String getAppOwner() {
+      return appOwner;
+    }
+
+    public void setAppOwner(String appOwner) {
+      this.appOwner = appOwner;
+    }
+
+    public String getNodeHttpAddress() {
+      return nodeHttpAddress;
+    }
+
+    public void setNodeHttpAddress(String nodeHttpAddress) {
+      this.nodeHttpAddress = nodeHttpAddress;
+    }
+
+    public boolean isAppFinished() {
+      return appFinished;
+    }
+
+    public void setAppFinished(boolean appFinished) {
+      this.appFinished = appFinished;
+    }
+  }

INS26 MOV55 INS40 INS23 MOV44 MOV44 MOV44 INS31 INS83 INS83 INS83 INS43 INS59 MOV60 INS8 MOV43 INS44 MOV43 INS44 INS83 INS39 INS42 MOV44 MOV44 INS44 MOV44 INS43 MOV8 UPD42 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS45 INS60 UPD43 UPD42 UPD42 INS60 INS60 MOV60 INS60 INS60 INS60 INS60 INS54 INS21 UPD43 UPD42 MOV43 UPD42 INS21 MOV43 INS42 UPD43 UPD42 UPD42 INS60 UPD43 MOV43 UPD42 UPD43 UPD42 UPD43 UPD42 INS21 INS21 INS21 UPD43 UPD42 INS43 INS42 UPD43 UPD42 MOV43 UPD42 INS60 INS60 INS60 INS43 INS42 UPD42 INS42 INS60 INS41 INS83 INS43 INS59 MOV43 MOV83 MOV43 INS59 UPD83 MOV83 MOV39 MOV59 INS83 UPD42 INS44 INS83 INS42 INS44 MOV44 MOV44 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS43 UPD42 UPD42 MOV44 MOV44 INS83 INS43 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS43 INS59 INS43 UPD42 MOV43 INS59 MOV43 INS59 INS43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV8 INS8 INS32 UPD42 INS32 UPD42 UPD74 INS43 INS59 UPD42 MOV43 UPD42 INS38 UPD42 INS38 INS32 INS32 INS32 UPD42 INS42 INS38 UPD42 INS43 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS39 INS59 INS42 INS42 INS42 UPD42 INS42 UPD42 INS43 INS42 INS21 INS21 INS43 INS42 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS41 INS21 INS42 INS42 INS41 INS21 INS39 INS42 INS21 INS42 INS42 INS33 INS21 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS32 MOV42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS9 INS42 INS42 INS42 INS32 MOV32 INS32 INS32 MOV16 UPD42 MOV42 INS42 UPD43 INS42 INS42 INS32 MOV32 MOV32 INS42 INS42 INS42 INS9 INS27 INS32 INS42 INS45 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS7 UPD42 INS42 INS7 UPD42 INS7 INS7 INS43 INS42 MOV32 INS42 INS42 INS33 INS42 INS8 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD74 INS32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 MOV25 MOV42 MOV42 MOV42 MOV42 INS42 INS52 INS42 INS32 INS52 INS42 INS32 UPD42 INS32 INS32 INS32 INS52 INS42 INS32 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS22 INS42 UPD42 UPD42 INS22 INS42 INS22 INS42 INS42 INS32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD43 INS42 INS42 INS32 UPD43 UPD42 INS32 INS32 INS32 INS32 INS32 INS32 UPD42 MOV42 UPD42 INS60 INS60 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV8 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 UPD42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 UPD42 INS40 INS7 UPD42 INS42 INS42 UPD42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS43 INS59 INS43 INS59 INS42 INS32 INS42 INS42 INS42 INS21 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS21 UPD42 UPD42 UPD43 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 DEL9 DEL39 DEL42 DEL9 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL43 DEL42 DEL45 DEL32 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL40 DEL32 DEL21 DEL40 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL39 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL38 DEL42 DEL27 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL38 DEL42 DEL27 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL32 DEL9 DEL42 DEL32 DEL9 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL32 DEL42 DEL38 DEL27 DEL36 DEL42 DEL42 DEL32 DEL38 DEL42 DEL38 DEL42 DEL42 DEL32 DEL27 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL45 DEL45 DEL45