YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi

-import org.apache.slider.api.resource.ConfigFile;
+import org.apache.slider.common.tools.SliderFileSystem;
+import org.apache.slider.core.persist.JsonSerDeser;
+import org.apache.slider.providers.AbstractClientProvider;
+import org.apache.slider.providers.SliderProviderFactory;
+import org.codehaus.jackson.map.PropertyNamingStrategy;
-import java.nio.file.Paths;
+import java.util.ArrayList;
-  private static final Logger log =
+  private static final Logger LOG =
+  private static JsonSerDeser<Application> jsonSerDeser =
+      new JsonSerDeser<>(Application.class,
+          PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);
+
-  public static void validateApplicationPayload(Application application,
-      FileSystem fs) throws IOException {
+  public static void setJsonSerDeser(JsonSerDeser jsd) {
+    jsonSerDeser = jsd;
+  }
+
+  @VisibleForTesting
+  public static void validateAndResolveApplication(Application application,
+      SliderFileSystem fs) throws IOException {
-      throw new IllegalArgumentException(
-          RestApiErrorMessages.ERROR_APPLICATION_NAME_INVALID_FORMAT);
+      throw new IllegalArgumentException(String.format(
+          RestApiErrorMessages.ERROR_APPLICATION_NAME_INVALID_FORMAT,
+          application.getName()));
-      // artifact
-      if (application.getArtifact() == null) {
-        throw new IllegalArgumentException(
-            RestApiErrorMessages.ERROR_ARTIFACT_INVALID);
+      // If artifact is of type APPLICATION, read other application components
+      if (application.getArtifact() != null && application.getArtifact()
+          .getType() == Artifact.TypeEnum.APPLICATION) {
+        if (StringUtils.isEmpty(application.getArtifact().getId())) {
+          throw new IllegalArgumentException(
+              RestApiErrorMessages.ERROR_ARTIFACT_ID_INVALID);
+        }
+        Application otherApplication = loadApplication(fs,
+            application.getArtifact().getId());
+        application.setComponents(otherApplication.getComponents());
+        application.setArtifact(null);
+        SliderUtils.mergeMapsIgnoreDuplicateKeys(application.getQuicklinks(),
+            otherApplication.getQuicklinks());
+      } else {
+        // Since it is a simple app with no components, create a default
+        // component
+        Component comp = createDefaultComponent(application);
+        validateComponent(comp, fs.getFileSystem());
+        application.getComponents().add(comp);
+        if (application.getLifetime() == null) {
+          application.setLifetime(RestApiConstants.DEFAULT_UNLIMITED_LIFETIME);
+        }
+        return;
-      if (StringUtils.isEmpty(application.getArtifact().getId())) {
-        throw new IllegalArgumentException(
-            RestApiErrorMessages.ERROR_ARTIFACT_ID_INVALID);
-      }
+    }
-      // If artifact is of type APPLICATION, add a slider specific property
-      if (application.getArtifact().getType()
-          == Artifact.TypeEnum.APPLICATION) {
-        if (application.getConfiguration() == null) {
-          application.setConfiguration(new Configuration());
-        }
+    // Validate there are no component name collisions (collisions are not
+    // currently supported) and add any components from external applications
+    // TODO allow name collisions? see AppState#roles
+    // TODO or add prefix to external component names?
+    Configuration globalConf = application.getConfiguration();
+    Set<String> componentNames = new HashSet<>();
+    List<Component> componentsToRemove = new ArrayList<>();
+    List<Component> componentsToAdd = new ArrayList<>();
+    for (Component comp : application.getComponents()) {
+      if (componentNames.contains(comp.getName())) {
+        throw new IllegalArgumentException("Component name collision: " +
+            comp.getName());
-      // resource
-      validateApplicationResource(application.getResource(), null,
-          application.getArtifact().getType());
-
-      // container size
-      if (application.getNumberOfContainers() == null
-          || application.getNumberOfContainers() < 0) {
-        throw new IllegalArgumentException(
-            RestApiErrorMessages.ERROR_CONTAINERS_COUNT_INVALID + ": "
-                + application.getNumberOfContainers());
-      }
-      validateConfigFile(application.getConfiguration().getFiles(), fs);
-      // Since it is a simple app with no components, create a default component
-      application.getComponents().add(createDefaultComponent(application));
-    } else {
-      // If the application has components, then run checks for each component.
-      // Let global values take effect if component level values are not
-      // provided.
-      Artifact globalArtifact = application.getArtifact();
-      Resource globalResource = application.getResource();
-      Long globalNumberOfContainers = application.getNumberOfContainers();
-      for (Component comp : application.getComponents()) {
-        // artifact
-        if (comp.getArtifact() == null) {
-          comp.setArtifact(globalArtifact);
-        }
-        // If still null raise validation exception
-        if (comp.getArtifact() == null) {
-          throw new IllegalArgumentException(String
-              .format(RestApiErrorMessages.ERROR_ARTIFACT_FOR_COMP_INVALID,
-                  comp.getName()));
-        }
+      // If artifact is of type APPLICATION (which cannot be filled from
+      // global), read external application and add its components to this
+      // application
+      if (comp.getArtifact() != null && comp.getArtifact().getType() ==
+          Artifact.TypeEnum.APPLICATION) {
-          throw new IllegalArgumentException(String
-              .format(RestApiErrorMessages.ERROR_ARTIFACT_ID_FOR_COMP_INVALID,
-                  comp.getName()));
+          throw new IllegalArgumentException(
+              RestApiErrorMessages.ERROR_ARTIFACT_ID_INVALID);
-
-        // If artifact is of type APPLICATION, add a slider specific property
-        if (comp.getArtifact().getType() == Artifact.TypeEnum.APPLICATION) {
-          if (comp.getConfiguration() == null) {
-            comp.setConfiguration(new Configuration());
+        LOG.info("Marking {} for removal", comp.getName());
+        componentsToRemove.add(comp);
+        List<Component> externalComponents = getApplicationComponents(fs,
+            comp.getArtifact().getId());
+        for (Component c : externalComponents) {
+          Component override = application.getComponent(c.getName());
+          if (override != null && override.getArtifact() == null) {
+            // allow properties from external components to be overridden /
+            // augmented by properties in this component, except for artifact
+            // which must be read from external component
+            override.mergeFrom(c);
+            LOG.info("Merging external component {} from external {}", c
+                .getName(), comp.getName());
+          } else {
+            if (componentNames.contains(c.getName())) {
+              throw new IllegalArgumentException("Component name collision: " +
+                  c.getName());
+            }
+            componentNames.add(c.getName());
+            componentsToAdd.add(c);
+            LOG.info("Adding component {} from external {}", c.getName(),
+                comp.getName());
-          comp.setName(comp.getArtifact().getId());
-
-        // resource
-        if (comp.getResource() == null) {
-          comp.setResource(globalResource);
-        }
-        validateApplicationResource(comp.getResource(), comp,
-            comp.getArtifact().getType());
-
-        // container count
-        if (comp.getNumberOfContainers() == null) {
-          comp.setNumberOfContainers(globalNumberOfContainers);
-        }
-        if (comp.getNumberOfContainers() == null
-            || comp.getNumberOfContainers() < 0) {
-          throw new IllegalArgumentException(String.format(
-              RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID
-                  + ": " + comp.getNumberOfContainers(), comp.getName()));
-        }
-        validateConfigFile(comp.getConfiguration().getFiles(), fs);
+      } else {
+        // otherwise handle as a normal component
+        componentNames.add(comp.getName());
+        // configuration
+        comp.getConfiguration().mergeFrom(globalConf);
+    application.getComponents().removeAll(componentsToRemove);
+    application.getComponents().addAll(componentsToAdd);
+
+    // Validate components and let global values take effect if component level
+    // values are not provided
+    Artifact globalArtifact = application.getArtifact();
+    Resource globalResource = application.getResource();
+    Long globalNumberOfContainers = application.getNumberOfContainers();
+    String globalLaunchCommand = application.getLaunchCommand();
+    for (Component comp : application.getComponents()) {
+      // fill in global artifact unless it is type APPLICATION
+      if (comp.getArtifact() == null && application.getArtifact() != null
+          && application.getArtifact().getType() != Artifact.TypeEnum
+          .APPLICATION) {
+        comp.setArtifact(globalArtifact);
+      }
+      // fill in global resource
+      if (comp.getResource() == null) {
+        comp.setResource(globalResource);
+      }
+      // fill in global container count
+      if (comp.getNumberOfContainers() == null) {
+        comp.setNumberOfContainers(globalNumberOfContainers);
+      }
+      // fill in global launch command
+      if (comp.getLaunchCommand() == null) {
+        comp.setLaunchCommand(globalLaunchCommand);
+      }
+      validateComponent(comp, fs.getFileSystem());
+    }
-  // 1) Verify the src_file exists and non-empty for template
-  // 2) dest_file is absolute path
-  private static void validateConfigFile(List<ConfigFile> list, FileSystem fs)
+  public static void validateComponent(Component comp, FileSystem fs)
-    Set<String> destFileSet = new HashSet<>();
+    AbstractClientProvider compClientProvider = SliderProviderFactory
+        .getClientProvider(comp.getArtifact());
+    compClientProvider.validateArtifact(comp.getArtifact(), fs);
-    for (ConfigFile file : list) {
-      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) && StringUtils
-          .isEmpty(file.getSrcFile())) {
-        throw new IllegalArgumentException(
-            "Src_file is empty for " + ConfigFile.TypeEnum.TEMPLATE);
-
-      }
-      if (!StringUtils.isEmpty(file.getSrcFile())) {
-        Path p = new Path(file.getSrcFile());
-        if (!fs.exists(p)) {
-          throw new IllegalArgumentException(
-              "Src_file does not exist for config file: " + file
-                  .getSrcFile());
-        }
-      }
-
-      if (StringUtils.isEmpty(file.getDestFile())) {
-        throw new IllegalArgumentException("Dest_file is empty.");
-      }
-      // validate dest_file is absolute
-      if (!Paths.get(file.getDestFile()).isAbsolute()) {
-        throw new IllegalArgumentException(
-            "Dest_file must be absolute path: " + file.getDestFile());
-      }
-
-      if (destFileSet.contains(file.getDestFile())) {
-        throw new IllegalArgumentException(
-            "Duplicated ConfigFile exists: " + file.getDestFile());
-      }
-      destFileSet.add(file.getDestFile());
+    if (comp.getLaunchCommand() == null && (comp.getArtifact() == null || comp
+        .getArtifact().getType() != Artifact.TypeEnum.DOCKER)) {
+      throw new IllegalArgumentException(RestApiErrorMessages
+          .ERROR_ABSENT_LAUNCH_COMMAND);
+
+    validateApplicationResource(comp.getResource(), comp);
+
+    if (comp.getNumberOfContainers() == null
+        || comp.getNumberOfContainers() < 0) {
+      throw new IllegalArgumentException(String.format(
+          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID
+              + ": " + comp.getNumberOfContainers(), comp.getName()));
+    }
+    compClientProvider.validateConfigFiles(comp.getConfiguration()
+        .getFiles(), fs);
+  @VisibleForTesting
+  public static List<Component> getApplicationComponents(SliderFileSystem
+      fs, String appName) throws IOException {
+    return loadApplication(fs, appName).getComponents();
+  }
+
+  public static Application loadApplication(SliderFileSystem fs, String
+      appName) throws IOException {
+    Path appJson = getAppJsonPath(fs, appName);
+    LOG.info("Loading application definition from " + appJson);
+    Application externalApplication = jsonSerDeser.load(fs.getFileSystem(),
+        appJson);
+    return externalApplication;
+  }
+
+  public static Path getAppJsonPath(SliderFileSystem fs, String appName) {
+    Path appDir = fs.buildClusterDirPath(appName);
+    Path appJson = new Path(appDir, appName + ".json");
+    return appJson;
+  }
-      Component comp, Artifact.TypeEnum artifactType) {
+      Component comp) {
-    if (resource == null && artifactType == Artifact.TypeEnum.APPLICATION) {
-      return;
-    }
+    comp.setConfiguration(app.getConfiguration());

MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS78 INS83 INS83 INS39 INS42 INS44 INS8 UPD42 INS44 UPD83 MOV83 MOV83 MOV39 UPD42 MOV42 MOV44 MOV44 MOV43 INS8 INS78 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 UPD42 INS43 INS43 INS42 INS14 INS42 INS43 INS42 INS21 INS43 INS42 INS25 INS60 MOV60 INS60 INS60 INS70 INS21 INS21 MOV60 MOV60 MOV60 INS60 MOV70 UPD43 UPD42 INS60 INS21 INS25 INS21 MOV25 MOV21 INS42 INS43 INS43 INS43 INS42 INS43 INS42 UPD42 MOV42 INS41 INS42 INS43 INS42 INS43 INS42 UPD42 MOV42 INS60 INS21 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS41 INS21 INS42 INS42 INS74 INS57 INS40 INS42 INS7 INS42 MOV38 INS8 MOV43 INS59 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS32 INS32 INS43 INS59 MOV21 UPD42 INS43 INS59 INS32 INS27 MOV8 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV43 INS59 INS32 INS43 INS59 INS42 INS42 INS42 MOV43 INS59 INS43 INS59 INS42 INS32 INS43 INS43 INS42 INS42 INS25 INS42 MOV32 UPD42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS42 UPD42 MOV42 INS42 INS25 INS25 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 MOV25 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS27 INS36 UPD42 MOV42 MOV32 UPD42 MOV42 INS42 UPD42 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS27 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS27 MOV8 MOV8 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS32 INS8 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS27 MOV8 INS42 INS42 MOV32 UPD42 UPD42 INS32 INS33 INS27 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS43 INS42 INS27 INS42 INS42 MOV43 INS32 UPD27 MOV27 MOV27 MOV25 INS60 INS21 INS21 INS21 INS60 INS21 MOV21 INS41 INS43 INS43 INS42 INS42 INS32 INS53 INS27 MOV27 MOV25 INS21 INS21 INS60 INS70 INS21 INS21 INS27 INS27 INS32 UPD42 INS32 UPD42 UPD42 INS42 INS42 MOV27 INS27 MOV43 INS40 UPD42 UPD42 INS42 INS42 INS45 INS42 INS42 INS40 INS32 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS14 INS32 INS33 MOV32 INS32 UPD74 MOV74 INS59 INS44 INS42 INS8 INS32 INS32 MOV27 INS27 MOV32 INS40 INS42 INS42 INS42 INS42 MOV32 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 MOV43 INS27 INS42 INS42 UPD42 UPD42 INS45 INS42 INS42 INS42 UPD43 INS42 MOV32 INS43 INS42 INS60 INS25 INS42 INS42 INS32 MOV32 INS42 INS42 INS32 INS33 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS45 INS32 UPD42 UPD42 UPD42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 INS40 INS42 INS42 MOV43 INS40 INS42 INS42 INS32 INS27 MOV27 INS21 INS21 INS25 INS21 INS21 MOV21 INS42 INS42 MOV42 INS42 INS32 INS42 INS33 INS32 INS32 INS32 MOV8 INS32 INS32 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 MOV32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 MOV43 UPD45 UPD42 UPD42 DEL42 DEL43 DEL40 DEL40 DEL14 DEL53 DEL42 DEL43 DEL14 DEL40 DEL42 DEL43 DEL40 DEL25 DEL40 DEL32 DEL14 DEL53 DEL8 DEL21 DEL8 DEL25 DEL14 DEL25 DEL25 DEL32 DEL33 DEL32 DEL21 DEL32 DEL34 DEL27 DEL27 DEL25 DEL8 DEL8 DEL25 DEL45 DEL40 DEL27 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL32 DEL27 DEL25 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL43 DEL45 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL32 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL40 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL40 DEL27 DEL27 DEL41 DEL8 DEL25