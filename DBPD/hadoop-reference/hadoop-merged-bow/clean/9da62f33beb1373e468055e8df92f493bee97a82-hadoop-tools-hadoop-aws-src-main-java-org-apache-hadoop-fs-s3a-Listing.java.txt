Merge branch 'trunk' into HDDS-1535
-import java.util.HashSet;
+import java.util.HashMap;
+import java.util.Map;
-      FileStatus[] fileStatuses,
+      S3AFileStatus[] fileStatuses,
-      RemoteIterator<FileStatus> providedStatus) throws IOException {
+      RemoteIterator<S3AFileStatus> providedStatus) throws IOException {
-      RemoteIterator<FileStatus> statusIterator) {
+      RemoteIterator<S3AFileStatus> statusIterator) {
-      RemoteIterator<LocatedFileStatus> iterator, Set<Path> tombstones) {
+      RemoteIterator<S3ALocatedFileStatus> iterator, Set<Path> tombstones) {
-      implements RemoteIterator<LocatedFileStatus> {
+      implements RemoteIterator<S3ALocatedFileStatus> {
-    private LocatedFileStatus status;
+    private S3ALocatedFileStatus status;
-    public SingleStatusRemoteIterator(LocatedFileStatus status) {
+    SingleStatusRemoteIterator(S3ALocatedFileStatus status) {
-    public LocatedFileStatus next() throws IOException {
+    public S3ALocatedFileStatus next() throws IOException {
-        LocatedFileStatus s = this.status;
+        S3ALocatedFileStatus s = this.status;
-      implements RemoteIterator<FileStatus> {
-    private final ArrayList<FileStatus> filteredStatusList;
+      implements RemoteIterator<S3AFileStatus> {
+    private final ArrayList<S3AFileStatus> filteredStatusList;
-    ProvidedFileStatusIterator(FileStatus[] fileStatuses, PathFilter filter,
+    ProvidedFileStatusIterator(S3AFileStatus[] fileStatuses, PathFilter filter,
-      for (FileStatus status : fileStatuses) {
+      for (S3AFileStatus status : fileStatuses) {
-    public FileStatus next() throws IOException {
+    public S3AFileStatus next() throws IOException {
-      implements RemoteIterator<FileStatus> {
+      implements RemoteIterator<S3AFileStatus> {
-    private ListIterator<FileStatus> statusBatchIterator;
+    private ListIterator<S3AFileStatus> statusBatchIterator;
-    private final Set<FileStatus> providedStatus;
-    private Iterator<FileStatus> providedStatusIterator;
+    private final Map<Path, S3AFileStatus> providedStatus;
+    private Iterator<S3AFileStatus> providedStatusIterator;
-        RemoteIterator<FileStatus> providedStatus) throws IOException {
+        RemoteIterator<S3AFileStatus> providedStatus) throws IOException {
-      this.providedStatus = new HashSet<>();
+      this.providedStatus = new HashMap<>();
-        final FileStatus status = providedStatus.next();
-        if (filter.accept(status.getPath()) && acceptor.accept(status)) {
-          this.providedStatus.add(status);
+        final S3AFileStatus status = providedStatus.next();
+        Path path = status.getPath();
+        if (filter.accept(path) && acceptor.accept(status)) {
+          this.providedStatus.put(path, status);
-          providedStatusIterator = providedStatus.iterator();
+          providedStatusIterator = providedStatus.values().iterator();
-    public FileStatus next() throws IOException {
-      final FileStatus status;
+    public S3AFileStatus next() throws IOException {
+      final S3AFileStatus status;
-        // We remove from provided list the file status listed by S3 so that
+        // We remove from provided map the file status listed by S3 so that
-        if (providedStatus.remove(status)) {
-          LOG.debug("Removed the status from provided file status {}", status);
+
+        // The provided status is returned as it is assumed to have the better
+        // metadata (i.e. the eTag and versionId from S3Guard)
+        S3AFileStatus provided = providedStatus.remove(status.getPath());
+        if (provided != null) {
+          LOG.debug(
+              "Removed and returned the status from provided file status {}",
+              status);
+          return provided;
-      List<FileStatus> stats = new ArrayList<>(
+      List<S3AFileStatus> stats = new ArrayList<>(
-          FileStatus status = createFileStatus(keyPath, summary,
-              owner.getDefaultBlockSize(keyPath), owner.getUsername());
+          S3AFileStatus status = createFileStatus(keyPath, summary,
+              owner.getDefaultBlockSize(keyPath), owner.getUsername(),
+              null, null);
-          FileStatus status = new S3AFileStatus(Tristate.FALSE, keyPath,
+          S3AFileStatus status = new S3AFileStatus(Tristate.FALSE, keyPath,
-      implements RemoteIterator<LocatedFileStatus> {
-    private final RemoteIterator<FileStatus> statusIterator;
+      implements RemoteIterator<S3ALocatedFileStatus> {
+    private final RemoteIterator<S3AFileStatus> statusIterator;
-    LocatedFileStatusIterator(RemoteIterator<FileStatus> statusIterator) {
+    LocatedFileStatusIterator(RemoteIterator<S3AFileStatus> statusIterator) {
-    public LocatedFileStatus next() throws IOException {
+    public S3ALocatedFileStatus next() throws IOException {
-      RemoteIterator<LocatedFileStatus> {
-    private LocatedFileStatus next = null;
-    private final RemoteIterator<LocatedFileStatus> iterator;
+      RemoteIterator<S3ALocatedFileStatus> {
+    private S3ALocatedFileStatus next = null;
+    private final RemoteIterator<S3ALocatedFileStatus> iterator;
-    TombstoneReconcilingIterator(RemoteIterator<LocatedFileStatus>
+    TombstoneReconcilingIterator(RemoteIterator<S3ALocatedFileStatus>
-        LocatedFileStatus candidate = iterator.next();
+        S3ALocatedFileStatus candidate = iterator.next();
-    public LocatedFileStatus next() throws IOException {
+    public S3ALocatedFileStatus next() throws IOException {
-        LocatedFileStatus result = next;
+        S3ALocatedFileStatus result = next;

INS26 UPD40 INS40 UPD74 UPD74 UPD74 UPD74 MOV74 UPD74 MOV74 UPD5 UPD74 UPD74 UPD74 UPD43 UPD43 UPD43 UPD43 UPD74 UPD43 UPD43 UPD74 UPD74 UPD74 UPD43 UPD43 UPD74 UPD43 UPD43 UPD43 UPD74 MOV74 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD5 UPD42 UPD42 UPD43 UPD43 INS43 UPD43 UPD43 UPD74 UPD42 UPD42 UPD43 INS74 UPD42 UPD42 UPD42 UPD43 UPD74 MOV74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 INS42 UPD42 UPD42 UPD43 UPD43 UPD74 UPD42 MOV43 INS43 UPD42 UPD43 UPD42 UPD43 UPD42 INS60 UPD42 INS60 INS25 UPD43 INS42 UPD42 UPD43 UPD42 UPD74 UPD43 INS43 INS59 INS43 INS59 INS27 MOV8 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 MOV32 INS42 INS33 INS41 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD43 UPD43 UPD42 INS42 UPD45 UPD42 UPD42 INS32 INS33 INS33 MOV42 INS42 DEL83 DEL42 DEL42 DEL42 DEL32 DEL25 DEL42 DEL43 DEL74