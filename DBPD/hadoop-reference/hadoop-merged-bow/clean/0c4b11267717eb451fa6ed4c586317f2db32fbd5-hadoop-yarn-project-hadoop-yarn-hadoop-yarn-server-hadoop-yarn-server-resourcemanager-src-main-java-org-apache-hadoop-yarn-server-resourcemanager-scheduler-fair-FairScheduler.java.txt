YARN-2881. [YARN-2574] Implement PlanFollower for FairScheduler. (Anubhav Dhoot via kasha)

+import org.apache.hadoop.yarn.api.records.ReservationId;
+import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationConstants;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.QueueEntitlement;
-      addApplication(appAddedEvent.getApplicationId(),
-        appAddedEvent.getQueue(), appAddedEvent.getUser(),
-        appAddedEvent.getIsAppRecovering());
+      String queueName =
+          resolveReservationQueueName(appAddedEvent.getQueue(),
+              appAddedEvent.getApplicationId(),
+              appAddedEvent.getReservationID());
+      if (queueName != null) {
+        addApplication(appAddedEvent.getApplicationId(),
+            queueName, appAddedEvent.getUser(),
+            appAddedEvent.getIsAppRecovering());
+      }
+  private String resolveReservationQueueName(String queueName,
+      ApplicationId applicationId, ReservationId reservationID) {
+    FSQueue queue = queueMgr.getQueue(queueName);
+    if ((queue == null) || !allocConf.isReservable(queue.getQueueName())) {
+      return queueName;
+    }
+    // Use fully specified name from now on (including root. prefix)
+    queueName = queue.getQueueName();
+    if (reservationID != null) {
+      String resQName = queueName + "." + reservationID.toString();
+      queue = queueMgr.getQueue(resQName);
+      if (queue == null) {
+        String message =
+            "Application "
+                + applicationId
+                + " submitted to a reservation which is not yet currently active: "
+                + resQName;
+        this.rmContext.getDispatcher().getEventHandler()
+            .handle(new RMAppRejectedEvent(applicationId, message));
+        return null;
+      }
+      if (!queue.getParent().getQueueName().equals(queueName)) {
+        String message =
+            "Application: " + applicationId + " submitted to a reservation "
+                + resQName + " which does not belong to the specified queue: "
+                + queueName;
+        this.rmContext.getDispatcher().getEventHandler()
+            .handle(new RMAppRejectedEvent(applicationId, message));
+        return null;
+      }
+      // use the reservation queue to run the app
+      queueName = resQName;
+    } else {
+      // use the default child queue of the plan for unreserved apps
+      queueName = getDefaultQueueForPlanQueue(queueName);
+    }
+    return queueName;
+  }
+
+  private String getDefaultQueueForPlanQueue(String queueName) {
+    String planName = queueName.substring(queueName.lastIndexOf(".") + 1);
+    queueName = queueName + "." + planName + ReservationConstants.DEFAULT_QUEUE_SUFFIX;
+    return queueName;
+  }
+
-      FSLeafQueue targetQueue = queueMgr.getLeafQueue(queueName, false);
+      String destQueueName = handleMoveToPlanQueue(queueName);
+      FSLeafQueue targetQueue = queueMgr.getLeafQueue(destQueueName, false);
+
+  @Override
+  public void setEntitlement(String queueName,
+      QueueEntitlement entitlement) throws YarnException {
+
+    FSLeafQueue reservationQueue = queueMgr.getLeafQueue(queueName, false);
+    if (reservationQueue == null) {
+      throw new YarnException("Target queue " + queueName
+          + " not found or is not a leaf queue.");
+    }
+
+    reservationQueue.setWeights(entitlement.getCapacity());
+
+    // TODO Does MaxCapacity need to be set for fairScheduler ?
+  }
+
+  /**
+   * Only supports removing empty leaf queues
+   * @param queueName name of queue to remove
+   * @throws YarnException if queue to remove is either not a leaf or if its
+   * not empty
+   */
+  @Override
+  public void removeQueue(String queueName) throws YarnException {
+    FSLeafQueue reservationQueue = queueMgr.getLeafQueue(queueName, false);
+    if (reservationQueue != null) {
+      if (!queueMgr.removeLeafQueue(queueName)) {
+        throw new YarnException("Could not remove queue " + queueName + " as " +
+            "its either not a leaf queue or its not empty");
+      }
+    }
+  }
+
+  private String handleMoveToPlanQueue(String targetQueueName) {
+    FSQueue dest = queueMgr.getQueue(targetQueueName);
+    if (dest != null && allocConf.isReservable(dest.getQueueName())) {
+      // use the default child reservation queue of the plan
+      targetQueueName = getDefaultQueueForPlanQueue(targetQueueName);
+    }
+    return targetQueueName;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS21 INS25 INS41 INS42 INS43 INS42 INS60 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS42 MOV60 INS25 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS42 INS43 INS42 INS60 INS25 INS41 INS60 INS25 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS8 INS42 INS42 INS43 INS59 INS7 INS42 INS42 INS42 INS43 INS27 INS8 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS36 INS38 INS41 INS42 INS32 INS42 INS33 INS60 INS21 INS25 INS25 INS21 INS21 INS42 INS42 INS32 INS42 INS27 INS60 INS60 INS42 UPD42 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS32 INS27 INS32 INS21 INS42 INS42 INS32 INS42 INS33 MOV21 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS43 INS59 INS7 INS27 INS8 INS38 INS8 INS7 INS7 INS42 INS42 INS27 INS42 INS45 INS42 INS40 INS43 INS59 MOV43 INS59 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS38 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS7 INS42 MOV32 INS32 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS33 INS60 INS21 INS41 INS32 INS60 INS21 INS41 INS42 INS42 INS42 INS32 INS32 INS34 INS42 INS42 INS32 INS42 INS32 INS43 INS27 INS32 INS53 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS33 INS32 INS42 INS42 INS43 INS59 INS32 INS33 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS14 INS32 INS42 INS42 INS42 INS27 INS32 INS42 INS14 INS43 INS27 INS45 INS42 INS45 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS22 INS42 INS42 INS22 INS42 INS42 INS52 INS42 INS52 INS42