MAPREDUCE-5386. Ability to refresh history server job retention and job cleaner settings. Contributed by Ashwin Shankar


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507135 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.ScheduledFuture;
-
+  ScheduledFuture<?> futureHistoryCleaner = null;
+  
+  //History job cleaner interval
+  private long cleanerInterval;
+  
-    hsManager = new HistoryFileManager();
+    hsManager = createHistoryFileManager();
+  protected HistoryFileManager createHistoryFileManager() {
+    return new HistoryFileManager();
+  }
+
-    boolean startCleanerService = conf.getBoolean(
-        JHAdminConfig.MR_HISTORY_CLEANER_ENABLE, true);
-    if (startCleanerService) {
-      long runInterval = conf.getLong(
-          JHAdminConfig.MR_HISTORY_CLEANER_INTERVAL_MS,
-          JHAdminConfig.DEFAULT_MR_HISTORY_CLEANER_INTERVAL_MS);
-      scheduledExecutor
-          .scheduleAtFixedRate(new HistoryCleaner(),
-              30 * 1000l, runInterval, TimeUnit.MILLISECONDS);
-    }
+    scheduleHistoryCleaner();
+  protected int getInitDelaySecs() {
+    return 30;
+  }
+  
+  public void refreshJobRetentionSettings() {
+    if (getServiceState() == STATE.STARTED) {
+      conf = createConf();
+      long maxHistoryAge = conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,
+          JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);
+      hsManager.setMaxHistoryAge(maxHistoryAge);
+      if (futureHistoryCleaner != null) {
+        futureHistoryCleaner.cancel(false);
+      }
+      futureHistoryCleaner = null;
+      scheduleHistoryCleaner();
+    } else {
+      LOG.warn("Failed to execute refreshJobRetentionSettings : Job History service is not started");
+    }
+  }
+
+  private void scheduleHistoryCleaner() {
+    boolean startCleanerService = conf.getBoolean(
+        JHAdminConfig.MR_HISTORY_CLEANER_ENABLE, true);
+    if (startCleanerService) {
+      cleanerInterval = conf.getLong(
+          JHAdminConfig.MR_HISTORY_CLEANER_INTERVAL_MS,
+          JHAdminConfig.DEFAULT_MR_HISTORY_CLEANER_INTERVAL_MS);
+
+      futureHistoryCleaner = scheduledExecutor.scheduleAtFixedRate(
+          new HistoryCleaner(), getInitDelaySecs() * 1000l, cleanerInterval,
+          TimeUnit.MILLISECONDS);
+    }
+  }
+
+  protected Configuration createConf() {
+    return new Configuration();
+  }
+  
+  public long getCleanerInterval() {
+    return cleanerInterval;
+  }

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS74 INS59 INS83 INS39 INS59 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS43 INS76 INS42 INS33 INS42 INS42 INS41 MOV21 INS41 INS25 MOV60 INS25 INS42 INS41 INS41 INS42 MOV14 INS34 INS27 INS8 INS8 INS42 INS8 INS14 INS42 INS32 UPD42 INS32 INS40 INS21 INS60 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS43 INS42 INS42 INS7 INS39 INS59 INS32 INS27 INS8 INS7 INS32 INS32 INS7 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS33 INS42 INS42 INS42 INS45 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS40 INS40 INS32 INS42 INS42 MOV14 INS27 INS42 INS40 INS42 INS42 INS9 INS32 INS34 INS42 DEL42 DEL34 DEL34 DEL27 DEL42 DEL40 DEL42 DEL39 DEL42 DEL59 DEL60 DEL8 DEL25