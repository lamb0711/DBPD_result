HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.

+import org.apache.hadoop.HadoopIllegalArgumentException;
+    int dataLen = inputs[0].remaining();
+    if (dataLen == 0) {
+      return;
+    }
+    ensureLength(inputs, dataLen);
+    ensureLength(outputs, dataLen);
-    boolean hasArray = inputs[0].hasArray();
-    if (hasArray) {
-      byte[][] newInputs = toArrays(inputs);
-      byte[][] newOutputs = toArrays(outputs);
-      doEncode(newInputs, newOutputs);
-    } else {
+    boolean usingDirectBuffer = inputs[0].isDirect();
+    if (usingDirectBuffer) {
+      return;
+    }
+
+    int[] inputOffsets = new int[inputs.length];
+    int[] outputOffsets = new int[outputs.length];
+    byte[][] newInputs = new byte[inputs.length][];
+    byte[][] newOutputs = new byte[outputs.length][];
+
+    ByteBuffer buffer;
+    for (int i = 0; i < inputs.length; ++i) {
+      buffer = inputs[i];
+      inputOffsets[i] = buffer.position();
+      newInputs[i] = buffer.array();
+    }
+
+    for (int i = 0; i < outputs.length; ++i) {
+      buffer = outputs[i];
+      outputOffsets[i] = buffer.position();
+      newOutputs[i] = buffer.array();
+    }
+
+    doEncode(newInputs, inputOffsets, dataLen, newOutputs, outputOffsets);
+
+    for (int i = 0; i < inputs.length; ++i) {
+      buffer = inputs[i];
+      buffer.position(buffer.position() + dataLen); // dataLen bytes consumed
+    int dataLen = inputs[0].length;
+    if (dataLen == 0) {
+      return;
+    }
+    ensureLength(inputs, dataLen);
+    ensureLength(outputs, dataLen);
-    doEncode(inputs, outputs);
+    int[] inputOffsets = new int[inputs.length]; // ALL ZERO
+    int[] outputOffsets = new int[outputs.length]; // ALL ZERO
+
+    doEncode(inputs, inputOffsets, dataLen, outputs, outputOffsets);
-   * Perform the real encoding work using bytes array
+   * Perform the real encoding work using bytes array, supporting offsets
+   * and lengths.
+   * @param inputOffsets
+   * @param dataLen
+   * @param outputOffsets
-  protected abstract void doEncode(byte[][] inputs, byte[][] outputs);
+  protected abstract void doEncode(byte[][] inputs, int[] inputOffsets,
+                                   int dataLen, byte[][] outputs,
+                                   int[] outputOffsets);
-      throw new IllegalArgumentException("Invalid inputs length");
+      throw new HadoopIllegalArgumentException("Invalid inputs length");
-      throw new IllegalArgumentException("Invalid outputs length");
+      throw new HadoopIllegalArgumentException("Invalid outputs length");

INS26 INS40 INS44 INS44 INS44 INS25 INS21 INS21 MOV60 INS25 INS60 INS60 INS60 INS60 INS60 INS24 INS24 MOV21 INS24 INS60 INS25 INS21 INS21 INS60 INS60 INS65 INS65 INS65 INS5 INS42 INS39 INS42 INS5 INS42 UPD39 INS27 INS8 INS32 INS32 INS39 INS42 MOV8 INS5 INS59 INS5 INS59 MOV5 INS59 INS5 INS59 INS43 INS59 INS58 INS27 INS38 INS8 INS58 INS27 INS38 INS8 INS58 INS27 INS38 INS8 INS39 INS59 INS27 INS8 INS32 INS32 INS5 INS59 INS5 INS59 UPD66 INS66 INS42 INS42 INS42 INS39 INS85 INS39 INS85 UPD42 INS42 INS34 INS41 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS41 INS39 INS85 INS42 INS3 INS39 INS85 INS42 INS3 INS42 INS3 INS39 INS85 INS85 MOV42 INS3 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS21 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS42 INS22 INS42 INS34 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS3 INS39 INS85 INS42 INS3 INS42 INS42 INS42 UPD42 INS2 UPD42 INS5 INS40 INS5 INS40 MOV5 INS40 INS5 INS40 INS42 INS34 INS7 INS7 INS7 INS42 INS34 INS7 INS7 INS7 INS42 INS34 INS7 INS32 INS2 INS42 INS5 INS40 INS5 INS40 INS42 INS34 INS39 INS85 INS39 INS85 INS39 INS85 INS85 INS42 INS2 INS2 INS32 INS2 INS32 INS42 INS2 INS2 INS32 INS2 INS32 INS42 INS2 INS42 INS42 INS27 INS42 INS34 INS39 INS85 INS39 INS85 UPD43 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 UPD42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25