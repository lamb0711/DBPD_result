YARN-3055. Fixed ResourceManager's DelegationTokenRenewer to not stop token renewal of applications part of a bigger workflow. Contributed by Daryn Sharp.

+import java.util.Arrays;
-    public final ApplicationId applicationId;
+    public final Collection<ApplicationId> referringAppIds;
-    public TimerTask timerTask;
+    public RenewalTimerTask timerTask;
-    public DelegationTokenToRenew(ApplicationId jId, Token<?> token,
+    public DelegationTokenToRenew(Collection<ApplicationId> applicationIds,
+        Token<?> token,
-      this.applicationId = jId;
+      this.referringAppIds = Collections.synchronizedSet(
+          new HashSet<ApplicationId>(applicationIds));
-    public void setTimerTask(TimerTask tTask) {
+    public void setTimerTask(RenewalTimerTask tTask) {
-    
+
+    @VisibleForTesting
+    public void cancelTimer() {
+      if (timerTask != null) {
+        timerTask.cancel();
+      }
+    }
+
+    @VisibleForTesting
+    public boolean isTimerCancelled() {
+      return (timerTask != null) && timerTask.cancelled.get();
+    }
+
-      return token + ";exp=" + expirationDate;
+      return token + ";exp=" + expirationDate + "; apps=" + referringAppIds;
-        if (dttr != null) {
-          // If any of the jobs sharing the same token doesn't want to cancel
-          // the token, we should not cancel the token.
-          if (!evt.shouldCancelAtEnd) {
-            dttr.shouldCancelAtEnd = evt.shouldCancelAtEnd;
-            LOG.info("Set shouldCancelAtEnd=" + shouldCancelAtEnd
-                + " for token " + dttr.token);
+        if (dttr == null) {
+          dttr = new DelegationTokenToRenew(Arrays.asList(applicationId), token,
+              getConfig(), now, shouldCancelAtEnd, evt.getUser());
+          try {
+            renewToken(dttr);
+          } catch (IOException ioe) {
+            throw new IOException("Failed to renew token: " + dttr.token, ioe);
-          continue;
-
-        tokenList.add(new DelegationTokenToRenew(applicationId, token,
-          getConfig(), now, shouldCancelAtEnd, evt.getUser()));
+        tokenList.add(dttr);
-        try {
-          renewToken(dtr);
-        } catch (IOException ioe) {
-          throw new IOException("Failed to renew token: " + dtr.token, ioe);
+        DelegationTokenToRenew currentDtr =
+            allTokens.putIfAbsent(dtr.token, dtr);
+        if (currentDtr != null) {
+          // another job beat us
+          currentDtr.referringAppIds.add(applicationId);
+          appTokens.get(applicationId).add(currentDtr);
+        } else {
+          appTokens.get(applicationId).add(dtr);
+          setTimerForTokenRenewal(dtr);
-      for (DelegationTokenToRenew dtr : tokenList) {
-        appTokens.get(applicationId).add(dtr);
-        allTokens.put(dtr.token, dtr);
-        setTimerForTokenRenewal(dtr);
-      }
-      requestNewHdfsDelegationToken(applicationId, evt.getUser(),
+      requestNewHdfsDelegationToken(Arrays.asList(applicationId), evt.getUser(),
-        if (appTokens.get(dttr.applicationId).contains(dttr)) {
+        if (!dttr.isTimerCancelled()) {
-    TimerTask tTask = new RenewalTimerTask(token);
+    RenewalTimerTask tTask = new RenewalTimerTask(token);
-        + token.applicationId);
+        + token.referringAppIds);
-        + dttr.applicationId);
+        + dttr.referringAppIds);
+      final Collection<ApplicationId> applicationIds;
+      synchronized (dttr.referringAppIds) {
+        applicationIds = new HashSet<>(dttr.referringAppIds);
+        dttr.referringAppIds.clear();
+      }
-      Set<DelegationTokenToRenew> tokenSet = appTokens.get(dttr.applicationId);
-      if (tokenSet != null && !tokenSet.isEmpty()) {
+      for (ApplicationId appId : applicationIds) {
+        Set<DelegationTokenToRenew> tokenSet = appTokens.get(appId);
+        if (tokenSet == null || tokenSet.isEmpty()) {
+          continue;
+        }
-              if (t.timerTask != null) {
-                t.timerTask.cancel();
-              }
+              t.cancelTimer();
-      requestNewHdfsDelegationToken(dttr.applicationId, dttr.user,
-        dttr.shouldCancelAtEnd);
+      requestNewHdfsDelegationToken(applicationIds, dttr.user,
+          dttr.shouldCancelAtEnd);
-  private void requestNewHdfsDelegationToken(ApplicationId applicationId,
+  private void requestNewHdfsDelegationToken(
+      Collection<ApplicationId> referringAppIds,
-    LOG.info("Received new tokens for " + applicationId + ". Received "
+    LOG.info("Received new tokens for " + referringAppIds + ". Received "
-              new DelegationTokenToRenew(applicationId, token, getConfig(),
+              new DelegationTokenToRenew(referringAppIds, token, getConfig(),
-          appTokens.get(applicationId).add(tokenToRenew);
+          for (ApplicationId applicationId : referringAppIds) {
+            appTokens.get(applicationId).add(tokenToRenew);
+          }
-    rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);
+    for (ApplicationId applicationId : referringAppIds) {
+      rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);
+    }
-    ApplicationId applicationId = t.applicationId;
-    LOG.error("removing failed delegation token for appid=" + applicationId
-        + ";t=" + t.token.getService());
-    appTokens.get(applicationId).remove(t);
+    Collection<ApplicationId> applicationIds = t.referringAppIds;
+    synchronized (applicationIds) {
+      LOG.error("removing failed delegation token for appid=" + applicationIds
+          + ";t=" + t.token.getService());
+      for (ApplicationId applicationId : applicationIds) {
+        appTokens.get(applicationId).remove(t);
+      }
+    }
-    if (t.timerTask != null) {
-      t.timerTask.cancel();
-    }
+    t.cancelTimer();
+          // continue if the app list isn't empty
+          synchronized(dttr.referringAppIds) {
+            dttr.referringAppIds.remove(applicationId);
+            if (!dttr.referringAppIds.isEmpty()) {
+              continue;
+            }
+          }
-          if (dttr.timerTask != null)
-            dttr.timerTask.cancel();
+          dttr.cancelTimer();

INS26 INS40 INS31 INS31 MOV8 INS44 INS8 INS74 UPD43 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS74 INS42 INS70 INS60 INS51 MOV21 INS21 INS43 MOV43 UPD42 UPD42 INS74 INS42 UPD43 INS42 INS25 INS42 INS41 INS8 UPD43 MOV27 INS8 INS43 INS43 INS44 INS42 INS8 INS74 INS59 INS42 MOV8 INS32 INS42 INS43 MOV43 UPD42 INS27 INS8 INS27 MOV70 UPD42 INS60 INS51 INS70 MOV21 INS21 INS42 INS42 INS43 INS42 MOV21 INS43 INS43 INS42 INS40 INS70 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS36 INS32 INS45 INS42 INS8 UPD40 UPD40 INS83 INS74 INS59 INS40 INS8 INS44 INS42 MOV8 INS32 UPD42 INS42 INS42 INS42 INS44 INS42 INS8 UPD42 INS42 INS42 INS14 INS32 INS27 INS40 INS42 INS21 INS60 INS25 INS32 INS38 INS43 INS43 INS42 INS21 INS21 MOV43 INS42 INS60 INS25 INS42 INS42 INS40 INS40 INS43 INS42 MOV21 INS74 INS42 INS42 INS42 INS42 INS33 UPD27 MOV8 INS32 INS43 INS59 INS27 INS8 MOV8 INS42 INS42 MOV42 INS32 INS42 INS42 INS7 INS32 INS42 MOV74 INS59 UPD27 MOV27 INS8 UPD42 MOV42 INS43 INS43 MOV21 INS54 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS14 INS40 INS42 INS42 INS32 UPD27 MOV32 INS18 INS70 INS51 INS21 INS42 INS42 INS7 INS8 INS12 INS42 INS42 INS40 INS42 INS32 INS32 INS74 INS40 INS42 INS42 INS42 MOV44 INS42 INS8 INS40 INS8 INS32 INS42 MOV14 MOV21 MOV44 INS8 INS40 INS42 INS42 INS32 INS42 INS42 INS43 MOV21 INS21 INS25 INS42 INS42 INS32 INS32 INS53 INS42 INS42 INS42 INS42 UPD42 MOV32 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS14 MOV21 UPD40 UPD42 INS42 INS32 INS18 MOV43 INS27 INS42 INS40 INS42 UPD45 MOV45 MOV40 INS42 UPD42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL40 DEL7 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL40 DEL38 DEL25 DEL18 DEL8 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL45 DEL40 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL38 DEL40 DEL40 DEL33 DEL27 DEL8 DEL25 DEL42 DEL40 DEL40 DEL40 DEL32 DEL21 DEL25 DEL8 DEL42 DEL40 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL40 DEL33 DEL27 DEL21 DEL25