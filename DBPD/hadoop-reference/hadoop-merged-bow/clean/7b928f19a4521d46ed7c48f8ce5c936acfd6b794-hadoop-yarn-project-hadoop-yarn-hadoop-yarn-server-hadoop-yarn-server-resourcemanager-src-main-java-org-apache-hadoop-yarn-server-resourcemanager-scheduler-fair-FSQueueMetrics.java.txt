YARN-9322. Store metrics for custom resource types into FSQueueMetrics and query them in FairSchedulerQueueInfo
(Contributed by Szilard Nemeth via Daniel Templeton)

Change-Id: I14c12f1265999d62102f2ec5506d90015efeefe8

+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.FSQueueMetricsForCustomResources;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
+  private final FSQueueMetricsForCustomResources customResources;
+
+    if (ResourceUtils.getNumberOfKnownResourceTypes() > 2) {
+      this.customResources =
+          new FSQueueMetricsForCustomResources();
+    } else {
+      this.customResources = null;
+    }
-  public void setFairShare(Resource resource) {
-    fairShareMB.set(resource.getMemorySize());
-    fairShareVCores.set(resource.getVirtualCores());
-  }
-  
-  public long getFairShareMB() {
+  long getFairShareMB() {
-  public long getFairShareVirtualCores() {
+  long getFairShareVirtualCores() {
-  public void setSteadyFairShare(Resource resource) {
-    steadyFairShareMB.set(resource.getMemorySize());
-    steadyFairShareVCores.set(resource.getVirtualCores());
+  public Resource getFairShare() {
+    if (customResources != null) {
+      return Resource.newInstance(fairShareMB.value(),
+          (int) fairShareVCores.value(),
+          customResources.getFairShareValues());
+    }
+    return Resource.newInstance(fairShareMB.value(),
+        (int) fairShareVCores.value());
+  }
+
+  public void setFairShare(Resource resource) {
+    fairShareMB.set(resource.getMemorySize());
+    fairShareVCores.set(resource.getVirtualCores());
+    if (customResources != null) {
+      customResources.setFairShare(resource);
+    }
-  public void setMinShare(Resource resource) {
-    minShareMB.set(resource.getMemorySize());
-    minShareVCores.set(resource.getVirtualCores());
+  public Resource getSteadyFairShare() {
+    if (customResources != null) {
+      return Resource.newInstance(steadyFairShareMB.value(),
+          (int) steadyFairShareVCores.value(),
+          customResources.getSteadyFairShareValues());
+    }
+    return Resource.newInstance(steadyFairShareMB.value(),
+        (int) steadyFairShareVCores.value());
-  
+
+  public void setSteadyFairShare(Resource resource) {
+    steadyFairShareMB.set(resource.getMemorySize());
+    steadyFairShareVCores.set(resource.getVirtualCores());
+    if (customResources != null) {
+      customResources.setSteadyFairShare(resource);
+    }
+  }
+
-  
-  public void setMaxShare(Resource resource) {
-    maxShareMB.set(resource.getMemorySize());
-    maxShareVCores.set(resource.getVirtualCores());
+
+  public Resource getMinShare() {
+    if (customResources != null) {
+      return Resource.newInstance(minShareMB.value(),
+          (int) minShareVCores.value(),
+          customResources.getMinShareValues());
+    }
+    return Resource.newInstance(minShareMB.value(),
+        (int) minShareVCores.value());
+  }
+
+  public void setMinShare(Resource resource) {
+    minShareMB.set(resource.getMemorySize());
+    minShareVCores.set(resource.getVirtualCores());
+    if (customResources != null) {
+      customResources.setMinShare(resource);
+    }
+  public Resource getMaxShare() {
+    if (customResources != null) {
+      return Resource.newInstance(maxShareMB.value(),
+          (int) maxShareVCores.value(),
+          customResources.getMaxShareValues());
+    }
+    return Resource.newInstance(maxShareMB.value(),
+        (int) maxShareVCores.value());
+  }
+
+  public void setMaxShare(Resource resource) {
+    maxShareMB.set(resource.getMemorySize());
+    maxShareVCores.set(resource.getVirtualCores());
+    if (customResources != null) {
+      customResources.setMaxShare(resource);
+    }
+  }
+
+  public Resource getMaxAMShare() {
+    if (customResources != null) {
+      return Resource.newInstance(maxAMShareMB.value(),
+          maxAMShareVCores.value(),
+          customResources.getMaxAMShareValues());
+    }
+    return Resource.newInstance(maxAMShareMB.value(),
+        maxAMShareVCores.value());
+  }
+
+    if (customResources != null) {
+      customResources.setMaxAMShare(resource);
+    }
+  public Resource getAMResourceUsage() {
+    if (customResources != null) {
+      return Resource.newInstance(amResourceUsageMB.value(),
+          amResourceUsageVCores.value(),
+          customResources.getAMResourceUsageValues());
+    }
+    return Resource.newInstance(amResourceUsageMB.value(),
+        amResourceUsageVCores.value());
+  }
+
+    if (customResources != null) {
+      customResources.setAMResourceUsage(resource);
+    }

INS26 INS26 MOV31 MOV31 MOV31 MOV31 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS42 INS42 MOV46 INS25 INS42 INS25 INS41 INS25 INS42 INS25 INS41 INS25 INS42 INS25 INS41 INS25 INS42 INS25 INS41 INS25 INS42 INS25 INS41 INS25 INS42 INS25 INS41 INS25 INS27 INS8 INS8 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS32 INS27 INS8 INS32 INS34 INS21 INS21 INS42 INS33 INS41 INS42 INS42 INS32 INS11 INS42 INS33 INS21 INS42 INS33 INS41 INS42 INS42 INS32 INS11 INS42 INS33 INS21 INS42 INS33 INS41 INS42 INS42 INS32 INS11 INS42 INS33 INS21 INS42 INS33 INS41 INS42 INS42 INS32 INS11 INS42 INS33 INS21 INS42 INS33 INS41 INS42 INS42 INS32 INS32 INS42 INS33 INS21 INS42 INS33 INS41 INS42 INS42 INS32 INS32 INS42 INS33 INS21 INS42 INS42 INS7 INS7 INS32 INS42 INS42 INS39 INS32 INS32 INS32 INS42 INS42 INS39 INS32 INS32 INS32 INS42 INS42 INS39 INS32 INS32 INS32 INS42 INS42 INS39 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS22 INS14 INS22 INS33 INS42 INS42 INS32 INS11 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS11 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS11 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS11 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS52 INS42 INS43 INS52 INS42 INS42 INS42 INS39 INS32 INS42 INS42 INS42 INS42 INS39 INS32 INS42 INS42 INS42 INS42 INS39 INS32 INS42 INS42 INS42 INS42 INS39 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL8 DEL83 DEL83