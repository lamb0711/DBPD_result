HADOOP-12909. Change ipc.Client to support asynchronous calls.  Contributed by  Xiaobing Zhou

+import org.apache.hadoop.classification.InterfaceStability.Unstable;
+import com.google.common.util.concurrent.AbstractFuture;
-public class Client {
+public class Client implements AutoCloseable {
+  private static final ThreadLocal<Future<?>> returnValue = new ThreadLocal<>();
+  private static final ThreadLocal<Boolean> asynchronousMode =
+      new ThreadLocal<Boolean>() {
+        @Override
+        protected Boolean initialValue() {
+          return false;
+        }
+      };
+
+  @SuppressWarnings("unchecked")
+  @Unstable
+  public static <T> Future<T> getReturnValue() {
+    return (Future<T>) returnValue.get();
+  }
-    Connection connection = getConnection(remoteId, call, serviceClass,
-      fallbackToSimpleAuth);
+    final Connection connection = getConnection(remoteId, call, serviceClass,
+        fallbackToSimpleAuth);
+    if (isAsynchronousMode()) {
+      Future<Writable> returnFuture = new AbstractFuture<Writable>() {
+        @Override
+        public Writable get() throws InterruptedException, ExecutionException {
+          try {
+            set(getRpcResponse(call, connection));
+          } catch (IOException ie) {
+            setException(ie);
+          }
+          return super.get();
+        }
+      };
+
+      returnValue.set(returnFuture);
+      return null;
+    } else {
+      return getRpcResponse(call, connection);
+    }
+  }
+
+  /**
+   * Check if RPC is in asynchronous mode or not.
+   *
+   * @returns true, if RPC is in asynchronous mode, otherwise false for
+   *          synchronous mode.
+   */
+  @Unstable
+  static boolean isAsynchronousMode() {
+    return asynchronousMode.get();
+  }
+
+  /**
+   * Set RPC to asynchronous or synchronous mode.
+   *
+   * @param async
+   *          true, RPC will be in asynchronous mode, otherwise false for
+   *          synchronous mode
+   */
+  @Unstable
+  public static void setAsynchronousMode(boolean async) {
+    asynchronousMode.set(async);
+  }
+
+  private Writable getRpcResponse(final Call call, final Connection connection)
+      throws IOException {
+
+  @Override
+  @Unstable
+  public void close() throws Exception {
+    stop();
+  }

INS26 INS26 INS40 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS74 INS59 INS79 INS78 INS83 INS83 INS73 INS74 INS42 INS8 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS43 MOV8 INS78 INS78 INS83 INS39 INS42 INS43 INS8 INS43 INS74 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS45 INS42 INS42 INS43 INS43 INS41 MOV60 MOV60 MOV54 INS25 INS65 INS65 INS42 INS41 INS65 INS65 INS42 INS39 INS42 INS21 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS43 INS76 INS74 INS42 INS42 INS74 INS1 INS42 INS42 INS11 INS83 INS32 INS8 INS8 INS66 INS66 INS66 INS32 INS66 INS42 INS66 INS66 INS32 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS31 INS74 INS32 INS42 INS60 INS21 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS43 INS43 INS42 INS42 INS74 INS59 INS32 INS33 INS32 INS42 INS42 INS41 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS74 INS1 INS43 INS43 INS31 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS42 INS42 INS42 INS54 INS41 INS8 INS12 INS48 INS21 INS44 INS8 INS42 INS32 INS43 INS42 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42