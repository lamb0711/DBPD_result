MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.yarn.server.nodemanager.webapp.NMWebParams.CONTAINER_ID;
+import static org.apache.hadoop.yarn.util.StringHelper.join;
+import static org.apache.hadoop.yarn.webapp.view.JQueryUI.ACCORDION;
+import static org.apache.hadoop.yarn.webapp.view.JQueryUI.ACCORDION_ID;
+import static org.apache.hadoop.yarn.webapp.view.JQueryUI.THEMESWITCHER_ID;
+import static org.apache.hadoop.yarn.webapp.view.JQueryUI.initID;
+
+import java.io.InputStreamReader;
-import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch;
-import org.apache.hadoop.yarn.webapp.hamlet.Hamlet;
-import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.DIV;
+  
+  public static final String REDIRECT_URL = "redirect.url";
+  
+  @Override protected void preHead(Page.HTML<_> html) {
+    String redirectUrl = $(REDIRECT_URL);
+    if (redirectUrl == null || redirectUrl.isEmpty()) {
+      set(TITLE, join("Logs for ", $(CONTAINER_ID)));
+      html.meta_http("refresh", "10");
+    } else {
+      if (redirectUrl.equals("false")) {
+        set(TITLE, join("Failed redirect for ", $(CONTAINER_ID)));
+        //Error getting redirect url. Fall through.
+      } else {
+        set(TITLE, join("Redirecting to log server for ", $(CONTAINER_ID)));
+        html.meta_http("refresh", "1; url=" + redirectUrl);
+      }
+    }
+    
+    set(ACCORDION_ID, "nav");
+    set(initID(ACCORDION, "nav"), "{autoHeight:false, active:0}");
+    set(THEMESWITCHER_ID, "themeswitcher");
+  }
+
-      NMWebParams {
-
+      NMWebParams {    
-      DIV<Hamlet> div = html.div("#content");
+      String redirectUrl = $(REDIRECT_URL);
+      if (redirectUrl !=null && redirectUrl.equals("false")) {
+        html.h1("Failed while trying to construct the redirect url to the log" +
+        		" server. Log Server url may not be configured");
+        //Intentional fallthrough.
+      }
+      
-        div.h1("Invalid containerId " + $(CONTAINER_ID))._();
+        html.h1("Invalid containerId " + $(CONTAINER_ID));
-      if (application == null || container == null) {
-        div.h1(
-            "Unknown container. Container is either not yet running or "
+      if (application == null) {
+        html.h1(
+            "Unknown container. Container either has not started or "
-                + "doesn't belong to this node at all.")._();
+                + "doesn't belong to this node at all.");
+        return;
+      }
+      if (container == null) {
+        // Container may have alerady completed, but logs not aggregated yet.
+        printLogs(html, containerId, applicationId, application);
-          ContainerState.LOCALIZING).contains(container.getContainerState())) {
-        div.h1("Container is not yet running. Current state is "
-                + container.getContainerState())
-              ._();
+          ContainerState.LOCALIZED).contains(container.getContainerState())) {
+        html.h1("Container is not yet running. Current state is "
+                + container.getContainerState());
+        return;
+      }
+
+      if (container.getContainerState() == ContainerState.LOCALIZATION_FAILED) {
+        html.h1("Container wasn't started. Localization failed.");
+        printLogs(html, containerId, applicationId, application);
+        return;
+      }
+      if (EnumSet.of(ContainerState.KILLING,
+          ContainerState.CONTAINER_CLEANEDUP_AFTER_KILL,
+          ContainerState.CONTAINER_RESOURCES_CLEANINGUP).contains(
+          container.getContainerState())) {
+        //Container may have generated some logs before being killed.
+        printLogs(html, containerId, applicationId, application);
+        return;
+      }
+      if (container.getContainerState().equals(ContainerState.DONE)) {
+        // Prev state unknown. Logs may be available.
+        printLogs(html, containerId, applicationId, application);
+        return;
+      } else {
+        html.h1("Container is no longer running...");
+        return;
+      }
+    }
-        // Check for the authorization.
-        String remoteUser = request().getRemoteUser();
-        UserGroupInformation callerUGI = null;
-        if (remoteUser != null) {
-          callerUGI = UserGroupInformation.createRemoteUser(remoteUser);
-        }
-        if (callerUGI != null && !this.aclsManager.checkAccess(callerUGI,
-            ApplicationAccessType.VIEW_APP, application.getUser(),
-                applicationId)) {
-          div.h1(
-              "You (User " + remoteUser
-                  + ") are not authorized to view the logs for application "
-                  + applicationId)._();
+    private void printLogs(Block html, ContainerId containerId,
+        ApplicationId applicationId, Application application) {
+      // Check for the authorization.
+      String remoteUser = request().getRemoteUser();
+      UserGroupInformation callerUGI = null;
+
+      if (remoteUser != null) {
+        callerUGI = UserGroupInformation.createRemoteUser(remoteUser);
+      }
+      if (callerUGI != null
+          && !this.aclsManager.checkAccess(callerUGI,
+              ApplicationAccessType.VIEW_APP, application.getUser(),
+              applicationId)) {
+        html.h1(
+            "User [" + remoteUser
+                + "] is not authorized to view the logs for application "
+                + applicationId);
+        return;
+      }
+
+      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {
+        File logFile = null;
+        try {
+          logFile =
+              new File(this.logsSelector
+                  .getLocalPathToRead(
+                      ContainerLaunch.getRelativeContainerLogDir(
+                          applicationId.toString(), containerId.toString())
+                          + Path.SEPARATOR + $(CONTAINER_LOG_TYPE), this.conf)
+                  .toUri().getPath());
+        } catch (Exception e) {
+          html.h1("Cannot find this log on the local disk.");
-
-        if (!$(CONTAINER_LOG_TYPE).isEmpty()) {
-          File logFile = null;
-          try {
-            logFile =
-                new File(this.logsSelector
-                    .getLocalPathToRead(
-                        ConverterUtils.toString(
-                            applicationId)
-                            + Path.SEPARATOR + $(CONTAINER_ID)
-                            + Path.SEPARATOR
-                            + $(CONTAINER_LOG_TYPE), this.conf).toUri()
-                    .getPath());
-          } catch (Exception e) {
-            div.h1("Cannot find this log on the local disk.")._();
-          }
-          div.h1(logFile == null ? "Unknown LogFile" : logFile.getName());
-          long start =
-              $("start").isEmpty() ? -4 * 1024 : Long.parseLong($("start"));
-          start = start < 0 ? logFile.length() + start : start;
-          start = start < 0 ? 0 : start;
-          long end =
-              $("end").isEmpty() ? logFile.length() : Long
-                  .parseLong($("end"));
-          end = end < 0 ? logFile.length() + end : end;
-          end = end < 0 ? logFile.length() : end;
-          if (start > end) {
-            writer().write("Invalid start and end values!");
-          } else {
+        long start =
+            $("start").isEmpty() ? -4 * 1024 : Long.parseLong($("start"));
+        start = start < 0 ? logFile.length() + start : start;
+        start = start < 0 ? 0 : start;
+        long end =
+            $("end").isEmpty() ? logFile.length() : Long.parseLong($("end"));
+        end = end < 0 ? logFile.length() + end : end;
+        end = end < 0 ? logFile.length() : end;
+        if (start > end) {
+          html.h1("Invalid start and end values. Start: [" + start + "]"
+              + ", end[" + end + "]");
+          return;
+        } else {
+          InputStreamReader reader = null;
-                div._("Showing " + toRead + " bytes. Click ")
-                    .a(url("containerlogs", $(CONTAINER_ID),
-                        logFile.getName()), "here")
-                    ._(" for full log").br()._();
+              html.p()._("Showing " + toRead + " bytes. Click ")
+                  .a(url("containerlogs", $(CONTAINER_ID), $(APP_OWNER), 
+                      logFile.getName(), "?start=0"), "here").
+                      _(" for full log")._();
-            //TODO Fix findBugs close warning along with IOUtils change
-            FileReader reader = new FileReader(logFile);
-            char[] cbuf = new char[65536];
-            reader.skip(start);
-            int len = 0;
-            int totalRead = 0;
-            writer().write("<pre>");
-            while ((len = reader.read(cbuf, 0, (int) toRead)) > 0
-                && totalRead < (end - start)) {
-              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?
-              totalRead += len;
-              toRead = toRead - totalRead;
+            // TODO Fix findBugs close warning along with IOUtils change
+            reader = new FileReader(logFile);
+            int bufferSize = 65536;
+            char[] cbuf = new char[bufferSize];
+
+            long skipped = 0;
+            long totalSkipped = 0;
+            while (totalSkipped < start) {
+              skipped = reader.skip(start - totalSkipped);
+              totalSkipped += skipped;
+
+            int len = 0;
+            int currentToRead = toRead > bufferSize ? bufferSize : (int) toRead;
+            writer().write("<pre>");
+
+            while ((len = reader.read(cbuf, 0, currentToRead)) > 0
+                && toRead > 0) {
+              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?
+              toRead = toRead - len;
+              currentToRead = toRead > bufferSize ? bufferSize : (int) toRead;
+            }
+
+
-              writer().write(
-                  "Exception reading log-file "
-                      + StringUtils.stringifyException(e));
-          } 
-        }
-          div._();
-        } else {
-          // Just print out the log-types
-          List<File> containerLogsDirs =
-              getContainerLogDirs(this.conf, containerId);
-          for (File containerLogsDir : containerLogsDirs) {
-            for (File logFile : containerLogsDir.listFiles()) {
-              div
-                  .p()
-                  .a(
-                      url("containerlogs", $(CONTAINER_ID),
-                          logFile.getName(), "?start=-4076"),
-                      logFile.getName() + " : Total file length is "
-                          + logFile.length() + " bytes.")
-                  ._();
+            html.h1("Exception reading log-file. Log file was likely aggregated. "
+                + StringUtils.stringifyException(e));
+          } finally {
+            if (reader != null) {
+              try {
+                reader.close();
+              } catch (IOException e) {
+                // Ignore
+              }
-          div._();
-        div.h1("Container is no longer running..")._();
+        // Just print out the log-types
+        List<File> containerLogsDirs =
+            getContainerLogDirs(this.conf, containerId);
+        boolean foundLogFile = false;
+        for (File containerLogsDir : containerLogsDirs) {
+          for (File logFile : containerLogsDir.listFiles()) {
+            foundLogFile = true;
+            html.p()
+                .a(url("containerlogs", $(CONTAINER_ID), $(APP_OWNER), 
+                    logFile.getName(), "?start=-4096"),
+                    logFile.getName() + " : Total file length is "
+                        + logFile.length() + " bytes.")._();
+          }
+        }
+        if (!foundLogFile) {
+          html.h1("No logs available for container " + containerId.toString());
+          return;
+        }
+      return;
-    

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 UPD40 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS31 INS42 INS42 INS45 INS42 INS74 INS42 INS60 INS25 INS21 INS21 INS21 MOV78 INS83 INS39 INS42 INS44 INS8 UPD83 UPD42 INS44 INS44 INS44 MOV8 INS43 INS43 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS32 INS43 INS42 INS60 INS25 MOV60 MOV54 MOV60 MOV60 MOV60 INS25 INS25 MOV25 INS25 INS25 INS25 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS40 INS42 INS42 INS42 INS32 INS27 INS32 INS21 INS21 INS25 INS42 INS42 INS45 INS42 INS32 INS45 INS42 INS42 INS45 INS42 INS43 INS59 INS27 INS8 MOV27 INS8 MOV27 INS8 INS27 INS8 MOV32 INS8 INS32 INS8 INS32 INS8 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS32 INS8 INS8 INS42 INS42 INS45 INS42 INS42 INS32 INS27 INS32 INS21 INS21 INS41 INS21 INS41 INS32 INS40 INS21 INS41 INS21 INS41 INS32 INS42 INS32 INS21 INS41 INS32 INS42 INS40 INS21 INS41 INS21 INS41 INS25 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS21 INS21 INS21 INS42 INS42 INS42 INS33 INS42 INS42 INS45 INS32 INS32 INS32 UPD40 MOV32 INS42 INS42 INS32 INS32 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 MOV27 INS8 INS8 INS39 INS59 INS38 INS8 INS42 INS45 INS32 MOV32 INS32 INS32 INS42 INS42 INS27 MOV32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 UPD42 MOV42 MOV42 MOV27 MOV21 INS41 INS60 INS54 INS42 INS9 INS42 MOV21 INS41 INS42 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS27 INS45 INS45 UPD42 INS45 INS45 INS45 UPD45 UPD45 INS41 INS43 INS59 MOV8 MOV12 INS8 INS32 UPD42 UPD45 INS42 INS45 MOV32 INS45 INS42 INS32 UPD42 INS27 INS42 INS42 INS33 INS21 INS60 INS60 INS60 INS61 INS25 INS21 INS42 INS42 INS27 UPD42 MOV42 MOV42 MOV45 INS45 UPD42 MOV42 INS45 INS45 INS42 INS45 INS7 INS39 MOV59 MOV5 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS7 INS45 INS32 INS42 MOV14 UPD42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 MOV21 INS21 INS42 INS16 UPD27 INS42 INS33 INS54 INS42 INS9 UPD42 MOV42 UPD42 MOV42 MOV5 INS42 INS7 INS7 INS27 INS42 MOV11 UPD42 INS34 UPD7 UPD42 MOV42 UPD42 INS8 INS12 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS27 UPD42 INS16 UPD45 MOV21 INS44 INS8 UPD42 MOV32 UPD45 INS32 UPD42 INS45 MOV42 MOV42 INS27 INS42 INS42 INS27 INS42 INS11 INS43 INS42 UPD42 UPD42 UPD42 INS42 INS32 INS32 MOV32 INS42 MOV32 INS45 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS39 INS42 UPD42 UPD42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 UPD45 INS32 INS32 INS32 INS45 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL40 DEL32 DEL42 DEL32 DEL33 DEL27 DEL45 DEL42 DEL42 DEL32 DEL16 DEL42 DEL43 DEL60 DEL34 DEL42 DEL32 DEL42 DEL34 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL32 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL27 DEL42 DEL42 DEL45 DEL45 DEL45 DEL27 DEL32 DEL42 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8