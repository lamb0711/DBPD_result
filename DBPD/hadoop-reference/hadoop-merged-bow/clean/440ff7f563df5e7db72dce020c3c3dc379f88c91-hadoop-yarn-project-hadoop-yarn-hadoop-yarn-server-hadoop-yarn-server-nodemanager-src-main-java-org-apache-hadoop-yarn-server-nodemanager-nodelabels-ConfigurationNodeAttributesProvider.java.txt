YARN-8094. Support configuration based Node Attribute provider. Contributed by Weiwei Yang.

+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableSet;
+import org.apache.commons.lang3.EnumUtils;
+import org.apache.hadoop.yarn.api.records.NodeAttributeType;
+import org.apache.hadoop.yarn.nodelabels.NodeLabelUtil;
+import java.util.Arrays;
+  private static final String NODE_ATTRIBUTES_DELIMITER = ":";
+  private static final String NODE_ATTRIBUTE_DELIMITER = ",";
+
-  // TODO parse attributes from configuration
-    return new HashSet<>();
+    if (Strings.isNullOrEmpty(config)) {
+      return ImmutableSet.of();
+    }
+    Set<NodeAttribute> attributeSet = new HashSet<>();
+    // Configuration value should be in one line, format:
+    // "ATTRIBUTE_NAME,ATTRIBUTE_TYPE,ATTRIBUTE_VALUE",
+    // multiple node-attributes are delimited by ":".
+    // Each attribute str should not container any space.
+    String[] attributeStrs = config.split(NODE_ATTRIBUTES_DELIMITER);
+    for (String attributeStr : attributeStrs) {
+      String[] fields = attributeStr.split(NODE_ATTRIBUTE_DELIMITER);
+      if (fields.length != 3) {
+        throw new IOException("Invalid value for "
+            + YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES
+            + "=" + config);
+      }
+
+      // We don't allow user config to overwrite our dist prefix,
+      // so disallow any prefix set in the configuration.
+      if (fields[0].contains("/")) {
+        throw new IOException("Node attribute set in "
+            + YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES
+            + " should not contain any prefix.");
+      }
+
+      // Make sure attribute type is valid.
+      if (!EnumUtils.isValidEnum(NodeAttributeType.class, fields[1])) {
+        throw new IOException("Invalid node attribute type: "
+            + fields[1] + ", valid values are "
+            + Arrays.asList(NodeAttributeType.values()));
+      }
+
+      // Automatically setup prefix for collected attributes
+      NodeAttribute na = NodeAttribute.newInstance(
+          NodeAttribute.PREFIX_DISTRIBUTED,
+          fields[0],
+          NodeAttributeType.valueOf(fields[1]),
+          fields[2]);
+
+      // Since a NodeAttribute is identical with another one as long as
+      // their prefix and name are same, to avoid attributes getting
+      // overwritten by ambiguous attribute, make sure it fails in such
+      // case.
+      if (!attributeSet.add(na)) {
+        throw new IOException("Ambiguous node attribute is found: "
+            + na.toString() + ", a same attribute already exists");
+      }
+    }
+
+    // Before updating the attributes to the provider,
+    // verify if they are valid
+    try {
+      NodeLabelUtil.validateNodeAttributes(attributeSet);
+    } catch (IOException e) {
+      throw new IOException("Node attributes set by configuration property: "
+          + YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES
+          + " is not valid. Detail message: " + e.getMessage());
+    }
+    return attributeSet;

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS74 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS25 INS60 INS60 INS70 INS54 INS41 INS42 INS42 INS32 INS8 MOV74 INS59 INS5 INS59 INS44 INS42 INS8 INS8 INS12 INS42 INS42 INS42 INS42 MOV41 INS42 MOV14 INS43 INS85 INS42 INS32 INS43 INS42 INS60 INS25 INS25 INS25 INS60 INS25 INS21 INS44 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS5 INS59 INS27 INS8 INS32 INS8 INS38 INS8 INS43 INS59 INS38 INS8 INS32 INS43 INS42 INS53 INS42 INS42 INS43 INS85 INS42 INS32 INS40 INS34 INS53 INS2 INS42 INS45 INS53 INS32 INS53 INS42 INS42 INS32 INS32 INS53 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS34 INS14 INS42 INS42 INS57 INS2 INS14 INS42 INS42 INS40 INS2 INS32 INS2 INS42 INS42 INS42 INS14 INS43 INS27 INS43 INS27 INS43 INS27 INS43 INS42 INS34 INS43 INS27 INS42 INS34 INS42 INS42 INS2 INS42 INS34 INS43 INS27 INS42 INS45 INS40 INS45 INS32 INS42 INS45 INS40 INS45 INS42 INS42 INS45 INS40 INS45 INS42 INS42 INS45 INS2 INS45 INS32 INS42 INS34 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL8