HDFS-13601. Optimize ByteString conversions in PBHelper.

+import java.util.concurrent.ConcurrentHashMap;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+  /**
+   * Map used to cache fixed strings to ByteStrings. Since there is no
+   * automatic expiration policy, only use this for strings from a fixed, small
+   * set.
+   * <p/>
+   * This map should not be accessed directly. Used the getFixedByteString
+   * methods instead.
+   */
+  private static ConcurrentHashMap<Object, ByteString> fixedByteStringCache =
+      new ConcurrentHashMap<>();
+
+  private static ByteString getFixedByteString(Text key) {
+    ByteString value = fixedByteStringCache.get(key);
+    if (value == null) {
+      value = ByteString.copyFromUtf8(key.toString());
+      fixedByteStringCache.put(key, value);
+    }
+    return value;
+  }
+
+  private static ByteString getFixedByteString(String key) {
+    ByteString value = fixedByteStringCache.get(key);
+    if (value == null) {
+      value = ByteString.copyFromUtf8(key);
+      fixedByteStringCache.put(key, value);
+    }
+    return value;
+  }
+
+  /**
+   * Guava cache for caching String to ByteString encoding. Use this when the
+   * set of Strings is large, mutable, or unknown.
+   */
+  private static LoadingCache<String, ByteString> bytestringCache =
+      CacheBuilder.newBuilder()
+          .maximumSize(10000)
+          .build(
+              new CacheLoader<String, ByteString>() {
+                public ByteString load(String key) {
+                  return ByteString.copyFromUtf8(key);
+                }
+              });
+
-        setPoolId(b.getBlockPoolId()).
+        setPoolIdBytes(getFixedByteString(b.getBlockPoolId())).
-        setKind(tok.getKind().toString()).
-        setService(tok.getService().toString()).build();
+        setKindBytes(getFixedByteString(tok.getKind())).
+        setServiceBytes(getFixedByteString(tok.getService())).build();
-        .setIpAddr(dn.getIpAddr())
-        .setHostName(dn.getHostName())
+        .setIpAddrBytes(dn.getIpAddrBytes())
+        .setHostNameBytes(dn.getHostNameBytes())
-        .setDatanodeUuid(dn.getDatanodeUuid() != null ?
-            dn.getDatanodeUuid() : "")
+        .setDatanodeUuidBytes(dn.getDatanodeUuidBytes())
-      builder.setLocation(info.getNetworkLocation());
+      builder.setLocationBytes(
+          bytestringCache.getUnchecked(info.getNetworkLocation()));
-            setOwner(fs.getOwner()).
-            setGroup(fs.getGroup()).
+            setOwnerBytes(getFixedByteString(fs.getOwner())).
+            setGroupBytes(getFixedByteString(fs.getGroup())).

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS23 INS29 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS74 INS59 INS65 INS43 INS43 INS43 INS42 INS14 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS65 INS43 INS43 INS43 INS42 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS74 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS66 INS66 INS42 INS42 INS42 INS32 INS42 INS14 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS32 INS42 INS34 INS74 INS1 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS43 INS43 INS43 INS31 UPD42 MOV32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS44 INS8 UPD42 MOV32 UPD42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS41 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS32 UPD42 INS32 UPD42 INS32 INS42 INS42 INS42 INS42 MOV32 MOV42 UPD42 MOV42 UPD42 INS32 UPD42 UPD42 INS32 INS42 MOV32 UPD42 UPD42 INS42 MOV32 UPD42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL45 DEL16