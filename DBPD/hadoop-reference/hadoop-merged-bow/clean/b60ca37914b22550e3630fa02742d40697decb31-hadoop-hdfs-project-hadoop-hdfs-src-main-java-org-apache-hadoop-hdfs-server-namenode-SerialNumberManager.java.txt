Fix potential FSImage corruption. Contributed by Daryn Sharp.

-/** Manage name-to-serial-number maps for users and groups. */
-class SerialNumberManager {
-  /** This is the only instance of {@link SerialNumberManager}.*/
-  static final SerialNumberManager INSTANCE = new SerialNumberManager();
+import org.apache.hadoop.hdfs.server.namenode.INodeWithAdditionalFields.PermissionStatusFormat;
+import org.apache.hadoop.hdfs.util.LongBitFormat;
-  private final SerialNumberMap<String> usermap = new SerialNumberMap<String>();
-  private final SerialNumberMap<String> groupmap = new SerialNumberMap<String>();
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
-  private SerialNumberManager() {}
+/** Manage name-to-serial-number maps for various string tables. */
+public enum SerialNumberManager {
+  GLOBAL(),
+  USER(PermissionStatusFormat.USER, AclEntryStatusFormat.NAME),
+  GROUP(PermissionStatusFormat.GROUP, AclEntryStatusFormat.NAME),
+  XATTR(XAttrFormat.NAME);
-  int getUserSerialNumber(String u) {return usermap.get(u);}
-  int getGroupSerialNumber(String g) {return groupmap.get(g);}
-  String getUser(int n) {return usermap.get(n);}
-  String getGroup(int n) {return groupmap.get(n);}
+  private static final SerialNumberManager[] values = values();
+  private static final int maxEntryBits;
+  private static final int maxEntryNumber;
+  private static final int maskBits;
-  {
-    getUserSerialNumber(null);
-    getGroupSerialNumber(null);
+  private SerialNumberMap<String> serialMap;
+  private int bitLength = Integer.SIZE;
+
+  static {
+    maxEntryBits = Integer.numberOfLeadingZeros(values.length);
+    maxEntryNumber = (1 << maxEntryBits) - 1;
+    maskBits = Integer.SIZE - maxEntryBits;
+    for (SerialNumberManager snm : values) {
+      // account for string table mask bits.
+      snm.updateLength(maxEntryBits);
+      snm.serialMap = new SerialNumberMap<String>(snm);
+      FSDirectory.LOG.info(snm + " serial map: bits=" + snm.getLength() +
+          " maxEntries=" + snm.serialMap.getMax());
+    }
+  }
+
+  SerialNumberManager(LongBitFormat.Enum... elements) {
+    // compute the smallest bit length registered with the serial manager.
+    for (LongBitFormat.Enum element : elements) {
+      updateLength(element.getLength());
+    }
+  }
+
+  int getLength() {
+    return bitLength;
+  }
+
+  private void updateLength(int maxLength) {
+    bitLength = Math.min(bitLength, maxLength);
+  }
+
+  public int getSerialNumber(String u) {
+    return serialMap.get(u);
+  }
+
+  public String getString(int id) {
+    return serialMap.get(id);
+  }
+
+  public String getString(int id, StringTable stringTable) {
+    return (stringTable != null)
+        ? stringTable.get(this, id) : getString(id);
+  }
+
+  private int getMask(int bits) {
+    return ordinal() << (Integer.SIZE - bits);
+  }
+
+  private static int getMaskBits() {
+    return maskBits;
+  }
+
+  private int size() {
+    return serialMap.size();
+  }
+
+  private Iterable<Entry<Integer, String>> entrySet() {
+    return serialMap.entrySet();
+  }
+
+  // returns snapshot of current values for a save.
+  public static StringTable getStringTable() {
+    // approximate size for capacity.
+    int size = 0;
+    for (final SerialNumberManager snm : values) {
+      size += snm.size();
+    }
+    int tableMaskBits = getMaskBits();
+    StringTable map = new StringTable(size, tableMaskBits);
+    for (final SerialNumberManager snm : values) {
+      final int mask = snm.getMask(tableMaskBits);
+      for (Entry<Integer, String> entry : snm.entrySet()) {
+        map.put(entry.getKey() | mask, entry.getValue());
+      }
+    }
+    return map;
+  }
+
+  // returns an empty table for load.
+  public static StringTable newStringTable(int size, int bits) {
+    if (bits > maskBits) {
+      throw new IllegalArgumentException(
+        "String table bits " + bits + " > " + maskBits);
+    }
+    return new StringTable(size, bits);
+  }
+
+  public static class StringTable implements Iterable<Entry<Integer, String>> {
+    private final int tableMaskBits;
+    private final Map<Integer,String> map;
+
+    private StringTable(int size, int loadingMaskBits) {
+      this.tableMaskBits = loadingMaskBits;
+      this.map = new HashMap<>(size);
+    }
+
+    private String get(SerialNumberManager snm, int id) {
+      if (tableMaskBits != 0) {
+        if (id > maxEntryNumber) {
+          throw new IllegalStateException(
+              "serial id " + id + " > " + maxEntryNumber);
+        }
+        id |= snm.getMask(tableMaskBits);
+      }
+      return map.get(id);
+    }
+
+    public void put(int id, String str) {
+      map.put(id, str);
+    }
+
+    public Iterator<Entry<Integer, String>> iterator() {
+      return map.entrySet().iterator();
+    }
+
+    public int size() {
+      return map.size();
+    }
+
+    public int getMaskBits() {
+      return tableMaskBits;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS71 INS40 INS40 INS40 INS40 INS40 INS40 INS29 INS83 INS42 INS72 INS72 INS72 INS72 INS23 INS23 INS23 INS23 INS23 INS23 INS28 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS55 MOV65 INS42 INS42 INS40 INS40 INS42 INS40 INS40 INS42 INS40 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 MOV74 INS59 INS83 INS39 INS59 INS83 INS8 INS42 INS44 INS8 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 MOV43 INS42 INS44 INS8 INS83 MOV43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS42 INS74 INS23 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 INS31 UPD66 MOV43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS21 INS21 INS21 INS70 INS43 INS42 INS70 INS41 INS39 INS42 INS21 INS41 INS39 INS42 INS41 INS39 INS42 INS43 INS42 INS41 INS39 INS42 INS41 INS41 INS41 INS43 INS74 INS41 INS42 INS60 INS70 INS60 INS60 INS70 INS41 INS42 INS39 INS42 INS39 INS42 INS25 INS41 INS43 INS74 INS83 INS83 INS39 INS59 INS74 UPD42 INS44 INS44 INS83 INS43 INS42 INS44 INS44 INS83 INS39 INS42 INS44 INS83 INS74 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS8 INS42 INS7 INS7 INS7 INS44 INS42 INS8 INS40 INS44 INS42 INS8 INS42 INS7 INS32 INS32 INS42 INS16 INS27 INS42 INS32 INS42 INS43 INS43 INS43 INS32 INS39 INS59 INS44 INS42 INS8 INS39 INS59 INS43 INS59 INS44 INS42 INS8 INS42 INS27 INS8 INS14 INS42 UPD43 MOV43 INS43 MOV43 INS42 INS43 INS43 INS43 UPD42 INS39 INS42 INS39 INS42 INS21 INS21 INS42 INS43 INS42 INS39 INS42 INS25 INS39 INS42 MOV43 UPD42 INS21 INS43 INS74 INS41 INS42 INS32 INS42 INS27 INS42 INS27 INS43 INS42 INS21 INS21 INS21 INS43 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS32 INS32 INS32 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS83 MOV43 INS42 INS21 INS42 INS32 INS42 UPD42 MOV42 MOV14 INS83 INS43 INS42 INS60 INS70 INS42 INS42 INS53 INS43 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS27 INS8 INS32 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS40 INS36 INS34 INS40 INS42 INS42 INS32 INS7 INS32 INS40 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS27 INS7 INS42 INS43 INS42 INS42 INS42 INS83 INS39 INS59 INS44 INS32 INS8 INS14 INS42 INS22 INS42 INS22 INS14 INS42 INS34 INS25 INS21 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS27 INS42 INS42 INS42 INS40 MOV14 INS40 INS42 INS27 INS42 INS32 INS42 INS33 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS43 INS27 INS52 INS42 INS52 INS42 INS74 INS42 INS27 INS8 INS7 UPD42 MOV42 UPD42 MOV42 INS34 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 MOV43 INS43 MOV43 INS32 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS42 INS53 INS42 INS32 INS42 INS42 INS40 INS42 UPD42 INS42 INS42 INS42 INS27 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS45 INS42 INS45 INS42 DEL39 DEL42 DEL39 DEL42 DEL32 DEL41 DEL42 DEL39 DEL42 DEL44 DEL42 DEL39 DEL42 DEL44 DEL42 DEL29 DEL42 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL59 DEL23 DEL83 DEL83 DEL74 DEL42 DEL74 DEL14 DEL59 DEL23 DEL42 DEL33 DEL32 DEL21 DEL42 DEL33 DEL32 DEL21 DEL8 DEL28 DEL55