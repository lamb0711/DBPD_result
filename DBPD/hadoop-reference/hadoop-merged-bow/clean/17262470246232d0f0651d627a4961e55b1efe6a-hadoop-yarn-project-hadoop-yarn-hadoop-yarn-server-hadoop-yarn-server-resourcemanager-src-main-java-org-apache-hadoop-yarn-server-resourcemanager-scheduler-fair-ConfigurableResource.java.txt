YARN-7556. Fair scheduler configuration should allow resource types in the minResources and maxResources properties. (Daniel Templeton and Szilard Nemeth via Haibo Chen)

+import java.util.Arrays;
+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.exceptions.ResourceNotFoundException;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
-  public ConfigurableResource(double[] percentages) {
+  ConfigurableResource() {
+    this(getOneHundredPercentArray());
+  }
+
+  ConfigurableResource(double[] percentages) {
+  ConfigurableResource(long value) {
+    this(Resource.newInstance(value));
+  }
+
+  private static double[] getOneHundredPercentArray() {
+    double[] resourcePercentages =
+        new double[ResourceUtils.getNumberOfKnownResourceTypes()];
+    Arrays.fill(resourcePercentages, 1.0);
+
+    return resourcePercentages;
+  }
+
-   * @return resource
+   * @return resource the resulting resource
-      return Resource.newInstance(memory, vcore);
+      Resource res = Resource.newInstance(memory, vcore);
+      ResourceInformation[] clusterInfo = clusterResource.getResources();
+
+      for (int i = 2; i < clusterInfo.length; i++) {
+        res.setResourceValue(i,
+            (long)(clusterInfo[i].getValue() * percentages[i]));
+      }
+
+      return res;
+
+  /**
+   * Set the value of the wrapped resource if this object isn't setup to use
+   * percentages. If this object is set to use percentages, this method has
+   * no effect.
+   *
+   * @param name the name of the resource
+   * @param value the value
+   */
+  void setValue(String name, long value) {
+    if (resource != null) {
+      resource.setResourceValue(name, value);
+    }
+  }
+
+  /**
+   * Set the percentage of the resource if this object is setup to use
+   * percentages. If this object is set to use percentages, this method has
+   * no effect.
+   *
+   * @param name the name of the resource
+   * @param value the percentage
+   */
+  void setPercentage(String name, double value) {
+    if (percentages != null) {
+      Integer index = ResourceUtils.getResourceTypeIndex().get(name);
+
+      if (index != null) {
+        percentages[index] = value;
+      } else {
+        throw new ResourceNotFoundException("The requested resource, \""
+            + name + "\", could not be found.");
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS42 INS8 INS42 INS44 INS8 INS83 INS83 INS5 INS42 INS8 INS29 INS39 INS42 INS44 INS44 INS8 INS29 INS39 INS42 INS44 INS44 INS8 INS17 INS39 INS42 INS17 INS39 INS85 INS60 INS21 INS41 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS25 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS25 INS32 INS32 INS5 INS59 INS32 INS42 UPD66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS34 INS60 INS60 INS24 INS42 INS33 INS21 INS42 INS33 INS60 INS25 INS5 INS32 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS32 INS43 INS59 INS27 INS8 INS8 INS39 INS85 INS42 INS42 INS42 INS42 MOV32 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS42 INS42 INS34 INS32 INS32 INS42 INS42 INS7 INS14 INS42 INS42 INS42 INS11 INS42 INS42 INS2 INS42 INS43 INS27 INS39 INS36 INS42 INS42 INS42 INS45 INS42 INS45 INS27 INS32 INS2 INS2 INS42 INS42 INS42 INS42 INS42 DEL83