YARN-7494. Add muti-node lookup mechanism and pluggable nodes sorting policies to optimize placement decision. Contributed by Sunil Govindan.

+import java.util.HashMap;
+  private boolean multiNodePlacementEnabled;
+      // Register CS specific multi-node policies to common MultiNodeManager
+      // which will add to a MultiNodeSorter which gives a pre-sorted list of
+      // nodes to scheduler's allocation.
+      multiNodePlacementEnabled = this.conf.getMultiNodePlacementEnabled();
+      if(rmContext.getMultiNodeSortingManager() != null) {
+        rmContext.getMultiNodeSortingManager().registerMultiNodePolicyNames(
+            multiNodePlacementEnabled,
+            this.conf.getMultiNodePlacementPolicies());
+      }
+
-          + asyncScheduleInterval + "ms");
+          + asyncScheduleInterval + "ms" + ",multiNodePlacementEnabled="
+          + multiNodePlacementEnabled);
+    // Get nodeId from allocated container if incoming argument is null.
+    NodeId updatedNodeid = (nodeId == null)
+        ? allocations.get(allocations.size() - 1).rmContainer.getNodeId()
+        : nodeId;
+
-      schedulerHealth.updateAllocation(now, nodeId, allocatedContainerId,
+      schedulerHealth.updateAllocation(now, updatedNodeid, allocatedContainerId,
-      schedulerHealth.updateReservation(now, nodeId, reservedContainerId,
+      schedulerHealth.updateReservation(now, updatedNodeid, reservedContainerId,
+  private CandidateNodeSet<FiCaSchedulerNode> getCandidateNodeSet(
+      FiCaSchedulerNode node) {
+    CandidateNodeSet<FiCaSchedulerNode> candidates = null;
+    candidates = new SimpleCandidateNodeSet<>(node);
+    if (multiNodePlacementEnabled) {
+      Map<NodeId, FiCaSchedulerNode> nodesByPartition = new HashMap<>();
+      List<FiCaSchedulerNode> nodes = nodeTracker
+          .getNodesPerPartition(node.getPartition());
+      if (nodes != null && !nodes.isEmpty()) {
+        nodes.forEach(n -> nodesByPartition.put(n.getNodeID(), n));
+        candidates = new SimpleCandidateNodeSet<FiCaSchedulerNode>(
+            nodesByPartition, node.getPartition());
+      }
+    }
+    return candidates;
+  }
+
-      CandidateNodeSet<FiCaSchedulerNode> candidates =
-          new SimpleCandidateNodeSet<>(node);
+      CandidateNodeSet<FiCaSchedulerNode> candidates = getCandidateNodeSet(
+          node);
+      FiCaSchedulerNode node = CandidateNodeSetUtils.getSingleNode(candidates);
+      NodeId nodeId = null;
+      if (node != null) {
+        nodeId = node.getNodeID();
+      }
-        updateSchedulerHealth(lastNodeUpdateTime,
-            CandidateNodeSetUtils.getSingleNode(candidates).getNodeID(),
-            assignment);
+        updateSchedulerHealth(lastNodeUpdateTime, nodeId, assignment);
-    if (null != node) {
+    if (!multiNodePlacementEnabled) {
+      Set<String> updateLabels = new HashSet<String>();
+        FiCaSchedulerNode node = nodeTracker.getNode(id);
+
+        if (node != null) {
+          // Update old partition to list.
+          updateLabels.add(node.getPartition());
+        }
+        updateLabels.addAll(labels);
+      refreshLabelToNodeCache(updateLabels);
+  private void refreshLabelToNodeCache(Set<String> updateLabels) {
+    Map<String, Set<NodeId>> labelMapping = labelManager
+        .getLabelsToNodes(updateLabels);
+    for (String label : updateLabels) {
+      Set<NodeId> nodes = labelMapping.get(label);
+      if (nodes == null) {
+        continue;
+      }
+      nodeTracker.updateNodesPerPartition(label, nodes);
+    }
+  }
+

INS26 INS40 INS23 INS31 INS31 INS83 INS39 INS59 INS83 MOV74 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS60 INS43 INS42 INS60 INS21 INS25 INS41 MOV25 INS74 INS42 INS60 INS70 INS43 INS59 INS42 INS74 INS59 INS7 INS42 INS8 INS42 MOV32 INS38 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS21 INS25 INS42 INS42 INS16 INS43 INS43 INS42 INS33 INS42 MOV14 INS60 INS60 INS25 INS60 INS60 INS25 INS25 MOV41 INS42 INS60 INS21 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS43 INS42 INS60 INS25 INS21 INS7 INS27 INS8 INS36 INS32 INS42 INS42 INS42 INS74 INS59 INS74 INS59 INS27 INS8 INS74 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS8 INS74 INS59 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS32 INS42 INS32 INS32 INS33 INS21 INS27 INS22 INS42 UPD42 UPD42 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS27 INS38 INS21 INS21 INS43 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS21 INS21 INS43 INS43 INS42 INS14 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS18 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS32 INS32 INS7 INS42 INS42 INS42 INS42 MOV42 MOV42 MOV42 INS7 INS32 INS42 INS42 INS74 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS86 INS42 INS14 INS42 INS32 INS42 INS42 INS42 MOV42 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS32 INS34 INS42 INS59 INS32 INS74 INS42 INS32 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL33 DEL42 DEL27