SUBMARINE-47. Provide an implementation to parse configuration values from a YAML file for submarine run CLI. Contributed by Szilard Nemeth.

+import org.apache.commons.io.FileUtils;
+import org.apache.hadoop.yarn.submarine.client.cli.param.ParametersHolder;
+import org.apache.hadoop.yarn.submarine.client.cli.param.RunJobParameters.UnderscoreConverterPropertyUtils;
+import org.apache.hadoop.yarn.submarine.client.cli.param.yaml.YamlConfigFile;
+import org.apache.hadoop.yarn.submarine.client.cli.param.yaml.YamlParseException;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.constructor.Constructor;
+import java.io.File;
+import java.io.FileNotFoundException;
+  private static final String YAML_PARSE_FAILED = "Failed to parse " +
+      "YAML config";
-  public RunJobCli(ClientContext cliContext, JobSubmitter jobSubmitter,
+  RunJobCli(ClientContext cliContext, JobSubmitter jobSubmitter,
-    options = generateOptions();
+    this.options = generateOptions();
+    options.addOption(CliConstants.YAML_CONFIG, true,
+        "Config file (in YAML format)");
-        "Numnber of worker tasks of the job, by default it's 1");
+        "Number of worker tasks of the job, by default it's 1");
-        + "--tensorboard is speciied, quicklink to tensorboard instance will "
+        + "--tensorboard is specified, quicklink to tensorboard instance will "
-        "sepcified, pre-destributed keytab of which path specified by" +
+        "specified, pre-distributed keytab of which path specified by" +
-      parameters.updateParametersByParsedCommandline(cli, options,
-          clientContext);
+      ParametersHolder parametersHolder = createParametersHolder(cli);
+      parameters.updateParameters(parametersHolder, clientContext);
-      LOG.error("Exception in parse:", e.getMessage());
+      LOG.error("Exception in parse: {}", e.getMessage());
+  private ParametersHolder createParametersHolder(CommandLine cli) {
+    String yamlConfigFile =
+        cli.getOptionValue(CliConstants.YAML_CONFIG);
+    if (yamlConfigFile != null) {
+      YamlConfigFile yamlConfig = readYamlConfigFile(yamlConfigFile);
+      if (yamlConfig == null) {
+        throw new YamlParseException(String.format(
+            YAML_PARSE_FAILED + ", file is empty: %s", yamlConfigFile));
+      } else if (yamlConfig.getConfigs() == null) {
+        throw new YamlParseException(String.format(YAML_PARSE_FAILED +
+            ", config section should be defined, but it cannot be found in " +
+            "YAML file '%s'!", yamlConfigFile));
+      }
+      LOG.info("Using YAML configuration!");
+      return ParametersHolder.createWithCmdLineAndYaml(cli, yamlConfig);
+    } else {
+      LOG.info("Using CLI configuration!");
+      return ParametersHolder.createWithCmdLine(cli);
+    }
+  }
+
+  private YamlConfigFile readYamlConfigFile(String filename) {
+    Constructor constructor = new Constructor(YamlConfigFile.class);
+    constructor.setPropertyUtils(new UnderscoreConverterPropertyUtils());
+    try {
+      LOG.info("Reading YAML configuration from file: {}", filename);
+      Yaml yaml = new Yaml(constructor);
+      return yaml.loadAs(FileUtils.openInputStream(new File(filename)),
+          YamlConfigFile.class);
+    } catch (FileNotFoundException e) {
+      logExceptionOfYamlParse(filename, e);
+      throw new YamlParseException(YAML_PARSE_FAILED +
+          ", file does not exist!");
+    } catch (Exception e) {
+      logExceptionOfYamlParse(filename, e);
+      throw new YamlParseException(
+          String.format(YAML_PARSE_FAILED + ", details: %s", e.getMessage()));
+    }
+  }
+
+  private void logExceptionOfYamlParse(String filename, Exception e) {
+    LOG.error(String.format("Exception while parsing YAML file %s", filename),
+        e);
+  }
+
-      throws ParseException, IOException, YarnException, InterruptedException,
-      SubmarineException {
+      throws ParseException, IOException, YarnException, SubmarineException {

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS27 INS21 INS42 INS43 INS42 INS60 INS25 INS42 INS43 INS42 INS60 INS21 INS54 INS43 INS42 INS43 INS42 INS21 INS45 INS45 INS32 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS43 INS59 INS32 INS8 INS12 INS12 INS42 INS42 INS32 INS22 INS42 INS42 INS40 INS9 INS45 UPD45 INS60 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS21 INS41 INS21 INS41 INS42 INS42 INS14 INS42 INS42 INS14 INS21 INS60 INS41 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS42 INS52 INS42 UPD45 INS43 INS59 INS42 INS42 INS40 INS43 INS59 INS27 INS8 INS25 INS32 INS32 INS32 INS32 INS43 INS57 INS43 INS32 INS43 INS59 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS42 INS45 INS42 UPD45 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS32 INS42 INS33 INS53 INS27 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS57 INS42 INS32 INS14 INS42 INS32 INS14 INS42 INS42 UPD45 INS42 INS42 INS14 INS32 INS33 INS53 INS42 INS43 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS14 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS27 INS42 INS43 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS45 DEL83 DEL42 DEL42 DEL42 DEL43