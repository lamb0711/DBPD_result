HDFS-7309. XMLUtils.mangleXmlString doesn't seem to handle less than sign. (Colin Patrick McCabe via raviprak)

+  private static String codePointToEntityRef(int cp) {
+    switch (cp) {
+      case '&':
+        return "&amp;";
+      case '\"':
+        return "&quot;";
+      case '\'':
+        return "&apos;";
+      case '<':
+        return "&lt;";
+      case '>':
+        return "&gt;";
+      default:
+        return null;
+    }
+  }
+
-  public static String mangleXmlString(String str) {
+  public static String mangleXmlString(String str, boolean createEntityRefs) {
-         for (int i = 0; i < len; i++) {
-           bld.append(str.charAt(offset + i));
+         String entityRef = null;
+         if (createEntityRefs) {
+           entityRef = codePointToEntityRef(cp);
+         }
+         if (entityRef != null) {
+           bld.append(entityRef);
+         } else {
+           for (int i = 0; i < len; i++) {
+             bld.append(str.charAt(offset + i));
+           }
-   * See {@link #mangleXmlString(String)} for a description of the mangling
-   * format.
+   * See {@link #mangleXmlString(String, boolean)} for a description of the
+   * mangling format.
-  public static String unmangleXmlString(String str)
+  public static String unmangleXmlString(String str, boolean decodeEntityRefs)
+    StringBuilder entityRef = null;
-      if ((slashPosition >= 0) && (slashPosition < NUM_SLASH_POSITIONS)) {
+      if (entityRef != null) {
+        entityRef.append(ch);
+        if (ch == ';') {
+          String e = entityRef.toString();
+          if (e.equals("&quot;")) {
+            bld.append("\"");
+          } else if (e.equals("&apos;")) {
+            bld.append("\'");
+          } else if (e.equals("&amp;")) {
+            bld.append("&");
+          } else if (e.equals("&lt;")) {
+            bld.append("<");
+          } else if (e.equals("&gt;")) {
+            bld.append(">");
+          } else {
+            throw new UnmanglingError("Unknown entity ref " + e);
+          }
+          entityRef = null;
+        }
+      } else  if ((slashPosition >= 0) && (slashPosition < NUM_SLASH_POSITIONS)) {
-        bld.append(ch);
+        boolean startingEntityRef = false;
+        if (decodeEntityRefs) {
+          startingEntityRef = (ch == '&');
+        }
+        if (startingEntityRef) {
+          entityRef = new StringBuilder();
+          entityRef.append("&");
+        } else {
+          bld.append(ch);
+        }
-    if (slashPosition != -1) {
+    if (entityRef != null) {
+      throw new UnmanglingError("unterminated entity ref starting with " +
+          entityRef.toString());
+    } else if (slashPosition != -1) {
-   * @param value              the string to put inside the tag
+   * @param val                the string to put inside the tag
-    char c[] = mangleXmlString(val).toCharArray();
+    char c[] = mangleXmlString(val, false).toCharArray();

INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS44 INS44 INS42 INS39 INS42 INS50 INS39 INS42 INS39 INS42 INS60 INS25 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 UPD66 UPD66 INS43 INS59 INS27 INS8 MOV25 UPD42 UPD66 INS13 INS45 INS13 INS45 INS13 INS45 INS13 INS45 INS13 INS45 INS33 INS42 INS42 INS33 INS25 INS42 INS33 INS53 INS8 INS69 INS27 INS8 MOV25 INS14 INS60 INS25 INS25 INS39 INS42 INS33 INS21 INS25 INS43 INS27 INS9 INS43 INS59 INS42 INS8 INS27 INS8 MOV8 INS32 INS27 INS8 INS42 INS45 INS32 INS42 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS13 INS60 INS25 INS21 INS8 INS42 INS42 INS7 INS32 INS43 INS59 INS32 INS8 INS25 INS7 INS60 INS25 INS25 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS25 INS42 INS33 INS39 INS59 INS42 INS8 INS42 INS8 MOV8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS25 INS42 INS9 INS21 INS21 INS21 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS25 INS7 INS7 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS8 INS42 INS36 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS21 INS53 INS27 INS43 INS42 INS42 INS45 INS32 INS14 INS42 INS13 INS42 INS42 INS42 INS45 INS43 INS27 INS42 INS45 INS42