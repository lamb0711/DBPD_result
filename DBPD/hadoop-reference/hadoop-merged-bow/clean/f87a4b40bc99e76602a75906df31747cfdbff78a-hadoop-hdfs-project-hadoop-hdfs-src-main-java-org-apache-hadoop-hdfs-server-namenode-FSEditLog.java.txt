HDFS-1975. Support for sharing the namenode state from active to standby. Contributed by Jitendra Nath Pandey, Aaron T Myers, and Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208813 13f79535-47bb-0310-9956-ffa450edef68

+   * 
+   * In a non-HA setup:
+   * 
-   * initialized, it is usually in IN_SEGMENT state, indicating that edits
-   * may be written. In the middle of a roll, or while saving the namespace,
-   * it briefly enters the BETWEEN_LOG_SEGMENTS state, indicating that the
-   * previous segment has been closed, but the new one has not yet been opened.
+   * initialized, it is usually in IN_SEGMENT state, indicating that edits may
+   * be written. In the middle of a roll, or while saving the namespace, it
+   * briefly enters the BETWEEN_LOG_SEGMENTS state, indicating that the previous
+   * segment has been closed, but the new one has not yet been opened.
+   * 
+   * In an HA setup:
+   * 
+   * The log starts in UNINITIALIZED state upon construction. Once it's
+   * initialized, it sits in the OPEN_FOR_READING state the entire time that the
+   * NN is in standby. Upon the NN transition to active, the log will be CLOSED,
+   * and then move to being BETWEEN_LOG_SEGMENTS, much as if the NN had just
+   * started up, and then will move to IN_SEGMENT so it can begin writing to the
+   * log. The log states will then revert to behaving as they do in a non-HA
+   * setup.
+    OPEN_FOR_READING,
-  final private JournalSet journalSet;
+  private JournalSet journalSet = null;
+  
+  /**
+   * The edit directories that are shared between primary and secondary.
+   */
+  final private Collection<URI> sharedEditsDirs;
-
+    
+    this.sharedEditsDirs = FSNamesystem.getSharedEditsDirs(conf);
+  }
+  
+  public void initJournalsForWrite() {
+    Preconditions.checkState(state == State.UNINITIALIZED ||
+        state == State.CLOSED, "Unexpected state: %s", state);
+    
+    initJournals(this.editsDirs);
+    state = State.BETWEEN_LOG_SEGMENTS;
+  }
+  
+  public void initSharedJournalsForRead() {
+    if (state == State.OPEN_FOR_READING) {
+      LOG.warn("Initializing shared journals for READ, already open for READ",
+          new Exception());
+      return;
+    }
+    Preconditions.checkState(state == State.UNINITIALIZED ||
+        state == State.CLOSED);
+    
+    initJournals(this.sharedEditsDirs);
+    state = State.OPEN_FOR_READING;
+  }
+  
+  private void initJournals(Collection<URI> dirs) {
-    for (URI u : this.editsDirs) {
+    for (URI u : dirs) {
-    state = State.BETWEEN_LOG_SEGMENTS;
-  synchronized void open() throws IOException {
-    Preconditions.checkState(state == State.BETWEEN_LOG_SEGMENTS);
+  synchronized void openForWrite() throws IOException {
+    Preconditions.checkState(state == State.BETWEEN_LOG_SEGMENTS,
+        "Bad state: %s", state);
-  synchronized boolean isOpen() {
+  synchronized boolean isOpenForWrite() {
+  synchronized boolean isOpenForRead() {
+    return state == State.OPEN_FOR_READING;
+  }
+
-      assert state != State.CLOSED;
+      assert state != State.CLOSED && state != State.OPEN_FOR_READING :
+        "bad state: " + state;
-  synchronized long getLastWrittenTxId() {
+  public synchronized long getLastWrittenTxId() {
+  
+  Collection<EditLogInputStream> selectInputStreams(long fromTxId,
+      long toAtLeastTxId) throws IOException {
+    return selectInputStreams(fromTxId, toAtLeastTxId, true);
+  }
+   * 
+   * @param inProgessOk set to true if in-progress streams are OK
-  Collection<EditLogInputStream> selectInputStreams(long fromTxId,
-      long toAtLeastTxId) throws IOException {
+  public Collection<EditLogInputStream> selectInputStreams(long fromTxId,
+      long toAtLeastTxId, boolean inProgressOk) throws IOException {
+      if (inProgressOk || !stream.isInProgress()) {
+        streams.add(stream);
+      }
+      // We're now looking for a higher range, so reset the fromTxId
-      streams.add(stream);

MOV23 INS23 INS31 INS31 INS31 INS31 INS31 INS72 INS83 MOV43 INS59 INS29 INS74 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 UPD42 UPD42 INS83 INS39 INS42 INS8 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS83 INS44 INS42 INS42 INS33 INS65 INS43 INS43 UPD42 INS21 INS21 INS21 MOV21 INS25 INS21 INS21 INS21 INS74 INS42 MOV21 MOV70 MOV25 INS41 INS43 INS43 INS39 INS42 INS39 INS42 INS42 INS41 INS65 INS39 INS42 INS66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS7 INS32 INS32 INS27 INS8 INS32 INS32 INS7 INS43 INS43 INS42 INS27 INS42 INS42 INS32 INS42 INS66 INS22 INS32 INS42 INS42 INS27 INS45 INS42 INS42 MOV22 INS42 INS40 INS21 INS41 INS42 INS42 INS27 INS42 INS22 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS9 INS25 INS52 INS42 INS42 INS42 INS42 INS27 INS27 INS32 INS27 INS27 INS52 INS42 INS27 INS27 INS27 INS8 INS42 INS40 INS42 INS40 INS42 INS42 INS45 INS14 INS42 INS40 INS42 INS40 MOV27 INS27 INS45 INS42 INS42 INS38 MOV21 INS43 INS42 INS40 INS32 INS42 INS42 INS42