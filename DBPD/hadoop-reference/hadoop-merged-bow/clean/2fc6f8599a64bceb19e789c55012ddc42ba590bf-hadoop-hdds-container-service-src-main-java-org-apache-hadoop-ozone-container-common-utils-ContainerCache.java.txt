HDDS-1449. JVM Exit in datanode while committing a key. Contributed by Mukul Kumar Singh. (#825)



+import java.io.Closeable;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
-        MetadataStore db = (MetadataStore) iterator.getValue();
-        closeDB((String)iterator.getKey(), db);
+        ReferenceCountedDB db = (ReferenceCountedDB) iterator.getValue();
+        db.setEvicted(true);
-    MetadataStore db = (MetadataStore) entry.getValue();
+    ReferenceCountedDB db = (ReferenceCountedDB) entry.getValue();
-      closeDB(dbFile, db);
+      db.setEvicted(false);
-   * @return MetadataStore.
+   * @return ReferenceCountedDB.
-  public MetadataStore getDB(long containerID, String containerDBType,
+  public ReferenceCountedDB getDB(long containerID, String containerDBType,
-      MetadataStore db = (MetadataStore) this.get(containerDBPath);
+      ReferenceCountedDB db = (ReferenceCountedDB) this.get(containerDBPath);
-        db = MetadataStoreBuilder.newBuilder()
+        MetadataStore metadataStore =
+            MetadataStoreBuilder.newBuilder()
+        db = new ReferenceCountedDB(metadataStore, containerDBPath);
+      // increment the reference before returning the object
+      db.incrementReference();
-   * @param containerPath - path of the container db file.
+   * @param containerDBPath - path of the container db file.
-  public void removeDB(String containerPath) {
+  public void removeDB(String containerDBPath) {
-      MetadataStore db = (MetadataStore)this.get(containerPath);
-      closeDB(containerPath, db);
-      this.remove(containerPath);
+      ReferenceCountedDB db = (ReferenceCountedDB)this.get(containerDBPath);
+      if (db != null) {
+        // marking it as evicted will close the db as well.
+        db.setEvicted(true);
+      }
+      this.remove(containerDBPath);
+
+
+  /**
+   * Class to implement reference counting over instances handed by Container
+   * Cache.
+   */
+  public class ReferenceCountedDB implements Closeable {
+    private final AtomicInteger referenceCount;
+    private final AtomicBoolean isEvicted;
+    private final MetadataStore store;
+    private final String containerDBPath;
+
+    public ReferenceCountedDB(MetadataStore store, String containerDBPath) {
+      this.referenceCount = new AtomicInteger(0);
+      this.isEvicted = new AtomicBoolean(false);
+      this.store = store;
+      this.containerDBPath = containerDBPath;
+    }
+
+    private void incrementReference() {
+      this.referenceCount.incrementAndGet();
+    }
+
+    private void decrementReference() {
+      this.referenceCount.decrementAndGet();
+      cleanup();
+    }
+
+    private void setEvicted(boolean checkNoReferences) {
+      Preconditions.checkState(!checkNoReferences ||
+              (referenceCount.get() == 0),
+          "checkNoReferences:%b, referencount:%d",
+          checkNoReferences, referenceCount.get());
+      isEvicted.set(true);
+      cleanup();
+    }
+
+    private void cleanup() {
+      if (referenceCount.get() == 0 && isEvicted.get() && store != null) {
+        closeDB(containerDBPath, store);
+      }
+    }
+
+    public MetadataStore getStore() {
+      return store;
+    }
+
+    public void close() {
+      decrementReference();
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS55 INS43 INS29 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS43 UPD42 INS65 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 MOV43 INS59 INS83 INS83 MOV43 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 MOV43 INS42 INS8 INS83 INS39 INS42 INS8 UPD43 UPD66 UPD42 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS39 INS42 INS21 INS21 INS21 INS25 INS41 INS21 UPD42 INS21 INS25 INS42 INS7 INS7 INS7 INS7 INS32 INS32 INS32 INS32 INS32 INS32 INS27 INS8 INS42 INS32 UPD43 UPD43 INS32 INS43 INS27 INS8 INS22 INS14 INS22 INS14 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS32 INS42 INS42 INS9 INS42 INS27 INS27 INS21 INS42 UPD42 UPD42 UPD42 INS9 UPD42 INS60 INS42 INS42 INS42 INS42 INS33 MOV21 UPD42 INS52 INS42 INS43 INS34 INS52 INS42 INS43 INS9 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS38 INS36 INS42 INS42 INS27 INS32 INS42 INS33 INS32 UPD43 INS32 INS43 MOV43 INS59 INS43 INS42 INS42 INS42 INS27 INS32 INS34 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS9 INS42 INS42 MOV32 INS14 INS42 UPD42 UPD42 UPD42 INS9 INS32 INS34 INS42 INS42 UPD43 INS43 INS42 INS42 INS42 INS42 UPD42 INS42 DEL42 DEL42 DEL43 DEL32 DEL11 DEL42 DEL32 DEL42 DEL42