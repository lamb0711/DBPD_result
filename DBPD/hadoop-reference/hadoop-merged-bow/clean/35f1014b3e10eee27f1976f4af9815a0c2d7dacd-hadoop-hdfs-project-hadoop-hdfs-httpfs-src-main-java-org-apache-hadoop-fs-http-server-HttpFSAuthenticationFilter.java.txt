HDFS-13654. Use a random secret when a secret file doesn't exist in HttpFS. This should be default.

+import org.apache.hadoop.security.authentication.util.RandomSignerSecretProvider;
+import org.apache.hadoop.security.authentication.util.SignerSecretProvider;
- * Subclass of hadoop-auth <code>AuthenticationFilter</code> that obtains its configuration
- * from HttpFSServer's server configuration.
+ * Subclass of hadoop-auth <code>AuthenticationFilter</code> that obtains its
+ * configuration from HttpFSServer's server configuration.
-  private static final String SIGNATURE_SECRET_FILE = SIGNATURE_SECRET + ".file";
+  private static final String SIGNATURE_SECRET_FILE = SIGNATURE_SECRET
+      + ".file";
-      throw new RuntimeException("Undefined property: " + SIGNATURE_SECRET_FILE);
+      throw new RuntimeException("Undefined property: "
+          + SIGNATURE_SECRET_FILE);
-    try {
-      StringBuilder secret = new StringBuilder();
-      Reader reader = new InputStreamReader(Files.newInputStream(Paths.get(
-          signatureSecretFile)), StandardCharsets.UTF_8);
-      int c = reader.read();
-      while (c > -1) {
-        secret.append((char)c);
-        c = reader.read();
+    if (!isRandomSecret(filterConfig)) {
+      try (Reader reader = new InputStreamReader(Files.newInputStream(
+          Paths.get(signatureSecretFile)), StandardCharsets.UTF_8)) {
+        StringBuilder secret = new StringBuilder();
+        int c = reader.read();
+        while (c > -1) {
+          secret.append((char) c);
+          c = reader.read();
+        }
+        props.setProperty(AuthenticationFilter.SIGNATURE_SECRET,
+            secret.toString());
+      } catch (IOException ex) {
+        throw new RuntimeException("Could not read HttpFS signature "
+            + "secret file: " + signatureSecretFile);
-      reader.close();
-      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());
-    } catch (IOException ex) {
-      throw new RuntimeException("Could not read HttpFS signature secret file: " + signatureSecretFile);
+  private boolean isRandomSecret(FilterConfig filterConfig) {
+    SignerSecretProvider secretProvider = (SignerSecretProvider) filterConfig
+        .getServletContext().getAttribute(SIGNER_SECRET_PROVIDER_ATTRIBUTE);
+    if (secretProvider == null) {
+      return false;
+    }
+    return secretProvider.getClass() == RandomSignerSecretProvider.class;
+  }

INS26 INS26 INS40 INS40 INS31 INS83 INS39 INS42 INS44 INS8 UPD66 UPD66 INS25 INS43 INS42 INS60 INS25 INS41 INS38 MOV8 INS42 INS43 INS59 INS27 INS8 INS27 INS32 INS54 INS42 INS42 INS11 INS42 INS33 INS41 INS32 INS57 INS42 INS42 INS58 INS8 INS12 INS43 INS32 INS9 INS42 INS42 INS43 MOV43 MOV59 MOV60 MOV60 MOV61 MOV21 MOV44 INS8 INS42 INS32 INS42 INS42 INS42 INS53 INS42 INS42 INS14 MOV43 INS27 INS45 INS45 INS42 DEL60 DEL42 DEL42 DEL32 DEL21 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54