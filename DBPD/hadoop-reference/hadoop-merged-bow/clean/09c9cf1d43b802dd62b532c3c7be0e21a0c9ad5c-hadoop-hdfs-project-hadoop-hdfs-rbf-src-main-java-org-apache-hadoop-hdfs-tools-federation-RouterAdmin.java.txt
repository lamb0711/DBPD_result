HDFS-13326. RBF: Improve the interfaces to modify and view mount tables. Contributed by Gang Li.

-        + "\t[-add <source> <nameservice> <destination> "
+        + "\t[-add <source> <nameservice1, nameservice2, ...> <destination> "
+        + "[-readonly] [-order HASH|LOCAL|RANDOM|HASH_ALL] "
+        + "-owner <owner> -group <group> -mode <mode>]\n"
+        + "\t[-update <source> <nameservice1, nameservice2, ...> <destination> "
-      System.err.println("Not enough parameters specificed");
+      System.err.println("Not enough parameters specified");
-        System.err.println("Not enough parameters specificed for cmd " + cmd);
+        System.err.println("Not enough parameters specified for cmd " + cmd);
+        printUsage();
+        return exitCode;
+      }
+    } else if ("-update".equals(cmd)) {
+      if (argv.length < 4) {
+        System.err.println("Not enough parameters specified for cmd " + cmd);
-        System.err.println("Not enough parameters specificed for cmd " + cmd);
+        System.err.println("Not enough parameters specified for cmd " + cmd);
-        System.err.println("Not enough parameters specificed for cmd " + cmd);
+        System.err.println("Not enough parameters specified for cmd " + cmd);
-        System.err.println("Not enough parameters specificed for cmd " + cmd);
+        System.err.println("Not enough parameters specified for cmd " + cmd);
-        System.err.println("Not enough parameters specificed for cmd " + cmd);
+        System.err.println("Not enough parameters specified for cmd " + cmd);
-          System.out.println("Successfuly added mount point " + argv[i]);
+          System.out.println("Successfully added mount point " + argv[i]);
+        }
+      } else if ("-update".equals(cmd)) {
+        if (updateMount(argv, i)) {
+          System.out.println("Successfully updated mount point " + argv[i]);
+   * Update a mount table entry.
+   *
+   * @param parameters Parameters for the mount point.
+   * @param i Index in the parameters.
+   */
+  public boolean updateMount(String[] parameters, int i) throws IOException {
+    // Mandatory parameters
+    String mount = parameters[i++];
+    String[] nss = parameters[i++].split(",");
+    String dest = parameters[i++];
+
+    // Optional parameters
+    boolean readOnly = false;
+    String owner = null;
+    String group = null;
+    FsPermission mode = null;
+    DestinationOrder order = null;
+    while (i < parameters.length) {
+      if (parameters[i].equals("-readonly")) {
+        readOnly = true;
+      } else if (parameters[i].equals("-order")) {
+        i++;
+        try {
+          order = DestinationOrder.valueOf(parameters[i]);
+        } catch(Exception e) {
+          System.err.println("Cannot parse order: " + parameters[i]);
+        }
+      } else if (parameters[i].equals("-owner")) {
+        i++;
+        owner = parameters[i];
+      } else if (parameters[i].equals("-group")) {
+        i++;
+        group = parameters[i];
+      } else if (parameters[i].equals("-mode")) {
+        i++;
+        short modeValue = Short.parseShort(parameters[i], 8);
+        mode = new FsPermission(modeValue);
+      }
+
+      i++;
+    }
+
+    return updateMount(mount, nss, dest, readOnly, order,
+        new ACLEntity(owner, group, mode));
+  }
+
+  /**
+   * Update a mount table entry.
+   *
+   * @param mount Mount point.
+   * @param nss Nameservices where this is mounted to.
+   * @param dest Destination path.
+   * @param readonly If the mount point is read only.
+   * @param order Order of the destination locations.
+   * @param aclInfo the ACL info for mount point.
+   * @return If the mount point was updated.
+   * @throws IOException Error updating the mount point.
+   */
+  public boolean updateMount(String mount, String[] nss, String dest,
+      boolean readonly, DestinationOrder order, ACLEntity aclInfo)
+      throws IOException {
+    MountTableManager mountTable = client.getMountTableManager();
+
+    // Create a new entry
+    Map<String, String> destMap = new LinkedHashMap<>();
+    for (String ns : nss) {
+      destMap.put(ns, dest);
+    }
+    MountTable newEntry = MountTable.newInstance(mount, destMap);
+
+    newEntry.setReadOnly(readonly);
+
+    if (order != null) {
+      newEntry.setDestOrder(order);
+    }
+
+    // Update ACL info of mount table entry
+    if (aclInfo.getOwner() != null) {
+      newEntry.setOwnerName(aclInfo.getOwner());
+    }
+
+    if (aclInfo.getGroup() != null) {
+      newEntry.setGroupName(aclInfo.getGroup());
+    }
+
+    if (aclInfo.getMode() != null) {
+      newEntry.setMode(aclInfo.getMode());
+    }
+
+    UpdateMountTableEntryRequest updateRequest =
+        UpdateMountTableEntryRequest.newInstance(newEntry);
+    UpdateMountTableEntryResponse updateResponse =
+        mountTable.updateMountTableEntry(updateRequest);
+    boolean updated = updateResponse.getStatus();
+    if (!updated) {
+      System.err.println("Cannot update mount point " + mount);
+    }
+    return updated;
+  }
+
+  /**

INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS5 INS42 INS39 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS61 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS5 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS70 INS60 INS21 INS25 INS25 INS25 INS25 INS60 INS60 INS60 INS25 INS41 INS66 INS42 INS66 INS42 INS66 INS43 INS85 INS43 INS59 INS5 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS85 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS43 INS59 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS39 INS59 INS38 INS8 INS42 INS32 INS42 INS42 INS42 INS2 INS43 INS85 INS42 INS32 INS42 INS42 INS2 INS42 INS9 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS40 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS21 UPD45 INS45 INS45 INS45 INS45 INS42 INS42 MOV32 INS25 INS42 INS37 INS42 INS2 INS42 INS45 INS42 INS37 INS32 INS8 INS25 INS37 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD45 MOV27 MOV32 INS32 INS8 MOV25 INS42 INS42 INS37 INS42 INS2 INS42 INS45 INS21 INS32 INS8 INS25 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS27 MOV27 MOV32 INS25 INS45 INS42 INS42 INS25 INS42 INS42 INS42 INS7 INS2 INS42 INS45 INS21 INS54 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS27 MOV32 INS8 MOV25 INS32 INS8 INS42 INS9 INS42 INS42 INS37 INS8 INS12 INS2 INS42 INS45 INS21 INS21 INS32 INS8 INS25 UPD45 INS40 INS34 INS25 INS42 INS42 INS42 INS21 INS42 INS21 INS44 INS8 INS42 INS42 INS37 INS7 INS2 INS42 INS45 INS21 INS21 INS32 INS8 UPD45 MOV27 INS8 INS32 INS7 INS43 INS42 INS21 INS42 INS42 INS2 INS42 INS42 INS37 INS7 INS2 INS42 INS45 INS21 INS60 INS21 UPD45 INS21 INS21 INS41 UPD45 INS40 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS37 INS39 INS59 INS7 UPD45 INS32 INS32 INS42 INS45 INS2 INS42 INS42 INS2 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS14 UPD45 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS2 INS42 INS42 INS2 INS34 INS43 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42