Complete commit of prior merge.

The previous merge accidentally only committed the hdfs project instead of common and MR
as well.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1463203 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.ConcurrentLinkedQueue;
-import org.apache.hadoop.yarn.server.api.records.HeartbeatResponse;
+import org.apache.hadoop.yarn.server.api.protocolrecords.NodeHeartbeatResponse;
+import com.google.common.annotations.VisibleForTesting;
+
+  private final ConcurrentLinkedQueue<UpdatedContainerInfo> nodeUpdateQueue;
+  private volatile boolean nextHeartBeat = true;
+
-  private HeartbeatResponse latestHeartBeatResponse = recordFactory
-      .newRecordInstance(HeartbeatResponse.class);
+  private NodeHeartbeatResponse latestNodeHeartBeatResponse = recordFactory
+      .newRecordInstance(NodeHeartbeatResponse.class);
-    this.latestHeartBeatResponse.setResponseId(0);
+    this.latestNodeHeartBeatResponse.setResponseId(0);
+    this.nodeUpdateQueue = new ConcurrentLinkedQueue<UpdatedContainerInfo>();  
-  public HeartbeatResponse getLastHeartBeatResponse() {
+  public void updateNodeHeartbeatResponseForCleanup(NodeHeartbeatResponse response) {
+    this.writeLock.lock();
+
+    try {
+      response.addAllContainersToCleanup(
+          new ArrayList<ContainerId>(this.containersToClean));
+      response.addAllApplicationsToCleanup(this.finishedApplications);
+      this.containersToClean.clear();
+      this.finishedApplications.clear();
+    } finally {
+      this.writeLock.unlock();
+    }
+  };
+
+  @Override
+  public NodeHeartbeatResponse getLastNodeHeartBeatResponse() {
-      return this.latestHeartBeatResponse;
+      return this.latestNodeHeartBeatResponse;
+      rmNode.nodeUpdateQueue.clear();
-        rmNode.getLastHeartBeatResponse().setResponseId(0);
+        rmNode.getLastNodeHeartBeatResponse().setResponseId(0);
+      rmNode.nodeUpdateQueue.clear();
-      rmNode.latestHeartBeatResponse = statusEvent.getLatestResponse();
+      rmNode.latestNodeHeartBeatResponse = statusEvent.getLatestResponse();
+        LOG.info("Node " + rmNode.nodeId + " reported UNHEALTHY with details: "
+            + remoteNodeHealthStatus.getHealthReport());
+        rmNode.nodeUpdateQueue.clear();
-
-      rmNode.context.getDispatcher().getEventHandler().handle(
-          new NodeUpdateSchedulerEvent(rmNode, newlyLaunchedContainers, 
-              completedContainers));
+      if(newlyLaunchedContainers.size() != 0 
+          || completedContainers.size() != 0) {
+        rmNode.nodeUpdateQueue.add(new UpdatedContainerInfo
+            (newlyLaunchedContainers, completedContainers));
+      }
+      if(rmNode.nextHeartBeat) {
+        rmNode.nextHeartBeat = false;
+        rmNode.context.getDispatcher().getEventHandler().handle(
+            new NodeUpdateSchedulerEvent(rmNode));
+      }
-      // HeartBeat processing from our end is done, as node pulls the following
-      // lists before sending status-updates. Clear data-structures
-      // TODO: These lists could go to the NM multiple times, or never.
-      rmNode.containersToClean.clear();
-      rmNode.finishedApplications.clear();
-
-      rmNode.latestHeartBeatResponse = statusEvent.getLatestResponse();
+      rmNode.latestNodeHeartBeatResponse = statusEvent.getLatestResponse();
+
+  @Override
+  public List<UpdatedContainerInfo> pullContainerUpdates() {
+    List<UpdatedContainerInfo> latestContainerInfoList = 
+        new ArrayList<UpdatedContainerInfo>();
+    while(nodeUpdateQueue.peek() != null){
+      latestContainerInfoList.add(nodeUpdateQueue.poll());
+    }
+    this.nextHeartBeat = true;
+    return latestContainerInfoList;
+  }
+
+  @VisibleForTesting
+  public void setNextHeartBeat(boolean nextHeartBeat) {
+    this.nextHeartBeat = nextHeartBeat;
+  }
+  
+  @VisibleForTesting
+  public int getQueueSize() {
+    return nodeUpdateQueue.size();
+  }

INS26 INS26 INS40 UPD40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 INS83 INS39 INS59 UPD43 INS78 INS83 INS39 INS42 INS44 INS8 UPD43 UPD42 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS42 INS9 UPD42 UPD42 INS21 INS42 INS43 INS42 INS21 INS54 UPD42 INS42 INS43 INS43 INS60 INS61 INS21 INS41 INS42 INS39 INS42 INS21 INS42 INS41 INS42 INS42 INS7 INS42 INS32 INS8 INS8 INS21 INS21 INS25 INS25 INS42 INS42 INS74 INS59 INS27 INS8 INS7 INS42 INS7 INS32 UPD43 INS22 INS14 INS22 INS42 INS21 INS21 INS21 INS21 INS21 INS32 INS32 INS27 INS8 INS40 INS8 INS43 INS43 INS42 INS14 INS32 INS33 INS21 INS22 INS9 INS22 INS42 INS42 INS42 UPD42 UPD42 INS52 INS42 INS74 INS52 INS42 INS32 INS32 INS32 INS32 INS32 INS40 INS42 INS40 INS42 UPD40 INS21 INS21 INS27 INS27 MOV21 MOV21 MOV21 UPD40 INS42 INS42 INS74 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS43 INS43 INS42 INS42 INS14 INS42 INS42 INS22 INS22 INS42 INS22 INS42 INS22 INS42 UPD42 INS32 INS32 INS32 INS34 INS32 INS34 INS7 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS74 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS27 INS40 INS42 INS42 INS42 INS42 INS42 UPD40 INS42 INS14 INS40 INS9 INS42 INS42 INS42 INS42 INS43 INS43 INS52 INS42 UPD42 INS45 INS40 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42