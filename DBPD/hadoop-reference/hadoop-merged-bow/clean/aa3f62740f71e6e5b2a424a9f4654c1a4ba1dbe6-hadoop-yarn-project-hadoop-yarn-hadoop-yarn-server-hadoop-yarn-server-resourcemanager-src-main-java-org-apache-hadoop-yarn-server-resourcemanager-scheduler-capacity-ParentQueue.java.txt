YARN-7332. Compute effectiveCapacity per each resource vector. (Sunil G via wangda)

+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.util.UnitsConversionUtil;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
-    float effectiveMinRatio = 1;
+    Resource numeratorForMinRatio = null;
-        effectiveMinRatio = Resources.divide(rc, clusterResource,
-            resourceByLabel, configuredMinResources);
+        numeratorForMinRatio = resourceByLabel;
-        effectiveMinRatio = Resources.divide(rc, clusterResource,
-            queueResourceQuotas.getEffectiveMinResource(label),
-            configuredMinResources);
+        numeratorForMinRatio = queueResourceQuotas
+            .getEffectiveMinResource(label);
+    Map<String, Float> effectiveMinRatioPerResource = getEffectiveMinRatioPerResource(
+        configuredMinResources, numeratorForMinRatio);
+
-            Resources.multiply(minResource, effectiveMinRatio));
+            getMinResourceNormalized(childQueue.getQueueName(), effectiveMinRatioPerResource,
+                minResource));
+  private Resource getMinResourceNormalized(String name, Map<String, Float> effectiveMinRatio,
+      Resource minResource) {
+    Resource ret = Resource.newInstance(minResource);
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
+    for (int i = 0; i < maxLength; i++) {
+      ResourceInformation nResourceInformation = minResource
+          .getResourceInformation(i);
+
+      Float ratio = effectiveMinRatio.get(nResourceInformation.getName());
+      if (ratio != null) {
+        ret.setResourceValue(i,
+            (long) (nResourceInformation.getValue() * ratio.floatValue()));
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Updating min resource for Queue: " + name + " as "
+              + ret.getResourceInformation(i) + ", Actual resource: "
+              + nResourceInformation.getValue() + ", ratio: "
+              + ratio.floatValue());
+        }
+      }
+    }
+    return ret;
+  }
+
+  private Map<String, Float> getEffectiveMinRatioPerResource(
+      Resource configuredMinResources, Resource numeratorForMinRatio) {
+    Map<String, Float> effectiveMinRatioPerResource = new HashMap<>();
+    if (numeratorForMinRatio != null) {
+      int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
+      for (int i = 0; i < maxLength; i++) {
+        ResourceInformation nResourceInformation = numeratorForMinRatio
+            .getResourceInformation(i);
+        ResourceInformation dResourceInformation = configuredMinResources
+            .getResourceInformation(i);
+
+        long nValue = nResourceInformation.getValue();
+        long dValue = UnitsConversionUtil.convert(
+            dResourceInformation.getUnits(), nResourceInformation.getUnits(),
+            dResourceInformation.getValue());
+        if (dValue != 0) {
+          effectiveMinRatioPerResource.put(nResourceInformation.getName(),
+              (float) nValue / dValue);
+        }
+      }
+    }
+    return effectiveMinRatioPerResource;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 MOV60 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS8 INS60 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS60 INS60 INS24 INS41 INS43 INS43 INS43 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS43 INS59 INS74 INS42 INS43 INS43 INS43 INS42 INS43 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS33 INS43 INS43 INS43 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS25 INS43 INS43 INS43 INS42 INS14 INS42 INS33 INS60 INS24 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS74 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS43 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS27 INS8 UPD42 INS42 UPD42 MOV32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS34 INS21 UPD42 INS32 UPD42 INS42 INS39 INS36 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS32 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL39 DEL34