HDFS-13381 : [SPS]: Use DFSUtilClient#makePathFromFileId() to prepare satisfier file path. Contributed by Rakesh R.

+import java.util.ArrayList;
+import org.apache.hadoop.hdfs.DFSUtilClient;
+import org.apache.hadoop.hdfs.protocol.Block;
+import org.apache.hadoop.hdfs.server.namenode.sps.BlockMoveTaskHandler;
+import org.apache.hadoop.hdfs.server.namenode.sps.BlockMovementListener;
+import org.apache.hadoop.hdfs.server.namenode.sps.FileCollector;
+import org.apache.hadoop.hdfs.server.protocol.BlockStorageMovementCommand.BlockMovingInfo;
-public class ExternalSPSContext implements Context<String> {
-  public static final Logger LOG =
-      LoggerFactory.getLogger(ExternalSPSContext.class);
-  private SPSService<String> service;
-  private NameNodeConnector nnc = null;
-  private BlockStoragePolicySuite createDefaultSuite =
+public class ExternalSPSContext implements Context {
+  public static final Logger LOG = LoggerFactory
+      .getLogger(ExternalSPSContext.class);
+  private final SPSService service;
+  private final NameNodeConnector nnc;
+  private final BlockStoragePolicySuite createDefaultSuite =
+  private final FileCollector fileCollector;
+  private final BlockMoveTaskHandler externalHandler;
+  private final BlockMovementListener blkMovementListener;
-  public ExternalSPSContext(SPSService<String> service, NameNodeConnector nnc) {
+  public ExternalSPSContext(SPSService service, NameNodeConnector nnc) {
+    this.fileCollector = new ExternalSPSFilePathCollector(service);
+    this.externalHandler = new ExternalSPSBlockMoveTaskHandler(
+        service.getConf(), nnc, service);
+    this.blkMovementListener = new ExternalBlockMovementListener();
-  public boolean isFileExist(String filePath) {
+  public boolean isFileExist(long path) {
+    Path filePath = DFSUtilClient.makePathFromFileId(path);
-      return nnc.getDistributedFileSystem().exists(new Path(filePath));
+      return nnc.getDistributedFileSystem().exists(filePath);
-  public void removeSPSHint(String inodeId) throws IOException {
-    nnc.getDistributedFileSystem().removeXAttr(new Path(inodeId),
+  public void removeSPSHint(long inodeId) throws IOException {
+    Path filePath = DFSUtilClient.makePathFromFileId(inodeId);
+    nnc.getDistributedFileSystem().removeXAttr(filePath,
-  public HdfsFileStatus getFileInfo(String path) throws IOException {
+  public HdfsFileStatus getFileInfo(long path) throws IOException {
+      Path filePath = DFSUtilClient.makePathFromFileId(path);
-          .getLocatedFileInfo(path, false);
+          .getLocatedFileInfo(filePath.toString(), false);
-  public String getNextSPSPath() {
+  public Long getNextSPSPath() {
-  public void removeSPSPathId(String pathId) {
+  public void removeSPSPathId(long pathId) {
-}
+
+  @Override
+  public void scanAndCollectFiles(long path)
+      throws IOException, InterruptedException {
+    fileCollector.scanAndCollectFiles(path);
+  }
+
+  @Override
+  public void submitMoveTask(BlockMovingInfo blkMovingInfo) throws IOException {
+    externalHandler.submitMoveTask(blkMovingInfo);
+  }
+
+  @Override
+  public void notifyMovementTriedBlocks(Block[] moveAttemptFinishedBlks) {
+    // External listener if it is plugged-in
+    if (blkMovementListener != null) {
+      blkMovementListener.notifyMovementTriedBlocks(moveAttemptFinishedBlks);
+    }
+  }
+
+  /**
+   * Its an implementation of BlockMovementListener.
+   */
+  private static class ExternalBlockMovementListener
+      implements BlockMovementListener {
+
+    private List<Block> actualBlockMovements = new ArrayList<>();
+
+    @Override
+    public void notifyMovementTriedBlocks(Block[] moveAttemptFinishedBlks) {
+      for (Block block : moveAttemptFinishedBlks) {
+        actualBlockMovements.add(block);
+      }
+      LOG.info("Movement attempted blocks", actualBlockMovements);
+    }
+  }
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 MOV43 INS23 INS23 INS23 INS31 INS31 INS31 INS55 INS83 MOV43 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS83 INS83 INS43 INS59 INS44 INS8 UPD43 MOV78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS78 UPD42 INS43 INS78 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS42 UPD42 MOV42 INS42 INS42 UPD42 INS42 INS42 MOV43 INS42 MOV21 MOV21 INS21 INS21 INS21 INS39 UPD42 INS60 INS39 INS60 INS21 INS39 UPD42 INS39 INS42 INS42 INS39 INS42 INS42 INS42 INS21 INS42 UPD43 UPD42 INS42 INS21 INS42 INS5 INS42 INS25 INS65 INS42 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS7 INS7 INS7 MOV43 INS59 MOV43 INS59 INS32 INS32 UPD42 INS32 INS43 INS85 INS27 INS8 INS66 INS43 INS43 INS42 INS14 INS42 INS5 INS42 INS70 INS21 INS22 INS14 INS22 INS14 INS22 INS14 INS42 INS32 INS42 INS32 MOV32 MOV42 INS42 MOV40 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS74 INS43 INS85 INS44 INS42 INS8 INS32 INS52 INS42 INS43 INS42 INS52 INS42 INS43 INS32 INS42 INS42 INS52 INS42 INS43 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS59 INS32 INS43 INS42 INS43 INS42 INS21 INS42 INS42 INS45 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL33 DEL43 DEL74 DEL42 DEL44 DEL8 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL42 DEL43