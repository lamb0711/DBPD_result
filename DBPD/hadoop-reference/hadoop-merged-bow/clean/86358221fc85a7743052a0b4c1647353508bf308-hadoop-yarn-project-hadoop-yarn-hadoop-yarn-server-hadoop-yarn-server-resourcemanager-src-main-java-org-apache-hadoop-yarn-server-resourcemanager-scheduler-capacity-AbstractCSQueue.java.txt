YARN-3099. Capacity Scheduler LeafQueue/ParentQueue should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan

+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceUsage;
+import com.google.common.annotations.VisibleForTesting;
-  Resource usedResources = Resources.createResource(0, 0);
-  Map<String, Resource> usedResourcesByNodeLabels = new HashMap<String, Resource>();
+  // Track resource usage-by-label like used-resource/pending-resource, etc.
+  ResourceUsage queueUsage;
+  
-
+    queueUsage = new ResourceUsage();
-  public synchronized Resource getUsedResources() {
-    return usedResources;
+  public Resource getUsedResources() {
+    return queueUsage.getUsed();
-    Resources.addTo(usedResources, resource);
-      if (!usedResourcesByNodeLabels.containsKey(RMNodeLabelsManager.NO_LABEL)) {
-        usedResourcesByNodeLabels.put(RMNodeLabelsManager.NO_LABEL,
-            Resources.createResource(0));
-      }
-      Resources.addTo(usedResourcesByNodeLabels.get(RMNodeLabelsManager.NO_LABEL),
-          resource);
+      queueUsage.incUsed(resource);
-        if (!usedResourcesByNodeLabels.containsKey(label)) {
-          usedResourcesByNodeLabels.put(label, Resources.createResource(0));
-        }
-        Resources.addTo(usedResourcesByNodeLabels.get(label), resource);
+        queueUsage.incUsed(label, resource);
-    // Update queue metrics
-    Resources.subtractFrom(usedResources, resource);
-
-      if (!usedResourcesByNodeLabels.containsKey(RMNodeLabelsManager.NO_LABEL)) {
-        usedResourcesByNodeLabels.put(RMNodeLabelsManager.NO_LABEL,
-            Resources.createResource(0));
-      }
-      Resources.subtractFrom(
-          usedResourcesByNodeLabels.get(RMNodeLabelsManager.NO_LABEL), resource);
+      queueUsage.decUsed(resource);
-        if (!usedResourcesByNodeLabels.containsKey(label)) {
-          usedResourcesByNodeLabels.put(label, Resources.createResource(0));
-        }
-        Resources.subtractFrom(usedResourcesByNodeLabels.get(label), resource);
+        queueUsage.decUsed(label, resource);
-    return usedResourcesByNodeLabels.get(nodeLabel);
+    return queueUsage.getUsed(nodeLabel);
+  }
+  
+  @VisibleForTesting
+  public ResourceUsage getResourceUsage() {
+    return queueUsage;

INS26 INS26 MOV23 INS40 INS40 INS31 INS43 INS78 INS83 INS43 INS42 INS8 UPD42 MOV42 INS42 INS21 INS42 INS42 INS41 INS7 INS32 INS42 INS42 INS14 INS42 INS42 UPD42 UPD42 INS43 MOV44 MOV32 MOV44 MOV32 INS42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 MOV42 UPD42 UPD42 MOV42 MOV42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL34 DEL32 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL38 DEL42 DEL42 DEL40 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL38 DEL42 DEL42 DEL40 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32