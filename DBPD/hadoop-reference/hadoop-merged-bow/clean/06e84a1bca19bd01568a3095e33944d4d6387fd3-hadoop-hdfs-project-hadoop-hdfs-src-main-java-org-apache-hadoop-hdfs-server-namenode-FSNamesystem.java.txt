HDFS-2223. Untangle depencencies between NN components. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166466 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.base.Preconditions;
+
+  
-   * FSNamesystem constructor.
+   * Instantiates an FSNamesystem loaded from the image and edits
+   * directories specified in the passed Configuration.
+   * 
+   * @param conf the Configuration which specifies the storage directories
+   *             from which to load
+   * @return an FSNamesystem which contains the loaded namespace
+   * @throws IOException if loading fails
-  FSNamesystem(Configuration conf) throws IOException {
+  public static FSNamesystem loadFromDisk(Configuration conf) throws IOException {
+    FSImage fsImage = new FSImage(conf);
+    FSNamesystem namesystem = new FSNamesystem(conf, fsImage);
+
+    long loadStart = now();
+    StartupOption startOpt = NameNode.getStartupOption(conf);
+    namesystem.loadFSImage(startOpt, fsImage);
+    long timeTakenToLoadFSImage = now() - loadStart;
+    LOG.info("Finished loading FSImage in " + timeTakenToLoadFSImage + " msecs");
+    NameNode.getNameNodeMetrics().setFsImageLoadTime(
+                              (int) timeTakenToLoadFSImage);
+    return namesystem;
+  }
+
+  /**
+   * Create an FSNamesystem associated with the specified image.
+   * 
+   * Note that this does not load any data off of disk -- if you would
+   * like that behavior, use {@link #loadFromDisk(Configuration)}
+
+   * @param fnImage The FSImage to associate with
+   * @param conf configuration
+   * @throws IOException on bad configuration
+   */
+  FSNamesystem(Configuration conf, FSImage fsImage) throws IOException {
-      initialize(conf, null);
+      initialize(conf, fsImage);
-    nnResourceChecker = new NameNodeResourceChecker(conf);
-    checkAvailableResources();
-    this.registerMBean(); // register the MBean for the FSNamesystemState
-    if(fsImage == null) {
-      this.dir = new FSDirectory(this, conf);
-      StartupOption startOpt = NameNode.getStartupOption(conf);
-      this.dir.loadFSImage(startOpt);
-      long timeTakenToLoadFSImage = now() - systemStart;
-      LOG.info("Finished loading FSImage in " + timeTakenToLoadFSImage + " msecs");
-      NameNode.getNameNodeMetrics().setFsImageLoadTime(
-                                (int) timeTakenToLoadFSImage);
-    } else {
-      this.dir = new FSDirectory(fsImage, this, conf);
-    }
+    this.dir = new FSDirectory(fsImage, this, conf);
+  void loadFSImage(StartupOption startOpt, FSImage fsImage)
+      throws IOException {
+    // format before starting up if requested
+    if (startOpt == StartupOption.FORMAT) {
+      
+      fsImage.format(this, fsImage.getStorage().determineClusterId());// reuse current id
+
+      startOpt = StartupOption.REGULAR;
+    }
+    boolean success = false;
+    try {
+      if (fsImage.recoverTransitionRead(startOpt, this)) {
+        fsImage.saveNamespace(this);
+      }
+      fsImage.openEditLog();
+      
+      success = true;
+    } finally {
+      if (!success) {
+        fsImage.close();
+      }
+    }
+    dir.imageLoadComplete();
+  }
+
+    this.registerMBean(); // register the MBean for the FSNamesystemState
+
+      nnResourceChecker = new NameNodeResourceChecker(conf);
+      checkAvailableResources();
+
-  /**
-   * dirs is a list of directories where the filesystem directory state 
-   * is stored
-   */
-  FSNamesystem(FSImage fsImage, Configuration conf) throws IOException {
-    this.fsLock = new ReentrantReadWriteLock(true);
-    this.blockManager = new BlockManager(this, conf);
-    setConfigurationParameters(conf);
-    this.dir = new FSDirectory(fsImage, this, conf);
-    dtSecretManager = createDelegationTokenSecretManager(conf);
-  }
-
-  /**
-   * Create FSNamesystem for {@link BackupNode}.
-   * Should do everything that would be done for the NameNode,
-   * except for loading the image.
-   * 
-   * @param bnImage {@link BackupImage}
-   * @param conf configuration
-   * @throws IOException
-   */
-  FSNamesystem(Configuration conf, BackupImage bnImage) throws IOException {
-    try {
-      initialize(conf, bnImage);
-    } catch(IOException e) {
-      LOG.error(getClass().getSimpleName() + " initialization failed.", e);
-      close();
-      throw e;
-    }
-  }
-      return new NamespaceInfo(dir.fsImage.getStorage().getNamespaceID(),
-          getClusterId(), getBlockPoolId(),
-          dir.fsImage.getStorage().getCTime(),
-          upgradeManager.getUpgradeVersion());
+      return unprotectedGetNamespaceInfo();
+   * Version of {@see #getNamespaceInfo()} that is not protected by a lock.
+   */
+  NamespaceInfo unprotectedGetNamespaceInfo() {
+    return new NamespaceInfo(dir.fsImage.getStorage().getNamespaceID(),
+        getClusterId(), getBlockPoolId(),
+        dir.fsImage.getStorage().getCTime(),
+        upgradeManager.getUpgradeVersion());
+  }
+
+  /**
+    Preconditions.checkState(nnResourceChecker != null,
+        "nnResourceChecker not initialized");
-      getFSImage().saveNamespace();
+      getFSImage().saveNamespace(this);

INS26 INS40 INS31 INS31 INS31 MOV29 INS83 INS83 INS43 INS42 MOV44 MOV43 MOV8 INS44 MOV43 INS39 INS42 INS44 MOV44 MOV43 INS8 INS43 INS42 INS8 INS29 UPD42 MOV8 INS65 UPD65 INS65 INS65 INS42 INS60 INS60 INS60 INS41 INS65 MOV65 INS65 MOV43 INS43 INS42 MOV21 INS43 INS42 INS25 INS60 INS54 MOV21 MOV21 UPD42 MOV42 MOV21 INS54 INS65 INS21 INS66 INS66 INS42 UPD66 UPD66 INS66 INS42 INS66 INS43 INS59 INS43 INS59 INS39 INS59 INS42 UPD66 INS66 INS66 INS65 INS42 INS66 INS42 INS66 INS42 UPD42 MOV42 INS27 INS8 INS39 INS59 INS8 INS8 INS8 MOV8 INS66 INS65 INS66 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS68 MOV22 MOV14 INS42 INS40 MOV21 MOV21 INS42 INS9 INS25 INS21 INS21 INS25 UPD42 UPD42 MOV21 MOV21 INS41 INS66 INS42 INS42 INS27 INS45 UPD43 MOV43 MOV42 INS43 INS42 INS42 INS42 UPD42 INS42 INS69 MOV42 MOV52 MOV42 INS32 INS32 INS8 INS32 INS7 INS38 INS8 INS32 INS42 INS33 UPD42 INS42 INS43 INS42 MOV42 INS42 INS42 INS52 INS32 UPD42 INS40 INS42 INS42 INS42 INS52 INS21 INS42 INS42 INS42 INS9 INS42 INS21 UPD42 MOV42 INS52 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL43 DEL9 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL43 DEL52 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL42 DEL65 DEL65 DEL42 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL45 DEL27 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL54 DEL8