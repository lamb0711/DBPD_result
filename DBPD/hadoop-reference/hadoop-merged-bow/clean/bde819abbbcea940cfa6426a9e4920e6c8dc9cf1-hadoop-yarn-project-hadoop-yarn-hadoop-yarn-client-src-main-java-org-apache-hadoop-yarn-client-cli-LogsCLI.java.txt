YARN-5089. Improve "yarn log" command-line "logFiles" option to support
regex. Contributed by Xuan Gong

+import java.util.Collection;
-
+import java.util.Set;
+import java.util.regex.Pattern;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogsRequest;
+    List<String> logs = new ArrayList<String>();
+    if (fetchAllLogFiles(logFiles)) {
+      logs.add(".*");
+    } else if (logFiles != null && logFiles.length > 0) {
+      logs = Arrays.asList(logFiles);
+    }
+
-        isApplicationFinished(appState), appOwner,
-        nodeAddress, null, containerIdStr);
+        isApplicationFinished(appState), appOwner, nodeAddress, null,
+        containerIdStr, localDir, logs);
-          logFiles, logCliHelper, localDir);
+          logCliHelper);
-      return fetchContainerLogs(request, logFiles,
-          logCliHelper, localDir);
+      return fetchContainerLogs(request, logCliHelper);
-        resultCode = fetchApplicationLogs(appId, appOwner,
-            logCliHelper, localDir);
+        resultCode = fetchApplicationLogs(request, logCliHelper);
-      if(logs.contains("ALL")) {
+      if(logs.contains("ALL") || logs.contains(".*")) {
-  private String[] getContainerLogFiles(Configuration conf,
+  private List<String> getContainerLogFiles(Configuration conf,
-    return logFiles.toArray(new String[0]);
+    return logFiles;
-      ContainerLogsRequest request, String[] logFiles,
-      LogCLIHelpers logCliHelper, String localDir) throws IOException {
-    String appId = request.getAppId().toString();
+      ContainerLogsRequest request, LogCLIHelpers logCliHelper)
+      throws IOException {
-    String[] requestedLogFiles = logFiles;
+    String localDir = request.getOutputLocalDir();
-    String appOwner = request.getAppOwner();
-      if (fetchAllLogFiles(logFiles)) {
-        requestedLogFiles =
-            getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);
+      // filter the log files based on the given --logFiles pattern
+      List<String> allLogs=
+          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);
+      List<String> matchedFiles = getMatchedLogFiles(
+          request, allLogs, true);
+      if (matchedFiles.isEmpty()) {
+        return;
+      ContainerLogsRequest newOptions = new ContainerLogsRequest(request);
+      newOptions.setLogTypes(matchedFiles);
+
-      for (String logFile : requestedLogFiles) {
+      for (String logFile : newOptions.getLogTypes()) {
+      // for the case, we have already uploaded partial logs in HDFS
+      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);
-    // for the case, we have already uploaded partial logs in HDFS
-    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,
-        appOwner, Arrays.asList(requestedLogFiles), false, localDir);
-  private void printContainerLogsForFinishedApplication(
-      ContainerLogsRequest request, String[] logFiles,
-      LogCLIHelpers logCliHelper, String localDir)
+  private int printContainerLogsForFinishedApplication(
+      ContainerLogsRequest request, LogCLIHelpers logCliHelper)
-    logCliHelper.dumpAContainersLogsForALogType(request.getAppId().toString(),
-        request.getContainerId().toString(), request.getNodeId(),
-        request.getAppOwner(), logFiles != null ? Arrays.asList(logFiles)
-        : null, localDir);
+    ContainerLogsRequest newOptions = getMatchedLogOptions(
+        request, logCliHelper);
+    if (newOptions == null) {
+      return -1;
+    }
+    return logCliHelper.dumpAContainersLogsForALogType(newOptions);
-      String appId, String containerId, String[] logFiles,
-      LogCLIHelpers logCliHelper, String appOwner, String localDir)
+      ContainerLogsRequest request, LogCLIHelpers logCliHelper)
-    return logCliHelper.dumpAContainersLogsForALogTypeWithoutNodeId(appId,
-        containerId, appOwner, logFiles != null ?
-        Arrays.asList(logFiles) : null, localDir);
+    ContainerLogsRequest newOptions = getMatchedLogOptions(
+        request, logCliHelper);
+    if (newOptions == null) {
+      return -1;
+    }
+    return logCliHelper.dumpAContainersLogsForALogTypeWithoutNodeId(
+        newOptions);
-      String[] logFiles, LogCLIHelpers logCliHelper, String localDir)
-      throws Exception {
+      LogCLIHelpers logCliHelper) throws Exception {
-        outputAMContainerLogs(amRequest, conf, logFiles,
-            logCliHelper, localDir);
+        outputAMContainerLogs(amRequest, conf, logCliHelper);
-              logFiles, logCliHelper, localDir);
+              logCliHelper);
-                logFiles, logCliHelper, localDir);
+                logCliHelper);
-      Configuration conf, String[] logFiles,
-      LogCLIHelpers logCliHelper, String localDir) throws Exception {
+      Configuration conf, LogCLIHelpers logCliHelper) throws Exception {
-          String[] requestedLogFilesList = null;
-          if(!fetchAllLogFiles(logFiles)) {
-            requestedLogFilesList = logFiles;
-          }
-              requestedLogFilesList, logCliHelper, localDir);
+              logCliHelper);
-        String[] requestedLogFiles = logFiles;
-        // fetch all the log files for the AM
-        if (fetchAllLogFiles(logFiles)) {
-          requestedLogFiles =
-              getContainerLogFiles(getConf(), containerId, nodeHttpAddress);
-        }
-            request, requestedLogFiles, logCliHelper, localDir);
+            request, logCliHelper);
-      logCliHelper.printLogMetadata(request.getAppId(),
-          request.getContainerId(), request.getNodeId(),
-          request.getAppOwner(), System.out, System.err);
+      logCliHelper.printLogMetadata(request, System.out, System.err);
-      logCliHelper.printNodesList(request.getAppId(), request.getAppOwner(),
-          System.out, System.err);
+      logCliHelper.printNodesList(request, System.out, System.err);
-        + "log files for the container.");
+        + "log files for the container. It also supports Java Regex.");
-      List<String> amContainersList, String[] logFiles,
-      LogCLIHelpers logCliHelper, String localDir) throws Exception {
+      List<String> amContainersList, LogCLIHelpers logCliHelper)
+      throws Exception {
+    List<String> logFiles = request.getLogTypes();
-    if (logFiles == null || logFiles.length == 0) {
-      logFiles = new String[] {"syslog"};
+    if (logFiles == null || logFiles.isEmpty()) {
+      logFiles = Arrays.asList("syslog");
+    request.setLogTypes(logFiles);
-          logFiles, logCliHelper, localDir);
+          logCliHelper);
-            logFiles, logCliHelper, localDir);
+            logCliHelper);
-      String[] logFiles, LogCLIHelpers logCliHelper, String localDir)
-      throws IOException {
+      LogCLIHelpers logCliHelper) throws IOException {
+    List<String> logFiles = request.getLogTypes();
-      // if user specified "ALL" as the logFiles param, pass null
+      // if user specified "ALL" as the logFiles param, pass empty list
-      List<String> logs;
-      if (logFiles == null) {
-        logs = null;
-      } else if (fetchAllLogFiles(logFiles)) {
-        logs = null;
-      } else {
-        logs = Arrays.asList(logFiles);
-      }
-      return logCliHelper.dumpAContainersLogsForALogType(appIdStr,
-          containerIdStr, nodeAddress, appOwner, logs, localDir);
+      return printContainerLogsForFinishedApplication(
+          request, logCliHelper);
-        String[] requestedLogFiles = logFiles;
-        if(fetchAllLogFiles(logFiles)) {
-          requestedLogFiles = null;
-        }
-            appIdStr, containerIdStr, requestedLogFiles, logCliHelper,
-            appOwner, localDir);
+            request, logCliHelper);
-      if (logFiles == null || logFiles.length == 0) {
-        logFiles = new String[] {"syslog"};
+      // if we do not specify the value for CONTAINER_LOG_FILES option,
+      // we will only output syslog
+      if (logFiles == null || logFiles.isEmpty()) {
+        logFiles = Arrays.asList("syslog");
+      request.setLogTypes(logFiles);
-          logFiles, logCliHelper, localDir);
+          logCliHelper);
-      String[] requestedLogFiles = logFiles;
-      if(fetchAllLogFiles(logFiles)) {
-        requestedLogFiles = null;
-      }
-      printContainerLogsForFinishedApplication(request,
-          requestedLogFiles, logCliHelper, localDir);
+      resultCode = printContainerLogsForFinishedApplication(
+          request, logCliHelper);
-  private int fetchApplicationLogs(ApplicationId appId, String appOwner,
-      LogCLIHelpers logCliHelper, String localDir) throws IOException {
-    int resultCode =
-        logCliHelper.dumpAllContainersLogs(appId, appOwner, localDir);
+  private int fetchApplicationLogs(ContainerLogsRequest options,
+      LogCLIHelpers logCliHelper) throws IOException {
+    // TODO: YARN-5141. To get container logs for the Running applications.
+    int resultCode = 0;
+    ContainerLogsRequest newOptions = getMatchedLogOptions(
+        options, logCliHelper);
+    if (newOptions == null) {
+      resultCode = -1;
+    } else {
+      resultCode =
+          logCliHelper.dumpAllContainersLogs(newOptions);
+    }
-          + appId + " with the appOwner: " + appOwner);
+          + options.getAppId() + " with the appOwner: "
+          + options.getAppOwner());
-  private static class ContainerLogsRequest {
-    private ApplicationId appId;
-    private String containerId;
-    private String nodeId;
-    private String nodeHttpAddress;
-    private String appOwner;
-    private boolean appFinished;
-
-    public ContainerLogsRequest(ContainerLogsRequest request) {
-      this.setAppId(request.getAppId());
-      this.setAppFinished(request.isAppFinished());
-      this.setAppOwner(request.getAppOwner());
-      this.setNodeId(request.getNodeId());
-      this.setNodeHttpAddress(request.getNodeHttpAddress());
-      this.setContainerId(request.getContainerId());
+  private ContainerLogsRequest getMatchedLogOptions(
+      ContainerLogsRequest request, LogCLIHelpers logCliHelper)
+      throws IOException {
+    ContainerLogsRequest newOptions = new ContainerLogsRequest(request);
+    if (request.getLogTypes() != null && !request.getLogTypes().isEmpty()) {
+      List<String> matchedFiles = new ArrayList<String>();
+      if (!request.getLogTypes().contains(".*")) {
+        Set<String> files = logCliHelper.listContainerLogs(request);
+        matchedFiles = getMatchedLogFiles(
+            request, files, true);
+        if (matchedFiles.isEmpty()) {
+          return null;
+        }
+      }
+      newOptions.setLogTypes(matchedFiles);
+    return newOptions;
+  }
-    public ContainerLogsRequest(ApplicationId applicationId,
-        boolean isAppFinished, String owner,
-        String address, String httpAddress, String container) {
-      this.setAppId(applicationId);
-      this.setAppFinished(isAppFinished);
-      this.setAppOwner(owner);
-      this.setNodeId(address);
-      this.setNodeHttpAddress(httpAddress);
-      this.setContainerId(container);
+  private List<String> getMatchedLogFiles(ContainerLogsRequest options,
+      Collection<String> candidate, boolean printError) throws IOException {
+    List<String> matchedFiles = new ArrayList<String>();
+    List<String> filePattern = options.getLogTypes();
+    for (String file : candidate) {
+      if (isFileMatching(file, filePattern)) {
+        matchedFiles.add(file);
+      }
+    if (matchedFiles.isEmpty()) {
+      if (printError) {
+        System.err.println("Can not find any log file matching the pattern: "
+            + options.getLogTypes() + " for the application: "
+            + options.getAppId());
+      }
+    }
+    return matchedFiles;
+  }
-    public ApplicationId getAppId() {
-      return appId;
+  private boolean isFileMatching(String fileType,
+      List<String> logTypes) {
+    for (String logType : logTypes) {
+      Pattern filterPattern = Pattern.compile(logType);
+      boolean match = filterPattern.matcher(fileType).find();
+      if (match) {
+        return true;
+      }
-
-    public void setAppId(ApplicationId appId) {
-      this.appId = appId;
-    }
-
-    public String getContainerId() {
-      return containerId;
-    }
-
-    public void setContainerId(String containerId) {
-      this.containerId = containerId;
-    }
-
-    public String getNodeId() {
-      return nodeId;
-    }
-
-    public void setNodeId(String nodeAddress) {
-      this.nodeId = nodeAddress;
-    }
-
-    public String getAppOwner() {
-      return appOwner;
-    }
-
-    public void setAppOwner(String appOwner) {
-      this.appOwner = appOwner;
-    }
-
-    public String getNodeHttpAddress() {
-      return nodeHttpAddress;
-    }
-
-    public void setNodeHttpAddress(String nodeHttpAddress) {
-      this.nodeHttpAddress = nodeHttpAddress;
-    }
-
-    public boolean isAppFinished() {
-      return appFinished;
-    }
-
-    public void setAppFinished(boolean appFinished) {
-      this.appFinished = appFinished;
-    }
+    return false;

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS74 MOV60 UPD39 INS43 INS8 INS8 INS83 INS43 INS42 MOV44 INS44 INS43 INS8 UPD83 MOV83 INS74 UPD42 MOV42 INS44 MOV44 INS44 MOV43 INS8 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 INS44 INS8 INS60 INS25 INS43 INS43 UPD42 MOV42 INS60 INS25 INS41 UPD43 UPD42 INS60 INS25 INS41 INS60 INS21 MOV60 UPD43 UPD42 INS60 INS60 INS25 MOV25 MOV41 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS43 INS43 INS42 INS74 UPD42 INS39 INS42 INS60 INS60 INS70 INS25 MOV41 UPD42 INS74 INS42 INS70 INS41 INS74 INS59 MOV32 INS8 INS25 INS42 MOV42 INS42 MOV43 INS43 INS59 INS27 INS8 INS32 UPD42 INS43 INS59 INS27 INS8 INS32 MOV43 INS74 INS59 INS32 INS8 INS8 UPD42 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS43 INS59 INS27 INS8 INS42 UPD42 MOV42 INS42 INS42 INS43 MOV43 INS74 INS59 INS74 INS59 MOV44 INS42 INS8 INS32 INS8 UPD42 INS43 INS43 MOV44 INS42 INS8 INS9 INS43 INS43 INS42 INS14 INS21 INS27 MOV8 UPD42 INS60 INS60 INS25 INS60 MOV21 INS21 INS42 INS42 INS32 UPD42 MOV42 MOV33 INS41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 MOV33 INS41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV41 MOV41 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 INS32 MOV25 MOV21 INS21 INS21 INS42 INS34 UPD42 MOV42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS14 INS27 INS38 INS60 INS25 MOV21 UPD42 MOV42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 UPD42 INS25 INS42 INS42 INS25 UPD42 MOV42 MOV42 UPD42 INS60 INS60 INS25 INS42 INS42 INS74 INS32 MOV27 INS27 INS42 INS42 INS27 UPD42 INS74 INS59 INS74 INS59 INS32 INS8 INS43 INS59 INS32 INS32 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 INS38 INS42 INS42 MOV42 INS38 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS7 INS7 INS43 INS42 INS32 INS33 INS32 INS74 INS59 INS38 INS8 INS42 MOV42 INS74 INS42 MOV42 INS42 INS42 INS32 INS8 INS42 INS8 INS43 INS59 INS39 INS59 INS42 INS8 INS43 MOV43 INS42 INS42 INS45 INS42 INS33 INS40 INS34 MOV32 INS32 INS43 INS43 INS42 MOV32 INS43 INS43 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS34 INS34 MOV42 MOV42 UPD45 INS32 MOV32 UPD42 UPD42 UPD42 MOV27 INS32 UPD42 UPD42 INS42 MOV32 INS42 INS42 UPD42 MOV42 INS32 INS42 INS38 INS42 INS32 INS42 MOV42 UPD42 MOV42 MOV32 INS42 INS43 INS43 INS42 INS14 INS32 INS60 INS21 INS25 INS42 UPD42 UPD42 INS43 MOV43 INS42 INS42 INS42 INS21 INS21 UPD42 MOV42 INS42 INS32 INS42 INS32 INS41 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS9 INS43 INS42 INS42 INS42 INS45 INS42 INS42 MOV42 MOV42 MOV42 INS34 MOV42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 INS42 INS42 INS74 MOV32 INS42 INS45 INS74 INS59 INS7 INS32 INS8 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS9 INS42 MOV32 INS32 INS42 INS42 INS42 INS42 INS43 MOV43 UPD42 INS43 MOV43 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS41 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS45 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS9 INS33 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL59 DEL60 DEL42 DEL7 DEL32 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL42 DEL32 DEL21 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL33 DEL16 DEL42 DEL32 DEL21 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL27 DEL32 DEL33 DEL16 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL40 DEL34 DEL27 DEL42 DEL43 DEL85 DEL5 DEL45 DEL4 DEL3 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL42 DEL43 DEL85 DEL5 DEL45 DEL4 DEL3 DEL42 DEL42 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL52 DEL43 DEL83 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL52 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL52 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL52 DEL42 DEL32 DEL32 DEL21 DEL52 DEL42 DEL32 DEL21 DEL52 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL52 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL32 DEL21 DEL52 DEL32 DEL21 DEL52 DEL32 DEL21 DEL52 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL43 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL8 DEL31 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL55