Merging r1544666 through r1547120 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1547122 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Date;
+
+import org.apache.hadoop.hdfs.DFSUtil;
+    private Expiration expiration;
-      return new CacheDirectiveInfo(id, path, replication, pool);
+      return new CacheDirectiveInfo(id, path, replication, pool, expiration);
+      this.expiration = directive.getExpiration();
+
+    /**
+     * Sets when the CacheDirective should expire. A
+     * {@link CacheDirectiveInfo.Expiration} can specify either an absolute or
+     * relative expiration time.
+     * 
+     * @param expiration when this CacheDirective should expire
+     * @return This builder, for call chaining
+     */
+    public Builder setExpiration(Expiration expiration) {
+      this.expiration = expiration;
+      return this;
+    }
+  }
+
+  /**
+   * Denotes a relative or absolute expiration time for a CacheDirective. Use
+   * factory methods {@link CacheDirectiveInfo.Expiration#newAbsolute(Date)} and
+   * {@link CacheDirectiveInfo.Expiration#newRelative(long)} to create an
+   * Expiration.
+   * <p>
+   * In either case, the server-side clock is used to determine when a
+   * CacheDirective expires.
+   */
+  public static class Expiration {
+
+    /** Denotes a CacheDirectiveInfo that never expires **/
+    public static final int EXPIRY_NEVER = -1;
+
+    /**
+     * Create a new relative Expiration.
+     * 
+     * @param ms how long until the CacheDirective expires, in milliseconds
+     * @return A relative Expiration
+     */
+    public static Expiration newRelative(long ms) {
+      return new Expiration(ms, true);
+    }
+
+    /**
+     * Create a new absolute Expiration.
+     * 
+     * @param date when the CacheDirective expires
+     * @return An absolute Expiration
+     */
+    public static Expiration newAbsolute(Date date) {
+      return new Expiration(date.getTime(), false);
+    }
+
+    /**
+     * Create a new absolute Expiration.
+     * 
+     * @param ms when the CacheDirective expires, in milliseconds since the Unix
+     *          epoch.
+     * @return An absolute Expiration
+     */
+    public static Expiration newAbsolute(long ms) {
+      return new Expiration(ms, false);
+    }
+
+    private final long ms;
+    private final boolean isRelative;
+
+    private Expiration(long ms, boolean isRelative) {
+      this.ms = ms;
+      this.isRelative = isRelative;
+    }
+
+    /**
+     * @return true if Expiration was specified as a relative duration, false if
+     *         specified as an absolute time.
+     */
+    public boolean isRelative() {
+      return isRelative;
+    }
+
+    /**
+     * @return The raw underlying millisecond value, either a relative duration
+     *         or an absolute time as milliseconds since the Unix epoch.
+     */
+    public long getMillis() {
+      return ms;
+    }
+
+    /**
+     * @return Expiration time as a {@link Date} object. This converts a
+     *         relative Expiration into an absolute Date based on the local
+     *         clock.
+     */
+    public Date getAbsoluteDate() {
+      return new Date(getAbsoluteMillis());
+    }
+
+    /**
+     * @return Expiration time in milliseconds from the Unix epoch. This
+     *         converts a relative Expiration into an absolute time based on the
+     *         local clock.
+     */
+    public long getAbsoluteMillis() {
+      if (!isRelative) {
+        return ms;
+      } else {
+        return new Date().getTime() + ms;
+      }
+    }
+
+    @Override
+    public String toString() {
+      if (isRelative) {
+        return DFSUtil.durationToString(ms);
+      }
+      return DFSUtil.dateToIso8601String(new Date(ms));
+    }
+  private final Expiration expiration;
-  CacheDirectiveInfo(Long id, Path path, Short replication, String pool) {
+  CacheDirectiveInfo(Long id, Path path, Short replication, String pool,
+      Expiration expiration) {
+    this.expiration = expiration;
-  
+
+  /**
+   * @return When this directive expires.
+   */
+  public Expiration getExpiration() {
+    return expiration;
+  }
+
+        append(getExpiration(), other.getExpiration()).
+        append(expiration).
-      prefix = ",";
+      prefix = ", ";
-      prefix = ",";
+      prefix = ", ";
-      prefix = ",";
+      prefix = ", ";
-      prefix = ",";
+      prefix = ", ";
+    }
+    if (expiration != null) {
+      builder.append(prefix).append("expiration: ").append(expiration);
+      prefix = ", ";

INS26 INS26 INS40 INS40 INS55 INS23 INS31 INS23 INS31 INS29 INS83 INS83 INS42 INS23 INS31 INS31 INS31 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS44 INS29 INS83 INS43 INS42 INS8 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS43 INS42 INS21 INS65 INS42 INS41 INS25 INS42 INS42 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS21 INS41 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS65 INS42 INS38 INS65 INS65 INS65 INS42 INS39 INS42 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS42 INS39 INS42 INS41 INS42 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS65 INS41 INS65 INS41 INS65 INS42 INS41 INS65 INS25 INS42 INS42 INS25 INS41 INS42 INS7 INS66 INS42 INS32 INS32 INS27 INS8 INS7 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS7 INS52 INS68 INS68 INS66 INS34 INS66 INS42 INS66 INS66 INS14 INS66 INS42 INS66 INS66 INS42 INS14 INS66 INS42 INS66 INS66 INS66 INS14 INS7 INS7 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS66 INS14 INS66 INS66 INS66 INS38 INS8 INS8 INS42 INS8 INS32 INS22 INS42 MOV32 INS42 MOV32 INS42 INS42 INS33 INS21 INS21 INS42 INS22 INS32 INS40 INS22 INS42 INS40 INS42 INS69 INS40 INS42 INS69 INS43 INS42 INS9 INS43 INS32 INS9 INS43 INS42 INS9 INS22 INS42 INS22 INS42 INS42 INS43 INS32 INS42 INS41 INS41 INS41 INS42 INS42 INS14 INS52 INS42 INS42 INS32 INS32 UPD42 INS42 INS32 INS7 INS52 INS42 INS42 INS42 INS52 INS42 INS43 INS39 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS27 INS32 INS43 INS42 UPD42 MOV42 INS42 INS42 UPD45 UPD45 UPD45 UPD45 INS32 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS14 INS42 INS42 INS42 INS42 INS43 INS42