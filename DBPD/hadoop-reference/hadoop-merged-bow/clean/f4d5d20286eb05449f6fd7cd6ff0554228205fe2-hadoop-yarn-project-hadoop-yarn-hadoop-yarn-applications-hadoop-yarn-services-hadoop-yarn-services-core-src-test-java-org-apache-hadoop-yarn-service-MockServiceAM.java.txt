YARN-7486. Race condition in service AM that can cause NPE. Contributed by Jian He

-import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
-import org.apache.hadoop.yarn.api.records.ApplicationId;
-import org.apache.hadoop.yarn.api.records.Container;
-import org.apache.hadoop.yarn.api.records.ContainerId;
-import org.apache.hadoop.yarn.api.records.FinalApplicationStatus;
-import org.apache.hadoop.yarn.api.records.NodeId;
-import org.apache.hadoop.yarn.api.records.Priority;
-import org.apache.hadoop.yarn.api.records.Resource;
+
+import org.apache.hadoop.yarn.api.records.*;
+import org.apache.hadoop.yarn.service.component.instance.ComponentInstance;
+import org.apache.hadoop.yarn.service.component.instance.ComponentInstanceState;
+import org.apache.hadoop.yarn.util.Records;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
+import java.util.*;
+  final List<ContainerStatus> failedContainers =
+      Collections.synchronizedList(new LinkedList<>());
+            // add new containers if any
-                return builder.build();
-                return builder.allocatedContainers(allocatedContainers).build();
+                builder.allocatedContainers(allocatedContainers);
+
+            // add failed containers if any
+            synchronized (failedContainers) {
+              if (!failedContainers.isEmpty()) {
+                List<ContainerStatus> failed =
+                    new LinkedList<>(failedContainers);
+                failedContainers.clear();
+                builder.completedContainersStatuses(failed);
+              }
+            }
+            return builder.build();
+  public void feedFailedContainerToComp(Service service, int id, String
+      compName) {
+    ApplicationId applicationId = ApplicationId.fromString(service.getId());
+    ContainerId containerId = ContainerId
+        .newContainerId(ApplicationAttemptId.newInstance(applicationId, 1), id);
+    ContainerStatus containerStatus = Records.newRecord(ContainerStatus.class);
+    containerStatus.setContainerId(containerId);
+    synchronized (failedContainers) {
+      failedContainers.add(containerStatus);
+    }
+  }
+
+
+
+
+  public ComponentInstance getCompInstance(String compName, String
+      instanceName) {
+    return context.scheduler.getAllComponents().get(compName)
+        .getComponentInstance(instanceName);
+  }
+
+  public void waitForCompInstanceState(ComponentInstance instance,
+      ComponentInstanceState state)
+      throws TimeoutException, InterruptedException {
+    GenericTestUtils.waitFor(new Supplier<Boolean>() {
+      @Override
+      public Boolean get() {
+        return instance.getState().equals(state);
+      }
+    }, 1000, 20000);
+  }

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS43 INS43 INS42 INS32 INS43 INS42 INS39 INS42 INS43 INS42 INS60 INS60 INS60 INS21 INS51 INS42 INS43 INS42 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS74 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS14 INS34 INS34 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS57 INS32 INS32 INS42 INS42 INS74 INS1 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS42 INS42 INS40 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS41 INS32 INS32 INS42 INS42 INS42 INS42 INS51 MOV41 INS42 INS8 INS25 INS38 INS8 INS21 INS32 INS60 INS21 INS21 MOV32 INS42 INS42 INS74 INS59 INS32 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS43 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL32 DEL41