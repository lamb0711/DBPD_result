YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.

-import org.apache.commons.math3.util.Pair;
-      "%20s\t%20s" + System.getProperty("line.separator");
+      "%30s\t%30s\t%30s" + System.getProperty("line.separator");
-      emptyLogDir(getRemoteAppLogDir(appId, appOwner).toString());
+      emptyLogDir(LogAggregationUtils.getRemoteAppLogDir(conf, appId, appOwner)
+          .toString());
-    boolean getAllContainers = (containerIdStr == null);
-    String nodeIdStr = (nodeId == null) ? null
-        : LogAggregationUtils.getNodeString(nodeId);
-    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
-        appId, appOwner);
-    if (nodeFiles == null) {
+    List<ContainerLogMeta> containersLogMeta;
+    try {
+      containersLogMeta = LogToolUtils.getContainerLogMetaFromRemoteFS(
+          conf, appId, containerIdStr, nodeId, appOwner);
+    } catch (Exception ex) {
+      err.println(ex.getMessage());
-    boolean foundAnyLogs = false;
-    while (nodeFiles.hasNext()) {
-      FileStatus thisNodeFile = nodeFiles.next();
-      if (nodeIdStr != null) {
-        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {
-          continue;
-        }
-      }
-      if (!thisNodeFile.getPath().getName()
-          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
-        AggregatedLogFormat.LogReader reader =
-            new AggregatedLogFormat.LogReader(getConf(),
-            thisNodeFile.getPath());
-        try {
-          DataInputStream valueStream;
-          LogKey key = new LogKey();
-          valueStream = reader.next(key);
-          while (valueStream != null) {
-            if (getAllContainers || (key.toString().equals(containerIdStr))) {
-              String containerString = String.format(CONTAINER_ON_NODE_PATTERN,
-                  key, thisNodeFile.getPath().getName());
-              out.println(containerString);
-              out.println("Log Upload Time:"
-                  + thisNodeFile.getModificationTime());
-              out.println(StringUtils.repeat("=", containerString.length()));
-              out.printf(PER_LOG_FILE_INFO_PATTERN, "LogType", "LogLength");
-              out.println(StringUtils.repeat("=", containerString.length()));
-              while (true) {
-                try {
-                  Pair<String, String> logMeta =
-                      LogReader.readContainerMetaDataAndSkipData(
-                          valueStream, out);
-                  out.printf(PER_LOG_FILE_INFO_PATTERN,
-                      logMeta.getFirst(), logMeta.getSecond());
-                } catch (EOFException eof) {
-                  break;
-                }
-              }
-              foundAnyLogs = true;
-              if (!getAllContainers) {
-                break;
-              }
-            }
-            // Next container
-            key = new LogKey();
-            valueStream = reader.next(key);
-          }
-        } finally {
-          reader.close();
-        }
-      }
-    }
-    if (!foundAnyLogs) {
+    if (containersLogMeta.isEmpty()) {
+
+    for (ContainerLogMeta containerLogMeta : containersLogMeta) {
+      String containerString = String.format(CONTAINER_ON_NODE_PATTERN,
+          containerLogMeta.getContainerId(), containerLogMeta.getNodeId());
+      out.println(containerString);
+      out.println(StringUtils.repeat("=", containerString.length()));
+      out.printf(PER_LOG_FILE_INFO_PATTERN, "LogFile", "LogLength",
+          "LastModificationTime");
+      out.println(StringUtils.repeat("=", containerString.length()));
+      for (PerContainerLogFileInfo logMeta : containerLogMeta
+          .getContainerLogMeta()) {
+        out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(),
+            logMeta.getFileSize(), logMeta.getLastModifiedTime());
+      }
+    }
-    Path remoteAppLogDir = getRemoteAppLogDir(appId, appOwner);
-      Path qualifiedLogDir =
-          FileContext.getFileContext(getConf()).makeQualified(remoteAppLogDir);
-      nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(),
-          getConf()).listStatus(remoteAppLogDir);
+      nodeFiles = LogAggregationUtils.getRemoteNodeFileDir(
+          conf, appId, appOwner);
-      logDirNotExist(remoteAppLogDir.toString());
+      logDirNotExist(LogAggregationUtils.getRemoteAppLogDir(
+          conf, appId, appOwner).toString());
-      logDirNoAccessPermission(remoteAppLogDir.toString(), appOwner,
-        ace.getMessage());
+      logDirNoAccessPermission(LogAggregationUtils.getRemoteAppLogDir(
+          conf, appId, appOwner).toString(), appOwner,
+          ace.getMessage());
-      logDirIOError(remoteAppLogDir.toString(), ioe.getMessage());
+      logDirIOError(LogAggregationUtils.getRemoteAppLogDir(
+          conf, appId, appOwner).toString(), ioe.getMessage());
-  private Path getRemoteAppLogDir(ApplicationId appId, String appOwner) {
-    Path remoteRootLogDir = new Path(getConf().get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String user = appOwner;
-    String logDirSuffix = LogAggregationUtils
-        .getRemoteNodeLogDirSuffix(getConf());
-    // TODO Change this to get a list of files from the LAS.
-    return LogAggregationUtils.getRemoteAppLogDir(
-        remoteRootLogDir, appId, user, logDirSuffix);
-  }
-
-                      valueStream, null).getFirst();
+                      valueStream).getFirst();

INS54 INS70 UPD45 UPD74 INS8 INS12 INS32 INS44 INS42 INS8 UPD43 UPD43 INS42 INS21 INS44 INS8 INS42 INS42 INS43 INS42 MOV60 MOV21 MOV21 MOV21 MOV21 INS70 UPD42 UPD42 INS7 INS43 INS42 INS21 INS41 UPD42 MOV42 INS44 INS32 INS8 INS42 INS32 INS42 INS32 INS38 UPD45 INS45 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS21 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS34 MOV32 INS32 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV32 MOV32 INS32 INS32 INS32 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 DEL40 DEL26 DEL39 DEL42 DEL42 DEL33 DEL27 DEL36 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL36 DEL33 DEL42 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL34 DEL38 DEL41 DEL8 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL38 DEL18 DEL8 DEL25 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL40 DEL32 DEL38 DEL40 DEL43 DEL42 DEL40 DEL43 DEL32 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL36 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL9 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL10 DEL8 DEL12 DEL54 DEL8 DEL61 DEL42 DEL9 DEL7 DEL21 DEL42 DEL38 DEL10 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL8 DEL61 DEL42 DEL38 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL40 DEL40 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL33