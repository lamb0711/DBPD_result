MAPREDUCE-6052. Supported overriding the default container-log4j.properties file per job. Contributed by Junping Du.

+import java.io.FileNotFoundException;
-
+    
+    addLog4jToDistributedCache(job, submitJobDir);
+    
-    // get DelegationToken for each cached file
+    // get DelegationToken for cached file
+  // copy user specified log4j.property file in local 
+  // to HDFS with putting on distributed cache and adding its parent directory 
+  // to classpath.
+  @SuppressWarnings("deprecation")
+  private void copyLog4jPropertyFile(Job job, Path submitJobDir,
+      short replication) throws IOException {
+    Configuration conf = job.getConfiguration();
+
+    String file = validateFilePath(
+        conf.get(MRJobConfig.MAPREDUCE_JOB_LOG4J_PROPERTIES_FILE), conf);
+    LOG.debug("default FileSystem: " + jtFs.getUri());
+    FsPermission mapredSysPerms = 
+      new FsPermission(JobSubmissionFiles.JOB_DIR_PERMISSION);
+    if (!jtFs.exists(submitJobDir)) {
+      throw new IOException("Cannot find job submission directory! " 
+          + "It should just be created, so something wrong here.");
+    }
+    
+    Path fileDir = JobSubmissionFiles.getJobLog4jFile(submitJobDir);
+
+    // first copy local log4j.properties file to HDFS under submitJobDir
+    if (file != null) {
+      FileSystem.mkdirs(jtFs, fileDir, mapredSysPerms);
+      URI tmpURI = null;
+      try {
+        tmpURI = new URI(file);
+      } catch (URISyntaxException e) {
+        throw new IllegalArgumentException(e);
+      }
+      Path tmp = new Path(tmpURI);
+      Path newPath = copyRemoteFiles(fileDir, tmp, conf, replication);
+      DistributedCache.addFileToClassPath(new Path(newPath.toUri().getPath()), conf);
+    }
+  }
+  
+  /**
+   * takes input as a path string for file and verifies if it exist. 
+   * It defaults for file:/// if the files specified do not have a scheme.
+   * it returns the paths uri converted defaulting to file:///.
+   * So an input of  /home/user/file1 would return file:///home/user/file1
+   * @param file
+   * @param conf
+   * @return
+   */
+  private String validateFilePath(String file, Configuration conf) 
+      throws IOException  {
+    if (file == null) {
+      return null;
+    }
+    if (file.isEmpty()) {
+      throw new IllegalArgumentException("File name can't be empty string");
+    }
+    String finalPath;
+    URI pathURI;
+    try {
+      pathURI = new URI(file);
+    } catch (URISyntaxException e) {
+      throw new IllegalArgumentException(e);
+    }
+    Path path = new Path(pathURI);
+    FileSystem localFs = FileSystem.getLocal(conf);
+    if (pathURI.getScheme() == null) {
+      //default to the local file system
+      //check if the file exists or not first
+      if (!localFs.exists(path)) {
+        throw new FileNotFoundException("File " + file + " does not exist.");
+      }
+      finalPath = path.makeQualified(localFs.getUri(),
+          localFs.getWorkingDirectory()).toString();
+    }
+    else {
+      // check if the file exists in this file system
+      // we need to recreate this filesystem object to copy
+      // these files to the file system ResourceManager is running
+      // on.
+      FileSystem fs = path.getFileSystem(conf);
+      if (!fs.exists(path)) {
+        throw new FileNotFoundException("File " + file + " does not exist.");
+      }
+      finalPath = path.makeQualified(fs.getUri(),
+          fs.getWorkingDirectory()).toString();
+    }
+    return finalPath;
+  }
+  
-      job.setWorkingDirectory(jtFs.getWorkingDirectory());          
+      job.setWorkingDirectory(jtFs.getWorkingDirectory());
+      
+      
+
+      
+  
+  private void addLog4jToDistributedCache(Job job,
+      Path jobSubmitDir) throws IOException {
+    Configuration conf = job.getConfiguration();
+    String log4jPropertyFile =
+        conf.get(MRJobConfig.MAPREDUCE_JOB_LOG4J_PROPERTIES_FILE, "");
+    if (!log4jPropertyFile.isEmpty()) {
+      short replication = (short)conf.getInt(Job.SUBMIT_REPLICATION, 10);
+      copyLog4jPropertyFile(job, jobSubmitDir, replication);
+
+      // Set the working directory
+      if (job.getWorkingDirectory() == null) {
+        job.setWorkingDirectory(jtFs.getWorkingDirectory());
+      }
+    }
+  }

INS26 INS40 INS31 INS31 INS31 INS79 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS21 INS42 INS45 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS21 INS60 INS25 INS60 INS25 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS25 INS60 INS60 INS54 INS60 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS38 INS8 INS43 INS59 INS27 INS8 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS27 INS8 INS32 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS14 INS32 INS53 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS54 INS60 INS60 INS21 INS42 INS33 INS41 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS33 INS25 INS21 INS60 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS60 INS21 INS25 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS43 INS40 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS32 INS33 INS14 INS7 INS43 INS42 INS53 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS7 INS43 INS59 INS38 INS8 INS7 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS39 INS59 INS32 INS27 INS8 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS43 INS45 INS42 INS14 INS42 INS14 INS42 INS32 INS53 INS42 INS32 INS42 INS42 INS32 INS32 INS53 INS42 INS32 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS33 INS21 INS42 INS45 INS45 INS7 INS43 INS42 INS53 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS39 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS32 INS43 INS27 INS42 INS42 INS32 INS32 INS42 INS42 INS40 INS34 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42