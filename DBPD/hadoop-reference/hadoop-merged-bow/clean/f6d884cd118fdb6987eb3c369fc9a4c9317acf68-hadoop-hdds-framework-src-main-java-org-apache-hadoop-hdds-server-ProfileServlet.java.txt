HDDS-2110. Arbitrary file can be downloaded with the help of ProfilerServlet

Signed-off-by: Anu Engineer <aengineer@apache.org>

+import java.util.regex.Pattern;
+import com.google.common.annotations.VisibleForTesting;
+  public static final String FILE_PREFIX = "async-prof-pid-";
+
+  public static final Pattern FILE_NAME_PATTERN =
+      Pattern.compile(FILE_PREFIX + "[0-9]+-[0-9A-Za-z\\-_]+-[0-9]+\\.[a-z]+");
+  @VisibleForTesting
+  protected static String generateFileName(Integer pid, Output output,
+      Event event) {
+    return FILE_PREFIX + pid + "-" +
+        event.name().toLowerCase() + "-" + ID_GEN.incrementAndGet()
+        + "." +
+        output.name().toLowerCase();
+  }
+
+  @VisibleForTesting
+  protected static String validateFileName(String filename) {
+    if (!FILE_NAME_PATTERN.matcher(filename).matches()) {
+      throw new IllegalArgumentException(
+          "Invalid file name parameter " + filename + " doesn't match pattern "
+              + FILE_NAME_PATTERN);
+
+    }
+    return filename;
+  }
+
-    final int duration = getInteger(req, "duration", DEFAULT_DURATION_SECONDS);
+    final int duration =
+        getInteger(req, "duration", DEFAULT_DURATION_SECONDS);
+            //Should be in sync with FILE_NAME_PATTERN
-                OUTPUT_DIR.resolve("async-prof-pid-" + pid + "-" +
-                    event.name().toLowerCase() + "-" + ID_GEN.incrementAndGet()
-                    + "." +
-                    output.name().toLowerCase()).toFile();
+                OUTPUT_DIR.resolve(
+                    ProfileServlet.generateFileName(pid, output, event))
+                    .toFile();
-                    + "] profiling. This page will automatically redirect to " +
+                    + "] profiling. This page will automatically redirect to "
+                    +
+    ;
+    String safeFileName = validateFileName(fileName);
-        ProfileServlet.OUTPUT_DIR.resolve(fileName).toAbsolutePath()
-            .toFile();
+        ProfileServlet.OUTPUT_DIR
+            .resolve(safeFileName)
+            .toAbsolutePath().toFile();
-          "2," + req.getRequestURI() + "?file=" + fileName);
+          "2," + req.getRequestURI() + "?file=" + safeFileName);
-      if (fileName.endsWith(".svg")) {
+      if (safeFileName.endsWith(".svg")) {
-      } else if (fileName.endsWith(".tree")) {
+      } else if (safeFileName.endsWith(".tree")) {
-  private Integer getInteger(final HttpServletRequest req, final String param,
+  private Integer getInteger(final HttpServletRequest req,
+      final String param,
-    MEM_BREAKPOINT("mem:breakpoint"),
-    TRACE_TRACEPOINT("trace:tracepoint");
+    MEM_BREAKPOINT("mem-breakpoint"),
+    TRACE_TRACEPOINT("trace-tracepoint");

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS25 INS41 INS20 INS60 UPD45 UPD45 INS42 INS42 INS27 INS42 INS42 INS42 MOV27 INS42 INS38 INS8 INS42 INS43 INS59 INS42 INS45 INS42 INS32 INS53 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS27 UPD42 INS42 INS45 INS42 INS45 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 DEL45