Complete commit of prior merge.

The previous merge accidentally only committed the hdfs project instead of common and MR
as well.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1463203 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.server.api.protocolrecords.NodeHeartbeatResponse;
-import org.apache.hadoop.yarn.server.api.records.HeartbeatResponse;
+import org.apache.hadoop.yarn.server.api.protocolrecords.RegisterNodeManagerResponse;
-import org.apache.hadoop.yarn.server.api.records.RegistrationResponse;
-      //      this.hostName = InetAddress.getLocalHost().getCanonicalHostName();
-    this.resourceTracker = getRMClient();
-    LOG.info("Connecting to ResourceManager at " + this.rmAddress);
-    
-    RegisterNodeManagerRequest request = recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);
+    Configuration conf = getConfig();
+    long rmConnectWaitMS =
+        conf.getInt(
+            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,
+            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)
+        * 1000;
+    long rmConnectionRetryIntervalMS =
+        conf.getLong(
+            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,
+            YarnConfiguration
+                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)
+        * 1000;
+
+    if(rmConnectionRetryIntervalMS < 0) {
+      throw new YarnException("Invalid Configuration. " +
+          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +
+          " should not be negative.");
+    }
+
+    boolean waitForEver = (rmConnectWaitMS == -1000);
+
+    if(! waitForEver) {
+      if(rmConnectWaitMS < 0) {
+          throw new YarnException("Invalid Configuration. " +
+              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +
+              " can be -1, but can not be other negative numbers");
+      }
+
+      //try connect once
+      if(rmConnectWaitMS < rmConnectionRetryIntervalMS) {
+        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS
+            + " is smaller than "
+            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS
+            + ". Only try connect once.");
+        rmConnectWaitMS = 0;
+      }
+    }
+
+    int rmRetryCount = 0;
+    long waitStartTime = System.currentTimeMillis();
+
+    RegisterNodeManagerRequest request =
+        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);
-    RegistrationResponse regResponse =
-        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();
+    RegisterNodeManagerResponse regNMResponse;
+
+    while(true) {
+      try {
+        rmRetryCount++;
+        LOG.info("Connecting to ResourceManager at " + this.rmAddress
+            + ". current no. of attempts is " + rmRetryCount);
+        this.resourceTracker = getRMClient();
+        regNMResponse =
+            this.resourceTracker.registerNodeManager(request);
+        break;
+      } catch(Throwable e) {
+        LOG.warn("Trying to connect to ResourceManager, " +
+            "current no. of failed attempts is "+rmRetryCount);
+        if(System.currentTimeMillis() - waitStartTime < rmConnectWaitMS
+            || waitForEver) {
+          try {
+            LOG.info("Sleeping for " + rmConnectionRetryIntervalMS/1000
+                + " seconds before next connection retry to RM");
+            Thread.sleep(rmConnectionRetryIntervalMS);
+          } catch(InterruptedException ex) {
+            //done nothing
+          }
+        } else {
+          String errorMessage = "Failed to Connect to RM, " +
+              "no. of failed attempts is "+rmRetryCount;
+          LOG.error(errorMessage,e);
+          throw new YarnException(errorMessage,e);
+        }
+      }
+    }
-    if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {
+    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {
-      MasterKey masterKey = regResponse.getMasterKey();
+      MasterKey masterKey = regNMResponse.getMasterKey();
-            HeartbeatResponse response =
-              resourceTracker.nodeHeartbeat(request).getHeartbeatResponse();
+            NodeHeartbeatResponse response =
+              resourceTracker.nodeHeartbeat(request);
-                .getContainersToCleanupList();
+                .getContainersToCleanup();
-                response.getApplicationsToCleanupList();
+                response.getApplicationsToCleanup();

MOV26 MOV26 UPD40 UPD40 MOV60 INS60 INS60 INS25 INS60 INS25 INS60 INS60 INS60 INS61 UPD43 INS39 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS38 INS8 INS39 INS59 INS39 INS59 INS43 INS59 INS9 INS8 UPD42 UPD42 INS42 INS27 INS42 INS27 INS42 INS34 INS53 INS42 INS36 INS42 INS25 INS25 INS42 INS34 INS42 INS32 INS42 INS42 INS54 UPD42 INS32 INS34 INS32 INS34 INS14 INS27 INS27 INS8 INS27 INS8 INS42 INS42 INS8 INS12 UPD42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS43 INS27 INS42 INS38 INS42 INS34 INS53 INS42 INS42 INS21 INS21 INS21 MOV21 MOV21 INS21 INS10 INS44 INS8 INS42 INS45 INS40 INS45 INS34 INS14 INS32 INS7 INS37 INS7 INS43 INS42 INS21 INS25 UPD42 INS43 INS27 INS42 INS42 INS27 INS42 INS34 INS42 INS42 MOV32 INS42 INS32 INS27 INS8 INS8 INS42 INS45 INS40 INS45 INS40 INS45 INS40 INS45 INS45 INS42 INS42 INS42 INS27 INS27 INS42 INS54 INS60 INS21 INS53 INS45 INS45 INS42 INS27 INS42 INS8 INS12 INS43 INS59 INS32 INS14 INS32 INS42 INS21 INS21 INS44 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 UPD43 INS27 INS45 UPD42 MOV32 INS45 INS27 UPD42 UPD42 INS42 INS34 DEL42 DEL32