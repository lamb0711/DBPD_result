HDFS-6847. Support storage policy on directories and include storage policy in HdfsFileStatus.  Contributed by Jing Zhao


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1618416 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.BlockStoragePolicy;
-  /** Set block storage policy for a file */
+  /** Set block storage policy for a directory */
-      throws SnapshotAccessControlException, UnresolvedLinkException,
-      FileNotFoundException, QuotaExceededException {
+      throws IOException {
-      throws SnapshotAccessControlException, UnresolvedLinkException,
-      FileNotFoundException, QuotaExceededException {
+      throws IOException {
-    // TODO: currently we only support setting storage policy on a file
-    final INodeFile inode = INodeFile.valueOf(iip.getLastINode(), src);
-    inode.setStoragePolicyID(policyId, iip.getLatestSnapshotId());
+    final INode inode = iip.getLastINode();
+    if (inode == null) {
+      throw new FileNotFoundException("File/Directory does not exist: " + src);
+    }
+    final int snapshotId = iip.getLatestSnapshotId();
+    if (inode.isFile()) {
+      inode.asFile().setStoragePolicyID(policyId, snapshotId);
+    } else if (inode.isDirectory()) {
+      setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  
+    } else {
+      throw new FileNotFoundException(src + " is not a file or directory");
+    }
+  }
+
+  private void setDirStoragePolicy(INodeDirectory inode, byte policyId,
+      int latestSnapshotId) throws IOException {
+    List<XAttr> existingXAttrs = XAttrStorage.readINodeXAttrs(inode);
+    XAttr xAttr = BlockStoragePolicy.buildXAttr(policyId);
+    List<XAttr> newXAttrs = setINodeXAttrs(existingXAttrs, Arrays.asList(xAttr),
+        EnumSet.of(XAttrSetFlag.CREATE, XAttrSetFlag.REPLACE));
+    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, latestSnapshotId);
-      boolean needLocation) throws UnresolvedLinkException, IOException {
+      boolean needLocation, boolean isSuperUser)
+      throws UnresolvedLinkException, IOException {
-      final INodesInPath inodesInPath = getLastINodeInPath(srcs, true);
+      final INodesInPath inodesInPath = getINodesInPath(srcs, true);
-      final INode targetNode = inodesInPath.getINode(0);
+      final INode[] inodes = inodesInPath.getINodes();
+      final INode targetNode = inodes[inodes.length - 1];
+      byte parentStoragePolicy = isSuperUser ? getStoragePolicy(inodes,
+          snapshot) : BlockStoragePolicy.ID_UNSPECIFIED;
-                targetNode, needLocation, snapshot)}, 0);
+                targetNode, needLocation, parentStoragePolicy, snapshot)}, 0);
+        byte curPolicy = cur.getStoragePolicyID(snapshot);
-            needLocation, snapshot);
+            needLocation, curPolicy != BlockStoragePolicy.ID_UNSPECIFIED ?
+                curPolicy : parentStoragePolicy, snapshot);
-          Snapshot.CURRENT_STATE_ID);
+          BlockStoragePolicy.ID_UNSPECIFIED, Snapshot.CURRENT_STATE_ID);
-      return i == null? null: createFileStatus(HdfsFileStatus.EMPTY_NAME, i,
-          inodesInPath.getPathSnapshotId());
+      return i == null ? null : createFileStatus(HdfsFileStatus.EMPTY_NAME, i,
+          BlockStoragePolicy.ID_UNSPECIFIED, inodesInPath.getPathSnapshotId());
-          HdfsFileStatus.EMPTY_NAME, -1L, 0);
+          HdfsFileStatus.EMPTY_NAME, -1L, 0, BlockStoragePolicy.ID_UNSPECIFIED);
-      boolean needLocation, int snapshot) throws IOException {
+      boolean needLocation, byte storagePolicy, int snapshot) throws IOException {
-      return createLocatedFileStatus(path, node, snapshot);
+      return createLocatedFileStatus(path, node, storagePolicy, snapshot);
-      return createFileStatus(path, node, snapshot);
+      return createFileStatus(path, node, storagePolicy, snapshot);
+
-   HdfsFileStatus createFileStatus(byte[] path, INode node,
-       int snapshot) {
+  HdfsFileStatus createFileStatus(byte[] path, INode node, byte storagePolicy,
+      int snapshot) {
-         
+
-        childrenNum);
+        childrenNum, storagePolicy);
+  private byte getStoragePolicy(INode[] inodes, int snapshotId) {
+    for (int i = inodes.length - 1; i >= 0; i--) {
+      byte policy = inodes[i].getStoragePolicyID(snapshotId);
+      if (policy != BlockStoragePolicy.ID_UNSPECIFIED) {
+        return policy;
+      }
+    }
+    return BlockStoragePolicy.ID_UNSPECIFIED;
+  }  
+
-      INode node, int snapshot) throws IOException {
+      INode node, byte storagePolicy, int snapshot) throws IOException {
-        
+
-          node.getId(), loc, childrenNum);
+          node.getId(), loc, childrenNum, storagePolicy);

INS26 INS40 INS31 INS31 UPD43 UPD43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS44 INS44 INS44 INS83 INS39 INS42 INS44 INS44 INS8 INS44 UPD42 UPD42 MOV6 MOV60 MOV60 INS25 INS60 INS25 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS60 INS60 INS21 INS39 INS42 INS39 INS42 INS39 INS42 INS5 INS42 INS39 INS42 INS24 INS41 INS39 INS42 UPD66 UPD43 INS27 INS8 INS83 INS39 INS59 INS32 INS8 INS25 INS42 INS74 INS59 INS43 INS59 INS74 INS59 INS32 INS14 INS43 INS85 INS58 INS27 INS37 INS8 INS40 MOV43 UPD42 MOV32 INS42 INS33 INS53 INS42 MOV32 INS42 INS42 MOV21 INS32 INS8 INS8 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS60 INS60 MOV43 INS42 MOV32 INS42 INS42 MOV32 MOV32 MOV32 MOV32 MOV32 MOV16 INS42 MOV32 INS42 INS42 INS42 INS39 INS59 INS42 INS34 INS42 INS60 INS25 MOV14 INS14 INS42 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS5 INS83 MOV43 INS59 INS39 INS59 INS42 INS27 INS39 INS59 INS27 INS8 MOV43 INS42 INS42 MOV43 INS27 INS32 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS43 INS85 UPD42 INS42 INS2 INS42 INS16 INS60 INS40 INS42 INS42 INS40 INS34 INS42 INS32 INS42 INS40 INS41 INS45 INS42 MOV42 INS42 INS42 INS32 INS42 INS42 MOV43 INS27 UPD42 INS42 UPD42 INS42 INS27 INS42 INS32 INS40 INS39 INS59 INS40 INS40 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS40 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS16 INS27 INS42 INS42 INS42 INS42 INS40 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL8 DEL34 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14