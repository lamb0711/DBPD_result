HDFS-12868. Ozone: Service Discovery API. Contributed by Nanda Kumar.

+import com.google.common.base.Preconditions;
+import static org.apache.hadoop.ozone.ksm.KSMConfigKeys
+    .OZONE_KSM_HTTP_ADDRESS_KEY;
+import static org.apache.hadoop.ozone.ksm.KSMConfigKeys
+    .OZONE_KSM_HTTP_BIND_PORT_DEFAULT;
+import static org.apache.hadoop.ozone.ksm.KSMConfigKeys.OZONE_KSM_ADDRESS_KEY;
+import static org.apache.hadoop.ozone.ksm.KSMConfigKeys.OZONE_KSM_PORT_DEFAULT;
-  private enum ClientType {
-    RPC, REST
-  }
+  private static final Logger LOG = LoggerFactory.getLogger(
+      OzoneClientFactory.class);
-  private static final Logger LOG = LoggerFactory.getLogger(
-      OzoneClientFactory.class);
-
-  private static Configuration configuration;
-   * Returns an OzoneClient which will use protocol defined through
-   * <code>ozone.client.protocol</code> to perform client operations.
+   * Constructs and return an OzoneClient with default configuration.
+   *
+   *
-    return getClient(null);
+    LOG.info("Creating OzoneClient with default configuration.");
+    return getClient(new OzoneConfiguration());
-   * Returns an OzoneClient which will use RPC protocol to perform
-   * client operations.
+   * Constructs and return an OzoneClient based on the configuration object.
+   * Protocol type is decided by <code>ozone.client.protocol</code>.
+   *
+   * @param config
+   *        Configuration to be used for OzoneClient creation
+   *
+   *
-  public static OzoneClient getRpcClient() throws IOException {
-    return getClient(ClientType.RPC);
-  }
-
-  /**
-   * Returns an OzoneClient which will use REST protocol to perform
-   * client operations.
-   * @return OzoneClient
-   * @throws IOException
-   */
-  public static OzoneClient getRestClient() throws IOException {
-    return getClient(ClientType.REST);
-  }
-
-  /**
-   * Returns OzoneClient with protocol type set base on ClientType.
-   * @param clientType
-   * @return OzoneClient
-   * @throws IOException
-   */
-  private static OzoneClient getClient(ClientType clientType)
+  public static OzoneClient getClient(Configuration config)
+    Preconditions.checkNotNull(config);
+    Class<? extends ClientProtocol> clazz = (Class<? extends ClientProtocol>)
+        config.getClass(OZONE_CLIENT_PROTOCOL, OZONE_CLIENT_PROTOCOL_RPC);
+    return getClient(getClientProtocol(clazz, config), config);
+  }
+
+  /**
+   * Returns an OzoneClient which will use RPC protocol.
+   *
+   * @param ksmHost
+   *        hostname of KeySpaceManager to connect.
+   *
+   * @return OzoneClient
+   *
+   * @throws IOException
+   */
+  public static OzoneClient getRpcClient(String ksmHost)
+      throws IOException {
+    return getRpcClient(ksmHost, OZONE_KSM_PORT_DEFAULT,
+        new OzoneConfiguration());
+  }
+
+  /**
+   * Returns an OzoneClient which will use RPC protocol.
+   *
+   * @param ksmHost
+   *        hostname of KeySpaceManager to connect.
+   *
+   * @param ksmRpcPort
+   *        RPC port of KeySpaceManager.
+   *
+   * @return OzoneClient
+   *
+   * @throws IOException
+   */
+  public static OzoneClient getRpcClient(String ksmHost, Integer ksmRpcPort)
+      throws IOException {
+    return getRpcClient(ksmHost, ksmRpcPort, new OzoneConfiguration());
+  }
+
+  /**
+   * Returns an OzoneClient which will use RPC protocol.
+   *
+   * @param ksmHost
+   *        hostname of KeySpaceManager to connect.
+   *
+   * @param ksmRpcPort
+   *        RPC port of KeySpaceManager.
+   *
+   * @param config
+   *        Configuration to be used for OzoneClient creation
+   *
+   * @return OzoneClient
+   *
+   * @throws IOException
+   */
+  public static OzoneClient getRpcClient(String ksmHost, Integer ksmRpcPort,
+                                         Configuration config)
+      throws IOException {
+    Preconditions.checkNotNull(ksmHost);
+    Preconditions.checkNotNull(ksmRpcPort);
+    Preconditions.checkNotNull(config);
+    config.set(OZONE_KSM_ADDRESS_KEY, ksmHost + ":" + ksmRpcPort);
+    return getRpcClient(config);
+  }
+
+  /**
+   * Returns an OzoneClient which will use RPC protocol.
+   *
+   * @param config
+   *        used for OzoneClient creation
+   *
+   * @return OzoneClient
+   *
+   * @throws IOException
+   */
+  public static OzoneClient getRpcClient(Configuration config)
+      throws IOException {
+    Preconditions.checkNotNull(config);
+    return getClient(getClientProtocol(OZONE_CLIENT_PROTOCOL_RPC, config),
+        config);
+  }
+
+  /**
+   * Returns an OzoneClient which will use REST protocol.
+   *
+   * @param ksmHost
+   *        hostname of KeySpaceManager to connect.
+   *
+   * @return OzoneClient
+   *
+   * @throws IOException
+   */
+  public static OzoneClient getRestClient(String ksmHost)
+      throws IOException {
+    return getRestClient(ksmHost, OZONE_KSM_HTTP_BIND_PORT_DEFAULT);
+  }
+
+  /**
+   * Returns an OzoneClient which will use REST protocol.
+   *
+   * @param ksmHost
+   *        hostname of KeySpaceManager to connect.
+   *
+   * @param ksmHttpPort
+   *        HTTP port of KeySpaceManager.
+   *
+   * @return OzoneClient
+   *
+   * @throws IOException
+   */
+  public static OzoneClient getRestClient(String ksmHost, Integer ksmHttpPort)
+      throws IOException {
+    return getRestClient(ksmHost, ksmHttpPort, new OzoneConfiguration());
+  }
+
+  /**
+   * Returns an OzoneClient which will use REST protocol.
+   *
+   * @param ksmHost
+   *        hostname of KeySpaceManager to connect.
+   *
+   * @param ksmHttpPort
+   *        HTTP port of KeySpaceManager.
+   *
+   * @param config
+   *        Configuration to be used for OzoneClient creation
+   *
+   * @return OzoneClient
+   *
+   * @throws IOException
+   */
+  public static OzoneClient getRestClient(String ksmHost, Integer ksmHttpPort,
+                                          Configuration config)
+      throws IOException {
+    Preconditions.checkNotNull(ksmHost);
+    Preconditions.checkNotNull(ksmHttpPort);
+    Preconditions.checkNotNull(config);
+    config.set(OZONE_KSM_HTTP_ADDRESS_KEY, ksmHost + ":" +  ksmHttpPort);
+    return getRestClient(config);
+  }
+
+  /**
+   * Returns an OzoneClient which will use REST protocol.
+   *
+   * @param config
+   *        Configuration to be used for OzoneClient creation
+   *
+   * @return OzoneClient
+   *
+   * @throws IOException
+   */
+  public static OzoneClient getRestClient(Configuration config)
+      throws IOException {
+    Preconditions.checkNotNull(config);
+    return getClient(getClientProtocol(OZONE_CLIENT_PROTOCOL_REST, config),
+        config);
+  }
+
+  /**
+   * Creates OzoneClient with the given ClientProtocol and Configuration.
+   *
+   * @param clientProtocol
+   *        Protocol to be used by the OzoneClient
+   *
+   * @param config
+   *        Configuration to be used for OzoneClient creation
+   */
+  private static OzoneClient getClient(ClientProtocol clientProtocol,
+                                       Configuration config) {
-        new OzoneClientInvocationHandler(getProtocolClass(clientType));
+        new OzoneClientInvocationHandler(clientProtocol);
-    return new OzoneClient(configuration, proxy);
+    return new OzoneClient(config, proxy);
-   * Returns the configuration if it's already set, else creates a new
-   * {@link OzoneConfiguration} and returns it.
+   * Returns an instance of Protocol class.
-   * @return Configuration
-   */
-  private static synchronized Configuration getConfiguration() {
-    if(configuration == null) {
-      setConfiguration(new OzoneConfiguration());
-    }
-    return configuration;
-  }
-
-  /**
-   * Based on the clientType, client protocol instance is created.
-   * If clientType is null, <code>ozone.client.protocol</code> property
-   * will be used to decide the protocol to be used.
-   * @param clientType type of client protocol to be created
-   * @return ClientProtocol implementation
+   * @param protocolClass
+   *        Class object of the ClientProtocol.
+   *
+   * @param config
+   *        Configuration used to initialize ClientProtocol.
+   *
+   * @return ClientProtocol
+   *
-  private static ClientProtocol getProtocolClass(ClientType clientType)
+  private static ClientProtocol getClientProtocol(
+      Class<? extends ClientProtocol> protocolClass, Configuration config)
-    Class<? extends ClientProtocol> protocolClass = null;
-    if(clientType != null) {
-      switch (clientType) {
-      case RPC:
-        protocolClass = OZONE_CLIENT_PROTOCOL_RPC;
-        break;
-      case REST:
-        protocolClass = OZONE_CLIENT_PROTOCOL_REST;
-        break;
-      default:
-        LOG.warn("Invalid ClientProtocol type, falling back to RPC.");
-        protocolClass = OZONE_CLIENT_PROTOCOL_RPC;
-        break;
-      }
-    } else {
-      protocolClass = (Class<ClientProtocol>)
-          getConfiguration().getClass(
-              OZONE_CLIENT_PROTOCOL, OZONE_CLIENT_PROTOCOL_RPC);
-    }
+      LOG.info("Using {} as client protocol.",
+          protocolClass.getCanonicalName());
-      return ctor.newInstance(getConfiguration());
+      return ctor.newInstance(config);
-  /**
-   * Sets the configuration, which will be used while creating OzoneClient.
-   *
-   * @param conf
-   */
-  public static void setConfiguration(Configuration conf) {
-    configuration = conf;
-  }
-

INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 MOV29 INS83 INS83 MOV43 INS42 INS44 MOV43 INS8 MOV29 INS83 INS83 MOV43 INS42 INS44 MOV43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS43 INS44 MOV43 INS43 INS44 INS43 MOV29 UPD83 MOV83 MOV83 INS43 UPD42 MOV42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 MOV44 INS43 INS8 INS43 INS42 INS44 INS43 INS29 INS44 UPD42 INS44 INS21 INS65 MOV43 INS42 INS21 INS60 INS41 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 INS42 INS21 INS21 INS21 INS21 INS41 INS65 INS65 MOV65 MOV65 INS42 INS43 INS42 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 UPD42 INS42 INS21 INS21 INS21 INS21 MOV41 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 UPD43 UPD42 INS43 INS42 INS65 INS65 INS65 INS74 UPD42 INS43 INS42 UPD66 INS32 UPD66 UPD66 INS42 INS66 INS32 INS74 INS59 INS32 UPD66 UPD42 INS66 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS32 UPD66 MOV66 INS42 INS66 UPD66 MOV66 INS42 UPD66 MOV66 UPD42 MOV42 INS66 INS42 UPD66 MOV66 UPD66 INS42 INS42 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 UPD66 UPD42 INS66 INS66 INS42 INS42 INS32 INS32 INS66 INS42 INS66 INS42 INS66 MOV42 INS42 MOV43 UPD66 MOV66 INS42 UPD66 MOV66 UPD42 UPD66 UPD66 INS42 INS43 INS76 INS42 INS42 INS42 INS45 INS14 INS42 INS42 INS42 INS43 INS76 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 INS43 INS21 INS43 INS42 INS43 MOV74 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 MOV43 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 UPD42 MOV42 INS42 INS42 DEL83 DEL42 DEL42 DEL72 DEL42 DEL72 DEL71 DEL83 DEL83 DEL42 DEL59 DEL23 DEL66 DEL33 DEL40 DEL65 DEL40 DEL65 DEL65 DEL42 DEL39 DEL42 DEL42 DEL42 DEL7 DEL42 DEL42 DEL32 DEL83 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL49 DEL42 DEL42 DEL7 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL7 DEL21 DEL10 DEL49 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL10 DEL50 DEL8 DEL42 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL32