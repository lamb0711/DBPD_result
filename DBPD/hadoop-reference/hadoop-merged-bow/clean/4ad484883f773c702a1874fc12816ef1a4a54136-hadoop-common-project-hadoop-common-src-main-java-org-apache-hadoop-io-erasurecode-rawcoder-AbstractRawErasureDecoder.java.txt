HADOOP-11847 Enhance raw coder allowing to read least required inputs in decoding. Contributed by Kai Zheng

+import java.util.Arrays;
-    int dataLen = inputs[0].remaining();
+
+    ByteBuffer validInput = findFirstValidInput(inputs);
+    int dataLen = validInput.remaining();
-    ensureLength(inputs, dataLen);
-    ensureLength(outputs, dataLen);
+    ensureLength(inputs, true, dataLen);
+    ensureLength(outputs, false, dataLen);
-    boolean usingDirectBuffer = inputs[0].isDirect();
+    boolean usingDirectBuffer = validInput.isDirect();
-      inputOffsets[i] = buffer.position();
-      newInputs[i] = buffer.array();
+      if (buffer != null) {
+        inputOffsets[i] = buffer.position();
+        newInputs[i] = buffer.array();
+      }
-      buffer.position(inputOffsets[i] + dataLen); // dataLen bytes consumed
+      if (buffer != null) {
+        // dataLen bytes consumed
+        buffer.position(inputOffsets[i] + dataLen);
+      }
-    int dataLen = inputs[0].length;
+
+    byte[] validInput = findFirstValidInput(inputs);
+    int dataLen = validInput.length;
-    ensureLength(inputs, dataLen);
-    ensureLength(outputs, dataLen);
+    ensureLength(inputs, true, dataLen);
+    ensureLength(outputs, false, dataLen);
+
+    int validInputs = 0;
+    for (int i = 0; i < inputs.length; ++i) {
+      if (inputs[i] != null) {
+        validInputs += 1;
+      }
+    }
+
+    if (validInputs < getNumDataUnits()) {
+      throw new HadoopIllegalArgumentException(
+          "No enough valid inputs are provided, not recoverable");
+    }
+  }
+
+  /**
+   * Get indexes into inputs array for items marked as null, either erased or
+   * not to read.
+   * @return indexes into inputs array
+   */
+  protected int[] getErasedOrNotToReadIndexes(Object[] inputs) {
+    int[] invalidIndexes = new int[inputs.length];
+    int idx = 0;
+    for (int i = 0; i < inputs.length; i++) {
+      if (inputs[i] == null) {
+        invalidIndexes[idx++] = i;
+      }
+    }
+
+    return Arrays.copyOf(invalidIndexes, idx);
+  }
+
+  /**
+   * Find the valid input from all the inputs.
+   * @param inputs
+   * @return the first valid input
+   */
+  protected static <T> T findFirstValidInput(T[] inputs) {
+    for (int i = 0; i < inputs.length; i++) {
+      if (inputs[i] != null) {
+        return inputs[i];
+      }
+    }
+
+    throw new HadoopIllegalArgumentException(
+        "Invalid inputs are found, all being null");

INS26 INS40 INS31 INS31 INS29 INS83 INS5 INS42 INS44 INS8 INS29 INS83 INS83 INS73 INS43 INS42 INS44 INS8 INS60 INS60 INS60 INS24 INS25 INS65 INS65 INS39 INS85 INS5 INS42 INS60 INS60 INS24 INS41 INS65 INS65 INS65 INS42 INS42 INS5 INS42 INS24 INS53 INS43 INS59 INS5 INS39 INS59 INS39 INS59 INS58 INS27 INS38 INS8 INS27 INS8 INS66 INS66 INS66 INS43 INS85 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS32 INS66 INS42 INS66 INS43 INS85 INS58 INS27 INS37 INS8 INS14 INS42 INS42 INS32 INS9 INS9 INS25 INS25 INS39 INS85 UPD42 INS32 INS42 INS40 INS9 INS9 INS42 INS34 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS32 INS53 INS42 INS39 INS85 INS42 INS3 INS42 INS34 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS25 INS43 INS45 INS42 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS34 INS27 INS8 INS42 INS14 INS5 INS40 INS42 INS34 INS27 INS8 INS42 INS34 INS27 INS8 INS42 INS42 INS33 MOV21 MOV21 INS42 INS33 MOV21 INS2 INS33 INS21 INS43 INS45 INS39 INS85 INS2 INS33 INS21 INS2 INS33 INS41 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS2 INS42 INS34 INS2 INS42 INS42 INS42 INS42 INS37 INS42 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL39 DEL42 DEL34 DEL2 DEL42 DEL22