YARN-6768. Improve performance of yarn api record toString and fromString. Contributed by Jonathan Eagles

-import java.text.NumberFormat;
-import java.util.Iterator;
-import java.util.NoSuchElementException;
-
+import org.apache.hadoop.util.FastNumberFormat;
-import com.google.common.base.Splitter;
-
-  private static Splitter _spliter = Splitter.on('_').trimResults();
+  private static final String APP_ATTEMPT_ID_PREFIX = appAttemptIdStrPrefix
+    + '_';
+
-  static final ThreadLocal<NumberFormat> attemptIdFormat =
-      new ThreadLocal<NumberFormat>() {
-        @Override
-        public NumberFormat initialValue() {
-          NumberFormat fmt = NumberFormat.getInstance();
-          fmt.setGroupingUsed(false);
-          fmt.setMinimumIntegerDigits(6);
-          return fmt;
-        }
-      };
+  private static final int ATTEMPT_ID_MIN_DIGITS = 6;
+  private static final int APP_ID_MIN_DIGITS = 4;
-    StringBuilder sb = new StringBuilder(appAttemptIdStrPrefix);
-    sb.append("_");
-    sb.append(this.getApplicationId().getClusterTimestamp()).append("_");
-    sb.append(ApplicationId.appIdFormat.get().format(
-        this.getApplicationId().getId()));
-    sb.append("_").append(attemptIdFormat.get().format(getAttemptId()));
+    StringBuilder sb = new StringBuilder(64);
+    sb.append(APP_ATTEMPT_ID_PREFIX);
+    ApplicationId appId = getApplicationId();
+    sb.append(appId.getClusterTimestamp());
+    sb.append('_');
+    FastNumberFormat.format(sb, appId.getId(), APP_ID_MIN_DIGITS);
+    sb.append('_');
+    FastNumberFormat.format(sb, getAttemptId(), ATTEMPT_ID_MIN_DIGITS);
-  public static ApplicationAttemptId fromString(String applicationAttemptIdStr) {
-    Iterator<String> it = _spliter.split(applicationAttemptIdStr).iterator();
-    if (!it.next().equals(appAttemptIdStrPrefix)) {
+  public static ApplicationAttemptId fromString(String appAttemptIdStr) {
+    if (!appAttemptIdStr.startsWith(APP_ATTEMPT_ID_PREFIX)) {
-          + applicationAttemptIdStr);
+          + appAttemptIdStr);
-      return toApplicationAttemptId(it);
+      int pos1 = APP_ATTEMPT_ID_PREFIX.length() - 1;
+      int pos2 = appAttemptIdStr.indexOf('_', pos1 + 1);
+      if (pos2 < 0) {
+        throw new IllegalArgumentException("Invalid AppAttemptId: "
+            + appAttemptIdStr);
+      }
+      long rmId = Long.parseLong(appAttemptIdStr.substring(pos1 + 1, pos2));
+      int pos3 = appAttemptIdStr.indexOf('_', pos2 + 1);
+      if (pos3 < 0) {
+        throw new IllegalArgumentException("Invalid AppAttemptId: "
+            + appAttemptIdStr);
+      }
+      int appId = Integer.parseInt(appAttemptIdStr.substring(pos2 + 1, pos3));
+      ApplicationId applicationId = ApplicationId.newInstance(rmId, appId);
+      int attemptId = Integer.parseInt(appAttemptIdStr.substring(pos3 + 1));
+      ApplicationAttemptId applicationAttemptId =
+        ApplicationAttemptId.newInstance(applicationId, attemptId);
+      return applicationAttemptId;
-          + applicationAttemptIdStr, n);
-    } catch (NoSuchElementException e) {
-      throw new IllegalArgumentException("Invalid AppAttemptId: "
-          + applicationAttemptIdStr, e);
+          + appAttemptIdStr, n);
-  
-  private static ApplicationAttemptId toApplicationAttemptId(
-      Iterator<String> it) throws NumberFormatException {
-    ApplicationId appId = ApplicationId.newInstance(Long.parseLong(it.next()),
-        Integer.parseInt(it.next()));
-    ApplicationAttemptId appAttemptId =
-        ApplicationAttemptId.newInstance(appId, Integer.parseInt(it.next()));
-    return appAttemptId;
-  }

MOV26 MOV23 UPD40 INS23 INS31 INS83 MOV43 INS83 INS39 INS83 INS83 INS83 INS39 INS59 MOV78 MOV78 MOV83 MOV83 MOV43 MOV42 MOV44 INS8 UPD42 INS27 UPD42 INS34 INS42 INS34 INS60 INS21 INS21 INS21 INS21 UPD42 MOV25 INS54 INS42 INS13 MOV43 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS8 INS12 INS42 INS42 INS42 INS32 MOV42 MOV42 MOV32 MOV42 MOV42 INS13 UPD42 MOV42 MOV42 INS42 MOV32 INS42 MOV42 MOV42 INS13 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS60 INS60 INS25 INS60 INS60 INS25 INS60 INS60 INS60 MOV60 MOV41 MOV44 INS8 MOV43 INS34 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS39 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS27 INS8 INS39 INS59 MOV43 INS59 INS39 INS59 UPD42 INS53 INS43 INS42 INS27 INS42 INS32 INS42 INS34 MOV53 INS42 INS32 INS42 INS32 INS42 INS34 MOV53 INS42 INS32 UPD42 MOV42 INS32 INS42 INS32 UPD42 INS14 INS42 UPD42 INS32 INS34 UPD42 MOV42 UPD42 MOV42 INS13 INS27 INS42 INS42 INS32 INS42 INS42 INS13 INS27 INS42 INS42 INS32 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV32 UPD42 UPD42 MOV42 MOV43 INS27 INS42 INS42 INS42 INS42 INS34 MOV43 INS42 INS42 INS27 INS42 INS42 INS34 MOV43 INS42 INS42 INS27 INS42 UPD42 UPD42 INS27 INS45 INS42 UPD42 INS42 INS34 UPD42 INS42 INS34 INS42 INS34 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL13 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL42 DEL45 DEL52 DEL32 DEL32 DEL42 DEL45 DEL32 DEL52 DEL32 DEL40 DEL32 DEL32 DEL32 DEL21 DEL45 DEL32 DEL42 DEL32 DEL32 DEL32 DEL21 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL32 DEL41 DEL8 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL32 DEL32 DEL59 DEL60 DEL8 DEL31