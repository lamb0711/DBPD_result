Merge r1460409 through r1462697 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1462698 13f79535-47bb-0310-9956-ffa450edef68

-
-import org.apache.hadoop.classification.InterfaceAudience.Private;
-import org.apache.hadoop.classification.InterfaceStability.Unstable;
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.concurrent.ConcurrentHashMap;
-/**
- * Internal scheduling modes for queues.
- */
-@Private
+import org.apache.hadoop.classification.InterfaceAudience.Public;
+import org.apache.hadoop.classification.InterfaceStability.Unstable;
+import org.apache.hadoop.util.ReflectionUtils;
+import org.apache.hadoop.yarn.api.records.Resource;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.modes.FairSchedulingMode;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.modes.FifoSchedulingMode;
+
+@Public
-public enum SchedulingMode {
-  FAIR, FIFO
+public abstract class SchedulingMode {
+  private static final ConcurrentHashMap<Class<? extends SchedulingMode>, SchedulingMode> instances =
+      new ConcurrentHashMap<Class<? extends SchedulingMode>, SchedulingMode>();
+
+  private static SchedulingMode DEFAULT_MODE =
+      getInstance(FairSchedulingMode.class);
+  
+  public static SchedulingMode getDefault() {
+    return DEFAULT_MODE;
+  }
+
+  public static void setDefault(String className)
+      throws AllocationConfigurationException {
+    DEFAULT_MODE = parse(className);
+  }
+
+  /**
+   * Returns a {@link SchedulingMode} instance corresponding to the passed clazz
+   */
+  public static SchedulingMode getInstance(Class<? extends SchedulingMode> clazz) {
+    SchedulingMode mode = instances.get(clazz);
+    if (mode == null) {
+      mode = ReflectionUtils.newInstance(clazz, null);
+      instances.put(clazz, mode);
+    }
+    return mode;
+  }
+
+  /**
+   * Returns {@link SchedulingMode} instance corresponding to the
+   * {@link SchedulingMode} passed as a string. The mode can be "fair" for
+   * FairSchedulingMode of "fifo" for FifoSchedulingMode. For custom
+   * {@link SchedulingMode}s in the RM classpath, the mode should be canonical
+   * class name of the {@link SchedulingMode}.
+   * 
+   * @param mode canonical class name or "fair" or "fifo"
+   * @throws AllocationConfigurationException
+   */
+  @SuppressWarnings("unchecked")
+  public static SchedulingMode parse(String mode)
+      throws AllocationConfigurationException {
+    @SuppressWarnings("rawtypes")
+    Class clazz;
+    String text = mode.toLowerCase();
+    if (text.equals("fair")) {
+      clazz = FairSchedulingMode.class;
+    } else if (text.equals("fifo")) {
+      clazz = FifoSchedulingMode.class;
+    } else {
+      try {
+        clazz = Class.forName(mode);
+      } catch (ClassNotFoundException cnfe) {
+        throw new AllocationConfigurationException(mode
+            + " SchedulingMode class not found!");
+      }
+    }
+    if (!SchedulingMode.class.isAssignableFrom(clazz)) {
+      throw new AllocationConfigurationException(mode
+          + " does not extend SchedulingMode");
+    }
+    return getInstance(clazz);
+  }
+
+  /**
+   * @return returns the name of SchedulingMode
+   */
+  public abstract String getName();
+
+  /**
+   * The comparator returned by this method is to be used for sorting the
+   * {@link Schedulable}s in that queue.
+   * 
+   * @return the comparator to sort by
+   */
+  public abstract Comparator<Schedulable> getComparator();
+
+  /**
+   * Computes and updates the shares of {@link Schedulable}s as per the
+   * SchedulingMode, to be used later at schedule time.
+   * 
+   * @param schedulables {@link Schedulable}s whose shares are to be updated
+   * @param totalResources Total {@link Resource}s in the cluster
+   */
+  public abstract void computeShares(
+      Collection<? extends Schedulable> schedulables, Resource totalResources);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS55 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS78 MOV78 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS79 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS29 INS83 INS83 INS74 INS42 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS74 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS41 INS43 INS42 INS42 INS21 INS65 INS42 INS74 INS42 INS60 INS25 INS41 MOV65 INS65 INS65 INS42 INS45 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS25 INS41 INS65 INS42 INS65 INS65 INS43 INS43 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS42 INS43 INS76 INS42 INS74 INS42 INS57 INS42 INS42 INS7 INS66 INS65 INS66 INS43 INS76 INS43 INS59 INS27 INS8 INS42 INS66 INS65 INS66 INS65 INS66 UPD66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS42 INS79 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS38 INS8 INS32 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS43 INS76 INS42 INS42 INS43 INS43 INS74 INS43 INS43 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS8 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS76 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS7 INS42 INS42 INS45 INS21 INS54 INS57 INS42 INS42 INS14 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS57 INS7 INS8 INS12 INS43 INS43 INS27 INS42 INS42 INS42 INS42 INS33 INS43 INS42 INS57 INS21 INS44 INS8 INS42 INS42 INS42 INS45 INS42 INS43 INS7 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45 DEL29 DEL42 DEL78 DEL83 DEL42 DEL42 DEL72 DEL42 DEL72 DEL71