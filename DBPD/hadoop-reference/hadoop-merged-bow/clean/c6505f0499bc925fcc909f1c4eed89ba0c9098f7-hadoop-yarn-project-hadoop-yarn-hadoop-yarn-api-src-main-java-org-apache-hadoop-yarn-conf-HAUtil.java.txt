Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1566100 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.HadoopIllegalArgumentException;
+import org.apache.hadoop.net.NetUtils;
+import java.net.InetSocketAddress;
-        String confKey = null;
-        try {
-          confKey = addSuffix(prefix, id);
-          if (conf.getTrimmed(confKey) == null) {
-            throwBadConfigurationException(getNeedToSetValueMessage(confKey));
-          }
-        } catch (IllegalArgumentException iae) {
-          String errmsg = iae.getMessage();
-          if (confKey == null) {
-            // Error at addSuffix
-            errmsg = getInvalidValueMessage(YarnConfiguration.RM_HA_ID,
-              getRMHAId(conf));
-          }
-          throwBadConfigurationException(errmsg);
-        }
+        checkAndSetRMRPCAddress(prefix, id, conf);
-    String rmId = conf.getTrimmed(YarnConfiguration.RM_HA_ID);
+    String rmId = getRMHAId(conf);
-      throwBadConfigurationException(
-        getNeedToSetValueMessage(YarnConfiguration.RM_HA_ID));
+      StringBuilder msg = new StringBuilder();
+      msg.append("Can not find valid RM_HA_ID. None of ");
+      for (String id : conf
+          .getTrimmedStringCollection(YarnConfiguration.RM_HA_IDS)) {
+        msg.append(addSuffix(YarnConfiguration.RM_ADDRESS, id) + " ");
+      }
+      msg.append(" are matching" +
+          " the local address OR " + YarnConfiguration.RM_HA_ID + " is not" +
+          " specified in HA Configuration");
+      throwBadConfigurationException(msg.toString());
-    return conf.get(YarnConfiguration.RM_HA_ID);
+    int found = 0;
+    String currentRMId = conf.getTrimmed(YarnConfiguration.RM_HA_ID);
+    if(currentRMId == null) {
+      for(String rmId : getRMHAIds(conf)) {
+        String key = addSuffix(YarnConfiguration.RM_ADDRESS, rmId);
+        String addr = conf.get(key);
+        if (addr == null) {
+          continue;
+        }
+        InetSocketAddress s;
+        try {
+          s = NetUtils.createSocketAddr(addr);
+        } catch (Exception e) {
+          LOG.warn("Exception in creating socket address " + addr, e);
+          continue;
+        }
+        if (!s.isUnresolved() && NetUtils.isLocalAddress(s.getAddress())) {
+          currentRMId = rmId.trim();
+          found++;
+        }
+      }
+    }
+    if (found > 1) { // Only one address must match the local address
+      String msg = "The HA Configuration has multiple addresses that match "
+          + "local node's address.";
+      throw new HadoopIllegalArgumentException(msg);
+    }
+    return currentRMId;
-    return YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS.contains(prefix)
-        ? addSuffix(prefix, getRMHAId(conf))
-        : prefix;
+    if (!YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS.contains(prefix)) {
+      return prefix;
+    } else {
+      String RMId = getRMHAId(conf);
+      checkAndSetRMRPCAddress(prefix, RMId, conf);
+      return addSuffix(prefix, RMId);
+    }
+
+  private static void checkAndSetRMRPCAddress(String prefix, String RMId,
+      Configuration conf) {
+    String rpcAddressConfKey = null;
+    try {
+      rpcAddressConfKey = addSuffix(prefix, RMId);
+      if (conf.getTrimmed(rpcAddressConfKey) == null) {
+        String hostNameConfKey = addSuffix(YarnConfiguration.RM_HOSTNAME, RMId);
+        String confVal = conf.getTrimmed(hostNameConfKey);
+        if (confVal == null) {
+          throwBadConfigurationException(getNeedToSetValueMessage(
+              hostNameConfKey + " or " + addSuffix(prefix, RMId)));
+        } else {
+          conf.set(addSuffix(prefix, RMId), confVal + ":"
+              + YarnConfiguration.getRMDefaultPortNumber(prefix));
+        }
+      }
+    } catch (IllegalArgumentException iae) {
+      String errmsg = iae.getMessage();
+      if (rpcAddressConfKey == null) {
+        // Error at addSuffix
+        errmsg = getInvalidValueMessage(YarnConfiguration.RM_HA_ID, RMId);
+      }
+      throwBadConfigurationException(errmsg);
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS8 INS8 INS83 INS83 INS39 INS42 MOV44 INS44 INS44 INS8 INS60 INS60 MOV60 INS25 INS25 INS41 INS25 INS43 INS42 INS43 INS42 INS60 INS54 MOV43 INS59 INS8 INS39 INS59 INS27 INS8 INS27 INS8 INS42 INS38 INS8 INS8 INS42 INS42 INS43 INS59 INS8 MOV12 INS42 MOV32 INS60 INS21 INS70 INS21 INS21 INS42 INS34 UPD42 INS42 INS33 INS70 INS42 INS34 INS60 INS53 MOV32 INS41 INS60 INS21 INS41 INS42 INS42 INS33 INS21 INS25 INS44 INS8 INS43 INS59 INS32 INS44 INS32 INS8 INS32 INS32 INS44 INS32 INS8 INS43 INS59 INS14 INS42 INS43 INS59 INS32 INS32 INS7 INS27 INS8 INS43 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS40 MOV21 INS42 INS42 INS27 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS60 INS25 INS60 INS54 INS25 INS42 INS42 INS27 INS43 INS42 INS42 INS42 MOV32 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS33 INS60 INS60 INS25 INS42 INS32 INS43 INS42 INS27 INS40 INS45 INS45 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 UPD42 INS42 MOV42 MOV42 MOV42 INS42 UPD42 INS42 INS27 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS18 INS42 INS42 INS21 INS44 INS8 INS38 INS32 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS32 INS45 INS42 INS40 INS42 MOV42 MOV42 INS42 INS7 INS43 INS42 INS21 INS18 INS32 INS42 INS42 INS32 INS7 INS37 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 UPD40 MOV40 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL32 DEL8 DEL40 DEL32 DEL41 DEL8 DEL32 DEL42 DEL16 DEL41 DEL8