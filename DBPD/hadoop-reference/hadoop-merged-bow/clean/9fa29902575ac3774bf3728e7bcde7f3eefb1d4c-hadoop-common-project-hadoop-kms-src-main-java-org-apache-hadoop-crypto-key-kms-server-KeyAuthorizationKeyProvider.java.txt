HADOOP-11337. KeyAuthorizationKeyProvider access checks need to be done atomically. Contributed by Dian Fu.

+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+  private Lock readLock;
+  private Lock writeLock;
+    ReadWriteLock lock = new ReentrantReadWriteLock(true);
+    readLock = lock.readLock();
+    writeLock = lock.writeLock();
-    authorizeCreateKey(name, options, getUser());
-    return provider.createKey(name, options);
+    writeLock.lock();
+    try {
+      authorizeCreateKey(name, options, getUser());
+      return provider.createKey(name, options);
+    } finally {
+      writeLock.unlock();
+    }
-    authorizeCreateKey(name, options, getUser());
-    return provider.createKey(name, material, options);
+    writeLock.lock();
+    try {
+      authorizeCreateKey(name, options, getUser());
+      return provider.createKey(name, material, options);
+    } finally {
+      writeLock.unlock();
+    }
-    doAccessCheck(name, KeyOpType.MANAGEMENT);
-    return provider.rollNewVersion(name);
+    writeLock.lock();
+    try {
+      doAccessCheck(name, KeyOpType.MANAGEMENT);
+      return provider.rollNewVersion(name);
+    } finally {
+      writeLock.unlock();
+    }
-    doAccessCheck(name, KeyOpType.MANAGEMENT);
-    provider.deleteKey(name);
+    writeLock.lock();
+    try {
+      doAccessCheck(name, KeyOpType.MANAGEMENT);
+      provider.deleteKey(name);
+    } finally {
+      writeLock.unlock();
+    }
-    doAccessCheck(name, KeyOpType.MANAGEMENT);
-    return provider.rollNewVersion(name, material);
+    writeLock.lock();
+    try {
+      doAccessCheck(name, KeyOpType.MANAGEMENT);
+      return provider.rollNewVersion(name, material);
+    } finally {
+      writeLock.unlock();
+    }
-    for (String name : names) {
-      doAccessCheck(name, KeyOpType.GENERATE_EEK);
+    readLock.lock();
+    try {
+      for (String name : names) {
+        doAccessCheck(name, KeyOpType.GENERATE_EEK);
+      }
+      provider.warmUpEncryptedKeys(names);
+    } finally {
+      readLock.unlock();
-    provider.warmUpEncryptedKeys(names);
-    doAccessCheck(encryptionKeyName, KeyOpType.GENERATE_EEK);
-    return provider.generateEncryptedKey(encryptionKeyName);
+    readLock.lock();
+    try {
+      doAccessCheck(encryptionKeyName, KeyOpType.GENERATE_EEK);
+      return provider.generateEncryptedKey(encryptionKeyName);
+    } finally {
+      readLock.unlock();
+    }
-    verifyKeyVersionBelongsToKey(encryptedKeyVersion);
-    doAccessCheck(
-        encryptedKeyVersion.getEncryptionKeyName(), KeyOpType.DECRYPT_EEK);
-    return provider.decryptEncryptedKey(encryptedKeyVersion);
+    readLock.lock();
+    try {
+      verifyKeyVersionBelongsToKey(encryptedKeyVersion);
+      doAccessCheck(
+          encryptedKeyVersion.getEncryptionKeyName(), KeyOpType.DECRYPT_EEK);
+      return provider.decryptEncryptedKey(encryptedKeyVersion);
+    } finally {
+      readLock.unlock();
+    }
-    KeyVersion keyVersion = provider.getKeyVersion(versionName);
-    if (keyVersion != null) {
-      doAccessCheck(keyVersion.getName(), KeyOpType.READ);
+    readLock.lock();
+    try {
+      KeyVersion keyVersion = provider.getKeyVersion(versionName);
+      if (keyVersion != null) {
+        doAccessCheck(keyVersion.getName(), KeyOpType.READ);
+      }
+      return keyVersion;
+    } finally {
+      readLock.unlock();
-    return keyVersion;
-    doAccessCheck(name, KeyOpType.READ);
-    return provider.getKeyVersions(name);
+    readLock.lock();
+    try {
+      doAccessCheck(name, KeyOpType.READ);
+      return provider.getKeyVersions(name);
+    } finally {
+      readLock.unlock();
+    }
-    doAccessCheck(name, KeyOpType.READ);
-    return provider.getMetadata(name);
+    readLock.lock();
+    try {
+      doAccessCheck(name, KeyOpType.READ);
+      return provider.getMetadata(name);
+    } finally {
+      readLock.unlock();
+    }
-    for (String name : names) {
-      doAccessCheck(name, KeyOpType.READ);
+    readLock.lock();
+    try {
+      for (String name : names) {
+        doAccessCheck(name, KeyOpType.READ);
+      }
+      return provider.getKeysMetadata(names);
+    } finally {
+      readLock.unlock();
-    return provider.getKeysMetadata(names);
-    doAccessCheck(name, KeyOpType.READ);
-    return provider.getCurrentKey(name);
+    readLock.lock();
+    try {
+      doAccessCheck(name, KeyOpType.READ);
+      return provider.getCurrentKey(name);
+    } finally {
+      readLock.unlock();
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS83 INS43 INS59 INS83 INS43 INS59 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 INS43 INS59 INS7 INS7 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS43 INS9 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42