HDFS-6970. Move startFile EDEK retries to the DFSClient. (wang)

+import com.google.common.base.Preconditions;
+import org.apache.hadoop.hdfs.server.namenode.RetryStartFileException;
+  /**
+   * Number of times to retry creating a file when there are transient 
+   * errors (typically related to encryption zones and KeyProvider operations).
+   */
+  @VisibleForTesting
+  public static final int CREATE_RETRY_COUNT = 10;
+
-    final HdfsFileStatus stat;
-    try {
-      stat = dfsClient.namenode.create(src, masked, dfsClient.clientName,
-          new EnumSetWritable<CreateFlag>(flag), createParent, replication,
-          blockSize, cipherSuites);
-    } catch(RemoteException re) {
-      throw re.unwrapRemoteException(AccessControlException.class,
-                                     DSQuotaExceededException.class,
-                                     FileAlreadyExistsException.class,
-                                     FileNotFoundException.class,
-                                     ParentNotDirectoryException.class,
-                                     NSQuotaExceededException.class,
-                                     SafeModeException.class,
-                                     UnresolvedPathException.class,
-                                     SnapshotAccessControlException.class,
-                                     UnknownCipherSuiteException.class);
+    HdfsFileStatus stat = null;
+
+    // Retry the create if we get a RetryStartFileException up to a maximum
+    // number of times
+    boolean shouldRetry = true;
+    int retryCount = CREATE_RETRY_COUNT;
+    while (shouldRetry) {
+      shouldRetry = false;
+      try {
+        stat = dfsClient.namenode.create(src, masked, dfsClient.clientName,
+            new EnumSetWritable<CreateFlag>(flag), createParent, replication,
+            blockSize, cipherSuites);
+        break;
+      } catch (RemoteException re) {
+        IOException e = re.unwrapRemoteException(
+            AccessControlException.class,
+            DSQuotaExceededException.class,
+            FileAlreadyExistsException.class,
+            FileNotFoundException.class,
+            ParentNotDirectoryException.class,
+            NSQuotaExceededException.class,
+            RetryStartFileException.class,
+            SafeModeException.class,
+            UnresolvedPathException.class,
+            SnapshotAccessControlException.class,
+            UnknownCipherSuiteException.class);
+        if (e instanceof RetryStartFileException) {
+          if (retryCount > 0) {
+            shouldRetry = true;
+            retryCount--;
+          } else {
+            throw new IOException("Too many retries because of encryption" +
+                " zone operations", e);
+          }
+        } else {
+          throw e;
+        }
+      }
+    Preconditions.checkNotNull(stat, "HdfsFileStatus should not be null!");

INS26 INS26 INS40 INS40 INS23 INS29 INS78 INS83 INS83 INS83 INS39 INS59 INS65 INS42 INS42 INS34 INS60 INS60 INS61 INS21 INS66 INS66 INS39 INS59 INS39 INS59 INS42 INS8 INS32 INS33 INS42 INS9 INS42 INS42 INS21 MOV54 INS42 INS42 INS42 INS45 INS7 INS42 INS9 INS10 INS60 INS25 INS43 INS59 INS62 INS8 INS8 INS42 INS42 MOV32 INS42 INS43 INS25 INS53 INS57 INS42 INS27 INS8 INS8 INS42 INS43 INS42 INS34 INS21 INS21 MOV53 INS42 INS7 INS37 INS14 INS42 INS9 INS42 INS43 INS27 INS42 INS42 INS45 INS45 DEL83