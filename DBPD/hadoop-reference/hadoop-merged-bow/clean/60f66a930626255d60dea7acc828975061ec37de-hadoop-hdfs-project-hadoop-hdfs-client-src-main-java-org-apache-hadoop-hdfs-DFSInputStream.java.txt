Merge branch 'trunk' into HADOOP-12756

-  private synchronized DatanodeInfo blockSeekTo(long target) throws IOException {
+  private synchronized DatanodeInfo blockSeekTo(long target)
+      throws IOException {
-      byte[] buf, int offset, CorruptedBlocks corruptedBlocks)
+      ByteBuffer buf, CorruptedBlocks corruptedBlocks)
-            buf, offset, corruptedBlocks);
+            buf, corruptedBlocks);
-        byte[] buf = bb.array();
-        int offset = bb.position();
-          actualGetFromOneDataNode(datanode, block, start, end, buf,
-              offset, corruptedBlocks);
+          actualGetFromOneDataNode(datanode, block, start, end, bb,
+              corruptedBlocks);
-   * @param buf               the given byte array into which the data is read
-   * @param offset            the offset in buf
+   * @param buf               the given byte buffer into which the data is read
-      final long startInBlk, final long endInBlk, byte[] buf, int offset,
+      final long startInBlk, final long endInBlk, ByteBuffer buf,
-        int nread = reader.readAll(buf, offset, len);
+
+        //Behave exactly as the readAll() call
+        ByteBuffer tmp = buf.duplicate();
+        tmp.limit(tmp.position() + len);
+        tmp = tmp.slice();
+        int nread = 0;
+        int ret;
+        while (true) {
+          ret = reader.read(tmp);
+          if (ret <= 0) {
+            break;
+          }
+          nread += ret;
+        }
+        buf.position(buf.position() + nread);
+
-      long end, byte[] buf, int offset, CorruptedBlocks corruptedBlocks)
+      long end, ByteBuffer buf, CorruptedBlocks corruptedBlocks)
-            System.arraycopy(result.array(), result.position(), buf, offset,
-                len);
+            result.flip();
+            buf.put(result);
-          System.arraycopy(result.array(), result.position(), buf, offset,
-              len);
+          result.flip();
+          buf.put(result);
-    if (ex instanceof InvalidBlockTokenException || ex instanceof InvalidToken) {
+    if (ex instanceof InvalidBlockTokenException ||
+        ex instanceof InvalidToken) {
-      int retLen = pread(position, buffer, offset, length);
+      ByteBuffer bb = ByteBuffer.wrap(buffer, offset, length);
+      int retLen = pread(position, bb);
-  private int pread(long position, byte[] buffer, int offset, int length)
+  private int pread(long position, ByteBuffer buffer)
+    int length = buffer.remaining();
-      long bytesToRead = Math.min(remaining, blk.getBlockSize() - targetStart);
+      int bytesToRead = (int) Math.min(remaining,
+          blk.getBlockSize() - targetStart);
+      long targetEnd = targetStart + bytesToRead - 1;
-              targetStart + bytesToRead - 1, buffer, offset, corruptedBlocks);
+              targetEnd, buffer, corruptedBlocks);
-          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,
-              buffer, offset, corruptedBlocks);
+          fetchBlockByteRange(blk, targetStart, targetEnd,
+              buffer, corruptedBlocks);
-      offset += bytesToRead;
-  public synchronized boolean seekToNewSource(long targetPos) throws IOException {
+  public synchronized boolean seekToNewSource(long targetPos)
+      throws IOException {

INS43 INS43 INS43 INS43 INS60 INS42 UPD66 INS42 INS42 INS42 INS39 INS59 INS60 INS42 INS32 INS60 INS43 INS59 INS42 INS42 UPD39 INS39 INS59 INS60 INS21 INS21 INS60 INS60 INS61 INS21 INS42 INS42 INS32 INS11 INS42 MOV27 INS43 INS59 INS32 INS7 MOV39 INS59 INS39 INS59 INS9 INS8 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS39 MOV32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 MOV42 INS34 INS42 INS21 INS25 INS21 MOV42 UPD42 MOV42 INS27 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS27 INS8 INS7 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS34 INS10 INS42 INS42 INS42 UPD42 MOV42 INS21 INS21 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL39 DEL85 DEL5 DEL39 DEL42 DEL44 DEL42 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL66 DEL65 DEL39 DEL85 DEL5 DEL39 DEL42 DEL44 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL39 DEL85 DEL5 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL27 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL7 DEL21