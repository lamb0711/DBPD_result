YARN-8776. Implement Container Exec feature in LinuxContainerExecutor. Contributed by Eric Yang

-import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import java.io.OutputStream;
+import java.io.InputStream;
+  /**
+   *
+   * @param prefixCommands
+   * @param operation
+   * @return stdin and stdout of container exec
+   * @throws PrivilegedOperationException
+   */
+  public IOStreamPair executePrivilegedInteractiveOperation(
+      List<String> prefixCommands, PrivilegedOperation operation)
+      throws PrivilegedOperationException, InterruptedException {
+    String[] fullCommandArray = getPrivilegedOperationExecutionCommand(
+        prefixCommands, operation);
+    ProcessBuilder pb = new ProcessBuilder(fullCommandArray);
+    OutputStream stdin;
+    InputStream stdout;
+    try {
+      pb.redirectErrorStream(true);
+      Process p = pb.start();
+      stdin = p.getOutputStream();
+      stdout = p.getInputStream();
+
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("command array:");
+        LOG.debug(Arrays.toString(fullCommandArray));
+      }
+    } catch (ExitCodeException e) {
+      if (operation.isFailureLoggingEnabled()) {
+        StringBuilder logBuilder = new StringBuilder(
+            "Interactive Shell execution returned exit code: ")
+            .append(e.getExitCode())
+            .append(". Privileged Interactive Operation Stderr: ")
+            .append(System.lineSeparator())
+            .append(e.getMessage())
+            .append(System.lineSeparator());
+        logBuilder.append("Full command array for failed execution: ")
+            .append(System.lineSeparator());
+        logBuilder.append(Arrays.toString(fullCommandArray));
+
+        LOG.warn(logBuilder.toString());
+      }
+
+      //stderr from shell executor seems to be stuffed into the exception
+      //'message' - so, we have to extract it and set it as the error out
+      throw new PrivilegedOperationException(e, e.getExitCode(),
+          pb.redirectError().toString(), e.getMessage());
+    } catch (IOException e) {
+      LOG.warn("IOException executing command: ", e);
+      throw new PrivilegedOperationException(e);
+    }
+
+    return new IOStreamPair(stdout, stdin);
+  }
+

MOV26 INS26 INS26 UPD40 INS40 INS40 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS74 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS54 INS41 INS42 INS42 INS66 INS42 INS43 INS43 INS42 INS5 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS14 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS21 INS60 INS21 INS21 INS25 INS44 INS8 INS44 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS43 INS59 INS7 INS7 INS32 INS8 INS43 INS42 INS25 INS53 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS32 INS8 INS14 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS60 INS21 INS21 INS21 INS43 INS42 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS14 INS42 INS32 INS43 INS45 INS42 INS42 INS42