HDFS-9721. Allow Delimited PB OIV tool to run upon fsimage that contains INodeReference. (Xiao Chen via lei)

+import com.google.common.collect.ImmutableList;
+    @Override
-      Preconditions.checkState(parent != null,
-          "Can not find parent directory for INode: %s", inode);
+      if (parent == null) {
+        // The inode is an INodeReference, which is generated from snapshot.
+        // For delimited oiv tool, no need to print out metadata in snapshots.
+        PBImageTextWriter.ignoreSnapshotName(inode);
+      }
-      Preconditions.checkState(bytes != null && bytes.length == 8,
-          "Can not find parent directory for inode %s, "
-              + "fsimage might be corrupted", inode);
+      if (bytes == null) {
+        // The inode is an INodeReference, which is generated from snapshot.
+        // For delimited oiv tool, no need to print out metadata in snapshots.
+        PBImageTextWriter.ignoreSnapshotName(inode);
+      }
+      if (bytes.length != 8) {
+        throw new IOException(
+            "bytes array length error. Actual length is " + bytes.length);
+      }
-        if (parent != INodeId.ROOT_INODE_ID) {
-          Preconditions.checkState(bytes != null,
-              "Can not find parent directory for inode %s, "
-                  + ", the fsimage might be corrupted.", parent);
+        if (parent != INodeId.ROOT_INODE_ID && bytes == null) {
+          // The parent is an INodeReference, which is generated from snapshot.
+          // For delimited oiv tool, no need to print out metadata in snapshots.
+          PBImageTextWriter.ignoreSnapshotName(parent);
+    out.flush();
+  /**
+   * Get text output for the header line.
+   */
+  abstract protected String getHeader();
+
+      ImmutableList<Long> refIdList = null;
+          LOG.info("Loading string table");
+        case INODE_REFERENCE:
+          // Load INodeReference so that all INodes can be processed.
+          // Snapshots are not handled and will just be ignored for now.
+          LOG.info("Loading inode references");
+          refIdList = FSImageLoader.loadINodeReferenceSection(is);
+          break;
-      loadINodeDirSection(fin, sections, summary, conf);
+      loadINodeDirSection(fin, sections, summary, conf, refIdList);
+    out.println(getHeader());
-      FileSummary summary, Configuration conf)
+      FileSummary summary, Configuration conf, List<Long> refIdList)
-        buildNamespace(is);
+        buildNamespace(is, refIdList);
-  private void buildNamespace(InputStream in) throws IOException {
+  private void buildNamespace(InputStream in, List<Long> refIdList)
+      throws IOException {
-      // Referred INode is not support for now.
-      Preconditions.checkState(e.getRefChildrenCount() == 0);
+      for (int i = e.getChildrenCount();
+           i < e.getChildrenCount() + e.getRefChildrenCount(); i++) {
+        int refId = e.getRefChildren(i - e.getChildrenCount());
+        metadataMap.putDirChild(parentId, refIdList.get(refId));
+      }
+    long ignored = 0;
+    long ignoredSnapshots = 0;
-      String parentPath = metadataMap.getParentPath(p.getId());
-      out.println(getEntry(parentPath, p));
+      try {
+        String parentPath = metadataMap.getParentPath(p.getId());
+        out.println(getEntry(parentPath, p));
+      } catch (IOException ioe) {
+        ignored++;
+        if (!(ioe instanceof IgnoreSnapshotException)) {
+          LOG.warn("Exception caught, ignoring node:{}", p.getId(), ioe);
+        } else {
+          ignoredSnapshots++;
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Exception caught, ignoring node:{}.", p.getId(), ioe);
+          }
+        }
+      }
+    if (ignored > 0) {
+      LOG.warn("Ignored {} nodes, including {} in snapshots. Please turn on"
+              + " debug log for details", ignored, ignoredSnapshots);
+    }
+
+  static void ignoreSnapshotName(long inode) throws IOException {
+    // Ignore snapshots - we want the output similar to -ls -R.
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("No snapshot name found for inode {}", inode);
+    }
+    throw new IgnoreSnapshotException();
+  }

INS26 INS40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS21 INS65 INS42 INS21 INS74 INS42 INS74 INS42 INS60 INS60 INS25 INS39 INS42 INS42 INS25 INS53 INS42 INS25 INS25 INS25 INS32 INS66 INS32 INS43 INS43 INS43 INS43 INS39 INS59 INS39 INS59 INS27 INS8 INS32 INS8 INS14 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS60 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS24 INS42 INS34 INS42 INS34 INS54 INS42 INS34 INS21 INS42 INS42 INS21 INS43 MOV42 MOV33 INS21 MOV42 MOV33 INS21 MOV40 MOV34 INS53 INS74 INS59 INS42 INS58 INS27 INS37 INS8 INS8 INS12 INS32 INS32 INS42 INS32 INS32 INS14 INS27 INS43 INS43 INS42 INS33 INS42 INS39 INS59 INS42 UPD27 MOV27 INS42 INS60 MOV21 MOV60 MOV21 INS44 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS43 INS27 MOV27 INS27 INS42 INS42 INS21 INS21 INS21 INS49 INS10 INS42 INS32 INS32 INS39 INS59 INS32 INS43 INS42 INS21 INS25 INS45 INS45 INS42 UPD45 MOV45 INS40 INS42 INS33 INS32 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS37 INS38 INS8 INS8 UPD42 UPD42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS36 INS21 INS21 INS25 INS42 INS42 INS42 INS42 INS32 INS62 INS32 INS37 INS32 INS8 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL27 DEL45 DEL32 DEL21 DEL42 DEL42 DEL27 DEL27 DEL27 DEL45 DEL27 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL45 DEL45 DEL27 DEL34 DEL32