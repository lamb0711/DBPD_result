HDFS-12359. Re-encryption should operate with minimum KMS ACL requirements.

-import org.apache.hadoop.crypto.key.KeyProvider.KeyVersion;
-    FSPermissionChecker pc = getPermissionChecker();
-    // get keyVersionName out of the lock. This keyVersionName will be used
-    // as the target keyVersion for the entire re-encryption.
-    // This means all edek's keyVersion will be compared with this one, and
-    // kms is only contacted if the edek's keyVersion is different.
-    final KeyVersion kv =
-        FSDirEncryptionZoneOp.getLatestKeyVersion(dir, zone, pc);
-    provider.invalidateCache(kv.getName());
+    String keyVersionName = null;
+    if (action == ReencryptAction.START) {
+      // get zone's latest key version name out of the lock.
+      keyVersionName = FSDirEncryptionZoneOp.getCurrentKeyVersion(dir, zone);
+      if (keyVersionName == null) {
+        throw new IOException("Failed to get key version name for " + zone);
+      }
+    }
-      checkNameNodeSafeMode(
-          "NameNode in safemode, cannot " + action + " re-encryption on zone "
-              + zone);
-      switch (action) {
-      case START:
-        FSDirEncryptionZoneOp
-            .reencryptEncryptionZone(dir, zone, kv.getVersionName(),
-                logRetryCache);
-        break;
-      case CANCEL:
-        FSDirEncryptionZoneOp
-            .cancelReencryptEncryptionZone(dir, zone, logRetryCache);
-        break;
-      default:
-        throw new IOException(
-            "Re-encryption action " + action + " is not supported");
+      checkNameNodeSafeMode("NameNode in safemode, cannot " + action
+          + " re-encryption on zone " + zone);
+      final FSPermissionChecker pc = dir.getPermissionChecker();
+      List<XAttr> xattrs;
+      dir.writeLock();
+      try {
+        final INodesInPath iip = dir.resolvePath(pc, zone, DirOp.WRITE);
+        if (iip.getLastINode() == null) {
+          throw new FileNotFoundException(zone + " does not exist.");
+        }
+        switch (action) {
+        case START:
+          xattrs = FSDirEncryptionZoneOp
+              .reencryptEncryptionZone(dir, iip, keyVersionName);
+          break;
+        case CANCEL:
+          xattrs =
+              FSDirEncryptionZoneOp.cancelReencryptEncryptionZone(dir, iip);
+          break;
+        default:
+          throw new IOException(
+              "Re-encryption action " + action + " is not supported");
+        }
+      } finally {
+        dir.writeUnlock();
+      }
+      if (xattrs != null && !xattrs.isEmpty()) {
+        getEditLog().logSetXAttrs(zone, xattrs, logRetryCache);

INS8 MOV25 INS60 INS25 MOV21 INS54 MOV21 INS43 INS59 INS27 INS8 INS8 MOV8 INS42 INS42 INS33 INS42 INS40 INS21 INS25 MOV21 MOV21 MOV21 MOV60 INS60 INS21 INS54 INS25 INS7 INS27 INS8 INS83 INS74 INS59 INS32 INS8 INS8 INS27 INS8 INS42 INS32 INS42 INS33 INS53 INS43 INS43 INS42 INS42 INS42 MOV60 INS25 MOV50 INS21 INS27 INS38 INS21 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 UPD43 INS27 INS8 INS32 INS42 INS33 INS32 INS32 INS43 INS27 UPD42 UPD42 INS32 INS33 INS53 INS7 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 UPD42 UPD42 UPD42 INS40 UPD42 MOV42 UPD42 MOV42 INS14 INS42 INS32 INS42 INS32 INS42 INS43 INS27 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS45 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL54 DEL8