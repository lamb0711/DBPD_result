YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.

+import java.util.ArrayList;
+import java.util.List;
+
+import com.google.common.collect.ImmutableSet;
+import org.apache.hadoop.yarn.api.records.NodeLabel;
+
+  private static final String ADD_LABEL_FORMAT_ERR_MSG =
+      "Input format for adding node-labels is not correct, it should be "
+          + "labelName1[(exclusive=true/false)],LabelName2[] ..";
+
+  public static final String NO_LABEL_ERR_MSG =
+      "No cluster node-labels are specified";
+
+   * Creates node labels from string
+   * @param args nodelabels string to be parsed
+   * @return list of node labels
+   */
+  public static List<NodeLabel> buildNodeLabelsFromStr(String args) {
+    List<NodeLabel> nodeLabels = new ArrayList<>();
+    for (String p : args.split(",")) {
+      if (!p.trim().isEmpty()) {
+        String labelName = p;
+
+        // Try to parse exclusive
+        boolean exclusive = NodeLabel.DEFAULT_NODE_LABEL_EXCLUSIVITY;
+        int leftParenthesisIdx = p.indexOf("(");
+        int rightParenthesisIdx = p.indexOf(")");
+
+        if ((leftParenthesisIdx == -1 && rightParenthesisIdx != -1)
+            || (leftParenthesisIdx != -1 && rightParenthesisIdx == -1)) {
+          // Parentheses not match
+          throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);
+        }
+
+        if (leftParenthesisIdx > 0 && rightParenthesisIdx > 0) {
+          if (leftParenthesisIdx > rightParenthesisIdx) {
+            // Parentheses not match
+            throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);
+          }
+
+          String property = p.substring(p.indexOf("(") + 1, p.indexOf(")"));
+          if (property.contains("=")) {
+            String key = property.substring(0, property.indexOf("=")).trim();
+            String value =
+                property
+                    .substring(property.indexOf("=") + 1, property.length())
+                    .trim();
+
+            // Now we only support one property, which is exclusive, so check if
+            // key = exclusive and value = {true/false}
+            if (key.equals("exclusive")
+                && ImmutableSet.of("true", "false").contains(value)) {
+              exclusive = Boolean.parseBoolean(value);
+            } else {
+              throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);
+            }
+          } else if (!property.trim().isEmpty()) {
+            throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);
+          }
+        }
+
+        // Try to get labelName if there's "(..)"
+        if (labelName.contains("(")) {
+          labelName = labelName.substring(0, labelName.indexOf("(")).trim();
+        }
+
+        nodeLabels.add(NodeLabel.newInstance(labelName, exclusive));
+      }
+    }
+
+    if (nodeLabels.isEmpty()) {
+      throw new IllegalArgumentException(NO_LABEL_ERR_MSG);
+    }
+    return nodeLabels;
+  }
+
+  /**

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS74 INS42 INS44 INS8 INS42 INS42 INS27 INS42 INS42 INS45 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS60 INS70 INS25 INS41 INS45 INS45 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS8 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS45 INS25 INS42 INS42 INS53 INS42 INS42 INS74 INS42 INS38 INS8 INS14 INS43 INS32 INS60 INS60 INS60 INS60 INS25 INS25 INS25 INS21 INS43 INS42 INS42 INS32 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS36 INS36 INS53 INS27 INS27 INS25 INS60 INS25 INS42 INS42 INS45 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS27 INS27 INS14 INS42 INS34 INS42 INS34 INS27 INS8 INS43 INS59 INS32 INS8 INS25 INS7 INS42 INS42 INS42 INS42 INS27 INS27 INS27 INS27 INS43 INS42 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS45 INS60 INS60 INS25 INS38 INS8 INS42 INS32 INS42 INS38 INS42 INS38 INS42 INS38 INS42 INS38 INS42 INS14 INS42 INS42 INS27 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS53 INS32 INS42 INS34 INS34 INS34 INS34 INS43 INS42 INS32 INS34 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS21 INS53 INS32 INS42 INS14 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS7 INS14 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS45 INS45 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS45 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45