HDFS-11493. Ozone: SCM: Add the ability to handle container reports. Contributed by Anu Engineer.

-/**
+/*
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Preconditions;
+import org.apache.hadoop.util.Time;
-
-  private final Map<DatanodeID, List<SCMCommand>> commandMap;
-  private final Lock lock;
-  // This map is used as default return value.
+  // This list is used as default return value.
+  private final Map<DatanodeID, Commands> commandMap;
+  private final Lock lock;
+  private long commandsInQueue;
+
+  /**
+   * Returns number of commands in queue.
+   * @return Command Count.
+   */
+  public long getCommandsInQueue() {
+    return commandsInQueue;
+  }
+   * TODO : Add a flusher thread that throws away commands older than a certain
+   * time period.
+    commandsInQueue = 0;
+  }
+
+  /**
+   * This function is used only for test purposes.
+   */
+  @VisibleForTesting
+  public void clear() {
+    lock.lock();
+    try {
+      commandMap.clear();
+      commandsInQueue = 0;
+    } finally {
+      lock.unlock();
+    }
-      List<SCMCommand> cmds = commandMap.remove(datanodeID);
-      return cmds == null ? DEFAULT_LIST : cmds;
+      Commands cmds = commandMap.remove(datanodeID);
+      List<SCMCommand> cmdList = null;
+      if(cmds != null) {
+        cmdList = cmds.getCommands();
+        commandsInQueue -= cmdList.size() > 0 ? cmdList.size() : 0;
+        // A post condition really.
+        Preconditions.checkState(commandsInQueue >= 0);
+      }
+      return cmds == null ? DEFAULT_LIST : cmdList;
-  void addCommand(final DatanodeID datanodeID, final SCMCommand command) {
+  public void addCommand(final DatanodeID datanodeID, final SCMCommand
+      command) {
-        LinkedList<SCMCommand> newList = new LinkedList<>();
-        newList.add(command);
-        commandMap.put(datanodeID, newList);
+        commandMap.put(datanodeID, new Commands(command));
+      commandsInQueue++;
+  /**
+   * Class that stores commands for a datanode.
+   */
+  private static class Commands {
+    private long updateTime;
+    private long readTime;
+    private List<SCMCommand> commands;
+
+    /**
+     * Constructs a Commands class.
+     */
+    Commands() {
+      commands = new LinkedList<>();
+      updateTime = 0;
+      readTime = 0;
+    }
+
+    /**
+     * Creates the object and populates with the command.
+     * @param command command to add to queue.
+     */
+    Commands(SCMCommand command) {
+      this();
+      this.add(command);
+    }
+
+    /**
+     * Gets the last time the commands for this node was updated.
+     * @return Time stamp
+     */
+    public long getUpdateTime() {
+      return updateTime;
+    }
+
+    /**
+     * Gets the last read time.
+     * @return last time when these commands were read from this queue.
+     */
+    public long getReadTime() {
+      return readTime;
+    }
+
+    /**
+     * Adds a command to the list.
+     *
+     * @param command SCMCommand
+     */
+    public void add(SCMCommand command) {
+      this.commands.add(command);
+      updateTime = Time.monotonicNow();
+    }
+
+    /**
+     * Returns the commands for this datanode.
+     * @return command list.
+     */
+    public List<SCMCommand> getCommands() {
+      List<SCMCommand> temp = this.commands;
+      this.commands = new LinkedList<>();
+      readTime = Time.monotonicNow();
+      return temp;
+    }
+  }

INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS23 INS31 INS31 INS55 UPD74 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS83 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS42 INS65 INS65 INS41 INS21 INS65 INS42 INS21 INS54 INS65 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS74 INS59 INS29 INS42 INS8 INS29 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 MOV74 INS42 INS8 INS42 INS66 INS66 INS42 INS66 INS66 INS7 INS66 INS32 INS8 INS8 INS66 INS42 INS42 INS43 INS43 INS42 INS65 INS21 INS21 INS21 INS65 INS65 MOV43 INS42 INS17 INS21 INS65 INS65 INS41 INS65 INS65 INS41 INS65 INS65 INS43 INS42 INS21 INS21 INS65 INS65 INS60 INS21 INS21 INS41 INS42 INS34 INS42 INS42 INS21 INS21 INS21 INS60 INS25 INS21 INS42 INS42 INS66 INS7 INS7 INS7 INS66 INS42 INS66 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS32 INS7 INS66 INS66 INS74 INS59 INS7 INS7 INS42 INS32 INS7 INS32 INS43 MOV74 INS59 INS27 INS8 INS37 INS42 MOV14 INS42 INS34 INS42 INS34 INS52 INS42 INS42 INS22 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS22 INS22 INS14 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS21 INS21 INS21 UPD42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS74 INS42 INS42 INS7 INS7 INS32 INS43 INS42 INS32 INS42 INS16 INS42 INS42 INS27 INS14 INS42 INS42 INS42 INS27 INS32 INS34 INS42 INS34 INS43 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42