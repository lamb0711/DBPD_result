HDFS-11058. Implement 'hadoop fs -df' command for ViewFileSystem. Contributed by Manoj Govindassamy.

+import java.net.URI;
+import java.util.Map;
+import org.apache.hadoop.fs.viewfs.ViewFileSystem;
+import org.apache.hadoop.fs.viewfs.ViewFileSystemUtil;
-/** Base class for commands related to viewing filesystem usage, such as
- * du and df
+/**
+ * Base class for commands related to viewing filesystem usage,
+ * such as du and df.
-  protected boolean humanReadable = false;
-  protected TableBuilder usagesTable;
-  
+  private boolean humanReadable = false;
+  private TableBuilder usagesTable;
+
+  public TableBuilder getUsagesTable() {
+    return usagesTable;
+  }
+
+  public void setUsagesTable(TableBuilder usagesTable) {
+    this.usagesTable = usagesTable;
+  }
+
+  public void setHumanReadable(boolean humanReadable) {
+    this.humanReadable = humanReadable;
+  }
+
-      humanReadable = cf.getOpt("h");
+      setHumanReadable(cf.getOpt("h"));
-      usagesTable = new TableBuilder(
-          "Filesystem", "Size", "Used", "Available", "Use%");
-      usagesTable.setRightAlign(1, 2, 3, 4);
-      
+      setUsagesTable(new TableBuilder(
+          "Filesystem", "Size", "Used", "Available", "Use%", "Mounted on"));
+      getUsagesTable().setRightAlign(1, 2, 3, 4);
+
-      if (!usagesTable.isEmpty()) {
-        usagesTable.printToStream(out);
+      if (!getUsagesTable().isEmpty()) {
+        getUsagesTable().printToStream(out);
+    /**
+     * Add a new row to the usages table for the given FileSystem URI.
+     *
+     * @param uri - FileSystem URI
+     * @param fsStatus - FileSystem status
+     * @param mountedOnPath - FileSystem mounted on path
+     */
+    private void addToUsagesTable(URI uri, FsStatus fsStatus,
+        String mountedOnPath) {
+      long size = fsStatus.getCapacity();
+      long used = fsStatus.getUsed();
+      long free = fsStatus.getRemaining();
+      getUsagesTable().addRow(
+          uri,
+          formatSize(size),
+          formatSize(used),
+          formatSize(free),
+          StringUtils.formatPercent((double) used / (double) size, 0),
+          mountedOnPath
+      );
+    }
+
-      FsStatus fsStats = item.fs.getStatus(item.path);
-      long size = fsStats.getCapacity();
-      long used = fsStats.getUsed();
-      long free = fsStats.getRemaining();
+      if (ViewFileSystemUtil.isViewFileSystem(item.fs)) {
+        ViewFileSystem viewFileSystem = (ViewFileSystem) item.fs;
+        Map<ViewFileSystem.MountPoint, FsStatus>  fsStatusMap =
+            ViewFileSystemUtil.getStatus(viewFileSystem, item.path);
-      usagesTable.addRow(
-          item.fs.getUri(),
-          formatSize(size),
-          formatSize(used),
-          formatSize(free),
-          StringUtils.formatPercent((double)used/(double)size, 0)
-      );
+        for (Map.Entry<ViewFileSystem.MountPoint, FsStatus> entry :
+            fsStatusMap.entrySet()) {
+          ViewFileSystem.MountPoint viewFsMountPoint = entry.getKey();
+          FsStatus fsStatus = entry.getValue();
+
+          // Add the viewfs mount point status to report
+          URI[] mountPointFileSystemURIs =
+              viewFsMountPoint.getTargetFileSystemURIs();
+          // Since LinkMerge is not supported yet, we
+          // should ideally see mountPointFileSystemURIs
+          // array with only one element.
+          addToUsagesTable(mountPointFileSystemURIs[0],
+              fsStatus, viewFsMountPoint.getMountedOnPath().toString());
+        }
+      } else {
+        // Hide the columns specific to ViewFileSystem
+        getUsagesTable().setColumnHide(5, true);
+        FsStatus fsStatus = item.fs.getStatus(item.path);
+        addToUsagesTable(item.fs.getUri(), fsStatus, "/");
+      }
+
-      humanReadable = cf.getOpt("h");
+      setHumanReadable(cf.getOpt("h"));
-      usagesTable = new TableBuilder(3);
+      setUsagesTable(new TableBuilder(3));
-      if (!usagesTable.isEmpty()) {
-        usagesTable.printToStream(out);
+      if (!getUsagesTable().isEmpty()) {
+        getUsagesTable().printToStream(out);
-      usagesTable.addRow(formatSize(length), formatSize(spaceConsumed), item);
+      getUsagesTable().addRow(formatSize(length),
+          formatSize(spaceConsumed), item);
+    private boolean[] hide;
+      hide = new boolean[columns];
-    
+
+    /**
+     * Hide the given column index
+     */
+    public void setColumnHide(int columnIndex, boolean hideCol) {
+      hide[columnIndex] = hideCol;
+    }
+
-     * Render the table to a stream 
+     * Render the table to a stream.
+        if (hide[i]) {
+          continue;
+        }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 UPD83 UPD83 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS31 INS23 INS31 UPD66 UPD66 INS42 INS41 INS43 INS42 INS21 INS39 INS42 INS21 INS29 UPD83 INS42 INS44 INS44 INS44 MOV78 INS83 INS39 INS42 MOV44 MOV43 INS8 INS83 INS5 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS7 INS7 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS39 INS85 INS42 INS21 INS65 INS39 INS42 INS39 INS42 INS21 INS22 INS42 INS22 INS42 INS32 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS32 INS8 INS8 INS32 INS32 INS7 INS66 INS7 UPD66 INS52 INS42 INS52 INS42 INS42 MOV32 INS42 INS14 INS32 INS32 INS42 INS42 INS42 INS42 INS40 INS60 INS60 INS70 INS21 MOV60 INS21 INS42 MOV32 INS42 MOV14 INS32 INS42 INS3 INS2 INS42 INS25 MOV43 MOV45 MOV45 MOV45 MOV45 MOV45 INS45 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 UPD42 MOV42 INS43 INS59 INS74 INS59 INS44 INS32 INS8 INS32 INS32 INS32 UPD42 MOV42 INS5 INS42 INS42 INS42 INS2 INS8 UPD42 MOV42 INS32 INS42 INS42 INS11 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS60 INS60 INS21 INS32 INS42 INS34 INS9 UPD42 INS42 MOV32 INS42 INS45 UPD42 MOV42 INS32 INS39 INS85 INS42 INS42 INS18 UPD42 MOV42 INS43 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS5 INS59 INS32 INS42 UPD42 MOV42 INS42 INS40 INS40 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS2 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 DEL42 DEL7 DEL42 DEL14 DEL7 DEL42 DEL42 DEL7 DEL42 DEL7