HDFS-7056. Snapshot support for truncate. Contributed by Konstantin Shvachko and Plamen Jeliazkov.
+import java.util.HashSet;
+import java.util.Set;
+    recordModification(latestSnapshotId, false);
+  }
+
+  public void recordModification(final int latestSnapshotId, boolean withBlocks)
+      throws QuotaExceededException {
-      sf.getDiffs().saveSelf2Snapshot(latestSnapshotId, this, null);
+      sf.getDiffs().saveSelf2Snapshot(latestSnapshotId, this, null, withBlocks);
-  
+
+  /** @return blocks of the file corresponding to the snapshot. */
+  public BlockInfo[] getBlocks(int snapshot) {
+    if(snapshot == CURRENT_STATE_ID || getDiffs() == null)
+      return getBlocks();
+    FileDiff diff = getDiffs().getDiffById(snapshot);
+    BlockInfo[] snapshotBlocks = diff == null ? getBlocks() : diff.getBlocks();
+    if(snapshotBlocks != null)
+      return snapshotBlocks;
+    // Blocks are not in the current snapshot
+    // Find next snapshot with blocks present or return current file blocks
+    snapshotBlocks = getDiffs().findLaterSnapshotBlocks(diff.getSnapshotId());
+    return (snapshotBlocks == null) ? getBlocks() : snapshotBlocks;
+  }
+
-    
+      sf.getDiffs().destroyAndCollectSnapshotBlocks(collectedBlocks);
-  
+
-    computeContentSummary4Snapshot(summary.getCounts());
-    computeContentSummary4Current(summary.getCounts());
-    return summary;
-  }
-
-  private void computeContentSummary4Snapshot(final Content.Counts counts) {
-    // file length and diskspace only counted for the latest state of the file
-    // i.e. either the current state or the last snapshot
+    final Content.Counts counts = summary.getCounts();
-    if (sf != null) {
+    if (sf == null) {
+      counts.add(Content.LENGTH, computeFileSize());
+      counts.add(Content.FILE, 1);
+    } else {
-      }
-
-      if (sf.isCurrentFileDeleted()) {
-        final long lastFileSize = diffs.getLast().getFileSize();
-        counts.add(Content.DISKSPACE, lastFileSize * getBlockReplication());
+      } else {
+        counts.add(Content.LENGTH, computeFileSize());
-  }
-
-  private void computeContentSummary4Current(final Content.Counts counts) {
-    FileWithSnapshotFeature sf = this.getFileWithSnapshotFeature();
-    if (sf != null && sf.isCurrentFileDeleted()) {
-      return;
-    }
-
-    counts.add(Content.LENGTH, computeFileSize());
-    counts.add(Content.FILE, 1);
+    return summary;
+  /**
+   * Compute size consumed by all blocks of the current file,
+   * including blocks in its snapshots.
+   * Use preferred block size for the last block if it is under construction.
+   */
-    // use preferred block size for the last block if it is under construction
-    return computeFileSize(true, true) * getBlockReplication();
+    FileWithSnapshotFeature sf = getFileWithSnapshotFeature();
+    if(sf == null) {
+      return computeFileSize(true, true) * getBlockReplication();
+    }
+
+    // Collect all distinct blocks
+    long size = 0;
+    Set<Block> allBlocks = new HashSet<Block>(Arrays.asList(getBlocks()));
+    List<FileDiff> diffs = sf.getDiffs().asList();
+    for(FileDiff diff : diffs) {
+      BlockInfo[] diffBlocks = diff.getBlocks();
+      if (diffBlocks != null) {
+        allBlocks.addAll(Arrays.asList(diffBlocks));
+      }
+    }
+    for(Block block : allBlocks) {
+      size += block.getNumBytes();
+    }
+    // check if the last block is under construction
+    BlockInfo lastBlock = getLastBlock();
+    if(lastBlock != null && lastBlock instanceof BlockInfoUnderConstruction) {
+      size += getPreferredBlockSize() - lastBlock.getNumBytes();
+    }
+    return size * getBlockReplication();
-    //find the minimum n such that the size of the first n blocks > max
+    // find the minimum n such that the size of the first n blocks > max
-    // resize the array.  
-    final BlockInfo[] newBlocks;
-    if (n == 0) {
-      newBlocks = BlockInfo.EMPTY_ARRAY;
-    } else {
-      newBlocks = new BlockInfo[n];
-      System.arraycopy(oldBlocks, 0, newBlocks, 0, n);
-    }
-    // set new blocks
-    setBlocks(newBlocks);
+    // resize the array.
+    truncateBlocksTo(n);
+
+  void truncateBlocksTo(int n) {
+    final BlockInfo[] newBlocks;
+    if (n == 0) {
+      newBlocks = BlockInfo.EMPTY_ARRAY;
+    } else {
+      newBlocks = new BlockInfo[n];
+      System.arraycopy(getBlocks(), 0, newBlocks, 0, n);
+    }
+    // set new blocks
+    setBlocks(newBlocks);
+  }
+
+  public void collectBlocksBeyondSnapshot(BlockInfo[] snapshotBlocks,
+                                          BlocksMapUpdateInfo collectedBlocks) {
+    BlockInfo[] oldBlocks = getBlocks();
+    if(snapshotBlocks == null || oldBlocks == null)
+      return;
+    // Skip blocks in common between the file and the snapshot
+    int n = 0;
+    while(n < oldBlocks.length && n < snapshotBlocks.length &&
+          oldBlocks[n] == snapshotBlocks[n]) {
+      n++;
+    }
+    truncateBlocksTo(n);
+    // Collect the remaining blocks of the file
+    while(n < oldBlocks.length) {
+      collectedBlocks.addDeleteBlock(oldBlocks[n++]);
+    }
+  }
+
+  /** Exclude blocks collected for deletion that belong to a snapshot. */
+  void excludeSnapshotBlocks(int snapshotId,
+                             BlocksMapUpdateInfo collectedBlocks) {
+    if(collectedBlocks == null || collectedBlocks.getToDeleteList().isEmpty())
+      return;
+    FileWithSnapshotFeature sf = getFileWithSnapshotFeature();
+    if(sf == null)
+      return;
+    BlockInfo[] snapshotBlocks = 
+        getDiffs().findEarlierSnapshotBlocks(snapshotId);
+    if(snapshotBlocks == null)
+      return;
+    List<Block> toDelete = collectedBlocks.getToDeleteList();
+    for(Block blk : snapshotBlocks) {
+      if(toDelete.contains(blk))
+        collectedBlocks.removeDeleteBlock(blk);
+    }
+  }
+
+  /**
+   * @return true if the block is contained in a snapshot or false otherwise.
+   */
+  boolean isBlockInLatestSnapshot(BlockInfo block) {
+    FileWithSnapshotFeature sf = this.getFileWithSnapshotFeature();
+    if (sf == null || sf.getDiffs() == null)
+      return false;
+    BlockInfo[] snapshotBlocks =
+        getDiffs().findEarlierSnapshotBlocks(getDiffs().getLastSnapshotId());
+    if(snapshotBlocks == null)
+      return false;
+    return Arrays.asList(snapshotBlocks).contains(block);
+  }

INS26 INS26 MOV31 MOV31 INS40 INS40 INS31 INS31 INS31 INS31 INS31 MOV78 INS83 INS39 INS42 INS44 INS43 INS8 INS44 INS29 INS83 INS5 INS42 INS44 INS8 MOV78 UPD83 INS83 MOV43 INS42 MOV44 INS29 INS39 UPD42 INS39 INS42 INS44 INS8 UPD83 MOV83 MOV39 UPD42 MOV42 INS44 MOV44 INS8 INS29 INS39 INS42 INS44 INS44 MOV8 INS29 UPD39 INS42 INS44 INS8 INS83 INS39 INS42 INS42 INS21 INS39 INS42 INS65 INS43 INS85 INS39 INS42 INS25 INS60 INS60 INS25 INS21 INS41 INS60 MOV21 MOV41 INS65 INS60 INS25 INS60 INS60 INS60 INS70 INS70 INS60 INS25 INS41 INS21 INS39 INS42 MOV60 MOV25 MOV21 INS5 INS42 UPD43 UPD42 INS60 INS25 INS60 INS61 INS21 INS61 INS65 INS39 INS42 INS43 INS42 INS60 INS25 INS60 INS25 INS60 INS70 INS65 INS43 INS42 MOV60 INS25 INS60 INS25 INS41 INS32 INS66 INS42 INS27 INS41 INS43 INS59 INS5 INS59 INS27 INS41 INS7 INS16 INS83 INS43 INS59 UPD27 INS8 INS32 INS66 INS66 INS66 INS43 INS59 INS27 MOV8 INS39 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS44 INS42 INS8 INS43 INS59 INS27 INS8 MOV27 INS32 INS43 INS85 INS42 INS5 INS59 INS27 INS41 INS39 INS59 INS27 INS8 INS32 INS27 INS8 INS66 INS42 UPD27 INS41 INS43 INS59 INS27 INS41 INS5 INS59 INS27 INS41 INS74 INS59 INS44 INS42 INS8 INS66 INS42 INS27 INS41 INS5 INS59 INS27 INS41 INS32 INS42 INS42 INS9 INS27 INS27 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS16 INS42 INS33 INS42 INS42 INS32 INS36 INS32 INS42 INS21 MOV40 INS42 MOV32 MOV21 MOV21 INS42 INS42 MOV40 MOV32 INS42 INS42 INS32 INS42 INS33 INS42 INS34 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS43 INS42 INS21 INS42 INS42 INS32 INS27 INS62 MOV21 UPD42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS27 INS27 INS42 INS34 INS27 INS27 INS21 INS42 INS42 INS42 INS40 INS21 UPD27 INS32 INS42 INS42 INS32 INS42 INS33 INS43 INS85 INS42 INS32 INS42 INS33 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS27 INS27 INS9 INS43 INS85 INS42 INS32 INS42 INS33 INS9 INS32 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS32 INS42 INS42 INS42 INS27 INS32 INS32 INS32 INS42 INS32 INS27 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS32 INS42 INS42 INS5 INS59 INS27 INS8 INS42 INS7 INS42 INS42 INS33 INS42 INS43 INS7 INS42 INS42 INS42 INS33 INS42 INS33 INS27 INS27 INS2 INS2 INS37 INS32 UPD42 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS21 INS42 INS33 INS32 INS33 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS33 MOV21 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS37 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS40 INS32 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 DEL39 DEL42 DEL83 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL31 DEL32 DEL83 DEL32 DEL41 DEL8 DEL83 DEL83 DEL42