Revert "Revert "HADOOP-12957. Limit the number of outstanding async calls.  Contributed by Xiaobing Zhou""

This reverts commit 4d36b221a24e3b626bb91093b0bb0fd377061cae.

-  
+  private final int maxAsyncCalls;
+  private final AtomicInteger asyncCallCounter = new AtomicInteger(0);
+
+    this.maxAsyncCalls = conf.getInt(
+        CommonConfigurationKeys.IPC_CLIENT_ASYNC_CALLS_MAX_KEY,
+        CommonConfigurationKeys.IPC_CLIENT_ASYNC_CALLS_MAX_DEFAULT);
+  private void checkAsyncCall() throws IOException {
+    if (isAsynchronousMode()) {
+      if (asyncCallCounter.incrementAndGet() > maxAsyncCalls) {
+        asyncCallCounter.decrementAndGet();
+        String errMsg = String.format(
+            "Exceeded limit of max asynchronous calls: %d, " +
+            "please configure %s to adjust it.",
+            maxAsyncCalls,
+            CommonConfigurationKeys.IPC_CLIENT_ASYNC_CALLS_MAX_KEY);
+        throw new AsyncCallLimitExceededException(errMsg);
+      }
+    }
+  }
+
+
-      connection.sendRpcRequest(call);                 // send the rpc request
-    } catch (RejectedExecutionException e) {
-      throw new IOException("connection has been closed", e);
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-      LOG.warn("interrupted waiting to send rpc request to server", e);
-      throw new IOException(e);
+      checkAsyncCall();
+      try {
+        connection.sendRpcRequest(call);                 // send the rpc request
+      } catch (RejectedExecutionException e) {
+        throw new IOException("connection has been closed", e);
+      } catch (InterruptedException e) {
+        Thread.currentThread().interrupt();
+        LOG.warn("interrupted waiting to send rpc request to server", e);
+        throw new IOException(e);
+      }
+    } catch(Exception e) {
+      if (isAsynchronousMode()) {
+        releaseAsyncCall();
+      }
+      throw e;
+        private final AtomicBoolean callled = new AtomicBoolean(false);
-          try {
-            set(getRpcResponse(call, connection));
-          } catch (IOException ie) {
-            setException(ie);
+          if (callled.compareAndSet(false, true)) {
+            try {
+              set(getRpcResponse(call, connection));
+            } catch (IOException ie) {
+              setException(ie);
+            } finally {
+              releaseAsyncCall();
+            }
+  private void releaseAsyncCall() {
+    asyncCallCounter.decrementAndGet();
+  }
+
+  @VisibleForTesting
+  int getAsyncCallCount() {
+    return asyncCallCounter.get();
+  }
+

INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS78 INS39 INS42 INS8 INS42 INS42 INS42 INS14 INS21 INS42 INS25 INS54 INS21 INS42 INS41 INS43 INS34 INS7 INS32 INS8 INS8 INS12 INS32 INS32 INS42 INS22 INS32 INS42 INS25 INS21 MOV54 INS44 INS8 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS27 INS8 INS32 INS43 INS42 INS25 INS53 INS32 INS42 INS21 INS60 INS53 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS32 INS43 INS59 INS14 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS32 INS23 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS83 INS83 INS43 INS59 INS8 INS45 INS45 INS42 INS42 INS14 INS25 MOV41 INS43 INS9 INS32 MOV8 INS42 INS42 INS42 INS9 INS9 INS8 INS21 INS32 INS42