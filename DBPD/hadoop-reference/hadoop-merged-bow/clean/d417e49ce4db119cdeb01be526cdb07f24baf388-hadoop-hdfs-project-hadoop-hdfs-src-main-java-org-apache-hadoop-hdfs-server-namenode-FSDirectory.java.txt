HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ListIterator;
+                            List<XAttr> xAttrs,
+        if (xAttrs != null) {
+          XAttrStorage.updateINodeXAttrs(newNode, xAttrs,
+              Snapshot.CURRENT_STATE_ID);
+        }
-  XAttr removeXAttr(String src, XAttr xAttr) throws IOException {
+  /**
+   * Removes a list of XAttrs from an inode at a path.
+   *
+   * @param src path of inode
+   * @param toRemove XAttrs to be removed
+   * @return List of XAttrs that were removed
+   * @throws IOException if the inode does not exist, if quota is exceeded
+   */
+  List<XAttr> removeXAttrs(final String src, final List<XAttr> toRemove)
+      throws IOException {
-      return unprotectedRemoveXAttr(src, xAttr);
+      return unprotectedRemoveXAttrs(src, toRemove);
-  
-  XAttr unprotectedRemoveXAttr(String src,
-      XAttr xAttr) throws IOException {
+
+  List<XAttr> unprotectedRemoveXAttrs(final String src,
+      final List<XAttr> toRemove) throws IOException {
-    List<XAttr> newXAttrs = filterINodeXAttr(existingXAttrs, xAttr);
+    List<XAttr> removedXAttrs = Lists.newArrayListWithCapacity(toRemove.size());
+    List<XAttr> newXAttrs = filterINodeXAttrs(existingXAttrs, toRemove,
+        removedXAttrs);
-      return xAttr;
+      return removedXAttrs;
-  
-  List<XAttr> filterINodeXAttr(List<XAttr> existingXAttrs, 
-      XAttr xAttr) throws QuotaExceededException {
-    if (existingXAttrs == null || existingXAttrs.isEmpty()) {
+
+  /**
+   * Filter XAttrs from a list of existing XAttrs. Removes matched XAttrs from
+   * toFilter and puts them into filtered. Upon completion,
+   * toFilter contains the filter XAttrs that were not found, while
+   * fitleredXAttrs contains the XAttrs that were found.
+   *
+   * @param existingXAttrs Existing XAttrs to be filtered
+   * @param toFilter XAttrs to filter from the existing XAttrs
+   * @param filtered Return parameter, XAttrs that were filtered
+   * @return List of XAttrs that does not contain filtered XAttrs
+   */
+  @VisibleForTesting
+  List<XAttr> filterINodeXAttrs(final List<XAttr> existingXAttrs,
+      final List<XAttr> toFilter, final List<XAttr> filtered) {
+    if (existingXAttrs == null || existingXAttrs.isEmpty() ||
+        toFilter == null || toFilter.isEmpty()) {
-    
-    List<XAttr> xAttrs = Lists.newArrayListWithCapacity(existingXAttrs.size());
+
+    // Populate a new list with XAttrs that pass the filter
+    List<XAttr> newXAttrs =
+        Lists.newArrayListWithCapacity(existingXAttrs.size());
-      if (!(a.getNameSpace() == xAttr.getNameSpace()
-          && a.getName().equals(xAttr.getName()))) {
-        xAttrs.add(a);
+      boolean add = true;
+      for (ListIterator<XAttr> it = toFilter.listIterator(); it.hasNext()
+          ;) {
+        XAttr filter = it.next();
+        if (a.equalsIgnoreValue(filter)) {
+          add = false;
+          it.remove();
+          filtered.add(filter);
+          break;
+        }
+      }
+      if (add) {
+        newXAttrs.add(a);
-    
-    return xAttrs;
+
+    return newXAttrs;
-  void setXAttr(String src, XAttr xAttr, EnumSet<XAttrSetFlag> flag)
-          throws IOException {
+  void setXAttrs(final String src, final List<XAttr> xAttrs,
+      final EnumSet<XAttrSetFlag> flag) throws IOException {
-      unprotectedSetXAttr(src, xAttr, flag);
+      unprotectedSetXAttrs(src, xAttrs, flag);
-  void unprotectedSetXAttr(String src, XAttr xAttr, 
-      EnumSet<XAttrSetFlag> flag) throws IOException {
+  void unprotectedSetXAttrs(final String src, final List<XAttr> xAttrs,
+      final EnumSet<XAttrSetFlag> flag)
+      throws QuotaExceededException, IOException {
-    List<XAttr> newXAttrs = setINodeXAttr(existingXAttrs, xAttr, flag);
+    List<XAttr> newXAttrs = setINodeXAttrs(existingXAttrs, xAttrs, flag);
-  
-  List<XAttr> setINodeXAttr(List<XAttr> existingXAttrs, XAttr xAttr, 
-      EnumSet<XAttrSetFlag> flag) throws QuotaExceededException, IOException {
-    List<XAttr> xAttrs = Lists.newArrayListWithCapacity(
-        existingXAttrs != null ? existingXAttrs.size() + 1 : 1);
+
+  List<XAttr> setINodeXAttrs(final List<XAttr> existingXAttrs,
+      final List<XAttr> toSet, final EnumSet<XAttrSetFlag> flag)
+      throws IOException {
+    // Check for duplicate XAttrs in toSet
+    // We need to use a custom comparator, so using a HashSet is not suitable
+    for (int i = 0; i < toSet.size(); i++) {
+      for (int j = i + 1; j < toSet.size(); j++) {
+        if (toSet.get(i).equalsIgnoreValue(toSet.get(j))) {
+          throw new IOException("Cannot specify the same XAttr to be set " +
+              "more than once");
+        }
+      }
+    }
+
+    // Count the current number of user-visible XAttrs for limit checking
-    boolean exist = false;
+
+    // The XAttr list is copied to an exactly-sized array when it's stored,
+    // so there's no need to size it precisely here.
+    int newSize = (existingXAttrs != null) ? existingXAttrs.size() : 0;
+    newSize += toSet.size();
+    List<XAttr> xAttrs = Lists.newArrayListWithCapacity(newSize);
+
+    // Check if the XAttr already exists to validate with the provided flag
+    for (XAttr xAttr: toSet) {
+      boolean exist = false;
+      if (existingXAttrs != null) {
+        for (XAttr a : existingXAttrs) {
+          if (a.equalsIgnoreValue(xAttr)) {
+            exist = true;
+            break;
+          }
+        }
+      }
+      XAttrSetFlag.validate(xAttr.getName(), exist, flag);
+      // add the new XAttr since it passed validation
+      xAttrs.add(xAttr);
+      if (isUserVisible(xAttr)) {
+        userVisibleXAttrsNum++;
+      }
+    }
+
+    // Add the existing xattrs back in, if they weren't already set
-      for (XAttr a: existingXAttrs) {
-        if ((a.getNameSpace() == xAttr.getNameSpace()
-            && a.getName().equals(xAttr.getName()))) {
-          exist = true;
-        } else {
-          xAttrs.add(a);
-          
-          if (isUserVisible(a)) {
+      for (XAttr existing : existingXAttrs) {
+        boolean alreadySet = false;
+        for (XAttr set : toSet) {
+          if (set.equalsIgnoreValue(existing)) {
+            alreadySet = true;
+            break;
+          }
+        }
+        if (!alreadySet) {
+          xAttrs.add(existing);
+          if (isUserVisible(existing)) {
-    
-    XAttrSetFlag.validate(xAttr.getName(), exist, flag);
-    xAttrs.add(xAttr);
-    
-    if (isUserVisible(xAttr)) {
-      userVisibleXAttrsNum++;
-    }
-    
+
-    
+

INS26 INS40 INS44 INS29 INS74 UPD42 MOV44 MOV43 MOV74 UPD42 MOV44 INS29 INS78 UPD42 INS44 UPD42 MOV44 MOV44 MOV43 UPD42 MOV44 MOV43 MOV43 UPD42 INS44 MOV44 MOV60 INS74 INS42 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS83 INS83 INS74 UPD42 INS83 INS83 INS74 UPD42 INS60 INS65 INS65 INS65 INS65 INS65 INS42 INS83 INS83 INS74 UPD42 INS83 INS74 INS42 INS83 INS83 INS74 UPD42 INS83 INS83 INS83 INS74 UPD42 INS83 INS42 INS83 INS74 INS83 INS74 INS42 INS83 INS24 INS21 INS60 INS70 INS25 INS43 INS43 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS43 INS43 INS74 INS59 INS74 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS43 INS43 INS43 INS27 UPD42 INS43 INS43 INS43 INS43 MOV74 INS43 INS43 INS43 INS43 INS58 INS27 INS37 INS8 INS39 INS7 MOV74 INS59 MOV44 INS42 INS8 INS27 INS8 INS42 INS42 INS42 MOV42 INS42 MOV42 INS43 INS43 INS42 INS32 INS43 INS43 INS42 MOV42 UPD42 MOV42 INS42 INS27 INS32 UPD42 INS60 INS24 INS25 INS42 MOV42 INS42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS39 INS59 INS42 INS32 INS42 INS24 INS42 MOV16 INS42 INS32 INS42 INS32 MOV60 MOV25 MOV21 MOV21 MOV25 INS42 INS33 INS70 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 UPD42 UPD42 MOV27 INS27 INS42 INS42 INS39 INS59 INS58 INS32 INS8 INS42 MOV8 MOV42 UPD42 UPD42 INS42 INS34 INS42 INS42 INS58 INS27 INS37 INS8 INS36 MOV32 INS34 INS42 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS25 UPD42 UPD42 INS42 INS42 INS42 INS33 INS42 INS9 INS74 INS59 UPD42 MOV42 UPD42 MOV42 INS60 INS25 UPD42 UPD42 INS39 INS59 INS42 INS32 INS42 INS25 MOV27 MOV43 INS42 INS60 INS70 MOV25 INS27 INS8 INS43 INS43 INS42 INS32 MOV43 INS59 INS32 INS8 INS42 INS27 INS42 INS42 INS32 INS8 INS39 INS59 INS44 INS42 INS8 INS38 INS42 INS33 INS21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 MOV42 UPD42 MOV42 INS42 INS21 INS21 INS21 INS10 UPD42 INS42 INS34 INS32 INS42 INS32 INS53 INS25 INS42 INS9 INS43 INS42 INS25 INS42 INS32 INS42 INS42 INS7 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 MOV8 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS40 INS42 INS9 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS10 INS42 INS42 INS42 INS21 INS10 UPD42 UPD42 INS42 INS45 INS45 INS7 INS42 INS9 DEL43 DEL43 DEL43 DEL43 DEL32 DEL32 DEL27 DEL32 DEL42 DEL32 DEL32 DEL27 DEL36 DEL38 DEL25 DEL43 DEL43 DEL34 DEL27 DEL34 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL36