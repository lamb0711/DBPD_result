HDDS-2015. Encrypt/decrypt key using symmetric key while writing/reading

Signed-off-by: Anu Engineer <aengineer@apache.org>

+import org.apache.hadoop.ozone.security.GDPRSymmetricKey;
+import javax.crypto.Cipher;
+import javax.crypto.CipherInputStream;
+import javax.crypto.CipherOutputStream;
+import java.security.InvalidKeyException;
+
+    if(Boolean.valueOf(metadata.get(OzoneConsts.GDPR_FLAG))){
+      try{
+        GDPRSymmetricKey gKey = new GDPRSymmetricKey();
+        metadata.putAll(gKey.getKeyDetails());
+      }catch (Exception e) {
+        if(e instanceof InvalidKeyException &&
+            e.getMessage().contains("Illegal key size or default parameters")) {
+          LOG.error("Missing Unlimited Strength Policy jars. Please install " +
+              "Java Cryptography Extension (JCE) Unlimited Strength " +
+              "Jurisdiction Policy Files");
+        }
+        throw new IOException(e);
+      }
+    }
+
+    } else {
+      try{
+        GDPRSymmetricKey gk;
+        Map<String, String> keyInfoMetadata = keyInfo.getMetadata();
+        if(Boolean.valueOf(keyInfoMetadata.get(OzoneConsts.GDPR_FLAG))){
+          gk = new GDPRSymmetricKey(
+              keyInfoMetadata.get(OzoneConsts.GDPR_SECRET),
+              keyInfoMetadata.get(OzoneConsts.GDPR_ALGORITHM)
+          );
+          gk.getCipher().init(Cipher.DECRYPT_MODE, gk.getSecretKey());
+          return new OzoneInputStream(
+              new CipherInputStream(lengthInputStream, gk.getCipher()));
+        }
+      }catch (Exception ex){
+        throw new IOException(ex);
+      }
+      try{
+        GDPRSymmetricKey gk;
+        Map<String, String> openKeyMetadata =
+            openKey.getKeyInfo().getMetadata();
+        if(Boolean.valueOf(openKeyMetadata.get(OzoneConsts.GDPR_FLAG))){
+          gk = new GDPRSymmetricKey(
+              openKeyMetadata.get(OzoneConsts.GDPR_SECRET),
+              openKeyMetadata.get(OzoneConsts.GDPR_ALGORITHM)
+          );
+          gk.getCipher().init(Cipher.ENCRYPT_MODE, gk.getSecretKey());
+          return new OzoneOutputStream(
+              new CipherOutputStream(keyOutputStream, gk.getCipher()));
+        }
+      }catch (Exception ex){
+        throw new IOException(ex);
+      }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS25 INS32 INS8 INS8 INS8 INS42 INS42 INS32 INS54 INS54 INS54 MOV41 INS42 INS42 INS40 INS8 INS12 INS8 INS12 INS8 INS12 INS60 INS21 INS44 INS8 INS60 INS60 INS25 INS44 INS8 INS60 INS60 INS25 INS44 INS8 INS43 INS59 INS32 INS43 INS42 INS25 INS53 INS43 INS59 INS74 INS59 INS32 INS8 INS43 INS42 INS53 INS43 INS59 INS74 INS59 INS32 MOV8 INS43 INS42 INS53 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS27 INS8 INS14 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS21 INS21 INS41 INS42 INS14 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS21 INS21 INS41 INS42 INS14 INS43 INS42 INS42 INS62 INS32 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS7 INS32 INS14 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS7 INS32 INS14 INS43 INS42 INS42 INS42 INS43 INS32 INS42 INS45 INS32 INS42 INS42 INS14 INS32 INS42 INS40 INS32 INS43 INS14 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS40 INS32 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS45 INS45 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42