HDFS-12323. NameNode terminates after full GC thinking QJM unresponsive if full GC is much longer than timeout. Contributed by Erik Krogen.
-import org.apache.hadoop.util.Time;
+import org.apache.hadoop.util.Timer;
+
-  private final StopWatch quorumStopWatch = new StopWatch();
+  private final StopWatch quorumStopWatch;
+  private final Timer timer;
-      Map<KEY, ? extends ListenableFuture<RESULT>> calls) {
-    final QuorumCall<KEY, RESULT> qr = new QuorumCall<KEY, RESULT>();
+      Map<KEY, ? extends ListenableFuture<RESULT>> calls, Timer timer) {
+    final QuorumCall<KEY, RESULT> qr = new QuorumCall<KEY, RESULT>(timer);
-  
-  private QuorumCall() {
-    // Only instantiated from factory method above
+
+  static <KEY, RESULT> QuorumCall<KEY, RESULT> create(
+      Map<KEY, ? extends ListenableFuture<RESULT>> calls) {
+    return create(calls, new Timer());
+  /**
+   * Not intended for outside use.
+   */
+  private QuorumCall() {
+    this(new Timer());
+  }
+
+  private QuorumCall(Timer timer) {
+    // Only instantiated from factory method above
+    this.timer = timer;
+    this.quorumStopWatch = new StopWatch(timer);
+  }
+
+  /**
+   * Used in conjunction with {@link #getQuorumTimeoutIncreaseMillis(long, int)}
+   * to check for pauses.
+   */
-  private boolean shouldIncreaseQuorumTimeout(long offset, int millis) {
+  /**
+   * Check for a pause (e.g. GC) since the last time
+   * {@link #restartQuorumStopWatch()} was called. If detected, return the
+   * length of the pause; else, -1.
+   * @param offset Offset the elapsed time by this amount; use if some amount
+   *               of pause was expected
+   * @param millis Total length of timeout in milliseconds
+   * @return Length of pause, if detected, else -1
+   */
+  private long getQuorumTimeoutIncreaseMillis(long offset, int millis) {
-    return elapsed + offset > (millis * WAIT_PROGRESS_INFO_THRESHOLD);
+    long pauseTime = elapsed + offset;
+    if (pauseTime > (millis * WAIT_PROGRESS_INFO_THRESHOLD)) {
+      QuorumJournalManager.LOG.info("Pause detected while waiting for " +
+          "QuorumCall response; increasing timeout threshold by pause time " +
+          "of " + pauseTime + " ms.");
+      return pauseTime;
+    } else {
+      return -1;
+    }
-    long st = Time.monotonicNow();
+    long st = timer.monotonicNow();
-      long now = Time.monotonicNow();
+      long now = timer.monotonicNow();
-        if (shouldIncreaseQuorumTimeout(0, millis)) {
-          et = et + millis;
+        long timeoutIncrease = getQuorumTimeoutIncreaseMillis(0, millis);
+        if (timeoutIncrease > 0) {
+          et += timeoutIncrease;
-      if (shouldIncreaseQuorumTimeout(-rem, millis)) {
-        et = et + millis;
+      long timeoutIncrease = getQuorumTimeoutIncreaseMillis(-rem, millis);
+      if (timeoutIncrease > 0) {
+        et += timeoutIncrease;

UPD40 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS44 INS83 INS73 INS73 INS74 INS42 INS44 INS8 INS29 INS83 INS42 INS44 INS8 INS29 INS29 UPD39 UPD42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS41 INS65 INS17 INS43 INS42 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS60 INS25 INS42 INS42 INS42 INS42 INS43 INS43 INS76 INS32 INS66 INS14 INS42 INS7 INS7 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS39 INS59 MOV27 INS8 INS8 INS42 INS42 INS74 INS42 INS42 INS14 INS43 INS22 INS42 INS22 MOV14 INS68 INS68 INS42 MOV27 INS42 INS21 MOV41 INS41 INS60 INS42 INS43 INS43 INS43 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS69 INS69 INS42 INS32 INS42 INS38 UPD42 INS39 INS59 INS27 INS42 INS42 INS42 INS39 INS39 INS40 INS42 INS27 INS34 INS60 INS25 INS42 MOV32 INS42 INS34 INS27 INS42 INS45 UPD42 INS39 INS59 INS27 MOV8 MOV8 UPD42 UPD7 INS45 INS45 INS45 INS42 INS32 INS42 INS34 INS42 UPD42 MOV42 MOV34 MOV42 UPD7 INS42 DEL42 DEL42 DEL27 DEL32 DEL25 DEL42 DEL42 DEL27