HDFS-8702. Erasure coding: update BlockManager.blockHasEnoughRacks(..) logic for striped block. Contributed by Kai Sasaki.

-  // TODO: update the enough rack logic for striped blocks
-    boolean enoughRacks = false;
+
+    if (storedBlock.isStriped()) {
+      return blockHasEnoughRacksStriped(storedBlock, corruptNodes);
+    } else {
+      return blockHashEnoughRacksContiguous(storedBlock, expectedStorageNum,
+          corruptNodes);
+    }
+  }
+
+  /**
+   * Verify whether given striped block is distributed through enough racks.
+   * As dicussed in HDFS-7613, ec file requires racks at least as many as
+   * the number of data block number.
+   */
+  boolean blockHasEnoughRacksStriped(BlockInfo storedBlock,
+      Collection<DatanodeDescriptor> corruptNodes) {
+    if (!datanodeManager.hasClusterEverBeenMultiRack()) {
+      return true;
+    }
+    boolean enoughRacks = false;
+    Set<String> rackNameSet = new HashSet<>();
+    int dataBlockNum = ((BlockInfoStriped)storedBlock).getRealDataBlockNum();
+    for (DatanodeStorageInfo storage : blocksMap.getStorages(storedBlock)) {
+      final DatanodeDescriptor cur = storage.getDatanodeDescriptor();
+      if (!cur.isDecommissionInProgress() && !cur.isDecommissioned()) {
+        if ((corruptNodes == null) || !corruptNodes.contains(cur)) {
+          String rackNameNew = cur.getNetworkLocation();
+          rackNameSet.add(rackNameNew);
+          if (rackNameSet.size() >= dataBlockNum) {
+            enoughRacks = true;
+            break;
+          }
+        }
+      }
+    }
+    return enoughRacks;
+  }
+
+  boolean blockHashEnoughRacksContiguous(BlockInfo storedBlock,
+      int expectedStorageNum, Collection<DatanodeDescriptor> corruptNodes) {
+    boolean enoughRacks = false;

INS31 INS31 INS39 INS42 INS44 INS44 INS8 INS29 INS39 INS42 INS44 INS44 INS8 UPD42 INS44 INS43 INS42 INS39 INS42 MOV25 MOV60 INS25 INS65 INS43 INS42 INS74 INS42 INS25 INS60 INS60 INS60 INS70 INS41 INS74 INS42 INS42 INS32 INS8 INS8 INS66 INS66 INS66 INS42 INS43 INS43 INS38 INS8 INS39 INS59 INS74 INS59 INS39 INS59 INS44 INS32 INS8 INS42 INS43 INS43 INS42 INS42 INS41 INS41 INS42 INS42 INS32 INS41 INS42 INS9 INS43 INS43 INS42 INS14 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS32 INS42 INS42 INS9 INS42 INS42 INS74 INS36 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS11 INS42 INS42 INS32 INS38 INS38 INS25 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS36 INS38 INS60 INS21 INS25 INS27 INS32 INS43 INS59 INS32 INS27 INS8 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS21 INS10 INS42 INS42 INS42 INS42 INS7 INS42 INS9