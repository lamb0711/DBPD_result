svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535 back to trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574259 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.LayoutVersion.Feature;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.RollingUpgradeStartupOption;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption;
+import org.apache.hadoop.hdfs.server.namenode.FSEditLogOp.RollingUpgradeOp;
+import org.apache.hadoop.hdfs.server.namenode.NNStorage.NameNodeFile;
-  static long REPLAY_TRANSACTION_LOG_INTERVAL = 1000; // 1sec
+  static final long REPLAY_TRANSACTION_LOG_INTERVAL = 1000; // 1sec
+
+  /** Total number of end transactions loaded. */
+  private int totalEdits = 0;
+  long loadFSEdits(EditLogInputStream edits, long expectedStartingTxId)
+      throws IOException {
+    return loadFSEdits(edits, expectedStartingTxId, null, null);
+  }
+
-      MetaRecoveryContext recovery) throws IOException {
+      StartupOption startOpt, MetaRecoveryContext recovery) throws IOException {
-      long numEdits = loadEditRecords(edits, false, 
-                                 expectedStartingTxId, recovery);
+      long numEdits = loadEditRecords(edits, false, expectedStartingTxId,
+          startOpt, recovery);
-                      long expectedStartingTxId, MetaRecoveryContext recovery)
-      throws IOException {
+      long expectedStartingTxId, StartupOption startOpt,
+      MetaRecoveryContext recovery) throws IOException {
-            long inodeId = applyEditLogOp(op, fsDir, in.getVersion(), lastInodeId);
+            if (LOG.isTraceEnabled()) {
+              LOG.trace("op=" + op + ", startOpt=" + startOpt
+                  + ", numEdits=" + numEdits + ", totalEdits=" + totalEdits);
+            }
+            long inodeId = applyEditLogOp(op, fsDir, startOpt,
+                in.getVersion(), lastInodeId);
+          } catch (RollingUpgradeOp.RollbackException e) {
+            throw e;
+            if (recovery == null) {
+              throw e instanceof IOException? (IOException)e: new IOException(e);
+            }
+
+          totalEdits++;
+        } catch (RollingUpgradeOp.RollbackException e) {
+          LOG.info("Stopped at OP_START_ROLLING_UPGRADE for rollback.");
+          break;
-      if (LayoutVersion.supports(Feature.ADD_INODE_ID, logVersion)) {
+      if (NameNodeLayoutVersion.supports(
+          LayoutVersion.Feature.ADD_INODE_ID, logVersion)) {
-      int logVersion, long lastInodeId) throws IOException {
+      StartupOption startOpt, int logVersion, long lastInodeId) throws IOException {
+    case OP_ROLLING_UPGRADE_START: {
+      if (startOpt == StartupOption.ROLLINGUPGRADE) {
+        final RollingUpgradeStartupOption rollingUpgradeOpt
+            = startOpt.getRollingUpgradeStartupOption(); 
+        if (rollingUpgradeOpt == RollingUpgradeStartupOption.ROLLBACK) {
+          throw new RollingUpgradeOp.RollbackException();
+        } else if (rollingUpgradeOpt == RollingUpgradeStartupOption.DOWNGRADE) {
+          //ignore upgrade marker
+          break;
+        }
+      }
+      // start rolling upgrade
+      final long startTime = ((RollingUpgradeOp) op).getTime();
+      fsNamesys.startRollingUpgradeInternal(startTime);
+      fsNamesys.triggerRollbackCheckpoint();
+      break;
+    }
+    case OP_ROLLING_UPGRADE_FINALIZE: {
+      final long finalizeTime = ((RollingUpgradeOp) op).getTime();
+      fsNamesys.finalizeRollingUpgradeInternal(finalizeTime);
+      fsNamesys.getFSImage().renameCheckpoint(NameNodeFile.IMAGE_ROLLBACK,
+          NameNodeFile.IMAGE);
+      break;
+    }
-        && logVersion != HdfsConstants.LAYOUT_VERSION) {
+        && logVersion != HdfsConstants.NAMENODE_LAYOUT_VERSION) {

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS23 INS31 INS83 INS29 INS83 INS39 INS59 INS39 INS42 INS44 INS44 INS43 INS8 INS44 INS44 INS44 INS65 INS42 INS34 INS43 INS42 INS39 INS42 INS42 INS41 INS43 INS42 INS43 INS42 INS43 INS42 MOV49 INS66 INS42 INS32 INS42 INS42 INS42 INS8 INS49 INS8 INS49 INS42 INS42 INS42 INS33 INS33 INS42 INS25 INS60 INS21 INS21 INS10 INS42 INS60 INS21 INS21 INS10 INS27 INS8 INS83 INS39 INS59 INS32 INS32 INS83 INS39 INS59 INS32 INS32 UPD40 UPD42 UPD40 INS42 INS40 INS60 INS25 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS40 INS40 INS42 INS12 INS83 INS43 INS59 INS27 INS8 INS25 INS36 INS42 INS36 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS40 INS53 INS27 INS8 INS11 INS11 INS12 INS37 INS43 INS42 INS21 INS10 INS42 INS42 INS14 INS42 INS40 INS10 INS43 INS42 INS43 INS42 INS25 INS44 INS8 INS42 INS40 INS32 INS43 INS42 INS42 INS32 INS8 INS43 INS42 INS53 INS25 INS42 INS42 INS45 INS40 INS42 INS42 INS21 INS40 INS42 INS27 INS8 INS32 INS42 INS42 INS33 INS53 INS42 INS42 INS27 INS16 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS62 INS11 INS14 INS42 INS43 INS43 INS42 INS43 INS42 INS42 INS42 INS42