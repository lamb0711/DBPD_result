Merge all changes from trunk to branch HDFS-2832.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1517887 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
+  private static final String APP_STATE_CMD ="appStates";
+  private static final String ALLSTATES_OPTION = "ALL";
+
+  private boolean allAppStates;
-        "based on application type.");
+        "based on application type, " +
+        "and --appStates to filter applications based on application state");
+    Option appStateOpt =
+        new Option(
+            APP_STATE_CMD,
+            true,
+            "Works with --list to filter applications based on their state. "
+                + getAllValidApplicationStates());
+    appStateOpt.setValueSeparator(',');
+    appStateOpt.setArgs(Option.UNLIMITED_VALUES);
+    appStateOpt.setArgName("Comma-separated list of application states");
+    opts.addOption(appStateOpt);
+      allAppStates = false;
-              appTypes.add(type.trim());
+              appTypes.add(type.toUpperCase().trim());
-      listApplications(appTypes);
+
+      EnumSet<YarnApplicationState> appStates =
+          EnumSet.noneOf(YarnApplicationState.class);
+      if (cliParser.hasOption(APP_STATE_CMD)) {
+        String[] states = cliParser.getOptionValues(APP_STATE_CMD);
+        if (states != null) {
+          for (String state : states) {
+            if (!state.trim().isEmpty()) {
+              if (state.trim().equalsIgnoreCase(ALLSTATES_OPTION)) {
+                allAppStates = true;
+                break;
+              }
+              try {
+                appStates.add(YarnApplicationState.valueOf(state.toUpperCase()
+                    .trim()));
+              } catch (IllegalArgumentException ex) {
+                sysout.println("The application state " + state
+                    + " is invalid.");
+                sysout.println(getAllValidApplicationStates());
+                return exitCode;
+              }
+            }
+          }
+        }
+      }
+      listApplications(appTypes, appStates);
-   * present in the Resource Manager
+   * And application States present in the Resource Manager
+   * @param appStates
-  private void listApplications(Set<String> appTypes)
-      throws YarnException, IOException {
+  private void listApplications(Set<String> appTypes,
+      EnumSet<YarnApplicationState> appStates) throws YarnException,
+      IOException {
-    List<ApplicationReport> appsReport =
-        client.getApplications(appTypes);
+    if (allAppStates) {
+      for(YarnApplicationState appState : YarnApplicationState.values()) {
+        appStates.add(appState);
+      }
+    } else {
+      if (appStates.isEmpty()) {
+        appStates.add(YarnApplicationState.RUNNING);
+      }
+    }
-    writer.println("Total Applications:" + appsReport.size());
+    List<ApplicationReport> appsReport =
+        client.getApplications(appTypes, appStates);
+
+    writer
+        .println("Total number of applications (application-types: " + appTypes
+            + " and states: " + appStates + ")" + ":" + appsReport.size());
+  private String getAllValidApplicationStates() {
+    StringBuilder sb = new StringBuilder();
+    sb.append("The valid application state can be"
+        + " one of the following: ");
+    sb.append(ALLSTATES_OPTION + ",");
+    for (YarnApplicationState appState : YarnApplicationState
+        .values()) {
+      sb.append(appState+",");
+    }
+    String output = sb.toString();
+    return output.substring(0, output.length()-1);
+  }

INS26 INS40 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS44 INS83 INS43 INS42 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS60 INS21 INS21 INS21 INS21 INS65 INS74 INS42 INS25 INS42 INS60 INS21 INS21 INS70 INS60 INS41 INS43 INS59 INS32 INS32 INS32 INS32 UPD66 INS42 INS43 INS43 INS42 INS8 INS8 INS43 INS59 INS32 INS32 INS44 INS32 INS8 INS43 INS59 INS32 INS42 INS42 INS14 INS42 INS42 INS13 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS70 INS25 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS34 INS27 UPD45 INS45 INS43 INS42 INS9 INS27 INS21 INS60 INS25 INS44 INS32 INS8 INS32 INS8 INS42 UPD45 INS42 INS45 INS42 INS45 INS45 INS43 INS45 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS32 INS34 INS42 INS45 INS32 INS7 INS74 INS59 INS32 INS8 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS9 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS57 INS5 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS43 INS85 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS43 INS42 INS25 INS42 INS38 INS8 INS32 INS25 INS54 INS32 INS42 INS32 INS8 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS21 INS10 INS21 INS44 INS8 INS32 INS42 INS42 INS7 INS32 INS43 INS42 INS21 INS21 INS41 MOV42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42