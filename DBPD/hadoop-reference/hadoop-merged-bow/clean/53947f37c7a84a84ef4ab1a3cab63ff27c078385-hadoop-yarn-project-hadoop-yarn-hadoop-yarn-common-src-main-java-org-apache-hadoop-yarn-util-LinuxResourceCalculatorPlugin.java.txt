YARN-3122. Metrics for container's actual CPU usage. (Anubhav Dhoot via kasha)

+import java.math.BigInteger;
-  public static final int UNAVAILABLE = -1;
-
+  private CpuTimeTracker cpuTimeTracker;
-  private long cumulativeCpuTime = 0L; // CPU used time since system is on (ms)
-  private long lastCumulativeCpuTime = 0L; // CPU used time read last time (ms)
-  // Unix timestamp while reading the CPU time (ms)
-  private float cpuUsage = UNAVAILABLE;
-  private long sampleTime = UNAVAILABLE;
-  private long lastSampleTime = UNAVAILABLE;
-    procfsMemFile = PROCFS_MEMFILE;
-    procfsCpuFile = PROCFS_CPUINFO;
-    procfsStatFile = PROCFS_STAT;
-    jiffyLengthInMillis = ProcfsBasedProcessTree.JIFFY_LENGTH_IN_MILLIS;
+    this(PROCFS_MEMFILE, PROCFS_CPUINFO, PROCFS_STAT,
+        ProcfsBasedProcessTree.JIFFY_LENGTH_IN_MILLIS);
+    this.cpuTimeTracker = new CpuTimeTracker(jiffyLengthInMillis);
-          cumulativeCpuTime = uTime + nTime + sTime; // milliseconds
+          cpuTimeTracker.updateElapsedJiffies(
+              BigInteger.valueOf(uTime + nTime + sTime),
+              getCurrentTime());
-      cumulativeCpuTime *= jiffyLengthInMillis;
-    return cumulativeCpuTime;
+    return cpuTimeTracker.cumulativeCpuTime.longValue();
-    sampleTime = getCurrentTime();
-    if (lastSampleTime == UNAVAILABLE ||
-        lastSampleTime > sampleTime) {
-      // lastSampleTime > sampleTime may happen when the system time is changed
-      lastSampleTime = sampleTime;
-      lastCumulativeCpuTime = cumulativeCpuTime;
-      return cpuUsage;
+    float overallCpuUsage = cpuTimeTracker.getCpuTrackerUsagePercent();
+    if (overallCpuUsage != CpuTimeTracker.UNAVAILABLE) {
+      overallCpuUsage = overallCpuUsage / getNumProcessors();
-    // When lastSampleTime is sufficiently old, update cpuUsage.
-    // Also take a sample of the current time and cumulative CPU time for the
-    // use of the next calculation.
-    final long MINIMUM_UPDATE_INTERVAL = 10 * jiffyLengthInMillis;
-    if (sampleTime > lastSampleTime + MINIMUM_UPDATE_INTERVAL) {
-	    cpuUsage = (float)(cumulativeCpuTime - lastCumulativeCpuTime) * 100F /
-	               ((float)(sampleTime - lastSampleTime) * getNumProcessors());
-	    lastSampleTime = sampleTime;
-      lastCumulativeCpuTime = cumulativeCpuTime;
-    }
-    return cpuUsage;
+    return overallCpuUsage;

INS26 INS40 INS23 MOV83 INS43 MOV59 INS42 UPD42 INS17 INS21 INS42 INS42 INS42 INS40 INS7 INS32 UPD39 UPD27 UPD42 INS22 INS14 INS40 INS42 UPD42 INS32 UPD42 INS40 INS52 INS42 INS43 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 MOV32 INS32 INS42 INS42 INS32 MOV32 INS42 INS42 MOV27 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL42 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL39 DEL23 DEL83 DEL39 DEL42 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL59 DEL23 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL42 DEL7 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL41 DEL8 DEL25 DEL83 DEL34 DEL42 DEL27 DEL42 DEL42 DEL27 DEL39 DEL42 DEL27 DEL36 DEL11 DEL34 DEL27 DEL39 DEL42 DEL42 DEL27 DEL36 DEL11 DEL27 DEL36 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21