YARN-9578. Add limit/actions/summarize options for app activities REST API. Contributed by Tao Yang.

+  public static final String DEFAULT_SUMMARIZE = "false";
-      @QueryParam(RMWSConsts.APP_ID) String appId,
+      @PathParam(RMWSConsts.APPID) String appId,
-      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {
+      @QueryParam(RMWSConsts.GROUP_BY) String groupBy,
+      @QueryParam(RMWSConsts.LIMIT) String limit,
+      @QueryParam(RMWSConsts.ACTIONS) Set<String> actions,
+      @QueryParam(RMWSConsts.SUMMARIZE) @DefaultValue(DEFAULT_SUMMARIZE)
+          boolean summarize) {
+      Set<RMWSConsts.AppActivitiesRequiredAction> requiredActions;
+      try {
+        requiredActions = parseAppActivitiesRequiredActions(actions);
+      } catch (IllegalArgumentException e) {
+        return new AppActivitiesInfo(e.getMessage(), appId);
+      }
+
+      int limitNum = -1;
+      if (limit != null) {
+        try {
+          limitNum = Integer.parseInt(limit);
+          if (limitNum <= 0) {
+            return new AppActivitiesInfo(
+                "limit must be greater than 0!", appId);
+          }
+        } catch (NumberFormatException e) {
+          return new AppActivitiesInfo("limit must be integer!", appId);
+        }
+      }
+
-        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);
-        AppActivitiesInfo appActivitiesInfo =
-            activitiesManager.getAppActivitiesInfo(applicationId,
-                requestPriorities, allocationRequestIds, activitiesGroupBy);
-
-        return appActivitiesInfo;
+        if (requiredActions
+            .contains(RMWSConsts.AppActivitiesRequiredAction.REFRESH)) {
+          activitiesManager
+              .turnOnAppActivitiesRecording(applicationId, maxTime);
+        }
+        if (requiredActions
+            .contains(RMWSConsts.AppActivitiesRequiredAction.GET)) {
+          AppActivitiesInfo appActivitiesInfo = activitiesManager
+              .getAppActivitiesInfo(applicationId, requestPriorities,
+                  allocationRequestIds, activitiesGroupBy, limitNum,
+                  summarize, maxTime);
+          return appActivitiesInfo;
+        }
+        return new AppActivitiesInfo("Successfully notified actions: "
+            + StringUtils.join(',', actions), appId);
+  private Set<RMWSConsts.AppActivitiesRequiredAction>
+      parseAppActivitiesRequiredActions(Set<String> actions) {
+    Set<RMWSConsts.AppActivitiesRequiredAction> requiredActions =
+        new HashSet<>();
+    if (actions == null || actions.isEmpty()) {
+      requiredActions.add(RMWSConsts.AppActivitiesRequiredAction.REFRESH);
+      requiredActions.add(RMWSConsts.AppActivitiesRequiredAction.GET);
+    } else {
+      for (String action : actions) {
+        if (!EnumUtils.isValidEnum(RMWSConsts.AppActivitiesRequiredAction.class,
+            action.toUpperCase())) {
+          String errMesasge =
+              "Got invalid action: " + action + ", valid actions: " + Arrays
+                  .asList(RMWSConsts.AppActivitiesRequiredAction.values());
+          throw new IllegalArgumentException(errMesasge);
+        }
+        requiredActions.add(RMWSConsts.AppActivitiesRequiredAction
+            .valueOf(action.toUpperCase()));
+      }
+    }
+    return requiredActions;
+  }
+

INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS44 INS44 INS44 INS83 INS74 INS42 INS44 INS8 INS42 INS42 INS45 INS79 INS43 INS42 INS79 INS74 INS42 INS79 INS79 INS39 INS42 INS43 INS43 INS74 INS42 INS60 INS25 INS41 UPD42 UPD40 INS42 INS40 INS42 INS42 INS40 INS43 INS43 INS42 INS40 INS42 INS42 INS42 INS40 INS43 INS43 INS74 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS60 INS54 INS60 INS25 INS42 INS42 INS43 INS43 INS42 INS14 INS27 INS32 INS21 INS21 INS70 INS74 INS59 INS8 INS12 INS39 INS59 INS27 INS8 INS8 INS42 INS40 INS74 INS42 INS33 INS42 INS42 INS32 INS32 INS44 INS42 INS8 INS43 INS43 INS42 INS21 INS44 INS8 INS42 INS38 INS42 INS33 INS54 MOV21 INS25 INS25 INS41 INS43 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS42 INS25 INS21 INS42 INS40 INS7 INS43 INS42 INS41 INS34 INS8 INS12 INS32 INS8 INS32 INS8 INS14 INS42 INS42 INS38 INS8 INS32 INS42 INS32 INS42 INS14 INS21 INS25 INS44 INS8 INS42 INS42 INS40 MOV21 INS42 INS42 INS40 MOV60 MOV41 INS43 INS27 INS42 INS32 INS60 INS53 INS42 INS42 INS32 INS42 INS42 MOV43 INS32 INS42 INS7 INS27 INS8 INS43 INS42 INS41 INS43 INS42 INS45 INS32 INS42 INS42 INS57 INS32 INS43 INS59 INS14 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS34 INS41 INS42 INS14 INS42 INS42 INS42 INS13 INS42 INS43 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS45 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS45 INS32 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 DEL8