HDFS-12818. Support multiple storages in DataNodeCluster / SimulatedFSDataset. Contributed by Erik Krogen.
+import java.util.ArrayList;
-import java.util.Collections;
+import com.google.common.math.LongMath;
+import org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.FsDatasetImplTestUtils;
+  private final static int DEFAULT_NUM_SIMULATED_DATA_DIRS = 1;
-  
+
+  /**
+   * Used to change the default number of data storages and to mark the
+   * FSDataset as simulated.
+   */
+  static class TestUtilsFactory
+      extends FsDatasetTestUtils.Factory<FsDatasetTestUtils> {
+    @Override
+    public FsDatasetTestUtils newInstance(DataNode datanode) {
+      return new FsDatasetImplTestUtils(datanode) {
+        @Override
+        public int getDefaultNumOfDataDirs() {
+          return DEFAULT_NUM_SIMULATED_DATA_DIRS;
+        }
+      };
+    }
+
+    @Override
+    public boolean isSimulated() {
+      return true;
+    }
+
+    @Override
+    public int getDefaultNumOfDataDirs() {
+      return DEFAULT_NUM_SIMULATED_DATA_DIRS;
+    }
+
+  }
+
+    conf.setClass("org.apache.hadoop.hdfs.server.datanode." +
+            "SimulatedFSDatasetTestUtilsFactory",
+        TestUtilsFactory.class, FsDatasetTestUtils.Factory.class
+    );
-      if (!storage.alloc(bpid, theBlock.getNumBytes())) { 
+      if (!getStorage(theBlock).alloc(bpid, theBlock.getNumBytes())) {
-      return storage.getStorageUuid();
+      return getStorage(theBlock).getStorageUuid();
-        if (!storage.alloc(bpid,extraLen)) {
+        if (!getStorage(theBlock).alloc(bpid, extraLen)) {
-        storage.free(bpid, -extraLen);
+        getStorage(theBlock).free(bpid, -extraLen);
-            volume, fileIoProvider);
+            getStorage(theBlock).getVolume(), fileIoProvider);
+    private final Map<Block, BInfo> blockMap = new TreeMap<>();
+    Map<Block, BInfo> getBlockMap() {
+      return blockMap;
+    }
+
-      new HashMap<String, SimulatedBPStorage>();
+        new ConcurrentHashMap<>();
+    private final SimulatedVolume volume;
-    SimulatedStorage(long cap, DatanodeStorage.State state) {
+    SimulatedStorage(long cap, DatanodeStorage.State state,
+        FileIoProvider fileIoProvider, Configuration conf) {
+      DataNodeVolumeMetrics volumeMetrics =
+          DataNodeVolumeMetrics.create(conf, dnStorage.getStorageID());
+      this.volume = new SimulatedVolume(this, fileIoProvider, volumeMetrics);
+
+    SimulatedVolume getVolume() {
+      return volume;
+    }
+
+    Map<Block, BInfo> getBlockMap(String bpid) throws IOException {
+      SimulatedBPStorage bpStorage = map.get(bpid);
+      if (bpStorage == null) {
+        throw new IOException("Nonexistent block pool: " + bpid);
+      }
+      return bpStorage.getBlockMap();
+    }
-  private final Map<String, Map<Block, BInfo>> blockMap
-      = new ConcurrentHashMap<String, Map<Block,BInfo>>();
-  private final SimulatedStorage storage;
-  private final SimulatedVolume volume;
+  private final List<SimulatedStorage> storages;
-    if (storage != null) {
+    int storageCount;
+    if (storage != null && storage.getNumStorageDirs() > 0) {
+      storageCount = storage.getNumStorageDirs();
+      storageCount = DataNode.getStorageLocations(conf).size();
-    this.storage = new SimulatedStorage(
-        conf.getLong(CONFIG_PROPERTY_CAPACITY, DEFAULT_CAPACITY),
-        conf.getEnum(CONFIG_PROPERTY_STATE, DEFAULT_STATE));
-    // TODO: per volume id or path
-    DataNodeVolumeMetrics volumeMetrics = DataNodeVolumeMetrics.create(conf,
-        datanodeUuid);
-    this.volume = new SimulatedVolume(this.storage, this.fileIoProvider,
-        volumeMetrics);
+
+    this.storages = new ArrayList<>();
+    for (int i = 0; i < storageCount; i++) {
+      this.storages.add(new SimulatedStorage(
+          conf.getLong(CONFIG_PROPERTY_CAPACITY, DEFAULT_CAPACITY),
+          conf.getEnum(CONFIG_PROPERTY_STATE, DEFAULT_STATE),
+          fileIoProvider, conf));
+    }
-      Map<Block, BInfo> map = blockMap.get(bpid);
-      if (map == null) {
-        map = new TreeMap<>();
-        blockMap.put(bpid, map);
+
+      for (SimulatedStorage storage : storages) {
+        storage.addBlockPool(bpid);
-      
+
-        map.put(binfo.theBlock, binfo);
+        getBlockMap(b, bpid).put(binfo.theBlock, binfo);
+
+  /** Get the storage that a given block lives within. */
+  private SimulatedStorage getStorage(Block b) {
+    return storages.get(LongMath.mod(b.getBlockId(), storages.size()));
+  }
-  /** Get a map for a given block pool Id */
-  private Map<Block, BInfo> getMap(String bpid) throws IOException {
-    final Map<Block, BInfo> map = blockMap.get(bpid);
-    if (map == null) {
-      throw new IOException("Non existent blockpool " + bpid);
-    }
-    return map;
+  /**
+   * Get the block map that a given block lives within, assuming it is within
+   * block pool bpid.
+   * @param b The block to look for
+   * @param bpid The block pool that contains b
+   * @return The block map (non-null)
+   * @throws IOException if bpid does not exist
+   */
+  private Map<Block, BInfo> getBlockMap(Block b, String bpid)
+      throws IOException {
+    return getStorage(b).getBlockMap(bpid);
+  }
+
+  /**
+   * Get the block map that a given block lives within.
+   * @param b The extended block to look for
+   * @return The block map (non-null)
+   * @throws IOException if b is in a nonexistent block pool
+   */
+  private Map<Block, BInfo> getBlockMap(ExtendedBlock b) throws IOException {
+    return getBlockMap(b.getLocalBlock(), b.getBlockPoolId());
-    final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
-    BInfo binfo = map.get(b.getLocalBlock());
+    BInfo binfo = getBlockMap(b).get(b.getLocalBlock());
-      final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
-      map.remove(b.getLocalBlock());
+      getBlockMap(b).remove(b.getLocalBlock());
-  synchronized BlockListAsLongs getBlockReport(String bpid) {
+  synchronized BlockListAsLongs getBlockReport(String bpid,
+      SimulatedStorage storage) {
-    final Map<Block, BInfo> map = blockMap.get(bpid);
-    if (map != null) {
-      for (BInfo b : map.values()) {
+    try {
+      for (BInfo b : storage.getBlockMap(bpid).values()) {
+    } catch (IOException ioe) {
+      DataNode.LOG.error("Exception while getting block reports", ioe);
-    return Collections.singletonMap(storage.getDnStorage(), getBlockReport(bpid));
+    Map<DatanodeStorage, BlockListAsLongs> blockReports = new HashMap<>();
+    for (SimulatedStorage storage : storages) {
+      blockReports.put(storage.getDnStorage(), getBlockReport(bpid, storage));
+    }
+    return blockReports;
-    return storage.getCapacity();
+    long total = 0;
+    for (SimulatedStorage storage : storages) {
+      total += storage.getCapacity();
+    }
+    return total;
-    return storage.getUsed();
+    long total = 0;
+    for (SimulatedStorage storage : storages) {
+      total += storage.getUsed();
+    }
+    return total;
-    return storage.getBlockPoolUsed(bpid);
+    long total = 0;
+    for (SimulatedStorage storage : storages) {
+      total += storage.getBlockPoolUsed(bpid);
+    }
+    return total;
-    return storage.getFree();
+
+    long total = 0;
+    for (SimulatedStorage storage : storages) {
+      total += storage.getFree();
+    }
+    return total;
-    return storage.getNumFailedVolumes();
+
+    int total = 0;
+    for (SimulatedStorage storage : storages) {
+      total += storage.getNumFailedVolumes();
+    }
+    return total;
-    final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
-    BInfo binfo = map.get(b.getLocalBlock());
+    BInfo binfo = getBlockMap(b).get(b.getLocalBlock());
-    final Map<Block, BInfo> map = blockMap.get(bpid);
-    if (map != null) {
-      return map.get(new Block(blockId));
+    Block b = new Block(blockId);
+    try {
+      return getBlockMap(b, bpid).get(b);
+    } catch (IOException ioe) {
+      return null;
-    return null;
-    final Map<Block, BInfo> map = blockMap.get(bpid);
-    if (map != null) {
-      r = map.get(new Block(blockId));
+    try {
+      Block b = new Block(blockId);
+      r = getBlockMap(b, bpid).get(b);
+    } catch (IOException ioe) {
+      // Ignore
-    final Map<Block, BInfo> map = blockMap.get(bpid);
-    if (map != null) {
-      BInfo binfo = map.get(new Block(blkid));
+    Block b = new Block(blkid);
+    try {
+      BInfo binfo = getBlockMap(b, bpid).get(b);
+    } catch (IOException ioe) {
+      return null;
-    return null;
-    final Map<Block, BInfo> map = getMap(bpid);
+      Map<Block, BInfo> map = getBlockMap(b, bpid);
-      storage.free(bpid, binfo.getNumBytes());
+      getStorage(b).free(bpid, binfo.getNumBytes());
-    final Map<Block, BInfo> map = blockMap.get(b.getBlockPoolId());
-    return map == null? null: map.get(b.getLocalBlock());
+    try {
+      return getBlockMap(b).get(b.getLocalBlock());
+    } catch (IOException ioe) {
+      return null;
+    }
-    final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
-    BInfo binfo = map.get(b.getLocalBlock());
+    BInfo binfo = getBlockMap(b).get(b.getLocalBlock());
-    final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
+    final Map<Block, BInfo> map = getBlockMap(b);
-    final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
+    final Map<Block, BInfo> map = getBlockMap(b);
-    final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
+    final Map<Block, BInfo> map = getBlockMap(b);
-    final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
-    map.put(binfo.theBlock, binfo);
+    getBlockMap(b).put(binfo.theBlock, binfo);
-    final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
-    BInfo binfo = map.get(b.getLocalBlock());
+    BInfo binfo = getBlockMap(b).get(b.getLocalBlock());
-    final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
-    BInfo binfo = map.get(b.getLocalBlock());
+    BInfo binfo = getBlockMap(b).get(b.getLocalBlock());
-    final Map<Block, BInfo> map = getMap(b.getBlockPoolId());
-    BInfo binfo = map.get(b.getLocalBlock());
+    BInfo binfo = getBlockMap(b).get(b.getLocalBlock());
-    return getMap(oldBlock.getBlockPoolId()).get(oldBlock.getLocalBlock());
+    return getBInfo(oldBlock);
-    Map<Block, BInfo> map = new TreeMap<>();
-    blockMap.put(bpid, map);
-    storage.addBlockPool(bpid);
+    for (SimulatedStorage storage : storages) {
+      storage.addBlockPool(bpid);
+    }
-    blockMap.remove(bpid);
-    storage.removeBlockPool(bpid);
+    for (SimulatedStorage storage : storages) {
+      storage.removeBlockPool(bpid);
+    }
-    final Map<Block, BInfo> map = blockMap.get(temporary.getBlockPoolId());
-    if (map == null) {
-      throw new IOException("Block pool not found, temporary=" + temporary);
-    }
-    final BInfo r = map.get(temporary.getLocalBlock());
+    final BInfo r = getBlockMap(temporary).get(temporary.getLocalBlock());
-    return new FsVolumeReferences(Collections.singletonList(volume));
+    List<SimulatedVolume> volumes = new ArrayList<>();
+    for (SimulatedStorage storage : storages) {
+      volumes.add(storage.getVolume());
+    }
+    return new FsVolumeReferences(volumes);
-    return storageUuid.equals(storage.getStorageUuid()) ?
-        storage.dnStorage :
-        null;
+    for (SimulatedStorage storage : storages) {
+      if (storageUuid.equals(storage.getStorageUuid())) {
+        return storage.getDnStorage();
+      }
+    }
+    return null;
-    return new StorageReport[] {storage.getStorageReport(bpid)};
+    List<StorageReport> reports = new ArrayList<>();
+    for (SimulatedStorage storage : storages) {
+      reports.add(storage.getStorageReport(bpid));
+    }
+    return reports.toArray(new StorageReport[0]);
-    return volume;
+    return getStorage(b.getLocalBlock()).getVolume();
-    blockMap.get(b.getBlockPoolId()).get(b.getLocalBlock()).pinned = true;
+    getBlockMap(b).get(b.getLocalBlock()).pinned = true;
-    return blockMap.get(b.getBlockPoolId()).get(b.getLocalBlock()).pinned;
+    return getBlockMap(b).get(b.getLocalBlock()).pinned;

MOV26 INS26 INS26 UPD40 INS40 INS40 INS23 INS55 INS31 INS31 INS31 INS31 INS31 MOV83 MOV83 INS83 INS39 INS59 INS29 INS83 INS42 INS74 INS31 INS31 INS31 INS23 INS31 INS23 INS31 INS31 INS74 MOV60 MOV21 MOV29 MOV83 MOV43 INS42 INS44 INS8 INS29 INS83 MOV74 INS42 INS44 MOV44 INS43 INS8 INS29 INS83 MOV74 INS42 INS44 MOV43 INS8 INS44 MOV44 INS8 INS8 INS8 INS8 INS8 INS8 INS8 MOV8 INS8 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS8 MOV78 INS83 MOV43 INS42 INS8 INS8 INS8 MOV78 MOV44 MOV43 MOV78 MOV44 MOV43 INS42 INS34 INS65 INS43 UPD43 MOV43 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS21 INS83 INS83 MOV74 INS59 MOV74 INS42 INS8 INS59 INS83 INS83 MOV43 INS59 INS44 INS44 MOV43 INS42 INS8 MOV74 INS42 INS44 INS43 INS8 INS43 INS43 UPD42 INS24 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS42 UPD42 MOV42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 MOV41 INS43 INS42 INS54 INS60 INS70 INS41 INS60 INS70 INS41 INS60 INS70 INS41 INS60 INS70 INS41 INS60 INS70 INS41 INS60 INS70 INS41 INS60 INS54 MOV60 INS54 MOV41 INS54 INS54 INS21 INS70 INS70 MOV60 INS70 MOV41 INS70 MOV41 INS60 INS70 MOV41 INS66 INS66 INS40 UPD42 INS42 UPD42 MOV42 INS43 INS42 INS41 INS42 INS41 INS42 INS41 INS32 INS42 MOV14 INS41 INS42 INS14 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS42 INS41 INS43 INS42 INS42 INS60 INS25 INS41 INS42 UPD42 MOV42 INS39 INS27 INS58 INS27 INS37 INS8 UPD66 INS42 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 MOV42 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS42 MOV32 INS42 MOV8 INS12 INS74 MOV59 INS44 INS42 INS8 INS42 INS39 INS59 INS44 INS42 MOV8 INS42 INS39 INS59 INS44 INS42 MOV8 INS42 INS39 INS59 INS44 INS42 MOV8 INS42 INS39 INS59 INS44 INS42 MOV8 INS42 INS39 INS59 INS44 INS42 MOV8 INS42 INS43 INS59 INS8 INS12 INS8 INS12 UPD43 INS8 INS12 INS8 INS12 MOV74 INS32 INS44 INS42 INS8 INS44 INS42 MOV8 UPD74 INS44 INS42 INS8 INS44 INS42 MOV8 INS74 INS59 INS44 INS42 INS8 INS32 INS32 UPD42 MOV42 INS14 INS9 INS42 INS42 INS42 INS27 INS57 INS57 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 MOV43 INS59 INS7 MOV42 INS42 INS42 MOV43 INS59 INS27 INS8 INS32 UPD42 MOV27 INS27 INS21 INS21 INS39 INS59 INS42 INS42 INS42 MOV21 INS70 INS42 INS42 INS32 INS32 UPD42 MOV42 MOV42 UPD42 INS32 INS21 INS44 INS8 INS43 INS43 INS43 UPD42 INS43 INS42 INS21 INS42 INS34 INS43 INS42 INS21 INS42 INS34 INS43 INS42 INS21 INS42 INS34 INS43 INS42 INS21 INS42 INS34 INS43 INS42 INS21 INS42 INS34 INS43 INS42 INS21 MOV42 INS42 MOV14 INS41 INS44 INS8 MOV60 MOV21 INS44 INS8 UPD42 UPD42 MOV14 INS60 MOV25 MOV41 INS44 INS8 INS60 MOV41 INS44 INS8 MOV43 MOV43 MOV43 MOV43 INS32 MOV42 MOV40 MOV42 UPD42 MOV42 INS43 INS42 MOV21 INS43 INS42 UPD43 UPD43 UPD42 INS43 INS42 MOV21 INS42 INS43 INS42 INS25 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 MOV3 INS32 INS42 INS43 INS42 INS1 INS45 INS45 INS43 INS43 INS32 MOV43 INS42 INS32 INS22 INS14 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS34 INS7 INS7 UPD42 INS74 INS42 INS34 INS32 INS44 INS42 INS8 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS32 MOV43 INS42 INS21 INS42 INS42 INS42 UPD74 INS42 INS32 INS42 INS7 INS42 INS7 INS42 INS7 INS42 INS7 INS42 INS7 INS32 INS32 INS43 INS42 MOV41 INS43 INS43 INS42 INS43 INS59 INS43 INS42 INS41 INS74 INS59 INS32 MOV43 INS42 INS41 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS32 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD74 INS42 INS42 MOV32 INS8 INS42 INS42 INS74 INS42 INS32 INS34 INS42 INS32 MOV32 UPD42 MOV42 INS31 INS42 INS40 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS52 INS42 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS22 INS42 MOV14 INS43 INS42 MOV21 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 MOV42 MOV32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 UPD42 MOV42 INS42 INS32 INS42 UPD42 MOV42 INS42 MOV42 INS42 MOV14 INS42 INS42 INS42 INS32 INS42 INS33 INS43 INS43 MOV43 INS42 INS32 INS32 INS32 MOV42 MOV32 INS33 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD43 UPD42 UPD42 INS32 MOV41 INS43 INS42 INS42 MOV32 INS42 INS42 MOV32 UPD42 MOV42 INS78 INS83 INS39 INS42 INS8 UPD42 MOV42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 UPD42 MOV42 MOV52 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 INS42 INS40 UPD42 MOV42 INS45 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS42 INS41 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL7 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL83 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL43 DEL32 DEL41 DEL8 DEL41 DEL41 DEL41 DEL41 DEL41 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL41 DEL8 DEL25 DEL83 DEL42 DEL43 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL8 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL32 DEL16 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL8 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL83 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL83 DEL42 DEL8 DEL31 DEL40 DEL33 DEL16 DEL4 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32