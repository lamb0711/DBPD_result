Merge r1550130 through r1555020 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1555021 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
-   * This array contains triplets of references. For each i-th datanode the
-   * block belongs to triplets[3*i] is the reference to the DatanodeDescriptor
-   * and triplets[3*i+1] and triplets[3*i+2] are references to the previous and
-   * the next blocks, respectively, in the list of blocks belonging to this
-   * data-node.
+   * This array contains triplets of references. For each i-th storage, the
+   * block belongs to triplets[3*i] is the reference to the
+   * {@link DatanodeStorageInfo} and triplets[3*i+1] and triplets[3*i+2] are
+   * references to the previous and the next blocks, respectively, in the list
+   * of blocks belonging to this storage.
+    DatanodeStorageInfo storage = getStorageInfo(index);
+    return storage == null ? null : storage.getDatanodeDescriptor();
+  }
+
+  DatanodeStorageInfo getStorageInfo(int index) {
-    return (DatanodeDescriptor)triplets[index*3];
+    return (DatanodeStorageInfo)triplets[index*3];
-  private void setDatanode(int index, DatanodeDescriptor node, BlockInfo previous,
-      BlockInfo next) {
+  private void setStorageInfo(int index, DatanodeStorageInfo storage) {
-    int i = index * 3;
-    assert index >= 0 && i+2 < triplets.length : "Index is out of bound";
-    triplets[i] = node;
-    triplets[i+1] = previous;
-    triplets[i+2] = next;
+    assert index >= 0 && index*3 < triplets.length : "Index is out of bound";
+    triplets[index*3] = storage;
-   * Add data-node this block belongs to.
+   * Add a {@link DatanodeStorageInfo} location for a block
-  public boolean addNode(DatanodeDescriptor node) {
-    if(findDatanode(node) >= 0) // the node is already there
-      return false;
+  boolean addStorage(DatanodeStorageInfo storage) {
+    boolean added = true;
+    int idx = findDatanode(storage.getDatanodeDescriptor());
+    if(idx >= 0) {
+      if (getStorageInfo(idx) == storage) { // the storage is already there
+        return false;
+      } else {
+        // The block is on the DN but belongs to a different storage.
+        // Update our state.
+        removeStorage(storage);
+        added = false;      // Just updating storage. Return false.
+      }
+    }
-    setDatanode(lastNode, node, null, null);
-    return true;
+    setStorageInfo(lastNode, storage);
+    setNext(lastNode, null);
+    setPrevious(lastNode, null);
+    return added;
-   * Remove data-node from the block.
+   * Remove {@link DatanodeStorageInfo} location for a block
-  public boolean removeNode(DatanodeDescriptor node) {
-    int dnIndex = findDatanode(node);
+  boolean removeStorage(DatanodeStorageInfo storage) {
+    int dnIndex = findStorageInfo(storage);
-    setDatanode(dnIndex, getDatanode(lastNode), getPrevious(lastNode),
-        getNext(lastNode));
+    setStorageInfo(dnIndex, getStorageInfo(lastNode));
+    setNext(dnIndex, getNext(lastNode)); 
+    setPrevious(dnIndex, getPrevious(lastNode)); 
-    setDatanode(lastNode, null, null, null);
+    setStorageInfo(lastNode, null);
+    setNext(lastNode, null); 
+    setPrevious(lastNode, null); 
+  /**
+   * Find specified DatanodeStorageInfo.
+   * @param dn
+   * @return index or -1 if not found.
+   */
+  int findStorageInfo(DatanodeInfo dn) {
+    int len = getCapacity();
+    for(int idx = 0; idx < len; idx++) {
+      DatanodeStorageInfo cur = getStorageInfo(idx);
+      if(cur == null)
+        break;
+      if(cur.getDatanodeDescriptor() == dn)
+        return idx;
+    }
+    return -1;
+  }
+  
+  /**
+   * Find specified DatanodeStorageInfo.
+   * @param storageInfo
+   * @return index or -1 if not found.
+   */
+  int findStorageInfo(DatanodeStorageInfo storageInfo) {
+    int len = getCapacity();
+    for(int idx = 0; idx < len; idx++) {
+      DatanodeStorageInfo cur = getStorageInfo(idx);
+      if(cur == storageInfo)
+        return idx;
+      if(cur == null)
+        break;
+    }
+    return -1;
+  }
-   * related to the specified DatanodeDescriptor.
+   * related to the specified DatanodeStorageInfo.
-  public BlockInfo listInsert(BlockInfo head, DatanodeDescriptor dn) {
-    int dnIndex = this.findDatanode(dn);
+  BlockInfo listInsert(BlockInfo head, DatanodeStorageInfo storage) {
+    int dnIndex = this.findStorageInfo(storage);
-      head.setPrevious(head.findDatanode(dn), this);
+      head.setPrevious(head.findStorageInfo(storage), this);
-   * related to the specified DatanodeDescriptor.
+   * related to the specified DatanodeStorageInfo.
-   * empty after deletion.
+   * empy after deletion.
-  public BlockInfo listRemove(BlockInfo head, DatanodeDescriptor dn) {
+  BlockInfo listRemove(BlockInfo head, DatanodeStorageInfo storage) {
-    int dnIndex = this.findDatanode(dn);
+    int dnIndex = this.findStorageInfo(storage);
-      prev.setNext(prev.findDatanode(dn), next);
+      prev.setNext(prev.findStorageInfo(storage), next);
-      next.setPrevious(next.findDatanode(dn), prev);
+      next.setPrevious(next.findStorageInfo(storage), prev);
-  public BlockInfo moveBlockToHead(BlockInfo head, DatanodeDescriptor dn,
+  public BlockInfo moveBlockToHead(BlockInfo head, DatanodeStorageInfo storage,
-    prev.setNext(prev.findDatanode(dn), next);
+    prev.setNext(prev.findStorageInfo(storage), next);
-      next.setPrevious(next.findDatanode(dn), prev);
+      next.setPrevious(next.findStorageInfo(storage), prev);
-      BlockUCState s, DatanodeDescriptor[] targets) {
+      BlockUCState s, DatanodeStorageInfo[] targets) {
-      return new BlockInfoUnderConstruction(
-          this, getBlockCollection().getBlockReplication(), s, targets);
+      return new BlockInfoUnderConstruction(this,
+          getBlockCollection().getBlockReplication(), s, targets);

INS26 MOV31 INS40 INS31 INS31 INS31 INS31 UPD83 MOV83 MOV43 UPD42 MOV42 MOV44 INS8 INS43 INS42 INS44 INS83 INS39 INS42 MOV44 INS44 INS8 INS29 INS39 INS42 INS44 INS8 UPD42 INS29 INS39 INS42 INS44 INS8 UPD39 UPD42 INS60 INS41 INS42 INS39 INS42 INS43 INS42 MOV6 MOV6 MOV21 INS65 INS43 INS42 INS60 INS60 INS25 MOV60 INS21 INS21 INS21 INS41 UPD43 UPD42 INS21 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS60 INS24 INS41 INS65 INS65 UPD43 UPD42 INS60 INS24 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD5 UPD66 UPD66 INS65 UPD66 UPD66 UPD66 INS43 INS59 INS16 INS42 INS66 INS65 INS66 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS32 INS32 INS32 INS42 UPD66 INS65 INS66 UPD42 INS32 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS39 INS59 INS58 INS27 INS37 INS8 INS38 UPD66 INS42 INS66 UPD42 INS39 INS59 INS58 INS27 INS37 INS8 INS38 UPD66 UPD42 UPD66 UPD66 UPD42 MOV27 UPD42 MOV27 UPD43 INS42 UPD42 MOV42 INS42 INS32 INS27 INS33 INS32 UPD43 UPD42 INS42 INS42 INS9 INS42 INS32 UPD42 MOV42 UPD34 MOV34 INS25 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 UPD42 UPD42 MOV42 INS42 MOV32 INS42 INS42 MOV32 INS42 MOV42 MOV33 INS42 INS42 MOV33 INS42 INS42 MOV33 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS25 INS25 INS34 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS25 INS25 INS34 UPD42 INS42 INS42 INS42 INS33 INS42 INS42 UPD42 UPD27 INS27 INS42 INS32 INS27 INS8 INS8 UPD42 UPD42 UPD42 INS42 INS42 INS34 INS43 INS59 INS27 INS10 INS27 INS41 UPD42 MOV42 INS42 INS34 INS43 INS59 INS27 INS41 INS27 INS10 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD34 INS42 INS34 INS42 INS42 INS32 INS42 MOV41 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS9 DEL83 DEL42 DEL42 DEL39 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL34 DEL27 DEL59 DEL60 DEL42 DEL27 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL32 DEL21 DEL83 DEL42 DEL32 DEL34 DEL27 DEL25 DEL42 DEL42 DEL33 DEL33 DEL32 DEL21 DEL9 DEL83 DEL83