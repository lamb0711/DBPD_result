YARN-1376. NM need to notify the log aggregation status to RM through Node heartbeat. Contributed by Xuan Gong.

+import java.util.concurrent.ConcurrentLinkedQueue;
+import org.apache.hadoop.yarn.server.api.protocolrecords.LogAggregationReport;
+import org.apache.hadoop.yarn.util.Records;
+  private boolean logAggregationEnabled;
+
+  private final List<LogAggregationReport> logAggregationReportForAppsTempList;
+
+    this.logAggregationReportForAppsTempList =
+        new ArrayList<LogAggregationReport>();
+
+    this.logAggregationEnabled =
+        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,
+          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);
+
+            if (logAggregationEnabled) {
+              // pull log aggregation status for application running in this NM
+              Map<ApplicationId, LogAggregationReport> logAggregationReports =
+                  getLogAggregationReportsForApps(context
+                    .getLogAggregationStatusForApps());
+              if (logAggregationReports != null
+                  && !logAggregationReports.isEmpty()) {
+                request.setLogAggregationReportsForApps(logAggregationReports);
+              }
+            }
+
+            logAggregationReportForAppsTempList.clear();
-  
-  
+
+  private Map<ApplicationId, LogAggregationReport>
+      getLogAggregationReportsForApps(
+          ConcurrentLinkedQueue<LogAggregationReport> lastestLogAggregationStatus) {
+    Map<ApplicationId, LogAggregationReport> latestLogAggregationReports =
+        new HashMap<ApplicationId, LogAggregationReport>();
+    LogAggregationReport status;
+    while ((status = lastestLogAggregationStatus.poll()) != null) {
+      this.logAggregationReportForAppsTempList.add(status);
+    }
+    for (LogAggregationReport logAggregationReport
+        : this.logAggregationReportForAppsTempList) {
+      LogAggregationReport report = null;
+      if (latestLogAggregationReports.containsKey(logAggregationReport
+        .getApplicationId())) {
+        report =
+            latestLogAggregationReports.get(logAggregationReport
+              .getApplicationId());
+        report.setLogAggregationStatus(logAggregationReport
+          .getLogAggregationStatus());
+        String message = report.getDiagnosticMessage();
+        if (logAggregationReport.getDiagnosticMessage() != null
+            && !logAggregationReport.getDiagnosticMessage().isEmpty()) {
+          if (message != null) {
+            message += logAggregationReport.getDiagnosticMessage();
+          } else {
+            message = logAggregationReport.getDiagnosticMessage();
+          }
+          report.setDiagnosticMessage(message);
+        }
+      } else {
+        report = Records.newRecord(LogAggregationReport.class);
+        report.setApplicationId(logAggregationReport.getApplicationId());
+        report.setNodeId(this.nodeId);
+        report.setLogAggregationStatus(logAggregationReport
+          .getLogAggregationStatus());
+        report
+          .setDiagnosticMessage(logAggregationReport.getDiagnosticMessage());
+      }
+      latestLogAggregationReports.put(logAggregationReport.getApplicationId(),
+        report);
+    }
+    return latestLogAggregationReports;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS39 INS59 INS83 INS83 INS74 INS59 INS83 INS74 INS42 INS44 INS8 INS42 INS43 INS43 INS42 INS21 INS21 INS43 INS43 INS43 INS74 INS42 INS60 INS60 INS61 INS70 INS41 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS43 INS59 INS27 INS8 INS44 INS22 INS8 INS42 INS22 INS14 INS22 INS32 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS36 INS33 INS21 INS43 INS42 INS52 INS42 INS60 INS25 INS21 INS52 INS42 INS74 INS52 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS74 INS7 INS32 INS42 INS43 INS59 INS32 INS8 INS8 INS32 INS43 INS43 INS43 INS43 INS43 INS42 INS32 INS22 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS21 INS21 INS60 INS25 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS7 INS32 INS43 INS59 INS27 INS8 INS7 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS38 INS25 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS22 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS33 INS32 INS27 INS8 INS8 INS32 INS42 INS42 INS57 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS43 INS42 INS42 INS7 INS7 INS42 INS25 INS21 INS42 INS32 INS42 INS32 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS74 INS59 INS27 INS8 INS43 INS43 INS43 INS42 INS32 INS27 INS38 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42