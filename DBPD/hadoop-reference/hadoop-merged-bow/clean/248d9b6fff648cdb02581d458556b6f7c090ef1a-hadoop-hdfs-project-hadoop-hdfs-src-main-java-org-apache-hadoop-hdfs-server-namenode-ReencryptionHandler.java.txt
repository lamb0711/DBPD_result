HDFS-12518. Re-encryption should handle task cancellation and progress better.

+import java.util.HashMap;
-import java.util.concurrent.ConcurrentHashMap;
-  private final Map<Long, ZoneSubmissionTracker> submissions =
-      new ConcurrentHashMap<>();
+  private final Map<Long, ZoneSubmissionTracker> submissions = new HashMap<>();
-    for (ZoneSubmissionTracker zst : submissions.values()) {
-      zst.cancelAllTasks();
+    synchronized (this) {
+      for (ZoneSubmissionTracker zst : submissions.values()) {
+        zst.cancelAllTasks();
+      }
-    ZoneSubmissionTracker zst = submissions.get(zoneId);
-    if (zst != null) {
-      zst.cancelAllTasks();
-    }
+    removeZoneTrackerStopTasks(zoneId);
-    ZoneSubmissionTracker zst = submissions.get(zoneId);
-    if (zst != null) {
-      zst.cancelAllTasks();
-    }
-    submissions.remove(zoneId);
+    removeZoneTrackerStopTasks(zoneId);
+  synchronized private void removeZoneTrackerStopTasks(final long zoneId) {
+    final ZoneSubmissionTracker zst = submissions.get(zoneId);
+    if (zst != null) {
+      zst.cancelAllTasks();
+      submissions.remove(zoneId);
+    }
+  }
+
-    dir.hasReadLock();
+    assert dir.hasReadLock();
-   * get the tracker without holding the FSDirectory lock. This is only used for
-   * testing, when updater checks about pausing.
+   * Get the tracker without holding the FSDirectory lock.
+   * The submissions object is protected by object lock.
-  ZoneSubmissionTracker unprotectedGetTracker(final long zoneId) {
+  synchronized ZoneSubmissionTracker unprotectedGetTracker(final long zoneId) {
-  void addDummyTracker(final long zoneId) {
+  void addDummyTracker(final long zoneId, ZoneSubmissionTracker zst) {
-    assert !submissions.containsKey(zoneId);
-    final ZoneSubmissionTracker zst = new ZoneSubmissionTracker();
+    if (zst == null) {
+      zst = new ZoneSubmissionTracker();
+    }
-    Future future = batchService.submit(
+    final Future future = batchService.submit(
-    submissions.put(zoneId, zst);
+    synchronized (this) {
+      submissions.put(zoneId, zst);
+    }
+        getReencryptionStatus().markZoneStarted(zoneId);
+        resetSubmissionTracker(zoneId);
-      getReencryptionStatus().markZoneStarted(zoneId);
+  /**
+   * Reset the zone submission tracker for re-encryption.
+   * @param zoneId
+   */
+  synchronized private void resetSubmissionTracker(final long zoneId) {
+    ZoneSubmissionTracker zst = submissions.get(zoneId);
+    if (zst == null) {
+      zst = new ZoneSubmissionTracker();
+      submissions.put(zoneId, zst);
+    } else {
+      zst.reset();
+    }
+  }
+
-    // This also removes the zone from reencryptionStatus
-    submissions.remove(zoneId);
+    synchronized (this) {
+      submissions.remove(zoneId);
+    }
-    ZoneSubmissionTracker zst = submissions.get(zoneId);
-    if (zst == null) {
-      zst = new ZoneSubmissionTracker();
-      submissions.put(zoneId, zst);
+    ZoneSubmissionTracker zst;
+    synchronized (this) {
+      zst = submissions.get(zoneId);
+      if (zst == null) {
+        zst = new ZoneSubmissionTracker();
+        submissions.put(zoneId, zst);
+      }
-    int totalTasks = 0;
-    for (ZoneSubmissionTracker zst : submissions.values()) {
-      totalTasks += zst.getTasks().size();
-    }
-    if (totalTasks >= maxTasksPiled) {
+    int numTasks = numTasksSubmitted();
+    if (numTasks >= maxTasksPiled) {
-          + " re-encryption updater is {}", totalTasks);
-      while (totalTasks >= maxTasksPiled) {
+          + " re-encryption updater is {}", numTasks);
+      while (numTasks >= maxTasksPiled) {
-        totalTasks = 0;
-        for (ZoneSubmissionTracker zst : submissions.values()) {
-          totalTasks += zst.getTasks().size();
-        }
+        numTasks = numTasksSubmitted();
+  private synchronized int numTasksSubmitted() {
+    int ret = 0;
+    for (ZoneSubmissionTracker zst : submissions.values()) {
+      ret += zst.getTasks().size();
+    }
+    return ret;
+  }
+
-    dir.hasReadLock();
+    assert dir.hasReadLock();

MOV26 UPD40 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS8 INS83 MOV44 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 MOV8 INS51 INS21 INS83 INS39 INS42 INS60 MOV25 INS6 INS25 INS51 INS65 INS65 INS83 INS39 INS42 MOV60 INS25 INS51 INS60 INS51 INS60 INS60 INS41 INS6 UPD74 INS52 INS8 INS32 INS83 MOV43 INS59 INS32 UPD66 UPD66 INS27 INS8 INS83 INS52 INS8 INS66 INS42 INS27 INS8 INS8 INS52 INS8 INS43 INS59 INS52 INS8 MOV39 INS59 INS39 INS59 INS42 INS32 UPD43 MOV70 UPD42 MOV42 MOV42 UPD42 INS42 INS32 INS21 MOV42 MOV42 INS42 INS33 INS21 INS21 INS42 INS33 INS21 MOV21 INS21 MOV21 INS42 INS42 INS21 MOV25 UPD42 MOV42 INS32 UPD42 INS42 INS34 MOV42 MOV42 UPD42 INS42 INS42 INS42 INS32 INS7 INS32 INS7 INS32 INS7 UPD42 MOV42 INS8 MOV42 INS42 INS42 INS42 MOV14 MOV42 UPD42 MOV42 MOV42 INS42 MOV21 INS21 INS42 INS14 INS42 INS42 INS42 INS32 UPD42 UPD42 MOV21 INS21 UPD42 INS32 INS43 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS32 INS42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL21 DEL32 DEL38 DEL6 DEL83 DEL42 DEL59 DEL60 DEL34 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL70 DEL42 DEL34 DEL7 DEL21 DEL32 DEL21