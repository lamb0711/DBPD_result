HDFS-8320. Erasure coding: consolidate striping-related terminologies. Contributed by Zhe Zhang and Jing Zhao.

-import org.apache.hadoop.hdfs.protocol.HdfsConstants;
-import static org.apache.hadoop.hdfs.util.StripedBlockUtil.planReadPortions;
-import static org.apache.hadoop.hdfs.util.StripedBlockUtil.ReadPortion;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.getStartOffsetsForInternalBlocks;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.parseStripedBlockGroup;
-/******************************************************************************
- * DFSStripedInputStream reads from striped block groups, illustrated below:
- *
- * | <- Striped Block Group -> |
- *  blk_0      blk_1       blk_2   <- A striped block group has
- *    |          |           |          {@link #dataBlkNum} blocks
- *    v          v           v
- * +------+   +------+   +------+
- * |cell_0|   |cell_1|   |cell_2|  <- The logical read order should be
- * +------+   +------+   +------+       cell_0, cell_1, ...
- * |cell_3|   |cell_4|   |cell_5|
- * +------+   +------+   +------+
- * |cell_6|   |cell_7|   |cell_8|
- * +------+   +------+   +------+
- * |cell_9|
- * +------+  <- A cell contains {@link #cellSize} bytes of data
- *
- * Three styles of read will eventually be supported:
- *   1. Stateful read
- *   2. pread without decode support
- *     This is implemented by calculating the portion of read from each block and
- *     issuing requests to each DataNode in parallel.
- *   3. pread with decode support: TODO: will be supported after HDFS-7678
- *****************************************************************************/
+/**
+ * DFSStripedInputStream reads from striped block groups
+ */
-    LocatedBlock[] targetBlocks = StripedBlockUtil.parseStripedBlockGroup(
+    LocatedBlock[] targetBlocks = parseStripedBlockGroup(
-    // The purpose is to get start offset into each block
-    ReadPortion[] readPortions = planReadPortions(groupSize, cellSize,
-        offsetIntoBlockGroup, 0, 0);
+    // The purpose is to get start offset into each block.
+    long[] offsetsForInternalBlocks = getStartOffsetsForInternalBlocks(schema,
+        targetBlockGroup, offsetIntoBlockGroup);
+    Preconditions.checkNotNull(offsetsForInternalBlocks);
+        long offsetInBlock = offsetsForInternalBlocks[i] < 0 ?
+            0 : offsetsForInternalBlocks[i];
-              readPortions[i].getStartOffsetInBlock(),
-              targetBlock.getBlockSize() - readPortions[i].getStartOffsetInBlock(),
+              offsetInBlock, targetBlock.getBlockSize() - offsetInBlock,

MOV26 UPD40 UPD40 UPD66 INS21 UPD5 INS32 INS39 UPD42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS60 INS39 INS59 INS42 INS16 INS27 INS34 INS2 INS2 INS34 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 DEL40 DEL26 DEL66 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL42 DEL43 DEL34 DEL34 DEL42 DEL42 DEL2 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32