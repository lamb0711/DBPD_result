HDFS-1580. Add interface for generic Write Ahead Logging mechanisms. Contributed by Ivan Kelly.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210602 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.Constructor;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+  private Configuration conf;
+    this.conf = conf;
-      StorageDirectory sd = storage.getStorageDirectory(u);
-      if (sd != null) {
-        journalSet.add(new FileJournalManager(sd));
+      if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {
+        StorageDirectory sd = storage.getStorageDirectory(u);
+        if (sd != null) {
+          journalSet.add(new FileJournalManager(sd));
+        }
+      } else {
+        journalSet.add(createJournal(u));
+
+  /**
+   * Retrieve the implementation class for a Journal scheme.
+   * @param conf The configuration to retrieve the information from
+   * @param uriScheme The uri scheme to look up.
+   * @return the class of the journal implementation
+   * @throws IllegalArgumentException if no class is configured for uri
+   */
+  static Class<? extends JournalManager> getJournalClass(Configuration conf,
+                               String uriScheme) {
+    String key
+      = DFSConfigKeys.DFS_NAMENODE_EDITS_PLUGIN_PREFIX + "." + uriScheme;
+    Class <? extends JournalManager> clazz = null;
+    try {
+      clazz = conf.getClass(key, null, JournalManager.class);
+    } catch (RuntimeException re) {
+      throw new IllegalArgumentException(
+          "Invalid class specified for " + uriScheme, re);
+    }
+      
+    if (clazz == null) {
+      LOG.warn("No class configured for " +uriScheme
+               + ", " + key + " is empty");
+      throw new IllegalArgumentException(
+          "No class configured for " + uriScheme);
+    }
+    return clazz;
+  }
+
+  /**
+   * Construct a custom journal manager.
+   * The class to construct is taken from the configuration.
+   * @param uri Uri to construct
+   * @return The constructed journal manager
+   * @throws IllegalArgumentException if no class is configured for uri
+   */
+  private JournalManager createJournal(URI uri) {
+    Class<? extends JournalManager> clazz
+      = getJournalClass(conf, uri.getScheme());
+
+    try {
+      Constructor<? extends JournalManager> cons
+        = clazz.getConstructor(Configuration.class, URI.class);
+      return cons.newInstance(conf, uri);
+    } catch (Exception e) {
+      throw new IllegalArgumentException("Unable to construct journal, "
+                                         + uri, e);
+    }
+  }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS83 INS43 INS59 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS76 INS43 INS42 INS43 INS42 INS60 INS60 INS54 INS25 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS54 INS7 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS42 INS42 INS43 INS59 INS74 INS59 INS8 INS12 INS27 INS8 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS74 INS59 INS8 INS12 INS22 INS42 INS25 INS42 INS42 INS42 INS27 INS43 INS76 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS21 INS53 INS43 INS76 INS42 INS32 INS60 INS41 INS44 INS8 INS52 INS42 INS32 MOV8 INS8 INS40 INS45 INS42 INS42 INS43 INS7 INS43 INS42 INS53 INS32 INS14 INS42 INS43 INS42 INS42 INS32 INS74 INS59 INS32 INS43 INS42 INS53 INS32 INS42 INS40 INS21 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS27 INS43 INS27 INS42 INS42 INS42 INS43 INS76 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS57 INS43 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS57 INS57 INS43 INS27 INS42 INS42 INS42 INS32 INS43 INS42 INS45 INS42 INS42 INS43 INS43 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42