HDFS-5542. Fix TODO and clean up the code in HDFS-2832. (Contributed by szetszwo)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1544664 13f79535-47bb-0310-9956-ffa450edef68

-      builder.addAllStorageIDs(Arrays.asList(b.getStorageIDs()));
+      builder.addAllStorageIDs(Arrays.asList(storageIDs));
-    List<StorageTypeProto> storageTypesList = proto.getStorageTypesList();
-    StorageType[] storageTypes = new StorageType[locs.size()];
-
-
-    // The media should correspond to targets 1:1. If not then
-    // ignore the media information (left as default).
-    if ((storageTypesList != null) &&
-        (storageTypesList.size() == locs.size())) {
-      for (int i = 0; i < storageTypesList.size(); ++i) {
-        storageTypes[i] = PBHelper.convertType(storageTypesList.get(i));
-      }
+    final int storageTypesCount = proto.getStorageTypesCount();
+    final StorageType[] storageTypes;
+    if (storageTypesCount == 0) {
+      storageTypes = null;
+    } else {
+      Preconditions.checkState(storageTypesCount == locs.size());
+      storageTypes = convertStorageTypeProtos(proto.getStorageTypesList());
-    final String[] storageIDs = storageIDsCount == 0? null
-        : proto.getStorageIDsList().toArray(new String[storageIDsCount]);
+    final String[] storageIDs;
+    if (storageIDsCount == 0) {
+      storageIDs = null;
+    } else {
+      Preconditions.checkState(storageIDsCount == locs.size());
+      storageIDs = proto.getStorageIDsList().toArray(new String[storageIDsCount]);
+    }
-      Preconditions.checkState(
-          false,
-          "Failed to update StorageTypeProto with new StorageType " +
-              type.toString());
-      return StorageTypeProto.DISK;
+      throw new IllegalStateException(
+          "BUG: StorageType not found, type=" + type);
-    if (s.hasStorageType()) {
-      return new DatanodeStorage(s.getStorageUuid(),
-                                 PBHelper.convertState(s.getState()),
-                                 PBHelper.convertType(s.getStorageType()));
-    } else {
-      return new DatanodeStorage(s.getStorageUuid(),
-                                 PBHelper.convertState(s.getState()));
-    }
+    return new DatanodeStorage(s.getStorageUuid(),
+                               PBHelper.convertState(s.getState()),
+                               PBHelper.convertType(s.getStorageType()));
-        return StorageType.DEFAULT;
+        throw new IllegalStateException(
+            "BUG: StorageTypeProto not found, type=" + type);
+  private static StorageType[] convertStorageTypeProtos(
+      List<StorageTypeProto> storageTypesList) {
+    final StorageType[] storageTypes = new StorageType[storageTypesList.size()];
+    for (int i = 0; i < storageTypes.length; ++i) {
+      storageTypes[i] = PBHelper.convertType(storageTypesList.get(i));
+    }
+    return storageTypes;
+  }
+

INS31 MOV8 INS83 INS83 INS5 INS42 INS44 MOV8 INS60 INS25 INS43 INS85 MOV74 INS42 MOV60 INS41 INS83 INS39 INS59 INS83 MOV5 INS27 INS8 INS8 MOV27 INS8 INS8 INS53 INS53 INS42 INS83 INS5 INS42 INS42 INS32 UPD42 UPD42 MOV42 INS34 INS21 INS21 INS21 INS21 INS21 INS21 INS14 INS14 INS43 INS85 INS40 INS42 INS42 INS7 INS32 INS7 INS7 INS32 INS7 INS43 INS27 INS43 INS27 INS42 MOV32 INS42 INS33 INS42 INS42 INS27 INS42 INS32 INS42 INS33 INS42 INS42 MOV27 INS42 MOV32 INS42 UPD45 MOV45 INS42 INS42 INS45 INS42 UPD42 MOV42 INS42 MOV32 INS42 MOV32 INS42 DEL42 DEL32 DEL33 DEL27 DEL36 DEL36 DEL27 DEL33 DEL16 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL40 DEL41 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL41 DEL8 DEL25 DEL8 DEL40 DEL41