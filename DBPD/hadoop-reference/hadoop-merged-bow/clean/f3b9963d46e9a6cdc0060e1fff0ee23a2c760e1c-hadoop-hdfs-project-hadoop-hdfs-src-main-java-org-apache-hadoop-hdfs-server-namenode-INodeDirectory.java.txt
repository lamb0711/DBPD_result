HDFS-4118. Change INodeDirectory.getExistingPathINodes(..) to work with snapshots. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1403959 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectorySnapshotRoot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectorySnapshottable;
-  INodesInPath getExistingPathINodes(byte[][] components, int numOfINodes,
-      boolean resolveLink)
-      throws UnresolvedLinkException {
+  INodesInPath getExistingPathINodes(byte[][] components, int numOfINodes, 
+      boolean resolveLink) throws UnresolvedLinkException {
-        existing.inodes[index] = curNode;
+        existing.addNode(curNode);
-      curNode = parentDir.getChildINode(components[count + 1]);
+      
+      // check if the next byte[] in components is for ".snapshot"
+      if (isDotSnapshotDir(components[count + 1])
+          && (curNode instanceof INodeDirectorySnapshottable)) {
+        // skip the ".snapshot" in components
+        count++;
+        index++;
+        existing.isSnapshot = true;
+        if (index >= 0) { // decrease the capacity by 1 to account for .snapshot
+          existing.capacity--;
+        }
+        // check if ".snapshot" is the last element of components
+        if (count == components.length - 1) {
+          return existing;
+        }
+        // Resolve snapshot root
+        curNode = ((INodeDirectorySnapshottable) parentDir)
+            .getSnapshotINode(components[count + 1]);
+        if (index >= -1) {
+          existing.snapshotRootIndex = existing.size;
+        }
+      } else {
+        // normal case, and also for resolving file/dir under snapshot root
+        curNode = parentDir.getChildINode(components[count + 1]);
+      }
+   * @return true if path component is {@link HdfsConstants#DOT_SNAPSHOT_DIR}
+   */
+  private static boolean isDotSnapshotDir(byte[] pathComponent) {
+    return pathComponent == null ? false : HdfsConstants.DOT_SNAPSHOT_DIR
+        .equalsIgnoreCase(DFSUtil.bytes2String(pathComponent));
+  }
+  
+  /**
-   * Containing INodes information resolved from a given path.
+   * Contains INodes information resolved from a given path.
+    /**
+     * Array with the specified number of INodes resolved for a given path.
+     */
-    
-    public INodesInPath(int number) {
+    /**
+     * Indicate the number of non-null elements in {@link #inodes}
+     */
+    private int size;
+    /**
+     * The path for a snapshot file/dir contains the .snapshot thus makes the
+     * length of the path components larger the number of inodes. We use
+     * the capacity to control this special case.
+     */
+    private int capacity;
+    /**
+     * true if this path corresponds to a snapshot
+     */
+    private boolean isSnapshot;
+    /**
+     * Index of {@link INodeDirectorySnapshotRoot} for snapshot path, else -1
+     */
+    private int snapshotRootIndex;
+
+    INodesInPath(int number) {
-      this.inodes = new INode[number];
+      inodes = new INode[number];
+      capacity = number;
+      size = 0;
+      isSnapshot = false;
+      snapshotRootIndex = -1;
+    }
+
+    /**
+     * @return the whole inodes array including the null elements.
+     */
+    INode[] getINodes() {
+      if (capacity < inodes.length) {
+        INode[] newNodes = new INode[capacity];
+        for (int i = 0; i < capacity; i++) {
+          newNodes[i] = inodes[i];
+        }
+        inodes = newNodes;
+      }
+      return inodes;
-    INode[] getINodes() {
-      return inodes;
+    /**
+     * @return index of the {@link INodeDirectorySnapshotRoot} in
+     *         {@link #inodes} for snapshot path, else -1.
+     */
+    int getSnapshotRootIndex() {
+      return this.snapshotRootIndex;
+    }
+    
+    /**
+     * @return isSnapshot true for a snapshot path
+     */
+    boolean isSnapshot() {
+      return this.isSnapshot;
+    }
+    
+    /**
+     * Add an INode at the end of the array
+     */
+    private void addNode(INode node) {
+      assert size < inodes.length;
+      inodes[size++] = node;
+    }
+    
+    /**
+     * @return The number of non-null elements
+     */
+    int getSize() {
+      return size;

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS65 INS5 INS42 INS41 INS29 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS8 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS8 MOV25 INS66 INS65 INS39 INS85 INS16 UPD66 INS65 INS65 INS42 INS65 INS42 INS65 INS42 INS65 INS42 INS21 INS21 INS21 INS21 INS65 INS25 MOV41 INS65 INS41 INS65 INS41 INS65 INS43 INS42 INS6 INS21 INS65 INS41 INS25 INS67 INS27 INS9 INS32 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS7 INS7 INS7 INS7 INS66 INS27 INS8 INS66 INS65 INS66 INS65 INS66 INS22 INS66 INS22 INS66 INS42 INS27 INS7 INS66 INS42 MOV27 INS8 INS27 INS8 INS42 INS42 INS42 INS33 INS40 INS42 INS32 INS67 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS9 INS42 INS38 INS42 INS40 INS60 INS24 INS21 INS42 INS67 INS52 INS42 INS52 INS42 INS42 INS40 INS2 INS42 INS21 INS32 INS36 INS21 INS21 INS21 INS25 INS25 INS21 INS25 MOV21 INS42 INS42 INS42 INS42 INS34 INS5 INS59 INS58 INS27 INS37 INS8 INS7 INS42 INS42 INS37 INS32 INS42 INS2 INS62 INS37 INS37 INS7 INS27 INS8 INS27 INS8 INS7 INS27 INS8 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS43 INS42 INS42 INS40 INS9 INS42 INS34 INS21 INS42 INS27 INS41 MOV42 INS32 INS42 INS38 INS21 INS42 INS5 INS42 INS42 INS34 INS7 INS42 INS34 INS42 INS37 INS40 INS34 INS42 INS36 INS42 INS2 INS34 INS7 INS43 INS85 INS2 INS2 INS40 INS11 INS42 INS27 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS34 INS42 DEL40 DEL42 DEL2 DEL7 DEL21 DEL83 DEL52 DEL42 DEL22 DEL8