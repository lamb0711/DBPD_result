HDFS-12115. Ozone: SCM: Add queryNode RPC Call. Contributed by Anu Engineer.

-import org.apache.hadoop.ozone.protocol.proto.ScmBlockLocationProtocolProtos;
-import org.apache.hadoop.ozone.protocolPB
-    .ScmBlockLocationProtocolServerSideTranslatorPB;
-import org.apache.hadoop.ozone.scm.block.BlockManager;
-import org.apache.hadoop.ozone.scm.block.BlockManagerImpl;
-import org.apache.hadoop.ozone.scm.exceptions.SCMException;
-import org.apache.hadoop.scm.client.ScmClient;
-import org.apache.hadoop.scm.container.common.helpers.AllocatedBlock;
-import org.apache.hadoop.scm.container.common.helpers.DeleteBlockResult;
-import org.apache.hadoop.scm.protocol.ScmBlockLocationProtocol;
-import org.apache.hadoop.scm.protocol.StorageContainerLocationProtocol;
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos;
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos.NodeState;
+import org.apache.hadoop.ozone.protocol.proto.ScmBlockLocationProtocolProtos;
+    .StorageContainerDatanodeProtocolProtos.SCMReregisterCmdResponseProto;
+import org.apache.hadoop.ozone.protocol.proto
-import org.apache.hadoop.ozone.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.SCMReregisterCmdResponseProto;
+import org.apache.hadoop.ozone.protocolPB
+    .ScmBlockLocationProtocolServerSideTranslatorPB;
-import org.apache.hadoop.scm.protocolPB.ScmBlockLocationProtocolPB;
-import org.apache.hadoop.scm.protocolPB.StorageContainerLocationProtocolPB;
+import org.apache.hadoop.ozone.scm.block.BlockManager;
+import org.apache.hadoop.ozone.scm.block.BlockManagerImpl;
+import org.apache.hadoop.ozone.scm.exceptions.SCMException;
+import org.apache.hadoop.scm.client.ScmClient;
+import org.apache.hadoop.scm.container.common.helpers.AllocatedBlock;
+import org.apache.hadoop.scm.container.common.helpers.DeleteBlockResult;
+import org.apache.hadoop.scm.protocol.ScmBlockLocationProtocol;
+import org.apache.hadoop.scm.protocol.StorageContainerLocationProtocol;
+import org.apache.hadoop.scm.protocolPB.ScmBlockLocationProtocolPB;
+import org.apache.hadoop.scm.protocolPB.StorageContainerLocationProtocolPB;
+import java.util.Collection;
+import java.util.EnumSet;
-import java.util.Collection;
+import java.util.TreeSet;
-
-import static org.apache.hadoop.scm.ScmConfigKeys
-    .OZONE_SCM_CLIENT_ADDRESS_KEY;
+import static org.apache.hadoop.scm.ScmConfigKeys.OZONE_SCM_CLIENT_ADDRESS_KEY;
-import static org.apache.hadoop.scm.ScmConfigKeys
-    .OZONE_SCM_DB_CACHE_SIZE_MB;
+import static org.apache.hadoop.scm.ScmConfigKeys.OZONE_SCM_DB_CACHE_SIZE_MB;
-import static org.apache.hadoop.scm.ScmConfigKeys
-    .OZONE_SCM_HANDLER_COUNT_KEY;
+import static org.apache.hadoop.scm.ScmConfigKeys.OZONE_SCM_HANDLER_COUNT_KEY;
-    StorageContainerLocationProtocol, ScmBlockLocationProtocol, SCMMXBean{
+    StorageContainerLocationProtocol, ScmBlockLocationProtocol, SCMMXBean {
+   * Queries a list of Node Statuses.
+   *
+   * @param nodeStatuses
+   * @param queryScope
+   * @param poolName @return List of Datanodes.
+   */
+  @Override
+  public OzoneProtos.NodePool queryNode(EnumSet<NodeState> nodeStatuses,
+      OzoneProtos.QueryScope queryScope, String poolName) throws IOException {
+
+    if (queryScope == OzoneProtos.QueryScope.POOL) {
+      throw new IllegalArgumentException("Not Supported yet");
+    }
+
+    List<DatanodeID> datanodes = queryNode(nodeStatuses);
+    OzoneProtos.NodePool.Builder poolBuilder =
+        OzoneProtos.NodePool.newBuilder();
+
+    for (DatanodeID datanode : datanodes) {
+      OzoneProtos.Node node = OzoneProtos.Node.newBuilder()
+          .setNodeID(datanode.getProtoBufMessage())
+          .addAllNodeStates(nodeStatuses)
+          .build();
+      poolBuilder.addNodes(node);
+    }
+
+    return poolBuilder.build();
+  }
+
+  /**
+   * Queries a list of Node that match a set of statuses.
+   * <p>
+   * For example, if the nodeStatuses is HEALTHY and RAFT_MEMBER,
+   * then this call will return all healthy nodes which members in
+   * Raft pipeline.
+   * <p>
+   * Right now we don't support operations, so we assume it is an AND operation
+   * between the operators.
+   *
+   * @param nodeStatuses - A set of NodeStates.
+   * @return List of Datanodes.
+   */
+
+  public List<DatanodeID> queryNode(EnumSet<NodeState> nodeStatuses) {
+    Preconditions.checkNotNull(nodeStatuses, "Node Query set cannot be null");
+    Preconditions.checkState(nodeStatuses.size() > 0, "No valid arguments " +
+        "in the query set");
+    List<DatanodeID> resultList = new LinkedList<>();
+    Set<DatanodeID> currentSet = new TreeSet<>();
+
+    for (NodeState nodeState : nodeStatuses) {
+      Set<DatanodeID> nextSet = queryNodeState(nodeState);
+      if ((nextSet == null) || (nextSet.size() == 0)) {
+        // Right now we only support AND operation. So intersect with
+        // any empty set is null.
+        return resultList;
+      }
+      // First time we have to add all the elements, next time we have to
+      // do an intersection operation on the set.
+      if (currentSet.size() == 0) {
+        currentSet.addAll(nextSet);
+      } else {
+        currentSet.retainAll(nextSet);
+      }
+    }
+
+    resultList.addAll(currentSet);
+    return resultList;
+  }
+
+  /**
+   * Query the System for Nodes.
+   *
+   * @param nodeState - NodeState that we are interested in matching.
+   * @return Set of Datanodes that match the NodeState.
+   */
+  private Set<DatanodeID> queryNodeState(NodeState nodeState) {
+    if (nodeState == NodeState.RAFT_MEMBER ||
+        nodeState == NodeState.FREE_NODE) {
+      throw new IllegalStateException("Not implemented yet");
+    }
+    Set<DatanodeID> returnSet = new TreeSet<>();
+    List<DatanodeID> tmp = getScmNodeManager().getNodes(nodeState);
+    if ((tmp != null) && (tmp.size() > 0)) {
+      returnSet.addAll(tmp);
+    }
+    return returnSet;
+  }
+
+  /**
-  public int getNodeCount(SCMNodeManager.NODESTATE nodestate) {
+  public int getNodeCount(NodeState nodestate) {
-    for (SCMNodeManager.NODESTATE state : SCMNodeManager.NODESTATE.values()) {
+    for (NodeState state : NodeState.values()) {

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS29 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS42 INS40 INS74 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS60 INS60 INS70 INS41 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS21 INS21 INS60 INS60 INS70 INS21 INS41 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS25 INS60 INS60 INS25 INS41 UPD43 INS66 INS42 INS42 INS42 INS66 INS43 INS43 INS40 INS42 INS27 INS8 INS74 INS59 INS43 INS59 INS44 INS42 INS8 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS32 INS32 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS27 INS8 INS74 INS59 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS40 INS53 INS43 INS43 INS42 INS32 INS40 INS42 INS32 INS43 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS27 INS27 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS25 INS25 INS42 INS42 INS42 INS27 INS27 INS53 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS36 INS36 INS21 UPD43 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS59 INS32 INS32 INS34 INS45 INS45 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS74 INS59 INS27 INS8 INS27 INS8 INS8 INS42 INS40 INS42 INS40 INS14 INS42 INS42 INS74 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS32 INS42 INS43 INS45 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS32 INS36 INS36 INS41 INS32 INS34 INS21 INS21 INS43 INS45 INS43 INS42 INS42 INS33 INS32 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 DEL40 DEL40 DEL40