YARN-2468. Enhanced NodeManager to support log handling APIs (YARN-2569) for use by long running services. Contributed by Xuan Gong.

+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+import java.util.regex.Pattern;
+import org.apache.hadoop.yarn.api.records.LogAggregationContext;
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Sets;
+
+    private final LogAggregationContext logAggregationContext;
+    private Set<File> uploadedFiles = new HashSet<File>();
+    private final Set<String> alreadyUploadedLogFiles;
+    private Set<String> allExistingFileMeta = new HashSet<String>();
+      this(rootLogDirs, containerId, user, null, new HashSet<String>());
+    }
+
+    public LogValue(List<String> rootLogDirs, ContainerId containerId,
+        String user, LogAggregationContext logAggregationContext,
+        Set<String> alreadyUploadedLogFiles) {
+      this.logAggregationContext = logAggregationContext;
+      this.alreadyUploadedLogFiles = alreadyUploadedLogFiles;
-    public void write(DataOutputStream out) throws IOException {
+    private Set<File> getPendingLogFilesToUploadForThisContainer() {
+      Set<File> pendingUploadFiles = new HashSet<File>();
-        // Write out log files in lexical order
-        File[] logFiles = containerLogDir.listFiles();
-        Arrays.sort(logFiles);
-        for (File logFile : logFiles) {
+        pendingUploadFiles
+          .addAll(getPendingLogFilesToUpload(containerLogDir));
+      }
+      return pendingUploadFiles;
+    }
-          final long fileLength = logFile.length();
+    public void write(DataOutputStream out, Set<File> pendingUploadFiles)
+        throws IOException {
+      List<File> fileList = new ArrayList<File>(pendingUploadFiles);
+      Collections.sort(fileList);
-          // Write the logFile Type
-          out.writeUTF(logFile.getName());
+      for (File logFile : fileList) {
+        final long fileLength = logFile.length();
+        // Write the logFile Type
+        out.writeUTF(logFile.getName());
-          // Write the log length as UTF so that it is printable
-          out.writeUTF(String.valueOf(fileLength));
+        // Write the log length as UTF so that it is printable
+        out.writeUTF(String.valueOf(fileLength));
-          // Write the log itself
-          FileInputStream in = null;
-          try {
-            in = SecureIOUtils.openForRead(logFile, getUser(), null);
-            byte[] buf = new byte[65535];
-            int len = 0;
-            long bytesLeft = fileLength;
-            while ((len = in.read(buf)) != -1) {
-              //If buffer contents within fileLength, write
-              if (len < bytesLeft) {
-                out.write(buf, 0, len);
-                bytesLeft-=len;
-              }
-              //else only write contents within fileLength, then exit early
-              else {
-                out.write(buf, 0, (int)bytesLeft);
-                break;
-              }
+        // Write the log itself
+        FileInputStream in = null;
+        try {
+          in = SecureIOUtils.openForRead(logFile, getUser(), null);
+          byte[] buf = new byte[65535];
+          int len = 0;
+          long bytesLeft = fileLength;
+          while ((len = in.read(buf)) != -1) {
+            //If buffer contents within fileLength, write
+            if (len < bytesLeft) {
+              out.write(buf, 0, len);
+              bytesLeft-=len;
-            long newLength = logFile.length();
-            if(fileLength < newLength) {
-              LOG.warn("Aggregated logs truncated by approximately "+
-                  (newLength-fileLength) +" bytes.");
+            //else only write contents within fileLength, then exit early
+            else {
+              out.write(buf, 0, (int)bytesLeft);
+              break;
-          } catch (IOException e) {
-            String message = "Error aggregating log file. Log file : "
-                + logFile.getAbsolutePath() + e.getMessage(); 
-            LOG.error(message, e);
-            out.write(message.getBytes());
-          } finally {
-            if (in != null) {
-              in.close();
-            }
+          }
+          long newLength = logFile.length();
+          if(fileLength < newLength) {
+            LOG.warn("Aggregated logs truncated by approximately "+
+                (newLength-fileLength) +" bytes.");
+          }
+          this.uploadedFiles.add(logFile);
+        } catch (IOException e) {
+          String message = "Error aggregating log file. Log file : "
+              + logFile.getAbsolutePath() + e.getMessage();
+          LOG.error(message, e);
+          out.write(message.getBytes());
+        } finally {
+          if (in != null) {
+            in.close();
-    
+
+
+    private Set<File> getPendingLogFilesToUpload(File containerLogDir) {
+      Set<File> candidates =
+          new HashSet<File>(Arrays.asList(containerLogDir.listFiles()));
+      for (File logFile : candidates) {
+        this.allExistingFileMeta.add(getLogFileMetaData(logFile));
+      }
+
+      if (this.logAggregationContext != null && candidates.size() > 0) {
+        if (this.logAggregationContext.getIncludePattern() != null
+            && !this.logAggregationContext.getIncludePattern().isEmpty()) {
+          filterFiles(this.logAggregationContext.getIncludePattern(),
+              candidates, false);
+        }
+
+        if (this.logAggregationContext.getExcludePattern() != null
+            && !this.logAggregationContext.getExcludePattern().isEmpty()) {
+          filterFiles(this.logAggregationContext.getExcludePattern(),
+              candidates, true);
+        }
+
+        Iterable<File> mask =
+            Iterables.filter(candidates, new Predicate<File>() {
+              @Override
+              public boolean apply(File next) {
+                return !alreadyUploadedLogFiles
+                  .contains(getLogFileMetaData(next));
+              }
+            });
+        candidates = Sets.newHashSet(mask);
+      }
+      return candidates;
+    }
+
+    private void filterFiles(String pattern, Set<File> candidates,
+        boolean exclusion) {
+      Pattern filterPattern =
+          Pattern.compile(pattern);
+      for (Iterator<File> candidatesItr = candidates.iterator(); candidatesItr
+          .hasNext();) {
+        File candidate = candidatesItr.next();
+        boolean match = filterPattern.matcher(candidate.getName()).find();
+        if ((!match && !exclusion) || (match && exclusion)) {
+          candidatesItr.remove();
+        }
+      }
+    }
+
+    public Set<Path> getCurrentUpLoadedFilesPath() {
+      Set<Path> path = new HashSet<Path>();
+      for (File file : this.uploadedFiles) {
+        path.add(new Path(file.getAbsolutePath()));
+      }
+      return path;
+    }
+
+    public Set<String> getCurrentUpLoadedFileMeta() {
+      Set<String> info = new HashSet<String>();
+      for (File file : this.uploadedFiles) {
+        info.add(getLogFileMetaData(file));
+      }
+      return info;
+    }
+
+    public Set<String> getAllExistingFilesMeta() {
+      return this.allExistingFileMeta;
+    }
+
+    private String getLogFileMetaData(File file) {
+      return containerId.toString() + "_" + file.getName() + "_"
+          + file.lastModified();
+    }
+    private FileContext fc;
-                FileContext fc = FileContext.getFileContext(conf);
+                fc = FileContext.getFileContext(conf);
+      Set<File> pendingUploadFiles =
+          logValue.getPendingLogFilesToUploadForThisContainer();
+      if (pendingUploadFiles.size() == 0) {
+        return;
+      }
-      logValue.write(out);
+      logValue.write(out, pendingUploadFiles);
-      try {
-        this.fsDataOStream.close();
-      } catch (IOException e) {
-        LOG.warn("Exception closing output-stream", e);
-      }
+      IOUtils.closeStream(fsDataOStream);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS23 INS83 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS44 INS44 INS83 INS74 INS42 INS8 INS44 MOV8 INS83 INS74 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS74 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 MOV43 INS59 MOV21 MOV21 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS43 INS43 INS42 INS14 INS74 INS42 INS43 INS42 INS43 INS42 INS17 INS43 INS42 INS74 INS42 INS21 INS21 INS43 INS43 INS60 INS70 INS41 INS74 INS42 INS43 INS43 MOV43 INS42 INS60 INS70 INS25 INS41 INS43 INS42 INS74 INS42 INS39 INS42 INS60 INS24 INS43 INS43 INS60 INS70 INS41 INS43 INS43 INS60 INS70 INS41 INS43 INS43 INS41 INS42 INS43 INS42 INS41 INS42 INS60 INS25 MOV21 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS14 INS42 INS43 INS43 INS7 INS7 INS42 INS42 INS74 INS59 MOV44 MOV22 INS8 INS42 INS43 INS43 INS74 UPD42 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS27 INS8 INS42 INS42 INS43 INS43 INS43 INS59 INS58 INS32 INS8 INS42 INS42 INS74 INS59 INS44 INS22 INS8 INS42 INS42 INS42 INS74 INS59 INS44 INS22 INS8 INS42 INS42 INS42 INS22 INS42 INS27 INS74 INS59 INS27 INS8 INS43 INS43 INS43 INS43 INS42 INS42 INS74 INS42 INS42 INS22 INS42 INS22 INS42 INS43 INS43 INS42 INS14 MOV60 MOV60 MOV25 INS21 INS42 INS42 INS43 INS43 INS42 INS14 UPD42 UPD42 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS27 INS27 INS25 INS25 INS60 INS21 INS42 INS42 INS42 INS42 INS32 INS74 INS59 INS42 INS42 INS60 INS60 INS25 INS43 INS43 INS42 INS14 INS43 INS42 INS52 INS42 INS21 INS43 INS43 INS42 INS14 INS43 INS42 INS52 INS42 INS21 INS52 INS42 INS32 INS45 INS32 INS45 INS32 INS43 INS43 INS42 INS32 INS32 INS34 INS41 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS43 INS43 INS52 INS42 INS52 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS32 INS42 INS32 INS22 INS33 INS32 INS34 INS27 INS8 INS27 INS8 INS74 INS59 INS7 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS43 INS43 INS21 INS43 INS43 INS42 INS42 MOV32 INS22 INS42 INS32 INS52 INS42 INS42 INS42 INS27 INS38 INS21 INS27 INS38 INS21 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS36 INS36 INS21 INS43 INS43 INS42 INS42 INS14 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS33 INS32 INS32 INS32 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS27 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS32 INS42 INS42 INS32 INS42 INS9 INS22 INS42 INS32 INS42 INS42 INS32 INS42 INS9 INS74 INS1 INS42 INS42 INS32 INS38 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS22 INS42 INS22 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS43 INS42 INS41 INS21 INS42 INS38 INS7 INS32 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 DEL85 DEL5 DEL42 DEL70 DEL8 DEL42 DEL59 DEL60 DEL45 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54