HDFS-8058. Erasure coding: use BlockInfo[] for both striped and contiguous blocks in INodeFile. Contributed by Zhe Zhang and Yi Liu.

-import org.apache.hadoop.hdfs.server.namenode.FsImageProto.INodeSection.StripedBlocksFeature;
+      boolean isStriped = f.getIsStriped();
+      ECSchema schema = ErasureCodingSchemaManager.getSystemDefaultSchema();
-      BlockInfoContiguous[] blocks = null;
-      if (!f.hasStripedBlocks()) {
-        blocks = new BlockInfoContiguous[bp.size()];
-        for (int i = 0, e = bp.size(); i < e; ++i) {
-          blocks[i] = new BlockInfoContiguous(PBHelper.convert(bp.get(i)), replication);
+      if (isStriped) {
+        Preconditions.checkState(f.hasStripingCellSize());
+      }
+      BlockInfo[] blocks = new BlockInfo[bp.size()];
+      for (int i = 0; i < bp.size(); ++i) {
+        BlockProto b = bp.get(i);
+        if (isStriped) {
+          blocks[i] = new BlockInfoStriped(PBHelper.convert(b), schema,
+              (int)f.getStripingCellSize());
+        } else {
+          blocks[i] = new BlockInfoContiguous(PBHelper.convert(b),
+              replication);
-          (byte)f.getStoragePolicyID());
+          (byte)f.getStoragePolicyID(), isStriped);
-      
+
-      FileWithStripedBlocksFeature stripeFeature = null;
-      if (f.hasStripedBlocks()) {
-        // TODO: HDFS-7859
-        ECSchema schema = ErasureCodingSchemaManager.getSystemDefaultSchema();
-        stripeFeature = file.addStripedBlocksFeature();
-        if (bp.size() > 0) {
-          // if a striped file has block, the cellSize must exist in proto
-          final int cellSize = f.getStripedBlocks().getCellSize();
-          for (BlockProto b : bp) {
-            stripeFeature.addBlock(new BlockInfoStriped(PBHelper.convert(b),
-                schema, cellSize));
-          }
-        }
-      }
-
-        BlockInfo lastBlk = file.getLastBlock();
-        if (lastBlk != null) {
+        if (blocks.length > 0) {
+          BlockInfo lastBlk = file.getLastBlock();
-          if (stripeFeature != null) {
+          if (isStriped) {
-                striped.getSchema(), striped.getCellSize());
+                schema, (int)f.getStripingCellSize());
-          .setStoragePolicyID(file.getLocalStoragePolicyID());
+          .setStoragePolicyID(file.getLocalStoragePolicyID())
+          .setIsStriped(file.isStriped());
+      BlockInfo[] blocks = n.getBlocks();
-      BlockInfoContiguous[] cBlks = n.getContiguousBlocks();
-      if (cBlks != null) {
-        for (Block block : cBlks) {
+      if (blocks != null) {
+        for (Block block : n.getBlocks()) {
-      FileWithStripedBlocksFeature sb = n.getStripedBlocksFeature();
-      if (sb != null) {
-        StripedBlocksFeature.Builder builder =
-            StripedBlocksFeature.newBuilder();
-        BlockInfoStriped[] sblocks = sb.getBlocks();
-        if (sblocks != null && sblocks.length > 0) {
-          final int cellSize = sblocks[0].getCellSize();
-          for (BlockInfoStriped sblk : sblocks) {
-            assert cellSize == sblk.getCellSize();
-            b.addBlocks(PBHelper.convert(sblk));
-          }
-          builder.setCellSize(cellSize);
+      if (n.isStriped()) {
+        if (blocks != null && blocks.length > 0) {
+          BlockInfo firstBlock = blocks[0];
+          Preconditions.checkState(firstBlock.isStriped());
+          b.setStripingCellSize(((BlockInfoStriped)firstBlock).getCellSize());
+        } else {
+          b.setStripingCellSize(HdfsConstants.BLOCK_STRIPED_CELL_SIZE);
-        b.setStripedBlocks(builder.build());

MOV60 MOV60 INS25 INS60 INS24 INS25 INS39 INS59 INS42 INS8 INS5 MOV59 MOV58 MOV27 MOV38 INS8 UPD5 INS32 MOV8 INS42 INS32 INS21 UPD43 MOV43 MOV85 UPD42 INS3 MOV32 MOV60 MOV25 INS32 UPD43 UPD42 UPD42 MOV42 UPD42 MOV42 INS25 INS42 INS42 INS32 UPD42 INS5 MOV32 MOV43 INS42 MOV8 INS42 UPD27 MOV32 INS42 INS32 UPD42 UPD42 INS32 MOV27 MOV8 INS8 INS42 INS42 INS32 INS43 INS85 UPD42 MOV32 INS21 INS40 INS34 MOV60 INS42 INS42 INS42 INS42 MOV21 MOV21 MOV42 UPD42 MOV42 INS42 INS7 INS7 INS42 UPD42 UPD40 INS43 MOV2 INS14 INS2 MOV14 INS42 UPD42 INS2 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 INS40 MOV43 INS32 INS42 INS11 INS42 INS42 MOV43 UPD42 UPD42 MOV42 MOV34 UPD42 UPD42 INS36 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS39 INS32 INS11 MOV42 UPD42 MOV42 INS42 INS11 MOV43 INS42 INS39 INS32 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL42 DEL42 DEL43 DEL33 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL34 DEL27 DEL83 DEL39 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL44 DEL42 DEL70 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL5 DEL3 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL14 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL33 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL42 DEL83 DEL39 DEL2 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL6 DEL8 DEL70 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL25 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25