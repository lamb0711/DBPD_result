Merge trunk into HA branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1210547 13f79535-47bb-0310-9956-ffa450edef68

+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+    
+    // required string declaringClassProtocolName = 3;
+    boolean hasDeclaringClassProtocolName();
+    String getDeclaringClassProtocolName();
+    
+    // required uint64 clientProtocolVersion = 4;
+    boolean hasClientProtocolVersion();
+    long getClientProtocolVersion();
+    // required string declaringClassProtocolName = 3;
+    public static final int DECLARINGCLASSPROTOCOLNAME_FIELD_NUMBER = 3;
+    private java.lang.Object declaringClassProtocolName_;
+    public boolean hasDeclaringClassProtocolName() {
+      return ((bitField0_ & 0x00000004) == 0x00000004);
+    }
+    public String getDeclaringClassProtocolName() {
+      java.lang.Object ref = declaringClassProtocolName_;
+      if (ref instanceof String) {
+        return (String) ref;
+      } else {
+        com.google.protobuf.ByteString bs = 
+            (com.google.protobuf.ByteString) ref;
+        String s = bs.toStringUtf8();
+        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
+          declaringClassProtocolName_ = s;
+        }
+        return s;
+      }
+    }
+    private com.google.protobuf.ByteString getDeclaringClassProtocolNameBytes() {
+      java.lang.Object ref = declaringClassProtocolName_;
+      if (ref instanceof String) {
+        com.google.protobuf.ByteString b = 
+            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
+        declaringClassProtocolName_ = b;
+        return b;
+      } else {
+        return (com.google.protobuf.ByteString) ref;
+      }
+    }
+    
+    // required uint64 clientProtocolVersion = 4;
+    public static final int CLIENTPROTOCOLVERSION_FIELD_NUMBER = 4;
+    private long clientProtocolVersion_;
+    public boolean hasClientProtocolVersion() {
+      return ((bitField0_ & 0x00000008) == 0x00000008);
+    }
+    public long getClientProtocolVersion() {
+      return clientProtocolVersion_;
+    }
+    
+      declaringClassProtocolName_ = "";
+      clientProtocolVersion_ = 0L;
+      if (!hasDeclaringClassProtocolName()) {
+        memoizedIsInitialized = 0;
+        return false;
+      }
+      if (!hasClientProtocolVersion()) {
+        memoizedIsInitialized = 0;
+        return false;
+      }
+      if (((bitField0_ & 0x00000004) == 0x00000004)) {
+        output.writeBytes(3, getDeclaringClassProtocolNameBytes());
+      }
+      if (((bitField0_ & 0x00000008) == 0x00000008)) {
+        output.writeUInt64(4, clientProtocolVersion_);
+      }
+      if (((bitField0_ & 0x00000004) == 0x00000004)) {
+        size += com.google.protobuf.CodedOutputStream
+          .computeBytesSize(3, getDeclaringClassProtocolNameBytes());
+      }
+      if (((bitField0_ & 0x00000008) == 0x00000008)) {
+        size += com.google.protobuf.CodedOutputStream
+          .computeUInt64Size(4, clientProtocolVersion_);
+      }
+      result = result && (hasDeclaringClassProtocolName() == other.hasDeclaringClassProtocolName());
+      if (hasDeclaringClassProtocolName()) {
+        result = result && getDeclaringClassProtocolName()
+            .equals(other.getDeclaringClassProtocolName());
+      }
+      result = result && (hasClientProtocolVersion() == other.hasClientProtocolVersion());
+      if (hasClientProtocolVersion()) {
+        result = result && (getClientProtocolVersion()
+            == other.getClientProtocolVersion());
+      }
+      if (hasDeclaringClassProtocolName()) {
+        hash = (37 * hash) + DECLARINGCLASSPROTOCOLNAME_FIELD_NUMBER;
+        hash = (53 * hash) + getDeclaringClassProtocolName().hashCode();
+      }
+      if (hasClientProtocolVersion()) {
+        hash = (37 * hash) + CLIENTPROTOCOLVERSION_FIELD_NUMBER;
+        hash = (53 * hash) + hashLong(getClientProtocolVersion());
+      }
+        declaringClassProtocolName_ = "";
+        bitField0_ = (bitField0_ & ~0x00000004);
+        clientProtocolVersion_ = 0L;
+        bitField0_ = (bitField0_ & ~0x00000008);
+        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
+          to_bitField0_ |= 0x00000004;
+        }
+        result.declaringClassProtocolName_ = declaringClassProtocolName_;
+        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
+          to_bitField0_ |= 0x00000008;
+        }
+        result.clientProtocolVersion_ = clientProtocolVersion_;
+        if (other.hasDeclaringClassProtocolName()) {
+          setDeclaringClassProtocolName(other.getDeclaringClassProtocolName());
+        }
+        if (other.hasClientProtocolVersion()) {
+          setClientProtocolVersion(other.getClientProtocolVersion());
+        }
+        if (!hasDeclaringClassProtocolName()) {
+          
+          return false;
+        }
+        if (!hasClientProtocolVersion()) {
+          
+          return false;
+        }
+            case 26: {
+              bitField0_ |= 0x00000004;
+              declaringClassProtocolName_ = input.readBytes();
+              break;
+            }
+            case 32: {
+              bitField0_ |= 0x00000008;
+              clientProtocolVersion_ = input.readUInt64();
+              break;
+            }
+      // required string declaringClassProtocolName = 3;
+      private java.lang.Object declaringClassProtocolName_ = "";
+      public boolean hasDeclaringClassProtocolName() {
+        return ((bitField0_ & 0x00000004) == 0x00000004);
+      }
+      public String getDeclaringClassProtocolName() {
+        java.lang.Object ref = declaringClassProtocolName_;
+        if (!(ref instanceof String)) {
+          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
+          declaringClassProtocolName_ = s;
+          return s;
+        } else {
+          return (String) ref;
+        }
+      }
+      public Builder setDeclaringClassProtocolName(String value) {
+        if (value == null) {
+    throw new NullPointerException();
+  }
+  bitField0_ |= 0x00000004;
+        declaringClassProtocolName_ = value;
+        onChanged();
+        return this;
+      }
+      public Builder clearDeclaringClassProtocolName() {
+        bitField0_ = (bitField0_ & ~0x00000004);
+        declaringClassProtocolName_ = getDefaultInstance().getDeclaringClassProtocolName();
+        onChanged();
+        return this;
+      }
+      void setDeclaringClassProtocolName(com.google.protobuf.ByteString value) {
+        bitField0_ |= 0x00000004;
+        declaringClassProtocolName_ = value;
+        onChanged();
+      }
+      
+      // required uint64 clientProtocolVersion = 4;
+      private long clientProtocolVersion_ ;
+      public boolean hasClientProtocolVersion() {
+        return ((bitField0_ & 0x00000008) == 0x00000008);
+      }
+      public long getClientProtocolVersion() {
+        return clientProtocolVersion_;
+      }
+      public Builder setClientProtocolVersion(long value) {
+        bitField0_ |= 0x00000008;
+        clientProtocolVersion_ = value;
+        onChanged();
+        return this;
+      }
+      public Builder clearClientProtocolVersion() {
+        bitField0_ = (bitField0_ & ~0x00000008);
+        clientProtocolVersion_ = 0L;
+        onChanged();
+        return this;
+      }
+      
-      "\n\020hadoop_rpc.proto\"<\n\025HadoopRpcRequestPr" +
+      "\n\020hadoop_rpc.proto\"\177\n\025HadoopRpcRequestPr" +
-      "\"D\n\027HadoopRpcExceptionProto\022\025\n\rexception" +
-      "Name\030\001 \001(\t\022\022\n\nstackTrace\030\002 \001(\t\"\272\001\n\026Hadoo" +
-      "pRpcResponseProto\0226\n\006status\030\001 \002(\0162&.Hado" +
-      "opRpcResponseProto.ResponseStatus\022\020\n\010res" +
-      "ponse\030\002 \001(\014\022+\n\texception\030\003 \001(\0132\030.HadoopR" +
-      "pcExceptionProto\")\n\016ResponseStatus\022\013\n\007SU" +
-      "CCESS\020\001\022\n\n\006ERRROR\020\002B4\n\036org.apache.hadoop" +
-      ".ipc.protobufB\017HadoopRpcProtos\240\001\001"
+      "\022\"\n\032declaringClassProtocolName\030\003 \002(\t\022\035\n\025" +
+      "clientProtocolVersion\030\004 \002(\004\"D\n\027HadoopRpc" +
+      "ExceptionProto\022\025\n\rexceptionName\030\001 \001(\t\022\022\n" +
+      "\nstackTrace\030\002 \001(\t\"\272\001\n\026HadoopRpcResponseP" +
+      "roto\0226\n\006status\030\001 \002(\0162&.HadoopRpcResponse" +
+      "Proto.ResponseStatus\022\020\n\010response\030\002 \001(\014\022+" +
+      "\n\texception\030\003 \001(\0132\030.HadoopRpcExceptionPr" +
+      "oto\")\n\016ResponseStatus\022\013\n\007SUCCESS\020\001\022\n\n\006ER",
+      "RROR\020\002B4\n\036org.apache.hadoop.ipc.protobuf" +
+      "B\017HadoopRpcProtos\240\001\001"
-              new java.lang.String[] { "MethodName", "Request", },
+              new java.lang.String[] { "MethodName", "Request", "DeclaringClassProtocolName", "ClientProtocolVersion", },

INS29 INS65 INS31 INS31 INS31 INS31 INS23 INS23 INS31 INS31 INS31 INS23 INS23 INS31 INS31 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS39 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS83 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS23 INS31 INS31 INS31 INS31 INS31 INS23 INS31 INS31 INS31 INS31 INS42 INS42 INS34 INS40 INS42 INS41 INS42 INS60 INS25 INS40 INS60 INS25 INS42 INS34 INS42 INS41 INS41 INS21 INS21 INS25 INS25 INS25 INS25 INS25 INS25 INS21 INS25 INS21 INS25 INS25 INS25 INS83 INS43 INS59 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS39 INS42 INS44 INS8 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 MOV5 INS36 INS43 INS59 INS62 INS8 INS8 INS43 INS59 INS62 INS8 INS8 INS36 INS42 INS7 INS7 INS38 INS8 INS38 INS8 INS36 INS8 INS36 INS8 INS36 INS8 INS36 INS8 INS7 INS32 INS8 INS7 INS32 INS8 INS32 INS8 INS32 INS8 INS21 INS21 INS21 INS21 INS25 INS21 INS25 INS21 INS25 INS25 INS25 INS25 INS40 INS42 INS45 INS41 INS42 INS60 INS25 INS42 INS43 INS42 INS25 INS21 INS21 INS21 INS41 INS42 INS21 INS21 INS21 INS41 INS43 INS42 INS21 INS21 INS21 INS42 INS41 INS41 INS42 INS39 INS42 INS21 INS21 INS21 INS41 INS42 INS21 INS21 INS21 INS41 INS27 INS40 INS42 INS42 INS42 INS43 INS41 INS60 INS60 INS25 INS41 INS40 INS42 INS42 INS42 INS43 INS60 INS21 INS41 INS41 INS27 INS42 INS45 INS42 INS34 INS32 INS21 INS41 INS32 INS21 INS41 INS27 INS21 INS27 INS21 INS27 INS21 INS27 INS21 INS42 INS27 INS42 INS21 INS42 INS27 INS42 INS21 INS42 INS21 INS21 INS42 INS21 INS21 INS7 INS7 INS7 INS7 INS36 INS8 INS7 INS36 INS8 INS7 INS32 INS8 INS32 INS8 INS38 INS8 INS38 INS8 INS36 INS43 INS59 INS38 INS8 INS8 INS42 INS27 INS8 INS7 INS7 INS32 INS52 INS7 INS7 INS32 INS52 INS40 INS7 INS7 INS32 INS36 INS42 INS7 INS7 INS32 INS52 INS7 INS7 INS32 INS52 INS27 INS27 INS36 INS34 INS42 INS11 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS43 INS59 INS7 INS42 INS11 INS36 INS34 INS42 INS7 INS9 INS42 INS7 INS9 INS36 INS34 INS32 INS36 INS34 INS32 INS36 INS34 INS7 INS36 INS34 INS7 INS42 INS36 INS7 INS42 INS36 INS7 INS7 INS7 INS7 INS7 INS42 INS45 INS42 INS36 INS42 INS34 INS42 INS36 INS27 INS21 INS40 INS42 INS27 INS21 INS40 INS42 INS42 INS42 INS21 INS42 INS42 INS21 INS32 INS41 INS32 INS41 INS27 INS40 INS42 INS42 INS36 INS60 INS21 INS41 INS41 INS42 INS33 INS53 INS42 INS34 INS42 INS42 INS42 INS42 INS36 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS42 INS42 INS36 INS42 INS34 INS42 UPD45 MOV45 MOV45 INS45 INS45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 INS27 INS43 INS42 INS40 INS42 INS11 INS42 INS42 INS32 INS40 INS42 INS42 INS21 INS40 INS42 INS32 INS42 INS42 INS43 INS42 INS27 INS42 INS34 INS42 INS34 INS27 INS42 INS42 INS34 INS32 INS27 INS42 INS42 INS34 INS42 INS27 INS42 INS32 INS27 INS42 INS32 INS27 INS42 INS27 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS27 INS27 INS36 INS34 INS7 INS36 INS34 INS7 INS32 INS32 INS42 INS9 INS42 INS9 INS49 INS8 INS49 INS8 INS36 INS34 INS62 INS43 INS59 INS7 INS42 INS11 INS14 INS27 INS32 INS42 INS36 INS34 INS27 INS42 INS34 INS42 INS43 INS42 INS42 INS42 INS7 INS40 INS42 INS11 INS40 INS42 INS34 INS42 INS34 INS42 INS42 INS34 INS42 INS34 INS40 INS42 INS34 INS32 INS42 INS34 INS40 INS42 INS34 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS36 INS36 INS42 INS36 INS32 INS36 INS42 INS36 INS32 INS42 INS38 INS42 INS38 INS27 INS42 INS34 INS27 INS42 INS34 INS42 INS32 INS42 INS32 INS34 INS21 INS21 INS10 INS34 INS21 INS21 INS10 INS27 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS43 INS42 INS38 INS42 INS27 INS42 INS38 INS40 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS27 INS27 INS32 INS42 INS27 INS27 INS42 INS32 INS34 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS42 INS34 INS42 INS36 INS42 INS42 INS42 INS34 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS32 INS32 INS34 INS42 INS34 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS34 INS42 INS32 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS40 MOV5 INS45 INS45 DEL27