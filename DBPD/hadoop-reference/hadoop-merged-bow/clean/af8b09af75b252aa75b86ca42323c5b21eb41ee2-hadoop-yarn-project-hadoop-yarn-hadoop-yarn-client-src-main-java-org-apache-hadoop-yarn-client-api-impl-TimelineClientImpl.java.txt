YARN-1936. Added security support for the Timeline Client. Contributed by Zhijie Shen.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597153 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.GnuParser;
+import org.apache.commons.cli.HelpFormatter;
+import org.apache.commons.cli.Options;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.authentication.client.AuthenticatedURL;
+import org.apache.hadoop.security.authentication.client.AuthenticationException;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.yarn.exceptions.YarnRuntimeException;
+import org.apache.hadoop.yarn.security.client.TimelineDelegationTokenIdentifier;
+import org.apache.hadoop.yarn.security.client.TimelineDelegationTokenSelector;
+import org.apache.hadoop.yarn.util.timeline.TimelineUtils;
+import org.codehaus.jackson.map.ObjectMapper;
+import com.sun.jersey.client.urlconnection.HttpURLConnectionFactory;
+import com.sun.jersey.client.urlconnection.URLConnectionClientHandler;
+  private static Options opts;
+  static {
+    opts = new Options();
+    opts.addOption("put", true, "Put the TimelineEntities in a JSON file");
+    opts.getOption("put").setArgName("Path to the JSON file");
+    opts.addOption("help", false, "Print usage");
+  }
+  private TimelineAuthenticatedURLConnectionFactory urlFactory;
-    client = Client.create(cc);
+    if (UserGroupInformation.isSecurityEnabled()) {
+      urlFactory = new TimelineAuthenticatedURLConnectionFactory();
+      client = new Client(new URLConnectionClientHandler(urlFactory), cc);
+    } else {
+      client = Client.create(cc);
+    }
+      if (UserGroupInformation.isSecurityEnabled()) {
+        urlFactory.setService(TimelineUtils.buildTimelineTokenService(conf));
+      }
+  @Override
+  public Token<TimelineDelegationTokenIdentifier> getDelegationToken(
+      String renewer) throws IOException, YarnException {
+    return TimelineAuthenticator.getDelegationToken(resURI.toURL(),
+        urlFactory.token, renewer);
+  }
+
+  private static class TimelineAuthenticatedURLConnectionFactory
+      implements HttpURLConnectionFactory {
+
+    private AuthenticatedURL.Token token;
+    private TimelineAuthenticator authenticator;
+    private Token<TimelineDelegationTokenIdentifier> dToken;
+    private Text service;
+
+    public TimelineAuthenticatedURLConnectionFactory() {
+      token = new AuthenticatedURL.Token();
+      authenticator = new TimelineAuthenticator();
+    }
+
+    @Override
+    public HttpURLConnection getHttpURLConnection(URL url) throws IOException {
+      try {
+        if (dToken == null) {
+          //TODO: need to take care of the renew case
+          dToken = selectToken();
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Timeline delegation token: " + dToken.toString());
+          }
+        }
+        if (dToken != null) {
+          Map<String, String> params = new HashMap<String, String>();
+          TimelineAuthenticator.injectDelegationToken(params, dToken);
+          url = TimelineAuthenticator.appendParams(url, params);
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("URL with delegation token: " + url);
+          }
+        }
+        return new AuthenticatedURL(authenticator).openConnection(url, token);
+      } catch (AuthenticationException e) {
+        LOG.error("Authentication failed when openning connection [" + url
+            + "] with token [" + token + "].", e);
+        throw new IOException(e);
+      }
+    }
+
+    private Token<TimelineDelegationTokenIdentifier> selectToken() {
+      UserGroupInformation ugi;
+      try {
+        ugi = UserGroupInformation.getCurrentUser();
+      } catch (IOException e) {
+        String msg = "Error when getting the current user";
+        LOG.error(msg, e);
+        throw new YarnRuntimeException(msg, e);
+      }
+      TimelineDelegationTokenSelector tokenSelector =
+          new TimelineDelegationTokenSelector();
+      return tokenSelector.selectToken(
+          service, ugi.getCredentials().getAllTokens());
+    }
+
+    public void setService(Text service) {
+      this.service = service;
+    }
+
+  }
+
+  public static void main(String[] argv) throws Exception {
+    CommandLine cliParser = new GnuParser().parse(opts, argv);
+    if (cliParser.hasOption("put")) {
+      String path = cliParser.getOptionValue("put");
+      if (path != null && path.length() > 0) {
+        putTimelineEntitiesInJSONFile(path);
+        return;
+      }
+    }
+    printUsage();
+  }
+
+  /**
+   * Put timeline data in a JSON file via command line.
+   * 
+   * @param path
+   *          path to the {@link TimelineEntities} JSON file
+   */
+  private static void putTimelineEntitiesInJSONFile(String path) {
+    File jsonFile = new File(path);
+    if (!jsonFile.exists()) {
+      System.out.println("Error: File [" + jsonFile.getAbsolutePath()
+          + "] doesn't exist");
+      return;
+    }
+    ObjectMapper mapper = new ObjectMapper();
+    YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);
+    TimelineEntities entities = null;
+    try {
+      entities = mapper.readValue(jsonFile, TimelineEntities.class);
+    } catch (Exception e) {
+      System.err.println("Error: " + e.getMessage());
+      e.printStackTrace(System.err);
+      return;
+    }
+    Configuration conf = new YarnConfiguration();
+    TimelineClient client = TimelineClient.createTimelineClient();
+    client.init(conf);
+    client.start();
+    try {
+      if (UserGroupInformation.isSecurityEnabled()
+          && conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {
+        Token<TimelineDelegationTokenIdentifier> token =
+            client.getDelegationToken(
+                UserGroupInformation.getCurrentUser().getUserName());
+        UserGroupInformation.getCurrentUser().addToken(token);
+      }
+      TimelinePutResponse response = client.putEntities(
+          entities.getEntities().toArray(
+              new TimelineEntity[entities.getEntities().size()]));
+      if (response.getErrors().size() == 0) {
+        System.out.println("Timeline data is successfully put");
+      } else {
+        for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {
+          System.out.println("TimelineEntity [" + error.getEntityType() + ":" +
+              error.getEntityId() + "] is not successfully put. Error code: " +
+              error.getErrorCode());
+        }
+      }
+    } catch (Exception e) {
+      System.err.println("Error: " + e.getMessage());
+      e.printStackTrace(System.err);
+    } finally {
+      client.stop();
+    }
+  }
+
+  /**
+   * Helper function to print out usage
+   */
+  private static void printUsage() {
+    new HelpFormatter().printHelp("TimelineClient", opts);
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS28 INS23 INS31 INS55 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS8 INS83 INS43 INS59 INS78 INS83 INS74 INS42 INS44 INS43 INS43 INS8 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS8 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS25 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS41 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS43 INS59 INS83 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS5 INS42 INS42 INS60 INS25 INS21 INS65 INS65 INS43 INS42 INS60 INS25 INS60 INS21 INS60 INS54 INS60 INS60 INS21 INS21 INS54 INS65 INS21 INS7 INS32 INS32 INS32 INS32 INS8 INS8 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS43 INS42 INS42 INS54 INS43 INS43 INS60 INS54 INS60 INS41 INS43 INS42 INS21 INS43 INS85 INS43 INS59 INS32 INS8 INS32 INS66 INS42 INS66 INS65 INS66 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS32 INS32 INS8 INS12 INS8 INS66 INS32 INS42 INS14 INS42 INS42 INS45 INS9 INS45 INS32 INS42 INS45 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS21 INS21 MOV21 INS25 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS7 INS7 INS42 INS8 INS12 INS42 INS42 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS42 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS60 INS25 INS42 INS42 INS42 INS42 INS14 INS32 INS21 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS25 INS60 INS25 INS44 INS8 INS21 INS14 INS42 INS45 INS42 INS43 INS42 INS42 INS45 INS7 INS7 INS32 INS8 INS42 INS42 INS42 INS14 INS42 INS14 INS25 INS25 INS41 INS44 INS8 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS22 INS42 INS14 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS42 INS42 INS42 INS32 INS43 INS7 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS21 INS21 INS32 INS43 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS21 INS43 INS43 INS27 INS8 INS27 INS8 INS32 INS43 INS42 INS21 INS53 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS32 INS42 INS52 INS42 INS43 INS42 INS42 INS32 INS27 INS27 INS21 INS41 INS42 INS40 INS42 INS27 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS60 INS21 INS42 INS42 INS32 INS32 INS34 INS21 INS70 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS14 INS42 INS32 INS40 INS42 INS42 INS33 INS21 INS25 INS42 INS33 INS60 INS21 INS21 INS25 INS14 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS33 INS32 INS34 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS57 INS40 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS9 INS74 INS59 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS44 INS32 INS8 INS40 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS7 INS32 INS8 INS74 INS59 INS32 INS7 INS32 INS8 INS43 INS42 INS42 INS42 INS27 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS32 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS3 INS42 INS42 INS40 INS42 INS45 INS43 INS42 INS42 INS42 INS21 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS5 INS32 INS40 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS43 INS85 INS32 INS42 INS40 INS42 INS27 INS42 INS42 INS27 INS43 INS43 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42