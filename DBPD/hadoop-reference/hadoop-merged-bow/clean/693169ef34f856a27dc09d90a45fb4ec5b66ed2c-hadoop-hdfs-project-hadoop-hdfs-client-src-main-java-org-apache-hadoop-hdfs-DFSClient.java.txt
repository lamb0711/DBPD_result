HDFS-12882. Support full open(PathHandle) contract in HDFS

+import org.apache.hadoop.hdfs.protocol.HdfsLocatedFileStatus;
+import org.apache.hadoop.hdfs.protocol.HdfsPathHandle;
-      if (locatedBlocks != null) {
-        ErasureCodingPolicy ecPolicy = locatedBlocks.getErasureCodingPolicy();
-        if (ecPolicy != null) {
-          return new DFSStripedInputStream(this, src, verifyChecksum, ecPolicy,
-              locatedBlocks);
-        }
-        return new DFSInputStream(this, src, verifyChecksum, locatedBlocks);
-      } else {
-        throw new IOException("Cannot open filename " + src);
+      return openInternal(locatedBlocks, src, verifyChecksum);
+    }
+  }
+
+  /**
+   * Create an input stream from the {@link HdfsPathHandle} if the
+   * constraints encoded from {@link
+   * DistributedFileSystem#createPathHandle(FileStatus, Options.HandleOpt...)}
+   * are satisfied. Note that HDFS does not ensure that these constraints
+   * remain invariant for the life of the stream. It only checks that they
+   * still held when the stream was opened.
+   * @param fd Handle to an entity in HDFS, with constraints
+   * @param buffersize ignored
+   * @param verifyChecksum Verify checksums before returning data to client
+   * @return Data from the referent of the {@link HdfsPathHandle}.
+   * @throws IOException On I/O error
+   */
+  public DFSInputStream open(HdfsPathHandle fd, int buffersize,
+      boolean verifyChecksum) throws IOException {
+    checkOpen();
+    String src = fd.getPath();
+    try (TraceScope ignored = newPathTraceScope("newDFSInputStream", src)) {
+      HdfsLocatedFileStatus s = getLocatedFileInfo(src, true);
+      fd.verify(s); // check invariants in path handle
+      LocatedBlocks locatedBlocks = s.getLocatedBlocks();
+      return openInternal(locatedBlocks, src, verifyChecksum);
+    }
+  }
+
+  private DFSInputStream openInternal(LocatedBlocks locatedBlocks, String src,
+      boolean verifyChecksum) throws IOException {
+    if (locatedBlocks != null) {
+      ErasureCodingPolicy ecPolicy = locatedBlocks.getErasureCodingPolicy();
+      if (ecPolicy != null) {
+        return new DFSStripedInputStream(this, src, verifyChecksum, ecPolicy,
+            locatedBlocks);
+      return new DFSInputStream(this, src, verifyChecksum, locatedBlocks);
+    } else {
+      throw new IOException("Cannot open filename " + src);
+   * Get the file info for a specific file or directory.
+   * @param src The string representation of the path to the file
+   * @param needBlockToken Include block tokens in {@link LocatedBlocks}.
+   *        When block tokens are included, this call is a superset of
+   *        {@link #getBlockLocations(String, long)}.
+   * @return object containing information regarding the file
+   *         or null if file not found
+   *
+   * @see DFSClient#open(HdfsPathHandle, int, boolean)
+   * @see ClientProtocol#getFileInfo(String) for description of
+   *      exceptions
+   */
+  public HdfsLocatedFileStatus getLocatedFileInfo(String src,
+      boolean needBlockToken) throws IOException {
+    checkOpen();
+    try (TraceScope ignored = newPathTraceScope("getLocatedFileInfo", src)) {
+      return namenode.getLocatedFileInfo(src, needBlockToken);
+    } catch (RemoteException re) {
+      throw re.unwrapRemoteException(AccessControlException.class,
+          FileNotFoundException.class,
+          UnresolvedPathException.class);
+    }
+  }
+  /**

INS26 INS26 INS40 INS40 INS31 INS31 INS31 MOV29 INS83 INS43 INS42 INS44 MOV44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 UPD83 UPD42 INS44 MOV8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS39 INS42 INS42 MOV21 INS54 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS60 INS54 INS43 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS54 INS42 MOV58 INS8 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS32 INS43 INS59 INS58 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS68 INS68 INS66 INS66 INS42 INS32 INS58 INS8 INS12 MOV60 INS41 INS42 INS68 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS60 INS21 INS60 INS41 INS42 INS68 INS42 INS42 INS69 INS69 INS69 INS42 INS42 INS69 INS42 INS43 INS59 INS41 INS44 INS8 INS32 INS42 INS42 INS69 INS69 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS69 INS69 INS43 INS39 INS39 INS43 INS42 INS42 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS39 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS57 INS57 INS57 INS43 INS43 INS43 INS42 INS42 INS42 DEL54 DEL8