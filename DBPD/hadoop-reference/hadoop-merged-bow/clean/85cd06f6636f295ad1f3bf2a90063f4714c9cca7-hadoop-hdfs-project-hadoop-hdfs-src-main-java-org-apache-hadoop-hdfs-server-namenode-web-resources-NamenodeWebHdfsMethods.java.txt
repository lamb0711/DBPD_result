HDFS-10789. Route webhdfs through the RPC call queue. Contributed by Daryn Sharp and Rushabh S Shah.

+import java.net.UnknownHostException;
+import java.security.Principal;
+import java.util.concurrent.ExecutionException;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.ipc.ExternalCall;
-import org.apache.hadoop.ipc.Server;
-  
-  private static final ThreadLocal<String> REMOTE_ADDRESS = new ThreadLocal<String>(); 
-  /** @return the remote client address. */
-  public static String getRemoteAddress() {
-    return REMOTE_ADDRESS.get();
-  }
-
-  public static InetAddress getRemoteIp() {
-    try {
-      return InetAddress.getByName(getRemoteAddress());
-    } catch (Exception e) {
-      return null;
-    }
-  }
-
-  /**
-   * Returns true if a WebHdfs request is in progress.  Akin to
-   * {@link Server#isRpcInvocation()}.
-   */
-  public static boolean isWebHdfsInvocation() {
-    return getRemoteAddress() != null;
-  }
+  private volatile Boolean useIpcCallq;
+  private String scheme;
+  private Principal userPrincipal;
+  private String remoteAddr;
-  private @Context HttpServletRequest request;
+  public NamenodeWebHdfsMethods(@Context HttpServletRequest request) {
+    // the request object is a proxy to thread-locals so we have to extract
+    // what we want from it since the external call will be processed in a
+    // different thread.
+    scheme = request.getScheme();
+    userPrincipal = request.getUserPrincipal();
+    // get the remote address, if coming in via a trusted proxy server then
+    // the address with be that of the proxied client
+    remoteAddr = JspHelper.getRemoteAddr(request);
+  }
+
+    if (useIpcCallq == null) {
+      Configuration conf =
+          (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);
+      useIpcCallq = conf.getBoolean(
+          DFSConfigKeys.DFS_WEBHDFS_USE_IPC_CALLQ,
+          DFSConfigKeys.DFS_WEBHDFS_USE_IPC_CALLQ_DEFAULT);
+    }
+
-    
-    // set the remote address, if coming in via a trust proxy server then
-    // the address with be that of the proxied client
-    REMOTE_ADDRESS.set(JspHelper.getRemoteAddr(request));
-  private void reset() {
-    REMOTE_ADDRESS.set(null);
-  }
-  
-  
+
+  private <T> T doAs(final UserGroupInformation ugi,
+      final PrivilegedExceptionAction<T> action)
+          throws IOException, InterruptedException {
+    return useIpcCallq ? doAsExternalCall(ugi, action) : ugi.doAs(action);
+  }
+
+  private <T> T doAsExternalCall(final UserGroupInformation ugi,
+      final PrivilegedExceptionAction<T> action)
+          throws IOException, InterruptedException {
+    // set the remote address, if coming in via a trust proxy server then
+    // the address with be that of the proxied client
+    ExternalCall<T> call = new ExternalCall<T>(action){
+      @Override
+      public UserGroupInformation getRemoteUser() {
+        return ugi;
+      }
+      @Override
+      public String getProtocol() {
+        return "webhdfs";
+      }
+      @Override
+      public String getHostAddress() {
+        return remoteAddr;
+      }
+      @Override
+      public InetAddress getHostInetAddress() {
+        try {
+          return InetAddress.getByName(getHostAddress());
+        } catch (UnknownHostException e) {
+          return null;
+        }
+      }
+    };
+    final NameNode namenode = (NameNode)context.getAttribute("name.node");
+    namenode.queueExternalCall(call);
+    T result = null;
+    try {
+      result = call.get();
+    } catch (ExecutionException ee) {
+      Throwable t = ee.getCause();
+      if (t instanceof RuntimeException) {
+        throw (RuntimeException)t;
+      } else if (t instanceof IOException) {
+        throw (IOException)t;
+      } else {
+        throw new IOException(t);
+      }
+    }
+    return result;
+  }
+
-      final long blocksize, final String excludeDatanodes) throws IOException {
+      final long blocksize, final String excludeDatanodes,
+      final String remoteAddr) throws IOException {
-          ).getDatanodeByHost(getRemoteAddress());
+          ).getDatanodeByHost(remoteAddr);
-    Text kind = request.getScheme().equals("http") ? WebHdfsConstants.WEBHDFS_TOKEN_KIND
+    Text kind = scheme.equals("http")
+        ? WebHdfsConstants.WEBHDFS_TOKEN_KIND
-        excludeDatanodes);
+        excludeDatanodes, remoteAddr);
-          namenode, ugi, request.getUserPrincipal().getName());
+          namenode, ugi, userPrincipal.getName());
-    final String scheme = request.getScheme();
-    return ugi.doAs(new PrivilegedExceptionAction<Response>() {
+    return doAs(ugi, new PrivilegedExceptionAction<Response>() {
-        try {
-        } finally {
-          reset();
-        }
-    return ugi.doAs(new PrivilegedExceptionAction<Response>() {
+    return doAs(ugi, new PrivilegedExceptionAction<Response>() {
-        try {
-        } finally {
-          reset();
-        }
-    return ugi.doAs(new PrivilegedExceptionAction<Response>() {
+    return doAs(ugi, new PrivilegedExceptionAction<Response>() {
-        try {
-        } finally {
-          reset();
-        }
-    return ugi.doAs(new PrivilegedExceptionAction<Response>() {
+    return doAs(ugi, new PrivilegedExceptionAction<Response>() {
-        try {
-        } finally {
-          reset();
-        }

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 MOV83 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 INS42 INS44 INS8 INS83 INS73 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS73 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS44 MOV8 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 MOV78 MOV43 INS42 INS21 INS21 MOV21 INS25 INS42 INS42 INS83 INS43 INS42 INS83 INS74 INS42 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS74 INS42 INS42 INS42 INS60 INS60 INS21 INS60 INS54 INS41 INS83 MOV43 INS42 MOV21 INS41 MOV21 INS41 INS7 INS7 INS7 INS27 INS8 INS42 INS43 INS43 INS16 INS42 INS43 INS43 INS74 INS59 INS83 INS43 INS59 INS32 INS43 INS59 INS8 INS12 INS42 INS32 INS32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 INS33 INS60 INS21 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 UPD43 MOV43 UPD42 MOV42 INS14 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS33 MOV21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD74 MOV74 INS42 INS1 INS43 INS32 INS7 INS43 INS42 INS60 INS25 INS42 MOV74 INS1 MOV74 INS1 INS42 INS42 INS11 INS42 INS32 INS43 UPD43 INS31 INS31 INS31 INS31 INS42 INS42 UPD42 MOV42 INS45 INS42 INS32 INS42 INS43 INS59 INS62 INS8 INS25 UPD42 MOV42 INS31 INS31 INS43 INS32 INS42 INS42 INS40 INS40 INS42 UPD42 INS78 MOV83 INS43 UPD42 MOV42 MOV8 INS78 MOV83 MOV43 INS42 INS8 INS78 UPD83 MOV83 INS43 INS42 INS8 INS78 INS83 MOV43 INS42 MOV8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS43 INS53 INS62 INS8 INS8 UPD42 MOV42 MOV78 INS83 MOV43 INS42 MOV43 MOV43 MOV8 MOV8 MOV78 INS83 MOV43 INS42 MOV43 MOV43 MOV8 MOV8 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS11 INS42 INS43 INS53 INS53 INS42 INS45 INS42 INS43 INS42 INS42 INS11 INS14 INS42 INS42 INS43 INS42 INS43 INS42 UPD43 INS42 INS42 UPD42 UPD42 DEL83 DEL83 DEL74 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL31 DEL42 DEL31 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL42 DEL32 DEL33 DEL32 DEL32 DEL42 DEL32 DEL83 DEL42 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL83 DEL42 DEL31 DEL1 DEL14 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL83 DEL42 DEL31 DEL1 DEL14 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8