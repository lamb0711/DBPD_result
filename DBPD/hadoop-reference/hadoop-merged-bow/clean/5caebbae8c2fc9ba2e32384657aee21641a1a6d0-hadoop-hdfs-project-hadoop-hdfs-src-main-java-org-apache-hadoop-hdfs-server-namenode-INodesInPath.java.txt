HDFS-7484. Make FSDirectory#addINode take existing INodes as its parameter. Contributed by Jing Zhao.

+import com.google.common.collect.ImmutableList;
+  /**
+   * @param offset start endpoint (inclusive)
+   * @param length number of path components
+   * @return sub-list of the path
+   */
+  public List<String> getPath(int offset, int length) {
+    Preconditions.checkArgument(offset >= 0 && length >= 0 && offset + length
+        <= path.length);
+    ImmutableList.Builder<String> components = ImmutableList.builder();
+    for (int i = offset; i < offset + length; i++) {
+      components.add(DFSUtil.bytes2String(path[i]));
+    }
+    return components.build();
+  }
+
-   * @return the INodesInPath instance containing ancestral INodes
+   * @return the INodesInPath instance containing ancestral INodes. Note that
+   * this method only handles non-snapshot paths.
+    Preconditions.checkState(!isSnapshot());
-    final byte[][] apath;
-    final boolean isSnapshot;
-    final int snapshotId;
-    int dotSnapshotIndex = getDotSnapshotIndex();
-    if (this.isSnapshot && length >= dotSnapshotIndex + 1) {
-      apath = new byte[length + 1][];
-      isSnapshot = true;
-      snapshotId = this.snapshotId;
-    } else {
-      apath = new byte[length][];
-      isSnapshot = false;
-      snapshotId = this.isSnapshot ? CURRENT_STATE_ID : this.snapshotId;
-    }
+    final byte[][] apath = new byte[length][];
-    System.arraycopy(this.path, 0, apath, 0, apath.length);
-    return new INodesInPath(anodes, apath, isSnapshot, snapshotId);
+    System.arraycopy(this.path, 0, apath, 0, length);
+    return new INodesInPath(anodes, apath, false, snapshotId);
-  private int getDotSnapshotIndex() {
-    if (isSnapshot) {
-      for (int i = 0; i < path.length; i++) {
-        if (isDotSnapshotDir(path[i])) {
-          return i;
-        }
+  /**
+   * @return a new INodesInPath instance that only contains exisitng INodes.
+   * Note that this method only handles non-snapshot paths.
+   */
+  public INodesInPath getExistingINodes() {
+    Preconditions.checkState(!isSnapshot());
+    int i = 0;
+    for (; i < inodes.length; i++) {
+      if (inodes[i] == null) {
+        break;
-      throw new IllegalStateException("The path " + getPath()
-          + " is a snapshot path but does not contain "
-          + HdfsConstants.DOT_SNAPSHOT_DIR);
-    } else {
-      return -1;
+    INode[] existing = new INode[i];
+    byte[][] existingPath = new byte[i][];
+    System.arraycopy(inodes, 0, existing, 0, i);
+    System.arraycopy(path, 0, existingPath, 0, i);
+    return new INodesInPath(existing, existingPath, false, snapshotId);

INS26 INS40 INS31 INS31 INS29 UPD83 MOV83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS43 UPD42 MOV42 MOV8 INS65 INS65 INS65 INS43 INS43 INS39 INS42 INS39 INS42 INS21 INS60 INS24 INS41 INS21 INS65 INS42 INS21 INS60 INS24 INS60 INS60 INS21 INS21 MOV41 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS74 INS59 INS58 INS27 MOV37 MOV8 INS32 UPD66 INS66 INS32 MOV5 INS66 INS66 INS32 INS39 MOV59 MOV27 INS37 INS8 INS5 INS59 MOV5 INS59 INS32 INS32 INS14 INS42 INS42 INS27 INS43 INS43 INS42 INS32 INS39 INS59 INS42 INS27 INS21 INS42 INS42 INS42 INS42 INS38 UPD42 MOV3 INS42 INS9 INS42 INS42 INS38 UPD40 INS42 INS25 INS43 INS85 INS42 INS3 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 UPD42 MOV42 INS34 INS42 INS34 INS42 INS43 INS42 INS42 INS9 INS42 INS27 INS27 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS27 INS8 UPD42 MOV42 INS5 INS42 INS5 INS42 INS42 INS27 INS27 INS27 INS40 INS42 INS42 MOV32 INS42 INS42 INS2 INS33 INS10 INS43 INS85 INS39 INS85 INS85 INS42 INS34 INS42 INS34 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 DEL42 DEL41 DEL8 DEL25 DEL83 DEL42 DEL59 DEL60 DEL83 DEL39 DEL42 DEL59 DEL60 DEL39 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL42 DEL34 DEL27 DEL27 DEL27 DEL42 DEL42 DEL34 DEL27 DEL3 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL42 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL16 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL34 DEL38 DEL42 DEL39 DEL58 DEL24 DEL43 DEL45 DEL32 DEL45 DEL40 DEL27 DEL14 DEL53 DEL8 DEL8 DEL25 DEL39 DEL31