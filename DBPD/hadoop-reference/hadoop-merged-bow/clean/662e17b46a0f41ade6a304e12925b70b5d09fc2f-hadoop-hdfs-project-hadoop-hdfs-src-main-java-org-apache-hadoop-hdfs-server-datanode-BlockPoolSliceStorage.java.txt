HDFS-9654. Code refactoring for HDFS-8578.

-import com.google.common.annotations.VisibleForTesting;
-import com.google.common.base.Preconditions;
-import com.google.common.collect.Lists;
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Properties;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.hadoop.conf.Configuration;
-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Properties;
-import java.util.Set;
-import java.util.Collections;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
-   * @param datanode datanode instance
-  private StorageDirectory loadStorageDirectory(DataNode datanode,
-      NamespaceInfo nsInfo, File dataDir, StartupOption startOpt) throws IOException {
+  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,
+      File dataDir, StartupOption startOpt, Configuration conf)
+          throws IOException {
-            + " is not formatted for " + nsInfo.getBlockPoolID());
-        LOG.info("Formatting ...");
+            + " is not formatted for " + nsInfo.getBlockPoolID()
+            + ". Formatting ...");
-      doTransition(datanode, sd, nsInfo, startOpt);
+      if (doTransition(sd, nsInfo, startOpt, conf)) {
+        return sd;
+      }
+
-        throw new IOException(
-            "Data-node and name-node CTimes must be the same.");
+        throw new IOException("Datanode CTime (=" + getCTime()
+            + ") is not equal to namenode CTime (=" + nsInfo.getCTime() + ")");
-   * @param datanode Datanode to which this storage belongs to
-  List<StorageDirectory> loadBpStorageDirectories(
-      DataNode datanode, NamespaceInfo nsInfo,
-      Collection<File> dataDirs, StartupOption startOpt) throws IOException {
+  List<StorageDirectory> loadBpStorageDirectories(NamespaceInfo nsInfo,
+      Collection<File> dataDirs, StartupOption startOpt,
+      Configuration conf) throws IOException {
-        StorageDirectory sd =
-            loadStorageDirectory(datanode, nsInfo, dataDir, startOpt);
+        final StorageDirectory sd = loadStorageDirectory(
+            nsInfo, dataDir, startOpt, conf);
-   * @param datanode Datanode to which this storage belongs to
-  void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,
-      Collection<File> dataDirs, StartupOption startOpt) throws IOException {
+  List<StorageDirectory> recoverTransitionRead(NamespaceInfo nsInfo,
+      Collection<File> dataDirs, StartupOption startOpt, Configuration conf)
+          throws IOException {
-    for (StorageDirectory sd : loadBpStorageDirectories(
-        datanode, nsInfo, dataDirs, startOpt)) {
+    final List<StorageDirectory> loaded = loadBpStorageDirectories(
+        nsInfo, dataDirs, startOpt, conf);
+    for (StorageDirectory sd : loaded) {
+    return loaded;
-   * @throws IOException
+   * @return true if the new properties has been written.
-  private void doTransition(DataNode datanode, StorageDirectory sd,
-      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {
+  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,
+      StartupOption startOpt, Configuration conf) throws IOException {
-      return; // regular startup
+      return false; // regular startup
-      doUpgrade(datanode, sd, nsInfo); // upgrade
-      return;
+      doUpgrade(sd, nsInfo, conf); // upgrade
+      return true;
-  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)
-      throws IOException {
+  private void doUpgrade(final StorageDirectory bpSd,
+      final NamespaceInfo nsInfo, final Configuration conf) throws IOException {
+    final int oldLV = getLayoutVersion();
-        + ".\n   old LV = " + this.getLayoutVersion() + "; old CTime = "
-        + this.getCTime() + ".\n   new LV = " + HdfsServerConstants.DATANODE_LAYOUT_VERSION
+        + ".\n   old LV = " + oldLV
+        + "; old CTime = " + this.getCTime()
+        + ".\n   new LV = " + HdfsServerConstants.DATANODE_LAYOUT_VERSION
-    File bpCurDir = bpSd.getCurrentDir();
-    File bpPrevDir = bpSd.getPreviousDir();
+    final File bpCurDir = bpSd.getCurrentDir();
+    final File bpPrevDir = bpSd.getPreviousDir();
-    File bpTmpDir = bpSd.getPreviousTmp();
+    final File bpTmpDir = bpSd.getPreviousTmp();
+    final String name = "block pool " + blockpoolID + " at " + bpSd.getRoot();
+    doUgrade(name, bpSd, nsInfo, bpPrevDir, bpTmpDir, bpCurDir, oldLV, conf);
+  }
+
+  private void doUgrade(String name, final StorageDirectory bpSd,
+      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,
+      final File bpCurDir, final int oldLV, Configuration conf)
+          throws IOException {
-    linkAllBlocks(datanode, bpTmpDir, bpCurDir);
+    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);
-    LOG.info("Upgrade of block pool " + blockpoolID + " at " + bpSd.getRoot()
-        + " is complete");
+    LOG.info("Upgrade of " + name + " is complete");
-  private void linkAllBlocks(DataNode datanode, File fromDir, File toDir)
-      throws IOException {
+  private static void linkAllBlocks(File fromDir, File toDir,
+      int diskLayoutVersion, Configuration conf) throws IOException {
-    int diskLayoutVersion = this.getLayoutVersion();
-    DataStorage.linkBlocks(datanode, new File(fromDir, DataStorage.STORAGE_DIR_FINALIZED),
-      new File(toDir,DataStorage.STORAGE_DIR_FINALIZED), diskLayoutVersion, hardLink);
-    DataStorage.linkBlocks(datanode, new File(fromDir, DataStorage.STORAGE_DIR_RBW),
-        new File(toDir, DataStorage.STORAGE_DIR_RBW), diskLayoutVersion, hardLink);
-    LOG.info( hardLink.linkStats.report() );
+    DataStorage.linkBlocks(fromDir, toDir, DataStorage.STORAGE_DIR_FINALIZED,
+        diskLayoutVersion, hardLink, conf);
+    DataStorage.linkBlocks(fromDir, toDir, DataStorage.STORAGE_DIR_RBW,
+        diskLayoutVersion, hardLink, conf);
+    LOG.info("Linked blocks from " + fromDir + " to " + toDir + ". "
+        + hardLink.linkStats.report());

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 MOV44 MOV44 MOV44 MOV44 MOV44 INS31 INS31 INS74 UPD39 INS83 INS44 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 MOV44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 MOV29 INS83 INS83 INS39 INS42 MOV44 MOV44 INS44 INS44 MOV43 INS8 UPD43 UPD42 UPD43 UPD42 INS43 INS43 UPD43 UPD42 INS60 INS41 UPD65 UPD43 UPD42 INS83 INS83 UPD43 UPD42 INS83 INS43 INS42 INS60 INS60 UPD43 UPD42 INS83 INS43 INS42 INS83 MOV43 INS42 INS83 MOV43 INS42 INS83 MOV43 INS42 INS83 INS39 INS42 INS43 INS42 INS42 INS21 MOV21 MOV6 MOV21 MOV21 MOV21 INS21 INS39 INS42 INS43 INS42 MOV60 MOV21 MOV21 MOV21 UPD42 UPD42 INS42 INS42 UPD42 INS83 INS74 INS59 INS42 INS42 INS66 UPD42 UPD42 INS42 INS83 INS39 INS59 INS83 INS83 INS83 INS83 INS43 INS59 UPD42 INS42 INS42 INS32 INS32 INS42 INS25 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 MOV27 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS27 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS9 UPD42 MOV42 INS42 UPD45 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 MOV32 MOV42 MOV42 MOV42 MOV42 INS42 INS41 INS42 INS42 INS83 INS45 INS27 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 DEL42 DEL66 DEL65 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL21 DEL45 DEL42 DEL66 DEL65 DEL42 DEL42 DEL66 DEL65 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL32 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL14 DEL42 DEL40 DEL14 DEL42 DEL42 DEL40 DEL14 DEL42 DEL43 DEL42 DEL40 DEL14 DEL39 DEL42 DEL52 DEL32 DEL59 DEL60 DEL8 DEL31