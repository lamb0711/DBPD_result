Merge branch 'trunk' into HADOOP-12756

+import com.google.common.base.Preconditions;
-    
+
+  /**
+   * Represents a batch of directory entries when iteratively listing a
+   * directory. This is a private API not meant for use by end users.
+   * <p>
+   * For internal use by FileSystem subclasses that override
+   * {@link FileSystem#listStatusBatch(Path, byte[])} to implement iterative
+   * listing.
+   */
+  @InterfaceAudience.Private
+  public static class DirectoryEntries {
+    private final FileStatus[] entries;
+    private final byte[] token;
+    private final boolean hasMore;
+
+    public DirectoryEntries(FileStatus[] entries, byte[] token, boolean
+        hasMore) {
+      this.entries = entries;
+      if (token != null) {
+        this.token = token.clone();
+      } else {
+        this.token = null;
+      }
+      this.hasMore = hasMore;
+    }
+
+    public FileStatus[] getEntries() {
+      return entries;
+    }
+
+    public byte[] getToken() {
+      return token;
+    }
+
+    public boolean hasMore() {
+      return hasMore;
+    }
+  }
+
+  /**
+   * Given an opaque iteration token, return the next batch of entries in a
+   * directory. This is a private API not meant for use by end users.
+   * <p>
+   * This method should be overridden by FileSystem subclasses that want to
+   * use the generic {@link FileSystem#listStatusIterator(Path)} implementation.
+   * @param f Path to list
+   * @param token opaque iteration token returned by previous call, or null
+   *              if this is the first call.
+   * @return
+   * @throws FileNotFoundException
+   * @throws IOException
+   */
+  @InterfaceAudience.Private
+  protected DirectoryEntries listStatusBatch(Path f, byte[] token) throws
+      FileNotFoundException, IOException {
+    // The default implementation returns the entire listing as a single batch.
+    // Thus, there is never a second batch, and no need to respect the passed
+    // token or set a token in the returned DirectoryEntries.
+    FileStatus[] listing = listStatus(f);
+    return new DirectoryEntries(listing, null, false);
+  }
+
+   * Generic iterator for implementing {@link #listStatusIterator(Path)}.
+   */
+  private class DirListingIterator<T extends FileStatus> implements
+      RemoteIterator<T> {
+
+    private final Path path;
+    private DirectoryEntries entries;
+    private int i = 0;
+
+    DirListingIterator(Path path) {
+      this.path = path;
+    }
+
+    @Override
+    public boolean hasNext() throws IOException {
+      if (entries == null) {
+        fetchMore();
+      }
+      return i < entries.getEntries().length ||
+          entries.hasMore();
+    }
+
+    private void fetchMore() throws IOException {
+      byte[] token = null;
+      if (entries != null) {
+        token = entries.getToken();
+      }
+      entries = listStatusBatch(path, token);
+      i = 0;
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public T next() throws IOException {
+      Preconditions.checkState(hasNext(), "No more items in iterator");
+      if (i == entries.getEntries().length) {
+        fetchMore();
+      }
+      return (T)entries.getEntries()[i++];
+    }
+  }
+
+  /**
-    return new RemoteIterator<FileStatus>() {
-      private final FileStatus[] stats = listStatus(p);
-      private int i = 0;
-
-      @Override
-      public boolean hasNext() {
-        return i<stats.length;
-      }
-
-      @Override
-      public FileStatus next() throws IOException {
-        if (!hasNext()) {
-          throw new NoSuchElementException("No more entry in " + p);
-        }
-        return stats[i++];
-      }
-    };
+    return new DirListingIterator<>(p);

INS26 INS40 INS55 INS31 INS55 INS31 INS29 INS78 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS42 INS73 INS74 INS23 INS23 MOV23 INS31 INS31 INS31 INS31 MOV29 INS83 MOV74 INS42 MOV44 MOV43 MOV43 INS8 INS65 INS40 INS83 INS83 MOV5 INS59 INS83 INS83 INS5 INS59 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS5 INS42 INS8 INS83 INS5 INS42 INS8 INS83 INS39 INS42 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS40 INS42 INS43 INS42 INS5 INS42 INS42 INS42 INS60 INS41 INS65 INS42 MOV43 MOV43 UPD43 MOV43 MOV83 MOV83 INS43 INS59 INS83 INS43 INS59 INS42 INS44 INS8 MOV78 MOV83 MOV39 MOV42 INS43 MOV8 INS83 INS39 INS42 INS43 INS8 MOV78 INS79 MOV83 INS43 MOV42 MOV43 INS8 INS41 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS39 INS85 INS42 INS42 INS5 INS42 INS5 INS42 INS39 INS42 INS21 INS25 INS21 INS43 INS85 INS41 INS39 INS85 INS41 INS41 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS39 INS85 INS5 INS59 INS14 INS66 INS65 INS66 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS43 INS42 INS21 INS42 INS25 INS42 INS60 INS25 INS21 INS21 INS42 INS45 INS42 INS21 INS25 MOV41 INS14 INS68 INS43 INS85 INS39 INS85 INS7 INS27 INS8 INS8 INS7 INS42 INS42 INS42 INS42 INS68 INS43 INS85 INS42 INS32 INS43 INS42 INS33 INS9 INS68 INS42 INS7 INS27 INS8 INS27 INS5 INS59 INS27 INS8 INS7 INS7 INS32 INS27 INS8 INS11 INS74 INS42 INS42 INS42 INS69 INS69 INS42 INS22 INS42 INS42 INS33 INS21 INS21 INS22 INS42 INS42 INS42 INS69 INS42 INS42 INS42 INS42 INS42 INS69 INS22 INS42 INS42 INS33 INS21 INS27 INS32 INS39 INS85 INS42 INS33 INS42 INS33 INS21 INS42 INS32 INS42 INS34 INS42 INS42 MOV32 INS45 INS42 INS22 INS21 INS43 MOV2 INS43 INS43 INS5 INS52 INS42 INS7 INS7 INS52 INS42 INS43 INS43 INS52 INS42 INS32 MOV42 INS22 INS42 INS42 INS7 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS39 INS85 INS22 INS32 INS22 INS33 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 DEL40 DEL27 DEL42 DEL83 DEL42 DEL74 DEL42 DEL42 DEL32 DEL59 DEL23 DEL31 DEL38 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31