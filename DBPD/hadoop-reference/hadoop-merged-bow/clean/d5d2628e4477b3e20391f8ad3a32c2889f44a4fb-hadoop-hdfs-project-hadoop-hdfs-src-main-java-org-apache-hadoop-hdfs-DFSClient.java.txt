Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_CLIENT_USE_DN_HOSTNAME;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_CLIENT_USE_DN_HOSTNAME_DEFAULT;
+import java.io.InputStream;
+import java.util.LinkedHashMap;
+import org.apache.hadoop.classification.InterfaceAudience.LimitedPrivate;
+import org.apache.hadoop.fs.BlockStorageLocation;
+import org.apache.hadoop.fs.HdfsBlockLocation;
+import org.apache.hadoop.fs.MD5MD5CRC32CastagnoliFileChecksum;
+import org.apache.hadoop.fs.MD5MD5CRC32GzipFileChecksum;
+import org.apache.hadoop.fs.Options.ChecksumOpt;
+import org.apache.hadoop.fs.VolumeId;
+import org.apache.hadoop.hdfs.protocol.HdfsBlocksMetadata;
-import org.apache.hadoop.hdfs.protocol.HdfsConstants.UpgradeAction;
+import org.apache.hadoop.hdfs.protocol.datatransfer.DataTransferEncryptor;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import org.apache.hadoop.hdfs.security.token.block.DataEncryptionKey;
+import org.apache.hadoop.hdfs.security.token.block.InvalidBlockTokenException;
-import org.apache.hadoop.hdfs.server.common.UpgradeStatusReport;
+import org.apache.hadoop.util.Time;
-  final LeaseRenewer leaserenewer;
+  private final String authority;
+  private DataEncryptionKey encryptionKey;
-    final int checksumType;
-    final int bytesPerChecksum;
+    final ChecksumOpt defaultChecksumOpt;
+    final long socketCacheExpiry;
+    final boolean connectToDnViaHostname;
+    final boolean getHdfsBlocksMetadataEnabled;
+    final int getFileBlockStorageLocationsNumThreads;
+    final int getFileBlockStorageLocationsTimeout;
-      checksumType = getChecksumType(conf);
-      bytesPerChecksum = conf.getInt(DFS_BYTES_PER_CHECKSUM_KEY,
-          DFS_BYTES_PER_CHECKSUM_DEFAULT);
+      defaultChecksumOpt = getChecksumOptFromConf(conf);
+      socketCacheExpiry = conf.getLong(DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY,
+          DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_DEFAULT);
+      connectToDnViaHostname = conf.getBoolean(DFS_CLIENT_USE_DN_HOSTNAME,
+          DFS_CLIENT_USE_DN_HOSTNAME_DEFAULT);
+      getHdfsBlocksMetadataEnabled = conf.getBoolean(
+          DFSConfigKeys.DFS_HDFS_BLOCKS_METADATA_ENABLED, 
+          DFSConfigKeys.DFS_HDFS_BLOCKS_METADATA_ENABLED_DEFAULT);
+      getFileBlockStorageLocationsNumThreads = conf.getInt(
+          DFSConfigKeys.DFS_CLIENT_FILE_BLOCK_STORAGE_LOCATIONS_NUM_THREADS,
+          DFSConfigKeys.DFS_CLIENT_FILE_BLOCK_STORAGE_LOCATIONS_NUM_THREADS_DEFAULT);
+      getFileBlockStorageLocationsTimeout = conf.getInt(
+          DFSConfigKeys.DFS_CLIENT_FILE_BLOCK_STORAGE_LOCATIONS_TIMEOUT,
+          DFSConfigKeys.DFS_CLIENT_FILE_BLOCK_STORAGE_LOCATIONS_TIMEOUT_DEFAULT);
-    private int getChecksumType(Configuration conf) {
-      String checksum = conf.get(DFSConfigKeys.DFS_CHECKSUM_TYPE_KEY,
+    private DataChecksum.Type getChecksumType(Configuration conf) {
+      final String checksum = conf.get(
+          DFSConfigKeys.DFS_CHECKSUM_TYPE_KEY,
-      if ("CRC32".equals(checksum)) {
-        return DataChecksum.CHECKSUM_CRC32;
-      } else if ("CRC32C".equals(checksum)) {
-        return DataChecksum.CHECKSUM_CRC32C;
-      } else if ("NULL".equals(checksum)) {
-        return DataChecksum.CHECKSUM_NULL;
-      } else {
-        LOG.warn("Bad checksum type: " + checksum + ". Using default.");
-        return DataChecksum.CHECKSUM_CRC32C;
+      try {
+        return DataChecksum.Type.valueOf(checksum);
+      } catch(IllegalArgumentException iae) {
+        LOG.warn("Bad checksum type: " + checksum + ". Using default "
+            + DFSConfigKeys.DFS_CHECKSUM_TYPE_DEFAULT);
+        return DataChecksum.Type.valueOf(
+            DFSConfigKeys.DFS_CHECKSUM_TYPE_DEFAULT); 
-    private DataChecksum createChecksum() {
-      return DataChecksum.newDataChecksum(
-          checksumType, bytesPerChecksum);
+    // Construct a checksum option from conf
+    private ChecksumOpt getChecksumOptFromConf(Configuration conf) {
+      DataChecksum.Type type = getChecksumType(conf);
+      int bytesPerChecksum = conf.getInt(DFS_BYTES_PER_CHECKSUM_KEY,
+          DFS_BYTES_PER_CHECKSUM_DEFAULT);
+      return new ChecksumOpt(type, bytesPerChecksum);
+    }
+
+    // create a DataChecksum with the default option.
+    private DataChecksum createChecksum() throws IOException {
+      return createChecksum(null);
+    }
+
+    private DataChecksum createChecksum(ChecksumOpt userOpt) 
+        throws IOException {
+      // Fill in any missing field with the default.
+      ChecksumOpt myOpt = ChecksumOpt.processChecksumOpt(
+          defaultChecksumOpt, userOpt);
+      DataChecksum dataChecksum = DataChecksum.newDataChecksum(
+          myOpt.getChecksumType(),
+          myOpt.getBytesPerChecksum());
+      if (dataChecksum == null) {
+        throw new IOException("Invalid checksum type specified: "
+            + myOpt.getChecksumType().name());
+      }
+      return dataChecksum;
-    final String authority = nameNodeUri == null? "null": nameNodeUri.getAuthority();
-    this.leaserenewer = LeaseRenewer.getInstance(authority, ugi, this);
-    this.clientName = leaserenewer.getClientName(dfsClientConf.taskId);
-    
-    this.socketCache = new SocketCache(dfsClientConf.socketCacheCapacity);
-    
+    this.authority = nameNodeUri == null? "null": nameNodeUri.getAuthority();
+    this.clientName = "DFSClient_" + dfsClientConf.taskId + "_" + 
+        DFSUtil.getRandom().nextInt()  + "_" + Thread.currentThread().getId();
+    
+    this.socketCache = SocketCache.getInstance(dfsClientConf.socketCacheCapacity, dfsClientConf.socketCacheExpiry);
+  /**
+   * @return whether the client should use hostnames instead of IPs
+   *    when connecting to DataNodes
+   */
+  boolean connectToDnViaHostname() {
+    return dfsClientConf.connectToDnViaHostname;
+  }
+
-  /** Put a file. */
+  /** Return the lease renewer instance. The renewer thread won't start
+   *  until the first output stream is created. The same instance will
+   *  be returned until all output streams are closed.
+   */
+  public LeaseRenewer getLeaseRenewer() throws IOException {
+      return LeaseRenewer.getInstance(authority, ugi, this);
+  }
+
+  /** Get a lease and start automatic renewal */
+  private void beginFileLease(final String src, final DFSOutputStream out) 
+      throws IOException {
+    getLeaseRenewer().put(src, out, this);
+  }
+
+  /** Stop renewal of lease for the file. */
+  void endFileLease(final String src) throws IOException {
+    getLeaseRenewer().closeFile(src, this);
+  }
+    
+
+  /** Put a file. Only called from LeaseRenewer, where proper locking is
+   *  enforced to consistently update its local dfsclients array and 
+   *  client's filesBeingWritten map.
+   */
-  /** Remove a file. */
+  /** Remove a file. Only called from LeaseRenewer. */
-      lastLeaseRenewal = System.currentTimeMillis();
+      lastLeaseRenewal = Time.now();
-        final long elapsed = System.currentTimeMillis() - getLastLeaseRenewal();
+        final long elapsed = Time.now() - getLastLeaseRenewal();
-    socketCache.clear();
+
+    try {
+      // remove reference to this client and stop the renewer,
+      // if there is no more clients under the renewer.
+      getLeaseRenewer().closeClient(this);
+    } catch (IOException ioe) {
+       LOG.info("Exception occurred while aborting the client. " + ioe);
+    }
+  @Override
-      socketCache.clear();
-      leaserenewer.closeClient(this);
+      getLeaseRenewer().closeClient(this);
+   * Close all open streams, abandoning all of the leases and files being
+   * created.
+   * @param abort whether streams should be gracefully closed
+   */
+  public void closeOutputStreams(boolean abort) {
+    if (clientRunning) {
+      closeAllFilesBeingWritten(abort);
+    }
+  }
+
+  /**
-    long now = System.currentTimeMillis();
+    long now = Time.now();
-      DatanodeInfo chosenNode, int socketTimeout, long offsetIntoBlock)
-      throws InvalidToken, IOException {
+      DatanodeInfo chosenNode, int socketTimeout, long offsetIntoBlock,
+      boolean connectToDnViaHostname) throws InvalidToken, IOException {
-              - offsetIntoBlock);
+              - offsetIntoBlock, connectToDnViaHostname);
-    return DFSUtil.locatedBlocks2Locations(blocks);
+    BlockLocation[] locations =  DFSUtil.locatedBlocks2Locations(blocks);
+    HdfsBlockLocation[] hdfsLocations = new HdfsBlockLocation[locations.length];
+    for (int i = 0; i < locations.length; i++) {
+      hdfsLocations[i] = new HdfsBlockLocation(locations[i], blocks.get(i));
+    }
+    return hdfsLocations;
+  }
+  
+  /**
+   * Get block location information about a list of {@link HdfsBlockLocation}.
+   * Used by {@link DistributedFileSystem#getFileBlockStorageLocations(List)} to
+   * get {@link BlockStorageLocation}s for blocks returned by
+   * {@link DistributedFileSystem#getFileBlockLocations(org.apache.hadoop.fs.FileStatus, long, long)}
+   * .
+   * 
+   * This is done by making a round of RPCs to the associated datanodes, asking
+   * the volume of each block replica. The returned array of
+   * {@link BlockStorageLocation} expose this information as a
+   * {@link VolumeId}.
+   * 
+   * @param blockLocations
+   *          target blocks on which to query volume location information
+   * @return volumeBlockLocations original block array augmented with additional
+   *         volume location information for each replica.
+   */
+  public BlockStorageLocation[] getBlockStorageLocations(
+      List<BlockLocation> blockLocations) throws IOException,
+      UnsupportedOperationException, InvalidBlockTokenException {
+    if (!getConf().getHdfsBlocksMetadataEnabled) {
+      throw new UnsupportedOperationException("Datanode-side support for " +
+          "getVolumeBlockLocations() must also be enabled in the client " +
+          "configuration.");
+    }
+    // Downcast blockLocations and fetch out required LocatedBlock(s)
+    List<LocatedBlock> blocks = new ArrayList<LocatedBlock>();
+    for (BlockLocation loc : blockLocations) {
+      if (!(loc instanceof HdfsBlockLocation)) {
+        throw new ClassCastException("DFSClient#getVolumeBlockLocations " +
+            "expected to be passed HdfsBlockLocations");
+      }
+      HdfsBlockLocation hdfsLoc = (HdfsBlockLocation) loc;
+      blocks.add(hdfsLoc.getLocatedBlock());
+    }
+    
+    // Re-group the LocatedBlocks to be grouped by datanodes, with the values
+    // a list of the LocatedBlocks on the datanode.
+    Map<DatanodeInfo, List<LocatedBlock>> datanodeBlocks = 
+        new LinkedHashMap<DatanodeInfo, List<LocatedBlock>>();
+    for (LocatedBlock b : blocks) {
+      for (DatanodeInfo info : b.getLocations()) {
+        if (!datanodeBlocks.containsKey(info)) {
+          datanodeBlocks.put(info, new ArrayList<LocatedBlock>());
+        }
+        List<LocatedBlock> l = datanodeBlocks.get(info);
+        l.add(b);
+      }
+    }
+        
+    // Make RPCs to the datanodes to get volume locations for its replicas
+    List<HdfsBlocksMetadata> metadatas = BlockStorageLocationUtil
+        .queryDatanodesForHdfsBlocksMetadata(conf, datanodeBlocks,
+            getConf().getFileBlockStorageLocationsNumThreads,
+            getConf().getFileBlockStorageLocationsTimeout,
+            getConf().connectToDnViaHostname);
+    
+    // Regroup the returned VolumeId metadata to again be grouped by
+    // LocatedBlock rather than by datanode
+    Map<LocatedBlock, List<VolumeId>> blockVolumeIds = BlockStorageLocationUtil
+        .associateVolumeIdsWithBlocks(blocks, datanodeBlocks, metadatas);
+    
+    // Combine original BlockLocations with new VolumeId information
+    BlockStorageLocation[] volumeBlockLocations = BlockStorageLocationUtil
+        .convertToVolumeBlockLocations(blocks, blockVolumeIds);
+
+    return volumeBlockLocations;
-        buffersize);
+        buffersize, null);
-   * long, Progressable, int)} with <code>createParent</code> set to true.
+   * long, Progressable, int, ChecksumOpt)} with <code>createParent</code>
+   *  set to true.
-                             int buffersize)
+                             int buffersize,
+                             ChecksumOpt checksumOpt)
-        replication, blockSize, progress, buffersize);
+        replication, blockSize, progress, buffersize, checksumOpt);
+   * @param checksumOpt checksum options
-                             int buffersize)
-    throws IOException {
+                             int buffersize,
+                             ChecksumOpt checksumOpt) throws IOException {
-        buffersize, dfsClientConf.createChecksum());
-    leaserenewer.put(src, result, this);
+        buffersize, dfsClientConf.createChecksum(checksumOpt));
+    beginFileLease(src, result);
-                             int bytesPerChecksum)
+                             ChecksumOpt checksumOpt)
-      DataChecksum checksum = DataChecksum.newDataChecksum(
-          dfsClientConf.checksumType,
-          bytesPerChecksum);
+      DataChecksum checksum = dfsClientConf.createChecksum(checksumOpt);
-    leaserenewer.put(src, result, this);
+    beginFileLease(src, result);
-    leaserenewer.put(src, result, this);
+    beginFileLease(src, result);
-    return getFileChecksum(src, namenode, socketFactory, dfsClientConf.socketTimeout);    
+    return getFileChecksum(src, namenode, socketFactory,
+        dfsClientConf.socketTimeout, getDataEncryptionKey(),
+        dfsClientConf.connectToDnViaHostname);
+  }
+  
+  @InterfaceAudience.Private
+  public void clearDataEncryptionKey() {
+    LOG.debug("Clearing encryption key");
+    synchronized (this) {
+      encryptionKey = null;
+    }
+  }
+  
+  /**
+   * @return true if data sent between this client and DNs should be encrypted,
+   *         false otherwise.
+   * @throws IOException in the event of error communicating with the NN
+   */
+  boolean shouldEncryptData() throws IOException {
+    FsServerDefaults d = getServerDefaults();
+    return d == null ? false : d.getEncryptDataTransfer();
+  }
+  
+  @InterfaceAudience.Private
+  public DataEncryptionKey getDataEncryptionKey()
+      throws IOException {
+    if (shouldEncryptData()) {
+      synchronized (this) {
+        if (encryptionKey == null ||
+            (encryptionKey != null &&
+             encryptionKey.expiryDate < Time.now())) {
+          LOG.debug("Getting new encryption token from NN");
+          encryptionKey = namenode.getDataEncryptionKey();
+        }
+        return encryptionKey;
+      }
+    } else {
+      return null;
+    }
-      ClientProtocol namenode, SocketFactory socketFactory, int socketTimeout
-      ) throws IOException {
+      ClientProtocol namenode, SocketFactory socketFactory, int socketTimeout,
+      DataEncryptionKey encryptionKey, boolean connectToDnViaHostname)
+      throws IOException {
-    int bytesPerCRC = 0;
+    int bytesPerCRC = -1;
+    DataChecksum.Type crcType = DataChecksum.Type.DEFAULT;
-          NetUtils.connect(sock,
-              NetUtils.createSocketAddr(datanodes[j].getXferAddr()),
-              timeout);
+          String dnAddr = datanodes[j].getXferAddr(connectToDnViaHostname);
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Connecting to datanode " + dnAddr);
+          }
+          NetUtils.connect(sock, NetUtils.createSocketAddr(dnAddr), timeout);
-          out = new DataOutputStream(
-              new BufferedOutputStream(NetUtils.getOutputStream(sock), 
-                                       HdfsConstants.SMALL_BUFFER_SIZE));
-          in = new DataInputStream(NetUtils.getInputStream(sock));
+          OutputStream unbufOut = NetUtils.getOutputStream(sock);
+          InputStream unbufIn = NetUtils.getInputStream(sock);
+          if (encryptionKey != null) {
+            IOStreamPair encryptedStreams =
+                DataTransferEncryptor.getEncryptedStreams(
+                    unbufOut, unbufIn, encryptionKey);
+            unbufOut = encryptedStreams.out;
+            unbufIn = encryptedStreams.in;
+          }
+          out = new DataOutputStream(new BufferedOutputStream(unbufOut,
+              HdfsConstants.SMALL_BUFFER_SIZE));
+          in = new DataInputStream(unbufIn);
+          // read crc-type
+          final DataChecksum.Type ct = HdfsProtoUtil.
+              fromProto(checksumData.getCrcType());
+          if (i == 0) { // first block
+            crcType = ct;
+          } else if (crcType != DataChecksum.Type.MIXED
+              && crcType != ct) {
+            // if crc types are mixed in a file
+            crcType = DataChecksum.Type.MIXED;
+          }
+
-    return new MD5MD5CRC32FileChecksum(bytesPerCRC, crcPerBlock, fileMD5);
+    switch (crcType) {
+      case CRC32:
+        return new MD5MD5CRC32GzipFileChecksum(bytesPerCRC,
+            crcPerBlock, fileMD5);
+      case CRC32C:
+        return new MD5MD5CRC32CastagnoliFileChecksum(bytesPerCRC,
+            crcPerBlock, fileMD5);
+      default:
+        // we should never get here since the validity was checked
+        // when getCrcType() was called above.
+        return null;
+    }
+
+  /**
+   * Rolls the edit log on the active NameNode.
+   * @return the txid of the new log segment 
+   *
+   * @see ClientProtocol#rollEdits()
+   */
+  long rollEdits() throws AccessControlException, IOException {
+    try {
+      return namenode.rollEdits();
+    } catch(RemoteException re) {
+      throw re.unwrapRemoteException(AccessControlException.class);
+    }
+  }
-   * @see ClientProtocol#distributedUpgradeProgress(HdfsConstants.UpgradeAction)
-   */
-  public UpgradeStatusReport distributedUpgradeProgress(UpgradeAction action)
-      throws IOException {
-    return namenode.distributedUpgradeProgress(action);
-  }
-
-  /**
-    checkOpen();
-    if(LOG.isDebugEnabled()) {
-      LOG.debug(src + ": masked=" + masked);
-    }
-    try {
-      return namenode.mkdirs(src, masked, createParent);
-    } catch(RemoteException re) {
-      throw re.unwrapRemoteException(AccessControlException.class,
-                                     InvalidPathException.class,
-                                     FileAlreadyExistsException.class,
-                                     FileNotFoundException.class,
-                                     ParentNotDirectoryException.class,
-                                     SafeModeException.class,
-                                     NSQuotaExceededException.class,
-                                     UnresolvedPathException.class);
-    }
+    return primitiveMkdir(src, masked, createParent);
-  
+
+    return primitiveMkdir(src, absPermission, true);
+  }
+
+  /**
+   * Same {{@link #mkdirs(String, FsPermission, boolean)} except
+   * that the permissions has already been masked against umask.
+   */
+  public boolean primitiveMkdir(String src, FsPermission absPermission, 
+    boolean createParent)
+    throws IOException {
-      return namenode.mkdirs(src, absPermission, true);
+      return namenode.mkdirs(src, absPermission, createParent);
+                                     InvalidPathException.class,
+                                     FileAlreadyExistsException.class,
+                                     FileNotFoundException.class,
+                                     ParentNotDirectoryException.class,
+                                     SafeModeException.class,
-
+  
-    if (shortCircuitLocalReads && isLocalAddress(targetAddr)) {
-      return true;
-    }
-    return false;
+    return shortCircuitLocalReads && isLocalAddress(targetAddr);

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS23 MOV23 MOV23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 MOV43 INS83 INS43 INS59 INS23 INS23 INS23 INS23 INS31 INS31 MOV21 INS29 INS39 INS42 INS8 INS29 INS83 MOV43 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS39 INS42 INS44 INS43 INS8 INS78 INS29 INS83 INS39 INS42 INS44 INS8 INS44 MOV29 MOV83 INS5 INS42 INS44 MOV43 UPD43 MOV43 INS43 INS8 INS44 INS44 INS78 INS83 INS39 INS42 INS8 INS29 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS44 INS44 INS29 INS39 INS42 INS43 INS43 INS8 INS8 INS29 INS83 INS39 INS42 INS44 MOV44 INS43 MOV8 INS44 MOV8 UPD42 INS42 INS42 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 MOV21 INS43 INS83 INS43 INS42 INS44 INS8 INS83 MOV43 INS42 INS43 INS8 INS43 INS44 INS43 INS65 INS41 INS65 INS42 INS41 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS65 INS83 INS43 INS42 INS42 INS21 INS54 INS42 INS65 INS65 INS39 INS42 INS25 INS39 INS42 INS60 INS60 INS24 INS65 INS65 INS65 INS43 INS85 INS74 INS42 UPD42 INS42 INS25 INS60 INS70 INS60 INS70 INS60 INS60 INS60 INS41 INS43 INS42 INS65 INS43 INS42 INS43 INS42 INS40 INS21 INS51 INS65 INS65 INS42 INS60 INS41 INS40 INS42 INS42 INS25 INS43 INS42 INS39 INS42 INS60 INS50 INS65 INS65 INS65 INS42 INS42 INS54 MOV25 MOV60 INS41 INS65 INS43 INS42 UPD43 UPD42 INS42 INS39 INS42 MOV21 MOV25 MOV41 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS21 INS21 INS21 INS21 INS40 INS54 INS42 INS43 INS42 INS60 INS60 INS41 INS42 INS41 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS66 INS66 INS40 INS66 INS66 INS66 MOV32 INS66 INS42 INS42 INS32 INS66 INS42 INS32 UPD66 INS66 INS66 UPD66 INS8 INS12 INS66 INS66 INS42 INS66 INS42 INS8 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS66 INS66 INS42 INS43 INS43 INS38 INS8 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS74 INS59 INS5 INS59 INS42 UPD66 INS66 INS42 INS42 INS66 INS42 INS42 INS32 INS52 INS8 INS66 INS66 INS42 INS66 INS43 INS59 INS16 INS32 INS8 INS8 INS42 INS43 INS59 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS66 INS66 INS68 INS8 INS12 INS32 INS66 INS65 INS66 INS66 INS42 UPD42 MOV27 INS7 INS7 INS7 INS7 INS83 INS8 INS12 INS42 INS43 INS59 INS39 INS59 INS14 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 MOV16 INS27 INS32 INS32 INS42 INS42 INS42 INS52 INS32 INS42 INS42 INS52 MOV21 INS44 INS8 INS21 INS43 INS85 INS42 MOV32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS68 INS42 MOV68 INS42 INS42 INS42 INS42 INS22 INS53 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS60 INS21 INS43 INS43 INS74 INS42 INS14 INS43 INS42 INS70 INS43 INS43 INS42 INS32 INS43 INS43 INS74 INS42 INS32 INS43 INS85 INS42 INS32 INS33 INS42 UPD42 UPD42 UPD42 INS32 INS40 INS42 INS42 INS45 INS21 INS42 INS42 INS32 INS27 INS9 INS32 INS42 INS51 INS41 INS38 INS40 INS42 INS40 INS42 MOV14 INS42 INS14 INS33 INS42 INS42 INS41 MOV44 INS8 INS42 INS42 INS42 INS42 INS68 UPD42 UPD42 UPD42 INS9 MOV42 MOV42 MOV42 MOV21 UPD42 INS32 INS42 INS32 INS42 INS32 UPD42 INS32 INS42 INS32 INS42 INS32 INS41 INS44 INS8 INS40 INS42 MOV32 INS42 MOV32 INS43 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 UPD42 INS45 INS40 INS45 INS32 INS45 INS32 INS42 INS42 INS40 INS40 INS42 INS42 INS43 INS42 INS21 INS32 UPD42 UPD42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS42 INS69 UPD42 UPD42 INS69 INS69 INS32 INS42 INS14 INS42 INS42 INS74 INS42 INS38 INS8 INS43 INS59 INS32 INS42 INS42 INS43 INS43 INS74 INS42 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS22 INS22 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS7 INS42 INS42 INS33 INS42 INS42 INS52 INS8 INS33 INS34 UPD43 INS43 INS42 INS42 INS42 INS32 INS53 INS42 INS69 INS69 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS32 INS43 INS42 MOV21 MOV41 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 INS32 INS32 INS14 INS32 INS42 INS32 UPD42 MOV42 INS32 UPD42 INS52 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS85 INS2 INS14 INS43 UPD43 INS39 INS39 INS42 INS43 INS27 INS43 INS43 INS36 INS53 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS74 INS43 INS42 INS42 INS42 INS25 INS60 INS21 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS33 INS25 INS41 UPD42 INS42 INS42 INS42 INS32 INS43 INS43 INS39 MOV42 MOV27 UPD42 INS40 UPD42 MOV42 MOV42 INS42 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS43 INS27 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS27 UPD42 MOV42 INS42 INS42 INS42 INS43 INS2 INS32 INS42 UPD40 INS42 INS45 INS45 INS45 INS42 INS42 INS62 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS38 INS8 INS74 INS59 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS27 INS8 INS42 INS42 INS42 MOV57 INS42 INS42 MOV45 UPD42 MOV57 INS40 INS42 INS40 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS27 INS42 INS42 INS42 INS32 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS27 INS36 INS21 INS21 INS60 INS25 INS60 INS60 INS25 INS60 INS25 UPD45 INS40 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS27 INS32 INS7 INS43 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS14 INS27 INS27 INS42 INS42 INS45 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS21 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS33 INS60 INS21 INS21 INS40 INS42 INS32 INS42 INS34 INS21 INS27 INS8 UPD42 UPD42 INS74 INS42 INS33 INS40 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS7 INS7 INS42 INS42 INS42 INS32 INS7 INS27 INS27 INS21 INS43 INS43 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 DEL39 DEL40 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL45 DEL32 DEL40 DEL41 DEL8 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL8 DEL25 DEL25 DEL25 DEL32 DEL41 DEL83 DEL42 DEL59 DEL60 DEL40 DEL32 DEL42 DEL43 DEL40 DEL14 DEL42 DEL42 DEL32 DEL21 DEL65 DEL42 DEL52 DEL39 DEL42 DEL40 DEL42 DEL52 DEL42 DEL52 DEL34 DEL41 DEL42 DEL31 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL43 DEL57 DEL32 DEL53 DEL8 DEL12 DEL54 DEL8 DEL9 DEL8 DEL25 DEL9 DEL41