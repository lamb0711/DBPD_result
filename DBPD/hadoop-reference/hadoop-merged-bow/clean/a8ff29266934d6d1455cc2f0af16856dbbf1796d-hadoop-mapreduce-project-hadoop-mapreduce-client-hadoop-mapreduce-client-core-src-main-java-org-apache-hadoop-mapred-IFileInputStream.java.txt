Merge trunk into HDFS-3077 branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1377092 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileDescriptor;
+import java.io.FileInputStream;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.fs.HasFileDescriptor;
+import org.apache.hadoop.io.ReadaheadPool;
+import org.apache.hadoop.io.ReadaheadPool.ReadaheadRequest;
+import org.apache.hadoop.mapreduce.MRConfig;
-  private final InputStream in; //The input stream to be verified for checksum. 
+  private final InputStream in; //The input stream to be verified for checksum.
+  private final FileDescriptor inFd; // the file descriptor, if it is known
-  
+
+  private ReadaheadRequest curReadahead = null;
+  private ReadaheadPool raPool = ReadaheadPool.getInstance();
+  private boolean readahead;
+  private int readaheadLength;
+
+  public static final Log LOG = LogFactory.getLog(IFileInputStream.class);
+
-  public IFileInputStream(InputStream in, long len) {
+  public IFileInputStream(InputStream in, long len, Configuration conf) {
-    sum = DataChecksum.newDataChecksum(DataChecksum.CHECKSUM_CRC32, 
+    this.inFd = getFileDescriptorIfAvail(in);
+    sum = DataChecksum.newDataChecksum(DataChecksum.Type.CRC32, 
+
+    conf = (conf != null) ? conf : new Configuration();
+    readahead = conf.getBoolean(MRConfig.MAPRED_IFILE_READAHEAD,
+        MRConfig.DEFAULT_MAPRED_IFILE_READAHEAD);
+    readaheadLength = conf.getInt(MRConfig.MAPRED_IFILE_READAHEAD_BYTES,
+        MRConfig.DEFAULT_MAPRED_IFILE_READAHEAD_BYTES);
+
+    doReadahead();
+  }
+
+  private static FileDescriptor getFileDescriptorIfAvail(InputStream in) {
+    FileDescriptor fd = null;
+    try {
+      if (in instanceof HasFileDescriptor) {
+        fd = ((HasFileDescriptor)in).getFileDescriptor();
+      } else if (in instanceof FileInputStream) {
+        fd = ((FileInputStream)in).getFD();
+      }
+    } catch (IOException e) {
+      LOG.info("Unable to determine FileDescriptor", e);
+    }
+    return fd;
+
+    if (curReadahead != null) {
+      curReadahead.cancel();
+    }
-    
+
+    doReadahead();
+
+  private void doReadahead() {
+    if (raPool != null && inFd != null && readahead) {
+      curReadahead = raPool.readaheadStream(
+          "ifile", inFd,
+          currentOffset, readaheadLength, dataLength,
+          curReadahead);
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS83 INS83 INS43 INS59 INS44 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS43 INS42 INS60 INS54 INS41 INS25 INS21 INS25 INS42 INS42 INS42 INS42 INS57 INS42 INS7 INS7 INS7 INS7 INS32 INS42 INS43 INS59 INS8 INS12 INS42 INS27 INS8 INS32 INS27 INS8 INS43 INS22 INS32 INS42 INS16 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS33 INS25 INS44 INS8 INS42 INS33 INS21 INS42 INS27 INS42 INS21 INS42 INS52 INS42 INS42 INS42 UPD40 INS36 INS42 INS14 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS62 INS8 INS25 INS43 INS42 INS21 INS32 INS27 INS27 INS7 INS27 INS43 INS42 INS43 INS21 INS62 INS8 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS32 INS42 INS33 INS42 INS42 INS7 INS42 INS43 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS36 INS42 INS42 INS32 INS11 INS36 INS42 INS43 INS42 INS11 INS42 INS43 INS42 INS42