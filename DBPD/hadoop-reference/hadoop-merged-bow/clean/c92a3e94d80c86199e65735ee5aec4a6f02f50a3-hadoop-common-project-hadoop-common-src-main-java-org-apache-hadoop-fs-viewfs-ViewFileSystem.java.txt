HADOOP-15565. Add an inner FS cache to ViewFileSystem, separate from the global cache, to avoid file system leaks. Contributed by Jinglun.

+import static org.apache.hadoop.fs.viewfs.Constants.CONFIG_VIEWFS_ENABLE_INNER_CACHE;
+import static org.apache.hadoop.fs.viewfs.Constants.CONFIG_VIEWFS_ENABLE_INNER_CACHE_DEFAULT;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Objects;
+   * Caching children filesystems. HADOOP-15565.
+   */
+  static class InnerCache {
+    private Map<Key, FileSystem> map = new HashMap<>();
+
+    FileSystem get(URI uri, Configuration config) throws IOException {
+      Key key = new Key(uri);
+      if (map.get(key) == null) {
+        FileSystem fs = FileSystem.newInstance(uri, config);
+        map.put(key, fs);
+        return fs;
+      } else {
+        return map.get(key);
+      }
+    }
+
+    void closeAll() {
+      for (FileSystem fs : map.values()) {
+        try {
+          fs.close();
+        } catch (IOException e) {
+          LOG.info("Fail closing ViewFileSystem's child filesystem " + fs, e);
+        }
+      }
+    }
+
+    InnerCache unmodifiableCache() {
+      map = Collections.unmodifiableMap(map);
+      return this;
+    }
+
+    /**
+     * All the cached instances share the same UGI so there is no need to have a
+     * URI in the Key. Make the Key simple with just the scheme and authority.
+     */
+    private static class Key {
+      private final String scheme;
+      private final String authority;
+
+      Key(URI uri) {
+        scheme = uri.getScheme() == null ? "" : uri.getScheme().toLowerCase();
+        authority =
+            uri.getAuthority() == null ? "" : uri.getAuthority().toLowerCase();
+      }
+
+      @Override
+      public int hashCode() {
+        return Objects.hash(scheme, authority);
+      }
+
+      @Override
+      public boolean equals(Object obj) {
+        if (obj == this) {
+          return true;
+        }
+        if (obj != null && obj instanceof Key) {
+          Key that = (Key) obj;
+          return this.scheme.equals(that.scheme) && this.authority
+              .equals(that.authority);
+        }
+        return false;
+      }
+    }
+  }
+
+  /**
+  private boolean enableInnerCache = false;
+  private InnerCache cache;
+    enableInnerCache = config.getBoolean(CONFIG_VIEWFS_ENABLE_INNER_CACHE,
+        CONFIG_VIEWFS_ENABLE_INNER_CACHE_DEFAULT);
+    final InnerCache innerCache = new InnerCache();
-            return new ChRootedFileSystem(uri, config);
+            FileSystem fs;
+            if (enableInnerCache) {
+              fs = innerCache.get(uri, config);
+            } else {
+              fs = FileSystem.get(uri, config);
+            }
+            return new ChRootedFileSystem(fs, uri);
+    if (enableInnerCache) {
+      // All fs instances are created and cached on startup. The cache is
+      // readonly after the initialize() so the concurrent access of the cache
+      // is safe.
+      cache = innerCache.unmodifiableCache();
+    }
+
+  @Override
+  public void close() throws IOException {
+    super.close();
+    if (enableInnerCache && cache != null) {
+      cache.closeAll();
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS55 INS23 INS23 INS31 INS29 INS83 INS42 INS23 INS31 INS31 INS31 INS55 INS83 INS39 INS59 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS43 INS8 INS65 INS83 INS74 INS59 INS43 INS42 INS44 INS44 INS43 INS8 INS39 INS42 INS8 INS43 INS42 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS42 INS9 INS42 INS42 INS21 INS60 INS25 INS42 INS42 INS21 INS25 INS66 INS43 INS43 INS43 INS42 INS14 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS70 INS42 INS21 INS41 INS65 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS7 INS83 INS43 INS59 INS42 INS8 INS48 INS27 INS8 INS42 INS42 INS42 INS74 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS44 INS32 INS8 INS7 INS52 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS43 INS42 INS25 INS25 INS41 INS42 INS32 INS42 INS42 INS14 INS21 INS42 INS42 INS27 INS21 INS43 INS42 INS42 INS14 INS32 INS33 INS60 INS21 INS41 INS41 INS43 INS42 INS42 INS42 INS54 INS42 INS32 INS42 INS7 INS7 INS32 INS42 INS27 INS8 INS27 INS8 INS9 INS42 INS42 INS42 INS42 INS43 INS7 INS42 INS33 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS32 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS16 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS52 INS41 INS27 INS62 INS60 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS27 INS45 INS32 INS27 INS45 INS32 INS9 INS42 INS33 INS42 INS43 INS43 INS59 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS32 INS33 INS32 INS42 INS32 INS33 INS32 INS42 INS42 INS42 INS42 INS11 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS22 INS42 INS40 INS22 INS42 INS40 INS8 INS42 INS42 INS27 INS42 INS42 INS52 INS42 INS52 INS42 INS60 INS25 MOV41 INS45 INS42 INS43 INS59 INS42 INS8 INS8 INS42 INS42 INS21 INS21 INS42 INS7 INS7 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL8