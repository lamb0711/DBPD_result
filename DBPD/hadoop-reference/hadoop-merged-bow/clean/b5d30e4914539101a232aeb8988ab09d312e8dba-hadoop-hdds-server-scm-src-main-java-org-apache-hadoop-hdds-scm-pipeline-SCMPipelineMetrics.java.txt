HDDS-1750. Add block allocation metrics for pipelines in SCM. Contributed by Lokesh Jain. (#1047)



+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsRecordBuilder;
+import org.apache.hadoop.metrics2.MetricsSource;
+import org.apache.hadoop.metrics2.lib.Interns;
+import org.apache.hadoop.metrics2.lib.MetricsRegistry;
+import java.util.Map;
+import java.util.Optional;
+import java.util.concurrent.ConcurrentHashMap;
+
-public final class SCMPipelineMetrics {
+public final class SCMPipelineMetrics implements MetricsSource {
+  private MetricsRegistry registry;
+
+  private Map<PipelineID, MutableCounterLong> numBlocksAllocated;
-  private SCMPipelineMetrics() { }
+  private SCMPipelineMetrics() {
+    this.registry = new MetricsRegistry(SOURCE_NAME);
+    numBlocksAllocated = new ConcurrentHashMap<>();
+  }
+  @Override
+  @SuppressWarnings("SuspiciousMethodCalls")
+  public void getMetrics(MetricsCollector collector, boolean all) {
+    MetricsRecordBuilder recordBuilder = collector.addRecord(SOURCE_NAME);
+    numPipelineCreated.snapshot(recordBuilder, true);
+    numPipelineCreationFailed.snapshot(recordBuilder, true);
+    numPipelineDestroyed.snapshot(recordBuilder, true);
+    numPipelineDestroyFailed.snapshot(recordBuilder, true);
+    numPipelineReportProcessed.snapshot(recordBuilder, true);
+    numPipelineReportProcessingFailed.snapshot(recordBuilder, true);
+    numBlocksAllocated
+        .forEach((pid, metric) -> metric.snapshot(recordBuilder, true));
+  }
+
+  void createPerPipelineMetrics(Pipeline pipeline) {
+    numBlocksAllocated.put(pipeline.getId(), new MutableCounterLong(Interns
+        .info(getBlockAllocationMetricName(pipeline),
+            "Number of blocks allocated in pipeline " + pipeline.getId()), 0L));
+  }
+
+  public static String getBlockAllocationMetricName(Pipeline pipeline) {
+    return "NumBlocksAllocated-" + pipeline.getType() + "-" + pipeline
+        .getFactor() + "-" + pipeline.getId().getId();
+  }
+
+  void removePipelineMetrics(PipelineID pipelineID) {
+    numBlocksAllocated.remove(pipelineID);
+  }
+
+  /**
+   * Increments number of blocks allocated for the pipeline.
+   */
+  void incNumBlocksAllocated(PipelineID pipelineID) {
+    Optional.of(numBlocksAllocated.get(pipelineID)).ifPresent(
+        MutableCounterLong::incr);
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS43 INS59 INS83 INS74 INS59 INS78 INS79 INS83 INS39 INS42 INS44 INS44 INS8 INS39 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS8 INS42 INS42 INS43 INS43 INS43 INS42 INS21 INS21 INS42 INS42 INS45 INS43 INS42 INS39 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS43 INS42 INS21 INS42 INS43 INS42 INS41 INS43 INS42 INS21 INS65 INS43 INS42 INS21 INS42 INS42 INS42 INS7 INS7 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS27 INS42 INS32 INS66 INS42 INS32 INS22 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS86 INS42 INS42 INS32 INS14 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS90 INS52 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS59 INS59 INS32 INS42 INS42 INS43 INS32 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42