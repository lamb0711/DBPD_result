HDDS-140. Add DU usage to VolumeInfo.

-import java.util.Iterator;
+
-   * {@link VolumeSet#volumeList} maintains a list of active volumes in the
+   * {@link VolumeSet#volumeMap} maintains a map of all active volumes in the
-  private List<VolumeInfo> volumeList;
-  /**
-   * {@link VolumeSet#failedVolumeList} maintains a list of volumes which have
-   * failed. This list is mutually exclusive to {@link VolumeSet#volumeList}.
-   */
-  private List<VolumeInfo> failedVolumeList;
-  /**
-   * {@link VolumeSet#volumeMap} maintains a map of all volumes in the
-   * DataNode irrespective of their state.
-   */
-   * {@link VolumeSet#volumeStateMap} maintains a list of volumes per
+   * {@link VolumeSet#failedVolumeMap} maintains a map of volumes which have
+   * failed. The keys in this map and {@link VolumeSet#volumeMap} are
+   * mutually exclusive.
+   */
+  private Map<Path, VolumeInfo> failedVolumeMap;
+  /**
+   * {@link VolumeSet#volumeStateMap} maintains a list of active volumes per
-   * {@link VolumeSet#volumeList}, {@link VolumeSet#failedVolumeList},
-   * {@link VolumeSet#volumeMap} or {@link VolumeSet#volumeStateMap} should
-   * be done after acquiring this lock.
+   * {@link VolumeSet#volumeMap}, {@link VolumeSet#failedVolumeMap}, or
+   * {@link VolumeSet#volumeStateMap} should be done after acquiring this lock.
-    volumeList = new ArrayList<>();
-    failedVolumeList = new ArrayList<>();
+    failedVolumeMap = new ConcurrentHashMap<>();
-        volumeList.add(volumeInfo);
-    if (volumeList.size() == 0) {
+    if (volumeMap.size() == 0) {
-    VolumeInfo.Builder volumeBuilder = new VolumeInfo.Builder(rootDir);
+    VolumeInfo.Builder volumeBuilder = new VolumeInfo.Builder(rootDir, conf);
-        VolumeInfo volumeInfo = volumeMap.get(dirPath);
-        if (volumeInfo.isFailed()) {
-          volumeInfo.setState(VolumeState.NORMAL);
-          failedVolumeList.remove(volumeInfo);
-          volumeList.add(volumeInfo);
-        } else {
-          LOG.warn("Volume : " + volumeInfo.getRootDir() + " already " +
-              "exists in VolumeMap");
-        }
+        LOG.warn("Volume : {} already exists in VolumeMap", dataDir);
-        VolumeInfo volumeInfo = getVolumeInfo(dataDir);
+        if (failedVolumeMap.containsKey(dirPath)) {
+          failedVolumeMap.remove(dirPath);
+        }
-        volumeList.add(volumeInfo);
-        volumeMap.put(volumeInfo.getRootDir(), volumeInfo);
+        VolumeInfo volumeInfo = getVolumeInfo(dirPath.toString());
+        volumeMap.put(dirPath, volumeInfo);
+
+        LOG.debug("Added Volume : {} to VolumeSet", dataDir);
-        if (!volumeInfo.isFailed()) {
-          volumeInfo.setState(VolumeState.FAILED);
-          volumeList.remove(volumeInfo);
-          failedVolumeList.add(volumeInfo);
-        }
+        volumeInfo.failVolume();
+
+        volumeMap.remove(dirPath);
+        volumeStateMap.get(volumeInfo.getStorageType()).remove(volumeInfo);
+        failedVolumeMap.put(dirPath, volumeInfo);
+
+        LOG.debug("Moving Volume : {} to failed Volumes", dataDir);
+      } else if (failedVolumeMap.containsKey(dirPath)) {
+        LOG.debug("Volume : {} is not active", dataDir);
-        LOG.warn("Volume : " + dataDir + " does not exist in VolumeMap");
+        LOG.warn("Volume : {} does not exist in VolumeSet", dataDir);
-        if (!volumeInfo.isFailed()) {
-          volumeList.remove(volumeInfo);
-        } else {
-          failedVolumeList.remove(volumeInfo);
-        }
+        volumeInfo.shutdown();
+
+
+        LOG.debug("Removed Volume : {} from VolumeSet", dataDir);
+      } else if (failedVolumeMap.containsKey(dirPath)) {
+        VolumeInfo volumeInfo = failedVolumeMap.get(dirPath);
+        volumeInfo.setState(VolumeState.NON_EXISTENT);
+
+        failedVolumeMap.remove(dirPath);
+        LOG.debug("Removed Volume : {} from failed VolumeSet", dataDir);
-        LOG.warn("Volume: " + dataDir + " does not exist in " + "volumeMap.");
+        LOG.warn("Volume : {} does not exist in VolumeSet", dataDir);
-  /**
-   * Return an iterator over {@link VolumeSet#volumeList}.
-   */
-  public Iterator<VolumeInfo> getIterator() {
-    return volumeList.iterator();
-  }
-
-    return choosingPolicy.chooseVolume(volumeList, containerSize);
+    return choosingPolicy.chooseVolume(getVolumesList(), containerSize);
+  }
+
+  public void shutdown() {
+    for (VolumeInfo volumeInfo : volumeMap.values()) {
+      try {
+        volumeInfo.shutdown();
+      } catch (Exception e) {
+        LOG.error("Failed to shutdown volume : " + volumeInfo.getRootDir(), e);
+      }
+    }
-    return ImmutableList.copyOf(volumeList);
+    return ImmutableList.copyOf(volumeMap.values());
-    return ImmutableList.copyOf(failedVolumeList);
+    return ImmutableList.copyOf(failedVolumeMap.values());

MOV23 MOV31 UPD74 MOV21 INS83 INS39 INS42 INS8 UPD43 INS43 UPD42 INS70 UPD66 UPD66 UPD66 UPD66 MOV65 INS66 UPD66 UPD42 INS42 UPD66 UPD66 UPD66 MOV43 INS44 INS32 INS8 UPD42 INS32 MOV43 INS42 INS42 INS42 INS54 INS32 INS32 UPD42 UPD42 UPD42 UPD74 UPD42 MOV43 INS42 INS8 INS8 INS25 INS25 UPD42 MOV42 INS8 INS12 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD43 MOV21 INS25 MOV60 MOV21 MOV21 MOV21 MOV60 INS21 INS21 INS21 MOV21 MOV21 INS32 INS8 MOV8 MOV21 MOV21 INS32 INS8 MOV8 INS21 INS44 MOV8 UPD42 INS32 INS8 INS32 INS32 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS32 INS43 INS42 UPD42 UPD42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV21 UPD42 UPD42 INS42 UPD42 UPD42 INS45 UPD42 MOV42 INS42 INS42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS45 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 INS45 UPD42 INS43 INS59 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD45 DEL40 DEL26 DEL42 DEL42 DEL67 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL67 DEL65 DEL66 DEL66 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL8 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL32 DEL38 DEL40 DEL32 DEL21 DEL8 DEL25 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL8 DEL25 DEL45 DEL42 DEL45 DEL45 DEL27 DEL45 DEL45 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL74 DEL42 DEL32 DEL41 DEL8