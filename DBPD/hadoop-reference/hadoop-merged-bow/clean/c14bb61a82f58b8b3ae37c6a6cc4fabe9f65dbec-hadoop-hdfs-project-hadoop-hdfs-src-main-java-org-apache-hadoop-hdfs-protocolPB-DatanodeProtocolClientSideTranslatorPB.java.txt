Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1242635 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.proto.DatanodeProtocolProtos.StorageBlockReportProto;
+import org.apache.hadoop.hdfs.protocol.proto.DatanodeProtocolProtos.StorageReceivedDeletedBlocksProto;
+import org.apache.hadoop.hdfs.server.protocol.DatanodeStorage;
+import org.apache.hadoop.hdfs.server.protocol.StorageBlockReport;
+import org.apache.hadoop.hdfs.server.protocol.StorageReceivedDeletedBlocks;
+import org.apache.hadoop.hdfs.server.protocol.StorageReport;
-import org.apache.hadoop.hdfs.server.protocolR23Compatible.DatanodeWireProtocol;
+import org.apache.hadoop.ipc.ProtocolMetaInterface;
+import org.apache.hadoop.ipc.RpcClientUtil;
+import org.apache.hadoop.ipc.RpcPayloadHeader.RpcKind;
-public class DatanodeProtocolClientSideTranslatorPB implements DatanodeProtocol,
-    Closeable {
+public class DatanodeProtocolClientSideTranslatorPB implements
+    ProtocolMetaInterface, DatanodeProtocol, Closeable {
-  private final static RpcController NULL_CONTROLLER = null;
+  private final static RpcController NULL_CONTROLLER = null;
-        conf, NetUtils.getSocketFactory(conf, DatanodeWireProtocol.class));
+        conf, NetUtils.getSocketFactory(conf, DatanodeProtocolPB.class));
-  public DatanodeRegistration registerDatanode(DatanodeRegistration registration)
-      throws IOException {
-    RegisterDatanodeRequestProto req = RegisterDatanodeRequestProto
-        .newBuilder().setRegistration(PBHelper.convert(registration)).build();
+  public DatanodeRegistration registerDatanode(DatanodeRegistration registration,
+      DatanodeStorage[] storages) throws IOException {
+    RegisterDatanodeRequestProto.Builder builder = RegisterDatanodeRequestProto
+        .newBuilder().setRegistration(PBHelper.convert(registration));
+    for (DatanodeStorage s : storages) {
+      builder.addStorages(PBHelper.convert(s));
+    }
+    
-      resp = rpcProxy.registerDatanode(NULL_CONTROLLER, req);
+      resp = rpcProxy.registerDatanode(NULL_CONTROLLER, builder.build());
-      long capacity, long dfsUsed, long remaining, long blockPoolUsed,
-      int xmitsInProgress, int xceiverCount, int failedVolumes)
-      throws IOException {
-    HeartbeatRequestProto req = HeartbeatRequestProto.newBuilder()
-        .setRegistration(PBHelper.convert(registration)).setCapacity(capacity)
-        .setDfsUsed(dfsUsed).setRemaining(remaining)
-        .setBlockPoolUsed(blockPoolUsed).setXmitsInProgress(xmitsInProgress)
-        .setXceiverCount(xceiverCount).setFailedVolumes(failedVolumes).build();
+      StorageReport[] reports, int xmitsInProgress, int xceiverCount,
+      int failedVolumes) throws IOException {
+    HeartbeatRequestProto.Builder builder = HeartbeatRequestProto.newBuilder()
+        .setRegistration(PBHelper.convert(registration))
+        .setXmitsInProgress(xmitsInProgress).setXceiverCount(xceiverCount)
+        .setFailedVolumes(failedVolumes);
+    for (StorageReport r : reports) {
+      builder.addReports(PBHelper.convert(r));
+    }
+    
-      resp = rpcProxy.sendHeartbeat(NULL_CONTROLLER, req);
+      resp = rpcProxy.sendHeartbeat(NULL_CONTROLLER, builder.build());
-      String poolId, long[] blocks) throws IOException {
+      String poolId, StorageBlockReport[] reports) throws IOException {
-    if (blocks != null) {
+    
+    for (StorageBlockReport r : reports) {
+      StorageBlockReportProto.Builder reportBuilder = StorageBlockReportProto
+          .newBuilder().setStorageID(r.getStorageID());
+      long[] blocks = r.getBlocks();
-        builder.addBlocks(blocks[i]);
+        reportBuilder.addBlocks(blocks[i]);
+      builder.addReports(reportBuilder.build());
-    BlockReportRequestProto req = builder.build();
-      resp = rpcProxy.blockReport(NULL_CONTROLLER, req);
+      resp = rpcProxy.blockReport(NULL_CONTROLLER, builder.build());
-      String poolId, ReceivedDeletedBlockInfo[] receivedAndDeletedBlocks)
+      String poolId, StorageReceivedDeletedBlocks[] receivedAndDeletedBlocks)
-    if (receivedAndDeletedBlocks != null) {
-      for (int i = 0; i < receivedAndDeletedBlocks.length; i++) {
-        builder.addBlocks(PBHelper.convert(receivedAndDeletedBlocks[i]));
+    for (StorageReceivedDeletedBlocks storageBlock : receivedAndDeletedBlocks) {
+      StorageReceivedDeletedBlocksProto.Builder repBuilder = 
+          StorageReceivedDeletedBlocksProto.newBuilder();
+      repBuilder.setStorageID(storageBlock.getStorageID());
+      for (ReceivedDeletedBlockInfo rdBlock : storageBlock.getBlocks()) {
+        repBuilder.addBlocks(PBHelper.convert(rdBlock));
+      builder.addBlocks(repBuilder.build());
-    BlockReceivedAndDeletedRequestProto req = builder.build();
-      rpcProxy.blockReceivedAndDeleted(NULL_CONTROLLER, req);
+      rpcProxy.blockReceivedAndDeleted(NULL_CONTROLLER, builder.build());
+
+  @Override // ProtocolMetaInterface
+  public boolean isMethodSupported(String methodName)
+      throws IOException {
+    return RpcClientUtil.isMethodSupported(rpcProxy, DatanodeProtocolPB.class,
+        RpcKind.RPC_PROTOCOL_BUFFER,
+        RPC.getProtocolVersion(DatanodeProtocolPB.class), methodName);
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS31 INS31 INS42 MOV29 INS44 INS44 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 INS44 MOV43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS5 INS42 INS70 INS5 UPD42 MOV42 INS70 INS5 INS42 INS70 INS54 INS5 INS42 MOV60 INS70 MOV54 INS42 INS43 INS42 UPD42 MOV42 INS41 INS43 INS85 UPD43 INS44 INS42 INS8 INS43 INS85 UPD43 INS44 INS42 INS8 INS43 INS85 INS44 INS42 MOV8 INS8 MOV12 INS43 INS85 INS44 INS42 INS8 INS42 INS32 INS42 INS40 INS42 MOV32 INS43 INS42 INS21 INS42 INS40 INS42 MOV32 INS43 INS42 INS21 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS42 INS43 INS42 INS60 INS21 INS70 INS21 INS42 INS42 INS42 INS57 INS40 INS32 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS42 INS32 UPD42 MOV42 INS43 INS59 MOV5 INS59 INS32 INS7 INS42 INS43 INS59 INS32 MOV44 INS32 INS8 INS32 INS32 INS43 INS42 UPD42 MOV42 INS57 UPD43 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS42 INS32 MOV43 UPD42 INS42 INS42 MOV21 INS42 INS42 INS32 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS43 UPD42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 MOV32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 UPD42 INS42 DEL42 DEL42 DEL42 DEL32 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL33 DEL27 DEL25 DEL43 DEL42 DEL59 DEL60 DEL85 DEL5 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL42 DEL33 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31