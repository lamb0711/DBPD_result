HDFS-5207. In BlockPlacementPolicy.chooseTarget(..), change the writer and the excludedNodes parameter types respectively to Node and Set.  Contributed by Junping Du


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523875 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
+import java.util.HashSet;
-import java.util.Map;
-                                    DatanodeDescriptor writer,
+                                    Node writer,
-                                    Map<Node, Node> excludedNodes,
+                                    Set<Node> excludedNodes,
-      DatanodeDescriptor writer,
-      Map<Node, Node> excludedNodes,
+      Node writer,
+      Set<Node> excludedNodes,
-      Map<Node, Node> favoriteAndExcludedNodes = excludedNodes == null ?
-          new HashMap<Node, Node>() : new HashMap<Node, Node>(excludedNodes);
+      Set<Node> favoriteAndExcludedNodes = excludedNodes == null ?
+          new HashSet<Node>() : new HashSet<Node>(excludedNodes);
-        favoriteAndExcludedNodes.put(target, target);
+        favoriteAndExcludedNodes.add(target);
-      if (results.size() < numOfReplicas) {        
+      if (results.size() < numOfReplicas) {
-                                    DatanodeDescriptor writer,
+                                    Node writer,
-                                    Map<Node, Node> excludedNodes,
+                                    Set<Node> excludedNodes,
-      excludedNodes = new HashMap<Node, Node>();
+      excludedNodes = new HashSet<Node>();
-      writer=null;
+      writer = null;
-    DatanodeDescriptor localNode = chooseTarget(numOfReplicas, writer,
+    Node localNode = chooseTarget(numOfReplicas, writer,
-  /* choose <i>numOfReplicas</i> from all data nodes */
-  private DatanodeDescriptor chooseTarget(int numOfReplicas,
-                                          DatanodeDescriptor writer,
-                                          Map<Node, Node> excludedNodes,
+  /**
+   * choose <i>numOfReplicas</i> from all data nodes
+   * @param numOfReplicas additional number of replicas wanted
+   * @param writer the writer's machine, could be a non-DatanodeDescriptor node
+   * @param excludedNodes datanodes that should not be considered as targets
+   * @param blocksize size of the data to be written
+   * @param maxNodesPerRack max nodes allowed per rack
+   * @param results the target nodes already chosen
+   * @param avoidStaleNodes avoid stale nodes in replica choosing
+   * @return local node of writer (not chosen node)
+   */
+  private Node chooseTarget(int numOfReplicas,
+                                          Node writer,
+                                          Set<Node> excludedNodes,
-    if (writer == null && !newBlock) {
+    if ((writer == null || !(writer instanceof DatanodeDescriptor)) && !newBlock) {
-    final Map<Node, Node> oldExcludedNodes = avoidStaleNodes ? 
-        new HashMap<Node, Node>(excludedNodes) : null;
+    final Set<Node> oldExcludedNodes = avoidStaleNodes ? 
+        new HashSet<Node>(excludedNodes) : null;
-          oldExcludedNodes.put(node, node);
+          oldExcludedNodes.add(node);
-  protected DatanodeDescriptor chooseLocalNode(DatanodeDescriptor localMachine,
-                                             Map<Node, Node> excludedNodes,
+  protected DatanodeDescriptor chooseLocalNode(Node localMachine,
+                                             Set<Node> excludedNodes,
-    if (preferLocalNode) {
+    if (preferLocalNode && localMachine instanceof DatanodeDescriptor) {
+      DatanodeDescriptor localDatanode = (DatanodeDescriptor) localMachine;
-      Node oldNode = excludedNodes.put(localMachine, localMachine);
-      if (oldNode == null) { // was not in the excluded list
-        if (addIfIsGoodTarget(localMachine, excludedNodes, blocksize,
+      if (excludedNodes.add(localMachine)) { // was not in the excluded list
+        if (addIfIsGoodTarget(localDatanode, excludedNodes, blocksize,
-          return localMachine;
+          return localDatanode;
-      Map<Node, Node> excludedNodes) {
-    Node node = excludedNodes.put(localMachine, localMachine);
-    return node == null?1:0;
+      Set<Node> excludedNodes) {
+    return excludedNodes.add(localMachine) ? 1 : 0;
-  protected DatanodeDescriptor chooseLocalRack(DatanodeDescriptor localMachine,
-                                             Map<Node, Node> excludedNodes,
+  protected DatanodeDescriptor chooseLocalRack(Node localMachine,
+                                             Set<Node> excludedNodes,
-                                Map<Node, Node> excludedNodes,
+                                Set<Node> excludedNodes,
-      Map<Node, Node> excludedNodes,
+      Set<Node> excludedNodes,
-                            Map<Node, Node> excludedNodes,
+                            Set<Node> excludedNodes,
-        scope, excludedNodes.keySet());
+        scope, excludedNodes);
-      Node oldNode = excludedNodes.put(chosenNode, chosenNode);
-      if (oldNode == null) {
+      if (excludedNodes.add(chosenNode)) { //was not in the excluded list
-   * update the excluded node map.
+   * update the set of excluded nodes.
-   *         otherwise, return the number of excluded nodes added to the map.
+   *         otherwise, return the number of nodes added to excludedNodes set.
-      Map<Node, Node> excludedNodes,
+      Set<Node> excludedNodes,
-      List<DatanodeDescriptor> results,                           
+      List<DatanodeDescriptor> results,
-  private DatanodeDescriptor[] getPipeline(DatanodeDescriptor writer,
+  private DatanodeDescriptor[] getPipeline(Node writer,

UPD40 INS29 MOV43 MOV43 UPD74 MOV43 UPD74 MOV43 UPD74 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV43 UPD74 MOV43 UPD74 UPD74 INS41 MOV43 UPD74 UPD74 UPD74 UPD74 UPD74 MOV43 UPD43 UPD43 UPD43 MOV43 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 UPD43 UPD74 UPD43 INS27 UPD43 INS16 UPD43 UPD43 UPD43 UPD43 UPD66 UPD66 UPD43 UPD42 UPD42 UPD42 UPD42 INS36 UPD43 MOV43 UPD42 INS42 INS62 UPD42 INS32 MOV34 MOV34 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 INS27 UPD42 INS42 MOV43 MOV43 INS32 MOV42 UPD42 MOV42 MOV42 MOV42 INS32 UPD43 MOV43 MOV27 INS38 UPD74 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD74 INS36 UPD43 MOV43 MOV43 INS42 UPD74 UPD74 UPD42 UPD43 INS62 UPD42 UPD43 MOV43 UPD43 MOV43 UPD42 INS42 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL16 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43