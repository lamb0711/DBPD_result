svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535 back to trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574259 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.PrintStream;
+import org.apache.hadoop.hdfs.protocol.DatanodeLocalInfo;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants.RollingUpgradeAction;
+import org.apache.hadoop.hdfs.protocol.RollingUpgradeInfo;
+import com.google.common.base.Preconditions;
+
-  
+
+  private static class RollingUpgradeCommand {
+    static final String NAME = "rollingUpgrade";
+    static final String USAGE = "-"+NAME+" [<query|prepare|finalize>]";
+    static final String DESCRIPTION = USAGE + ":\n"
+        + "     query: query the current rolling upgrade status.\n"
+        + "   prepare: prepare a new rolling upgrade."
+        + "  finalize: finalize the current rolling upgrade.";
+
+    /** Check if a command is the rollingUpgrade command
+     * 
+     * @param cmd A string representation of a command starting with "-"
+     * @return true if this is a clrQuota command; false otherwise
+     */
+    static boolean matches(String cmd) {
+      return ("-"+NAME).equals(cmd); 
+    }
+
+    private static void printMessage(RollingUpgradeInfo info,
+        PrintStream out) {
+      if (info != null && info.isStarted()) {
+        if (!info.createdRollbackImages()) {
+          out.println(
+              "Preparing for upgrade. Data is being saved for rollback."
+              + "\nRun \"dfsadmin -rollingUpgrade query\" to check the status"
+              + "\nfor proceeding with rolling upgrade");
+            out.println(info);
+        } else if (!info.isFinalized()) {
+          out.println("Proceed with rolling upgrade:");
+          out.println(info);
+        } else {
+          out.println("Rolling upgrade is finalized.");
+          out.println(info);
+        }
+      } else {
+        out.println("There is no rolling upgrade in progress.");
+      }
+    }
+
+    static int run(DistributedFileSystem dfs, String[] argv, int idx) throws IOException {
+      final RollingUpgradeAction action = RollingUpgradeAction.fromString(
+          argv.length >= 2? argv[1]: "");
+      if (action == null) {
+        throw new IllegalArgumentException("Failed to covert \"" + argv[1]
+            +"\" to " + RollingUpgradeAction.class.getSimpleName());
+      }
+
+      System.out.println(action + " rolling upgrade ...");
+
+      final RollingUpgradeInfo info = dfs.rollingUpgrade(action);
+      switch(action){
+      case QUERY:
+        break;
+      case PREPARE:
+        Preconditions.checkState(info.isStarted());
+        break;
+      case FINALIZE:
+        Preconditions.checkState(info.isFinalized());
+        break;
+      }
+      printMessage(info, System.out);
+      return 0;
+    }
+  }
+
+      "\t[-finalizeUpgrade]\n" +
+      "\t[" + RollingUpgradeCommand.USAGE +"]\n" +
-      "\t[refreshSuperUserGroupsConfiguration]\n" +
+      "\t[-refreshSuperUserGroupsConfiguration]\n" +
+      "\t[-shutdownDatanode <datanode_host:ipc_port> [upgrade]]\n" +
+      "\t[-getDatanodeInfo <datanode_host:ipc_port>\n" +
+
+    String shutdownDatanode = "-shutdownDatanode <datanode_host:ipc_port> [upgrade]\n"
+        + "\tSubmit a shutdown request for the given datanode. If an optional\n"
+        + "\t\"upgrade\" argument is specified, clients accessing the datanode\n"
+        + "\twill be advised to wait for it to restart and the fast start-up\n"
+        + "\tmode will be enabled. When the restart does not happen in time,\n"
+        + "\tclients will timeout and ignore the datanode. In such case, the\n"
+        + "\tfast start-up mode will also be disabled.\n";
+
+    String getDatanodeInfo = "-getDatanodeInfo <datanode_host:ipc_port>\n"
+        + "\tGet the information about the given datanode. This command can\n"
+        + "\tbe used for checking if a datanode is alive.\n";
+    } else if (RollingUpgradeCommand.matches("-"+cmd)) {
+      System.out.println(RollingUpgradeCommand.DESCRIPTION);
+    } else if ("shutdownDatanode".equalsIgnoreCase(cmd)) {
+      System.out.println(shutdownDatanode);
+    } else if ("getDatanodeInfo".equalsIgnoreCase(cmd)) {
+      System.out.println(getDatanodeInfo);
+      System.out.println(RollingUpgradeCommand.DESCRIPTION);
+      System.out.println(shutdownDatanode);
+      System.out.println(getDatanodeInfo);
+    } else if (RollingUpgradeCommand.matches(cmd)) {
+      System.err.println("Usage: java DFSAdmin"
+          + " [" + RollingUpgradeCommand.USAGE+"]");
+      System.err.println("           ["+RollingUpgradeCommand.USAGE+"]");
+      System.err.println("           [-shutdownDatanode <datanode_host:ipc_port> [upgrade]]");
+      System.err.println("           [-getDatanodeInfo <datanode_host:ipc_port>]");
+    } else if (RollingUpgradeCommand.matches(cmd)) {
+      if (argv.length < 1 || argv.length > 2) {
+        printUsage(cmd);
+        return exitCode;
+      }
+    } else if ("-shutdownDatanode".equals(cmd)) {
+      if ((argv.length != 2) && (argv.length != 3)) {
+        printUsage(cmd);
+        return exitCode;
+      }
+    } else if ("-getDatanodeInfo".equals(cmd)) {
+      if (argv.length != 2) {
+        printUsage(cmd);
+        return exitCode;
+      }
+      } else if (RollingUpgradeCommand.matches(cmd)) {
+        exitCode = RollingUpgradeCommand.run(getDFS(), argv, i);
+      } else if ("-shutdownDatanode".equals(cmd)) {
+        exitCode = shutdownDatanode(argv, i);
+      } else if ("-getDatanodeInfo".equals(cmd)) {
+        exitCode = getDatanodeInfo(argv, i);
+  private int shutdownDatanode(String[] argv, int i) throws IOException {
+    final String dn = argv[i];
+    ClientDatanodeProtocol dnProxy = getDataNodeProxy(dn);
+    boolean upgrade = false;
+    if (argv.length-1 == i+1) {
+      if ("upgrade".equalsIgnoreCase(argv[i+1])) {
+        upgrade = true;
+      } else {
+        printUsage("-shutdownDatanode");
+        return -1;
+      }
+    }
+    dnProxy.shutdownDatanode(upgrade);
+    System.out.println("Submitted a shutdown request to datanode " + dn);
+    return 0;
+  }
+
+  private int getDatanodeInfo(String[] argv, int i) throws IOException {
+    ClientDatanodeProtocol dnProxy = getDataNodeProxy(argv[i]);
+    try {
+      DatanodeLocalInfo dnInfo = dnProxy.getDatanodeInfo();
+      System.out.println(dnInfo.getDatanodeLocalReport());
+    } catch (IOException ioe) {
+      System.err.println("Datanode unreachable.");
+      return -1;
+    }
+    return 0;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS55 INS31 INS31 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS60 INS60 INS5 INS42 INS39 INS42 INS42 INS60 INS60 INS60 INS25 INS21 INS21 INS41 INS5 INS42 INS39 INS42 INS42 INS60 INS54 INS41 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS27 INS65 INS65 INS65 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS5 INS42 INS39 INS42 INS42 INS60 INS25 INS21 INS60 INS50 INS21 INS41 INS43 INS59 INS43 INS59 INS43 INS85 INS83 INS43 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS32 INS32 INS34 INS43 INS85 INS43 INS59 INS8 INS12 INS34 INS45 INS42 INS45 INS42 INS45 INS45 INS45 INS45 INS66 INS42 INS66 INS66 INS42 INS32 INS42 INS42 INS27 INS8 INS8 INS42 INS43 INS85 INS83 INS43 INS59 INS27 INS8 INS32 INS83 INS43 INS59 INS42 INS49 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS32 INS34 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS9 INS27 INS27 INS25 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS32 INS60 INS21 INS44 INS8 INS36 INS42 INS42 INS27 INS32 INS25 INS21 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS40 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS45 INS45 INS40 INS45 UPD45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS40 INS34 INS42 INS34 INS32 INS8 INS8 INS45 INS42 INS42 INS2 INS43 INS59 INS32 INS43 INS42 INS21 INS41 INS27 INS42 INS33 INS42 INS42 INS38 INS8 INS25 INS32 INS42 INS42 INS16 INS14 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS45 INS42 INS2 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS32 INS38 INS45 INS42 INS32 INS21 INS21 INS38 INS8 INS8 INS42 INS42 INS45 INS27 INS2 INS45 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS7 INS32 INS38 INS42 INS42 INS42 INS42 INS40 INS42 INS45 INS34 INS42 INS42 INS32 INS32 INS32 INS21 INS21 INS21 INS21 INS40 INS34 INS42 INS34 INS42 INS45 INS2 INS45 INS32 INS42 INS34 INS42 INS9 INS42 INS45 INS34 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS34 INS57 INS42 INS25 INS45 INS45 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS32 INS8 MOV25 INS42 INS42 INS42 INS27 INS21 INS25 INS25 INS45 INS42 INS32 INS32 INS8 MOV25 INS32 INS8 MOV25 INS40 INS42 INS40 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS25 INS25 INS32 INS27 INS8 INS32 INS8 MOV25 INS40 INS42 INS27 INS27 INS27 INS21 INS41 INS42 INS42 INS42 INS21 INS27 INS40 INS45 INS40 INS34 INS40 INS34 INS32 INS42 INS7 INS45 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV8 INS25 INS42 MOV32 MOV8 INS25 INS32 INS8 INS25 INS45 INS42 INS42 INS25 INS32 INS8 INS27 INS8 INS45 INS42 INS42 INS25 INS36 INS36 INS21 INS41 INS27 INS8 INS27 INS27 INS32 INS42 INS40 INS34 INS21 INS41 INS25 INS40 INS34 INS40 INS34 INS42 INS42 INS32 INS42 INS32 INS8 INS25 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS21 INS32 INS8 MOV25 INS32 INS32 INS32 INS25 INS32 INS45 INS42 INS42 INS21 INS40 INS42 INS27 INS40 INS42 INS45 INS40 INS42 INS45 INS32 INS8 INS25 INS40 INS42 INS42 INS32 INS21 INS21 INS21 INS45 INS40 INS45 INS45 INS42 INS42 INS21 INS32 INS8 MOV25 INS40 INS42 INS42 INS32 INS32 INS32 INS7 INS45 INS42 INS42 INS21 INS40 INS42 INS40 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL25