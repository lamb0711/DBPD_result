Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

+import java.util.ArrayList;
+import org.apache.hadoop.security.AuthenticationFilterInitializer;
+import org.apache.hadoop.yarn.server.timeline.TimelineDataManager;
-  protected ApplicationHistoryClientService ahsClientService;
-  protected ApplicationHistoryManager historyManager;
-  protected TimelineStore timelineStore;
-  protected TimelineDelegationTokenSecretManagerService secretManagerService;
-  protected TimelineACLsManager timelineACLsManager;
-  protected WebApp webApp;
+  private ApplicationHistoryClientService ahsClientService;
+  private ApplicationHistoryManager historyManager;
+  private TimelineStore timelineStore;
+  private TimelineDelegationTokenSecretManagerService secretManagerService;
+  private TimelineDataManager timelineDataManager;
+  private WebApp webApp;
-    historyManager = createApplicationHistory();
-    ahsClientService = createApplicationHistoryClientService(historyManager);
-    addService(ahsClientService);
-    addService((Service) historyManager);
+    // init timeline services first
-    timelineACLsManager = createTimelineACLsManager(conf);
+    timelineDataManager = createTimelineDataManager(conf);
+
+    // init generic history service afterwards
+    historyManager = createApplicationHistoryManager(conf);
+    ahsClientService = createApplicationHistoryClientService(historyManager);
+    addService(ahsClientService);
+    addService((Service) historyManager);
-  public ApplicationHistoryClientService getClientService() {
+  ApplicationHistoryClientService getClientService() {
-  protected ApplicationHistoryClientService
-      createApplicationHistoryClientService(
-          ApplicationHistoryManager historyManager) {
-    return new ApplicationHistoryClientService(historyManager);
+  /**
+   * @return ApplicationTimelineStore
+   */
+  @Private
+  @VisibleForTesting
+  public TimelineStore getTimelineStore() {
+    return timelineStore;
-  protected ApplicationHistoryManager createApplicationHistory() {
-    return new ApplicationHistoryManagerImpl();
-  }
-
-  protected ApplicationHistoryManager getApplicationHistory() {
+  @Private
+  @VisibleForTesting
+  ApplicationHistoryManager getApplicationHistoryManager() {
-  protected ApplicationHistoryManager createApplicationHistoryManager(
+  private ApplicationHistoryClientService
+      createApplicationHistoryClientService(
+          ApplicationHistoryManager historyManager) {
+    return new ApplicationHistoryClientService(historyManager);
+  }
+
+  private ApplicationHistoryManager createApplicationHistoryManager(
-  protected TimelineStore createTimelineStore(
+  private TimelineStore createTimelineStore(
-  protected TimelineDelegationTokenSecretManagerService
+  private TimelineDelegationTokenSecretManagerService
-  protected TimelineACLsManager createTimelineACLsManager(Configuration conf) {
-    return new TimelineACLsManager(conf);
+  private TimelineDataManager createTimelineDataManager(Configuration conf) {
+    return new TimelineDataManager(
+        timelineStore, new TimelineACLsManager(conf));
-  protected void startWebApp() {
+  private void startWebApp() {
+    boolean modifiedInitialiers = false;
+
-        initializers == null || initializers.length() == 0 ? "" : ","
-            + initializers;
-    if (!initializers.contains(
-        TimelineAuthenticationFilterInitializer.class.getName())) {
-      conf.set("hadoop.http.filter.initializers",
-          TimelineAuthenticationFilterInitializer.class.getName()
-              + initializers);
+        initializers == null || initializers.length() == 0 ? "" : initializers;
+
+    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class
+      .getName())) {
+      initializers =
+          TimelineAuthenticationFilterInitializer.class.getName() + ","
+              + initializers;
+      modifiedInitialiers = true;
-    String bindAddress = WebAppUtils.getAHSWebAppURLWithoutScheme(conf);
+
+    String[] parts = initializers.split(",");
+    ArrayList<String> target = new ArrayList<String>();
+    for (String filterInitializer : parts) {
+      filterInitializer = filterInitializer.trim();
+      if (filterInitializer.equals(AuthenticationFilterInitializer.class
+        .getName())) {
+        modifiedInitialiers = true;
+        continue;
+      }
+      target.add(filterInitializer);
+    }
+    String actualInitializers =
+        org.apache.commons.lang.StringUtils.join(target, ",");
+    if (modifiedInitialiers) {
+      conf.set("hadoop.http.filter.initializers", actualInitializers);
+    }
+    String bindAddress = WebAppUtils.getWebAppBindURL(conf,
+                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,
+                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));
-      ahsWebApp.setTimelineStore(timelineStore);
-      ahsWebApp.setTimelineACLsManager(timelineACLsManager);
+      ahsWebApp.setTimelineDataManager(timelineDataManager);
-  /**
-   * @return ApplicationTimelineStore
-   */
-  @Private
-  @VisibleForTesting
-  public TimelineStore getTimelineStore() {
-    return timelineStore;
-  }

INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 UPD83 UPD83 UPD83 UPD83 UPD83 UPD43 UPD83 MOV21 MOV21 MOV21 MOV21 INS78 INS78 UPD42 UPD83 UPD83 UPD83 UPD83 UPD83 UPD43 UPD42 UPD83 UPD42 UPD42 INS42 INS42 UPD42 INS60 INS60 INS60 INS70 INS60 INS25 INS14 INS39 INS59 INS5 INS59 INS74 INS59 INS44 INS42 INS8 INS43 INS59 INS42 INS8 UPD42 UPD42 INS43 INS42 MOV14 INS42 INS9 INS21 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS25 INS21 INS42 INS42 INS32 INS21 INS32 UPD42 INS42 UPD42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS45 INS42 INS42 INS74 INS42 INS7 INS32 INS8 INS32 INS40 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS40 MOV32 INS42 MOV27 INS42 INS9 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS21 INS18 INS42 INS42 INS42 INS42 INS42 INS45 INS42 UPD42 UPD42 INS45 INS42 INS42 INS42 INS42 INS57 INS42 INS7 INS43 INS42 INS9 INS42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL41 DEL8 DEL31 DEL83 DEL45 DEL42 DEL27 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21