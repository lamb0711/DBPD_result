Merge branch 'HDFS-6584' into trunk

+import org.apache.hadoop.hdfs.BlockStoragePolicy;
-        ? dir.getFileInfo(path, resolveSymlink, false) : null;
+        ? dir.getFileInfo(path, resolveSymlink, false, false) : null;
+  /**
+   * Set the storage policy for a file or a directory.
+   *
+   * @param src file/directory path
+   * @param policyName storage policy name
+   */
+  void setStoragePolicy(String src, final String policyName)
+      throws IOException {
+    try {
+      setStoragePolicyInt(src, policyName);
+    } catch (AccessControlException e) {
+      logAuditEvent(false, "setStoragePolicy", src);
+      throw e;
+    }
+  }
+
+  private void setStoragePolicyInt(String src, final String policyName)
+      throws IOException {
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.WRITE);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    waitForLoadingFSImage();
+    HdfsFileStatus fileStat;
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode("Cannot set storage policy for " + src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+
+      // get the corresponding policy and make sure the policy name is valid
+      BlockStoragePolicy policy = blockManager.getStoragePolicy(policyName);
+      if (policy == null) {
+        throw new HadoopIllegalArgumentException(
+            "Cannot find a block policy with the name " + policyName);
+      }
+      dir.setStoragePolicy(src, policy.getId());
+      getEditLog().logSetStoragePolicy(src, policy.getId());
+      fileStat = getAuditFileInfo(src, false);
+    } finally {
+      writeUnlock();
+    }
+
+    getEditLog().logSync();
+    logAuditEvent(true, "setStoragePolicy", src, null, fileStat);
+  }
+
-              FSDirectory.isReservedRawName(srcArg));
+              FSDirectory.isReservedRawName(srcArg), false);
-    long blockSize;
-    int replication;
+    final long blockSize;
+    final int replication;
+    final byte storagePolicyID;
+      storagePolicyID = pendingFile.getStoragePolicyID();
-    final DatanodeStorageInfo targets[] = getBlockManager().chooseTarget( 
-        src, replication, clientNode, excludedNodes, blockSize, favoredNodes);
+    final DatanodeStorageInfo targets[] = getBlockManager().chooseTarget4NewBlock( 
+        src, replication, clientNode, excludedNodes, blockSize, favoredNodes,
+        storagePolicyID);
+    final byte storagePolicyID;
+      storagePolicyID = file.getStoragePolicyID();
-    final DatanodeStorageInfo[] targets = blockManager.getBlockPlacementPolicy(
-        ).chooseTarget(src, numAdditionalNodes, clientnode, chosen, true,
-            // TODO: get storage type from the file
-        excludes, preferredblocksize, StorageType.DEFAULT);
+    final DatanodeStorageInfo[] targets = blockManager.chooseTarget4AdditionalDatanode(
+        src, numAdditionalNodes, clientnode, chosen, 
+        excludes, preferredblocksize, storagePolicyID);
+      boolean isSuperUser = true;
+        isSuperUser = pc.isSuperUser();
-          FSDirectory.isReservedRawName(srcArg));
+          FSDirectory.isReservedRawName(srcArg), isSuperUser);
-   * @param src The string representation of the path to the file
+   * @param srcArg The string representation of the path to the file
-      
+
+      boolean isSuperUser = true;
+        isSuperUser = pc.isSuperUser();
-      dl = dir.getListing(src, startAfter, needLocation);
+      dl = dir.getListing(src, startAfter, needLocation, isSuperUser);
-   * @param path
-   * @param target
-   * @param dirPerms
-   * @param createParent
-   * @param logRetryCache
-   * @param dir

INS26 INS40 INS31 INS31 INS29 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS43 INS42 INS83 INS43 INS42 INS42 INS54 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS21 INS60 INS21 INS60 INS21 INS54 INS21 INS21 INS60 INS60 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS8 INS12 INS42 INS42 INS32 INS32 INS5 INS59 INS32 INS43 INS59 INS32 INS8 INS8 INS32 INS32 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS59 UPD42 INS21 INS44 INS8 INS42 INS42 INS40 INS39 INS85 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS60 INS25 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS9 INS45 INS42 INS33 INS42 INS42 INS21 INS42 INS21 INS60 INS60 INS9 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS32 INS32 INS7 INS43 INS59 INS27 INS8 INS32 INS32 INS7 INS32 INS42 INS7 UPD42 INS42 INS7 MOV42 UPD42 INS42 INS39 INS59 INS39 INS59 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS9 INS21 INS42 INS9 INS21 INS42 INS9 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS7 INS42 INS7 INS42 INS43 INS27 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS9 DEL42 DEL32 DEL9 DEL40 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65