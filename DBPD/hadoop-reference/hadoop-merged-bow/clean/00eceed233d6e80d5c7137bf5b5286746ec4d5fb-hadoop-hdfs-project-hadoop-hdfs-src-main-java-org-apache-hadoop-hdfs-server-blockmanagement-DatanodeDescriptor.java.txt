HDFS-12570: [SPS]: Refactor Co-ordinator datanode logic to track the block storage movements. Contributed by Rakesh R.

-import org.apache.hadoop.hdfs.server.namenode.BlockStorageMovementInfosBatch;
-  private final Queue<BlockStorageMovementInfosBatch> storageMovementBlocks =
+  private final Queue<BlockMovingInfo> storageMovementBlocks =
-   * @param trackID
-   *          - unique identifier which will be used for tracking the given set
-   *          of blocks movement completion.
-   * @param storageMismatchedBlocks
-   *          - storage mismatched block infos
+   * @param blkMovingInfo
+   *          - storage mismatched block info
-  public void addBlocksToMoveStorage(long trackID,
-      List<BlockMovingInfo> storageMismatchedBlocks) {
+  public void addBlocksToMoveStorage(BlockMovingInfo blkMovingInfo) {
-      storageMovementBlocks.offer(
-          new BlockStorageMovementInfosBatch(trackID, storageMismatchedBlocks));
+      storageMovementBlocks.offer(blkMovingInfo);
-   * @return block infos which needs to move its storage locations. This returns
-   *         list of blocks under one trackId.
+   * Return the number of blocks queued up for movement.
-  public BlockStorageMovementInfosBatch getBlocksToMoveStorages() {
+  public int getNumberOfBlocksToMoveStorages() {
+    return storageMovementBlocks.size();
+  }
+
+  /**
+   * Get the blocks to move to satisfy the storage media type.
+   *
+   * @param numBlocksToMoveTasks
+   *          total number of blocks which will be send to this datanode for
+   *          block movement.
+   *
+   * @return block infos which needs to move its storage locations.
+   */
+  public BlockMovingInfo[] getBlocksToMoveStorages(int numBlocksToMoveTasks) {
-      // TODO: Presently returning the list of blocks under one trackId.
-      // Need to limit the list of items into small batches with in trackId
-      // itself if blocks are many(For example: a file contains many blocks).
-      return storageMovementBlocks.poll();
+      List<BlockMovingInfo> blockMovingInfos = new ArrayList<>();
+      for (; !storageMovementBlocks.isEmpty()
+          && numBlocksToMoveTasks > 0; numBlocksToMoveTasks--) {
+        blockMovingInfos.add(storageMovementBlocks.poll());
+      }
+      BlockMovingInfo[] blkMoveArray = new BlockMovingInfo[blockMovingInfos
+          .size()];
+      blkMoveArray = blockMovingInfos.toArray(blkMoveArray);
+      if (blkMoveArray.length > 0) {
+        return blkMoveArray;
+      }
+      return null;

INS31 UPD74 INS29 INS83 INS39 INS42 INS8 INS5 INS44 UPD43 INS43 INS42 INS65 INS41 INS65 INS65 INS43 INS85 INS39 INS42 UPD42 UPD42 UPD66 INS42 INS66 INS32 INS66 INS42 INS66 INS66 UPD66 UPD42 MOV42 INS8 INS42 INS42 INS60 INS24 INS60 INS21 INS25 INS41 MOV74 INS59 INS27 INS37 MOV8 INS5 INS59 INS7 INS27 INS8 INS33 INS42 INS42 INS14 INS38 INS27 INS42 INS21 INS43 INS85 INS42 INS3 INS42 INS32 INS40 INS34 INS41 INS74 INS32 INS42 INS34 INS32 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 MOV32 INS43 INS85 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL66 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL66 DEL43 DEL41