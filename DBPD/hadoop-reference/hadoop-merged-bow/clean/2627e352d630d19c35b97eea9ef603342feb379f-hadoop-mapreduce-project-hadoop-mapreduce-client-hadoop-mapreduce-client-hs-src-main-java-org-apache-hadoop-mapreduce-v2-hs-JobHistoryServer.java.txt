MAPREDUCE-5332. Support token-preserving restart of history server. Contributed by Jason Lowe


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527015 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.mapreduce.v2.hs.HistoryServerStateStoreService.HistoryServerState;
+import org.apache.hadoop.service.AbstractService;
+  private HistoryServerStateStoreService stateStore;
+
+  // utility class to start and stop secret manager as part of service
+  // framework and implement state recovery for secret manager on startup
+  private class HistoryServerSecretManagerService
+      extends AbstractService {
+
+    public HistoryServerSecretManagerService() {
+      super(HistoryServerSecretManagerService.class.getName());
+    }
+
+    @Override
+    protected void serviceStart() throws Exception {
+      boolean recoveryEnabled = getConfig().getBoolean(
+          JHAdminConfig.MR_HS_RECOVERY_ENABLE,
+          JHAdminConfig.DEFAULT_MR_HS_RECOVERY_ENABLE);
+      if (recoveryEnabled) {
+        assert stateStore.isInState(STATE.STARTED);
+        HistoryServerState state = stateStore.loadState();
+        jhsDTSecretManager.recover(state);
+      }
+
+      try {
+        jhsDTSecretManager.startThreads();
+      } catch(IOException io) {
+        LOG.error("Error while starting the Secret Manager threads", io);
+        throw io;
+      }
+
+      super.serviceStart();
+    }
+
+    @Override
+    protected void serviceStop() throws Exception {
+      if (jhsDTSecretManager != null) {
+        jhsDTSecretManager.stopThreads();
+      }
+      super.serviceStop();
+    }
+  }
-    this.jhsDTSecretManager = createJHSSecretManager(conf);
+    stateStore = createStateStore(conf);
+    this.jhsDTSecretManager = createJHSSecretManager(conf, stateStore);
+    addService(stateStore);
+    addService(new HistoryServerSecretManagerService());
-      Configuration conf) {
+      Configuration conf, HistoryServerStateStoreService store) {
-        tokenMaxLifetime, tokenRenewInterval, 3600000);
+        tokenMaxLifetime, tokenRenewInterval, 3600000, store);
-  
+
+  protected HistoryServerStateStoreService createStateStore(
+      Configuration conf) {
+    return HistoryServerStateStoreServiceFactory.getStore(conf);
+  }
+
-    try {
-      jhsDTSecretManager.startThreads();
-    } catch(IOException io) {
-      LOG.error("Error while starting the Secret Manager threads", io);
-      throw io;
-    }
-    if (jhsDTSecretManager != null) {
-      jhsDTSecretManager.stopThreads();
-    }

INS26 INS26 INS40 INS40 INS23 INS55 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS42 INS43 INS31 MOV31 MOV31 INS44 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS42 INS83 INS42 INS8 INS21 INS21 INS21 INS43 INS42 INS42 INS43 INS42 INS41 INS42 INS42 MOV21 MOV21 INS21 INS42 INS42 MOV21 INS21 INS46 INS60 INS25 INS7 INS32 INS32 INS42 INS42 INS32 INS48 INS48 INS32 INS39 INS59 INS42 INS8 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS32 INS6 INS60 INS21 INS42 INS42 INS42 INS43 INS43 INS32 INS42 INS40 INS40 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42