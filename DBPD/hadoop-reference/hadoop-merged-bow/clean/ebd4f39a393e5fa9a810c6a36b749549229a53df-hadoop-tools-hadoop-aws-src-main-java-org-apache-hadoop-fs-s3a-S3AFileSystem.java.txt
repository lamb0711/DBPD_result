HADOOP-12977 s3a to handle delete("/", true) robustly. Contributed by Steve Loughran.

+import org.apache.hadoop.fs.InvalidRequestException;
+import org.apache.hadoop.fs.PathIOException;
+import org.apache.hadoop.fs.PathIsNotEmptyDirectoryException;
-  private void deleteObject(String key) {
+  private void deleteObject(String key) throws InvalidRequestException {
+    blockRootDelete(key);
+   * Reject any request to delete an object where the key is root.
+   * @param key key to validate
+   * @throws InvalidRequestException if the request was rejected due to
+   * a mistaken attempt to delete the root directory.
+   */
+  private void blockRootDelete(String key) throws InvalidRequestException {
+    if (key.isEmpty() || "/".equals(key)) {
+      throw new InvalidRequestException("Bucket "+ bucket
+          +" cannot be deleted");
+    }
+  }
+
+  /**
-   * @param keysToDelete collection of keys to delete on the s3-backend
+   * @param keysToDelete collection of keys to delete on the s3-backend.
+   *        if empty, no request is made of the object store.
+   * @throws InvalidRequestException if the request was rejected due to
+   * a mistaken attempt to delete the root directory.
-      boolean clearKeys, boolean deleteFakeDir) throws AmazonClientException {
+      boolean clearKeys, boolean deleteFakeDir)
+      throws AmazonClientException, InvalidRequestException {
-      // no keys
+      // exit fast if there are no keys to delete
+    for (DeleteObjectsRequest.KeyVersion keyVersion : keysToDelete) {
+      blockRootDelete(keyVersion.getKey());
+    }
-      if (!recursive && !status.isEmptyDirectory()) {
-        throw new IOException("Path is a folder: " + f +
-                              " and it is not an empty directory");
-      }
-
-        LOG.info("s3a cannot delete the root directory");
-        return false;
+        return rejectRootDirectoryDelete(status, recursive);
+      }
+
+      if (!recursive && !status.isEmptyDirectory()) {
+        throw new PathIsNotEmptyDirectoryException(f.toString());
-    createFakeDirectoryIfNecessary(f.getParent());
+    Path parent = f.getParent();
+    if (parent != null) {
+      createFakeDirectoryIfNecessary(parent);
+    }
+  /**
+   * Implements the specific logic to reject root directory deletion.
+   * The caller must return the result of this call, rather than
+   * attempt to continue with the delete operation: deleting root
+   * directories is never allowed. This method simply implements
+   * the policy of when to return an exit code versus raise an exception.
+   * @param status filesystem status
+   * @param recursive recursive flag from command
+   * @return a return code for the operation
+   * @throws PathIOException if the operation was explicitly rejected.
+   */
+  private boolean rejectRootDirectoryDelete(S3AFileStatus status,
+      boolean recursive) throws IOException {
+    LOG.info("s3a delete the {} root directory of {}", bucket, recursive);
+    boolean emptyRoot = status.isEmptyDirectory();
+    if (emptyRoot) {
+      return true;
+    }
+    if (recursive) {
+      return false;
+    } else {
+      // reject
+      throw new PathIOException(bucket, "Cannot delete root path");
+    }
+  }
+
-    } catch(AmazonClientException e) {
+    } catch(AmazonClientException | InvalidRequestException e) {

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS43 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS43 INS29 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS25 INS65 INS42 INS70 INS60 INS25 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS21 INS60 INS25 INS25 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS27 INS8 UPD66 INS66 INS42 INS66 INS66 INS44 INS42 INS8 MOV25 INS43 INS59 INS27 INS8 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS39 INS59 INS42 INS8 INS42 INS8 INS8 INS42 INS42 INS32 INS32 INS53 INS43 INS42 INS21 INS42 INS42 MOV32 INS42 INS33 MOV21 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS41 MOV41 INS53 INS42 INS42 INS45 INS42 INS42 INS14 INS40 INS32 MOV32 MOV27 INS42 INS42 INS9 INS14 INS84 INS43 INS27 INS42 INS32 INS41 INS53 INS42 INS43 INS42 INS45 MOV43 INS43 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 UPD42 MOV42 UPD42 MOV42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL45 DEL32 DEL21