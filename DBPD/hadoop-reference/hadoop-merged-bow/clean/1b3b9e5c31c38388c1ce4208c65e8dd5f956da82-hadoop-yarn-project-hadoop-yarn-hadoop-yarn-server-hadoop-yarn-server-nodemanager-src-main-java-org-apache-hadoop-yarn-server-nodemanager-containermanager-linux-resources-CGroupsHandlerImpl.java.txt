YARN-2619. Added NodeManager support for disk io isolation through cgroups. Contributed by Varun Vasudev and Wei Yan.

+import com.google.common.annotations.VisibleForTesting;
+import java.util.Collections;
-  private final Map<CGroupController, String> controllerPaths;
+  private Map<CGroupController, String> controllerPaths;
-      //nothing to do here - we support 'deferred' mounting of specific
-      //controllers - we'll populate the path for a given controller when an
-      //explicit mountCGroupController request is issued.
+      // nothing to do here - we support 'deferred' mounting of specific
+      // controllers - we'll populate the path for a given controller when an
+      // explicit mountCGroupController request is issued.
-      //cluster admins are expected to have mounted controllers in specific
-      //locations - we'll attempt to figure out mount points
-      initializeControllerPathsFromMtab();
+      // cluster admins are expected to have mounted controllers in specific
+      // locations - we'll attempt to figure out mount points
+
+      Map<CGroupController, String> cPaths =
+          initializeControllerPathsFromMtab(MTAB_FILE, this.cGroupPrefix);
+      // we want to do a bulk update without the paths changing concurrently
+      try {
+        rwLock.writeLock().lock();
+        controllerPaths = cPaths;
+      } finally {
+        rwLock.writeLock().unlock();
+      }
-  private void initializeControllerPathsFromMtab()
-      throws ResourceHandlerException {
+  @VisibleForTesting
+  static Map<CGroupController, String> initializeControllerPathsFromMtab(
+      String mtab, String cGroupPrefix) throws ResourceHandlerException {
-      Map<String, List<String>> parsedMtab = parseMtab();
-
-      //we want to do a bulk update without the paths changing concurrently
-      rwLock.writeLock().lock();
+      Map<String, List<String>> parsedMtab = parseMtab(mtab);
+      Map<CGroupController, String> ret = new HashMap<>();
-          File f = new File(controllerPath + "/" + this.cGroupPrefix);
+          File f = new File(controllerPath + "/" + cGroupPrefix);
-            controllerPaths.put(controller, controllerPath);
+            ret.put(controller, controllerPath);
-                    .append(MTAB_FILE).append(
-                    ". Controller mount point not writable for: ")
-                    .append(name).toString();
+                  .append(mtab)
+                  .append(". Controller mount point not writable for: ")
+                  .append(name).toString();
-
-            LOG.warn("Controller not mounted but automount disabled: " + name);
+          LOG.warn("Controller not mounted but automount disabled: " + name);
+      return ret;
-          "Failed to initialize controller paths!");
-    } finally {
-      rwLock.writeLock().unlock();
+        "Failed to initialize controller paths!");
-  private Map<String, List<String>> parseMtab() throws IOException {
+  private static Map<String, List<String>> parseMtab(String mtab)
+      throws IOException {
-      FileInputStream fis = new FileInputStream(new File(getMtabFileName()));
+      FileInputStream fis = new FileInputStream(new File(mtab));
-      throw new IOException("Error while reading " + getMtabFileName(), e);
+      throw new IOException("Error while reading " + mtab, e);
-  private String findControllerInMtab(String controller,
+  private static String findControllerInMtab(String controller,
-  String getMtabFileName() {
-    return MTAB_FILE;
-  }
-

INS26 INS26 INS40 INS40 INS31 MOV83 MOV39 MOV42 MOV43 INS8 INS78 UPD83 INS74 INS44 INS44 INS83 INS44 INS83 INS25 INS42 INS43 INS43 INS43 INS43 INS42 INS43 INS42 MOV43 INS42 MOV42 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS54 INS60 INS41 INS74 INS59 INS8 MOV8 INS74 INS59 INS42 MOV43 INS43 INS43 INS43 INS42 INS32 MOV21 INS21 INS43 INS43 INS43 INS42 INS14 INS42 INS42 MOV42 INS42 INS42 MOV22 INS7 INS42 INS42 INS42 INS42 INS74 MOV43 INS42 INS42 INS43 INS42 INS42 INS42 MOV43 MOV43 INS42 UPD42 UPD42 DEL83 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL39 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL41 DEL8 DEL31