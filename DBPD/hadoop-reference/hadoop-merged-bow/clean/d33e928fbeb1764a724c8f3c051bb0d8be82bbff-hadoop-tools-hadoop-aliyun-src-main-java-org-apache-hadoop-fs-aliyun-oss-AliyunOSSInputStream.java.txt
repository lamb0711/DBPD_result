HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.

+import org.apache.hadoop.fs.FSExceptionMessages;
-import com.aliyun.oss.OSSClient;
-import com.aliyun.oss.model.GetObjectRequest;
-
-  private static final int MAX_RETRIES = 10;
-
-  private String bucketName;
-  private String key;
-  private OSSClient ossClient;
+  private AliyunOSSFileSystemStore store;
+  private final String key;
-  private long dataLen;
+  private long contentLength;
-  public AliyunOSSInputStream(Configuration conf, OSSClient client,
-      String bucketName, String key, Long dataLen, Statistics statistics)
-      throws IOException {
-    this.bucketName = bucketName;
+  public AliyunOSSInputStream(Configuration conf,
+      AliyunOSSFileSystemStore store, String key, Long contentLength,
+      Statistics statistics) throws IOException {
+    this.store = store;
-    ossClient = client;
-    this.dataLen = dataLen;
+    this.contentLength = contentLength;
-
-    long partLen;
+    long partSize;
-      throw new EOFException("Cannot seek at negtive position:" + pos);
-    } else if (pos > dataLen) {
-      throw new EOFException("Cannot seek after EOF, fileLen:" + dataLen +
-          " position:" + pos);
-    } else if (pos + downloadPartSize > dataLen) {
-      partLen = dataLen - pos;
+      throw new EOFException("Cannot seek at negative position:" + pos);
+    } else if (pos > contentLength) {
+      throw new EOFException("Cannot seek after EOF, contentLength:" +
+          contentLength + " position:" + pos);
+    } else if (pos + downloadPartSize > contentLength) {
+      partSize = contentLength - pos;
-      partLen = downloadPartSize;
+      partSize = downloadPartSize;
-    GetObjectRequest request = new GetObjectRequest(bucketName, key);
-    request.setRange(pos, pos + partLen - 1);
-    wrappedStream = ossClient.getObject(request).getObjectContent();
+    wrappedStream = store.retrieve(key, pos, pos + partSize -1);
-    partRemaining = partLen;
+    partRemaining = partSize;
-    if (partRemaining <= 0 && position < dataLen) {
+    if (partRemaining <= 0 && position < contentLength) {
-   * Check whether the input stream is closed.
+   * Verify that the input stream is open. Non blocking; this gives
+   * the last state of the volatile {@link #closed} field.
-   * @throws IOException if stream is closed
+   * @throws IOException if the connection is closed.
-      throw new IOException("Stream is closed!");
+      throw new IOException(FSExceptionMessages.STREAM_IS_CLOSED);
-    while (position < dataLen && bytesRead < len) {
+    while (position < contentLength && bytesRead < len) {
-    long remaining = dataLen - position;
+    long remaining = contentLength - position;

MOV26 MOV23 UPD40 UPD43 INS83 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 INS21 UPD42 INS7 UPD66 INS66 INS65 INS66 UPD66 UPD42 UPD42 UPD42 INS42 INS32 UPD42 INS67 UPD42 UPD42 UPD42 INS42 INS42 INS42 MOV42 MOV27 UPD42 INS42 UPD42 UPD42 MOV43 UPD42 INS40 UPD45 MOV43 UPD42 UPD45 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL45