HDFS-2239. Reduce access levels of the fields and methods in FSNamesystem.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1155998 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.protocol.BlocksWithLocations;
+import org.apache.hadoop.hdfs.util.RwLock;
-public class FSNamesystem implements FSConstants, FSNamesystemMBean,
-    FSClusterStats, NameNodeMXBean {
+public class FSNamesystem implements RwLock, FSConstants, FSClusterStats,
+    FSNamesystemMBean, NameNodeMXBean {
-  public FSDirectory dir;
+  FSDirectory dir;
-  String blockPoolId;
+  private String blockPoolId;
-  public LeaseManager leaseManager = new LeaseManager(this); 
+  LeaseManager leaseManager = new LeaseManager(this); 
-  //
-  // Threaded object that checks to see if we have been
-  // getting heartbeats from all clients. 
-  //
-  public Daemon lmthread = null;   // LeaseMonitor thread
+  Daemon lmthread = null;   // LeaseMonitor thread
-  public static Collection<URI> getStorageDirs(Configuration conf,
+  private static Collection<URI> getStorageDirs(Configuration conf,
-  // utility methods to acquire and release read lock and write lock
+  @Override
-
+  @Override
-
+  @Override
-
+  @Override
-
+  @Override
-
-  boolean hasReadLock() {
+  @Override
+  public boolean hasReadLock() {
-
+  @Override
-          dir.fsImage.getStorage().getCTime(), getDistributedUpgradeVersion());
+          dir.fsImage.getStorage().getCTime(),
+          upgradeManager.getUpgradeVersion());
-  public void close() {
+  void close() {
-  // These methods are called by secondary namenodes
-  //
-  /////////////////////////////////////////////////////////
-  /**
-   * return a list of blocks & their locations on <code>datanode</code> whose
-   * total size is <code>size</code>
-   * 
-   * @param datanode on which blocks are located
-   * @param size total size of blocks
-   */
-  BlocksWithLocations getBlocks(DatanodeID datanode, long size)
-      throws IOException {
-    readLock();
-    try {
-      checkSuperuserPrivilege();
-      return blockManager.getBlocksWithLocations(datanode, size);  
-    } finally {
-      readUnlock();
-    }
-  }
-
-
-  /////////////////////////////////////////////////////////
-  //
-  public void concat(String target, String [] srcs) 
+  void concat(String target, String [] srcs) 
-  public void concatInternal(String target, String [] srcs) 
+  private void concatInternal(String target, String [] srcs) 
-  public LocatedBlock getAdditionalBlock(String src,
+  LocatedBlock getAdditionalBlock(String src,
-  public boolean completeFile(String src, String holder, ExtendedBlock last) 
+  boolean completeFile(String src, String holder, ExtendedBlock last) 
-  Lease reassignLease(Lease lease, String src, String newHolder,
+  private Lease reassignLease(Lease lease, String src, String newHolder,
+  /** Update disk space consumed. */
+  public void updateDiskSpaceConsumed(final INodeFileUnderConstruction fileINode,
+      final Block commitBlock) throws IOException {
+    assert hasWriteLock();
+
+    // Adjust disk space consumption if required
+    final long diff = fileINode.getPreferredBlockSize() - commitBlock.getNumBytes();    
+    if (diff > 0) {
+      try {
+        String path = leaseManager.findPath(fileINode);
+        dir.updateSpaceConsumed(path, 0, -diff * fileINode.getReplication());
+      } catch (IOException e) {
+        LOG.warn("Unexpected exception while updating disk space.", e);
+      }
+    }
+  }
-  public void registerDatanode(DatanodeRegistration nodeReg)
-      throws IOException {
+  void registerDatanode(DatanodeRegistration nodeReg) throws IOException {
-  public DatanodeCommand[] handleHeartbeat(DatanodeRegistration nodeReg,
+  DatanodeCommand[] handleHeartbeat(DatanodeRegistration nodeReg,
-      DatanodeCommand cmd = getDistributedUpgradeCommand();
+      DatanodeCommand cmd = upgradeManager.getBroadcastCommand();
-  public Date getStartTime() {
+  Date getStartTime() {
-  /**
-   * Rereads the config to get hosts and exclude list file names.
-   * Rereads the files to update the hosts and exclude lists.  It
-   * checks if any of the hosts have changed states:
-   * 1. Added to hosts  --> no further work needed here.
-   * 2. Removed from hosts --> mark AdminState as decommissioned. 
-   * 3. Added to exclude --> start decommission.
-   * 4. Removed from exclude --> stop decommission.
-   */
-  public void refreshNodes(Configuration conf) throws IOException {
-    checkSuperuserPrivilege();
-    getBlockManager().getDatanodeManager().refreshHostsReader(conf);
-    writeLock();
-    try {
-      getBlockManager().getDatanodeManager().refreshDatanodes();
-    } finally {
-      writeUnlock();
-    }
-  }
-    
-          needUpgrade = startDistributedUpgradeIfNeeded();
+          needUpgrade = upgradeManager.startUpgrade();
-        if(getDistributedUpgradeState())
+        if(upgradeManager.getUpgradeState())
-            getDistributedUpgradeStatus() + "%";
+            upgradeManager.getUpgradeStatus() + "%";
-  void setBlockTotal() {
+  private void setBlockTotal() {
-  long getCompleteBlocksTotal() {
+  private long getCompleteBlocksTotal() {
-      if(getDistributedUpgradeState())
+      if(upgradeManager.getUpgradeState())
-  int getDistributedUpgradeVersion() {
-    return upgradeManager.getUpgradeVersion();
-  }
-
-  UpgradeCommand getDistributedUpgradeCommand() throws IOException {
-    return upgradeManager.getBroadcastCommand();
-  }
-
-  boolean getDistributedUpgradeState() {
-    return upgradeManager.getUpgradeState();
-  }
-
-  short getDistributedUpgradeStatus() {
-    return upgradeManager.getUpgradeStatus();
-  }
-
-  boolean startDistributedUpgradeIfNeeded() throws IOException {
-    return upgradeManager.startUpgrade();
-  }
-
-  private void checkSuperuserPrivilege() throws AccessControlException {
+  /** Check if the user has superuser privilege. */
+  public void checkSuperuserPrivilege() throws AccessControlException {
-  void registerMBean() {
+  private void registerMBean() {
-  void updatePipelineInternal(String clientName, ExtendedBlock oldBlock, 
+  private void updatePipelineInternal(String clientName, ExtendedBlock oldBlock, 
-  public DelegationTokenSecretManager getDelegationTokenSecretManager() {
+  DelegationTokenSecretManager getDelegationTokenSecretManager() {
-  public long renewDelegationToken(Token<DelegationTokenIdentifier> token)
+  long renewDelegationToken(Token<DelegationTokenIdentifier> token)
-  public void cancelDelegationToken(Token<DelegationTokenIdentifier> token)
+  void cancelDelegationToken(Token<DelegationTokenIdentifier> token)

MOV26 MOV43 UPD40 INS43 INS31 UPD42 MOV42 INS83 UPD83 INS78 INS78 INS78 INS78 INS78 INS78 INS83 INS78 UPD83 INS83 MOV29 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 MOV43 INS8 INS83 INS83 INS29 UPD83 INS83 INS83 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 UPD43 UPD42 INS83 INS43 INS42 INS6 INS60 INS25 INS65 UPD66 UPD42 INS42 INS32 INS83 INS39 INS59 INS27 INS8 INS66 UPD42 MOV42 INS42 INS27 INS42 INS34 INS54 INS32 INS32 INS8 INS12 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS60 INS21 INS44 INS8 INS42 UPD42 UPD42 MOV42 INS43 INS59 INS32 MOV43 INS42 INS21 INS42 UPD42 INS42 UPD42 UPD42 MOV42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS34 INS27 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS38 INS32 UPD42 MOV42 INS42 INS45 UPD42 MOV42 MOV32 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 DEL83 DEL83 DEL83 DEL83 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL83 DEL83 DEL83 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL83 DEL83 DEL83 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21 DEL32 DEL32 DEL42 DEL32 DEL21 DEL8 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL39 DEL42 DEL41 DEL8 DEL31 DEL43 DEL42 DEL41 DEL8 DEL31 DEL39 DEL42 DEL41 DEL8 DEL31 DEL39 DEL42 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL43 DEL41 DEL8 DEL31 DEL83 DEL83 DEL83