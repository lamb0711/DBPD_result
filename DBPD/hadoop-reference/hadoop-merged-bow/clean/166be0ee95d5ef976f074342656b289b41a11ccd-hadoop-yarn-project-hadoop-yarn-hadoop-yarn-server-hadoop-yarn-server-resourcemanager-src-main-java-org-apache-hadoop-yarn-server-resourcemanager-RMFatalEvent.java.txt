YARN-3742. YARN RM will shut down if ZKClient creation times out. (Daniel Templeton via kasha)

+/**
+ * Event that indicates a non-recoverable error for the resource manager.
+ */
-  private String cause;
+  private final Exception cause;
+  private final String message;
-  public RMFatalEvent(RMFatalEventType rmFatalEventType, String cause) {
+  /**
+   * Create a new event of the given type with the given cause.
+   * @param rmFatalEventType The {@link RMFatalEventType} of the event
+   * @param message a text description of the reason for the event
+   */
+  public RMFatalEvent(RMFatalEventType rmFatalEventType, String message) {
+    this(rmFatalEventType, null, message);
+  }
+
+  /**
+   * Create a new event of the given type around the given source
+   * {@link Exception}.
+   * @param rmFatalEventType The {@link RMFatalEventType} of the event
+   * @param cause the source exception
+   */
+  public RMFatalEvent(RMFatalEventType rmFatalEventType, Exception cause) {
+    this(rmFatalEventType, cause, null);
+  }
+
+  /**
+   * Create a new event of the given type around the given source
+   * {@link Exception} with the given cause.
+   * @param rmFatalEventType The {@link RMFatalEventType} of the event
+   * @param cause the source exception
+   * @param message a text description of the reason for the event
+   */
+  public RMFatalEvent(RMFatalEventType rmFatalEventType, Exception cause,
+      String message) {
+    this.message = message;
-  public RMFatalEvent(RMFatalEventType rmFatalEventType, Exception cause) {
-    super(rmFatalEventType);
-    this.cause = StringUtils.stringifyException(cause);
+  /**
+   * Get a text description of the reason for the event.  If a cause was, that
+   * {@link Exception} will be converted to a {@link String} and included in
+   * the result.
+   * @return a text description of the reason for the event
+   */
+  public String getExplanation() {
+    StringBuilder sb = new StringBuilder();
+
+    if (message != null) {
+      sb.append(message);
+
+      if (cause != null) {
+        sb.append(": ");
+      }
+    }
+
+    if (cause != null) {
+      sb.append(StringUtils.stringifyException(cause));
+    }
+
+    return sb.toString();
-  public String getCause() {return this.cause;}
+  @Override
+  public String toString() {
+    return String.format("RMFatalEvent of type %s, caused by %s",
+        getType().name(), getExplanation());
+  }

INS29 INS23 INS31 INS31 INS65 INS83 INS43 INS83 INS83 MOV43 INS59 INS29 MOV44 INS8 INS29 INS44 INS44 INS8 INS29 INS83 INS42 MOV44 MOV44 INS44 MOV8 INS29 UPD42 INS8 INS78 INS83 INS43 INS42 INS8 INS66 INS42 INS42 INS65 INS65 INS65 UPD42 INS17 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS17 INS65 INS65 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS60 INS25 INS25 INS41 INS42 INS42 INS41 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS33 INS42 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS33 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS43 INS59 INS27 INS8 INS27 MOV8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS21 INS25 INS42 INS33 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS52 INS42 INS43 INS32 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS45 DEL42 DEL46 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22 DEL41 DEL8