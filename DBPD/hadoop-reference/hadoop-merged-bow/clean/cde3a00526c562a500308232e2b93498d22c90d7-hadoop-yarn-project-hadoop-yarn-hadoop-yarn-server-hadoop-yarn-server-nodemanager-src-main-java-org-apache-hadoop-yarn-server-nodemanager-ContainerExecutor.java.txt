YARN-5373. NPE listing wildcard directory in containerLaunch. (Daniel Templeton via kasha)

-  private static final String WILDCARD = "*";
+  protected static final String WILDCARD = "*";
-   * @param command the command that will be run.
-   * @param logDir the log dir to copy debugging information to
+   * @param command the command that will be run
+   * @param logDir the log dir to which to copy debugging information
+   * @param user the username of the job owner
-      Map<Path, List<String>> resources, List<String> command, Path logDir)
-      throws IOException {
-    this.writeLaunchEnv(out, environment, resources, command, logDir,
+      Map<Path, List<String>> resources, List<String> command, Path logDir,
+      String user) throws IOException {
+    this.writeLaunchEnv(out, environment, resources, command, logDir, user,
-   * @param command the command that will be run.
-   * @param logDir the log dir to copy debugging information to
+   * @param command the command that will be run
+   * @param logDir the log dir to which to copy debugging information
+   * @param user the username of the job owner
-  public void writeLaunchEnv(OutputStream out,
-      Map<String, String> environment, Map<Path, List<String>> resources,
-      List<String> command, Path logDir, String outFilename)
-      throws IOException {
+  public void writeLaunchEnv(OutputStream out, Map<String, String> environment,
+      Map<Path, List<String>> resources, List<String> command, Path logDir,
+      String user, String outFilename) throws IOException {
-            File directory = new File(resourceEntry.getKey().toString());
-
-            for (File wildLink : directory.listFiles()) {
+            for (File wildLink : readDirAsUser(user, resourceEntry.getKey())) {
+   * Return the files in the target directory. If retrieving the list of files
+   * requires specific access rights, that access will happen as the
+   * specified user. The list will not include entries for "." or "..".
+   *
+   * @param user the user as whom to access the target directory
+   * @param dir the target directory
+   * @return a list of files in the target directory
+   */
+  protected File[] readDirAsUser(String user, Path dir) {
+    return new File(dir.toString()).listFiles();
+  }
+
+  /**

MOV23 INS31 UPD83 INS44 INS44 INS29 INS83 INS5 INS42 INS44 INS44 INS8 INS65 INS43 INS42 INS65 INS43 INS42 INS65 INS65 INS65 INS65 MOV43 INS85 INS43 INS42 INS43 INS42 INS41 UPD66 UPD66 INS42 INS66 INS42 UPD66 UPD66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS42 INS14 INS42 MOV43 INS32 INS42 INS42 MOV32 MOV32 UPD42 INS42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32