YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.

+  /**
+   * Returns the normalized queue name, which should be used for internal
+   * queue references. Currently this is the fullQueuename which disambiguously
+   * identifies a queue.
+   * @param name Name of the queue to be normalized
+   * @return The normalized (full name) of the queue
+   */
+  public String normalizeQueueName(String name) {
+    if (this.queueManager == null) {
+      return name;
+    }
+    return this.queueManager.normalizeQueueName(name);
+  }
+
+  /**
+   * Determines if a short queue name reference is ambiguous, if there are at
+   * least two queues with the same name, it is considered ambiguous. Otherwise
+   * it is not.
+   * @param queueName The name of the queue to check for ambiguity
+   * @return true if there are at least 2 queues with the same name
+   */
+  public boolean isAmbiguous(String queueName) {
+    return this.queueManager.isAmbiguous(queueName);
+  }
+
-        final String message =
-            "Application " + applicationId + " submitted by user " + user
-                + " to unknown queue: " + queueName;
+        String message;
+        if (isAmbiguous(queueName)) {
+          message = "Application " + applicationId
+              + " submitted by user " + user
+              + " to ambiguous queue: " + queueName
+              + " please use full queue path instead.";
+        } else {
+          message =
+              "Application " + applicationId + " submitted by user " + user
+                  + " to unknown queue: " + queueName;
+        }
-        } else if (!queue.getParent().getQueueName().equals(
+        } else if (!queue.getParent().getQueueShortName().equals(
-                  .getParent().getQueuePath()
+                  .getParent().getQueueShortName()
-          + queue.getQueueName());
+          + queue.getQueuePath());
-            .getQueueName());
+            .getQueuePath());
-      String queueName = attempt.getQueue().getQueueName();
-      CSQueue queue = this.getQueue(queueName);
-      if (!(queue instanceof LeafQueue)) {
+      Queue  queue = attempt.getQueue();
+      CSQueue csQueue = (CSQueue) queue;
+      if (!(csQueue instanceof LeafQueue)) {
-            "Cannot finish application " + "from non-leaf queue: " + queueName);
+            "Cannot finish application " + "from non-leaf queue: "
+            + csQueue.getQueuePath());
-        queue.finishApplicationAttempt(attempt, queue.getQueueName());
+        csQueue.finishApplicationAttempt(attempt, csQueue.getQueuePath());
-      throw new IOException("Unknown queue: " + queueName);
+      if (isAmbiguous(queueName)) {
+        throw new IOException("Ambiguous queue reference: " + queueName
+            + " please use full queue path instead.");
+      } else {
+        throw new IOException("Unknown queue: " + queueName);
+      }
+
-          "", getRootQueue().getQueueName(), ActivityState.REJECTED,
+          "", getRootQueue().getQueuePath(), ActivityState.REJECTED,
-          "", getRootQueue().getQueueName(), ActivityState.REJECTED,
+          "", getRootQueue().getQueuePath(), ActivityState.REJECTED,
-          queue.getParent().getQueueName(), queue.getQueueName(),
+          queue.getParent().getQueuePath(), queue.getQueuePath(),
-          queue.getParent().getQueueName(), queue.getQueueName(),
+          queue.getParent().getQueuePath(), queue.getQueuePath(),
-          "", getRootQueue().getQueueName(), ActivityState.REJECTED,
+          "", getRootQueue().getQueuePath(), ActivityState.REJECTED,
-            + "parent queue : " + parentQueue.getQueueName(), sde);
+            + "parent queue : " + parentQueue.getQueuePath(), sde);
-            + "parent queue : " + parentQueue.getQueueName(), ioe);
+            + "parent queue : " + parentQueue.getQueuePath(), ioe);
-          String leafQueueName = application.getCSLeafQueue().getQueueName();
+          String leafQueuePath = application.getCSLeafQueue().getQueuePath();
-                  leafQueueName));
+                  leafQueuePath));
-        String leafQueueName = application.getCSLeafQueue().getQueueName();
+        String leafQueuePath = application.getCSLeafQueue().getQueuePath();
-                leafQueueName));
+                leafQueuePath));
-        if (!queue.getParent().getQueueName().equals(queueName)) {
+        if (!queue.getParent().getQueuePath().equals(queueName)) {
-      String queuename = newQueue.getQueueName();
+      String queuePath = newQueue.getQueuePath();
-      this.queueManager.addQueue(queuename, newQueue);
+      this.queueManager.addQueue(queuePath, newQueue);
-      String sourceQueueName = application.getQueue().getQueueName();
+      Queue queue = application.getQueue();
+      String sourceQueueName = queue instanceof CSQueue ?
+          ((CSQueue) queue).getQueuePath() : queue.getQueueName();
-          "Specified queue=" + dest.getQueueName() + " can't satisfy following "
+          "Specified queue=" + dest.getQueuePath() + " can't satisfy following "
-      LOG.error("Unknown queue: " + queueName);
+      if (isAmbiguous(queueName)) {
+        LOG.error("Ambiguous queue reference: " + queueName
+            + " please use full queue path instead.");
+      } else {
+        LOG.error("Unknown queue: " + queueName);
+      }
-      Priority priorityRequestedByApp, UserGroupInformation user,
-      String queueName, ApplicationId applicationId) throws YarnException {
+          Priority priorityRequestedByApp, UserGroupInformation user,
+          String queuePath, ApplicationId applicationId) throws YarnException {
-        appPriority = this.appPriorityACLManager.getDefaultPriority(queueName,
+        appPriority = this.appPriorityACLManager.getDefaultPriority(
+            normalizeQueueName(queuePath),
-          appPriority = this.queueManager.getDefaultPriorityForQueue(queueName);
+          appPriority = this.queueManager.getDefaultPriorityForQueue(
+              normalizeQueueName(queuePath));
-      if (!appPriorityACLManager.checkAccess(user, queueName, appPriority)) {
+      if (!appPriorityACLManager.checkAccess(user, queuePath, appPriority)) {
-          + "' is acceptable in queue : " + queueName + " for application: "
+          + "' is acceptable in queue : " + queuePath + " for application: "
-      LOG.error("Unknown queue: " + queueName);
+      if (isAmbiguous(queueName)) {
+        LOG.error("Ambiguous queue reference: " + queueName
+            + " please use full queue path instead.");
+      } else {
+        LOG.error("Unknown queue: " + queueName);
+      }

INS31 INS31 INS29 INS83 MOV43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 MOV44 INS8 INS44 INS65 INS65 INS65 INS43 INS42 INS25 INS41 INS65 INS65 INS65 INS41 INS43 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS32 INS66 INS66 INS66 INS42 INS66 INS66 INS32 INS8 INS8 INS42 INS8 INS22 INS33 INS41 INS22 INS42 INS42 INS22 INS42 INS42 INS25 MOV25 INS60 INS25 MOV41 INS25 MOV41 INS52 INS42 INS42 INS52 INS42 INS52 INS42 UPD43 INS32 INS8 MOV8 INS43 MOV43 INS59 INS32 INS8 MOV8 INS32 INS8 MOV8 INS25 UPD42 UPD42 MOV32 UPD42 INS11 INS42 INS42 INS53 INS32 MOV32 MOV32 INS25 UPD42 UPD42 INS42 INS42 MOV32 INS42 INS16 INS42 INS42 INS21 INS42 INS42 INS21 INS43 INS32 INS8 INS8 INS43 INS42 INS14 MOV32 INS42 UPD42 MOV42 UPD42 UPD42 MOV27 INS8 UPD42 INS62 INS32 MOV32 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 INS21 INS21 UPD42 INS42 UPD42 UPD42 INS43 INS27 UPD42 UPD42 INS60 INS21 UPD42 UPD42 INS42 INS43 INS36 INS42 UPD42 INS42 INS42 INS27 INS42 INS42 INS27 INS7 INS7 INS32 INS32 UPD42 UPD42 INS42 INS45 INS42 INS45 MOV43 INS59 INS32 UPD42 UPD42 UPD42 INS42 INS11 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS27 INS42 MOV27 INS42 INS42 INS42 INS42 INS42 INS32 MOV32 INS42 INS14 UPD42 INS43 INS42 UPD42 MOV42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 UPD42 UPD42 MOV32 INS42 MOV43 INS42 MOV32 INS42 INS42 INS32 UPD42 UPD42 MOV42 INS42 INS32 MOV32 INS42 INS42 DEL83 DEL42 DEL32 DEL52 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32