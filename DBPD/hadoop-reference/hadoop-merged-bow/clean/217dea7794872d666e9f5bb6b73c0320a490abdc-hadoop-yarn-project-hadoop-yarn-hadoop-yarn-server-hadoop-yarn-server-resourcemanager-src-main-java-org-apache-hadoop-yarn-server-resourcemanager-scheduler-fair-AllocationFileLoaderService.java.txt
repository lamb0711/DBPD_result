Merge remote-tracking branch 'apache-commit/trunk' into HDFS-6581

+    Map<String, Long> fairSharePreemptionTimeouts = new HashMap<String, Long>();
-    long fairSharePreemptionTimeout = Long.MAX_VALUE;
+    long defaultFairSharePreemptionTimeout = Long.MAX_VALUE;
-    
+
-    Map<FSQueueType, Set<String>> configuredQueues = 
+    Map<FSQueueType, Set<String>> configuredQueues =
-   
+
-        } else if ("fairSharePreemptionTimeout".equals(element.getTagName())) {
+        } else if ("defaultFairSharePreemptionTimeout".equals(element.getTagName())) {
-          fairSharePreemptionTimeout = val;
+          defaultFairSharePreemptionTimeout = val;
+        } else if ("fairSharePreemptionTimeout".equals(element.getTagName())) {
+          if (defaultFairSharePreemptionTimeout == Long.MAX_VALUE) {
+            String text = ((Text)element.getFirstChild()).getData().trim();
+            long val = Long.parseLong(text) * 1000L;
+            defaultFairSharePreemptionTimeout = val;
+          }
-    
+
-          queuePolicies, minSharePreemptionTimeouts, queueAcls,
-          configuredQueues);
+          queuePolicies, minSharePreemptionTimeouts, fairSharePreemptionTimeouts,
+          queueAcls, configuredQueues);
-    
+
-    
-    AllocationConfiguration info = new AllocationConfiguration(minQueueResources, maxQueueResources,
-        queueMaxApps, userMaxApps, queueWeights, queueMaxAMShares, userMaxAppsDefault,
-        queueMaxAppsDefault, queueMaxAMShareDefault, queuePolicies, defaultSchedPolicy, minSharePreemptionTimeouts,
-        queueAcls, fairSharePreemptionTimeout, defaultMinSharePreemptionTimeout,
+
+    // Set the min/fair share preemption timeout for the root queue
+    if (!minSharePreemptionTimeouts.containsKey(QueueManager.ROOT_QUEUE)){
+      minSharePreemptionTimeouts.put(QueueManager.ROOT_QUEUE,
+          defaultMinSharePreemptionTimeout);
+    }
+    if (!fairSharePreemptionTimeouts.containsKey(QueueManager.ROOT_QUEUE)) {
+      fairSharePreemptionTimeouts.put(QueueManager.ROOT_QUEUE,
+          defaultFairSharePreemptionTimeout);
+    }
+
+    AllocationConfiguration info = new AllocationConfiguration(minQueueResources,
+        maxQueueResources, queueMaxApps, userMaxApps, queueWeights,
+        queueMaxAMShares, userMaxAppsDefault, queueMaxAppsDefault,
+        queueMaxAMShareDefault, queuePolicies, defaultSchedPolicy,
+        minSharePreemptionTimeouts, fairSharePreemptionTimeouts, queueAcls,
+      Map<String, Long> fairSharePreemptionTimeouts,
+      } else if ("fairSharePreemptionTimeout".equals(field.getTagName())) {
+        String text = ((Text)field.getFirstChild()).getData().trim();
+        long val = Long.parseLong(text) * 1000L;
+        fairSharePreemptionTimeouts.put(queueName, val);
-            queuePolicies, minSharePreemptionTimeouts, queueAcls,
-            configuredQueues);
+            queuePolicies, minSharePreemptionTimeouts,
+            fairSharePreemptionTimeouts, queueAcls, configuredQueues);

INS44 INS60 INS25 INS25 INS74 INS42 INS74 INS59 INS38 INS8 INS38 INS8 MOV43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS14 UPD42 INS32 INS21 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 MOV43 UPD42 UPD42 INS43 INS43 INS43 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS25 INS25 INS45 INS42 INS32 MOV32 INS8 MOV25 INS32 INS8 MOV25 INS42 INS42 INS25 INS45 INS42 INS32 INS60 INS60 INS21 UPD42 INS27 INS8 INS42 INS42 INS43 INS59 INS39 INS59 INS32 INS42 INS40 INS60 INS60 INS21 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS59 INS39 INS59 INS7 INS32 INS42 INS32 INS34 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS34 INS11 INS36 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS11 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL42