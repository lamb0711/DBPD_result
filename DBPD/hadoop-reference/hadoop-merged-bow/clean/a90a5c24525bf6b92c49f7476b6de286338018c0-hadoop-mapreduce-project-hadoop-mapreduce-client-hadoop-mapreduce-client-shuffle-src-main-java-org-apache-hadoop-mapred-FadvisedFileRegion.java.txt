MAPREDUCE-5791. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580994 13f79535-47bb-0310-9956-ffa450edef68

+import java.nio.ByteBuffer;
+import java.nio.channels.FileChannel;
+import com.google.common.annotations.VisibleForTesting;
+
-
+  private final long count;
+  private final long position;
+  private final int shuffleBufferSize;
+  private final boolean shuffleTransferToAllowed;
+  private final FileChannel fileChannel;
+  
-      String identifier) throws IOException {
+      String identifier, int shuffleBufferSize, 
+      boolean shuffleTransferToAllowed) throws IOException {
+    this.fileChannel = file.getChannel();
+    this.count = count;
+    this.position = position;
+    this.shuffleBufferSize = shuffleBufferSize;
+    this.shuffleTransferToAllowed = shuffleTransferToAllowed;
-    return super.transferTo(target, position);
+    
+    if(this.shuffleTransferToAllowed) {
+      return super.transferTo(target, position);
+    } else {
+      return customShuffleTransfer(target, position);
+    } 
+  /**
+   * This method transfers data using local buffer. It transfers data from 
+   * a disk to a local buffer in memory, and then it transfers data from the 
+   * buffer to the target. This is used only if transferTo is disallowed in
+   * the configuration file. super.TransferTo does not perform well on Windows 
+   * due to a small IO request generated. customShuffleTransfer can control 
+   * the size of the IO requests by changing the size of the intermediate 
+   * buffer.
+   */
+  @VisibleForTesting
+  long customShuffleTransfer(WritableByteChannel target, long position)
+      throws IOException {
+    long actualCount = this.count - position;
+    if (actualCount < 0 || position < 0) {
+      throw new IllegalArgumentException(
+          "position out of range: " + position +
+          " (expected: 0 - " + (this.count - 1) + ')');
+    }
+    if (actualCount == 0) {
+      return 0L;
+    }
+    
+    long trans = actualCount;
+    int readSize;
+    ByteBuffer byteBuffer = ByteBuffer.allocate(this.shuffleBufferSize);
+    
+    while(trans > 0L &&
+        (readSize = fileChannel.read(byteBuffer, this.position+position)) > 0) {
+      //adjust counters and buffer limit
+      if(readSize < trans) {
+        trans -= readSize;
+        position += readSize;
+        byteBuffer.flip();
+      } else {
+        //We can read more than we need if the actualCount is not multiple 
+        //of the byteBuffer size and file is big enough. In that case we cannot
+        //use flip method but we need to set buffer limit manually to trans.
+        byteBuffer.limit((int)trans);
+        byteBuffer.position(0);
+        position += trans; 
+        trans = 0;
+      }
+      
+      //write data to the target
+      while(byteBuffer.hasRemaining()) {
+        target.write(byteBuffer);
+      }
+      
+      byteBuffer.clear();
+    }
+    
+    return actualCount - trans;
+  }
+
+  

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS44 INS44 INS29 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS21 INS21 INS21 INS25 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS25 INS25 INS60 INS60 INS60 INS61 INS41 INS7 INS7 INS7 INS7 INS7 INS22 INS8 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS39 INS59 INS27 INS8 INS27 INS8 INS39 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS27 INS22 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS52 INS42 MOV41 INS41 INS42 INS27 INS27 INS27 INS53 INS42 INS34 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS25 INS61 INS21 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS22 INS42 INS42 INS34 INS42 INS34 INS14 INS34 INS42 INS42 INS22 INS42 INS34 INS36 INS34 INS27 INS8 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS52 INS42 INS43 INS27 INS52 INS42 INS7 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS45 INS42 INS45 INS36 INS13 INS42 INS32 INS7 INS7 INS32 INS32 INS32 INS7 INS7 INS32 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS22 INS34 INS22 INS42 INS39 INS42 INS52 INS42 INS52 INS42