HDFS-8166. DFSStripedOutputStream should not create empty blocks. Contributed by Jing Zhao.

+import java.util.Arrays;
+import java.util.Collections;
+
+import org.apache.hadoop.HadoopIllegalArgumentException;
-  private final short blockGroupBlocks = HdfsConstants.NUM_DATA_BLOCKS
+  private final short numAllBlocks = HdfsConstants.NUM_DATA_BLOCKS
-  private final short blockGroupDataBlocks = HdfsConstants.NUM_DATA_BLOCKS;
+  private final short numDataBlocks = HdfsConstants.NUM_DATA_BLOCKS;
-  private long currentBlockGroupBytes = 0;
+  //private long currentBlockGroupBytes = 0;
-  private long getBlockGroupSize() {
-    return blockSize * HdfsConstants.NUM_DATA_BLOCKS;
-  }
-
-    if (blockGroupBlocks <= 1) {
-      throw new IOException("The block group must contain more than one block.");
-    }
+    checkConfiguration();
-    cellBuffers = new ByteBuffer[blockGroupBlocks];
+    cellBuffers = new ByteBuffer[numAllBlocks];
-    for (int i = 0; i < blockGroupBlocks; i++) {
-      stripeBlocks.add(new LinkedBlockingQueue<LocatedBlock>(blockGroupBlocks));
+    for (int i = 0; i < numAllBlocks; i++) {
+      stripeBlocks.add(new LinkedBlockingQueue<LocatedBlock>(numAllBlocks));
-    encoder.initialize(blockGroupDataBlocks,
-        blockGroupBlocks - blockGroupDataBlocks, cellSize);
+    encoder.initialize(numDataBlocks,
+        numAllBlocks - numDataBlocks, cellSize);
-    streamers = new ArrayList<>(blockGroupBlocks);
-    for (short i = 0; i < blockGroupBlocks; i++) {
+    List<StripedDataStreamer> s = new ArrayList<>(numAllBlocks);
+    for (short i = 0; i < numAllBlocks; i++) {
-      streamers.add(streamer);
+      s.add(streamer);
+    streamers = Collections.unmodifiableList(s);
+  private void checkConfiguration() {
+    if (cellSize % bytesPerChecksum != 0) {
+      throw new HadoopIllegalArgumentException("Invalid values: "
+          + DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY + " (=" + bytesPerChecksum
+          + ") must divide cell size (=" + cellSize + ").");
+    }
+  }
+
-    curIdx = (curIdx + 1) % blockGroupBlocks;
+    curIdx = (curIdx + 1) % numAllBlocks;
-    ByteBuffer[] dataBuffers = new ByteBuffer[blockGroupDataBlocks];
-    ByteBuffer[] parityBuffers = new ByteBuffer[blockGroupBlocks - blockGroupDataBlocks];
-    for (int i = 0; i < blockGroupBlocks; i++) {
-      if (i < blockGroupDataBlocks) {
+    ByteBuffer[] dataBuffers = new ByteBuffer[numDataBlocks];
+    ByteBuffer[] parityBuffers = new ByteBuffer[numAllBlocks - numDataBlocks];
+    for (int i = 0; i < numAllBlocks; i++) {
+      if (i < numDataBlocks) {
-        parityBuffers[i - blockGroupDataBlocks] = buffers[i];
+        parityBuffers[i - numDataBlocks] = buffers[i];
-   * Generate packets from a given buffer
+   * Generate packets from a given buffer. This is only used for streamers
+   * writing parity blocks.
-
-      if (curIdx == blockGroupDataBlocks) {
+      if (curIdx == numDataBlocks) {
-        for (int k = 0; k < blockGroupDataBlocks; k++) {
+        for (int k = 0; k < numDataBlocks; k++) {
-        for (int i = blockGroupDataBlocks; i < blockGroupBlocks; i++) {
+        for (int i = numDataBlocks; i < numAllBlocks; i++) {
-    for (int i = 0; i< blockGroupBlocks; i++) {
+    for (int i = 0; i< numAllBlocks; i++) {
+      if (i >= numDataBlocks) {
+        Arrays.fill(cellBuffers[i].array(), (byte) 0);
+      }
-    return blockGroupDataBlocks * cellSize;
+    return numDataBlocks * cellSize;
+  }
+
+  private long getCurrentBlockGroupBytes() {
+    long sum = 0;
+    for (int i = 0; i < numDataBlocks; i++) {
+      sum += streamers.get(i).getBytesCurBlock();
+    }
+    return sum;
-
-    StripedDataStreamer leadingStreamer = null;
-        if (streamer.isLeadingStreamer()) {
-          leadingStreamer = streamer;
-        }
-    assert leadingStreamer != null : "One streamer should be leader";
-    leadingStreamer.countTailingBlockGroupBytes();
-  @Override
-  public synchronized void write(int b) throws IOException {
-    super.write(b);
-    currentBlockGroupBytes = (currentBlockGroupBytes + 1) % getBlockGroupSize();
-  }
-
-  @Override
-  public synchronized void write(byte b[], int off, int len)
-      throws IOException {
-    super.write(b, off, len);
-    currentBlockGroupBytes = (currentBlockGroupBytes + len) % getBlockGroupSize();
-  }
-
-  private void writeParityCellsForLastStripe() throws IOException{
+  private void writeParityCellsForLastStripe() throws IOException {
+    final long currentBlockGroupBytes = getCurrentBlockGroupBytes();
-        currentBlockGroupBytes, cellSize, blockGroupDataBlocks,
-        blockGroupDataBlocks + 1);
+        currentBlockGroupBytes, cellSize, numDataBlocks,
+        numDataBlocks + 1);
-    for (int i = 0; i < blockGroupBlocks; i++) {
+    for (int i = 0; i < numAllBlocks; i++) {
-          currentBlockGroupBytes, cellSize, blockGroupDataBlocks, i);
+          currentBlockGroupBytes, cellSize, numDataBlocks, i);
-      if (internalBlkLen < parityBlkSize || i >= blockGroupDataBlocks) {
+      if (internalBlkLen < parityBlkSize || i >= numDataBlocks) {
-    curIdx = blockGroupDataBlocks;
+    curIdx = numDataBlocks;
-    for (int i = blockGroupDataBlocks; i < blockGroupBlocks; i++) {
+    for (int i = numDataBlocks; i < numAllBlocks; i++) {
-    for (int i = 0; i < blockGroupBlocks; i++) {
+    for (int i = 0; i < numAllBlocks; i++) {
-      if (e == null)
-        return;
-      else
+      if (e != null) {
+      } else {
+        return;
+      }
-      //if the last stripe is incomplete, generate and write parity cells
+      // if the last stripe is incomplete, generate and write parity cells
-      for (int i = 0; i < blockGroupBlocks; i++) {
+      for (int i = 0; i < numAllBlocks; i++) {
-        if (streamer.getBytesCurBlock()!= 0 ||
-            currentBlockGroupBytes < getBlockGroupSize()) {
+        if (streamer.getBytesCurBlock() > 0) {
-      // get last block before destroying the streamer
-      ExtendedBlock lastBlock = streamers.get(0).getBlock();
+      final ExtendedBlock lastBlock = getCommittedBlock();
-    } catch (ClosedChannelException e) {
+    } catch (ClosedChannelException ignored) {
+  /**
+   * Generate the block which is reported and will be committed in NameNode.
+   * Need to go through all the streamers writing data blocks and add their
+   * bytesCurBlock together. Note that at this time all streamers have been
+   * closed. Also this calculation can cover streamers with writing failures.
+   *
+   * @return An ExtendedBlock with size of the whole block group.
+   */
+  ExtendedBlock getCommittedBlock() throws IOException {
+    ExtendedBlock b = getLeadingStreamer().getBlock();
+    if (b == null) {
+      return null;
+    }
+    final ExtendedBlock block = new ExtendedBlock(b);
+    final boolean atBlockGroupBoundary =
+        getLeadingStreamer().getBytesCurBlock() == 0 &&
+            getLeadingStreamer().getBlock() != null &&
+            getLeadingStreamer().getBlock().getNumBytes() > 0;
+    for (int i = 1; i < numDataBlocks; i++) {
+      block.setNumBytes(block.getNumBytes() +
+          (atBlockGroupBoundary ? streamers.get(i).getBlock().getNumBytes() :
+              streamers.get(i).getBytesCurBlock()));
+    }
+    return block;
+  }

INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS31 MOV21 INS83 INS39 INS42 INS8 MOV60 UPD83 UPD39 UPD42 INS8 INS29 INS43 INS42 MOV43 INS8 UPD42 UPD42 INS21 INS60 INS25 INS60 INS24 INS41 INS60 INS65 INS65 INS42 INS60 INS25 INS60 INS60 INS24 INS41 INS32 INS74 INS59 INS27 INS8 MOV5 MOV5 UPD66 INS66 INS8 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS83 INS39 INS59 MOV60 INS66 INS66 INS66 INS66 INS66 MOV43 INS59 INS27 INS8 INS83 INS43 INS59 INS83 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS42 UPD42 UPD42 INS43 MOV43 INS42 MOV14 UPD42 INS32 INS27 INS34 INS53 UPD42 UPD42 UPD42 UPD42 MOV21 INS25 UPD42 INS42 INS34 INS39 INS59 INS42 INS42 INS42 MOV21 INS42 INS32 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS14 INS42 INS27 INS39 INS59 INS42 INS42 INS42 INS21 UPD42 UPD42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 MOV5 INS42 MOV5 INS27 INS27 INS8 INS42 INS34 UPD7 INS42 UPD42 UPD42 UPD27 INS8 INS8 INS83 INS43 UPD42 INS32 INS42 INS33 INS43 INS42 INS27 INS27 INS42 INS34 INS32 UPD42 INS43 INS27 INS42 INS42 UPD42 UPD42 INS42 INS42 INS21 UPD42 INS32 UPD42 MOV53 INS41 UPD42 INS42 INS42 INS42 INS27 INS27 INS32 INS34 INS42 INS42 INS27 UPD42 INS42 INS45 INS40 INS45 INS42 INS45 UPD42 MOV42 INS45 INS32 INS32 UPD42 MOV42 UPD42 UPD42 UPD27 MOV27 UPD42 INS32 INS34 INS32 INS33 INS32 INS42 INS32 INS36 UPD42 UPD42 INS42 INS42 INS32 INS11 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS16 UPD42 INS2 INS42 INS39 INS34 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL39 DEL42 DEL40 DEL27 DEL41 DEL8 DEL31 DEL42 DEL34 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL27 DEL42 DEL8 DEL42 DEL78 DEL83 DEL42 DEL34 DEL27 DEL36 DEL32 DEL27 DEL39 DEL42 DEL44 DEL42 DEL42 DEL48 DEL21 DEL8 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL45 DEL6 DEL42 DEL42 DEL32 DEL21 DEL41 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL42 DEL34 DEL32 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL85 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL48 DEL21 DEL42 DEL42 DEL42 DEL27 DEL36 DEL32 DEL27 DEL7 DEL21 DEL8