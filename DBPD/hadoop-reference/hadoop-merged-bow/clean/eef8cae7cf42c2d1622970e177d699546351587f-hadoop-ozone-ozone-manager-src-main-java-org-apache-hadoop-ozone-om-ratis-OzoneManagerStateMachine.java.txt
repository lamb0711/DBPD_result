HDDS-1262. In OM HA OpenKey call Should happen only leader OM. (#626)


+import java.util.UUID;
+    .MultipartInfoApplyInitiateRequest;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos
+import org.apache.hadoop.util.Time;
+import static org.apache.hadoop.ozone.om.exceptions.OMException.STATUS_CODE;
+
+    return handleStartTransactionRequests(raftClientRequest, omRequest);
-    if (omRequest.getCmdType() ==
-        OzoneManagerProtocolProtos.Type.AllocateBlock) {
+  }
+
+  /**
+   * Handle the RaftClientRequest and return TransactionContext object.
+   * @param raftClientRequest
+   * @param omRequest
+   * @return TransactionContext
+   */
+  private TransactionContext handleStartTransactionRequests(
+      RaftClientRequest raftClientRequest, OMRequest omRequest) {
+
+    switch (omRequest.getCmdType()) {
+    case AllocateBlock:
+    case CreateKey:
+      return handleCreateKeyRequest(raftClientRequest, omRequest);
+    case InitiateMultiPartUpload:
+      return handleInitiateMultipartUpload(raftClientRequest, omRequest);
+    default:
+      return TransactionContext.newBuilder()
+          .setClientRequest(raftClientRequest)
+          .setStateMachine(this)
+          .setServerRole(RaftProtos.RaftPeerRole.LEADER)
+          .setLogData(raftClientRequest.getMessage().getContent())
+          .build();
+
+  }
+
+
+  private TransactionContext handleInitiateMultipartUpload(
+      RaftClientRequest raftClientRequest, OMRequest omRequest) {
+
+    // Generate a multipart uploadID, and create a new request.
+    // When applyTransaction happen's all OM's use the same multipartUploadID
+    // for the key.
+
+    long time = Time.monotonicNowNanos();
+    String multipartUploadID = UUID.randomUUID().toString() + "-" + time;
+
+    MultipartInfoApplyInitiateRequest multipartInfoApplyInitiateRequest =
+        MultipartInfoApplyInitiateRequest.newBuilder()
+            .setKeyArgs(omRequest.getInitiateMultiPartUploadRequest()
+                .getKeyArgs()).setMultipartUploadID(multipartUploadID).build();
+
+    OMRequest.Builder newOmRequest =
+        OMRequest.newBuilder().setCmdType(
+            OzoneManagerProtocolProtos.Type.ApplyInitiateMultiPartUpload)
+            .setInitiateMultiPartUploadApplyRequest(
+                multipartInfoApplyInitiateRequest)
+            .setClientId(omRequest.getClientId());
+
+    if (omRequest.hasTraceID()) {
+      newOmRequest.setTraceID(omRequest.getTraceID());
+    }
+
+    ByteString messageContent =
+        ByteString.copyFrom(newOmRequest.build().toByteArray());
+
+   * Handle createKey Request, which needs a special handling. This request
+   * needs to be executed on the leader, and the response received from this
+   * request we need to create a ApplyKeyRequest and create a
+   * TransactionContext object.
+   */
+  private TransactionContext handleCreateKeyRequest(
+      RaftClientRequest raftClientRequest, OMRequest omRequest) {
+    OMResponse omResponse = handler.handle(omRequest);
+
+    // TODO: if not success should we retry depending on the error if it is
+    //  retriable?
+    if (!omResponse.getSuccess()) {
+      TransactionContext transactionContext = TransactionContext.newBuilder()
+          .setClientRequest(raftClientRequest)
+          .setStateMachine(this)
+          .setServerRole(RaftProtos.RaftPeerRole.LEADER)
+          .build();
+      transactionContext.setException(
+          constructExceptionForFailedRequest(omResponse));
+      return transactionContext;
+    }
+
+    // Get original request
+    OzoneManagerProtocolProtos.CreateKeyRequest createKeyRequest =
+        omRequest.getCreateKeyRequest();
+
+    // Create Applykey Request.
+    OzoneManagerProtocolProtos.ApplyCreateKeyRequest applyCreateKeyRequest =
+        OzoneManagerProtocolProtos.ApplyCreateKeyRequest.newBuilder()
+            .setCreateKeyRequest(createKeyRequest)
+            .setCreateKeyResponse(omResponse.getCreateKeyResponse()).build();
+
+    OMRequest.Builder newOmRequest =
+        OMRequest.newBuilder().setCmdType(
+            OzoneManagerProtocolProtos.Type.ApplyCreateKey)
+            .setApplyCreateKeyRequest(applyCreateKeyRequest)
+            .setClientId(omRequest.getClientId());
+
+    if (omRequest.hasTraceID()) {
+      newOmRequest.setTraceID(omRequest.getTraceID());
+    }
+
+    ByteString messageContent =
+        ByteString.copyFrom(newOmRequest.build().toByteArray());
+
+    return TransactionContext.newBuilder()
+        .setClientRequest(raftClientRequest)
+        .setStateMachine(this)
+        .setServerRole(RaftProtos.RaftPeerRole.LEADER)
+        .setLogData(messageContent)
+        .build();
+  }
+
+
+  /**
-      IOException ioe = new IOException(omResponse.getMessage() +
-          " Status code " + omResponse.getStatus());
-      transactionContext.setException(ioe);
+      transactionContext.setException(
+          constructExceptionForFailedRequest(omResponse));
+  /**
+   * Construct IOException message for failed requests in StartTransaction.
+   * @param omResponse
+   * @return
+   */
+  private IOException constructExceptionForFailedRequest(
+      OMResponse omResponse) {
+    return new IOException(omResponse.getMessage() + " " +
+        STATUS_CODE + omResponse.getStatus());
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 MOV43 INS42 INS44 INS8 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS50 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS25 INS60 MOV41 INS65 INS42 INS43 INS42 INS43 INS42 INS60 MOV25 INS60 INS60 INS60 INS25 INS60 INS41 INS25 INS65 INS65 INS65 INS43 INS42 INS41 INS32 INS66 INS42 INS42 INS66 INS42 INS42 MOV32 INS49 MOV41 INS49 INS41 INS49 INS41 INS49 INS41 INS42 INS42 INS39 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS38 INS8 INS66 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS32 INS40 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS32 INS42 INS32 INS60 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS45 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 UPD45 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS32 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL40 DEL27 DEL8 DEL25 DEL42 DEL59 DEL60