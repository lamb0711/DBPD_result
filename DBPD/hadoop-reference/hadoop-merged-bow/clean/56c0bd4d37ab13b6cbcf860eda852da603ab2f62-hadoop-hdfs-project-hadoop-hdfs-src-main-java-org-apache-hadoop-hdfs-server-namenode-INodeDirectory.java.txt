Merge from trunk to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1610853 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.SnapshotException;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature;
-import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectorySnapshottable;
-  /** Is this a snapshottable directory? */
-  public boolean isSnapshottable() {
-    return false;
-  }
-
-  
+
-  /** Replace itself with an {@link INodeDirectorySnapshottable}. */
-  public INodeDirectorySnapshottable replaceSelf4INodeDirectorySnapshottable(
-      int latestSnapshotId, final INodeMap inodeMap)
-      throws QuotaExceededException {
-    Preconditions.checkState(!(this instanceof INodeDirectorySnapshottable),
-        "this is already an INodeDirectorySnapshottable, this=%s", this);
-    final INodeDirectorySnapshottable s = new INodeDirectorySnapshottable(this);
-    replaceSelf(s, inodeMap).getDirectoryWithSnapshotFeature().getDiffs()
-        .saveSelf2Snapshot(latestSnapshotId, s, this);
-    return s;
+  public DirectorySnapshottableFeature getDirectorySnapshottableFeature() {
+    return getFeature(DirectorySnapshottableFeature.class);
-  /** Replace itself with {@link INodeDirectory}. */
-  public INodeDirectory replaceSelf4INodeDirectory(final INodeMap inodeMap) {
-    Preconditions.checkState(getClass() != INodeDirectory.class,
-        "the class is already INodeDirectory, this=%s", this);
-    return replaceSelf(new INodeDirectory(this, true, this.getFeatures()),
-      inodeMap);
+  public boolean isSnapshottable() {
+    return getDirectorySnapshottableFeature() != null;
-  /** Replace itself with the given directory. */
-  private final <N extends INodeDirectory> N replaceSelf(final N newDir,
-      final INodeMap inodeMap) {
-    final INodeReference ref = getParentReference();
-    if (ref != null) {
-      ref.setReferredINode(newDir);
-      if (inodeMap != null) {
-        inodeMap.put(newDir);
-      }
-    } else {
-      final INodeDirectory parent = getParent();
-      Preconditions.checkArgument(parent != null, "parent is null, this=%s", this);
-      parent.replaceChild(this, newDir, inodeMap);
+  public Snapshot getSnapshot(byte[] snapshotName) {
+    return getDirectorySnapshottableFeature().getSnapshot(snapshotName);
+  }
+
+  public void setSnapshotQuota(int snapshotQuota) {
+    getDirectorySnapshottableFeature().setSnapshotQuota(snapshotQuota);
+  }
+
+  public Snapshot addSnapshot(int id, String name) throws SnapshotException,
+      QuotaExceededException {
+    return getDirectorySnapshottableFeature().addSnapshot(this, id, name);
+  }
+
+  public Snapshot removeSnapshot(String snapshotName,
+      BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
+      throws SnapshotException {
+    return getDirectorySnapshottableFeature().removeSnapshot(this,
+        snapshotName, collectedBlocks, removedINodes);
+  }
+
+  public void renameSnapshot(String path, String oldName, String newName)
+      throws SnapshotException {
+    getDirectorySnapshottableFeature().renameSnapshot(path, oldName, newName);
+  }
+
+  /** add DirectorySnapshottableFeature */
+  public void addSnapshottableFeature() {
+    Preconditions.checkState(!isSnapshottable(),
+        "this is already snapshottable, this=%s", this);
+    DirectoryWithSnapshotFeature s = this.getDirectoryWithSnapshotFeature();
+    final DirectorySnapshottableFeature snapshottable =
+        new DirectorySnapshottableFeature(s);
+    if (s != null) {
+      this.removeFeature(s);
-    clear();
-    return newDir;
+    this.addFeature(snapshottable);
-  
+
+  /** remove DirectorySnapshottableFeature */
+  public void removeSnapshottableFeature() {
+    DirectorySnapshottableFeature s = getDirectorySnapshottableFeature();
+    Preconditions.checkState(s != null,
+        "The dir does not have snapshottable feature: this=%s", this);
+    this.removeFeature(s);
+    if (s.getDiffs().asList().size() > 0) {
+      // add a DirectoryWithSnapshotFeature back
+      DirectoryWithSnapshotFeature sf = new DirectoryWithSnapshotFeature(
+          s.getDiffs());
+      addFeature(sf);
+    }
+  }
+
-   * for child replacement is for {@link INodeDirectorySnapshottable} and 
-   * reference nodes.
+   * for child replacement is for reference nodes.
+
+    final DirectorySnapshottableFeature s = getDirectorySnapshottableFeature();
+    if (s != null) {
+      s.dumpTreeRecursively(this, out, prefix, snapshot);
+    }
-  protected static void dumpTreeRecursively(PrintWriter out,
+  public static void dumpTreeRecursively(PrintWriter out,
-  protected static class SnapshotAndINode {
+  public static class SnapshotAndINode {

MOV26 INS26 MOV31 INS40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS8 MOV83 UPD43 MOV43 UPD42 MOV42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS43 MOV43 INS8 UPD43 UPD42 INS44 INS44 INS43 INS8 UPD83 MOV83 INS39 INS42 INS44 INS44 MOV44 INS43 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 UPD83 UPD83 INS42 INS41 UPD42 INS5 UPD42 INS41 INS39 UPD42 MOV42 MOV21 UPD42 MOV42 INS39 INS42 INS43 INS42 UPD42 MOV42 INS41 UPD42 UPD43 UPD42 INS43 INS42 INS83 INS74 INS42 INS42 MOV41 INS43 INS42 INS43 INS42 UPD43 UPD42 INS42 INS21 INS65 INS21 INS60 MOV60 INS25 MOV21 INS65 INS60 MOV21 MOV21 INS25 INS60 INS25 INS32 INS27 INS39 INS85 INS32 INS42 INS32 UPD42 INS42 INS43 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS66 INS32 INS43 INS59 UPD43 MOV27 INS8 INS66 UPD43 MOV43 MOV59 INS27 INS8 UPD66 INS83 INS43 INS59 INS27 INS8 INS42 INS57 INS32 INS33 INS32 INS42 INS42 INS32 UPD42 INS42 MOV32 UPD42 MOV42 INS52 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS42 INS52 INS42 UPD42 MOV42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS45 INS52 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS14 UPD42 MOV21 INS52 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 UPD42 UPD42 INS32 INS34 INS60 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 INS42 INS32 INS52 INS42 INS43 INS42 UPD42 UPD42 INS32 INS42 INS43 INS59 INS32 INS42 INS32 INS42 INS42 INS42 INS52 UPD42 UPD42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 UPD42 MOV42 INS42 INS43 INS32 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL9 DEL39 DEL52 DEL42 DEL43 DEL62 DEL36 DEL38 DEL45 DEL52 DEL42 DEL42 DEL42 DEL32 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL44 DEL83 DEL43 DEL42 DEL43 DEL52 DEL14 DEL59 DEL60 DEL42 DEL32 DEL52 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL52 DEL9 DEL52 DEL32 DEL14 DEL42 DEL42 DEL42 DEL32 DEL43 DEL57 DEL27 DEL45 DEL52 DEL32 DEL21 DEL8 DEL83 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL73 DEL43 DEL42 DEL83 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL83 DEL60 DEL8 DEL25 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL65 DEL66 DEL66