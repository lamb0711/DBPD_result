YARN-6744. Recover component information on YARN native services AM restart. Contributed by Billie Rinaldi

+import org.apache.hadoop.yarn.service.provider.ProviderUtils;
-  private Map<ComponentInstanceId, ComponentInstance> compInstances =
+  private Map<String, ComponentInstance> compInstances =
+          // container recovered on AM restart
+          .addTransition(INIT, INIT, CONTAINER_RECOVERED,
+              new ContainerRecoveredTransition())
-    compInstances.put(id, instance);
+    compInstances.put(instance.getCompInstanceName(), instance);
-        component.requestContainers(event.getDesired());
-        return FLEXING;
+        component.requestContainers(component.pendingInstances.size());
+        return checkIfStable(component);
-            new ArrayList<>(component.compInstances.values());
+            new ArrayList<>(component.getAllComponentInstances());
-          component.compInstances.remove(instance.getCompInstanceId());
+          component.compInstances.remove(instance.getCompInstanceName());
+  private static class ContainerRecoveredTransition extends BaseTransition {
+    @Override
+    public void transition(Component component, ComponentEvent event) {
+      ComponentInstance instance = event.getInstance();
+      Container container = event.getContainer();
+      if (instance == null) {
+        LOG.info("[COMPONENT {}]: Trying to recover {} but event did not " +
+                "specify component instance",
+            component.getName(), container.getId());
+        component.releaseContainer(container);
+        return;
+      }
+      if (instance.hasContainer()) {
+        LOG.info(
+            "[COMPONENT {}]: Instance {} already has container, release " +
+                "surplus container {}",
+            instance.getCompName(), instance.getCompInstanceId(), container
+                .getId());
+        component.releaseContainer(container);
+        return;
+      }
+      component.pendingInstances.remove(instance);
+      LOG.info("[COMPONENT {}]: Recovered {} for component instance {} on " +
+              "host {}, num pending component instances reduced to {} ",
+          component.getName(), container.getId(), instance
+              .getCompInstanceName(), container.getNodeId(), component
+              .pendingInstances.size());
+      instance.setContainer(container);
+      ProviderUtils.initCompInstanceDir(component.getContext().fs, instance);
+      component.getScheduler().addLiveCompInstance(container.getId(), instance);
+      LOG.info("[COMPONENT {}]: Marking {} as started for component " +
+          "instance {}", component.getName(), event.getContainer().getId(),
+          instance.getCompInstanceId());
+      component.compInstanceDispatcher.getEventHandler().handle(
+          new ComponentInstanceEvent(instance.getContainerId(),
+              START));
+      component.incRunningContainers();
+    }
+  }
+
+  private void releaseContainer(Container container) {
+    scheduler.getAmRMClient().releaseAssignedContainer(container.getId());
+    componentMetrics.surplusContainers.incr();
+    scheduler.getServiceMetrics().surplusContainers.incr();
+  }
+
-      scheduler.getAmRMClient().releaseAssignedContainer(container.getId());
-      componentMetrics.surplusContainers.incr();
-      scheduler.getServiceMetrics().surplusContainers.incr();
+      releaseContainer(container);
-          .get(dependency).getAllComponentInstances().values();
+          .get(dependency).getAllComponentInstances();
-  public Map<ComponentInstanceId, ComponentInstance> getAllComponentInstances() {
-    return compInstances;
+  public ComponentInstance getComponentInstance(String componentInstanceName) {
+    return compInstances.get(componentInstanceName);
+  }
+
+  public Collection<ComponentInstance> getAllComponentInstances() {
+    return compInstances.values();

INS26 INS40 INS55 INS31 INS31 UPD74 INS83 INS83 INS42 INS43 INS31 INS83 INS39 INS42 INS44 MOV8 INS83 MOV43 INS42 INS44 INS8 UPD74 UPD43 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS42 INS43 INS42 INS41 UPD43 UPD43 UPD42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS8 INS42 INS32 UPD42 UPD42 INS32 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 MOV21 INS21 INS41 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS41 INS42 INS42 INS21 INS21 INS41 INS40 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS32 INS32 INS32 INS32 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS43 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS32 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 UPD42 INS45 INS45 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 MOV42 MOV42 INS42 INS42 MOV14 INS42 UPD42 INS32 UPD42 UPD42 UPD42 INS14 INS42 INS42 INS43 INS42 DEL42 DEL42 DEL40 DEL41 DEL42 DEL32 DEL42