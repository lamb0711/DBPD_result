HDFS-13869. RBF: Handle NPE for NamenodeBeanMetrics#getFederationMetrics. Contributed by Ranith Sardar.

-  private FederationMetrics getFederationMetrics() {
-    return this.router.getMetrics();
+  private FederationMetrics getFederationMetrics() throws IOException {
+    FederationMetrics metrics = getRouter().getMetrics();
+    if (metrics == null) {
+      throw new IOException("Federated metrics is not initialized");
+    }
+    return metrics;
-    return getFederationMetrics().getUsedCapacity();
+    try {
+      return getFederationMetrics().getUsedCapacity();
+    } catch (IOException e) {
+      LOG.debug("Failed to get the used capacity", e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getRemainingCapacity();
+    try {
+      return getFederationMetrics().getRemainingCapacity();
+    } catch (IOException e) {
+      LOG.debug("Failed to get remaining capacity", e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getTotalCapacity();
+    try {
+      return getFederationMetrics().getTotalCapacity();
+    } catch (IOException e) {
+      LOG.debug("Failed to Get total capacity", e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getProvidedSpace();
+    try {
+      return getFederationMetrics().getProvidedSpace();
+    } catch (IOException e) {
+      LOG.debug("Failed to get provided capacity", e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getNumBlocks();
+    try {
+      return getFederationMetrics().getNumBlocks();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of blocks", e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getNumOfMissingBlocks();
+    try {
+      return getFederationMetrics().getNumOfMissingBlocks();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of missing blocks", e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getNumOfBlocksPendingReplication();
+    try {
+      return getFederationMetrics().getNumOfBlocksPendingReplication();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of blocks pending replica",
+          e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getNumOfBlocksPendingReplication();
+    try {
+      return getFederationMetrics().getNumOfBlocksPendingReplication();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of blocks pending replica",
+          e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getNumOfBlocksUnderReplicated();
+    try {
+      return getFederationMetrics().getNumOfBlocksUnderReplicated();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of blocks under replicated",
+          e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getNumOfBlocksUnderReplicated();
+    try {
+      return getFederationMetrics().getNumOfBlocksUnderReplicated();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of blocks under replicated",
+          e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getNumOfBlocksPendingDeletion();
+    try {
+      return getFederationMetrics().getNumOfBlocksPendingDeletion();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of blocks pending deletion",
+          e.getMessage());
+    }
+    return 0;
-    return this.router.getStartTime();
+    try {
+      return getRouter().getStartTime();
+    } catch (IOException e) {
+      LOG.debug("Failed to get the router startup time", e.getMessage());
+    }
+    return 0;
-    return getFederationMetrics().getNumFiles();
+    try {
+      return getFederationMetrics().getNumFiles();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of files", e.getMessage());
+    }
+    return 0;
-    return this.router.getMetrics().getNumLiveNodes();
+    try {
+      return getFederationMetrics().getNumLiveNodes();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of live nodes", e.getMessage());
+    }
+    return 0;
-    return this.router.getMetrics().getNumDeadNodes();
+    try {
+      return getFederationMetrics().getNumDeadNodes();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of dead nodes", e.getMessage());
+    }
+    return 0;
-    return this.router.getMetrics().getNumDecomLiveNodes();
+    try {
+      return getFederationMetrics().getNumDecomLiveNodes();
+    } catch (IOException e) {
+      LOG.debug("Failed to get the number of live decommissioned datanodes",
+          e.getMessage());
+    }
+    return 0;
-    return this.router.getMetrics().getNumDecomDeadNodes();
+    try {
+      return getFederationMetrics().getNumDecomDeadNodes();
+    } catch (IOException e) {
+      LOG.debug("Failed to get the number of dead decommissioned datanodes",
+          e.getMessage());
+    }
+    return 0;
-    return this.router.getMetrics().getNumDecommissioningNodes();
+    try {
+      return getFederationMetrics().getNumDecommissioningNodes();
+    } catch (IOException e) {
+      LOG.debug("Failed to get number of decommissioning nodes",
+          e.getMessage());
+    }
+    return 0;
+
+  private Router getRouter() throws IOException {
+    if (this.router == null) {
+      throw new IOException("Router is not initialized");
+    }
+    return this.router;
+  }

INS31 INS43 INS8 INS8 INS8 INS8 INS8 INS8 MOV78 MOV78 INS8 MOV78 INS8 MOV78 MOV78 INS8 MOV78 INS8 INS8 MOV78 INS8 INS8 MOV78 INS8 MOV78 INS8 MOV78 INS8 MOV78 INS8 MOV78 INS8 INS83 INS43 INS42 INS43 INS8 INS42 INS60 INS25 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS54 INS41 INS42 INS42 INS25 MOV41 INS43 INS59 INS27 INS8 INS42 MOV8 INS12 INS34 MOV8 INS12 INS34 MOV8 INS12 INS34 MOV8 INS12 INS34 MOV8 INS12 INS34 MOV8 INS12 INS34 MOV8 INS12 INS34 MOV8 INS12 INS34 MOV8 INS12 INS34 MOV8 INS12 INS34 MOV8 INS12 INS34 INS8 INS12 INS34 MOV8 INS12 INS34 INS8 INS12 INS34 INS8 INS12 INS34 INS8 INS12 INS34 INS8 INS12 INS34 INS8 INS12 INS34 INS27 INS8 MOV22 INS42 INS42 INS32 INS42 INS33 INS53 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 MOV41 INS44 INS8 INS44 INS8 MOV41 INS44 INS8 MOV41 INS44 INS8 MOV41 INS44 INS8 INS41 INS44 INS8 MOV41 INS44 INS8 MOV22 INS33 INS53 INS32 MOV42 INS14 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS43 INS42 INS21 INS14 INS42 INS43 INS45 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 UPD42 INS42 INS42 INS45 INS32 UPD42 INS42 INS42 INS45 INS32 UPD42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 UPD42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL32 DEL41 DEL52 DEL42 DEL22 DEL8 DEL52 DEL42 DEL22 DEL8 DEL52 DEL42 DEL22 DEL8 DEL52 DEL42 DEL22 DEL8 DEL8 DEL8 DEL42 DEL32 DEL42 DEL32