HDFS-13395. Ozone: Plugins support in HDSL Datanode Service. Contributed by Nanda Kumar.

+import com.google.common.annotations.VisibleForTesting;
-import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.conf.Configurable;
-import org.apache.hadoop.hdfs.server.datanode.DataNodeServicePlugin;
+import org.apache.hadoop.util.ServicePlugin;
+import org.apache.hadoop.util.StringUtils;
+import java.util.List;
+import static org.apache.hadoop.ozone.OzoneConfigKeys.HDDS_DATANODE_PLUGINS_KEY;
+import static org.apache.hadoop.util.ExitUtil.terminate;
+
-public class HddsDatanodeService implements DataNodeServicePlugin {
+public class HddsDatanodeService implements ServicePlugin {
-  private final boolean isOzoneEnabled;
-
-  public HddsDatanodeService() {
-    try {
-      OzoneConfiguration.activate();
-      this.conf = new OzoneConfiguration();
-      this.isOzoneEnabled = HddsUtils.isHddsEnabled(conf);
-      if (isOzoneEnabled) {
-        this.datanodeDetails = getDatanodeDetails(conf);
-        String hostname = DataNode.getHostName(conf);
-        String ip = InetAddress.getByName(hostname).getHostAddress();
-        this.datanodeDetails.setHostName(hostname);
-        this.datanodeDetails.setIpAddress(ip);
-      }
-    } catch (IOException e) {
-      throw new RuntimeException("Can't start the HDDS datanode plugin", e);
-    }
-  }
+  private List<ServicePlugin> plugins;
-    if (isOzoneEnabled) {
+    OzoneConfiguration.activate();
+    if (service instanceof Configurable) {
+      conf = new OzoneConfiguration(((Configurable) service).getConf());
+    } else {
+      conf = new OzoneConfiguration();
+    }
+    if (HddsUtils.isHddsEnabled(conf)) {
-        DataNode dataNode = (DataNode) service;
-        datanodeDetails.setInfoPort(dataNode.getInfoPort());
-        datanodeDetails.setInfoSecurePort(dataNode.getInfoSecurePort());
+        String hostname = DataNode.getHostName(conf);
+        String ip = InetAddress.getByName(hostname).getHostAddress();
+        datanodeDetails = initializeDatanodeDetails();
+        datanodeDetails.setHostName(hostname);
+        datanodeDetails.setIpAddress(ip);
+
+        //Below block should be removed as part of HDFS-13324
+        if (service != null) {
+          DataNode dataNode = (DataNode) service;
+          datanodeDetails.setInfoPort(dataNode.getInfoPort());
+          datanodeDetails.setInfoSecurePort(dataNode.getInfoSecurePort());
+        }
+        startPlugins();
+        // Starting HDDS Daemons
-   * Returns ContainerNodeIDProto or null in case of Error.
+   * Returns DatanodeDetails or null in case of Error.
-   * @return ContainerNodeIDProto
+   * @return DatanodeDetails
-  private static DatanodeDetails getDatanodeDetails(Configuration conf)
+  private DatanodeDetails initializeDatanodeDetails()
+  private void startPlugins() {
+    try {
+      plugins = conf.getInstances(HDDS_DATANODE_PLUGINS_KEY,
+          ServicePlugin.class);
+    } catch (RuntimeException e) {
+      String pluginsValue = conf.get(HDDS_DATANODE_PLUGINS_KEY);
+      LOG.error("Unable to load HDDS DataNode plugins. " +
+          "Specified list of plugins: {}",
+          pluginsValue, e);
+      throw e;
+    }
+    for (ServicePlugin plugin : plugins) {
+      try {
+        plugin.start(this);
+        LOG.info("Started plug-in {}", plugin);
+      } catch (Throwable t) {
+        LOG.warn("ServicePlugin {} could not be started", plugin, t);
+      }
+    }
+  }
+  public Configuration getConf() {
+    return conf;
+  }
+  @VisibleForTesting
-  @InterfaceAudience.Private
+  @VisibleForTesting
+  public void join() throws InterruptedException {
+    datanodeStateMachine.join();
+  }
+
+    if (plugins != null) {
+      for (ServicePlugin plugin : plugins) {
+        try {
+          plugin.stop();
+          LOG.info("Stopped plug-in {}", plugin);
+        } catch (Throwable t) {
+          LOG.warn("ServicePlugin {} could not be stopped", plugin, t);
+        }
+      }
+    }
+
+  public static HddsDatanodeService createHddsDatanodeService(String args[]) {
+    StringUtils.startupShutdownMessage(HddsDatanodeService.class, args, LOG);
+    return new HddsDatanodeService();
+  }
+
+  public static void main(String args[]) {
+    try {
+      HddsDatanodeService hddsDatanodeService = createHddsDatanodeService(args);
+      hddsDatanodeService.start(null);
+      hddsDatanodeService.join();
+    } catch (Throwable e) {
+      LOG.error("Exception in while starting HddsDatanodeService.", e);
+      terminate(1, e);
+    }
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 INS40 UPD40 UPD40 INS40 INS40 INS40 INS40 UPD43 INS31 INS31 INS31 INS31 UPD42 INS74 UPD42 UPD83 INS39 UPD42 INS83 MOV43 INS42 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS43 UPD42 MOV21 INS25 INS54 INS70 INS41 INS42 INS42 INS42 INS21 INS25 MOV25 INS42 INS43 INS42 INS85 INS21 INS41 INS43 INS42 INS85 INS54 INS42 INS42 INS62 INS8 INS8 MOV32 UPD66 UPD66 INS8 INS12 INS44 INS42 INS8 INS42 INS32 INS27 INS8 INS42 INS32 INS14 INS42 INS8 INS12 INS42 INS43 INS21 MOV21 MOV21 INS44 INS8 INS43 INS42 INS54 INS42 INS42 INS42 INS33 INS70 INS42 INS42 INS57 INS42 INS42 INS43 INS60 INS21 INS21 INS44 INS8 INS42 INS7 INS8 INS43 INS42 INS60 MOV21 INS53 INS42 INS8 MOV12 INS44 INS42 INS8 INS43 INS42 INS43 INS59 INS32 INS32 INS43 INS42 INS21 INS21 INS42 INS14 INS42 MOV60 MOV60 INS21 INS21 INS21 INS25 MOV21 INS21 MOV21 INS42 INS32 INS42 INS43 INS59 INS42 INS21 MOV21 INS43 INS42 INS54 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS32 INS43 INS32 INS7 INS32 INS32 INS27 MOV8 INS32 INS42 INS42 INS42 INS57 INS42 INS42 INS32 INS42 INS42 INS27 UPD42 UPD42 INS32 UPD43 UPD42 INS21 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS42 INS42 INS36 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS45 INS42 INS42 INS52 INS42 UPD42 INS45 UPD42 UPD42 INS32 INS21 INS21 INS44 INS8 INS11 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS32 INS43 INS42 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 DEL83 DEL39 DEL52 DEL42 DEL22 DEL42 DEL83 DEL42 DEL44 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL42 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL54 DEL40 DEL8