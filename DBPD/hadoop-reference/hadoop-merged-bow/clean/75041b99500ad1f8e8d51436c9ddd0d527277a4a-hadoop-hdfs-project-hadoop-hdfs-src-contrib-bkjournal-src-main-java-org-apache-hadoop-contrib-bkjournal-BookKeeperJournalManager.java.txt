HDFS-2717. BookKeeper Journal output stream doesn't check addComplete rc. Contributed by Ivan Kelly.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1340750 13f79535-47bb-0310-9956-ffa450edef68

- *   <name>dfs.namenode.edits.journalPlugin.bookkeeper</name>
+ *   <name>dfs.namenode.edits.journal-plugin.bookkeeper</name>
-    if (currentLedger != null) {
-      throw new IOException("Already writing to a ledger, id="
-                            + currentLedger.getId());
-    }
+      if (currentLedger != null) {
+        // bookkeeper errored on last stream, clean up ledger
+        currentLedger.close();
+      }
-      String znodePath = inprogressZNode();
+      String znodePath = inprogressZNode(txId);
-    String inprogressPath = inprogressZNode();
+    String inprogressPath = inprogressZNode(firstTxId);
-
-        EditLogLedgerMetadata l
-          = EditLogLedgerMetadata.read(zkc, inprogressZNode());
-        long endTxId = recoverLastTxId(l);
-        if (endTxId == HdfsConstants.INVALID_TXID) {
-          LOG.error("Unrecoverable corruption has occurred in segment "
-                    + l.toString() + " at path " + inprogressZNode()
-                    + ". Unable to continue recovery.");
-          throw new IOException("Unrecoverable corruption, please check logs.");
+        List<String> children = zkc.getChildren(ledgerPath, false);
+        for (String child : children) {
+          if (!child.startsWith("inprogress_")) {
+            continue;
+          }
+          String znode = ledgerPath + "/" + child;
+          EditLogLedgerMetadata l
+            = EditLogLedgerMetadata.read(zkc, znode);
+          long endTxId = recoverLastTxId(l);
+          if (endTxId == HdfsConstants.INVALID_TXID) {
+            LOG.error("Unrecoverable corruption has occurred in segment "
+                      + l.toString() + " at path " + znode
+                      + ". Unable to continue recovery.");
+            throw new IOException("Unrecoverable corruption,"
+                                  + " please check logs.");
+          }
+          finalizeLogSegment(l.getFirstTxId(), endTxId);
-        finalizeLogSegment(l.getFirstTxId(), endTxId);
+      } catch (KeeperException ke) {
+        throw new IOException("Couldn't get list of inprogress segments", ke);
+      } catch (InterruptedException ie) {
+        throw new IOException("Interrupted getting list of inprogress segments",
+                              ie);
-  String inprogressZNode() {
-    return ledgerPath + "/inprogress";
+  String inprogressZNode(long startTxid) {
+    return ledgerPath + "/inprogress_" + Long.toString(startTxid, 16);

INS44 INS39 INS42 UPD66 INS25 UPD45 INS32 MOV27 INS8 INS42 INS8 INS12 INS12 INS42 INS42 INS42 INS34 INS21 INS60 INS70 INS44 INS8 INS44 INS8 INS32 INS42 INS74 INS59 INS44 INS42 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS60 MOV60 MOV60 MOV25 MOV21 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS38 INS8 INS43 INS59 MOV43 INS45 INS42 INS43 INS45 INS42 INS32 INS18 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS45 INS42 UPD42 MOV42 INS27 INS42 INS45 INS45 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL32 DEL45 DEL8