HDFS-7478. Move org.apache.hadoop.hdfs.server.namenode.NNConf to FSNamesystem. Contributed by Li Lu.

-  private final NNConf nnConf;
+  private final boolean aclsEnabled;
+  private final boolean xattrsEnabled;
+  private final int xattrMaxSize;
-      this.nnConf = new NNConf(conf);
+
+      this.aclsEnabled = conf.getBoolean(
+          DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY,
+          DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_DEFAULT);
+      LOG.info("ACLs enabled? " + aclsEnabled);
+      this.xattrsEnabled = conf.getBoolean(
+          DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY,
+          DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_DEFAULT);
+      LOG.info("XAttrs enabled? " + xattrsEnabled);
+      this.xattrMaxSize = conf.getInt(
+          DFSConfigKeys.DFS_NAMENODE_MAX_XATTR_SIZE_KEY,
+          DFSConfigKeys.DFS_NAMENODE_MAX_XATTR_SIZE_DEFAULT);
+      Preconditions.checkArgument(xattrMaxSize >= 0,
+          "Cannot set a negative value for the maximum size of an xattr (%s).",
+          DFSConfigKeys.DFS_NAMENODE_MAX_XATTR_SIZE_KEY);
+      final String unlimited = xattrMaxSize == 0 ? " (unlimited)" : "";
+      LOG.info("Maximum size of an xattr: " + xattrMaxSize + unlimited);
-    nnConf.checkAclsConfigFlag();
+    checkAclsConfigFlag();
-    nnConf.checkAclsConfigFlag();
+    checkAclsConfigFlag();
-    nnConf.checkAclsConfigFlag();
+    checkAclsConfigFlag();
-    nnConf.checkAclsConfigFlag();
+    checkAclsConfigFlag();
-    nnConf.checkAclsConfigFlag();
+    checkAclsConfigFlag();
-    nnConf.checkAclsConfigFlag();
+    checkAclsConfigFlag();
-    nnConf.checkXAttrsConfigFlag();
+    checkXAttrsConfigFlag();
-    if (nnConf.xattrMaxSize == 0) {
+    if (xattrMaxSize == 0) {
-    if (size > nnConf.xattrMaxSize) {
+    if (size > xattrMaxSize) {
-          + " name and value is " + nnConf.xattrMaxSize
+          + " name and value is " + xattrMaxSize
-    nnConf.checkXAttrsConfigFlag();
+    checkXAttrsConfigFlag();
-    nnConf.checkXAttrsConfigFlag();
+    checkXAttrsConfigFlag();
-    nnConf.checkXAttrsConfigFlag();
+    checkXAttrsConfigFlag();
+
+  private void checkAclsConfigFlag() throws AclException {
+    if (!aclsEnabled) {
+      throw new AclException(String.format(
+          "The ACL operation has been rejected.  "
+              + "Support for ACLs has been disabled by setting %s to false.",
+          DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY));
+    }
+  }
+
+  private void checkXAttrsConfigFlag() throws IOException {
+    if (!xattrsEnabled) {
+      throw new IOException(String.format(
+          "The XAttr operation has been rejected.  "
+              + "Support for XAttrs has been disabled by setting %s to false.",
+          DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY));
+    }
+  }

INS23 INS23 INS23 INS31 INS31 MOV83 MOV83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS42 UPD42 MOV42 INS25 INS42 INS25 INS38 INS8 INS38 INS8 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS42 INS42 INS42 INS53 INS42 INS53 INS32 INS7 INS32 INS7 INS32 INS83 INS43 INS59 INS32 INS14 INS14 INS32 INS42 INS42 INS27 INS22 INS32 INS42 INS42 INS27 INS22 INS32 INS42 INS42 INS27 INS45 INS40 INS42 INS42 INS16 INS42 INS42 INS27 INS43 INS32 INS43 INS32 UPD42 INS42 INS42 INS40 INS40 INS45 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS45 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS42 INS34 INS27 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS40 INS42 INS42 INS42 INS27 INS40 INS42 INS34 INS45 INS45 INS45 INS45 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL42 DEL42 DEL42