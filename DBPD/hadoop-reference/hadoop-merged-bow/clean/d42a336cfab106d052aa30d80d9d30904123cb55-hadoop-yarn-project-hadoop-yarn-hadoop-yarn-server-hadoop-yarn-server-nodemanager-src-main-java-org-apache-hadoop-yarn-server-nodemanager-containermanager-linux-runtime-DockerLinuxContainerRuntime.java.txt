YARN-5534.  Allow user provided Docker volume mount list.  (Contributed by Shane Kumpf)

+import java.util.regex.Matcher;
+ *   <li>
+ *     {@code YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS} allows users to specify
+ +     additional volume mounts for the Docker container. The value of the
+ *     environment variable should be a comma-separated list of mounts.
+ *     All such mounts must be given as {@code source:dest:mode}, and the mode
+ *     must be "ro" (read-only) or "rw" (read-write) to specify the type of
+ *     access being requested. The requested mounts will be validated by
+ *     container-executor based on the values set in container-executor.cfg for
+ *     {@code docker.allowed.ro-mounts} and {@code docker.allowed.rw-mounts}.
+ *   </li>
+  private static final Pattern USER_MOUNT_PATTERN = Pattern.compile(
+      "(?<=^|,)([^:\\x00]+):([^:\\x00]+):([a-z]+)");
+  @InterfaceAudience.Private
+  public static final String ENV_DOCKER_CONTAINER_MOUNTS =
+      "YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS";
+    if (environment.containsKey(ENV_DOCKER_CONTAINER_MOUNTS)) {
+      Matcher parsedMounts = USER_MOUNT_PATTERN.matcher(
+          environment.get(ENV_DOCKER_CONTAINER_MOUNTS));
+      if (!parsedMounts.find()) {
+        throw new ContainerExecutionException(
+            "Unable to parse user supplied mount list: "
+                + environment.get(ENV_DOCKER_CONTAINER_MOUNTS));
+      }
+      parsedMounts.reset();
+      while (parsedMounts.find()) {
+        String src = parsedMounts.group(1);
+        String dst = parsedMounts.group(2);
+        String mode = parsedMounts.group(3);
+        if (!mode.equals("ro") && !mode.equals("rw")) {
+          throw new ContainerExecutionException(
+              "Invalid mount mode requested for mount: "
+                  + parsedMounts.group());
+        }
+        if (mode.equals("ro")) {
+          runCommand.addReadOnlyMountLocation(src, dst);
+        } else {
+          runCommand.addReadWriteMountLocation(src, dst);
+        }
+      }
+    }
+

INS26 INS40 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS66 INS65 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS42 INS32 INS40 INS42 INS42 INS45 INS25 INS66 INS66 INS66 INS66 INS42 INS42 INS45 INS32 INS8 INS42 INS42 INS42 INS60 INS25 INS21 INS61 INS43 INS59 INS38 INS8 INS32 INS32 INS8 INS42 INS42 INS32 INS32 INS53 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS8 INS8 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS38 INS38 INS53 INS42 INS42 INS45 INS21 INS21 INS42 INS45 INS32 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS32 INS32 INS14 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42