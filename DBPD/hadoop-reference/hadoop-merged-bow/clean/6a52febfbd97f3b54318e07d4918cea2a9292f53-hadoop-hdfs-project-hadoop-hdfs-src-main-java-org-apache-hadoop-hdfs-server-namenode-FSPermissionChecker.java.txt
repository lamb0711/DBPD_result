HDFS-5612. NameNode: change all permission checks to enforce ACLs in addition to permissions. Contributued by Chris Nauroth.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1559281 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclEntryScope;
+import org.apache.hadoop.fs.permission.AclEntryType;
+import org.apache.hadoop.util.StringUtils;
-  private static String toAccessControlString(INode inode) {
-    return "\"" + inode.getFullPathName() + "\":"
-          + inode.getUserName() + ":" + inode.getGroupName()
-          + ":" + (inode.isDirectory()? "d": "-") + inode.getFsPermission();
+  private String toAccessControlString(INode inode, int snapshotId,
+      FsAction access, FsPermission mode) {
+    return toAccessControlString(inode, snapshotId, access, mode, null);
+  /** @return a string for throwing {@link AccessControlException} */
+  private String toAccessControlString(INode inode, int snapshotId,
+      FsAction access, FsPermission mode, List<AclEntry> featureEntries) {
+    StringBuilder sb = new StringBuilder("Permission denied: ")
+      .append("user=").append(user).append(", ")
+      .append("access=").append(access).append(", ")
+      .append("inode=\"").append(inode.getFullPathName()).append("\":")
+      .append(inode.getUserName(snapshotId)).append(':')
+      .append(inode.getGroupName(snapshotId)).append(':')
+      .append(inode.isDirectory() ? 'd' : '-')
+      .append(mode);
+    if (featureEntries != null) {
+      sb.append(':').append(StringUtils.join(",", featureEntries));
+    }
+    return sb.toString();
+  }
+    if (mode.getAclBit()) {
+      // TODO: handling of INodeReference?
+      AclFeature aclFeature = inode instanceof INodeWithAdditionalFields ?
+        ((INodeWithAdditionalFields)inode).getAclFeature() : null;
+      if (aclFeature != null) {
+        List<AclEntry> featureEntries = aclFeature.getEntries();
+        // It's possible that the inode has a default ACL but no access ACL.
+        if (featureEntries.get(0).getScope() == AclEntryScope.ACCESS) {
+          checkAccessAcl(inode, snapshotId, access, mode, featureEntries);
+          return;
+        }
+      }
+    }
+    checkFsPermission(inode, snapshotId, access, mode);
+  }
+  private void checkFsPermission(INode inode, int snapshotId, FsAction access,
+      FsPermission mode) throws AccessControlException {
-    throw new AccessControlException("Permission denied: user=" + user
-        + ", access=" + access + ", inode=" + toAccessControlString(inode));
+    throw new AccessControlException(
+      toAccessControlString(inode, snapshotId, access, mode));
+  }
+
+  /**
+   * Checks requested access against an Access Control List.  This method relies
+   * on finding the ACL data in the relevant portions of {@link FsPermission} and
+   * {@link AclFeature} as implemented in the logic of {@link AclStorage}.  This
+   * method also relies on receiving the ACL entries in sorted order.  This is
+   * assumed to be true, because the ACL modification methods in
+   * {@link AclTransformation} sort the resulting entries.
+   *
+   * More specifically, this method depends on these invariants in an ACL:
+   * - The list must be sorted.
+   * - Each entry in the list must be unique by scope + type + name.
+   * - There is exactly one each of the unnamed user/group/other entries.
+   * - The mask entry must not have a name.
+   * - The other entry must not have a name.
+   * - Default entries may be present, but they are ignored during enforcement.
+   *
+   * @param inode INode accessed inode
+   * @param snapshotId int snapshot ID
+   * @param access FsAction requested permission
+   * @param mode FsPermission mode from inode
+   * @param featureEntries List<AclEntry> ACL entries from AclFeature of inode
+   * @throws AccessControlException if the ACL denies permission
+   */
+  private void checkAccessAcl(INode inode, int snapshotId, FsAction access,
+      FsPermission mode, List<AclEntry> featureEntries)
+      throws AccessControlException {
+    boolean foundMatch = false;
+
+    // Use owner entry from permission bits if user is owner.
+    if (user.equals(inode.getUserName(snapshotId))) {
+      if (mode.getUserAction().implies(access)) {
+        return;
+      }
+      foundMatch = true;
+    }
+
+    // Check named user and group entries if user was not denied by owner entry.
+    if (!foundMatch) {
+      for (AclEntry entry: featureEntries) {
+        if (entry.getScope() == AclEntryScope.DEFAULT) {
+          break;
+        }
+        AclEntryType type = entry.getType();
+        String name = entry.getName();
+        if (type == AclEntryType.USER) {
+          // Use named user entry with mask from permission bits applied if user
+          // matches name.
+          if (user.equals(name)) {
+            FsAction masked = entry.getPermission().and(mode.getGroupAction());
+            if (masked.implies(access)) {
+              return;
+            }
+            foundMatch = true;
+          }
+        } else if (type == AclEntryType.GROUP) {
+          // Use group entry (unnamed or named) with mask from permission bits
+          // applied if user is a member and entry grants access.  If user is a
+          // member of multiple groups that have entries that grant access, then
+          // it doesn't matter which is chosen, so exit early after first match.
+          String group = name == null ? inode.getGroupName(snapshotId) : name;
+          if (groups.contains(group)) {
+            FsAction masked = entry.getPermission().and(mode.getGroupAction());
+            if (masked.implies(access)) {
+              return;
+            }
+            foundMatch = true;
+          }
+        }
+      }
+    }
+
+    // Use other entry if user was not denied by an earlier match.
+    if (!foundMatch && mode.getOtherAction().implies(access)) {
+      return;
+    }
+
+    throw new AccessControlException(
+      toAccessControlString(inode, snapshotId, access, mode, featureEntries));

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 MOV83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 MOV29 UPD83 MOV83 MOV43 MOV42 MOV44 INS44 INS44 INS44 INS44 INS8 MOV29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 UPD42 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS65 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS41 INS39 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS25 INS41 INS43 INS42 INS39 INS42 INS43 INS42 INS42 MOV25 MOV60 INS25 INS21 INS43 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS25 INS25 INS53 INS66 INS65 INS66 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS8 INS32 INS42 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS43 INS39 INS59 INS32 INS8 INS38 INS8 INS27 INS8 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS25 INS21 INS42 INS70 INS38 INS32 INS41 INS43 INS32 INS32 INS42 INS42 INS32 INS43 INS59 INS27 INS8 MOV42 MOV42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS32 INS8 INS7 INS44 INS42 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV16 INS32 INS42 INS32 INS42 INS42 INS16 INS42 INS33 INS60 INS25 INS32 INS42 INS42 INS41 INS42 INS9 INS43 INS42 INS25 INS60 INS60 INS25 INS42 INS42 INS32 INS42 INS13 INS13 INS13 INS42 INS42 INS13 INS42 INS42 INS45 INS42 INS62 INS32 INS33 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS32 INS42 INS32 INS42 INS43 INS36 INS42 INS43 INS43 INS42 INS32 INS32 INS40 INS21 INS41 INS32 INS40 INS10 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS25 INS27 INS8 INS32 INS42 INS13 MOV42 MOV42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS40 INS60 INS25 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS21 INS43 INS59 INS32 INS8 INS32 INS42 INS45 MOV42 MOV42 INS42 INS42 INS43 INS59 INS32 INS8 INS7 INS42 INS42 INS16 INS42 INS42 INS42 INS60 INS25 INS21 INS32 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS42 INS9 INS27 INS32 INS42 INS43 INS59 INS32 INS8 INS7 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS42 INS9 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS14 INS42 INS45 INS43 INS45 INS42 DEL45 DEL45 DEL45 DEL45 DEL32 DEL45 DEL32 DEL45 DEL36 DEL32 DEL27 DEL41 DEL8 DEL31 DEL45 DEL42 DEL45 DEL42 DEL45 DEL32 DEL27