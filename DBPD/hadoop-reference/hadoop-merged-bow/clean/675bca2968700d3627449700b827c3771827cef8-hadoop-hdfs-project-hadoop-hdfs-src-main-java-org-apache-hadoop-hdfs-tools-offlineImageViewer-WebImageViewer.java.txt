HDFS-7280. Use netty 4 in WebImageViewer. Contributed by Haohui Mai.

-import java.io.IOException;
-import java.net.InetSocketAddress;
-import java.util.concurrent.Executors;
-
+import com.google.common.annotations.VisibleForTesting;
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.ChannelPipeline;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.group.ChannelGroup;
+import io.netty.channel.group.DefaultChannelGroup;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.SocketChannel;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.codec.http.HttpRequestDecoder;
+import io.netty.handler.codec.http.HttpResponseEncoder;
+import io.netty.handler.codec.string.StringEncoder;
+import io.netty.util.concurrent.GlobalEventExecutor;
-import org.jboss.netty.bootstrap.ServerBootstrap;
-import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelFactory;
-import org.jboss.netty.channel.ChannelHandlerContext;
-import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.channel.ChannelStateEvent;
-import org.jboss.netty.channel.Channels;
-import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
-import org.jboss.netty.channel.group.ChannelGroup;
-import org.jboss.netty.channel.group.DefaultChannelGroup;
-import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;
-import org.jboss.netty.handler.codec.http.HttpRequestDecoder;
-import org.jboss.netty.handler.codec.http.HttpResponseEncoder;
-import org.jboss.netty.handler.codec.string.StringEncoder;
-import com.google.common.annotations.VisibleForTesting;
+import java.io.Closeable;
+import java.io.IOException;
+import java.net.InetSocketAddress;
-public class WebImageViewer {
+public class WebImageViewer implements Closeable {
-  private final ChannelFactory factory =
-      new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),
-          Executors.newCachedThreadPool(), 1);
-  private final ServerBootstrap bootstrap = new ServerBootstrap(factory);
-  static final ChannelGroup allChannels =
-      new DefaultChannelGroup("WebImageViewer");
+  private final ServerBootstrap bootstrap;
+  private final EventLoopGroup bossGroup;
+  private final EventLoopGroup workerGroup;
+  private final ChannelGroup allChannels;
+    this.bossGroup = new NioEventLoopGroup();
+    this.workerGroup = new NioEventLoopGroup();
+    this.allChannels = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);
+    this.bootstrap = new ServerBootstrap()
+      .group(bossGroup, workerGroup)
+      .channel(NioServerSocketChannel.class);
-  public void initServerAndWait(String fsimage) throws IOException {
-    initServer(fsimage);
+  public void start(String fsimage) throws IOException {
-      channel.getCloseFuture().await();
+      initServer(fsimage);
+      channel.closeFuture().await();
-      shutdown();
+      close();
-  public void initServer(String fsimage) throws IOException {
-    FSImageLoader loader = FSImageLoader.load(fsimage);
+  public void initServer(String fsimage)
+          throws IOException, InterruptedException {
+    final FSImageLoader loader = FSImageLoader.load(fsimage);
-    ChannelPipeline pipeline = Channels.pipeline();
-    pipeline.addLast("channelTracker", new SimpleChannelUpstreamHandler() {
+    bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {
-      public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e)
-          throws Exception {
-        allChannels.add(e.getChannel());
+      protected void initChannel(SocketChannel ch) throws Exception {
+        ChannelPipeline p = ch.pipeline();
+        p.addLast(new HttpRequestDecoder(),
+          new StringEncoder(),
+          new HttpResponseEncoder(),
+          new FSImageHandler(loader, allChannels));
-    pipeline.addLast("httpDecoder", new HttpRequestDecoder());
-    pipeline.addLast("requestHandler", new FSImageHandler(loader));
-    pipeline.addLast("stringEncoder", new StringEncoder());
-    pipeline.addLast("httpEncoder", new HttpResponseEncoder());
-    bootstrap.setPipeline(pipeline);
-    channel = bootstrap.bind(address);
+
+    channel = bootstrap.bind(address).sync().channel();
-    address = (InetSocketAddress) channel.getLocalAddress();
-    LOG.info("WebImageViewer started. Listening on " + address.toString()
-        + ". Press Ctrl+C to stop the viewer.");
-  }
-
-  /**
-   * Stop WebImageViewer.
-   */
-  @VisibleForTesting
-  public void shutdown() {
-    allChannels.close().awaitUninterruptibly();
-    factory.releaseExternalResources();
+    address = (InetSocketAddress) channel.localAddress();
+    LOG.info("WebImageViewer started. Listening on " + address.toString() + ". Press Ctrl+C to stop the viewer.");
+
+  @Override
+  public void close() {
+    allChannels.close().awaitUninterruptibly();
+    bossGroup.shutdownGracefully();
+    workerGroup.shutdownGracefully();
+  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS43 INS23 INS42 INS83 INS83 MOV43 INS59 UPD43 INS43 UPD83 UPD42 INS43 UPD42 INS42 UPD42 UPD42 INS42 UPD42 INS21 INS21 INS21 INS21 INS42 UPD42 INS21 INS7 INS7 INS7 INS7 INS83 INS32 INS22 INS14 INS22 INS14 INS22 MOV14 INS22 INS32 MOV21 UPD42 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS52 INS42 INS43 INS52 INS42 INS43 INS52 INS42 INS40 INS52 INS42 INS32 INS42 INS57 INS74 INS32 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS43 INS43 INS43 MOV32 INS42 UPD42 INS42 UPD42 UPD42 UPD42 MOV42 INS42 UPD83 UPD42 INS8 UPD43 UPD42 INS60 MOV21 UPD42 MOV43 INS59 INS42 INS32 UPD42 UPD42 MOV14 MOV14 MOV14 MOV14 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL14 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL45 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL66 DEL65 DEL29