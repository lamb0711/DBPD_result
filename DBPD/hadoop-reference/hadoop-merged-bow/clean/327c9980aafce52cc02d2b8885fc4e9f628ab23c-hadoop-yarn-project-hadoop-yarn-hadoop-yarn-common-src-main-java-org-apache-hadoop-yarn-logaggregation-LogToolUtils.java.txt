YARN-6100. Improve YARN webservice to output aggregated container logs. Contributed by Xuan Gong.

+import java.io.InputStream;
+import java.io.OutputStream;
+import java.nio.charset.Charset;
+import org.apache.commons.lang.StringUtils;
+import org.apache.hadoop.fs.HarFs;
+import org.apache.hadoop.fs.Path;
+  public static final String CONTAINER_ON_NODE_PATTERN =
+      "Container: %s on %s";
+
+
+  /**
+   * Output container log.
+   * @param containerId the containerId
+   * @param nodeId the nodeId
+   * @param fileName the log file name
+   * @param fileLength the log file length
+   * @param outputSize the output size
+   * @param lastModifiedTime the log file last modified time
+   * @param fis the log file input stream
+   * @param os the output stream
+   * @param buf the buffer
+   * @param logType the log type.
+   * @throws IOException if we can not access the log file.
+   */
+  public static void outputContainerLog(String containerId, String nodeId,
+      String fileName, long fileLength, long outputSize,
+      String lastModifiedTime, InputStream fis, OutputStream os,
+      byte[] buf, ContainerLogType logType) throws IOException {
+    long toSkip = 0;
+    long totalBytesToRead = fileLength;
+    long skipAfterRead = 0;
+    if (outputSize < 0) {
+      long absBytes = Math.abs(outputSize);
+      if (absBytes < fileLength) {
+        toSkip = fileLength - absBytes;
+        totalBytesToRead = absBytes;
+      }
+      org.apache.hadoop.io.IOUtils.skipFully(fis, toSkip);
+    } else {
+      if (outputSize < fileLength) {
+        totalBytesToRead = outputSize;
+        skipAfterRead = fileLength - outputSize;
+      }
+    }
+
+    long curRead = 0;
+    long pendingRead = totalBytesToRead - curRead;
+    int toRead = pendingRead > buf.length ? buf.length
+        : (int) pendingRead;
+    int len = fis.read(buf, 0, toRead);
+    boolean keepGoing = (len != -1 && curRead < totalBytesToRead);
+    if (keepGoing) {
+      StringBuilder sb = new StringBuilder();
+      String containerStr = String.format(
+          LogToolUtils.CONTAINER_ON_NODE_PATTERN,
+          containerId, nodeId);
+      sb.append(containerStr + "\n");
+      sb.append("LogType: " + logType + "\n");
+      sb.append(StringUtils.repeat("=", containerStr.length()) + "\n");
+      sb.append("FileName:" + fileName + "\n");
+      sb.append("LogLastModifiedTime:" + lastModifiedTime + "\n");
+      sb.append("LogLength:" + Long.toString(fileLength) + "\n");
+      sb.append("LogContents:\n");
+      byte[] b = sb.toString().getBytes(
+          Charset.forName("UTF-8"));
+      os.write(b, 0, b.length);
+    }
+    while (keepGoing) {
+      os.write(buf, 0, len);
+      curRead += len;
+
+      pendingRead = totalBytesToRead - curRead;
+      toRead = pendingRead > buf.length ? buf.length
+          : (int) pendingRead;
+      len = fis.read(buf, 0, toRead);
+      keepGoing = (len != -1 && curRead < totalBytesToRead);
+    }
+    org.apache.hadoop.io.IOUtils.skipFully(fis, skipAfterRead);
+    os.flush();
+  }
+
+  public static boolean outputAggregatedContainerLog(Configuration conf,
+      ApplicationId appId, String appOwner,
+      String containerId, String nodeId,
+      String logFileName, long outputSize, OutputStream os,
+      byte[] buf) throws IOException {
+    boolean findLogs = false;
+    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils
+        .getRemoteNodeFileDir(conf, appId, appOwner);
+    while (nodeFiles != null && nodeFiles.hasNext()) {
+      final FileStatus thisNodeFile = nodeFiles.next();
+      String nodeName = thisNodeFile.getPath().getName();
+      if (nodeName.equals(appId + ".har")) {
+        Path p = new Path("har:///"
+            + thisNodeFile.getPath().toUri().getRawPath());
+        nodeFiles = HarFs.get(p.toUri(), conf).listStatusIterator(p);
+        continue;
+      }
+      if ((nodeId == null || nodeName.contains(LogAggregationUtils
+          .getNodeString(nodeId))) && !nodeName.endsWith(
+              LogAggregationUtils.TMP_FILE_SUFFIX)) {
+        AggregatedLogFormat.LogReader reader = null;
+        try {
+          reader = new AggregatedLogFormat.LogReader(conf,
+              thisNodeFile.getPath());
+          DataInputStream valueStream;
+          LogKey key = new LogKey();
+          valueStream = reader.next(key);
+          while (valueStream != null && !key.toString()
+              .equals(containerId)) {
+            // Next container
+            key = new LogKey();
+            valueStream = reader.next(key);
+          }
+          if (valueStream == null) {
+            continue;
+          }
+          while (true) {
+            try {
+              String fileType = valueStream.readUTF();
+              String fileLengthStr = valueStream.readUTF();
+              long fileLength = Long.parseLong(fileLengthStr);
+              if (fileType.equalsIgnoreCase(logFileName)) {
+                LogToolUtils.outputContainerLog(containerId,
+                    nodeId, fileType, fileLength, outputSize,
+                    Times.format(thisNodeFile.getModificationTime()),
+                    valueStream, os, buf, ContainerLogType.AGGREGATED);
+                StringBuilder sb = new StringBuilder();
+                String endOfFile = "End of LogFile:" + fileType;
+                sb.append("\n" + endOfFile + "\n");
+                sb.append(StringUtils.repeat("*", endOfFile.length() + 50)
+                    + "\n\n");
+                byte[] b = sb.toString().getBytes(Charset.forName("UTF-8"));
+                os.write(b, 0, b.length);
+                findLogs = true;
+              } else {
+                long totalSkipped = 0;
+                long currSkipped = 0;
+                while (currSkipped != -1 && totalSkipped < fileLength) {
+                  currSkipped = valueStream.skip(
+                      fileLength - totalSkipped);
+                  totalSkipped += currSkipped;
+                }
+              }
+            } catch (EOFException eof) {
+              break;
+            }
+          }
+        } finally {
+          if (reader != null) {
+            reader.close();
+          }
+        }
+      }
+    }
+    os.flush();
+    return findLogs;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS45 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS25 INS61 INS21 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS5 INS42 INS42 INS60 INS60 INS61 INS21 INS41 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS42 INS8 INS42 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS39 INS59 INS74 INS59 INS27 INS8 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS34 INS60 INS25 INS21 INS25 INS42 INS34 INS42 INS27 INS42 INS16 INS42 INS32 INS42 INS36 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS43 INS42 INS32 INS27 INS32 INS60 INS60 INS25 INS25 INS42 INS42 INS39 INS59 INS27 INS8 INS32 INS27 INS8 INS42 INS42 INS27 INS40 INS11 INS42 INS42 INS42 INS34 INS42 INS27 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS5 INS59 INS32 INS32 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS83 INS43 INS59 INS43 INS59 INS32 INS8 INS27 INS8 INS42 INS32 INS42 INS42 INS21 INS21 INS40 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS40 INS39 INS42 INS27 INS27 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS45 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS42 INS16 INS42 INS32 INS42 INS36 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS60 INS21 INS18 INS36 INS38 INS60 INS54 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS42 INS38 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS32 INS45 INS32 INS42 INS32 INS42 INS42 INS27 INS40 INS11 INS42 INS42 INS42 INS34 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS45 INS43 INS59 INS7 INS27 INS32 INS43 INS59 INS8 INS8 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS34 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS40 INS39 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS27 INS32 INS42 INS42 INS40 INS40 INS42 INS33 INS21 INS60 INS60 INS21 INS61 INS25 INS61 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS43 INS27 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS7 INS43 INS59 INS43 INS59 INS7 INS27 INS8 INS27 INS8 INS9 INS8 INS27 INS8 INS34 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS27 INS38 INS21 INS21 INS42 INS33 INS18 INS54 INS42 INS33 INS21 INS32 INS42 INS42 INS42 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS33 INS32 INS7 INS7 INS8 INS12 INS32 INS32 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS32 INS60 INS60 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS8 INS8 INS43 INS42 INS10 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS21 INS60 INS60 INS21 INS21 INS60 INS21 INS21 INS60 INS60 INS61 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS5 INS59 INS32 INS7 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS34 INS40 INS42 INS9 INS42 INS34 INS42 INS34 INS27 INS27 INS21 INS21 INS42 INS42 INS32 INS43 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS32 INS42 INS38 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS45 INS27 INS42 INS42 INS42 INS42 INS45 INS34 INS42 INS32 INS42 INS42 INS32 INS34 INS42 INS42 INS27 INS42 INS42 INS42 INS42