YARN-8249. Fixed few REST APIs in RMWebServices to have static-user check. Contributed by Sunil Govindan.

-  private void init() {
+  /**
+   * initForReadableEndpoints does the init for all readable REST end points.
+   */
+  private void initForReadableEndpoints() {
+  /**
+   * initForWritableEndpoints does the init and acls verification for all
+   * writable REST end points.
+   *
+   * @param callerUGI
+   *          remote caller who initiated the request
+   * @param doAdminACLsCheck
+   *          boolean flag to indicate whether ACLs check is needed
+   * @throws AuthorizationException
+   *           in case of no access to perfom this op.
+   */
+  private void initForWritableEndpoints(UserGroupInformation callerUGI,
+      boolean doAdminACLsCheck) throws AuthorizationException {
+    // clear content type
+    response.setContentType(null);
+
+    if (callerUGI == null) {
+      String msg = "Unable to obtain user name, user not authenticated";
+      throw new AuthorizationException(msg);
+    }
+
+    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
+      String msg = "The default static user cannot carry out this operation.";
+      throw new ForbiddenException(msg);
+    }
+
+    if (doAdminACLsCheck) {
+      ApplicationACLsManager aclsManager = rm.getApplicationACLsManager();
+      if (aclsManager.areACLsEnabled()) {
+        if (!aclsManager.isAdmin(callerUGI)) {
+          String msg = "Only admins can carry out this operation.";
+          throw new ForbiddenException(msg);
+        }
+      }
+    }
+  }
+
-    init();
+    initForReadableEndpoints();
-    init();
+    initForReadableEndpoints();
-    init();
+    initForReadableEndpoints();
+
-    init();
-    ApplicationACLsManager aclsManager = rm.getApplicationACLsManager();
-    if (aclsManager.areACLsEnabled()) {
-      if (callerUGI == null || !aclsManager.isAdmin(callerUGI)) {
-        String msg = "Only admins can carry out this operation.";
-        throw new ForbiddenException(msg);
-      }
-    }
+    initForWritableEndpoints(callerUGI, true);
+
-    init();
+    initForReadableEndpoints();
+
-    init();
+    initForReadableEndpoints();
+
+
+    initForReadableEndpoints();
+
-    init();
-    YarnScheduler scheduler = rm.getRMContext().getScheduler();
+    initForReadableEndpoints();
+    YarnScheduler scheduler = rm.getRMContext().getScheduler();
-    YarnScheduler scheduler = rm.getRMContext().getScheduler();
+    initForReadableEndpoints();
+    YarnScheduler scheduler = rm.getRMContext().getScheduler();
-    init();
+    initForReadableEndpoints();
-    init();
+    initForReadableEndpoints();
+
+    initForReadableEndpoints();
-    init();
-    init(res);
+    initForReadableEndpoints(res);
-    init(res);
+    initForReadableEndpoints(res);
-    init(res);
+    initForReadableEndpoints(res);
-    init();
+    initForReadableEndpoints();
+
-
-    init();
-    if (callerUGI == null) {
-      String msg = "Unable to obtain user name, user not authenticated";
-      throw new AuthorizationException(msg);
-    }
-
-    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
-      String msg = "The default static user cannot carry out this operation.";
-      return Response.status(Status.FORBIDDEN).entity(msg).build();
-    }
+    initForWritableEndpoints(callerUGI, false);
-    init();
+    initForReadableEndpoints();
-    init();
+    initForReadableEndpoints();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    initForWritableEndpoints(callerUGI, false);
+
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    initForWritableEndpoints(callerUGI, false);
+
-    init();
-    init();
+    initForReadableEndpoints();
-    init();
-
-    if (callerUGI == null) {
-      String msg = "Unable to obtain user name, user not authenticated for"
-          + " post to .../add-node-labels";
-      throw new AuthorizationException(msg);
-    }
+    initForWritableEndpoints(callerUGI, false);
+
-    init();
-
-    if (callerUGI == null) {
-      String msg = "Unable to obtain user name, user not authenticated for"
-          + " post to .../remove-node-labels";
-      throw new AuthorizationException(msg);
-    }
+    initForWritableEndpoints(callerUGI, false);
+
-    init();
+    initForReadableEndpoints();
-    init();
+    initForReadableEndpoints();
+
-    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    initForWritableEndpoints(callerUGI, false);
+
-    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
-    if (callerUGI == null) {
-      throw new AuthorizationException(
-          "Unable to obtain user name, user not authenticated");
-    }
-
-    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
-      return Response.status(Status.FORBIDDEN)
-          .entity("The default static user cannot carry out this operation.")
-          .build();
-    }
-
-    init();
+    initForReadableEndpoints();
+
-    init();
-    if (callerUGI == null) {
-      String msg = "Unable to obtain user name, user not authenticated";
-      throw new AuthorizationException(msg);
-    }
-
-    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
-      String msg = "The default static user cannot carry out this operation.";
-      return Response.status(Status.FORBIDDEN).entity(msg).build();
-    }
+    initForWritableEndpoints(callerUGI, false);
-    init();
-    if (callerUGI == null) {
-      throw new AuthorizationException(
-          "Unable to obtain user name, " + "user not authenticated");
-    }
-    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
-      String msg = "The default static user cannot carry out this operation.";
-      return Response.status(Status.FORBIDDEN).entity(msg).build();
-    }
+    initForWritableEndpoints(callerUGI, false);
-    init();
-    if (callerUGI == null) {
-      throw new AuthorizationException(
-          "Unable to obtain user name, " + "user not authenticated");
-    }
-
-    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
-      String msg = "The default static user cannot carry out this operation.";
-      return Response.status(Status.FORBIDDEN).entity(msg).build();
-    }
+    initForWritableEndpoints(callerUGI, false);
-  private UserGroupInformation createKerberosUserGroupInformation(
-      HttpServletRequest hsr) throws AuthorizationException, YarnException {
-
-    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
-    if (callerUGI == null) {
-      String msg = "Unable to obtain user name, user not authenticated";
-      throw new AuthorizationException(msg);
-    }
+  private void createKerberosUserGroupInformation(HttpServletRequest hsr,
+      UserGroupInformation callerUGI)
+      throws AuthorizationException, YarnException {
-      String msg =
-          "Delegation token operations cannot be carried out using delegation"
-              + " token authentication.";
+      String msg = "Delegation token operations cannot be carried out using "
+          + "delegation token authentication.";
-
-    callerUGI.setAuthenticationMethod(AuthenticationMethod.KERBEROS);
-    return callerUGI;
-    init();
-    UserGroupInformation callerUGI;
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    initForWritableEndpoints(callerUGI, false);
+
-      callerUGI = createKerberosUserGroupInformation(hsr);
+      createKerberosUserGroupInformation(hsr, callerUGI);
+      callerUGI.setAuthenticationMethod(AuthenticationMethod.KERBEROS);
-    init();
-    UserGroupInformation callerUGI;
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    initForWritableEndpoints(callerUGI, false);
+
-      callerUGI = createKerberosUserGroupInformation(hsr);
+      createKerberosUserGroupInformation(hsr, callerUGI);
+      callerUGI.setAuthenticationMethod(AuthenticationMethod.KERBEROS);
-    init();
-    UserGroupInformation callerUGI;
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    initForWritableEndpoints(callerUGI, false);
+
-      callerUGI = createKerberosUserGroupInformation(hsr);
+      createKerberosUserGroupInformation(hsr, callerUGI);
+      callerUGI.setAuthenticationMethod(AuthenticationMethod.KERBEROS);
-    init();
-    if (callerUGI == null) {
-      throw new AuthorizationException(
-          "Unable to obtain user name, " + "user not authenticated");
-    }
-    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
-      String msg = "The default static user cannot carry out this operation.";
-      return Response.status(Status.FORBIDDEN).entity(msg).build();
-    }
+    initForWritableEndpoints(callerUGI, false);
-    init();
-    if (callerUGI == null) {
-      throw new AuthorizationException(
-          "Unable to obtain user name, " + "user not authenticated");
-    }
-    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
-      String msg = "The default static user cannot carry out this operation.";
-      return Response.status(Status.FORBIDDEN).entity(msg).build();
-    }
+    initForWritableEndpoints(callerUGI, false);
-    init();
-    if (callerUGI == null) {
-      throw new AuthorizationException(
-          "Unable to obtain user name, " + "user not authenticated");
-    }
-    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
-      String msg = "The default static user cannot carry out this operation.";
-      return Response.status(Status.FORBIDDEN).entity(msg).build();
-    }
+    initForWritableEndpoints(callerUGI, false);
-    init();
-    if (callerUGI == null) {
-      throw new AuthorizationException(
-          "Unable to obtain user name, " + "user not authenticated");
-    }
-    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
-      String msg = "The default static user cannot carry out this operation.";
-      return Response.status(Status.FORBIDDEN).entity(msg).build();
-    }
+    initForWritableEndpoints(callerUGI, false);
-    init();
+    initForReadableEndpoints();
-    init();
+    initForReadableEndpoints();
-    init();
+    initForReadableEndpoints();
-    init();
-    if (callerUGI == null) {
-      throw new AuthorizationException(
-          "Unable to obtain user name, user not authenticated");
-    }
-
-    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
-      return Response.status(Status.FORBIDDEN)
-          .entity("The default static user cannot carry out this operation.")
-          .build();
-    }
+    initForWritableEndpoints(callerUGI, false);
-    init();
-    ApplicationACLsManager aclsManager = rm.getApplicationACLsManager();
-    if (aclsManager.areACLsEnabled()) {
-      if (callerUGI == null || !aclsManager.isAdmin(callerUGI)) {
-        String msg = "Only admins can carry out this operation.";
-        throw new ForbiddenException(msg);
-      }
-    }
+    initForWritableEndpoints(callerUGI, true);
-    init();
+    initForReadableEndpoints();

INS31 INS29 UPD42 INS29 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 MOV21 MOV21 MOV21 MOV21 MOV60 INS39 INS42 INS44 INS65 INS65 INS65 INS65 INS65 MOV43 INS42 INS39 INS42 INS21 MOV25 INS25 INS25 INS21 INS21 INS21 INS60 INS21 INS60 INS21 INS21 INS21 INS21 MOV43 INS42 MOV60 INS54 INS60 INS21 MOV54 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS32 MOV27 INS8 INS42 INS8 INS32 INS32 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS32 INS32 MOV42 INS8 MOV12 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS33 INS60 INS53 MOV60 MOV25 UPD42 UPD42 UPD42 UPD42 INS42 INS9 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 INS9 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS9 UPD42 UPD42 INS42 INS9 UPD42 INS42 INS9 UPD42 UPD42 UPD42 INS42 INS9 UPD42 UPD42 MOV42 MOV42 INS9 UPD42 MOV42 MOV42 INS9 UPD42 MOV42 MOV42 INS9 UPD42 INS42 INS9 INS21 INS21 INS42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS9 MOV21 INS32 INS42 INS42 INS9 INS21 UPD42 MOV42 MOV42 INS9 UPD42 MOV42 MOV42 INS9 UPD42 MOV42 MOV42 INS9 UPD42 MOV42 MOV42 INS9 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 INS9 UPD42 MOV42 MOV42 INS9 UPD42 MOV43 INS59 INS14 INS42 INS42 INS9 INS42 INS42 INS9 INS32 INS32 UPD42 MOV42 MOV42 INS9 INS32 INS42 INS42 INS9 INS32 INS32 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS40 MOV42 MOV42 INS42 MOV42 MOV42 INS42 INS42 INS42 INS40 INS42 MOV38 UPD45 UPD45 INS42 INS42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL43 DEL42 DEL42 DEL41 DEL42 DEL59 DEL60 DEL42 DEL32 DEL7 DEL42 DEL32 DEL21 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL54 DEL42 DEL32 DEL21 DEL42 DEL32 DEL7 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL40 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25