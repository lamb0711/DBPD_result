YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.

+import java.io.IOException;
+import java.net.InetSocketAddress;
+import org.apache.hadoop.net.NetUtils;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.exceptions.YarnException;
+import org.apache.hadoop.yarn.ipc.YarnRPC;
+import org.apache.hadoop.yarn.server.api.AggregatorNodemanagerProtocol;
+import org.apache.hadoop.yarn.server.api.protocolrecords.ReportNewAggregatorsInfoRequest;
+  
+  private String timelineRestServerBindAddress;
+  
+  private AggregatorNodemanagerProtocol nmAggregatorService;
+  
+  private InetSocketAddress nmAggregatorServiceAddress;
+  public void serviceInit(Configuration conf) throws Exception {
+    this.nmAggregatorServiceAddress = conf.getSocketAddr(
+        YarnConfiguration.NM_BIND_HOST,
+        YarnConfiguration.NM_AGGREGATOR_SERVICE_ADDRESS,
+        YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_ADDRESS,
+        YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_PORT);
+    
+  }
+  
+  @Override
-  public TimelineAggregator putIfAbsent(String id, TimelineAggregator aggregator) {
+  public TimelineAggregator putIfAbsent(ApplicationId appId, 
+      TimelineAggregator aggregator) {
+    String id = appId.toString();
+    TimelineAggregator aggregatorInTable;
+    boolean aggregatorIsNew = false;
-      TimelineAggregator aggregatorInTable = aggregators.get(id);
+      aggregatorInTable = aggregators.get(id);
-          return aggregator;
+          aggregatorInTable = aggregator;
+          aggregatorIsNew = true;
-        return aggregatorInTable;
+      }
+      
+    }
+    // Report to NM if a new aggregator is added.
+    if (aggregatorIsNew) {
+      try {
+        reportNewAggregatorToNM(appId);
+      } catch (Exception e) {
+        // throw exception here as it cannot be used if failed report to NM
+        LOG.error("Failed to report a new aggregator for application: " + appId + 
+            " to NM Aggregator Services.");
+        throw new YarnRuntimeException(e);
+    
+    return aggregatorInTable;
-    LOG.info("Instantiating the per-node aggregator webapp at " + bindAddress);
+    this.timelineRestServerBindAddress = WebAppUtils.getResolvedAddress(
+        NetUtils.createSocketAddr(bindAddress));
+    LOG.info("Instantiating the per-node aggregator webapp at " + 
+        timelineRestServerBindAddress);
+  
+  private void reportNewAggregatorToNM(ApplicationId appId) 
+      throws YarnException, IOException {
+    this.nmAggregatorService = getNMAggregatorService();
+    ReportNewAggregatorsInfoRequest request = 
+        ReportNewAggregatorsInfoRequest.newInstance(appId,
+            this.timelineRestServerBindAddress);
+    LOG.info("Report a new aggregator for application: " + appId + 
+        " to NM Aggregator Services.");
+    nmAggregatorService.reportNewAggregatorInfo(request);
+  }
+  
+  // protected for test
+  protected AggregatorNodemanagerProtocol getNMAggregatorService(){
+    Configuration conf = getConfig();
+    final YarnRPC rpc = YarnRPC.create(conf);
+    
+    // TODO Security settings.
+    return (AggregatorNodemanagerProtocol) rpc.getProxy(
+        AggregatorNodemanagerProtocol.class,
+        nmAggregatorServiceAddress, conf);
+  }
+  

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS21 INS43 UPD42 INS60 INS60 INS60 INS25 MOV41 INS21 INS43 INS42 INS42 INS42 INS21 INS60 INS21 INS21 INS42 INS60 INS60 INS41 INS42 INS7 INS42 MOV43 INS59 MOV43 INS59 INS39 INS59 INS42 INS8 INS7 INS42 INS7 INS43 INS59 INS32 INS32 INS43 INS59 INS83 INS43 INS59 INS11 INS22 INS32 INS42 INS32 INS42 INS42 INS9 INS21 INS54 INS22 INS32 INS22 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS32 INS52 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS7 INS8 INS12 INS52 INS42 INS42 INS42 INS32 UPD42 INS52 INS42 INS42 INS42 INS42 INS42 INS22 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS42 MOV32 INS21 INS44 INS8 INS42 INS42 INS42 INS52 INS42 INS43 INS32 INS43 INS42 INS21 INS53 INS42 INS21 INS21 INS42 INS42 INS42 INS32 INS14 INS7 INS7 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS45 INS42 DEL42 DEL59 DEL60 DEL42 DEL41