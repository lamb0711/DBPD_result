YARN-7538. Fix performance regression introduced by Capacity Scheduler absolute min/max resource refactoring. (Sunil G via wangda)

Change-Id: Ic9bd7e599c56970fe01cb0e1bba6df7d1f77eb29

+import java.util.concurrent.atomic.AtomicReferenceArray;
-  protected Map<String, UsageByLabel> usages;
+  protected final Map<String, UsageByLabel> usages;
+  private final UsageByLabel noLabelUsages;
-  private static final String NL = CommonNodeLabelsManager.NO_LABEL;
-    usages = new HashMap<String, UsageByLabel>();
-    usages.put(NL, new UsageByLabel(NL));
+    usages = new HashMap<>();
+
+    // For default label, avoid map for faster access.
+    noLabelUsages = new UsageByLabel();
+    usages.put(CommonNodeLabelsManager.NO_LABEL, noLabelUsages);
-            9), EFF_MAX_RESOURCE(
-                10), EFF_MIN_RESOURCE_UP(11), EFF_MAX_RESOURCE_UP(12);
+            9), EFF_MAX_RESOURCE(10);
-    private ResourceType(int value) {
+    ResourceType(int value) {
-    private Resource[] resArr;
+    private final AtomicReferenceArray<Resource> resArr;
-    public UsageByLabel(String label) {
-      resArr = new Resource[ResourceType.values().length];
-      for (int i = 0; i < resArr.length; i++) {
-        resArr[i] = Resource.newInstance(0, 0);
-      };
+    public UsageByLabel() {
+      resArr = new AtomicReferenceArray<>(ResourceType.values().length);
+      for (int i = 0; i < resArr.length(); i++) {
+        resArr.set(i, Resource.newInstance(0, 0));
+      }
-      return resArr[ResourceType.USED.idx];
+      return resArr.get(ResourceType.USED.idx);
-      sb.append("{used=" + resArr[0] + "%, ");
-      sb.append("pending=" + resArr[1] + "%, ");
-      sb.append("am_used=" + resArr[2] + "%, ");
-      sb.append("reserved=" + resArr[3] + "%}");
-      sb.append("min_eff=" + resArr[9] + "%, ");
-      sb.append("max_eff=" + resArr[10] + "%}");
-      sb.append("min_effup=" + resArr[11] + "%, ");
+      sb.append("{used=" + resArr.get(ResourceType.USED.idx) + ", ");
+      sb.append("pending=" + resArr.get(ResourceType.PENDING.idx) + ", ");
+      sb.append("am_used=" + resArr.get(ResourceType.AMUSED.idx) + ", ");
+      sb.append("reserved=" + resArr.get(ResourceType.RESERVED.idx) + ", ");
+      sb.append("min_eff=" + resArr.get(ResourceType.EFF_MIN_RESOURCE.idx) + ", ");
+      sb.append(
+          "max_eff=" + resArr.get(ResourceType.EFF_MAX_RESOURCE.idx) + "}");
-    if (label == null) {
-      label = RMNodeLabelsManager.NO_LABEL;
+    if (label == null || label.equals(RMNodeLabelsManager.NO_LABEL)) {
+      return normalize(noLabelUsages.resArr.get(type.idx));
-      return normalize(usage.resArr[type.idx]);
+      return normalize(usage.resArr.get(type.idx));
-        Resources.addTo(allOfType, usageEntry.getValue().resArr[type.idx]);
+        Resources.addTo(allOfType, usageEntry.getValue().resArr.get(type.idx));
-    if (label == null) {
-      label = RMNodeLabelsManager.NO_LABEL;
+    if (label == null || label.equals(RMNodeLabelsManager.NO_LABEL)) {
+      return noLabelUsages;
+
-      UsageByLabel u = new UsageByLabel(label);
+      UsageByLabel u = new UsageByLabel();
-      usage.resArr[type.idx] = res;
+      usage.resArr.set(type.idx, res);
-      Resources.addTo(usage.resArr[type.idx], res);
+      usage.resArr.set(type.idx,
+          Resources.add(usage.resArr.get(type.idx), res));
-      Resources.subtractFrom(usage.resArr[type.idx], res);
+      usage.resArr.set(type.idx,
+          Resources.subtract(usage.resArr.get(type.idx), res));

INS26 INS40 INS83 MOV43 UPD42 INS21 INS83 INS74 INS7 INS32 INS43 MOV43 INS27 INS8 INS27 INS8 INS42 MOV14 INS42 INS42 INS40 INS42 INS42 INS32 MOV27 INS32 INS41 MOV27 INS32 INS41 UPD74 INS14 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS42 INS32 INS32 INS32 INS74 MOV22 INS42 INS42 INS32 INS32 UPD45 INS32 UPD45 INS32 UPD45 INS32 UPD45 INS32 UPD45 INS32 UPD45 INS42 INS32 INS32 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS32 INS40 INS42 INS40 INS32 INS43 INS42 INS42 INS42 MOV32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS40 INS42 INS40 INS40 INS42 INS40 INS32 MOV42 UPD42 MOV42 INS32 MOV42 MOV42 UPD42 MOV42 INS32 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV32 INS40 INS42 INS40 INS40 INS42 INS40 MOV22 UPD42 INS40 DEL83 DEL42 DEL43 DEL40 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL72 DEL42 DEL34 DEL72 DEL83 DEL85 DEL5 DEL42 DEL43 DEL42 DEL44 DEL43 DEL85 DEL5 DEL3 DEL40 DEL42 DEL42 DEL2 DEL7 DEL20 DEL42 DEL40 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL42 DEL45 DEL42 DEL34 DEL2 DEL45 DEL27 DEL32 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL40 DEL40 DEL2 DEL42 DEL42 DEL40 DEL2 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL40 DEL40 DEL2 DEL42 DEL7 DEL40 DEL40 DEL2 DEL32 DEL40 DEL40 DEL2 DEL32