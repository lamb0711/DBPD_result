HDFS-13608. [SBN read] Edit Tail Fast Path Part 2: Add ability for JournalNode to serve edits via RPC. Contributed by Erik Krogen.

+import com.google.protobuf.ByteString;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.qjournal.protocol.QJournalProtocolProtos.GetJournaledEditsResponseProto;
+  private int curSegmentLayoutVersion = 0;
+  private final JournaledEditsCache cache;
+
+
+    if (conf.getBoolean(DFSConfigKeys.DFS_HA_TAILEDITS_INPROGRESS_KEY,
+        DFSConfigKeys.DFS_HA_TAILEDITS_INPROGRESS_DEFAULT)) {
+      this.cache = new JournaledEditsCache(conf);
+    } else {
+      this.cache = null;
+    }
+    curSegmentLayoutVersion = 0;
+    if (cache != null) {
+      cache.storeEdits(records, firstTxnId, lastTxnId, curSegmentLayoutVersion);
+    }
+    curSegmentLayoutVersion = layoutVersion;
+        curSegmentLayoutVersion = 0;
+   * @see QJournalProtocol#getJournaledEdits(String, String, long, int)
+   */
+  public GetJournaledEditsResponseProto getJournaledEdits(long sinceTxId,
+      int maxTxns) throws IOException {
+    if (cache == null) {
+      throw new IOException("The journal edits cache is not enabled, which " +
+          "is a requirement to fetch journaled edits via RPC. Please enable " +
+          "it via " + DFSConfigKeys.DFS_HA_TAILEDITS_INPROGRESS_KEY);
+    }
+    if (sinceTxId > getHighestWrittenTxId()) {
+      // Requested edits that don't exist yet; short-circuit the cache here
+      metrics.rpcEmptyResponses.incr();
+      return GetJournaledEditsResponseProto.newBuilder().setTxnCount(0).build();
+    }
+    try {
+      List<ByteBuffer> buffers = new ArrayList<>();
+      int txnCount = cache.retrieveEdits(sinceTxId, maxTxns, buffers);
+      int totalSize = 0;
+      for (ByteBuffer buf : buffers) {
+        totalSize += buf.remaining();
+      }
+      metrics.txnsServedViaRpc.incr(txnCount);
+      metrics.bytesServedViaRpc.incr(totalSize);
+      ByteString.Output output = ByteString.newOutput(totalSize);
+      for (ByteBuffer buf : buffers) {
+        output.write(buf.array(), buf.position(), buf.remaining());
+      }
+      return GetJournaledEditsResponseProto.newBuilder()
+          .setTxnCount(txnCount)
+          .setEditLog(output.toByteString())
+          .build();
+    } catch (JournaledEditsCache.CacheMissException cme) {
+      metrics.rpcRequestCacheMissAmount.add(cme.getCacheMissAmount());
+      throw cme;
+    }
+  }
+
+  /**

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS34 INS42 INS42 INS25 INS21 INS25 INS21 INS65 INS42 INS39 INS42 INS39 INS42 INS42 INS25 INS25 INS54 INS32 INS8 INS8 INS7 INS27 INS8 INS7 INS68 INS27 INS8 INS27 INS8 INS8 INS12 INS42 INS42 INS40 INS40 INS21 INS21 INS42 INS34 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS69 INS69 INS69 INS69 INS42 INS33 INS53 INS42 INS32 INS21 INS41 INS60 INS60 INS60 INS70 INS21 INS21 INS60 INS70 INS41 INS44 INS8 INS7 INS7 INS32 INS43 INS43 INS39 INS39 INS14 INS42 INS32 INS32 INS74 INS59 INS39 INS59 INS39 INS59 INS44 INS42 INS8 INS32 INS32 INS43 INS59 INS44 INS42 INS8 INS32 INS43 INS42 INS21 INS53 INS22 INS14 INS22 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS43 INS27 INS40 INS42 INS32 INS42 INS43 INS43 INS42 INS14 INS42 INS32 INS42 INS34 INS43 INS42 INS21 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS43 INS42 INS21 INS32 INS42 INS40 INS32 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS7 INS42 INS45 INS45 INS45 INS40 INS32 INS42 INS34 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42