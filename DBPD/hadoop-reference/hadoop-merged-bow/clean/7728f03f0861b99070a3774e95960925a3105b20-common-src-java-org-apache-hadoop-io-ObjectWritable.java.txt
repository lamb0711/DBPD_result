HADOOP-7379. Add the ability to serialize and deserialize protocol buffers in ObjectWritable. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1136222 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import org.apache.hadoop.util.ProtoUtil;
+
+import com.google.protobuf.Message;
+    } else if (Message.class.isAssignableFrom(declaredClass)) {
+      ((Message)instance).writeDelimitedTo(
+          DataOutputOutputStream.constructOutputStream(out));
+    } else if (Message.class.isAssignableFrom(declaredClass)) {
+      instance = tryInstantiateProtobuf(declaredClass, in);
+   * Try to instantiate a protocol buffer of the given message class
+   * from the given input stream.
+   * 
+   * @param protoClass the class of the generated protocol buffer
+   * @param dataIn the input stream to read from
+   * @return the instantiated Message instance
+   * @throws IOException if an IO problem occurs
+   */
+  private static Message tryInstantiateProtobuf(
+      Class<?> protoClass,
+      DataInput dataIn) throws IOException {
+
+    try {
+      if (dataIn instanceof InputStream) {
+        // We can use the built-in parseDelimitedFrom and not have to re-copy
+        // the data
+        Method parseMethod = getStaticProtobufMethod(protoClass,
+            "parseDelimitedFrom", InputStream.class);
+        return (Message)parseMethod.invoke(null, (InputStream)dataIn);
+      } else {
+        // Have to read it into a buffer first, since protobuf doesn't deal
+        // with the DataInput interface directly.
+        
+        // Read the size delimiter that writeDelimitedTo writes
+        int size = ProtoUtil.readRawVarint32(dataIn);
+        if (size < 0) {
+          throw new IOException("Invalid size: " + size);
+        }
+      
+        byte[] data = new byte[size];
+        dataIn.readFully(data);
+        Method parseMethod = getStaticProtobufMethod(protoClass,
+            "parseFrom", byte[].class);
+        return (Message)parseMethod.invoke(null, data);
+      }
+    } catch (InvocationTargetException e) {
+      
+      if (e.getCause() instanceof IOException) {
+        throw (IOException)e.getCause();
+      } else {
+        throw new IOException(e.getCause());
+      }
+    } catch (IllegalAccessException iae) {
+      throw new AssertionError("Could not access parse method in " +
+          protoClass);
+    }
+  }
+
+  static Method getStaticProtobufMethod(Class<?> declaredClass, String method,
+      Class<?> ... args) {
+
+    try {
+      return declaredClass.getMethod(method, args);
+    } catch (Exception e) {
+      // This is a bug in Hadoop - protobufs should all have this static method
+      throw new AssertionError("Protocol buffer class " + declaredClass +
+          " does not have an accessible parseFrom(InputStream) method!");
+    }
+  }
+
+  /**

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS42 INS74 INS42 INS43 INS42 INS42 INS54 INS42 INS74 INS42 INS43 INS42 INS74 INS42 INS54 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS43 INS76 INS42 INS8 INS12 INS12 INS43 INS76 INS42 INS43 INS76 INS8 INS12 INS42 INS25 INS44 INS8 INS44 INS8 INS42 INS42 INS41 INS44 INS8 INS62 INS8 INS8 INS43 INS42 INS25 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS42 INS43 INS60 INS41 INS60 INS25 INS60 INS21 INS60 INS41 INS42 INS62 INS8 INS8 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS25 INS42 INS43 INS59 INS11 INS39 INS59 INS27 INS8 INS5 INS59 INS32 INS43 INS59 INS11 INS32 INS43 INS53 INS53 INS43 INS27 INS43 INS27 INS25 INS32 INS8 MOV8 INS42 INS42 INS32 INS43 INS32 INS42 INS32 INS42 INS34 INS53 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS11 INS14 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS32 INS8 MOV8 INS57 INS42 INS42 INS21 INS42 INS42 INS45 INS57 INS42 INS42 INS42 INS33 INS11 INS42 INS42 INS42 INS14 INS5 INS42 INS42 INS42 INS45 INS57 INS42 INS42 INS42 INS33 INS42 INS43 INS32 INS43 INS32 INS57 INS42 INS42 INS21 INS43 INS7 INS43 INS43 INS42 INS43 INS27 INS39 INS85 INS5 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS39 INS85 INS42 INS36 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS43 INS42 INS42