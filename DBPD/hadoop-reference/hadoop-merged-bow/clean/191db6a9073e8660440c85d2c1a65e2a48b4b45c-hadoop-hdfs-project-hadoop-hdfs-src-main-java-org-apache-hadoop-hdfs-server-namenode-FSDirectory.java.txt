HDFS-2718. Optimize OP_ADD in edits loading. Contributed by Konstantin Shvachko.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239760 13f79535-47bb-0310-9956-ffa450edef68

-                            long preferredBlockSize) 
+                            long preferredBlockSize,
+                            String clientName,
+                            String clientMachine)
-    long diskspace = UNKNOWN_DISK_SPACE;
-    else {
+    else if(blocks.length == 0 || blocks[blocks.length-1].getBlockUCState()
+        == BlockUCState.UNDER_CONSTRUCTION) {
+      newNode = new INodeFileUnderConstruction(
+          permissions, blocks.length, replication,
+          preferredBlockSize, modificationTime, clientName, 
+          clientMachine, null);
+    } else {
-      diskspace = ((INodeFile)newNode).diskspaceConsumed(blocks);
-        newNode = addNode(path, newNode, diskspace);
+        newNode = addNode(path, newNode, UNKNOWN_DISK_SPACE);
+  /**
+   * Update files in-memory data structures with new block information.
+   * @throws IOException 
+   */
+  void updateFile(INodeFile file,
+                  String path,
+                  PermissionStatus permissions,
+                  BlockInfo[] blocks, 
+                  short replication,
+                  long mtime,
+                  long atime,
+                  long preferredBlockSize) throws IOException {
+
+    // Update the salient file attributes.
+    file.setAccessTime(atime);
+    file.setModificationTimeForce(mtime);
+
+    // Update its block list
+    BlockInfo[] oldBlocks = file.getBlocks();
+
+    // Are we only updating the last block's gen stamp.
+    boolean isGenStampUpdate = oldBlocks.length == blocks.length;
+
+    // First, update blocks in common
+    BlockInfo oldBlock = null;
+    for (int i = 0; i < oldBlocks.length && i < blocks.length; i++) {
+      oldBlock = oldBlocks[i];
+      Block newBlock = blocks[i];
+
+      boolean isLastBlock = i == oldBlocks.length - 1;
+      if (oldBlock.getBlockId() != newBlock.getBlockId() ||
+          (oldBlock.getGenerationStamp() != newBlock.getGenerationStamp() && 
+              !(isGenStampUpdate && isLastBlock))) {
+        throw new IOException("Mismatched block IDs or generation stamps, " + 
+            "attempting to replace block " + oldBlock + " with " + newBlock +
+            " as block # " + i + "/" + blocks.length + " of " + path);
+      }
+
+      oldBlock.setNumBytes(newBlock.getNumBytes());
+      oldBlock.setGenerationStamp(newBlock.getGenerationStamp());
+    }
+
+    if (blocks.length < oldBlocks.length) {
+      // We're removing a block from the file, e.g. abandonBlock(...)
+      if (!file.isUnderConstruction()) {
+        throw new IOException("Trying to remove a block from file " +
+            path + " which is not under construction.");
+      }
+      if (blocks.length != oldBlocks.length - 1) {
+        throw new IOException("Trying to remove more than one block from file "
+            + path);
+      }
+      unprotectedRemoveBlock(path,
+          (INodeFileUnderConstruction)file, oldBlocks[oldBlocks.length - 1]);
+    } else if (blocks.length > oldBlocks.length) {
+      // We're adding blocks
+      // First complete last old Block
+      getBlockManager().completeBlock(file, oldBlocks.length-1, true);
+      // Add the new blocks
+      for (int i = oldBlocks.length; i < blocks.length; i++) {
+        // addBlock();
+        BlockInfo newBI = blocks[i];
+        getBlockManager().addINode(newBI, file);
+        file.addBlock(newBI);
+      }
+    }
+  }
+
-      // modify file-> block and blocksMap
-      fileNode.removeLastBlock(block);
-      getBlockManager().removeBlockFromMap(block);
-
+      unprotectedRemoveBlock(path, fileNode, block);
-      if(NameNode.stateChangeLog.isDebugEnabled()) {
-        NameNode.stateChangeLog.debug("DIR* FSDirectory.removeBlock: "
-            +path+" with "+block
-            +" block is removed from the file system");
-      }
-
-      // update space consumed
-      INode[] pathINodes = getExistingPathINodes(path);
-      updateCount(pathINodes, pathINodes.length-1, 0,
-          -fileNode.getPreferredBlockSize()*fileNode.getReplication(), true);
+  void unprotectedRemoveBlock(String path, INodeFileUnderConstruction fileNode, 
+      Block block) throws IOException {
+    // modify file-> block and blocksMap
+    fileNode.removeLastBlock(block);
+    getBlockManager().removeBlockFromMap(block);
+
+    if(NameNode.stateChangeLog.isDebugEnabled()) {
+      NameNode.stateChangeLog.debug("DIR* FSDirectory.removeBlock: "
+          +path+" with "+block
+          +" block is removed from the file system");
+    }
+
+    // update space consumed
+    INode[] pathINodes = getExistingPathINodes(path);
+    updateCount(pathINodes, pathINodes.length-1, 0,
+        -fileNode.getPreferredBlockSize()*fileNode.getReplication(), true);
+  }
+

INS31 INS31 INS44 INS44 INS29 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 MOV29 INS39 INS42 INS44 INS44 INS44 INS43 INS8 UPD39 UPD42 MOV8 INS43 INS42 INS43 INS42 INS65 INS65 MOV43 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS21 INS60 INS60 INS60 INS24 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS42 MOV21 MOV21 INS54 MOV41 INS42 INS42 INS25 INS66 INS42 INS66 INS42 INS42 INS43 INS85 INS32 INS32 INS5 INS59 INS39 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS25 INS42 INS42 INS42 INS8 MOV8 INS27 INS8 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS27 INS42 INS42 INS33 INS39 INS59 INS27 INS27 INS42 INS21 INS60 INS60 INS25 INS21 INS21 INS40 INS40 INS25 INS25 INS21 INS27 INS8 INS21 MOV21 INS27 INS27 INS21 INS42 INS42 INS42 INS40 INS40 INS42 INS34 INS42 INS40 INS42 INS40 INS7 INS43 INS59 INS39 INS59 INS27 INS8 INS32 INS32 INS38 INS8 INS27 INS8 INS32 INS40 INS40 INS21 INS24 INS32 INS40 INS34 INS32 INS40 INS7 INS42 INS2 INS42 INS42 INS2 INS42 INS27 INS27 INS36 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS53 INS40 INS27 INS53 INS42 INS42 INS11 INS2 INS32 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS27 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS40 INS34 INS14 INS43 INS42 INS42 INS27 INS32 INS42 INS42 INS27 INS9 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS21 INS42 INS27 INS43 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS33 INS40 INS34 INS42 INS42 INS42 INS42 INS27 INS38 INS43 INS27 INS43 INS27 INS43 INS27 INS42 INS40 INS34 INS42 INS40 INS34 INS42 INS40 INS43 INS59 INS32 INS32 INS40 INS34 INS42 UPD42 INS32 INS32 INS36 INS42 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS40 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS45 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL7 DEL21 DEL54 DEL8