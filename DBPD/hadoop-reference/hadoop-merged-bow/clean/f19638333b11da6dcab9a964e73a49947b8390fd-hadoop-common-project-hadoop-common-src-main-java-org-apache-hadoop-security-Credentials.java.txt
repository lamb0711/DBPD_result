HADOOP-15059. Undoing the switch of Credentials to PB format as default - done via HADOOP-12563 for supporting 2.x to 3.x upgrades.

-import java.io.FileOutputStream;
+  public enum SerializedFormat {
+    WRITABLE((byte) 0x00),
+    PROTOBUF((byte) 0x01);
+
+    // Caching to avoid reconstructing the array each time.
+    private static final SerializedFormat[] FORMATS = values();
+
+    final byte value;
+
+    SerializedFormat(byte val) {
+      this.value = val;
+    }
+
+    public static SerializedFormat valueOf(int val) {
+      try {
+        return FORMATS[val];
+      } catch (ArrayIndexOutOfBoundsException e) {
+        throw new IllegalArgumentException("Unknown credential format: " + val);
+      }
+    }
+  }
+
-    byte version = in.readByte();
-    if (version != TOKEN_STORAGE_VERSION &&
-        version != OLD_TOKEN_STORAGE_VERSION) {
-      throw new IOException("Unknown version " + version +
-                            " in token storage.");
+    SerializedFormat format;
+    try {
+      format = SerializedFormat.valueOf(in.readByte());
+    } catch (IllegalArgumentException e) {
+      throw new IOException(e);
-    if (version == OLD_TOKEN_STORAGE_VERSION) {
+    switch (format) {
+    case WRITABLE:
-    } else if (version == TOKEN_STORAGE_VERSION) {
+      break;
+    case PROTOBUF:
+      break;
+    default:
+      throw new IOException("Unsupported format " + format);
-  private static final byte TOKEN_STORAGE_VERSION = 1;
-
-  /**
-   *  For backward compatibility.
-   */
-  private static final byte OLD_TOKEN_STORAGE_VERSION = 0;
-
+    // by default store in the oldest supported format for compatibility
+    writeTokenStorageToStream(os, SerializedFormat.WRITABLE);
+  }
+
+  public void writeTokenStorageToStream(DataOutputStream os,
+      SerializedFormat format) throws IOException {
+    switch (format) {
+    case WRITABLE:
+      writeWritableOutputStream(os);
+      break;
+    case PROTOBUF:
+      writeProtobufOutputStream(os);
+      break;
+    default:
+      throw new IllegalArgumentException("Unsupported serialized format: "
+          + format);
+    }
+  }
+
+  private void writeWritableOutputStream(DataOutputStream os)
+      throws IOException {
-    os.write(TOKEN_STORAGE_VERSION);
+    os.write(SerializedFormat.WRITABLE.value);
+    write(os);
+  }
+
+  private void writeProtobufOutputStream(DataOutputStream os)
+      throws IOException {
+    os.write(TOKEN_STORAGE_MAGIC);
+    os.write(SerializedFormat.PROTOBUF.value);
-    FSDataOutputStream os = filename.getFileSystem(conf).create(filename);
-    writeTokenStorageToStream(os);
-    os.close();
+    // by default store in the oldest supported format for compatibility
+    writeTokenStorageFile(filename, conf, SerializedFormat.WRITABLE);
-  /**
-   *  For backward compatibility.
-   */
-  public void writeLegacyTokenStorageLocalFile(File f) throws IOException {
-    writeLegacyOutputStream(new DataOutputStream(new FileOutputStream(f)));
-  }
-
-  /**
-   *  For backward compatibility.
-   */
-  public void writeLegacyTokenStorageFile(Path filename, Configuration conf)
-      throws IOException {
-    writeLegacyOutputStream(filename.getFileSystem(conf).create(filename));
-  }
-
-  private void writeLegacyOutputStream(DataOutputStream os) throws IOException {
-    os.write(TOKEN_STORAGE_MAGIC);
-    os.write(OLD_TOKEN_STORAGE_VERSION);
-    write(os);
-    os.close();
+  public void writeTokenStorageFile(Path filename, Configuration conf,
+      SerializedFormat format) throws IOException {
+    try (FSDataOutputStream os =
+             filename.getFileSystem(conf).create(filename)) {
+      writeTokenStorageToStream(os, format);
+    }
-  public void writeProto(DataOutput out) throws IOException {
+  void writeProto(DataOutput out) throws IOException {
-  public void readProto(DataInput in) throws IOException {
+  void readProto(DataInput in) throws IOException {

MOV31 MOV31 MOV31 INS71 INS31 INS83 INS42 INS72 INS72 INS23 INS23 INS31 INS31 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 INS44 UPD42 UPD83 UPD42 UPD42 INS44 INS42 INS11 INS42 INS11 MOV83 MOV83 MOV83 INS5 INS59 INS83 MOV39 MOV59 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS54 INS50 INS43 INS42 INS42 INS21 INS43 INS42 UPD43 UPD42 INS50 INS43 INS42 INS54 INS39 INS34 INS39 INS34 INS43 INS85 INS42 INS32 UPD42 INS39 INS42 INS21 INS42 INS39 INS42 INS54 INS43 INS8 INS12 INS42 INS49 MOV21 INS10 INS49 MOV21 INS10 INS49 INS53 INS42 INS32 INS42 UPD42 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS42 INS58 INS8 INS42 INS42 INS7 INS8 INS12 INS42 UPD42 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS14 INS40 INS40 UPD42 MOV42 MOV42 INS40 MOV43 MOV59 MOV21 INS22 INS42 INS41 INS44 INS8 INS7 INS43 INS42 MOV53 INS43 INS27 UPD42 MOV42 INS42 INS42 INS42 UPD43 MOV43 INS27 INS52 INS42 INS2 INS43 INS42 INS53 INS42 INS32 INS42 INS42 INS45 UPD42 MOV42 UPD42 INS45 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 MOV32 INS42 INS43 INS27 INS42 INS45 INS42 DEL40 DEL26 DEL34 DEL39 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL27 DEL8 DEL25 DEL42 DEL42 DEL27 DEL8 DEL42 DEL27 DEL8 DEL25 DEL25 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL14 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL66 DEL65 DEL29 DEL42 DEL32 DEL42 DEL42 DEL32 DEL60 DEL42 DEL42 DEL32 DEL21 DEL83 DEL83