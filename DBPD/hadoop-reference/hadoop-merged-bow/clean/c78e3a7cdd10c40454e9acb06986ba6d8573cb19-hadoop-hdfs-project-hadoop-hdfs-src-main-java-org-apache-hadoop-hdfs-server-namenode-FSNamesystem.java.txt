HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.

-      if (!dir.isValidToCreate(link)) {
+      if (!dir.isValidToCreate(link, iip)) {
-      addSymlink(link, target, dirPerms, createParent, logRetryCache);
+      addSymlink(link, iip, target, dirPerms, createParent, logRetryCache);
-      final INodesInPath iip = dir.getINodesInPath(filename, true);
+      final INodesInPath iip = dir.getINodesInPath(filename, false);
-      return dir.getPreferredBlockSize(filename);
+      return INodeFile.valueOf(iip.getLastINode(), filename)
+          .getPreferredBlockSize();
-          long ret = dir.delete(src, toRemoveBlocks, toRemoveINodes, now());
+          long ret = dir.delete(iip, toRemoveBlocks, toRemoveINodes, now());
-          recoverLeaseInternal(myFile, src, holder, clientMachine, false);
+          recoverLeaseInternal(iip, src, holder, clientMachine, false);
-      Path parent = new Path(src).getParent();
-      if (parent != null && FSDirMkdirOp.mkdirsRecursively(dir,
-          parent.toString(), permissions, true, now())) {
-        newNode = dir.addFile(src, permissions, replication, blockSize,
+      INodesInPath parentIIP = iip.getParentINodesInPath();
+      if (parentIIP != null && (parentIIP = FSDirMkdirOp.mkdirsRecursively(dir,
+          parentIIP, permissions, true, now())) != null) {
+        iip = INodesInPath.append(parentIIP, newNode, iip.getLastLocalName());
+        newNode = dir.addFile(iip, src, permissions, replication, blockSize,
-      recoverLeaseInternal(myFile, src, holder, clientMachine, false);
+      recoverLeaseInternal(iip, src, holder, clientMachine, false);
-      // recoverLeaseInternal may create a new InodeFile via 
-      // finalizeINodeFileUnderConstruction so we need to refresh 
-      // the referenced file.  
-      myFile = INodeFile.valueOf(dir.getINode(src), src, true);
-      return prepareFileForWrite(src, myFile, holder, clientMachine, true,
-              iip.getLatestSnapshotId(), logRetryCache);
+      return prepareFileForWrite(src, iip, holder, clientMachine, true,
+              logRetryCache);
-   * Replace current node with a INodeUnderConstruction.
+   * Convert current node to under construction.
-   * @param file existing file object
-  LocatedBlock prepareFileForWrite(String src, INodeFile file,
-                                   String leaseHolder, String clientMachine,
-                                   boolean writeToEditLog,
-                                   int latestSnapshot, boolean logRetryCache)
-      throws IOException {
-    file.recordModification(latestSnapshot);
-    final INodeFile cons = file.toUnderConstruction(leaseHolder, clientMachine);
+  LocatedBlock prepareFileForWrite(String src, INodesInPath iip,
+      String leaseHolder, String clientMachine, boolean writeToEditLog,
+      boolean logRetryCache) throws IOException {
+    final INodeFile file = iip.getLastINode().asFile();
+    file.recordModification(iip.getLatestSnapshotId());
+    file.toUnderConstruction(leaseHolder, clientMachine);
-    leaseManager.addLease(cons.getFileUnderConstructionFeature()
-        .getClientName(), src);
+    leaseManager.addLease(
+        file.getFileUnderConstructionFeature().getClientName(), src);
-    LocatedBlock ret = blockManager.convertLastBlockToUnderConstruction(cons);
+    LocatedBlock ret = blockManager.convertLastBlockToUnderConstruction(file);
-      dir.updateSpaceConsumed(src, 0, diff * file.getBlockReplication());
+      dir.updateSpaceConsumed(iip, 0, diff * file.getBlockReplication());
-      getEditLog().logOpenFile(src, cons, false, logRetryCache);
+      getEditLog().logOpenFile(src, file, false, logRetryCache);
-      recoverLeaseInternal(inode, src, holder, clientMachine, true);
+      recoverLeaseInternal(iip, src, holder, clientMachine, true);
-  private void recoverLeaseInternal(INodeFile fileInode, 
+  private void recoverLeaseInternal(INodesInPath iip,
-    if (fileInode != null && fileInode.isUnderConstruction()) {
+    INodeFile file = iip.getLastINode().asFile();
+    if (file != null && file.isUnderConstruction()) {
-      FileUnderConstructionFeature uc = fileInode.getFileUnderConstructionFeature();
+      FileUnderConstructionFeature uc = file.getFileUnderConstructionFeature();
-        internalReleaseLease(lease, src, holder);
+        internalReleaseLease(lease, src, iip, holder);
-          boolean isClosed = internalReleaseLease(lease, src, null);
+          boolean isClosed = internalReleaseLease(lease, src, iip, null);
-          final BlockInfo lastBlock = fileInode.getLastBlock();
+          final BlockInfo lastBlock = file.getLastBlock();
-      String clientMachine, boolean logRetryCache)
-      throws AccessControlException, SafeModeException,
-      FileAlreadyExistsException, FileNotFoundException,
-      ParentNotDirectoryException, IOException {
+      String clientMachine, boolean logRetryCache) throws IOException {
-      List<String> favoredNodes)
-      throws LeaseExpiredException, NotReplicatedYetException,
-      QuotaExceededException, SafeModeException, UnresolvedLinkException,
-      IOException {
+      List<String> favoredNodes) throws IOException {
-      commitOrCompleteLastBlock(pendingFile,
+      commitOrCompleteLastBlock(pendingFile, fileState.iip,
+    public final INodesInPath iip;
-    public FileState(INodeFile inode, String fullPath) {
+    public FileState(INodeFile inode, String fullPath, INodesInPath iip) {
+      this.iip = iip;
-    INode inode;
+    final INode inode;
+    final INodesInPath iip;
-      final INodesInPath iip = dir.getINodesInPath4Write(src);
+      iip = dir.getINodesInPath4Write(src);
-      if (inode != null) src = inode.getFullPathName();
+      iip = INodesInPath.fromINode(inode);
+      if (inode != null) {
+        src = iip.getPath();
+      }
-        return new FileState(pendingFile, src);
+        return new FileState(pendingFile, src, iip);
-    return new FileState(pendingFile, src);
+    return new FileState(pendingFile, src, iip);
-      throws LeaseExpiredException, FileNotFoundException,
-      UnresolvedLinkException, IOException {
+      throws IOException {
+      final INodesInPath iip;
-        inode = dir.getINode(src);
+        iip = dir.getINodesInPath(src, true);
+        inode = iip.getLastINode();
-        if (inode != null) src = inode.getFullPathName();
+        iip = INodesInPath.fromINode(inode);
+        if (inode != null) {
+          src = iip.getPath();
+        }
-      //
-      //
-      boolean removed = dir.removeBlock(src, file,
+      boolean removed = dir.removeBlock(src, iip, file,
-                               long fileId)
-      throws LeaseExpiredException, FileNotFoundException {
+      long fileId) throws LeaseExpiredException, FileNotFoundException {
-  private boolean completeFileInternal(String src, 
-      String holder, Block last, long fileId) throws SafeModeException,
-      UnresolvedLinkException, IOException {
+  private boolean completeFileInternal(String src, String holder, Block last,
+      long fileId) throws IOException {
+    final INodesInPath iip;
+    INode inode = null;
-      final INode inode;
-        final INodesInPath iip = dir.getLastINodeInPath(src);
-        inode = iip.getINode(0);
+        iip = dir.getINodesInPath(src, true);
+        inode = iip.getLastINode();
-        if (inode != null) src = inode.getFullPathName();
+        iip = INodesInPath.fromINode(inode);
+        if (inode != null) {
+          src = iip.getPath();
+        }
-      final INode inode = dir.getINode(src);
-      if (inode != null
-          && inode.isFile()
-          && !inode.asFile().isUnderConstruction()) {
+      if (inode != null && inode.isFile() &&
+          !inode.asFile().isUnderConstruction()) {
-    commitOrCompleteLastBlock(pendingFile, last);
+    commitOrCompleteLastBlock(pendingFile, iip, last);
-      long filesRemoved = dir.delete(src, collectedBlocks, removedINodes,
+      long filesRemoved = dir.delete(iip, collectedBlocks, removedINodes,
-      throws IOException, UnresolvedLinkException {
+      throws IOException {
-  boolean internalReleaseLease(Lease lease, String src, 
-      String recoveryLeaseHolder) throws AlreadyBeingCreatedException, 
-      IOException, UnresolvedLinkException {
+  boolean internalReleaseLease(Lease lease, String src, INodesInPath iip,
+      String recoveryLeaseHolder) throws IOException {
-    final INodesInPath iip = dir.getLastINodeInPath(src);
-    final INodeFile pendingFile = iip.getINode(0).asFile();
+    final INodeFile pendingFile = iip.getLastINode().asFile();
-      final Block commitBlock) throws IOException {
+      final INodesInPath iip, final Block commitBlock) throws IOException {
-        String path = fileINode.getFullPathName();
-        dir.updateSpaceConsumed(path, 0, -diff*fileINode.getFileReplication());
+        dir.updateSpaceConsumed(iip, 0, -diff*fileINode.getFileReplication());
-      INodeFile pendingFile, int latestSnapshot) throws IOException,
-      UnresolvedLinkException {
+      INodeFile pendingFile, int latestSnapshot) throws IOException {
-    final INodeFile newFile = pendingFile.toCompleteFile(now());
+    pendingFile.toCompleteFile(now());
-    closeFile(src, newFile);
+    closeFile(src, pendingFile);
-    blockManager.checkReplication(newFile);
+    blockManager.checkReplication(pendingFile);
-    INodeFile inodeUC = (INodeFile) bc;
-    String fullName = inodeUC.getName();
+    String fullName = bc.getName();
-          && dir.getINode(fullName) == inodeUC) {
+          && dir.getINode(fullName) == bc) {
-     * 1. if bc is an instance of INodeFileUnderConstructionWithSnapshot, and
+     * 1. if bc is under construction and also with snapshot, and
-      String[] newtargetstorages)
-      throws IOException, UnresolvedLinkException {
+      String[] newtargetstorages) throws IOException {
-    String src = pendingFile.getFullPathName();
+    final INodesInPath iip = INodesInPath.fromINode(pendingFile);
+    final String src = iip.getPath();
-    commitOrCompleteLastBlock(pendingFile, storedBlock);
+    commitOrCompleteLastBlock(pendingFile, iip, storedBlock);
-  private INodeSymlink addSymlink(String path, String target,
+  private INodeSymlink addSymlink(String path, INodesInPath iip, String target,
-      final String parent = new Path(path).getParent().toString();
-      if (!FSDirMkdirOp.mkdirsRecursively(dir, parent, dirPerms, true,
-          modTime)) {
+      INodesInPath parentIIP = iip.getParentINodesInPath();
+      if (parentIIP == null || (parentIIP = FSDirMkdirOp.mkdirsRecursively(dir,
+          parentIIP, dirPerms, true, modTime)) == null) {
+      } else {
+        iip = INodesInPath.append(parentIIP, null, iip.getLastLocalName());
-    INodeSymlink newNode = dir.addSymlink(id, path, target, modTime, modTime,
+    INodeSymlink newNode = dir.addSymlink(iip, id, target, modTime, modTime,

INS23 INS44 INS44 INS44 UPD43 UPD42 INS60 INS21 INS43 INS42 INS60 INS83 INS83 INS43 INS59 INS44 INS60 INS41 INS60 INS60 INS43 INS42 INS83 MOV43 INS42 INS21 INS60 INS43 INS42 UPD66 UPD42 INS83 MOV43 INS59 MOV32 INS42 MOV43 INS59 INS42 INS42 INS43 INS42 INS21 MOV83 MOV43 MOV59 INS83 INS43 INS59 INS14 INS83 MOV43 INS59 MOV43 INS59 UPD42 MOV42 MOV32 INS83 INS43 INS59 INS83 INS42 INS42 INS32 MOV32 INS42 INS32 INS42 INS7 UPD42 MOV42 INS42 INS21 INS21 MOV43 MOV42 MOV42 INS42 INS60 INS42 INS42 INS33 INS42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS32 UPD43 INS32 INS42 UPD42 INS32 INS42 UPD42 UPD42 INS22 INS42 INS7 INS7 INS8 INS83 INS43 INS59 UPD42 INS42 INS42 INS42 UPD42 UPD42 UPD43 INS27 INS8 UPD42 UPD42 INS42 INS32 INS42 UPD42 UPD42 INS27 INS21 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS40 INS52 INS42 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS21 INS21 INS21 INS21 UPD42 UPD42 UPD42 INS32 INS27 INS27 INS21 INS42 UPD9 UPD42 MOV42 INS42 INS32 MOV42 INS42 UPD42 UPD42 INS36 INS33 INS7 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS42 MOV7 INS7 INS7 INS8 INS42 INS7 INS7 INS8 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS33 INS36 INS33 INS7 INS42 UPD42 MOV42 INS7 INS42 INS32 INS42 UPD42 INS42 INS32 INS42 INS32 INS21 INS42 INS32 INS42 INS32 INS21 UPD42 INS7 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 UPD42 MOV43 INS42 UPD42 INS9 INS42 INS42 INS42 INS42 INS42 MOV7 MOV42 UPD42 MOV42 MOV42 INS9 UPD42 INS42 INS42 INS42 MOV7 INS42 INS32 INS42 INS42 INS42 INS33 INS32 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV9 MOV32 INS42 INS42 INS42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV9 MOV42 INS42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL7 DEL21 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL21 DEL14 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL21 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL32 DEL59 DEL60 DEL34 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL43 DEL42 DEL43 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL34 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL14 DEL32 DEL42 DEL32 DEL32 DEL38