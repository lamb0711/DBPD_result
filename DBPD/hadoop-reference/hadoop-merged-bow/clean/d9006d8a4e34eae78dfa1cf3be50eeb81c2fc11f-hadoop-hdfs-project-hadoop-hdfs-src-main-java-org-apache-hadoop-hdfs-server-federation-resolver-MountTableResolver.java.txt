HDFS-12802. RBF: Control MountTableResolver cache size. Contrubuted by Inigo Goiri.

+import static org.apache.hadoop.hdfs.DFSConfigKeys.FEDERATION_MOUNT_TABLE_MAX_CACHE_SIZE;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.FEDERATION_MOUNT_TABLE_MAX_CACHE_SIZE_DEFAULT;
+import java.util.Iterator;
+import java.util.concurrent.Callable;
-import java.util.concurrent.ConcurrentNavigableMap;
-import java.util.concurrent.ConcurrentSkipListMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ExecutionException;
+import com.google.common.cache.Cache;
+import com.google.common.cache.CacheBuilder;
-  private final ConcurrentNavigableMap<String, PathLocation> locationCache =
-      new ConcurrentSkipListMap<>();
+  private final Cache<String, PathLocation> locationCache;
+    this(conf, routerService, null);
+  }
+
+  public MountTableResolver(Configuration conf, StateStoreService store) {
+    this(conf, null, store);
+  }
+
+  public MountTableResolver(Configuration conf, Router routerService,
+      StateStoreService store) {
-    if (this.router != null) {
+    if (store != null) {
+      this.stateStore = store;
+    } else if (this.router != null) {
-    registerCacheExternal();
-    initDefaultNameService(conf);
-  }
-
-  public MountTableResolver(Configuration conf, StateStoreService store) {
-    this.router = null;
-    this.stateStore = store;
+    int maxCacheSize = conf.getInt(
+        FEDERATION_MOUNT_TABLE_MAX_CACHE_SIZE,
+        FEDERATION_MOUNT_TABLE_MAX_CACHE_SIZE_DEFAULT);
+    this.locationCache = CacheBuilder.newBuilder()
+        .maximumSize(maxCacheSize)
+        .build();
-    if (locationCache.isEmpty()) {
+    LOG.debug("Invalidating {} from {}", path, locationCache);
+    if (locationCache.size() == 0) {
-    // Determine next lexicographic entry after source path
-    String nextSrc = path + Character.MAX_VALUE;
-    ConcurrentNavigableMap<String, PathLocation> subMap =
-        locationCache.subMap(path, nextSrc);
-    for (final String key : subMap.keySet()) {
-      locationCache.remove(key);
+
+    // Go through the entries and remove the ones from the path to invalidate
+    ConcurrentMap<String, PathLocation> map = locationCache.asMap();
+    Set<Entry<String, PathLocation>> entries = map.entrySet();
+    Iterator<Entry<String, PathLocation>> it = entries.iterator();
+    while (it.hasNext()) {
+      Entry<String, PathLocation> entry = it.next();
+      PathLocation loc = entry.getValue();
+      String src = loc.getSourcePath();
+      if (src.startsWith(path)) {
+        LOG.debug("Removing {}", src);
+        it.remove();
+      }
+
+    LOG.debug("Location cache after invalidation: {}", locationCache);
-      this.locationCache.clear();
+      this.locationCache.invalidateAll();
-      return this.locationCache.computeIfAbsent(
-          path, this::lookupLocation);
+      Callable<? extends PathLocation> meh = new Callable<PathLocation>() {
+        @Override
+        public PathLocation call() throws Exception {
+          return lookupLocation(path);
+        }
+      };
+      return this.locationCache.get(path, meh);
+    } catch (ExecutionException e) {
+      throw new IOException(e);
+
+  /**
+   * Get the size of the cache.
+   * @return Size of the cache.
+   */
+  protected long getCacheSize() {
+    return this.locationCache.size();
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS31 INS31 UPD74 INS83 INS42 INS44 INS44 INS8 INS44 INS29 INS83 INS39 INS42 INS8 UPD43 INS43 INS42 INS43 INS42 INS17 INS17 INS43 INS42 INS25 INS60 INS21 INS21 INS60 INS60 INS61 INS21 INS65 INS65 INS41 UPD42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS27 INS8 MOV25 INS39 INS59 INS7 INS32 INS27 INS74 INS74 INS59 INS74 INS59 INS32 INS8 INS32 INS8 INS12 INS66 INS66 INS32 INS42 INS33 MOV21 INS42 INS32 INS22 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS34 INS43 MOV43 MOV43 UPD42 INS32 INS43 INS74 INS42 INS32 INS43 INS74 INS42 INS32 INS42 INS42 MOV60 INS60 INS60 INS25 INS42 INS42 INS45 INS42 INS60 INS41 INS44 INS8 INS22 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS43 MOV43 INS43 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 UPD74 INS43 INS59 MOV43 INS59 INS32 INS8 INS32 INS74 INS59 MOV32 INS43 INS42 INS53 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 INS43 INS43 UPD42 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV21 INS21 MOV22 INS42 INS43 INS76 INS42 INS14 UPD42 INS42 INS42 INS42 INS14 INS42 INS42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS74 INS1 INS43 INS42 UPD42 UPD42 INS45 UPD42 INS42 INS42 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 MOV41 INS42 DEL42 DEL43 DEL74 DEL14 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL32 DEL42 DEL40 DEL27 DEL42 DEL42 DEL83 DEL42 DEL44 DEL32 DEL8 DEL70 DEL42 DEL52 DEL42 DEL90 DEL8