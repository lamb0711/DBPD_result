Merge r1550130 through r1555020 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1555021 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo;
+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
-import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectoryWithSnapshot;
+import org.apache.hadoop.hdfs.util.XMLUtils;
+import org.apache.hadoop.hdfs.util.XMLUtils.InvalidXmlException;
+import org.apache.hadoop.hdfs.util.XMLUtils.Stanza;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.SAXException;
-      out.writeBoolean(node instanceof INodeDirectoryWithSnapshot);
+      out.writeBoolean(node.isWithSnapshot());
+
+  public static void writeCacheDirectiveInfo(DataOutputStream out,
+      CacheDirectiveInfo directive) throws IOException {
+    writeLong(directive.getId(), out);
+    int flags =
+        ((directive.getPath() != null) ? 0x1 : 0) |
+        ((directive.getReplication() != null) ? 0x2 : 0) |
+        ((directive.getPool() != null) ? 0x4 : 0) |
+        ((directive.getExpiration() != null) ? 0x8 : 0);
+    out.writeInt(flags);
+    if (directive.getPath() != null) {
+      writeString(directive.getPath().toUri().getPath(), out);
+    }
+    if (directive.getReplication() != null) {
+      writeShort(directive.getReplication(), out);
+    }
+    if (directive.getPool() != null) {
+      writeString(directive.getPool(), out);
+    }
+    if (directive.getExpiration() != null) {
+      writeLong(directive.getExpiration().getMillis(), out);
+    }
+  }
+
+  public static CacheDirectiveInfo readCacheDirectiveInfo(DataInput in)
+      throws IOException {
+    CacheDirectiveInfo.Builder builder =
+        new CacheDirectiveInfo.Builder();
+    builder.setId(readLong(in));
+    int flags = in.readInt();
+    if ((flags & 0x1) != 0) {
+      builder.setPath(new Path(readString(in)));
+    }
+    if ((flags & 0x2) != 0) {
+      builder.setReplication(readShort(in));
+    }
+    if ((flags & 0x4) != 0) {
+      builder.setPool(readString(in));
+    }
+    if ((flags & 0x8) != 0) {
+      builder.setExpiration(
+          CacheDirectiveInfo.Expiration.newAbsolute(readLong(in)));
+    }
+    if ((flags & ~0xF) != 0) {
+      throw new IOException("unknown flags set in " +
+          "ModifyCacheDirectiveInfoOp: " + flags);
+    }
+    return builder.build();
+  }
+
+  public static CacheDirectiveInfo readCacheDirectiveInfo(Stanza st)
+      throws InvalidXmlException {
+    CacheDirectiveInfo.Builder builder =
+        new CacheDirectiveInfo.Builder();
+    builder.setId(Long.parseLong(st.getValue("ID")));
+    String path = st.getValueOrNull("PATH");
+    if (path != null) {
+      builder.setPath(new Path(path));
+    }
+    String replicationString = st.getValueOrNull("REPLICATION");
+    if (replicationString != null) {
+      builder.setReplication(Short.parseShort(replicationString));
+    }
+    String pool = st.getValueOrNull("POOL");
+    if (pool != null) {
+      builder.setPool(pool);
+    }
+    String expiryTime = st.getValueOrNull("EXPIRATION");
+    if (expiryTime != null) {
+      builder.setExpiration(CacheDirectiveInfo.Expiration.newAbsolute(
+          Long.parseLong(expiryTime)));
+    }
+    return builder.build();
+  }
+
+  public static void writeCacheDirectiveInfo(ContentHandler contentHandler,
+      CacheDirectiveInfo directive) throws SAXException {
+    XMLUtils.addSaxString(contentHandler, "ID",
+        Long.toString(directive.getId()));
+    if (directive.getPath() != null) {
+      XMLUtils.addSaxString(contentHandler, "PATH",
+          directive.getPath().toUri().getPath());
+    }
+    if (directive.getReplication() != null) {
+      XMLUtils.addSaxString(contentHandler, "REPLICATION",
+          Short.toString(directive.getReplication()));
+    }
+    if (directive.getPool() != null) {
+      XMLUtils.addSaxString(contentHandler, "POOL", directive.getPool());
+    }
+    if (directive.getExpiration() != null) {
+      XMLUtils.addSaxString(contentHandler, "EXPIRATION",
+          "" + directive.getExpiration().getMillis());
+    }
+  }
+
+  public static void writeCachePoolInfo(DataOutputStream out, CachePoolInfo info)
+      throws IOException {
+    writeString(info.getPoolName(), out);
+
+    final String ownerName = info.getOwnerName();
+    final String groupName = info.getGroupName();
+    final Long limit = info.getLimit();
+    final FsPermission mode = info.getMode();
+    final Long maxRelativeExpiry = info.getMaxRelativeExpiryMs();
+
+    boolean hasOwner, hasGroup, hasMode, hasLimit, hasMaxRelativeExpiry;
+    hasOwner = ownerName != null;
+    hasGroup = groupName != null;
+    hasMode = mode != null;
+    hasLimit = limit != null;
+    hasMaxRelativeExpiry = maxRelativeExpiry != null;
+
+    int flags =
+        (hasOwner ? 0x1 : 0) |
+        (hasGroup ? 0x2 : 0) |
+        (hasMode  ? 0x4 : 0) |
+        (hasLimit ? 0x8 : 0) |
+        (hasMaxRelativeExpiry ? 0x10 : 0);
+
+    writeInt(flags, out);
+
+    if (hasOwner) {
+      writeString(ownerName, out);
+    }
+    if (hasGroup) {
+      writeString(groupName, out);
+    }
+    if (hasMode) {
+      mode.write(out);
+    }
+    if (hasLimit) {
+      writeLong(limit, out);
+    }
+    if (hasMaxRelativeExpiry) {
+      writeLong(maxRelativeExpiry, out);
+    }
+  }
+
+  public static CachePoolInfo readCachePoolInfo(DataInput in)
+      throws IOException {
+    String poolName = readString(in);
+    CachePoolInfo info = new CachePoolInfo(poolName);
+    int flags = readInt(in);
+    if ((flags & 0x1) != 0) {
+      info.setOwnerName(readString(in));
+    }
+    if ((flags & 0x2) != 0)  {
+      info.setGroupName(readString(in));
+    }
+    if ((flags & 0x4) != 0) {
+      info.setMode(FsPermission.read(in));
+    }
+    if ((flags & 0x8) != 0) {
+      info.setLimit(readLong(in));
+    }
+    if ((flags & 0x10) != 0) {
+      info.setMaxRelativeExpiryMs(readLong(in));
+    }
+    if ((flags & ~0x1F) != 0) {
+      throw new IOException("Unknown flag in CachePoolInfo: " + flags);
+    }
+    return info;
+  }
+
+  public static void writeCachePoolInfo(ContentHandler contentHandler,
+      CachePoolInfo info) throws SAXException {
+    XMLUtils.addSaxString(contentHandler, "POOLNAME", info.getPoolName());
+
+    final String ownerName = info.getOwnerName();
+    final String groupName = info.getGroupName();
+    final Long limit = info.getLimit();
+    final FsPermission mode = info.getMode();
+    final Long maxRelativeExpiry = info.getMaxRelativeExpiryMs();
+
+    if (ownerName != null) {
+      XMLUtils.addSaxString(contentHandler, "OWNERNAME", ownerName);
+    }
+    if (groupName != null) {
+      XMLUtils.addSaxString(contentHandler, "GROUPNAME", groupName);
+    }
+    if (mode != null) {
+      FSEditLogOp.fsPermissionToXml(contentHandler, mode);
+    }
+    if (limit != null) {
+      XMLUtils.addSaxString(contentHandler, "LIMIT",
+          Long.toString(limit));
+    }
+    if (maxRelativeExpiry != null) {
+      XMLUtils.addSaxString(contentHandler, "MAXRELATIVEEXPIRY",
+          Long.toString(maxRelativeExpiry));
+    }
+  }
+
+  public static CachePoolInfo readCachePoolInfo(Stanza st)
+      throws InvalidXmlException {
+    String poolName = st.getValue("POOLNAME");
+    CachePoolInfo info = new CachePoolInfo(poolName);
+    if (st.hasChildren("OWNERNAME")) {
+      info.setOwnerName(st.getValue("OWNERNAME"));
+    }
+    if (st.hasChildren("GROUPNAME")) {
+      info.setGroupName(st.getValue("GROUPNAME"));
+    }
+    if (st.hasChildren("MODE")) {
+      info.setMode(FSEditLogOp.fsPermissionFromXml(st));
+    }
+    if (st.hasChildren("LIMIT")) {
+      info.setLimit(Long.parseLong(st.getValue("LIMIT")));
+    }
+    if (st.hasChildren("MAXRELATIVEEXPIRY")) {
+      info.setMaxRelativeExpiryMs(
+          Long.parseLong(st.getValue("MAXRELATIVEEXPIRY")));
+    }
+    return info;
+  }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS25 INS25 INS25 INS25 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS25 INS25 INS25 INS25 INS25 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS42 INS21 INS25 INS25 INS25 INS25 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS25 INS25 INS25 INS25 INS25 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS25 INS25 INS25 INS25 INS41 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS25 INS25 INS25 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS25 INS25 INS25 INS25 INS41 INS42 INS42 INS32 INS39 INS59 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS43 INS59 INS32 INS39 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS42 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS32 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS39 INS59 INS59 INS59 INS59 INS59 INS7 INS7 INS7 INS7 INS7 INS39 INS59 INS32 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS32 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS36 INS34 INS21 INS36 INS34 INS21 INS36 INS34 INS21 INS36 INS34 INS21 INS36 INS34 INS53 INS42 INS42 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS36 INS34 INS21 INS36 INS34 INS21 INS36 INS34 INS21 INS36 INS34 INS21 INS36 INS34 INS21 INS36 INS34 INS53 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS45 INS21 INS42 INS42 INS45 INS21 INS42 INS42 INS45 INS21 INS42 INS42 INS45 INS21 INS42 INS42 INS45 INS21 INS42 INS42 INS36 INS36 INS36 INS36 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS27 INS32 INS27 INS32 INS27 INS32 INS27 INS32 INS27 INS14 INS43 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS36 INS36 INS36 INS36 INS36 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS32 INS27 INS32 INS27 INS32 INS27 INS32 INS27 INS32 INS27 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS43 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS16 INS16 INS16 INS16 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS42 INS34 INS42 INS42 INS14 INS42 INS34 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS38 INS43 INS27 INS40 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS27 INS16 INS16 INS16 INS16 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS38 INS43 INS27 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS36 INS34 INS34 INS36 INS34 INS34 INS36 INS34 INS34 INS36 INS34 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS34 INS42 INS45 INS45 INS42 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS34 INS34 INS42 INS34 INS34 INS42 INS34 INS34 INS42 INS34 INS34 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS27 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL43 DEL62