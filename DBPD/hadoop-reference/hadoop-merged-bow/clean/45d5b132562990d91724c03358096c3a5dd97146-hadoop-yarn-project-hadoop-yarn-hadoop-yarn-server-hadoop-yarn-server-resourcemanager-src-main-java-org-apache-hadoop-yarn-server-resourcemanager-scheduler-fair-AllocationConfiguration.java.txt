Merge changes from trunk

-  // Default min share preemption timeout for queues where it is not set
-  // explicitly.
-  private final long defaultMinSharePreemptionTimeout;
+  // Fair share preemption timeout for each queue in seconds. If a job in the
+  // queue waits this long without receiving its fair share threshold, it is
+  // allowed to preempt other jobs' tasks.
+  private final Map<String, Long> fairSharePreemptionTimeouts;
-  // Preemption timeout for jobs below fair share in seconds. If a job remains
-  // below half its fair share for this long, it is allowed to preempt tasks.
-  private final long fairSharePreemptionTimeout;
+  // The fair share preemption threshold for each queue. If a queue waits
+  // fairSharePreemptionTimeout without receiving
+  // fairshare * fairSharePreemptionThreshold resources, it is allowed to
+  // preempt other queues' tasks.
+  private final Map<String, Float> fairSharePreemptionThresholds;
+      Map<String, Long> fairSharePreemptionTimeouts,
+      Map<String, Float> fairSharePreemptionThresholds,
-      long fairSharePreemptionTimeout, long defaultMinSharePreemptionTimeout,
+    this.fairSharePreemptionTimeouts = fairSharePreemptionTimeouts;
+    this.fairSharePreemptionThresholds = fairSharePreemptionThresholds;
-    this.fairSharePreemptionTimeout = fairSharePreemptionTimeout;
-    this.defaultMinSharePreemptionTimeout = defaultMinSharePreemptionTimeout;
-    defaultMinSharePreemptionTimeout = Long.MAX_VALUE;
-    fairSharePreemptionTimeout = Long.MAX_VALUE;
+    fairSharePreemptionTimeouts = new HashMap<String, Long>();
+    fairSharePreemptionThresholds = new HashMap<String, Float>();
-   * Get a queue's min share preemption timeout, in milliseconds. This is the
-   * time after which jobs in the queue may kill other queues' tasks if they
-   * are below their min share.
+   * Get a queue's min share preemption timeout configured in the allocation
+   * file, in milliseconds. Return -1 if not set.
-    return (minSharePreemptionTimeout == null) ? defaultMinSharePreemptionTimeout
-        : minSharePreemptionTimeout;
+    return (minSharePreemptionTimeout == null) ? -1 : minSharePreemptionTimeout;
-  
+
-   * Get the fair share preemption, in milliseconds. This is the time
-   * after which any job may kill other jobs' tasks if it is below half
-   * its fair share.
+   * Get a queue's fair share preemption timeout configured in the allocation
+   * file, in milliseconds. Return -1 if not set.
-  public long getFairSharePreemptionTimeout() {
-    return fairSharePreemptionTimeout;
+  public long getFairSharePreemptionTimeout(String queueName) {
+    Long fairSharePreemptionTimeout = fairSharePreemptionTimeouts.get(queueName);
+    return (fairSharePreemptionTimeout == null) ?
+        -1 : fairSharePreemptionTimeout;
-  
+
+  /**
+   * Get a queue's fair share preemption threshold in the allocation file.
+   * Return -1f if not set.
+   */
+  public float getFairSharePreemptionThreshold(String queueName) {
+    Float fairSharePreemptionThreshold =
+        fairSharePreemptionThresholds.get(queueName);
+    return (fairSharePreemptionThreshold == null) ?
+        -1f : fairSharePreemptionThreshold;
+  }
+

MOV44 INS31 INS74 INS74 MOV21 INS44 INS29 INS83 INS39 INS42 INS44 INS8 INS43 INS43 INS43 UPD42 INS43 INS43 INS43 UPD42 INS74 UPD42 INS74 UPD42 INS43 INS42 INS60 INS65 INS43 INS42 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 UPD66 UPD66 UPD66 UPD66 INS42 INS43 INS59 INS16 INS66 INS66 INS42 INS43 INS59 INS16 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS14 UPD42 INS14 INS38 INS42 INS42 INS32 INS36 INS38 INS42 INS42 INS42 INS32 INS36 INS38 INS42 UPD42 UPD42 INS74 INS74 INS34 INS42 INS42 INS42 INS27 INS34 INS42 INS42 INS42 INS27 INS34 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL39 DEL39 DEL39 DEL40 DEL40 DEL66 DEL42 DEL66 DEL42