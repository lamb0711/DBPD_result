HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.

+import org.apache.commons.io.Charsets;
+import org.apache.hadoop.fs.BlockLocation;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
+import org.apache.hadoop.hdfs.protocol.LocatedBlock;
+import org.apache.hadoop.hdfs.protocol.LocatedBlocks;
+import org.apache.hadoop.net.NodeBase;
+import java.util.List;
+   * Converts a string to a byte array using UTF8 encoding.
+   */
+  public static byte[] string2Bytes(String str) {
+    return str.getBytes(Charsets.UTF_8);
+  }
+
+  /**
+   * Convert a LocatedBlocks to BlockLocations[]
+   * @param blocks a LocatedBlocks
+   * @return an array of BlockLocations
+   */
+  public static BlockLocation[] locatedBlocks2Locations(LocatedBlocks blocks) {
+    if (blocks == null) {
+      return new BlockLocation[0];
+    }
+    return locatedBlocks2Locations(blocks.getLocatedBlocks());
+  }
+
+  /**
+   * Convert a List<LocatedBlock> to BlockLocation[]
+   * @param blocks A List<LocatedBlock> to be converted
+   * @return converted array of BlockLocation
+   */
+  public static BlockLocation[] locatedBlocks2Locations(
+      List<LocatedBlock> blocks) {
+    if (blocks == null) {
+      return new BlockLocation[0];
+    }
+    int nrBlocks = blocks.size();
+    BlockLocation[] blkLocations = new BlockLocation[nrBlocks];
+    if (nrBlocks == 0) {
+      return blkLocations;
+    }
+    int idx = 0;
+    for (LocatedBlock blk : blocks) {
+      assert idx < nrBlocks : "Incorrect index";
+      DatanodeInfo[] locations = blk.getLocations();
+      String[] hosts = new String[locations.length];
+      String[] xferAddrs = new String[locations.length];
+      String[] racks = new String[locations.length];
+      for (int hCnt = 0; hCnt < locations.length; hCnt++) {
+        hosts[hCnt] = locations[hCnt].getHostName();
+        xferAddrs[hCnt] = locations[hCnt].getXferAddr();
+        NodeBase node = new NodeBase(xferAddrs[hCnt],
+                                     locations[hCnt].getNetworkLocation());
+        racks[hCnt] = node.toString();
+      }
+      DatanodeInfo[] cachedLocations = blk.getCachedLocations();
+      String[] cachedHosts = new String[cachedLocations.length];
+      for (int i=0; i<cachedLocations.length; i++) {
+        cachedHosts[i] = cachedLocations[i].getHostName();
+      }
+      blkLocations[idx] = new BlockLocation(xferAddrs, hosts, cachedHosts,
+                                            racks,
+                                            blk.getStartOffset(),
+                                            blk.getBlockSize(),
+                                            blk.isCorrupt());
+      idx++;
+    }
+    return blkLocations;
+  }
+
+  /**
+
+  /**
+   * Whether the pathname is valid.  Currently prohibits relative paths,
+   * names which contain a ":" or "//", or other non-canonical paths.
+   */
+  public static boolean isValidName(String src) {
+    // Path must be absolute.
+    if (!src.startsWith(Path.SEPARATOR)) {
+      return false;
+    }
+
+    // Check for ".." "." ":" "/"
+    String[] components = StringUtils.split(src, '/');
+    for (int i = 0; i < components.length; i++) {
+      String element = components[i];
+      if (element.equals(".")  ||
+          (element.contains(":"))  ||
+          (element.contains("/"))) {
+        return false;
+      }
+      // ".." is allowed in path starting with /.reserved/.inodes
+      if (element.equals("..")) {
+        if (components.length > 4
+            && components[1].equals(".reserved")
+            && components[2].equals(".inodes")) {
+          continue;
+        }
+        return false;
+      }
+      // The string may start or end with a /, but not have
+      // "//" in the middle.
+      if (element.isEmpty() && i != components.length - 1 &&
+          i != 0) {
+        return false;
+      }
+    }
+    return true;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS39 INS85 INS43 INS42 INS41 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS25 INS41 INS65 INS65 INS65 INS43 INS85 INS74 INS42 INS25 INS60 INS60 INS25 INS60 INS70 INS41 INS65 INS43 INS42 INS25 INS60 INS24 INS41 INS66 INS42 INS32 INS66 INS42 INS66 INS66 INS42 INS42 INS27 INS8 INS32 INS66 INS42 INS66 INS66 INS42 INS43 INS43 INS27 INS8 INS39 INS59 INS5 INS59 INS27 INS8 INS39 INS59 INS44 INS42 INS8 INS42 INS66 INS66 INS42 INS38 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS9 INS42 INS42 INS40 INS42 INS33 INS41 INS42 INS32 INS42 INS42 INS42 INS33 INS41 INS42 INS32 INS43 INS85 INS42 INS3 INS42 INS34 INS41 INS42 INS34 INS43 INS42 INS6 INS60 INS60 INS60 INS60 INS24 INS60 INS60 INS24 INS21 INS21 INS32 INS41 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS25 INS25 INS3 INS42 INS42 INS3 INS42 INS42 INS42 INS5 INS42 INS42 INS42 INS27 INS45 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS7 INS37 INS42 INS42 INS40 INS9 INS42 INS42 INS42 INS42 INS13 INS42 INS34 INS43 INS59 INS27 INS8 INS32 INS8 INS27 INS8 INS5 INS34 INS5 INS34 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS60 INS21 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS2 INS14 INS42 INS42 INS42 INS2 INS32 INS36 INS36 INS41 INS42 INS42 INS45 INS25 INS41 INS27 INS27 INS41 INS43 INS85 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS5 INS40 INS42 INS5 INS40 INS42 INS5 INS40 INS42 INS34 INS7 INS7 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS9 INS27 INS8 INS9 INS32 INS27 INS42 INS34 INS9 INS42 INS42 INS43 INS85 INS43 INS85 INS43 INS85 INS2 INS32 INS2 INS32 INS42 INS42 INS14 INS2 INS32 INS43 INS85 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS27 INS32 INS18 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS2 INS42 INS43 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS27 INS32 INS2 INS42 INS45 INS40 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS40 INS34 INS2 INS42 INS45 INS42 INS34 INS42 INS42 INS42 INS34