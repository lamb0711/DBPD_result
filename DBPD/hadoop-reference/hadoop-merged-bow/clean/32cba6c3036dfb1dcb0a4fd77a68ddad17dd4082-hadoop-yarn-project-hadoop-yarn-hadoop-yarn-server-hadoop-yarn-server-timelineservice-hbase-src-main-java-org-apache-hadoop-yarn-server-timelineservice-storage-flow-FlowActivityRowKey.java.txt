YARN-5355: YARN Timeline Service v.2: alpha 2 (varunsaxena)

+import java.util.List;
+
+import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineReaderUtils;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.KeyConverterToString;
-  private final KeyConverter<FlowActivityRowKey> flowActivityRowKeyConverter =
-      new FlowActivityRowKeyConverter();
+  private final FlowActivityRowKeyConverter
+      flowActivityRowKeyConverter = new FlowActivityRowKeyConverter();
+   * Constructs a row key for the flow activity table as follows:
+   * {@code clusterId!dayTimestamp!user!flowName}.
+   * @return String representation of row key
+   */
+  public String getRowKeyAsString() {
+    return flowActivityRowKeyConverter.encodeAsString(this);
+  }
+
+  /**
+   * Given the raw row key as string, returns the row key as an object.
+   * @param encodedRowKey String representation of row key.
+   * @return A <cite>FlowActivityRowKey</cite> object.
+   */
+  public static FlowActivityRowKey parseRowKeyFromString(String encodedRowKey) {
+    return new FlowActivityRowKeyConverter().decodeFromString(encodedRowKey);
+  }
+
+  /**
-  final private static class FlowActivityRowKeyConverter implements
-      KeyConverter<FlowActivityRowKey> {
+  final private static class FlowActivityRowKeyConverter
+      implements KeyConverter<FlowActivityRowKey>,
+      KeyConverterToString<FlowActivityRowKey> {
+
+    @Override
+    public String encodeAsString(FlowActivityRowKey key) {
+      if (key.getDayTimestamp() == null) {
+        return TimelineReaderUtils
+            .joinAndEscapeStrings(new String[] {key.clusterId});
+      } else if (key.getUserId() == null) {
+        return TimelineReaderUtils.joinAndEscapeStrings(
+            new String[] {key.clusterId, key.dayTs.toString()});
+      } else if (key.getFlowName() == null) {
+        return TimelineReaderUtils.joinAndEscapeStrings(
+            new String[] {key.clusterId, key.dayTs.toString(), key.userId});
+      }
+      return TimelineReaderUtils.joinAndEscapeStrings(new String[] {
+          key.clusterId, key.dayTs.toString(), key.userId, key.flowName});
+    }
+
+    @Override
+    public FlowActivityRowKey decodeFromString(String encodedRowKey) {
+      List<String> split = TimelineReaderUtils.split(encodedRowKey);
+      if (split == null || split.size() != 4) {
+        throw new IllegalArgumentException(
+            "Invalid row key for flow activity.");
+      }
+      Long dayTs = Long.valueOf(split.get(1));
+      return new FlowActivityRowKey(split.get(0), dayTs, split.get(2),
+          split.get(3));
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS43 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS74 INS31 INS31 UPD42 MOV42 INS65 INS65 INS42 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS43 INS43 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS66 INS65 INS66 INS66 INS32 INS66 INS42 INS66 INS66 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS25 INS41 INS42 INS42 INS43 INS42 INS60 INS25 INS60 INS41 INS66 INS42 INS42 INS52 INS14 INS42 INS42 INS42 INS27 INS8 INS25 INS32 INS42 INS74 INS59 INS27 INS8 INS43 INS59 INS14 INS43 INS32 INS33 INS41 INS27 INS8 INS25 INS42 INS42 INS3 INS43 INS43 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS32 INS43 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS33 INS41 INS27 INS8 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS3 INS42 INS42 INS32 INS32 INS33 INS41 INS43 INS85 INS40 INS32 INS40 INS40 INS42 INS42 INS43 INS45 INS42 INS42 INS34 INS5 INS4 INS42 INS42 INS3 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS43 INS85 INS40 INS5 INS4 INS42 INS42 INS3 INS42 INS43 INS85 INS40 INS32 INS5 INS4 INS42 INS40 INS42 INS43 INS85 INS40 INS32 INS40 INS42 INS40 INS42 DEL42 DEL43 DEL43 DEL74