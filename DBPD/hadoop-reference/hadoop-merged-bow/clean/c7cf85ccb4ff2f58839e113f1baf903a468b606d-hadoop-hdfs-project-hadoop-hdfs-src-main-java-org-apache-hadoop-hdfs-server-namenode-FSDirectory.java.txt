HDFS-4507. Update quota verification for snapshots.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1451081 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.NSQuotaExceededException;
-    fileNode.setFileReplication(replication, inodesInPath.getLatestSnapshot());
+    fileNode = fileNode.setFileReplication(
+        replication, inodesInPath.getLatestSnapshot());
-      SnapshotAccessControlException {
+      NSQuotaExceededException, SnapshotAccessControlException {
-      SnapshotAccessControlException {
+      NSQuotaExceededException, SnapshotAccessControlException {
-      SnapshotAccessControlException {
+      NSQuotaExceededException, SnapshotAccessControlException {
-      SnapshotAccessControlException {
+      NSQuotaExceededException, SnapshotAccessControlException {
-      throws UnresolvedLinkException, SnapshotAccessControlException {
+      throws UnresolvedLinkException, NSQuotaExceededException,
+      SnapshotAccessControlException {
-      throws UnresolvedLinkException, SnapshotAccessControlException {
+      throws UnresolvedLinkException, NSQuotaExceededException,
+      SnapshotAccessControlException {
-  void unprotectedDelete(String src, long mtime) 
-    throws UnresolvedLinkException, SnapshotAccessControlException {
+  void unprotectedDelete(String src, long mtime) throws UnresolvedLinkException,
+      NSQuotaExceededException, SnapshotAccessControlException {
-      BlocksMapUpdateInfo collectedBlocks, long mtime) {
+      BlocksMapUpdateInfo collectedBlocks, long mtime)
+          throws NSQuotaExceededException {
-   * @throws PathComponentTooLongException child's name is too long
-   * @throws MaxDirectoryItemsExceededException items per directory is exceeded
-  protected <T extends INode> void verifyFsLimits(INode[] pathComponents,
-      int pos, T child) throws FSLimitException {
-    boolean includeChildName = false;
-    try {
-      if (maxComponentLength != 0) {
-        int length = child.getLocalName().length();
-        if (length > maxComponentLength) {
-          includeChildName = true;
-          throw new PathComponentTooLongException(maxComponentLength, length);
-        }
+  void verifyFsLimits(INode[] pathComponents, int pos, INode child)
+      throws FSLimitException {
+    verifyMaxComponentLength(child.getLocalName(), pathComponents, pos);
+    verifyMaxDirItems(pathComponents, pos);
+  }
+
+  /**
+   * Verify child's name for fs limit.
+   * @throws PathComponentTooLongException child's name is too long.
+   */
+  public void verifyMaxComponentLength(String childName,
+      Object parentPath, int pos) throws PathComponentTooLongException {
+    if (maxComponentLength == 0) {
+      return;
+    }
+
+    final int length = childName.length();
+    if (length > maxComponentLength) {
+      final String p = parentPath instanceof INode[]?
+          getFullPathName((INode[])parentPath, pos - 1): (String)parentPath;
+      final PathComponentTooLongException e = new PathComponentTooLongException(
+          maxComponentLength, length, p, childName);
+      if (ready) {
+        throw e;
+      } else {
+        // Do not throw if edits log is still being processed
+        NameNode.LOG.error("FSDirectory.verifyMaxComponentLength: "
+            + e.getLocalizedMessage());
-      if (maxDirItems != 0) {
-        INodeDirectory parent = (INodeDirectory)pathComponents[pos-1];
-        int count = parent.getChildrenList(null).size();
-        if (count >= maxDirItems) {
-          throw new MaxDirectoryItemsExceededException(maxDirItems, count);
-        }
+    }
+  }
+
+  /**
+   * Verify children size for fs limit.
+   * @throws MaxDirectoryItemsExceededException too many children.
+   */
+  private void verifyMaxDirItems(INode[] pathComponents, int pos)
+      throws MaxDirectoryItemsExceededException {
+    if (maxDirItems == 0) {
+      return;
+    }
+
+    final INodeDirectory parent = (INodeDirectory)pathComponents[pos-1];
+    final int count = parent.getChildrenList(null).size();
+    if (count >= maxDirItems) {
+      final MaxDirectoryItemsExceededException e
+          = new MaxDirectoryItemsExceededException(maxDirItems, count);
+      if (ready) {
+        e.setPathName(getFullPathName(pathComponents, pos - 1));
+        throw e;
+      } else {
+        // Do not throw if edits log is still being processed
+        NameNode.LOG.error("FSDirectory.verifyMaxDirItems: "
+            + e.getLocalizedMessage());
-    } catch (FSLimitException e) {
-      String badPath = getFullPathName(pathComponents, pos-1);
-      if (includeChildName) {
-        badPath += Path.SEPARATOR + child.getLocalName();
-      }
-      e.setPathName(badPath);
-      // Do not throw if edits log is still being processed
-      if (ready) throw(e);
-      // log pre-existing paths that exceed limits
-      NameNode.LOG.error("FSDirectory.verifyFsLimits - " + e.getLocalizedMessage());
+   * @throws NSQuotaExceededException 
-  private INode removeLastINode(final INodesInPath inodesInPath) {
+  private INode removeLastINode(final INodesInPath inodesInPath)
+      throws NSQuotaExceededException {
+    final Snapshot latestSnapshot = inodesInPath.getLatestSnapshot();
-        inodes[pos], inodesInPath.getLatestSnapshot());
-    if (removed) {
+        inodes[pos], latestSnapshot);
+    if (removed && latestSnapshot == null) {
-      return inodes[pos];
-    return null;
+    return removed? inodes[pos]: null;
-        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota, latest);
+        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);
-      Snapshot latest) {
+      Snapshot latest) throws NSQuotaExceededException {
-      throws UnresolvedLinkException {
+      throws UnresolvedLinkException, NSQuotaExceededException {
-      long atime, boolean force, Snapshot latest) {
+      long atime, boolean force, Snapshot latest)
+          throws NSQuotaExceededException {

INS26 INS40 INS31 INS31 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS29 INS39 INS42 INS44 INS44 INS44 MOV43 INS8 UPD83 UPD42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 MOV44 MOV44 INS43 MOV8 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV65 INS5 INS42 INS39 INS42 MOV43 INS42 INS21 INS21 UPD65 UPD43 UPD42 INS43 INS42 INS39 INS42 INS42 INS25 MOV60 INS25 INS65 INS65 INS42 INS25 INS25 INS65 INS42 INS60 MOV41 INS42 INS42 INS42 INS7 INS43 INS85 INS32 INS32 UPD66 UPD42 UPD66 UPD42 INS42 UPD27 MOV27 INS8 INS83 MOV27 INS8 INS66 INS42 INS66 INS27 INS8 INS83 INS83 MOV27 INS8 INS42 INS66 INS83 INS43 INS59 INS27 INS16 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS41 INS60 INS60 MOV25 INS42 INS34 INS41 INS60 MOV25 INS42 INS42 MOV32 INS42 INS27 INS42 MOV2 INS33 UPD42 MOV42 INS83 INS43 INS59 INS83 INS43 INS59 INS8 INS8 INS83 INS43 INS59 INS42 INS8 INS42 INS42 INS33 INS42 INS42 INS16 INS42 INS42 INS14 INS53 MOV21 INS42 INS42 MOV14 INS21 INS21 INS62 INS32 INS11 MOV43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS5 MOV42 INS11 MOV27 MOV43 INS42 INS42 INS42 MOV32 INS40 INS42 INS27 INS43 INS85 INS5 INS42 UPD45 INS42 INS27 INS45 INS32 UPD42 MOV42 INS43 INS85 INS42 INS34 INS42 INS42 INS42 DEL42 DEL42 DEL73 DEL42 DEL32 DEL42 DEL36 DEL53 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL34 DEL27 DEL25 DEL8 DEL43 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL42 DEL40 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL33 DEL41 DEL42