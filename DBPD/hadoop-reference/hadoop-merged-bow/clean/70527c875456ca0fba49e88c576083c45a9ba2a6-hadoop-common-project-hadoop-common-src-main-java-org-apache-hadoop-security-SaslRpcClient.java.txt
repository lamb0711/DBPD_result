merge trunk into HDFS-4949 branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1513658 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+import java.io.FilterInputStream;
+import java.io.FilterOutputStream;
+import java.nio.ByteBuffer;
+import java.util.regex.Pattern;
+import org.apache.hadoop.fs.GlobPattern;
+import com.google.common.annotations.VisibleForTesting;
+  private AuthMethod authMethod;
+  @VisibleForTesting
+  @InterfaceAudience.Private
+  public Object getNegotiatedProperty(String key) {
+    return (saslClient != null) ? saslClient.getNegotiatedProperty(key) : null;
+  }
+  
+
+  // the RPC Client has an inelegant way of handling expiration of TGTs
+  // acquired via a keytab.  any connection failure causes a relogin, so
+  // the Client needs to know what authMethod was being attempted if an
+  // exception occurs.  the SASL prep for a kerberos connection should
+  // ideally relogin if necessary instead of exposing this detail to the
+  // Client
+  @InterfaceAudience.Private
+  public AuthMethod getAuthMethod() {
+    return authMethod;
+  }
+  
-
-  // try to get the configured principal for the remote server
-  private String getServerPrincipal(SaslAuth authType) throws IOException {
+  @VisibleForTesting
+  String getServerPrincipal(SaslAuth authType) throws IOException {
-    // construct the expected principal from the config
-    String confPrincipal = SecurityUtil.getServerPrincipal(
-        conf.get(serverKey), serverAddr.getAddress());
-    if (confPrincipal == null || confPrincipal.isEmpty()) {
-      throw new IllegalArgumentException(
-          "Failed to specify server's Kerberos principal name");
+    // construct server advertised principal for comparision
+    String serverPrincipal = new KerberosPrincipal(
+        authType.getProtocol() + "/" + authType.getServerId()).getName();
+    boolean isPrincipalValid = false;
+
+    // use the pattern if defined
+    String serverKeyPattern = conf.get(serverKey + ".pattern");
+    if (serverKeyPattern != null && !serverKeyPattern.isEmpty()) {
+      Pattern pattern = GlobPattern.compile(serverKeyPattern);
+      isPrincipalValid = pattern.matcher(serverPrincipal).matches();
+    } else {
+      // check that the server advertised principal matches our conf
+      String confPrincipal = SecurityUtil.getServerPrincipal(
+          conf.get(serverKey), serverAddr.getAddress());
+      if (confPrincipal == null || confPrincipal.isEmpty()) {
+        throw new IllegalArgumentException(
+            "Failed to specify server's Kerberos principal name");
+      }
+      KerberosName name = new KerberosName(confPrincipal);
+      if (name.getHostName() == null) {
+        throw new IllegalArgumentException(
+            "Kerberos principal name does NOT have the expected hostname part: "
+                + confPrincipal);
+      }
+      isPrincipalValid = serverPrincipal.equals(confPrincipal);
-    // ensure it looks like a host-based service principal
-    KerberosName name = new KerberosName(confPrincipal);
-    if (name.getHostName() == null) {
-      throw new IllegalArgumentException(
-          "Kerberos principal name does NOT have the expected hostname part: "
-              + confPrincipal);
-    }
-    // check that the server advertised principal matches our conf
-    KerberosPrincipal serverPrincipal = new KerberosPrincipal(
-        authType.getProtocol() + "/" + authType.getServerId());
-    if (!serverPrincipal.getName().equals(confPrincipal)) {
+    if (!isPrincipalValid) {
-    return confPrincipal;
+    return serverPrincipal;
-    // redefined if/when a SASL negotiation completes
-    AuthMethod authMethod = AuthMethod.SIMPLE;
+    // redefined if/when a SASL negotiation starts, can be queried if the
+    // negotiation fails
+    authMethod = AuthMethod.SIMPLE;
+          // define auth being attempted, caller can query if connect fails
+  private boolean useWrap() {
+    // getNegotiatedProperty throws if client isn't complete
+    String qop = (String) saslClient.getNegotiatedProperty(Sasl.QOP);
+    // SASL wrapping is only used if the connection has a QOP, and
+    // the value is not auth.  ex. auth-int & auth-priv
+    return qop != null && !"auth".equalsIgnoreCase(qop);
+  }
+  
-   * Get a SASL wrapped InputStream. Can be called only after saslConnect() has
-   * been called.
+   * Get SASL wrapped InputStream if SASL QoP requires unwrapping,
+   * otherwise return original stream.  Can be called only after
+   * saslConnect() has been called.
-   * @param in
-   *          the InputStream to wrap
-   * @return a SASL wrapped InputStream
+   * @param in - InputStream used to make the connection
+   * @return InputStream that may be using SASL unwrap
-    if (!saslClient.isComplete()) {
-      throw new IOException("Sasl authentication exchange hasn't completed yet");
+    if (useWrap()) {
+      in = new WrappedInputStream(in);
-    return new SaslInputStream(in, saslClient);
+    return in;
-   * Get a SASL wrapped OutputStream. Can be called only after saslConnect() has
-   * been called.
+   * Get SASL wrapped OutputStream if SASL QoP requires wrapping,
+   * otherwise return original stream.  Can be called only after
+   * saslConnect() has been called.
-   * @param out
-   *          the OutputStream to wrap
-   * @return a SASL wrapped OutputStream
+   * @param in - InputStream used to make the connection
+   * @return InputStream that may be using SASL unwrap
-    if (!saslClient.isComplete()) {
-      throw new IOException("Sasl authentication exchange hasn't completed yet");
+    if (useWrap()) {
+      // the client and server negotiate a maximum buffer size that can be
+      // wrapped
+      String maxBuf = (String)saslClient.getNegotiatedProperty(Sasl.RAW_SEND_SIZE);
+      out = new BufferedOutputStream(new WrappedOutputStream(out),
+                                     Integer.parseInt(maxBuf));
-    return new SaslOutputStream(out, saslClient);
+    return out;
+  // ideally this should be folded into the RPC decoding loop but it's
+  // currently split across Client and SaslRpcClient...
+  class WrappedInputStream extends FilterInputStream {
+    private ByteBuffer unwrappedRpcBuffer = ByteBuffer.allocate(0);
+    public WrappedInputStream(InputStream in) throws IOException {
+      super(in);
+    }
+    
+    @Override
+    public int read() throws IOException {
+      byte[] b = new byte[1];
+      int n = read(b, 0, 1);
+      return (n != -1) ? b[0] : -1;
+    }
+    
+    @Override
+    public int read(byte b[]) throws IOException {
+      return read(b, 0, b.length);
+    }
+
+    @Override
+    public int read(byte[] buf, int off, int len) throws IOException {
+      synchronized(unwrappedRpcBuffer) {
+        // fill the buffer with the next RPC message
+        if (unwrappedRpcBuffer.remaining() == 0) {
+          readNextRpcPacket();
+        }
+        // satisfy as much of the request as possible
+        int readLen = Math.min(len, unwrappedRpcBuffer.remaining());
+        unwrappedRpcBuffer.get(buf, off, readLen);
+        return readLen;
+      }
+    }
+    
+    // all messages must be RPC SASL wrapped, else an exception is thrown
+    private void readNextRpcPacket() throws IOException {
+      LOG.debug("reading next wrapped RPC packet");
+      DataInputStream dis = new DataInputStream(in);
+      int rpcLen = dis.readInt();
+      byte[] rpcBuf = new byte[rpcLen];
+      dis.readFully(rpcBuf);
+      
+      // decode the RPC header
+      ByteArrayInputStream bis = new ByteArrayInputStream(rpcBuf);
+      RpcResponseHeaderProto.Builder headerBuilder =
+          RpcResponseHeaderProto.newBuilder();
+      headerBuilder.mergeDelimitedFrom(bis);
+      
+      boolean isWrapped = false;
+      // Must be SASL wrapped, verify and decode.
+      if (headerBuilder.getCallId() == AuthProtocol.SASL.callId) {
+        RpcSaslProto.Builder saslMessage = RpcSaslProto.newBuilder();
+        saslMessage.mergeDelimitedFrom(bis);
+        if (saslMessage.getState() == SaslState.WRAP) {
+          isWrapped = true;
+          byte[] token = saslMessage.getToken().toByteArray();
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("unwrapping token of length:" + token.length);
+          }
+          token = saslClient.unwrap(token, 0, token.length);
+          unwrappedRpcBuffer = ByteBuffer.wrap(token);
+        }
+      }
+      if (!isWrapped) {
+        throw new SaslException("Server sent non-wrapped response");
+      }
+    }
+  }
+
+  class WrappedOutputStream extends FilterOutputStream {
+    public WrappedOutputStream(OutputStream out) throws IOException {
+      super(out);
+    }
+    @Override
+    public void write(byte[] buf, int off, int len) throws IOException {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("wrapping token of length:" + len);
+      }
+      buf = saslClient.wrap(buf, off, len);
+      RpcSaslProto saslMessage = RpcSaslProto.newBuilder()
+          .setState(SaslState.WRAP)
+          .setToken(ByteString.copyFrom(buf, 0, buf.length))
+          .build();
+      RpcRequestMessageWrapper request =
+          new RpcRequestMessageWrapper(saslHeader, saslMessage);
+      DataOutputStream dob = new DataOutputStream(out);
+      dob.writeInt(request.getLength());
+      request.write(dob);
+     }
+  }
+  
-}
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS55 INS55 INS83 MOV43 INS59 INS78 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 MOV29 MOV83 MOV43 MOV42 MOV44 MOV43 INS8 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS43 INS31 INS31 INS42 INS42 INS40 INS42 INS43 INS42 INS41 INS40 INS42 INS41 INS42 INS60 INS60 INS25 INS21 INS60 INS41 MOV65 INS25 INS41 MOV65 INS25 INS41 INS42 INS83 INS43 INS59 INS83 INS42 INS44 MOV43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 MOV43 INS8 INS42 INS83 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS16 INS42 UPD43 INS39 INS59 INS43 INS59 INS27 INS8 INS8 UPD42 INS7 INS43 INS59 INS27 INS66 UPD66 UPD66 UPD66 UPD66 INS32 INS8 INS42 INS66 UPD66 UPD66 UPD42 UPD66 UPD66 INS32 INS8 INS42 INS42 INS42 INS32 INS43 INS42 INS46 INS42 INS42 INS60 INS60 INS41 INS42 INS39 INS42 INS85 INS42 INS41 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS51 INS21 INS60 INS60 INS60 INS21 INS60 INS60 INS21 INS60 INS25 MOV25 INS43 INS42 INS42 INS46 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS25 INS21 INS60 INS60 INS60 INS21 INS21 INS36 INS32 INS33 UPD42 INS32 INS42 INS9 INS42 INS42 INS32 INS27 INS38 INS60 INS21 MOV60 MOV25 MOV60 MOV25 INS21 INS42 INS42 INS40 INS42 INS42 INS11 INS27 INS38 UPD42 MOV42 INS21 INS42 INS60 INS21 INS42 INS42 INS34 INS42 INS42 INS5 INS59 INS39 INS59 INS16 INS32 INS39 INS85 INS42 INS8 INS32 INS43 INS59 INS39 INS59 INS5 INS59 INS32 INS43 INS59 INS43 INS59 INS32 INS39 INS59 INS27 INS8 UPD42 MOV42 INS42 INS39 INS85 INS32 INS8 INS7 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS27 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS27 INS42 INS33 INS32 INS43 INS59 INS7 INS7 INS43 INS32 INS42 INS33 INS32 INS7 INS43 INS59 INS7 INS39 INS85 INS42 INS3 INS42 INS32 INS36 INS2 INS38 INS42 INS42 INS34 INS40 INS25 INS60 INS21 INS41 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS32 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS14 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS32 INS40 INS60 INS21 INS25 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS11 INS42 INS14 INS5 INS34 INS42 INS42 INS34 INS34 INS27 INS42 INS34 INS34 INS27 INS8 INS39 INS59 INS32 INS42 INS43 INS42 INS42 INS42 INS5 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD43 MOV43 MOV42 INS43 INS32 INS43 INS14 INS32 INS39 INS85 INS42 INS38 INS32 INS34 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS40 INS21 INS60 INS25 INS21 INS21 INS43 UPD45 INS42 INS42 INS27 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS40 INS42 INS43 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS5 INS59 INS32 INS8 INS7 INS7 INS42 INS45 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS42 INS42 INS42 INS9 INS39 INS85 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS40 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL59 DEL60 DEL42 DEL32 DEL38 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL14 DEL41 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31