HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import com.google.common.base.Preconditions;
+import com.google.common.base.Throwables;
-  private final FileInputStream fStream;
-  final private long firstTxId;
-  final private long lastTxId;
-  private final int logVersion;
-  private final FSEditLogOp.Reader reader;
-  private final FSEditLogLoader.PositionTrackingInputStream tracker;
+  private final long firstTxId;
+  private final long lastTxId;
+  static private enum State {
+    UNINIT,
+    OPEN,
+    CLOSED
+  }
+  private State state = State.UNINIT;
+  private FileInputStream fStream = null;
+  private int logVersion = 0;
+  private FSEditLogOp.Reader reader = null;
+  private FSEditLogLoader.PositionTrackingInputStream tracker = null;
+  private DataInputStream dataIn = null;
+  static final Log LOG = LogFactory.getLog(EditLogInputStream.class);
-      boolean isInProgress)
-      throws LogHeaderCorruptException, IOException {
-    file = name;
-    fStream = new FileInputStream(name);
-
-    BufferedInputStream bin = new BufferedInputStream(fStream);
-    tracker = new FSEditLogLoader.PositionTrackingInputStream(bin);
-    DataInputStream in = new DataInputStream(tracker);
-
-    try {
-      logVersion = readLogVersion(in);
-    } catch (EOFException eofe) {
-      throw new LogHeaderCorruptException("No header found in log");
-    }
-
-    reader = new FSEditLogOp.Reader(in, tracker, logVersion);
+      boolean isInProgress) {
+    this.file = name;
+  private void init() throws LogHeaderCorruptException, IOException {
+    Preconditions.checkState(state == State.UNINIT);
+    BufferedInputStream bin = null;
+    try {
+      fStream = new FileInputStream(file);
+      bin = new BufferedInputStream(fStream);
+      tracker = new FSEditLogLoader.PositionTrackingInputStream(bin);
+      dataIn = new DataInputStream(tracker);
+      try {
+        logVersion = readLogVersion(dataIn);
+      } catch (EOFException eofe) {
+        throw new LogHeaderCorruptException("No header found in log");
+      }
+      reader = new FSEditLogOp.Reader(dataIn, tracker, logVersion);
+      state = State.OPEN;
+    } finally {
+      if (reader == null) {
+        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);
+        state = State.CLOSED;
+      }
+    }
+  }
+
-  public long getFirstTxId() throws IOException {
+  public long getFirstTxId() {
-  public long getLastTxId() throws IOException {
+  public long getLastTxId() {
-  @Override
-  protected FSEditLogOp nextOp() throws IOException {
-    FSEditLogOp op = reader.readOp(false);
-    if ((op != null) && (op.hasTransactionId())) {
-      long txId = op.getTransactionId();
-      if ((txId >= lastTxId) &&
-          (lastTxId != HdfsConstants.INVALID_TXID)) {
-        //
-        // Sometimes, the NameNode crashes while it's writing to the
-        // edit log.  In that case, you can end up with an unfinalized edit log
-        // which has some garbage at the end.
-        // JournalManager#recoverUnfinalizedSegments will finalize these
-        // unfinished edit logs, giving them a defined final transaction 
-        // ID.  Then they will be renamed, so that any subsequent
-        // readers will have this information.
-        //
-        // Since there may be garbage at the end of these "cleaned up"
-        // logs, we want to be sure to skip it here if we've read everything
-        // we were supposed to read out of the stream.
-        // So we force an EOF on all subsequent reads.
-        //
-        long skipAmt = file.length() - tracker.getPos();
-        if (skipAmt > 0) {
-          FSImage.LOG.warn("skipping " + skipAmt + " bytes at the end " +
+  private FSEditLogOp nextOpImpl(boolean skipBrokenEdits) throws IOException {
+    FSEditLogOp op = null;
+    switch (state) {
+    case UNINIT:
+      try {
+        init();
+      } catch (Throwable e) {
+        LOG.error("caught exception initializing " + this, e);
+        if (skipBrokenEdits) {
+          return null;
+        }
+        Throwables.propagateIfPossible(e, IOException.class);
+      }
+      Preconditions.checkState(state != State.UNINIT);
+      return nextOpImpl(skipBrokenEdits);
+    case OPEN:
+      op = reader.readOp(skipBrokenEdits);
+      if ((op != null) && (op.hasTransactionId())) {
+        long txId = op.getTransactionId();
+        if ((txId >= lastTxId) &&
+            (lastTxId != HdfsConstants.INVALID_TXID)) {
+          //
+          // Sometimes, the NameNode crashes while it's writing to the
+          // edit log.  In that case, you can end up with an unfinalized edit log
+          // which has some garbage at the end.
+          // JournalManager#recoverUnfinalizedSegments will finalize these
+          // unfinished edit logs, giving them a defined final transaction 
+          // ID.  Then they will be renamed, so that any subsequent
+          // readers will have this information.
+          //
+          // Since there may be garbage at the end of these "cleaned up"
+          // logs, we want to be sure to skip it here if we've read everything
+          // we were supposed to read out of the stream.
+          // So we force an EOF on all subsequent reads.
+          //
+          long skipAmt = file.length() - tracker.getPos();
+          if (skipAmt > 0) {
+            LOG.warn("skipping " + skipAmt + " bytes at the end " +
-          tracker.skip(skipAmt);
+            tracker.skip(skipAmt);
+          }
+      break;
+      case CLOSED:
+        break; // return null
-  
+
+  @Override
+  protected FSEditLogOp nextOp() throws IOException {
+    return nextOpImpl(false);
+  }
+
-      return reader.readOp(true);
-    } catch (IOException e) {
+      return nextOpImpl(true);
+    } catch (Throwable e) {
+      LOG.error("nextValidOp: got exception while reading " + this, e);
+    if (state == State.UNINIT) {
+      init();
+    }
-    return tracker.getPos();
+    if (state == State.OPEN) {
+      return tracker.getPos();
+    } else {
+      return 0;
+    }
-    fStream.close();
+    if (state == State.OPEN) {
+      dataIn.close();
+    }
+    state = State.CLOSED;
-    } catch (LogHeaderCorruptException corrupt) {
+      in.getVersion(); // causes us to read the header
+    } catch (LogHeaderCorruptException e) {
-      FSImage.LOG.warn("Log at " + file + " has no valid header",
-          corrupt);
+      LOG.warn("Log file " + file + " has no valid header", e);
-          HdfsConstants.INVALID_TXID, HdfsConstants.INVALID_TXID, true);
+          HdfsConstants.INVALID_TXID, true);

INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS71 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS39 MOV59 INS83 MOV59 INS83 INS83 INS42 INS72 INS72 INS72 MOV83 INS43 INS59 UPD83 MOV83 MOV43 INS59 INS83 MOV39 MOV59 MOV83 MOV43 INS59 INS83 MOV43 INS59 INS83 MOV83 INS43 INS59 INS8 INS83 INS39 INS42 MOV43 MOV43 INS8 UPD83 UPD42 INS44 MOV78 INS83 MOV43 INS42 MOV43 INS8 INS43 INS8 INS8 MOV78 MOV43 INS8 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS33 INS34 INS33 INS42 INS33 INS42 INS33 INS42 INS42 INS32 INS21 MOV21 MOV21 MOV21 INS21 INS60 INS54 INS39 INS42 INS60 INS50 INS41 INS42 INS25 MOV41 INS25 INS25 INS21 INS42 INS42 INS57 INS7 INS32 MOV43 INS59 MOV8 MOV21 INS8 MOV43 INS59 INS42 INS49 INS54 INS21 INS41 INS49 INS21 MOV25 INS10 INS49 INS10 INS32 INS27 INS8 INS27 MOV8 INS8 INS27 INS8 INS7 INS43 INS22 INS42 INS42 INS42 INS27 INS42 INS33 INS21 INS21 INS25 MOV42 INS33 INS42 INS8 INS12 INS32 INS32 INS42 INS7 INS42 INS42 INS9 INS42 INS40 INS21 INS42 INS40 INS41 INS42 INS40 MOV21 INS42 INS40 INS21 INS42 INS52 INS42 INS42 INS40 INS7 INS7 INS27 INS8 INS21 INS44 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS32 UPD43 INS21 INS32 INS34 INS32 UPD42 UPD42 MOV14 INS42 MOV14 INS42 INS40 INS42 INS33 INS21 INS21 INS32 INS43 INS42 INS21 INS25 INS21 INS42 INS40 MOV42 MOV42 INS42 UPD42 UPD42 INS32 INS42 UPD42 INS42 INS42 UPD42 UPD42 INS32 INS7 INS42 INS42 INS32 INS42 INS8 INS32 INS42 INS42 INS27 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS27 INS42 INS41 INS42 INS42 INS42 INS57 INS45 INS52 UPD45 UPD42 INS45 INS52 INS33 INS43 INS42 INS42 DEL42 DEL59 DEL83 DEL83 DEL83 DEL39 DEL23 DEL23 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL43 DEL40 DEL9 DEL32 DEL59 DEL60 DEL42 DEL8 DEL8 DEL40 DEL40