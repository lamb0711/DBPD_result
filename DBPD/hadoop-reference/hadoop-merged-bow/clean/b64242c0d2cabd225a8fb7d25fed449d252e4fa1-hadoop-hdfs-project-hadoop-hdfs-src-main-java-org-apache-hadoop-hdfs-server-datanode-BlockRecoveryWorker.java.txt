HDFS-9236. Missing sanity check for block size during block recovery. (Tony Wu via Yongjun Zhang)

+      int candidateReplicaCnt = 0;
-      //check generation stamps
+      // Check generation stamps, replica size and state. Replica must satisfy
+      // the following criteria to be included in syncList for recovery:
+      // - Valid generation stamp
+      // - Non-zero length
+      // - Original state is RWR or better
-            syncList.add(new BlockRecord(id, proxyDN, info));
+            // Count the number of candidate replicas received.
+            ++candidateReplicaCnt;
+            if (info.getOriginalReplicaState().getValue() <=
+                ReplicaState.RWR.getValue()) {
+              syncList.add(new BlockRecord(id, proxyDN, info));
+            } else {
+              if (LOG.isDebugEnabled()) {
+                LOG.debug("Block recovery: Ignored replica with invalid " +
+                    "original state: " + info + " from DataNode: " + id);
+              }
+            }
+          } else {
+            if (LOG.isDebugEnabled()) {
+              if (info == null) {
+                LOG.debug("Block recovery: DataNode: " + id + " does not have "
+                    + "replica for block: " + block);
+              } else {
+                LOG.debug("Block recovery: Ignored replica with invalid "
+                    + "generation stamp or length: " + info + " from " +
+                    "DataNode: " + id);
+              }
+            }
+      // None of the replicas reported by DataNodes has the required original
+      // state, report the error.
+      if (candidateReplicaCnt > 0 && syncList.isEmpty()) {
+        throw new IOException("Found " + candidateReplicaCnt +
+            " replica(s) for block " + block + " but none is in " +
+            ReplicaState.RWR.name() + " or better state. datanodeids=" +
+            Arrays.asList(locs));
+      }
+
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("syncBlock for block " + block + ", all datanodes don't " +
+              "have the block or their replicas have 0 length. The block can " +
+              "be deleted.");
+        }
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("syncBlock replicaInfo: block=" + block +
+                ", from datanode " + r.id + ", receivedState=" + rState.name() +
+                ", receivedLength=" + r.rInfo.getNumBytes() +
+                ", bestState=FINALIZED, finalizedLength=" + finalizedLength);
+          }
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("syncBlock replicaInfo: block=" + block +
+                ", from datanode " + r.id + ", receivedState=" + rState.name() +
+                ", receivedLength=" + r.rInfo.getNumBytes() + ", bestState=" +
+                bestState.name());
+          }
+        // recover() guarantees syncList will have at least one replica with RWR
+        // or better state.
+        assert minLength != Long.MAX_VALUE : "wrong minLength";
+
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Datanode triggering commitBlockSynchronization, block=" +
+            block + ", newGs=" + newBlock.getGenerationStamp() +
+            ", newLength=" + newBlock.getNumBytes());
+      }
+

INS60 INS25 INS25 INS39 INS59 INS27 INS8 INS6 INS32 INS8 INS42 INS34 INS27 INS32 INS53 INS25 INS27 INS45 INS42 INS42 INS21 INS42 INS34 INS42 INS42 INS14 INS32 INS8 INS25 INS25 INS42 INS40 INS32 INS43 INS27 INS42 INS42 INS21 INS32 INS8 INS32 INS8 INS42 INS42 INS27 INS8 INS8 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS32 INS42 INS42 INS21 INS42 INS42 INS21 INS45 INS42 INS45 INS32 INS45 INS32 INS21 INS25 INS25 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS42 INS42 INS38 INS27 MOV8 INS8 INS32 INS8 INS45 INS42 INS45 INS45 INS45 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS32 INS32 INS25 INS42 INS42 INS25 INS45 INS42 INS45 INS40 INS45 INS32 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS40 INS45 INS32 INS45 INS32 INS45 INS32 INS32 INS42 INS40 INS42 INS32 INS8 INS27 INS8 INS8 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS33 INS21 INS21 INS32 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS27 INS42 INS45 INS45 INS42 INS45 INS45 INS45 INS45