HADOOP-15723. ABFS: Ranger Support.
Contributed by Yuan Gao.

+import java.util.Arrays;
+import org.apache.hadoop.fs.azurebfs.extensions.AbfsAuthorizationException;
+import org.apache.hadoop.fs.azurebfs.extensions.AbfsAuthorizer;
+import org.apache.hadoop.fs.permission.FsAction;
+  private AbfsAuthorizer authorizer;
+
+    // Initialize ABFS authorizer
+    //
+    this.authorizer = abfsConfiguration.getAbfsAuthorizer();
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
+
-      InputStream inputStream = abfsStore.openFileForRead(makeQualified(path), statistics);
+      InputStream inputStream = abfsStore.openFileForRead(qualifiedPath, statistics);
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      OutputStream outputStream = abfsStore.createFile(makeQualified(f), overwrite,
+      OutputStream outputStream = abfsStore.createFile(qualifiedPath, overwrite,
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      OutputStream outputStream = abfsStore.openFileForWrite(makeQualified(f), false);
+      OutputStream outputStream = abfsStore.openFileForWrite(qualifiedPath, false);
-      abfsStore.rename(makeQualified(src), makeQualified(adjustedDst));
+      Path qualifiedSrcPath = makeQualified(src);
+      Path qualifiedDstPath = makeQualified(adjustedDst);
+      performAbfsAuthCheck(FsAction.READ_WRITE, qualifiedSrcPath, qualifiedDstPath);
+
+      abfsStore.rename(qualifiedSrcPath, qualifiedDstPath);
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.delete(makeQualified(f), recursive);
+      abfsStore.delete(qualifiedPath, recursive);
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
+
-      FileStatus[] result = abfsStore.listStatus(makeQualified(f));
+      FileStatus[] result = abfsStore.listStatus(qualifiedPath);
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.createDirectory(makeQualified(f), permission == null ? FsPermission.getDirDefault() : permission,
+      abfsStore.createDirectory(qualifiedPath, permission == null ? FsPermission.getDirDefault() : permission,
+    Path qualifiedPath = makeQualified(f);
+    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
+
-      return abfsStore.getFileStatus(makeQualified(f));
+      return abfsStore.getFileStatus(qualifiedPath);
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.setOwner(makeQualified(path),
+      abfsStore.setOwner(qualifiedPath,
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.setPermission(makeQualified(path),
+      abfsStore.setPermission(qualifiedPath,
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.modifyAclEntries(makeQualified(path),
+      abfsStore.modifyAclEntries(qualifiedPath,
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.removeAclEntries(makeQualified(path), aclSpec);
+      abfsStore.removeAclEntries(qualifiedPath, aclSpec);
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.removeDefaultAcl(makeQualified(path));
+      abfsStore.removeDefaultAcl(qualifiedPath);
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.removeAcl(makeQualified(path));
+      abfsStore.removeAcl(qualifiedPath);
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.WRITE, qualifiedPath);
+
-      abfsStore.setAcl(makeQualified(path), aclSpec);
+      abfsStore.setAcl(qualifiedPath, aclSpec);
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
+
-      return abfsStore.getAclStatus(makeQualified(path));
+      return abfsStore.getAclStatus(qualifiedPath);
+
+  /**
+   * Use ABFS authorizer to check if user is authorized to perform specific
+   * {@link FsAction} on specified {@link Path}s.
+   *
+   * @param action The {@link FsAction} being requested on the provided {@link Path}s.
+   * @param paths The absolute paths of the storage being accessed.
+   * @throws AbfsAuthorizationException on authorization failure.
+   * @throws IOException network problems or similar.
+   * @throws IllegalArgumentException if the required parameters are not provided.
+   */
+  private void performAbfsAuthCheck(FsAction action, Path... paths)
+      throws AbfsAuthorizationException, IOException {
+    if (authorizer == null) {
+      LOG.debug("ABFS authorizer is not initialized. No authorization check will be performed.");
+    } else {
+      Preconditions.checkArgument(paths.length > 0, "no paths supplied for authorization check");
+
+      LOG.debug("Auth check for action: {} on paths: {}", action.toString(), Arrays.toString(paths));
+      if (!authorizer.isAuthorized(action, paths)) {
+        throw new AbfsAuthorizationException(
+            "User is not authorized for action " + action.toString()
+            + " on paths: " + Arrays.toString(paths));
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS21 MOV60 INS21 INS60 INS21 MOV60 INS21 INS60 INS21 INS60 INS21 INS60 INS21 MOV60 INS21 INS60 INS21 INS54 INS60 INS21 INS54 INS60 INS21 INS60 INS21 INS60 INS21 INS60 MOV21 MOV54 INS60 MOV21 MOV54 INS60 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS25 INS7 INS43 INS32 INS43 INS59 INS32 INS43 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS32 INS43 INS59 INS32 INS8 INS12 INS43 INS59 INS32 INS8 INS12 INS43 INS59 INS32 INS43 INS59 INS32 MOV12 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS27 INS8 INS8 INS22 INS32 INS42 UPD42 MOV32 INS42 INS40 INS42 INS60 INS42 INS42 MOV32 INS42 INS40 INS42 INS42 UPD42 MOV32 INS42 INS40 INS42 INS60 INS60 INS60 INS21 INS42 INS42 MOV32 INS42 INS40 INS42 INS42 INS42 MOV32 INS42 INS40 INS42 INS60 INS42 INS42 MOV32 INS42 INS40 INS42 INS42 UPD42 MOV32 INS42 INS40 INS42 INS42 INS42 MOV32 INS42 INS40 INS42 INS21 INS44 INS8 INS42 INS42 MOV32 INS42 INS40 INS42 INS21 INS44 INS8 INS42 INS42 MOV32 INS42 INS40 INS42 INS42 INS42 MOV32 INS42 INS40 INS42 MOV8 INS42 INS42 MOV32 INS42 INS40 INS42 MOV44 INS42 INS42 MOV32 UPD42 INS40 UPD42 UPD42 MOV42 INS42 MOV32 UPD42 INS40 UPD42 INS42 INS42 MOV32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS21 INS25 INS52 INS42 INS42 INS42 MOV43 INS59 MOV43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 MOV5 INS59 INS42 INS32 INS43 INS42 INS21 INS42 INS32 INS43 INS42 INS21 INS42 MOV43 MOV43 INS42 INS32 INS32 INS32 INS38 INS8 INS42 INS32 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS45 INS32 INS32 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS40 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS27 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54