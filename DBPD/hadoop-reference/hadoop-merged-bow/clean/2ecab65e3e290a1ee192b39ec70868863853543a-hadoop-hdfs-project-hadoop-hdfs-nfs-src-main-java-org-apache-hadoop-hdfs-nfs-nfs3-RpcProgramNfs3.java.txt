HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.SocketAddress;
-  public GETATTR3Response getattr(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public GETATTR3Response getattr(XDR xdr, RpcInfo info) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-  public SETATTR3Response setattr(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public SETATTR3Response setattr(XDR xdr, RpcInfo info) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
-  public LOOKUP3Response lookup(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public LOOKUP3Response lookup(XDR xdr, RpcInfo info) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-  public ACCESS3Response access(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public ACCESS3Response access(XDR xdr, RpcInfo info) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-  public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  @Override
+  public READLINK3Response readlink(XDR xdr, RpcInfo info) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-  public READ3Response read(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public READ3Response read(XDR xdr, RpcInfo info) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
+    SocketAddress remoteAddress = info.remoteAddress();
+    return read(xdr, securityHandler, remoteAddress);
+  }
+  
+  @VisibleForTesting
+  READ3Response read(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) {
-  public WRITE3Response write(XDR xdr, Channel channel, int xid,
-      SecurityHandler securityHandler, InetAddress client) {
+  public WRITE3Response write(XDR xdr, RpcInfo info) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
+    RpcCall rpcCall = (RpcCall) info.header();
+    int xid = rpcCall.getXid();
+    SocketAddress remoteAddress = info.remoteAddress();
+    return write(xdr, info.channel(), xid, securityHandler, remoteAddress);
+  }
+  
+  @VisibleForTesting
+  WRITE3Response write(XDR xdr, Channel channel, int xid,
+      SecurityHandler securityHandler, SocketAddress remoteAddress) {
-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {
-  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public CREATE3Response create(XDR xdr, RpcInfo info) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
+    SocketAddress remoteAddress = info.remoteAddress();
+    return create(xdr, securityHandler, remoteAddress);
+  }
+  
+  @VisibleForTesting
+  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {
-  public MKDIR3Response mkdir(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public MKDIR3Response mkdir(XDR xdr, RpcInfo info) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
-  public READDIR3Response mknod(XDR xdr,
-      SecurityHandler securityHandler, InetAddress client) {
+  @Override
+  public READDIR3Response mknod(XDR xdr, RpcInfo info) {
-  public REMOVE3Response remove(XDR xdr,
-      SecurityHandler securityHandler, InetAddress client) {
+  public REMOVE3Response remove(XDR xdr, RpcInfo info) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-  public RMDIR3Response rmdir(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public RMDIR3Response rmdir(XDR xdr, RpcInfo info) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
-  public RENAME3Response rename(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public RENAME3Response rename(XDR xdr, RpcInfo info) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
-  public SYMLINK3Response symlink(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public SYMLINK3Response symlink(XDR xdr, RpcInfo info) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+    if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-  public READDIR3Response link(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  @Override
+  public READDIR3Response link(XDR xdr, RpcInfo info) {
+  public READDIR3Response readdir(XDR xdr, RpcInfo info) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
+    SocketAddress remoteAddress = info.remoteAddress();
+    return readdir(xdr, securityHandler, remoteAddress);
+  }
-      InetAddress client) {
+      SocketAddress remoteAddress) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) {
-  public READDIRPLUS3Response readdirplus(XDR xdr,
-      SecurityHandler securityHandler, InetAddress client) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+  @Override
+  public READDIRPLUS3Response readdirplus(XDR xdr, RpcInfo info) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
+    SocketAddress remoteAddress = info.remoteAddress();
+    return readdirplus(xdr, securityHandler, remoteAddress);
+  }
+
+  @VisibleForTesting
+  READDIRPLUS3Response readdirplus(XDR xdr, SecurityHandler securityHandler,
+      SocketAddress remoteAddress) {
+    if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) {
-  public FSSTAT3Response fsstat(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public FSSTAT3Response fsstat(XDR xdr, RpcInfo info) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-  public FSINFO3Response fsinfo(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public FSINFO3Response fsinfo(XDR xdr, RpcInfo info) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-  public PATHCONF3Response pathconf(XDR xdr, SecurityHandler securityHandler,
-      InetAddress client) {
+  public PATHCONF3Response pathconf(XDR xdr, RpcInfo info) {
-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-  public COMMIT3Response commit(XDR xdr, Channel channel, int xid,
-      SecurityHandler securityHandler, InetAddress client) {
+  public COMMIT3Response commit(XDR xdr, RpcInfo info) {
+    //Channel channel, int xid,
+    //    SecurityHandler securityHandler, InetAddress client) {
+    SecurityHandler securityHandler = getSecurityHandler(info);
-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {
-      writeManager.handleCommit(dfsClient, handle, commitOffset, channel, xid,
-          preOpAttr);
+      RpcCall rpcCall = (RpcCall) info.header();
+      int xid = rpcCall.getXid();
+      writeManager.handleCommit(dfsClient, handle, commitOffset,
+          info.channel(), xid, preOpAttr);
+
+  private SecurityHandler getSecurityHandler(RpcInfo info) {
+    RpcCall rpcCall = (RpcCall) info.header();
+    return getSecurityHandler(rpcCall.getCredential(), rpcCall.getVerifier());
+  }
-    final NFSPROC3 nfsproc3 = NFSPROC3.fromValue(rpcCall.getProcedure());
+    final NFSPROC3 nfsproc3 = NFSPROC3.fromValue(rpcCall.getProcedure());    
-    Channel channel = info.channel();
-
+    
-    SecurityHandler securityHandler = getSecurityHandler(credentials,
-        rpcCall.getVerifier());
-    
-      response = getattr(xdr, securityHandler, client);
+      response = getattr(xdr, info);
-      response = setattr(xdr, securityHandler, client);
+      response = setattr(xdr, info);
-      response = lookup(xdr, securityHandler, client);
+      response = lookup(xdr, info);
-      response = access(xdr, securityHandler, client);
+      response = access(xdr, info);
-      response = readlink(xdr, securityHandler, client);
+      response = readlink(xdr, info);
-      response = read(xdr, securityHandler, client);
+      response = read(xdr, info);
-      response = write(xdr, channel, xid, securityHandler, client);
+      response = write(xdr, info);
-      response = create(xdr, securityHandler, client);
+      response = create(xdr, info);
-      response = mkdir(xdr, securityHandler, client);
+      response = mkdir(xdr, info);
-      response = symlink(xdr, securityHandler, client);
+      response = symlink(xdr, info);
-      response = mknod(xdr, securityHandler, client);
+      response = mknod(xdr, info);
-      response = remove(xdr, securityHandler, client);
+      response = remove(xdr, info);
-      response = rmdir(xdr, securityHandler, client);
+      response = rmdir(xdr, info);
-      response = rename(xdr, securityHandler, client);
+      response = rename(xdr, info);
-      response = link(xdr, securityHandler, client);
+      response = link(xdr, info);
-      response = readdir(xdr, securityHandler, client);
+      response = readdir(xdr, info);
-      response = readdirplus(xdr, securityHandler, client);
+      response = readdirplus(xdr, info);
-      response = fsstat(xdr, securityHandler, client);
+      response = fsstat(xdr, info);
-      response = fsinfo(xdr, securityHandler, client);
+      response = fsinfo(xdr, info);
-      response = pathconf(xdr, securityHandler, client);
+      response = pathconf(xdr,info);
-      response = commit(xdr, channel, xid, securityHandler, client);
+      response = commit(xdr, info);
-  private boolean checkAccessPrivilege(final InetAddress client,
+  private boolean checkAccessPrivilege(RpcInfo info,
+    SocketAddress remoteAddress = info.remoteAddress();
+    return checkAccessPrivilege(remoteAddress, expected);
+  }
+
+  private boolean checkAccessPrivilege(SocketAddress remoteAddress,
+      final AccessPrivilege expected) {
+    // Port monitoring
+    if (!doPortMonitoring(remoteAddress)) {
+      return false;
+    }
+    
+    // Check export table
+    InetAddress client = ((InetSocketAddress) remoteAddress).getAddress();

INS26 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 MOV78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 MOV78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 MOV78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS78 MOV78 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 MOV43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 UPD43 UPD42 INS60 UPD43 UPD42 INS60 UPD43 UPD42 INS60 UPD43 UPD42 INS60 INS42 UPD43 UPD42 INS60 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS41 INS42 UPD43 UPD42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS41 INS42 UPD43 UPD42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS41 INS42 UPD43 UPD42 UPD43 UPD42 INS60 INS42 UPD43 UPD42 UPD43 UPD42 INS60 UPD43 UPD42 INS60 UPD43 UPD42 INS60 UPD43 UPD42 INS60 UPD43 UPD42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS41 UPD43 UPD42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS41 INS42 UPD43 UPD42 UPD43 UPD42 INS25 INS60 UPD43 UPD42 INS60 UPD43 UPD42 MOV25 INS60 UPD43 UPD42 INS60 INS43 INS42 INS60 INS41 INS43 INS42 INS83 INS43 INS42 INS60 INS41 UPD43 UPD42 INS25 INS60 UPD42 INS43 INS59 UPD42 INS43 INS59 UPD42 INS43 INS59 UPD42 INS43 INS59 UPD42 INS43 INS59 INS42 INS42 INS43 INS59 INS43 INS59 INS32 UPD42 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS32 UPD42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 UPD42 UPD42 INS43 INS59 UPD42 UPD42 INS43 INS59 UPD42 INS43 INS59 UPD42 INS43 INS59 UPD42 INS43 INS59 UPD42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 UPD42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 UPD42 UPD42 INS38 INS8 INS43 INS59 UPD42 MOV8 INS43 INS59 UPD42 INS43 INS59 UPD42 INS43 INS59 INS42 INS43 INS59 MOV32 INS42 INS42 INS43 INS59 INS32 UPD42 INS38 INS8 MOV43 INS59 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS60 INS42 INS42 INS11 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS41 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS59 INS39 INS59 INS43 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS9 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS40 MOV42 MOV42 MOV40 INS42 INS42 INS11 INS42 INS32 INS32 INS42 INS42 INS42 INS11 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS32 INS42 INS42 INS42 MOV42 INS43 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL38 DEL25 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83