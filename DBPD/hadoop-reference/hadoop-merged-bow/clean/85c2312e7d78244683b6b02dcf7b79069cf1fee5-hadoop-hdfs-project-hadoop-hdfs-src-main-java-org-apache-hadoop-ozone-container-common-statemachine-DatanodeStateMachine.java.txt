HDFS-11492. Ozone: Add the ability to handle sendContainerReport Command. Contributed by Anu Engineer.

+import org.apache.hadoop.ozone.container.common.statemachine.commandhandler.CommandDispatcher;
+import org.apache.hadoop.ozone.container.common.statemachine.commandhandler.ContainerReportHandler;
+import org.apache.hadoop.ozone.protocol.commands.SCMCommand;
+import java.util.concurrent.atomic.AtomicLong;
+  private final CommandDispatcher commandDispatcher;
+  private long commandsHandled;
+  private AtomicLong nextHB;
-   * @param conf - Configration.
+   * @param conf - Configuration.
+    nextHB = new AtomicLong(Time.monotonicNow());
+
+
+     // When we add new handlers just adding a new handler here should do the
+     // trick.
+    commandDispatcher = CommandDispatcher.newBuilder()
+      .addHandler(new ContainerReportHandler())
+      .setConnectionManager(connectionManager)
+      .setContainer(container)
+      .setContext(context)
+      .build();
-    long nextHB = 0;
+
+    initCommandHandlerThread(conf);
-        nextHB = Time.monotonicNow() + heartbeatFrequency;
+        nextHB.set(Time.monotonicNow() + heartbeatFrequency);
-        if (now < nextHB) {
-          Thread.sleep(nextHB - now);
+        if (now < nextHB.get()) {
+          Thread.sleep(nextHB.get() - now);
-        LOG.error("Unable to shutdown statemachine properly.");
+        LOG.error("Unable to shutdown state machine properly.");
+
+  /**
+   * Create a command handler thread.
+   *
+   * @param conf
+   */
+  private void initCommandHandlerThread(Configuration conf) {
+
+    /**
+     * Task that periodically checks if we have any outstanding commands.
+     * It is assumed that commands can be processed slowly and in order.
+     * This assumption might change in future. Right now due to this assumption
+     * we have single command  queue process thread.
+     */
+    Runnable processCommandQueue = () -> {
+      long now;
+      while (getContext().getState() != DatanodeStates.SHUTDOWN) {
+        SCMCommand command = getContext().getNextCommand();
+        if (command != null) {
+          commandDispatcher.handle(command);
+          commandsHandled++;
+        } else {
+          try {
+            // Sleep till the next HB + 1 second.
+            now = Time.monotonicNow();
+            if (nextHB.get() > now) {
+              Thread.sleep((nextHB.get() - now) + 1000L);
+            }
+          } catch (InterruptedException e) {
+            // Ignore this exception.
+          }
+        }
+      }
+    };
+
+    // We will have only one thread for command processing in a datanode.
+    Thread cmdProcessThread = new Thread(processCommandQueue);
+    cmdProcessThread.setDaemon(true);
+    cmdProcessThread.setName("Command processor thread");
+    cmdProcessThread.setUncaughtExceptionHandler((Thread t, Throwable e) -> {
+      // Let us just restart this thread after logging a critical error.
+      // if this thread is not running we cannot handle commands from SCM.
+      LOG.error("Critical Error : Command processor thread encountered an " +
+          "error. Thread: {}", t.toString(), e);
+      cmdProcessThread.start();
+    });
+    cmdProcessThread.start();
+  }
+
+  /**
+   * Returns the number of commands handled  by the datanode.
+   * @return  count
+   */
+  @VisibleForTesting
+  public long getCommandHandled() {
+    return commandsHandled;
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS65 INS65 INS43 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS65 INS65 INS42 INS41 UPD66 INS7 INS7 INS32 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS66 INS66 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS45 INS42 INS42 INS86 INS42 INS42 INS43 INS32 INS32 INS42 INS8 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS61 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS32 INS42 INS42 INS32 INS39 INS59 INS27 INS8 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 MOV27 INS32 UPD45 INS42 INS32 INS40 INS60 INS25 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS8 INS45 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS54 INS42 INS32 INS32 INS42 INS32 INS37 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS25 INS44 INS8 INS7 INS27 INS8 INS43 INS42 INS42 INS32 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS36 INS34 INS27 INS32 INS42 INS42 INS42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL7 DEL42 DEL42