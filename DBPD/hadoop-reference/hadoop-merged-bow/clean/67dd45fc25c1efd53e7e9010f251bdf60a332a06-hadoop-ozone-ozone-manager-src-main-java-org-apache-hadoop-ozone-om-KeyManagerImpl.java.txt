HDDS-1185. Optimize GetFileStatus in OzoneFileSystem by reducing the number of rpc call to OM. Contributed by Mukul Kumar Singh.

+import org.apache.commons.lang3.StringUtils;
+import org.apache.hadoop.ozone.om.helpers.OzoneFileStatus;
+import static org.apache.hadoop.ozone.OzoneConsts.OZONE_URI_DELIMITER;
+  public OzoneFileStatus getFileStatus(String volumeName, String bucketName,
+                                       String keyName) throws IOException {
+    Preconditions.checkNotNull(volumeName);
+    Preconditions.checkNotNull(bucketName);
+    Preconditions.checkNotNull(keyName);
+
+    metadataManager.getLock().acquireBucketLock(volumeName, bucketName);
+    try {
+      // Check if this is the root of the filesystem.
+      if (keyName.length() == 0) {
+        validateBucket(volumeName, bucketName);
+        return new OzoneFileStatus(3, scmBlockSize, keyName);
+      }
+
+      //Check if the key is a file.
+      String fileKeyBytes = metadataManager.getOzoneKey(
+          volumeName, bucketName, keyName);
+      OmKeyInfo fileKeyInfo = metadataManager.getKeyTable().get(fileKeyBytes);
+      if (fileKeyInfo != null) {
+        // this is a file
+        return new OzoneFileStatus(fileKeyInfo, scmBlockSize, false);
+      }
+
+      String dirKey = addTrailingSlashIfNeeded(keyName);
+      String dirKeyBytes = metadataManager.getOzoneKey(
+          volumeName, bucketName, dirKey);
+      OmKeyInfo dirKeyInfo = metadataManager.getKeyTable().get(dirKeyBytes);
+      if (dirKeyInfo != null) {
+        return new OzoneFileStatus(dirKeyInfo, scmBlockSize, true);
+      }
+
+      List<OmKeyInfo> keys = metadataManager.listKeys(volumeName, bucketName,
+          null, dirKey, 1);
+      if (keys.iterator().hasNext()) {
+        return new OzoneFileStatus(3, scmBlockSize, keyName);
+      }
+
+      LOG.debug("Unable to get file status for the key: volume:" + volumeName +
+          " bucket:" + bucketName + " key:" + keyName + " with error no " +
+          "such file exists:");
+      throw new OMException("Unable to get file status: volume: " +
+          volumeName + "bucket: " + bucketName + "key: " + keyName,
+          ResultCodes.FILE_NOT_FOUND);
+    } finally {
+      metadataManager.getLock().releaseBucketLock(volumeName, bucketName);
+    }
+  }
+
+  private String addTrailingSlashIfNeeded(String key) {
+    if (StringUtils.isNotEmpty(key) && !key.endsWith(OZONE_URI_DELIMITER)) {
+      return key + OZONE_URI_DELIMITER;
+    } else {
+      return key;
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS54 INS42 INS43 INS42 INS25 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS8 INS8 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS25 INS60 INS60 INS25 INS60 INS60 INS60 INS25 INS60 INS25 INS21 INS53 INS21 INS32 INS38 INS41 INS41 INS42 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS74 INS59 INS32 INS8 INS32 INS14 INS32 INS42 INS42 INS42 INS32 INS27 INS42 INS32 INS34 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS43 INS43 INS42 INS32 INS32 INS42 INS41 INS42 INS42 INS27 INS43 INS27 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS34 INS42 INS42 INS14 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS34 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS9 INS42 INS42 INS43 INS42 INS42 INS9 INS43 INS34 INS42 INS42 INS42 INS42 INS42 INS42