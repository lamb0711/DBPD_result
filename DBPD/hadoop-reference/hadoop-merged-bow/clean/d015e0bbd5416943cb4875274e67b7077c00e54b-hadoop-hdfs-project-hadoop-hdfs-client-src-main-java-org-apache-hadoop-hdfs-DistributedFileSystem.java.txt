HDFS-7878. API - expose a unique file identifier.

+import org.apache.hadoop.fs.PathHandle;
+import org.apache.hadoop.fs.Options.HandleOpt;
+import org.apache.hadoop.hdfs.protocol.HdfsPathHandle;
+import java.util.stream.Collectors;
+  /**
+   * Opens an FSDataInputStream with the indicated file ID extracted from
+   * the {@link PathHandle}.
+   * @param fd Reference to entity in this FileSystem.
+   * @param bufferSize the size of the buffer to be used.
+   */
+  @Override
+  public FSDataInputStream open(PathHandle fd, int bufferSize)
+      throws IOException {
+    if (!(fd instanceof HdfsPathHandle)) {
+      fd = new HdfsPathHandle(fd.bytes());
+    }
+    HdfsPathHandle id = (HdfsPathHandle) fd;
+    return open(DFSUtilClient.makePathFromFileId(id.getInodeId()), bufferSize);
+  }
+
+  /**
+   * Create a handle to an HDFS file.
+   * @param st HdfsFileStatus instance from NameNode
+   * @param opts Standard handle arguments
+   * @throws IllegalArgumentException If the FileStatus instance refers to a
+   * directory, symlink, or another namesystem.
+   * @throws UnsupportedOperationException If opts are not specified or both
+   * data and location are not allowed to change.
+   * @return A handle to the file.
+   */
+  @Override
+  protected PathHandle createPathHandle(FileStatus st, HandleOpt... opts) {
+    if (!(st instanceof HdfsFileStatus)) {
+      throw new IllegalArgumentException("Invalid FileStatus "
+          + st.getClass().getSimpleName());
+    }
+    if (st.isDirectory() || st.isSymlink()) {
+      throw new IllegalArgumentException("PathHandle only available for files");
+    }
+    if (!getUri().getAuthority().equals(st.getPath().toUri().getAuthority())) {
+      throw new IllegalArgumentException("Wrong FileSystem: " + st.getPath());
+    }
+    HandleOpt.Data data = HandleOpt.getOpt(HandleOpt.Data.class, opts)
+        .orElse(HandleOpt.changed(false));
+    HandleOpt.Location loc = HandleOpt.getOpt(HandleOpt.Location.class, opts)
+        .orElse(HandleOpt.moved(false));
+    if (!data.allowChange() || !loc.allowChange()) {
+      throw new UnsupportedOperationException("Unsupported opts "
+          + Arrays.stream(opts)
+                  .map(HandleOpt::toString).collect(Collectors.joining(",")));
+    }
+    return new HdfsPathHandle((HdfsFileStatus)st);
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS60 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS25 INS25 INS60 INS60 INS25 INS41 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS38 INS8 INS43 INS59 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS38 INS8 INS27 INS8 INS38 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS14 INS42 INS36 INS21 INS42 INS42 INS11 INS42 INS32 INS42 INS36 INS53 INS32 INS32 INS53 INS32 INS53 INS40 INS42 INS32 INS40 INS42 INS32 INS38 INS38 INS53 INS43 INS11 INS62 INS7 INS43 INS42 INS42 INS42 INS32 INS62 INS14 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS32 INS14 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS14 INS42 INS43 INS42 INS42 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS43 INS27 INS43 INS45 INS32 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS57 INS42 INS42 INS42 INS9 INS42 INS42 INS57 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS43 INS43 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS90 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42