HADOOP-16570. S3A committers encounter scale issues.

Contributed by Steve Loughran.

This addresses two scale issues which has surfaced in large scale benchmarks
of the S3A Committers.

* Thread pools are not cleaned up.
  This now happens, with tests.

* OOM on job commit for jobs with many thousands of tasks,
  each generating tens of (very large) files.

Instead of loading all pending commits into memory as a single list, the list
of files to load is the sole list which is passed around; .pendingset files are
loaded and processed in isolation -and reloaded if necessary for any
abort/rollback operation.

The parallel commit/abort/revert operations now work at the .pendingset level,
rather than that of individual pending commit files. The existing parallelized
Tasks API is still used to commit those files, but with a null thread pool, so
as to serialize the operations.

Change-Id: I5c8240cd31800eaa83d112358770ca0eb2bca797

+import java.util.stream.Collectors;
+import org.assertj.core.api.Assertions;
+import org.junit.AfterClass;
+   * This only looks for leakage of committer thread pools,
+   * and not any other leaked threads, such as those from S3A FS instances.
+   */
+  @AfterClass
+  public static void checkForThreadLeakage() {
+    List<String> committerThreads = getCurrentThreadNames().stream()
+        .filter(n -> n.startsWith(AbstractS3ACommitter.THREAD_PREFIX))
+        .collect(Collectors.toList());
+    Assertions.assertThat(committerThreads)
+        .describedAs("Outstanding committer threads")
+        .isEmpty();
+  }
+
+  /**
+      verifyCommitterHasNoThreads(committer);
-    committer.commitTask(tContext);
+    commitTask(committer, tContext);
+    verifyCommitterHasNoThreads(committer2);
-    committer.commitTask(tContext);
+    commitTask(committer, tContext);
-    committer.commitJob(jContext);
+    commitJob(committer, jContext);
-    committer.commitJob(jContext);
+    commitJob(committer, jContext);
+    verifyCommitterHasNoThreads(committer);
+    verifyCommitterHasNoThreads(committer);
-    committer.commitTask(tContext);
-    committer.commitJob(jContext);
+    commitTask(committer, tContext);
+    commitJob(committer, jContext);
+    verifyCommitterHasNoThreads(committer2);
-      committer2.commitTask(tContext2);
-      committer1.commitTask(tContext1);
+      commitTask(committer2, tContext2);
+      commitTask(committer1, tContext1);
-      committer1.commitJob(jContext1);
+      commitJob(committer1, jContext1);
-      committer2.commitJob(jContext2);
+      commitJob(committer2, jContext2);
+  /**
+   * Commit a task then validate the state of the committer afterwards.
+   * @param committer committer
+   * @param tContext task context
+   * @throws IOException IO failure
+   */
+  protected void commitTask(final AbstractS3ACommitter committer,
+      final TaskAttemptContext tContext) throws IOException {
+    committer.commitTask(tContext);
+    verifyCommitterHasNoThreads(committer);
+  }
+
+  /**
+   * Commit a job then validate the state of the committer afterwards.
+   * @param committer committer
+   * @param jContext job context
+   * @throws IOException IO failure
+   */
+  protected void commitJob(final AbstractS3ACommitter committer,
+      final JobContext jContext) throws IOException {
+    committer.commitJob(jContext);
+    verifyCommitterHasNoThreads(committer);
+  }
+
+  /**
+   * Verify that the committer does not have a thread pool.
+   * @param committer committer to validate.
+   */
+  protected void verifyCommitterHasNoThreads(AbstractS3ACommitter committer) {
+    assertFalse("Committer has an active thread pool",
+        committer.hasThreadPool());
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS78 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS42 MOV21 INS21 INS65 INS65 INS65 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS42 MOV21 INS21 INS65 INS65 INS43 INS42 INS21 INS66 INS66 INS74 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS66 INS42 INS66 INS42 INS32 INS43 INS43 INS42 INS32 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS59 INS32 INS42 INS42 INS42 INS42 INS40