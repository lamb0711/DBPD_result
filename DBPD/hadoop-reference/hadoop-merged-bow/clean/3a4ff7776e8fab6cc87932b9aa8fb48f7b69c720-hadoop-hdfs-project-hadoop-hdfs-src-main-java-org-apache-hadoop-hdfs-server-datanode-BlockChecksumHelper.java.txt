HDFS-9694. Make existing DFSClient#getFileChecksum() work for striped blocks. Contributed by Kai Zheng

+import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
+import org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy;
+import org.apache.hadoop.hdfs.protocol.StripedBlockInfo;
+import org.apache.hadoop.hdfs.protocol.datatransfer.DataTransferProtoUtil;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import org.apache.hadoop.hdfs.protocol.datatransfer.Op;
+import org.apache.hadoop.hdfs.protocol.datatransfer.Sender;
+import org.apache.hadoop.hdfs.protocol.proto.DataTransferProtos;
+import org.apache.hadoop.hdfs.protocolPB.PBHelperClient;
+import org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier;
+import org.apache.hadoop.hdfs.util.StripedBlockUtil;
+import org.apache.hadoop.io.DataOutputBuffer;
+import org.apache.hadoop.security.token.Token;
+import java.io.DataOutputStream;
-  private BlockChecksumHelper() {}
+  private BlockChecksumHelper() {
+  }
-  static abstract class BlockChecksumComputer {
+  static abstract class AbstractBlockChecksumComputer {
+
+    private byte[] outBytes;
+    private int bytesPerCRC = -1;
+    private DataChecksum.Type crcType = null;
+    private long crcPerBlock = -1;
+    private int checksumSize = -1;
+
+    AbstractBlockChecksumComputer(DataNode datanode) throws IOException {
+      this.datanode = datanode;
+    }
+
+    abstract void compute() throws IOException;
+
+    Sender createSender(IOStreamPair pair) {
+      DataOutputStream out = (DataOutputStream) pair.out;
+      return new Sender(out);
+    }
+
+    DataNode getDatanode() {
+      return datanode;
+    }
+
+    InputStream getBlockInputStream(ExtendedBlock block, long seekOffset)
+        throws IOException {
+      return datanode.data.getBlockInputStream(block, seekOffset);
+    }
+
+    void setOutBytes(byte[] bytes) {
+      this.outBytes = bytes;
+    }
+
+    byte[] getOutBytes() {
+      return outBytes;
+    }
+
+    int getBytesPerCRC() {
+      return bytesPerCRC;
+    }
+
+    public void setBytesPerCRC(int bytesPerCRC) {
+      this.bytesPerCRC = bytesPerCRC;
+    }
+
+    public void setCrcType(DataChecksum.Type crcType) {
+      this.crcType = crcType;
+    }
+
+    public void setCrcPerBlock(long crcPerBlock) {
+      this.crcPerBlock = crcPerBlock;
+    }
+
+    public void setChecksumSize(int checksumSize) {
+      this.checksumSize = checksumSize;
+    }
+
+    DataChecksum.Type getCrcType() {
+      return crcType;
+    }
+
+    long getCrcPerBlock() {
+      return crcPerBlock;
+    }
+
+    int getChecksumSize() {
+      return checksumSize;
+    }
+  }
+
+  /**
+   * The abstract base block checksum computer.
+   */
+  static abstract class BlockChecksumComputer
+      extends AbstractBlockChecksumComputer {
-    private byte[] outBytes;
-    private int bytesPerCRC = -1;
-    private DataChecksum.Type crcType = null;
-    private long crcPerBlock = -1;
-    private int checksumSize = -1;
-      this.datanode = datanode;
+      super(datanode);
-    protected DataNode getDatanode() {
-      return datanode;
+    Sender createSender(IOStreamPair pair) {
+      DataOutputStream out = (DataOutputStream) pair.out;
+      return new Sender(out);
-    protected ExtendedBlock getBlock() {
+
+    ExtendedBlock getBlock() {
-    protected long getRequestLength() {
+    long getRequestLength() {
-    protected LengthInputStream getMetadataIn() {
+    LengthInputStream getMetadataIn() {
-    protected DataInputStream getChecksumIn() {
+    DataInputStream getChecksumIn() {
-    protected long getVisibleLength() {
+    long getVisibleLength() {
-    protected boolean isPartialBlk() {
+    boolean isPartialBlk() {
-    protected void setOutBytes(byte[] bytes) {
-      this.outBytes = bytes;
-    }
-
-    protected byte[] getOutBytes() {
-      return outBytes;
-    }
-
-    protected int getBytesPerCRC() {
-      return bytesPerCRC;
-    }
-
-    protected DataChecksum.Type getCrcType() {
-      return crcType;
-    }
-
-    protected long getCrcPerBlock() {
-      return crcPerBlock;
-    }
-
-    protected int getChecksumSize() {
-      return checksumSize;
-    }
-
-    protected BlockMetadataHeader getHeader() {
+    BlockMetadataHeader getHeader() {
-    protected DataChecksum getChecksum() {
+    DataChecksum getChecksum() {
+     *
+     *
-    protected void readHeader() throws IOException {
+    void readHeader() throws IOException {
-      checksumSize = checksum.getChecksumSize();
-      bytesPerCRC = checksum.getBytesPerChecksum();
-      crcPerBlock = checksumSize <= 0 ? 0 :
+      setChecksumSize(checksum.getChecksumSize());
+      setBytesPerCRC(checksum.getBytesPerChecksum());
+      long crcPerBlock = checksum.getChecksumSize() <= 0 ? 0 :
-              BlockMetadataHeader.getHeaderSize()) / checksumSize;
-      crcType = checksum.getChecksumType();
+              BlockMetadataHeader.getHeaderSize()) / checksum.getChecksumSize();
+      setCrcPerBlock(crcPerBlock);
+      setCrcType(checksum.getChecksumType());
+     *
-    protected byte[] crcPartialBlock() throws IOException {
-      int partialLength = (int) (requestLength % bytesPerCRC);
+    byte[] crcPartialBlock() throws IOException {
+      int partialLength = (int) (requestLength % getBytesPerCRC());
-        final InputStream blockIn = datanode.data.getBlockInputStream(block,
+        final InputStream blockIn = getBlockInputStream(block,
-        byte[] partialCrc = new byte[checksumSize];
+        byte[] partialCrc = new byte[getChecksumSize()];
-      byte[] buffer = new byte[4*1024];
+      byte[] buffer = new byte[4 * 1024];
-}
+
+  /**
+   * Non-striped block group checksum computer for striped blocks.
+   */
+  static class BlockGroupNonStripedChecksumComputer
+      extends AbstractBlockChecksumComputer {
+
+    private final ExtendedBlock blockGroup;
+    private final ErasureCodingPolicy ecPolicy;
+    private final DatanodeInfo[] datanodes;
+    private final Token<BlockTokenIdentifier>[] blockTokens;
+
+    private final DataOutputBuffer md5writer = new DataOutputBuffer();
+
+    BlockGroupNonStripedChecksumComputer(DataNode datanode,
+                                         StripedBlockInfo stripedBlockInfo)
+        throws IOException {
+      super(datanode);
+      this.blockGroup = stripedBlockInfo.getBlock();
+      this.ecPolicy = stripedBlockInfo.getErasureCodingPolicy();
+      this.datanodes = stripedBlockInfo.getDatanodes();
+      this.blockTokens = stripedBlockInfo.getBlockTokens();
+    }
+
+    @Override
+    void compute() throws IOException {
+      for (int idx = 0; idx < ecPolicy.getNumDataUnits(); idx++) {
+        ExtendedBlock block =
+            StripedBlockUtil.constructInternalBlock(blockGroup,
+            ecPolicy.getCellSize(), ecPolicy.getNumDataUnits(), idx);
+        DatanodeInfo targetDatanode = datanodes[idx];
+        Token<BlockTokenIdentifier> blockToken = blockTokens[idx];
+        checksumBlock(block, idx, blockToken, targetDatanode);
+      }
+
+      MD5Hash md5out = MD5Hash.digest(md5writer.getData());
+      setOutBytes(md5out.getDigest());
+    }
+
+    private void checksumBlock(ExtendedBlock block, int blockIdx,
+                               Token<BlockTokenIdentifier> blockToken,
+                               DatanodeInfo targetDatanode) throws IOException {
+      int timeout = 3000;
+      try (IOStreamPair pair = getDatanode().connectToDN(targetDatanode,
+          timeout, block, blockToken)) {
+
+        LOG.debug("write to {}: {}, block={}",
+            getDatanode(), Op.BLOCK_CHECKSUM, block);
+
+        // get block MD5
+        createSender(pair).blockChecksum(block, blockToken);
+
+        final DataTransferProtos.BlockOpResponseProto reply =
+            DataTransferProtos.BlockOpResponseProto.parseFrom(
+                PBHelperClient.vintPrefixed(pair.in));
+
+        String logInfo = "for block " + block
+            + " from datanode " + targetDatanode;
+        DataTransferProtoUtil.checkBlockOpStatus(reply, logInfo);
+
+        DataTransferProtos.OpBlockChecksumResponseProto checksumData =
+            reply.getChecksumResponse();
+
+        //read byte-per-checksum
+        final int bpc = checksumData.getBytesPerCrc();
+        if (blockIdx == 0) { //first block
+          setBytesPerCRC(bpc);
+        } else if (bpc != getBytesPerCRC()) {
+          throw new IOException("Byte-per-checksum not matched: bpc=" + bpc
+              + " but bytesPerCRC=" + getBytesPerCRC());
+        }
+
+        //read crc-per-block
+        final long cpb = checksumData.getCrcPerBlock();
+        if (blockIdx == 0) {
+          setCrcPerBlock(cpb);
+        }
+
+        //read md5
+        final MD5Hash md5 = new MD5Hash(
+            checksumData.getMd5().toByteArray());
+        md5.write(md5writer);
+
+        // read crc-type
+        final DataChecksum.Type ct;
+        if (checksumData.hasCrcType()) {
+          ct = PBHelperClient.convert(checksumData.getCrcType());
+        } else {
+          LOG.debug("Retrieving checksum from an earlier-version DataNode: " +
+              "inferring checksum by reading first byte");
+          ct = DataChecksum.Type.DEFAULT;
+        }
+
+        if (blockIdx == 0) { // first block
+          setCrcType(ct);
+        } else if (getCrcType() != DataChecksum.Type.MIXED &&
+            getCrcType() != ct) {
+          // if crc types are mixed in a file
+          setCrcType(DataChecksum.Type.MIXED);
+        }
+
+        if (LOG.isDebugEnabled()) {
+          if (blockIdx == 0) {
+            LOG.debug("set bytesPerCRC=" + getBytesPerCRC()
+                + ", crcPerBlock=" + getCrcPerBlock());
+          }
+          LOG.debug("got reply from " + targetDatanode + ": md5=" + md5);
+        }
+      }
+    }
+  }
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS55 INS29 INS83 INS83 INS42 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 INS31 INS31 INS31 MOV31 INS31 MOV31 MOV31 MOV31 INS31 INS31 INS31 INS31 MOV31 MOV31 MOV31 INS43 INS31 INS29 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS65 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS43 INS42 INS44 INS8 INS65 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS5 INS59 INS83 INS83 INS5 INS59 INS83 INS83 INS43 INS59 INS42 INS44 INS44 INS43 INS8 INS78 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS66 INS43 INS42 INS42 MOV21 INS42 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS42 INS39 INS42 INS42 INS41 INS39 INS42 INS21 INS43 INS42 INS21 INS39 INS42 INS21 INS39 INS42 INS21 INS46 INS42 INS43 INS42 INS60 INS41 INS60 INS66 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS74 INS85 INS42 INS42 INS42 INS14 INS43 INS42 INS43 INS42 INS42 INS46 INS21 INS21 INS21 INS21 INS42 INS42 INS24 INS60 INS21 INS43 INS42 INS39 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS42 INS43 INS59 INS14 INS42 INS32 INS7 INS40 INS7 INS7 INS7 INS42 INS42 INS43 INS59 INS14 INS32 INS32 INS39 INS59 INS32 INS32 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS58 INS27 INS37 INS8 INS43 INS59 INS32 INS42 INS43 INS43 INS42 INS39 INS59 INS58 INS8 INS42 INS42 INS11 INS43 INS42 INS40 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS11 INS43 INS42 INS42 MOV32 INS42 MOV32 INS42 MOV16 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS60 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS43 INS59 INS21 INS21 INS60 INS60 INS21 INS60 INS60 INS25 INS60 INS25 INS60 INS21 INS60 INS25 INS25 INS25 INS43 INS40 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS40 INS42 MOV5 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS83 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS83 INS39 INS59 INS27 INS8 INS25 INS83 INS39 INS59 INS27 INS8 INS83 INS43 INS59 INS32 INS83 INS43 INS59 INS32 INS8 INS8 INS27 INS8 INS25 INS32 INS8 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS2 INS43 INS43 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS34 INS21 INS27 INS8 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS34 INS21 INS27 INS8 INS42 INS42 INS25 INS21 INS42 INS42 INS42 INS42 INS32 MOV5 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS53 INS42 INS42 INS32 INS43 INS32 INS7 INS32 INS7 INS32 INS27 INS27 INS21 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS32 INS40 INS32 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS27 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS42 INS40 INS32 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS32 INS45 INS32 INS42 INS42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL7 DEL42 DEL7 DEL42 DEL42 DEL42 DEL7 DEL42 DEL7 DEL83 DEL42 DEL40 DEL42