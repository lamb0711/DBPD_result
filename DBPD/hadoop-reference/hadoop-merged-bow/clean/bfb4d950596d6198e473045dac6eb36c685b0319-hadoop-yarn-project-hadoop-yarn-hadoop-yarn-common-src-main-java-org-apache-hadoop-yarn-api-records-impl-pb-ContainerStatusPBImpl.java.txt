YARN-5430. Return container's ip and host from NM ContainerStatus call. Contributed by Jian He.

+import org.apache.hadoop.util.StringUtils;
+import org.apache.hadoop.yarn.proto.YarnProtos;
-import com.google.protobuf.TextFormat;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
-  
-  
+  private static final String HOST = "HOST";
+  private static final String IPS = "IPS";
+  private Map<String, String> containerAttributes = new HashMap<>();
+
+
+    if (containerAttributes != null && !containerAttributes.isEmpty()) {
+      addContainerAttributesToProto();
+    }
+  private void addContainerAttributesToProto() {
+    maybeInitBuilder();
+    builder.clearContainerAttributes();
+    if (containerAttributes == null) {
+      return;
+    }
+    Iterable<YarnProtos.StringStringMapProto> iterable =
+        new Iterable<YarnProtos.StringStringMapProto>() {
+
+          @Override
+          public Iterator<YarnProtos.StringStringMapProto> iterator() {
+            return new Iterator<YarnProtos.StringStringMapProto>() {
+
+              private Iterator<String> keyIter =
+                  containerAttributes.keySet().iterator();
+
+              @Override public void remove() {
+                throw new UnsupportedOperationException();
+              }
+
+              @Override public YarnProtos.StringStringMapProto next() {
+                String key = keyIter.next();
+                String value = containerAttributes.get(key);
+
+                if (value == null) {
+                  value = "";
+                }
+
+                return YarnProtos.StringStringMapProto.newBuilder().setKey(key)
+                    .setValue((value)).build();
+              }
+
+              @Override public boolean hasNext() {
+                return keyIter.hasNext();
+              }
+            };
+          }
+        };
+    builder.addAllContainerAttributes(iterable);
+  }
+
+  private void initContainerAttributes() {
+    ContainerStatusProtoOrBuilder p = viaProto ? proto : builder;
+    List<YarnProtos.StringStringMapProto> list = p.getContainerAttributesList();
+    for (YarnProtos.StringStringMapProto c : list) {
+      if (!containerAttributes.containsKey(c.getKey())) {
+        this.containerAttributes.put(c.getKey(), c.getValue());
+      }
+    }
+  }
+
+  @Override
+  public synchronized List<String> getIPs() {
+    if (!containerAttributes.containsKey(IPS)) {
+      initContainerAttributes();
+    }
+    String ips = containerAttributes.get((IPS));
+    return ips == null ? null :  Arrays.asList(ips.split(","));
+  }
+
+  @Override
+  public synchronized void setIPs(List<String> ips) {
+    maybeInitBuilder();
+    if (ips == null) {
+      containerAttributes.remove(IPS);
+      addContainerAttributesToProto();
+      return;
+    }
+    containerAttributes.put(IPS, StringUtils.join(",", ips));
+  }
+
+  @Override
+  public synchronized String getHost() {
+    if (containerAttributes.get(HOST) == null) {
+      initContainerAttributes();
+    }
+    return containerAttributes.get(HOST);
+  }
+
+  @Override
+  public synchronized void setHost(String host) {
+    maybeInitBuilder();
+    if (host == null) {
+      containerAttributes.remove(HOST);
+      return;
+    }
+    containerAttributes.put(HOST, host);
+  }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS83 INS74 INS42 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 INS43 INS42 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS43 INS42 INS14 INS25 INS21 INS21 INS25 INS60 INS21 INS60 INS60 INS70 INS42 INS43 INS43 INS25 INS60 INS41 INS42 INS74 INS42 INS21 INS25 INS21 INS42 INS42 INS25 INS41 INS42 INS43 INS42 INS21 INS25 INS21 INS42 INS42 INS42 INS74 INS27 INS8 INS32 INS32 INS27 INS8 INS74 INS59 INS32 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS38 INS8 INS43 INS59 INS16 INS43 INS43 INS32 INS27 INS8 INS32 INS27 INS8 INS32 INS42 INS32 INS27 INS8 INS32 INS43 INS27 INS38 INS21 INS42 INS42 INS42 INS42 INS33 INS41 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS32 INS21 INS42 INS42 INS32 INS27 INS33 INS32 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS41 INS42 INS42 INS42 INS32 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS42 INS40 INS74 INS1 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS38 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS36 INS42 INS33 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS31 INS32 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS78 INS83 INS74 INS42 INS8 INS42 INS42 INS32 INS32 INS42 INS43 INS43 INS41 INS42 INS42 INS22 INS42 INS32 INS32 INS42 INS40 INS14 INS52 INS42 INS42 INS42 INS42 INS42 INS74 INS1 INS43 INS43 INS23 INS31 INS31 INS31 INS42 INS40 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS32 INS42 INS53 INS42 INS40 INS60 INS60 INS25 INS41 INS42 INS41 INS42 INS42 INS32 INS42 INS14 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS36 INS42 INS45 INS32 INS42 INS42 INS42 INS40 INS42