Revert "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai."

This reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.

-      String traceFormatStr = "read(buf.remaining={}, block={}, filename={}, "
-          + "canSkipChecksum={})";
-      LOG.trace(traceFormatStr + ": starting",
-          buf.remaining(), block, filename, canSkipChecksum);
+      String traceString = null;
+      if (LOG.isTraceEnabled()) {
+        traceString = new StringBuilder().
+            append("read(").
+            append("buf.remaining=").append(buf.remaining()).
+            append(", block=").append(block).
+            append(", filename=").append(filename).
+            append(", canSkipChecksum=").append(canSkipChecksum).
+            append(")").toString();
+        LOG.info(traceString + ": starting");
+      }
-        LOG.trace(traceFormatStr + ": I/O error",
-            buf.remaining(), block, filename, canSkipChecksum, e);
+        if (LOG.isTraceEnabled()) {
+          LOG.info(traceString + ": I/O error", e);
+        }
-      LOG.trace(traceFormatStr + ": returning {}",
-          buf.remaining(), block, filename, canSkipChecksum, nRead);
+      if (LOG.isTraceEnabled()) {
+        LOG.info(traceString + ": returning " + nRead);
+      }
-    LOG.trace("loaded {} bytes into bounce buffer from offset {} of {}",
-        dataBuf.remaining(), oldDataPos, block);
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("loaded " + dataBuf.remaining() + " bytes into bounce " +
+          "buffer from offset " + oldDataPos + " of " + block);
+    }
-      final String traceFormatStr = "read(arr.length={}, off={}, len={}, "
-          + "filename={}, block={}, canSkipChecksum={})";
-      LOG.trace(traceFormatStr + ": starting",
-          arr.length, off, len, filename, block, canSkipChecksum);
+      String traceString = null;
+      if (LOG.isTraceEnabled()) {
+        traceString = new StringBuilder().
+            append("read(arr.length=").append(arr.length).
+            append(", off=").append(off).
+            append(", len=").append(len).
+            append(", filename=").append(filename).
+            append(", block=").append(block).
+            append(", canSkipChecksum=").append(canSkipChecksum).
+            append(")").toString();
+        LOG.trace(traceString + ": starting");
+      }
-        LOG.trace(traceFormatStr + ": I/O error",
-            arr.length, off, len, filename, block, canSkipChecksum, e);
+        if (LOG.isTraceEnabled()) {
+          LOG.trace(traceString + ": I/O error", e);
+        }
-      LOG.trace(traceFormatStr + ": returning {}",
-          arr.length, off, len, filename, block, canSkipChecksum, nRead);
+      if (LOG.isTraceEnabled()) {
+        LOG.trace(traceString + ": returning " + nRead);
+      }
-    LOG.trace("skip(n={}, block={}, filename={}): discarded {} bytes from "
-            + "dataBuf and advanced dataPos by {}",
-        n, block, filename, discardedFromBuf, remaining);
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("skip(n=" + n + ", block=" + block + ", filename=" + 
+        filename + "): discarded " + discardedFromBuf + " bytes from " +
+        "dataBuf and advanced dataPos by " + remaining);
+    }
-    LOG.trace("close(filename={}, block={})", filename, block);
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("close(filename=" + filename + ", block=" + block + ")");
+    }
-        LOG.trace("can't get an mmap for {} of {} since SKIP_CHECKSUMS was not "
-            + "given, we aren't skipping checksums, and the block is not "
-            + "mlocked.", block, filename);
+        if (LOG.isTraceEnabled()) {
+          LOG.trace("can't get an mmap for " + block + " of " + filename + 
+              " since SKIP_CHECKSUMS was not given, " +
+              "we aren't skipping checksums, and the block is not mlocked.");
+        }

INS25 INS25 INS25 INS32 INS8 INS32 INS8 INS32 INS8 INS8 INS25 INS25 INS42 INS42 MOV21 INS25 INS25 INS42 INS42 MOV21 INS42 INS42 MOV21 INS25 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 MOV38 MOV8 UPD42 INS33 INS42 INS42 MOV21 INS21 INS8 UPD42 MOV42 UPD42 MOV42 INS21 INS27 UPD42 INS33 MOV42 INS42 INS21 INS21 INS8 UPD42 MOV42 UPD42 MOV42 INS21 INS27 INS27 MOV41 INS7 INS32 INS25 MOV53 INS32 INS45 MOV32 INS45 INS45 INS42 INS45 INS42 INS7 INS32 INS25 MOV53 INS32 UPD45 MOV45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS32 MOV42 UPD42 MOV42 MOV27 INS32 INS8 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS32 MOV42 MOV42 MOV27 INS32 INS8 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS32 INS42 UPD42 UPD45 INS42 INS42 MOV21 INS42 INS45 INS42 INS32 INS42 UPD42 UPD45 INS42 INS42 MOV21 INS42 INS45 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 MOV42 UPD42 INS32 INS42 MOV42 UPD45 INS42 INS45 INS42 UPD45 UPD45 INS32 INS42 INS45 UPD42 INS32 INS42 INS45 UPD42 INS32 INS42 MOV42 INS32 INS42 MOV42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 MOV42 INS32 INS42 MOV42 INS32 UPD42 MOV42 INS45 INS32 INS42 INS45 INS32 UPD42 MOV42 MOV32 INS32 INS42 MOV42 INS32 INS42 INS45 INS32 INS42 INS45 INS14 UPD42 MOV42 INS45 INS32 INS42 MOV42 INS43 INS32 INS42 INS45 INS42 INS32 INS42 MOV40 INS14 INS42 INS45 INS43 INS42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL45 DEL27 DEL32 DEL32 DEL42 DEL42 DEL42 DEL8 DEL32 DEL42 DEL42 DEL32 DEL21 DEL45 DEL42 DEL42 DEL83 DEL45 DEL45 DEL27 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL8 DEL40 DEL42 DEL42 DEL32 DEL21 DEL45 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42