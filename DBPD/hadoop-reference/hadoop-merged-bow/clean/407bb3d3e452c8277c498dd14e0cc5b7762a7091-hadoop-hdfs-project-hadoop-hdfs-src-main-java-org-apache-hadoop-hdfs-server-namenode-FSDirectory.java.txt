HDFS-6509. Create a special /.reserved/raw directory for raw access to encrypted data. Contributed by Charles Lamb.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1614490 13f79535-47bb-0310-9956-ffa450edef68

+  private final static String RAW_STRING = "raw";
+  private final static byte[] RAW = DFSUtil.string2Bytes(RAW_STRING);
+    final boolean isRawPath = isReservedRawName(src);
-                targetNode, needLocation, snapshot)}, 0);
+                targetNode, needLocation, snapshot, isRawPath)}, 0);
-            needLocation, snapshot);
+            needLocation, snapshot, isRawPath);
-          Snapshot.CURRENT_STATE_ID);
+          Snapshot.CURRENT_STATE_ID, false);
-   * @param resolveLink whether to throw UnresolvedLinkException 
+   * @param resolveLink whether to throw UnresolvedLinkException
+   * @param isRawPath true if a /.reserved/raw pathname was passed by the user
-  HdfsFileStatus getFileInfo(String src, boolean resolveLink)
-    throws UnresolvedLinkException, IOException {
+  HdfsFileStatus getFileInfo(String src, boolean resolveLink, boolean isRawPath)
+    throws IOException {
-      final int snapshotId = inodesInPath.getPathSnapshotId();
-          inodesInPath.getPathSnapshotId());
+          inodesInPath.getPathSnapshotId(), isRawPath);
+   * @param isRawPath true if this is being called on behalf of a path in
+   *                  /.reserved/raw
-      boolean needLocation, int snapshot) throws IOException {
+      boolean needLocation, int snapshot, boolean isRawPath)
+      throws IOException {
-      return createLocatedFileStatus(path, node, snapshot);
+      return createLocatedFileStatus(path, node, snapshot, isRawPath);
-      return createFileStatus(path, node, snapshot);
+      return createFileStatus(path, node, snapshot, isRawPath);
-       int snapshot) throws IOException {
+       int snapshot, boolean isRawPath) throws IOException {
-     FileEncryptionInfo feInfo = getFileEncryptionInfo(node, snapshot);
+     FileEncryptionInfo feInfo = isRawPath ? null :
+         getFileEncryptionInfo(node, snapshot);
-      INode node, int snapshot) throws IOException {
+      INode node, int snapshot, boolean isRawPath) throws IOException {
+    final FileEncryptionInfo feInfo = isRawPath ? null :
+        getFileEncryptionInfo(node, snapshot);
-      final FileEncryptionInfo feInfo = getFileEncryptionInfo(node, snapshot);
-    final FileEncryptionInfo feInfo = getFileEncryptionInfo(node, snapshot);
-
+  static boolean isReservedRawName(String src) {
+    return src.startsWith(DOT_RESERVED_PATH_PREFIX +
+        Path.SEPARATOR + RAW_STRING);
+  }
+
-   * Resolve the path of /.reserved/.inodes/<inodeid>/... to a regular path
+   * Resolve a /.reserved/... path to a non-reserved path.
+   * <p/>
+   * There are two special hierarchies under /.reserved/:
+   * <p/>
+   * /.reserved/.inodes/<inodeid> performs a path lookup by inodeid,
+   * <p/>
+   * /.reserved/raw/... returns the encrypted (raw) bytes of a file in an
+   * encryption zone. For instance, if /ezone is an encryption zone, then
+   * /ezone/a refers to the decrypted file and /.reserved/raw/ezone/a refers to
+   * the encrypted (raw) bytes of /ezone/a.
+   * <p/>
+   * Pathnames in the /.reserved/raw directory that resolve to files not in an
+   * encryption zone are equivalent to the corresponding non-raw path. Hence,
+   * if /a/b/c refers to a file that is not in an encryption zone, then
+   * /.reserved/raw/a/b/c is equivalent (they both refer to the same
+   * unencrypted file).
-   * @return if the path indicates an inode, return path after replacing upto
+   * @return if the path indicates an inode, return path after replacing up to
-   *         in {@code src} as is.
+   *         in {@code src} as is. If the path refers to a path in the "raw"
+   *         directory, return the non-raw pathname.
-  static String resolvePath(String src, byte[][] pathComponents, FSDirectory fsd)
+  static String resolvePath(String src, byte[][] pathComponents,
+      FSDirectory fsd) throws FileNotFoundException {
+    final int nComponents = (pathComponents == null) ?
+        0 : pathComponents.length;
+    if (nComponents <= 2) {
+      return src;
+    }
+    if (!Arrays.equals(DOT_RESERVED, pathComponents[1])) {
+      /* This is not a /.reserved/ path so do nothing. */
+      return src;
+    }
+
+    if (Arrays.equals(DOT_INODES, pathComponents[2])) {
+      /* It's a /.reserved/.inodes path. */
+      if (nComponents > 3) {
+        return resolveDotInodesPath(src, pathComponents, fsd);
+      } else {
+        return src;
+      }
+    } else if (Arrays.equals(RAW, pathComponents[2])) {
+      /* It's /.reserved/raw so strip off the /.reserved/raw prefix. */
+      if (nComponents == 3) {
+        return Path.SEPARATOR;
+      } else {
+        return constructRemainingPath("", pathComponents, 3);
+      }
+    } else {
+      /* It's some sort of /.reserved/<unknown> path. Ignore it. */
+      return src;
+    }
+  }
+
+  private static String resolveDotInodesPath(String src,
+      byte[][] pathComponents, FSDirectory fsd)
-    if (pathComponents == null || pathComponents.length <= 3) {
-      return src;
-    }
-    // Not /.reserved/.inodes
-    if (!Arrays.equals(DOT_RESERVED, pathComponents[1])
-        || !Arrays.equals(DOT_INODES, pathComponents[2])) { // Not .inodes path
-      return src;
-    }
-    StringBuilder path = id == INodeId.ROOT_INODE_ID ? new StringBuilder()
-        : new StringBuilder(inode.getFullPathName());
-    for (int i = 4; i < pathComponents.length; i++) {
-      path.append(Path.SEPARATOR).append(DFSUtil.bytes2String(pathComponents[i]));
+    String path = "";
+    if (id != INodeId.ROOT_INODE_ID) {
+      path = inode.getFullPathName();
+    }
+    return constructRemainingPath(path, pathComponents, 4);
+  }
+
+  private static String constructRemainingPath(String pathPrefix,
+      byte[][] pathComponents, int startAt) {
+
+    StringBuilder path = new StringBuilder(pathPrefix);
+    for (int i = startAt; i < pathComponents.length; i++) {
+      path.append(Path.SEPARATOR).append(
+          DFSUtil.bytes2String(pathComponents[i]));

INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS5 INS59 INS44 INS44 INS44 INS44 INS83 INS39 INS42 INS44 INS8 MOV29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 UPD42 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS45 INS39 INS85 INS42 INS32 INS60 INS65 INS39 INS42 INS65 INS39 INS42 INS39 INS42 INS39 INS42 MOV60 INS43 INS42 INS41 INS42 INS43 INS42 INS5 INS42 INS43 INS42 INS42 INS60 INS25 MOV25 INS25 INS60 INS25 INS41 INS42 INS43 INS42 INS5 INS42 INS39 INS42 INS60 MOV24 MOV25 MOV41 INS42 INS42 INS42 INS83 INS39 INS59 UPD66 INS42 INS66 INS42 INS66 INS66 INS42 INS32 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS42 INS39 INS85 INS85 INS42 INS83 INS39 INS59 INS27 MOV8 MOV38 MOV32 INS8 INS25 UPD43 MOV43 INS59 INS27 INS8 INS32 INS42 INS39 INS85 INS85 MOV43 INS59 INS42 INS32 INS16 INS16 INS42 INS42 INS27 INS42 INS16 INS42 INS34 INS25 INS32 INS8 INS8 UPD42 MOV42 INS45 MOV42 MOV40 INS21 INS42 INS42 INS42 INS34 INS42 MOV14 INS42 INS42 INS42 INS33 MOV32 INS42 INS33 MOV32 INS42 INS40 INS42 INS36 INS34 INS40 INS27 INS8 INS8 INS42 INS42 INS42 INS2 INS25 INS41 INS7 INS42 INS42 INS42 INS42 MOV27 INS42 INS34 INS41 INS41 INS42 INS34 INS27 INS8 INS8 INS42 INS42 MOV32 INS9 INS42 INS32 INS42 INS42 INS34 INS41 INS41 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS45 INS42 INS34 INS42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL38 DEL27 DEL40 DEL34 DEL27 DEL27 DEL25 DEL27 DEL14 DEL16 DEL59 DEL60 DEL34