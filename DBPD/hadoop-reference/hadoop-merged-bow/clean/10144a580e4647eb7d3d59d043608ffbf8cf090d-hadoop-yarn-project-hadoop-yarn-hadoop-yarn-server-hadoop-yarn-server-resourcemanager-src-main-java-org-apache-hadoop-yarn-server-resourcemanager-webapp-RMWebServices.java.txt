YARN-9728. Bugfix for escaping illegal xml characters for Resource Manager REST API.
           Contributed by Prabhu Joseph

+  private boolean filterInvalidXMLChars = false;
+    this.filterInvalidXMLChars = conf.getBoolean(
+        YarnConfiguration.FILTER_INVALID_XML_CHARS,
+        YarnConfiguration.DEFAULT_FILTER_INVALID_XML_CHARS);
+  /**
+   * This method ensures that the output String has only
+   * valid XML unicode characters as specified by the
+   * XML 1.0 standard. For reference, please see
+   * <a href="http://www.w3.org/TR/2000/REC-xml-20001006#NT-Char">
+   * the standard</a>.
+   *
+   * @param str The String whose invalid xml characters we want to escape.
+   * @return The str String after escaping invalid xml characters.
+   */
+  public static String escapeInvalidXMLCharacters(String str) {
+    StringBuffer out = new StringBuffer();
+    final int strlen = str.length();
+    final String substitute = "\uFFFD";
+    int idx = 0;
+    while (idx < strlen) {
+      final int cpt = str.codePointAt(idx);
+      idx += Character.isSupplementaryCodePoint(cpt) ? 2 : 1;
+      if ((cpt == 0x9) ||
+          (cpt == 0xA) ||
+          (cpt == 0xD) ||
+          ((cpt >= 0x20) && (cpt <= 0xD7FF)) ||
+          ((cpt >= 0xE000) && (cpt <= 0xFFFD)) ||
+          ((cpt >= 0x10000) && (cpt <= 0x10FFFF))) {
+        out.append(Character.toChars(cpt));
+      } else {
+        out.append(substitute);
+      }
+    }
+    return out.toString();
+  }
+
+
+    if (filterInvalidXMLChars) {
+      final String format = hsr.getHeader(HttpHeaders.ACCEPT);
+      if (format != null &&
+          format.toLowerCase().contains(MediaType.APPLICATION_XML)) {
+        for (AppInfo appInfo : allApps.getApps()) {
+          appInfo.setNote(escapeInvalidXMLCharacters(appInfo.getNote()));
+        }
+      }
+    }
+
-    return new AppInfo(rm, app, hasAccess(app, hsr), hsr.getScheme() + "://",
-        deSelectFields);
+    AppInfo appInfo =  new AppInfo(rm, app, hasAccess(app, hsr),
+        hsr.getScheme() + "://", deSelectFields);
+
+    if (filterInvalidXMLChars) {
+      final String format = hsr.getHeader(HttpHeaders.ACCEPT);
+      if (format != null &&
+          format.toLowerCase().contains(MediaType.APPLICATION_XML)) {
+        appInfo.setNote(escapeInvalidXMLCharacters(appInfo.getNote()));
+      }
+    }
+
+    return appInfo;

INS23 INS31 INS83 INS39 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS9 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS61 INS41 INS25 INS60 INS25 INS7 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS39 INS59 INS27 INS8 INS32 INS42 INS8 INS43 INS59 INS42 INS8 INS42 INS22 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS45 INS42 INS34 INS42 INS42 INS60 INS21 INS25 INS42 INS42 INS60 INS25 INS42 INS42 MOV14 INS60 INS25 INS52 INS42 INS42 INS42 INS40 INS40 INS43 INS42 INS42 INS83 INS39 INS59 INS7 INS27 INS8 INS8 INS83 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS16 INS36 INS36 INS36 INS36 INS36 INS36 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS70 INS42 INS42 INS32 INS27 INS32 INS21 INS42 INS42 INS42 INS32 INS34 INS34 INS27 INS27 INS27 INS27 INS27 INS27 INS32 INS32 INS42 INS42 INS40 INS42 INS33 INS32 INS42 INS40 INS44 INS32 INS8 INS42 INS42 INS40 INS42 INS33 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS36 INS36 INS36 INS36 INS36 INS36 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS27 INS27 INS27 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42