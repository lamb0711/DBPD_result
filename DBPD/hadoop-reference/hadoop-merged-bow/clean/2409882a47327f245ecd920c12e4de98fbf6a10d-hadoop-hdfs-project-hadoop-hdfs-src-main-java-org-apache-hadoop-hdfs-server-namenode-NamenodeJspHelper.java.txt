HDFS-4374. Display NameNode startup progress in UI. Contributed by Chris Nauroth.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502331 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.startupprogress.Phase;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.StartupProgress;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.StartupProgressView;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.Status;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.Step;
+import org.apache.hadoop.hdfs.server.namenode.startupprogress.StepType;
-    if (!fsn.isInSafeMode())
+    if (fsn == null || !fsn.isInSafeMode())
+    if (fsn == null) {
+      return "";
+    }
+
-    return "<div class='dfstable'><table>"
-        + "\n  <tr><td class='col1'>Started:</td><td>" + fsn.getStartTime()
-        + "</td></tr>\n" + "\n  <tr><td class='col1'>Version:</td><td>"
-        + VersionInfo.getVersion() + ", " + VersionInfo.getRevision()
-        + "</td></tr>\n" + "\n  <tr><td class='col1'>Compiled:</td><td>" + VersionInfo.getDate()
-        + " by " + VersionInfo.getUser() + " from " + VersionInfo.getBranch()
-        + "</td></tr>\n  <tr><td class='col1'>Cluster ID:</td><td>" + fsn.getClusterId()
-        + "</td></tr>\n  <tr><td class='col1'>Block Pool ID:</td><td>" + fsn.getBlockPoolId()
-        + "</td></tr>\n</table></div>";
+    StringBuilder sb = new StringBuilder();
+    sb.append("<div class='dfstable'><table>");
+    if (fsn != null) {
+      sb.append("\n  <tr><td class='col1'>Started:</td><td>" + fsn.getStartTime());
+    }
+    sb.append("</td></tr>\n" + "\n  <tr><td class='col1'>Version:</td><td>");
+    sb.append(VersionInfo.getVersion() + ", " + VersionInfo.getRevision());
+    sb.append("</td></tr>\n" + "\n  <tr><td class='col1'>Compiled:</td><td>" + VersionInfo.getDate());
+    sb.append(" by " + VersionInfo.getUser() + " from " + VersionInfo.getBranch());
+    if (fsn != null) {
+      sb.append("</td></tr>\n  <tr><td class='col1'>Cluster ID:</td><td>" + fsn.getClusterId());
+      sb.append("</td></tr>\n  <tr><td class='col1'>Block Pool ID:</td><td>" + fsn.getBlockPoolId());
+    }
+    sb.append("</td></tr>\n</table></div>");
+    return sb.toString();
+    if (fsn == null) {
+      return "";
+    }
+
+      if (fsn == null) {
+        return;
+      }
+      if (nn.getNamesystem() == null) {
+        return;
+      }
+      if (fsn == null) {
+        return;
+      }
+
+    /**
+     * Generates the Startup Progress report.
+     * 
+     * @param out JspWriter to receive output
+     * @param prog StartupProgress tracking NameNode startup progress
+     * @throws IOException thrown if there is an I/O error
+     */
+    void generateStartupProgress(JspWriter out, StartupProgress prog)
+        throws IOException {
+      StartupProgressView view = prog.createView();
+      FormattedWriter fout = new FormattedWriter(out);
+      fout.println("<div id=\"startupprogress\">");
+      fout.println("<div><span>Elapsed Time:</span> %s</div>",
+        StringUtils.formatTime(view.getElapsedTime()));
+      fout.println("<div><span>Percent Complete:</span> %s</div>",
+        StringUtils.formatPercent(view.getPercentComplete(), 2));
+      fout.println("<table>");
+      fout.println("<tr>");
+      fout.println("<th>Phase</th>");
+      fout.println("<th>Completion</th>");
+      fout.println("<th>Elapsed Time</th>");
+      fout.println("</tr>");
+      for (Phase phase: view.getPhases()) {
+        final String timeClass;
+        Status status = view.getStatus(phase);
+        if (status == Status.PENDING) {
+          timeClass = "later";
+        } else if (status == Status.RUNNING) {
+          timeClass = "current";
+        } else {
+          timeClass = "prior";
+        }
+
+        fout.println("<tr class=\"phase %s\">", timeClass);
+        printPhase(fout, view, phase);
+        fout.println("</tr>");
+
+        for (Step step: view.getSteps(phase)) {
+          fout.println("<tr class=\"step %s\">", timeClass);
+          printStep(fout, view, phase, step);
+          fout.println("</tr>");
+        }
+      }
+      fout.println("</table>");
+      fout.println("</div>");
+    }
+
+    /**
+     * Prints one line of content for a phase in the Startup Progress report.
+     * 
+     * @param fout FormattedWriter to receive output
+     * @param view StartupProgressView containing information to print
+     * @param phase Phase to print
+     * @throws IOException thrown if there is an I/O error
+     */
+    private void printPhase(FormattedWriter fout, StartupProgressView view,
+        Phase phase) throws IOException {
+      StringBuilder phaseLine = new StringBuilder();
+      phaseLine.append(phase.getDescription());
+      String file = view.getFile(phase);
+      if (file != null) {
+        phaseLine.append(" ").append(file);
+      }
+      long size = view.getSize(phase);
+      if (size != Long.MIN_VALUE) {
+        phaseLine.append(" (").append(StringUtils.byteDesc(size)).append(")");
+      }
+      fout.println("<td class=\"startupdesc\">%s</td>", phaseLine.toString());
+      fout.println("<td>%s</td>", StringUtils.formatPercent(
+        view.getPercentComplete(phase), 2));
+      fout.println("<td>%s</td>", view.getStatus(phase) == Status.PENDING ? "" :
+        StringUtils.formatTime(view.getElapsedTime(phase)));
+    }
+
+    /**
+     * Prints one line of content for a step in the Startup Progress report.
+     * 
+     * @param fout FormattedWriter to receive output
+     * @param view StartupProgressView containing information to print
+     * @param phase Phase to print
+     * @param step Step to print
+     * @throws IOException thrown if there is an I/O error
+     */
+    private void printStep(FormattedWriter fout, StartupProgressView view,
+        Phase phase, Step step) throws IOException {
+      StringBuilder stepLine = new StringBuilder();
+      String file = step.getFile();
+      if (file != null) {
+        stepLine.append(file);
+      }
+      long size = step.getSize();
+      if (size != Long.MIN_VALUE) {
+        stepLine.append(" (").append(StringUtils.byteDesc(size)).append(")");
+      }
+      StepType type = step.getType();
+      if (type != null) {
+        stepLine.append(" ").append(type.getDescription());
+      }
+
+      fout.println("<td class=\"startupdesc\">%s (%d/%d)</td>",
+        stepLine.toString(), view.getCount(phase, step),
+        view.getTotal(phase, step));
+      fout.println("<td>%s</td>", StringUtils.formatPercent(
+        view.getPercentComplete(phase), 2));
+      fout.println("<td>%s</td>", view.getStatus(phase) == Status.PENDING ? "" :
+        StringUtils.formatTime(view.getElapsedTime(phase)));
+    }
+
+    /**
+     * JspWriter wrapper that helps simplify printing formatted lines.
+     */
+    private static class FormattedWriter {
+      private final JspWriter out;
+
+      /**
+       * Creates a new FormattedWriter that delegates to the given JspWriter.
+       * 
+       * @param out JspWriter to wrap
+       */
+      FormattedWriter(JspWriter out) {
+        this.out = out;
+      }
+
+      /**
+       * Prints one formatted line, followed by line terminator, using the
+       * English locale.
+       * 
+       * @param format String format
+       * @param args Object... any number of arguments to match format
+       * @throws IOException thrown if there is an I/O error
+       */
+      void println(String format, Object... args) throws IOException {
+        out.println(StringUtils.format(format, args));
+      }
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS55 INS25 INS60 INS21 INS25 INS21 INS21 INS21 INS21 INS25 INS21 INS41 INS25 INS29 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS42 INS23 INS31 INS31 INS27 INS27 INS8 INS43 INS59 INS32 INS27 INS8 INS32 INS32 INS32 INS32 INS27 INS8 INS32 INS32 INS27 INS8 INS25 INS25 INS25 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS70 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS25 INS60 INS25 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS25 INS60 INS25 INS21 INS21 INS21 INS65 INS83 INS83 INS43 INS59 INS29 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS44 INS43 INS8 INS27 MOV38 INS42 INS33 INS41 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS33 INS21 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS33 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS33 INS41 INS27 INS8 INS27 INS8 INS27 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS44 INS32 INS8 INS32 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS32 INS32 INS66 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS42 INS33 INS45 INS43 INS32 MOV45 MOV45 MOV32 MOV45 MOV32 MOV45 MOV45 MOV32 MOV45 MOV32 MOV45 MOV32 INS32 INS32 INS45 INS42 INS33 INS41 INS32 INS33 INS41 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS60 INS60 INS25 INS21 INS21 INS21 INS70 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS40 INS21 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS16 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS40 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS45 INS32 INS32 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS16 INS66 INS42 INS66 INS42 INS7 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS34 INS42 INS83 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS32 INS32 INS32 INS44 INS32 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS34 INS27 INS45 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS27 INS45 INS32 INS22 INS42 INS42 INS42 INS32 MOV45 MOV32 MOV45 MOV32 MOV45 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS21 INS27 INS8 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS40 INS21 INS21 INS42 INS32 INS32 INS32 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS7 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS45 DEL45 DEL27 DEL45 DEL27 DEL41