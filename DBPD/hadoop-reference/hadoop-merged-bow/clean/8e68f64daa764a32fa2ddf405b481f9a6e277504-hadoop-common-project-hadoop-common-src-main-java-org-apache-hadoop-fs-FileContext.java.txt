HADOOP-10399. FileContext API for ACLs. Contributed by Vinayakumar B.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576124 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Arrays;
+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclStatus;
+
+  /**
+   * Modifies ACL entries of files and directories.  This method can add new ACL
+   * entries or modify the permissions on existing ACL entries.  All existing
+   * ACL entries that are not specified in this call are retained without
+   * changes.  (Modifications are merged into the current ACL.)
+   *
+   * @param path Path to modify
+   * @param aclSpec List<AclEntry> describing modifications
+   * @throws IOException if an ACL could not be modified
+   */
+  public void modifyAclEntries(final Path path, final List<AclEntry> aclSpec)
+      throws IOException {
+    Path absF = fixRelativePart(path);
+    new FSLinkResolver<Void>() {
+      @Override
+      public Void next(final AbstractFileSystem fs, final Path p)
+          throws IOException {
+        fs.modifyAclEntries(p, aclSpec);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
+   * Removes ACL entries from files and directories.  Other ACL entries are
+   * retained.
+   *
+   * @param path Path to modify
+   * @param aclSpec List<AclEntry> describing entries to remove
+   * @throws IOException if an ACL could not be modified
+   */
+  public void removeAclEntries(final Path path, final List<AclEntry> aclSpec)
+      throws IOException {
+    Path absF = fixRelativePart(path);
+    new FSLinkResolver<Void>() {
+      @Override
+      public Void next(final AbstractFileSystem fs, final Path p)
+          throws IOException {
+        fs.removeAclEntries(p, aclSpec);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
+   * Removes all default ACL entries from files and directories.
+   *
+   * @param path Path to modify
+   * @throws IOException if an ACL could not be modified
+   */
+  public void removeDefaultAcl(Path path)
+      throws IOException {
+    Path absF = fixRelativePart(path);
+    new FSLinkResolver<Void>() {
+      @Override
+      public Void next(final AbstractFileSystem fs, final Path p)
+          throws IOException {
+        fs.removeDefaultAcl(p);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
+   * Removes all but the base ACL entries of files and directories.  The entries
+   * for user, group, and others are retained for compatibility with permission
+   * bits.
+   *
+   * @param path Path to modify
+   * @throws IOException if an ACL could not be removed
+   */
+  public void removeAcl(Path path) throws IOException {
+    Path absF = fixRelativePart(path);
+    new FSLinkResolver<Void>() {
+      @Override
+      public Void next(final AbstractFileSystem fs, final Path p)
+          throws IOException {
+        fs.removeAcl(p);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
+   * Fully replaces ACL of files and directories, discarding all existing
+   * entries.
+   *
+   * @param path Path to modify
+   * @param aclSpec List<AclEntry> describing modifications, must include entries
+   *   for user, group, and others for compatibility with permission bits.
+   * @throws IOException if an ACL could not be modified
+   */
+  public void setAcl(Path path, final List<AclEntry> aclSpec)
+      throws IOException {
+    Path absF = fixRelativePart(path);
+    new FSLinkResolver<Void>() {
+      @Override
+      public Void next(final AbstractFileSystem fs, final Path p)
+          throws IOException {
+        fs.setAcl(p, aclSpec);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
+   * Gets the ACLs of files and directories.
+   *
+   * @param path Path to get
+   * @return RemoteIterator<AclStatus> which returns each AclStatus
+   * @throws IOException if an ACL could not be read
+   */
+  public AclStatus getAclStatus(Path path) throws IOException {
+    Path absF = fixRelativePart(path);
+    return new FSLinkResolver<AclStatus>() {
+      @Override
+      public AclStatus next(final AbstractFileSystem fs, final Path p)
+          throws IOException {
+        return fs.getAclStatus(p);
+      }
+    }.resolve(this, absF);
+  }

MOV26 INS26 INS40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS83 INS43 INS42 INS83 INS74 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS65 INS83 INS43 INS42 INS83 INS74 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS83 INS74 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS41 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS59 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS59 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS59 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS59 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS59 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42