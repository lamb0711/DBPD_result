HDFS-12091. [READ] Check that the replicas served from a ProvidedVolumeImpl belong to the correct external storage

+import org.apache.hadoop.hdfs.server.datanode.StorageLocation;
-    private FsVolumeImpl providedVolume;
+    private ProvidedVolumeImpl providedVolume;
+    @VisibleForTesting
+    void setFileRegionProvider(FileRegionProvider newProvider) {
+      this.provider = newProvider;
+    }
+
-      while(iter.hasNext()) {
+      while (iter.hasNext()) {
-        if (region.getBlockPoolId() != null &&
-            region.getBlockPoolId().equals(bpid)) {
+        if (region.getBlockPoolId() != null
+            && region.getBlockPoolId().equals(bpid)
+            && containsBlock(providedVolume.baseURI,
+                region.getPath().toUri())) {
-              .setConf(conf).build();
-
-          ReplicaInfo oldReplica =
-              volumeMap.get(bpid, newReplica.getBlockId());
+              .setConf(conf)
+              .build();
+          // check if the replica already exists
+          ReplicaInfo oldReplica = volumeMap.get(bpid, newReplica.getBlockId());
-            throw new IOException(
-                "A block with id " + newReplica.getBlockId() +
-                " already exists in the volumeMap");
+            throw new IOException("A block with id " + newReplica.getBlockId()
+                + " already exists in the volumeMap");
+
+  private static URI getAbsoluteURI(URI uri) {
+    if (!uri.isAbsolute()) {
+      // URI is not absolute implies it is for a local file
+      // normalize the URI
+      return StorageLocation.normalizeFileURI(uri);
+    } else {
+      return uri;
+    }
+  }
+  /**
+   * @param volumeURI URI of the volume
+   * @param blockURI URI of the block
+   * @return true if the {@code blockURI} can belong to the volume or both URIs
+   * are null.
+   */
+  @VisibleForTesting
+  public static boolean containsBlock(URI volumeURI, URI blockURI) {
+    if (volumeURI == null && blockURI == null){
+      return true;
+    }
+    if (volumeURI == null || blockURI == null) {
+      return false;
+    }
+    volumeURI = getAbsoluteURI(volumeURI);
+    blockURI = getAbsoluteURI(blockURI);
+    return !volumeURI.relativize(blockURI).equals(blockURI);
+  }
+
+  @VisibleForTesting
+  void setFileRegionProvider(String bpid, FileRegionProvider provider)
+      throws IOException {
+    ProvidedBlockPoolSlice bp = bpSlices.get(bpid);
+    if (bp == null) {
+      throw new IOException("block pool " + bpid + " is not found");
+    }
+    bp.setFileRegionProvider(provider);
+  }

INS26 INS40 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 UPD43 INS78 INS39 INS42 INS44 INS8 INS42 INS43 INS42 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS25 INS25 INS21 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS21 UPD42 INS42 INS43 INS42 INS21 INS42 INS38 INS8 INS8 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS27 INS8 INS27 INS8 INS7 INS7 INS38 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS7 INS32 INS41 INS41 INS66 INS27 INS27 INS41 INS27 INS27 INS41 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS9 INS42 INS33 INS42 INS33 INS9 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS52 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 MOV27 INS32 INS42 INS45 INS42 INS45 INS42 INS40 INS32 INS32 INS42 INS42 INS42