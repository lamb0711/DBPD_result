YARN-6788. [YARN-3926] Improve performance of resource profile branch
(Contributed by Sunil Govindan via Daniel Templeton)

+import java.util.Arrays;
+
+import org.apache.hadoop.yarn.api.records.impl.BaseResource;
-import org.apache.hadoop.yarn.exceptions.YarnException;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
-  private static Resource tmpResource = Records.newRecord(Resource.class);
-
-  private static class SimpleResource extends Resource {
-    private long memory;
-    private long vcores;
-    private Map<String, ResourceInformation> resourceInformationMap;
-
-    SimpleResource(long memory, long vcores) {
-      this.memory = memory;
-      this.vcores = vcores;
-
-    }
-    @Override
-    public int getMemory() {
-      return (int)memory;
-    }
-    @Override
-    public void setMemory(int memory) {
-      this.memory = memory;
-    }
-    @Override
-    public long getMemorySize() {
-      return memory;
-    }
-    @Override
-    public void setMemorySize(long memory) {
-      this.memory = memory;
-    }
-    @Override
-    public int getVirtualCores() {
-      return (int)vcores;
-    }
-    @Override
-    public void setVirtualCores(int vcores) {
-      this.vcores = vcores;
-    }
-    @Override
-    public Map<String, ResourceInformation> getResources() {
-      if (resourceInformationMap == null) {
-        resourceInformationMap = new HashMap<>();
-        resourceInformationMap.put(ResourceInformation.MEMORY_MB.getName(),
-            ResourceInformation.newInstance(ResourceInformation.MEMORY_MB));
-        resourceInformationMap.put(ResourceInformation.VCORES.getName(),
-            ResourceInformation.newInstance(ResourceInformation.VCORES));
-      }
-      resourceInformationMap.get(ResourceInformation.MEMORY_MB.getName())
-          .setValue(this.memory);
-      resourceInformationMap.get(ResourceInformation.VCORES.getName())
-          .setValue(this.vcores);
-      return Collections.unmodifiableMap(resourceInformationMap);
-    }
-  }
+  protected static final String MEMORY = ResourceInformation.MEMORY_MB.getName();
+  protected static final String VCORES = ResourceInformation.VCORES.getName();
-    if (tmpResource.getResources().size() > 2) {
+    if (ResourceUtils.getResourceTypesArray().length > 2) {
-    return new SimpleResource(memory, vCores);
+    return new BaseResource(memory, vCores);
-    if (tmpResource.getResources().size() > 2) {
+    if (ResourceUtils.getResourceTypesArray().length > 2) {
-    return new SimpleResource(memory, vCores);
+    return new BaseResource(memory, vCores);
-    Resource ret = Resource.newInstance(0, 0);
-    Resource.copy(resource, ret);
+    Resource ret = Resource.newInstance(resource.getMemorySize(),
+        resource.getVirtualCores());
+    if (ResourceUtils.getResourceTypesArray().length > 2) {
+      Resource.copy(resource, ret);
+    }
-    for (Map.Entry<String, ResourceInformation> entry : source.getResources()
-        .entrySet()) {
-      dest.setResourceInformation(entry.getKey(), entry.getValue());
+    for (ResourceInformation entry : source.getResources()) {
+      dest.setResourceInformation(entry.getName(), entry);
-  public abstract Map<String, ResourceInformation> getResources();
+  public abstract ResourceInformation[] getResources();
-   * @throws YarnException if the resource can't be found
+   * @throws ResourceNotFoundException if the resource can't be found
-      throws YarnException {
-    if (getResources().containsKey(resource)) {
-      return getResources().get(resource);
+      throws ResourceNotFoundException {
+    Integer index = ResourceUtils.getResourceTypeIndex().get(resource);
+    ResourceInformation[] resources = getResources();
+    if (index != null) {
+      return resources[index];
-    throw new YarnException(
-        "Unknown resource '" + resource + "'. Known resources are "
-            + getResources().keySet());
+    throw new ResourceNotFoundException("Unknown resource '" + resource
+        + "'. Known resources are " + Arrays.toString(resources));
-   * @throws YarnException if the resource can't be found
+   * @throws ResourceNotFoundException if the resource can't be found
-  public Long getResourceValue(String resource) throws YarnException {
-    if (getResources().containsKey(resource)) {
-      return getResources().get(resource).getValue();
-    }
-    throw new YarnException(
-        "Unknown resource '" + resource + "'. Known resources are "
-            + getResources().keySet());
+  public long getResourceValue(String resource)
+      throws ResourceNotFoundException {
+    return getResourceInformation(resource).getValue();
-      ResourceInformation resourceInformation) throws ResourceNotFoundException {
-    if (resource.equals(ResourceInformation.MEMORY_MB.getName())) {
+      ResourceInformation resourceInformation)
+      throws ResourceNotFoundException {
+    if (resource.equals(MEMORY)) {
-    if (resource.equals(ResourceInformation.VCORES.getName())) {
+    if (resource.equals(VCORES)) {
-    if (getResources().containsKey(resource)) {
-      ResourceInformation
-          .copy(resourceInformation, getResources().get(resource));
-      return;
-    }
-    throw new ResourceNotFoundException(
-        "Unknown resource '" + resource + "'. Known resources are "
-            + getResources().keySet());
+    ResourceInformation storedResourceInfo = getResourceInformation(resource);
+    ResourceInformation.copy(resourceInformation, storedResourceInfo);
-    if (resource.equals(ResourceInformation.MEMORY_MB.getName())) {
+    if (resource.equals(MEMORY)) {
-    if (resource.equals(ResourceInformation.VCORES.getName())) {
+    if (resource.equals(VCORES)) {
-    if (getResources().containsKey(resource)) {
-      getResources().get(resource).setValue(value);
-      return;
-    }
-    throw new ResourceNotFoundException(
-        "Unknown resource '" + resource + "'. Known resources are "
-            + getResources().keySet());
+
+    ResourceInformation storedResourceInfo = getResourceInformation(resource);
+    storedResourceInfo.setValue(value);
-    for (Map.Entry<String, ResourceInformation> entry : getResources()
-        .entrySet()) {
-      if (entry.getKey().equals(ResourceInformation.MEMORY_MB.getName())
-          || entry.getKey().equals(ResourceInformation.VCORES.getName())) {
-        continue;
+    for (ResourceInformation entry : getResources()) {
+      if (!entry.getName().equals(MEMORY) && !entry.getName().equals(VCORES)) {
+        result = prime * result + entry.hashCode();
-      result = prime * result + entry.getValue().hashCode();
-    if (getMemorySize() != other.getMemorySize() || getVirtualCores() != other
-        .getVirtualCores()) {
+    if (getMemorySize() != other.getMemorySize()
+        || getVirtualCores() != other.getVirtualCores()) {
-    return this.getResources().equals(other.getResources());
+
+    ResourceInformation[] myVectors = getResources();
+    ResourceInformation[] otherVectors = other.getResources();
+
+    if (myVectors.length != otherVectors.length) {
+      return false;
+    }
+
+    for (int i = 0; i < myVectors.length; i++) {
+      ResourceInformation a = myVectors[i];
+      ResourceInformation b = otherVectors[i];
+      if ((a != b) && ((a == null) || !a.equals(b))) {
+        return false;
+      }
+    }
+    return true;
-    for (Map.Entry<String, ResourceInformation> entry : getResources()
-        .entrySet()) {
-      if (entry.getKey().equals(ResourceInformation.MEMORY_MB.getName())
-          && entry.getValue().getUnits()
+    for (ResourceInformation entry : getResources()) {
+      if (entry.getName().equals(MEMORY)
+          && entry.getUnits()
-      if (entry.getKey().equals(ResourceInformation.VCORES.getName())
-          && entry.getValue().getUnits()
+      if (entry.getName().equals(VCORES)
+          && entry.getUnits()
-      sb.append(", ").append(entry.getKey()).append(": ")
-          .append(entry.getValue().getValue())
-          .append(entry.getValue().getUnits());
+      sb.append(", ").append(entry.getName()).append(": ")
+          .append(entry.getValue())
+          .append(entry.getUnits());
-    Map<String, ResourceInformation> thisResources, otherResources;
-    thisResources = this.getResources();
-    otherResources = other.getResources();
-    long diff = thisResources.size() - otherResources.size();
+    ResourceInformation[] thisResources = this.getResources();
+    ResourceInformation[] otherResources = other.getResources();
+
+    // compare memory and vcores first(in that order) to preserve
+    // existing behaviour
+    long diff = this.getMemorySize() - other.getMemorySize();
-      // compare memory and vcores first(in that order) to preserve
-      // existing behaviour
-      if (thisResources.keySet().equals(otherResources.keySet())) {
-        diff = this.getMemorySize() - other.getMemorySize();
-        if (diff == 0) {
-          diff = this.getVirtualCores() - other.getVirtualCores();
-        }
-        if (diff == 0) {
-          for (Map.Entry<String, ResourceInformation> entry : thisResources
-              .entrySet()) {
-            if (entry.getKey().equals(ResourceInformation.MEMORY_MB.getName())
-                || entry.getKey()
-                .equals(ResourceInformation.VCORES.getName())) {
-              continue;
-            }
-            diff =
-                entry.getValue().compareTo(otherResources.get(entry.getKey()));
+      diff = this.getVirtualCores() - other.getVirtualCores();
+    }
+    if (diff == 0) {
+      diff = thisResources.length - otherResources.length;
+      if (diff == 0) {
+        int maxLength = ResourceUtils.getResourceTypesArray().length;
+        for (int i = 0; i < maxLength; i++) {
+          // For memory and vcores, we can skip the loop as it's already
+          // compared.
+          if (i < 2) {
+            continue;
+          }
+
+          ResourceInformation entry = thisResources[i];
+          ResourceInformation otherEntry = otherResources[i];
+          if (entry.getName().equals(otherEntry.getName())) {
+            diff = entry.compareTo(otherEntry);

MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 INS23 UPD83 INS83 MOV43 INS83 INS83 UPD83 MOV83 MOV43 MOV59 MOV44 MOV44 INS8 INS5 UPD43 INS39 UPD43 INS8 UPD42 MOV32 UPD42 MOV32 INS60 INS25 MOV41 MOV43 INS85 UPD42 INS60 INS60 INS25 MOV42 MOV41 INS60 MOV21 INS60 MOV21 INS60 INS60 INS25 INS24 INS41 INS60 INS60 INS60 MOV25 INS25 MOV43 INS59 INS27 MOV8 MOV32 UPD42 INS43 INS59 INS5 INS59 INS27 INS8 UPD42 MOV43 INS59 INS43 INS59 MOV32 INS5 INS59 INS5 INS59 INS27 INS8 INS58 INS27 INS37 INS8 INS9 MOV32 INS5 MOV59 INS5 MOV59 INS39 INS59 MOV27 INS8 INS22 UPD43 INS22 UPD43 INS42 INS32 INS22 INS34 MOV43 INS42 INS42 INS32 MOV43 INS85 INS42 MOV32 INS42 INS33 INS41 MOV43 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV42 INS43 INS25 INS43 INS85 INS42 MOV32 INS43 INS85 INS42 MOV32 INS40 INS40 INS41 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 MOV43 INS43 INS85 MOV32 MOV43 INS85 MOV32 INS42 MOV27 MOV21 INS25 INS32 INS42 UPD42 INS32 INS42 UPD42 INS42 INS42 INS32 INS32 INS32 INS42 MOV32 MOV42 MOV42 INS2 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD27 MOV27 INS8 INS42 INS42 INS9 INS42 INS34 INS43 INS59 INS43 INS59 INS27 INS8 UPD42 MOV42 MOV27 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS38 INS38 MOV21 INS42 INS42 INS2 INS42 INS42 INS2 INS36 INS36 INS41 UPD42 INS27 MOV60 INS24 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 INS27 INS27 INS9 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 INS40 INS40 UPD39 INS58 INS27 INS37 INS8 MOV32 MOV42 UPD42 MOV42 MOV32 MOV42 UPD42 MOV42 INS42 INS42 INS36 INS38 UPD42 MOV42 UPD42 MOV42 UPD42 INS22 INS39 INS59 INS42 INS42 INS42 INS25 INS60 INS60 INS25 UPD42 UPD42 INS27 INS32 INS32 INS42 INS42 INS34 INS27 MOV8 MOV43 INS59 MOV43 INS59 INS32 INS8 MOV42 INS42 INS33 UPD42 MOV42 MOV42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS42 INS2 INS42 INS2 MOV32 MOV42 MOV32 MOV21 MOV25 INS42 INS42 INS42 INS42 UPD42 INS42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL57 DEL32 DEL83 DEL83 DEL42 DEL42 DEL43 DEL39 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL11 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL11 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL74 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL34 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL32 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL40 DEL32 DEL40 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL27 DEL14 DEL53 DEL40 DEL32 DEL40 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL32 DEL27 DEL14 DEL53 DEL40 DEL43 DEL43 DEL74 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL32 DEL40 DEL32 DEL32 DEL42 DEL32 DEL25 DEL52 DEL32 DEL32 DEL41 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL42 DEL32 DEL40 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL27 DEL40 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL43 DEL42 DEL43 DEL74 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL7 DEL21 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL32 DEL32 DEL27 DEL18 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25