merge from trunk r1617527

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1617532 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.net.NetUtils;
-import org.apache.hadoop.security.authentication.client.AuthenticatedURL;
-import org.apache.hadoop.security.authentication.client.Authenticator;
+import org.apache.hadoop.security.authentication.client.AuthenticationException;
+import org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier;
+import org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL;
+import org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator;
+import org.apache.hadoop.security.token.delegation.web.KerberosDelegationTokenAuthenticator;
-import java.net.InetSocketAddress;
-import java.util.concurrent.Callable;
-
-  private AuthenticatedURL.Token authToken = new AuthenticatedURL.Token();
+  private DelegationTokenAuthenticatedURL authURL;
+  private DelegationTokenAuthenticatedURL.Token authToken =
+      new DelegationTokenAuthenticatedURL.Token();
-  private InetSocketAddress httpFSAddr;
-  private Token<?> delegationToken;
-  //This method enables handling UGI doAs with SPNEGO, we have to
-  //fallback to the realuser who logged in with Kerberos credentials
-  private <T> T doAsRealUserIfNecessary(final Callable<T> callable)
-    throws IOException {
-    try {
-      if (realUser.getShortUserName().equals(doAs)) {
-        return callable.call();
-      } else {
-        return realUser.doAs(new PrivilegedExceptionAction<T>() {
-          @Override
-          public T run() throws Exception {
-            return callable.call();
-          }
-        });
-      }
-    } catch (Exception ex) {
-      throw new IOException(ex.toString(), ex);
-    }
-  }
+
-    if (!realUser.getShortUserName().equals(doAs)) {
-      params.put(DO_AS_PARAM, doAs);
-    }
-    HttpFSKerberosAuthenticator.injectDelegationToken(params, delegationToken);
-    return doAsRealUserIfNecessary(new Callable<HttpURLConnection>() {
-      @Override
-      public HttpURLConnection call() throws Exception {
-        return getConnection(url, method);
+    try {
+      return UserGroupInformation.getCurrentUser().doAs(
+          new PrivilegedExceptionAction<HttpURLConnection>() {
+            @Override
+            public HttpURLConnection run() throws Exception {
+              return getConnection(url, method);
+            }
+          }
+      );
+    } catch (Exception ex) {
+      if (ex instanceof IOException) {
+        throw (IOException) ex;
+      } else {
+        throw new IOException(ex);
-    });
+    }
-    Class<? extends Authenticator> klass =
-      getConf().getClass("httpfs.authenticator.class",
-                         HttpFSKerberosAuthenticator.class, Authenticator.class);
-    Authenticator authenticator = ReflectionUtils.newInstance(klass, getConf());
-      HttpURLConnection conn = new AuthenticatedURL(authenticator).openConnection(url, authToken);
+      HttpURLConnection conn = authURL.openConnection(url, authToken);
-      httpFSAddr = NetUtils.createSocketAddr(getCanonicalUri().toString());
+
+    Class<? extends DelegationTokenAuthenticator> klass =
+        getConf().getClass("httpfs.authenticator.class",
+            KerberosDelegationTokenAuthenticator.class,
+            DelegationTokenAuthenticator.class);
+    DelegationTokenAuthenticator authenticator =
+        ReflectionUtils.newInstance(klass, getConf());
+    authURL = new DelegationTokenAuthenticatedURL(authenticator);
-    return doAsRealUserIfNecessary(new Callable<Token<?>>() {
-      @Override
-      public Token<?> call() throws Exception {
-        return HttpFSKerberosAuthenticator.
-          getDelegationToken(uri, httpFSAddr, authToken, renewer);
+    try {
+      return UserGroupInformation.getCurrentUser().doAs(
+          new PrivilegedExceptionAction<Token<?>>() {
+            @Override
+            public Token<?> run() throws Exception {
+              return authURL.getDelegationToken(uri.toURL(), authToken,
+                  renewer);
+            }
+          }
+      );
+    } catch (Exception ex) {
+      if (ex instanceof IOException) {
+        throw (IOException) ex;
+      } else {
+        throw new IOException(ex);
-    });
+    }
-    return doAsRealUserIfNecessary(new Callable<Long>() {
-      @Override
-      public Long call() throws Exception {
-        return HttpFSKerberosAuthenticator.
-          renewDelegationToken(uri,  authToken, token);
+    try {
+      return UserGroupInformation.getCurrentUser().doAs(
+          new PrivilegedExceptionAction<Long>() {
+            @Override
+            public Long run() throws Exception {
+              return authURL.renewDelegationToken(uri.toURL(), authToken);
+            }
+          }
+      );
+    } catch (Exception ex) {
+      if (ex instanceof IOException) {
+        throw (IOException) ex;
+      } else {
+        throw new IOException(ex);
-    });
+    }
-    HttpFSKerberosAuthenticator.
-      cancelDelegationToken(uri, authToken, token);
+    authURL.cancelDelegationToken(uri.toURL(), authToken);
-    return delegationToken;
+    return null; //TODO : for renewer
+  @SuppressWarnings("unchecked")
-    delegationToken = token;
+    //TODO : for renewer

MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS83 INS43 INS59 UPD43 MOV78 UPD83 MOV74 INS42 MOV44 MOV43 MOV83 INS39 UPD42 MOV42 MOV44 MOV43 INS8 MOV44 MOV43 INS79 INS42 INS42 UPD40 INS54 INS60 MOV60 INS21 INS54 INS42 INS45 UPD43 INS8 INS12 INS74 INS59 UPD43 INS7 INS8 INS12 INS8 INS12 INS33 UPD40 MOV41 MOV44 INS8 MOV43 INS76 INS42 INS32 UPD42 INS42 INS14 INS41 INS44 INS8 MOV41 INS44 INS8 UPD42 INS32 UPD42 MOV25 INS43 MOV32 INS42 INS45 INS57 INS57 INS43 INS42 INS32 INS43 INS42 INS25 INS43 INS42 INS25 MOV42 UPD42 MOV42 INS32 UPD42 INS62 INS8 INS42 INS43 INS43 INS42 MOV32 UPD42 MOV42 INS14 INS42 INS62 INS8 INS8 INS32 UPD42 INS42 INS62 INS8 INS8 INS42 INS42 UPD74 MOV74 INS42 MOV43 INS53 INS53 INS42 INS42 INS42 UPD42 UPD42 UPD74 MOV74 INS1 INS42 INS43 INS53 MOV53 INS42 INS42 UPD74 MOV74 INS42 INS43 INS53 INS53 MOV43 INS11 INS14 UPD43 INS31 UPD42 MOV42 INS11 UPD43 INS42 INS11 INS14 UPD42 MOV43 INS42 INS43 INS42 UPD42 MOV78 INS83 MOV74 INS42 MOV43 INS8 INS43 INS42 INS43 UPD42 MOV43 UPD42 INS43 INS42 INS43 INS42 INS42 MOV41 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL76 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL73 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL8 DEL42 DEL42 DEL42 DEL78 DEL83 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL41 DEL8 DEL25 DEL8 DEL8 DEL12 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL7 DEL21