HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.

-import static org.apache.hadoop.hdfs.protocol.HdfsConstants.HA_DT_SERVICE_PREFIX;
-import org.apache.hadoop.hdfs.client.HdfsClientConfigKeys;
-    Collection<String> nnIds = DFSUtil.getNameNodeIds(conf, nsId);
+    Collection<String> nnIds = DFSUtilClient.getNameNodeIds(conf, nsId);
- 
-  /**
-   * @return true if the given nameNodeUri appears to be a logical URI.
-   */
-  public static boolean isLogicalUri(
-      Configuration conf, URI nameNodeUri) {
-    String host = nameNodeUri.getHost();
-    // A logical name must be one of the service IDs.
-    return DFSUtil.getNameServiceIds(conf).contains(host);
-  }
-
-  /**
-   * Check whether the client has a failover proxy provider configured
-   * for the namenode/nameservice.
-   *
-   * @param conf Configuration
-   * @param nameNodeUri The URI of namenode
-   * @return true if failover is configured.
-   */
-  public static boolean isClientFailoverConfigured(
-      Configuration conf, URI nameNodeUri) {
-    String host = nameNodeUri.getHost();
-    String configKey = HdfsClientConfigKeys.Failover.PROXY_PROVIDER_KEY_PREFIX
-        + "." + host;
-    return conf.get(configKey) != null;
-  }
-   * Parse the file system URI out of the provided token.
-   */
-  public static URI getServiceUriFromToken(final String scheme, Token<?> token) {
-    String tokStr = token.getService().toString();
-    final String prefix = buildTokenServicePrefixForLogicalUri(scheme);
-    if (tokStr.startsWith(prefix)) {
-      tokStr = tokStr.replaceFirst(prefix, "");
-    }
-    return URI.create(scheme + "://" + tokStr);
-  }
-  
-  /**
-   * Get the service name used in the delegation token for the given logical
-   * HA service.
-   * @param uri the logical URI of the cluster
-   * @param scheme the scheme of the corresponding FileSystem
-   * @return the service name
-   */
-  public static Text buildTokenServiceForLogicalUri(final URI uri,
-      final String scheme) {
-    return new Text(buildTokenServicePrefixForLogicalUri(scheme)
-        + uri.getHost());
-  }
-  
-  /**
-   * @return true if this token corresponds to a logical nameservice
-   * rather than a specific namenode.
-   */
-  public static boolean isTokenForLogicalUri(Token<?> token) {
-    return token.getService().toString().startsWith(HA_DT_SERVICE_PREFIX);
-  }
-
-  public static String buildTokenServicePrefixForLogicalUri(String scheme) {
-    return HA_DT_SERVICE_PREFIX + scheme + ":";
-  }
-
-  /**
-    Text haService = HAUtil.buildTokenServiceForLogicalUri(haUri,
-        HdfsConstants.HDFS_URI_SCHEME);
+    Text haService = HAUtilClient.buildTokenServiceForLogicalUri(haUri,
+                                                                 HdfsConstants.HDFS_URI_SCHEME);
-            buildTokenServicePrefixForLogicalUri(HdfsConstants.HDFS_URI_SCHEME)
+            HAUtilClient.buildTokenServicePrefixForLogicalUri(
+                HdfsConstants.HDFS_URI_SCHEME)

MOV43 UPD42 UPD42 INS42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL14 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL27 DEL41 DEL8 DEL31 DEL42 DEL43