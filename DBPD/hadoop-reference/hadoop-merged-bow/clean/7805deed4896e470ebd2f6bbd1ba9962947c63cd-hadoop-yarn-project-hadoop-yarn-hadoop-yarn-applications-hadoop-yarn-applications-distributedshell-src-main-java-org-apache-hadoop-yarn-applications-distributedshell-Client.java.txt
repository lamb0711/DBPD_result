YARN-5588. [YARN-3926] Add support for resource profiles in distributed shell. Contributed by Varun Vasudev.

+import org.apache.hadoop.yarn.api.records.ProfileCapability;
+import org.apache.hadoop.yarn.api.records.ResourceRequest;
+import org.apache.hadoop.yarn.exceptions.ResourceProfilesNotEnabledException;
-import org.apache.hadoop.yarn.util.ConverterUtils;
+import org.apache.hadoop.yarn.util.resource.Resources;
+
+  private static final int DEFAULT_AM_MEMORY = 100;
+  private static final int DEFAULT_AM_VCORES = 1;
+  private static final int DEFAULT_CONTAINER_MEMORY = 10;
+  private static final int DEFAULT_CONTAINER_VCORES = 1;
-  private long amMemory = 100;
+  private long amMemory = DEFAULT_AM_MEMORY;
-  private int amVCores = 1;
+  private int amVCores = DEFAULT_AM_VCORES;
+
+  // AM resource profile
+  private String amResourceProfile = "";
-  private int containerMemory = 10; 
+  private long containerMemory = DEFAULT_CONTAINER_MEMORY;
-  private int containerVirtualCores = 1;
+  private int containerVirtualCores = DEFAULT_CONTAINER_VCORES;
+  // container resource profile
+  private String containerResourceProfile = "";
+    opts.addOption("master_resource_profile", true, "Resource profile for the application master");
+    opts.addOption("container_resource_profile", true, "Resource profile for the shell command");
-    amMemory = Integer.parseInt(cliParser.getOptionValue("master_memory", "100"));
-    amVCores = Integer.parseInt(cliParser.getOptionValue("master_vcores", "1"));
-
-    if (amMemory < 0) {
-      throw new IllegalArgumentException("Invalid memory specified for application master, exiting."
-          + " Specified memory=" + amMemory);
-    }
-    if (amVCores < 0) {
-      throw new IllegalArgumentException("Invalid virtual cores specified for application master, exiting."
-          + " Specified virtual cores=" + amVCores);
-    }
+    amMemory =
+        Integer.parseInt(cliParser.getOptionValue("master_memory", "-1"));
+    amVCores =
+        Integer.parseInt(cliParser.getOptionValue("master_vcores", "-1"));
+    amResourceProfile = cliParser.getOptionValue("master_resource_profile", "");
-    containerMemory = Integer.parseInt(cliParser.getOptionValue("container_memory", "10"));
-    containerVirtualCores = Integer.parseInt(cliParser.getOptionValue("container_vcores", "1"));
-    numContainers = Integer.parseInt(cliParser.getOptionValue("num_containers", "1"));
-    
+    containerMemory =
+        Integer.parseInt(cliParser.getOptionValue("container_memory", "-1"));
+    containerVirtualCores =
+        Integer.parseInt(cliParser.getOptionValue("container_vcores", "-1"));
+    containerResourceProfile =
+        cliParser.getOptionValue("container_resource_profile", "");
+    numContainers =
+        Integer.parseInt(cliParser.getOptionValue("num_containers", "1"));
-    if (containerMemory < 0 || containerVirtualCores < 0 || numContainers < 1) {
-      throw new IllegalArgumentException("Invalid no. of containers or container memory/vcores specified,"
-          + " exiting."
-          + " Specified containerMemory=" + containerMemory
-          + ", containerVirtualCores=" + containerVirtualCores
-          + ", numContainer=" + numContainers);
+    if (numContainers < 1) {
+      throw new IllegalArgumentException("Invalid no. of containers specified,"
+          + " exiting. Specified numContainer=" + numContainers);
+    Map<String, Resource> profiles;
+    try {
+      profiles = yarnClient.getResourceProfiles();
+    } catch (ResourceProfilesNotEnabledException re) {
+      profiles = null;
+    }
+
+    List<String> appProfiles = new ArrayList<>(2);
+    appProfiles.add(amResourceProfile);
+    appProfiles.add(containerResourceProfile);
+    for (String appProfile : appProfiles) {
+      if (appProfile != null && !appProfile.isEmpty()) {
+        if (profiles == null) {
+          String message = "Resource profiles is not enabled";
+          LOG.error(message);
+          throw new IOException(message);
+        }
+        if (!profiles.containsKey(appProfile)) {
+          String message = "Unknown resource profile '" + appProfile
+              + "'. Valid resource profiles are " + profiles.keySet();
+          LOG.error(message);
+          throw new IOException(message);
+        }
+      }
+    }
+
+    // Set up resource type requirements
+    // For now, both memory and vcores are supported, so we set memory and
+    // vcores requirements
+    setAMResourceCapability(appContext, amMemory, amVCores, amResourceProfile,
+        amPriority, profiles);
+    setContainerResources(containerMemory, containerVirtualCores, profiles);
+
-    vargs.add("--container_memory " + String.valueOf(containerMemory));
-    vargs.add("--container_vcores " + String.valueOf(containerVirtualCores));
+    if (containerMemory > 0) {
+      vargs.add("--container_memory " + String.valueOf(containerMemory));
+    }
+    if (containerVirtualCores > 0) {
+      vargs.add("--container_vcores " + String.valueOf(containerVirtualCores));
+    }
+    if (containerResourceProfile != null && !containerResourceProfile
+        .isEmpty()) {
+      vargs.add("--container_resource_profile " + containerResourceProfile);
+    }
-    // Set up resource type requirements
-    // For now, both memory and vcores are supported, so we set memory and 
-    // vcores requirements
-    Resource capability = Resource.newInstance(amMemory, amVCores);
-    appContext.setResource(capability);
-
+
+  private void setAMResourceCapability(ApplicationSubmissionContext appContext,
+      long memory, int vcores, String profile, int priority,
+      Map<String, Resource> profiles) throws IllegalArgumentException {
+    if (memory < -1 || memory == 0) {
+      throw new IllegalArgumentException("Invalid memory specified for"
+          + " application master, exiting. Specified memory=" + memory);
+    }
+    if (vcores < -1 || vcores == 0) {
+      throw new IllegalArgumentException("Invalid virtual cores specified for"
+          + " application master, exiting. Specified virtual cores=" + vcores);
+    }
+    String tmp = profile;
+    if (profile.isEmpty()) {
+      tmp = "default";
+    }
+    if (appContext.getAMContainerResourceRequest() == null) {
+      appContext.setAMContainerResourceRequest(ResourceRequest
+          .newInstance(Priority.newInstance(priority), "*",
+              Resources.clone(Resources.none()), 1));
+    }
+
+    if (appContext.getAMContainerResourceRequest().getProfileCapability()
+        == null) {
+      appContext.getAMContainerResourceRequest().setProfileCapability(
+          ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));
+    }
+    Resource capability = Resource.newInstance(0, 0);
+    // set amMemory because it's used to set Xmx param
+    if (profiles == null) {
+      amMemory = memory == -1 ? DEFAULT_AM_MEMORY : memory;
+      amVCores = vcores == -1 ? DEFAULT_AM_VCORES : vcores;
+      capability.setMemorySize(amMemory);
+      capability.setVirtualCores(amVCores);
+    } else {
+      amMemory = memory == -1 ? profiles.get(tmp).getMemorySize() : memory;
+      amVCores = vcores == -1 ? profiles.get(tmp).getVirtualCores() : vcores;
+      capability.setMemorySize(memory);
+      capability.setVirtualCores(vcores);
+    }
+    appContext.getAMContainerResourceRequest().getProfileCapability()
+        .setProfileCapabilityOverride(capability);
+  }
+
+  private void setContainerResources(long memory, int vcores,
+      Map<String, Resource> profiles) throws IllegalArgumentException {
+    if (memory < -1 || memory == 0) {
+      throw new IllegalArgumentException(
+          "Container memory '" + memory + "' has to be greated than 0");
+    }
+    if (vcores < -1 || vcores == 0) {
+      throw new IllegalArgumentException(
+          "Container vcores '" + vcores + "' has to be greated than 0");
+    }
+    if (profiles == null) {
+      containerMemory = memory == -1 ? DEFAULT_CONTAINER_MEMORY : memory;
+      containerVirtualCores = vcores == -1 ? DEFAULT_CONTAINER_VCORES : vcores;
+    }
+  }

INS26 INS26 INS26 MOV23 MOV23 MOV23 MOV23 INS40 INS40 INS40 UPD40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 UPD39 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 MOV21 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS21 INS21 INS21 INS21 INS25 INS60 INS54 INS60 INS21 INS21 INS70 INS21 INS25 INS25 INS25 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS42 INS25 INS25 INS60 INS25 INS25 INS25 INS60 INS25 INS21 INS39 INS42 INS39 INS42 INS74 INS42 INS42 INS25 INS25 INS25 INS32 INS32 INS7 INS7 MOV27 MOV8 INS74 INS59 INS8 INS12 INS74 INS59 INS32 INS32 INS44 INS42 INS8 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS43 INS43 INS43 INS27 INS8 INS27 INS8 INS43 INS59 INS32 INS8 INS27 INS8 INS27 INS8 MOV43 INS59 INS27 INS8 INS8 INS32 INS43 INS43 INS43 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS45 INS9 INS45 INS42 INS32 INS42 INS32 INS43 INS43 INS43 INS42 INS21 INS44 INS8 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS25 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS34 MOV21 INS42 INS34 MOV21 INS27 INS38 INS21 INS42 INS42 INS42 INS27 INS27 INS53 INS27 INS27 INS53 INS42 INS42 INS42 INS42 INS42 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS53 INS27 INS27 INS53 INS42 INS33 INS21 INS21 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS42 INS42 INS74 INS34 INS42 INS27 INS8 INS42 INS33 INS32 INS32 INS42 INS38 INS42 INS34 INS14 INS42 INS38 INS42 INS34 INS14 INS7 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS34 INS34 INS7 INS7 INS32 INS32 INS7 INS7 INS32 INS32 INS32 INS42 INS42 INS38 INS42 INS34 INS14 INS42 INS38 INS42 INS34 INS14 INS7 INS7 UPD45 UPD45 UPD45 UPD45 INS42 INS32 INS42 INS7 INS43 INS27 INS38 INS25 INS25 INS42 INS42 INS42 INS42 INS27 INS34 MOV43 INS27 INS34 MOV43 INS27 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS16 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS27 INS34 INS43 INS27 INS42 INS16 INS42 INS16 UPD45 MOV45 UPD45 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS32 INS27 INS8 INS38 INS8 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS32 INS45 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS42 INS27 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS33 INS60 INS21 INS53 INS32 INS60 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS34 INS42 INS38 INS42 INS38 INS42 INS38 INS32 INS42 INS42 INS38 INS32 INS42 INS42 INS38 INS42 INS38 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS34 INS34 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS34 INS34 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 DEL42 DEL34 DEL27 DEL45 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL34 DEL27 DEL45 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL45 DEL45 DEL27 DEL42 DEL45 DEL42 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL27 DEL25 DEL42 DEL32 DEL59 DEL60