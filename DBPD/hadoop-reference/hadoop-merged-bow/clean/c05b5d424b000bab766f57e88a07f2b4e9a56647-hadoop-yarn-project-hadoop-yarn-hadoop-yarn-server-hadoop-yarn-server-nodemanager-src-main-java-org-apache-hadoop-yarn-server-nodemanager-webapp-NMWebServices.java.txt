YARN-8319. More YARN pages need to honor yarn.resourcemanager.display.per-user-apps. Contributed by Sunil G.

+import java.security.Principal;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.yarn.api.records.ApplicationAccessType;
+  private boolean filterAppsByUser = false;
+    this.filterAppsByUser = this.nmContext.getConf().getBoolean(
+        YarnConfiguration.FILTER_ENTITY_LIST_BY_USER,
+        YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);
+  }
+
+  public NMWebServices(final Context nm, final ResourceView view,
+      final WebApp webapp, HttpServletResponse response) {
+    this(nm, view, webapp);
+    this.response = response;
-  public AppsInfo getNodeApps(@QueryParam("state") String stateQuery,
+  public AppsInfo getNodeApps(@javax.ws.rs.core.Context HttpServletRequest hsr,
+      @QueryParam("state") String stateQuery,
+
+      // Allow only application-owner/admin for any type of access on the
+      // application.
+      if (filterAppsByUser
+          && !hasAccess(appInfo.getUser(), entry.getKey(), hsr)) {
+        continue;
+      }
+
+
+      ApplicationId appId = entry.getKey().getApplicationAttemptId()
+          .getApplicationId();
+      // Allow only application-owner/admin for any type of access on the
+      // application.
+      if (filterAppsByUser
+          && !hasAccess(entry.getValue().getUser(), appId, hsr)) {
+        continue;
+      }
+
+
+  protected Boolean hasAccess(String user, ApplicationId appId,
+      HttpServletRequest hsr) {
+    // Check for the authorization.
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+
+    if (callerUGI != null && !(this.nmContext.getApplicationACLsManager()
+        .checkAccess(callerUGI, ApplicationAccessType.VIEW_APP, user, appId))) {
+      return false;
+    }
+    return true;
+  }
+
+  private UserGroupInformation getCallerUserGroupInformation(
+      HttpServletRequest hsr, boolean usePrincipal) {
+
+    String remoteUser = hsr.getRemoteUser();
+    if (usePrincipal) {
+      Principal princ = hsr.getUserPrincipal();
+      remoteUser = princ == null ? null : princ.getName();
+    }
+
+    UserGroupInformation callerUGI = null;
+    if (remoteUser != null) {
+      callerUGI = UserGroupInformation.createRemoteUser(remoteUser);
+    }
+
+    return callerUGI;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS8 INS44 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS9 INS21 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS43 INS42 INS17 INS21 INS78 INS43 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS39 INS42 INS60 INS25 INS60 INS25 INS41 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS40 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS9 INS42 INS43 INS59 INS42 INS8 INS43 INS59 INS27 INS8 INS42 INS22 INS32 INS22 INS42 INS25 INS60 INS25 INS42 INS42 INS32 INS27 INS38 INS41 INS42 INS42 INS32 INS60 INS21 INS42 INS42 INS33 INS42 INS33 INS21 INS52 INS42 INS32 INS42 INS40 INS40 INS52 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS9 INS42 INS33 INS36 INS9 INS42 INS42 INS43 INS59 INS7 INS7 INS22 INS42 INS42 INS38 INS18 INS42 INS42 INS32 INS42 INS38 INS18 INS32 INS42 INS42 INS32 INS42 INS16 INS42 INS32 INS52 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS27 INS33 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS22 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42