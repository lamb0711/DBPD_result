HDFS-8142. DistributedFileSystem encryption zone commands should resolve relative paths. Contributed by Rakesh R.

-  public void createEncryptionZone(Path path, String keyName)
+  public void createEncryptionZone(final Path path, final String keyName)
-    dfs.createEncryptionZone(getPathName(path), keyName);
+    Path absF = fixRelativePart(path);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p) throws IOException,
+          UnresolvedLinkException {
+        dfs.createEncryptionZone(getPathName(p), keyName);
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p) throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem) fs;
+          myDfs.createEncryptionZone(p, keyName);
+          return null;
+        } else {
+          throw new UnsupportedOperationException(
+              "Cannot call createEncryptionZone"
+                  + " on a symlink to a non-DistributedFileSystem: " + path
+                  + " -> " + p);
+        }
+      }
+    }.resolve(this, absF);
-  public EncryptionZone getEZForPath(Path path)
+  public EncryptionZone getEZForPath(final Path path)
-    return dfs.getEZForPath(getPathName(path));
+    Path absF = fixRelativePart(path);
+    return new FileSystemLinkResolver<EncryptionZone>() {
+      @Override
+      public EncryptionZone doCall(final Path p) throws IOException,
+          UnresolvedLinkException {
+        return dfs.getEZForPath(getPathName(p));
+      }
+
+      @Override
+      public EncryptionZone next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem) fs;
+          return myDfs.getEZForPath(p);
+        } else {
+          throw new UnsupportedOperationException(
+              "Cannot call getEZForPath"
+                  + " on a symlink to a non-DistributedFileSystem: " + path
+                  + " -> " + p);
+        }
+      }
+    }.resolve(this, absF);

INS8 INS8 INS83 INS43 INS83 INS60 INS21 INS83 INS43 MOV21 INS60 INS41 INS42 MOV43 INS59 INS32 INS42 MOV43 INS59 INS32 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS42 INS33 INS42 INS42 INS62 INS8 INS8 INS42 INS42 INS42 INS62 INS8 INS8 INS42 INS43 INS60 INS21 INS41 INS53 INS42 INS43 INS60 INS41 INS53 UPD42 INS42 INS43 INS59 INS32 INS33 INS14 UPD42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS11 INS42 INS42 INS42 INS43 INS27 INS43 INS42 INS42 INS27 INS42 INS45 INS42 INS43 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS45 INS45 INS42 INS45 INS45