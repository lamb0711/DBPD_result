MAPREDUCE-6284. Add Task Attempt State API to MapReduce Application Master REST API. Contributed by Ryu Kobayashi.

+import java.lang.reflect.UndeclaredThrowableException;
+import java.security.AccessControlException;
+import java.security.PrivilegedExceptionAction;
+import javax.ws.rs.Consumes;
+import javax.ws.rs.PUT;
+import javax.ws.rs.core.Response;
+import org.apache.hadoop.mapreduce.v2.api.protocolrecords.KillTaskAttemptRequest;
+import org.apache.hadoop.mapreduce.v2.api.protocolrecords.KillTaskAttemptResponse;
+import org.apache.hadoop.mapreduce.v2.api.protocolrecords.impl.pb.KillTaskAttemptRequestPBImpl;
+import org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptState;
+import org.apache.hadoop.mapreduce.v2.app.client.MRClientService;
+import org.apache.hadoop.mapreduce.v2.app.webapp.dao.JobTaskAttemptState;
+import org.apache.hadoop.yarn.exceptions.YarnException;
+import com.google.common.base.Preconditions;
+  private final MRClientService service;
+    this.service = new MRClientService(context);
+  @Path("/jobs/{jobid}/tasks/{taskid}/attempts/{attemptid}/state")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public JobTaskAttemptState getJobTaskAttemptState(
+      @Context HttpServletRequest hsr,
+      @PathParam("jobid") String jid, @PathParam("taskid") String tid,
+      @PathParam("attemptid") String attId)
+          throws IOException, InterruptedException {
+    init();
+    Job job = getJobFromJobIdString(jid, appCtx);
+    checkAccess(job, hsr);
+    Task task = getTaskFromTaskIdString(tid, job);
+    TaskAttempt ta = getTaskAttemptFromTaskAttemptString(attId, task);
+    return new JobTaskAttemptState(ta.getState().toString());
+  }
+
+  @PUT
+  @Path("/jobs/{jobid}/tasks/{taskid}/attempts/{attemptid}/state")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response updateJobTaskAttemptState(JobTaskAttemptState targetState,
+      @Context HttpServletRequest hsr, @PathParam("jobid") String jid,
+      @PathParam("taskid") String tid, @PathParam("attemptid") String attId)
+          throws IOException, InterruptedException {
+    init();
+    Job job = getJobFromJobIdString(jid, appCtx);
+    checkAccess(job, hsr);
+
+    String remoteUser = hsr.getRemoteUser();
+    UserGroupInformation callerUGI = null;
+    if (remoteUser != null) {
+      callerUGI = UserGroupInformation.createRemoteUser(remoteUser);
+    }
+
+    Task task = getTaskFromTaskIdString(tid, job);
+    TaskAttempt ta = getTaskAttemptFromTaskAttemptString(attId, task);
+    if (!ta.getState().toString().equals(targetState.getState())) {
+      // user is attempting to change state. right we only
+      // allow users to kill the job task attempt
+      if (targetState.getState().equals(TaskAttemptState.KILLED.toString())) {
+        return killJobTaskAttempt(ta, callerUGI, hsr);
+      }
+      throw new BadRequestException("Only '"
+          + TaskAttemptState.KILLED.toString()
+          + "' is allowed as a target state.");
+    }
+
+    JobTaskAttemptState ret = new JobTaskAttemptState();
+    ret.setState(ta.getState().toString());
+
+    return Response.status(Status.OK).entity(ret).build();
+  }
+
+  @GET
+
+  protected Response killJobTaskAttempt(TaskAttempt ta,
+      UserGroupInformation callerUGI, HttpServletRequest hsr)
+          throws IOException, InterruptedException {
+    Preconditions.checkNotNull(ta, "ta cannot be null");
+
+    String userName = callerUGI.getUserName();
+    final TaskAttemptId attemptId = ta.getID();
+    try {
+      callerUGI
+          .doAs(new PrivilegedExceptionAction<KillTaskAttemptResponse>() {
+            @Override
+            public KillTaskAttemptResponse run()
+                throws IOException, YarnException {
+              KillTaskAttemptRequest req =  new KillTaskAttemptRequestPBImpl();
+              req.setTaskAttemptId(attemptId);
+              return service.forceKillTaskAttempt(req);
+            }
+          });
+    } catch (UndeclaredThrowableException ue) {
+      // if the root cause is a permissions issue
+      // bubble that up to the user
+      if (ue.getCause() instanceof YarnException) {
+        YarnException ye = (YarnException) ue.getCause();
+        if (ye.getCause() instanceof AccessControlException) {
+          String taId = attemptId.toString();
+          String msg =
+              "Unauthorized attempt to kill task attempt " + taId
+                  + " by remote user " + userName;
+          return Response.status(Status.FORBIDDEN).entity(msg).build();
+        } else {
+          throw ue;
+        }
+      } else {
+        throw ue;
+      }
+    }
+
+    JobTaskAttemptState ret = new JobTaskAttemptState();
+    ret.setState(TaskAttemptState.KILLED.toString());
+
+    return Response.status(Status.OK).entity(ret).build();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS21 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS42 INS42 INS21 INS60 INS21 INS60 INS60 INS41 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS43 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS42 INS42 INS21 INS60 INS21 INS60 INS60 INS25 INS60 INS60 INS25 INS60 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS60 INS60 INS54 INS60 INS21 INS41 INS7 INS40 INS40 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS14 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS83 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS32 INS22 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS25 INS53 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS8 INS14 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS25 INS43 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS41 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS62 INS8 INS8 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS45 INS32 INS45 INS74 INS1 INS32 INS43 INS60 INS25 INS53 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS43 INS59 INS62 INS8 INS8 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS42 INS11 INS32 INS43 INS60 INS60 INS41 INS53 INS42 INS42 INS42 INS42 INS60 INS21 INS41 INS43 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS40 INS42