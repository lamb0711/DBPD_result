HDFS-3845. Fixes for edge cases in QJM recovery protocol. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1377809 13f79535-47bb-0310-9956-ffa450edef68

+  
+  /**
+   * The epoch number of the last writer to actually write a transaction.
+   * This is used to differentiate log segments after a crash at the very
+   * beginning of a segment. See the the 'testNewerVersionOfSegmentWins'
+   * test case.
+   */
+  private PersistentLongFile lastWriterEpoch;
+  
+  private static final String LAST_WRITER_EPOCH = "last-writer-epoch";
+    this.lastWriterEpoch = new PersistentLongFile(
+        new File(currentDir, LAST_WRITER_EPOCH), 0);
-    checkRequest(reqInfo);
+    checkWriteRequest(reqInfo);
+  private synchronized void checkWriteRequest(RequestInfo reqInfo) throws IOException {
+    checkRequest(reqInfo);
+    
+    if (reqInfo.getEpoch() != lastWriterEpoch.get()) {
+      throw new IOException("IPC's epoch " + reqInfo.getEpoch() +
+          " is not the current writer epoch  " +
+          lastWriterEpoch.get());
+    }
+  }
+  
+    long curLastWriterEpoch = lastWriterEpoch.get();
+    if (curLastWriterEpoch != reqInfo.getEpoch()) {
+      LOG.info("Recording lastWriterEpoch = " + reqInfo.getEpoch());
+      lastWriterEpoch.set(reqInfo.getEpoch());
+    }
+
+    // The fact that we are starting a segment at this txid indicates
+    // that any previous recovery for this same segment was aborted.
+    // Otherwise, no writer would have started writing. So, we can
+    // remove the record of the older segment here.
+    purgePaxosDecision(txid);
+    
+
+    // Once logs are finalized, a different length will never be decided.
+    // During recovery, we treat a finalized segment the same as an accepted
+    // recovery. Thus, we no longer need to keep track of the previously-
+    // accepted decision. The existence of the finalized log segment is enough.
+    purgePaxosDecision(elf.getFirstTxId());
+  /**
+   * Remove the previously-recorded 'accepted recovery' information
+   * for a given log segment, once it is no longer necessary. 
+   * @param segmentTxId the transaction ID to purge
+   * @throws IOException if the file could not be deleted
+   */
+  private void purgePaxosDecision(long segmentTxId) throws IOException {
+    File paxosFile = storage.getPaxosFile(segmentTxId);
+    if (paxosFile.exists()) {
+      if (!paxosFile.delete()) {
+        throw new IOException("Unable to delete paxos file " + paxosFile);
+      }
+    }
+  }
+
+
+    SegmentStateProto segInfo = getSegmentInfo(segmentTxId);
+    boolean hasFinalizedSegment = segInfo != null && !segInfo.getIsInProgress();
-    if (previouslyAccepted != null) {
+
+    if (previouslyAccepted != null && !hasFinalizedSegment) {
+      SegmentStateProto acceptedState = previouslyAccepted.getSegmentState();
+      assert acceptedState.getEndTxId() == segInfo.getEndTxId() &&
+             acceptedState.getMd5Sum().equals(segInfo.getMd5Sum()) :
+            "prev accepted: " + TextFormat.shortDebugString(previouslyAccepted)+ "\n" +
+            "on disk:       " + TextFormat.shortDebugString(segInfo);
+            
-      SegmentStateProto segInfo = getSegmentInfo(segmentTxId);
+    builder.setLastWriterEpoch(lastWriterEpoch.get());
+    

INS23 INS23 INS31 INS31 INS29 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS42 INS42 INS42 INS42 INS45 INS21 INS21 INS43 INS42 INS42 MOV21 INS25 INS60 INS25 INS21 INS21 INS65 INS65 INS65 INS39 INS42 INS42 INS60 INS25 MOV60 INS60 INS21 INS66 INS66 INS66 INS66 INS7 INS32 INS42 INS27 INS8 INS39 INS59 INS27 INS8 INS32 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS43 INS59 INS32 INS8 INS39 INS59 INS27 INS32 INS22 INS14 INS42 INS42 INS32 INS32 INS53 INS42 INS32 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS25 INS42 INS27 MOV27 INS38 INS60 INS6 INS42 INS42 INS32 INS52 INS42 INS43 INS14 INS34 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS27 INS38 INS42 INS43 INS59 INS27 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS27 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS53 INS42 INS33 INS32 INS42 INS42 INS32 INS27 INS32 INS45 INS32 INS45 INS45 INS32 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42