HDFS-6929. NN periodically unlinks lazy persist files with missing replicas from namespace. (Arpit Agarwal)

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC_DEFAULT;
+
+  // A daemon to periodically clean up corrupt lazyPersist files
+  // from the name space.
+  Daemon lazyPersistFileScrubber = null;
+  /**
+   * How frequently we scan and unlink corrupt lazyPersist files.
+   * (In seconds)
+   */
+  private final int lazyPersistFileScrubIntervalSec;
+
+      this.lazyPersistFileScrubIntervalSec = conf.getInt(
+          DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC,
+          DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC_DEFAULT);
+
+      if (this.lazyPersistFileScrubIntervalSec == 0) {
+        throw new IllegalArgumentException(
+            DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC + " must be non-zero.");
+      }
+
-        DFS_NAMENODE_ENABLE_RETRY_CACHE_DEFAULT);
+                                     DFS_NAMENODE_ENABLE_RETRY_CACHE_DEFAULT);
+      if (lazyPersistFileScrubIntervalSec > 0) {
+        lazyPersistFileScrubber = new Daemon(new LazyPersistFileScrubber(
+            lazyPersistFileScrubIntervalSec));
+        lazyPersistFileScrubber.start();
+      }
+
+      if (lazyPersistFileScrubber != null) {
+        ((LazyPersistFileScrubber) lazyPersistFileScrubber.getRunnable()).stop();
+        lazyPersistFileScrubber.interrupt();
+      }
+
+      if (myFile.getLazyPersistFlag()) {
+        throw new UnsupportedOperationException(
+            "Cannot append to lazy persist file " + src);
+      }
+  /**
+   * Daemon to periodically scan the namespace for lazyPersist files
+   * with missing blocks and unlink them.
+   */
+  class LazyPersistFileScrubber implements Runnable {
+    private volatile boolean shouldRun = true;
+    final int scrubIntervalSec;
+    public LazyPersistFileScrubber(final int scrubIntervalSec) {
+      this.scrubIntervalSec = scrubIntervalSec;
+    }
+
+    /**
+     * Periodically go over the list of lazyPersist files with missing
+     * blocks and unlink them from the namespace.
+     */
+    private void clearCorruptLazyPersistFiles()
+        throws SafeModeException, AccessControlException,
+        UnresolvedLinkException, IOException {
+
+      List<BlockCollection> filesToDelete = new ArrayList<BlockCollection>();
+
+      writeLock();
+
+      try {
+        final Iterator<Block> it = blockManager.getCorruptReplicaBlockIterator();
+
+        while (it.hasNext()) {
+          Block b = it.next();
+          BlockInfo blockInfo = blockManager.getStoredBlock(b);
+          if (blockInfo.getBlockCollection().getLazyPersistFlag()) {
+            filesToDelete.add(blockInfo.getBlockCollection());
+          }
+        }
+
+        for (BlockCollection bc : filesToDelete) {
+          LOG.warn("Removing lazyPersist file " + bc.getName() + " with no replicas.");
+          deleteInternal(bc.getName(), false, false, false);
+        }
+      } finally {
+        writeUnlock();
+      }
+    }
+
+    @Override
+    public void run() {
+      while (fsRunning && shouldRun) {
+        try {
+          clearCorruptLazyPersistFiles();
+          Thread.sleep(scrubIntervalSec * 1000);
+        } catch (InterruptedException e) {
+          FSNamesystem.LOG.info(
+              "LazyPersistFileScrubber was interrupted, exiting");
+          break;
+        } catch (Exception e) {
+          FSNamesystem.LOG.error(
+              "Ignoring exception in LazyPersistFileScrubber:", e);
+        }
+      }
+    }
+
+    public void stop() {
+      shouldRun = false;
+    }
+  }
+

INS26 INS26 INS40 INS40 INS23 INS23 INS55 INS43 INS59 INS29 INS83 INS83 INS39 INS59 INS29 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS42 INS33 INS65 INS42 INS65 INS42 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS43 INS43 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS66 INS66 INS66 INS66 INS42 INS9 INS42 INS83 INS39 INS42 INS21 INS65 INS42 INS42 INS42 INS42 INS60 INS21 INS54 INS42 INS61 INS21 INS21 INS25 INS25 INS25 INS25 INS7 INS66 INS66 INS74 INS59 INS32 INS8 INS8 INS27 INS8 INS7 INS7 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS8 INS22 INS42 INS43 INS43 INS42 INS14 INS42 INS60 INS61 INS70 INS21 INS42 INS42 INS54 INS42 INS9 INS22 INS32 INS22 INS34 INS53 INS42 INS34 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS42 INS53 INS52 INS42 INS42 INS42 INS74 INS83 INS74 INS59 INS32 INS8 INS44 INS42 INS8 INS32 INS8 INS12 INS12 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS14 INS7 INS32 INS32 INS32 INS14 INS43 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS43 INS42 INS21 INS21 INS42 INS21 INS21 INS44 INS8 INS44 INS8 INS43 INS27 INS42 INS14 INS42 INS42 INS36 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS32 INS32 INS32 INS32 INS43 INS42 INS21 INS10 INS43 INS42 INS21 INS42 INS42 INS45 INS43 INS14 INS11 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS21 INS42 INS42 INS27 INS42 INS32 INS9 INS9 INS9 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS34 INS40 INS42 INS45 INS40 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42