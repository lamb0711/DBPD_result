HDDS-1. Remove SCM Block DB. Contributed by Xiaoyu Yao.

+import org.apache.commons.lang3.RandomUtils;
+import org.apache.hadoop.hdds.client.BlockID;
+import org.apache.hadoop.util.Time;
+import java.util.ArrayList;
+  final int initContainers = 100;
+  final int initKeys = 50;
+  final int initChunks = 100;
+
+  List<Long> containers;
+  List<Long> keys;
+  List<String> chunks;
+
+    containers = new ArrayList<>();
+    keys = new ArrayList<>();
+    chunks = new ArrayList<>();
+
-    for (int x = 0; x < 100; x++) {
-      String containerName = "container-" + containerCount.getAndIncrement();
-      dispatcher.dispatch(getCreateContainerCommand(containerName));
+    for (int x = 0; x < initContainers; x++) {
+      long containerID = Time.getUtcTime() + x;
+      ContainerCommandRequestProto req = getCreateContainerCommand(containerID);
+      dispatcher.dispatch(req);
+      containers.add(containerID);
+      containerCount.getAndIncrement();
+
+    for (int x = 0; x < initKeys; x++) {
+      keys.add(Time.getUtcTime()+x);
+    }
+
+    for (int x = 0; x < initChunks; x++) {
+      chunks.add("chunk-" + x);
+    }
+
-    for (int x = 0; x < 50; x++) {
-      String chunkName = "chunk-" + chunkCount.getAndIncrement();
-      String keyName = "key-" + keyCount.getAndIncrement();
-      for (int y = 0; y < 100; y++) {
-        String containerName = "container-" + y;
-        dispatcher.dispatch(getWriteChunkCommand(containerName, chunkName));
+    for (int x = 0; x < initKeys; x++) {
+      String chunkName = chunks.get(x);
+      chunkCount.getAndIncrement();
+      long key = keys.get(x);
+      keyCount.getAndIncrement();
+      for (int y = 0; y < initContainers; y++) {
+        long containerID = containers.get(y);
+        BlockID  blockID = new BlockID(containerID, key);
-            .dispatch(getPutKeyCommand(containerName, chunkName, keyName));
+            .dispatch(getPutKeyCommand(blockID, chunkName));
+        dispatcher.dispatch(getWriteChunkCommand(blockID, chunkName));
-  private ContainerCommandRequestProto getCreateContainerCommand(
-      String containerName) {
+  private ContainerCommandRequestProto getCreateContainerCommand(long containerID) {
-        new Pipeline(containerName, pipelineChannel).getProtobufMessage());
+        new Pipeline(pipelineChannel).getProtobufMessage());
-        ContainerData.newBuilder().setName(containerName).build());
+        ContainerData.newBuilder().setContainerID(
+            containerID).build());
-    request.setTraceID(containerName + "-trace");
+    request.setTraceID(containerID + "-trace");
-      String containerName, String key) {
-
+      BlockID blockID, String chunkName) {
-        .setPipeline(
-            new Pipeline(containerName, pipelineChannel).getProtobufMessage())
-        .setKeyName(key)
-        .setChunkData(getChunkInfo(containerName, key))
+        .setBlockID(blockID.getProtobuf())
+        .setChunkData(getChunkInfo(blockID, chunkName))
-        .setTraceID(containerName + "-" + key +"-trace")
+        .setTraceID(getBlockTraceID(blockID))
-      String containerName, String key) {
+      BlockID blockID, String chunkName) {
-        .setPipeline(
-            new Pipeline(containerName, pipelineChannel).getProtobufMessage())
-        .setKeyName(key)
-        .setChunkData(getChunkInfo(containerName, key));
+        .setBlockID(blockID.getProtobuf())
+        .setChunkData(getChunkInfo(blockID, chunkName));
-        .setTraceID(containerName + "-" + key +"-trace")
+        .setTraceID(getBlockTraceID(blockID))
-      String containerName, String key) {
+      BlockID blockID, String chunkName) {
-                DigestUtils.md5Hex(key) + "_stream_" + containerName + "_chunk_"
-                    + key)
+                DigestUtils.md5Hex(chunkName)
+                    + "_stream_" + blockID.getContainerID() + "_block_"
+                    + blockID.getLocalID())
-      String containerName, String chunkKey, String key) {
+      BlockID blockID, String chunkKey) {
-        .setPipeline(
-            new Pipeline(containerName, pipelineChannel).getProtobufMessage())
-        .setKeyData(getKeyData(containerName, chunkKey, key));
+        .setKeyData(getKeyData(blockID, chunkKey));
-        .setTraceID(containerName + "-" + key +"-trace")
+        .setTraceID(getBlockTraceID(blockID))
-      String containerName, String chunkKey, String key) {
+      BlockID blockID, String chunkKey) {
-        .setPipeline(
-            new Pipeline(containerName, pipelineChannel).getProtobufMessage())
-        .setKeyData(getKeyData(containerName, chunkKey, key));
+        .setKeyData(getKeyData(blockID, chunkKey));
-        .setTraceID(containerName + "-" + key +"-trace")
+        .setTraceID(getBlockTraceID(blockID))
-      String containerName, String chunkKey, String key) {
+      BlockID blockID, String chunkKey) {
-        .setContainerName(containerName)
-        .setName(key)
-        .addChunks(getChunkInfo(containerName, chunkKey));
+        .setBlockID(blockID.getProtobuf())
+        .addChunks(getChunkInfo(blockID, chunkKey));
-    bmdd.dispatcher.dispatch(getCreateContainerCommand(
-        "container-" + containerCount.getAndIncrement()));
+    long containerID = RandomUtils.nextLong();
+    ContainerCommandRequestProto req = getCreateContainerCommand(containerID);
+    bmdd.dispatcher.dispatch(req);
+    bmdd.containers.add(containerID);
+    bmdd.containerCount.getAndIncrement();
-    String containerName = "container-" + random.nextInt(containerCount.get());
-        containerName, "chunk-" + chunkCount.getAndIncrement()));
+        getRandomBlockID(), getNewChunkToWrite()));
-    String containerName = "container-" + random.nextInt(containerCount.get());
-    String chunkKey = "chunk-" + random.nextInt(chunkCount.get());
-    bmdd.dispatcher.dispatch(getReadChunkCommand(containerName, chunkKey));
+    BlockID blockID = getRandomBlockID();
+    String chunkKey = getRandomChunkToRead();
+    bmdd.dispatcher.dispatch(getReadChunkCommand(blockID, chunkKey));
-    String containerName = "container-" + random.nextInt(containerCount.get());
-    String chunkKey = "chunk-" + random.nextInt(chunkCount.get());
-    bmdd.dispatcher.dispatch(getPutKeyCommand(
-        containerName, chunkKey, "key-" + keyCount.getAndIncrement()));
+    BlockID blockID = getRandomBlockID();
+    String chunkKey = getNewChunkToWrite();
+    bmdd.dispatcher.dispatch(getPutKeyCommand(blockID, chunkKey));
-    String containerName = "container-" + random.nextInt(containerCount.get());
-    String chunkKey = "chunk-" + random.nextInt(chunkCount.get());
-    String key = "key-" + random.nextInt(keyCount.get());
-    bmdd.dispatcher.dispatch(getGetKeyCommand(containerName, chunkKey, key));
+    BlockID blockID = getRandomBlockID();
+    String chunkKey = getNewChunkToWrite();
+    bmdd.dispatcher.dispatch(getGetKeyCommand(blockID, chunkKey));
+  }
+
+  // Chunks writes from benchmark only reaches certain containers
+  // Use initChunks instead of updated counters to guarantee
+  // key/chunks are readable.
+
+  private BlockID getRandomBlockID() {
+    return new BlockID(getRandomContainerID(), getRandomKeyID());
+  }
+
+  private long getRandomContainerID() {
+    return containers.get(random.nextInt(initContainers));
+  }
+
+  private long getRandomKeyID() {
+    return keys.get(random.nextInt(initKeys));
+  }
+
+  private String getRandomChunkToRead() {
+    return chunks.get(random.nextInt(initChunks));
+  }
+
+  private String getNewChunkToWrite() {
+    return "chunk-" + chunkCount.getAndIncrement();
+  }
+
+  private String getBlockTraceID(BlockID blockID) {
+    return blockID.getContainerID() + "-" + blockID.getLocalID() +"-trace";

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS74 INS59 INS74 INS59 INS74 INS59 INS83 MOV43 INS42 INS44 MOV44 MOV8 MOV44 MOV44 MOV78 INS83 INS39 INS42 MOV44 INS8 MOV78 UPD42 MOV44 MOV78 UPD42 MOV44 MOV78 UPD42 MOV44 MOV78 UPD42 MOV44 UPD83 MOV83 INS43 INS42 INS8 INS83 UPD39 MOV39 UPD42 MOV42 INS8 INS83 INS39 INS42 INS8 INS83 MOV43 INS42 INS8 INS83 MOV43 INS42 INS8 INS83 MOV43 INS42 INS44 INS8 INS42 INS34 INS42 INS34 INS42 INS34 INS43 INS43 INS42 INS43 INS43 INS42 INS43 MOV43 INS42 INS21 INS21 INS21 INS24 INS24 INS39 UPD42 INS43 INS42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 INS60 INS60 INS21 INS21 INS21 INS60 INS60 INS42 INS41 INS41 INS41 INS41 INS41 INS43 INS42 INS41 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS7 INS7 INS7 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS39 INS59 INS43 INS59 INS32 INS32 INS32 UPD43 MOV43 INS59 MOV43 INS59 UPD43 MOV43 INS43 INS59 MOV43 INS14 INS32 INS32 INS32 MOV27 INS42 INS27 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS60 INS21 INS21 INS21 INS39 INS59 INS42 INS42 INS42 INS21 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS21 INS60 INS21 MOV32 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 UPD42 UPD42 MOV42 INS32 INS42 INS32 UPD42 UPD42 INS32 INS32 INS42 INS42 INS32 INS32 INS43 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 MOV42 INS32 INS32 INS45 INS32 INS45 INS74 INS74 INS74 INS39 INS43 INS59 INS32 INS32 MOV32 INS42 INS34 INS32 INS42 INS34 INS32 MOV43 INS32 INS39 MOV59 MOV32 UPD42 MOV32 MOV32 MOV32 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS43 UPD42 INS42 INS42 INS32 MOV42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS27 INS42 INS42 INS27 MOV42 INS32 INS42 INS42 UPD42 INS32 INS42 INS60 UPD42 UPD42 MOV32 INS32 UPD42 UPD42 UPD42 INS32 UPD42 INS32 UPD42 UPD42 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 UPD43 MOV42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS14 INS42 UPD42 INS32 UPD45 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 DEL34 DEL45 DEL32 DEL32 DEL21 DEL34 DEL45 DEL27 DEL42 DEL43 DEL60 DEL34 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL83 DEL42 DEL42 DEL44 DEL43 DEL42 DEL44 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL14 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL45 DEL42 DEL32 DEL27 DEL45 DEL42 DEL42 DEL32 DEL32 DEL27 DEL59 DEL60 DEL45 DEL42 DEL32 DEL27 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL59 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL45 DEL42 DEL32 DEL32 DEL27 DEL59 DEL60 DEL42 DEL45 DEL32 DEL32 DEL27 DEL59 DEL60 DEL42 DEL45 DEL42 DEL32 DEL32 DEL27 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31