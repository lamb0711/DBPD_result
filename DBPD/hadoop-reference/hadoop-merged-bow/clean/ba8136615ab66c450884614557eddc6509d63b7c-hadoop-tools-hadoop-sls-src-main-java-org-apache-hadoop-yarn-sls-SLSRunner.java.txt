YARN-7413. Support resource type in SLS (Contributed by Yufei Gu via Daniel Templeton)

Change-Id: Ic0a897c123c5d2f57aae757ca6bcf1dad7b90d2b

+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
-  private int nmMemoryMB, nmVCores;
+  private Resource nodeManagerResource;
+
+    nodeManagerResource = getNodeManagerResource();
+  }
+
+  private Resource getNodeManagerResource() {
+    Resource resource = Resources.createResource(0);
+    ResourceInformation[] infors = ResourceUtils.getResourceTypesArray();
+    for (ResourceInformation info : infors) {
+      long value;
+      if (info.getName().equals(ResourceInformation.MEMORY_URI)) {
+        value = getConf().getInt(SLSConfiguration.NM_MEMORY_MB,
+            SLSConfiguration.NM_MEMORY_MB_DEFAULT);
+      } else if (info.getName().equals(ResourceInformation.VCORES_URI)) {
+        value = getConf().getInt(SLSConfiguration.NM_VCORES,
+            SLSConfiguration.NM_VCORES_DEFAULT);
+      } else {
+        value = getConf().getLong(SLSConfiguration.NM_PREFIX +
+            info.getName(), SLSConfiguration.NM_RESOURCE_DEFAULT);
+      }
+
+      resource.setResourceValue(info.getName(), value);
+    }
+
+    return resource;
-    nmMemoryMB = getConf().getInt(SLSConfiguration.NM_MEMORY_MB,
-        SLSConfiguration.NM_MEMORY_MB_DEFAULT);
-    nmVCores = getConf().getInt(SLSConfiguration.NM_VCORES,
-        SLSConfiguration.NM_VCORES_DEFAULT);
-      nm.init(hostName, nmMemoryMB, nmVCores, random.nextInt(heartbeatInterval),
+      nm.init(hostName, nodeManagerResource, random.nextInt(heartbeatInterval),
-      Resource res = getDefaultContainerResource();
-      if (jsonTask.containsKey(SLSConfiguration.TASK_MEMORY)) {
-        int containerMemory = Integer.parseInt(
-            jsonTask.get(SLSConfiguration.TASK_MEMORY).toString());
-        res.setMemorySize(containerMemory);
-      }
-
-      if (jsonTask.containsKey(SLSConfiguration.CONTAINER_VCORES)) {
-        int containerVCores = Integer.parseInt(
-            jsonTask.get(SLSConfiguration.CONTAINER_VCORES).toString());
-        res.setVirtualCores(containerVCores);
-      }
+      Resource res = getResourceForContainer(jsonTask);
+  private Resource getResourceForContainer(Map jsonTask) {
+    Resource res = getDefaultContainerResource();
+    ResourceInformation[] infors = ResourceUtils.getResourceTypesArray();
+    for (ResourceInformation info : infors) {
+      if (jsonTask.containsKey(SLSConfiguration.TASK_PREFIX + info.getName())) {
+        long value = Long.parseLong(
+            jsonTask.get(SLSConfiguration.TASK_PREFIX + info.getName())
+                .toString());
+        res.setResourceValue(info.getName(), value);
+      }
+    }
+
+    return res;
+  }
+
-    if (jsonJob.containsKey(SLSConfiguration.AM_MEMORY)) {
-      amContainerResource.setMemorySize(
-          Long.parseLong(jsonJob.get(SLSConfiguration.AM_MEMORY).toString()));
+    ResourceInformation[] infors = ResourceUtils.getResourceTypesArray();
+    for (ResourceInformation info : infors) {
+      String key = SLSConfiguration.JOB_AM_PREFIX + info.getName();
+      if (jsonJob.containsKey(key)) {
+        long value = Long.parseLong(jsonJob.get(key).toString());
+        amContainerResource.setResourceValue(info.getName(), value);
+      }
-    if (jsonJob.containsKey(SLSConfiguration.AM_VCORES)) {
-      amContainerResource.setVirtualCores(
-          Integer.parseInt(jsonJob.get(SLSConfiguration.AM_VCORES).toString()));
-    }
-              "of each node {} MB memory and {} vcores.",
-              numNMs, numRacks, nmMemoryMB, nmVCores);
+              "of each node {}.",
+              numNMs, numRacks, nodeManagerResource);
-    simulateInfoMap.put("Node memory (MB)", nmMemoryMB);
-    simulateInfoMap.put("Node VCores", nmVCores);
+    simulateInfoMap.put("Node memory (MB)",
+        nodeManagerResource.getResourceValue(ResourceInformation.MEMORY_URI));
+    simulateInfoMap.put("Node VCores",
+        nodeManagerResource.getResourceValue(ResourceInformation.VCORES_URI));

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 MOV83 INS43 MOV59 INS83 INS43 INS42 INS8 MOV83 INS43 UPD42 MOV42 INS44 INS8 INS83 MOV43 INS42 MOV44 INS8 INS42 UPD42 INS21 INS42 INS60 INS60 INS70 INS41 INS42 INS43 INS42 MOV60 INS60 INS70 INS41 MOV60 MOV25 INS60 INS70 MOV41 INS7 INS43 INS59 INS5 INS59 INS44 INS42 INS8 INS42 INS42 INS5 INS59 INS44 INS42 INS8 INS42 INS5 INS59 INS44 INS42 INS8 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS42 INS60 INS25 INS21 INS60 INS43 INS85 INS42 INS32 INS43 INS42 MOV25 INS43 INS85 INS42 INS32 INS43 INS42 INS60 MOV25 INS32 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS39 INS59 INS32 INS8 INS25 INS32 INS43 MOV59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 UPD42 MOV42 INS42 INS40 UPD42 MOV42 INS42 INS40 INS42 INS32 INS42 INS40 MOV21 INS32 INS8 INS8 INS42 INS42 INS32 INS42 UPD42 INS42 UPD42 UPD42 INS27 INS60 INS21 INS42 INS42 INS27 INS42 INS60 INS21 UPD42 INS42 INS42 INS32 INS42 INS40 MOV21 INS21 INS42 INS42 UPD42 MOV42 INS40 INS32 INS39 INS59 INS32 INS40 INS32 INS39 INS59 INS32 UPD45 UPD42 INS42 INS42 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 INS42 INS32 MOV42 MOV42 MOV32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS32 INS42 INS27 INS40 INS42 INS40 INS32 UPD42 INS27 INS42 INS42 INS42 INS40 INS32 INS42 INS42 DEL39 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL39 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL40 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL40 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL42