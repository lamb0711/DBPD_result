HDFS-14118. Support using DNS to resolve nameservices to IP addresses. Contributed by Fengnan Li.

+import java.net.InetAddress;
+import org.apache.hadoop.net.DomainNameResolver;
+import org.apache.hadoop.net.DomainNameResolverFactory;
+    try {
+      addressesOfNns = getResolvedAddressesIfNecessary(addressesOfNns, uri);
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+   * If resolved is needed: for every domain name in the parameter list,
+   * resolve them into the actual IP addresses.
+   *
+   * @param addressesOfNns The domain name list from config.
+   * @param nameNodeUri The URI of namenode/nameservice.
+   * @return The collection of resolved IP addresses.
+   * @throws IOException If there are issues resolving the addresses.
+   */
+  Collection<InetSocketAddress> getResolvedAddressesIfNecessary(
+      Collection<InetSocketAddress> addressesOfNns, URI nameNodeUri)
+          throws IOException {
+    // 'host' here is usually the ID of the nameservice when address
+    // resolving is needed.
+    String host = nameNodeUri.getHost();
+    String configKeyWithHost =
+        HdfsClientConfigKeys.Failover.RESOLVE_ADDRESS_NEEDED_KEY  + "." + host;
+    boolean resolveNeeded = conf.getBoolean(configKeyWithHost,
+        HdfsClientConfigKeys.Failover.RESOLVE_ADDRESS_NEEDED_DEFAULT);
+    if (!resolveNeeded) {
+      // Early return is no resolve is necessary
+      return addressesOfNns;
+    }
+
+    Collection<InetSocketAddress> addressOfResolvedNns = new ArrayList<>();
+    DomainNameResolver dnr = DomainNameResolverFactory.newInstance(
+          conf, nameNodeUri, HdfsClientConfigKeys.Failover.RESOLVE_SERVICE_KEY);
+    // If the address needs to be resolved, get all of the IP addresses
+    // from this address and pass them into the proxy
+    LOG.info("Namenode domain name will be resolved with {}",
+        dnr.getClass().getName());
+    for (InetSocketAddress address : addressesOfNns) {
+      InetAddress[] resolvedAddresses = dnr.getAllByDomainName(
+          address.getHostName());
+      int port = address.getPort();
+      for (InetAddress raddress : resolvedAddresses) {
+        InetSocketAddress resolvedAddress = new InetSocketAddress(
+            raddress, port);
+        addressOfResolvedNns.add(resolvedAddress);
+      }
+    }
+
+    return addressOfResolvedNns;
+  }
+
+  /**

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 INS74 INS42 INS44 INS44 INS43 INS8 INS54 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS60 INS60 INS21 INS70 INS41 INS8 INS12 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS38 INS8 INS74 INS59 INS43 INS59 INS32 INS44 INS42 INS8 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS41 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS43 INS42 INS60 INS60 INS70 INS7 INS43 INS42 INS53 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS5 INS59 INS39 INS59 INS44 INS42 INS8 INS42 INS32 INS42 INS14 INS43 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS32 INS43 INS42 INS60 INS21 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS42 INS42