HDFS-8855. Webhdfs client leaks active NameNode connections. Contributed by Xiaobing Zhou.

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.ipc.Client;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.cache.Cache;
+import com.google.common.cache.CacheBuilder;
+
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
-class DataNodeUGIProvider {
+public class DataNodeUGIProvider {
+  @VisibleForTesting
+  static Cache<String, UserGroupInformation> ugiCache;
+  public static final Log LOG = LogFactory.getLog(Client.class);
+  public static synchronized void init(Configuration conf) {
+    if (ugiCache == null) {
+      ugiCache = CacheBuilder
+          .newBuilder()
+          .expireAfterAccess(
+              conf.getInt(
+                  DFSConfigKeys.DFS_WEBHDFS_UGI_EXPIRE_AFTER_ACCESS_KEY,
+                  DFSConfigKeys.DFS_WEBHDFS_UGI_EXPIRE_AFTER_ACCESS_DEFAULT),
+              TimeUnit.MILLISECONDS).build();
+    }
+  }
+
-    if (UserGroupInformation.isSecurityEnabled()) {
-      return tokenUGI();
+    UserGroupInformation ugi;
+
+    try {
+      if (UserGroupInformation.isSecurityEnabled()) {
+        final Token<DelegationTokenIdentifier> token = params.delegationToken();
+
+        ugi = ugiCache.get(buildTokenCacheKey(token),
+            new Callable<UserGroupInformation>() {
+              @Override
+              public UserGroupInformation call() throws Exception {
+                return tokenUGI(token);
+              }
+            });
+      } else {
+        final String usernameFromQuery = params.userName();
+        final String doAsUserFromQuery = params.doAsUser();
+        final String remoteUser = usernameFromQuery == null ? JspHelper
+            .getDefaultWebUserName(params.conf()) // not specified in request
+            : usernameFromQuery;
+
+        ugi = ugiCache.get(
+            buildNonTokenCacheKey(doAsUserFromQuery, remoteUser),
+            new Callable<UserGroupInformation>() {
+              @Override
+              public UserGroupInformation call() throws Exception {
+                return nonTokenUGI(usernameFromQuery, doAsUserFromQuery,
+                    remoteUser);
+              }
+            });
+      }
+    } catch (ExecutionException e) {
+      Throwable cause = e.getCause();
+      if (cause instanceof IOException) {
+        throw (IOException) cause;
+      } else {
+        throw new IOException(cause);
+      }
-    final String usernameFromQuery = params.userName();
-    final String doAsUserFromQuery = params.doAsUser();
-    final String remoteUser = usernameFromQuery == null
-        ? JspHelper.getDefaultWebUserName(params.conf()) // not specified in
-        // request
-        : usernameFromQuery;
-
-    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(remoteUser);
-    JspHelper.checkUsername(ugi.getShortUserName(), usernameFromQuery);
-    if (doAsUserFromQuery != null) {
-      // create and attempt to authorize a proxy user
-      ugi = UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);
-    }
-  private UserGroupInformation tokenUGI() throws IOException {
-    Token<DelegationTokenIdentifier> token = params.delegationToken();
+  private String buildTokenCacheKey(Token<DelegationTokenIdentifier> token) {
+    return token.buildCacheKey();
+  }
+
+  private UserGroupInformation tokenUGI(Token<DelegationTokenIdentifier> token)
+      throws IOException {
+  private String buildNonTokenCacheKey(String doAsUserFromQuery,
+      String remoteUser) throws IOException {
+    String key = doAsUserFromQuery == null ? String.format("{%s}", remoteUser)
+        : String.format("{%s}:{%s}", remoteUser, doAsUserFromQuery);
+    return key;
+  }
+
+  private UserGroupInformation nonTokenUGI(String usernameFromQuery,
+      String doAsUserFromQuery, String remoteUser) throws IOException {
+
+    UserGroupInformation ugi = UserGroupInformation
+        .createRemoteUser(remoteUser);
+    JspHelper.checkUsername(ugi.getShortUserName(), usernameFromQuery);
+    if (doAsUserFromQuery != null) {
+      // create and attempt to authorize a proxy user
+      ugi = UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);
+    }
+    return ugi;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS83 INS23 INS23 INS31 INS31 INS31 INS31 INS78 INS83 INS74 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS44 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS42 INS44 INS44 INS44 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS60 INS54 INS41 INS42 INS74 INS42 INS41 INS74 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS27 INS8 INS43 INS59 INS8 INS12 INS42 INS43 INS43 INS32 INS43 INS43 INS42 INS42 INS43 INS59 INS42 INS42 INS42 INS42 INS43 INS42 INS33 INS21 INS42 INS42 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS7 MOV32 INS8 INS8 INS43 INS42 INS60 INS25 INS27 INS32 INS32 INS42 INS32 MOV60 INS21 MOV60 MOV60 MOV60 INS21 INS42 INS43 INS59 INS62 INS8 INS8 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS83 INS7 INS7 INS42 INS42 INS32 INS42 INS43 INS53 INS53 INS32 INS42 INS32 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS11 INS14 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS32 INS14 INS42 INS42 INS32 INS14 INS43 INS42 INS43 INS42 INS42 INS42 INS74 INS1 INS42 INS42 INS42 INS74 INS1 INS42 INS42 INS43 INS43 INS31 INS43 INS43 INS31 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS41 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25