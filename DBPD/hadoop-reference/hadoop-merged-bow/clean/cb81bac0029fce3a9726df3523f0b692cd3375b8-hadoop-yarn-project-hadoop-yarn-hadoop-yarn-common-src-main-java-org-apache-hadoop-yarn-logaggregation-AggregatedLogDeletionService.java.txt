YARN-2583. Modified AggregatedLogDeletionService to be able to delete rolling aggregated logs. Contributed by Xuan Gong.

-import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.ipc.RPC;
+import org.apache.hadoop.yarn.api.ApplicationClientProtocol;
+import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationReportRequest;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.api.records.ApplicationReport;
+import org.apache.hadoop.yarn.api.records.YarnApplicationState;
+import org.apache.hadoop.yarn.client.ClientRMProxy;
+import org.apache.hadoop.yarn.exceptions.ApplicationNotFoundException;
+import org.apache.hadoop.yarn.exceptions.YarnException;
+import org.apache.hadoop.yarn.util.ConverterUtils;
+
+import com.google.common.annotations.VisibleForTesting;
-@Private
+@InterfaceAudience.LimitedPrivate({"yarn", "mapreduce"})
+  private LogDeletionTask task;
+    private ApplicationClientProtocol rmClient = null;
-    public LogDeletionTask(Configuration conf, long retentionSecs) {
+    public LogDeletionTask(Configuration conf, long retentionSecs, ApplicationClientProtocol rmClient) {
+      this.rmClient = rmClient;
-
-            deleteOldLogDirsFrom(userDirPath, cutoffMillis, fs);
+            deleteOldLogDirsFrom(userDirPath, cutoffMillis, fs, rmClient);
-        FileSystem fs) {
+        FileSystem fs, ApplicationClientProtocol rmClient) {
-            if(shouldDeleteLogDir(appDir, cutoffMillis, fs)) {
+            boolean appTerminated =
+                isApplicationTerminated(ConverterUtils.toApplicationId(appDir
+                  .getPath().getName()), rmClient);
+            if(appTerminated && shouldDeleteLogDir(appDir, cutoffMillis, fs)) {
+            } else if (!appTerminated){
+              try {
+                for(FileStatus node: fs.listStatus(appDir.getPath())) {
+                  if(node.getModificationTime() < cutoffMillis) {
+                    try {
+                      fs.delete(node.getPath(), true);
+                    } catch (IOException ex) {
+                      logIOException("Could not delete "+appDir.getPath(), ex);
+                    }
+                  }
+                }
+              } catch(IOException e) {
+                logIOException(
+                  "Error reading the contents of " + appDir.getPath(), e);
+              }
+
+    private static boolean isApplicationTerminated(ApplicationId appId,
+        ApplicationClientProtocol rmClient) throws IOException {
+      ApplicationReport appReport = null;
+      try {
+        appReport =
+            rmClient.getApplicationReport(
+              GetApplicationReportRequest.newInstance(appId))
+              .getApplicationReport();
+      } catch (ApplicationNotFoundException e) {
+        return true;
+      } catch (YarnException e) {
+        throw new IOException(e);
+      }
+      YarnApplicationState currentState = appReport.getYarnApplicationState();
+      return currentState == YarnApplicationState.FAILED
+          || currentState == YarnApplicationState.KILLED
+          || currentState == YarnApplicationState.FINISHED;
+    }
+
+    public ApplicationClientProtocol getRMClient() {
+      return this.rmClient;
+    }
+    stopRMClient();
-  public void refreshLogRetentionSettings() {
+  public void refreshLogRetentionSettings() throws IOException {
+      stopRMClient();
-  private void scheduleLogDeletionTask() {
+  private void scheduleLogDeletionTask() throws IOException {
-    TimerTask task = new LogDeletionTask(conf, retentionSecs);
+    task = new LogDeletionTask(conf, retentionSecs, creatRMClient());
+
+  // Directly create and use ApplicationClientProtocol.
+  // We have already marked ApplicationClientProtocol.getApplicationReport
+  // as @Idempotent, it will automatically take care of RM restart/failover.
+  @VisibleForTesting
+  protected ApplicationClientProtocol creatRMClient() throws IOException {
+    return ClientRMProxy.createRMProxy(getConfig(),
+      ApplicationClientProtocol.class);
+  }
+
+  @VisibleForTesting
+  protected void stopRMClient() {
+    if (task != null && task.getRMClient() != null) {
+      RPC.stopProxy(task.getRMClient());
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS79 INS83 INS42 INS23 INS31 INS31 INS40 INS4 INS83 INS43 INS59 INS23 INS31 INS31 INS43 INS43 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS45 INS45 INS42 INS42 INS83 INS43 INS59 INS44 INS44 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS8 INS21 INS42 INS42 INS21 UPD42 MOV42 INS42 INS42 INS41 INS42 INS25 INS42 INS42 INS33 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS60 INS41 INS42 INS41 INS32 INS7 INS32 INS27 INS8 INS42 INS7 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS12 INS43 INS59 INS27 INS22 INS42 INS21 INS42 INS14 INS42 INS42 INS32 INS57 INS27 INS27 INS21 INS22 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS27 INS27 INS52 INS42 INS32 MOV43 MOV42 MOV42 INS32 INS42 INS43 INS42 INS33 INS32 INS33 INS32 INS52 INS42 INS7 INS43 INS42 INS41 INS43 INS42 INS53 INS42 INS42 INS27 INS27 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS14 INS42 INS40 INS42 INS40 INS42 INS42 INS32 INS42 INS43 INS42 INS60 INS42 INS42 INS32 INS42 INS39 INS59 INS27 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV32 INS38 INS8 INS42 INS32 INS42 INS42 INS54 INS42 INS42 INS32 INS8 INS12 INS32 INS42 INS70 INS44 INS8 INS42 INS42 INS44 INS32 INS8 INS43 INS42 INS21 INS43 INS42 INS42 INS42 INS32 INS25 INS42 INS32 INS42 INS42 INS42 INS27 INS8 INS42 INS27 INS42 INS32 INS42 INS54 INS45 INS32 INS42 INS42 INS8 INS12 INS42 INS42 INS21 INS44 INS8 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS9 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS45 INS32 INS42 INS42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60