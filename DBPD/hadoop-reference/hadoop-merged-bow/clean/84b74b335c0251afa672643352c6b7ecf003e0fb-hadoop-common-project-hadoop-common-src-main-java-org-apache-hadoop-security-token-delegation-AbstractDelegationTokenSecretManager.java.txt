HDFS-15447 RBF: Add top real owners metrics for delegation tokens (#2110)


+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import org.apache.hadoop.metrics2.util.Metrics2Util.NameValuePair;
+import org.apache.hadoop.metrics2.util.Metrics2Util.TopN;
-  
+
+  /**
+   * Map of token real owners to its token count. This is used to generate
+   * metrics of top users by owned tokens.
+   */
+  protected final Map<String, Long> tokenOwnerStats = new ConcurrentHashMap<>();
+
+    addTokenForOwnerStats(ident);
+      addTokenForOwnerStats(identifier);
+    removeTokenForOwnerStats(id);
+          removeTokenForOwnerStats(entry.getKey());
+  /**
+   * Return top token real owners list as well as the tokens count.
+   *
+   * @param n top number of users
+   * @return map of owners to counts
+   */
+  public List<NameValuePair> getTopTokenRealOwners(int n) {
+    n = Math.min(n, tokenOwnerStats.size());
+    if (n == 0) {
+      return new ArrayList<>();
+    }
+
+    TopN topN = new TopN(n);
+    for (Map.Entry<String, Long> entry : tokenOwnerStats.entrySet()) {
+      topN.offer(new NameValuePair(
+          entry.getKey(), entry.getValue()));
+    }
+
+    List<NameValuePair> list = new ArrayList<>();
+    while (!topN.isEmpty()) {
+      list.add(topN.poll());
+    }
+    Collections.reverse(list);
+    return list;
+  }
+
+  /**
+   * Return the real owner for a token. If this is a token from a proxy user,
+   * the real/effective user will be returned.
+   *
+   * @param id
+   * @return real owner
+   */
+  private String getTokenRealOwner(TokenIdent id) {
+    String realUser;
+    if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {
+      realUser = id.getRealUser().toString();
+    } else {
+      // if there is no real user -> this is a non proxy user
+      // the user itself is the real owner
+      realUser = id.getUser().getUserName();
+    }
+    return realUser;
+  }
+
+  /**
+   * Add token stats to the owner to token count mapping.
+   *
+   * @param id
+   */
+  private void addTokenForOwnerStats(TokenIdent id) {
+    String realOwner = getTokenRealOwner(id);
+    tokenOwnerStats.put(realOwner,
+        tokenOwnerStats.getOrDefault(realOwner, 0L)+1);
+  }
+
+  /**
+   * Remove token stats to the owner to token count mapping.
+   *
+   * @param id
+   */
+  private void removeTokenForOwnerStats(TokenIdent id) {
+    String realOwner = getTokenRealOwner(id);
+    if (tokenOwnerStats.containsKey(realOwner)) {
+      // unlikely to be less than 1 but in case
+      if (tokenOwnerStats.get(realOwner) <= 1) {
+        tokenOwnerStats.remove(realOwner);
+      } else {
+        tokenOwnerStats.put(realOwner, tokenOwnerStats.get(realOwner)-1);
+      }
+    }
+  }
+
+  /**
+   * This method syncs token information from currentTokens to tokenOwnerStats.
+   * It is used when the currentTokens is initialized or refreshed. This is
+   * called from a single thread thus no synchronization is needed.
+   */
+  protected void syncTokenOwnerStats() {
+    tokenOwnerStats.clear();
+    for (TokenIdent id : currentTokens.keySet()) {
+      addTokenForOwnerStats(id);
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS65 INS43 INS43 INS43 INS42 INS14 INS21 INS21 INS65 INS65 INS65 INS43 INS43 INS39 INS42 INS21 INS25 INS60 INS70 INS60 INS61 INS21 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS25 INS41 INS65 INS65 INS43 INS42 INS60 INS21 INS65 INS65 INS43 INS42 INS60 INS25 INS65 INS21 INS70 INS66 INS66 INS42 INS42 INS42 INS74 INS32 INS32 INS66 INS42 INS66 INS66 INS42 INS42 INS7 INS27 INS8 INS43 INS59 INS44 INS32 INS8 INS74 INS59 INS38 INS8 INS32 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS66 INS42 INS42 INS43 INS59 INS32 INS66 INS42 INS42 INS43 INS59 INS32 INS8 INS66 INS66 INS66 INS32 INS44 INS32 INS8 INS43 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS34 INS41 INS42 INS42 INS14 INS74 INS42 INS42 INS42 INS21 INS43 INS43 INS42 INS14 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS27 INS38 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS25 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS32 INS14 INS43 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS74 INS42 INS42 INS32 INS32 INS33 INS32 INS7 INS7 INS42 INS42 INS32 INS34 INS42 INS42 INS27 INS8 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS74 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS32 INS34 INS21 INS21 INS42 INS42 INS43 INS43 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42