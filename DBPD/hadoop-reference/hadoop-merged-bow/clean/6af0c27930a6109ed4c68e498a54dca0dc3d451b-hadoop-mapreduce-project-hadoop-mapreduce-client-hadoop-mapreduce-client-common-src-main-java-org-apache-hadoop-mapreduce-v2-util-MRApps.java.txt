Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1171315 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.URI;
+import java.util.HashMap;
+import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.classification.InterfaceStability.Unstable;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.mapreduce.filecache.DistributedCache;
+import org.apache.hadoop.yarn.api.records.LocalResource;
+import org.apache.hadoop.yarn.api.records.LocalResourceType;
+import org.apache.hadoop.yarn.api.records.LocalResourceVisibility;
+import org.apache.hadoop.yarn.util.BuilderUtils;
+@Private
+@Unstable
+  
+
+
+  private static long[] parseTimeStamps(String[] strs) {
+    if (null == strs) {
+      return null;
+    }
+    long[] result = new long[strs.length];
+    for(int i=0; i < strs.length; ++i) {
+      result[i] = Long.parseLong(strs[i]);
+    }
+    return result;
+  }
+
+  public static void setupDistributedCache( 
+      Configuration conf, 
+      Map<String, LocalResource> localResources,
+      Map<String, String> env) 
+  throws IOException {
+    
+    // Cache archives
+    parseDistributedCacheArtifacts(conf, localResources, env, 
+        LocalResourceType.ARCHIVE, 
+        DistributedCache.getCacheArchives(conf), 
+        parseTimeStamps(DistributedCache.getArchiveTimestamps(conf)), 
+        getFileSizes(conf, MRJobConfig.CACHE_ARCHIVES_SIZES), 
+        DistributedCache.getArchiveVisibilities(conf), 
+        DistributedCache.getArchiveClassPaths(conf));
+    
+    // Cache files
+    parseDistributedCacheArtifacts(conf, 
+        localResources, env, 
+        LocalResourceType.FILE, 
+        DistributedCache.getCacheFiles(conf),
+        parseTimeStamps(DistributedCache.getFileTimestamps(conf)),
+        getFileSizes(conf, MRJobConfig.CACHE_FILES_SIZES),
+        DistributedCache.getFileVisibilities(conf),
+        DistributedCache.getFileClassPaths(conf));
+  }
+
+  // TODO - Move this to MR!
+  // Use TaskDistributedCacheManager.CacheFiles.makeCacheFiles(URI[], 
+  // long[], boolean[], Path[], FileType)
+  private static void parseDistributedCacheArtifacts(
+      Configuration conf,
+      Map<String, LocalResource> localResources,
+      Map<String, String> env,
+      LocalResourceType type,
+      URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[], 
+      Path[] pathsToPutOnClasspath) throws IOException {
+
+    if (uris != null) {
+      // Sanity check
+      if ((uris.length != timestamps.length) || (uris.length != sizes.length) ||
+          (uris.length != visibilities.length)) {
+        throw new IllegalArgumentException("Invalid specification for " +
+            "distributed-cache artifacts of type " + type + " :" +
+            " #uris=" + uris.length +
+            " #timestamps=" + timestamps.length +
+            " #visibilities=" + visibilities.length
+            );
+      }
+      
+      Map<String, Path> classPaths = new HashMap<String, Path>();
+      if (pathsToPutOnClasspath != null) {
+        for (Path p : pathsToPutOnClasspath) {
+          FileSystem remoteFS = p.getFileSystem(conf);
+          p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),
+              remoteFS.getWorkingDirectory()));
+          classPaths.put(p.toUri().getPath().toString(), p);
+        }
+      }
+      for (int i = 0; i < uris.length; ++i) {
+        URI u = uris[i];
+        Path p = new Path(u);
+        FileSystem remoteFS = p.getFileSystem(conf);
+        p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),
+            remoteFS.getWorkingDirectory()));
+        // Add URI fragment or just the filename
+        Path name = new Path((null == u.getFragment())
+          ? p.getName()
+          : u.getFragment());
+        if (name.isAbsolute()) {
+          throw new IllegalArgumentException("Resource name must be relative");
+        }
+        String linkName = name.toUri().getPath();
+        localResources.put(
+            linkName,
+            BuilderUtils.newLocalResource(
+                p.toUri(), type, 
+                visibilities[i]
+                  ? LocalResourceVisibility.PUBLIC
+                  : LocalResourceVisibility.PRIVATE,
+                sizes[i], timestamps[i])
+        );
+        if (classPaths.containsKey(u.getPath())) {
+          MRApps.addToClassPath(env, linkName);
+        }
+      }
+    }
+  }
+  
+  // TODO - Move this to MR!
+  private static long[] getFileSizes(Configuration conf, String key) {
+    String[] strs = conf.getStrings(key);
+    if (strs == null) {
+      return null;
+    }
+    long[] result = new long[strs.length];
+    for(int i=0; i < strs.length; ++i) {
+      result[i] = Long.parseLong(strs[i]);
+    }
+    return result;
+  }
+  
+
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS78 INS78 INS31 INS31 INS31 INS31 INS42 INS42 INS83 INS83 INS5 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS5 INS42 INS44 INS44 INS8 INS39 INS85 INS5 INS42 INS25 INS60 INS24 INS41 INS43 INS42 INS74 INS42 INS74 INS42 INS42 INS21 INS21 INS43 INS42 INS74 INS42 INS74 INS42 INS43 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS39 INS42 INS85 INS5 INS42 INS42 INS25 INS39 INS85 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS24 INS41 INS43 INS85 INS27 INS8 INS5 INS59 INS58 INS27 INS38 INS8 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS32 INS32 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS43 INS85 INS39 INS85 INS39 INS85 INS43 INS85 INS27 INS8 INS42 INS42 INS5 INS59 INS27 INS8 INS5 INS59 INS58 INS27 INS38 INS8 INS42 INS42 INS33 INS42 INS41 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS25 INS60 INS25 INS24 INS43 INS85 INS42 INS32 INS42 INS33 INS41 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS33 INS5 INS40 INS42 INS34 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS74 INS59 INS27 INS8 INS58 INS27 INS38 INS8 INS42 INS42 INS42 INS42 INS33 INS5 INS40 INS42 INS34 INS7 INS39 INS85 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS36 INS36 INS53 INS43 INS43 INS43 INS42 INS14 INS42 INS33 INS70 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS60 INS21 INS60 INS25 INS60 INS21 INS25 INS39 INS85 INS2 INS32 INS42 INS42 INS42 INS42 INS2 INS27 INS27 INS27 INS14 INS42 INS42 INS42 INS74 INS44 INS42 INS8 INS42 INS34 INS43 INS59 INS43 INS59 INS43 INS59 INS7 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS27 INS43 INS43 INS43 INS43 INS42 INS60 INS21 INS21 INS42 INS42 INS2 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS27 INS42 INS45 INS45 INS40 INS45 INS40 INS45 INS40 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS16 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS16 INS2 INS2 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS36 INS32 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS2 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42