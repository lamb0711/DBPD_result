YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)

+import org.apache.commons.lang3.StringUtils;
+import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenIdentifier;
+
+import org.apache.hadoop.io.DataOutputBuffer;
+import org.apache.hadoop.security.Credentials;
+import org.apache.hadoop.security.SecurityUtil;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.security.token.TokenIdentifier;
-import org.apache.hadoop.util.StringUtils;
+import org.apache.hadoop.yarn.security.AMRMTokenIdentifier;
+import org.apache.hadoop.yarn.service.exceptions.BadClusterStateException;
-import org.apache.hadoop.yarn.service.utils.SliderFileSystem;
-import org.apache.hadoop.yarn.service.exceptions.BadClusterStateException;
+import org.apache.hadoop.yarn.service.utils.SliderFileSystem;
+import java.io.File;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.nio.ByteBuffer;
+import java.security.PrivilegedExceptionAction;
+import java.util.Iterator;
+import static org.apache.hadoop.yarn.service.conf.YarnServiceConstants.KEYTAB_LOCATION;
+
-    //TODO Deprecate slider conf, make sure works with yarn conf
-    if (UserGroupInformation.isSecurityEnabled()) {
-      UserGroupInformation.setConfiguration(conf);
-    }
-    LOG.info("Login user is {}", UserGroupInformation.getLoginUser());
-
+    if (UserGroupInformation.isSecurityEnabled()) {
+      context.tokens = recordTokensForContainers();
+      doSecureLogin();
+    }
+  // Record the tokens and use them for launching containers.
+  // e.g. localization requires the hdfs delegation tokens
+  private ByteBuffer recordTokensForContainers() throws IOException {
+    Credentials copy = new Credentials(UserGroupInformation.getCurrentUser()
+        .getCredentials());
+    DataOutputBuffer dob = new DataOutputBuffer();
+    try {
+      copy.writeTokenStorageToStream(dob);
+    } finally {
+      dob.close();
+    }
+    // Now remove the AM->RM token so that task containers cannot access it.
+    Iterator<Token<?>> iter = copy.getAllTokens().iterator();
+    while (iter.hasNext()) {
+      Token<?> token = iter.next();
+      LOG.info(token.toString());
+      if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {
+        iter.remove();
+      }
+    }
+    return ByteBuffer.wrap(dob.getData(), 0, dob.getLength());
+  }
+
+  // 1. First try to use user specified keytabs
+  // 2. If not specified, then try to use pre-installed keytab at localhost
+  // 3. strip off hdfs delegation tokens to ensure use keytab to talk to hdfs
+  private void doSecureLogin()
+      throws IOException, URISyntaxException {
+    // read the localized keytab specified by user
+    File keytab = new File(String.format(KEYTAB_LOCATION,
+        context.service.getName()));
+    if (!keytab.exists()) {
+      LOG.info("No keytab localized at " + keytab);
+      // Check if there exists a pre-installed keytab at host
+      String preInstalledKeytab = context.service.getKerberosPrincipal()
+          .getKeytab();
+      if (!StringUtils.isEmpty(preInstalledKeytab)) {
+        URI uri = new URI(preInstalledKeytab);
+        if (uri.getScheme().equals("file")) {
+          keytab = new File(uri);
+          LOG.info("Using pre-installed keytab from localhost: " +
+              preInstalledKeytab);
+        }
+      }
+    }
+    if (!keytab.exists()) {
+      LOG.info("No keytab exists: " + keytab);
+      return;
+    }
+    String principal = context.service.getKerberosPrincipal()
+        .getPrincipalName();
+    if (StringUtils.isEmpty((principal))) {
+      principal = UserGroupInformation.getLoginUser().getShortUserName();
+      LOG.info("No principal name specified.  Will use AM " +
+          "login identity {} to attempt keytab-based login", principal);
+    }
+
+    Credentials credentials = UserGroupInformation.getCurrentUser()
+        .getCredentials();
+    LOG.info("User before logged in is: " + UserGroupInformation
+        .getCurrentUser());
+    String principalName = SecurityUtil.getServerPrincipal(principal,
+        ServiceUtils.getLocalHostName(getConfig()));
+    UserGroupInformation.loginUserFromKeytab(principalName,
+        keytab.getAbsolutePath());
+    // add back the credentials
+    UserGroupInformation.getCurrentUser().addCredentials(credentials);
+    LOG.info("User after logged in is: " + UserGroupInformation
+        .getCurrentUser());
+    context.principal = principalName;
+    context.keytab = keytab.getAbsolutePath();
+    removeHdfsDelegationToken(UserGroupInformation.getLoginUser());
+  }
+
+  // Remove HDFS delegation token from login user and ensure AM to use keytab
+  // to talk to hdfs
+  private static void removeHdfsDelegationToken(UserGroupInformation user) {
+    if (!user.isFromKeytab()) {
+      LOG.error("AM is not holding on a keytab in a secure deployment:" +
+          " service will fail when tokens expire");
+    }
+    Credentials credentials = user.getCredentials();
+    Iterator<Token<? extends TokenIdentifier>> iter =
+        credentials.getAllTokens().iterator();
+    while (iter.hasNext()) {
+      Token<? extends TokenIdentifier> token = iter.next();
+      if (token.getKind().equals(
+          DelegationTokenIdentifier.HDFS_DELEGATION_KIND)) {
+        LOG.info("Remove HDFS delegation token {}.", token);
+        iter.remove();
+      }
+    }
+  }
+
+  protected void serviceStart() throws Exception {
+    LOG.info("Starting service as user " + UserGroupInformation
+        .getCurrentUser());
+    UserGroupInformation.getLoginUser().doAs(
+        (PrivilegedExceptionAction<Void>) () -> {
+          super.serviceStart();
+          return null;
+        }
+    );
+  }
+  @Override
-    StringUtils.startupShutdownMessage(ServiceMaster.class, args, LOG);
+    org.apache.hadoop.util.StringUtils
+        .startupShutdownMessage(ServiceMaster.class, args, LOG);

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 MOV25 INS83 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS60 INS60 INS54 INS60 INS61 INS41 INS42 INS42 INS60 INS25 INS25 INS60 INS25 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS21 MOV21 INS43 INS42 INS25 INS60 INS60 INS61 INS42 INS42 INS21 INS21 INS43 INS59 INS43 INS59 INS8 INS8 INS74 INS59 INS32 INS8 INS32 INS43 INS59 INS38 INS8 INS38 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS32 INS7 INS7 INS42 INS38 INS8 INS43 INS59 INS74 INS59 INS32 INS8 INS32 INS32 INS21 INS42 INS42 INS14 INS42 INS42 INS14 INS21 INS21 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS21 INS25 INS42 INS42 INS32 INS34 INS32 INS42 INS42 INS14 INS32 INS21 INS60 INS25 INS32 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS36 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS27 INS40 INS42 INS40 INS32 UPD42 INS32 INS21 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS27 INS32 INS42 INS11 INS40 INS7 INS43 INS32 INS43 INS32 INS32 INS42 INS43 INS76 INS32 INS42 INS74 INS59 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS32 INS42 INS42 INS7 INS32 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS76 INS32 INS42 INS74 INS59 INS32 INS8 INS45 INS32 INS42 INS42 INS74 INS86 INS40 INS32 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS76 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS40 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS60 INS25 INS42 INS42 INS27 INS40 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS43 INS42 INS42 INS43 INS76 INS42 INS32 INS32 INS42 INS40 INS21 INS21 INS42 INS42 INS43 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS45 INS42 INS32 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS21 INS41 INS42 INS42 INS40 INS42 INS42 INS42 INS14 INS32 INS42 INS45 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS48 INS33 INS43 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS43 INS42 INS45 INS42 INS42 DEL42 DEL42 DEL42 DEL45 DEL42