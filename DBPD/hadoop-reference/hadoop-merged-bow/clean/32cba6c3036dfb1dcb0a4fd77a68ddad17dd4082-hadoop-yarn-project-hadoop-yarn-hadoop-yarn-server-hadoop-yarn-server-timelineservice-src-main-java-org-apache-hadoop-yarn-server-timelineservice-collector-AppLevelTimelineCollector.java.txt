YARN-5355: YARN Timeline Service v.2: alpha 2 (varunsaxena)

-import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import java.util.concurrent.Future;
+
+import org.apache.hadoop.security.token.Token;
-import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntities;
-import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity;
-import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntityType;
+import org.apache.hadoop.yarn.security.client.TimelineDelegationTokenIdentifier;
+import com.google.common.annotations.VisibleForTesting;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-
-  private final static int AGGREGATION_EXECUTOR_NUM_THREADS = 1;
-  private final static int AGGREGATION_EXECUTOR_EXEC_INTERVAL_SECS = 15;
-  private static Set<String> entityTypesSkipAggregation
-      = initializeSkipSet();
-
+  private final String appUser;
-  private ScheduledThreadPoolExecutor appAggregationExecutor;
-  private AppLevelAggregator appAggregator;
+  private Token<TimelineDelegationTokenIdentifier> delegationTokenForApp;
+  private long tokenMaxDate = 0;
+  private String tokenRenewer;
+  private Future<?> renewalOrRegenerationFuture;
+    this(appId, null);
+  }
+
+  public AppLevelTimelineCollector(ApplicationId appId, String user) {
+    this.appUser = user;
-  private static Set<String> initializeSkipSet() {
-    Set<String> result = new HashSet<>();
-    result.add(TimelineEntityType.YARN_APPLICATION.toString());
-    result.add(TimelineEntityType.YARN_FLOW_RUN.toString());
-    result.add(TimelineEntityType.YARN_FLOW_ACTIVITY.toString());
-    return result;
+  public UserGroupInformation getCurrentUser() {
+    return currentUser;
+  }
+
+  public String getAppUser() {
+    return appUser;
+  }
+
+  void setDelegationTokenAndFutureForApp(
+      Token<TimelineDelegationTokenIdentifier> token,
+      Future<?> appRenewalOrRegenerationFuture, long tknMaxDate,
+      String renewer) {
+    this.delegationTokenForApp = token;
+    this.tokenMaxDate = tknMaxDate;
+    this.tokenRenewer = renewer;
+    this.renewalOrRegenerationFuture = appRenewalOrRegenerationFuture;
+  }
+
+  void setRenewalOrRegenerationFutureForApp(
+      Future<?> appRenewalOrRegenerationFuture) {
+    this.renewalOrRegenerationFuture = appRenewalOrRegenerationFuture;
+  }
+
+  void cancelRenewalOrRegenerationFutureForApp() {
+    if (renewalOrRegenerationFuture != null &&
+        !renewalOrRegenerationFuture.isDone()) {
+      renewalOrRegenerationFuture.cancel(true);
+    }
+  }
+
+  long getAppDelegationTokenMaxDate() {
+    return tokenMaxDate;
+  }
+
+  String getAppDelegationTokenRenewer() {
+    return tokenRenewer;
+  }
+
+  @VisibleForTesting
+  public Token<TimelineDelegationTokenIdentifier> getDelegationTokenForApp() {
+    return this.delegationTokenForApp;
-    // Launch the aggregation thread
-    appAggregationExecutor = new ScheduledThreadPoolExecutor(
-        AppLevelTimelineCollector.AGGREGATION_EXECUTOR_NUM_THREADS,
-        new ThreadFactoryBuilder()
-            .setNameFormat("TimelineCollector Aggregation thread #%d")
-            .build());
-    appAggregator = new AppLevelAggregator();
-    appAggregationExecutor.scheduleAtFixedRate(appAggregator,
-        AppLevelTimelineCollector.AGGREGATION_EXECUTOR_EXEC_INTERVAL_SECS,
-        AppLevelTimelineCollector.AGGREGATION_EXECUTOR_EXEC_INTERVAL_SECS,
-        TimeUnit.SECONDS);
-    appAggregationExecutor.shutdown();
-    if (!appAggregationExecutor.awaitTermination(10, TimeUnit.SECONDS)) {
-      LOG.info("App-level aggregator shutdown timed out, shutdown now. ");
-      appAggregationExecutor.shutdownNow();
-    }
-    // Perform one round of aggregation after the aggregation executor is done.
-    appAggregator.aggregate();
+    cancelRenewalOrRegenerationFutureForApp();
-
-  @Override
-  protected Set<String> getEntityTypesSkipAggregation() {
-    return entityTypesSkipAggregation;
-  }
-
-  private class AppLevelAggregator implements Runnable {
-
-    private void aggregate() {
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("App-level real-time aggregating");
-      }
-      if (!isReadyToAggregate()) {
-        LOG.warn("App-level collector is not ready, skip aggregation. ");
-        return;
-      }
-      try {
-        TimelineCollectorContext currContext = getTimelineEntityContext();
-        Map<String, AggregationStatusTable> aggregationGroups
-            = getAggregationGroups();
-        if (aggregationGroups == null
-            || aggregationGroups.isEmpty()) {
-          LOG.debug("App-level collector is empty, skip aggregation. ");
-          return;
-        }
-        TimelineEntity resultEntity = TimelineCollector.aggregateWithoutGroupId(
-            aggregationGroups, currContext.getAppId(),
-            TimelineEntityType.YARN_APPLICATION.toString());
-        TimelineEntities entities = new TimelineEntities();
-        entities.addEntity(resultEntity);
-        putEntitiesAsync(entities, currentUser);
-      } catch (Exception e) {
-        LOG.error("Error aggregating timeline metrics", e);
-      }
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("App-level real-time aggregation complete");
-      }
-    }
-
-    @Override
-    public void run() {
-      aggregate();
-    }
-  }
-

MOV26 MOV26 MOV26 MOV23 MOV23 MOV23 MOV31 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 MOV43 UPD74 INS39 MOV43 INS83 INS74 INS59 INS83 INS42 INS44 INS8 INS44 INS83 INS43 INS42 INS8 INS83 MOV43 INS42 INS8 MOV39 INS42 INS44 INS44 INS44 INS44 MOV8 INS39 INS42 INS44 MOV39 INS42 INS8 INS39 INS42 INS8 MOV43 INS42 INS8 INS78 INS83 INS74 INS42 INS8 MOV78 INS83 INS39 INS42 MOV43 INS8 MOV78 UPD83 UPD42 MOV43 UPD42 UPD43 INS43 UPD42 UPD42 INS34 UPD42 UPD43 MOV43 INS76 INS42 INS43 INS42 INS17 INS43 INS42 INS21 INS42 INS41 MOV41 INS74 INS42 INS74 INS42 INS39 INS42 MOV43 INS42 MOV21 MOV21 INS74 INS42 INS21 MOV25 INS41 INS41 INS42 INS43 INS43 INS41 MOV21 MOV21 UPD42 INS42 UPD42 UPD42 MOV42 INS42 INS33 INS42 INS7 INS42 UPD42 INS43 INS43 INS43 INS76 INS7 INS7 INS7 INS7 UPD43 MOV43 INS76 INS7 UPD27 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS22 INS22 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 UPD42 INS22 INS42 UPD27 INS38 INS52 INS42 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS9 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL39 DEL34 DEL83 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL40 DEL32 DEL38 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL78 DEL83 DEL74 DEL42 DEL42 DEL41 DEL32 DEL45 DEL41 DEL83 DEL83 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL40 DEL43 DEL14 DEL42 DEL45 DEL32 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL31 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL32 DEL59 DEL60 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL55