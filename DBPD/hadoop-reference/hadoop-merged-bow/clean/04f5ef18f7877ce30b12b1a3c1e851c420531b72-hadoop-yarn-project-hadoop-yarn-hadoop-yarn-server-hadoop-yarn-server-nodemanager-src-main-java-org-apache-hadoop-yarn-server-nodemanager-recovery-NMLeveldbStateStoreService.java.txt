YARN-2079. Recover NonAggregatingLogHandler state upon nodemanager restart. (Contributed by Jason Lowe)

+import org.apache.hadoop.yarn.proto.YarnServerNodemanagerRecoveryProtos.LogDeleterProto;
+  private static final String LOG_DELETER_KEY_PREFIX = "LogDeleters/";
+
+  public RecoveredLogDeleterState loadLogDeleterState() throws IOException {
+    RecoveredLogDeleterState state = new RecoveredLogDeleterState();
+    state.logDeleterMap = new HashMap<ApplicationId, LogDeleterProto>();
+    LeveldbIterator iter = null;
+    try {
+      iter = new LeveldbIterator(db);
+      iter.seek(bytes(LOG_DELETER_KEY_PREFIX));
+      final int logDeleterKeyPrefixLength = LOG_DELETER_KEY_PREFIX.length();
+      while (iter.hasNext()) {
+        Entry<byte[], byte[]> entry = iter.next();
+        String fullKey = asString(entry.getKey());
+        if (!fullKey.startsWith(LOG_DELETER_KEY_PREFIX)) {
+          break;
+        }
+
+        String appIdStr = fullKey.substring(logDeleterKeyPrefixLength);
+        ApplicationId appId = null;
+        try {
+          appId = ConverterUtils.toApplicationId(appIdStr);
+        } catch (IllegalArgumentException e) {
+          LOG.warn("Skipping unknown log deleter key " + fullKey);
+          continue;
+        }
+
+        LogDeleterProto proto = LogDeleterProto.parseFrom(entry.getValue());
+        state.logDeleterMap.put(appId, proto);
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    } finally {
+      if (iter != null) {
+        iter.close();
+      }
+    }
+    return state;
+  }
+
+  @Override
+  public void storeLogDeleter(ApplicationId appId, LogDeleterProto proto)
+      throws IOException {
+    String key = getLogDeleterKey(appId);
+    try {
+      db.put(bytes(key), proto.toByteArray());
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public void removeLogDeleter(ApplicationId appId) throws IOException {
+    String key = getLogDeleterKey(appId);
+    try {
+      db.delete(bytes(key));
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  private String getLogDeleterKey(ApplicationId appId) {
+    return LOG_DELETER_KEY_PREFIX + appId;
+  }
+
+  @Override
-  

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS60 INS21 INS60 INS54 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS41 INS43 INS59 INS7 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS8 INS12 INS42 INS27 INS42 INS42 INS14 INS40 INS14 INS42 INS42 INS33 INS21 INS21 INS60 INS61 INS44 INS8 INS25 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS43 INS74 INS7 INS32 INS83 INS39 INS59 INS32 INS8 INS43 INS42 INS53 INS27 INS8 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS54 INS60 INS21 INS42 INS14 INS42 INS33 INS21 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS5 INS5 INS42 INS32 INS42 INS42 INS32 INS32 INS10 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS18 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS42