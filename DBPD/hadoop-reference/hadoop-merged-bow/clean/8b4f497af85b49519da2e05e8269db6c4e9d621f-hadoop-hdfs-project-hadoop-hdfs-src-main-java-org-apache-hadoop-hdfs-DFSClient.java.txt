HDFS-1973. HA: HDFS clients must handle namenode failover and switch over to the new active namenode. (atm)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1179896 13f79535-47bb-0310-9956-ffa450edef68

-
+import java.net.URI;
-
+import org.apache.hadoop.io.retry.FailoverProxyProvider;
+import org.apache.hadoop.io.retry.RetryPolicies;
+import org.apache.hadoop.io.retry.RetryProxy;
+import org.apache.hadoop.util.ReflectionUtils;
-        
+
+  
+  public DFSClient(InetSocketAddress address, Configuration conf) throws IOException {
+    this(NameNode.getUri(address), conf);
+  }
-  public DFSClient(InetSocketAddress nameNodeAddr, Configuration conf
+  public DFSClient(URI nameNodeAddr, Configuration conf
-  public DFSClient(InetSocketAddress nameNodeAddr, Configuration conf,
+  public DFSClient(URI nameNodeAddr, Configuration conf,
-
+  
-  DFSClient(InetSocketAddress nameNodeAddr, ClientProtocol rpcNamenode,
+  DFSClient(URI nameNodeUri, ClientProtocol rpcNamenode,
-    final String authority = nameNodeAddr == null? "null":
-        nameNodeAddr.getHostName() + ":" + nameNodeAddr.getPort();
+    
+    final String authority = nameNodeUri == null? "null": nameNodeUri.getAuthority();
+    
-    if (nameNodeAddr != null && rpcNamenode == null) {
-      this.namenode = DFSUtil.createNamenode(nameNodeAddr, conf);
-    } else if (nameNodeAddr == null && rpcNamenode != null) {
+    
+    Class<?> failoverProxyProviderClass = getFailoverProxyProviderClass(authority, conf);
+    
+    if (nameNodeUri != null && failoverProxyProviderClass != null) {
+      FailoverProxyProvider failoverProxyProvider = (FailoverProxyProvider)
+          ReflectionUtils.newInstance(failoverProxyProviderClass, conf);
+      this.namenode = (ClientProtocol)RetryProxy.create(ClientProtocol.class,
+          failoverProxyProvider, RetryPolicies.failoverOnNetworkException(1));
+    } else if (nameNodeUri != null && rpcNamenode == null) {
+      this.namenode = DFSUtil.createNamenode(NameNode.getAddress(nameNodeUri), conf);
+    } else if (nameNodeUri == null && rpcNamenode != null) {
-          + "nameNodeAddr=" + nameNodeAddr + ", rpcNamenode=" + rpcNamenode);
+          + "nameNodeAddr=" + nameNodeUri + ", rpcNamenode=" + rpcNamenode);
+    }
+  }
+  
+  private Class<?> getFailoverProxyProviderClass(String authority, Configuration conf)
+      throws IOException {
+    String configKey = DFS_CLIENT_FAILOVER_PROXY_PROVIDER_KEY_PREFIX + "." + authority;
+    try {
+      return conf.getClass(configKey, null);
+    } catch (RuntimeException e) {
+      if (e.getCause() instanceof ClassNotFoundException) {
+        throw new IOException("Could not load failover proxy provider class "
+            + conf.get(configKey) + " which is configured for authority " + authority,
+            e);
+      } else {
+        throw e;
+      }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS42 MOV44 INS44 INS43 INS8 INS44 INS83 INS74 INS42 INS44 INS44 INS43 INS8 UPD42 INS43 INS42 INS42 INS17 INS43 INS42 UPD43 UPD43 UPD42 INS60 INS60 INS25 INS43 INS76 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS32 INS42 INS42 UPD42 UPD42 MOV83 MOV43 INS59 INS74 INS59 INS27 INS8 MOV25 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS42 INS42 INS42 MOV42 INS16 INS43 INS76 INS42 INS32 INS27 INS27 INS60 INS21 INS42 INS42 INS27 INS41 INS44 INS8 MOV27 MOV45 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS43 INS59 INS7 INS42 INS45 INS42 INS32 INS43 INS42 INS25 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS11 MOV22 INS11 UPD42 INS42 INS42 INS42 INS33 INS42 INS62 INS8 INS8 INS43 INS32 INS43 INS32 INS22 UPD42 INS32 INS43 INS53 INS53 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS57 INS42 INS32 INS52 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS43 INS42 INS42 INS34 INS42 INS42 UPD42 MOV42 UPD42 INS43 INS27 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 DEL32 DEL45 DEL32 DEL27 DEL16 DEL59 DEL60