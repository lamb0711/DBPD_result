YARN-7939.  Added support to upgrade a component instance.
            Contributed by Chandni Singh

+import com.google.common.collect.Lists;
+import org.apache.hadoop.yarn.service.api.records.Container;
+import org.apache.hadoop.yarn.service.api.records.ContainerState;
+import org.apache.hadoop.yarn.service.conf.RestApiConstants;
+import org.apache.hadoop.yarn.service.utils.ServiceApiUtil;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
-      Service app = ugi.doAs(new PrivilegedExceptionAction<Service>() {
-        @Override
-        public Service run() throws IOException, YarnException {
-          ServiceClient sc = getServiceClient();
-          sc.init(YARN_CONFIG);
-          sc.start();
-          Service app = sc.getStatus(appName);
-          sc.close();
-          return app;
-        }
-      });
+      Service app = getServiceFromClient(ugi, appName);
+      // If an UPGRADE is requested
+      if (updateServiceData.getState() != null && (
+          updateServiceData.getState() == ServiceState.UPGRADING ||
+              updateServiceData.getState() ==
+                  ServiceState.UPGRADING_AUTO_FINALIZE)) {
+        return upgradeService(updateServiceData, ugi);
+      }
+
-
-      // If an UPGRADE is requested
-      if (updateServiceData.getState() != null &&
-          updateServiceData.getState() == ServiceState.UPGRADING) {
-        return upgradeService(updateServiceData, ugi);
-      }
+  @PUT
+  @Path(COMP_INSTANCE_LONG_PATH)
+  @Consumes({MediaType.APPLICATION_JSON})
+  @Produces({RestApiConstants.MEDIA_TYPE_JSON_UTF8, MediaType.TEXT_PLAIN})
+  public Response updateComponentInstance(@Context HttpServletRequest request,
+      @PathParam(SERVICE_NAME) String serviceName,
+      @PathParam(COMPONENT_NAME) String componentName,
+      @PathParam(COMP_INSTANCE_NAME) String compInstanceName,
+      Container reqContainer) {
+
+    try {
+      UserGroupInformation ugi = getProxyUser(request);
+      LOG.info("PUT: update component instance {} for component = {}" +
+              " service = {} user = {}", compInstanceName, componentName,
+          serviceName, ugi);
+      if (reqContainer == null) {
+        throw new YarnException("No container data provided.");
+      }
+      Service service = getServiceFromClient(ugi, serviceName);
+      Component component = service.getComponent(componentName);
+      if (component == null) {
+        throw new YarnException(String.format(
+            "The component name in the URI path (%s) is invalid.",
+            componentName));
+      }
+
+      Container liveContainer = component.getComponentInstance(
+          compInstanceName);
+      if (liveContainer == null) {
+        throw new YarnException(String.format(
+            "The component (%s) does not have a component instance (%s).",
+            componentName, compInstanceName));
+      }
+
+      if (reqContainer.getState() != null
+          && reqContainer.getState().equals(ContainerState.UPGRADING)) {
+        return processContainerUpgrade(ugi, service,
+            Lists.newArrayList(liveContainer));
+      }
+    } catch (AccessControlException e) {
+      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());
+    } catch (YarnException e) {
+      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());
+    } catch (IOException | InterruptedException e) {
+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,
+          e.getMessage());
+    } catch (UndeclaredThrowableException e) {
+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,
+          e.getCause().getMessage());
+    }
+    return Response.status(Status.NO_CONTENT).build();
+  }
+
+  @PUT
+  @Path(COMP_INSTANCES_PATH)
+  @Consumes({MediaType.APPLICATION_JSON})
+  @Produces({RestApiConstants.MEDIA_TYPE_JSON_UTF8, MediaType.TEXT_PLAIN})
+  public Response updateComponentInstances(@Context HttpServletRequest request,
+      @PathParam(SERVICE_NAME) String serviceName,
+      List<Container> requestContainers) {
+
+    try {
+      if (requestContainers == null || requestContainers.isEmpty()) {
+        throw new YarnException("No containers provided.");
+      }
+      UserGroupInformation ugi = getProxyUser(request);
+      List<String> toUpgrade = new ArrayList<>();
+      for (Container reqContainer : requestContainers) {
+        if (reqContainer.getState() != null &&
+            reqContainer.getState().equals(ContainerState.UPGRADING)) {
+          toUpgrade.add(reqContainer.getComponentInstanceName());
+        }
+      }
+
+      if (!toUpgrade.isEmpty()) {
+        Service service = getServiceFromClient(ugi, serviceName);
+        LOG.info("PUT: upgrade component instances {} for service = {} " +
+            "user = {}", toUpgrade, serviceName, ugi);
+        List<Container> liveContainers = ServiceApiUtil
+            .getLiveContainers(service, toUpgrade);
+
+        return processContainerUpgrade(ugi, service, liveContainers);
+      }
+    } catch (AccessControlException e) {
+      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());
+    } catch (YarnException e) {
+      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());
+    } catch (IOException | InterruptedException e) {
+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,
+          e.getMessage());
+    } catch (UndeclaredThrowableException e) {
+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,
+          e.getCause().getMessage());
+    }
+    return Response.status(Status.NO_CONTENT).build();
+  }
+
-      sc.actionUpgrade(service);
+      sc.initiateUpgrade(service);
-    LOG.info("Service {} version {} upgrade initialized");
+    LOG.info("Service {} version {} upgrade initialized", service.getName(),
+        service.getVersion());
+  private Response processContainerUpgrade(UserGroupInformation ugi,
+      Service service, List<Container> containers) throws YarnException,
+      IOException, InterruptedException {
+
+    if (service.getState() != ServiceState.UPGRADING) {
+      throw new YarnException(
+          String.format("The upgrade of service %s has not been initiated.",
+              service.getName()));
+    }
+    for (Container liveContainer : containers) {
+      if (liveContainer.getState() != ContainerState.NEEDS_UPGRADE) {
+        // Nothing to upgrade
+        throw new YarnException(String.format(
+            "The component instance (%s) does not need an upgrade.",
+            liveContainer.getComponentInstanceName()));
+      }
+    }
+
+    Integer result = ugi.doAs((PrivilegedExceptionAction<Integer>) () -> {
+      int result1;
+      ServiceClient sc = getServiceClient();
+      sc.init(YARN_CONFIG);
+      sc.start();
+      result1 = sc.actionUpgrade(service, containers);
+      sc.close();
+      return result1;
+    });
+
+    if (result == EXIT_SUCCESS) {
+      ServiceStatus status = new ServiceStatus();
+      status.setDiagnostics(
+          "Upgrading component instances " + containers.stream()
+              .map(Container::getId).collect(Collectors.joining(",")) + ".");
+      return formatResponse(Response.Status.ACCEPTED, status);
+    }
+    // If result is not a success, consider it a no-op
+    return Response.status(Response.Status.NO_CONTENT).build();
+  }
+
+  private Service getServiceFromClient(UserGroupInformation ugi,
+      String serviceName) throws IOException, InterruptedException {
+
+    return ugi.doAs((PrivilegedExceptionAction<Service>) () -> {
+      ServiceClient sc = getServiceClient();
+      sc.init(YARN_CONFIG);
+      sc.start();
+      Service app1 = sc.getStatus(serviceName);
+      sc.close();
+      return app1;
+    });
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 MOV31 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 MOV43 INS43 INS43 INS8 UPD83 MOV43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS42 INS42 INS4 INS42 INS4 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS43 INS42 INS54 INS41 INS42 INS42 INS42 INS42 INS4 INS42 INS4 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS74 INS42 INS54 INS41 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS25 INS70 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS42 INS41 MOV25 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS12 INS12 INS12 INS32 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS8 INS12 INS12 INS12 INS12 INS32 INS42 INS42 INS43 INS43 INS27 INS8 INS44 INS42 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS60 INS21 INS25 INS60 INS60 INS25 INS60 INS25 INS25 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS32 INS42 INS42 INS42 INS25 INS60 INS60 INS70 INS25 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS40 INS53 INS43 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS41 INS32 INS42 INS42 INS42 INS11 MOV43 INS43 INS59 INS32 INS27 INS8 MOV43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS42 INS41 INS43 INS42 INS41 INS84 INS42 INS41 INS43 INS42 INS41 INS42 INS42 INS40 INS27 INS8 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS38 INS8 INS43 INS42 INS41 INS43 INS42 INS41 INS84 INS42 INS41 INS43 INS42 INS41 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS27 INS8 INS42 INS42 INS11 INS43 INS59 INS32 INS32 INS42 INS42 INS40 MOV74 INS86 INS36 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS33 INS53 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS33 INS53 INS27 INS32 INS41 INS42 INS32 INS42 INS32 INS43 INS43 INS32 INS42 INS32 INS27 INS32 INS53 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS32 INS60 INS21 INS60 INS41 INS42 INS32 INS42 INS32 INS43 INS43 INS32 INS42 INS32 INS43 INS32 INS32 INS40 INS53 INS74 INS86 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS40 INS42 MOV8 INS42 UPD42 INS27 INS42 INS42 INS45 INS45 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS32 INS33 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS74 INS42 INS27 INS8 INS42 INS42 INS43 INS59 INS32 INS74 INS59 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS14 INS43 INS43 INS8 INS43 INS45 INS32 INS45 MOV27 INS27 INS43 INS45 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS45 INS43 INS27 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS41 INS42 INS32 INS42 INS32 INS43 UPD42 INS32 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS45 INS32 INS39 INS59 INS43 INS59 INS32 INS32 INS7 INS32 INS42 INS32 INS42 INS90 INS42 INS42 INS45 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL1 DEL14 DEL42 DEL78 DEL42