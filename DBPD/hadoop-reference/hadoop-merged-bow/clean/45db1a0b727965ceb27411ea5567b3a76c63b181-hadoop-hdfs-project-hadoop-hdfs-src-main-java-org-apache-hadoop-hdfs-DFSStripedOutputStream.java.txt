HDFS-8323. Bump GenerationStamp for write faliure in DFSStripedOutputStream. Contributed by Tsz Wo Nicholas Sze.

-import org.apache.hadoop.hdfs.client.HdfsClientConfigKeys;
-  /** Coordinate the communication between the streamers. */
-  static class Coordinator {
-    private final DfsClientConf conf;
-    private final List<BlockingQueue<ExtendedBlock>> endBlocks;
-    private final List<BlockingQueue<LocatedBlock>> stripedBlocks;
-    private volatile boolean shouldLocateFollowingBlock = false;
+  static class MultipleBlockingQueue<T> {
+    private final int pullTimeout;
+    private final List<BlockingQueue<T>> queues;
-    Coordinator(final DfsClientConf conf, final int numDataBlocks,
-                final int numAllBlocks) {
-      this.conf = conf;
-      endBlocks = new ArrayList<>(numDataBlocks);
-      for (int i = 0; i < numDataBlocks; i++) {
-        endBlocks.add(new LinkedBlockingQueue<ExtendedBlock>(1));
+    MultipleBlockingQueue(int numQueue, int queueSize, int pullTimeout) {
+      queues = new ArrayList<>(numQueue);
+      for (int i = 0; i < numQueue; i++) {
+        queues.add(new LinkedBlockingQueue<T>(queueSize));
-      stripedBlocks = new ArrayList<>(numAllBlocks);
-      for (int i = 0; i < numAllBlocks; i++) {
-        stripedBlocks.add(new LinkedBlockingQueue<LocatedBlock>(1));
+      this.pullTimeout = pullTimeout;
+    }
+
+    void offer(int i, T object) {
+      final boolean b = queues.get(i).offer(object);
+      Preconditions.checkState(b, "Failed to offer " + object
+          + " to queue, i=" + i);
+    }
+
+    T poll(int i) throws InterruptedIOException {
+      try {
+        return queues.get(i).poll(pullTimeout, TimeUnit.SECONDS);
+      } catch (InterruptedException e) {
+        throw DFSUtil.toInterruptedIOException("poll interrupted, i=" + i, e);
-    boolean shouldLocateFollowingBlock() {
-      return shouldLocateFollowingBlock;
+    T peek(int i) {
+      return queues.get(i).peek();
+    }
+  }
+
+  /** Coordinate the communication between the streamers. */
+  static class Coordinator {
+    private final MultipleBlockingQueue<LocatedBlock> stripedBlocks;
+    private final MultipleBlockingQueue<ExtendedBlock> endBlocks;
+    private final MultipleBlockingQueue<ExtendedBlock> updateBlocks;
+
+    Coordinator(final DfsClientConf conf, final int numDataBlocks,
+        final int numAllBlocks) {
+      stripedBlocks = new MultipleBlockingQueue<>(numAllBlocks, 1,
+          conf.getStripedWriteMaxSecondsGetStripedBlock());
+      endBlocks = new MultipleBlockingQueue<>(numDataBlocks, 1,
+          conf.getStripedWriteMaxSecondsGetEndedBlock());
+      updateBlocks = new MultipleBlockingQueue<>(numAllBlocks, 1,
+          conf.getStripedWriteMaxSecondsGetStripedBlock());
-      shouldLocateFollowingBlock = true;
-
-      final boolean b = endBlocks.get(i).offer(block);
-      Preconditions.checkState(b, "Failed to add " + block
-          + " to endBlocks queue, i=" + i);
+      endBlocks.offer(i, block);
-      try {
-        return endBlocks.get(i).poll(
-            conf.getStripedWriteMaxSecondsGetEndedBlock(),
-            TimeUnit.SECONDS);
-      } catch (InterruptedException e) {
-        throw DFSUtil.toInterruptedIOException(
-            "getEndBlock interrupted, i=" + i, e);
-      }
+      return endBlocks.poll(i);
+    }
+
+    void putUpdateBlock(int i, ExtendedBlock block) {
+      updateBlocks.offer(i, block);
+    }
+
+    ExtendedBlock getUpdateBlock(int i) throws InterruptedIOException {
+      return updateBlocks.poll(i);
-      ExtendedBlock b = endBlocks.get(i).peek();
+      ExtendedBlock b = endBlocks.peek(i);
-      final boolean b = stripedBlocks.get(i).offer(block);
-      if (!b) {
-        throw new IOException("Failed: " + block + ", i=" + i);
-      }
+      stripedBlocks.offer(i, block);
-      final LocatedBlock lb;
-      try {
-        lb = stripedBlocks.get(i).poll(
-            conf.getStripedWriteMaxSecondsGetStripedBlock(),
-            TimeUnit.SECONDS);
-      } catch (InterruptedException e) {
-        throw DFSUtil.toInterruptedIOException("getStripedBlock interrupted", e);
-      }
-
+      final LocatedBlock lb = stripedBlocks.poll(i);
+  @Override
+  ExtendedBlock getBlock() {
+    return getLeadingStreamer().getBlock();
+  }
+
+        s.getErrorState().initExtenalError();

INS55 INS31 INS83 INS42 INS73 INS23 MOV23 MOV31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS43 INS42 INS8 INS42 INS83 INS83 INS39 INS59 UPD74 INS59 UPD42 INS44 INS44 INS44 MOV21 INS39 INS42 INS44 INS44 INS8 INS43 INS42 INS44 MOV43 INS8 INS43 INS42 MOV44 INS8 UPD74 MOV74 MOV59 INS74 MOV59 UPD83 INS74 UPD42 MOV44 MOV44 MOV44 MOV39 MOV42 MOV44 MOV44 INS8 MOV43 INS42 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS8 UPD42 INS44 INS43 INS8 INS42 INS42 INS41 INS42 UPD74 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS60 INS21 INS42 INS39 INS42 INS54 INS42 INS41 UPD43 UPD43 MOV43 MOV43 INS43 MOV43 UPD42 INS21 INS21 INS21 MOV21 INS39 INS42 INS42 INS41 INS39 INS42 INS43 INS42 MOV21 INS39 INS42 INS42 INS41 INS21 INS60 INS32 INS43 INS42 INS83 INS39 INS59 INS32 INS8 INS12 INS32 UPD42 UPD42 INS42 INS7 INS7 INS7 INS32 INS32 INS42 INS32 INS43 INS32 MOV83 MOV43 INS59 INS32 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS27 INS41 MOV44 INS8 INS32 INS42 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 INS32 INS42 UPD42 UPD42 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS32 INS53 INS42 INS42 INS42 INS74 INS42 INS34 INS32 INS74 INS42 INS34 MOV32 INS74 INS42 INS34 MOV32 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 INS21 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS32 INS43 INS42 INS42 INS43 INS43 INS32 UPD74 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS45 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL34 DEL42 DEL42 DEL43 DEL74 DEL42 DEL14 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL34 DEL14 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL59 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL39 DEL9 DEL39 DEL42 DEL41 DEL42 DEL9 DEL7 DEL45 DEL42 DEL45 DEL42 DEL27 DEL83 DEL39 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL41 DEL8 DEL45 DEL42 DEL27 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL8 DEL32 DEL42 DEL32 DEL83 DEL39 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL59 DEL60 DEL42 DEL32 DEL42 DEL40 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54