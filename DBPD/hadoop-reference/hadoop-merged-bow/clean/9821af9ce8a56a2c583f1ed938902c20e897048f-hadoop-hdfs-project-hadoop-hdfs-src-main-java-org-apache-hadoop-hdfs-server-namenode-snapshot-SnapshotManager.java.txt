Reverting the previous merge r1416603 which committed some extra changes

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1416712 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.INode;
-import org.apache.hadoop.hdfs.server.namenode.INodeDirectory.INodesInPath;
+import org.apache.hadoop.hdfs.server.namenode.INodeFile;
+import org.apache.hadoop.hdfs.server.namenode.INodeFileUnderConstruction;
+import org.apache.hadoop.hdfs.server.namenode.INodeSymlink;
+import org.apache.hadoop.hdfs.util.ReadOnlyList;
-    final INodesInPath inodesInPath = fsdir.getINodesInPath(path);
-    final INodeDirectory d = INodeDirectory.valueOf(
-        inodesInPath.getINode(0), path);
+    final INodeDirectory d = INodeDirectory.valueOf(fsdir.getINode(path), path);
-    fsdir.replaceINodeDirectory(path, d, s, inodesInPath.getLatestSnapshot());
+    fsdir.replaceINodeDirectory(path, d, s);
-    final INodesInPath inodesInPath = fsdir.getINodesInPath(path);
-        inodesInPath.getINode(0), path);
+        fsdir.getINode(path), path);
-    fsdir.replaceINodeDirectory(path, s, d, inodesInPath.getLatestSnapshot());
+    fsdir.replaceINodeDirectory(path, s, d);
-    srcRoot.addSnapshot(snapshotID, snapshotName);
-
+    final Snapshot s = srcRoot.addSnapshot(snapshotID, snapshotName);
+    new SnapshotCreation().processRecursively(srcRoot, s.getRoot());
+      
+  /**
+   * Create a snapshot of subtrees by recursively coping the directory
+   * structure from the source directory to the snapshot destination directory.
+   * This creation algorithm requires O(N) running time and O(N) memory,
+   * where N = # files + # directories + # symlinks. 
+   */
+  class SnapshotCreation {
+    /** Process snapshot creation recursively. */
+    private void processRecursively(final INodeDirectory srcDir,
+        final INodeDirectory dstDir) throws IOException {
+      final ReadOnlyList<INode> children = srcDir.getChildrenList(null);
+      if (!children.isEmpty()) {
+        final List<INode> inodes = new ArrayList<INode>(children.size());
+        for(final INode c : new ArrayList<INode>(ReadOnlyList.Util.asList(children))) {
+          final INode i;
+          if (c == null) {
+            i = null;
+          } else if (c instanceof INodeDirectory) {
+            //also handle INodeDirectoryWithQuota
+            i = processINodeDirectory((INodeDirectory)c);
+          } else if (c instanceof INodeFileUnderConstruction) {
+            //TODO: support INodeFileUnderConstruction
+            throw new IOException("Not yet supported.");
+          } else if (c instanceof INodeFile) {
+            i = processINodeFile(srcDir, (INodeFile)c);
+          } else if (c instanceof INodeSymlink) {
+            i = new INodeSymlink((INodeSymlink)c);
+          } else {
+            throw new AssertionError("Unknow INode type: " + c.getClass()
+                + ", inode = " + c);
+          }
+          i.setParent(dstDir);
+          inodes.add(i);
+        }
+        dstDir.setChildren(inodes);
+      }
+    }
+    
+    /**
+     * Create destination INodeDirectory and make the recursive call. 
+     * @return destination INodeDirectory.
+     */
+    private INodeDirectory processINodeDirectory(final INodeDirectory srcChild
+        ) throws IOException {
+      final INodeDirectory dstChild = new INodeDirectory(srcChild);
+      dstChild.setChildren(null);
+      processRecursively(srcChild, dstChild);
+      return dstChild;
+    }
+
+    /**
+     * Create destination INodeFileSnapshot and update source INode type.
+     * @return destination INodeFileSnapshot.
+     */
+    private INodeFileSnapshot processINodeFile(final INodeDirectory parent,
+        final INodeFile file) {
+      final INodeFileSnapshot snapshot = new INodeFileSnapshot(
+          file, file.computeFileSize(true)); 
+
+      final INodeFileWithLink srcWithLink;
+      //check source INode type
+      if (file instanceof INodeFileWithLink) {
+        srcWithLink = (INodeFileWithLink)file;
+      } else {
+        //source is an INodeFile, replace the source.
+        srcWithLink = new INodeFileWithLink(file);
+        file.removeNode();
+        parent.addChild(srcWithLink, false);
+
+        //update block map
+        namesystem.getBlockManager().addBlockCollection(srcWithLink);
+      }
+      
+      //insert the snapshot to src's linked list.
+      srcWithLink.insert(snapshot);
+      return snapshot;
+    }
+  }
+
-}
+}

MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS55 INS29 INS42 INS31 INS31 INS31 INS60 INS65 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS59 INS32 INS66 INS66 INS66 INS66 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS25 INS65 INS65 INS42 INS83 INS43 INS42 INS42 INS60 INS21 INS21 INS41 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS60 INS25 INS21 INS41 INS42 INS42 MOV32 INS14 INS42 INS42 INS32 INS66 INS42 INS42 INS83 INS74 INS59 INS38 INS8 INS66 INS66 INS42 INS83 INS43 INS59 INS32 INS32 INS42 INS66 INS66 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS62 INS8 INS8 INS32 INS42 INS43 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS60 INS70 INS21 INS42 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS83 INS74 INS59 INS44 INS14 INS8 INS32 INS43 INS42 INS43 INS42 INS32 INS42 INS7 INS7 INS32 INS32 INS32 INS43 INS43 INS42 INS14 INS83 INS43 INS42 INS74 INS32 INS60 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS11 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS43 INS43 INS40 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS25 INS32 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS62 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS43 INS21 INS62 INS8 INS25 INS42 INS33 INS42 INS7 INS42 INS43 INS53 INS62 INS8 INS25 INS42 INS32 INS42 INS14 INS42 INS43 INS21 INS62 INS8 INS8 INS42 INS11 INS43 INS45 INS42 INS7 INS42 INS43 INS21 INS53 INS43 INS42 INS42 INS42 INS32 INS42 INS7 INS14 INS42 INS42 INS42 INS11 INS42 INS14 INS43 INS27 INS43 INS42 INS43 INS11 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL34 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL34 DEL42 DEL42 DEL32