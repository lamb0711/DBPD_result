Complete commit of prior merge.

The previous merge accidentally only committed the hdfs project instead of common and MR
as well.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1463203 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.io.WritableUtils;
+import com.google.protobuf.CodedOutputStream;
-    public synchronized Writable getRpcResult() {
+    public synchronized Writable getRpcResponse() {
+    private int serviceClass;
-    public Connection(ConnectionId remoteId) throws IOException {
+    public Connection(ConnectionId remoteId, int serviceClass) throws IOException {
+      this.serviceClass = serviceClass;
-     * |  Version (1 bytes)               |      
+     * |  Version (1 byte)                |
+     * +----------------------------------+
+     * |  Service Class (1 byte)          |
+      out.write(serviceClass);
-        RpcResponseHeaderProto response = 
+        int totalLen = in.readInt();
+        RpcResponseHeaderProto header = 
-        if (response == null) {
+        if (header == null) {
+        int headerLen = header.getSerializedSize();
+        headerLen += CodedOutputStream.computeRawVarint32Size(headerLen);
-        int callId = response.getCallId();
+        int callId = header.getCallId();
-        RpcStatusProto status = response.getStatus();
+        RpcStatusProto status = header.getStatus();
-        } else if (status == RpcStatusProto.ERROR) {
-          call.setException(new RemoteException(WritableUtils.readString(in),
-                                                WritableUtils.readString(in)));
-          calls.remove(callId);
-        } else if (status == RpcStatusProto.FATAL) {
-          // Close the connection
-          markClosed(new RemoteException(WritableUtils.readString(in), 
-                                         WritableUtils.readString(in)));
+          
+          // verify that length was correct
+          // only for ProtobufEngine where len can be verified easily
+          if (call.getRpcResponse() instanceof ProtobufRpcEngine.RpcWrapper) {
+            ProtobufRpcEngine.RpcWrapper resWrapper = 
+                (ProtobufRpcEngine.RpcWrapper) call.getRpcResponse();
+            if (totalLen != headerLen + resWrapper.getLength()) { 
+              throw new RpcClientException(
+                  "RPC response length mismatch on rpc success");
+            }
+          }
+        } else { // Rpc Request failed
+          // Verify that length was correct
+          if (totalLen != headerLen) {
+            throw new RpcClientException(
+                "RPC response length mismatch on rpc error");
+          }
+          
+          final String exceptionClassName = header.hasExceptionClassName() ?
+                header.getExceptionClassName() : 
+                  "ServerDidNotSetExceptionClassName";
+          final String errorMsg = header.hasErrorMsg() ? 
+                header.getErrorMsg() : "ServerDidNotSetErrorMsg" ;
+          RemoteException re = 
+              new RemoteException(exceptionClassName, errorMsg);
+          if (status == RpcStatusProto.ERROR) {
+            call.setException(re);
+            calls.remove(callId);
+          } else if (status == RpcStatusProto.FATAL) {
+            // Close the connection
+            markClosed(re);
+          }
-   * Same as {@link #call(RPC.RpcKind, Writable, InetSocketAddress, 
+   * Same as {@link #call(RPC.RpcKind, Writable, InetSocketAddress,
-  public Writable call(Writable param, InetSocketAddress addr, 
+  public Writable call(Writable param, InetSocketAddress addr,
-      int rpcTimeout, Configuration conf)  
+      int rpcTimeout, Configuration conf)
-        ConnectionId remoteId = ConnectionId.getConnectionId(addr, protocol,
+    ConnectionId remoteId = ConnectionId.getConnectionId(addr, protocol,
+   * Same as {@link #call(Writable, InetSocketAddress,
+   * Class, UserGroupInformation, int, Configuration)}
+   * except that specifying serviceClass.
+   */
+  public Writable call(Writable param, InetSocketAddress addr,
+      Class<?> protocol, UserGroupInformation ticket,
+      int rpcTimeout, int serviceClass, Configuration conf)
+      throws InterruptedException, IOException {
+    ConnectionId remoteId = ConnectionId.getConnectionId(addr, protocol,
+        ticket, rpcTimeout, conf);
+    return call(RPC.RpcKind.RPC_BUILTIN, param, remoteId, serviceClass);
+  }
+
+  /**
-  /** 
+  /**
-   * 
+   *
+    return call(rpcKind, rpcRequest, remoteId, RPC.RPC_SERVICE_CLASS_DEFAULT);
+  }
+
+  /** 
+   * Make a call, passing <code>rpcRequest</code>, to the IPC server defined by
+   * <code>remoteId</code>, returning the rpc respond.
+   * 
+   * @param rpcKind
+   * @param rpcRequest -  contains serialized method and method parameters
+   * @param remoteId - the target rpc server
+   * @param serviceClass - service class for RPC
+   * @returns the rpc response
+   * Throws exceptions if there are network problems or if the remote code 
+   * threw an exception.
+   */
+  public Writable call(RPC.RpcKind rpcKind, Writable rpcRequest,
+      ConnectionId remoteId, int serviceClass)
+      throws InterruptedException, IOException {
-    Connection connection = getConnection(remoteId, call);
+    Connection connection = getConnection(remoteId, call, serviceClass);
-        return call.getRpcResult();
+        return call.getRpcResponse();
-                                   Call call)
+                                   Call call, int serviceClass)
-          connection = new Connection(remoteId);
+          connection = new Connection(remoteId, serviceClass);

MOV26 UPD40 INS31 INS31 INS23 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 MOV29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS44 INS44 UPD42 INS83 INS39 INS59 INS44 INS65 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS42 INS39 INS42 INS21 INS21 INS66 INS65 INS66 INS42 INS42 INS43 INS76 INS42 INS42 INS43 INS59 INS32 INS40 INS42 INS42 INS32 INS66 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 MOV43 INS7 UPD66 INS66 INS66 INS32 INS68 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS22 INS42 INS42 INS42 INS42 INS60 INS60 INS21 INS25 INS42 INS69 INS69 INS69 INS69 INS69 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS39 INS59 INS39 INS59 INS7 MOV27 MOV8 INS8 INS43 INS43 INS43 INS43 INS39 INS43 INS42 INS32 UPD42 UPD42 INS42 INS32 INS42 INS32 INS25 INS25 INS60 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS62 INS8 INS27 INS8 INS83 INS43 INS59 INS83 INS43 INS59 MOV43 INS59 MOV27 INS8 INS25 UPD42 INS32 INS43 INS60 INS25 INS42 INS42 INS53 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS14 INS21 MOV21 MOV27 INS8 INS42 INS42 INS40 INS43 INS59 INS27 INS8 INS14 INS32 INS32 INS45 INS32 INS32 INS45 MOV43 INS42 INS42 INS32 INS21 INS40 INS42 INS11 INS42 INS27 INS53 INS43 INS45 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 MOV43 INS42 INS43 INS32 INS42 INS32 INS14 INS42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS42 INS42 INS42 INS43 INS45 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL42 DEL32 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL25 DEL25