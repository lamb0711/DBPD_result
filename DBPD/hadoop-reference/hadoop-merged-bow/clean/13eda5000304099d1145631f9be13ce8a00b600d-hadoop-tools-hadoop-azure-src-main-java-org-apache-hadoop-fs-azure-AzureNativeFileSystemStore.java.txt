HADOOP-14520. WASB: Block compaction for Azure Block Blobs.
Contributed by Georgi Chalakov

+   * Configuration key to indicate the set of directories in WASB where we
+   * should store files as block blobs with block compaction enabled.
+   *
+   * Entries can be directory paths relative to the container (e.g. "/path") or
+   * fully qualified wasb:// URIs (e.g.
+   * wasb://container@example.blob.core.windows.net/path)
+   */
+  public static final String KEY_BLOCK_BLOB_WITH_COMPACTION_DIRECTORIES =
+          "fs.azure.block.blob.with.compaction.dir";
+
+  /**
+   * The set of directories where we should store files as block blobs with
+   * block compaction enabled.
+   */
+  private Set<String> blockBlobWithCompationDirs;
+
+  /**
+    // Extract the directories that should contain block blobs with compaction
+    blockBlobWithCompationDirs = getDirectorySet(
+        KEY_BLOCK_BLOB_WITH_COMPACTION_DIRECTORIES);
+    LOG.debug("Block blobs with compaction directories:  {}",
+        setToString(blockBlobWithCompationDirs));
+
+   * Checks if the given key in Azure Storage should be stored as a block blobs
+   * with compaction enabled instead of normal block blob.
+   *
+   * @param key blob name
+   * @return true, if the file is in directory with block compaction enabled.
+   */
+  public boolean isBlockBlobWithCompactionKey(String key) {
+    return isKeyForDirectorySet(key, blockBlobWithCompationDirs);
+  }
+
+  /**
-  public DataOutputStream storefile(String key, PermissionStatus permissionStatus)
+  public DataOutputStream storefile(String keyEncoded,
+                                    PermissionStatus permissionStatus,
+                                    String key)
-      CloudBlobWrapper blob = getBlobReference(key);
+      CloudBlobWrapper blob = getBlobReference(keyEncoded);
-      OutputStream outputStream = openOutputStream(blob);
+      OutputStream outputStream;
+
+      if (isBlockBlobWithCompactionKey(key)) {
+        BlockBlobAppendStream blockBlobOutputStream = new BlockBlobAppendStream(
+            (CloudBlockBlobWrapper) blob,
+            keyEncoded,
+            this.uploadBlockSizeBytes,
+            true,
+            getInstrumentedContext());
+
+        outputStream = blockBlobOutputStream;
+      } else {
+        outputStream = openOutputStream(blob);
+      }
+
-      BlockBlobAppendStream appendStream = new BlockBlobAppendStream((CloudBlockBlobWrapper) blob, key, bufferSize, getInstrumentedContext());
-      appendStream.initialize();
+      OutputStream outputStream;
-      return new DataOutputStream(appendStream);
+      BlockBlobAppendStream blockBlobOutputStream = new BlockBlobAppendStream(
+          (CloudBlockBlobWrapper) blob,
+          key,
+          bufferSize,
+          isBlockBlobWithCompactionKey(key),
+          getInstrumentedContext());
+
+      outputStream = blockBlobOutputStream;
+
+      DataOutputStream dataOutStream = new SyncableDataOutputStream(
+          outputStream);
+
+      return dataOutStream;

INS23 INS23 INS31 MOV44 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS44 INS65 INS42 INS42 INS45 INS65 INS43 INS43 INS42 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS41 INS43 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS7 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS25 INS60 INS60 INS41 INS42 INS42 INS42 INS42 INS32 INS8 INS8 INS43 INS59 MOV43 INS7 INS43 INS59 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS14 UPD42 INS43 INS59 INS7 INS7 MOV43 INS32 UPD43 MOV43 UPD42 MOV42 INS42 INS42 INS14 INS42 INS42 INS42 MOV32 INS42 INS42 UPD42 INS43 INS11 INS42 INS22 INS9 INS32 INS42 INS43 INS42 INS52 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL14 DEL41