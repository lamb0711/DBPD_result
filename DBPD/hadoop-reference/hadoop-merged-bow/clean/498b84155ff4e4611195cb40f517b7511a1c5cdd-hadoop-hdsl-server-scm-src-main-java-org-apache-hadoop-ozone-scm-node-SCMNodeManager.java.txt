HDFS-13300. Ozone: Remove DatanodeID dependency from HDSL and Ozone.
Contributed by Nanda kumar.

-import org.apache.hadoop.hdfs.protocol.DatanodeID;
+import org.apache.hadoop.hdsl.protocol.DatanodeDetails;
+import org.apache.hadoop.hdsl.protocol.proto.HdslProtos.DatanodeDetailsProto;
+import org.apache.hadoop.ipc.Server;
+import java.net.InetAddress;
+import java.util.UUID;
-  private final ConcurrentHashMap<String, Long> healthyNodes;
-  private final ConcurrentHashMap<String, Long> staleNodes;
-  private final ConcurrentHashMap<String, Long> deadNodes;
+  private final ConcurrentHashMap<UUID, Long> healthyNodes;
+  private final ConcurrentHashMap<UUID, Long> staleNodes;
+  private final ConcurrentHashMap<UUID, Long> deadNodes;
-  private final ConcurrentHashMap<String, DatanodeID> nodes;
+  private final ConcurrentHashMap<UUID, DatanodeDetails> nodes;
-  private final ConcurrentHashMap<String, SCMNodeStat> nodeStats;
+  private final ConcurrentHashMap<UUID, SCMNodeStat> nodeStats;
-    nodeStats = new ConcurrentHashMap();
+    nodeStats = new ConcurrentHashMap<>();
-  public void removeNode(DatanodeID node) throws UnregisteredNodeException {
+  public void removeNode(DatanodeDetails node) {
-  public List<DatanodeID> getNodes(NodeState nodestate)
+  public List<DatanodeDetails> getNodes(NodeState nodestate)
-    Map<String, Long> set;
+    Map<UUID, Long> set;
-   * @return List of DatanodeIDs
+   * @return List of DatanodeDetails
-  public List<DatanodeID> getAllNodes() {
-    Map<String, DatanodeID> set;
+  public List<DatanodeDetails> getAllNodes() {
+    Map<UUID, DatanodeDetails> set;
-   * @param id - DatanodeID
+   * @param datanodeDetails - Datanode Details
-  public NodeState getNodeState(DatanodeID id) {
+  public NodeState getNodeState(DatanodeDetails datanodeDetails) {
-    if(healthyNodes.containsKey(id.getDatanodeUuid())) {
+    UUID id = datanodeDetails.getUuid();
+    if(healthyNodes.containsKey(id)) {
-    if(staleNodes.containsKey(id.getDatanodeUuid())) {
+    if(staleNodes.containsKey(id)) {
-    if(deadNodes.containsKey(id.getDatanodeUuid())) {
+    if(deadNodes.containsKey(id)) {
-    for (Map.Entry<String, Long> entry : staleNodes.entrySet()) {
+    for (Map.Entry<UUID, Long> entry : staleNodes.entrySet()) {
-    for (Map.Entry<String, Long> entry : healthyNodes.entrySet()) {
+    for (Map.Entry<UUID, Long> entry : healthyNodes.entrySet()) {
-  private void moveHealthyNodeToStale(Map.Entry<String, Long> entry) {
+  private void moveHealthyNodeToStale(Map.Entry<UUID, Long> entry) {
-      scmManager.removeContainerReport(entry.getKey());
+      scmManager.removeContainerReport(entry.getKey().toString());
-  private void moveStaleNodeToDead(Map.Entry<String, Long> entry) {
+  private void moveStaleNodeToDead(Map.Entry<UUID, Long> entry) {
-    DatanodeID datanodeID = hbItem.getDatanodeID();
-    String datanodeUuid = datanodeID.getDatanodeUuid();
+    DatanodeDetails datanodeDetails = hbItem.getDatanodeDetails();
+    UUID datanodeUuid = datanodeDetails.getUuid();
-      updateCommandQueue(datanodeID,
+      updateCommandQueue(datanodeUuid,
-      updateCommandQueue(datanodeID,
+      updateCommandQueue(datanodeUuid,
-      updateCommandQueue(datanodeID,
+      updateCommandQueue(datanodeUuid,
-    this.commandQueue.addCommand(hbItem.getDatanodeID(),
+    this.commandQueue.addCommand(datanodeUuid,
-  private void updateNodeStat(String datanodeUuid, SCMNodeReport nodeReport) {
-    SCMNodeStat stat = nodeStats.get(datanodeUuid);
+  private void updateNodeStat(UUID dnId, SCMNodeReport nodeReport) {
+    SCMNodeStat stat = nodeStats.get(dnId);
-          "dead datanode {}", datanodeUuid);
+          "dead datanode {}", dnId);
-      nodeStats.put(datanodeUuid, stat);
+      nodeStats.put(dnId, stat);
-  private void updateCommandQueue(DatanodeID datanodeID,
+  private void updateCommandQueue(UUID dnId,
-        commandQueue.addCommand(datanodeID,
+        commandQueue.addCommand(dnId,
-   * @param datanodeID - Send datanodeID with Node info. This function
-   *                   generates and assigns new datanode ID for the datanode.
-   *                   This allows SCM to be run independent of Namenode if
-   *                   required.
+   * @param datanodeDetailsProto - Send datanodeDetails with Node info.
+   *                   This function generates and assigns new datanode ID
+   *                   for the datanode. This allows SCM to be run independent
+   *                   of Namenode if required.
-  public SCMCommand register(DatanodeID datanodeID) {
+  public SCMCommand register(DatanodeDetailsProto datanodeDetailsProto) {
-    SCMCommand responseCommand = verifyDatanodeUUID(datanodeID);
+    DatanodeDetails datanodeDetails = DatanodeDetails.getFromProtoBuf(
+        datanodeDetailsProto);
+    InetAddress dnAddress = Server.getRemoteIp();
+    if (dnAddress != null) {
+      // Mostly called inside an RPC, update ip and peer hostname
+      String hostname = dnAddress.getHostName();
+      String ip = dnAddress.getHostAddress();
+      datanodeDetails.setHostName(hostname);
+      datanodeDetails.setIpAddress(ip);
+    }
+    SCMCommand responseCommand = verifyDatanodeUUID(datanodeDetails);
-
-    nodes.put(datanodeID.getDatanodeUuid(), datanodeID);
+    UUID dnId = datanodeDetails.getUuid();
+    nodes.put(dnId, datanodeDetails);
-    healthyNodes.put(datanodeID.getDatanodeUuid(), monotonicNow());
+    healthyNodes.put(dnId, monotonicNow());
-    nodeStats.put(datanodeID.getDatanodeUuid(), new SCMNodeStat());
+    nodeStats.put(dnId, new SCMNodeStat());
-      if (nodePoolManager.getNodePool(datanodeID) == null) {
+      if (nodePoolManager.getNodePool(datanodeDetails) == null) {
-            datanodeID);
+            datanodeDetails);
-        datanodeID.getDatanodeUuid());
+        datanodeDetails.getUuid());
-        .setDatanodeUUID(datanodeID.getDatanodeUuid())
+        .setDatanodeUUID(datanodeDetails.getUuidString())
-   * @param datanodeID - Datanode UUID.
+   * @param datanodeDetails - Datanode Details.
-  private SCMCommand verifyDatanodeUUID(DatanodeID datanodeID) {
-    if (datanodeID.getDatanodeUuid() != null &&
-        nodes.containsKey(datanodeID.getDatanodeUuid())) {
+  private SCMCommand verifyDatanodeUUID(DatanodeDetails datanodeDetails) {
+    if (datanodeDetails.getUuid() != null &&
+        nodes.containsKey(datanodeDetails.getUuid())) {
-          datanodeID.toString());
+          datanodeDetails.toString());
-          .setDatanodeUUID(datanodeID.getDatanodeUuid())
+          .setDatanodeUUID(datanodeDetails.getUuidString())
-   * @param datanodeID - Datanode ID.
+   * @param datanodeDetailsProto - DatanodeDetailsProto.
-  public List<SCMCommand> sendHeartbeat(DatanodeID datanodeID,
-      SCMNodeReport nodeReport, ReportState containerReportState) {
+  public List<SCMCommand> sendHeartbeat(
+      DatanodeDetailsProto datanodeDetailsProto, SCMNodeReport nodeReport,
+      ReportState containerReportState) {
+
+    DatanodeDetails datanodeDetails = DatanodeDetails
+        .getFromProtoBuf(datanodeDetailsProto);
-    if (datanodeID != null) {
+    if (datanodeDetails != null) {
-              .setDatanodeID(datanodeID)
+              .setDatanodeDetails(datanodeDetails)
-    return commandQueue.getCommand(datanodeID);
+    return commandQueue.getCommand(datanodeDetails.getUuid());
-  public Map<String, SCMNodeStat> getNodeStats() {
+  public Map<UUID, SCMNodeStat> getNodeStats() {
-   * @param datanodeID - datanode ID.
+   * @param datanodeDetails - datanode ID.
-  public SCMNodeMetric getNodeStat(DatanodeID datanodeID) {
-    return new SCMNodeMetric(nodeStats.get(datanodeID.getDatanodeUuid()));
+  public SCMNodeMetric getNodeStat(DatanodeDetails datanodeDetails) {
+    return new SCMNodeMetric(nodeStats.get(datanodeDetails));
-  public void addDatanodeCommand(DatanodeID id, SCMCommand command) {
-    this.commandQueue.addCommand(id, command);
+  public void addDatanodeCommand(UUID dnId, SCMCommand command) {
+    this.commandQueue.addCommand(dnId, command);

MOV26 INS26 INS26 INS26 INS26 MOV23 UPD40 INS40 INS40 INS40 INS40 MOV29 UPD74 MOV59 UPD74 MOV59 UPD74 MOV59 UPD74 UPD74 UPD74 UPD74 UPD74 UPD43 UPD43 MOV43 UPD43 MOV43 UPD43 UPD43 MOV43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 INS60 UPD74 UPD74 INS43 UPD42 UPD43 UPD42 UPD43 UPD42 INS60 INS60 INS25 INS60 UPD43 UPD42 UPD43 UPD42 INS60 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD66 UPD42 UPD74 UPD42 UPD66 UPD42 INS43 INS59 UPD43 UPD43 UPD43 INS43 INS42 UPD42 UPD42 UPD66 UPD66 UPD66 UPD66 UPD42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 UPD42 UPD66 UPD42 UPD42 UPD66 UPD42 INS43 INS59 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 INS42 INS42 INS32 MOV42 MOV42 MOV42 UPD74 UPD74 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS21 INS21 INS42 INS42 INS32 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 INS32 UPD42 INS74 UPD42 UPD42 UPD42 INS42 INS42 UPD43 UPD43 INS32 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 MOV43 INS59 MOV43 INS59 INS32 INS32 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 MOV43 UPD42 UPD42 INS42 INS42 MOV32 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32