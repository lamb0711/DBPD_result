YARN-5366. Improve signal handling and delete delay for Docker on Yarn.
           (Contributed by Shane Kumpf)

+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.DockerLinuxContainerRuntime;
+import org.apache.hadoop.yarn.server.nodemanager.executor.ContainerReapContext;
+      String user = container.getUser();
-        String user = container.getUser();
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Sending signal to pid " + processId + " as user " + user
-              + " for container " + containerIdStr);
-        }
-        final Signal signal = sleepDelayBeforeSigKill > 0
-          ? Signal.TERM
-          : Signal.KILL;
-
-        boolean result = exec.signalContainer(
-            new ContainerSignalContext.Builder()
-                .setContainer(container)
-                .setUser(user)
-                .setPid(processId)
-                .setSignal(signal)
-                .build());
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Sent signal " + signal + " to pid " + processId
-              + " as user " + user + " for container " + containerIdStr
-              + ", result=" + (result ? "success" : "failed"));
-        }
-        if (sleepDelayBeforeSigKill > 0) {
-          new DelayedProcessKiller(container, user,
-              processId, sleepDelayBeforeSigKill, Signal.KILL, exec).start();
-        }
+        signalProcess(processId, user, containerIdStr);
+        // The Docker container may not have fully started, reap the container.
+        if (DockerLinuxContainerRuntime.isDockerContainerRequested(
+            container.getLaunchContext().getEnvironment())) {
+          reapDockerContainerNoPid(user);
+        }
+
+    final int sleepMsec = 100;
+    int msecLeft = 2000;
+    if (pidFilePath != null) {
+      File file = new File(getExitCodeFile(pidFilePath.toString()));
+      while (!file.exists() && msecLeft >= 0) {
+        try {
+          Thread.sleep(sleepMsec);
+        } catch (InterruptedException e) {
+        }
+        msecLeft -= sleepMsec;
+      }
+      if (msecLeft < 0) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Timeout while waiting for the exit code file:  "
+              + file.getAbsolutePath());
+        }
+      }
+    }
+
+    // Reap the container
+    boolean result = exec.reapContainer(
+        new ContainerReapContext.Builder()
+            .setContainer(container)
+            .setUser(container.getUser())
+            .build());
+    if (!result) {
+      throw new IOException("Reap container failed for container "
+          + containerIdStr);
+    }
+  private boolean sendSignal(String user, String processId, Signal signal)
+      throws IOException {
+    return exec.signalContainer(
+        new ContainerSignalContext.Builder().setContainer(container)
+            .setUser(user).setPid(processId).setSignal(signal).build());
+  }
+
+  private void signalProcess(String processId, String user,
+      String containerIdStr) throws IOException {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Sending signal to pid " + processId + " as user " + user
+          + " for container " + containerIdStr);
+    }
+    final Signal signal =
+        sleepDelayBeforeSigKill > 0 ? Signal.TERM : Signal.KILL;
+
+    boolean result = sendSignal(user, processId, signal);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Sent signal " + signal + " to pid " + processId + " as user "
+          + user + " for container " + containerIdStr + ", result="
+          + (result ? "success" : "failed"));
+    }
+    if (sleepDelayBeforeSigKill > 0) {
+      new DelayedProcessKiller(container, user, processId,
+          sleepDelayBeforeSigKill, Signal.KILL, exec).start();
+    }
+  }
+
+  private void reapDockerContainerNoPid(String user) throws IOException {
+    String containerIdStr =
+        container.getContainerTokenIdentifier().getContainerID().toString();
+    LOG.info("Unable to obtain pid, but docker container request detected. "
+            + "Attempting to reap container " + containerIdStr);
+    boolean result = exec.reapContainer(
+        new ContainerReapContext.Builder()
+            .setContainer(container)
+            .setUser(container.getUser())
+            .build());
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Sent signal to docker container " + containerIdStr
+          + " as user " + user + ", result=" + (result ? "success" : "failed"));
+    }
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 MOV8 INS83 INS39 INS42 INS44 INS43 INS8 INS60 INS60 INS25 INS60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS25 INS83 INS39 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS38 INS8 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS39 INS59 INS32 INS8 MOV60 INS42 INS34 INS42 INS34 INS42 INS33 INS60 INS61 INS25 INS42 INS32 INS42 INS53 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS21 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS45 INS42 INS42 INS42 INS32 INS32 INS21 INS25 INS42 INS42 INS14 INS38 INS27 INS54 INS21 INS42 INS34 INS25 INS32 INS42 INS43 INS27 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS32 INS32 INS8 INS43 INS32 INS32 INS42 INS34 INS8 INS12 INS7 INS32 INS8 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS45 INS42 INS45 INS42 INS45 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS21 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS16 INS32 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS32 INS43 INS43 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS40 INS40 INS45 INS32 INS42 INS42