merge from trunk r1602933

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1602947 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.UndeclaredThrowableException;
+import java.security.AccessControlException;
+import java.security.PrivilegedExceptionAction;
+import javax.ws.rs.Consumes;
+import javax.ws.rs.PUT;
+import javax.ws.rs.core.HttpHeaders;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.Response.Status;
+import org.apache.hadoop.security.authorize.AuthorizationException;
+import org.apache.hadoop.yarn.api.protocolrecords.KillApplicationRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.KillApplicationResponse;
+import org.apache.hadoop.yarn.server.resourcemanager.RMAuditLogger;
+import org.apache.hadoop.yarn.server.resourcemanager.RMAuditLogger.AuditConstants;
-import org.apache.hadoop.yarn.server.resourcemanager.security.QueueACLsManager;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.AppState;
-import org.apache.hadoop.yarn.server.security.ApplicationACLsManager;
+
+  @GET
+  @Path("/apps/{appid}/state")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public AppState getAppState(@Context HttpServletRequest hsr,
+      @PathParam("appid") String appId) throws AuthorizationException {
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr);
+    String userName = "";
+    if (callerUGI != null) {
+      userName = callerUGI.getUserName();
+    }
+    RMApp app = null;
+    try {
+      app = getRMAppForAppId(appId);
+    } catch (NotFoundException e) {
+      RMAuditLogger.logFailure(userName, AuditConstants.KILL_APP_REQUEST,
+        "UNKNOWN", "RMWebService",
+        "Trying to get state of an absent application " + appId);
+      throw e;
+    }
+
+    AppState ret = new AppState();
+    ret.setState(app.getState().toString());
+
+    return ret;
+  }
+
+  // can't return POJO because we can't control the status code
+  // it's always set to 200 when we need to allow it to be set
+  // to 202
+
+  @PUT
+  @Path("/apps/{appid}/state")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response updateAppState(AppState targetState,
+      @Context HttpServletRequest hsr, @PathParam("appid") String appId)
+      throws AuthorizationException, YarnException, InterruptedException,
+      IOException {
+
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr);
+    if (callerUGI == null) {
+      String msg = "Unable to obtain user name, user not authenticated";
+      throw new AuthorizationException(msg);
+    }
+
+    String userName = callerUGI.getUserName();
+    RMApp app = null;
+    try {
+      app = getRMAppForAppId(appId);
+    } catch (NotFoundException e) {
+      RMAuditLogger.logFailure(userName, AuditConstants.KILL_APP_REQUEST,
+        "UNKNOWN", "RMWebService", "Trying to kill/move an absent application "
+            + appId);
+      throw e;
+    }
+
+    if (!app.getState().toString().equals(targetState.getState())) {
+      // user is attempting to change state. right we only
+      // allow users to kill the app
+
+      if (targetState.getState().equals(YarnApplicationState.KILLED.toString())) {
+        return killApp(app, callerUGI, hsr);
+      }
+      throw new BadRequestException("Only '"
+          + YarnApplicationState.KILLED.toString()
+          + "' is allowed as a target state.");
+    }
+
+    AppState ret = new AppState();
+    ret.setState(app.getState().toString());
+
+    return Response.status(Status.OK).entity(ret).build();
+  }
+
+  protected Response killApp(RMApp app, UserGroupInformation callerUGI,
+      HttpServletRequest hsr) throws IOException, InterruptedException {
+
+    if (app == null) {
+      throw new IllegalArgumentException("app cannot be null");
+    }
+    String userName = callerUGI.getUserName();
+    final ApplicationId appid = app.getApplicationId();
+    KillApplicationResponse resp = null;
+    try {
+      resp =
+          callerUGI
+            .doAs(new PrivilegedExceptionAction<KillApplicationResponse>() {
+              @Override
+              public KillApplicationResponse run() throws IOException,
+                  YarnException {
+                KillApplicationRequest req =
+                    KillApplicationRequest.newInstance(appid);
+                return rm.getClientRMService().forceKillApplication(req);
+              }
+            });
+    } catch (UndeclaredThrowableException ue) {
+      // if the root cause is a permissions issue
+      // bubble that up to the user
+      if (ue.getCause() instanceof YarnException) {
+        YarnException ye = (YarnException) ue.getCause();
+        if (ye.getCause() instanceof AccessControlException) {
+          String appId = app.getApplicationId().toString();
+          String msg =
+              "Unauthorized attempt to kill appid " + appId
+                  + " by remote user " + userName;
+          return Response.status(Status.FORBIDDEN).entity(msg).build();
+        } else {
+          throw ue;
+        }
+      } else {
+        throw ue;
+      }
+    }
+
+    AppState ret = new AppState();
+    ret.setState(app.getState().toString());
+
+    if (resp.getIsKillCompleted()) {
+      RMAuditLogger.logSuccess(userName, AuditConstants.KILL_APP_REQUEST,
+        "RMWebService", app.getApplicationId());
+    } else {
+      return Response.status(Status.ACCEPTED).entity(ret)
+        .header(HttpHeaders.LOCATION, hsr.getRequestURL()).build();
+    }
+    return Response.status(Status.OK).entity(ret).build();
+  }
+
+  private RMApp getRMAppForAppId(String appId) {
+
+    if (appId == null || appId.isEmpty()) {
+      throw new NotFoundException("appId, " + appId + ", is empty or null");
+    }
+    ApplicationId id;
+    try {
+      id = ConverterUtils.toApplicationId(recordFactory, appId);
+    } catch (NumberFormatException e) {
+      throw new NotFoundException("appId is invalid");
+    }
+    if (id == null) {
+      throw new NotFoundException("appId is invalid");
+    }
+    RMApp app = rm.getRMContext().getRMApps().get(id);
+    if (app == null) {
+      throw new NotFoundException("app with id: " + appId + " not found");
+    }
+    return app;
+  }
+
+  private UserGroupInformation getCallerUserGroupInformation(
+      HttpServletRequest hsr) {
+
+    String remoteUser = hsr.getRemoteUser();
+    UserGroupInformation callerUGI = null;
+    if (remoteUser != null) {
+      callerUGI = UserGroupInformation.createRemoteUser(remoteUser);
+    }
+
+    return callerUGI;
+  }

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 INS31 INS31 INS31 INS31 INS31 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS42 INS21 INS60 INS60 INS25 INS60 INS54 INS60 INS21 INS41 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS43 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS60 INS60 INS54 INS25 INS60 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS25 INS60 INS60 INS60 INS54 INS60 INS21 INS25 INS41 INS42 INS43 INS42 INS25 INS60 INS54 INS25 INS60 INS25 INS41 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS40 INS40 INS42 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS38 INS8 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS27 INS8 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS32 INS8 INS8 INS32 INS42 INS27 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS33 INS21 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS53 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS32 INS25 INS53 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS21 INS41 INS32 INS42 INS27 INS32 INS53 INS42 INS42 INS21 INS44 INS8 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS42 INS7 INS7 INS43 INS42 INS21 INS53 INS43 INS32 INS42 INS42 INS42 INS43 INS59 INS14 INS42 INS42 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS32 INS32 INS8 INS14 INS43 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS25 INS43 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS14 INS7 INS43 INS42 INS53 INS14 INS32 INS42 INS42 INS14 INS42 INS42 INS7 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS41 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS45 INS42 INS32 INS42 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS32 INS32 INS42 INS42 INS42 INS40 INS43 INS27 INS42 INS32 INS42 INS14 INS43 INS45 INS32 INS42 INS43 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS45 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS45 INS27 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS14 INS32 INS43 INS60 INS25 INS53 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS74 INS1 INS42 INS42 INS42 INS43 INS59 INS62 INS8 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS31 INS42 INS42 INS11 INS32 INS43 INS60 INS60 INS41 INS53 INS42 INS42 INS40 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS43 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS43 INS59 INS32 INS32 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42