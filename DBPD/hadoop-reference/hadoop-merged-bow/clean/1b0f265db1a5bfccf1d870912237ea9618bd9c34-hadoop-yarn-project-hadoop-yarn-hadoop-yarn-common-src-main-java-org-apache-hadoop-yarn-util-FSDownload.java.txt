YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi

+import java.io.InputStream;
+import java.io.OutputStream;
+import org.apache.commons.io.IOUtils;
+import org.apache.hadoop.yarn.exceptions.YarnException;
-  private Path copy(Path sCopy, Path dstdir) throws IOException {
+  /**
+   * Localize files.
+   * @param destination destination directory
+   * @throws IOException cannot read or write file
+   * @throws YarnException subcommand returned an error
+   */
+  private void verifyAndCopy(Path destination)
+      throws IOException, YarnException {
+    final Path sCopy;
+    try {
+      sCopy = resource.getResource().toPath();
+    } catch (URISyntaxException e) {
+      throw new IOException("Invalid resource", e);
+    }
-    Path dCopy = new Path(dstdir, "tmp_"+sCopy.getName());
-    FileUtil.copy(sourceFs, sStat, FileSystem.getLocal(conf), dCopy, false,
-        true, conf);
-    return dCopy;
+    downloadAndUnpack(sCopy, destination);
-  private long unpack(File localrsrc, File dst) throws IOException {
-    switch (resource.getType()) {
-    case ARCHIVE: {
-      String lowerDst = StringUtils.toLowerCase(dst.getName());
-      if (lowerDst.endsWith(".jar")) {
-        RunJar.unJar(localrsrc, dst);
-      } else if (lowerDst.endsWith(".zip")) {
-        FileUtil.unZip(localrsrc, dst);
-      } else if (lowerDst.endsWith(".tar.gz") ||
-                 lowerDst.endsWith(".tgz") ||
-                 lowerDst.endsWith(".tar")) {
-        FileUtil.unTar(localrsrc, dst);
+  /**
+   * Copy source path to destination with localization rules.
+   * @param source source path to copy. Typically HDFS
+   * @param destination destination path. Typically local filesystem
+   * @exception YarnException Any error has occurred
+   */
+  private void downloadAndUnpack(Path source, Path destination)
+      throws YarnException {
+    try {
+      FileSystem sourceFileSystem = source.getFileSystem(conf);
+      FileSystem destinationFileSystem = destination.getFileSystem(conf);
+      if (sourceFileSystem.getFileStatus(source).isDirectory()) {
+        FileUtil.copy(
+            sourceFileSystem, source,
+            destinationFileSystem, destination, false,
+            true, conf);
-        LOG.warn("Cannot unpack " + localrsrc);
-        if (!localrsrc.renameTo(dst)) {
-            throw new IOException("Unable to rename file: [" + localrsrc
-              + "] to [" + dst + "]");
-        }
+        unpack(source, destination, sourceFileSystem, destinationFileSystem);
+    } catch (Exception e) {
+      throw new YarnException("Download and unpack failed", e);
-    break;
-    case PATTERN: {
+  }
+
+  /**
+   * Do the localization action on the input stream.
+   * We use the deprecated method RunJar.unJarAndSave for compatibility reasons.
+   * We should use the more efficient RunJar.unJar in the future.
+   * @param source Source path
+   * @param destination Destination pth
+   * @param sourceFileSystem Source filesystem
+   * @param destinationFileSystem Destination filesystem
+   * @throws IOException Could not read or write stream
+   * @throws InterruptedException Operation interrupted by caller
+   * @throws ExecutionException Could not create thread pool execution
+   */
+  @SuppressWarnings("deprecation")
+  private void unpack(Path source, Path destination,
+                      FileSystem sourceFileSystem,
+                      FileSystem destinationFileSystem)
+      throws IOException, InterruptedException, ExecutionException {
+    try (InputStream inputStream = sourceFileSystem.open(source)) {
+      File dst = new File(destination.toUri());
-      if (lowerDst.endsWith(".jar")) {
-        String p = resource.getPattern();
-        RunJar.unJar(localrsrc, dst,
-            p == null ? RunJar.MATCH_ANY : Pattern.compile(p));
-        File newDst = new File(dst, dst.getName());
-        if (!dst.exists() && !dst.mkdir()) {
-          throw new IOException("Unable to create directory: [" + dst + "]");
+      switch (resource.getType()) {
+      case ARCHIVE:
+        if (lowerDst.endsWith(".jar")) {
+          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);
+        } else if (lowerDst.endsWith(".zip")) {
+          FileUtil.unZip(inputStream, dst);
+        } else if (lowerDst.endsWith(".tar.gz") ||
+            lowerDst.endsWith(".tgz") ||
+            lowerDst.endsWith(".tar")) {
+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith("gz"));
+        } else {
+          LOG.warn("Cannot unpack " + source);
+          try (OutputStream outputStream =
+                   destinationFileSystem.create(destination, true)) {
+            IOUtils.copy(inputStream, outputStream);
+          }
-        if (!localrsrc.renameTo(newDst)) {
-          throw new IOException("Unable to rename file: [" + localrsrc
-              + "] to [" + newDst + "]");
+        break;
+      case PATTERN:
+        if (lowerDst.endsWith(".jar")) {
+          String p = resource.getPattern();
+          if (!dst.exists() && !dst.mkdir()) {
+            throw new IOException("Unable to create directory: [" + dst + "]");
+          }
+          RunJar.unJarAndSave(inputStream, dst, source.getName(),
+              p == null ? RunJar.MATCH_ANY : Pattern.compile(p));
+        } else if (lowerDst.endsWith(".zip")) {
+          LOG.warn("Treating [" + source + "] as an archive even though it " +
+              "was specified as PATTERN");
+          FileUtil.unZip(inputStream, dst);
+        } else if (lowerDst.endsWith(".tar.gz") ||
+            lowerDst.endsWith(".tgz") ||
+            lowerDst.endsWith(".tar")) {
+          LOG.warn("Treating [" + source + "] as an archive even though it " +
+              "was specified as PATTERN");
+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith("gz"));
+        } else {
+          LOG.warn("Cannot unpack " + source);
+          try (OutputStream outputStream =
+                   destinationFileSystem.create(destination, true)) {
+            IOUtils.copy(inputStream, outputStream);
+          }
-      } else if (lowerDst.endsWith(".zip")) {
-        LOG.warn("Treating [" + localrsrc + "] as an archive even though it " +
-        		"was specified as PATTERN");
-        FileUtil.unZip(localrsrc, dst);
-      } else if (lowerDst.endsWith(".tar.gz") ||
-                 lowerDst.endsWith(".tgz") ||
-                 lowerDst.endsWith(".tar")) {
-        LOG.warn("Treating [" + localrsrc + "] as an archive even though it " +
-        "was specified as PATTERN");
-        FileUtil.unTar(localrsrc, dst);
-      } else {
-        LOG.warn("Cannot unpack " + localrsrc);
-        if (!localrsrc.renameTo(dst)) {
-          throw new IOException("Unable to rename file: [" + localrsrc
-              + "] to [" + dst + "]");
+        break;
+      case FILE:
+      default:
+        try (OutputStream outputStream =
+                 destinationFileSystem.create(destination, true)) {
+          IOUtils.copy(inputStream, outputStream);
+        break;
+      // TODO Should calculate here before returning
+      //return FileUtil.getDU(destDir);
-    break;
-    case FILE:
-    default:
-      if (!localrsrc.renameTo(dst)) {
-        throw new IOException("Unable to rename file: [" + localrsrc
-          + "] to [" + dst + "]");
-      }
-      break;
-    }
-    if(localrsrc.isFile()){
-      try {
-        files.delete(new Path(localrsrc.toString()), false);
-      } catch (IOException ignore) {
-      }
-    }
-    return 0;
-    // TODO Should calculate here before returning
-    //return FileUtil.getDU(destDir);
-      LOG.debug("Starting to download " + sCopy);
+      LOG.debug(String.format("Starting to download %s %s %s",
+          sCopy,
+          resource.getType(),
+          resource.getPattern()));
-    createDir(destDirPath, cachePerms);
-    final Path dst_work = new Path(destDirPath + "_tmp");
-    createDir(dst_work, cachePerms);
-    Path dFinal = files.makeQualified(new Path(dst_work, sCopy.getName()));
+    final Path destinationTmp = new Path(destDirPath + "_tmp");
+    createDir(destinationTmp, PRIVATE_DIR_PERMS);
+    Path dFinal =
+        files.makeQualified(new Path(destinationTmp, sCopy.getName()));
-      Path dTmp = null == userUgi ? files.makeQualified(copy(sCopy, dst_work))
-          : userUgi.doAs(new PrivilegedExceptionAction<Path>() {
-            public Path run() throws Exception {
-              return files.makeQualified(copy(sCopy, dst_work));
-            };
-          });
-      unpack(new File(dTmp.toUri()), new File(dFinal.toUri()));
+      if (userUgi == null) {
+        verifyAndCopy(dFinal);
+      } else {
+        userUgi.doAs(new PrivilegedExceptionAction<Void>() {
+          @Override
+          public Void run() throws Exception {
+            verifyAndCopy(dFinal);
+            return null;
+          }
+        });
+      }
-      files.rename(dst_work, destDirPath, Rename.OVERWRITE);
+      files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);
-        LOG.debug("File has been downloaded to " +
-            new Path(destDirPath, sCopy.getName()));
+        LOG.debug(String.format("File has been downloaded to %s from %s",
+            new Path(destDirPath, sCopy.getName()), sCopy));
-        files.delete(dst_work, true);
+        files.delete(destinationTmp, true);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV43 INS31 INS29 INS39 INS42 INS44 UPD43 MOV60 INS29 INS83 INS39 INS42 INS44 MOV44 INS43 INS8 INS29 INS79 UPD39 MOV44 INS44 INS43 INS43 MOV21 INS65 INS65 INS65 INS65 MOV43 INS42 UPD42 INS54 INS21 INS65 INS65 INS65 INS65 MOV43 INS42 UPD42 INS42 INS54 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS45 UPD42 MOV43 INS42 UPD43 UPD42 UPD43 UPD42 INS42 INS42 INS54 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS83 INS43 INS59 INS8 INS12 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS8 INS12 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 UPD42 INS58 INS8 INS42 INS42 INS21 INS44 INS8 UPD42 MOV42 INS42 INS42 INS60 INS60 INS25 INS44 INS8 INS43 INS59 INS60 MOV60 INS50 UPD42 UPD42 UPD42 INS25 INS7 INS43 INS42 INS53 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS42 INS53 UPD42 MOV42 UPD42 MOV42 INS32 MOV43 INS59 MOV32 MOV49 INS25 MOV10 MOV49 INS25 MOV10 MOV49 MOV49 INS54 INS10 INS27 INS8 INS8 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS21 INS21 INS42 INS14 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS14 MOV32 MOV8 MOV25 MOV32 MOV8 MOV21 MOV25 INS58 MOV8 INS32 UPD42 MOV42 INS33 INS21 INS21 UPD42 INS32 UPD42 MOV42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS45 INS42 MOV43 INS32 MOV32 MOV32 INS43 INS59 INS42 INS42 INS45 INS42 INS32 INS32 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV27 MOV27 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV14 INS42 INS42 MOV32 UPD42 UPD42 INS40 INS54 UPD42 UPD42 INS32 INS54 UPD42 MOV42 UPD42 MOV42 INS42 INS9 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD74 UPD42 UPD42 INS45 MOV14 INS42 UPD42 INS58 INS8 INS42 INS42 UPD42 INS58 INS8 UPD43 UPD42 INS32 INS43 INS59 INS21 UPD42 UPD42 INS32 INS43 INS59 INS21 UPD42 INS78 UPD43 INS42 INS42 INS45 UPD42 INS42 INS42 INS32 INS32 UPD42 INS42 INS42 INS45 UPD42 INS42 INS42 INS32 INS32 INS42 UPD42 INS21 INS41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS9 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS9 INS42 INS42 INS42 INS42 INS32 INS33 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL9 DEL9 DEL32 DEL21 DEL42 DEL41 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL32 DEL14 DEL9 DEL43 DEL32 DEL32 DEL59 DEL60 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL38 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL10 DEL50 DEL32 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL34 DEL41 DEL45 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL45 DEL27