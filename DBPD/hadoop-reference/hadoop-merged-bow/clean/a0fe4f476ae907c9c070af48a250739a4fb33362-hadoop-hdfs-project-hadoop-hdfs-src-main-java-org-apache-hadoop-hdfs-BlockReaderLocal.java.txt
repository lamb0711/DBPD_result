Merge trunk into HA branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1213867 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.Socket;
+import org.apache.hadoop.hdfs.util.DirectBufferPool;
-class BlockReaderLocal extends RemoteBlockReader2 {
-  public static final Log LOG = LogFactory.getLog(DFSClient.class);
+class BlockReaderLocal implements BlockReader {
+  private static final Log LOG = LogFactory.getLog(DFSClient.class);
-
-  ByteBuffer dataBuff = null;
-  ByteBuffer checksumBuff = null;
+  private byte[] skipBuf = null;
+  private ByteBuffer dataBuff = null;
+  private ByteBuffer checksumBuff = null;
+  private DataChecksum checksum;
+  private final boolean verifyChecksum;
+
+  private static DirectBufferPool bufferPool = new DirectBufferPool();
+
+  private int bytesPerChecksum;
+  private int checksumSize;
+
+  /** offset in block where reader wants to actually read */
+  private long startOffset;
+  private final String filename;
-    super(hdfsfile, block.getBlockPoolId(), block.getBlockId(), dataIn
-        .getChannel(), checksum, verifyChecksum, startOffset, firstChunkOffset,
-        length, null);
+    this.filename = hdfsfile;
+    this.checksum = checksum;
+    this.verifyChecksum = verifyChecksum;
+    this.startOffset = Math.max(startOffset, 0);
+
+    bytesPerChecksum = this.checksum.getBytesPerChecksum();
+    checksumSize = this.checksum.getChecksumSize();
+
-        if (verifyChecksum) {
-          checksum.verifyChunkedSums(dataBuff, checksumBuff, filename,
-              this.startOffset);
-        }
+        checksum.verifyChunkedSums(dataBuff, checksumBuff, filename,
+            this.startOffset);
-    } else {
-     return super.skip(n);
+    // Skip by reading the data so we stay in sync with checksums.
+    // This could be implemented more efficiently in the future to
+    // skip to the beginning of the appropriate checksum chunk
+    // and then only read to the middle of that chunk.
+    if (skipBuf == null) {
+      skipBuf = new byte[bytesPerChecksum];
+    }
+    long nSkipped = 0;
+    while ( nSkipped < n ) {
+      int toSkip = (int)Math.min(n-nSkipped, skipBuf.length);
+      int ret = read(skipBuf, 0, toSkip);
+      if ( ret <= 0 ) {
+        return nSkipped;
+      }
+      nSkipped += ret;
+    }
+    return nSkipped;
-    super.close();
+    startOffset = -1;
+    checksum = null;
+  }
+
+  @Override
+  public int readAll(byte[] buf, int offset, int len) throws IOException {
+    return BlockReaderUtil.readAll(this, buf, offset, len);
+  }
+
+  @Override
+  public void readFully(byte[] buf, int off, int len) throws IOException {
+    BlockReaderUtil.readFully(this, buf, off, len);
+  }
+
+  @Override
+  public Socket takeSocket() {
+    return null;
+  }
+
+  @Override
+  public boolean hasSentStatusCode() {
+    return false;

INS26 INS26 INS40 INS40 UPD43 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 UPD42 UPD83 INS83 INS5 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS39 INS85 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS65 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 MOV25 MOV25 INS25 INS60 INS61 INS41 INS21 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS41 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS42 INS42 INS41 INS42 INS41 INS43 INS66 INS7 INS7 INS7 INS7 INS7 INS7 INS27 INS8 INS39 INS59 INS27 INS8 INS42 INS7 INS7 INS39 INS85 INS32 INS39 INS85 INS32 INS33 INS9 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS32 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS42 INS34 INS42 INS42 INS60 INS60 INS25 INS21 INS42 INS38 INS42 INS33 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS22 INS42 INS22 INS42 INS7 INS39 INS59 INS39 INS59 INS27 INS8 INS7 INS34 INS52 INS42 INS52 INS42 MOV21 INS42 INS3 INS42 INS11 INS42 INS32 INS42 INS34 INS41 INS42 INS42 INS5 INS42 INS39 INS32 INS42 INS42 INS34 INS42 INS42 INS39 INS85 INS42 INS42 INS27 INS40 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL46 DEL42 DEL8 DEL25 DEL42 DEL42 DEL48 DEL41 DEL8 DEL8 DEL42 DEL48