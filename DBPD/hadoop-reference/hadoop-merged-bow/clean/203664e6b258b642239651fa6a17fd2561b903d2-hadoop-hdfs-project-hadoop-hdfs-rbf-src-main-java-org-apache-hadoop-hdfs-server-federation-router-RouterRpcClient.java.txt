HDFS-14454. RBF: getContentSummary() should allow non-existing folders. Contributed by Inigo Goiri.

-  @SuppressWarnings("unchecked")
+    final List<RemoteResult<T, R>> results = invokeConcurrent(
+        locations, method, standby, timeOutMs, clazz);
+
+    final Map<T, R> ret = new TreeMap<>();
+    for (final RemoteResult<T, R> result : results) {
+      // Response from all servers required, use this error.
+      if (requireResponse && result.hasException()) {
+        throw result.getException();
+      }
+      if (result.hasResult()) {
+        ret.put(result.getLocation(), result.getResult());
+      }
+    }
+
+    // Throw the exception for the first location if there are no results
+    if (ret.isEmpty()) {
+      final RemoteResult<T, R> result = results.get(0);
+      if (result.hasException()) {
+        throw result.getException();
+      }
+    }
+
+    return ret;
+  }
+
+  /**
+   * Invokes multiple concurrent proxy calls to different clients. Returns an
+   * array of results.
+   *
+   * Re-throws exceptions generated by the remote RPC call as either
+   * RemoteException or IOException.
+   *
+   * @param <T> The type of the remote location.
+   * @param <R> The type of the remote method return
+   * @param locations List of remote locations to call concurrently.
+   * @param method The remote method and parameters to invoke.
+   * @param standby If the requests should go to the standby namenodes too.
+   * @param timeOutMs Timeout for each individual call.
+   * @param clazz Type of the remote return type.
+   * @return Result of invoking the method per subcluster (list of results).
+   *         This includes the exception for each remote location.
+   * @throws IOException If there are errors invoking the method.
+   */
+  @SuppressWarnings("unchecked")
+  public <T extends RemoteLocationContext, R> List<RemoteResult<T, R>>
+      invokeConcurrent(final Collection<T> locations,
+          final RemoteMethod method, boolean standby, long timeOutMs,
+          Class<R> clazz) throws IOException {
-        Object result = invokeMethod(ugi, namenodes, proto, m, paramList);
-        return Collections.singletonMap(location, (R) result);
+        R result = (R) invokeMethod(ugi, namenodes, proto, m, paramList);
+        RemoteResult<T, R> remoteResult = new RemoteResult<>(location, result);
+        return Collections.singletonList(remoteResult);
-      Map<T, R> results = new TreeMap<>();
-      Map<T, IOException> exceptions = new TreeMap<>();
+      List<RemoteResult<T, R>> results = new ArrayList<>();
-          Object result = future.get();
-          results.put(location, (R) result);
+          R result = (R) future.get();
+          results.add(new RemoteResult<>(location, result));
-          exceptions.put(location, ioe);
+          results.add(new RemoteResult<>(location, ioe));
-          // Response from all servers required, use this error.
-          if (requireResponse) {
-            throw ioe;
-          }
-
-          exceptions.put(location, ioe);
-        }
-      }
-
-      // Throw the exception for the first location if there are no results
-      if (results.isEmpty()) {
-        T location = orderedLocations.get(0);
-        IOException ioe = exceptions.get(location);
-        if (ioe != null) {
-          throw ioe;
+          results.add(new RemoteResult<>(location, ioe));

INS31 MOV29 INS83 INS73 INS73 MOV74 INS42 INS44 INS44 MOV44 INS44 INS44 INS44 MOV43 INS8 INS29 INS74 INS42 INS43 INS42 INS83 INS74 INS42 INS83 INS43 INS42 INS39 INS42 INS39 INS42 INS74 INS42 INS60 MOV60 INS70 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS74 INS42 INS43 INS43 INS42 INS43 INS43 INS83 INS74 INS59 INS83 INS44 INS42 INS8 INS32 INS8 INS42 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS32 UPD42 INS83 INS74 INS42 INS25 INS25 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS27 INS8 INS32 INS8 INS83 INS74 INS59 INS32 INS8 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS21 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS53 INS43 INS74 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS60 INS41 INS42 UPD43 MOV43 MOV43 UPD43 MOV43 UPD74 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 MOV43 INS74 INS59 INS32 UPD42 UPD42 UPD43 INS42 INS42 INS42 INS42 UPD42 MOV42 INS11 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 UPD42 UPD43 MOV43 MOV32 INS42 INS42 MOV42 INS74 INS42 INS42 UPD42 INS11 UPD42 INS14 INS42 INS43 INS43 MOV32 INS74 INS42 INS42 UPD42 INS42 INS14 UPD42 INS42 INS14 INS42 INS42 INS43 INS74 INS42 INS42 INS74 INS42 INS42 UPD42 MOV42 INS43 INS43 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL11 DEL32 DEL41 DEL74 DEL42 DEL42 DEL11 DEL42 DEL42 DEL42 DEL42 DEL42 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL25 DEL8 DEL25