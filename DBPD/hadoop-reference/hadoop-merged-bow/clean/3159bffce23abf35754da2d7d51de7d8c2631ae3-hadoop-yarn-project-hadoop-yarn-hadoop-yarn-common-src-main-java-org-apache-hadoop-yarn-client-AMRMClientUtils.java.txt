YARN-7900. [AMRMProxy] AMRMClientRelayer for stateful FederationInterceptor. (Botong Huang via asuresh)

-package org.apache.hadoop.yarn.server.utils;
+package org.apache.hadoop.yarn.client;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
-import org.apache.hadoop.yarn.client.ClientRMProxy;
+import org.apache.hadoop.yarn.api.records.Container;
+import org.apache.hadoop.yarn.api.records.SchedulingRequest;
+
+  public static void addToOutstandingSchedulingRequests(
+      Collection<SchedulingRequest> requests,
+      Map<Set<String>, List<SchedulingRequest>> outstandingSchedRequests) {
+    for (SchedulingRequest req : requests) {
+      List<SchedulingRequest> schedulingRequests = outstandingSchedRequests
+          .computeIfAbsent(req.getAllocationTags(), x -> new LinkedList<>());
+      SchedulingRequest matchingReq = null;
+      for (SchedulingRequest schedReq : schedulingRequests) {
+        if (isMatchingSchedulingRequests(req, schedReq)) {
+          matchingReq = schedReq;
+          break;
+        }
+      }
+      if (matchingReq != null) {
+        matchingReq.getResourceSizing()
+            .setNumAllocations(req.getResourceSizing().getNumAllocations());
+      } else {
+        schedulingRequests.add(req);
+      }
+    }
+  }
+
+  public static boolean isMatchingSchedulingRequests(
+      SchedulingRequest schedReq1, SchedulingRequest schedReq2) {
+    return schedReq1.getPriority().equals(schedReq2.getPriority()) &&
+        schedReq1.getExecutionType().getExecutionType().equals(
+            schedReq1.getExecutionType().getExecutionType()) &&
+        schedReq1.getAllocationRequestId() ==
+            schedReq2.getAllocationRequestId();
+  }
+
+  public static void removeFromOutstandingSchedulingRequests(
+      Collection<Container> containers,
+      Map<Set<String>, List<SchedulingRequest>> outstandingSchedRequests) {
+    if (containers == null || containers.isEmpty()) {
+      return;
+    }
+    for (Container container : containers) {
+      if (container.getAllocationTags() != null
+          && !container.getAllocationTags().isEmpty()) {
+        List<SchedulingRequest> schedReqs =
+            outstandingSchedRequests.get(container.getAllocationTags());
+        if (schedReqs != null && !schedReqs.isEmpty()) {
+          Iterator<SchedulingRequest> iter = schedReqs.iterator();
+          while (iter.hasNext()) {
+            SchedulingRequest schedReq = iter.next();
+            if (schedReq.getPriority().equals(container.getPriority())
+                && schedReq.getAllocationRequestId() == container
+                    .getAllocationRequestId()) {
+              int numAllocations =
+                  schedReq.getResourceSizing().getNumAllocations();
+              numAllocations--;
+              if (numAllocations == 0) {
+                iter.remove();
+              } else {
+                schedReq.getResourceSizing().setNumAllocations(numAllocations);
+              }
+            }
+          }
+        }
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS74 INS42 INS74 INS42 INS70 INS43 INS42 INS43 INS42 INS41 INS74 INS42 INS74 INS42 INS25 INS70 INS43 INS43 INS43 INS74 INS74 INS44 INS42 INS8 INS42 INS42 INS27 INS43 INS43 INS43 INS74 INS74 INS27 INS8 INS44 INS42 INS8 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS42 INS60 INS60 INS70 INS25 INS32 INS32 INS27 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS27 INS32 INS41 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS8 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS27 INS8 INS43 INS43 INS42 INS32 INS42 INS42 INS33 INS43 INS42 INS25 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS38 INS60 INS25 INS42 INS42 INS42 INS42 INS32 INS86 INS42 INS32 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS33 INS32 INS74 INS59 INS27 INS8 INS42 INS42 INS59 INS14 INS42 INS42 INS42 INS21 INS10 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS32 INS27 INS38 INS60 INS61 INS42 INS74 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS32 INS74 INS59 INS32 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS32 INS27 INS60 INS21 INS25 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS39 INS59 INS37 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS21 INS21 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42