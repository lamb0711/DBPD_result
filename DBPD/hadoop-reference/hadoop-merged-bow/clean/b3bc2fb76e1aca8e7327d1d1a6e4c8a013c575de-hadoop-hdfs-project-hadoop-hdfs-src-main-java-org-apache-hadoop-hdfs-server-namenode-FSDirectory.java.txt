HDFS-4147. When there is a snapshot in a subtree, deletion of the subtree should fail. Contributed by Jing Zhao 


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1405688 13f79535-47bb-0310-9956-ffa450edef68

-    throws UnresolvedLinkException {
+    throws IOException {
-      filesRemoved = unprotectedDelete(src, collectedBlocks, now);
+      INode[] inodes = rootDir.getExistingPathINodes(normalizePath(src), false);
+      if (checkPathINodes(inodes, src) == 0) {
+        filesRemoved = 0;
+      } else {
+        // Before removing the node, first check if the targetNode is for a
+        // snapshottable dir with snapshots, or its descendants have
+        // snapshottable dir with snapshots
+        INode targetNode = inodes[inodes.length-1];
+        INode snapshotNode = hasSnapshot(targetNode);
+        if (snapshotNode != null) {
+          throw new IOException("The direcotry " + targetNode.getFullPathName()
+              + " cannot be deleted since " + snapshotNode.getFullPathName()
+              + " is snapshottable and already has snapshots");
+        }
+        filesRemoved = unprotectedDelete(inodes, collectedBlocks, now);
+      }
+  private int checkPathINodes(INode[] inodes, String src) {
+    if (inodes == null || inodes.length == 0
+        || inodes[inodes.length - 1] == null) {
+      if(NameNode.stateChangeLog.isDebugEnabled()) {
+        NameNode.stateChangeLog.debug("DIR* FSDirectory.unprotectedDelete: "
+            + "failed to remove " + src + " because it does not exist");
+      }
+      return 0;
+    } else if (inodes.length == 1) { // src is the root
+      NameNode.stateChangeLog.warn("DIR* FSDirectory.unprotectedDelete: "
+          + "failed to remove " + src
+          + " because the root is not allowed to be deleted");
+      return 0;
+    }
+    return inodes.length;
+  }
+  
-    int filesRemoved = unprotectedDelete(src, collectedBlocks, mtime);
+    int filesRemoved = 0;
+
+    INode[] inodes =  rootDir.getExistingPathINodes(normalizePath(src), false);
+    if (checkPathINodes(inodes, src) == 0) {
+      filesRemoved = 0;
+    } else {
+      filesRemoved = unprotectedDelete(inodes, collectedBlocks, mtime);
+    }
-   * @param src a string representation of a path to an inode
+   * @param inodes the INode array resolved from the path
-  int unprotectedDelete(String src, List<Block> collectedBlocks, 
-      long mtime) throws UnresolvedLinkException {
+  int unprotectedDelete(INode[] inodes, List<Block> collectedBlocks, 
+      long mtime) {
-    src = normalizePath(src);
-
-    INode[] inodes =  rootDir.getExistingPathINodes(src, false);
+    
-
-    if (targetNode == null) { // non-existent src
-      if(NameNode.stateChangeLog.isDebugEnabled()) {
-        NameNode.stateChangeLog.debug("DIR* FSDirectory.unprotectedDelete: "
-            +"failed to remove "+src+" because it does not exist");
-      }
-      return 0;
-    }
-    if (inodes.length == 1) { // src is the root
-      NameNode.stateChangeLog.warn("DIR* FSDirectory.unprotectedDelete: " +
-          "failed to remove " + src +
-          " because the root is not allowed to be deleted");
-      return 0;
-    }
-          +src+" is removed");
+          + targetNode.getFullPathName() + " is removed");
+  
+  /**
+   * Check if the given INode (or one of its descendants) is snapshottable and
+   * already has snapshots.
+   * 
+   * @param target The given INode
+   * @return The INode which is snapshottable and already has snapshots.
+   */
+  private static INode hasSnapshot(INode target) {
+    if (target instanceof INodeDirectory) {
+      INodeDirectory targetDir = (INodeDirectory) target;
+      if (targetDir.isSnapshottable()
+          && ((INodeDirectorySnapshottable) targetDir).getNumSnapshots() > 0) {
+        return target;
+      }
+      for (INode child : targetDir.getChildren()) {
+        INode snapshotDir = hasSnapshot(child);
+        if (snapshotDir != null) {
+          return snapshotDir;
+        }
+      }
+    }
+    return null;
+  }

INS31 INS31 UPD43 INS83 INS39 INS42 INS44 MOV44 INS8 INS44 INS29 INS83 INS83 INS43 INS42 INS44 INS8 UPD42 INS5 INS42 MOV25 INS41 INS60 INS60 INS25 INS5 INS42 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS41 INS8 INS43 INS85 INS27 MOV25 INS40 MOV39 INS59 MOV5 INS59 INS27 INS8 INS8 UPD42 UPD66 INS43 INS85 INS66 INS66 INS42 INS66 INS66 INS42 INS62 INS8 INS33 INS60 INS25 INS42 INS27 INS27 MOV42 INS34 INS42 INS32 INS32 INS34 INS21 INS21 UPD42 MOV42 INS42 INS43 INS60 INS25 INS70 INS5 INS59 INS27 INS8 INS8 INS27 INS27 INS2 INS33 INS42 INS42 MOV32 INS9 INS42 INS42 INS42 INS7 INS7 INS42 INS43 INS59 INS27 INS8 INS44 INS32 INS8 INS43 INS85 INS42 INS32 INS32 INS34 INS21 INS60 INS60 INS25 MOV21 UPD42 MOV42 MOV33 INS40 INS34 INS42 INS27 INS42 INS34 INS42 INS32 INS42 INS42 INS11 INS32 INS27 INS41 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS7 INS43 INS59 INS43 INS59 INS27 INS8 INS40 INS34 MOV42 UPD42 MOV42 MOV42 MOV42 INS32 INS43 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS34 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS27 INS42 INS42 INS14 UPD42 INS11 INS42 INS42 INS42 INS40 INS34 INS43 INS27 INS43 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 DEL8 DEL27 DEL32 DEL59 DEL60 DEL43 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42