HDDS-656. Add logic for pipeline report and action processing in new pipeline code. Contributed by Lokesh Jain.

+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationFactor;
-import org.apache.hadoop.hdds.protocol.proto.HddsProtos.LifeCycleState;
+import org.apache.hadoop.hdds.scm.pipeline.Pipeline.PipelineState;
+    // TODO: Use TreeMap for range operations?
-    // TODO: verify the state we need the pipeline to be in
-    if (!isOpen(pipeline)) {
+    if (!pipeline.isOpen()) {
-  List<Pipeline> getPipelines(ReplicationType type) {
+  List<Pipeline> getPipelinesByType(ReplicationType type) {
-   * Get set of containers corresponding to a pipeline.
+   * Get open pipeline corresponding to specified replication type and factor.
+   *
+   * @param type - ReplicationType
+   * @param factor - ReplicationFactor
+   * @return List of open pipelines with specified replication type and factor
+   */
+  List<Pipeline> getPipelinesByTypeAndFactor(ReplicationType type,
+      ReplicationFactor factor) {
+    return pipelineMap.values().stream()
+        .filter(pipeline -> pipeline.isOpen() && pipeline.getType() == type
+            && pipeline.getFactor() == factor)
+        .collect(Collectors.toList());
+  }
+
+  /**
+   * Get set of containerIDs corresponding to a pipeline.
-   * @return Set of Containers belonging to the pipeline
+   * @return Set of containerIDs belonging to the pipeline
+   * Get number of containers corresponding to a pipeline.
+   *
+   * @param pipelineID - PipelineID
+   * @return Number of containers belonging to the pipeline
+   * @throws IOException if pipeline is not found
+   */
+  int getNumberOfContainers(PipelineID pipelineID) throws IOException {
+    Set<ContainerID> containerIDs = pipeline2container.get(pipelineID);
+    if (containerIDs == null) {
+      throw new IOException(String.format("%s not found", pipelineID));
+    }
+    return containerIDs.size();
+  }
+
+  /**
-    //TODO: Add a flag which suppresses exception if pipeline does not exist?
-    Set<ContainerID> containerIDs = getContainers(pipelineID);
+    Pipeline pipeline = getPipeline(pipelineID);
+    if (!pipeline.isClosed()) {
+      throw new IOException(
+          String.format("Pipeline with %s is not yet closed", pipelineID));
+    }
+
+    Set<ContainerID> containerIDs = pipeline2container.get(pipelineID);
+
-    Pipeline pipeline = getPipeline(pipelineID);
-    if (containerIDs.size() == 0 && isClosingOrClosed(pipeline)) {
-      removePipeline(pipelineID);
-    }
-  Pipeline updatePipelineState(PipelineID pipelineID, LifeCycleState state)
+  Pipeline updatePipelineState(PipelineID pipelineID, PipelineState state)
-    Pipeline pipeline = getPipeline(pipelineID);
-    pipeline = pipelineMap
-        .put(pipelineID, Pipeline.newBuilder(pipeline).setState(state).build());
-    // TODO: Verify if need to throw exception for non-existent pipeline
-    return pipeline;
-  }
-
-  private boolean isClosingOrClosed(Pipeline pipeline) {
-    LifeCycleState state = pipeline.getLifeCycleState();
-    return state == LifeCycleState.CLOSING || state == LifeCycleState.CLOSED;
-  }
-
-  private boolean isOpen(Pipeline pipeline) {
-    return pipeline.getLifeCycleState() == LifeCycleState.OPEN;
+    final Pipeline pipeline = getPipeline(pipelineID);
+    return pipelineMap.compute(pipelineID,
+        (id, p) -> Pipeline.newBuilder(pipeline).setState(state).build());

MOV26 INS26 MOV31 MOV31 UPD40 INS40 UPD42 INS29 INS74 INS42 INS44 INS44 INS8 INS29 UPD39 UPD42 INS43 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 UPD43 UPD42 INS42 INS60 INS25 INS41 MOV60 INS25 UPD43 INS66 INS42 INS66 INS42 INS66 INS66 INS42 MOV42 UPD42 MOV42 INS42 INS32 UPD66 UPD66 INS66 INS42 INS66 INS66 INS42 INS66 UPD42 INS74 INS59 INS27 INS8 MOV32 INS38 INS8 UPD42 INS83 MOV32 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS53 INS32 INS53 UPD42 INS86 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS14 INS42 INS42 INS14 UPD42 INS42 INS59 INS59 MOV32 INS32 INS42 INS59 INS27 INS43 INS32 INS43 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS27 MOV27 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS32 MOV27 INS32 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 DEL42 DEL40 DEL42 DEL40 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL32 DEL59 DEL60 DEL27 DEL41 DEL8 DEL83 DEL32 DEL40 DEL27 DEL41 DEL34 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21 DEL42