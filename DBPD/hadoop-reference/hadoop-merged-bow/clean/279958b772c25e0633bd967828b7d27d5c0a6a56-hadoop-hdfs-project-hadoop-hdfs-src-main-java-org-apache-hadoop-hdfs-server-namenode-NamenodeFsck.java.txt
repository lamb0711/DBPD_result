HDFS-7281. Missing block is marked as corrupted block (Ming Ma via Yongjun Zhang)

+    long corruptSize = 0;
+        res.addCorrupt(block.getNumBytes());
-        res.corruptBlocks++;
-        out.print("\n" + path + ": CORRUPT blockpool " + block.getBlockPoolId() + 
-            " block " + block.getBlockName()+"\n");
+        corruptSize += block.getNumBytes();
+        out.print("\n" + path + ": CORRUPT blockpool " +
+            block.getBlockPoolId() + " block " + block.getBlockName() + "\n");
-      if (totalReplicasPerBlock == 0) {
+      if (totalReplicasPerBlock == 0 && !isCorrupt) {
+        // If the block is corrupted, it means all its available replicas are
+        // corrupted. We don't mark it as missing given these available replicas
+        // might still be accessible as the block might be incorrectly marked as
+        // corrupted by client machines.
-      if (!showFiles && (missing > 0)) {
-        out.print("\n" + path + ": MISSING " + missing
-            + " blocks of total size " + missize + " B.");
+      if (!showFiles) {
+        if (missing > 0) {
+          out.print("\n" + path + ": MISSING " + missing
+              + " blocks of total size " + missize + " B.");
+        }
+        if (corrupt > 0) {
+          out.print("\n" + path + ": CORRUPT " + corrupt
+              + " blocks of total size " + corruptSize + " B.");
+        }
-      if (missing > 0) {
-        out.print(" MISSING " + missing + " blocks of total size " + missize + " B\n");
-      }  else if (underReplicatedPerFile == 0 && misReplicatedPerFile == 0) {
+      if (missing > 0 || corrupt > 0) {
+        if (missing > 0) {
+          out.print(" MISSING " + missing + " blocks of total size " +
+              missize + " B\n");
+        }
+        if (corrupt > 0) {
+          out.print(" CORRUPT " + corrupt + " blocks of total size " +
+              corruptSize + " B\n");
+        }
+      } else if (underReplicatedPerFile == 0 && misReplicatedPerFile == 0) {
+    long corruptSize = 0L;
-    
+
+    /** Add a corrupt block. */
+    void addCorrupt(long size) {
+      corruptBlocks++;
+      corruptSize += size;
+    }
+
-            res.append("\n  CORRUPT BLOCKS: \t").append(corruptBlocks);
+            res.append("\n  CORRUPT BLOCKS: \t").append(corruptBlocks).append(
+                "\n  CORRUPT SIZE:\t\t").append(corruptSize).append(" B");
-              getReplicationFactor()).append("\n Corrupt blocks:\t\t").append(
+              getReplicationFactor()).append("\n Missing blocks:\t\t").append(
+              missingIds.size()).append("\n Corrupt blocks:\t\t").append(

INS23 INS31 INS60 INS39 INS59 INS29 INS39 INS42 INS44 INS8 INS39 INS59 INS42 INS34 INS65 INS39 INS42 INS21 INS21 INS42 INS34 INS25 INS66 INS37 INS7 INS32 MOV21 INS27 MOV38 INS8 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS21 MOV27 INS38 MOV25 INS25 INS27 INS27 INS25 INS25 MOV32 INS42 INS45 INS32 INS7 INS42 MOV27 INS27 INS8 INS42 INS34 INS42 INS34 MOV27 MOV8 INS27 INS8 UPD42 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS21 INS42 INS34 INS21 UPD45 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS32 UPD45 UPD42 MOV42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 MOV32 INS42 INS45 DEL40 DEL37 DEL36 DEL27