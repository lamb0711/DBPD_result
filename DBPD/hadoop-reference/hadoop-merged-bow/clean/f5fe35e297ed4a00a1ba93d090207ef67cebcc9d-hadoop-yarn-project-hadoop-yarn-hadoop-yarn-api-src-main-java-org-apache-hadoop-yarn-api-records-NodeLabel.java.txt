YARN-3413. Changed Nodelabel attributes (like exclusivity) to be settable only via addToClusterNodeLabels but not changeable at runtime. (Wangda Tan via vinodkv)

+import org.apache.hadoop.classification.InterfaceAudience.Private;
-public abstract class NodeLabel {
-  @Public
+public abstract class NodeLabel implements Comparable<NodeLabel> {
+  /**
+   * By default, node label is exclusive or not
+   */
+  @Private
-  public static NodeLabel newInstance(String nodeLabel,
-      boolean isExclusive) {
-    NodeLabel request =
-        Records.newRecord(NodeLabel.class);
-    request.setNodeLabel(nodeLabel);
-    request.setIsExclusive(isExclusive);
+  public static final boolean DEFAULT_NODE_LABEL_EXCLUSIVITY = true;
+
+  @Private
+  @Unstable
+  public static NodeLabel newInstance(String name) {
+    return newInstance(name, DEFAULT_NODE_LABEL_EXCLUSIVITY);
+  }
+
+  @Private
+  @Unstable
+  public static NodeLabel newInstance(String name, boolean isExclusive) {
+    NodeLabel request = Records.newRecord(NodeLabel.class);
+    request.setName(name);
+    request.setExclusivity(isExclusive);
-  
+
-  public abstract String getNodeLabel();
-  
-  @Public
+  public abstract String getName();
+
+  @Private
-  public abstract void setNodeLabel(String nodeLabel);
-  
+  public abstract void setName(String name);
+
-  public abstract boolean getIsExclusive();
-  
-  @Public
+  public abstract boolean isExclusive();
+
+  @Private
-  public abstract void setIsExclusive(boolean isExclusive);
+  public abstract void setExclusivity(boolean isExclusive);
+
+  @Override
+  public int compareTo(NodeLabel other) {
+    return getName().compareTo(other.getName());
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (obj instanceof NodeLabel) {
+      NodeLabel nl = (NodeLabel) obj;
+      return nl.getName().equals(getName())
+          && nl.isExclusive() == isExclusive();
+    }
+    return false;
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder();
+    sb.append("<");
+    sb.append(getName());
+    sb.append(":exclusivity=");
+    sb.append(isExclusive());
+    sb.append(">");
+    return sb.toString();
+  }
+
+  @Override
+  public int hashCode() {
+    return (getName().hashCode() << 16) + (isExclusive() ? 1 : 0);
+  }

INS26 MOV31 INS40 MOV78 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS31 INS31 INS31 INS43 INS43 INS29 INS78 INS78 INS83 INS83 INS83 INS39 INS59 MOV78 UPD83 INS43 INS42 MOV44 INS8 INS78 INS44 MOV78 MOV78 INS83 INS83 MOV43 INS42 MOV78 UPD42 MOV78 UPD42 INS78 INS78 UPD42 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS65 UPD42 MOV42 INS42 INS42 INS9 UPD42 INS42 UPD42 INS41 INS42 INS43 INS42 UPD42 UPD42 INS42 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS25 INS41 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS41 INS66 INS32 INS42 INS42 INS32 INS42 INS62 INS8 INS9 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS27 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS32 INS42 INS43 INS60 INS41 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS36 INS36 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS43 INS42 INS42 INS27 INS16 INS42 INS42 INS11 INS32 INS27 INS42 INS32 INS34 INS32 INS34 INS34 INS43 INS42 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL78 DEL83 DEL83 DEL42 DEL42