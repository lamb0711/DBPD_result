HDFS-11340. DataNode reconfigure for disks doesn't remove the failed volumes. (Manoj Govindassamy via lei)

-    List<StorageLocation> locations = getStorageLocations(conf);
+    List<StorageLocation> newStorageLocations = getStorageLocations(conf);
-    if (locations.isEmpty()) {
+    if (newStorageLocations.isEmpty()) {
-    // Use the existing StorageLocation to detect storage type changes.
-    Map<String, StorageLocation> existingLocations = new HashMap<>();
+    // Use the existing storage locations from the current conf
+    // to detect new storage additions or removals.
+    Map<String, StorageLocation> existingStorageLocations = new HashMap<>();
-      existingLocations.put(loc.getNormalizedUri().toString(), loc);
+      existingStorageLocations.put(loc.getNormalizedUri().toString(), loc);
-    results.newLocations.addAll(locations);
+    results.newLocations.addAll(newStorageLocations);
-      for (Iterator<StorageLocation> sl = results.newLocations.iterator();
-           sl.hasNext(); ) {
-        StorageLocation location = sl.next();
-        if (location.matchesStorageDirectory(dir)) {
-          sl.remove();
-          StorageLocation old = existingLocations.get(
-              location.getNormalizedUri().toString());
-          if (old != null &&
-              old.getStorageType() != location.getStorageType()) {
+      for (Iterator<StorageLocation> newLocationItr =
+           results.newLocations.iterator(); newLocationItr.hasNext();) {
+        StorageLocation newLocation = newLocationItr.next();
+        if (newLocation.matchesStorageDirectory(dir)) {
+          StorageLocation oldLocation = existingStorageLocations.get(
+              newLocation.getNormalizedUri().toString());
+          if (oldLocation != null &&
+              oldLocation.getStorageType() != newLocation.getStorageType()) {
-          results.unchangedLocations.add(location);
+          // Update the unchanged locations as this location
+          // from the new conf is really not a new one.
+          newLocationItr.remove();
+          results.unchangedLocations.add(newLocation);
+      // New conf doesn't have the storage location which available in
+      // the current storage locations. Add to the deactivateLocations list.
+        LOG.info("Deactivation request received for active volume: "
+            + dir.getRoot().toString());
+    // Use the failed storage locations from the current conf
+    // to detect removals in the new conf.
+    if (getFSDataset().getNumFailedVolumes() > 0) {
+      for (String failedStorageLocation : getFSDataset()
+          .getVolumeFailureSummary().getFailedStorageLocations()) {
+        boolean found = false;
+        for (Iterator<StorageLocation> newLocationItr =
+             results.newLocations.iterator(); newLocationItr.hasNext();) {
+          StorageLocation newLocation = newLocationItr.next();
+          if (newLocation.getNormalizedUri().toString().equals(
+              failedStorageLocation)) {
+            // The failed storage is being re-added. DataNode#refreshVolumes()
+            // will take care of re-assessing it.
+            found = true;
+            break;
+          }
+        }
+
+        // New conf doesn't have this failed storage location.
+        // Add to the deactivate locations list.
+        if (!found) {
+          LOG.info("Deactivation request received for failed volume: "
+              + failedStorageLocation);
+          results.deactivateLocations.add(StorageLocation.parse(
+              failedStorageLocation));
+        }
+      }
+    }
+
-      if (numOldDataDirs + changedVolumes.newLocations.size() -
-          changedVolumes.deactivateLocations.size() <= 0) {
+      if (numOldDataDirs + getFSDataset().getNumFailedVolumes()
+          + changedVolumes.newLocations.size()
+          - changedVolumes.deactivateLocations.size() <= 0) {

INS25 INS27 INS8 UPD42 UPD42 UPD42 UPD42 INS32 INS34 INS70 INS32 INS42 INS44 INS32 INS8 UPD42 UPD42 INS21 INS42 INS43 INS42 INS32 INS42 INS60 INS24 INS25 UPD42 INS32 INS42 INS32 INS42 INS39 INS59 INS58 INS32 INS8 INS38 INS8 UPD42 UPD42 INS21 INS42 INS42 INS27 INS42 INS42 INS9 INS74 INS59 INS42 INS42 INS60 INS25 INS42 INS21 INS21 INS32 UPD42 INS32 INS45 INS32 INS43 INS43 INS42 INS32 INS43 INS59 INS32 INS8 INS32 INS32 INS32 INS42 UPD42 INS42 INS42 UPD42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS21 INS10 INS42 INS42 INS27 INS40 INS42 INS32 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS45 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS9 UPD42 DEL42 DEL42 DEL32 DEL21