HADOOP-16697. Tune/audit S3A authoritative mode.

Contains:

HADOOP-16474. S3Guard ProgressiveRenameTracker to mark destination
              dirirectory as authoritative on success.
HADOOP-16684. S3guard bucket info to list a bit more about
              authoritative paths.
HADOOP-16722. S3GuardTool to support FilterFileSystem.

This patch improves the marking of newly created/import directory
trees in S3Guard DynamoDB tables as authoritative.

Specific changes:

 * Renamed directories are marked as authoritative if the entire
   operation succeeded (HADOOP-16474).
 * When updating parent table entries as part of any table write,
   there's no overwriting of their authoritative flag.

s3guard import changes:

* new -verbose flag to print out what is going on.

* The "s3guard import" command lets you declare that a directory tree
is to be marked as authoritative

  hadoop s3guard import -authoritative -verbose s3a://bucket/path

When importing a listing and a file is found, the import tool queries
the metastore and only updates the entry if the file is different from
before, where different == new timestamp, etag, or length. S3Guard can get
timestamp differences due to clock skew in PUT operations.

As the recursive list performed by the import command doesn't retrieve the
versionID, the existing entry may in fact be more complete.
When updating an existing due to clock skew the existing version ID
is propagated to the new entry (note: the etags must match; this is needed
to deal with inconsistent listings).

There is a new s3guard command to audit a s3guard bucket/path's
authoritative state:

  hadoop s3guard authoritative -check-config s3a://bucket/path

This is primarily for testing/auditing.

The s3guard bucket-info command also provides some more details on the
authoritative state of a store (HADOOP-16684).

Change-Id: I58001341c04f6f3597fcb4fcb1581ccefeb77d91

-import org.apache.hadoop.fs.s3a.S3AInstrumentation;
+import org.apache.hadoop.io.IOUtils;
-import static org.apache.hadoop.fs.s3a.Statistic.S3GUARD_METADATASTORE_PUT_PATH_LATENCY;
-import static org.apache.hadoop.fs.s3a.Statistic.S3GUARD_METADATASTORE_PUT_PATH_REQUEST;
+import static org.apache.hadoop.fs.s3a.s3guard.PathMetadataDynamoDBTranslation.authoritativeEmptyDirectoryMarker;
-   * @param instrumentation instrumentation of the s3a file system
-      S3AInstrumentation instrumentation,
-    return putAndReturn(ms, status, instrumentation, timeProvider, null);
+    return putAndReturn(ms, status, timeProvider, null);
-   * @param instrumentation instrumentation of the s3a file system
-      final S3AInstrumentation instrumentation,
-      instrumentation.addValueToQuantiles(
-          S3GUARD_METADATASTORE_PUT_PATH_LATENCY,
-          (System.nanoTime() - startTimeNano));
-      instrumentation.incrementCounter(
-          S3GUARD_METADATASTORE_PUT_PATH_REQUEST,
-          1);
+      ms.getInstrumentation().entryAdded((System.nanoTime() - startTimeNano));
+   * Creates an authoritative directory marker for the store.
+   * @param ms MetadataStore to {@code put()} into.
+   * @param status status to store
+   * @param timeProvider Time provider to use when writing entries
+   * @param operationState possibly-null metastore state tracker.
+   * @throws IOException if metadata store update failed
+   */
+  @RetryTranslated
+  public static void putAuthDirectoryMarker(
+      final MetadataStore ms,
+      final S3AFileStatus status,
+      final ITtlTimeProvider timeProvider,
+      @Nullable final BulkOperationState operationState) throws IOException {
+    long startTimeNano = System.nanoTime();
+    try {
+      final PathMetadata fileMeta = authoritativeEmptyDirectoryMarker(status);
+      putWithTtl(ms, fileMeta, timeProvider, operationState);
+    } finally {
+      ms.getInstrumentation().entryAdded((System.nanoTime() - startTimeNano));
+    }
+  }
+
+  /**
-
+    BulkOperationState operationState = ms.initiateBulkWrite(
+        BulkOperationState.OperationType.Listing,
+        path);
-          S3Guard.putWithTtl(ms, pathMetadata, timeProvider, null);
+          S3Guard.putWithTtl(ms, pathMetadata, timeProvider, operationState);
+      LOG.debug("Marking the directory {} as authoritative", path);
+      final MetastoreInstrumentation instrumentation
+          = ms.getInstrumentation();
+      if (instrumentation != null) {
+        instrumentation.directoryMarkedAuthoritative();
+      }
-      S3Guard.putWithTtl(ms, dirMeta, timeProvider, null);
+      S3Guard.putWithTtl(ms, dirMeta, timeProvider, operationState);
+    IOUtils.cleanupWithLogger(LOG, operationState);

MOV26 UPD40 UPD40 INS31 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 MOV65 MOV65 MOV65 MOV65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS78 INS83 INS43 INS42 INS42 INS60 INS54 INS60 INS21 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS8 INS8 INS43 INS59 INS32 INS66 INS42 INS32 INS60 INS21 INS21 INS42 INS42 INS32 INS21 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS32 INS42 INS42 INS40 INS42 INS32 INS83 INS43 INS59 INS27 INS8 INS32 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS36 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL66 DEL65 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL33 DEL33