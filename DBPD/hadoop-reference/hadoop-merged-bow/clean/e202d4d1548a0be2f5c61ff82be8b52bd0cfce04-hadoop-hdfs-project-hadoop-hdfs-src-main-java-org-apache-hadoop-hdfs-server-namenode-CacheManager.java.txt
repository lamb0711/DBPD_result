HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68

-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES_DEFAULT;
-import org.apache.hadoop.hdfs.protocol.PathBasedCacheEntry;
+import org.apache.hadoop.hdfs.protocol.PathBasedCacheDescriptor;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.InvalidIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.NoSuchIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.UnexpectedRemovePathBasedCacheEntryException;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.RemovePermissionDeniedException;
+import org.apache.hadoop.hdfs.protocol.PathBasedCacheEntry;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.InvalidIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.NoSuchIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.UnexpectedRemovePathBasedCacheDescriptorException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.RemovePermissionDeniedException;
-   * listPathBasedCacheEntries relies on the ordering of elements in this map 
+   * listPathBasedCacheDescriptors relies on the ordering of elements in this map 
-   * Cache entries, sorted by directive.
-   */
-  private final TreeMap<PathBasedCacheDirective, PathBasedCacheEntry> entriesByDirective =
-      new TreeMap<PathBasedCacheDirective, PathBasedCacheEntry>();
-
-  /**
-  private final int maxListCacheDirectivesResponses;
+  private final int maxListCacheDescriptorsResponses;
-    maxListCacheDirectivesResponses = conf.getInt(
-        DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES,
-        DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES_DEFAULT);
+    maxListCacheDescriptorsResponses = conf.getInt(
+        DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES,
+        DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES_DEFAULT);
-    entriesByDirective.clear();
-  private synchronized Fallible<PathBasedCacheEntry> addDirective(
+  private synchronized PathBasedCacheEntry
+      findEntry(PathBasedCacheDirective directive) {
+    List<PathBasedCacheEntry> existing =
+        entriesByPath.get(directive.getPath());
+    if (existing == null) {
+      return null;
+    }
+    for (PathBasedCacheEntry entry : existing) {
+      if (entry.getPool().getName().equals(directive.getPool())) {
+        return entry;
+      }
+    }
+    return null;
+  }
+
+  private synchronized Fallible<PathBasedCacheDescriptor> addDirective(
-      return new Fallible<PathBasedCacheEntry>(
+      return new Fallible<PathBasedCacheDescriptor>(
-      return new Fallible<PathBasedCacheEntry>(
+      return new Fallible<PathBasedCacheDescriptor>(
-      return new Fallible<PathBasedCacheEntry>(ioe);
+      return new Fallible<PathBasedCacheDescriptor>(ioe);
+    
-    PathBasedCacheEntry existing = entriesByDirective.get(directive);
+    PathBasedCacheEntry existing = findEntry(directive);
-      // Entry already exists: return existing entry.
-          "existing directive " + existing);
-      return new Fallible<PathBasedCacheEntry>(existing);
+          "existing directive " + existing + " in this pool.");
+      return new Fallible<PathBasedCacheDescriptor>(
+          existing.getDescriptor());
-      entry = new PathBasedCacheEntry(getNextEntryId(), directive);
+      entry = new PathBasedCacheEntry(getNextEntryId(),
+          directive.getPath(), pool);
-      return new Fallible<PathBasedCacheEntry>(
+      return new Fallible<PathBasedCacheDescriptor>(
-    entriesByDirective.put(directive, entry);
-      if (node.isFile()) {
+      if (node != null && node.isFile()) {
-      return new Fallible<PathBasedCacheEntry>(ioe);
+      return new Fallible<PathBasedCacheDescriptor>(ioe);
-
-    return new Fallible<PathBasedCacheEntry>(entry);
+    return new Fallible<PathBasedCacheDescriptor>(
+        entry.getDescriptor());
-  public synchronized List<Fallible<PathBasedCacheEntry>> addDirectives(
+  public synchronized List<Fallible<PathBasedCacheDescriptor>> addDirectives(
-    ArrayList<Fallible<PathBasedCacheEntry>> results = 
-        new ArrayList<Fallible<PathBasedCacheEntry>>(directives.size());
+    ArrayList<Fallible<PathBasedCacheDescriptor>> results = 
+        new ArrayList<Fallible<PathBasedCacheDescriptor>>(directives.size());
-  private synchronized Fallible<Long> removeEntry(long entryId,
+  private synchronized Fallible<Long> removeDescriptor(long id,
-    if (entryId <= 0) {
-      LOG.info("removeEntry " + entryId + ": invalid non-positive entry ID.");
-      return new Fallible<Long>(new InvalidIdException(entryId));
+    if (id <= 0) {
+      LOG.info("removeDescriptor " + id + ": invalid non-positive " +
+          "descriptor ID.");
+      return new Fallible<Long>(new InvalidIdException(id));
-    PathBasedCacheEntry existing = entriesById.get(entryId);
+    PathBasedCacheEntry existing = entriesById.get(id);
-      LOG.info("removeEntry " + entryId + ": entry not found.");
-      return new Fallible<Long>(new NoSuchIdException(entryId));
+      LOG.info("removeDescriptor " + id + ": entry not found.");
+      return new Fallible<Long>(new NoSuchIdException(id));
-    CachePool pool = cachePools.get(existing.getDirective().getPool());
+    CachePool pool = cachePools.get(existing.getDescriptor().getPool());
-      LOG.info("removeEntry " + entryId + ": pool not found for directive " +
-        existing.getDirective());
+      LOG.info("removeDescriptor " + id + ": pool not found for directive " +
+        existing.getDescriptor());
-          new UnexpectedRemovePathBasedCacheEntryException(entryId));
+          new UnexpectedRemovePathBasedCacheDescriptorException(id));
-      LOG.info("removeEntry " + entryId + ": write permission denied to " +
+      LOG.info("removeDescriptor " + id + ": write permission denied to " +
-          new RemovePermissionDeniedException(entryId));
+          new RemovePermissionDeniedException(id));
-    // Remove the corresponding entry in entriesByDirective.
-    if (entriesByDirective.remove(existing.getDirective()) == null) {
-      LOG.warn("removeEntry " + entryId + ": failed to find existing entry " +
-          existing + " in entriesByDirective");
-      return new Fallible<Long>(
-          new UnexpectedRemovePathBasedCacheEntryException(entryId));
-    }
-    String path = existing.getDirective().getPath();
+    String path = existing.getDescriptor().getPath();
-          new UnexpectedRemovePathBasedCacheEntryException(entryId));
+          new UnexpectedRemovePathBasedCacheDescriptorException(id));
-    entriesById.remove(entryId);
+    entriesById.remove(id);
-      INode node = dir.getINode(existing.getDirective().getPath());
-      if (node.isFile()) {
-        namesystem.setCacheReplicationInt(existing.getDirective().getPath(),
+      INode node = dir.getINode(existing.getDescriptor().getPath());
+      if (node != null && node.isFile()) {
+        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),
-      LOG.warn("removeEntry " + entryId + ": failure while setting cache"
+      LOG.warn("removeDescriptor " + id + ": failure while setting cache"
-    LOG.info("removeEntry successful for PathCacheEntry id " + entryId);
-    return new Fallible<Long>(entryId);
+    LOG.info("removeDescriptor successful for PathCacheEntry id " + id);
+    return new Fallible<Long>(id);
-  public synchronized List<Fallible<Long>> removeEntries(List<Long> entryIds,
+  public synchronized List<Fallible<Long>> removeDescriptors(List<Long> ids,
-        new ArrayList<Fallible<Long>>(entryIds.size());
-    for (Long entryId : entryIds) {
-      results.add(removeEntry(entryId, pc));
+        new ArrayList<Fallible<Long>>(ids.size());
+    for (Long id : ids) {
+      results.add(removeDescriptor(id, pc));
-  public synchronized BatchedListEntries<PathBasedCacheEntry> 
-        listPathBasedCacheEntries(long prevId, String filterPool,
+  public synchronized BatchedListEntries<PathBasedCacheDescriptor> 
+        listPathBasedCacheDescriptors(long prevId, String filterPool,
-    ArrayList<PathBasedCacheEntry> replies =
-        new ArrayList<PathBasedCacheEntry>(NUM_PRE_ALLOCATED_ENTRIES);
+    ArrayList<PathBasedCacheDescriptor> replies =
+        new ArrayList<PathBasedCacheDescriptor>(NUM_PRE_ALLOCATED_ENTRIES);
-      if (numReplies >= maxListCacheDirectivesResponses) {
-        return new BatchedListEntries<PathBasedCacheEntry>(replies, true);
+      if (numReplies >= maxListCacheDescriptorsResponses) {
+        return new BatchedListEntries<PathBasedCacheDescriptor>(replies, true);
-      PathBasedCacheDirective directive = cur.getValue().getDirective();
+      PathBasedCacheDirective directive = cur.getValue().getDescriptor();
-      CachePool pool = cachePools.get(curEntry.getDirective().getPool());
-      if (pool == null) {
-        LOG.error("invalid pool for PathBasedCacheEntry " + curEntry);
-        continue;
-      }
-      if (pc.checkPermission(pool, FsAction.READ)) {
-        replies.add(cur.getValue());
+      if (pc.checkPermission(curEntry.getPool(), FsAction.READ)) {
+        replies.add(cur.getValue().getDescriptor());
-    return new BatchedListEntries<PathBasedCacheEntry>(replies, false);
+    return new BatchedListEntries<PathBasedCacheDescriptor>(replies, false);
-    // over all entries in entriesByDirective
-    Iterator<Entry<PathBasedCacheDirective, PathBasedCacheEntry>> iter = 
-        entriesByDirective.entrySet().iterator();
+    // over all entries in entriesById
+    Iterator<Entry<Long, PathBasedCacheEntry>> iter = 
+        entriesById.entrySet().iterator();
-      Entry<PathBasedCacheDirective, PathBasedCacheEntry> entry = iter.next();
-      if (entry.getKey().getPool().equals(poolName)) {
+      Entry<Long, PathBasedCacheEntry> entry = iter.next();
+      if (entry.getValue().getPool() == pool) {

MOV26 INS26 UPD40 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 MOV29 MOV83 MOV83 INS39 INS59 INS83 INS83 MOV43 INS42 INS44 INS8 UPD74 MOV74 UPD74 MOV74 UPD42 MOV25 UPD42 UPD74 UPD42 INS42 INS43 INS42 INS60 INS25 INS70 INS41 INS43 INS25 INS41 MOV43 UPD74 UPD42 UPD42 UPD43 MOV60 UPD66 MOV42 INS74 INS59 INS27 INS8 INS44 INS42 INS8 INS33 INS42 MOV27 INS8 INS14 UPD43 UPD74 MOV27 MOV74 UPD42 UPD42 UPD74 MOV74 INS74 UPD42 UPD43 MOV43 MOV43 INS42 INS32 INS42 INS33 INS41 MOV43 INS42 INS25 MOV21 MOV41 UPD74 MOV74 INS32 UPD42 MOV43 UPD74 MOV74 MOV14 UPD42 UPD42 UPD42 UPD42 UPD43 UPD74 MOV43 UPD74 MOV74 UPD42 INS32 MOV60 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS33 INS32 INS8 UPD42 INS41 INS27 UPD43 UPD42 MOV42 UPD42 MOV42 UPD43 INS74 MOV32 UPD42 INS27 UPD45 UPD42 MOV74 UPD42 UPD74 MOV74 UPD43 UPD43 INS32 INS42 UPD74 MOV74 INS27 INS42 INS42 INS32 INS42 INS32 INS41 INS74 UPD74 UPD74 INS32 INS14 INS27 MOV32 INS14 MOV42 UPD42 UPD42 MOV43 UPD74 MOV74 UPD42 UPD42 INS27 MOV32 UPD42 UPD43 UPD42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD43 UPD42 MOV32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 UPD43 UPD74 INS45 UPD43 INS42 INS42 INS32 INS42 UPD74 MOV74 MOV14 INS42 INS33 INS74 INS42 UPD43 UPD45 UPD42 UPD45 INS45 UPD42 UPD45 UPD42 UPD42 UPD42 UPD45 UPD42 UPD45 INS32 UPD43 UPD42 UPD45 UPD42 UPD42 UPD43 UPD42 INS42 INS33 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD43 UPD42 INS42 INS42 INS43 MOV43 INS43 UPD42 INS42 INS42 UPD42 UPD42 UPD45 UPD42 UPD74 INS42 INS42 MOV32 MOV42 UPD42 UPD42 INS42 INS42 UPD42 UPD43 UPD42 UPD42 UPD42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL14 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL41 DEL42 DEL43 DEL74 DEL74 DEL42 DEL43 DEL74 DEL42 DEL14 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL14 DEL14 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL33 DEL27 DEL42 DEL45 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL18 DEL8 DEL25 DEL42 DEL74 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32