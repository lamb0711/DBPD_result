HDFS-11156. Add new op GETFILEBLOCKLOCATIONS to WebHDFS REST API. Contributed by Weiwei Yang.

+    BlockLocation[] locations = null;
+    try {
+      locations = getFileBlockLocations(
+          GetOpParam.Op.GETFILEBLOCKLOCATIONS,
+          p, offset, length);
+    } catch (RemoteException e) {
+      // See the error message from ExceptionHandle
+      if(e.getMessage() != null &&
+          e.getMessage().contains(
+              "Invalid value for webhdfs parameter") &&
+          e.getMessage().contains(
+              GetOpParam.Op.GETFILEBLOCKLOCATIONS.toString())) {
+        // Old webhdfs server doesn't support GETFILEBLOCKLOCATIONS
+        // operation, fall back to query again using old API
+        // GET_BLOCK_LOCATIONS.
+        LOG.info("Invalid webhdfs operation parameter "
+            + GetOpParam.Op.GETFILEBLOCKLOCATIONS + ". Fallback to use "
+            + GetOpParam.Op.GET_BLOCK_LOCATIONS + " instead.");
+        locations = getFileBlockLocations(
+            GetOpParam.Op.GET_BLOCK_LOCATIONS,
+            p, offset, length);
+      }
+    }
+    return locations;
+  }
-    final HttpOpParam.Op op = GetOpParam.Op.GET_BLOCK_LOCATIONS;
-    return new FsPathResponseRunner<BlockLocation[]>(op, p,
+  /**
+   * Get file block locations implementation. Provide a operation
+   * parameter to determine how to get block locations from a webhdfs
+   * server. Older server only supports <b>GET_BLOCK_LOCATIONS</b> but
+   * not <b>GETFILEBLOCKLOCATIONS</b>.
+   *
+   * @param path path to the file
+   * @param offset start offset in the given file
+   * @param length of the file to get locations for
+   * @param operation
+   *   Valid operation is either
+   *   {@link org.apache.hadoop.hdfs.web.resources.GetOpParam.Op
+   *   #GET_BLOCK_LOCATIONS} or
+   *   {@link org.apache.hadoop.hdfs.web.resources.GetOpParam.Op
+   *   #GET_BLOCK_LOCATIONS}
+   * @throws IOException
+   *   Http connection error, decoding error or given
+   *   operation is not valid
+   */
+  @VisibleForTesting
+  protected BlockLocation[] getFileBlockLocations(
+      GetOpParam.Op operation, final Path path,
+      final long offset, final long length) throws IOException {
+    return new FsPathResponseRunner<BlockLocation[]>(operation, path,
-        return DFSUtilClient.locatedBlocks2Locations(
-            JsonUtilClient.toLocatedBlocks(json));
+        switch(operation) {
+        case GETFILEBLOCKLOCATIONS:
+          return JsonUtilClient.toBlockLocationArray(json);
+        case GET_BLOCK_LOCATIONS:
+          return DFSUtilClient.locatedBlocks2Locations(
+              JsonUtilClient.toLocatedBlocks(json));
+        default :
+          throw new IOException("Unknown operation " + operation.name());
+        }

INS31 MOV78 INS83 INS5 INS42 MOV44 INS44 INS44 INS43 INS8 INS29 INS78 UPD83 INS44 INS44 INS43 INS85 INS83 INS39 INS42 INS83 INS39 INS42 INS42 MOV21 MOV21 INS60 INS54 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS83 INS43 INS42 INS42 INS5 INS59 INS8 INS12 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS65 INS42 INS66 INS66 INS40 INS42 INS43 INS85 INS42 INS33 INS21 INS44 INS8 INS67 INS67 INS42 INS7 INS43 INS42 INS25 INS40 INS42 INS40 INS42 UPD42 UPD42 INS42 INS32 INS42 INS27 INS8 INS42 INS40 INS42 INS42 INS42 INS27 INS32 INS21 INS21 INS27 INS32 INS32 INS42 INS32 INS32 INS7 INS50 INS32 INS33 INS32 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS49 INS41 INS49 MOV41 INS49 INS53 INS42 INS42 INS42 INS42 INS45 INS40 INS45 INS40 INS45 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS27 INS42 INS45 INS32 INS42 INS42 DEL83 DEL40 DEL43 DEL42 DEL40 DEL59 DEL60