HDDS-399. Persist open pipeline information across SCM restart. Contributed by Mukul Kumar Singh.

+import java.util.ArrayList;
-import java.util.Map;
-import org.apache.hadoop.hdds.protocol.proto.HddsProtos.LifeCycleState;
-  private final List<PipelineID> activePipelines;
-  private final Map<PipelineID, Pipeline> pipelineMap;
-  private final AtomicInteger pipelineIndex;
-  private final Node2PipelineMap node2PipelineMap;
+  private final ArrayList<ActivePipelines> activePipelines;
-  public PipelineManager(Node2PipelineMap map,
-      Map<PipelineID, Pipeline> pipelineMap) {
-    activePipelines = new LinkedList<>();
-    pipelineIndex = new AtomicInteger(0);
-    this.pipelineMap = pipelineMap;
-    this.node2PipelineMap = map;
+  public PipelineManager() {
+    activePipelines = new ArrayList<>();
+    for (ReplicationFactor factor : ReplicationFactor.values()) {
+      activePipelines.add(factor.ordinal(), new ActivePipelines());
+    }
+  }
+
+  private static class ActivePipelines {
+    private final List<PipelineID> activePipelines;
+    private final AtomicInteger pipelineIndex;
+
+    ActivePipelines() {
+      activePipelines = new LinkedList<>();
+      pipelineIndex = new AtomicInteger(0);
+    }
+
+    void addPipeline(PipelineID pipelineID) {
+      activePipelines.add(pipelineID);
+    }
+
+    void removePipeline(PipelineID pipelineID) {
+      activePipelines.remove(pipelineID);
+    }
+
+    /**
+     * Find a Pipeline that is operational.
+     *
+     * @return - Pipeline or null
+     */
+    PipelineID findOpenPipeline() {
+      if (activePipelines.size() == 0) {
+        LOG.error("No Operational pipelines found. Returning null.");
+        return null;
+      }
+      return activePipelines.get(getNextIndex());
+    }
+
+    /**
+     * gets the next index of the Pipeline to get.
+     *
+     * @return index in the link list to get.
+     */
+    private int getNextIndex() {
+      return pipelineIndex.incrementAndGet() % activePipelines.size();
+    }
-  public synchronized final Pipeline getPipeline(
+  public synchronized final PipelineID getPipeline(
-    Pipeline pipeline = findOpenPipeline(replicationType, replicationFactor);
-    if (pipeline != null) {
+    PipelineID id =
+        activePipelines.get(replicationFactor.ordinal()).findOpenPipeline();
+    if (id != null) {
-          pipeline.getId(), replicationType, replicationFactor);
+          id, replicationType, replicationFactor);
-    if (pipeline == null) {
+    if (id == null) {
-      return pipeline;
+      return id;
-  /**
-   * This function to get pipeline with given pipeline name.
-   *
-   * @param id
-   * @return a Pipeline.
-   */
-  public synchronized final Pipeline getPipeline(PipelineID id) {
-    Pipeline pipeline = null;
-
-    // 1. Check if pipeline already exists
-    if (pipelineMap.containsKey(id)) {
-      pipeline = pipelineMap.get(id);
-      LOG.debug("Returning pipeline for pipelineName:{}", id);
-      return pipeline;
-    } else {
-      LOG.debug("Unable to find pipeline for pipelineName:{}", id);
-    }
-    return pipeline;
+  void addOpenPipeline(Pipeline pipeline) {
+    activePipelines.get(pipeline.getFactor().ordinal())
+            .addPipeline(pipeline.getId());
-  protected int getReplicationCount(ReplicationFactor factor) {
+  protected static int getReplicationCount(ReplicationFactor factor) {
-   * Find a Pipeline that is operational.
-   *
-   * @return - Pipeline or null
-   */
-  private Pipeline findOpenPipeline(
-      ReplicationType type, ReplicationFactor factor) {
-    Pipeline pipeline = null;
-    final int sentinal = -1;
-    if (activePipelines.size() == 0) {
-      LOG.error("No Operational pipelines found. Returning null.");
-      return null;
-    }
-    int startIndex = getNextIndex();
-    int nextIndex = sentinal;
-    for (; startIndex != nextIndex; nextIndex = getNextIndex()) {
-      // Just walk the list in a circular way.
-      PipelineID id =
-          activePipelines
-              .get(nextIndex != sentinal ? nextIndex : startIndex);
-      Pipeline temp = pipelineMap.get(id);
-      // if we find an operational pipeline just return that.
-      if ((temp.getLifeCycleState() == LifeCycleState.OPEN) &&
-          (temp.getFactor() == factor) && (temp.getType() == type)) {
-        pipeline = temp;
-        break;
-      }
-    }
-    return pipeline;
-  }
-
-  /**
-   * gets the next index of the Pipeline to get.
-   *
-   * @return index in the link list to get.
-   */
-  private int getNextIndex() {
-    return pipelineIndex.incrementAndGet() % activePipelines.size();
-  }
-
-  /**
-      activePipelines.add(pipeline.getId());
-      pipelineMap.put(pipeline.getId(), pipeline);
-      node2PipelineMap.addPipeline(pipeline);
-    activePipelines.remove(pipeline.getId());
+    activePipelines.get(pipeline.getFactor().ordinal())
+            .removePipeline(pipeline.getId());
-  public void closePipeline(Pipeline pipeline) throws IOException {
-    pipelineMap.remove(pipeline.getId());
-    node2PipelineMap.removePipeline(pipeline);
-  }
+  public abstract void closePipeline(Pipeline pipeline) throws IOException;

MOV26 MOV31 UPD40 INS55 INS31 UPD74 INS42 INS83 INS83 INS42 MOV23 MOV23 MOV31 INS31 INS31 INS31 MOV31 UPD43 INS39 INS42 INS44 INS8 INS83 INS83 UPD43 UPD43 UPD42 MOV21 INS70 INS42 INS39 UPD42 MOV42 MOV44 INS8 INS39 INS42 INS44 INS8 MOV29 MOV43 INS42 INS8 UPD42 INS43 INS42 INS21 UPD42 UPD42 MOV44 INS32 INS8 MOV43 INS42 INS21 MOV43 INS42 INS21 MOV25 INS41 MOV43 MOV42 INS32 INS32 UPD42 INS14 UPD42 MOV42 UPD42 MOV42 MOV21 INS32 INS32 INS32 UPD42 MOV42 UPD42 INS32 UPD42 UPD42 INS32 INS42 MOV32 INS32 INS42 MOV32 INS74 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 MOV32 INS32 INS42 UPD42 UPD42 MOV42 MOV42 INS32 MOV42 UPD42 MOV42 INS32 INS43 UPD42 UPD42 INS32 INS14 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS42 MOV32 INS42 INS42 UPD42 MOV42 INS42 INS43 MOV42 INS42 UPD42 MOV42 MOV42 UPD42 INS42 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL8 DEL25 DEL42 DEL41 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL16 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL36 DEL32 DEL42 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL27 DEL36 DEL27 DEL42 DEL42 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8