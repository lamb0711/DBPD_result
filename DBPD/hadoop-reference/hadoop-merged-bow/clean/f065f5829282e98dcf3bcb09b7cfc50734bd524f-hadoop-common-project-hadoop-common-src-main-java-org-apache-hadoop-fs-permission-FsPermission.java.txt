HADOOP-10220. Add ACL indicator bit to FsPermission. Contributed by Chris Nauroth.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1557293 13f79535-47bb-0310-9956-ffa450edef68

+  private boolean aclBit = false;
-    set(u, g, o, sb);
+    this(u, g, o, sb, false);
+  }
+
+  /**
+   * Construct by the given {@link FsAction} and special bits.
+   * @param u user action
+   * @param g group action
+   * @param o other action
+   * @param sb sticky bit
+   * @param ab ACL bit
+   */
+  public FsPermission(FsAction u, FsAction g, FsAction o, boolean sb,
+      boolean ab) {
+    set(u, g, o, sb, ab);
+    this.aclBit = other.aclBit;
-  private void set(FsAction u, FsAction g, FsAction o, boolean sb) {
+  private void set(FsAction u, FsAction g, FsAction o, boolean sb, boolean ab) {
+    aclBit = ab;
-    set(v[(n >>> 6) & 7], v[(n >>> 3) & 7], v[n & 7], (((n >>> 9) & 1) == 1) );
+    set(v[(n >>> 6) & 7], v[(n >>> 3) & 7], v[n & 7], (((n >>> 9) & 1) == 1),
+      (((n >>> 10) & 1) == 1) );
-    int s =  (stickyBit ? 1 << 9 : 0)     |
+    int s =  (aclBit ? 1 << 10 : 0)       |
+             (stickyBit ? 1 << 9 : 0)     |
-          && this.stickyBit == that.stickyBit;
+          && this.stickyBit == that.stickyBit
+          && this.aclBit == that.aclBit;
-    String str = useraction.SYMBOL + groupaction.SYMBOL + otheraction.SYMBOL;
-    if(stickyBit) {
-      StringBuilder str2 = new StringBuilder(str);
-      str2.replace(str2.length() - 1, str2.length(),
+    StringBuilder sb = new StringBuilder();
+    sb.append(useraction.SYMBOL);
+    sb.append(groupaction.SYMBOL);
+    sb.append(otheraction.SYMBOL);
+    if (stickyBit) {
+      sb.replace(sb.length() - 1, sb.length(),
-      str = str2.toString();
+    }
+    if (aclBit) {
+      sb.append('+');
-    return str;
+    return sb.toString();
+  /**
+   * Returns true if there is also an ACL (access control list).
+   *
+   * @return boolean true if there is also an ACL (access control list).
+   */
+  public boolean getAclBit() {
+    return aclBit;
+  }
+
-    else if (unixSymbolicPermission.length() != 10) {
-      throw new IllegalArgumentException("length != 10(unixSymbolicPermission="
+    else if (unixSymbolicPermission.length() != 10 &&
+        unixSymbolicPermission.length() != 11) {
+      throw new IllegalArgumentException("invalid length(unixSymbolicPermission="
-    for(int i = 1; i < unixSymbolicPermission.length(); i++) {
+    for(int i = 1; i < 10; i++) {
+    // Add ACL bit value if set
+    if (unixSymbolicPermission.length() == 11 &&
+         unixSymbolicPermission.charAt(10) == '+')
+      n += (1 << 10);
+

INS23 INS31 INS31 INS83 INS39 INS59 INS29 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS29 INS83 INS39 INS42 INS8 INS42 INS9 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS39 INS42 INS21 MOV60 INS21 INS21 INS21 INS25 INS25 INS65 INS65 INS41 INS25 INS42 INS42 INS42 INS42 INS9 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS32 INS7 INS7 MOV43 INS32 INS32 INS32 MOV42 INS8 INS42 INS8 INS32 INS66 INS66 INS42 INS27 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS40 INS42 INS42 INS36 UPD42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 MOV21 INS21 INS42 INS42 INS27 INS34 INS27 INS27 INS7 INS52 INS42 INS27 INS36 INS27 MOV43 INS32 MOV27 INS27 INS32 INS34 INS32 INS13 INS42 INS36 INS36 INS34 INS16 MOV27 INS27 UPD42 UPD42 MOV42 UPD42 MOV42 INS13 MOV32 INS34 INS42 INS42 INS42 INS42 INS34 INS27 INS27 INS42 INS27 INS34 INS22 INS40 UPD42 INS34 INS34 INS36 INS34 INS34 INS34 INS52 INS42 UPD42 UPD45 INS27 INS42 INS34 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL40 DEL40 DEL40 DEL27 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42