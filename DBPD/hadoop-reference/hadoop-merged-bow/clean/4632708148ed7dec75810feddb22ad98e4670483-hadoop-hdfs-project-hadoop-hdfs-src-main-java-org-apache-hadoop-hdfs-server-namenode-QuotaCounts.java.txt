HDFS-14547. Improve memory efficiency of quotas when storage type quotas are not set. Contributed by Jinglun.

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+import org.apache.hadoop.hdfs.util.ConstEnumCounters;
+import org.apache.hadoop.hdfs.util.ConstEnumCounters.ConstEnumException;
+
+import java.util.function.Consumer;
+
+  /**
+   * We pre-define 4 most common used EnumCounters objects. When the nsSsCounts
+   * and tsCounts are set to the 4 most common used value, we just point them to
+   * the pre-defined const EnumCounters objects instead of constructing many
+   * objects with the same value. See HDFS-14547.
+   */
+  final static EnumCounters<Quota> QUOTA_RESET =
+      new ConstEnumCounters<>(Quota.class, HdfsConstants.QUOTA_RESET);
+  final static EnumCounters<Quota> QUOTA_DEFAULT =
+      new ConstEnumCounters<>(Quota.class, 0);
+  final static EnumCounters<StorageType> STORAGE_TYPE_RESET =
+      new ConstEnumCounters<>(StorageType.class, HdfsConstants.QUOTA_RESET);
+  final static EnumCounters<StorageType> STORAGE_TYPE_DEFAULT =
+      new ConstEnumCounters<>(StorageType.class, 0);
+
+  /**
+   * Modify counter with action. If the counter is ConstEnumCounters, copy all
+   * the values of it to a new EnumCounters object, and modify the new obj.
+   *
+   * @param counter the EnumCounters to be modified.
+   * @param action the modifying action on counter.
+   * @return the modified counter.
+   */
+  static <T extends Enum<T>> EnumCounters<T> modify(EnumCounters<T> counter,
+      Consumer<EnumCounters<T>> action) {
+    try {
+      action.accept(counter);
+    } catch (ConstEnumException cee) {
+      // We don't call clone here because ConstEnumCounters.clone() will return
+      // an object of class ConstEnumCounters. We want EnumCounters.
+      counter = counter.deepCopyEnumCounter();
+      action.accept(counter);
+    }
+    return counter;
+  }
+
-  private EnumCounters<Quota> nsSsCounts;
+  @VisibleForTesting
+  EnumCounters<Quota> nsSsCounts;
-  private EnumCounters<StorageType> tsCounts;
+  @VisibleForTesting
+  EnumCounters<StorageType> tsCounts;
-      this.nsSsCounts = new EnumCounters<Quota>(Quota.class);
-      this.tsCounts = new EnumCounters<StorageType>(StorageType.class);
+      this.nsSsCounts = QUOTA_DEFAULT;
+      this.tsCounts = STORAGE_TYPE_DEFAULT;
-      this.nsSsCounts.set(Quota.NAMESPACE, val);
+      nsSsCounts =
+          setQuotaCounter(nsSsCounts, Quota.NAMESPACE, Quota.STORAGESPACE, val);
-      this.nsSsCounts.set(Quota.STORAGESPACE, val);
+      nsSsCounts =
+          setQuotaCounter(nsSsCounts, Quota.STORAGESPACE, Quota.NAMESPACE, val);
-        this.tsCounts.set(val);
+        if (val == STORAGE_TYPE_DEFAULT || val == STORAGE_TYPE_RESET) {
+          tsCounts = val;
+        } else {
+          tsCounts = modify(tsCounts, ec -> ec.set(val));
+        }
-      this.tsCounts.reset(val);
+      if (val == HdfsConstants.QUOTA_RESET) {
+        tsCounts = STORAGE_TYPE_RESET;
+      } else if (val == 0) {
+        tsCounts = STORAGE_TYPE_DEFAULT;
+      } else {
+        tsCounts = modify(tsCounts, ec -> ec.reset(val));
+      }
-      this.nsSsCounts.set(that.nsSsCounts);
-      this.tsCounts.set(that.tsCounts);
+      if (that.nsSsCounts == QUOTA_DEFAULT || that.nsSsCounts == QUOTA_RESET) {
+        nsSsCounts = that.nsSsCounts;
+      } else {
+        nsSsCounts = modify(nsSsCounts, ec -> ec.set(that.nsSsCounts));
+      }
+      if (that.tsCounts == STORAGE_TYPE_DEFAULT
+          || that.tsCounts == STORAGE_TYPE_RESET) {
+        tsCounts = that.tsCounts;
+      } else {
+        tsCounts = modify(tsCounts, ec -> ec.set(that.tsCounts));
+      }
-    this.nsSsCounts.add(that.nsSsCounts);
-    this.tsCounts.add(that.tsCounts);
+    nsSsCounts = modify(nsSsCounts, ec -> ec.add(that.nsSsCounts));
+    tsCounts = modify(tsCounts, ec -> ec.add(that.tsCounts));
-    this.nsSsCounts.subtract(that.nsSsCounts);
-    this.tsCounts.subtract(that.tsCounts);
+    nsSsCounts = modify(nsSsCounts, ec -> ec.subtract(that.nsSsCounts));
+    tsCounts = modify(tsCounts, ec -> ec.subtract(that.tsCounts));
-    ret.nsSsCounts.negation();
-    ret.tsCounts.negation();
+    ret.nsSsCounts = modify(ret.nsSsCounts, ec -> ec.negation());
+    ret.tsCounts = modify(ret.tsCounts, ec -> ec.negation());
-    this.nsSsCounts.set(Quota.NAMESPACE, nameSpaceCount);
+    nsSsCounts =
+        setQuotaCounter(nsSsCounts, Quota.NAMESPACE, Quota.STORAGESPACE,
+            nameSpaceCount);
-    this.nsSsCounts.add(Quota.NAMESPACE, nsDelta);
+    nsSsCounts = modify(nsSsCounts, ec -> ec.add(Quota.NAMESPACE, nsDelta));
-    this.nsSsCounts.set(Quota.STORAGESPACE, spaceCount);
+    nsSsCounts =
+        setQuotaCounter(nsSsCounts, Quota.STORAGESPACE, Quota.NAMESPACE,
+            spaceCount);
-    this.nsSsCounts.add(Quota.STORAGESPACE, dsDelta);
+    nsSsCounts = modify(nsSsCounts, ec -> ec.add(Quota.STORAGESPACE, dsDelta));
-    if (that != null) {
-      this.tsCounts.set(that);
+    if (that == STORAGE_TYPE_DEFAULT || that == STORAGE_TYPE_RESET) {
+      tsCounts = that;
+    } else if (that != null) {
+      tsCounts = modify(tsCounts, ec -> ec.set(that));
-    this.tsCounts.set(type, spaceCount);
+    tsCounts = modify(tsCounts, ec -> ec.set(type, spaceCount));
-    this.tsCounts.add(type, delta);
+    tsCounts = modify(tsCounts, ec -> ec.add(type, delta));
+  if (nsSsCounts == QUOTA_DEFAULT) {
+      return val <= 0;
+    } else if (nsSsCounts == QUOTA_RESET) {
+      return val <= HdfsConstants.QUOTA_RESET;
+    }
+    if (tsCounts == STORAGE_TYPE_DEFAULT) {
+      return val <= 0;
+    } else if (tsCounts == STORAGE_TYPE_RESET) {
+      return val <= HdfsConstants.QUOTA_RESET;
+    }
+  /**
+   * Set inputCounts' value of Quota type quotaToSet to val.
+   * inputCounts should be the left side value of this method.
+   *
+   * @param inputCounts the EnumCounters instance.
+   * @param quotaToSet the quota type to be set.
+   * @param otherQuota the other quota type besides quotaToSet.
+   * @param val the value to be set.
+   * @return the modified inputCounts.
+   */
+  private static EnumCounters<Quota> setQuotaCounter(
+      EnumCounters<Quota> inputCounts, Quota quotaToSet, Quota otherQuota,
+      long val) {
+    if (val == HdfsConstants.QUOTA_RESET
+        && inputCounts.get(otherQuota) == HdfsConstants.QUOTA_RESET) {
+      return QUOTA_RESET;
+    } else if (val == 0 && inputCounts.get(otherQuota) == 0) {
+      return QUOTA_DEFAULT;
+    } else {
+      return modify(inputCounts, ec -> ec.set(quotaToSet, val));
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 MOV31 INS23 INS23 INS55 INS31 INS29 UPD83 INS83 INS83 INS83 INS74 INS59 UPD83 INS83 INS83 INS83 INS74 INS59 INS29 UPD83 INS73 INS74 INS42 INS44 INS44 INS8 INS78 INS74 INS59 INS78 MOV74 INS59 INS83 INS83 INS42 MOV23 MOV23 INS31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV43 INS8 MOV43 MOV44 MOV44 MOV44 INS8 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS8 INS65 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS14 INS43 INS43 INS42 INS14 INS65 INS65 INS65 INS65 INS42 INS74 INS43 INS43 INS74 INS42 INS74 INS42 INS54 INS41 INS42 INS43 INS43 INS42 INS42 INS42 INS83 INS42 MOV8 MOV43 MOV44 MOV43 INS8 MOV43 MOV44 INS8 MOV43 MOV44 INS21 INS21 MOV41 MOV41 INS25 INS25 MOV41 INS25 MOV41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 MOV74 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS25 INS66 INS66 INS66 INS66 INS74 INS57 INS40 INS42 INS42 INS74 MOV57 INS34 INS74 MOV57 INS40 INS42 INS42 INS74 INS57 INS34 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS43 INS42 INS42 INS43 INS43 INS43 INS74 INS8 INS12 INS42 INS42 INS42 MOV41 INS25 MOV41 INS25 MOV41 INS25 INS25 MOV41 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS27 INS8 INS25 INS7 INS7 INS27 INS8 INS25 INS27 INS8 INS25 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS27 INS8 INS25 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS21 INS44 INS8 INS7 INS7 INS7 INS7 MOV27 INS8 INS27 INS8 INS25 INS27 INS8 INS8 INS27 INS8 INS8 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS40 INS32 INS40 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS27 INS27 INS21 MOV27 MOV8 INS42 INS32 INS42 INS32 INS42 INS42 INS41 INS27 INS8 INS42 INS42 INS41 INS27 INS8 INS27 INS27 INS41 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 MOV21 MOV21 MOV22 INS42 MOV22 INS42 INS42 INS32 INS42 INS32 MOV25 INS42 INS40 INS21 INS27 INS8 INS8 INS27 INS27 INS21 MOV21 INS27 INS27 INS21 MOV21 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS42 INS86 INS42 MOV40 INS86 INS42 MOV40 INS86 UPD42 MOV42 INS42 MOV40 INS40 MOV42 INS42 INS42 INS86 UPD42 MOV42 INS42 MOV40 INS40 MOV42 INS42 INS42 INS86 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS86 INS42 INS42 INS86 INS27 INS42 INS42 INS41 INS27 INS42 INS42 INS41 INS42 INS40 INS32 INS40 INS42 INS27 INS27 INS41 INS41 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 MOV40 INS40 MOV42 UPD42 MOV42 INS42 MOV40 INS40 MOV42 INS27 INS8 INS7 INS42 INS34 INS21 MOV21 INS40 INS42 INS40 INS42 INS7 INS7 INS40 INS42 INS40 INS42 INS7 INS7 INS59 INS32 INS59 INS32 INS59 INS32 INS59 INS32 INS59 INS32 INS59 INS32 INS59 INS32 INS59 INS32 INS42 INS42 INS7 INS59 INS32 INS59 INS32 INS42 INS34 INS27 INS42 INS34 INS27 INS42 INS42 INS42 INS42 INS34 INS32 INS34 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS27 INS21 INS42 INS42 INS7 INS7 INS42 INS40 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 MOV42 MOV40 INS42 INS42 MOV42 MOV40 INS42 INS42 MOV42 INS42 INS42 MOV42 INS42 INS42 MOV42 MOV40 MOV42 INS42 INS42 MOV42 MOV40 MOV42 INS42 INS32 INS42 INS42 MOV42 MOV42 MOV42 INS42 INS42 MOV42 MOV42 MOV42 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS42 INS86 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS86 INS59 INS32 INS59 INS32 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS86 INS59 INS32 INS42 INS42 MOV42 MOV40 INS42 INS42 MOV42 MOV40 INS42 INS42 MOV42 MOV42 INS59 INS32 INS42 INS42 MOV42 MOV42 INS42 INS42 MOV42 MOV42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL14 DEL52 DEL42 DEL22 DEL14 DEL7 DEL42 DEL8 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL8 DEL52 DEL42 DEL22 DEL32 DEL8 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL83 DEL83 DEL42 DEL55 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL32 DEL32 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL25 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL8 DEL8