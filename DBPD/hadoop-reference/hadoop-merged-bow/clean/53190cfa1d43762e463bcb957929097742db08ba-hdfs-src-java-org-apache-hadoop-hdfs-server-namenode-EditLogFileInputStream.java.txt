HDFS-2187. Make EditLogInputStream act like an iterator over FSEditLogOps. Contributed by Ivan Kelly and Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153996 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.BufferedInputStream;
+import java.io.EOFException;
+import java.io.DataInputStream;
+import org.apache.hadoop.hdfs.protocol.FSConstants;
+import org.apache.hadoop.hdfs.server.common.Storage;
+import org.apache.hadoop.hdfs.server.namenode.FSEditLogLoader.EditLogValidation;
+import org.apache.hadoop.io.IOUtils;
+
+import com.google.common.annotations.VisibleForTesting;
-  private File file;
-  private FileInputStream fStream;
-
-  EditLogFileInputStream(File name) throws IOException {
+  private final File file;
+  private final FileInputStream fStream;
+  private final int logVersion;
+  private final FSEditLogOp.Reader reader;
+  private final FSEditLogLoader.PositionTrackingInputStream tracker;
+  
+  /**
+   * Open an EditLogInputStream for the given file.
+   * @param name filename to open
+   * @throws LogHeaderCorruptException if the header is either missing or
+   *         appears to be corrupt/truncated
+   * @throws IOException if an actual IO error occurs while reading the
+   *         header
+   */
+  EditLogFileInputStream(File name)
+      throws LogHeaderCorruptException, IOException {
+
+    BufferedInputStream bin = new BufferedInputStream(fStream);
+    tracker = new FSEditLogLoader.PositionTrackingInputStream(bin);
+    DataInputStream in = new DataInputStream(tracker);
+
+    try {
+      logVersion = readLogVersion(in);
+    } catch (EOFException eofe) {
+      throw new LogHeaderCorruptException("No header found in log");
+    }
+
+    reader = new FSEditLogOp.Reader(in, logVersion);
-  public int available() throws IOException {
-    return fStream.available();
+  public FSEditLogOp readOp() throws IOException {
+    return reader.readOp();
-  public int read() throws IOException {
-    return fStream.read();
+  public int getVersion() throws IOException {
+    return logVersion;
-  public int read(byte[] b, int off, int len) throws IOException {
-    return fStream.read(b, off, len);
+  public long getPosition() {
+    return tracker.getPos();
+  static FSEditLogLoader.EditLogValidation validateEditLog(File file) throws IOException {
+    EditLogFileInputStream in;
+    try {
+      in = new EditLogFileInputStream(file);
+    } catch (LogHeaderCorruptException corrupt) {
+      // If it's missing its header, this is equivalent to no transactions
+      FSImage.LOG.warn("Log at " + file + " has no valid header",
+          corrupt);
+      return new FSEditLogLoader.EditLogValidation(0, 0);
+    }
+    
+    try {
+      return FSEditLogLoader.validateEditLog(in);
+    } finally {
+      IOUtils.closeStream(in);
+    }
+  }
+
+  /**
+   * Read the header of fsedit log
+   * @param in fsedit stream
+   * @return the edit log version number
+   * @throws IOException if error occurs
+   */
+  @VisibleForTesting
+  static int readLogVersion(DataInputStream in)
+      throws IOException, LogHeaderCorruptException {
+    int logVersion;
+    try {
+      logVersion = in.readInt();
+    } catch (EOFException eofe) {
+      throw new LogHeaderCorruptException(
+          "Reached EOF when reading log header");
+    }
+    if (logVersion < FSConstants.LAYOUT_VERSION) { // future version
+      throw new LogHeaderCorruptException(
+          "Unexpected version of the file system log file: "
+          + logVersion + ". Current version = "
+          + FSConstants.LAYOUT_VERSION + ".");
+    }
+    assert logVersion <= Storage.LAST_UPGRADABLE_LAYOUT_VERSION :
+      "Unsupported version " + logVersion;
+    return logVersion;
+  }
+  
+  /**
+   * Exception indicating that the header of an edits log file is
+   * corrupted. This can be because the header is not present,
+   * or because the header data is invalid (eg claims to be
+   * over a newer version than the running NameNode)
+   */
+  static class LogHeaderCorruptException extends IOException {
+    private static final long serialVersionUID = 1L;
+
+    private LogHeaderCorruptException(String msg) {
+      super(msg);
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS29 INS43 INS8 MOV78 INS43 INS42 MOV43 MOV78 MOV83 MOV39 INS42 MOV43 INS8 MOV78 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS78 UPD83 UPD42 INS43 INS8 INS29 INS83 INS42 INS43 INS23 INS31 INS42 INS40 INS42 INS40 INS42 INS65 INS65 INS65 INS65 INS42 MOV21 MOV21 INS60 INS21 INS60 INS54 INS21 INS42 INS41 INS41 INS40 INS43 INS42 INS42 INS60 INS54 INS54 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS54 INS25 INS6 INS41 INS65 INS42 INS83 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS43 INS59 INS7 INS43 INS59 INS8 INS12 INS7 INS42 INS32 INS42 INS43 INS59 INS8 INS12 INS8 INS8 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS39 INS59 INS8 INS12 INS27 INS8 INS27 INS27 INS42 INS66 INS66 INS66 INS66 INS42 INS34 INS43 INS42 INS46 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS14 UPD42 UPD42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 MOV41 INS21 INS42 INS21 INS44 INS8 INS42 INS40 INS53 INS42 INS40 INS45 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS7 INS43 INS42 INS53 INS43 INS42 INS42 INS7 INS43 INS42 INS21 INS41 INS32 INS7 INS43 INS42 INS53 INS14 INS42 INS40 INS42 INS42 INS32 INS42 INS14 INS40 INS42 INS14 INS42 INS32 INS14 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS43 INS27 INS42 INS42 INS43 INS45 INS43 INS42 INS40 INS42 INS27 INS42 INS43 INS34 INS34 INS42 INS42 INS43 INS45 INS42 INS45 INS42 INS45 INS40 INS45 INS42 INS42 INS45 INS42 INS45 INS40 INS42 DEL8 DEL39 DEL42 DEL42 DEL8 DEL31 DEL39 DEL85 DEL5 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8