HADOOP-13953. Make FTPFileSystem's data connection mode and transfer mode configurable. Contributed by Xiao Chen.

+import com.google.common.annotations.VisibleForTesting;
+  public static final String FS_FTP_DATA_CONNECTION_MODE =
+      "fs.ftp.data.connection.mode";
+  public static final String FS_FTP_TRANSFER_MODE = "fs.ftp.transfer.mode";
-      client.setFileTransferMode(FTP.BLOCK_TRANSFER_MODE);
+      client.setFileTransferMode(getTransferMode(conf));
+      setDataConnectionMode(client, conf);
+   * Set FTP's transfer mode based on configuration. Valid values are
+   * STREAM_TRANSFER_MODE, BLOCK_TRANSFER_MODE and COMPRESSED_TRANSFER_MODE.
+   * <p/>
+   * Defaults to BLOCK_TRANSFER_MODE.
+   *
+   * @param conf
+   * @return
+   */
+  @VisibleForTesting
+  int getTransferMode(Configuration conf) {
+    final String mode = conf.get(FS_FTP_TRANSFER_MODE);
+    // FTP default is STREAM_TRANSFER_MODE, but Hadoop FTPFS's default is
+    // FTP.BLOCK_TRANSFER_MODE historically.
+    int ret = FTP.BLOCK_TRANSFER_MODE;
+    if (mode == null) {
+      return ret;
+    }
+    final String upper = mode.toUpperCase();
+    if (upper.equals("STREAM_TRANSFER_MODE")) {
+      ret = FTP.STREAM_TRANSFER_MODE;
+    } else if (upper.equals("COMPRESSED_TRANSFER_MODE")) {
+      ret = FTP.COMPRESSED_TRANSFER_MODE;
+    } else {
+      if (!upper.equals("BLOCK_TRANSFER_MODE")) {
+        LOG.warn("Cannot parse the value for " + FS_FTP_TRANSFER_MODE + ": "
+            + mode + ". Using default.");
+      }
+    }
+    return ret;
+  }
+
+  /**
+   * Set the FTPClient's data connection mode based on configuration. Valid
+   * values are ACTIVE_LOCAL_DATA_CONNECTION_MODE,
+   * PASSIVE_LOCAL_DATA_CONNECTION_MODE and PASSIVE_REMOTE_DATA_CONNECTION_MODE.
+   * <p/>
+   * Defaults to ACTIVE_LOCAL_DATA_CONNECTION_MODE.
+   *
+   * @param client
+   * @param conf
+   * @throws IOException
+   */
+  @VisibleForTesting
+  void setDataConnectionMode(FTPClient client, Configuration conf)
+      throws IOException {
+    final String mode = conf.get(FS_FTP_DATA_CONNECTION_MODE);
+    if (mode == null) {
+      return;
+    }
+    final String upper = mode.toUpperCase();
+    if (upper.equals("PASSIVE_LOCAL_DATA_CONNECTION_MODE")) {
+      client.enterLocalPassiveMode();
+    } else if (upper.equals("PASSIVE_REMOTE_DATA_CONNECTION_MODE")) {
+      client.enterRemotePassiveMode();
+    } else {
+      if (!upper.equals("ACTIVE_LOCAL_DATA_CONNECTION_MODE")) {
+        LOG.warn("Cannot parse the value for " + FS_FTP_DATA_CONNECTION_MODE
+            + ": " + mode + ". Using default.");
+      }
+    }
+  }
+
+  /**

INS26 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS39 INS42 INS44 INS8 INS29 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS25 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS25 INS66 INS66 INS66 INS66 INS42 INS42 INS83 INS43 INS59 INS39 INS59 INS27 INS8 INS83 INS43 INS59 INS32 INS8 INS25 INS42 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS32 INS42 INS40 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS8 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS45 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS25 INS32 INS42 INS40 INS7 INS38 INS8 INS42 INS42 INS32 INS38 INS8 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 DEL40