YARN-9173. FairShare calculation broken for large values after YARN-8833. Contributed by Wilfred Spiegelenburg.

+import static java.lang.Math.addExact;
+
-public class ComputeFairShares {
+public final class ComputeFairShares {
+  private ComputeFairShares() {
+  }
+
-   * resourceUsedWithWeightToResourceRatio computes the total resources used with a
-   * given value of R.
+   * resourceUsedWithWeightToResourceRatio computes the total resources used
+   * with a given value of R.
-   * because resourceUsedWithWeightToResourceRatio is linear-time and the number of
-   * iterations of binary search is a constant (dependent on desired precision).
+   * because resourceUsedWithWeightToResourceRatio is linear-time and the
+   * number of iterations of binary search is a constant (dependent on desired
+   * precision).
-    int takenResources = handleFixedFairShares(
+    long takenResources = handleFixedFairShares(
-    int totalMaxShare = 0;
+    long totalMaxShare = 0;
-      totalMaxShare = (int) Math.min(maxShare + (long)totalMaxShare,
-          Integer.MAX_VALUE);
-      if (totalMaxShare == Integer.MAX_VALUE) {
+      totalMaxShare = safeAdd(maxShare, totalMaxShare);
+      if (totalMaxShare == Long.MAX_VALUE) {
-      target.setResourceValue(type, (long)computeShare(sched, right, type));
+      target.setResourceValue(type, computeShare(sched, right, type));
-   * w2rRatio, for use in the computeFairShares algorithm as described in #
+   * w2rRatio, for use in the computeFairShares algorithm as described in
+   * {@link #computeSharesInternal}.
-      if (Long.MAX_VALUE - resourcesTaken < share) {
-        return Long.MAX_VALUE;
+      resourcesTaken = safeAdd(resourcesTaken, share);
+      if (resourcesTaken == Long.MAX_VALUE) {
+        break;
-      resourcesTaken += share;
-  private static int handleFixedFairShares(
+  private static long handleFixedFairShares(
-    int totalResource = 0;
+    long totalResource = 0;
-        totalResource = (int) Math.min((long)totalResource + (long)fixedShare,
-            Integer.MAX_VALUE);
+        totalResource = safeAdd(totalResource, fixedShare);
-   * Get the fairshare for the {@link Schedulable} if it is fixed, -1 otherwise.
+   * Get the fairshare for the {@link Schedulable} if it is fixed,
+   * -1 otherwise.
+
+  /**
+   * Safely add two long values. The result will always be a valid long value.
+   * If the addition caused an overflow the return value will be set to
+   * <code>Long.MAX_VALUE</code>.
+   * @param a first long to add
+   * @param b second long to add
+   * @return result of the addition
+   */
+  private static long safeAdd(long a, long b) {
+    try {
+      return addExact(a, b);
+    } catch (ArithmeticException ae) {
+      return Long.MAX_VALUE;
+    }
+  }

INS26 INS40 INS83 INS31 INS31 INS83 INS42 INS8 UPD39 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS54 UPD66 UPD66 UPD66 UPD66 INS66 UPD39 UPD39 UPD66 INS65 INS66 UPD39 UPD66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS8 INS12 INS67 INS21 INS25 INS41 INS44 MOV8 INS42 INS7 INS27 INS8 INS32 INS43 INS42 INS32 UPD40 MOV32 INS42 INS32 INS42 INS40 INS10 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 DEL39 DEL42 DEL42 DEL39 DEL42 DEL11 DEL27 DEL40 DEL32 DEL11 DEL39 DEL11 DEL40 DEL42 DEL27 DEL42 DEL27 DEL25 DEL42 DEL42 DEL7 DEL21 DEL39 DEL42 DEL39 DEL42 DEL11 DEL39 DEL42 DEL11 DEL27 DEL40 DEL32 DEL11