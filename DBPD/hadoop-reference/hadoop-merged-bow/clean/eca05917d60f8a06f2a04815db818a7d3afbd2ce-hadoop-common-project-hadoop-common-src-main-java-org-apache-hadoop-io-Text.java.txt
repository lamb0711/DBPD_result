HADOOP-16951: Tidy Up Text and ByteWritables Classes.

1. Remove superfluous code
2. Remove superfluous comments
3. Checkstyle fixes
4. Remove methods that simply call super.method()
5. Use Java 8 facilities to streamline code where applicable
6. Simplify and unify some of the constructs between the two classes
7. Expanding of the arrays be 1.5x instead of 2x per expansion.
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
-  
+
-        return Charset.forName("UTF-8").newEncoder().
+        return StandardCharsets.UTF_8.newEncoder().
-  
+
-      return Charset.forName("UTF-8").newDecoder().
+      return StandardCharsets.UTF_8.newDecoder().
-  
-  private static final byte [] EMPTY_BYTES = new byte[0];
-  
-  private byte[] bytes;
-  private int length;
+  private static final byte[] EMPTY_BYTES = new byte[0];
+
+  private byte[] bytes = EMPTY_BYTES;
+  private int length = 0;
+
+  /**
+   * Construct an empty text string.
+   */
-    bytes = EMPTY_BYTES;
-  /** Construct from a string. 
+  /**
+   * Construct from a string.
-  /** Construct from another text. */
+  /**
+   * Construct from another text.
+   */
-  /** Construct from a byte array.
+  /**
+   * Construct from a byte array.
-  
+
-    byte[] result = new byte[length];
-    System.arraycopy(bytes, 0, result, 0, length);
-    return result;
+    return Arrays.copyOf(bytes, length);
-  
+
-  /** Returns the number of bytes in the byte array */ 
+  /**
+   * Returns the number of bytes in the byte array.
+   */
-  
+
-      
+
-  
+
-  
+
-      ByteBuffer src = ByteBuffer.wrap(this.bytes,0,this.length);
+      ByteBuffer src = ByteBuffer.wrap(this.bytes, 0, this.length);
-          
+
-      // can't get here
-      e.printStackTrace();
-      return -1;
+      throw new RuntimeException("Should not have happened", e);
-  }  
-  /** Set to contain the contents of a string. 
+  }
+
+  /**
+   * Set to contain the contents of a string.
-    }catch(CharacterCodingException e) {
-      throw new RuntimeException("Should not have happened ", e); 
+    } catch (CharacterCodingException e) {
+      throw new RuntimeException("Should not have happened", e);
-  /** Set to a utf8 byte array
+  /**
+   * Set to a utf8 byte array.
-  
-  /** copy a text. */
+
+  /**
+   * Copy a text.
+   */
-   * Set the Text to range of bytes
+   * Set the Text to range of bytes.
+   *
-    setCapacity(len, false);
+    ensureCapacity(len);
-   * Append a range of bytes to the end of the given text
+   * Append a range of bytes to the end of the given text.
+   *
-    setCapacity(length + len, true);
+    byte[] original = bytes;
+    int capacity = Math.max(length + len, length + (length >> 1));
+    if (ensureCapacity(capacity)) {
+      System.arraycopy(original, 0, bytes, 0, length);
+    }
-  /*
+  /**
-   * <code>len</code> bytes. If the current buffer is longer,
-   * then the capacity and existing content of the buffer are
-   * unchanged. If <code>len</code> is larger
-   * than the current capacity, the Text object's capacity is
-   * increased to match.
-   * @param len the number of bytes we need
-   * @param keepData should the old data be kept
+   * <code>capacity</code> bytes. If the current buffer is longer, then the
+   * capacity and existing content of the buffer are unchanged. If
+   * <code>capacity</code> is larger than the current capacity, the Text
+   * object's capacity is increased to match and any existing data is lost.
+   *
+   * @param capacity the number of bytes we need
+   * @return true if the internal array was resized or false otherwise
-  private void setCapacity(int len, boolean keepData) {
-    if (bytes == null || bytes.length < len) {
-      if (bytes != null && keepData) {
-        bytes = Arrays.copyOf(bytes, Math.max(len,length << 1));
-      } else {
-        bytes = new byte[len];
-      }
+  private boolean ensureCapacity(final int capacity) {
+    if (bytes.length < capacity) {
+      bytes = new byte[capacity];
+      return true;
+    return false;
-   
-  /** 
-   * Convert text back to string
-   * @see java.lang.Object#toString()
-   */
+
-      throw new RuntimeException("Should not have happened " , e); 
+      throw new RuntimeException("Should not have happened", e);
-  
-  /** deserialize 
-   */
+
-  
+
-  /** Skips over one Text in the input. */
+  /**
+   * Skips over one Text in the input.
+   */
-    setCapacity(len, false);
+    ensureCapacity(len);
-  /** serialize
-   * write this object to out
-   * length uses zero-compressed encoding
+  /**
+   * Serialize. Write this object to out length uses zero-compressed encoding.
+   *
-  /** Returns true iff <code>o</code> is a Text with the same contents.  */
+  /**
+   * Returns true iff <code>o</code> is a Text with the same length and same
+   * contents.
+   */
-      return compareBytes(b1, s1+n1, l1-n1, b2, s2+n2, l2-n2);
+      return compareBytes(b1, s1 + n1, l1 - n1, b2, s2 + n2, l2 - n2);
-  
+
-  
+
-  
+
-  
+
-  
-  /** Write a UTF8 encoded string to out
+
+  /**
+   * Write a UTF8 encoded string to out.
-  /** Write a UTF8 encoded string with a maximum size to out
+  /**
+   * Write a UTF8 encoded string with a maximum size to out.
-  
+
-  /** 
-   * Check if a byte array contains valid utf-8
+  /**
+   * Check if a byte array contains valid UTF-8.
+   *
-   * @throws MalformedInputException if the byte array contains invalid utf-8
+   * @throws MalformedInputException if the byte array contains invalid UTF-8
-    validateUTF8(utf8, 0, utf8.length);     
+    validateUTF8(utf8, 0, utf8.length);
-  
+
-   * Check to see if a byte array is valid utf-8
+   * Check to see if a byte array is valid UTF-8.
+   *
-  

MOV26 UPD40 INS29 INS8 INS29 UPD39 UPD42 INS42 INS34 INS65 INS41 INS60 INS60 INS25 MOV21 MOV21 INS65 INS65 INS65 INS83 UPD42 INS41 INS66 UPD66 UPD66 INS32 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV5 INS59 INS39 INS59 INS32 INS8 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS27 MOV8 INS9 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 MOV21 MOV40 UPD42 MOV42 INS41 UPD42 INS53 INS42 INS42 MOV27 INS27 INS9 INS14 INS42 INS36 INS42 UPD42 INS42 INS34 INS42 INS34 INS42 INS43 INS45 INS42 UPD45 INS27 UPD42 UPD45 INS42 INS42 INS34 INS40 INS40 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL7 DEL21 DEL39 DEL85 DEL5 DEL42 DEL42 DEL3 DEL59 DEL60 DEL34 DEL42 DEL34 DEL32 DEL21 DEL42 DEL41 DEL42 DEL42 DEL32 DEL21 DEL34 DEL38 DEL41 DEL9 DEL9 DEL8 DEL39 DEL42 DEL44 DEL42 DEL33 DEL27 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL66 DEL65 DEL40 DEL42 DEL68 DEL65 DEL29 DEL66 DEL65 DEL29 DEL9 DEL66 DEL66