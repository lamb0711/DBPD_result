YARN-6716. Native services support for specifying component start order. Contributed by Billie Rinaldi

+import org.apache.slider.server.servicemonitor.MonitorUtils;
+import java.util.Collection;
+import java.util.LinkedHashMap;
+import java.util.Map;
+      // validate dependency existence
+      if (comp.getDependencies() != null) {
+        for (String dependency : comp.getDependencies()) {
+          if (!componentNames.contains(dependency)) {
+            throw new IllegalArgumentException(String.format(
+                RestApiErrorMessages.ERROR_DEPENDENCY_INVALID, dependency,
+                comp.getName()));
+          }
+        }
+      }
+    // validate dependency tree
+    sortByDependencies(application.getComponents());
+
+
+    MonitorUtils.getProbe(comp.getReadinessCheck());
+  public static Collection<Component> sortByDependencies(List<Component>
+      components) {
+    Map<String, Component> sortedComponents =
+        sortByDependencies(components, null);
+    return sortedComponents.values();
+  }
+
+  /**
+   * Each internal call of sortByDependencies will identify all of the
+   * components with the same dependency depth (the lowest depth that has not
+   * been processed yet) and add them to the sortedComponents list, preserving
+   * their original ordering in the components list.
+   *
+   * So the first time it is called, all components with no dependencies
+   * (depth 0) will be identified. The next time it is called, all components
+   * that have dependencies only on the the depth 0 components will be
+   * identified (depth 1). This will be repeated until all components have
+   * been added to the sortedComponents list. If no new components are
+   * identified but the sortedComponents list is not complete, an error is
+   * thrown.
+   */
+  private static Map<String, Component> sortByDependencies(List<Component>
+      components, Map<String, Component> sortedComponents) {
+    if (sortedComponents == null) {
+      sortedComponents = new LinkedHashMap<>();
+    }
+
+    Map<String, Component> componentsToAdd = new LinkedHashMap<>();
+    List<Component> componentsSkipped = new ArrayList<>();
+    for (Component component : components) {
+      String name = component.getName();
+      if (sortedComponents.containsKey(name)) {
+        continue;
+      }
+      boolean dependenciesAlreadySorted = true;
+      if (!SliderUtils.isEmpty(component.getDependencies())) {
+        for (String dependency : component.getDependencies()) {
+          if (!sortedComponents.containsKey(dependency)) {
+            dependenciesAlreadySorted = false;
+            break;
+          }
+        }
+      }
+      if (dependenciesAlreadySorted) {
+        componentsToAdd.put(name, component);
+      } else {
+        componentsSkipped.add(component);
+      }
+    }
+
+    if (componentsToAdd.size() == 0) {
+      throw new IllegalArgumentException(String.format(RestApiErrorMessages
+          .ERROR_DEPENDENCY_CYCLE, componentsSkipped));
+    }
+    sortedComponents.putAll(componentsToAdd);
+    if (sortedComponents.size() == components.size()) {
+      return sortedComponents;
+    }
+    return sortByDependencies(components, sortedComponents);
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS21 INS21 INS43 INS43 INS74 INS42 INS60 INS41 INS65 INS43 INS43 INS43 INS74 INS42 INS74 INS42 INS25 INS60 INS60 INS70 INS25 INS21 INS25 INS41 INS32 INS32 INS42 INS42 INS43 INS43 INS74 INS59 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS27 INS8 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS27 INS8 INS32 INS27 INS8 INS32 INS25 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS25 INS60 INS25 INS25 INS32 INS34 INS53 INS42 INS42 INS42 INS32 INS32 INS41 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS7 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS43 INS59 INS32 INS8 INS39 INS59 INS38 INS8 INS42 INS8 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS70 INS42 INS14 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS18 INS42 INS9 INS32 INS70 INS21 INS21 INS43 INS32 INS42 INS42 INS44 INS32 INS8 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS44 INS32 INS8 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS43 INS42 INS42 INS42 INS25 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS42 INS42 INS38 INS8 INS32 INS53 INS32 INS21 INS10 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS7 INS43 INS32 INS42 INS9 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42