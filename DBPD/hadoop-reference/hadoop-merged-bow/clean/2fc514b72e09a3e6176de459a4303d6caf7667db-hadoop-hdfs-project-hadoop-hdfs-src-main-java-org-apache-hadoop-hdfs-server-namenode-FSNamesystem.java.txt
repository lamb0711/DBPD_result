Merge HDFS-4685 to trunk.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569870 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclStatus;
-  
+
+  private final AclConfigFlag aclConfigFlag;
+
+      this.aclConfigFlag = new AclConfigFlag(conf);
+  void modifyAclEntries(String src, List<AclEntry> aclSpec) throws IOException {
+    aclConfigFlag.checkForApiCall();
+    HdfsFileStatus resultingStat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode("Cannot modify ACL entries on " + src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+      checkOwner(pc, src);
+      dir.modifyAclEntries(src, aclSpec);
+      resultingStat = getAuditFileInfo(src, false);
+    } finally {
+      writeUnlock();
+    }
+    getEditLog().logSync();
+    logAuditEvent(true, "modifyAclEntries", src, null, resultingStat);
+  }
+
+  void removeAclEntries(String src, List<AclEntry> aclSpec) throws IOException {
+    aclConfigFlag.checkForApiCall();
+    HdfsFileStatus resultingStat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode("Cannot remove ACL entries on " + src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+      checkOwner(pc, src);
+      dir.removeAclEntries(src, aclSpec);
+      resultingStat = getAuditFileInfo(src, false);
+    } finally {
+      writeUnlock();
+    }
+    getEditLog().logSync();
+    logAuditEvent(true, "removeAclEntries", src, null, resultingStat);
+  }
+
+  void removeDefaultAcl(String src) throws IOException {
+    aclConfigFlag.checkForApiCall();
+    HdfsFileStatus resultingStat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode("Cannot remove default ACL entries on " + src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+      checkOwner(pc, src);
+      dir.removeDefaultAcl(src);
+      resultingStat = getAuditFileInfo(src, false);
+    } finally {
+      writeUnlock();
+    }
+    getEditLog().logSync();
+    logAuditEvent(true, "removeDefaultAcl", src, null, resultingStat);
+  }
+
+  void removeAcl(String src) throws IOException {
+    aclConfigFlag.checkForApiCall();
+    HdfsFileStatus resultingStat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode("Cannot remove ACL on " + src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+      checkOwner(pc, src);
+      dir.removeAcl(src);
+      resultingStat = getAuditFileInfo(src, false);
+    } finally {
+      writeUnlock();
+    }
+    getEditLog().logSync();
+    logAuditEvent(true, "removeAcl", src, null, resultingStat);
+  }
+
+  void setAcl(String src, List<AclEntry> aclSpec) throws IOException {
+    aclConfigFlag.checkForApiCall();
+    HdfsFileStatus resultingStat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode("Cannot set ACL on " + src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+      checkOwner(pc, src);
+      dir.setAcl(src, aclSpec);
+      resultingStat = getAuditFileInfo(src, false);
+    } finally {
+      writeUnlock();
+    }
+    getEditLog().logSync();
+    logAuditEvent(true, "setAcl", src, null, resultingStat);
+  }
+
+  AclStatus getAclStatus(String src) throws IOException {
+    aclConfigFlag.checkForApiCall();
+    checkOperation(OperationCategory.READ);
+    readLock();
+    try {
+      checkOperation(OperationCategory.READ);
+      return dir.getAclStatus(src);
+    } finally {
+      readUnlock();
+    }
+  }
+

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS39 INS42 INS44 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS43 INS8 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS43 INS8 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS43 INS42 INS74 INS42 INS42 INS21 INS60 INS60 INS21 INS60 INS21 INS54 INS21 INS21 INS43 INS42 INS74 INS42 INS42 INS21 INS60 INS60 INS21 INS60 INS21 INS54 INS21 INS21 INS43 INS42 INS42 INS21 INS60 INS60 INS21 INS60 INS21 INS54 INS21 INS21 INS43 INS42 INS42 INS21 INS60 INS60 INS21 INS60 INS21 INS54 INS21 INS21 INS43 INS42 INS74 INS42 INS42 INS21 INS60 INS60 INS21 INS60 INS21 INS54 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS54 INS42 INS43 INS43 INS32 INS43 INS59 INS43 INS59 INS32 INS5 INS59 INS32 INS8 INS8 INS32 INS32 INS42 INS43 INS43 INS32 INS43 INS59 INS43 INS59 INS32 INS5 INS59 INS32 INS8 INS8 INS32 INS32 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS5 INS59 INS32 INS8 INS8 INS32 INS32 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS5 INS59 INS32 INS8 INS8 INS32 INS32 INS42 INS43 INS43 INS32 INS43 INS59 INS43 INS59 INS32 INS5 INS59 INS32 INS8 INS8 INS32 INS32 INS42 INS32 INS32 INS32 INS8 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS40 INS39 INS85 INS85 INS42 INS32 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS9 INS45 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS40 INS39 INS85 INS85 INS42 INS32 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS9 INS45 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS40 INS39 INS85 INS85 INS42 INS32 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS9 INS45 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS40 INS39 INS85 INS85 INS42 INS32 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS9 INS45 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS40 INS39 INS85 INS85 INS42 INS32 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS9 INS45 INS42 INS33 INS42 INS42 INS42 INS42 INS40 INS42 INS21 INS41 INS21 INS7 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS32 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS32 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS32 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS32 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS32 INS32 INS7 INS32 INS42 INS32 INS32 INS32 INS22 INS14 INS42 INS40 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS52 INS42 INS43 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42