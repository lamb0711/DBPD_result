HDFS-9044. Give Priority to FavouredNodes , before selecting nodes from FavouredNode's Node Group (Contributed by J.Andreina)

-  /** choose local node of localMachine as the target.
-   * if localMachine is not available, choose a node on the same nodegroup or 
-   * rack instead.
+  /**
+   * choose all good favored nodes as target.
+   * If no enough targets, then choose one replica from
+   * each bad favored node's node group.
+   * @throws NotEnoughReplicasException
+   */
+  @Override
+  protected void chooseFavouredNodes(String src, int numOfReplicas,
+      List<DatanodeDescriptor> favoredNodes,
+      Set<Node> favoriteAndExcludedNodes, long blocksize,
+      int maxNodesPerRack, List<DatanodeStorageInfo> results,
+      boolean avoidStaleNodes, EnumMap<StorageType, Integer> storageTypes)
+      throws NotEnoughReplicasException {
+    super.chooseFavouredNodes(src, numOfReplicas, favoredNodes,
+        favoriteAndExcludedNodes, blocksize, maxNodesPerRack, results,
+        avoidStaleNodes, storageTypes);
+    if (results.size() < numOfReplicas) {
+      // Not enough replicas, choose from unselected Favorednode's Nodegroup
+      for (int i = 0;
+          i < favoredNodes.size() && results.size() < numOfReplicas; i++) {
+        DatanodeDescriptor favoredNode = favoredNodes.get(i);
+        boolean chosenNode =
+            isNodeChosen(results, favoredNode);
+        if (chosenNode) {
+          continue;
+        }
+        NetworkTopologyWithNodeGroup clusterMapNodeGroup =
+            (NetworkTopologyWithNodeGroup) clusterMap;
+        // try a node on FavouredNode's node group
+        DatanodeStorageInfo target = null;
+        String scope =
+            clusterMapNodeGroup.getNodeGroup(favoredNode.getNetworkLocation());
+        try {
+          target =
+              chooseRandom(scope, favoriteAndExcludedNodes, blocksize,
+                maxNodesPerRack, results, avoidStaleNodes, storageTypes);
+        } catch (NotEnoughReplicasException e) {
+          // catch Exception and continue with other favored nodes
+          continue;
+        }
+        if (target == null) {
+          LOG.warn("Could not find a target for file "
+              + src + " within nodegroup of favored node " + favoredNode);
+          continue;
+        }
+        favoriteAndExcludedNodes.add(target.getDatanodeDescriptor());
+      }
+    }
+  }
+
+  private boolean isNodeChosen(
+      List<DatanodeStorageInfo> results, DatanodeDescriptor favoredNode) {
+    boolean chosenNode = false;
+    for (int j = 0; j < results.size(); j++) {
+      if (results.get(j).getDatanodeDescriptor().equals(favoredNode)) {
+        chosenNode = true;
+        break;
+      }
+    }
+    return chosenNode;
+  }
+
+  /** choose local node of <i>localMachine</i> as the target.
+   * If localMachine is not available, will fallback to nodegroup/rack
+   * when flag <i>fallbackToNodeGroupAndLocalRack</i> is set.
-      EnumMap<StorageType, Integer> storageTypes, boolean fallbackToLocalRack)
+      EnumMap<StorageType, Integer> storageTypes,
+      boolean fallbackToNodeGroupAndLocalRack)
+    if (!fallbackToNodeGroupAndLocalRack) {
+      return null;
+    }
-
-    if (!fallbackToLocalRack) {
-      return null;
-    }

INS31 INS31 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS8 MOV25 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS74 INS42 INS39 INS42 INS39 INS42 INS74 INS42 INS39 INS42 INS74 INS42 INS42 INS21 INS25 INS74 INS42 INS43 INS42 INS60 INS24 INS41 UPD42 INS66 INS66 INS66 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS48 INS27 INS8 INS43 INS43 INS42 INS39 INS59 INS58 INS27 INS37 INS8 INS42 UPD66 UPD66 UPD66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS24 INS42 INS42 INS42 INS9 INS39 INS59 INS42 INS32 INS42 INS25 UPD42 INS42 INS42 INS58 INS27 INS37 INS8 INS42 INS34 INS42 INS42 INS32 INS8 INS39 INS59 INS27 INS27 INS42 INS60 INS60 INS25 INS60 INS60 INS60 INS54 INS25 INS21 INS32 INS42 INS42 INS21 INS10 INS42 INS34 INS42 INS32 INS32 INS42 INS43 INS59 INS39 INS59 INS42 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS27 INS8 INS32 INS32 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS18 INS42 INS42 INS11 INS42 INS42 INS33 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS33 INS21 INS18 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS7 INS43 INS42 INS18 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42