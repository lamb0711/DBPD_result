HADOOP-6929. RPC should have a way to pass Security information other than protocol annotations. (sharad and omalley via mahadev)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1136249 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ServiceLoader;
-import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.token.TokenInfo;
+
+  private static ServiceLoader<SecurityInfo> securityInfoProviders = 
+    ServiceLoader.load(SecurityInfo.class);
+  private static SecurityInfo[] testProviders = new SecurityInfo[0];
+
+  /**
+   * Test setup method to register additional providers.
+   * @param providers a list of high priority providers to use
+   */
+  @InterfaceAudience.Private
+  public static void setSecurityInfoProviders(SecurityInfo... providers) {
+    testProviders = providers;
+  }
+  
+  /**
+   * Look up the KerberosInfo for a given protocol. It searches all known
+   * SecurityInfo providers.
+   * @param protocol the protocol class to get the information for
+   * @return the KerberosInfo or null if it has no KerberosInfo defined
+   */
+  public static KerberosInfo getKerberosInfo(Class<?> protocol) {
+    for(SecurityInfo provider: testProviders) {
+      KerberosInfo result = provider.getKerberosInfo(protocol);
+      if (result != null) {
+        return result;
+      }
+    }
+    for(SecurityInfo provider: securityInfoProviders) {
+      KerberosInfo result = provider.getKerberosInfo(protocol);
+      if (result != null) {
+        return result;
+      }
+    }
+    return null;
+  }
+ 
+  /**
+   * Look up the TokenInfo for a given protocol. It searches all known
+   * SecurityInfo providers.
+   * @param protocol The protocol class to get the information for.
+   * @return the TokenInfo or null if it has no KerberosInfo defined
+   */
+  public static TokenInfo getTokenInfo(Class<?> protocol) {
+    for(SecurityInfo provider: testProviders) {
+      TokenInfo result = provider.getTokenInfo(protocol);
+      if (result != null) {
+        return result;
+      }      
+    }
+    for(SecurityInfo provider: securityInfoProviders) {
+      TokenInfo result = provider.getTokenInfo(protocol);
+      if (result != null) {
+        return result;
+      }
+    } 
+    return null;
+  }
+

MOV26 INS26 INS40 UPD40 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 INS83 INS5 INS59 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS42 INS32 INS43 INS85 INS42 INS3 INS65 INS65 INS40 INS43 INS42 INS21 INS65 INS65 INS65 INS42 INS74 INS42 INS70 INS70 INS41 INS65 INS65 INS65 INS42 INS74 INS42 INS70 INS70 INS41 INS42 INS42 INS42 INS42 INS57 INS42 INS5 INS34 INS66 INS42 INS66 INS42 INS7 INS66 INS66 INS42 INS66 INS66 INS43 INS76 INS44 INS42 INS8 INS44 INS42 INS8 INS33 INS66 INS66 INS42 INS66 INS66 INS43 INS76 INS44 INS42 INS8 INS44 INS42 INS8 INS33 INS43 INS43 INS85 INS42 INS42 INS42 INS43 INS42 INS60 INS25 INS43 INS42 INS60 INS25 INS42 INS43 INS42 INS60 INS25 INS43 INS42 INS60 INS25 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42