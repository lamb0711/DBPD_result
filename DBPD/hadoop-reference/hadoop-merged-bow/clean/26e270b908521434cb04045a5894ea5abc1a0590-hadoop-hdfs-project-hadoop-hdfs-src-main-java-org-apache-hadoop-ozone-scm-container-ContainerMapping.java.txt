HDFS-12751. Ozone: SCM: update container allocated size to container db for all the open containers in ContainerStateManager#close. Contributed by Chen Liang.

+import com.google.common.annotations.VisibleForTesting;
+    if (containerStateManager != null) {
+      flushContainerInfo();
+      containerStateManager.close();
+    }
+
+  /**
+   * Since allocatedBytes of a container is only in memory, stored in
+   * containerStateManager, when closing ContainerMapping, we need to update
+   * this in the container store.
+   *
+   * @throws IOException
+   */
+  @VisibleForTesting
+  public void flushContainerInfo() throws IOException {
+    List<ContainerInfo> containers = containerStateManager.getAllContainers();
+    List<String> failedContainers = new ArrayList<>();
+    for (ContainerInfo info : containers) {
+      // even if some container updated failed, others can still proceed
+      try {
+        byte[] dbKey = info.getContainerName().getBytes(encoding);
+        byte[] containerBytes = containerStore.get(dbKey);
+        // TODO : looks like when a container is deleted, the container is
+        // removed from containerStore but not containerStateManager, so it can
+        // return info of a deleted container. may revisit this in the future,
+        // for now, just skip a not-found container
+        if (containerBytes != null) {
+          OzoneProtos.SCMContainerInfo oldInfoProto =
+              OzoneProtos.SCMContainerInfo.PARSER.parseFrom(containerBytes);
+          ContainerInfo oldInfo = ContainerInfo.fromProtobuf(oldInfoProto);
+          oldInfo.setAllocatedBytes(info.getAllocatedBytes());
+          containerStore.put(dbKey, oldInfo.getProtobuf().toByteArray());
+        } else {
+          LOG.debug("Container state manager has container {} but not found " +
+              "in container store, a deleted container?",
+              info.getContainerName());
+        }
+      } catch (IOException ioe) {
+        failedContainers.add(info.getContainerName());
+      }
+    }
+    if (!failedContainers.isEmpty()) {
+      throw new IOException("Error in flushing container info from container " +
+          "state manager: " + failedContainers);
+    }
+  }
+
+  @VisibleForTesting
+  public MetadataStore getContainerStore() {
+    return containerStore;
+  }

INS26 INS40 INS31 INS31 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS25 INS65 INS65 INS42 INS42 INS60 INS60 INS70 INS25 INS42 INS42 INS41 INS27 INS8 INS66 INS66 INS66 INS42 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS38 INS8 INS42 INS42 INS33 INS21 INS21 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS54 INS32 INS53 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS8 INS12 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS60 INS60 INS25 INS44 INS8 INS43 INS27 INS42 INS5 INS59 INS5 INS59 INS27 INS8 INS8 INS43 INS42 INS21 INS42 INS45 INS45 INS42 INS39 INS85 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS33 INS60 INS60 INS21 INS21 INS21 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS45 INS42 INS42 INS42 INS42