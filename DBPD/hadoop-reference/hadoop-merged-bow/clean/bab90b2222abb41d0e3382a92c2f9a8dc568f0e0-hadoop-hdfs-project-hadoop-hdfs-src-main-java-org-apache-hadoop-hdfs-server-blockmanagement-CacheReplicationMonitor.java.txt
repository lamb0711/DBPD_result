HDFS-6085. Improve CacheReplicationMonitor log messages a bit (cmccabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576194 13f79535-47bb-0310-9956-ffa450edef68

+      scannedDirectives++;
-      if (LOG.isTraceEnabled()) {
-        LOG.trace("Directive expiry is at " + directive.getExpiryTime());
-      }
-          LOG.debug("Skipping directive id " + directive.getId()
-              + " because it has expired (" + directive.getExpiryTime() + "<="
-              + now + ")");
+          LOG.debug("Directive " + directive.getId() + ": the directive " +
+              "expired at " + directive.getExpiryTime() + " (now = " +
+              now + ")");
-      scannedDirectives++;
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Directive " + directive.getId() +
+              ": got UnresolvedLinkException while resolving path " + path);
+        }
-          LOG.debug("No inode found at " + path);
+          LOG.debug("Directive " + directive.getId() +
+              ": No inode found at " + path);
-          LOG.debug("Ignoring non-directory, non-file inode " + node +
-                    " found at " + path);
+          LOG.debug("Directive " + directive.getId() + 
+              ": ignoring non-directive, non-file inode " + node);
-        LOG.debug(String.format("Skipping directive id %d file %s because "
-            + "limit of pool %s would be exceeded (%d > %d)",
+        LOG.debug(String.format("Directive %d: not scanning file %s because " +
+            "bytesNeeded for pool %s is %d, but the pool's limit is %d",
+        if (LOG.isTraceEnabled()) {
+          LOG.trace("Directive " + directive.getId() + ": can't cache " +
+              "block " + blockInfo + " because it is in state " +
+              blockInfo.getBlockUCState() + ", not COMPLETE.");
+        }
+        ocblock = ncblock;
+      if (LOG.isTraceEnabled()) {
+        LOG.trace("Directive " + directive.getId() + ": setting replication " +
+                "for block " + blockInfo + " to " + ocblock.getReplication());
+      }
-    if (LOG.isTraceEnabled()) {
-      LOG.trace("Directive " + directive.getId() + " is caching " +
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Directive " + directive.getId() + ": caching " +
+          if (LOG.isTraceEnabled()) {
+            LOG.trace("Block " + cblock.getBlockId() + ": removing from " +
+                "PENDING_UNCACHED for node " + datanode.getDatanodeUuid() +
+                "because the DataNode uncached it.");
+          }
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("not caching " + cblock + " because it is " + reason);
+        if (LOG.isTraceEnabled()) {
+          LOG.trace("Block " + cblock.getBlockId() + ": can't cache " +
+              "block because it is " + reason);
+          if (LOG.isTraceEnabled()) {
+            LOG.trace("Block " + cblock.getBlockId() + ": removing from " +
+                "PENDING_CACHED for node " + datanode.getDatanodeUuid() +
+                "because we already have " + numCached + " cached " +
+                "replicas and we only need " + neededCached);
+          }
+          if (LOG.isTraceEnabled()) {
+            LOG.trace("Block " + cblock.getBlockId() + ": removing from " +
+                "PENDING_UNCACHED for node " + datanode.getDatanodeUuid() +
+                "because we only have " + numCached + " cached replicas " +
+                "and we need " + neededCached);
+          }
+        if (LOG.isTraceEnabled()) {
+          LOG.trace("Block " + cblock.getBlockId() + ": removing from " +
+              "cachedBlocks, since neededCached == 0, and " +
+              "pendingUncached and pendingCached are empty.");
+        }
-        LOG.debug("Not caching block " + cachedBlock + " because there " +
-            "is no record of it on the NameNode.");
+        LOG.debug("Block " + cachedBlock.getBlockId() + ": can't add new " +
+            "cached replicas, because there is no record of this block " +
+            "on the NameNode.");
-        LOG.debug("Not caching block " + cachedBlock + " because it " +
-            "is not yet complete.");
+        LOG.debug("Block " + cachedBlock.getBlockId() + ": can't cache this " +
+            "block, because it is not yet complete.");
-          LOG.trace("Datanode " + datanode + " is not a valid possibility for"
-              + " block " + blockInfo.getBlockId() + " of size "
-              + blockInfo.getNumBytes() + " bytes, only has "
-              + datanode.getCacheRemaining() + " bytes of cache remaining.");
+          LOG.trace("Block " + blockInfo.getBlockId() + ": DataNode " +
+              datanode.getDatanodeUuid() + " is not a valid possibility " +
+              "because the block has size " + blockInfo.getNumBytes() + ", but " +
+              "the DataNode only has " + datanode.getCacheRemaining() + " " +
+              "bytes of cache remaining.");
+      if (LOG.isTraceEnabled()) {
+          LOG.trace("Block " + blockInfo.getBlockId() + ": added to " +
+              "PENDING_CACHED on DataNode " + datanode.getDatanodeUuid());
+      }
-        LOG.debug(
-            "Only have " +
+        LOG.debug("Block " + blockInfo.getBlockId() + ": we only have " +
-            " of " + cachedBlock.getReplication() + " cached replicas for " +
-            cachedBlock + " (" + outOfCapacity + " nodes have insufficient " +
-            "capacity).");
+            " of " + cachedBlock.getReplication() + " cached replicas.  " +
+            outOfCapacity + " DataNodes have insufficient cache capacity.");

MOV25 INS25 UPD42 INS25 INS32 INS8 INS8 INS8 MOV32 MOV32 INS32 INS8 INS25 INS21 INS42 INS42 INS21 UPD42 MOV60 INS25 INS25 MOV21 INS42 INS42 INS21 INS25 MOV32 INS8 INS7 INS32 UPD45 MOV38 INS8 INS32 MOV8 INS32 INS32 INS8 INS21 INS42 INS42 INS42 INS42 INS27 MOV25 MOV21 MOV21 UPD42 INS25 MOV21 MOV21 INS25 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS42 INS21 INS32 INS45 INS32 INS45 INS45 INS42 INS45 INS32 INS32 INS32 INS8 INS32 INS8 INS32 UPD45 INS32 INS45 UPD45 UPD45 UPD45 INS32 UPD45 UPD45 INS45 INS32 INS45 INS45 INS32 INS45 INS32 UPD45 UPD45 UPD45 MOV45 INS32 UPD45 UPD45 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS21 UPD42 MOV42 UPD42 MOV42 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 MOV32 MOV45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 UPD45 UPD45 UPD45 INS42 INS42 INS27 INS45 INS32 UPD45 INS45 INS32 INS45 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS42 UPD45 INS32 INS45 UPD45 INS32 INS32 INS45 INS32 INS45 INS45 INS45 INS45 UPD45 INS32 UPD45 UPD45 UPD45 UPD45 INS45 UPD45 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 UPD42 MOV42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 INS32 UPD45 UPD42 INS45 INS32 INS45 INS45 INS32 INS45 INS45 INS32 INS45 INS45 INS32 INS45 INS42 INS45 INS45 INS42 INS45 INS32 INS45 INS45 INS32 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL45