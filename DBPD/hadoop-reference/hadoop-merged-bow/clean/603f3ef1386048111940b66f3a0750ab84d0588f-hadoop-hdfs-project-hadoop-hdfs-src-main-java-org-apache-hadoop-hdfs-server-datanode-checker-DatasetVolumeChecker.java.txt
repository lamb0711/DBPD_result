HDFS-11274. Datanode should only check the failed volume upon IO errors. Contributed by Xiaoyu Yao.

+import com.google.common.base.Optional;
-      allVolumes.add(reference.getVolume());
-      ListenableFuture<VolumeCheckResult> future =
+      Optional<ListenableFuture<VolumeCheckResult>> olf =
-      Futures.addCallback(future, new ResultHandler(
-          reference, healthyVolumes, failedVolumes, numVolumes, new Callback() {
-        @Override
-        public void call(Set<FsVolumeSpi> ignored1,
-                         Set<FsVolumeSpi> ignored2) {
+      if (olf.isPresent()) {
+        allVolumes.add(reference.getVolume());
+        Futures.addCallback(olf.get(),
+            new ResultHandler(reference, healthyVolumes, failedVolumes,
+                numVolumes, new Callback() {
+              @Override
+              public void call(Set<FsVolumeSpi> ignored1,
+                               Set<FsVolumeSpi> ignored2) {
+                latch.countDown();
+              }
+            }));
+      } else {
+        IOUtils.cleanup(null, reference);
+        if (numVolumes.decrementAndGet() == 0) {
-      }));
+      }
+    boolean added = false;
-      ListenableFuture<VolumeCheckResult> future =
+      Optional<ListenableFuture<VolumeCheckResult>> olf =
-      Futures.addCallback(future, new ResultHandler(
-          reference, healthyVolumes, failedVolumes, numVolumes, callback));
+      if (olf.isPresent()) {
+        added = true;
+        Futures.addCallback(olf.get(),
+            new ResultHandler(reference, healthyVolumes, failedVolumes,
+                numVolumes, callback));
+      } else {
+        IOUtils.cleanup(null, reference);
+        numVolumes.decrementAndGet();
+      }
-    return true;
+    return added;
-   * Check a single volume, returning a {@link ListenableFuture}
+   * Check a single volume asynchronously, returning a {@link ListenableFuture}
+    if (volume == null) {
+      LOG.debug("Cannot schedule check on null volume");
+      return false;
+    }
+
-      callback.call(new HashSet<>(), new HashSet<>());
-    ListenableFuture<VolumeCheckResult> future =
+
+    Optional<ListenableFuture<VolumeCheckResult>> olf =
-    numVolumeChecks.incrementAndGet();
-    Futures.addCallback(future, new ResultHandler(
-        volumeReference, new HashSet<>(), new HashSet<>(),
-        new AtomicLong(1), callback));
-    return true;
+    if (olf.isPresent()) {
+      numVolumeChecks.incrementAndGet();
+      Futures.addCallback(olf.get(),
+          new ResultHandler(volumeReference, new HashSet<>(), new HashSet<>(),
+          new AtomicLong(1), callback));
+      return true;
+    } else {
+      IOUtils.cleanup(null, volumeReference);
+    }
+    return false;
-     * @param semaphore semaphore used to trigger callback invocation.
-     * @param callback invoked when the semaphore can be successfully acquired.
+     * @param volumeCounter volumeCounter used to trigger callback invocation.
+     * @param callback invoked when the volumeCounter reaches 0.

INS26 INS40 INS60 INS41 INS25 INS25 INS41 INS39 INS59 INS42 UPD66 INS27 INS8 INS74 INS32 INS8 INS8 INS9 INS25 INS42 INS9 INS25 INS42 INS33 INS21 MOV41 INS43 MOV74 UPD42 INS42 INS42 MOV21 MOV21 MOV41 INS21 UPD42 UPD66 UPD66 INS74 INS32 INS8 INS8 INS74 INS32 INS8 INS8 INS32 INS41 INS42 INS32 INS43 MOV74 UPD42 INS42 INS42 MOV21 MOV21 INS21 INS25 INS43 MOV74 UPD42 INS42 INS42 INS21 MOV21 INS21 INS21 INS42 INS42 INS45 INS9 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS27 INS8 INS42 INS7 INS32 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS33 INS42 INS32 INS34 INS21 INS42 INS9 INS32 INS42 INS42 INS33 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 DEL9 DEL41 DEL42 DEL42 DEL42 DEL43 DEL74 DEL14 DEL42 DEL43 DEL74 DEL14 DEL32 DEL21