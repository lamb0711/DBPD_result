HADOOP-9380 Add totalLength to rpc response  (sanjay Radia)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1459392 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.protobuf.AbstractMessageLite;
+import com.google.protobuf.CodedOutputStream;
-            .mergeFrom(val.responseMessage).build();
+            .mergeFrom(val.theResponseRead).build();
+  interface RpcWrapper extends Writable {
+    int getLength();
+  }
-  private static class RpcRequestWrapper implements Writable {
+  private static class RpcRequestWrapper implements RpcWrapper {
+
+    @Override
+    public int getLength() {
+      int headerLen = requestHeader.getSerializedSize();
+      int reqLen;
+      if (theRequest != null) {
+        reqLen = theRequest.getSerializedSize();
+      } else if (theRequestRead != null ) {
+        reqLen = theRequestRead.length;
+      } else {
+        throw new IllegalArgumentException(
+            "getLenght on uninilialized RpcWrapper");      
+      }
+      return CodedOutputStream.computeRawVarint32Size(headerLen) +  headerLen
+          + CodedOutputStream.computeRawVarint32Size(reqLen) + reqLen;
+    }
-  private static class RpcResponseWrapper implements Writable {
-    byte[] responseMessage;
+  private static class RpcResponseWrapper implements RpcWrapper {
+    Message theResponse; // for senderSide, the response is here
+    byte[] theResponseRead; // for receiver side, the response is here
-      this.responseMessage = message.toByteArray();
+      this.theResponse = message;
-      out.writeInt(responseMessage.length);
-      out.write(responseMessage);     
+      OutputStream os = DataOutputOutputStream.constructOutputStream(out);
+      theResponse.writeDelimitedTo(os);   
-      int length = in.readInt();
-      byte[] bytes = new byte[length];
-      in.readFully(bytes);
-      responseMessage = bytes;
+      int length = ProtoUtil.readRawVarint32(in);
+      theResponseRead = new byte[length];
+      in.readFully(theResponseRead);
+    }
+    
+    @Override
+    public int getLength() {
+      int resLen;
+      if (theResponse != null) {
+        resLen = theResponse.getSerializedSize();
+      } else if (theResponseRead != null ) {
+        resLen = theResponseRead.length;
+      } else {
+        throw new IllegalArgumentException(
+            "getLenght on uninilialized RpcWrapper");      
+      }
+      return CodedOutputStream.computeRawVarint32Size(resLen) + resLen;

INS26 INS26 INS40 INS40 INS55 INS42 MOV43 INS31 INS43 INS31 INS43 INS23 INS31 INS31 INS39 INS42 INS42 INS78 INS83 INS39 INS42 INS8 INS42 INS43 INS59 MOV5 MOV78 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS60 INS60 INS25 INS41 UPD42 MOV42 INS42 UPD42 INS60 MOV60 INS21 MOV21 INS42 INS60 INS25 INS41 INS39 INS59 INS39 INS59 INS27 INS8 INS25 INS27 INS43 INS59 INS7 INS39 INS59 INS27 INS8 INS25 INS27 INS42 INS32 INS42 INS42 INS33 INS21 INS27 INS8 INS8 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 MOV3 UPD42 INS42 INS42 INS33 MOV21 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS7 INS42 INS33 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS33 INS21 INS53 INS42 INS42 INS42 INS42 INS32 INS7 INS14 INS42 INS32 INS7 INS14 INS42 INS42 INS42 INS40 INS43 INS45 INS42 INS42 INS42 INS40 INS43 INS45 UPD40 INS42 INS42 DEL43 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL59 DEL60 DEL8 DEL31