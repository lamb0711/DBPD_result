HDFS-6507. Improve DFSAdmin to support HA cluster better. (Contributd by Zesheng Wu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604692 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.NameNodeProxies.ProxyAndInfo;
-    DistributedFileSystem dfs = getDFS();
-    boolean inSafeMode = dfs.setSafeMode(action);
-    //
-    // If we are waiting for safemode to exit, then poll and
-    // sleep till we are out of safemode.
-    //
-    if (waitExitSafe) {
-      while (inSafeMode) {
-        try {
-          Thread.sleep(5000);
-        } catch (java.lang.InterruptedException e) {
-          throw new IOException("Wait Interrupted");
+    DistributedFileSystem dfs = getDFS();
+    Configuration dfsConf = dfs.getConf();
+    URI dfsUri = dfs.getUri();
+    boolean isHaEnabled = HAUtil.isLogicalUri(dfsConf, dfsUri);
+
+    if (isHaEnabled) {
+      String nsId = dfsUri.getHost();
+      List<ProxyAndInfo<ClientProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(
+          dfsConf, nsId, ClientProtocol.class);
+      for (ProxyAndInfo<ClientProtocol> proxy : proxies) {
+        ClientProtocol haNn = proxy.getProxy();
+        boolean inSafeMode = haNn.setSafeMode(action, false);
+        if (waitExitSafe) {
+          inSafeMode = waitExitSafeMode(haNn, inSafeMode);
-        inSafeMode = dfs.setSafeMode(SafeModeAction.SAFEMODE_GET);
+        System.out.println("Safe mode is " + (inSafeMode ? "ON" : "OFF")
+            + " in " + proxy.getAddress());
+    } else {
+      boolean inSafeMode = dfs.setSafeMode(action);
+      if (waitExitSafe) {
+        inSafeMode = waitExitSafeMode(dfs, inSafeMode);
+      }
+      System.out.println("Safe mode is " + (inSafeMode ? "ON" : "OFF"));
-    System.out.println("Safe mode is " + (inSafeMode ? "ON" : "OFF"));
+  }
+
+  private boolean waitExitSafeMode(DistributedFileSystem dfs, boolean inSafeMode)
+      throws IOException {
+    while (inSafeMode) {
+      try {
+        Thread.sleep(5000);
+      } catch (java.lang.InterruptedException e) {
+        throw new IOException("Wait Interrupted");
+      }
+      inSafeMode = dfs.setSafeMode(SafeModeAction.SAFEMODE_GET, false);
+    }
+    return inSafeMode;
+  }
+
+  private boolean waitExitSafeMode(ClientProtocol nn, boolean inSafeMode)
+      throws IOException {
+    while (inSafeMode) {
+      try {
+        Thread.sleep(5000);
+      } catch (java.lang.InterruptedException e) {
+        throw new IOException("Wait Interrupted");
+      }
+      inSafeMode = nn.setSafeMode(SafeModeAction.SAFEMODE_GET, false);
+    }
+    return inSafeMode;
-    dfs.saveNamespace();
+    Configuration dfsConf = dfs.getConf();
+    URI dfsUri = dfs.getUri();
+    boolean isHaEnabled = HAUtil.isLogicalUri(dfsConf, dfsUri);
+
+    if (isHaEnabled) {
+      String nsId = dfsUri.getHost();
+      List<ProxyAndInfo<ClientProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,
+          nsId, ClientProtocol.class);
+      for (ProxyAndInfo<ClientProtocol> proxy : proxies) {
+        proxy.getProxy().saveNamespace();
+        System.out.println("Save namespace successful for " +
+            proxy.getAddress());
+      }
+    } else {
+      dfs.saveNamespace();
+      System.out.println("Save namespace successful");
+    }
-
-    Boolean res = dfs.restoreFailedStorage(arg);
-    System.out.println("restoreFailedStorage is set to " + res);
+    Configuration dfsConf = dfs.getConf();
+    URI dfsUri = dfs.getUri();
+    boolean isHaEnabled = HAUtil.isLogicalUri(dfsConf, dfsUri);
+
+    if (isHaEnabled) {
+      String nsId = dfsUri.getHost();
+      List<ProxyAndInfo<ClientProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,
+          nsId, ClientProtocol.class);
+      for (ProxyAndInfo<ClientProtocol> proxy : proxies) {
+        Boolean res = proxy.getProxy().restoreFailedStorage(arg);
+        System.out.println("restoreFailedStorage is set to " + res + " for "
+            + proxy.getAddress());
+      }
+    } else {
+      Boolean res = dfs.restoreFailedStorage(arg);
+      System.out.println("restoreFailedStorage is set to " + res);
+    }
-    dfs.refreshNodes();
+    Configuration dfsConf = dfs.getConf();
+    URI dfsUri = dfs.getUri();
+    boolean isHaEnabled = HAUtil.isLogicalUri(dfsConf, dfsUri);
+
+    if (isHaEnabled) {
+      String nsId = dfsUri.getHost();
+      List<ProxyAndInfo<ClientProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,
+          nsId, ClientProtocol.class);
+      for (ProxyAndInfo<ClientProtocol> proxy: proxies) {
+        proxy.getProxy().refreshNodes();
+        System.out.println("Refresh nodes successful for " +
+            proxy.getAddress());
+      }
+    } else {
+      dfs.refreshNodes();
+      System.out.println("Refresh nodes successful");
+    }
-    dfs.setBalancerBandwidth(bandwidth);
+    Configuration dfsConf = dfs.getConf();
+    URI dfsUri = dfs.getUri();
+    boolean isHaEnabled = HAUtil.isLogicalUri(dfsConf, dfsUri);
+
+    if (isHaEnabled) {
+      String nsId = dfsUri.getHost();
+      List<ProxyAndInfo<ClientProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,
+          nsId, ClientProtocol.class);
+      for (ProxyAndInfo<ClientProtocol> proxy : proxies) {
+        proxy.getProxy().setBalancerBandwidth(bandwidth);
+        System.out.println("Balancer bandwidth is set to " + bandwidth +
+            " for " + proxy.getAddress());
+      }
+    } else {
+      dfs.setBalancerBandwidth(bandwidth);
+      System.out.println("Balancer bandwidth is set to " + bandwidth);
+    }
-      for (ClientProtocol haNn : namenodes) {
-        haNn.finalizeUpgrade();
+
+      List<ProxyAndInfo<ClientProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,
+          nsId, ClientProtocol.class);
+      for (ProxyAndInfo<ClientProtocol> proxy : proxies) {
+        proxy.getProxy().finalizeUpgrade();
+        System.out.println("Finalize upgrade successful for " +
+            proxy.getAddress());
+      System.out.println("Finalize upgrade successful");
-    dfs.metaSave(pathname);
-    System.out.println("Created metasave file " + pathname + " in the log " +
-        "directory of namenode " + dfs.getUri());
+    Configuration dfsConf = dfs.getConf();
+    URI dfsUri = dfs.getUri();
+    boolean isHaEnabled = HAUtil.isLogicalUri(dfsConf, dfsUri);
+
+    if (isHaEnabled) {
+      String nsId = dfsUri.getHost();
+      List<ProxyAndInfo<ClientProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,
+          nsId, ClientProtocol.class);
+      for (ProxyAndInfo<ClientProtocol> proxy : proxies) {
+        proxy.getProxy().metaSave(pathname);
+        System.out.println("Created metasave file " + pathname + " in the log "
+            + "directory of namenode " + proxy.getAddress());
+      }
+    } else {
+      dfs.metaSave(pathname);
+      System.out.println("Created metasave file " + pathname + " in the log " +
+          "directory of namenode " + dfs.getUri());
+    }
-    
+
-    // Create the client
-    RefreshAuthorizationPolicyProtocol refreshProtocol =
-        NameNodeProxies.createProxy(conf, FileSystem.getDefaultUri(conf),
-            RefreshAuthorizationPolicyProtocol.class).getProxy();
-    
-    // Refresh the authorization policy in-effect
-    refreshProtocol.refreshServiceAcl();
+    DistributedFileSystem dfs = getDFS();
+    URI dfsUri = dfs.getUri();
+    boolean isHaEnabled = HAUtil.isLogicalUri(conf, dfsUri);
+
+    if (isHaEnabled) {
+      // Run refreshServiceAcl for all NNs if HA is enabled
+      String nsId = dfsUri.getHost();
+      List<ProxyAndInfo<RefreshAuthorizationPolicyProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(conf, nsId,
+              RefreshAuthorizationPolicyProtocol.class);
+      for (ProxyAndInfo<RefreshAuthorizationPolicyProtocol> proxy : proxies) {
+        proxy.getProxy().refreshServiceAcl();
+        System.out.println("Refresh service acl successful for "
+            + proxy.getAddress());
+      }
+    } else {
+      // Create the client
+      RefreshAuthorizationPolicyProtocol refreshProtocol =
+          NameNodeProxies.createProxy(conf, FileSystem.getDefaultUri(conf),
+              RefreshAuthorizationPolicyProtocol.class).getProxy();
+      // Refresh the authorization policy in-effect
+      refreshProtocol.refreshServiceAcl();
+      System.out.println("Refresh service acl successful");
+    }
- 
-    // Create the client
-    RefreshUserMappingsProtocol refreshProtocol =
-      NameNodeProxies.createProxy(conf, FileSystem.getDefaultUri(conf),
-          RefreshUserMappingsProtocol.class).getProxy();
-    // Refresh the user-to-groups mappings
-    refreshProtocol.refreshUserToGroupsMappings();
+    DistributedFileSystem dfs = getDFS();
+    URI dfsUri = dfs.getUri();
+    boolean isHaEnabled = HAUtil.isLogicalUri(conf, dfsUri);
+
+    if (isHaEnabled) {
+      // Run refreshUserToGroupsMapings for all NNs if HA is enabled
+      String nsId = dfsUri.getHost();
+      List<ProxyAndInfo<RefreshUserMappingsProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(conf, nsId,
+              RefreshUserMappingsProtocol.class);
+      for (ProxyAndInfo<RefreshUserMappingsProtocol> proxy : proxies) {
+        proxy.getProxy().refreshUserToGroupsMappings();
+        System.out.println("Refresh user to groups mapping successful for "
+            + proxy.getAddress());
+      }
+    } else {
+      // Create the client
+      RefreshUserMappingsProtocol refreshProtocol =
+          NameNodeProxies.createProxy(conf, FileSystem.getDefaultUri(conf),
+              RefreshUserMappingsProtocol.class).getProxy();
+
+      // Refresh the user-to-groups mappings
+      refreshProtocol.refreshUserToGroupsMappings();
+      System.out.println("Refresh user to groups mapping successful");
+    }
-    // Create the client
-    RefreshUserMappingsProtocol refreshProtocol =
-      NameNodeProxies.createProxy(conf, FileSystem.getDefaultUri(conf),
-          RefreshUserMappingsProtocol.class).getProxy();
+    DistributedFileSystem dfs = getDFS();
+    URI dfsUri = dfs.getUri();
+    boolean isHaEnabled = HAUtil.isLogicalUri(conf, dfsUri);
-    // Refresh the user-to-groups mappings
-    refreshProtocol.refreshSuperUserGroupsConfiguration();
+    if (isHaEnabled) {
+      // Run refreshSuperUserGroupsConfiguration for all NNs if HA is enabled
+      String nsId = dfsUri.getHost();
+      List<ProxyAndInfo<RefreshUserMappingsProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(conf, nsId,
+              RefreshUserMappingsProtocol.class);
+      for (ProxyAndInfo<RefreshUserMappingsProtocol> proxy : proxies) {
+        proxy.getProxy().refreshSuperUserGroupsConfiguration();
+        System.out.println("Refresh super user groups configuration " +
+            "successful for " + proxy.getAddress());
+      }
+    } else {
+      // Create the client
+      RefreshUserMappingsProtocol refreshProtocol =
+          NameNodeProxies.createProxy(conf, FileSystem.getDefaultUri(conf),
+              RefreshUserMappingsProtocol.class).getProxy();
+
+      // Refresh the user-to-groups mappings
+      refreshProtocol.refreshSuperUserGroupsConfiguration();
+      System.out.println("Refresh super user groups configuration successful");
+    }
- 
-    // Create the client
-    RefreshCallQueueProtocol refreshProtocol =
-      NameNodeProxies.createProxy(conf, FileSystem.getDefaultUri(conf),
-          RefreshCallQueueProtocol.class).getProxy();
-    // Refresh the call queue
-    refreshProtocol.refreshCallQueue();
-    
+    DistributedFileSystem dfs = getDFS();
+    URI dfsUri = dfs.getUri();
+    boolean isHaEnabled = HAUtil.isLogicalUri(conf, dfsUri);
+
+    if (isHaEnabled) {
+      // Run refreshCallQueue for all NNs if HA is enabled
+      String nsId = dfsUri.getHost();
+      List<ProxyAndInfo<RefreshCallQueueProtocol>> proxies =
+          HAUtil.getProxiesForAllNameNodesInNameservice(conf, nsId,
+              RefreshCallQueueProtocol.class);
+      for (ProxyAndInfo<RefreshCallQueueProtocol> proxy : proxies) {
+        proxy.getProxy().refreshCallQueue();
+        System.out.println("Refresh call queue successful for "
+            + proxy.getAddress());
+      }
+    } else {
+      // Create the client
+      RefreshCallQueueProtocol refreshProtocol =
+          NameNodeProxies.createProxy(conf, FileSystem.getDefaultUri(conf),
+              RefreshCallQueueProtocol.class).getProxy();
+
+      // Refresh the call queue
+      refreshProtocol.refreshCallQueue();
+      System.out.println("Refresh call queue successful");
+    }
+

INS26 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS43 MOV8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS60 INS60 INS60 INS25 INS43 INS42 INS39 INS42 INS42 INS41 INS43 INS42 INS39 INS42 INS42 INS61 INS41 MOV60 MOV60 INS60 INS60 INS60 INS25 MOV21 MOV41 INS60 INS60 INS60 INS25 MOV60 MOV60 INS60 INS60 INS60 INS25 MOV21 MOV41 INS60 INS60 INS60 INS25 MOV60 MOV60 INS60 INS60 INS60 INS25 MOV41 MOV60 MOV21 INS60 INS60 INS60 INS25 MOV41 MOV60 MOV21 INS60 INS60 INS60 INS25 MOV41 MOV60 MOV21 INS60 INS60 INS60 INS25 MOV41 MOV60 MOV21 INS60 INS60 INS60 INS25 MOV41 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 INS8 INS42 INS42 INS42 INS42 INS8 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 INS8 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 INS8 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 INS8 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 INS8 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 MOV8 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 MOV8 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 MOV8 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 MOV8 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 MOV8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS70 MOV60 INS25 MOV21 INS54 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS70 MOV21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS70 MOV60 MOV21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS70 MOV21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS70 MOV21 INS21 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS70 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS70 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS70 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS70 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS70 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS8 INS8 INS12 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS74 INS59 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS60 INS60 MOV25 INS21 INS21 INS21 INS44 INS8 INS42 INS32 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS21 INS21 INS40 INS42 INS45 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS60 INS21 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS21 INS21 INS40 INS42 INS45 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS21 INS21 INS40 INS42 INS27 INS43 INS74 INS42 INS32 INS74 UPD42 INS21 INS40 INS42 INS45 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS21 INS21 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS21 INS21 INS40 INS42 INS45 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS21 INS21 INS40 INS42 INS45 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS21 INS21 INS40 INS42 INS45 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS21 INS21 INS40 INS42 INS45 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS43 INS59 INS39 INS59 INS8 INS32 INS7 INS9 INS32 INS43 INS42 INS53 INS42 INS42 INS40 INS9 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS32 INS32 INS45 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS57 INS43 INS43 INS32 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS21 INS40 INS42 INS27 INS42 INS32 INS42 INS42 INS34 INS40 INS14 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS40 INS42 INS27 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS27 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS40 INS42 INS27 INS42 INS42 MOV43 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS43 INS42 MOV42 INS32 INS40 INS42 INS27 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS40 INS42 INS27 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS40 INS42 INS27 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS40 INS42 INS27 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS7 INS45 INS36 INS45 INS32 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 UPD42 MOV42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 DEL8 DEL8