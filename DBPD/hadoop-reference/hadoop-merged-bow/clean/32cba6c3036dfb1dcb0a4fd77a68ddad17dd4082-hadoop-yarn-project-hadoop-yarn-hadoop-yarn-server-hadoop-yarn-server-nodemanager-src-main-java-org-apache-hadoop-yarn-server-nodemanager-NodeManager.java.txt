YARN-5355: YARN Timeline Service v.2: alpha 2 (varunsaxena)

+import org.apache.hadoop.yarn.server.api.records.AppCollectorData;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.application.ApplicationState;
+            // Clear all known collectors for resync.
+            if (context.getKnownCollectors() != null) {
+              context.getKnownCollectors().clear();
+            }
+            // Re-register known timeline collectors.
+            reregisterCollectors();
+  /**
+   * Reregisters all collectors known by this node to the RM. This method is
+   * called when the RM needs to resync with the node.
+   */
+  protected void reregisterCollectors() {
+    Map<ApplicationId, AppCollectorData> knownCollectors
+        = context.getKnownCollectors();
+    if (knownCollectors == null) {
+      return;
+    }
+    ConcurrentMap<ApplicationId, AppCollectorData> registeringCollectors
+        = context.getRegisteringCollectors();
+    for (Map.Entry<ApplicationId, AppCollectorData> entry
+        : knownCollectors.entrySet()) {
+      Application app = context.getApplications().get(entry.getKey());
+      if ((app != null)
+          && !ApplicationState.FINISHED.equals(app.getApplicationState())) {
+        registeringCollectors.putIfAbsent(entry.getKey(), entry.getValue());
+        AppCollectorData data = entry.getValue();
+        if (LOG.isDebugEnabled()) {
+          LOG.debug(entry.getKey() + " : " + data.getCollectorAddr() + "@<"
+              + data.getRMIdentifier() + ", " + data.getVersion() + ">");
+        }
+      } else {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Remove collector data for done app " + entry.getKey());
+        }
+      }
+    }
+    knownCollectors.clear();
+  }
+
-    private Map<ApplicationId, String> registeredCollectors;
+    private ConcurrentMap<ApplicationId, AppCollectorData>
+        registeringCollectors;
+
+    private ConcurrentMap<ApplicationId, AppCollectorData> knownCollectors;
-        this.registeredCollectors = new ConcurrentHashMap<>();
+        this.registeringCollectors = new ConcurrentHashMap<>();
+        this.knownCollectors = new ConcurrentHashMap<>();
-    public Map<ApplicationId, String> getRegisteredCollectors() {
-      return this.registeredCollectors;
+    public ConcurrentMap<ApplicationId, AppCollectorData>
+        getRegisteringCollectors() {
+      return this.registeringCollectors;
-    public void addRegisteredCollectors(
-        Map<ApplicationId, String> newRegisteredCollectors) {
-      if (registeredCollectors != null) {
-        this.registeredCollectors.putAll(newRegisteredCollectors);
-      } else {
-        LOG.warn("collectors are added when the registered collectors are " +
-            "initialized");
-      }
+    @Override
+    public ConcurrentMap<ApplicationId, AppCollectorData> getKnownCollectors() {
+      return this.knownCollectors;

INS26 INS26 INS40 INS40 INS31 INS29 INS83 INS39 INS42 INS8 INS23 INS65 INS60 INS25 INS60 INS70 INS21 UPD74 INS83 INS74 INS59 UPD74 UPD42 INS78 INS74 INS42 INS8 INS66 INS66 INS74 INS59 INS27 INS8 INS74 INS59 INS44 INS32 INS8 INS32 UPD43 INS43 INS43 UPD42 INS43 INS43 INS43 INS42 UPD43 MOV43 UPD43 INS42 UPD43 MOV43 MOV43 UPD43 MOV43 INS41 MOV43 INS43 INS43 INS42 INS32 INS42 INS33 INS41 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS25 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 MOV43 INS43 INS43 INS59 INS27 INS8 INS8 INS21 UPD42 MOV52 UPD42 MOV42 INS40 INS42 INS42 INS42 INS32 INS36 INS38 INS21 INS60 INS25 INS25 INS7 INS32 INS42 INS32 INS27 INS32 INS32 INS43 INS59 INS32 INS8 INS32 INS8 INS22 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS21 UPD42 INS52 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS45 INS32 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS32 INS32 INS33 INS21 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 DEL39 DEL42 DEL74 DEL42 DEL44 DEL42 DEL33 DEL27 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8