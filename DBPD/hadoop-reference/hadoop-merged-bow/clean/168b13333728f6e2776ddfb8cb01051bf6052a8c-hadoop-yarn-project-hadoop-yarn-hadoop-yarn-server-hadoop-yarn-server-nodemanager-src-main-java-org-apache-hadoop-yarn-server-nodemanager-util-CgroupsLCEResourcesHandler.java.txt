Merging r1527684 through r1532876 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1532910 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.yarn.util.Clock;
+import org.apache.hadoop.yarn.util.SystemClock;
+  private long deleteCgroupTimeout;
+  // package private for testing purposes
+  Clock clock;
+  
+    clock = new SystemClock();
-  public synchronized void init(LinuxContainerExecutor lce) throws IOException {
+  @VisibleForTesting
+  void initConfig() throws IOException {
+    this.deleteCgroupTimeout = conf.getLong(
+        YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT,
+        YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT);
+  }
+  public void init(LinuxContainerExecutor lce) throws IOException {
+    initConfig();
+    
-  private void deleteCgroup(String controller, String groupName) {
-    String path = pathForCgroup(controller, groupName);
-
-    LOG.debug("deleteCgroup: " + path);
-
-    if (! new File(path).delete()) {
-      LOG.warn("Unable to delete cgroup at: " + path);
+  @VisibleForTesting
+  boolean deleteCgroup(String cgroupPath) {
+    boolean deleted;
+    
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("deleteCgroup: " + cgroupPath);
+
+    long start = clock.getTime();
+    do {
+      deleted = new File(cgroupPath).delete();
+      if (!deleted) {
+        try {
+          Thread.sleep(20);
+        } catch (InterruptedException ex) {
+          // NOP        
+        }
+      }
+    } while (!deleted && (clock.getTime() - start) < deleteCgroupTimeout);
+
+    if (!deleted) {
+      LOG.warn("Unable to delete cgroup at: " + cgroupPath +
+          ", tried to delete for " + deleteCgroupTimeout + "ms");
+    }
+
+    return deleted;
-    String containerName = containerId.toString();
-
-    // Based on testing, ApplicationMaster executables don't terminate until
-    // a little after the container appears to have finished. Therefore, we
-    // wait a short bit for the cgroup to become empty before deleting it.
-    if (containerId.getId() == 1) {
-      try {
-        Thread.sleep(500);
-      } catch (InterruptedException e) {
-        // not a problem, continue anyway
-      }
-    }
-
-      deleteCgroup(CONTROLLER_CPU, containerName);
+      deleteCgroup(pathForCgroup(CONTROLLER_CPU, containerId.toString()));

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS39 INS59 INS43 INS59 INS78 UPD42 INS83 INS39 INS42 MOV44 INS43 INS8 INS78 INS39 INS42 INS44 MOV8 INS8 INS42 UPD42 MOV42 INS42 INS21 INS42 INS21 UPD42 MOV42 INS21 MOV25 MOV21 INS42 MOV43 UPD42 MOV42 INS60 INS25 INS60 INS19 INS41 INS25 INS7 INS7 INS32 INS39 INS59 INS32 INS8 INS39 INS59 MOV8 INS27 INS42 MOV32 INS8 INS42 INS14 INS22 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV21 INS42 INS32 MOV21 INS38 INS27 INS42 INS21 INS43 INS52 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS7 INS38 INS42 INS36 INS42 INS32 INS42 INS42 MOV32 INS42 INS27 INS42 INS32 UPD42 INS32 INS42 UPD42 INS45 INS42 INS45 INS42 INS42 MOV32 UPD42 INS42 INS42 UPD42 UPD34 DEL83 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL8 DEL25 DEL42 DEL32 DEL59 DEL60 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL44 DEL31