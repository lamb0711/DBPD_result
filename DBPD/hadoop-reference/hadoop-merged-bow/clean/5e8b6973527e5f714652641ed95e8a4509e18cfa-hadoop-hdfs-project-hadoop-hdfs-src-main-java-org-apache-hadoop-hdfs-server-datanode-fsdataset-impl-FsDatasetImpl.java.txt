HDFS-7129. Metrics to track usage of memory for writes. (Contributed by Xiaoyu Yao)

+          datanode.getMetrics().incrRamDiskBlocksWrite();
+          datanode.getMetrics().incrRamDiskBlocksWriteFallback();
+        datanode.getMetrics().addRamDiskBytesWrite(replicaInfo.getNumBytes());
-        ramDiskReplicaTracker.discardReplica(bpid, invalidBlks[i].getBlockId(), true);
+        RamDiskReplica replicaInfo =
+          ramDiskReplicaTracker.getReplica(bpid, invalidBlks[i].getBlockId());
+        if (replicaInfo != null) {
+          if (replicaInfo.getIsPersisted() ==  false) {
+            datanode.getMetrics().incrRamDiskBlocksDeletedBeforeLazyPersisted();
+          }
+          discardRamDiskReplica(replicaInfo, true);
+        }
+        datanode.getMetrics().incrRamDiskBlocksReadHits();
+
+  void discardRamDiskReplica(RamDiskReplica replica, boolean deleteSavedCopies) {
+    ramDiskReplicaTracker.discardReplica(replica.getBlockPoolId(),
+      replica.getBlockId(), deleteSavedCopies);
+  }
+
-    private void moveReplicaToNewVolume(String bpid, long blockId)
+    private void moveReplicaToNewVolume(String bpid, long blockId, long creationTime)
+        // Update metrics (ignore the metadata file size)
+        datanode.getMetrics().incrRamDiskBlocksLazyPersisted();
+        datanode.getMetrics().incrRamDiskBytesLazyPersisted(replicaInfo.getNumBytes());
+        datanode.getMetrics().addRamDiskBlocksLazyPersistWindowMs(
+          Time.monotonicNow() - creationTime);
+
-          moveReplicaToNewVolume(block.getBlockPoolId(), block.getBlockId());
+          moveReplicaToNewVolume(block.getBlockPoolId(), block.getBlockId(),
+            block.getCreationTime());
-          ramDiskReplicaTracker.discardReplica(replicaState, false);
+          discardRamDiskReplica(replicaState, false);
+
+          // Update metrics
+          datanode.getMetrics().incrRamDiskBlocksEvicted();
+          datanode.getMetrics().addRamDiskBlocksEvictionWindowMs(
+              Time.monotonicNow() - replicaState.getCreationTime());
+          if (replicaState.getNumReads() == 0) {
+            datanode.getMetrics().incrRamDiskBlocksEvictedWithoutRead();
+          }

INS31 INS39 INS42 INS44 INS44 INS8 INS43 INS42 INS39 INS42 INS21 INS44 INS42 INS32 INS39 INS42 INS25 INS42 INS42 INS32 INS32 INS42 MOV32 INS8 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS60 INS25 INS21 INS32 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS27 INS21 INS21 INS25 INS21 INS32 INS42 INS32 INS42 INS42 MOV32 INS42 INS33 MOV25 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS27 INS8 INS32 INS21 INS42 INS42 INS42 INS42 UPD42 INS27 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 INS32 INS42 INS32 INS42 INS27 INS32 INS34 INS21 INS32 INS42 INS32 INS32 INS9 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL9 DEL42