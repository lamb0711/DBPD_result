YARN-2583. Modified AggregatedLogDeletionService to be able to delete rolling aggregated logs. Contributed by Xuan Gong.

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Comparator;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.yarn.api.records.NodeId;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+  // This is temporary solution. The configuration will be deleted once
+  // we find a more scalable method to only write a single log file per LRS.
+  private static final String NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP
+      = YarnConfiguration.NM_PREFIX + "log-aggregation.num-log-files-per-app";
+  private static final int
+      DEFAULT_NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP = 30;
+  
+  // This configuration is for debug and test purpose. By setting
+  // this configuration as true. We can break the lower bound of
+  // NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS.
+  private static final String NM_LOG_AGGREGATION_DEBUG_ENABLED
+      = YarnConfiguration.NM_PREFIX + "log-aggregation.debug-enabled";
+  private static final boolean
+      DEFAULT_NM_LOG_AGGREGATION_DEBUG_ENABLED = false;
+
+  private static final long
+      NM_LOG_AGGREGATION_MIN_ROLL_MONITORING_INTERVAL_SECONDS = 3600;
+  private final int retentionSize;
+  private final long rollingMonitorInterval;
+  private final NodeId nodeId;
-      ApplicationId appId, UserGroupInformation userUgi,
+      ApplicationId appId, UserGroupInformation userUgi, NodeId nodeId,
+    this.nodeId = nodeId;
+    int configuredRentionSize =
+        conf.getInt(NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP,
+            DEFAULT_NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP);
+    if (configuredRentionSize <= 0) {
+      this.retentionSize =
+          DEFAULT_NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP;
+    } else {
+      this.retentionSize = configuredRentionSize;
+    }
+    long configuredRollingMonitorInterval =
+        this.logAggregationContext == null ? -1 : this.logAggregationContext
+          .getRollingIntervalSeconds();
+    boolean debug_mode =
+        conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED,
+          DEFAULT_NM_LOG_AGGREGATION_DEBUG_ENABLED);
+    if (configuredRollingMonitorInterval > 0
+        && configuredRollingMonitorInterval <
+          NM_LOG_AGGREGATION_MIN_ROLL_MONITORING_INTERVAL_SECONDS) {
+      if (debug_mode) {
+        this.rollingMonitorInterval = configuredRollingMonitorInterval;
+      } else {
+        LOG.warn(
+            "rollingMonitorIntervall should be more than or equal to "
+            + NM_LOG_AGGREGATION_MIN_ROLL_MONITORING_INTERVAL_SECONDS
+            + " seconds. Using "
+            + NM_LOG_AGGREGATION_MIN_ROLL_MONITORING_INTERVAL_SECONDS
+            + " seconds instead.");
+        this.rollingMonitorInterval =
+            NM_LOG_AGGREGATION_MIN_ROLL_MONITORING_INTERVAL_SECONDS;
+      }
+    } else {
+      if (configuredRollingMonitorInterval <= 0) {
+        LOG.warn("rollingMonitorInterval is set as "
+            + configuredRollingMonitorInterval + ". "
+            + "The log rolling mornitoring interval is disabled. "
+            + "The logs will be aggregated after this application is finished.");
+      } else {
+        LOG.warn("rollingMonitorInterval is set as "
+            + configuredRollingMonitorInterval + ". "
+            + "The logs will be aggregated every "
+            + configuredRollingMonitorInterval + " seconds");
+      }
+      this.rollingMonitorInterval = configuredRollingMonitorInterval;
+    }
+      // Before upload logs, make sure the number of existing logs
+      // is smaller than the configured NM log aggregation retention size.
+      if (uploadedLogsInThisCycle) {
+        cleanOldLogs();
+      }
+
-      final Path renamedPath = logAggregationContext == null ||
-          logAggregationContext.getRollingIntervalSeconds() <= 0
+      final Path renamedPath = this.rollingMonitorInterval <= 0
-            if (remoteFS.exists(remoteNodeTmpLogFileForApp)
-                && rename) {
-              remoteFS.rename(remoteNodeTmpLogFileForApp, renamedPath);
+            if (remoteFS.exists(remoteNodeTmpLogFileForApp)) {
+              if (rename) {
+                remoteFS.rename(remoteNodeTmpLogFileForApp, renamedPath);
+              } else {
+                remoteFS.delete(remoteNodeTmpLogFileForApp, false);
+              }
+  private void cleanOldLogs() {
+    try {
+      final FileSystem remoteFS =
+          this.remoteNodeLogFileForApp.getFileSystem(conf);
+      Path appDir =
+          this.remoteNodeLogFileForApp.getParent().makeQualified(
+            remoteFS.getUri(), remoteFS.getWorkingDirectory());
+      Set<FileStatus> status =
+          new HashSet<FileStatus>(Arrays.asList(remoteFS.listStatus(appDir)));
+
+      Iterable<FileStatus> mask =
+          Iterables.filter(status, new Predicate<FileStatus>() {
+            @Override
+            public boolean apply(FileStatus next) {
+              return next.getPath().getName()
+                .contains(LogAggregationUtils.getNodeString(nodeId))
+                && !next.getPath().getName().endsWith(
+                    LogAggregationUtils.TMP_FILE_SUFFIX);
+            }
+          });
+      status = Sets.newHashSet(mask);
+      // Normally, we just need to delete one oldest log
+      // before we upload a new log.
+      // If we can not delete the older logs in this cycle,
+      // we will delete them in next cycle.
+      if (status.size() >= this.retentionSize) {
+        // sort by the lastModificationTime ascending
+        List<FileStatus> statusList = new ArrayList<FileStatus>(status);
+        Collections.sort(statusList, new Comparator<FileStatus>() {
+          public int compare(FileStatus s1, FileStatus s2) {
+            return s1.getModificationTime() < s2.getModificationTime() ? -1
+                : s1.getModificationTime() > s2.getModificationTime() ? 1 : 0;
+          }
+        });
+        for (int i = 0 ; i <= statusList.size() - this.retentionSize; i++) {
+          final FileStatus remove = statusList.get(i);
+          try {
+            userUgi.doAs(new PrivilegedExceptionAction<Object>() {
+              @Override
+              public Object run() throws Exception {
+                remoteFS.delete(remove.getPath(), false);
+                return null;
+              }
+            });
+          } catch (Exception e) {
+            LOG.error("Failed to delete " + remove.getPath(), e);
+          }
+        }
+      }
+    } catch (Exception e) {
+      LOG.error("Failed to clean old logs", e);
+    }
+  }
+
-          if (this.logAggregationContext != null && this.logAggregationContext
-              .getRollingIntervalSeconds() > 0) {
-            wait(this.logAggregationContext.getRollingIntervalSeconds() * 1000);
+          if (this.rollingMonitorInterval > 0) {
+            wait(this.rollingMonitorInterval * 1000);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS44 INS83 INS39 INS42 INS8 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS27 INS42 INS9 INS42 INS34 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS60 INS25 INS60 INS60 INS25 INS54 INS40 INS45 INS40 INS45 INS42 INS7 INS39 INS59 INS27 INS8 INS8 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS8 INS12 INS22 INS42 INS42 INS32 INS42 INS34 INS21 INS21 INS42 INS16 INS42 INS32 INS27 INS27 INS25 INS25 INS21 INS25 INS60 INS60 INS60 INS60 INS21 INS25 INS44 INS8 INS52 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS27 INS38 MOV32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS8 INS8 INS27 INS8 INS8 INS7 INS42 INS8 INS83 INS43 INS59 INS43 INS59 INS74 INS59 INS74 INS59 INS7 INS27 INS8 INS43 INS42 INS21 INS22 INS42 INS22 INS42 MOV22 INS33 INS34 INS21 INS21 INS21 INS42 INS34 INS21 INS21 INS22 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS32 INS32 INS22 INS60 INS21 INS24 INS42 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS7 INS32 INS7 INS32 INS32 INS52 INS42 INS32 INS27 INS22 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS74 INS59 INS32 INS58 INS27 INS37 INS8 INS42 INS42 INS45 INS42 INS22 INS42 INS42 INS42 INS27 INS22 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS22 MOV34 INS52 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS74 INS1 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS14 INS39 INS59 INS42 INS27 INS42 INS60 INS54 INS52 INS42 INS45 INS42 INS45 INS42 INS45 INS52 INS42 INS45 INS42 INS45 INS45 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS31 INS42 INS42 INS74 INS42 INS74 INS1 INS42 INS34 INS32 INS22 INS83 INS43 INS59 INS8 INS12 INS27 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS8 INS43 INS43 INS43 INS43 INS31 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS21 INS44 INS8 INS22 MOV34 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS32 INS43 INS42 INS21 MOV52 UPD42 MOV42 INS42 INS27 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS14 INS42 INS32 MOV32 INS8 INS32 INS38 INS42 INS42 INS16 INS74 INS1 INS42 INS42 INS27 INS42 INS22 INS25 INS32 INS42 INS32 INS32 INS27 INS38 INS16 INS43 INS43 INS31 INS45 INS32 MOV52 UPD42 MOV42 INS42 MOV8 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS32 INS34 INS27 INS34 INS34 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS21 INS41 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS9 INS42 INS42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL27 DEL33 DEL27 DEL27 DEL27 DEL22 DEL42 DEL32