Merging r1532877 through r1532910 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1532913 13f79535-47bb-0310-9956-ffa450edef68

-    if(hasWindowsDrive(path2Str)) {
-      path2Str = path2Str.substring(path2Str.indexOf(':')+1);
-    }
-    return new Path(path1 + path2Str);
+    path2Str = path2Str.substring(startPositionWithoutWindowsDrive(path2Str));
+    // Add path components explicitly, because simply concatenating two path
+    // string is not safe, for example:
+    // "/" + "/foo" yields "//foo", which will be parsed as authority in Path
+    return new Path(path1.toUri().getScheme(), 
+        path1.toUri().getAuthority(), 
+        path1.toUri().getPath() + path2Str);
-    int minLength = hasWindowsDrive(path) ? 4 : 1;
-    if (path.length() > minLength && path.endsWith("/")) {
+    int minLength = startPositionWithoutWindowsDrive(path) + 1;
+    if (path.length() > minLength && path.endsWith(SEPARATOR)) {
+  private static int startPositionWithoutWindowsDrive(String path) {
+    if (hasWindowsDrive(path)) {
+      return path.charAt(0) ==  SEPARATOR_CHAR ? 3 : 2;
+    } else {
+      return 0;
+    }
+  }
+  
-    int start = (slashed ? 1 : 0);
-
-    return
-        hasWindowsDrive(pathString) &&
-        pathString.length() >= (start + 3) &&
-        ((pathString.charAt(start + 2) == SEPARATOR_CHAR) ||
-          (pathString.charAt(start + 2) == '\\'));
+    int start = startPositionWithoutWindowsDrive(pathString);
+    return start > 0
+        && pathString.length() > start
+        && ((pathString.charAt(start) == SEPARATOR_CHAR) ||
+            (pathString.charAt(start) == '\\'));
-    int start = hasWindowsDrive(uri.getPath()) ? 3 : 0;
+    int start = startPositionWithoutWindowsDrive(uri.getPath());
-    int start = hasWindowsDrive(path) ? 3 : 0;
+    int start = startPositionWithoutWindowsDrive(path);
-      int end = hasWindowsDrive(path) ? 3 : 0;
-      parent = path.substring(0, lastSlash==end?end+1:lastSlash);
+      parent = path.substring(0, lastSlash==start?start+1:lastSlash);

INS31 INS83 INS83 INS39 INS42 INS44 INS8 MOV21 INS43 INS42 INS25 INS42 MOV32 INS8 INS8 INS32 INS32 INS27 INS41 INS41 INS32 MOV32 INS32 INS32 INS32 INS42 INS32 INS42 INS32 INS32 INS34 INS42 INS16 INS34 INS42 INS42 INS27 UPD27 UPD42 UPD42 MOV42 MOV42 INS42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS34 INS34 INS42 INS34 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 UPD42 UPD42 DEL42 DEL13 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL34 DEL34 DEL16 DEL45 DEL42 DEL34 DEL34 DEL16 DEL36 DEL42 DEL42 DEL32 DEL34 DEL27 DEL36 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL34 DEL34 DEL16 DEL32 DEL34 DEL34 DEL16 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL34 DEL16 DEL59 DEL60