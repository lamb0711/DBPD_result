YARN-5226. Remove AHS enable check from LogsCLI#fetchAMContainerLogs. Contributed by Xuan Gong.

-    String errorMessage = "";
+    StringBuilder errorMessage = new StringBuilder();
+    // We will call RM webservice to get all AppAttempts information.
+    // If we get nothing, we will try to call AHS webservice to get AppAttempts
+    // which includes nodeAddress for the AM Containers.
-      errorMessage = ex.getMessage();
+      errorMessage.append(ex.getMessage() + "\n");
-        try {
-          amContainersList = getAMContainerInfoForAHSWebService(conf, appId);
-          if (amContainersList != null && !amContainersList.isEmpty()) {
-            getAMContainerLists = true;
-            for (JSONObject amContainer : amContainersList) {
-              ContainerLogsRequest amRequest = new ContainerLogsRequest(
-                  request);
-              amRequest.setContainerId(amContainer.getString("amContainerId"));
-              requests.add(amRequest);
+        if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,
+            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {
+          errorMessage.append("Please enable the timeline service "
+              + "and make sure the timeline server is running.");
+        } else {
+          try {
+            amContainersList = getAMContainerInfoForAHSWebService(conf, appId);
+            if (amContainersList != null && !amContainersList.isEmpty()) {
+              getAMContainerLists = true;
+              for (JSONObject amContainer : amContainersList) {
+                ContainerLogsRequest amRequest = new ContainerLogsRequest(
+                    request);
+                amRequest.setContainerId(
+                    amContainer.getString("amContainerId"));
+                requests.add(amRequest);
+              }
+          } catch (Exception e) {
+            errorMessage.append(e.getMessage());
-        } catch (Exception e) {
-          errorMessage = e.getMessage();
+      System.err.println("Can not get AMContainers logs for "
+          + "the application:" + appId + " with the appOwner:"
+          + request.getAppOwner());
-        if (nodeId == null || nodeId.isEmpty()) {
-          try {
-            nodeId =
-                getContainerReport(containerId).getAssignedNode().toString();
-            request.setNodeId(nodeId);
-          } catch (Exception ex) {
-            System.err.println(ex);
-            nodeId = null;
-          }
-        }
+        } else {
+          printContainerLogsForFinishedApplicationWithoutNodeId(
+              request, logCliHelper);
-
-    // If the application is running, we will call the RM WebService
-    // to get the AppAttempts which includes the nodeHttpAddress
-    // and containerId for all the AM Containers.
-    // After that, we will call NodeManager webService to get the
-    // related logs
-    if (!request.isAppFinished()) {
-      return printAMContainerLogs(getConf(), request, amContainersList,
-          logCliHelper);
-    } else {
-      // If the application is in the final state, we will call RM webservice
-      // to get all AppAttempts information first. If we get nothing,
-      // we will try to call AHS webservice to get related AppAttempts
-      // which includes nodeAddress for the AM Containers.
-      // After that, we will use nodeAddress and containerId
-      // to get logs from HDFS directly.
-      if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,
-          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {
-        return printAMContainerLogs(getConf(), request, amContainersList,
-            logCliHelper);
-      } else {
-        ApplicationId appId = request.getAppId();
-        String appOwner = request.getAppOwner();
-        System.err.println("Can not get AMContainers logs for "
-            + "the application:" + appId + " with the appOwner:" + appOwner);
-        System.err.println("This application:" + appId + " has finished."
-            + " Please enable the application-history service or explicitly"
-            + " use 'yarn logs -applicationId <appId> "
-            + "-containerId <containerId> --nodeAddress <nodeHttpAddress>' "
-            + "to get the container logs.");
-        return -1;
-      }
-    }
+    return printAMContainerLogs(getConf(), request, amContainersList,
+        logCliHelper);
-    // if we provide the node address and the application is in the final
-    // state, we could directly get logs from HDFS.
-    if (nodeAddress != null && isAppFinished) {
+    // if the application is in the final state,
+    // we could directly get logs from HDFS.
+    if (isAppFinished) {
-      return printContainerLogsForFinishedApplication(
-          request, logCliHelper);
+      if (nodeAddress != null && !nodeAddress.isEmpty()) {
+        return printContainerLogsForFinishedApplication(
+            request, logCliHelper);
+      } else {
+        return printContainerLogsForFinishedApplicationWithoutNodeId(
+            request, logCliHelper);
+      }

MOV8 INS25 UPD43 INS42 INS8 UPD42 INS14 INS21 MOV25 INS43 INS32 INS8 INS8 INS42 INS32 INS8 INS40 INS42 INS27 MOV25 INS38 INS41 INS42 INS42 INS27 INS25 MOV27 INS42 INS45 INS32 INS8 INS32 INS32 MOV32 INS45 INS38 INS8 MOV8 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS32 INS42 INS42 INS40 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS45 INS32 INS42 INS42 MOV32 DEL45 DEL42 DEL7 DEL42 DEL7 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL42 DEL40 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL40 DEL42 DEL45 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL27 DEL32 DEL21 DEL34 DEL38 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42