HDFS-4480. Eliminate the file snapshot circular linked list.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1444280 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+
-import org.apache.hadoop.hdfs.server.namenode.INode.BlocksMapINodeUpdateEntry;
+  /**
+   * A list of {@link FileDiff}.
+   */
+  static class FileDiffList extends AbstractINodeDiffList<INodeFile, FileDiff> {
+    final INodeFile currentINode;
+
+    FileDiffList(INodeFile currentINode, List<FileDiff> diffs) {
+      super(diffs);
+      this.currentINode = currentINode;
+    }
+
+    @Override
+    INodeFile getCurrentINode() {
+      return currentINode;
+    }
+
+    @Override
+    FileDiff addSnapshotDiff(Snapshot snapshot) {
+      return addLast(new FileDiff(snapshot, getCurrentINode()));
+    }
+  }
+
-  
-  /** @return the next element. */
-  public FileWithSnapshot getNext();
-  /** Set the next element. */
-  public void setNext(FileWithSnapshot next);
-  
-  /** Insert inode to the circular linked list, after the current node. */
-  public void insertAfter(FileWithSnapshot inode);
-  
-  /** Insert inode to the circular linked list, before the current node. */
-  public void insertBefore(FileWithSnapshot inode);
-  
-  /** Remove self from the circular list */
-  public void removeSelf();
+  /** @return the file diff list. */
+  public FileDiffList getFileDiffList();
-  /** Are the current file and all snapshot copies deleted? */
-  public boolean isEverythingDeleted();
-
-  /** @return the max file replication in the inode and its snapshot copies. */
-  public short getMaxFileReplication();
-  
-  /** @return the max file size in the inode and its snapshot copies. */
-  public long computeMaxFileSize();
-
-  public static class Util {
-    /** @return The previous node in the circular linked list */
-    static FileWithSnapshot getPrevious(FileWithSnapshot file) {
-      FileWithSnapshot previous = file.getNext();
-      while (previous.getNext() != file) {
-        previous = previous.getNext();
-      }
-      return previous;
-    }
-    
-    /** Replace the old file with the new file in the circular linked list. */
-    static void replace(FileWithSnapshot oldFile, FileWithSnapshot newFile) {
-      final FileWithSnapshot oldNext = oldFile.getNext();
-      if (oldNext == null) {
-        newFile.setNext(null);
-      } else {
-        if (oldNext != oldFile) {
-          newFile.setNext(oldNext);
-          getPrevious(oldFile).setNext(newFile);
-        }
-        oldFile.setNext(null);
-      }
-    }
-
-    /** @return the max file replication of the file in the diff list. */
-    static <N extends INodeFile, D extends AbstractINodeDiff<N, D>>
-        short getMaxFileReplication(short max,
-              final AbstractINodeDiffList<N, D> diffs) {
-      for(AbstractINodeDiff<N, D> d : diffs) {
+  static class Util {
+    /** 
+     * @return block replication, which is the max file replication among
+     *         the file and the diff list.
+     */
+    static short getBlockReplication(final FileWithSnapshot file) {
+      short max = file.isCurrentFileDeleted()? 0
+          : file.asINodeFile().getFileReplication();
+      for(FileDiff d : file.getFileDiffList().asList()) {
-     * @return the max file replication of the elements
-     *         in the circular linked list.
-     */
-    static short getBlockReplication(final FileWithSnapshot file) {
-      short max = file.getMaxFileReplication();
-      // i may be null since next will be set to null when the INode is deleted
-      for(FileWithSnapshot i = file.getNext();
-          i != file && i != null;
-          i = i.getNext()) {
-        final short replication = i.getMaxFileReplication();
-        if (replication > max) {
-          max = replication;
-        }
-      }
-      return max;
-    }
-
-    /**
-      final FileWithSnapshot next = file.getNext();
-
-      // find max file size, max replication and the last inode.
-      long maxFileSize = file.computeMaxFileSize();
-      short maxReplication = file.getMaxFileReplication();
-      FileWithSnapshot last = null;
-      if (next != null && next != file) {
-        for(FileWithSnapshot i = next; i != file; i = i.getNext()) {
-          final long size = i.computeMaxFileSize();
-          if (size > maxFileSize) {
-            maxFileSize = size;
-          }
-          final short rep = i.getMaxFileReplication();
-          if (rep > maxReplication) {
-            maxReplication = rep;
-          }
-          last = i;
-        }
+      // find max file size.
+      final long max;
+      if (file.isCurrentFileDeleted()) {
+        final FileDiff last = file.getFileDiffList().getLast();
+        max = last == null? 0: last.fileSize;
+      } else { 
+        max = file.asINodeFile().computeFileSize(true, null);
-      collectBlocksBeyondMax(file, maxFileSize, info);
+      collectBlocksBeyondMax(file, max, info);
-      if (file.isEverythingDeleted()) {
-        // Set the replication of the current INode to the max of all the other
-        // linked INodes, so that in case the current INode is retrieved from the
-        // blocksMap before it is removed or updated, the correct replication
-        // number can be retrieved.
-        if (maxReplication > 0) {
-          file.asINodeFile().setFileReplication(maxReplication, null);
-        }
-
-        // remove the file from the circular linked list.
-        if (last != null) {
-          last.setNext(next);
-        }
-        file.setNext(null);
-
+      // if everything is deleted, set blocks to null.
+      if (file.isCurrentFileDeleted()
+          && file.getFileDiffList().asList().isEmpty()) {
-
-        // collect update blocks
-        final FileWithSnapshot next = file.getNext();
-        if (next != null && next != file && file.isEverythingDeleted() && collectedBlocks != null) {
-          final BlocksMapINodeUpdateEntry entry = new BlocksMapINodeUpdateEntry(
-              file.asINodeFile(), next.asINodeFile());
-          for (int i = 0; i < n; i++) {
-            collectedBlocks.addUpdateBlock(oldBlocks[i], entry);
-          }
-        }
-          for(FileWithSnapshot i = next; i != null && i != file; i = i.getNext()) {
-            i.asINodeFile().setBlocks(newBlocks);
-          }
-    
-    static String circularListString(final FileWithSnapshot file) {
-      final StringBuilder b = new StringBuilder("* -> ")
-          .append(file.asINodeFile().getObjectString());
-      FileWithSnapshot n = file.getNext();
-      for(; n != null && n != file; n = n.getNext()) {
-        b.append(" -> ").append(n.asINodeFile().getObjectString());
-      }
-      return b.append(n == null? " -> null": " -> *").toString();
-    }

MOV26 UPD40 INS55 INS31 INS55 INS29 INS83 INS42 INS74 INS23 INS31 INS31 MOV31 MOV29 UPD83 MOV83 INS43 UPD42 MOV42 MOV29 INS83 INS42 MOV31 MOV31 MOV31 INS65 MOV43 INS43 INS43 INS83 INS43 INS59 UPD42 MOV42 INS44 INS44 INS8 INS78 MOV43 INS42 INS8 INS78 INS43 INS42 UPD42 MOV42 MOV8 UPD66 MOV66 INS65 UPD66 MOV66 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS42 INS74 INS42 INS46 MOV21 INS42 MOV41 INS42 UPD42 MOV42 UPD43 UPD42 INS41 UPD66 INS60 INS60 INS42 UPD42 MOV42 INS43 INS43 INS42 UPD42 UPD42 INS32 UPD66 UPD66 INS39 INS59 INS32 MOV83 MOV39 MOV59 INS32 INS8 MOV8 INS27 INS8 UPD42 MOV42 UPD42 MOV42 INS22 INS42 INS42 INS14 INS42 INS16 INS43 INS32 INS42 UPD42 INS42 INS42 INS60 MOV21 UPD42 INS32 INS32 MOV21 INS52 INS42 INS43 INS42 INS32 INS32 INS34 INS32 UPD42 MOV42 INS42 INS42 MOV83 INS43 MOV59 INS7 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 INS42 INS42 UPD42 INS32 UPD42 INS16 INS42 MOV32 INS32 UPD42 MOV42 INS32 INS42 INS27 INS34 INS40 UPD42 INS9 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 DEL42 DEL42 DEL42 DEL32 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL83 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL31 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL32 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL83 DEL39 DEL60 DEL42 DEL42 DEL27 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL8 DEL24 DEL8 DEL32 DEL42 DEL34 DEL27 DEL25 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL32 DEL21 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL33 DEL27 DEL27 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL59 DEL58 DEL42 DEL33 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL31 DEL83 DEL83 DEL42 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL27 DEL8 DEL61 DEL8 DEL31 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL73 DEL39 DEL39 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL31 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL33 DEL27 DEL45 DEL45 DEL16 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55