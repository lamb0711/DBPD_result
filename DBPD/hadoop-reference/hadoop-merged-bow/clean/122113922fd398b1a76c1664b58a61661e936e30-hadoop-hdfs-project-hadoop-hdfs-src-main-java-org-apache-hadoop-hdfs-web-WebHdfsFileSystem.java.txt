Merging trunk to HDFS-1623 branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1177117 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import java.util.List;
+import org.apache.hadoop.fs.BlockLocation;
+import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenIdentifier;
+import org.apache.hadoop.hdfs.web.resources.LengthParam;
+import org.apache.hadoop.hdfs.web.resources.OffsetParam;
+import org.apache.hadoop.hdfs.web.resources.RenewerParam;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.security.token.Token;
-  private UserGroupInformation ugi;
+  private final UserGroupInformation ugi;
+  {
+    try {
+      ugi = UserGroupInformation.getCurrentUser();
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
-    ugi = UserGroupInformation.getCurrentUser();
-  private URL toUrl(final HttpOpParam.Op op, final Path fspath,
+  URL toUrl(final HttpOpParam.Op op, final Path fspath,
-        + makeQualified(fspath).toUri().getPath();
+        + (fspath == null? "/": makeQualified(fspath).toUri().getPath());
+
+  @Override
+  public Token<DelegationTokenIdentifier> getDelegationToken(final String renewer
+      ) throws IOException {
+    final HttpOpParam.Op op = GetOpParam.Op.GETDELEGATIONTOKEN;
+    final Map<String, Object> m = run(op, null, new RenewerParam(renewer));
+    final Token<DelegationTokenIdentifier> token = JsonUtil.toDelegationToken(m); 
+    token.setService(new Text(getCanonicalServiceName()));
+    return token;
+  }
+
+  @Override
+  public List<Token<?>> getDelegationTokens(final String renewer
+      ) throws IOException {
+    final Token<?>[] t = {getDelegationToken(renewer)};
+    return Arrays.asList(t);
+  }
+
+  @Override
+  public BlockLocation[] getFileBlockLocations(final FileStatus status,
+      final long offset, final long length) throws IOException {
+    if (status == null) {
+      return null;
+    }
+    return getFileBlockLocations(status.getPath(), offset, length);
+  }
+
+  @Override
+  public BlockLocation[] getFileBlockLocations(final Path p, 
+      final long offset, final long length) throws IOException {
+    statistics.incrementReadOps(1);
+
+    final HttpOpParam.Op op = GetOpParam.Op.GETFILEBLOCKLOCATIONS;
+    final Map<String, Object> m = run(op, p, new OffsetParam(offset),
+        new LengthParam(length));
+    return DFSUtil.locatedBlocks2Locations(JsonUtil.toLocatedBlocks(m));
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS28 INS31 INS31 INS31 INS31 INS83 INS8 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS78 INS83 INS5 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS5 INS42 INS44 INS44 INS44 INS43 INS8 INS54 INS42 INS43 INS43 INS83 INS43 INS42 INS42 INS60 INS60 INS60 INS21 INS41 INS42 INS43 INS74 INS83 INS43 INS42 INS42 INS60 INS41 INS42 INS43 INS85 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS42 INS25 INS41 INS42 INS43 INS85 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS42 INS21 INS60 INS60 INS41 INS8 INS12 INS42 INS42 INS42 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS32 INS42 INS42 INS43 INS76 INS42 INS83 INS5 INS59 INS32 INS42 INS42 INS27 INS8 INS32 INS42 INS42 INS32 INS83 INS43 INS59 INS83 INS74 INS59 INS32 MOV21 INS44 INS8 INS40 INS42 INS40 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS42 INS74 INS85 INS42 INS4 INS42 INS42 INS42 INS42 INS33 INS41 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS40 INS42 INS40 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS53 INS36 INS42 INS42 INS42 INS42 INS42 INS33 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS76 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS14 INS16 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS27 INS45 MOV32 INS42 INS42 INS42 INS42 INS42 INS33 DEL83