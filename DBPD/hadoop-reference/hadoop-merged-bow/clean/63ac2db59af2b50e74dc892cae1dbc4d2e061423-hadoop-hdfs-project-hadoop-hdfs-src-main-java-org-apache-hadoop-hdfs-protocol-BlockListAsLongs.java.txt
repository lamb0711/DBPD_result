HDFS-10312. Large block reports may fail to decode at NameNode due to 64 MB protobuf maximum length restriction. Contributed by Chris Nauroth.

+import static org.apache.hadoop.fs.CommonConfigurationKeys.IPC_MAXIMUM_DATA_LENGTH_DEFAULT;
+
+import com.google.common.annotations.VisibleForTesting;
-   * Prepare an instance to in-place decode the given ByteString buffer
+   * Prepare an instance to in-place decode the given ByteString buffer.
+   * @param maxDataLength - maximum allowable data size in protobuf message
-      final ByteString blocksBuf) {
-    return new BufferDecoder(numBlocks, blocksBuf);
+      final ByteString blocksBuf, final int maxDataLength) {
+    return new BufferDecoder(numBlocks, blocksBuf, maxDataLength);
-   * Prepare an instance to in-place decode the given ByteString buffers
+   * Prepare an instance to in-place decode the given ByteString buffers.
+  @VisibleForTesting
+    return decodeBuffers(numBlocks, blocksBufs,
+        IPC_MAXIMUM_DATA_LENGTH_DEFAULT);
+  }
+
+  /**
+   * Prepare an instance to in-place decode the given ByteString buffers.
+   * @param numBlocks - blocks in the buffers
+   * @param blocksBufs - list of ByteString encoded varints
+   * @param maxDataLength - maximum allowable data size in protobuf message
+   * @return BlockListAsLongs
+   */
+  public static BlockListAsLongs decodeBuffers(final int numBlocks,
+      final List<ByteString> blocksBufs, final int maxDataLength) {
-    return decodeBuffer(numBlocks, ByteString.copyFrom(blocksBufs));
+    return decodeBuffer(numBlocks, ByteString.copyFrom(blocksBufs),
+        maxDataLength);
-    return blocksList.isEmpty() ? EMPTY : new LongsDecoder(blocksList);
+    return decodeLongs(blocksList, IPC_MAXIMUM_DATA_LENGTH_DEFAULT);
+  }
+
+  /**
+   * Prepare an instance to in-place decode the given list of Longs.  Note
+   * it's much more efficient to decode ByteString buffers and only exists
+   * for compatibility.
+   * @param blocksList - list of longs
+   * @param maxDataLength - maximum allowable data size in protobuf message
+   * @return BlockListAsLongs
+   */
+  public static BlockListAsLongs decodeLongs(List<Long> blocksList,
+      int maxDataLength) {
+    return blocksList.isEmpty() ? EMPTY :
+        new LongsDecoder(blocksList, maxDataLength);
+  @VisibleForTesting
-    BlockListAsLongs.Builder builder = builder();
+    BlockListAsLongs.Builder builder = builder(IPC_MAXIMUM_DATA_LENGTH_DEFAULT);
-  public static BlockListAsLongs readFrom(InputStream is) throws IOException {
+  public static BlockListAsLongs readFrom(InputStream is, int maxDataLength)
+      throws IOException {
+    if (maxDataLength != IPC_MAXIMUM_DATA_LENGTH_DEFAULT) {
+      cis.setSizeLimit(maxDataLength);
+    }
-      return decodeBuffer(numBlocks, blocksBuf);
+      return decodeBuffer(numBlocks, blocksBuf, maxDataLength);
-  
+
+  @VisibleForTesting
-    return new BlockListAsLongs.Builder();
+    return builder(IPC_MAXIMUM_DATA_LENGTH_DEFAULT);
+  }
+
+  public static Builder builder(int maxDataLength) {
+    return new BlockListAsLongs.Builder(maxDataLength);
+    private final int maxDataLength;
-    Builder() {
+    Builder(int maxDataLength) {
+      this.maxDataLength = maxDataLength;
-      return new BufferDecoder(numBlocks, numFinalized, out.toByteString());
+      return new BufferDecoder(numBlocks, numFinalized, out.toByteString(),
+          maxDataLength);
+    private final int maxDataLength;
-    BufferDecoder(final int numBlocks, final ByteString buf) {
-      this(numBlocks, -1, buf);
+    BufferDecoder(final int numBlocks, final ByteString buf,
+        final int maxDataLength) {
+      this(numBlocks, -1, buf, maxDataLength);
-        final ByteString buf) {
+        final ByteString buf, final int maxDataLength) {
+      this.maxDataLength = maxDataLength;
+        {
+          if (maxDataLength != IPC_MAXIMUM_DATA_LENGTH_DEFAULT) {
+            cis.setSizeLimit(maxDataLength);
+          }
+        }
+
+    private final int maxDataLength;
-    LongsDecoder(List<Long> values) {
+    LongsDecoder(List<Long> values, int maxDataLength) {
+      this.maxDataLength = maxDataLength;
-      Builder builder = builder();
+      Builder builder = builder(maxDataLength);

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS44 MOV29 INS78 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 MOV8 INS78 INS44 INS78 INS83 INS83 INS43 INS42 INS8 INS44 INS23 INS23 INS23 INS65 INS83 INS39 INS42 INS42 INS42 INS83 INS39 INS42 INS83 INS74 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS83 INS39 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS74 INS42 INS39 INS42 INS42 INS39 INS42 INS25 INS42 INS42 INS41 INS39 INS42 INS83 INS83 INS39 INS59 INS44 INS83 INS83 INS39 INS59 INS44 INS44 INS83 INS83 INS39 INS59 INS44 UPD66 INS42 INS66 UPD66 INS43 INS43 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS43 MOV43 INS27 INS8 INS32 INS42 INS39 INS42 INS21 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS21 INS42 INS39 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 MOV43 INS42 INS7 INS42 INS7 INS7 INS42 INS42 INS32 INS22 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS28 INS52 INS42 INS42 INS8 INS25 INS27 INS8 INS42 INS42 INS21 INS32 INS42 INS42 INS42