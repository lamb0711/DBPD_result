YARN-3816. [Aggregation] App-level aggregation and accumulation for YARN system metrics (Li Lu via sjlee)

+import org.apache.hadoop.yarn.exceptions.YarnRuntimeException;
-import java.util.Comparator;
+import java.util.Collections;
-  private Comparator<Long> reverseComparator = new Comparator<Long>() {
-    @Override
-    public int compare(Long l1, Long l2) {
-      return l2.compareTo(l1);
-    }
-  };
-  private TreeMap<Long, Number> values = new TreeMap<>(reverseComparator);
+  // By default, not to do any aggregation operations. This field will NOT be
+  // persisted (like a "transient" member).
+  private TimelineMetricOperation realtimeAggregationOp
+      = TimelineMetricOperation.NOP;
+
+  private TreeMap<Long, Number> values
+      = new TreeMap<>(Collections.reverseOrder());
+  /**
+   * Get the real time aggregation operation of this metric.
+   *
+   * @return Real time aggregation operation
+   */
+  public TimelineMetricOperation getRealtimeAggregationOp() {
+    return realtimeAggregationOp;
+  }
+
+  /**
+   * Set the real time aggregation operation of this metric.
+   *
+   * @param op A timeline metric operation that the metric should perform on
+   *           real time aggregations
+   */
+  public void setRealtimeAggregationOp(
+      final TimelineMetricOperation op) {
+    this.realtimeAggregationOp = op;
+  }
+
-      if (values != null) {
-        this.values = new TreeMap<Long, Number>(reverseComparator);
+      if (vals != null) {
+        this.values = new TreeMap<>(Collections.reverseOrder());
-    String str = "{id:" + id + ", type:" + type;
-    if (!values.isEmpty()) {
-      str += ", values:" + values;
-    }
-    str += "}";
-    return str;
+    return "{id: " + id + ", type: " + type +
+        ", realtimeAggregationOp: " +
+        realtimeAggregationOp + "; " + values.toString() +
+        "}";
+
+  /**
+   * Get the latest timeline metric as single value type.
+   *
+   * @param metric Incoming timeline metric
+   * @return The latest metric in the incoming metric
+   */
+  public static TimelineMetric getLatestSingleValueMetric(
+      TimelineMetric metric) {
+    if (metric.getType() == Type.SINGLE_VALUE) {
+      return metric;
+    } else {
+      TimelineMetric singleValueMetric = new TimelineMetric(Type.SINGLE_VALUE);
+      Long firstKey = metric.values.firstKey();
+      if (firstKey != null) {
+        Number firstValue = metric.values.get(firstKey);
+        singleValueMetric.addValue(firstKey, firstValue);
+      }
+      return singleValueMetric;
+    }
+  }
+
+  /**
+   * Get single data timestamp of the metric.
+   *
+   * @return the single data timestamp
+   */
+  public long getSingleDataTimestamp() {
+    if (this.type == Type.SINGLE_VALUE) {
+      if (values.size() == 0) {
+        throw new YarnRuntimeException("Values for this timeline metric is " +
+            "empty.");
+      } else {
+        return values.firstKey();
+      }
+    } else {
+      throw new YarnRuntimeException("Type for this timeline metric is not " +
+          "SINGLE_VALUE.");
+    }
+  }
+
+  /**
+   * Get single data value of the metric.
+   *
+   * @return the single data value
+   */
+  public Number getSingleDataValue() {
+    if (this.type == Type.SINGLE_VALUE) {
+      if (values.size() == 0) {
+        return null;
+      } else {
+        return values.get(values.firstKey());
+      }
+    } else {
+      throw new YarnRuntimeException("Type for this timeline metric is not " +
+          "SINGLE_VALUE.");
+    }
+  }
+
+  /**
+   * Aggregate an incoming metric to the base aggregated metric with the given
+   * operation state in a stateless fashion. The assumption here is
+   * baseAggregatedMetric and latestMetric should be single value data if not
+   * null.
+   *
+   * @param incomingMetric Incoming timeline metric to aggregate
+   * @param baseAggregatedMetric Base timeline metric
+   * @return Result metric after aggregation
+   */
+  public static TimelineMetric aggregateTo(TimelineMetric incomingMetric,
+      TimelineMetric baseAggregatedMetric) {
+    return aggregateTo(incomingMetric, baseAggregatedMetric, null);
+  }
+
+  /**
+   * Aggregate an incoming metric to the base aggregated metric with the given
+   * operation state. The assumption here is baseAggregatedMetric and
+   * latestMetric should be single value data if not null.
+   *
+   * @param incomingMetric Incoming timeline metric to aggregate
+   * @param baseAggregatedMetric Base timeline metric
+   * @param state Operation state
+   * @return Result metric after aggregation
+   */
+  public static TimelineMetric aggregateTo(TimelineMetric incomingMetric,
+      TimelineMetric baseAggregatedMetric, Map<Object, Object> state) {
+    TimelineMetricOperation operation
+        = incomingMetric.getRealtimeAggregationOp();
+    return operation.aggregate(incomingMetric, baseAggregatedMetric, state);
+  }
+

INS26 INS40 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV83 INS43 INS59 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 MOV78 INS83 MOV43 INS42 INS8 INS29 MOV83 INS83 INS43 INS42 MOV44 INS8 INS29 MOV83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 UPD42 MOV42 INS42 INS40 INS65 INS65 UPD42 MOV42 INS41 INS65 INS65 INS83 INS43 INS42 INS21 INS41 INS65 INS65 INS65 INS42 UPD43 UPD42 INS25 INS65 INS65 INS25 INS65 INS65 INS42 MOV25 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS60 MOV41 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 MOV42 INS7 INS27 INS66 INS42 INS66 INS66 UPD42 INS27 INS8 INS8 INS66 INS66 INS27 INS8 INS8 INS66 INS66 INS27 INS8 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS43 INS43 INS59 INS32 INS42 INS42 INS22 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS40 INS41 INS60 INS60 INS25 INS41 INS22 INS40 INS25 INS53 INS22 INS40 INS25 INS53 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 MOV43 INS59 INS27 INS8 INS42 INS52 INS42 INS27 INS8 INS8 INS14 INS52 INS42 INS27 INS8 INS8 INS14 INS42 INS42 UPD42 INS42 INS42 INS14 INS42 INS32 INS42 INS33 INS60 INS21 INS32 INS34 INS53 INS41 INS43 INS27 INS32 INS34 INS41 INS41 INS43 INS27 INS43 INS40 INS40 INS42 INS43 INS59 INS32 INS42 INS42 INS14 INS32 INS42 UPD45 MOV45 UPD45 MOV45 INS42 INS42 INS33 INS32 INS42 INS45 UPD45 MOV45 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 UPD74 INS32 INS40 INS42 INS42 UPD42 MOV42 INS45 INS45 MOV42 UPD42 MOV42 INS42 INS42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL39 DEL42 DEL42 DEL44 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL38 DEL42 DEL42 DEL27 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL27 DEL59 DEL60 DEL42 DEL45 DEL7 DEL21 DEL8 DEL31