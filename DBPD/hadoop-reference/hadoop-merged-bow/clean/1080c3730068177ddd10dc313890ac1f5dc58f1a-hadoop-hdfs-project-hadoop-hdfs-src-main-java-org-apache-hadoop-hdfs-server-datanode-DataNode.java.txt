Merge remote-tracking branch 'apache/trunk' into HDFS-7285

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Namesystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/DFSTestUtil.java

Change-Id: I8511c4d64b0959e79129febc179845a3892fedcc

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATANODE_OOB_TIMEOUT_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATANODE_OOB_TIMEOUT_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATANODE_METRICS_LOGGER_PERIOD_SECONDS_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATANODE_METRICS_LOGGER_PERIOD_SECONDS_KEY;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import org.apache.hadoop.hdfs.server.common.MetricsLoggerTask;
+  public static final Log METRICS_LOG = LogFactory.getLog("DataNodeMetricsLog");
+
+  private long[] oobTimeouts; /** timeout value of each OOB type */
+
+  private ScheduledThreadPoolExecutor metricsLoggerTimer;
+
+    initOOBTimeout();
-   * and a namenode proxy
+   * and a namenode proxy.
+
+    initOOBTimeout();
-    tcpPeerServer.setReceiveBufferSize(HdfsConstants.DEFAULT_DATA_SOCKET_SIZE);
+    if (dnConf.getTransferSocketRecvBufferSize() > 0) {
+      tcpPeerServer.setReceiveBufferSize(
+          dnConf.getTransferSocketRecvBufferSize());
+    }
-    domainPeerServer.setReceiveBufferSize(
-        HdfsConstants.DEFAULT_DATA_SOCKET_SIZE);
+    int recvBufferSize = conf.getInt(
+        DFSConfigKeys.DFS_DATANODE_TRANSFER_SOCKET_RECV_BUFFER_SIZE_KEY,
+        DFSConfigKeys.DFS_DATANODE_TRANSFER_SOCKET_RECV_BUFFER_SIZE_DEFAULT);
+    if (recvBufferSize > 0) {
+      domainPeerServer.setReceiveBufferSize(recvBufferSize);
+    }
+    startMetricsLogger(conf);
-    // Set the ID if we haven't already
-    if (null == id) {
-      id = bpRegistration;
-    }
+    id = bpRegistration;
+    stopMetricsLogger();
-  
+
+  @Override // DataNodeMXBean
+  public String getSoftwareVersion() {
+    return VersionInfo.getVersion();
+  }
+
-    return VersionInfo.getVersion();
+    return VersionInfo.getVersion() + ", r" + VersionInfo.getRevision();
-  
+
+  public String getRevision() {
+    return VersionInfo.getRevision();
+  }
+
-  /**
-   * Get current value of the max balancer bandwidth in bytes per second.
-   *
-   * @return Balancer bandwidth in bytes per second for this datanode.
-   */
-  public Long getBalancerBandwidth() {
+  @Override // ClientDatanodeProtocol
+  public long getBalancerBandwidth() {
-    
+  }
+
+  /**
+   * Get timeout value of each OOB type from configuration
+   */
+  private void initOOBTimeout() {
+    final int oobStart = Status.OOB_RESTART_VALUE; // the first OOB type
+    final int oobEnd = Status.OOB_RESERVED3_VALUE; // the last OOB type
+    final int numOobTypes = oobEnd - oobStart + 1;
+    oobTimeouts = new long[numOobTypes];
+
+    final String[] ele = conf.get(DFS_DATANODE_OOB_TIMEOUT_KEY,
+        DFS_DATANODE_OOB_TIMEOUT_DEFAULT).split(",");
+    for (int i = 0; i < numOobTypes; i++) {
+      oobTimeouts[i] = (i < ele.length) ? Long.parseLong(ele[i]) : 0;
+    }
+  }
+
+  /**
+   * Get the timeout to be used for transmitting the OOB type
+   * @return the timeout in milliseconds
+   */
+  public long getOOBTimeout(Status status)
+      throws IOException {
+    if (status.getNumber() < Status.OOB_RESTART_VALUE ||
+        status.getNumber() > Status.OOB_RESERVED3_VALUE) {
+      // Not an OOB.
+      throw new IOException("Not an OOB status: " + status);
+    }
+
+    return oobTimeouts[status.getNumber() - Status.OOB_RESTART_VALUE];
+  }
+
+  /**
+   * Start a timer to periodically write DataNode metrics to the log file. This
+   * behavior can be disabled by configuration.
+   *
+   * @param metricConf
+   */
+  protected void startMetricsLogger(Configuration metricConf) {
+    long metricsLoggerPeriodSec = metricConf.getInt(
+        DFS_DATANODE_METRICS_LOGGER_PERIOD_SECONDS_KEY,
+        DFS_DATANODE_METRICS_LOGGER_PERIOD_SECONDS_DEFAULT);
+
+    if (metricsLoggerPeriodSec <= 0) {
+      return;
+    }
+
+    MetricsLoggerTask.makeMetricsLoggerAsync(METRICS_LOG);
+
+    // Schedule the periodic logging.
+    metricsLoggerTimer = new ScheduledThreadPoolExecutor(1);
+    metricsLoggerTimer.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
+    metricsLoggerTimer.scheduleWithFixedDelay(new MetricsLoggerTask(METRICS_LOG,
+        "DataNode", (short) 0), metricsLoggerPeriodSec, metricsLoggerPeriodSec,
+        TimeUnit.SECONDS);
+  }
+
+  protected void stopMetricsLogger() {
+    if (metricsLoggerTimer != null) {
+      metricsLoggerTimer.shutdown();
+      metricsLoggerTimer = null;
+    }
+  }
+
+  @VisibleForTesting
+  ScheduledThreadPoolExecutor getMetricsLoggerTimer() {
+    return metricsLoggerTimer;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS5 INS59 INS29 INS83 INS43 INS59 UPD42 INS78 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS39 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS78 INS43 INS42 INS8 INS42 INS42 INS32 INS39 INS85 INS42 INS65 INS42 INS42 INS21 INS21 INS25 INS60 INS25 INS21 MOV21 INS21 INS42 INS42 INS41 INS42 INS41 INS42 INS65 INS60 INS60 INS60 INS21 INS60 INS24 INS65 INS65 INS43 INS42 INS42 INS25 INS41 INS65 INS65 INS43 INS42 INS60 INS25 INS21 INS21 INS21 INS21 INS25 INS42 INS42 INS41 INS42 INS42 INS45 INS66 INS32 UPD66 INS32 INS27 INS8 INS39 INS59 INS27 INS8 INS32 INS32 INS27 INS32 INS66 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS7 INS83 INS5 INS59 INS58 INS27 INS37 INS8 INS66 INS66 INS42 INS27 INS8 INS2 INS66 INS66 INS42 INS42 INS39 INS59 INS27 INS8 INS32 INS7 INS32 INS32 INS27 INS8 INS42 INS42 INS42 INS32 INS34 MOV21 INS42 INS32 INS42 INS34 MOV21 INS42 INS42 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS27 INS42 INS3 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS21 INS27 INS27 INS53 INS42 INS27 INS42 INS32 INS42 INS34 INS41 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS27 INS34 INS5 INS42 INS42 INS32 INS42 INS45 INS42 INS34 INS7 INS32 INS40 INS32 INS40 INS14 INS32 INS40 INS42 INS42 INS42 INS42 INS43 INS34 INS43 INS42 INS45 INS11 INS32 INS7 INS32 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS42 INS2 INS16 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS39 INS34 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS36 INS32 INS34 INS42 INS45 INS42 INS27 INS42 INS42 INS2 INS42 INS40 INS42 INS42 DEL40 DEL40 DEL33 DEL42 DEL27 DEL8 DEL25 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43