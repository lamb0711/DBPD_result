Merge trunk to branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1608603 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.records.ContainerExitStatus;
-import org.apache.hadoop.yarn.api.records.Resource;
+import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainerImpl;
+  private int amContainerExitStatus = ContainerExitStatus.INVALID;
-  private final boolean isLastAttempt;
+  // Since AM preemption, hardware error and NM resync are not counted towards
+  // AM failure count, even if this flag is true, a new attempt can still be
+  // re-created if this attempt is eventually failed because of preemption,
+  // hardware error or NM resync. So this flag indicates that this may be
+  // last attempt.
+  private final boolean maybeLastAttempt;
-      Configuration conf, boolean isLastAttempt) {
+      Configuration conf, boolean maybeLastAttempt) {
-    this.isLastAttempt = isLastAttempt;
+    this.maybeLastAttempt = maybeLastAttempt;
+  public int getAMContainerExitStatus() {
+    this.readLock.lock();
+    try {
+      return this.amContainerExitStatus;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+    this.amContainerExitStatus = attemptState.getAMContainerExitStatus();
-        .get(0));
+          .get(0));
+      RMContainerImpl rmMasterContainer = (RMContainerImpl)appAttempt.scheduler
+          .getRMContainer(appAttempt.getMasterContainer().getId());
+      rmMasterContainer.setAMContainer(true);
+          // Need to register an app attempt before AM can register
+          appAttempt.masterService
+              .registerAppAttempt(appAttempt.applicationAttemptId);
+
-            appAttempt.getAppAttemptId(), false));
+            appAttempt.getAppAttemptId(), false, false));
-
+    int exitStatus = ContainerExitStatus.INVALID;
+      exitStatus = finishEvent.getContainerStatus().getExitStatus();
-          stateToBeStored, finalTrackingUrl, diags, finalStatus);
+          stateToBeStored, finalTrackingUrl, diags, finalStatus, exitStatus);
-        + " with final state: " + targetedFinalState);
+        + " with final state: " + targetedFinalState + ", and exit status: "
+        + exitStatus);
+
-              && !appAttempt.isLastAttempt
-            keepContainersAcrossAppAttempts = true;
+            // See if we should retain containers for non-unmanaged applications
+            if (!appAttempt.shouldCountTowardsMaxAttemptRetry()) {
+              // Premption, hardware failures, NM resync doesn't count towards
+              // app-failures and so we should retain containers.
+              keepContainersAcrossAppAttempts = true;
+            } else if (!appAttempt.maybeLastAttempt) {
+              // Not preemption, hardware failures or NM resync.
+              // Not last-attempt too - keep containers.
+              keepContainersAcrossAppAttempts = true;
+            }
-  
+
+  @Override
+  public boolean shouldCountTowardsMaxAttemptRetry() {
+    try {
+      this.readLock.lock();
+      int exitStatus = getAMContainerExitStatus();
+      return !(exitStatus == ContainerExitStatus.PREEMPTED
+          || exitStatus == ContainerExitStatus.ABORTED
+          || exitStatus == ContainerExitStatus.DISKS_FAILED
+          || exitStatus == ContainerExitStatus.KILLED_BY_RESOURCEMANAGER);
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
-      // Setup diagnostic message
-      appAttempt.diagnostics
-        .append(getAMContainerCrashedDiagnostics(finishEvent));
+      // Setup diagnostic message and exit status
+      appAttempt.setAMContainerCrashedDiagnosticsAndExitStatus(finishEvent);
+
-  private static String getAMContainerCrashedDiagnostics(
+  private void setAMContainerCrashedDiagnosticsAndExitStatus(
+      RMAppAttemptContainerFinishedEvent finishEvent) {
+    ContainerStatus status = finishEvent.getContainerStatus();
+    String diagnostics = getAMContainerCrashedDiagnostics(finishEvent);
+    this.diagnostics.append(diagnostics);
+    this.amContainerExitStatus = status.getExitStatus();
+  }
+
+  private String getAMContainerCrashedDiagnostics(
-            + " exited with " + " exitCode: " + status.getExitStatus()
-            + " due to: " + status.getDiagnostics() + "."
-            + "Failing this attempt.";
+        + " exited with " + " exitCode: " + status.getExitStatus() + ". "
+        + "Check application tracking page: " + this.getTrackingUrl()
+        + " . Then, click on links to logs of each attempt for detailed output. ";
-      RMAppAttemptContainerFinishedEvent containerFinishedEvent =
+      RMAppAttemptContainerFinishedEvent finishEvent =
-      // Setup diagnostic message
-      appAttempt.diagnostics
-        .append(getAMContainerCrashedDiagnostics(containerFinishedEvent));
+      // Setup diagnostic message and exit status
+      appAttempt.setAMContainerCrashedDiagnosticsAndExitStatus(finishEvent);
+
+  // for testing
+  public boolean mayBeLastAttempt() {
+    return maybeLastAttempt;
+  }

MOV26 INS26 UPD40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS42 INS40 UPD42 UPD42 INS21 INS54 INS21 INS60 INS42 INS54 INS43 INS42 INS60 INS60 INS21 INS21 INS41 INS32 INS8 INS8 INS7 INS60 INS21 INS39 INS59 INS21 INS8 INS8 INS42 INS43 INS59 INS43 INS59 INS32 INS7 INS42 UPD42 INS22 INS42 INS41 INS21 INS22 INS32 INS43 INS59 INS32 INS42 INS40 INS7 INS21 INS60 INS41 INS21 INS42 INS42 INS32 INS42 INS42 MOV32 INS22 INS42 INS42 INS22 INS32 UPD42 INS52 INS42 INS22 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS9 INS42 INS32 INS42 INS45 INS42 INS32 INS39 INS59 INS38 INS32 UPD42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 UPD45 INS45 UPD45 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS22 INS42 INS43 INS32 INS32 INS42 INS8 INS22 INS42 INS42 INS32 INS36 INS22 INS42 INS52 UPD42 INS52 INS42 INS42 INS40 INS42 INS32 INS21 INS42 INS42 INS25 INS52 INS42 INS42 INS27 INS52 INS42 INS32 INS42 INS32 INS38 MOV8 INS25 INS27 INS27 INS42 INS42 INS40 INS42 INS40 INS32 INS38 INS8 INS27 INS27 INS42 INS40 INS9 INS42 INS42 INS40 INS21 INS27 INS27 INS42 INS40 INS7 INS42 INS40 INS42 INS40 INS42 INS9 DEL40 DEL38 DEL40 DEL83 DEL42 DEL45 DEL40 DEL32