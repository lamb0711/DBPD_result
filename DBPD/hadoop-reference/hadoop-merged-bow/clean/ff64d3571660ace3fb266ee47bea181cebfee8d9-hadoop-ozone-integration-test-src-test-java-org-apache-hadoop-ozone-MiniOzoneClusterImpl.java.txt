HDDS-351. Add chill mode state to SCM.
Contributed by Ajay Kumar.

+import org.apache.hadoop.ozone.common.Storage.StorageState;
+      stop();
-
-      if (ozoneManager != null) {
-        LOG.info("Shutting down the OzoneManager");
-        ozoneManager.stop();
-        ozoneManager.join();
-      }
-
-      if (scm != null) {
-        LOG.info("Shutting down the StorageContainerManager");
-        scm.stop();
-        scm.join();
-      }
-
-      if (!hddsDatanodes.isEmpty()) {
-        LOG.info("Shutting down the HddsDatanodes");
-        for (HddsDatanodeService hddsDatanode : hddsDatanodes) {
-          hddsDatanode.stop();
-          hddsDatanode.join();
-        }
-      }
+  @Override
+  public void stop() {
+    LOG.info("Stopping the Mini Ozone Cluster");
+    if (ozoneManager != null) {
+      LOG.info("Stopping the OzoneManager");
+      ozoneManager.stop();
+      ozoneManager.join();
+    }
+
+    if (scm != null) {
+      LOG.info("Stopping the StorageContainerManager");
+      scm.stop();
+      scm.join();
+    }
+
+    if (!hddsDatanodes.isEmpty()) {
+      LOG.info("Shutting the HddsDatanodes");
+      for (HddsDatanodeService hddsDatanode : hddsDatanodes) {
+        hddsDatanode.stop();
+        hddsDatanode.join();
+      }
+    }
+  }
+
+  /**
+   * Start Scm.
+   */
+  @Override
+  public void startScm() throws IOException {
+    scm.start();
+  }
+
+  /**
+   * Start DataNodes.
+   */
+  @Override
+  public void startHddsDatanodes() {
+    hddsDatanodes.forEach((datanode) -> datanode.start(null));
+  }
+
+
-      List<HddsDatanodeService> hddsDatanodes = createHddsDatanodes(scm);
-      hddsDatanodes.forEach((datanode) -> datanode.start(null));
-      return new MiniOzoneClusterImpl(conf, om, scm, hddsDatanodes);
+      final List<HddsDatanodeService> hddsDatanodes = createHddsDatanodes(scm);
+      MiniOzoneClusterImpl cluster = new MiniOzoneClusterImpl(conf, om, scm,
+          hddsDatanodes);
+      if (startDataNodes) {
+        cluster.startHddsDatanodes();
+      }
+      return cluster;
+      initializeScmStorage(scmStore);
+      return StorageContainerManager.createSCM(null, conf);
+    }
+
+    private void initializeScmStorage(SCMStorage scmStore) throws IOException {
+      if (scmStore.getState() == StorageState.INITIALIZED) {
+        return;
+      }
-      return StorageContainerManager.createSCM(null, conf);
+    }
+
+    private void initializeOmStorage(OMStorage omStorage) throws IOException{
+      if (omStorage.getState() == StorageState.INITIALIZED) {
+        return;
+      }
+      omStorage.setClusterId(clusterId);
+      omStorage.setScmId(scmId.get());
+      omStorage.setOmId(omId.orElse(UUID.randomUUID().toString()));
+      omStorage.initialize();
-      omStore.setClusterId(clusterId);
-      omStore.setScmId(scmId.get());
-      omStore.setOmId(omId.orElse(UUID.randomUUID().toString()));
-      omStore.initialize();
+      initializeOmStorage(omStore);

INS26 INS40 INS31 INS31 INS31 MOV78 INS83 INS39 INS42 MOV8 INS78 UPD42 MOV8 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS31 INS31 INS42 INS21 INS65 INS42 INS42 INS21 INS65 INS42 MOV21 MOV29 INS83 MOV43 INS42 INS43 INS8 INS39 INS42 INS44 INS83 INS39 INS42 INS44 INS43 INS8 INS8 INS32 INS66 INS32 INS66 INS60 INS25 INS42 MOV21 MOV60 INS21 MOV41 INS43 INS42 INS25 INS43 INS42 INS42 INS25 INS21 MOV21 MOV21 INS21 MOV21 MOV60 INS21 MOV21 INS42 INS42 INS45 INS42 INS42 INS83 INS43 INS59 INS42 INS8 INS42 INS32 INS42 INS27 INS8 INS42 INS27 INS8 INS32 INS32 INS32 INS42 INS42 MOV14 INS21 INS42 INS42 INS32 INS40 INS41 INS32 INS40 INS41 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 UPD45 UPD45 UPD45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21