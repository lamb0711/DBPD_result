HDFS-9390. Block management for maintenance states.

-        new DFSUtil.DecomStaleComparator(staleInterval) :
-        DFSUtil.DECOM_COMPARATOR;
+        new DFSUtil.ServiceAndStaleComparator(staleInterval) :
+        new DFSUtil.ServiceComparator();
+    removeDatanode(nodeInfo, true);
+  }
+
+  /**
+   * Remove a datanode descriptor.
+   * @param nodeInfo datanode descriptor.
+   */
+  private void removeDatanode(DatanodeDescriptor nodeInfo,
+      boolean removeBlocksFromBlocksMap) {
-    blockManager.removeBlocksAssociatedTo(nodeInfo);
+    if (removeBlocksFromBlocksMap) {
+      blockManager.removeBlocksAssociatedTo(nodeInfo);
+    }
-        removeDatanode(descriptor);
+        removeDatanode(descriptor, true);
-  void removeDeadDatanode(final DatanodeID nodeID) {
+  void removeDeadDatanode(final DatanodeID nodeID,
+      boolean removeBlocksFromBlockMap) {
-          "BLOCK* removeDeadDatanode: lost heartbeat from " + d);
-      removeDatanode(d);
+          "BLOCK* removeDeadDatanode: lost heartbeat from " + d
+              + ", removeBlocksFromBlockMap " + removeBlocksFromBlockMap);
+      removeDatanode(d, removeBlocksFromBlockMap);
-   * 1. Added to hosts  --> no further work needed here.
-   * 2. Removed from hosts --> mark AdminState as decommissioned. 
-   * 3. Added to exclude --> start decommission.
-   * 4. Removed from exclude --> stop decommission.
+   * Reload datanode membership and the desired admin operations from
+   * host files. If a node isn't allowed, hostConfigManager.isIncluded returns
+   * false and the node can't be used.
+   * If a node is allowed and the desired admin operation is defined,
+   * it will transition to the desired admin state.
+   * If a node is allowed and upgrade domain is defined,
+   * the upgrade domain will be set on the node.
+   * To use maintenance mode or upgrade domain, set
+   * DFS_NAMENODE_HOSTS_PROVIDER_CLASSNAME_KEY to
+   * CombinedHostFileManager.class.
-        node.setDisallowed(true); // case 2.
+        node.setDisallowed(true);
-          decomManager.startDecommission(node); // case 3.
+          decomManager.startDecommission(node);
-          decomManager.stopDecommission(node); // case 4.
+          decomManager.stopDecommission(node);

INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS44 INS44 INS65 INS65 INS43 INS42 INS21 INS39 INS42 INS25 INS39 INS42 INS66 INS42 INS66 INS42 INS32 INS42 INS8 INS66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS42 INS42 INS9 MOV21 INS14 UPD43 INS43 INS42 UPD40 INS40 INS45 INS42 INS9 DEL40