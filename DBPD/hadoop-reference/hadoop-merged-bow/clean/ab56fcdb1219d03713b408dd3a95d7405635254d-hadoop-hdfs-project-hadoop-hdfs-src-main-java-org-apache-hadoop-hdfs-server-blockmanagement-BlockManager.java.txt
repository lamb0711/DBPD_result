Merge remote-tracking branch 'apache/trunk' into HDFS-7285

-import java.util.TreeMap;
+import org.apache.hadoop.hdfs.util.LightWeightHashSet;
-import com.google.common.collect.Sets;
-  private final Set<Block> postponedMisreplicatedBlocks = Sets.newHashSet();
+  private final LightWeightHashSet<Block> postponedMisreplicatedBlocks =
+      new LightWeightHashSet<>();
-    new TreeMap<>();
+    new HashMap<>();
-      BlockCollection bc = ((BlockInfo) block).getBlockCollection();
+      BlockCollection bc = getBlockCollection((BlockInfo)block);
-
-    if(lastBlock == null ||
-       bc.getPreferredBlockSize() == lastBlock.getNumBytes() - bytesToRemove)
+    if (lastBlock == null ||
+       bc.getPreferredBlockSize() == lastBlock.getNumBytes() - bytesToRemove) {
+    }
-    } 
+    }
-        getExpectedReplicaNum(b.stored.getBlockCollection(), b.stored);
+        getExpectedReplicaNum(b.stored);
-            bc = blocksMap.getBlockCollection(block);
+            bc = getBlockCollection(block);
-            requiredReplication = getExpectedReplicaNum(bc, block);
+            requiredReplication = getExpectedReplicaNum(block);
-          bc = blocksMap.getBlockCollection(block);
+          bc = getBlockCollection(block);
-          requiredReplication = getExpectedReplicaNum(bc, block);
+          requiredReplication = getExpectedReplicaNum(block);
-            String src = block.getBlockCollection().getName();
+            String src = getBlockCollection(block).getName();
-          if (isNeededReplication(bi, getReplication(bi), num.liveReplicas())) {
+          if (isNeededReplication(bi, num.liveReplicas())) {
+        blockReportLeaseManager.removeLease(node);
-             "longer exists on the DataNode.",
-              Long.toHexString(context.getReportId()), zombie.getStorageID());
+            "longer exists on the DataNode.",
+        Long.toHexString(context.getReportId()), zombie.getStorageID());
-        if (namesystem.isInSnapshot(storedBlock.getBlockCollection())) {
+        if (namesystem.isInSnapshot(storedBlock)) {
-   * BlockInfoUnderConstruction's list of replicas.</li>
+   * BlockUnderConstructionFeature's list of replicas.</li>
-      toUC.add(new StatefulBlockInfo(storedBlock, new Block(block),
-          reportedState));
+      toUC.add(new StatefulBlockInfo(storedBlock,
+          new Block(block), reportedState));
-    block.getUnderConstructionFeature().addReplicaIfNotPresent(storageInfo,
-        ucBlock.reportedBlock, ucBlock.reportedState);
+    block.getUnderConstructionFeature().addReplicaIfNotPresent(
+        storageInfo, ucBlock.reportedBlock, ucBlock.reportedState);
-      completeBlock(storedBlock.getBlockCollection(), storedBlock, false);
+      completeBlock(getBlockCollection(storedBlock), storedBlock, false);
-    BlockCollection bc = storedBlock.getBlockCollection();
+    BlockCollection bc = getBlockCollection(storedBlock);
+    assert bc != null : "Block must belong to a file";
-    short fileReplication = getExpectedReplicaNum(bc, storedBlock);
-    if (!isNeededReplication(storedBlock, fileReplication, numCurrentReplica)) {
+    short fileReplication = getExpectedReplicaNum(storedBlock);
+    if (!isNeededReplication(storedBlock, numCurrentReplica)) {
-    short expectedReplication =
-        getExpectedReplicaNum(block.getBlockCollection(), block);
+    short expectedReplication = getExpectedReplicaNum(block);
-    if (isNeededReplication(block, expectedReplication, numCurrentReplica)) {
+    if (isNeededReplication(block, numCurrentReplica)) {
-  public void setReplication(final short oldRepl, final short newRepl,
-      final String src, final BlockInfo... blocks) {
+  public void setReplication(
+      final short oldRepl, final short newRepl, final BlockInfo b) {
-    for(BlockInfo b : blocks) {
-      updateNeededReplications(b, 0, newRepl-oldRepl);
-    }
-      
+    b.setReplication(newRepl);
+    updateNeededReplications(b, 0, newRepl - oldRepl);
+
-      // old replication > the new one; need to remove copies
-      LOG.info("Decreasing replication from " + oldRepl + " to " + newRepl
-          + " for " + src);
-      for(BlockInfo b : blocks) {
-        processOverReplicatedBlock(b, newRepl, null, null);
-      }
-    } else { // replication factor is increased
-      LOG.info("Increasing replication from " + oldRepl + " to " + newRepl
-          + " for " + src);
+      processOverReplicatedBlock(b, newRepl, null, null);
-      BlockCollection bc = storedBlock.getBlockCollection();
+      BlockCollection bc = getBlockCollection(storedBlock);
-      if (isNeededReplication(block, curExpectedReplicas, repl.liveReplicas())) {
+      if (isNeededReplication(block, repl.liveReplicas())) {
-      short expected = getExpectedReplicaNum(bc, block);
+      short expected = getExpectedReplicaNum(block);
-      if (isNeededReplication(block, expected, n.liveReplicas())) { 
+      if (isNeededReplication(block, n.liveReplicas())) {
-    final BlockCollection bc = blocksMap.getBlockCollection(block);
-    return bc == null? 0: getExpectedReplicaNum(bc, block);
+    return getExpectedReplicaNum(block);
-
-  boolean isNeededReplication(BlockInfo storedBlock, int expected, int current) {
+  boolean isNeededReplication(BlockInfo storedBlock, int current) {
+    int expected = getExpectedReplicaNum(storedBlock);
-  
-  public short getExpectedReplicaNum(BlockCollection bc, BlockInfo block) {
-    if (block.isStriped()) {
-      return ((BlockInfoStriped) block).getRealTotalBlockNum();
-    } else {
-      return bc.getPreferredBlockReplication();
-    }
+
+  public short getExpectedReplicaNum(BlockInfo block) {
+    return block.isStriped() ?
+        ((BlockInfoStriped) block).getRealTotalBlockNum() :
+        block.getReplication();
-  public BlockCollection getBlockCollection(Block b) {
-    return blocksMap.getBlockCollection(b);
+  public BlockCollection getBlockCollection(BlockInfo b) {
+    return namesystem.getBlockCollection(b.getBlockCollectionId());

MOV26 UPD40 UPD74 MOV8 MOV44 UPD43 INS14 INS6 UPD42 MOV21 MOV21 INS25 INS60 UPD42 INS74 UPD74 INS8 UPD66 INS27 INS45 MOV27 MOV8 INS32 INS39 INS59 INS16 INS43 UPD43 MOV41 INS42 INS33 UPD42 INS42 INS42 MOV42 MOV42 INS42 INS32 MOV32 MOV32 INS32 UPD42 INS32 INS42 UPD42 MOV40 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV42 INS42 INS21 UPD42 UPD42 MOV11 INS32 UPD42 UPD42 INS42 INS42 INS42 MOV42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL42 DEL32 DEL36 DEL42 DEL32 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL42 DEL70 DEL8 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL34 DEL42 DEL32 DEL16 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44