Merge branch 'trunk' into HADOOP-12756

+import com.google.common.collect.Lists;
+import java.util.Collections;
+import java.util.List;
+import java.util.Random;
+  public static final int DEFAULT_FILE_STATUS_SIZE = 1000;
+  public static final boolean DEFAULT_RANDOMIZE_FILE_LISTING = true;
+
+  private final int fileStatusLimit;
+  private final boolean randomizeFileListing;
+  private final Random rnd = new Random();
+    fileStatusLimit = Math.max(1, getConf()
+        .getInt(DistCpConstants.CONF_LABEL_SIMPLE_LISTING_FILESTATUS_SIZE,
+        DEFAULT_FILE_STATUS_SIZE));
+    randomizeFileListing = getConf().getBoolean(
+        DistCpConstants.CONF_LABEL_SIMPLE_LISTING_RANDOMIZE_FILES,
+        DEFAULT_RANDOMIZE_FILE_LISTING);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("numListstatusThreads=" + numListstatusThreads
+          + ", fileStatusLimit=" + fileStatusLimit
+          + ", randomizeFileListing=" + randomizeFileListing);
+    }
-                              int numListstatusThreads) {
+                              int numListstatusThreads,
+                              int fileStatusLimit,
+                              boolean randomizeFileListing) {
+    this.fileStatusLimit = Math.max(1, fileStatusLimit);
+    this.randomizeFileListing = randomizeFileListing;
+      List<FileStatusInfo> fileStatuses = Lists.newArrayList();
-                sourceRoot, options, excludeList);
+                sourceRoot, options, excludeList, fileStatuses);
+      if (randomizeFileListing) {
+        writeToFileListing(fileStatuses, fileListWriter);
+      }
+      List<FileStatusInfo> statusList = Lists.newArrayList();
-            writeToFileListing(fileListWriter, sourceCopyListingStatus,
-                sourcePathRoot);
+            if (randomizeFileListing) {
+              addToFileListing(statusList,
+                  new FileStatusInfo(sourceCopyListingStatus, sourcePathRoot),
+                  fileListWriter);
+            } else {
+              writeToFileListing(fileListWriter, sourceCopyListingStatus,
+                  sourcePathRoot);
+            }
-                            sourcePathRoot, options, null);
+              sourcePathRoot, options, null, statusList);
+      if (randomizeFileListing) {
+        writeToFileListing(statusList, fileListWriter);
+      }
+  private void addToFileListing(List<FileStatusInfo> fileStatusInfoList,
+      FileStatusInfo statusInfo, SequenceFile.Writer fileListWriter)
+      throws IOException {
+    fileStatusInfoList.add(statusInfo);
+    if (fileStatusInfoList.size() > fileStatusLimit) {
+      writeToFileListing(fileStatusInfoList, fileListWriter);
+    }
+  }
+
+  @VisibleForTesting
+  void setSeedForRandomListing(long seed) {
+    this.rnd.setSeed(seed);
+  }
+
+  private void writeToFileListing(List<FileStatusInfo> fileStatusInfoList,
+      SequenceFile.Writer fileListWriter) throws IOException {
+    /**
+     * In cloud storage systems, it is possible to get region hotspot.
+     * Shuffling paths can avoid such cases and also ensure that
+     * some mappers do not get lots of similar paths.
+     */
+    Collections.shuffle(fileStatusInfoList, rnd);
+    for (FileStatusInfo fileStatusInfo : fileStatusInfoList) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Adding " + fileStatusInfo.fileStatus.getPath());
+      }
+      writeToFileListing(fileListWriter, fileStatusInfo.fileStatus,
+          fileStatusInfo.sourceRootPath);
+    }
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Number of paths written to fileListing="
+          + fileStatusInfoList.size());
+    }
+    fileStatusInfoList.clear();
+  }
+
+  private static class FileStatusInfo {
+    private CopyListingFileStatus fileStatus;
+    private Path sourceRootPath;
+
+    FileStatusInfo(CopyListingFileStatus fileStatus, Path sourceRootPath) {
+      this.fileStatus = fileStatus;
+      this.sourceRootPath = sourceRootPath;
+    }
+  }
+
-                                 HashSet<String> excludeList)
+                                 HashSet<String> excludeList,
+                                 List<FileStatusInfo> fileStatuses)
-    LOG.debug("Starting thread pool of " + numListstatusThreads +
-              " listStatus workers.");
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Starting thread pool of " + numListstatusThreads +
+          " listStatus workers.");
+    }
-            writeToFileListing(fileListWriter, childCopyListingStatus,
-                 sourcePathRoot);
+            if (randomizeFileListing) {
+              addToFileListing(fileStatuses,
+                  new FileStatusInfo(childCopyListingStatus, sourcePathRoot),
+                  fileListWriter);
+            } else {
+              writeToFileListing(fileListWriter, childCopyListingStatus,
+                  sourcePathRoot);
+            }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS44 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS42 INS23 INS23 INS31 INS44 INS42 INS34 INS42 INS9 INS42 INS42 INS42 INS42 INS14 INS21 INS21 INS25 INS39 INS42 INS39 INS42 INS21 INS21 INS74 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS25 INS42 INS39 INS42 INS21 INS74 INS42 INS43 INS42 INS42 INS21 INS70 INS25 INS21 INS83 INS43 INS59 INS83 INS43 INS59 INS42 INS44 INS44 INS8 INS74 INS42 INS25 INS43 INS7 INS7 INS32 INS8 INS7 INS7 INS43 INS43 INS42 INS40 INS32 INS27 INS8 INS32 INS43 INS43 INS40 INS32 INS44 INS42 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS43 INS43 INS32 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS22 INS32 INS22 INS42 INS60 INS25 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS21 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS25 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 INS34 INS32 INS32 INS42 INS40 INS42 INS32 INS52 INS42 INS42 INS42 INS34 INS42 INS52 INS42 INS74 INS59 INS42 INS8 INS74 INS59 INS42 INS8 INS42 INS42 INS32 INS52 INS42 INS42 INS32 INS8 INS32 INS32 INS22 INS42 INS22 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS27 INS43 INS43 INS42 INS32 INS21 INS43 INS43 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS40 INS40 INS42 INS42 INS27 INS52 INS42 INS52 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS32 INS25 INS42 INS40 INS42 INS25 INS42 INS8 INS8 INS42 INS8 INS8 INS21 MOV21 INS21 MOV21 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42