HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520665 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.BatchedRemoteIterator.BatchedListEntries;
-    final FSPermissionChecker pc = getPermissionChecker();
+    final FSPermissionChecker pc = isPermissionEnabled ?
+        getPermissionChecker() : null;
+    checkOperation(OperationCategory.WRITE);
-      results = cacheManager.addDirectives(pc, directives);
+      results = cacheManager.addDirectives(directives, pc);
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
-  List<Fallible<Long>> removePathCacheEntries(List<Long> ids)
-      throws IOException {
-    final FSPermissionChecker pc = getPermissionChecker();
+  List<Fallible<Long>> removePathCacheEntries(List<Long> ids) throws IOException {
+    CacheEntryWithPayload retryCacheEntry =
+        RetryCache.waitForCompletion(retryCache, null);
+    if (retryCacheEntry != null && retryCacheEntry.isSuccess()) {
+      return (List<Fallible<Long>>) retryCacheEntry.getPayload();
+    }
+    final FSPermissionChecker pc = isPermissionEnabled ?
+        getPermissionChecker() : null;
+    checkOperation(OperationCategory.WRITE);
-            "Cannot add path cache directive", safeMode);
+            "Cannot remove path cache directives", safeMode);
-      results = cacheManager.removeEntries(pc, ids);
+      results = cacheManager.removeEntries(ids, pc);
-      if (success) {
-        getEditLog().logSync();
-      }
-      if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      if (isAuditEnabled() && isExternalInvocation()) {
+      RetryCache.setState(retryCacheEntry, success, results);
+    }
+    getEditLog().logSync();
+    return results;
+  }
+
+  BatchedListEntries<PathCacheEntry> listPathCacheEntries(long startId,
+      String pool) throws IOException {
+    final FSPermissionChecker pc = isPermissionEnabled ?
+        getPermissionChecker() : null;
+    BatchedListEntries<PathCacheEntry> results;
+    checkOperation(OperationCategory.READ);
+    readLock();
+    boolean success = false;
+    try {
+      checkOperation(OperationCategory.READ);
+      results = cacheManager.listPathCacheEntries(startId, pool, pc);
+      success = true;
+    } finally {
+      readUnlock();
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "listPathCacheEntries", null, null, null);
+      }
-  List<PathCacheEntry> listPathCacheEntries(long startId,
-      Long poolId, int maxReplies) throws IOException {
-    LOG.info("listPathCacheEntries with " + startId + " " + poolId);
-    final FSPermissionChecker pc = getPermissionChecker();
-    return cacheManager.listPathCacheEntries(pc, startId, poolId, maxReplies);
-  }
-
-  public CachePool addCachePool(CachePoolInfo req) throws IOException {
-    final FSPermissionChecker pc = getPermissionChecker();
-    CacheEntryWithPayload cacheEntry =
-        RetryCache.waitForCompletion(retryCache, null);
-    if (cacheEntry != null && cacheEntry.isSuccess()) {
-      return (CachePool)cacheEntry.getPayload(); // Return previous response
-    }
-    writeLock();
-    CachePool pool = null;
-    try {
-      checkOperation(OperationCategory.WRITE);
-      if (!pc.isSuperUser()) {
-        throw new AccessControlException("Non-super users cannot " +
-            "add cache pools.");
-      }
-      if (isInSafeMode()) {
-        throw new SafeModeException(
-            "Cannot add cache pool " + req.getPoolName(), safeMode);
-      }
-      pool = cacheManager.addCachePool(req);
-      RetryCache.setState(cacheEntry, true);
-      //getEditLog().logAddCachePool(req); // FIXME: HDFS-5119
-    } finally {
-      writeUnlock();
-    }
-
-    getEditLog().logSync();
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "addCachePool", req.getPoolName(), null, null);
-    }
-    return pool;
-  }
-
-  public void modifyCachePool(long poolId, CachePoolInfo info)
-      throws IOException {
-    final FSPermissionChecker pc = getPermissionChecker();
+  public void addCachePool(CachePoolInfo req) throws IOException {
+    final FSPermissionChecker pc = isPermissionEnabled ?
+        getPermissionChecker() : null;
+    checkOperation(OperationCategory.WRITE);
+    boolean success = false;
-      if (!pc.isSuperUser()) {
-        throw new AccessControlException("Non-super users cannot " +
-            "modify cache pools.");
-      }
-            "Cannot modify cache pool " + info.getPoolName(), safeMode);
+            "Cannot add cache pool " + req.getPoolName(), safeMode);
-      cacheManager.modifyCachePool(poolId, info);
-      RetryCache.setState(cacheEntry, true);
+      if (pc != null) {
+        pc.checkSuperuserPrivilege();
+      }
+      cacheManager.addCachePool(req);
+      //getEditLog().logAddCachePool(req); // FIXME: HDFS-5119
+      success = true;
+    } finally {
+      writeUnlock();
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "addCachePool", req.getPoolName(), null, null);
+      }
+      RetryCache.setState(cacheEntry, success);
+    }
+    
+    getEditLog().logSync();
+  }
+
+  public void modifyCachePool(CachePoolInfo req) throws IOException {
+    final FSPermissionChecker pc =
+        isPermissionEnabled ? getPermissionChecker() : null;
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    checkOperation(OperationCategory.WRITE);
+    writeLock();
+    boolean success = false;
+    try {
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException(
+            "Cannot modify cache pool " + req.getPoolName(), safeMode);
+      }
+      if (pc != null) {
+        pc.checkSuperuserPrivilege();
+      }
+      cacheManager.modifyCachePool(req);
+      success = true;
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "modifyCachePool", req.getPoolName(), null, null);
+      }
+      RetryCache.setState(cacheEntry, success);
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "modifyCachePool", info.getPoolName(), null, null);
-    }
-  public void removeCachePool(long poolId) throws IOException {
-    final FSPermissionChecker pc = getPermissionChecker();
+  public void removeCachePool(String cachePoolName) throws IOException {
+    final FSPermissionChecker pc =
+        isPermissionEnabled ? getPermissionChecker() : null;
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    checkOperation(OperationCategory.WRITE);
-    CachePool pool;
+    boolean success = false;
-      if (!pc.isSuperUser()) {
-        throw new AccessControlException("Non-super users cannot " +
-            "remove cache pools.");
-      }
-      pool = cacheManager.getCachePool(poolId);
-        String identifier;
-        if (pool == null) {
-          identifier = "with id " + Long.toString(poolId);
-        } else {
-          identifier = pool.getInfo().getPoolName();
-        }
-            "Cannot remove cache pool " + identifier, safeMode);
+            "Cannot remove cache pool " + cachePoolName, safeMode);
-      cacheManager.removeCachePool(poolId);
+      if (pc != null) {
+        pc.checkSuperuserPrivilege();
+      }
+      cacheManager.removeCachePool(cachePoolName);
+      success = true;
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "removeCachePool", cachePoolName, null, null);
+      }
+      RetryCache.setState(cacheEntry, success);
-
+    
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "removeCachePool", pool.getInfo().getPoolName(),
-          null, null);
-    }
-  public List<CachePool> listCachePools(long prevKey,
-      int maxRepliesPerRequest) throws IOException {
-    List<CachePool> results;
+  public BatchedListEntries<CachePoolInfo> listCachePools(String prevKey)
+      throws IOException {
+    final FSPermissionChecker pc =
+        isPermissionEnabled ? getPermissionChecker() : null;
+    BatchedListEntries<CachePoolInfo> results;
+    checkOperation(OperationCategory.READ);
+    boolean success = false;
-      results = cacheManager.listCachePools(prevKey, maxRepliesPerRequest);
+      results = cacheManager.listCachePools(pc, prevKey);
+      success = true;
+      if (isAuditEnabled() && isExternalInvocation()) {
+        logAuditEvent(success, "listCachePools", null, null, null);
+      }

INS26 INS40 INS31 INS31 UPD74 INS8 MOV83 INS39 INS42 MOV44 MOV43 INS8 INS83 INS39 INS42 INS44 MOV43 INS8 MOV43 MOV21 UPD74 MOV43 INS8 INS21 INS60 INS25 INS21 INS21 UPD43 UPD43 UPD42 MOV60 INS60 INS21 MOV21 INS60 INS54 INS41 MOV60 MOV60 MOV25 INS21 MOV21 INS60 MOV54 MOV21 INS43 INS42 MOV60 MOV60 MOV25 MOV21 MOV21 INS60 INS54 MOV21 MOV43 UPD42 MOV60 MOV25 MOV21 MOV60 INS54 UPD43 MOV43 INS43 INS60 MOV60 INS21 INS60 INS21 MOV54 MOV41 INS32 INS43 INS59 INS27 INS8 INS32 INS32 UPD42 UPD42 INS74 INS59 INS32 INS39 INS59 INS8 INS8 INS42 INS32 INS39 INS59 MOV25 INS8 UPD42 MOV42 UPD43 INS32 INS39 INS59 MOV8 INS8 UPD43 INS27 INS32 INS39 INS8 INS8 UPD42 INS42 INS83 INS43 INS59 UPD74 INS32 INS39 INS59 INS32 INS8 INS16 INS42 INS40 INS42 INS42 INS32 INS27 INS32 INS41 INS16 INS42 INS40 MOV21 INS32 INS42 INS16 INS43 INS43 INS42 INS42 INS40 INS42 INS9 INS21 MOV21 INS21 INS21 INS25 INS16 INS42 INS40 INS42 INS9 MOV21 INS25 INS21 INS16 UPD42 UPD42 MOV42 INS40 INS42 INS9 MOV21 INS25 MOV21 MOV25 INS21 INS16 UPD42 UPD42 INS32 INS27 INS32 INS41 UPD42 MOV42 INS40 UPD42 INS9 MOV21 INS25 INS25 MOV21 INS21 MOV21 MOV25 INS21 INS42 INS42 INS16 UPD43 UPD43 INS42 INS40 INS42 INS9 INS42 INS21 MOV21 INS25 INS42 MOV32 INS33 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS42 MOV32 INS33 INS42 INS42 MOV32 INS33 INS42 INS42 INS32 INS7 INS7 INS32 INS27 INS8 INS42 MOV32 INS33 INS27 INS8 MOV32 INS7 INS27 INS8 INS32 INS42 MOV32 INS33 MOV32 INS27 INS8 INS7 INS32 INS42 MOV32 INS33 INS42 INS42 INS42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 MOV32 INS8 INS27 MOV8 INS7 INS32 INS42 INS32 INS33 UPD42 UPD42 INS7 INS27 INS8 INS74 INS32 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS9 UPD42 MOV42 INS32 MOV32 INS21 INS42 INS33 INS21 INS42 INS9 INS32 MOV32 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS21 UPD42 INS42 INS9 MOV32 INS42 INS42 INS42 INS42 INS53 INS42 INS33 UPD42 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS32 INS21 INS42 UPD42 INS43 INS74 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS32 INS42 INS32 INS32 UPD42 INS14 INS32 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS43 INS43 UPD45 UPD42 MOV42 UPD42 MOV42 INS45 INS33 INS33 INS33 MOV42 UPD42 MOV42 INS42 INS42 INS45 MOV32 INS33 INS33 MOV43 INS42 INS42 INS42 MOV43 INS27 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS45 INS33 INS33 INS33 INS42 INS42 INS42 UPD42 INS45 UPD42 MOV42 UPD42 DEL42 DEL42 DEL42 DEL42 DEL8 DEL25 DEL42 DEL32 DEL39 DEL42 DEL44 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL32 DEL38 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL42 DEL7 DEL42 DEL42 DEL42 DEL9 DEL32 DEL8 DEL33 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL9 DEL45 DEL33 DEL33 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL42 DEL9 DEL43 DEL42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL44 DEL8 DEL54 DEL8 DEL31 DEL39 DEL32 DEL38 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL42 DEL32 DEL32 DEL7 DEL42 DEL9 DEL42 DEL42 DEL32 DEL32 DEL33 DEL27 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL25 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL8 DEL54 DEL42 DEL43 DEL39 DEL8 DEL39 DEL42 DEL44 DEL8