YARN-5697. Use CliParser to parse options in RMAdminCLI. Contributed by Tao jie

+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.GnuParser;
+import org.apache.commons.cli.MissingArgumentException;
+import org.apache.commons.cli.Option;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.ParseException;
-  private boolean directlyAccessNodeLabelStore = false;
-              new UsageInfo("[-failOnUnknownNodes] " +
-                  "<\"node1[:port]=label1,label2 node2[:port]=label1,label2\">",
+              new UsageInfo(
+                  "<\"node1[:port]=label1,label2 node2[:port]=label1,label2\"> "
+                  + "[-failOnUnknownNodes] ",
-        " [-replaceLabelsOnNode [-failOnUnknownNodes] "
-            + "<\"node1[:port]=label1,label2 node2[:port]=label1\">]" +
+        " [-replaceLabelsOnNode " +
+            "<\"node1[:port]=label1,label2 node2[:port]=label1\"> " +
+            "[-failOnUnknownNodes]]" +
-  private int addToClusterNodeLabels(String args) throws IOException,
-      YarnException {
-    List<NodeLabel> labels = buildNodeLabelsFromStr(args);
+  private int handleAddToClusterNodeLabels(String[] args, String cmd,
+      boolean isHAEnabled) throws IOException, YarnException, ParseException {
+    Options opts = new Options();
+    opts.addOption("addToClusterNodeLabels", true,
+        "Add to cluster node labels.");
+    opts.addOption("directlyAccessNodeLabelStore", false,
+        "Directly access node label store.");
+    int exitCode = -1;
+    CommandLine cliParser = null;
+    try {
+      cliParser = new GnuParser().parse(opts, args);
+    } catch (MissingArgumentException ex) {
+      System.err.println(NO_LABEL_ERR_MSG);
+      printUsage(args[0], isHAEnabled);
+      return exitCode;
+    }
-    if (directlyAccessNodeLabelStore) {
+    List<NodeLabel> labels = buildNodeLabelsFromStr(
+        cliParser.getOptionValue("addToClusterNodeLabels"));
+    if (cliParser.hasOption("directlyAccessNodeLabelStore")) {
-  private int removeFromClusterNodeLabels(String args) throws IOException,
-      YarnException {
-    Set<String> labels = buildNodeLabelNamesFromStr(args);
+  private int handleRemoveFromClusterNodeLabels(String[] args, String cmd,
+      boolean isHAEnabled) throws IOException, YarnException, ParseException {
+    Options opts = new Options();
+    opts.addOption("removeFromClusterNodeLabels", true,
+        "Remove From cluster node labels.");
+    opts.addOption("directlyAccessNodeLabelStore", false,
+        "Directly access node label store.");
+    int exitCode = -1;
+    CommandLine cliParser = null;
+    try {
+      cliParser = new GnuParser().parse(opts, args);
+    } catch (MissingArgumentException ex) {
+      System.err.println(NO_LABEL_ERR_MSG);
+      printUsage(args[0], isHAEnabled);
+      return exitCode;
+    }
-    if (directlyAccessNodeLabelStore) {
+    Set<String> labels = buildNodeLabelNamesFromStr(
+        cliParser.getOptionValue("removeFromClusterNodeLabels"));
+    if (cliParser.hasOption("directlyAccessNodeLabelStore")) {
-  private int replaceLabelsOnNodes(String args, boolean failOnUnknownNodes)
-      throws IOException, YarnException {
-    Map<NodeId, Set<String>> map = buildNodeLabelsMapFromStr(args);
-    return replaceLabelsOnNodes(map, failOnUnknownNodes);
+  private int handleReplaceLabelsOnNodes(String[] args, String cmd,
+      boolean isHAEnabled) throws IOException, YarnException, ParseException {
+    Options opts = new Options();
+    opts.addOption("replaceLabelsOnNode", true,
+        "Replace label on node.");
+    opts.addOption("failOnUnknownNodes", false,
+        "Fail on unknown nodes.");
+    opts.addOption("directlyAccessNodeLabelStore", false,
+        "Directly access node label store.");
+    int exitCode = -1;
+    CommandLine cliParser = null;
+    try {
+      cliParser = new GnuParser().parse(opts, args);
+    } catch (MissingArgumentException ex) {
+      System.err.println(NO_MAPPING_ERR_MSG);
+      printUsage(args[0], isHAEnabled);
+      return exitCode;
+    }
+
+    Map<NodeId, Set<String>> map = buildNodeLabelsMapFromStr(
+        cliParser.getOptionValue("replaceLabelsOnNode"));
+    return replaceLabelsOnNodes(map,
+        cliParser.hasOption("failOnUnknownNodes"),
+        cliParser.hasOption("directlyAccessNodeLabelStore"));
-      boolean failOnUnknownNodes) throws IOException, YarnException {
+      boolean failOnUnknownNodes, boolean directlyAccessNodeLabelStore)
+      throws IOException, YarnException {
-    // -directlyAccessNodeLabelStore is a additional option for node label
-    // access, so just search if we have specified this option, and remove it
-    List<String> argsList = new ArrayList<String>();
-    for (int i = 0; i < args.length; i++) {
-      if (args[i].equals("-directlyAccessNodeLabelStore")) {
-        directlyAccessNodeLabelStore = true;
-      } else {
-        argsList.add(args[i]);
-      }
-    }
-    args = argsList.toArray(new String[0]);
-    
-        if (i >= args.length) {
-          System.err.println(NO_LABEL_ERR_MSG);
-          printUsage("", isHAEnabled);
-          exitCode = -1;
-        } else {
-          exitCode = addToClusterNodeLabels(args[i]);
-        }
+        exitCode = handleAddToClusterNodeLabels(args, cmd, isHAEnabled);
-        if (i >= args.length) {
-          System.err.println(NO_LABEL_ERR_MSG);
-          printUsage("", isHAEnabled);
-          exitCode = -1;
-        } else {
-          exitCode = removeFromClusterNodeLabels(args[i]);
-        }
+        exitCode = handleRemoveFromClusterNodeLabels(args, cmd, isHAEnabled);
-        if (i >= args.length) {
-          System.err.println(NO_MAPPING_ERR_MSG);
-          printUsage("", isHAEnabled);
-          exitCode = -1;
-        } else if ("-failOnUnknownNodes".equals(args[i])) {
-          if (i + 1 >= args.length) {
-            System.err.println(NO_MAPPING_ERR_MSG);
-            printUsage("", isHAEnabled);
-            exitCode = -1;
-          } else {
-            exitCode = replaceLabelsOnNodes(args[i + 1], true);
-          }
-        } else {
-          exitCode = replaceLabelsOnNodes(args[i], false);
-        }
+        exitCode = handleReplaceLabelsOnNodes(args, cmd, isHAEnabled);
-      throws IOException, YarnException {
-    if (args.length == 1) {
-      return refreshNodes();
-    } else if (args.length == 3 || args.length == 4) {
-      // if the graceful timeout specified
-      if ("-g".equals(args[1]) || "-graceful".equals(args[1])) {
-        int timeout = -1;
-        String trackingMode;
-        if (args.length == 4) {
-          timeout = validateTimeout(args[2]);
-          trackingMode = validateTrackingMode(args[3]);
-        } else {
-          trackingMode = validateTrackingMode(args[2]);
-        }
-        return refreshNodes(timeout, trackingMode);
+      throws IOException, YarnException, ParseException {
+    Options opts = new Options();
+    opts.addOption("refreshNodes", false,
+        "Refresh the hosts information at the ResourceManager.");
+    Option gracefulOpt = new Option("g", "graceful", true,
+        "Wait for timeout before marking the NodeManager as decommissioned.");
+    gracefulOpt.setOptionalArg(true);
+    opts.addOption(gracefulOpt);
+    opts.addOption("client", false,
+        "Indicates the timeout tracking should be handled by the client.");
+    opts.addOption("server", false,
+        "Indicates the timeout tracking should be handled by the RM.");
+
+    int exitCode = -1;
+    CommandLine cliParser = null;
+    try {
+      cliParser = new GnuParser().parse(opts, args);
+    } catch (MissingArgumentException ex) {
+      System.out.println("Missing argument for options");
+      printUsage(args[0], isHAEnabled);
+      return exitCode;
+    }
+
+    int timeout = -1;
+    if (cliParser.hasOption("g")) {
+      String strTimeout = cliParser.getOptionValue("g");
+      if (strTimeout != null) {
+        timeout = validateTimeout(strTimeout);
+      }
+      String trackingMode = null;
+      if (cliParser.hasOption("client")) {
+        trackingMode = "client";
+      } else if (cliParser.hasOption("server")) {
+        trackingMode = "server";
+      return refreshNodes(timeout, trackingMode);
-      printUsage(cmd, isHAEnabled);
-      return -1;
+      return refreshNodes();

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 UPD42 INS44 INS44 INS43 UPD42 INS44 INS44 INS43 UPD42 INS44 INS43 INS44 INS43 INS5 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS21 INS60 INS60 INS54 INS5 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS21 INS60 INS60 INS54 INS5 INS43 INS42 UPD42 INS42 INS60 INS21 INS21 INS21 INS60 INS60 INS54 INS39 INS42 INS42 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS60 INS60 INS54 MOV60 INS25 INS43 INS85 INS42 INS43 INS59 INS32 INS32 INS39 INS59 INS43 INS59 INS8 INS12 INS32 INS43 INS85 INS42 INS43 INS59 INS32 INS32 INS39 INS59 INS43 INS59 INS8 INS12 INS32 INS43 INS85 INS42 INS43 INS59 INS32 INS32 INS32 INS39 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS39 INS59 INS43 INS59 INS8 INS12 INS32 INS8 MOV8 MOV42 INS42 INS42 INS14 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS45 INS9 INS45 INS42 INS38 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS45 MOV42 INS42 INS42 INS14 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS45 INS9 INS45 INS42 INS38 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS45 MOV42 INS42 INS42 INS14 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS45 INS9 INS45 INS42 INS38 INS42 INS42 INS33 INS21 INS44 INS8 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS45 INS9 INS45 INS42 INS38 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS45 MOV60 INS25 INS60 INS25 MOV41 UPD45 UPD45 INS45 INS43 INS34 INS7 INS43 INS42 MOV21 INS21 INS41 INS32 INS43 INS34 INS7 INS43 INS42 MOV21 INS21 INS41 INS32 INS43 INS34 INS7 INS43 INS42 MOV21 INS21 INS41 INS32 UPD42 MOV42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS45 INS45 INS9 INS45 INS34 INS7 INS43 INS42 INS21 INS21 INS41 UPD27 MOV27 INS8 MOV43 INS59 INS32 MOV8 INS25 INS42 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS33 MOV21 INS42 INS33 UPD42 MOV42 INS42 INS45 INS32 INS8 MOV8 INS14 INS42 INS42 INS42 INS42 INS2 INS42 INS14 INS42 INS42 INS42 INS42 INS2 INS42 INS14 INS42 INS42 INS42 INS42 INS2 INS42 INS14 INS42 UPD42 MOV42 INS42 INS40 INS42 UPD45 MOV45 UPD42 MOV42 MOV2 INS42 INS42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS45 INS21 INS43 INS42 INS34 INS43 INS42 INS34 INS43 INS42 INS34 INS43 UPD34 INS45 INS7 UPD45 UPD45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 MOV8 MOV8 INS25 MOV32 MOV8 MOV8 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL45 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL85 DEL5 DEL34 DEL3 DEL32 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL40 DEL27 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL34 DEL38 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL2 DEL42 DEL42 DEL34 DEL27 DEL2 DEL9 DEL42 DEL40 DEL27 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL34 DEL38 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL40 DEL27 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL34 DEL38 DEL7 DEL21 DEL8 DEL45 DEL42 DEL42 DEL42 DEL2 DEL32 DEL42 DEL34 DEL27 DEL40 DEL27 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL34 DEL38 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL2 DEL9 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL25 DEL42 DEL40 DEL34 DEL42 DEL34 DEL2 DEL42 DEL42 DEL34 DEL2 DEL32 DEL40 DEL34 DEL27 DEL40 DEL34 DEL27 DEL40 DEL34 DEL27 DEL27 DEL45 DEL42 DEL34 DEL2 DEL32 DEL32 DEL27 DEL42 DEL42 DEL34 DEL2 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL32 DEL21 DEL34 DEL38 DEL41 DEL8 DEL25 DEL8 DEL25 DEL25