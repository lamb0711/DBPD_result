YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).

+import org.apache.hadoop.security.token.Token;
-import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
+import org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext;
+import org.apache.hadoop.yarn.security.AMRMTokenIdentifier;
-  private Map<String, ApplicationAttemptId> attemptIdMap;
+  private Map<String, ApplicationId> appIdMap;
-    this.attemptIdMap = new ConcurrentHashMap<>();
+    this.appIdMap = new ConcurrentHashMap<>();
-                + attemptIdMap.get(uamId));
+                + appIdMap.get(uamId));
-    this.attemptIdMap.clear();
+    this.appIdMap.clear();
+   * @param keepContainersAcrossApplicationAttempts keep container flag for UAM
+   *          recovery.
+   * @see ApplicationSubmissionContext
+   *          #setKeepContainersAcrossApplicationAttempts(boolean)
-      String queueName, String submitter, String appNameSuffix)
+      String queueName, String submitter, String appNameSuffix,
+      boolean keepContainersAcrossApplicationAttempts)
-    createAndRegisterNewUAM(appId.toString(), registerRequest, conf, appId,
-        queueName, submitter, appNameSuffix);
+    // Launch the UAM in RM
+    launchUAM(appId.toString(), conf, appId, queueName, submitter,
+        appNameSuffix, keepContainersAcrossApplicationAttempts);
+
+    // Register the UAM application
+    registerApplicationMaster(appId.toString(), registerRequest);
+
+    // Returns the appId as uamId
-   * Create a new UAM and register the application, using the provided uamId and
-   * appId.
+   * Launch a new UAM, using the provided uamId and appId.
-   * @param uamId identifier for the UAM
-   * @param registerRequest RegisterApplicationMasterRequest
+   * @param uamId uam Id
-   * @return RegisterApplicationMasterResponse
-   * @throws YarnException if registerApplicationMaster fails
-   * @throws IOException if registerApplicationMaster fails
+   * @param keepContainersAcrossApplicationAttempts keep container flag for UAM
+   *          recovery.
+   * @see ApplicationSubmissionContext
+   *          #setKeepContainersAcrossApplicationAttempts(boolean)
+   * @return UAM token
+   * @throws YarnException if fails
+   * @throws IOException if fails
-  public RegisterApplicationMasterResponse createAndRegisterNewUAM(String uamId,
-      RegisterApplicationMasterRequest registerRequest, Configuration conf,
+  public Token<AMRMTokenIdentifier> launchUAM(String uamId, Configuration conf,
-      String appNameSuffix) throws YarnException, IOException {
+      String appNameSuffix, boolean keepContainersAcrossApplicationAttempts)
+      throws YarnException, IOException {
-    UnmanagedApplicationManager uam =
-        createUAM(conf, appId, queueName, submitter, appNameSuffix);
+    UnmanagedApplicationManager uam = createUAM(conf, appId, queueName,
+        submitter, appNameSuffix, keepContainersAcrossApplicationAttempts);
-    RegisterApplicationMasterResponse response = null;
+    Token<AMRMTokenIdentifier> amrmToken = null;
-      LOG.info("Creating and registering UAM id {} for application {}", uamId,
-          appId);
-      response = uam.createAndRegisterApplicationMaster(registerRequest);
+      LOG.info("Launching UAM id {} for application {}", uamId, appId);
+      amrmToken = uam.launchUAM();
-    this.attemptIdMap.put(uamId, uam.getAttemptId());
-    return response;
+    this.appIdMap.put(uamId, uam.getAppId());
+    return amrmToken;
+  }
+
+  /**
+   * Re-attach to an existing UAM, using the provided uamIdentifier.
+   *
+   * @param uamId uam Id
+   * @param conf configuration for this UAM
+   * @param appId application id for the UAM
+   * @param queueName queue of the application
+   * @param submitter submitter name of the UAM
+   * @param appNameSuffix application name suffix for the UAM
+   * @param uamToken UAM token
+   * @throws YarnException if fails
+   * @throws IOException if fails
+   */
+  public void reAttachUAM(String uamId, Configuration conf,
+      ApplicationId appId, String queueName, String submitter,
+      String appNameSuffix, Token<AMRMTokenIdentifier> uamToken)
+      throws YarnException, IOException {
+
+    if (this.unmanagedAppMasterMap.containsKey(uamId)) {
+      throw new YarnException("UAM " + uamId + " already exists");
+    }
+    UnmanagedApplicationManager uam =
+        createUAM(conf, appId, queueName, submitter, appNameSuffix, true);
+    // Put the UAM into map first before initializing it to avoid additional UAM
+    // for the same uamId being created concurrently
+    this.unmanagedAppMasterMap.put(uamId, uam);
+
+    try {
+      LOG.info("Reattaching UAM id {} for application {}", uamId, appId);
+      uam.reAttachUAM(uamToken);
+    } catch (Exception e) {
+      // Add the map earlier and remove here if register failed because we want
+      // to make sure there is only one uam instance per uamId at any given time
+      this.unmanagedAppMasterMap.remove(uamId);
+      throw e;
+    }
+
+    this.appIdMap.put(uamId, uam.getAppId());
+   * @param keepContainersAcrossApplicationAttempts keep container flag for UAM
-      String appNameSuffix) {
+      String appNameSuffix, boolean keepContainersAcrossApplicationAttempts) {
-        appNameSuffix);
+        appNameSuffix, keepContainersAcrossApplicationAttempts);
+  }
+
+  /**
+   * Register application master for the UAM.
+   *
+   * @param uamId uam Id
+   * @param registerRequest RegisterApplicationMasterRequest
+   * @return register response
+   * @throws YarnException if register fails
+   * @throws IOException if register fails
+   */
+  public RegisterApplicationMasterResponse registerApplicationMaster(
+      String uamId, RegisterApplicationMasterRequest registerRequest)
+      throws YarnException, IOException {
+    if (!this.unmanagedAppMasterMap.containsKey(uamId)) {
+      throw new YarnException("UAM " + uamId + " does not exist");
+    }
+    LOG.info("Registering UAM id {} for application {}", uamId,
+        this.appIdMap.get(uamId));
+    return this.unmanagedAppMasterMap.get(uamId)
+        .registerApplicationMaster(registerRequest);
-   * @param uamId identifier for the UAM
+   * @param uamId uam Id
-   * @param uamId identifier for the UAM
+   * @param uamId uam Id
-    LOG.info("Finishing application for UAM id {} ", uamId);
+    LOG.info("Finishing UAM id {} for application {}", uamId,
+        this.appIdMap.get(uamId));
-      this.attemptIdMap.remove(uamId);
+      this.appIdMap.remove(uamId);
-   * @param uamId identifier for the UAM
+   * @param uamId uam Id

MOV26 INS26 INS26 INS40 UPD40 INS40 INS31 INS31 UPD74 INS44 INS74 UPD42 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS44 INS29 INS83 MOV43 INS42 INS44 MOV44 INS43 INS43 INS8 UPD43 UPD42 INS65 INS65 INS39 INS42 INS21 INS65 INS65 INS43 INS43 INS39 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS25 INS60 INS21 INS54 INS21 INS65 INS39 INS42 INS65 INS65 MOV65 INS65 INS65 INS65 INS43 INS42 INS42 INS42 INS25 INS21 INS41 UPD42 INS42 INS66 INS66 INS68 INS32 UPD66 UPD66 INS42 INS66 INS66 INS68 UPD66 UPD66 UPD66 INS42 INS42 INS74 UPD42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS32 INS8 MOV43 INS59 INS32 INS8 INS12 INS32 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS38 INS8 INS32 INS32 UPD66 UPD66 UPD66 INS42 INS42 INS69 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS69 INS43 INS43 UPD42 INS42 INS42 INS22 INS42 INS42 INS53 INS42 INS32 INS22 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS22 INS42 INS42 INS32 INS43 INS42 INS32 INS53 INS42 INS42 INS45 INS42 INS32 INS32 INS42 INS42 UPD45 INS32 UPD42 UPD42 INS39 INS42 INS42 INS39 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS52 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS52 INS42 INS32 INS32 INS43 INS42 INS21 INS53 INS52 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS14 INS22 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 UPD45 UPD42 INS43 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS43 INS27 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 INS42 INS45 INS42 INS45 INS22 INS42 INS42 INS42 INS45 INS42 INS45 UPD42 INS52 INS42 UPD42 DEL42 DEL66 DEL43 DEL42