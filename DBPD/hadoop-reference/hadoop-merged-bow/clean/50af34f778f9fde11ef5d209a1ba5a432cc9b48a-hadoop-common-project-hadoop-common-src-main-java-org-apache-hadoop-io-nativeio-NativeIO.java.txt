HDFS-5201. NativeIO: consolidate getrlimit into NativeIO#getMemlockLimit. (Contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1523153 13f79535-47bb-0310-9956-ffa450edef68

-    /**
-     * Resource limit types copied from <sys/resource.h>
-     */
-    private static class ResourceLimit {
-      public static final int RLIMIT_CPU        = 0;
-      public static final int RLIMIT_FSIZE      = 1;
-      public static final int RLIMIT_DATA       = 2;
-      public static final int RLIMIT_STACK      = 3;
-      public static final int RLIMIT_CORE       = 4;
-      public static final int RLIMIT_RSS        = 5;
-      public static final int RLIMIT_NPROC      = 6;
-      public static final int RLIMIT_NOFILE     = 7;
-      public static final int RLIMIT_MEMLOCK    = 8;
-      public static final int RLIMIT_AS         = 9;
-      public static final int RLIMIT_LOCKS      = 10;
-      public static final int RLIMIT_SIGPENDING = 11;
-      public static final int RLIMIT_MSGQUEUE   = 12;
-      public static final int RLIMIT_NICE       = 13;
-      public static final int RLIMIT_RTPRIO     = 14;
-      public static final int RLIMIT_RTTIME     = 15;
-      public static final int RLIMIT_NLIMITS    = 16;
-    }
-
-    static native String getrlimit(int limit) throws NativeIOException;
-    /**
-     * Returns the soft limit on the number of bytes that may be locked by the
-     * process in bytes (RLIMIT_MEMLOCK).
-     * 
-     * See the getrlimit(2) man page for more information
-     *  
-     * @return maximum amount of locked memory in bytes
-     */
-    public static long getMemlockLimit() throws IOException {
-      assertCodeLoaded();
-      String strLimit = getrlimit(ResourceLimit.RLIMIT_MEMLOCK);
-      return Long.parseLong(strLimit);
-    }
-
+  /**
+   * Get the maximum number of bytes that can be locked into memory at any
+   * given point.
+   *
+   * @return 0 if no bytes can be locked into memory;
+   *         Long.MAX_VALUE if there is no limit;
+   *         The number of bytes that can be locked into memory otherwise.
+   */
+  public static long getMemlockLimit() {
+    return isAvailable() ? getMemlockLimit0() : 0;
+  }
+
+  private static native long getMemlockLimit0();
+  

INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS83 INS39 INS42 INS65 INS65 INS41 INS66 INS66 INS66 INS66 INS66 INS16 INS32 INS32 INS34 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL55 DEL83 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31