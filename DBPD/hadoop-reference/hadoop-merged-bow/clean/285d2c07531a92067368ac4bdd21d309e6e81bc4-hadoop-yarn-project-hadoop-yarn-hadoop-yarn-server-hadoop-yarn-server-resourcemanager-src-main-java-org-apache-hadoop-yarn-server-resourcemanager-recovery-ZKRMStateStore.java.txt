YARN-8449. RM HA for AM web server HTTPS Support. (Contributed by Robert Kanter)

+import java.security.PrivateKey;
+import java.security.cert.X509Certificate;
+ * |-- PROXY_CA_ROOT
+ *        |----- caCert
+ *        |----- caPrivateKey
+ *
+  private String proxyCARoot;
+    proxyCARoot = getNodePath(zkRootNodePath, PROXY_CA_ROOT);
+    create(proxyCARoot);
-
+    // recover ProxyCAManager state
+    loadProxyCAManagerState(rmState);
+  private void loadProxyCAManagerState(RMState rmState) throws Exception {
+    String caCertPath = getNodePath(proxyCARoot, PROXY_CA_CERT_NODE);
+    String caPrivateKeyPath = getNodePath(proxyCARoot,
+        PROXY_CA_PRIVATE_KEY_NODE);
+
+    if (!exists(caCertPath) || !exists(caPrivateKeyPath)) {
+      LOG.warn("Couldn't find Proxy CA data");
+      return;
+    }
+
+    byte[] caCertData = getData(caCertPath);
+    byte[] caPrivateKeyData = getData(caPrivateKeyPath);
+
+    if (caCertData == null || caPrivateKeyData == null) {
+      LOG.warn("Couldn't recover Proxy CA data");
+      return;
+    }
+
+    rmState.getProxyCAState().setCaCert(caCertData);
+    rmState.getProxyCAState().setCaPrivateKey(caPrivateKeyData);
+  }
+
+  @Override
+  protected void storeProxyCACertState(
+      X509Certificate caCert, PrivateKey caPrivateKey) throws Exception {
+    byte[] caCertData = caCert.getEncoded();
+    byte[] caPrivateKeyData = caPrivateKey.getEncoded();
+
+    String caCertPath = getNodePath(proxyCARoot, PROXY_CA_CERT_NODE);
+    String caPrivateKeyPath = getNodePath(proxyCARoot,
+        PROXY_CA_PRIVATE_KEY_NODE);
+
+    if (exists(caCertPath)) {
+      zkManager.safeSetData(caCertPath, caCertData, -1, zkAcl,
+          fencingNodePath);
+    } else {
+      zkManager.safeCreate(caCertPath, caCertData, zkAcl,
+          CreateMode.PERSISTENT, zkAcl, fencingNodePath);
+    }
+    if (exists(caPrivateKeyPath)) {
+      zkManager.safeSetData(caPrivateKeyPath, caPrivateKeyData, -1, zkAcl,
+          fencingNodePath);
+    } else {
+      zkManager.safeCreate(caPrivateKeyPath, caPrivateKeyData, zkAcl,
+          CreateMode.PERSISTENT, zkAcl, fencingNodePath);
+    }
+  }
+

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS66 INS66 INS66 INS42 INS42 INS21 INS21 INS21 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS25 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS25 INS7 INS32 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS5 INS59 INS5 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS5 INS59 INS5 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS32 INS8 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS38 INS38 INS21 INS41 INS39 INS85 INS42 INS32 INS39 INS85 INS42 INS32 INS27 INS27 INS21 INS41 INS32 INS42 INS42 INS32 INS42 INS42 INS39 INS85 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS34 INS34