HDFS-6134 and HADOOP-10150 subtasks. Merge fs-encryption branch to trunk.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1619197 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.fs.BatchedRemoteIterator.BatchedListEntries;
+import static org.apache.hadoop.hdfs.server.common.HdfsServerConstants.CRYPTO_XATTR_ENCRYPTION_ZONE;
+import static org.apache.hadoop.hdfs.server.common.HdfsServerConstants.CRYPTO_XATTR_FILE_ENCRYPTION_INFO;
+import com.google.protobuf.InvalidProtocolBufferException;
+import org.apache.hadoop.fs.FileEncryptionInfo;
+import org.apache.hadoop.hdfs.XAttrHelper;
+import org.apache.hadoop.hdfs.protocol.EncryptionZoneWithId;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos;
+import org.apache.hadoop.hdfs.protocolPB.PBHelper;
+  private final static String RAW_STRING = "raw";
+  private final static byte[] RAW = DFSUtil.string2Bytes(RAW_STRING);
+  private final XAttr KEYID_XATTR =
+      XAttrHelper.buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, null);
+
-    return this.dirLock.getReadHoldCount() > 0;
+    return this.dirLock.getReadHoldCount() > 0 || hasWriteLock();
+  @VisibleForTesting
+  public final EncryptionZoneManager ezManager;
+
+
+
+    ezManager = new EncryptionZoneManager(this, conf);
+    ezManager.checkMoveValidity(srcIIP, dstIIP, src);
+    ezManager.checkMoveValidity(srcIIP, dstIIP, src);
+    final boolean isRawPath = isReservedRawName(src);
-                targetNode, needLocation, snapshot)}, 0);
+                targetNode, needLocation, snapshot, isRawPath)}, 0);
-            needLocation, snapshot);
+            needLocation, snapshot, isRawPath);
-          Snapshot.CURRENT_STATE_ID);
+          Snapshot.CURRENT_STATE_ID, false);
-   * @param resolveLink whether to throw UnresolvedLinkException 
+   * @param resolveLink whether to throw UnresolvedLinkException
+   * @param isRawPath true if a /.reserved/raw pathname was passed by the user
-  HdfsFileStatus getFileInfo(String src, boolean resolveLink) 
-      throws UnresolvedLinkException {
+  HdfsFileStatus getFileInfo(String src, boolean resolveLink, boolean isRawPath)
+    throws IOException {
+
-          inodesInPath.getPathSnapshotId());
+          inodesInPath.getPathSnapshotId(), isRawPath);
-          HdfsFileStatus.EMPTY_NAME, -1L, 0);
+          HdfsFileStatus.EMPTY_NAME, -1L, 0, null);
+      if (!inode.isSymlink()) {
+        final XAttrFeature xaf = inode.getXAttrFeature();
+        if (xaf != null) {
+          final List<XAttr> xattrs = xaf.getXAttrs();
+          for (XAttr xattr : xattrs) {
+            final String xaName = XAttrHelper.getPrefixName(xattr);
+            if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {
+              ezManager.addEncryptionZone(inode.getId(),
+                  new String(xattr.getValue()));
+            }
+          }
+        }
+      }
+          ezManager.removeEncryptionZone(inode.getId());
+   * @param isRawPath true if this is being called on behalf of a path in
+   *                  /.reserved/raw
-      boolean needLocation, int snapshot) throws IOException {
+      boolean needLocation, int snapshot, boolean isRawPath)
+      throws IOException {
-      return createLocatedFileStatus(path, node, snapshot);
+      return createLocatedFileStatus(path, node, snapshot, isRawPath);
-      return createFileStatus(path, node, snapshot);
+      return createFileStatus(path, node, snapshot, isRawPath);
-       int snapshot) {
+       int snapshot, boolean isRawPath) throws IOException {
-         
+
+     FileEncryptionInfo feInfo = isRawPath ? null :
+         getFileEncryptionInfo(node, snapshot);
+
-        childrenNum);
+        childrenNum,
+        feInfo);
-      INode node, int snapshot) throws IOException {
+      INode node, int snapshot, boolean isRawPath) throws IOException {
+    final FileEncryptionInfo feInfo = isRawPath ? null :
+        getFileEncryptionInfo(node, snapshot);
+
-          inSnapshot);
+          inSnapshot, feInfo);
-        
+
-          node.getId(), loc, childrenNum);
+          node.getId(), loc, childrenNum, feInfo);
+        Preconditions.checkArgument(!KEYID_XATTR.equalsIgnoreValue(filter),
+            "The encryption zone xattr should never be deleted.");
-  
+
+  boolean isInAnEZ(INodesInPath iip)
+      throws UnresolvedLinkException, SnapshotAccessControlException {
+    readLock();
+    try {
+      return ezManager.isInAnEZ(iip);
+    } finally {
+      readUnlock();
+    }
+  }
+
+  String getKeyName(INodesInPath iip) {
+    readLock();
+    try {
+      return ezManager.getKeyName(iip);
+    } finally {
+      readUnlock();
+    }
+  }
+
+  XAttr createEncryptionZone(String src, String keyName)
+    throws IOException {
+    writeLock();
+    try {
+      return ezManager.createEncryptionZone(src, keyName);
+    } finally {
+      writeUnlock();
+    }
+  }
+
+  EncryptionZoneWithId getEZForPath(INodesInPath iip) {
+    readLock();
+    try {
+      return ezManager.getEZINodeForPath(iip);
+    } finally {
+      readUnlock();
+    }
+  }
+
+  BatchedListEntries<EncryptionZoneWithId> listEncryptionZones(long prevId)
+      throws IOException {
+    readLock();
+    try {
+      return ezManager.listEncryptionZones(prevId);
+    } finally {
+      readUnlock();
+    }
+  }
+
+  /**
+   * Set the FileEncryptionInfo for an INode.
+   */
+  void setFileEncryptionInfo(String src, FileEncryptionInfo info)
+      throws IOException {
+    // Make the PB for the xattr
+    final HdfsProtos.FileEncryptionInfoProto proto = PBHelper.convert(info);
+    final byte[] protoBytes = proto.toByteArray();
+    final XAttr fileEncryptionAttr =
+        XAttrHelper.buildXAttr(CRYPTO_XATTR_FILE_ENCRYPTION_INFO, protoBytes);
+    final List<XAttr> xAttrs = Lists.newArrayListWithCapacity(1);
+    xAttrs.add(fileEncryptionAttr);
+
+    writeLock();
+    try {
+      unprotectedSetXAttrs(src, xAttrs, EnumSet.of(XAttrSetFlag.CREATE));
+    } finally {
+      writeUnlock();
+    }
+  }
+
+  /**
+   * Return the FileEncryptionInfo for an INode, or null if the INode is not
+   * an encrypted file.
+   */
+  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId)
+      throws IOException {
+    if (!inode.isFile()) {
+      return null;
+    }
+    readLock();
+    try {
+      List<XAttr> xAttrs = XAttrStorage.readINodeXAttrs(inode, snapshotId);
+      if (xAttrs == null) {
+        return null;
+      }
+      for (XAttr x : xAttrs) {
+        if (XAttrHelper.getPrefixName(x)
+            .equals(CRYPTO_XATTR_FILE_ENCRYPTION_INFO)) {
+          try {
+            HdfsProtos.FileEncryptionInfoProto proto =
+                HdfsProtos.FileEncryptionInfoProto.parseFrom(x.getValue());
+            FileEncryptionInfo feInfo = PBHelper.convert(proto);
+            return feInfo;
+          } catch (InvalidProtocolBufferException e) {
+            throw new IOException("Could not parse file encryption info for " +
+                "inode " + inode, e);
+          }
+        }
+      }
+      return null;
+    } finally {
+      readUnlock();
+    }
+  }
+
-  void unprotectedSetXAttrs(final String src, final List<XAttr> xAttrs,
+  INode unprotectedSetXAttrs(final String src, final List<XAttr> xAttrs,
+
+    /*
+     * If we're adding the encryption zone xattr, then add src to the list
+     * of encryption zones.
+     */
+    for (XAttr xattr : newXAttrs) {
+      final String xaName = XAttrHelper.getPrefixName(xattr);
+      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {
+        ezManager.addEncryptionZone(inode.getId(), new String(xattr.getValue()));
+      }
+    }
+
+    return inode;
+  static boolean isReservedRawName(String src) {
+    return src.startsWith(DOT_RESERVED_PATH_PREFIX +
+        Path.SEPARATOR + RAW_STRING);
+  }
+
-   * Resolve the path of /.reserved/.inodes/<inodeid>/... to a regular path
+   * Resolve a /.reserved/... path to a non-reserved path.
+   * <p/>
+   * There are two special hierarchies under /.reserved/:
+   * <p/>
+   * /.reserved/.inodes/<inodeid> performs a path lookup by inodeid,
+   * <p/>
+   * /.reserved/raw/... returns the encrypted (raw) bytes of a file in an
+   * encryption zone. For instance, if /ezone is an encryption zone, then
+   * /ezone/a refers to the decrypted file and /.reserved/raw/ezone/a refers to
+   * the encrypted (raw) bytes of /ezone/a.
+   * <p/>
+   * Pathnames in the /.reserved/raw directory that resolve to files not in an
+   * encryption zone are equivalent to the corresponding non-raw path. Hence,
+   * if /a/b/c refers to a file that is not in an encryption zone, then
+   * /.reserved/raw/a/b/c is equivalent (they both refer to the same
+   * unencrypted file).
-   * @return if the path indicates an inode, return path after replacing upto
+   * @return if the path indicates an inode, return path after replacing up to
-   *         in {@code src} as is.
+   *         in {@code src} as is. If the path refers to a path in the "raw"
+   *         directory, return the non-raw pathname.
-  static String resolvePath(String src, byte[][] pathComponents, FSDirectory fsd)
+  static String resolvePath(String src, byte[][] pathComponents,
+      FSDirectory fsd) throws FileNotFoundException {
+    final int nComponents = (pathComponents == null) ?
+        0 : pathComponents.length;
+    if (nComponents <= 2) {
+      return src;
+    }
+    if (!Arrays.equals(DOT_RESERVED, pathComponents[1])) {
+      /* This is not a /.reserved/ path so do nothing. */
+      return src;
+    }
+
+    if (Arrays.equals(DOT_INODES, pathComponents[2])) {
+      /* It's a /.reserved/.inodes path. */
+      if (nComponents > 3) {
+        return resolveDotInodesPath(src, pathComponents, fsd);
+      } else {
+        return src;
+      }
+    } else if (Arrays.equals(RAW, pathComponents[2])) {
+      /* It's /.reserved/raw so strip off the /.reserved/raw prefix. */
+      if (nComponents == 3) {
+        return Path.SEPARATOR;
+      } else {
+        return constructRemainingPath("", pathComponents, 3);
+      }
+    } else {
+      /* It's some sort of /.reserved/<unknown> path. Ignore it. */
+      return src;
+    }
+  }
+
+  private static String resolveDotInodesPath(String src,
+      byte[][] pathComponents, FSDirectory fsd)
-    if (pathComponents == null || pathComponents.length <= 3) {
-      return src;
-    }
-    // Not /.reserved/.inodes
-    if (!Arrays.equals(DOT_RESERVED, pathComponents[1])
-        || !Arrays.equals(DOT_INODES, pathComponents[2])) { // Not .inodes path
-      return src;
-    }
-    StringBuilder path = id == INodeId.ROOT_INODE_ID ? new StringBuilder()
-        : new StringBuilder(inode.getFullPathName());
-    for (int i = 4; i < pathComponents.length; i++) {
-      path.append(Path.SEPARATOR).append(DFSUtil.bytes2String(pathComponents[i]));
+    String path = "";
+    if (id != INodeId.ROOT_INODE_ID) {
+      path = inode.getFullPathName();
+    }
+    return constructRemainingPath(path, pathComponents, 4);
+  }
+
+  private static String constructRemainingPath(String pathPrefix,
+      byte[][] pathComponents, int startAt) {
+
+    StringBuilder path = new StringBuilder(pathPrefix);
+    for (int i = startAt; i < pathComponents.length; i++) {
+      path.append(Path.SEPARATOR).append(
+          DFSUtil.bytes2String(pathComponents[i]));
-  private INodesInPath getINodesInPath4Write(String src, boolean resolveLink)
+  INodesInPath getINodesInPath4Write(String src, boolean resolveLink)

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS43 INS59 INS44 INS43 INS8 INS44 INS44 INS43 INS44 MOV60 INS39 INS42 INS44 MOV43 INS43 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS44 INS43 INS8 INS43 INS42 INS44 INS8 INS74 INS42 INS44 INS43 INS8 INS29 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS43 INS42 INS44 INS44 INS43 INS8 INS43 INS83 INS39 INS42 INS44 INS8 MOV29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 UPD42 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS45 INS39 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS21 INS60 INS65 INS39 INS42 INS42 INS25 INS65 INS39 INS42 INS39 INS42 INS42 INS60 INS39 INS42 INS60 INS43 INS42 INS42 INS21 INS54 INS42 INS43 INS42 INS21 INS54 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS54 INS42 INS43 INS42 INS21 INS54 INS43 INS43 INS39 INS42 INS42 INS21 INS54 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS21 INS21 INS54 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS21 INS54 INS42 INS70 INS41 INS43 INS42 INS41 INS42 INS43 INS42 INS5 INS42 INS43 INS42 INS42 INS60 INS25 MOV25 INS25 INS60 INS25 INS41 INS42 INS43 INS42 INS5 INS42 INS39 INS42 INS60 MOV24 MOV25 MOV41 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS27 INS7 INS32 INS32 INS83 INS39 INS59 UPD66 INS42 INS66 MOV62 INS8 INS42 INS66 INS66 INS43 INS59 INS14 INS83 UPD43 MOV43 INS59 INS42 INS32 INS8 INS8 INS42 INS32 INS8 INS8 INS42 INS42 INS32 INS8 INS8 INS42 INS32 INS8 INS8 INS42 INS42 INS32 INS8 INS8 INS66 INS42 INS42 INS83 INS43 INS59 INS83 INS5 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS32 INS32 INS8 INS8 INS66 INS66 INS42 INS38 INS8 INS32 INS8 INS8 INS44 INS42 INS8 INS42 INS42 INS32 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS42 INS39 INS85 INS85 INS42 INS83 INS39 INS59 INS27 MOV8 MOV38 MOV32 INS8 INS25 UPD43 MOV43 INS59 INS27 INS8 INS32 INS42 INS39 INS85 INS85 MOV43 INS59 MOV27 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV21 INS25 INS42 INS42 INS16 MOV43 INS42 MOV32 INS42 INS42 MOV32 MOV32 MOV32 MOV32 MOV32 MOV16 INS42 MOV32 INS42 INS42 UPD42 UPD42 INS16 INS42 MOV14 INS42 INS41 INS21 INS42 INS41 INS21 INS42 INS41 INS21 INS42 INS41 INS21 INS42 INS41 INS21 INS40 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS21 INS32 INS41 INS42 INS60 INS25 INS70 INS41 INS21 INS43 INS42 INS60 INS25 INS42 INS42 INS27 INS42 INS16 INS42 INS34 INS25 INS32 INS8 INS8 UPD42 MOV42 INS45 MOV42 MOV40 INS21 INS42 INS42 INS42 INS34 INS42 MOV14 INS42 INS43 INS52 INS42 INS42 INS42 INS38 INS8 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS33 INS32 INS43 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS32 INS42 INS42 INS33 INS74 INS59 INS27 INS8 INS44 INS42 INS8 INS33 INS32 INS42 INS83 INS43 INS59 INS32 INS8 INS42 INS40 INS42 INS36 INS34 INS40 INS27 INS8 INS8 INS42 INS42 INS42 INS2 INS25 INS41 INS7 INS42 INS42 INS42 INS33 INS32 INS60 INS25 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS41 INS43 INS42 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 MOV27 INS42 INS34 INS41 INS41 INS42 INS34 INS27 INS8 INS8 INS42 INS42 MOV32 INS9 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS8 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS34 INS41 INS41 INS42 INS42 INS32 INS42 INS33 INS60 INS70 INS21 INS42 INS42 INS38 INS45 INS32 INS42 INS42 INS54 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS83 INS74 INS59 INS44 INS42 INS8 INS32 INS32 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS43 INS32 INS42 INS45 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS42 INS60 MOV25 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS60 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS42 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL39 DEL38 DEL27 DEL40 DEL34 DEL27 DEL27 DEL25 DEL27 DEL14 DEL16 DEL59 DEL60 DEL34 DEL83