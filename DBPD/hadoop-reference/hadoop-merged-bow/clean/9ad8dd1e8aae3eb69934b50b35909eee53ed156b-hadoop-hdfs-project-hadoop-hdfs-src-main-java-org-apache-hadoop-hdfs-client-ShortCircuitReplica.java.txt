Merge r1569890 through r1573813 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1573821 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.ShortCircuitShm.Slot;
+   * If non-null, the shared memory slot associated with this replica.
+   */
+  private final Slot slot;
+  
+  /**
-      ShortCircuitCache cache, long creationTimeMs) throws IOException {
+      ShortCircuitCache cache, long creationTimeMs, Slot slot) throws IOException {
+    this.slot = slot;
-    long deltaMs = Time.monotonicNow() - creationTimeMs;
-    long staleThresholdMs = cache.getStaleThresholdMs();
-    if (deltaMs > staleThresholdMs) {
+    if (slot != null) {
+      // Check staleness by looking at the shared memory area we use to
+      // communicate with the DataNode.
+      boolean stale = !slot.isValid();
-        LOG.trace(this + " is stale because it's " + deltaMs +
-            " ms old, and staleThresholdMs = " + staleThresholdMs);
+        LOG.trace(this + ": checked shared memory segment.  isStale=" + stale);
-      return true;
+      return stale;
-      if (LOG.isTraceEnabled()) {
-        LOG.trace(this + " is not stale because it's only " + deltaMs +
-            " ms old, and staleThresholdMs = " + staleThresholdMs);
+      // Fall back to old, time-based staleness method.
+      long deltaMs = Time.monotonicNow() - creationTimeMs;
+      long staleThresholdMs = cache.getStaleThresholdMs();
+      if (deltaMs > staleThresholdMs) {
+        if (LOG.isTraceEnabled()) {
+          LOG.trace(this + " is stale because it's " + deltaMs +
+              " ms old, and staleThresholdMs = " + staleThresholdMs);
+        }
+        return true;
+      } else {
+        if (LOG.isTraceEnabled()) {
+          LOG.trace(this + " is not stale because it's only " + deltaMs +
+              " ms old, and staleThresholdMs = " + staleThresholdMs);
+        }
+        return false;
+    }
+  }
+  
+  /**
+   * Try to add a no-checksum anchor to our shared memory slot.
+   *
+   * It is only possible to add this anchor when the block is mlocked on the Datanode.
+   * The DataNode will not munlock the block until the number of no-checksum anchors
+   * for the block reaches zero.
+   * 
+   * This method does not require any synchronization.
+   *
+   * @return     True if we successfully added a no-checksum anchor.
+   */
+  public boolean addNoChecksumAnchor() {
+    if (slot == null) {
+    return slot.addAnchor();
+  }
+
+  /**
+   * Remove a no-checksum anchor for our shared memory slot.
+   *
+   * This method does not require any synchronization.
+   */
+  public void removeNoChecksumAnchor() {
+    if (slot != null) {
+      slot.removeAnchor();
+    }
-    return ((mmapData != null) && (mmapData instanceof ClientMmap));
+    return ((mmapData != null) && (mmapData instanceof MappedByteBuffer));
-    ClientMmap clientMmap = (ClientMmap)mmapData;
-    NativeIO.POSIX.munmap(clientMmap.getMappedByteBuffer());
+    MappedByteBuffer mmap = (MappedByteBuffer)mmapData;
+    NativeIO.POSIX.munmap(mmap);
+    String suffix = "";
+    
+    refCount = -1;
-    if (hasMmap()) munmap();
+    if (hasMmap()) {
+      munmap();
+      suffix += "  munmapped.";
+    }
+    if (slot != null) {
+      cache.scheduleSlotReleaser(slot);
+      suffix += "  scheduling " + slot + " for later release.";
+    }
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("closed " + this + suffix);
+    }
-  public ClientMmap getOrCreateClientMmap() {
-    return cache.getOrCreateClientMmap(this);
+  public ClientMmap getOrCreateClientMmap(boolean anchor) {
+    return cache.getOrCreateClientMmap(this, anchor);
+  @VisibleForTesting
+  public Slot getSlot() {
+    return slot;
+  }
+

INS26 INS40 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS44 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS42 INS43 INS42 INS21 INS25 INS65 INS65 INS25 INS41 INS65 INS25 INS60 INS21 INS25 INS25 INS39 INS42 INS42 INS42 INS41 INS66 INS42 INS7 INS27 INS8 MOV8 INS66 INS66 INS66 INS66 INS66 INS66 INS27 INS8 INS32 INS66 INS66 INS27 INS8 UPD43 INS43 INS59 INS7 INS8 INS27 INS8 INS32 INS8 INS42 INS22 INS42 INS42 INS33 INS60 INS25 INS41 INS42 INS33 INS41 INS42 INS42 INS42 INS33 INS21 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS45 INS42 INS38 MOV21 INS21 INS42 INS33 INS21 INS21 INS42 INS42 INS21 INS42 INS52 INS42 INS39 INS59 INS32 INS8 INS42 INS9 INS32 UPD43 INS34 INS7 INS32 INS7 INS32 INS42 INS38 INS42 INS42 INS21 INS42 INS42 UPD42 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS32 UPD43 INS45 INS42 INS45 INS45 INS52 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 INS52 INS45 INS42 DEL42 DEL32