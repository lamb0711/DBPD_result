HADOOP-10735. Fall back AesCtrCryptoCodec implementation from OpenSSL to JCE if non native support. (yliu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1610887 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Splitter;
+import com.google.common.collect.Lists;
+
+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_SECURITY_CRYPTO_CODEC_CLASS_DEFAULT;
+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_KEY;
+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_DEFAULT;
+  public static Logger LOG = LoggerFactory.getLogger(CryptoCodec.class);
-    final Class<? extends CryptoCodec> klass = conf.getClass(
-        HADOOP_SECURITY_CRYPTO_CODEC_CLASS_KEY, JceAesCtrCryptoCodec.class, 
-        CryptoCodec.class);
-    return ReflectionUtils.newInstance(klass, conf);
+    List<Class<? extends CryptoCodec>> klasses = getCodecClasses(conf);
+    String name = conf.get(HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_KEY, 
+        HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_DEFAULT);
+    CipherSuite.checkName(name);
+    CryptoCodec codec = null;
+    for (Class<? extends CryptoCodec> klass : klasses) {
+      try {
+        CryptoCodec c = ReflectionUtils.newInstance(klass, conf);
+        if (c.getCipherSuite().getName().equalsIgnoreCase(name)) {
+          if (codec == null) {
+            LOG.debug("Using crypto codec {}.", klass.getName());
+            codec = c;
+          }
+        } else {
+          LOG.warn("Crypto codec {} doesn't meet the cipher suite {}.", 
+              klass.getName(), name);
+        }
+      } catch (Exception e) {
+        LOG.warn("Crypto codec {} is not available.", klass.getName());
+      }
+    }
+    
+    if (codec != null) {
+      return codec;
+    }
+    
+    throw new RuntimeException("No available crypto codec which meets " + 
+        "the cipher suite " + name + ".");
+  }
+  
+  private static List<Class<? extends CryptoCodec>> getCodecClasses(
+      Configuration conf) {
+    List<Class<? extends CryptoCodec>> result = Lists.newArrayList();
+    String codecString = conf.get(HADOOP_SECURITY_CRYPTO_CODEC_CLASS_KEY,
+        HADOOP_SECURITY_CRYPTO_CODEC_CLASS_DEFAULT);
+    for (String c : Splitter.on(',').trimResults().omitEmptyStrings().
+        split(codecString)) {
+      try {
+        Class<?> cls = conf.getClassByName(c);
+        result.add(cls.asSubclass(CryptoCodec.class));
+      } catch (ClassCastException e) {
+        LOG.warn("Class " + c + " is not a CryptoCodec.");
+      } catch (ClassNotFoundException e) {
+        LOG.warn("Crypto codec " + c + " not found.");
+      }
+    }
+    
+    return result;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 MOV42 MOV44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS42 INS42 INS32 INS42 INS60 INS60 INS21 INS60 INS70 INS25 INS53 INS43 INS74 INS43 INS42 INS60 INS60 INS70 MOV41 INS42 INS42 MOV57 INS74 INS59 INS43 INS59 INS32 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS14 INS42 INS43 INS76 INS42 INS74 INS59 INS43 INS59 INS44 INS32 INS8 INS42 INS43 MOV74 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS74 INS42 INS54 INS42 INS33 INS41 INS43 INS27 INS42 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS42 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS76 INS8 INS12 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS43 INS76 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS32 INS42 INS8 INS12 INS12 INS42 INS43 INS60 INS25 INS44 INS8 INS45 INS45 INS42 INS43 INS32 INS42 INS60 INS21 INS44 INS8 INS44 INS8 INS42 MOV43 INS59 INS32 INS8 INS8 INS43 INS42 INS21 INS42 INS42 INS42 INS13 INS74 INS59 INS32 INS43 INS42 INS21 INS43 INS42 INS21 INS42 MOV32 INS32 INS42 INS42 INS25 INS21 INS42 INS32 INS43 INS76 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS27 INS8 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV57 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS45 INS32 INS42 INS42 INS42 UPD43 INS45 INS42 INS45 INS45 INS42 INS45 INS32 INS7 INS42 INS42 UPD42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31