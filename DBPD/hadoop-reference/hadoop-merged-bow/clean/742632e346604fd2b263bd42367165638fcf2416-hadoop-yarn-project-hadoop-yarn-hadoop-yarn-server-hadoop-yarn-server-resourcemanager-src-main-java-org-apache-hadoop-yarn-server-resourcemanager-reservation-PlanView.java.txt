YARN-4358. Reservation System: Improve relationship between SharingPolicy and ReservationAgent. (Carlo Curino via asuresh)

+import org.apache.hadoop.yarn.server.resourcemanager.reservation.exceptions.PlanningException;
+   * Return a set of {@link ReservationAllocation} that belongs to a certain
+   * user and overlaps time t.
+   *
+   * @param user the user being considered
+   * @param t the instant in time being considered
+   * @return {@link Set<ReservationAllocation>} for this user at this time
+   */
+  public Set<ReservationAllocation> getReservationByUserAtTime(String user,
+      long t);
+
+  /**
-   * Returns the total {@link Resource} reserved for a given user at the
-   * specified time
-   * 
-   * @param user the user who made the reservation(s)
-   * @param tick the time (UTC in ms) for which the reserved resources are
-   *          requested
-   * @return the total {@link Resource} reserved for a given user at the
-   *         specified time
-   */
-  public Resource getConsumptionForUser(String user, long tick);
-
-  /**
-   * 
+   *
+  /**
+   * This method returns the amount of resources available to a given user
+   * (optionally if removing a certain reservation) over the start-end time
+   * range.
+   *
+   * @param user
+   * @param oldId
+   * @param start
+   * @param end
+   * @return a view of the plan as it is available to this user
+   * @throws PlanningException
+   */
+  public RLESparseResourceAllocation getAvailableResourceOverTime(String user,
+      ReservationId oldId, long start, long end) throws PlanningException;
+
+  /**
+   * This method returns a RLE encoded view of the user reservation count
+   * utilization between start and end time.
+   *
+   * @param user
+   * @param start
+   * @param end
+   * @return RLE encoded view of reservation used over time
+   */
+  public RLESparseResourceAllocation getReservationCountForUserOverTime(
+      String user, long start, long end);
+
+  /**
+   * This method returns a RLE encoded view of the user reservation utilization
+   * between start and end time.
+   *
+   * @param user
+   * @param start
+   * @param end
+   * @return RLE encoded view of resources used over time
+   */
+  public RLESparseResourceAllocation getConsumptionForUserOverTime(String user,
+      long start, long end);
+

INS26 MOV31 INS40 INS31 INS31 INS31 INS74 UPD42 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS39 INS42 UPD66 UPD66 UPD66 UPD66 UPD42 UPD66 UPD66 UPD66 INS42 UPD42 MOV42 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS66 INS42 INS42 INS42 INS66 INS66 INS42 INS42 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS66 INS42 UPD42 INS66 DEL66 DEL42 DEL66 DEL43