YARN-5883 Avoid or eliminate expensive YARN get all applications call. Contributed by Gour Saha

+import java.util.Collections;
+import java.util.EnumSet;
+    return listDeployedInstances(user, null);
+  }
+
+  /**
+   * List Slider <i>deployed</i>instances belonging to a specific user in a
+   * given set of states.
+   * <p>
+   * Deployed means: known about in the YARN cluster; it will include all apps
+   * in the specified set of states.
+   *
+   * @param user
+   *          user: "" means all users
+   * @param appStates
+   *          filter by a set of YarnApplicationState
+   * @return a possibly empty list of Slider AMs
+   * @throws YarnException
+   * @throws IOException
+   */
+  public List<ApplicationReport> listDeployedInstances(String user,
+      EnumSet<YarnApplicationState> appStates)
+      throws YarnException, IOException {
+    return listDeployedInstances(user, appStates, null);
+  }
+
+  /**
+   * List Slider <i>deployed</i>instances belonging to a specific user in a
+   * given set of states and filtered by an application name tag.
+   * <p>
+   * Deployed means: known about in the YARN cluster; it will include all apps
+   * in the specified set of states and tagged with the specified app name.
+   *
+   * @param user
+   *          user: "" means all users
+   * @param appStates
+   *          filter by a set of YarnApplicationState
+   * @param appname
+   *          an application name tag in the format defined by
+   *          {@link SliderUtils#createNameTag(String)}
+   * @return a possibly empty list of Slider AMs
+   * @throws YarnException
+   * @throws IOException
+   */
+  public List<ApplicationReport> listDeployedInstances(String user,
+      EnumSet<YarnApplicationState> appStates, String appname)
+      throws YarnException, IOException {
-    List<ApplicationReport> allApps = getApplications(types);
+    Set<String> tags = null;
+    if (appname != null) {
+      tags = Collections.singleton(SliderUtils.createNameTag(appname));
+    }
+    List<ApplicationReport> allApps = getApplications(types, appStates, tags);
-  public List<ApplicationReport> findAllInstances(String user,
-                                                  String appname)
+  public List<ApplicationReport> findAllInstances(String user, String appname)
-    List<ApplicationReport> instances = listDeployedInstances(user);
-    List<ApplicationReport> results =
-      new ArrayList<>(instances.size());
-    for (ApplicationReport report : instances) {
-      if (report.getName().equals(appname)) {
-        results.add(report);
-      }
-    }
-    return results;
+    return listDeployedInstances(user, null, appname);
-      Collection<ApplicationReport> instances = listDeployedInstances(user);
+      Collection<ApplicationReport> instances = listDeployedInstances(user,
+          SliderUtils.getAllLiveAppStates());
-        if (isApplicationLive(instance)) {
-          ApplicationId appId = instance.getApplicationId();
-          log.info("Killing Application {}", appId);
-
-          killRunningApplication(appId, "forced kill");
-        }
+        ApplicationId appId = instance.getApplicationId();
+        log.info("Killing Application {}", appId);
+        killRunningApplication(appId, "forced kill");
-                                                      String appname) throws
-                                                                      YarnException,
-                                                                      IOException {
+      String appname) throws YarnException, IOException {
-    List<ApplicationReport> instances = listDeployedInstances(user);
-    List<ApplicationReport> results =
-      new ArrayList<ApplicationReport>(instances.size());
-    for (ApplicationReport app : instances) {
-      if (app.getName().equals(appname)
-          && isApplicationLive(app)) {
-        results.add(app);
-      }
-    }
-    return results;
+    return listDeployedInstances(user, SliderUtils.getAllLiveAppStates(),
+        appname);

INS26 INS26 INS40 INS40 INS31 INS31 MOV29 INS83 MOV74 INS42 INS44 INS43 INS43 INS8 INS29 INS83 MOV74 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS44 INS44 MOV8 INS43 INS42 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS60 INS25 INS41 MOV21 INS25 INS41 INS42 INS32 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS43 INS43 INS32 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS42 INS43 INS43 INS42 INS74 INS59 INS27 INS8 MOV74 INS32 MOV32 MOV8 MOV8 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS68 INS42 INS42 INS43 INS43 INS42 INS33 INS42 INS33 INS21 MOV42 MOV42 INS33 MOV42 MOV60 MOV21 INS60 INS70 MOV42 MOV42 MOV32 MOV42 INS42 INS42 INS69 INS42 INS42 INS7 INS42 INS42 MOV74 INS59 MOV44 INS42 MOV8 UPD42 UPD42 INS43 INS42 INS32 INS42 INS32 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL32 DEL25 DEL42 DEL70 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41