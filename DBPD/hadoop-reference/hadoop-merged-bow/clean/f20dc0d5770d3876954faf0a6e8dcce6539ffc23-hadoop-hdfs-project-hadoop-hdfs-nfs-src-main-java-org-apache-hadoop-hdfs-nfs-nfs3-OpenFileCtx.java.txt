HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.
Contributed by Andras Bokor.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  public static final Log LOG = LogFactory.getLog(OpenFileCtx.class);
+  public static final Logger LOG = LoggerFactory.getLogger(OpenFileCtx.class);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Update nonSequentialWriteInMemory by " + count + " new value: "
-          + newValue);
-    }
+    LOG.debug("Update nonSequentialWriteInMemory by {} new value: {}",
+        count, newValue);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Do nothing, dump is disabled.");
-      }
+      LOG.debug("Do nothing, dump is disabled.");
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Asking dumper to dump...");
-        }
+        LOG.debug("Asking dumper to dump...");
-        LOG.info("Create dump file: " + dumpFilePath);
+        LOG.info("Create dump file: {}", dumpFilePath);
-          LOG.error("Got failure when creating dump stream " + dumpFilePath, e);
+          LOG.error("Got failure when creating dump stream {}",
+              dumpFilePath, e);
-              LOG.error("Can't close dump stream " + dumpFilePath, e);
+              LOG.error("Can't close dump stream {}", dumpFilePath, e);
-          LOG.error("Can't get random access to file " + dumpFilePath);
+          LOG.error("Can't get random access to file {}", dumpFilePath);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Start dump. Before dump, nonSequentialWriteInMemory == "
-            + nonSequentialWriteInMemory.get());
-      }
+      LOG.debug("Start dump. Before dump, nonSequentialWriteInMemory == {}",
+            nonSequentialWriteInMemory.get());
-          LOG.error("Dump data failed: " + writeCtx + " with error: " + e
-              + " OpenFileCtx state: " + activeState);
+          LOG.error("Dump data failed: {} OpenFileCtx state: {}",
+              writeCtx, activeState, e);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("After dump, nonSequentialWriteInMemory == "
-            + nonSequentialWriteInMemory.get());
-      }
+      LOG.debug("After dump, nonSequentialWriteInMemory == {}",
+          nonSequentialWriteInMemory.get());
-                if (LOG.isDebugEnabled()) {
-                  LOG.debug("Dumper woke up");
-                }
+                LOG.debug("Dumper woke up");
-                LOG.info("Dumper is interrupted, dumpFilePath= "
-                    + OpenFileCtx.this.dumpFilePath);
+                LOG.info("Dumper is interrupted, dumpFilePath = {}",
+                    OpenFileCtx.this.dumpFilePath);
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("Dumper checking OpenFileCtx activeState: " + activeState
-                + " enabledDump: " + enabledDump);
-          }
+          LOG.debug("Dumper checking OpenFileCtx activeState: {} " +
+              "enabledDump: {}", activeState, enabledDump);
-          LOG.info("Dumper get Throwable: " + t + ". dumpFilePath: "
-              + OpenFileCtx.this.dumpFilePath, t);
+          LOG.info("Dumper got Throwable. dumpFilePath: {}",
+              OpenFileCtx.this.dumpFilePath, t);
-        LOG.warn("Got a repeated request, same range, with a different xid: "
-            + xid + " xid in old request: " + writeCtx.getXid());
+        LOG.warn("Got a repeated request, same range, with a different xid: " +
+            "{} xid in old request: {}", xid, writeCtx.getXid());
-      LOG.info("OpenFileCtx is inactive, fileId: "
-          + request.getHandle().dumpFileHandle());
+      LOG.info("OpenFileCtx is inactive, fileId: {}",
+          request.getHandle().dumpFileHandle());
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("Repeated write request which hasn't been served: xid="
-                + xid + ", drop it.");
-          }
+          LOG.debug("Repeated write request which hasn't been served: " +
+                    "xid={}, drop it.", xid);
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("Repeated write request which is already served: xid="
-                + xid + ", resend response.");
-          }
+          LOG.debug("Repeated write request which is already served: xid={}" +
+              ", resend response.", xid);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug(String.format("Got overwrite with appended data [%d-%d),"
-          + " current offset %d," + " drop the overlapped section [%d-%d)"
-          + " and append new data [%d-%d).", offset, (offset + count),
-          cachedOffset, offset, cachedOffset, cachedOffset, (offset
-              + count)));
-    }
+    LOG.debug("Got overwrite with appended data [{}-{}),"
+            + " current offset {}," + " drop the overlapped section [{}-{})"
+            + " and append new data [{}-{}).", offset, (offset + count),
+            cachedOffset, offset, cachedOffset, cachedOffset,
+        (offset + count));
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("requested offset=" + offset + " and current offset="
-          + cachedOffset);
-    }
+    LOG.debug("requested offset={} and current offset={}",
+        offset, cachedOffset);
-      LOG.warn("(offset,count,nextOffset): " + "(" + offset + "," + count + ","
-          + nextOffset + ")");
+      LOG.warn("(offset,count,nextOffset): ({},{},{})",
+          offset, count, nextOffset);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Add new write to the list with nextOffset " + cachedOffset
-            + " and requested offset=" + offset);
-      }
+      LOG.debug("Add new write to the list with nextOffset {}" +
+          " and requested offset={}", cachedOffset, offset);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("New write buffered with xid " + xid + " nextOffset "
-              + cachedOffset + " req offset=" + offset + " mapsize="
-              + pendingWrites.size());
-        }
+        LOG.debug("New write buffered with xid {} nextOffset {}" +
+            "req offset={} mapsize={}",
+            xid, cachedOffset, offset, pendingWrites.size());
-        LOG.warn("Got a repeated request, same range, with xid: " + xid
-            + " nextOffset " + +cachedOffset + " req offset=" + offset);
+        LOG.warn("Got a repeated request, same range, with xid: " +
+            "{} nextOffset {} req offset={}", xid, cachedOffset, offset);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Process perfectOverWrite");
-      }
+      LOG.debug("Process perfectOverWrite");
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Trigger the write back task. Current nextOffset: "
-              + nextOffset.get());
-        }
+        LOG.debug("Trigger the write back task. Current nextOffset: {}",
+            nextOffset.get());
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("The write back thread is working.");
-        }
+        LOG.debug("The write back thread is working.");
-          LOG.info("Have to change stable write to unstable write: "
-              + request.getStableHow());
+          LOG.info("Have to change stable write to unstable write: {}",
+              request.getStableHow());
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("UNSTABLE write request, send response for offset: "
-              + writeCtx.getOffset());
-        }
+        LOG.debug("UNSTABLE write request, send response for offset: {}",
+            writeCtx.getOffset());
-      LOG.info("hsync failed when processing possible perfect overwrite, path="
-          + path + " error: " + e);
+      LOG.info("hsync failed when processing possible perfect overwrite, " +
+              "path={} error: {}", path, e.toString());
-        LOG.error("Can't read back " + count + " bytes, partial read size: "
-            + readCount);
+        LOG.error("Can't read back {} bytes, partial read size: {}",
+            count, readCount);
-      LOG.info("Read failed when processing possible perfect overwrite, path="
-          + path, e);
+      LOG.info("Read failed when processing possible perfect overwrite, " +
+              "path={}", path, e);
-      IOUtils.cleanup(LOG, fis);
+      IOUtils.cleanupWithLogger(LOG, fis);
-        LOG.info("Got error when processing perfect overwrite, path=" + path
-            + " error: " + e);
+        LOG.info("Got error when processing perfect overwrite, path={} " +
+            "error: {}", path, e.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Got commit status: " + ret.name());
-    }
+    LOG.debug("Got commit status: {}", ret.name());
-        LOG.error("Got stream error during data sync: " + e);
+        LOG.error("Got stream error during data sync", e);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("return COMMIT_SPECIAL_WAIT");
-    }
+    LOG.debug("return COMMIT_SPECIAL_WAIT");
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("getFlushedOffset=" + flushed + " commitOffset=" + commitOffset
-          + "nextOffset=" + nextOffset.get());
-    }
+    LOG.debug("getFlushedOffset={} commitOffset={} nextOffset={}",
+        flushed, commitOffset, nextOffset.get());
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("get commit while still writing to the requested offset,"
-                + " with empty queue");
-          }
+          LOG.debug("get commit while still writing to the requested offset,"
+              + " with empty queue");
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("get commit while still writing to the requested offset");
-        }
+        LOG.debug("get commit while still writing to the requested offset");
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("return COMMIT_SPECIAL_SUCCESS");
-          }
+          LOG.debug("return COMMIT_SPECIAL_SUCCESS");
-        LOG.debug("stream can be closed for fileId: "
-            + handle.dumpFileHandle());
+        LOG.debug("stream can be closed for fileId: {}",
+            handle.dumpFileHandle());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("The async write task has no pending writes, fileId: "
-            + latestAttr.getFileId());
-      }
+      LOG.debug("The async write task has no pending writes, fileId: {}",
+          latestAttr.getFileId());
-    if (LOG.isTraceEnabled()) {
-      LOG.trace("range.getMin()=" + range.getMin() + " nextOffset="
-          + nextOffset);
-    }
+    LOG.trace("range.getMin()={} nextOffset={}",
+        range.getMin(), nextOffset);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("The next sequential write has not arrived yet");
-      }
+      LOG.debug("The next sequential write has not arrived yet");
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Remove write " + range.toString()
-            + " which is already written from the list");
-      }
+      LOG.debug("Remove write {} which is already written from the list",
+          range);
-      LOG.warn("Got an overlapping write " + range.toString()
-          + ", nextOffset=" + offset
-          + ". Remove and trim it");
+      LOG.warn("Got an overlapping write {}, nextOffset={}. " +
+          "Remove and trim it", range, offset);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Change nextOffset (after trim) to " + nextOffset.get());
-      }
+      LOG.debug("Change nextOffset (after trim) to {}", nextOffset.get());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Remove write " + range.toString()
-            + " from the list");
-      }
+      LOG.debug("Remove write {} from the list", range);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Change nextOffset to " + nextOffset.get());
-      }
+      LOG.debug("Change nextOffset to {}", nextOffset.get());
-      if (!activeState && LOG.isDebugEnabled()) {
-        LOG.debug("The openFileCtx is not active anymore, fileId: "
-            + latestAttr.getFileId());
+      if (!activeState) {
+        LOG.debug("The openFileCtx is not active anymore, fileId: {}",
+            latestAttr.getFileId());
-          LOG.info("Another async task is already started before this one"
-              + " is finalized. fileId: " + latestAttr.getFileId()
-              + " asyncStatus: " + asyncStatus + " original startOffset: "
-              + startOffset + " new startOffset: " + asyncWriteBackStartOffset
-              + ". Won't change asyncStatus here.");
+          LOG.info("Another async task is already started before this one " +
+                  "is finalized. fileId: {} asyncStatus: {} " +
+                  "original startOffset: {} " +
+                  "new startOffset: {}. Won't change asyncStatus here.",
+              latestAttr.getFileId(), asyncStatus,
+              startOffset, asyncWriteBackStartOffset);
-        LOG.error("Can't sync for fileId: " + latestAttr.getFileId()
-            + ". Channel closed with writes pending.", cce);
+        LOG.error("Can't sync for fileId: {}. " +
+            "Channel closed with writes pending", latestAttr.getFileId(), cce);
-      LOG.error("After sync, the expect file size: " + offset
-          + ", however actual file size is: " + latestAttr.getSize());
+      LOG.error("After sync, the expect file size: {}, " +
+          "however actual file size is: {}", offset, latestAttr.getSize());
-      
+
-        LOG.debug("FileId: " + latestAttr.getFileId() + " Service time: "
-            + Nfs3Utils.getElapsedTime(commit.startTime)
-            + "ns. Sent response for commit: " + commit);
+        LOG.debug("FileId: {} Service time: {}ns. " +
+                "Sent response for commit: {}", latestAttr.getFileId(),
+            Nfs3Utils.getElapsedTime(commit.startTime), commit);
-      LOG.debug("do write, fileHandle " + handle.dumpFileHandle() + " offset: "
-          + offset + " length: " + count + " stableHow: " + stableHow.name());
+      LOG.debug("do write, fileHandle {} offset: {} length: {} stableHow: {}",
+          handle.dumpFileHandle(), offset, count, stableHow.name());
-              LOG.debug("After writing " + handle.dumpFileHandle()
-                  + " at offset " + offset
-                  + ", updated the memory count, new value: "
-                  + nonSequentialWriteInMemory.get());
+              LOG.debug("After writing {} at offset {}, " +
+                      "updated the memory count, new value: {}",
+                  handle.dumpFileHandle(), offset,
+                  nonSequentialWriteInMemory.get());
-          LOG.info("Do sync for stable write: " + writeCtx);
+          LOG.info("Do sync for stable write: {}", writeCtx);
-            LOG.error("hsync failed with writeCtx: " + writeCtx, e);
+            LOG.error("hsync failed with writeCtx: {}", writeCtx, e);
-          LOG.warn("Return original count: " + writeCtx.getOriginalCount()
-              + " instead of real data count: " + count);
+          LOG.warn("Return original count: {} instead of real data count: {}",
+              writeCtx.getOriginalCount(), count);
-      LOG.error("Error writing to fileHandle " + handle.dumpFileHandle()
-          + " at offset " + offset + " and length " + count, e);
+      LOG.error("Error writing to fileHandle {} at offset {} and length {}",
+          handle.dumpFileHandle(), offset, count, e);
-      LOG.info("Clean up open file context for fileId: "
-          + latestAttr.getFileId());
+      LOG.info("Clean up open file context for fileId: {}",
+          latestAttr.getFileId());
-      LOG.info("Can't close stream for fileId: " + latestAttr.getFileId()
-          + ", error: " + e);
+      LOG.info("Can't close stream for fileId: {}, error: {}",
+          latestAttr.getFileId(), e.toString());
-    LOG.info("There are " + pendingWrites.size() + " pending writes.");
+    LOG.info("There are {} pending writes.", pendingWrites.size());
-      LOG.info("Fail pending write: " + key.toString()
-          + ", nextOffset=" + nextOffset.get());
+      LOG.info("Fail pending write: {}, nextOffset={}", key, nextOffset.get());
-        LOG.error("Failed to close outputstream of dump file" + dumpFilePath, e);
+        LOG.error("Failed to close outputstream of dump file {}",
+            dumpFilePath, e);
-        LOG.error("Failed to delete dumpfile: " + dumpFile);
+        LOG.error("Failed to delete dumpfile: {}", dumpFile);

MOV26 MOV26 UPD40 UPD40 UPD43 UPD42 MOV21 MOV25 MOV8 MOV21 MOV21 MOV21 MOV21 MOV21 MOV25 MOV21 UPD42 UPD42 MOV38 MOV21 MOV21 INS61 INS12 MOV12 MOV32 INS45 INS42 INS42 INS41 MOV27 MOV8 MOV27 MOV42 MOV36 MOV42 MOV42 MOV42 MOV42 MOV36 INS45 INS42 INS42 MOV21 MOV21 MOV44 INS8 INS45 MOV32 INS45 INS42 INS42 MOV32 MOV21 INS45 MOV32 INS42 MOV21 MOV8 MOV44 INS45 MOV32 INS45 MOV32 INS45 MOV32 INS54 UPD45 UPD45 UPD45 UPD45 MOV8 INS21 MOV41 INS8 INS42 MOV8 MOV32 MOV21 MOV38 MOV21 MOV8 INS12 INS45 MOV32 INS45 INS42 INS42 INS42 INS27 INS42 INS42 MOV21 MOV21 MOV21 INS32 INS21 MOV41 UPD42 MOV44 MOV8 INS25 MOV8 INS45 MOV32 MOV21 MOV21 MOV21 MOV21 INS42 MOV32 INS45 MOV32 INS42 INS42 MOV32 INS45 MOV42 MOV32 MOV44 INS45 INS42 MOV25 INS51 INS21 MOV44 INS8 MOV8 UPD45 MOV45 INS45 INS42 INS42 INS27 INS42 INS32 INS32 INS27 INS42 INS42 MOV27 MOV8 MOV8 MOV41 INS45 MOV42 UPD45 UPD45 INS45 MOV32 INS42 INS42 INS45 MOV32 INS45 MOV32 INS32 MOV52 MOV8 INS32 MOV51 MOV21 MOV21 INS42 MOV32 MOV21 INS27 INS42 INS42 INS42 MOV32 INS27 INS42 INS42 INS42 INS45 MOV32 INS45 MOV32 INS45 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 UPD45 MOV45 INS45 INS41 MOV41 MOV8 INS45 MOV32 INS27 MOV42 INS42 INS45 MOV32 INS45 MOV42 INS45 MOV32 INS45 MOV32 INS27 MOV32 MOV32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS25 INS42 INS42 INS27 INS42 INS42 UPD45 UPD45 MOV45 INS45 MOV45 INS45 UPD42 INS42 INS32 INS45 INS42 MOV32 MOV40 MOV41 UPD45 MOV45 INS45 MOV32 UPD45 MOV45 UPD45 MOV45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 MOV27 MOV8 INS45 INS45 UPD42 INS45 MOV22 INS42 INS42 INS42 INS45 MOV32 UPD45 UPD45 INS42 INS42 INS27 MOV32 INS42 INS42 INS42 UPD45 UPD45 INS45 INS42 INS45 MOV32 INS42 MOV21 INS54 UPD45 UPD45 UPD45 UPD45 MOV45 UPD45 MOV45 INS45 INS45 MOV8 INS12 UPD42 MOV42 MOV21 MOV44 INS8 INS45 INS42 INS21 MOV32 INS42 MOV32 INS45 INS42 INS32 UPD45 UPD45 MOV42 UPD42 MOV42 INS45 MOV22 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL32 DEL25 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL25 DEL45 DEL42 DEL45 DEL42 DEL27 DEL51 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL61 DEL8 DEL42 DEL45 DEL27 DEL42 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL45 DEL27 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL45 DEL42 DEL38 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL25 DEL8 DEL45 DEL27 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL42 DEL32 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL45 DEL27 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL32 DEL45 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL32 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL27 DEL45 DEL27 DEL27 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL45 DEL42 DEL27 DEL45 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL45 DEL42 DEL27 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL45 DEL42 DEL27 DEL45 DEL45 DEL27 DEL45 DEL42 DEL32 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27