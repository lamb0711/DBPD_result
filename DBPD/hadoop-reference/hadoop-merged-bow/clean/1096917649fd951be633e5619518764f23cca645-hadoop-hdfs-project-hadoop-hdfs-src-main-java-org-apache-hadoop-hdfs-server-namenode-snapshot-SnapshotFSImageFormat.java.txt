HDFS-4611. Update FSImage for INodeReference.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1463332 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.DataInputStream;
-import java.io.DataOutputStream;
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.util.HashMap;
+import java.util.Map;
-import org.apache.hadoop.hdfs.server.namenode.FSDirectory;
+import org.apache.hadoop.hdfs.server.namenode.INodeReference;
-import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot.Root;
+import org.apache.hadoop.hdfs.tools.snapshot.SnapshotDiff;
+import com.google.common.base.Preconditions;
+
-
-   * @param out The {@link DataOutputStream} to write.
+   * @param out The {@link DataOutput} to write.
-      DataOutputStream out) throws IOException {
+      DataOutput out) throws IOException {
-    for (Snapshot ss : snapshots) {
-      // write the snapshot
-      ss.write(out);
+    for (Snapshot s : snapshots) {
+      // write the snapshot id
+      out.writeInt(s.getId());
-   * @param out The {@link DataOutputStream} to write.
+   * @param out The {@link DataOutput} to write.
-      final DataOutputStream out) throws IOException {
+      final DataOutput out, ReferenceMap referenceMap) throws IOException {
-        list.get(i).write(out);
+        list.get(i).write(out, referenceMap);
-      final DataOutputStream out) throws IOException {
+      final DataOutput out, final ReferenceMap referenceMap
+      ) throws IOException {
-        ((INodeDirectoryWithSnapshot)dir).getDiffs(): null, out);
+        ((INodeDirectoryWithSnapshot)dir).getDiffs(): null, out, referenceMap);
-      final DataOutputStream out) throws IOException {
+      final DataOutput out) throws IOException {
-        ((FileWithSnapshot)file).getDiffs(): null, out);
+        ((FileWithSnapshot)file).getDiffs(): null, out, null);
-  public static FileDiffList loadFileDiffList(DataInputStream in,
+  public static FileDiffList loadFileDiffList(DataInput in,
-  private static FileDiff loadFileDiff(FileDiff posterior, DataInputStream in,
+  private static FileDiff loadFileDiff(FileDiff posterior, DataInput in,
-    Snapshot snapshot = findSnapshot(FSImageSerialization.readString(in),
-        loader.getFSDirectoryInLoading());
+    final Snapshot snapshot = loader.getSnapshot(in);
-   * @param in The {@link DataInputStream} to read.
+   * @param in The {@link DataInput} to read.
-      DataInputStream in) throws IOException {
+      DataInput in) throws IOException {
-      byte[] createdNodeName = new byte[in.readShort()];
-      in.readFully(createdNodeName);
+      byte[] createdNodeName = FSImageSerialization.readLocalName(in);
-   * @param in The {@link DataInputStream} to read.
+   * @param in The {@link DataInput} to read.
-      List<INode> createdList, DataInputStream in, FSImageFormat.Loader loader)
+      List<INode> createdList, DataInput in, FSImageFormat.Loader loader)
-   * @param in The {@link DataInputStream} instance to read.
+   * @param in The {@link DataInput} instance to read.
-      DataInputStream in, FSImageFormat.Loader loader) throws IOException {
+      DataInput in, FSImageFormat.Loader loader) throws IOException {
-      Snapshot ss = loadSnapshot(snapshottableParent, in, loader);
-      snapshottableParent.addSnapshot(ss);
+      final Snapshot s = loader.getSnapshot(in);
+      s.getRoot().setParent(snapshottableParent);
+      snapshottableParent.addSnapshot(s);
-   * Load a {@link Snapshot} from fsimage.
-   * @param parent The directory that the snapshot belongs to.
-   * @param in The {@link DataInputStream} instance to read.
-   * @param loader The {@link Loader} instance that this loading procedure is 
-   *               using.
-   * @return The snapshot.
-   */
-  private static Snapshot loadSnapshot(INodeDirectorySnapshottable parent,
-      DataInputStream in, FSImageFormat.Loader loader) throws IOException {
-    int snapshotId = in.readInt();
-    final INode root = loader.loadINodeWithLocalName(false, in);
-    return new Snapshot(snapshotId, root.asDirectory(), parent);
-  }
-  
-  /**
-   * @param in The {@link DataInputStream} instance to read.
+   * @param in The {@link DataInput} instance to read.
-      DataInputStream in, FSImageFormat.Loader loader) throws IOException {
+      DataInput in, FSImageFormat.Loader loader) throws IOException {
-   * Use the given full path to a {@link Root} directory to find the
-   * associated snapshot.
-   */
-  private static Snapshot findSnapshot(String sRootFullPath, FSDirectory fsdir)
-      throws IOException {
-    // find the root
-    INode root = fsdir.getINode(sRootFullPath);
-    INodeDirectorySnapshottable snapshotRoot = INodeDirectorySnapshottable
-        .valueOf(root.getParent(), root.getParent().getFullPathName());
-    // find the snapshot
-    return snapshotRoot.getSnapshot(root.getLocalNameBytes());
-  }
-  
-  /**
-   * @param in The {@link DataInputStream} to read.
+   * @param in The {@link DataInput} to read.
-      Snapshot snapshot, DataInputStream in, FSImageFormat.Loader loader)
+      Snapshot snapshot, DataInput in, FSImageFormat.Loader loader)
-   * @param in The {@link DataInputStream} instance to read.
+   * @param in The {@link DataInput} instance to read.
-      INodeDirectoryWithSnapshot parent, DataInputStream in,
+      INodeDirectoryWithSnapshot parent, DataInput in,
-    Snapshot snapshot = findSnapshot(FSImageSerialization.readString(in),
-        loader.getFSDirectoryInLoading());
+    final Snapshot snapshot = loader.getSnapshot(in);
+
+  /** A reference with a fixed id for fsimage serialization. */
+  private static class INodeReferenceWithId extends INodeReference {
+    final long id;
+
+    private INodeReferenceWithId(WithCount parent, INode referred, long id) {
+      super(parent, referred);
+      this.id = id;
+    }
+    
+    /** @return the reference id. */
+    private long getReferenceId() {
+      return id;
+    }
+  }
+
+  /** A reference map for fsimage serialization. */
+  public static class ReferenceMap {
+    private final Map<Long, INodeReference.WithCount> referenceMap
+        = new HashMap<Long, INodeReference.WithCount>();
+    private long referenceId = 0;
+
+    public void writeINodeReferenceWithCount(INodeReference.WithCount withCount,
+        DataOutput out, boolean writeUnderConstruction) throws IOException {
+      final INode referred = withCount.getReferredINode();
+      final boolean firstReferred = !(referred instanceof INodeReferenceWithId);
+      out.writeBoolean(firstReferred);
+
+      if (firstReferred) {
+        FSImageSerialization.saveINode2Image(referred, out,
+            writeUnderConstruction, this);
+        final long id = ++referenceId;
+        referenceMap.put(id, withCount);
+
+        final INodeReferenceWithId withId = new INodeReferenceWithId(
+            withCount, referred, id);
+        withCount.setReferredINode(withId);
+        referred.setParentReference(withId);
+      } else {
+        final long id = ((INodeReferenceWithId)referred).getReferenceId();
+        Preconditions.checkState(referenceMap.containsKey(id));
+        out.writeLong(id);
+      }
+    }
+    
+    public INodeReference.WithCount loadINodeReferenceWithCount(
+        boolean isSnapshotINode, DataInput in, FSImageFormat.Loader loader
+        ) throws IOException {
+      final boolean firstReferred = in.readBoolean();
+
+      final INodeReference.WithCount withCount;
+      if (firstReferred) {
+        final INode referred = loader.loadINodeWithLocalName(isSnapshotINode, in);
+        withCount = new INodeReference.WithCount(null, referred);
+        referenceMap.put(++referenceId, withCount);
+      } else {
+        final long id = in.readLong();
+        withCount = referenceMap.get(id);
+        withCount.incrementReferenceCount();
+      }
+      return withCount;
+    }
+    
+    public void removeAllINodeReferenceWithId() {
+      for(INodeReference.WithCount withCount : referenceMap.values()) {
+        final INodeReference ref = withCount.getReferredINode().asReference();
+        final INode referred = ref.getReferredINode();
+        withCount.setReferredINode(referred);
+        referred.setParentReference(withCount);
+        ref.clear();
+      }
+      referenceMap.clear();
+    }
+  }

MOV26 INS26 INS26 INS26 UPD40 UPD40 INS40 INS40 UPD40 UPD40 INS40 INS55 INS55 INS44 INS44 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 MOV31 UPD43 UPD43 INS43 INS42 UPD43 INS83 INS43 INS42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 MOV65 INS42 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS29 MOV83 INS39 INS42 INS8 INS65 INS83 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS39 INS42 INS44 MOV44 INS44 MOV43 INS8 INS83 INS43 INS42 INS44 MOV44 MOV44 MOV43 MOV8 UPD83 INS39 UPD42 INS8 UPD42 UPD42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 INS83 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS83 MOV43 UPD66 INS42 INS43 INS42 MOV43 INS42 INS39 INS42 INS46 INS21 MOV65 INS41 INS66 INS43 INS43 INS43 INS42 INS14 INS42 INS34 INS43 INS42 UPD43 UPD42 INS39 INS42 INS60 INS60 INS21 INS25 INS40 INS39 INS42 UPD43 INS60 INS25 INS41 INS70 INS21 UPD42 UPD42 UPD42 INS42 INS33 MOV42 INS32 UPD42 UPD42 UPD42 INS21 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS7 UPD66 INS42 UPD42 MOV42 INS42 INS40 INS74 INS40 UPD42 INS83 MOV43 INS59 INS83 INS39 INS59 INS32 INS42 INS8 INS8 UPD42 INS83 UPD39 INS83 INS43 INS59 INS42 INS8 INS8 INS42 INS44 INS32 INS8 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 MOV5 INS83 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 INS22 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS38 INS42 INS42 INS42 INS21 INS60 INS21 INS60 INS21 INS21 INS60 INS21 INS21 UPD42 INS40 INS42 MOV60 INS21 INS21 INS60 INS21 INS21 UPD43 MOV43 UPD42 MOV42 INS42 INS42 MOV60 INS60 INS21 INS21 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 INS32 MOV42 UPD42 INS32 INS42 INS42 UPD42 INS52 INS42 INS42 INS42 INS40 INS42 INS42 INS36 INS32 INS83 INS39 INS59 INS32 INS83 INS43 INS59 INS32 INS32 INS83 INS39 INS59 INS32 INS32 UPD42 INS43 INS7 INS32 INS83 INS39 INS59 INS7 INS32 INS40 INS83 INS43 INS83 UPD43 MOV43 INS59 INS32 INS32 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 INS62 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS42 INS14 INS42 INS42 INS38 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS43 INS33 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS11 INS40 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL39 DEL85 DEL5 DEL32 DEL3 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL31 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL66 DEL42 DEL65 DEL9 DEL42 DEL32 DEL42 DEL14 DEL41 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL32 DEL32 DEL32 DEL32 DEL59 DEL60 DEL32 DEL32 DEL41 DEL8