MAPREDUCE-5873. Shuffle bandwidth computation includes time spent waiting for maps. Contributed by Siqi Li

+import java.util.Collections;
-
+  private static final float BYTES_PER_MILLIS_TO_MBS = 1000f / 1024 / 1024;
+  
+  private final CopyTimeTracker copyTimeTracker;
+
-
+    copyTimeTracker = new CopyTimeTracker();
-                                         long millis,
+                                         long startMillis,
+                                         long endMillis,
-      // update the status
+      // update single copy task status
+      long copyMillis = (endMillis - startMillis);
+      if (copyMillis == 0) copyMillis = 1;
+      float bytesPerMillis = (float) bytes / copyMillis;
+      float transferRate = bytesPerMillis * BYTES_PER_MILLIS_TO_MBS;
+      String individualProgress = "copy task(" + mapId + " succeeded"
+          + " at " + mbpsFormat.format(transferRate) + " MB/s)";
+      // update the aggregated status
+      copyTimeTracker.add(startMillis, endMillis);
+
-      updateStatus();
+      updateStatus(individualProgress);
-  private void updateStatus() {
-    float mbs = (float) totalBytesShuffledTillNow / (1024 * 1024);
+  private synchronized void updateStatus(String individualProgress) {
-    long secsSinceStart = (Time.monotonicNow() - startTime) / 1000 + 1;
-
-    float transferRate = mbs / secsSinceStart;
+    long totalCopyMillis = copyTimeTracker.getCopyMillis();
+    if (totalCopyMillis == 0) totalCopyMillis = 1;
+    float bytesPerMillis = (float) totalBytesShuffledTillNow / totalCopyMillis;
+    float transferRate = bytesPerMillis * BYTES_PER_MILLIS_TO_MBS;
-    progress.setStatus("copy(" + mapsDone + " of " + totalMaps + " at "
-        + mbpsFormat.format(transferRate) + " MB/s)");
+    if (individualProgress != null) {
+      progress.setStatus(individualProgress + " Aggregated copy rate(" + 
+          mapsDone + " of " + totalMaps + " at " + 
+      mbpsFormat.format(transferRate) + " MB/s)");
+    } else {
+      progress.setStatus("copy(" + mapsDone + " of " + totalMaps + " at "
+          + mbpsFormat.format(transferRate) + " MB/s)");
+    }
+  private void updateStatus() {
+    updateStatus(null);	
+  }
+
+
+  private static class CopyTimeTracker {
+    List<Interval> intervals;
+    long copyMillis;
+    public CopyTimeTracker() {
+      intervals = Collections.emptyList();
+      copyMillis = 0;
+    }
+    public void add(long s, long e) {
+      Interval interval = new Interval(s, e);
+      copyMillis = getTotalCopyMillis(interval);
+    }
+  
+    public long getCopyMillis() {
+      return copyMillis;
+    }
+    // This method captures the time during which any copy was in progress 
+    // each copy time period is record in the Interval list
+    private long getTotalCopyMillis(Interval newInterval) {
+      if (newInterval == null) {
+        return copyMillis;
+      }
+      List<Interval> result = new ArrayList<Interval>(intervals.size() + 1);
+      for (Interval interval: intervals) {
+        if (interval.end < newInterval.start) {
+          result.add(interval);
+        } else if (interval.start > newInterval.end) {
+          result.add(newInterval);
+          newInterval = interval;        
+        } else {
+          newInterval = new Interval(
+              Math.min(interval.start, newInterval.start),
+              Math.max(newInterval.end, interval.end));
+        }
+      }
+      result.add(newInterval);
+      intervals = result;
+      
+      //compute total millis
+      long length = 0;
+      for (Interval interval : intervals) {
+        length += interval.getIntervalLength();
+      }
+      return length;
+    }
+    
+    private static class Interval {
+      final long start;
+      final long end;
+      public Interval(long s, long e) {
+        start = s;
+        end = e;
+      }
+      
+      public long getIntervalLength() {
+        return end - start;
+      }
+    }
+  }

INS26 INS40 INS23 INS23 INS31 INS55 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS44 INS83 INS44 MOV60 INS83 INS39 INS42 INS8 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS55 INS42 INS27 INS42 INS42 INS21 INS39 INS42 UPD42 INS43 INS42 INS60 INS25 INS25 INS21 INS74 INS59 INS39 INS59 INS83 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS34 INS34 INS34 INS7 INS42 MOV39 INS59 INS27 INS21 INS27 INS8 INS8 INS32 INS43 INS43 INS42 INS42 INS21 INS21 INS39 INS42 INS39 INS42 INS60 INS21 INS41 INS43 INS42 INS25 INS60 INS70 INS21 INS21 INS60 INS70 INS41 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS42 INS14 INS60 INS25 INS60 INS60 INS60 INS21 UPD42 MOV42 INS32 UPD42 MOV42 UPD34 MOV34 INS7 UPD42 UPD27 INS42 INS33 INS21 MOV21 INS42 INS33 INS42 INS42 INS7 INS7 INS43 INS59 INS7 INS42 INS42 INS27 INS8 INS74 INS59 INS44 INS42 INS8 INS32 INS7 INS39 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS41 INS43 INS39 INS59 INS27 INS21 INS39 INS59 INS39 INS59 INS43 INS59 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS42 UPD42 UPD42 INS32 INS42 INS32 INS42 INS34 INS42 INS42 INS14 INS42 INS32 INS42 INS33 INS41 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS21 INS7 INS7 INS27 INS42 INS42 INS36 INS42 INS34 INS7 INS42 INS27 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS27 INS42 INS27 INS8 INS25 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS34 INS11 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS43 INS43 INS32 INS34 INS40 INS40 INS21 INS27 INS8 INS8 INS42 INS32 INS42 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS40 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS32 INS32 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 DEL34 DEL34 DEL27 DEL36 DEL32 DEL27 DEL36 DEL27 DEL34 DEL27 DEL59 DEL60