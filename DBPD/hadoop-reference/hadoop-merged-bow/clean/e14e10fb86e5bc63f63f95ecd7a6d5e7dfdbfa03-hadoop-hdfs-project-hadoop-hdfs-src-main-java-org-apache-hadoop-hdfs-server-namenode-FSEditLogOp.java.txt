Merge trunk into auto-HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1339410 13f79535-47bb-0310-9956-ffa450edef68

+  private static final int MAX_OP_SIZE = 100 * 1024 * 1024;
-     * @return the operation read from the stream, or null at the end of the file
-     * @throws IOException on error.
+     * @return the operation read from the stream, or null at the end of the 
+     *         file
+     * @throws IOException on error.  This function should only throw an
+     *         exception when skipBrokenEdits is false.
-      FSEditLogOp op = null;
-          in.mark(in.available());
-          try {
-            op = decodeOp();
-          } finally {
-            // If we encountered an exception or an end-of-file condition,
-            // do not advance the input stream.
-            if (op == null) {
-              in.reset();
-            }
-          }
-          return op;
-        } catch (IOException e) {
+          in.mark(MAX_OP_SIZE);
+          return decodeOp();
+        } catch (GarbageAfterTerminatorException e) {
+          in.reset();
-          if (in.skip(1) < 1) {
+          // If we saw a terminator opcode followed by a long region of 0x00 or
+          // 0xff, we want to skip over that region, because there's nothing
+          // interesting there.
+          long numSkip = e.getNumAfterTerminator();
+          if (in.skip(numSkip) < numSkip) {
+            FSImage.LOG.error("Failed to skip " + numSkip + " bytes of " +
+              "garbage after an OP_INVALID.  Unexpected early EOF.");
+        } catch (IOException e) {
+          in.reset();
+          if (!skipBrokenEdits) {
+            throw e;
+          }
+        } catch (RuntimeException e) {
+          // FSEditLogOp#decodeOp is not supposed to throw RuntimeException.
+          // However, we handle it here for recovery mode, just to be more
+          // robust.
+          in.reset();
+          if (!skipBrokenEdits) {
+            throw e;
+          }
+        } catch (Throwable e) {
+          in.reset();
+          if (!skipBrokenEdits) {
+            throw new IOException("got unexpected exception " +
+                e.getMessage(), e);
+          }
+        }
+        // Move ahead one byte and re-try the decode process.
+        if (in.skip(1) < 1) {
+          return null;
+        }
+      }
+    }
+
+    private void verifyTerminator() throws IOException {
+      long off = 0;
+      /** The end of the edit log should contain only 0x00 or 0xff bytes.
+       * If it contains other bytes, the log itself may be corrupt.
+       * It is important to check this; if we don't, a stray OP_INVALID byte 
+       * could make us stop reading the edit log halfway through, and we'd never
+       * know that we had lost data.
+       */
+      byte[] buf = new byte[4096];
+      while (true) {
+        int numRead = in.read(buf);
+        if (numRead == -1) {
+          return;
+        }
+        for (int i = 0; i < numRead; i++, off++) {
+          if ((buf[i] != (byte)0) && (buf[i] != (byte)-1)) {
+            throw new GarbageAfterTerminatorException("Read garbage after " +
+            		"the terminator!", off);
+          }
-      if (opCode == OP_INVALID)
+      if (opCode == OP_INVALID) {
+        verifyTerminator();
+      }
-		}
+
+  /**
+   * Exception indicating that we found an OP_INVALID followed by some 
+   * garbage.  An OP_INVALID should signify the end of the file... if there 
+   * is additional content after that, then the edit log is corrupt. 
+   */
+  static class GarbageAfterTerminatorException extends IOException {
+    private static final long serialVersionUID = 1L;
+    private final long numAfterTerminator;
+
+    public GarbageAfterTerminatorException(String str,
+        long numAfterTerminator) {
+      super(str);
+      this.numAfterTerminator = numAfterTerminator;
+    }
+
+    /**
+     * Get the number of bytes after the terminator at which the garbage
+     * appeared.
+     *
+     * So if you had an OP_INVALID followed immediately by another valid opcode,
+     * this would be 0.
+     * If you had an OP_INVALID followed by some padding bytes, followed by a
+     * stray byte at the end, this would be the number of padding bytes.
+     * 
+     * @return numAfterTerminator
+     */
+    public long getNumAfterTerminator() {
+      return numAfterTerminator;
+    }
+  }
+}

INS23 INS55 INS83 INS83 INS83 INS39 INS59 INS31 INS29 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS42 INS27 INS83 INS39 INS42 INS43 INS8 INS65 INS42 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS34 INS34 INS34 INS42 INS60 INS60 INS61 INS66 INS66 INS66 INS42 INS34 INS42 INS43 INS42 INS39 INS42 INS46 INS21 INS65 INS65 INS41 UPD66 INS66 UPD66 INS66 INS39 INS59 INS5 INS59 INS9 INS8 INS8 INS42 INS42 INS7 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 MOV25 INS42 INS34 INS39 INS85 INS42 INS3 INS60 INS25 INS24 INS21 INS41 INS22 INS42 INS8 INS12 INS12 INS12 INS5 INS34 INS39 INS59 INS27 INS8 INS58 INS27 INS37 INS37 INS8 INS32 INS33 INS52 INS42 INS21 INS41 INS44 INS8 MOV44 INS8 INS44 INS8 INS44 INS8 INS39 INS85 INS42 INS32 INS42 INS38 INS41 INS39 INS59 INS42 INS42 INS42 INS42 INS25 INS42 INS32 MOV32 INS43 INS42 MOV21 MOV25 INS60 INS25 INS21 MOV25 INS43 INS42 INS21 INS25 INS43 INS42 INS21 INS25 INS42 INS42 INS42 INS34 INS42 INS34 INS27 INS8 MOV42 MOV42 INS42 INS42 INS39 INS59 INS27 INS8 INS32 INS38 INS42 INS32 INS38 INS8 INS42 INS32 INS38 INS8 INS36 INS36 INS53 INS42 INS32 INS32 INS42 MOV21 MOV41 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS53 INS27 INS27 INS14 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS14 INS2 INS11 INS2 INS11 INS43 INS27 INS42 INS40 INS42 INS27 INS43 INS27 INS42 INS42 INS42 INS39 INS34 INS42 INS42 INS39 INS38 INS42 INS45 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS32 INS34 INS42 INS42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL42 DEL33 DEL27 DEL32 DEL32 DEL21 DEL8 DEL8 DEL54 DEL42 DEL41 DEL8 DEL8