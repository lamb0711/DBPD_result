Merge branch 'trunk' into HADOOP-12756

+    private boolean isRollback = false;
+
-    private ResourceSet mergedResourceSet() {
-      if (oldLaunchContext == null) {
+    private ResourceSet mergedResourceSet(ResourceSet current) {
+      if (isRollback) {
+        // No merging should be done for rollback
-      return ResourceSet.merge(oldResourceSet, newResourceSet);
+      if (current == newResourceSet) {
+        // This happens during a restart
+        return current;
+      }
+      return ResourceSet.merge(current, newResourceSet);
-      if (oldLaunchContext == null) {
-        return null;
-      } else {
-        return new ReInitializationContext(
-            oldLaunchContext, oldResourceSet, null, null);
-      }
+      ReInitializationContext cntxt = new ReInitializationContext(
+          oldLaunchContext, oldResourceSet, null, null);
+      cntxt.isRollback = true;
+      return cntxt;
-        Map<LocalResourceVisibility, Collection<LocalResourceRequest>>
-            resByVisibility = container.reInitContext.newResourceSet
-            .getAllResourcesByVisibility();
-        if (!resByVisibility.isEmpty()) {
+        // 'reInitContext.newResourceSet' can be
+        // a) current container resourceSet (In case of Restart)
+        // b) previous resourceSet (In case of RollBack)
+        // c) An actual NEW resourceSet (In case of Upgrade/ReInit)
+        //
+        // In cases a) and b) Container can immediately be cleaned up since
+        // we are sure the resources are already available (we check the
+        // pendingResources to verify that nothing more is needed). So we can
+        // kill the container immediately
+        ResourceSet newResourceSet = container.reInitContext.newResourceSet;
+        if (!newResourceSet.getPendingResources().isEmpty()) {
-                  container, resByVisibility));
+                  container, newResourceSet.getAllResourcesByVisibility()));
+        container.metrics.reInitingContainer();
+        NMAuditLogger.logSuccess(container.user,
+            AuditConstants.START_CONTAINER_REINIT, "ContainerImpl",
+            container.containerId.getApplicationAttemptId().getApplicationId(),
+            container.containerId);
-      return new ReInitializationContext(
-          reInitEvent.getReInitLaunchContext(),
-          reInitEvent.getResourceSet(),
-          // If AutoCommit is turned on, then no rollback can happen...
-          // So don't need to store the previous context.
-          (reInitEvent.isAutoCommit() ? null : container.launchContext),
-          (reInitEvent.isAutoCommit() ? null : container.resourceSet));
+      if (reInitEvent.getReInitLaunchContext() == null) {
+        // This is a Restart...
+        // We also need to make sure that if Rollback is possible, the
+        // rollback state should be retained in the
+        // oldLaunchContext and oldResourceSet
+        return new ReInitializationContext(
+            container.launchContext, container.resourceSet,
+            container.canRollback() ?
+                container.reInitContext.oldLaunchContext : null,
+            container.canRollback() ?
+                container.reInitContext.oldResourceSet : null);
+      } else {
+        return new ReInitializationContext(
+            reInitEvent.getReInitLaunchContext(),
+            reInitEvent.getResourceSet(),
+            // If AutoCommit is turned on, then no rollback can happen...
+            // So don't need to store the previous context.
+            (reInitEvent.isAutoCommit() ? null : container.launchContext),
+            (reInitEvent.isAutoCommit() ? null : container.resourceSet));
+      }
+      if (container.isReInitializing()) {
+        NMAuditLogger.logSuccess(container.user,
+            AuditConstants.FINISH_CONTAINER_REINIT, "ContainerImpl",
+            container.containerId.getApplicationAttemptId().getApplicationId(),
+            container.containerId);
+      }
+        container.metrics.rollbackContainerOnFailure();
+        container.metrics.reInitingContainer();
+        NMAuditLogger.logSuccess(container.user,
+            AuditConstants.START_CONTAINER_REINIT, "ContainerImpl",
+            container.containerId.getApplicationAttemptId().getApplicationId(),
+            container.containerId);
-          + "] for upgrade !!");
+          + "] for re-initialization !!");
-      container.resourceSet = container.reInitContext.mergedResourceSet();
+      container.resourceSet =
+          container.reInitContext.mergedResourceSet(container.resourceSet);
+    if (this.isReInitializing && !isReInitializing) {
+      metrics.endReInitingContainer();
+    }

INS23 INS83 INS39 INS59 INS44 INS43 INS42 MOV8 INS8 INS25 INS42 INS9 INS43 INS42 INS25 INS42 INS60 INS21 MOV60 INS25 INS25 INS27 INS8 INS42 INS42 INS27 INS8 MOV43 INS59 INS7 INS42 INS27 INS8 MOV8 INS32 INS8 INS22 INS38 INS21 INS42 INS42 INS41 UPD42 INS42 MOV14 INS40 INS9 INS60 INS21 INS21 INS32 INS33 INS41 INS42 INS42 INS21 INS52 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS14 INS32 INS21 INS21 INS21 UPD45 INS40 INS42 INS42 UPD42 MOV42 INS42 INS40 INS40 INS42 INS42 INS42 INS40 INS40 INS45 INS32 INS40 INS43 INS40 INS40 INS16 INS16 INS42 INS42 INS40 INS40 INS45 INS32 INS40 INS32 INS32 INS32 INS32 INS32 UPD42 MOV42 INS42 INS32 INS40 INS33 INS32 INS40 INS33 INS32 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS40 INS40 INS45 INS32 INS40 UPD42 MOV42 INS42 UPD40 MOV40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS40 INS42 INS42 INS42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL8 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42