Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

+    private final Path sessionScriptPath;
+      this.sessionScriptPath = new Path(containerWorkDir,
+          Shell.appendScriptExtension("default_container_executor_session"));
+    }
+
+    @Override
+    public void writeLocalWrapperScript(Path launchDst, Path pidFile)
+        throws IOException {
+      writeSessionScript(launchDst, pidFile);
+      super.writeLocalWrapperScript(launchDst, pidFile);
-
-      // We need to do a move as writing to a file is not atomic
-      // Process reading a file being written to may get garbled data
-      // hence write pid to tmp file first followed by a mv
+      String exitCodeFile = ContainerLaunch.getExitCodeFile(
+          pidFile.toString());
+      String tmpFile = exitCodeFile + ".tmp";
-      pout.println();
-      pout.println("echo $$ > " + pidFile.toString() + ".tmp");
-      pout.println("/bin/mv -f " + pidFile.toString() + ".tmp " + pidFile);
-      String exec = Shell.isSetsidAvailable? "exec setsid" : "exec";
-      pout.println(exec + " /bin/bash \"" +
-        launchDst.toUri().getPath().toString() + "\"");
+      pout.println("/bin/bash \"" + sessionScriptPath.toString() + "\"");
+      pout.println("rc=$?");
+      pout.println("echo $rc > \"" + tmpFile + "\"");
+      pout.println("/bin/mv -f \"" + tmpFile + "\" \"" + exitCodeFile + "\"");
+      pout.println("exit $rc");
+    }
+
+    private void writeSessionScript(Path launchDst, Path pidFile)
+        throws IOException {
+      DataOutputStream out = null;
+      PrintStream pout = null;
+      try {
+        out = lfs.create(sessionScriptPath, EnumSet.of(CREATE, OVERWRITE));
+        pout = new PrintStream(out);
+        // We need to do a move as writing to a file is not atomic
+        // Process reading a file being written to may get garbled data
+        // hence write pid to tmp file first followed by a mv
+        pout.println("#!/bin/bash");
+        pout.println();
+        pout.println("echo $$ > " + pidFile.toString() + ".tmp");
+        pout.println("/bin/mv -f " + pidFile.toString() + ".tmp " + pidFile);
+        String exec = Shell.isSetsidAvailable? "exec setsid" : "exec";
+        pout.println(exec + " /bin/bash \"" +
+            launchDst.toUri().getPath().toString() + "\"");
+      } finally {
+        IOUtils.cleanup(LOG, pout, out);
+      }
+      lfs.setPermission(sessionScriptPath,
+          ContainerExecutor.TASK_LAUNCH_SCRIPT_PERMISSION);
+      // TODO: exit code script for Windows
+  @Override
+  public boolean isContainerProcessAlive(String user, String pid)
+      throws IOException {
+    return containerIsAlive(pid);
+  }
+

INS31 INS23 INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 MOV78 INS83 INS39 INS42 INS44 INS44 MOV44 INS8 UPD83 UPD42 INS43 INS8 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS43 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS60 INS60 INS54 INS21 INS42 INS42 INS32 INS7 INS42 INS42 INS32 INS48 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS43 INS59 MOV8 INS8 INS32 INS42 INS42 INS22 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS33 INS42 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS42 INS40 INS52 INS42 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS45 INS32 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS7 INS7 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42