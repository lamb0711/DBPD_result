HDFS-5786. Support QUERY and FINALIZE actions of rolling upgrade.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1559304 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.RollingUpgradeException;
+  private RollingUpgradeInfo rollingUpgradeInfo;
+
-  RollingUpgradeInfo addUpgradeMarker() throws IOException {
-    final long startTime;
+  RollingUpgradeInfo queryRollingUpgrade() throws IOException {
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.READ);
+    readLock();
+    try {
+      return rollingUpgradeInfo != null? rollingUpgradeInfo
+          : RollingUpgradeInfo.EMPTY_INFO;
+    } finally {
+      readUnlock();
+    }
+  }
+
+  RollingUpgradeInfo startRollingUpgrade() throws IOException {
+      final String err = "Failed to start rolling upgrade";
+      checkNameNodeSafeMode(err);
-      startTime = now();
-      getEditLog().logUpgradeMarker();
+      if (rollingUpgradeInfo != null) {
+        throw new RollingUpgradeException(err
+            + " since a rolling upgrade is already in progress."
+            + "\nExisting rolling upgrade info: " + rollingUpgradeInfo);
+      }
+
+      final CheckpointSignature cs = getFSImage().rollEditLog();
+      LOG.info("Successfully rolled edit log for preparing rolling upgrade."
+          + " Checkpoint signature: " + cs);
+      rollingUpgradeInfo = new RollingUpgradeInfo(now());
+      getEditLog().logUpgradeMarker(rollingUpgradeInfo.getStartTime());
-      logAuditEvent(true, "upgrade", null, null, null);
+      logAuditEvent(true, "startRollingUpgrade", null, null, null);
-    return new RollingUpgradeInfo(startTime, 0L);
+    return rollingUpgradeInfo;
+  }
+
+  RollingUpgradeInfo finalizeRollingUpgrade() throws IOException {
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.WRITE);
+    writeLock();
+    final RollingUpgradeInfo returnInfo;
+    try {
+      checkOperation(OperationCategory.WRITE);
+      final String err = "Failed to finalize rolling upgrade";
+      checkNameNodeSafeMode(err);
+
+      if (rollingUpgradeInfo == null) {
+        throw new RollingUpgradeException(err
+            + " since there is no rolling upgrade in progress.");
+      }
+
+      returnInfo = new RollingUpgradeInfo(rollingUpgradeInfo.getStartTime(), now());
+      getFSImage().saveNamespace(this);
+      rollingUpgradeInfo = null;
+    } finally {
+      writeUnlock();
+    }
+
+    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
+      logAuditEvent(true, "finalizeRollingUpgrade", null, null, null);
+    }
+    return returnInfo;

INS26 INS40 INS23 INS31 INS31 INS83 INS43 INS59 INS43 INS42 INS43 INS8 MOV43 INS42 MOV43 INS8 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS54 MOV21 MOV21 MOV21 INS54 MOV21 INS25 INS41 INS42 INS42 INS21 INS21 INS21 INS32 INS32 INS32 INS8 INS8 INS8 MOV8 MOV27 INS8 INS42 INS32 INS32 INS32 INS43 INS8 INS27 INS42 INS42 INS42 INS40 INS42 INS41 INS21 MOV21 INS60 INS21 INS25 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS40 INS42 INS42 UPD42 INS21 INS60 INS21 INS25 INS21 INS21 INS32 INS32 INS16 INS32 INS83 INS43 INS59 INS32 INS27 INS8 INS83 INS43 INS59 INS32 INS7 INS32 INS32 INS32 INS83 INS43 INS59 INS32 INS27 INS8 INS32 INS7 INS32 INS42 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS27 INS42 MOV14 MOV32 INS42 INS32 INS42 INS9 INS45 INS33 INS33 INS33 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS42 INS33 INS53 INS42 INS14 INS32 INS42 INS52 INS42 INS33 INS42 UPD45 INS42 INS33 INS14 INS32 INS42 INS45 INS45 INS42 MOV32 INS42 INS42 INS14 INS43 INS32 INS32 UPD42 MOV42 INS43 INS27 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS45 DEL42 DEL34 DEL42 DEL39 DEL42 DEL32