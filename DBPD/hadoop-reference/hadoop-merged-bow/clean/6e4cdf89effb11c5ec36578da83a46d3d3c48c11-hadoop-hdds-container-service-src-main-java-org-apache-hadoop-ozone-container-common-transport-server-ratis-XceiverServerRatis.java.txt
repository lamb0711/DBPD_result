HDDS-1561: Mark OPEN containers as QUASI_CLOSED as part of Ratis groupRemove (#1401)



+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;
+import java.util.HashSet;
+import java.util.Set;
+  private final ContainerController containerController;
+  // TODO: Remove the gids set when Ratis supports an api to query active
+  // pipelines
+  private final Set<RaftGroupId> raftGids = new HashSet<>();
+  @SuppressWarnings("parameternumber")
-      ContainerDispatcher dispatcher, Configuration conf, StateContext
-      context, GrpcTlsConfig tlsConfig, CertificateClient caClient)
+      ContainerDispatcher dispatcher, ContainerController containerController,
+      StateContext context, GrpcTlsConfig tlsConfig, CertificateClient caClient,
+      Configuration conf)
+    this.containerController = containerController;
-    return new ContainerStateMachine(gid, dispatcher, chunkExecutor, this,
-        cacheEntryExpiryInteval, getSecurityConfig().isBlockTokenEnabled(),
-        getBlockTokenVerifier(), conf);
+    return new ContainerStateMachine(gid, dispatcher, containerController,
+        chunkExecutor, this, cacheEntryExpiryInteval,
+        getSecurityConfig().isBlockTokenEnabled(), getBlockTokenVerifier(),
+        conf);
-    RaftServerConfigKeys.setLeaderElectionTimeout(properties,
+    RaftServerConfigKeys.Notification.setNoLeaderTimeout(properties,
-      ContainerDispatcher dispatcher, StateContext context,
-      CertificateClient caClient) throws IOException {
+      ContainerDispatcher dispatcher, ContainerController containerController,
+      CertificateClient caClient, StateContext context) throws IOException {
-    return new XceiverServerRatis(datanodeDetails, localPort,
-        dispatcher, ozoneConf, context, tlsConfig, caClient);
+    return new XceiverServerRatis(datanodeDetails, localPort, dispatcher,
+        containerController, context, tlsConfig, caClient, ozoneConf);
-    for (RaftGroupId groupId : server.getGroupIds()) {
-      if (PipelineID.valueOf(groupId.getUuid()).getProtobuf()
-          .equals(pipelineId)) {
-        return true;
-      }
-    }
-    return false;
+    return raftGids.contains(
+        RaftGroupId.valueOf(PipelineID.getFromProtobuf(pipelineId).getId()));
+
+  void notifyGroupRemove(RaftGroupId gid) {
+    raftGids.remove(gid);
+  }
+
+  void notifyGroupAdd(RaftGroupId gid) {
+    raftGids.add(gid);
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 MOV44 MOV44 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS79 INS44 INS44 MOV78 MOV83 MOV39 MOV42 MOV44 INS8 INS39 INS42 INS44 INS8 INS39 INS42 INS44 INS8 INS42 INS42 INS43 MOV43 INS42 INS14 INS42 INS45 INS43 INS42 INS21 INS43 INS42 INS41 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS74 INS42 INS7 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS22 INS42 INS42 INS40 UPD42 UPD42 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 UPD42 MOV42 INS42 MOV32 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL32 DEL42 DEL44 DEL32 DEL42 DEL32 DEL42 DEL32 DEL9 DEL41 DEL8 DEL25 DEL8 DEL70 DEL9 DEL41 DEL8 DEL31