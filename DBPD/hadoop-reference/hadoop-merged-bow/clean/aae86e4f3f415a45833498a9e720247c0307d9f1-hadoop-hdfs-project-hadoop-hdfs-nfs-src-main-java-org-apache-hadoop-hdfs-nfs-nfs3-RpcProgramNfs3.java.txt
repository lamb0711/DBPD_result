merge changes from trunk to HDFS-4949 branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524865 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
-import org.apache.hadoop.fs.FSDataOutputStream;
-import org.apache.hadoop.fs.Options;
+import org.apache.hadoop.fs.Options;
+import org.apache.hadoop.hdfs.client.HdfsDataOutputStream;
+import org.apache.hadoop.nfs.AccessPrivilege;
+import org.apache.hadoop.nfs.NfsExports;
-import org.apache.hadoop.oncrpc.RpcAuthInfo.AuthFlavor;
-import org.apache.hadoop.oncrpc.RpcAuthSys;
+import org.apache.hadoop.oncrpc.security.CredentialsSys;
+import org.apache.hadoop.oncrpc.security.Credentials;
+import org.apache.hadoop.oncrpc.security.Verifier;
+import org.apache.hadoop.oncrpc.security.SecurityHandler;
+import org.apache.hadoop.oncrpc.security.SysSecurityHandler;
+import org.apache.hadoop.oncrpc.security.RpcAuthInfo.AuthFlavor;
-  private final IdUserGroup iug;// = new IdUserGroup();
+  private final IdUserGroup iug;
+  private final NfsExports exports;
+  
-  public RpcProgramNfs3(List<String> exports) throws IOException {
-    this(exports, new Configuration());
+  public RpcProgramNfs3() throws IOException {
+    this(new Configuration());
-  public RpcProgramNfs3(List<String> exports, Configuration config)
+  public RpcProgramNfs3(Configuration config)
+    
+    exports = NfsExports.getInstance(config);
-    bufferSize = config.getInt("io.file.buffer.size", 4096);
+    bufferSize = config.getInt(
+        CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY,
+        CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_DEFAULT);
-    writeDumpDir = config.get("dfs.nfs3.dump.dir", "/tmp/.hdfs-nfs");    
-    boolean enableDump = config.getBoolean("dfs.nfs3.enableDump", true);
+    writeDumpDir = config.get(Nfs3Constant.FILE_DUMP_DIR_KEY,
+        Nfs3Constant.FILE_DUMP_DIR_DEFAULT);
+    boolean enableDump = config.getBoolean(Nfs3Constant.ENABLE_FILE_DUMP_KEY,
+        Nfs3Constant.ENABLE_FILE_DUMP_DEFAULT);
-  
+
+  @Override
-  public GETATTR3Response getattr(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public GETATTR3Response getattr(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    
+    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+      response.setStatus(Nfs3Status.NFS3ERR_ACCES);
+      return response;
+    }
+    
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-          newAttr.getUid(), UNKNOWN_USER) : null;
+          newAttr.getUid(), Nfs3Constant.UNKNOWN_USER) : null;
-          .getGroupName(newAttr.getGid(), UNKNOWN_GROUP) : null;
+          .getGroupName(newAttr.getGid(), Nfs3Constant.UNKNOWN_GROUP) : null;
-  public SETATTR3Response setattr(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public SETATTR3Response setattr(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-    WccAttr preOpAttr = null;
+    Nfs3FileAttributes preOpAttr = null;
-      preOpAttr = Nfs3Utils.getWccAttr(dfsClient, fileIdPath);
+      preOpAttr = Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);
+      WccAttr preOpWcc = Nfs3Utils.getWccAttr(preOpAttr);
-          WccData wccData = Nfs3Utils.createWccData(preOpAttr, dfsClient,
-              fileIdPath, iug);
+          WccData wccData = new WccData(preOpWcc, preOpAttr);
+      
+      // check the write access privilege
+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+        return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(
+            preOpWcc, preOpAttr));
+      }
-      WccData wccData = new WccData(preOpAttr, postOpAttr);
+      WccData wccData = new WccData(preOpWcc, postOpAttr);
-
-        wccData = Nfs3Utils
-            .createWccData(preOpAttr, dfsClient, fileIdPath, iug);
+        wccData = Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpAttr),
+            dfsClient, fileIdPath, iug);
-  public LOOKUP3Response lookup(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public LOOKUP3Response lookup(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    
+    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+      response.setStatus(Nfs3Status.NFS3ERR_ACCES);
+      return response;
+    }
+    
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-  public ACCESS3Response access(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public ACCESS3Response access(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    
+    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+      response.setStatus(Nfs3Status.NFS3ERR_ACCES);
+      return response;
+    }
+    
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-      int access = Nfs3Utils.getAccessRightsForUserGroup(authSys.getUid(),
-          authSys.getGid(), attrs);
+      int access = Nfs3Utils.getAccessRightsForUserGroup(
+          securityHandler.getUid(), securityHandler.getGid(), attrs);
-  public READLINK3Response readlink(XDR xdr, RpcAuthSys authSys) {
+  public READLINK3Response readlink(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-  public READ3Response read(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public READ3Response read(XDR xdr, SecurityHandler securityHandler,
+      InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    
+    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+      response.setStatus(Nfs3Status.NFS3ERR_ACCES);
+      return response;
+    }
+    
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-      int access = Nfs3Utils.getAccessRightsForUserGroup(authSys.getUid(),
-          authSys.getGid(), attrs);
+      int access = Nfs3Utils.getAccessRightsForUserGroup(
+          securityHandler.getUid(), securityHandler.getGid(), attrs);
+  @Override
-      RpcAuthSys authSys) {
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
+      
+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+        return new WRITE3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(
+            Nfs3Utils.getWccAttr(preOpAttr), preOpAttr), 0, stableHow,
+            Nfs3Constant.WRITE_COMMIT_VERF);
+      }
+      
-  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public CREATE3Response create(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-    FSDataOutputStream fos = null;
+    HdfsDataOutputStream fos = null;
-    WccAttr preOpDirAttr = null;
+    Nfs3FileAttributes preOpDirAttr = null;
-      preOpDirAttr = Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);
+      preOpDirAttr = Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);
+      
+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,
+            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),
+                preOpDirAttr));
+      }
-      EnumSet<CreateFlag> flag = (createMode != Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet
-          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet
-          .of(CreateFlag.CREATE);
-      fos = new FSDataOutputStream(dfsClient.create(fileIdPath, permission,
+      EnumSet<CreateFlag> flag = (createMode != Nfs3Constant.CREATE_EXCLUSIVE) ? 
+          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : 
+          EnumSet.of(CreateFlag.CREATE);
+      
+      fos = new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,
-          setAttr3.setGid(authSys.getGid());
+          setAttr3.setGid(securityHandler.getGid());
-      dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,
-          iug);
+      dirWcc = Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),
+          dfsClient, dirFileIdPath, iug);
-          dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-              dirFileIdPath, iug);
+          dirWcc = Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),
+              dfsClient, dirFileIdPath, iug);
-  public MKDIR3Response mkdir(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public MKDIR3Response mkdir(XDR xdr, SecurityHandler securityHandler,
+      InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-    WccAttr preOpDirAttr = null;
+    Nfs3FileAttributes preOpDirAttr = null;
-      preOpDirAttr = Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);
+      preOpDirAttr = Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);
+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+        return new MKDIR3Response(Nfs3Status.NFS3ERR_ACCES, null, preOpDirAttr,
+            new WccData(Nfs3Utils.getWccAttr(preOpDirAttr), preOpDirAttr));
+      }
+      
-        WccData dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-            dirFileIdPath, iug);
+        WccData dirWcc = Nfs3Utils.createWccData(
+            Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);
-        setAttr3.setGid(authSys.getGid());
+        setAttr3.setGid(securityHandler.getGid());
-      WccData dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-          dirFileIdPath, iug);
+      WccData dirWcc = Nfs3Utils.createWccData(
+          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);
-      WccData dirWcc = new WccData(preOpDirAttr, postOpDirAttr);
+      WccData dirWcc = new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),
+          postOpDirAttr);
-
-  public READDIR3Response mknod(XDR xdr, RpcAuthSys authSys) {
+  public READDIR3Response mknod(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public REMOVE3Response remove(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-    WccAttr preOpDirAttr = null;
+    Nfs3FileAttributes preOpDirAttr = null;
-      preOpDirAttr = Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);
+      preOpDirAttr =  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);
-        WccData dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-            dirFileIdPath, iug);
+        WccData dirWcc = new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),
+            preOpDirAttr);
-        WccData dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-            dirFileIdPath, iug);
+        WccData dirWcc = new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),
+            preOpDirAttr);
-      if (dfsClient.delete(fileIdPath, false) == false) {
-        WccData dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-            dirFileIdPath, iug);
+      boolean result = dfsClient.delete(fileIdPath, false);
+      WccData dirWcc = Nfs3Utils.createWccData(
+          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);
+
+      if (!result) {
-
-      WccData dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-          dirFileIdPath, iug);
-      WccData dirWcc = new WccData(preOpDirAttr, postOpDirAttr);
+      WccData dirWcc = new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),
+          postOpDirAttr);
-  public RMDIR3Response rmdir(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public RMDIR3Response rmdir(XDR xdr, SecurityHandler securityHandler,
+      InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-    WccAttr preOpDirAttr = null;
+    Nfs3FileAttributes preOpDirAttr = null;
-      preOpDirAttr = Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);
+      preOpDirAttr = Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);
+      
+      WccData errWcc = new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),
+          preOpDirAttr);
+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+        return new RMDIR3Response(Nfs3Status.NFS3ERR_ACCES, errWcc); 
+      }
-        WccData dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-            dirFileIdPath, iug);
-        return new RMDIR3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);
+        return new RMDIR3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);
-        WccData dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-            dirFileIdPath, iug);
-        return new RMDIR3Response(Nfs3Status.NFS3ERR_NOTDIR, dirWcc);
+        return new RMDIR3Response(Nfs3Status.NFS3ERR_NOTDIR, errWcc);
-        WccData dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-            dirFileIdPath, iug);
-        return new RMDIR3Response(Nfs3Status.NFS3ERR_NOTEMPTY, dirWcc);
+        return new RMDIR3Response(Nfs3Status.NFS3ERR_NOTEMPTY, errWcc);
-      if (dfsClient.delete(fileIdPath, false) == false) {
-        WccData dirWcc = Nfs3Utils.createWccData(preOpDirAttr, dfsClient,
-            dirFileIdPath, iug);
+      boolean result = dfsClient.delete(fileIdPath, false);
+      WccData dirWcc = Nfs3Utils.createWccData(
+          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);
+      if (!result) {
-      postOpDirAttr = Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);
-      WccData wccData = new WccData(preOpDirAttr, postOpDirAttr);
-      return new RMDIR3Response(Nfs3Status.NFS3_OK, wccData);
-
+      return new RMDIR3Response(Nfs3Status.NFS3_OK, dirWcc);
-      WccData dirWcc = new WccData(preOpDirAttr, postOpDirAttr);
+      WccData dirWcc = new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),
+          postOpDirAttr);
-  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public RENAME3Response rename(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-    WccAttr fromPreOpAttr = null;
-    WccAttr toPreOpAttr = null;
+    Nfs3FileAttributes fromPreOpAttr = null;
+    Nfs3FileAttributes toPreOpAttr = null;
-      fromPreOpAttr = Nfs3Utils.getWccAttr(dfsClient, fromDirFileIdPath);
+      fromPreOpAttr = Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);
-      toPreOpAttr = Nfs3Utils.getWccAttr(dfsClient, toDirFileIdPath);
+      toPreOpAttr = Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);
+      
+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+        WccData fromWcc = new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),
+            fromPreOpAttr);
+        WccData toWcc = new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),
+            toPreOpAttr);
+        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);
+      }
-      fromDirWcc = Nfs3Utils.createWccData(fromPreOpAttr, dfsClient,
-          fromDirFileIdPath, iug);
-      toDirWcc = Nfs3Utils.createWccData(toPreOpAttr, dfsClient,
-          toDirFileIdPath, iug);
+      fromDirWcc = Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),
+          dfsClient, fromDirFileIdPath, iug);
+      toDirWcc = Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),
+          dfsClient, toDirFileIdPath, iug);
-
-        fromDirWcc = Nfs3Utils.createWccData(fromPreOpAttr, dfsClient,
-            fromDirFileIdPath, iug);
-        toDirWcc = Nfs3Utils.createWccData(toPreOpAttr, dfsClient,
-            toDirFileIdPath, iug);
+        fromDirWcc = Nfs3Utils.createWccData(
+            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,
+            iug);
+        toDirWcc = Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),
+            dfsClient, toDirFileIdPath, iug);
-  public SYMLINK3Response symlink(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public SYMLINK3Response symlink(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-  public READDIR3Response link(XDR xdr, RpcAuthSys authSys) {
+  public READDIR3Response link(XDR xdr, SecurityHandler securityHandler, InetAddress client) {
-  public READDIR3Response readdir(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public READDIR3Response readdir(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    
+    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+      response.setStatus(Nfs3Status.NFS3ERR_ACCES);
+      return response;
+    }
+    
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-  public READDIRPLUS3Response readdirplus(XDR xdr, RpcAuthSys authSys) {   
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+  public READDIRPLUS3Response readdirplus(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
+    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+      return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_ACCES);
+    }
+    
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-  public FSSTAT3Response fsstat(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public FSSTAT3Response fsstat(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    
+    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+      response.setStatus(Nfs3Status.NFS3ERR_ACCES);
+      return response;
+    }
+    
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-  public FSINFO3Response fsinfo(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public FSINFO3Response fsinfo(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    
+    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+      response.setStatus(Nfs3Status.NFS3ERR_ACCES);
+      return response;
+    }
+    
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-  public PATHCONF3Response pathconf(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public PATHCONF3Response pathconf(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    
+    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {
+      response.setStatus(Nfs3Status.NFS3ERR_ACCES);
+      return response;
+    }
+    
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-  public COMMIT3Response commit(XDR xdr, RpcAuthSys authSys) {
+  @Override
+  public COMMIT3Response commit(XDR xdr,
+      SecurityHandler securityHandler, InetAddress client) {
-    String uname = authSysCheck(authSys);
-    DFSClient dfsClient = clientCache.get(uname);
+    DFSClient dfsClient = clientCache.get(securityHandler.getUser());
-    WccAttr preOpAttr = null;
+    Nfs3FileAttributes preOpAttr = null;
-      preOpAttr = Nfs3Utils.getWccAttr(dfsClient, fileIdPath);
+      preOpAttr = Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);
+      
+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {
+        return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(
+            Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),
+            Nfs3Constant.WRITE_COMMIT_VERF);
+      }
+      
-      WccData fileWcc = new WccData(preOpAttr, postOpAttr);
+      WccData fileWcc = new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);
-      WccData fileWcc = new WccData(preOpAttr, postOpAttr);
+      WccData fileWcc = new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);
-  
-  private final static String UNKNOWN_USER = "nobody";
-  private final static String UNKNOWN_GROUP = "nobody";
-  private String authSysCheck(RpcAuthSys authSys) {
-    return iug.getUserName(authSys.getUid(), UNKNOWN_USER);
+  private SecurityHandler getSecurityHandler(Credentials credentials,
+      Verifier verifier) {
+    if (credentials instanceof CredentialsSys) {
+      return new SysSecurityHandler((CredentialsSys) credentials, iug);
+    } else {
+      // TODO: support GSS and handle other cases
+      return null;
+    }
-    RpcAuthSys authSys = null;
-    
+
+    Credentials credentials = rpcCall.getCredential();
-      if (rpcCall.getCredential().getFlavor() != AuthFlavor.AUTH_SYS) {
+      if (rpcCall.getCredential().getFlavor() != AuthFlavor.AUTH_SYS
+          && rpcCall.getCredential().getFlavor() != AuthFlavor.RPCSEC_GSS) {
-            + rpcCall.getCredential().getFlavor() + " is not AUTH_SYS.");
+            + rpcCall.getCredential().getFlavor()
+            + " is not AUTH_SYS or RPCSEC_GSS.");
-      authSys = RpcAuthSys.from(rpcCall.getCredential().getBody());
+    SecurityHandler securityHandler = getSecurityHandler(credentials,
+        rpcCall.getVerifier());
+    
-      response = getattr(xdr, authSys);
+      response = getattr(xdr, securityHandler, client);
-      response = setattr(xdr, authSys);
+      response = setattr(xdr, securityHandler, client);
-      response = lookup(xdr, authSys);
+      response = lookup(xdr, securityHandler, client);
-      response = access(xdr, authSys);
+      response = access(xdr, securityHandler, client);
-      response = readlink(xdr, authSys);
+      response = readlink(xdr, securityHandler, client);
-      response = read(xdr, authSys);
+      response = read(xdr, securityHandler, client);
-      response = write(xdr, channel, xid, authSys);
+      response = write(xdr, channel, xid, securityHandler, client);
-      response = create(xdr, authSys);
+      response = create(xdr, securityHandler, client);
-      response = mkdir(xdr, authSys);
+      response = mkdir(xdr, securityHandler, client);
-      response = symlink(xdr, authSys);
+      response = symlink(xdr, securityHandler, client);
-      response = mknod(xdr, authSys);
+      response = mknod(xdr, securityHandler, client);
-      response = remove(xdr, authSys);
+      response = remove(xdr, securityHandler, client);
-      response = rmdir(xdr, authSys);
+      response = rmdir(xdr, securityHandler, client);
-      response = rename(xdr, authSys);
+      response = rename(xdr, securityHandler, client);
-      response = link(xdr, authSys);
+      response = link(xdr, securityHandler, client);
-      response = readdir(xdr, authSys);
+      response = readdir(xdr, securityHandler, client);
-      response = readdirplus(xdr, authSys);
+      response = readdirplus(xdr, securityHandler, client);
-      response = fsstat(xdr, authSys);
+      response = fsstat(xdr, securityHandler, client);
-      response = fsinfo(xdr, authSys);
+      response = fsinfo(xdr, securityHandler, client);
-      response = pathconf(xdr, authSys);
+      response = pathconf(xdr, securityHandler, client);
-      response = commit(xdr, authSys);
+      response = commit(xdr, securityHandler, client);
+  
+  private boolean checkAccessPrivilege(final InetAddress client,
+      final AccessPrivilege expected) {
+    AccessPrivilege access = exports.getAccessPrivilege(client);
+    if (access == AccessPrivilege.NONE) {
+      return false;
+    }
+    if (access == AccessPrivilege.READ_ONLY
+        && expected == AccessPrivilege.READ_WRITE) {
+      return false;
+    }
+    return true;
+  }

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 UPD40 UPD40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 UPD40 INS31 UPD43 INS78 INS78 INS44 INS78 INS44 INS78 INS44 INS78 INS44 INS44 INS78 INS44 INS78 INS44 INS78 INS44 INS78 INS44 INS44 INS78 INS44 MOV60 INS78 INS44 INS78 INS44 INS78 INS44 INS44 INS78 INS44 INS44 INS78 INS44 INS78 INS44 INS78 INS44 INS78 INS44 INS83 INS43 INS42 INS44 INS44 INS8 INS39 INS42 INS44 UPD42 UPD42 INS21 INS42 INS42 INS43 INS42 UPD43 UPD42 INS25 INS42 INS43 INS42 UPD43 UPD42 INS42 INS43 INS42 UPD43 UPD42 INS25 INS42 INS43 INS42 UPD43 UPD42 INS25 INS43 INS42 UPD43 UPD42 INS42 INS43 INS42 UPD43 UPD42 INS25 INS42 INS43 INS42 UPD43 UPD42 INS42 INS43 INS42 UPD43 UPD42 INS42 INS43 INS42 UPD43 UPD42 INS43 INS42 UPD43 UPD42 INS42 INS43 INS42 UPD43 UPD42 INS42 INS43 INS42 UPD43 UPD42 MOV60 INS42 INS43 INS42 UPD43 UPD42 INS42 INS43 INS42 UPD43 UPD42 INS43 INS42 UPD43 UPD42 INS42 INS43 INS42 UPD43 UPD42 INS25 INS43 INS42 UPD43 UPD42 INS25 INS42 INS43 INS42 UPD43 UPD42 INS25 INS42 INS43 INS42 UPD43 UPD42 INS25 INS42 INS43 INS42 UPD43 UPD42 INS25 INS42 INS43 INS42 UPD43 UPD42 UPD42 MOV42 INS43 INS42 INS43 INS42 INS25 INS60 INS83 INS43 INS42 INS83 UPD43 UPD42 INS60 INS25 INS25 INS41 INS7 INS42 UPD42 INS38 INS8 INS42 UPD42 INS43 INS42 UPD42 INS38 INS8 INS42 UPD42 INS38 INS8 INS42 UPD42 INS42 UPD42 INS38 INS8 INS42 UPD42 INS42 UPD42 UPD43 UPD43 INS42 UPD42 UPD43 INS42 UPD42 INS42 UPD42 UPD43 INS43 MOV59 INS42 UPD42 MOV43 UPD43 MOV21 INS42 UPD42 UPD43 UPD43 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS38 INS8 INS42 UPD42 INS38 INS8 INS42 UPD42 INS38 INS8 INS43 INS42 UPD42 INS38 INS8 INS42 UPD42 INS38 INS8 INS42 UPD42 MOV43 UPD43 INS42 INS42 INS62 INS8 INS8 UPD43 INS43 INS59 UPD42 MOV42 UPD42 INS43 INS59 INS27 INS8 INS27 INS8 INS9 INS42 INS32 INS32 INS21 INS41 INS42 INS60 INS25 INS32 INS21 INS41 INS32 INS21 INS41 INS32 INS21 INS41 INS25 UPD42 UPD42 INS25 UPD42 INS25 UPD42 INS42 INS32 INS42 INS60 INS25 UPD42 INS60 INS25 INS60 INS60 INS25 INS41 UPD42 UPD42 INS25 INS32 INS21 INS41 INS32 INS41 INS32 INS21 INS41 INS42 INS32 INS21 INS41 INS32 INS21 INS41 UPD42 INS25 INS42 INS43 INS41 INS41 UPD42 UPD42 MOV32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS41 INS27 INS27 INS41 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS42 INS40 INS32 INS42 INS32 INS32 MOV43 INS59 INS38 INS8 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS40 INS32 INS42 INS32 INS32 INS38 INS8 INS32 INS38 INS8 INS32 INS38 INS8 INS42 INS42 INS32 INS39 INS59 MOV43 INS38 MOV8 INS32 MOV43 INS59 INS38 INS8 MOV8 MOV8 INS39 INS59 MOV43 INS59 INS38 MOV8 INS14 INS32 INS38 INS8 INS42 INS42 INS40 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS40 INS14 INS32 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS40 INS32 INS42 INS32 INS32 INS38 INS8 MOV43 INS42 INS14 INS33 INS27 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS9 INS42 INS40 INS42 INS40 INS9 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS41 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 INS41 UPD42 MOV42 INS42 INS32 INS41 UPD42 MOV42 INS42 INS32 INS41 MOV43 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 INS42 UPD42 MOV42 INS42 UPD42 INS42 INS14 INS32 MOV41 INS42 MOV32 INS42 INS32 INS42 INS43 INS40 UPD42 MOV42 MOV43 UPD42 MOV42 INS42 INS32 INS60 INS60 INS41 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS43 INS40 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 INS41 MOV43 INS43 INS11 INS42 MOV27 INS27 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS14 UPD42 INS42 INS42 INS40 INS14 UPD42 INS42 INS42 INS42 INS40 INS14 UPD43 INS32 UPD42 INS42 INS42 INS42 INS40 INS14 INS32 UPD42 INS42 MOV43 INS42 INS42 INS42 INS32 MOV42 MOV43 INS32 INS42 UPD42 MOV42 INS42 INS40 INS42 INS42 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS40 INS43 INS59 INS43 INS59 INS14 INS32 INS32 INS42 UPD42 INS42 INS42 INS42 INS40 INS14 INS32 INS42 INS43 INS42 INS32 INS40 INS40 INS40 INS43 INS40 INS14 UPD42 UPD42 UPD42 UPD42 INS43 INS40 INS14 INS34 INS42 INS40 INS43 INS40 INS33 INS42 INS14 UPD42 INS42 INS42 MOV42 INS43 INS40 INS33 INS42 INS14 INS42 INS42 MOV42 INS32 INS14 INS14 INS42 INS42 MOV42 INS32 MOV42 MOV42 UPD42 MOV42 UPD40 UPD42 UPD40 UPD42 UPD42 UPD40 UPD42 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS40 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 MOV42 INS43 INS40 INS14 INS40 INS42 INS42 INS42 INS32 INS42 INS32 INS42 UPD42 INS42 INS43 INS42 MOV43 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS32 INS42 INS32 UPD42 INS42 INS42 INS42 INS43 INS32 INS42 MOV43 INS32 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 UPD42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 UPD42 INS42 INS43 INS42 INS42 INS42 INS42 MOV42 UPD42 INS42 INS42 MOV42 INS42 INS42 MOV42 UPD42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 MOV42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 DEL83 DEL45 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL45 DEL34 DEL45 DEL45 DEL45 DEL9 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL9 DEL27 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL9 DEL27 DEL25 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL83 DEL83 DEL83 DEL43 DEL42 DEL45 DEL59 DEL23 DEL33 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41