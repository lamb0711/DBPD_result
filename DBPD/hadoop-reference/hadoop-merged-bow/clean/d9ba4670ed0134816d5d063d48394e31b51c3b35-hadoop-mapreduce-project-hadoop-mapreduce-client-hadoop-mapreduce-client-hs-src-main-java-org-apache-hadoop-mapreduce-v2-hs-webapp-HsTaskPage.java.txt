MAPREDUCE-2672. MR-279: JobHistory Server needs Analysis this job. (Robert Evans via mahadev)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171297 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.mapreduce.v2.app.webapp.AMParams.TASK_TYPE;
+import static org.apache.hadoop.mapreduce.v2.app.webapp.AMParams.TASK_ID;
+import static org.apache.hadoop.yarn.webapp.view.JQueryUI.postInitID;
+import org.apache.hadoop.mapreduce.v2.api.records.TaskId;
+import org.apache.hadoop.mapreduce.v2.api.records.TaskType;
-import org.apache.hadoop.yarn.api.records.ContainerId;
-import org.apache.hadoop.yarn.util.ConverterUtils;
-import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.TD;
+import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.TFOOT;
+import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.THEAD;
+import org.apache.hadoop.yarn.webapp.hamlet.HamletSpec.InputType;
-      TBODY<TABLE<Hamlet>> tbody = html.
+      TaskType type = null;
+      String symbol = $(TASK_TYPE);
+      if (!symbol.isEmpty()) {
+        type = MRApps.taskType(symbol);
+      } else {
+        type = app.getTask().getType();
+      }
+      
+      TR<THEAD<TABLE<Hamlet>>> headRow = html.
-          tr().
+          tr();
+      
+      headRow.
-            th(".tsh", "Started").
-            th(".tsh", "Finished").
-            th(".tsh", "Elapsed").
-            th(".note", "Note")._()._().
-        tbody();
+            th(".tsh", "Start Time");
+      
+      if(type == TaskType.REDUCE) {
+        headRow.th("Shuffle Finish Time");
+        headRow.th("Merge Finish Time");
+      }
+      
+      headRow.th("Finish Time"); //Attempt
+      
+      if(type == TaskType.REDUCE) {
+        headRow.th("Elapsed Time Shuffle"); //Attempt
+        headRow.th("Elapsed Time Merge"); //Attempt
+        headRow.th("Elapsed Time Reduce"); //Attempt
+      }
+      headRow.th("Elapsed Time").
+              th(".note", "Note");
+      
+       TBODY<TABLE<Hamlet>> tbody = headRow._()._().tbody();
-        ContainerId containerId = ta.getAssignedContainerID();
-        long startTime = ta.getLaunchTime();
-        long finishTime = ta.getFinishTime();
-        long elapsed = Times.elapsed(startTime, finishTime);
-        TD<TR<TBODY<TABLE<Hamlet>>>> nodeTd = tbody.
-          tr().
-            td(".id", taid).
-            td(".state", ta.getState().toString()).
-            td().
-              a(".nodelink", url("http://", nodeHttpAddr), nodeHttpAddr);
-        if (containerId != null) {
-          String containerIdStr = ConverterUtils.toString(containerId);
-          nodeTd._(" ").
-            a(".logslink", url("http://", nodeHttpAddr, "yarn", "containerlogs",
-              containerIdStr), "logs");
+        
+        long attemptStartTime = ta.getLaunchTime();
+        long shuffleFinishTime = -1;
+        long sortFinishTime = -1;
+        long attemptFinishTime = ta.getFinishTime();
+        long elapsedShuffleTime = -1;
+        long elapsedSortTime = -1;
+        long elapsedReduceTime = -1;
+        if(type == TaskType.REDUCE) {
+          shuffleFinishTime = ta.getShuffleFinishTime();
+          sortFinishTime = ta.getSortFinishTime();
+          elapsedShuffleTime =
+              Times.elapsed(attemptStartTime, shuffleFinishTime, false);
+          elapsedSortTime =
+              Times.elapsed(shuffleFinishTime, sortFinishTime, false);
+          elapsedReduceTime =
+              Times.elapsed(sortFinishTime, attemptFinishTime, false); 
-        nodeTd._().
-          td(".ts", Times.format(startTime)).
-          td(".ts", Times.format(finishTime)).
-          td(".dt", StringUtils.formatTime(elapsed)).
-          td(".note", Joiner.on('\n').join(ta.getDiagnostics()))._();
+        long attemptElapsed =
+            Times.elapsed(attemptStartTime, attemptFinishTime, false);
+        int sortId = ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);
+        
+        TR<TBODY<TABLE<Hamlet>>> row = tbody.tr();
+        row.
+            td().
+              br().$title(String.valueOf(sortId))._(). // sorting
+              _(taid)._().
+            td(ta.getState().toString()).
+            td().a(".nodelink", url("http://", nodeHttpAddr), nodeHttpAddr)._();
+        
+        row.td().
+          br().$title(String.valueOf(attemptStartTime))._().
+            _(Times.format(attemptStartTime))._();
+
+        if(type == TaskType.REDUCE) {
+          row.td().
+            br().$title(String.valueOf(shuffleFinishTime))._().
+            _(Times.format(shuffleFinishTime))._();
+          row.td().
+          br().$title(String.valueOf(sortFinishTime))._().
+          _(Times.format(sortFinishTime))._();
+        }
+        row.
+            td().
+              br().$title(String.valueOf(attemptFinishTime))._().
+              _(Times.format(attemptFinishTime))._();
+        
+        if(type == TaskType.REDUCE) {
+          row.td().
+            br().$title(String.valueOf(elapsedShuffleTime))._().
+          _(formatTime(elapsedShuffleTime))._();
+          row.td().
+          br().$title(String.valueOf(elapsedSortTime))._().
+        _(formatTime(elapsedSortTime))._();
+          row.td().
+            br().$title(String.valueOf(elapsedReduceTime))._().
+          _(formatTime(elapsedReduceTime))._();
+        }
+        
+        row.
+          td().
+            br().$title(String.valueOf(attemptElapsed))._().
+          _(formatTime(attemptElapsed))._().
+          td(".note", Joiner.on('\n').join(ta.getDiagnostics()));
+        row._();
-      tbody._()._();
+      
+      
+      TR<TFOOT<TABLE<Hamlet>>> footRow = tbody._().tfoot().tr();
+      footRow.
+          th().input("search_init").$type(InputType.text).
+              $name("attempt_name").$value("Attempt")._()._().
+          th().input("search_init").$type(InputType.text).
+              $name("attempt_state").$value("State")._()._().
+          th().input("search_init").$type(InputType.text).
+              $name("attempt_node").$value("Node")._()._().
+          th().input("search_init").$type(InputType.text).
+              $name("attempt_start_time").$value("Start Time")._()._();
+      
+      if(type == TaskType.REDUCE) {
+        footRow.
+        th().input("search_init").$type(InputType.text).
+            $name("shuffle_time").$value("Shuffle Time")._()._();
+        footRow.
+        th().input("search_init").$type(InputType.text).
+            $name("merge_time").$value("Merge Time")._()._();
+      }
+      
+      footRow.
+        th().input("search_init").$type(InputType.text).
+            $name("attempt_finish").$value("Finish Time")._()._();
+      
+      if(type == TaskType.REDUCE) {
+        footRow.
+        th().input("search_init").$type(InputType.text).
+            $name("elapsed_shuffle_time").$value("Elapsed Shuffle Time")._()._();
+        footRow.
+        th().input("search_init").$type(InputType.text).
+            $name("elapsed_merge_time").$value("Elapsed Merge Time")._()._();
+        footRow.
+        th().input("search_init").$type(InputType.text).
+            $name("elapsed_reduce_time").$value("Elapsed Reduce Time")._()._();
+      }
+
+      footRow.
+        th().input("search_init").$type(InputType.text).
+            $name("attempt_elapsed").$value("Elapsed Time")._()._().
+        th().input("search_init").$type(InputType.text).
+            $name("note").$value("Note")._()._();
+      
+      footRow._()._()._();
+    private String formatTime(long elapsed) {
+      return elapsed < 0 ? "N/A" : StringUtils.formatTime(elapsed);
+    }
+    
+    set(postInitID(DATATABLES, "attempts"), attemptsPostTableInit());
-    return tableInit().append("}").toString();
+    TaskType type = null;
+    String symbol = $(TASK_TYPE);
+    if (!symbol.isEmpty()) {
+      type = MRApps.taskType(symbol);
+    } else {
+      TaskId taskID = MRApps.toTaskID($(TASK_ID));
+      type = taskID.getTaskType();
+    }
+    StringBuilder b = tableInit().
+      append(",aoColumnDefs:[");
+
+    b.append("{'sType':'title-numeric', 'aTargets': [ 0");
+    if(type == TaskType.REDUCE) {
+      b.append(", 7, 8, 9, 10");
+    } else { //MAP
+      b.append(", 5");
+    }
+    b.append(" ] }");
+    b.append("]}");
+    return b.toString();
+  }
+  
+  private String attemptsPostTableInit() {
+    return "var asInitVals = new Array();\n" +
+           "$('tfoot input').keyup( function () \n{"+
+           "  attemptsDataTable.fnFilter( this.value, $('tfoot input').index(this) );\n"+
+           "} );\n"+
+           "$('tfoot input').each( function (i) {\n"+
+           "  asInitVals[i] = this.value;\n"+
+           "} );\n"+
+           "$('tfoot input').focus( function () {\n"+
+           "  if ( this.className == 'search_init' )\n"+
+           "  {\n"+
+           "    this.className = '';\n"+
+           "    this.value = '';\n"+
+           "  }\n"+
+           "} );\n"+
+           "$('tfoot input').blur( function (i) {\n"+
+           "  if ( this.value == '' )\n"+
+           "  {\n"+
+           "    this.className = 'search_init';\n"+
+           "    this.value = asInitVals[$('tfoot input').index(this)];\n"+
+           "  }\n"+
+           "} );\n";

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 UPD40 UPD40 INS40 INS31 INS31 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS21 INS60 INS60 INS25 INS60 INS21 INS25 INS21 INS21 INS42 INS41 INS60 INS60 INS25 INS60 INS21 INS25 INS21 INS25 INS21 INS60 INS60 INS25 INS21 INS25 INS21 INS21 INS42 INS39 INS42 INS41 INS32 INS43 INS59 INS43 INS59 INS38 INS8 INS8 INS43 INS59 INS32 INS27 INS8 INS8 INS32 INS32 INS27 INS43 INS59 MOV43 INS59 INS38 INS8 INS8 INS74 INS59 INS32 INS27 INS8 INS32 INS27 INS8 INS32 MOV74 INS59 INS74 INS59 INS32 INS27 INS8 INS32 INS27 INS8 INS32 INS32 INS16 INS42 INS32 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS21 INS60 INS21 INS42 INS42 MOV32 INS42 INS42 INS45 INS42 INS40 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 UPD42 MOV42 INS33 INS42 INS32 INS32 INS21 INS21 INS43 INS74 INS42 MOV32 MOV32 MOV42 MOV45 UPD45 MOV45 INS42 INS40 INS21 INS21 INS42 INS42 UPD45 MOV45 INS42 INS40 INS21 INS21 INS21 INS32 MOV42 MOV45 MOV45 INS42 INS32 INS60 INS60 INS60 INS60 INS60 INS25 MOV60 MOV21 INS21 INS25 INS21 INS25 INS21 INS21 INS43 INS74 INS42 INS32 INS32 INS42 INS42 INS40 INS21 INS21 INS32 INS42 INS42 INS40 INS21 INS21 INS21 INS32 INS42 INS32 INS42 INS27 INS45 MOV32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS59 INS7 UPD45 INS32 INS32 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS43 INS74 INS32 INS32 INS32 INS32 INS32 INS42 INS42 UPD45 MOV45 INS32 MOV42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS39 MOV74 INS32 INS27 INS8 INS32 INS27 INS8 INS32 INS32 INS42 INS43 INS74 MOV32 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS43 INS43 INS42 MOV42 INS45 INS42 INS42 UPD45 MOV45 INS42 MOV42 INS45 INS42 INS42 UPD45 MOV45 INS42 INS42 INS45 INS32 MOV42 UPD42 INS42 INS38 UPD42 MOV42 INS38 UPD42 INS42 INS38 INS42 INS38 INS42 INS38 INS42 INS40 INS21 INS21 INS21 INS21 INS21 UPD42 UPD42 INS27 UPD42 MOV32 INS32 UPD42 MOV42 MOV32 INS42 INS42 INS40 INS21 INS21 INS32 INS42 INS42 INS40 INS21 INS21 INS21 INS32 INS42 MOV45 MOV32 INS42 MOV42 INS42 INS43 INS43 UPD42 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV42 INS34 INS34 INS34 INS34 INS34 INS7 INS7 INS7 INS7 INS7 UPD42 UPD42 INS9 INS32 INS36 INS32 MOV42 UPD45 MOV45 MOV32 MOV42 UPD42 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS32 UPD42 MOV42 INS27 INS32 INS42 INS32 UPD42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS40 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS40 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS40 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 UPD42 MOV42 UPD42 MOV42 INS32 INS34 INS32 INS42 MOV32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 MOV32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS32 INS42 MOV32 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 MOV42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 MOV42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS42 UPD42 MOV42 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS40 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS40 INS32 INS42 INS45 INS42 INS42 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL32 DEL59 DEL60 DEL32 DEL42 DEL43 DEL74 DEL42 DEL45 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL45 DEL42 DEL45 DEL45 DEL45 DEL32 DEL45 DEL45 DEL42 DEL33 DEL27 DEL8 DEL25 DEL45 DEL32 DEL45 DEL32 DEL32 DEL32 DEL21