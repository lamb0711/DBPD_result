Merge branch 'trunk' into HADOOP-12756

+import org.apache.hadoop.hdfs.server.datanode.fsdataset.FsDatasetSpi
+    .FsVolumeReferences;
+import java.util.Arrays;
-   * Returns the Current Work Status of a submitted Plan.
+   * Get FsVolume by volume UUID.
+   * @param fsDataset
+   * @param volUuid
+   * @return FsVolumeSpi
+   */
+  private static FsVolumeSpi getFsVolume(final FsDatasetSpi<?> fsDataset,
+      final String volUuid) {
+    FsVolumeSpi fsVolume = null;
+    try (FsVolumeReferences volumeReferences =
+           fsDataset.getFsVolumeReferences()) {
+      for (int i = 0; i < volumeReferences.size(); i++) {
+        if (volumeReferences.get(i).getStorageID().equals(volUuid)) {
+          fsVolume = volumeReferences.get(i);
+          break;
+        }
+      }
+    } catch (IOException e) {
+      LOG.warn("Disk Balancer - Error when closing volume references: ", e);
+    }
+    return fsVolume;
+  }
+
+  /**
+   * Returns the current work status of a previously submitted Plan.
-            entry.getKey().getSource().getBasePath(),
-            entry.getKey().getDest().getBasePath(),
+            entry.getKey().getSourceVolBasePath(),
+            entry.getKey().getDestVolBasePath(),
-      Map<String, String> pathMap = new HashMap<>();
-      Map<String, FsVolumeSpi> volMap = getStorageIDToVolumeMap();
-      for (Map.Entry<String, FsVolumeSpi> entry : volMap.entrySet()) {
-        pathMap.put(entry.getKey(), entry.getValue().getBasePath());
-      }
-      return JsonUtil.toJsonString(pathMap);
+      return JsonUtil.toJsonString(getStorageIDToVolumeBasePathMap());
-    Map<String, FsVolumeSpi> pathMap = getStorageIDToVolumeMap();
+    Map<String, String> storageIDToVolBasePathMap =
+        getStorageIDToVolumeBasePathMap();
-      String sourceuuid = step.getSourceVolume().getUuid();
-      String destinationuuid = step.getDestinationVolume().getUuid();
+      String sourceVolUuid = step.getSourceVolume().getUuid();
+      String destVolUuid = step.getDestinationVolume().getUuid();
-      FsVolumeSpi sourceVol = pathMap.get(sourceuuid);
-      if (sourceVol == null) {
-        LOG.error("Disk Balancer - Unable to find source volume. submitPlan " +
-            "failed.");
-        throw new DiskBalancerException("Unable to find source volume.",
+      String sourceVolBasePath = storageIDToVolBasePathMap.get(sourceVolUuid);
+      if (sourceVolBasePath == null) {
+        final String errMsg = "Disk Balancer - Unable to find volume: "
+            + step.getSourceVolume().getPath() + ". SubmitPlan failed.";
+        LOG.error(errMsg);
+        throw new DiskBalancerException(errMsg,
-      FsVolumeSpi destVol = pathMap.get(destinationuuid);
-      if (destVol == null) {
-        LOG.error("Disk Balancer - Unable to find destination volume. " +
-            "submitPlan failed.");
-        throw new DiskBalancerException("Unable to find destination volume.",
+      String destVolBasePath = storageIDToVolBasePathMap.get(destVolUuid);
+      if (destVolBasePath == null) {
+        final String errMsg = "Disk Balancer - Unable to find volume: "
+            + step.getDestinationVolume().getPath() + ". SubmitPlan failed.";
+        LOG.error(errMsg);
+        throw new DiskBalancerException(errMsg,
-      createWorkPlan(sourceVol, destVol, step);
+      VolumePair volumePair = new VolumePair(sourceVolUuid,
+          sourceVolBasePath, destVolUuid, destVolBasePath);
+      createWorkPlan(volumePair, step);
-   * Returns a path to Volume Map.
+   * Returns volume UUID to volume base path map.
-  private Map<String, FsVolumeSpi> getStorageIDToVolumeMap()
+  private Map<String, String> getStorageIDToVolumeBasePathMap()
-    Map<String, FsVolumeSpi> pathMap = new HashMap<>();
+    Map<String, String> storageIDToVolBasePathMap = new HashMap<>();
-          pathMap.put(vol.getStorageID(), vol);
+          storageIDToVolBasePathMap.put(vol.getStorageID(), vol.getBasePath());
-    return pathMap;
+    return storageIDToVolBasePathMap;
-   *
-   * @param source - Source vol
-   * @param dest   - destination volume
-   * @param step   - Move Step
+   * @param volumePair - VolumePair
+   * @param step - Move Step
-  private void createWorkPlan(FsVolumeSpi source, FsVolumeSpi dest,
-                              Step step) throws DiskBalancerException {
-
-    if (source.getStorageID().equals(dest.getStorageID())) {
-      LOG.info("Disk Balancer - source & destination volumes are same.");
-      throw new DiskBalancerException("source and destination volumes are " +
-          "same.", DiskBalancerException.Result.INVALID_MOVE);
+  private void createWorkPlan(final VolumePair volumePair, Step step)
+      throws DiskBalancerException {
+    if (volumePair.getSourceVolUuid().equals(volumePair.getDestVolUuid())) {
+      final String errMsg = "Disk Balancer - Source and destination volumes " +
+          "are same: " + volumePair.getSourceVolUuid();
+      LOG.warn(errMsg);
+      throw new DiskBalancerException(errMsg,
+          DiskBalancerException.Result.INVALID_MOVE);
-    VolumePair pair = new VolumePair(source, dest);
-    // one line of same <source, dest>
+    // one line of same VolumePair
-    if (workMap.containsKey(pair)) {
-      bytesToMove += workMap.get(pair).getBytesToCopy();
+    if (workMap.containsKey(volumePair)) {
+      bytesToMove += workMap.get(volumePair).getBytesToCopy();
-    workMap.put(pair, work);
+    workMap.put(volumePair, work);
-   * Holds references to actual volumes that we will be operating against.
+   * Holds source and dest volumes UUIDs and their BasePaths
+   * that disk balancer will be operating against.
-    private final FsVolumeSpi source;
-    private final FsVolumeSpi dest;
+    private final String sourceVolUuid;
+    private final String destVolUuid;
+    private final String sourceVolBasePath;
+    private final String destVolBasePath;
-     *
-     * @param source - Source Volume
-     * @param dest   - Destination Volume
+     * @param sourceVolUuid     - Source Volume
+     * @param sourceVolBasePath - Source Volume Base Path
+     * @param destVolUuid       - Destination Volume
+     * @param destVolBasePath   - Destination Volume Base Path
-    public VolumePair(FsVolumeSpi source, FsVolumeSpi dest) {
-      this.source = source;
-      this.dest = dest;
+    public VolumePair(final String sourceVolUuid,
+        final String sourceVolBasePath, final String destVolUuid,
+        final String destVolBasePath) {
+      this.sourceVolUuid = sourceVolUuid;
+      this.sourceVolBasePath = sourceVolBasePath;
+      this.destVolUuid = destVolUuid;
+      this.destVolBasePath = destVolBasePath;
-     * gets source volume.
+     * Gets source volume UUID.
-     * @return volume
+     * @return UUID String
-    public FsVolumeSpi getSource() {
-      return source;
+    public String getSourceVolUuid() {
+      return sourceVolUuid;
-     * Gets Destination volume.
-     *
-     * @return volume.
+     * Gets source volume base path.
+     * @return String
-    public FsVolumeSpi getDest() {
-      return dest;
+    public String getSourceVolBasePath() {
+      return sourceVolBasePath;
+    }
+    /**
+     * Gets destination volume UUID.
+     *
+     * @return UUID String
+     */
+    public String getDestVolUuid() {
+      return destVolUuid;
+    }
+
+    /**
+     * Gets desitnation volume base path.
+     *
+     * @return String
+     */
+    public String getDestVolBasePath() {
+      return destVolBasePath;
-      return source.equals(that.source) && dest.equals(that.dest);
+      return sourceVolUuid.equals(that.sourceVolUuid)
+          && sourceVolBasePath.equals(that.sourceVolBasePath)
+          && destVolUuid.equals(that.destVolUuid)
+          && destVolBasePath.equals(that.destVolBasePath);
-      int result = source.getBasePath().hashCode();
-      result = 31 * result + dest.getBasePath().hashCode();
+      final int primeNum = 31;
+      final List<String> volumeStrList = Arrays.asList(sourceVolUuid,
+          sourceVolBasePath, destVolUuid, destVolBasePath);
+      int result = 1;
+      for (String str : volumeStrList) {
+        result = (result * primeNum) + str.hashCode();
+      }
-      FsVolumeSpi source = pair.getSource();
-      FsVolumeSpi dest = pair.getDest();
+      String sourceVolUuid = pair.getSourceVolUuid();
+      String destVolUuuid = pair.getDestVolUuid();
+
+      // When any of the DiskBalancerWorkItem volumes are not
+      // available, return after setting error in item.
+      FsVolumeSpi source = getFsVolume(this.dataset, sourceVolUuid);
+      if (source == null) {
+        final String errMsg = "Disk Balancer - Unable to find source volume: "
+            + pair.getDestVolBasePath();
+        LOG.error(errMsg);
+        item.setErrMsg(errMsg);
+        return;
+      }
+      FsVolumeSpi dest = getFsVolume(this.dataset, destVolUuuid);
+      if (dest == null) {
+        final String errMsg = "Disk Balancer - Unable to find dest volume: "
+            + pair.getDestVolBasePath();
+        LOG.error(errMsg);
+        item.setErrMsg(errMsg);
+        return;
+      }
+
-                  "dest:{}", source.getBasePath(), dest.getBasePath());
+                  "Dest:{}", source.getBasePath(), dest.getBasePath());

INS26 INS26 INS40 INS40 INS31 INS31 INS29 MOV83 INS83 MOV43 UPD42 MOV42 INS44 INS44 INS8 MOV29 INS83 INS39 INS42 MOV44 MOV43 INS8 UPD74 UPD42 INS23 INS23 INS31 INS31 INS65 INS65 INS65 INS65 INS83 INS74 INS42 INS83 MOV43 INS42 INS60 INS54 INS41 MOV21 MOV21 MOV60 MOV70 UPD43 INS43 INS83 UPD43 UPD42 UPD43 UPD43 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS44 UPD43 UPD42 INS29 INS83 INS43 INS42 INS8 UPD43 UPD42 INS29 INS83 INS43 INS42 INS8 INS66 INS42 INS42 INS66 UPD43 MOV43 INS76 MOV43 INS59 INS58 INS8 INS12 INS42 UPD66 UPD66 UPD42 INS42 UPD74 UPD42 UPD42 UPD66 UPD66 UPD42 INS66 UPD66 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS65 INS65 INS83 MOV43 INS42 INS83 UPD43 UPD42 INS83 UPD43 UPD42 INS83 INS43 INS42 INS21 INS21 UPD42 INS65 INS65 INS42 INS41 UPD42 INS65 INS65 INS42 INS41 INS60 INS60 INS60 INS70 INS60 INS25 INS60 INS25 UPD42 INS42 INS33 INS43 INS59 INS24 INS44 INS8 UPD42 INS32 INS60 UPD43 INS43 UPD42 INS60 UPD42 UPD42 UPD42 UPD66 INS42 INS66 UPD42 UPD66 INS42 INS66 UPD42 UPD42 INS42 INS7 INS7 UPD66 UPD66 UPD42 INS66 INS66 INS42 UPD66 UPD66 UPD42 INS66 INS66 INS42 INS83 MOV39 INS59 INS83 INS74 MOV59 INS39 INS59 INS44 INS42 INS8 INS43 INS43 MOV43 INS59 INS27 INS8 MOV43 INS59 INS27 INS8 UPD42 MOV42 UPD42 MOV42 MOV32 INS58 INS27 INS37 INS8 INS43 INS42 INS21 INS42 INS43 UPD43 MOV43 INS59 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS83 MOV43 INS59 UPD42 INS22 INS42 UPD42 INS22 INS42 INS32 INS32 INS42 INS34 INS43 INS43 UPD42 INS42 INS34 INS43 INS42 MOV21 INS42 UPD42 INS42 UPD42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS41 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS41 INS42 UPD42 INS39 INS59 INS42 INS32 INS42 INS25 INS42 INS32 INS32 UPD42 UPD42 INS42 UPD42 UPD42 INS60 INS21 MOV53 UPD42 UPD42 UPD42 INS60 INS21 MOV53 INS42 INS14 UPD42 INS42 INS27 UPD42 INS42 INS42 UPD42 INS52 INS42 UPD42 INS52 INS42 UPD42 UPD40 INS42 INS42 INS40 UPD42 UPD40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS22 INS42 INS83 INS43 INS59 INS32 INS32 INS42 INS22 INS42 INS83 INS43 INS59 INS32 INS32 INS42 INS34 INS42 INS42 INS32 INS8 INS42 INS42 INS45 INS42 MOV43 UPD42 MOV42 UPD42 UPD42 INS83 MOV43 INS59 INS32 UPD42 UPD42 INS83 MOV43 INS59 INS32 MOV43 INS42 INS42 INS42 INS42 INS45 INS45 INS32 INS52 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS10 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS36 INS45 INS32 INS45 INS32 INS32 INS42 INS7 MOV43 MOV32 MOV32 UPD45 MOV45 INS32 UPD45 MOV45 UPD45 MOV45 INS32 UPD45 MOV45 INS27 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS32 INS42 INS32 INS42 UPD42 INS32 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 UPD45 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL43 DEL74 DEL14 DEL45 DEL42 DEL42 DEL27 DEL32 DEL21 DEL45 DEL42 DEL42 DEL27 DEL32 DEL21 DEL42 DEL39 DEL43 DEL74 DEL59 DEL60 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44 DEL45 DEL45 DEL45 DEL27 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL32 DEL34 DEL27 DEL42 DEL32 DEL60