HDFS-10872. Add MutableRate metrics for FSNamesystemLock operations. Contributed by Erik Krogen.

+import org.apache.hadoop.metrics2.lib.MutableRatesWithAggregation;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LOCK_DETAILED_METRICS_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_LOCK_DETAILED_METRICS_KEY;
+ * {@link org.apache.hadoop.hdfs.DFSConfigKeys#DFS_NAMENODE_LOCK_DETAILED_METRICS_KEY}
+ * to be true, metrics will be emitted into the FSNamesystem metrics registry
+ * for each operation which acquires this lock indicating how long the operation
+ * held the lock for. Note that if a thread dies, metrics produced after the
+ * most recent snapshot will be lost due to the use of
+ * {@link MutableRatesWithAggregation}. However since threads are re-used
+ * between operations this should not generally be an issue.
+  private final boolean metricsEnabled;
+  private final MutableRatesWithAggregation detailedHoldTimeMetrics;
-  FSNamesystemLock(Configuration conf) {
-    this(conf, new Timer());
+  @VisibleForTesting
+  static final String OP_NAME_OTHER = "OTHER";
+  private static final String READ_LOCK_METRIC_PREFIX = "FSNReadLock";
+  private static final String WRITE_LOCK_METRIC_PREFIX = "FSNWriteLock";
+
+  FSNamesystemLock(Configuration conf,
+      MutableRatesWithAggregation detailedHoldTimeMetrics) {
+    this(conf, detailedHoldTimeMetrics, new Timer());
-  FSNamesystemLock(Configuration conf, Timer timer) {
+  FSNamesystemLock(Configuration conf,
+      MutableRatesWithAggregation detailedHoldTimeMetrics, Timer timer) {
+    this.metricsEnabled = conf.getBoolean(
+        DFS_NAMENODE_LOCK_DETAILED_METRICS_KEY,
+        DFS_NAMENODE_LOCK_DETAILED_METRICS_DEFAULT);
+    FSNamesystem.LOG.info("Detailed lock hold time metrics enabled: " +
+        this.metricsEnabled);
+    this.detailedHoldTimeMetrics = detailedHoldTimeMetrics;
+    readUnlock(OP_NAME_OTHER);
+  }
+
+  public void readUnlock(String opName) {
+      addMetric(opName, readLockInterval, false);
+    writeUnlock(OP_NAME_OTHER);
+  }
+
+  public void writeUnlock(String opName) {
+    if (needReport) {
+      addMetric(opName, writeLockInterval, true);
+    }
+
+
+  /**
+   * Add the lock hold time for a recent operation to the metrics.
+   * @param operationName Name of the operation for which to record the time
+   * @param value Length of time the lock was held
+   */
+  private void addMetric(String operationName, long value, boolean isWrite) {
+    if (metricsEnabled) {
+      String metricName =
+          (isWrite ? WRITE_LOCK_METRIC_PREFIX : READ_LOCK_METRIC_PREFIX) +
+          org.apache.commons.lang.StringUtils.capitalize(operationName);
+      detailedHoldTimeMetrics.add(metricName, value);
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS44 INS44 INS83 INS39 INS42 INS8 INS44 INS83 INS39 INS42 INS8 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS65 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS43 INS42 INS21 INS43 INS42 INS25 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS25 INS67 INS42 INS42 INS42 INS42 INS7 INS32 INS7 INS32 INS42 INS32 INS42 INS42 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS8 INS40 INS42 INS22 INS32 INS40 INS42 INS27 INS22 INS42 INS42 INS42 INS21 INS42 INS42 INS21 INS60 INS21 INS52 INS42 INS42 INS42 INS42 INS42 INS45 INS22 INS52 INS42 INS32 INS32 INS43 INS59 INS32 INS52 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS36 INS32 INS16 INS40 INS42 INS42 INS42 INS42 INS42