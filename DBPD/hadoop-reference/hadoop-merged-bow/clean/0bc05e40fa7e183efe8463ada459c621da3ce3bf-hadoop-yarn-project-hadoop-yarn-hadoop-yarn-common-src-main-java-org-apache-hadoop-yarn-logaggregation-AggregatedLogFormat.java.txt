YARN-5088. Improve "yarn log" command-line to read the last K bytes for the log files. Contributed by Xuan Gong

-            readContainerLogs(valueStream, ps, logUploadedTime);
+            readContainerLogs(valueStream, ps, logUploadedTime, Long.MAX_VALUE);
-        PrintStream out, long logUploadedTime) throws IOException {
+        PrintStream out, long logUploadedTime, long bytes)
+        throws IOException {
+      long toSkip = 0;
+      long totalBytesToRead = fileLength;
+      if (bytes < 0) {
+        long absBytes = Math.abs(bytes);
+        if (absBytes < fileLength) {
+          toSkip = fileLength - absBytes;
+          totalBytesToRead = absBytes;
+        }
+        long skippedBytes = valueStream.skip(toSkip);
+        if (skippedBytes != toSkip) {
+          throw new IOException("The bytes were skipped are "
+              + "different from the caller requested");
+        }
+      } else {
+        if (bytes < fileLength) {
+          totalBytesToRead = bytes;
+        }
+      }
+
-      long pendingRead = fileLength - curRead;
+      long pendingRead = totalBytesToRead - curRead;
-      while (len != -1 && curRead < fileLength) {
+      while (len != -1 && curRead < totalBytesToRead) {
-        pendingRead = fileLength - curRead;
+        pendingRead = totalBytesToRead - curRead;
-      readContainerLogs(valueStream, out, logUploadedTime);
+      readContainerLogs(valueStream, out, logUploadedTime, Long.MAX_VALUE);
+    }
+
+    /**
+     * Keep calling this till you get a {@link EOFException} for getting logs of
+     * all types for a single container for the specific bytes.
+     *
+     * @param valueStream
+     * @param out
+     * @param logUploadedTime
+     * @param bytes
+     * @throws IOException
+     */
+    public static void readAContainerLogsForALogType(
+        DataInputStream valueStream, PrintStream out, long logUploadedTime,
+        long bytes) throws IOException {
+      readContainerLogs(valueStream, out, logUploadedTime, bytes);
+      return readContainerLogsForALogType(valueStream, out, logUploadedTime,
+          logType, Long.MAX_VALUE);
+    }
+
+    /**
+     * Keep calling this till you get a {@link EOFException} for getting logs of
+     * the specific types for a single container.
+     * @param valueStream
+     * @param out
+     * @param logUploadedTime
+     * @param logType
+     * @throws IOException
+     */
+    public static int readContainerLogsForALogType(
+        DataInputStream valueStream, PrintStream out, long logUploadedTime,
+        List<String> logType, long bytes) throws IOException {
+        long toSkip = 0;
+        long totalBytesToRead = fileLength;
+        if (bytes < 0) {
+          long absBytes = Math.abs(bytes);
+          if (absBytes < fileLength) {
+            toSkip = fileLength - absBytes;
+            totalBytesToRead = absBytes;
+          }
+          long skippedBytes = valueStream.skip(toSkip);
+          if (skippedBytes != toSkip) {
+            throw new IOException("The bytes were skipped are "
+                + "different from the caller requested");
+          }
+        } else {
+          if (bytes < fileLength) {
+            totalBytesToRead = bytes;
+          }
+        }
+
-        long pendingRead = fileLength - curRead;
+        long pendingRead = totalBytesToRead - curRead;
-        while (len != -1 && curRead < fileLength) {
+        while (len != -1 && curRead < totalBytesToRead) {
-          pendingRead = fileLength - curRead;
+          pendingRead = totalBytesToRead - curRead;

INS31 INS31 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS44 INS39 INS42 INS60 INS60 INS25 INS60 INS60 INS60 MOV21 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS42 INS41 INS39 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS39 INS59 INS39 INS59 INS39 INS59 MOV32 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS32 INS42 INS34 INS42 INS42 INS42 INS34 INS60 INS25 INS60 INS25 INS25 INS42 INS34 INS42 MOV16 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS25 MOV60 INS60 MOV60 MOV60 MOV21 MOV21 INS39 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS27 INS8 UPD42 INS42 INS42 MOV42 MOV34 INS42 UPD42 INS45 INS27 INS8 INS8 INS39 INS59 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS32 INS42 INS42 INS53 INS42 INS42 INS21 UPD42 UPD42 INS42 INS42 INS34 MOV60 INS25 MOV60 INS25 INS25 INS42 INS27 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS14 INS7 UPD42 UPD39 INS27 INS8 UPD39 INS27 INS8 INS27 INS8 INS42 INS42 UPD42 INS42 INS27 INS42 INS42 INS43 INS27 INS42 INS42 UPD42 INS32 INS42 INS42 INS21 INS21 UPD42 INS42 INS42 INS53 INS42 INS42 MOV21 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS7 INS7 UPD42 UPD42 INS14 INS7 UPD42 INS40 INS42 INS27 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 UPD45 MOV45 INS45 DEL42 DEL42 DEL27