YARN-4814. ATS 1.5 timelineclient impl call flush after every event write. Contributed by Xuan Gong.

+import java.util.LinkedHashMap;
+  private final AttemptDirCache attemptDirCache;
+    int attemptDirCacheSize = conf.getInt(
+        YarnConfiguration
+            .TIMELINE_SERVICE_CLIENT_INTERNAL_ATTEMPT_DIR_CACHE_SIZE,
+        YarnConfiguration
+            .DEFAULT_TIMELINE_SERVICE_CLIENT_INTERNAL_ATTEMPT_DIR_CACHE_SIZE);
+
+    attemptDirCache =
+        new AttemptDirCache(attemptDirCacheSize, fs, activePath);
+
-    Path attemptDir = createAttemptDir(appAttemptId);
+    Path attemptDir = attemptDirCache.getAppAttemptDir(appAttemptId);
-  private Path createAttemptDir(ApplicationAttemptId appAttemptId)
-      throws IOException {
-    Path appDir = createApplicationDir(appAttemptId.getApplicationId());
-
-    Path attemptDir = new Path(appDir, appAttemptId.toString());
-    if (!fs.exists(attemptDir)) {
-      FileSystem.mkdirs(fs, attemptDir, new FsPermission(
-          APP_LOG_DIR_PERMISSIONS));
-    }
-    return attemptDir;
-  }
-
-  private Path createApplicationDir(ApplicationId appId) throws IOException {
-    Path appDir =
-        new Path(activePath, appId.toString());
-    if (!fs.exists(appDir)) {
-      FileSystem.mkdirs(fs, appDir, new FsPermission(APP_LOG_DIR_PERMISSIONS));
-    }
-    return appDir;
-  }
-
-        new Path(createAttemptDir(appAttemptId), DOMAIN_LOG_PREFIX
-            + appAttemptId.toString());
+        new Path(attemptDirCache.getAppAttemptDir(appAttemptId),
+            DOMAIN_LOG_PREFIX + appAttemptId.toString());
+
+  private static class AttemptDirCache {
+    private final int attemptDirCacheSize;
+    private final Map<ApplicationAttemptId, Path> attemptDirCache;
+    private final FileSystem fs;
+    private final Path activePath;
+
+    public AttemptDirCache(int cacheSize, FileSystem fs, Path activePath) {
+      this.attemptDirCacheSize = cacheSize;
+      this.attemptDirCache =
+          new LinkedHashMap<ApplicationAttemptId, Path>(
+              attemptDirCacheSize, 0.75f, true) {
+            private static final long serialVersionUID = 1L;
+            @Override
+            protected boolean removeEldestEntry(
+                Map.Entry<ApplicationAttemptId, Path> eldest) {
+              return size() > attemptDirCacheSize;
+            }
+          };
+      this.fs = fs;
+      this.activePath = activePath;
+    }
+
+    public Path getAppAttemptDir(ApplicationAttemptId attemptId)
+        throws IOException {
+      Path attemptDir = this.attemptDirCache.get(attemptId);
+      if (attemptDir == null) {
+        synchronized(this) {
+          attemptDir = this.attemptDirCache.get(attemptId);
+          if (attemptDir == null) {
+            attemptDir = createAttemptDir(attemptId);
+            attemptDirCache.put(attemptId, attemptDir);
+          }
+        }
+      }
+      return attemptDir;
+    }
+
+    private Path createAttemptDir(ApplicationAttemptId appAttemptId)
+        throws IOException {
+      Path appDir = createApplicationDir(appAttemptId.getApplicationId());
+
+      Path attemptDir = new Path(appDir, appAttemptId.toString());
+      if (!fs.exists(attemptDir)) {
+        FileSystem.mkdirs(fs, attemptDir, new FsPermission(
+            APP_LOG_DIR_PERMISSIONS));
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("New attempt directory created - " + attemptDir);
+        }
+      }
+      return attemptDir;
+    }
+
+    private Path createApplicationDir(ApplicationId appId) throws IOException {
+      Path appDir =
+          new Path(activePath, appId.toString());
+      if (!fs.exists(appDir)) {
+        FileSystem.mkdirs(fs, appDir,
+            new FsPermission(APP_LOG_DIR_PERMISSIONS));
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("New app directory created - " + appDir);
+        }
+      }
+      return appDir;
+    }
+  }

INS26 INS40 INS23 INS55 INS83 INS83 INS43 INS59 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS31 INS31 MOV31 MOV31 INS42 INS42 INS60 INS21 INS83 INS83 INS39 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS39 INS59 INS7 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS40 INS40 INS43 INS42 INS42 INS42 INS42 UPD42 INS22 INS42 INS22 INS14 INS22 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS33 INS51 INS25 INS25 INS42 INS42 UPD42 INS52 INS42 INS52 INS42 INS74 INS42 INS34 INS9 INS1 INS52 INS42 INS52 INS42 INS22 INS42 INS42 INS52 INS8 INS32 INS8 INS32 INS8 INS43 INS43 INS43 INS23 INS31 INS52 INS42 INS21 INS25 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS7 INS27 INS8 INS32 INS32 INS42 INS34 INS42 INS74 INS42 INS41 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS43 INS43 INS27 INS22 INS42 INS42 INS7 INS32 INS45 INS42 INS45 INS42 INS40 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42