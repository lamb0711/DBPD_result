YARN-5355: YARN Timeline Service v.2: alpha 2 (varunsaxena)

+import org.apache.hadoop.hbase.client.Query;
+import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineReaderUtils;
-import org.apache.hadoop.yarn.server.timelineservice.storage.apptoflow.AppToFlowRowKey;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.HBaseTimelineStorageUtils;
+import org.apache.hadoop.yarn.webapp.BadRequestException;
-    super(ctxt, entityFilters, toRetrieve, true);
+    super(ctxt, entityFilters, toRetrieve);
+    // Set time range for metric values.
+    setMetricsTimeRange(get);
-    TimelineReaderContext context = getContext();
-      if (context.getFlowName() == null || context.getFlowRunId() == null
-          || context.getUserId() == null) {
-        AppToFlowRowKey appToFlowRowKey =
-            new AppToFlowRowKey(context.getClusterId(), context.getAppId());
-        FlowContext flowContext =
-            lookupFlowContext(appToFlowRowKey,
-                hbaseConf, conn);
-        context.setFlowName(flowContext.getFlowName());
-        context.setFlowRunId(flowContext.getFlowRunId());
-        context.setUserId(flowContext.getUserId());
-      }
+      defaultAugmentParams(hbaseConf, conn);
+  private void setMetricsTimeRange(Query query) {
+    // Set time range for metric values.
+    HBaseTimelineStorageUtils.setMetricsTimeRange(
+        query, ApplicationColumnFamily.METRICS.getBytes(),
+        getDataToRetrieve().getMetricsTimeBegin(),
+        getDataToRetrieve().getMetricsTimeEnd());
+  }
+
+    RowKeyPrefix<ApplicationRowKey> applicationRowKeyPrefix = null;
+
-    RowKeyPrefix<ApplicationRowKey> applicationRowKeyPrefix =
-        new ApplicationRowKeyPrefix(context.getClusterId(),
-            context.getUserId(), context.getFlowName(),
-            context.getFlowRunId());
-    scan.setRowPrefixFilter(applicationRowKeyPrefix.getRowKeyPrefix());
+    // default mode, will always scans from beginning of entity type.
+    if (getFilters().getFromId() == null) {
+      applicationRowKeyPrefix = new ApplicationRowKeyPrefix(
+          context.getClusterId(), context.getUserId(), context.getFlowName(),
+          context.getFlowRunId());
+      scan.setRowPrefixFilter(applicationRowKeyPrefix.getRowKeyPrefix());
+    } else {
+      ApplicationRowKey applicationRowKey = null;
+      try {
+        applicationRowKey =
+            ApplicationRowKey.parseRowKeyFromString(getFilters().getFromId());
+      } catch (IllegalArgumentException e) {
+        throw new BadRequestException("Invalid filter fromid is provided.");
+      }
+      if (!context.getClusterId().equals(applicationRowKey.getClusterId())) {
+        throw new BadRequestException(
+            "fromid doesn't belong to clusterId=" + context.getClusterId());
+      }
+
+      // set start row
+      scan.setStartRow(applicationRowKey.getRowKey());
+
+      // get the bytes for stop row
+      applicationRowKeyPrefix = new ApplicationRowKeyPrefix(
+          context.getClusterId(), context.getUserId(), context.getFlowName(),
+          context.getFlowRunId());
+
+      // set stop row
+      scan.setStopRow(
+          HBaseTimelineStorageUtils.calculateTheClosestNextRowKeyForPrefix(
+              applicationRowKeyPrefix.getRowKeyPrefix()));
+    }
+
+
+    // Set time range for metric values.
+    setMetricsTimeRange(scan);
+
+    ApplicationRowKey rowKey = ApplicationRowKey.parseRowKey(result.getRow());
+    entity.getInfo().put(TimelineReaderUtils.FROMID_KEY,
+        rowKey.getRowKeyAsString());

MOV26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS31 INS31 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV43 INS8 INS83 INS39 INS42 INS44 INS8 INS21 INS25 MOV21 MOV25 INS43 INS42 INS21 INS25 INS21 INS60 INS21 INS32 MOV32 INS8 INS42 INS32 INS27 INS8 INS8 INS32 INS43 INS59 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS32 INS32 INS33 INS32 INS33 INS21 MOV21 INS60 INS54 INS25 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS40 INS32 INS32 INS40 UPD42 MOV42 MOV32 INS42 MOV32 UPD42 MOV42 INS32 INS42 INS7 INS43 INS59 INS8 INS12 INS38 INS8 INS32 INS7 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 MOV14 INS42 INS42 INS33 INS21 INS44 INS8 INS32 INS53 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS7 INS43 INS42 INS53 INS32 INS42 INS32 INS14 INS42 INS42 INS43 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS45 INS42 INS45 MOV32 INS32 INS42 INS42 INS42 DEL9 DEL42 DEL42 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31