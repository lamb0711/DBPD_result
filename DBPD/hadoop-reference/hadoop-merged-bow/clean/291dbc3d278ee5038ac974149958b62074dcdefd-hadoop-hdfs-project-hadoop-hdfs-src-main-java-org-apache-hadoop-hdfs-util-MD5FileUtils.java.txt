svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535 back to trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574259 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
-   * Read the md5 checksum stored alongside the given file, or null
-   * if no md5 is stored.
+   * Read the md5 file stored alongside the given data file
+   * and match the md5 file content.
-   * @return the checksum stored in dataFile.md5
+   * @return a matcher with two matched groups
+   *   where group(1) is the md5 string and group(2) is the data file path.
-  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {
-    File md5File = getDigestFileForFile(dataFile);
-
-    String md5Line;
-    
-    if (!md5File.exists()) {
-      return null;
-    }
-    
+  private static Matcher readStoredMd5(File md5File) throws IOException {
+    String md5Line;
-      throw new IOException("Invalid MD5 file at " + md5File
-          + " (does not match expected pattern)");
+      throw new IOException("Invalid MD5 file " + md5File + ": the content \""
+          + md5Line + "\" does not match the expected pattern.");
+    return matcher;
+  }
+
+  /**
+   * Read the md5 checksum stored alongside the given data file.
+   * @param dataFile the file containing data
+   * @return the checksum stored in dataFile.md5
+   */
+  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {
+    final File md5File = getDigestFileForFile(dataFile);
+    if (!md5File.exists()) {
+      return null;
+    }
+
+    final Matcher matcher = readStoredMd5(md5File);
+    final String digestString = StringUtils.byteToHexString(digest.getDigest());
+    saveMD5File(dataFile, digestString);
+  }
+
+  private static void saveMD5File(File dataFile, String digestString)
+      throws IOException {
-    String digestString = StringUtils.byteToHexString(
-        digest.getDigest());
-    
+
-    LOG.debug("Saved MD5 " + digest + " to " + md5File);
+
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Saved MD5 " + digestString + " to " + md5File);
+    }
+  }
+
+  public static void renameMD5File(File oldDataFile, File newDataFile)
+      throws IOException {
+    final File fromFile = getDigestFileForFile(oldDataFile);
+    if (!fromFile.exists()) {
+      throw new FileNotFoundException(fromFile + " does not exist.");
+    }
+
+    final String digestString = readStoredMd5(fromFile).group(1);
+    saveMD5File(newDataFile, digestString);
+
+    if (!fromFile.delete()) {
+      LOG.warn("deleting  " + fromFile.getAbsolutePath() + " FAILED");
+    }

INS26 INS40 INS31 INS31 INS31 INS29 UPD83 INS43 UPD42 INS44 MOV60 MOV29 INS83 INS83 MOV43 INS42 MOV44 INS43 INS8 MOV29 INS83 INS83 INS39 INS42 INS44 MOV44 INS43 INS8 UPD83 INS44 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS42 INS60 MOV25 INS60 MOV60 MOV60 MOV25 MOV41 INS43 INS42 INS42 MOV60 INS21 INS43 INS42 INS25 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS21 INS25 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 UPD66 INS83 INS43 INS59 INS83 INS43 INS59 INS42 INS83 INS32 INS42 INS32 INS8 INS42 INS42 INS83 INS43 INS59 INS38 INS8 INS83 INS43 INS59 INS32 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 INS32 INS32 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS34 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS27 UPD45 INS45 INS42 UPD45 UPD42 INS42 INS42 INS45 INS45 INS32 INS45 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL66