YARN-8990. Fix fair scheduler race condition in app submit and queue cleanup. (Contributed by Wilfred Spiegelenburg)

+import org.apache.hadoop.yarn.api.records.ApplicationId;
-        FSQueue queue = getQueue(queueToCreate, true, queueType, false);
+        FSQueue queue = getQueue(queueToCreate, true, queueType, false, null);
-   * true and is necessary.
-   * If the queue is not or can not be a leaf queue, i.e. it already exists as a
-   * parent queue, or one of the parents in its name is already a leaf queue,
-   * null is returned.
+   * <code>true</code> and the queue does not exist.
+   * If the queue is not or can not be a leaf queue, i.e. it already exists as
+   * a parent queue, or one of the parents in its name is already a leaf queue,
+   * <code>null</code> is returned.
+   * @param name name of the queue
+   * @param create <code>true</code> if the queue must be created if it does
+   *               not exist, <code>false</code> otherwise
+   * @return the leaf queue or <code>null</code> if the queue cannot be found
-    return getLeafQueue(name, create, true);
+    return getLeafQueue(name, create, null, true);
-  private FSLeafQueue getLeafQueue(
-      String name,
-      boolean create,
-      boolean recomputeSteadyShares) {
-    FSQueue queue = getQueue(
-        name,
-        create,
-        FSQueueType.LEAF,
-        recomputeSteadyShares
-    );
+  /**
+   * Get a leaf queue by name, creating it if the create param is
+   * <code>true</code> and the queue does not exist.
+   * If the queue is not or can not be a leaf queue, i.e. it already exists as
+   * a parent queue, or one of the parents in its name is already a leaf queue,
+   * <code>null</code> is returned.
+   *
+   * If the application will be assigned to the queue if the applicationId is
+   * not <code>null</code>
+   * @param name name of the queue
+   * @param create <code>true</code> if the queue must be created if it does
+   *               not exist, <code>false</code> otherwise
+   * @param applicationId the application ID to assign to the queue
+   * @return the leaf queue or <code>null</code> if teh queue cannot be found
+   */
+  public FSLeafQueue getLeafQueue(String name, boolean create,
+                                  ApplicationId applicationId) {
+    return getLeafQueue(name, create, applicationId, true);
+  }
+
+  private FSLeafQueue getLeafQueue(String name, boolean create,
+                                   ApplicationId applicationId,
+                                   boolean recomputeSteadyShares) {
+    FSQueue queue = getQueue(name, create, FSQueueType.LEAF,
+        recomputeSteadyShares, applicationId);
-   * true and is necessary.
-   * If the queue is not or can not be a parent queue,
-   * i.e. it already exists as a
-   * leaf queue, or one of the parents in its name is already a leaf queue,
-   * null is returned.
+   * <code>true</code> and the queue does not exist.
+   * If the queue is not or can not be a parent queue, i.e. it already exists
+   * as a leaf queue, or one of the parents in its name is already a leaf
+   * queue, <code>null</code> is returned.
+   * @param name name of the queue
+   * @param create <code>true</code> if the queue must be created if it does
+   *               not exist, <code>false</code> otherwise
+   * @return the parent queue or <code>null</code> if the queue cannot be found
-  public FSParentQueue getParentQueue(
-      String name,
-      boolean create,
+  /**
+   * Get a parent queue by name, creating it if the create param is
+   * <code>true</code> and the queue does not exist.
+   * If the queue is not or can not be a parent queue, i.e. it already exists
+   * as a leaf queue, or one of the parents in its name is already a leaf
+   * queue, <code>null</code> is returned.
+   *
+   * The root part of the name is optional, so a queue underneath the root
+   * named "queue1" could be referred to  as just "queue1", and a queue named
+   * "queue2" underneath a parent named "parent1" that is underneath the root
+   * could be referred to as just "parent1.queue2".
+   * @param name name of the queue
+   * @param create <code>true</code> if the queue must be created if it does
+   *               not exist, <code>false</code> otherwise
+   * @param recomputeSteadyShares <code>true</code> if the steady fair share
+   *                              should be recalculated when a queue is added,
+   *                              <code>false</code> otherwise
+   * @return the parent queue or <code>null</code> if the queue cannot be found
+   */
+  public FSParentQueue getParentQueue(String name, boolean create,
-    FSQueue queue = getQueue(
-        name,
-        create,
-        FSQueueType.PARENT,
-        recomputeSteadyShares
-    );
+    FSQueue queue = getQueue(name, create, FSQueueType.PARENT,
+        recomputeSteadyShares, null);
-  private FSQueue getQueue(
-      String name,
-      boolean create,
-      FSQueueType queueType,
-      boolean recomputeSteadyShares) {
+  private FSQueue getQueue(String name, boolean create, FSQueueType queueType,
+      boolean recomputeSteadyShares, ApplicationId applicationId) {
+      // At this point the queue exists and we need to assign the app if to the
+      // but only to a leaf queue
+      if (applicationId != null && queue instanceof FSLeafQueue) {
+        ((FSLeafQueue)queue).addAssignedApp(applicationId);
+      }
-    if (recompute) {
+    // Don't recompute if it is an existing queue or no change was made
+    if (recompute && queue != null) {
-        FSQueue queue = getQueue(name, true, queueType, false);
+        FSQueue queue = getQueue(name, true, queueType, false, null);

INS26 INS40 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS44 INS29 INS44 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS41 INS43 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS42 MOV43 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 MOV43 INS42 INS27 INS33 INS42 INS42 INS42 INS42 INS9 INS25 INS42 INS27 INS42 INS33 INS27 INS8 INS42 INS33 INS27 INS62 INS21 INS42 INS33 INS42 INS43 INS32 INS33 INS42 INS36 INS42 INS42 INS11 INS33 INS43 INS42 INS42 DEL66 DEL42