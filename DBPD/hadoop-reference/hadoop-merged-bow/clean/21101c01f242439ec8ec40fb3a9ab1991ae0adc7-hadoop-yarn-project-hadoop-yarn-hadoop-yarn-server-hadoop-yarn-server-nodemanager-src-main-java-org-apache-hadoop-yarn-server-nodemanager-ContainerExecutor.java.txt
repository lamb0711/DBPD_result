YARN-2190. Added CPU and memory limit options to the default container executor for Windows containers. Contributed by Chuan Liu

+import org.apache.hadoop.yarn.api.records.Resource;
+
+  protected String[] getRunCommand(String command, String groupId,
+      String userName, Path pidFile, Configuration conf) {
+    return getRunCommand(command, groupId, userName, pidFile, conf, null);
+  }
-      String userName, Path pidFile, Configuration conf) {
+      String userName, Path pidFile, Configuration conf, Resource resource) {
-      return new String[] { Shell.WINUTILS, "task", "create", groupId,
+      int cpuRate = -1;
+      int memory = -1;
+      if (resource != null) {
+        if (conf
+            .getBoolean(
+                YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,
+                YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {
+          memory = resource.getMemory();
+        }
+
+        if (conf.getBoolean(
+            YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,
+            YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {
+          int containerVCores = resource.getVirtualCores();
+          int nodeVCores = conf.getInt(YarnConfiguration.NM_VCORES,
+              YarnConfiguration.DEFAULT_NM_VCORES);
+          // cap overall usage to the number of cores allocated to YARN
+          int nodeCpuPercentage = Math
+              .min(
+                  conf.getInt(
+                      YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT,
+                      YarnConfiguration.DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT),
+                  100);
+          nodeCpuPercentage = Math.max(0, nodeCpuPercentage);
+          if (nodeCpuPercentage == 0) {
+            String message = "Illegal value for "
+                + YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
+                + ". Value cannot be less than or equal to 0.";
+            throw new IllegalArgumentException(message);
+          }
+          float yarnVCores = (nodeCpuPercentage * nodeVCores) / 100.0f;
+          // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit
+          // should be set as 20 * 100. The following setting is equal to:
+          // 100 * (100 * (vcores / Total # of cores allocated to YARN))
+          cpuRate = Math.min(10000,
+              (int) ((containerVCores * 10000) / yarnVCores));
+        }
+      }
+      return new String[] { Shell.WINUTILS, "task", "create", "-m",
+          String.valueOf(memory), "-c", String.valueOf(cpuRate), groupId,

INS26 INS40 INS31 INS83 INS5 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS43 INS85 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS60 INS60 INS25 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS38 INS42 INS38 INS42 INS33 INS25 INS25 INS34 INS34 INS32 INS8 INS32 INS8 INS45 INS32 INS45 INS32 INS42 INS42 INS40 INS40 INS21 INS42 INS42 INS40 INS40 INS60 INS60 INS60 INS21 INS25 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS39 INS59 INS39 INS59 INS39 INS59 INS7 INS27 INS8 INS39 INS59 INS7 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS34 INS60 INS53 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS32 INS34 INS42 INS42 INS34 INS42 INS43 INS59 INS14 INS36 INS34 INS42 INS42 INS34 INS11 INS42 INS42 INS40 INS40 INS42 INS42 INS27 INS43 INS42 INS27 INS39 INS36 INS45 INS40 INS45 INS42 INS42 INS42 INS27 INS36 INS42 INS27 INS42 INS34