HDDS-972. Add support for configuring multiple OMs. Contributed by Hanisha Koneru.

+import com.google.common.base.Joiner;
+import java.util.Collection;
+import java.util.Collections;
+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;
+
+
+  /**
+   * Add non empty and non null suffix to a key.
+   */
+  private static String addSuffix(String key, String suffix) {
+    if (suffix == null || suffix.isEmpty()) {
+      return key;
+    }
+    assert !suffix.startsWith(".") :
+        "suffix '" + suffix + "' should not already have '.' prepended.";
+    return key + "." + suffix;
+  }
+
+  /**
+   * Concatenate list of suffix strings '.' separated.
+   */
+  private static String concatSuffixes(String... suffixes) {
+    if (suffixes == null) {
+      return null;
+    }
+    return Joiner.on(".").skipNulls().join(suffixes);
+  }
+
+  /**
+   * Return configuration key of format key.suffix1.suffix2...suffixN.
+   */
+  public static String addKeySuffixes(String key, String... suffixes) {
+    String keySuffix = concatSuffixes(suffixes);
+    return addSuffix(key, keySuffix);
+  }
+
+  /**
+   * Match input address to local address.
+   * Return true if it matches, false otherwsie.
+   */
+  public static boolean isAddressLocal(InetSocketAddress addr) {
+    return NetUtils.isLocalAddress(addr.getAddress());
+  }
+
+  /**
+   * Get a collection of all omNodeIds for the given omServiceId.
+   */
+  public static Collection<String> getOMNodeIds(Configuration conf,
+      String omServiceId) {
+    String key = addSuffix(OZONE_OM_NODES_KEY, omServiceId);
+    return conf.getTrimmedStringCollection(key);
+  }
+
+  /**
+   * @return <code>coll</code> if it is non-null and non-empty. Otherwise,
+   * returns a list with a single null value.
+   */
+  public static Collection<String> emptyAsSingletonNull(Collection<String>
+      coll) {
+    if (coll == null || coll.isEmpty()) {
+      return Collections.singletonList(null);
+    } else {
+      return coll;
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS8 INS65 INS42 INS43 INS42 INS43 INS42 INS25 INS6 INS41 INS65 INS42 INS43 INS42 INS25 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS60 INS41 INS65 INS43 INS42 INS41 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS60 INS41 INS65 INS43 INS43 INS74 INS42 INS25 INS66 INS42 INS42 INS27 INS8 INS38 INS27 INS27 INS66 INS42 INS27 INS8 INS32 INS66 INS42 INS42 INS43 INS59 INS32 INS66 INS66 INS42 INS32 INS66 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS66 INS66 INS42 INS42 INS43 INS43 INS27 INS8 INS8 INS27 INS32 INS41 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS33 INS41 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS41 INS41 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS45 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS33