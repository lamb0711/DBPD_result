MAPREDUCE-7047. Make HAR tool support IndexedLogAggregtionController. (Xuan Gong via wangda)

Change-Id: Ice5ae1c706f2476361997dcbb29f2c33c77d4f0c

-import org.apache.hadoop.yarn.logaggregation.LogAggregationUtils;
+import org.apache.hadoop.yarn.logaggregation.filecontroller.LogAggregationFileController;
+import org.apache.hadoop.yarn.logaggregation.filecontroller.LogAggregationFileControllerFactory;
+  private Set<Path> workingDirs;
+
+    workingDirs = new HashSet<>();
-    Path remoteRootLogDir = new Path(conf.get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String suffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);
-    Path workingDir = new Path(remoteRootLogDir, "archive-logs-work");
-    if (verbose) {
-      LOG.info("Remote Log Dir Root: " + remoteRootLogDir);
-      LOG.info("Log Suffix: " + suffix);
-      LOG.info("Working Dir: " + workingDir);
+
+    LogAggregationFileControllerFactory factory =
+        new LogAggregationFileControllerFactory(conf);
+    List<LogAggregationFileController> fileControllers = factory
+        .getConfiguredLogAggregationFileControllerList();
+    if (fileControllers == null || fileControllers.isEmpty()) {
+      LOG.info("Can not find any valid fileControllers.");
+      if (verbose) {
+        LOG.info("The configurated fileControllers:"
+            + YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS);
+      }
+      return 0;
-      if (prepareWorkingDir(fs, workingDir)) {
-
-        checkFilesAndSeedApps(fs, remoteRootLogDir, suffix);
+      // find eligibleApplications for all the fileControllers
+      int previousTotal = 0;
+      for (LogAggregationFileController fileController : fileControllers) {
+        Path remoteRootLogDir = fileController.getRemoteRootLogDir();
+        String suffix = fileController.getRemoteRootLogDirSuffix();
+        Path workingDir = new Path(remoteRootLogDir, "archive-logs-work");
+        if (verbose) {
+          LOG.info("LogAggregationFileController:" + fileController
+              .getClass().getName());
+          LOG.info("Remote Log Dir Root: " + remoteRootLogDir);
+          LOG.info("Log Suffix: " + suffix);
+          LOG.info("Working Dir: " + workingDir);
+        }
+        checkFilesAndSeedApps(fs, remoteRootLogDir, suffix, workingDir);
-        checkMaxEligible();
-
-        if (eligibleApplications.isEmpty()) {
-          LOG.info("No eligible applications to process");
-          exitCode = 0;
-        } else {
-          StringBuilder sb =
-              new StringBuilder("Will process the following applications:");
-          for (AppInfo app : eligibleApplications) {
-            sb.append("\n\t").append(app.getAppId());
-          }
-          LOG.info(sb.toString());
-
-          File localScript = File.createTempFile("hadoop-archive-logs-", ".sh");
-          generateScript(localScript, workingDir, remoteRootLogDir, suffix);
-
-          exitCode = runDistributedShell(localScript) ? 0 : 1;
+        if (eligibleApplications.size() > previousTotal) {
+          workingDirs.add(workingDir);
+          previousTotal = eligibleApplications.size();
+      checkMaxEligible();
+      if (workingDirs.isEmpty() || eligibleApplications.isEmpty()) {
+        LOG.info("No eligible applications to process");
+        return 0;
+      }
+      for (Path workingDir : workingDirs) {
+        if (!prepareWorkingDir(fs, workingDir)) {
+          LOG.error("Failed to create the workingDir:"
+              + workingDir.toString());
+          return 1;
+        }
+      }
+      StringBuilder sb =
+          new StringBuilder("Will process the following applications:");
+      for (AppInfo app : eligibleApplications) {
+        sb.append("\n\t").append(app.getAppId());
+      }
+      LOG.info(sb.toString());
+      File localScript = File.createTempFile("hadoop-archive-logs-", ".sh");
+      generateScript(localScript);
+
+      exitCode = runDistributedShell(localScript) ? 0 : 1;
-        fs.delete(workingDir, true);
+        for (Path workingDir : workingDirs) {
+          fs.delete(workingDir, true);
+        }
-      for (Iterator<AppInfo> it = eligibleApplications.iterator();
-           it.hasNext();) {
+      for (Iterator<AppInfo> it = eligibleApplications
+          .iterator(); it.hasNext();) {
-       String suffix) throws IOException {
+       String suffix, Path workingDir) throws IOException {
-                eligibleApplications.add(
-                    new AppInfo(appLogPath.getName(), userLogPath.getName()));
+                AppInfo context = new AppInfo();
+                context.setAppId(appLogPath.getName());
+                context.setUser(userLogPath.getName());
+                context.setSuffix(suffix);
+                context.setRemoteRootLogDir(remoteRootLogDir);
+                context.setWorkingDir(workingDir);
+                eligibleApplications.add(context);
-    if (maxEligible > 0 && eligibleApplications.size() > maxEligible) {
+    if (maxEligible > 0 && eligibleApplications.size()
+        > maxEligible) {
-        LOG.info("Too many applications (" + eligibleApplications.size() +
+        LOG.info("Too many applications (" + eligibleApplications
+            .size() +
-      Collections.sort(sortedApplications, new Comparator<AppInfo>() {
+      Collections.sort(sortedApplications, new Comparator<
+          AppInfo>() {
+        workingDir="/tmp/logs/archive-logs-work"
+        remoteRootLogDir="/tmp/logs"
+        suffix="logs"
+        workingDir="/tmp/logs/archive-logs-work"
+        remoteRootLogDir="/tmp/logs"
+        suffix="logs"
-  "$HADOOP_HOME"/bin/hadoop org.apache.hadoop.tools.HadoopArchiveLogsRunner -appId "$appId" -user "$user" -workingDir /tmp/logs/archive-logs-work -remoteRootLogDir /tmp/logs -suffix logs
+  "$HADOOP_HOME"/bin/hadoop org.apache.hadoop.tools.HadoopArchiveLogsRunner -appId "$appId" -user "$user" -workingDir "$workingDir" -remoteRootLogDir "$remoteRootLogDir" -suffix "$suffix"
-  void generateScript(File localScript, Path workingDir,
-        Path remoteRootLogDir, String suffix) throws IOException {
+  void generateScript(File localScript) throws IOException {
-      for (AppInfo app : eligibleApplications) {
+      for (AppInfo context : eligibleApplications) {
-        fw.write(app.getAppId());
+        fw.write(context.getAppId());
-        fw.write(app.getUser());
+        fw.write(context.getUser());
+        fw.write("\"\n\tworkingDir=\"");
+        fw.write(context.getWorkingDir().toString());
+        fw.write("\"\n\tremoteRootLogDir=\"");
+        fw.write(context.getRemoteRootLogDir().toString());
+        fw.write("\"\n\tsuffix=\"");
+        fw.write(context.getSuffix());
-      fw.write(workingDir.toString());
+      fw.write("\"$workingDir\"");
-      fw.write(remoteRootLogDir.toString());
+      fw.write("\"$remoteRootLogDir\"");
-      fw.write(suffix);
+      fw.write("\"$suffix\"");
+    private Path remoteRootLogDir;
+    private String suffix;
+    private Path workingDir;
+    AppInfo() {}
+
-      this.appId = appId;
-      this.user = user;
-      this.finishTime = 0L;
+      this.setAppId(appId);
+      this.setUser(user);
+    public void setAppId(String appId) {
+      this.appId = appId;
+    }
+
+    public Path getRemoteRootLogDir() {
+      return remoteRootLogDir;
+    }
+
+    public void setRemoteRootLogDir(Path remoteRootLogDir) {
+      this.remoteRootLogDir = remoteRootLogDir;
+    }
+
+    public String getSuffix() {
+      return suffix;
+    }
+
+    public void setSuffix(String suffix) {
+      this.suffix = suffix;
+    }
+
+    public Path getWorkingDir() {
+      return workingDir;
+    }
+
+    public void setWorkingDir(Path workingDir) {
+      this.workingDir = workingDir;
+    }
+
+    public void setUser(String user) {
+      this.user = user;
+    }
+
-      return !(user != null
-          ? !user.equals(appInfo.user) : appInfo.user != null);
+
+      if (user != null
+          ? !user.equals(appInfo.user) : appInfo.user != null) {
+        return false;
+      }
+
+      if (suffix != null
+          ? !suffix.equals(appInfo.suffix) : appInfo.suffix != null) {
+        return false;
+      }
+
+      if (workingDir != null ? !workingDir.equals(
+          appInfo.workingDir) : appInfo.workingDir != null) {
+        return false;
+      }
+
+      if (remoteRootLogDir != null ? !remoteRootLogDir.equals(
+          appInfo.remoteRootLogDir) : appInfo.remoteRootLogDir != null) {
+        return false;
+      }
+
+      return Long.compare(finishTime, appInfo.finishTime) == 0;
+      result = 31 * result + (suffix != null ? suffix.hashCode() : 0);
+      result = 31 * result + (workingDir != null ? workingDir.hashCode() : 0);
+      result = 31 * result + (remoteRootLogDir != null ?
+          remoteRootLogDir.hashCode() : 0);
+      result = 31 * result + Long.valueOf(finishTime).hashCode();

INS26 UPD40 INS40 INS23 MOV31 INS83 INS74 INS59 INS44 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS43 INS42 INS21 INS25 INS43 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS42 INS8 INS42 INS44 INS44 INS8 INS83 INS39 UPD42 INS83 MOV43 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS42 INS42 INS7 INS43 INS74 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS41 INS21 INS42 INS41 INS21 INS42 INS41 INS21 MOV21 INS25 INS25 INS25 INS25 INS41 INS21 INS21 INS21 INS21 INS42 INS14 INS42 UPD42 INS43 INS43 UPD42 INS27 INS32 INS21 INS25 INS41 INS60 INS70 MOV21 INS25 INS70 MOV60 MOV70 MOV21 MOV60 INS21 MOV21 INS42 INS42 INS32 INS32 INS42 INS7 INS42 INS7 INS42 INS7 MOV16 INS8 INS16 INS8 INS16 INS8 INS16 INS8 INS27 INS7 INS7 INS7 INS7 INS74 INS43 INS42 INS42 INS42 UPD42 UPD42 INS42 INS33 INS42 INS42 INS32 INS42 INS8 INS34 INS39 INS59 INS44 INS42 INS8 INS27 MOV8 INS44 INS42 INS8 INS32 INS8 INS52 INS42 INS42 INS52 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS41 INS27 INS38 INS27 INS41 INS27 INS38 INS27 INS41 INS27 INS38 INS27 INS41 INS32 INS34 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS43 INS42 INS42 INS42 INS45 INS21 INS42 INS34 INS43 INS42 INS60 INS60 MOV60 MOV25 MOV21 MOV21 MOV25 INS32 MOV32 INS41 INS43 INS42 INS25 INS42 INS42 INS70 MOV21 UPD42 INS21 INS21 INS21 INS21 INS21 INS21 INS45 INS45 INS45 INS52 INS42 INS52 INS42 INS52 INS42 INS9 INS42 INS33 INS32 INS40 INS33 INS9 INS42 INS33 INS32 INS40 INS33 INS9 INS42 INS33 INS32 INS40 INS33 INS9 INS42 INS42 INS42 INS40 INS27 INS36 INS27 INS36 INS27 INS36 INS27 INS32 INS42 INS32 INS42 MOV43 INS59 MOV43 INS59 INS27 INS42 INS42 INS34 INS42 INS38 INS8 INS44 INS42 MOV8 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS34 INS42 INS16 INS34 INS42 INS16 INS34 INS42 INS16 INS34 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS21 INS42 INS32 INS42 INS21 INS21 MOV32 INS21 INS41 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS27 INS32 INS34 INS27 INS32 INS34 INS27 INS32 INS34 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS7 INS32 INS34 INS42 UPD42 UPD42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS32 INS42 UPD42 MOV42 INS45 MOV32 INS32 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 MOV43 INS59 INS32 INS32 INS32 INS32 INS32 INS42 INS14 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL14 DEL42 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL34 DEL7 DEL21 DEL36 DEL38 DEL41