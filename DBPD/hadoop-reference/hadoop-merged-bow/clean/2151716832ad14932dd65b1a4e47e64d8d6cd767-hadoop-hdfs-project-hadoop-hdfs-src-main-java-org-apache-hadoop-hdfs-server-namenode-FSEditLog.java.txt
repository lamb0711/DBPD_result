HDFS-7964. Add support for async edit logging. Contributed by Daryn Sharp.

+import org.apache.hadoop.hdfs.server.namenode.FSEditLogOp.RollingUpgradeFinalizeOp;
+import org.apache.hadoop.hdfs.server.namenode.FSEditLogOp.RollingUpgradeStartOp;
-  static final Log LOG = LogFactory.getLog(FSEditLog.class);
+  public static final Log LOG = LogFactory.getLog(FSEditLog.class);
-  
+
-  private final ThreadLocal<OpInstanceCache> cache =
-      new ThreadLocal<OpInstanceCache>() {
-    @Override
-    protected OpInstanceCache initialValue() {
-      return new OpInstanceCache();
-    }
-  };
-  
+  protected final OpInstanceCache cache = new OpInstanceCache();
+
+  static FSEditLog newInstance(Configuration conf, NNStorage storage,
+      List<URI> editsDirs) {
+    boolean asyncEditLogging = conf.getBoolean(
+        DFSConfigKeys.DFS_NAMENODE_EDITS_ASYNC_LOGGING,
+        DFSConfigKeys.DFS_NAMENODE_EDITS_ASYNC_LOGGING_DEFAULT);
+    LOG.info("Edit logging is async:" + asyncEditLogging);
+    return asyncEditLogging
+        ? new FSEditLogAsync(conf, storage, editsDirs)
+        : new FSEditLog(conf, storage, editsDirs);
+  }
+
-      
-      long start = beginTransaction();
-      op.setTransactionId(txid);
-      try {
-        editLogStream.write(op);
-      } catch (IOException ex) {
-        // All journals failed, it is handled in logSync.
-      } finally {
-        op.reset();
-      }
-
-      endTransaction(start);
-      
-      needsSync = shouldForceSync();
+      needsSync = doEditTransaction(op);
-    
+
+  synchronized boolean doEditTransaction(final FSEditLogOp op) {
+    long start = beginTransaction();
+    op.setTransactionId(txid);
+
+    try {
+      editLogStream.write(op);
+    } catch (IOException ex) {
+      // All journals failed, it is handled in logSync.
+    } finally {
+      op.reset();
+    }
+    endTransaction(start);
+    return shouldForceSync();
+  }
+
-    // Record the most recent transaction ID as our own id
-    synchronized (this) {
-      TransactionId id = myTransactionId.get();
-      id.txid = txid;
-    }
-    // Then make sure we're synced up to this point
-    logSync();
+    // Make sure we're synced up to the most recent transaction ID.
+    logSync(getLastWrittenTxId());
-  
+
-    long syncStart = 0;
+    // Fetch the transactionId of this thread.
+    logSync(myTransactionId.get().txid);
+  }
-    // Fetch the transactionId of this thread. 
-    long mytxid = myTransactionId.get().txid;
-    
+  protected void logSync(long mytxid) {
+    long syncStart = 0;
+    long editsBatchedInSync = 0;
-            numTransactionsBatchedInSync++;
-            if (metrics != null) {
-              // Metrics is non-null only when used inside name node
-              metrics.incrTransactionsBatchedInSync();
-            }
-     
-          // now, this thread will do the sync
+
+          // now, this thread will do the sync.  track if other edits were
+          // included in the sync - ie. batched.  if this is the only edit
+          // synced then the batched count is 0
+          editsBatchedInSync = txid - synctxid - 1;
-  
+
+        metrics.incrTransactionsBatchedInSync(editsBatchedInSync);
+        numTransactionsBatchedInSync += editsBatchedInSync;
-    RollingUpgradeOp op = RollingUpgradeOp.getStartInstance(cache.get());
+    RollingUpgradeStartOp op = RollingUpgradeStartOp.getInstance(cache.get());
-    RollingUpgradeOp op = RollingUpgradeOp.getFinalizeInstance(cache.get());
+    RollingUpgradeOp op = RollingUpgradeFinalizeOp.getInstance(cache.get());
-      logSync();
+    // always sync to ensure all edits are flushed.
+    logSyncAll();
+  @VisibleForTesting
+  // needed by async impl to restart thread when edit log is replaced by a
+  // spy because a spy is a shallow copy
+  public void restart() {
+  }
+

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 UPD83 MOV83 MOV83 MOV43 INS59 INS83 INS43 INS42 INS44 INS44 INS44 INS8 MOV29 MOV39 UPD42 MOV42 INS44 MOV8 INS83 UPD39 UPD42 MOV8 MOV29 INS39 INS42 INS8 MOV29 INS83 INS39 INS42 INS8 UPD83 INS44 MOV60 INS8 MOV8 INS78 INS83 INS39 INS42 INS8 INS42 MOV14 UPD42 MOV42 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS21 MOV41 INS83 INS43 INS42 INS41 INS21 MOV21 INS39 INS42 INS60 MOV21 MOV21 MOV21 MOV21 INS21 INS42 INS42 UPD42 MOV42 UPD43 MOV43 UPD43 MOV43 INS39 INS59 INS32 INS16 UPD42 MOV42 INS8 MOV32 INS32 INS43 INS59 INS32 UPD42 UPD42 INS42 INS32 INS42 INS42 INS27 INS42 INS14 INS14 MOV6 MOV21 INS21 MOV25 UPD42 MOV42 INS32 MOV22 UPD42 INS34 INS42 INS42 INS32 MOV42 INS42 INS42 INS42 INS40 INS40 INS45 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS7 UPD42 MOV42 INS42 INS42 MOV32 UPD42 UPD42 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS32 INS7 INS25 INS21 INS42 INS42 INS42 INS42 INS42 MOV27 INS8 INS7 INS41 INS42 INS27 UPD42 MOV42 INS42 INS34 DEL43 DEL43 DEL74 DEL42 DEL74 DEL42 DEL78 DEL83 DEL42 DEL8 DEL31 DEL1 DEL14 DEL59 DEL23 DEL42 DEL7 DEL21 DEL52 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL7 DEL21 DEL8 DEL51 DEL8 DEL31 DEL42 DEL37 DEL21 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL32 DEL21