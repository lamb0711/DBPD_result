Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

+import java.util.HashMap;
+import java.util.Map;
+    private Map<String, Node> childrenMap = new HashMap<String, Node>();
-      if (!isAncestor(n))
-        throw new IllegalArgumentException(n.getName()+", which is located at "
-                +n.getNetworkLocation()+", is not a decendent of "
-                +getPath(this));
+      if (!isAncestor(n)) {
+        throw new IllegalArgumentException(n.getName()
+            + ", which is located at " + n.getNetworkLocation()
+            + ", is not a descendent of " + getPath(this));
+      }
-        for(int i=0; i<children.size(); i++) {
-          if (children.get(i).getName().equals(n.getName())) {
-            children.set(i, n);
-            return false;
+        Node prev = childrenMap.put(n.getName(), n);
+        if (prev != null) {
+          for(int i=0; i<children.size(); i++) {
+            if (children.get(i).getName().equals(n.getName())) {
+              children.set(i, n);
+              return false;
+            }
-        InnerNode parentNode = null;
-        for(int i=0; i<children.size(); i++) {
-          if (children.get(i).getName().equals(parentName)) {
-            parentNode = (InnerNode)children.get(i);
-            break;
-          }
-        }
+        InnerNode parentNode = (InnerNode)childrenMap.get(parentName);
+          childrenMap.put(parentNode.getName(), parentNode);
-      String parent = n.getNetworkLocation();
-      String currentPath = getPath(this);
-      if (!isAncestor(n))
+      if (!isAncestor(n)) {
-                                           +", which is located at "
-                                           +parent+", is not a descendent of "+currentPath);
+            + ", which is located at " + n.getNetworkLocation()
+            + ", is not a descendent of " + getPath(this));
+      }
-        for(int i=0; i<children.size(); i++) {
-          if (children.get(i).getName().equals(n.getName())) {
-            children.remove(i);
-            numOfLeaves--;
-            n.setParent(null);
-            return true;
+        if (childrenMap.containsKey(n.getName())) {
+          for (int i=0; i<children.size(); i++) {
+            if (children.get(i).getName().equals(n.getName())) {
+              children.remove(i);
+              childrenMap.remove(n.getName());
+              numOfLeaves--;
+              n.setParent(null);
+              return true;
+            }
-        InnerNode parentNode = null;
-        int i;
-        for(i=0; i<children.size(); i++) {
-          if (children.get(i).getName().equals(parentName)) {
-            parentNode = (InnerNode)children.get(i);
-            break;
-          }
-        }
-        if (parentNode==null) {
+        InnerNode parentNode = (InnerNode)childrenMap.get(parentName);
+        if (parentNode == null) {
-            children.remove(i);
+            for(int i=0; i < children.size(); i++) {
+              if (children.get(i).getName().equals(parentName)) {
+                children.remove(i);
+                childrenMap.remove(parentName);
+                break;
+              }
+            }
-      Node childnode = null;
-      for(int i=0; i<children.size(); i++) {
-        if (children.get(i).getName().equals(path[0])) {
-          childnode = children.get(i);
-        }
-      }
+      Node childnode = childrenMap.get(path[0]);
-          int excludedIndex = children.indexOf(excludedNode);
-          if (excludedIndex != -1 && leafIndex >= 0) {
-            // excluded node is one of the children so adjust the leaf index
-            leafIndex = leafIndex>=excludedIndex ? leafIndex+1 : leafIndex;
+          if (excludedNode != null &&
+              childrenMap.containsKey(excludedNode.getName())) {
+            int excludedIndex = children.indexOf(excludedNode);
+            if (excludedIndex != -1 && leafIndex >= 0) {
+              // excluded node is one of the children so adjust the leaf index
+              leafIndex = leafIndex>=excludedIndex ? leafIndex+1 : leafIndex;
+            }
-      String oldTopoStr = this.toString();
-            " at depth " + newDepth + " to topology:\n" + oldTopoStr);
+            " at depth " + newDepth + " to topology:\n" + this.toString());

INS26 INS26 INS40 INS40 INS23 INS83 INS74 INS59 INS43 MOV43 INS43 INS42 INS14 INS60 INS42 INS42 INS74 INS8 INS8 INS8 MOV43 INS59 INS43 MOV43 INS43 MOV53 INS60 INS25 INS60 INS53 INS25 MOV41 INS42 INS32 INS25 INS42 INS42 INS43 INS59 INS27 INS8 MOV43 INS59 MOV14 INS32 MOV8 UPD42 MOV42 MOV42 MOV2 INS42 INS8 INS42 INS42 INS32 INS42 INS33 MOV24 INS42 INS11 INS21 INS42 INS42 INS32 INS11 MOV25 UPD45 INS42 INS42 INS32 INS42 MOV43 MOV32 INS32 MOV32 MOV32 INS42 INS42 MOV43 INS32 INS27 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV24 INS27 INS32 MOV32 INS42 INS42 MOV58 INS42 INS33 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS42 MOV32 INS32 MOV42 INS42 INS42 INS42 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL11 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL53 DEL33 DEL39 DEL42 DEL59 DEL60 DEL42 DEL34 DEL7 DEL42 DEL32 DEL11 DEL7 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42