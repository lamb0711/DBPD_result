YARN-1318. Promoted AdminService to an Always-On service and merged it into RMHAProtocolService. Contributed by Karthik Kambatla.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547212 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
+import com.google.protobuf.BlockingService;
-import org.apache.hadoop.ipc.Server;
+import org.apache.hadoop.ha.HAServiceProtocol;
+import org.apache.hadoop.ha.HAServiceStatus;
+import org.apache.hadoop.ha.HealthCheckFailedException;
+import org.apache.hadoop.ha.ServiceFailedException;
+import org.apache.hadoop.ha.proto.HAServiceProtocolProtos;
+import org.apache.hadoop.ha.protocolPB.HAServiceProtocolPB;
+import org.apache.hadoop.ha.protocolPB.HAServiceProtocolServerSideTranslatorPB;
+import org.apache.hadoop.ipc.ProtobufRpcEngine;
+import org.apache.hadoop.ipc.RPC;
+import org.apache.hadoop.ipc.RPC.Server;
+import org.apache.hadoop.yarn.conf.HAUtil;
+import org.apache.hadoop.yarn.exceptions.RMNotYetActiveException;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceScheduler;
-public class AdminService extends AbstractService implements ResourceManagerAdministrationProtocol {
+public class AdminService extends AbstractService implements
+    HAServiceProtocol, ResourceManagerAdministrationProtocol {
-  private final Configuration conf;
-  private final ResourceScheduler scheduler;
-  private final NodesListManager nodesListManager;
-  
-  private final ClientRMService clientRMService;
-  private final ApplicationMasterService applicationMasterService;
-  private final ResourceTrackerService resourceTrackerService;
-  
+  private final ResourceManager rm;
+  @VisibleForTesting
+  protected HAServiceProtocol.HAServiceState
+      haState = HAServiceProtocol.HAServiceState.INITIALIZING;
+  boolean haEnabled;
+
-  public AdminService(Configuration conf, ResourceScheduler scheduler, 
-      RMContext rmContext, NodesListManager nodesListManager, 
-      ClientRMService clientRMService, 
-      ApplicationMasterService applicationMasterService,
-      ResourceTrackerService resourceTrackerService) {
+  public AdminService(ResourceManager rm, RMContext rmContext) {
-    this.conf = conf;
-    this.scheduler = scheduler;
+    this.rm = rm;
-    this.nodesListManager = nodesListManager;
-    this.clientRMService = clientRMService;
-    this.applicationMasterService = applicationMasterService;
-    this.resourceTrackerService = resourceTrackerService;
-  public void serviceInit(Configuration conf) throws Exception {
+  public synchronized void serviceInit(Configuration conf) throws Exception {
+    haEnabled = HAUtil.isHAEnabled(conf);
+    if (haEnabled) {
+      HAUtil.verifyAndSetConfiguration(conf);
+      rm.setConf(conf);
+    }
+    rm.createAndInitActiveServices();
+
-  protected void serviceStart() throws Exception {
-    Configuration conf = getConfig();
-    YarnRPC rpc = YarnRPC.create(conf);
-    this.server =
-      rpc.getServer(ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,
-          conf, null,
-          conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT, 
-              YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));
-    
-    // Enable service authorization?
-    if (conf.getBoolean(
-        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, 
-        false)) {
-      refreshServiceAcls(conf, new RMPolicyProvider());
+  protected synchronized void serviceStart() throws Exception {
+    if (haEnabled) {
+      transitionToStandby(true);
+    } else {
+      transitionToActive();
-
-    this.server.start();
-    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,
-                           server.getListenerAddress());
+    startServer();
-  protected void serviceStop() throws Exception {
+  protected synchronized void serviceStop() throws Exception {
+    stopServer();
+    transitionToStandby(false);
+    haState = HAServiceState.STOPPING;
+    super.serviceStop();
+  }
+
+  protected void startServer() throws Exception {
+    Configuration conf = getConfig();
+    YarnRPC rpc = YarnRPC.create(conf);
+    this.server = (Server) rpc.getServer(
+        ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,
+        conf, null,
+        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,
+            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));
+
+    // Enable service authorization?
+    if (conf.getBoolean(
+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,
+        false)) {
+      refreshServiceAcls(conf, new RMPolicyProvider());
+    }
+
+    if (haEnabled) {
+      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,
+          ProtobufRpcEngine.class);
+
+      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator =
+          new HAServiceProtocolServerSideTranslatorPB(this);
+      BlockingService haPbService =
+          HAServiceProtocolProtos.HAServiceProtocolService
+              .newReflectiveBlockingService(haServiceProtocolXlator);
+      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,
+          HAServiceProtocol.class, haPbService);
+    }
+
+    this.server.start();
+    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,
+        server.getListenerAddress());
+  }
+
+  protected void stopServer() throws Exception {
-    super.serviceStop();
+  }
+
+  private UserGroupInformation checkAccess(String method) throws IOException {
+    return RMServerUtils.verifyAccess(adminAcl, method, LOG);
-      return RMServerUtils.verifyAccess(adminAcl, method, LOG);
+      return checkAccess(method);
-  
+
+  private synchronized boolean isRMActive() {
+    return HAServiceState.ACTIVE == haState;
+  }
+
+  @Override
+  public synchronized void monitorHealth()
+      throws IOException {
+    checkAccess("monitorHealth");
+    if (haState == HAServiceProtocol.HAServiceState.ACTIVE && !rm.areActiveServicesRunning()) {
+      throw new HealthCheckFailedException(
+          "Active ResourceManager services are not running!");
+    }
+  }
+
+  synchronized void transitionToActive() throws Exception {
+    if (haState == HAServiceProtocol.HAServiceState.ACTIVE) {
+      LOG.info("Already in active state");
+      return;
+    }
+
+    LOG.info("Transitioning to active");
+    rm.startActiveServices();
+    haState = HAServiceProtocol.HAServiceState.ACTIVE;
+    LOG.info("Transitioned to active");
+  }
+
+  @Override
+  public synchronized void transitionToActive(HAServiceProtocol.StateChangeRequestInfo reqInfo)
+      throws IOException {
+    UserGroupInformation user = checkAccess("transitionToActive");
+    // TODO (YARN-1177): When automatic failover is enabled,
+    // check if transition should be allowed for this request
+    try {
+      transitionToActive();
+      RMAuditLogger.logSuccess(user.getShortUserName(),
+          "transitionToActive", "RMHAProtocolService");
+    } catch (Exception e) {
+      RMAuditLogger.logFailure(user.getShortUserName(), "transitionToActive",
+          adminAcl.toString(), "RMHAProtocolService",
+          "Exception transitioning to active");
+      throw new ServiceFailedException(
+          "Error when transitioning to Active mode", e);
+    }
+  }
+
+  synchronized void transitionToStandby(boolean initialize)
+      throws Exception {
+    if (haState == HAServiceProtocol.HAServiceState.STANDBY) {
+      LOG.info("Already in standby state");
+      return;
+    }
+
+    LOG.info("Transitioning to standby");
+    if (haState == HAServiceProtocol.HAServiceState.ACTIVE) {
+      rm.stopActiveServices();
+      if (initialize) {
+        rm.createAndInitActiveServices();
+      }
+    }
+    haState = HAServiceProtocol.HAServiceState.STANDBY;
+    LOG.info("Transitioned to standby");
+  }
+
+  @Override
+  public synchronized void transitionToStandby(HAServiceProtocol.StateChangeRequestInfo reqInfo)
+      throws IOException {
+    UserGroupInformation user = checkAccess("transitionToStandby");
+    // TODO (YARN-1177): When automatic failover is enabled,
+    // check if transition should be allowed for this request
+    try {
+      transitionToStandby(true);
+      RMAuditLogger.logSuccess(user.getShortUserName(),
+          "transitionToStandby", "RMHAProtocolService");
+    } catch (Exception e) {
+      RMAuditLogger.logFailure(user.getShortUserName(), "transitionToStandby",
+          adminAcl.toString(), "RMHAProtocolService",
+          "Exception transitioning to standby");
+      throw new ServiceFailedException(
+          "Error when transitioning to Standby mode", e);
+    }
+  }
+
+  @Override
+  public synchronized HAServiceStatus getServiceStatus() throws IOException {
+    checkAccess("getServiceState");
+    HAServiceStatus ret = new HAServiceStatus(haState);
+    if (haState == HAServiceProtocol.HAServiceState.ACTIVE || haState ==
+        HAServiceProtocol.HAServiceState.STANDBY) {
+      ret.setReadyToBecomeActive();
+    } else {
+      ret.setNotReadyToBecomeActive("State is " + haState);
+    }
+    return ret;
+  }
+
+
+    if (!isRMActive()) {
+      RMAuditLogger.logFailure(user.getShortUserName(), "refreshQueues",
+          adminAcl.toString(), "AdminService",
+          "ResourceManager is not active. Can not refresh queues.");
+      throw new RMNotYetActiveException();
+    }
+
-      scheduler.reinitialize(conf, this.rmContext);
+      rmContext.getScheduler().reinitialize(getConfig(), this.rmContext);
+
+    if (!isRMActive()) {
+      RMAuditLogger.logFailure(user.getShortUserName(), "refreshNodes",
+          adminAcl.toString(), "AdminService",
+          "ResourceManager is not active. Can not refresh nodes.");
+      throw new RMNotYetActiveException();
+    }
+
-      this.nodesListManager.refreshNodes(new YarnConfiguration());
+      rmContext.getNodesListManager().refreshNodes(new YarnConfiguration());
-    
+
+    // TODO (YARN-1459): Revisit handling super-user-groups on Standby RM
+    if (!isRMActive()) {
+      RMAuditLogger.logFailure(user.getShortUserName(),
+          "refreshSuperUserGroupsConfiguration",
+          adminAcl.toString(), "AdminService",
+          "ResourceManager is not active. Can not refresh super-user-groups.");
+      throw new RMNotYetActiveException();
+    }
+
-    
+
+    // TODO (YARN-1459): Revisit handling user-groups on Standby RM
+    if (!isRMActive()) {
+      RMAuditLogger.logFailure(user.getShortUserName(),
+          "refreshUserToGroupsMapping",
+          adminAcl.toString(), "AdminService",
+          "ResourceManager is not active. Can not refresh user-groups.");
+      throw new RMNotYetActiveException();
+    }
+
-    clientRMService.refreshServiceAcls(conf, policyProvider);
-    applicationMasterService.refreshServiceAcls(conf, policyProvider);
-    resourceTrackerService.refreshServiceAcls(conf, policyProvider);
+    if (isRMActive()) {
+      rmContext.getClientRMService().refreshServiceAcls(conf, policyProvider);
+      rmContext.getApplicationMasterService().refreshServiceAcls(
+          conf, policyProvider);
+      rmContext.getResourceTrackerService().refreshServiceAcls(
+          conf, policyProvider);
+    } else {
+      LOG.warn("ResourceManager is not active. Not refreshing ACLs for " +
+          "Clients, ApplicationMasters and NodeManagers");
+    }
-  

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 UPD43 INS78 UPD83 MOV83 INS43 INS59 INS39 INS59 INS83 INS42 INS44 MOV44 INS8 INS83 MOV78 INS83 INS83 INS39 INS42 INS43 INS8 MOV78 INS83 INS83 INS39 INS42 INS43 INS8 UPD42 UPD42 INS83 INS43 INS42 INS44 INS43 MOV8 INS83 INS83 INS39 INS42 INS8 INS78 MOV83 INS83 INS39 UPD42 MOV42 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS83 INS39 INS42 MOV44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 MOV8 INS78 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS83 INS43 INS42 INS43 INS8 UPD42 UPD42 INS42 INS40 INS42 INS40 INS42 INS43 INS42 MOV46 INS21 MOV21 INS21 INS25 INS21 UPD42 MOV42 INS25 INS21 MOV21 UPD42 MOV42 INS21 INS21 INS21 MOV21 INS25 UPD42 MOV42 INS43 INS42 INS42 INS41 INS42 UPD42 MOV42 INS21 INS25 UPD42 MOV42 INS25 INS21 INS21 INS21 INS21 INS42 UPD43 UPD42 INS42 INS60 INS54 INS39 INS42 INS42 INS25 INS25 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS42 INS42 INS21 INS60 INS25 INS41 INS25 INS25 INS25 INS25 INS25 UPD42 MOV42 INS7 INS7 INS42 INS8 INS32 INS42 INS8 INS8 INS32 INS32 INS32 INS7 INS42 INS8 INS42 INS8 INS27 INS32 INS27 INS8 INS27 INS8 INS32 INS32 INS7 INS32 INS40 INS43 INS59 INS8 INS12 INS27 INS8 INS32 INS27 INS8 INS32 INS40 INS43 INS59 INS8 INS12 INS32 INS43 INS59 INS27 INS8 INS8 INS42 INS38 INS8 INS38 INS8 INS38 INS8 INS38 INS8 INS32 INS8 INS8 INS22 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS9 INS42 INS40 INS11 INS21 INS60 INS60 INS21 INS41 INS40 INS42 INS42 INS45 INS27 INS38 INS53 INS42 INS40 INS21 INS41 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS32 INS21 INS21 INS44 INS8 INS42 INS40 MOV21 INS41 INS42 INS42 INS45 INS42 INS40 MOV21 INS25 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS32 INS21 INS21 INS44 INS8 INS42 INS45 INS42 INS42 INS14 INS27 INS27 INS21 INS21 INS32 INS21 INS53 INS32 INS21 INS53 INS32 INS21 INS53 INS32 INS21 INS53 INS42 MOV21 MOV21 MOV21 INS21 INS52 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS43 MOV32 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS40 INS32 INS14 INS32 INS42 INS45 INS32 INS32 UPD43 MOV43 UPD42 MOV42 INS21 INS53 INS32 INS32 INS42 INS8 INS42 INS45 INS32 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS42 INS40 INS42 INS40 INS32 INS32 INS42 INS32 INS14 INS42 INS32 INS14 INS42 INS32 INS14 INS42 INS32 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS57 INS57 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS40 INS57 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS45 INS45 UPD42 INS32 INS14 INS42 INS42 INS45 INS42 INS42 MOV21 INS42 INS9 INS42 INS42 INS32 INS45 INS45 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS45 INS32 INS45 INS45 INS43 INS32 INS32 INS42 INS42 INS32 INS45 INS32 INS45 INS45 INS43 INS32 INS42 INS42 INS32 INS45 INS32 INS45 INS45 INS43 INS42 INS42 INS32 INS45 INS32 INS45 INS45 INS43 INS32 INS32 INS32 INS42 INS42 INS27 INS43 INS43 INS43 INS52 INS40 INS42 INS42 INS43 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS45 INS45 INS43 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS45 INS45 INS43 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL44 DEL43 DEL42 DEL44 DEL31 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22