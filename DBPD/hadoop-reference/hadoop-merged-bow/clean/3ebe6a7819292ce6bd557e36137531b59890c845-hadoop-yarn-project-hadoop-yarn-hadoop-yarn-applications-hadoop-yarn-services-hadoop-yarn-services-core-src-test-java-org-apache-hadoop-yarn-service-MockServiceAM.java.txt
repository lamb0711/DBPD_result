YARN-7565. Yarn service pre-maturely releases the container after AM restart. Contributed by Chandni Singh

+import com.google.common.collect.Lists;
+import org.apache.hadoop.registry.client.binding.RegistryPathUtils;
+import org.apache.hadoop.registry.client.types.ServiceRecord;
+import org.apache.hadoop.registry.client.types.yarn.PersistencePolicies;
+import org.apache.hadoop.registry.client.types.yarn.YarnRegistryAttributes;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import java.util.concurrent.ConcurrentHashMap;
+import static org.mockito.Matchers.anyObject;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.when;
+  private static final Logger LOG =
+      LoggerFactory.getLogger(MockServiceAM.class);
+
+
+  private final List<Container> recoveredContainers =
+      Collections.synchronizedList(new LinkedList<>());
+
+  private final Map<String, ServiceRecord> registryComponents =
+      new ConcurrentHashMap<>();
+
+  private Map<ContainerId, ContainerStatus> containerStatuses =
+      new ConcurrentHashMap<>();
+
-    System.out.println("Service path: " + path);
+    LOG.info("Service path: {}", path);
+      @SuppressWarnings("SuspiciousMethodCalls")
-        return mock(YarnRegistryViewForProviders.class);
+        YarnRegistryViewForProviders yarnRegistryView = mock(
+            YarnRegistryViewForProviders.class);
+        if (!registryComponents.isEmpty()) {
+          try {
+            when(yarnRegistryView.listComponents())
+                .thenReturn(new LinkedList<>(registryComponents.keySet()));
+            when(yarnRegistryView.getComponent(anyString())).thenAnswer(
+                invocation ->
+                    registryComponents.get(invocation.getArguments()[0]));
+          } catch (IOException e) {
+            throw new RuntimeException(e);
+          }
+        }
+        return yarnRegistryView;
-                System.out.println("Allocating........ no containers");
+                LOG.info("Allocating........ no containers");
-                    System.out.println("Allocated container " + c.getId());
+                    LOG.info("Allocated container {} ", c.getId());
+            // add recovered containers if any
+            synchronized (recoveredContainers) {
+              if (!recoveredContainers.isEmpty()) {
+                List<Container> containersFromPrevAttempt = new LinkedList<>();
+                containersFromPrevAttempt.addAll(recoveredContainers);
+                recoveredContainers.clear();
+                builder.containersFromPreviousAttempt(
+                    containersFromPrevAttempt);
+              }
+            }
+
-        return AMRMClientAsync
-            .createAMRMClientAsync(client1, 1000,
+        return AMRMClientAsync.createAMRMClientAsync(client1, 1000,
+      @SuppressWarnings("SuspiciousMethodCalls")
-        nmClientAsync.setClient(mock(NMClient.class));
+        NMClient nmClient = mock(NMClient.class);
+        try {
+          when(nmClient.getContainerStatus(anyObject(), anyObject()))
+              .thenAnswer(invocation ->
+                  containerStatuses.get(invocation.getArguments()[0]));
+        } catch (YarnException | IOException e) {
+          throw new RuntimeException(e);
+        }
+        nmClientAsync.setClient(nmClient);
+  public void feedRegistryComponent(ContainerId containerId, String compName,
+      String compInstName) {
+    ServiceRecord record = new ServiceRecord();
+    record.set(YarnRegistryAttributes.YARN_ID, containerId.toString());
+    record.description = compInstName;
+    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,
+        PersistencePolicies.CONTAINER);
+    record.set(YarnRegistryAttributes.YARN_IP, "localhost");
+    record.set(YarnRegistryAttributes.YARN_HOSTNAME, "localhost");
+    record.set(YarnRegistryAttributes.YARN_COMPONENT, compName);
+    registryComponents.put(RegistryPathUtils.encodeYarnID(
+        containerId.toString()), record);
+  }
+
+  /**
+   * Simulates a recovered container that is sent to the AM in the heartbeat
+   * response.
+   *
+   * @param containerId The ID for the container
+   * @param compName    The component to which the recovered container is fed.
+   */
+  public void feedRecoveredContainer(ContainerId containerId, String compName) {
+    Container container = createContainer(containerId, compName);
+    recoveredContainers.add(container);
+    addContainerStatus(container, ContainerState.RUNNING);
+  }
+
-    ApplicationId applicationId = ApplicationId.fromString(service.getId());
-    ContainerId containerId = ContainerId
-        .newContainerId(ApplicationAttemptId.newInstance(applicationId, 1), id);
-    NodeId nodeId = NodeId.newInstance("localhost", 1234);
-    Container container = Container
-        .newInstance(containerId, nodeId, "localhost",
-            Resource.newInstance(100, 1), Priority.newInstance(0), null);
-
-    long allocateId =
-        context.scheduler.getAllComponents().get(compName).getAllocateId();
-    container.setAllocationRequestId(allocateId);
+    ContainerId containerId = createContainerId(id);
+    Container container = createContainer(containerId, compName);
+    addContainerStatus(container, ContainerState.RUNNING);
-    ContainerStatus containerStatus = Records.newRecord(ContainerStatus.class);
-    containerStatus.setContainerId(containerId);
+    ContainerStatus status = Records.newRecord(ContainerStatus.class);
+    status.setContainerId(containerId);
-      failedContainers.add(containerStatus);
+      failedContainers.add(status);
+  public ContainerId createContainerId(int id) {
+    ApplicationId applicationId = ApplicationId.fromString(service.getId());
+    return ContainerId.newContainerId(
+        ApplicationAttemptId.newInstance(applicationId, 1), id);
+  }
+
+  private Container createContainer(ContainerId containerId, String compName) {
+    NodeId nodeId = NodeId.newInstance("localhost", 1234);
+    Container container = Container.newInstance(
+        containerId, nodeId, "localhost",
+        Resource.newInstance(100, 1),
+        Priority.newInstance(0), null);
+    long allocateId =
+        context.scheduler.getAllComponents().get(compName).getAllocateId();
+    container.setAllocationRequestId(allocateId);
+    return container;
+  }
+
+  private void addContainerStatus(Container container, ContainerState state) {
+    ContainerStatus status = ContainerStatus.newInstance(container.getId(),
+        state, "", 0);
+    status.setHost(container.getNodeId().getHost());
+    status.setIPs(Lists.newArrayList(container.getNodeId().getHost()));
+    containerStatuses.put(container.getId(), status);
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 MOV29 INS83 INS43 INS42 MOV44 MOV44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 UPD83 INS42 INS44 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS42 INS43 INS42 INS60 INS60 MOV51 INS21 INS41 INS42 INS39 INS42 MOV60 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS43 INS59 INS32 INS7 INS32 INS32 INS32 INS32 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS43 INS74 INS43 INS43 UPD42 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS40 INS32 INS40 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS45 INS42 INS42 INS40 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS45 INS34 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS79 INS43 INS79 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS60 INS25 INS42 INS45 INS60 INS54 INS42 INS42 MOV43 INS59 INS38 INS8 INS42 INS43 INS59 INS8 INS12 INS42 MOV32 INS32 INS54 INS42 INS42 MOV32 INS21 INS44 INS8 INS42 INS42 INS42 INS8 INS12 INS32 INS84 INS42 INS53 INS21 INS21 INS44 INS8 INS32 INS42 INS86 INS43 INS43 INS14 INS32 INS32 INS43 INS42 INS53 INS42 INS32 INS59 INS32 INS42 INS42 INS43 INS42 INS32 INS42 INS14 INS32 INS42 INS86 INS42 INS14 INS51 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS32 INS74 INS32 INS42 INS32 INS59 INS32 INS43 INS42 INS42 INS8 INS42 INS42 INS32 INS34 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS2 INS42 INS25 INS42 INS42 INS42 INS42 INS32 INS34 INS38 INS8 INS42 INS42 INS32 INS60 INS21 INS21 INS21 INS42 INS42 INS74 INS59 INS32 INS32 INS32 UPD42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS42 UPD42 INS42 INS45 MOV32 DEL40 DEL45 DEL42 DEL27 DEL40 DEL40 DEL45 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL59 DEL60