Revert "HDDS-224. Create metrics for Event Watcher."

This reverts commit cb5e225868a069d6d16244b462ebada44465dce8.
The JIRA number is wrong, reverting to fix it.

-
-import org.apache.hadoop.util.StringUtils;
-
-import com.google.common.base.Preconditions;
-  private static final String EXECUTOR_NAME_SEPARATOR = "For";
-
-    this.addHandler(event, handler, generateHandlerName(handler));
+
+    this.addHandler(event, new SingleThreadExecutor<>(
+        event.getName()), handler);
-  /**
-   * Add new handler to the event queue.
-   * <p>
-   * By default a separated single thread executor will be dedicated to
-   * deliver the events to the registered event handler.
-   *
-   * @param event        Triggering event.
-   * @param handler      Handler of event (will be called from a separated
-   *                     thread)
-   * @param handlerName  The name of handler (should be unique together with
-   *                     the event name)
-   * @param <PAYLOAD>    The type of the event payload.
-   * @param <EVENT_TYPE> The type of the event identifier.
-   */
-      EVENT_TYPE event, EventHandler<PAYLOAD> handler, String handlerName) {
-    validateEvent(event);
-    Preconditions.checkNotNull(handler, "Handler name should not be null.");
-    String executorName =
-        StringUtils.camelize(event.getName()) + EXECUTOR_NAME_SEPARATOR
-            + handlerName;
-    this.addHandler(event, new SingleThreadExecutor<>(executorName), handler);
-  }
-
-  private <EVENT_TYPE extends Event<?>> void validateEvent(EVENT_TYPE event) {
-    Preconditions
-        .checkArgument(!event.getName().contains(EXECUTOR_NAME_SEPARATOR),
-            "Event name should not contain " + EXECUTOR_NAME_SEPARATOR
-                + " string.");
-
-  }
-
-  private <PAYLOAD> String generateHandlerName(EventHandler<PAYLOAD> handler) {
-    if (!"".equals(handler.getClass().getSimpleName())) {
-      return handler.getClass().getSimpleName();
-    } else {
-      return handler.getClass().getName();
-    }
-  }
-
-  /**
-   * Add event handler with custom executor.
-   *
-   * @param event        Triggering event.
-   * @param executor     The executor imlementation to deliver events from a
-   *                     separated threads. Please keep in your mind that
-   *                     registering metrics is the responsibility of the
-   *                     caller.
-   * @param handler      Handler of event (will be called from a separated
-   *                     thread)
-   * @param <PAYLOAD>    The type of the event payload.
-   * @param <EVENT_TYPE> The type of the event identifier.
-   */
-  public <PAYLOAD, EVENT_TYPE extends Event<PAYLOAD>> void addHandler(
-      EVENT_TYPE event, EventExecutor<PAYLOAD> executor,
+      EVENT_TYPE event,
+      EventExecutor<PAYLOAD> executor,
-    validateEvent(event);
+
-    executors.get(event).get(executor).add(handler);
+    executors.get(event)
+        .get(executor)
+        .add(handler);
+  /**
+   * Creates one executor with multiple event handlers.
+   */
+  public void addHandlerGroup(String name, HandlerForEvent<?>...
+      eventsAndHandlers) {
+    SingleThreadExecutor sharedExecutor =
+        new SingleThreadExecutor(name);
+    for (HandlerForEvent handlerForEvent : eventsAndHandlers) {
+      addHandler(handlerForEvent.event, sharedExecutor,
+          handlerForEvent.handler);
+    }
+  }
+  /**
+   * Event identifier together with the handler.
+   *
+   * @param <PAYLOAD>
+   */
+  public static class HandlerForEvent<PAYLOAD> {
+
+    private final Event<PAYLOAD> event;
+
+    private final EventHandler<PAYLOAD> handler;
+
+    public HandlerForEvent(
+        Event<PAYLOAD> event,
+        EventHandler<PAYLOAD> handler) {
+      this.event = event;
+      this.handler = handler;
+    }
+
+    public Event<PAYLOAD> getEvent() {
+      return event;
+    }
+
+    public EventHandler<PAYLOAD> getHandler() {
+      return handler;
+    }
+  }

MOV31 INS31 INS55 INS83 MOV73 MOV73 INS39 INS42 MOV44 MOV44 INS8 INS29 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS42 MOV73 INS23 INS23 INS31 MOV31 MOV31 INS21 INS65 MOV43 INS42 INS74 INS42 INS60 INS70 MOV65 MOV65 INS83 INS83 UPD74 MOV74 INS59 INS83 INS83 INS74 INS59 INS83 INS42 INS44 MOV44 INS8 UPD83 INS74 INS42 UPD83 INS74 INS42 INS8 INS32 INS66 UPD43 MOV43 INS76 INS43 INS59 INS44 INS42 INS8 UPD66 INS43 INS42 INS43 INS43 INS42 INS74 INS42 INS21 MOV21 INS43 INS43 INS41 INS43 INS43 MOV41 INS52 INS42 INS42 MOV14 INS42 UPD42 UPD42 MOV42 INS42 INS14 INS43 UPD42 MOV42 MOV21 INS42 INS42 INS42 INS43 INS43 INS7 INS7 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 MOV32 INS43 INS42 UPD42 MOV42 INS42 INS42 INS22 INS42 INS22 INS42 UPD42 MOV42 INS40 UPD42 INS40 INS52 INS42 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL66 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL27 DEL59 DEL60 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL66 DEL42 DEL66 DEL66 DEL65 DEL66 DEL42 DEL66 DEL66 DEL65 DEL29 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL42 DEL42 DEL32 DEL42 DEL73 DEL42 DEL43 DEL74 DEL73 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL43 DEL74 DEL44 DEL8 DEL66 DEL66 DEL66 DEL66 DEL76 DEL52 DEL42 DEL42 DEL42 DEL32 DEL42 DEL73 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL43 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL38 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8