HADOOP-11920. Refactor some codes for erasure coders. Contributed by Kai Zheng.

+import java.nio.ByteBuffer;
+import java.util.Arrays;
+
+  // Hope to reset coding buffers a little faster using it
+  private byte[] zeroChunkBytes;
+
+
+    zeroChunkBytes = new byte[chunkSize]; // With ZERO by default
-  public boolean preferNativeBuffer() {
+  public boolean preferDirectBuffer() {
+
+  /**
+   * Convert an array of heap ByteBuffers to an array of byte array.
+   * @param buffers
+   * @return an array of byte array
+   */
+  protected static byte[][] toArrays(ByteBuffer[] buffers) {
+    byte[][] bytesArr = new byte[buffers.length][];
+
+    ByteBuffer buffer;
+    for (int i = 0; i < buffers.length; i++) {
+      buffer = buffers[i];
+      if (buffer == null) {
+        bytesArr[i] = null;
+        continue;
+      }
+
+      if (buffer.hasArray()) {
+        bytesArr[i] = buffer.array();
+      } else {
+        throw new IllegalArgumentException("Invalid ByteBuffer passed, " +
+            "expecting heap buffer");
+      }
+    }
+
+    return bytesArr;
+  }
+
+  /**
+   * Ensure the buffer (either input or output) ready to read or write with ZERO
+   * bytes fully in chunkSize.
+   * @param buffer
+   * @return the buffer itself
+   */
+  protected ByteBuffer resetBuffer(ByteBuffer buffer) {
+    buffer.clear();
+    buffer.put(zeroChunkBytes);
+    buffer.position(0);
+
+    return buffer;
+  }
+
+  /**
+   * Ensure the buffer (either input or output) ready to read or write with ZERO
+   * bytes fully in chunkSize.
+   * @param buffer bytes array buffer
+   * @return the buffer itself
+   */
+  protected byte[] resetBuffer(byte[] buffer) {
+    System.arraycopy(zeroChunkBytes, 0, buffer, 0, buffer.length);
+
+    return buffer;
+  }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS5 INS59 UPD42 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS5 INS42 INS44 INS8 INS39 INS85 INS42 INS21 INS65 INS65 INS65 INS39 INS85 INS85 INS5 INS42 INS60 INS60 INS24 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS21 INS21 INS21 INS41 INS65 INS65 INS65 INS39 INS85 INS5 INS42 INS21 INS41 INS7 INS66 INS42 INS66 INS43 INS85 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS32 INS32 INS42 INS66 INS66 INS42 INS66 INS66 INS39 INS85 INS32 INS42 INS42 INS3 INS42 INS39 INS85 INS85 INS42 INS3 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS5 INS42 INS5 INS40 INS42 INS34 INS7 INS27 INS8 INS32 INS8 INS8 INS39 INS85 INS39 INS85 INS85 INS42 INS2 INS42 INS33 INS21 INS18 INS42 INS42 INS21 INS53 INS42 INS42 INS7 INS7 INS14 INS2 INS33 INS2 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45