Reverting the previous merge r1416603 which committed some extra changes

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1416712 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.ha.HAServiceProtocol.HAServiceState;
+import org.apache.hadoop.hdfs.server.namenode.ha.ActiveState;
-import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectorySnapshottable;
-import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
-        + " blocks = " + (totalInodes + totalBlocks)
-        + " total filesystem objects");
+        + " blocks = " + (totalInodes + totalBlocks) + " total");
-      
-      final INodesInPath inodesInPath = dir.getINodesInPath(src);
-      final INode myFile = inodesInPath.getINode(0);
+      final INode myFile = dir.getINode(src);
-        return prepareFileForWrite(src, f, holder, clientMachine, clientNode,
-            true, inodesInPath.getLatestSnapshot());
+        return prepareFileForWrite(
+            src, f, holder, clientMachine, clientNode, true);
-      boolean writeToEditLog, Snapshot latestSnapshot) throws IOException {
+      boolean writeToEditLog) throws IOException {
-    dir.replaceNode(src, file, cons, latestSnapshot);
+    dir.replaceNode(src, file, cons);
-      final INodeFileUnderConstruction pendingFile = checkLease(
-          src, clientName, dir.getINode(src));
+      INodeFileUnderConstruction pendingFile = checkLease(src, clientName);
-      final INodeFileUnderConstruction file = checkLease(
-          src, clientName, dir.getINode(src));
+      final INodeFileUnderConstruction file = checkLease(src, clientName);
-      final INodesInPath inodesInPath = checkLease(src, holder);
-      final INodeFileUnderConstruction file
-          = (INodeFileUnderConstruction)inodesInPath.getINode(0); 
+      INodeFileUnderConstruction file = checkLease(src, holder);
-  /** make sure that we still have the lease on this file. */
-  private INodesInPath checkLease(String src, String holder) 
+  // make sure that we still have the lease on this file.
+  private INodeFileUnderConstruction checkLease(String src, String holder) 
-    final INodesInPath inodesInPath = dir.getINodesInPath(src);
-    checkLease(src, holder, inodesInPath.getINode(0));
-    return inodesInPath;
+    return checkLease(src, holder, dir.getINode(src));
-    final INodesInPath inodesInPath;
-    final INodeFileUnderConstruction pendingFile;
+    INodeFileUnderConstruction pendingFile;
-      inodesInPath = checkLease(src, holder);
-      pendingFile = (INodeFileUnderConstruction)inodesInPath.getINode(0); 
+      pendingFile = checkLease(src, holder);
-    finalizeINodeFileUnderConstruction(src, pendingFile,
-        inodesInPath.getLatestSnapshot());
+    finalizeINodeFileUnderConstruction(src, pendingFile);
-      //NOTE: yes, this is bad!  it's assuming much lower level behavior
-      //      of rewriting the dst
+    HdfsFileStatus dinfo = dir.getFileInfo(dst, false);
+      unprotectedChangeLease(src, dst, dinfo);     // update lease with new filename
+    HdfsFileStatus dinfo = dir.getFileInfo(dst, false);
+    unprotectedChangeLease(src, dst, dinfo); // update lease with new filename
-      final INodeFileUnderConstruction pendingFile  = checkLease(
-          src, clientName, dir.getINode(src));
+      INodeFileUnderConstruction pendingFile  = checkLease(src, clientName);
-    final INodesInPath inodesInPath = dir.getINodesInPath(src);
-        = INodeFileUnderConstruction.valueOf(inodesInPath.getINode(0), src);
+        = INodeFileUnderConstruction.valueOf(dir.getINode(src), src);
-      finalizeINodeFileUnderConstruction(src, pendingFile,
-          inodesInPath.getLatestSnapshot());
+      finalizeINodeFileUnderConstruction(src, pendingFile);
-        finalizeINodeFileUnderConstruction(src, pendingFile,
-            inodesInPath.getLatestSnapshot());
+        finalizeINodeFileUnderConstruction(src, pendingFile);
-      INodeFileUnderConstruction pendingFile, Snapshot latestSnapshot) 
+      INodeFileUnderConstruction pendingFile) 
-    dir.replaceNode(src, pendingFile, newFile, latestSnapshot);
+    dir.replaceNode(src, pendingFile, newFile);
-        finalizeINodeFileUnderConstruction(src, pendingFile,
-            INodeDirectorySnapshottable.findLatestSnapshot(pendingFile));
+        finalizeINodeFileUnderConstruction(src, pendingFile);
-    if (state.getServiceState() == HAServiceState.ACTIVE) {
+    if (state instanceof ActiveState) {
-    } else if (state.getServiceState() == HAServiceState.STANDBY) {
+    } else if (state instanceof StandbyState) {
-  void unprotectedChangeLease(String src, String dst) {
+  void unprotectedChangeLease(String src, String dst, HdfsFileStatus dinfo) {
+    String overwrite;
+    String replaceBy;
-    leaseManager.changeLease(src, dst);
+
+    boolean destinationExisted = true;
+    if (dinfo == null) {
+      destinationExisted = false;
+    }
+
+    if (destinationExisted && dinfo.isDir()) {
+      Path spath = new Path(src);
+      Path parent = spath.getParent();
+      if (parent.isRoot()) {
+        overwrite = parent.toString();
+      } else {
+        overwrite = parent.toString() + Path.SEPARATOR;
+      }
+      replaceBy = dst + Path.SEPARATOR;
+    } else {
+      overwrite = src;
+      replaceBy = dst;
+    }
+
+    leaseManager.changeLease(src, dst, overwrite, replaceBy);
-      Map<String, INodeFileUnderConstruction> nodes =
-          leaseManager.getINodesUnderConstruction();
-      out.writeInt(nodes.size()); // write the size    
-      for (Map.Entry<String, INodeFileUnderConstruction> entry
-           : nodes.entrySet()) {
-        FSImageSerialization.writeINodeUnderConstruction(
-            out, entry.getValue(), entry.getKey());
+      out.writeInt(leaseManager.countPath()); // write the size
+
+      for (Lease lease : leaseManager.getSortedLeases()) {
+        for(String path : lease.getPaths()) {
+          // verify that path exists in namespace
+          final INodeFileUnderConstruction cons;
+          try {
+            cons = INodeFileUnderConstruction.valueOf(dir.getINode(path), path);
+          } catch (UnresolvedLinkException e) {
+            throw new AssertionError("Lease files should reside on this FS");
+          }
+          FSImageSerialization.writeINodeUnderConstruction(out, cons, path);
+        }

MOV26 UPD40 INS31 INS31 MOV83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 INS8 INS39 INS42 MOV44 MOV44 INS44 INS8 MOV6 INS41 INS60 INS60 INS21 MOV60 INS43 INS42 INS60 INS60 MOV6 INS60 INS25 INS25 MOV21 MOV32 INS43 INS59 INS43 INS59 INS32 INS62 UPD42 MOV42 INS43 INS59 MOV43 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS8 UPD42 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS60 MOV42 INS42 INS43 INS62 INS42 INS42 INS42 INS42 INS9 INS42 INS33 INS21 INS42 INS32 MOV60 INS60 INS25 INS21 INS21 INS21 INS42 INS42 INS21 INS70 UPD45 MOV43 MOV43 UPD43 INS42 INS42 INS42 INS9 INS32 INS42 INS42 INS42 INS9 MOV43 INS59 UPD42 INS42 INS42 INS42 INS43 INS7 INS42 INS42 UPD43 INS43 INS59 INS32 INS8 INS8 INS7 INS7 INS7 INS32 INS44 INS32 INS8 UPD42 MOV32 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 UPD42 UPD42 INS14 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS21 INS21 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 MOV42 UPD42 MOV42 INS70 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS7 INS7 INS42 INS40 INS42 INS42 UPD42 MOV42 INS44 INS32 INS8 INS42 INS42 INS32 INS42 INS27 MOV43 INS42 INS42 INS42 INS60 INS54 MOV21 INS42 INS42 INS32 INS40 INS83 MOV43 INS59 INS8 INS12 INS42 INS42 INS42 MOV21 INS44 INS8 UPD42 MOV42 UPD42 MOV42 INS7 INS43 UPD42 MOV42 INS53 INS42 INS32 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS43 INS45 UPD42 UPD42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL83 DEL83 DEL83 DEL42 DEL42 DEL42 DEL34 DEL32 DEL11 DEL59 DEL60 DEL66 DEL65 DEL29 DEL43 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL83 DEL42 DEL42 DEL42 DEL34 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL40 DEL27 DEL83 DEL42 DEL42 DEL42 DEL32 DEL39 DEL42 DEL8 DEL31 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL43 DEL74 DEL44 DEL42 DEL42 DEL32 DEL8 DEL70