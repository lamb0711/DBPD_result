YARN-5355: YARN Timeline Service v.2: alpha 2 (varunsaxena)

+import java.util.List;
+
+import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineReaderUtils;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.KeyConverterToString;
+  private final Long entityIdPrefix;
-  private final KeyConverter<EntityRowKey> entityRowKeyConverter =
+  private final EntityRowKeyConverter entityRowKeyConverter =
-      Long flowRunId, String appId, String entityType, String entityId) {
+      Long flowRunId, String appId, String entityType, Long entityIdPrefix,
+      String entityId) {
+    this.entityIdPrefix = entityIdPrefix;
+  public Long getEntityIdPrefix() {
+    return entityIdPrefix;
+  }
+
-   *
+   * Constructs a row key for the entity table as follows:
+   * <p>
+   * {@code userName!clusterId!flowName!flowRunId!AppId!
+   * entityType!entityIdPrefix!entityId}.
+   * </p>
+   * @return String representation of row key.
+   */
+  public String getRowKeyAsString() {
+    return entityRowKeyConverter.encodeAsString(this);
+  }
+
+  /**
+   * Given the encoded row key as string, returns the row key as an object.
+   * @param encodedRowKey String representation of row key.
+   * @return A <cite>EntityRowKey</cite> object.
+   */
+  public static EntityRowKey parseRowKeyFromString(String encodedRowKey) {
+    return new EntityRowKeyConverter().decodeFromString(encodedRowKey);
+  }
+
+  /**
-      KeyConverter<EntityRowKey> {
+      KeyConverter<EntityRowKey>, KeyConverterToString<EntityRowKey> {
-        Separator.VARIABLE_SIZE };
+        Bytes.SIZEOF_LONG, Separator.VARIABLE_SIZE };
-      byte[] entityId =
-          rowKey.getEntityId() == null ? Separator.EMPTY_BYTES : Separator
-              .encode(rowKey.getEntityId(), Separator.SPACE, Separator.TAB,
-                  Separator.QUALIFIERS);
-      byte[] fourth = Separator.QUALIFIERS.join(entityType, entityId);
+
+      if (rowKey.getEntityIdPrefix() == null) {
+        return Separator.QUALIFIERS.join(first, second, third, entityType,
+            Separator.EMPTY_BYTES);
+      }
+
+      byte[] entityIdPrefix = Bytes.toBytes(rowKey.getEntityIdPrefix());
+
+      if (rowKey.getEntityId() == null) {
+        return Separator.QUALIFIERS.join(first, second, third, entityType,
+            entityIdPrefix, Separator.EMPTY_BYTES);
+      }
+
+      byte[] entityId = Separator.encode(rowKey.getEntityId(), Separator.SPACE,
+          Separator.TAB, Separator.QUALIFIERS);
+
+      byte[] fourth =
+          Separator.QUALIFIERS.join(entityType, entityIdPrefix, entityId);
+
-      if (rowKeyComponents.length != 7) {
+      if (rowKeyComponents.length != 8) {
+
+      Long entityPrefixId = Bytes.toLong(rowKeyComponents[6]);
+
-          Separator.decode(Bytes.toString(rowKeyComponents[6]),
+          Separator.decode(Bytes.toString(rowKeyComponents[7]),
-          entityType, entityId);
+          entityType, entityPrefixId, entityId);
+    }
+
+    @Override
+    public String encodeAsString(EntityRowKey key) {
+      if (key.clusterId == null || key.userId == null || key.flowName == null
+          || key.flowRunId == null || key.appId == null
+          || key.entityType == null || key.entityIdPrefix == null
+          || key.entityId == null) {
+        throw new IllegalArgumentException();
+      }
+      return TimelineReaderUtils
+          .joinAndEscapeStrings(new String[] {key.clusterId, key.userId,
+              key.flowName, key.flowRunId.toString(), key.appId, key.entityType,
+              key.entityIdPrefix.toString(), key.entityId});
+    }
+
+    @Override
+    public EntityRowKey decodeFromString(String encodedRowKey) {
+      List<String> split = TimelineReaderUtils.split(encodedRowKey);
+      if (split == null || split.size() != 8) {
+        throw new IllegalArgumentException("Invalid row key for entity table.");
+      }
+      Long flowRunId = Long.valueOf(split.get(3));
+      Long entityIdPrefix = Long.valueOf(split.get(6));
+      return new EntityRowKey(split.get(0), split.get(1), split.get(2),
+          flowRunId, split.get(4), split.get(5), entityIdPrefix, split.get(7));

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS43 INS44 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS74 INS31 INS31 INS42 INS42 UPD42 MOV42 INS43 INS42 INS21 INS42 INS41 INS65 INS65 INS42 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS43 INS43 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS42 INS7 INS42 INS66 INS66 INS65 INS66 INS66 INS66 INS32 INS66 INS42 INS66 INS66 INS42 INS32 INS42 INS42 INS25 INS60 INS25 INS60 INS42 INS42 INS43 INS42 INS25 INS41 INS42 INS42 INS43 INS42 INS60 INS25 INS60 INS60 INS41 INS22 INS42 INS66 INS66 INS42 INS42 INS52 INS14 INS42 INS42 INS40 INS27 INS8 MOV5 INS59 MOV27 INS8 INS5 INS43 MOV43 INS59 INS42 INS27 INS8 INS32 INS42 INS74 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS14 INS52 INS42 INS43 INS32 INS33 INS41 INS42 INS32 INS41 MOV32 INS39 INS85 UPD34 INS42 UPD42 MOV32 INS42 INS32 INS42 INS27 INS27 INS53 INS42 INS42 INS3 INS43 INS43 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS32 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 UPD42 INS42 INS42 INS32 INS40 INS40 INS40 INS27 INS27 INS40 INS33 INS14 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS2 INS27 INS27 INS40 INS33 INS43 INS43 INS85 INS40 INS40 INS40 INS32 INS40 INS40 INS32 INS40 INS42 INS42 INS43 INS45 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS34 INS27 INS27 INS40 INS33 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS27 INS27 INS40 INS33 INS27 INS27 INS40 INS33 INS27 INS27 INS40 INS33 INS40 INS33 INS40 INS33 DEL43 DEL42 DEL43 DEL74 DEL40 DEL16 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32