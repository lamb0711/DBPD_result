HADOOP-15957. WASB: Add asterisk wildcard support for PageBlobDirSet.

Contributed by Da Zhou.

+import org.apache.hadoop.fs.Path;
+  private static final char ASTERISK_SYMBOL = '*';
-        myDir = verifyAndConvertToStandardFormat(currentDir);
+        myDir = verifyAndConvertToStandardFormat(currentDir.trim());
-      if (dir.isEmpty() || key.startsWith(dir + "/")) {
+      if (dir.isEmpty()) {
+        // dir is root
+        return true;
+      }
+
+      if (matchAsteriskPattern(key, dir)) {
-          if (key.startsWith(trim(defaultFS, "/") + "/" + dir + "/")){
+          String dirWithPrefix = trim(defaultFS, "/") + "/" + dir;
+          if (matchAsteriskPattern(key, dirWithPrefix)) {
+  private boolean matchAsteriskPattern(String pathName, String pattern) {
+    if (pathName == null || pathName.length() == 0) {
+      return false;
+    }
+
+    int pathIndex = 0;
+    int patternIndex = 0;
+
+    while (pathIndex < pathName.length() && patternIndex < pattern.length()) {
+      char charToMatch = pattern.charAt(patternIndex);
+
+      // normal char:
+      if (charToMatch != ASTERISK_SYMBOL) {
+        if (charToMatch != pathName.charAt(pathIndex)) {
+          return false;
+        }
+        pathIndex++;
+        patternIndex++;
+        continue;
+      }
+
+      // ASTERISK_SYMBOL
+      // 1. * is used in path name: *a/b,a*/b, a/*b, a/b*
+      if (patternIndex > 0 && pattern.charAt(patternIndex - 1) != Path.SEPARATOR_CHAR
+              || patternIndex + 1 < pattern.length() && pattern.charAt(patternIndex + 1) != Path.SEPARATOR_CHAR) {
+        if (ASTERISK_SYMBOL != pathName.charAt(pathIndex)) {
+          return false;
+        }
+
+        pathIndex++;
+        patternIndex++;
+        continue;
+      }
+
+      // 2. * is used as wildcard: */a, a/*/b, a/*
+      patternIndex++;
+      // find next path separator
+      while (pathIndex < pathName.length() && pathName.charAt(pathIndex) != Path.SEPARATOR_CHAR) {
+        pathIndex++;
+      }
+    }
+
+    // Ensure it is not a file/dir which shares same prefix as pattern
+    // Eg: pattern: /A/B, pathName: /A/BBB should not match
+    return patternIndex == pattern.length()
+            && (pathIndex == pathName.length() || pathName.charAt(pathIndex) == Path.SEPARATOR_CHAR);
+  }
+

INS26 INS40 INS23 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS13 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS61 INS41 INS42 INS42 INS27 INS8 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS25 INS27 INS27 INS41 INS42 INS34 INS42 INS34 INS27 INS27 INS60 INS25 INS25 INS21 INS61 INS27 INS36 MOV32 INS32 MOV8 INS42 INS33 INS32 INS34 INS9 INS42 INS32 INS42 INS32 INS39 INS59 INS27 INS8 INS27 INS8 INS37 INS27 INS8 INS42 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS25 INS21 INS21 INS18 INS27 INS27 INS25 INS21 INS21 INS18 INS42 INS27 INS27 INS21 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS27 INS8 INS37 INS37 INS27 INS27 INS27 INS27 INS27 INS8 INS37 INS37 INS42 INS32 INS32 INS40 INS37 INS42 INS32 INS32 INS40 INS60 INS42 INS32 INS41 INS42 INS42 INS42 INS34 INS32 INS40 INS27 INS32 INS32 INS40 INS42 INS32 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS42 INS42 INS42 INS9 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS9 MOV42 INS42 INS42 INS42 MOV27 INS42 UPD42 INS41 INS42 INS34 INS42 INS34 INS9 DEL42 DEL42 DEL42 DEL45 DEL27 DEL32 DEL27 DEL45