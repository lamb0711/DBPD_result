YARN-3736. Add RMStateStore apis to store and load accepted reservations for failover (adhoot via asuresh)

+import org.apache.hadoop.yarn.api.records.ReservationId;
+import org.apache.hadoop.yarn.proto.YarnServerResourceManagerRecoveryProtos.ReservationAllocationStateProto;
+  protected static final String RESERVATION_SYSTEM_ROOT =
+      "ReservationSystemRoot";
-              new StoreOrUpdateAMRMTokenTransition())
+           new StoreOrUpdateAMRMTokenTransition())
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          RMStateStoreEventType.STORE_RESERVATION,
+          new StoreReservationAllocationTransition())
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          RMStateStoreEventType.UPDATE_RESERVATION,
+          new UpdateReservationAllocationTransition())
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          RMStateStoreEventType.REMOVE_RESERVATION,
+          new RemoveReservationAllocationTransition())
-          RMStateStoreEventType.UPDATE_AMRM_TOKEN));
+          RMStateStoreEventType.UPDATE_AMRM_TOKEN,
+          RMStateStoreEventType.STORE_RESERVATION,
+          RMStateStoreEventType.UPDATE_RESERVATION,
+          RMStateStoreEventType.REMOVE_RESERVATION));
+  private static class StoreReservationAllocationTransition implements
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+    @Override
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
+      if (!(event instanceof RMStateStoreStoreReservationEvent)) {
+        // should never happen
+        LOG.error("Illegal event type: " + event.getClass());
+        return;
+      }
+      RMStateStoreStoreReservationEvent reservationEvent =
+          (RMStateStoreStoreReservationEvent) event;
+      try {
+        LOG.info("Storing reservation allocation." + reservationEvent
+                .getReservationIdName());
+        store.storeReservationState(
+            reservationEvent.getReservationAllocation(),
+            reservationEvent.getPlanName(),
+            reservationEvent.getReservationIdName());
+      } catch (Exception e) {
+        LOG.error("Error while storing reservation allocation.", e);
+        store.notifyStoreOperationFailed(e);
+      }
+    }
+  }
+
+  private static class UpdateReservationAllocationTransition implements
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+    @Override
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
+      if (!(event instanceof RMStateStoreStoreReservationEvent)) {
+        // should never happen
+        LOG.error("Illegal event type: " + event.getClass());
+        return;
+      }
+      RMStateStoreStoreReservationEvent reservationEvent =
+          (RMStateStoreStoreReservationEvent) event;
+      try {
+        LOG.info("Updating reservation allocation." + reservationEvent
+                .getReservationIdName());
+        store.updateReservationState(
+            reservationEvent.getReservationAllocation(),
+            reservationEvent.getPlanName(),
+            reservationEvent.getReservationIdName());
+      } catch (Exception e) {
+        LOG.error("Error while updating reservation allocation.", e);
+        store.notifyStoreOperationFailed(e);
+      }
+    }
+  }
+
+  private static class RemoveReservationAllocationTransition implements
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+    @Override
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
+      if (!(event instanceof RMStateStoreStoreReservationEvent)) {
+        // should never happen
+        LOG.error("Illegal event type: " + event.getClass());
+        return;
+      }
+      RMStateStoreStoreReservationEvent reservationEvent =
+          (RMStateStoreStoreReservationEvent) event;
+      try {
+        LOG.info("Removing reservation allocation." + reservationEvent
+                .getReservationIdName());
+        store.removeReservationState(
+            reservationEvent.getPlanName(),
+            reservationEvent.getReservationIdName());
+      } catch (Exception e) {
+        LOG.error("Error while removing reservation allocation.", e);
+        store.notifyStoreOperationFailed(e);
+      }
+    }
+  }
+
+    private Map<String, Map<ReservationId, ReservationAllocationStateProto>>
+        reservationState = new TreeMap<>();
+
+
+    public Map<String, Map<ReservationId, ReservationAllocationStateProto>>
+        getReservationState() {
+      return reservationState;
+    }
+   * Blocking Apis to maintain reservation state.
+   */
+  public void storeNewReservation(
+      ReservationAllocationStateProto reservationAllocation, String planName,
+      String reservationIdName) {
+    handleStoreEvent(new RMStateStoreStoreReservationEvent(
+        reservationAllocation, RMStateStoreEventType.STORE_RESERVATION,
+        planName, reservationIdName));
+  }
+
+  public void updateReservation(
+      ReservationAllocationStateProto reservationAllocation,
+      String planName, String reservationIdName) {
+    handleStoreEvent(new RMStateStoreStoreReservationEvent(
+        reservationAllocation, RMStateStoreEventType.UPDATE_RESERVATION,
+        planName, reservationIdName));
+  }
+
+  public void removeReservation(String planName, String reservationIdName) {
+    handleStoreEvent(new RMStateStoreStoreReservationEvent(
+            null, RMStateStoreEventType.REMOVE_RESERVATION,
+            planName, reservationIdName));
+  }
+
+  /**
+   * Blocking API
+   * Derived classes must implement this method to store the state of
+   * a reservation allocation.
+   */
+  protected abstract void storeReservationState(
+      ReservationAllocationStateProto reservationAllocation, String planName,
+      String reservationIdName) throws Exception;
+
+  /**
+   * Blocking API
+   * Derived classes must implement this method to remove the state of
+   * a reservation allocation.
+   */
+  protected abstract void removeReservationState(String planName,
+      String reservationIdName) throws Exception;
+
+  /**
+   * Blocking API
+   * Derived classes must implement this method to update the state of
+   * a reservation allocation.
+   */
+  protected abstract void updateReservationState(
+      ReservationAllocationStateProto reservationAllocation, String planName,
+      String reservationIdName) throws Exception;
+
+  /**

INS26 INS26 INS40 INS40 INS23 INS55 INS55 INS55 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 INS23 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS42 INS42 INS45 INS32 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS74 INS59 INS83 INS74 INS42 INS8 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS21 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS65 INS43 INS42 INS43 INS42 INS42 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS40 INS40 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS54 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS54 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS54 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS74 INS41 INS66 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS66 INS66 INS66 INS42 INS42 INS42 INS66 INS66 INS66 INS42 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS42 INS38 INS8 INS43 INS59 INS8 INS12 INS42 INS42 INS38 INS8 INS43 INS59 INS8 INS12 INS42 INS42 INS38 INS8 INS43 INS59 INS8 INS12 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS14 INS42 INS14 INS42 INS14 MOV32 INS42 INS40 INS40 INS40 INS14 INS36 INS21 INS41 INS42 INS42 INS11 INS21 INS21 INS44 INS8 INS36 INS21 INS41 INS42 INS42 INS11 INS21 INS21 INS44 INS8 INS36 INS21 INS41 INS42 INS42 INS11 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS40 INS42 INS42 INS43 INS42 INS40 INS42 INS42 INS43 INS33 INS40 INS42 INS42 UPD40 UPD40 UPD40 MOV40 INS14 INS43 INS62 INS32 INS43 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS62 INS32 INS43 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS62 INS32 INS43 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS42 UPD40 UPD40 INS14 INS43 INS42 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS43 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL32