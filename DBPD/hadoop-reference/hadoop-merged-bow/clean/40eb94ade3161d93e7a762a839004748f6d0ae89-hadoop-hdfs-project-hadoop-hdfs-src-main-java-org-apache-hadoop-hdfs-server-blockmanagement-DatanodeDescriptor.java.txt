HDFS-5053. NameNode should invoke DataNode APIs to coordinate caching. (Andrew Wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1523145 13f79535-47bb-0310-9956-ffa450edef68

+
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Preconditions;
+
+  /**
+   * Head of the list of blocks on the datanode
+   */
+  /**
+   * Number of blocks on the datanode
+   */
+
+  /**
+   * Head of the list of cached blocks on the datanode
+   */
+  private volatile BlockInfo cachedBlockList = null;
+  /**
+   * Number of cached blocks on the datanode
+   */
+  private int numCachedBlocks = 0;
+
+  /** A queue of blocks to be cached by this datanode */
+  private BlockQueue<Block> cacheBlocks = new BlockQueue<Block>();
+  /** A set of blocks to be uncached by this datanode */
+  private LightWeightHashSet<Block> blocksToUncache =
+      new LightWeightHashSet<Block>();
+
+   * Add block to the list of cached blocks on the data-node.
+   * @return true if block was successfully added, false if already present
+   */
+  public boolean addCachedBlock(BlockInfo b) {
+    if (!b.addNode(this))
+      return false;
+    // add to the head of the data-node list
+    cachedBlockList = b.listInsert(cachedBlockList, this);
+    numCachedBlocks++;
+    return true;
+  }
+
+  /**
+   * Remove block from the list of cached blocks on the data-node.
+   * @return true if block was successfully removed, false if not present
+   */
+  public boolean removeCachedBlock(BlockInfo b) {
+    cachedBlockList = b.listRemove(cachedBlockList, this);
+    if (b.removeNode(this)) {
+      numCachedBlocks--;
+      return true;
+    } else {
+      return false;
+    }
+  }
+
+  /**
+   * Move block to the head of the list of cached blocks on the data-node.
+   * @return the index of the head of the blockList
+   */
+  int moveCachedBlockToHead(BlockInfo b, int curIndex, int headIndex) {
+    cachedBlockList = b.moveBlockToHead(cachedBlockList, this, curIndex,
+        headIndex);
+    return curIndex;
+  }
+
+  /**
+  @VisibleForTesting
+  @VisibleForTesting
+  protected BlockInfo getCachedHead() {
+    return cachedBlockList;
+  }
+
+    this.cachedBlockList = null;
+    this.blocksToUncache.clear();
+    synchronized(blocksToUncache) {
+      this.blocksToUncache.clear();
+      this.cacheBlocks.clear();
+    }
+  public int numCachedBlocks() {
+    return numCachedBlocks;
+  }
+
-  
+
+  public Iterator<BlockInfo> getCachedBlockIterator() {
+    return new BlockIterator(this.cachedBlockList, this);
+  }
+
+   * Store block caching work.
+   */
+  void addBlockToBeCached(Block block) {
+    assert(block != null);
+    cacheBlocks.offer(block);
+  }
+
+  /**
+  
+  /**
+   * Store block uncaching work.
+   */
+  void addBlocksToBeUncached(List<Block> blocklist) {
+    assert(blocklist != null && blocklist.size() > 0);
+    synchronized (blocksToUncache) {
+      for (Block blk : blocklist) {
+        blocksToUncache.add(blk);
+      }
+    }
+  }
+   * The number of pending cache work items
+   */
+  int getNumberOfBlocksToBeCached() {
+    return cacheBlocks.size();
+  }
+
+  /**
-  
+
+  /**
+   * The number of pending uncache work items
+   */
+  int getNumberOfBlocksToBeUncached() {
+    synchronized (blocksToUncache) {
+      return blocksToUncache.size();
+    }
+  }
+
+  public List<Block> getCacheBlocks() {
+    return cacheBlocks.poll(cacheBlocks.size());
+  }
+
+   * Remove up to the maximum number of blocks to be uncached
+   */
+  public Block[] getInvalidateCacheBlocks() {
+    synchronized (blocksToUncache) {
+      Block[] deleteList = blocksToUncache.pollToArray(
+          new Block[blocksToUncache.size()]);
+      return deleteList.length == 0 ? null : deleteList;
+    }
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS29 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS74 INS59 INS29 INS83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS78 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS74 INS42 INS8 INS29 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS83 INS74 INS42 INS8 INS29 INS83 INS5 INS42 INS8 INS65 INS65 INS65 INS42 INS42 INS33 INS65 INS42 INS34 INS65 INS43 INS43 INS42 INS14 INS65 INS43 INS43 INS42 INS14 INS65 INS65 INS43 INS42 INS25 INS21 INS21 INS41 INS65 INS65 INS43 INS42 INS21 INS25 INS65 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS21 INS41 INS42 INS42 INS42 INS41 INS21 INS21 INS51 INS41 INS43 INS43 INS41 INS65 INS43 INS42 INS6 INS21 INS65 INS74 INS42 INS6 INS51 INS65 INS41 INS65 INS51 INS43 INS43 INS41 INS65 INS43 INS85 INS51 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS74 INS66 INS42 INS42 INS74 INS66 INS66 INS42 INS38 INS41 INS7 INS37 INS9 INS66 INS66 INS42 INS7 INS32 INS8 INS8 INS66 INS66 INS42 INS7 INS42 INS42 INS7 INS32 INS42 INS8 INS42 INS42 INS42 INS14 INS66 INS42 INS36 INS32 INS66 INS43 INS43 INS36 INS42 INS8 INS66 INS32 INS66 INS42 INS8 INS42 INS42 INS32 INS66 INS42 INS42 INS8 INS43 INS43 INS43 INS43 INS32 INS9 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS52 INS21 INS41 INS41 INS42 INS32 INS22 INS33 INS22 INS42 INS21 INS21 INS43 INS22 INS52 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS70 INS42 INS42 INS41 INS42 INS42 INS32 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS37 INS9 INS9 INS42 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS52 INS42 INS32 INS32 INS42 INS52 INS42 INS42 INS33 INS27 INS27 INS44 INS42 INS8 INS32 INS42 INS42 INS5 INS59 INS16 INS42 INS22 INS42 INS22 INS42 INS42 INS33 INS32 INS34 INS43 INS42 INS21 INS42 INS42 INS43 INS85 INS42 INS32 INS27 INS33 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS3 INS40 INS34 INS42 INS42 INS42 INS5 INS32 INS43 INS85 INS42 INS42 INS42