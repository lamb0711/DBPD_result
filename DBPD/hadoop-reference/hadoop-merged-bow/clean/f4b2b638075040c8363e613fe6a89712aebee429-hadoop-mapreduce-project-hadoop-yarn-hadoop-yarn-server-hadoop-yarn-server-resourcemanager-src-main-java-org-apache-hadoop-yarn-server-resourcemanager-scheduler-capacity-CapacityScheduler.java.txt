Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1170378 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.yarn.api.records.ApplicationId;
-import org.apache.hadoop.yarn.api.records.ContainerState;
+import org.apache.hadoop.yarn.api.records.ContainerStatus;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.AppSchedulingInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerUtils;
-  private Queue root;
+  private CSQueue root;
-  static final Comparator<Queue> queueComparator = new Comparator<Queue>() {
+  static final Comparator<CSQueue> queueComparator = new Comparator<CSQueue>() {
-    public int compare(Queue q1, Queue q2) {
+    public int compare(CSQueue q1, CSQueue q2) {
-  private Map<String, Queue> queues = new ConcurrentHashMap<String, Queue>();
+  private Map<String, CSQueue> queues = new ConcurrentHashMap<String, CSQueue>();
-  public Queue getRootQueue() {
+  public CapacityScheduler() {}
+
+  public CSQueue getRootQueue() {
-    public Queue hook(Queue queue) {
+    public CSQueue hook(CSQueue queue) {
-    Map<String, Queue> newQueues = new HashMap<String, Queue>();
-    Queue newRoot = 
+    Map<String, CSQueue> newQueues = new HashMap<String, CSQueue>();
+    CSQueue newRoot = 
-      Map<String, Queue> queues, Map<String, Queue> newQueues) 
+      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues) 
-      Map<String, Queue> queues, Map<String, Queue> newQueues) 
+      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues) 
-    for (Map.Entry<String, Queue> e : newQueues.entrySet()) {
+    for (Map.Entry<String, CSQueue> e : newQueues.entrySet()) {
-      Queue queue = e.getValue();
+      CSQueue queue = e.getValue();
-  static Queue parseQueue(
+  static CSQueue parseQueue(
-      Queue parent, String queueName, Map<String, Queue> queues,
-      Map<String, Queue> oldQueues, 
-      Comparator<Queue> queueComparator,
+      CSQueue parent, String queueName, Map<String, CSQueue> queues,
+      Map<String, CSQueue> oldQueues, 
+      Comparator<CSQueue> queueComparator,
-    Queue queue;
+    CSQueue queue;
-      List<Queue> childQueues = new ArrayList<Queue>();
+      List<CSQueue> childQueues = new ArrayList<CSQueue>();
-        Queue childQueue = 
+        CSQueue childQueue = 
-  synchronized Queue getQueue(String queueName) {
+  synchronized CSQueue getQueue(String queueName) {
-    Queue queue = getQueue(queueName);
+    CSQueue queue = getQueue(queueName);
-      completedContainer(rmContainer, RMContainerEventType.KILL);
+      completedContainer(rmContainer, 
+          SchedulerUtils.createAbnormalContainerStatus(
+              rmContainer.getContainerId(), 
+              SchedulerUtils.COMPLETED_APPLICATION), 
+          RMContainerEventType.KILL);
-      completedContainer(rmContainer, RMContainerEventType.KILL);
+      completedContainer(rmContainer, 
+          SchedulerUtils.createAbnormalContainerStatus(
+              rmContainer.getContainerId(), 
+              "Application Complete"), 
+          RMContainerEventType.KILL);
-    Queue queue = queues.get(queueName);
+    CSQueue queue = queues.get(queueName);
-      completedContainer(rmContainer, RMContainerEventType.RELEASED);
+      completedContainer(rmContainer,
+          SchedulerUtils.createAbnormalContainerStatus(
+              releasedContainerId, 
+              SchedulerUtils.RELEASED_CONTAINER),
+          RMContainerEventType.RELEASED);
-    Queue queue = null;
+    CSQueue queue = null;
-      Map<ApplicationId, List<Container>> containers ) {
+      List<ContainerStatus> newlyLaunchedContainers,
+      List<ContainerStatus> completedContainers) {
-    // Processing the current containers running/finished on node
-    for (List<Container> appContainers : containers.values()) {
-      for (Container container : appContainers) {
-        if (container.getState() == ContainerState.RUNNING) {
-          containerLaunchedOnNode(container, node);
-        } else { // has to be 'COMPLETE'
-          LOG.info("DEBUG --- Container FINISHED: " + container.getId());
-          completedContainer(getRMContainer(container.getId()), 
-              RMContainerEventType.FINISHED);
-        }
-      }
+    // Processing the newly launched containers
+    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {
+      containerLaunchedOnNode(launchedContainer.getContainerId(), node);
+    }
+
+    // Process completed containers
+    for (ContainerStatus completedContainer : completedContainers) {
+      ContainerId containerId = completedContainer.getContainerId();
+      LOG.info("DEBUG --- Container FINISHED: " + containerId);
+      completedContainer(getRMContainer(containerId), 
+          completedContainer, RMContainerEventType.FINISHED);
-          node.getReservedContainer().getContainerId().getAppId());
+          node.getReservedContainer().getContainerId().getApplicationAttemptId()
+          );
-  private void containerLaunchedOnNode(Container container, SchedulerNode node) {
+  private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {
-    ApplicationAttemptId applicationAttemptId = container.getId().getAppAttemptId();
+    ApplicationAttemptId applicationAttemptId = containerId.getApplicationAttemptId();
-          " launched container " + container.getId() +
+          " launched container " + containerId +
-    application.containerLaunchedOnNode(container.getId());
+    application.containerLaunchedOnNode(containerId);
-          nodeUpdatedEvent.getContainers());
+          nodeUpdatedEvent.getNewlyLaunchedContainers(),
+          nodeUpdatedEvent.getCompletedContainers());
-      completedContainer(getRMContainer(containerExpiredEvent.getContainerId()), 
+      ContainerId containerId = containerExpiredEvent.getContainerId();
+      completedContainer(getRMContainer(containerId), 
+          SchedulerUtils.createAbnormalContainerStatus(
+              containerId, 
+              SchedulerUtils.EXPIRED_CONTAINER), 
-      completedContainer(container, RMContainerEventType.KILL);
+      completedContainer(container, 
+          SchedulerUtils.createAbnormalContainerStatus(
+              container.getContainerId(), 
+              SchedulerUtils.LOST_CONTAINER), 
+          RMContainerEventType.KILL);
-      completedContainer(reservedContainer, RMContainerEventType.KILL);
+      completedContainer(reservedContainer, 
+          SchedulerUtils.createAbnormalContainerStatus(
+              reservedContainer.getContainerId(), 
+              SchedulerUtils.LOST_CONTAINER), 
+          RMContainerEventType.KILL);
-  private synchronized void completedContainer(RMContainer rmContainer, 
-      RMContainerEventType event) {
+  private synchronized void completedContainer(RMContainer rmContainer,
+      ContainerStatus containerStatus, RMContainerEventType event) {
-    ApplicationAttemptId applicationAttemptId = container.getId().getAppAttemptId();
+    ApplicationAttemptId applicationAttemptId = container.getId().getApplicationAttemptId();
-        rmContainer, event);
+        rmContainer, containerStatus, event);
-        getApplication(containerId.getAppAttemptId());
+        getApplication(containerId.getApplicationAttemptId());

MOV26 UPD40 UPD40 INS31 UPD43 UPD74 UPD74 INS83 INS42 INS8 UPD43 UPD43 UPD43 MOV44 INS44 UPD42 UPD43 UPD43 UPD42 UPD43 UPD74 UPD74 UPD74 UPD74 UPD42 UPD43 UPD74 UPD74 UPD74 UPD42 UPD74 MOV74 UPD42 UPD74 UPD42 INS70 MOV70 UPD43 UPD42 INS43 INS42 UPD42 UPD74 UPD42 UPD74 UPD42 UPD43 UPD74 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS44 INS42 INS8 UPD42 UPD42 INS42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS42 INS21 UPD43 UPD42 INS60 MOV21 MOV21 UPD42 MOV42 INS60 INS42 UPD42 UPD42 UPD42 UPD74 UPD43 UPD43 UPD74 INS42 INS32 UPD42 INS43 INS59 UPD42 MOV42 UPD42 INS43 INS59 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD43 INS32 INS32 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS32 INS42 INS42 MOV32 INS32 INS32 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD43 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS40 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS40 UPD43 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL32 DEL21 DEL8 DEL8 DEL25 DEL32 DEL8 DEL70 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32