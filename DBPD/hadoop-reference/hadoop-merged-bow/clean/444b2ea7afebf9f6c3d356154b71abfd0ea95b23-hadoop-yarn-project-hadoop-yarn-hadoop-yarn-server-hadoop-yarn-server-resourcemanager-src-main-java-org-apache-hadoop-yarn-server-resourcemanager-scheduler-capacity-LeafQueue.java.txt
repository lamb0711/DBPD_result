YARN-3388. Allocation in LeafQueue could get stuck because DRF calculator isn't well supported when computing user-limit. (Nathan Roberts via wangda)

+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
+import org.apache.hadoop.yarn.util.resource.ResourceCalculator;
+import com.google.common.collect.Sets;
-  
+
+  // Summation of consumed ratios for all users in queue
+  private float totalUserConsumedRatio = 0;
+  private UsageRatios qUsageRatios;
+
+    qUsageRatios = new UsageRatios();
+
-    
+
+    Resource partitionResource = labelManager.getResourceByLabel(nodePartition,
+        clusterResource);
+
-            labelManager.getResourceByLabel(nodePartition, clusterResource),
+            partitionResource,
-            resourceCalculator, clusterResource, 
+            resourceCalculator, partitionResource,
+
+    /* We want to base the userLimit calculation on
+     * max(queueCapacity, usedResources+required). However, we want
+     * usedResources to be based on the combined ratios of all the users in the
+     * queue so we use consumedRatio to calculate such.
+     * The calculation is dependent on how the resourceCalculator calculates the
+     * ratio between two Resources. DRF Example: If usedResources is
+     * greater than queueCapacity and users have the following [mem,cpu] usages:
+     * User1: [10%,20%] - Dominant resource is 20%
+     * User2: [30%,10%] - Dominant resource is 30%
+     * Then total consumedRatio is then 20+30=50%. Yes, this value can be
+     * larger than 100% but for the purposes of making sure all users are
+     * getting their fair share, it works.
+     */
+    Resource consumed = Resources.multiplyAndNormalizeUp(resourceCalculator,
+        partitionResource, qUsageRatios.getUsageRatio(nodePartition),
+        minimumAllocation);
-        Resources.lessThan(resourceCalculator, clusterResource,
-            queueUsage.getUsed(nodePartition), queueCapacity) ? queueCapacity
-            : Resources.add(queueUsage.getUsed(nodePartition), required);
-    
+        Resources.lessThan(resourceCalculator, partitionResource, consumed,
+            queueCapacity) ? queueCapacity : Resources.add(consumed, required);
-    // max{currentCapacity / #activeUsers, currentCapacity * user-limit-percentage%)
+    // max{currentCapacity / #activeUsers, currentCapacity *
+    // user-limit-percentage%)
-        resourceCalculator, clusterResource, 
+        resourceCalculator, partitionResource,
-      maxUserLimit =
-          labelManager.getResourceByLabel(nodePartition, clusterResource);
+      maxUserLimit = partitionResource;
-                resourceCalculator, clusterResource,   
+                resourceCalculator, partitionResource,
-      LOG.debug("User limit computation for " + userName + 
+      LOG.debug("User limit computation for " + userName +
-          " required: " + required + 
-          " consumed: " + user.getUsed() + 
+          " required: " + required +
+          " consumed: " + consumed +
-          " queueCapacity: " + queueCapacity + 
+          " queueCapacity: " + queueCapacity +
+          " consumedRatio: " + totalUserConsumedRatio +
-          " clusterCapacity: " + clusterResource
+          " clusterCapacity: " + clusterResource +
+          " resourceByLabel: " + partitionResource +
+          " usageratio: " + qUsageRatios.getUsageRatio(nodePartition) +
+          " Partition: " + nodePartition
+  private synchronized float calculateUserUsageRatio(Resource clusterResource,
+      String nodePartition) {
+    Resource resourceByLabel =
+        labelManager.getResourceByLabel(nodePartition, clusterResource);
+    float consumed = 0;
+    User user;
+    for (Map.Entry<String, User> entry : users.entrySet()) {
+      user = entry.getValue();
+      consumed += user.resetAndUpdateUsageRatio(resourceCalculator,
+          resourceByLabel, nodePartition);
+    }
+    return consumed;
+  }
+
+  private synchronized void recalculateQueueUsageRatio(Resource clusterResource,
+      String nodePartition) {
+    ResourceUsage queueResourceUsage = this.getQueueResourceUsage();
+
+    if (nodePartition == null) {
+      for (String partition : Sets.union(queueCapacities.getNodePartitionsSet(),
+          queueResourceUsage.getNodePartitionsSet())) {
+        qUsageRatios.setUsageRatio(partition,
+            calculateUserUsageRatio(clusterResource, partition));
+      }
+    } else {
+      qUsageRatios.setUsageRatio(nodePartition,
+          calculateUserUsageRatio(clusterResource, nodePartition));
+    }
+  }
+
+  private synchronized void updateQueueUsageRatio(String nodePartition,
+      float delta) {
+    qUsageRatios.incUsageRatio(nodePartition, delta);
+  }
+
+
-          
+
+    Resource resourceByLabel = labelManager.getResourceByLabel(nodePartition,
+        clusterResource);
+
+    // Update usage ratios
+    updateQueueUsageRatio(nodePartition,
+        user.updateUsageRatio(resourceCalculator, resourceByLabel,
+            nodePartition));
+
+    Resource resourceByLabel = labelManager.getResourceByLabel(nodePartition,
+        clusterResource);
+
+    // Update usage ratios
+    updateQueueUsageRatio(nodePartition,
+        user.updateUsageRatio(resourceCalculator, resourceByLabel,
+            nodePartition));
+
-    
+
+    // Update user consumedRatios
+    recalculateQueueUsageRatio(clusterResource, null);
+
+  /*
+   * Usage Ratio
+   */
+  static private class UsageRatios {
+    private Map<String, Float> usageRatios;
+    private ReadLock readLock;
+    private WriteLock writeLock;
+
+    public UsageRatios() {
+      ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+      readLock = lock.readLock();
+      writeLock = lock.writeLock();
+      usageRatios = new HashMap<String, Float>();
+    }
+
+    private void incUsageRatio(String label, float delta) {
+      try {
+        writeLock.lock();
+        Float fl = usageRatios.get(label);
+        if (null == fl) {
+          fl = new Float(0.0);
+        }
+        fl += delta;
+        usageRatios.put(label, new Float(fl));
+      } finally {
+        writeLock.unlock();
+      }
+    }
+
+    float getUsageRatio(String label) {
+      try {
+        readLock.lock();
+        Float f = usageRatios.get(label);
+        if (null == f) {
+          return 0.0f;
+        }
+        return f;
+      } finally {
+        readLock.unlock();
+      }
+    }
+
+    private void setUsageRatio(String label, float ratio) {
+      try {
+        writeLock.lock();
+        usageRatios.put(label, new Float(ratio));
+      } finally {
+        writeLock.unlock();
+      }
+    }
+  }
+
+  @VisibleForTesting
+  public float getUsageRatio(String label) {
+    return qUsageRatios.getUsageRatio(label);
+  }
+
+    private UsageRatios userUsageRatios = new UsageRatios();
+    public synchronized float resetAndUpdateUsageRatio(
+        ResourceCalculator resourceCalculator,
+        Resource resource, String nodePartition) {
+      userUsageRatios.setUsageRatio(nodePartition, 0);
+      return updateUsageRatio(resourceCalculator, resource, nodePartition);
+    }
+
+    public synchronized float updateUsageRatio(
+        ResourceCalculator resourceCalculator,
+        Resource resource, String nodePartition) {
+      float delta;
+      float newRatio =
+          Resources.ratio(resourceCalculator, getUsed(nodePartition), resource);
+      delta = newRatio - userUsageRatios.getUsageRatio(nodePartition);
+      userUsageRatios.setUsageRatio(nodePartition, newRatio);
+      return delta;
+    }
+
-    for (FiCaSchedulerApp app : 
+    for (FiCaSchedulerApp app :

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS55 INS31 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS8 INS23 INS31 INS31 INS42 INS34 INS42 INS42 INS21 INS60 INS60 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS70 INS41 INS43 INS42 INS43 INS42 INS60 INS25 INS43 INS42 INS39 INS42 INS21 INS60 INS21 INS60 INS21 INS21 INS83 INS74 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS41 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS7 MOV43 INS59 MOV43 INS59 INS43 INS59 INS43 INS42 INS42 INS43 MOV59 INS39 INS59 INS43 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS43 INS42 INS39 INS42 INS54 INS43 INS42 INS54 INS43 INS42 INS39 INS42 INS54 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS41 INS42 INS14 INS42 MOV32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 INS34 INS42 INS42 INS74 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS70 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS43 INS59 INS7 INS7 INS7 INS42 INS8 INS8 INS42 INS8 INS8 INS42 INS8 INS8 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS7 INS32 INS42 INS43 INS42 INS42 INS42 INS42 MOV32 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS43 INS43 INS43 INS7 INS7 INS52 INS42 INS44 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS14 INS21 INS60 INS25 INS21 INS21 INS21 INS21 INS60 INS25 INS41 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS40 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS74 INS32 INS43 INS59 INS27 INS8 INS7 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS34 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32