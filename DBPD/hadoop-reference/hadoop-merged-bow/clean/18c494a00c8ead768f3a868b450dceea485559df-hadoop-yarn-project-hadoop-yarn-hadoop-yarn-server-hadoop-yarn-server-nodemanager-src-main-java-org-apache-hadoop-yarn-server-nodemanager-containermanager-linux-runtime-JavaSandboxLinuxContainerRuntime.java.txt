YARN-6447. Provide container sandbox policies for groups (gphillips via rkanter)

+import java.util.stream.Collectors;
+import static org.apache.hadoop.yarn.conf.YarnConfiguration.YARN_CONTAINER_SANDBOX;
+import static org.apache.hadoop.yarn.conf.YarnConfiguration.YARN_CONTAINER_SANDBOX_POLICY_GROUP_PREFIX;
- *     java.policy   file provided with hadoop resources will be used.
+ *     java.policy file provided with hadoop resources will be used.
+ *   <li>
+ *     {@value
+ *     YarnConfiguration#YARN_CONTAINER_SANDBOX_POLICY_GROUP_PREFIX}$groupName :
+ *     Optional setting to map groups to java policy files.  The value is a path
+ *     to the java policy file for $groupName.  A user which is a member of
+ *     multiple groups with different policies will receive the superset of all
+ *     the permissions across their groups.
+ *   </li>
-            this.configuration.get(YarnConfiguration.YARN_CONTAINER_SANDBOX,
+            this.configuration.get(YARN_CONTAINER_SANDBOX,
+    String username =
+        ctx.getExecutionAttribute(USER);
-    if(!isSandboxContainerWhitelisted(ctx, commands)) {
+    if(!isSandboxContainerWhitelisted(username, commands)) {
+        List<String> groupPolicyFiles =
+            getGroupPolicyFiles(configuration, ctx.getExecutionAttribute(USER));
-        NMContainerPolicyUtils.generatePolicyFile(
-            policyOutputStream, localDirs, resources, configuration);
+        NMContainerPolicyUtils.generatePolicyFile(policyOutputStream,
+            localDirs, groupPolicyFiles, resources, configuration);
-      } catch (Exception e) {
+      } catch (IOException e) {
+  private static List<String> getGroupPolicyFiles(Configuration conf,
+      String user) throws ContainerExecutionException {
+    Groups groups = Groups.getUserToGroupsMappingService(conf);
+    List<String> userGroups;
+    try {
+      userGroups = groups.getGroups(user);
+    } catch (IOException e) {
+      throw new ContainerExecutionException("Container user does not exist");
+    }
+
+    return userGroups.stream()
+        .map(group -> conf.get(YARN_CONTAINER_SANDBOX_POLICY_GROUP_PREFIX
+            + group))
+        .filter(groupPolicy -> groupPolicy != null)
+        .collect(Collectors.toList());
+  }
+
-   * @param ctx The container runtime context for the requested container
+   * @param username The name of the user running the container
-  private boolean isSandboxContainerWhitelisted(ContainerRuntimeContext ctx,
+  private boolean isSandboxContainerWhitelisted(String username,
-      userGroups = groups.getGroups(ctx.getExecutionAttribute(USER));
+      userGroups = groups.getGroups(username);
-        List<String> localDirs, Map<org.apache.hadoop.fs.Path,
-        List<String>> resources, Configuration conf)
+        List<String> localDirs, List<String> groupPolicyPaths,
+        Map<org.apache.hadoop.fs.Path, List<String>> resources,
+        Configuration conf)
-      if(policyFilePath == null) {
+      if (groupPolicyPaths != null) {
+        for(String policyPath : groupPolicyPaths) {
+          Files.copy(Paths.get(policyPath), policyOutStream);
+        }
+      } else if (policyFilePath == null) {
-        policyOutStream.flush();
-      if (System.getenv(JAVA_HOME.name()) == null){
+      if (System.getenv(JAVA_HOME.name()) == null) {

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS8 UPD66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS60 INS43 INS43 INS43 INS42 INS43 INS42 INS42 INS60 INS60 MOV54 INS41 UPD43 UPD42 INS54 INS44 INS67 INS43 INS59 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS32 UPD42 UPD66 UPD42 INS8 INS12 INS74 INS42 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS32 INS21 INS44 INS8 INS43 INS43 INS27 INS8 MOV25 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS33 INS70 INS42 INS60 INS32 INS42 INS86 INS59 INS27 INS42 INS32 INS42 INS14 INS44 INS42 INS8 INS74 INS59 UPD43 UPD42 MOV42 INS42 INS42 INS59 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS43 INS45 INS43 INS42 INS21 INS43 INS43 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL40 DEL42 DEL42 DEL32 DEL21