YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He

-import org.apache.hadoop.yarn.service.api.records.Application;
+import org.apache.hadoop.yarn.service.api.records.Service;
-import org.apache.hadoop.yarn.service.servicemonitor.probe.MonitorUtils;
+import org.apache.hadoop.yarn.service.monitor.probe.MonitorUtils;
-  public static JsonSerDeser<Application> jsonSerDeser =
-      new JsonSerDeser<>(Application.class,
+  public static JsonSerDeser<Service> jsonSerDeser =
+      new JsonSerDeser<>(Service.class,
-  private static final PatternValidator compNamePattern
+  private static final PatternValidator namePattern
-  public static void validateAndResolveApplication(Application application,
+  public static void validateAndResolveService(Service service,
-    if (StringUtils.isEmpty(application.getName())) {
+    if (StringUtils.isEmpty(service.getName())) {
-    if (!SliderUtils.isClusternameValid(application.getName()) || (dnsEnabled
-        && application.getName().length() > RegistryConstants
-        .MAX_FQDN_LABEL_LENGTH)) {
-      throw new IllegalArgumentException(String.format(
-          RestApiErrorMessages.ERROR_APPLICATION_NAME_INVALID_FORMAT,
-          application.getName()));
-    }
-    // If the application has no components do top-level checks
-    if (!hasComponent(application)) {
-      // If artifact is of type APPLICATION, read other application components
-      if (application.getArtifact() != null && application.getArtifact()
-          .getType() == Artifact.TypeEnum.APPLICATION) {
-        if (StringUtils.isEmpty(application.getArtifact().getId())) {
+    validateNameFormat(service.getName(), conf);
+
+    // If the service has no components do top-level checks
+    if (!hasComponent(service)) {
+      // If artifact is of type SERVICE, read other service components
+      if (service.getArtifact() != null && service.getArtifact()
+          .getType() == Artifact.TypeEnum.SERVICE) {
+        if (StringUtils.isEmpty(service.getArtifact().getId())) {
-        Application otherApplication = loadApplication(fs,
-            application.getArtifact().getId());
-        application.setComponents(otherApplication.getComponents());
-        application.setArtifact(null);
-        SliderUtils.mergeMapsIgnoreDuplicateKeys(application.getQuicklinks(),
-            otherApplication.getQuicklinks());
+        Service otherService = loadService(fs,
+            service.getArtifact().getId());
+        service.setComponents(otherService.getComponents());
+        service.setArtifact(null);
+        SliderUtils.mergeMapsIgnoreDuplicateKeys(service.getQuicklinks(),
+            otherService.getQuicklinks());
-        // Since it is a simple app with no components, create a default
+        // Since it is a simple service with no components, create a default
-        Component comp = createDefaultComponent(application);
-        validateComponent(comp, fs.getFileSystem());
-        application.getComponents().add(comp);
-        if (application.getLifetime() == null) {
-          application.setLifetime(RestApiConstants.DEFAULT_UNLIMITED_LIFETIME);
+        Component comp = createDefaultComponent(service);
+        validateComponent(comp, fs.getFileSystem(), conf);
+        service.getComponents().add(comp);
+        if (service.getLifetime() == null) {
+          service.setLifetime(RestApiConstants.DEFAULT_UNLIMITED_LIFETIME);
-    // currently supported) and add any components from external applications
+    // currently supported) and add any components from external services
-    Configuration globalConf = application.getConfiguration();
+    Configuration globalConf = service.getConfiguration();
-    for (Component comp : application.getComponents()) {
+    for (Component comp : service.getComponents()) {
-      // If artifact is of type APPLICATION (which cannot be filled from
-      // global), read external application and add its components to this
-      // application
+      // If artifact is of type SERVICE (which cannot be filled from
+      // global), read external service and add its components to this
+      // service
-          Artifact.TypeEnum.APPLICATION) {
+          Artifact.TypeEnum.SERVICE) {
-        List<Component> externalComponents = getApplicationComponents(fs,
+        List<Component> externalComponents = getComponents(fs,
-          Component override = application.getComponent(c.getName());
+          Component override = service.getComponent(c.getName());
-    application.getComponents().removeAll(componentsToRemove);
-    application.getComponents().addAll(componentsToAdd);
+    service.getComponents().removeAll(componentsToRemove);
+    service.getComponents().addAll(componentsToAdd);
-    Artifact globalArtifact = application.getArtifact();
-    Resource globalResource = application.getResource();
-    Long globalNumberOfContainers = application.getNumberOfContainers();
-    String globalLaunchCommand = application.getLaunchCommand();
-    for (Component comp : application.getComponents()) {
-      // fill in global artifact unless it is type APPLICATION
-      if (comp.getArtifact() == null && application.getArtifact() != null
-          && application.getArtifact().getType() != Artifact.TypeEnum
-          .APPLICATION) {
+    Artifact globalArtifact = service.getArtifact();
+    Resource globalResource = service.getResource();
+    Long globalNumberOfContainers = service.getNumberOfContainers();
+    String globalLaunchCommand = service.getLaunchCommand();
+    for (Component comp : service.getComponents()) {
+      // fill in global artifact unless it is type SERVICE
+      if (comp.getArtifact() == null && service.getArtifact() != null
+          && service.getArtifact().getType() != Artifact.TypeEnum
+          .SERVICE) {
-      validateComponent(comp, fs.getFileSystem());
+      validateComponent(comp, fs.getFileSystem(), conf);
-    sortByDependencies(application.getComponents());
+    sortByDependencies(service.getComponents());
-    // Application lifetime if not specified, is set to unlimited lifetime
-    if (application.getLifetime() == null) {
-      application.setLifetime(RestApiConstants.DEFAULT_UNLIMITED_LIFETIME);
+    // Service lifetime if not specified, is set to unlimited lifetime
+    if (service.getLifetime() == null) {
+      service.setLifetime(RestApiConstants.DEFAULT_UNLIMITED_LIFETIME);
-  public static void validateComponent(Component comp, FileSystem fs)
+  private static void validateComponent(Component comp, FileSystem fs,
+      org.apache.hadoop.conf.Configuration conf)
-    validateCompName(comp.getName());
+    validateNameFormat(comp.getName(), conf);
-    validateApplicationResource(comp.getResource(), comp);
+    validateServiceResource(comp.getResource(), comp);
-  // Check component name format and transform to lower case.
-  public static void validateCompName(String compName) {
-    if (StringUtils.isEmpty(compName)) {
-      throw new IllegalArgumentException("Component name can not be empty");
+  // Check component or service name format and transform to lower case.
+  public static void validateNameFormat(String name,
+      org.apache.hadoop.conf.Configuration conf) {
+    if (StringUtils.isEmpty(name)) {
+      throw new IllegalArgumentException("Name can not be empty!");
-    if (compName.contains("_")) {
+    if (name.contains("_")) {
-          "Invalid format for component name: " + compName
-              + ", can not use '_' as DNS hostname does not allow underscore. Use '-' Instead. ");
+          "Invalid format: " + name
+              + ", can not use '_', as DNS hostname does not allow '_'. Use '-' Instead. ");
-    compNamePattern.validate(compName);
+    boolean dnsEnabled = conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED,
+        RegistryConstants.DEFAULT_DNS_ENABLED);
+    if (dnsEnabled && name.length() > RegistryConstants.MAX_FQDN_LABEL_LENGTH) {
+      throw new IllegalArgumentException(String
+          .format("Invalid format %s, must be no more than 63 characters ",
+              name));
+    }
+    namePattern.validate(name);
-  public static List<Component> getApplicationComponents(SliderFileSystem
-      fs, String appName) throws IOException {
-    return loadApplication(fs, appName).getComponents();
+  public static List<Component> getComponents(SliderFileSystem
+      fs, String serviceName) throws IOException {
+    return loadService(fs, serviceName).getComponents();
-  public static Application loadApplication(SliderFileSystem fs, String
-      appName) throws IOException {
-    Path appJson = getAppJsonPath(fs, appName);
-    LOG.info("Loading application definition from " + appJson);
-    return jsonSerDeser.load(fs.getFileSystem(), appJson);
+  public static Service loadService(SliderFileSystem fs, String
+      serviceName) throws IOException {
+    Path serviceJson = getServiceJsonPath(fs, serviceName);
+    LOG.info("Loading service definition from " + serviceJson);
+    return jsonSerDeser.load(fs.getFileSystem(), serviceJson);
-  public static Application loadApplicationFrom(SliderFileSystem fs,
+  public static Service loadServiceFrom(SliderFileSystem fs,
-    LOG.info("Loading application definition from " + appDefPath);
+    LOG.info("Loading service definition from " + appDefPath);
-  public static Path getAppJsonPath(SliderFileSystem fs, String appName) {
-    Path appDir = fs.buildClusterDirPath(appName);
-    Path appJson = new Path(appDir, appName + ".json");
-    return appJson;
+  public static Path getServiceJsonPath(SliderFileSystem fs, String serviceName) {
+    Path serviceDir = fs.buildClusterDirPath(serviceName);
+    return new Path(serviceDir, serviceName + ".json");
-  private static void validateApplicationResource(Resource resource,
+  private static void validateServiceResource(Resource resource,
-    // Only apps/components of type APPLICATION can skip resource requirement
+    // Only services/components of type SERVICE can skip resource requirement
-      Application application) throws YarnException {
-    for (Component component : application.getComponents()) {
+      Service service) throws YarnException {
+    for (Component component : service.getComponents()) {
-  public static boolean hasComponent(Application application) {
-    if (application.getComponents() == null || application.getComponents()
+  public static boolean hasComponent(Service service) {
+    if (service.getComponents() == null || service.getComponents()
-  public static Component createDefaultComponent(Application app) {
+  public static Component createDefaultComponent(Service service) {
-    comp.setArtifact(app.getArtifact());
-    comp.setResource(app.getResource());
-    comp.setNumberOfContainers(app.getNumberOfContainers());
-    comp.setLaunchCommand(app.getLaunchCommand());
-    comp.setConfiguration(app.getConfiguration());
+    comp.setArtifact(service.getArtifact());
+    comp.setResource(service.getResource());
+    comp.setNumberOfContainers(service.getNumberOfContainers());
+    comp.setLaunchCommand(service.getLaunchCommand());
+    comp.setConfiguration(service.getConfiguration());

UPD40 UPD40 UPD74 UPD42 UPD83 INS44 UPD42 INS44 UPD42 INS44 INS43 INS42 MOV44 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 INS21 INS43 INS42 UPD42 INS43 INS42 INS60 INS25 MOV43 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 INS41 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 INS32 INS40 INS40 INS39 INS59 INS27 INS8 INS42 MOV43 INS14 UPD42 UPD42 UPD42 UPD43 UPD42 MOV42 MOV32 INS42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS27 INS53 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 UPD42 MOV42 MOV27 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS40 INS40 INS32 INS40 INS14 UPD42 UPD42 UPD42 UPD42 UPD45 UPD42 UPD45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 MOV43 UPD45 MOV43 INS42 INS42 MOV43 INS32 UPD42 UPD42 UPD40 UPD43 UPD40 UPD40 UPD45 UPD42 UPD45 INS42 INS42 INS45 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL27 DEL36 DEL27 DEL42 DEL40 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL41