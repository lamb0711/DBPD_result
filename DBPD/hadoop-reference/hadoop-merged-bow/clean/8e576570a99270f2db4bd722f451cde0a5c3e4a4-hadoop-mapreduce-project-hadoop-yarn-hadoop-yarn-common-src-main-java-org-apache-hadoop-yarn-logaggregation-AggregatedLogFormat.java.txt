MAPREDUCE-4283. Display tail of aggregated logs by default (Jason Lowe via bobby)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362608 13f79535-47bb-0310-9956-ffa450edef68

+    public int hashCode() {
+      return keyString == null ? 0 : keyString.hashCode();
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (obj instanceof LogKey) {
+        LogKey other = (LogKey) obj;
+        if (this.keyString == null) {
+          return other.keyString == null;
+        }
+        return this.keyString.equals(other.keyString);
+      }
+      return false;
+    }
+
+    @Override
-    
+    /**
+     * Get a ContainerLogsReader to read the logs for
+     * the specified container.
+     *
+     * @param containerId
+     * @return object to read the container's logs or null if the
+     *         logs could not be found
+     * @throws IOException
+     */
+    public ContainerLogsReader getContainerLogsReader(
+        ContainerId containerId) throws IOException {
+      ContainerLogsReader logReader = null;
+
+      final LogKey containerKey = new LogKey(containerId);
+      LogKey key = new LogKey();
+      DataInputStream valueStream = next(key);
+      while (valueStream != null && !key.equals(containerKey)) {
+        valueStream = next(key);
+      }
+
+      if (valueStream != null) {
+        logReader = new ContainerLogsReader(valueStream);
+      }
+
+      return logReader;
+    }
+
+
+  public static class ContainerLogsReader {
+    private DataInputStream valueStream;
+    private String currentLogType = null;
+    private long currentLogLength = 0;
+    private BoundedInputStream currentLogData = null;
+    private InputStreamReader currentLogISR;
+
+    public ContainerLogsReader(DataInputStream stream) {
+      valueStream = stream;
+    }
+
+    public String nextLog() throws IOException {
+      if (currentLogData != null && currentLogLength > 0) {
+        // seek to the end of the current log, relying on BoundedInputStream
+        // to prevent seeking past the end of the current log
+        do {
+          if (currentLogData.skip(currentLogLength) < 0) {
+            break;
+          }
+        } while (currentLogData.read() != -1);
+      }
+
+      currentLogType = null;
+      currentLogLength = 0;
+      currentLogData = null;
+      currentLogISR = null;
+
+      try {
+        String logType = valueStream.readUTF();
+        String logLengthStr = valueStream.readUTF();
+        currentLogLength = Long.parseLong(logLengthStr);
+        currentLogData =
+            new BoundedInputStream(valueStream, currentLogLength);
+        currentLogData.setPropagateClose(false);
+        currentLogISR = new InputStreamReader(currentLogData);
+        currentLogType = logType;
+      } catch (EOFException e) {
+      }
+
+      return currentLogType;
+    }
+
+    public String getCurrentLogType() {
+      return currentLogType;
+    }
+
+    public long getCurrentLogLength() {
+      return currentLogLength;
+    }
+
+    public long skip(long n) throws IOException {
+      return currentLogData.skip(n);
+    }
+
+    public int read(byte[] buf, int off, int len) throws IOException {
+      return currentLogData.read(buf, off, len);
+    }
+
+    public int read(char[] buf, int off, int len) throws IOException {
+      return currentLogISR.read(buf, off, len);
+    }
+  }

INS55 INS31 INS31 INS31 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS43 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS41 INS42 INS43 INS42 INS25 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS61 INS25 INS41 INS42 INS42 INS42 INS42 INS33 INS42 INS34 INS42 INS42 INS33 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS25 INS21 INS21 INS21 INS21 INS54 INS41 INS42 INS41 INS41 INS39 INS42 INS42 INS41 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS41 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS41 INS16 INS42 INS62 INS8 INS9 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS7 INS27 INS8 INS7 INS7 INS7 INS7 INS8 INS12 INS42 INS42 INS42 INS32 INS39 INS85 INS32 INS39 INS85 INS32 INS27 INS34 INS32 INS42 INS43 INS60 INS25 INS41 INS42 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS33 INS21 INS42 INS42 INS27 INS27 INS19 INS42 INS33 INS42 INS34 INS42 INS33 INS42 INS33 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS33 INS32 INS7 INS7 INS42 INS33 INS42 INS34 INS8 INS27 INS43 INS59 INS43 INS59 INS7 INS7 INS32 INS7 INS7 INS43 INS42 INS42 INS42 INS11 INS22 INS33 INS41 INS22 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS25 INS32 INS38 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS9 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS52 INS42 INS27 INS52 INS42 INS42 INS42 INS43 INS42 INS27 INS8 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS40 INS33 INS42 INS32 INS34 INS10 INS42 INS42 INS42 INS42 INS42