HADOOP-13164 Optimize S3AFileSystem::deleteUnnecessaryFakeDirectories. Contributed by Rajesh Balamohan.

-            removeKeys(keysToDelete, true);
+            removeKeys(keysToDelete, true, false);
-            removeKeys(keysToDelete, false);
+            removeKeys(keysToDelete, false, false);
+   * @param deleteFakeDir indicates whether this is for deleting fake dirs
-          boolean clearKeys) throws AmazonClientException {
+      boolean clearKeys, boolean deleteFakeDir) throws AmazonClientException {
+    if (keysToDelete.isEmpty()) {
+      // no keys
+      return;
+    }
-      instrumentation.fileDeleted(keysToDelete.size());
+    }
+    if (!deleteFakeDir) {
+    } else {
+      instrumentation.fakeDirsDeleted(keysToDelete.size());
-              removeKeys(keys, true);
+              removeKeys(keys, true, false);
-              removeKeys(keys, false);
+              removeKeys(keys, false, false);
-   * @param f path
+   * @param path path
-  private void deleteUnnecessaryFakeDirectories(Path f) {
-    while (true) {
-      String key = "";
-      try {
-        key = pathToKey(f);
-        if (key.isEmpty()) {
-          break;
+  private void deleteUnnecessaryFakeDirectories(Path path) {
+    List<DeleteObjectsRequest.KeyVersion> keysToRemove = new ArrayList<>();
+    while (!path.isRoot()) {
+      String key = pathToKey(path);
+      key = (key.endsWith("/")) ? key : (key + "/");
+      keysToRemove.add(new DeleteObjectsRequest.KeyVersion(key));
+      path = path.getParent();
+    }
+    try {
+      removeKeys(keysToRemove, false, true);
+    } catch(AmazonClientException e) {
+      instrumentation.errorIgnored();
+      if (LOG.isDebugEnabled()) {
+        StringBuilder sb = new StringBuilder();
+        for(DeleteObjectsRequest.KeyVersion kv : keysToRemove) {
+          sb.append(kv.getKey()).append(",");
-
-        S3AFileStatus status = getFileStatus(f);
-
-        if (status.isDirectory() && status.isEmptyDirectory()) {
-          LOG.debug("Deleting fake directory {}/", key);
-          deleteObject(key + "/");
-        }
-      } catch (IOException | AmazonClientException e) {
-        LOG.debug("While deleting key {} ", key, e);
-        instrumentation.errorIgnored();
+        LOG.debug("While deleting keys {} ", sb.toString(), e);
-
-      if (f.isRoot()) {
-        break;
-      }
-
-      f = f.getParent();
-

INS44 INS8 INS65 INS39 INS42 INS25 INS25 UPD42 INS60 INS61 INS54 INS42 INS66 INS32 INS8 INS38 INS8 INS8 UPD42 INS74 INS59 INS38 INS8 INS8 INS12 INS42 INS42 INS41 INS42 MOV21 INS21 INS43 INS43 INS42 INS14 INS32 MOV60 MOV21 INS21 INS21 INS21 INS44 INS8 INS32 INS42 INS40 INS74 INS42 INS42 INS32 INS7 INS32 MOV43 INS42 MOV21 INS25 INS42 INS42 INS32 INS43 INS32 INS16 UPD42 MOV42 INS42 INS14 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS9 INS9 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS36 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS60 INS70 INS21 INS32 MOV27 INS40 INS43 INS59 INS44 INS42 INS8 INS32 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS14 INS43 UPD42 MOV42 MOV21 UPD42 MOV42 UPD42 MOV42 INS45 INS32 UPD42 MOV42 INS43 INS40 INS42 UPD42 MOV42 INS42 INS32 UPD42 INS45 INS9 INS9 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS9 INS9 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL45 DEL32 DEL45 DEL9 DEL42 DEL32 DEL10 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL42 DEL32 DEL27 DEL45 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL84 DEL44 DEL8 DEL12 DEL54 DEL32 DEL10 DEL8 DEL25 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8