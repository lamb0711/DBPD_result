YARN-4420. Add REST API for List Reservations (Sean Po via curino)

+import javax.ws.rs.DefaultValue;
+import org.apache.hadoop.yarn.api.protocolrecords.ReservationListRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.ReservationListResponse;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationListInfo;
+  /**
+   * Function to retrieve a list of all the reservations.
+   */
+  @GET
+  @Path("/reservation/list")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response listReservation(
+          @QueryParam("queue") @DefaultValue("default") String queue,
+          @QueryParam("reservation-id") @DefaultValue("") String reservationId,
+          @QueryParam("start-time") @DefaultValue("0") long startTime,
+          @QueryParam("end-time") @DefaultValue("-1") long endTime,
+          @QueryParam("include-resource-allocations") @DefaultValue("false")
+          boolean includeResourceAllocations, @Context HttpServletRequest hsr)
+          throws Exception {
+    init();
+
+    final ReservationListRequest request = ReservationListRequest.newInstance(
+          queue, reservationId, startTime, endTime, includeResourceAllocations);
+
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    if (callerUGI == null) {
+      throw new AuthorizationException("Unable to obtain user name, "
+              + "user not authenticated");
+    }
+    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
+      String msg = "The default static user cannot carry out this operation.";
+      return Response.status(Status.FORBIDDEN).entity(msg).build();
+    }
+
+    ReservationListResponse resRespInfo;
+    try {
+      resRespInfo = callerUGI.doAs(
+          new PrivilegedExceptionAction<ReservationListResponse>() {
+            @Override
+            public ReservationListResponse run() throws IOException,
+                    YarnException {
+              return rm.getClientRMService().listReservations(request);
+            }
+          });
+    } catch (UndeclaredThrowableException ue) {
+      if (ue.getCause() instanceof YarnException) {
+        throw new BadRequestException(ue.getCause().getMessage());
+      }
+      LOG.info("List reservation request failed", ue);
+      throw ue;
+    }
+
+    ReservationListInfo resResponse = new ReservationListInfo(resRespInfo,
+            includeResourceAllocations);
+    return Response.status(Status.OK).entity(resResponse).build();
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS29 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS79 INS79 INS43 INS42 INS79 INS79 INS43 INS42 INS79 INS79 INS39 INS42 INS79 INS79 INS39 INS42 INS79 INS79 INS39 INS42 INS78 INS43 INS42 INS42 INS21 INS60 INS60 INS25 INS25 INS60 INS54 INS60 INS41 INS66 INS40 INS40 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS83 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS32 INS60 INS41 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS7 INS43 INS42 INS25 INS21 INS53 INS43 INS42 INS42 INS32 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS62 INS8 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS14 INS32 INS43 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS74 INS1 INS42 INS42 INS42 INS14 INS43 INS43 INS31 INS43 INS32 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42