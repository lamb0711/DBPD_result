MAPREDUCE-2349. Modified FileInputFormat to be able to issue file and block location calls in parallel. Contributed by Siddharth Seth.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579515 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.mapred.LocatedFileStatusFetcher;
+import com.google.common.base.Stopwatch;
+import com.google.common.collect.Lists;
+
+  public static final String LIST_STATUS_NUM_THREADS =
+      "mapreduce.input.fileinputformat.list-status.num-threads";
+  public static final int DEFAULT_LIST_STATUS_NUM_THREADS = 1;
-    List<FileStatus> result = new ArrayList<FileStatus>();
-    
-    List<IOException> errors = new ArrayList<IOException>();
-    
+
+    List<FileStatus> result = null;
+
+    int numThreads = job.getConfiguration().getInt(LIST_STATUS_NUM_THREADS,
+        DEFAULT_LIST_STATUS_NUM_THREADS);
+    Stopwatch sw = new Stopwatch().start();
+    if (numThreads == 1) {
+      result = singleThreadedListStatus(job, dirs, inputFilter, recursive);
+    } else {
+      Iterable<FileStatus> locatedFiles = null;
+      try {
+        LocatedFileStatusFetcher locatedFileStatusFetcher = new LocatedFileStatusFetcher(
+            job.getConfiguration(), dirs, recursive, inputFilter, true);
+        locatedFiles = locatedFileStatusFetcher.getFileStatuses();
+      } catch (InterruptedException e) {
+        throw new IOException("Interrupted while getting file statuses");
+      }
+      result = Lists.newArrayList(locatedFiles);
+    }
+    
+    sw.stop();
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Time taken to get FileStatuses: " + sw.elapsedMillis());
+    }
+    LOG.info("Total input paths to process : " + result.size()); 
+    return result;
+  }
+
+  private List<FileStatus> singleThreadedListStatus(JobContext job, Path[] dirs,
+      PathFilter inputFilter, boolean recursive) throws IOException {
+    List<FileStatus> result = new ArrayList<FileStatus>();
+    List<IOException> errors = new ArrayList<IOException>();
-    LOG.info("Total input paths to process : " + result.size()); 
+    Stopwatch sw = new Stopwatch().start();
-    LOG.debug("Total # of splits: " + splits.size());
+    sw.stop();
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Total # of splits generated by getSplits: " + splits.size()
+          + ", TimeTaken: " + sw.elapsedMillis());
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 MOV29 INS83 INS74 INS42 INS44 INS43 INS8 UPD83 UPD42 INS44 INS44 INS44 INS42 INS42 INS45 INS42 INS34 INS43 INS43 INS43 INS42 INS42 MOV60 MOV25 MOV21 MOV60 MOV60 MOV21 MOV60 MOV25 MOV60 INS60 INS60 INS60 INS25 INS21 INS25 MOV21 INS41 INS5 INS42 INS43 INS42 INS39 INS42 INS60 INS21 INS25 INS42 INS42 INS42 INS74 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS8 INS42 INS43 INS85 INS42 INS43 INS59 INS32 INS32 INS8 INS43 INS43 INS42 INS33 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS21 INS60 INS54 INS21 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS7 INS74 INS59 INS8 INS12 INS7 INS32 INS14 INS42 INS42 INS42 INS43 INS42 INS32 INS43 INS43 INS42 INS33 INS60 INS21 INS44 INS8 INS42 INS32 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS45 INS32 INS42 UPD45 INS45 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42