HDFS-5009. Include storage information in the LocatedBlock.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1519691 13f79535-47bb-0310-9956-ffa450edef68

-    for (Iterator<DatanodeDescriptor> jt = blocksMap.nodeIterator(block);
-         jt.hasNext();) {
-      DatanodeDescriptor node = jt.next();
+    for (DatanodeStorageInfo storage : blocksMap.getStorages(block)) {
+      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
-    DatanodeDescriptor[] targets = getNodes(oldBlock);
+    DatanodeStorageInfo[] targets = getStorages(oldBlock);
-    BlockInfoUnderConstruction ucBlock =
-      bc.setLastBlock(oldBlock, targets);
+    BlockInfoUnderConstruction ucBlock = bc.setLastBlock(oldBlock, targets);
-    for (DatanodeDescriptor dd : targets) {
-      String datanodeId = dd.getStorageID();
-      invalidateBlocks.remove(datanodeId, oldBlock);
+    for (DatanodeStorageInfo storage : targets) {
+      invalidateBlocks.remove(storage.getStorageID(), oldBlock);
-    for(Iterator<DatanodeDescriptor> it =
-      blocksMap.nodeIterator(block); it.hasNext();) {
-      String storageID = it.next().getStorageID();
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(block)) {
+      final String storageID = storage.getStorageID();
-      final DatanodeDescriptor[] locations = uc.getExpectedLocations();
+      final DatanodeStorageInfo[] storages = uc.getExpectedStorageLocations();
-      return new LocatedBlock(eb, locations, pos, false);
+      return LocatedBlock.createLocatedBlock(eb, storages, pos, false);
-      for(Iterator<DatanodeDescriptor> it = blocksMap.nodeIterator(blk);
-          it.hasNext();) {
-        final DatanodeDescriptor d = it.next();
+      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {
+        final DatanodeDescriptor d = storage.getDatanodeDescriptor();
-    for (Iterator<DatanodeDescriptor> it = blocksMap.nodeIterator(b); it
-        .hasNext();) {
-      DatanodeDescriptor node = it.next();
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(b)) {
+      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
-    Iterator<DatanodeDescriptor> it = blocksMap.nodeIterator(block);
+    
-    while(it.hasNext()) {
-      DatanodeDescriptor node = it.next();
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(block)) {
+      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
-            node, iblk, reportedState);
+            node.getStorageInfo(storageID), iblk, reportedState);
-    block.addReplicaIfNotPresent(node, block, reportedState);
+    block.addReplicaIfNotPresent(node.getStorageInfo(storageID), block, reportedState);
-    for (Iterator<DatanodeDescriptor> it = blocksMap.nodeIterator(block);
-         it.hasNext();) {
-      DatanodeDescriptor cur = it.next();
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(block)) {
+      final DatanodeDescriptor cur = storage.getDatanodeDescriptor();
-    Iterator<DatanodeDescriptor> nodeIter = blocksMap.nodeIterator(b);
-    while (nodeIter.hasNext()) {
-      DatanodeDescriptor node = nodeIter.next();
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(b)) {
+      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
-    Iterator<DatanodeDescriptor> nodeIter = blocksMap.nodeIterator(b);
-    while (nodeIter.hasNext()) {
-      DatanodeDescriptor node = nodeIter.next();
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(b)) {
+      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
-    Iterator<DatanodeDescriptor> nodeIter = blocksMap.nodeIterator(block);
-    while (nodeIter.hasNext()) {
-      DatanodeDescriptor node = nodeIter.next();
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(block)) {
+      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
-  public DatanodeDescriptor[] getNodes(BlockInfo block) {
-    DatanodeDescriptor[] nodes =
-      new DatanodeDescriptor[block.numNodes()];
-    Iterator<DatanodeDescriptor> it = blocksMap.nodeIterator(block);
-    for (int i = 0; it != null && it.hasNext(); i++) {
-      nodes[i] = it.next();
+  public DatanodeStorageInfo[] getStorages(BlockInfo block) {
+    final DatanodeStorageInfo[] storages = new DatanodeStorageInfo[block.numNodes()];
+    int i = 0;
+    for(DatanodeStorageInfo s : blocksMap.getStorages(block)) {
+      storages[i++] = s;
-    return nodes;
+    return storages;
-    for (Iterator<DatanodeDescriptor> it = blocksMap.nodeIterator(b); 
-         it.hasNext();) {
-      DatanodeDescriptor cur = it.next();
+    for(DatanodeStorageInfo storage : blocksMap.getStorages(b)) {
+      final DatanodeDescriptor cur = storage.getDatanodeDescriptor();
-  public Iterator<DatanodeDescriptor> datanodeIterator(final Block block) {
-    return blocksMap.nodeIterator(block);
+  public Iterable<DatanodeStorageInfo> getStorages(final Block block) {
+    return blocksMap.getStorages(block);

UPD5 UPD42 UPD74 UPD42 INS70 INS70 INS70 INS70 INS70 INS70 INS70 INS70 UPD43 INS60 INS70 INS70 UPD43 UPD43 INS44 INS32 MOV8 UPD5 INS44 INS32 MOV8 INS44 INS32 MOV8 INS44 INS32 MOV8 INS44 INS32 MOV8 INS44 INS32 MOV8 INS44 INS32 MOV8 INS44 INS32 MOV8 UPD42 INS83 UPD5 INS39 MOV59 INS44 INS32 INS8 UPD42 INS44 INS32 MOV8 UPD42 UPD42 INS43 INS42 MOV42 UPD42 MOV42 MOV42 UPD43 UPD43 UPD42 INS43 INS42 MOV42 UPD42 MOV42 MOV42 INS70 INS43 INS42 MOV42 UPD42 MOV42 MOV42 INS43 INS42 MOV42 UPD42 MOV42 MOV42 INS32 INS43 INS42 MOV42 UPD42 MOV42 MOV42 INS43 INS42 MOV42 UPD42 MOV42 MOV42 INS43 INS42 MOV42 UPD42 MOV42 MOV42 INS43 INS42 MOV42 UPD42 MOV42 MOV42 UPD43 UPD42 INS43 INS42 MOV42 UPD42 MOV42 MOV42 MOV21 INS43 INS42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 MOV42 INS83 MOV43 UPD42 UPD42 UPD42 UPD42 MOV42 INS83 UPD5 INS32 INS44 INS32 MOV8 UPD42 MOV42 INS83 MOV43 UPD42 MOV42 INS83 MOV43 MOV42 INS42 INS42 UPD42 MOV42 INS83 MOV43 UPD42 MOV42 INS83 MOV43 UPD42 MOV42 INS83 MOV43 UPD42 MOV42 INS83 MOV43 UPD42 UPD5 UPD42 MOV42 UPD42 MOV42 INS83 MOV43 INS32 UPD43 UPD42 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS42 MOV42 UPD42 MOV42 MOV42 UPD43 INS42 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV37 UPD42 UPD42 INS32 UPD42 UPD42 MOV42 INS42 INS42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL9 DEL14 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL61 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL61 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL61 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL39 DEL58 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL8 DEL24 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24