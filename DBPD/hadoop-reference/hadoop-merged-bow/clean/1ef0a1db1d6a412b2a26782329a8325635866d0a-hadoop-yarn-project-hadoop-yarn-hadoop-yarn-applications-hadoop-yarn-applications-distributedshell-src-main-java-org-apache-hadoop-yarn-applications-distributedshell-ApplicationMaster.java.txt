YARN-7894. Improve ATS response for DShell DS_CONTAINER when container launch fails. Contributed by Chandni Singh

+import org.apache.hadoop.yarn.util.BoundedAppender;
+  static final String DIAGNOSTICS = "Diagnostics";
+  private BoundedAppender diagnostics = new BoundedAppender(64 * 1024);
+
-      LOG.info("Application Master failed. exiting");
+      LOG.error("Application Master failed. exiting");
-    String appMessage = null;
+    String message = null;
-      appMessage = "Diagnostics." + ", total=" + numTotalContainers
-          + ", completed=" + numCompletedContainers.get() + ", allocated="
-          + numAllocatedContainers.get() + ", failed="
-          + numFailedContainers.get();
-      LOG.info(appMessage);
+      message = String.format("Application Failure: desired = %d, " +
+              "completed = %d, allocated = %d, failed = %d, " +
+              "diagnostics = %s", numRequestedContainers.get(),
+          numCompletedContainers.get(), numAllocatedContainers.get(),
+          numFailedContainers.get(), diagnostics);
-      amRMClient.unregisterApplicationMaster(appStatus, appMessage, null);
-    } catch (YarnException ex) {
+      amRMClient.unregisterApplicationMaster(appStatus, message, null);
+    } catch (YarnException | IOException ex) {
-    } catch (IOException e) {
-      LOG.error("Failed to unregister application", e);
-    
-        LOG.info(appAttemptID + " got container status for containerID="
+        String message = appAttemptID + " got container status for containerID="
-            + containerStatus.getDiagnostics());
+            + containerStatus.getDiagnostics();
+        if (containerStatus.getExitStatus() != 0) {
+          LOG.error(message);
+          diagnostics.append(containerStatus.getDiagnostics());
+        } else {
+          LOG.info(message);
+        }
-      LOG.error("Failed to start Container " + containerId, t);
+      LOG.error("Failed to start Container {}", containerId, t);
+      if (timelineServiceV2Enabled) {
+        publishContainerStartFailedEventOnTimelineServiceV2(containerId,
+            t.getMessage());
+      }
+      if (timelineServiceV1Enabled) {
+        publishContainerStartFailedEvent(containerId, t.getMessage());
+      }
+    event.addEventInfo(DIAGNOSTICS, container.getDiagnostics());
+  private void publishContainerStartFailedEventOnTimelineServiceV2(
+      final ContainerId containerId, String diagnostics) {
+    final org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity
+        entity = new org.apache.hadoop.yarn.api.records.timelineservice.
+        TimelineEntity();
+    entity.setId(containerId.toString());
+    entity.setType(DSEntity.DS_CONTAINER.toString());
+    entity.addInfo("user", appSubmitterUgi.getShortUserName());
+    org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent event =
+        new org.apache.hadoop.yarn.api.records.timelineservice
+            .TimelineEvent();
+    event.setTimestamp(System.currentTimeMillis());
+    event.setId(DSEvent.DS_CONTAINER_END.toString());
+    event.addInfo(DIAGNOSTICS, diagnostics);
+    entity.addEvent(event);
+    try {
+      appSubmitterUgi.doAs((PrivilegedExceptionAction<Object>) () -> {
+        timelineV2Client.putEntitiesAsync(entity);
+        return null;
+      });
+    } catch (Exception e) {
+      LOG.error("Container start failed event could not be published for {}",
+          containerId,
+          e instanceof UndeclaredThrowableException ? e.getCause() : e);
+    }
+  }
+
+  private void publishContainerStartFailedEvent(final ContainerId containerId,
+      String diagnostics) {
+    final TimelineEntity entityV1 = new TimelineEntity();
+    entityV1.setEntityId(containerId.toString());
+    entityV1.setEntityType(DSEntity.DS_CONTAINER.toString());
+    entityV1.setDomainId(domainId);
+    entityV1.addPrimaryFilter(USER_TIMELINE_FILTER_NAME, appSubmitterUgi
+        .getShortUserName());
+    entityV1.addPrimaryFilter(APPID_TIMELINE_FILTER_NAME,
+        containerId.getApplicationAttemptId().getApplicationId().toString());
+
+    TimelineEvent eventV1 = new TimelineEvent();
+    eventV1.setTimestamp(System.currentTimeMillis());
+    eventV1.setEventType(DSEvent.DS_CONTAINER_END.toString());
+    eventV1.addEventInfo(DIAGNOSTICS, diagnostics);
+    entityV1.addEvent(eventV1);
+    try {
+      processTimelineResponseErrors(putContainerEntity(timelineClient,
+          containerId.getApplicationAttemptId(), entityV1));
+    } catch (YarnException | IOException | ClientHandlerException e) {
+      LOG.error("Container end event could not be published for {}",
+          containerId, e);
+    }
+  }
+
+    event.addInfo(DIAGNOSTICS, container.getDiagnostics());

INS26 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS43 INS59 MOV60 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS14 INS21 INS83 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS54 INS83 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS54 INS21 INS43 INS27 INS25 INS25 INS32 INS42 INS42 INS83 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS8 INS12 INS42 INS42 INS83 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS8 INS12 INS32 INS42 INS34 INS34 UPD42 INS42 INS8 INS42 INS8 INS42 INS42 INS42 INS32 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS84 INS60 INS25 INS45 INS42 INS21 INS21 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS32 INS43 INS42 INS21 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS40 INS42 INS32 INS84 INS42 INS21 INS42 INS42 UPD42 UPD42 INS32 UPD42 MOV43 INS43 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS40 INS40 INS42 INS42 INS11 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS43 MOV43 INS43 INS32 INS42 INS42 INS27 INS32 MOV32 MOV32 MOV32 INS42 INS42 INS42 INS42 MOV27 INS32 INS34 INS21 INS21 MOV21 INS42 INS42 INS32 INS42 INS42 INS32 INS74 INS86 INS42 INS42 INS45 INS42 INS16 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 UPD45 MOV45 INS45 UPD45 MOV45 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS8 INS62 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 DEL27 DEL42 DEL45 DEL45 DEL45 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL45 DEL42 DEL27