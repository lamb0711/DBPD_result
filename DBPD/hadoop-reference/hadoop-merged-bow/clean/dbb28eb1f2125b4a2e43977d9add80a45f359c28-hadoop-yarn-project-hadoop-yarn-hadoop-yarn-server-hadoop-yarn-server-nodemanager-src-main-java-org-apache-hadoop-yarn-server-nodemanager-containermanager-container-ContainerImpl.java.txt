Merge branch 'trunk' into HADOOP-12756

+import java.util.Set;
+  private final static class ReInitializationContext {
+    private final ResourceSet resourceSet;
+    private final ContainerLaunchContext newLaunchContext;
+
+    private ReInitializationContext(ContainerLaunchContext newLaunchContext,
+        ResourceSet resourceSet) {
+      this.newLaunchContext = newLaunchContext;
+      this.resourceSet = resourceSet;
+    }
+  }
+
-  private final ContainerLaunchContext launchContext;
+  private volatile ContainerLaunchContext launchContext;
-  private final ContainerRetryContext containerRetryContext;
+  private ContainerRetryContext containerRetryContext;
+  private ReInitializationContext reInitContext;
+  private volatile boolean isReInitializing = false;
-    if (launchContext != null
-        && launchContext.getContainerRetryContext() != null) {
-      this.containerRetryContext = launchContext.getContainerRetryContext();
-    } else {
-      this.containerRetryContext = ContainerRetryContext.NEVER_RETRY_CONTEXT;
-    }
-    this.remainingRetryAttempts = containerRetryContext.getMaxRetries();
-    int minimumRestartInterval = conf.getInt(
-        YarnConfiguration.NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS,
-        YarnConfiguration.DEFAULT_NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS);
-    if (containerRetryContext.getRetryPolicy()
-        != ContainerRetryPolicy.NEVER_RETRY
-        && containerRetryContext.getRetryInterval() < minimumRestartInterval) {
-      LOG.info("Set restart interval to minimum value " + minimumRestartInterval
-          + "ms for container " + containerTokenIdentifier.getContainerID());
-      this.containerRetryContext.setRetryInterval(minimumRestartInterval);
-    }
+
+    // Configure the Retry Context
+    this.containerRetryContext =
+        configureRetryContext(conf, launchContext, this.containerId);
+    this.remainingRetryAttempts = this.containerRetryContext.getMaxRetries();
+  private static ContainerRetryContext configureRetryContext(
+      Configuration conf, ContainerLaunchContext launchContext,
+      ContainerId containerId) {
+    ContainerRetryContext context;
+    if (launchContext != null
+        && launchContext.getContainerRetryContext() != null) {
+      context = launchContext.getContainerRetryContext();
+    } else {
+      context = ContainerRetryContext.NEVER_RETRY_CONTEXT;
+    }
+    int minimumRestartInterval = conf.getInt(
+        YarnConfiguration.NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS,
+        YarnConfiguration.DEFAULT_NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS);
+    if (context.getRetryPolicy() != ContainerRetryPolicy.NEVER_RETRY
+        && context.getRetryInterval() < minimumRestartInterval) {
+      LOG.info("Set restart interval to minimum value " + minimumRestartInterval
+          + "ms for container " + containerId);
+      context.setRetryInterval(minimumRestartInterval);
+    }
+    return context;
+  }
+
+    .addTransition(ContainerState.RUNNING, ContainerState.REINITIALIZING,
+        ContainerEventType.REINITIALIZE_CONTAINER,
+        new ReInitializeContainerTransition())
-    .addTransition(ContainerState.RUNNING, ContainerState.EXITED_WITH_FAILURE,
+    .addTransition(ContainerState.RUNNING,
+        ContainerState.EXITED_WITH_FAILURE,
+    // From REINITIALIZING State
+    .addTransition(ContainerState.REINITIALIZING,
+        ContainerState.EXITED_WITH_SUCCESS,
+        ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS,
+        new ExitedWithSuccessTransition(true))
+    .addTransition(ContainerState.REINITIALIZING,
+        ContainerState.EXITED_WITH_FAILURE,
+        ContainerEventType.CONTAINER_EXITED_WITH_FAILURE,
+        new ExitedWithFailureTransition(true))
+    .addTransition(ContainerState.REINITIALIZING,
+        ContainerState.REINITIALIZING,
+        ContainerEventType.RESOURCE_LOCALIZED,
+        new ResourceLocalizedWhileReInitTransition())
+    .addTransition(ContainerState.REINITIALIZING, ContainerState.RUNNING,
+        ContainerEventType.RESOURCE_FAILED,
+        new ResourceLocalizationFailedWhileReInitTransition())
+    .addTransition(ContainerState.REINITIALIZING,
+        ContainerState.REINITIALIZING,
+        ContainerEventType.UPDATE_DIAGNOSTICS_MSG,
+        UPDATE_DIAGNOSTICS_TRANSITION)
+    .addTransition(ContainerState.REINITIALIZING, ContainerState.KILLING,
+        ContainerEventType.KILL_CONTAINER, new KillTransition())
+    .addTransition(ContainerState.REINITIALIZING,
+        ContainerState.LOCALIZED,
+        ContainerEventType.CONTAINER_KILLED_ON_REQUEST,
+        new KilledForReInitializationTransition())
+
-  public Map<Path,List<String>> getLocalizedResources() {
+  public Map<Path, List<String>> getLocalizedResources() {
-      List<String> syms =
+      Set<String> syms =
-   * Resource is localized while the container is running - create symlinks
+   * Transition to start the Re-Initialization process.
-  static class ResourceLocalizedWhileRunningTransition
+  static class ReInitializeContainerTransition extends ContainerTransition {
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void transition(ContainerImpl container, ContainerEvent event) {
+      container.reInitContext = createReInitContext(event);
+      try {
+        Map<LocalResourceVisibility, Collection<LocalResourceRequest>>
+            pendingResources =
+            container.reInitContext.resourceSet.getAllResourcesByVisibility();
+        if (!pendingResources.isEmpty()) {
+          container.dispatcher.getEventHandler().handle(
+              new ContainerLocalizationRequestEvent(
+                  container, pendingResources));
+        } else {
+          // We are not waiting on any resources, so...
+          // Kill the current container.
+          container.dispatcher.getEventHandler().handle(
+              new ContainersLauncherEvent(container,
+                  ContainersLauncherEventType.CLEANUP_CONTAINER_FOR_REINIT));
+        }
+      } catch (Exception e) {
+        LOG.error("Container [" + container.getContainerId() + "]" +
+            " re-initialization failure..", e);
+        container.addDiagnostics("Error re-initializing due to" +
+            "[" + e.getMessage() + "]");
+      }
+    }
+
+    protected ReInitializationContext createReInitContext(
+        ContainerEvent event) {
+      ContainerReInitEvent rEvent = (ContainerReInitEvent)event;
+      return new ReInitializationContext(rEvent.getReInitLaunchContext(),
+          rEvent.getResourceSet());
+    }
+  }
+
+  /**
+   * Resource requested for Container Re-initialization has been localized.
+   * If all dependencies are met, then restart Container with new bits.
+   */
+  static class ResourceLocalizedWhileReInitTransition
+    @SuppressWarnings("unchecked")
-      List<String> links = container.resourceSet
-          .resourceLocalized(rsrcEvent.getResource(), rsrcEvent.getLocation());
+      container.reInitContext.resourceSet.resourceLocalized(
+          rsrcEvent.getResource(), rsrcEvent.getLocation());
+      // Check if all ResourceLocalization has completed
+      if (container.reInitContext.resourceSet.getPendingResources()
+          .isEmpty()) {
+        // Kill the current container.
+        container.dispatcher.getEventHandler().handle(
+            new ContainersLauncherEvent(container,
+                ContainersLauncherEventType.CLEANUP_CONTAINER_FOR_REINIT));
+      }
+    }
+  }
+
+  /**
+   * Resource is localized while the container is running - create symlinks.
+   */
+  static class ResourceLocalizedWhileRunningTransition
+      extends ContainerTransition {
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void transition(ContainerImpl container, ContainerEvent event) {
+      ContainerResourceLocalizedEvent rsrcEvent =
+          (ContainerResourceLocalizedEvent) event;
+      Set<String> links = container.resourceSet.resourceLocalized(
+          rsrcEvent.getResource(), rsrcEvent.getLocation());
+      if (links == null) {
+        return;
+      }
+   * Resource localization failed while the container is reinitializing.
+   */
+  static class ResourceLocalizationFailedWhileReInitTransition
+      extends ContainerTransition {
+
+    @Override
+    public void transition(ContainerImpl container, ContainerEvent event) {
+      ContainerResourceFailedEvent failedEvent =
+          (ContainerResourceFailedEvent) event;
+      container.resourceSet.resourceLocalizationFailed(
+          failedEvent.getResource());
+      container.addDiagnostics("Container aborting re-initialization.. "
+          + failedEvent.getDiagnosticMessage());
+      LOG.error("Container [" + container.getContainerId() + "] Re-init" +
+          " failed !! Resource [" + failedEvent.getResource() + "] could" +
+          " not be localized !!");
+      container.reInitContext = null;
+    }
+  }
+
+  /**
-   * a CONTAINER_LAUNCHED event
+   * a CONTAINER_LAUNCHED event.
+      if (container.reInitContext != null) {
+        container.reInitContext = null;
+        // Set rollback context here..
+        container.setIsReInitializing(false);
+      }
+
-   * Transition from RUNNING or KILLING state to EXITED_WITH_SUCCESS state
-   * upon EXITED_WITH_SUCCESS message.
+   * Transition from RUNNING or KILLING state to
+   * EXITED_WITH_SUCCESS state upon EXITED_WITH_SUCCESS message.
+
+      container.setIsReInitializing(false);
+      container.setIsReInitializing(false);
-   * Transition to EXITED_WITH_FAILURE or LOCALIZED state upon
+   * Transition to EXITED_WITH_FAILURE or RELAUNCHING state upon
-                + container.getContainerId(), e);
+                    + container.getContainerId(), e);
-   * Transition to EXITED_WITH_FAILURE upon receiving KILLED_ON_REQUEST
+   * Transition to EXITED_WITH_FAILURE
-    public void transition(ContainerImpl container, ContainerEvent event) {
+    public void transition(ContainerImpl container,
+        ContainerEvent event) {
+   * Transition to LOCALIZED and wait for RE-LAUNCH
+   */
+  static class KilledForReInitializationTransition extends ContainerTransition {
+
+    @Override
+    public void transition(ContainerImpl container,
+        ContainerEvent event) {
+      LOG.info("Relaunching Container [" + container.getContainerId()
+          + "] for upgrade !!");
+      container.wasLaunched  = false;
+      container.metrics.endRunningContainer();
+
+      container.launchContext = container.reInitContext.newLaunchContext;
+
+      // Re configure the Retry Context
+      container.containerRetryContext =
+          configureRetryContext(container.context.getConf(),
+          container.launchContext, container.containerId);
+      // Reset the retry attempts since its a fresh start
+      container.remainingRetryAttempts =
+          container.containerRetryContext.getMaxRetries();
+
+      container.resourceSet = ResourceSet.merge(
+          container.resourceSet, container.reInitContext.resourceSet);
+
+      container.sendLaunchEvent();
+    }
+  }
+
+  /**
-   * Transitions upon receiving KILL_CONTAINER:
-   * - LOCALIZED -> KILLING
-   * - RUNNING -> KILLING
+   * Transitions upon receiving KILL_CONTAINER.
+   * - LOCALIZED -> KILLING.
+   * - RUNNING -> KILLING.
+   * - REINITIALIZING -> KILLING.
+
+    @SuppressWarnings("unchecked")
+      container.setIsReInitializing(false);
+
+  @Override
+  public boolean isRunning() {
+    return getContainerState() == ContainerState.RUNNING;
+  }
+
+  @Override
+  public void setIsReInitializing(boolean isReInitializing) {
+    this.isReInitializing = isReInitializing;
+  }
+
+  @Override
+  public boolean isReInitializing() {
+    return this.isReInitializing;
+  }

INS26 INS40 INS83 INS42 INS55 INS23 INS23 INS31 INS55 INS55 INS55 INS55 INS31 INS31 INS31 INS83 INS83 INS83 INS42 INS23 INS23 INS31 UPD83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 MOV21 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS42 INS43 INS31 INS31 INS29 INS83 INS42 INS43 INS31 INS29 INS83 INS42 INS43 INS31 INS29 INS83 INS42 INS43 INS31 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS9 MOV21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 MOV25 MOV60 INS25 INS41 INS32 INS65 INS42 INS79 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS79 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS79 INS65 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS79 INS42 INS41 INS42 INS39 INS42 INS21 INS42 INS41 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS32 INS42 INS66 INS42 INS45 INS42 INS43 INS42 INS43 INS42 INS21 INS54 INS42 INS43 INS42 INS60 INS41 INS66 INS66 INS42 INS45 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS25 UPD66 INS42 INS45 INS25 INS66 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS21 UPD66 INS25 UPD66 UPD66 INS21 INS21 UPD66 UPD66 INS66 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 UPD66 UPD66 UPD66 INS66 INS42 INS45 INS21 INS27 INS7 INS22 INS42 INS42 INS7 INS7 MOV22 MOV22 INS32 INS42 INS42 INS21 INS27 INS27 INS21 INS21 INS32 INS42 INS40 INS40 MOV32 INS74 INS42 INS42 INS7 INS8 INS12 INS42 INS43 INS59 INS14 INS42 INS42 INS43 INS59 INS32 INS32 INS8 UPD74 MOV74 INS27 INS8 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS7 INS27 INS8 INS32 INS32 INS42 INS42 INS32 INS7 INS32 INS7 INS7 INS7 INS7 INS32 INS32 INS32 INS40 INS22 INS42 INS52 INS42 INS22 INS42 INS22 INS42 UPD42 UPD42 INS42 INS22 MOV22 INS42 INS7 INS32 INS40 INS32 INS42 INS32 INS32 INS32 INS42 INS40 INS40 INS40 INS42 INS43 MOV43 INS40 INS32 INS60 INS25 INS44 INS8 INS42 INS42 INS11 INS43 INS32 INS32 INS42 INS42 INS11 INS40 INS42 INS32 INS32 INS32 INS42 INS21 UPD43 INS42 INS33 INS41 INS42 INS42 INS11 INS40 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS40 INS33 INS40 INS33 INS21 INS21 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS27 INS40 INS9 INS40 INS42 INS40 INS40 INS40 INS32 INS40 INS32 INS40 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS74 INS59 INS38 INS8 INS8 INS43 INS42 INS21 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 UPD42 INS43 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS45 INS32 INS45 INS45 INS7 INS32 INS45 INS32 INS45 INS42 INS32 INS40 INS40 INS40 INS42 INS42 INS42 INS40 INS40 INS45 INS42 INS45 INS42 INS32 INS42 INS40 INS40 INS40 INS43 INS43 INS74 INS42 INS32 INS32 INS21 INS21 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS33 INS42 INS42 INS9 INS42 INS42 INS40 INS42 INS32 INS42 INS40 INS40 MOV32 INS42 INS42 INS43 INS43 INS40 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS40 INS42 INS43 INS42 INS40 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS32 INS42 INS14 INS32 INS42 INS14 INS45 INS32 INS45 INS45 INS27 INS32 INS45 INS42 MOV32 INS42 INS40 INS40 INS40 MOV14 INS40 INS42 INS43 INS42 INS42 INS40 INS42 INS43 INS42 INS40 INS42 INS42 INS45 INS45 INS42 INS42 UPD42 INS40 INS40 INS40 INS42 INS42 UPD40 INS40 MOV14 UPD40 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 UPD40 INS40 INS42 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 MOV14 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 UPD40 UPD40 INS42 UPD40 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 MOV14 UPD40 UPD40 INS14 UPD40 UPD40 UPD40 INS42 INS43 UPD40 UPD40 INS14 INS42 UPD40 UPD40 UPD40 MOV14 INS43 INS9 UPD40 UPD40 UPD40 INS14 INS42 UPD40 UPD40 MOV14 INS43 UPD40 UPD40 INS42 UPD40 UPD40 UPD40 INS14 UPD40 UPD40 UPD40 INS14 INS43 UPD40 UPD40 UPD40 MOV14 INS43 INS42 UPD40 UPD40 UPD40 INS14 INS42 UPD40 UPD40 UPD40 MOV14 INS43 INS9 UPD40 UPD40 MOV14 INS42 UPD40 UPD40 INS42 UPD40 MOV14 UPD40 MOV14 UPD40 UPD40 INS14 INS43 INS42 DEL83 DEL42 DEL83 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL42 DEL27 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL40 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL74