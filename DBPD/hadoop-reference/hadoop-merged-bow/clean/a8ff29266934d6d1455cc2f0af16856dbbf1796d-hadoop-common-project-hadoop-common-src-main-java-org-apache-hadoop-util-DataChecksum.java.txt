Merge trunk into HDFS-3077 branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1377092 13f79535-47bb-0310-9956-ffa450edef68

-  
-  private static String[] NAMES = new String[] {
-    "NULL", "CRC32", "CRC32C"
-  };
-  
-  private static final int CHECKSUM_NULL_SIZE  = 0;
-  private static final int CHECKSUM_CRC32_SIZE = 4;
-  private static final int CHECKSUM_CRC32C_SIZE = 4;
-  
-  
-  public static DataChecksum newDataChecksum( int type, int bytesPerChecksum ) {
+  public static final int CHECKSUM_DEFAULT = 3; 
+  public static final int CHECKSUM_MIXED   = 4;
+ 
+  /** The checksum types */
+  public static enum Type {
+    NULL  (CHECKSUM_NULL, 0),
+    CRC32 (CHECKSUM_CRC32, 4),
+    CRC32C(CHECKSUM_CRC32C, 4),
+    DEFAULT(CHECKSUM_DEFAULT, 0), // This cannot be used to create DataChecksum
+    MIXED (CHECKSUM_MIXED, 0); // This cannot be used to create DataChecksum
+
+    public final int id;
+    public final int size;
+    
+    private Type(int id, int size) {
+      this.id = id;
+      this.size = size;
+    }
+
+    /** @return the type corresponding to the id. */
+    public static Type valueOf(int id) {
+      if (id < 0 || id >= values().length) {
+        throw new IllegalArgumentException("id=" + id
+            + " out of range [0, " + values().length + ")");
+      }
+      return values()[id];
+    }
+  }
+
+
+  public static DataChecksum newDataChecksum(Type type, int bytesPerChecksum ) {
-    case CHECKSUM_NULL :
-      return new DataChecksum( CHECKSUM_NULL, new ChecksumNull(), 
-                               CHECKSUM_NULL_SIZE, bytesPerChecksum );
-    case CHECKSUM_CRC32 :
-      return new DataChecksum( CHECKSUM_CRC32, new PureJavaCrc32(), 
-                               CHECKSUM_CRC32_SIZE, bytesPerChecksum );
-    case CHECKSUM_CRC32C:
-      return new DataChecksum( CHECKSUM_CRC32C, new PureJavaCrc32C(),
-                               CHECKSUM_CRC32C_SIZE, bytesPerChecksum);
+    case NULL :
+      return new DataChecksum(type, new ChecksumNull(), bytesPerChecksum );
+    case CRC32 :
+      return new DataChecksum(type, new PureJavaCrc32(), bytesPerChecksum );
+    case CRC32C:
+      return new DataChecksum(type, new PureJavaCrc32C(), bytesPerChecksum);
-    return newDataChecksum( bytes[0], bytesPerChecksum );
+    return newDataChecksum( Type.valueOf(bytes[0]), bytesPerChecksum );
-    DataChecksum summer = newDataChecksum( type, bpc );
+    DataChecksum summer = newDataChecksum(Type.valueOf(type), bpc );
-    out.writeByte( type );
+    out.writeByte( type.id );
-    header[0] = (byte) (type & 0xff);
+    header[0] = (byte) (type.id & 0xff);
-     if ( size <= 0 ) {
+     if ( type.size <= 0 ) {
-     if ( size == 4 ) {
+     if ( type.size == 4 ) {
-     return size;
+     return type.size;
-      if ( size <= 0 ) {
+      if ( type.size <= 0 ) {
-      if ( size == 4 ) {
+      if ( type.size == 4 ) {
-      return size;
+      return type.size;
-     if ( size == 4 ) {
+     if ( type.size == 4 ) {
-     return size == 0;
+     return type.size == 0;
-  private final int type;
-  private final int size;
+  private final Type type;
-  private DataChecksum( int checksumType, Checksum checksum,
-                        int sumSize, int chunkSize ) {
-    type = checksumType;
+  private DataChecksum( Type type, Checksum checksum, int chunkSize ) {
+    this.type = type;
-    size = sumSize;
-  public int getChecksumType() {
+  public Type getChecksumType() {
-    return size;
+    return type.size;
-    if (size == 0) return;
+    if (type.size == 0) return;
-      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type, checksums, data,
+      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data,
-      byte[] sum = new byte[size];
+      byte[] sum = new byte[type.size];
-    if (size == 0) return;
+    if (type.size == 0) return;
-    return (this.type + 31) * this.bytesPerChecksum;
+    return (this.type.id + 31) * this.bytesPerChecksum;
-    String strType;
-    if (type < NAMES.length && type > 0) {
-      strType = NAMES[type];
-    } else {
-      strType = String.valueOf(type);
-    }
-    return "DataChecksum(type=" + strType +
+    return "DataChecksum(type=" + type +

INS71 INS23 INS31 INS31 UPD83 UPD83 INS29 INS83 INS83 INS42 INS72 INS72 INS72 INS72 INS72 INS23 INS23 INS31 INS31 INS83 INS83 INS43 MOV59 INS44 INS43 INS83 INS39 INS42 INS8 MOV78 INS83 MOV43 INS42 INS8 UPD42 UPD34 UPD42 INS65 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 UPD83 MOV83 MOV83 MOV39 INS59 UPD83 MOV83 MOV83 MOV39 MOV59 UPD83 MOV83 INS42 INS44 INS44 MOV8 INS29 MOV83 INS83 INS43 INS42 INS44 INS8 INS43 INS25 INS41 MOV25 MOV41 INS42 INS43 UPD42 MOV42 INS42 INS41 MOV41 INS66 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS65 UPD42 MOV42 INS39 INS42 INS25 INS41 INS42 INS32 INS27 MOV8 INS40 INS40 INS42 INS40 INS7 INS7 INS66 UPD27 MOV27 MOV8 INS2 UPD42 UPD42 UPD42 INS42 MOV32 MOV2 INS42 INS40 INS40 INS34 MOV41 INS40 INS40 INS40 INS40 INS40 INS22 UPD42 INS40 INS40 UPD42 INS22 INS42 INS22 INS42 UPD27 INS53 INS32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 MOV34 INS52 INS42 MOV5 INS52 INS42 INS52 INS42 UPD42 INS34 UPD42 INS22 INS14 INS42 INS42 INS42 MOV42 INS40 INS22 INS32 INS42 INS43 INS27 INS40 MOV5 INS40 MOV22 INS42 INS42 INS42 INS45 INS42 INS45 INS22 INS45 INS32 INS42 INS42 DEL83 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL45 DEL45 DEL4 DEL3 DEL59 DEL23 DEL42 DEL41 DEL40 DEL34 DEL42 DEL42 DEL42 DEL2 DEL7 DEL21 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL25 DEL42 DEL42 DEL41 DEL42 DEL42 DEL23 DEL23 DEL39 DEL42 DEL44 DEL39 DEL44 DEL42 DEL42 DEL42 DEL7 DEL21 DEL39 DEL39 DEL42 DEL31 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31