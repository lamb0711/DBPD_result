HDDS-120. Adding HDDS datanode Audit Log. Contributed by Dinesh Chitlangia.

-import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerNotOpenException;
-import org.apache.hadoop.hdds.scm.container.common.helpers.InvalidContainerStateException;
-import org.apache.hadoop.hdds.scm.container.common.helpers.StorageContainerException;
+import org.apache.hadoop.hdds.scm.container.common.helpers
+    .ContainerNotOpenException;
+import org.apache.hadoop.hdds.scm.container.common.helpers
+    .InvalidContainerStateException;
+import org.apache.hadoop.hdds.scm.container.common.helpers
+    .StorageContainerException;
+import org.apache.hadoop.ozone.audit.AuditAction;
+import org.apache.hadoop.ozone.audit.AuditEventStatus;
+import org.apache.hadoop.ozone.audit.AuditLogger;
+import org.apache.hadoop.ozone.audit.AuditLoggerType;
+import org.apache.hadoop.ozone.audit.AuditMarker;
+import org.apache.hadoop.ozone.audit.AuditMessage;
+import org.apache.hadoop.ozone.audit.Auditor;
+import org.apache.hadoop.ozone.container.common.helpers
+    .ContainerCommandRequestPBHelper;
-public class HddsDispatcher implements ContainerDispatcher {
+public class HddsDispatcher implements ContainerDispatcher, Auditor {
-
+  private static final AuditLogger AUDIT =
+      new AuditLogger(AuditLoggerType.DNLOGGER);
-    Preconditions.checkNotNull(msg);
+    Preconditions.checkNotNull(msg.toString());
+
+    AuditAction action = ContainerCommandRequestPBHelper.getAuditAction(
+        msg.getCmdType());
+    EventType eventType = getEventType(msg);
+    Map<String, String> params =
+        ContainerCommandRequestPBHelper.getAuditParams(msg);
+        audit(action, eventType, params, AuditEventStatus.FAILURE, sce);
+        audit(action, eventType, params, AuditEventStatus.FAILURE,
+            new Exception("MALFORMED_REQUEST"));
+      // log failure
+      audit(action, eventType, params, AuditEventStatus.FAILURE, ex);
+
+      if(result == Result.SUCCESS) {
+        audit(action, eventType, params, AuditEventStatus.SUCCESS, null);
+      } else {
+        audit(action, eventType, params, AuditEventStatus.FAILURE,
+            new Exception(responseProto.getMessage()));
+      }
+
+      // log failure
+      audit(action, eventType, params, AuditEventStatus.FAILURE,
+          new Exception("UNSUPPORTED_REQUEST"));
+    ContainerProtos.Type cmdType = msg.getCmdType();
+    AuditAction action =
+        ContainerCommandRequestPBHelper.getAuditAction(cmdType);
+    EventType eventType = getEventType(msg);
+    Map<String, String> params =
+        ContainerCommandRequestPBHelper.getAuditParams(msg);
+      audit(action, eventType, params, AuditEventStatus.FAILURE, ex);
-    ContainerProtos.Type cmdType = msg.getCmdType();
+
-          throw new ContainerNotOpenException(
+          ContainerNotOpenException cex = new ContainerNotOpenException(
+          audit(action, eventType, params, AuditEventStatus.FAILURE, cex);
+          throw cex;
-        throw new InvalidContainerStateException(
+        InvalidContainerStateException iex = new InvalidContainerStateException(
+        audit(action, eventType, params, AuditEventStatus.FAILURE, iex);
+        throw iex;
+
+  private EventType getEventType(ContainerCommandRequestProto msg) {
+    return HddsUtils.isReadOnly(msg) ? EventType.READ : EventType.WRITE;
+  }
+
+  private void audit(AuditAction action, EventType eventType,
+      Map<String, String> params, AuditEventStatus result, Throwable exception){
+    AuditMessage amsg;
+    switch (result) {
+    case SUCCESS:
+      if(eventType == EventType.READ &&
+          AUDIT.getLogger().isInfoEnabled(AuditMarker.READ.getMarker())) {
+        amsg = buildAuditMessageForSuccess(action, params);
+        AUDIT.logReadSuccess(amsg);
+      } else if(eventType == EventType.WRITE &&
+          AUDIT.getLogger().isInfoEnabled(AuditMarker.WRITE.getMarker())) {
+        amsg = buildAuditMessageForSuccess(action, params);
+        AUDIT.logWriteSuccess(amsg);
+      }
+      break;
+
+    case FAILURE:
+      if(eventType == EventType.READ &&
+          AUDIT.getLogger().isErrorEnabled(AuditMarker.READ.getMarker())) {
+        amsg = buildAuditMessageForFailure(action, params, exception);
+        AUDIT.logReadFailure(amsg);
+      } else if(eventType == EventType.WRITE &&
+          AUDIT.getLogger().isErrorEnabled(AuditMarker.WRITE.getMarker())) {
+        amsg = buildAuditMessageForFailure(action, params, exception);
+        AUDIT.logWriteFailure(amsg);
+      }
+      break;
+
+    default: LOG.debug("Invalid audit event status - " + result);
+    }
+  }
+
+  //TODO: use GRPC to fetch user and ip details
+  @Override
+  public AuditMessage buildAuditMessageForSuccess(AuditAction op,
+      Map<String, String> auditMap) {
+    return new AuditMessage.Builder()
+        .setUser(null)
+        .atIp(null)
+        .forOperation(op.getAction())
+        .withParams(auditMap)
+        .withResult(AuditEventStatus.SUCCESS.toString())
+        .withException(null)
+        .build();
+  }
+
+  //TODO: use GRPC to fetch user and ip details
+  @Override
+  public AuditMessage buildAuditMessageForFailure(AuditAction op,
+      Map<String, String> auditMap, Throwable throwable) {
+    return new AuditMessage.Builder()
+        .setUser(null)
+        .atIp(null)
+        .forOperation(op.getAction())
+        .withParams(auditMap)
+        .withResult(AuditEventStatus.FAILURE.toString())
+        .withException(throwable)
+        .build();
+  }
+
+  enum EventType {
+    READ,
+    WRITE
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS31 INS71 INS42 INS83 INS83 INS83 INS43 INS59 MOV60 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS72 INS72 INS42 INS42 INS14 INS60 INS60 INS60 INS60 INS60 INS60 INS42 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS60 INS50 INS42 INS42 INS43 INS42 INS74 INS42 INS41 INS42 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS40 INS43 INS59 INS43 INS59 INS74 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS42 INS16 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS42 INS49 INS25 INS10 INS49 INS25 INS10 INS49 INS21 INS42 INS43 INS43 INS43 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS21 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS21 INS32 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS25 INS42 INS27 INS8 INS25 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS32 INS21 INS21 INS27 INS8 INS27 INS32 INS21 INS21 INS27 INS8 INS42 INS42 INS27 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS21 INS21 INS42 INS42 INS42 INS42 INS40 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS42 INS32 INS7 INS32 INS27 INS32 INS21 INS21 INS42 INS40 INS32 INS42 INS32 INS7 INS32 INS27 INS32 INS21 INS21 INS45 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS43 INS45 INS60 INS21 INS60 INS21 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS32 INS7 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS32 INS7 INS32 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS14 INS42 INS42 INS42 INS42 INS40 INS33 INS42 INS42 INS42 INS42 INS40 INS14 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS43 INS45 INS43 INS32 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS14 INS42 INS33 INS43 INS43 INS40 INS40