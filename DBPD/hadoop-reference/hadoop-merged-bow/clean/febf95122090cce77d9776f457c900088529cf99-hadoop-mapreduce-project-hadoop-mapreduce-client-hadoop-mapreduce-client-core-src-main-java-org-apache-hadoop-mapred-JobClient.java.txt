MAPREDUCE-5222. Bring back some methods and constants in Jobclient for binary compatibility with mapred in 1.x. Contributed by Karthik Kambatla.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1482208 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.FileStatus;
+
+  @InterfaceAudience.Private
+  public static final String MAPREDUCE_CLIENT_RETRY_POLICY_ENABLED_KEY =
+      "mapreduce.jobclient.retry.policy.enabled";
+  @InterfaceAudience.Private
+  public static final boolean MAPREDUCE_CLIENT_RETRY_POLICY_ENABLED_DEFAULT =
+      false;
+  @InterfaceAudience.Private
+  public static final String MAPREDUCE_CLIENT_RETRY_POLICY_SPEC_KEY =
+      "mapreduce.jobclient.retry.policy.spec";
+  @InterfaceAudience.Private
+  public static final String MAPREDUCE_CLIENT_RETRY_POLICY_SPEC_DEFAULT =
+      "10000,6,60000,10"; // t1,n1,t2,n2,...
+
+    return submitJobInternal(conf);
+  }
+
+  @InterfaceAudience.Private
+  public RunningJob submitJobInternal(final JobConf conf)
+      throws FileNotFoundException, IOException {
+  /**
+   * Checks if the job directory is clean and has all the required components
+   * for (re) starting the job
+   */
+  public static boolean isJobDirValid(Path jobDirPath, FileSystem fs)
+      throws IOException {
+    FileStatus[] contents = fs.listStatus(jobDirPath);
+    int matchCount = 0;
+    if (contents != null && contents.length >= 2) {
+      for (FileStatus status : contents) {
+        if ("job.xml".equals(status.getPath().getName())) {
+          ++matchCount;
+        }
+        if ("job.split".equals(status.getPath().getName())) {
+          ++matchCount;
+        }
+      }
+      if (matchCount == 2) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Fetch the staging area directory for the application
+   * 
+   * @return path to staging area directory
+   * @throws IOException
+   */
+  public Path getStagingAreaDir() throws IOException {
+    try {
+      return clientUgi.doAs(new PrivilegedExceptionAction<Path>() {
+        @Override
+        public Path run() throws IOException, InterruptedException {
+          return cluster.getStagingAreaDir();
+        }
+      });
+    } catch (InterruptedException ie) {
+      // throw RuntimeException instead for compatibility reasons
+      throw new RuntimeException(ie);
+    }
+  }
+

INS26 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS43 INS59 MOV29 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 UPD42 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS40 INS42 INS42 INS45 INS40 INS42 INS9 INS40 INS42 INS42 INS45 INS40 INS42 INS42 INS45 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS40 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS65 INS65 INS65 INS42 INS42 INS54 INS42 INS32 INS66 INS66 INS42 INS42 INS5 INS59 INS39 INS59 INS27 INS8 INS9 INS66 INS66 INS42 INS8 INS12 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS34 INS27 INS27 INS70 INS25 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS33 INS40 INS34 INS44 INS42 INS8 INS27 INS8 INS32 INS43 INS42 INS53 INS43 INS42 INS25 INS25 INS42 INS34 INS41 INS42 INS42 INS14 INS42 INS14 INS42 INS32 INS8 INS32 INS8 INS9 INS74 INS1 INS43 INS42 INS45 INS42 INS32 INS21 INS45 INS42 INS32 INS21 INS43 INS43 INS31 INS42 INS32 INS42 INS38 INS32 INS42 INS38 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS32 INS42 INS42