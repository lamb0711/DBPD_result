HDDS-737. Introduce Incremental Container Report.
Contributed by Nanda kumar.

-import java.io.IOException;
+import java.util.HashSet;
+import java.util.List;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos;
-import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.ContainerReportsProto;
-import org.apache.hadoop.hdds.scm.container.replication.ReplicationActivityStatus;
+import org.apache.hadoop.hdds.protocol.proto
+    .StorageContainerDatanodeProtocolProtos.ContainerReplicaProto;
+import org.apache.hadoop.hdds.protocol.proto
+    .StorageContainerDatanodeProtocolProtos.ContainerReportsProto;
+import org.apache.hadoop.hdds.scm.block.PendingDeleteStatusList;
+import org.apache.hadoop.hdds.scm.container.replication
+    .ReplicationActivityStatus;
-import org.apache.hadoop.hdds.scm.node.states.ReportResult;
-import org.apache.hadoop.hdds.scm.server.SCMDatanodeHeartbeatDispatcher.ContainerReportFromDatanode;
+import org.apache.hadoop.hdds.scm.node.states.NodeNotFoundException;
+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;
+import org.apache.hadoop.hdds.scm.server
+    .SCMDatanodeHeartbeatDispatcher.ContainerReportFromDatanode;
+  private final PipelineManager pipelineManager;
-  private ReplicationActivityStatus replicationStatus;
+  private final ReplicationActivityStatus replicationStatus;
-  public ContainerReportHandler(ContainerManager containerManager,
-      NodeManager nodeManager,
-      ReplicationActivityStatus replicationActivityStatus) {
-    Preconditions.checkNotNull(containerManager);
+  public ContainerReportHandler(final NodeManager nodeManager,
+      final PipelineManager pipelineManager,
+      final ContainerManager containerManager,
+      final ReplicationActivityStatus replicationActivityStatus) {
+    Preconditions.checkNotNull(pipelineManager);
+    Preconditions.checkNotNull(containerManager);
+    this.pipelineManager = pipelineManager;
-  public void onMessage(ContainerReportFromDatanode containerReportFromDatanode,
-      EventPublisher publisher) {
+  public void onMessage(final ContainerReportFromDatanode reportFromDatanode,
+      final EventPublisher publisher) {
-    DatanodeDetails datanodeOrigin =
-        containerReportFromDatanode.getDatanodeDetails();
+    final DatanodeDetails datanodeDetails =
+        reportFromDatanode.getDatanodeDetails();
-    ContainerReportsProto containerReport =
-        containerReportFromDatanode.getReport();
+    final ContainerReportsProto containerReport =
+        reportFromDatanode.getReport();
+
-      //update state in container db and trigger close container events
-      containerManager
-          .processContainerReports(datanodeOrigin, containerReport);
+      final List<ContainerReplicaProto> replicas = containerReport
+          .getReportsList();
-      Set<ContainerID> containerIds = containerReport.getReportsList().stream()
-          .map(StorageContainerDatanodeProtocolProtos
-              .ContainerReplicaProto::getContainerID)
-          .map(ContainerID::new)
-          .collect(Collectors.toSet());
+      // ContainerIDs which SCM expects this datanode to have.
+      final Set<ContainerID> expectedContainerIDs = nodeManager
+          .getContainers(datanodeDetails);
-      ReportResult<ContainerID> reportResult = nodeManager
-          .processContainerReport(datanodeOrigin.getUuid(), containerIds);
+      // ContainerIDs that this datanode actually has.
+      final Set<ContainerID> actualContainerIDs = replicas.parallelStream()
+          .map(ContainerReplicaProto::getContainerID)
+          .map(ContainerID::valueof).collect(Collectors.toSet());
-      //we have the report, so we can update the states for the next iteration.
-      nodeManager
-          .setContainersForDatanode(datanodeOrigin.getUuid(), containerIds);
+      // Container replicas which SCM is not aware of.
+      final  Set<ContainerID> newReplicas =
+          new HashSet<>(actualContainerIDs);
+      newReplicas.removeAll(expectedContainerIDs);
-      for (ContainerID containerID : reportResult.getMissingEntries()) {
-        final ContainerReplica replica = ContainerReplica.newBuilder()
-            .setContainerID(containerID)
-            .setDatanodeDetails(datanodeOrigin)
-            .build();
-        containerManager
-            .removeContainerReplica(containerID, replica);
-        checkReplicationState(containerID, publisher);
+      // Container replicas which are missing from datanode.
+      final Set<ContainerID> missingReplicas =
+          new HashSet<>(expectedContainerIDs);
+      missingReplicas.removeAll(actualContainerIDs);
+
+      processContainerReplicas(datanodeDetails, replicas, publisher);
+
+      // Remove missing replica from ContainerManager
+      for (ContainerID id : missingReplicas) {
+        try {
+          containerManager.getContainerReplicas(id)
+              .stream()
+              .filter(replica ->
+                  replica.getDatanodeDetails().equals(datanodeDetails))
+              .findFirst()
+              .ifPresent(replica -> {
+                try {
+                  containerManager.removeContainerReplica(id, replica);
+                } catch (ContainerNotFoundException |
+                    ContainerReplicaNotFoundException e) {
+                  // This should not happen, but even if it happens, not an
+                  // issue
+                }
+              });
+        } catch (ContainerNotFoundException e) {
+          LOG.warn("Cannot remove container replica, container {} not found",
+              id);
+        }
-      for (ContainerID containerID : reportResult.getNewEntries()) {
-        final ContainerReplica replica = ContainerReplica.newBuilder()
-            .setContainerID(containerID)
-            .setDatanodeDetails(datanodeOrigin)
-            .build();
-        containerManager.updateContainerReplica(containerID, replica);
-        checkReplicationState(containerID, publisher);
-      }
+      // Update the latest set of containers for this datanode in NodeManager.
+      nodeManager.setContainers(datanodeDetails, actualContainerIDs);
-    } catch (IOException e) {
-      //TODO: stop all the replication?
-      LOG.error("Error on processing container report from datanode {}",
-          datanodeOrigin, e);
+      // Replicate if needed.
+      newReplicas.forEach(id -> checkReplicationState(id, publisher));
+      missingReplicas.forEach(id -> checkReplicationState(id, publisher));
+
+    } catch (NodeNotFoundException ex) {
+      LOG.error("Received container report from unknown datanode {}",
+          datanodeDetails);
+  private void processContainerReplicas(final DatanodeDetails datanodeDetails,
+      final List<ContainerReplicaProto> replicas,
+      final EventPublisher publisher) {
+    final PendingDeleteStatusList pendingDeleteStatusList =
+        new PendingDeleteStatusList(datanodeDetails);
+    for (ContainerReplicaProto replicaProto : replicas) {
+      try {
+        final ContainerID containerID = ContainerID.valueof(
+            replicaProto.getContainerID());
+        final ContainerInfo containerInfo = containerManager
+            .getContainer(containerID);
+        updateContainerState(datanodeDetails, containerInfo,
+            replicaProto, publisher);
+        if (containerInfo.getDeleteTransactionId() >
+            replicaProto.getDeleteTransactionId()) {
+          pendingDeleteStatusList
+              .addPendingDeleteStatus(replicaProto.getDeleteTransactionId(),
+                  containerInfo.getDeleteTransactionId(),
+                  containerInfo.getContainerID());
+        }
+      } catch (ContainerNotFoundException e) {
+        LOG.error("Received container report for an unknown container {}",
+            replicaProto.getContainerID());
+      }
+    }
+    if (pendingDeleteStatusList.getNumPendingDeletes() > 0) {
+      publisher.fireEvent(SCMEvents.PENDING_DELETE_STATUS,
+          pendingDeleteStatusList);
+    }
+  }
+
+  private void updateContainerState(final DatanodeDetails datanodeDetails,
+      final ContainerInfo containerInfo,
+      final ContainerReplicaProto replicaProto,
+      final EventPublisher publisher)
+      throws ContainerNotFoundException {
+
+    final ContainerID id = containerInfo.containerID();
+    final ContainerReplica datanodeContainerReplica = ContainerReplica
+        .newBuilder()
+        .setContainerID(id)
+        .setContainerState(replicaProto.getState())
+        .setDatanodeDetails(datanodeDetails)
+        .build();
+    // TODO: Add bcsid and origin datanode to replica.
+
+    final ContainerReplica scmContainerReplica = containerManager
+        .getContainerReplicas(id)
+        .stream()
+        .filter(replica ->
+            replica.getDatanodeDetails().equals(datanodeDetails))
+        .findFirst().orElse(null);
+
+    // This is an in-memory update.
+    containerManager.updateContainerReplica(id, datanodeContainerReplica);
+    containerInfo.setUsedBytes(replicaProto.getUsed());
+    containerInfo.setNumberOfKeys(replicaProto.getKeyCount());
+
+    // Check if there is state change in container replica.
+    if (scmContainerReplica == null ||
+        scmContainerReplica.getState() != datanodeContainerReplica.getState()) {
+      //TODO: Handler replica state change.
+    }
+  }
+

INS26 INS26 INS26 INS40 UPD40 UPD40 INS40 UPD40 INS40 INS23 MOV44 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS44 MOV21 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS83 INS83 INS43 INS42 INS83 INS83 INS21 INS21 INS83 UPD42 INS83 MOV60 MOV60 INS54 INS83 INS43 INS42 INS83 INS74 INS42 INS83 INS43 INS42 INS60 INS70 INS25 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 MOV60 INS60 INS21 INS21 INS21 INS25 INS42 INS32 INS7 INS83 INS83 INS8 INS12 INS42 INS43 INS43 INS42 INS83 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS83 MOV43 INS59 INS83 MOV43 INS59 INS32 INS32 INS32 INS27 INS8 INS42 INS42 INS42 INS22 INS42 UPD42 INS60 INS60 MOV60 INS60 INS21 INS60 INS21 INS21 INS70 INS21 MOV21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS54 INS32 INS34 INS21 INS42 INS32 UPD42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS52 INS42 UPD42 UPD42 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS83 UPD74 MOV74 INS59 INS32 INS83 INS74 INS59 INS32 INS32 MOV44 INS42 INS8 INS32 INS32 INS32 INS43 INS42 INS21 INS43 INS42 INS42 INS8 MOV12 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS43 INS43 INS42 MOV32 INS43 INS43 INS42 INS32 UPD42 UPD43 INS43 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS43 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS32 INS42 INS60 INS60 MOV21 INS25 INS42 INS42 INS40 INS42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS8 INS12 INS59 INS32 INS59 INS32 UPD42 MOV42 INS42 INS45 UPD42 MOV42 INS83 MOV43 INS59 INS83 INS43 INS59 INS27 INS8 UPD43 UPD42 INS32 INS32 INS42 INS86 INS90 INS43 INS43 INS21 INS44 INS8 INS42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS32 MOV21 UPD42 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 INS86 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 UPD42 MOV42 INS59 INS8 INS42 INS42 INS45 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV42 INS86 INS42 INS54 MOV32 UPD42 MOV42 INS59 INS32 INS8 INS12 INS42 UPD42 UPD42 INS42 INS32 INS42 UPD42 MOV42 MOV21 INS44 INS8 INS42 UPD42 MOV42 INS84 INS42 UPD42 INS43 INS43 INS42 INS42 DEL40 DEL42 DEL43 DEL89 DEL32 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL44 DEL32 DEL83 DEL42 DEL32 DEL59 DEL60 DEL8 DEL70 DEL32 DEL8 DEL70 DEL8 DEL54 DEL8 DEL31