YARN-9318. Resources#multiplyAndRoundUp does not consider Resource Types
(Contributed by Szilard Nemeth via Daniel Templeton)

Change-Id: Ia45f528574c2b054f6f764d1d140e592bdb7e217

+  private enum RoundingDirection { UP, DOWN }
+
-    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();
-    for (int i = 0; i < maxLength; i++) {
-      try {
-        ResourceInformation lhsValue = lhs.getResourceInformation(i);
-        lhs.setResourceValue(i, (long) (lhsValue.getValue() * by));
-      } catch (ResourceNotFoundException ye) {
-        LOG.warn("Resource is missing:" + ye.getMessage());
-        continue;
-      }
-    }
-    return lhs;
+    return multiplyAndRound(lhs, by, RoundingDirection.DOWN);
-        continue;
-  
+
+  /**
+   * Multiply {@code lhs} by {@code by}, and set the result rounded down into a
+   * cloned version of {@code lhs} Resource object.
+   * @param lhs Resource object
+   * @param by Multiply values by this value
+   * @return A cloned version of {@code lhs} with updated values
+   */
-    Resource out = clone(lhs);
+    return multiplyAndRound(clone(lhs), by, RoundingDirection.DOWN);
+  }
+
+  /**
+   * Multiply {@code lhs} by {@code by}, and set the result rounded up into a
+   * cloned version of {@code lhs} Resource object.
+   * @param lhs Resource object
+   * @param by Multiply values by this value
+   * @return A cloned version of {@code lhs} with updated values
+   */
+  public static Resource multiplyAndRoundUp(Resource lhs, double by) {
+    return multiplyAndRound(clone(lhs), by, RoundingDirection.UP);
+  }
+
+  /**
+   * Multiply {@code lhs} by {@code by}, and set the result according to
+   * the rounding direction to {@code lhs}
+   * without creating any new {@link Resource} object.
+   * @param lhs Resource object
+   * @param by Multiply values by this value
+   * @return Returns {@code lhs} itself (without cloning) with updated values
+   */
+  private static Resource multiplyAndRound(Resource lhs, double by,
+      RoundingDirection roundingDirection) {
-        out.setResourceValue(i, (long) (lhsValue.getValue() * by));
+
+        final long value;
+        if (roundingDirection == RoundingDirection.DOWN) {
+          value = (long) (lhsValue.getValue() * by);
+        } else {
+          value = (long) Math.ceil(lhsValue.getValue() * by);
+        }
+        lhs.setResourceValue(i, value);
-        continue;
-    return out;
+    return lhs;
-  public static Resource multiplyAndRoundUp(Resource lhs, double by) {
-    Resource out = clone(lhs);
-    out.setMemorySize((long)Math.ceil(lhs.getMemorySize() * by));
-    out.setVirtualCores((int)Math.ceil(lhs.getVirtualCores() * by));
-    return out;
-  }
-  

INS71 INS31 INS31 INS31 INS31 INS83 INS42 INS72 INS72 MOV83 MOV83 MOV43 MOV42 MOV44 MOV44 INS8 INS29 MOV83 MOV83 MOV43 MOV42 INS44 INS44 INS8 INS29 INS83 INS83 MOV43 INS42 MOV44 MOV44 INS8 INS29 INS83 INS83 MOV43 INS42 MOV44 MOV44 INS44 MOV8 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS41 INS65 INS65 INS65 INS65 INS41 INS65 INS65 INS65 INS65 INS43 INS42 MOV60 MOV41 INS32 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 MOV42 INS32 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS32 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS66 INS66 INS66 INS66 UPD42 MOV42 MOV32 UPD42 MOV42 INS40 INS66 INS66 INS66 INS66 UPD42 MOV42 MOV32 UPD42 MOV42 INS40 INS66 INS66 INS66 INS42 INS66 INS8 MOV60 INS60 INS25 INS21 INS83 INS39 INS59 INS27 MOV8 INS8 INS32 INS42 INS42 INS40 INS21 INS42 INS42 INS42 INS42 INS7 INS7 INS42 MOV11 INS42 INS11 INS39 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL39 DEL42 DEL32 DEL42 DEL27 DEL36 DEL11 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL18 DEL8 DEL12 DEL54 DEL8 DEL24 DEL8 DEL31 DEL18 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL18 DEL42 DEL41 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL32 DEL11 DEL32 DEL21 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL32 DEL11 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31