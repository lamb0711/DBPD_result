HDDS-909 : Default implementation for Ozone acls.
Contributed by Ajay Kumar.

+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;
+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType;
+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLIdentityType;
+import org.apache.hadoop.ozone.security.acl.OzoneAccessAuthorizer;
+import org.apache.hadoop.ozone.security.acl.OzoneAclException;
+import org.apache.hadoop.ozone.security.acl.OzoneAclException.ErrorCode;
+import org.apache.hadoop.ozone.security.acl.OzoneObj;
+import org.apache.hadoop.ozone.security.acl.OzoneObj.StoreType;
+import org.apache.hadoop.ozone.security.acl.OzoneObj.ResourceType;
+import org.apache.hadoop.ozone.security.acl.OzoneObjInfo;
+import org.apache.hadoop.ozone.security.acl.RequestContext;
+import org.apache.hadoop.util.ReflectionUtils;
+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_AUTHORIZER_CLASS;
+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED;
+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_ACL_ENABLED_DEFAULT;
+  private final boolean isAclEnabled;
+  private final IAccessAuthorizer accessAuthorizer;
-
+    isAclEnabled = conf.getBoolean(OZONE_ACL_ENABLED,
+            OZONE_ACL_ENABLED_DEFAULT);
+    if (isAclEnabled) {
+      accessAuthorizer = getACLAuthorizerInstance(conf);
+    } else {
+      accessAuthorizer = null;
+    }
+   * Returns an instance of {@link IAccessAuthorizer}.
+   * Looks up the configuration to see if there is custom class specified.
+   * Constructs the instance by passing the configuration directly to the
+   * constructor to achieve thread safety using final fields.
+   * @param conf
+   * @return IAccessAuthorizer
+   */
+  private IAccessAuthorizer getACLAuthorizerInstance(OzoneConfiguration conf) {
+    Class<? extends IAccessAuthorizer> clazz = conf.getClass(
+        OZONE_ACL_AUTHORIZER_CLASS, OzoneAccessAuthorizer.class,
+        IAccessAuthorizer.class);
+    return ReflectionUtils.newInstance(clazz, conf);
+  }
+
+  /**
+      if(isAclEnabled) {
+        checkAcls(ResourceType.VOLUME, StoreType.OZONE,
+            ACLType.CREATE, args.getVolume(), null, null);
+      }
+   * Checks if current caller has acl permissions.
+   *
+   * @param resType - Type of ozone resource. Ex volume, bucket.
+   * @param store   - Store type. i.e Ozone, S3.
+   * @param acl     - type of access to be checked.
+   * @param vol     - name of volume
+   * @param bucket  - bucket name
+   * @param key     - key
+   * @throws OzoneAclException
+   */
+  private void checkAcls(ResourceType resType, StoreType store,
+      ACLType acl, String vol, String bucket, String key)
+      throws OzoneAclException {
+    if(!isAclEnabled) {
+      return;
+    }
+
+    OzoneObj obj = OzoneObjInfo.Builder.newBuilder()
+        .setResType(resType)
+        .setStoreType(store)
+        .setVolumeName(vol)
+        .setBucketName(bucket)
+        .setKeyName(key).build();
+    UserGroupInformation user = ProtobufRpcEngine.Server.getRemoteUser();
+    RequestContext context = RequestContext.newBuilder()
+        .setClientUgi(user)
+        .setIp(ProtobufRpcEngine.Server.getRemoteIp())
+        .setAclType(ACLIdentityType.USER)
+        .setAclRights(acl)
+        .build();
+    if (!accessAuthorizer.checkAccess(obj, context)) {
+      LOG.warn("User {} doesn't have {} permission to access {}",
+          user.getUserName(), acl, resType);
+      throw new OzoneAclException("User " + user.getUserName() + " doesn't " +
+          "have " + acl + " permission to access " + resType,
+          ErrorCode.PERMISSION_DENIED);
+    }
+  }
+
+  /**
+    if(isAclEnabled) {
+      checkAcls(ResourceType.VOLUME, StoreType.OZONE, ACLType.WRITE_ACL, volume,
+          null, null);
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.VOLUME, StoreType.OZONE, ACLType.WRITE, volume,
+          null, null);
+    }
+
+    if(isAclEnabled) {
+      checkAcls(ResourceType.VOLUME, StoreType.OZONE,
+          ACLType.READ, volume, null, null);
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.VOLUME, StoreType.OZONE, ACLType.READ, volume,
+          null, null);
+    }
+
+      if(isAclEnabled) {
+        checkAcls(ResourceType.VOLUME, StoreType.OZONE, ACLType.DELETE, volume,
+            null, null);
+      }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.VOLUME, StoreType.OZONE, ACLType.LIST, prefix,
+          null, null);
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.VOLUME, StoreType.OZONE, ACLType.LIST, prefix,
+          null, null);
+    }
+      if(isAclEnabled) {
+        checkAcls(ResourceType.BUCKET, StoreType.OZONE, ACLType.CREATE,
+            bucketInfo.getVolumeName(), bucketInfo.getBucketName(), null);
+      }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.VOLUME, StoreType.OZONE, ACLType.LIST, volumeName,
+          null, null);
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.BUCKET, StoreType.OZONE, ACLType.READ, volume,
+          bucket, null);
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.READ,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.WRITE,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.WRITE,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.READ,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.WRITE,
+          args.getVolumeName(), args.getBucketName(), args.getKeyName());
+    }
+      if(isAclEnabled) {
+        checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.DELETE,
+            args.getVolumeName(), args.getBucketName(), args.getKeyName());
+      }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.KEY, StoreType.OZONE, ACLType.LIST, volumeName,
+          bucketName, keyPrefix);
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.BUCKET, StoreType.OZONE, ACLType.WRITE,
+          args.getVolumeName(), args.getBucketName(), null);
+    }
+    checkAcls(ResourceType.BUCKET, StoreType.OZONE, ACLType.WRITE, volume,
+        bucket, null);
+      if(isAclEnabled) {
+        checkAcls(ResourceType.BUCKET, StoreType.S3, ACLType.CREATE,
+            null, s3BucketName, null);
+      }
-  public void deleteS3Bucket(String s3BucketName)
-      throws IOException {
+  public void deleteS3Bucket(String s3BucketName) throws IOException {
+      if(isAclEnabled) {
+        checkAcls(ResourceType.BUCKET, StoreType.S3, ACLType.DELETE, null,
+            s3BucketName, null);
+      }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.BUCKET, StoreType.S3, ACLType.READ,
+          null, s3BucketName, null);
+    }
+    if(isAclEnabled) {
+      checkAcls(ResourceType.VOLUME, StoreType.S3, ACLType.LIST,
+          s3BucketManager.getOzoneVolumeNameForUser(userName), null, null);
+    }
+
+  public static  Logger getLogger() {
+    return LOG;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS8 INS83 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS21 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS60 INS60 INS60 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS21 INS25 MOV41 INS25 INS42 INS41 INS7 INS42 INS8 INS8 INS66 INS65 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS74 INS59 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS38 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS32 INS42 INS8 INS42 INS8 INS42 INS42 INS32 INS21 INS21 INS42 INS43 INS76 INS42 INS32 INS42 INS42 INS42 INS42 INS25 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS53 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS42 INS40 INS40 INS40 INS42 INS42 INS33 INS25 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS43 INS42 INS42 INS42 INS57 INS57 INS42 INS8 INS32 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS32 INS32 INS32 INS32 INS42 INS8 INS32 INS32 INS42 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS8 INS32 INS32 INS42 INS8 INS42 INS8 INS32 INS32 INS42 INS32 INS42 INS33 INS42 INS43 INS43 INS21 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS43 INS27 INS40 INS42 INS40 INS40 INS40 INS42 INS33 INS33 INS42 INS40 INS40 INS40 INS42 INS33 INS33 INS42 INS40 INS40 INS40 INS42 INS33 INS33 INS42 INS40 INS40 INS40 INS42 INS33 INS33 INS21 INS42 INS40 INS40 INS40 INS42 INS33 INS33 INS42 INS40 INS40 INS40 INS42 INS33 INS33 INS21 INS42 INS40 INS40 INS40 INS42 INS33 INS33 INS42 INS40 INS40 INS40 INS42 INS42 INS33 INS42 INS40 INS40 INS40 INS32 INS32 INS32 INS42 INS40 INS40 INS40 INS32 INS32 INS32 INS42 INS40 INS40 INS40 INS32 INS32 INS32 INS42 INS40 INS40 INS40 INS32 INS32 INS32 INS42 INS40 INS40 INS40 INS32 INS32 INS32 INS21 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS40 INS40 INS40 INS32 INS32 INS33 INS21 INS21 INS42 INS40 INS40 INS40 INS33 INS42 INS33 INS42 INS40 INS40 INS40 INS32 INS33 INS33 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS45 INS32 INS45 INS45 INS42 INS45 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS40 INS40 INS40 INS32 INS33 INS33 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS40 INS40 INS40 INS42 INS33 INS33 INS42 INS40 INS40 INS40 INS32 INS32 INS33 INS42 INS40 INS40 INS40 INS32 INS32 INS32 INS42 INS40 INS40 INS40 INS33 INS42 INS33 INS42 INS40 INS40 INS40 INS33 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 DEL8