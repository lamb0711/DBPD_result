Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

-import org.apache.hadoop.yarn.util.resource.Resources;
- * A Schedulable represents an entity that can launch tasks, such as a job
- * or a queue. It provides a common interface so that algorithms such as fair
- * sharing can be applied both within a queue and across queues. There are
- * currently two types of Schedulables: JobSchedulables, which represent a
- * single job, and QueueSchedulables, which allocate among jobs in their queue.
- *
- * Separate sets of Schedulables are used for maps and reduces. Each queue has
- * both a mapSchedulable and a reduceSchedulable, and so does each job.
+ * A Schedulable represents an entity that can be scheduled such as an
+ * application or a queue. It provides a common interface so that algorithms
+ * such as fair sharing can be applied both within a queue and across queues.
- * 1) It can launch tasks through assignTask().
- * 2) It provides information about the job/queue to the scheduler, including:
+ * 1) Assign resources through {@link #assignContainer}.
+ * 2) It provides information about the app/queue to the scheduler, including:
- *    - Number of currently running tasks
-public abstract class Schedulable {
-  /** Fair share assigned to this Schedulable */
-  private Resource fairShare = Resources.createResource(0);
-
+public interface Schedulable {
-  public abstract String getName();
+  public String getName();
-  public abstract Resource getDemand();
+  public Resource getDemand();
-  public abstract Resource getResourceUsage();
+  public Resource getResourceUsage();
-  public abstract Resource getMinShare();
+  public Resource getMinShare();
-  public abstract Resource getMaxShare();
+  public Resource getMaxShare();
-  public abstract ResourceWeights getWeights();
+  public ResourceWeights getWeights();
-  public abstract long getStartTime();
+  public long getStartTime();
-  public abstract Priority getPriority();
+  public Priority getPriority();
-  public abstract void updateDemand();
+  public void updateDemand();
-  public abstract Resource assignContainer(FSSchedulerNode node);
+  public Resource assignContainer(FSSchedulerNode node);
-  public abstract RMContainer preemptContainer();
-
-  /** Assign a fair share to this Schedulable. */
-  public void setFairShare(Resource fairShare) {
-    this.fairShare = fairShare;
-  }
+  public RMContainer preemptContainer();
-  public Resource getFairShare() {
-    return fairShare;
-  }
+  public Resource getFairShare();
-  /** Convenient toString implementation for debugging. */
-  @Override
-  public String toString() {
-    return String.format("[%s, demand=%s, running=%s, share=%s, w=%s]",
-        getName(), getDemand(), getResourceUsage(), fairShare, getWeights());
-  }
+  /** Assign a fair share to this Schedulable. */
+  public void setFairShare(Resource fairShare);

MOV31 UPD66 UPD66 UPD66 UPD66 UPD66 INS65 UPD66 UPD66 INS67 INS42 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL83 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL41 DEL8 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31