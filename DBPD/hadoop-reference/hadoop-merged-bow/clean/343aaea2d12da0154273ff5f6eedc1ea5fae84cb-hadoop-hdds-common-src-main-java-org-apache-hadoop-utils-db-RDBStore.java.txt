HDDS-864. Use strongly typed codec implementations for the tables of the OmMetadataManager. Contributed by Elek Marton.

-import com.google.common.base.Preconditions;
-import org.apache.hadoop.hdds.HddsUtils;
-import org.apache.hadoop.hdfs.DFSUtil;
-import org.apache.hadoop.metrics2.util.MBeans;
-import org.apache.hadoop.utils.RocksDBStoreMBean;
-import org.apache.ratis.thirdparty.com.google.common.annotations.VisibleForTesting;
-import org.rocksdb.ColumnFamilyDescriptor;
-import org.rocksdb.ColumnFamilyHandle;
-import org.rocksdb.DBOptions;
-import org.rocksdb.RocksDB;
-import org.rocksdb.RocksDBException;
-import org.rocksdb.WriteBatch;
-import org.rocksdb.WriteOptions;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
+import org.apache.hadoop.hdds.HddsUtils;
+import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.metrics2.util.MBeans;
+import org.apache.hadoop.utils.RocksDBStoreMBean;
+
+import com.google.common.base.Preconditions;
+import org.apache.ratis.thirdparty.com.google.common.annotations.VisibleForTesting;
+import org.rocksdb.ColumnFamilyDescriptor;
+import org.rocksdb.ColumnFamilyHandle;
+import org.rocksdb.DBOptions;
+import org.rocksdb.RocksDB;
+import org.rocksdb.RocksDBException;
+import org.rocksdb.WriteOptions;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
-  public RDBStore(File dbFile, DBOptions options, Set<TableConfig> families)
+  @VisibleForTesting
+  public RDBStore(File dbFile, DBOptions options,
+                  Set<TableConfig> families) throws IOException {
+    this(dbFile, options, families, new CodecRegistry());
+  }
+
+  public RDBStore(File dbFile, DBOptions options, Set<TableConfig> families,
+                  CodecRegistry registry)
-    codecRegistry = new CodecRegistry();
+    codecRegistry = registry;
-  public void move(byte[] key, Table source, Table dest) throws IOException {
-    RDBTable sourceTable;
-    RDBTable destTable;
-    if (source instanceof RDBTable) {
-      sourceTable = (RDBTable) source;
-    } else {
-      LOG.error("Unexpected Table type. Expected RocksTable Store for Source.");
-      throw new IOException("Unexpected TableStore Type in source. Expected "
-          + "RocksDBTable.");
-    }
+  public <KEY, VALUE> void move(KEY key, Table<KEY, VALUE> source,
+                                Table<KEY, VALUE> dest) throws IOException {
+    try (BatchOperation batchOperation = initBatchOperation()) {
-    if (dest instanceof RDBTable) {
-      destTable = (RDBTable) dest;
-    } else {
-      LOG.error("Unexpected Table type. Expected RocksTable Store for Dest.");
-      throw new IOException("Unexpected TableStore Type in dest. Expected "
-          + "RocksDBTable.");
-    }
-    try (WriteBatch batch = new WriteBatch()) {
-      byte[] value = sourceTable.get(key);
-      batch.put(destTable.getHandle(), key, value);
-      batch.delete(sourceTable.getHandle(), key);
-      db.write(writeOptions, batch);
-    } catch (RocksDBException rockdbException) {
-      LOG.error("Move of key failed. Key:{}", DFSUtil.bytes2String(key));
-      throw toIOException("Unable to move key: " + DFSUtil.bytes2String(key),
-          rockdbException);
+      VALUE value = source.get(key);
+      dest.putWithBatch(batchOperation, key, value);
+      source.deleteWithBatch(batchOperation, key);
+      commitBatchOperation(batchOperation);
-  public void move(byte[] key, byte[] value, Table source,
-      Table dest) throws IOException {
+  public <KEY, VALUE> void move(KEY key, VALUE value, Table<KEY, VALUE> source,
+                                Table<KEY, VALUE> dest) throws IOException {
-  public void move(byte[] sourceKey, byte[] destKey, byte[] value, Table source,
-      Table dest) throws IOException {
-    RDBTable sourceTable;
-    RDBTable destTable;
-    if (source instanceof RDBTable) {
-      sourceTable = (RDBTable) source;
-    } else {
-      LOG.error("Unexpected Table type. Expected RocksTable Store for Source.");
-      throw new IOException("Unexpected TableStore Type in source. Expected "
-          + "RocksDBTable.");
-    }
-
-    if (dest instanceof RDBTable) {
-      destTable = (RDBTable) dest;
-    } else {
-      LOG.error("Unexpected Table type. Expected RocksTable Store for Dest.");
-      throw new IOException("Unexpected TableStore Type in dest. Expected "
-          + "RocksDBTable.");
-    }
-    try (WriteBatch batch = new WriteBatch()) {
-      batch.put(destTable.getHandle(), destKey, value);
-      batch.delete(sourceTable.getHandle(), sourceKey);
-      db.write(writeOptions, batch);
-    } catch (RocksDBException rockdbException) {
-      LOG.error("Move of key failed. Key:{}", DFSUtil.bytes2String(sourceKey));
-      throw toIOException("Unable to move key: " +
-          DFSUtil.bytes2String(sourceKey), rockdbException);
+  public <KEY, VALUE> void move(KEY sourceKey, KEY destKey, VALUE value,
+                                Table<KEY, VALUE> source,
+                                Table<KEY, VALUE> dest) throws IOException {
+    try (BatchOperation batchOperation = initBatchOperation()) {
+      dest.putWithBatch(batchOperation, destKey, value);
+      source.deleteWithBatch(batchOperation, sourceKey);
+      commitBatchOperation(batchOperation);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS31 INS31 INS78 MOV83 UPD42 MOV42 INS44 INS44 INS44 MOV43 INS8 INS44 MOV78 INS83 INS73 INS73 INS39 INS42 INS44 INS44 INS44 MOV43 INS8 INS73 INS73 INS73 INS73 INS44 INS44 INS44 MOV43 INS8 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS17 INS43 INS42 INS42 INS42 INS43 INS42 INS74 INS42 INS74 INS42 MOV54 INS42 INS42 INS43 INS43 INS74 INS74 INS42 INS42 INS43 INS43 INS43 INS42 INS74 INS42 INS74 INS42 MOV54 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS42 INS42 INS42 MOV14 INS42 UPD42 MOV42 MOV43 INS43 INS43 MOV43 INS43 INS43 INS42 INS42 MOV43 INS43 INS43 MOV43 INS43 INS43 INS42 INS42 UPD42 MOV42 MOV43 INS43 INS43 MOV43 INS43 INS43 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD43 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD43 UPD42 UPD42 INS32 INS43 UPD42 UPD42 INS32 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL14 DEL39 DEL85 DEL5 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL53 DEL8 DEL12 DEL39 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44 DEL43 DEL42 DEL59 DEL60 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL43 DEL14 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL53 DEL8 DEL12 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8