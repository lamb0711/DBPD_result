HDFS-8999. Allow a file to be closed with COMMITTED but not yet COMPLETE blocks.

+  private final int numCommittedAllowed;
+      this.numCommittedAllowed = conf.getInt(
+          DFSConfigKeys.DFS_NAMENODE_FILE_CLOSE_NUM_COMMITTED_ALLOWED_KEY,
+          DFSConfigKeys.DFS_NAMENODE_FILE_CLOSE_NUM_COMMITTED_ALLOWED_DEFAULT);
-      return blockManager.checkBlocksProperlyReplicated(src, v
-          .getBlocks());
+      return checkBlocksComplete(src, true, v.getBlocks());
-      // check the penultimate block of this file
-      BlockInfo b = v.getPenultimateBlock();
-      return b == null ||
-          blockManager.checkBlocksProperlyReplicated(
-              src, new BlockInfo[] { b });
+      final BlockInfo[] blocks = v.getBlocks();
+      final int i = blocks.length - numCommittedAllowed - 2;
+      return i < 0 || blocks[i] == null
+          || checkBlocksComplete(src, false, blocks[i]);
+   * Check if the blocks are COMPLETE;
+   * it may allow the last block to be COMMITTED.
+   */
+  private boolean checkBlocksComplete(String src, boolean allowCommittedBlock,
+      BlockInfo... blocks) {
+    final int n = allowCommittedBlock? numCommittedAllowed: 0;
+    for(int i = 0; i < blocks.length; i++) {
+      final short min = blockManager.getMinStorageNum(blocks[i]);
+      final String err = INodeFile.checkBlockComplete(blocks, i, n, min);
+      if (err != null) {
+        final int numNodes = blocks[i].numNodes();
+        LOG.info("BLOCK* " + err + "(numNodes= " + numNodes
+            + (numNodes < min ? " < " : " >= ")
+            + " minimum = " + min + ") in file " + src);
+        return false;
+      }
+    }
+    return true;
+  }
+
+  /**
-    leaseManager.removeLeases(removedUCFiles);
+    for(long i : removedUCFiles) {
+      leaseManager.removeLease(i);
+    }
-          iip.getLatestSnapshotId());
+          iip.getLatestSnapshotId(), false);
-            iip.getLatestSnapshotId());
+            iip.getLatestSnapshotId(), false);
-            iip.getLatestSnapshotId());
+            iip.getLatestSnapshotId(), false);
-  void finalizeINodeFileUnderConstruction(
-      String src, INodeFile pendingFile, int latestSnapshot) throws IOException {
+  void addCommittedBlocksToPending(final INodeFile pendingFile) {
+    final BlockInfo[] blocks = pendingFile.getBlocks();
+    int i = blocks.length - numCommittedAllowed;
+    if (i < 0) {
+      i = 0;
+    }
+    for(; i < blocks.length; i++) {
+      final BlockInfo b = blocks[i];
+      if (b != null && b.getBlockUCState() == BlockUCState.COMMITTED) {
+        // b is COMMITTED but not yet COMPLETE, add it to pending replication.
+        blockManager.addExpectedReplicasToPending(b, pendingFile);
+      }
+    }
+  }
+
+  void finalizeINodeFileUnderConstruction(String src, INodeFile pendingFile,
+      int latestSnapshot, boolean allowCommittedBlock) throws IOException {
-    pendingFile.toCompleteFile(now());
+    pendingFile.toCompleteFile(now(),
+        allowCommittedBlock? numCommittedAllowed: 0,
+        blockManager.getMinReplication());
-    finalizeINodeFileUnderConstruction(src, pendingFile,
-        Snapshot.findLatestSnapshot(pendingFile, Snapshot.CURRENT_STATE_ID));
+    int s = Snapshot.findLatestSnapshot(pendingFile, Snapshot.CURRENT_STATE_ID);
+    finalizeINodeFileUnderConstruction(src, pendingFile, s, false);

INS23 INS31 INS31 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS39 INS42 INS44 INS8 INS44 INS42 INS65 INS43 INS42 INS39 INS42 MOV43 INS42 INS60 INS24 INS41 INS70 INS83 INS43 INS42 INS60 INS60 INS25 INS24 INS39 INS42 INS60 INS66 INS66 INS42 INS83 INS39 INS59 INS58 INS27 INS37 INS8 INS9 INS44 INS42 INS8 INS42 INS83 INS5 INS59 INS39 INS59 INS27 INS8 INS27 INS37 INS8 INS39 INS59 INS21 INS60 INS42 INS16 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS39 INS42 MOV21 INS21 INS43 INS85 INS42 INS32 INS42 INS27 INS42 INS34 INS21 INS42 INS40 INS42 INS60 INS25 INS16 INS32 INS42 MOV32 INS42 INS9 INS7 INS83 MOV5 INS83 INS39 INS59 INS42 INS42 INS34 INS42 INS34 INS83 INS39 INS59 INS83 INS43 INS59 INS27 INS8 INS32 MOV21 INS42 INS42 INS42 INS40 INS42 INS7 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS34 INS42 INS42 INS22 INS32 UPD42 INS9 UPD42 INS42 INS27 INS27 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS41 UPD42 UPD42 INS42 INS42 INS42 INS32 INS9 INS42 INS34 INS42 INS42 INS2 INS27 INS27 INS21 INS52 INS42 INS42 INS42 INS40 INS40 UPD42 INS40 INS42 INS34 INS27 MOV27 UPD42 INS9 INS2 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS39 INS59 INS32 INS9 INS42 INS42 INS9 INS9 INS42 INS42 INS42 INS33 INS32 INS40 INS32 INS42 INS34 INS2 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS45 INS42 INS45 INS42 INS36 INS45 INS42 INS45 INS42 INS42 INS42 INS16 INS27 INS45 INS45 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL4 DEL3 DEL42 DEL42 DEL42 DEL32 DEL21