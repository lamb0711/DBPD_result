HDFS-7824. GetContentSummary API and its namenode implementation for Storage Type Quota/Usage. (Contributed by Xiaoyu Yao)

+import org.apache.hadoop.fs.StorageType;
-  
+  private long typeConsumed[];
+  private long typeQuota[];
-  /** Constructor */
+  public static class Builder{
+    public Builder() {
+      this.quota = -1;
+      this.spaceQuota = -1;
+
+      typeConsumed = new long[StorageType.values().length];
+      typeQuota = new long[StorageType.values().length];
+      for (int i = 0; i < typeQuota.length; i++) {
+        typeQuota[i] = -1;
+      }
+    }
+
+    public Builder length(long length) {
+      this.length = length;
+      return this;
+    }
+
+    public Builder fileCount(long fileCount) {
+      this.fileCount = fileCount;
+      return this;
+    }
+
+    public Builder directoryCount(long directoryCount) {
+      this.directoryCount = directoryCount;
+      return this;
+    }
+
+    public Builder quota(long quota){
+      this.quota = quota;
+      return this;
+    }
+
+    public Builder spaceConsumed(long spaceConsumed) {
+      this.spaceConsumed = spaceConsumed;
+      return this;
+    }
+
+    public Builder spaceQuota(long spaceQuota) {
+      this.spaceQuota = spaceQuota;
+      return this;
+    }
+
+    public Builder typeConsumed(long typeConsumed[]) {
+      for (int i = 0; i < typeConsumed.length; i++) {
+        this.typeConsumed[i] = typeConsumed[i];
+      }
+      return this;
+    }
+
+    public Builder typeQuota(StorageType type, long quota) {
+      this.typeQuota[type.ordinal()] = quota;
+      return this;
+    }
+
+    public Builder typeConsumed(StorageType type, long consumed) {
+      this.typeConsumed[type.ordinal()] = consumed;
+      return this;
+    }
+
+    public Builder typeQuota(long typeQuota[]) {
+      for (int i = 0; i < typeQuota.length; i++) {
+        this.typeQuota[i] = typeQuota[i];
+      }
+      return this;
+    }
+
+    public ContentSummary build() {
+      return new ContentSummary(length, fileCount, directoryCount, quota,
+          spaceConsumed, spaceQuota, typeConsumed, typeQuota);
+    }
+
+    private long length;
+    private long fileCount;
+    private long directoryCount;
+    private long quota;
+    private long spaceConsumed;
+    private long spaceQuota;
+    private long typeConsumed[];
+    private long typeQuota[];
+  }
+
+  /** Constructor deprecated by ContentSummary.Builder*/
+  @Deprecated
-  /** Constructor */
+  /** Constructor, deprecated by ContentSummary.Builder
+   *  This constructor implicitly set spaceConsumed the same as length.
+   *  spaceConsumed and length must be set explicitly with
+   *  ContentSummary.Builder
+   * */
+  @Deprecated
-  /** Constructor */
+  /** Constructor, deprecated by ContentSummary.Builder */
+  @Deprecated
+  /** Constructor for ContentSummary.Builder*/
+  private ContentSummary(
+      long length, long fileCount, long directoryCount, long quota,
+      long spaceConsumed, long spaceQuota, long typeConsumed[],
+      long typeQuota[]) {
+    this.length = length;
+    this.fileCount = fileCount;
+    this.directoryCount = directoryCount;
+    this.quota = quota;
+    this.spaceConsumed = spaceConsumed;
+    this.spaceQuota = spaceQuota;
+    this.typeConsumed = typeConsumed;
+    this.typeQuota = typeQuota;
+  }
+
-  /** Retuns (disk) space consumed */ 
+  /** Retuns storage space consumed */
-  /** Returns (disk) space quota */
+  /** Returns storage space quota */
-  
+
+  /** Returns storage type quota */
+  public long getTypeQuota(StorageType type) {
+    return (typeQuota != null) ? typeQuota[type.ordinal()] : -1;
+  }
+
+  /** Returns storage type consumed*/
+  public long getTypeConsumed(StorageType type) {
+    return (typeConsumed != null) ? typeConsumed[type.ordinal()] : 0;
+  }
+
+  /** Returns true if any storage type quota has been set*/
+  public boolean isTypeQuotaSet() {
+    if (typeQuota == null) {
+      return false;
+    }
+    for (StorageType t : StorageType.getTypesSupportingQuota()) {
+      if (typeQuota[t.ordinal()] > 0) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /** Returns true if any storage type consumption information is available*/
+  public boolean isTypeConsumedAvailable() {
+    if (typeConsumed == null) {
+      return false;
+    }
+    for (StorageType t : StorageType.getTypesSupportingQuota()) {
+      if (typeConsumed[t.ordinal()] > 0) {
+        return true;
+      }
+    }
+    return false;
+  }
+

INS26 INS40 INS23 INS23 INS55 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS83 INS42 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS78 INS78 INS78 INS29 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS42 INS85 INS42 INS85 INS83 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS42 INS42 INS42 INS65 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS85 INS39 INS42 INS85 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS43 INS42 INS41 INS65 INS43 INS42 INS41 INS65 INS25 INS70 INS41 INS65 INS25 INS70 INS41 INS21 INS21 INS21 INS21 INS24 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS85 INS24 INS41 INS42 INS43 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS85 INS24 INS41 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS85 INS42 INS85 UPD66 UPD66 INS66 INS66 INS66 UPD66 INS66 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 UPD66 UPD66 INS66 INS42 INS16 INS66 INS42 INS16 INS66 INS27 INS8 INS44 INS32 INS8 INS9 INS66 INS27 INS8 INS44 INS32 INS8 INS9 INS7 INS7 INS7 INS7 INS58 INS27 INS37 INS8 INS7 INS52 INS7 INS52 INS7 INS52 INS7 INS52 INS7 INS52 INS7 INS52 INS58 INS27 INS37 INS8 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS58 INS27 INS37 INS8 INS52 INS14 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS36 INS2 INS38 INS36 INS2 INS34 INS42 INS33 INS41 INS43 INS42 INS42 INS42 INS25 INS42 INS33 INS41 INS43 INS42 INS42 INS42 INS25 INS22 INS38 INS22 INS38 INS42 INS3 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS2 INS42 INS2 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS27 INS42 INS32 INS34 INS27 INS42 INS32 INS9 INS42 INS27 INS8 INS9 INS42 INS27 INS8 INS52 INS42 INS34 INS52 INS42 INS34 INS5 INS22 INS5 INS22 INS42 INS34 INS7 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS34 INS7 INS22 INS32 INS22 INS32 INS42 INS34 INS7 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS42 INS2 INS34 INS41 INS2 INS34 INS41 INS39 INS85 INS32 INS42 INS39 INS85 INS32 INS42 INS2 INS38 INS2 INS2 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS2 INS2 INS42 INS32 INS9 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42