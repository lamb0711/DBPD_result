MAPREDUCE-5189. Add policies and wiring to respond to preemption requests
from YARN. Contributed by Carlo Curino.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551748 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.mapreduce.v2.app.rm.preemption.AMPreemptionPolicy;
+import org.apache.hadoop.yarn.api.records.PreemptionMessage;
+  private final AMPreemptionPolicy preemptionPolicy;
+
-  public RMContainerAllocator(ClientService clientService, AppContext context) {
+  public RMContainerAllocator(ClientService clientService, AppContext context,
+      AMPreemptionPolicy preemptionPolicy) {
+    this.preemptionPolicy = preemptionPolicy;
+      preemptionPolicy.handleCompletedContainer(event.getAttemptID());
+      // propagate failures to preemption policy to discard checkpoints for
+      // failed tasks
+      preemptionPolicy.handleFailedContainer(event.getAttemptID());
-        //preempt for making space for atleast one map
+        //preempt for making space for at least one map
-        LOG.info("Going to preempt " + toPreempt);
+        LOG.info("Going to preempt " + toPreempt + " due to lack of space for maps");
+
+    // propagate preemption requests
+    final PreemptionMessage preemptReq = response.getPreemptionMessage();
+    if (preemptReq != null) {
+      preemptionPolicy.preempt(
+          new PreemptionContext(assignedRequests), preemptReq);
+    }
+
-      }      
+
+        preemptionPolicy.handleCompletedContainer(attemptID);
+      }
+
+  static class PreemptionContext extends AMPreemptionPolicy.Context {
+    final AssignedRequests reqs;
+
+    PreemptionContext(AssignedRequests reqs) {
+      this.reqs = reqs;
+    }
+    @Override
+    public TaskAttemptId getTaskAttempt(ContainerId container) {
+      return reqs.get(container);
+    }
+
+    @Override
+    public List<Container> getContainers(TaskType t){
+      if(TaskType.REDUCE.equals(t))
+        return new ArrayList<Container>(reqs.reduces.values());
+      if(TaskType.MAP.equals(t))
+        return new ArrayList<Container>(reqs.maps.values());
+      return null;
+    }
+
+  }
+

INS26 INS26 INS40 INS40 INS23 INS55 INS83 INS83 INS43 INS59 INS44 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS42 INS42 INS43 INS42 INS21 INS60 INS25 INS40 INS83 INS43 INS59 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS42 INS7 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS43 INS43 INS42 INS25 INS25 INS41 INS22 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS7 INS42 INS32 INS42 INS42 INS42 INS32 INS41 INS32 INS41 INS33 INS52 INS42 INS21 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS40 INS42 INS42 INS14 INS32 INS21 INS42 INS42 INS14 INS42 INS21 INS52 INS42 INS74 INS32 INS74 INS32 INS42 INS42 INS32 INS32 INS43 INS42 INS32 INS43 INS43 INS40 INS42 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45