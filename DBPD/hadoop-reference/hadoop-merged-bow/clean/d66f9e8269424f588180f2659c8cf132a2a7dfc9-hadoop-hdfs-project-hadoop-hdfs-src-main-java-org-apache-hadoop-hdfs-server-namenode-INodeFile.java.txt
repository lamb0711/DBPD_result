HDFS-4206. Change the fields in INode and its subclasses to private.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1410996 13f79535-47bb-0310-9956-ffa450edef68

-  //Number of bits for Block size
-  static final short BLOCKBITS = 48;
-  //Header mask 64-bit representation
-  //Format: [16 bits for replication][48 bits for PreferredBlockSize]
-  static final long HEADERMASK = 0xffffL << BLOCKBITS;
+  /** Format: [16 bits for replication][48 bits for PreferredBlockSize] */
+  private static class HeaderFormat {
+    /** Number of bits for Block size */
+    static final int BLOCKBITS = 48;
+    /** Header mask 64-bit representation */
+    static final long HEADERMASK = 0xffffL << BLOCKBITS;
+    static final long MAX_BLOCK_SIZE = ~HEADERMASK; 
+    
+    static short getReplication(long header) {
+      return (short) ((header & HEADERMASK) >> BLOCKBITS);
+    }
-  private long header;
+    static long combineReplication(long header, short replication) {
+      if (replication <= 0) {
+         throw new IllegalArgumentException(
+             "Unexpected value for the replication: " + replication);
+      }
+      return ((long)replication << BLOCKBITS) | (header & MAX_BLOCK_SIZE);
+    }
+    
+    static long getPreferredBlockSize(long header) {
+      return header & MAX_BLOCK_SIZE;
+    }
+
+    static long combinePreferredBlockSize(long header, long blockSize) {
+      if (blockSize < 0) {
+         throw new IllegalArgumentException("Block size < 0: " + blockSize);
+      } else if (blockSize > MAX_BLOCK_SIZE) {
+        throw new IllegalArgumentException("Block size = " + blockSize
+            + " > MAX_BLOCK_SIZE = " + MAX_BLOCK_SIZE);
+     }
+      return (header & HEADERMASK) | (blockSize & MAX_BLOCK_SIZE);
+    }
+  }
+
+  private long header = 0L;
-    this.setReplication(replication);
-    this.setPreferredBlockSize(preferredBlockSize);
+    header = HeaderFormat.combineReplication(header, replication);
+    header = HeaderFormat.combinePreferredBlockSize(header, preferredBlockSize);
-    return (short) ((header & HEADERMASK) >> BLOCKBITS);
+    return HeaderFormat.getReplication(header);
-    if(replication <= 0)
-       throw new IllegalArgumentException("Unexpected value for the replication");
-    header = ((long)replication << BLOCKBITS) | (header & ~HEADERMASK);
+    header = HeaderFormat.combineReplication(header, replication);
-    return header & ~HEADERMASK;
-  }
-
-  private void setPreferredBlockSize(long preferredBlkSize) {
-    if((preferredBlkSize < 0) || (preferredBlkSize > ~HEADERMASK ))
-       throw new IllegalArgumentException("Unexpected value for the block size");
-    header = (header & HEADERMASK) | (preferredBlkSize & ~HEADERMASK);
+    return HeaderFormat.getPreferredBlockSize(header);

INS55 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS42 MOV23 MOV23 MOV23 MOV31 MOV31 MOV31 INS31 INS83 INS39 INS59 MOV29 MOV78 INS83 INS39 INS42 INS8 INS39 INS42 INS44 INS8 MOV29 MOV78 INS83 INS39 INS42 INS8 INS65 INS29 UPD39 INS29 UPD83 INS83 UPD83 UPD42 INS44 INS83 UPD39 UPD42 INS44 UPD83 INS44 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 INS44 MOV44 INS8 INS42 INS34 INS41 INS39 INS42 MOV21 INS41 INS66 INS65 INS65 UPD42 MOV38 INS39 INS42 INS39 INS42 INS41 INS39 INS42 INS39 INS42 UPD42 MOV25 INS41 INS7 INS7 INS32 INS32 INS66 INS66 INS8 MOV27 INS27 INS8 INS25 MOV27 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS53 INS42 UPD42 MOV42 MOV34 MOV53 INS27 INS8 INS42 UPD42 MOV42 INS42 MOV42 INS42 UPD42 MOV42 INS42 MOV42 INS42 INS42 INS42 INS42 MOV14 UPD42 MOV42 INS42 INS53 INS43 INS27 INS42 INS27 INS14 UPD42 INS42 INS42 INS45 INS42 INS45 INS42 MOV43 INS27 INS45 INS42 INS45 INS42 DEL45 DEL53 DEL42 DEL7 DEL21 DEL42 DEL38 DEL45 DEL27 DEL36 DEL42 DEL38 DEL27 DEL36 DEL27 DEL42 DEL38 DEL52 DEL32 DEL52 DEL32 DEL8 DEL31