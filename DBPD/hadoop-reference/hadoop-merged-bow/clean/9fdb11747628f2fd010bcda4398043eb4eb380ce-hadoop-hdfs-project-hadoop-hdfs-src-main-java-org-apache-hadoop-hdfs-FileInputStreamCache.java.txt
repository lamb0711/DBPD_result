HDFS-4824. FileInputStreamCache.close leaves dangling reference to FileInputStreamCache.cacheCleaner. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1483641 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.Closeable;
+import java.io.IOException;
+import java.lang.ref.WeakReference;
+import java.util.concurrent.ScheduledFuture;
-  class CacheCleaner implements Runnable {
+  private static class CacheCleaner implements Runnable, Closeable {
+    private WeakReference<FileInputStreamCache> cacheRef;
+    private ScheduledFuture<?> future;
+    
+    CacheCleaner(FileInputStreamCache cache) {
+      this.cacheRef = new WeakReference<FileInputStreamCache>(cache);
+    }
+    
-      synchronized(FileInputStreamCache.this) {
-        if (closed) return;
+      FileInputStreamCache cache = cacheRef.get();
+      if (cache == null) return;
+      synchronized(cache) {
+        if (cache.closed) return;
-        for (Iterator<Entry<Key, Value>> iter = map.entries().iterator();
-              iter.hasNext();
-              iter = map.entries().iterator()) {
+        for (Iterator<Entry<Key, Value>> iter =
+                  cache.map.entries().iterator(); iter.hasNext();
+              iter = cache.map.entries().iterator()) {
-          if (entry.getValue().getTime() + expiryTimeMs >= curTime) {
+          if (entry.getValue().getTime() + cache.expiryTimeMs >= curTime) {
+
+    @Override
+    public void close() throws IOException {
+      if (future != null) {
+        future.cancel(false);
+      }
+    }
+    
+    public void setFuture(ScheduledFuture<?> future) {
+      this.future = future;
+    }
-          cacheCleaner = new CacheCleaner();
-          executor.scheduleAtFixedRate(cacheCleaner, expiryTimeMs, expiryTimeMs, 
-              TimeUnit.MILLISECONDS);
+          cacheCleaner = new CacheCleaner(this);
+          ScheduledFuture<?> future = 
+              executor.scheduleAtFixedRate(cacheCleaner, expiryTimeMs, expiryTimeMs,
+                  TimeUnit.MILLISECONDS);
+          cacheCleaner.setFuture(future);
-    if (cacheCleaner != null) {
-      executor.remove(cacheCleaner);
-    }
+    IOUtils.cleanup(LOG, cacheCleaner);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS83 INS83 INS43 INS23 INS23 INS31 INS31 INS31 INS42 INS83 INS74 INS59 INS83 INS74 INS59 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS8 MOV21 INS43 INS43 INS42 INS43 INS76 INS42 INS43 INS42 INS21 INS60 INS25 INS42 INS42 INS25 INS74 INS42 INS21 INS42 INS42 INS42 INS42 INS7 INS43 INS59 INS27 INS41 INS42 INS27 INS8 INS43 INS76 INS7 UPD42 UPD42 INS42 INS22 INS14 INS42 INS42 INS32 INS42 INS33 INS42 INS33 INS21 INS42 INS22 INS42 INS52 INS42 INS74 INS42 INS42 INS42 INS40 INS32 INS52 INS42 INS43 INS43 INS42 INS42 INS9 INS42 INS42 INS60 INS40 INS74 INS59 INS32 INS40 INS40 INS43 INS76 INS42 MOV32 INS42 INS42 INS42 INS52 INS42 DEL42 DEL52 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL27 DEL8 DEL25