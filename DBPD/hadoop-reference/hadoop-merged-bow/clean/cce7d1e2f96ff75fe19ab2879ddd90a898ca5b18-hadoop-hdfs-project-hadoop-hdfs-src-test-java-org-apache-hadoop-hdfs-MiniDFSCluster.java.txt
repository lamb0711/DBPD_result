Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

-import java.security.PrivilegedExceptionAction;
+import org.apache.hadoop.hdfs.server.datanode.fsdataset.FsVolumeSpi;
+import org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.FsVolumeImpl;
+import org.apache.hadoop.hdfs.server.namenode.EditLogFileOutputStream;
-  // Changing this value may break some tests that assume it is 2.
-  public static final int DIRS_PER_DATANODE = 2;
+  // Changing this default may break some tests that assume it is 2.
+  private static final int DEFAULT_STORAGES_PER_DATANODE = 2;
+  public int getStoragesPerDatanode() {
+    return storagesPerDatanode;
+  }
+
-    private StorageType storageType = StorageType.DEFAULT;
+    private StorageType[][] storageTypes = null;
+    private StorageType[] storageTypes1D = null;
+    private int storagesPerDatanode = DEFAULT_STORAGES_PER_DATANODE;
+    private long [][] storageCapacities = null;
+    private long [] storageCapacities1D = null;
+    private boolean skipFsyncForTesting = true;
-     * Default: StorageType.DEFAULT
+     * Default: DEFAULT_STORAGES_PER_DATANODE
-    public Builder storageType(StorageType type) {
-      this.storageType = type;
+    public Builder storagesPerDatanode(int numStorages) {
+      this.storagesPerDatanode = numStorages;
+      return this;
+    }
+
+    /**
+     * Set the same storage type configuration for each datanode.
+     * If storageTypes is uninitialized or passed null then
+     * StorageType.DEFAULT is used.
+     */
+    public Builder storageTypes(StorageType[] types) {
+      this.storageTypes1D = types;
+      return this;
+    }
+
+    /**
+     * Set custom storage type configuration for each datanode.
+     * If storageTypes is uninitialized or passed null then
+     * StorageType.DEFAULT is used.
+     */
+    public Builder storageTypes(StorageType[][] types) {
+      this.storageTypes = types;
+      return this;
+    }
+
+    /**
+     * Set the same storage capacity configuration for each datanode.
+     * If storageTypes is uninitialized or passed null then
+     * StorageType.DEFAULT is used.
+     */
+    public Builder storageCapacities(long[] capacities) {
+      this.storageCapacities1D = capacities;
+      return this;
+    }
+
+    /**
+     * Set custom storage capacity configuration for each datanode.
+     * If storageCapacities is uninitialized or passed null then
+     * capacity is limited by available disk space.
+     */
+    public Builder storageCapacities(long[][] capacities) {
+      this.storageCapacities = capacities;
+     * Use SimulatedFSDataset and limit the capacity of each DN per
+     * the values passed in val.
+     *
+     * For limiting the capacity of volumes with real storage, see
+     * {@link FsVolumeImpl#setCapacityForTesting}
+
+    /**
+     * Default: true
+     * When true, we skip fsync() calls for speed improvements.
+     */
+    public Builder skipFsyncForTesting(boolean val) {
+      this.skipFsyncForTesting = val;
+      return this;
+    }
-    
+    assert builder.storageTypes == null ||
+           builder.storageTypes.length == builder.numDataNodes;
+    this.storagesPerDatanode = builder.storagesPerDatanode;
+
+    // Duplicate the storageType setting for each DN.
+    if (builder.storageTypes == null && builder.storageTypes1D != null) {
+      assert builder.storageTypes1D.length == storagesPerDatanode;
+      builder.storageTypes = new StorageType[builder.numDataNodes][storagesPerDatanode];
+      for (int i = 0; i < builder.numDataNodes; ++i) {
+        builder.storageTypes[i] = builder.storageTypes1D;
+      }
+    }
+
+    // Duplicate the storageCapacity setting for each DN.
+    if (builder.storageCapacities == null && builder.storageCapacities1D != null) {
+      assert builder.storageCapacities1D.length == storagesPerDatanode;
+      builder.storageCapacities = new long[builder.numDataNodes][storagesPerDatanode];
+
+      for (int i = 0; i < builder.numDataNodes; ++i) {
+        builder.storageCapacities[i] = builder.storageCapacities1D;
+      }
+    }
+
-                       builder.storageType,
+                       builder.storageTypes,
+                       builder.storageCapacities,
-                       builder.dnConfOverlays);
+                       builder.dnConfOverlays,
+                       builder.skipFsyncForTesting);
+  protected final int storagesPerDatanode;
+    storagesPerDatanode = DEFAULT_STORAGES_PER_DATANODE;
-   * and have already set {@link #DFS_NAMENODE_NAME_DIR_KEY} and 
-   * {@link #DFS_DATANODE_DATA_DIR_KEY} in the given conf.
+   * and have already set {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and
+   * {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} in the given conf.
-   *          created and {@link #DFS_NAMENODE_NAME_DIR_KEY} and 
-   *          {@link #DFS_DATANODE_DATA_DIR_KEY} will be set in 
+   *          created and {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and
+   *          {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set in
-   *          created and {@link #DFS_NAMENODE_NAME_DIR_KEY} and 
-   *          {@link #DFS_DATANODE_DATA_DIR_KEY} will be set in 
+   *          created and {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and
+   *          {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set in
-   *          created and {@link #DFS_NAMENODE_NAME_DIR_KEY} and 
-   *          {@link #DFS_DATANODE_DATA_DIR_KEY} will be set in 
+   *          created and {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and
+   *          {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set in
-   *          be created and {@link #DFS_DATANODE_DATA_DIR_KEY} 
+   *          be created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY}
-    initMiniDFSCluster(conf, numDataNodes, StorageType.DEFAULT, format,
-        manageNameDfsDirs, true, manageDataDfsDirs, manageDataDfsDirs, 
-        operation, null, racks, hosts,
-        simulatedCapacities, null, true, false,
-        MiniDFSNNTopology.simpleSingleNN(nameNodePort, 0), true, false, false, null);
+    this.storagesPerDatanode = DEFAULT_STORAGES_PER_DATANODE;
+    initMiniDFSCluster(conf, numDataNodes, null, format,
+                       manageNameDfsDirs, true, manageDataDfsDirs, manageDataDfsDirs,
+                       operation, null, racks, hosts,
+                       null, simulatedCapacities, null, true, false,
+                       MiniDFSNNTopology.simpleSingleNN(nameNodePort, 0),
+                       true, false, false, null, true);
-      int numDataNodes, StorageType storageType, boolean format, boolean manageNameDfsDirs,
+      int numDataNodes, StorageType[][] storageTypes, boolean format, boolean manageNameDfsDirs,
-      String[] hosts, long[] simulatedCapacities, String clusterId,
+      String[] hosts,
+      long[][] storageCapacities, long[] simulatedCapacities, String clusterId,
-      Configuration[] dnConfOverlays)
+      Configuration[] dnConfOverlays,
+      boolean skipFsyncForTesting)
+
+      EditLogFileOutputStream.setShouldSkipFsyncForTesting(skipFsyncForTesting);
-      startDataNodes(conf, numDataNodes, storageType, manageDataDfsDirs,
+      startDataNodes(conf, numDataNodes, storageTypes, manageDataDfsDirs,
-          racks, hosts, simulatedCapacities, setupHostsFile,
+          racks, hosts, storageCapacities, simulatedCapacities, setupHostsFile,
-  String makeDataNodeDirs(int dnIndex, StorageType storageType) throws IOException {
+  String makeDataNodeDirs(int dnIndex, StorageType[] storageTypes) throws IOException {
-    for (int j = 0; j < DIRS_PER_DATANODE; ++j) {
+    assert storageTypes == null || storageTypes.length == storagesPerDatanode;
+    for (int j = 0; j < storagesPerDatanode; ++j) {
-      sb.append((j > 0 ? "," : "") + "[" + storageType + "]" + fileAsURI(dir));
+      sb.append((j > 0 ? "," : "") + "[" +
+          (storageTypes == null ? StorageType.DEFAULT : storageTypes[j]) +
+          "]" + fileAsURI(dir));
-   *          created and {@link #DFS_DATANODE_DATA_DIR_KEY} will be set 
+   *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set
-   *          created and {@link #DFS_DATANODE_DATA_DIR_KEY} will be 
+   *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be
-    startDataNodes(conf, numDataNodes, StorageType.DEFAULT, manageDfsDirs, operation, racks, hosts,
-        simulatedCapacities, setupHostsFile, false, false, null);
+    startDataNodes(conf, numDataNodes, null, manageDfsDirs, operation, racks, hosts,
+        null, simulatedCapacities, setupHostsFile, false, false, null);
-  /**
-   * @see MiniDFSCluster#startDataNodes(Configuration, int, boolean, StartupOption,
-   * String[], String[], long[], boolean, boolean, boolean)
-   */
-    startDataNodes(conf, numDataNodes, StorageType.DEFAULT, manageDfsDirs, operation, racks, hosts,
-        simulatedCapacities, setupHostsFile, checkDataNodeAddrConfig, false, null);
+    startDataNodes(conf, numDataNodes, null, manageDfsDirs, operation, racks, hosts,
+        null, simulatedCapacities, setupHostsFile, checkDataNodeAddrConfig, false, null);
-   *          created and {@link #DFS_DATANODE_DATA_DIR_KEY} will be 
+   *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be
-      StorageType storageType, boolean manageDfsDirs, StartupOption operation,
+      StorageType[][] storageTypes, boolean manageDfsDirs, StartupOption operation,
+      long[][] storageCapacities,
+    assert storageCapacities == null || simulatedCapacities == null;
+    assert storageTypes == null || storageTypes.length == numDataNodes;
+    assert storageCapacities == null || storageCapacities.length == numDataNodes;
+
-    
+    DataNode[] dns = new DataNode[numDataNodes];
-        String dirs = makeDataNodeDirs(i, storageType);
+        String dirs = makeDataNodeDirs(i, storageTypes == null ? null : storageTypes[i]);
+      dns[i - curDatanodesNum] = dn;
+
+    if (storageCapacities != null) {
+      for (int i = curDatanodesNum; i < curDatanodesNum+numDataNodes; ++i) {
+        List<? extends FsVolumeSpi> volumes = dns[i].getFSDataset().getVolumes();
+        assert storageCapacities[i].length == storagesPerDatanode;
+        assert volumes.size() == storagesPerDatanode;
+
+        for (int j = 0; j < volumes.size(); ++j) {
+          FsVolumeImpl volume = (FsVolumeImpl) volumes.get(j);
+          volume.setCapacityForTesting(storageCapacities[i][j]);
+        }
+      }
+    }
-   * Multiple-NameNode version of {@link #injectBlocks(Iterable[])}.
+   * Multiple-NameNode version of injectBlocks.
-    return new File(getFinalizedDir(storageDir, blk.getBlockPoolId()), 
-        blk.getBlockName());
+    return new File(DatanodeUtil.idToBlockDir(getFinalizedDir(storageDir,
+        blk.getBlockPoolId()), blk.getBlockId()), blk.getBlockName());
-    return new File(getFinalizedDir(storageDir, blk.getBlockPoolId()), 
-        blk.getBlockName() + "_" + blk.getGenerationStamp() +
-        Block.METADATA_EXTENSION);
-    
+    return new File(DatanodeUtil.idToBlockDir(getFinalizedDir(storageDir,
+        blk.getBlockPoolId()), blk.getBlockId()), blk.getBlockName() + "_" +
+        blk.getGenerationStamp() + Block.METADATA_EXTENSION);
+  }
+
+  /**
+   * Return all block metadata files in given directory (recursive search)
+   */
+  public static List<File> getAllBlockMetadataFiles(File storageDir) {
+    List<File> results = new ArrayList<File>();
+    File[] files = storageDir.listFiles();
+    if (files == null) {
+      return null;
+    }
+    for (File f : files) {
+      if (f.getName().startsWith("blk_") && f.getName().endsWith(
+          Block.METADATA_EXTENSION)) {
+        results.add(f);
+      } else if (f.isDirectory()) {
+        List<File> subdirResults = getAllBlockMetadataFiles(f);
+        if (subdirResults != null) {
+          results.addAll(subdirResults);
+        }
+      }
+    }
+    return results;

MOV26 INS26 INS26 MOV31 INS40 INS40 UPD40 INS31 INS23 INS31 INS31 UPD83 INS83 INS39 INS42 INS8 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS44 INS44 INS29 MOV29 INS83 INS83 INS39 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 MOV83 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 MOV8 INS44 INS44 INS29 INS83 INS83 INS74 INS42 INS44 INS8 UPD42 INS41 INS5 INS83 INS5 INS59 INS83 INS39 INS59 INS83 INS5 INS59 INS83 INS5 INS59 INS83 INS39 INS59 INS29 INS83 MOV43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 MOV44 INS8 INS43 UPD42 INS44 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS6 INS21 INS25 INS25 INS42 INS21 INS21 INS5 UPD42 INS5 INS42 INS39 INS42 INS5 UPD42 INS6 MOV65 MOV65 MOV65 INS65 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 INS21 INS5 INS42 INS5 UPD42 MOV42 INS6 INS6 INS6 INS60 INS25 INS65 INS43 INS43 INS43 INS42 INS60 INS60 INS25 INS70 INS41 INS42 MOV43 INS85 INS85 UPD42 INS33 INS43 INS85 INS42 INS33 INS42 INS42 INS39 INS85 INS85 INS42 INS33 INS39 INS85 INS42 INS33 INS42 INS9 INS65 INS39 INS42 INS21 MOV41 INS65 INS42 INS5 UPD42 INS21 INS41 INS42 INS5 INS42 INS41 INS65 INS42 MOV5 INS42 INS21 INS41 INS65 INS42 INS5 INS42 INS21 INS41 INS65 INS42 INS39 INS42 INS21 INS41 INS27 INS7 INS27 INS8 INS27 INS8 INS7 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS7 MOV43 INS85 INS85 INS39 INS85 INS85 MOV43 INS85 INS27 INS42 INS66 INS66 INS65 INS66 INS66 UPD66 UPD66 INS32 UPD66 MOV43 INS85 INS85 INS39 INS85 INS85 INS27 INS27 INS27 INS5 INS59 INS27 INS8 UPD66 INS66 INS42 INS42 UPD42 MOV42 INS74 INS59 INS5 INS59 INS27 INS8 INS44 INS42 INS8 INS42 INS42 INS66 INS7 INS66 INS66 INS66 MOV43 INS85 INS7 INS52 INS66 INS66 UPD66 INS43 INS85 INS85 INS52 INS66 INS66 INS66 INS85 INS7 INS52 INS66 INS66 INS66 INS39 INS85 INS85 INS7 INS52 INS66 INS66 INS66 INS65 INS66 INS66 INS7 INS52 INS27 INS27 INS22 INS40 INS27 INS27 INS6 INS21 INS24 INS27 INS27 INS6 INS21 INS24 UPD40 INS40 INS40 INS42 INS42 INS22 INS42 INS33 INS33 INS9 INS21 INS27 INS27 UPD42 INS67 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS9 INS9 INS33 INS33 INS33 INS42 INS27 INS27 INS27 INS27 INS27 INS27 INS43 INS85 INS42 INS3 INS21 INS42 INS33 INS24 INS32 INS43 INS43 INS42 INS14 INS43 MOV85 INS42 INS32 INS42 INS33 INS41 INS43 INS42 INS25 INS22 INS42 INS22 INS42 INS42 UPD42 INS22 INS42 INS22 INS42 INS67 INS22 INS42 INS40 INS33 INS40 INS40 INS52 INS42 INS40 INS33 INS40 INS33 INS27 INS7 INS58 INS27 INS38 INS8 INS40 INS33 INS40 INS33 INS27 INS7 INS58 INS27 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS33 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS40 INS42 INS42 INS33 INS40 INS42 INS42 INS5 INS42 INS7 INS58 INS27 INS38 INS8 INS42 INS42 INS32 INS32 UPD42 UPD42 MOV32 UPD42 MOV42 UPD42 MOV42 INS74 INS42 INS42 INS42 INS33 INS42 INS27 INS8 INS25 INS52 INS42 INS52 INS42 UPD42 INS52 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS40 INS42 INS40 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS40 INS42 INS40 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 UPD42 INS42 INS43 INS85 INS2 INS42 INS39 INS59 INS42 INS27 INS42 INS60 INS6 INS6 INS24 INS42 INS42 INS32 INS42 INS42 UPD42 INS43 INS43 INS32 INS32 INS21 INS32 INS8 INS5 INS40 INS42 INS42 INS34 INS7 INS5 INS40 INS42 INS42 INS34 INS7 INS36 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS27 INS58 INS27 INS38 INS8 INS42 INS42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS45 INS32 INS42 UPD40 MOV40 INS32 UPD42 MOV42 UPD42 MOV42 INS60 INS25 INS43 INS85 INS85 INS2 INS40 INS39 INS85 INS85 INS2 INS40 INS16 INS42 INS42 INS43 INS76 INS42 INS32 INS22 INS42 INS32 INS42 INS39 INS59 INS42 INS32 INS42 INS60 INS21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS74 INS59 INS27 INS8 INS42 INS40 INS42 INS40 INS42 INS27 INS40 INS2 INS16 INS42 INS43 INS32 INS42 INS2 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS21 UPD42 MOV42 INS33 INS42 INS42 INS27 INS33 INS2 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS2 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS43 INS32 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL66 DEL40 DEL40 DEL9 DEL42 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL65 DEL29 DEL31 DEL44 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL69 DEL68 DEL65 DEL66 DEL42 DEL42 DEL43 DEL69 DEL39 DEL69 DEL39 DEL69 DEL43 DEL69 DEL43 DEL85 DEL5 DEL69 DEL43 DEL85 DEL5 DEL69 DEL69 DEL39 DEL69 DEL39 DEL69 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL9 DEL33 DEL32 DEL21 DEL8