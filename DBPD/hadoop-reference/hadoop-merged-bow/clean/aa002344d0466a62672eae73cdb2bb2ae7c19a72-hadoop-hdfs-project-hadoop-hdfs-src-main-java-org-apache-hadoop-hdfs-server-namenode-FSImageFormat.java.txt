HDFS-5428. Under construction files deletion after snapshot+checkpoint+nn restart leads nn safemode. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543329 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoUnderConstruction;
+            // convert the last block to BlockUC
+            if (blocks != null && blocks.length > 0) {
+              BlockInfo lastBlk = blocks[blocks.length - 1]; 
+              blocks[blocks.length - 1] = new BlockInfoUnderConstruction(
+                  lastBlk, replication);
+            }
-      return fileDiffs != null? new INodeFileWithSnapshot(file, fileDiffs)
-          : underConstruction? new INodeFileUnderConstruction(
-              file, clientName, clientMachine, null)
-          : file;
+      if (underConstruction) {
+        INodeFileUnderConstruction fileUC = new INodeFileUnderConstruction(
+            file, clientName, clientMachine, null);
+        return fileDiffs == null ? fileUC :
+          new INodeFileUnderConstructionWithSnapshot(fileUC, fileDiffs);
+      } else {
+        return fileDiffs == null ? file : 
+          new INodeFileWithSnapshot(file, fileDiffs);
+      }
-        final INodesInPath iip = fsDir.getLastINodeInPath(path);
-        INodeFile oldnode = INodeFile.valueOf(iip.getINode(0), path);
+        INodeFile oldnode = null;
+        boolean inSnapshot = false;
+        if (path != null && FSDirectory.isReservedName(path) && 
+            LayoutVersion.supports(Feature.ADD_INODE_ID, getLayoutVersion())) {
+          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in 
+          // snapshot. If we support INode ID in the layout version, we can use
+          // the inode id to find the oldnode.
+          oldnode = namesystem.dir.getInode(cons.getId()).asFile();
+          inSnapshot = true;
+        } else {
+          final INodesInPath iip = fsDir.getLastINodeInPath(path);
+          oldnode = INodeFile.valueOf(iip.getINode(0), path);
+        }
+        
-              ((INodeFileWithSnapshot)oldnode).getDiffs());
+              ((INodeFileWithSnapshot) oldnode).getDiffs());
-        fsDir.replaceINodeFile(path, oldnode, cons);
-        namesystem.leaseManager.addLease(cons.getClientName(), path); 
+        if (!inSnapshot) {
+          fsDir.replaceINodeFile(path, oldnode, cons);
+          namesystem.leaseManager.addLease(cons.getClientName(), path);
+        } else {
+          if (parentRef != null) {
+            // replace oldnode with cons
+            parentRef.setReferredINode(cons);
+          } else {
+            // replace old node in its parent's children list and deleted list
+            oldnode.getParent().replaceChildFileInSnapshot(oldnode, cons);
+            namesystem.dir.addToInodeMap(cons);
+            updateBlocksMap(cons);
+          }
+        }
+    
+    private final Map<Long, INodeFileUnderConstruction> snapshotUCMap = 
+        new HashMap<Long, INodeFileUnderConstruction>();
-        saveImage(fsDir.rootDir, out, true, counter);
+        saveImage(fsDir.rootDir, out, true, false, counter);
-        sourceNamesystem.saveFilesUnderConstruction(out);
+        // TODO: for HDFS-5428, since we cannot break the compatibility of 
+        // fsimage, we store part of the under-construction files that are only
+        // in snapshots in this "under-construction-file" section. As a 
+        // temporary solution, we use "/.reserved/.inodes/<inodeid>" as their 
+        // paths, so that when loading fsimage we do not put them into the lease
+        // map. In the future, we can remove this hack when we can bump the 
+        // layout version.
+        sourceNamesystem.saveFilesUnderConstruction(out, snapshotUCMap);
+        
+     * @param inSnapshot Whether the parent directory or its ancestor is in 
+     *                   the deleted list of some snapshot (caused by rename or 
+     *                   deletion)
-    private int saveChildren(ReadOnlyList<INode> children, DataOutputStream out,
-        Counter counter) throws IOException {
+    private int saveChildren(ReadOnlyList<INode> children,
+        DataOutputStream out, boolean inSnapshot, Counter counter)
+        throws IOException {
+        // TODO: for HDFS-5428, we cannot change the format/content of fsimage
+        // here, thus even if the parent directory is in snapshot, we still
+        // do not handle INodeUC as those stored in deleted list
+        } else if (inSnapshot && child.isFile()
+            && child.asFile().isUnderConstruction()) {
+          this.snapshotUCMap.put(child.getId(),
+              (INodeFileUnderConstruction) child.asFile());
-     * @param snapshot The possible snapshot associated with the current node
+     * @param inSnapshot Whether the current directory is in snapshot
-        boolean toSaveSubtree, Counter counter) throws IOException {
+        boolean toSaveSubtree, boolean inSnapshot, Counter counter)
+        throws IOException {
-      dirNum += saveChildren(children, out, counter);
+      dirNum += saveChildren(children, out, inSnapshot, counter);
-        saveImage(child.asDirectory(), out, toSave, counter);
+        saveImage(child.asDirectory(), out, toSave, inSnapshot, counter);
-          saveImage(subDir, out, toSave, counter);
+          saveImage(subDir, out, toSave, true, counter);

INS26 INS26 INS40 INS40 INS23 INS83 INS83 INS74 INS59 INS44 MOV65 INS44 INS43 INS43 INS43 INS42 INS14 INS65 INS39 INS42 INS39 INS42 INS42 INS42 INS42 INS74 INS42 INS66 INS66 INS66 UPD42 UPD66 INS25 INS60 INS25 INS25 INS43 INS43 INS43 INS25 INS42 INS8 INS8 INS39 INS59 INS27 INS8 INS8 INS38 INS8 INS8 INS42 INS42 INS42 MOV32 MOV8 INS25 INS42 INS60 MOV41 INS41 INS33 INS42 INS9 INS27 INS32 INS21 INS21 MOV60 INS21 INS42 MOV21 MOV21 INS25 INS9 INS42 INS27 INS8 INS42 INS43 INS59 INS16 INS27 INS32 INS42 INS42 INS40 INS32 INS7 INS7 INS7 INS27 INS8 INS8 INS42 INS32 INS32 INS21 INS42 INS42 MOV14 UPD27 INS42 INS14 INS27 INS42 MOV14 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS42 MOV32 INS42 INS33 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS32 INS9 INS43 INS42 INS42 INS42 INS33 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS22 INS42 INS32 INS11 INS25 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS60 INS21 INS42 INS33 INS40 INS34 INS43 INS59 INS7 INS42 INS42 INS2 INS2 INS14 INS42 INS27 INS42 INS27 INS43 INS42 INS42 INS40 INS34 INS40 INS34 INS42 DEL42 DEL42 DEL16 DEL25