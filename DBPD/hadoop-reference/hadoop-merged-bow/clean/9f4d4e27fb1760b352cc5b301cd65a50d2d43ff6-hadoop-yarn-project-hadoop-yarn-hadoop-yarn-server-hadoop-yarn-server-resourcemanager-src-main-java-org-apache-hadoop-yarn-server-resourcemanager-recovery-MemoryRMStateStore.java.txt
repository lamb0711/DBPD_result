YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68

-  public void storeApplicationState(String appId, 
+  public void storeApplicationStateInternal(String appId, 
-    ApplicationState appState = new ApplicationState(
-        appStateData.getSubmitTime(),
-        appStateData.getApplicationSubmissionContext(), appStateData.getUser());
-    if (state.appState.containsKey(appState.getAppId())) {
-      Exception e = new IOException("App: " + appId + " is already stored.");
-      LOG.info("Error storing info for app: " + appId, e);
-      throw e;
-    }
+    ApplicationState appState =
+        new ApplicationState(appStateData.getSubmitTime(),
+          appStateData.getStartTime(),
+          appStateData.getApplicationSubmissionContext(),
+          appStateData.getUser());
-  public synchronized void storeApplicationAttemptState(String attemptIdStr, 
+  public void updateApplicationStateInternal(String appId,
+      ApplicationStateDataPBImpl appStateData) throws Exception {
+    ApplicationState updatedAppState =
+        new ApplicationState(appStateData.getSubmitTime(),
+          appStateData.getStartTime(),
+          appStateData.getApplicationSubmissionContext(),
+          appStateData.getUser(), appStateData.getState(),
+          appStateData.getDiagnostics(), appStateData.getFinishTime());
+    LOG.info("Updating final state " + appStateData.getState() + " for app: "
+        + appId);
+    ApplicationId applicationId = updatedAppState.getAppId();
+    if (state.appState.get(applicationId) != null) {
+      // add the earlier attempts back
+      updatedAppState.attempts
+        .putAll(state.appState.get(applicationId).attempts);
+    }
+    state.appState.put(applicationId, updatedAppState);
+  }
+
+  @Override
+  public synchronized void storeApplicationAttemptStateInternal(String attemptIdStr, 
-          attemptStateData.getMasterContainer(), credentials);
+          attemptStateData.getMasterContainer(), credentials,
+          attemptStateData.getStartTime());
-
-    if (appState.attempts.containsKey(attemptState.getAttemptId())) {
-      Exception e = new IOException("Attempt: " +
-          attemptState.getAttemptId() + " is already stored.");
-      LOG.info("Error storing info for attempt: " +
-          attemptState.getAttemptId(), e);
-      throw e;
-    }
+  public synchronized void updateApplicationAttemptStateInternal(
+      String attemptIdStr, ApplicationAttemptStateDataPBImpl attemptStateData)
+      throws Exception {
+    ApplicationAttemptId attemptId =
+        ConverterUtils.toApplicationAttemptId(attemptIdStr);
+    Credentials credentials = null;
+    if (attemptStateData.getAppAttemptTokens() != null) {
+      DataInputByteBuffer dibb = new DataInputByteBuffer();
+      credentials = new Credentials();
+      dibb.reset(attemptStateData.getAppAttemptTokens());
+      credentials.readTokenStorageStream(dibb);
+    }
+    ApplicationAttemptState updatedAttemptState =
+        new ApplicationAttemptState(attemptId,
+          attemptStateData.getMasterContainer(), credentials,
+          attemptStateData.getStartTime(), attemptStateData.getState(),
+          attemptStateData.getFinalTrackingUrl(),
+          attemptStateData.getDiagnostics(),
+          attemptStateData.getFinalApplicationStatus());
+
+    ApplicationState appState =
+        state.getApplicationState().get(
+          updatedAttemptState.getAttemptId().getApplicationId());
+    if (appState == null) {
+      throw new YarnRuntimeException("Application doesn't exist");
+    }
+    LOG.info("Updating final state " + updatedAttemptState.getState()
+        + " for attempt: " + updatedAttemptState.getAttemptId());
+    appState.attempts.put(updatedAttemptState.getAttemptId(),
+      updatedAttemptState);
+  }
+
+  @Override

INS31 INS31 UPD42 INS78 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 UPD42 INS78 INS83 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS60 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS60 INS25 INS21 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS60 INS60 INS25 INS21 INS21 MOV43 INS59 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS32 MOV43 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 MOV42 INS14 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS33 INS21 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS32 INS33 INS60 INS21 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS27 INS40 INS42 INS32 INS42 MOV43 MOV32 INS32 INS32 INS32 INS43 INS32 INS32 MOV32 MOV32 INS32 INS32 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS32 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS32 INS32 INS43 INS42 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS32 INS14 INS45 INS32 INS45 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS22 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 DEL14 DEL59 DEL60 DEL40 DEL42 DEL32 DEL32 DEL42 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL53 DEL8 DEL25 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL25