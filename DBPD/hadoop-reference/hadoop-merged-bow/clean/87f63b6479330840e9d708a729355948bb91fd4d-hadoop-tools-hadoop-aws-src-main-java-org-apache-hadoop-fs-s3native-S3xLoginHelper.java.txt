HADOOP-14833. Remove s3a user:secret authentication. Contributed by Steve Loughran

-import org.apache.commons.lang3.StringUtils;
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.fs.FileSystem;
-import org.apache.hadoop.fs.Path;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Objects;
+
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Preconditions;
-import java.io.UnsupportedEncodingException;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URLDecoder;
-import java.util.Objects;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.Path;
+ *
+ * The core function of this class was the extraction and decoding of user:secret
+ * information from filesystems URIs. As this is no longer supported,
+ * its role has been reduced to checking for secrets in the URI and rejecting
+ * them where found.
+@InterfaceAudience.Private
+@InterfaceStability.Evolving
-  private static final Logger LOG =
-      LoggerFactory.getLogger(S3xLoginHelper.class);
-      +" This is insecure and may be unsupported in future.";
-
-  public static final String PLUS_WARNING =
-      "Secret key contains a special character that should be URL encoded! " +
-          "Attempting to resolve...";
-
-  public static final String PLUS_UNENCODED = "+";
-  public static final String PLUS_ENCODED = "%2B";
+      +" This authentication mechanism is no longer supported.";
-   * Build the filesystem URI. This can include stripping down of part
-   * of the URI.
+   * Build the filesystem URI.
+    // look for login secrets and fail if they are present.
+    rejectSecretsInURIs(uri);
-      Objects.requireNonNull(uri.getHost(), "null uri host." +
-          " This can be caused by unencoded / in the password string");
+      Objects.requireNonNull(uri.getHost(), "null uri host.");
-   * Extract the login details from a URI, logging a warning if
-   * the URI contains these.
+   * Extract the login details from a URI, raising an exception if
+   * the URI contains them.
-   * @return a login tuple, possibly empty.
+   * @throws IllegalArgumentException if there is a secret in the URI.
-  public static Login extractLoginDetailsWithWarnings(URI name) {
+  public static void rejectSecretsInURIs(URI name) {
-    if (login.hasLogin()) {
-      LOG.warn(LOGIN_WARNING);
-    }
-    return login;
+    Preconditions.checkArgument(!login.hasLogin(), LOGIN_WARNING);
-  public static Login extractLoginDetails(URI name) {
+  @VisibleForTesting
+  static Login extractLoginDetails(URI name) {
-    try {
-      String authority = name.getAuthority();
-      if (authority == null) {
-        return Login.EMPTY;
-      }
-      int loginIndex = authority.indexOf('@');
-      if (loginIndex < 0) {
-        // no login
-        return Login.EMPTY;
-      }
-      String login = authority.substring(0, loginIndex);
-      int loginSplit = login.indexOf(':');
-      if (loginSplit > 0) {
-        String user = login.substring(0, loginSplit);
-        String encodedPassword = login.substring(loginSplit + 1);
-        if (encodedPassword.contains(PLUS_UNENCODED)) {
-          LOG.warn(PLUS_WARNING);
-          encodedPassword = encodedPassword.replaceAll("\\" + PLUS_UNENCODED,
-              PLUS_ENCODED);
-        }
-        String password = URLDecoder.decode(encodedPassword,
-            "UTF-8");
-        return new Login(user, password);
-      } else if (loginSplit == 0) {
-        // there is no user, just a password. In this case, there's no login
-        return Login.EMPTY;
-      } else {
-        return new Login(login, "");
-      }
-    } catch (UnsupportedEncodingException e) {
-      // this should never happen; translate it if it does.
-      throw new RuntimeException(e);
+    String authority = name.getAuthority();
+    if (authority == null) {
+      return Login.EMPTY;
+    }
+    int loginIndex = authority.indexOf('@');
+    if (loginIndex < 0) {
+      // no login
+      return Login.EMPTY;
+    }
+    String login = authority.substring(0, loginIndex);
+    int loginSplit = login.indexOf(':');
+    if (loginSplit > 0) {
+      String user = login.substring(0, loginSplit);
+      String encodedPassword = login.substring(loginSplit + 1);
+      return new Login(user, encodedPassword.isEmpty()? "": "password removed");
+    } else if (loginSplit == 0) {
+      // there is no user, just a password. In this case, there's no login
+      return Login.EMPTY;
+    } else {
+      // loginSplit < 0: there is no ":".
+      // return a login with a null password
+      return new Login(login, "");
-            null,
+            uri.getUserInfo(),
-     * @return true if the username is defined (not null, not empty).
+     * @return true if the instance contains login information.
-      return StringUtils.isNotEmpty(user);
+      return StringUtils.isNotEmpty(password) || StringUtils.isNotEmpty(user);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 UPD40 UPD40 INS40 INS40 INS78 INS78 INS40 INS40 INS39 UPD42 INS78 MOV8 INS66 INS66 INS66 INS66 INS21 UPD65 MOV21 INS42 MOV25 UPD45 UPD66 INS32 UPD66 UPD66 INS42 UPD66 INS42 INS42 UPD42 UPD42 INS38 INS41 UPD66 INS27 MOV32 INS14 INS32 MOV32 INS45 MOV43 INS42 INS16 INS42 INS42 INS42 INS32 INS45 INS45 MOV42 UPD42 MOV42 INS32 INS42 INS42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL45 DEL27 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL45 DEL45 DEL27 DEL42 DEL43 DEL8 DEL25 DEL42 DEL41 DEL83 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL14 DEL41 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL33