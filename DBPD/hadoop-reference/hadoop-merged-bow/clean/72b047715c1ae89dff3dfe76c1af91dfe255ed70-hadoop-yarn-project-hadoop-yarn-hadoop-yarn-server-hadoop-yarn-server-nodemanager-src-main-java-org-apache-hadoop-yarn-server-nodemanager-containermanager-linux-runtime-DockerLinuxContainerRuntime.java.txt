YARN-4595. Add support for configurable read-only mounts when launching Docker containers. Contributed by Billie Rinaldi.

+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.Map.Entry;
+  @InterfaceAudience.Private
+  public static final String ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS =
+      "YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS";
+  @VisibleForTesting
+  protected String validateMount(String mount,
+      Map<Path, List<String>> localizedResources)
+      throws ContainerExecutionException {
+    for (Entry<Path, List<String>> resource : localizedResources.entrySet()) {
+      if (resource.getValue().contains(mount)) {
+        java.nio.file.Path path = Paths.get(resource.getKey().toString());
+        if (!path.isAbsolute()) {
+          throw new ContainerExecutionException("Mount must be absolute: " +
+              mount);
+        }
+        if (Files.isSymbolicLink(path)) {
+          throw new ContainerExecutionException("Mount cannot be a symlink: " +
+              mount);
+        }
+        return path.toString();
+      }
+    }
+    throw new ContainerExecutionException("Mount must be a localized " +
+        "resource: " + mount);
+  }
+    @SuppressWarnings("unchecked")
+    Map<Path, List<String>> localizedResources = ctx.getExecutionAttribute(
+        LOCALIZED_RESOURCES);
+    if (environment.containsKey(ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS)) {
+      String mounts = environment.get(
+          ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS);
+      if (!mounts.isEmpty()) {
+        for (String mount : StringUtils.split(mounts)) {
+          String[] dir = StringUtils.split(mount, ':');
+          if (dir.length != 2) {
+            throw new ContainerExecutionException("Invalid mount : " +
+                mount);
+          }
+          String src = validateMount(dir[0], localizedResources);
+          String dst = dir[1];
+          runCommand.addMountLocation(src, dst + ":ro");
+        }
+      }
+    }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS40 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS74 INS42 INS42 INS70 INS53 INS60 INS25 INS42 INS43 INS43 INS74 INS44 INS32 INS8 INS14 INS79 INS74 INS59 INS32 INS8 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS25 INS43 INS27 INS42 INS45 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS43 INS43 INS74 INS32 INS8 INS42 INS45 INS45 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS42 INS42 INS43 INS43 INS32 INS42 INS42 INS60 INS25 INS25 INS41 INS42 INS42 INS42 INS42 INS32 INS32 INS70 INS42 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS44 INS32 INS8 INS40 INS42 INS32 INS32 INS53 INS42 INS42 INS42 INS53 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS14 INS42 INS5 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS43 INS27 INS43 INS27 INS43 INS85 INS42 INS32 INS40 INS34 INS53 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS13 INS14 INS42 INS2 INS42 INS42 INS34 INS42 INS45 INS43 INS27 INS42 INS34 INS42 INS45 INS42