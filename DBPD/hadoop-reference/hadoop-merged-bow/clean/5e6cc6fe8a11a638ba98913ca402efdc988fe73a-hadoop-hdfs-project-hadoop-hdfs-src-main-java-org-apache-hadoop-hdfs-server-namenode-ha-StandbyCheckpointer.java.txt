HDFS-12979. [SBN read] StandbyNode should upload FsImage to ObserverNode after checkpointing. Contributed by Chen Liang.

+import com.google.common.collect.Lists;
+import java.util.HashMap;
+import java.util.Map;
-import java.util.concurrent.atomic.AtomicInteger;
-  private long lastUploadTime;
-  private boolean isPrimaryCheckPointer = true;
+
+  // A map from NN url to the most recent image upload time.
+  private final HashMap<String, CheckpointReceiverEntry> checkpointReceivers;
-
+    this.checkpointReceivers = new HashMap<>();
+    for (URL address : activeNNAddresses) {
+      this.checkpointReceivers.put(address.toString(),
+          new CheckpointReceiverEntry());
+    }
+  }
+
+  private static final class CheckpointReceiverEntry {
+    private long lastUploadTime;
+    private boolean isPrimary;
+
+    CheckpointReceiverEntry() {
+      this.lastUploadTime = 0L;
+      this.isPrimary = true;
+    }
+
+    void setLastUploadTime(long lastUploadTime) {
+      this.lastUploadTime = lastUploadTime;
+    }
+
+    void setIsPrimary(boolean isPrimaryFor) {
+      this.isPrimary = isPrimaryFor;
+    }
+
+    long getLastUploadTime() {
+      return lastUploadTime;
+    }
+
+    boolean isPrimary() {
+      return isPrimary;
+    }
-  private void doCheckpoint(boolean sendCheckpoint) throws InterruptedException, IOException {
+  private void doCheckpoint() throws InterruptedException, IOException {
-    //early exit if we shouldn't actually send the checkpoint to the ANN
-    if(!sendCheckpoint){
-      return;
-    }
-
-    List<Future<TransferFsImage.TransferResult>> uploads =
-        new ArrayList<Future<TransferFsImage.TransferResult>>();
+    HashMap<String, Future<TransferFsImage.TransferResult>> uploads =
+        new HashMap<>();
-      Future<TransferFsImage.TransferResult> upload =
-          executor.submit(new Callable<TransferFsImage.TransferResult>() {
-            @Override
-            public TransferFsImage.TransferResult call()
-                throws IOException, InterruptedException {
-              CheckpointFaultInjector.getInstance().duringUploadInProgess();
-              return TransferFsImage.uploadImageFromStorage(activeNNAddress, conf, namesystem
-                  .getFSImage().getStorage(), imageType, txid, canceler);
-            }
-          });
-      uploads.add(upload);
+      // Upload image if at least 1 of 2 following conditions met:
+      // 1. has been quiet for long enough, try to contact the node.
+      // 2. this standby IS the primary checkpointer of target NN.
+      String addressString = activeNNAddress.toString();
+      assert checkpointReceivers.containsKey(addressString);
+      CheckpointReceiverEntry receiverEntry =
+          checkpointReceivers.get(addressString);
+      long secsSinceLastUpload =
+          TimeUnit.MILLISECONDS.toSeconds(
+              monotonicNow() - receiverEntry.getLastUploadTime());
+      boolean shouldUpload = receiverEntry.isPrimary() ||
+          secsSinceLastUpload >= checkpointConf.getQuietPeriod();
+      if (shouldUpload) {
+        Future<TransferFsImage.TransferResult> upload =
+            executor.submit(new Callable<TransferFsImage.TransferResult>() {
+              @Override
+              public TransferFsImage.TransferResult call()
+                  throws IOException, InterruptedException {
+                CheckpointFaultInjector.getInstance().duringUploadInProgess();
+                return TransferFsImage.uploadImageFromStorage(activeNNAddress,
+                    conf, namesystem.getFSImage().getStorage(), imageType, txid,
+                    canceler);
+              }
+            });
+        uploads.put(addressString, upload);
+      }
-    IOException ioe= null;
-    int i = 0;
-    boolean success = false;
-    for (; i < uploads.size(); i++) {
-      Future<TransferFsImage.TransferResult> upload = uploads.get(i);
+    List<IOException> ioes = Lists.newArrayList();
+    for (Map.Entry<String, Future<TransferFsImage.TransferResult>> entry :
+        uploads.entrySet()) {
+      String url = entry.getKey();
+      Future<TransferFsImage.TransferResult> upload = entry.getValue();
-        // TODO should there be some smarts here about retries nodes that are not the active NN?
+        // TODO should there be some smarts here about retries nodes that
+        //  are not the active NN?
+        CheckpointReceiverEntry receiverEntry = checkpointReceivers.get(url);
-          success = true;
-          //avoid getting the rest of the results - we don't care since we had a successful upload
-          break;
+          receiverEntry.setLastUploadTime(monotonicNow());
+          receiverEntry.setIsPrimary(true);
+        } else {
+          receiverEntry.setIsPrimary(false);
-
-        ioe = new IOException("Exception during image upload", e);
-        break;
+        // Even if exception happens, still proceeds to next NN url.
+        // so that fail to upload to previous NN does not cause the
+        // remaining NN not getting the fsImage.
+        ioes.add(new IOException("Exception during image upload", e));
-    if (ie == null && ioe == null) {
-      //Update only when response from remote about success or
-      lastUploadTime = monotonicNow();
-      // we are primary if we successfully updated the ANN
-      this.isPrimaryCheckPointer = success;
-    }
-    if (ie != null || ioe != null) {
+    if (ie != null) {
-      for (; i < uploads.size(); i++) {
-        Future<TransferFsImage.TransferResult> upload = uploads.get(i);
+      for (Map.Entry<String, Future<TransferFsImage.TransferResult>> entry :
+          uploads.entrySet()) {
+        Future<TransferFsImage.TransferResult> upload = entry.getValue();
-      if (ie != null) {
-        throw ie;
-      } else if (ioe != null) {
-        throw ioe;
-      }
+      throw ie;
+    }
+
+    if (!ioes.isEmpty()) {
+      throw MultipleIOException.createIOException(ioes);
-      lastUploadTime = monotonicNow();
-            final long secsSinceLastUpload = (now - lastUploadTime) / 1000;
-            boolean sendRequest = isPrimaryCheckPointer
-                || secsSinceLastUpload >= checkpointConf.getQuietPeriod();
-            doCheckpoint(sendRequest);
+            doCheckpoint();

MOV26 INS26 INS26 INS40 INS40 UPD40 INS23 INS55 MOV83 INS83 INS74 INS59 INS83 INS83 INS83 INS42 MOV23 INS23 INS31 INS31 INS31 INS31 INS31 INS43 INS43 INS43 INS42 INS21 INS70 INS83 MOV39 INS59 INS42 INS8 INS39 INS42 INS44 INS8 INS39 INS42 INS44 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS60 INS70 INS25 INS25 INS42 INS42 INS42 INS7 INS44 INS42 INS8 UPD42 MOV42 INS21 INS21 INS39 INS42 INS21 INS39 INS42 INS21 INS41 INS41 UPD74 MOV74 INS8 INS74 INS59 INS44 INS32 MOV8 MOV27 INS8 INS38 MOV8 INS22 INS14 INS43 INS42 INS21 INS7 INS7 INS7 INS7 INS42 INS42 UPD43 INS43 INS60 INS6 INS60 INS60 INS60 INS25 MOV43 MOV43 UPD42 MOV42 INS32 UPD74 MOV74 INS42 MOV42 UPD42 MOV42 INS60 INS60 INS70 MOV21 MOV21 MOV53 INS32 INS52 INS42 INS74 INS42 INS32 INS22 INS34 INS22 INS9 INS22 INS42 INS22 INS42 UPD42 INS42 INS74 INS43 INS59 INS32 INS43 INS59 INS39 INS59 INS39 INS59 INS42 MOV8 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS43 INS59 MOV74 INS59 INS44 INS32 INS8 INS42 INS42 INS32 INS43 INS22 INS42 INS32 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS40 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS60 INS74 INS42 MOV42 UPD42 MOV42 MOV60 MOV21 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS32 MOV27 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS59 INS8 INS43 INS43 INS74 INS42 MOV32 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS21 INS21 INS32 INS40 INS42 MOV43 MOV43 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 MOV14 UPD42 UPD42 INS42 INS42 MOV32 INS42 INS42 INS9 INS42 INS42 INS9 DEL9 DEL59 DEL23 DEL39 DEL42 DEL44 DEL42 DEL38 DEL41 DEL8 DEL25 DEL42 DEL9 DEL7 DEL10 DEL42 DEL7 DEL10 DEL42 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL24 DEL8 DEL42 DEL33 DEL27 DEL25 DEL25 DEL8 DEL25 DEL42 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL59 DEL60 DEL39 DEL42 DEL42 DEL27 DEL59 DEL60 DEL42