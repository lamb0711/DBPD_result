YARN-5587. Add support for resource profiles. (vvasudev via asuresh)

+import org.apache.hadoop.yarn.api.records.ProfileCapability;
+
+  protected Map<String, Resource> resourceProfilesMap;
-    
+
-        String resourceName, Resource capability, boolean relaxLocality) {
+        String resourceName, Resource capability, boolean relaxLocality,
+        String resourceProfile) {
+      ProfileCapability profileCapability = ProfileCapability
+          .newInstance(resourceProfile, capability);
-          .allocationRequestId(allocationRequestId)
-          .relaxLocality(relaxLocality).build();
+          .allocationRequestId(allocationRequestId).relaxLocality(relaxLocality)
+          .profileCapability(profileCapability).build();
-   * Class compares Resource by memory then cpu in reverse order
+   * Class compares Resource by memory, then cpu and then the remaining resource
+   * types in reverse order.
-  static class ResourceReverseMemoryThenCpuComparator implements
-      Comparator<Resource>, Serializable {
-    static final long serialVersionUID = 12345L;
-    @Override
-    public int compare(Resource arg0, Resource arg1) {
-      long mem0 = arg0.getMemorySize();
-      long mem1 = arg1.getMemorySize();
-      long cpu0 = arg0.getVirtualCores();
-      long cpu1 = arg1.getVirtualCores();
-      if(mem0 == mem1) {
-        if(cpu0 == cpu1) {
-          return 0;
-        }
-        if(cpu0 < cpu1) {
-          return 1;
-        }
-        return -1;
-      }
-      if(mem0 < mem1) { 
-        return 1;
-      }
-      return -1;
-    }    
+  static class ProfileCapabilityComparator<T extends ProfileCapability>
+      implements Comparator<T> {
+
+    HashMap<String, Resource> resourceProfilesMap;
+
+    public ProfileCapabilityComparator(
+        HashMap<String, Resource> resourceProfileMap) {
+      this.resourceProfilesMap = resourceProfileMap;
+    }
+
+    public int compare(T arg0, T arg1) {
+      Resource resource0 =
+          ProfileCapability.toResource(arg0, resourceProfilesMap);
+      Resource resource1 =
+          ProfileCapability.toResource(arg1, resourceProfilesMap);
+      return resource1.compareTo(resource0);
+    }
-  static boolean canFit(Resource arg0, Resource arg1) {
-    long mem0 = arg0.getMemorySize();
-    long mem1 = arg1.getMemorySize();
-    long cpu0 = arg0.getVirtualCores();
-    long cpu1 = arg1.getVirtualCores();
-    
-    return (mem0 <= mem1 && cpu0 <= cpu1);
+  boolean canFit(ProfileCapability arg0, ProfileCapability arg1) {
+    Resource resource0 =
+        ProfileCapability.toResource(arg0, resourceProfilesMap);
+    Resource resource1 =
+        ProfileCapability.toResource(arg1, resourceProfilesMap);
+    return Resources.fitsIn(resource0, resource1);
+
+  @SuppressWarnings("unchecked")
+      this.resourceProfilesMap = response.getResourceProfiles();
-      ResourceRequest rr = ResourceRequest.newBuilder()
-          .priority(r.getPriority()).resourceName(r.getResourceName())
-          .capability(r.getCapability()).numContainers(r.getNumContainers())
-          .relaxLocality(r.getRelaxLocality())
-          .nodeLabelExpression(r.getNodeLabelExpression())
-          .executionTypeRequest(r.getExecutionTypeRequest())
-          .allocationRequestId(r.getAllocationRequestId()).build();
+      ResourceRequest rr =
+          ResourceRequest.newBuilder().priority(r.getPriority())
+              .resourceName(r.getResourceName()).capability(r.getCapability())
+              .numContainers(r.getNumContainers())
+              .relaxLocality(r.getRelaxLocality())
+              .nodeLabelExpression(r.getNodeLabelExpression())
+              .executionTypeRequest(r.getExecutionTypeRequest())
+              .allocationRequestId(r.getAllocationRequestId())
+              .profileCapability(r.getProfileCapability()).build();
+    ProfileCapability profileCapability = ProfileCapability
+        .newInstance(req.getResourceProfile(), req.getCapability());
+    checkResourceProfile(req.getResourceProfile());
+
-            req.getExecutionTypeRequest(), req.getCapability(), req, true,
+            req.getExecutionTypeRequest(), profileCapability, req, true,
-          req.getCapability(), req, true, req.getNodeLabelExpression());
+          profileCapability, req, true, req.getNodeLabelExpression());
-          req.getCapability(), req, req.getRelaxLocality(),
+          profileCapability, req, req.getRelaxLocality(),
-        req.getExecutionTypeRequest(), req.getCapability(), req,
+        req.getExecutionTypeRequest(), profileCapability, req,
+    ProfileCapability profileCapability = ProfileCapability
+        .newInstance(req.getResourceProfile(), req.getCapability());
-            req.getExecutionTypeRequest(), req.getCapability(), req);
+            req.getExecutionTypeRequest(), profileCapability, req);
-          req.getExecutionTypeRequest(), req.getCapability(), req);
+          req.getExecutionTypeRequest(), profileCapability, req);
-        req.getExecutionTypeRequest(), req.getCapability(), req);
+        req.getExecutionTypeRequest(), profileCapability, req);
+    ProfileCapability profileCapability =
+        ProfileCapability.newInstance(capability);
+    return getMatchingRequests(priority, resourceName, executionType,
+        profileCapability);
+  }
+
+  @Override
+  @SuppressWarnings("unchecked")
+  public synchronized List<? extends Collection<T>> getMatchingRequests(
+      Priority priority, String resourceName, ExecutionType executionType,
+      ProfileCapability capability) {
-      List<ResourceRequestInfo<T>> matchingRequests =
-          remoteRequestsTable.getMatchingRequests(priority, resourceName,
-              executionType, capability);
+      List<ResourceRequestInfo<T>> matchingRequests = remoteRequestsTable
+          .getMatchingRequests(priority, resourceName, executionType,
+              capability);
-          if (canFit(resReqInfo.remoteRequest.getCapability(), capability) &&
-              !resReqInfo.containerRequests.isEmpty()) {
+          if (canFit(resReqInfo.remoteRequest.getProfileCapability(),
+              capability) && !resReqInfo.containerRequests.isEmpty()) {
-    return list;          
+    return list;
+
+  private void checkResourceProfile(String profile) {
+    if (resourceProfilesMap != null && !resourceProfilesMap.isEmpty()
+        && !resourceProfilesMap.containsKey(profile)) {
+      throw new InvalidContainerRequestException(
+          "Invalid profile name, valid profile names are " + resourceProfilesMap
+              .keySet());
+    }
+  }
-      ExecutionTypeRequest execTypeReq, Resource capability, T req,
+      ExecutionTypeRequest execTypeReq, ProfileCapability capability, T req,
+      if (this.resourceProfilesMap instanceof HashMap) {
+        remoteRequestsTable.setResourceComparator(
+            new ProfileCapabilityComparator((HashMap) resourceProfilesMap));
+      }
+      LOG.debug("Adding request to ask " + resourceRequestInfo.remoteRequest);
-      ExecutionTypeRequest execTypeReq, Resource capability, T req) {
+      ExecutionTypeRequest execTypeReq, ProfileCapability capability, T req) {
-      // previously then sending 0 ought to be a no-op on RM
+      // previously then sending 0 aught to be a no-op on RM

INS26 INS40 INS23 INS55 INS31 INS31 INS31 INS83 INS74 INS59 MOV29 MOV83 UPD42 MOV42 INS73 UPD74 MOV74 MOV23 INS31 INS31 INS39 INS42 INS44 INS44 INS8 INS79 MOV78 INS79 INS83 INS83 INS74 UPD42 MOV42 MOV44 MOV44 INS44 MOV44 INS8 INS44 INS83 INS39 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS44 INS42 INS43 INS43 INS74 MOV83 INS42 INS44 INS8 INS83 MOV39 MOV42 MOV44 MOV44 INS8 INS43 INS42 INS43 INS42 INS60 MOV60 INS41 INS42 INS45 INS60 INS21 INS60 MOV21 INS42 INS45 INS43 INS76 INS43 INS42 INS43 INS42 INS43 INS42 MOV60 INS41 INS43 INS42 INS43 INS42 INS25 UPD43 UPD43 INS42 INS42 INS42 INS43 INS42 INS60 UPD66 INS66 UPD42 MOV42 INS42 INS43 INS43 MOV43 UPD42 INS74 INS42 INS21 INS43 INS43 MOV60 MOV60 INS41 INS42 INS42 MOV43 MOV59 MOV43 INS32 INS43 INS59 INS32 MOV44 MOV44 INS43 INS59 MOV42 INS42 INS74 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS27 INS8 UPD42 UPD42 INS42 INS43 INS59 INS42 INS42 INS43 INS43 INS43 INS7 INS42 INS42 MOV43 MOV43 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS42 MOV32 MOV32 INS42 INS42 INS32 UPD42 INS40 UPD42 INS43 INS43 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD27 MOV27 INS38 INS53 INS25 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS22 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS7 INS42 INS42 INS32 MOV32 INS42 INS42 INS42 INS42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV32 INS42 INS42 UPD42 UPD42 INS42 INS27 INS38 INS32 INS14 INS62 INS8 INS32 INS42 INS42 INS42 INS42 MOV32 INS42 INS52 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS22 INS32 INS32 INS42 INS42 INS21 MOV32 MOV32 UPD42 MOV42 MOV32 MOV32 MOV32 UPD42 MOV42 MOV32 MOV32 UPD42 UPD42 MOV42 UPD42 MOV42 INS33 INS32 INS42 INS42 INS42 INS43 INS27 INS22 INS43 INS21 INS42 INS42 INS27 UPD42 INS42 INS52 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS52 INS42 INS42 INS32 INS45 INS40 INS42 INS32 INS42 MOV32 INS42 MOV32 INS42 INS42 INS9 MOV32 MOV32 MOV32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 INS42 MOV42 MOV42 MOV42 INS43 INS11 INS42 INS43 INS42 INS42 UPD42 DEL83 DEL83 DEL39 DEL34 DEL39 DEL39 DEL39 DEL43 DEL39 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL34 DEL41 DEL8 DEL25 DEL42 DEL42 DEL27 DEL34 DEL41 DEL8 DEL25 DEL34 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL27 DEL34 DEL41 DEL8 DEL25 DEL34 DEL38 DEL41 DEL8 DEL31 DEL55 DEL83 DEL39 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL27 DEL36 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL9 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL39 DEL42