YARN-8699. Add Yarnclient#yarnclusterMetrics API implementation in router. Contributed by Bibin A Chundatt.

+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import java.lang.reflect.Method;
+import java.util.TreeMap;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+  private ThreadPoolExecutor executorService;
+
+    int numThreads = getConf().getInt(
+        YarnConfiguration.ROUTER_USER_CLIENT_THREADS_SIZE,
+        YarnConfiguration.DEFAULT_ROUTER_USER_CLIENT_THREADS_SIZE);
+    ThreadFactory threadFactory = new ThreadFactoryBuilder()
+        .setNameFormat("RPC Router Client-" + userName + "-%d ").build();
+
+    BlockingQueue workQueue = new LinkedBlockingQueue<>();
+    this.executorService = new ThreadPoolExecutor(numThreads, numThreads,
+        0L, TimeUnit.MILLISECONDS, workQueue, threadFactory);
+
-    throw new NotImplementedException("Code is not implemented");
+    Map<SubClusterId, SubClusterInfo> subclusters =
+        federationFacade.getSubClusters(true);
+    ClientMethod remoteMethod = new ClientMethod("getClusterMetrics",
+        new Class[] {GetClusterMetricsRequest.class}, new Object[] {request});
+    ArrayList<SubClusterId> clusterList = new ArrayList<>(subclusters.keySet());
+    Map<SubClusterId, GetClusterMetricsResponse> clusterMetrics =
+        invokeConcurrent(clusterList, remoteMethod,
+            GetClusterMetricsResponse.class);
+    return RouterYarnClientUtils.merge(clusterMetrics.values());
+  }
+
+  <R> Map<SubClusterId, R> invokeConcurrent(ArrayList<SubClusterId> clusterIds,
+      ClientMethod request, Class<R> clazz) throws YarnException, IOException {
+    List<Callable<Object>> callables = new ArrayList<>();
+    List<Future<Object>> futures = new ArrayList<>();
+    Map<SubClusterId, IOException> exceptions = new TreeMap<>();
+    for (SubClusterId subClusterId : clusterIds) {
+      callables.add(new Callable<Object>() {
+        @Override
+        public Object call() throws Exception {
+          ApplicationClientProtocol protocol =
+              getClientRMProxyForSubCluster(subClusterId);
+          Method method = ApplicationClientProtocol.class
+              .getDeclaredMethod(request.getMethodName(), request.getTypes());
+          return method.invoke(protocol, request.getParams());
+        }
+      });
+    }
+    Map<SubClusterId, R> results = new TreeMap<>();
+    try {
+      futures.addAll(executorService.invokeAll(callables));
+      for (int i = 0; i < futures.size(); i++) {
+        SubClusterId subClusterId = clusterIds.get(i);
+        try {
+          Future<Object> future = futures.get(i);
+          Object result = future.get();
+          results.put(subClusterId, clazz.cast(result));
+        } catch (ExecutionException ex) {
+          Throwable cause = ex.getCause();
+          LOG.debug("Cannot execute {} on {}: {}", request.getMethodName(),
+              subClusterId.getId(), cause.getMessage());
+          IOException ioe;
+          if (cause instanceof IOException) {
+            ioe = (IOException) cause;
+          } else if (cause instanceof YarnException) {
+            throw (YarnException) cause;
+          } else {
+            ioe = new IOException(
+                "Unhandled exception while calling " + request.getMethodName()
+                    + ": " + cause.getMessage(), cause);
+          }
+          // Store the exceptions
+          exceptions.put(subClusterId, ioe);
+        }
+      }
+      if (results.isEmpty()) {
+        SubClusterId subClusterId = clusterIds.get(0);
+        IOException ioe = exceptions.get(subClusterId);
+        if (ioe != null) {
+          throw ioe;
+        }
+      }
+    } catch (InterruptedException e) {
+      throw new YarnException(e);
+    }
+    return results;
+
+  @Override
+  public void shutdown() {
+    executorService.shutdown();
+    super.shutdown();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS43 INS59 MOV78 INS83 MOV43 INS42 MOV44 MOV43 MOV43 INS8 INS73 INS74 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS60 INS60 INS60 INS21 INS60 INS60 INS60 INS60 INS41 INS42 INS43 INS43 INS43 INS74 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS60 INS60 INS60 INS70 INS60 INS54 INS41 INS42 INS21 INS21 INS39 INS59 INS43 INS59 INS43 INS59 INS7 INS74 INS59 INS43 INS59 INS74 INS59 INS74 INS59 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS74 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS8 INS12 INS42 INS32 INS48 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS22 INS14 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS14 INS43 INS74 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS43 INS43 INS43 INS42 INS14 INS21 INS24 INS25 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS40 INS40 INS32 INS42 INS74 INS52 INS42 INS43 INS42 INS42 INS34 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS45 INS3 INS3 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS42 INS74 INS32 INS58 INS27 INS37 INS8 INS32 INS8 INS43 INS42 INS53 INS42 INS14 INS42 INS27 INS43 INS42 INS42 INS5 INS4 INS5 INS4 INS43 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS14 INS43 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS54 INS42 INS42 INS60 INS60 INS25 INS42 INS14 INS43 INS45 INS42 INS45 INS42 INS43 INS85 INS57 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS1 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS43 INS31 INS42 INS42 INS32 INS60 INS60 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS78 MOV83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS32 INS43 INS42 INS60 INS21 INS60 INS25 INS21 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS41 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS43 INS59 INS62 INS8 INS25 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS32 INS32 INS42 INS42 INS42 INS43 INS21 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS43 INS53 INS21 INS42 INS42 INS57 INS42 INS32 INS32 INS42 INS42 INS42 INS11 INS42 INS11 INS7 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS14 INS42 INS42 INS42 UPD43 MOV43 INS27 INS42 UPD42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 DEL42 DEL45 DEL14 DEL53 DEL8