HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-    private final Map<InetSocketAddress, BPOfferService> nameNodeThreads;
+    private final List<BPOfferService> offerServices;
-      nameNodeThreads = new HashMap<InetSocketAddress, BPOfferService>();
+      offerServices = new ArrayList<BPOfferService>();
-        // TODO(HA) when HDFS-1971 (dual BRs) is done, pass all of the NNs
-        // to BPOS
-        InetSocketAddress isa = nnList.get(0);
-        BPOfferService bpos = new BPOfferService(isa, DataNode.this);
-        nameNodeThreads.put(bpos.getNNSocketAddress(), bpos);
+        BPOfferService bpos = new BPOfferService(nnList, DataNode.this);
+        offerServices.add(bpos);
-    synchronized void addBlockPool(BPOfferService t) {
-      if (nameNodeThreads.get(t.getNNSocketAddress()) == null) {
-        throw new IllegalArgumentException(
-            "Unknown BPOfferService thread for namenode address:"
-                + t.getNNSocketAddress());
-      }
-      if (t.getBlockPoolId() == null) {
+    synchronized void addBlockPool(BPOfferService bpos) {
+      Preconditions.checkArgument(offerServices.contains(bpos),
+          "Unknown BPOS: %s", bpos);
+      if (bpos.getBlockPoolId() == null) {
-      bpMapping.put(t.getBlockPoolId(), t);
+      LOG.info("===> registering in bpmapping: " + bpos);
+      bpMapping.put(bpos.getBlockPoolId(), bpos);
-      BPOfferService[] bposArray = new BPOfferService[nameNodeThreads.values()
-          .size()];
-      return nameNodeThreads.values().toArray(bposArray);
+      BPOfferService[] bposArray = new BPOfferService[offerServices.size()];
+      return offerServices.toArray(bposArray);
-    
-    synchronized BPOfferService get(InetSocketAddress addr) {
-      return nameNodeThreads.get(addr);
-    }
-    
+        
+    // TODO(HA) would be good to kill this
+    synchronized BPOfferService get(InetSocketAddress addr) {
+      for (BPOfferService bpos : offerServices) {
+        if (bpos.containsNN(addr)) {
+          return bpos;
+        }
+      }
+      return null;
+    }
+
-      nameNodeThreads.remove(t.getNNSocketAddress());
+      offerServices.remove(t);
-                for (BPOfferService bpos : nameNodeThreads.values()) {
+                for (BPOfferService bpos : offerServices) {
+      throw new UnsupportedOperationException("TODO(HA)");
+/*
+ * TODO(HA)
+
-          for (InetSocketAddress nnaddr : nameNodeThreads.keySet()) {
+          for (InetSocketAddress nnaddr : offerServices.keySet()) {
-              toShutdown.add(nameNodeThreads.get(nnaddr));
+              toShutdown.add(offerServices.get(nnaddr));
-            if (!(nameNodeThreads.containsKey(nnaddr))) {
+            if (!(offerServices.containsKey(nnaddr))) {
-            nameNodeThreads.put(bpos.getNNSocketAddress(), bpos);
+            offerServices.put(bpos.getNNSocketAddress(), bpos);
+      */
+
+  /**
+   * Report a bad block which is hosted on the local DN.
+   */
-    BPOfferService bpos = blockPoolManager.get(block.getBlockPoolId());
-    if(bpos == null || bpos.bpNamenode == null) {
-      throw new IOException("cannot locate OfferService thread for bp="+block.getBlockPoolId());
-    }
+    BPOfferService bpos = getBPOSForBlock(block);
+
+  /**
+   * Report a bad block on another DN (eg if we received a corrupt replica
+   * from a remote host).
+   * @param srcDataNode the DN hosting the bad block
+   * @param block the block itself
+   */
+  public void reportRemoteBadBlock(DatanodeInfo srcDataNode, ExtendedBlock block)
+      throws IOException {
+    BPOfferService bpos = getBPOSForBlock(block);
+    bpos.reportRemoteBadBlock(srcDataNode, block);
+  }
+  
+  /**
+   * Return the BPOfferService instance corresponding to the given block.
+   * @param block
+   * @return the BPOS
+   * @throws IOException if no such BPOS can be found
+   */
+  private BPOfferService getBPOSForBlock(ExtendedBlock block)
+      throws IOException {
+    Preconditions.checkNotNull(block);
+    BPOfferService bpos = blockPoolManager.get(block.getBlockPoolId());
+    if (bpos == null) {
+      throw new IOException("cannot locate OfferService thread for bp="+
+          block.getBlockPoolId());
+    }
+    return bpos;
+  }
+
+
-   * @param mName
+   * @param mName - the name that the NN used
+    // TODO: all the BPs should have the same name as each other, they all come
+    // from getName() here! and the use cases only are in tests where they just
+    // call with getName(). So we could probably just make this method return
+    // the first BPOS's registration
+    // TODO(HA) this function doesn't make sense! used by upgrade code
+    // Should it return just the active one or simply return the BPService.
-      DatanodeProtocol nn = bpos.bpNamenode;
-      try {
-        nn.errorReport(bpos.bpRegistration, dpError, errMsgr);
-      } catch(IOException e) {
-        LOG.warn("Error reporting disk failure to NameNode", e);
-      }
+      bpos.trySendErrorReport(dpError, errMsgr);
+  
+  int getXmitsInProgress() {
+    return xmitsInProgress.get();
+  }
-    DatanodeProtocol nn = getBPNamenode(block.getBlockPoolId());
+    BPOfferService bpos = getBPOSForBlock(block);
-      nn.errorReport(bpReg, DatanodeProtocol.INVALID_BLOCK, errStr);
+      
+      bpos.trySendErrorReport(DatanodeProtocol.INVALID_BLOCK, errStr);
-      nn.reportBadBlocks(new LocatedBlock[]{
-          new LocatedBlock(block, new DatanodeInfo[] {
-              new DatanodeInfo(bpReg)})});
+      bpos.reportBadBlocks(block);
-    if(bpos == null || bpos.bpNamenode == null) {
+    if (bpos == null) {
-    return bpos.bpNamenode;
+    return bpos.getActiveNN();
+      // TODO: how does this work in HA??
-      if (bpos != null && bpos.bpThread != null) {
+      if (bpos != null) {

INS26 INS40 MOV31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 UPD83 MOV43 UPD42 INS39 INS42 INS8 MOV74 INS8 INS65 INS43 INS42 INS60 MOV21 INS65 INS65 INS65 MOV43 INS42 INS43 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS65 INS21 INS41 INS41 UPD42 UPD42 INS21 INS21 INS70 INS41 INS53 INS66 INS42 MOV43 INS59 INS66 INS66 INS42 INS66 INS42 INS66 INS42 MOV43 INS59 INS32 INS66 INS42 INS66 INS42 INS66 INS32 MOV27 INS42 INS66 INS8 INS32 MOV43 MOV27 INS32 INS32 INS32 MOV5 MOV44 INS42 INS8 INS33 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 UPD42 INS42 INS42 UPD42 MOV14 UPD42 MOV42 UPD42 MOV42 MOV32 INS45 INS42 INS42 INS42 INS27 UPD42 UPD42 MOV42 INS25 UPD42 MOV42 INS43 INS45 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV27 UPD74 MOV74 MOV43 UPD42 INS42 UPD42 UPD42 UPD45 MOV45 INS42 UPD42 MOV5 INS32 INS8 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD43 UPD43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS41 UPD42 UPD42 MOV43 UPD42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL52 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL36 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL36 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL52 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL51 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL32 DEL21 DEL8 DEL51 DEL39 DEL40 DEL33 DEL27 DEL27 DEL40 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL8 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL85 DEL5 DEL42 DEL43 DEL42 DEL14 DEL4 DEL3 DEL14 DEL4 DEL3 DEL40 DEL33 DEL27 DEL27 DEL40 DEL40 DEL33 DEL27 DEL27