HDDS-1468. Inject configuration values to Java objects

Closes #772

+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+   * Create a Configuration object and inject the required configuration values.
+   *
+   * @param configurationClass The class where the fields are annotated with
+   *                           the configuration.
+   * @return Initiated java object where the config fields are injected.
+   */
+  public <T> T getObject(Class<T> configurationClass) {
+
+    T configuration;
+
+    try {
+      configuration = configurationClass.newInstance();
+    } catch (InstantiationException | IllegalAccessException e) {
+      throw new ConfigurationException(
+          "Configuration class can't be created: " + configurationClass, e);
+    }
+    ConfigGroup configGroup =
+        configurationClass.getAnnotation(ConfigGroup.class);
+    String prefix = configGroup.prefix();
+
+    for (Method setterMethod : configurationClass.getMethods()) {
+      if (setterMethod.isAnnotationPresent(Config.class)) {
+
+        String methodLocation =
+            configurationClass + "." + setterMethod.getName();
+
+        Config configAnnotation = setterMethod.getAnnotation(Config.class);
+
+        String key = prefix + "." + configAnnotation.key();
+
+        Class<?>[] parameterTypes = setterMethod.getParameterTypes();
+        if (parameterTypes.length != 1) {
+          throw new ConfigurationException(
+              "@Config annotation should be used on simple setter: "
+                  + methodLocation);
+        }
+
+        ConfigType type = configAnnotation.type();
+
+        if (type == ConfigType.AUTO) {
+          type = detectConfigType(parameterTypes[0], methodLocation);
+        }
+
+        //Note: default value is handled by ozone-default.xml. Here we can
+        //use any default.
+        try {
+          switch (type) {
+          case STRING:
+            setterMethod.invoke(configuration, get(key));
+            break;
+          case INT:
+            setterMethod.invoke(configuration,
+                getInt(key, 0));
+            break;
+          case BOOLEAN:
+            setterMethod.invoke(configuration,
+                getBoolean(key, false));
+            break;
+          case LONG:
+            setterMethod.invoke(configuration,
+                getLong(key, 0));
+            break;
+          case TIME:
+            setterMethod.invoke(configuration,
+                getTimeDuration(key, 0, configAnnotation.timeUnit()));
+            break;
+          default:
+            throw new ConfigurationException(
+                "Unsupported ConfigType " + type + " on " + methodLocation);
+          }
+        } catch (InvocationTargetException | IllegalAccessException e) {
+          throw new ConfigurationException(
+              "Can't inject configuration to " + methodLocation, e);
+        }
+
+      }
+    }
+    return configuration;
+
+  }
+
+  private ConfigType detectConfigType(Class<?> parameterType,
+      String methodLocation) {
+    ConfigType type;
+    if (parameterType == String.class) {
+      type = ConfigType.STRING;
+    } else if (parameterType == Integer.class || parameterType == int.class) {
+      type = ConfigType.INT;
+    } else if (parameterType == Long.class || parameterType == long.class) {
+      type = ConfigType.LONG;
+    } else if (parameterType == Boolean.class
+        || parameterType == boolean.class) {
+      type = ConfigType.BOOLEAN;
+    } else {
+      throw new ConfigurationException(
+          "Unsupported configuration type " + parameterType + " in "
+              + methodLocation);
+    }
+    return type;
+  }
+
+  /**
-    public int hashCode(){
+    public int hashCode() {
+   *
-      Object propertyName =  properties.nextElement();
+      Object propertyName = properties.nextElement();

INS26 INS26 INS40 INS40 INS31 INS31 INS29 INS83 INS73 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS42 INS42 INS74 INS42 INS60 INS54 INS60 INS60 INS70 INS41 INS42 INS74 INS42 INS43 INS42 INS60 INS25 INS41 INS66 INS42 INS66 INS66 INS66 INS43 INS43 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS44 INS32 INS8 INS42 INS43 INS76 INS42 INS43 INS59 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS57 INS21 INS27 INS8 INS25 INS7 INS84 INS42 INS53 INS42 INS42 INS57 INS42 INS42 INS42 INS32 INS8 INS43 INS7 INS27 INS27 INS21 INS27 INS8 INS25 INS42 INS32 INS43 INS43 INS14 INS43 INS42 INS42 INS57 INS60 INS60 INS60 INS60 INS25 INS60 INS25 INS54 INS42 INS42 INS40 INS42 INS57 INS42 INS57 INS7 INS27 INS27 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS43 INS59 INS43 INS59 INS43 INS59 INS5 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS12 INS43 INS39 INS42 INS40 INS42 INS57 INS42 INS57 INS7 INS27 INS27 INS21 INS53 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS27 INS74 INS85 INS42 INS32 INS40 INS34 INS53 INS42 INS42 INS32 INS42 INS40 INS21 INS50 INS44 INS8 INS42 INS43 INS39 INS42 INS40 INS42 INS57 INS42 INS57 INS7 INS14 INS42 INS45 INS32 INS42 INS42 INS57 INS42 INS45 INS32 INS43 INS76 INS42 INS42 INS14 INS42 INS42 INS7 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS84 INS42 INS53 INS42 INS43 INS39 INS42 INS40 INS43 INS27 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS27 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS14 INS43 INS43 INS14 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS43 INS27 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS9 INS42 INS42 INS34 INS42 INS42 INS34 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42