HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430507 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.Socket;
-import org.apache.hadoop.hdfs.protocol.ExtendedBlock;
+import org.apache.hadoop.hdfs.net.Peer;
+import org.apache.hadoop.hdfs.protocol.DatanodeID;
-import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
-import org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier;
-import org.apache.hadoop.hdfs.server.common.HdfsServerConstants;
-import org.apache.hadoop.net.NetUtils;
-import org.apache.hadoop.security.token.Token;
-  Socket dnSock; //for now just sending the status code (e.g. checksumOk) after the read.
+  private final Peer peer;
+  private final DatanodeID datanodeID;
-        sendReadResult(dnSock, Status.CHECKSUM_OK);
+        sendReadResult(peer, Status.CHECKSUM_OK);
-        sendReadResult(dnSock, Status.SUCCESS);
+        sendReadResult(peer, Status.SUCCESS);
-      long startOffset, long firstChunkOffset, long bytesToRead, Socket dnSock) {
+      long startOffset, long firstChunkOffset, long bytesToRead, 
+      Peer peer, DatanodeID datanodeID) {
-    this.dnSock = dnSock;
+    this.peer = peer;
+    this.datanodeID = datanodeID;
-    Socket sock = params.getSocket();
-          NetUtils.getOutputStream(sock, HdfsServerConstants.WRITE_TIMEOUT)));
+        params.getPeer().getOutputStream()));
-        new BufferedInputStream(NetUtils.getInputStream(sock), 
+        new BufferedInputStream(params.getPeer().getInputStream(),
-    RemoteBlockReader2.checkSuccess(status, sock, params.getBlock(),
-        params.getFile());
+    RemoteBlockReader2.checkSuccess(status, params.getPeer(),
+        params.getBlock(), params.getFile());
-        params.getStartOffset(), firstChunkOffset, params.getLen(), sock);
+        params.getStartOffset(), firstChunkOffset, params.getLen(),
+        params.getPeer(), params.getDatanodeID());
-  public synchronized void close() throws IOException {
+  public synchronized void close(PeerCache peerCache) throws IOException {
-    if (dnSock != null) {
-      dnSock.close();
+    if (peerCache != null && sentStatusCode) {
+      peerCache.put(datanodeID, peer);
+    } else {
+      peer.close();
-
-    // in will be closed when its Socket is closed.
+    // in will be closed when its Peer is closed.
-  @Override
-  public Socket takeSocket() {
-    assert hasSentStatusCode() :
-      "BlockReader shouldn't give back sockets mid-read";
-    Socket res = dnSock;
-    dnSock = null;
-    return res;
-  }
-
-  @Override
-  public boolean hasSentStatusCode() {
-    return sentStatusCode;
-  }
-
-  void sendReadResult(Socket sock, Status statusCode) {
-    assert !sentStatusCode : "already sent status code to " + sock;
+  void sendReadResult(Peer peer, Status statusCode) {
+    assert !sentStatusCode : "already sent status code to " + peer;
-      RemoteBlockReader2.writeReadResult(
-          NetUtils.getOutputStream(sock, HdfsServerConstants.WRITE_TIMEOUT),
-          statusCode);
+      RemoteBlockReader2.writeReadResult(peer.getOutputStream(), statusCode);
-               sock.getInetAddress() + ": " + e.getMessage());
+               datanodeID + ": " + e.getMessage());
-
-  @Override
-  public IOStreamPair getStreams() {
-    // This class doesn't support encryption, which is the only thing this
-    // method is used for. See HDFS-3637.
-    return null;
-  }
-

MOV26 UPD40 UPD40 INS23 INS83 INS83 INS43 INS59 INS83 INS83 UPD43 INS44 INS44 INS42 INS42 UPD42 UPD42 INS43 INS42 UPD43 UPD42 INS21 INS43 INS42 UPD43 UPD42 INS42 UPD42 INS7 INS42 INS27 INS8 UPD42 INS22 INS42 UPD42 INS32 INS32 INS32 INS27 INS42 INS21 UPD42 INS52 INS42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV33 INS32 INS42 INS42 INS42 INS42 UPD42 INS32 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL27 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL6 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31