YARN-9313. Support asynchronized scheduling mode and multi-node lookup mechanism for scheduler activities. Contributed by Tao Yang.

+import com.google.common.annotations.VisibleForTesting;
-  private ConcurrentMap<NodeId, List<NodeAllocation>> recordingNodesAllocation;
-  private ConcurrentMap<NodeId, List<NodeAllocation>> completedNodeAllocations;
+  // An empty node ID, we use this variable as a placeholder
+  // in the activity records when recording multiple nodes assignments.
+  public static final NodeId EMPTY_NODE_ID = NodeId.newInstance("", 0);
+  private ThreadLocal<Map<NodeId, List<NodeAllocation>>>
+      recordingNodesAllocation;
+  @VisibleForTesting
+  ConcurrentMap<NodeId, List<NodeAllocation>> completedNodeAllocations;
-    recordingNodesAllocation = new ConcurrentHashMap<>();
+    recordingNodesAllocation = ThreadLocal.withInitial(() -> new HashMap());
-    if (activeRecordedNodes.contains(nodeID)) {
+    // Removing from activeRecordedNodes immediately is to ensure that
+    // activities will be recorded just once in multiple threads.
+    if (activeRecordedNodes.remove(nodeID)) {
-      recordingNodesAllocation.put(nodeID, nodeAllocation);
+      recordingNodesAllocation.get().put(nodeID, nodeAllocation);
-  void addSchedulingActivityForNode(SchedulerNode node, String parentName,
+  void addSchedulingActivityForNode(NodeId nodeId, String parentName,
-    if (shouldRecordThisNode(node.getNodeID())) {
-      NodeAllocation nodeAllocation = getCurrentNodeAllocation(
-          node.getNodeID());
+    if (shouldRecordThisNode(nodeId)) {
+      NodeAllocation nodeAllocation = getCurrentNodeAllocation(nodeId);
-    List<NodeAllocation> value = recordingNodesAllocation.get(nodeID);
+    List<NodeAllocation> value = recordingNodesAllocation.get().get(nodeID);
-        recordingNodesAllocation.remove(nodeID);
+        recordingNodesAllocation.get().remove(nodeID);
-        stopRecordNodeUpdateActivities(nodeID);
-    return activeRecordedNodes.contains(nodeID) && recordingNodesAllocation
+    return isRecordingMultiNodes() || recordingNodesAllocation.get()
-    List<NodeAllocation> nodeAllocations = recordingNodesAllocation.get(nodeID);
+    NodeId recordingKey =
+        isRecordingMultiNodes() ? EMPTY_NODE_ID : nodeID;
+    List<NodeAllocation> nodeAllocations =
+        recordingNodesAllocation.get().get(recordingKey);
-  private void stopRecordNodeUpdateActivities(NodeId nodeId) {
-    activeRecordedNodes.remove(nodeId);
-  }
-
+
+  public boolean isRecordingMultiNodes() {
+    return recordingNodesAllocation.get().containsKey(EMPTY_NODE_ID);
+  }
+
+  /**
+   * Get recording node id:
+   * 1. node id of the input node if it is not null.
+   * 2. EMPTY_NODE_ID if input node is null and activities manager is
+   *    recording multi-nodes.
+   * 3. null otherwise.
+   * @param node - input node
+   * @return recording nodeId
+   */
+  public NodeId getRecordingNodeId(SchedulerNode node) {
+    if (node != null) {
+      return node.getNodeID();
+    } else if (isRecordingMultiNodes()) {
+      return ActivitiesManager.EMPTY_NODE_ID;
+    }
+    return null;
+  }

INS26 INS40 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS74 INS78 MOV44 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 INS29 INS83 INS43 INS42 MOV44 MOV8 INS42 INS42 INS32 INS43 INS74 INS42 INS60 INS41 INS65 INS65 INS65 MOV42 INS25 INS41 INS42 INS42 INS45 INS34 INS42 UPD43 MOV43 MOV43 MOV74 INS42 UPD27 INS43 INS59 INS32 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS27 INS8 INS25 INS33 UPD42 INS32 UPD42 UPD42 MOV42 INS42 INS42 INS16 INS32 INS42 INS42 INS42 INS33 INS41 INS32 INS8 INS42 INS42 INS86 INS32 INS42 UPD42 INS32 INS32 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS41 INS14 INS32 MOV42 MOV42 MOV42 INS42 INS42 MOV42 MOV42 INS40 INS43 MOV42 INS42 INS42 UPD42 MOV42 INS32 MOV42 INS42 DEL74 DEL83 DEL43 DEL74 DEL14 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL31 DEL42 DEL42 DEL32 DEL21