Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.security.token.block.DataEncryptionKey;
-import org.apache.hadoop.io.Text;
-import org.apache.hadoop.security.authorize.AuthorizationException;
+    @Override
-      JspWriter out, Configuration conf) throws IOException {
+      JspWriter out, Configuration conf, DataEncryptionKey encryptionKey)
+          throws IOException {
-        offsetIntoBlock, amtToRead);
+        offsetIntoBlock, amtToRead, encryptionKey);
+        FIELD_BLOCKPOOL_USED    = 12,
+        FIELD_PERBLOCKPOOL_USED = 13,
+        FIELD_FAILED_VOLUMES    = 14,
+        } else if (field.equals("bpused")) {
+          sortField = FIELD_BLOCKPOOL_USED;
+        } else if (field.equals("pcbpused")) {
+          sortField = FIELD_PERBLOCKPOOL_USED;
+        } else if (field.equals("volfails")) {
+          sortField = FIELD_FAILED_VOLUMES;
+      @Override
+        case FIELD_BLOCKPOOL_USED:
+          dlong = d1.getBlockPoolUsed() - d2.getBlockPoolUsed();
+          ret = (dlong < 0) ? -1 : ((dlong > 0) ? 1 : 0);
+          break;
+        case FIELD_PERBLOCKPOOL_USED:
+          ddbl = d1.getBlockPoolUsedPercent() - d2.getBlockPoolUsedPercent();
+          ret = (ddbl < 0) ? -1 : ((ddbl > 0) ? 1 : 0);
+          break;
+        case FIELD_FAILED_VOLUMES:
+          int dint = d1.getVolumeFailures() - d2.getVolumeFailures();
+          ret = (dint < 0) ? -1 : ((dint > 0) ? 1 : 0);
+          break;
+    return UserGroupInformation.createRemoteUser(getDefaultWebUserName(conf));
+  }
+
+  private static String getDefaultWebUserName(Configuration conf
+      ) throws IOException {
-    return UserGroupInformation.createRemoteUser(user);
+    return user;
-    final UserGroupInformation ugi;
+    UserGroupInformation ugi = null;
-
-    if(UserGroupInformation.isSecurityEnabled()) {
-      final String remoteUser = request.getRemoteUser();
-      String tokenString = request.getParameter(DELEGATION_PARAMETER_NAME);
+    final String remoteUser;
+   
+    if (UserGroupInformation.isSecurityEnabled()) {
+      remoteUser = request.getRemoteUser();
+      final String tokenString = request.getParameter(DELEGATION_PARAMETER_NAME);
-        Token<DelegationTokenIdentifier> token = 
-          new Token<DelegationTokenIdentifier>();
-        token.decodeFromUrlString(tokenString);
-        InetSocketAddress serviceAddress = getNNServiceAddress(context, request);
-        if (serviceAddress != null) {
-          SecurityUtil.setTokenService(token, serviceAddress);
-          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);
-        }
-        ByteArrayInputStream buf = new ByteArrayInputStream(token
-            .getIdentifier());
-        DataInputStream in = new DataInputStream(buf);
-        DelegationTokenIdentifier id = new DelegationTokenIdentifier();
-        id.readFields(in);
-        if (context != null) {
-          final NameNode nn = NameNodeHttpServer.getNameNodeFromContext(context);
-          if (nn != null) {
-            // Verify the token.
-            nn.getNamesystem().verifyToken(id, token.getPassword());
-          }
-        }
-        ugi = id.getUser();
-        if (ugi.getRealUser() == null) {
-          //non-proxy case
-          checkUsername(ugi.getShortUserName(), usernameFromQuery);
-          checkUsername(null, doAsUserFromQuery);
-        } else {
-          //proxy case
-          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);
-          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);
-          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);
-        }
-        ugi.addToken(token);
-        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);
-      } else {
-        if(remoteUser == null) {
-          throw new IOException("Security enabled but user not " +
-                                "authenticated by filter");
-        }
-        final UserGroupInformation realUgi = UserGroupInformation.createRemoteUser(remoteUser);
-        checkUsername(realUgi.getShortUserName(), usernameFromQuery);
+        // Token-based connections need only verify the effective user, and
+        // disallow proxying to different user.  Proxy authorization checks
+        // are not required since the checks apply to issuing a token.
+        ugi = getTokenUGI(context, request, tokenString, conf);
+        checkUsername(ugi.getShortUserName(), usernameFromQuery);
+        checkUsername(ugi.getShortUserName(), doAsUserFromQuery);
+      } else if (remoteUser == null) {
+        throw new IOException(
+            "Security enabled but user not authenticated by filter");
+      }
+    } else {
+      // Security's not on, pull from url or use default web user
+      remoteUser = (usernameFromQuery == null)
+          ? getDefaultWebUserName(conf) // not specified in request
+          : usernameFromQuery;
+    }
+
+    if (ugi == null) { // security is off, or there's no token
+      ugi = UserGroupInformation.createRemoteUser(remoteUser);
+      checkUsername(ugi.getShortUserName(), usernameFromQuery);
+      if (UserGroupInformation.isSecurityEnabled()) {
-        realUgi.setAuthenticationMethod(secureAuthMethod);
-        ugi = initUGI(realUgi, doAsUserFromQuery, request, true, conf);
+        ugi.setAuthenticationMethod(secureAuthMethod);
-    } else { // Security's not on, pull from url
-      final UserGroupInformation realUgi = usernameFromQuery == null?
-          getDefaultWebUser(conf) // not specified in request
-          : UserGroupInformation.createRemoteUser(usernameFromQuery);
-      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);
-      ugi = initUGI(realUgi, doAsUserFromQuery, request, false, conf);
+      if (doAsUserFromQuery != null) {
+        // create and attempt to authorize a proxy user
+        ugi = UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);
+        ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);
+      }
-  private static UserGroupInformation initUGI(final UserGroupInformation realUgi,
-      final String doAsUserFromQuery, final HttpServletRequest request,
-      final boolean isSecurityEnabled, final Configuration conf
-      ) throws AuthorizationException {
-    final UserGroupInformation ugi;
-    if (doAsUserFromQuery == null) {
-      //non-proxy case
-      ugi = realUgi;
-    } else {
-      //proxy case
-      ugi = UserGroupInformation.createProxyUser(doAsUserFromQuery, realUgi);
-      ugi.setAuthenticationMethod(
-          isSecurityEnabled? AuthenticationMethod.PROXY: AuthenticationMethod.SIMPLE);
-      ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);
+  private static UserGroupInformation getTokenUGI(ServletContext context,
+                                                  HttpServletRequest request,
+                                                  String tokenString,
+                                                  Configuration conf)
+                                                      throws IOException {
+    final Token<DelegationTokenIdentifier> token =
+        new Token<DelegationTokenIdentifier>();
+    token.decodeFromUrlString(tokenString);
+    InetSocketAddress serviceAddress = getNNServiceAddress(context, request);
+    if (serviceAddress != null) {
+      SecurityUtil.setTokenService(token, serviceAddress);
+      token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);
+
+    ByteArrayInputStream buf =
+        new ByteArrayInputStream(token.getIdentifier());
+    DataInputStream in = new DataInputStream(buf);
+    DelegationTokenIdentifier id = new DelegationTokenIdentifier();
+    id.readFields(in);
+    if (context != null) {
+      final NameNode nn = NameNodeHttpServer.getNameNodeFromContext(context);
+      if (nn != null) {
+        // Verify the token.
+        nn.getNamesystem().verifyToken(id, token.getPassword());
+      }
+    }
+    UserGroupInformation ugi = id.getUser();
+    ugi.addToken(token);

MOV26 UPD40 INS31 INS31 INS44 MOV29 UPD83 MOV83 MOV83 MOV43 INS42 INS44 INS43 INS8 UPD83 MOV43 UPD42 MOV29 INS83 INS83 MOV43 INS42 INS44 MOV44 MOV44 MOV44 MOV44 UPD43 MOV43 MOV8 UPD83 UPD42 INS44 MOV8 INS78 INS43 INS42 INS43 INS42 UPD42 MOV42 INS41 INS42 INS43 INS42 UPD42 INS60 MOV60 MOV60 INS60 INS25 MOV25 INS43 INS42 INS60 MOV41 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 MOV43 INS59 MOV83 MOV43 INS59 MOV32 INS8 INS8 INS8 MOV42 INS83 MOV43 INS59 INS42 INS42 INS32 INS42 INS33 INS42 INS21 MOV60 INS25 INS21 UPD42 MOV21 MOV21 INS25 INS25 INS42 INS42 MOV32 INS42 INS59 INS59 INS59 INS78 INS42 INS42 INS7 INS83 MOV27 INS8 MOV25 INS7 INS32 INS8 INS27 MOV8 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 MOV32 INS21 INS21 MOV21 INS42 INS16 MOV32 INS42 INS42 INS21 INS42 INS33 INS49 INS21 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS60 INS21 INS10 INS7 INS32 INS36 INS32 INS42 INS32 INS42 INS7 INS7 INS42 INS7 INS7 INS42 INS39 INS59 INS7 INS42 INS32 INS42 INS32 INS42 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS16 INS42 INS27 INS42 INS16 INS42 INS27 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 UPD42 INS32 INS32 INS36 INS38 INS36 INS32 INS32 INS36 INS38 INS36 INS32 INS32 INS36 INS38 INS36 INS42 INS42 INS42 INS42 INS27 INS34 INS16 INS42 INS42 INS42 INS42 INS27 INS34 INS16 INS42 INS42 INS42 INS42 INS27 INS34 INS16 INS42 INS34 INS36 INS34 INS34 INS42 INS34 INS36 INS34 INS34 INS42 INS34 INS36 INS34 INS34 INS27 INS27 INS27 INS42 INS34 INS42 INS34 INS42 INS34 INS25 INS32 INS8 INS25 INS42 INS42 INS45 INS21 INS32 INS8 INS25 INS7 INS42 INS42 INS45 INS21 INS32 INS8 MOV8 INS42 INS42 INS7 INS42 INS42 INS45 INS21 INS42 INS42 INS7 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL83 DEL83 DEL45 DEL45 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL16 DEL32 DEL21 DEL8 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL33 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL83 DEL42 DEL59 DEL60 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL83 DEL43 DEL42 DEL44 DEL83 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL31