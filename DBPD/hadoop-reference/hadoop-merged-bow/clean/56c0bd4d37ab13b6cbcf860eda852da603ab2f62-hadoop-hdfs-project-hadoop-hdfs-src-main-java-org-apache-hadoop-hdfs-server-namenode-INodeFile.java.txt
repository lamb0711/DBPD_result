Merge from trunk to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1610853 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.util.LongBitFormat;
-  static class HeaderFormat {
-    /** Number of bits for Block size */
-    static final int BLOCKBITS = 48;
-    /** Header mask 64-bit representation */
-    static final long HEADERMASK = 0xffffL << BLOCKBITS;
-    static final long MAX_BLOCK_SIZE = ~HEADERMASK; 
-    
+  static enum HeaderFormat {
+    PREFERRED_BLOCK_SIZE(null, 48, 1),
+    REPLICATION(PREFERRED_BLOCK_SIZE.BITS, 16, 1);
+
+    private final LongBitFormat BITS;
+
+    private HeaderFormat(LongBitFormat previous, int length, long min) {
+      BITS = new LongBitFormat(name(), previous, length, min);
+    }
+
-      return (short) ((header & HEADERMASK) >> BLOCKBITS);
+      return (short)REPLICATION.BITS.retrieve(header);
-    static long combineReplication(long header, short replication) {
-      if (replication <= 0) {
-         throw new IllegalArgumentException(
-             "Unexpected value for the replication: " + replication);
-      }
-      return ((long)replication << BLOCKBITS) | (header & MAX_BLOCK_SIZE);
-    }
-    
-      return header & MAX_BLOCK_SIZE;
+      return PREFERRED_BLOCK_SIZE.BITS.retrieve(header);
-    static long combinePreferredBlockSize(long header, long blockSize) {
-      if (blockSize < 0) {
-         throw new IllegalArgumentException("Block size < 0: " + blockSize);
-      } else if (blockSize > MAX_BLOCK_SIZE) {
-        throw new IllegalArgumentException("Block size = " + blockSize
-            + " > MAX_BLOCK_SIZE = " + MAX_BLOCK_SIZE);
-     }
-      return (header & HEADERMASK) | (blockSize & MAX_BLOCK_SIZE);
+    static long toLong(long preferredBlockSize, short replication) {
+      long h = 0;
+      h = PREFERRED_BLOCK_SIZE.BITS.combine(preferredBlockSize, h);
+      h = REPLICATION.BITS.combine(replication, h);
+      return h;
-    header = HeaderFormat.combineReplication(header, replication);
-    header = HeaderFormat.combinePreferredBlockSize(header, preferredBlockSize);
+    header = HeaderFormat.toLong(preferredBlockSize, replication);
-    header = HeaderFormat.combineReplication(header, replication);
+    header = HeaderFormat.REPLICATION.BITS.combine(replication, header);

INS26 INS40 INS71 MOV29 INS83 INS42 INS72 INS72 INS23 INS31 INS31 INS31 INS31 INS42 INS33 INS34 INS34 INS42 INS40 INS34 INS34 UPD83 MOV83 MOV83 INS43 INS59 UPD83 MOV83 INS42 INS44 INS44 MOV44 MOV8 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 MOV8 MOV83 MOV39 MOV42 MOV44 MOV8 MOV83 MOV39 UPD42 MOV42 MOV44 MOV44 INS8 INS42 INS42 INS43 INS42 INS39 INS42 UPD42 INS21 UPD42 INS60 INS21 INS21 INS41 INS42 INS7 INS11 INS32 INS39 INS59 INS7 INS7 INS42 INS42 INS14 UPD39 MOV39 INS32 INS40 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS32 UPD42 UPD42 INS40 UPD42 UPD42 INS43 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL36 DEL11 DEL41 DEL42 DEL34 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL11 DEL42 DEL27 DEL36 DEL42 DEL42 DEL27 DEL36 DEL27 DEL42 DEL42 DEL27 DEL83 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL34 DEL42 DEL27 DEL59 DEL23 DEL39 DEL42 DEL42 DEL38 DEL59 DEL23 DEL39 DEL42 DEL31 DEL31 DEL31 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL42 DEL42 DEL27 DEL36 DEL42 DEL42 DEL27 DEL36 DEL27 DEL41 DEL8 DEL31 DEL55 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42