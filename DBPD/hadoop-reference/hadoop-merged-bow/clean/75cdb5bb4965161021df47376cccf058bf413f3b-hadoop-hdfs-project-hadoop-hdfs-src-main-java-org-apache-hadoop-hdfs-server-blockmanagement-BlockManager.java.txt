HDFS-4099. Clean up replication code and add more javadoc.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1400986 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.util.ExitUtil.terminate;
+
-import org.apache.hadoop.hdfs.security.token.block.DataEncryptionKey;
+import org.apache.hadoop.hdfs.security.token.block.DataEncryptionKey;
-
-import static org.apache.hadoop.util.ExitUtil.terminate;
-
-  public void checkReplication(Block block, short numExpectedReplicas) {
-    // filter out containingNodes that are marked for decommission.
-    NumberReplicas number = countNodes(block);
-    if (isNeededReplication(block, numExpectedReplicas, number.liveReplicas())) { 
-      neededReplications.add(block,
-                             number.liveReplicas(),
-                             number.decommissionedReplicas(),
-                             numExpectedReplicas);
-      return;
-    }
-    if (number.liveReplicas() > numExpectedReplicas) {
-      processOverReplicatedBlock(block, numExpectedReplicas, null, null);
+  /**
+   * Check replication of the blocks in the collection.
+   * If any block is needed replication, insert it into the replication queue.
+   * Otherwise, if the block is more than the expected replication factor,
+   * process it as an over replicated block.
+   */
+  public void checkReplication(BlockCollection bc) {
+    final short expected = bc.getBlockReplication();
+    for (Block block : bc.getBlocks()) {
+      final NumberReplicas n = countNodes(block);
+      if (isNeededReplication(block, expected, n.liveReplicas())) { 
+        neededReplications.add(block, n.liveReplicas(),
+            n.decommissionedReplicas(), expected);
+      } else if (n.liveReplicas() > expected) {
+        processOverReplicatedBlock(block, expected, null, null);
+      }
-  /* get replication factor of a block */
+  /** 
+   * @return 0 if the block is not found;
+   *         otherwise, return the replication factor of the block.
+   */
-    BlockCollection bc = blocksMap.getBlockCollection(block);
-    if (bc == null) { // block does not belong to any file
-      return 0;
-    }
-    return bc.getBlockReplication();
+    final BlockCollection bc = blocksMap.getBlockCollection(block);
+    return bc == null? 0: bc.getBlockReplication();
-  boolean isNeededReplication(Block b, int expectedReplication, int curReplicas) {
-    if ((curReplicas >= expectedReplication) && (blockHasEnoughRacks(b))) {
-      return false;
-    } else {
-      return true;
-    }
+  /**
+   * A block needs replication if the number of replicas is less than expected
+   * or if it does not have enough racks.
+   */
+  private boolean isNeededReplication(Block b, int expected, int current) {
+    return current < expected || !blockHasEnoughRacks(b);

MOV26 MOV26 INS29 INS44 INS8 INS29 INS29 INS83 INS65 INS43 INS42 INS60 INS70 INS65 MOV41 INS65 UPD42 UPD42 INS41 INS66 INS66 INS66 INS66 INS42 INS83 INS39 INS59 MOV44 INS32 INS8 INS66 INS66 INS83 INS16 INS66 INS66 INS27 INS42 MOV32 INS42 INS42 MOV60 INS25 MOV27 INS34 INS32 INS27 INS38 INS83 MOV32 MOV8 INS25 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 UPD42 MOV27 MOV8 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL41 DEL39 DEL42 DEL44 DEL25 DEL25 DEL8 DEL34 DEL8 DEL25 DEL41 DEL27 DEL36 DEL36 DEL27 DEL9 DEL41 DEL8 DEL9 DEL41 DEL8 DEL25