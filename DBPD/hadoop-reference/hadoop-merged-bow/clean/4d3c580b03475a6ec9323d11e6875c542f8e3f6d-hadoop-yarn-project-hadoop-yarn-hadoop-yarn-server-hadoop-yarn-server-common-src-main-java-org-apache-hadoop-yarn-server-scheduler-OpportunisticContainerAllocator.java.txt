YARN-9859. Refactoring of OpportunisticContainerAllocator. Contributed by Abhishek Modi.

-import org.apache.commons.lang3.StringUtils;
-import org.apache.hadoop.yarn.server.metrics.OpportunisticSchedulerMetrics;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.LinkedList;
- * The OpportunisticContainerAllocator allocates containers on a given list of
- * nodes, after modifying the container sizes to respect the limits set by the
- * ResourceManager. It tries to distribute the containers as evenly as possible.
+ * Base abstract class for Opportunistic container allocations, that provides
+ * common functions required for Opportunistic container allocation.
-public class OpportunisticContainerAllocator {
-
-  private static final int NODE_LOCAL_LOOP = 0;
-  private static final int RACK_LOCAL_LOOP = 1;
-  private static final int OFF_SWITCH_LOOP = 2;
+public abstract class OpportunisticContainerAllocator {
-  private static final Logger LOG =
-      LoggerFactory.getLogger(OpportunisticContainerAllocator.class);
-
-  static class EnrichedResourceRequest {
+  /**
+   * This class encapsulates Resource Request and provides requests per
+   * node and rack.
+   */
+  public static class EnrichedResourceRequest {
-    EnrichedResourceRequest(ResourceRequest request) {
+    public EnrichedResourceRequest(ResourceRequest request) {
-    long getTimestamp() {
+    public long getTimestamp() {
-    ResourceRequest getRequest() {
+    public ResourceRequest getRequest() {
-    void addLocation(String location, int count) {
+    public void addLocation(String location, int count) {
-    void removeLocation(String location) {
+    public void removeLocation(String location) {
-    Set<String> getNodeLocations() {
+    public Set<String> getNodeLocations() {
-    Set<String> getRackLocations() {
+    public Set<String> getRackLocations() {
+
+   * Get the Max Allocations per AM heartbeat.
+   * @return maxAllocationsPerAMHeartbeat.
+   */
+  public int getMaxAllocationsPerAMHeartbeat() {
+    return this.maxAllocationsPerAMHeartbeat;
+  }
+
+  /**
-  public List<Container> allocateContainers(ResourceBlacklistRequest blackList,
+  public abstract List<Container> allocateContainers(
+      ResourceBlacklistRequest blackList,
-      String appSubmitter) throws YarnException {
+      String appSubmitter) throws YarnException;
-    // Update black list.
+
+  protected void updateBlacklist(ResourceBlacklistRequest blackList,
+      OpportunisticContainerContext oppContext) {
-      opportContext.getBlacklist().removeAll(blackList.getBlacklistRemovals());
-      opportContext.getBlacklist().addAll(blackList.getBlacklistAdditions());
+      oppContext.getBlacklist().removeAll(blackList.getBlacklistRemovals());
+      oppContext.getBlacklist().addAll(blackList.getBlacklistAdditions());
-
-    // Add OPPORTUNISTIC requests to the outstanding ones.
-    opportContext.addToOutstandingReqs(oppResourceReqs);
-    Set<String> nodeBlackList = new HashSet<>(opportContext.getBlacklist());
-    Set<String> allocatedNodes = new HashSet<>();
-    List<Container> allocatedContainers = new ArrayList<>();
-
-    // Satisfy the outstanding OPPORTUNISTIC requests.
-    boolean continueLoop = true;
-    while (continueLoop) {
-      continueLoop = false;
-      List<Map<Resource, List<Allocation>>> allocations = new ArrayList<>();
-      for (SchedulerRequestKey schedulerKey :
-          opportContext.getOutstandingOpReqs().descendingKeySet()) {
-        // Allocated containers :
-        //  Key = Requested Capability,
-        //  Value = List of Containers of given cap (the actual container size
-        //          might be different than what is requested, which is why
-        //          we need the requested capability (key) to match against
-        //          the outstanding reqs)
-        int remAllocs = -1;
-        if (maxAllocationsPerAMHeartbeat > 0) {
-          remAllocs =
-              maxAllocationsPerAMHeartbeat - allocatedContainers.size()
-                  - getTotalAllocations(allocations);
-          if (remAllocs <= 0) {
-            LOG.info("Not allocating more containers as we have reached max "
-                    + "allocations per AM heartbeat {}",
-                maxAllocationsPerAMHeartbeat);
-            break;
-          }
-        }
-        Map<Resource, List<Allocation>> allocation = allocate(
-            rmIdentifier, opportContext, schedulerKey, applicationAttemptId,
-            appSubmitter, nodeBlackList, allocatedNodes, remAllocs);
-        if (allocation.size() > 0) {
-          allocations.add(allocation);
-          continueLoop = true;
-        }
-      }
-      for (Map<Resource, List<Allocation>> allocation : allocations) {
-        for (Map.Entry<Resource, List<Allocation>> e : allocation.entrySet()) {
-          opportContext.matchAllocationToOutstandingRequest(
-              e.getKey(), e.getValue());
-          for (Allocation alloc : e.getValue()) {
-            allocatedContainers.add(alloc.getContainer());
-          }
-        }
-      }
-    }
-
-    return allocatedContainers;
-  private int getTotalAllocations(
+  protected void matchAllocation(List<Map<Resource,
+      List<Allocation>>> allocations, List<Container> allocatedContainers,
+      OpportunisticContainerContext oppContext) {
+    for (Map<Resource, List<Allocation>> allocation : allocations) {
+      for (Map.Entry<Resource, List<Allocation>> e : allocation.entrySet()) {
+        oppContext.matchAllocationToOutstandingRequest(
+            e.getKey(), e.getValue());
+        for (Allocation alloc : e.getValue()) {
+          allocatedContainers.add(alloc.getContainer());
+        }
+      }
+    }
+  }
+
+  protected int getTotalAllocations(
-  private Map<Resource, List<Allocation>> allocate(long rmIdentifier,
-      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,
-      ApplicationAttemptId appAttId, String userName, Set<String> blackList,
-      Set<String> allocatedNodes, int maxAllocations)
-      throws YarnException {
-    Map<Resource, List<Allocation>> containers = new HashMap<>();
-    for (EnrichedResourceRequest enrichedAsk :
-        appContext.getOutstandingOpReqs().get(schedKey).values()) {
-      int remainingAllocs = -1;
-      if (maxAllocations > 0) {
-        int totalAllocated = 0;
-        for (List<Allocation> allocs : containers.values()) {
-          totalAllocated += allocs.size();
-        }
-        remainingAllocs = maxAllocations - totalAllocated;
-        if (remainingAllocs <= 0) {
-          LOG.info("Not allocating more containers as max allocations per AM "
-                  + "heartbeat {} has reached", maxAllocationsPerAMHeartbeat);
-          break;
-        }
-      }
-      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),
-          appContext.getContainerIdGenerator(), blackList, allocatedNodes,
-          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk,
-          remainingAllocs);
-      ResourceRequest anyAsk = enrichedAsk.getRequest();
-      if (!containers.isEmpty()) {
-        LOG.info("Opportunistic allocation requested for [priority={}, "
-            + "allocationRequestId={}, num_containers={}, capability={}] "
-            + "allocated = {}", anyAsk.getPriority(),
-            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),
-            anyAsk.getCapability(), containers.keySet());
-      }
-    }
-    return containers;
-  }
-
-  private void allocateContainersInternal(long rmIdentifier,
-      AllocationParams appParams, ContainerIdGenerator idCounter,
-      Set<String> blacklist, Set<String> allocatedNodes,
-      ApplicationAttemptId id, Map<String, RemoteNode> allNodes,
-      String userName, Map<Resource, List<Allocation>> allocations,
-      EnrichedResourceRequest enrichedAsk, int maxAllocations)
-      throws YarnException {
-    if (allNodes.size() == 0) {
-      LOG.info("No nodes currently available to " +
-          "allocate OPPORTUNISTIC containers.");
-      return;
-    }
-    ResourceRequest anyAsk = enrichedAsk.getRequest();
-    int toAllocate = anyAsk.getNumContainers()
-        - (allocations.isEmpty() ? 0 :
-            allocations.get(anyAsk.getCapability()).size());
-    toAllocate = Math.min(toAllocate,
-        appParams.getMaxAllocationsPerSchedulerKeyPerRound());
-    if (maxAllocations >= 0) {
-      toAllocate = Math.min(maxAllocations, toAllocate);
-    }
-    int numAllocated = 0;
-    // Node Candidates are selected as follows:
-    // * Node local candidates selected in loop == 0
-    // * Rack local candidates selected in loop == 1
-    // * From loop == 2 onwards, we revert to off switch allocations.
-    int loopIndex = OFF_SWITCH_LOOP;
-    if (enrichedAsk.getNodeLocations().size() > 0) {
-      loopIndex = NODE_LOCAL_LOOP;
-    }
-    while (numAllocated < toAllocate) {
-      Collection<RemoteNode> nodeCandidates =
-          findNodeCandidates(loopIndex, allNodes, blacklist, allocatedNodes,
-              enrichedAsk);
-      for (RemoteNode rNode : nodeCandidates) {
-        String rNodeHost = rNode.getNodeId().getHost();
-        // Ignore black list
-        if (blacklist.contains(rNodeHost)) {
-          LOG.info("Nodes for scheduling has a blacklisted node" +
-              " [" + rNodeHost + "]..");
-          continue;
-        }
-        String location = ResourceRequest.ANY;
-        if (loopIndex == NODE_LOCAL_LOOP) {
-          if (enrichedAsk.getNodeLocations().contains(rNodeHost)) {
-            location = rNodeHost;
-          } else {
-            continue;
-          }
-        } else if (allocatedNodes.contains(rNodeHost)) {
-          LOG.info("Opportunistic container has already been allocated on {}.",
-              rNodeHost);
-          continue;
-        }
-        if (loopIndex == RACK_LOCAL_LOOP) {
-          if (enrichedAsk.getRackLocations().contains(rNode.getRackName())) {
-            location = rNode.getRackName();
-          } else {
-            continue;
-          }
-        }
-        Container container = createContainer(rmIdentifier, appParams,
-            idCounter, id, userName, allocations, location,
-            anyAsk, rNode);
-        numAllocated++;
-        updateMetrics(loopIndex);
-        allocatedNodes.add(rNodeHost);
-        LOG.info("Allocated [" + container.getId() + "] as opportunistic at " +
-            "location [" + location + "]");
-        if (numAllocated >= toAllocate) {
-          break;
-        }
-      }
-      if (loopIndex == NODE_LOCAL_LOOP &&
-          enrichedAsk.getRackLocations().size() > 0) {
-        loopIndex = RACK_LOCAL_LOOP;
-      } else {
-        loopIndex++;
-      }
-      // Handle case where there are no nodes remaining after blacklist is
-      // considered.
-      if (loopIndex > OFF_SWITCH_LOOP && numAllocated == 0) {
-        LOG.warn("Unable to allocate any opportunistic containers.");
-        break;
-      }
-    }
-  }
-
-  private void updateMetrics(int loopIndex) {
-    OpportunisticSchedulerMetrics metrics =
-        OpportunisticSchedulerMetrics.getMetrics();
-    if (loopIndex == NODE_LOCAL_LOOP) {
-      metrics.incrNodeLocalOppContainers();
-    } else if (loopIndex == RACK_LOCAL_LOOP) {
-      metrics.incrRackLocalOppContainers();
-    } else {
-      metrics.incrOffSwitchOppContainers();
-    }
-  }
-
-  private Collection<RemoteNode> findNodeCandidates(int loopIndex,
-      Map<String, RemoteNode> allNodes, Set<String> blackList,
-      Set<String> allocatedNodes, EnrichedResourceRequest enrichedRR) {
-    LinkedList<RemoteNode> retList = new LinkedList<>();
-    String partition = getRequestPartition(enrichedRR);
-    if (loopIndex > 1) {
-      for (RemoteNode remoteNode : allNodes.values()) {
-        if (StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {
-          retList.add(remoteNode);
-        }
-      }
-      return retList;
-    } else {
-
-      int numContainers = enrichedRR.getRequest().getNumContainers();
-      while (numContainers > 0) {
-        if (loopIndex == 0) {
-          // Node local candidates
-          numContainers = collectNodeLocalCandidates(
-              allNodes, enrichedRR, retList, numContainers);
-        } else {
-          // Rack local candidates
-          numContainers =
-              collectRackLocalCandidates(allNodes, enrichedRR, retList,
-                  blackList, allocatedNodes, numContainers);
-        }
-        if (numContainers == enrichedRR.getRequest().getNumContainers()) {
-          // If there is no change in numContainers, then there is no point
-          // in looping again.
-          break;
-        }
-      }
-      return retList;
-    }
-  }
-
-  private int collectRackLocalCandidates(Map<String, RemoteNode> allNodes,
-      EnrichedResourceRequest enrichedRR, LinkedList<RemoteNode> retList,
-      Set<String> blackList, Set<String> allocatedNodes, int numContainers) {
-    String partition = getRequestPartition(enrichedRR);
-    for (RemoteNode rNode : allNodes.values()) {
-      if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) &&
-          enrichedRR.getRackLocations().contains(rNode.getRackName())) {
-        String rHost = rNode.getNodeId().getHost();
-        if (blackList.contains(rHost)) {
-          continue;
-        }
-        if (allocatedNodes.contains(rHost)) {
-          retList.addLast(rNode);
-        } else {
-          retList.addFirst(rNode);
-          numContainers--;
-        }
-      }
-      if (numContainers == 0) {
-        break;
-      }
-    }
-    return numContainers;
-  }
-
-  private int collectNodeLocalCandidates(Map<String, RemoteNode> allNodes,
-      EnrichedResourceRequest enrichedRR, List<RemoteNode> retList,
-      int numContainers) {
-    String partition = getRequestPartition(enrichedRR);
-    for (String nodeName : enrichedRR.getNodeLocations()) {
-      RemoteNode remoteNode = allNodes.get(nodeName);
-      if (remoteNode != null &&
-          StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {
-        retList.add(remoteNode);
-        numContainers--;
-      }
-      if (numContainers == 0) {
-        break;
-      }
-    }
-    return numContainers;
-  }
-
-  private Container createContainer(long rmIdentifier,
+  @SuppressWarnings("checkstyle:parameternumber")
+  protected Container createContainer(long rmIdentifier,
+  @SuppressWarnings("checkstyle:parameternumber")
-  private String getRequestPartition(EnrichedResourceRequest enrichedRR) {
+  protected String getRequestPartition(EnrichedResourceRequest enrichedRR) {
-  private String getRemoteNodePartition(RemoteNode node) {
+  protected String getRemoteNodePartition(RemoteNode node) {

MOV31 INS83 INS31 INS29 INS83 INS29 INS83 INS39 INS42 INS8 INS83 UPD83 INS39 INS42 UPD83 INS42 INS44 MOV44 MOV8 UPD83 INS79 UPD83 INS79 UPD83 UPD83 UPD66 UPD66 INS65 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS65 INS65 INS41 INS43 INS43 INS42 INS25 INS74 MOV42 MOV74 UPD42 UPD42 INS42 INS45 INS42 INS45 INS66 INS66 INS66 INS66 INS22 UPD42 MOV42 UPD42 MOV42 MOV27 INS8 UPD43 MOV43 INS74 INS52 INS42 MOV21 MOV21 UPD42 MOV43 MOV43 MOV74 UPD42 MOV32 UPD42 MOV42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL61 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL45 DEL45 DEL27 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL42 DEL34 DEL27 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL27 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL74 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL9 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL16 DEL36 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL45 DEL27 DEL32 DEL21 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL18 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL18 DEL8 DEL25 DEL25 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL18 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL37 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL27 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL37 DEL21 DEL8 DEL25 DEL42 DEL42 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL61 DEL8 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL10 DEL8 DEL25 DEL8 DEL61 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL18 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL34 DEL27 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL25 DEL42 DEL34 DEL27 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31