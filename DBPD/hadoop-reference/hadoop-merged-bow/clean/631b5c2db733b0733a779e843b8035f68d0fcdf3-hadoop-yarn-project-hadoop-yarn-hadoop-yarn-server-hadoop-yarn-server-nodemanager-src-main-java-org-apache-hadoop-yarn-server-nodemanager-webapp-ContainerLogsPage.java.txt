YARN-5418. When partial log aggregation is enabled, display the list of aggregated files on the container log page. (Xuan Gong via wangda)

Change-Id: I1befb0bbaeb89fb315bafe3e2f3379663f8cf1ec

+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Comparator;
+import java.util.Date;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogFileInfo;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogMeta;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogsRequest;
+import org.apache.hadoop.yarn.logaggregation.filecontroller.LogAggregationFileController;
+import org.apache.hadoop.yarn.logaggregation.filecontroller.LogAggregationFileControllerFactory;
-
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  
+  public static final Logger LOG = LoggerFactory.getLogger(
+      ContainerLogsPage.class);
+
-  
+  public static final String LOG_AGGREGATION_TYPE = "log.aggregation.type";
+  public static final String LOG_AGGREGATION_REMOTE_TYPE = "remote";
+  public static final String LOG_AGGREGATION_LOCAL_TYPE = "local";
+
+    private final LogAggregationFileControllerFactory factory;
+      this.factory = new LogAggregationFileControllerFactory(
+          context.getConf());
-        		" server. Log Server url may not be configured");
+            " server. Log Server url may not be configured");
+      ApplicationId appId;
+        appId = containerId.getApplicationAttemptId().getApplicationId();
+      LogAggregationFileController fileController = null;
+      boolean foundAggregatedLogs = false;
+      try {
+        fileController = this.factory.getFileControllerForRead(
+            appId, $(APP_OWNER));
+        foundAggregatedLogs = true;
+      } catch (IOException fnf) {
+        // Do Nothing
+      }
+
+          html.h2("Local Logs:");
-          printLogFileDirectory(html, logFiles);
+          printLocalLogFileDirectory(html, logFiles);
+          if (foundAggregatedLogs) {
+            // print out the aggregated logs if exists
+            try {
+              ContainerLogsRequest logRequest = new ContainerLogsRequest();
+              logRequest.setAppId(appId);
+              logRequest.setAppOwner($(APP_OWNER));
+              logRequest.setContainerId($(CONTAINER_ID));
+              logRequest.setNodeId(this.nmContext.getNodeId().toString());
+              List<ContainerLogMeta> containersLogMeta = fileController
+                  .readAggregatedLogsMeta(logRequest);
+              if (containersLogMeta != null && !containersLogMeta.isEmpty()) {
+                html.h2("Aggregated Logs:");
+                printAggregatedLogFileDirectory(html, containersLogMeta);
+              }
+            } catch (Exception ex) {
+              if (LOG.isDebugEnabled()) {
+                LOG.debug(ex.getMessage());
+              }
+            }
+          }
-          File logFile = ContainerLogsUtils.getContainerLogFile(containerId,
-              $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);
-          printLogFile(html, logFile);
+          String aggregationType = $(LOG_AGGREGATION_TYPE);
+          if (aggregationType == null || aggregationType.isEmpty() ||
+              aggregationType.trim().toLowerCase().equals(
+                  LOG_AGGREGATION_LOCAL_TYPE)) {
+            File logFile = ContainerLogsUtils.getContainerLogFile(containerId,
+                $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);
+            printLocalLogFile(html, logFile);
+          } else if (!LOG_AGGREGATION_LOCAL_TYPE.trim().toLowerCase().equals(
+              aggregationType) && !LOG_AGGREGATION_REMOTE_TYPE.trim()
+                  .toLowerCase().equals(aggregationType)) {
+            html.h1("Invalid value for query parameter: "
+                + LOG_AGGREGATION_TYPE + ". "
+                + "The valid value could be either "
+                + LOG_AGGREGATION_LOCAL_TYPE + " or "
+                + LOG_AGGREGATION_REMOTE_TYPE + ".");
+          }
-    private void printLogFile(Block html, File logFile) {
+    private void printLocalLogFile(Block html, File logFile) {
-    private void printLogFileDirectory(Block html, List<File> containerLogsDirs) {
+    private void printLocalLogFileDirectory(Block html,
+        List<File> containerLogsDirs) {
+
+    private void printAggregatedLogFileDirectory(Block html,
+        List<ContainerLogMeta> containersLogMeta) throws ParseException {
+      List<ContainerLogFileInfo> filesInfo = new ArrayList<>();
+      for (ContainerLogMeta logMeta : containersLogMeta) {
+        filesInfo.addAll(logMeta.getContainerLogMeta());
+      }
+
+      //sort the list, so we could list the log file in order.
+      Collections.sort(filesInfo, new Comparator<ContainerLogFileInfo>() {
+        @Override
+        public int compare(ContainerLogFileInfo o1,
+            ContainerLogFileInfo o2) {
+          return createAggregatedLogFileName(o1.getFileName(),
+              o1.getLastModifiedTime()).compareTo(
+                  createAggregatedLogFileName(o2.getFileName(),
+                      o2.getLastModifiedTime()));
+        }
+      });
+
+      boolean foundLogFile = false;
+      for (ContainerLogFileInfo fileInfo : filesInfo) {
+        long timestamp = convertDateToTimeStamp(fileInfo.getLastModifiedTime());
+        foundLogFile = true;
+        String fileName = createAggregatedLogFileName(fileInfo.getFileName(),
+            fileInfo.getLastModifiedTime());
+        html.p().a(url("containerlogs", $(CONTAINER_ID), $(APP_OWNER),
+            fileInfo.getFileName(),
+            "?start=-4096&" + LOG_AGGREGATION_TYPE + "="
+                + LOG_AGGREGATION_REMOTE_TYPE + "&start.time="
+                + (timestamp - 1000) + "&end.time=" + (timestamp + 1000)),
+            fileName + " : Total file length is "
+                + fileInfo.getFileSize() + " bytes.").__();
+      }
+
+      if (!foundLogFile) {
+        html.h4("No aggregated logs available for container "
+            + $(CONTAINER_ID));
+        return;
+      }
+    }
+
+    private String createAggregatedLogFileName(String fileName,
+        String modificationTime) {
+      return fileName + "_" + modificationTime;
+    }
+
+    private long convertDateToTimeStamp(String dateTime)
+        throws ParseException {
+      SimpleDateFormat sdf = new SimpleDateFormat(
+          "EEE MMM dd HH:mm:ss Z yyyy");
+      Date d = sdf.parse(dateTime);
+
+      Calendar c = Calendar.getInstance();
+      c.setTime(d);
+      return c.getTimeInMillis();
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS23 INS31 INS31 INS31 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS83 INS83 INS43 INS59 UPD42 UPD42 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS57 INS42 INS42 INS21 INS60 INS60 INS60 INS54 INS43 INS42 INS74 INS42 INS42 INS60 INS70 INS21 INS60 INS70 INS25 INS42 INS43 INS42 INS43 INS42 INS41 INS43 INS42 INS42 INS60 INS60 INS60 INS21 INS41 INS43 INS7 INS43 INS59 INS43 INS59 INS39 INS59 INS8 INS12 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS32 INS39 INS59 INS44 INS42 INS8 INS38 INS8 INS42 INS42 INS27 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS22 INS14 INS42 INS42 INS21 INS42 INS42 INS33 INS42 INS9 INS21 INS21 INS44 INS8 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS42 INS14 INS42 INS9 INS43 INS42 INS60 INS21 INS60 INS21 INS42 INS21 INS41 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS43 INS32 INS7 INS7 INS7 INS43 INS42 INS8 INS42 INS42 INS74 INS42 INS32 INS74 INS1 INS42 INS39 INS59 INS7 INS43 INS59 INS32 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS21 INS25 INS60 INS25 INS43 INS42 INS42 INS32 INS43 INS43 INS31 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS22 INS42 INS42 INS32 INS32 INS42 INS8 INS43 INS59 INS27 MOV8 INS25 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS32 INS27 INS45 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS45 UPD42 INS54 INS42 INS42 INS32 INS27 INS32 INS27 INS8 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS32 INS27 INS42 INS45 INS32 INS45 INS42 INS42 INS8 INS12 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS38 INS38 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS36 INS45 INS36 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS60 INS25 INS44 INS8 INS42 INS33 INS42 INS42 INS32 INS42 UPD42 INS32 INS32 INS32 INS32 INS42 INS32 INS27 INS27 INS43 INS59 INS32 INS32 INS32 INS32 INS74 INS59 INS27 INS8 INS43 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS34 INS42 INS34 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS27 INS38 INS21 INS21 INS42 INS32 INS8 INS32 INS42 INS32 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS32 INS42 INS42