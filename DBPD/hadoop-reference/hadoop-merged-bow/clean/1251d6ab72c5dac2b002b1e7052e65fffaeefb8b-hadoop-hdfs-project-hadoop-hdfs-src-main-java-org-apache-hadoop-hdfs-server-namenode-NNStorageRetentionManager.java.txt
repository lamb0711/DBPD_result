Merge trunk r1595301 to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1595303 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FilenameFilter;
+import java.util.Iterator;
+
+  /**
+   * Delete old OIV fsimages. Since the target dir is not a full blown
+   * storage directory, we simply list and keep the latest ones. For the
+   * same reason, no storage inspector is used.
+   */
+  void purgeOldLegacyOIVImages(String dir, long txid) {
+    File oivImageDir = new File(dir);
+    final String oivImagePrefix = NameNodeFile.IMAGE_LEGACY_OIV.getName();
+    String filesInStorage[];
+
+    // Get the listing
+    filesInStorage = oivImageDir.list(new FilenameFilter() {
+      @Override
+      public boolean accept(File dir, String name) {
+        return name.matches(oivImagePrefix + "_(\\d+)");
+      }
+    });
+
+    // Check whether there is any work to do.
+    if (filesInStorage.length <= numCheckpointsToRetain) {
+      return;
+    }
+
+    // Create a sorted list of txids from the file names.
+    TreeSet<Long> sortedTxIds = new TreeSet<Long>();
+    for (String fName : filesInStorage) {
+      // Extract the transaction id from the file name.
+      long fTxId;
+      try {
+        fTxId = Long.parseLong(fName.substring(oivImagePrefix.length() + 1));
+      } catch (NumberFormatException nfe) {
+        // This should not happen since we have already filtered it.
+        // Log and continue.
+        LOG.warn("Invalid file name. Skipping " + fName);
+        continue;
+      }
+      sortedTxIds.add(Long.valueOf(fTxId));
+    }
+
+    int numFilesToDelete = sortedTxIds.size() - numCheckpointsToRetain;
+    Iterator<Long> iter = sortedTxIds.iterator();
+    while (numFilesToDelete > 0 && iter.hasNext()) {
+      long txIdVal = iter.next().longValue();
+      String fileName = NNStorage.getLegacyOIVImageFileName(txIdVal);
+      LOG.info("Deleting " + fileName);
+      File fileToDelete = new File(oivImageDir, fileName);
+      if (!fileToDelete.delete()) {
+        // deletion failed.
+        LOG.warn("Failed to delete image file: " + fileToDelete);
+      }
+      numFilesToDelete--;
+    }
+  }

INS26 INS26 INS40 INS40 INS31 INS29 INS39 INS42 INS44 INS44 INS8 INS65 INS43 INS42 INS39 INS42 INS60 INS60 INS60 INS21 INS25 INS60 INS70 INS60 INS60 INS61 INS66 INS66 INS66 INS42 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS7 INS27 INS8 INS74 INS59 INS44 INS42 INS8 INS39 INS59 INS74 INS59 INS27 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS85 INS42 INS32 INS40 INS42 INS41 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS54 INS21 INS42 INS27 INS43 INS43 INS42 INS32 INS27 INS32 INS60 INS60 INS21 INS60 INS25 INS21 INS43 INS42 INS40 INS42 INS42 INS42 INS14 INS42 INS42 INS74 INS42 INS39 INS59 INS8 INS12 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS39 INS59 INS43 INS59 INS32 INS43 INS59 INS38 INS8 INS37 INS42 INS43 INS1 INS43 INS43 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS14 INS32 INS21 INS42 INS42 INS31 INS42 INS42 INS7 INS43 INS42 INS21 INS18 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS27 INS32 INS34 INS42 INS45 INS42 INS42