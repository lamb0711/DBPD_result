Fixed TimelineClient to retry SocketTimeoutException too. Contributed by Xuan Gong.

+import java.net.SocketTimeoutException;
-  private static abstract class TimelineClientRetryOp {
+  @Private
+  @VisibleForTesting
+  public static abstract class TimelineClientRetryOp {
-    TimelineClientRetryOp tokenRetryOp = new TimelineClientRetryOp() {
-
-      @Override
-      public Object run() throws IOException {
-        // Try pass the request, if fail, keep retrying
-        authUgi.checkTGTAndReloginFromKeytab();
-        try {
-          return authUgi.doAs(action);
-        } catch (UndeclaredThrowableException e) {
-          throw new IOException(e.getCause());
-        } catch (InterruptedException e) {
-          throw new IOException(e);
-        }
-      }
-
-      @Override
-      public boolean shouldRetryOn(Exception e) {
-        // Only retry on connection exceptions
-        return (e instanceof ConnectException);
-      }
-    };
+    TimelineClientRetryOp tokenRetryOp =
+        createTimelineClientRetryOpForOperateDelegationToken(action);
+
+  @Private
+  @VisibleForTesting
+  public TimelineClientRetryOp
+      createTimelineClientRetryOpForOperateDelegationToken(
+          final PrivilegedExceptionAction<?> action) throws IOException {
+    return new TimelineClientRetryOpForOperateDelegationToken(
+        this.authUgi, action);
+  }
+
+  @Private
+  @VisibleForTesting
+  public class TimelineClientRetryOpForOperateDelegationToken
+      extends TimelineClientRetryOp {
+
+    private final UserGroupInformation authUgi;
+    private final PrivilegedExceptionAction<?> action;
+
+    public TimelineClientRetryOpForOperateDelegationToken(
+        UserGroupInformation authUgi, PrivilegedExceptionAction<?> action) {
+      this.authUgi = authUgi;
+      this.action = action;
+    }
+
+    @Override
+    public Object run() throws IOException {
+      // Try pass the request, if fail, keep retrying
+      authUgi.checkTGTAndReloginFromKeytab();
+      try {
+        return authUgi.doAs(action);
+      } catch (UndeclaredThrowableException e) {
+        throw new IOException(e.getCause());
+      } catch (InterruptedException e) {
+        throw new IOException(e);
+      }
+    }
+
+    @Override
+    public boolean shouldRetryOn(Exception e) {
+      // retry on connection exceptions
+      // and SocketTimeoutException
+      return (e instanceof ConnectException
+          || e instanceof SocketTimeoutException);
+    }
+  }
+

INS26 INS40 INS31 INS55 INS78 INS78 UPD83 INS78 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS78 INS83 INS42 MOV43 INS23 INS23 INS31 MOV31 MOV31 INS42 INS42 INS42 INS42 INS42 INS83 INS74 INS42 INS42 INS41 INS42 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS8 INS43 INS76 INS14 INS42 INS42 INS43 INS76 INS42 INS43 INS42 INS74 INS42 INS21 INS21 INS32 INS42 INS43 INS22 INS42 INS42 INS42 INS43 INS76 INS7 INS7 INS42 INS42 INS42 INS52 INS42 INS42 INS22 INS42 INS22 INS42 INS27 INS52 INS42 INS52 INS42 MOV62 INS62 INS42 INS43 INS42 DEL1 DEL14