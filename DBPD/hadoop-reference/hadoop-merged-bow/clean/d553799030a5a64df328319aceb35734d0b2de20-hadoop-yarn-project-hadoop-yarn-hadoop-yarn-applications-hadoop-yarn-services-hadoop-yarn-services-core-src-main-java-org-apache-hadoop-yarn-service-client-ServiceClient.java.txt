YARN-7984. Improved YARN service stop/destroy and clean up.
           Contributed by Billie Rinaldi

+    ApplicationId appId = getAppId(serviceName);
+    if (appId == null) {
+      String message = "Application ID doesn't exist for " + serviceName;
+      LOG.error(message);
+      throw new YarnException(message);
+    }
-        yarnClient.getApplicationReport(getAppId(serviceName));
+        yarnClient.getApplicationReport(appId);
+    if (currentAppId == null) {
+      LOG.info("Application ID doesn't exist for service {}", serviceName);
+      cleanUpRegistry(serviceName);
+      return EXIT_COMMAND_ARGUMENT_ERROR;
+    }
+      cleanUpRegistry(serviceName);
+      cleanUpRegistry(serviceName);
+        cleanUpRegistry(serviceName);
+        cleanUpRegistry(serviceName);
+    cleanUpRegistry(serviceName);
-    boolean destroySucceed = true;
+    int ret = EXIT_SUCCESS;
-      destroySucceed = false;
+      ret = EXIT_NOT_FOUND;
+      // don't set destroySucceed to false if no ZK node exists because not
+      // all services use a ZK node
+    if (!cleanUpRegistry(serviceName)) {
+      if (ret == EXIT_SUCCESS) {
+        ret = EXIT_OTHER_FAILURE;
+      }
+    }
+    if (ret == EXIT_SUCCESS) {
+      LOG.info("Successfully destroyed service {}", serviceName);
+      return ret;
+    } else if (ret == EXIT_NOT_FOUND) {
+      LOG.error("Error on destroy '" + serviceName + "': not found.");
+      return ret;
+    } else {
+      LOG.error("Error on destroy '" + serviceName + "': error cleaning up " +
+          "registry.");
+      return ret;
+    }
+  }
+
+  private boolean cleanUpRegistry(String serviceName) throws SliderException {
-        destroySucceed = false;
+        // not counted as a failure if the registry entries don't exist
+      return false;
-    if (destroySucceed) {
-      LOG.info("Successfully destroyed service {}", serviceName);
-      return EXIT_SUCCESS;
-    } else {
-      LOG.error("Error on destroy '" + serviceName + "': not found.");
-      return -1;
-    }
+    return true;
-  private boolean deleteZKNode(String clusterName) throws Exception {
+  /**
+   * Delete service's ZK node. This is a different node from the service's
+   * registry entry and is set aside for the service to use for its own ZK data.
+   *
+   * @param serviceName service name
+   * @return true if the node was deleted, false if the node doesn't exist
+   * @throws Exception if the node couldn't be deleted
+   */
+  private boolean deleteZKNode(String serviceName) throws Exception {
-    String zkPath = ServiceRegistryUtils.mkServiceHomePath(user, clusterName);
+    String zkPath = ServiceRegistryUtils.mkServiceHomePath(user, serviceName);
-          "Service '" + clusterName + "' doesn't exist at ZK path: " + zkPath);
+          "Service '" + serviceName + "' doesn't exist at ZK path: " + zkPath);
+    if (currentAppId == null) {
+      throw new YarnException("Application ID not found for " + serviceName);
+    }
-      ApplicationId.fromString(appIdOrName);
-      return getStatusByAppId(appIdOrName);
+      ApplicationId appId = ApplicationId.fromString(appIdOrName);
+      return getStatusByAppId(appId);
-  private String getStatusByAppId(String appId)
+  private String getStatusByAppId(ApplicationId appId)
-        yarnClient.getApplicationReport(ApplicationId.fromString(appId));
+        yarnClient.getApplicationReport(appId);
-    ApplicationId currentAppId = getAppId(serviceName);
-    ApplicationReport appReport = yarnClient.getApplicationReport(currentAppId);
+    ApplicationId currentAppId = getAppId(serviceName);
+    if (currentAppId == null) {
+      LOG.info("Service {} does not have an application ID", serviceName);
+      return appSpec;
+    }
+    ApplicationReport appReport = yarnClient.getApplicationReport(currentAppId);
-    ApplicationId currentAppId = ApplicationId.fromString(persistedService.getId());
+    if (persistedService.getId() == null) {
+      return null;
+    }
+    ApplicationId currentAppId = ApplicationId.fromString(persistedService
+        .getId());

INS31 INS83 INS39 INS42 INS44 INS43 INS8 INS29 MOV60 MOV60 INS25 INS60 INS25 INS21 INS25 INS43 INS42 INS42 MOV60 MOV54 INS41 INS65 INS65 INS65 INS65 UPD42 INS25 UPD43 INS25 INS25 INS43 INS27 INS8 MOV43 INS59 INS27 INS8 INS32 UPD39 INS38 INS8 INS27 INS25 INS42 INS9 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS27 INS8 UPD42 INS27 INS8 INS27 INS8 INS42 UPD42 MOV32 INS42 INS33 INS60 INS21 INS53 INS42 INS32 INS42 INS33 INS21 INS21 INS41 INS21 INS21 INS42 INS42 UPD42 INS42 INS32 INS25 INS42 INS42 INS27 MOV8 INS8 INS42 INS33 INS53 INS60 INS42 INS33 INS21 INS41 INS32 INS33 INS41 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS27 INS8 UPD42 INS42 INS42 INS21 INS41 INS41 UPD42 INS14 INS43 INS59 MOV42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 UPD42 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS9 INS43 INS27 INS42 INS42 MOV32 UPD42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS32 INS7 INS42 INS42 INS27 UPD42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS45 DEL42 DEL42 DEL32 DEL9 DEL9 DEL42 DEL34 DEL38 DEL42 DEL9 DEL7 DEL21 DEL21 DEL42 DEL42 DEL32