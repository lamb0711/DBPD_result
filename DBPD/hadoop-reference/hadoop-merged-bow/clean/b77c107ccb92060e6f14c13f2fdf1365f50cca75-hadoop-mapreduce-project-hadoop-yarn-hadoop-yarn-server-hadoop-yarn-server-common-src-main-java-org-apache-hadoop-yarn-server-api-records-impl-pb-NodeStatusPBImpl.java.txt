Committing rest of merge from trunk (accidentally only committed the HDFS portion before)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1214546 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.api.records.impl.pb.ApplicationIdPBImpl;
+import org.apache.hadoop.yarn.proto.YarnProtos.ApplicationIdProto;
-public class NodeStatusPBImpl extends ProtoBase<NodeStatusProto> implements NodeStatus {
+
+public class NodeStatusPBImpl extends ProtoBase<NodeStatusProto> implements
+    NodeStatus {
+  private List<ApplicationId> keepAliveApplications = null;
-  public NodeStatusProto getProto() {
-
-      mergeLocalToProto();
+  public synchronized NodeStatusProto getProto() {
+    mergeLocalToProto();
-  private void mergeLocalToBuilder() {
+  private synchronized void mergeLocalToBuilder() {
+    if (this.keepAliveApplications != null) {
+      addKeepAliveApplicationsToProto();
+    }
-  private void mergeLocalToProto() {
+  private synchronized void mergeLocalToProto() {
-  private void maybeInitBuilder() {
+  private synchronized void maybeInitBuilder() {
-  private void addContainersToProto() {
+  private synchronized void addContainersToProto() {
+  
+  private synchronized void addKeepAliveApplicationsToProto() {
+    maybeInitBuilder();
+    builder.clearKeepAliveApplications();
+    if (keepAliveApplications == null)
+      return;
+    Iterable<ApplicationIdProto> iterable = new Iterable<ApplicationIdProto>() {
+      @Override
+      public Iterator<ApplicationIdProto> iterator() {
+        return new Iterator<ApplicationIdProto>() {
+  
+          Iterator<ApplicationId> iter = keepAliveApplications.iterator();
+  
+          @Override
+          public boolean hasNext() {
+            return iter.hasNext();
+          }
+  
+          @Override
+          public ApplicationIdProto next() {
+            return convertToProtoFormat(iter.next());
+          }
+  
+          @Override
+          public void remove() {
+            throw new UnsupportedOperationException();
+  
+          }
+        };
+  
+      }
+    };
+    builder.addAllKeepAliveApplications(iterable);
+  }
-  public int getResponseId() {
+  public synchronized int getResponseId() {
-  public void setResponseId(int responseId) {
+  public synchronized void setResponseId(int responseId) {
-  public NodeId getNodeId() {
+  public synchronized NodeId getNodeId() {
+  
-  public void setNodeId(NodeId nodeId) {
+  public synchronized void setNodeId(NodeId nodeId) {
-  public List<ContainerStatus> getContainersStatuses() {
+  public synchronized List<ContainerStatus> getContainersStatuses() {
-  public void setContainersStatuses(List<ContainerStatus> containers) {
+  public synchronized void setContainersStatuses(
+      List<ContainerStatus> containers) {
+  
+  @Override
+  public synchronized List<ApplicationId> getKeepAliveApplications() {
+    initKeepAliveApplications();
+    return this.keepAliveApplications;
+  }
+  
+  @Override
+  public synchronized void setKeepAliveApplications(List<ApplicationId> appIds) {
+    if (appIds == null) {
+      builder.clearKeepAliveApplications();
+    }
+    this.keepAliveApplications = appIds;
+  }
-  private void initContainers() {
+  private synchronized void initContainers() {
+  private synchronized void initKeepAliveApplications() {
+    if (this.keepAliveApplications != null) {
+      return;
+    }
+    NodeStatusProtoOrBuilder p = viaProto ? proto : builder;
+    List<ApplicationIdProto> list = p.getKeepAliveApplicationsList();
+    this.keepAliveApplications = new ArrayList<ApplicationId>();
+
+    for (ApplicationIdProto c : list) {
+      this.keepAliveApplications.add(convertFromProtoFormat(c));
+    }
+    
+  }
+  
-  public NodeHealthStatus getNodeHealthStatus() {
+  public synchronized NodeHealthStatus getNodeHealthStatus() {
-  public void setNodeHealthStatus(NodeHealthStatus healthStatus) {
+  public synchronized void setNodeHealthStatus(NodeHealthStatus healthStatus) {
-}  
+  
+  private ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto c) {
+    return new ApplicationIdPBImpl(c);
+  }
+  
+  private ApplicationIdProto convertToProtoFormat(ApplicationId c) {
+    return ((ApplicationIdPBImpl)c).getProto();
+  }
+}

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS83 INS83 INS83 INS83 INS78 INS83 INS83 INS74 INS42 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS42 INS33 INS25 INS21 INS21 INS25 INS60 INS21 INS42 INS43 INS43 INS21 INS41 INS42 INS74 INS42 INS25 INS21 INS25 INS60 INS60 INS21 INS70 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS42 INS27 INS8 INS32 INS32 INS27 INS41 INS74 INS59 INS32 INS42 INS42 INS32 INS22 INS43 INS43 INS27 INS8 INS7 INS27 INS8 INS43 INS59 INS74 INS59 INS7 INS44 INS42 INS8 INS42 INS14 INS42 INS32 INS22 INS33 INS21 INS42 INS42 INS42 INS42 INS33 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS33 INS21 INS22 INS42 INS22 INS33 INS41 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS22 INS14 INS43 INS42 INS21 INS43 INS42 INS36 INS42 INS52 INS42 INS32 INS42 INS42 INS74 INS1 INS32 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS74 INS42 INS32 INS42 INS11 INS42 INS43 INS43 INS31 INS42 INS42 INS43 INS43 INS22 INS42 INS32 INS43 INS42 INS42 INS42 INS78 INS83 INS74 INS42 INS8 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS41 INS42 INS42 INS14 INS74 INS1 INS43 INS43 INS23 INS31 INS31 INS31 INS42 INS42 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS32 INS42 INS41 INS42 INS42 INS41 INS42 INS53 INS42 INS42 INS42 INS42 INS32 INS32 INS14 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42