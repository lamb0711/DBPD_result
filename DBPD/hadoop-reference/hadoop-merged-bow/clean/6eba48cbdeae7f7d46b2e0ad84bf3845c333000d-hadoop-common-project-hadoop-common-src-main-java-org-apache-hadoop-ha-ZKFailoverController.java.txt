HADOOP-10251. Both NameNodes could be in STANDBY State if SNN network is unstable. Contributed by Vinayakumar B.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1589494 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.ha.HAServiceProtocol.HAServiceState;
+  private volatile HAServiceState serviceState = HAServiceState.INITIALIZING;
+
+    healthMonitor.addServiceStateCallback(new ServiceStateCallBacks());
+      serviceState = HAServiceState.ACTIVE;
+    serviceState = HAServiceState.STANDBY;
+        serviceState = HAServiceState.INITIALIZING;
+          if (quitElectionOnBadState) {
+            quitElectionOnBadState = false;
+          }
+          serviceState = HAServiceState.INITIALIZING;
+          serviceState = HAServiceState.INITIALIZING;
+  int serviceStateMismatchCount = 0;
+  boolean quitElectionOnBadState = false;
+
+  void verifyChangedServiceState(HAServiceState changedState) {
+    synchronized (elector) {
+      synchronized (this) {
+        if (serviceState == HAServiceState.INITIALIZING) {
+          if (quitElectionOnBadState) {
+            LOG.debug("rechecking for electability from bad state");
+            recheckElectability();
+          }
+          return;
+        }
+        if (changedState == serviceState) {
+          serviceStateMismatchCount = 0;
+          return;
+        }
+        if (serviceStateMismatchCount == 0) {
+          // recheck one more time. As this might be due to parallel transition.
+          serviceStateMismatchCount++;
+          return;
+        }
+        // quit the election as the expected state and reported state
+        // mismatches.
+        LOG.error("Local service " + localTarget
+            + " has changed the serviceState to " + changedState
+            + ". Expected was " + serviceState
+            + ". Quitting election marking fencing necessary.");
+        delayJoiningUntilNanotime = System.nanoTime()
+            + TimeUnit.MILLISECONDS.toNanos(1000);
+        elector.quitElection(true);
+        quitElectionOnBadState = true;
+        serviceStateMismatchCount = 0;
+        serviceState = HAServiceState.INITIALIZING;
+      }
+    }
+  }
+
-  
+
+  /**
+   * Callbacks for HAServiceStatus
+   */
+  class ServiceStateCallBacks implements HealthMonitor.ServiceStateCallback {
+    @Override
+    public void reportServiceStatus(HAServiceStatus status) {
+      verifyChangedServiceState(status.getState());
+    }
+  }
+

INS26 INS40 INS23 INS23 INS23 INS31 INS55 INS83 INS83 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS42 INS44 INS8 INS29 INS42 INS43 INS31 INS42 INS42 INS40 INS21 INS21 INS42 INS34 INS42 INS9 INS43 INS42 INS51 INS65 INS40 INS78 INS83 INS39 INS42 INS44 INS8 INS32 INS7 INS42 INS42 INS8 INS66 INS42 INS43 INS42 INS21 INS42 INS42 INS14 INS21 INS42 INS40 INS51 INS42 INS32 INS43 INS7 INS52 INS8 INS42 INS32 INS42 INS42 INS40 INS21 INS25 INS25 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS7 INS25 INS21 INS21 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS7 INS32 INS7 INS7 INS7 INS42 INS40 INS42 INS8 INS7 INS7 INS42 INS40 INS25 INS41 INS42 INS42 INS21 INS41 INS42 INS34 INS21 INS41 INS42 INS42 INS27 INS42 INS27 INS42 INS42 INS9 INS42 INS9 INS42 INS34 INS42 INS40 INS21 INS42 INS40 INS42 INS40 INS42 INS8 INS7 INS37 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS32 INS7 INS21 INS21 INS42 INS34 INS42 INS42 INS42 INS40 INS42 INS34 INS42 INS9 INS32 INS32 INS42 INS42 INS45 INS42