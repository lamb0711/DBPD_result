YARN-4905. Improved "yarn logs" command-line to optionally show log metadata also. Contributed by Xuan Gong.

-    Path remoteRootLogDir = new Path(getConf().get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String suffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf());
-    Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(
-        remoteRootLogDir, applicationId, jobOwner,
-        suffix);
-    RemoteIterator<FileStatus> nodeFiles;
-    try {
-      Path qualifiedLogDir =
-          FileContext.getFileContext(getConf()).makeQualified(
-            remoteAppLogDir);
-      nodeFiles =
-          FileContext.getFileContext(qualifiedLogDir.toUri(), getConf())
-            .listStatus(remoteAppLogDir);
-    } catch (FileNotFoundException fnf) {
-      logDirNotExist(remoteAppLogDir.toString());
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        applicationId, jobOwner);
+    if (nodeFiles == null) {
-    Path remoteRootLogDir = new Path(getConf().get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String user = jobOwner;
-    String logDirSuffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(
-        getConf());
-    Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(
-        remoteRootLogDir, applicationId, user, logDirSuffix);
-    RemoteIterator<FileStatus> nodeFiles;
-    try {
-      Path qualifiedLogDir =
-          FileContext.getFileContext(getConf()).makeQualified(remoteAppLogDir);
-      nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(),
-          getConf()).listStatus(remoteAppLogDir);
-    } catch (FileNotFoundException fnf) {
-      logDirNotExist(remoteAppLogDir.toString());
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        applicationId, jobOwner);
+    if (nodeFiles == null) {
-    Path remoteRootLogDir = new Path(getConf().get(
-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-    String user = appOwner;
-    String logDirSuffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf());
-    // TODO Change this to get a list of files from the LAS.
-    Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(
-        remoteRootLogDir, appId, user, logDirSuffix);
-    RemoteIterator<FileStatus> nodeFiles;
-    try {
-      Path qualifiedLogDir =
-          FileContext.getFileContext(getConf()).makeQualified(remoteAppLogDir);
-      nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(),
-          getConf()).listStatus(remoteAppLogDir);
-    } catch (FileNotFoundException fnf) {
-      logDirNotExist(remoteAppLogDir.toString());
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        appId, appOwner);
+    if (nodeFiles == null) {
-      emptyLogDir(remoteAppLogDir.toString());
+      emptyLogDir(getRemoteAppLogDir(appId, appOwner).toString());
+  @Private
+  public void printLogMetadata(ApplicationId appId,
+      String containerIdStr, String nodeId, String appOwner,
+      PrintStream out, PrintStream err)
+      throws IOException {
+    boolean getAllContainers = (containerIdStr == null);
+    String nodeIdStr = (nodeId == null) ? null
+        : LogAggregationUtils.getNodeString(nodeId);
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        appId, appOwner);
+    if (nodeFiles == null) {
+      return;
+    }
+    boolean foundAnyLogs = false;
+    while (nodeFiles.hasNext()) {
+      FileStatus thisNodeFile = nodeFiles.next();
+      if (nodeIdStr != null) {
+        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {
+          continue;
+        }
+      }
+      if (!thisNodeFile.getPath().getName()
+          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
+        AggregatedLogFormat.LogReader reader =
+            new AggregatedLogFormat.LogReader(getConf(),
+            thisNodeFile.getPath());
+        try {
+          DataInputStream valueStream;
+          LogKey key = new LogKey();
+          valueStream = reader.next(key);
+          while (valueStream != null) {
+            if (getAllContainers || (key.toString().equals(containerIdStr))) {
+              String containerString =
+                  "\n\nContainer: " + key + " on "
+                  + thisNodeFile.getPath().getName();
+              out.println(containerString);
+              out.println("Log Upload Time:"
+                  + thisNodeFile.getModificationTime());
+              out.println(StringUtils.repeat("=", containerString.length()));
+              while (true) {
+                try {
+                  LogReader.readContainerMetaDataAndSkipData(valueStream, out);
+                } catch (EOFException eof) {
+                  break;
+                }
+              }
+              foundAnyLogs = true;
+              if (!getAllContainers) {
+                break;
+              }
+            }
+            // Next container
+            key = new LogKey();
+            valueStream = reader.next(key);
+          }
+        } finally {
+          reader.close();
+        }
+      }
+    }
+    if (!foundAnyLogs) {
+      if (containerIdStr != null && nodeId != null) {
+        err.println("The container " + containerIdStr + " couldn't be found "
+            + "on the node specified: " + nodeId);
+      } else if (nodeId != null) {
+        err.println("Can not find log metadata for any containers on "
+            + nodeId);
+      } else if (containerIdStr != null) {
+        err.println("Can not find log metadata for container: "
+            + containerIdStr);
+      }
+    }
+  }
+
+  @Private
+  public void printNodesList(ApplicationId appId, String appOwner,
+      PrintStream out, PrintStream err) throws IOException {
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        appId, appOwner);
+    if (nodeFiles == null) {
+      return;
+    }
+    boolean foundNode = false;
+    StringBuilder sb = new StringBuilder();
+    while (nodeFiles.hasNext()) {
+      FileStatus thisNodeFile = nodeFiles.next();
+      sb.append(thisNodeFile.getPath().getName() + "\n");
+      foundNode = true;
+    }
+    if (!foundNode) {
+      err.println("No nodes found that aggregated logs for "
+          + "the application: " + appId);
+    } else {
+      out.println(sb.toString());
+    }
+  }
+
+  private RemoteIterator<FileStatus> getRemoteNodeFileDir(ApplicationId appId,
+      String appOwner) throws IOException {
+    Path remoteAppLogDir = getRemoteAppLogDir(appId, appOwner);
+    RemoteIterator<FileStatus> nodeFiles = null;
+    try {
+      Path qualifiedLogDir =
+          FileContext.getFileContext(getConf()).makeQualified(remoteAppLogDir);
+      nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(),
+          getConf()).listStatus(remoteAppLogDir);
+    } catch (FileNotFoundException fnf) {
+      logDirNotExist(remoteAppLogDir.toString());
+    }
+    return nodeFiles;
+  }
+
+  private Path getRemoteAppLogDir(ApplicationId appId, String appOwner) {
+    Path remoteRootLogDir = new Path(getConf().get(
+        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
+        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
+    String user = appOwner;
+    String logDirSuffix = LogAggregationUtils
+        .getRemoteNodeLogDirSuffix(getConf());
+    // TODO Change this to get a list of files from the LAS.
+    return LogAggregationUtils.getRemoteAppLogDir(
+        remoteRootLogDir, appId, user, logDirSuffix);
+  }
+
-    System.out.println("Logs for container " + containerId
+    System.err.println("Logs for container " + containerId
-    System.out.println(remoteAppLogDir + " does not exist.");
-    System.out.println("Log aggregation has not completed or is not enabled.");
+    System.err.println(remoteAppLogDir + " does not exist.");
+    System.err.println("Log aggregation has not completed or is not enabled.");
-    System.out.println(remoteAppLogDir + " does not have any log files.");
+    System.err.println(remoteAppLogDir + " does not have any log files.");

INS31 INS31 INS31 INS31 MOV25 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS83 MOV43 INS42 INS44 INS44 INS8 INS25 INS25 INS25 INS42 INS43 INS42 MOV43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 MOV60 INS25 INS60 INS61 INS25 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS60 INS61 INS25 INS43 INS43 INS43 INS42 INS43 INS42 INS42 INS60 INS60 MOV54 INS41 INS43 INS42 INS43 INS42 MOV60 MOV60 MOV60 INS41 INS27 MOV8 INS27 MOV8 INS74 INS27 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS39 INS59 MOV43 INS59 INS27 INS8 INS39 INS59 INS32 INS8 MOV38 INS8 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS32 INS8 INS38 INS8 INS8 INS42 INS42 INS42 INS42 MOV43 INS59 INS74 INS59 INS42 INS42 INS42 MOV32 INS32 INS42 INS33 INS32 INS42 INS33 INS43 INS43 INS42 INS32 INS42 INS33 INS42 INS21 MOV41 INS42 INS36 INS42 INS16 INS32 INS42 INS33 INS41 INS42 INS9 INS42 INS42 INS60 INS25 INS25 INS25 INS43 INS43 INS42 INS32 INS42 INS33 INS41 INS42 INS9 INS42 INS42 INS14 INS42 INS42 INS60 INS21 INS21 INS42 INS21 INS21 INS42 INS32 INS43 INS43 INS42 INS33 UPD40 UPD40 UPD40 UPD40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS36 INS33 INS32 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS38 INS8 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS59 INS32 INS7 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS32 INS60 INS54 INS27 INS27 INS21 INS27 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS42 INS42 INS33 INS42 INS42 INS38 INS8 INS32 INS42 INS40 INS43 INS59 INS8 INS8 INS42 INS33 INS42 INS33 INS32 INS42 INS33 INS21 INS27 INS8 INS42 INS42 INS32 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS18 INS32 INS42 INS40 INS42 INS14 INS60 INS60 INS21 INS61 INS21 INS42 INS42 INS27 INS32 INS42 INS33 INS21 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 MOV32 INS32 INS43 INS59 INS43 INS59 INS7 INS27 INS8 INS32 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS33 INS25 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS8 INS7 INS7 INS45 INS42 INS42 INS42 INS36 INS60 INS21 INS21 INS21 INS61 INS21 INS25 INS42 INS14 INS42 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS9 INS8 INS7 INS38 INS8 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS54 INS42 INS9 INS42 INS10 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS45 INS32 INS8 INS12 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS43 INS42 INS10 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL40 DEL40 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL40 DEL40 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21