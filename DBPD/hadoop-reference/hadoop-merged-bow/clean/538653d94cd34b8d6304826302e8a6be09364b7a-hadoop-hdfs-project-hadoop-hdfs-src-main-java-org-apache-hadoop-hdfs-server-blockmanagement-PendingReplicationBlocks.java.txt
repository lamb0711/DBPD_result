HDFS-5020. Make DatanodeProtocol#blockReceivedAndDeleted idempotent. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506421 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import java.util.List;
+   * @param block The corresponding block
+   * @param targets The DataNodes where replicas of the block should be placed
-  void increment(Block block, int numReplicas) {
+  void increment(Block block, DatanodeDescriptor[] targets) {
-        pendingReplications.put(block, new PendingBlockInfo(numReplicas));
+        pendingReplications.put(block, new PendingBlockInfo(targets));
-        found.incrementReplicas(numReplicas);
+        found.incrementReplicas(targets);
+   * 
+   * @param The DataNode that finishes the replication
-  void decrement(Block block) {
+  void decrement(Block block, DatanodeDescriptor dn) {
-        found.decrementReplicas();
+        found.decrementReplicas(dn);
-                                                new Block[timedOutItems.size()]);
+          new Block[timedOutItems.size()]);
-   * block. It also records the number of replication
-   * requests that are in progress.
+   * block. It also records the list of Datanodes where the 
+   * replication requests are in progress.
-    private int numReplicasInProgress;
+    private final List<DatanodeDescriptor> targets;
-    PendingBlockInfo(int numReplicas) {
+    PendingBlockInfo(DatanodeDescriptor[] targets) {
-      this.numReplicasInProgress = numReplicas;
+      this.targets = targets == null ? new ArrayList<DatanodeDescriptor>()
+          : new ArrayList<DatanodeDescriptor>(Arrays.asList(targets));
-    void incrementReplicas(int increment) {
-      numReplicasInProgress += increment;
+    void incrementReplicas(DatanodeDescriptor... newTargets) {
+      if (newTargets != null) {
+        for (DatanodeDescriptor dn : newTargets) {
+          targets.add(dn);
+        }
+      }
-    void decrementReplicas() {
-      numReplicasInProgress--;
-      assert(numReplicasInProgress >= 0);
+    void decrementReplicas(DatanodeDescriptor dn) {
+      targets.remove(dn);
-      return numReplicasInProgress;
+      return targets.size();
-                    pendingBlock.numReplicasInProgress);
+                    pendingBlock.getNumReplicas());

INS26 INS26 INS40 INS40 INS44 INS65 INS65 INS5 UPD42 INS65 INS43 INS42 INS83 INS74 INS8 INS44 INS42 INS66 INS42 INS66 INS43 INS85 INS42 INS66 INS42 UPD66 UPD66 INS43 INS43 UPD42 INS5 UPD42 INS43 INS42 INS25 INS43 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS27 INS8 INS42 INS32 INS32 INS42 INS16 INS42 INS33 INS70 INS42 INS42 INS42 INS42 INS42 UPD42 INS27 INS14 INS14 INS44 INS42 INS8 INS42 INS33 INS74 INS74 INS32 INS43 INS42 MOV21 UPD42 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL39 DEL39 DEL39 DEL42 DEL39 DEL42 DEL42 DEL42 DEL7 DEL8 DEL42 DEL37 DEL42 DEL34 DEL27 DEL36 DEL6 DEL42 DEL40