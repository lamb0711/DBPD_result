HDFS-5496. Make replication queue initialization asynchronous. Contributed by Vinay.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1552109 13f79535-47bb-0310-9956-ffa450edef68

+  /**
+   * Process replication queues asynchronously to allow namenode safemode exit
+   * and failover to be faster. HDFS-5496
+   */
+  private Daemon replicationQueuesInitializer = null;
+  /**
+   * Number of blocks to process asychronously for replication queues
+   * initialization once aquired the namesystem lock. Remaining blocks will be
+   * processed again after aquiring lock again.
+   */
+  private int numBlocksPerIteration;
+  /**
+   * Progress of the Replication queues initialisation.
+   */
+  private double replicationQueuesInitProgress = 0.0;
+
+    this.numBlocksPerIteration = conf.getInt(
+        DFSConfigKeys.DFS_BLOCK_MISREPLICATION_PROCESSING_LIMIT,
+        DFSConfigKeys.DFS_BLOCK_MISREPLICATION_PROCESSING_LIMIT_DEFAULT);
-
-    long nrInvalid = 0, nrOverReplicated = 0, nrUnderReplicated = 0, nrPostponed = 0,
-         nrUnderConstruction = 0;
+    stopReplicationInitializer();
-    for (BlockInfo block : blocksMap.getBlocks()) {
-      MisReplicationResult res = processMisReplicatedBlock(block);
-      if (LOG.isTraceEnabled()) {
-        LOG.trace("block " + block + ": " + res);
+    replicationQueuesInitializer = new Daemon() {
+
+      @Override
+      public void run() {
+        try {
+          processMisReplicatesAsync();
+        } catch (InterruptedException ie) {
+          LOG.info("Interrupted while processing replication queues.");
+        } catch (Exception e) {
+          LOG.error("Error while processing replication queues async", e);
+        }
-      switch (res) {
-      case UNDER_REPLICATED:
-        nrUnderReplicated++;
-        break;
-      case OVER_REPLICATED:
-        nrOverReplicated++;
-        break;
-      case INVALID:
-        nrInvalid++;
-        break;
-      case POSTPONE:
-        nrPostponed++;
-        postponeBlock(block);
-        break;
-      case UNDER_CONSTRUCTION:
-        nrUnderConstruction++;
-        break;
-      case OK:
-        break;
-      default:
-        throw new AssertionError("Invalid enum value: " + res);
+    };
+    replicationQueuesInitializer.setName("Replication Queue Initializer");
+    replicationQueuesInitializer.start();
+  }
+
+  /*
+   * Stop the ongoing initialisation of replication queues
+   */
+  private void stopReplicationInitializer() {
+    if (replicationQueuesInitializer != null) {
+      replicationQueuesInitializer.interrupt();
+      try {
+        replicationQueuesInitializer.join();
+      } catch (final InterruptedException e) {
+        LOG.warn("Interrupted while waiting for replicationQueueInitializer. Returning..");
+        return;
+      } finally {
+        replicationQueuesInitializer = null;
-    
-    LOG.info("Total number of blocks            = " + blocksMap.size());
-    LOG.info("Number of invalid blocks          = " + nrInvalid);
-    LOG.info("Number of under-replicated blocks = " + nrUnderReplicated);
-    LOG.info("Number of  over-replicated blocks = " + nrOverReplicated +
-        ((nrPostponed > 0) ? ( " (" + nrPostponed + " postponed)") : ""));
-    LOG.info("Number of blocks being written    = " + nrUnderConstruction);
+  }
+
+  /*
+   * Since the BlocksMapGset does not throw the ConcurrentModificationException
+   * and supports further iteration after modification to list, there is a
+   * chance of missing the newly added block while iterating. Since every
+   * addition to blocksMap will check for mis-replication, missing mis-replication
+   * check for new blocks will not be a problem.
+   */
+  private void processMisReplicatesAsync() throws InterruptedException {
+    long nrInvalid = 0, nrOverReplicated = 0;
+    long nrUnderReplicated = 0, nrPostponed = 0, nrUnderConstruction = 0;
+    long startTimeMisReplicatedScan = Time.now();
+    Iterator<BlockInfo> blocksItr = blocksMap.getBlocks().iterator();
+    long totalBlocks = blocksMap.size();
+    replicationQueuesInitProgress = 0;
+    long totalProcessed = 0;
+    while (namesystem.isRunning() && !Thread.currentThread().isInterrupted()) {
+      int processed = 0;
+      namesystem.writeLockInterruptibly();
+      try {
+        while (processed < numBlocksPerIteration && blocksItr.hasNext()) {
+          BlockInfo block = blocksItr.next();
+          MisReplicationResult res = processMisReplicatedBlock(block);
+          if (LOG.isTraceEnabled()) {
+            LOG.trace("block " + block + ": " + res);
+          }
+          switch (res) {
+          case UNDER_REPLICATED:
+            nrUnderReplicated++;
+            break;
+          case OVER_REPLICATED:
+            nrOverReplicated++;
+            break;
+          case INVALID:
+            nrInvalid++;
+            break;
+          case POSTPONE:
+            nrPostponed++;
+            postponeBlock(block);
+            break;
+          case UNDER_CONSTRUCTION:
+            nrUnderConstruction++;
+            break;
+          case OK:
+            break;
+          default:
+            throw new AssertionError("Invalid enum value: " + res);
+          }
+          processed++;
+        }
+        totalProcessed += processed;
+        // there is a possibility that if any of the blocks deleted/added during
+        // initialisation, then progress might be different.
+        replicationQueuesInitProgress = Math.min((double) totalProcessed
+            / totalBlocks, 1.0);
+
+        if (!blocksItr.hasNext()) {
+          LOG.info("Total number of blocks            = " + blocksMap.size());
+          LOG.info("Number of invalid blocks          = " + nrInvalid);
+          LOG.info("Number of under-replicated blocks = " + nrUnderReplicated);
+          LOG.info("Number of  over-replicated blocks = " + nrOverReplicated
+              + ((nrPostponed > 0) ? (" (" + nrPostponed + " postponed)") : ""));
+          LOG.info("Number of blocks being written    = " + nrUnderConstruction);
+          NameNode.stateChangeLog
+              .info("STATE* Replication Queue initialization "
+                  + "scan for invalid, over- and under-replicated blocks "
+                  + "completed in " + (Time.now() - startTimeMisReplicatedScan)
+                  + " msec");
+          break;
+        }
+      } finally {
+        namesystem.writeUnlock();
+      }
+    }
+    if (Thread.currentThread().isInterrupted()) {
+      LOG.info("Interrupted while processing replication queues.");
+    }
+  }
+
+  /**
+   * Get the progress of the Replication queues initialisation
+   * 
+   * @return Returns values between 0 and 1 for the progress.
+   */
+  public double getReplicationQueuesInitProgress() {
+    return replicationQueuesInitProgress;
+    stopReplicationInitializer();

INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 MOV29 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 UPD83 UPD42 INS43 INS8 INS29 INS83 INS39 INS42 INS8 INS65 INS42 INS42 INS33 INS65 INS42 INS65 INS42 INS34 INS21 MOV6 INS21 MOV21 INS21 INS21 INS21 INS25 INS42 INS60 MOV60 INS60 INS60 INS60 INS21 INS60 INS61 INS25 INS65 INS65 INS41 INS21 INS66 INS66 INS66 INS66 INS66 INS66 INS7 INS32 INS7 INS32 INS32 INS27 INS8 INS39 MOV59 MOV59 INS39 INS59 INS74 INS59 INS39 INS59 INS7 INS39 INS59 INS27 INS8 INS32 INS8 INS66 INS66 INS42 INS32 INS22 INS32 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS33 INS21 INS54 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS34 INS42 INS34 INS32 INS38 INS60 INS21 INS54 INS32 INS42 INS21 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS43 INS1 INS32 INS8 INS12 INS8 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS32 MOV8 INS8 INS42 INS42 INS32 INS42 INS31 INS42 INS42 INS21 INS44 INS8 INS21 INS32 INS42 INS42 INS34 INS42 INS42 INS61 INS21 INS21 INS25 INS21 INS42 INS42 INS45 INS78 INS83 INS39 INS42 INS8 INS32 INS83 INS43 INS42 INS21 INS41 INS7 INS42 INS42 INS27 MOV8 INS7 INS7 INS38 INS8 INS32 INS42 INS54 INS42 INS42 INS42 INS32 INS42 INS33 INS27 INS32 INS60 INS21 INS42 INS42 INS42 INS32 INS32 MOV21 MOV21 MOV21 MOV21 MOV21 INS21 INS10 INS42 INS42 INS8 INS12 INS12 INS42 INS42 INS45 INS42 INS42 INS42 INS42 MOV43 INS59 INS37 INS42 INS42 INS27 INS34 INS42 INS42 INS32 INS21 INS44 INS8 INS44 INS8 INS42 INS32 INS42 INS11 INS42 INS40 INS42 INS27 INS32 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS42 INS39 INS42 INS27 INS36 INS45 INS42 INS42 INS32 INS42 INS32 INS45 INS45 INS45 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 DEL42 DEL44 DEL70