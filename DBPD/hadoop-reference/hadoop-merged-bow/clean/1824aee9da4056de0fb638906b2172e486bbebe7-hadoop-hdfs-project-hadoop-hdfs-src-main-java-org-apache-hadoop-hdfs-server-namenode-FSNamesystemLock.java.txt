HDFS-15217 Add more information to longest write/read lock held log


+import java.util.function.Supplier;
-      new AtomicReference<>(new LockHeldInfo(0, 0, null));
-  private LockHeldInfo longestWriteLockHeldInfo = new LockHeldInfo(0, 0, null);
+      new AtomicReference<>(new LockHeldInfo());
+  private LockHeldInfo longestWriteLockHeldInfo = new LockHeldInfo();
-    readUnlock(OP_NAME_OTHER);
+    readUnlock(OP_NAME_OTHER, null);
+    readUnlock(opName, null);
+  }
+
+  public void readUnlock(String opName,
+      Supplier<String> lockReportInfoSupplier) {
-      LockHeldInfo localLockHeldInfo;
-      do {
-        localLockHeldInfo = longestReadLockHeldInfo.get();
-      } while (localLockHeldInfo.getIntervalMs() - readLockIntervalMs < 0 &&
-          !longestReadLockHeldInfo.compareAndSet(localLockHeldInfo,
+      String lockReportInfo = null;
+      boolean done = false;
+      while (!done) {
+        LockHeldInfo localLockHeldInfo = longestReadLockHeldInfo.get();
+        if (localLockHeldInfo.getIntervalMs() <= readLockIntervalMs) {
+          if (lockReportInfo == null) {
+            lockReportInfo = lockReportInfoSupplier != null ? " (" +
+                lockReportInfoSupplier.get() + ")" : "";
+          }
+          if (longestReadLockHeldInfo.compareAndSet(localLockHeldInfo,
-                  StringUtils.getStackTrace(Thread.currentThread()))));
+              StringUtils.getStackTrace(Thread.currentThread()), opName,
+              lockReportInfo))) {
+            done = true;
+          }
+        } else {
+          done = true;
+        }
+      }
-          longestReadLockHeldInfo.getAndSet(new LockHeldInfo(0, 0, null));
+          longestReadLockHeldInfo.getAndSet(new LockHeldInfo());
-              + "\n\tLongest read-lock held at {} for {}ms via {}",
+              + "\n\tLongest read-lock held at {} for {}ms by {}{} via {}",
-          lockHeldInfo.getIntervalMs(), lockHeldInfo.getStackTrace());
+          lockHeldInfo.getIntervalMs(), lockHeldInfo.getOpName(),
+          lockHeldInfo.getLockReportInfo(), lockHeldInfo.getStackTrace());
-   * FSNamesystemLock#writeUnlock(String, boolean)}
+   * FSNamesystemLock#writeUnlock(String, boolean, Supplier)}
-    writeUnlock(OP_NAME_OTHER, false);
+    writeUnlock(OP_NAME_OTHER, false, null);
-   * FSNamesystemLock#writeUnlock(String, boolean)}
+   * FSNamesystemLock#writeUnlock(String, boolean, Supplier)}
-    writeUnlock(opName, false);
+    writeUnlock(opName, false, null);
+  }
+
+  /**
+   * Unlocks FSNameSystem write lock. This internally calls {@link
+   * FSNamesystemLock#writeUnlock(String, boolean, Supplier)}
+   *
+   * @param opName Operation name.
+   * @param lockReportInfoSupplier The info shown in the lock report
+   */
+  public void writeUnlock(String opName,
+      Supplier<String> lockReportInfoSupplier) {
+    writeUnlock(opName, false, lockReportInfoSupplier);
+  }
+
+  /**
+   * Unlocks FSNameSystem write lock. This internally calls {@link
+   * FSNamesystemLock#writeUnlock(String, boolean, Supplier)}
+   *
+   * @param opName Operation name.
+   * @param suppressWriteLockReport When false, event of write lock being held
+   * for long time will be logged in logs and metrics.
+   */
+  public void writeUnlock(String opName, boolean suppressWriteLockReport) {
+    writeUnlock(opName, suppressWriteLockReport, null);
+   * @param lockReportInfoSupplier The info shown in the lock report
-  public void writeUnlock(String opName, boolean suppressWriteLockReport) {
+  private void writeUnlock(String opName, boolean suppressWriteLockReport,
+      Supplier<String> lockReportInfoSupplier) {
-      if (longestWriteLockHeldInfo.getIntervalMs() < writeLockIntervalMs) {
-        longestWriteLockHeldInfo =
-            new LockHeldInfo(currentTimeMs, writeLockIntervalMs,
-                StringUtils.getStackTrace(Thread.currentThread()));
+      if (longestWriteLockHeldInfo.getIntervalMs() <= writeLockIntervalMs) {
+        String lockReportInfo = lockReportInfoSupplier != null ? " (" +
+            lockReportInfoSupplier.get() + ")" : "";
+        longestWriteLockHeldInfo = new LockHeldInfo(currentTimeMs,
+            writeLockIntervalMs,
+            StringUtils.getStackTrace(Thread.currentThread()), opName,
+            lockReportInfo);
-      longestWriteLockHeldInfo = new LockHeldInfo(0, 0, null);
+      longestWriteLockHeldInfo = new LockHeldInfo();
-              + "\n\tLongest write-lock held at {} for {}ms via {}"
+              + "\n\tLongest write-lock held at {} for {}ms by {}{} via {}"
-          lockHeldInfo.getIntervalMs(), lockHeldInfo.getStackTrace(),
+          lockHeldInfo.getIntervalMs(), lockHeldInfo.getOpName(),
+          lockHeldInfo.getLockReportInfo(), lockHeldInfo.getStackTrace(),
-    private Long startTimeMs;
+    private final Long startTimeMs;
-    private Long intervalMs;
+    private final Long intervalMs;
-    private String stackTrace;
+    private final String stackTrace;
+    /** The operation name. */
+    private final String opName;
+    /** The info shown in a lock report. */
+    private final String lockReportInfo;
-    LockHeldInfo(long startTimeMs, long intervalMs, String stackTrace) {
+    LockHeldInfo() {
+      this.startTimeMs = 0L;
+      this.intervalMs = 0L;
+      this.stackTrace = null;
+      this.opName = null;
+      this.lockReportInfo = null;
+    }
+
+    LockHeldInfo(long startTimeMs, long intervalMs, String stackTrace,
+        String opName, String lockReportInfo) {
+      this.opName = opName;
+      this.lockReportInfo = lockReportInfo;
+
+    public String getOpName() {
+      return opName;
+    }
+
+    public String getLockReportInfo() {
+      return lockReportInfo;
+    }

INS26 INS40 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS44 MOV29 MOV29 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 INS44 INS23 INS23 INS31 INS31 INS31 INS43 INS42 INS21 INS74 INS42 MOV65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS21 INS65 INS74 INS42 INS83 INS83 INS83 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS42 INS8 INS44 INS44 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS42 INS32 INS43 INS43 INS66 INS65 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS32 INS66 INS65 INS42 INS66 INS42 INS66 INS66 INS42 INS32 INS42 INS66 INS43 INS43 INS65 INS42 INS42 INS65 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS41 INS33 INS42 INS42 INS33 INS42 INS42 INS60 INS60 INS61 INS60 INS33 INS33 INS68 INS42 INS42 INS42 INS42 INS9 INS42 INS68 INS42 INS42 INS42 INS33 INS42 INS42 INS66 INS66 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS7 INS7 INS42 INS42 INS43 INS59 INS39 INS59 INS38 INS8 MOV43 MOV59 INS69 INS69 INS42 INS42 INS69 INS69 INS69 INS42 INS42 INS69 INS69 INS69 UPD27 INS22 INS34 INS22 INS34 INS22 INS33 INS22 INS33 INS22 INS33 INS22 INS42 INS22 INS42 INS42 INS42 INS33 INS42 INS9 INS42 MOV60 INS25 INS32 INS32 INS43 INS43 INS43 INS39 INS43 INS43 INS39 INS43 INS60 INS32 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 MOV43 UPD27 MOV27 INS8 INS8 UPD45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 MOV43 UPD45 INS42 INS42 INS42 INS42 MOV32 INS25 INS25 INS21 INS43 INS42 INS42 INS16 INS27 INS8 MOV32 INS8 INS7 INS42 INS27 INS27 INS45 MOV43 INS42 INS42 INS42 INS33 MOV21 INS21 INS42 INS9 INS42 INS33 INS45 INS32 INS45 MOV42 MOV43 INS42 INS42 INS7 INS42 INS42 UPD42 INS16 INS42 INS9 INS27 INS27 INS45 INS42 INS33 INS45 INS32 INS45 INS42 INS42 DEL34 DEL34 DEL33 DEL34 DEL34 DEL33 DEL8 DEL34 DEL27 DEL38 DEL27 DEL19 DEL34 DEL34 DEL33 DEL60 DEL34 DEL34 DEL33