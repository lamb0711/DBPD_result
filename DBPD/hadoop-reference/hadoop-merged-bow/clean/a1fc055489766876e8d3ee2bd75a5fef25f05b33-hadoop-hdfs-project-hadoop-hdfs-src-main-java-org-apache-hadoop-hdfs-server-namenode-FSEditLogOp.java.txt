HDFS-1623. High Availability Framework for HDFS NN. Contributed by Todd Lipcon, Aaron T. Myers, Eli Collins, Uma Maheswara Rao G, Bikas Saha, Suresh Srinivas, Jitendra Nath Pandey, Hari Mankude, Brandon Li, Sanjay Radia, Mingjie Lai, and Gregory Chanan


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296534 13f79535-47bb-0310-9956-ffa450edef68

+        instances.put(OP_UPDATE_BLOCKS, new UpdateBlocksOp());
+  static interface BlockListUpdatingOp {
+    Block[] getBlocks();
+    String getPath();
+    boolean shouldCompleteLastBlock();
+  }
+  
-  static abstract class AddCloseOp extends FSEditLogOp {
+  static abstract class AddCloseOp extends FSEditLogOp implements BlockListUpdatingOp {
+    
+    public String getPath() {
+      return path;
+    }
+    
+    public Block[] getBlocks() {
+      return blocks;
+    }
+    public boolean shouldCompleteLastBlock() {
+      return false;
+    }
+
+    public boolean shouldCompleteLastBlock() {
+      return true;
+    }
+
+  
+  static class UpdateBlocksOp extends FSEditLogOp implements BlockListUpdatingOp {
+    String path;
+    Block[] blocks;
+    
+    private UpdateBlocksOp() {
+      super(OP_UPDATE_BLOCKS);
+    }
+    
+    static UpdateBlocksOp getInstance() {
+      return (UpdateBlocksOp)opInstances.get()
+        .get(OP_UPDATE_BLOCKS);
+    }
+    
+    
+    UpdateBlocksOp setPath(String path) {
+      this.path = path;
+      return this;
+    }
+    
+    public String getPath() {
+      return path;
+    }
+
+    UpdateBlocksOp setBlocks(Block[] blocks) {
+      this.blocks = blocks;
+      return this;
+    }
+    
+    public Block[] getBlocks() {
+      return blocks;
+    }
+
+    @Override
+    void writeFields(DataOutputStream out) throws IOException {
+      FSImageSerialization.writeString(path, out);
+      FSImageSerialization.writeCompactBlockArray(blocks, out);
+    }
+    
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      path = FSImageSerialization.readString(in);
+      this.blocks = FSImageSerialization.readCompactBlockArray(
+          in, logVersion);
+    }
+
+    @Override
+    public boolean shouldCompleteLastBlock() {
+      return false;
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder();
+      sb.append("UpdateBlocksOp [path=")
+        .append(path)
+        .append(", blocks=")
+        .append(Arrays.toString(blocks))
+        .append("]");
+      return sb.toString();
+    }
+  }

INS55 INS55 INS83 INS42 INS31 INS31 INS31 INS43 INS31 INS31 INS31 INS31 INS83 INS42 INS43 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS5 INS42 INS43 INS42 INS39 INS42 INS42 INS83 INS43 INS42 INS8 INS83 INS5 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS43 INS59 INS5 INS59 INS83 INS42 INS8 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS83 INS5 INS42 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS85 INS42 INS42 INS41 INS43 INS85 INS41 INS41 INS41 INS42 INS42 INS43 INS85 INS42 INS46 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS41 INS42 INS5 INS42 INS21 INS41 INS43 INS85 INS41 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS21 INS42 INS41 INS42 INS42 INS60 INS21 INS41 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS11 INS42 INS7 INS52 INS42 INS43 INS85 INS7 INS52 INS42 INS42 INS42 INS32 INS32 INS42 INS7 INS7 INS9 INS43 INS59 INS32 INS32 INS43 INS32 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS22 INS32 INS42 INS42 INS14 INS32 INS42 INS45 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS43 INS42 INS42 INS45 INS42