HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth

+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.security.PrivilegedExceptionAction;
+import java.util.Iterator;
+import org.apache.commons.lang.Validate;
+import org.apache.hadoop.fs.azure.security.Constants;
+import org.apache.hadoop.fs.azure.security.WasbDelegationTokenIdentifier;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.authentication.client.AuthenticatedURL;
+import org.apache.hadoop.security.authentication.client.Authenticator;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.security.token.TokenIdentifier;
+import org.apache.hadoop.security.token.delegation.web.KerberosDelegationTokenAuthenticator;
-  /**
-   * Configuration parameter name expected in the Configuration
-   * object to provide the url of the remote service {@value}
-   */
-  private static final String KEY_CRED_SERVICE_URL =
-      "fs.azure.cred.service.url";
-      "delegation_token";
+      "delegation";
+  private boolean isSecurityEnabled;
+  private boolean isKerberosSupportEnabled;
-  public boolean initialize(Configuration conf, String delegationToken) {
+  public boolean initialize(Configuration conf) {
-    credServiceUrl = conf.get(KEY_CRED_SERVICE_URL);
-
-    if (delegationToken == null || delegationToken.isEmpty()) {
-      LOG.error("Delegation Token not provided for initialization"
-          + " of RemoteSASKeyGenerator");
-      return false;
+    Iterator<Token<? extends TokenIdentifier>> tokenIterator = null;
+    try {
+      tokenIterator = UserGroupInformation.getCurrentUser().getCredentials()
+          .getAllTokens().iterator();
+      while (tokenIterator.hasNext()) {
+        Token<? extends TokenIdentifier> iteratedToken = tokenIterator.next();
+        if (iteratedToken.getKind().equals(WasbDelegationTokenIdentifier.TOKEN_KIND)) {
+          delegationToken = iteratedToken.encodeToUrlString();
+        }
+      }
+    } catch (IOException e) {
+      LOG.error("Error in fetching the WASB delegation token");
-    this.delegationToken = delegationToken;
+    try {
+      credServiceUrl = conf.get(Constants.KEY_CRED_SERVICE_URL, String
+          .format("http://%s:%s",
+              InetAddress.getLocalHost().getCanonicalHostName(),
+              Constants.DEFAULT_CRED_SERVICE_PORT));
+    } catch (UnknownHostException e) {
+      LOG.error("Invalid CredService Url, configure it correctly.");
+      return false;
+    }
-    LOG.debug("Initialization of RemoteSASKeyGenerator instance successfull");
+    this.isSecurityEnabled = UserGroupInformation.isSecurityEnabled();
+    this.isKerberosSupportEnabled = conf.getBoolean(
+        Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);
+    LOG.debug("Initialization of RemoteSASKeyGenerator instance successful");
-
-
-      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,
-          this.delegationToken);
-
-      RemoteSASKeyGenerationResponse sasKeyResponse =
-          makeRemoteRequest(uriBuilder.build());
-
-      if (sasKeyResponse == null) {
-        throw new SASKeyGenerationException("RemoteSASKeyGenerationResponse"
-            + " object null from remote call");
-      } else if (sasKeyResponse.getResponseCode()
-          == REMOTE_CALL_SUCCESS_CODE) {
-        return new URI(sasKeyResponse.getSasKey());
-      } else {
-        throw new SASKeyGenerationException("Remote Service encountered error"
-            + " in SAS Key generation : "
-            + sasKeyResponse.getResponseMessage());
+      if (isSecurityEnabled && (delegationToken != null && !delegationToken
+          .isEmpty())) {
+        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,
+            this.delegationToken);
+
+      UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
+      UserGroupInformation connectUgi = ugi.getRealUser();
+      if (connectUgi == null) {
+        connectUgi = ugi;
+      } else {
+        uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());
+      }
+
+      if(isSecurityEnabled && !connectUgi.hasKerberosCredentials()){
+        connectUgi = UserGroupInformation.getLoginUser();
+      }
+      return getSASKey(uriBuilder.build(), connectUgi);
+    } catch (IOException e) {
+      throw new SASKeyGenerationException("Encountered IOException"
+          + " while building the HttpGetRequest to remote service", e);
-
-
-      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,
-          storageAccount);
-      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,
-          container);
+      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME, storageAccount);
+      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME, container);
-      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,
-          this.delegationToken);
-      RemoteSASKeyGenerationResponse sasKeyResponse =
-          makeRemoteRequest(uriBuilder.build());
-
-      if (sasKeyResponse == null) {
-        throw new SASKeyGenerationException("RemoteSASKeyGenerationResponse"
-            + " object null from remote call");
-      } else if (sasKeyResponse.getResponseCode()
-          == REMOTE_CALL_SUCCESS_CODE) {
-        return new URI(sasKeyResponse.getSasKey());
-      } else {
-        throw new SASKeyGenerationException("Remote Service encountered error"
-            + " in SAS Key generation : "
-            + sasKeyResponse.getResponseMessage());
+      if (isSecurityEnabled && (delegationToken != null && !delegationToken
+          .isEmpty())) {
+        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,
+            this.delegationToken);
+
+        UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
+        UserGroupInformation connectUgi = ugi.getRealUser();
+        if (connectUgi == null) {
+          connectUgi = ugi;
+        } else{
+          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());
+        }
+
+      if(isSecurityEnabled && !connectUgi.hasKerberosCredentials()){
+        connectUgi = UserGroupInformation.getLoginUser();
+      }
+      return getSASKey(uriBuilder.build(), connectUgi);
+    } catch (IOException e) {
+      throw new SASKeyGenerationException("Encountered IOException"
+      + " while building the HttpGetRequest to remote service", e);
+    }
+  }
+
+  private URI getSASKey(final URI uri, UserGroupInformation connectUgi)
+      throws URISyntaxException, SASKeyGenerationException {
+    RemoteSASKeyGenerationResponse sasKeyResponse = null;
+    try {
+      connectUgi.checkTGTAndReloginFromKeytab();
+      sasKeyResponse = connectUgi.doAs(new PrivilegedExceptionAction<RemoteSASKeyGenerationResponse>() {
+            @Override
+            public RemoteSASKeyGenerationResponse run() throws Exception {
+              AuthenticatedURL.Token token = null;
+              if (isKerberosSupportEnabled && UserGroupInformation.isSecurityEnabled() && (
+                  delegationToken == null || delegationToken.isEmpty())) {
+                token = new AuthenticatedURL.Token();
+                final Authenticator kerberosAuthenticator = new KerberosDelegationTokenAuthenticator();
+                kerberosAuthenticator.authenticate(uri.toURL(), token);
+                Validate.isTrue(token.isSet(),
+                    "Authenticated Token is NOT present. The request cannot proceed.");
+              }
+              return makeRemoteRequest(uri, (token != null ? token.toString() : null));
+            }
+          });
+    } catch (InterruptedException e) {
+      LOG.error("Error fetching the SAS Key from Remote Service", e);
+    } catch (IOException e) {
+      LOG.error("Error fetching the SAS Key from Remote Service", e);
+    }
+
+    if (sasKeyResponse == null) {
+      throw new SASKeyGenerationException(
+          "RemoteSASKeyGenerationResponse" + " object null from remote call");
+    } else if (sasKeyResponse.getResponseCode() == REMOTE_CALL_SUCCESS_CODE) {
+      return new URI(sasKeyResponse.getSasKey());
+    } else {
+      throw new SASKeyGenerationException("Remote Service encountered error"
+          + " in SAS Key generation : " + sasKeyResponse.getResponseMessage());
+   * @param token - hadoop.auth token for the remote request
-  private RemoteSASKeyGenerationResponse makeRemoteRequest(URI uri)
+  private RemoteSASKeyGenerationResponse makeRemoteRequest(URI uri, String token)
+      HttpGet httpGet = new HttpGet(uri);
+      if(token != null){
+        httpGet.setHeader("Cookie", AuthenticatedURL.AUTH_COOKIE + "=" + token);
+      }
-          remoteCallHelper.makeRemoteGetRequest(new HttpGet(uri));
+          remoteCallHelper.makeRemoteGetRequest(httpGet);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 MOV83 INS39 INS59 UPD83 MOV83 INS39 MOV59 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS44 UPD45 INS42 UPD42 MOV21 INS60 INS54 INS54 MOV25 MOV21 MOV21 INS21 MOV21 MOV41 INS42 INS83 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS54 MOV25 INS65 MOV43 INS42 INS74 INS59 INS8 INS12 INS8 INS12 INS7 INS12 INS12 INS42 INS42 MOV43 INS59 INS8 INS12 INS12 INS42 INS66 INS43 INS74 INS42 INS33 INS21 INS61 INS44 INS8 MOV21 INS44 INS8 INS32 INS22 INS32 UPD45 INS25 INS60 INS25 INS25 INS41 INS44 INS8 INS25 INS60 INS25 INS25 INS41 INS44 INS8 INS42 INS33 INS21 INS21 INS44 INS8 INS44 INS8 INS25 INS60 INS42 INS43 INS76 INS7 INS32 INS8 INS43 INS42 INS21 INS43 INS42 MOV21 MOV41 UPD42 INS42 INS42 INS52 INS42 INS42 INS42 INS40 INS9 INS27 INS8 INS43 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS32 INS43 INS42 INS53 INS27 INS8 INS43 INS59 INS43 MOV27 MOV8 INS8 INS27 MOV8 MOV32 INS43 INS42 INS53 INS32 INS7 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS27 INS8 MOV43 INS59 INS42 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS32 INS42 INS42 INS36 MOV21 INS42 UPD42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS38 INS21 INS42 MOV32 INS42 INS42 INS14 INS42 INS36 MOV21 INS42 INS42 INS32 INS42 UPD42 UPD42 INS21 INS21 UPD42 MOV42 INS38 INS21 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 MOV14 INS42 INS33 INS21 INS42 INS32 INS42 INS32 INS42 INS74 INS59 INS32 INS8 INS42 INS42 INS45 INS40 INS32 INS45 INS27 INS42 INS42 INS42 INS42 INS7 INS32 INS32 INS7 INS42 INS43 INS27 INS42 INS27 INS42 INS42 UPD42 UPD42 MOV42 INS7 INS32 INS32 INS7 INS43 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS76 INS42 INS32 INS32 INS42 INS40 INS21 UPD42 MOV42 INS42 INS45 INS32 INS40 INS27 INS38 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS45 INS27 INS38 INS42 INS42 INS42 INS42 INS40 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS45 INS45 INS74 INS1 INS42 INS42 INS45 INS27 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS31 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 MOV43 INS42 INS43 INS8 INS42 INS42 INS42 INS42 INS60 INS25 INS41 INS43 INS59 INS27 INS8 INS32 INS40 INS42 INS33 INS42 INS32 INS36 INS21 INS60 INS21 INS21 INS42 INS42 INS36 INS42 INS42 MOV27 INS7 INS83 INS43 INS59 INS32 INS32 INS16 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS45 INS27 INS32 INS33 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS40 INS42 DEL66 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL23 DEL45 DEL45 DEL45 DEL27 DEL42 DEL42 DEL44 DEL8 DEL25 DEL8 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL42 DEL43 DEL45 DEL45 DEL32 DEL27 DEL14 DEL53 DEL32 DEL27 DEL42 DEL43 DEL32 DEL14 DEL41 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32