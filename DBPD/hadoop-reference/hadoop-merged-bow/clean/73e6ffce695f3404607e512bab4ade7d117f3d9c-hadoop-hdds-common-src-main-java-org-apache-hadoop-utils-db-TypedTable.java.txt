HDDS-1802. Add Eviction policy for table cache. (#1100)



+import com.google.common.base.Optional;
+import org.apache.hadoop.utils.db.cache.CacheResult;
-import org.apache.hadoop.utils.db.cache.PartialTableCache;
+import org.apache.hadoop.utils.db.cache.TableCacheImpl;
+import org.apache.hadoop.utils.db.cache.TableCacheImpl.CacheCleanupPolicy;
+import static org.apache.hadoop.utils.db.cache.CacheResult.CacheStatus.EXISTS;
+import static org.apache.hadoop.utils.db.cache.CacheResult.CacheStatus.NOT_EXIST;
+  private final static long EPOCH_DEFAULT = -1L;
+  /**
+   * Create an TypedTable from the raw table.
+   * Default cleanup policy used for the table is
+   * {@link CacheCleanupPolicy#MANUAL}.
+   * @param rawTable
+   * @param codecRegistry
+   * @param keyType
+   * @param valueType
+   */
-      Class<VALUE> valueType) {
+      Class<VALUE> valueType) throws IOException {
+    this(rawTable, codecRegistry, keyType, valueType,
+        CacheCleanupPolicy.MANUAL);
+  }
+
+  /**
+   * Create an TypedTable from the raw table with specified cleanup policy
+   * for table cache.
+   * @param rawTable
+   * @param codecRegistry
+   * @param keyType
+   * @param valueType
+   * @param cleanupPolicy
+   */
+  public TypedTable(
+      Table<byte[], byte[]> rawTable,
+      CodecRegistry codecRegistry, Class<KEY> keyType,
+      Class<VALUE> valueType,
+      TableCacheImpl.CacheCleanupPolicy cleanupPolicy) throws IOException {
-    cache = new PartialTableCache<>();
+    cache = new TableCacheImpl<>(cleanupPolicy);
+
+    if (cleanupPolicy == CacheCleanupPolicy.NEVER) {
+      //fill cache
+      try(TableIterator<KEY, ? extends KeyValue<KEY, VALUE>> tableIterator =
+              iterator()) {
+
+        while (tableIterator.hasNext()) {
+          KeyValue< KEY, VALUE > kv = tableIterator.next();
+
+          // We should build cache after OM restart when clean up policy is
+          // NEVER. Setting epoch value -1, so that when it is marked for
+          // delete, this will be considered for cleanup.
+          cache.put(new CacheKey<>(kv.getKey()),
+              new CacheValue<>(Optional.of(kv.getValue()), EPOCH_DEFAULT));
+        }
+      }
+    }
-    CacheValue<VALUE> cacheValue= cache.get(new CacheKey<>(key));
-    return (cacheValue != null && cacheValue.getCacheValue() != null) ||
-        rawTable.isExist(codecRegistry.asRawData(key));
+
+    CacheResult<CacheValue<VALUE>> cacheResult =
+        cache.lookup(new CacheKey<>(key));
+
+    if (cacheResult.getCacheStatus() == EXISTS) {
+      return true;
+    } else if (cacheResult.getCacheStatus() == NOT_EXIST) {
+      return false;
+    } else {
+      return rawTable.isExist(codecRegistry.asRawData(key));
+    }
-    CacheValue< VALUE > cacheValue = cache.get(new CacheKey<>(key));
-    if (cacheValue == null) {
-      // If no cache for the table or if it does not exist in cache get from
-      // RocksDB table.
-      return getFromTable(key);
+
+    CacheResult<CacheValue<VALUE>> cacheResult =
+        cache.lookup(new CacheKey<>(key));
+
+    if (cacheResult.getCacheStatus() == EXISTS) {
+      return cacheResult.getValue().getCacheValue();
+    } else if (cacheResult.getCacheStatus() == NOT_EXIST) {
+      return null;
-      // We have a value in cache, return the value.
-      return cacheValue.getCacheValue();
+      return getFromTable(key);

INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS44 INS43 INS8 INS42 INS38 INS65 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS25 MOV60 INS25 MOV60 INS34 INS66 INS66 INS65 INS66 INS42 INS42 INS42 INS42 INS43 INS5 INS5 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS40 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS40 INS27 INS8 INS74 INS27 INS8 INS25 INS74 INS25 INS67 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS40 INS54 INS43 MOV74 UPD42 INS32 INS42 INS41 INS27 INS8 INS8 INS43 MOV74 UPD42 INS32 INS42 INS27 INS8 MOV8 INS42 INS42 UPD74 INS42 INS58 INS8 INS42 UPD42 INS42 INS42 INS9 INS32 INS42 INS41 MOV41 INS42 UPD42 INS42 INS42 INS32 INS42 INS41 UPD43 INS74 INS59 INS61 INS42 INS42 INS9 MOV32 INS32 INS42 INS42 INS33 UPD42 INS43 INS43 INS76 INS42 INS32 INS32 INS8 INS42 UPD42 MOV42 INS42 INS42 INS74 INS42 INS42 INS42 INS60 INS21 INS43 INS43 INS43 INS74 INS59 INS32 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS74 INS32 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL36 DEL27 DEL8 DEL42 DEL33