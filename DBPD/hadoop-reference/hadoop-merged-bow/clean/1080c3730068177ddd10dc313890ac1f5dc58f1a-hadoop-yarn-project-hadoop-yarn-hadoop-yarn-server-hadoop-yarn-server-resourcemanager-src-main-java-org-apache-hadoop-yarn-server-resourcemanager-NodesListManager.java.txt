Merge remote-tracking branch 'apache/trunk' into HDFS-7285

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Namesystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/DFSTestUtil.java

Change-Id: I8511c4d64b0959e79129febc179845a3892fedcc

+import java.util.Timer;
+import java.util.TimerTask;
+import java.util.Map;
+import java.util.Iterator;
+import org.apache.hadoop.service.CompositeService;
+import org.apache.hadoop.yarn.util.Clock;
+import org.apache.hadoop.yarn.util.SystemClock;
-public class NodesListManager extends AbstractService implements
+public class NodesListManager extends CompositeService implements
+  private Resolver resolver;
+
+    int nodeIpCacheTimeout = conf.getInt(
+        YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,
+        YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);
+    if (nodeIpCacheTimeout <= 0) {
+      resolver = new DirectResolver();
+    } else {
+      resolver = new CachedResolver(new SystemClock(), nodeIpCacheTimeout);
+      addIfService(resolver);
+    }
+
+  @VisibleForTesting
+  public Resolver getResolver() {
+    return resolver;
+  }
+
+  @VisibleForTesting
+  public interface Resolver {
+    // try to resolve hostName to IP address, fallback to hostName if failed
+    String resolve(String hostName);
+  }
+
+  @VisibleForTesting
+  public static class DirectResolver implements Resolver {
+    @Override
+    public String resolve(String hostName) {
+      return NetUtils.normalizeHostName(hostName);
+    }
+  }
+
+  @VisibleForTesting
+  public static class CachedResolver extends AbstractService
+      implements Resolver {
+    private static class CacheEntry {
+      public String ip;
+      public long resolveTime;
+      public CacheEntry(String ip, long resolveTime) {
+        this.ip = ip;
+        this.resolveTime = resolveTime;
+      }
+    }
+    private Map<String, CacheEntry> cache =
+        new ConcurrentHashMap<String, CacheEntry>();
+    private int expiryIntervalMs;
+    private int checkIntervalMs;
+    private final Clock clock;
+    private Timer checkingTimer;
+    private TimerTask expireChecker = new ExpireChecker();
+
+    public CachedResolver(Clock clock, int expiryIntervalSecs) {
+      super("NodesListManager.CachedResolver");
+      this.clock = clock;
+      this.expiryIntervalMs = expiryIntervalSecs * 1000;
+      checkIntervalMs = expiryIntervalMs/3;
+      checkingTimer = new Timer(
+          "Timer-NodesListManager.CachedResolver.ExpireChecker", true);
+    }
+
+    @Override
+    protected void serviceStart() throws Exception {
+      checkingTimer.scheduleAtFixedRate(
+          expireChecker, checkIntervalMs, checkIntervalMs);
+      super.serviceStart();
+    }
+
+    @Override
+    protected void serviceStop() throws Exception {
+      checkingTimer.cancel();
+      super.serviceStop();
+    }
+
+    @VisibleForTesting
+    public void addToCache(String hostName, String ip) {
+      cache.put(hostName, new CacheEntry(ip, clock.getTime()));
+    }
+
+    public void removeFromCache(String hostName) {
+      cache.remove(hostName);
+    }
+
+    private String reload(String hostName) {
+      String ip = NetUtils.normalizeHostName(hostName);
+      addToCache(hostName, ip);
+      return ip;
+    }
+
+    @Override
+    public String resolve(String hostName) {
+      CacheEntry e = cache.get(hostName);
+      if (e != null) {
+        return e.ip;
+      }
+      return reload(hostName);
+    }
+
+    @VisibleForTesting
+    public TimerTask getExpireChecker() {
+      return expireChecker;
+    }
+
+    private class ExpireChecker extends TimerTask {
+      @Override
+      public void run() {
+        long currentTime = clock.getTime();
+        Iterator<Map.Entry<String, CacheEntry>> iterator =
+            cache.entrySet().iterator();
+        while (iterator.hasNext()) {
+          Map.Entry<String, CacheEntry> entry = iterator.next();
+          if (currentTime >
+              entry.getValue().resolveTime +
+                  CachedResolver.this.expiryIntervalMs) {
+            iterator.remove();
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("[" + entry.getKey() + ":" + entry.getValue().ip +
+                  "] Expired after " +
+                  CachedResolver.this.expiryIntervalMs / 1000 + " secs");
+            }
+          }
+        }
+      }
+    }
+  }
+
+    String ip = resolver.resolve(hostName);
-      String ip = NetUtils.normalizeHostName(hostName);
-  
+
+    // remove the cache of normalized hostname if enabled
+    if (resolver instanceof CachedResolver) {
+      ((CachedResolver)resolver).removeFromCache(
+          eventNode.getNodeID().getHost());
+    }
-            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION_WITH_TIMEOUT));
+            new RMNodeEvent(nodeId, RMNodeEventType.GRACEFUL_DECOMMISSION));

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS55 INS55 INS55 INS42 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS42 INS31 INS78 INS83 INS83 INS42 INS43 INS31 INS78 INS83 INS83 INS42 MOV43 INS43 INS55 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS42 INS42 INS60 INS25 INS42 INS42 INS41 INS42 INS43 INS42 INS44 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS83 INS83 INS42 INS23 INS23 INS31 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS42 INS43 INS31 INS60 INS25 INS39 INS59 INS27 INS8 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS41 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS39 INS42 INS46 INS21 INS21 INS21 INS21 INS42 INS42 INS21 INS21 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS43 INS42 MOV60 INS21 INS41 INS42 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS41 INS42 INS78 INS83 INS39 INS42 INS8 INS43 INS59 INS62 INS8 INS42 INS32 INS42 INS34 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS42 INS42 INS42 INS74 INS43 INS42 INS45 INS7 INS7 INS7 INS7 INS32 INS48 INS32 INS48 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS60 INS60 INS61 INS42 INS42 INS32 INS42 INS43 INS21 INS42 INS42 INS40 INS40 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS7 INS7 INS43 INS43 INS43 INS42 INS22 INS42 INS22 INS27 INS42 INS27 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS39 INS59 INS74 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS34 INS42 INS34 INS43 INS45 INS9 INS43 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS25 INS36 INS42 INS32 INS43 INS43 INS14 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS32 INS42 INS74 INS59 INS27 INS8 INS11 INS32 INS42 INS42 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS27 INS21 INS25 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS22 INS22 INS32 INS32 INS8 INS42 UPD40 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS45 INS45 INS32 INS45 INS22 INS45 INS27 INS42 INS42 INS32 INS42 INS22 INS34 INS42 INS42 INS52 INS42 INS42