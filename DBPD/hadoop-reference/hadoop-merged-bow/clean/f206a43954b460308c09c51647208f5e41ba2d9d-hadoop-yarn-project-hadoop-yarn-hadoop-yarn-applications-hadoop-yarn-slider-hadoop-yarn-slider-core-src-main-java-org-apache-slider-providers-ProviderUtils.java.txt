YARN-5701. Fix issues in yarn native services apps-of-apps. Contributed by Billie Rinaldi

+    String format = "${%s}";
-        filteredOptions.put(key, value);
+        filteredOptions.put(String.format(format, key), value);
-  private void createConfigFile(SliderFileSystem fileSystem, File file,
-      ConfigFormat configFormat, String configFileDN,
+  private synchronized void createConfigFile(SliderFileSystem fileSystem,
+      File file, ConfigFormat configFormat, String configFileDN,
+    if (file.exists()) {
+      log.info("Skipping writing {} file {} because it already exists",
+          configFormat, file);
+      return;
+    }
-      if (!localFile.mkdir()) {
+      if (!localFile.mkdir() && !localFile.exists()) {
-    localFile = new File(localFile, new File(fileName).getName());
+    if (folder != null) {
+      localFile = new File(localFile, folder);
+      if (!localFile.exists()) {
+        if (!localFile.mkdir() && !localFile.exists()) {
+          throw new IOException(localFile + " could not be created!");
+        }
+      }
+    }
+    localFile = new File(localFile, new File(fileName).getName());
-    createConfigFile(fileSystem, localFile, configFormat, configFileDN, config,
-        clusterName);
+    if (!localFile.exists()) {
+      createConfigFile(fileSystem, localFile, configFormat, configFileDN,
+          config, clusterName);
+    } else {
+      log.info("Local {} file {} already exists", configFormat, localFile);
+    }
-      String containerId, String roleName, String roleGroup,
+      String containerId, String clusterName, String roleName, String roleGroup,
-        internalsConf, roleName, roleGroup, containerId);
+        internalsConf, roleName, roleGroup, containerId, clusterName);
+   * Return a list of hostnames based on current ClusterNodes.
+   * @param values cluster nodes
+   * @return list of hosts
+   */
+  public Iterable<String> getHostNamesList(Collection<ClusterNode> values) {
+    List<String> hosts = new ArrayList<>();
+    for (ClusterNode cn : values) {
+      hosts.add(cn.hostname);
+    }
+    return hosts;
+  }
+
+  /**
+   * Return a list of IPs based on current ClusterNodes.
+   * @param values cluster nodes
+   * @return list of hosts
+   */
+  public Iterable<String> getIPsList(Collection<ClusterNode> values) {
+    List<String> hosts = new ArrayList<>();
+    for (ClusterNode cn : values) {
+      hosts.add(cn.ip);
+    }
+    return hosts;
+  }
+
+  /**

INS31 INS31 INS83 MOV21 INS44 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS60 INS25 INS25 INS25 INS43 INS42 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS43 INS59 INS32 INS8 INS27 INS8 INS38 INS8 INS8 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS45 INS42 INS42 INS21 INS41 INS42 INS33 INS21 INS25 INS32 MOV21 INS21 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS32 INS27 INS7 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS45 INS42 INS42 MOV38 INS38 INS42 INS14 INS32 INS25 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS40 INS43 INS42 INS42 INS40 INS32 INS43 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS38 INS38 INS53 INS42 INS42 INS42 MOV42 INS32 INS32 INS14 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45