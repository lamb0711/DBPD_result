YARN-8933. [AMRMProxy] Fix potential empty fields in allocation response, move SubClusterTimeout to FederationInterceptor. Contributed by Botong Huang.

+import java.util.HashSet;
+import org.apache.hadoop.yarn.api.records.Resource;
-   * sub-cluster resource managers, including home RM.
+   * sub-cluster resource managers, including home RM, but not merged and
+   * returned back to AM yet.
+  /**
+   * Remembers the last allocate response from all known sub-clusters. This is
+   * used together with sub-cluster timeout to assemble entries about
+   * cluster-wide info (e.g. AvailableResource, NumClusterNodes) in the allocate
+   * response back to AM.
+   */
+  private Map<SubClusterId, AllocateResponse> lastSCResponse;
+
+  /**
+   * The async UAM registration result that is not consumed yet.
+   */
+  /**
+   * Records the last time a successful heartbeat response received from a known
+   * sub-cluster. lastHeartbeatTimeStamp.keySet() should be in sync with
+   * uamPool.getAllUAMIds().
+   */
+  private Map<SubClusterId, Long> lastSCResponseTime;
+  private long subClusterTimeOut;
+
+  private long lastAMHeartbeatTime;
+
+    this.lastSCResponse = new ConcurrentHashMap<>();
+    this.lastSCResponseTime = new ConcurrentHashMap<>();
+    this.lastAMHeartbeatTime = this.clock.getTime();
+
+    this.subClusterTimeOut =
+        conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,
+            YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);
+    if (this.subClusterTimeOut <= 0) {
+      LOG.info(
+          "{} configured to be {}, should be positive. Using default of {}.",
+          YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,
+          this.subClusterTimeOut,
+          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);
+      this.subClusterTimeOut =
+          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT;
+    }
+          // Set sub-cluster to be timed out initially
+          lastSCResponseTime.put(subClusterId,
+              clock.getTime() - subClusterTimeOut);
+
+    this.lastAMHeartbeatTime = this.clock.getTime();
-      AllocateResponse response =
-          RECORD_FACTORY.newRecordInstance(AllocateResponse.class);
+      AllocateResponse response = generateBaseAllocationResponse();
+                // Set sub-cluster to be timed out initially
+                lastSCResponseTime.put(subClusterId,
+                    clock.getTime() - subClusterTimeOut);
+
+
+        // Set sub-cluster to be timed out initially
+        lastSCResponseTime.put(subClusterId,
+            clock.getTime() - subClusterTimeOut);
+   * Prepare the base allocation response. Use lastSCResponse and
+   * lastHeartbeatTimeStamp to assemble entries about cluster-wide info, e.g.
+   * AvailableResource, NumClusterNodes.
+   */
+  protected AllocateResponse generateBaseAllocationResponse() {
+    AllocateResponse baseResponse =
+        RECORD_FACTORY.newRecordInstance(AllocateResponse.class);
+
+    baseResponse.setAvailableResources(Resource.newInstance(0, 0));
+    baseResponse.setNumClusterNodes(0);
+
+    Set<SubClusterId> expiredSC = getTimedOutSCs(false);
+    for (Entry<SubClusterId, AllocateResponse> entry : lastSCResponse
+        .entrySet()) {
+      if (expiredSC.contains(entry.getKey())) {
+        // Skip expired sub-clusters
+        continue;
+      }
+      AllocateResponse response = entry.getValue();
+
+      if (response.getAvailableResources() != null) {
+        baseResponse.setAvailableResources(
+            Resources.add(baseResponse.getAvailableResources(),
+                response.getAvailableResources()));
+      }
+      baseResponse.setNumClusterNodes(
+          baseResponse.getNumClusterNodes() + response.getNumClusterNodes());
+    }
+    return baseResponse;
+  }
+
+  /**
-    if (otherResponse.getAvailableResources() != null) {
-      if (homeResponse.getAvailableResources() != null) {
-        homeResponse.setAvailableResources(
-            Resources.add(homeResponse.getAvailableResources(),
-                otherResponse.getAvailableResources()));
-      } else {
-        homeResponse
-            .setAvailableResources(otherResponse.getAvailableResources());
-      }
-    }
-
+  protected Set<SubClusterId> getTimedOutSCs(boolean verbose) {
+    Set<SubClusterId> timedOutSCs = new HashSet<>();
+    for (Map.Entry<SubClusterId, Long> entry : this.lastSCResponseTime
+        .entrySet()) {
+      if (entry.getValue() > this.lastAMHeartbeatTime) {
+        // AM haven't heartbeat to us (and thus we to all SCs) for a long time,
+        // should not consider the SC as timed out
+        continue;
+      }
+      long duration = this.clock.getTime() - entry.getValue();
+      if (duration > this.subClusterTimeOut) {
+        if (verbose) {
+          LOG.warn(
+              "Subcluster {} doesn't have a successful heartbeat"
+                  + " for {} seconds for {}",
+              entry.getKey(), (double) duration / 1000, this.attemptId);
+        }
+        timedOutSCs.add(entry.getKey());
+      }
+    }
+    return timedOutSCs;
+  }
+
-    return this.policyInterpreter.splitResourceRequests(askList);
+    return policyInterpreter.splitResourceRequests(askList,
+        getTimedOutSCs(true));
+      lastSCResponse.put(subClusterId, response);
+      lastSCResponseTime.put(subClusterId, clock.getTime());

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS29 INS83 INS74 INS59 INS29 INS29 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS29 INS83 INS43 INS42 INS8 INS83 INS74 INS42 INS44 INS8 INS65 INS43 INS43 INS43 INS42 INS65 INS65 INS43 INS43 INS43 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS25 INS21 INS65 INS42 MOV60 INS21 INS21 INS60 INS70 INS41 INS43 INS43 INS39 INS42 INS60 INS70 INS41 UPD66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS27 INS8 INS7 INS66 INS66 INS66 INS32 INS32 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS42 INS21 INS21 INS22 INS14 INS22 INS14 INS22 INS32 INS22 INS32 INS22 INS34 INS21 INS21 INS22 INS32 INS60 UPD42 INS42 INS42 INS32 INS42 INS42 INS34 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS25 INS60 INS25 INS21 INS43 INS43 INS42 INS14 INS74 INS42 INS22 INS42 INS25 INS60 INS25 INS42 INS32 INS32 INS32 INS52 INS42 INS74 INS52 INS42 INS74 INS52 INS42 INS22 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS52 INS42 INS32 INS7 INS52 INS42 INS22 INS42 INS43 INS59 INS42 INS42 INS34 INS34 INS42 INS42 INS42 INS9 INS43 INS43 INS43 INS32 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS74 INS43 INS43 INS43 INS52 INS42 INS27 INS8 INS39 INS59 INS27 INS8 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS52 INS42 INS42 INS42 INS45 INS40 INS22 INS40 INS22 INS40 INS52 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS18 INS42 INS42 INS32 INS32 INS33 INS21 INS42 INS42 INS27 INS43 INS40 INS42 INS42 INS32 INS22 INS18 INS42 INS27 INS42 INS22 INS25 INS21 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS52 INS42 INS32 INS32 INS52 INS42 INS42 INS8 INS32 INS21 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS27 INS22 INS32 INS42 INS45 INS45 INS42 INS42 INS11 INS34 INS52 INS42 INS42 INS42 INS21 INS39 INS42 INS32 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL52 DEL42 DEL22