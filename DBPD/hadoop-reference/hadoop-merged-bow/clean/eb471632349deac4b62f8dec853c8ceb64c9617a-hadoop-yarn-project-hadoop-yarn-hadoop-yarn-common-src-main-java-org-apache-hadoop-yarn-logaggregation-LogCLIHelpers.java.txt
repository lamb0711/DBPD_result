YARN-5200. Enhanced "yarn logs" to be able to get a list of containers whose logs are aggregated via a "show_container_log_info" option. Contributed by Xuan Gong.

+import org.apache.commons.math3.util.Pair;
+  public static final String PER_LOG_FILE_INFO_PATTERN =
+      "%20s\t%20s" + System.getProperty("line.separator");
+  public static final String CONTAINER_ON_NODE_PATTERN =
+      "Container: %s on %s";
+
-          String containerString = "\n\nContainer: " + containerId + " on "
-              + thisNodeFile.getPath().getName();
+          String containerString = String.format(CONTAINER_ON_NODE_PATTERN,
+              containerId, thisNodeFile.getPath().getName());
-          out.println(containerId + " on " + thisNodeFile.getPath().getName());
-          out.println(StringUtils.repeat("=", containerId.length()));
+          String containerString = String.format(CONTAINER_ON_NODE_PATTERN,
+              containerId, thisNodeFile.getPath().getName());
+          out.println(containerString);
+          out.println(StringUtils.repeat("=", containerString.length()));
-              String containerString =
-                  "\n\nContainer: " + key + " on "
-                  + thisNodeFile.getPath().getName();
+              String containerString = String.format(
+                  CONTAINER_ON_NODE_PATTERN, key,
+                  thisNodeFile.getPath().getName());
-  public void printLogMetadata(ContainerLogsRequest options,
+  public int printAContainerLogMetadata(ContainerLogsRequest options,
-      return;
+      return -1;
-              String containerString =
-                  "\n\nContainer: " + key + " on "
-                  + thisNodeFile.getPath().getName();
+              String containerString = String.format(CONTAINER_ON_NODE_PATTERN,
+                  key, thisNodeFile.getPath().getName());
+              out.printf(PER_LOG_FILE_INFO_PATTERN, "LogType", "LogLength");
+              out.println(StringUtils.repeat("=", containerString.length()));
-                  LogReader.readContainerMetaDataAndSkipData(valueStream, out);
+                  Pair<String, String> logMeta =
+                      LogReader.readContainerMetaDataAndSkipData(
+                          valueStream, out);
+                  out.printf(PER_LOG_FILE_INFO_PATTERN,
+                      logMeta.getFirst(), logMeta.getSecond());
+      return -1;
+    return 0;
+  @Private
+  public void printContainersList(ContainerLogsRequest options,
+      PrintStream out, PrintStream err) throws IOException {
+    ApplicationId appId = options.getAppId();
+    String appOwner = options.getAppOwner();
+    String nodeId = options.getNodeId();
+    String nodeIdStr = (nodeId == null) ? null
+        : LogAggregationUtils.getNodeString(nodeId);
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        appId, appOwner);
+    if (nodeFiles == null) {
+      return;
+    }
+    boolean foundAnyLogs = false;
+    while (nodeFiles.hasNext()) {
+      FileStatus thisNodeFile = nodeFiles.next();
+      if (nodeIdStr != null) {
+        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {
+          continue;
+        }
+      }
+      if (!thisNodeFile.getPath().getName()
+          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
+        AggregatedLogFormat.LogReader reader =
+            new AggregatedLogFormat.LogReader(getConf(),
+            thisNodeFile.getPath());
+        try {
+          DataInputStream valueStream;
+          LogKey key = new LogKey();
+          valueStream = reader.next(key);
+          while (valueStream != null) {
+            out.println(String.format(CONTAINER_ON_NODE_PATTERN, key,
+                thisNodeFile.getPath().getName()));
+            foundAnyLogs = true;
+            // Next container
+            key = new LogKey();
+            valueStream = reader.next(key);
+          }
+        } finally {
+          reader.close();
+        }
+      }
+    }
+    if (!foundAnyLogs) {
+      if (nodeId != null) {
+        err.println("Can not find information for any containers on "
+            + nodeId);
+      } else {
+        err.println("Can not find any container information for "
+            + "the application: " + appId);
+      }
+    }
+  }
+
-                      valueStream, null);
+                      valueStream, null).getFirst();

INS26 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 UPD39 UPD42 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS27 INS42 INS42 INS45 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS60 MOV25 INS60 INS61 INS25 INS45 INS32 INS27 INS8 INS34 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS39 INS59 INS32 INS8 INS38 INS8 INS42 INS42 INS45 INS42 INS33 INS41 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS42 INS9 INS42 INS42 INS60 INS25 INS25 INS42 INS25 INS38 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS38 INS8 INS27 INS8 INS8 INS34 INS34 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS32 INS60 INS54 INS42 INS33 INS21 INS21 INS42 INS33 INS42 INS42 INS38 INS8 INS32 INS42 INS40 INS43 INS59 INS8 INS8 INS32 INS32 INS60 INS32 INS18 INS32 INS42 INS40 INS42 INS14 INS60 INS60 INS21 INS61 INS21 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS43 INS59 INS43 INS59 INS7 INS27 INS8 INS32 INS45 INS42 INS45 INS45 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 UPD42 UPD42 INS42 MOV32 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS7 INS7 INS7 UPD42 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS14 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS60 INS74 INS59 INS32 INS43 INS43 INS43 INS42 MOV32 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL45 DEL27 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL45 DEL27