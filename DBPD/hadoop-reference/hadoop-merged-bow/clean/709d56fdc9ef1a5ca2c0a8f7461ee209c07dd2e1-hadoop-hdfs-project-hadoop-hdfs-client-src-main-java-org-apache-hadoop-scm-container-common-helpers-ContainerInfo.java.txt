HDFS-12474. Ozone: SCM: Handling container report with key count and container usage. Contributed by Nanda kumar.

+import java.util.Comparator;
+
-public class ContainerInfo {
+public class ContainerInfo
+    implements Comparator<ContainerInfo>, Comparable<ContainerInfo> {
+  // Bytes allocated by SCM for clients.
+  private long allocatedBytes;
+  // Actual container usage, updated through heartbeat.
+  private long usedBytes;
+  private long numberOfKeys;
+  private long lastUsed;
+      long allocatedBytes,
+      long usedBytes,
+      long numberOfKeys,
+    this.allocatedBytes = allocatedBytes;
+    this.usedBytes = usedBytes;
+    this.numberOfKeys = numberOfKeys;
+    this.lastUsed = Time.monotonicNow();
-  public ContainerInfo(ContainerInfo container) {
-    this.pipeline = container.getPipeline();
-    this.state = container.getState();
-    this.containerName = container.getContainerName();
-    this.stateEnterTime = container.getStateEnterTime();
-    this.owner = container.getOwner();
-  }
-
+    builder.setAllocatedBytes(info.getAllocatedBytes());
+    builder.setUsedBytes(info.getUsedBytes());
+    builder.setNumberOfKeys(info.getNumberOfKeys());
-  public void setContainerName(String containerName) {
-    this.containerName = containerName;
-  }
-
-  /**
-   * Update the current container state and state enter time to now.
-   *
-   * @param state
-   */
-  public void setState(OzoneProtos.LifeCycleState state) {
-    this.state = state;
-    this.stateEnterTime = Time.monotonicNow();
-  }
-
+  public long getAllocatedBytes() {
+    return allocatedBytes;
+  }
+
+  public long getUsedBytes() {
+    return usedBytes;
+  }
+
+  public long getNumberOfKeys() {
+    return numberOfKeys;
+  }
+
+  /**
+   * Gets the last used time from SCM's perspective.
+   * @return time in milliseconds.
+   */
+  public long getLastUsed() {
+    return lastUsed;
+  }
+
+  public void updateLastUsedTime() {
+    lastUsed = Time.monotonicNow();
+  }
+
+  public void allocate(long size) {
+    // should we also have total container size in ContainerInfo
+    // and check before allocating?
+    allocatedBytes += size;
+  }
+
+    builder.setAllocatedBytes(getAllocatedBytes());
+    builder.setUsedBytes(getUsedBytes());
+    builder.setNumberOfKeys(getNumberOfKeys());
-        .append(state, that.state)
+  /**
+   * Compares its two arguments for order.  Returns a negative integer, zero, or
+   * a positive integer as the first argument is less than, equal to, or greater
+   * than the second.<p>
+   *
+   * @param o1 the first object to be compared.
+   * @param o2 the second object to be compared.
+   * @return a negative integer, zero, or a positive integer as the first
+   * argument is less than, equal to, or greater than the second.
+   * @throws NullPointerException if an argument is null and this comparator
+   *                              does not permit null arguments
+   * @throws ClassCastException   if the arguments' types prevent them from
+   *                              being compared by this comparator.
+   */
+  @Override
+  public int compare(ContainerInfo o1, ContainerInfo o2) {
+    return Long.compare(o1.getLastUsed(), o2.getLastUsed());
+  }
+
+  /**
+   * Compares this object with the specified object for order.  Returns a
+   * negative integer, zero, or a positive integer as this object is less than,
+   * equal to, or greater than the specified object.
+   *
+   * @param o the object to be compared.
+   * @return a negative integer, zero, or a positive integer as this object is
+   * less than, equal to, or greater than the specified object.
+   * @throws NullPointerException if the specified object is null
+   * @throws ClassCastException   if the specified object's type prevents it
+   *                              from being compared to this object.
+   */
+  @Override
+  public int compareTo(ContainerInfo o) {
+    return this.compare(this, o);
+  }
+
+    private long allocated;
+    private long used;
+    private long keys;
+    public Builder setAllocatedBytes(long bytesAllocated) {
+      this.allocated = bytesAllocated;
+      return this;
+    }
+
+    public Builder setUsedBytes(long bytesUsed) {
+      this.used = bytesUsed;
+      return this;
+    }
+
+    public Builder setNumberOfKeys(long keyCount) {
+      this.keys = keyCount;
+      return this;
+    }
+
-          ContainerInfo(containerName, state, pipeline, stateEnterTime, owner);
+          ContainerInfo(containerName, state, pipeline, allocated, used,
+          keys, stateEnterTime, owner);

INS26 MOV31 MOV31 INS40 INS74 INS74 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS43 INS43 INS43 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS44 INS44 INS44 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS39 INS42 MOV8 UPD42 INS78 UPD39 UPD42 MOV44 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS8 INS23 INS23 INS23 INS31 INS31 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS41 INS41 INS65 INS65 INS41 INS39 UPD42 INS21 INS21 INS21 INS65 UPD65 INS65 INS65 INS65 INS42 UPD42 UPD43 UPD42 INS41 INS65 INS65 INS65 INS65 INS65 INS42 MOV43 INS42 INS41 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS7 INS7 INS7 INS7 INS32 INS32 INS32 INS42 INS42 INS42 INS66 INS66 INS42 UPD7 INS32 INS32 INS32 INS66 INS66 INS66 INS42 UPD66 UPD42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS32 INS42 INS42 INS42 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS52 INS42 INS52 INS42 INS7 INS52 INS7 INS52 INS7 INS52 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS43 INS42 INS42 INS42 MOV14 MOV42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 DEL83 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL40 DEL32 DEL42 DEL40