HDFS-9720. DiskBalancer : Add configuration parameters. Contributed by Anu Engineer.

+import org.apache.htrace.fasterxml.jackson.annotation.JsonInclude;
+
+
+
+
+/**
+ * Ignore fields with default values. In most cases Throughtput, diskErrors
+ * tolerancePercent and bandwidth will be the system defaults.
+ * So we will avoid serializing them into JSON.
+ */
+@JsonInclude(JsonInclude.Include.NON_DEFAULT)
+  private long maxDiskErrors;
+  private long tolerancePercent;
+  private long bandwidth;
+
+
+  /**
+   * Gets Maximum numbers of errors to be tolerated before this
+   * move operation is aborted.
+   * @return  long.
+   */
+  public long getMaxDiskErrors() {
+    return maxDiskErrors;
+  }
+
+  /**
+   * Sets the maximum numbers of Errors to be tolerated before this
+   * step is aborted.
+   * @param maxDiskErrors - long
+   */
+  public void setMaxDiskErrors(long maxDiskErrors) {
+    this.maxDiskErrors = maxDiskErrors;
+  }
+
+  /**
+   * Tolerance Percentage indicates when a move operation is considered good
+   * enough. This is a percentage of deviation from ideal that is considered
+   * fine.
+   *
+   * For example : if the ideal amount on each disk was 1 TB and the
+   * tolerance was 10%, then getting to 900 GB on the destination disk is
+   * considerd good enough.
+   *
+   * @return tolerance percentage.
+   */
+  public long getTolerancePercent() {
+    return tolerancePercent;
+  }
+
+  /**
+   * Sets the tolerance percentage.
+   * @param tolerancePercent  - long
+   */
+  public void setTolerancePercent(long tolerancePercent) {
+    this.tolerancePercent = tolerancePercent;
+  }
+
+  /**
+   * Gets the disk Bandwidth. That is the MB/Sec to copied. We will max out
+   * on this amount of throughput. This is useful to prevent too much I/O on
+   * datanode while data node is in use.
+   * @return  long.
+   */
+  public long getBandwidth() {
+    return bandwidth;
+  }
+
+  /**
+   * Sets the maximum disk bandwidth per sec to use for this step.
+   * @param bandwidth  - Long, MB / Sec of data to be moved between
+   *                   source and destinatin volume.
+   */
+  public void setBandwidth(long bandwidth) {
+    this.bandwidth = bandwidth;
+  }

INS26 INS40 INS79 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS40 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS66 UPD66 UPD66 INS42 INS42 INS42 INS65 INS65 INS41 INS65 INS65 INS39 INS42 INS21 INS65 INS65 INS41 INS65 INS65 INS39 INS42 INS21 INS65 INS65 INS41 INS65 INS65 INS39 INS42 INS21 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS7 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS7 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS7 INS22 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42