HDFS-7430. Refactor the BlockScanner to use O(1) memory and use multiple threads (cmccabe)

-  volatile DataBlockScanner blockScanner = null;
+  private final BlockScanner blockScanner;
+    this.blockScanner = new BlockScanner(this, conf);
+    this.blockScanner = new BlockScanner(this, conf);
-                               DataBlockScanner.Servlet.class);
+                               BlockScanner.Servlet.class);
+
-  
-/**
- * Initialize the datanode's periodic scanners:
- *     {@link DataBlockScanner}
- *     {@link DirectoryScanner}
- * They report results on a per-blockpool basis but do their scanning 
- * on a per-Volume basis to minimize competition for disk iops.
- * 
- * @param conf - Configuration has the run intervals and other 
- *               parameters for these periodic scanners
- */
-  private void initPeriodicScanners(Configuration conf) {
-    initDataBlockScanner(conf);
-    initDirectoryScanner(conf);
-  }
-  
+
-    shutdownDataBlockScanner();
+    blockScanner.removeAllVolumeScanners();
-  
-  /**
-   * See {@link DataBlockScanner}
-   */
-  private synchronized void initDataBlockScanner(Configuration conf) {
-    if (blockScanner != null) {
-      return;
-    }
-    String reason = null;
-    assert data != null;
-    if (conf.getInt(DFS_DATANODE_SCAN_PERIOD_HOURS_KEY,
-                    DFS_DATANODE_SCAN_PERIOD_HOURS_DEFAULT) < 0) {
-      reason = "verification is turned off by configuration";
-    } else if ("SimulatedFSDataset".equals(data.getClass().getSimpleName())) {
-      reason = "verifcation is not supported by SimulatedFSDataset";
-    } 
-    if (reason == null) {
-      blockScanner = new DataBlockScanner(this, data, conf);
-      blockScanner.start();
-    } else {
-      LOG.info("Periodic Block Verification scan disabled because " + reason);
-    }
-  }
-  
-  private void shutdownDataBlockScanner() {
-    if (blockScanner != null) {
-      blockScanner.shutdown();
-    }
-  }
-  
+
-      if (blockScanner != null) {
-        blockScanner.removeBlockPool(bpId);
-      }
+
+      blockScanner.disableBlockPoolId(bpId);
-    initPeriodicScanners(conf);
-    
+    initDirectoryScanner(conf);
+    blockScanner.enableBlockPoolId(bpos.getBlockPoolId());
-    FsVolumeSpi volume = getFSDataset().getVolume(block);
-    if (blockScanner != null && !volume.isTransientStorage()) {
-      blockScanner.addBlock(block, false);
-    }
+  @VisibleForTesting
-  public DataBlockScanner getBlockScanner() {
+  public BlockScanner getBlockScanner() {

INS31 UPD83 INS83 UPD43 MOV21 INS78 MOV83 UPD43 MOV43 MOV42 MOV8 UPD42 INS21 INS21 MOV21 INS42 UPD42 INS7 INS7 INS22 INS14 INS22 INS14 UPD42 INS42 MOV21 UPD42 UPD42 INS32 INS52 INS42 INS43 INS52 INS42 INS52 INS42 INS43 INS52 INS42 UPD43 INS42 INS42 INS42 INS42 UPD40 UPD42 DEL33 DEL66 DEL42 DEL65 DEL42 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL42 DEL65 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL6 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL45 DEL7 DEL21 DEL8 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL45 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL52 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL66 DEL65 DEL29 DEL31