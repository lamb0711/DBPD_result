YARN-5740. Add a new field in Slider status output - lifetime (remaining). Contributed by Jian He

+import org.apache.hadoop.yarn.api.records.ApplicationReport;
+import org.apache.hadoop.yarn.api.records.ApplicationTimeoutType;
-    Set<String> applications;
+    Set<ApplicationReport> applications;
-        for (String app : applications) {
+        for (ApplicationReport app : applications) {
-          // TODO: Need to get lifetime, launch-time and privileged container
-          // status from YARN
-          application.setLifetime(null);
-          application.setLaunchTime(new Date());
-          application.setName(app);
+          application.setLifetime(app.getApplicationTimeouts().get(
+              ApplicationTimeoutType.LIFETIME).getRemainingTime());
+          application.setLaunchTime(new Date(app.getStartTime()));
+          application.setName(app.getName());
-    // lifetime - set it to unlimited for now
-    // TODO: Once YARN-3813 and YARN-4205 are available - get it from YARN
-    app.setLifetime(DEFAULT_UNLIMITED_LIFETIME);
+    app.setLifetime(queryLifetime(appName));
+  private long queryLifetime(String appName) {
+    try {
+      return invokeSliderClientRunnable(
+          new SliderClientContextRunnable<Long>() {
+            @Override
+            public Long run(SliderClient sliderClient)
+                throws YarnException, IOException, InterruptedException {
+              ApplicationReport report = sliderClient.findInstance(appName);
+              return report.getApplicationTimeouts()
+                  .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();
+            }
+          });
+    } catch (Exception e) {
+      logger.error("Error when querying lifetime for " + appName, e);
+      return DEFAULT_UNLIMITED_LIFETIME;
+    }
+  }
+
-  private Set<String> getSliderApplications(final String state)
+  private Set<ApplicationReport> getSliderApplications(final String state)
-  private Set<String> getSliderApplications(final boolean liveOnly)
+  private Set<ApplicationReport> getSliderApplications(final boolean liveOnly)
-  private Set<String> getSliderApplications(final boolean liveOnly,
-      final String state) throws IOException, YarnException,
-      InterruptedException {
-    return invokeSliderClientRunnable(new SliderClientContextRunnable<Set<String>>() {
-      @Override
-      public Set<String> run(SliderClient sliderClient) throws YarnException,
-          IOException, InterruptedException {
-        Set<String> apps;
-        ActionListArgs listArgs = new ActionListArgs();
-        if (liveOnly) {
-          apps = sliderClient.getApplicationList(null);
-        } else if (StringUtils.isNotEmpty(state)) {
-          listArgs.state = state;
-          apps = sliderClient.getApplicationList(null, listArgs);
-        } else {
-          apps = sliderClient.getApplicationList(null, listArgs);
-        }
-        return apps;
-      }
-    });
+  private Set<ApplicationReport> getSliderApplications(final boolean liveOnly,
+      final String state)
+      throws IOException, YarnException, InterruptedException {
+    return invokeSliderClientRunnable(
+        new SliderClientContextRunnable<Set<ApplicationReport>>() {
+          @Override
+          public Set<ApplicationReport> run(SliderClient sliderClient)
+              throws YarnException, IOException, InterruptedException {
+            Set<ApplicationReport> apps;
+            ActionListArgs listArgs = new ActionListArgs();
+            if (liveOnly) {
+              apps = sliderClient.getApplicationList(null);
+            } else if (StringUtils.isNotEmpty(state)) {
+              listArgs.state = state;
+              apps = sliderClient.getApplicationList(null, listArgs);
+            } else {
+              apps = sliderClient.getApplicationList(null, listArgs);
+            }
+            return apps;
+          }
+        });

INS26 INS26 INS40 INS40 INS31 INS83 INS39 INS42 MOV44 INS8 INS74 INS74 UPD74 MOV74 UPD42 INS54 MOV43 INS43 MOV43 INS43 UPD43 UPD74 INS8 INS12 INS42 INS42 UPD42 UPD43 INS32 INS41 INS44 INS8 UPD42 UPD42 MOV42 INS42 INS32 INS43 INS42 INS21 INS41 UPD74 INS42 INS14 INS42 INS32 INS42 UPD74 MOV74 INS44 INS74 INS1 INS42 INS42 INS27 INS42 UPD43 UPD74 MOV74 INS43 INS42 INS43 INS43 INS31 INS45 INS42 UPD42 UPD43 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS8 UPD42 UPD74 MOV74 INS32 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS41 UPD43 INS32 INS42 INS32 MOV42 INS42 INS42 INS43 INS59 INS32 UPD42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 DEL33 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74