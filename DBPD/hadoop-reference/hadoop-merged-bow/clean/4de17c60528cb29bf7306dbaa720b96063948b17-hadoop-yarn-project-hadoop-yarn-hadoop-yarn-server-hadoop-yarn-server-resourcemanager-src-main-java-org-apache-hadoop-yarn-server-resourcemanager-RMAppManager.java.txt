YARN-1812. Fixed ResourceManager to synchrously renew tokens after recovery and thus recover app itself synchronously and avoid races with resyncing NodeManagers. Contributed by Jian He.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576843 13f79535-47bb-0310-9956-ffa450edef68

-      String user, boolean isRecovered, RMState state) throws YarnException {
+      String user) throws YarnException {
+    ApplicationId appId = submissionContext.getApplicationId();
-    if (isRecovered) {
-      recoverApplication(state, application);
-      RMAppState rmAppState =
-          state.getApplicationState().get(applicationId).getState();
-      if (isApplicationInFinalState(rmAppState)) {
-        // We are synchronously moving the application into final state so that
-        // momentarily client will not see this application in NEW state. Also
-        // for finished applications we will avoid renewing tokens.
-        application
-            .handle(new RMAppEvent(applicationId, RMAppEventType.RECOVER));
-        return;
-      }
-    }
-    
+        this.rmContext.getDelegationTokenRenewer().addApplicationAsync(appId,
+          credentials, submissionContext.getCancelTokensWhenComplete());
-        LOG.warn(
-            "Unable to parse credentials.", e);
+        LOG.warn("Unable to parse credentials.", e);
-        this.rmContext.getDispatcher().getEventHandler().handle(
-            new RMAppRejectedEvent(applicationId, e.getMessage()));
+        this.rmContext.getDispatcher().getEventHandler()
+          .handle(new RMAppRejectedEvent(applicationId, e.getMessage()));
-      this.rmContext.getDelegationTokenRenewer().addApplication(
-          applicationId, credentials,
-          submissionContext.getCancelTokensWhenComplete(), isRecovered);
+      // Dispatcher is not yet started at this time, so these START events
+      // enqueued should be guaranteed to be first processed when dispatcher
+      // gets started.
-          .handle(new RMAppEvent(applicationId,
-              isRecovered ? RMAppEventType.RECOVER : RMAppEventType.START));
+        .handle(new RMAppEvent(applicationId, RMAppEventType.START));
+    }
+  }
+
+  @SuppressWarnings("unchecked")
+  protected void
+      recoverApplication(ApplicationState appState, RMState rmState)
+          throws Exception {
+    ApplicationSubmissionContext appContext =
+        appState.getApplicationSubmissionContext();
+    ApplicationId appId = appState.getAppId();
+
+    // create and recover app.
+    RMAppImpl application =
+        createAndPopulateNewRMApp(appContext, appState.getSubmitTime(),
+          appState.getUser());
+    application.recover(rmState);
+    if (isApplicationInFinalState(appState.getState())) {
+      // We are synchronously moving the application into final state so that
+      // momentarily client will not see this application in NEW state. Also
+      // for finished applications we will avoid renewing tokens.
+      application.handle(new RMAppEvent(appId, RMAppEventType.RECOVER));
+      return;
+    }
+
+    if (UserGroupInformation.isSecurityEnabled()) {
+      Credentials credentials = null;
+      try {
+        credentials = parseCredentials(appContext);
+        // synchronously renew delegation token on recovery.
+        rmContext.getDelegationTokenRenewer().addApplicationSync(appId,
+          credentials, appContext.getCancelTokensWhenComplete());
+        application.handle(new RMAppEvent(appId, RMAppEventType.RECOVER));
+      } catch (Exception e) {
+        LOG.warn("Unable to parse and renew delegation tokens.", e);
+        this.rmContext.getDispatcher().getEventHandler()
+          .handle(new RMAppRejectedEvent(appId, e.getMessage()));
+        throw e;
+      }
+    } else {
+      application.handle(new RMAppEvent(appId, RMAppEventType.RECOVER));
-  private void recoverApplication(RMState state, RMAppImpl application)
-      throws YarnException {
-    try {
-      application.recover(state);
-    } catch (Exception e) {
-      LOG.error("Error recovering application", e);
-      throw new YarnException(e);
-    }
-  }
-
-      submitApplication(appState.getApplicationSubmissionContext(),
-        appState.getSubmitTime(), appState.getUser(), true, state);
+      recoverApplication(appState, state);

MOV31 INS79 UPD83 UPD43 INS8 MOV60 INS42 INS45 UPD43 UPD42 INS43 INS42 UPD42 INS60 INS60 INS60 INS21 INS25 INS25 UPD43 MOV8 UPD42 INS42 INS43 INS59 INS43 INS59 MOV43 INS59 INS32 INS32 INS8 INS32 INS8 INS8 UPD42 UPD42 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 MOV32 MOV42 INS42 INS42 INS42 INS42 INS32 INS21 INS41 INS42 INS42 INS60 MOV54 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS21 MOV32 INS42 INS42 INS14 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS32 UPD40 MOV43 INS42 INS40 INS7 INS32 INS21 INS53 INS43 INS42 INS40 MOV32 INS42 INS42 INS42 MOV32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 UPD42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS40 UPD42 UPD45 INS32 INS42 INS14 INS42 INS32 INS42 UPD43 MOV43 INS42 INS32 INS22 INS42 UPD42 INS42 INS42 INS52 INS42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL42 DEL42 DEL42 DEL40 DEL40 DEL16 DEL14 DEL32 DEL21 DEL8 DEL42 DEL9 DEL42 DEL42 DEL14 DEL53 DEL8