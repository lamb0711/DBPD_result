HDFS-12225: [SPS]: Optimize extended attributes for tracking SPS movements. Contributed by Surendra Singh Lilhore.

-import static org.apache.hadoop.hdfs.server.common.HdfsServerConstants.XATTR_SATISFY_STORAGE_POLICY;
-
-import java.io.IOException;
-      final BlockStorageMovementNeeded storageMovementNeeded,
-    this.storageMovementNeeded = storageMovementNeeded;
+    this.storageMovementNeeded = new BlockStorageMovementNeeded(namesystem,
+        this);
-
+    storageMovementNeeded.start();
+
+    storageMovementNeeded.stop();
+
-      this.clearQueuesWithNotification();
+      storageMovementNeeded.clearQueuesWithNotification();
+
-          Long blockCollectionID = storageMovementNeeded.get();
-          if (blockCollectionID != null) {
+          ItemInfo itemInfo = storageMovementNeeded.get();
+          if (itemInfo != null) {
+            long trackId = itemInfo.getTrackId();
-                namesystem.getBlockCollection(blockCollectionID);
+                namesystem.getBlockCollection(trackId);
-                this.storageMovementsMonitor.add(blockCollectionID, true);
+                this.storageMovementsMonitor.add(itemInfo, true);
-                this.storageMovementsMonitor.add(blockCollectionID, false);
+                this.storageMovementsMonitor.add(itemInfo, false);
-                  LOG.debug("Adding trackID " + blockCollectionID
+                  LOG.debug("Adding trackID " + trackId
-                this.storageMovementNeeded.add(blockCollectionID);
+                this.storageMovementNeeded.add(itemInfo);
-                postBlkStorageMovementCleanup(blockCollectionID);
+                storageMovementNeeded.removeItemTrackInfo(itemInfo);
+            } else {
+              // File doesn't exists (maybe got deleted), remove trackId from
+              // the queue
+              storageMovementNeeded.removeItemTrackInfo(itemInfo);
-   * Clean all the movements in storageMovementNeeded and notify
-   * to clean up required resources.
-   * @throws IOException
+   * Set file inode in queue for which storage movement needed for its blocks.
+   *
+   * @param inodeId
+   *          - file inode/blockcollection id.
-  private void clearQueuesWithNotification() {
-    Long id;
-    while ((id = storageMovementNeeded.get()) != null) {
-      try {
-        postBlkStorageMovementCleanup(id);
-      } catch (IOException ie) {
-        LOG.warn("Failed to remove SPS "
-            + "xattr for collection id " + id, ie);
-      }
+  public void satisfyStoragePolicy(Long inodeId) {
+    //For file rootId and trackId is same
+    storageMovementNeeded.add(new ItemInfo(inodeId, inodeId));
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Added track info for inode {} to block "
+          + "storageMovementNeeded queue", inodeId);
+  public void addInodeToPendingDirQueue(long id) {
+    storageMovementNeeded.addToPendingDirQueue(id);
+  }
+
-   * When block movement has been finished successfully, some additional
-   * operations should be notified, for example, SPS xattr should be
-   * removed.
-   * @param trackId track id i.e., block collection id.
-   * @throws IOException
+   * Clear queues for given track id.
-  public void postBlkStorageMovementCleanup(long trackId)
-      throws IOException {
-    this.namesystem.removeXattr(trackId, XATTR_SATISFY_STORAGE_POLICY);
+  public void clearQueue(long trackId) {
+    storageMovementNeeded.clearQueue(trackId);
+  }
+
+  /**
+   * ItemInfo is a file info object for which need to satisfy the
+   * policy.
+   */
+  public static class ItemInfo {
+    private long rootId;
+    private long trackId;
+
+    public ItemInfo(long rootId, long trackId) {
+      this.rootId = rootId;
+      this.trackId = trackId;
+    }
+
+    /**
+     * Return the root of the current track Id.
+     */
+    public long getRootId() {
+      return rootId;
+    }
+
+    /**
+     * Return the File inode Id for which needs to satisfy the policy.
+     */
+    public long getTrackId() {
+      return trackId;
+    }
+
+    /**
+     * Returns true if the tracking path is a directory, false otherwise.
+     */
+    public boolean isDir() {
+      return (rootId != trackId);
+    }

INS31 INS31 INS55 UPD83 UPD42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 MOV44 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS21 INS21 UPD65 MOV43 INS42 MOV21 INS25 INS39 INS42 INS21 MOV65 INS21 INS65 INS83 INS39 INS59 INS83 INS39 INS59 MOV83 INS42 INS44 INS44 MOV8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS32 INS32 UPD66 UPD42 INS66 INS32 INS8 INS32 UPD66 INS32 INS66 UPD66 MOV66 INS42 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS65 INS41 INS65 INS41 INS65 INS41 INS14 INS42 INS42 INS42 INS42 UPD42 INS42 INS14 INS42 INS42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS66 INS42 INS66 INS42 INS66 INS36 MOV43 INS42 INS52 INS43 INS42 INS42 INS22 INS42 INS22 INS42 INS27 INS42 INS42 UPD42 UPD42 MOV52 UPD42 MOV42 INS52 INS42 INS42 INS42 UPD45 UPD45 UPD43 UPD42 UPD42 UPD42 INS60 INS39 INS59 INS8 INS42 INS32 MOV21 MOV21 INS21 INS42 INS42 UPD42 INS32 INS42 INS42 INS42 UPD42 UPD9 UPD42 UPD9 UPD42 UPD42 UPD42 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL44 DEL42 DEL52 DEL66 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL61 DEL8 DEL66 DEL66 DEL22 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL65 DEL42 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL31