HDFS-4098. Add FileWithLink, INodeFileUnderConstructionWithLink and INodeFileUnderConstructionSnapshot in order to support append to snapshotted files.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1432788 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo;
- * INodeFile with a link to the next element.
- * This class is used to represent the original file that is snapshotted.
- * The snapshot files are represented by {@link INodeFileSnapshot}.
- * The link of all the snapshot files and the original file form a circular
- * linked list so that all elements are accessible by any of the elements.
+ * Represent an {@link INodeFile} that is snapshotted.
+ * Note that snapshot files are represented by {@link INodeFileSnapshot}.
-public class INodeFileWithLink extends INodeFile {
-  private INodeFileWithLink next;
+public class INodeFileWithLink extends INodeFile implements FileWithLink {
+  private FileWithLink next;
-    next = this;
+    setNext(this);
-  void setNext(INodeFileWithLink next) {
+  @SuppressWarnings("unchecked")
+  @Override
+  public <N extends INodeFile & FileWithLink> N getNext() {
+    return (N)next;
+  }
+
+  @Override
+  public <N extends INodeFile & FileWithLink> void setNext(N next) {
-  INodeFileWithLink getNext() {
-    return next;
-  }
-  
-  /** Insert inode to the circular linked list. */
-  void insert(INodeFileWithLink inode) {
+  @Override
+  public <N extends INodeFile & FileWithLink> void insert(N inode) {
-  /**
-   * @return the max file replication of the elements
-   *         in the circular linked list.
-   */
-    short max = getFileReplication();
-    // i may be null since next will be set to null when the INode is deleted
-    for(INodeFileWithLink i = next; i != this && i != null; i = i.getNext()) {
-      final short replication = i.getFileReplication();
-      if (replication > max) {
-        max = replication;
-      }
-    }
-    return max;
+    return Util.getBlockReplication(this);
-  /**
-   * {@inheritDoc}
-   * 
-   * Remove the current inode from the circular linked list.
-   * If some blocks at the end of the block list no longer belongs to
-   * any other inode, collect them and update the block list.
-   */
-    if (next == this) {
+    if (next == null || next == this) {
-      super.collectSubtreeBlocksAndClear(info);
+      return super.collectSubtreeBlocksAndClear(info);
-      // There are other inode(s) using the blocks.
-      // Compute max file size excluding this and find the last inode. 
-      long max = next.computeFileSize(true);
-      short maxReplication = next.getFileReplication();
-      INodeFileWithLink last = next;
-      for(INodeFileWithLink i = next.getNext(); i != this; i = i.getNext()) {
-        final long size = i.computeFileSize(true);
-        if (size > max) {
-          max = size;
-        }
-        final short rep = i.getFileReplication();
-        if (rep > maxReplication) {
-          maxReplication = rep;
-        }
-        last = i;
-      }
-
-      collectBlocksBeyondMaxAndClear(max, info);
-      
-      // remove this from the circular linked list.
-      last.next = this.next;
-      // Set the replication of the current INode to the max of all the other
-      // linked INodes, so that in case the current INode is retrieved from the
-      // blocksMap before it is removed or updated, the correct replication
-      // number can be retrieved.
-      this.setFileReplication(maxReplication, null);
-      this.next = null;
-      // clear parent
-      setParent(null);
-    }
-    return 1;
-  }
-
-  private void collectBlocksBeyondMaxAndClear(final long max,
-      final BlocksMapUpdateInfo info) {
-    final BlockInfo[] oldBlocks = getBlocks();
-    if (oldBlocks != null) {
-      //find the minimum n such that the size of the first n blocks > max
-      int n = 0;
-      for(long size = 0; n < oldBlocks.length && max > size; n++) {
-        size += oldBlocks[n].getNumBytes();
-      }
-
-      // Replace the INode for all the remaining blocks in blocksMap
-      BlocksMapINodeUpdateEntry entry = new BlocksMapINodeUpdateEntry(this,
-          next);
-      if (info != null) {
-        for (int i = 0; i < n; i++) {
-          info.addUpdateBlock(oldBlocks[i], entry);
-        }
-      }
-      
-      // starting from block n, the data is beyond max.
-      if (n < oldBlocks.length) {
-        // resize the array.  
-        final BlockInfo[] newBlocks;
-        if (n == 0) {
-          newBlocks = null;
-        } else {
-          newBlocks = new BlockInfo[n];
-          System.arraycopy(oldBlocks, 0, newBlocks, 0, n);
-        }
-        for(INodeFileWithLink i = next; i != this; i = i.getNext()) {
-          i.setBlocks(newBlocks);
-        }
-
-        // collect the blocks beyond max.  
-        if (info != null) {
-          for(; n < oldBlocks.length; n++) {
-            info.addDeleteBlock(oldBlocks[n]);
-          }
-        }
-      }
-      setBlocks(null);
+      return Util.collectSubtreeBlocksAndClear(this, info);

INS43 INS23 INS31 INS31 INS31 UPD42 MOV42 INS83 INS43 MOV59 INS79 MOV78 MOV83 INS73 INS43 INS42 INS8 INS78 MOV83 INS73 INS39 INS42 INS44 MOV8 INS78 INS83 INS73 INS78 INS83 INS39 INS42 INS8 MOV78 UPD83 UPD39 UPD42 MOV44 UPD66 INS65 UPD66 UPD66 UPD42 MOV42 INS42 INS45 INS42 INS43 INS43 INS42 INS41 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS43 INS43 UPD43 INS42 INS41 INS42 INS32 INS42 UPD42 MOV42 INS11 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS32 INS27 MOV8 MOV8 INS42 INS52 INS43 INS42 INS42 INS42 INS52 INS27 MOV27 INS41 INS41 INS42 UPD42 MOV42 MOV33 MOV48 INS32 INS42 INS42 INS52 INS42 DEL40 DEL26 DEL66 DEL66 DEL83 DEL43 DEL23 DEL42 DEL52 DEL7 DEL39 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL59 DEL58 DEL42 DEL52 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL39 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL52 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL83 DEL39 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL40 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL42 DEL33 DEL32 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL34 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL21 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL59 DEL58 DEL42 DEL52 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL33 DEL27 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL27 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL43 DEL52 DEL42 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL40 DEL27 DEL25 DEL42 DEL33 DEL32 DEL21 DEL8