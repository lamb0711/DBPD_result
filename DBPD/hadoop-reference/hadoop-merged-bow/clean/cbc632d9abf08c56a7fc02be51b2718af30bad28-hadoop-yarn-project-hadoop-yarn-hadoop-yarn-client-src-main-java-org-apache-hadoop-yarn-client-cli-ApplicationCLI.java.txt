Merge branch 'yarn-native-services' into trunk

-import java.util.Collection;
-import java.util.Collections;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
+import org.apache.hadoop.yarn.client.api.AppAdminClient;
+  public static final String APP = "app";
+  // app admin options
+  public static final String LAUNCH_CMD = "launch";
+  public static final String STOP_CMD = "stop";
+  public static final String START_CMD = "start";
+  public static final String SAVE_CMD = "save";
+  public static final String DESTROY_CMD = "destroy";
+  public static final String FLEX_CMD = "flex";
+  public static final String COMPONENT = "component";
+  public static final String ENABLE_FAST_LAUNCH = "enableFastLaunch";
+
+  private static String firstArg = null;
+
-    int res = ToolRunner.run(cli, args);
+    int res = ToolRunner.run(cli, preProcessArgs(args));
+  @VisibleForTesting
+  public static String[] preProcessArgs(String[] args) {
+    if (args.length > 0) {
+      // first argument (app|application|applicationattempt|container) must
+      // be stripped off for GenericOptionsParser to work
+      firstArg = args[0];
+      return Arrays.copyOfRange(args, 1, args.length);
+    } else {
+      return args;
+    }
+  }
+
-    if (args.length > 0 && args[0].equalsIgnoreCase(APPLICATION)) {
+    if (firstArg != null) {
+      title = firstArg;
+    } else if (args.length > 0) {
+      title = args[0];
+    }
+    if (title != null && (title.equalsIgnoreCase(APPLICATION) || title
+        .equalsIgnoreCase(APP))) {
-    } else if (args.length > 0 && args[0].equalsIgnoreCase(APPLICATION_ATTEMPT)) {
-      title = APPLICATION_ATTEMPT;
+      opts.addOption(LAUNCH_CMD, true, "Launches application from " +
+          "specification file (saves specification and starts application). " +
+          "Options -updateLifetime and -changeQueue can be specified to alter" +
+          " the values provided in the file. Supports -appTypes option to " +
+          "specify which client implementation to use.");
+      opts.addOption(STOP_CMD, true, "Stops application gracefully (may be " +
+          "started again later). If name is provided, appType must be " +
+          "provided unless it is the default yarn-service. If ID is provided," +
+          " the appType will be looked up. Supports -appTypes option to " +
+          "specify which client implementation to use.");
+      opts.addOption(START_CMD, true, "Starts a previously saved " +
+          "application. Supports -appTypes option to specify which client " +
+          "implementation to use.");
+      opts.addOption(SAVE_CMD, true, "Saves specification file for " +
+          "an application. Options -updateLifetime and -changeQueue can be " +
+          "specified to alter the values provided in the file. Supports " +
+          "-appTypes option to specify which client implementation to use.");
+      opts.addOption(DESTROY_CMD, true, "Destroys a saved application " +
+          "specification and removes all application data permanently. " +
+          "Supports -appTypes option to specify which client implementation " +
+          "to use.");
+      opts.addOption(FLEX_CMD, true, "Changes number of " +
+          "running containers for a component of an application / " +
+          "long-running service. Requires -component option. If name is " +
+          "provided, appType must be provided unless it is the default " +
+          "yarn-service. If ID is provided, the appType will be looked up. " +
+          "Supports -appTypes option to specify which client implementation " +
+          "to use.");
+      opts.addOption(COMPONENT, true, "Works with -flex option to change " +
+          "the number of components/containers running for an application / " +
+          "long-running service. Supports absolute or relative changes, such " +
+          "as +1, 2, or -3.");
+      opts.addOption(ENABLE_FAST_LAUNCH, false, "Uploads AM dependencies " +
+          "to HDFS to make future launches faster.  Supports -appTypes option" +
+          " to specify which client implementation to use.");
+      opts.getOption(LAUNCH_CMD).setArgName("Application Name> <File Name");
+      opts.getOption(LAUNCH_CMD).setArgs(2);
+      opts.getOption(START_CMD).setArgName("Application Name");
+      opts.getOption(STOP_CMD).setArgName("Application Name or ID");
+      opts.getOption(SAVE_CMD).setArgName("Application Name> <File Name");
+      opts.getOption(SAVE_CMD).setArgs(2);
+      opts.getOption(DESTROY_CMD).setArgName("Application Name");
+      opts.getOption(FLEX_CMD).setArgName("Application Name or ID");
+      opts.getOption(COMPONENT).setArgName("Component Name> <Count");
+      opts.getOption(COMPONENT).setArgs(2);
+    } else if (title != null && title.equalsIgnoreCase(APPLICATION_ATTEMPT)) {
-    } else if (args.length > 0 && args[0].equalsIgnoreCase(CONTAINER)) {
-      title = CONTAINER;
+    } else if (title != null && title.equalsIgnoreCase(CONTAINER)) {
-
-    if (cliParser.hasOption(STATUS_CMD)) {
-      if (args.length != 3) {
+    String[] unparsedArgs = cliParser.getArgs();
+    if (firstArg == null) {
+      if (unparsedArgs.length != 1) {
-      if (args[0].equalsIgnoreCase(APPLICATION)) {
-        exitCode = printApplicationReport(cliParser.getOptionValue(STATUS_CMD));
-      } else if (args[0].equalsIgnoreCase(APPLICATION_ATTEMPT)) {
+    } else {
+      if (unparsedArgs.length != 0) {
+        printUsage(title, opts);
+        return exitCode;
+      }
+    }
+
+    if (cliParser.hasOption(STATUS_CMD)) {
+      if (hasAnyOtherCLIOptions(cliParser, opts, STATUS_CMD)) {
+        printUsage(title, opts);
+        return exitCode;
+      }
+      if (title.equalsIgnoreCase(APPLICATION) ||
+          title.equalsIgnoreCase(APP)) {
+        ApplicationReport report = printApplicationReport(cliParser
+            .getOptionValue(STATUS_CMD));
+        if (report == null) {
+          exitCode = -1;
+        } else {
+          exitCode = 0;
+          String appType = report.getApplicationType();
+          try {
+            AppAdminClient client = AppAdminClient.createAppAdminClient(appType,
+                getConf());
+            sysout.println("Detailed Application Status :");
+            sysout.println(client.getStatusString(cliParser.getOptionValue(
+                STATUS_CMD)));
+          } catch (IllegalArgumentException e) {
+            // app type does not have app admin client implementation
+          }
+        }
+      } else if (title.equalsIgnoreCase(APPLICATION_ATTEMPT)) {
-      } else if (args[0].equalsIgnoreCase(CONTAINER)) {
+      } else if (title.equalsIgnoreCase(CONTAINER)) {
-      if (args[0].equalsIgnoreCase(APPLICATION)) {
+      if (title.equalsIgnoreCase(APPLICATION) ||
+          title.equalsIgnoreCase(APP)) {
-      } else if (args[0].equalsIgnoreCase(APPLICATION_ATTEMPT)) {
-        if (args.length != 3) {
+      } else if (title.equalsIgnoreCase(APPLICATION_ATTEMPT)) {
+        if (hasAnyOtherCLIOptions(cliParser, opts, LIST_CMD)) {
-      } else if (args[0].equalsIgnoreCase(CONTAINER)) {
-        if (args.length != 3) {
+      } else if (title.equalsIgnoreCase(CONTAINER)) {
+        if (hasAnyOtherCLIOptions(cliParser, opts, LIST_CMD)) {
-      if (args.length < 3 || hasAnyOtherCLIOptions(cliParser, opts, KILL_CMD)) {
+      if (hasAnyOtherCLIOptions(cliParser, opts, KILL_CMD)) {
-      if (!args[0].equalsIgnoreCase(APPLICATION_ATTEMPT)) {
+      if (!title.equalsIgnoreCase(APPLICATION_ATTEMPT)) {
+    } else if (cliParser.hasOption(SIGNAL_CMD)) {
+      if (hasAnyOtherCLIOptions(cliParser, opts, SIGNAL_CMD)) {
+        printUsage(title, opts);
+        return exitCode;
+      }
+      final String[] signalArgs = cliParser.getOptionValues(SIGNAL_CMD);
+      final String containerId = signalArgs[0];
+      SignalContainerCommand command =
+          SignalContainerCommand.OUTPUT_THREAD_DUMP;
+      if (signalArgs.length == 2) {
+        command = SignalContainerCommand.valueOf(signalArgs[1]);
+      }
+      signalToContainer(containerId, command);
+    } else if (cliParser.hasOption(LAUNCH_CMD)) {
+      if (hasAnyOtherCLIOptions(cliParser, opts, LAUNCH_CMD, APP_TYPE_CMD,
+          UPDATE_LIFETIME, CHANGE_APPLICATION_QUEUE)) {
+        printUsage(title, opts);
+        return exitCode;
+      }
+      String appType = getSingleAppTypeFromCLI(cliParser);
+      Long lifetime = null;
+      if (cliParser.hasOption(UPDATE_LIFETIME)) {
+        lifetime = Long.parseLong(cliParser.getOptionValue(UPDATE_LIFETIME));
+      }
+      String queue = null;
+      if (cliParser.hasOption(CHANGE_APPLICATION_QUEUE)) {
+        queue = cliParser.getOptionValue(CHANGE_APPLICATION_QUEUE);
+      }
+      String[] nameAndFile = cliParser.getOptionValues(LAUNCH_CMD);
+      return AppAdminClient.createAppAdminClient(appType, getConf())
+          .actionLaunch(nameAndFile[1], nameAndFile[0], lifetime, queue);
+    } else if (cliParser.hasOption(STOP_CMD)) {
+      if (hasAnyOtherCLIOptions(cliParser, opts, STOP_CMD, APP_TYPE_CMD)) {
+        printUsage(title, opts);
+        return exitCode;
+      }
+      String[] appNameAndType = getAppNameAndType(cliParser, STOP_CMD);
+      return AppAdminClient.createAppAdminClient(appNameAndType[1], getConf())
+          .actionStop(appNameAndType[0]);
+    } else if (cliParser.hasOption(START_CMD)) {
+      if (hasAnyOtherCLIOptions(cliParser, opts, START_CMD, APP_TYPE_CMD)) {
+        printUsage(title, opts);
+        return exitCode;
+      }
+      String appType = getSingleAppTypeFromCLI(cliParser);
+      return AppAdminClient.createAppAdminClient(appType, getConf())
+          .actionStart(cliParser.getOptionValue(START_CMD));
+    } else if (cliParser.hasOption(SAVE_CMD)) {
+      if (hasAnyOtherCLIOptions(cliParser, opts, SAVE_CMD, APP_TYPE_CMD,
+          UPDATE_LIFETIME, CHANGE_APPLICATION_QUEUE)) {
+        printUsage(title, opts);
+        return exitCode;
+      }
+      String appType = getSingleAppTypeFromCLI(cliParser);
+      Long lifetime = null;
+      if (cliParser.hasOption(UPDATE_LIFETIME)) {
+        lifetime = Long.parseLong(cliParser.getOptionValue(UPDATE_LIFETIME));
+      }
+      String queue = null;
+      if (cliParser.hasOption(CHANGE_APPLICATION_QUEUE)) {
+        queue = cliParser.getOptionValue(CHANGE_APPLICATION_QUEUE);
+      }
+      String[] nameAndFile = cliParser.getOptionValues(SAVE_CMD);
+      return AppAdminClient.createAppAdminClient(appType, getConf())
+          .actionSave(nameAndFile[1], nameAndFile[0], lifetime, queue);
+    } else if (cliParser.hasOption(DESTROY_CMD)) {
+      if (hasAnyOtherCLIOptions(cliParser, opts, DESTROY_CMD, APP_TYPE_CMD)) {
+        printUsage(title, opts);
+        return exitCode;
+      }
+      String appType = getSingleAppTypeFromCLI(cliParser);
+      return AppAdminClient.createAppAdminClient(appType, getConf())
+          .actionDestroy(cliParser.getOptionValue(DESTROY_CMD));
+    } else if (cliParser.hasOption(FLEX_CMD)) {
+      if (!cliParser.hasOption(COMPONENT) ||
+          hasAnyOtherCLIOptions(cliParser, opts, FLEX_CMD, COMPONENT,
+              APP_TYPE_CMD)) {
+        printUsage(title, opts);
+        return exitCode;
+      }
+      String[] rawCounts = cliParser.getOptionValues(COMPONENT);
+      Map<String, String> counts = new HashMap<>(rawCounts.length/2);
+      for (int i = 0; i < rawCounts.length - 1; i+=2) {
+        counts.put(rawCounts[i], rawCounts[i+1]);
+      }
+      String[] appNameAndType = getAppNameAndType(cliParser, FLEX_CMD);
+      return AppAdminClient.createAppAdminClient(appNameAndType[1], getConf())
+          .actionFlex(appNameAndType[0], counts);
+    } else if (cliParser.hasOption(ENABLE_FAST_LAUNCH)) {
+      String appType = getSingleAppTypeFromCLI(cliParser);
+      if (hasAnyOtherCLIOptions(cliParser, opts, ENABLE_FAST_LAUNCH,
+          APP_TYPE_CMD)) {
+        printUsage(title, opts);
+        return exitCode;
+      }
+      return AppAdminClient.createAppAdminClient(appType, getConf())
+          .enableFastLaunch();
-    } else if (cliParser.hasOption(SIGNAL_CMD)) {
-      if (args.length < 3 || args.length > 4) {
-        printUsage(title, opts);
-        return exitCode;
-      }
-      final String[] signalArgs = cliParser.getOptionValues(SIGNAL_CMD);
-      final String containerId = signalArgs[0];
-      SignalContainerCommand command =
-          SignalContainerCommand.OUTPUT_THREAD_DUMP;
-      if (signalArgs.length == 2) {
-        command = SignalContainerCommand.valueOf(signalArgs[1]);
-      }
-      signalToContainer(containerId, command);
+  private ApplicationReport getApplicationReport(ApplicationId applicationId)
+      throws IOException, YarnException {
+    ApplicationReport appReport = null;
+    try {
+      appReport = client.getApplicationReport(applicationId);
+    } catch (ApplicationNotFoundException e) {
+      throw new YarnException("Application with id '" + applicationId
+          + "' doesn't exist in RM or Timeline Server.");
+    }
+    return appReport;
+  }
+
+  private String[] getAppNameAndType(CommandLine cliParser, String option)
+      throws IOException, YarnException {
+    String applicationIdOrName = cliParser.getOptionValue(option);
+    try {
+      ApplicationId id = ApplicationId.fromString(applicationIdOrName);
+      ApplicationReport report = getApplicationReport(id);
+      return new String[]{report.getName(), report.getApplicationType()};
+    } catch (IllegalArgumentException e) {
+      // assume CLI option provided the app name
+      // and read appType from command line since id wasn't provided
+      String appType = getSingleAppTypeFromCLI(cliParser);
+      return new String[]{applicationIdOrName, appType};
+    }
+  }
+
+  private static String getSingleAppTypeFromCLI(CommandLine cliParser) {
+    if (cliParser.hasOption(APP_TYPE_CMD)) {
+      String[] types = cliParser.getOptionValues(APP_TYPE_CMD);
+      if (types != null) {
+        for (String type : types) {
+          if (!type.trim().isEmpty()) {
+            return StringUtils.toLowerCase(type).trim();
+          }
+        }
+      }
+    }
+    return AppAdminClient.DEFAULT_TYPE;
+  }
+
-   * @param Array of applicationIds
+   * @param applicationIds Array of applicationIds
-   * @return exitCode
+   * @return ApplicationReport
-  private int printApplicationReport(String applicationId)
+  private ApplicationReport printApplicationReport(String applicationId)
-      return -1;
+      return null;
-      return -1;
+      return null;
-    return 0;
+    return appReport;
-      String excludeOption) {
+      String... excludeOptions) {
+    Set<String> excludeSet = new HashSet<>(Arrays.asList(excludeOptions));
-      // Skip exclude option from the option list
-      if (op.getOpt().equals(excludeOption)) {
+      // Skip exclude options from the option list
+      if (excludeSet.contains(op.getOpt())) {

MOV26 UPD40 UPD40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS5 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS83 INS5 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS43 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS33 INS42 INS43 INS85 INS5 INS42 INS25 INS25 INS60 INS25 INS42 INS43 INS42 INS42 INS42 INS60 INS54 INS41 INS43 INS85 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS25 INS41 INS42 UPD42 INS60 INS42 INS43 INS85 MOV27 INS8 INS8 INS27 INS8 INS25 INS5 INS59 INS27 MOV8 MOV8 INS42 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS42 INS32 INS8 INS40 UPD42 UPD66 UPD66 INS42 INS74 INS59 INS42 INS21 INS41 INS41 INS42 INS33 INS21 MOV27 INS8 INS27 INS36 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS43 INS85 INS42 INS32 INS42 INS33 MOV25 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS32 INS60 INS60 INS41 INS44 INS8 INS42 INS42 INS42 INS60 INS25 INS43 INS43 INS42 INS14 INS32 INS7 INS32 INS42 INS7 INS21 INS42 INS33 INS27 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS27 INS42 INS42 INS42 INS27 INS32 INS27 INS8 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS3 INS43 INS42 INS60 INS41 INS5 INS59 INS27 INS8 INS33 INS42 INS42 INS74 INS32 MOV32 INS42 MOV42 INS42 MOV2 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS7 MOV32 INS32 INS42 INS42 INS42 INS9 INS27 INS42 INS42 INS42 INS9 INS27 INS42 INS42 INS42 INS9 INS27 INS42 INS42 INS42 INS9 INS27 INS42 INS42 INS42 INS9 INS27 INS42 INS42 INS42 INS9 INS27 INS42 INS42 INS42 INS9 INS27 INS42 INS42 INS42 INS9 INS27 INS32 INS42 INS45 INS32 INS42 INS34 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS34 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS34 INS42 INS33 INS42 UPD27 UPD40 UPD34 INS40 INS34 INS42 INS42 INS42 INS42 INS32 INS32 INS60 INS25 INS27 INS25 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS5 INS4 INS42 INS43 INS59 INS3 INS43 INS85 INS42 INS32 INS42 INS33 INS70 INS33 INS43 INS42 INS42 INS42 UPD42 UPD42 INS42 MOV2 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 INS43 INS59 INS27 MOV8 INS8 INS42 INS32 INS32 INS8 MOV32 MOV32 INS8 INS25 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS32 INS42 INS42 INS32 INS5 INS4 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS42 MOV32 INS42 INS33 INS21 INS60 INS54 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS25 MOV21 INS25 MOV21 MOV32 MOV8 INS25 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS42 INS25 INS7 INS43 INS59 INS8 INS12 INS32 INS8 INS42 MOV25 INS38 INS8 MOV32 MOV8 INS25 INS42 INS42 INS38 INS8 MOV38 INS42 INS34 INS42 INS42 INS32 INS60 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS21 INS41 INS32 INS32 INS21 INS41 MOV32 MOV8 INS25 INS32 INS41 INS42 INS42 INS43 INS59 INS32 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS25 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS25 INS60 INS60 INS25 INS60 INS25 INS60 INS41 INS32 INS8 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS5 INS59 INS32 INS42 INS42 INS42 INS25 INS60 INS41 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS21 INS42 INS42 INS33 INS42 INS42 INS42 INS21 INS43 INS85 INS42 INS32 INS32 INS42 INS2 INS2 INS42 INS42 INS32 INS8 INS5 INS59 INS32 INS42 INS42 INS42 INS25 INS60 INS41 INS32 INS8 INS25 INS32 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS43 INS85 INS42 INS32 INS32 INS42 INS2 INS32 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS25 INS60 INS60 INS25 INS60 INS25 INS60 INS41 INS32 INS8 MOV25 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS5 INS59 INS32 INS42 INS42 INS42 INS25 INS60 INS41 INS32 INS8 MOV25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS21 INS42 INS42 INS33 INS42 INS42 INS42 INS21 INS43 INS85 INS42 INS32 INS32 INS42 INS2 INS2 INS42 INS42 INS32 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS25 INS60 INS60 INS24 INS60 INS41 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS32 INS32 INS42 INS32 INS27 INS8 INS5 INS59 INS74 INS59 INS58 INS27 INS7 INS8 INS5 INS59 INS32 INS42 INS42 INS42 INS60 INS25 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS38 INS32 INS21 INS41 INS43 INS85 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS27 INS42 INS34 INS21 INS43 INS85 INS42 INS32 INS32 INS42 INS2 INS42 INS43 INS59 INS32 INS8 INS32 MOV8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS27 INS42 INS34 INS40 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS40 INS34 INS42 INS42 INS2 INS2 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS34 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL7 DEL21 DEL40 DEL34 DEL42 DEL34 DEL2 DEL42 DEL42 DEL7 DEL21 DEL42 DEL34 DEL2 DEL42 DEL42 DEL32 DEL38 DEL40 DEL34 DEL27 DEL42 DEL34 DEL2 DEL32 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL32 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL40 DEL34 DEL27 DEL40 DEL34 DEL27 DEL27 DEL40 DEL34 DEL27 DEL40 DEL34 DEL27 DEL27 DEL25 DEL25 DEL39 DEL34 DEL38 DEL34