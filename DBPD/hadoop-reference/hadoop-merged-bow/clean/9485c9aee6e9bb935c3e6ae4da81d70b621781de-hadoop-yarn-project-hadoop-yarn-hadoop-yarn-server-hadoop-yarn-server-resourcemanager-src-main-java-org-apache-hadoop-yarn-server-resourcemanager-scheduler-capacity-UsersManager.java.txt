YARN-4606. CapacityScheduler: applications could get starved because computation of #activeUsers considers pending apps. Contributed by Manikandan R

+  private AtomicInteger activeUsersWithOnlyPendingApps = new AtomicInteger(0);
+    computeNumActiveUsersWithOnlyPendingApps();
+
+  // This method is called within the lock.
+  private void computeNumActiveUsersWithOnlyPendingApps() {
+    int numPendingUsers = 0;
+    for (User user : users.values()) {
+      if ((user.getPendingApplications() > 0)
+          && (user.getActiveApplications() <= 0)) {
+        numPendingUsers++;
+      }
+    }
+    activeUsersWithOnlyPendingApps = new AtomicInteger(numPendingUsers);
+  }
+
+      User userDesc = getUser(user);
+      if (userDesc != null && userDesc.getActiveApplications() <= 0) {
+        return;
+      }
+
-    return activeUsers.get();
+    return activeUsers.get() + activeUsersWithOnlyPendingApps.get();
+
+  @VisibleForTesting
+  public int getNumActiveUsersWithOnlyPendingApps() {
+    return activeUsersWithOnlyPendingApps.get();
+  }

INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS14 INS21 INS60 INS70 INS21 INS42 INS41 INS43 INS34 INS32 INS39 INS59 INS44 INS32 INS8 INS7 INS27 INS32 INS42 INS42 INS42 INS34 INS43 INS42 INS42 INS42 INS25 INS42 INS14 INS60 INS25 MOV32 INS32 INS42 INS42 INS42 INS27 INS8 INS43 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS36 INS36 INS21 INS42 INS42 INS42 INS32 INS27 INS27 INS41 INS27 INS27 INS37 INS42 INS42 INS42 INS33 INS32 INS34 INS32 INS34 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42