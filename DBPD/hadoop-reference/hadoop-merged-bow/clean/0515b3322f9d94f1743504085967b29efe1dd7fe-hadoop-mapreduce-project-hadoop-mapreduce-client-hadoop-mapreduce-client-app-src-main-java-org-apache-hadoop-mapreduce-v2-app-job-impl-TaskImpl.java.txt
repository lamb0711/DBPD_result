MAPREDUCE-3846. Addressed MR AM hanging issues during AM restart and then the recovery. (vinodkv)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1243752 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Comparator;
-import java.util.Set;
+import org.apache.hadoop.mapreduce.TaskAttemptID;
+import org.apache.hadoop.mapreduce.jobhistory.JobHistoryParser.TaskAttemptInfo;
+import org.apache.hadoop.mapreduce.jobhistory.JobHistoryParser.TaskInfo;
+import org.apache.hadoop.mapreduce.v2.util.MRBuilderUtils;
-  
-  protected int nextAttemptNumber;
+
+  // By default, the next TaskAttempt number is zero. Changes during recovery  
+  protected int nextAttemptNumber = 0;
+  private List<TaskAttemptInfo> taskAttemptsFromPreviousGeneration =
+      new ArrayList<TaskAttemptInfo>();
+
+  private static final class RecoverdAttemptsComparator implements
+      Comparator<TaskAttemptInfo> {
+    @Override
+    public int compare(TaskAttemptInfo attempt1, TaskAttemptInfo attempt2) {
+      long diff = attempt1.getStartTime() - attempt2.getStartTime();
+      return diff == 0 ? 0 : (diff < 0 ? -1 : 1);
+    }
+  }
+
+  private static final RecoverdAttemptsComparator RECOVERED_ATTEMPTS_COMPARATOR =
+      new RecoverdAttemptsComparator();
-      Set<TaskId> completedTasksFromPreviousRun, int startCount,
+      Map<TaskId, TaskInfo> completedTasksFromPreviousRun, int startCount,
-    taskId = recordFactory.newRecordInstance(TaskId.class);
-    taskId.setJobId(jobId);
-    taskId.setId(partition);
-    taskId.setTaskType(taskType);
+    taskId = MRBuilderUtils.newTaskId(jobId, partition, taskType);
+    // See if this is from a previous generation.
-        && completedTasksFromPreviousRun.contains(taskId)) {
+        && completedTasksFromPreviousRun.containsKey(taskId)) {
+      // This task has TaskAttempts from previous generation. We have to replay
+      // them.
-      startCount = startCount - 1;
+      TaskInfo taskInfo = completedTasksFromPreviousRun.get(taskId);
+      Map<TaskAttemptID, TaskAttemptInfo> allAttempts =
+          taskInfo.getAllTaskAttempts();
+      taskAttemptsFromPreviousGeneration = new ArrayList<TaskAttemptInfo>();
+      taskAttemptsFromPreviousGeneration.addAll(allAttempts.values());
+      Collections.sort(taskAttemptsFromPreviousGeneration,
+        RECOVERED_ATTEMPTS_COMPARATOR);
-    //attempt ids are generated based on MR app startCount so that attempts
-    //from previous lives don't overstep the current one.
-    //this assumes that a task won't have more than 1000 attempts in its single 
-    //life
-    nextAttemptNumber = (startCount - 1) * 1000;
+    if (taskAttemptsFromPreviousGeneration.isEmpty()) {
+      // All the previous attempts are exhausted, now start with a new
+      // generation.
+
+      // All the new TaskAttemptIDs are generated based on MR
+      // ApplicationAttemptID so that attempts from previous lives don't
+      // over-step the current one. This assumes that a task won't have more
+      // than 1000 attempts in its single generation, which is very reasonable.
+      // Someone is nuts if he/she thinks he/she can live with 1000 TaskAttempts
+      // and requires serious medical attention.
+      nextAttemptNumber = (startCount - 1) * 1000;
+    } else {
+      // There are still some TaskAttempts from previous generation, use them
+      nextAttemptNumber =
+          taskAttemptsFromPreviousGeneration.remove(0).getAttemptId().getId();
+    }
-    long launchTime = 0;
+    long taskLaunchTime = 0;
+    boolean launchTimeSet = false;
-      //select the least launch time of all attempts
-      if (launchTime == 0  || launchTime > at.getLaunchTime()) {
-        launchTime = at.getLaunchTime();
+      // select the least launch time of all attempts
+      long attemptLaunchTime = at.getLaunchTime();
+      if (attemptLaunchTime != 0 && !launchTimeSet) {
+        // For the first non-zero launch time
+        launchTimeSet = true;
+        taskLaunchTime = attemptLaunchTime;
+      } else if (attemptLaunchTime != 0 && taskLaunchTime > attemptLaunchTime) {
+        taskLaunchTime = attemptLaunchTime;
-    if (launchTime == 0) {
+    if (!launchTimeSet) {
-    return launchTime;
+    return taskLaunchTime;
-    ++nextAttemptNumber;
+
+    // Update nextATtemptNumber
+    if (taskAttemptsFromPreviousGeneration.isEmpty()) {
+      ++nextAttemptNumber;
+    } else {
+      // There are still some TaskAttempts from previous generation, use them
+      nextAttemptNumber =
+          taskAttemptsFromPreviousGeneration.remove(0).getAttemptId().getId();
+    }
+

MOV26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS23 INS55 INS23 INS83 INS74 INS59 INS83 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS83 INS43 INS59 INS34 INS43 INS43 INS42 INS14 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS14 UPD74 INS25 INS60 INS25 INS42 INS42 INS74 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS41 INS43 UPD43 INS43 INS27 INS8 INS32 INS8 INS39 INS59 INS38 UPD42 INS32 INS8 INS8 INS43 INS43 INS42 INS42 INS39 INS59 INS16 INS42 UPD42 INS42 MOV27 INS32 MOV21 INS60 INS60 INS21 MOV21 MOV21 UPD42 MOV42 UPD42 MOV42 MOV21 UPD42 INS42 INS9 INS60 INS25 INS42 INS42 INS42 MOV21 INS21 INS42 INS42 INS42 INS27 INS27 INS34 INS36 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS74 INS59 INS7 INS39 INS59 INS27 INS8 INS25 INS7 INS32 INS32 INS42 INS34 INS16 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS14 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 INS42 UPD42 INS32 INS42 MOV32 INS27 INS38 INS21 INS21 UPD27 MOV27 MOV8 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS38 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 UPD42 MOV42 INS42 INS32 INS42 INS42 INS34 INS42 INS7 INS7 UPD27 INS32 INS42 INS42 INS34 INS34 INS43 INS43 INS32 INS42 INS42 INS9 INS42 INS42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 UPD42 INS42 INS42 INS42 INS34 DEL42 DEL43 DEL57 DEL32 DEL21 DEL42 DEL32 DEL27 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL25 DEL42 DEL34 DEL27