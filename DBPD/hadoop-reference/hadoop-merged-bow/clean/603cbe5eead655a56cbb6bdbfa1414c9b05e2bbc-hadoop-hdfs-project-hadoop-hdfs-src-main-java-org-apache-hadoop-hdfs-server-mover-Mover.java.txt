HDFS-6863. Archival Storage: Support migration for snapshot paths. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1619627 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
-import java.net.URI;
-import java.text.DateFormat;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Date;
-import java.util.EnumMap;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-
-import org.apache.hadoop.hdfs.BlockStoragePolicy;
-import org.apache.hadoop.hdfs.DFSClient;
-import org.apache.hadoop.hdfs.DFSConfigKeys;
-import org.apache.hadoop.hdfs.DFSUtil;
-import org.apache.hadoop.hdfs.HdfsConfiguration;
-import org.apache.hadoop.hdfs.StorageType;
-import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
-import org.apache.hadoop.hdfs.protocol.DirectoryListing;
-import org.apache.hadoop.hdfs.protocol.HdfsFileStatus;
-import org.apache.hadoop.hdfs.protocol.HdfsLocatedFileStatus;
-import org.apache.hadoop.hdfs.protocol.LocatedBlock;
-import org.apache.hadoop.hdfs.protocol.LocatedBlocks;
+import org.apache.hadoop.hdfs.*;
+import org.apache.hadoop.hdfs.protocol.*;
-import org.apache.hadoop.hdfs.server.balancer.Dispatcher.DBlock;
-import org.apache.hadoop.hdfs.server.balancer.Dispatcher.DDatanode;
+import org.apache.hadoop.hdfs.server.balancer.Dispatcher.*;
-import org.apache.hadoop.hdfs.server.balancer.Dispatcher.PendingMove;
-import org.apache.hadoop.hdfs.server.balancer.Dispatcher.Source;
-import org.apache.hadoop.hdfs.server.balancer.Dispatcher.StorageGroupMap;
+import org.apache.hadoop.hdfs.server.namenode.INode;
+import java.io.IOException;
+import java.net.URI;
+import java.text.DateFormat;
+import java.util.*;
+
+  /**
+   * convert a snapshot path to non-snapshot path. E.g.,
+   * /foo/.snapshot/snapshot-name/bar --> /foo/bar
+   */
+  private static String convertSnapshotPath(String[] pathComponents) {
+    StringBuilder sb = new StringBuilder(Path.SEPARATOR);
+    for (int i = 0; i < pathComponents.length; i++) {
+      if (pathComponents[i].equals(HdfsConstants.DOT_SNAPSHOT_DIR)) {
+        i++;
+      } else {
+        sb.append(pathComponents[i]);
+      }
+    }
+    return sb.toString();
+  }
+
-  
+    private final List<String> snapshottableDirs = new ArrayList<String>();
+
-      
+
+    private void getSnapshottableDirs() {
+      SnapshottableDirectoryStatus[] dirs = null;
+      try {
+        dirs = dfs.getSnapshottableDirListing();
+      } catch (IOException e) {
+        LOG.warn("Failed to get snapshottable directories."
+            + " Ignore and continue.", e);
+      }
+      if (dirs != null) {
+        for (SnapshottableDirectoryStatus dir : dirs) {
+          snapshottableDirs.add(dir.getFullPath().toString());
+        }
+      }
+    }
+
+    /**
+     * @return true if the given path is a snapshot path and the corresponding
+     * INode is still in the current fsdirectory.
+     */
+    private boolean isSnapshotPathInCurrent(String path) throws IOException {
+      // if the parent path contains "/.snapshot/", this is a snapshot path
+      if (path.contains(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR_SEPARATOR)) {
+        String[] pathComponents = INode.getPathNames(path);
+        if (HdfsConstants.DOT_SNAPSHOT_DIR
+            .equals(pathComponents[pathComponents.length - 2])) {
+          // this is a path for a specific snapshot (e.g., /foo/.snapshot/s1)
+          return false;
+        }
+        String nonSnapshotPath = convertSnapshotPath(pathComponents);
+        return dfs.getFileInfo(nonSnapshotPath) != null;
+      } else {
+        return false;
+      }
+    }
+
+      getSnapshottableDirs();
+    private void processChildrenList(String fullPath) {
+      for (byte[] lastReturnedName = HdfsFileStatus.EMPTY_NAME;;) {
+        final DirectoryListing children;
+        try {
+          children = dfs.listPaths(fullPath, lastReturnedName, true);
+        } catch(IOException e) {
+          LOG.warn("Failed to list directory " + fullPath
+              + ". Ignore the directory and continue.", e);
+          return;
+        }
+        if (children == null) {
+          return;
+        }
+        for (HdfsFileStatus child : children.getPartialListing()) {
+          processDirRecursively(fullPath, child);
+        }
+        if (!children.hasMore()) {
+          lastReturnedName = children.getLastName();
+        } else {
+          return;
+        }
+      }
+    }
+
+      String fullPath = status.getFullName(parent);
-        String dir = status.getFullName(parent);
-        if (!dir.endsWith(Path.SEPARATOR)) {
-          dir = dir + Path.SEPARATOR; 
+        if (!fullPath.endsWith(Path.SEPARATOR)) {
+          fullPath = fullPath + Path.SEPARATOR; 
-        for(byte[] lastReturnedName = HdfsFileStatus.EMPTY_NAME;;) {
-          final DirectoryListing children;
-          try {
-            children = dfs.listPaths(dir, lastReturnedName, true);
-          } catch(IOException e) {
-            LOG.warn("Failed to list directory " + dir
-                + ".  Ignore the directory and continue.", e);
-            return;
-          }
-          if (children == null) {
-            return;
-          }
-          for (HdfsFileStatus child : children.getPartialListing()) {
-            processDirRecursively(dir, child);
-          }
-          if (!children.hasMore()) {
-            lastReturnedName = children.getLastName();
-          } else {
-            return;
-          }
+        processChildrenList(fullPath);
+        // process snapshots if this is a snapshottable directory
+        if (snapshottableDirs.contains(fullPath)) {
+          final String dirSnapshot = fullPath + HdfsConstants.DOT_SNAPSHOT_DIR;
+          processChildrenList(dirSnapshot);
+        try {
+          if (isSnapshotPathInCurrent(fullPath)) {
+            // the full path is a snapshot path but it is also included in the
+            // current directory tree, thus ignore it.
+            return;
+          }
+        } catch (IOException e) {
+          LOG.warn("Failed to check the status of " + parent
+              + ". Ignore it and continue.", e);
+          return;
+        }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS23 INS31 INS31 INS31 INS65 INS42 INS5 INS42 INS60 INS24 INS41 INS83 INS83 INS74 INS59 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 INS44 MOV8 INS83 INS39 INS42 MOV44 MOV44 INS8 INS66 INS66 INS43 INS85 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS43 INS43 INS42 INS14 INS60 INS54 INS25 INS65 INS43 INS42 INS42 INS25 INS21 INS43 INS42 MOV60 INS25 INS42 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS42 INS42 INS74 INS5 INS59 INS8 INS12 INS27 INS8 INS66 INS66 INS42 INS32 INS8 INS8 INS32 INS42 MOV32 MOV8 INS25 INS43 INS40 INS42 INS34 INS32 INS8 INS8 INS43 INS43 INS43 INS85 INS42 INS33 INS21 MOV44 INS8 INS42 INS33 INS70 INS42 INS42 INS40 INS60 INS25 INS60 INS41 INS41 INS42 UPD42 MOV32 INS8 INS8 INS42 INS2 INS42 INS40 INS21 INS21 INS42 INS42 INS42 INS7 INS21 INS44 INS42 INS8 INS5 INS59 INS32 INS8 INS43 INS59 INS27 INS9 INS25 INS21 INS25 INS54 MOV21 INS42 INS42 INS37 INS32 INS42 INS32 INS32 INS43 INS42 INS21 INS43 INS85 INS42 INS32 INS40 INS42 INS2 INS41 INS42 INS42 INS32 INS32 INS33 INS44 INS38 INS8 INS32 INS32 INS8 INS8 INS12 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS9 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS25 INS44 INS8 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS40 INS34 INS42 UPD42 INS42 INS42 INS40 INS7 INS83 INS43 INS59 INS32 INS32 INS8 INS43 INS42 INS21 INS41 INS32 INS42 UPD42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS41 INS42 INS32 INS42 INS42 UPD42 UPD45 INS42 INS40 INS42 INS40 INS42 INS42 INS27 INS42 INS45 INS42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL40 DEL32 DEL38 DEL42 DEL42 DEL40 DEL27 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL8