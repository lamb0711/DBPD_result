YARN-7136. Additional Performance Improvement for Resource Profile Feature
(Contributed by Wangda Tan via Daniel Templeton)

-import org.apache.hadoop.yarn.api.records.impl.BaseResource;
+import org.apache.hadoop.yarn.api.records.impl.LightWeightResource;
-  protected static final String MEMORY = ResourceInformation.MEMORY_MB.getName();
-  protected static final String VCORES = ResourceInformation.VCORES.getName();
+  protected ResourceInformation[] resources = null;
+
+  // Number of mandatory resources, this is added to avoid invoke
+  // MandatoryResources.values().length, since values() internally will
+  // copy array, etc.
+  protected static final int NUM_MANDATORY_RESOURCES = 2;
+
+  protected static final int MEMORY_INDEX = 0;
+  protected static final int VCORES_INDEX = 1;
-    return new BaseResource(memory, vCores);
+    return new LightWeightResource(memory, vCores);
-    return new BaseResource(memory, vCores);
+    return new LightWeightResource(memory, vCores);
-  public abstract ResourceInformation[] getResources();
+  public ResourceInformation[] getResources() {
+    return resources;
+  }
-    ResourceInformation[] resources = getResources();
-    ResourceInformation[] resources = getResources();
-    if (index < 0 || index >= resources.length) {
-      throw new ResourceNotFoundException("Unknown resource at index '" + index
-          + "'. Vaid resources are: " + Arrays.toString(resources));
+    ResourceInformation ri = null;
+    try {
+      ri = resources[index];
+    } catch (ArrayIndexOutOfBoundsException e) {
+      throwExceptionWhenArrayOutOfBound(index);
-    return resources[index];
+    return ri;
-    if (resource.equals(MEMORY)) {
+    if (resource.equals(ResourceInformation.MEMORY_URI)) {
-    if (resource.equals(VCORES)) {
+    if (resource.equals(ResourceInformation.VCORES_URI)) {
-    ResourceInformation[] resources = getResources();
-    if (resource.equals(MEMORY)) {
+    if (resource.equals(ResourceInformation.MEMORY_URI)) {
-    if (resource.equals(VCORES)) {
+    if (resource.equals(ResourceInformation.VCORES_URI)) {
-    ResourceInformation[] resources = getResources();
-    if (index < 0 || index >= resources.length) {
-      throw new ResourceNotFoundException("Unknown resource at index '" + index
-          + "'. Valid resources are " + Arrays.toString(resources));
+    try {
+      resources[index].setValue(value);
+    } catch (ArrayIndexOutOfBoundsException e) {
+      throwExceptionWhenArrayOutOfBound(index);
-    resources[index].setValue(value);
-  @Override
-  public int hashCode() {
-    final int prime = 263167;
+  private void throwExceptionWhenArrayOutOfBound(int index) {
+    String exceptionMsg = String.format(
+        "Trying to access ResourceInformation for given index=%d. "
+            + "Acceptable index range is [0,%d), please check double check "
+            + "configured resources in resource-types.xml",
+        index, ResourceUtils.getNumberOfKnownResourceTypes());
-    int result = (int) (939769357
-        + getMemorySize()); // prime * result = 939769357 initially
-    result = prime * result + getVirtualCores();
-    for (ResourceInformation entry : getResources()) {
-      if (!entry.getName().equals(MEMORY) && !entry.getName().equals(VCORES)) {
-        result = prime * result + entry.hashCode();
-      }
-    }
-    return result;
+    throw new ResourceNotFoundException(exceptionMsg);
-    if (getMemorySize() != other.getMemorySize()
-        || getVirtualCores() != other.getVirtualCores()) {
-      return false;
-    }
-    ResourceInformation[] myVectors = getResources();
-    if (myVectors.length != otherVectors.length) {
+    if (resources.length != otherVectors.length) {
-    for (int i = 0; i < myVectors.length; i++) {
-      ResourceInformation a = myVectors[i];
+    for (int i = 0; i < resources.length; i++) {
+      ResourceInformation a = resources[i];
+  public int compareTo(Resource other) {
+    ResourceInformation[] otherResources = other.getResources();
+
+    int arrLenThis = this.resources.length;
+    int arrLenOther = otherResources.length;
+
+    // compare memory and vcores first(in that order) to preserve
+    // existing behaviour
+    for (int i = 0; i < arrLenThis; i++) {
+      ResourceInformation otherEntry;
+      try {
+        otherEntry = otherResources[i];
+      } catch (ArrayIndexOutOfBoundsException e) {
+        // For two vectors with different size and same prefix. Shorter vector
+        // goes first.
+        return 1;
+      }
+      ResourceInformation entry = resources[i];
+
+      long diff = entry.compareTo(otherEntry);
+      if (diff > 0) {
+        return 1;
+      } else if (diff < 0) {
+        return -1;
+      }
+    }
+
+    if (arrLenThis < arrLenOther) {
+      return -1;
+    }
+
+    return 0;
+  }
+
+  @Override
+
-    for (ResourceInformation entry : getResources()) {
-      if (entry.getName().equals(MEMORY)
-          && entry.getUnits()
-          .equals(ResourceInformation.MEMORY_MB.getUnits())) {
+
+    for (int i = 2; i < resources.length; i++) {
+      ResourceInformation ri = resources[i];
+      if (ri.getValue() == 0) {
-      if (entry.getName().equals(VCORES)
-          && entry.getUnits()
-          .equals(ResourceInformation.VCORES.getUnits())) {
-        continue;
-      }
-      sb.append(", ").append(entry.getName()).append(": ")
-          .append(entry.getValue())
-          .append(entry.getUnits());
+      sb.append(", ");
+      sb.append(ri.getName()).append(": ")
+          .append(ri.getValue());
+      sb.append(ri.getUnits());
+
-  public int compareTo(Resource other) {
-    ResourceInformation[] thisResources = this.getResources();
-    ResourceInformation[] otherResources = other.getResources();
-
-    // compare memory and vcores first(in that order) to preserve
-    // existing behaviour
-    long diff = this.getMemorySize() - other.getMemorySize();
-    if (diff == 0) {
-      diff = this.getVirtualCores() - other.getVirtualCores();
+  public int hashCode() {
+    final int prime = 47;
+    long result = 0;
+    for (ResourceInformation entry : resources) {
+      result = prime * result + entry.hashCode();
-    if (diff == 0) {
-      diff = thisResources.length - otherResources.length;
-      if (diff == 0) {
-        int maxLength = ResourceUtils.getResourceTypesArray().length;
-        for (int i = 0; i < maxLength; i++) {
-          // For memory and vcores, we can skip the loop as it's already
-          // compared.
-          if (i < 2) {
-            continue;
-          }
-
-          ResourceInformation entry = thisResources[i];
-          ResourceInformation otherEntry = otherResources[i];
-          if (entry.getName().equals(otherEntry.getName())) {
-            diff = entry.compareTo(otherEntry);
-            if (diff != 0) {
-              break;
-            }
-          }
-        }
-      }
-    }
-    return Long.compare(diff, 0);
+    return (int) result;

UPD40 INS23 INS23 INS23 INS31 INS31 INS31 MOV83 MOV5 INS59 INS83 MOV83 MOV83 INS39 INS59 INS83 INS83 INS83 INS39 MOV59 INS39 INS8 UPD83 UPD39 UPD42 INS44 INS8 MOV78 MOV83 INS39 UPD42 MOV42 MOV44 INS8 MOV78 INS83 MOV43 INS42 INS8 MOV78 INS83 INS39 INS42 INS8 INS42 INS33 INS42 INS34 UPD42 INS34 UPD42 INS34 INS41 INS54 INS54 INS39 INS42 INS60 INS53 MOV60 INS60 INS60 INS24 INS25 INS41 MOV60 MOV21 INS24 MOV21 MOV41 INS60 INS60 MOV70 INS41 INS42 INS43 INS8 INS12 INS42 INS8 INS12 MOV43 INS59 INS14 MOV8 INS39 INS59 INS39 INS59 MOV58 INS27 MOV37 INS8 INS27 INS8 INS34 INS58 MOV27 INS37 INS8 INS83 INS39 INS59 INS39 INS59 INS42 MOV8 INS11 UPD43 UPD43 MOV42 UPD42 INS33 INS21 INS44 INS8 INS40 INS40 INS40 INS40 MOV21 INS44 INS8 INS42 INS32 MOV43 INS42 UPD40 UPD40 INS42 INS22 INS42 INS40 INS42 INS42 INS60 INS54 MOV60 MOV60 INS25 INS42 UPD42 MOV42 INS41 INS39 INS59 INS40 INS42 MOV60 INS25 INS21 INS21 MOV21 INS42 INS34 INS42 INS34 INS39 INS42 UPD42 UPD42 INS7 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS42 INS27 INS42 INS32 INS43 INS22 INS42 MOV43 INS59 INS8 INS12 MOV43 UPD27 MOV27 MOV8 INS25 INS38 UPD42 MOV42 INS34 INS27 MOV8 MOV32 INS32 INS32 INS42 MOV2 INS42 INS32 UPD42 MOV42 INS32 INS45 INS45 INS45 INS42 UPD42 MOV42 INS42 INS52 INS42 INS42 INS21 INS44 INS8 UPD42 INS2 MOV32 INS41 UPD27 MOV27 INS8 INS34 UPD42 INS32 INS34 INS32 INS42 MOV32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 INS7 INS43 INS42 INS41 INS42 INS42 INS34 INS41 UPD42 INS42 INS42 INS32 UPD42 MOV42 INS45 UPD42 UPD42 INS42 INS42 INS42 MOV2 INS42 INS34 INS38 INS42 INS42 MOV32 INS34 UPD42 DEL40 DEL42 DEL32 DEL42 DEL43 DEL23 DEL40 DEL42 DEL32 DEL83 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL85 DEL5 DEL42 DEL32 DEL42 DEL34 DEL27 DEL42 DEL40 DEL27 DEL27 DEL45 DEL42 DEL45 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL83 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL39 DEL34 DEL42 DEL32 DEL27 DEL36 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL27 DEL32 DEL27 DEL7 DEL21 DEL42 DEL41 DEL8 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL27 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL9 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL52 DEL42 DEL32 DEL52 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL52 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL7 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL27 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL32 DEL27 DEL18 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL32 DEL27 DEL25 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL83 DEL39 DEL42 DEL25 DEL42 DEL40 DEL40 DEL27 DEL7 DEL21 DEL34 DEL27 DEL39 DEL42 DEL42 DEL32 DEL42 DEL22 DEL59 DEL60 DEL42 DEL34 DEL27 DEL18 DEL8 DEL25 DEL42 DEL59 DEL60 DEL32 DEL42 DEL34 DEL27 DEL10 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL34 DEL32 DEL41 DEL8 DEL31