HDFS-9007. Fix HDFS Balancer to honor upgrade domain policy. (Ming Ma via lei)

+import com.google.common.base.Preconditions;
+   * Check if the move is allowed. Used by balancer and other tools.
+   * @
+   *
+   * @param candidates all replicas including source and target
+   * @param source source replica of the move
+   * @param target target replica of the move
+   */
+  abstract public boolean isMovable(Collection<DatanodeInfo> candidates,
+      DatanodeInfo source, DatanodeInfo target);
+
+  /**
+  protected <T> DatanodeInfo getDatanodeInfo(T datanode) {
+    Preconditions.checkArgument(
+        datanode instanceof DatanodeInfo ||
+        datanode instanceof DatanodeStorageInfo,
+        "class " + datanode.getClass().getName() + " not allowed");
+    if (datanode instanceof DatanodeInfo) {
+      return ((DatanodeInfo)datanode);
+    } else if (datanode instanceof DatanodeStorageInfo) {
+      return ((DatanodeStorageInfo)datanode).getDatanodeDescriptor();
+    } else {
+      return null;
+    }
+  }
+
-  
+
-   * @param dataNodes datanodes to be split into two sets
+   * @param storagesOrDataNodes DatanodeStorageInfo/DatanodeInfo to be split
+   *        into two sets
-  public void splitNodesWithRack(
-      final Iterable<DatanodeStorageInfo> storages,
-      final Map<String, List<DatanodeStorageInfo>> rackMap,
-      final List<DatanodeStorageInfo> moreThanOne,
-      final List<DatanodeStorageInfo> exactlyOne) {
-    for(DatanodeStorageInfo s: storages) {
-      final String rackName = getRack(s.getDatanodeDescriptor());
-      List<DatanodeStorageInfo> storageList = rackMap.get(rackName);
+  public <T> void splitNodesWithRack(
+      final Iterable<T> storagesOrDataNodes,
+      final Map<String, List<T>> rackMap,
+      final List<T> moreThanOne,
+      final List<T> exactlyOne) {
+    for(T s: storagesOrDataNodes) {
+      final String rackName = getRack(getDatanodeInfo(s));
+      List<T> storageList = rackMap.get(rackName);
-        storageList = new ArrayList<DatanodeStorageInfo>();
+        storageList = new ArrayList<T>();
-    
-    for(List<DatanodeStorageInfo> storageList : rackMap.values()) {
+    for(List<T> storageList : rackMap.values()) {
-

INS26 INS40 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS83 INS73 INS43 INS42 INS44 INS8 INS73 MOV44 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS21 INS25 INS42 UPD74 UPD42 INS83 INS74 UPD42 UPD74 MOV74 UPD74 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS42 INS42 INS42 INS32 INS62 INS8 INS25 UPD42 INS66 UPD66 UPD43 MOV43 MOV43 UPD74 MOV74 UPD43 INS43 UPD42 INS44 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS43 INS41 INS62 INS8 INS8 UPD42 UPD43 UPD42 INS42 INS43 UPD74 MOV74 INS42 INS62 INS62 INS45 INS32 INS45 INS42 INS36 INS42 MOV43 INS41 INS41 UPD42 INS42 UPD74 MOV74 INS43 INS42 INS43 INS42 MOV43 INS32 INS42 INS11 INS32 INS33 UPD43 INS42 INS42 INS42 INS42 INS43 INS42 INS36 INS42 UPD42 INS42 INS11 INS42 MOV43 INS42 UPD74 UPD43 UPD42 DEL83 DEL74 DEL42 DEL44 DEL42