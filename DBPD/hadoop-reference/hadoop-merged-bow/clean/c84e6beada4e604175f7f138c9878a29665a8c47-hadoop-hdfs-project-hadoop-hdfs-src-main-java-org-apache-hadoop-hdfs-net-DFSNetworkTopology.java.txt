HDFS-14999. Avoid Potential Infinite Loop in DFSNetworkTopology. Contributed by Ayush Saxena.

-    // that satisfies the requirement, keep trying until we found one.
-    Node chosen;
-    do {
-      chosen = chooseRandomWithStorageTypeAndExcludeRoot(root, excludeRoot,
-          type);
-      if (excludedNodes == null || !excludedNodes.contains(chosen)) {
-        break;
-      } else {
-        LOG.debug("Node {} is excluded, continuing.", chosen);
-      }
-    } while (true);
+    // that satisfies the requirement.
+    Node chosen =
+        chooseRandomWithStorageTypeAndExcludeRoot(root, excludeRoot, type,
+            excludedNodes);
-   * Note that excludedNode is checked after a random node, so it is not being
-   * handled here.
-   *
+   * @param excludedNodes the list of nodes to be excluded
-      DFSTopologyNodeImpl root, Node excludeRoot, StorageType type) {
+      DFSTopologyNodeImpl root, Node excludeRoot, StorageType type,
+      Collection<Node> excludedNodes) {
-        if (node.equals(excludeRoot)) {
+        if (node.equals(excludeRoot) || (excludedNodes != null && excludedNodes
+            .contains(node))) {
-          getEligibleChildren(root, excludeRoot, type);
+          getEligibleChildren(root, excludeRoot, type, excludedNodes);
-          nextRoot, excludeRoot, type);
+          nextRoot, excludeRoot, type, excludedNodes);
+   * @param excludedNodes the list of excluded nodes.
-      DFSTopologyNodeImpl root, Node excludeRoot, StorageType type) {
+      DFSTopologyNodeImpl root, Node excludeRoot, StorageType type,
+      Collection<Node> excludedNodes) {
+      if (excludedNodes != null) {
+        for (Node excludedNode : excludedNodes) {
+          if (excludeRoot != null && isNodeInScope(excludedNode,
+              NodeBase.getPath(excludeRoot))) {
+            continue;
+          }
+          if (isNodeInScope(excludedNode, NodeBase.getPath(node))) {
+            if (excludedNode instanceof DatanodeDescriptor) {
+              storageCount -=
+                  ((DatanodeDescriptor) excludedNode).hasStorageType(type) ?
+                      1 : 0;
+            } else if (excludedNode instanceof DFSTopologyNodeImpl) {
+              storageCount -= ((DFSTopologyNodeImpl) excludedNode)
+                  .getSubtreeStorageCount(type);
+            }
+          }
+        }
+      }

INS44 INS44 INS60 INS65 INS65 INS74 INS42 INS65 INS74 INS42 MOV43 INS59 MOV66 MOV66 INS42 UPD66 MOV66 INS43 INS43 INS42 INS66 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS25 MOV42 MOV42 MOV42 MOV42 INS42 INS27 INS8 INS42 INS33 INS70 INS27 INS42 INS42 INS44 INS42 INS8 MOV32 INS36 INS43 INS42 INS25 INS25 INS27 INS42 INS27 INS8 INS32 INS8 INS27 INS32 INS27 INS32 INS18 INS42 INS42 INS32 INS25 INS42 INS33 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS62 INS8 INS25 INS42 INS42 INS42 INS42 INS43 INS21 INS62 INS8 INS42 INS7 INS42 INS43 INS21 INS42 INS16 INS42 INS7 INS32 INS34 INS34 INS42 INS32 INS36 INS42 INS42 INS36 INS42 INS42 INS11 INS11 INS43 INS42 INS43 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL10 DEL8 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL9 DEL19 DEL66 DEL65