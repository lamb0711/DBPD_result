HDDS-213. Single lock to synchronize KeyValueContainer#update.

+import java.nio.file.Files;
+import java.nio.file.StandardCopyOption;
-import org.apache.hadoop.ozone.container.common.impl.ContainerData;
-    .Result.CONTAINER_METADATA_ERROR;
-import static org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos
-      createContainerFile(containerFile, containerCheckSumFile);
+      writeToContainerFile(containerFile, containerCheckSumFile, true);
-   * @param containerCheckSumFile
+   * @param checksumFile
+   * @param isCreate true if we are creating a new container file and false if
+   *                we are updating an existing container file.
-  private void createContainerFile(File containerFile, File
-      containerCheckSumFile) throws StorageContainerException {
+  private void writeToContainerFile(File containerFile, File
+      checksumFile, boolean isCreate)
+      throws StorageContainerException {
-    File tempCheckSumFile = null;
+    File tempChecksumFile = null;
-      tempCheckSumFile = createTempFile(containerCheckSumFile);
+      tempChecksumFile = createTempFile(checksumFile);
-      containerCheckSumStream = new FileOutputStream(tempCheckSumFile);
+      containerCheckSumStream = new FileOutputStream(tempChecksumFile);
-      NativeIO.renameTo(tempContainerFile, containerFile);
-      NativeIO.renameTo(tempCheckSumFile, containerCheckSumFile);
+      if (isCreate) {
+        // When creating a new container, .container file should not exist
+        // already.
+        NativeIO.renameTo(tempContainerFile, containerFile);
+        NativeIO.renameTo(tempChecksumFile, checksumFile);
+      } else {
+        // When updating a container, the .container file should exist. If
+        // not, the container is in an inconsistent state.
+        Files.move(tempContainerFile.toPath(), containerFile.toPath(),
+            StandardCopyOption.REPLACE_EXISTING);
+        Files.move(tempChecksumFile.toPath(), checksumFile.toPath(),
+            StandardCopyOption.REPLACE_EXISTING);
+      }
-          "required files(.container, .chksm) for container. Container Name: "
+          "required files(.container, .chksm) for container. ContainerID: "
-      if (tempCheckSumFile != null && tempCheckSumFile.exists()) {
-        if (!tempCheckSumFile.delete()) {
+      if (tempChecksumFile != null && tempChecksumFile.exists()) {
+        if (!tempChecksumFile.delete()) {
-      containerCheckSumFile) throws StorageContainerException {
+      checksumFile) throws StorageContainerException {
-    File containerBkpFile = null;
-    File checkSumBkpFile = null;
-    try {
-      if (containerFile.exists() && containerCheckSumFile.exists()) {
-        //Take backup of original files (.container and .chksm files)
-        containerBkpFile = new File(containerFile + ".bkp");
-        checkSumBkpFile = new File(containerCheckSumFile + ".bkp");
-        NativeIO.renameTo(containerFile, containerBkpFile);
-        NativeIO.renameTo(containerCheckSumFile, checkSumBkpFile);
-        createContainerFile(containerFile, containerCheckSumFile);
-      } else {
-        containerData.setState(ContainerProtos.ContainerLifeCycleState.INVALID);
-        throw new StorageContainerException("Container is an Inconsistent " +
-            "state, missing required files(.container, .chksm). ContainerID: " +
-            containerId, INVALID_CONTAINER_STATE);
-      }
-    } catch (StorageContainerException ex) {
-      throw ex;
-    } catch (IOException ex) {
-      // Restore from back up files.
+    if (containerFile.exists() && checksumFile.exists()) {
-        if (containerBkpFile != null && containerBkpFile
-            .exists() && containerFile.delete()) {
-          LOG.info("update failed for container Name: {}, restoring container" +
-              " file", containerId);
-          NativeIO.renameTo(containerBkpFile, containerFile);
-        }
-        if (checkSumBkpFile != null && checkSumBkpFile.exists() &&
-            containerCheckSumFile.delete()) {
-          LOG.info("update failed for container Name: {}, restoring checksum" +
-              " file", containerId);
-          NativeIO.renameTo(checkSumBkpFile, containerCheckSumFile);
-        }
-        throw new StorageContainerException("Error during updating of " +
-            "required files(.container, .chksm) for container. Container Name: "
-            + containerId, ex, CONTAINER_FILES_CREATE_ERROR);
+        writeToContainerFile(containerFile, checksumFile, false);
-        containerData.setState(ContainerProtos.ContainerLifeCycleState.INVALID);
-        LOG.error("During restore failed for container Name: " +
-            containerId);
-        throw new StorageContainerException(
-            "Failed to restore container data from the backup. ID: "
-                + containerId, CONTAINER_FILES_CREATE_ERROR);
+        //TODO : Container update failure is not handled currently. Might
+        // lead to loss of .container file. When Update container feature
+        // support is added, this failure should also be handled.
+        throw new StorageContainerException("Container update failed. " +
+            "ContainerID: " + containerId, CONTAINER_FILES_CREATE_ERROR);
-    } finally {
-      if (containerBkpFile != null && containerBkpFile
-          .exists()) {
-        if(!containerBkpFile.delete()) {
-          LOG.warn("Unable to delete container backup file: {}",
-              containerBkpFile);
-        }
-      }
-      if (checkSumBkpFile != null && checkSumBkpFile.exists()) {
-        if(!checkSumBkpFile.delete()) {
-          LOG.warn("Unable to delete container checksum backup file: {}",
-              checkSumBkpFile);
-        }
-      }
+    } else {
+      throw new StorageContainerException("Container is an Inconsistent " +
+          "state, missing required files(.container, .chksm). ContainerID: " +
+          containerId, INVALID_CONTAINER_STATE);
+
+    Map<String, String> oldMetadata = containerData.getMetadata();
+      writeLock();
-    } catch (IOException ex) {
-      throw new StorageContainerException("Container Metadata update error" +
-          ". Container Name:" + containerId, ex, CONTAINER_METADATA_ERROR);
-    }
-    try {
-      writeLock();
-      String containerName = String.valueOf(containerId);
+      // TODO:
+      // On error, reset the metadata.
+      containerData.setMetadata(oldMetadata);

MOV26 MOV26 UPD40 UPD40 UPD42 INS44 INS8 INS65 UPD42 INS39 INS42 MOV43 UPD42 MOV60 INS25 INS60 UPD42 INS42 INS66 INS66 MOV27 INS8 MOV8 INS74 INS59 MOV8 UPD42 INS25 MOV54 INS43 MOV43 INS43 UPD42 MOV42 INS32 MOV21 MOV60 MOV60 MOV21 MOV44 INS42 INS8 INS8 UPD42 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS21 MOV53 UPD42 INS9 UPD42 MOV21 MOV21 INS21 INS21 MOV21 MOV44 INS8 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 UPD42 UPD42 INS32 INS32 UPD42 UPD42 MOV53 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS32 INS40 INS42 INS42 INS32 INS32 INS40 UPD45 UPD42 UPD42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD45 UPD45 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL14 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL45 DEL27 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL8 DEL42 DEL43 DEL45 DEL45 DEL42 DEL27 DEL42 DEL42 DEL14 DEL53 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL8 DEL12 DEL54