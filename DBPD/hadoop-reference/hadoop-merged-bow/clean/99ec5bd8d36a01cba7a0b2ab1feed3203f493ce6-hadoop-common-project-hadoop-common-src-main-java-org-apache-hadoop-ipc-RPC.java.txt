Merge trunk into QJM branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1380990 13f79535-47bb-0310-9956-ffa450edef68

+  /**
+   * Class to construct instances of RPC server with specific options.
+   */
+  public static class Builder {
+    private Class<?> protocol = null;
+    private Object instance = null;
+    private String bindAddress = "0.0.0.0";
+    private int port = 0;
+    private int numHandlers = 1;
+    private int numReaders = -1;
+    private int queueSizePerHandler = -1;
+    private boolean verbose = false;
+    private final Configuration conf;    
+    private SecretManager<? extends TokenIdentifier> secretManager = null;
+    private String portRangeConfig = null;
+    
+    public Builder(Configuration conf) {
+      this.conf = conf;
+    }
+
+    /** Mandatory field */
+    public Builder setProtocol(Class<?> protocol) {
+      this.protocol = protocol;
+      return this;
+    }
+    
+    /** Mandatory field */
+    public Builder setInstance(Object instance) {
+      this.instance = instance;
+      return this;
+    }
+    
+    /** Default: 0.0.0.0 */
+    public Builder setBindAddress(String bindAddress) {
+      this.bindAddress = bindAddress;
+      return this;
+    }
+    
+    /** Default: 0 */
+    public Builder setPort(int port) {
+      this.port = port;
+      return this;
+    }
+    
+    /** Default: 1 */
+    public Builder setNumHandlers(int numHandlers) {
+      this.numHandlers = numHandlers;
+      return this;
+    }
+    
+    /** Default: -1 */
+    public Builder setnumReaders(int numReaders) {
+      this.numReaders = numReaders;
+      return this;
+    }
+    
+    /** Default: -1 */
+    public Builder setQueueSizePerHandler(int queueSizePerHandler) {
+      this.queueSizePerHandler = queueSizePerHandler;
+      return this;
+    }
+    
+    /** Default: false */
+    public Builder setVerbose(boolean verbose) {
+      this.verbose = verbose;
+      return this;
+    }
+    
+    /** Default: null */
+    public Builder setSecretManager(
+        SecretManager<? extends TokenIdentifier> secretManager) {
+      this.secretManager = secretManager;
+      return this;
+    }
+    
+    /** Default: null */
+    public Builder setPortRangeConfig(String portRangeConfig) {
+      this.portRangeConfig = portRangeConfig;
+      return this;
+    }
+    
+    /**
+     * Build the RPC Server. 
+     * @throws IOException on error
+     * @throws HadoopIllegalArgumentException when mandatory fields are not set
+     */
+    public Server build() throws IOException, HadoopIllegalArgumentException {
+      if (this.conf == null) {
+        throw new HadoopIllegalArgumentException("conf is not set");
+      }
+      if (this.protocol == null) {
+        throw new HadoopIllegalArgumentException("protocol is not set");
+      }
+      if (this.instance == null) {
+        throw new HadoopIllegalArgumentException("instance is not set");
+      }
+      
+      return getProtocolEngine(this.protocol, this.conf).getServer(
+          this.protocol, this.instance, this.bindAddress, this.port,
+          this.numHandlers, this.numReaders, this.queueSizePerHandler,
+          this.verbose, this.conf, this.secretManager, this.portRangeConfig);
+    }
+  }
+  

INS55 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS83 INS74 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS43 INS43 INS8 INS66 INS43 INS76 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS34 INS42 INS34 INS42 INS38 INS42 INS38 INS42 INS9 INS42 INS42 INS43 INS76 INS42 INS33 INS42 INS42 INS33 INS43 INS42 INS21 INS65 INS42 INS74 INS42 INS21 INS41 INS65 INS42 INS43 INS42 INS21 INS41 INS65 INS42 INS43 INS42 INS21 INS41 INS65 INS42 INS39 INS42 INS21 INS41 INS65 INS42 INS39 INS42 INS21 INS41 INS65 INS42 INS39 INS42 INS21 INS41 INS65 INS42 INS39 INS42 INS21 INS41 INS65 INS42 INS39 INS42 INS21 INS41 INS65 INS42 INS74 INS42 INS21 INS41 INS65 INS42 INS43 INS42 INS21 INS41 INS65 INS65 INS65 INS42 INS42 INS42 INS25 INS25 INS25 INS41 INS42 INS34 INS34 INS42 INS43 INS42 INS7 INS66 INS43 INS76 INS7 INS52 INS66 INS42 INS7 INS52 INS66 INS42 INS7 INS52 INS66 INS7 INS52 INS66 INS7 INS52 INS66 INS7 INS52 INS66 INS7 INS52 INS66 INS7 INS52 INS66 INS43 INS76 INS7 INS52 INS66 INS42 INS7 INS52 INS66 INS42 INS66 INS42 INS66 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS42 INS22 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS43 INS22 INS42 INS22 INS42 INS22 INS33 INS53 INS22 INS33 INS53 INS22 INS33 INS53 INS32 INS42 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS14 INS52 INS42 INS14 INS52 INS42 INS14 INS42 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS45 INS43 INS45 INS43 INS45 INS52 INS42 INS52 INS42 INS42 INS42 INS42