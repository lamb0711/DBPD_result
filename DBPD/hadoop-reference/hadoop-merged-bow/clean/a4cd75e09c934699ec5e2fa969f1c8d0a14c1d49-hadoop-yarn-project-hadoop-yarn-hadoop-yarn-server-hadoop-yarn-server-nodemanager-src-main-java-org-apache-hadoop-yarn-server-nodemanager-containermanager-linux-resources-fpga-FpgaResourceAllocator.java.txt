YARN-9269. Minor cleanup in FpgaResourceAllocator. Contributed by Peter Bacsko.

-import java.util.*;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
-
-  private LinkedHashMap<String, List<FpgaDevice>> availableFpga = new LinkedHashMap<>();
+  private Map<String, List<FpgaDevice>> availableFpgas = new HashMap<>();
-  //key is requestor, aka. container ID
-  private LinkedHashMap<String, List<FpgaDevice>> usedFpgaByRequestor = new LinkedHashMap<>();
+  //key is the container ID
+  private Map<String, List<FpgaDevice>> containerToFpgaMapping =
+      new HashMap<>();
-  public HashMap<String, List<FpgaDevice>> getAvailableFpga() {
-    return availableFpga;
+  Map<String, List<FpgaDevice>> getAvailableFpga() {
+    return availableFpgas;
-  public List<FpgaDevice> getAllowedFpga() {
+  List<FpgaDevice> getAllowedFpga() {
-  public int getAvailableFpgaCount() {
+  int getAvailableFpgaCount() {
-    for (List<FpgaDevice> l : availableFpga.values()) {
-      count += l.size();
-    }
+
+    count = availableFpgas.values()
+      .stream()
+      .mapToInt(i -> i.size())
+      .sum();
+
-  public HashMap<String, List<FpgaDevice>> getUsedFpga() {
-    return usedFpgaByRequestor;
+  Map<String, List<FpgaDevice>> getUsedFpga() {
+    return containerToFpgaMapping;
-  public int getUsedFpgaCount() {
+  int getUsedFpgaCount() {
-    for (List<FpgaDevice> l : usedFpgaByRequestor.values()) {
-      count += l.size();
-    }
+
+    count = containerToFpgaMapping.values()
+        .stream()
+        .mapToInt(i -> i.size())
+        .sum();
+
-  public synchronized void addFpga(String type, List<FpgaDevice> list) {
-    availableFpga.putIfAbsent(type, new LinkedList<>());
+  // called once during initialization
+  public synchronized void addFpgaDevices(String type, List<FpgaDevice> list) {
+    availableFpgas.putIfAbsent(type, new LinkedList<>());
+    List<FpgaDevice> fpgaDevices = new LinkedList<>();
+
-        allowedFpgas.add(device);
-        availableFpga.get(type).add(device);
+        fpgaDevices.add(device);
+        availableFpgas.get(type).add(device);
+      } else {
+        LOG.warn("Duplicate device found: " + device + ". Ignored");
-    LOG.info("Add a list of FPGA Devices: " + list);
+
+    allowedFpgas = ImmutableList.copyOf(fpgaDevices);
+    LOG.info("Added a list of FPGA Devices: " + allowedFpgas);
-    List<FpgaDevice> usedFpgas = usedFpgaByRequestor.get(requestor);
-    int index = findMatchedFpga(usedFpgas, device);
-    if (-1 != index) {
-      usedFpgas.get(index).setIPID(newIPID);
-      FpgaDevice fpga = usedFpgas.get(index);
-      fpga.setIPID(newIPID);
-      fpga.setAocxHash(newHash);
-    } else {
-      LOG.warn("Failed to update FPGA due to unknown reason " +
-          "that no record for this allocated device:" + device);
-    }
+    device.setIPID(newIPID);
+    device.setAocxHash(newHash);
-        " for this allocated device:" + device);
-  }
-
-  private synchronized int findMatchedFpga(List<FpgaDevice> devices, FpgaDevice item) {
-    int i = 0;
-    for (; i < devices.size(); i++) {
-      if (devices.get(i) == item) {
-        return i;
-      }
-    }
-    return -1;
+        " for this allocated device: " + device);
+    LOG.info("Update IP hash to " + newHash);
-    List<FpgaDevice> currentAvailableFpga = availableFpga.get(type);
+    List<FpgaDevice> currentAvailableFpga = availableFpgas.get(type);
+
-        usedFpgaByRequestor.putIfAbsent(requestor, new LinkedList<>());
-        usedFpgaByRequestor.get(requestor).addAll(assignedFpgas);
+        containerToFpgaMapping.putIfAbsent(requestor, new LinkedList<>());
+        containerToFpgaMapping.get(requestor).addAll(assignedFpgas);
-    List<FpgaDevice> usedFpgas = usedFpgaByRequestor.get(requestor);
+    List<FpgaDevice> usedFpgas = containerToFpgaMapping.get(requestor);
-        availableFpga.get(device.getType()).add(device);
+        availableFpgas.get(device.getType()).add(device);
-      usedFpgaByRequestor.remove(requestor);
+      containerToFpgaMapping.remove(requestor);
-

INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 UPD40 UPD74 UPD74 UPD74 UPD74 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 INS21 UPD43 INS21 INS60 INS21 MOV21 MOV21 MOV21 UPD42 UPD74 UPD42 UPD74 UPD42 UPD42 INS7 UPD42 UPD42 INS7 MOV74 INS59 INS7 MOV74 UPD43 UPD43 INS42 INS32 INS42 INS32 UPD42 INS42 INS14 INS42 INS32 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS32 INS42 INS74 INS8 INS42 INS42 INS42 UPD45 UPD42 UPD45 INS42 UPD45 UPD45 UPD42 UPD42 UPD42 INS32 INS42 INS86 INS32 INS42 INS86 INS43 INS21 UPD42 INS32 INS42 INS59 INS32 INS32 INS42 INS59 INS32 INS42 INS32 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 UPD42 INS42 INS42 INS27 UPD42 UPD42 INS45 INS42 INS45 UPD42 UPD42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL70 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL34 DEL38 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL25 DEL45 DEL42 DEL83 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL24 DEL34 DEL38 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74