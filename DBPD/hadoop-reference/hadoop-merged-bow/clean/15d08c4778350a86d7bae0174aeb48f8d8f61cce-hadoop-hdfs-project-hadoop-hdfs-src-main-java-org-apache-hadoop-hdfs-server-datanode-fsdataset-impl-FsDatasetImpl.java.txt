HDFS-5349. DNA_CACHE and DNA_UNCACHE should be by blockId only (cmccabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532116 13f79535-47bb-0310-9956-ffa450edef68

-    cacheManager.uncacheBlock(bpid, replicaInfo);
+    cacheManager.uncacheBlock(bpid, replicaInfo.getBlockId());
-      cacheManager.uncacheBlock(bpid, invalidBlks[i]);
+      cacheManager.uncacheBlock(bpid, invalidBlks[i].getBlockId());
-  synchronized boolean validToCache(String bpid, Block blk) {
-    ReplicaInfo info = volumeMap.get(bpid, blk);
+  synchronized boolean validToCache(String bpid, long blockId) {
+    ReplicaInfo info = volumeMap.get(bpid, blockId);
-      LOG.warn("Failed to cache replica " + blk + ": ReplicaInfo not found.");
+      LOG.warn("Failed to cache replica in block pool " + bpid +
+          " with block id " + blockId + ": ReplicaInfo not found.");
-      LOG.warn("Failed to cache replica " + blk + ": Volume not found.");
+      LOG.warn("Failed to cache block with id " + blockId +
+          ": Volume not found.");
-      LOG.warn("Failed to cache replica " + blk + ": Replica is not"
-          + " finalized.");
+      LOG.warn("Failed to block with id " + blockId + 
+          ": Replica is not finalized.");
-  private void cacheBlock(String bpid, Block blk) {
+  private void cacheBlock(String bpid, long blockId) {
-      if (!validToCache(bpid, blk)) {
+      if (!validToCache(bpid, blockId)) {
-      info = volumeMap.get(bpid, blk);
+      info = volumeMap.get(bpid, blockId);
+    ExtendedBlock extBlk =
+        new ExtendedBlock(bpid, blockId,
+            info.getBytesOnDisk(), info.getGenerationStamp());
-      ExtendedBlock extBlk = new ExtendedBlock(bpid, blk);
-      LOG.warn("Failed to cache replica " + blk + ": Underlying blocks"
+      LOG.warn("Failed to cache replica " + extBlk + ": Underlying blocks"
-      LOG.warn("Failed to cache replica " + blk + ": IOException while"
+      LOG.warn("Failed to cache replica " + extBlk + ": IOException while"
-    cacheManager.cacheBlock(bpid, blk, volume, blockIn, metaIn);
+    cacheManager.cacheBlock(bpid, extBlk.getLocalBlock(),
+        volume, blockIn, metaIn);
-  public void cache(String bpid, Block[] cacheBlks) {
-    for (int i=0; i<cacheBlks.length; i++) {
-      cacheBlock(bpid, cacheBlks[i]);
+  public void cache(String bpid, long[] blockIds) {
+    for (int i=0; i < blockIds.length; i++) {
+      cacheBlock(bpid, blockIds[i]);
-  public void uncache(String bpid, Block[] uncacheBlks) {
-    for (int i=0; i<uncacheBlks.length; i++) {
-      Block blk = uncacheBlks[i];
-      cacheManager.uncacheBlock(bpid, blk);
+  public void uncache(String bpid, long[] blockIds) {
+    for (int i=0; i < blockIds.length; i++) {
+      cacheManager.uncacheBlock(bpid, blockIds[i]);

INS39 UPD42 INS39 UPD42 INS60 UPD5 UPD42 UPD5 UPD42 MOV43 INS59 INS39 INS39 INS32 INS42 INS14 INS32 UPD40 UPD40 MOV42 INS42 INS32 UPD42 MOV43 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV32 MOV42 INS42 INS42 INS42 INS42 INS2 UPD42 UPD45 INS42 INS45 UPD42 UPD45 UPD42 UPD45 UPD42 UPD45 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 DEL42 DEL42 DEL42 DEL43 DEL45 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42