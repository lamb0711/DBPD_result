HDFS-5259. Support client which combines appended data with old data before sends it to NFS server. Contributed by Brandon Li

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529730 13f79535-47bb-0310-9956-ffa450edef68

+import java.nio.ByteBuffer;
+import com.google.common.annotations.VisibleForTesting;
+  @VisibleForTesting
+  public static void alterWriteRequest(WRITE3Request request, long cachedOffset) {
+    long offset = request.getOffset();
+    int count = request.getCount();
+    long smallerCount = offset + count - cachedOffset;
+    if (LOG.isDebugEnabled()) {
+      LOG.debug(String.format("Got overwrite with appended data (%d-%d),"
+          + " current offset %d," + " drop the overlapped section (%d-%d)"
+          + " and append new data (%d-%d).", offset, (offset + count - 1),
+          cachedOffset, offset, (cachedOffset - 1), cachedOffset, (offset
+              + count - 1)));
+    }
+    
+    ByteBuffer data = request.getData();
+    Preconditions.checkState(data.position() == 0,
+        "The write request data has non-zero position");
+    data.position((int) (cachedOffset - offset));
+    Preconditions.checkState(data.limit() - data.position() == smallerCount,
+        "The write request buffer has wrong limit/position regarding count");
+    
+    request.setOffset(cachedOffset);
+    request.setCount((int) smallerCount);
+  }
+  
-
+    int originalCount = WriteCtx.INVALID_ORIGINAL_COUNT;
+    
+    // Handle a special case first
+    if ((offset < cachedOffset) && (offset + count > cachedOffset)) {
+      // One Linux client behavior: after a file is closed and reopened to
+      // write, the client sometimes combines previous written data(could still
+      // be in kernel buffer) with newly appended data in one write. This is
+      // usually the first write after file reopened. In this
+      // case, we log the event and drop the overlapped section.
+      LOG.warn(String.format("Got overwrite with appended data (%d-%d),"
+          + " current offset %d," + " drop the overlapped section (%d-%d)"
+          + " and append new data (%d-%d).", offset, (offset + count - 1),
+          cachedOffset, offset, (cachedOffset - 1), cachedOffset, (offset
+              + count - 1)));
+
+      if (!pendingWrites.isEmpty()) {
+        LOG.warn("There are other pending writes, fail this jumbo write");
+        return null;
+      }
+      
+      LOG.warn("Modify this write to write only the appended data");
+      alterWriteRequest(request, cachedOffset);
+
+      // Update local variable
+      originalCount = count;
+      offset = request.getOffset();
+      count = request.getCount();
+    }
+    
-          request.getOffset(), request.getCount(), request.getStableHow(),
-          request.getData().array(), channel, xid, false, dataState);
+          request.getOffset(), request.getCount(), originalCount,
+          request.getStableHow(), request.getData(), channel, xid, false,
+          dataState);
-      LOG.warn("Haven't noticed any partial overwrite for a sequential file"
-          + " write requests. Treat it as a real random write, no support.");
+      LOG.warn("Treat this jumbo write as a real random write, no support.");
+    // For the offset range (min, max), min is inclusive, and max is exclusive
-    byte[] data = null;
-    try {
-      data = writeCtx.getData();
-    } catch (Exception e1) {
-      LOG.error("Failed to get request data offset:" + offset + " count:"
-          + count + " error:" + e1);
-      // Cleanup everything
-      cleanup();
-      return;
-    }
-    Preconditions.checkState(data.length == count);
-
-      // there is one thread doing write back at any time
-      fos.write(data, 0, count);
+      // there is one thread doing write back at any time    
+      writeCtx.writeData(fos);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("After writing " + handle.getFileId() + " at offset "
-            + offset + ", update the memory count.");
-      }
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("After writing " + handle.getFileId() + " at offset "
+                  + offset + ", updated the memory count, new value:"
+                  + nonSequentialWriteInMemory.get());
+            }
+        if (writeCtx.getOriginalCount() != WriteCtx.INVALID_ORIGINAL_COUNT) {
+          LOG.warn("Return original count:" + writeCtx.getOriginalCount()
+              + " instead of real data count:" + count);
+          count = writeCtx.getOriginalCount();
+        }
-          + offset + " and length " + data.length, e);
+          + offset + " and length " + count, e);

INS26 INS26 INS40 INS40 INS31 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS39 INS42 INS60 INS60 INS60 INS25 INS60 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS32 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS39 INS59 INS27 INS8 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS21 INS42 INS42 MOV32 INS42 INS42 INS27 INS45 INS42 INS42 INS11 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS40 INS36 INS36 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS32 INS34 INS39 INS36 INS27 INS42 INS39 INS42 INS27 INS27 INS32 INS38 INS8 INS32 INS32 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS32 INS21 INS41 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS45 UPD42 UPD42 UPD42 INS25 INS42 INS42 INS27 INS42 INS36 INS42 INS42 INS36 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS36 INS42 INS42 INS36 INS42 INS36 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS45 INS45 INS45 INS45 INS27 INS27 INS27 INS45 INS45 INS45 INS45 INS27 INS27 INS27 INS42 INS42 INS45 UPD42 INS42 INS32 INS40 INS21 INS21 MOV32 INS42 INS27 INS34 INS42 INS34 INS27 INS34 INS27 INS34 INS42 INS34 INS27 INS34 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS42 INS42 INS27 INS42 INS32 MOV32 INS8 INS45 INS32 INS45 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS27 INS45 MOV32 INS45 INS42 INS45 INS32 INS42 INS42 DEL45 DEL45 DEL27 DEL39 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL32 DEL21 DEL41 DEL8 DEL12 DEL54 DEL42 DEL42 DEL40 DEL42 DEL27 DEL32 DEL21 DEL42 DEL34 DEL42 DEL42 DEL45 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL40