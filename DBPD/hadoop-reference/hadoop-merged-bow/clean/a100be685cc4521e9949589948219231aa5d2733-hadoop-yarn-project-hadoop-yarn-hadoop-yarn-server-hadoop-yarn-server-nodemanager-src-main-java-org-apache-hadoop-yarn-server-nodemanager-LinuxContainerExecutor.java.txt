YARN-3366. Enhanced NodeManager to support classifying/shaping outgoing network bandwidth traffic originating from YARN containers Contributed by Sidharta Seethana.

+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.privileged.PrivilegedOperation;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.privileged.PrivilegedOperationException;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.privileged.PrivilegedOperationExecutor;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.ResourceHandler;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.ResourceHandlerException;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.ResourceHandlerModule;
+  private ResourceHandler resourceHandlerChain;
-   
+
+    try {
+      Configuration conf = super.getConf();
+
+      resourceHandlerChain = ResourceHandlerModule
+          .getConfiguredResourceHandlerChain(conf);
+      if (resourceHandlerChain != null) {
+        resourceHandlerChain.bootstrap(conf);
+      }
+    } catch (ResourceHandlerException e) {
+      LOG.error("Failed to bootstrap configured resource subsystems! ", e);
+      throw new IOException("Failed to bootstrap configured resource subsystems!");
+    }
+
+    String tcCommandFile = null;
+
+    try {
+      if (resourceHandlerChain != null) {
+        List<PrivilegedOperation> ops = resourceHandlerChain
+            .preStart(container);
+
+        if (ops != null) {
+          List<PrivilegedOperation> resourceOps = new ArrayList<>();
+
+          resourceOps.add(new PrivilegedOperation
+              (PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,
+                  resourcesOptions));
+
+          for (PrivilegedOperation op : ops) {
+            switch (op.getOperationType()) {
+              case ADD_PID_TO_CGROUP:
+                resourceOps.add(op);
+                break;
+              case TC_MODIFY_STATE:
+                tcCommandFile = op.getArguments().get(0);
+                break;
+              default:
+                LOG.warn("PrivilegedOperation type unsupported in launch: "
+                    + op.getOperationType());
+            }
+          }
+
+          if (resourceOps.size() > 1) {
+            //squash resource operations
+            try {
+              PrivilegedOperation operation = PrivilegedOperationExecutor
+                  .squashCGroupOperations(resourceOps);
+              resourcesOptions = operation.getArguments().get(0);
+            } catch (PrivilegedOperationException e) {
+              LOG.error("Failed to squash cgroup operations!", e);
+              throw new ResourceHandlerException("Failed to squash cgroup operations!");
+            }
+          }
+        }
+      }
+    } catch (ResourceHandlerException e) {
+      LOG.error("ResourceHandlerChain.preStart() failed!", e);
+      throw new IOException("ResourceHandlerChain.preStart() failed!");
+    }
+
+        if (tcCommandFile != null) {
+            command.add(tcCommandFile);
+        }
+
+
+      try {
+        if (resourceHandlerChain != null) {
+          resourceHandlerChain.postComplete(containerId);
+        }
+      } catch (ResourceHandlerException e) {
+        LOG.warn("ResourceHandlerChain.postComplete failed for " +
+            "containerId: " + containerId + ". Exception: " + e);
+      }
+      //Resource handler chain needs to reacquire container state
+      //as well
+      if (resourceHandlerChain != null) {
+        try {
+          resourceHandlerChain.reacquireContainer(containerId);
+        } catch (ResourceHandlerException e) {
+          LOG.warn("ResourceHandlerChain.reacquireContainer failed for " +
+              "containerId: " + containerId + " Exception: " + e);
+        }
+      }
+
+      if (resourceHandlerChain != null) {
+        try {
+          resourceHandlerChain.postComplete(containerId);
+        } catch (ResourceHandlerException e) {
+          LOG.warn("ResourceHandlerChain.postComplete failed for " +
+              "containerId: " + containerId + " Exception: " + e);
+        }
+      }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS83 INS43 INS59 INS42 INS42 INS54 INS60 INS54 INS8 INS12 INS43 INS59 INS8 INS12 INS8 INS8 INS8 INS60 INS21 INS25 INS44 INS8 INS42 INS42 INS33 INS25 INS44 INS8 INS21 INS54 INS25 MOV41 MOV21 INS25 INS43 INS59 INS7 INS27 INS8 INS43 INS42 INS21 INS53 INS27 INS8 INS43 INS42 INS21 INS53 INS32 INS8 INS12 INS27 INS8 INS27 INS8 INS42 INS42 INS48 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS14 INS42 INS33 INS60 INS25 INS42 INS32 INS14 INS25 INS42 INS42 INS42 INS25 INS44 INS8 INS42 INS33 INS54 INS42 INS33 INS54 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS43 INS45 INS74 INS59 INS27 INS8 INS42 INS42 INS45 INS42 INS43 INS45 INS27 INS8 INS27 INS8 INS43 INS42 INS21 MOV8 INS12 MOV8 INS12 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS60 INS21 INS70 INS25 INS42 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS32 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS44 INS42 INS8 INS27 INS8 INS32 INS32 INS42 INS42 INS27 INS32 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS50 INS32 INS34 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS32 INS42 INS42 INS74 INS43 INS40 INS42 INS42 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS42 INS42 INS8 INS12 INS45 INS45 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS32 INS60 INS21 INS44 INS8 INS27 INS42 INS45 INS42 INS27 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS59 INS7 INS43 INS42 INS21 INS53 INS45 INS45 INS45 INS45 INS32 INS42 INS34 INS45 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS45 INS42 INS43 INS45 INS42 INS42 INS42 DEL8