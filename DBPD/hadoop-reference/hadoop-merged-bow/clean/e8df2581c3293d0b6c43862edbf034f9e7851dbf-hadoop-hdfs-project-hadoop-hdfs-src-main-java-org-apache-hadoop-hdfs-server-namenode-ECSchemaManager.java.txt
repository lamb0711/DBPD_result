HDFS-8156. Add/implement necessary APIs even we just have the system default schema. Contributed by Kai Zheng.

+import java.util.Map;
+import java.util.TreeMap;
+
- * This manages EC schemas predefined and activated in the system. It loads from
- * predefined ones in XML and syncs with persisted ones in NameNode image.
+ * This manages EC schemas predefined and activated in the system.
+ * It loads customized schemas and syncs with persisted ones in
+ * NameNode image.
+  /**
+   * TODO: HDFS-8095
+   */
-  private static final String DEFAULT_SCHEMA_NAME = "SYS-DEFAULT-RS-6-3";
+  private static final String DEFAULT_SCHEMA_NAME = "RS-6-3";
+  private static final ECSchema SYS_DEFAULT_SCHEMA =
+      new ECSchema(DEFAULT_SCHEMA_NAME,
+               DEFAULT_CODEC_NAME, DEFAULT_DATA_BLOCKS, DEFAULT_PARITY_BLOCKS);
-  private static ECSchema SYS_DEFAULT_SCHEMA = new ECSchema(DEFAULT_SCHEMA_NAME,
-      DEFAULT_CODEC_NAME, DEFAULT_DATA_BLOCKS, DEFAULT_PARITY_BLOCKS);
+  //We may add more later.
+  private static ECSchema[] SYS_SCHEMAS = new ECSchema[] {
+      SYS_DEFAULT_SCHEMA
+  };
+
+  /**
+   * All active EC activeSchemas maintained in NN memory for fast querying,
+   * identified and sorted by its name.
+   */
+  private final Map<String, ECSchema> activeSchemas;
+
+  ECSchemaManager() {
+
+    this.activeSchemas = new TreeMap<String, ECSchema>();
+    for (ECSchema schema : SYS_SCHEMAS) {
+      activeSchemas.put(schema.getSchemaName(), schema);
+    }
+
+    /**
+     * TODO: HDFS-7859 persist into NameNode
+     * load persistent schemas from image and editlog, which is done only once
+     * during NameNode startup. This can be done here or in a separate method.
+     */
+  }
+
+  /**
+   * Get system defined schemas.
+   * @return system schemas
+   */
+  public static ECSchema[] getSystemSchemas() {
+    return SYS_SCHEMAS;
+  }
-    // schema name is the identifier, but for safety we check all properties.
-    return SYS_DEFAULT_SCHEMA.equals(schema);
+    // schema name is the identifier.
+    return SYS_DEFAULT_SCHEMA.getSchemaName().equals(schema.getSchemaName());
+  }
+
+  /**
+   * Get all EC schemas that's available to use.
+   * @return all EC schemas
+   */
+  public ECSchema[] getSchemas() {
+    ECSchema[] results = new ECSchema[activeSchemas.size()];
+    return activeSchemas.values().toArray(results);
+  }
+
+  /**
+   * Get the EC schema specified by the schema name.
+   * @param schemaName
+   * @return EC schema specified by the schema name
+   */
+  public ECSchema getSchema(String schemaName) {
+    return activeSchemas.get(schemaName);
+  }
+
+  /**
+   * Clear and clean up
+   */
+  public void clear() {
+    activeSchemas.clear();

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS5 INS59 INS29 INS83 INS83 INS74 INS59 INS42 INS8 INS29 INS83 INS83 INS5 INS42 INS8 INS29 INS83 INS5 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 UPD66 UPD66 INS66 INS65 UPD45 INS43 INS85 INS42 INS3 INS65 INS43 INS43 INS43 INS42 INS21 INS70 INS65 INS65 INS43 INS85 INS41 INS65 INS65 INS43 INS85 INS60 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS65 INS21 INS66 INS42 INS5 INS4 INS66 INS66 INS42 INS42 INS42 INS7 INS44 INS42 INS8 INS66 INS66 INS42 INS42 INS66 INS66 INS42 INS5 INS59 INS32 INS66 INS42 INS66 INS42 INS32 INS66 INS32 INS43 INS85 INS42 INS22 INS14 INS43 INS42 INS21 INS32 INS32 INS43 INS85 INS42 INS3 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS74 INS42 INS32 MOV42 INS42 MOV42 INS42 INS42 INS5 INS32 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42