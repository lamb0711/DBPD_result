HDDS-850. ReadStateMachineData hits OverlappingFileLockException in ContainerStateMachine. Contributed by Shashikant Banerjee.

+import com.google.common.cache.Cache;
+import com.google.common.cache.CacheBuilder;
+import org.apache.ratis.server.impl.RaftServerProxy;
+import java.util.Collection;
+import java.util.concurrent.Callable;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.ExecutionException;
-  private final ConcurrentHashMap<Long, CompletableFuture<Message>>
-      createContainerFutureMap;
+  private final Cache<Long, ByteString> stateMachineDataCache;
-      List<ExecutorService> executors) {
+      List<ExecutorService> executors, long expiryInterval) {
-    this.createContainerFutureMap = new ConcurrentHashMap<>();
+    stateMachineDataCache = CacheBuilder.newBuilder()
+        .expireAfterAccess(expiryInterval, TimeUnit.MILLISECONDS)
+        // set the limit on no of cached entries equal to no of max threads
+        // executing writeStateMachineData
+        .maximumSize(chunkExecutor.getCorePoolSize()).build();
-    } else if (proto.getCmdType() == Type.CreateContainer) {
-      return TransactionContext.newBuilder()
-          .setClientRequest(request)
-          .setStateMachine(this)
-          .setServerRole(RaftPeerRole.LEADER)
-          .setStateMachineData(request.getMessage().getContent())
-          .setLogData(request.getMessage().getContent())
-          .build();
-    long containerID = write.getBlockID().getContainerID();
-    CompletableFuture<Message> future =
-        createContainerFutureMap.get(containerID);
-    CompletableFuture<Message> writeChunkFuture;
-    if (future != null) {
-      writeChunkFuture = future.thenApplyAsync(
-          v -> runCommand(requestProto), chunkExecutor);
-    } else {
-      writeChunkFuture = CompletableFuture.supplyAsync(
-          () -> runCommand(requestProto), chunkExecutor);
+    RaftServer server = ratisServer.getServer();
+    Preconditions.checkState(server instanceof RaftServerProxy);
+    try {
+      if (((RaftServerProxy) server).getImpl(gid).isLeader()) {
+        stateMachineDataCache.put(entryIndex, write.getData());
+      }
+    } catch (IOException ioe) {
+      return completeExceptionally(ioe);
+    CompletableFuture<Message> writeChunkFuture = CompletableFuture
+        .supplyAsync(() -> runCommand(requestProto), chunkExecutor);
-  private CompletableFuture<Message> handleCreateContainer(
-      ContainerCommandRequestProto requestProto) {
-    long containerID = requestProto.getContainerID();
-    createContainerFutureMap.
-        computeIfAbsent(containerID, k -> new CompletableFuture<>());
-    return CompletableFuture.completedFuture(() -> ByteString.EMPTY);
-  }
-
+
+      // For only writeChunk, there will be writeStateMachineData call.
+      // CreateContainer will happen as a part of writeChunk only.
-      case CreateContainer:
-        return handleCreateContainer(requestProto);
-            .setChunkData(writeChunkRequestProto.getChunkData());
+            .setChunkData(writeChunkRequestProto.getChunkData())
+            // set readFromTempFile to true in case, the chunkFile does
+            // not exist as applyTransaction is not executed for this entry yet.
+            .setReadFromTmpFile(true);
+    ByteString data = responseProto.getData();
-    Preconditions.checkNotNull(responseProto.getData());
+    Preconditions.checkNotNull(data);
+    return data;
+  }
+  /**
+   * Reads the Entry from the Cache or loads it back by reading from disk.
+   */
+  private ByteString getCachedStateMachineData(Long logIndex,
+      ContainerCommandRequestProto requestProto) throws ExecutionException {
+    try {
+      return reconstructWriteChunkRequest(
+          stateMachineDataCache.get(logIndex, new Callable<ByteString>() {
+            @Override
+            public ByteString call() throws Exception {
+              return readStateMachineData(requestProto);
+            }
+          }), requestProto);
+    } catch (ExecutionException e) {
+      throw e;
+    }
+  }
+
+  private ByteString reconstructWriteChunkRequest(ByteString data,
+      ContainerCommandRequestProto requestProto) {
+    WriteChunkRequestProto writeChunkRequestProto =
+        requestProto.getWriteChunk();
-            .setData(responseProto.getData())
-            .setStage(Stage.WRITE_DATA);
+            .setData(data).setStage(Stage.WRITE_DATA);
-
-
-        return CompletableFuture.supplyAsync(() ->
-                readStateMachineData(requestProto), chunkExecutor);
-      } else if (requestProto.getCmdType() == Type.CreateContainer) {
-        return CompletableFuture.completedFuture(requestProto.toByteString());
+        CompletableFuture<ByteString> future = new CompletableFuture<>();
+        return future.supplyAsync(() -> {
+          try {
+            return getCachedStateMachineData(entry.getIndex(), requestProto);
+          } catch (ExecutionException e) {
+            future.completeExceptionally(e);
+            return null;
+          }
+        }, chunkExecutor);
-      // Mark the createContainerFuture complete so that writeStateMachineData
-      // for WriteChunk gets unblocked
-      if (cmdType == Type.CreateContainer) {
-        long containerID = requestProto.getContainerID();
-        future.thenApply(
-            r -> {
-              createContainerFutureMap.remove(containerID).complete(null);
-              LOG.info("create Container Transaction completed for container " +
-                  containerID + " log index " + index);
-              return r;
-            });
-      }
-
+  private void evictStateMachineCache() {
+    stateMachineDataCache.invalidateAll();
+    stateMachineDataCache.cleanUp();
+  }
+
+  public void notifyNotLeader(Collection<TransactionContext> pendingEntries)
+      throws IOException {
+    evictStateMachineCache();
+  }
+
+  @Override
+    evictStateMachineCache();

INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 UPD74 INS44 MOV21 INS29 MOV83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 UPD42 MOV42 INS44 MOV44 INS8 INS83 INS39 INS42 INS8 MOV78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 UPD43 MOV43 UPD43 MOV43 UPD42 INS39 INS42 INS21 INS54 INS60 INS60 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS54 INS42 INS43 INS42 MOV60 MOV60 MOV60 MOV41 MOV21 INS21 INS74 INS42 INS42 INS21 INS42 INS21 UPD42 UPD42 MOV8 INS43 INS32 INS8 INS12 MOV74 INS59 INS43 INS59 INS42 INS66 INS42 INS42 INS8 INS12 INS42 INS43 INS32 INS43 INS43 INS32 INS32 INS42 INS32 INS42 UPD42 INS32 INS42 INS42 INS62 INS25 INS44 INS8 INS42 MOV32 MOV49 INS32 INS42 INS42 MOV32 INS42 INS41 INS44 INS8 INS42 UPD42 INS25 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS32 INS8 INS43 INS42 INS41 MOV32 INS42 INS9 INS32 INS43 INS42 INS53 UPD42 MOV27 INS8 MOV8 INS32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS60 MOV41 INS32 INS42 INS42 INS40 INS42 INS42 INS36 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS14 INS74 INS59 INS42 INS42 INS11 UPD42 MOV42 INS42 INS42 INS32 INS74 INS1 INS43 INS43 INS42 MOV14 UPD42 INS42 INS86 INS42 INS43 INS42 INS42 UPD42 MOV42 UPD43 MOV43 UPD43 MOV43 INS31 INS42 INS42 INS8 UPD42 MOV42 UPD42 UPD42 INS78 INS83 INS43 INS42 INS43 MOV8 INS54 INS42 INS42 INS42 INS8 INS12 MOV32 INS41 INS44 INS8 INS32 INS43 INS42 INS21 INS41 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 DEL42 DEL43 DEL74 DEL52 DEL42 DEL22 DEL42 DEL43 DEL74 DEL14 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL52 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL39 DEL32 DEL42 DEL32 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL59 DEL32 DEL86 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL74 DEL40 DEL86 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL41 DEL42 DEL49 DEL42 DEL42 DEL86 DEL42 DEL32 DEL39 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL27 DEL8 DEL25 DEL25 DEL42 DEL40 DEL27 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL41 DEL8 DEL86 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL59 DEL86