MAPREDUCE-2917. Fixed corner case in container reservation which led to starvation and hung jobs. 


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163768 13f79535-47bb-0310-9956-ffa450edef68

-  public final Resource minimumAllocation;
+  private final Resource minimumAllocation;
+  private final Resource maximumAllocation;
+  private final float minimumAllocationFactor;
+    this.maximumAllocation = cs.getMaximumResourceCapability();
+    this.minimumAllocationFactor = 
+        (float)(maximumAllocation.getMemory() - minimumAllocation.getMemory()) / 
+         maximumAllocation.getMemory();
+  /**
+   * Used only by tests.
+   */
+  @Private
+  public Resource getMinimumAllocation() {
+    return minimumAllocation;
+  }
+
+  /**
+   * Used only by tests.
+   */
+  @Private
+  public Resource getMaximumAllocation() {
+    return maximumAllocation;
+  }
+
+  /**
+   * Used only by tests.
+   */
+  @Private
+  public float getMinimumAllocationFactor() {
+    return minimumAllocationFactor;
+  }
+
+          // Required resource
+          Resource required = 
+              application.getResourceRequest(priority, RMNode.ANY).getCapability();
-          if (!needContainers(application, priority)) {
+          if (!needContainers(application, priority, required)) {
-          ResourceRequest required = 
-            application.getResourceRequest(priority, RMNode.ANY);
-
-          if (!assignToQueue(clusterResource, required.getCapability())) {
+          if (!assignToQueue(clusterResource, required)) {
-            computeUserLimit(application, clusterResource, 
-                required.getCapability());
+            computeUserLimit(application, clusterResource, required); 
-  boolean needContainers(SchedulerApp application, Priority priority) {
+  boolean needContainers(SchedulerApp application, Priority priority, Resource required) {
-    return ((requiredContainers - reservedContainers) > 0);
+    int starvation = 0;
+    if (reservedContainers > 0) {
+      float nodeFactor = 
+          ((float)required.getMemory() / getMaximumAllocation().getMemory());
+      
+      // Use percentage of node required to bias against large containers...
+      // Protect against corner case where you need the whole node with
+      // Math.min(nodeFactor, minimumAllocationFactor)
+      starvation = 
+          (int)((application.getReReservations(priority) / reservedContainers) * 
+                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))
+               );
+      
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("needsContainers:" +
+            " app.#re-reserve=" + application.getReReservations(priority) + 
+            " reserved=" + reservedContainers + 
+            " nodeFactor=" + nodeFactor + 
+            " minAllocFactor=" + minimumAllocationFactor +
+            " starvation=" + starvation);
+      }
+    }
+    return (((starvation + requiredContainers) - reservedContainers) > 0);

INS23 INS23 INS31 INS31 INS31 UPD83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS29 INS78 INS83 INS43 INS42 INS8 INS29 INS78 INS83 INS43 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS44 INS42 INS42 INS42 INS21 INS21 INS65 INS42 INS42 INS41 INS65 INS42 INS42 INS41 INS65 INS42 INS41 INS43 INS42 INS60 INS25 INS7 INS7 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS39 INS59 INS27 INS8 INS22 INS32 INS22 INS27 INS42 INS34 INS42 INS34 INS60 INS21 INS25 INS52 INS42 INS42 INS42 INS52 INS42 INS11 INS32 INS39 INS59 INS7 INS32 INS8 INS39 INS36 INS42 INS42 INS42 INS36 INS42 INS11 INS42 INS42 INS21 INS27 MOV25 INS27 INS39 INS36 INS32 INS36 INS32 INS32 INS11 INS32 INS27 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS42 UPD43 INS39 INS32 INS32 INS42 INS36 INS36 INS27 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 MOV42 UPD42 INS32 INS42 INS42 INS42 INS27 INS27 INS45 INS45 INS42 INS42 INS42 MOV32 INS42 INS42 MOV42 MOV42 INS32 INS42 INS34 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 DEL42 DEL32 DEL42 DEL32