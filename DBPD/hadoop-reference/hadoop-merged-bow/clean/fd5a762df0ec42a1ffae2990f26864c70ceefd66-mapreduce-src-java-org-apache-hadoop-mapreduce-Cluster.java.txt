MAPREDUCE-2400. Remove Cluster's dependency on JobTracker via a ServiceProvider for the actual implementation. Contributed by Tom White.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1145679 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ServiceLoader;
-import org.apache.hadoop.ipc.RPC;
-import org.apache.hadoop.mapred.JobTracker;
-import org.apache.hadoop.mapred.LocalJobRunner;
+import org.apache.hadoop.mapreduce.protocol.ClientProtocolProvider;
+import org.apache.hadoop.mapreduce.server.jobtracker.JTConfig;
+  private ClientProtocolProvider clientProtocolProvider;
-    client = createClient(conf);
+    for (ClientProtocolProvider provider : ServiceLoader.load(ClientProtocolProvider.class)) {
+      ClientProtocol clientProtocol = provider.create(conf);
+      if (clientProtocol != null) {
+        clientProtocolProvider = provider;
+        client = clientProtocol;
+        break;
+      }
+    }
-    client = createRPCProxy(jobTrackAddr, conf);
-  }
-
-  private ClientProtocol createRPCProxy(InetSocketAddress addr,
-      Configuration conf) throws IOException {
-    return (ClientProtocol) RPC.getProxy(ClientProtocol.class,
-      ClientProtocol.versionID, addr, ugi, conf,
-      NetUtils.getSocketFactory(conf, ClientProtocol.class));
-  }
-
-  private ClientProtocol createClient(Configuration conf) throws IOException {
-    ClientProtocol client;
-    String tracker = conf.get("mapreduce.jobtracker.address", "local");
-    if ("local".equals(tracker)) {
-      conf.setInt("mapreduce.job.maps", 1);
-      client = new LocalJobRunner(conf);
-    } else {
-      client = createRPCProxy(JobTracker.getAddress(conf), conf);
+    for (ClientProtocolProvider provider : ServiceLoader.load(ClientProtocolProvider.class)) {
+      ClientProtocol clientProtocol = provider.create(jobTrackAddr, conf);
+      if (clientProtocol != null) {
+        clientProtocolProvider = provider;
+        client = clientProtocol;
+        break;
+      }
-    return client;
-  
+
-    if (!(client instanceof LocalJobRunner)) {
-      RPC.stopProxy(client);
-    }
+    clientProtocolProvider.close(client);
-    InetSocketAddress addr = JobTracker.getAddress(conf);
+    InetSocketAddress addr = NetUtils.createSocketAddr(
+        conf.get(JTConfig.JT_IPC_ADDRESS, "localhost:8012"));

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 INS23 INS31 INS83 INS43 INS59 INS83 INS42 MOV44 MOV43 INS8 INS8 INS8 UPD42 MOV42 INS42 MOV21 MOV21 INS70 MOV21 MOV21 INS70 MOV21 INS44 INS32 INS8 INS44 INS32 INS8 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV57 MOV60 MOV25 INS43 INS42 INS42 INS42 INS57 INS60 INS25 UPD42 UPD42 UPD42 MOV42 UPD43 MOV43 INS27 INS8 INS42 INS43 INS43 INS59 INS27 INS8 UPD42 UPD42 INS32 UPD42 UPD42 INS42 INS33 MOV21 MOV21 INS10 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS10 MOV42 INS42 INS40 INS45 INS42 UPD42 UPD42 INS42 UPD42 MOV42 MOV42 MOV42 INS7 INS7 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL45 DEL45 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL34 DEL32 DEL21 DEL8 DEL8 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL32 DEL7 DEL21 DEL8 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL57 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL8 DEL25 DEL8