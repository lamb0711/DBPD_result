Merge trunk to branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1608603 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.proto.YarnServerResourceManagerServiceProtos;
+import org.apache.hadoop.yarn.proto.YarnServerResourceManagerServiceProtos.EpochProto;
+
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.Epoch;
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.impl.pb.EpochPBImpl;
-      .newInstance(1, 0);
+      .newInstance(1, 1);
+   * |--- EPOCH_NODE
-    try {
-      new ZKAction<String>() {
-        @Override
-        public String run() throws KeeperException, InterruptedException {
+    new ZKAction<String>() {
+      @Override
+      public String run() throws KeeperException, InterruptedException {
+        try {
+        } catch (KeeperException ke) {
+          if (ke.code() == Code.NODEEXISTS) {
+            LOG.debug(rootPath + "znode already exists!");
+            return null;
+          } else {
+            throw ke;
+          }
-      }.runWithRetries();
-    } catch (KeeperException ke) {
-      if (ke.code() == Code.NODEEXISTS) {
-        LOG.debug(rootPath + "znode already exists!");
-      } else {
-        throw ke;
-    }
+    }.runWithRetries();
+  public synchronized int getAndIncrementEpoch() throws Exception {
+    String epochNodePath = getNodePath(zkRootNodePath, EPOCH_NODE);
+    int currentEpoch = 0;
+    if (existsWithRetries(epochNodePath, true) != null) {
+      // load current epoch
+      byte[] data = getDataWithRetries(epochNodePath, true);
+      Epoch epoch = new EpochPBImpl(EpochProto.parseFrom(data));
+      currentEpoch = epoch.getEpoch();
+      // increment epoch and store it
+      byte[] storeData = Epoch.newInstance(currentEpoch + 1).getProto()
+          .toByteArray();
+      setDataWithRetries(epochNodePath, storeData, -1);
+    } else {
+      // initialize epoch node with 1 for the next time.
+      byte[] storeData = Epoch.newInstance(currentEpoch + 1).getProto()
+          .toByteArray();
+      createWithRetries(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);
+    }
+    return currentEpoch;
+  }
+
+  @Override
-                attemptStateData.getMasterContainer(), credentials,
-                attemptStateData.getStartTime(),
-                attemptStateData.getState(),
-                attemptStateData.getFinalTrackingUrl(),
-                attemptStateData.getDiagnostics(),
-                attemptStateData.getFinalApplicationStatus());
+              attemptStateData.getMasterContainer(), credentials,
+              attemptStateData.getStartTime(), attemptStateData.getState(),
+              attemptStateData.getFinalTrackingUrl(),
+              attemptStateData.getDiagnostics(),
+              attemptStateData.getFinalApplicationStatus(),
+              attemptStateData.getAMContainerExitStatus());

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 MOV8 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS60 INS60 INS25 INS41 UPD34 INS66 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS34 INS32 INS33 INS60 INS60 INS21 INS60 INS21 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS9 INS5 INS59 INS43 INS59 INS7 INS5 INS59 INS32 INS5 INS59 INS32 INS39 INS85 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS38 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS8 INS42 INS42 INS9 INS43 INS32 INS42 INS42 INS32 INS42 INS34 INS32 INS42 INS54 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 MOV8 INS12 INS42 INS42 INS27 INS42 INS42 INS27 INS32 MOV44 INS8 INS42 INS34 INS42 INS34 INS42 INS42 INS25 MOV27 INS8 MOV8 MOV21 INS41 INS33 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8