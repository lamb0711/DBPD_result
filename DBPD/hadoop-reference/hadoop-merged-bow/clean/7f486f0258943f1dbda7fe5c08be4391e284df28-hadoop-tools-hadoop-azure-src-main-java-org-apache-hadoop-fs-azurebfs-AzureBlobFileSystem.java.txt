HADOOP-17016. Adding Common Counters in ABFS (#1991).

Contributed by: Mehakmeet Singh.

Change-Id: Ib84e7a42f28e064df4c6204fcce33e573360bf42

+import java.util.Map;
+import org.apache.hadoop.fs.azurebfs.services.AbfsCounters;
+import static org.apache.hadoop.fs.azurebfs.AbfsStatistic.*;
+  private AbfsCounters instrumentation;
-
+    instrumentation = new AbfsInstrumentation(uri);
+    if (instrumentation != null) {
+      sb.append(", Statistics: {").append(instrumentation.formString("{", "=",
+          "}", true));
+      sb.append("}");
+    }
-
+    statIncrement(CALL_OPEN);
+    statIncrement(CALL_CREATE);
+      statIncrement(FILES_CREATED);
+    statIncrement(CALL_CREATE_NON_RECURSIVE);
-
+    statIncrement(CALL_APPEND);
-
+    statIncrement(CALL_RENAME);
-
+    statIncrement(CALL_DELETE);
-
+    statIncrement(CALL_LIST_STATUS);
+   * Increment of an Abfs statistic.
+   *
+   * @param statistic AbfsStatistic that needs increment.
+   */
+  private void statIncrement(AbfsStatistic statistic) {
+    incrementStatistic(statistic);
+  }
+
+  /**
+   * Method for incrementing AbfsStatistic by a long value.
+   *
+   * @param statistic the Statistic to be incremented.
+   */
+  private void incrementStatistic(AbfsStatistic statistic) {
+    instrumentation.incrementCounter(statistic, 1);
+  }
+
+  /**
-
+    statIncrement(CALL_MKDIRS);
+      statIncrement(DIRECTORIES_CREATED);
+    LOG.debug("Closing Abfs: " + toString());
-
+    statIncrement(CALL_GET_FILE_STATUS);
+            if (fs.isDirectory()) {
+              statIncrement(DIRECTORIES_DELETED);
+            } else {
+              statIncrement(FILES_DELETED);
+            }
+  /**
+   * Incrementing exists() calls from superclass for statistic collection.
+   *
+   * @param f source path.
+   * @return true if the path exists.
+   * @throws IOException
+   */
+  @Override
+  public boolean exists(Path f) throws IOException {
+    statIncrement(CALL_EXIST);
+    return super.exists(f);
+  }
+
+      statIncrement(ERROR_IGNORED);
+        statIncrement(ERROR_IGNORED);
+    statIncrement(CALL_GET_DELEGATION_TOKEN);
+  @VisibleForTesting
+  Map<String, Long> getInstrumentationMap() {
+    return instrumentation.toMap();
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS74 INS42 INS8 INS42 INS42 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS43 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS21 INS41 INS21 INS42 INS43 INS43 INS43 INS41 INS7 INS27 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS32 INS66 INS42 INS66 INS42 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS48 INS32 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS32 INS32 INS32 INS45 INS32 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS45 INS45 INS9 INS42 INS42 INS21 INS32 INS42 INS42 INS25 INS32 INS8 INS8 INS42 INS42 INS21 INS21 INS32 INS32 INS42 INS42 INS42 INS42