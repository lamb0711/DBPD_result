HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.

-import java.lang.reflect.InvocationTargetException;
+import com.google.common.base.Preconditions;
+import org.apache.hadoop.fs.azurebfs.contracts.exceptions.SASTokenProviderException;
-import org.apache.hadoop.fs.azurebfs.extensions.AbfsAuthorizationException;
-import org.apache.hadoop.fs.azurebfs.extensions.AbfsAuthorizer;
+import org.apache.hadoop.fs.azurebfs.extensions.SASTokenProvider;
-  @StringConfigurationValidatorAnnotation(ConfigurationKey = ABFS_EXTERNAL_AUTHORIZATION_CLASS,
-      DefaultValue = "")
-  private String abfsExternalAuthorizationClass;
+   * Gets the Azure Storage account name corresponding to this instance of configuration.
+   * @return the Azure Storage account name
+   */
+  public String getAccountName() {
+    return accountName;
+  }
+
+  /**
-    return this.createRemoteFileSystemDuringInitialization;
+    // we do not support creating the filesystem when AuthType is SAS
+    return this.createRemoteFileSystemDuringInitialization
+        && this.getAuthType(this.accountName) != AuthType.SAS;
-  public String getAbfsExternalAuthorizationClass() {
-    return this.abfsExternalAuthorizationClass;
-  }
-
-  public AbfsAuthorizer getAbfsAuthorizer() throws IOException {
-    String authClassName = getAbfsExternalAuthorizationClass();
-    AbfsAuthorizer authorizer = null;
+  public SASTokenProvider getSASTokenProvider() throws AzureBlobFileSystemException {
+    AuthType authType = getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);
+    if (authType != AuthType.SAS) {
+      throw new SASTokenProviderException(String.format(
+        "Invalid auth type: %s is being used, expecting SAS", authType));
+    }
-      if (authClassName != null && !authClassName.isEmpty()) {
-        @SuppressWarnings("unchecked")
-        Class<AbfsAuthorizer> authClass = (Class<AbfsAuthorizer>) rawConfig.getClassByName(authClassName);
-        authorizer = authClass.getConstructor(new Class[] {Configuration.class}).newInstance(rawConfig);
-        LOG.trace("Initializing {}", authClassName);
-        authorizer.init();
-        LOG.trace("{} init complete", authClassName);
-      }
-    } catch (
-        IllegalAccessException
-        | InstantiationException
-        | ClassNotFoundException
-        | IllegalArgumentException
-        | InvocationTargetException
-        | NoSuchMethodException
-        | SecurityException
-        | AbfsAuthorizationException e) {
-      throw new IOException(e);
+      String configKey = FS_AZURE_SAS_TOKEN_PROVIDER_TYPE;
+      Class<? extends SASTokenProvider> sasTokenProviderClass =
+          getClass(configKey, null, SASTokenProvider.class);
+      Preconditions.checkArgument(sasTokenProviderClass != null,
+          String.format("The configuration value for \"%s\" is invalid.", configKey));
+
+      SASTokenProvider sasTokenProvider = ReflectionUtils
+          .newInstance(sasTokenProviderClass, rawConfig);
+      Preconditions.checkArgument(sasTokenProvider != null,
+          String.format("Failed to initialize %s", sasTokenProviderClass));
+
+      LOG.trace("Initializing {}", sasTokenProviderClass.getName());
+      sasTokenProvider.initialize(rawConfig, accountName);
+      LOG.trace("{} init complete", sasTokenProviderClass.getName());
+      return sasTokenProvider;
+    } catch (Exception e) {
+      throw new TokenAccessProviderException("Unable to load SAS token provider class: " + e, e);
-    return authorizer;

MOV26 MOV26 MOV26 MOV31 MOV31 UPD40 UPD40 UPD40 INS29 MOV43 UPD42 INS39 UPD42 UPD43 UPD42 UPD43 INS65 INS65 UPD42 UPD42 INS25 INS54 INS66 INS66 INS42 INS27 INS43 INS27 INS8 INS8 MOV12 MOV22 INS27 INS42 UPD42 INS42 INS40 INS53 INS60 MOV60 INS21 MOV60 MOV21 MOV21 MOV21 MOV21 INS41 INS32 INS40 UPD42 INS42 INS40 INS14 MOV43 INS59 INS74 INS32 INS43 INS32 INS42 INS43 INS52 INS42 INS22 INS43 INS32 INS42 INS42 MOV43 INS76 UPD42 INS32 INS42 INS42 INS27 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS27 INS32 INS32 UPD42 UPD42 INS42 INS42 INS32 UPD42 MOV42 MOV52 UPD42 MOV42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS33 INS57 UPD42 MOV42 MOV33 UPD42 MOV42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS33 INS42 UPD42 MOV42 INS45 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD43 INS27 INS42 UPD42 MOV42 INS43 UPD42 INS45 INS42 INS42 DEL42 DEL42 DEL42 DEL80 DEL42 DEL45 DEL80 DEL77 DEL83 DEL42 DEL59 DEL23 DEL39 DEL42 DEL43 DEL22 DEL43 DEL33 DEL42 DEL45 DEL79 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL32 DEL11 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL57 DEL4 DEL3 DEL32 DEL32 DEL7 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL43 DEL42 DEL43 DEL84 DEL42 DEL27 DEL32 DEL38 DEL27 DEL8 DEL25 DEL8 DEL54 DEL42 DEL41