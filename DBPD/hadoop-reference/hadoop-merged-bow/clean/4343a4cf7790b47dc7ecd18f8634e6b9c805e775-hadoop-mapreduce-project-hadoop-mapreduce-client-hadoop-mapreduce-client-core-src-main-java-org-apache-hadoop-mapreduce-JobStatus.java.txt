MAPREDUCE-6640. mapred job -history command should be able to take Job ID (rkanter)

-    * Create a job status object for a given jobid.
-    * @param jobid The jobid of the job
-    * @param setupProgress The progress made on the setup
-    * @param mapProgress The progress made on the maps
-    * @param reduceProgress The progress made on the reduces
-    * @param cleanupProgress The progress made on the cleanup
-    * @param runState The current state of the job
-    * @param jp Priority of the job.
-    * @param user userid of the person who submitted the job.
-    * @param jobName user-specified job name.
-    * @param queue queue name
-    * @param jobFile job configuration file.
-    * @param trackingUrl link to the web-ui for details of the job.
-    * @param isUber Whether job running in uber mode
-    */
-    public JobStatus(JobID jobid, float setupProgress, float mapProgress,
-                     float reduceProgress, float cleanupProgress,
-                     State runState, JobPriority jp,
-                     String user, String jobName, String queue,
-                     String jobFile, String trackingUrl, boolean isUber) {
-      this.jobid = jobid;
-      this.setupProgress = setupProgress;
-      this.mapProgress = mapProgress;
-      this.reduceProgress = reduceProgress;
-      this.cleanupProgress = cleanupProgress;
-      this.runState = runState;
-      this.user = user;
-      this.queue = queue;
-      if (jp == null) {
-        throw new IllegalArgumentException("Job Priority cannot be null.");
-      }
-      priority = jp;
-      this.jobName = jobName;
-      this.jobFile = jobFile;
-      this.trackingUrl = trackingUrl;
-      this.isUber = isUber;
+   * Create a job status object for a given jobid.
+   * @param jobid The jobid of the job
+   * @param setupProgress The progress made on the setup
+   * @param mapProgress The progress made on the maps
+   * @param reduceProgress The progress made on the reduces
+   * @param cleanupProgress The progress made on the cleanup
+   * @param runState The current state of the job
+   * @param jp Priority of the job.
+   * @param user userid of the person who submitted the job.
+   * @param jobName user-specified job name.
+   * @param queue queue name
+   * @param jobFile job configuration file.
+   * @param trackingUrl link to the web-ui for details of the job.
+   * @param isUber Whether job running in uber mode
+   */
+  public JobStatus(JobID jobid, float setupProgress, float mapProgress,
+                    float reduceProgress, float cleanupProgress,
+                    State runState, JobPriority jp,
+                    String user, String jobName, String queue,
+                    String jobFile, String trackingUrl, boolean isUber) {
+     this(jobid, setupProgress, mapProgress, reduceProgress, cleanupProgress,
+         runState, jp, user, jobName, queue, jobFile, trackingUrl, isUber, "");
+  }
+
+ /**
+  * Create a job status object for a given jobid.
+  * @param jobid The jobid of the job
+  * @param setupProgress The progress made on the setup
+  * @param mapProgress The progress made on the maps
+  * @param reduceProgress The progress made on the reduces
+  * @param cleanupProgress The progress made on the cleanup
+  * @param runState The current state of the job
+  * @param jp Priority of the job.
+  * @param user userid of the person who submitted the job.
+  * @param jobName user-specified job name.
+  * @param queue queue name
+  * @param jobFile job configuration file.
+  * @param trackingUrl link to the web-ui for details of the job.
+  * @param isUber Whether job running in uber mode
+  * @param historyFile history file
+  */
+  public JobStatus(JobID jobid, float setupProgress, float mapProgress,
+                   float reduceProgress, float cleanupProgress,
+                   State runState, JobPriority jp,
+                   String user, String jobName, String queue,
+                   String jobFile, String trackingUrl, boolean isUber,
+                   String historyFile) {
+    this.jobid = jobid;
+    this.setupProgress = setupProgress;
+    this.mapProgress = mapProgress;
+    this.reduceProgress = reduceProgress;
+    this.cleanupProgress = cleanupProgress;
+    this.runState = runState;
+    this.user = user;
+    this.queue = queue;
+    if (jp == null) {
+      throw new IllegalArgumentException("Job Priority cannot be null.");
+    priority = jp;
+    this.jobName = jobName;
+    this.jobFile = jobFile;
+    this.trackingUrl = trackingUrl;
+    this.isUber = isUber;
+    this.historyFile = historyFile;
+  }

INS31 MOV29 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS44 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS22 INS42 INS52 INS42