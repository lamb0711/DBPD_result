HDDS-476. Add Pipeline reports to make pipeline active on SCM restart.
Contributed by Mukul Kumar Singh.

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdds.protocol.proto
+        .StorageContainerDatanodeProtocolProtos.PipelineReportsProto;
+import org.apache.hadoop.hdds.scm.node.states.Node2PipelineMap;
-  private final NodeManager nodeManager;
+  private final Map<ReplicationType, PipelineManager> pipelineManagerMap;
-  private final RatisManagerImpl ratisManager;
-  private final StandaloneManagerImpl standaloneManager;
-    this.nodeManager = nodeManager;
-    this.standaloneManager =
-        new StandaloneManagerImpl(this.nodeManager, placementPolicy,
-            containerSize);
-    this.ratisManager =
-        new RatisManagerImpl(this.nodeManager, placementPolicy, containerSize,
-            conf);
+    pipelineManagerMap = new HashMap<>();
+
+    pipelineManagerMap.put(ReplicationType.STAND_ALONE,
+            new StandaloneManagerImpl(nodeManager, placementPolicy,
+            containerSize));
+    pipelineManagerMap.put(ReplicationType.RATIS,
+            new RatisManagerImpl(nodeManager, placementPolicy,
+                    containerSize, conf));
+  @VisibleForTesting
-   * Return the pipeline manager from the replication type.
-   *
-   * @param replicationType - Replication Type Enum.
-   * @return pipeline Manager.
-   * @throws IllegalArgumentException If an pipeline type gets added
-   * and this function is not modified we will throw.
-   */
-  private PipelineManager getPipelineManager(ReplicationType replicationType)
-      throws IllegalArgumentException {
-    switch (replicationType) {
-    case RATIS:
-      return this.ratisManager;
-    case STAND_ALONE:
-      return this.standaloneManager;
-    case CHAINED:
-      throw new IllegalArgumentException("Not implemented yet");
-    default:
-      throw new IllegalArgumentException("Unexpected enum found. Does not" +
-          " know how to handle " + replicationType.toString());
-    }
-
-  }
-
-  /**
-    PipelineManager manager = getPipelineManager(replicationType);
+    PipelineManager manager = pipelineManagerMap.get(replicationType);
-    PipelineManager manager = getPipelineManager(pipeline.getType());
+    PipelineManager manager = pipelineManagerMap.get(pipeline.getType());
-    manager.finalizePipeline(pipeline);
-
-    LOG.info("Finalizing pipeline. pipelineID: {}", pipeline.getId());
-    updatePipelineState(pipeline, HddsProtos.LifeCycleEvent.FINALIZE);
-    closePipelineIfNoOpenContainers(pipeline);
+    if (manager.finalizePipeline(pipeline)) {
+      LOG.info("Finalizing pipeline. pipelineID: {}", pipeline.getId());
+      updatePipelineState(pipeline, HddsProtos.LifeCycleEvent.FINALIZE);
+      closePipelineIfNoOpenContainers(pipeline);
+    }
-  public void closePipelineIfNoOpenContainers(Pipeline pipeline)
+  private void closePipelineIfNoOpenContainers(Pipeline pipeline)
-    PipelineManager manager = getPipelineManager(pipeline.getType());
+    PipelineManager manager = pipelineManagerMap.get(pipeline.getType());
-    PipelineManager manager = getPipelineManager(pipeline.getType());
+    PipelineManager manager = pipelineManagerMap.get(pipeline.getType());
-  public Set<PipelineID> getPipelineId(UUID dnId) {
+  public Set<PipelineID> getPipelineByDnID(UUID dnId) {
+      // reset the datanodes in the pipeline
+      // they will be reset on
+      pipeline.resetPipeline();
+  public void handleStaleNode(DatanodeDetails dn) {
+    Set<PipelineID> pipelineIDs = getPipelineByDnID(dn.getUuid());
+    for (PipelineID id : pipelineIDs) {
+      LOG.info("closing pipeline {}.", id);
+      eventPublisher.fireEvent(SCMEvents.PIPELINE_CLOSE, id);
+    }
+  }
+
+  void processPipelineReport(DatanodeDetails dn,
+                                    PipelineReportsProto pipelineReport) {
+    Set<PipelineID> reportedPipelines = new HashSet<>();
+    pipelineReport.getPipelineReportList().
+            forEach(p ->
+                    reportedPipelines.add(
+                            processPipelineReport(p.getPipelineID(), dn)));
+
+    //TODO: handle missing pipelines and new pipelines later
+  }
+
+  private PipelineID processPipelineReport(
+          HddsProtos.PipelineID id, DatanodeDetails dn) {
+    PipelineID pipelineID = PipelineID.getFromProtobuf(id);
+    Pipeline pipeline = pipelineMap.get(pipelineID);
+    if (pipeline != null) {
+      pipelineManagerMap.get(pipeline.getType())
+              .processPipelineReport(pipeline, dn);
+    }
+    return pipelineID;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS74 MOV21 INS78 UPD83 UPD42 INS83 INS39 INS42 INS44 INS8 INS39 INS42 INS44 INS44 INS8 MOV83 INS43 INS42 INS44 MOV44 INS8 INS43 INS43 MOV43 UPD42 INS42 INS25 INS60 MOV60 INS43 INS42 INS60 INS70 INS43 INS42 INS43 INS42 INS60 INS21 INS42 INS43 INS42 UPD43 UPD42 INS60 INS60 INS25 INS41 UPD42 MOV42 INS42 INS32 INS32 MOV32 INS8 MOV43 INS59 INS21 UPD42 MOV42 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS74 INS59 INS32 INS40 UPD42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS14 INS42 INS42 INS40 INS14 INS42 INS42 INS40 INS14 MOV21 MOV21 MOV21 INS42 INS32 INS32 INS43 INS43 UPD42 MOV42 INS32 INS43 INS42 INS21 INS21 INS43 INS43 UPD42 MOV42 INS14 INS32 INS42 INS86 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS74 MOV43 INS42 MOV42 MOV42 MOV43 INS42 MOV42 MOV42 MOV42 UPD42 INS42 UPD42 INS42 INS42 INS42 MOV32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 UPD42 MOV42 INS42 INS74 INS42 INS42 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS42 INS43 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 DEL43 DEL83 DEL83 DEL43 DEL59 DEL23 DEL83 DEL83 DEL43 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL14 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL14 DEL7 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL49 DEL52 DEL42 DEL22 DEL41 DEL42 DEL49 DEL52 DEL42 DEL22 DEL41 DEL42 DEL49 DEL42 DEL43 DEL45 DEL14 DEL53 DEL49 DEL42 DEL43 DEL45 DEL45 DEL32 DEL27 DEL14 DEL53 DEL50 DEL8 DEL31 DEL21 DEL42 DEL42 DEL32 DEL59 DEL60