Merge trunk into HDDS-48

+import org.apache.hadoop.yarn.exceptions.ResourceNotFoundException;
+  private static final String INVALID_RESOURCE_DEFINITION_PREFIX =
+          "Error reading resource config--invalid resource definition: ";
+
-   * Parses a resource config value of a form like "1024", "1024 mb",
-   * or "1024 mb, 3 vcores". If no units are given, megabytes are assumed.
-   * 
-   * @throws AllocationConfigurationException
+   * Parses a resource config value in one of three forms:
+   * <ol>
+   * <li>Percentage: &quot;50%&quot; or &quot;40% memory, 60% cpu&quot;</li>
+   * <li>New style resources: &quot;vcores=10, memory-mb=1024&quot;
+   * or &quot;vcores=60%, memory-mb=40%&quot;</li>
+   * <li>Old style resources: &quot;1024 mb, 10 vcores&quot;</li>
+   * </ol>
+   * In new style resources, any resource that is not specified will be
+   * set to {@link Long#MAX_VALUE} or 100%, as appropriate. Also, in the new
+   * style resources, units are not allowed. Units are assumed from the resource
+   * manager's settings for the resources when the value isn't a percentage.
+   *
+   * @param value the resource definition to parse
+   * @return a {@link ConfigurableResource} that represents the parsed value
+   * @throws AllocationConfigurationException if the raw value is not a valid
+   * resource definition
-  public static ConfigurableResource parseResourceConfigValue(String val)
+  public static ConfigurableResource parseResourceConfigValue(String value)
+    return parseResourceConfigValue(value, Long.MAX_VALUE);
+  }
+
+  /**
+   * Parses a resource config value in one of three forms:
+   * <ol>
+   * <li>Percentage: &quot;50%&quot; or &quot;40% memory, 60% cpu&quot;</li>
+   * <li>New style resources: &quot;vcores=10, memory-mb=1024&quot;
+   * or &quot;vcores=60%, memory-mb=40%&quot;</li>
+   * <li>Old style resources: &quot;1024 mb, 10 vcores&quot;</li>
+   * </ol>
+   * In new style resources, any resource that is not specified will be
+   * set to {@code missing} or 0%, as appropriate. Also, in the new style
+   * resources, units are not allowed. Units are assumed from the resource
+   * manager's settings for the resources when the value isn't a percentage.
+   *
+   * The {@code missing} parameter is only used in the case of new style
+   * resources without percentages. With new style resources with percentages,
+   * any missing resources will be assumed to be 100% because percentages are
+   * only used with maximum resource limits.
+   *
+   * @param value the resource definition to parse
+   * @param missing the value to use for any unspecified resources
+   * @return a {@link ConfigurableResource} that represents the parsed value
+   * @throws AllocationConfigurationException if the raw value is not a valid
+   * resource definition
+   */
+  public static ConfigurableResource parseResourceConfigValue(String value,
+      long missing) throws AllocationConfigurationException {
+
+    if (value.trim().isEmpty()) {
+      throw new AllocationConfigurationException("Error reading resource "
+          + "config--the resource string is empty.");
+    }
+
-      val = StringUtils.toLowerCase(val);
-      if (val.contains("%")) {
-        configurableResource = new ConfigurableResource(
-            getResourcePercentage(val));
+      if (value.contains("=")) {
+        configurableResource = parseNewStyleResource(value, missing);
+      } else if (value.contains("%")) {
+        configurableResource = parseOldStyleResourceAsPercentage(value);
-        int memory = findResource(val, "mb");
-        int vcores = findResource(val, "vcores");
-        configurableResource = new ConfigurableResource(
-            BuilderUtils.newResource(memory, vcores));
+        configurableResource = parseOldStyleResource(value);
-    } catch (AllocationConfigurationException ex) {
-      throw ex;
-    } catch (Exception ex) {
+    } catch (RuntimeException ex) {
+
+  private static ConfigurableResource parseNewStyleResource(String value,
+          long missing) throws AllocationConfigurationException {
+
+    final ConfigurableResource configurableResource;
+    boolean asPercent = value.contains("%");
+    if (asPercent) {
+      configurableResource = new ConfigurableResource();
+    } else {
+      configurableResource = new ConfigurableResource(missing);
+    }
+
+    String[] resources = value.split(",");
+    for (String resource : resources) {
+      String[] parts = resource.split("=");
+
+      if (parts.length != 2) {
+        throw createConfigException(value,
+                        "Every resource must be of the form: name=value.");
+      }
+
+      String resourceName = parts[0].trim();
+      String resourceValue = parts[1].trim();
+      try {
+        if (asPercent) {
+          configurableResource.setPercentage(resourceName,
+              findPercentage(resourceValue, ""));
+        } else {
+          configurableResource.setValue(resourceName,
+              Long.parseLong(resourceValue));
+        }
+      } catch (ResourceNotFoundException ex) {
+        throw createConfigException(value, "The "
+            + "resource name, \"" + resourceName + "\" was not "
+            + "recognized. Please check the value of "
+            + YarnConfiguration.RESOURCE_TYPES + " in the Resource "
+            + "Manager's configuration files.", ex);
+      } catch (NumberFormatException ex) {
+        // This only comes from Long.parseLong()
+        throw createConfigException(value, "The "
+            + "resource values must all be integers. \"" + resourceValue
+            + "\" is not an integer.", ex);
+      } catch (AllocationConfigurationException ex) {
+        // This only comes from findPercentage()
+        throw createConfigException(value, "The "
+            + "resource values must all be percentages. \""
+            + resourceValue + "\" is either not a number or does not "
+            + "include the '%' symbol.", ex);
+      }
+    }
+    return configurableResource;
+  }
+
+  private static ConfigurableResource parseOldStyleResourceAsPercentage(
+          String value) throws AllocationConfigurationException {
+    return new ConfigurableResource(
+            getResourcePercentage(StringUtils.toLowerCase(value)));
+  }
+
+  private static ConfigurableResource parseOldStyleResource(String value)
+          throws AllocationConfigurationException {
+    final String lCaseValue = StringUtils.toLowerCase(value);
+    int memory = findResource(lCaseValue, "mb");
+    int vcores = findResource(lCaseValue, "vcores");
+
+    return new ConfigurableResource(
+            BuilderUtils.newResource(memory, vcores));
+  }
+
+
-        resourcePercentage[i] = percentage/100;
+        resourcePercentage[i] = percentage;
-      resourcePercentage[0] = findPercentage(val, "memory")/100;
-      resourcePercentage[1] = findPercentage(val, "cpu")/100;
+      resourcePercentage[0] = findPercentage(val, "memory");
+      resourcePercentage[1] = findPercentage(val, "cpu");
+
-    throws AllocationConfigurationException {
+      throws AllocationConfigurationException {
-    return Double.parseDouble(matcher.group(1));
+    return Double.parseDouble(matcher.group(1)) / 100.0;
+  }
+
+  private static AllocationConfigurationException createConfigException(
+          String value, String message) {
+    return createConfigException(value, message, null);
+  }
+
+  private static AllocationConfigurationException createConfigException(
+      String value, String message, Throwable t) {
+    String msg = INVALID_RESOURCE_DEFINITION_PREFIX + value + ". " + message;
+    if (t != null) {
+      return new AllocationConfigurationException(msg, t);
+    } else {
+      return new AllocationConfigurationException(msg);
+    }

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 MOV29 MOV83 MOV83 MOV43 MOV42 MOV44 INS44 MOV43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS45 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 UPD42 INS39 INS42 MOV60 INS25 INS54 MOV41 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS25 INS60 INS70 INS41 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS60 MOV60 MOV60 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS32 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 UPD66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS66 INS32 INS8 INS8 MOV12 INS42 INS83 INS43 INS59 INS39 INS59 INS42 MOV8 INS8 INS5 INS59 INS44 INS42 INS8 INS42 INS42 INS14 INS42 INS83 INS43 INS59 MOV14 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS67 INS42 INS42 INS42 INS40 INS66 INS66 INS42 INS32 INS42 INS53 INS25 INS42 INS42 INS42 INS32 INS21 INS43 INS85 INS42 INS32 INS43 INS42 INS60 INS25 INS60 INS60 INS54 INS43 INS32 INS42 INS42 INS32 MOV32 INS34 INS42 INS42 INS42 INS33 INS42 INS42 INS27 INS42 INS33 INS41 INS41 INS42 INS42 INS42 INS42 INS14 INS32 INS8 INS25 UPD43 INS42 INS42 INS45 INS7 INS42 INS42 INS42 INS45 INS42 INS5 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS12 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS45 INS42 INS14 INS14 INS43 INS27 INS42 INS42 INS45 MOV21 MOV32 INS8 INS8 UPD42 INS42 INS14 INS43 INS85 INS42 INS32 INS40 INS34 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS25 INS44 INS8 INS44 INS8 MOV44 INS8 INS42 INS42 INS42 MOV32 MOV32 INS43 INS42 INS42 INS43 INS42 INS42 INS45 INS45 UPD42 INS21 INS21 INS43 INS42 INS42 INS42 INS42 INS45 INS32 INS2 INS42 INS2 INS42 INS42 INS8 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS53 INS42 INS42 UPD42 INS7 INS7 INS42 INS42 INS42 INS45 INS42 INS34 INS42 INS34 INS21 INS21 INS42 INS32 INS42 INS32 INS32 INS42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS27 INS42 INS45 INS45 INS40 INS45 INS45 INS27 INS42 INS45 INS27 INS42 INS45 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS45 INS45 INS45 INS45 INS45 DEL42 DEL42 DEL32 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL34 DEL27 DEL34 DEL27 DEL34 DEL27