HDFS-11491. Ozone: SCM: Add close container RPC. Contributed by Anu Engineer.

+import java.security.NoSuchAlgorithmException;
-import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
-    .Result.PUT_SMALL_FILE_ERROR;
-import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos
-    .Result.GET_SMALL_FILE_ERROR;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.Result.CLOSED_CONTAINER_IO;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.Result.GET_SMALL_FILE_ERROR;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.Result.NO_SUCH_ALGORITHM;
+import static org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.Result.PUT_SMALL_FILE_ERROR;
-          (cmdType == Type.UpdateContainer)) {
-        resp = containerProcessHandler(msg);
+          (cmdType == Type.UpdateContainer) ||
+          (cmdType == Type.CloseContainer)) {
+        return containerProcessHandler(msg);
+      case CloseContainer:
+        return handleCloseContainer(msg);
+
+  /**
+   * Dispatch calls to small file hanlder.
+   * @param msg - request
+   * @return response
+   * @throws StorageContainerException
+   */
-    Preconditions.checkNotNull(cData);
+    Preconditions.checkNotNull(cData, "Container data is null");
-    Preconditions.checkNotNull(pipeline);
+    Preconditions.checkNotNull(pipeline, "Pipeline cannot be null");
+   * closes an open container.
+   *
+   * @param msg -
+   * @return
+   * @throws IOException
+   */
+  private ContainerCommandResponseProto handleCloseContainer(
+      ContainerCommandRequestProto msg) throws IOException {
+    try {
+      if (!msg.hasCloseContainer()) {
+        LOG.debug("Malformed close Container request. trace ID: {}",
+            msg.getTraceID());
+        return ContainerUtils.malformedRequest(msg);
+      }
+      Pipeline pipeline = Pipeline.getFromProtoBuf(msg.getCloseContainer()
+          .getPipeline());
+      Preconditions.checkNotNull(pipeline, "Pipeline cannot be null");
+      if (!this.containerManager.isOpen(pipeline.getContainerName())) {
+        throw new StorageContainerException("Attempting to close a closed " +
+            "container.", CLOSED_CONTAINER_IO);
+      }
+      this.containerManager.closeContainer(pipeline.getContainerName());
+      return ContainerUtils.getContainerResponse(msg);
+    } catch (NoSuchAlgorithmException e) {
+      throw new StorageContainerException("No such Algorithm", e,
+          NO_SUCH_ALGORITHM);
+    }
+  }
+
+  /**
-
+    if (!this.containerManager.isOpen(pipeline.getContainerName())) {
+      throw new StorageContainerException("Write to closed container.",
+          CLOSED_CONTAINER_IO);
+    }
-
+    if (!this.containerManager.isOpen(pipeline.getContainerName())) {
+      throw new StorageContainerException("Write to closed container.",
+          CLOSED_CONTAINER_IO);
+    }
+    if (!this.containerManager.isOpen(pipeline.getContainerName())) {
+      throw new StorageContainerException("Write to closed container.",
+          CLOSED_CONTAINER_IO);
+    }
-
+    if (!this.containerManager.isOpen(pipeline.getContainerName())) {
+      throw new StorageContainerException("Write to closed container.",
+          CLOSED_CONTAINER_IO);
+    }
+      if (!this.containerManager.isOpen(pipeline.getContainerName())) {
+        throw new StorageContainerException("Write to closed container.",
+            CLOSED_CONTAINER_IO);
+      }

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS54 INS25 INS25 INS25 INS25 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS8 INS12 INS38 INS8 INS38 INS8 INS38 INS8 INS38 INS8 INS45 INS45 INS25 INS60 INS21 INS25 INS21 INS41 INS44 INS8 INS32 INS53 INS32 INS53 INS32 INS53 INS32 INS53 INS25 INS41 INS49 INS38 INS8 INS43 INS59 INS32 INS38 INS8 INS32 INS32 INS43 INS42 INS53 INS22 INS42 INS32 INS14 INS22 INS42 INS32 INS14 INS22 INS42 INS32 INS14 INS22 INS42 INS32 INS14 INS38 INS8 INS36 INS41 INS42 INS32 INS32 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS53 INS22 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS52 INS42 INS42 INS42 INS43 INS45 INS42 INS52 INS42 INS42 INS42 INS43 INS45 INS42 INS52 INS42 INS42 INS42 INS43 INS45 INS42 INS52 INS42 INS42 INS42 INS43 INS45 INS42 INS32 INS53 INS27 MOV32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS22 INS42 INS32 INS14 INS52 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS32 INS14 INS42 INS40 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 DEL42 DEL7 DEL21