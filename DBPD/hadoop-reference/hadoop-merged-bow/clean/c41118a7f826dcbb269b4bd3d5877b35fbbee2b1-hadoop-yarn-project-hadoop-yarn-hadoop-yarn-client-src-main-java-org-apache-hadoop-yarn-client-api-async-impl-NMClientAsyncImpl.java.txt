YARN-6978. Add updateContainer API to NMClient. (Kartheek Muthyala via asuresh)

+  @Deprecated
-      events.put(new IncreaseContainerResourceEvent(container));
+      events.put(new UpdateContainerResourceEvent(container, true));
+  public void updateContainerResourceAsync(Container container) {
+    if (!(callbackHandler instanceof AbstractCallbackHandler)) {
+      LOG.error("Callback handler does not implement container resource "
+          + "increase callback methods");
+      return;
+    }
+    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;
+    if (containers.get(container.getId()) == null) {
+      handler.onUpdateContainerResourceError(
+          container.getId(),
+          RPCUtil.getRemoteException(
+              "Container " + container.getId() +
+                  " is neither started nor scheduled to start"));
+    }
+    try {
+      events.put(new UpdateContainerResourceEvent(container, false));
+    } catch (InterruptedException e) {
+      LOG.warn("Exception when scheduling the event of increasing resource of "
+          + "Container " + container.getId());
+      handler.onUpdateContainerResourceError(container.getId(), e);
+    }
+  }
+
+  @Override
-    INCREASE_CONTAINER_RESOURCE,
+    UPDATE_CONTAINER_RESOURCE,
-  protected static class IncreaseContainerResourceEvent extends ContainerEvent {
+  protected static class UpdateContainerResourceEvent extends ContainerEvent {
+    private boolean isIncreaseEvent;
-    public IncreaseContainerResourceEvent(Container container) {
+    // UpdateContainerResourceEvent constructor takes in a
+    // flag to support callback API's calling through the deprecated
+    // increaseContainerResource
+    public UpdateContainerResourceEvent(Container container,
+        boolean isIncreaseEvent) {
-              ContainerEventType.INCREASE_CONTAINER_RESOURCE);
+          ContainerEventType.UPDATE_CONTAINER_RESOURCE);
+      this.isIncreaseEvent = isIncreaseEvent;
-                ContainerEventType.INCREASE_CONTAINER_RESOURCE,
-                new IncreaseContainerResourceTransition())
+                ContainerEventType.UPDATE_CONTAINER_RESOURCE,
+                new UpdateContainerResourceTransition())
-                    ContainerEventType.INCREASE_CONTAINER_RESOURCE))
+                    ContainerEventType.UPDATE_CONTAINER_RESOURCE))
-                    ContainerEventType.INCREASE_CONTAINER_RESOURCE));
+                    ContainerEventType.UPDATE_CONTAINER_RESOURCE));
-    protected static class IncreaseContainerResourceTransition implements
+    protected static class UpdateContainerResourceTransition implements
+
+      @SuppressWarnings("deprecation")
+        boolean isIncreaseEvent = false;
-              + "increase callback methods");
+              + "update callback methods");
-          if (!(event instanceof IncreaseContainerResourceEvent)) {
+          if (!(event instanceof UpdateContainerResourceEvent)) {
-                + "IncreaseContainerResourceEvent. Got:" + event);
+                + "UpdateContainerResourceEvent. Got:" + event);
-          IncreaseContainerResourceEvent increaseEvent =
-              (IncreaseContainerResourceEvent) event;
-          container.nmClientAsync.getClient().increaseContainerResource(
-              increaseEvent.getContainer());
+          UpdateContainerResourceEvent updateEvent =
+              (UpdateContainerResourceEvent) event;
+          container.nmClientAsync.getClient().updateContainerResource(
+              updateEvent.getContainer());
+          isIncreaseEvent = updateEvent.isIncreaseEvent;
-            handler.onContainerResourceIncreased(
-                increaseEvent.getContainerId(), increaseEvent.getContainer()
-                    .getResource());
+            //If isIncreaseEvent is set, set the appropriate callbacks
+            //for backward compatibility
+            if (isIncreaseEvent) {
+              handler.onContainerResourceIncreased(updateEvent.getContainerId(),
+                  updateEvent.getContainer().getResource());
+            } else {
+              handler.onContainerResourceUpdated(updateEvent.getContainerId(),
+                  updateEvent.getContainer().getResource());
+            }
-                + "onContainerResourceIncreased for Container "
+                + "onContainerResourceUpdated for Container "
-            handler.onIncreaseContainerResourceError(event.getContainerId(), e);
+            if (isIncreaseEvent) {
+              handler
+                  .onIncreaseContainerResourceError(event.getContainerId(), e);
+            } else {
+              handler.onUpdateContainerResourceError(event.getContainerId(), e);
+            }
-                + "onIncreaseContainerResourceError for Container "
+                + "onUpdateContainerResourceError for Container "

INS31 INS78 INS78 INS83 INS39 INS42 INS44 INS8 UPD42 INS23 INS42 INS42 INS43 INS42 INS25 INS60 INS25 INS54 UPD42 INS83 INS39 INS59 UPD42 INS44 UPD42 INS42 INS38 INS8 INS43 INS59 INS27 INS8 INS8 INS12 INS42 INS39 INS42 INS21 INS79 INS36 INS21 INS41 INS42 INS42 INS11 INS32 INS33 INS21 INS21 INS44 INS8 UPD40 INS7 INS42 INS45 INS60 INS62 INS32 INS43 INS42 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS22 INS42 UPD40 INS39 INS59 INS8 INS12 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS32 INS32 INS52 INS42 UPD40 INS42 INS9 MOV25 MOV60 MOV21 INS21 MOV54 MOV44 INS8 UPD43 INS9 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS9 INS42 INS42 INS27 INS42 INS42 INS32 INS42 UPD43 INS7 INS8 MOV54 UPD42 INS45 INS32 INS45 INS42 INS45 INS45 INS32 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS40 INS25 INS8 INS42 INS42 INS42 INS42 UPD45 UPD43 UPD42 INS42 INS8 INS8 INS25 UPD43 UPD42 INS21 INS21 INS42 MOV8 INS8 UPD40 UPD42 UPD45 INS32 INS32 MOV21 UPD43 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 UPD45 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV32 UPD42 MOV42 UPD45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL8 DEL8 DEL8 DEL12