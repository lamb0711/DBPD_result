HDFS-3102. Add CLI tool to initialize the shared-edits dir. Contributed by Aaron T. Myers.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1309580 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.protocol.NamespaceInfo;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.Lists;
+
+  
+  @VisibleForTesting
+  public static boolean initializeSharedEdits(Configuration conf) {
+    return initializeSharedEdits(conf, true);
+  }
+  
+  @VisibleForTesting
+  public static boolean initializeSharedEdits(Configuration conf,
+      boolean force) {
+    return initializeSharedEdits(conf, force, false);
+  }
+  
+  /**
+   * Format a new shared edits dir.
+   * 
+   * @param conf configuration
+   * @param force format regardless of whether or not the shared edits dir exists
+   * @param interactive prompt the user when a dir exists
+   * @return true if the command aborts, false otherwise
+   */
+  private static boolean initializeSharedEdits(Configuration conf,
+      boolean force, boolean interactive) {
+    NNStorage existingStorage = null;
+    try {
+      FSNamesystem fsns = FSNamesystem.loadFromDisk(conf,
+          FSNamesystem.getNamespaceDirs(conf),
+          FSNamesystem.getNamespaceEditsDirs(conf, false));
+      
+      existingStorage = fsns.getFSImage().getStorage();
+      
+      Collection<URI> sharedEditsDirs = FSNamesystem.getSharedEditsDirs(conf);
+      if (!confirmFormat(sharedEditsDirs, force, interactive)) {
+        return true; // aborted
+      }
+      NNStorage newSharedStorage = new NNStorage(conf,
+          Lists.<URI>newArrayList(),
+          sharedEditsDirs);
+      
+      newSharedStorage.format(new NamespaceInfo(
+          existingStorage.getNamespaceID(),
+          existingStorage.getClusterID(),
+          existingStorage.getBlockPoolID(),
+          existingStorage.getCTime(),
+          existingStorage.getDistributedUpgradeVersion()));
+    } catch (Exception e) {
+      LOG.error("Could not format shared edits dir", e);
+      return true; // aborted
+    } finally {
+      // Have to unlock storage explicitly for the case when we're running in a
+      // unit test, which runs in the same JVM as NNs.
+      if (existingStorage != null) {
+        try {
+          existingStorage.unlockAll();
+        } catch (IOException ioe) {
+          LOG.warn("Could not unlock storage directories", ioe);
+          return true; // aborted
+        }
+      }
+    }
+    return false; // did not abort
+  }
-      StartupOption.BOOTSTRAPSTANDBY.getName() + "]");
+      StartupOption.BOOTSTRAPSTANDBY.getName() + "] | [" +
+      StartupOption.INITIALIZESHAREDEDITS.getName() + "]");
+      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {
+        startOpt = StartupOption.INITIALIZESHAREDEDITS;
+        return startOpt;
-      case FORMAT:
+      case FORMAT: {
-      case GENCLUSTERID:
+      }
+      case GENCLUSTERID: {
-      case FINALIZE:
-        aborted = finalize(conf, true);
+      }
+      case FINALIZE: {
+        boolean aborted = finalize(conf, true);
-      case BOOTSTRAPSTANDBY:
+      }
+      case BOOTSTRAPSTANDBY: {
+      }
+      case INITIALIZESHAREDEDITS: {
+        boolean aborted = initializeSharedEdits(conf, false, true);
+        System.exit(aborted ? 1 : 0);
+        return null; // avoid warning
+      }
-      case CHECKPOINT:
+      case CHECKPOINT: {
+      }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS60 INS54 INS41 INS42 INS32 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS8 INS12 INS8 INS9 INS8 INS8 INS8 INS8 INS49 INS8 INS8 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS33 INS60 INS21 INS60 INS25 INS60 INS21 INS44 INS8 INS25 MOV60 MOV21 MOV41 MOV21 MOV21 MOV21 MOV41 INS60 MOV21 MOV41 MOV60 MOV60 MOV21 MOV41 INS42 INS60 INS21 INS41 MOV60 MOV21 MOV41 INS43 INS59 INS7 INS74 INS59 INS38 INS8 INS43 INS59 INS32 INS43 INS42 INS21 INS41 INS27 INS8 INS45 INS32 INS39 INS59 INS39 INS59 INS32 INS33 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS32 INS41 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS32 INS9 INS42 INS33 INS54 INS40 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS42 INS32 INS42 INS43 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS8 INS12 INS42 INS42 INS9 INS9 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS32 INS43 INS42 INS21 INS41 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS45 INS42 INS25 INS32 INS8 MOV8 INS32 INS42 INS42 INS21 INS41 INS40 INS42 INS7 INS42 INS42 INS40 DEL42 DEL7 DEL21