YARN-8738. FairScheduler should not parse negative maxResources or minResources values as positive. (Contributed by Szilard Nemeth)

-          configurableResource.setPercentage(resourceName,
-              findPercentage(resourceValue, ""));
+          double percentage = parseNewStyleResourceAsPercentage(value,
+              resourceValue);
+          configurableResource.setPercentage(resourceName, percentage);
-          configurableResource.setValue(resourceName,
-              Long.parseLong(resourceValue));
+          long parsedValue = parseNewStyleResourceAsAbsoluteValue(value,
+              resourceValue, resourceName);
+          configurableResource.setValue(resourceName, parsedValue);
-      } catch (NumberFormatException ex) {
-        // This only comes from Long.parseLong()
-        throw createConfigException(value, "The "
-            + "resource values must all be integers. \"" + resourceValue
-            + "\" is not an integer.", ex);
-      } catch (AllocationConfigurationException ex) {
-        // This only comes from findPercentage()
-        throw createConfigException(value, "The "
-            + "resource values must all be percentages. \""
-            + resourceValue + "\" is either not a number or does not "
-            + "include the '%' symbol.", ex);
+  private static double parseNewStyleResourceAsPercentage(
+      String value, String resourceValue)
+      throws AllocationConfigurationException {
+    try {
+      return findPercentage(resourceValue, "");
+    } catch (AllocationConfigurationException ex) {
+      throw createConfigException(value,
+          "The resource values must all be percentages. \""
+              + resourceValue + "\" is either not a non-negative number " +
+              "or does not include the '%' symbol.", ex);
+    }
+  }
+
+  private static long parseNewStyleResourceAsAbsoluteValue(String value,
+      String resourceValue, String resourceName)
+      throws AllocationConfigurationException {
+    final long parsedValue;
+    try {
+      parsedValue = Long.parseLong(resourceValue);
+    } catch (NumberFormatException e) {
+      throw createConfigException(value, "The "
+          + "resource values must all be integers. \"" + resourceValue
+          + "\" is not an integer.", e);
+    }
+    if (parsedValue < 0) {
+      throw new AllocationConfigurationException(
+          "Invalid value of " + resourceName +
+              ": " + parsedValue + ", value should not be negative!");
+    }
+    return parsedValue;
+  }
+
-    int memory = findResource(lCaseValue, "mb");
-    int vcores = findResource(lCaseValue, "vcores");
-
+    final int memory = parseOldStyleResourceMemory(lCaseValue);
+    final int vcores = parseOldStyleResourceVcores(lCaseValue);
+  private static int parseOldStyleResourceMemory(String lCaseValue)
+      throws AllocationConfigurationException {
+    final int memory = findResource(lCaseValue, "mb");
+
+    if (memory < 0) {
+      throw new AllocationConfigurationException(
+          "Invalid value of memory: " + memory +
+              ", value should not be negative!");
+    }
+    return memory;
+  }
+
+  private static int parseOldStyleResourceVcores(String lCaseValue)
+      throws AllocationConfigurationException {
+    final int vcores = findResource(lCaseValue, "vcores");
+
+    if (vcores < 0) {
+      throw new AllocationConfigurationException(
+          "Invalid value of vcores: " + vcores +
+              ", value should not be negative!");
+    }
+    return vcores;
+  }
+
-        Pattern.compile("((\\d+)(\\.\\d*)?)\\s*%\\s*" + units);
+        Pattern.compile("(-?(\\d+)(\\.\\d*)?)\\s*%\\s*" + units);
-    return Double.parseDouble(matcher.group(1)) / 100.0;
+    double percentage = Double.parseDouble(matcher.group(1)) / 100.0;
+
+    if (percentage < 0) {
+      throw new AllocationConfigurationException("Invalid percentage: " +
+          val + ", percentage should not be negative!");
+    }
+
+    return percentage;
-    final Pattern pattern = Pattern.compile("(\\d+)(\\.\\d*)?\\s*" + units);
+    final Pattern pattern = Pattern.compile("(-?\\d+)(\\.\\d*)?\\s*" + units);

INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS42 INS54 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS25 INS41 INS60 INS60 INS43 INS42 INS42 MOV60 INS25 INS41 INS43 INS42 INS42 MOV60 INS25 INS41 INS60 INS25 INS42 INS42 MOV8 INS12 INS42 INS42 INS42 INS83 INS39 INS59 MOV8 MOV12 INS27 INS8 INS42 INS83 INS39 INS59 INS83 INS39 INS59 INS42 INS83 INS27 INS8 INS42 INS42 INS83 INS27 INS8 INS42 MOV43 INS39 INS59 INS27 INS8 INS42 MOV43 INS41 MOV44 INS8 INS42 INS42 INS34 INS53 INS42 INS32 INS42 INS32 INS42 INS34 INS53 INS42 INS34 INS53 INS42 MOV27 INS42 INS34 INS53 INS8 MOV32 INS53 INS7 UPD42 INS14 INS42 INS42 INS42 INS42 INS14 INS14 INS14 INS25 INS32 INS42 MOV32 INS43 INS27 INS43 INS27 INS43 INS27 UPD45 INS43 INS27 UPD45 INS42 INS8 INS8 INS42 INS42 INS27 INS42 UPD42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS60 INS21 INS60 INS21 INS45 INS42 INS45 INS45 INS39 INS59 INS32 INS39 INS59 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 DEL42 DEL25 DEL8 DEL45 DEL45 DEL27 DEL42 DEL45 DEL45 DEL27 DEL32 DEL53 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32