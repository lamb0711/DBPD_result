HDFS-4503. Update computeContentSummary(..), spaceConsumedInTree(..) and diskspaceConsumed(..) in INode for snapshot.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448373 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.INode.Content.CountsMap.Key;
-  /** Wrapper of two counters for namespace consumed and diskspace consumed. */
-  static class DirCounts {
-    /** namespace count */
-    long nsCount = 0;
-    /** diskspace count */
-    long dsCount = 0;
-    
-    /** returns namespace count */
-    long getNsCount() {
-      return nsCount;
-    }
-    /** returns diskspace count */
-    long getDsCount() {
-      return dsCount;
-    }
-  }
-  
+  /**
+   * The content types such as file, directory and symlink to be computed
+   * in {@link INode#computeContentSummary(CountsMap)}.
+   */
+  public enum Content {
+    /** The number of files. */
+    FILE,
+    /** The number of directories. */
+    DIRECTORY,
+    /** The number of symlinks. */
+    SYMLINK,
+
+    /** The total of file length in bytes. */
+    LENGTH,
+    /** The total of disk space usage in bytes including replication. */
+    DISKSPACE,
+
+    /** The number of snapshots. */
+    SNAPSHOT,
+    /** The number of snapshottable directories. */
+    SNAPSHOTTABLE_DIRECTORY;
+
+    /** Content counts. */
+    public static class Counts extends EnumCounters<Content> {
+      private Counts() {
+        super(Content.values());
+      }
+    }
+
+    private static final EnumCounters.Factory<Content, Counts> FACTORY
+        = new EnumCounters.Factory<Content, Counts>() {
+      @Override
+      public Counts newInstance() {
+        return new Counts();
+      }
+    };
+
+    /** A map of counters for the current state and the snapshots. */
+    public static class CountsMap
+        extends EnumCounters.Map<CountsMap.Key, Content, Counts> {
+      /** The key type of the map. */
+      public static enum Key { CURRENT, SNAPSHOT }
+
+      private CountsMap() {
+        super(FACTORY);
+      }
+    }
+  }
+
-    long[] a = computeContentSummary(new long[]{0,0,0,0});
-    return new ContentSummary(a[0], a[1], a[2], getNsQuota(), 
-                              a[3], getDsQuota());
+    final Content.Counts current = computeContentSummary(
+        new Content.CountsMap()).getCounts(Key.CURRENT);
+    return new ContentSummary(current.get(Content.LENGTH),
+        current.get(Content.FILE) + current.get(Content.SYMLINK),
+        current.get(Content.DIRECTORY), getNsQuota(),
+        current.get(Content.DISKSPACE), getDsQuota());
+
-   * @return an array of three longs. 
-   * 0: length, 1: file count, 2: directory count 3: disk space
+   * Count subtree content summary with a {@link Content.CountsMap}.
+   *
+   * @param countsMap The subtree counts for returning.
+   * @return The same objects as the counts parameter.
-  abstract long[] computeContentSummary(long[] summary);
+  public abstract Content.CountsMap computeContentSummary(
+      Content.CountsMap countsMap);
+
+  /**
+   * Count subtree content summary with a {@link Content.Counts}.
+   *
+   * @param counts The subtree counts for returning.
+   * @return The same objects as the counts parameter.
+   */
+  public abstract Content.Counts computeContentSummary(Content.Counts counts);
-  boolean isQuotaSet() {
+  final boolean isQuotaSet() {
-   * Adds total number of names and total disk space taken under 
-   * this tree to counts.
-   * Returns updated counts object.
+   * Count subtree {@link Quota#NAMESPACE} and {@link Quota#DISKSPACE} usages.
-  abstract DirCounts spaceConsumedInTree(DirCounts counts);
+  final Quota.Counts computeQuotaUsage() {
+    return computeQuotaUsage(new Quota.Counts());
+  }
+
+  /**
+   * Count subtree {@link Quota#NAMESPACE} and {@link Quota#DISKSPACE} usages.
+   * 
+   * @param counts The subtree counts for returning.
+   * @return The same objects as the counts parameter.
+   */
+  abstract Quota.Counts computeQuotaUsage(Quota.Counts counts);

INS26 INS40 INS71 INS31 INS31 INS29 INS83 INS42 INS72 INS72 INS72 INS72 INS72 INS72 INS72 INS55 INS23 INS55 INS83 INS43 INS29 INS83 INS83 INS43 INS42 INS44 INS83 INS29 INS83 INS43 INS42 INS8 UPD43 UPD42 MOV65 INS29 INS42 INS29 INS42 INS29 INS42 INS29 INS42 INS29 INS42 INS29 INS42 INS29 INS42 INS29 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS42 INS74 INS71 INS31 INS65 INS65 INS40 INS43 UPD42 INS65 INS65 INS65 INS40 INS43 INS42 INS65 INS40 INS41 INS65 INS65 INS40 UPD43 UPD66 INS66 INS65 INS66 INS65 INS65 MOV65 INS65 MOV65 INS65 INS65 MOV65 INS43 INS43 INS83 INS42 INS8 INS43 INS43 INS43 INS42 INS14 MOV65 INS43 INS43 INS43 INS43 INS29 INS83 INS83 INS42 INS72 INS72 INS83 INS42 MOV8 INS83 INS43 INS66 INS65 INS66 INS42 INS66 UPD66 INS40 INS66 INS65 INS66 INS42 INS66 INS66 INS40 INS66 INS65 INS66 INS65 INS66 INS32 UPD66 INS65 UPD66 INS65 UPD66 INS42 INS66 INS66 INS40 INS68 INS66 INS66 UPD66 INS66 UPD66 INS66 INS66 UPD66 INS42 INS42 INS46 INS40 INS42 INS42 INS74 INS1 UPD66 INS40 INS40 INS42 INS42 INS65 INS42 INS42 INS46 INS40 UPD42 INS32 INS32 INS27 INS32 INS32 INS40 INS40 INS67 INS67 INS42 INS14 INS67 INS67 INS42 INS42 INS69 INS32 INS43 INS43 INS43 INS31 INS66 INS42 INS32 INS42 INS40 INS42 INS42 INS40 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS42 INS78 INS83 INS43 INS42 MOV8 MOV42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS43 INS14 INS40 INS43 INS42 DEL29 DEL83 DEL42 DEL29 DEL39 DEL42 DEL34 DEL59 DEL23 DEL29 DEL39 DEL42 DEL34 DEL59 DEL23 DEL29 DEL39 DEL42 DEL31 DEL29 DEL39 DEL42 DEL31 DEL55 DEL42 DEL42 DEL41 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL34 DEL34 DEL34 DEL34 DEL4 DEL3 DEL32 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL66 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL42