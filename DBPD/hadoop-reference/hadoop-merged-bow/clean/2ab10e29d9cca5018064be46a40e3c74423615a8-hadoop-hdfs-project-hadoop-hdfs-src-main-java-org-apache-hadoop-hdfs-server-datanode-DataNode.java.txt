HDFS-2246. Enable reading a block directly from local file system for a client on the same node as the block file.  Contributed by Andrew Purtell, Suresh Srinivas and Jitendra Nath Pandey


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1204792 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.security.token.block.BlockTokenSecretManager.AccessMode;
+import org.apache.hadoop.hdfs.protocol.BlockLocalPathInfo;
+import org.apache.hadoop.security.AccessControlException;
+import org.apache.hadoop.security.UserGroupInformation.AuthenticationMethod;
+  private final String userWithLocalPathAccess;
+
+    this.userWithLocalPathAccess = conf
+        .get(DFSConfigKeys.DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY);
+  
+  /** Ensure the authentication method is kerberos */
+  private void checkKerberosAuthMethod(String msg) throws IOException {
+    // User invoking the call must be same as the datanode user
+    if (!UserGroupInformation.isSecurityEnabled()) {
+      return;
+    }
+    if (UserGroupInformation.getCurrentUser().getAuthenticationMethod() != 
+        AuthenticationMethod.KERBEROS) {
+      throw new AccessControlException("Error in " + msg
+          + "Only kerberos based authentication is allowed.");
+    }
+  }
+  
+  private void checkBlockLocalPathAccess() throws IOException {
+    checkKerberosAuthMethod("getBlockLocalPathInfo()");
+    String currentUser = UserGroupInformation.getCurrentUser().getShortUserName();
+    if (!currentUser.equals(this.userWithLocalPathAccess)) {
+      throw new AccessControlException(
+          "Can't continue with getBlockLocalPathInfo() "
+              + "authorization. The user " + currentUser
+              + " is not allowed to call getBlockLocalPathInfo");
+    }
+  }
+
+  @Override
+  public BlockLocalPathInfo getBlockLocalPathInfo(ExtendedBlock block,
+      Token<BlockTokenIdentifier> token) throws IOException {
+    checkBlockLocalPathAccess();
+    checkBlockToken(block, token, BlockTokenSecretManager.AccessMode.READ);
+    BlockLocalPathInfo info = data.getBlockLocalPathInfo(block);
+    if (LOG.isDebugEnabled()) {
+      if (info != null) {
+        if (LOG.isTraceEnabled()) {
+          LOG.trace("getBlockLocalPathInfo successful block=" + block
+              + " blockfile " + info.getBlockPath() + " metafile "
+              + info.getMetaPath());
+        }
+      } else {
+        if (LOG.isTraceEnabled()) {
+          LOG.trace("getBlockLocalPathInfo for block=" + block
+              + " returning null");
+        }
+      }
+    }
+    metrics.incrBlocksGetLocalPathInfo();
+    return info;
+  }
+  
+  private void checkBlockToken(ExtendedBlock block, Token<BlockTokenIdentifier> token,
+      AccessMode accessMode) throws IOException {
+    if (isBlockTokenEnabled && UserGroupInformation.isSecurityEnabled()) {
+      BlockTokenIdentifier id = new BlockTokenIdentifier();
+      ByteArrayInputStream buf = new ByteArrayInputStream(token.getIdentifier());
+      DataInputStream in = new DataInputStream(buf);
+      id.readFields(in);
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Got: " + id.toString());
+      }
+      blockPoolTokenSecretManager.checkAccess(id, null, block, accessMode);
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS21 INS65 INS43 INS42 INS42 INS25 INS25 INS42 INS21 INS60 INS25 INS42 INS42 INS43 INS42 INS74 INS42 INS42 INS21 INS21 INS60 INS25 INS21 INS41 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS25 INS7 INS66 INS42 INS38 INS8 INS27 INS8 INS32 INS43 INS59 INS38 INS8 INS42 INS43 INS43 INS32 INS32 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS43 INS43 INS42 INS27 INS8 INS22 INS32 INS32 INS41 INS32 INS40 INS53 INS42 INS45 INS42 INS42 INS32 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS60 INS60 INS21 INS25 INS21 INS52 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS14 INS32 INS42 INS42 INS42 INS22 INS14 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS8 INS32 INS42 INS42 INS43 INS27 INS42 INS42 INS52 INS42 INS43 INS27 INS42 INS33 INS25 INS25 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS27 INS42 INS45 INS32 INS8 INS32 INS8 INS43 INS43 INS32 INS43 INS42 INS32 INS45 INS45 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS45 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS42