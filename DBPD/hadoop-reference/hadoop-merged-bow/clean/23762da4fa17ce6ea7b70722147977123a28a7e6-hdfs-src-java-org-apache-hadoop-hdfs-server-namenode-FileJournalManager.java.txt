HDFS-2225. Refactor file management so it's not in classes which should be generic. Contributed by Ivan Kelly.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154029 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Comparator;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
-import org.apache.hadoop.hdfs.server.namenode.FSImageTransactionalStorageInspector.FoundEditLog;
+import org.apache.hadoop.hdfs.server.namenode.FSEditLogLoader.EditLogValidation;
+import org.apache.hadoop.hdfs.server.namenode.NNStorage.NameNodeFile;
+import com.google.common.collect.Lists;
+import com.google.common.collect.ComparisonChain;
+  private static final Pattern EDITS_REGEX = Pattern.compile(
+    NameNodeFile.EDITS.getName() + "_(\\d+)-(\\d+)");
+  private static final Pattern EDITS_INPROGRESS_REGEX = Pattern.compile(
+    NameNodeFile.EDITS_INPROGRESS.getName() + "_(\\d+)");
+
+  @VisibleForTesting
+  StoragePurger purger
+    = new NNStorageRetentionManager.DeletionStoragePurger();
+
-  public void purgeLogsOlderThan(long minTxIdToKeep, StoragePurger purger)
+  public void purgeLogsOlderThan(long minTxIdToKeep)
-    List<FoundEditLog> editLogs = 
-      FSImageTransactionalStorageInspector.matchEditLogs(files);
-    for (FoundEditLog log : editLogs) {
-      if (log.getStartTxId() < minTxIdToKeep &&
+    List<EditLogFile> editLogs = 
+      FileJournalManager.matchEditLogs(files);
+    for (EditLogFile log : editLogs) {
+      if (log.getFirstTxId() < minTxIdToKeep &&
+  static List<EditLogFile> matchEditLogs(File[] filesInStorage) {
+    List<EditLogFile> ret = Lists.newArrayList();
+    for (File f : filesInStorage) {
+      String name = f.getName();
+      // Check for edits
+      Matcher editsMatch = EDITS_REGEX.matcher(name);
+      if (editsMatch.matches()) {
+        try {
+          long startTxId = Long.valueOf(editsMatch.group(1));
+          long endTxId = Long.valueOf(editsMatch.group(2));
+          ret.add(new EditLogFile(f, startTxId, endTxId));
+        } catch (NumberFormatException nfe) {
+          LOG.error("Edits file " + f + " has improperly formatted " +
+                    "transaction ID");
+          // skip
+        }          
+      }
+      
+      // Check for in-progress edits
+      Matcher inProgressEditsMatch = EDITS_INPROGRESS_REGEX.matcher(name);
+      if (inProgressEditsMatch.matches()) {
+        try {
+          long startTxId = Long.valueOf(inProgressEditsMatch.group(1));
+          ret.add(
+            new EditLogFile(f, startTxId, EditLogFile.UNKNOWN_END));
+        } catch (NumberFormatException nfe) {
+          LOG.error("In-progress edits file " + f + " has improperly " +
+                    "formatted transaction ID");
+          // skip
+        }          
+      }
+    }
+    return ret;
+  }
+
+  /**
+   * Record of an edit log that has been located and had its filename parsed.
+   */
+  static class EditLogFile {
+    private File file;
+    private final long firstTxId;
+    private long lastTxId;
+    
+    private EditLogValidation cachedValidation = null;
+    private boolean isCorrupt = false;
+    
+    static final long UNKNOWN_END = -1;
+    
+    final static Comparator<EditLogFile> COMPARE_BY_START_TXID 
+      = new Comparator<EditLogFile>() {
+      public int compare(EditLogFile a, EditLogFile b) {
+        return ComparisonChain.start()
+        .compare(a.getFirstTxId(), b.getFirstTxId())
+        .compare(a.getLastTxId(), b.getLastTxId())
+        .result();
+      }
+    };
+
+    EditLogFile(File file,
+        long firstTxId, long lastTxId) {
+      assert lastTxId == UNKNOWN_END || lastTxId >= firstTxId;
+      assert firstTxId > 0;
+      assert file != null;
+      
+      this.firstTxId = firstTxId;
+      this.lastTxId = lastTxId;
+      this.file = file;
+    }
+    
+    public void finalizeLog() throws IOException {
+      long numTransactions = validateLog().numTransactions;
+      long lastTxId = firstTxId + numTransactions - 1;
+      File dst = new File(file.getParentFile(),
+          NNStorage.getFinalizedEditsFileName(firstTxId, lastTxId));
+      LOG.info("Finalizing edits log " + file + " by renaming to "
+          + dst.getName());
+      if (!file.renameTo(dst)) {
+        throw new IOException("Couldn't finalize log " +
+            file + " to " + dst);
+      }
+      this.lastTxId = lastTxId;
+      file = dst;
+    }
+
+    long getFirstTxId() {
+      return firstTxId;
+    }
+    
+    long getLastTxId() {
+      return lastTxId;
+    }
+
+    EditLogValidation validateLog() throws IOException {
+      if (cachedValidation == null) {
+        cachedValidation = EditLogFileInputStream.validateEditLog(file);
+      }
+      return cachedValidation;
+    }
+
+    boolean isInProgress() {
+      return (lastTxId == UNKNOWN_END);
+    }
+
+    File getFile() {
+      return file;
+    }
+    
+    void markCorrupt() {
+      isCorrupt = true;
+    }
+    
+    boolean isCorrupt() {
+      return isCorrupt;
+    }
+
+    void moveAsideCorruptFile() throws IOException {
+      assert isCorrupt;
+    
+      File src = file;
+      File dst = new File(src.getParent(), src.getName() + ".corrupt");
+      boolean success = src.renameTo(dst);
+      if (!success) {
+        throw new IOException(
+          "Couldn't rename corrupt log " + src + " to " + dst);
+      }
+      file = dst;
+    }
+    
+    @Override
+    public String toString() {
+      return String.format("EditLogFile(file=%s,first=%019d,last=%019d,"
+                           +"inProgress=%b,corrupt=%b)", file.toString(),
+                           firstTxId, lastTxId, isInProgress(), isCorrupt);
+    }
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS78 MOV43 INS59 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS43 INS5 INS42 INS60 INS70 INS41 INS65 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS74 INS59 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS43 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS43 INS42 INS43 INS8 INS39 INS42 INS8 INS43 INS42 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS27 INS42 INS42 INS27 INS43 UPD74 INS42 INS42 INS43 INS85 INS74 INS59 INS44 INS42 INS8 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS9 INS42 INS38 INS43 INS43 INS42 INS14 INS43 INS42 INS39 INS42 INS39 INS42 INS6 INS6 INS6 INS21 INS21 INS21 INS42 INS60 INS60 INS60 INS21 INS25 INS21 INS21 INS41 INS41 INS42 INS42 INS25 INS41 INS41 INS42 INS41 INS21 INS41 INS42 INS6 INS60 INS60 INS60 INS25 INS21 INS42 INS42 INS41 INS32 INS45 INS32 INS45 INS40 UPD43 UPD43 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS60 INS25 INS60 INS25 INS34 INS42 INS42 INS74 INS1 INS42 INS27 INS27 INS27 INS7 INS7 INS7 INS39 INS59 INS39 INS59 INS43 INS59 INS32 INS38 INS8 INS7 INS7 INS42 INS42 INS27 INS8 INS42 INS36 INS42 INS7 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS38 INS8 INS7 INS32 INS40 INS42 INS40 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS43 INS31 INS27 INS27 INS42 INS34 INS42 INS33 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS22 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS27 INS32 INS53 INS22 INS42 INS42 INS42 INS42 INS33 INS21 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS53 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS54 INS42 INS42 INS32 INS42 INS42 INS54 INS42 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS27 INS34 INS43 INS32 INS32 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS14 INS52 INS42 INS7 INS42 INS42 INS43 INS32 INS27 INS42 INS42 INS42 INS14 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS8 INS12 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS32 INS42 INS42 INS42 INS32 INS45 INS43 INS27 UPD42 INS60 INS60 INS21 INS44 INS8 INS60 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS39 INS59 INS39 INS59 INS32 INS43 INS42 INS21 INS39 INS59 INS32 INS43 INS42 INS21 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS43 INS42 INS42 INS40 INS42 INS42 INS27 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS34 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL44