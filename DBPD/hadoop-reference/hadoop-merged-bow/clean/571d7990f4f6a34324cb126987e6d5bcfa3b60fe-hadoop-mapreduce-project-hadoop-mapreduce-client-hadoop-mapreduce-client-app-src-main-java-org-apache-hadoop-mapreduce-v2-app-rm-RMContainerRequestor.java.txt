Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.InetAddress;
+import java.net.UnknownHostException;
-  //Value->ResourceReqeust
+  //Value->ResourceRequest
+    
-      this.attemptID = event.getAttemptID();
-      this.capability = event.getCapability();
-      this.hosts = event.getHosts();
-      this.racks = event.getRacks();
-      //this.earlierAttemptFailed = event.getEarlierAttemptFailed();
+      this(event.getAttemptID(), event.getCapability(), event.getHosts(),
+          event.getRacks(), priority);
+    }
+    
+    public ContainerRequest(TaskAttemptId attemptID,
+        Resource capability, String[] hosts, String[] racks, 
+        Priority priority) {
+      this.attemptID = attemptID;
+      this.capability = capability;
+      this.hosts = hosts;
+      this.racks = racks;
+    
-        //remove from host
-        Map<Resource, ResourceRequest> reqMap = remoteRequests.remove(hostName);
+        //remove from host if no pending allocations
+        boolean foundAll = true;
+        Map<Resource, ResourceRequest> reqMap = remoteRequests.get(hostName);
-            ask.remove(req);
+            if (!ask.remove(req)) {
+              foundAll = false;
+              // if ask already sent to RM, we can try and overwrite it if possible.
+              // send a new ask to RM with numContainers
+              // specified for the blacklisted host to be 0.
+              ResourceRequest zeroedRequest = BuilderUtils.newResourceRequest(req);
+              zeroedRequest.setNumContainers(0);
+              // to be sent to RM on next heartbeat
+              ask.add(zeroedRequest);
+            }
+          }
+          // if all requests were still in ask queue
+          // we can remove this request
+          if (foundAll) {
+            remoteRequests.remove(hostName);
-        //TODO: remove from rack
+        // TODO handling of rack blacklisting
+        // Removing from rack should be dependent on no. of failures within the rack 
+        // Blacklisting a rack on the basis of a single node's blacklisting 
+        // may be overly aggressive. 
+        // Node failures could be co-related with other failures on the same rack 
+        // but we probably need a better approach at trying to decide how and when 
+        // to blacklist a rack
-      addResourceRequest(req.priority, host, req.capability);
+      if (!isNodeBlacklisted(host)) {
+        addResourceRequest(req.priority, host, req.capability);
+      }      
+    if (reqMap == null) {
+      // as we modify the resource requests by filtering out blacklisted hosts 
+      // when they are added, this value may be null when being 
+      // decremented
+      LOG.debug("Not decrementing resource as " + resourceName
+          + " is not present in request table");
+      return;
+    }
+  protected boolean isNodeBlacklisted(String hostname) {
+    if (!nodeBlacklistingEnabled) {
+      return false;
+    }
+    return blacklistedNodes.contains(hostname);
+  }
+  
+  protected ContainerRequest getFilteredContainerRequest(ContainerRequest orig) {
+    ArrayList<String> newHosts = new ArrayList<String>();
+    for (String host : orig.hosts) {
+      if (!isNodeBlacklisted(host)) {
+        newHosts.add(host);      
+      }
+    }
+    String[] hosts = newHosts.toArray(new String[newHosts.size()]);
+    ContainerRequest newReq = new ContainerRequest(orig.attemptID, orig.capability,
+        hosts, orig.racks, orig.priority); 
+    return newReq;
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS8 INS83 INS42 INS44 INS44 INS44 INS44 INS44 MOV8 INS25 INS43 INS42 INS25 INS41 INS42 INS43 INS42 INS60 INS70 INS60 INS60 INS41 INS17 INS43 INS42 INS43 INS42 INS5 INS42 INS5 INS42 INS43 INS42 INS8 INS27 INS8 INS42 INS38 INS8 INS32 INS42 INS74 INS59 INS44 INS40 INS8 INS5 INS59 INS43 INS59 INS42 MOV32 MOV32 MOV32 MOV32 INS42 INS42 INS42 INS43 INS85 INS43 INS85 INS42 INS25 INS42 INS33 INS21 INS41 INS42 INS41 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS43 INS85 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS38 MOV8 INS32 INS9 INS42 INS42 INS74 INS42 INS38 INS8 INS42 INS42 INS42 INS3 INS43 INS40 INS40 INS42 INS40 INS40 INS60 INS32 INS42 INS42 INS27 INS43 INS43 INS32 INS21 INS5 INS32 INS42 INS39 INS59 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS42 INS9 INS32 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS42 INS8 INS25 INS21 INS38 INS8 MOV32 MOV32 MOV21 INS60 INS21 INS21 INS7 INS43 INS59 INS32 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 DEL8