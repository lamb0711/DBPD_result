YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).

+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.security.AMRMTokenIdentifier;
+import org.apache.hadoop.yarn.server.federation.utils.FederationRegistryClient;
+import org.apache.hadoop.yarn.util.ConverterUtils;
+  private FederationRegistryClient registryClient;
+
+    // Add all app tokens for Yarn Registry access
+    if (this.registryClient != null && appContext.getCredentials() != null) {
+      this.appOwner.addCredentials(appContext.getCredentials());
+    }
+
+    if (appContext.getRegistryClient() != null) {
+      this.registryClient = new FederationRegistryClient(conf,
+          appContext.getRegistryClient(), this.appOwner);
+    }
+    if (this.amRegistrationResponse
+        .getContainersFromPreviousAttempts() != null) {
+      cacheAllocatedContainers(
+          this.amRegistrationResponse.getContainersFromPreviousAttempts(),
+          this.homeSubClusterId);
+    }
+
+    ApplicationId appId =
+        getApplicationContext().getApplicationAttemptId().getApplicationId();
+    reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);
-      LOG.warn("Received null queue for application "
-          + getApplicationContext().getApplicationAttemptId().getApplicationId()
-          + " from home sub-cluster. Will use default queue name "
+      LOG.warn("Received null queue for application " + appId
+          + " from home subcluster. Will use default queue name "
-      LOG.info("Application "
-          + getApplicationContext().getApplicationAttemptId().getApplicationId()
-          + " belongs to queue " + queue);
+      LOG.info("Application " + appId + " belongs to queue " + queue);
-          getApplicationContext().getApplicationAttemptId());
+          getApplicationContext().getApplicationAttemptId().getApplicationId());
-            this.amRegistrationRequest,
-            getApplicationContext().getApplicationAttemptId());
+            this.amRegistrationRequest, getApplicationContext()
+                .getApplicationAttemptId().getApplicationId());
+    } else {
+      // Clean up UAMs only when the app finishes successfully, so that no more
+      // attempt will be launched.
+      this.uamPool.stop();
+      if (this.registryClient != null) {
+        this.registryClient.removeAppFromRegistry(getApplicationContext()
+            .getApplicationAttemptId().getApplicationId());
+      }
-    if (this.uamPool != null) {
-      this.uamPool.stop();
-    }
+    // Do not stop uamPool service and kill UAMs here because of possible second
+    // app attempt
+   * Only for unit test cleanup.
+   */
+  @VisibleForTesting
+  protected void cleanupRegistry() {
+    if (this.registryClient != null) {
+      this.registryClient.cleanAllApplications();
+    }
+  }
+
+  /**
+  private void mergeRegisterResponse(
+      RegisterApplicationMasterResponse homeResponse,
+      RegisterApplicationMasterResponse otherResponse) {
+
+    if (!isNullOrEmpty(otherResponse.getContainersFromPreviousAttempts())) {
+      if (!isNullOrEmpty(homeResponse.getContainersFromPreviousAttempts())) {
+        homeResponse.getContainersFromPreviousAttempts()
+            .addAll(otherResponse.getContainersFromPreviousAttempts());
+      } else {
+        homeResponse.setContainersFromPreviousAttempts(
+            otherResponse.getContainersFromPreviousAttempts());
+      }
+    }
+
+    if (!isNullOrEmpty(otherResponse.getNMTokensFromPreviousAttempts())) {
+      if (!isNullOrEmpty(homeResponse.getNMTokensFromPreviousAttempts())) {
+        homeResponse.getNMTokensFromPreviousAttempts()
+            .addAll(otherResponse.getNMTokensFromPreviousAttempts());
+      } else {
+        homeResponse.setNMTokensFromPreviousAttempts(
+            otherResponse.getNMTokensFromPreviousAttempts());
+      }
+    }
+  }
+
+  /**
+   * Try re-attach to all existing and running UAMs in secondary sub-clusters
+   * launched by previous application attempts if any. All running containers in
+   * the UAMs will be combined into the registerResponse. For the first attempt,
+   * the registry will be empty for this application and thus no-op here.
+   */
+  protected void reAttachUAMAndMergeRegisterResponse(
+      RegisterApplicationMasterResponse homeResponse,
+      final ApplicationId appId) {
+
+    if (this.registryClient == null) {
+      // Both AMRMProxy HA and NM work preserving restart is not enabled
+      LOG.warn("registryClient is null, skip attaching existing UAM if any");
+      return;
+    }
+
+    // Load existing running UAMs from the previous attempts from
+    // registry, if any
+    Map<String, Token<AMRMTokenIdentifier>> uamMap =
+        this.registryClient.loadStateFromRegistry(appId);
+    if (uamMap.size() == 0) {
+      LOG.info("No existing UAM for application {} found in Yarn Registry",
+          appId);
+      return;
+    }
+    LOG.info("Found {} existing UAMs for application {} in Yarn Registry. "
+        + "Reattaching in parallel", uamMap.size(), appId);
+
+    ExecutorCompletionService<RegisterApplicationMasterResponse>
+        completionService = new ExecutorCompletionService<>(threadpool);
+
+    for (Entry<String, Token<AMRMTokenIdentifier>> entry : uamMap.entrySet()) {
+      final SubClusterId subClusterId =
+          SubClusterId.newInstance(entry.getKey());
+      final Token<AMRMTokenIdentifier> amrmToken = entry.getValue();
+
+      completionService
+          .submit(new Callable<RegisterApplicationMasterResponse>() {
+            @Override
+            public RegisterApplicationMasterResponse call() throws Exception {
+              RegisterApplicationMasterResponse response = null;
+              try {
+                // Create a config loaded with federation on and subclusterId
+                // for each UAM
+                YarnConfiguration config = new YarnConfiguration(getConf());
+                FederationProxyProviderUtil.updateConfForFederation(config,
+                    subClusterId.getId());
+
+                uamPool.reAttachUAM(subClusterId.getId(), config, appId,
+                    amRegistrationResponse.getQueue(),
+                    getApplicationContext().getUser(), homeSubClusterId.getId(),
+                    amrmToken);
+
+                response = uamPool.registerApplicationMaster(
+                    subClusterId.getId(), amRegistrationRequest);
+
+                if (response != null
+                    && response.getContainersFromPreviousAttempts() != null) {
+                  cacheAllocatedContainers(
+                      response.getContainersFromPreviousAttempts(),
+                      subClusterId);
+                }
+                LOG.info("UAM {} reattached for {}", subClusterId, appId);
+              } catch (Throwable e) {
+                LOG.error(
+                    "Reattaching UAM " + subClusterId + " failed for " + appId,
+                    e);
+              }
+              return response;
+            }
+          });
+    }
+
+    // Wait for the re-attach responses
+    for (int i = 0; i < uamMap.size(); i++) {
+      try {
+        Future<RegisterApplicationMasterResponse> future =
+            completionService.take();
+        RegisterApplicationMasterResponse registerResponse = future.get();
+        if (registerResponse != null) {
+          LOG.info("Merging register response for {}", appId);
+          mergeRegisterResponse(homeResponse, registerResponse);
+        }
+      } catch (Exception e) {
+        LOG.warn("Reattaching UAM failed for ApplicationId: " + appId, e);
+      }
+    }
+  }
+
+              // Save the new AMRMToken for the UAM in registry if present
+              if (response.getAMRMToken() != null) {
+                Token<AMRMTokenIdentifier> newToken = ConverterUtils
+                    .convertFromYarn(response.getAMRMToken(), (Text) null);
+                // Update the token in registry
+                if (registryClient != null) {
+                  registryClient
+                      .writeAMRMTokenForUAM(
+                          getApplicationContext().getApplicationAttemptId()
+                              .getApplicationId(),
+                          subClusterId.getId(), newToken);
+                }
+              }
+
+                Token<AMRMTokenIdentifier> token = null;
-                  uamResponse = uamPool.createAndRegisterNewUAM(subClusterId,
-                      registerRequest, config,
+                  token = uamPool.launchUAM(subClusterId, config,
-                      homeSubClusterId.toString());
+                      homeSubClusterId.toString(), registryClient != null);
+
+                  uamResponse = uamPool.registerApplicationMaster(subClusterId,
+                      registerRequest);
-                    SubClusterId.newInstance(subClusterId));
+                    SubClusterId.newInstance(subClusterId), token);
+
+            if (registryClient != null) {
+              registryClient.writeAMRMTokenForUAM(
+                  getApplicationContext().getApplicationAttemptId()
+                      .getApplicationId(),
+                  uamResponse.getSubClusterId().getId(),
+                  uamResponse.getUamToken());
+            }
+    private Token<AMRMTokenIdentifier> uamToken;
-        RegisterApplicationMasterResponse response, SubClusterId subClusterId) {
+        RegisterApplicationMasterResponse response, SubClusterId subClusterId,
+        Token<AMRMTokenIdentifier> uamToken) {
+      this.uamToken = uamToken;
+
+    public Token<AMRMTokenIdentifier> getUamToken() {
+      return uamToken;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS29 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS23 INS31 INS42 INS42 INS25 INS25 INS25 INS60 INS21 INS65 INS42 INS25 INS43 INS42 INS43 INS42 INS25 INS25 INS65 INS43 INS42 INS83 INS43 INS42 INS25 INS60 INS25 INS21 INS60 INS70 INS24 INS83 INS74 INS59 INS44 INS83 INS74 INS42 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS43 INS59 INS32 INS8 INS8 INS66 INS27 INS8 INS42 INS42 INS38 INS8 INS38 INS8 INS66 INS66 INS66 INS66 INS42 INS42 INS27 INS8 INS74 INS59 INS27 INS8 INS32 INS74 INS59 INS44 INS32 INS8 INS58 INS27 INS37 INS8 INS43 INS43 INS42 INS74 INS42 INS21 INS43 INS43 INS41 INS27 INS27 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 MOV32 INS42 INS22 INS42 INS21 MOV21 INS25 INS22 INS33 INS21 INS32 INS25 INS32 INS25 INS22 INS33 INS21 INS41 INS43 INS43 INS74 INS42 INS32 INS32 INS34 INS21 INS41 INS42 INS42 INS27 INS32 INS42 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS60 INS60 INS21 INS39 INS59 INS42 INS32 INS42 INS54 INS42 INS42 INS43 INS43 INS7 INS42 INS42 INS42 INS22 INS33 INS32 INS33 INS32 INS42 INS42 INS7 INS22 INS42 INS32 INS52 INS42 INS32 INS32 INS27 MOV8 INS52 INS42 INS32 INS42 INS32 INS38 INS8 INS8 INS42 INS32 INS38 INS8 INS8 INS52 INS42 INS32 INS42 INS42 INS43 INS43 INS22 INS42 INS42 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS74 INS42 INS43 INS43 INS74 INS83 INS43 INS59 INS83 INS74 INS59 INS32 INS42 INS34 INS42 INS42 INS8 INS12 INS42 INS42 INS22 INS42 INS52 INS42 INS42 INS42 INS22 INS42 INS32 INS22 INS14 INS52 INS42 INS42 INS32 INS22 INS42 INS42 INS27 INS32 INS42 INS22 INS33 INS22 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS52 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS60 INS60 INS25 INS44 INS8 INS52 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS43 INS42 INS32 INS22 INS22 INS42 INS52 INS42 INS45 INS42 INS45 INS40 INS45 INS42 INS32 INS32 INS42 INS52 INS42 INS52 INS42 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS74 INS1 INS74 INS59 INS43 INS59 INS27 INS8 INS43 INS42 INS21 INS42 INS42 INS42 INS52 INS42 INS52 INS42 MOV32 INS42 INS42 INS22 UPD42 MOV32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS31 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS60 INS54 INS41 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS25 INS25 INS43 INS59 INS8 INS12 INS42 INS27 INS8 INS27 INS8 INS42 INS42 INS33 INS60 INS21 INS21 INS21 INS25 INS21 INS44 INS8 INS32 INS33 INS60 INS25 INS60 INS42 INS33 INS21 INS43 INS59 INS32 INS32 INS7 INS27 INS8 INS32 INS43 INS42 INS21 INS42 INS42 INS74 INS59 INS27 INS8 INS74 INS59 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 MOV32 INS32 INS42 INS42 INS32 INS27 INS27 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS43 INS43 INS42 INS33 INS21 INS42 INS42 INS42 INS32 INS32 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS32 INS33 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS11 INS32 INS42 INS42 INS7 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS43 INS33 INS42 INS42 INS32 INS32 INS42 UPD42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 DEL42 DEL45 DEL45 DEL40 DEL45 DEL27 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL42