YARN-6050. AMs can't be scheduled on racks or nodes (rkanter)

+import java.util.ArrayList;
+import java.util.Collections;
-  private ResourceRequest amResourceRequest = null;
+  private List<ResourceRequest> amResourceRequests = null;
-    if (this.amResourceRequest != null) {
-      builder.setAmContainerResourceRequest(
-          convertToProtoFormat(this.amResourceRequest));
+    if (this.amResourceRequests != null) {
+      builder.clearAmContainerResourceRequest();
+      builder.addAllAmContainerResourceRequest(
+          convertToProtoFormat(this.amResourceRequests));
-  
-  private ResourceRequestPBImpl convertFromProtoFormat(ResourceRequestProto p) {
-    return new ResourceRequestPBImpl(p);
+
+  private List<ResourceRequest> convertFromProtoFormat(
+      List<ResourceRequestProto> ps) {
+    List<ResourceRequest> rs = new ArrayList<>();
+    for (ResourceRequestProto p : ps) {
+      rs.add(new ResourceRequestPBImpl(p));
+    }
+    return rs;
-  private ResourceRequestProto convertToProtoFormat(ResourceRequest t) {
-    return ((ResourceRequestPBImpl)t).getProto();
+  private List<ResourceRequestProto> convertToProtoFormat(
+      List<ResourceRequest> ts) {
+    List<ResourceRequestProto> rs = new ArrayList<>(ts.size());
+    for (ResourceRequest t : ts) {
+      rs.add(((ResourceRequestPBImpl)t).getProto());
+    }
+    return rs;
+  @Deprecated
-    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;
-    if (this.amResourceRequest != null) {
-      return amResourceRequest;
-    } // Else via proto
-    if (!p.hasAmContainerResourceRequest()) {
+    List<ResourceRequest> reqs = getAMContainerResourceRequests();
+    if (reqs == null || reqs.isEmpty()) {
-    amResourceRequest = convertFromProtoFormat(p.getAmContainerResourceRequest());
-    return amResourceRequest;
+    return getAMContainerResourceRequests().get(0);
+  public List<ResourceRequest> getAMContainerResourceRequests() {
+    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;
+    if (this.amResourceRequests != null) {
+      return amResourceRequests;
+    } // Else via proto
+    if (p.getAmContainerResourceRequestCount() == 0) {
+      return null;
+    }
+    amResourceRequests =
+        convertFromProtoFormat(p.getAmContainerResourceRequestList());
+    return amResourceRequests;
+  }
+
+  @Override
+  @Deprecated
-    this.amResourceRequest = request;
+    this.amResourceRequests = Collections.singletonList(request);
+  }
+
+  @Override
+  public void setAMContainerResourceRequests(List<ResourceRequest> requests) {
+    maybeInitBuilder();
+    if (requests == null) {
+      builder.clearAmContainerResourceRequest();
+    }
+    this.amResourceRequests = requests;

INS26 INS26 INS40 INS40 INS31 INS31 INS74 INS74 INS44 INS8 INS74 INS44 INS8 INS78 INS78 INS83 MOV43 INS42 INS8 INS74 UPD42 INS78 INS78 INS83 INS39 INS42 INS44 INS8 INS43 MOV43 UPD42 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS42 INS42 INS60 INS25 INS41 INS43 INS43 INS42 INS42 INS74 INS42 INS21 INS25 INS21 INS42 INS42 UPD42 MOV42 INS43 MOV43 INS74 INS59 MOV44 INS42 MOV8 INS42 INS42 INS42 INS43 INS43 INS74 INS59 MOV44 INS42 MOV8 INS42 INS74 INS59 INS27 MOV8 INS32 INS42 INS42 INS27 INS8 UPD42 INS43 INS43 INS32 INS27 INS8 INS7 INS21 INS42 INS43 INS43 INS42 INS14 INS21 INS42 INS42 INS43 INS43 INS42 INS14 INS21 INS43 INS43 INS42 INS32 INS27 INS32 INS32 INS42 INS34 INS32 INS34 INS41 UPD42 INS32 INS42 INS42 INS42 INS42 INS33 INS21 INS22 INS42 UPD42 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS74 INS32 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS33 UPD42 INS42 INS42 INS42 INS32 INS52 INS42 INS42 INS42 UPD42 INS43 INS42 INS42 MOV14 INS43 INS42 INS42 INS42 INS42 MOV32 UPD42 INS42 INS42 INS42 INS42 UPD42 DEL43 DEL41 DEL41 DEL32 DEL38 DEL42