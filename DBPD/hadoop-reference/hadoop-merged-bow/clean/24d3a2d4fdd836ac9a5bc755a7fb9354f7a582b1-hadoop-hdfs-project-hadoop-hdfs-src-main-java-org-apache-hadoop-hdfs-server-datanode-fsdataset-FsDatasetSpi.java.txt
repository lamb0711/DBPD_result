HDFS-7758. Retire FsDatasetSpi#getVolumes() and use FsDatasetSpi#getVolumeRefs() instead (Lei (Eddy) Xu via Colin P. McCabe)

+import java.io.Closeable;
-import java.util.Collection;
+import java.nio.channels.ClosedChannelException;
+import java.util.ArrayList;
+import java.util.Iterator;
-import org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.FsVolumeImpl;
-import org.apache.hadoop.util.DiskChecker.DiskErrorException;
-  /** @return a list of volumes. */
-  public List<V> getVolumes();
+  /**
+   * It behaviors as an unmodifiable list of FsVolume. Individual FsVolume can
+   * be obtained by using {@link #get(int)}.
+   *
+   * This also holds the reference counts for these volumes. It releases all the
+   * reference counts in {@link #close()}.
+   */
+  class FsVolumeReferences implements Iterable<FsVolumeSpi>, Closeable {
+    private final List<FsVolumeReference> references;
+
+    public <S extends FsVolumeSpi> FsVolumeReferences(List<S> curVolumes) {
+      references = new ArrayList<>();
+      for (FsVolumeSpi v : curVolumes) {
+        try {
+          references.add(v.obtainReference());
+        } catch (ClosedChannelException e) {
+          // This volume has been closed.
+        }
+      }
+    }
+
+    private static class FsVolumeSpiIterator implements
+        Iterator<FsVolumeSpi> {
+      private final List<FsVolumeReference> references;
+      private int idx = 0;
+
+      FsVolumeSpiIterator(List<FsVolumeReference> refs) {
+        references = refs;
+      }
+
+      @Override
+      public boolean hasNext() {
+        return idx < references.size();
+      }
+
+      @Override
+      public FsVolumeSpi next() {
+        int refIdx = idx++;
+        return references.get(refIdx).getVolume();
+      }
+
+      @Override
+      public void remove() {
+        throw new UnsupportedOperationException();
+      }
+    }
+
+    @Override
+    public Iterator<FsVolumeSpi> iterator() {
+      return new FsVolumeSpiIterator(references);
+    }
+
+    /**
+     * Get the number of volumes.
+     */
+    public int size() {
+      return references.size();
+    }
+
+    /**
+     * Get the volume for a given index.
+     */
+    public FsVolumeSpi get(int index) {
+      return references.get(index).getVolume();
+    }
+
+    @Override
+    public void close() throws IOException {
+      IOException ioe = null;
+      for (FsVolumeReference ref : references) {
+        try {
+          ref.close();
+        } catch (IOException e) {
+          ioe = e;
+        }
+      }
+      references.clear();
+      if (ioe != null) {
+        throw ioe;
+      }
+    }
+  }
+
+  /**
+   * Returns a list of FsVolumes that hold reference counts.
+   *
+   * The caller must release the reference of each volume by calling
+   * {@link FsVolumeReferences#close()}.
+   */
+  public FsVolumeReferences getFsVolumeReferences();

MOV26 MOV26 INS26 INS40 UPD40 UPD40 UPD40 INS55 INS31 INS29 INS42 INS74 INS43 INS23 INS31 INS55 INS31 INS31 MOV31 INS31 INS29 INS83 INS43 INS42 INS65 INS43 INS43 INS42 INS83 INS83 UPD74 MOV74 INS59 INS83 INS73 INS42 INS44 INS8 INS83 INS83 INS42 INS74 INS23 INS23 INS31 INS31 INS31 INS31 INS78 INS83 INS74 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS65 INS42 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS42 INS42 UPD43 INS42 INS42 INS43 INS74 INS42 INS21 INS70 INS43 INS43 INS83 INS83 INS74 INS59 INS83 INS39 INS59 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS43 INS43 INS41 INS65 INS41 UPD65 INS42 INS39 INS42 INS41 INS42 INS42 INS60 INS70 INS21 INS25 INS66 INS66 INS65 INS66 INS68 INS68 UPD42 INS42 INS43 INS43 INS7 INS44 INS42 INS8 INS42 INS42 INS43 INS43 INS42 INS42 INS34 INS74 INS42 INS21 INS42 INS41 INS42 INS42 INS60 INS41 INS42 INS53 INS42 INS42 INS14 INS66 INS32 UPD66 INS32 INS43 INS59 INS44 INS42 INS8 INS32 INS27 INS8 INS68 INS42 INS69 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS54 INS42 INS42 INS43 INS43 INS7 INS27 INS39 INS59 INS32 INS14 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS43 INS42 INS54 INS42 INS42 INS42 INS33 INS53 INS42 INS42 INS39 INS74 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS37 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS43 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS32 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 DEL42