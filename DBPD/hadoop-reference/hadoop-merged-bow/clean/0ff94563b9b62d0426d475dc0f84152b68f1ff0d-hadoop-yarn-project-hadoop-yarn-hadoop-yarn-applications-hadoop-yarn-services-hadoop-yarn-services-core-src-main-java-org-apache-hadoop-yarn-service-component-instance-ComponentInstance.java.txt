YARN-8265.  Improve DNS handling on docker IP changes.
            Contributed by Billie Rinaldi

+import org.apache.hadoop.yarn.service.api.records.Artifact;
+      boolean cancelOnSuccess = true;
+      if (compInstance.getCompSpec().getArtifact() != null && compInstance
+          .getCompSpec().getArtifact().getType() == Artifact.TypeEnum.DOCKER) {
+        // A docker container might get a different IP if the container is
+        // relaunched by the NM, so we need to keep checking the status.
+        // This is a temporary fix until the NM provides a callback for
+        // container relaunch (see YARN-8265).
+        cancelOnSuccess = false;
+      }
-                  event.getContainerId(), compInstance), 0, 1,
+                  event.getContainerId(), compInstance, cancelOnSuccess), 0, 1,
+    boolean doRegistryUpdate = true;
-      container.setIp(StringUtils.join(",", status.getIPs()));
+      String existingIP = container.getIp();
+      String newIP = StringUtils.join(",", status.getIPs());
+      container.setIp(newIP);
-      if (timelineServiceEnabled) {
+      if (existingIP != null && newIP.equals(existingIP)) {
+        doRegistryUpdate = false;
+      }
+      if (timelineServiceEnabled && doRegistryUpdate) {
-    updateServiceRecord(yarnRegistryOperations, status);
+    if (doRegistryUpdate) {
+      cleanupRegistry(status.getContainerId());
+      LOG.info(
+          getCompInstanceId() + " new IP = " + status.getIPs() + ", host = "
+              + status.getHost() + ", updating registry");
+      updateServiceRecord(yarnRegistryOperations, status);
+    }
+    private boolean cancelOnSuccess;
-        ContainerId containerId, ComponentInstance instance) {
+        ContainerId containerId, ComponentInstance instance, boolean
+        cancelOnSuccess) {
+      this.cancelOnSuccess = cancelOnSuccess;
-      LOG.info(
-          instance.compInstanceId + " IP = " + status.getIPs() + ", host = "
-              + status.getHost() + ", cancel container status retriever");
-      instance.containerStatusFuture.cancel(false);
+      if (cancelOnSuccess) {
+        LOG.info(
+            instance.compInstanceId + " IP = " + status.getIPs() + ", host = "
+                + status.getHost() + ", cancel container status retriever");
+        instance.containerStatusFuture.cancel(false);
+      }

INS26 INS40 INS23 INS60 INS25 INS83 INS39 INS59 INS44 INS60 INS25 INS39 INS59 INS42 INS8 INS42 INS39 INS42 INS21 INS25 INS39 INS59 INS27 INS8 INS42 INS9 INS60 INS60 INS25 INS21 INS21 MOV21 INS7 INS42 INS8 INS42 INS9 INS27 INS27 INS21 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS32 INS32 INS22 INS42 MOV21 MOV21 INS32 INS33 INS32 INS40 INS7 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS27 INS32 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS52 INS42 INS32 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS7 INS42 INS42 INS32 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42