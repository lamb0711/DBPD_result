HADOOP-10355. Fix TestLoadGenerator#testLoadGenerator. Contributed by Haohui Mai.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570460 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.base.Preconditions;
+
-  
+
+  private static void parseScriptLine(String line, ArrayList<Long> duration,
+      ArrayList<Double> readProb, ArrayList<Double> writeProb) {
+    String[] a = line.split("\\s");
+
+    if (a.length != 3) {
+      throw new IllegalArgumentException("Incorrect number of parameters: "
+          + line);
+    }
+
+    try {
+      long d = Long.parseLong(a[0]);
+      double r = Double.parseDouble(a[1]);
+      double w = Double.parseDouble(a[2]);
+
+      Preconditions.checkArgument(d >= 0, "Invalid duration: " + d);
+      Preconditions.checkArgument(0 <= r && r <= 1.0,
+          "The read probability must be [0, 1]: " + r);
+      Preconditions.checkArgument(0 <= w && w <= 1.0,
+          "The read probability must be [0, 1]: " + w);
+
+      readProb.add(r);
+      duration.add(d);
+      writeProb.add(w);
+    } catch (NumberFormatException nfe) {
+      throw new IllegalArgumentException("Cannot parse: " + line);
+    }
+  }
+
-    while ((line = br.readLine()) != null) {
-      lineNum++;
-      if (line.startsWith("#") || line.isEmpty()) // skip comments and blanks
-        continue;
+    try {
+      while ((line = br.readLine()) != null) {
+        lineNum++;
+        if (line.startsWith("#") || line.isEmpty()) // skip comments and blanks
+          continue;
-      String[] a = line.split("\\s");
-      if (a.length != 3) {
-        System.err.println("Line " + lineNum
-            + ": Incorrect number of parameters: " + line);
+        parseScriptLine(line, duration, readProb, writeProb);
-
-      try {
-        long d = Long.parseLong(a[0]);
-        if (d < 0) {
-          System.err.println("Line " + lineNum + ": Invalid duration: " + d);
-          return -1;
-        }
-
-        double r = Double.parseDouble(a[1]);
-        if (r < 0.0 || r > 1.0) {
-          System.err.println("Line " + lineNum
-              + ": The read probability must be [0, 1]: " + r);
-          return -1;
-        }
-
-        double w = Double.parseDouble(a[2]);
-        if (w < 0.0 || w > 1.0) {
-          System.err.println("Line " + lineNum
-              + ": The read probability must be [0, 1]: " + r);
-          return -1;
-        }
-
-        readProb.add(r);
-        duration.add(d);
-        writeProb.add(w);
-      } catch (NumberFormatException nfe) {
-        System.err.println(lineNum + ": Can't parse: " + line);
-        return -1;
-      } finally {
-        IOUtils.cleanup(LOG, br);
-      }
+    } catch (IllegalArgumentException e) {
+      System.err.println("Line: " + lineNum + ", " + e.getMessage());
+      return -1;
+    } finally {
+      IOUtils.cleanup(LOG, br);

INS26 INS40 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 MOV8 INS43 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS54 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS8 INS12 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS53 INS21 INS21 INS21 MOV61 INS44 INS8 INS14 INS32 INS32 INS32 INS53 INS8 INS43 INS42 INS21 MOV41 INS43 INS27 INS42 INS42 INS27 MOV27 INS42 INS42 INS27 MOV27 INS42 INS42 INS27 MOV27 INS14 MOV21 MOV25 INS21 INS42 INS32 INS42 UPD45 MOV45 MOV42 MOV42 MOV34 UPD45 UPD27 MOV27 UPD27 MOV27 UPD45 UPD27 MOV27 UPD27 MOV27 UPD45 UPD42 INS43 INS27 INS32 INS40 INS42 INS27 INS34 INS34 INS42 UPD45 MOV45 MOV42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 DEL40 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL27 DEL40 DEL42 DEL32 DEL21 DEL34 DEL38 DEL41 DEL8 DEL25 DEL27 DEL40 DEL42 DEL32 DEL21 DEL34 DEL38 DEL41 DEL8 DEL25 DEL45 DEL42 DEL34 DEL45 DEL42 DEL34 DEL45 DEL42 DEL27 DEL40 DEL42 DEL32 DEL21 DEL34 DEL38 DEL41 DEL8 DEL25 DEL40 DEL42 DEL42 DEL27 DEL32 DEL21