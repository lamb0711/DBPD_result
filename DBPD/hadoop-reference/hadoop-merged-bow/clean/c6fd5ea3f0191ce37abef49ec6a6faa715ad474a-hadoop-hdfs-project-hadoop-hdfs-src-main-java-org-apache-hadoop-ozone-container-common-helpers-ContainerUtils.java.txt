HDFS-10238. Ozone : Add chunk persistance. Contributed by Anu Engineer.

-   * @param msg Request
+   * @param msg           Request
+   * @param containerData - data
-   * @param msg - Protobuf message.
+   * @param msg     - Protobuf message.
+   * @param result  - result
+   * @param message - Error message.
+    Logger log = LoggerFactory.getLogger(ContainerManagerImpl.class);
-    containerPath = containerPath.resolve(OzoneConsts.CONTAINER_META_PATH);
-    if (!containerPath.toFile().mkdirs()) {
+    Path metadataPath = containerPath.resolve(OzoneConsts.CONTAINER_META_PATH);
+    if (!metadataPath.toFile().mkdirs()) {
+      log.error("Unable to create directory for metadata storage. Path: {}",
+          metadataPath);
-          " Path {}" + containerPath);
+          " Path: " + metadataPath);
-    containerPath = containerPath.resolve(OzoneConsts.CONTAINER_DB);
-    LevelDBStore store = new LevelDBStore(containerPath.toFile(), true);
+    LevelDBStore store =
+        new LevelDBStore(metadataPath.resolve(OzoneConsts.CONTAINER_DB)
+            .toFile(), true);
-    return containerPath;
+
+    Path dataPath = containerPath.resolve(OzoneConsts.CONTAINER_DATA_PATH);
+    if (!dataPath.toFile().mkdirs()) {
+
+      // If we failed to create data directory, we cleanup the
+      // metadata directory completely. That is, we will delete the
+      // whole directory including LevelDB file.
+      log.error("Unable to create directory for data storage. cleaning up the" +
+              " container path: {} dataPath: {}",
+          containerPath, dataPath);
+      FileUtils.deleteDirectory(containerPath.toFile());
+      throw new IOException("Unable to create directory for data storage." +
+          " Path: " + dataPath);
+    }
+    return metadataPath;
+   * Returns Metadata location.
+   *
+   * @param containerData - Data
+   * @param location      - Path
+   * @return Path
+   */
+  public static File getMetadataFile(ContainerData containerData,
+                                     Path location) {
+    return location.resolve(containerData
+        .getContainerName().concat(CONTAINER_META))
+        .toFile();
+  }
+
+  /**
+   * Returns container file location.
+   * @param containerData  - Data
+   * @param location - Root path
+   * @return Path
+   */
+  public static File getContainerFile(ContainerData containerData,
+                                      Path location) {
+    return location.resolve(containerData
+        .getContainerName().concat(CONTAINER_EXTENSION))
+        .toFile();
+  }
+
+  /**
+   * Container metadata directory -- here is where the level DB lives.
+   * @param cData - cData.
+   * @return Path to the parent directory where the DB lives.
+   */
+  public static Path getMetadataDirectory(ContainerData cData) {
+    Path dbPath = Paths.get(cData.getDBPath());
+    Preconditions.checkNotNull(dbPath);
+    Preconditions.checkState(dbPath.toString().length() > 0);
+    return dbPath.getParent();
+  }
+
+  /**
+   * Returns the path where data or chunks live for a given container.
+   * @param cData - cData container
+   * @return - Path
+   */
+  public static Path getDataDirectory(ContainerData cData) throws IOException {
+    Path path = getMetadataDirectory(cData);
+    Preconditions.checkNotNull(path);
+    path = path.getParent();
+    if(path == null) {
+      throw new IOException("Unable to get Data directory. null path found");
+    }
+    return path.resolve(OzoneConsts.CONTAINER_DATA_PATH);
+  }
+
+
+  /**

INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS60 INS60 INS60 INS60 INS25 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS21 INS21 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS25 INS41 UPD66 INS42 INS66 UPD66 INS42 INS66 INS42 INS66 INS43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 INS38 INS8 UPD42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS32 INS32 INS32 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS32 INS7 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS42 MOV32 INS21 INS42 INS14 INS42 INS42 INS32 INS32 INS21 INS21 INS53 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS40 INS42 INS42 INS57 INS32 MOV43 INS32 MOV9 INS42 INS42 INS40 INS32 INS42 INS32 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS34 INS42 INS42 INS42 INS42 INS14 INS43 UPD42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 MOV32 INS43 INS27 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS45 INS42 UPD45 UPD42 UPD42 MOV42 MOV42 MOV40 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL42 DEL14 DEL59 DEL60