HDFS-7087. Ability to list /.reserved. Contributed by Xiao Chen.

+  public final static HdfsFileStatus DOT_RESERVED_STATUS =
+      new HdfsFileStatus(0, true, 0, 0, 0, 0, new FsPermission((short) 01770),
+          null, null, null, HdfsFileStatus.EMPTY_NAME, -1L, 0, null,
+          HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED, null);
+
+  private HdfsFileStatus[] reservedStatuses;
+
-    
+
+  /**
+   * Get HdfsFileStatuses of the reserved paths: .inodes and raw.
+   *
+   * @return Array of HdfsFileStatus
+   */
+  HdfsFileStatus[] getReservedStatuses() {
+    Preconditions.checkNotNull(reservedStatuses, "reservedStatuses should "
+        + " not be null. It is populated when FSNamesystem loads FS image."
+        + " It has to be set at this time instead of initialization time"
+        + " because CTime is loaded during FSNamesystem#loadFromDisk.");
+    return reservedStatuses;
+  }
+
+  /**
+   * Create HdfsFileStatuses of the reserved paths: .inodes and raw.
+   * These statuses are solely for listing purpose. All other operations
+   * on the reserved dirs are disallowed.
+   * Operations on sub directories are resolved by
+   * {@link FSDirectory#resolvePath(String, byte[][], FSDirectory)}
+   * and conducted directly, without the need to check the reserved dirs.
+   *
+   * This method should only be invoked once during namenode initialization.
+   *
+   * @param cTime CTime of the file system
+   * @return Array of HdfsFileStatus
+   */
+  void createReservedStatuses(long cTime) {
+    HdfsFileStatus inodes = new HdfsFileStatus(0, true, 0, 0, cTime, cTime,
+        new FsPermission((short) 0770), null, supergroup, null,
+        DOT_INODES, -1L, 0, null,
+        HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED, null);
+    HdfsFileStatus raw = new HdfsFileStatus(0, true, 0, 0, cTime, cTime,
+        new FsPermission((short) 0770), null, supergroup, null, RAW, -1L,
+        0, null, HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED, null);
+    reservedStatuses = new HdfsFileStatus[] {inodes, raw};
+  }
+
+  public static boolean isExactReservedName(String src) {
+    return CHECK_RESERVED_FILE_NAMES && src.equals(DOT_RESERVED_PATH_PREFIX);
+  }
+
+  static boolean isReservedInodesName(String src) {
+    return src.startsWith(DOT_RESERVED_PATH_PREFIX +
+        Path.SEPARATOR + DOT_INODES_STRING);
+  }
+
-        return constructRemainingPath("", pathComponents, 3);
+        if (nComponents == 4
+            && Arrays.equals(DOT_RESERVED, pathComponents[3])) {
+          /* It's /.reserved/raw/.reserved so don't strip */
+          return src;
+        } else {
+          return constructRemainingPath("", pathComponents, 3);
+        }

INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS5 INS59 INS29 INS5 INS42 INS8 INS29 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS14 INS43 INS85 INS42 INS65 INS65 INS43 INS85 INS21 INS41 INS65 INS65 INS65 INS39 INS42 INS60 INS60 INS21 INS43 INS42 INS41 INS43 INS42 INS41 INS43 INS34 INS9 INS34 INS34 INS34 INS34 INS14 INS33 INS33 INS33 INS40 INS38 INS34 INS33 INS40 INS33 INS42 INS66 INS66 INS42 INS32 INS42 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS43 INS59 INS43 INS59 INS7 INS42 INS27 INS42 INS32 INS42 INS43 INS11 INS34 INS42 INS42 INS42 INS27 INS68 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS3 INS42 INS32 INS42 INS42 INS27 INS42 INS39 INS34 INS45 INS45 INS45 INS45 INS42 INS42 INS69 INS69 INS69 INS43 INS34 INS9 INS34 INS34 INS42 INS42 INS14 INS33 INS42 INS33 INS42 INS38 INS34 INS33 INS40 INS33 INS43 INS34 INS9 INS34 INS34 INS42 INS42 INS14 INS33 INS42 INS33 INS42 INS38 INS34 INS33 INS40 INS33 INS5 INS4 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS5 INS43 INS42 INS43 INS11 INS34 INS42 INS43 INS11 INS34 INS43 INS85 INS42 INS42 INS8 INS42 INS39 INS85 INS85 INS42 INS42 INS39 INS34 INS42 INS39 INS34 INS42 INS25 INS27 INS8 MOV8 INS27 INS32 INS41 INS42 INS34 INS42 INS42 INS42 INS2 INS42 INS42 INS34