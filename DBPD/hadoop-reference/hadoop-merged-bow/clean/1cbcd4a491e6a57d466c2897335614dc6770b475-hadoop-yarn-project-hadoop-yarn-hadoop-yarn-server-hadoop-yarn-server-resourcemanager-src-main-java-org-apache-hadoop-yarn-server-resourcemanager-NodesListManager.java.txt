YARN-4311. Removing nodes from include and exclude lists will not remove them from decommissioned nodes list. Contributed by Kuhu Shukla

+import org.apache.hadoop.util.Time;
+  private Timer removalTimer;
+  private int nodeRemovalCheckInterval;
+
+    final int nodeRemovalTimeout =
+        conf.getInt(
+            YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,
+            YarnConfiguration.
+                DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);
+    nodeRemovalCheckInterval = (Math.min(nodeRemovalTimeout/2,
+        600000));
+    removalTimer = new Timer("Node Removal Timer");
+
+    removalTimer.schedule(new TimerTask() {
+      @Override
+      public void run() {
+        long now = Time.monotonicNow();
+        for (Map.Entry<NodeId, RMNode> entry :
+            rmContext.getInactiveRMNodes().entrySet()) {
+          NodeId nodeId = entry.getKey();
+          RMNode rmNode = entry.getValue();
+          if (isUntrackedNode(rmNode.getHostName())) {
+            if (rmNode.getUntrackedTimeStamp() == 0) {
+              rmNode.setUntrackedTimeStamp(now);
+            } else if (now - rmNode.getUntrackedTimeStamp() >
+                  nodeRemovalTimeout) {
+              RMNode result = rmContext.getInactiveRMNodes().remove(nodeId);
+              if (result != null) {
+                ClusterMetrics clusterMetrics = ClusterMetrics.getMetrics();
+                if (rmNode.getState() == NodeState.SHUTDOWN) {
+                  clusterMetrics.decrNumShutdownNMs();
+                } else {
+                  clusterMetrics.decrDecommisionedNMs();
+                }
+                LOG.info("Removed "+result.getHostName() +
+                    " from inactive nodes list");
+              }
+            }
+          } else {
+            rmNode.setUntrackedTimeStamp(0);
+          }
+        }
+      }
+    }, nodeRemovalCheckInterval, nodeRemovalCheckInterval);
+
+  @Override
+  public void serviceStop() {
+    removalTimer.cancel();
+  }
+
+        RMNodeEventType nodeEventType = isUntrackedNode(nodeId.getHost()) ?
+            RMNodeEventType.SHUTDOWN : RMNodeEventType.DECOMMISSION;
-            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION));
+            new RMNodeEvent(nodeId, nodeEventType));
+    updateInactiveNodes();
+  public int getNodeRemovalCheckInterval() {
+    return nodeRemovalCheckInterval;
+  }
+
+  @VisibleForTesting
+  public void setNodeRemovalCheckInterval(int interval) {
+    this.nodeRemovalCheckInterval = interval;
+  }
+
+  @VisibleForTesting
+  private void updateInactiveNodes() {
+    long now = Time.monotonicNow();
+    for(Entry<NodeId, RMNode> entry :
+        rmContext.getInactiveRMNodes().entrySet()) {
+      NodeId nodeId = entry.getKey();
+      RMNode rmNode = entry.getValue();
+      if (isUntrackedNode(nodeId.getHost()) &&
+          rmNode.getUntrackedTimeStamp() == 0) {
+        rmNode.setUntrackedTimeStamp(now);
+      }
+    }
+  }
+
+  public boolean isUntrackedNode(String hostName) {
+    boolean untracked;
+    String ip = resolver.resolve(hostName);
+
+    synchronized (hostsReader) {
+      Set<String> hostsList = hostsReader.getHosts();
+      Set<String> excludeList = hostsReader.getExcludedHosts();
+      untracked = !hostsList.isEmpty() &&
+          !hostsList.contains(hostName) && !hostsList.contains(ip) &&
+          !excludeList.contains(hostName) && !excludeList.contains(ip);
+    }
+    return untracked;
+  }
+
-    for (Entry<NodeId, RMNode> entry:rmContext.getRMNodes().entrySet()) {
+    for (Entry<NodeId, RMNode> entry : rmContext.getRMNodes().entrySet()) {
+        RMNodeEventType nodeEventType = isUntrackedNode(nodeId.getHost()) ?
+            RMNodeEventType.SHUTDOWN : RMNodeEventType.GRACEFUL_DECOMMISSION;
-            new RMNodeEvent(nodeId, RMNodeEventType.GRACEFUL_DECOMMISSION));
+            new RMNodeEvent(nodeId, nodeEventType));
+    updateInactiveNodes();
+        RMNodeEventType nodeEventType =
+            isUntrackedNode(entry.getKey().getHost()) ?
+            RMNodeEventType.SHUTDOWN : RMNodeEventType.DECOMMISSION;
-            new RMNodeEvent(entry.getKey(), RMNodeEventType.DECOMMISSION));
+            new RMNodeEvent(entry.getKey(), nodeEventType));

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS42 INS21 INS21 INS42 INS41 INS42 INS39 INS42 INS21 INS60 INS70 INS43 INS42 INS60 INS60 INS51 INS41 INS21 INS83 INS39 INS59 INS7 INS7 INS32 INS32 INS32 INS42 INS7 INS39 INS59 INS44 INS32 INS8 INS42 INS39 INS59 INS43 INS59 INS42 INS8 INS42 INS32 INS42 INS32 INS42 INS36 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS32 INS74 INS42 INS32 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS32 INS60 INS60 INS21 INS42 INS42 INS42 INS40 INS40 INS32 INS43 INS45 INS43 INS1 INS52 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS74 INS59 INS74 INS59 INS7 INS8 MOV8 INS42 INS42 INS27 INS34 INS42 INS42 INS31 INS60 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS27 INS21 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS27 INS60 INS21 INS60 INS42 INS34 INS78 INS83 INS39 INS42 INS8 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS38 INS38 INS38 INS38 INS43 INS59 INS32 INS43 INS59 INS42 INS60 INS70 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS16 MOV32 INS42 INS14 INS42 INS42 INS16 INS39 INS59 INS44 INS32 INS8 INS32 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS40 MOV43 INS42 INS42 INS32 INS40 INS40 MOV32 UPD42 INS42 INS32 INS74 INS42 INS32 INS42 INS60 INS60 INS25 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS25 INS32 INS32 INS34 INS21 INS27 INS8 INS42 INS42 INS34 INS42 INS42 INS32 INS27 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS21 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS40 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL42 DEL40 DEL14 DEL32 DEL21 DEL8