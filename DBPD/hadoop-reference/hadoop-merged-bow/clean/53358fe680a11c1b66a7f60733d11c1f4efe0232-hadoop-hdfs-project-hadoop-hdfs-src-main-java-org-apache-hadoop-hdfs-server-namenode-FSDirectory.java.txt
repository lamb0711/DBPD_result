Merge remote-tracking branch 'apache/trunk' into HDFS-7285

+import java.util.SortedSet;
+import java.util.TreeSet;
+import static org.apache.hadoop.fs.CommonConfigurationKeys.FS_PROTECTED_DIRECTORIES;
+  // A set of directories that have been protected using the
+  // dfs.namenode.protected.directories setting. These directories cannot
+  // be deleted unless they are empty.
+  //
+  // Each entry in this set must be a normalized path.
+  private final SortedSet<String> protectedDirectories;
+
+    this.protectedDirectories = parseProtectedDirectories(conf);
+
+  /**
+   * Parse configuration setting dfs.namenode.protected.directories to
+   * retrieve the set of protected directories.
+   *
+   * @param conf
+   * @return a TreeSet
+   */
+  @VisibleForTesting
+  static SortedSet<String> parseProtectedDirectories(Configuration conf) {
+    // Normalize each input path to guard against administrator error.
+    return new TreeSet<>(normalizePaths(
+        conf.getTrimmedStringCollection(FS_PROTECTED_DIRECTORIES),
+        FS_PROTECTED_DIRECTORIES));
+  }
+
+  SortedSet<String> getProtectedDirectories() {
+    return protectedDirectories;
+  }
+
+  /**
+   * Return a new collection of normalized paths from the given input
+   * collection. The input collection is unmodified.
+   *
+   * Reserved paths, relative paths and paths with scheme are ignored.
+   *
+   * @param paths collection whose contents are to be normalized.
+   * @return collection with all input paths normalized.
+   */
+  static Collection<String> normalizePaths(Collection<String> paths,
+                                           String errorString) {
+    if (paths.isEmpty()) {
+      return paths;
+    }
+    final Collection<String> normalized = new ArrayList<>(paths.size());
+    for (String dir : paths) {
+      if (isReservedName(dir)) {
+        LOG.error("{} ignoring reserved path {}", errorString, dir);
+      } else {
+        final Path path = new Path(dir);
+        if (!path.isAbsolute()) {
+          LOG.error("{} ignoring relative path {}", errorString, dir);
+        } else if (path.toUri().getScheme() != null) {
+          LOG.error("{} ignoring path {} with scheme", errorString, dir);
+        } else {
+          normalized.add(path.toString());
+        }
+      }
+    }
+    return normalized;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS29 INS78 INS83 INS74 INS42 INS44 INS8 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS43 INS43 INS42 INS21 INS65 INS65 INS65 INS42 INS43 INS43 INS43 INS42 INS41 INS43 INS43 INS41 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS43 INS42 INS25 INS60 INS70 INS41 INS42 INS42 INS7 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS42 INS32 INS8 INS83 INS74 INS59 INS44 INS42 INS8 INS42 INS22 INS32 INS74 INS32 INS42 INS42 INS42 INS42 INS41 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS52 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS42 INS32 INS83 INS43 INS59 INS38 INS8 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS32 INS21 INS27 INS8 INS8 INS43 INS42 INS42 INS42 INS32 INS32 INS33 INS21 INS21 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42