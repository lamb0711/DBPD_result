HDFS-6441. Add ability to exclude/include specific datanodes while balancing. (Contributed by Benoy Antony and Yu Li)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614812 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
+import org.apache.hadoop.util.HostsFileReader;
-      + "\n\t[-threshold <threshold>]\tPercentage of disk capacity";
+      + "\n\t[-threshold <threshold>]\tPercentage of disk capacity"
+      + "\n\t[-exclude [-f <hosts-file> | comma-sperated list of hosts]]"
+      + "\tExcludes the specified datanodes."
+      + "\n\t[-include [-f <hosts-file> | comma-sperated list of hosts]]"
+      + "\tIncludes only the specified datanodes.";
+  // set of data nodes to be excluded from balancing operations.
+  Set<String> nodesToBeExcluded;
+  //Restrict balancing to the following nodes.
+  Set<String> nodesToBeIncluded;
+    this.nodesToBeExcluded = p.nodesToBeExcluded;
+    this.nodesToBeIncluded = p.nodesToBeIncluded;
-      if (datanode.isDecommissioned() || datanode.isDecommissionInProgress()) {
-        continue; // ignore decommissioning or decommissioned nodes
+     // ignore decommissioning or decommissioned nodes or
+      // ignore nodes in exclude list
+      // or nodes not in the include list (if include list is not empty)
+      if (datanode.isDecommissioned() || datanode.isDecommissionInProgress() ||
+          Util.shouldBeExcluded(nodesToBeExcluded, datanode) ||
+          !Util.shouldBeIncluded(nodesToBeIncluded, datanode)) {
+        continue;
-      if (datanode.isDecommissioned() || datanode.isDecommissionInProgress()) {
-        continue; // ignore decommissioning or decommissioned nodes
+      // ignore decommissioning or decommissioned nodes or
+      // ignore nodes in exclude list
+      // or nodes not in the include list (if include list is not empty)
+      if (datanode.isDecommissioned() || datanode.isDecommissionInProgress() ||
+          Util.shouldBeExcluded(nodesToBeExcluded, datanode) ||
+          !Util.shouldBeIncluded(nodesToBeIncluded, datanode)) {
+        if (LOG.isTraceEnabled()) {
+          LOG.trace("Excluding datanode " + datanode);
+        }
+        continue;
-    static final Parameters DEFALUT = new Parameters(
-        BalancingPolicy.Node.INSTANCE, 10.0);
+    static final Parameters DEFAULT = new Parameters(
+        BalancingPolicy.Node.INSTANCE, 10.0,
+        Collections.<String> emptySet(), Collections.<String> emptySet());
+    // exclude the nodes in this set from balancing operations
+    Set<String> nodesToBeExcluded;
+    //include only these nodes in balancing operations
+    Set<String> nodesToBeIncluded;
-    Parameters(BalancingPolicy policy, double threshold) {
+    Parameters(BalancingPolicy policy, double threshold,
+        Set<String> nodesToBeExcluded, Set<String> nodesToBeIncluded) {
+      this.nodesToBeExcluded = nodesToBeExcluded;
+      this.nodesToBeIncluded = nodesToBeIncluded;
-          + "[" + policy + ", threshold=" + threshold + "]";
+          + "[" + policy + ", threshold=" + threshold +
+          ", number of nodes to be excluded = "+ nodesToBeExcluded.size() +
+          ", number of nodes to be included = "+ nodesToBeIncluded.size() +"]";
+    }
+  }
+
+  static class Util {
+
+    /**
+     * @param datanode
+     * @return returns true if data node is part of the excludedNodes.
+     */
+    static boolean shouldBeExcluded(Set<String> excludedNodes, DatanodeInfo datanode) {
+      return isIn(excludedNodes, datanode);
+    }
+
+    /**
+     * @param datanode
+     * @return returns true if includedNodes is empty or data node is part of the includedNodes.
+     */
+    static boolean shouldBeIncluded(Set<String> includedNodes, DatanodeInfo datanode) {
+      return (includedNodes.isEmpty() ||
+          isIn(includedNodes, datanode));
+    }
+    /**
+     * Match is checked using host name , ip address with and without port number.
+     * @param datanodeSet
+     * @param datanode
+     * @return true if the datanode's transfer address matches the set of nodes.
+     */
+    private static boolean isIn(Set<String> datanodeSet, DatanodeInfo datanode) {
+      return isIn(datanodeSet, datanode.getPeerHostName(), datanode.getXferPort()) ||
+          isIn(datanodeSet, datanode.getIpAddr(), datanode.getXferPort()) ||
+          isIn(datanodeSet, datanode.getHostName(), datanode.getXferPort());
+    }
+
+    /**
+     * returns true if nodes contains host or host:port
+     * @param nodes
+     * @param host
+     * @param port
+     * @return
+     */
+    private static boolean isIn(Set<String> nodes, String host, int port) {
+      if (host == null) {
+        return false;
+      }
+      return (nodes.contains(host) || nodes.contains(host +":"+ port));
+    }
+
+    /**
+     * parse a comma separated string to obtain set of host names
+     * @param string
+     * @return
+     */
+    static Set<String> parseHostList(String string) {
+      String[] addrs = StringUtils.getTrimmedStrings(string);
+      return new HashSet<String>(Arrays.asList(addrs));
+    }
+
+    /**
+     * read set of host names from a file
+     * @param fileName
+     * @return
+     */
+    static Set<String> getHostListFromFile(String fileName) {
+      Set<String> nodes = new HashSet <String> ();
+      try {
+        HostsFileReader.readFileToSet("nodes", fileName, nodes);
+        return StringUtils.getTrimmedStrings(nodes);
+      } catch (IOException e) {
+        throw new IllegalArgumentException("Unable to open file: " + fileName);
+      }
-      BalancingPolicy policy = Parameters.DEFALUT.policy;
-      double threshold = Parameters.DEFALUT.threshold;
+      BalancingPolicy policy = Parameters.DEFAULT.policy;
+      double threshold = Parameters.DEFAULT.threshold;
+      Set<String> nodesTobeExcluded = Parameters.DEFAULT.nodesToBeExcluded;
+      Set<String> nodesTobeIncluded = Parameters.DEFAULT.nodesToBeIncluded;
+            } else if ("-exclude".equalsIgnoreCase(args[i])) {
+              i++;
+              if ("-f".equalsIgnoreCase(args[i])) {
+                nodesTobeExcluded = Util.getHostListFromFile(args[++i]);
+              } else {
+                nodesTobeExcluded = Util.parseHostList(args[i]);
+              }
+            } else if ("-include".equalsIgnoreCase(args[i])) {
+              i++;
+              if ("-f".equalsIgnoreCase(args[i])) {
+                nodesTobeIncluded = Util.getHostListFromFile(args[++i]);
+               } else {
+                nodesTobeIncluded = Util.parseHostList(args[i]);
+              }
+          if (!nodesTobeExcluded.isEmpty() && !nodesTobeIncluded.isEmpty()) {
+            System.err.println(
+                "-exclude and -include options cannot be specified together.");
+            throw new IllegalArgumentException(
+                "-exclude and -include options cannot be specified together.");
+          }
-      return new Parameters(policy, threshold);
+      return new Parameters(policy, threshold, nodesTobeExcluded, nodesTobeIncluded);

INS26 INS26 INS40 INS40 INS23 INS23 INS55 INS74 INS59 INS74 INS59 INS23 INS23 INS83 INS42 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS43 INS42 INS43 INS43 INS42 INS21 INS21 INS74 INS59 INS74 INS59 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS7 INS7 INS8 UPD42 INS43 INS43 INS42 INS43 INS43 INS42 INS74 INS42 INS74 INS42 INS21 INS21 INS65 INS65 INS74 INS42 INS43 INS42 INS41 INS65 INS65 INS74 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS39 INS42 INS25 INS41 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS60 INS41 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS60 INS54 INS60 INS60 INS22 INS40 INS22 INS40 MOV25 MOV21 INS25 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS7 INS7 INS42 INS66 INS43 INS43 INS42 INS32 INS42 INS66 INS43 INS43 INS42 INS36 INS66 INS42 INS42 INS66 INS43 INS43 INS42 INS27 INS66 INS42 INS42 INS42 INS43 INS43 INS42 INS27 INS8 INS36 INS66 INS42 INS42 INS42 INS42 INS5 INS59 INS14 INS66 INS42 INS42 INS42 INS42 INS74 INS59 INS8 INS12 INS74 INS59 INS74 INS59 INS52 INS42 INS52 INS42 MOV27 INS8 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS33 INS41 INS27 INS43 INS85 INS42 INS32 INS74 INS32 INS43 INS43 INS42 INS14 INS21 INS41 INS44 INS8 UPD40 UPD40 INS43 INS43 INS42 INS40 INS43 INS43 INS42 INS40 INS42 INS42 INS32 INS38 INS32 INS38 INS25 INS18 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS9 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS45 INS42 INS42 INS42 INS43 INS27 INS27 INS8 INS32 INS42 INS45 INS42 INS38 INS38 INS21 INS53 INS42 INS42 INS27 INS32 INS32 INS32 INS14 INS45 INS42 INS25 INS42 INS42 INS42 INS42 INS40 INS42 INS45 INS43 INS45 INS32 INS8 INS25 INS42 INS45 INS42 INS2 INS21 INS25 INS32 INS8 MOV8 INS42 INS42 INS37 INS32 INS8 INS8 INS45 INS42 INS2 INS21 INS25 INS42 INS45 INS42 INS2 INS21 INS21 INS42 INS42 INS37 INS32 INS8 INS8 INS42 INS42 INS7 INS7 INS42 INS45 INS42 INS2 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS7 INS7 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS32 INS42 INS32 INS42 INS38 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS38 INS42 INS42 INS42 DEL18 DEL8 DEL25 DEL8