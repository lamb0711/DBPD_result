merge from trunk r1613787

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1613788 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.server.api.records.MasterKey;
+import org.apache.hadoop.yarn.server.resourcemanager.RMContext;
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStore.RMState;
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.AMRMTokenSecretManagerState;
+  private RMContext rmContext;
-  public AMRMTokenSecretManager(Configuration conf) {
+  public AMRMTokenSecretManager(Configuration conf, RMContext rmContext) {
+    this.rmContext = rmContext;
+      AMRMTokenSecretManagerState state =
+          AMRMTokenSecretManagerState.newInstance(
+            this.currentMasterKey.getMasterKey(), null);
+      rmContext.getStateStore().storeOrUpdateAMRMTokenSecretManagerState(state,
+        false);
+      AMRMTokenSecretManagerState state =
+          AMRMTokenSecretManagerState.newInstance(
+            this.currentMasterKey.getMasterKey(),
+            this.nextMasterKey.getMasterKey());
+      rmContext.getStateStore().storeOrUpdateAMRMTokenSecretManagerState(state,
+        true);
-        throw new InvalidToken("Password not found for ApplicationAttempt "
-            + applicationAttemptId);
+        throw new InvalidToken(applicationAttemptId
+            + " not found in AMRMTokenSecretManager.");
-      throw new InvalidToken("Given AMRMToken for application : "
-          + applicationAttemptId.toString()
-          + " seems to have been generated illegally.");
+      throw new InvalidToken("Invalid AMRMToken from " + applicationAttemptId);
+
+  public void recover(RMState state) {
+    if (state.getAMRMTokenSecretManagerState() != null) {
+      // recover the current master key
+      MasterKey currentKey =
+          state.getAMRMTokenSecretManagerState().getCurrentMasterKey();
+      this.currentMasterKey =
+          new MasterKeyData(currentKey, createSecretKey(currentKey.getBytes()
+            .array()));
+
+      // recover the next master key if not null
+      MasterKey nextKey =
+          state.getAMRMTokenSecretManagerState().getNextMasterKey();
+      if (nextKey != null) {
+        this.nextMasterKey =
+            new MasterKeyData(nextKey, createSecretKey(nextKey.getBytes()
+              .array()));
+        this.timer.schedule(new NextKeyActivator(), this.activationDelay);
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS43 INS59 INS44 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS43 INS42 INS21 INS43 INS42 INS25 INS42 INS7 INS42 INS27 INS8 INS22 INS42 INS60 INS21 INS60 INS21 INS32 INS33 INS60 INS21 INS60 INS25 INS52 INS42 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS7 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS42 INS9 MOV43 INS42 INS42 INS32 INS22 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 UPD45 INS42 INS32 INS42 INS52 INS42 INS43 INS42 INS32 INS32 INS42 INS7 INS32 INS22 INS42 INS22 INS42 INS22 INS42 MOV43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS22 INS14 INS22 INS42 INS14 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS45 INS32 INS42 INS52 INS42 INS43 INS42 INS32 INS52 INS42 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 DEL45 DEL42 DEL42 DEL32 DEL45