HADOOP-15495. Upgrade commons-lang version to 3.7 in hadoop-common-project and hadoop-tools. Contributed by Takanobu Asanuma.

-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
-      sb.append(org.apache.commons.lang.StringUtils.capitalize(word));
+      sb.append(org.apache.commons.lang3.StringUtils.capitalize(word));
+  /**
+   * Same as WordUtils#wrap in commons-lang 2.6. Unlike commons-lang3, leading
+   * spaces on the first line are NOT stripped.
+   *
+   * @param str  the String to be word wrapped, may be null
+   * @param wrapLength  the column to wrap the words at, less than 1 is treated
+   *                   as 1
+   * @param newLineStr  the string to insert for a new line,
+   *  <code>null</code> uses the system property line separator
+   * @param wrapLongWords  true if long words (such as URLs) should be wrapped
+   * @return a line with newlines inserted, <code>null</code> if null input
+   */
+  public static String wrap(String str, int wrapLength, String newLineStr,
+      boolean wrapLongWords) {
+    if(str == null) {
+      return null;
+    } else {
+      if(newLineStr == null) {
+        newLineStr = System.lineSeparator();
+      }
+
+      if(wrapLength < 1) {
+        wrapLength = 1;
+      }
+
+      int inputLineLength = str.length();
+      int offset = 0;
+      StringBuffer wrappedLine = new StringBuffer(inputLineLength + 32);
+
+      while(inputLineLength - offset > wrapLength) {
+        if(str.charAt(offset) == 32) {
+          ++offset;
+        } else {
+          int spaceToWrapAt = str.lastIndexOf(32, wrapLength + offset);
+          if(spaceToWrapAt >= offset) {
+            wrappedLine.append(str.substring(offset, spaceToWrapAt));
+            wrappedLine.append(newLineStr);
+            offset = spaceToWrapAt + 1;
+          } else if(wrapLongWords) {
+            wrappedLine.append(str.substring(offset, wrapLength + offset));
+            wrappedLine.append(newLineStr);
+            offset += wrapLength;
+          } else {
+            spaceToWrapAt = str.indexOf(32, wrapLength + offset);
+            if(spaceToWrapAt >= 0) {
+              wrappedLine.append(str.substring(offset, spaceToWrapAt));
+              wrappedLine.append(newLineStr);
+              offset = spaceToWrapAt + 1;
+            } else {
+              wrappedLine.append(str.substring(offset));
+              offset = inputLineLength;
+            }
+          }
+        }
+      }
+
+      wrappedLine.append(str.substring(offset));
+      return wrappedLine.toString();
+    }
+  }

UPD40 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS25 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS27 INS8 INS8 INS42 INS33 INS41 INS25 INS25 INS60 INS60 INS60 INS61 INS21 INS41 INS33 INS27 INS8 INS27 INS8 INS39 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS32 INS32 UPD40 INS42 INS33 INS21 INS42 INS34 INS21 INS42 INS32 INS42 INS34 INS42 INS42 INS14 INS27 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS7 INS7 INS42 INS42 INS43 INS27 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS34 INS32 INS34 INS21 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS38 INS39 INS59 INS27 INS8 INS25 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS21 INS42 INS8 INS8 INS42 INS42 INS34 INS27 INS32 INS32 INS7 INS21 INS21 INS21 INS21 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS7 INS7 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS27 INS32 INS32 INS7 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42