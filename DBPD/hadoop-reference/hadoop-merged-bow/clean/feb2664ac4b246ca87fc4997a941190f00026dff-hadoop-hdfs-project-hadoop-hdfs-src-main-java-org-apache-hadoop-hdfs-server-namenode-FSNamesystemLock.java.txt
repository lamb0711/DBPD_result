HDFS-13946. Log longest FSN write/read lock held stack trace.

+import java.util.concurrent.atomic.AtomicReference;
+import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
-  /** Longest time (ms) a read lock was held since the last report. */
-  private final AtomicLong longestReadLockHeldIntervalMs = new AtomicLong(0);
+  /**
+   * The info (lock held time and stack trace) when longest time (ms) a read
+   * lock was held since the last report.
+   */
+  private final AtomicReference<ReadLockHeldInfo> longestReadLockHeldInfo =
+      new AtomicReference<>(new ReadLockHeldInfo(0, null));
+
+  /**
+   * The stack trace when longest time of the write lock
+   * was held since the last report.
+   */
+  private volatile String longestWriteLockHeldStackTrace;
-      long localLongestReadLock;
+      ReadLockHeldInfo localLockHeldInfo;
-        localLongestReadLock = longestReadLockHeldIntervalMs.get();
-      } while (localLongestReadLock - readLockIntervalMs < 0 &&
-          !longestReadLockHeldIntervalMs.compareAndSet(localLongestReadLock,
-              readLockIntervalMs));
+        localLockHeldInfo = longestReadLockHeldInfo.get();
+      } while (localLockHeldInfo.getIntervalMs() - readLockIntervalMs < 0 &&
+          !longestReadLockHeldInfo.compareAndSet(localLockHeldInfo,
+              new ReadLockHeldInfo(readLockIntervalMs,
+                  StringUtils.getStackTrace(Thread.currentThread()))));
-      long longestLockHeldIntervalMs =
-          longestReadLockHeldIntervalMs.getAndSet(0);
-      FSNamesystem.LOG.info("FSNamesystem read lock held for " +
-          readLockIntervalMs + " ms via\n" +
-          StringUtils.getStackTrace(Thread.currentThread()) +
-          "\tNumber of suppressed read-lock reports: " + numSuppressedWarnings +
-          "\n\tLongest read-lock held interval: " + longestLockHeldIntervalMs);
+      ReadLockHeldInfo lockHeldInfo = longestReadLockHeldInfo
+          .getAndSet(new ReadLockHeldInfo(0, null));
+      FSNamesystem.LOG.info(
+          "\tNumber of suppressed read-lock reports: {}" +
+          "\n\tLongest read-lock held interval: {}ms via {}",
+          numSuppressedWarnings, lockHeldInfo.getIntervalMs(),
+          lockHeldInfo.getStackTrace());
+      SummaryStatistics currentStats =
+          writeLockReportLogger.getCurrentStats("write", 0);
+      double currentMaxTime = currentStats != null ? currentStats.getMax() : 0;
+      if (currentMaxTime < writeLockIntervalMs) {
+        longestWriteLockHeldStackTrace =
+            StringUtils.getStackTrace(Thread.currentThread());
+      }
+
-      FSNamesystem.LOG.info("FSNamesystem write lock held for {} ms via {}\t" +
-          "Number of suppressed write-lock reports: {}\n\tLongest write-lock " +
-          "held interval: {} \n\tTotal suppressed write-lock held time: {}",
-          writeLockIntervalMs,
-          StringUtils.getStackTrace(Thread.currentThread()),
+      FSNamesystem.LOG.info(
+          "\tNumber of suppressed write-lock reports: {}" +
+          "\n\tLongest write-lock held interval: {}ms via {} " +
+          "\n\tTotal suppressed write-lock held time: {}",
+          longestWriteLockHeldStackTrace,
+
+  /**
+   * Read lock Held Info.
+   */
+  private static class ReadLockHeldInfo {
+    /** Read lock held time. */
+    private Long intervalMs;
+    /** The stack trace read lock was held. */
+    private String stackTrace;
+
+    ReadLockHeldInfo(long intervalMs, String stackTrace) {
+      this.intervalMs = intervalMs;
+      this.stackTrace = stackTrace;
+    }
+
+    public Long getIntervalMs() {
+      return this.intervalMs;
+    }
+
+    public String getStackTrace() {
+      return this.stackTrace;
+    }
+
+    @Override
+    public int hashCode() {
+      return this.intervalMs.hashCode();
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      return obj instanceof ReadLockHeldInfo && ((ReadLockHeldInfo) obj)
+          .getIntervalMs().compareTo(intervalMs) == 0;
+    }
+  }

INS26 INS26 INS40 INS40 INS23 INS55 INS74 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS43 INS43 UPD42 INS65 INS42 INS42 INS25 INS65 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS66 UPD66 UPD42 MOV42 INS42 INS74 INS14 INS66 INS66 MOV27 INS8 INS66 INS65 INS42 INS42 INS65 INS42 INS42 INS39 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS43 INS42 INS41 INS43 INS43 MOV34 INS33 INS60 INS60 MOV25 MOV21 INS66 INS66 INS42 INS7 INS7 INS22 INS22 INS32 INS42 INS27 UPD42 MOV42 INS42 INS43 INS43 INS43 INS59 INS39 INS59 INS27 MOV42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS62 INS27 INS42 UPD42 INS42 UPD42 INS27 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS16 INS42 INS42 INS21 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS43 INS32 INS34 UPD42 INS14 UPD45 MOV45 UPD45 MOV45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS34 INS27 INS32 INS34 INS7 UPD45 UPD45 UPD45 INS42 INS32 INS42 INS42 UPD42 INS32 UPD42 UPD42 INS14 INS43 INS34 INS33 INS42 INS33 INS42 INS42 INS42 MOV32 INS36 INS42 UPD42 INS42 INS42 INS43 INS42 MOV32 INS42 INS11 INS42 INS43 INS42 INS42 DEL43 DEL43 DEL39 DEL42 DEL42 DEL39 DEL34 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27