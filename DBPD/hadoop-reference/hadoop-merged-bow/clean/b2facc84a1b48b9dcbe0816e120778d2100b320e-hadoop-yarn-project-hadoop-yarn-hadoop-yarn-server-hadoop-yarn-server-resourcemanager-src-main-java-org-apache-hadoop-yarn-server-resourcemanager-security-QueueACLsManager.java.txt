YARN-9460. QueueACLsManager and ReservationsACLManager should not use instanceof checks. Contributed by Bilwa S T.

-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.hadoop.yarn.security.AccessRequest;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerUtils;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CSQueue;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FSQueue;
-
-public class QueueACLsManager {
+@SuppressWarnings("checkstyle:visibilitymodifier")
+public abstract class QueueACLsManager {
-  private static final Logger LOG =
-      LoggerFactory.getLogger(QueueACLsManager.class);
-
-  private ResourceScheduler scheduler;
-  private boolean isACLsEnable;
-  private YarnAuthorizationProvider authorizer;
+  ResourceScheduler scheduler;
+  boolean isACLsEnable;
+  YarnAuthorizationProvider authorizer;
-  public QueueACLsManager() {
+  public QueueACLsManager(Configuration conf) {
-  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,
-      RMApp app, String remoteAddress, List<String> forwardedAddresses) {
-    if (!isACLsEnable) {
-      return true;
-    }
-
+  /**
+   * Get queue acl manager corresponding to the scheduler.
+   * @param scheduler the scheduler for which the queue acl manager is required
+   * @param conf
+   * @return {@link QueueACLsManager}
+   */
+  public static QueueACLsManager getQueueACLsManager(
+      ResourceScheduler scheduler, Configuration conf) {
-      CSQueue queue = ((CapacityScheduler) scheduler).getQueue(app.getQueue());
-      if (queue == null) {
-        if (((CapacityScheduler) scheduler).isAmbiguous(app.getQueue())) {
-          LOG.error("Queue " + app.getQueue() + " is ambiguous for "
-              + app.getApplicationId());
-          //if we cannot decide which queue to submit we should deny access
-          return false;
-        }
-
-        // The application exists but the associated queue does not exist.
-        // This may be due to a queue that is not defined when the RM restarts.
-        // At this point we choose to log the fact and allow users to access
-        // and view the apps in a removed queue. This should only happen on
-        // application recovery.
-        LOG.error("Queue " + app.getQueue() + " does not exist for " + app
-            .getApplicationId());
-        return true;
-      }
-      return authorizer.checkPermission(
-          new AccessRequest(queue.getPrivilegedEntity(), callerUGI,
-              SchedulerUtils.toAccessType(acl),
-              app.getApplicationId().toString(), app.getName(),
-              remoteAddress, forwardedAddresses));
+      return new CapacityQueueACLsManager(scheduler, conf);
+    } else if (scheduler instanceof FairScheduler) {
+      return new FairQueueACLsManager(scheduler, conf);
-      return scheduler.checkAccess(callerUGI, acl, app.getQueue());
+      return new GenericQueueACLsManager(scheduler, conf);
+  public abstract boolean checkAccess(UserGroupInformation callerUGI,
+      QueueACL acl, RMApp app, String remoteAddress,
+      List<String> forwardedAddresses);
+
-  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,
-      RMApp app, String remoteAddress, List<String> forwardedAddresses,
-      String targetQueue) {
-    if (!isACLsEnable) {
-      return true;
-    }
-
-    // Based on the discussion in YARN-5554 detail on why there are two
-    // versions:
-    // The access check inside these calls is currently scheduler dependent.
-    // This is due to the extra parameters needed for the CS case which are not
-    // in the version defined in the YarnScheduler interface. The second
-    // version is added for the moving the application case. The check has
-    // extra logging to distinguish between the queue not existing in the
-    // application move request case and the real access denied case.
-    if (scheduler instanceof CapacityScheduler) {
-      CapacityScheduler cs = ((CapacityScheduler) scheduler);
-      CSQueue queue = cs.getQueue(targetQueue);
-      if (queue == null) {
-        LOG.warn("Target queue " + targetQueue
-            + (cs.isAmbiguous(targetQueue) ?
-                " is ambiguous while trying to move " :
-                " does not exist while trying to move ")
-            + app.getApplicationId());
-        return false;
-      }
-      return authorizer.checkPermission(
-          new AccessRequest(queue.getPrivilegedEntity(), callerUGI,
-              SchedulerUtils.toAccessType(acl),
-              app.getApplicationId().toString(), app.getName(),
-              remoteAddress, forwardedAddresses));
-    } else if (scheduler instanceof FairScheduler) {
-      FSQueue queue = ((FairScheduler) scheduler).getQueueManager().
-          getQueue(targetQueue);
-      if (queue == null) {
-        LOG.warn("Target queue " + targetQueue
-            + " does not exist while trying to move "
-            + app.getApplicationId());
-        return false;
-      }
-      return scheduler.checkAccess(callerUGI, acl, targetQueue);
-    } else {
-      // Any other scheduler just try
-      return scheduler.checkAccess(callerUGI, acl, targetQueue);
-    }
-  }
+  public abstract boolean checkAccess(UserGroupInformation callerUGI,
+      QueueACL acl, RMApp app, String remoteAddress,
+      List<String> forwardedAddresses, String targetQueue);

INS79 INS83 INS83 INS42 INS31 INS31 INS42 INS45 INS44 INS29 MOV83 INS83 MOV43 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 INS83 INS43 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS42 INS66 INS42 INS66 INS42 INS66 INS65 INS42 UPD42 MOV42 MOV62 INS8 INS25 INS42 INS41 MOV62 MOV8 INS8 INS14 INS41 MOV41 INS43 INS42 INS42 INS14 INS14 UPD42 MOV42 INS43 INS42 INS42 UPD43 MOV43 INS42 INS42 UPD42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL57 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL9 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL14 DEL32 DEL39 DEL42 DEL42 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL45 DEL16 DEL36 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL14 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL25 DEL8