YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)

+import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.KeyConverter;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.LongConverter;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.Separator;
+  private final KeyConverter<FlowActivityRowKey> flowActivityRowKeyConverter =
+      new FlowActivityRowKeyConverter();
+  /**
+   * @param clusterId identifying the cluster
+   * @param dayTs to be converted to the top of the day timestamp
+   * @param userId identifying user
+   * @param flowName identifying the flow
+   */
+    this(clusterId, dayTs, userId, flowName, true);
+  }
+
+  /**
+   * @param clusterId identifying the cluster
+   * @param timestamp when the flow activity happened. May be converted to the
+   *          top of the day depending on the convertDayTsToTopOfDay argument.
+   * @param userId identifying user
+   * @param flowName identifying the flow
+   * @param convertDayTsToTopOfDay if true and timestamp isn't null, then
+   *          timestamp will be converted to the top-of-the day timestamp
+   */
+  protected FlowActivityRowKey(String clusterId, Long timestamp, String userId,
+      String flowName, boolean convertDayTsToTopOfDay) {
-    this.dayTs = dayTs;
+    if (convertDayTsToTopOfDay && (timestamp != null)) {
+      this.dayTs = TimelineStorageUtils.getTopOfTheDayTimestamp(timestamp);
+    } else {
+      this.dayTs = timestamp;
+    }
-   * Constructs a row key prefix for the flow activity table as follows:
-   * {@code clusterId!}.
-   *
-   * @param clusterId Cluster Id.
-   * @return byte array with the row key prefix
-   */
-  public static byte[] getRowKeyPrefix(String clusterId) {
-    return FlowActivityRowKeyConverter.getInstance().encode(
-        new FlowActivityRowKey(clusterId, null, null, null));
-  }
-
-  /**
-   * Constructs a row key prefix for the flow activity table as follows:
-   * {@code clusterId!dayTimestamp!}.
-   *
-   * @param clusterId Cluster Id.
-   * @param dayTs Start of the day timestamp.
-   * @return byte array with the row key prefix
-   */
-  public static byte[] getRowKeyPrefix(String clusterId, long dayTs) {
-    return FlowActivityRowKeyConverter.getInstance().encode(
-        new FlowActivityRowKey(clusterId, dayTs, null, null));
-  }
-
-  /**
-   * @param clusterId Cluster Id.
-   * @param eventTs event's TimeStamp.
-   * @param userId User Id.
-   * @param flowName Flow Name.
-  public static byte[] getRowKey(String clusterId, long eventTs, String userId,
-      String flowName) {
-    // convert it to Day's time stamp
-    eventTs = TimelineStorageUtils.getTopOfTheDayTimestamp(eventTs);
-    return FlowActivityRowKeyConverter.getInstance().encode(
-        new FlowActivityRowKey(clusterId, eventTs, userId, flowName));
+  public byte[] getRowKey() {
+    return flowActivityRowKeyConverter.encode(this);
-    return FlowActivityRowKeyConverter.getInstance().decode(rowKey);
+    return new FlowActivityRowKeyConverter().decode(rowKey);
+  }
+
+  /**
+   * Encodes and decodes row key for flow activity table. The row key is of the
+   * form : clusterId!dayTimestamp!user!flowName. dayTimestamp(top of the day
+   * timestamp) is a long and rest are strings.
+   * <p>
+   */
+  final private static class FlowActivityRowKeyConverter implements
+      KeyConverter<FlowActivityRowKey> {
+
+    private FlowActivityRowKeyConverter() {
+    }
+
+    /**
+     * The flow activity row key is of the form
+     * clusterId!dayTimestamp!user!flowName with each segment separated by !.
+     * The sizes below indicate sizes of each one of these segements in
+     * sequence. clusterId, user and flowName are strings. Top of the day
+     * timestamp is a long hence 8 bytes in size. Strings are variable in size
+     * (i.e. they end whenever separator is encountered). This is used while
+     * decoding and helps in determining where to split.
+     */
+    private static final int[] SEGMENT_SIZES = {Separator.VARIABLE_SIZE,
+        Bytes.SIZEOF_LONG, Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE };
+
+    /*
+     * (non-Javadoc)
+     *
+     * Encodes FlowActivityRowKey object into a byte array with each
+     * component/field in FlowActivityRowKey separated by Separator#QUALIFIERS.
+     * This leads to an flow activity table row key of the form
+     * clusterId!dayTimestamp!user!flowName. If dayTimestamp in passed
+     * FlowActivityRowKey object is null and clusterId is not null, then this
+     * returns a row key prefix as clusterId! and if userId in
+     * FlowActivityRowKey is null (and the fields preceding it i.e. clusterId
+     * and dayTimestamp are not null), this returns a row key prefix as
+     * clusterId!dayTimeStamp! dayTimestamp is inverted while encoding as it
+     * helps maintain a descending order for row keys in flow activity table.
+     *
+     * @see org.apache.hadoop.yarn.server.timelineservice.storage.common
+     * .KeyConverter#encode(java.lang.Object)
+     */
+    @Override
+    public byte[] encode(FlowActivityRowKey rowKey) {
+      if (rowKey.getDayTimestamp() == null) {
+        return Separator.QUALIFIERS.join(Separator.encode(
+            rowKey.getClusterId(), Separator.SPACE, Separator.TAB,
+            Separator.QUALIFIERS), Separator.EMPTY_BYTES);
+      }
+      if (rowKey.getUserId() == null) {
+        return Separator.QUALIFIERS.join(Separator.encode(
+            rowKey.getClusterId(), Separator.SPACE, Separator.TAB,
+            Separator.QUALIFIERS), Bytes.toBytes(LongConverter
+            .invertLong(rowKey.getDayTimestamp())), Separator.EMPTY_BYTES);
+      }
+      return Separator.QUALIFIERS.join(Separator.encode(rowKey.getClusterId(),
+          Separator.SPACE, Separator.TAB, Separator.QUALIFIERS), Bytes
+          .toBytes(LongConverter.invertLong(rowKey.getDayTimestamp())),
+          Separator.encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,
+              Separator.QUALIFIERS), Separator.encode(rowKey.getFlowName(),
+              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS));
+    }
+
+    /*
+     * (non-Javadoc)
+     *
+     * @see
+     * org.apache.hadoop.yarn.server.timelineservice.storage.common
+     * .KeyConverter#decode(byte[])
+     */
+    @Override
+    public FlowActivityRowKey decode(byte[] rowKey) {
+      byte[][] rowKeyComponents =
+          Separator.QUALIFIERS.split(rowKey, SEGMENT_SIZES);
+      if (rowKeyComponents.length != 4) {
+        throw new IllegalArgumentException("the row key is not valid for "
+            + "a flow activity");
+      }
+      String clusterId =
+          Separator.decode(Bytes.toString(rowKeyComponents[0]),
+              Separator.QUALIFIERS, Separator.TAB, Separator.SPACE);
+      Long dayTs = LongConverter.invertLong(Bytes.toLong(rowKeyComponents[1]));
+      String userId =
+          Separator.decode(Bytes.toString(rowKeyComponents[2]),
+              Separator.QUALIFIERS, Separator.TAB, Separator.SPACE);
+      String flowName =
+          Separator.decode(Bytes.toString(rowKeyComponents[3]),
+              Separator.QUALIFIERS, Separator.TAB, Separator.SPACE);
+      return new FlowActivityRowKey(clusterId, dayTs, userId, flowName);
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS55 INS83 INS83 INS74 INS59 MOV29 MOV83 UPD42 MOV42 MOV44 MOV44 MOV44 MOV44 INS8 INS29 UPD83 INS44 INS44 MOV29 INS83 MOV5 INS42 MOV8 INS29 INS83 INS83 INS83 INS42 INS74 INS31 INS23 INS31 MOV31 INS43 MOV43 INS42 INS14 INS65 INS65 UPD65 INS17 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS25 MOV65 INS43 INS43 INS83 INS42 INS8 INS29 INS83 INS83 INS83 INS5 INS59 INS78 INS83 MOV5 INS42 MOV44 MOV8 INS78 INS43 INS42 INS42 INS43 INS42 UPD66 MOV66 INS42 UPD66 MOV66 UPD42 UPD66 INS42 UPD66 INS42 INS42 INS42 INS42 INS9 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS8 UPD66 UPD66 MOV66 UPD66 INS66 INS42 INS42 INS65 INS39 INS85 INS42 INS4 INS42 MOV43 UPD42 INS25 INS25 INS42 INS42 INS5 UPD42 INS60 INS25 INS60 INS60 INS60 INS60 INS41 INS42 INS42 INS36 MOV21 INS21 UPD42 MOV42 INS52 INS14 INS66 UPD66 MOV66 INS66 UPD66 MOV66 UPD66 MOV66 INS66 INS66 INS40 INS40 INS40 INS40 INS27 INS8 INS27 INS8 INS39 INS85 INS5 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS14 INS27 INS7 INS43 INS32 INS33 INS41 INS32 INS33 INS41 INS40 INS42 INS32 INS32 INS32 INS32 INS39 INS85 INS85 INS42 INS32 INS40 INS34 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 MOV43 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS33 INS32 INS22 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS40 INS40 INS42 INS42 MOV32 INS42 MOV42 INS32 INS40 INS40 INS40 INS42 INS42 INS32 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS40 INS40 INS40 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS32 INS40 INS40 INS40 INS42 INS42 INS32 INS40 INS40 INS40 INS42 INS42 INS42 INS52 INS42 INS40 INS42 INS32 INS40 INS40 INS42 INS32 INS32 INS40 INS42 INS42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS27 UPD42 MOV42 UPD42 MOV42 INS2 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS32 INS40 INS40 INS40 INS42 INS42 INS32 INS40 INS40 INS40 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS45 INS45 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL66 DEL65 DEL65 DEL42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL32 DEL42 DEL33 DEL33 DEL33 DEL14 DEL83 DEL39 DEL85 DEL5 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL65 DEL42 DEL65 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL42 DEL32 DEL65 DEL39 DEL42 DEL42 DEL33 DEL33 DEL14 DEL83 DEL42 DEL39 DEL42 DEL42 DEL32 DEL7 DEL21 DEL32 DEL14 DEL32 DEL41