YARN-701. Use application tokens irrespective of secure or non-secure mode. Contributed by Vinod K V.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504604 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.security.token.TokenIdentifier;
+import org.apache.hadoop.yarn.security.AMRMTokenIdentifier;
-//    this.reboot.containers = new ArrayList<Container>();
+    Configuration serverConf = conf;
+    if (!UserGroupInformation.isSecurityEnabled()) {
+      // If the auth is not-simple, enforce it to be token-based.
+      serverConf = new Configuration(conf);
+      serverConf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,
+        UserGroupInformation.AuthenticationMethod.TOKEN.toString());
+    }
-          conf, this.rmContext.getAMRMTokenSecretManager(),
-          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, 
+          serverConf, this.rmContext.getAMRMTokenSecretManager(),
+          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, 
+  // Obtain the needed AMRMTokenIdentifier from the remote-UGI. RPC layer
+  // currently sets only the required id, but iterate through anyways just to be
+  // sure.
+  private AMRMTokenIdentifier selectAMRMTokenIdentifier(
+      UserGroupInformation remoteUgi) throws IOException {
+    AMRMTokenIdentifier result = null;
+    Set<TokenIdentifier> tokenIds = remoteUgi.getTokenIdentifiers();
+    for (TokenIdentifier tokenId : tokenIds) {
+      if (tokenId instanceof AMRMTokenIdentifier) {
+        result = (AMRMTokenIdentifier) tokenId;
+        break;
+      }
+    }
+
+    return result;
+  }
+
-    if (!UserGroupInformation.isSecurityEnabled()) {
-      return;
-    }
-
-    if (!remoteUgi.getUserName().equals(appAttemptIDStr)) {
+    boolean tokenFound = false;
+    String message = "";
+    AMRMTokenIdentifier appTokenIdentifier = null;
+    try {
+      appTokenIdentifier = selectAMRMTokenIdentifier(remoteUgi);
+      if (appTokenIdentifier == null) {
+        tokenFound = false;
+        message = "No AMRMToken found for " + appAttemptIDStr;
+      } else {
+        tokenFound = true;
+      }
+    } catch (IOException e) {
+      tokenFound = false;
+      message =
+          "Got exception while looking for AMRMToken for " + appAttemptIDStr;
+    }
+
+    if (!tokenFound) {
+      LOG.warn(message);
+      throw RPCUtil.getRemoteException(message);
+    }
+
+    ApplicationAttemptId remoteApplicationAttemptId =
+        appTokenIdentifier.getApplicationAttemptId();
+    if (!remoteApplicationAttemptId.equals(appAttemptID)) {
-          + "Expected ApplicationAttemptID: " + remoteUgi.getUserName()
+          + "Expected ApplicationAttemptID: " + remoteApplicationAttemptId

INS26 INS26 INS40 INS40 INS31 INS83 INS43 INS42 INS44 INS43 INS8 MOV25 INS60 INS25 INS42 INS43 INS42 INS42 INS60 INS60 INS70 INS41 INS60 INS60 INS60 INS54 INS60 INS43 INS59 INS38 INS8 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS39 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS42 INS42 INS42 MOV32 INS21 INS21 INS42 INS42 INS33 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS9 INS42 INS42 INS45 INS42 INS42 INS33 INS21 INS25 INS44 INS8 INS42 INS21 INS53 INS42 INS42 INS32 INS7 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS62 INS8 INS7 INS27 INS8 INS8 INS43 INS42 INS21 INS21 INS32 INS32 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS14 INS42 INS42 INS40 INS32 UPD42 INS42 INS43 INS21 INS10 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS40 INS42 INS42 INS7 INS42 INS42 INS7 INS7 INS7 INS42 INS9 INS42 INS27 INS42 INS42 INS42 INS11 INS42 INS9 INS42 INS27 INS42 INS9 INS45 INS42 INS43 INS42 INS45 INS42 INS42 DEL41 DEL42 DEL32 DEL42 DEL42 DEL32