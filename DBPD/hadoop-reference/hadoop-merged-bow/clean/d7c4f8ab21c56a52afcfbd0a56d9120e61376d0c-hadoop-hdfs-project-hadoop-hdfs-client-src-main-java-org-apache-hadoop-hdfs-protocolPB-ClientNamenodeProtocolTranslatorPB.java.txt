HDFS-13616. Batch listing of multiple directories (#1725)


+import org.apache.hadoop.hdfs.protocol.BatchedDirectoryListing;
+import org.apache.hadoop.hdfs.protocol.HdfsPartialListing;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.GetBatchedListingRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.GetBatchedListingResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.BatchedDirectoryListingProto;
+import org.apache.hadoop.ipc.RemoteException;
+  public BatchedDirectoryListing getBatchedListing(
+      String[] srcs, byte[] startAfter, boolean needLocation)
+      throws IOException {
+    GetBatchedListingRequestProto req = GetBatchedListingRequestProto
+        .newBuilder()
+        .addAllPaths(Arrays.asList(srcs))
+        .setStartAfter(ByteString.copyFrom(startAfter))
+        .setNeedLocation(needLocation).build();
+    try {
+      GetBatchedListingResponseProto result =
+          rpcProxy.getBatchedListing(null, req);
+
+      if (result.getListingsCount() > 0) {
+        HdfsPartialListing[] listingArray =
+            new HdfsPartialListing[result.getListingsCount()];
+        int listingIdx = 0;
+        for (BatchedDirectoryListingProto proto : result.getListingsList()) {
+          HdfsPartialListing listing;
+          if (proto.hasException()) {
+            HdfsProtos.RemoteExceptionProto reProto = proto.getException();
+            RemoteException ex = new RemoteException(
+                reProto.getClassName(), reProto.getMessage());
+            listing = new HdfsPartialListing(proto.getParentIdx(), ex);
+          } else {
+            List<HdfsFileStatus> statuses =
+                PBHelperClient.convertHdfsFileStatus(
+                    proto.getPartialListingList());
+            listing = new HdfsPartialListing(proto.getParentIdx(), statuses);
+          }
+          listingArray[listingIdx++] = listing;
+        }
+        BatchedDirectoryListing batchedListing =
+            new BatchedDirectoryListing(listingArray, result.getHasMore(),
+                result.getStartAfter().toByteArray());
+        return batchedListing;
+      }
+      return null;
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+
+  @Override

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS5 INS42 INS5 INS42 INS39 INS42 INS42 INS60 INS54 INS43 INS85 INS39 INS85 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS32 INS60 INS25 INS41 INS44 INS8 INS32 INS42 INS43 INS59 INS27 INS8 INS33 INS43 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS34 INS60 INS60 INS70 INS60 INS41 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS5 INS59 INS39 INS59 INS44 INS32 INS8 INS43 INS59 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS85 INS42 INS3 INS42 INS34 INS43 INS42 INS42 INS42 INS60 INS25 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS43 INS59 INS32 INS8 INS8 INS7 INS43 INS42 INS32 INS32 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS21 INS60 INS21 INS2 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS7 INS74 INS59 INS7 INS42 INS37 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS14 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS32 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42