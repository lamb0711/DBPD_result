YARN-2468. Enhanced NodeManager to support log handling APIs (YARN-2569) for use by long running services. Contributed by Xuan Gong.

+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Set;
+import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.yarn.api.records.LogAggregationContext;
+import org.apache.hadoop.yarn.logaggregation.LogAggregationUtils;
+import org.apache.hadoop.yarn.server.nodemanager.Context;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Sets;
+
-  private static final String TMP_FILE_SUFFIX = ".tmp";
+  private final LogAggregationContext logAggregationContext;
+  private final Context context;
-  private LogWriter writer = null;
+  private final Map<ContainerId, ContainerLogAggregator> containerLogAggregators =
+      new HashMap<ContainerId, ContainerLogAggregator>();
-      DeletionService deletionService, Configuration conf, ApplicationId appId,
-      UserGroupInformation userUgi, LocalDirsHandlerService dirsHandler,
-      Path remoteNodeLogFileForApp,
+      DeletionService deletionService, Configuration conf,
+      ApplicationId appId, UserGroupInformation userUgi,
+      LocalDirsHandlerService dirsHandler, Path remoteNodeLogFileForApp,
-      Map<ApplicationAccessType, String> appAcls) {
+      Map<ApplicationAccessType, String> appAcls,
+      LogAggregationContext logAggregationContext,
+      Context context) {
+    this.logAggregationContext = logAggregationContext;
+    this.context = context;
-  private void uploadLogsForContainer(ContainerId containerId) {
-
+  private void uploadLogsForContainers() {
-    // Lazy creation of the writer
-    if (this.writer == null) {
-      LOG.info("Starting aggregate log-file for app " + this.applicationId
-          + " at " + this.remoteNodeTmpLogFileForApp);
-      try {
-        this.writer =
-            new LogWriter(this.conf, this.remoteNodeTmpLogFileForApp,
-                this.userUgi);
-        //Write ACLs once when and if the writer is created.
-        this.writer.writeApplicationACLs(appAcls);
-        this.writer.writeApplicationOwner(this.userUgi.getShortUserName());
-      } catch (IOException e) {
-        LOG.error("Cannot create writer for app " + this.applicationId
-            + ". Disabling log-aggregation for this app.", e);
-        this.logAggregationDisabled = true;
-        return;
+    // Create a set of Containers whose logs will be uploaded in this cycle.
+    // It includes:
+    // a) all containers in pendingContainers: those containers are finished
+    //    and satisfy the retentionPolicy.
+    // b) some set of running containers: For all the Running containers,
+    // we have ContainerLogsRetentionPolicy.AM_AND_FAILED_CONTAINERS_ONLY,
+    // so simply set wasContainerSuccessful as true to
+    // bypass FAILED_CONTAINERS check and find the running containers 
+    // which satisfy the retentionPolicy.
+    Set<ContainerId> pendingContainerInThisCycle = new HashSet<ContainerId>();
+    this.pendingContainers.drainTo(pendingContainerInThisCycle);
+    Set<ContainerId> finishedContainers =
+        new HashSet<ContainerId>(pendingContainerInThisCycle);
+    if (this.context.getApplications().get(this.appId) != null) {
+      for (ContainerId container : this.context.getApplications()
+        .get(this.appId).getContainers().keySet()) {
+        if (shouldUploadLogs(container, true)) {
+          pendingContainerInThisCycle.add(container);
+        }
-    LOG.info("Uploading logs for container " + containerId
-        + ". Current good log dirs are "
-        + StringUtils.join(",", dirsHandler.getLogDirs()));
-    LogKey logKey = new LogKey(containerId);
-    LogValue logValue =
-        new LogValue(dirsHandler.getLogDirs(), containerId,
-          userUgi.getShortUserName());
+    LogWriter writer = null;
-      this.writer.append(logKey, logValue);
-    } catch (IOException e) {
-      LOG.error("Couldn't upload logs for " + containerId
-          + ". Skipping this container.");
+      try {
+        writer =
+            new LogWriter(this.conf, this.remoteNodeTmpLogFileForApp,
+              this.userUgi);
+        // Write ACLs once when the writer is created.
+        writer.writeApplicationACLs(appAcls);
+        writer.writeApplicationOwner(this.userUgi.getShortUserName());
+
+      } catch (IOException e1) {
+        LOG.error("Cannot create writer for app " + this.applicationId
+            + ". Skip log upload this time. ");
+        return;
+      }
+
+      boolean uploadedLogsInThisCycle = false;
+      for (ContainerId container : pendingContainerInThisCycle) {
+        ContainerLogAggregator aggregator = null;
+        if (containerLogAggregators.containsKey(container)) {
+          aggregator = containerLogAggregators.get(container);
+        } else {
+          aggregator = new ContainerLogAggregator(container);
+          containerLogAggregators.put(container, aggregator);
+        }
+        Set<Path> uploadedFilePathsInThisCycle =
+            aggregator.doContainerLogAggregation(writer);
+        if (uploadedFilePathsInThisCycle.size() > 0) {
+          uploadedLogsInThisCycle = true;
+        }
+        this.delService.delete(this.userUgi.getShortUserName(), null,
+          uploadedFilePathsInThisCycle
+            .toArray(new Path[uploadedFilePathsInThisCycle.size()]));
+
+        // This container is finished, and all its logs have been uploaded,
+        // remove it from containerLogAggregators.
+        if (finishedContainers.contains(container)) {
+          containerLogAggregators.remove(container);
+        }
+      }
+
+      if (writer != null) {
+        writer.close();
+      }
+
+      final Path renamedPath = logAggregationContext == null ||
+          logAggregationContext.getRollingIntervalSeconds() <= 0
+              ? remoteNodeLogFileForApp : new Path(
+                remoteNodeLogFileForApp.getParent(),
+                remoteNodeLogFileForApp.getName() + "_"
+                    + System.currentTimeMillis());
+
+      final boolean rename = uploadedLogsInThisCycle;
+      try {
+        userUgi.doAs(new PrivilegedExceptionAction<Object>() {
+          @Override
+          public Object run() throws Exception {
+            FileSystem remoteFS = FileSystem.get(conf);
+            if (remoteFS.exists(remoteNodeTmpLogFileForApp)
+                && rename) {
+              remoteFS.rename(remoteNodeTmpLogFileForApp, renamedPath);
+            }
+            return null;
+          }
+        });
+      } catch (Exception e) {
+        LOG.error(
+          "Failed to move temporary log file to final location: ["
+              + remoteNodeTmpLogFileForApp + "] to ["
+              + renamedPath + "]", e);
+      }
+    } finally {
+      if (writer != null) {
+        writer.close();
+      }
-    ContainerId containerId;
-
-          wait(THREAD_SLEEP_TIME);
+          if (this.logAggregationContext != null && this.logAggregationContext
+              .getRollingIntervalSeconds() > 0) {
+            wait(this.logAggregationContext.getRollingIntervalSeconds() * 1000);
+            if (this.appFinishing.get() || this.aborted.get()) {
+              break;
+            }
+            uploadLogsForContainers();
+          } else {
+            wait(THREAD_SLEEP_TIME);
+          }
-    // Application is finished. Finish pending-containers
-    while ((containerId = this.pendingContainers.poll()) != null) {
-      uploadLogsForContainer(containerId);
-    }
+    // App is finished, upload the container logs.
+    uploadLogsForContainers();
-
-    if (this.writer != null) {
-      this.writer.close();
-      LOG.info("Finished aggregate log-file for app " + this.applicationId);
-    }
-
-    try {
-      userUgi.doAs(new PrivilegedExceptionAction<Object>() {
-        @Override
-        public Object run() throws Exception {
-          FileSystem remoteFS = FileSystem.get(conf);
-          remoteFS.rename(remoteNodeTmpLogFileForApp, remoteNodeLogFileForApp);
-          return null;
-        }
-      });
-    } catch (Exception e) {
-      LOG.error("Failed to move temporary log file to final location: ["
-          + remoteNodeTmpLogFileForApp + "] to [" + remoteNodeLogFileForApp
-          + "]", e);
-    }
-        (remoteNodeLogFileForApp.getName() + TMP_FILE_SUFFIX));
+      (remoteNodeLogFileForApp.getName() + LogAggregationUtils.TMP_FILE_SUFFIX));
+  // TODO: The condition: containerId.getId() == 1 to determine an AM container
+  // is not always true.
+
+  @Private
+  @VisibleForTesting
+  public synchronized void doLogAggregationOutOfBand() {
+    LOG.info("Do OutOfBand log aggregation");
+    this.notifyAll();
+  }
+
+  private class ContainerLogAggregator {
+    private final ContainerId containerId;
+    private Set<String> uploadedFileMeta =
+        new HashSet<String>();
+    
+    public ContainerLogAggregator(ContainerId containerId) {
+      this.containerId = containerId;
+    }
+
+    public Set<Path> doContainerLogAggregation(LogWriter writer) {
+      LOG.info("Uploading logs for container " + containerId
+          + ". Current good log dirs are "
+          + StringUtils.join(",", dirsHandler.getLogDirs()));
+      final LogKey logKey = new LogKey(containerId);
+      final LogValue logValue =
+          new LogValue(dirsHandler.getLogDirs(), containerId,
+            userUgi.getShortUserName(), logAggregationContext,
+            this.uploadedFileMeta);
+      try {
+        writer.append(logKey, logValue);
+      } catch (Exception e) {
+        LOG.error("Couldn't upload logs for " + containerId
+            + ". Skipping this container.");
+        return new HashSet<Path>();
+      }
+      this.uploadedFileMeta.addAll(logValue
+        .getCurrentUpLoadedFileMeta());
+      // if any of the previous uploaded logs have been deleted,
+      // we need to remove them from alreadyUploadedLogs
+      Iterable<String> mask =
+          Iterables.filter(uploadedFileMeta, new Predicate<String>() {
+            @Override
+            public boolean apply(String next) {
+              return logValue.getAllExistingFilesMeta().contains(next);
+            }
+          });
+
+      this.uploadedFileMeta = Sets.newHashSet(mask);
+      return logValue.getCurrentUpLoadedFilesPath();
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS55 INS43 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS44 INS44 UPD42 INS43 INS78 INS78 INS83 INS83 INS39 INS42 INS8 INS83 INS42 INS23 INS23 INS31 INS31 INS42 UPD42 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS43 INS42 INS21 INS21 INS60 INS21 INS60 INS60 INS54 MOV21 INS42 INS42 INS42 INS21 INS21 INS83 INS83 MOV43 MOV59 INS83 INS74 INS59 INS83 INS42 MOV44 INS8 INS83 INS74 INS42 INS44 INS8 INS42 INS42 INS42 INS74 INS42 INS42 INS7 INS7 INS74 INS59 MOV32 INS74 INS59 UPD27 MOV43 MOV59 INS8 INS8 INS14 INS32 INS32 INS43 MOV43 INS42 INS14 INS21 INS43 INS43 INS43 INS42 MOV21 MOV60 MOV60 MOV54 INS21 INS60 INS21 INS41 INS43 INS43 INS43 INS22 INS42 INS22 INS42 INS43 INS43 INS42 INS14 INS42 UPD42 INS43 INS43 INS42 INS14 INS32 INS70 MOV54 INS60 INS70 INS25 INS60 INS60 MOV54 INS25 UPD42 INS43 INS32 INS36 INS42 INS42 INS45 INS52 INS42 INS42 INS74 INS7 INS42 INS42 INS42 INS83 INS83 INS32 INS74 INS59 INS7 INS32 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS32 INS42 INS22 INS44 INS32 INS8 INS39 INS59 INS44 INS42 INS8 INS27 INS8 INS83 MOV43 INS59 INS83 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS27 INS43 INS43 INS22 INS42 INS22 INS42 INS32 INS43 INS43 INS42 INS32 INS22 INS32 INS42 INS42 INS43 INS43 INS43 INS43 INS22 INS42 INS52 INS42 INS43 INS42 INS32 INS42 INS25 INS42 INS9 INS43 INS42 INS60 INS25 INS60 INS25 INS21 INS25 INS42 INS33 INS21 INS42 INS16 INS42 INS42 INS42 INS33 INS21 INS32 INS40 INS42 INS42 INS52 INS42 INS42 INS22 UPD43 INS41 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV52 UPD42 MOV42 INS42 INS32 INS42 INS32 INS8 UPD42 INS42 INS43 INS59 INS32 INS8 INS8 INS74 INS59 INS27 INS8 INS32 INS32 INS8 INS32 INS27 INS42 MOV14 INS32 INS8 INS42 INS42 INS52 INS42 INS42 UPD42 INS14 INS74 INS1 INS32 INS42 INS22 INS42 INS42 INS9 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS21 INS21 INS21 INS43 INS43 INS42 INS32 INS32 INS34 INS21 INS22 INS42 INS32 INS33 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS27 INS27 MOV27 INS42 INS42 INS25 INS74 INS43 INS43 INS31 INS22 INS42 MOV52 UPD42 MOV42 INS32 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS52 INS42 INS22 INS42 INS42 INS42 INS3 INS32 INS42 INS33 INS32 INS34 INS45 INS32 INS27 INS8 MOV8 INS43 INS43 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS8 MOV52 UPD42 MOV42 INS42 INS42 INS42 UPD45 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS52 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS27 INS27 INS21 INS25 INS21 INS42 INS42 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS43 INS42 INS43 INS85 INS42 INS42 INS22 INS33 INS32 INS34 INS32 INS27 INS8 INS32 INS42 INS32 INS42 INS42 INS25 INS52 INS42 INS22 INS42 INS42 INS27 INS32 INS32 INS10 INS42 INS32 INS42 INS42 INS27 INS8 INS52 INS42 INS32 INS34 INS22 INS42 INS22 INS42 INS42 INS42 INS32 INS42 MOV21 INS22 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 UPD42 DEL83 DEL45 DEL22 DEL42 DEL42 DEL45 DEL22 DEL45 DEL22 DEL27 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL42 DEL36 DEL60 DEL42 DEL42 DEL7 DEL36 DEL33 DEL27 DEL8 DEL61 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL27 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22