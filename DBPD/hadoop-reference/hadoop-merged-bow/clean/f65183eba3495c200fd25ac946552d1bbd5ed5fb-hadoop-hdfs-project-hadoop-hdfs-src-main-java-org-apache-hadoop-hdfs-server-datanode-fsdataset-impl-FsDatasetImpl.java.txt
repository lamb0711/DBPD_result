Merge remote-tracking branch 'apache-commit/trunk' into HDFS-6581

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java

-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+  /**
+   * Removes a collection of volumes from FsDataset.
+   * @param volumes the root directories of the volumes.
+   *
+   * DataNode should call this function before calling
+   * {@link DataStorage#removeVolumes(java.util.Collection)}.
+   */
+  @Override
+  public synchronized void removeVolumes(Collection<StorageLocation> volumes) {
+    Set<File> volumeSet = new HashSet<File>();
+    for (StorageLocation sl : volumes) {
+      volumeSet.add(sl.getFile());
+    }
+    for (int idx = 0; idx < dataStorage.getNumStorageDirs(); idx++) {
+      Storage.StorageDirectory sd = dataStorage.getStorageDir(idx);
+      if (volumeSet.contains(sd.getRoot())) {
+        String volume = sd.getRoot().toString();
+        LOG.info("Removing " + volume + " from FsDataset.");
+
+        this.volumes.removeVolume(volume);
+        storageMap.remove(sd.getStorageUuid());
+        asyncDiskService.removeVolume(sd.getCurrentDir());
+
+        // Removed all replica information for the blocks on the volume. Unlike
+        // updating the volumeMap in addVolume(), this operation does not scan
+        // disks.
+        for (String bpid : volumeMap.getBlockPoolList()) {
+          List<Block> blocks = new ArrayList<Block>();
+          for (Iterator<ReplicaInfo> it = volumeMap.replicas(bpid).iterator();
+              it.hasNext(); ) {
+            ReplicaInfo block = it.next();
+            if (block.getVolume().getBasePath().equals(volume)) {
+              invalidate(bpid, block.getBlockId());
+              blocks.add(block);
+              it.remove();
+            }
+          }
+          // Delete blocks from the block scanner in batch.
+          datanode.getBlockScanner().deleteBlocks(bpid,
+              blocks.toArray(new Block[blocks.size()]));
+        }
+      }
+    }
+  }
+
+   * Invalidate a block but does not delete the actual on-disk block file.
+   *
+   * It should only be used for decommissioning disks.
+   *
+   * @param bpid the block pool ID.
+   * @param blockId the ID of the block.
+   */
+  public void invalidate(String bpid, long blockId) {
+    // If a DFSClient has the replica in its cache of short-circuit file
+    // descriptors (and the client is using ShortCircuitShm), invalidate it.
+    // The short-circuit registry is null in the unit tests, because the
+    // datanode is mock object.
+    if (datanode.getShortCircuitRegistry() != null) {
+      datanode.getShortCircuitRegistry().processBlockInvalidation(
+          new ExtendedBlockId(blockId, bpid));
+
+      // If the block is cached, start uncaching it.
+      cacheManager.uncacheBlock(bpid, blockId);
+    }
+  }
+
+  /**

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS31 INS31 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS65 INS42 INS74 INS42 INS60 INS70 INS24 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS25 INS66 INS42 INS66 INS66 INS65 INS66 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS58 INS27 INS37 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS68 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS32 INS33 INS21 INS21 INS42 INS42 INS69 INS42 INS42 INS74 INS42 INS32 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS32 INS43 INS43 INS43 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS60 INS21 INS21 INS21 INS21 INS70 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS44 INS32 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS22 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS24 INS21 INS42 INS32 INS42 INS45 INS42 INS45 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS58 INS32 INS8 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS74 INS59 INS42 INS42 INS60 INS25 INS32 INS42 INS42 INS32 INS42 INS42 INS74 INS43 INS43 INS42 INS32 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS3 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS21 INS21 INS21 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42