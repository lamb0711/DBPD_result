HDDS-224. Create metrics for Event Watcher.
Contributed b Elek, Marton.

+
+import org.apache.hadoop.util.StringUtils;
+
+import com.google.common.base.Preconditions;
+  private static final String EXECUTOR_NAME_SEPARATOR = "For";
+
-
-    this.addHandler(event, new SingleThreadExecutor<>(
-        event.getName()), handler);
-  }
-
-  public <PAYLOAD, EVENT_TYPE extends Event<PAYLOAD>> void addHandler(
-      EVENT_TYPE event,
-      EventExecutor<PAYLOAD> executor,
-      EventHandler<PAYLOAD> handler) {
-
-    executors.putIfAbsent(event, new HashMap<>());
-    executors.get(event).putIfAbsent(executor, new ArrayList<>());
-
-    executors.get(event)
-        .get(executor)
-        .add(handler);
+    this.addHandler(event, handler, generateHandlerName(handler));
-   * Creates one executor with multiple event handlers.
+   * Add new handler to the event queue.
+   * <p>
+   * By default a separated single thread executor will be dedicated to
+   * deliver the events to the registered event handler.
+   *
+   * @param event        Triggering event.
+   * @param handler      Handler of event (will be called from a separated
+   *                     thread)
+   * @param handlerName  The name of handler (should be unique together with
+   *                     the event name)
+   * @param <PAYLOAD>    The type of the event payload.
+   * @param <EVENT_TYPE> The type of the event identifier.
-  public void addHandlerGroup(String name, HandlerForEvent<?>...
-      eventsAndHandlers) {
-    SingleThreadExecutor sharedExecutor =
-        new SingleThreadExecutor(name);
-    for (HandlerForEvent handlerForEvent : eventsAndHandlers) {
-      addHandler(handlerForEvent.event, sharedExecutor,
-          handlerForEvent.handler);
-    }
+  public <PAYLOAD, EVENT_TYPE extends Event<PAYLOAD>> void addHandler(
+      EVENT_TYPE event, EventHandler<PAYLOAD> handler, String handlerName) {
+    validateEvent(event);
+    Preconditions.checkNotNull(handler, "Handler name should not be null.");
+    String executorName =
+        StringUtils.camelize(event.getName()) + EXECUTOR_NAME_SEPARATOR
+            + handlerName;
+    this.addHandler(event, new SingleThreadExecutor<>(executorName), handler);
+  }
+
+  private <EVENT_TYPE extends Event<?>> void validateEvent(EVENT_TYPE event) {
+    Preconditions
+        .checkArgument(!event.getName().contains(EXECUTOR_NAME_SEPARATOR),
+            "Event name should not contain " + EXECUTOR_NAME_SEPARATOR
+                + " string.");
+  private <PAYLOAD> String generateHandlerName(EventHandler<PAYLOAD> handler) {
+    if (!"".equals(handler.getClass().getSimpleName())) {
+      return handler.getClass().getSimpleName();
+    } else {
+      return handler.getClass().getName();
+    }
+  }
+
+  /**
+   * Add event handler with custom executor.
+   *
+   * @param event        Triggering event.
+   * @param executor     The executor imlementation to deliver events from a
+   *                     separated threads. Please keep in your mind that
+   *                     registering metrics is the responsibility of the
+   *                     caller.
+   * @param handler      Handler of event (will be called from a separated
+   *                     thread)
+   * @param <PAYLOAD>    The type of the event payload.
+   * @param <EVENT_TYPE> The type of the event identifier.
+   */
+  public <PAYLOAD, EVENT_TYPE extends Event<PAYLOAD>> void addHandler(
+      EVENT_TYPE event, EventExecutor<PAYLOAD> executor,
+      EventHandler<PAYLOAD> handler) {
+    validateEvent(event);
+    executors.putIfAbsent(event, new HashMap<>());
+    executors.get(event).putIfAbsent(executor, new ArrayList<>());
+
+    executors.get(event).get(executor).add(handler);
+  }
+
+
+
-  /**
-   * Event identifier together with the handler.
-   *
-   * @param <PAYLOAD>
-   */
-  public static class HandlerForEvent<PAYLOAD> {
-
-    private final Event<PAYLOAD> event;
-
-    private final EventHandler<PAYLOAD> handler;
-
-    public HandlerForEvent(
-        Event<PAYLOAD> event,
-        EventHandler<PAYLOAD> handler) {
-      this.event = event;
-      this.handler = handler;
-    }
-
-    public Event<PAYLOAD> getEvent() {
-      return event;
-    }
-
-    public EventHandler<PAYLOAD> getHandler() {
-      return handler;
-    }
-  }

INS26 INS26 MOV31 INS40 INS40 INS23 INS31 MOV31 MOV31 INS83 INS83 INS83 INS43 INS59 INS73 INS73 INS39 INS42 INS44 INS44 INS8 INS29 INS83 MOV73 MOV73 INS39 INS42 MOV44 MOV44 INS44 INS8 UPD83 INS73 INS39 INS42 INS44 UPD83 MOV73 INS43 INS42 MOV44 INS8 INS29 INS42 INS42 INS45 INS42 INS42 INS74 INS43 INS42 INS74 UPD42 MOV42 MOV21 MOV65 INS65 INS65 INS65 MOV65 INS65 INS43 INS42 INS21 INS21 INS60 MOV21 INS42 UPD74 MOV74 INS43 INS42 INS21 UPD42 MOV42 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS21 UPD43 MOV43 INS43 UPD42 MOV42 INS43 INS43 INS66 INS66 INS66 UPD66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS32 MOV43 INS59 INS32 INS76 UPD42 MOV42 INS32 INS38 INS8 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS52 INS42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS27 INS52 INS42 INS42 MOV14 INS42 INS42 INS42 INS38 INS27 INS32 MOV41 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS45 INS42 INS32 INS32 INS32 INS42 INS42 MOV32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL52 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL40 DEL40 DEL39 DEL42 DEL42 DEL44 DEL76 DEL74 DEL42 DEL44 DEL43 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL43 DEL44 DEL42 DEL8 DEL70 DEL8 DEL52 DEL42 DEL22 DEL42 DEL7 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL41 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL8 DEL29 DEL83 DEL83 DEL42 DEL83 DEL83 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL55