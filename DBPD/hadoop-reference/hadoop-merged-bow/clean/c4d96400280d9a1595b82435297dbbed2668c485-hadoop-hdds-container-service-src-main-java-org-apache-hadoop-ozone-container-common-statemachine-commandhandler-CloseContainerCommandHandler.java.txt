HDDS-801. Quasi close the container when close is not executed via Ratis.
Contributed by Nanda kumar.

+import com.google.protobuf.InvalidProtocolBufferException;
+import org.apache.hadoop.hdds.protocol.DatanodeDetails;
-import org.apache.hadoop.hdds.protocol.proto.HddsProtos;
-import org.apache.hadoop.hdds.protocol.proto
-    .StorageContainerDatanodeProtocolProtos.IncrementalContainerReportProto;
+import org.apache.hadoop.hdds.protocol.datanode.proto
+    .ContainerProtos.ContainerCommandRequestProto;
-import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.
-    ContainerDataProto.State;
-import org.apache.hadoop.ozone.container.common.impl.ContainerData;
+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;
+import java.io.IOException;
-  static final Logger LOG =
+
+  private static final Logger LOG =
+
-  private boolean cmdExecuted;
-    LOG.debug("Processing Close Container command.");
-    invocationCount++;
-    long startTime = Time.monotonicNow();
-    // TODO: define this as INVALID_CONTAINER_ID in HddsConsts.java (TBA)
-    long containerID = -1;
-      CloseContainerCommandProto closeContainerProto =
+      LOG.debug("Processing Close Container command.");
+      invocationCount++;
+      final long startTime = Time.monotonicNow();
+      final DatanodeDetails datanodeDetails = context.getParent()
+          .getDatanodeDetails();
+      final CloseContainerCommandProto closeCommand =
-      containerID = closeContainerProto.getContainerID();
-      // CloseContainer operation is idempotent, if the container is already
-      // closed, then do nothing.
-      // TODO: Non-existent container should be handled properly
-      Container container =
-          ozoneContainer.getContainerSet().getContainer(containerID);
-      if (container == null) {
-        LOG.error("Container {} does not exist in datanode. "
-            + "Container close failed.", containerID);
-        cmdExecuted = false;
-        return;
-      }
-      ContainerData containerData = container.getContainerData();
-      State containerState = container.getContainerData().getState();
-      if (containerState != State.CLOSED) {
-        LOG.debug("Closing container {}.", containerID);
-        // when a closeContainerCommand arrives at a Datanode and if the
-        // container is open, each replica will be moved to closing state first.
-        if (containerState == State.OPEN) {
-          containerData.setState(State.CLOSING);
+      final ContainerController controller = ozoneContainer.getController();
+      final long containerId = closeCommand.getContainerID();
+      try {
+        // TODO: Closing of QUASI_CLOSED container.
+
+        final Container container = controller.getContainer(containerId);
+
+        if (container == null) {
+          LOG.error("Container #{} does not exist in datanode. "
+              + "Container close failed.", containerId);
+          return;
-        // if the container is already closed, it will be just ignored.
-        // ICR will get triggered to change the replica state in SCM.
-        HddsProtos.PipelineID pipelineID = closeContainerProto.getPipelineID();
-        HddsProtos.ReplicationType replicationType =
-            closeContainerProto.getReplicationType();
+        // Move the container to CLOSING state
+        controller.markContainerForClose(containerId);
-        ContainerProtos.ContainerCommandRequestProto.Builder request =
-            ContainerProtos.ContainerCommandRequestProto.newBuilder();
-        request.setCmdType(ContainerProtos.Type.CloseContainer);
-        request.setContainerID(containerID);
-        request.setCloseContainer(
-            ContainerProtos.CloseContainerRequestProto.getDefaultInstance());
-        request.setTraceID(UUID.randomUUID().toString());
-        request.setDatanodeUuid(
-            context.getParent().getDatanodeDetails().getUuidString());
-        // submit the close container request for the XceiverServer to handle
-        ozoneContainer.submitContainerRequest(request.build(), replicationType,
-            pipelineID);
-        // Since the container is closed, we trigger an ICR
-        IncrementalContainerReportProto icr =
-            IncrementalContainerReportProto.newBuilder().addReport(
-                ozoneContainer.getContainerSet().getContainer(containerID)
-                    .getContainerReport()).build();
-        context.addReport(icr);
-        context.getParent().triggerHeartbeat();
+        // If the container is part of open pipeline, close it via write channel
+        if (ozoneContainer.getWriteChannel()
+            .isExist(closeCommand.getPipelineID())) {
+          ContainerCommandRequestProto request =
+              getContainerCommandRequestProto(datanodeDetails,
+                  closeCommand.getContainerID());
+          ozoneContainer.getWriteChannel().submitRequest(
+              request, closeCommand.getPipelineID());
+          return;
+        }
+
+        // The container is not part of any open pipeline.
+        // QUASI_CLOSE the container using ContainerController.
+        controller.quasiCloseContainer(containerId);
+      } catch (NotLeaderException e) {
+        LOG.debug("Follower cannot close container #{}.", containerId);
+      } catch (IOException e) {
+        LOG.error("Can't close container #{}", containerId, e);
+      } finally {
+        long endTime = Time.monotonicNow();
+        totalTime += endTime - startTime;
-    } catch (Exception e) {
-      if (e instanceof NotLeaderException) {
-        // If the particular datanode is not the Ratis leader, the close
-        // container command will not be executed by the follower but will be
-        // executed by Ratis stateMachine transactions via leader to follower.
-        // There can also be case where the datanode is in candidate state.
-        // In these situations, NotLeaderException is thrown.
-        LOG.info("Follower cannot close the container {}.", containerID);
-      } else {
-        LOG.error("Can't close container " + containerID, e);
-      }
-    } finally {
-      long endTime = Time.monotonicNow();
-      totalTime += endTime - startTime;
+    } catch (InvalidProtocolBufferException ex) {
+      LOG.error("Exception while closing container", ex);
+  private ContainerCommandRequestProto getContainerCommandRequestProto(
+      final DatanodeDetails datanodeDetails, final long containerId) {
+    final ContainerCommandRequestProto.Builder command =
+        ContainerCommandRequestProto.newBuilder();
+    command.setCmdType(ContainerProtos.Type.CloseContainer);
+    command.setContainerID(containerId);
+    command.setCloseContainer(
+        ContainerProtos.CloseContainerRequestProto.getDefaultInstance());
+    command.setTraceID(UUID.randomUUID().toString());
+    command.setDatanodeUuid(datanodeDetails.getUuidString());
+    return command.build();
+  }
+

MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 UPD40 INS40 INS31 INS31 INS83 MOV29 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS54 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS60 MOV21 MOV21 MOV21 MOV21 MOV21 INS41 INS8 INS12 INS42 INS83 INS43 INS59 INS32 INS32 MOV21 MOV21 MOV60 INS60 MOV60 MOV60 INS60 INS54 INS44 INS8 INS40 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS83 INS39 INS59 INS8 INS12 INS12 MOV8 INS43 INS42 INS21 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 MOV32 UPD42 INS42 INS42 INS32 INS42 INS32 MOV60 MOV25 INS21 INS25 MOV21 INS44 INS8 INS44 INS8 UPD42 MOV42 INS32 INS42 INS42 UPD42 MOV42 MOV42 INS83 INS32 INS32 INS8 MOV43 INS42 MOV21 INS43 INS42 MOV21 UPD42 MOV42 UPD42 MOV42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS32 INS60 INS21 INS41 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS32 UPD42 UPD42 INS45 UPD42 MOV42 UPD42 UPD42 INS45 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 INS32 UPD45 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL83 DEL39 DEL42 DEL59 DEL23 DEL39 DEL42 DEL34 DEL38 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL45 DEL45 DEL42 DEL27 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL45 DEL32 DEL21 DEL42 DEL40 DEL27 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL40 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL40 DEL32 DEL59 DEL60 DEL40 DEL32 DEL21 DEL43 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL62 DEL8 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL31