HDFS-1974. Introduce active and standy states to the namenode. Contributed by Suresh Srinivas.



git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1156418 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.ha.HealthCheckFailedException;
+import org.apache.hadoop.ha.ServiceFailedException;
+import org.apache.hadoop.hdfs.server.namenode.ha.ActiveState;
+import org.apache.hadoop.hdfs.server.namenode.ha.HAState;
+import org.apache.hadoop.hdfs.server.namenode.ha.StandbyState;
+import org.apache.hadoop.hdfs.server.protocol.JournalProtocol;
+   * Categories of operations supported by the namenode.
+   */
+  public static enum OperationCategory {
+    /** Read operation that does not change the namespace state */
+    READ,
+    /** Write operation that changes the namespace state */
+    WRITE,
+    /** Operations related to checkpointing */
+    CHECKPOINT,
+    /** Operations related to {@link JournalProtocol} */
+    JOURNAL
+  }
+  
+  /**
+  public static final HAState ACTIVE_STATE = new ActiveState();
+  public static final HAState STANDBY_STATE = new StandbyState();
+  private HAState state;
+  private final boolean haEnabled;
+
+  
+    initializeGenericKeys(conf);
-    LOG.info(getRole() + " up at: " + rpcAddress);
-    if (serviceRPCAddress != null) {
-      LOG.info(getRole() + " service server is up at: " + serviceRPCAddress); 
-    }
+    LOG.info(getRole() + " up at: " + rpcAddress);
+    if (serviceRPCAddress != null) {
+      LOG.info(getRole() + " service server is up at: " + serviceRPCAddress); 
+    }
+    this.haEnabled = DFSUtil.isHAEnabled(conf);
+    this.state = !haEnabled ? ACTIVE_STATE : STANDBY_STATE;
-      initializeGenericKeys(conf);
+    checkOperation(OperationCategory.WRITE);
-    verifyRequest(registration);
-    if(!isRole(NamenodeRole.NAMENODE))
-      throw new IOException("Only an ACTIVE node can invoke endCheckpoint.");
+    checkOperation(OperationCategory.CHECKPOINT);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.READ);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+  @Override // ClientProtocol
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
-  @Override
+  @Override // ClientProtocol, DatanodeProtocol
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.READ);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
-      boolean needLocation)
-  throws IOException {
+      boolean needLocation) throws IOException {
+    checkOperation(OperationCategory.READ);
+    checkOperation(OperationCategory.READ);
+    checkOperation(OperationCategory.READ);
+    checkOperation(OperationCategory.READ);
+    // TODO:HA decide on OperationCategory for this
+    // TODO:HA decide on OperationCategory for this
+    // TODO:HA decide on OperationCategory for this
+    // TODO:HA decide on OperationCategory for this
+    // TODO:HA decide on OperationCategory for this
+    // TODO:HA decide on OperationCategory for this
-  @Override
+  @Override // NamenodeProtocol
+    // TODO:HA decide on OperationCategory for this
+    // TODO:HA decide on OperationCategory for this
+    // TODO:HA decide on OperationCategory for this
+    // TODO:HA decide on OperationCategory for this
+    checkOperation(OperationCategory.READ);
+  @Override // ClientProtocol
+    // TODO:HA decide on OperationCategory for this
+    checkOperation(OperationCategory.READ);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.READ);
+  
+  @Override // HAServiceProtocol
+  public synchronized void monitorHealth() throws HealthCheckFailedException {
+    if (!haEnabled) {
+      return; // no-op, if HA is not eanbled
+    }
+    // TODO:HA implement health check
+    return;
+  }
+  
+  @Override // HAServiceProtocol
+  public synchronized void transitionToActive() throws ServiceFailedException {
+    if (!haEnabled) {
+      throw new ServiceFailedException("HA for namenode is not enabled");
+    }
+    state.setState(this, ACTIVE_STATE);
+  }
+  
+  @Override // HAServiceProtocol
+  public synchronized void transitionToStandby() throws ServiceFailedException {
+    if (!haEnabled) {
+      throw new ServiceFailedException("HA for namenode is not enabled");
+    }
+    state.setState(this, STANDBY_STATE);
+  }
+  
+  /** Check if an operation of given category is allowed */
+  protected synchronized void checkOperation(final OperationCategory op)
+      throws UnsupportedActionException {
+    state.checkOperation(this, op);
+  }
+  
+  public synchronized HAState getState() {
+    return state;
+  }
+  
+  public synchronized void setState(final HAState s) {
+    state = s;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS71 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS42 INS72 INS72 INS72 INS72 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS78 INS78 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS29 INS42 INS29 INS42 INS29 INS42 INS29 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 MOV21 MOV21 MOV25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS25 INS41 INS42 INS42 INS25 INS21 INS42 INS42 INS25 INS21 INS65 INS83 INS43 INS42 INS42 INS21 INS42 INS41 INS83 INS43 INS42 INS21 INS66 INS65 INS65 INS65 INS65 INS43 INS43 INS7 INS7 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS38 INS8 INS38 INS8 INS32 INS38 INS8 INS32 INS66 INS42 INS32 INS42 INS42 INS7 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS42 INS22 INS32 INS22 INS16 INS42 INS40 UPD42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS41 INS42 INS53 INS42 INS42 INS52 INS42 INS42 INS53 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS38 INS42 INS42 INS14 INS14 INS42 INS43 INS45 INS43 INS45 INS42 INS42 DEL42 DEL42 DEL40 DEL32 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL25