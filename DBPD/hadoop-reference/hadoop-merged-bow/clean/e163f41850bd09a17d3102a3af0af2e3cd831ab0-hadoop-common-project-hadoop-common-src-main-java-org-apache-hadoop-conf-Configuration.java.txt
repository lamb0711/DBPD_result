HADOOP-14938. Configuration.updatingResource map should be initialized lazily (misha@cloudera.com via rkanter)

-   * the key most recently
+   * the key most recently. Created lazily to avoid wasting memory.
-  private Map<String, String[]> updatingResource;
+  private volatile Map<String, String[]> updatingResource;
-    updatingResource = new ConcurrentHashMap<String, String[]>();
-   this.resources = (ArrayList<Resource>) other.resources.clone();
-   synchronized(other) {
-     if (other.properties != null) {
-       this.properties = (Properties)other.properties.clone();
-     }
+    this.resources = (ArrayList<Resource>) other.resources.clone();
+    synchronized(other) {
+      if (other.properties != null) {
+        this.properties = (Properties)other.properties.clone();
+      }
-     if (other.overlay!=null) {
-       this.overlay = (Properties)other.overlay.clone();
-     }
+      if (other.overlay!=null) {
+        this.overlay = (Properties)other.overlay.clone();
+      }
-     this.updatingResource = new ConcurrentHashMap<String, String[]>(
-         other.updatingResource);
-     this.finalParameters = Collections.newSetFromMap(
-         new ConcurrentHashMap<String, Boolean>());
-     this.finalParameters.addAll(other.finalParameters);
-     this.REGISTERED_TAG_CLASS.putAll(other.REGISTERED_TAG_CLASS);
-     this.propertyTagsMap.putAll(other.propertyTagsMap);
-   }
-   
+      if (other.updatingResource != null) {
+        this.updatingResource = new ConcurrentHashMap<String, String[]>(
+           other.updatingResource);
+      }
+      this.finalParameters = Collections.newSetFromMap(
+          new ConcurrentHashMap<String, Boolean>());
+      this.finalParameters.addAll(other.finalParameters);
+      this.REGISTERED_TAG_CLASS.putAll(other.REGISTERED_TAG_CLASS);
+      this.propertyTagsMap.putAll(other.propertyTagsMap);
+    }
+
-      updatingResource.put(name, new String[] {newSource});
+      putIntoUpdatingResource(name, new String[] {newSource});
-            updatingResource.put(n, new String[] {newSource});
+            putIntoUpdatingResource(n, new String[] {newSource});
-        updatingResource.put(n, new String[] {altSource});
+        putIntoUpdatingResource(n, new String[] {altSource});
-      Map<String, String[]> backup =
-          new ConcurrentHashMap<String, String[]>(updatingResource);
+      Map<String, String[]> backup = updatingResource != null ?
+          new ConcurrentHashMap<String, String[]>(updatingResource) : null;
-        for (Map.Entry<Object,Object> item: overlay.entrySet()) {
-          String key = (String)item.getKey();
-          String[] source = backup.get(key);
-          if(source != null) {
-            updatingResource.put(key, source);
+        if (backup != null) {
+          for (Map.Entry<Object, Object> item : overlay.entrySet()) {
+            String key = (String) item.getKey();
+            String[] source = backup.get(key);
+            if (source != null) {
+              updatingResource.put(key, source);
+            }
-        if(source != null) {
-          updatingResource.put(attr, source);
+        if (source != null) {
+          putIntoUpdatingResource(attr, source);
-      String[] resources = config.updatingResource.get(name);
+      String[] resources = config.updatingResource != null ?
+          config.updatingResource.get(name) : null;
-      if(resources != null && resources.length > 0) {
+      if (resources != null && resources.length > 0) {
-      if(sources != null) {
-        updatingResource.put(key, sources);
+      if (sources != null) {
+        putIntoUpdatingResource(key, sources);
-      WritableUtils.writeCompressedStringArray(out, 
-          updatingResource.get(item.getKey()));
+      WritableUtils.writeCompressedStringArray(out, updatingResource != null ?
+          updatingResource.get(item.getKey()) : null);
+
+  private void putIntoUpdatingResource(String key, String[] value) {
+    Map<String, String[]> localUR = updatingResource;
+    if (localUR == null) {
+      synchronized (this) {
+        localUR = updatingResource;
+        if (localUR == null) {
+          updatingResource = localUR = new ConcurrentHashMap<>(8);
+        }
+      }
+    }
+    localUR.put(key, value);
+  }

INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS8 MOV43 INS42 MOV5 INS42 INS60 INS25 INS21 UPD66 INS74 INS59 INS27 INS8 INS32 INS25 INS43 INS43 INS5 INS42 INS42 INS42 INS33 INS51 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS43 INS85 INS52 INS8 INS40 INS33 MOV21 UPD42 INS16 INS25 INS16 INS16 INS42 INS21 INS25 INS27 MOV14 INS33 INS27 INS8 INS27 MOV32 INS33 INS27 MOV32 INS33 INS7 INS27 INS8 UPD42 INS42 INS33 INS42 INS33 MOV70 INS40 INS33 UPD42 INS42 INS33 INS42 INS42 INS42 INS33 INS21 INS7 UPD42 INS42 INS7 INS42 INS14 UPD42 INS74 INS34 MOV43 DEL42 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42