YARN-5711. Propogate exceptions back to client when using hedging RM failover provider.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.io.retry.MultiException;
-import org.apache.hadoop.io.retry.RetryPolicy;
-import org.apache.hadoop.io.retry.RetryProxy;
-import org.apache.hadoop.util.concurrent.HadoopExecutors;
-import org.apache.hadoop.yarn.conf.HAUtil;
-import org.apache.hadoop.yarn.conf.YarnConfiguration;
-
+import java.util.concurrent.ExecutionException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.io.retry.RetryPolicy;
+import org.apache.hadoop.io.retry.RetryProxy;
+import org.apache.hadoop.util.concurrent.HadoopExecutors;
+import org.apache.hadoop.yarn.conf.HAUtil;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+
- * retry the corresponding target. It assumes the in an HA setup, there will
- * be only one Active, and the active should respond faster than any configured
+ * retry the corresponding target. It assumes the in an HA setup, there will be
+ * only one Active, and the active should respond faster than any configured
-      T proxy = RMProxy.<T>getProxy(conf, protocol, rmAddress);
+      T proxy = RMProxy.<T> getProxy(conf, protocol, rmAddress);
-      LOG.error("Unable to create proxy to the ResourceManager " + HAUtil
-          .getRMHAId(conf), ioe);
+      LOG.error("Unable to create proxy to the ResourceManager "
+          + HAUtil.getRMHAId(conf), ioe);
+    private Throwable extraRootException(Exception ex) {
+      Throwable rootCause = ex;
+      if (ex instanceof ExecutionException) {
+        Throwable cause = ex.getCause();
+        if (cause instanceof InvocationTargetException) {
+          rootCause = cause.getCause();
+        }
+      }
+      return rootCause;
+    }
+
-    public Object invoke(Object proxy, final Method method,
-        final Object[] args) throws Throwable {
+    public Object invoke(Object proxy, final Method method, final Object[] args)
+        throws Throwable {
-        return invokeMethod(nonRetriableProxy.get(successfulProxy), method, args);
+        return invokeMethod(nonRetriableProxy.get(successfulProxy), method,
+            args);
-        int numAttempts = 0;
-            @Override public Object call() throws Exception {
+            @Override
+            public Object call() throws Exception {
-          numAttempts++;
-        Map<String, Exception> badResults = new HashMap<>();
-        while (numAttempts > 0) {
-          Future<Object> callResultFuture = completionService.take();
-          String pInfo = proxyMap.get(callResultFuture).proxyInfo;
-          Object retVal;
-          try {
-            retVal = callResultFuture.get();
-            successfulProxy = pInfo;
-            LOG.info("Invocation successful on [" + pInfo + "]");
-            return retVal;
-          } catch (Exception ex) {
-            LOG.warn("Invocation returned exception on " + "[" + pInfo + "]");
-            badResults.put(pInfo, ex);
-            numAttempts--;
-          }
+        Future<Object> callResultFuture = completionService.take();
+        String pInfo = proxyMap.get(callResultFuture).proxyInfo;
+        successfulProxy = pInfo;
+        Object retVal;
+        try {
+          retVal = callResultFuture.get();
+          LOG.info("Invocation successful on [" + pInfo + "]");
+          return retVal;
+        } catch (Exception ex) {
+          // Throw exception from first responding RM so that clients can handle
+          // appropriately
+          Throwable rootCause = extraRootException(ex);
+          LOG.warn("Invocation returned exception: " + rootCause.toString()
+              + " on " + "[" + pInfo + "], so propagating back to caller.");
+          throw rootCause;
-        // At this point we should have All bad results (Exceptions)
-        // Or should have returned with successful result.
-        if (badResults.size() == 1) {
-          throw badResults.values().iterator().next();
-        } else {
-          throw new MultiException(badResults);
-        }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 INS31 UPD66 UPD66 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS59 INS62 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS25 MOV60 MOV60 MOV21 MOV60 INS54 INS42 INS43 INS59 INS62 INS8 MOV8 INS12 INS42 INS42 INS32 INS42 INS43 INS21 MOV44 INS8 INS42 INS42 INS42 INS7 MOV60 MOV21 MOV53 INS42 INS32 INS43 INS59 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 UPD45 MOV45 INS32 INS45 MOV45 UPD45 INS42 INS42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL37 DEL21 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL12 DEL54 DEL8 DEL61 DEL42 DEL42 DEL32 DEL34 DEL27 DEL8 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25