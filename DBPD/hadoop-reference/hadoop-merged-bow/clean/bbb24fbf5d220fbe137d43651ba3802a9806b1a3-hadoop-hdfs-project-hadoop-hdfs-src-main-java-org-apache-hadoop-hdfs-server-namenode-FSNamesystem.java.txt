Merge trunk into branch.

Conflicts resolved:
C       hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestShortCircuitLocalRead.java
!     C hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java
C       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java
C       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
C       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
C       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocal.java

(thanks to Colin for help resolving)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1462652 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_ACCESSTIME_PRECISION_DEFAULT;
-  private void logAuditEvent(UserGroupInformation ugi,
-      InetAddress addr, String cmd, String src, String dst,
-      HdfsFileStatus stat) {
-    logAuditEvent(true, ugi, addr, cmd, src, dst, stat);
+  private HdfsFileStatus getAuditFileInfo(String path, boolean resolveSymlink)
+      throws IOException {
+    return (isAuditEnabled() && isExternalInvocation())
+        ? dir.getFileInfo(path, resolveSymlink) : null;
+  }
+  
+  private void logAuditEvent(boolean succeeded, String cmd, String src)
+      throws IOException {
+    logAuditEvent(succeeded, cmd, src, null, null);
+  }
+  
+  private void logAuditEvent(boolean succeeded, String cmd, String src,
+      String dst, HdfsFileStatus stat) throws IOException {
+    if (isAuditEnabled() && isExternalInvocation()) {
+      logAuditEvent(succeeded, getRemoteUser(), getRemoteIp(),
+                    cmd, src, dst, stat);
+    }
+  private final String fsOwnerShortUserName;
+      this.fsOwnerShortUserName = fsOwner.getShortUserName();
-      this.accessTimePrecision = conf.getLong(DFS_NAMENODE_ACCESSTIME_PRECISION_KEY, 0);
+      this.accessTimePrecision = conf.getLong(DFS_NAMENODE_ACCESSTIME_PRECISION_KEY,
+          DFS_NAMENODE_ACCESSTIME_PRECISION_DEFAULT);
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.UNCHECKED);
-      checkSuperuserPrivilege();
+      checkOperation(OperationCategory.UNCHECKED);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "setPermission", src, null, null);
-      }
+      logAuditEvent(false, "setPermission", src);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-      checkOwner(src);
+      checkOwner(pc, src);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        resultingStat = dir.getFileInfo(src, false);
-      }
+      resultingStat = getAuditFileInfo(src, false);
-    if (isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "setPermission", src, null, resultingStat);
-    }
+    logAuditEvent(true, "setPermission", src, null, resultingStat);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "setOwner", src, null, null);
-      }
+      logAuditEvent(false, "setOwner", src);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-      FSPermissionChecker pc = checkOwner(src);
-      if (!pc.isSuper) {
-        if (username != null && !pc.user.equals(username)) {
-          throw new AccessControlException("Non-super user cannot change owner.");
+      checkOwner(pc, src);
+      if (!pc.isSuperUser()) {
+        if (username != null && !pc.getUser().equals(username)) {
+          throw new AccessControlException("Non-super user cannot change owner");
-          throw new AccessControlException("User does not belong to " + group
-            + " .");
+          throw new AccessControlException("User does not belong to " + group);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        resultingStat = dir.getFileInfo(src, false);
-      }
+      resultingStat = getAuditFileInfo(src, false);
-    if (isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "setOwner", src, null, resultingStat);
-    }
+    logAuditEvent(true, "setOwner", src, null, resultingStat);
+    FSPermissionChecker pc = getPermissionChecker();
-      return getBlockLocationsInt(src, offset, length, doAccessTime,
+      return getBlockLocationsInt(pc, src, offset, length, doAccessTime,
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "open", src, null, null);
-      }
+      logAuditEvent(false, "open", src);
-  private LocatedBlocks getBlockLocationsInt(String src, long offset, long length,
-      boolean doAccessTime, boolean needBlockToken, boolean checkSafeMode)
+  private LocatedBlocks getBlockLocationsInt(FSPermissionChecker pc,
+      String src, long offset, long length, boolean doAccessTime,
+      boolean needBlockToken, boolean checkSafeMode)
-      checkPathAccess(src, FsAction.READ);
+      checkPathAccess(pc, src, FsAction.READ);
-    if (isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "open", src, null, null);
-    }
+    logAuditEvent(true, "open", src);
-      if (attempt == 0) { // first attempt is with readlock
+      boolean isReadOp = (attempt == 0);
+      if (isReadOp) { // first attempt is with readlock
+        checkOperation(OperationCategory.READ);
+        checkOperation(OperationCategory.WRITE);
-        checkOperation(OperationCategory.READ);
+        if (isReadOp) {
+          checkOperation(OperationCategory.READ);
+        } else {
+          checkOperation(OperationCategory.WRITE);
+        }
-            if (attempt == 0) {
+            if (isReadOp) {
-        if (attempt == 0) {
+        if (isReadOp) {
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getLoginUser(),
-                      getRemoteIp(),
-                      "concat", Arrays.toString(srcs), target, null);
-      }
+      logAuditEvent(false, "concat", Arrays.toString(srcs), target, null);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-      concatInternal(target, srcs);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        resultingStat = dir.getFileInfo(target, false);
-      }
+      concatInternal(pc, target, srcs);
+      resultingStat = getAuditFileInfo(target, false);
-    if (isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getLoginUser(),
-                    getRemoteIp(),
-                    "concat", Arrays.toString(srcs), target, resultingStat);
-    }
+    logAuditEvent(true, "concat", Arrays.toString(srcs), target, resultingStat);
-  private void concatInternal(String target, String [] srcs) 
+  private void concatInternal(FSPermissionChecker pc, String target, String [] srcs) 
-      checkPathAccess(target, FsAction.WRITE);
+      checkPathAccess(pc, target, FsAction.WRITE);
-        checkPathAccess(aSrc, FsAction.READ); // read the file
-        checkParentAccess(aSrc, FsAction.WRITE); // for delete 
+        checkPathAccess(pc, aSrc, FsAction.READ); // read the file
+        checkParentAccess(pc, aSrc, FsAction.WRITE); // for delete 
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "setTimes", src, null, null);
-      }
+      logAuditEvent(false, "setTimes", src);
+    HdfsFileStatus resultingStat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-        checkPathAccess(src, FsAction.WRITE);
+        checkPathAccess(pc, src, FsAction.WRITE);
-        if (isAuditEnabled() && isExternalInvocation()) {
-          final HdfsFileStatus stat = dir.getFileInfo(src, false);
-          logAuditEvent(UserGroupInformation.getCurrentUser(),
-                        getRemoteIp(),
-                        "setTimes", src, null, stat);
-        }
+        resultingStat = getAuditFileInfo(src, false);
+    logAuditEvent(true, "setTimes", src, null, resultingStat);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "createSymlink", link, target, null);
-      }
+      logAuditEvent(false, "createSymlink", link, target, null);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-      createSymlinkInternal(target, link, dirPerms, createParent);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        resultingStat = dir.getFileInfo(link, false);
-      }
+      createSymlinkInternal(pc, target, link, dirPerms, createParent);
+      resultingStat = getAuditFileInfo(link, false);
-    if (isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "createSymlink", link, target, resultingStat);
-    }
+    logAuditEvent(true, "createSymlink", link, target, resultingStat);
-  private void createSymlinkInternal(String target, String link,
-      PermissionStatus dirPerms, boolean createParent)
+  private void createSymlinkInternal(FSPermissionChecker pc, String target,
+      String link, PermissionStatus dirPerms, boolean createParent)
-      checkAncestorAccess(link, FsAction.WRITE);
+      checkAncestorAccess(pc, link, FsAction.WRITE);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "setReplication", src, null, null);
-      }
+      logAuditEvent(false, "setReplication", src);
-
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-
-        checkPathAccess(src, FsAction.WRITE);
+        checkPathAccess(pc, src, FsAction.WRITE);
-    if (isFile && isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "setReplication", src, null, null);
+    if (isFile) {
+      logAuditEvent(true, "setReplication", src);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.READ);
-        checkTraverse(filename);
+        checkTraverse(pc, filename);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "create", src, null, null);
-      }
+      logAuditEvent(false, "create", src);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-
-      startFileInternal(src, permissions, holder, clientMachine, flag,
+      startFileInternal(pc, src, permissions, holder, clientMachine, flag,
-    if (isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "create", src, null, stat);
-    }
+    logAuditEvent(true, "create", src, null, stat);
-  private LocatedBlock startFileInternal(String src,
+  private LocatedBlock startFileInternal(FSPermissionChecker pc, String src,
-        checkPathAccess(src, FsAction.WRITE);
+        checkPathAccess(pc, src, FsAction.WRITE);
-        checkAncestorAccess(src, FsAction.WRITE);
+        checkAncestorAccess(pc, src, FsAction.WRITE);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-        checkPathAccess(src, FsAction.WRITE);
+        checkPathAccess(pc, src, FsAction.WRITE);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "append", src, null, null);
-      }
+      logAuditEvent(false, "append", src);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-      lb = startFileInternal(src, null, holder, clientMachine, 
+      lb = startFileInternal(pc, src, null, holder, clientMachine, 
-    if (isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "append", src, null, null);
-    }
+    logAuditEvent(true, "append", src);
+    checkOperation(OperationCategory.READ);
+      checkOperation(OperationCategory.READ);
+    checkOperation(OperationCategory.WRITE);
+      checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.READ);
-      checkOperation(OperationCategory.WRITE);
+      checkOperation(OperationCategory.READ);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "rename", src, dst, null);
-      }
+      logAuditEvent(false, "rename", src, dst, null);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-      status = renameToInternal(src, dst);
-      if (status && isAuditEnabled() && isExternalInvocation()) {
-        resultingStat = dir.getFileInfo(dst, false);
+      status = renameToInternal(pc, src, dst);
+      if (status) {
+        resultingStat = getAuditFileInfo(dst, false);
-    if (status && isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "rename", src, dst, resultingStat);
+    if (status) {
+      logAuditEvent(true, "rename", src, dst, resultingStat);
-  private boolean renameToInternal(String src, String dst)
+  private boolean renameToInternal(FSPermissionChecker pc, String src, String dst)
-      checkParentAccess(src, FsAction.WRITE);
-      checkAncestorAccess(actualdst, FsAction.WRITE);
+      checkParentAccess(pc, src, FsAction.WRITE);
+      checkAncestorAccess(pc, actualdst, FsAction.WRITE);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-
-      renameToInternal(src, dst, options);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        resultingStat = dir.getFileInfo(dst, false); 
-      }
+      renameToInternal(pc, src, dst, options);
+      resultingStat = getAuditFileInfo(dst, false);
-    if (isAuditEnabled() && isExternalInvocation()) {
+    if (resultingStat != null) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(), getRemoteIp(),
-                    cmd.toString(), src, dst, resultingStat);
+      logAuditEvent(true, cmd.toString(), src, dst, resultingStat);
-  private void renameToInternal(String src, String dst,
+  private void renameToInternal(FSPermissionChecker pc, String src, String dst,
-      checkParentAccess(src, FsAction.WRITE);
-      checkAncestorAccess(dst, FsAction.WRITE);
+      checkParentAccess(pc, src, FsAction.WRITE);
+      checkAncestorAccess(pc, dst, FsAction.WRITE);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "delete", src, null, null);
-      }
+      logAuditEvent(false, "delete", src);
-    if (status && isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "delete", src, null, null);
+    if (status) {
+      logAuditEvent(true, "delete", src);
+  private FSPermissionChecker getPermissionChecker()
+      throws AccessControlException {
+    return new FSPermissionChecker(fsOwnerShortUserName, supergroup);
+  }
-
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-        checkPermission(src, false, null, FsAction.WRITE, null, FsAction.ALL);
+        checkPermission(pc, src, false, null, FsAction.WRITE, null, FsAction.ALL);
-
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.READ);
-
-        checkTraverse(src);
+        checkTraverse(pc, src);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "getfileinfo", src, null, null);
-      }
+      logAuditEvent(false, "getfileinfo", src);
-    if (isAuditEnabled() && isExternalInvocation()) {
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "getfileinfo", src, null, null);
-    }
+    logAuditEvent(true, "getfileinfo", src);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "mkdirs", src, null, null);
-      }
+      logAuditEvent(false, "mkdirs", src);
+    HdfsFileStatus resultingStat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.WRITE);
-
-      status = mkdirsInternal(src, permissions, createParent);
+      status = mkdirsInternal(pc, src, permissions, createParent);
+      if (status) {
+        resultingStat = dir.getFileInfo(src, false);
+      }
-    if (status && isAuditEnabled() && isExternalInvocation()) {
-      final HdfsFileStatus stat = dir.getFileInfo(src, false);
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
-                    getRemoteIp(),
-                    "mkdirs", src, null, stat);
+    if (status) {
+      logAuditEvent(true, "mkdirs", src, null, resultingStat);
-  private boolean mkdirsInternal(String src,
+  private boolean mkdirsInternal(FSPermissionChecker pc, String src,
-      checkTraverse(src);
+      checkTraverse(pc, src);
-      checkAncestorAccess(src, FsAction.WRITE);
+      checkAncestorAccess(pc, src, FsAction.WRITE);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.READ);
-
-        checkPermission(src, false, null, null, null, FsAction.READ_EXECUTE);
+        checkPermission(pc, src, false, null, null, null, FsAction.READ_EXECUTE);
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.WRITE);
-      if (isPermissionEnabled) {
-        checkSuperuserPrivilege();
-      }
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(false, UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "listStatus", src, null, null);
-      }
+      logAuditEvent(false, "listStatus", src);
+    FSPermissionChecker pc = getPermissionChecker();
+    checkOperation(OperationCategory.READ);
-          checkPathAccess(src, FsAction.READ_EXECUTE);
+          checkPathAccess(pc, src, FsAction.READ_EXECUTE);
-          checkTraverse(src);
+          checkTraverse(pc, src);
-      if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(UserGroupInformation.getCurrentUser(),
-                      getRemoteIp(),
-                      "listStatus", src, null, null);
-      }
+      logAuditEvent(true, "listStatus", src);
-  /**
-   * Total raw bytes including non-dfs used space.
-   */
+  @Metric({"CapacityTotal",
+      "Total raw capacity of data nodes in bytes"})
-  @Metric
+  @Metric({"CapacityTotalGB",
+      "Total raw capacity of data nodes in GB"})
-  /**
-   * Total used space by data nodes
-   */
+  @Metric({"CapacityUsed",
+      "Total used capacity across all data nodes in bytes"})
-  @Metric
+  @Metric({"CapacityUsedGB",
+      "Total used capacity across all data nodes in GB"})
-  @Override
+  @Override // FSNamesystemMBean
+  @Metric({"CapacityRemaining", "Remaining capacity in bytes"})
-  @Metric
+  @Metric({"CapacityRemainingGB", "Remaining capacity in GB"})
+  @Metric({"CapacityUsedNonDFS",
+      "Total space used by data nodes for non DFS purposes in bytes"})
+  public long getCapacityUsedNonDFS() {
+    return datanodeStatistics.getCapacityUsedNonDFS();
+  }
+
-      ) throws AccessControlException {
+      ) throws AccessControlException, StandbyException {
+    checkOperation(OperationCategory.UNCHECKED);
+      checkOperation(OperationCategory.UNCHECKED);
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.UNCHECKED);
-      checkSuperuserPrivilege();
+      checkOperation(OperationCategory.UNCHECKED);
-  boolean restoreFailedStorage(String arg) throws AccessControlException {
+  boolean restoreFailedStorage(String arg) throws AccessControlException,
+      StandbyException {
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.UNCHECKED);
-      checkSuperuserPrivilege();
+      checkOperation(OperationCategory.UNCHECKED);
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.WRITE);
-      checkSuperuserPrivilege();
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.JOURNAL);
-      checkSuperuserPrivilege();
+    checkOperation(OperationCategory.CHECKPOINT);
+    checkOperation(OperationCategory.CHECKPOINT);
-  private FSPermissionChecker checkOwner(String path
-      ) throws AccessControlException, UnresolvedLinkException {
-    return checkPermission(path, true, null, null, null, null);
+  private void checkOwner(FSPermissionChecker pc, String path)
+      throws AccessControlException, UnresolvedLinkException {
+    checkPermission(pc, path, true, null, null, null, null);
-  private FSPermissionChecker checkPathAccess(String path, FsAction access
-      ) throws AccessControlException, UnresolvedLinkException {
-    return checkPermission(path, false, null, null, access, null);
+  private void checkPathAccess(FSPermissionChecker pc,
+      String path, FsAction access) throws AccessControlException,
+      UnresolvedLinkException {
+    checkPermission(pc, path, false, null, null, access, null);
-  private FSPermissionChecker checkParentAccess(String path, FsAction access
-      ) throws AccessControlException, UnresolvedLinkException {
-    return checkPermission(path, false, null, access, null, null);
+  private void checkParentAccess(FSPermissionChecker pc,
+      String path, FsAction access) throws AccessControlException,
+      UnresolvedLinkException {
+    checkPermission(pc, path, false, null, access, null, null);
-  private FSPermissionChecker checkAncestorAccess(String path, FsAction access
-      ) throws AccessControlException, UnresolvedLinkException {
-    return checkPermission(path, false, access, null, null, null);
+  private void checkAncestorAccess(FSPermissionChecker pc,
+      String path, FsAction access) throws AccessControlException,
+      UnresolvedLinkException {
+    checkPermission(pc, path, false, access, null, null, null);
-  private FSPermissionChecker checkTraverse(String path
-      ) throws AccessControlException, UnresolvedLinkException {
-    return checkPermission(path, false, null, null, null, null);
+  private void checkTraverse(FSPermissionChecker pc, String path)
+      throws AccessControlException, UnresolvedLinkException {
+    checkPermission(pc, path, false, null, null, null, null);
-  public void checkSuperuserPrivilege() throws AccessControlException {
+  public void checkSuperuserPrivilege()
+      throws AccessControlException {
-      FSPermissionChecker.checkSuperuserPrivilege(fsOwner, supergroup);
+      FSPermissionChecker pc = getPermissionChecker();
+      pc.checkSuperuserPrivilege();
-   * Check whether current user have permissions to access the path.
-   * For more details of the parameters, see
-   * {@link FSPermissionChecker#checkPermission(String, INodeDirectory, boolean, FsAction, FsAction, FsAction, FsAction)}.
+   * Check whether current user have permissions to access the path. For more
+   * details of the parameters, see
+   * {@link FSPermissionChecker#checkPermission()}.
-  private FSPermissionChecker checkPermission(String path, boolean doCheckOwner,
-      FsAction ancestorAccess, FsAction parentAccess, FsAction access,
-      FsAction subAccess) throws AccessControlException, UnresolvedLinkException {
-    FSPermissionChecker pc = new FSPermissionChecker(
-        fsOwner.getShortUserName(), supergroup);
-    if (!pc.isSuper) {
+  private void checkPermission(FSPermissionChecker pc,
+      String path, boolean doCheckOwner, FsAction ancestorAccess,
+      FsAction parentAccess, FsAction access, FsAction subAccess)
+      throws AccessControlException, UnresolvedLinkException {
+    if (!pc.isSuperUser()) {
-        pc.checkPermission(path, dir.rootDir, doCheckOwner,
-            ancestorAccess, parentAccess, access, subAccess);
+        pc.checkPermission(path, dir.rootDir, doCheckOwner, ancestorAccess,
+            parentAccess, access, subAccess);
-      } 
+      }
-    return pc;
-
+  
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+    checkOperation(OperationCategory.WRITE);
+      checkOperation(OperationCategory.WRITE);
-
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.READ);
-
-      checkSuperuserPrivilege();
+    checkOperation(OperationCategory.WRITE);
-      UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
+      UserGroupInformation ugi = getRemoteUser();
+    checkOperation(OperationCategory.WRITE);
-      String renewer = UserGroupInformation.getCurrentUser().getShortUserName();
+      String renewer = getRemoteUser().getShortUserName();
+    checkOperation(OperationCategory.WRITE);
-      String canceller = UserGroupInformation.getCurrentUser().getUserName();
+      String canceller = getRemoteUser().getUserName();
-    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
+    UserGroupInformation ugi = getRemoteUser();
+  // optimize ugi lookup for RPC operations to avoid a trip through
+  // UGI.getCurrentUser which is synch'ed
+  private static UserGroupInformation getRemoteUser() throws IOException {
+    UserGroupInformation ugi = null;
+    if (Server.isRpcInvocation()) {
+      ugi = Server.getRemoteUser();
+    }
+    return (ugi != null) ? ugi : UserGroupInformation.getCurrentUser();
+  }
+  
-      logAuditEvent(UserGroupInformation.getCurrentUser(),
+      logAuditEvent(true, getRemoteUser(),

INS26 INS40 INS31 INS31 INS31 INS23 INS31 INS31 INS31 MOV83 MOV43 INS42 MOV44 INS44 INS43 INS8 INS83 MOV39 MOV42 MOV44 MOV44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 MOV44 MOV44 MOV44 MOV44 INS43 INS8 INS83 INS83 MOV43 INS59 INS44 INS44 INS44 INS44 INS44 INS44 INS83 MOV43 INS42 MOV43 INS8 INS44 INS79 INS79 INS79 INS79 INS79 INS79 INS79 INS83 INS39 INS42 INS8 INS43 INS43 INS39 INS44 MOV44 MOV43 MOV43 INS39 INS44 MOV44 MOV44 INS39 INS44 MOV44 MOV43 MOV43 INS39 INS44 MOV44 MOV44 INS43 MOV43 INS39 INS44 INS44 MOV43 MOV43 INS39 INS44 INS83 INS83 INS43 INS42 INS43 INS8 INS39 INS42 INS42 INS41 INS39 UPD42 UPD43 UPD42 INS43 INS42 INS42 INS21 INS39 INS42 INS42 INS25 INS42 MOV21 INS21 INS60 INS21 MOV21 INS60 INS21 MOV21 INS60 INS43 INS42 MOV21 INS60 INS21 MOV21 INS43 INS42 INS60 INS60 INS21 INS21 INS60 INS21 MOV21 INS43 INS42 INS60 INS21 INS25 INS60 INS21 INS60 INS21 MOV21 INS43 INS42 INS60 INS21 INS60 INS21 MOV21 INS21 INS21 INS21 MOV21 INS21 INS60 INS21 INS43 INS42 INS60 INS21 INS43 INS42 INS41 INS60 INS21 INS60 INS21 MOV21 INS60 INS60 INS21 INS43 INS42 INS60 INS21 MOV21 INS21 INS21 INS21 INS21 INS60 INS21 INS42 INS4 INS42 INS4 INS42 INS4 INS42 INS4 INS42 INS4 INS42 INS4 INS42 INS4 INS41 INS42 INS21 MOV21 INS21 INS42 MOV21 INS21 MOV21 INS21 MOV21 INS21 INS21 INS21 MOV43 INS42 INS21 MOV43 INS42 INS21 MOV43 INS42 INS21 MOV43 INS42 INS42 INS21 MOV43 INS42 INS43 INS42 INS21 MOV43 INS42 INS21 INS21 INS21 INS21 MOV21 INS21 INS21 INS21 INS21 INS42 INS42 INS60 INS25 INS41 INS16 UPD42 INS42 INS32 MOV27 INS8 INS32 INS43 INS59 INS32 MOV43 INS59 INS32 INS43 INS59 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 MOV8 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS32 UPD27 INS42 INS42 INS14 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS32 UPD66 UPD66 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 MOV43 INS59 INS32 INS8 INS16 INS36 INS32 INS33 INS42 INS42 INS42 INS42 INS33 INS33 MOV21 INS21 INS42 INS40 INS21 INS8 INS42 INS42 INS32 UPD42 MOV42 INS40 MOV21 INS9 INS8 INS42 INS32 UPD42 MOV42 INS40 INS21 INS21 INS9 INS42 INS42 INS32 INS8 INS9 INS60 INS8 INS42 INS42 INS32 UPD42 MOV42 INS40 MOV21 INS9 INS8 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS40 INS42 INS9 INS45 INS42 INS33 INS42 INS8 INS42 INS42 INS32 INS42 INS40 MOV21 INS9 INS8 INS42 INS42 INS32 UPD42 MOV42 INS40 INS42 INS42 INS32 INS42 INS40 INS8 INS42 INS42 INS32 UPD42 MOV42 INS40 INS9 INS42 INS42 INS32 INS42 INS40 INS8 INS42 INS42 INS32 UPD42 MOV42 INS40 INS9 INS42 INS40 INS21 INS42 INS40 INS21 INS42 INS40 INS21 INS42 INS40 INS8 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS40 MOV21 INS42 INS33 INS8 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS32 UPD42 MOV42 INS40 INS8 INS9 INS8 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS40 MOV25 INS42 INS42 INS32 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS8 INS42 INS42 INS32 INS42 INS40 MOV21 INS42 INS42 INS42 INS40 INS21 INS42 INS40 INS21 INS42 INS40 INS21 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 MOV42 INS42 MOV42 MOV9 MOV33 MOV33 MOV33 MOV33 MOV42 INS42 MOV42 MOV9 MOV33 MOV33 MOV42 MOV33 MOV42 INS42 MOV42 MOV9 MOV33 MOV42 MOV33 MOV33 MOV42 INS42 MOV42 MOV9 MOV42 MOV33 MOV33 MOV33 MOV42 INS42 MOV42 MOV9 MOV33 MOV33 MOV33 MOV33 INS60 INS32 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS21 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS33 INS42 INS42 INS21 INS36 INS42 MOV32 MOV27 INS42 INS42 INS42 INS42 INS7 INS32 MOV21 MOV53 UPD42 MOV42 MOV21 MOV53 UPD42 MOV42 INS32 INS7 INS42 MOV21 MOV53 INS39 INS59 INS42 MOV21 MOV53 UPD42 MOV42 MOV21 MOV53 INS42 MOV8 MOV21 MOV53 INS42 MOV21 MOV53 UPD42 MOV42 INS42 MOV21 MOV53 UPD42 MOV42 INS42 MOV21 MOV53 UPD42 MOV42 INS32 INS32 INS32 MOV21 MOV53 INS42 INS42 INS42 MOV21 MOV53 INS42 INS42 UPD42 MOV42 MOV21 MOV53 MOV21 MOV53 INS42 INS42 INS42 MOV21 MOV53 INS42 INS32 INS32 INS32 MOV43 INS59 INS42 INS42 INS32 MOV43 MOV43 UPD42 INS7 INS27 UPD42 INS32 MOV32 INS22 MOV32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS36 INS21 INS21 INS25 INS42 INS42 MOV21 INS21 INS42 INS42 INS9 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS9 INS9 UPD42 INS42 INS42 INS9 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS32 UPD42 INS42 INS40 INS42 INS32 INS42 INS33 INS9 UPD42 MOV42 INS52 INS42 INS42 UPD42 INS42 INS42 INS8 MOV8 UPD42 MOV42 MOV42 INS9 MOV27 INS32 INS32 INS42 INS8 INS8 INS42 UPD42 INS7 UPD42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS53 INS42 INS40 INS42 INS40 MOV21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS14 INS32 UPD42 MOV42 MOV42 MOV9 UPD42 INS32 MOV43 INS45 INS27 INS42 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS42 DEL9 DEL8 DEL31 DEL34 DEL42 DEL42 DEL32 DEL33 DEL33 DEL8 DEL25 DEL8 DEL42 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL32 DEL59 DEL60 DEL40 DEL40 DEL45 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL83 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL33 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL27 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL32 DEL27 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL32 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL32 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL8 DEL25 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL66 DEL65 DEL29 DEL42 DEL78 DEL66 DEL65 DEL29 DEL42 DEL78 DEL42 DEL78 DEL32 DEL41 DEL32 DEL41 DEL32 DEL41 DEL32 DEL41 DEL32 DEL41 DEL42 DEL42 DEL69 DEL42 DEL43 DEL69 DEL39 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL42 DEL14 DEL59 DEL60 DEL40 DEL42 DEL41 DEL42 DEL42 DEL42 DEL42 DEL42