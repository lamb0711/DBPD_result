HDFS-3498. Support replica removal in BlockPlacementPolicy and make BlockPlacementPolicyDefault extensible for reusing code in subclasses.  Contributed by Junping Du


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1353807 13f79535-47bb-0310-9956-ffa450edef68

-  private boolean considerLoad; 
+  protected boolean considerLoad; 
-  private NetworkTopology clusterMap;
+  protected NetworkTopology clusterMap;
-  private long heartbeatInterval;   // interval for DataNode heartbeats
+  protected long heartbeatInterval;   // interval for DataNode heartbeats
-  private int tolerateHeartbeatMultiplier;
+  protected int tolerateHeartbeatMultiplier;
-  private ThreadLocal<StringBuilder> threadLocalBuilder =
+  protected ThreadLocal<StringBuilder> threadLocalBuilder =
-  private DatanodeDescriptor chooseLocalNode(
+  protected DatanodeDescriptor chooseLocalNode(
-  private DatanodeDescriptor chooseLocalRack(
+  protected DatanodeDescriptor chooseLocalRack(
-  private void chooseRemoteRack(int numOfReplicas,
+  protected void chooseRemoteRack(int numOfReplicas,
-  private DatanodeDescriptor chooseRandom(
+  protected DatanodeDescriptor chooseRandom(
-  private void chooseRandom(int numOfReplicas,
+  protected void chooseRandom(int numOfReplicas,
-  private boolean isGoodTarget(DatanodeDescriptor node,
+  protected boolean isGoodTarget(DatanodeDescriptor node,
-    Iterator<DatanodeDescriptor> iter =
-          first.isEmpty() ? second.iterator() : first.iterator();
+    Iterator<DatanodeDescriptor> iter = pickupReplicaSet(first, second);
+
+  /**
+   * Pick up replica node set for deleting replica as over-replicated. 
+   * First set contains replica nodes on rack with more than one
+   * replica while second set contains remaining replica nodes.
+   * So pick up first set if not empty. If first is empty, then pick second.
+   */
+  protected Iterator<DatanodeDescriptor> pickupReplicaSet(
+      Collection<DatanodeDescriptor> first,
+      Collection<DatanodeDescriptor> second) {
+    Iterator<DatanodeDescriptor> iter =
+        first.isEmpty() ? second.iterator() : first.iterator();
+    return iter;
+  }

INS31 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS60 INS65 INS43 INS43 INS74 INS42 INS74 INS42 MOV60 INS41 INS74 INS59 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42