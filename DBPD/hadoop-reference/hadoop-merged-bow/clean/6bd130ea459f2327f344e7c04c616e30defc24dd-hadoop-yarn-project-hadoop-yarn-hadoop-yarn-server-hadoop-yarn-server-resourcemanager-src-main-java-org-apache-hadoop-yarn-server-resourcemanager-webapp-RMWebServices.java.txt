YARN-8028. Support authorizeUserAccessToQueue in RMWebServices. Contributed by Wangda Tan.

-import com.google.common.base.Joiner;
-import org.apache.commons.codec.binary.Base64;
+
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.activities.ActivitiesManager;
+
+  @GET
+  @Path(RMWSConsts.CHECK_USER_ACCESS_TO_QUEUE)
+  @Produces({ MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,
+                MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8 })
+  public Response checkUserAccessToQueue(
+      @PathParam(RMWSConsts.QUEUE) String queue,
+      @QueryParam(RMWSConsts.USER) String username,
+      @QueryParam(RMWSConsts.QUEUE_ACL_TYPE)
+        @DefaultValue("SUBMIT_APPLICATIONS") String queueAclType,
+      @Context HttpServletRequest hsr) throws AuthorizationException {
+    init();
+
+    // Check if the specified queue acl is valid.
+    QueueACL queueACL;
+    try {
+      queueACL = QueueACL.valueOf(queueAclType);
+    } catch (IllegalArgumentException e) {
+      return Response.status(Status.BAD_REQUEST).entity(
+          "Specified queueAclType=" + queueAclType
+              + " is not a valid type, valid queue acl types={"
+              + "SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}").build();
+    }
+
+    // For the user who invokes this REST call, he/she should have admin access
+    // to the queue. Otherwise we will reject the call.
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    if (callerUGI != null && !this.rm.getResourceScheduler().checkAccess(
+        callerUGI, QueueACL.ADMINISTER_QUEUE, queue)) {
+      return Response.status(Status.FORBIDDEN).entity(
+          "User=" + callerUGI.getUserName() + " doesn't haven access to queue="
+              + queue + " so it cannot check ACLs for other users.")
+          .build();
+    }
+
+    // Create UGI for the to-be-checked user.
+    UserGroupInformation user = UserGroupInformation.createRemoteUser(username);
+    if (user == null) {
+      return Response.status(Status.FORBIDDEN).entity(
+          "Failed to retrieve UserGroupInformation for user=" + username)
+          .build();
+    }
+
+    if (!this.rm.getResourceScheduler().checkAccess(user, queueACL, queue)) {
+      return Response.status(Status.FORBIDDEN).entity(
+          "User=" + username + " doesn't have access to queue=" + queue
+              + " with acl-type=" + queueAclType).build();
+    }
+
+    return Response.status(Status.OK).build();
+  }

INS31 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS40 INS42 INS4 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS79 INS43 INS42 INS78 INS43 INS42 INS42 INS21 INS60 INS54 INS60 INS25 INS60 INS25 INS25 INS41 INS27 INS27 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS45 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS38 INS8 INS32 INS40 INS45 INS40 INS40 INS45 INS40 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS27 INS38 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS32 INS41 INS32 INS42 INS7 INS43 INS42 INS41 INS42 INS42 INS9 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS22 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS22 INS42 INS32 INS42 INS27 INS32 INS42 INS27 INS52 INS42 INS32 INS42 INS27 INS32 INS42 INS27 INS52 INS42 INS42 INS42 INS40 INS45 INS32 INS45 INS42 INS45 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS40 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS40 INS45 INS42 INS45 INS45 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26