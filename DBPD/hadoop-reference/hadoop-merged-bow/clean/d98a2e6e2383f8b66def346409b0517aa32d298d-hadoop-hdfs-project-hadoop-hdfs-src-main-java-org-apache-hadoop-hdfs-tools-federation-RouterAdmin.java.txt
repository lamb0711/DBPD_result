HDFS-12934. RBF: Federation supports global quota. Contributed by Yiqun Lin.

+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+import org.apache.hadoop.hdfs.server.federation.router.RouterQuotaUsage;
-        + "\t[-ls <path>]\n";
+        + "\t[-ls <path>]\n"
+        + "\t[-setQuota <path> -ns <nsQuota> -ss <ssQuota>]\n"
+        + "\t[-clrQuota <path>\n";
+    } else if ("-setQuota".equalsIgnoreCase(cmd)) {
+      if (argv.length < 4) {
+        System.err.println("Not enough parameters specificed for cmd " + cmd);
+        printUsage();
+        return exitCode;
+      }
+    } else if ("-clrQuota".equalsIgnoreCase(cmd)) {
+      if (argv.length < 2) {
+        System.err.println("Not enough parameters specificed for cmd " + cmd);
+        printUsage();
+        return exitCode;
+      }
+      } else if ("-setQuota".equals(cmd)) {
+        if (setQuota(argv, i)) {
+          System.out.println(
+              "Successfully set quota for mount point " + argv[i]);
+        }
+      } else if ("-clrQuota".equals(cmd)) {
+        if (clrQuota(argv[i])) {
+          System.out.println(
+              "Successfully clear quota for mount point " + argv[i]);
+        }
+   * Set quota for a mount table entry.
+   *
+   * @param parameters Parameters of the quota.
+   * @param i Index in the parameters.
+   */
+  private boolean setQuota(String[] parameters, int i) throws IOException {
+    long nsQuota = HdfsConstants.QUOTA_DONT_SET;
+    long ssQuota = HdfsConstants.QUOTA_DONT_SET;
+
+    String mount = parameters[i++];
+    while (i < parameters.length) {
+      if (parameters[i].equals("-nsQuota")) {
+        i++;
+        try {
+          nsQuota = Long.parseLong(parameters[i]);
+        } catch (Exception e) {
+          System.err.println("Cannot parse nsQuota: " + parameters[i]);
+        }
+      } else if (parameters[i].equals("-ssQuota")) {
+        i++;
+        try {
+          ssQuota = Long.parseLong(parameters[i]);
+        } catch (Exception e) {
+          System.err.println("Cannot parse ssQuota: " + parameters[i]);
+        }
+      }
+
+      i++;
+    }
+
+    if (nsQuota <= 0 || ssQuota <= 0) {
+      System.err.println("Input quota value should be a positive number.");
+      return false;
+    }
+
+    return updateQuota(mount, nsQuota, ssQuota);
+  }
+
+  /**
+   * Clear quota of the mount point.
+   *
+   * @param mount Mount table to clear
+   * @return If the quota was cleared.
+   * @throws IOException Error clearing the mount point.
+   */
+  private boolean clrQuota(String mount) throws IOException {
+    return updateQuota(mount, HdfsConstants.QUOTA_DONT_SET,
+        HdfsConstants.QUOTA_DONT_SET);
+  }
+
+  /**
+   * Update quota of specified mount table.
+   *
+   * @param mount Specified mount table to update.
+   * @param nsQuota Namespace quota.
+   * @param ssQuota Storage space quota.
+   * @return If the quota was updated.
+   * @throws IOException Error updating quota.
+   */
+  private boolean updateQuota(String mount, long nsQuota, long ssQuota)
+      throws IOException {
+    // Get existing entry
+    MountTableManager mountTable = client.getMountTableManager();
+    GetMountTableEntriesRequest getRequest = GetMountTableEntriesRequest
+        .newInstance(mount);
+    GetMountTableEntriesResponse getResponse = mountTable
+        .getMountTableEntries(getRequest);
+    List<MountTable> results = getResponse.getEntries();
+    MountTable existingEntry = null;
+    for (MountTable result : results) {
+      if (mount.equals(result.getSourcePath())) {
+        existingEntry = result;
+        break;
+      }
+    }
+
+    if (existingEntry == null) {
+      return false;
+    } else {
+      long nsCount = existingEntry.getQuota().getFileAndDirectoryCount();
+      long ssCount = existingEntry.getQuota().getSpaceConsumed();
+      // If nsQuota or ssQuota was unset, reset corresponding usage
+      // value to zero.
+      if (nsQuota == HdfsConstants.QUOTA_DONT_SET) {
+        nsCount = 0;
+      }
+
+      if (nsQuota == HdfsConstants.QUOTA_DONT_SET) {
+        ssCount = 0;
+      }
+
+      RouterQuotaUsage updatedQuota = new RouterQuotaUsage.Builder()
+          .fileAndDirectoryCount(nsCount).quota(nsQuota)
+          .spaceConsumed(ssCount).spaceQuota(ssQuota).build();
+      existingEntry.setQuota(updatedQuota);
+    }
+
+    UpdateMountTableEntryRequest updateRequest =
+        UpdateMountTableEntryRequest.newInstance(existingEntry);
+    UpdateMountTableEntryResponse updateResponse = mountTable
+        .updateMountTableEntry(updateRequest);
+    return updateResponse.getStatus();
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS5 INS42 INS39 INS42 INS42 INS60 INS60 INS60 INS61 INS25 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS70 INS25 INS60 INS60 INS41 INS66 INS42 INS66 INS42 INS66 INS43 INS85 INS39 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS8 INS43 INS59 INS43 INS59 INS32 INS25 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS2 INS42 INS40 INS25 INS21 INS27 INS27 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS33 INS43 INS42 INS25 INS42 INS33 INS41 INS60 INS60 INS25 INS25 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS32 INS8 INS25 INS42 INS37 INS32 INS8 INS25 INS37 INS42 INS34 INS42 INS34 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS9 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS25 INS32 INS8 INS42 INS2 INS42 INS45 INS21 INS54 INS32 INS8 INS42 INS40 INS42 INS45 INS42 INS42 INS32 INS21 INS10 INS42 INS32 INS42 INS32 INS42 INS40 INS21 INS42 INS40 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS8 INS45 INS42 INS42 INS25 INS25 INS42 INS42 INS37 INS8 INS12 INS2 INS42 INS45 INS21 INS54 INS42 INS42 INS7 INS32 INS42 INS32 INS42 INS7 INS7 INS32 INS42 INS40 INS34 INS21 INS21 INS41 INS27 INS8 INS32 INS8 INS25 INS42 INS21 INS44 INS8 INS42 INS42 INS37 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS32 INS42 INS42 INS32 INS32 INS42 INS40 INS34 INS21 INS21 INS41 INS45 INS42 INS42 INS25 INS32 INS8 MOV8 INS7 INS43 INS42 INS21 INS42 INS21 INS44 INS8 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS32 INS42 INS32 INS8 INS45 INS42 INS42 INS25 INS42 INS32 INS42 INS32 INS7 INS43 INS42 INS21 INS32 INS42 INS42 INS45 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS21 INS32 INS8 INS42 INS42 INS2 INS40 INS42 INS27 INS42 INS32 INS42 INS32 INS14 INS42 INS42 INS45 INS42 INS32 INS42 INS2 INS21 INS42 INS42 INS45 INS2 INS42 INS42 INS2 INS40 INS42 INS27 INS43 INS40 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS2 INS40 INS45 INS2 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS2 INS42 INS42