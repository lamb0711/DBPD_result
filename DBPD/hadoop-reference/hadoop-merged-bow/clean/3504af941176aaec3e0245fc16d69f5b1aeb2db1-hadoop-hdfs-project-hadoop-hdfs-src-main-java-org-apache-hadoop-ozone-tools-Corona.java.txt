HDFS-12537. Ozone: Reduce key creation overhead in Corona. Contributed by Lokesh Jain.

+import com.fasterxml.jackson.annotation.JsonAutoDetect;
+import com.fasterxml.jackson.annotation.PropertyAccessor;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.ObjectWriter;
+import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang.time.DurationFormatUtils;
+import org.apache.hadoop.ozone.OzoneConsts;
+import org.apache.hadoop.ozone.client.*;
-import org.apache.hadoop.ozone.client.ObjectStore;
-import org.apache.hadoop.ozone.client.OzoneBucket;
-import org.apache.hadoop.ozone.client.OzoneClient;
-import org.apache.hadoop.ozone.client.OzoneClientFactory;
-import org.apache.hadoop.ozone.client.OzoneVolume;
+import org.apache.hadoop.util.*;
-import org.apache.hadoop.util.GenericOptionsParser;
-import org.apache.hadoop.util.Tool;
-import org.apache.hadoop.util.ToolRunner;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
-import java.util.Arrays;
+import java.text.SimpleDateFormat;
+import java.util.*;
+import static java.lang.Math.max;
+import static java.lang.Math.min;
+
+  private static final String JSON_WRITE_DIRECTORY = "jsonDir";
+  private static final String DURATION_FORMAT = "HH:mm:ss,SSS";
+  private String jsonDir;
+  private byte[] keyValue = null;
+  private long jobStartTime;
+  private List<Double> threadThroughput;
+    jobStartTime = System.currentTimeMillis();
+
+    threadThroughput = Collections.synchronizedList(new ArrayList<Double>());
+
+    keyValue =
+        DFSUtil.string2Bytes(RandomStringUtils.randomAscii(keySize - 36));
+
+
+    OptionBuilder.withDescription("directory where json is created");
+    OptionBuilder.hasArg();
+    Option optJsonDir = OptionBuilder.create(JSON_WRITE_DIRECTORY);
+
+    options.addOption(optJsonDir);
-    mode = cmdLine.hasOption(MODE) ?
-        cmdLine.getOptionValue(MODE) : MODE_DEFAULT;
+    mode = cmdLine.getOptionValue(MODE, MODE_DEFAULT);
-    source = cmdLine.hasOption(SOURCE) ?
-        cmdLine.getOptionValue(SOURCE) : SOURCE_DEFAULT;
+    source = cmdLine.getOptionValue(SOURCE, SOURCE_DEFAULT);
-    numOfThreads = cmdLine.hasOption(NUM_OF_THREADS) ?
-        cmdLine.getOptionValue(NUM_OF_THREADS) : NUM_OF_THREADS_DEFAULT;
+    numOfThreads =
+        cmdLine.getOptionValue(NUM_OF_THREADS, NUM_OF_THREADS_DEFAULT);
-    numOfVolumes = cmdLine.hasOption(NUM_OF_VOLUMES) ?
-        cmdLine.getOptionValue(NUM_OF_VOLUMES) : NUM_OF_VOLUMES_DEFAULT;
+    jsonDir = cmdLine.getOptionValue(JSON_WRITE_DIRECTORY);
-    numOfBuckets = cmdLine.hasOption(NUM_OF_BUCKETS) ?
-        cmdLine.getOptionValue(NUM_OF_BUCKETS) : NUM_OF_BUCKETS_DEFAULT;
+    numOfVolumes =
+        cmdLine.getOptionValue(NUM_OF_VOLUMES, NUM_OF_VOLUMES_DEFAULT);
-    numOfKeys = cmdLine.hasOption(NUM_OF_KEYS) ?
-        cmdLine.getOptionValue(NUM_OF_KEYS) : NUM_OF_KEYS_DEFAULT;
+    numOfBuckets =
+        cmdLine.getOptionValue(NUM_OF_BUCKETS, NUM_OF_BUCKETS_DEFAULT);
+
+    numOfKeys = cmdLine.getOptionValue(NUM_OF_KEYS, NUM_OF_KEYS_DEFAULT);
+    if (keySize < 1024) {
+      throw new IllegalArgumentException(
+          "keySize can not be less than 1024 bytes");
+    }
+
-    replicationFactor = useRatis ?
-        Integer.parseInt(cmdLine.getOptionValue(RATIS)) : 0;
+    replicationFactor =
+        useRatis ? Integer.parseInt(cmdLine.getOptionValue(RATIS)) : 0;
+    System.out.println("-jsonDir                        "
+        + "directory where json is created.");
-    String execTime = String.format("%02d:%02d:%02d",
-        TimeUnit.NANOSECONDS.toHours(endTime),
-        TimeUnit.NANOSECONDS.toMinutes(endTime) -
-            TimeUnit.HOURS.toMinutes(
-                TimeUnit.NANOSECONDS.toHours(endTime)),
-        TimeUnit.NANOSECONDS.toSeconds(endTime) -
-            TimeUnit.MINUTES.toSeconds(
-                TimeUnit.NANOSECONDS.toMinutes(endTime)));
+    String execTime = DurationFormatUtils
+        .formatDuration(TimeUnit.NANOSECONDS.toMillis(endTime),
+            DURATION_FORMAT);
+    String prettyTotalVolumeTime = DurationFormatUtils
+        .formatDuration(TimeUnit.NANOSECONDS.toMillis(volumeCreationTime.get()),
+            DURATION_FORMAT);
+    String prettyTotalBucketTime = DurationFormatUtils
+        .formatDuration(TimeUnit.NANOSECONDS.toMillis(bucketCreationTime.get()),
+            DURATION_FORMAT);
+    String prettyTotalKeyCreationTime = DurationFormatUtils
+        .formatDuration(TimeUnit.NANOSECONDS.toMillis(keyCreationTime.get()),
+            DURATION_FORMAT);
+    String prettyTotalKeyWriteTime = DurationFormatUtils
+        .formatDuration(TimeUnit.NANOSECONDS.toMillis(keyWriteTime.get()),
+            DURATION_FORMAT);
-    long volumeTime = volumeCreationTime.longValue();
-    String prettyVolumeTime = String.format("%02d:%02d:%02d:%02d",
-        TimeUnit.NANOSECONDS.toHours(volumeTime),
-        TimeUnit.NANOSECONDS.toMinutes(volumeTime) -
-            TimeUnit.HOURS.toMinutes(
-                TimeUnit.NANOSECONDS.toHours(volumeTime)),
-        TimeUnit.NANOSECONDS.toSeconds(volumeTime) -
-            TimeUnit.MINUTES.toSeconds(
-                TimeUnit.NANOSECONDS.toMinutes(volumeTime)),
-        TimeUnit.NANOSECONDS.toMillis(volumeTime) -
-            TimeUnit.SECONDS.toMillis(
-                TimeUnit.NANOSECONDS.toSeconds(volumeTime)));
+    long volumeTime =
+        TimeUnit.NANOSECONDS.toMillis(volumeCreationTime.get()) / threadCount;
+    String prettyAverageVolumeTime =
+        DurationFormatUtils.formatDuration(volumeTime, DURATION_FORMAT);
-    long bucketTime = bucketCreationTime.longValue() / threadCount;
-    String prettyBucketTime = String.format("%02d:%02d:%02d:%02d",
-        TimeUnit.NANOSECONDS.toHours(bucketTime),
-        TimeUnit.NANOSECONDS.toMinutes(bucketTime) -
-            TimeUnit.HOURS.toMinutes(
-                TimeUnit.NANOSECONDS.toHours(bucketTime)),
-        TimeUnit.NANOSECONDS.toSeconds(bucketTime) -
-            TimeUnit.MINUTES.toSeconds(
-                TimeUnit.NANOSECONDS.toMinutes(bucketTime)),
-        TimeUnit.NANOSECONDS.toMillis(bucketTime) -
-            TimeUnit.SECONDS.toMillis(
-                TimeUnit.NANOSECONDS.toSeconds(bucketTime)));
+    long bucketTime =
+        TimeUnit.NANOSECONDS.toMillis(bucketCreationTime.get()) / threadCount;
+    String prettyAverageBucketTime =
+        DurationFormatUtils.formatDuration(bucketTime, DURATION_FORMAT);
-    long totalKeyCreationTime = keyCreationTime.longValue() / threadCount;
-    String prettyKeyCreationTime = String.format("%02d:%02d:%02d:%02d",
-        TimeUnit.NANOSECONDS.toHours(totalKeyCreationTime),
-        TimeUnit.NANOSECONDS.toMinutes(totalKeyCreationTime) -
-            TimeUnit.HOURS.toMinutes(
-                TimeUnit.NANOSECONDS.toHours(totalKeyCreationTime)),
-        TimeUnit.NANOSECONDS.toSeconds(totalKeyCreationTime) -
-            TimeUnit.MINUTES.toSeconds(
-                TimeUnit.NANOSECONDS.toMinutes(totalKeyCreationTime)),
-        TimeUnit.NANOSECONDS.toMillis(totalKeyCreationTime) -
-            TimeUnit.SECONDS.toMillis(
-                TimeUnit.NANOSECONDS.toSeconds(totalKeyCreationTime)));
+    long averageKeyCreationTime =
+        TimeUnit.NANOSECONDS.toMillis(keyCreationTime.get()) / threadCount;
+    String prettyAverageKeyCreationTime = DurationFormatUtils
+        .formatDuration(averageKeyCreationTime, DURATION_FORMAT);
-    long totalKeyWriteTime = keyWriteTime.longValue() / threadCount;
-    String prettyKeyWriteTime = String.format("%02d:%02d:%02d:%02d",
-        TimeUnit.NANOSECONDS.toHours(totalKeyWriteTime),
-        TimeUnit.NANOSECONDS.toMinutes(totalKeyWriteTime) -
-            TimeUnit.HOURS.toMinutes(
-                TimeUnit.NANOSECONDS.toHours(totalKeyWriteTime)),
-        TimeUnit.NANOSECONDS.toSeconds(totalKeyWriteTime) -
-            TimeUnit.MINUTES.toSeconds(
-                TimeUnit.NANOSECONDS.toMinutes(totalKeyWriteTime)),
-        TimeUnit.NANOSECONDS.toMillis(totalKeyWriteTime) -
-            TimeUnit.SECONDS.toMillis(
-                TimeUnit.NANOSECONDS.toSeconds(totalKeyWriteTime)));
+    long averageKeyWriteTime =
+        TimeUnit.NANOSECONDS.toMillis(keyWriteTime.get()) / threadCount;
+    String prettyAverageKeyWriteTime = DurationFormatUtils
+        .formatDuration(averageKeyWriteTime, DURATION_FORMAT);
+    out.println("Git Base Revision: " + VersionInfo.getRevision());
-    out.println("Time spent in volume creation: " + prettyVolumeTime);
-    out.println("Time spent in bucket creation: " + prettyBucketTime);
-    out.println("Time spent in key creation: " + prettyKeyCreationTime);
-    out.println("Time spent in writing keys: " + prettyKeyWriteTime);
+    out.println("Time spent in volume creation: " + prettyTotalVolumeTime);
+    out.println("Time spent in bucket creation: " + prettyTotalBucketTime);
+    out.println("Time spent in key creation: " + prettyTotalKeyCreationTime);
+    out.println("Time spent in key write: " + prettyTotalKeyWriteTime);
+    out.println(
+        "Average Time spent in volume creation: " + prettyAverageVolumeTime);
+    out.println(
+        "Average Time spent in bucket creation: " + prettyAverageBucketTime);
+    out.println(
+        "Average Time spent in key creation: " + prettyAverageKeyCreationTime);
+    out.println(
+        "Average Time spent in key write: " + prettyAverageKeyWriteTime);
+
+    if (jsonDir != null) {
+      CoronaJobInfo jobInfo = new CoronaJobInfo()
+          .setExecTime(execTime)
+          .setGitBaseRevision(VersionInfo.getRevision())
+          .setAverageVolumeCreationTime(prettyAverageVolumeTime)
+          .setAverageBucketCreationTime(prettyAverageBucketTime)
+          .setAverageKeyCreationTime(prettyAverageKeyCreationTime)
+          .setAverageKeyWriteTime(prettyAverageKeyWriteTime)
+          .setTotalVolumeCreationTime(prettyTotalVolumeTime)
+          .setTotalBucketCreationTime(prettyTotalBucketTime)
+          .setTotalKeyCreationTime(prettyTotalKeyCreationTime)
+          .setTotalKeyWriteTime(prettyTotalKeyWriteTime);
+      String jsonName =
+          new SimpleDateFormat("yyyyMMddHHmmss").format(Time.now()) + ".json";
+      String jsonPath = jsonDir + "/" + jsonName;
+      FileOutputStream os = null;
+      try {
+        os = new FileOutputStream(jsonPath);
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.setVisibility(PropertyAccessor.FIELD,
+            JsonAutoDetect.Visibility.ANY);
+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();
+        writer.writeValue(os, jobInfo);
+      } catch (FileNotFoundException e) {
+        out.println("Json File could not be created for the path: " + jsonPath);
+        out.println(e);
+      } catch (IOException e) {
+        out.println("Json object could not be created");
+        out.println(e);
+      } finally {
+        try {
+          if (os != null) {
+            os.close();
+          }
+        } catch (IOException e) {
+          LOG.warn("Could not close the output stream for json", e);
+        }
+      }
+    }
+   * Returns the length of the common key value initialized.
+   * @return key value length initialized.
+   */
+  @VisibleForTesting
+  long getKeyValueLength(){
+    return keyValue.length;
+  }
+
+  /**
-
+
+      Long threadKeyWriteTime = 0L;
-            byte[] value = DFSUtil.string2Bytes(
-                RandomStringUtils.randomAscii(keySize));
+            byte[] randomValue =
+                DFSUtil.string2Bytes(UUID.randomUUID().toString());
-              OzoneOutputStream os = bucket.createKey(key, value.length,
-                  type, factor);
+              OzoneOutputStream os =
+                  bucket.createKey(key, keySize, type, factor);
-              os.write(value);
+              os.write(keyValue);
+              os.write(randomValue);
-              keyWriteTime.getAndAdd(System.nanoTime() - keyWriteStart);
-              totalBytesWritten.getAndAdd(value.length);
+              threadKeyWriteTime += System.nanoTime() - keyWriteStart;
+              totalBytesWritten.getAndAdd(keySize);
+                byte[] value = ArrayUtils.addAll(keyValue, randomValue);
+
+      keyWriteTime.getAndAdd(threadKeyWriteTime);
+      boolean success = threadThroughput.add(
+          (totalBuckets * totalKeys * keySize * 1.0) / TimeUnit.NANOSECONDS
+              .toSeconds(threadKeyWriteTime));
+      if (!success) {
+        LOG.warn("Throughput could not be added for thread id: {}",
+            Thread.currentThread().getId());
+      }
+
+  }
+
+  private final class CoronaJobInfo {
+
+    private String gitBaseRevision;
+    private String jobStartTime;
+    private String numOfVolumes;
+    private String numOfBuckets;
+    private String numOfKeys;
+    private String numOfThreads;
+    private String mode;
+    private String totalBucketCreationTime;
+    private String totalVolumeCreationTime;
+    private String totalKeyCreationTime;
+    private String totalKeyWriteTime;
+    private String averageBucketCreationTime;
+    private String averageVolumeCreationTime;
+    private String averageKeyCreationTime;
+    private String averageKeyWriteTime;
+    private String dataWritten;
+    private String execTime;
+
+    private int keySize;
+
+    private String[] threadThroughputPerSecond;
+    private String minThreadThroughputPerSecond;
+    private String maxThreadThroughputPerSecond;
+    private String totalThroughputPerSecond;
+
+    private CoronaJobInfo() {
+      this.numOfVolumes = Corona.this.numOfVolumes;
+      this.numOfBuckets = Corona.this.numOfBuckets;
+      this.numOfKeys = Corona.this.numOfKeys;
+      this.numOfThreads = Corona.this.numOfThreads;
+      this.keySize = Corona.this.keySize;
+      this.mode = Corona.this.mode;
+      this.jobStartTime = Time.formatTime(Corona.this.jobStartTime);
+
+      long totalBytes =
+          Long.parseLong(numOfVolumes) * Long.parseLong(numOfBuckets) * Long
+              .parseLong(numOfKeys) * keySize;
+      this.dataWritten = getInStorageUnits((double) totalBytes);
+
+      threadThroughputPerSecond = new String[Integer.parseInt(numOfThreads)];
+      double minThreadThroughput = Double.MAX_VALUE, maxThreadThroughput = 0.0,
+          totalThroughput = 0.0;
+      int i = 0;
+      for (Double throughput : Corona.this.threadThroughput) {
+        minThreadThroughput = min(throughput, minThreadThroughput);
+        maxThreadThroughput = max(throughput, maxThreadThroughput);
+        totalThroughput += throughput;
+        threadThroughputPerSecond[i++] = getInStorageUnits(throughput);
+      }
+      minThreadThroughputPerSecond = getInStorageUnits(minThreadThroughput);
+      maxThreadThroughputPerSecond = getInStorageUnits(maxThreadThroughput);
+      totalThroughputPerSecond = getInStorageUnits(totalThroughput);
+    }
+
+    private String getInStorageUnits(Double value) {
+      double size;
+      OzoneQuota.Units unit;
+      if ((long) (value / OzoneConsts.KB) == 0) {
+        size = value / OzoneConsts.KB;
+        unit = OzoneQuota.Units.KB;
+      } else if ((long) (value / OzoneConsts.MB) == 0) {
+        size = value / OzoneConsts.MB;
+        unit = OzoneQuota.Units.MB;
+      } else if ((long) (value / OzoneConsts.GB) == 0) {
+        size = value / OzoneConsts.GB;
+        unit = OzoneQuota.Units.GB;
+      } else if ((long) (value / OzoneConsts.TB) == 0) {
+        size = value / OzoneConsts.TB;
+        unit = OzoneQuota.Units.TB;
+      } else {
+        size = value;
+        unit = OzoneQuota.Units.BYTES;
+      }
+      return size + " " + unit;
+    }
+
+    public CoronaJobInfo setGitBaseRevision(String gitBaseRevisionVal) {
+      gitBaseRevision = gitBaseRevisionVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTotalBucketCreationTime(
+        String totalBucketCreationTimeVal) {
+      totalBucketCreationTime = totalBucketCreationTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTotalVolumeCreationTime(
+        String totalVolumeCreationTimeVal) {
+      totalVolumeCreationTime = totalVolumeCreationTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTotalKeyCreationTime(
+        String totalKeyCreationTimeVal) {
+      totalKeyCreationTime = totalKeyCreationTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTotalKeyWriteTime(String totalKeyWriteTimeVal) {
+      totalKeyWriteTime = totalKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setAverageBucketCreationTime(
+        String averageBucketCreationTimeVal) {
+      averageBucketCreationTime = averageBucketCreationTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setAverageVolumeCreationTime(
+        String averageVolumeCreationTimeVal) {
+      averageVolumeCreationTime = averageVolumeCreationTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setAverageKeyCreationTime(
+        String averageKeyCreationTimeVal) {
+      averageKeyCreationTime = averageKeyCreationTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setAverageKeyWriteTime(
+        String averageKeyWriteTimeVal) {
+      averageKeyWriteTime = averageKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setExecTime(String execTimeVal) {
+      execTime = execTimeVal;
+      return this;
+    }
+
+    public String getJobStartTime() {
+      return jobStartTime;
+    }
+
+    public String getNumOfVolumes() {
+      return numOfVolumes;
+    }
+
+    public String getNumOfBuckets() {
+      return numOfBuckets;
+    }
+
+    public String getNumOfKeys() {
+      return numOfKeys;
+    }
+
+    public String getNumOfThreads() {
+      return numOfThreads;
+    }
+
+    public String getMode() {
+      return mode;
+    }
+
+    public String getTotalBucketCreationTime() {
+      return totalBucketCreationTime;
+    }
+
+    public String getTotalVolumeCreationTime() {
+      return totalVolumeCreationTime;
+    }
+
+    public String getTotalKeyCreationTime() {
+      return totalKeyCreationTime;
+    }
+
+    public String getAverageBucketCreationTime() {
+      return averageBucketCreationTime;
+    }
+
+    public String getTotalKeyWriteTime() {
+      return totalKeyWriteTime;
+    }
+
+    public String getAverageKeyWriteTime() {
+      return averageKeyWriteTime;
+    }
+
+    public String getAverageVolumeCreationTime() {
+      return averageVolumeCreationTime;
+    }
+
+    public String getAverageKeyCreationTime() {
+      return averageKeyCreationTime;
+    }
+
+    public String getExecTime() {
+      return execTime;
+    }
+
+    public int getKeySize() {
+      return keySize;
+    }
+
+    public String getGitBaseRevision() {
+      return gitBaseRevision;
+    }
+
+    public String getMinThreadThroughputPerSecond() {
+      return minThreadThroughputPerSecond;
+    }
+
+    public String getMaxThreadThroughputPerSecond() {
+      return maxThreadThroughputPerSecond;
+    }
+
+    public String getDataWritten() {
+      return dataWritten;
+    }
+
+    public String getTotalThroughput() {
+      return totalThroughputPerSecond;
+    }
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS5 INS59 INS83 INS39 INS59 INS83 INS74 INS59 MOV21 MOV21 MOV60 MOV21 MOV60 MOV21 MOV60 MOV21 MOV60 MOV21 MOV29 MOV83 MOV39 MOV42 MOV44 INS8 INS29 INS78 INS39 INS42 INS8 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS39 INS85 INS42 INS33 INS42 INS43 INS43 INS42 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS25 INS21 MOV60 MOV60 INS60 INS60 INS60 INS60 INS60 MOV60 INS60 INS60 INS60 INS60 INS60 MOV60 INS60 MOV21 MOV21 INS21 MOV21 MOV21 MOV21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV21 MOV25 MOV21 MOV21 INS25 INS65 INS65 INS42 INS41 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS5 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS7 INS7 INS7 INS32 INS43 INS59 INS32 INS32 INS7 INS7 INS27 INS8 INS32 MOV43 INS59 MOV43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 INS39 INS59 MOV43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS27 INS8 INS66 INS66 INS40 INS60 INS21 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV60 INS21 INS21 INS60 INS60 INS70 INS21 INS21 INS21 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 UPD42 MOV42 INS32 INS42 INS32 INS32 INS32 INS42 INS34 INS53 INS40 INS42 INS27 MOV42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS27 INS42 UPD42 MOV42 INS32 INS42 INS27 INS42 INS32 INS42 INS27 INS42 INS42 INS32 UPD42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS27 UPD42 MOV42 INS42 INS27 UPD42 MOV42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 MOV42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 MOV42 INS42 INS27 UPD42 MOV42 INS42 INS27 UPD42 MOV42 INS42 INS27 INS42 INS33 MOV60 INS60 INS60 INS60 INS54 INS43 INS59 INS32 INS39 INS59 INS38 INS8 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS39 INS59 INS59 INS59 INS39 INS59 INS44 INS22 INS8 INS7 INS7 INS7 INS42 INS39 INS59 INS43 INS59 INS27 INS8 INS25 INS27 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 INS14 INS45 INS45 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 MOV32 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS43 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS8 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS21 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS32 UPD42 UPD27 INS22 INS32 INS42 INS3 INS42 INS40 INS42 INS34 INS42 INS34 INS42 INS34 INS43 INS42 INS52 INS42 INS21 INS21 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS11 INS34 INS21 INS21 INS27 INS8 INS25 INS42 UPD45 MOV45 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS27 INS43 INS45 UPD42 MOV40 UPD42 MOV42 INS32 UPD42 INS32 MOV40 UPD42 MOV42 INS32 UPD42 INS32 INS40 INS42 INS32 UPD40 UPD42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS33 INS21 INS60 INS21 INS60 INS21 INS44 INS8 INS44 INS8 INS54 INS42 INS42 INS27 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS22 INS32 INS32 INS42 INS52 INS42 INS42 INS11 INS5 INS32 INS42 INS42 INS7 INS7 INS7 INS7 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS39 INS36 INS7 INS7 INS11 INS34 INS21 INS21 INS27 INS8 INS25 INS43 INS43 INS42 INS34 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS7 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS42 INS21 INS21 INS43 INS42 INS21 INS21 INS8 INS12 INS36 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS42 INS43 INS85 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS2 INS32 INS27 INS42 INS27 INS42 INS40 INS39 INS36 INS7 INS7 INS11 INS34 INS21 INS21 INS27 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS14 INS42 INS42 INS14 INS42 INS42 UPD40 MOV40 INS40 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS25 INS44 INS8 INS27 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS37 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS42 INS40 INS27 INS42 INS27 INS42 INS40 INS39 INS36 INS7 INS7 INS11 INS34 MOV21 INS21 INS21 INS21 INS32 INS42 INS42 INS43 INS45 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS27 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 INS42 UPD42 MOV42 INS27 INS8 INS43 INS42 INS21 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS27 INS42 INS27 INS42 INS40 INS39 INS36 INS7 INS7 INS7 INS7 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS45 INS42 INS42 INS33 INS21 INS42 INS32 INS42 INS40 INS42 INS40 INS27 INS42 INS27 INS42 INS40 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 UPD42 INS21 UPD42 MOV42 INS40 UPD42 MOV42 INS40 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS7 INS32 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 MOV27 INS42 INS60 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS5 INS59 INS32 INS42 INS32 INS39 INS85 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL16 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL16 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL16 DEL32 DEL32 DEL42 DEL16 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL16 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL16 DEL32 DEL40 DEL32 DEL39 DEL32 DEL42 DEL27 DEL45 DEL32 DEL40 DEL32 DEL27 DEL32 DEL40 DEL32 DEL27 DEL32 DEL59 DEL60 DEL45 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL27 DEL40 DEL42 DEL42 DEL32 DEL40 DEL40 DEL32 DEL32 DEL27 DEL40 DEL42 DEL40 DEL32 DEL32 DEL27 DEL32 DEL59 DEL60 DEL45 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL32 DEL27 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL32 DEL27 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL32 DEL27 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL40 DEL32 DEL40 DEL42 DEL40 DEL32 DEL32 DEL27 DEL40 DEL32 DEL40 DEL42 DEL40 DEL32 DEL32 DEL27 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL40 DEL32 DEL32 DEL27 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL40 DEL42 DEL42 DEL32 DEL40 DEL32 DEL40 DEL40 DEL32 DEL32 DEL27 DEL40 DEL32 DEL40 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL27 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL27 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL31 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL42 DEL45 DEL27 DEL32