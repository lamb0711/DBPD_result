HDFS-3726. If a logger misses an RPC, don't retry that logger until next segment. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381482 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.concurrent.ScheduledExecutorService;
+import org.apache.hadoop.hdfs.qjournal.protocol.JournalOutOfSyncException;
+  /**
+   * If this logger misses some edits, or restarts in the middle of
+   * a segment, the writer won't be able to write any more edits until
+   * the beginning of the next segment. Upon detecting this situation,
+   * the writer sets this flag to true to avoid sending useless RPCs.
+   */
+  private boolean outOfSync = false;
+
+  /**
+   * @return true if the server has gotten out of sync from the client,
+   * and thus a log roll is required for this logger to successfully start
+   * logging more edits.
+   */
+  public synchronized boolean isOutOfSync() {
+    return outOfSync;
+  }
-          getProxy().journal(createReqInfo(),
-              segmentTxId, firstTxnId, numTxns, data);
+          throwIfOutOfSync();
+
+          try {
+            getProxy().journal(createReqInfo(),
+                segmentTxId, firstTxnId, numTxns, data);
+          } catch (IOException e) {
+            QuorumJournalManager.LOG.warn(
+                "Remote journal " + IPCLoggerChannel.this + " failed to " +
+                "write txns " + firstTxnId + "-" + (firstTxnId + numTxns - 1) +
+                ". Will try to write to this JN again after the next " +
+                "log roll.", e); 
+            synchronized (IPCLoggerChannel.this) {
+              outOfSync = true;
+            }
+            throw e;
+          }
+  private synchronized void throwIfOutOfSync() throws JournalOutOfSyncException {
+    if (outOfSync) {
+      // TODO: send a "heartbeat" here so that the remote node knows the newest
+      // committed txid, for metrics purposes
+      throw new JournalOutOfSyncException(
+          "Journal disabled until next roll");
+    }
+  }
+
+        synchronized (IPCLoggerChannel.this) {
+          if (outOfSync) {
+            outOfSync = false;
+            QuorumJournalManager.LOG.info(
+                "Restarting previously-stopped writes to " +
+                IPCLoggerChannel.this + " in segment starting at txid " +
+                txid);
+          }
+        }
+        throwIfOutOfSync();
+        
+    if (outOfSync) {
+      sb.append(" (will re-join on next segment)");
+    }
-}
+}

MOV26 UPD40 INS23 INS31 INS31 INS29 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS43 INS8 INS65 INS42 INS9 INS65 INS41 INS42 INS25 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS8 INS42 INS8 INS53 INS21 INS14 INS32 INS43 INS45 INS42 INS42 INS45 INS42 INS51 INS21 INS52 INS8 INS32 INS8 INS42 INS25 INS42 INS21 INS54 MOV51 MOV41 INS42 INS8 INS32 MOV8 INS12 INS21 INS21 INS42 INS44 INS8 INS7 INS32 INS43 INS42 INS21 INS51 INS53 INS42 INS9 INS40 INS42 INS27 INS42 INS32 INS52 INS8 INS42 INS45 INS52 INS45 INS42 INS40 INS42 INS27 INS42 INS42 INS21 INS42 INS45 INS52 INS45 INS45 INS42 INS45 INS36 INS45 INS45 INS7 INS42 INS27 INS42 INS9 INS27 INS34 INS42 INS42