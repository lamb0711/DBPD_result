HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.

+  private final static byte[] DOT_DOT =
+      DFSUtil.string2Bytes("..");
-   * @param pathComponents path components corresponding to the path
-  String resolvePath(FSPermissionChecker pc, String path, byte[][] pathComponents)
+  String resolvePath(FSPermissionChecker pc, String path)
-    return resolvePath(path, pathComponents, this);
+    return resolvePath(path, this);
-  /**
-   * @return path components for reserved path, else null.
-   */
-  static byte[][] getPathComponentsForReservedPath(String src) {
-    return !isReservedName(src) ? null : INode.getPathComponents(src);
-  }
-
+  static boolean isReservedName(byte[][] components) {
+    return (components.length > 2) &&
+            Arrays.equals(INodeDirectory.ROOT_NAME, components[0]) &&
+            Arrays.equals(DOT_RESERVED, components[1]);
+  }
+
-   * @param pathComponents path components corresponding to the path
-  static String resolvePath(String src, byte[][] pathComponents,
+  static String resolvePath(String src,
-    final int nComponents = (pathComponents == null) ?
-        0 : pathComponents.length;
-    if (nComponents <= 2) {
-      return src;
-    }
-    if (!Arrays.equals(DOT_RESERVED, pathComponents[1])) {
+    byte[][] pathComponents = INode.getPathComponents(src);
+    final int nComponents = pathComponents.length;
+    if (!isReservedName(pathComponents)) {
-      return src;
-    }
-
-    if (Arrays.equals(DOT_INODES, pathComponents[2])) {
+    } else if (Arrays.equals(DOT_INODES, pathComponents[2])) {
-        return resolveDotInodesPath(src, pathComponents, fsd);
-      } else {
-        return src;
+        pathComponents = resolveDotInodesPath(pathComponents, fsd);
-        return Path.SEPARATOR;
+        pathComponents = new byte[][]{INodeDirectory.ROOT_NAME};
-          return src;
-          return constructRemainingPath("", pathComponents, 3);
+          pathComponents = constructRemainingPath(
+              new byte[][]{INodeDirectory.ROOT_NAME}, pathComponents, 3);
-    } else {
-      /* It's some sort of /.reserved/<unknown> path. Ignore it. */
-      return src;
+    // this double conversion will be unnecessary when resolving returns
+    // INodesInPath (needs components byte[][])
+    return DFSUtil.byteArray2PathString(pathComponents);
-  private static String resolveDotInodesPath(String src,
+  private static byte[][] resolveDotInodesPath(
-      throw new FileNotFoundException("Invalid inode path: " + src);
+      throw new FileNotFoundException("Invalid inode path: " +
+          DFSUtil.byteArray2PathString(pathComponents));
-      return Path.SEPARATOR;
+      return new byte[][]{INodeDirectory.ROOT_NAME};
-          "File for given inode path does not exist: " + src);
+          "File for given inode path does not exist: " +
+              DFSUtil.byteArray2PathString(pathComponents));
-    
+
-        && DFSUtil.bytes2String(pathComponents[4]).equals("..")) {
+        && Arrays.equals(pathComponents[4], DOT_DOT)) {
-        return Path.SEPARATOR;
-      } else {
-        return parent.getFullPathName();
+        return new byte[][]{INodeDirectory.ROOT_NAME};
+      return parent.getPathComponents();
-
-    String path = "";
-    if (id != INodeId.ROOT_INODE_ID) {
-      path = inode.getFullPathName();
-    }
-    return constructRemainingPath(path, pathComponents, 4);
+    return constructRemainingPath(
+        inode.getPathComponents(), pathComponents, 4);
-  private static String constructRemainingPath(String pathPrefix,
-      byte[][] pathComponents, int startAt) {
-
-    StringBuilder path = new StringBuilder(pathPrefix);
-    for (int i = startAt; i < pathComponents.length; i++) {
-      path.append(Path.SEPARATOR).append(
-          DFSUtil.bytes2String(pathComponents[i]));
+  private static byte[][] constructRemainingPath(byte[][] components,
+      byte[][] extraComponents, int startAt) {
+    int remainder = extraComponents.length - startAt;
+    if (remainder > 0) {
+      // grow the array and copy in the remaining components
+      int pos = components.length;
+      components = Arrays.copyOf(components, pos + remainder);
+      System.arraycopy(extraComponents, startAt, components, pos, remainder);
-      NameNode.LOG.debug("Resolved path is " + path);
+      NameNode.LOG.debug(
+          "Resolved path is " + DFSUtil.byteArray2PathString(components));
-    return path.toString();
+    return components;

MOV31 INS23 INS83 INS83 INS83 INS5 INS59 INS39 UPD42 INS8 INS5 INS5 INS39 INS85 INS42 INS32 INS5 INS42 INS60 MOV60 INS25 MOV41 INS39 INS85 INS85 INS41 INS39 INS85 INS85 INS5 INS42 UPD42 INS25 INS42 INS42 INS45 INS39 INS85 INS85 INS27 MOV5 INS59 MOV38 MOV8 INS25 INS32 INS32 INS39 INS85 INS85 INS39 INS27 INS8 INS42 INS36 INS32 INS32 INS42 MOV32 INS40 MOV32 MOV8 INS25 INS42 INS42 INS42 MOV32 INS41 INS42 INS32 MOV42 MOV34 INS42 INS27 INS42 INS34 INS60 INS21 MOV21 INS27 UPD42 MOV42 UPD42 MOV42 INS40 INS2 INS42 INS42 INS42 INS2 UPD42 INS42 MOV32 MOV8 INS3 UPD42 UPD42 INS42 INS32 MOV42 UPD42 MOV42 INS40 INS42 INS39 INS59 INS7 INS40 INS34 INS42 INS34 INS42 INS34 INS5 INS4 INS42 INS42 UPD42 MOV42 INS40 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS21 INS39 INS85 INS85 INS40 INS32 INS3 INS42 INS42 INS42 INS27 INS32 INS7 INS21 INS32 INS42 INS42 INS42 INS5 INS4 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS39 INS85 INS85 INS40 MOV42 MOV42 MOV42 INS42 INS3 INS21 INS5 INS4 INS7 INS39 INS85 INS85 INS40 INS42 INS32 MOV42 INS3 MOV42 MOV34 INS5 INS4 INS39 INS85 INS85 INS40 DEL42 DEL66 DEL65 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL32 DEL38 DEL33 DEL16 DEL42 DEL66 DEL65 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL42 DEL33 DEL27 DEL36 DEL34 DEL40 DEL16 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL41 DEL42 DEL32 DEL41 DEL42 DEL41 DEL8 DEL40 DEL41 DEL42 DEL41 DEL45 DEL32 DEL41 DEL42 DEL42 DEL34 DEL27 DEL42 DEL41 DEL8 DEL25 DEL25 DEL8 DEL25 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL42 DEL42 DEL45 DEL32 DEL40 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL40 DEL32 DEL42 DEL42 DEL2 DEL32 DEL39 DEL42 DEL59 DEL58 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32