YARN-3505. Node's Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.

+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import org.apache.commons.lang.StringUtils;
+  private int logAggregationSucceed = 0;
+  private int logAggregationFailed = 0;
+  private Map<NodeId, List<String>> logAggregationDiagnosticsForNMs =
+      new HashMap<NodeId, List<String>>();
+  private Map<NodeId, List<String>> logAggregationFailureMessagesForNMs =
+      new HashMap<NodeId, List<String>>();
+  private final int maxLogAggregationDiagnosticsInMemory;
+    if (this.logAggregationEnabled) {
+      this.logAggregationStatusForAppReport = LogAggregationStatus.NOT_START;
+    } else {
+      this.logAggregationStatusForAppReport = LogAggregationStatus.DISABLED;
+    }
+    maxLogAggregationDiagnosticsInMemory = conf.getInt(
+        YarnConfiguration.RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY,
+        YarnConfiguration.DEFAULT_RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY);
-          LogAggregationReport.newInstance(app.applicationId, nodeAddedEvent
-            .getNodeId(), app.logAggregationEnabled
-              ? LogAggregationStatus.NOT_START : LogAggregationStatus.DISABLED,
-            ""));
+          LogAggregationReport.newInstance(app.applicationId,
+            app.logAggregationEnabled ? LogAggregationStatus.NOT_START
+                : LogAggregationStatus.DISABLED, ""));
-      for (Entry<NodeId, LogAggregationReport> output : outputs.entrySet()) {
-        if (!output.getValue().getLogAggregationStatus()
-          .equals(LogAggregationStatus.TIME_OUT)
-            && !output.getValue().getLogAggregationStatus()
-              .equals(LogAggregationStatus.SUCCEEDED)
-            && !output.getValue().getLogAggregationStatus()
-              .equals(LogAggregationStatus.FAILED)
-            && isAppInFinalState(this)
-            && System.currentTimeMillis() > this.logAggregationStartTime
-                + this.logAggregationStatusTimeout) {
-          output.getValue().setLogAggregationStatus(
-            LogAggregationStatus.TIME_OUT);
+      if (!isLogAggregationFinished()) {
+        for (Entry<NodeId, LogAggregationReport> output : outputs.entrySet()) {
+          if (!output.getValue().getLogAggregationStatus()
+            .equals(LogAggregationStatus.TIME_OUT)
+              && !output.getValue().getLogAggregationStatus()
+                .equals(LogAggregationStatus.SUCCEEDED)
+              && !output.getValue().getLogAggregationStatus()
+                .equals(LogAggregationStatus.FAILED)
+              && isAppInFinalState(this)
+              && System.currentTimeMillis() > this.logAggregationStartTime
+                  + this.logAggregationStatusTimeout) {
+            output.getValue().setLogAggregationStatus(
+              LogAggregationStatus.TIME_OUT);
+          }
-      if (this.logAggregationEnabled) {
+      if (this.logAggregationEnabled && !isLogAggregationFinished()) {
+        boolean stateChangedToFinal = false;
+          if (isLogAggregationFinishedForNM(report)) {
+            stateChangedToFinal = true;
+          }
-          if (curReport.getLogAggregationStatus().equals(
-            LogAggregationStatus.TIME_OUT)) {
-            if (report.getLogAggregationStatus().equals(
-              LogAggregationStatus.SUCCEEDED)
-                || report.getLogAggregationStatus().equals(
-                  LogAggregationStatus.FAILED)) {
-              curReport.setLogAggregationStatus(report
-                .getLogAggregationStatus());
+          if (isLogAggregationFinishedForNM(report)) {
+            if (!isLogAggregationFinishedForNM(curReport)) {
+              stateChangedToFinal = true;
-          } else {
-            curReport.setLogAggregationStatus(report.getLogAggregationStatus());
-
-          if (report.getDiagnosticMessage() != null
-              && !report.getDiagnosticMessage().isEmpty()) {
-            curReport
-              .setDiagnosticMessage(curReport.getDiagnosticMessage() == null
-                  ? report.getDiagnosticMessage() : curReport
-                    .getDiagnosticMessage() + report.getDiagnosticMessage());
+          if (report.getLogAggregationStatus() != LogAggregationStatus.RUNNING
+              || curReport.getLogAggregationStatus() !=
+                  LogAggregationStatus.RUNNING_WITH_FAILURE) {
+            if (curReport.getLogAggregationStatus()
+                == LogAggregationStatus.TIME_OUT
+                && report.getLogAggregationStatus()
+                    == LogAggregationStatus.RUNNING) {
+            // If the log aggregation status got from latest nm heartbeat
+            // is Running, and current log aggregation status is TimeOut,
+            // based on whether there are any failure messages for this NM,
+            // we will reset the log aggregation status as RUNNING or
+            // RUNNING_WITH_FAILURE
+              if (logAggregationFailureMessagesForNMs.get(nodeId) != null &&
+                  !logAggregationFailureMessagesForNMs.get(nodeId).isEmpty()) {
+                report.setLogAggregationStatus(
+                    LogAggregationStatus.RUNNING_WITH_FAILURE);
+              }
+            }
+            curReport.setLogAggregationStatus(report
+              .getLogAggregationStatus());
+        updateLogAggregationDiagnosticMessages(nodeId, report);
+        if (isAppInFinalState(this) && stateChangedToFinal) {
+          updateLogAggregationStatus(nodeId);
+        }
-    if (!logAggregationEnabled) {
-      return LogAggregationStatus.DISABLED;
-    }
-    if (this.logAggregationStatusForAppReport == LogAggregationStatus.FAILED
-        || this.logAggregationStatusForAppReport == LogAggregationStatus.SUCCEEDED) {
-      return this.logAggregationStatusForAppReport;
-    }
+      if (! logAggregationEnabled) {
+        return LogAggregationStatus.DISABLED;
+      }
+      if (isLogAggregationFinished()) {
+        return this.logAggregationStatusForAppReport;
+      }
-        return null;
+        return this.logAggregationStatusForAppReport;
+      int logRunningWithFailure = 0;
+          case RUNNING_WITH_FAILURE:
+            logRunningWithFailure ++;
+            break;
-          this.logAggregationStatusForAppReport = LogAggregationStatus.FAILED;
-          this.logAggregationStatusForAppReport = LogAggregationStatus.SUCCEEDED;
+      } else if (logRunningWithFailure > 0) {
+        return LogAggregationStatus.RUNNING_WITH_FAILURE;
+
+  private boolean isLogAggregationFinished() {
+    return this.logAggregationStatusForAppReport
+      .equals(LogAggregationStatus.SUCCEEDED)
+        || this.logAggregationStatusForAppReport
+          .equals(LogAggregationStatus.FAILED);
+
+  }
+
+  private boolean isLogAggregationFinishedForNM(LogAggregationReport report) {
+    return report.getLogAggregationStatus() == LogAggregationStatus.SUCCEEDED
+        || report.getLogAggregationStatus() == LogAggregationStatus.FAILED;
+  }
+
+  private void updateLogAggregationDiagnosticMessages(NodeId nodeId,
+      LogAggregationReport report) {
+    if (report.getDiagnosticMessage() != null
+        && !report.getDiagnosticMessage().isEmpty()) {
+      if (report.getLogAggregationStatus()
+          == LogAggregationStatus.RUNNING ) {
+        List<String> diagnostics = logAggregationDiagnosticsForNMs.get(nodeId);
+        if (diagnostics == null) {
+          diagnostics = new ArrayList<String>();
+          logAggregationDiagnosticsForNMs.put(nodeId, diagnostics);
+        } else {
+          if (diagnostics.size()
+              == maxLogAggregationDiagnosticsInMemory) {
+            diagnostics.remove(0);
+          }
+        }
+        diagnostics.add(report.getDiagnosticMessage());
+        this.logAggregationStatus.get(nodeId).setDiagnosticMessage(
+          StringUtils.join(diagnostics, "\n"));
+      } else if (report.getLogAggregationStatus()
+          == LogAggregationStatus.RUNNING_WITH_FAILURE) {
+        List<String> failureMessages =
+            logAggregationFailureMessagesForNMs.get(nodeId);
+        if (failureMessages == null) {
+          failureMessages = new ArrayList<String>();
+          logAggregationFailureMessagesForNMs.put(nodeId, failureMessages);
+        } else {
+          if (failureMessages.size()
+              == maxLogAggregationDiagnosticsInMemory) {
+            failureMessages.remove(0);
+          }
+        }
+        failureMessages.add(report.getDiagnosticMessage());
+      }
+    }
+  }
+
+  private void updateLogAggregationStatus(NodeId nodeId) {
+    LogAggregationStatus status =
+        this.logAggregationStatus.get(nodeId).getLogAggregationStatus();
+    if (status.equals(LogAggregationStatus.SUCCEEDED)) {
+      this.logAggregationSucceed++;
+    } else if (status.equals(LogAggregationStatus.FAILED)) {
+      this.logAggregationFailed++;
+    }
+    if (this.logAggregationSucceed == this.logAggregationStatus.size()) {
+      this.logAggregationStatusForAppReport =
+          LogAggregationStatus.SUCCEEDED;
+      // Since the log aggregation status for this application for all NMs
+      // is SUCCEEDED, it means all logs are aggregated successfully.
+      // We could remove all the cached log aggregation reports
+      this.logAggregationStatus.clear();
+      this.logAggregationDiagnosticsForNMs.clear();
+      this.logAggregationFailureMessagesForNMs.clear();
+    } else if (this.logAggregationSucceed + this.logAggregationFailed
+        == this.logAggregationStatus.size()) {
+      this.logAggregationStatusForAppReport = LogAggregationStatus.FAILED;
+      // We have collected the log aggregation status for all NMs.
+      // The log aggregation status is FAILED which means the log
+      // aggregation fails in some NMs. We are only interested in the
+      // nodes where the log aggregation is failed. So we could remove
+      // the log aggregation details for those succeeded NMs
+      for (Iterator<Map.Entry<NodeId, LogAggregationReport>> it =
+          this.logAggregationStatus.entrySet().iterator(); it.hasNext();) {
+        Map.Entry<NodeId, LogAggregationReport> entry = it.next();
+        if (entry.getValue().getLogAggregationStatus()
+          .equals(LogAggregationStatus.SUCCEEDED)) {
+          it.remove();
+        }
+      }
+      // the log aggregation has finished/failed.
+      // and the status will not be updated anymore.
+      this.logAggregationDiagnosticsForNMs.clear();
+    }
+  }
+
+  public String getLogAggregationFailureMessagesForNM(NodeId nodeId) {
+    try {
+      this.readLock.lock();
+      List<String> failureMessages =
+          this.logAggregationFailureMessagesForNMs.get(nodeId);
+      if (failureMessages == null || failureMessages.isEmpty()) {
+        return StringUtils.EMPTY;
+      }
+      return StringUtils.join(failureMessages, "\n");
+    } finally {
+      this.readLock.unlock();
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS83 INS39 INS59 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS34 INS42 INS34 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS74 INS42 INS14 INS42 INS25 INS21 INS54 INS41 INS43 INS42 INS41 INS43 INS42 INS43 INS42 MOV25 INS43 INS42 INS60 INS25 INS25 INS42 INS43 INS42 INS54 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS43 INS43 INS74 INS22 INS8 INS8 INS7 INS8 MOV8 MOV27 INS42 INS27 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS25 INS27 INS8 INS25 INS42 INS8 INS8 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS43 INS43 INS74 INS52 INS42 INS21 INS21 INS42 INS32 INS25 MOV21 MOV25 MOV25 INS25 INS60 INS32 INS32 INS27 INS27 INS25 INS42 INS42 INS32 INS42 INS42 INS40 INS21 INS32 INS8 INS22 INS32 MOV21 INS21 INS21 INS21 INS27 INS8 INS21 INS60 INS25 INS41 INS21 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS7 INS7 INS42 INS42 INS40 INS40 INS38 INS8 INS27 INS8 INS32 MOV8 INS39 INS59 MOV22 INS42 INS40 MOV22 INS42 INS40 INS32 INS40 INS32 INS40 INS27 INS8 INS25 INS32 INS42 INS37 INS42 INS42 INS40 INS21 INS52 INS42 INS22 INS42 INS32 INS32 INS32 INS27 INS32 MOV21 INS24 INS21 INS32 INS74 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS22 INS40 INS22 INS40 MOV32 INS32 MOV70 MOV22 INS38 MOV60 INS60 INS25 INS21 INS25 INS42 INS42 INS34 MOV49 MOV21 MOV49 MOV21 MOV49 MOV21 INS25 INS42 INS42 INS42 INS42 INS32 INS40 INS60 INS25 INS21 INS21 INS27 INS8 INS22 INS42 INS42 INS22 INS37 INS52 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS22 INS22 INS42 INS58 INS32 INS8 INS32 INS22 INS42 INS43 INS43 INS42 INS32 INS27 INS32 INS41 INS42 INS42 INS42 INS45 INS22 INS42 INS52 INS42 INS52 INS42 INS40 INS42 INS32 INS42 INS32 INS39 INS59 MOV27 MOV8 MOV8 INS32 INS27 MOV8 INS22 INS49 INS21 INS10 INS27 INS8 UPD42 MOV42 INS42 INS74 INS59 INS27 INS8 INS8 INS32 INS32 MOV32 INS40 INS60 INS25 INS21 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS74 INS59 INS42 INS42 INS60 INS25 INS22 INS42 INS52 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS33 INS42 INS42 INS40 INS52 INS42 MOV42 MOV42 MOV40 MOV16 MOV45 UPD42 MOV42 INS42 INS9 INS25 INS25 INS42 INS42 INS42 INS32 INS42 INS21 INS52 INS42 INS42 INS37 INS42 INS34 INS41 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS25 INS42 INS42 MOV32 INS32 MOV42 INS32 UPD42 UPD42 INS74 INS59 INS27 INS8 INS8 INS32 INS52 INS42 INS43 INS74 INS42 INS32 INS74 INS59 INS32 INS8 INS52 INS42 INS52 INS42 INS32 INS8 INS32 INS8 INS42 INS52 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS27 INS8 INS22 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS25 INS42 INS42 MOV32 INS42 INS43 INS43 INS43 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS32 INS42 INS40 INS21 INS42 INS42 INS21 INS42 INS42 INS25 INS27 INS27 INS25 MOV21 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS21 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS27 INS8 INS40 INS42 INS42 INS22 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS7 INS38 INS8 MOV32 INS40 MOV32 INS40 INS27 INS8 INS74 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 MOV32 INS42 INS21 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS21 INS27 INS27 INS25 INS43 INS43 INS42 INS42 INS34 INS74 UPD42 UPD42 INS32 INS42 INS42 INS7 INS32 INS40 MOV32 INS40 INS27 INS8 INS42 INS42 INS43 INS43 INS42 INS42 INS34 INS42 INS9 MOV42 UPD42 MOV42 INS27 INS38 INS21 INS42 INS42 INS32 INS33 INS32 INS32 INS42 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS40 INS42 INS42 INS42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL32 DEL32 DEL21 DEL40 DEL32 DEL8 DEL25 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL25 DEL33 DEL40 DEL27 DEL40 DEL27 DEL33 DEL27 DEL27 DEL16 DEL32 DEL21