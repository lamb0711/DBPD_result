HDFS-13314. NameNode should optionally exit if it detects FsImage corruption. Contributed by Arpit Agarwal.

-/**
+ /**
+import java.util.Arrays;
+import org.apache.hadoop.hdfs.server.namenode.FSImage;
+    private long numImageErrors;
+      this.numImageErrors = 0;
+      long i = 0;
-        INodeReferenceSection.INodeReference.Builder rb = buildINodeReference(ref);
+        INodeReferenceSection.INodeReference.Builder rb =
+            buildINodeReference(ref, i++);
-        INodeReference ref) throws IOException {
+        final INodeReference ref, final long refIndex) throws IOException {
+
+      if (fsn.getFSDirectory().getInode(ref.getId()) == null) {
+        FSImage.LOG.error(
+            "FSImageFormatPBSnapshot: Missing referred INodeId " +
+            ref.getId() + " for INodeReference index " + refIndex +
+            "; path=" + ref.getFullPathName() +
+            "; parent=" + (ref.getParent() == null ? "null" :
+                ref.getParent().getFullPathName()));
+        ++numImageErrors;
+      }
+          INode previousNode = null;
+          boolean misordered = false;
+            // getBytes() may return null below, and that is okay.
+            final int result = previousNode == null ? -1 :
+                previousNode.compareTo(d.getLocalNameBytes());
+            if (result == 0) {
+              FSImage.LOG.error(
+                  "Name '" + d.getLocalName() + "' is repeated in the " +
+                      "'deleted' difflist of directory " +
+                      dir.getFullPathName() + ", INodeId=" + dir.getId());
+              ++numImageErrors;
+            } else if (result > 0 && !misordered) {
+              misordered = true;
+              ++numImageErrors;
+            }
+            previousNode = d;
+          if (misordered) {
+            FSImage.LOG.error(
+                "Misordered entries in the 'deleted' difflist of directory " +
+                    dir.getFullPathName() + ", INodeId=" + dir.getId() +
+                    ". The full list is " +
+                    Arrays.toString(deleted.toArray()));
+          }
+
+
+    /**
+     * Number of non-fatal errors detected while writing the
+     * SnapshotDiff and INodeReference sections.
+     * @return the number of non-fatal errors detected.
+     */
+    public long getNumImageErrors() {
+      return numImageErrors;
+    }

INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS39 INS59 INS44 INS29 INS83 INS39 INS42 INS8 INS42 INS21 INS60 INS83 INS83 INS39 INS42 INS25 INS65 INS65 INS41 INS7 INS39 INS59 INS27 INS8 INS66 INS66 INS66 INS42 INS22 INS34 INS42 INS34 INS32 INS33 INS21 INS21 INS52 INS42 INS32 INS42 INS32 INS32 INS38 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS60 INS60 INS25 INS37 INS45 INS32 INS45 INS42 INS45 INS32 INS45 INS36 INS43 INS59 INS39 INS59 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS33 INS42 INS9 INS60 INS25 INS21 INS21 INS27 INS45 INS32 INS83 INS39 INS59 INS27 INS8 INS25 INS7 INS32 INS32 INS33 INS32 INS42 INS42 INS16 INS42 INS34 INS21 INS21 INS27 INS8 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS38 INS32 INS32 INS38 INS27 INS38 INS21 INS21 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS33 INS34 INS42 INS42 INS32 INS40 INS42 INS27 INS42 INS42 INS34 INS42 INS7 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS45 INS45 INS32 INS45 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42