HDFS-2834. Add a ByteBuffer-based read API to DFSInputStream. Contributed by Henry Robinson.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1303474 13f79535-47bb-0310-9956-ffa450edef68

+import java.nio.ByteBuffer;
+import org.apache.hadoop.fs.ByteBufferReadable;
-public class DFSInputStream extends FSInputStream {
+public class DFSInputStream extends FSInputStream implements ByteBufferReadable {
-  private long prefetchSize;
+  private final long prefetchSize;
-  private boolean verifyChecksum;
+  private final boolean verifyChecksum;
-  private int timeWindow; 
+  private final int timeWindow;
-  private ConcurrentHashMap<DatanodeInfo, DatanodeInfo> deadNodes = 
+  private final ConcurrentHashMap<DatanodeInfo, DatanodeInfo> deadNodes =
-  private byte[] oneByteBuf = new byte[1]; // used for 'int read()'
+  private final byte[] oneByteBuf = new byte[1]; // used for 'int read()'
-  private int nCachedConnRetry;
+  private final int nCachedConnRetry;
+  /**
+   * Wraps different possible read implementations so that readBuffer can be
+   * strategy-agnostic.
+   */
+  private interface ReaderStrategy {
+    public int doRead(BlockReader blockReader, int off, int len) throws ChecksumException, IOException;
+  }
+
+  /**
+   * Used to read bytes into a byte[]
+   */
+  private static class ByteArrayStrategy implements ReaderStrategy {
+    final byte[] buf;
+
+    public ByteArrayStrategy(byte[] buf) {
+      this.buf = buf;
+    }
+
+    @Override
+    public int doRead(BlockReader blockReader, int off, int len) throws ChecksumException, IOException {      
+        return blockReader.read(buf, off, len);     
+    }
+  }
+
+  /**
+   * Used to read bytes into a user-supplied ByteBuffer
+   */
+  private static class ByteBufferStrategy implements ReaderStrategy {
+    final ByteBuffer buf;
+    ByteBufferStrategy(ByteBuffer buf) {
+      this.buf = buf;
+    }
+
+    @Override
+    public int doRead(BlockReader blockReader, int off, int len) throws ChecksumException, IOException {
+      int oldpos = buf.position();
+      int oldlimit = buf.limit();
+      boolean success = false;
+      try {
+        int ret = blockReader.read(buf);
+        success = true;
+        return ret;
+      } finally {
+        if (!success) {
+          // Reset to original state so that retries work correctly.
+          buf.position(oldpos);
+          buf.limit(oldlimit);
+        }
+      } 
+    }
+  }
+
-  private synchronized int readBuffer(byte buf[], int off, int len,
+  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,
-        return blockReader.read(buf, off, len);
+        return reader.doRead(blockReader, off, len);
-  /**
-   * Read the entire buffer.
-   */
-  @Override
-  public synchronized int read(byte buf[], int off, int len) throws IOException {
+  private int readWithStrategy(ReaderStrategy strategy, int off, int len) throws IOException {
-          int result = readBuffer(buf, off, realLen, corruptedBlockMap);
+          int result = readBuffer(strategy, off, realLen, corruptedBlockMap);
+   * Read the entire buffer.
+   */
+  @Override
+  public synchronized int read(final byte buf[], int off, int len) throws IOException {
+    ReaderStrategy byteArrayReader = new ByteArrayStrategy(buf);
+
+    return readWithStrategy(byteArrayReader, off, len);
+  }
+
+  @Override
+  public synchronized int read(final ByteBuffer buf) throws IOException {
+    ReaderStrategy byteBufferReader = new ByteBufferStrategy(buf);
+
+    return readWithStrategy(byteBufferReader, 0, buf.remaining());
+  }
+
+
+  /**
-

INS26 INS26 INS40 INS40 INS43 INS55 INS55 INS55 INS31 INS31 INS42 INS83 INS83 INS83 INS83 INS83 INS83 INS29 INS83 INS42 INS31 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 UPD83 UPD42 MOV29 MOV78 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS65 INS42 INS83 INS5 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 MOV8 INS65 INS42 INS83 INS43 INS59 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS43 INS42 INS43 INS42 INS83 INS39 INS42 INS85 INS39 INS42 INS39 INS42 INS42 INS60 INS41 INS42 INS83 INS43 INS42 INS42 INS60 INS41 INS66 INS66 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS66 INS39 INS85 INS42 INS5 INS42 INS21 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS66 INS42 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS60 INS60 INS60 INS54 INS42 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS39 INS85 INS7 INS42 INS42 INS7 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS8 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS34 INS32 INS22 INS42 INS22 INS42 INS42 INS32 INS42 INS32 INS42 INS9 INS60 INS21 INS41 INS25 INS8 INS43 INS42 INS43 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS7 INS42 INS38 INS8 INS41 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS21 INS21 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 DEL39 DEL42 DEL85 DEL83 DEL39 DEL42 DEL85