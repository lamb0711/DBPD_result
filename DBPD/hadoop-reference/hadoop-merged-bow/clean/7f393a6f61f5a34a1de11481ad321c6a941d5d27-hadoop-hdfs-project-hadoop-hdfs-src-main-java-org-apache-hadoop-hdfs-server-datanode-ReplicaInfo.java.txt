Revert "HDFS-8860. Remove unused Replica copyOnWrite code (Lei (Eddy) Xu via Colin P. McCabe)"

This reverts commit a153b9601ad8628fdd608d8696310ca8c1f58ff0.

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/DataNodeTestUtils.java

+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import org.apache.hadoop.fs.FileUtil;
+import org.apache.hadoop.fs.HardLink;
+import org.apache.hadoop.io.IOUtils;
+   * check if this replica has already been unlinked.
+   * @return true if the replica has already been unlinked 
+   *         or no need to be detached; false otherwise
+   */
+  public boolean isUnlinked() {
+    return true;                // no need to be unlinked
+  }
+
+  /**
+   * set that this replica is unlinked
+   */
+  public void setUnlinked() {
+    // no need to be unlinked
+  }
+
+  /**
+   /**
+   * Copy specified file into a temporary file. Then rename the
+   * temporary file to the original name. This will cause any
+   * hardlinks to the original file to be removed. The temporary
+   * files are created in the same directory. The temporary files will
+   * be recovered (especially on Windows) on datanode restart.
+   */
+  private void unlinkFile(File file, Block b) throws IOException {
+    File tmpFile = DatanodeUtil.createTmpFile(b, DatanodeUtil.getUnlinkTmpFile(file));
+    try {
+      FileInputStream in = new FileInputStream(file);
+      try {
+        FileOutputStream out = new FileOutputStream(tmpFile);
+        try {
+          IOUtils.copyBytes(in, out, 16*1024);
+        } finally {
+          out.close();
+        }
+      } finally {
+        in.close();
+      }
+      if (file.length() != tmpFile.length()) {
+        throw new IOException("Copy of file " + file + " size " + file.length()+
+                              " into file " + tmpFile +
+                              " resulted in a size of " + tmpFile.length());
+      }
+      FileUtil.replaceFile(tmpFile, file);
+    } catch (IOException e) {
+      boolean done = tmpFile.delete();
+      if (!done) {
+        DataNode.LOG.info("detachFile failed to delete temporary file " +
+                          tmpFile);
+      }
+      throw e;
+    }
+  }
+
+  /**
+   * Remove a hard link by copying the block to a temporary place and 
+   * then moving it back
+   * @param numLinks number of hard links
+   * @return true if copy is successful; 
+   *         false if it is already detached or no need to be detached
+   * @throws IOException if there is any copy error
+   */
+  public boolean unlinkBlock(int numLinks) throws IOException {
+    if (isUnlinked()) {
+      return false;
+    }
+    File file = getBlockFile();
+    if (file == null || getVolume() == null) {
+      throw new IOException("detachBlock:Block not found. " + this);
+    }
+    File meta = getMetaFile();
+
+    if (HardLink.getLinkCount(file) > numLinks) {
+      DataNode.LOG.info("CopyOnWrite for block " + this);
+      unlinkFile(file, this);
+    }
+    if (HardLink.getLinkCount(meta) > numLinks) {
+      unlinkFile(meta, this);
+    }
+    setUnlinked();
+    return true;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS65 INS41 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS65 INS65 INS65 INS65 INS39 INS42 INS42 INS25 INS60 INS25 INS60 INS25 INS25 INS21 INS41 INS66 INS66 INS66 INS9 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS8 INS12 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS32 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS9 INS42 INS42 INS32 INS60 INS54 INS25 INS21 INS44 INS8 INS42 INS41 INS42 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS32 INS32 INS42 INS21 INS21 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS8 INS27 INS8 INS32 INS43 INS42 INS60 INS25 INS53 INS9 INS42 INS42 INS33 INS32 INS33 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS60 INS54 INS21 INS32 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS38 INS8 INS42 INS42 INS43 INS27 INS40 INS42 INS27 INS42 INS42 INS52 INS42 INS42 INS52 INS43 INS42 INS43 INS59 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS21 INS42 INS45 INS52 INS45 INS52 INS42 INS42 INS42 INS14 INS21 INS21 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS43 INS42 INS32 INS32 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS34 INS34