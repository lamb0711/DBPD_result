MAPREDUCE-5194. Heed interrupts during Fetcher shutdown.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494416 13f79535-47bb-0310-9956-ffa450edef68

+  protected HttpURLConnection connection;
+    this(job, reduceId, scheduler, merger, reporter, metrics,
+        exceptionReporter, shuffleKey, ++nextId);
+  }
+
+  @VisibleForTesting
+  Fetcher(JobConf job, TaskAttemptID reduceId, 
+                 ShuffleSchedulerImpl<K,V> scheduler, MergeManager<K,V> merger,
+                 Reporter reporter, ShuffleClientMetrics metrics,
+                 ExceptionReporter exceptionReporter, SecretKey shuffleKey,
+                 int id) {
-    this.id = ++nextId;
+    this.id = id;
+  @Override
+  public void interrupt() {
+    try {
+      closeConnection();
+    } finally {
+      super.interrupt();
+    }
+  }
+
-  protected HttpURLConnection openConnection(URL url) throws IOException {
+  protected synchronized void openConnection(URL url)
+      throws IOException {
-    return conn;
+    connection = conn;
-  
+
+  protected synchronized void closeConnection() {
+    // Note that HttpURLConnection::disconnect() doesn't trash the object.
+    // connect() attempts to reconnect in a loop, possibly reversing this
+    if (connection != null) {
+      connection.disconnect();
+    }
+  }
+
+  private void abortConnect(MapHost host, Set<TaskAttemptID> remaining) {
+    for (TaskAttemptID left : remaining) {
+      scheduler.putBackKnownMapOutput(host, left);
+    }
+    closeConnection();
+  }
+
-    DataInputStream input;
-    
+    DataInputStream input = null;
-      HttpURLConnection connection = openConnection(url);
+      openConnection(url);
+      if (stopped) {
+        abortConnect(host, remaining);
+        return;
+      }
+      // verify that the thread wasn't stopped during calls to connect
+      if (stopped) {
+        abortConnect(host, remaining);
+        return;
+      }
-      
-      IOUtils.cleanup(LOG, input);
-      
+
+      input.close();
+      input = null;
+      if (input != null) {
+        IOUtils.cleanup(LOG, input);
+        input = null;
+      }

INS23 INS31 INS31 INS31 INS31 INS83 MOV43 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS78 INS44 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS83 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS44 MOV8 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS17 INS42 INS39 INS42 INS42 INS54 INS21 INS25 INS43 INS42 INS74 INS42 INS21 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV38 INS8 INS8 INS7 INS27 INS8 INS42 INS43 INS43 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS33 INS21 INS25 INS25 INS21 INS21 INS25 INS70 INS32 INS48 INS32 MOV32 INS42 INS8 INS42 INS8 INS32 INS7 INS27 INS8 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS21 INS41 INS21 INS41 INS42 INS42 INS42 INS33 INS42 INS33 MOV21 INS21 INS43 INS42 INS21 INS32 INS32 INS7 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL41 DEL42 DEL43 DEL42 DEL59 DEL60