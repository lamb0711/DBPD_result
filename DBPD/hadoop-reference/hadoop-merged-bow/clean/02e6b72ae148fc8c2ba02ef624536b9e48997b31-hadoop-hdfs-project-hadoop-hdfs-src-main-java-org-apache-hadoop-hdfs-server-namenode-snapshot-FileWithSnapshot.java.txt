HDFS-4481. Change fsimage to support snapshot file diffs.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446000 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import org.apache.hadoop.hdfs.server.namenode.FSImageSerialization;
-    @Override
-    INodeFile createSnapshotCopyOfCurrentINode(INodeFile currentINode) {
-      final INodeFile copy = new INodeFile(currentINode);
-      copy.setBlocks(null);
-      return copy;
+    /** Constructor used by FSImage loading */
+    FileDiff(Snapshot snapshot, INodeFile snapshotINode,
+        FileDiff posteriorDiff, long fileSize) {
+      super(snapshot, snapshotINode, posteriorDiff);
+      this.fileSize = fileSize;
+
+    /** Serialize fields to out */
+    void write(DataOutputStream out) throws IOException {
+      writeSnapshotPath(out);
+      out.writeLong(fileSize);
+
+      // write snapshotINode
+      if (snapshotINode != null) {
+        out.writeBoolean(true);
+        FSImageSerialization.writeINodeFile(snapshotINode, out, true);
+      } else {
+        out.writeBoolean(false);
+      }
+    }
+  }
+
+  static class FileDiffFactory
+      extends AbstractINodeDiff.Factory<INodeFile, FileDiff> {
+    static final FileDiffFactory INSTANCE = new FileDiffFactory();
+
+    @Override
+    FileDiff createDiff(Snapshot snapshot, INodeFile file) {
+      return new FileDiff(snapshot, file);
+    }
+
+    @Override
+    INodeFile createSnapshotCopy(INodeFile currentINode) {
+      final INodeFile copy = new INodeFile(currentINode);
+      copy.setBlocks(null);
+      return copy;
+    }
-  static class FileDiffList extends AbstractINodeDiffList<INodeFile, FileDiff> {
-    final INodeFile currentINode;
-
-    FileDiffList(INodeFile currentINode, List<FileDiff> diffs) {
-      super(diffs);
-      this.currentINode = currentINode;
-    }
-
-    @Override
-    INodeFile getCurrentINode() {
-      return currentINode;
-    }
-
-    @Override
-    FileDiff addSnapshotDiff(Snapshot snapshot) {
-      return addLast(new FileDiff(snapshot, getCurrentINode()));
-    }
+  public static class FileDiffList
+      extends AbstractINodeDiffList<INodeFile, FileDiff> {
-  public FileDiffList getFileDiffList();
+  public FileDiffList getDiffs();
-      for(FileDiff d : file.getFileDiffList().asList()) {
+      for(FileDiff d : file.getDiffs().asList()) {
+      // check if everything is deleted.
+      if (file.isCurrentFileDeleted()
+          && file.getDiffs().asList().isEmpty()) {
+        file.asINodeFile().destroySelfAndCollectBlocks(info);
+        return;
+      }
+
-        final FileDiff last = file.getFileDiffList().getLast();
+        final FileDiff last = file.getDiffs().getLast();
-
-      // if everything is deleted, set blocks to null.
-      if (file.isCurrentFileDeleted()
-          && file.getFileDiffList().asList().isEmpty()) {
-        file.asINodeFile().setBlocks(null);
-      }

INS26 INS26 INS40 UPD40 INS40 INS55 INS55 INS31 INS31 MOV83 UPD42 MOV42 INS74 INS23 MOV31 MOV31 MOV29 INS83 INS83 INS42 MOV74 UPD42 INS29 INS42 INS44 INS44 INS44 INS44 INS8 INS29 INS39 INS42 INS44 INS43 INS8 INS43 MOV43 MOV43 INS83 MOV83 INS43 INS59 UPD42 INS44 UPD42 MOV25 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS46 INS21 INS65 INS43 INS42 INS42 INS21 INS21 INS25 INS40 UPD42 MOV42 INS42 INS14 MOV43 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS66 INS42 INS32 INS32 INS27 INS8 INS8 INS43 INS14 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS21 UPD42 MOV42 MOV43 MOV42 INS42 INS41 INS52 INS42 INS32 INS32 INS32 UPD42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS9 UPD42 INS42 UPD42 UPD42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL43 DEL74 DEL42 DEL44 DEL42 DEL46 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL42 DEL42 DEL41 DEL8 DEL31 DEL55 DEL33