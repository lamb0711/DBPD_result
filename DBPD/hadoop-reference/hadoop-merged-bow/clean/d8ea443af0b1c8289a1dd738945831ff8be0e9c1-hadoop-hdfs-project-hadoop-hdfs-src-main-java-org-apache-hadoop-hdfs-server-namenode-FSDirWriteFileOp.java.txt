Merge HDFS-8394 from trunk: Move getAdditionalBlock() and related functionalities into a separate class.

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStripedUnderConstruction;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoUnderConstruction;
+import org.apache.hadoop.io.erasurecode.ECSchema;
-    BlockInfoContiguousUnderConstruction uc = fileNode.removeLastBlock(block);
+    BlockInfoUnderConstruction uc = fileNode.removeLastBlock(block);
-                    fileNode.getPreferredBlockReplication(), true);
+        fileNode.getPreferredBlockReplication(), true);
-    final int replication;
+    final short numTargets;
-    replication = pendingFile.getFileReplication();
+    boolean isStriped = pendingFile.isStriped();
+    numTargets = isStriped ?
+        HdfsConstants.NUM_DATA_BLOCKS + HdfsConstants.NUM_PARITY_BLOCKS :
+        pendingFile.getFileReplication();
-    return new ValidateAddBlockResult(blockSize, replication, storagePolicyID,
-                                    clientMachine);
+    return new ValidateAddBlockResult(blockSize, numTargets, storagePolicyID,
+                                      clientMachine);
-  static LocatedBlock makeLocatedBlock(FSNamesystem fsn, Block blk,
+  static LocatedBlock makeLocatedBlock(FSNamesystem fsn, BlockInfo blk,
-                                                     locs, offset, false);
+        blk, locs, offset);
-                                        BlockTokenIdentifier.AccessMode.WRITE);
+        BlockTokenIdentifier.AccessMode.WRITE);
-        BlockInfoContiguous lastBlockInFile = pendingFile.getLastBlock();
-        ((BlockInfoContiguousUnderConstruction) lastBlockInFile)
-            .setExpectedLocations(targets);
+        BlockInfo lastBlockInFile = pendingFile.getLastBlock();
+        final BlockInfoUnderConstruction uc
+            = (BlockInfoUnderConstruction)lastBlockInFile;
+        uc.setExpectedLocations(targets);
-    Block newBlock = fsn.createNewBlock();
+    final boolean isStriped = pendingFile.isStriped();
+    // allocate new block, record block locations in INode.
+    Block newBlock = fsn.createNewBlock(isStriped);
-    saveAllocatedBlock(fsn, src, inodesInPath, newBlock, targets);
+    saveAllocatedBlock(fsn, src, inodesInPath, newBlock, targets, isStriped);
-    return makeLocatedBlock(fsn, newBlock, targets, offset);
+    return makeLocatedBlock(fsn, fsn.getStoredBlock(newBlock), targets, offset);
-    return bm.chooseTarget4NewBlock(src, r.replication, clientNode,
+    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,
-  private static BlockInfoContiguous addBlock(
-      FSDirectory fsd, String path, INodesInPath inodesInPath, Block block,
-      DatanodeStorageInfo[] targets) throws IOException {
+  private static BlockInfo addBlock(FSDirectory fsd, String path,
+      INodesInPath inodesInPath, Block block, DatanodeStorageInfo[] targets,
+      boolean isStriped) throws IOException {
-      // check quota limits and updated space consumed
-      fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),
-          fileINode.getPreferredBlockReplication(), true);
-
-      BlockInfoContiguousUnderConstruction blockInfo =
-        new BlockInfoContiguousUnderConstruction(
-            block,
-            fileINode.getFileReplication(),
-            HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION,
+      final BlockInfo blockInfo;
+      if (isStriped) {
+        ECSchema ecSchema = fsd.getECSchema(inodesInPath);
+        short numDataUnits = (short) ecSchema.getNumDataUnits();
+        short numParityUnits = (short) ecSchema.getNumParityUnits();
+        short numLocations = (short) (numDataUnits + numParityUnits);
+
+        // check quota limits and updated space consumed
+        fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),
+            numLocations, true);
+        blockInfo = new BlockInfoStripedUnderConstruction(block, numDataUnits,
+            numParityUnits, HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION,
+      } else {
+        // check quota limits and updated space consumed
+        fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),
+            fileINode.getPreferredBlockReplication(), true);
+
+        short numLocations = fileINode.getFileReplication();
+        blockInfo = new BlockInfoContiguousUnderConstruction(block,
+            numLocations, HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION,
+            targets);
+      }
-          throws IOException  {
+      throws IOException {
-        BlockInfoContiguousUnderConstruction lastBlockUC =
-            (BlockInfoContiguousUnderConstruction) lastBlockInFile;
+        BlockInfoUnderConstruction lastBlockUC =
+            (BlockInfoUnderConstruction) lastBlockInFile;
-    boolean success = completeFileInternal(fsn, src, holder,
-                                           ExtendedBlock.getLocalBlock(last),
-                                           fileId);
-    if (success) {
-      NameNode.stateChangeLog.info("DIR* completeFile: " + srcArg
-                                       + " is closed by " + holder);
-    }
-    return success;
+    return completeFileInternal(fsn, src, holder,
+        ExtendedBlock.getLocalBlock(last), fileId);
-  private static void saveAllocatedBlock(
-      FSNamesystem fsn, String src, INodesInPath inodesInPath, Block newBlock,
-      DatanodeStorageInfo[] targets)
-      throws IOException {
+  private static void saveAllocatedBlock(FSNamesystem fsn, String src,
+      INodesInPath inodesInPath, Block newBlock, DatanodeStorageInfo[] targets,
+      boolean isStriped) throws IOException {
-    BlockInfoContiguous b = addBlock(fsn.dir, src, inodesInPath, newBlock,
-                                     targets);
+    BlockInfo b = addBlock(fsn.dir, src, inodesInPath, newBlock, targets,
+        isStriped);
-    final int replication;
+    final int numTargets;
-        long blockSize, int replication, byte storagePolicyID,
+        long blockSize, int numTargets, byte storagePolicyID,
-      this.replication = replication;
+      this.numTargets = numTargets;

INS26 INS26 INS26 INS40 INS40 INS40 UPD43 INS44 INS44 INS60 UPD43 INS60 UPD42 INS39 INS42 INS39 INS42 UPD43 UPD39 INS39 INS59 UPD42 INS83 INS39 INS59 MOV32 UPD43 UPD42 UPD42 UPD42 UPD42 INS42 INS32 UPD42 INS16 UPD42 INS42 INS32 INS42 INS32 UPD40 INS60 INS25 UPD42 INS42 INS42 INS42 INS27 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS83 INS43 INS59 INS42 INS8 INS8 INS42 UPD42 INS40 INS40 INS60 INS21 INS42 INS42 INS60 INS60 INS60 INS60 INS21 INS21 MOV21 INS60 INS21 UPD42 UPD43 INS83 INS43 INS59 INS32 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS32 INS7 INS39 INS59 INS7 UPD42 INS42 INS42 INS11 INS42 MOV42 MOV42 INS42 INS42 INS32 INS42 INS11 INS42 INS11 INS42 INS11 INS42 INS42 INS42 INS34 INS32 INS42 INS9 INS42 INS14 INS42 MOV32 INS42 INS14 UPD43 UPD43 MOV43 MOV42 INS42 INS42 INS42 INS39 INS32 INS39 INS32 INS39 INS36 INS42 INS42 INS43 INS42 INS42 INS42 INS40 INS42 MOV43 MOV42 INS42 MOV40 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS27 UPD42 MOV42 UPD43 INS42 INS42 UPD42 DEL9 DEL11 DEL36 DEL32 DEL21 DEL43 DEL42 DEL14 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL40 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42