HDFS-8237. Move all protocol classes used by ClientProtocol to hdfs-client. Contributed by Haohui Mai.

+import com.google.common.primitives.SignedBytes;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+  public static final byte[] EMPTY_BYTES = {};
+  /** Compare two byte arrays by lexicographical order. */
+  public static int compareBytes(byte[] left, byte[] right) {
+    if (left == null) {
+      left = EMPTY_BYTES;
+    }
+    if (right == null) {
+      right = EMPTY_BYTES;
+    }
+    return SignedBytes.lexicographicalComparator().compare(left, right);
+  }
+
+  /**
+   * Given a list of path components returns a byte array
+   */
+  public static byte[] byteArray2bytes(byte[][] pathComponents) {
+    if (pathComponents.length == 0) {
+      return EMPTY_BYTES;
+    } else if (pathComponents.length == 1
+        && (pathComponents[0] == null || pathComponents[0].length == 0)) {
+      return new byte[]{(byte) Path.SEPARATOR_CHAR};
+    }
+    int length = 0;
+    for (int i = 0; i < pathComponents.length; i++) {
+      length += pathComponents[i].length;
+      if (i < pathComponents.length - 1) {
+        length++; // for SEPARATOR
+      }
+    }
+    byte[] path = new byte[length];
+    int index = 0;
+    for (int i = 0; i < pathComponents.length; i++) {
+      System.arraycopy(pathComponents[i], 0, path, index,
+          pathComponents[i].length);
+      index += pathComponents[i].length;
+      if (i < pathComponents.length - 1) {
+        path[index] = (byte) Path.SEPARATOR_CHAR;
+        index++;
+      }
+    }
+    return path;
+  }
+
+
+  /**
+   * Converts a time duration in milliseconds into DDD:HH:MM:SS format.
+   */
+  public static String durationToString(long durationMs) {
+    boolean negative = false;
+    if (durationMs < 0) {
+      negative = true;
+      durationMs = -durationMs;
+    }
+    // Chop off the milliseconds
+    long durationSec = durationMs / 1000;
+    final int secondsPerMinute = 60;
+    final int secondsPerHour = 60*60;
+    final int secondsPerDay = 60*60*24;
+    final long days = durationSec / secondsPerDay;
+    durationSec -= days * secondsPerDay;
+    final long hours = durationSec / secondsPerHour;
+    durationSec -= hours * secondsPerHour;
+    final long minutes = durationSec / secondsPerMinute;
+    durationSec -= minutes * secondsPerMinute;
+    final long seconds = durationSec;
+    final long milliseconds = durationMs % 1000;
+    String format = "%03d:%02d:%02d:%02d.%03d";
+    if (negative)  {
+      format = "-" + format;
+    }
+    return String.format(format, days, hours, minutes, seconds, milliseconds);
+  }
+
+  /**
+   * Converts a Date into an ISO-8601 formatted datetime string.
+   */
+  public static String dateToIso8601String(Date date) {
+    SimpleDateFormat df =
+        new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", Locale.ENGLISH);
+    return df.format(date);
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS5 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS39 INS85 INS42 INS4 INS65 INS5 INS42 INS5 INS42 INS25 INS25 INS41 INS65 INS39 INS85 INS5 INS42 INS25 INS60 INS24 INS60 INS60 INS24 INS41 INS65 INS42 INS39 INS42 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS21 INS60 INS21 INS60 INS21 INS60 INS60 INS60 INS25 INS41 INS65 INS42 INS43 INS42 INS60 INS41 INS66 INS39 INS85 INS39 INS85 INS27 INS8 INS27 INS8 INS32 INS66 INS39 INS85 INS85 INS27 INS8 INS25 INS39 INS59 INS58 INS27 INS37 INS8 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS66 INS39 INS59 INS27 INS8 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS7 INS83 INS39 INS59 INS7 INS83 INS39 INS59 INS7 INS83 INS39 INS59 INS83 INS39 INS59 INS43 INS59 INS42 INS8 INS32 INS66 INS42 INS43 INS59 INS32 INS42 INS33 INS21 INS42 INS33 INS21 INS32 INS42 INS42 INS42 INS40 INS34 INS41 INS27 INS8 INS42 INS34 INS39 INS59 INS42 INS40 INS42 INS21 INS25 INS39 INS85 INS42 INS3 INS42 INS34 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS25 INS42 INS9 INS42 INS34 INS21 INS21 INS42 INS27 INS42 INS34 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS27 INS36 INS41 INS42 INS34 INS7 INS27 INS8 INS5 INS42 INS42 INS34 INS32 INS7 INS27 INS8 INS7 INS7 INS42 INS34 INS34 INS34 INS34 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS7 INS43 INS45 INS40 INS42 INS42 INS42 INS42 INS40 INS34 INS27 INS3 INS42 INS22 INS42 INS27 INS21 INS39 INS85 INS42 INS42 INS2 INS34 INS42 INS42 INS22 INS42 INS22 INS42 INS27 INS21 INS21 INS42 INS9 INS42 INS38 INS42 INS27 INS42 INS27 INS27 INS5 INS4 INS2 INS42 INS40 INS34 INS37 INS42 INS42 INS2 INS42 INS2 INS42 INS40 INS34 INS7 INS37 INS42 INS45 INS42 INS2 INS33 INS22 INS34 INS39 INS85 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS11 INS42 INS42 INS34 INS2 INS42 INS39 INS40 INS42 INS42 INS39 INS40 INS42 INS34