HDDS-726. Ozone Client should update SCM to move the container out of allocation path in case a write transaction fails. Contributed by Shashikant Banerjee.

+import org.apache.hadoop.hdds.protocol.DatanodeDetails;
+import java.util.function.Predicate;
+   * Get list of pipeline corresponding to specified replication type,
+   * replication factor and pipeline state.
+   *
+   * @param type - ReplicationType
+   * @param state - Required PipelineState
+   * @param excludeDns list of dns to exclude
+   * @param excludePipelines pipelines to exclude
+   * @return List of pipelines with specified replication type,
+   * replication factor and pipeline state
+   */
+  List<Pipeline> getPipelines(ReplicationType type, ReplicationFactor factor,
+      PipelineState state, Collection<DatanodeDetails> excludeDns,
+      Collection<PipelineID> excludePipelines) {
+    Preconditions.checkNotNull(type, "Replication type cannot be null");
+    Preconditions.checkNotNull(factor, "Replication factor cannot be null");
+    Preconditions.checkNotNull(state, "Pipeline state cannot be null");
+    Preconditions
+        .checkNotNull(excludeDns, "Datanode exclude list cannot be null");
+    Preconditions
+        .checkNotNull(excludeDns, "Pipeline exclude list cannot be null");
+    return getPipelines(type, factor, state).stream().filter(
+        pipeline -> !discardPipeline(pipeline, excludePipelines)
+            && !discardDatanode(pipeline, excludeDns))
+        .collect(Collectors.toList());
+  }
+
+  private boolean discardPipeline(Pipeline pipeline,
+      Collection<PipelineID> excludePipelines) {
+    if (excludePipelines.isEmpty()) {
+      return false;
+    }
+    Predicate<PipelineID> predicate = p -> p.equals(pipeline.getId());
+    return excludePipelines.parallelStream().anyMatch(predicate);
+  }
+
+  private boolean discardDatanode(Pipeline pipeline,
+      Collection<DatanodeDetails> excludeDns) {
+    if (excludeDns.isEmpty()) {
+      return false;
+    }
+    boolean discard = false;
+    for (DatanodeDetails dn : pipeline.getNodes()) {
+      Predicate<DatanodeDetails> predicate = p -> p.equals(dn);
+      discard = excludeDns.parallelStream().anyMatch(predicate);
+      if (discard) {
+        break;
+      }
+    }
+    return discard;
+  }
+  /**

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS29 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS21 INS21 INS21 INS21 INS21 INS41 INS43 INS42 INS74 INS42 INS25 INS60 INS41 INS43 INS42 INS74 INS42 INS25 INS60 INS70 INS41 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS43 INS43 INS32 INS8 INS74 INS59 INS32 INS42 INS43 INS43 INS32 INS8 INS39 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS41 INS43 INS43 INS42 INS86 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS9 INS43 INS42 INS42 INS42 INS60 INS21 INS25 INS32 INS42 INS86 INS42 INS42 INS9 INS42 INS42 INS59 INS32 INS42 INS42 INS9 INS42 INS74 INS59 INS7 INS42 INS8 INS32 INS42 INS59 INS27 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS86 INS42 INS32 INS10 INS42 INS42 INS42 INS42 INS42 INS38 INS38 INS42 INS42 INS42 INS42 INS59 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42